#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821CB64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB64C);
		  /* 821CB64Ch */ case    0:  		/* mr R11, R23 */
		/* 821CB64Ch case    0:*/		regs.R11 = regs.R23;
		/* 821CB64Ch case    0:*/		return 0x821CB650;
	}
	return 0x821CB650;
} // Block from 821CB64Ch-821CB650h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB650);
		  /* 821CB650h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB650h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB650h case    0:*/		return 0x821CB654;
		  /* 821CB654h */ case    1:  		/* bc 12, CR0_EQ, -124 */
		/* 821CB654h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB5D8;  }
		/* 821CB654h case    1:*/		return 0x821CB658;
		  /* 821CB658h */ case    2:  		/* li R30, 1 */
		/* 821CB658h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821CB658h case    2:*/		return 0x821CB65C;
	}
	return 0x821CB65C;
} // Block from 821CB650h-821CB65Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB65C);
		  /* 821CB65Ch */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821CB65Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821CB65Ch case    0:*/		return 0x821CB660;
		  /* 821CB660h */ case    1:  		/* bc 4, CR0_EQ, -264 */
		/* 821CB660h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB558;  }
		/* 821CB660h case    1:*/		return 0x821CB664;
		  /* 821CB664h */ case    2:  		/* lwz R11, <#[R25]> */
		/* 821CB664h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CB664h case    2:*/		return 0x821CB668;
		  /* 821CB668h */ case    3:  		/* mr R10, R29 */
		/* 821CB668h case    3:*/		regs.R10 = regs.R29;
		/* 821CB668h case    3:*/		return 0x821CB66C;
		  /* 821CB66Ch */ case    4:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CB66Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CB66Ch case    4:*/		return 0x821CB670;
		  /* 821CB670h */ case    5:  		/* addic R9, R9, -1 */
		/* 821CB670h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CB670h case    5:*/		return 0x821CB674;
		  /* 821CB674h */ case    6:  		/* subfe R9, R9, R9 */
		/* 821CB674h case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CB674h case    6:*/		return 0x821CB678;
		  /* 821CB678h */ case    7:  		/* and R11, R9, R11 */
		/* 821CB678h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CB678h case    7:*/		return 0x821CB67C;
		  /* 821CB67Ch */ case    8:  		/* lwz R9, <#[R11 + 8]> */
		/* 821CB67Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB67Ch case    8:*/		return 0x821CB680;
		  /* 821CB680h */ case    9:  		/* cmplw CR6, R29, R9 */
		/* 821CB680h case    9:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821CB680h case    9:*/		return 0x821CB684;
		  /* 821CB684h */ case   10:  		/* bc 12, CR6_LT, 44 */
		/* 821CB684h case   10:*/		if ( regs.CR[6].lt ) { return 0x821CB6B0;  }
		/* 821CB684h case   10:*/		return 0x821CB688;
		  /* 821CB688h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB688h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB688h case   11:*/		return 0x821CB68C;
		  /* 821CB68Ch */ case   12:  		/* subf R10, R9, R10 */
		/* 821CB68Ch case   12:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821CB68Ch case   12:*/		return 0x821CB690;
		  /* 821CB690h */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CB690h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CB690h case   13:*/		return 0x821CB694;
		  /* 821CB694h */ case   14:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CB694h case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CB694h case   14:*/		return 0x821CB698;
		  /* 821CB698h */ case   15:  		/* addic R9, R9, -1 */
		/* 821CB698h case   15:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CB698h case   15:*/		return 0x821CB69C;
		  /* 821CB69Ch */ case   16:  		/* subfe R9, R9, R9 */
		/* 821CB69Ch case   16:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CB69Ch case   16:*/		return 0x821CB6A0;
		  /* 821CB6A0h */ case   17:  		/* and R11, R9, R11 */
		/* 821CB6A0h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CB6A0h case   17:*/		return 0x821CB6A4;
		  /* 821CB6A4h */ case   18:  		/* lwz R9, <#[R11 + 8]> */
		/* 821CB6A4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB6A4h case   18:*/		return 0x821CB6A8;
		  /* 821CB6A8h */ case   19:  		/* cmplw CR6, R10, R9 */
		/* 821CB6A8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CB6A8h case   19:*/		return 0x821CB6AC;
		  /* 821CB6ACh */ case   20:  		/* bc 4, CR6_LT, -36 */
		/* 821CB6ACh case   20:*/		if ( !regs.CR[6].lt ) { return 0x821CB688;  }
		/* 821CB6ACh case   20:*/		return 0x821CB6B0;
	}
	return 0x821CB6B0;
} // Block from 821CB65Ch-821CB6B0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CB6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB6B0);
		  /* 821CB6B0h */ case    0:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821CB6B0h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821CB6B0h case    0:*/		return 0x821CB6B4;
		  /* 821CB6B4h */ case    1:  		/* add R11, R10, R11 */
		/* 821CB6B4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB6B4h case    1:*/		return 0x821CB6B8;
		  /* 821CB6B8h */ case    2:  		/* addi R10, R11, 20 */
		/* 821CB6B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x14);
		/* 821CB6B8h case    2:*/		return 0x821CB6BC;
		  /* 821CB6BCh */ case    3:  		/* lwz R10, <#[R11 + 20]> */
		/* 821CB6BCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB6BCh case    3:*/		return 0x821CB6C0;
		  /* 821CB6C0h */ case    4:  		/* addi R10, R10, 1 */
		/* 821CB6C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CB6C0h case    4:*/		return 0x821CB6C4;
		  /* 821CB6C4h */ case    5:  		/* stw R10, <#[R11 + 20]> */
		/* 821CB6C4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB6C4h case    5:*/		return 0x821CB6C8;
		  /* 821CB6C8h */ case    6:  		/* b -368 */
		/* 821CB6C8h case    6:*/		return 0x821CB558;
		/* 821CB6C8h case    6:*/		return 0x821CB6CC;
	}
	return 0x821CB6CC;
} // Block from 821CB6B0h-821CB6CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CB6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB6CC);
		  /* 821CB6CCh */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821CB6CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CB6CCh case    0:*/		return 0x821CB6D0;
		  /* 821CB6D0h */ case    1:  		/* li R10, 1 */
		/* 821CB6D0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821CB6D0h case    1:*/		return 0x821CB6D4;
		  /* 821CB6D4h */ case    2:  		/* stw R31, <#[R1 + 80]> */
		/* 821CB6D4h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB6D4h case    2:*/		return 0x821CB6D8;
		  /* 821CB6D8h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CB6D8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CB6D8h case    3:*/		return 0x821CB6DC;
		  /* 821CB6DCh */ case    4:  		/* stw R10, <#[R1 + 84]> */
		/* 821CB6DCh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB6DCh case    4:*/		return 0x821CB6E0;
		  /* 821CB6E0h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB6E0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CB708;  }
		/* 821CB6E0h case    5:*/		return 0x821CB6E4;
		  /* 821CB6E4h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 821CB6E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821CB6E4h case    6:*/		return 0x821CB6E8;
		  /* 821CB6E8h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB6E8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB6E8h case    7:*/		return 0x821CB6EC;
		  /* 821CB6ECh */ case    8:  		/* addic. R3, R11, -4 */
		/* 821CB6ECh case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CB6ECh case    8:*/		return 0x821CB6F0;
		  /* 821CB6F0h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB6F0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CB708;  }
		/* 821CB6F0h case    9:*/		return 0x821CB6F4;
		  /* 821CB6F4h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CB6F4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB6F4h case   10:*/		return 0x821CB6F8;
		  /* 821CB6F8h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CB6F8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CB6F8h case   11:*/		return 0x821CB6FC;
		  /* 821CB6FCh */ case   12:  		/* addi R11, R11, 1 */
		/* 821CB6FCh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB6FCh case   12:*/		return 0x821CB700;
		  /* 821CB700h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821CB700h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CB700h case   13:*/		return 0x821CB704;
		  /* 821CB704h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821CB704h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CB714;  }
		/* 821CB704h case   14:*/		return 0x821CB708;
	}
	return 0x821CB708;
} // Block from 821CB6CCh-821CB708h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CB708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB708);
		  /* 821CB708h */ case    0:  		/* li R4, 1 */
		/* 821CB708h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB708h case    0:*/		return 0x821CB70C;
		  /* 821CB70Ch */ case    1:  		/* mr R3, R26 */
		/* 821CB70Ch case    1:*/		regs.R3 = regs.R26;
		/* 821CB70Ch case    1:*/		return 0x821CB710;
		  /* 821CB710h */ case    2:  		/* bl -182360 */
		/* 821CB710h case    2:*/		regs.LR = 0x821CB714; return 0x8219EEB8;
		/* 821CB710h case    2:*/		return 0x821CB714;
	}
	return 0x821CB714;
} // Block from 821CB708h-821CB714h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB714);
		  /* 821CB714h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CB714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB714h case    0:*/		return 0x821CB718;
		  /* 821CB718h */ case    1:  		/* ld R10, <#[R1 + 80]> */
		/* 821CB718h case    1:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB718h case    1:*/		return 0x821CB71C;
		  /* 821CB71Ch */ case    2:  		/* addi R9, R11, 2 */
		/* 821CB71Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821CB71Ch case    2:*/		return 0x821CB720;
		  /* 821CB720h */ case    3:  		/* addi R8, R11, 1 */
		/* 821CB720h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821CB720h case    3:*/		return 0x821CB724;
		  /* 821CB724h */ case    4:  		/* rlwinm R11, R9, 3, 0, 28 */
		/* 821CB724h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R9);
		/* 821CB724h case    4:*/		return 0x821CB728;
		  /* 821CB728h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821CB728h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB728h case    5:*/		return 0x821CB72C;
		  /* 821CB72Ch */ case    6:  		/* stdx R10, <#[R11 + R3]> */
		/* 821CB72Ch case    6:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CB72Ch case    6:*/		return 0x821CB730;
		  /* 821CB730h */ case    7:  		/* lwz R11, <#[R24]> */
		/* 821CB730h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821CB730h case    7:*/		return 0x821CB734;
		  /* 821CB734h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CB734h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CB734h case    8:*/		return 0x821CB738;
		  /* 821CB738h */ case    9:  		/* lwz R30, <#[R31]> */
		/* 821CB738h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB738h case    9:*/		return 0x821CB73C;
		  /* 821CB73Ch */ case   10:  		/* lwz R29, <#[R31 + 4]> */
		/* 821CB73Ch case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821CB73Ch case   10:*/		return 0x821CB740;
		  /* 821CB740h */ case   11:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CB740h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CB740h case   11:*/		return 0x821CB744;
		  /* 821CB744h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB744h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CB76C;  }
		/* 821CB744h case   12:*/		return 0x821CB748;
		  /* 821CB748h */ case   13:  		/* lwz R11, <#[R27]> */
		/* 821CB748h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CB748h case   13:*/		return 0x821CB74C;
		  /* 821CB74Ch */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB74Ch case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB74Ch case   14:*/		return 0x821CB750;
		  /* 821CB750h */ case   15:  		/* addic. R3, R11, -4 */
		/* 821CB750h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CB750h case   15:*/		return 0x821CB754;
		  /* 821CB754h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB754h case   16:*/		if ( regs.CR[0].eq ) { return 0x821CB76C;  }
		/* 821CB754h case   16:*/		return 0x821CB758;
		  /* 821CB758h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CB758h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB758h case   17:*/		return 0x821CB75C;
		  /* 821CB75Ch */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CB75Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CB75Ch case   18:*/		return 0x821CB760;
		  /* 821CB760h */ case   19:  		/* addi R11, R11, 1 */
		/* 821CB760h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB760h case   19:*/		return 0x821CB764;
		  /* 821CB764h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821CB764h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CB764h case   20:*/		return 0x821CB768;
		  /* 821CB768h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821CB768h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821CB778;  }
		/* 821CB768h case   21:*/		return 0x821CB76C;
	}
	return 0x821CB76C;
} // Block from 821CB714h-821CB76Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CB76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB76C);
		  /* 821CB76Ch */ case    0:  		/* li R4, 1 */
		/* 821CB76Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB76Ch case    0:*/		return 0x821CB770;
		  /* 821CB770h */ case    1:  		/* mr R3, R27 */
		/* 821CB770h case    1:*/		regs.R3 = regs.R27;
		/* 821CB770h case    1:*/		return 0x821CB774;
		  /* 821CB774h */ case    2:  		/* bl 157044 */
		/* 821CB774h case    2:*/		regs.LR = 0x821CB778; return 0x821F1CE8;
		/* 821CB774h case    2:*/		return 0x821CB778;
	}
	return 0x821CB778;
} // Block from 821CB76Ch-821CB778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB778);
		  /* 821CB778h */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CB778h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB778h case    0:*/		return 0x821CB77C;
		  /* 821CB77Ch */ case    1:  		/* mulli R11, R10, 12 */
		/* 821CB77Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0xC);
		/* 821CB77Ch case    1:*/		return 0x821CB780;
		  /* 821CB780h */ case    2:  		/* add R11, R11, R3 */
		/* 821CB780h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821CB780h case    2:*/		return 0x821CB784;
		  /* 821CB784h */ case    3:  		/* addi R9, R10, 1 */
		/* 821CB784h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 821CB784h case    3:*/		return 0x821CB788;
		  /* 821CB788h */ case    4:  		/* addi R10, R11, 16 */
		/* 821CB788h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 821CB788h case    4:*/		return 0x821CB78C;
		  /* 821CB78Ch */ case    5:  		/* stw R9, <#[R3 + 8]> */
		/* 821CB78Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB78Ch case    5:*/		return 0x821CB790;
		  /* 821CB790h */ case    6:  		/* stw R30, <#[R11 + 16]> */
		/* 821CB790h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821CB790h case    6:*/		return 0x821CB794;
		  /* 821CB794h */ case    7:  		/* stw R29, <#[R11 + 20]> */
		/* 821CB794h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB794h case    7:*/		return 0x821CB798;
		  /* 821CB798h */ case    8:  		/* stw R31, <#[R11 + 24]> */
		/* 821CB798h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB798h case    8:*/		return 0x821CB79C;
		  /* 821CB79Ch */ case    9:  		/* b -580 */
		/* 821CB79Ch case    9:*/		return 0x821CB558;
		/* 821CB79Ch case    9:*/		return 0x821CB7A0;
	}
	return 0x821CB7A0;
} // Block from 821CB778h-821CB7A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CB7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB7A0);
		  /* 821CB7A0h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821CB7A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CB7A0h case    0:*/		return 0x821CB7A4;
		  /* 821CB7A4h */ case    1:  		/* b -672 */
		/* 821CB7A4h case    1:*/		return 0x821CB504;
		/* 821CB7A4h case    1:*/		return 0x821CB7A8;
	}
	return 0x821CB7A8;
} // Block from 821CB7A0h-821CB7A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CB7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB7A8);
		  /* 821CB7A8h */ case    0:  		/* mr R3, R26 */
		/* 821CB7A8h case    0:*/		regs.R3 = regs.R26;
		/* 821CB7A8h case    0:*/		return 0x821CB7AC;
		  /* 821CB7ACh */ case    1:  		/* addi R1, R1, 224 */
		/* 821CB7ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821CB7ACh case    1:*/		return 0x821CB7B0;
		  /* 821CB7B0h */ case    2:  		/* b -1287452 */
		/* 821CB7B0h case    2:*/		return 0x82091294;
		/* 821CB7B0h case    2:*/		return 0x821CB7B4;
		  /* 821CB7B4h */ case    3:  		/* nop */
		/* 821CB7B4h case    3:*/		cpu::op::nop();
		/* 821CB7B4h case    3:*/		return 0x821CB7B8;
	}
	return 0x821CB7B8;
} // Block from 821CB7A8h-821CB7B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB7B8);
		  /* 821CB7B8h */ case    0:  		/* mfspr R12, LR */
		/* 821CB7B8h case    0:*/		regs.R12 = regs.LR;
		/* 821CB7B8h case    0:*/		return 0x821CB7BC;
		  /* 821CB7BCh */ case    1:  		/* bl -1287540 */
		/* 821CB7BCh case    1:*/		regs.LR = 0x821CB7C0; return 0x82091248;
		/* 821CB7BCh case    1:*/		return 0x821CB7C0;
		  /* 821CB7C0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821CB7C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821CB7C0h case    2:*/		return 0x821CB7C4;
		  /* 821CB7C4h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 821CB7C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821CB7C4h case    3:*/		return 0x821CB7C8;
		  /* 821CB7C8h */ case    4:  		/* li R24, 0 */
		/* 821CB7C8h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821CB7C8h case    4:*/		return 0x821CB7CC;
		  /* 821CB7CCh */ case    5:  		/* stw R4, <#[R1 + 80]> */
		/* 821CB7CCh case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB7CCh case    5:*/		return 0x821CB7D0;
		  /* 821CB7D0h */ case    6:  		/* mr R30, R3 */
		/* 821CB7D0h case    6:*/		regs.R30 = regs.R3;
		/* 821CB7D0h case    6:*/		return 0x821CB7D4;
		  /* 821CB7D4h */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CB7D4h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB7D4h case    7:*/		return 0x821CB7D8;
		  /* 821CB7D8h */ case    8:  		/* stw R24, <#[R1 + 88]> */
		/* 821CB7D8h case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB7D8h case    8:*/		return 0x821CB7DC;
		  /* 821CB7DCh */ case    9:  		/* addi R3, R1, 80 */
		/* 821CB7DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CB7DCh case    9:*/		return 0x821CB7E0;
		  /* 821CB7E0h */ case   10:  		/* addic R10, R10, -1 */
		/* 821CB7E0h case   10:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CB7E0h case   10:*/		return 0x821CB7E4;
		  /* 821CB7E4h */ case   11:  		/* mr R25, R4 */
		/* 821CB7E4h case   11:*/		regs.R25 = regs.R4;
		/* 821CB7E4h case   11:*/		return 0x821CB7E8;
		  /* 821CB7E8h */ case   12:  		/* subfe R10, R10, R10 */
		/* 821CB7E8h case   12:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CB7E8h case   12:*/		return 0x821CB7EC;
		  /* 821CB7ECh */ case   13:  		/* and R11, R10, R11 */
		/* 821CB7ECh case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB7ECh case   13:*/		return 0x821CB7F0;
		  /* 821CB7F0h */ case   14:  		/* stw R11, <#[R1 + 84]> */
		/* 821CB7F0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB7F0h case   14:*/		return 0x821CB7F4;
		  /* 821CB7F4h */ case   15:  		/* bl -43588 */
		/* 821CB7F4h case   15:*/		regs.LR = 0x821CB7F8; return 0x821C0DB0;
		/* 821CB7F4h case   15:*/		return 0x821CB7F8;
		  /* 821CB7F8h */ case   16:  		/* mr R31, R3 */
		/* 821CB7F8h case   16:*/		regs.R31 = regs.R3;
		/* 821CB7F8h case   16:*/		return 0x821CB7FC;
		  /* 821CB7FCh */ case   17:  		/* lwz R10, <#[R1 + 84]> */
		/* 821CB7FCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB7FCh case   17:*/		return 0x821CB800;
		  /* 821CB800h */ case   18:  		/* cmplwi CR6, R10, 0 */
		/* 821CB800h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CB800h case   18:*/		return 0x821CB804;
		  /* 821CB804h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB804h case   19:*/		if ( regs.CR[6].eq ) { return 0x821CB81C;  }
		/* 821CB804h case   19:*/		return 0x821CB808;
		  /* 821CB808h */ case   20:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CB808h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB808h case   20:*/		return 0x821CB80C;
		  /* 821CB80Ch */ case   21:  		/* lwz R9, <#[R1 + 88]> */
		/* 821CB80Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB80Ch case   21:*/		return 0x821CB810;
		  /* 821CB810h */ case   22:  		/* cmplw CR6, R9, R11 */
		/* 821CB810h case   22:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821CB810h case   22:*/		return 0x821CB814;
		  /* 821CB814h */ case   23:  		/* mr R11, R24 */
		/* 821CB814h case   23:*/		regs.R11 = regs.R24;
		/* 821CB814h case   23:*/		return 0x821CB818;
		  /* 821CB818h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB818h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821CB820;  }
		/* 821CB818h case   24:*/		return 0x821CB81C;
	}
	return 0x821CB81C;
} // Block from 821CB7B8h-821CB81Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821CB81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB81C);
		  /* 821CB81Ch */ case    0:  		/* li R11, 1 */
		/* 821CB81Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB81Ch case    0:*/		return 0x821CB820;
	}
	return 0x821CB820;
} // Block from 821CB81Ch-821CB820h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB820);
		  /* 821CB820h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB820h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB820h case    0:*/		return 0x821CB824;
		  /* 821CB824h */ case    1:  		/* bc 4, CR0_EQ, 44 */
		/* 821CB824h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB850;  }
		/* 821CB824h case    1:*/		return 0x821CB828;
		  /* 821CB828h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CB828h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CB828h case    2:*/		return 0x821CB82C;
		  /* 821CB82Ch */ case    3:  		/* bl -43644 */
		/* 821CB82Ch case    3:*/		regs.LR = 0x821CB830; return 0x821C0DB0;
		/* 821CB82Ch case    3:*/		return 0x821CB830;
		  /* 821CB830h */ case    4:  		/* mr R4, R31 */
		/* 821CB830h case    4:*/		regs.R4 = regs.R31;
		/* 821CB830h case    4:*/		return 0x821CB834;
		  /* 821CB834h */ case    5:  		/* mr R7, R3 */
		/* 821CB834h case    5:*/		regs.R7 = regs.R3;
		/* 821CB834h case    5:*/		return 0x821CB838;
		  /* 821CB838h */ case    6:  		/* bl -58040 */
		/* 821CB838h case    6:*/		regs.LR = 0x821CB83C; return 0x821BD580;
		/* 821CB838h case    6:*/		return 0x821CB83C;
		  /* 821CB83Ch */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CB83Ch case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CB83Ch case    7:*/		return 0x821CB840;
		  /* 821CB840h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 821CB840h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CB84C;  }
		/* 821CB840h case    8:*/		return 0x821CB844;
		  /* 821CB844h */ case    9:  		/* mr R31, R7 */
		/* 821CB844h case    9:*/		regs.R31 = regs.R7;
		/* 821CB844h case    9:*/		return 0x821CB848;
		  /* 821CB848h */ case   10:  		/* b -76 */
		/* 821CB848h case   10:*/		return 0x821CB7FC;
		/* 821CB848h case   10:*/		return 0x821CB84C;
	}
	return 0x821CB84C;
} // Block from 821CB820h-821CB84Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CB84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB84C);
		  /* 821CB84Ch */ case    0:  		/* lwz R10, <#[R1 + 84]> */
		/* 821CB84Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB84Ch case    0:*/		return 0x821CB850;
	}
	return 0x821CB850;
} // Block from 821CB84Ch-821CB850h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB850);
		  /* 821CB850h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821CB850h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CB850h case    0:*/		return 0x821CB854;
		  /* 821CB854h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB854h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CB86C;  }
		/* 821CB854h case    1:*/		return 0x821CB858;
		  /* 821CB858h */ case    2:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CB858h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB858h case    2:*/		return 0x821CB85C;
		  /* 821CB85Ch */ case    3:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CB85Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB85Ch case    3:*/		return 0x821CB860;
		  /* 821CB860h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CB860h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CB860h case    4:*/		return 0x821CB864;
		  /* 821CB864h */ case    5:  		/* mr R11, R24 */
		/* 821CB864h case    5:*/		regs.R11 = regs.R24;
		/* 821CB864h case    5:*/		return 0x821CB868;
		  /* 821CB868h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB868h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CB870;  }
		/* 821CB868h case    6:*/		return 0x821CB86C;
	}
	return 0x821CB86C;
} // Block from 821CB850h-821CB86Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CB86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB86C);
		  /* 821CB86Ch */ case    0:  		/* li R11, 1 */
		/* 821CB86Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB86Ch case    0:*/		return 0x821CB870;
	}
	return 0x821CB870;
} // Block from 821CB86Ch-821CB870h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB870);
		  /* 821CB870h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB870h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB870h case    0:*/		return 0x821CB874;
		  /* 821CB874h */ case    1:  		/* bc 4, CR0_EQ, 332 */
		/* 821CB874h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB9C0;  }
		/* 821CB874h case    1:*/		return 0x821CB878;
		  /* 821CB878h */ case    2:  		/* li R5, 51 */
		/* 821CB878h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821CB878h case    2:*/		return 0x821CB87C;
		  /* 821CB87Ch */ case    3:  		/* li R4, 8 */
		/* 821CB87Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CB87Ch case    3:*/		return 0x821CB880;
		  /* 821CB880h */ case    4:  		/* mr R3, R30 */
		/* 821CB880h case    4:*/		regs.R3 = regs.R30;
		/* 821CB880h case    4:*/		return 0x821CB884;
		  /* 821CB884h */ case    5:  		/* bl -421780 */
		/* 821CB884h case    5:*/		regs.LR = 0x821CB888; return 0x821648F0;
		/* 821CB884h case    5:*/		return 0x821CB888;
		  /* 821CB888h */ case    6:  		/* addi R26, R3, 4 */
		/* 821CB888h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 821CB888h case    6:*/		return 0x821CB88C;
		  /* 821CB88Ch */ case    7:  		/* ori R11, R3, 1 */
		/* 821CB88Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CB88Ch case    7:*/		return 0x821CB890;
		  /* 821CB890h */ case    8:  		/* ori R10, R26, 1 */
		/* 821CB890h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R26,0x1);
		/* 821CB890h case    8:*/		return 0x821CB894;
		  /* 821CB894h */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 821CB894h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB894h case    9:*/		return 0x821CB898;
		  /* 821CB898h */ case   10:  		/* mr R4, R25 */
		/* 821CB898h case   10:*/		regs.R4 = regs.R25;
		/* 821CB898h case   10:*/		return 0x821CB89C;
		  /* 821CB89Ch */ case   11:  		/* stw R10, <#[R3]> */
		/* 821CB89Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB89Ch case   11:*/		return 0x821CB8A0;
		  /* 821CB8A0h */ case   12:  		/* mr R27, R3 */
		/* 821CB8A0h case   12:*/		regs.R27 = regs.R3;
		/* 821CB8A0h case   12:*/		return 0x821CB8A4;
		  /* 821CB8A4h */ case   13:  		/* bl 140740 */
		/* 821CB8A4h case   13:*/		regs.LR = 0x821CB8A8; return 0x821EDE68;
		/* 821CB8A4h case   13:*/		return 0x821CB8A8;
		  /* 821CB8A8h */ case   14:  		/* lwz R11, <#[R26]> */
		/* 821CB8A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821CB8A8h case   14:*/		return 0x821CB8AC;
		  /* 821CB8ACh */ case   15:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CB8ACh case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB8ACh case   15:*/		return 0x821CB8B0;
		  /* 821CB8B0h */ case   16:  		/* bc 4, CR0_EQ, 272 */
		/* 821CB8B0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821CB9C0;  }
		/* 821CB8B0h case   16:*/		return 0x821CB8B4;
		  /* 821CB8B4h */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 821CB8B4h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CB8B4h case   17:*/		return 0x821CB8B8;
		  /* 821CB8B8h */ case   18:  		/* bc 12, CR0_EQ, 264 */
		/* 821CB8B8h case   18:*/		if ( regs.CR[0].eq ) { return 0x821CB9C0;  }
		/* 821CB8B8h case   18:*/		return 0x821CB8BC;
		  /* 821CB8BCh */ case   19:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821CB8BCh case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821CB8BCh case   19:*/		return 0x821CB8C0;
		  /* 821CB8C0h */ case   20:  		/* stw R27, <#[R1 + 80]> */
		/* 821CB8C0h case   20:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB8C0h case   20:*/		return 0x821CB8C4;
		  /* 821CB8C4h */ case   21:  		/* stw R24, <#[R1 + 88]> */
		/* 821CB8C4h case   21:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB8C4h case   21:*/		return 0x821CB8C8;
		  /* 821CB8C8h */ case   22:  		/* addi R3, R1, 80 */
		/* 821CB8C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CB8C8h case   22:*/		return 0x821CB8CC;
		  /* 821CB8CCh */ case   23:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CB8CCh case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB8CCh case   23:*/		return 0x821CB8D0;
		  /* 821CB8D0h */ case   24:  		/* addic R10, R10, -1 */
		/* 821CB8D0h case   24:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CB8D0h case   24:*/		return 0x821CB8D4;
		  /* 821CB8D4h */ case   25:  		/* subfe R10, R10, R10 */
		/* 821CB8D4h case   25:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CB8D4h case   25:*/		return 0x821CB8D8;
		  /* 821CB8D8h */ case   26:  		/* and R11, R10, R11 */
		/* 821CB8D8h case   26:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB8D8h case   26:*/		return 0x821CB8DC;
		  /* 821CB8DCh */ case   27:  		/* stw R11, <#[R1 + 84]> */
		/* 821CB8DCh case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB8DCh case   27:*/		return 0x821CB8E0;
		  /* 821CB8E0h */ case   28:  		/* bl -43824 */
		/* 821CB8E0h case   28:*/		regs.LR = 0x821CB8E4; return 0x821C0DB0;
		/* 821CB8E0h case   28:*/		return 0x821CB8E4;
		  /* 821CB8E4h */ case   29:  		/* mr R31, R3 */
		/* 821CB8E4h case   29:*/		regs.R31 = regs.R3;
		/* 821CB8E4h case   29:*/		return 0x821CB8E8;
		  /* 821CB8E8h */ case   30:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CB8E8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB8E8h case   30:*/		return 0x821CB8EC;
		  /* 821CB8ECh */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821CB8ECh case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CB8ECh case   31:*/		return 0x821CB8F0;
		  /* 821CB8F0h */ case   32:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB8F0h case   32:*/		if ( regs.CR[6].eq ) { return 0x821CB908;  }
		/* 821CB8F0h case   32:*/		return 0x821CB8F4;
		  /* 821CB8F4h */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CB8F4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB8F4h case   33:*/		return 0x821CB8F8;
		  /* 821CB8F8h */ case   34:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CB8F8h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB8F8h case   34:*/		return 0x821CB8FC;
		  /* 821CB8FCh */ case   35:  		/* cmplw CR6, R10, R11 */
		/* 821CB8FCh case   35:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CB8FCh case   35:*/		return 0x821CB900;
		  /* 821CB900h */ case   36:  		/* mr R11, R24 */
		/* 821CB900h case   36:*/		regs.R11 = regs.R24;
		/* 821CB900h case   36:*/		return 0x821CB904;
		  /* 821CB904h */ case   37:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB904h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821CB90C;  }
		/* 821CB904h case   37:*/		return 0x821CB908;
	}
	return 0x821CB908;
} // Block from 821CB870h-821CB908h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821CB908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB908);
		  /* 821CB908h */ case    0:  		/* li R11, 1 */
		/* 821CB908h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB908h case    0:*/		return 0x821CB90C;
	}
	return 0x821CB90C;
} // Block from 821CB908h-821CB90Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB90C);
		  /* 821CB90Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB90Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB90Ch case    0:*/		return 0x821CB910;
		  /* 821CB910h */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB910h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB938;  }
		/* 821CB910h case    1:*/		return 0x821CB914;
		  /* 821CB914h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CB914h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CB914h case    2:*/		return 0x821CB918;
		  /* 821CB918h */ case    3:  		/* bl -43880 */
		/* 821CB918h case    3:*/		regs.LR = 0x821CB91C; return 0x821C0DB0;
		/* 821CB918h case    3:*/		return 0x821CB91C;
		  /* 821CB91Ch */ case    4:  		/* mr R4, R31 */
		/* 821CB91Ch case    4:*/		regs.R4 = regs.R31;
		/* 821CB91Ch case    4:*/		return 0x821CB920;
		  /* 821CB920h */ case    5:  		/* mr R7, R3 */
		/* 821CB920h case    5:*/		regs.R7 = regs.R3;
		/* 821CB920h case    5:*/		return 0x821CB924;
		  /* 821CB924h */ case    6:  		/* bl -58276 */
		/* 821CB924h case    6:*/		regs.LR = 0x821CB928; return 0x821BD580;
		/* 821CB924h case    6:*/		return 0x821CB928;
		  /* 821CB928h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CB928h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CB928h case    7:*/		return 0x821CB92C;
		  /* 821CB92Ch */ case    8:  		/* bc 12, CR0_EQ, -68 */
		/* 821CB92Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821CB8E8;  }
		/* 821CB92Ch case    8:*/		return 0x821CB930;
		  /* 821CB930h */ case    9:  		/* mr R31, R7 */
		/* 821CB930h case    9:*/		regs.R31 = regs.R7;
		/* 821CB930h case    9:*/		return 0x821CB934;
		  /* 821CB934h */ case   10:  		/* b -76 */
		/* 821CB934h case   10:*/		return 0x821CB8E8;
		/* 821CB934h case   10:*/		return 0x821CB938;
	}
	return 0x821CB938;
} // Block from 821CB90Ch-821CB938h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CB938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB938);
		  /* 821CB938h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 821CB938h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821CB938h case    0:*/		return 0x821CB93C;
		  /* 821CB93Ch */ case    1:  		/* lwz R30, <#[R31]> */
		/* 821CB93Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB93Ch case    1:*/		return 0x821CB940;
		  /* 821CB940h */ case    2:  		/* lwz R29, <#[R31 + 4]> */
		/* 821CB940h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821CB940h case    2:*/		return 0x821CB944;
		  /* 821CB944h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CB944h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CB944h case    3:*/		return 0x821CB948;
		  /* 821CB948h */ case    4:  		/* lwz R28, <#[R31 + 8]> */
		/* 821CB948h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 821CB948h case    4:*/		return 0x821CB94C;
		  /* 821CB94Ch */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB94Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CB974;  }
		/* 821CB94Ch case    5:*/		return 0x821CB950;
		  /* 821CB950h */ case    6:  		/* lwz R11, <#[R25]> */
		/* 821CB950h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CB950h case    6:*/		return 0x821CB954;
		  /* 821CB954h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB954h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB954h case    7:*/		return 0x821CB958;
		  /* 821CB958h */ case    8:  		/* addic. R10, R11, -4 */
		/* 821CB958h case    8:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 821CB958h case    8:*/		return 0x821CB95C;
		  /* 821CB95Ch */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB95Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821CB974;  }
		/* 821CB95Ch case    9:*/		return 0x821CB960;
		  /* 821CB960h */ case   10:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CB960h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB960h case   10:*/		return 0x821CB964;
		  /* 821CB964h */ case   11:  		/* lwz R9, <#[R10 + 12]> */
		/* 821CB964h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821CB964h case   11:*/		return 0x821CB968;
		  /* 821CB968h */ case   12:  		/* addi R11, R11, 1 */
		/* 821CB968h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB968h case   12:*/		return 0x821CB96C;
		  /* 821CB96Ch */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 821CB96Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821CB96Ch case   13:*/		return 0x821CB970;
		  /* 821CB970h */ case   14:  		/* bc 4, CR6_GT, 20 */
		/* 821CB970h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CB984;  }
		/* 821CB970h case   14:*/		return 0x821CB974;
	}
	return 0x821CB974;
} // Block from 821CB938h-821CB974h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CB974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB974);
		  /* 821CB974h */ case    0:  		/* li R4, 1 */
		/* 821CB974h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB974h case    0:*/		return 0x821CB978;
		  /* 821CB978h */ case    1:  		/* mr R3, R25 */
		/* 821CB978h case    1:*/		regs.R3 = regs.R25;
		/* 821CB978h case    1:*/		return 0x821CB97C;
		  /* 821CB97Ch */ case    2:  		/* bl 156524 */
		/* 821CB97Ch case    2:*/		regs.LR = 0x821CB980; return 0x821F1CE8;
		/* 821CB97Ch case    2:*/		return 0x821CB980;
		  /* 821CB980h */ case    3:  		/* mr R10, R3 */
		/* 821CB980h case    3:*/		regs.R10 = regs.R3;
		/* 821CB980h case    3:*/		return 0x821CB984;
	}
	return 0x821CB984;
} // Block from 821CB974h-821CB984h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB984);
		  /* 821CB984h */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 821CB984h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB984h case    0:*/		return 0x821CB988;
		  /* 821CB988h */ case    1:  		/* mr R3, R27 */
		/* 821CB988h case    1:*/		regs.R3 = regs.R27;
		/* 821CB988h case    1:*/		return 0x821CB98C;
		  /* 821CB98Ch */ case    2:  		/* mulli R11, R9, 12 */
		/* 821CB98Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0xC);
		/* 821CB98Ch case    2:*/		return 0x821CB990;
		  /* 821CB990h */ case    3:  		/* add R11, R11, R10 */
		/* 821CB990h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CB990h case    3:*/		return 0x821CB994;
		  /* 821CB994h */ case    4:  		/* addi R8, R9, 1 */
		/* 821CB994h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x1);
		/* 821CB994h case    4:*/		return 0x821CB998;
		  /* 821CB998h */ case    5:  		/* addi R9, R11, 16 */
		/* 821CB998h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 821CB998h case    5:*/		return 0x821CB99C;
		  /* 821CB99Ch */ case    6:  		/* stw R8, <#[R10 + 8]> */
		/* 821CB99Ch case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB99Ch case    6:*/		return 0x821CB9A0;
		  /* 821CB9A0h */ case    7:  		/* stw R30, <#[R11 + 16]> */
		/* 821CB9A0h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821CB9A0h case    7:*/		return 0x821CB9A4;
		  /* 821CB9A4h */ case    8:  		/* stw R29, <#[R11 + 20]> */
		/* 821CB9A4h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB9A4h case    8:*/		return 0x821CB9A8;
		  /* 821CB9A8h */ case    9:  		/* stw R28, <#[R11 + 24]> */
		/* 821CB9A8h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB9A8h case    9:*/		return 0x821CB9AC;
		  /* 821CB9ACh */ case   10:  		/* ld R4, <#[R31]> */
		/* 821CB9ACh case   10:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB9ACh case   10:*/		return 0x821CB9B0;
		  /* 821CB9B0h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CB9B0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CB9B0h case   11:*/		return 0x821CB9B4;
		  /* 821CB9B4h */ case   12:  		/* rldicr R5, R11, 32, 63 */
		/* 821CB9B4h case   12:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R5,regs.R11);
		/* 821CB9B4h case   12:*/		return 0x821CB9B8;
		  /* 821CB9B8h */ case   13:  		/* bl -18072 */
		/* 821CB9B8h case   13:*/		regs.LR = 0x821CB9BC; return 0x821C7320;
		/* 821CB9B8h case   13:*/		return 0x821CB9BC;
		  /* 821CB9BCh */ case   14:  		/* b -276 */
		/* 821CB9BCh case   14:*/		return 0x821CB8A8;
		/* 821CB9BCh case   14:*/		return 0x821CB9C0;
	}
	return 0x821CB9C0;
} // Block from 821CB984h-821CB9C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CB9C0h
// Function '?AppendProductTerm@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVDependency@2@W4Component@2@PAVInstruction@2@PAW4ConstantValueType@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB9C0);
		  /* 821CB9C0h */ case    0:  		/* addi R1, R1, 176 */
		/* 821CB9C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821CB9C0h case    0:*/		return 0x821CB9C4;
		  /* 821CB9C4h */ case    1:  		/* b -1287980 */
		/* 821CB9C4h case    1:*/		return 0x82091298;
		/* 821CB9C4h case    1:*/		return 0x821CB9C8;
	}
	return 0x821CB9C8;
} // Block from 821CB9C0h-821CB9C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CB9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB9C8);
		  /* 821CB9C8h */ case    0:  		/* mfspr R12, LR */
		/* 821CB9C8h case    0:*/		regs.R12 = regs.LR;
		/* 821CB9C8h case    0:*/		return 0x821CB9CC;
		  /* 821CB9CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821CB9CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821CB9CCh case    1:*/		return 0x821CB9D0;
		  /* 821CB9D0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821CB9D0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821CB9D0h case    2:*/		return 0x821CB9D4;
		  /* 821CB9D4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821CB9D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821CB9D4h case    3:*/		return 0x821CB9D8;
		  /* 821CB9D8h */ case    4:  		/* lwz R11, <#[R4 + 8]> */
		/* 821CB9D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CB9D8h case    4:*/		return 0x821CB9DC;
		  /* 821CB9DCh */ case    5:  		/* mr R31, R4 */
		/* 821CB9DCh case    5:*/		regs.R31 = regs.R4;
		/* 821CB9DCh case    5:*/		return 0x821CB9E0;
		  /* 821CB9E0h */ case    6:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821CB9E0h case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB9E0h case    6:*/		return 0x821CB9E4;
		  /* 821CB9E4h */ case    7:  		/* bc 4, CR0_EQ, 100 */
		/* 821CB9E4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821CBA48;  }
		/* 821CB9E4h case    7:*/		return 0x821CB9E8;
		  /* 821CB9E8h */ case    8:  		/* oris R11, R11, 1024 */
		/* 821CB9E8h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821CB9E8h case    8:*/		return 0x821CB9EC;
		  /* 821CB9ECh */ case    9:  		/* stw R11, <#[R4 + 8]> */
		/* 821CB9ECh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CB9ECh case    9:*/		return 0x821CB9F0;
		  /* 821CB9F0h */ case   10:  		/* lwz R11, <#[R5 + 4]> */
		/* 821CB9F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821CB9F0h case   10:*/		return 0x821CB9F4;
		  /* 821CB9F4h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CB9F4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CB9F4h case   11:*/		return 0x821CB9F8;
		  /* 821CB9F8h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB9F8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CBA20;  }
		/* 821CB9F8h case   12:*/		return 0x821CB9FC;
		  /* 821CB9FCh */ case   13:  		/* lwz R11, <#[R5]> */
		/* 821CB9FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821CB9FCh case   13:*/		return 0x821CBA00;
		  /* 821CBA00h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CBA00h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CBA00h case   14:*/		return 0x821CBA04;
		  /* 821CBA04h */ case   15:  		/* addic. R11, R11, -4 */
		/* 821CBA04h case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CBA04h case   15:*/		return 0x821CBA08;
		  /* 821CBA08h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821CBA08h case   16:*/		if ( regs.CR[0].eq ) { return 0x821CBA20;  }
		/* 821CBA08h case   16:*/		return 0x821CBA0C;
		  /* 821CBA0Ch */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CBA0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CBA0Ch case   17:*/		return 0x821CBA10;
		  /* 821CBA10h */ case   18:  		/* lwz R9, <#[R11 + 12]> */
		/* 821CBA10h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CBA10h case   18:*/		return 0x821CBA14;
		  /* 821CBA14h */ case   19:  		/* addi R10, R10, 1 */
		/* 821CBA14h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CBA14h case   19:*/		return 0x821CBA18;
		  /* 821CBA18h */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 821CBA18h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CBA18h case   20:*/		return 0x821CBA1C;
		  /* 821CBA1Ch */ case   21:  		/* bc 4, CR6_GT, 20 */
		/* 821CBA1Ch case   21:*/		if ( !regs.CR[6].gt ) { return 0x821CBA30;  }
		/* 821CBA1Ch case   21:*/		return 0x821CBA20;
	}
	return 0x821CBA20;
} // Block from 821CB9C8h-821CBA20h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA20);
		  /* 821CBA20h */ case    0:  		/* li R4, 1 */
		/* 821CBA20h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CBA20h case    0:*/		return 0x821CBA24;
		  /* 821CBA24h */ case    1:  		/* mr R3, R5 */
		/* 821CBA24h case    1:*/		regs.R3 = regs.R5;
		/* 821CBA24h case    1:*/		return 0x821CBA28;
		  /* 821CBA28h */ case    2:  		/* bl -256352 */
		/* 821CBA28h case    2:*/		regs.LR = 0x821CBA2C; return 0x8218D0C8;
		/* 821CBA28h case    2:*/		return 0x821CBA2C;
		  /* 821CBA2Ch */ case    3:  		/* mr R11, R3 */
		/* 821CBA2Ch case    3:*/		regs.R11 = regs.R3;
		/* 821CBA2Ch case    3:*/		return 0x821CBA30;
	}
	return 0x821CBA30;
} // Block from 821CBA20h-821CBA30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA30);
		  /* 821CBA30h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CBA30h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CBA30h case    0:*/		return 0x821CBA34;
		  /* 821CBA34h */ case    1:  		/* addi R9, R10, 4 */
		/* 821CBA34h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CBA34h case    1:*/		return 0x821CBA38;
		  /* 821CBA38h */ case    2:  		/* addi R8, R10, 1 */
		/* 821CBA38h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821CBA38h case    2:*/		return 0x821CBA3C;
		  /* 821CBA3Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821CBA3Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821CBA3Ch case    3:*/		return 0x821CBA40;
		  /* 821CBA40h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821CBA40h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821CBA40h case    4:*/		return 0x821CBA44;
		  /* 821CBA44h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821CBA44h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821CBA44h case    5:*/		return 0x821CBA48;
	}
	return 0x821CBA48;
} // Block from 821CBA30h-821CBA48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA48);
		  /* 821CBA48h */ case    0:  		/* addi R1, R1, 96 */
		/* 821CBA48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821CBA48h case    0:*/		return 0x821CBA4C;
		  /* 821CBA4Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821CBA4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821CBA4Ch case    1:*/		return 0x821CBA50;
		  /* 821CBA50h */ case    2:  		/* mtspr LR, R12 */
		/* 821CBA50h case    2:*/		regs.LR = regs.R12;
		/* 821CBA50h case    2:*/		return 0x821CBA54;
		  /* 821CBA54h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821CBA54h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821CBA54h case    3:*/		return 0x821CBA58;
		  /* 821CBA58h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821CBA58h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821CBA58h case    4:*/		return 0x821CBA5C;
	}
	return 0x821CBA5C;
} // Block from 821CBA48h-821CBA5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA5C);
		  /* 821CBA5Ch */ case    0:  		/* nop */
		/* 821CBA5Ch case    0:*/		cpu::op::nop();
		/* 821CBA5Ch case    0:*/		return 0x821CBA60;
	}
	return 0x821CBA60;
} // Block from 821CBA5Ch-821CBA60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA60);
		  /* 821CBA60h */ case    0:  		/* mfspr R12, LR */
		/* 821CBA60h case    0:*/		regs.R12 = regs.LR;
		/* 821CBA60h case    0:*/		return 0x821CBA64;
		  /* 821CBA64h */ case    1:  		/* bl -1288200 */
		/* 821CBA64h case    1:*/		regs.LR = 0x821CBA68; return 0x8209125C;
		/* 821CBA64h case    1:*/		return 0x821CBA68;
		  /* 821CBA68h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821CBA68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821CBA68h case    2:*/		return 0x821CBA6C;
		  /* 821CBA6Ch */ case    3:  		/* lwz R31, <#[R4 + 4]> */
		/* 821CBA6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 821CBA6Ch case    3:*/		return 0x821CBA70;
		  /* 821CBA70h */ case    4:  		/* mr R30, R3 */
		/* 821CBA70h case    4:*/		regs.R30 = regs.R3;
		/* 821CBA70h case    4:*/		return 0x821CBA74;
		  /* 821CBA74h */ case    5:  		/* mr R29, R5 */
		/* 821CBA74h case    5:*/		regs.R29 = regs.R5;
		/* 821CBA74h case    5:*/		return 0x821CBA78;
		  /* 821CBA78h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821CBA78h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CBA78h case    6:*/		return 0x821CBA7C;
		  /* 821CBA7Ch */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 821CBA7Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821CBAA0;  }
		/* 821CBA7Ch case    7:*/		return 0x821CBA80;
	}
	return 0x821CBA80;
} // Block from 821CBA60h-821CBA80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA80h
// Function '?AppendProductTermsFromBinaryOperator@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVInstruction@2@W4Component@2@1PAW4ConstantValueType@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA80);
		  /* 821CBA80h */ case    0:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CBA80h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CBA80h case    0:*/		return 0x821CBA84;
		  /* 821CBA84h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821CBA84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CBA84h case    1:*/		return 0x821CBA88;
		  /* 821CBA88h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821CBA88h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CBA98;  }
		/* 821CBA88h case    2:*/		return 0x821CBA8C;
		  /* 821CBA8Ch */ case    3:  		/* mr R5, R29 */
		/* 821CBA8Ch case    3:*/		regs.R5 = regs.R29;
		/* 821CBA8Ch case    3:*/		return 0x821CBA90;
		  /* 821CBA90h */ case    4:  		/* mr R3, R30 */
		/* 821CBA90h case    4:*/		regs.R3 = regs.R30;
		/* 821CBA90h case    4:*/		return 0x821CBA94;
		  /* 821CBA94h */ case    5:  		/* bl -204 */
		/* 821CBA94h case    5:*/		regs.LR = 0x821CBA98; return 0x821CB9C8;
		/* 821CBA94h case    5:*/		return 0x821CBA98;
	}
	return 0x821CBA98;
} // Block from 821CBA80h-821CBA98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CBA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBA98);
		  /* 821CBA98h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CBA98h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CBA98h case    0:*/		return 0x821CBA9C;
		  /* 821CBA9Ch */ case    1:  		/* b -36 */
		/* 821CBA9Ch case    1:*/		return 0x821CBA78;
		/* 821CBA9Ch case    1:*/		return 0x821CBAA0;
	}
	return 0x821CBAA0;
} // Block from 821CBA98h-821CBAA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBAA0);
		  /* 821CBAA0h */ case    0:  		/* addi R1, R1, 112 */
		/* 821CBAA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821CBAA0h case    0:*/		return 0x821CBAA4;
		  /* 821CBAA4h */ case    1:  		/* b -1288184 */
		/* 821CBAA4h case    1:*/		return 0x820912AC;
		/* 821CBAA4h case    1:*/		return 0x821CBAA8;
	}
	return 0x821CBAA8;
} // Block from 821CBAA0h-821CBAA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBAA8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBAA8);
		  /* 821CBAA8h */ case    0:  		/* mfspr R12, LR */
		/* 821CBAA8h case    0:*/		regs.R12 = regs.LR;
		/* 821CBAA8h case    0:*/		return 0x821CBAAC;
		  /* 821CBAACh */ case    1:  		/* bl -1288296 */
		/* 821CBAACh case    1:*/		regs.LR = 0x821CBAB0; return 0x82091244;
		/* 821CBAACh case    1:*/		return 0x821CBAB0;
		  /* 821CBAB0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CBAB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CBAB0h case    2:*/		return 0x821CBAB4;
		  /* 821CBAB4h */ case    3:  		/* mr R26, R3 */
		/* 821CBAB4h case    3:*/		regs.R26 = regs.R3;
		/* 821CBAB4h case    3:*/		return 0x821CBAB8;
		  /* 821CBAB8h */ case    4:  		/* mr R28, R4 */
		/* 821CBAB8h case    4:*/		regs.R28 = regs.R4;
		/* 821CBAB8h case    4:*/		return 0x821CBABC;
		  /* 821CBABCh */ case    5:  		/* mr R25, R5 */
		/* 821CBABCh case    5:*/		regs.R25 = regs.R5;
		/* 821CBABCh case    5:*/		return 0x821CBAC0;
		  /* 821CBAC0h */ case    6:  		/* mr R29, R6 */
		/* 821CBAC0h case    6:*/		regs.R29 = regs.R6;
		/* 821CBAC0h case    6:*/		return 0x821CBAC4;
		  /* 821CBAC4h */ case    7:  		/* mr R24, R7 */
		/* 821CBAC4h case    7:*/		regs.R24 = regs.R7;
		/* 821CBAC4h case    7:*/		return 0x821CBAC8;
		  /* 821CBAC8h */ case    8:  		/* li R30, 0 */
		/* 821CBAC8h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CBAC8h case    8:*/		return 0x821CBACC;
		  /* 821CBACCh */ case    9:  		/* addi R31, R4, 44 */
		/* 821CBACCh case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R4,0x2C);
		/* 821CBACCh case    9:*/		return 0x821CBAD0;
		  /* 821CBAD0h */ case   10:  		/* li R23, 1 */
		/* 821CBAD0h case   10:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821CBAD0h case   10:*/		return 0x821CBAD4;
		  /* 821CBAD4h */ case   11:  		/* li R27, 3 */
		/* 821CBAD4h case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x3);
		/* 821CBAD4h case   11:*/		return 0x821CBAD8;
		  /* 821CBAD8h */ case   12:  		/* lwz R11, <#[R28 + 8]> */
		/* 821CBAD8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821CBAD8h case   12:*/		return 0x821CBADC;
		  /* 821CBADCh */ case   13:  		/* li R8, 0 */
		/* 821CBADCh case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CBADCh case   13:*/		return 0x821CBAE0;
		  /* 821CBAE0h */ case   14:  		/* li R5, 0 */
		/* 821CBAE0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CBAE0h case   14:*/		return 0x821CBAE4;
		  /* 821CBAE4h */ case   15:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821CBAE4h case   15:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821CBAE4h case   15:*/		return 0x821CBAE8;
		  /* 821CBAE8h */ case   16:  		/* li R6, 0 */
		/* 821CBAE8h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CBAE8h case   16:*/		return 0x821CBAEC;
		  /* 821CBAECh */ case   17:  		/* cmplw CR6, R30, R11 */
		/* 821CBAECh case   17:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821CBAECh case   17:*/		return 0x821CBAF0;
		  /* 821CBAF0h */ case   18:  		/* bc 4, CR6_LT, 152 */
		/* 821CBAF0h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821CBB88;  }
		/* 821CBAF0h case   18:*/		return 0x821CBAF4;
		  /* 821CBAF4h */ case   19:  		/* li R7, 4 */
		/* 821CBAF4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 821CBAF4h case   19:*/		return 0x821CBAF8;
		  /* 821CBAF8h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 821CBAF8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CBAF8h case   20:*/		return 0x821CBAFC;
		  /* 821CBAFCh */ case   21:  		/* li R9, 0 */
		/* 821CBAFCh case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821CBAFCh case   21:*/		return 0x821CBB00;
		  /* 821CBB00h */ case   22:  		/* li R10, 0 */
		/* 821CBB00h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CBB00h case   22:*/		return 0x821CBB04;
		  /* 821CBB04h */ case   23:  		/* mtspr CTR, R7 */
		/* 821CBB04h case   23:*/		regs.CTR = regs.R7;
		/* 821CBB04h case   23:*/		return 0x821CBB08;
		  /* 821CBB08h */ case   24:  		/* slw R7, R23, R5 */
		/* 821CBB08h case   24:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R23,regs.R5);
		/* 821CBB08h case   24:*/		return 0x821CBB0C;
		  /* 821CBB0Ch */ case   25:  		/* and. R7, R7, R25 */
		/* 821CBB0Ch case   25:*/		cpu::op::and<1>(regs,&regs.R7,regs.R7,regs.R25);
		/* 821CBB0Ch case   25:*/		return 0x821CBB10;
		  /* 821CBB10h */ case   26:  		/* bc 12, CR0_EQ, 44 */
		/* 821CBB10h case   26:*/		if ( regs.CR[0].eq ) { return 0x821CBB3C;  }
		/* 821CBB10h case   26:*/		return 0x821CBB14;
		  /* 821CBB14h */ case   27:  		/* lwz R7, <#[R11]> */
		/* 821CBB14h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBB14h case   27:*/		return 0x821CBB18;
	}
	return 0x821CBB18;
} // Block from 821CBAA8h-821CBB18h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821CBB18h
// Function '?HandleSumOperand@Compiler@D3DXShader@@AAAXPAVInstruction@2@IW4Component@2@PAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAW4ConstantValueType@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBB18);
		  /* 821CBB18h */ case    0:  		/* slw R4, R27, R10 */
		/* 821CBB18h case    0:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R27,regs.R10);
		/* 821CBB18h case    0:*/		return 0x821CBB1C;
		  /* 821CBB1Ch */ case    1:  		/* rlwinm R7, R7, 27, 24, 31 */
		/* 821CBB1Ch case    1:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R7);
		/* 821CBB1Ch case    1:*/		return 0x821CBB20;
		  /* 821CBB20h */ case    2:  		/* andc R9, R9, R4 */
		/* 821CBB20h case    2:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 821CBB20h case    2:*/		return 0x821CBB24;
		  /* 821CBB24h */ case    3:  		/* srw R7, R7, R6 */
		/* 821CBB24h case    3:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821CBB24h case    3:*/		return 0x821CBB28;
		  /* 821CBB28h */ case    4:  		/* rlwinm R7, R7, 0, 30, 31 */
		/* 821CBB28h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R7);
		/* 821CBB28h case    4:*/		return 0x821CBB2C;
		  /* 821CBB2Ch */ case    5:  		/* addi R8, R8, 1 */
		/* 821CBB2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821CBB2Ch case    5:*/		return 0x821CBB30;
		  /* 821CBB30h */ case    6:  		/* slw R7, R7, R10 */
		/* 821CBB30h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 821CBB30h case    6:*/		return 0x821CBB34;
		  /* 821CBB34h */ case    7:  		/* or R9, R7, R9 */
		/* 821CBB34h case    7:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821CBB34h case    7:*/		return 0x821CBB38;
		  /* 821CBB38h */ case    8:  		/* addi R10, R10, 2 */
		/* 821CBB38h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821CBB38h case    8:*/		return 0x821CBB3C;
	}
	return 0x821CBB3C;
} // Block from 821CBB18h-821CBB3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CBB3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBB3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBB3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBB3C);
		  /* 821CBB3Ch */ case    0:  		/* addi R5, R5, 1 */
		/* 821CBB3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821CBB3Ch case    0:*/		return 0x821CBB40;
		  /* 821CBB40h */ case    1:  		/* addi R6, R6, 2 */
		/* 821CBB40h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x2);
		/* 821CBB40h case    1:*/		return 0x821CBB44;
		  /* 821CBB44h */ case    2:  		/* bc 16, CR0_LT, -60 */
		/* 821CBB44h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821CBB08;  }
		/* 821CBB44h case    2:*/		return 0x821CBB48;
		  /* 821CBB48h */ case    3:  		/* rlwinm R10, R8, 20, 9, 11 */
		/* 821CBB48h case    3:*/		cpu::op::rlwinm<0,20,9,11>(regs,&regs.R10,regs.R8);
		/* 821CBB48h case    3:*/		return 0x821CBB4C;
		  /* 821CBB4Ch */ case    4:  		/* lwz R8, <#[R11]> */
		/* 821CBB4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBB4Ch case    4:*/		return 0x821CBB50;
		  /* 821CBB50h */ case    5:  		/* rlwinm R9, R9, 0, 24, 31 */
		/* 821CBB50h case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821CBB50h case    5:*/		return 0x821CBB54;
		  /* 821CBB54h */ case    6:  		/* lwz R4, <#[R11 + 12]> */
		/* 821CBB54h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CBB54h case    6:*/		return 0x821CBB58;
		  /* 821CBB58h */ case    7:  		/* rlwinm R8, R8, 0, 27, 18 */
		/* 821CBB58h case    7:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R8,regs.R8);
		/* 821CBB58h case    7:*/		return 0x821CBB5C;
		  /* 821CBB5Ch */ case    8:  		/* or R10, R10, R9 */
		/* 821CBB5Ch case    8:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CBB5Ch case    8:*/		return 0x821CBB60;
		  /* 821CBB60h */ case    9:  		/* rlwinm R8, R8, 0, 7, 3 */
		/* 821CBB60h case    9:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R8,regs.R8);
		/* 821CBB60h case    9:*/		return 0x821CBB64;
		  /* 821CBB64h */ case   10:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821CBB64h case   10:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821CBB64h case   10:*/		return 0x821CBB68;
		  /* 821CBB68h */ case   11:  		/* mr R5, R29 */
		/* 821CBB68h case   11:*/		regs.R5 = regs.R29;
		/* 821CBB68h case   11:*/		return 0x821CBB6C;
		  /* 821CBB6Ch */ case   12:  		/* or R10, R10, R8 */
		/* 821CBB6Ch case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821CBB6Ch case   12:*/		return 0x821CBB70;
		  /* 821CBB70h */ case   13:  		/* mr R3, R26 */
		/* 821CBB70h case   13:*/		regs.R3 = regs.R26;
		/* 821CBB70h case   13:*/		return 0x821CBB74;
		  /* 821CBB74h */ case   14:  		/* stw R10, <#[R11]> */
		/* 821CBB74h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBB74h case   14:*/		return 0x821CBB78;
		  /* 821CBB78h */ case   15:  		/* bl -432 */
		/* 821CBB78h case   15:*/		regs.LR = 0x821CBB7C; return 0x821CB9C8;
		/* 821CBB78h case   15:*/		return 0x821CBB7C;
		  /* 821CBB7Ch */ case   16:  		/* addi R30, R30, 1 */
		/* 821CBB7Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821CBB7Ch case   16:*/		return 0x821CBB80;
		  /* 821CBB80h */ case   17:  		/* addi R31, R31, 4 */
		/* 821CBB80h case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821CBB80h case   17:*/		return 0x821CBB84;
		  /* 821CBB84h */ case   18:  		/* b -172 */
		/* 821CBB84h case   18:*/		return 0x821CBAD8;
		/* 821CBB84h case   18:*/		return 0x821CBB88;
	}
	return 0x821CBB88;
} // Block from 821CBB3Ch-821CBB88h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CBB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBB88);
		  /* 821CBB88h */ case    0:  		/* li R4, 0 */
		/* 821CBB88h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CBB88h case    0:*/		return 0x821CBB8C;
		  /* 821CBB8Ch */ case    1:  		/* li R3, 0 */
		/* 821CBB8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CBB8Ch case    1:*/		return 0x821CBB90;
		  /* 821CBB90h */ case    2:  		/* mr R30, R23 */
		/* 821CBB90h case    2:*/		regs.R30 = regs.R23;
		/* 821CBB90h case    2:*/		return 0x821CBB94;
		  /* 821CBB94h */ case    3:  		/* li R31, 0 */
		/* 821CBB94h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CBB94h case    3:*/		return 0x821CBB98;
		  /* 821CBB98h */ case    4:  		/* li R7, 0 */
		/* 821CBB98h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821CBB98h case    4:*/		return 0x821CBB9C;
		  /* 821CBB9Ch */ case    5:  		/* and. R11, R30, R25 */
		/* 821CBB9Ch case    5:*/		cpu::op::and<1>(regs,&regs.R11,regs.R30,regs.R25);
		/* 821CBB9Ch case    5:*/		return 0x821CBBA0;
		  /* 821CBBA0h */ case    6:  		/* bc 12, CR0_EQ, 172 */
		/* 821CBBA0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CBC4C;  }
		/* 821CBBA0h case    6:*/		return 0x821CBBA4;
		  /* 821CBBA4h */ case    7:  		/* slw R11, R27, R8 */
		/* 821CBBA4h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R27,regs.R8);
		/* 821CBBA4h case    7:*/		return 0x821CBBA8;
		  /* 821CBBA8h */ case    8:  		/* slw R10, R3, R8 */
		/* 821CBBA8h case    8:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R3,regs.R8);
		/* 821CBBA8h case    8:*/		return 0x821CBBAC;
		  /* 821CBBACh */ case    9:  		/* andc R11, R4, R11 */
		/* 821CBBACh case    9:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 821CBBACh case    9:*/		return 0x821CBBB0;
		  /* 821CBBB0h */ case   10:  		/* rlwinm. R9, R24, 0, 24, 31 */
		/* 821CBBB0h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R24);
		/* 821CBBB0h case   10:*/		return 0x821CBBB4;
		  /* 821CBBB4h */ case   11:  		/* or R4, R11, R10 */
		/* 821CBBB4h case   11:*/		cpu::op::or<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 821CBBB4h case   11:*/		return 0x821CBBB8;
		  /* 821CBBB8h */ case   12:  		/* bc 4, CR0_EQ, 136 */
		/* 821CBBB8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CBC40;  }
		/* 821CBBB8h case   12:*/		return 0x821CBBBC;
		  /* 821CBBBCh */ case   13:  		/* lwz R11, <#[R28 + 12]> */
		/* 821CBBBCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821CBBBCh case   13:*/		return 0x821CBBC0;
		  /* 821CBBC0h */ case   14:  		/* li R10, 15 */
		/* 821CBBC0h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0xF);
		/* 821CBBC0h case   14:*/		return 0x821CBBC4;
		  /* 821CBBC4h */ case   15:  		/* rlwinm R9, R11, 0, 16, 31 */
		/* 821CBBC4h case   15:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R11);
		/* 821CBBC4h case   15:*/		return 0x821CBBC8;
		  /* 821CBBC8h */ case   16:  		/* slw R10, R10, R7 */
		/* 821CBBC8h case   16:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821CBBC8h case   16:*/		return 0x821CBBCC;
		  /* 821CBBCCh */ case   17:  		/* srw R9, R9, R6 */
		/* 821CBBCCh case   17:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821CBBCCh case   17:*/		return 0x821CBBD0;
		  /* 821CBBD0h */ case   18:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821CBBD0h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821CBBD0h case   18:*/		return 0x821CBBD4;
		  /* 821CBBD4h */ case   19:  		/* and R29, R11, R10 */
		/* 821CBBD4h case   19:*/		cpu::op::and<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 821CBBD4h case   19:*/		return 0x821CBBD8;
		  /* 821CBBD8h */ case   20:  		/* slw R9, R9, R7 */
		/* 821CBBD8h case   20:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821CBBD8h case   20:*/		return 0x821CBBDC;
		  /* 821CBBDCh */ case   21:  		/* rlwinm R29, R29, 0, 16, 31 */
		/* 821CBBDCh case   21:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R29);
		/* 821CBBDCh case   21:*/		return 0x821CBBE0;
		  /* 821CBBE0h */ case   22:  		/* cmplw CR6, R29, R9 */
		/* 821CBBE0h case   22:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821CBBE0h case   22:*/		return 0x821CBBE4;
		  /* 821CBBE4h */ case   23:  		/* bc 12, CR6_EQ, 16 */
		/* 821CBBE4h case   23:*/		if ( regs.CR[6].eq ) { return 0x821CBBF4;  }
		/* 821CBBE4h case   23:*/		return 0x821CBBE8;
		  /* 821CBBE8h */ case   24:  		/* andc R11, R11, R10 */
		/* 821CBBE8h case   24:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CBBE8h case   24:*/		return 0x821CBBEC;
		  /* 821CBBECh */ case   25:  		/* or R11, R11, R9 */
		/* 821CBBECh case   25:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CBBECh case   25:*/		return 0x821CBBF0;
		  /* 821CBBF0h */ case   26:  		/* sth R11, <#[R28 + 14]> */
		/* 821CBBF0h case   26:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R28 + 0x0000000E) );
		/* 821CBBF0h case   26:*/		return 0x821CBBF4;
	}
	return 0x821CBBF4;
} // Block from 821CBB88h-821CBBF4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821CBBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBBF4);
		  /* 821CBBF4h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 821CBBF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821CBBF4h case    0:*/		return 0x821CBBF8;
		  /* 821CBBF8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CBBF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBBF8h case    1:*/		return 0x821CBBFC;
		  /* 821CBBFCh */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 821CBBFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821CBC40;  }
		/* 821CBBFCh case    2:*/		return 0x821CBC00;
		  /* 821CBC00h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821CBC00h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBC00h case    3:*/		return 0x821CBC04;
		  /* 821CBC04h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 821CBC04h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821CBC04h case    4:*/		return 0x821CBC08;
		  /* 821CBC08h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821CBC08h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CBC18;  }
		/* 821CBC08h case    5:*/		return 0x821CBC0C;
		  /* 821CBC0Ch */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CBC0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CBC0Ch case    6:*/		return 0x821CBC10;
		  /* 821CBC10h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821CBC10h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBC10h case    7:*/		return 0x821CBC14;
		  /* 821CBC14h */ case    8:  		/* bc 4, CR6_EQ, -20 */
		/* 821CBC14h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CBC00;  }
		/* 821CBC14h case    8:*/		return 0x821CBC18;
	}
	return 0x821CBC18;
} // Block from 821CBBF4h-821CBC18h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CBC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBC18);
		  /* 821CBC18h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CBC18h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBC18h case    0:*/		return 0x821CBC1C;
		  /* 821CBC1Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821CBC1Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CBC40;  }
		/* 821CBC1Ch case    1:*/		return 0x821CBC20;
		  /* 821CBC20h */ case    2:  		/* add R10, R5, R11 */
		/* 821CBC20h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R5,regs.R11);
		/* 821CBC20h case    2:*/		return 0x821CBC24;
		  /* 821CBC24h */ case    3:  		/* add R9, R31, R11 */
		/* 821CBC24h case    3:*/		cpu::op::add<0>(regs,&regs.R9,regs.R31,regs.R11);
		/* 821CBC24h case    3:*/		return 0x821CBC28;
		  /* 821CBC28h */ case    4:  		/* add R29, R5, R11 */
		/* 821CBC28h case    4:*/		cpu::op::add<0>(regs,&regs.R29,regs.R5,regs.R11);
		/* 821CBC28h case    4:*/		return 0x821CBC2C;
		  /* 821CBC2Ch */ case    5:  		/* add R11, R31, R11 */
		/* 821CBC2Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821CBC2Ch case    5:*/		return 0x821CBC30;
		  /* 821CBC30h */ case    6:  		/* lfd FR0, <#[R10 + 8]> */
		/* 821CBC30h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000008) );
		/* 821CBC30h case    6:*/		return 0x821CBC34;
		  /* 821CBC34h */ case    7:  		/* stfd FR0, <#[R9 + 8]> */
		/* 821CBC34h case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R9 + 0x00000008) );
		/* 821CBC34h case    7:*/		return 0x821CBC38;
		  /* 821CBC38h */ case    8:  		/* lfd FR0, <#[R29 + 40]> */
		/* 821CBC38h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R29 + 0x00000028) );
		/* 821CBC38h case    8:*/		return 0x821CBC3C;
		  /* 821CBC3Ch */ case    9:  		/* stfd FR0, <#[R11 + 40]> */
		/* 821CBC3Ch case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000028) );
		/* 821CBC3Ch case    9:*/		return 0x821CBC40;
	}
	return 0x821CBC40;
} // Block from 821CBC18h-821CBC40h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CBC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBC40);
		  /* 821CBC40h */ case    0:  		/* addi R3, R3, 1 */
		/* 821CBC40h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 821CBC40h case    0:*/		return 0x821CBC44;
		  /* 821CBC44h */ case    1:  		/* addi R7, R7, 4 */
		/* 821CBC44h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821CBC44h case    1:*/		return 0x821CBC48;
		  /* 821CBC48h */ case    2:  		/* addi R31, R31, 8 */
		/* 821CBC48h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 821CBC48h case    2:*/		return 0x821CBC4C;
	}
	return 0x821CBC4C;
} // Block from 821CBC40h-821CBC4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CBC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBC4C);
		  /* 821CBC4Ch */ case    0:  		/* addi R8, R8, 2 */
		/* 821CBC4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x2);
		/* 821CBC4Ch case    0:*/		return 0x821CBC50;
		  /* 821CBC50h */ case    1:  		/* addi R6, R6, 4 */
		/* 821CBC50h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821CBC50h case    1:*/		return 0x821CBC54;
		  /* 821CBC54h */ case    2:  		/* addi R5, R5, 8 */
		/* 821CBC54h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x8);
		/* 821CBC54h case    2:*/		return 0x821CBC58;
		  /* 821CBC58h */ case    3:  		/* rlwinm R30, R30, 1, 0, 30 */
		/* 821CBC58h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R30);
		/* 821CBC58h case    3:*/		return 0x821CBC5C;
		  /* 821CBC5Ch */ case    4:  		/* cmplwi CR6, R8, 8 */
		/* 821CBC5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000008);
		/* 821CBC5Ch case    4:*/		return 0x821CBC60;
		  /* 821CBC60h */ case    5:  		/* bc 12, CR6_LT, -196 */
		/* 821CBC60h case    5:*/		if ( regs.CR[6].lt ) { return 0x821CBB9C;  }
		/* 821CBC60h case    5:*/		return 0x821CBC64;
		  /* 821CBC64h */ case    6:  		/* lwz R10, <#[R28 + 4]> */
		/* 821CBC64h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821CBC64h case    6:*/		return 0x821CBC68;
		  /* 821CBC68h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821CBC68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CBC68h case    7:*/		return 0x821CBC6C;
		  /* 821CBC6Ch */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 821CBC6Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821CBCD0;  }
		/* 821CBC6Ch case    8:*/		return 0x821CBC70;
		  /* 821CBC70h */ case    9:  		/* lwz R11, <#[R10 + 16]> */
		/* 821CBC70h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821CBC70h case    9:*/		return 0x821CBC74;
		  /* 821CBC74h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821CBC74h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBC74h case   10:*/		return 0x821CBC78;
		  /* 821CBC78h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 821CBC78h case   11:*/		if ( regs.CR[6].eq ) { return 0x821CBCC8;  }
		/* 821CBC78h case   11:*/		return 0x821CBC7C;
		  /* 821CBC7Ch */ case   12:  		/* lwz R11, <#[R10]> */
		/* 821CBC7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CBC7Ch case   12:*/		return 0x821CBC80;
		  /* 821CBC80h */ case   13:  		/* rlwinm. R9, R11, 0, 4, 6 */
		/* 821CBC80h case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R11);
		/* 821CBC80h case   13:*/		return 0x821CBC84;
		  /* 821CBC84h */ case   14:  		/* bc 12, CR0_EQ, 68 */
		/* 821CBC84h case   14:*/		if ( regs.CR[0].eq ) { return 0x821CBCC8;  }
		/* 821CBC84h case   14:*/		return 0x821CBC88;
		  /* 821CBC88h */ case   15:  		/* rlwinm R9, R11, 22, 29, 30 */
		/* 821CBC88h case   15:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R11);
		/* 821CBC88h case   15:*/		return 0x821CBC8C;
		  /* 821CBC8Ch */ case   16:  		/* rlwinm R8, R11, 24, 29, 30 */
		/* 821CBC8Ch case   16:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R11);
		/* 821CBC8Ch case   16:*/		return 0x821CBC90;
		  /* 821CBC90h */ case   17:  		/* srw R9, R4, R9 */
		/* 821CBC90h case   17:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 821CBC90h case   17:*/		return 0x821CBC94;
		  /* 821CBC94h */ case   18:  		/* srw R8, R4, R8 */
		/* 821CBC94h case   18:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 821CBC94h case   18:*/		return 0x821CBC98;
	}
	return 0x821CBC98;
} // Block from 821CBC4Ch-821CBC98h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CBC98h
// Function '?BuildProductTermList@Compiler@D3DXShader@@AAAPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVDependency@2@W4Component@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBC98);
		  /* 821CBC98h */ case    0:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821CBC98h case    0:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821CBC98h case    0:*/		return 0x821CBC9C;
		  /* 821CBC9Ch */ case    1:  		/* rlwinm R9, R11, 26, 29, 30 */
		/* 821CBC9Ch case    1:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R11);
		/* 821CBC9Ch case    1:*/		return 0x821CBCA0;
		  /* 821CBCA0h */ case    2:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821CBCA0h case    2:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821CBCA0h case    2:*/		return 0x821CBCA4;
		  /* 821CBCA4h */ case    3:  		/* srw R9, R4, R9 */
		/* 821CBCA4h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 821CBCA4h case    3:*/		return 0x821CBCA8;
		  /* 821CBCA8h */ case    4:  		/* rlwinm R7, R11, 28, 29, 30 */
		/* 821CBCA8h case    4:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R11);
		/* 821CBCA8h case    4:*/		return 0x821CBCAC;
		  /* 821CBCACh */ case    5:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821CBCACh case    5:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821CBCACh case    5:*/		return 0x821CBCB0;
		  /* 821CBCB0h */ case    6:  		/* srw R8, R4, R7 */
		/* 821CBCB0h case    6:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R4,regs.R7);
		/* 821CBCB0h case    6:*/		return 0x821CBCB4;
		  /* 821CBCB4h */ case    7:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821CBCB4h case    7:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821CBCB4h case    7:*/		return 0x821CBCB8;
		  /* 821CBCB8h */ case    8:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821CBCB8h case    8:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821CBCB8h case    8:*/		return 0x821CBCBC;
		  /* 821CBCBCh */ case    9:  		/* rlwinm R9, R8, 5, 0, 26 */
		/* 821CBCBCh case    9:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R8);
		/* 821CBCBCh case    9:*/		return 0x821CBCC0;
		  /* 821CBCC0h */ case   10:  		/* or R11, R9, R11 */
		/* 821CBCC0h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CBCC0h case   10:*/		return 0x821CBCC4;
		  /* 821CBCC4h */ case   11:  		/* stw R11, <#[R10]> */
		/* 821CBCC4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CBCC4h case   11:*/		return 0x821CBCC8;
	}
	return 0x821CBCC8;
} // Block from 821CBC98h-821CBCC8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CBCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBCC8);
		  /* 821CBCC8h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CBCC8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CBCC8h case    0:*/		return 0x821CBCCC;
		  /* 821CBCCCh */ case    1:  		/* b -100 */
		/* 821CBCCCh case    1:*/		return 0x821CBC68;
		/* 821CBCCCh case    1:*/		return 0x821CBCD0;
	}
	return 0x821CBCD0;
} // Block from 821CBCC8h-821CBCD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBCD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBCD0);
		  /* 821CBCD0h */ case    0:  		/* rlwinm. R11, R24, 0, 24, 31 */
		/* 821CBCD0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R24);
		/* 821CBCD0h case    0:*/		return 0x821CBCD4;
		  /* 821CBCD4h */ case    1:  		/* bc 12, CR0_EQ, 84 */
		/* 821CBCD4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CBD28;  }
		/* 821CBCD4h case    1:*/		return 0x821CBCD8;
		  /* 821CBCD8h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821CBCD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821CBCD8h case    2:*/		return 0x821CBCDC;
		  /* 821CBCDCh */ case    3:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 821CBCDCh case    3:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 821CBCDCh case    3:*/		return 0x821CBCE0;
		  /* 821CBCE0h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 821CBCE0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CBD00;  }
		/* 821CBCE0h case    4:*/		return 0x821CBCE4;
		  /* 821CBCE4h */ case    5:  		/* lhz R11, <#[R28 + 16]> */
		/* 821CBCE4h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821CBCE4h case    5:*/		return 0x821CBCE8;
		  /* 821CBCE8h */ case    6:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821CBCE8h case    6:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821CBCE8h case    6:*/		return 0x821CBCEC;
		  /* 821CBCECh */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821CBCECh case    7:*/		if ( regs.CR[0].eq ) { return 0x821CBD00;  }
		/* 821CBCECh case    7:*/		return 0x821CBCF0;
		  /* 821CBCF0h */ case    8:  		/* mr R5, R25 */
		/* 821CBCF0h case    8:*/		regs.R5 = regs.R25;
		/* 821CBCF0h case    8:*/		return 0x821CBCF4;
		  /* 821CBCF4h */ case    9:  		/* mr R4, R28 */
		/* 821CBCF4h case    9:*/		regs.R4 = regs.R28;
		/* 821CBCF4h case    9:*/		return 0x821CBCF8;
		  /* 821CBCF8h */ case   10:  		/* mr R3, R26 */
		/* 821CBCF8h case   10:*/		regs.R3 = regs.R26;
		/* 821CBCF8h case   10:*/		return 0x821CBCFC;
		  /* 821CBCFCh */ case   11:  		/* bl -290988 */
		/* 821CBCFCh case   11:*/		regs.LR = 0x821CBD00; return 0x82184C50;
		/* 821CBCFCh case   11:*/		return 0x821CBD00;
	}
	return 0x821CBD00;
} // Block from 821CBCD0h-821CBD00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CBD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBD00);
		  /* 821CBD00h */ case    0:  		/* mr R3, R25 */
		/* 821CBD00h case    0:*/		regs.R3 = regs.R25;
		/* 821CBD00h case    0:*/		return 0x821CBD04;
		  /* 821CBD04h */ case    1:  		/* bl -296356 */
		/* 821CBD04h case    1:*/		regs.LR = 0x821CBD08; return 0x82183760;
		/* 821CBD04h case    1:*/		return 0x821CBD08;
		  /* 821CBD08h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821CBD08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821CBD08h case    2:*/		return 0x821CBD0C;
		  /* 821CBD0Ch */ case    3:  		/* rlwimi R11, R3, 14, 15, 17 */
		/* 821CBD0Ch case    3:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R3);
		/* 821CBD0Ch case    3:*/		return 0x821CBD10;
		  /* 821CBD10h */ case    4:  		/* rlwinm R10, R11, 18, 29, 31 */
		/* 821CBD10h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R11);
		/* 821CBD10h case    4:*/		return 0x821CBD14;
		  /* 821CBD14h */ case    5:  		/* mr R9, R11 */
		/* 821CBD14h case    5:*/		regs.R9 = regs.R11;
		/* 821CBD14h case    5:*/		return 0x821CBD18;
		  /* 821CBD18h */ case    6:  		/* slw R11, R23, R10 */
		/* 821CBD18h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R10);
		/* 821CBD18h case    6:*/		return 0x821CBD1C;
		  /* 821CBD1Ch */ case    7:  		/* addi R11, R11, -1 */
		/* 821CBD1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CBD1Ch case    7:*/		return 0x821CBD20;
		  /* 821CBD20h */ case    8:  		/* rlwimi R9, R11, 1, 27, 30 */
		/* 821CBD20h case    8:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R9,regs.R11);
		/* 821CBD20h case    8:*/		return 0x821CBD24;
		  /* 821CBD24h */ case    9:  		/* stw R9, <#[R28 + 8]> */
		/* 821CBD24h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 821CBD24h case    9:*/		return 0x821CBD28;
	}
	return 0x821CBD28;
} // Block from 821CBD00h-821CBD28h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CBD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBD28);
		  /* 821CBD28h */ case    0:  		/* addi R1, R1, 160 */
		/* 821CBD28h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CBD28h case    0:*/		return 0x821CBD2C;
		  /* 821CBD2Ch */ case    1:  		/* b -1288856 */
		/* 821CBD2Ch case    1:*/		return 0x82091294;
		/* 821CBD2Ch case    1:*/		return 0x821CBD30;
	}
	return 0x821CBD30;
} // Block from 821CBD28h-821CBD30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBD30h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBD30);
		  /* 821CBD30h */ case    0:  		/* mfspr R12, LR */
		/* 821CBD30h case    0:*/		regs.R12 = regs.LR;
		/* 821CBD30h case    0:*/		return 0x821CBD34;
		  /* 821CBD34h */ case    1:  		/* bl -1288980 */
		/* 821CBD34h case    1:*/		regs.LR = 0x821CBD38; return 0x82091220;
		/* 821CBD34h case    1:*/		return 0x821CBD38;
		  /* 821CBD38h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821CBD38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821CBD38h case    2:*/		return 0x821CBD3C;
		  /* 821CBD3Ch */ case    3:  		/* lwz R6, <#[R4 + 4]> */
		/* 821CBD3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000004) );
		/* 821CBD3Ch case    3:*/		return 0x821CBD40;
		  /* 821CBD40h */ case    4:  		/* mr R16, R3 */
		/* 821CBD40h case    4:*/		regs.R16 = regs.R3;
		/* 821CBD40h case    4:*/		return 0x821CBD44;
		  /* 821CBD44h */ case    5:  		/* mr R19, R4 */
		/* 821CBD44h case    5:*/		regs.R19 = regs.R4;
		/* 821CBD44h case    5:*/		return 0x821CBD48;
		  /* 821CBD48h */ case    6:  		/* mr R14, R5 */
		/* 821CBD48h case    6:*/		regs.R14 = regs.R5;
		/* 821CBD48h case    6:*/		return 0x821CBD4C;
		  /* 821CBD4Ch */ case    7:  		/* addi R15, R4, 4 */
		/* 821CBD4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R4,0x4);
		/* 821CBD4Ch case    7:*/		return 0x821CBD50;
		  /* 821CBD50h */ case    8:  		/* li R18, 0 */
		/* 821CBD50h case    8:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821CBD50h case    8:*/		return 0x821CBD54;
		  /* 821CBD54h */ case    9:  		/* li R17, 1 */
		/* 821CBD54h case    9:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821CBD54h case    9:*/		return 0x821CBD58;
		  /* 821CBD58h */ case   10:  		/* cmplwi CR6, R6, 0 */
		/* 821CBD58h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821CBD58h case   10:*/		return 0x821CBD5C;
		  /* 821CBD5Ch */ case   11:  		/* bc 12, CR6_EQ, 88 */
		/* 821CBD5Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821CBDB4;  }
		/* 821CBD5Ch case   11:*/		return 0x821CBD60;
		  /* 821CBD60h */ case   12:  		/* lwz R11, <#[R6 + 16]> */
		/* 821CBD60h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 821CBD60h case   12:*/		return 0x821CBD64;
		  /* 821CBD64h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821CBD64h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBD64h case   13:*/		return 0x821CBD68;
		  /* 821CBD68h */ case   14:  		/* bc 12, CR6_EQ, 68 */
		/* 821CBD68h case   14:*/		if ( regs.CR[6].eq ) { return 0x821CBDAC;  }
		/* 821CBD68h case   14:*/		return 0x821CBD6C;
		  /* 821CBD6Ch */ case   15:  		/* lwz R8, <#[R6]> */
		/* 821CBD6Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 821CBD6Ch case   15:*/		return 0x821CBD70;
		  /* 821CBD70h */ case   16:  		/* li R9, 0 */
		/* 821CBD70h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821CBD70h case   16:*/		return 0x821CBD74;
		  /* 821CBD74h */ case   17:  		/* li R11, 0 */
		/* 821CBD74h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CBD74h case   17:*/		return 0x821CBD78;
		  /* 821CBD78h */ case   18:  		/* rlwinm. R7, R8, 7, 29, 31 */
		/* 821CBD78h case   18:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R7,regs.R8);
		/* 821CBD78h case   18:*/		return 0x821CBD7C;
		  /* 821CBD7Ch */ case   19:  		/* bc 12, CR0_EQ, 44 */
		/* 821CBD7Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821CBDA8;  }
		/* 821CBD7Ch case   19:*/		return 0x821CBD80;
		  /* 821CBD80h */ case   20:  		/* li R10, 0 */
		/* 821CBD80h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CBD80h case   20:*/		return 0x821CBD84;
		  /* 821CBD84h */ case   21:  		/* rlwinm R5, R8, 27, 24, 31 */
		/* 821CBD84h case   21:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R8);
		/* 821CBD84h case   21:*/		return 0x821CBD88;
		  /* 821CBD88h */ case   22:  		/* addi R11, R11, 1 */
		/* 821CBD88h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CBD88h case   22:*/		return 0x821CBD8C;
		  /* 821CBD8Ch */ case   23:  		/* srw R5, R5, R10 */
		/* 821CBD8Ch case   23:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R5,regs.R10);
		/* 821CBD8Ch case   23:*/		return 0x821CBD90;
		  /* 821CBD90h */ case   24:  		/* rlwinm R5, R5, 0, 30, 31 */
		/* 821CBD90h case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R5);
		/* 821CBD90h case   24:*/		return 0x821CBD94;
		  /* 821CBD94h */ case   25:  		/* addi R10, R10, 2 */
		/* 821CBD94h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821CBD94h case   25:*/		return 0x821CBD98;
		  /* 821CBD98h */ case   26:  		/* slw R5, R17, R5 */
		/* 821CBD98h case   26:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R17,regs.R5);
		/* 821CBD98h case   26:*/		return 0x821CBD9C;
		  /* 821CBD9Ch */ case   27:  		/* or R9, R5, R9 */
		/* 821CBD9Ch case   27:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821CBD9Ch case   27:*/		return 0x821CBDA0;
		  /* 821CBDA0h */ case   28:  		/* cmplw CR6, R11, R7 */
		/* 821CBDA0h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821CBDA0h case   28:*/		return 0x821CBDA4;
		  /* 821CBDA4h */ case   29:  		/* bc 12, CR6_LT, -32 */
		/* 821CBDA4h case   29:*/		if ( regs.CR[6].lt ) { return 0x821CBD84;  }
		/* 821CBDA4h case   29:*/		return 0x821CBDA8;
	}
	return 0x821CBDA8;
} // Block from 821CBD30h-821CBDA8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CBDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBDA8);
		  /* 821CBDA8h */ case    0:  		/* or R18, R9, R18 */
		/* 821CBDA8h case    0:*/		cpu::op::or<0>(regs,&regs.R18,regs.R9,regs.R18);
		/* 821CBDA8h case    0:*/		return 0x821CBDAC;
	}
	return 0x821CBDAC;
} // Block from 821CBDA8h-821CBDACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CBDACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBDAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBDAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBDAC);
		  /* 821CBDACh */ case    0:  		/* lwz R6, <#[R6 + 8]> */
		/* 821CBDACh case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000008) );
		/* 821CBDACh case    0:*/		return 0x821CBDB0;
		  /* 821CBDB0h */ case    1:  		/* b -88 */
		/* 821CBDB0h case    1:*/		return 0x821CBD58;
		/* 821CBDB0h case    1:*/		return 0x821CBDB4;
	}
	return 0x821CBDB4;
} // Block from 821CBDACh-821CBDB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBDB4);
		  /* 821CBDB4h */ case    0:  		/* lwz R11, <#[R16 + 40]> */
		/* 821CBDB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821CBDB4h case    0:*/		return 0x821CBDB8;
		  /* 821CBDB8h */ case    1:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 821CBDB8h case    1:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 821CBDB8h case    1:*/		return 0x821CBDBC;
		  /* 821CBDBCh */ case    2:  		/* bc 12, CR0_EQ, 296 */
		/* 821CBDBCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821CBEE4;  }
		/* 821CBDBCh case    2:*/		return 0x821CBDC0;
		  /* 821CBDC0h */ case    3:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CBDC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CBDC0h case    3:*/		return 0x821CBDC4;
		  /* 821CBDC4h */ case    4:  		/* mr R28, R17 */
		/* 821CBDC4h case    4:*/		regs.R28 = regs.R17;
		/* 821CBDC4h case    4:*/		return 0x821CBDC8;
		  /* 821CBDC8h */ case    5:  		/* rlwinm. R30, R11, 13, 29, 31 */
		/* 821CBDC8h case    5:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R30,regs.R11);
		/* 821CBDC8h case    5:*/		return 0x821CBDCC;
		  /* 821CBDCCh */ case    6:  		/* bc 12, CR0_EQ, 280 */
		/* 821CBDCCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821CBEE4;  }
		/* 821CBDCCh case    6:*/		return 0x821CBDD0;
		  /* 821CBDD0h */ case    7:  		/* addi R29, R19, 44 */
		/* 821CBDD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R19,0x2C);
		/* 821CBDD0h case    7:*/		return 0x821CBDD4;
		  /* 821CBDD4h */ case    8:  		/* mtspr CTR, R30 */
		/* 821CBDD4h case    8:*/		regs.CTR = regs.R30;
		/* 821CBDD4h case    8:*/		return 0x821CBDD8;
		  /* 821CBDD8h */ case    9:  		/* mr R31, R29 */
		/* 821CBDD8h case    9:*/		regs.R31 = regs.R29;
		/* 821CBDD8h case    9:*/		return 0x821CBDDC;
		  /* 821CBDDCh */ case   10:  		/* and. R11, R28, R18 */
		/* 821CBDDCh case   10:*/		cpu::op::and<1>(regs,&regs.R11,regs.R28,regs.R18);
		/* 821CBDDCh case   10:*/		return 0x821CBDE0;
		  /* 821CBDE0h */ case   11:  		/* bc 4, CR0_EQ, 248 */
		/* 821CBDE0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821CBED8;  }
		/* 821CBDE0h case   11:*/		return 0x821CBDE4;
		  /* 821CBDE4h */ case   12:  		/* lwz R4, <#[R31]> */
		/* 821CBDE4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821CBDE4h case   12:*/		return 0x821CBDE8;
		  /* 821CBDE8h */ case   13:  		/* li R5, 0 */
		/* 821CBDE8h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CBDE8h case   13:*/		return 0x821CBDEC;
		  /* 821CBDECh */ case   14:  		/* lwz R3, <#[R4 + 12]> */
		/* 821CBDECh case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CBDECh case   14:*/		return 0x821CBDF0;
		  /* 821CBDF0h */ case   15:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CBDF0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CBDF0h case   15:*/		return 0x821CBDF4;
		  /* 821CBDF4h */ case   16:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821CBDF4h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821CBDF4h case   16:*/		return 0x821CBDF8;
		  /* 821CBDF8h */ case   17:  		/* cmplwi CR6, R10, 14464 */
		/* 821CBDF8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003880);
		/* 821CBDF8h case   17:*/		return 0x821CBDFC;
		  /* 821CBDFCh */ case   18:  		/* bc 12, CR6_EQ, 108 */
		/* 821CBDFCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821CBE68;  }
		/* 821CBDFCh case   18:*/		return 0x821CBE00;
		  /* 821CBE00h */ case   19:  		/* lwz R6, <#[R3 + 4]> */
		/* 821CBE00h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00000004) );
		/* 821CBE00h case   19:*/		return 0x821CBE04;
		  /* 821CBE04h */ case   20:  		/* cmplwi CR6, R6, 0 */
		/* 821CBE04h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821CBE04h case   20:*/		return 0x821CBE08;
		  /* 821CBE08h */ case   21:  		/* bc 12, CR6_EQ, 100 */
		/* 821CBE08h case   21:*/		if ( regs.CR[6].eq ) { return 0x821CBE6C;  }
		/* 821CBE08h case   21:*/		return 0x821CBE0C;
		  /* 821CBE0Ch */ case   22:  		/* lwz R11, <#[R6 + 16]> */
		/* 821CBE0Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 821CBE0Ch case   22:*/		return 0x821CBE10;
		  /* 821CBE10h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821CBE10h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBE10h case   23:*/		return 0x821CBE14;
		  /* 821CBE14h */ case   24:  		/* bc 12, CR6_EQ, 76 */
		/* 821CBE14h case   24:*/		if ( regs.CR[6].eq ) { return 0x821CBE60;  }
		/* 821CBE14h case   24:*/		return 0x821CBE18;
		  /* 821CBE18h */ case   25:  		/* cmplw CR6, R11, R19 */
		/* 821CBE18h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821CBE18h case   25:*/		return 0x821CBE1C;
		  /* 821CBE1Ch */ case   26:  		/* bc 12, CR6_EQ, 68 */
		/* 821CBE1Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821CBE60;  }
		/* 821CBE1Ch case   26:*/		return 0x821CBE20;
		  /* 821CBE20h */ case   27:  		/* lwz R8, <#[R6]> */
		/* 821CBE20h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 821CBE20h case   27:*/		return 0x821CBE24;
		  /* 821CBE24h */ case   28:  		/* li R9, 0 */
		/* 821CBE24h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821CBE24h case   28:*/		return 0x821CBE28;
		  /* 821CBE28h */ case   29:  		/* li R11, 0 */
		/* 821CBE28h case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CBE28h case   29:*/		return 0x821CBE2C;
		  /* 821CBE2Ch */ case   30:  		/* rlwinm. R7, R8, 7, 29, 31 */
		/* 821CBE2Ch case   30:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R7,regs.R8);
		/* 821CBE2Ch case   30:*/		return 0x821CBE30;
		  /* 821CBE30h */ case   31:  		/* bc 12, CR0_EQ, 44 */
		/* 821CBE30h case   31:*/		if ( regs.CR[0].eq ) { return 0x821CBE5C;  }
		/* 821CBE30h case   31:*/		return 0x821CBE34;
		  /* 821CBE34h */ case   32:  		/* li R10, 0 */
		/* 821CBE34h case   32:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CBE34h case   32:*/		return 0x821CBE38;
		  /* 821CBE38h */ case   33:  		/* rlwinm R27, R8, 27, 24, 31 */
		/* 821CBE38h case   33:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R27,regs.R8);
		/* 821CBE38h case   33:*/		return 0x821CBE3C;
		  /* 821CBE3Ch */ case   34:  		/* addi R11, R11, 1 */
		/* 821CBE3Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CBE3Ch case   34:*/		return 0x821CBE40;
		  /* 821CBE40h */ case   35:  		/* srw R27, R27, R10 */
		/* 821CBE40h case   35:*/		cpu::op::srw<0>(regs,&regs.R27,regs.R27,regs.R10);
		/* 821CBE40h case   35:*/		return 0x821CBE44;
		  /* 821CBE44h */ case   36:  		/* rlwinm R27, R27, 0, 30, 31 */
		/* 821CBE44h case   36:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R27,regs.R27);
		/* 821CBE44h case   36:*/		return 0x821CBE48;
		  /* 821CBE48h */ case   37:  		/* addi R10, R10, 2 */
		/* 821CBE48h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821CBE48h case   37:*/		return 0x821CBE4C;
		  /* 821CBE4Ch */ case   38:  		/* slw R27, R17, R27 */
		/* 821CBE4Ch case   38:*/		cpu::op::slw<0>(regs,&regs.R27,regs.R17,regs.R27);
		/* 821CBE4Ch case   38:*/		return 0x821CBE50;
		  /* 821CBE50h */ case   39:  		/* or R9, R27, R9 */
		/* 821CBE50h case   39:*/		cpu::op::or<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821CBE50h case   39:*/		return 0x821CBE54;
		  /* 821CBE54h */ case   40:  		/* cmplw CR6, R11, R7 */
		/* 821CBE54h case   40:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821CBE54h case   40:*/		return 0x821CBE58;
		  /* 821CBE58h */ case   41:  		/* bc 12, CR6_LT, -32 */
		/* 821CBE58h case   41:*/		if ( regs.CR[6].lt ) { return 0x821CBE38;  }
		/* 821CBE58h case   41:*/		return 0x821CBE5C;
	}
	return 0x821CBE5C;
} // Block from 821CBDB4h-821CBE5Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 821CBE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBE5C);
		  /* 821CBE5Ch */ case    0:  		/* or R5, R9, R5 */
		/* 821CBE5Ch case    0:*/		cpu::op::or<0>(regs,&regs.R5,regs.R9,regs.R5);
		/* 821CBE5Ch case    0:*/		return 0x821CBE60;
	}
	return 0x821CBE60;
} // Block from 821CBE5Ch-821CBE60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CBE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBE60);
		  /* 821CBE60h */ case    0:  		/* lwz R6, <#[R6 + 8]> */
		/* 821CBE60h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000008) );
		/* 821CBE60h case    0:*/		return 0x821CBE64;
		  /* 821CBE64h */ case    1:  		/* b -96 */
		/* 821CBE64h case    1:*/		return 0x821CBE04;
		/* 821CBE64h case    1:*/		return 0x821CBE68;
	}
	return 0x821CBE68;
} // Block from 821CBE60h-821CBE68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBE68);
		  /* 821CBE68h */ case    0:  		/* rlwinm R5, R11, 31, 28, 31 */
		/* 821CBE68h case    0:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R5,regs.R11);
		/* 821CBE68h case    0:*/		return 0x821CBE6C;
	}
	return 0x821CBE6C;
} // Block from 821CBE68h-821CBE6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CBE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBE6C);
		  /* 821CBE6Ch */ case    0:  		/* lwz R11, <#[R4]> */
		/* 821CBE6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821CBE6Ch case    0:*/		return 0x821CBE70;
		  /* 821CBE70h */ case    1:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 821CBE70h case    1:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 821CBE70h case    1:*/		return 0x821CBE74;
		  /* 821CBE74h */ case    2:  		/* slw R11, R17, R11 */
		/* 821CBE74h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 821CBE74h case    2:*/		return 0x821CBE78;
		  /* 821CBE78h */ case    3:  		/* and. R11, R11, R5 */
		/* 821CBE78h case    3:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821CBE78h case    3:*/		return 0x821CBE7C;
		  /* 821CBE7Ch */ case    4:  		/* bc 12, CR0_EQ, 92 */
		/* 821CBE7Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821CBED8;  }
		/* 821CBE7Ch case    4:*/		return 0x821CBE80;
		  /* 821CBE80h */ case    5:  		/* li R8, 0 */
		/* 821CBE80h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CBE80h case    5:*/		return 0x821CBE84;
		  /* 821CBE84h */ case    6:  		/* li R11, 0 */
		/* 821CBE84h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CBE84h case    6:*/		return 0x821CBE88;
		  /* 821CBE88h */ case    7:  		/* mr R9, R29 */
		/* 821CBE88h case    7:*/		regs.R9 = regs.R29;
		/* 821CBE88h case    7:*/		return 0x821CBE8C;
		  /* 821CBE8Ch */ case    8:  		/* cmplw CR6, R11, R30 */
		/* 821CBE8Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821CBE8Ch case    8:*/		return 0x821CBE90;
		  /* 821CBE90h */ case    9:  		/* bc 4, CR6_LT, 60 */
		/* 821CBE90h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821CBECC;  }
		/* 821CBE90h case    9:*/		return 0x821CBE94;
		  /* 821CBE94h */ case   10:  		/* lwz R10, <#[R9]> */
		/* 821CBE94h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821CBE94h case   10:*/		return 0x821CBE98;
		  /* 821CBE98h */ case   11:  		/* lwz R7, <#[R10 + 12]> */
		/* 821CBE98h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 821CBE98h case   11:*/		return 0x821CBE9C;
		  /* 821CBE9Ch */ case   12:  		/* cmplw CR6, R7, R3 */
		/* 821CBE9Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R3);
		/* 821CBE9Ch case   12:*/		return 0x821CBEA0;
		  /* 821CBEA0h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 821CBEA0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CBEC0;  }
		/* 821CBEA0h case   13:*/		return 0x821CBEA4;
		  /* 821CBEA4h */ case   14:  		/* slw R7, R17, R11 */
		/* 821CBEA4h case   14:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R17,regs.R11);
		/* 821CBEA4h case   14:*/		return 0x821CBEA8;
		  /* 821CBEA8h */ case   15:  		/* and. R7, R7, R18 */
		/* 821CBEA8h case   15:*/		cpu::op::and<1>(regs,&regs.R7,regs.R7,regs.R18);
		/* 821CBEA8h case   15:*/		return 0x821CBEAC;
		  /* 821CBEACh */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 821CBEACh case   16:*/		if ( regs.CR[0].eq ) { return 0x821CBEC0;  }
		/* 821CBEACh case   16:*/		return 0x821CBEB0;
		  /* 821CBEB0h */ case   17:  		/* lwz R10, <#[R10]> */
		/* 821CBEB0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821CBEB0h case   17:*/		return 0x821CBEB4;
		  /* 821CBEB4h */ case   18:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 821CBEB4h case   18:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 821CBEB4h case   18:*/		return 0x821CBEB8;
		  /* 821CBEB8h */ case   19:  		/* slw R10, R17, R10 */
		/* 821CBEB8h case   19:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 821CBEB8h case   19:*/		return 0x821CBEBC;
		  /* 821CBEBCh */ case   20:  		/* or R8, R10, R8 */
		/* 821CBEBCh case   20:*/		cpu::op::or<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821CBEBCh case   20:*/		return 0x821CBEC0;
	}
	return 0x821CBEC0;
} // Block from 821CBE6Ch-821CBEC0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CBEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBEC0);
		  /* 821CBEC0h */ case    0:  		/* addi R11, R11, 1 */
		/* 821CBEC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CBEC0h case    0:*/		return 0x821CBEC4;
		  /* 821CBEC4h */ case    1:  		/* addi R9, R9, 4 */
		/* 821CBEC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821CBEC4h case    1:*/		return 0x821CBEC8;
		  /* 821CBEC8h */ case    2:  		/* b -60 */
		/* 821CBEC8h case    2:*/		return 0x821CBE8C;
		/* 821CBEC8h case    2:*/		return 0x821CBECC;
	}
	return 0x821CBECC;
} // Block from 821CBEC0h-821CBECCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CBECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBECC);
		  /* 821CBECCh */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821CBECCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821CBECCh case    0:*/		return 0x821CBED0;
		  /* 821CBED0h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821CBED0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CBED8;  }
		/* 821CBED0h case    1:*/		return 0x821CBED4;
		  /* 821CBED4h */ case    2:  		/* or R18, R28, R18 */
		/* 821CBED4h case    2:*/		cpu::op::or<0>(regs,&regs.R18,regs.R28,regs.R18);
		/* 821CBED4h case    2:*/		return 0x821CBED8;
	}
	return 0x821CBED8;
} // Block from 821CBECCh-821CBED8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CBED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBED8);
		  /* 821CBED8h */ case    0:  		/* addi R31, R31, 4 */
		/* 821CBED8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821CBED8h case    0:*/		return 0x821CBEDC;
		  /* 821CBEDCh */ case    1:  		/* rlwinm R28, R28, 1, 0, 30 */
		/* 821CBEDCh case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R28);
		/* 821CBEDCh case    1:*/		return 0x821CBEE0;
		  /* 821CBEE0h */ case    2:  		/* bc 16, CR0_LT, -260 */
		/* 821CBEE0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821CBDDC;  }
		/* 821CBEE0h case    2:*/		return 0x821CBEE4;
	}
	return 0x821CBEE4;
} // Block from 821CBED8h-821CBEE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CBEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBEE4);
		  /* 821CBEE4h */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CBEE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CBEE4h case    0:*/		return 0x821CBEE8;
		  /* 821CBEE8h */ case    1:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821CBEE8h case    1:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821CBEE8h case    1:*/		return 0x821CBEEC;
		  /* 821CBEECh */ case    2:  		/* slw R11, R17, R11 */
		/* 821CBEECh case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 821CBEECh case    2:*/		return 0x821CBEF0;
		  /* 821CBEF0h */ case    3:  		/* addi R11, R11, -1 */
		/* 821CBEF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CBEF0h case    3:*/		return 0x821CBEF4;
		  /* 821CBEF4h */ case    4:  		/* cmplw CR6, R18, R11 */
		/* 821CBEF4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R11);
		/* 821CBEF4h case    4:*/		return 0x821CBEF8;
		  /* 821CBEF8h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821CBEF8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CBF04;  }
		/* 821CBEF8h case    5:*/		return 0x821CBEFC;
		  /* 821CBEFCh */ case    6:  		/* li R3, 0 */
		/* 821CBEFCh case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CBEFCh case    6:*/		return 0x821CBF00;
		  /* 821CBF00h */ case    7:  		/* b 744 */
		/* 821CBF00h case    7:*/		return 0x821CC1E8;
		/* 821CBF00h case    7:*/		return 0x821CBF04;
	}
	return 0x821CBF04;
} // Block from 821CBEE4h-821CBF04h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CBF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBF04);
		  /* 821CBF04h */ case    0:  		/* mr R3, R18 */
		/* 821CBF04h case    0:*/		regs.R3 = regs.R18;
		/* 821CBF04h case    0:*/		return 0x821CBF08;
		  /* 821CBF08h */ case    1:  		/* lwz R31, <#[R19 + 28]> */
		/* 821CBF08h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R19 + 0x0000001C) );
		/* 821CBF08h case    1:*/		return 0x821CBF0C;
		  /* 821CBF0Ch */ case    2:  		/* bl -296876 */
		/* 821CBF0Ch case    2:*/		regs.LR = 0x821CBF10; return 0x82183760;
		/* 821CBF0Ch case    2:*/		return 0x821CBF10;
		  /* 821CBF10h */ case    3:  		/* mr R6, R3 */
		/* 821CBF10h case    3:*/		regs.R6 = regs.R3;
		/* 821CBF10h case    3:*/		return 0x821CBF14;
		  /* 821CBF14h */ case    4:  		/* li R5, 0 */
		/* 821CBF14h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CBF14h case    4:*/		return 0x821CBF18;
		  /* 821CBF18h */ case    5:  		/* mr R4, R31 */
		/* 821CBF18h case    5:*/		regs.R4 = regs.R31;
		/* 821CBF18h case    5:*/		return 0x821CBF1C;
		  /* 821CBF1Ch */ case    6:  		/* mr R3, R16 */
		/* 821CBF1Ch case    6:*/		regs.R3 = regs.R16;
		/* 821CBF1Ch case    6:*/		return 0x821CBF20;
		  /* 821CBF20h */ case    7:  		/* bl 363488 */
		/* 821CBF20h case    7:*/		regs.LR = 0x821CBF24; return 0x82224B00;
		/* 821CBF20h case    7:*/		return 0x821CBF24;
		  /* 821CBF24h */ case    8:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 821CBF24h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 821CBF24h case    8:*/		return 0x821CBF28;
		  /* 821CBF28h */ case    9:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821CBF28h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821CBF28h case    9:*/		return 0x821CBF2C;
		  /* 821CBF2Ch */ case   10:  		/* addi R11, R11, 36 */
		/* 821CBF2Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821CBF2Ch case   10:*/		return 0x821CBF30;
		  /* 821CBF30h */ case   11:  		/* addi R10, R10, 36 */
		/* 821CBF30h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821CBF30h case   11:*/		return 0x821CBF34;
		  /* 821CBF34h */ case   12:  		/* addi R8, R11, -36 */
		/* 821CBF34h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821CBF34h case   12:*/		return 0x821CBF38;
		  /* 821CBF38h */ case   13:  		/* addi R6, R10, -36 */
		/* 821CBF38h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821CBF38h case   13:*/		return 0x821CBF3C;
		  /* 821CBF3Ch */ case   14:  		/* addi R9, R10, 4 */
		/* 821CBF3Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CBF3Ch case   14:*/		return 0x821CBF40;
		  /* 821CBF40h */ case   15:  		/* lwz R7, <#[R11]> */
		/* 821CBF40h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBF40h case   15:*/		return 0x821CBF44;
		  /* 821CBF44h */ case   16:  		/* mr R29, R3 */
		/* 821CBF44h case   16:*/		regs.R29 = regs.R3;
		/* 821CBF44h case   16:*/		return 0x821CBF48;
		  /* 821CBF48h */ case   17:  		/* cmplwi CR6, R14, 0 */
		/* 821CBF48h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821CBF48h case   17:*/		return 0x821CBF4C;
		  /* 821CBF4Ch */ case   18:  		/* stw R7, <#[R10]> */
		/* 821CBF4Ch case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821CBF4Ch case   18:*/		return 0x821CBF50;
		  /* 821CBF50h */ case   19:  		/* lwz R7, <#[R11]> */
		/* 821CBF50h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBF50h case   19:*/		return 0x821CBF54;
		  /* 821CBF54h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CBF54h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CBF54h case   20:*/		return 0x821CBF58;
	}
	return 0x821CBF58;
} // Block from 821CBF04h-821CBF58h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CBF58h
// Function '?FindUniqueSumOfProductsTerms@Compiler@D3DXShader@@AAAPAV?$ArrayList@UUniqueProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBF58);
		  /* 821CBF58h */ case    0:  		/* stw R6, <#[R7]> */
		/* 821CBF58h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821CBF58h case    0:*/		return 0x821CBF5C;
		  /* 821CBF5Ch */ case    1:  		/* stw R8, <#[R10 + 4]> */
		/* 821CBF5Ch case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821CBF5Ch case    1:*/		return 0x821CBF60;
		  /* 821CBF60h */ case    2:  		/* stw R9, <#[R11]> */
		/* 821CBF60h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBF60h case    2:*/		return 0x821CBF64;
		  /* 821CBF64h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821CBF64h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CBF78;  }
		/* 821CBF64h case    3:*/		return 0x821CBF68;
		  /* 821CBF68h */ case    4:  		/* mr R4, R3 */
		/* 821CBF68h case    4:*/		regs.R4 = regs.R3;
		/* 821CBF68h case    4:*/		return 0x821CBF6C;
		  /* 821CBF6Ch */ case    5:  		/* mr R5, R14 */
		/* 821CBF6Ch case    5:*/		regs.R5 = regs.R14;
		/* 821CBF6Ch case    5:*/		return 0x821CBF70;
		  /* 821CBF70h */ case    6:  		/* mr R3, R16 */
		/* 821CBF70h case    6:*/		regs.R3 = regs.R16;
		/* 821CBF70h case    6:*/		return 0x821CBF74;
		  /* 821CBF74h */ case    7:  		/* bl -1452 */
		/* 821CBF74h case    7:*/		regs.LR = 0x821CBF78; return 0x821CB9C8;
		/* 821CBF74h case    7:*/		return 0x821CBF78;
	}
	return 0x821CBF78;
} // Block from 821CBF58h-821CBF78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CBF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBF78);
		  /* 821CBF78h */ case    0:  		/* lwz R11, <#[R16 + 40]> */
		/* 821CBF78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821CBF78h case    0:*/		return 0x821CBF7C;
		  /* 821CBF7Ch */ case    1:  		/* li R20, 0 */
		/* 821CBF7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821CBF7Ch case    1:*/		return 0x821CBF80;
		  /* 821CBF80h */ case    2:  		/* nor R11, R11, R11 */
		/* 821CBF80h case    2:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821CBF80h case    2:*/		return 0x821CBF84;
		  /* 821CBF84h */ case    3:  		/* rlwinm. R11, R11, 18, 31, 31 */
		/* 821CBF84h case    3:*/		cpu::op::rlwinm<1,18,31,31>(regs,&regs.R11,regs.R11);
		/* 821CBF84h case    3:*/		return 0x821CBF88;
		  /* 821CBF88h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 821CBF88h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CBFB0;  }
		/* 821CBF88h case    4:*/		return 0x821CBF8C;
		  /* 821CBF8Ch */ case    5:  		/* lwz R11, <#[R19 + 16]> */
		/* 821CBF8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000010) );
		/* 821CBF8Ch case    5:*/		return 0x821CBF90;
		  /* 821CBF90h */ case    6:  		/* b 20 */
		/* 821CBF90h case    6:*/		return 0x821CBFA4;
		/* 821CBF90h case    6:*/		return 0x821CBF94;
		  /* 821CBF94h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821CBF94h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CBF94h case    7:*/		return 0x821CBF98;
		  /* 821CBF98h */ case    8:  		/* cmpwi CR6, R10, 1 */
		/* 821CBF98h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821CBF98h case    8:*/		return 0x821CBF9C;
		  /* 821CBF9Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 821CBF9Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821CBFAC;  }
		/* 821CBF9Ch case    9:*/		return 0x821CBFA0;
		  /* 821CBFA0h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CBFA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CBFA0h case   10:*/		return 0x821CBFA4;
	}
	return 0x821CBFA4;
} // Block from 821CBF78h-821CBFA4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CBFA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBFA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBFA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBFA4);
		  /* 821CBFA4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CBFA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CBFA4h case    0:*/		return 0x821CBFA8;
		  /* 821CBFA8h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821CBFA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CBF94;  }
		/* 821CBFA8h case    1:*/		return 0x821CBFAC;
	}
	return 0x821CBFAC;
} // Block from 821CBFA4h-821CBFACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CBFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBFAC);
		  /* 821CBFACh */ case    0:  		/* mr R20, R11 */
		/* 821CBFACh case    0:*/		regs.R20 = regs.R11;
		/* 821CBFACh case    0:*/		return 0x821CBFB0;
	}
	return 0x821CBFB0;
} // Block from 821CBFACh-821CBFB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CBFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CBFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CBFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CBFB0);
		  /* 821CBFB0h */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CBFB0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CBFB0h case    0:*/		return 0x821CBFB4;
		  /* 821CBFB4h */ case    1:  		/* li R21, 0 */
		/* 821CBFB4h case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821CBFB4h case    1:*/		return 0x821CBFB8;
		  /* 821CBFB8h */ case    2:  		/* li R23, 0 */
		/* 821CBFB8h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821CBFB8h case    2:*/		return 0x821CBFBC;
		  /* 821CBFBCh */ case    3:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821CBFBCh case    3:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821CBFBCh case    3:*/		return 0x821CBFC0;
		  /* 821CBFC0h */ case    4:  		/* li R24, 0 */
		/* 821CBFC0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821CBFC0h case    4:*/		return 0x821CBFC4;
		  /* 821CBFC4h */ case    5:  		/* mr R25, R17 */
		/* 821CBFC4h case    5:*/		regs.R25 = regs.R17;
		/* 821CBFC4h case    5:*/		return 0x821CBFC8;
		  /* 821CBFC8h */ case    6:  		/* bc 12, CR0_EQ, 208 */
		/* 821CBFC8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CC098;  }
		/* 821CBFC8h case    6:*/		return 0x821CBFCC;
		  /* 821CBFCCh */ case    7:  		/* li R27, 0 */
		/* 821CBFCCh case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CBFCCh case    7:*/		return 0x821CBFD0;
		  /* 821CBFD0h */ case    8:  		/* li R31, 0 */
		/* 821CBFD0h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CBFD0h case    8:*/		return 0x821CBFD4;
		  /* 821CBFD4h */ case    9:  		/* li R30, 0 */
		/* 821CBFD4h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CBFD4h case    9:*/		return 0x821CBFD8;
		  /* 821CBFD8h */ case   10:  		/* addi R28, R20, 8 */
		/* 821CBFD8h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R20,0x8);
		/* 821CBFD8h case   10:*/		return 0x821CBFDC;
		  /* 821CBFDCh */ case   11:  		/* addi R22, R19, 44 */
		/* 821CBFDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R19,0x2C);
		/* 821CBFDCh case   11:*/		return 0x821CBFE0;
		  /* 821CBFE0h */ case   12:  		/* addi R26, R29, 44 */
		/* 821CBFE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R29,0x2C);
		/* 821CBFE0h case   12:*/		return 0x821CBFE4;
		  /* 821CBFE4h */ case   13:  		/* lwzx R4, <#[R30 + R22]> */
		/* 821CBFE4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R22 + 0x00000000) );
		/* 821CBFE4h case   13:*/		return 0x821CBFE8;
		  /* 821CBFE8h */ case   14:  		/* and. R11, R25, R18 */
		/* 821CBFE8h case   14:*/		cpu::op::and<1>(regs,&regs.R11,regs.R25,regs.R18);
		/* 821CBFE8h case   14:*/		return 0x821CBFEC;
		  /* 821CBFECh */ case   15:  		/* bc 12, CR0_EQ, 136 */
		/* 821CBFECh case   15:*/		if ( regs.CR[0].eq ) { return 0x821CC074;  }
		/* 821CBFECh case   15:*/		return 0x821CBFF0;
		  /* 821CBFF0h */ case   16:  		/* mr R3, R29 */
		/* 821CBFF0h case   16:*/		regs.R3 = regs.R29;
		/* 821CBFF0h case   16:*/		return 0x821CBFF4;
		  /* 821CBFF4h */ case   17:  		/* bl -343596 */
		/* 821CBFF4h case   17:*/		regs.LR = 0x821CBFF8; return 0x821781C8;
		/* 821CBFF4h case   17:*/		return 0x821CBFF8;
		  /* 821CBFF8h */ case   18:  		/* stwx R3, <#[R26 + R31]> */
		/* 821CBFF8h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + regs.R31 + 0x00000000) );
		/* 821CBFF8h case   18:*/		return 0x821CBFFC;
		  /* 821CBFFCh */ case   19:  		/* rlwinm R9, R30, 0, 16, 31 */
		/* 821CBFFCh case   19:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R30);
		/* 821CBFFCh case   19:*/		return 0x821CC000;
		  /* 821CC000h */ case   20:  		/* li R11, 15 */
		/* 821CC000h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 821CC000h case   20:*/		return 0x821CC004;
		  /* 821CC004h */ case   21:  		/* slw R11, R11, R31 */
		/* 821CC004h case   21:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821CC004h case   21:*/		return 0x821CC008;
		  /* 821CC008h */ case   22:  		/* lhz R8, <#[R19 + 14]> */
		/* 821CC008h case   22:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R19 + 0x0000000E) );
		/* 821CC008h case   22:*/		return 0x821CC00C;
		  /* 821CC00Ch */ case   23:  		/* lwz R10, <#[R29 + 12]> */
		/* 821CC00Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CC00Ch case   23:*/		return 0x821CC010;
		  /* 821CC010h */ case   24:  		/* srw R9, R8, R9 */
		/* 821CC010h case   24:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821CC010h case   24:*/		return 0x821CC014;
		  /* 821CC014h */ case   25:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821CC014h case   25:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821CC014h case   25:*/		return 0x821CC018;
		  /* 821CC018h */ case   26:  		/* and R8, R11, R10 */
		/* 821CC018h case   26:*/		cpu::op::and<0>(regs,&regs.R8,regs.R11,regs.R10);
		/* 821CC018h case   26:*/		return 0x821CC01C;
		  /* 821CC01Ch */ case   27:  		/* slw R9, R9, R31 */
		/* 821CC01Ch case   27:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821CC01Ch case   27:*/		return 0x821CC020;
		  /* 821CC020h */ case   28:  		/* rlwinm R8, R8, 0, 16, 31 */
		/* 821CC020h case   28:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R8);
		/* 821CC020h case   28:*/		return 0x821CC024;
		  /* 821CC024h */ case   29:  		/* cmplw CR6, R8, R9 */
		/* 821CC024h case   29:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821CC024h case   29:*/		return 0x821CC028;
		  /* 821CC028h */ case   30:  		/* bc 12, CR6_EQ, 16 */
		/* 821CC028h case   30:*/		if ( regs.CR[6].eq ) { return 0x821CC038;  }
		/* 821CC028h case   30:*/		return 0x821CC02C;
		  /* 821CC02Ch */ case   31:  		/* andc R11, R10, R11 */
		/* 821CC02Ch case   31:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CC02Ch case   31:*/		return 0x821CC030;
		  /* 821CC030h */ case   32:  		/* or R11, R11, R9 */
		/* 821CC030h case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CC030h case   32:*/		return 0x821CC034;
		  /* 821CC034h */ case   33:  		/* sth R11, <#[R29 + 14]> */
		/* 821CC034h case   33:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R29 + 0x0000000E) );
		/* 821CC034h case   33:*/		return 0x821CC038;
	}
	return 0x821CC038;
} // Block from 821CBFB0h-821CC038h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821CC038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC038);
		  /* 821CC038h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821CC038h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821CC038h case    0:*/		return 0x821CC03C;
		  /* 821CC03Ch */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821CC03Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CC058;  }
		/* 821CC03Ch case    1:*/		return 0x821CC040;
		  /* 821CC040h */ case    2:  		/* mr R7, R16 */
		/* 821CC040h case    2:*/		regs.R7 = regs.R16;
		/* 821CC040h case    2:*/		return 0x821CC044;
		  /* 821CC044h */ case    3:  		/* lfd FR1, <#[R28]> */
		/* 821CC044h case    3:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 821CC044h case    3:*/		return 0x821CC048;
		  /* 821CC048h */ case    4:  		/* mr R4, R23 */
		/* 821CC048h case    4:*/		regs.R4 = regs.R23;
		/* 821CC048h case    4:*/		return 0x821CC04C;
		  /* 821CC04Ch */ case    5:  		/* lfd FR2, <#[R28 + 32]> */
		/* 821CC04Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R28 + 0x00000020) );
		/* 821CC04Ch case    5:*/		return 0x821CC050;
		  /* 821CC050h */ case    6:  		/* mr R3, R29 */
		/* 821CC050h case    6:*/		regs.R3 = regs.R29;
		/* 821CC050h case    6:*/		return 0x821CC054;
		  /* 821CC054h */ case    7:  		/* bl 355020 */
		/* 821CC054h case    7:*/		regs.LR = 0x821CC058; return 0x82222B20;
		/* 821CC054h case    7:*/		return 0x821CC058;
	}
	return 0x821CC058;
} // Block from 821CC038h-821CC058h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CC058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC058);
		  /* 821CC058h */ case    0:  		/* li R11, 3 */
		/* 821CC058h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821CC058h case    0:*/		return 0x821CC05C;
		  /* 821CC05Ch */ case    1:  		/* slw R10, R23, R27 */
		/* 821CC05Ch case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R27);
		/* 821CC05Ch case    1:*/		return 0x821CC060;
		  /* 821CC060h */ case    2:  		/* slw R11, R11, R27 */
		/* 821CC060h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821CC060h case    2:*/		return 0x821CC064;
		  /* 821CC064h */ case    3:  		/* andc R11, R21, R11 */
		/* 821CC064h case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 821CC064h case    3:*/		return 0x821CC068;
		  /* 821CC068h */ case    4:  		/* addi R23, R23, 1 */
		/* 821CC068h case    4:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821CC068h case    4:*/		return 0x821CC06C;
		  /* 821CC06Ch */ case    5:  		/* or R21, R11, R10 */
		/* 821CC06Ch case    5:*/		cpu::op::or<0>(regs,&regs.R21,regs.R11,regs.R10);
		/* 821CC06Ch case    5:*/		return 0x821CC070;
		  /* 821CC070h */ case    6:  		/* addi R31, R31, 4 */
		/* 821CC070h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821CC070h case    6:*/		return 0x821CC074;
	}
	return 0x821CC074;
} // Block from 821CC058h-821CC074h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CC074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC074);
		  /* 821CC074h */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CC074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CC074h case    0:*/		return 0x821CC078;
		  /* 821CC078h */ case    1:  		/* addi R24, R24, 1 */
		/* 821CC078h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821CC078h case    1:*/		return 0x821CC07C;
		  /* 821CC07Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 821CC07Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821CC07Ch case    2:*/		return 0x821CC080;
		  /* 821CC080h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821CC080h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821CC080h case    3:*/		return 0x821CC084;
		  /* 821CC084h */ case    4:  		/* addi R28, R28, 8 */
		/* 821CC084h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x8);
		/* 821CC084h case    4:*/		return 0x821CC088;
		  /* 821CC088h */ case    5:  		/* addi R27, R27, 2 */
		/* 821CC088h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 821CC088h case    5:*/		return 0x821CC08C;
		  /* 821CC08Ch */ case    6:  		/* rlwinm R25, R25, 1, 0, 30 */
		/* 821CC08Ch case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R25,regs.R25);
		/* 821CC08Ch case    6:*/		return 0x821CC090;
		  /* 821CC090h */ case    7:  		/* cmplw CR6, R24, R11 */
		/* 821CC090h case    7:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821CC090h case    7:*/		return 0x821CC094;
		  /* 821CC094h */ case    8:  		/* bc 12, CR6_LT, -176 */
		/* 821CC094h case    8:*/		if ( regs.CR[6].lt ) { return 0x821CBFE4;  }
		/* 821CC094h case    8:*/		return 0x821CC098;
	}
	return 0x821CC098;
} // Block from 821CC074h-821CC098h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CC098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC098);
		  /* 821CC098h */ case    0:  		/* mr R30, R15 */
		/* 821CC098h case    0:*/		regs.R30 = regs.R15;
		/* 821CC098h case    0:*/		return 0x821CC09C;
		  /* 821CC09Ch */ case    1:  		/* lwz R31, <#[R30]> */
		/* 821CC09Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821CC09Ch case    1:*/		return 0x821CC0A0;
		  /* 821CC0A0h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821CC0A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC0A0h case    2:*/		return 0x821CC0A4;
		  /* 821CC0A4h */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821CC0A4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CC15C;  }
		/* 821CC0A4h case    3:*/		return 0x821CC0A8;
		  /* 821CC0A8h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821CC0A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821CC0A8h case    4:*/		return 0x821CC0AC;
		  /* 821CC0ACh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CC0ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CC0ACh case    5:*/		return 0x821CC0B0;
		  /* 821CC0B0h */ case    6:  		/* bc 12, CR6_EQ, 152 */
		/* 821CC0B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CC148;  }
		/* 821CC0B0h case    6:*/		return 0x821CC0B4;
		  /* 821CC0B4h */ case    7:  		/* lwz R10, <#[R31]> */
		/* 821CC0B4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC0B4h case    7:*/		return 0x821CC0B8;
		  /* 821CC0B8h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CC0B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CC0B8h case    8:*/		return 0x821CC0BC;
		  /* 821CC0BCh */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821CC0BCh case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821CC0BCh case    9:*/		return 0x821CC0C0;
		  /* 821CC0C0h */ case   10:  		/* rlwinm R8, R10, 24, 29, 30 */
		/* 821CC0C0h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R10);
		/* 821CC0C0h case   10:*/		return 0x821CC0C4;
		  /* 821CC0C4h */ case   11:  		/* srw R9, R21, R9 */
		/* 821CC0C4h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 821CC0C4h case   11:*/		return 0x821CC0C8;
		  /* 821CC0C8h */ case   12:  		/* srw R8, R21, R8 */
		/* 821CC0C8h case   12:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R21,regs.R8);
		/* 821CC0C8h case   12:*/		return 0x821CC0CC;
		  /* 821CC0CCh */ case   13:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821CC0CCh case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821CC0CCh case   13:*/		return 0x821CC0D0;
		  /* 821CC0D0h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821CC0D0h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821CC0D0h case   14:*/		return 0x821CC0D4;
		  /* 821CC0D4h */ case   15:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821CC0D4h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821CC0D4h case   15:*/		return 0x821CC0D8;
		  /* 821CC0D8h */ case   16:  		/* srw R9, R21, R9 */
		/* 821CC0D8h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 821CC0D8h case   16:*/		return 0x821CC0DC;
		  /* 821CC0DCh */ case   17:  		/* rlwinm R7, R10, 28, 29, 30 */
		/* 821CC0DCh case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R10);
		/* 821CC0DCh case   17:*/		return 0x821CC0E0;
		  /* 821CC0E0h */ case   18:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821CC0E0h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821CC0E0h case   18:*/		return 0x821CC0E4;
		  /* 821CC0E4h */ case   19:  		/* srw R8, R21, R7 */
		/* 821CC0E4h case   19:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R21,regs.R7);
		/* 821CC0E4h case   19:*/		return 0x821CC0E8;
		  /* 821CC0E8h */ case   20:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821CC0E8h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821CC0E8h case   20:*/		return 0x821CC0EC;
		  /* 821CC0ECh */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821CC0ECh case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821CC0ECh case   21:*/		return 0x821CC0F0;
		  /* 821CC0F0h */ case   22:  		/* rlwinm R9, R8, 5, 0, 26 */
		/* 821CC0F0h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R8);
		/* 821CC0F0h case   22:*/		return 0x821CC0F4;
		  /* 821CC0F4h */ case   23:  		/* addi R11, R11, 4 */
		/* 821CC0F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CC0F4h case   23:*/		return 0x821CC0F8;
		  /* 821CC0F8h */ case   24:  		/* or R10, R9, R10 */
		/* 821CC0F8h case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821CC0F8h case   24:*/		return 0x821CC0FC;
		  /* 821CC0FCh */ case   25:  		/* stw R10, <#[R31]> */
		/* 821CC0FCh case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC0FCh case   25:*/		return 0x821CC100;
		  /* 821CC100h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 821CC100h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC100h case   26:*/		return 0x821CC104;
		  /* 821CC104h */ case   27:  		/* b 12 */
		/* 821CC104h case   27:*/		return 0x821CC110;
		/* 821CC104h case   27:*/		return 0x821CC108;
		  /* 821CC108h */ case   28:  		/* addi R11, R10, 8 */
		/* 821CC108h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CC108h case   28:*/		return 0x821CC10C;
		  /* 821CC10Ch */ case   29:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CC10Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CC10Ch case   29:*/		return 0x821CC110;
	}
	return 0x821CC110;
} // Block from 821CC098h-821CC110h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CC110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC110);
		  /* 821CC110h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821CC110h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821CC110h case    0:*/		return 0x821CC114;
		  /* 821CC114h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CC114h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC108;  }
		/* 821CC114h case    1:*/		return 0x821CC118;
		  /* 821CC118h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CC118h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC118h case    2:*/		return 0x821CC11C;
		  /* 821CC11Ch */ case    3:  		/* cmplwi CR6, R14, 0 */
		/* 821CC11Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821CC11Ch case    3:*/		return 0x821CC120;
		  /* 821CC120h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821CC120h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC120h case    4:*/		return 0x821CC124;
		  /* 821CC124h */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CC124h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CC124h case    5:*/		return 0x821CC128;
		  /* 821CC128h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821CC128h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC128h case    6:*/		return 0x821CC12C;
		  /* 821CC12Ch */ case    7:  		/* stw R31, <#[R29 + 4]> */
		/* 821CC12Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821CC12Ch case    7:*/		return 0x821CC130;
		  /* 821CC130h */ case    8:  		/* stw R29, <#[R31 + 12]> */
		/* 821CC130h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CC130h case    8:*/		return 0x821CC134;
		  /* 821CC134h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821CC134h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CC148;  }
		/* 821CC134h case    9:*/		return 0x821CC138;
		  /* 821CC138h */ case   10:  		/* mr R5, R14 */
		/* 821CC138h case   10:*/		regs.R5 = regs.R14;
		/* 821CC138h case   10:*/		return 0x821CC13C;
		  /* 821CC13Ch */ case   11:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CC13Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CC13Ch case   11:*/		return 0x821CC140;
		  /* 821CC140h */ case   12:  		/* mr R3, R16 */
		/* 821CC140h case   12:*/		regs.R3 = regs.R16;
		/* 821CC140h case   12:*/		return 0x821CC144;
		  /* 821CC144h */ case   13:  		/* bl -1916 */
		/* 821CC144h case   13:*/		regs.LR = 0x821CC148; return 0x821CB9C8;
		/* 821CC144h case   13:*/		return 0x821CC148;
	}
	return 0x821CC148;
} // Block from 821CC110h-821CC148h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CC148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC148);
		  /* 821CC148h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821CC148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CC148h case    0:*/		return 0x821CC14C;
		  /* 821CC14Ch */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821CC14Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821CC14Ch case    1:*/		return 0x821CC150;
		  /* 821CC150h */ case    2:  		/* bc 4, CR6_EQ, -180 */
		/* 821CC150h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CC09C;  }
		/* 821CC150h case    2:*/		return 0x821CC154;
		  /* 821CC154h */ case    3:  		/* addi R30, R31, 8 */
		/* 821CC154h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821CC154h case    3:*/		return 0x821CC158;
		  /* 821CC158h */ case    4:  		/* b -188 */
		/* 821CC158h case    4:*/		return 0x821CC09C;
		/* 821CC158h case    4:*/		return 0x821CC15C;
	}
	return 0x821CC15C;
} // Block from 821CC148h-821CC15Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC15C);
		  /* 821CC15Ch */ case    0:  		/* cmplwi CR6, R14, 0 */
		/* 821CC15Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821CC15Ch case    0:*/		return 0x821CC160;
		  /* 821CC160h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821CC160h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CC1B4;  }
		/* 821CC160h case    1:*/		return 0x821CC164;
		  /* 821CC164h */ case    2:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CC164h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CC164h case    2:*/		return 0x821CC168;
		  /* 821CC168h */ case    3:  		/* li R30, 0 */
		/* 821CC168h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CC168h case    3:*/		return 0x821CC16C;
		  /* 821CC16Ch */ case    4:  		/* mr R28, R17 */
		/* 821CC16Ch case    4:*/		regs.R28 = regs.R17;
		/* 821CC16Ch case    4:*/		return 0x821CC170;
		  /* 821CC170h */ case    5:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821CC170h case    5:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821CC170h case    5:*/		return 0x821CC174;
		  /* 821CC174h */ case    6:  		/* bc 12, CR0_EQ, 64 */
		/* 821CC174h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CC1B4;  }
		/* 821CC174h case    6:*/		return 0x821CC178;
		  /* 821CC178h */ case    7:  		/* addi R31, R19, 44 */
		/* 821CC178h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R19,0x2C);
		/* 821CC178h case    7:*/		return 0x821CC17C;
		  /* 821CC17Ch */ case    8:  		/* and. R11, R28, R18 */
		/* 821CC17Ch case    8:*/		cpu::op::and<1>(regs,&regs.R11,regs.R28,regs.R18);
		/* 821CC17Ch case    8:*/		return 0x821CC180;
		  /* 821CC180h */ case    9:  		/* bc 4, CR0_EQ, 24 */
		/* 821CC180h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CC198;  }
		/* 821CC180h case    9:*/		return 0x821CC184;
		  /* 821CC184h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821CC184h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC184h case   10:*/		return 0x821CC188;
		  /* 821CC188h */ case   11:  		/* mr R5, R14 */
		/* 821CC188h case   11:*/		regs.R5 = regs.R14;
		/* 821CC188h case   11:*/		return 0x821CC18C;
		  /* 821CC18Ch */ case   12:  		/* mr R3, R16 */
		/* 821CC18Ch case   12:*/		regs.R3 = regs.R16;
		/* 821CC18Ch case   12:*/		return 0x821CC190;
		  /* 821CC190h */ case   13:  		/* lwz R4, <#[R11 + 12]> */
		/* 821CC190h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CC190h case   13:*/		return 0x821CC194;
		  /* 821CC194h */ case   14:  		/* bl -1996 */
		/* 821CC194h case   14:*/		regs.LR = 0x821CC198; return 0x821CB9C8;
		/* 821CC194h case   14:*/		return 0x821CC198;
	}
	return 0x821CC198;
} // Block from 821CC15Ch-821CC198h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CC198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC198);
		  /* 821CC198h */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CC198h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CC198h case    0:*/		return 0x821CC19C;
		  /* 821CC19Ch */ case    1:  		/* addi R30, R30, 1 */
		/* 821CC19Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821CC19Ch case    1:*/		return 0x821CC1A0;
		  /* 821CC1A0h */ case    2:  		/* addi R31, R31, 4 */
		/* 821CC1A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821CC1A0h case    2:*/		return 0x821CC1A4;
		  /* 821CC1A4h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821CC1A4h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821CC1A4h case    3:*/		return 0x821CC1A8;
		  /* 821CC1A8h */ case    4:  		/* rlwinm R28, R28, 1, 0, 30 */
		/* 821CC1A8h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R28);
		/* 821CC1A8h case    4:*/		return 0x821CC1AC;
		  /* 821CC1ACh */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 821CC1ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821CC1ACh case    5:*/		return 0x821CC1B0;
		  /* 821CC1B0h */ case    6:  		/* bc 12, CR6_LT, -52 */
		/* 821CC1B0h case    6:*/		if ( regs.CR[6].lt ) { return 0x821CC17C;  }
		/* 821CC1B0h case    6:*/		return 0x821CC1B4;
	}
	return 0x821CC1B4;
} // Block from 821CC198h-821CC1B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CC1B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC1B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC1B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC1B4);
		  /* 821CC1B4h */ case    0:  		/* lwz R11, <#[R16 + 40]> */
		/* 821CC1B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 821CC1B4h case    0:*/		return 0x821CC1B8;
		  /* 821CC1B8h */ case    1:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 821CC1B8h case    1:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 821CC1B8h case    1:*/		return 0x821CC1BC;
		  /* 821CC1BCh */ case    2:  		/* bc 12, CR0_EQ, 40 */
		/* 821CC1BCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821CC1E4;  }
		/* 821CC1BCh case    2:*/		return 0x821CC1C0;
		  /* 821CC1C0h */ case    3:  		/* lwz R11, <#[R29 + 8]> */
		/* 821CC1C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CC1C0h case    3:*/		return 0x821CC1C4;
		  /* 821CC1C4h */ case    4:  		/* lis R10, 256 */
		/* 821CC1C4h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x100);
		/* 821CC1C4h case    4:*/		return 0x821CC1C8;
		  /* 821CC1C8h */ case    5:  		/* rlwinm R9, R11, 18, 29, 31 */
		/* 821CC1C8h case    5:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R9,regs.R11);
		/* 821CC1C8h case    5:*/		return 0x821CC1CC;
		  /* 821CC1CCh */ case    6:  		/* rlwinm R8, R11, 0, 31, 26 */
		/* 821CC1CCh case    6:*/		cpu::op::rlwinm<0,0,31,26>(regs,&regs.R8,regs.R11);
		/* 821CC1CCh case    6:*/		return 0x821CC1D0;
		  /* 821CC1D0h */ case    7:  		/* slw R11, R17, R9 */
		/* 821CC1D0h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R9);
		/* 821CC1D0h case    7:*/		return 0x821CC1D4;
		  /* 821CC1D4h */ case    8:  		/* addi R11, R11, -1 */
		/* 821CC1D4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CC1D4h case    8:*/		return 0x821CC1D8;
		  /* 821CC1D8h */ case    9:  		/* rlwimi R10, R11, 1, 27, 30 */
		/* 821CC1D8h case    9:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R10,regs.R11);
		/* 821CC1D8h case    9:*/		return 0x821CC1DC;
		  /* 821CC1DCh */ case   10:  		/* or R11, R10, R8 */
		/* 821CC1DCh case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R8);
		/* 821CC1DCh case   10:*/		return 0x821CC1E0;
		  /* 821CC1E0h */ case   11:  		/* stw R11, <#[R29 + 8]> */
		/* 821CC1E0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CC1E0h case   11:*/		return 0x821CC1E4;
	}
	return 0x821CC1E4;
} // Block from 821CC1B4h-821CC1E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CC1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC1E4);
		  /* 821CC1E4h */ case    0:  		/* mr R3, R29 */
		/* 821CC1E4h case    0:*/		regs.R3 = regs.R29;
		/* 821CC1E4h case    0:*/		return 0x821CC1E8;
	}
	return 0x821CC1E8;
} // Block from 821CC1E4h-821CC1E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC1E8);
		  /* 821CC1E8h */ case    0:  		/* addi R1, R1, 240 */
		/* 821CC1E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821CC1E8h case    0:*/		return 0x821CC1EC;
		  /* 821CC1ECh */ case    1:  		/* b -1290108 */
		/* 821CC1ECh case    1:*/		return 0x82091270;
		/* 821CC1ECh case    1:*/		return 0x821CC1F0;
	}
	return 0x821CC1F0;
} // Block from 821CC1E8h-821CC1F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC1F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC1F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC1F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC1F0);
		  /* 821CC1F0h */ case    0:  		/* mfspr R12, LR */
		/* 821CC1F0h case    0:*/		regs.R12 = regs.LR;
		/* 821CC1F0h case    0:*/		return 0x821CC1F4;
		  /* 821CC1F4h */ case    1:  		/* bl -1290172 */
		/* 821CC1F4h case    1:*/		regs.LR = 0x821CC1F8; return 0x82091238;
		/* 821CC1F4h case    1:*/		return 0x821CC1F8;
		  /* 821CC1F8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821CC1F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821CC1F8h case    2:*/		return 0x821CC1FC;
		  /* 821CC1FCh */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 821CC1FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821CC1FCh case    3:*/		return 0x821CC200;
		  /* 821CC200h */ case    4:  		/* mr R28, R3 */
		/* 821CC200h case    4:*/		regs.R28 = regs.R3;
		/* 821CC200h case    4:*/		return 0x821CC204;
		  /* 821CC204h */ case    5:  		/* mr R22, R4 */
		/* 821CC204h case    5:*/		regs.R22 = regs.R4;
		/* 821CC204h case    5:*/		return 0x821CC208;
		  /* 821CC208h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CC208h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CC208h case    6:*/		return 0x821CC20C;
		  /* 821CC20Ch */ case    7:  		/* mr R30, R5 */
		/* 821CC20Ch case    7:*/		regs.R30 = regs.R5;
		/* 821CC20Ch case    7:*/		return 0x821CC210;
		  /* 821CC210h */ case    8:  		/* mr R25, R6 */
		/* 821CC210h case    8:*/		regs.R25 = regs.R6;
		/* 821CC210h case    8:*/		return 0x821CC214;
		  /* 821CC214h */ case    9:  		/* mr R20, R7 */
		/* 821CC214h case    9:*/		regs.R20 = regs.R7;
		/* 821CC214h case    9:*/		return 0x821CC218;
		  /* 821CC218h */ case   10:  		/* cmplwi CR6, R11, 12288 */
		/* 821CC218h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003000);
		/* 821CC218h case   10:*/		return 0x821CC21C;
		  /* 821CC21Ch */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 821CC21Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CC228;  }
		/* 821CC21Ch case   11:*/		return 0x821CC220;
		  /* 821CC220h */ case   12:  		/* li R3, 0 */
		/* 821CC220h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CC220h case   12:*/		return 0x821CC224;
		  /* 821CC224h */ case   13:  		/* b 980 */
		/* 821CC224h case   13:*/		return 0x821CC5F8;
		/* 821CC224h case   13:*/		return 0x821CC228;
	}
	return 0x821CC228;
} // Block from 821CC1F0h-821CC228h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CC228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC228);
		  /* 821CC228h */ case    0:  		/* li R26, 0 */
		/* 821CC228h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821CC228h case    0:*/		return 0x821CC22C;
		  /* 821CC22Ch */ case    1:  		/* addi R21, R22, 4 */
		/* 821CC22Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R22,0x4);
		/* 821CC22Ch case    1:*/		return 0x821CC230;
		  /* 821CC230h */ case    2:  		/* li R24, 1 */
		/* 821CC230h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 821CC230h case    2:*/		return 0x821CC234;
		  /* 821CC234h */ case    3:  		/* lwz R23, <#[R21]> */
		/* 821CC234h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R21 + 0x00000000) );
		/* 821CC234h case    3:*/		return 0x821CC238;
		  /* 821CC238h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 821CC238h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821CC238h case    4:*/		return 0x821CC23C;
		  /* 821CC23Ch */ case    5:  		/* bc 12, CR6_EQ, 952 */
		/* 821CC23Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CC5F4;  }
		/* 821CC23Ch case    5:*/		return 0x821CC240;
		  /* 821CC240h */ case    6:  		/* lwz R31, <#[R23 + 16]> */
		/* 821CC240h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000010) );
		/* 821CC240h case    6:*/		return 0x821CC244;
		  /* 821CC244h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821CC244h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC244h case    7:*/		return 0x821CC248;
		  /* 821CC248h */ case    8:  		/* bc 12, CR6_EQ, 920 */
		/* 821CC248h case    8:*/		if ( regs.CR[6].eq ) { return 0x821CC5E0;  }
		/* 821CC248h case    8:*/		return 0x821CC24C;
		  /* 821CC24Ch */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CC24Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC24Ch case    9:*/		return 0x821CC250;
		  /* 821CC250h */ case   10:  		/* lwz R9, <#[R30 + 8]> */
		/* 821CC250h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821CC250h case   10:*/		return 0x821CC254;
		  /* 821CC254h */ case   11:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821CC254h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821CC254h case   11:*/		return 0x821CC258;
		  /* 821CC258h */ case   12:  		/* rlwinm R9, R9, 25, 25, 31 */
		/* 821CC258h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R9);
		/* 821CC258h case   12:*/		return 0x821CC25C;
		  /* 821CC25Ch */ case   13:  		/* cmplw CR6, R10, R9 */
		/* 821CC25Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CC25Ch case   13:*/		return 0x821CC260;
		  /* 821CC260h */ case   14:  		/* bc 4, CR6_EQ, 896 */
		/* 821CC260h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CC5E0;  }
		/* 821CC260h case   14:*/		return 0x821CC264;
		  /* 821CC264h */ case   15:  		/* cmplw CR6, R31, R30 */
		/* 821CC264h case   15:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821CC264h case   15:*/		return 0x821CC268;
		  /* 821CC268h */ case   16:  		/* bc 12, CR6_EQ, 888 */
		/* 821CC268h case   16:*/		if ( regs.CR[6].eq ) { return 0x821CC5E0;  }
		/* 821CC268h case   16:*/		return 0x821CC26C;
		  /* 821CC26Ch */ case   17:  		/* rlwinm. R9, R11, 7, 31, 31 */
		/* 821CC26Ch case   17:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R9,regs.R11);
		/* 821CC26Ch case   17:*/		return 0x821CC270;
		  /* 821CC270h */ case   18:  		/* bc 4, CR0_EQ, 880 */
		/* 821CC270h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC270h case   18:*/		return 0x821CC274;
		  /* 821CC274h */ case   19:  		/* rlwinm. R9, R11, 27, 31, 31 */
		/* 821CC274h case   19:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R9,regs.R11);
		/* 821CC274h case   19:*/		return 0x821CC278;
		  /* 821CC278h */ case   20:  		/* bc 4, CR0_EQ, 872 */
		/* 821CC278h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC278h case   20:*/		return 0x821CC27C;
		  /* 821CC27Ch */ case   21:  		/* rlwinm. R11, R11, 26, 31, 31 */
		/* 821CC27Ch case   21:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC27Ch case   21:*/		return 0x821CC280;
		  /* 821CC280h */ case   22:  		/* bc 12, CR0_EQ, 20 */
		/* 821CC280h case   22:*/		if ( regs.CR[0].eq ) { return 0x821CC294;  }
		/* 821CC280h case   22:*/		return 0x821CC284;
		  /* 821CC284h */ case   23:  		/* lwz R11, <#[R31 + 28]> */
		/* 821CC284h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821CC284h case   23:*/		return 0x821CC288;
		  /* 821CC288h */ case   24:  		/* lwz R9, <#[R30 + 28]> */
		/* 821CC288h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC288h case   24:*/		return 0x821CC28C;
		  /* 821CC28Ch */ case   25:  		/* cmpw CR6, R11, R9 */
		/* 821CC28Ch case   25:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 821CC28Ch case   25:*/		return 0x821CC290;
	}
	return 0x821CC290;
} // Block from 821CC228h-821CC290h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821CC290h
// Function '?SortProductTermList@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC290);
		  /* 821CC290h */ case    0:  		/* bc 4, CR6_EQ, 848 */
		/* 821CC290h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821CC5E0;  }
		/* 821CC290h case    0:*/		return 0x821CC294;
	}
	return 0x821CC294;
} // Block from 821CC290h-821CC294h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC294);
		  /* 821CC294h */ case    0:  		/* cmplwi CR6, R10, 112 */
		/* 821CC294h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000070);
		/* 821CC294h case    0:*/		return 0x821CC298;
		  /* 821CC298h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821CC298h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC2AC;  }
		/* 821CC298h case    1:*/		return 0x821CC29C;
		  /* 821CC29Ch */ case    2:  		/* lwz R11, <#[R31 + 28]> */
		/* 821CC29Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821CC29Ch case    2:*/		return 0x821CC2A0;
		  /* 821CC2A0h */ case    3:  		/* lwz R10, <#[R30 + 28]> */
		/* 821CC2A0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC2A0h case    3:*/		return 0x821CC2A4;
		  /* 821CC2A4h */ case    4:  		/* cmpw CR6, R11, R10 */
		/* 821CC2A4h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CC2A4h case    4:*/		return 0x821CC2A8;
		  /* 821CC2A8h */ case    5:  		/* bc 4, CR6_EQ, 824 */
		/* 821CC2A8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CC5E0;  }
		/* 821CC2A8h case    5:*/		return 0x821CC2AC;
	}
	return 0x821CC2AC;
} // Block from 821CC294h-821CC2ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CC2ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC2AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC2AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC2AC);
		  /* 821CC2ACh */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 821CC2ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821CC2ACh case    0:*/		return 0x821CC2B0;
		  /* 821CC2B0h */ case    1:  		/* lwz R10, <#[R30 + 28]> */
		/* 821CC2B0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC2B0h case    1:*/		return 0x821CC2B4;
		  /* 821CC2B4h */ case    2:  		/* lwz R11, <#[R11 + 76]> */
		/* 821CC2B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821CC2B4h case    2:*/		return 0x821CC2B8;
		  /* 821CC2B8h */ case    3:  		/* lwz R10, <#[R10 + 76]> */
		/* 821CC2B8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 821CC2B8h case    3:*/		return 0x821CC2BC;
		  /* 821CC2BCh */ case    4:  		/* xor R11, R11, R10 */
		/* 821CC2BCh case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CC2BCh case    4:*/		return 0x821CC2C0;
		  /* 821CC2C0h */ case    5:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821CC2C0h case    5:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821CC2C0h case    5:*/		return 0x821CC2C4;
		  /* 821CC2C4h */ case    6:  		/* bc 4, CR0_EQ, 796 */
		/* 821CC2C4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC2C4h case    6:*/		return 0x821CC2C8;
		  /* 821CC2C8h */ case    7:  		/* mr R3, R31 */
		/* 821CC2C8h case    7:*/		regs.R3 = regs.R31;
		/* 821CC2C8h case    7:*/		return 0x821CC2CC;
		  /* 821CC2CCh */ case    8:  		/* bl -424268 */
		/* 821CC2CCh case    8:*/		regs.LR = 0x821CC2D0; return 0x82164980;
		/* 821CC2CCh case    8:*/		return 0x821CC2D0;
		  /* 821CC2D0h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC2D0h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC2D0h case    9:*/		return 0x821CC2D4;
		  /* 821CC2D4h */ case   10:  		/* bc 4, CR0_EQ, 780 */
		/* 821CC2D4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC2D4h case   10:*/		return 0x821CC2D8;
		  /* 821CC2D8h */ case   11:  		/* mr R5, R28 */
		/* 821CC2D8h case   11:*/		regs.R5 = regs.R28;
		/* 821CC2D8h case   11:*/		return 0x821CC2DC;
		  /* 821CC2DCh */ case   12:  		/* mr R4, R30 */
		/* 821CC2DCh case   12:*/		regs.R4 = regs.R30;
		/* 821CC2DCh case   12:*/		return 0x821CC2E0;
		  /* 821CC2E0h */ case   13:  		/* mr R3, R31 */
		/* 821CC2E0h case   13:*/		regs.R3 = regs.R31;
		/* 821CC2E0h case   13:*/		return 0x821CC2E4;
		  /* 821CC2E4h */ case   14:  		/* bl 367156 */
		/* 821CC2E4h case   14:*/		regs.LR = 0x821CC2E8; return 0x82225D18;
		/* 821CC2E4h case   14:*/		return 0x821CC2E8;
		  /* 821CC2E8h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC2E8h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC2E8h case   15:*/		return 0x821CC2EC;
		  /* 821CC2ECh */ case   16:  		/* bc 12, CR0_EQ, 756 */
		/* 821CC2ECh case   16:*/		if ( regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC2ECh case   16:*/		return 0x821CC2F0;
		  /* 821CC2F0h */ case   17:  		/* lwz R11, <#[R31 + 28]> */
		/* 821CC2F0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821CC2F0h case   17:*/		return 0x821CC2F4;
		  /* 821CC2F4h */ case   18:  		/* li R27, 0 */
		/* 821CC2F4h case   18:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CC2F4h case   18:*/		return 0x821CC2F8;
		  /* 821CC2F8h */ case   19:  		/* lwz R10, <#[R30 + 28]> */
		/* 821CC2F8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC2F8h case   19:*/		return 0x821CC2FC;
		  /* 821CC2FCh */ case   20:  		/* cmpw CR6, R11, R10 */
		/* 821CC2FCh case   20:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CC2FCh case   20:*/		return 0x821CC300;
		  /* 821CC300h */ case   21:  		/* bc 4, CR6_EQ, 40 */
		/* 821CC300h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821CC328;  }
		/* 821CC300h case   21:*/		return 0x821CC304;
		  /* 821CC304h */ case   22:  		/* mr R27, R24 */
		/* 821CC304h case   22:*/		regs.R27 = regs.R24;
		/* 821CC304h case   22:*/		return 0x821CC308;
		  /* 821CC308h */ case   23:  		/* cmplw CR6, R31, R22 */
		/* 821CC308h case   23:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 821CC308h case   23:*/		return 0x821CC30C;
		  /* 821CC30Ch */ case   24:  		/* bc 12, CR6_EQ, 140 */
		/* 821CC30Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x821CC398;  }
		/* 821CC30Ch case   24:*/		return 0x821CC310;
		  /* 821CC310h */ case   25:  		/* mr R4, R30 */
		/* 821CC310h case   25:*/		regs.R4 = regs.R30;
		/* 821CC310h case   25:*/		return 0x821CC314;
		  /* 821CC314h */ case   26:  		/* mr R3, R31 */
		/* 821CC314h case   26:*/		regs.R3 = regs.R31;
		/* 821CC314h case   26:*/		return 0x821CC318;
		  /* 821CC318h */ case   27:  		/* bl 368040 */
		/* 821CC318h case   27:*/		regs.LR = 0x821CC31C; return 0x822260C0;
		/* 821CC318h case   27:*/		return 0x821CC31C;
		  /* 821CC31Ch */ case   28:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC31Ch case   28:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC31Ch case   28:*/		return 0x821CC320;
		  /* 821CC320h */ case   29:  		/* bc 12, CR0_EQ, 120 */
		/* 821CC320h case   29:*/		if ( regs.CR[0].eq ) { return 0x821CC398;  }
		/* 821CC320h case   29:*/		return 0x821CC324;
		  /* 821CC324h */ case   30:  		/* b 104 */
		/* 821CC324h case   30:*/		return 0x821CC38C;
		/* 821CC324h case   30:*/		return 0x821CC328;
	}
	return 0x821CC328;
} // Block from 821CC2ACh-821CC328h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821CC328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC328);
		  /* 821CC328h */ case    0:  		/* lwz R9, <#[R11 + 48]> */
		/* 821CC328h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821CC328h case    0:*/		return 0x821CC32C;
		  /* 821CC32Ch */ case    1:  		/* lwz R8, <#[R10 + 40]> */
		/* 821CC32Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000028) );
		/* 821CC32Ch case    1:*/		return 0x821CC330;
		  /* 821CC330h */ case    2:  		/* rlwinm R7, R9, 0, 13, 31 */
		/* 821CC330h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R9);
		/* 821CC330h case    2:*/		return 0x821CC334;
		  /* 821CC334h */ case    3:  		/* rlwinm R9, R7, 27, 5, 31 */
		/* 821CC334h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R7);
		/* 821CC334h case    3:*/		return 0x821CC338;
		  /* 821CC338h */ case    4:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821CC338h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821CC338h case    4:*/		return 0x821CC33C;
		  /* 821CC33Ch */ case    5:  		/* addi R9, R9, 1 */
		/* 821CC33Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821CC33Ch case    5:*/		return 0x821CC340;
		  /* 821CC340h */ case    6:  		/* slw R7, R24, R7 */
		/* 821CC340h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R24,regs.R7);
		/* 821CC340h case    6:*/		return 0x821CC344;
		  /* 821CC344h */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821CC344h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821CC344h case    7:*/		return 0x821CC348;
		  /* 821CC348h */ case    8:  		/* lwzx R9, <#[R9 + R8]> */
		/* 821CC348h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 821CC348h case    8:*/		return 0x821CC34C;
		  /* 821CC34Ch */ case    9:  		/* and. R9, R9, R7 */
		/* 821CC34Ch case    9:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821CC34Ch case    9:*/		return 0x821CC350;
		  /* 821CC350h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821CC350h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CC35C;  }
		/* 821CC350h case   10:*/		return 0x821CC354;
		  /* 821CC354h */ case   11:  		/* mr R27, R24 */
		/* 821CC354h case   11:*/		regs.R27 = regs.R24;
		/* 821CC354h case   11:*/		return 0x821CC358;
		  /* 821CC358h */ case   12:  		/* b 64 */
		/* 821CC358h case   12:*/		return 0x821CC398;
		/* 821CC358h case   12:*/		return 0x821CC35C;
	}
	return 0x821CC35C;
} // Block from 821CC328h-821CC35Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CC35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC35C);
		  /* 821CC35Ch */ case    0:  		/* lwz R10, <#[R10 + 48]> */
		/* 821CC35Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821CC35Ch case    0:*/		return 0x821CC360;
		  /* 821CC360h */ case    1:  		/* lwz R9, <#[R11 + 40]> */
		/* 821CC360h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821CC360h case    1:*/		return 0x821CC364;
		  /* 821CC364h */ case    2:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821CC364h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821CC364h case    2:*/		return 0x821CC368;
		  /* 821CC368h */ case    3:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821CC368h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821CC368h case    3:*/		return 0x821CC36C;
		  /* 821CC36Ch */ case    4:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821CC36Ch case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821CC36Ch case    4:*/		return 0x821CC370;
		  /* 821CC370h */ case    5:  		/* addi R11, R11, 1 */
		/* 821CC370h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CC370h case    5:*/		return 0x821CC374;
		  /* 821CC374h */ case    6:  		/* slw R10, R24, R10 */
		/* 821CC374h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821CC374h case    6:*/		return 0x821CC378;
		  /* 821CC378h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CC378h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CC378h case    7:*/		return 0x821CC37C;
		  /* 821CC37Ch */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821CC37Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821CC37Ch case    8:*/		return 0x821CC380;
		  /* 821CC380h */ case    9:  		/* and. R11, R11, R10 */
		/* 821CC380h case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CC380h case    9:*/		return 0x821CC384;
		  /* 821CC384h */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 821CC384h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CC398;  }
		/* 821CC384h case   10:*/		return 0x821CC388;
		  /* 821CC388h */ case   11:  		/* mr R27, R24 */
		/* 821CC388h case   11:*/		regs.R27 = regs.R24;
		/* 821CC388h case   11:*/		return 0x821CC38C;
	}
	return 0x821CC38C;
} // Block from 821CC35Ch-821CC38Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CC38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC38C);
		  /* 821CC38Ch */ case    0:  		/* mr R11, R31 */
		/* 821CC38Ch case    0:*/		regs.R11 = regs.R31;
		/* 821CC38Ch case    0:*/		return 0x821CC390;
		  /* 821CC390h */ case    1:  		/* mr R31, R30 */
		/* 821CC390h case    1:*/		regs.R31 = regs.R30;
		/* 821CC390h case    1:*/		return 0x821CC394;
		  /* 821CC394h */ case    2:  		/* mr R30, R11 */
		/* 821CC394h case    2:*/		regs.R30 = regs.R11;
		/* 821CC394h case    2:*/		return 0x821CC398;
	}
	return 0x821CC398;
} // Block from 821CC38Ch-821CC398h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC398);
		  /* 821CC398h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821CC398h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821CC398h case    0:*/		return 0x821CC39C;
		  /* 821CC39Ch */ case    1:  		/* bc 12, CR0_EQ, 316 */
		/* 821CC39Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC4D8;  }
		/* 821CC39Ch case    1:*/		return 0x821CC3A0;
		  /* 821CC3A0h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CC3A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC3A0h case    2:*/		return 0x821CC3A4;
		  /* 821CC3A4h */ case    3:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821CC3A4h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821CC3A4h case    3:*/		return 0x821CC3A8;
		  /* 821CC3A8h */ case    4:  		/* cmplwi CR6, R4, 96 */
		/* 821CC3A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000060);
		/* 821CC3A8h case    4:*/		return 0x821CC3AC;
		  /* 821CC3ACh */ case    5:  		/* bc 4, CR6_EQ, 124 */
		/* 821CC3ACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CC428;  }
		/* 821CC3ACh case    5:*/		return 0x821CC3B0;
		  /* 821CC3B0h */ case    6:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CC3B0h case    6:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CC3B0h case    6:*/		return 0x821CC3B4;
		  /* 821CC3B4h */ case    7:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CC3B4h case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CC3B4h case    7:*/		return 0x821CC3B8;
		  /* 821CC3B8h */ case    8:  		/* mr R3, R28 */
		/* 821CC3B8h case    8:*/		regs.R3 = regs.R28;
		/* 821CC3B8h case    8:*/		return 0x821CC3BC;
		  /* 821CC3BCh */ case    9:  		/* bl -425868 */
		/* 821CC3BCh case    9:*/		regs.LR = 0x821CC3C0; return 0x82164430;
		/* 821CC3BCh case    9:*/		return 0x821CC3C0;
		  /* 821CC3C0h */ case   10:  		/* addi R11, R31, -20 */
		/* 821CC3C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFEC);
		/* 821CC3C0h case   10:*/		return 0x821CC3C4;
		  /* 821CC3C4h */ case   11:  		/* lwz R10, <#[R30 + 8]> */
		/* 821CC3C4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821CC3C4h case   11:*/		return 0x821CC3C8;
		  /* 821CC3C8h */ case   12:  		/* add R29, R3, R11 */
		/* 821CC3C8h case   12:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R11);
		/* 821CC3C8h case   12:*/		return 0x821CC3CC;
		  /* 821CC3CCh */ case   13:  		/* rlwinm R6, R10, 18, 29, 31 */
		/* 821CC3CCh case   13:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R10);
		/* 821CC3CCh case   13:*/		return 0x821CC3D0;
		  /* 821CC3D0h */ case   14:  		/* rlwinm R5, R10, 13, 29, 31 */
		/* 821CC3D0h case   14:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R10);
		/* 821CC3D0h case   14:*/		return 0x821CC3D4;
		  /* 821CC3D4h */ case   15:  		/* rlwinm R4, R10, 25, 25, 31 */
		/* 821CC3D4h case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R10);
		/* 821CC3D4h case   15:*/		return 0x821CC3D8;
		  /* 821CC3D8h */ case   16:  		/* mr R3, R28 */
		/* 821CC3D8h case   16:*/		regs.R3 = regs.R28;
		/* 821CC3D8h case   16:*/		return 0x821CC3DC;
		  /* 821CC3DCh */ case   17:  		/* bl -425900 */
		/* 821CC3DCh case   17:*/		regs.LR = 0x821CC3E0; return 0x82164430;
		/* 821CC3DCh case   17:*/		return 0x821CC3E0;
		  /* 821CC3E0h */ case   18:  		/* addi R10, R30, -20 */
		/* 821CC3E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFEC);
		/* 821CC3E0h case   18:*/		return 0x821CC3E4;
		  /* 821CC3E4h */ case   19:  		/* mr R11, R29 */
		/* 821CC3E4h case   19:*/		regs.R11 = regs.R29;
		/* 821CC3E4h case   19:*/		return 0x821CC3E8;
		  /* 821CC3E8h */ case   20:  		/* add R9, R3, R10 */
		/* 821CC3E8h case   20:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R10);
		/* 821CC3E8h case   20:*/		return 0x821CC3EC;
		  /* 821CC3ECh */ case   21:  		/* addi R8, R29, 16 */
		/* 821CC3ECh case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x10);
		/* 821CC3ECh case   21:*/		return 0x821CC3F0;
		  /* 821CC3F0h */ case   22:  		/* mr R10, R9 */
		/* 821CC3F0h case   22:*/		regs.R10 = regs.R9;
		/* 821CC3F0h case   22:*/		return 0x821CC3F4;
		  /* 821CC3F4h */ case   23:  		/* lbz R7, <#[R11]> */
		/* 821CC3F4h case   23:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC3F4h case   23:*/		return 0x821CC3F8;
		  /* 821CC3F8h */ case   24:  		/* lbz R6, <#[R10]> */
		/* 821CC3F8h case   24:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821CC3F8h case   24:*/		return 0x821CC3FC;
		  /* 821CC3FCh */ case   25:  		/* subf. R7, R6, R7 */
		/* 821CC3FCh case   25:*/		cpu::op::subf<1>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821CC3FCh case   25:*/		return 0x821CC400;
		  /* 821CC400h */ case   26:  		/* bc 4, CR0_EQ, 20 */
		/* 821CC400h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821CC414;  }
		/* 821CC400h case   26:*/		return 0x821CC404;
		  /* 821CC404h */ case   27:  		/* addi R11, R11, 1 */
		/* 821CC404h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CC404h case   27:*/		return 0x821CC408;
		  /* 821CC408h */ case   28:  		/* addi R10, R10, 1 */
		/* 821CC408h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CC408h case   28:*/		return 0x821CC40C;
		  /* 821CC40Ch */ case   29:  		/* cmpw CR6, R11, R8 */
		/* 821CC40Ch case   29:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821CC40Ch case   29:*/		return 0x821CC410;
		  /* 821CC410h */ case   30:  		/* bc 4, CR6_EQ, -28 */
		/* 821CC410h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821CC3F4;  }
		/* 821CC410h case   30:*/		return 0x821CC414;
	}
	return 0x821CC414;
} // Block from 821CC398h-821CC414h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821CC414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC414);
		  /* 821CC414h */ case    0:  		/* cmpwi CR0, R7, 0 */
		/* 821CC414h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R7,0x00000000);
		/* 821CC414h case    0:*/		return 0x821CC418;
		  /* 821CC418h */ case    1:  		/* bc 4, CR0_EQ, 188 */
		/* 821CC418h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CC4D4;  }
		/* 821CC418h case    1:*/		return 0x821CC41C;
		  /* 821CC41Ch */ case    2:  		/* lwz R5, <#[R9 + 16]> */
		/* 821CC41Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000010) );
		/* 821CC41Ch case    2:*/		return 0x821CC420;
		  /* 821CC420h */ case    3:  		/* lwz R4, <#[R29 + 16]> */
		/* 821CC420h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 821CC420h case    3:*/		return 0x821CC424;
		  /* 821CC424h */ case    4:  		/* b 160 */
		/* 821CC424h case    4:*/		return 0x821CC4C4;
		/* 821CC424h case    4:*/		return 0x821CC428;
	}
	return 0x821CC428;
} // Block from 821CC414h-821CC428h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC428);
		  /* 821CC428h */ case    0:  		/* cmplwi CR6, R4, 97 */
		/* 821CC428h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 821CC428h case    0:*/		return 0x821CC42C;
		  /* 821CC42Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CC42Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CC444;  }
		/* 821CC42Ch case    1:*/		return 0x821CC430;
		  /* 821CC430h */ case    2:  		/* cmplwi CR6, R4, 99 */
		/* 821CC430h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000063);
		/* 821CC430h case    2:*/		return 0x821CC434;
		  /* 821CC434h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821CC434h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CC444;  }
		/* 821CC434h case    3:*/		return 0x821CC438;
		  /* 821CC438h */ case    4:  		/* cmplwi CR6, R4, 100 */
		/* 821CC438h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000064);
		/* 821CC438h case    4:*/		return 0x821CC43C;
		  /* 821CC43Ch */ case    5:  		/* li R10, 0 */
		/* 821CC43Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CC43Ch case    5:*/		return 0x821CC440;
		  /* 821CC440h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CC440h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CC448;  }
		/* 821CC440h case    6:*/		return 0x821CC444;
	}
	return 0x821CC444;
} // Block from 821CC428h-821CC444h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CC444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC444);
		  /* 821CC444h */ case    0:  		/* mr R10, R24 */
		/* 821CC444h case    0:*/		regs.R10 = regs.R24;
		/* 821CC444h case    0:*/		return 0x821CC448;
	}
	return 0x821CC448;
} // Block from 821CC444h-821CC448h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC448);
		  /* 821CC448h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821CC448h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821CC448h case    0:*/		return 0x821CC44C;
		  /* 821CC44Ch */ case    1:  		/* bc 12, CR0_EQ, 140 */
		/* 821CC44Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC4D8;  }
		/* 821CC44Ch case    1:*/		return 0x821CC450;
		  /* 821CC450h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CC450h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CC450h case    2:*/		return 0x821CC454;
		  /* 821CC454h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CC454h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CC454h case    3:*/		return 0x821CC458;
		  /* 821CC458h */ case    4:  		/* mr R3, R28 */
		/* 821CC458h case    4:*/		regs.R3 = regs.R28;
		/* 821CC458h case    4:*/		return 0x821CC45C;
		  /* 821CC45Ch */ case    5:  		/* bl -426028 */
		/* 821CC45Ch case    5:*/		regs.LR = 0x821CC460; return 0x82164430;
		/* 821CC45Ch case    5:*/		return 0x821CC460;
		  /* 821CC460h */ case    6:  		/* addi R11, R31, -24 */
		/* 821CC460h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFE8);
		/* 821CC460h case    6:*/		return 0x821CC464;
		  /* 821CC464h */ case    7:  		/* lwz R10, <#[R30 + 8]> */
		/* 821CC464h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821CC464h case    7:*/		return 0x821CC468;
		  /* 821CC468h */ case    8:  		/* add R29, R3, R11 */
		/* 821CC468h case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R11);
		/* 821CC468h case    8:*/		return 0x821CC46C;
		  /* 821CC46Ch */ case    9:  		/* rlwinm R6, R10, 18, 29, 31 */
		/* 821CC46Ch case    9:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R10);
		/* 821CC46Ch case    9:*/		return 0x821CC470;
		  /* 821CC470h */ case   10:  		/* rlwinm R5, R10, 13, 29, 31 */
		/* 821CC470h case   10:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R10);
		/* 821CC470h case   10:*/		return 0x821CC474;
		  /* 821CC474h */ case   11:  		/* rlwinm R4, R10, 25, 25, 31 */
		/* 821CC474h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R10);
		/* 821CC474h case   11:*/		return 0x821CC478;
		  /* 821CC478h */ case   12:  		/* mr R3, R28 */
		/* 821CC478h case   12:*/		regs.R3 = regs.R28;
		/* 821CC478h case   12:*/		return 0x821CC47C;
		  /* 821CC47Ch */ case   13:  		/* bl -426060 */
		/* 821CC47Ch case   13:*/		regs.LR = 0x821CC480; return 0x82164430;
		/* 821CC47Ch case   13:*/		return 0x821CC480;
		  /* 821CC480h */ case   14:  		/* addi R10, R30, -24 */
		/* 821CC480h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFE8);
		/* 821CC480h case   14:*/		return 0x821CC484;
		  /* 821CC484h */ case   15:  		/* mr R11, R29 */
		/* 821CC484h case   15:*/		regs.R11 = regs.R29;
		/* 821CC484h case   15:*/		return 0x821CC488;
		  /* 821CC488h */ case   16:  		/* add R9, R3, R10 */
		/* 821CC488h case   16:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R10);
		/* 821CC488h case   16:*/		return 0x821CC48C;
		  /* 821CC48Ch */ case   17:  		/* addi R8, R29, 20 */
		/* 821CC48Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x14);
		/* 821CC48Ch case   17:*/		return 0x821CC490;
		  /* 821CC490h */ case   18:  		/* mr R10, R9 */
		/* 821CC490h case   18:*/		regs.R10 = regs.R9;
		/* 821CC490h case   18:*/		return 0x821CC494;
		  /* 821CC494h */ case   19:  		/* lbz R7, <#[R11]> */
		/* 821CC494h case   19:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC494h case   19:*/		return 0x821CC498;
		  /* 821CC498h */ case   20:  		/* lbz R6, <#[R10]> */
		/* 821CC498h case   20:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821CC498h case   20:*/		return 0x821CC49C;
		  /* 821CC49Ch */ case   21:  		/* subf. R7, R6, R7 */
		/* 821CC49Ch case   21:*/		cpu::op::subf<1>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821CC49Ch case   21:*/		return 0x821CC4A0;
	}
	return 0x821CC4A0;
} // Block from 821CC448h-821CC4A0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CC4A0h
// Function '?MarkForSimplify@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC4A0);
		  /* 821CC4A0h */ case    0:  		/* bc 4, CR0_EQ, 20 */
		/* 821CC4A0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821CC4B4;  }
		/* 821CC4A0h case    0:*/		return 0x821CC4A4;
		  /* 821CC4A4h */ case    1:  		/* addi R11, R11, 1 */
		/* 821CC4A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CC4A4h case    1:*/		return 0x821CC4A8;
		  /* 821CC4A8h */ case    2:  		/* addi R10, R10, 1 */
		/* 821CC4A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CC4A8h case    2:*/		return 0x821CC4AC;
		  /* 821CC4ACh */ case    3:  		/* cmpw CR6, R11, R8 */
		/* 821CC4ACh case    3:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821CC4ACh case    3:*/		return 0x821CC4B0;
		  /* 821CC4B0h */ case    4:  		/* bc 4, CR6_EQ, -28 */
		/* 821CC4B0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821CC494;  }
		/* 821CC4B0h case    4:*/		return 0x821CC4B4;
	}
	return 0x821CC4B4;
} // Block from 821CC4A0h-821CC4B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC4B4);
		  /* 821CC4B4h */ case    0:  		/* cmpwi CR0, R7, 0 */
		/* 821CC4B4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R7,0x00000000);
		/* 821CC4B4h case    0:*/		return 0x821CC4B8;
		  /* 821CC4B8h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 821CC4B8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CC4D4;  }
		/* 821CC4B8h case    1:*/		return 0x821CC4BC;
		  /* 821CC4BCh */ case    2:  		/* lwz R5, <#[R9 + 20]> */
		/* 821CC4BCh case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000014) );
		/* 821CC4BCh case    2:*/		return 0x821CC4C0;
		  /* 821CC4C0h */ case    3:  		/* lwz R4, <#[R29 + 20]> */
		/* 821CC4C0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000014) );
		/* 821CC4C0h case    3:*/		return 0x821CC4C4;
	}
	return 0x821CC4C4;
} // Block from 821CC4B4h-821CC4C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CC4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC4C4);
		  /* 821CC4C4h */ case    0:  		/* mr R3, R28 */
		/* 821CC4C4h case    0:*/		regs.R3 = regs.R28;
		/* 821CC4C4h case    0:*/		return 0x821CC4C8;
		  /* 821CC4C8h */ case    1:  		/* bl -61880 */
		/* 821CC4C8h case    1:*/		regs.LR = 0x821CC4CC; return 0x821BD310;
		/* 821CC4C8h case    1:*/		return 0x821CC4CC;
		  /* 821CC4CCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC4CCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC4CCh case    2:*/		return 0x821CC4D0;
		  /* 821CC4D0h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 821CC4D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CC4D8;  }
		/* 821CC4D0h case    3:*/		return 0x821CC4D4;
	}
	return 0x821CC4D4;
} // Block from 821CC4C4h-821CC4D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CC4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC4D4);
		  /* 821CC4D4h */ case    0:  		/* li R27, 0 */
		/* 821CC4D4h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CC4D4h case    0:*/		return 0x821CC4D8;
	}
	return 0x821CC4D8;
} // Block from 821CC4D4h-821CC4D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC4D8);
		  /* 821CC4D8h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821CC4D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821CC4D8h case    0:*/		return 0x821CC4DC;
		  /* 821CC4DCh */ case    1:  		/* bc 12, CR0_EQ, 260 */
		/* 821CC4DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC4DCh case    1:*/		return 0x821CC4E0;
		  /* 821CC4E0h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CC4E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CC4E0h case    2:*/		return 0x821CC4E4;
		  /* 821CC4E4h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CC4E4h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CC4E4h case    3:*/		return 0x821CC4E8;
		  /* 821CC4E8h */ case    4:  		/* cmplwi CR6, R11, 14336 */
		/* 821CC4E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821CC4E8h case    4:*/		return 0x821CC4EC;
		  /* 821CC4ECh */ case    5:  		/* bc 4, CR6_EQ, 132 */
		/* 821CC4ECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CC570;  }
		/* 821CC4ECh case    5:*/		return 0x821CC4F0;
		  /* 821CC4F0h */ case    6:  		/* addi R8, R30, 4 */
		/* 821CC4F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 821CC4F0h case    6:*/		return 0x821CC4F4;
		  /* 821CC4F4h */ case    7:  		/* lwz R11, <#[R8]> */
		/* 821CC4F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821CC4F4h case    7:*/		return 0x821CC4F8;
		  /* 821CC4F8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821CC4F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CC4F8h case    8:*/		return 0x821CC4FC;
		  /* 821CC4FCh */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 821CC4FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821CC558;  }
		/* 821CC4FCh case    9:*/		return 0x821CC500;
		  /* 821CC500h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821CC500h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821CC500h case   10:*/		return 0x821CC504;
		  /* 821CC504h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821CC504h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CC504h case   11:*/		return 0x821CC508;
		  /* 821CC508h */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 821CC508h case   12:*/		if ( regs.CR[6].eq ) { return 0x821CC544;  }
		/* 821CC508h case   12:*/		return 0x821CC50C;
		  /* 821CC50Ch */ case   13:  		/* lwz R10, <#[R11 + 12]> */
		/* 821CC50Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CC50Ch case   13:*/		return 0x821CC510;
		  /* 821CC510h */ case   14:  		/* addi R10, R10, 4 */
		/* 821CC510h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821CC510h case   14:*/		return 0x821CC514;
		  /* 821CC514h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821CC514h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CC514h case   15:*/		return 0x821CC518;
		  /* 821CC518h */ case   16:  		/* b 12 */
		/* 821CC518h case   16:*/		return 0x821CC524;
		/* 821CC518h case   16:*/		return 0x821CC51C;
		  /* 821CC51Ch */ case   17:  		/* addi R10, R9, 8 */
		/* 821CC51Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821CC51Ch case   17:*/		return 0x821CC520;
		  /* 821CC520h */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 821CC520h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821CC520h case   18:*/		return 0x821CC524;
	}
	return 0x821CC524;
} // Block from 821CC4D8h-821CC524h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CC524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC524);
		  /* 821CC524h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821CC524h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821CC524h case    0:*/		return 0x821CC528;
		  /* 821CC528h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CC528h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC51C;  }
		/* 821CC528h case    1:*/		return 0x821CC52C;
		  /* 821CC52Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821CC52Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CC52Ch case    2:*/		return 0x821CC530;
		  /* 821CC530h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821CC530h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CC530h case    3:*/		return 0x821CC534;
		  /* 821CC534h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821CC534h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821CC534h case    4:*/		return 0x821CC538;
	}
	return 0x821CC538;
} // Block from 821CC524h-821CC538h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC538h
// Function '?MarkDependentsForSimplify@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC538);
		  /* 821CC538h */ case    0:  		/* stw R10, <#[R11 + 8]> */
		/* 821CC538h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CC538h case    0:*/		return 0x821CC53C;
		  /* 821CC53Ch */ case    1:  		/* stw R11, <#[R31 + 4]> */
		/* 821CC53Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821CC53Ch case    1:*/		return 0x821CC540;
		  /* 821CC540h */ case    2:  		/* stw R31, <#[R11 + 12]> */
		/* 821CC540h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CC540h case    2:*/		return 0x821CC544;
	}
	return 0x821CC544;
} // Block from 821CC538h-821CC544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC544);
		  /* 821CC544h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821CC544h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821CC544h case    0:*/		return 0x821CC548;
		  /* 821CC548h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821CC548h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CC548h case    1:*/		return 0x821CC54C;
		  /* 821CC54Ch */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821CC54Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CC4F4;  }
		/* 821CC54Ch case    2:*/		return 0x821CC550;
		  /* 821CC550h */ case    3:  		/* addi R8, R11, 8 */
		/* 821CC550h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821CC550h case    3:*/		return 0x821CC554;
		  /* 821CC554h */ case    4:  		/* b -96 */
		/* 821CC554h case    4:*/		return 0x821CC4F4;
		/* 821CC554h case    4:*/		return 0x821CC558;
	}
	return 0x821CC558;
} // Block from 821CC544h-821CC558h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC558);
		  /* 821CC558h */ case    0:  		/* mr R5, R25 */
		/* 821CC558h case    0:*/		regs.R5 = regs.R25;
		/* 821CC558h case    0:*/		return 0x821CC55C;
		  /* 821CC55Ch */ case    1:  		/* mr R4, R31 */
		/* 821CC55Ch case    1:*/		regs.R4 = regs.R31;
		/* 821CC55Ch case    1:*/		return 0x821CC560;
		  /* 821CC560h */ case    2:  		/* mr R3, R28 */
		/* 821CC560h case    2:*/		regs.R3 = regs.R28;
		/* 821CC560h case    2:*/		return 0x821CC564;
		  /* 821CC564h */ case    3:  		/* bl -2972 */
		/* 821CC564h case    3:*/		regs.LR = 0x821CC568; return 0x821CB9C8;
		/* 821CC564h case    3:*/		return 0x821CC568;
		  /* 821CC568h */ case    4:  		/* mr R4, R30 */
		/* 821CC568h case    4:*/		regs.R4 = regs.R30;
		/* 821CC568h case    4:*/		return 0x821CC56C;
		  /* 821CC56Ch */ case    5:  		/* b 96 */
		/* 821CC56Ch case    5:*/		return 0x821CC5CC;
		/* 821CC56Ch case    5:*/		return 0x821CC570;
	}
	return 0x821CC570;
} // Block from 821CC558h-821CC570h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CC570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC570);
		  /* 821CC570h */ case    0:  		/* mr R9, R20 */
		/* 821CC570h case    0:*/		regs.R9 = regs.R20;
		/* 821CC570h case    0:*/		return 0x821CC574;
		  /* 821CC574h */ case    1:  		/* mr R8, R25 */
		/* 821CC574h case    1:*/		regs.R8 = regs.R25;
		/* 821CC574h case    1:*/		return 0x821CC578;
		  /* 821CC578h */ case    2:  		/* li R7, 0 */
		/* 821CC578h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821CC578h case    2:*/		return 0x821CC57C;
		  /* 821CC57Ch */ case    3:  		/* li R6, 228 */
		/* 821CC57Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821CC57Ch case    3:*/		return 0x821CC580;
	}
	return 0x821CC580;
} // Block from 821CC570h-821CC580h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CC580h
// Function '?RemoveUnusedComponentsWorker@Compiler@D3DXShader@@AAAXPAVInstruction@2@IPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC580);
		  /* 821CC580h */ case    0:  		/* mr R5, R31 */
		/* 821CC580h case    0:*/		regs.R5 = regs.R31;
		/* 821CC580h case    0:*/		return 0x821CC584;
		  /* 821CC584h */ case    1:  		/* mr R4, R30 */
		/* 821CC584h case    1:*/		regs.R4 = regs.R30;
		/* 821CC584h case    1:*/		return 0x821CC588;
		  /* 821CC588h */ case    2:  		/* mr R3, R28 */
		/* 821CC588h case    2:*/		regs.R3 = regs.R28;
		/* 821CC588h case    2:*/		return 0x821CC58C;
		  /* 821CC58Ch */ case    3:  		/* bl 396676 */
		/* 821CC58Ch case    3:*/		regs.LR = 0x821CC590; return 0x8222D310;
		/* 821CC58Ch case    3:*/		return 0x821CC590;
		  /* 821CC590h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC590h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC590h case    4:*/		return 0x821CC594;
		  /* 821CC594h */ case    5:  		/* bc 12, CR0_EQ, 76 */
		/* 821CC594h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CC5E0;  }
		/* 821CC594h case    5:*/		return 0x821CC598;
		  /* 821CC598h */ case    6:  		/* mr R5, R25 */
		/* 821CC598h case    6:*/		regs.R5 = regs.R25;
		/* 821CC598h case    6:*/		return 0x821CC59C;
		  /* 821CC59Ch */ case    7:  		/* mr R4, R30 */
		/* 821CC59Ch case    7:*/		regs.R4 = regs.R30;
		/* 821CC59Ch case    7:*/		return 0x821CC5A0;
		  /* 821CC5A0h */ case    8:  		/* mr R3, R28 */
		/* 821CC5A0h case    8:*/		regs.R3 = regs.R28;
		/* 821CC5A0h case    8:*/		return 0x821CC5A4;
		  /* 821CC5A4h */ case    9:  		/* bl -3036 */
		/* 821CC5A4h case    9:*/		regs.LR = 0x821CC5A8; return 0x821CB9C8;
		/* 821CC5A4h case    9:*/		return 0x821CC5A8;
		  /* 821CC5A8h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CC5A8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CC5A8h case   10:*/		return 0x821CC5AC;
		  /* 821CC5ACh */ case   11:  		/* lwz R10, <#[R30 + 12]> */
		/* 821CC5ACh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821CC5ACh case   11:*/		return 0x821CC5B0;
		  /* 821CC5B0h */ case   12:  		/* rlwinm R9, R11, 0, 16, 31 */
		/* 821CC5B0h case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R11);
		/* 821CC5B0h case   12:*/		return 0x821CC5B4;
		  /* 821CC5B4h */ case   13:  		/* or R11, R10, R11 */
		/* 821CC5B4h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CC5B4h case   13:*/		return 0x821CC5B8;
		  /* 821CC5B8h */ case   14:  		/* andi. R11, R11, 52428 */
		/* 821CC5B8h case   14:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0xCCCC);
		/* 821CC5B8h case   14:*/		return 0x821CC5BC;
		  /* 821CC5BCh */ case   15:  		/* cmplw CR6, R9, R11 */
		/* 821CC5BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821CC5BCh case   15:*/		return 0x821CC5C0;
		  /* 821CC5C0h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 821CC5C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821CC5D8;  }
		/* 821CC5C0h case   16:*/		return 0x821CC5C4;
		  /* 821CC5C4h */ case   17:  		/* sth R11, <#[R31 + 14]> */
		/* 821CC5C4h case   17:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x0000000E) );
		/* 821CC5C4h case   17:*/		return 0x821CC5C8;
		  /* 821CC5C8h */ case   18:  		/* mr R4, R31 */
		/* 821CC5C8h case   18:*/		regs.R4 = regs.R31;
		/* 821CC5C8h case   18:*/		return 0x821CC5CC;
	}
	return 0x821CC5CC;
} // Block from 821CC580h-821CC5CCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CC5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC5CC);
		  /* 821CC5CCh */ case    0:  		/* mr R5, R25 */
		/* 821CC5CCh case    0:*/		regs.R5 = regs.R25;
		/* 821CC5CCh case    0:*/		return 0x821CC5D0;
		  /* 821CC5D0h */ case    1:  		/* mr R3, R28 */
		/* 821CC5D0h case    1:*/		regs.R3 = regs.R28;
		/* 821CC5D0h case    1:*/		return 0x821CC5D4;
		  /* 821CC5D4h */ case    2:  		/* bl -3084 */
		/* 821CC5D4h case    2:*/		regs.LR = 0x821CC5D8; return 0x821CB9C8;
		/* 821CC5D4h case    2:*/		return 0x821CC5D8;
	}
	return 0x821CC5D8;
} // Block from 821CC5CCh-821CC5D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC5D8);
		  /* 821CC5D8h */ case    0:  		/* mr R30, R31 */
		/* 821CC5D8h case    0:*/		regs.R30 = regs.R31;
		/* 821CC5D8h case    0:*/		return 0x821CC5DC;
		  /* 821CC5DCh */ case    1:  		/* mr R26, R24 */
		/* 821CC5DCh case    1:*/		regs.R26 = regs.R24;
		/* 821CC5DCh case    1:*/		return 0x821CC5E0;
	}
	return 0x821CC5E0;
} // Block from 821CC5D8h-821CC5E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC5E0);
		  /* 821CC5E0h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821CC5E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821CC5E0h case    0:*/		return 0x821CC5E4;
		  /* 821CC5E4h */ case    1:  		/* cmplw CR6, R11, R23 */
		/* 821CC5E4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821CC5E4h case    1:*/		return 0x821CC5E8;
		  /* 821CC5E8h */ case    2:  		/* bc 4, CR6_EQ, -948 */
		/* 821CC5E8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CC234;  }
		/* 821CC5E8h case    2:*/		return 0x821CC5EC;
		  /* 821CC5ECh */ case    3:  		/* addi R21, R23, 8 */
		/* 821CC5ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R23,0x8);
		/* 821CC5ECh case    3:*/		return 0x821CC5F0;
		  /* 821CC5F0h */ case    4:  		/* b -956 */
		/* 821CC5F0h case    4:*/		return 0x821CC234;
		/* 821CC5F0h case    4:*/		return 0x821CC5F4;
	}
	return 0x821CC5F4;
} // Block from 821CC5E0h-821CC5F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC5F4);
		  /* 821CC5F4h */ case    0:  		/* mr R3, R26 */
		/* 821CC5F4h case    0:*/		regs.R3 = regs.R26;
		/* 821CC5F4h case    0:*/		return 0x821CC5F8;
	}
	return 0x821CC5F8;
} // Block from 821CC5F4h-821CC5F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC5F8);
		  /* 821CC5F8h */ case    0:  		/* addi R1, R1, 192 */
		/* 821CC5F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821CC5F8h case    0:*/		return 0x821CC5FC;
		  /* 821CC5FCh */ case    1:  		/* b -1291124 */
		/* 821CC5FCh case    1:*/		return 0x82091288;
		/* 821CC5FCh case    1:*/		return 0x821CC600;
	}
	return 0x821CC600;
} // Block from 821CC5F8h-821CC600h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC600h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC600);
		  /* 821CC600h */ case    0:  		/* mfspr R12, LR */
		/* 821CC600h case    0:*/		regs.R12 = regs.LR;
		/* 821CC600h case    0:*/		return 0x821CC604;
		  /* 821CC604h */ case    1:  		/* bl -1291212 */
		/* 821CC604h case    1:*/		regs.LR = 0x821CC608; return 0x82091238;
		/* 821CC604h case    1:*/		return 0x821CC608;
		  /* 821CC608h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821CC608h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821CC608h case    2:*/		return 0x821CC60C;
		  /* 821CC60Ch */ case    3:  		/* lwz R11, <#[R4 + 48]> */
		/* 821CC60Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821CC60Ch case    3:*/		return 0x821CC610;
		  /* 821CC610h */ case    4:  		/* mr R20, R3 */
		/* 821CC610h case    4:*/		regs.R20 = regs.R3;
		/* 821CC610h case    4:*/		return 0x821CC614;
		  /* 821CC614h */ case    5:  		/* mr R23, R4 */
		/* 821CC614h case    5:*/		regs.R23 = regs.R4;
		/* 821CC614h case    5:*/		return 0x821CC618;
		  /* 821CC618h */ case    6:  		/* mr R21, R5 */
		/* 821CC618h case    6:*/		regs.R21 = regs.R5;
		/* 821CC618h case    6:*/		return 0x821CC61C;
		  /* 821CC61Ch */ case    7:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821CC61Ch case    7:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821CC61Ch case    7:*/		return 0x821CC620;
		  /* 821CC620h */ case    8:  		/* bc 4, CR0_EQ, 288 */
		/* 821CC620h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC620h case    8:*/		return 0x821CC624;
		  /* 821CC624h */ case    9:  		/* lwz R11, <#[R5 + 48]> */
		/* 821CC624h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 821CC624h case    9:*/		return 0x821CC628;
		  /* 821CC628h */ case   10:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821CC628h case   10:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821CC628h case   10:*/		return 0x821CC62C;
		  /* 821CC62Ch */ case   11:  		/* bc 4, CR0_EQ, 276 */
		/* 821CC62Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC62Ch case   11:*/		return 0x821CC630;
		  /* 821CC630h */ case   12:  		/* lwz R11, <#[R4 + 68]> */
		/* 821CC630h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000044) );
		/* 821CC630h case   12:*/		return 0x821CC634;
		  /* 821CC634h */ case   13:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821CC634h case   13:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821CC634h case   13:*/		return 0x821CC638;
		  /* 821CC638h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 821CC638h case   14:*/		if ( regs.CR[0].eq ) { return 0x821CC648;  }
		/* 821CC638h case   14:*/		return 0x821CC63C;
		  /* 821CC63Ch */ case   15:  		/* lwz R11, <#[R5 + 68]> */
		/* 821CC63Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000044) );
		/* 821CC63Ch case   15:*/		return 0x821CC640;
		  /* 821CC640h */ case   16:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821CC640h case   16:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821CC640h case   16:*/		return 0x821CC644;
		  /* 821CC644h */ case   17:  		/* bc 4, CR0_EQ, 252 */
		/* 821CC644h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC644h case   17:*/		return 0x821CC648;
	}
	return 0x821CC648;
} // Block from 821CC600h-821CC648h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CC648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC648);
		  /* 821CC648h */ case    0:  		/* lwz R11, <#[R23 + 76]> */
		/* 821CC648h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000004C) );
		/* 821CC648h case    0:*/		return 0x821CC64C;
		  /* 821CC64Ch */ case    1:  		/* lwz R10, <#[R21 + 76]> */
		/* 821CC64Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000004C) );
		/* 821CC64Ch case    1:*/		return 0x821CC650;
		  /* 821CC650h */ case    2:  		/* xor R9, R10, R11 */
		/* 821CC650h case    2:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821CC650h case    2:*/		return 0x821CC654;
		  /* 821CC654h */ case    3:  		/* rlwinm. R9, R9, 0, 13, 31 */
		/* 821CC654h case    3:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R9,regs.R9);
		/* 821CC654h case    3:*/		return 0x821CC658;
		  /* 821CC658h */ case    4:  		/* bc 4, CR0_EQ, 232 */
		/* 821CC658h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC658h case    4:*/		return 0x821CC65C;
		  /* 821CC65Ch */ case    5:  		/* rlwinm. R9, R6, 0, 24, 31 */
		/* 821CC65Ch case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R6);
		/* 821CC65Ch case    5:*/		return 0x821CC660;
		  /* 821CC660h */ case    6:  		/* bc 12, CR0_EQ, 244 */
		/* 821CC660h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CC754;  }
		/* 821CC660h case    6:*/		return 0x821CC664;
		  /* 821CC664h */ case    7:  		/* lwz R9, <#[R20 + 40]> */
		/* 821CC664h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000028) );
		/* 821CC664h case    7:*/		return 0x821CC668;
		  /* 821CC668h */ case    8:  		/* rlwinm. R9, R9, 0, 23, 23 */
		/* 821CC668h case    8:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R9);
		/* 821CC668h case    8:*/		return 0x821CC66C;
		  /* 821CC66Ch */ case    9:  		/* bc 12, CR0_EQ, 232 */
		/* 821CC66Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821CC754;  }
		/* 821CC66Ch case    9:*/		return 0x821CC670;
		  /* 821CC670h */ case   10:  		/* rlwinm R11, R11, 10, 31, 31 */
		/* 821CC670h case   10:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC670h case   10:*/		return 0x821CC674;
		  /* 821CC674h */ case   11:  		/* rlwinm R10, R10, 10, 31, 31 */
		/* 821CC674h case   11:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821CC674h case   11:*/		return 0x821CC678;
		  /* 821CC678h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821CC678h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CC678h case   12:*/		return 0x821CC67C;
		  /* 821CC67Ch */ case   13:  		/* bc 4, CR6_EQ, 196 */
		/* 821CC67Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CC740;  }
		/* 821CC67Ch case   13:*/		return 0x821CC680;
		  /* 821CC680h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821CC680h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CC680h case   14:*/		return 0x821CC684;
		  /* 821CC684h */ case   15:  		/* bc 12, CR6_EQ, 208 */
		/* 821CC684h case   15:*/		if ( regs.CR[6].eq ) { return 0x821CC754;  }
		/* 821CC684h case   15:*/		return 0x821CC688;
		  /* 821CC688h */ case   16:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821CC688h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821CC688h case   16:*/		return 0x821CC68C;
		  /* 821CC68Ch */ case   17:  		/* b 160 */
		/* 821CC68Ch case   17:*/		return 0x821CC72C;
		/* 821CC68Ch case   17:*/		return 0x821CC690;
		  /* 821CC690h */ case   18:  		/* cmplw CR6, R30, R21 */
		/* 821CC690h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R21);
		/* 821CC690h case   18:*/		return 0x821CC694;
		  /* 821CC694h */ case   19:  		/* bc 12, CR6_EQ, 184 */
		/* 821CC694h case   19:*/		if ( regs.CR[6].eq ) { return 0x821CC74C;  }
		/* 821CC694h case   19:*/		return 0x821CC698;
		  /* 821CC698h */ case   20:  		/* lwz R11, <#[R30 + 76]> */
		/* 821CC698h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821CC698h case   20:*/		return 0x821CC69C;
		  /* 821CC69Ch */ case   21:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821CC69Ch case   21:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC69Ch case   21:*/		return 0x821CC6A0;
		  /* 821CC6A0h */ case   22:  		/* bc 12, CR0_EQ, 160 */
		/* 821CC6A0h case   22:*/		if ( regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC6A0h case   22:*/		return 0x821CC6A4;
		  /* 821CC6A4h */ case   23:  		/* lwz R11, <#[R30 + 28]> */
		/* 821CC6A4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC6A4h case   23:*/		return 0x821CC6A8;
		  /* 821CC6A8h */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CC6A8h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC6A8h case   24:*/		return 0x821CC6AC;
		  /* 821CC6ACh */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 821CC6ACh case   25:*/		if ( regs.CR[0].eq ) { return 0x821CC6BC;  }
		/* 821CC6ACh case   25:*/		return 0x821CC6B0;
		  /* 821CC6B0h */ case   26:  		/* lwz R11, <#[R30 + 36]> */
		/* 821CC6B0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821CC6B0h case   26:*/		return 0x821CC6B4;
		  /* 821CC6B4h */ case   27:  		/* addi R29, R30, 32 */
		/* 821CC6B4h case   27:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x20);
		/* 821CC6B4h case   27:*/		return 0x821CC6B8;
		  /* 821CC6B8h */ case   28:  		/* b 12 */
		/* 821CC6B8h case   28:*/		return 0x821CC6C4;
		/* 821CC6B8h case   28:*/		return 0x821CC6BC;
	}
	return 0x821CC6BC;
} // Block from 821CC648h-821CC6BCh (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CC6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC6BC);
		  /* 821CC6BCh */ case    0:  		/* lwz R11, <#[R30 + 28]> */
		/* 821CC6BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821CC6BCh case    0:*/		return 0x821CC6C0;
		  /* 821CC6C0h */ case    1:  		/* addi R29, R30, 24 */
		/* 821CC6C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x18);
		/* 821CC6C0h case    1:*/		return 0x821CC6C4;
	}
	return 0x821CC6C4;
} // Block from 821CC6BCh-821CC6C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC6C4);
		  /* 821CC6C4h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CC6C4h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CC6C4h case    0:*/		return 0x821CC6C8;
		  /* 821CC6C8h */ case    1:  		/* addic R10, R10, -1 */
		/* 821CC6C8h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CC6C8h case    1:*/		return 0x821CC6CC;
		  /* 821CC6CCh */ case    2:  		/* subfe R10, R10, R10 */
		/* 821CC6CCh case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CC6CCh case    2:*/		return 0x821CC6D0;
		  /* 821CC6D0h */ case    3:  		/* and R31, R10, R11 */
		/* 821CC6D0h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821CC6D0h case    3:*/		return 0x821CC6D4;
		  /* 821CC6D4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821CC6D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC6D4h case    4:*/		return 0x821CC6D8;
		  /* 821CC6D8h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 821CC6D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CC728;  }
		/* 821CC6D8h case    5:*/		return 0x821CC6DC;
		  /* 821CC6DCh */ case    6:  		/* mr R3, R31 */
		/* 821CC6DCh case    6:*/		regs.R3 = regs.R31;
		/* 821CC6DCh case    6:*/		return 0x821CC6E0;
		  /* 821CC6E0h */ case    7:  		/* bl -427568 */
		/* 821CC6E0h case    7:*/		regs.LR = 0x821CC6E4; return 0x821640B0;
		/* 821CC6E0h case    7:*/		return 0x821CC6E4;
		  /* 821CC6E4h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC6E4h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC6E4h case    8:*/		return 0x821CC6E8;
		  /* 821CC6E8h */ case    9:  		/* bc 4, CR0_EQ, 88 */
		/* 821CC6E8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC6E8h case    9:*/		return 0x821CC6EC;
		  /* 821CC6ECh */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821CC6ECh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821CC6ECh case   10:*/		return 0x821CC6F0;
		  /* 821CC6F0h */ case   11:  		/* lwz R31, <#[R11 + 40]> */
		/* 821CC6F0h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821CC6F0h case   11:*/		return 0x821CC6F4;
		  /* 821CC6F4h */ case   12:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CC6F4h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CC6F4h case   12:*/		return 0x821CC6F8;
		  /* 821CC6F8h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821CC6F8h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821CC704;  }
		/* 821CC6F8h case   13:*/		return 0x821CC6FC;
		  /* 821CC6FCh */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821CC6FCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC6FCh case   14:*/		return 0x821CC700;
		  /* 821CC700h */ case   15:  		/* bc 4, CR6_EQ, -36 */
		/* 821CC700h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821CC6DC;  }
		/* 821CC700h case   15:*/		return 0x821CC704;
	}
	return 0x821CC704;
} // Block from 821CC6C4h-821CC704h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CC704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC704);
		  /* 821CC704h */ case    0:  		/* addi R11, R30, 32 */
		/* 821CC704h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x20);
		/* 821CC704h case    0:*/		return 0x821CC708;
		  /* 821CC708h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 821CC708h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821CC708h case    1:*/		return 0x821CC70C;
		  /* 821CC70Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821CC70Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821CC728;  }
		/* 821CC70Ch case    2:*/		return 0x821CC710;
		  /* 821CC710h */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 821CC710h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821CC710h case    3:*/		return 0x821CC714;
		  /* 821CC714h */ case    4:  		/* mr R29, R11 */
		/* 821CC714h case    4:*/		regs.R29 = regs.R11;
		/* 821CC714h case    4:*/		return 0x821CC718;
		  /* 821CC718h */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CC718h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CC718h case    5:*/		return 0x821CC71C;
		  /* 821CC71Ch */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821CC71Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CC728;  }
		/* 821CC71Ch case    6:*/		return 0x821CC720;
		  /* 821CC720h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821CC720h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821CC720h case    7:*/		return 0x821CC724;
		  /* 821CC724h */ case    8:  		/* bc 4, CR0_EQ, -72 */
		/* 821CC724h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CC6DC;  }
		/* 821CC724h case    8:*/		return 0x821CC728;
	}
	return 0x821CC728;
} // Block from 821CC704h-821CC728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CC728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC728);
		  /* 821CC728h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821CC728h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821CC728h case    0:*/		return 0x821CC72C;
	}
	return 0x821CC72C;
} // Block from 821CC728h-821CC72Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC72C);
		  /* 821CC72Ch */ case    0:  		/* lwz R30, <#[R11 + 4]> */
		/* 821CC72Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821CC72Ch case    0:*/		return 0x821CC730;
		  /* 821CC730h */ case    1:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821CC730h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821CC730h case    1:*/		return 0x821CC734;
		  /* 821CC734h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821CC734h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC734h case    2:*/		return 0x821CC738;
		  /* 821CC738h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821CC738h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CC738h case    3:*/		return 0x821CC73C;
		  /* 821CC73Ch */ case    4:  		/* bc 4, CR6_EQ, -172 */
		/* 821CC73Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821CC690;  }
		/* 821CC73Ch case    4:*/		return 0x821CC740;
	}
	return 0x821CC740;
} // Block from 821CC72Ch-821CC740h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC740);
		  /* 821CC740h */ case    0:  		/* li R3, 0 */
		/* 821CC740h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CC740h case    0:*/		return 0x821CC744;
		  /* 821CC744h */ case    1:  		/* addi R1, R1, 192 */
		/* 821CC744h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821CC744h case    1:*/		return 0x821CC748;
		  /* 821CC748h */ case    2:  		/* b -1291456 */
		/* 821CC748h case    2:*/		return 0x82091288;
		/* 821CC748h case    2:*/		return 0x821CC74C;
	}
	return 0x821CC74C;
} // Block from 821CC740h-821CC74Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC74C);
		  /* 821CC74Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CC74Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CC74Ch case    0:*/		return 0x821CC750;
		  /* 821CC750h */ case    1:  		/* bc 12, CR6_EQ, -16 */
		/* 821CC750h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CC740;  }
		/* 821CC750h case    1:*/		return 0x821CC754;
	}
	return 0x821CC754;
} // Block from 821CC74Ch-821CC754h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC754);
		  /* 821CC754h */ case    0:  		/* lwz R11, <#[R23 + 36]> */
		/* 821CC754h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821CC754h case    0:*/		return 0x821CC758;
		  /* 821CC758h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CC758h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC758h case    1:*/		return 0x821CC75C;
		  /* 821CC75Ch */ case    2:  		/* bc 4, CR0_EQ, 80 */
		/* 821CC75Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CC7AC;  }
		/* 821CC75Ch case    2:*/		return 0x821CC760;
		  /* 821CC760h */ case    3:  		/* lwz R11, <#[R23 + 36]> */
		/* 821CC760h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821CC760h case    3:*/		return 0x821CC764;
		  /* 821CC764h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CC764h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC764h case    4:*/		return 0x821CC768;
		  /* 821CC768h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821CC768h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CC774;  }
		/* 821CC768h case    5:*/		return 0x821CC76C;
		  /* 821CC76Ch */ case    6:  		/* li R4, 0 */
		/* 821CC76Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CC76Ch case    6:*/		return 0x821CC770;
		  /* 821CC770h */ case    7:  		/* b 16 */
		/* 821CC770h case    7:*/		return 0x821CC780;
		/* 821CC770h case    7:*/		return 0x821CC774;
	}
	return 0x821CC774;
} // Block from 821CC754h-821CC774h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CC774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC774);
		  /* 821CC774h */ case    0:  		/* lwz R11, <#[R23 + 32]> */
		/* 821CC774h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 821CC774h case    0:*/		return 0x821CC778;
		  /* 821CC778h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CC778h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CC778h case    1:*/		return 0x821CC77C;
		  /* 821CC77Ch */ case    2:  		/* addi R4, R11, -40 */
		/* 821CC77Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821CC77Ch case    2:*/		return 0x821CC780;
	}
	return 0x821CC780;
} // Block from 821CC774h-821CC780h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC780);
		  /* 821CC780h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821CC780h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CC780h case    0:*/		return 0x821CC784;
		  /* 821CC784h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CC784h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CC784h case    1:*/		return 0x821CC788;
		  /* 821CC788h */ case    2:  		/* cmplwi CR6, R11, 11392 */
		/* 821CC788h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002C80);
		/* 821CC788h case    2:*/		return 0x821CC78C;
		  /* 821CC78Ch */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 821CC78Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CC7A0;  }
		/* 821CC78Ch case    3:*/		return 0x821CC790;
		  /* 821CC790h */ case    4:  		/* li R6, 1 */
		/* 821CC790h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CC790h case    4:*/		return 0x821CC794;
		  /* 821CC794h */ case    5:  		/* li R5, 0 */
		/* 821CC794h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CC794h case    5:*/		return 0x821CC798;
		  /* 821CC798h */ case    6:  		/* mr R3, R20 */
		/* 821CC798h case    6:*/		regs.R3 = regs.R20;
		/* 821CC798h case    6:*/		return 0x821CC79C;
		  /* 821CC79Ch */ case    7:  		/* bl 388140 */
		/* 821CC79Ch case    7:*/		regs.LR = 0x821CC7A0; return 0x8222B3C8;
		/* 821CC79Ch case    7:*/		return 0x821CC7A0;
	}
	return 0x821CC7A0;
} // Block from 821CC780h-821CC7A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CC7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC7A0);
		  /* 821CC7A0h */ case    0:  		/* lwz R11, <#[R23 + 36]> */
		/* 821CC7A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821CC7A0h case    0:*/		return 0x821CC7A4;
		  /* 821CC7A4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CC7A4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC7A4h case    1:*/		return 0x821CC7A8;
		  /* 821CC7A8h */ case    2:  		/* bc 12, CR0_EQ, -104 */
		/* 821CC7A8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC7A8h case    2:*/		return 0x821CC7AC;
	}
	return 0x821CC7AC;
} // Block from 821CC7A0h-821CC7ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CC7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC7AC);
		  /* 821CC7ACh */ case    0:  		/* lwz R31, <#[R21 + 20]> */
		/* 821CC7ACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000014) );
		/* 821CC7ACh case    0:*/		return 0x821CC7B0;
		  /* 821CC7B0h */ case    1:  		/* addi R22, R21, 16 */
		/* 821CC7B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R21,0x10);
		/* 821CC7B0h case    1:*/		return 0x821CC7B4;
		  /* 821CC7B4h */ case    2:  		/* li R30, 0 */
		/* 821CC7B4h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CC7B4h case    2:*/		return 0x821CC7B8;
		  /* 821CC7B8h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CC7B8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CC7B8h case    3:*/		return 0x821CC7BC;
		  /* 821CC7BCh */ case    4:  		/* bc 4, CR0_EQ, 340 */
		/* 821CC7BCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CC910;  }
		/* 821CC7BCh case    4:*/		return 0x821CC7C0;
		  /* 821CC7C0h */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821CC7C0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821CC7C0h case    5:*/		return 0x821CC7C4;
		  /* 821CC7C4h */ case    6:  		/* bc 12, CR0_EQ, 332 */
		/* 821CC7C4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CC910;  }
		/* 821CC7C4h case    6:*/		return 0x821CC7C8;
		  /* 821CC7C8h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CC7C8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC7C8h case    7:*/		return 0x821CC7CC;
		  /* 821CC7CCh */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CC7CCh case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CC7CCh case    8:*/		return 0x821CC7D0;
		  /* 821CC7D0h */ case    9:  		/* cmplwi CR6, R11, 14336 */
		/* 821CC7D0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821CC7D0h case    9:*/		return 0x821CC7D4;
		  /* 821CC7D4h */ case   10:  		/* bc 4, CR6_EQ, -148 */
		/* 821CC7D4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CC740;  }
		/* 821CC7D4h case   10:*/		return 0x821CC7D8;
		  /* 821CC7D8h */ case   11:  		/* mr R4, R20 */
		/* 821CC7D8h case   11:*/		regs.R4 = regs.R20;
		/* 821CC7D8h case   11:*/		return 0x821CC7DC;
		  /* 821CC7DCh */ case   12:  		/* mr R3, R31 */
		/* 821CC7DCh case   12:*/		regs.R3 = regs.R31;
		/* 821CC7DCh case   12:*/		return 0x821CC7E0;
		  /* 821CC7E0h */ case   13:  		/* bl -220216 */
		/* 821CC7E0h case   13:*/		regs.LR = 0x821CC7E4; return 0x82196BA8;
		/* 821CC7E0h case   13:*/		return 0x821CC7E4;
		  /* 821CC7E4h */ case   14:  		/* mr R3, R31 */
		/* 821CC7E4h case   14:*/		regs.R3 = regs.R31;
		/* 821CC7E4h case   14:*/		return 0x821CC7E8;
		  /* 821CC7E8h */ case   15:  		/* bl -425576 */
		/* 821CC7E8h case   15:*/		regs.LR = 0x821CC7EC; return 0x82164980;
		/* 821CC7E8h case   15:*/		return 0x821CC7EC;
		  /* 821CC7ECh */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CC7ECh case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CC7ECh case   16:*/		return 0x821CC7F0;
		  /* 821CC7F0h */ case   17:  		/* bc 12, CR0_EQ, 76 */
		/* 821CC7F0h case   17:*/		if ( regs.CR[0].eq ) { return 0x821CC83C;  }
		/* 821CC7F0h case   17:*/		return 0x821CC7F4;
		  /* 821CC7F4h */ case   18:  		/* li R6, 1 */
		/* 821CC7F4h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CC7F4h case   18:*/		return 0x821CC7F8;
		  /* 821CC7F8h */ case   19:  		/* li R5, 0 */
		/* 821CC7F8h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CC7F8h case   19:*/		return 0x821CC7FC;
		  /* 821CC7FCh */ case   20:  		/* mr R4, R31 */
		/* 821CC7FCh case   20:*/		regs.R4 = regs.R31;
		/* 821CC7FCh case   20:*/		return 0x821CC800;
		  /* 821CC800h */ case   21:  		/* mr R3, R20 */
		/* 821CC800h case   21:*/		regs.R3 = regs.R20;
		/* 821CC800h case   21:*/		return 0x821CC804;
		  /* 821CC804h */ case   22:  		/* bl 388036 */
		/* 821CC804h case   22:*/		regs.LR = 0x821CC808; return 0x8222B3C8;
		/* 821CC804h case   22:*/		return 0x821CC808;
	}
	return 0x821CC808;
} // Block from 821CC7ACh-821CC808h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CC808h
// Function '?RemoveUnusedMERGEComponents@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC808);
		  /* 821CC808h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CC808h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CC808h case    0:*/		return 0x821CC80C;
		  /* 821CC80Ch */ case    1:  		/* bc 12, CR6_EQ, 188 */
		/* 821CC80Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CC8C8;  }
		/* 821CC80Ch case    1:*/		return 0x821CC810;
		  /* 821CC810h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821CC810h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821CC810h case    2:*/		return 0x821CC814;
		  /* 821CC814h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CC814h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CC814h case    3:*/		return 0x821CC818;
		  /* 821CC818h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CC818h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CC818h case    4:*/		return 0x821CC81C;
		  /* 821CC81Ch */ case    5:  		/* addic R10, R10, -1 */
		/* 821CC81Ch case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CC81Ch case    5:*/		return 0x821CC820;
		  /* 821CC820h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821CC820h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CC820h case    6:*/		return 0x821CC824;
		  /* 821CC824h */ case    7:  		/* and R10, R10, R11 */
		/* 821CC824h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821CC824h case    7:*/		return 0x821CC828;
		  /* 821CC828h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821CC828h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821CC828h case    8:*/		return 0x821CC82C;
		  /* 821CC82Ch */ case    9:  		/* bc 12, CR6_EQ, 184 */
		/* 821CC82Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821CC8E4;  }
		/* 821CC82Ch case    9:*/		return 0x821CC830;
		  /* 821CC830h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CC830h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CC830h case   10:*/		return 0x821CC834;
		  /* 821CC834h */ case   11:  		/* bc 4, CR0_EQ, 220 */
		/* 821CC834h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821CC910;  }
		/* 821CC834h case   11:*/		return 0x821CC838;
		  /* 821CC838h */ case   12:  		/* b 204 */
		/* 821CC838h case   12:*/		return 0x821CC904;
		/* 821CC838h case   12:*/		return 0x821CC83C;
	}
	return 0x821CC83C;
} // Block from 821CC808h-821CC83Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CC83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC83C);
		  /* 821CC83Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821CC83Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC83Ch case    0:*/		return 0x821CC840;
		  /* 821CC840h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821CC840h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CC840h case    1:*/		return 0x821CC844;
		  /* 821CC844h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821CC844h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC844h case    2:*/		return 0x821CC848;
		  /* 821CC848h */ case    3:  		/* rlwinm R9, R11, 0, 27, 31 */
		/* 821CC848h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 821CC848h case    3:*/		return 0x821CC84C;
		  /* 821CC84Ch */ case    4:  		/* lwz R11, <#[R10 + 28]> */
		/* 821CC84Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821CC84Ch case    4:*/		return 0x821CC850;
		  /* 821CC850h */ case    5:  		/* cmplw CR6, R11, R23 */
		/* 821CC850h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821CC850h case    5:*/		return 0x821CC854;
		  /* 821CC854h */ case    6:  		/* bc 4, CR6_EQ, -76 */
		/* 821CC854h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CC808;  }
		/* 821CC854h case    6:*/		return 0x821CC858;
		  /* 821CC858h */ case    7:  		/* lwz R10, <#[R31 + 4]> */
		/* 821CC858h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821CC858h case    7:*/		return 0x821CC85C;
		  /* 821CC85Ch */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821CC85Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CC85Ch case    8:*/		return 0x821CC860;
		  /* 821CC860h */ case    9:  		/* bc 12, CR6_EQ, -88 */
		/* 821CC860h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CC808;  }
		/* 821CC860h case    9:*/		return 0x821CC864;
		  /* 821CC864h */ case   10:  		/* lwz R11, <#[R10 + 16]> */
		/* 821CC864h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821CC864h case   10:*/		return 0x821CC868;
		  /* 821CC868h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821CC868h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CC868h case   11:*/		return 0x821CC86C;
		  /* 821CC86Ch */ case   12:  		/* bc 12, CR6_EQ, 84 */
		/* 821CC86Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821CC8C0;  }
		/* 821CC86Ch case   12:*/		return 0x821CC870;
		  /* 821CC870h */ case   13:  		/* lwz R11, <#[R10]> */
		/* 821CC870h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CC870h case   13:*/		return 0x821CC874;
		  /* 821CC874h */ case   14:  		/* rlwinm. R8, R9, 0, 27, 28 */
		/* 821CC874h case   14:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R8,regs.R9);
		/* 821CC874h case   14:*/		return 0x821CC878;
		  /* 821CC878h */ case   15:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821CC878h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821CC878h case   15:*/		return 0x821CC87C;
		  /* 821CC87Ch */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 821CC87Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x821CC890;  }
		/* 821CC87Ch case   16:*/		return 0x821CC880;
		  /* 821CC880h */ case   17:  		/* rlwinm. R8, R11, 0, 27, 28 */
		/* 821CC880h case   17:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R8,regs.R11);
		/* 821CC880h case   17:*/		return 0x821CC884;
		  /* 821CC884h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 821CC884h case   18:*/		if ( regs.CR[0].eq ) { return 0x821CC890;  }
		/* 821CC884h case   18:*/		return 0x821CC888;
		  /* 821CC888h */ case   19:  		/* li R11, 0 */
		/* 821CC888h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CC888h case   19:*/		return 0x821CC88C;
		  /* 821CC88Ch */ case   20:  		/* b 44 */
		/* 821CC88Ch case   20:*/		return 0x821CC8B8;
		/* 821CC88Ch case   20:*/		return 0x821CC890;
	}
	return 0x821CC890;
} // Block from 821CC83Ch-821CC890h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CC890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC890);
		  /* 821CC890h */ case    0:  		/* rlwinm. R8, R9, 0, 30, 30 */
		/* 821CC890h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R9);
		/* 821CC890h case    0:*/		return 0x821CC894;
		  /* 821CC894h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CC894h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC8A0;  }
		/* 821CC894h case    1:*/		return 0x821CC898;
		  /* 821CC898h */ case    2:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 821CC898h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 821CC898h case    2:*/		return 0x821CC89C;
		  /* 821CC89Ch */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821CC89Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CC888;  }
		/* 821CC89Ch case    3:*/		return 0x821CC8A0;
	}
	return 0x821CC8A0;
} // Block from 821CC890h-821CC8A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8A0);
		  /* 821CC8A0h */ case    0:  		/* rlwinm. R8, R9, 0, 29, 29 */
		/* 821CC8A0h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R9);
		/* 821CC8A0h case    0:*/		return 0x821CC8A4;
		  /* 821CC8A4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CC8A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC8B4;  }
		/* 821CC8A4h case    1:*/		return 0x821CC8A8;
		  /* 821CC8A8h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CC8A8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CC8A8h case    2:*/		return 0x821CC8AC;
		  /* 821CC8ACh */ case    3:  		/* li R11, 0 */
		/* 821CC8ACh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CC8ACh case    3:*/		return 0x821CC8B0;
		  /* 821CC8B0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821CC8B0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CC8B8;  }
		/* 821CC8B0h case    4:*/		return 0x821CC8B4;
	}
	return 0x821CC8B4;
} // Block from 821CC8A0h-821CC8B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8B4);
		  /* 821CC8B4h */ case    0:  		/* li R11, 1 */
		/* 821CC8B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CC8B4h case    0:*/		return 0x821CC8B8;
	}
	return 0x821CC8B8;
} // Block from 821CC8B4h-821CC8B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8B8);
		  /* 821CC8B8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CC8B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CC8B8h case    0:*/		return 0x821CC8BC;
		  /* 821CC8BCh */ case    1:  		/* bc 12, CR0_EQ, -380 */
		/* 821CC8BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC740;  }
		/* 821CC8BCh case    1:*/		return 0x821CC8C0;
	}
	return 0x821CC8C0;
} // Block from 821CC8B8h-821CC8C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8C0);
		  /* 821CC8C0h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CC8C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CC8C0h case    0:*/		return 0x821CC8C4;
		  /* 821CC8C4h */ case    1:  		/* b -104 */
		/* 821CC8C4h case    1:*/		return 0x821CC85C;
		/* 821CC8C4h case    1:*/		return 0x821CC8C8;
	}
	return 0x821CC8C8;
} // Block from 821CC8C0h-821CC8C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8C8);
		  /* 821CC8C8h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CC8C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CC8C8h case    0:*/		return 0x821CC8CC;
		  /* 821CC8CCh */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CC8CCh case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CC8CCh case    1:*/		return 0x821CC8D0;
		  /* 821CC8D0h */ case    2:  		/* addic R9, R10, -1 */
		/* 821CC8D0h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821CC8D0h case    2:*/		return 0x821CC8D4;
		  /* 821CC8D4h */ case    3:  		/* subfe R9, R9, R9 */
		/* 821CC8D4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CC8D4h case    3:*/		return 0x821CC8D8;
		  /* 821CC8D8h */ case    4:  		/* and R9, R9, R11 */
		/* 821CC8D8h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821CC8D8h case    4:*/		return 0x821CC8DC;
		  /* 821CC8DCh */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 821CC8DCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 821CC8DCh case    5:*/		return 0x821CC8E0;
		  /* 821CC8E0h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 821CC8E0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CC8FC;  }
		/* 821CC8E0h case    6:*/		return 0x821CC8E4;
	}
	return 0x821CC8E4;
} // Block from 821CC8C8h-821CC8E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8E4);
		  /* 821CC8E4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821CC8E4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821CC8E4h case    0:*/		return 0x821CC8E8;
		  /* 821CC8E8h */ case    1:  		/* mr R30, R31 */
		/* 821CC8E8h case    1:*/		regs.R30 = regs.R31;
		/* 821CC8E8h case    1:*/		return 0x821CC8EC;
		  /* 821CC8ECh */ case    2:  		/* lwz R31, <#[R11 + 40]> */
		/* 821CC8ECh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821CC8ECh case    2:*/		return 0x821CC8F0;
		  /* 821CC8F0h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CC8F0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CC8F0h case    3:*/		return 0x821CC8F4;
		  /* 821CC8F4h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 821CC8F4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CC910;  }
		/* 821CC8F4h case    4:*/		return 0x821CC8F8;
		  /* 821CC8F8h */ case    5:  		/* b 16 */
		/* 821CC8F8h case    5:*/		return 0x821CC908;
		/* 821CC8F8h case    5:*/		return 0x821CC8FC;
	}
	return 0x821CC8FC;
} // Block from 821CC8E4h-821CC8FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CC8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC8FC);
		  /* 821CC8FCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821CC8FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CC8FCh case    0:*/		return 0x821CC900;
		  /* 821CC900h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821CC900h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC910;  }
		/* 821CC900h case    1:*/		return 0x821CC904;
	}
	return 0x821CC904;
} // Block from 821CC8FCh-821CC904h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC904);
		  /* 821CC904h */ case    0:  		/* mr R31, R11 */
		/* 821CC904h case    0:*/		regs.R31 = regs.R11;
		/* 821CC904h case    0:*/		return 0x821CC908;
	}
	return 0x821CC908;
} // Block from 821CC904h-821CC908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CC908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC908);
		  /* 821CC908h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821CC908h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC908h case    0:*/		return 0x821CC90C;
		  /* 821CC90Ch */ case    1:  		/* bc 4, CR6_EQ, -324 */
		/* 821CC90Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC7C8;  }
		/* 821CC90Ch case    1:*/		return 0x821CC910;
	}
	return 0x821CC910;
} // Block from 821CC908h-821CC910h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CC910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC910);
		  /* 821CC910h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CC910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CC910h case    0:*/		return 0x821CC914;
		  /* 821CC914h */ case    1:  		/* li R24, 0 */
		/* 821CC914h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821CC914h case    1:*/		return 0x821CC918;
		  /* 821CC918h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CC918h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CC918h case    2:*/		return 0x821CC91C;
		  /* 821CC91Ch */ case    3:  		/* bc 4, CR0_EQ, 676 */
		/* 821CC91Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CCBC0;  }
		/* 821CC91Ch case    3:*/		return 0x821CC920;
		  /* 821CC920h */ case    4:  		/* mr R29, R11 */
		/* 821CC920h case    4:*/		regs.R29 = regs.R11;
		/* 821CC920h case    4:*/		return 0x821CC924;
		  /* 821CC924h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821CC924h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CC924h case    5:*/		return 0x821CC928;
		  /* 821CC928h */ case    6:  		/* bc 12, CR0_EQ, 664 */
		/* 821CC928h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CCBC0;  }
		/* 821CC928h case    6:*/		return 0x821CC92C;
		  /* 821CC92Ch */ case    7:  		/* lwz R11, <#[R29]> */
		/* 821CC92Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CC92Ch case    7:*/		return 0x821CC930;
		  /* 821CC930h */ case    8:  		/* lwz R28, <#[R11 + 12]> */
		/* 821CC930h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CC930h case    8:*/		return 0x821CC934;
		  /* 821CC934h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821CC934h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC934h case    9:*/		return 0x821CC938;
		  /* 821CC938h */ case   10:  		/* rlwinm R27, R11, 27, 24, 31 */
		/* 821CC938h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R27,regs.R11);
		/* 821CC938h case   10:*/		return 0x821CC93C;
		  /* 821CC93Ch */ case   11:  		/* rlwinm R26, R11, 0, 27, 31 */
		/* 821CC93Ch case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R26,regs.R11);
		/* 821CC93Ch case   11:*/		return 0x821CC940;
		  /* 821CC940h */ case   12:  		/* lwz R11, <#[R28 + 28]> */
		/* 821CC940h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 821CC940h case   12:*/		return 0x821CC944;
		  /* 821CC944h */ case   13:  		/* cmplw CR6, R11, R23 */
		/* 821CC944h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821CC944h case   13:*/		return 0x821CC948;
		  /* 821CC948h */ case   14:  		/* bc 4, CR6_EQ, 428 */
		/* 821CC948h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CCAF4;  }
		/* 821CC948h case   14:*/		return 0x821CC94C;
		  /* 821CC94Ch */ case   15:  		/* addi R25, R29, 4 */
		/* 821CC94Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R29,0x4);
		/* 821CC94Ch case   15:*/		return 0x821CC950;
		  /* 821CC950h */ case   16:  		/* lwz R31, <#[R25]> */
		/* 821CC950h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 821CC950h case   16:*/		return 0x821CC954;
		  /* 821CC954h */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 821CC954h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CC954h case   17:*/		return 0x821CC958;
		  /* 821CC958h */ case   18:  		/* bc 12, CR6_EQ, 388 */
		/* 821CC958h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CCADC;  }
		/* 821CC958h case   18:*/		return 0x821CC95C;
		  /* 821CC95Ch */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 821CC95Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821CC95Ch case   19:*/		return 0x821CC960;
		  /* 821CC960h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821CC960h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CC960h case   20:*/		return 0x821CC964;
		  /* 821CC964h */ case   21:  		/* bc 12, CR6_EQ, 356 */
		/* 821CC964h case   21:*/		if ( regs.CR[6].eq ) { return 0x821CCAC8;  }
		/* 821CC964h case   21:*/		return 0x821CC968;
		  /* 821CC968h */ case   22:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CC968h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CC968h case   22:*/		return 0x821CC96C;
		  /* 821CC96Ch */ case   23:  		/* addi R11, R11, 4 */
		/* 821CC96Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CC96Ch case   23:*/		return 0x821CC970;
		  /* 821CC970h */ case   24:  		/* lwz R10, <#[R11]> */
		/* 821CC970h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC970h case   24:*/		return 0x821CC974;
		  /* 821CC974h */ case   25:  		/* b 12 */
		/* 821CC974h case   25:*/		return 0x821CC980;
		/* 821CC974h case   25:*/		return 0x821CC978;
		  /* 821CC978h */ case   26:  		/* addi R11, R10, 8 */
		/* 821CC978h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CC978h case   26:*/		return 0x821CC97C;
		  /* 821CC97Ch */ case   27:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CC97Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CC97Ch case   27:*/		return 0x821CC980;
	}
	return 0x821CC980;
} // Block from 821CC910h-821CC980h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821CC980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC980);
		  /* 821CC980h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821CC980h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821CC980h case    0:*/		return 0x821CC984;
		  /* 821CC984h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CC984h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CC978;  }
		/* 821CC984h case    1:*/		return 0x821CC988;
		  /* 821CC988h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821CC988h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC988h case    2:*/		return 0x821CC98C;
		  /* 821CC98Ch */ case    3:  		/* rlwinm. R8, R26, 0, 29, 29 */
		/* 821CC98Ch case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R26);
		/* 821CC98Ch case    3:*/		return 0x821CC990;
		  /* 821CC990h */ case    4:  		/* stw R9, <#[R11]> */
		/* 821CC990h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CC990h case    4:*/		return 0x821CC994;
		  /* 821CC994h */ case    5:  		/* mr R10, R26 */
		/* 821CC994h case    5:*/		regs.R10 = regs.R26;
		/* 821CC994h case    5:*/		return 0x821CC998;
		  /* 821CC998h */ case    6:  		/* lwz R11, <#[R28 + 4]> */
		/* 821CC998h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821CC998h case    6:*/		return 0x821CC99C;
		  /* 821CC99Ch */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821CC99Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CC99Ch case    7:*/		return 0x821CC9A0;
		  /* 821CC9A0h */ case    8:  		/* stw R31, <#[R28 + 4]> */
		/* 821CC9A0h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 821CC9A0h case    8:*/		return 0x821CC9A4;
		  /* 821CC9A4h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821CC9A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC9A4h case    9:*/		return 0x821CC9A8;
		  /* 821CC9A8h */ case   10:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821CC9A8h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821CC9A8h case   10:*/		return 0x821CC9AC;
		  /* 821CC9ACh */ case   11:  		/* stw R28, <#[R31 + 12]> */
		/* 821CC9ACh case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CC9ACh case   11:*/		return 0x821CC9B0;
		  /* 821CC9B0h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821CC9B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821CC9C0;  }
		/* 821CC9B0h case   12:*/		return 0x821CC9B4;
		  /* 821CC9B4h */ case   13:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821CC9B4h case   13:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821CC9B4h case   13:*/		return 0x821CC9B8;
		  /* 821CC9B8h */ case   14:  		/* bc 12, CR0_EQ, 8 */
		/* 821CC9B8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821CC9C0;  }
		/* 821CC9B8h case   14:*/		return 0x821CC9BC;
		  /* 821CC9BCh */ case   15:  		/* addi R10, R26, -4 */
		/* 821CC9BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0xFFFFFFFC);
		/* 821CC9BCh case   15:*/		return 0x821CC9C0;
	}
	return 0x821CC9C0;
} // Block from 821CC980h-821CC9C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CC9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC9C0);
		  /* 821CC9C0h */ case    0:  		/* and R9, R10, R11 */
		/* 821CC9C0h case    0:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821CC9C0h case    0:*/		return 0x821CC9C4;
		  /* 821CC9C4h */ case    1:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821CC9C4h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821CC9C4h case    1:*/		return 0x821CC9C8;
		  /* 821CC9C8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CC9C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CC9D4;  }
		/* 821CC9C8h case    2:*/		return 0x821CC9CC;
		  /* 821CC9CCh */ case    3:  		/* addi R10, R10, -4 */
		/* 821CC9CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821CC9CCh case    3:*/		return 0x821CC9D0;
		  /* 821CC9D0h */ case    4:  		/* addi R11, R11, -4 */
		/* 821CC9D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CC9D0h case    4:*/		return 0x821CC9D4;
	}
	return 0x821CC9D4;
} // Block from 821CC9C0h-821CC9D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC9D4);
		  /* 821CC9D4h */ case    0:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821CC9D4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821CC9D4h case    0:*/		return 0x821CC9D8;
		  /* 821CC9D8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CC9D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CC9E8;  }
		/* 821CC9D8h case    1:*/		return 0x821CC9DC;
		  /* 821CC9DCh */ case    2:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821CC9DCh case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821CC9DCh case    2:*/		return 0x821CC9E0;
		  /* 821CC9E0h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CC9E0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CC9E8;  }
		/* 821CC9E0h case    3:*/		return 0x821CC9E4;
		  /* 821CC9E4h */ case    4:  		/* addi R11, R11, -2 */
		/* 821CC9E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821CC9E4h case    4:*/		return 0x821CC9E8;
	}
	return 0x821CC9E8;
} // Block from 821CC9D4h-821CC9E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CC9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CC9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CC9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CC9E8);
		  /* 821CC9E8h */ case    0:  		/* or R11, R10, R11 */
		/* 821CC9E8h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CC9E8h case    0:*/		return 0x821CC9EC;
		  /* 821CC9ECh */ case    1:  		/* lwz R9, <#[R31]> */
		/* 821CC9ECh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821CC9ECh case    1:*/		return 0x821CC9F0;
		  /* 821CC9F0h */ case    2:  		/* lwz R30, <#[R31 + 16]> */
		/* 821CC9F0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821CC9F0h case    2:*/		return 0x821CC9F4;
		  /* 821CC9F4h */ case    3:  		/* rlwimi R11, R9, 0, 0, 26 */
		/* 821CC9F4h case    3:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R9);
		/* 821CC9F4h case    3:*/		return 0x821CC9F8;
		  /* 821CC9F8h */ case    4:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821CC9F8h case    4:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821CC9F8h case    4:*/		return 0x821CC9FC;
		  /* 821CC9FCh */ case    5:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821CC9FCh case    5:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821CC9FCh case    5:*/		return 0x821CCA00;
		  /* 821CCA00h */ case    6:  		/* srw R10, R27, R10 */
		/* 821CCA00h case    6:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821CCA00h case    6:*/		return 0x821CCA04;
		  /* 821CCA04h */ case    7:  		/* srw R9, R27, R9 */
		/* 821CCA04h case    7:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821CCA04h case    7:*/		return 0x821CCA08;
		  /* 821CCA08h */ case    8:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821CCA08h case    8:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821CCA08h case    8:*/		return 0x821CCA0C;
		  /* 821CCA0Ch */ case    9:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821CCA0Ch case    9:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821CCA0Ch case    9:*/		return 0x821CCA10;
		  /* 821CCA10h */ case   10:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821CCA10h case   10:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821CCA10h case   10:*/		return 0x821CCA14;
		  /* 821CCA14h */ case   11:  		/* srw R10, R27, R10 */
		/* 821CCA14h case   11:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821CCA14h case   11:*/		return 0x821CCA18;
		  /* 821CCA18h */ case   12:  		/* rlwinm R8, R11, 28, 29, 30 */
		/* 821CCA18h case   12:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R11);
		/* 821CCA18h case   12:*/		return 0x821CCA1C;
		  /* 821CCA1Ch */ case   13:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821CCA1Ch case   13:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821CCA1Ch case   13:*/		return 0x821CCA20;
		  /* 821CCA20h */ case   14:  		/* srw R9, R27, R8 */
		/* 821CCA20h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R8);
		/* 821CCA20h case   14:*/		return 0x821CCA24;
		  /* 821CCA24h */ case   15:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821CCA24h case   15:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821CCA24h case   15:*/		return 0x821CCA28;
		  /* 821CCA28h */ case   16:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821CCA28h case   16:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821CCA28h case   16:*/		return 0x821CCA2C;
		  /* 821CCA2Ch */ case   17:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821CCA2Ch case   17:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821CCA2Ch case   17:*/		return 0x821CCA30;
		  /* 821CCA30h */ case   18:  		/* or R11, R10, R11 */
		/* 821CCA30h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CCA30h case   18:*/		return 0x821CCA34;
		  /* 821CCA34h */ case   19:  		/* stw R11, <#[R31]> */
		/* 821CCA34h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CCA34h case   19:*/		return 0x821CCA38;
		  /* 821CCA38h */ case   20:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CCA38h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CCA38h case   20:*/		return 0x821CCA3C;
		  /* 821CCA3Ch */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CCA3Ch case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CCA3Ch case   21:*/		return 0x821CCA40;
		  /* 821CCA40h */ case   22:  		/* cmplwi CR6, R11, 14336 */
		/* 821CCA40h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821CCA40h case   22:*/		return 0x821CCA44;
		  /* 821CCA44h */ case   23:  		/* bc 4, CR6_EQ, 108 */
		/* 821CCA44h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821CCAB0;  }
		/* 821CCA44h case   23:*/		return 0x821CCA48;
		  /* 821CCA48h */ case   24:  		/* lwz R11, <#[R30]> */
		/* 821CCA48h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CCA48h case   24:*/		return 0x821CCA4C;
		  /* 821CCA4Ch */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 821CCA4Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCA4Ch case   25:*/		return 0x821CCA50;
		  /* 821CCA50h */ case   26:  		/* bc 12, CR6_EQ, 20 */
		/* 821CCA50h case   26:*/		if ( regs.CR[6].eq ) { return 0x821CCA64;  }
		/* 821CCA50h case   26:*/		return 0x821CCA54;
		  /* 821CCA54h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CCA54h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCA54h case   27:*/		return 0x821CCA58;
		  /* 821CCA58h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821CCA58h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCA58h case   28:*/		return 0x821CCA5C;
		  /* 821CCA5Ch */ case   29:  		/* li R11, 1 */
		/* 821CCA5Ch case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CCA5Ch case   29:*/		return 0x821CCA60;
		  /* 821CCA60h */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 821CCA60h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821CCA68;  }
		/* 821CCA60h case   30:*/		return 0x821CCA64;
	}
	return 0x821CCA64;
} // Block from 821CC9E8h-821CCA64h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821CCA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCA64);
		  /* 821CCA64h */ case    0:  		/* li R11, 0 */
		/* 821CCA64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CCA64h case    0:*/		return 0x821CCA68;
	}
	return 0x821CCA68;
} // Block from 821CCA64h-821CCA68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CCA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCA68);
		  /* 821CCA68h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CCA68h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CCA68h case    0:*/		return 0x821CCA6C;
		  /* 821CCA6Ch */ case    1:  		/* bc 12, CR0_EQ, 68 */
		/* 821CCA6Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CCAB0;  }
		/* 821CCA6Ch case    1:*/		return 0x821CCA70;
		  /* 821CCA70h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821CCA70h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821CCA70h case    2:*/		return 0x821CCA74;
		  /* 821CCA74h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821CCA74h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821CCA74h case    3:*/		return 0x821CCA78;
		  /* 821CCA78h */ case    4:  		/* cmplwi CR6, R11, 125 */
		/* 821CCA78h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821CCA78h case    4:*/		return 0x821CCA7C;
		  /* 821CCA7Ch */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821CCA7Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CCA8C;  }
		/* 821CCA7Ch case    5:*/		return 0x821CCA80;
		  /* 821CCA80h */ case    6:  		/* cmplwi CR6, R11, 124 */
		/* 821CCA80h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821CCA80h case    6:*/		return 0x821CCA84;
		  /* 821CCA84h */ case    7:  		/* li R11, 0 */
		/* 821CCA84h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CCA84h case    7:*/		return 0x821CCA88;
		  /* 821CCA88h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821CCA88h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CCA90;  }
		/* 821CCA88h case    8:*/		return 0x821CCA8C;
	}
	return 0x821CCA8C;
} // Block from 821CCA68h-821CCA8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CCA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCA8C);
		  /* 821CCA8Ch */ case    0:  		/* li R11, 1 */
		/* 821CCA8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CCA8Ch case    0:*/		return 0x821CCA90;
	}
	return 0x821CCA90;
} // Block from 821CCA8Ch-821CCA90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CCA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCA90);
		  /* 821CCA90h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CCA90h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CCA90h case    0:*/		return 0x821CCA94;
		  /* 821CCA94h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821CCA94h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CCAB0;  }
		/* 821CCA94h case    1:*/		return 0x821CCA98;
		  /* 821CCA98h */ case    2:  		/* addi R11, R23, 24 */
		/* 821CCA98h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x18);
		/* 821CCA98h case    2:*/		return 0x821CCA9C;
		  /* 821CCA9Ch */ case    3:  		/* mr R6, R31 */
		/* 821CCA9Ch case    3:*/		regs.R6 = regs.R31;
		/* 821CCA9Ch case    3:*/		return 0x821CCAA0;
		  /* 821CCAA0h */ case    4:  		/* ori R5, R11, 3 */
		/* 821CCAA0h case    4:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x3);
		/* 821CCAA0h case    4:*/		return 0x821CCAA4;
		  /* 821CCAA4h */ case    5:  		/* mr R4, R23 */
		/* 821CCAA4h case    5:*/		regs.R4 = regs.R23;
		/* 821CCAA4h case    5:*/		return 0x821CCAA8;
		  /* 821CCAA8h */ case    6:  		/* mr R3, R20 */
		/* 821CCAA8h case    6:*/		regs.R3 = regs.R20;
		/* 821CCAA8h case    6:*/		return 0x821CCAAC;
		  /* 821CCAACh */ case    7:  		/* bl 382228 */
		/* 821CCAACh case    7:*/		regs.LR = 0x821CCAB0; return 0x82229FC0;
		/* 821CCAACh case    7:*/		return 0x821CCAB0;
	}
	return 0x821CCAB0;
} // Block from 821CCA90h-821CCAB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CCAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCAB0);
		  /* 821CCAB0h */ case    0:  		/* lwz R5, <#[R20 + 652]> */
		/* 821CCAB0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x0000028C) );
		/* 821CCAB0h case    0:*/		return 0x821CCAB4;
		  /* 821CCAB4h */ case    1:  		/* cmplwi CR6, R5, 0 */
		/* 821CCAB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821CCAB4h case    1:*/		return 0x821CCAB8;
		  /* 821CCAB8h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821CCAB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CCAC8;  }
		/* 821CCAB8h case    2:*/		return 0x821CCABC;
		  /* 821CCABCh */ case    3:  		/* mr R4, R30 */
		/* 821CCABCh case    3:*/		regs.R4 = regs.R30;
		/* 821CCABCh case    3:*/		return 0x821CCAC0;
		  /* 821CCAC0h */ case    4:  		/* mr R3, R20 */
		/* 821CCAC0h case    4:*/		regs.R3 = regs.R20;
		/* 821CCAC0h case    4:*/		return 0x821CCAC4;
		  /* 821CCAC4h */ case    5:  		/* bl -4348 */
		/* 821CCAC4h case    5:*/		regs.LR = 0x821CCAC8; return 0x821CB9C8;
		/* 821CCAC4h case    5:*/		return 0x821CCAC8;
	}
	return 0x821CCAC8;
} // Block from 821CCAB0h-821CCAC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CCAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCAC8);
		  /* 821CCAC8h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821CCAC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CCAC8h case    0:*/		return 0x821CCACC;
		  /* 821CCACCh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821CCACCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821CCACCh case    1:*/		return 0x821CCAD0;
		  /* 821CCAD0h */ case    2:  		/* bc 4, CR6_EQ, -384 */
		/* 821CCAD0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CC950;  }
		/* 821CCAD0h case    2:*/		return 0x821CCAD4;
		  /* 821CCAD4h */ case    3:  		/* addi R25, R31, 8 */
		/* 821CCAD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x8);
		/* 821CCAD4h case    3:*/		return 0x821CCAD8;
		  /* 821CCAD8h */ case    4:  		/* b -392 */
		/* 821CCAD8h case    4:*/		return 0x821CC950;
		/* 821CCAD8h case    4:*/		return 0x821CCADC;
	}
	return 0x821CCADC;
} // Block from 821CCAC8h-821CCADCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CCADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCADC);
		  /* 821CCADCh */ case    0:  		/* li R6, 1 */
		/* 821CCADCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CCADCh case    0:*/		return 0x821CCAE0;
		  /* 821CCAE0h */ case    1:  		/* li R5, 0 */
		/* 821CCAE0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CCAE0h case    1:*/		return 0x821CCAE4;
		  /* 821CCAE4h */ case    2:  		/* mr R4, R29 */
		/* 821CCAE4h case    2:*/		regs.R4 = regs.R29;
		/* 821CCAE4h case    2:*/		return 0x821CCAE8;
		  /* 821CCAE8h */ case    3:  		/* mr R3, R20 */
		/* 821CCAE8h case    3:*/		regs.R3 = regs.R20;
		/* 821CCAE8h case    3:*/		return 0x821CCAEC;
		  /* 821CCAECh */ case    4:  		/* bl 387292 */
		/* 821CCAECh case    4:*/		regs.LR = 0x821CCAF0; return 0x8222B3C8;
		/* 821CCAECh case    4:*/		return 0x821CCAF0;
		  /* 821CCAF0h */ case    5:  		/* b 96 */
		/* 821CCAF0h case    5:*/		return 0x821CCB50;
		/* 821CCAF0h case    5:*/		return 0x821CCAF4;
	}
	return 0x821CCAF4;
} // Block from 821CCADCh-821CCAF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CCAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCAF4);
		  /* 821CCAF4h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821CCAF4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821CCAF4h case    0:*/		return 0x821CCAF8;
		  /* 821CCAF8h */ case    1:  		/* addi R10, R23, 16 */
		/* 821CCAF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0x10);
		/* 821CCAF8h case    1:*/		return 0x821CCAFC;
		  /* 821CCAFCh */ case    2:  		/* addi R11, R11, 36 */
		/* 821CCAFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821CCAFCh case    2:*/		return 0x821CCB00;
		  /* 821CCB00h */ case    3:  		/* addi R10, R10, -36 */
		/* 821CCB00h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821CCB00h case    3:*/		return 0x821CCB04;
		  /* 821CCB04h */ case    4:  		/* addi R9, R11, -36 */
		/* 821CCB04h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821CCB04h case    4:*/		return 0x821CCB08;
		  /* 821CCB08h */ case    5:  		/* ori R8, R10, 1 */
		/* 821CCB08h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821CCB08h case    5:*/		return 0x821CCB0C;
		  /* 821CCB0Ch */ case    6:  		/* addi R10, R11, 4 */
		/* 821CCB0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CCB0Ch case    6:*/		return 0x821CCB10;
		  /* 821CCB10h */ case    7:  		/* lwz R7, <#[R11 + 4]> */
		/* 821CCB10h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCB10h case    7:*/		return 0x821CCB14;
		  /* 821CCB14h */ case    8:  		/* lwz R6, <#[R11]> */
		/* 821CCB14h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCB14h case    8:*/		return 0x821CCB18;
		  /* 821CCB18h */ case    9:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CCB18h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CCB18h case    9:*/		return 0x821CCB1C;
		  /* 821CCB1Ch */ case   10:  		/* stw R6, <#[R7 + 36]> */
		/* 821CCB1Ch case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000024) );
		/* 821CCB1Ch case   10:*/		return 0x821CCB20;
		  /* 821CCB20h */ case   11:  		/* lwz R6, <#[R11 + 4]> */
		/* 821CCB20h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCB20h case   11:*/		return 0x821CCB24;
		  /* 821CCB24h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821CCB24h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCB24h case   12:*/		return 0x821CCB28;
		  /* 821CCB28h */ case   13:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CCB28h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CCB28h case   13:*/		return 0x821CCB2C;
		  /* 821CCB2Ch */ case   14:  		/* stw R6, <#[R7]> */
		/* 821CCB2Ch case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821CCB2Ch case   14:*/		return 0x821CCB30;
		  /* 821CCB30h */ case   15:  		/* lwz R7, <#[R23 + 16]> */
		/* 821CCB30h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R23 + 0x00000010) );
		/* 821CCB30h case   15:*/		return 0x821CCB34;
		  /* 821CCB34h */ case   16:  		/* stw R7, <#[R11]> */
		/* 821CCB34h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCB34h case   16:*/		return 0x821CCB38;
		  /* 821CCB38h */ case   17:  		/* lwz R7, <#[R23 + 16]> */
		/* 821CCB38h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R23 + 0x00000010) );
		/* 821CCB38h case   17:*/		return 0x821CCB3C;
		  /* 821CCB3Ch */ case   18:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CCB3Ch case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CCB3Ch case   18:*/		return 0x821CCB40;
		  /* 821CCB40h */ case   19:  		/* stw R9, <#[R7]> */
		/* 821CCB40h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821CCB40h case   19:*/		return 0x821CCB44;
		  /* 821CCB44h */ case   20:  		/* stw R8, <#[R11 + 4]> */
		/* 821CCB44h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCB44h case   20:*/		return 0x821CCB48;
		  /* 821CCB48h */ case   21:  		/* stw R10, <#[R23 + 16]> */
		/* 821CCB48h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 821CCB48h case   21:*/		return 0x821CCB4C;
		  /* 821CCB4Ch */ case   22:  		/* stw R23, <#[R29 + 28]> */
		/* 821CCB4Ch case   22:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R29 + 0x0000001C) );
		/* 821CCB4Ch case   22:*/		return 0x821CCB50;
	}
	return 0x821CCB50;
} // Block from 821CCAF4h-821CCB50h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CCB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCB50);
		  /* 821CCB50h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821CCB50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821CCB50h case    0:*/		return 0x821CCB54;
		  /* 821CCB54h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 821CCB54h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CCB90;  }
		/* 821CCB54h case    1:*/		return 0x821CCB58;
		  /* 821CCB58h */ case    2:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821CCB58h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821CCB58h case    2:*/		return 0x821CCB5C;
		  /* 821CCB5Ch */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CCB5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CCB5Ch case    3:*/		return 0x821CCB60;
		  /* 821CCB60h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CCB60h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCB60h case    4:*/		return 0x821CCB64;
		  /* 821CCB64h */ case    5:  		/* addic R10, R10, -1 */
		/* 821CCB64h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CCB64h case    5:*/		return 0x821CCB68;
		  /* 821CCB68h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821CCB68h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CCB68h case    6:*/		return 0x821CCB6C;
		  /* 821CCB6Ch */ case    7:  		/* and R10, R10, R11 */
		/* 821CCB6Ch case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821CCB6Ch case    7:*/		return 0x821CCB70;
		  /* 821CCB70h */ case    8:  		/* cmplw CR6, R29, R10 */
		/* 821CCB70h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 821CCB70h case    8:*/		return 0x821CCB74;
		  /* 821CCB74h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821CCB74h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821CCB84;  }
		/* 821CCB74h case    9:*/		return 0x821CCB78;
		  /* 821CCB78h */ case   10:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821CCB78h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821CCB78h case   10:*/		return 0x821CCB7C;
		  /* 821CCB7Ch */ case   11:  		/* mr R24, R29 */
		/* 821CCB7Ch case   11:*/		regs.R24 = regs.R29;
		/* 821CCB7Ch case   11:*/		return 0x821CCB80;
		  /* 821CCB80h */ case   12:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CCB80h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CCB80h case   12:*/		return 0x821CCB84;
	}
	return 0x821CCB84;
} // Block from 821CCB50h-821CCB84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CCB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCB84);
		  /* 821CCB84h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCB84h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCB84h case    0:*/		return 0x821CCB88;
		  /* 821CCB88h */ case    1:  		/* bc 4, CR0_EQ, 56 */
		/* 821CCB88h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CCBC0;  }
		/* 821CCB88h case    1:*/		return 0x821CCB8C;
		  /* 821CCB8Ch */ case    2:  		/* b 40 */
		/* 821CCB8Ch case    2:*/		return 0x821CCBB4;
		/* 821CCB8Ch case    2:*/		return 0x821CCB90;
	}
	return 0x821CCB90;
} // Block from 821CCB84h-821CCB90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CCB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCB90);
		  /* 821CCB90h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CCB90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CCB90h case    0:*/		return 0x821CCB94;
		  /* 821CCB94h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CCB94h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCB94h case    1:*/		return 0x821CCB98;
		  /* 821CCB98h */ case    2:  		/* addic R9, R10, -1 */
		/* 821CCB98h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821CCB98h case    2:*/		return 0x821CCB9C;
		  /* 821CCB9Ch */ case    3:  		/* subfe R9, R9, R9 */
		/* 821CCB9Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CCB9Ch case    3:*/		return 0x821CCBA0;
		  /* 821CCBA0h */ case    4:  		/* and R9, R9, R11 */
		/* 821CCBA0h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821CCBA0h case    4:*/		return 0x821CCBA4;
		  /* 821CCBA4h */ case    5:  		/* cmplw CR6, R29, R9 */
		/* 821CCBA4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821CCBA4h case    5:*/		return 0x821CCBA8;
		  /* 821CCBA8h */ case    6:  		/* bc 12, CR6_EQ, -48 */
		/* 821CCBA8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CCB78;  }
		/* 821CCBA8h case    6:*/		return 0x821CCBAC;
		  /* 821CCBACh */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821CCBACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CCBACh case    7:*/		return 0x821CCBB0;
		  /* 821CCBB0h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 821CCBB0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CCBC0;  }
		/* 821CCBB0h case    8:*/		return 0x821CCBB4;
	}
	return 0x821CCBB4;
} // Block from 821CCB90h-821CCBB4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CCBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCBB4);
		  /* 821CCBB4h */ case    0:  		/* mr R29, R11 */
		/* 821CCBB4h case    0:*/		regs.R29 = regs.R11;
		/* 821CCBB4h case    0:*/		return 0x821CCBB8;
		  /* 821CCBB8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CCBB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCBB8h case    1:*/		return 0x821CCBBC;
		  /* 821CCBBCh */ case    2:  		/* bc 4, CR6_EQ, -656 */
		/* 821CCBBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CC92C;  }
		/* 821CCBBCh case    2:*/		return 0x821CCBC0;
	}
	return 0x821CCBC0;
} // Block from 821CCBB4h-821CCBC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CCBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCBC0);
		  /* 821CCBC0h */ case    0:  		/* li R31, 0 */
		/* 821CCBC0h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CCBC0h case    0:*/		return 0x821CCBC4;
		  /* 821CCBC4h */ case    1:  		/* mr R6, R20 */
		/* 821CCBC4h case    1:*/		regs.R6 = regs.R20;
		/* 821CCBC4h case    1:*/		return 0x821CCBC8;
		  /* 821CCBC8h */ case    2:  		/* mr R5, R21 */
		/* 821CCBC8h case    2:*/		regs.R5 = regs.R21;
		/* 821CCBC8h case    2:*/		return 0x821CCBCC;
		  /* 821CCBCCh */ case    3:  		/* mr R4, R31 */
		/* 821CCBCCh case    3:*/		regs.R4 = regs.R31;
		/* 821CCBCCh case    3:*/		return 0x821CCBD0;
		  /* 821CCBD0h */ case    4:  		/* mr R3, R23 */
		/* 821CCBD0h case    4:*/		regs.R3 = regs.R23;
		/* 821CCBD0h case    4:*/		return 0x821CCBD4;
		  /* 821CCBD4h */ case    5:  		/* bl -48412 */
		/* 821CCBD4h case    5:*/		regs.LR = 0x821CCBD8; return 0x821C0EB8;
		/* 821CCBD4h case    5:*/		return 0x821CCBD8;
		  /* 821CCBD8h */ case    6:  		/* addi R31, R31, 1 */
		/* 821CCBD8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821CCBD8h case    6:*/		return 0x821CCBDC;
		  /* 821CCBDCh */ case    7:  		/* cmpwi CR6, R31, 3 */
		/* 821CCBDCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000003);
		/* 821CCBDCh case    7:*/		return 0x821CCBE0;
		  /* 821CCBE0h */ case    8:  		/* bc 4, CR6_GT, -28 */
		/* 821CCBE0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821CCBC4;  }
		/* 821CCBE0h case    8:*/		return 0x821CCBE4;
		  /* 821CCBE4h */ case    9:  		/* lwz R11, <#[R21 + 28]> */
		/* 821CCBE4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821CCBE4h case    9:*/		return 0x821CCBE8;
		  /* 821CCBE8h */ case   10:  		/* addi R4, R21, 24 */
		/* 821CCBE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R21,0x18);
		/* 821CCBE8h case   10:*/		return 0x821CCBEC;
		  /* 821CCBECh */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCBECh case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCBECh case   11:*/		return 0x821CCBF0;
		  /* 821CCBF0h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821CCBF0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CCC18;  }
		/* 821CCBF0h case   12:*/		return 0x821CCBF4;
		  /* 821CCBF4h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821CCBF4h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CCBF4h case   13:*/		return 0x821CCBF8;
		  /* 821CCBF8h */ case   14:  		/* bc 12, CR0_EQ, 32 */
		/* 821CCBF8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821CCC18;  }
		/* 821CCBF8h case   14:*/		return 0x821CCBFC;
		  /* 821CCBFCh */ case   15:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821CCBFCh case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821CCBFCh case   15:*/		return 0x821CCC00;
		  /* 821CCC00h */ case   16:  		/* stw R23, <#[R11 + 28]> */
		/* 821CCC00h case   16:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000001C) );
		/* 821CCC00h case   16:*/		return 0x821CCC04;
		  /* 821CCC04h */ case   17:  		/* lwz R11, <#[R10 + 40]> */
		/* 821CCC04h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 821CCC04h case   17:*/		return 0x821CCC08;
		  /* 821CCC08h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCC08h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCC08h case   18:*/		return 0x821CCC0C;
		  /* 821CCC0Ch */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 821CCC0Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x821CCC18;  }
		/* 821CCC0Ch case   19:*/		return 0x821CCC10;
		  /* 821CCC10h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821CCC10h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCC10h case   20:*/		return 0x821CCC14;
		  /* 821CCC14h */ case   21:  		/* bc 4, CR6_EQ, -24 */
		/* 821CCC14h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821CCBFC;  }
		/* 821CCC14h case   21:*/		return 0x821CCC18;
	}
	return 0x821CCC18;
} // Block from 821CCBC0h-821CCC18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CCC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCC18);
		  /* 821CCC18h */ case    0:  		/* addi R3, R23, 24 */
		/* 821CCC18h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R23,0x18);
		/* 821CCC18h case    0:*/		return 0x821CCC1C;
		  /* 821CCC1Ch */ case    1:  		/* bl -339684 */
		/* 821CCC1Ch case    1:*/		regs.LR = 0x821CCC20; return 0x82179D38;
		/* 821CCC1Ch case    1:*/		return 0x821CCC20;
		  /* 821CCC20h */ case    2:  		/* lwz R11, <#[R21 + 48]> */
		/* 821CCC20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCC20h case    2:*/		return 0x821CCC24;
		  /* 821CCC24h */ case    3:  		/* lwz R10, <#[R23 + 48]> */
		/* 821CCC24h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCC24h case    3:*/		return 0x821CCC28;
		  /* 821CCC28h */ case    4:  		/* rlwinm R11, R11, 0, 6, 6 */
		/* 821CCC28h case    4:*/		cpu::op::rlwinm<0,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821CCC28h case    4:*/		return 0x821CCC2C;
		  /* 821CCC2Ch */ case    5:  		/* or R11, R11, R10 */
		/* 821CCC2Ch case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CCC2Ch case    5:*/		return 0x821CCC30;
		  /* 821CCC30h */ case    6:  		/* stw R11, <#[R23 + 48]> */
		/* 821CCC30h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCC30h case    6:*/		return 0x821CCC34;
		  /* 821CCC34h */ case    7:  		/* lwz R11, <#[R21 + 48]> */
		/* 821CCC34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCC34h case    7:*/		return 0x821CCC38;
		  /* 821CCC38h */ case    8:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 821CCC38h case    8:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821CCC38h case    8:*/		return 0x821CCC3C;
		  /* 821CCC3Ch */ case    9:  		/* bc 12, CR0_EQ, 124 */
		/* 821CCC3Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821CCCB8;  }
		/* 821CCC3Ch case    9:*/		return 0x821CCC40;
		  /* 821CCC40h */ case   10:  		/* mr R11, R21 */
		/* 821CCC40h case   10:*/		regs.R11 = regs.R21;
		/* 821CCC40h case   10:*/		return 0x821CCC44;
		  /* 821CCC44h */ case   11:  		/* lwz R10, <#[R11 + 48]> */
		/* 821CCC44h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821CCC44h case   11:*/		return 0x821CCC48;
		  /* 821CCC48h */ case   12:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821CCC48h case   12:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821CCC48h case   12:*/		return 0x821CCC4C;
		  /* 821CCC4Ch */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 821CCC4Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821CCC5C;  }
		/* 821CCC4Ch case   13:*/		return 0x821CCC50;
		  /* 821CCC50h */ case   14:  		/* lwz R11, <#[R11 + 52]> */
		/* 821CCC50h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821CCC50h case   14:*/		return 0x821CCC54;
		  /* 821CCC54h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821CCC54h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCC54h case   15:*/		return 0x821CCC58;
		  /* 821CCC58h */ case   16:  		/* bc 4, CR6_EQ, -20 */
		/* 821CCC58h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821CCC44;  }
		/* 821CCC58h case   16:*/		return 0x821CCC5C;
	}
	return 0x821CCC5C;
} // Block from 821CCC18h-821CCC5Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CCC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCC5C);
		  /* 821CCC5Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CCC5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCC5Ch case    0:*/		return 0x821CCC60;
		  /* 821CCC60h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821CCC60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CCC78;  }
		/* 821CCC60h case    1:*/		return 0x821CCC64;
		  /* 821CCC64h */ case    2:  		/* rlwinm R11, R21, 0, 0, 19 */
		/* 821CCC64h case    2:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R21);
		/* 821CCC64h case    2:*/		return 0x821CCC68;
		  /* 821CCC68h */ case    3:  		/* li R4, 4800 */
		/* 821CCC68h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821CCC68h case    3:*/		return 0x821CCC6C;
		  /* 821CCC6Ch */ case    4:  		/* lwz R11, <#[R11]> */
		/* 821CCC6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCC6Ch case    4:*/		return 0x821CCC70;
		  /* 821CCC70h */ case    5:  		/* lwz R3, <#[R11 + 148]> */
		/* 821CCC70h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821CCC70h case    5:*/		return 0x821CCC74;
		  /* 821CCC74h */ case    6:  		/* bl -503308 */
		/* 821CCC74h case    6:*/		regs.LR = 0x821CCC78; return 0x82151E68;
		/* 821CCC74h case    6:*/		return 0x821CCC78;
	}
	return 0x821CCC78;
} // Block from 821CCC5Ch-821CCC78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CCC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCC78);
		  /* 821CCC78h */ case    0:  		/* lwz R11, <#[R11 + 116]> */
		/* 821CCC78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000074) );
		/* 821CCC78h case    0:*/		return 0x821CCC7C;
		  /* 821CCC7Ch */ case    1:  		/* addi R11, R11, 16 */
		/* 821CCC7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821CCC7Ch case    1:*/		return 0x821CCC80;
		  /* 821CCC80h */ case    2:  		/* b 16 */
		/* 821CCC80h case    2:*/		return 0x821CCC90;
		/* 821CCC80h case    2:*/		return 0x821CCC84;
		  /* 821CCC84h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CCC84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCC84h case    3:*/		return 0x821CCC88;
		  /* 821CCC88h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821CCC88h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCC88h case    4:*/		return 0x821CCC8C;
		  /* 821CCC8Ch */ case    5:  		/* bc 12, CR6_EQ, 140 */
		/* 821CCC8Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CCD18;  }
		/* 821CCC8Ch case    5:*/		return 0x821CCC90;
	}
	return 0x821CCC90;
} // Block from 821CCC78h-821CCC90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CCC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCC90);
		  /* 821CCC90h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 821CCC90h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCC90h case    0:*/		return 0x821CCC94;
		  /* 821CCC94h */ case    1:  		/* cmplw CR6, R10, R21 */
		/* 821CCC94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821CCC94h case    1:*/		return 0x821CCC98;
		  /* 821CCC98h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821CCC98h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CCC84;  }
		/* 821CCC98h case    2:*/		return 0x821CCC9C;
		  /* 821CCC9Ch */ case    3:  		/* stw R23, <#[R11]> */
		/* 821CCC9Ch case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCC9Ch case    3:*/		return 0x821CCCA0;
		  /* 821CCCA0h */ case    4:  		/* lwz R11, <#[R23 + 48]> */
		/* 821CCCA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCCA0h case    4:*/		return 0x821CCCA4;
		  /* 821CCCA4h */ case    5:  		/* oris R11, R11, 16 */
		/* 821CCCA4h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821CCCA4h case    5:*/		return 0x821CCCA8;
		  /* 821CCCA8h */ case    6:  		/* stw R11, <#[R23 + 48]> */
		/* 821CCCA8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCCA8h case    6:*/		return 0x821CCCAC;
		  /* 821CCCACh */ case    7:  		/* lwz R11, <#[R21 + 48]> */
		/* 821CCCACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCCACh case    7:*/		return 0x821CCCB0;
		  /* 821CCCB0h */ case    8:  		/* rlwinm R11, R11, 0, 12, 10 */
		/* 821CCCB0h case    8:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R11,regs.R11);
		/* 821CCCB0h case    8:*/		return 0x821CCCB4;
		  /* 821CCCB4h */ case    9:  		/* stw R11, <#[R21 + 48]> */
		/* 821CCCB4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCCB4h case    9:*/		return 0x821CCCB8;
	}
	return 0x821CCCB8;
} // Block from 821CCC90h-821CCCB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CCCB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCCB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCCB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCCB8);
		  /* 821CCCB8h */ case    0:  		/* lwz R11, <#[R21 + 36]> */
		/* 821CCCB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821CCCB8h case    0:*/		return 0x821CCCBC;
		  /* 821CCCBCh */ case    1:  		/* addi R4, R21, 32 */
		/* 821CCCBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R21,0x20);
		/* 821CCCBCh case    1:*/		return 0x821CCCC0;
		  /* 821CCCC0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCCC0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCCC0h case    2:*/		return 0x821CCCC4;
		  /* 821CCCC4h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 821CCCC4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CCCEC;  }
		/* 821CCCC4h case    3:*/		return 0x821CCCC8;
	}
	return 0x821CCCC8;
} // Block from 821CCCB8h-821CCCC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CCCC8h
// Function '?RemoveIdenticalDependents@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCCC8);
		  /* 821CCCC8h */ case    0:  		/* cmplwi CR0, R11, 0 */
		/* 821CCCC8h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CCCC8h case    0:*/		return 0x821CCCCC;
		  /* 821CCCCCh */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 821CCCCCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CCCEC;  }
		/* 821CCCCCh case    1:*/		return 0x821CCCD0;
		  /* 821CCCD0h */ case    2:  		/* stw R23, <#[R11 + 28]> */
		/* 821CCCD0h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000001C) );
		/* 821CCCD0h case    2:*/		return 0x821CCCD4;
		  /* 821CCCD4h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CCCD4h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CCCD4h case    3:*/		return 0x821CCCD8;
		  /* 821CCCD8h */ case    4:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CCCD8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CCCD8h case    4:*/		return 0x821CCCDC;
		  /* 821CCCDCh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCCDCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCCDCh case    5:*/		return 0x821CCCE0;
		  /* 821CCCE0h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821CCCE0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CCCEC;  }
		/* 821CCCE0h case    6:*/		return 0x821CCCE4;
		  /* 821CCCE4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821CCCE4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCCE4h case    7:*/		return 0x821CCCE8;
		  /* 821CCCE8h */ case    8:  		/* bc 4, CR6_EQ, -24 */
		/* 821CCCE8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CCCD0;  }
		/* 821CCCE8h case    8:*/		return 0x821CCCEC;
	}
	return 0x821CCCEC;
} // Block from 821CCCC8h-821CCCECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CCCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCCEC);
		  /* 821CCCECh */ case    0:  		/* addi R3, R23, 32 */
		/* 821CCCECh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R23,0x20);
		/* 821CCCECh case    0:*/		return 0x821CCCF0;
		  /* 821CCCF0h */ case    1:  		/* bl -339896 */
		/* 821CCCF0h case    1:*/		regs.LR = 0x821CCCF4; return 0x82179D38;
		/* 821CCCF0h case    1:*/		return 0x821CCCF4;
		  /* 821CCCF4h */ case    2:  		/* lwz R31, <#[R21 + 12]> */
		/* 821CCCF4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x0000000C) );
		/* 821CCCF4h case    2:*/		return 0x821CCCF8;
		  /* 821CCCF8h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821CCCF8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CCCF8h case    3:*/		return 0x821CCCFC;
		  /* 821CCCFCh */ case    4:  		/* bc 12, CR6_EQ, 72 */
		/* 821CCCFCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821CCD44;  }
		/* 821CCCFCh case    4:*/		return 0x821CCD00;
		  /* 821CCD00h */ case    5:  		/* mr R5, R20 */
		/* 821CCD00h case    5:*/		regs.R5 = regs.R20;
		/* 821CCD00h case    5:*/		return 0x821CCD04;
		  /* 821CCD04h */ case    6:  		/* lwz R4, <#[R31]> */
		/* 821CCD04h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821CCD04h case    6:*/		return 0x821CCD08;
		  /* 821CCD08h */ case    7:  		/* mr R3, R23 */
		/* 821CCD08h case    7:*/		regs.R3 = regs.R23;
		/* 821CCD08h case    7:*/		return 0x821CCD0C;
		  /* 821CCD0Ch */ case    8:  		/* bl 404948 */
		/* 821CCD0Ch case    8:*/		regs.LR = 0x821CCD10; return 0x8222FAE0;
		/* 821CCD0Ch case    8:*/		return 0x821CCD10;
		  /* 821CCD10h */ case    9:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CCD10h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CCD10h case    9:*/		return 0x821CCD14;
		  /* 821CCD14h */ case   10:  		/* b -28 */
		/* 821CCD14h case   10:*/		return 0x821CCCF8;
		/* 821CCD14h case   10:*/		return 0x821CCD18;
	}
	return 0x821CCD18;
} // Block from 821CCCECh-821CCD18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CCD18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCD18);
		  /* 821CCD18h */ case    0:  		/* li R4, 4800 */
		/* 821CCD18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821CCD18h case    0:*/		return 0x821CCD1C;
		  /* 821CCD1Ch */ case    1:  		/* mr R3, R20 */
		/* 821CCD1Ch case    1:*/		regs.R3 = regs.R20;
		/* 821CCD1Ch case    1:*/		return 0x821CCD20;
		  /* 821CCD20h */ case    2:  		/* bl -503480 */
		/* 821CCD20h case    2:*/		regs.LR = 0x821CCD24; return 0x82151E68;
		/* 821CCD20h case    2:*/		return 0x821CCD24;
		  /* 821CCD24h */ case    3:  		/* lwz R11, <#[R21 + 12]> */
		/* 821CCD24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821CCD24h case    3:*/		return 0x821CCD28;
		  /* 821CCD28h */ case    4:  		/* li R4, 0 */
		/* 821CCD28h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CCD28h case    4:*/		return 0x821CCD2C;
		  /* 821CCD2Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CCD2Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCD2Ch case    5:*/		return 0x821CCD30;
		  /* 821CCD30h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821CCD30h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CCD38;  }
		/* 821CCD30h case    6:*/		return 0x821CCD34;
		  /* 821CCD34h */ case    7:  		/* lwz R4, <#[R11]> */
		/* 821CCD34h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCD34h case    7:*/		return 0x821CCD38;
	}
	return 0x821CCD38;
} // Block from 821CCD18h-821CCD38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CCD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCD38);
		  /* 821CCD38h */ case    0:  		/* mr R5, R20 */
		/* 821CCD38h case    0:*/		regs.R5 = regs.R20;
		/* 821CCD38h case    0:*/		return 0x821CCD3C;
		  /* 821CCD3Ch */ case    1:  		/* mr R3, R21 */
		/* 821CCD3Ch case    1:*/		regs.R3 = regs.R21;
		/* 821CCD3Ch case    1:*/		return 0x821CCD40;
		  /* 821CCD40h */ case    2:  		/* bl 404520 */
		/* 821CCD40h case    2:*/		regs.LR = 0x821CCD44; return 0x8222F968;
		/* 821CCD40h case    2:*/		return 0x821CCD44;
	}
	return 0x821CCD44;
} // Block from 821CCD38h-821CCD44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CCD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCD44);
		  /* 821CCD44h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 821CCD44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821CCD44h case    0:*/		return 0x821CCD48;
		  /* 821CCD48h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821CCD48h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CCD48h case    1:*/		return 0x821CCD4C;
		  /* 821CCD4Ch */ case    2:  		/* bc 4, CR6_EQ, -40 */
		/* 821CCD4Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CCD24;  }
		/* 821CCD4Ch case    2:*/		return 0x821CCD50;
		  /* 821CCD50h */ case    3:  		/* mr R5, R20 */
		/* 821CCD50h case    3:*/		regs.R5 = regs.R20;
		/* 821CCD50h case    3:*/		return 0x821CCD54;
		  /* 821CCD54h */ case    4:  		/* mr R4, R21 */
		/* 821CCD54h case    4:*/		regs.R4 = regs.R21;
		/* 821CCD54h case    4:*/		return 0x821CCD58;
		  /* 821CCD58h */ case    5:  		/* mr R3, R23 */
		/* 821CCD58h case    5:*/		regs.R3 = regs.R23;
		/* 821CCD58h case    5:*/		return 0x821CCD5C;
		  /* 821CCD5Ch */ case    6:  		/* bl 404492 */
		/* 821CCD5Ch case    6:*/		regs.LR = 0x821CCD60; return 0x8222F968;
		/* 821CCD5Ch case    6:*/		return 0x821CCD60;
		  /* 821CCD60h */ case    7:  		/* lwz R11, <#[R21 + 48]> */
		/* 821CCD60h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCD60h case    7:*/		return 0x821CCD64;
		  /* 821CCD64h */ case    8:  		/* lwz R10, <#[R23 + 48]> */
		/* 821CCD64h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCD64h case    8:*/		return 0x821CCD68;
		  /* 821CCD68h */ case    9:  		/* lwz R9, <#[R23 + 68]> */
		/* 821CCD68h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000044) );
		/* 821CCD68h case    9:*/		return 0x821CCD6C;
		  /* 821CCD6Ch */ case   10:  		/* rlwimi R11, R10, 0, 6, 4 */
		/* 821CCD6Ch case   10:*/		cpu::op::rlwimi<0,0,6,4>(regs,&regs.R11,regs.R10);
		/* 821CCD6Ch case   10:*/		return 0x821CCD70;
		  /* 821CCD70h */ case   11:  		/* stw R11, <#[R23 + 48]> */
		/* 821CCD70h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCD70h case   11:*/		return 0x821CCD74;
		  /* 821CCD74h */ case   12:  		/* lwz R10, <#[R21 + 48]> */
		/* 821CCD74h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCD74h case   12:*/		return 0x821CCD78;
		  /* 821CCD78h */ case   13:  		/* rlwimi R10, R11, 0, 5, 3 */
		/* 821CCD78h case   13:*/		cpu::op::rlwimi<0,0,5,3>(regs,&regs.R10,regs.R11);
		/* 821CCD78h case   13:*/		return 0x821CCD7C;
		  /* 821CCD7Ch */ case   14:  		/* stw R10, <#[R23 + 48]> */
		/* 821CCD7Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821CCD7Ch case   14:*/		return 0x821CCD80;
		  /* 821CCD80h */ case   15:  		/* lwz R11, <#[R21 + 68]> */
		/* 821CCD80h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000044) );
		/* 821CCD80h case   15:*/		return 0x821CCD84;
		  /* 821CCD84h */ case   16:  		/* rlwinm R11, R11, 0, 0, 0 */
		/* 821CCD84h case   16:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821CCD84h case   16:*/		return 0x821CCD88;
		  /* 821CCD88h */ case   17:  		/* or R11, R11, R9 */
		/* 821CCD88h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CCD88h case   17:*/		return 0x821CCD8C;
		  /* 821CCD8Ch */ case   18:  		/* rlwinm R10, R11, 0, 4, 31 */
		/* 821CCD8Ch case   18:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R10,regs.R11);
		/* 821CCD8Ch case   18:*/		return 0x821CCD90;
		  /* 821CCD90h */ case   19:  		/* stw R11, <#[R23 + 68]> */
		/* 821CCD90h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000044) );
		/* 821CCD90h case   19:*/		return 0x821CCD94;
		  /* 821CCD94h */ case   20:  		/* lwz R11, <#[R21 + 68]> */
		/* 821CCD94h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000044) );
		/* 821CCD94h case   20:*/		return 0x821CCD98;
		  /* 821CCD98h */ case   21:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821CCD98h case   21:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821CCD98h case   21:*/		return 0x821CCD9C;
		  /* 821CCD9Ch */ case   22:  		/* cmplw CR6, R10, R11 */
		/* 821CCD9Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CCD9Ch case   22:*/		return 0x821CCDA0;
		  /* 821CCDA0h */ case   23:  		/* bc 4, CR6_GT, 12 */
		/* 821CCDA0h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821CCDAC;  }
		/* 821CCDA0h case   23:*/		return 0x821CCDA4;
		  /* 821CCDA4h */ case   24:  		/* lwz R11, <#[R23 + 68]> */
		/* 821CCDA4h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000044) );
		/* 821CCDA4h case   24:*/		return 0x821CCDA8;
		  /* 821CCDA8h */ case   25:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821CCDA8h case   25:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821CCDA8h case   25:*/		return 0x821CCDAC;
	}
	return 0x821CCDAC;
} // Block from 821CCD44h-821CCDACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 821CCDACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCDAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCDAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCDAC);
		  /* 821CCDACh */ case    0:  		/* lwz R10, <#[R23 + 68]> */
		/* 821CCDACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000044) );
		/* 821CCDACh case    0:*/		return 0x821CCDB0;
		  /* 821CCDB0h */ case    1:  		/* rlwinm R9, R21, 0, 0, 30 */
		/* 821CCDB0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R21);
		/* 821CCDB0h case    1:*/		return 0x821CCDB4;
		  /* 821CCDB4h */ case    2:  		/* li R3, 1 */
		/* 821CCDB4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821CCDB4h case    2:*/		return 0x821CCDB8;
		  /* 821CCDB8h */ case    3:  		/* rlwimi R10, R11, 0, 4, 31 */
		/* 821CCDB8h case    3:*/		cpu::op::rlwimi<0,0,4,31>(regs,&regs.R10,regs.R11);
		/* 821CCDB8h case    3:*/		return 0x821CCDBC;
		  /* 821CCDBCh */ case    4:  		/* stw R10, <#[R23 + 68]> */
		/* 821CCDBCh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000044) );
		/* 821CCDBCh case    4:*/		return 0x821CCDC0;
		  /* 821CCDC0h */ case    5:  		/* lwz R11, <#[R9]> */
		/* 821CCDC0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821CCDC0h case    5:*/		return 0x821CCDC4;
		  /* 821CCDC4h */ case    6:  		/* lwz R10, <#[R9 + 4]> */
		/* 821CCDC4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821CCDC4h case    6:*/		return 0x821CCDC8;
		  /* 821CCDC8h */ case    7:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CCDC8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CCDC8h case    7:*/		return 0x821CCDCC;
		  /* 821CCDCCh */ case    8:  		/* stw R11, <#[R10]> */
		/* 821CCDCCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CCDCCh case    8:*/		return 0x821CCDD0;
		  /* 821CCDD0h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821CCDD0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821CCDD0h case    9:*/		return 0x821CCDD4;
		  /* 821CCDD4h */ case   10:  		/* lwz R10, <#[R9]> */
		/* 821CCDD4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821CCDD4h case   10:*/		return 0x821CCDD8;
		  /* 821CCDD8h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CCDD8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CCDD8h case   11:*/		return 0x821CCDDC;
		  /* 821CCDDCh */ case   12:  		/* stw R11, <#[R10]> */
		/* 821CCDDCh case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CCDDCh case   12:*/		return 0x821CCDE0;
		  /* 821CCDE0h */ case   13:  		/* lwz R11, <#[R21 + 48]> */
		/* 821CCDE0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCDE0h case   13:*/		return 0x821CCDE4;
		  /* 821CCDE4h */ case   14:  		/* oris R11, R11, 64 */
		/* 821CCDE4h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821CCDE4h case   14:*/		return 0x821CCDE8;
		  /* 821CCDE8h */ case   15:  		/* stw R23, <#[R21 + 80]> */
		/* 821CCDE8h case   15:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R21 + 0x00000050) );
		/* 821CCDE8h case   15:*/		return 0x821CCDEC;
		  /* 821CCDECh */ case   16:  		/* stw R11, <#[R21 + 48]> */
		/* 821CCDECh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821CCDECh case   16:*/		return 0x821CCDF0;
		  /* 821CCDF0h */ case   17:  		/* b -1708 */
		/* 821CCDF0h case   17:*/		return 0x821CC744;
		/* 821CCDF0h case   17:*/		return 0x821CCDF4;
		  /* 821CCDF4h */ case   18:  		/* nop */
		/* 821CCDF4h case   18:*/		cpu::op::nop();
		/* 821CCDF4h case   18:*/		return 0x821CCDF8;
	}
	return 0x821CCDF8;
} // Block from 821CCDACh-821CCDF8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CCDF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCDF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCDF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCDF8);
		  /* 821CCDF8h */ case    0:  		/* mfspr R12, LR */
		/* 821CCDF8h case    0:*/		regs.R12 = regs.LR;
		/* 821CCDF8h case    0:*/		return 0x821CCDFC;
		  /* 821CCDFCh */ case    1:  		/* bl -1293232 */
		/* 821CCDFCh case    1:*/		regs.LR = 0x821CCE00; return 0x8209124C;
		/* 821CCDFCh case    1:*/		return 0x821CCE00;
		  /* 821CCE00h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CCE00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CCE00h case    2:*/		return 0x821CCE04;
		  /* 821CCE04h */ case    3:  		/* mr R31, R4 */
		/* 821CCE04h case    3:*/		regs.R31 = regs.R4;
		/* 821CCE04h case    3:*/		return 0x821CCE08;
		  /* 821CCE08h */ case    4:  		/* mr R4, R5 */
		/* 821CCE08h case    4:*/		regs.R4 = regs.R5;
		/* 821CCE08h case    4:*/		return 0x821CCE0C;
		  /* 821CCE0Ch */ case    5:  		/* mr R28, R3 */
		/* 821CCE0Ch case    5:*/		regs.R28 = regs.R3;
		/* 821CCE0Ch case    5:*/		return 0x821CCE10;
		  /* 821CCE10h */ case    6:  		/* bl -56280 */
		/* 821CCE10h case    6:*/		regs.LR = 0x821CCE14; return 0x821BF238;
		/* 821CCE10h case    6:*/		return 0x821CCE14;
		  /* 821CCE14h */ case    7:  		/* mr R25, R3 */
		/* 821CCE14h case    7:*/		regs.R25 = regs.R3;
		/* 821CCE14h case    7:*/		return 0x821CCE18;
		  /* 821CCE18h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CCE18h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CCE18h case    8:*/		return 0x821CCE1C;
		  /* 821CCE1Ch */ case    9:  		/* bc 12, CR0_EQ, 500 */
		/* 821CCE1Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821CD010;  }
		/* 821CCE1Ch case    9:*/		return 0x821CCE20;
		  /* 821CCE20h */ case   10:  		/* li R5, 38 */
		/* 821CCE20h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821CCE20h case   10:*/		return 0x821CCE24;
		  /* 821CCE24h */ case   11:  		/* li R4, 8 */
		/* 821CCE24h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CCE24h case   11:*/		return 0x821CCE28;
		  /* 821CCE28h */ case   12:  		/* mr R3, R28 */
		/* 821CCE28h case   12:*/		regs.R3 = regs.R28;
		/* 821CCE28h case   12:*/		return 0x821CCE2C;
		  /* 821CCE2Ch */ case   13:  		/* bl -427324 */
		/* 821CCE2Ch case   13:*/		regs.LR = 0x821CCE30; return 0x821648F0;
		/* 821CCE2Ch case   13:*/		return 0x821CCE30;
		  /* 821CCE30h */ case   14:  		/* addi R26, R3, 4 */
		/* 821CCE30h case   14:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 821CCE30h case   14:*/		return 0x821CCE34;
		  /* 821CCE34h */ case   15:  		/* ori R11, R3, 1 */
		/* 821CCE34h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CCE34h case   15:*/		return 0x821CCE38;
		  /* 821CCE38h */ case   16:  		/* ori R10, R26, 1 */
		/* 821CCE38h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R26,0x1);
		/* 821CCE38h case   16:*/		return 0x821CCE3C;
		  /* 821CCE3Ch */ case   17:  		/* mr R30, R3 */
		/* 821CCE3Ch case   17:*/		regs.R30 = regs.R3;
		/* 821CCE3Ch case   17:*/		return 0x821CCE40;
		  /* 821CCE40h */ case   18:  		/* stw R11, <#[R3 + 4]> */
		/* 821CCE40h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CCE40h case   18:*/		return 0x821CCE44;
		  /* 821CCE44h */ case   19:  		/* stw R10, <#[R3]> */
		/* 821CCE44h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CCE44h case   19:*/		return 0x821CCE48;
		  /* 821CCE48h */ case   20:  		/* mr R4, R31 */
		/* 821CCE48h case   20:*/		regs.R4 = regs.R31;
		/* 821CCE48h case   20:*/		return 0x821CCE4C;
		  /* 821CCE4Ch */ case   21:  		/* mr R3, R28 */
		/* 821CCE4Ch case   21:*/		regs.R3 = regs.R28;
		/* 821CCE4Ch case   21:*/		return 0x821CCE50;
		  /* 821CCE50h */ case   22:  		/* bl -61648 */
		/* 821CCE50h case   22:*/		regs.LR = 0x821CCE54; return 0x821BDD80;
		/* 821CCE50h case   22:*/		return 0x821CCE54;
		  /* 821CCE54h */ case   23:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CCE54h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CCE54h case   23:*/		return 0x821CCE58;
		  /* 821CCE58h */ case   24:  		/* mr R3, R28 */
		/* 821CCE58h case   24:*/		regs.R3 = regs.R28;
		/* 821CCE58h case   24:*/		return 0x821CCE5C;
		  /* 821CCE5Ch */ case   25:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CCE5Ch case   25:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CCE5Ch case   25:*/		return 0x821CCE60;
		  /* 821CCE60h */ case   26:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CCE60h case   26:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CCE60h case   26:*/		return 0x821CCE64;
		  /* 821CCE64h */ case   27:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821CCE64h case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821CCE64h case   27:*/		return 0x821CCE68;
		  /* 821CCE68h */ case   28:  		/* bl -428600 */
		/* 821CCE68h case   28:*/		regs.LR = 0x821CCE6C; return 0x82164430;
		/* 821CCE68h case   28:*/		return 0x821CCE6C;
		  /* 821CCE6Ch */ case   29:  		/* addi R10, R31, -16 */
		/* 821CCE6Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF0);
		/* 821CCE6Ch case   29:*/		return 0x821CCE70;
		  /* 821CCE70h */ case   30:  		/* lwz R11, <#[R28 + 4]> */
		/* 821CCE70h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821CCE70h case   30:*/		return 0x821CCE74;
		  /* 821CCE74h */ case   31:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821CCE74h case   31:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CCE74h case   31:*/		return 0x821CCE78;
		  /* 821CCE78h */ case   32:  		/* lwzx R27, <#[R3 + R10]> */
		/* 821CCE78h case   32:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821CCE78h case   32:*/		return 0x821CCE7C;
		  /* 821CCE7Ch */ case   33:  		/* bc 4, CR0_EQ, 268 */
		/* 821CCE7Ch case   33:*/		if ( !regs.CR[0].eq ) { return 0x821CCF88;  }
		/* 821CCE7Ch case   33:*/		return 0x821CCE80;
		  /* 821CCE80h */ case   34:  		/* mr R29, R11 */
		/* 821CCE80h case   34:*/		regs.R29 = regs.R11;
		/* 821CCE80h case   34:*/		return 0x821CCE84;
		  /* 821CCE84h */ case   35:  		/* cmplwi CR0, R11, 0 */
		/* 821CCE84h case   35:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CCE84h case   35:*/		return 0x821CCE88;
		  /* 821CCE88h */ case   36:  		/* bc 12, CR0_EQ, 256 */
		/* 821CCE88h case   36:*/		if ( regs.CR[0].eq ) { return 0x821CCF88;  }
		/* 821CCE88h case   36:*/		return 0x821CCE8C;
		  /* 821CCE8Ch */ case   37:  		/* lwz R11, <#[R27 + 48]> */
		/* 821CCE8Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821CCE8Ch case   37:*/		return 0x821CCE90;
		  /* 821CCE90h */ case   38:  		/* li R10, 1 */
		/* 821CCE90h case   38:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821CCE90h case   38:*/		return 0x821CCE94;
		  /* 821CCE94h */ case   39:  		/* lwz R9, <#[R29 + 40]> */
		/* 821CCE94h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000028) );
		/* 821CCE94h case   39:*/		return 0x821CCE98;
		  /* 821CCE98h */ case   40:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821CCE98h case   40:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821CCE98h case   40:*/		return 0x821CCE9C;
		  /* 821CCE9Ch */ case   41:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821CCE9Ch case   41:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821CCE9Ch case   41:*/		return 0x821CCEA0;
		  /* 821CCEA0h */ case   42:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821CCEA0h case   42:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821CCEA0h case   42:*/		return 0x821CCEA4;
		  /* 821CCEA4h */ case   43:  		/* addi R11, R11, 1 */
		/* 821CCEA4h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CCEA4h case   43:*/		return 0x821CCEA8;
		  /* 821CCEA8h */ case   44:  		/* slw R10, R10, R8 */
		/* 821CCEA8h case   44:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821CCEA8h case   44:*/		return 0x821CCEAC;
		  /* 821CCEACh */ case   45:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CCEACh case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CCEACh case   45:*/		return 0x821CCEB0;
		  /* 821CCEB0h */ case   46:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821CCEB0h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821CCEB0h case   46:*/		return 0x821CCEB4;
		  /* 821CCEB4h */ case   47:  		/* and. R11, R11, R10 */
		/* 821CCEB4h case   47:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CCEB4h case   47:*/		return 0x821CCEB8;
		  /* 821CCEB8h */ case   48:  		/* bc 12, CR0_EQ, 180 */
		/* 821CCEB8h case   48:*/		if ( regs.CR[0].eq ) { return 0x821CCF6C;  }
		/* 821CCEB8h case   48:*/		return 0x821CCEBC;
		  /* 821CCEBCh */ case   49:  		/* lwz R11, <#[R29 + 36]> */
		/* 821CCEBCh case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821CCEBCh case   49:*/		return 0x821CCEC0;
		  /* 821CCEC0h */ case   50:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCEC0h case   50:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCEC0h case   50:*/		return 0x821CCEC4;
		  /* 821CCEC4h */ case   51:  		/* bc 4, CR0_EQ, 168 */
		/* 821CCEC4h case   51:*/		if ( !regs.CR[0].eq ) { return 0x821CCF6C;  }
		/* 821CCEC4h case   51:*/		return 0x821CCEC8;
		  /* 821CCEC8h */ case   52:  		/* mr R31, R11 */
		/* 821CCEC8h case   52:*/		regs.R31 = regs.R11;
		/* 821CCEC8h case   52:*/		return 0x821CCECC;
		  /* 821CCECCh */ case   53:  		/* cmplwi CR0, R11, 0 */
		/* 821CCECCh case   53:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CCECCh case   53:*/		return 0x821CCED0;
		  /* 821CCED0h */ case   54:  		/* bc 12, CR0_EQ, 156 */
		/* 821CCED0h case   54:*/		if ( regs.CR[0].eq ) { return 0x821CCF6C;  }
		/* 821CCED0h case   54:*/		return 0x821CCED4;
		  /* 821CCED4h */ case   55:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CCED4h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CCED4h case   55:*/		return 0x821CCED8;
		  /* 821CCED8h */ case   56:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821CCED8h case   56:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821CCED8h case   56:*/		return 0x821CCEDC;
		  /* 821CCEDCh */ case   57:  		/* cmplwi CR6, R11, 86 */
		/* 821CCEDCh case   57:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821CCEDCh case   57:*/		return 0x821CCEE0;
		  /* 821CCEE0h */ case   58:  		/* bc 12, CR6_EQ, 16 */
		/* 821CCEE0h case   58:*/		if ( regs.CR[6].eq ) { return 0x821CCEF0;  }
		/* 821CCEE0h case   58:*/		return 0x821CCEE4;
		  /* 821CCEE4h */ case   59:  		/* cmplwi CR6, R11, 87 */
		/* 821CCEE4h case   59:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821CCEE4h case   59:*/		return 0x821CCEE8;
		  /* 821CCEE8h */ case   60:  		/* li R11, 0 */
		/* 821CCEE8h case   60:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CCEE8h case   60:*/		return 0x821CCEEC;
		  /* 821CCEECh */ case   61:  		/* bc 4, CR6_EQ, 8 */
		/* 821CCEECh case   61:*/		if ( !regs.CR[6].eq ) { return 0x821CCEF4;  }
		/* 821CCEECh case   61:*/		return 0x821CCEF0;
	}
	return 0x821CCEF0;
} // Block from 821CCDF8h-821CCEF0h (62 instructions)

//////////////////////////////////////////////////////
// Block at 821CCEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCEF0);
		  /* 821CCEF0h */ case    0:  		/* li R11, 1 */
		/* 821CCEF0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CCEF0h case    0:*/		return 0x821CCEF4;
	}
	return 0x821CCEF4;
} // Block from 821CCEF0h-821CCEF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CCEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCEF4);
		  /* 821CCEF4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CCEF4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CCEF4h case    0:*/		return 0x821CCEF8;
		  /* 821CCEF8h */ case    1:  		/* bc 12, CR0_EQ, 88 */
		/* 821CCEF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CCF50;  }
		/* 821CCEF8h case    1:*/		return 0x821CCEFC;
		  /* 821CCEFCh */ case    2:  		/* lwz R11, <#[R26]> */
		/* 821CCEFCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821CCEFCh case    2:*/		return 0x821CCF00;
		  /* 821CCF00h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CCF00h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CCF00h case    3:*/		return 0x821CCF04;
		  /* 821CCF04h */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 821CCF04h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CCF2C;  }
		/* 821CCF04h case    4:*/		return 0x821CCF08;
		  /* 821CCF08h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 821CCF08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CCF08h case    5:*/		return 0x821CCF0C;
		  /* 821CCF0Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CCF0Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CCF0Ch case    6:*/		return 0x821CCF10;
		  /* 821CCF10h */ case    7:  		/* addic. R3, R11, -4 */
		/* 821CCF10h case    7:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CCF10h case    7:*/		return 0x821CCF14;
		  /* 821CCF14h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821CCF14h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CCF2C;  }
		/* 821CCF14h case    8:*/		return 0x821CCF18;
		  /* 821CCF18h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CCF18h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CCF18h case    9:*/		return 0x821CCF1C;
		  /* 821CCF1Ch */ case   10:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CCF1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CCF1Ch case   10:*/		return 0x821CCF20;
		  /* 821CCF20h */ case   11:  		/* addi R11, R11, 1 */
		/* 821CCF20h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CCF20h case   11:*/		return 0x821CCF24;
		  /* 821CCF24h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821CCF24h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CCF24h case   12:*/		return 0x821CCF28;
		  /* 821CCF28h */ case   13:  		/* bc 4, CR6_GT, 16 */
		/* 821CCF28h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821CCF38;  }
		/* 821CCF28h case   13:*/		return 0x821CCF2C;
	}
	return 0x821CCF2C;
} // Block from 821CCEF4h-821CCF2Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CCF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCF2C);
		  /* 821CCF2Ch */ case    0:  		/* li R4, 1 */
		/* 821CCF2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CCF2Ch case    0:*/		return 0x821CCF30;
		  /* 821CCF30h */ case    1:  		/* mr R3, R30 */
		/* 821CCF30h case    1:*/		regs.R3 = regs.R30;
		/* 821CCF30h case    1:*/		return 0x821CCF34;
		  /* 821CCF34h */ case    2:  		/* bl -261740 */
		/* 821CCF34h case    2:*/		regs.LR = 0x821CCF38; return 0x8218D0C8;
		/* 821CCF34h case    2:*/		return 0x821CCF38;
	}
	return 0x821CCF38;
} // Block from 821CCF2Ch-821CCF38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CCF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCF38);
		  /* 821CCF38h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CCF38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CCF38h case    0:*/		return 0x821CCF3C;
		  /* 821CCF3Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821CCF3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CCF3Ch case    1:*/		return 0x821CCF40;
		  /* 821CCF40h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CCF40h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CCF40h case    2:*/		return 0x821CCF44;
		  /* 821CCF44h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CCF44h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CCF44h case    3:*/		return 0x821CCF48;
		  /* 821CCF48h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CCF48h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CCF48h case    4:*/		return 0x821CCF4C;
		  /* 821CCF4Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821CCF4Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CCF4Ch case    5:*/		return 0x821CCF50;
	}
	return 0x821CCF50;
} // Block from 821CCF38h-821CCF50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CCF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCF50);
		  /* 821CCF50h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821CCF50h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821CCF50h case    0:*/		return 0x821CCF54;
		  /* 821CCF54h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CCF54h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CCF54h case    1:*/		return 0x821CCF58;
		  /* 821CCF58h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCF58h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCF58h case    2:*/		return 0x821CCF5C;
		  /* 821CCF5Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CCF5Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CCF6C;  }
		/* 821CCF5Ch case    3:*/		return 0x821CCF60;
		  /* 821CCF60h */ case    4:  		/* mr R31, R11 */
		/* 821CCF60h case    4:*/		regs.R31 = regs.R11;
		/* 821CCF60h case    4:*/		return 0x821CCF64;
		  /* 821CCF64h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CCF64h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCF64h case    5:*/		return 0x821CCF68;
		  /* 821CCF68h */ case    6:  		/* bc 4, CR6_EQ, -148 */
		/* 821CCF68h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CCED4;  }
		/* 821CCF68h case    6:*/		return 0x821CCF6C;
	}
	return 0x821CCF6C;
} // Block from 821CCF50h-821CCF6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CCF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCF6C);
		  /* 821CCF6Ch */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821CCF6Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821CCF6Ch case    0:*/		return 0x821CCF70;
		  /* 821CCF70h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CCF70h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCF70h case    1:*/		return 0x821CCF74;
		  /* 821CCF74h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCF74h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCF74h case    2:*/		return 0x821CCF78;
		  /* 821CCF78h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CCF78h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CCF88;  }
		/* 821CCF78h case    3:*/		return 0x821CCF7C;
		  /* 821CCF7Ch */ case    4:  		/* mr R29, R11 */
		/* 821CCF7Ch case    4:*/		regs.R29 = regs.R11;
		/* 821CCF7Ch case    4:*/		return 0x821CCF80;
		  /* 821CCF80h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CCF80h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CCF80h case    5:*/		return 0x821CCF84;
		  /* 821CCF84h */ case    6:  		/* bc 4, CR6_EQ, -248 */
		/* 821CCF84h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CCE8C;  }
		/* 821CCF84h case    6:*/		return 0x821CCF88;
	}
	return 0x821CCF88;
} // Block from 821CCF6Ch-821CCF88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CCF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CCF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CCF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CCF88);
		  /* 821CCF88h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821CCF88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821CCF88h case    0:*/		return 0x821CCF8C;
		  /* 821CCF8Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CCF8Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CCF8Ch case    1:*/		return 0x821CCF90;
		  /* 821CCF90h */ case    2:  		/* bc 4, CR0_EQ, 112 */
		/* 821CCF90h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD000;  }
		/* 821CCF90h case    2:*/		return 0x821CCF94;
		  /* 821CCF94h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821CCF94h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CCF94h case    3:*/		return 0x821CCF98;
		  /* 821CCF98h */ case    4:  		/* bc 12, CR0_EQ, 104 */
		/* 821CCF98h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CD000;  }
		/* 821CCF98h case    4:*/		return 0x821CCF9C;
		  /* 821CCF9Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 821CCF9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CCF9Ch case    5:*/		return 0x821CCFA0;
		  /* 821CCFA0h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CCFA0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CCFA0h case    6:*/		return 0x821CCFA4;
		  /* 821CCFA4h */ case    7:  		/* addi R4, R11, -4 */
		/* 821CCFA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CCFA4h case    7:*/		return 0x821CCFA8;
		  /* 821CCFA8h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CCFA8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCFA8h case    8:*/		return 0x821CCFAC;
		  /* 821CCFACh */ case    9:  		/* addi R10, R11, 3 */
		/* 821CCFACh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CCFACh case    9:*/		return 0x821CCFB0;
		  /* 821CCFB0h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821CCFB0h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CCFB0h case   10:*/		return 0x821CCFB4;
		  /* 821CCFB4h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CCFB4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CCFB4h case   11:*/		return 0x821CCFB8;
		  /* 821CCFB8h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821CCFB8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CCFB8h case   12:*/		return 0x821CCFBC;
		  /* 821CCFBCh */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821CCFBCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CCFBCh case   13:*/		return 0x821CCFC0;
		  /* 821CCFC0h */ case   14:  		/* bc 4, CR0_EQ, -376 */
		/* 821CCFC0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821CCE48;  }
		/* 821CCFC0h case   14:*/		return 0x821CCFC4;
		  /* 821CCFC4h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CCFC4h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CCFC4h case   15:*/		return 0x821CCFC8;
		  /* 821CCFC8h */ case   16:  		/* mr R3, R30 */
		/* 821CCFC8h case   16:*/		regs.R3 = regs.R30;
		/* 821CCFC8h case   16:*/		return 0x821CCFCC;
		  /* 821CCFCCh */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CCFCCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCFCCh case   17:*/		return 0x821CCFD0;
		  /* 821CCFD0h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821CCFD0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCFD0h case   18:*/		return 0x821CCFD4;
		  /* 821CCFD4h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CCFD4h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CCFD4h case   19:*/		return 0x821CCFD8;
		  /* 821CCFD8h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821CCFD8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CCFD8h case   20:*/		return 0x821CCFDC;
		  /* 821CCFDCh */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CCFDCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CCFDCh case   21:*/		return 0x821CCFE0;
		  /* 821CCFE0h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821CCFE0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCFE0h case   22:*/		return 0x821CCFE4;
		  /* 821CCFE4h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CCFE4h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CCFE4h case   23:*/		return 0x821CCFE8;
		  /* 821CCFE8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821CCFE8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CCFE8h case   24:*/		return 0x821CCFEC;
		  /* 821CCFECh */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CCFECh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CCFECh case   25:*/		return 0x821CCFF0;
		  /* 821CCFF0h */ case   26:  		/* addi R11, R11, 4 */
		/* 821CCFF0h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CCFF0h case   26:*/		return 0x821CCFF4;
		  /* 821CCFF4h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CCFF4h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CCFF4h case   27:*/		return 0x821CCFF8;
		  /* 821CCFF8h */ case   28:  		/* bl -504304 */
		/* 821CCFF8h case   28:*/		regs.LR = 0x821CCFFC; return 0x82151E08;
		/* 821CCFF8h case   28:*/		return 0x821CCFFC;
		  /* 821CCFFCh */ case   29:  		/* b -436 */
		/* 821CCFFCh case   29:*/		return 0x821CCE48;
		/* 821CCFFCh case   29:*/		return 0x821CD000;
	}
	return 0x821CD000;
} // Block from 821CCF88h-821CD000h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CD000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD000);
		  /* 821CD000h */ case    0:  		/* lwz R10, <#[R28 + 976]> */
		/* 821CD000h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CD000h case    0:*/		return 0x821CD004;
		  /* 821CD004h */ case    1:  		/* addi R11, R28, 972 */
		/* 821CD004h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 821CD004h case    1:*/		return 0x821CD008;
		  /* 821CD008h */ case    2:  		/* stw R10, <#[R30]> */
		/* 821CD008h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821CD008h case    2:*/		return 0x821CD00C;
		  /* 821CD00Ch */ case    3:  		/* stw R30, <#[R28 + 976]> */
		/* 821CD00Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CD00Ch case    3:*/		return 0x821CD010;
	}
	return 0x821CD010;
} // Block from 821CD000h-821CD010h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CD010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD010);
		  /* 821CD010h */ case    0:  		/* mr R3, R25 */
		/* 821CD010h case    0:*/		regs.R3 = regs.R25;
		/* 821CD010h case    0:*/		return 0x821CD014;
		  /* 821CD014h */ case    1:  		/* addi R1, R1, 144 */
		/* 821CD014h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CD014h case    1:*/		return 0x821CD018;
		  /* 821CD018h */ case    2:  		/* b -1293692 */
		/* 821CD018h case    2:*/		return 0x8209129C;
		/* 821CD018h case    2:*/		return 0x821CD01C;
		  /* 821CD01Ch */ case    3:  		/* nop */
		/* 821CD01Ch case    3:*/		cpu::op::nop();
		/* 821CD01Ch case    3:*/		return 0x821CD020;
	}
	return 0x821CD020;
} // Block from 821CD010h-821CD020h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CD020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD020);
		  /* 821CD020h */ case    0:  		/* mfspr R12, LR */
		/* 821CD020h case    0:*/		regs.R12 = regs.LR;
		/* 821CD020h case    0:*/		return 0x821CD024;
		  /* 821CD024h */ case    1:  		/* bl -1293800 */
		/* 821CD024h case    1:*/		regs.LR = 0x821CD028; return 0x8209123C;
		/* 821CD024h case    1:*/		return 0x821CD028;
		  /* 821CD028h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821CD028h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821CD028h case    2:*/		return 0x821CD02C;
		  /* 821CD02Ch */ case    3:  		/* lwz R22, <#[R4 + 28]> */
		/* 821CD02Ch case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R4 + 0x0000001C) );
		/* 821CD02Ch case    3:*/		return 0x821CD030;
		  /* 821CD030h */ case    4:  		/* mr R23, R3 */
		/* 821CD030h case    4:*/		regs.R23 = regs.R3;
		/* 821CD030h case    4:*/		return 0x821CD034;
		  /* 821CD034h */ case    5:  		/* li R21, 0 */
		/* 821CD034h case    5:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821CD034h case    5:*/		return 0x821CD038;
		  /* 821CD038h */ case    6:  		/* b 20 */
		/* 821CD038h case    6:*/		return 0x821CD04C;
		/* 821CD038h case    6:*/		return 0x821CD03C;
		  /* 821CD03Ch */ case    7:  		/* lwz R11, <#[R22 + 48]> */
		/* 821CD03Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000030) );
		/* 821CD03Ch case    7:*/		return 0x821CD040;
		  /* 821CD040h */ case    8:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821CD040h case    8:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821CD040h case    8:*/		return 0x821CD044;
		  /* 821CD044h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD044h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CD054;  }
		/* 821CD044h case    9:*/		return 0x821CD048;
		  /* 821CD048h */ case   10:  		/* lwz R22, <#[R22 + 52]> */
		/* 821CD048h case   10:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + 0x00000034) );
		/* 821CD048h case   10:*/		return 0x821CD04C;
	}
	return 0x821CD04C;
} // Block from 821CD020h-821CD04Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CD04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD04C);
		  /* 821CD04Ch */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821CD04Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821CD04Ch case    0:*/		return 0x821CD050;
		  /* 821CD050h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821CD050h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CD03C;  }
		/* 821CD050h case    1:*/		return 0x821CD054;
	}
	return 0x821CD054;
} // Block from 821CD04Ch-821CD054h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD054);
		  /* 821CD054h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821CD054h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821CD054h case    0:*/		return 0x821CD058;
		  /* 821CD058h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD058h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD058h case    1:*/		return 0x821CD05C;
		  /* 821CD05Ch */ case    2:  		/* bc 4, CR0_EQ, 1312 */
		/* 821CD05Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD57C;  }
		/* 821CD05Ch case    2:*/		return 0x821CD060;
		  /* 821CD060h */ case    3:  		/* mr R25, R11 */
		/* 821CD060h case    3:*/		regs.R25 = regs.R11;
		/* 821CD060h case    3:*/		return 0x821CD064;
		  /* 821CD064h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821CD064h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CD064h case    4:*/		return 0x821CD068;
		  /* 821CD068h */ case    5:  		/* bc 12, CR0_EQ, 1300 */
		/* 821CD068h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CD57C;  }
		/* 821CD068h case    5:*/		return 0x821CD06C;
		  /* 821CD06Ch */ case    6:  		/* lwz R11, <#[R25 + 20]> */
		/* 821CD06Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 821CD06Ch case    6:*/		return 0x821CD070;
		  /* 821CD070h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD070h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD070h case    7:*/		return 0x821CD074;
		  /* 821CD074h */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 821CD074h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CD0AC;  }
		/* 821CD074h case    8:*/		return 0x821CD078;
		  /* 821CD078h */ case    9:  		/* lwz R11, <#[R25 + 28]> */
		/* 821CD078h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821CD078h case    9:*/		return 0x821CD07C;
		  /* 821CD07Ch */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD07Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD07Ch case   10:*/		return 0x821CD080;
		  /* 821CD080h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 821CD080h case   11:*/		if ( regs.CR[0].eq ) { return 0x821CD090;  }
		/* 821CD080h case   11:*/		return 0x821CD084;
		  /* 821CD084h */ case   12:  		/* lwz R11, <#[R25 + 36]> */
		/* 821CD084h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 821CD084h case   12:*/		return 0x821CD088;
		  /* 821CD088h */ case   13:  		/* addi R24, R25, 32 */
		/* 821CD088h case   13:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x20);
		/* 821CD088h case   13:*/		return 0x821CD08C;
		  /* 821CD08Ch */ case   14:  		/* b 12 */
		/* 821CD08Ch case   14:*/		return 0x821CD098;
		/* 821CD08Ch case   14:*/		return 0x821CD090;
	}
	return 0x821CD090;
} // Block from 821CD054h-821CD090h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CD090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD090);
		  /* 821CD090h */ case    0:  		/* lwz R11, <#[R25 + 28]> */
		/* 821CD090h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821CD090h case    0:*/		return 0x821CD094;
		  /* 821CD094h */ case    1:  		/* addi R24, R25, 24 */
		/* 821CD094h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x18);
		/* 821CD094h case    1:*/		return 0x821CD098;
	}
	return 0x821CD098;
} // Block from 821CD090h-821CD098h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD098);
		  /* 821CD098h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CD098h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD098h case    0:*/		return 0x821CD09C;
		  /* 821CD09Ch */ case    1:  		/* addic R10, R10, -1 */
		/* 821CD09Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CD09Ch case    1:*/		return 0x821CD0A0;
		  /* 821CD0A0h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821CD0A0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CD0A0h case    2:*/		return 0x821CD0A4;
		  /* 821CD0A4h */ case    3:  		/* and R26, R10, R11 */
		/* 821CD0A4h case    3:*/		cpu::op::and<0>(regs,&regs.R26,regs.R10,regs.R11);
		/* 821CD0A4h case    3:*/		return 0x821CD0A8;
		  /* 821CD0A8h */ case    4:  		/* b 1200 */
		/* 821CD0A8h case    4:*/		return 0x821CD558;
		/* 821CD0A8h case    4:*/		return 0x821CD0AC;
	}
	return 0x821CD0AC;
} // Block from 821CD098h-821CD0ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD0AC);
		  /* 821CD0ACh */ case    0:  		/* lwz R10, <#[R25 + 20]> */
		/* 821CD0ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 821CD0ACh case    0:*/		return 0x821CD0B0;
		  /* 821CD0B0h */ case    1:  		/* addi R24, R25, 16 */
		/* 821CD0B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x10);
		/* 821CD0B0h case    1:*/		return 0x821CD0B4;
		  /* 821CD0B4h */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821CD0B4h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821CD0B4h case    2:*/		return 0x821CD0B8;
		  /* 821CD0B8h */ case    3:  		/* addic R11, R9, -1 */
		/* 821CD0B8h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 821CD0B8h case    3:*/		return 0x821CD0BC;
		  /* 821CD0BCh */ case    4:  		/* subfe R11, R11, R11 */
		/* 821CD0BCh case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821CD0BCh case    4:*/		return 0x821CD0C0;
		  /* 821CD0C0h */ case    5:  		/* and R26, R11, R10 */
		/* 821CD0C0h case    5:*/		cpu::op::and<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821CD0C0h case    5:*/		return 0x821CD0C4;
		  /* 821CD0C4h */ case    6:  		/* b 1172 */
		/* 821CD0C4h case    6:*/		return 0x821CD558;
		/* 821CD0C4h case    6:*/		return 0x821CD0C8;
		  /* 821CD0C8h */ case    7:  		/* lwz R11, <#[R26 + 8]> */
		/* 821CD0C8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821CD0C8h case    7:*/		return 0x821CD0CC;
		  /* 821CD0CCh */ case    8:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821CD0CCh case    8:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD0CCh case    8:*/		return 0x821CD0D0;
		  /* 821CD0D0h */ case    9:  		/* bc 12, CR0_EQ, 876 */
		/* 821CD0D0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CD43C;  }
		/* 821CD0D0h case    9:*/		return 0x821CD0D4;
		  /* 821CD0D4h */ case   10:  		/* rlwinm R10, R11, 0, 6, 4 */
		/* 821CD0D4h case   10:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R11);
		/* 821CD0D4h case   10:*/		return 0x821CD0D8;
	}
	return 0x821CD0D8;
} // Block from 821CD0ACh-821CD0D8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CD0D8h
// Function '?MergeBlocks@Compiler@D3DXShader@@AAA_NPAVBlock@2@0_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD0D8);
		  /* 821CD0D8h */ case    0:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821CD0D8h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821CD0D8h case    0:*/		return 0x821CD0DC;
		  /* 821CD0DCh */ case    1:  		/* stw R10, <#[R26 + 8]> */
		/* 821CD0DCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821CD0DCh case    1:*/		return 0x821CD0E0;
		  /* 821CD0E0h */ case    2:  		/* cmplwi CR6, R11, 86 */
		/* 821CD0E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821CD0E0h case    2:*/		return 0x821CD0E4;
		  /* 821CD0E4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821CD0E4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CD0F4;  }
		/* 821CD0E4h case    3:*/		return 0x821CD0E8;
		  /* 821CD0E8h */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 821CD0E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821CD0E8h case    4:*/		return 0x821CD0EC;
		  /* 821CD0ECh */ case    5:  		/* li R11, 0 */
		/* 821CD0ECh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CD0ECh case    5:*/		return 0x821CD0F0;
		  /* 821CD0F0h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CD0F0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CD0F8;  }
		/* 821CD0F0h case    6:*/		return 0x821CD0F4;
	}
	return 0x821CD0F4;
} // Block from 821CD0D8h-821CD0F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD0F4);
		  /* 821CD0F4h */ case    0:  		/* li R11, 1 */
		/* 821CD0F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CD0F4h case    0:*/		return 0x821CD0F8;
	}
	return 0x821CD0F8;
} // Block from 821CD0F4h-821CD0F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD0F8);
		  /* 821CD0F8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CD0F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CD0F8h case    0:*/		return 0x821CD0FC;
		  /* 821CD0FCh */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821CD0FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CD12C;  }
		/* 821CD0FCh case    1:*/		return 0x821CD100;
		  /* 821CD100h */ case    2:  		/* lwz R11, <#[R25 + 36]> */
		/* 821CD100h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 821CD100h case    2:*/		return 0x821CD104;
		  /* 821CD104h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD104h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD104h case    3:*/		return 0x821CD108;
		  /* 821CD108h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD108h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CD114;  }
		/* 821CD108h case    4:*/		return 0x821CD10C;
		  /* 821CD10Ch */ case    5:  		/* li R4, 0 */
		/* 821CD10Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CD10Ch case    5:*/		return 0x821CD110;
		  /* 821CD110h */ case    6:  		/* b 16 */
		/* 821CD110h case    6:*/		return 0x821CD120;
		/* 821CD110h case    6:*/		return 0x821CD114;
	}
	return 0x821CD114;
} // Block from 821CD0F8h-821CD114h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD114);
		  /* 821CD114h */ case    0:  		/* lwz R11, <#[R25 + 32]> */
		/* 821CD114h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000020) );
		/* 821CD114h case    0:*/		return 0x821CD118;
		  /* 821CD118h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD118h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD118h case    1:*/		return 0x821CD11C;
		  /* 821CD11Ch */ case    2:  		/* addi R4, R11, -40 */
		/* 821CD11Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821CD11Ch case    2:*/		return 0x821CD120;
	}
	return 0x821CD120;
} // Block from 821CD114h-821CD120h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD120);
		  /* 821CD120h */ case    0:  		/* mr R3, R23 */
		/* 821CD120h case    0:*/		regs.R3 = regs.R23;
		/* 821CD120h case    0:*/		return 0x821CD124;
		  /* 821CD124h */ case    1:  		/* bl -62372 */
		/* 821CD124h case    1:*/		regs.LR = 0x821CD128; return 0x821BDD80;
		/* 821CD124h case    1:*/		return 0x821CD128;
		  /* 821CD128h */ case    2:  		/* b 788 */
		/* 821CD128h case    2:*/		return 0x821CD43C;
		/* 821CD128h case    2:*/		return 0x821CD12C;
	}
	return 0x821CD12C;
} // Block from 821CD120h-821CD12Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD12C);
		  /* 821CD12Ch */ case    0:  		/* lwz R11, <#[R26 + 28]> */
		/* 821CD12Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821CD12Ch case    0:*/		return 0x821CD130;
		  /* 821CD130h */ case    1:  		/* b 20 */
		/* 821CD130h case    1:*/		return 0x821CD144;
		/* 821CD130h case    1:*/		return 0x821CD134;
		  /* 821CD134h */ case    2:  		/* lwz R10, <#[R11 + 48]> */
		/* 821CD134h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821CD134h case    2:*/		return 0x821CD138;
		  /* 821CD138h */ case    3:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821CD138h case    3:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821CD138h case    3:*/		return 0x821CD13C;
		  /* 821CD13Ch */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD13Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CD14C;  }
		/* 821CD13Ch case    4:*/		return 0x821CD140;
		  /* 821CD140h */ case    5:  		/* lwz R11, <#[R11 + 52]> */
		/* 821CD140h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821CD140h case    5:*/		return 0x821CD144;
	}
	return 0x821CD144;
} // Block from 821CD12Ch-821CD144h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CD144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD144);
		  /* 821CD144h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CD144h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD144h case    0:*/		return 0x821CD148;
		  /* 821CD148h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821CD148h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CD134;  }
		/* 821CD148h case    1:*/		return 0x821CD14C;
	}
	return 0x821CD14C;
} // Block from 821CD144h-821CD14Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD14C);
		  /* 821CD14Ch */ case    0:  		/* mr R31, R11 */
		/* 821CD14Ch case    0:*/		regs.R31 = regs.R11;
		/* 821CD14Ch case    0:*/		return 0x821CD150;
		  /* 821CD150h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CD150h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD150h case    1:*/		return 0x821CD154;
		  /* 821CD154h */ case    2:  		/* bc 12, CR6_EQ, 744 */
		/* 821CD154h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CD43C;  }
		/* 821CD154h case    2:*/		return 0x821CD158;
		  /* 821CD158h */ case    3:  		/* cmplw CR6, R11, R22 */
		/* 821CD158h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821CD158h case    3:*/		return 0x821CD15C;
		  /* 821CD15Ch */ case    4:  		/* bc 12, CR6_EQ, 736 */
		/* 821CD15Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821CD43C;  }
		/* 821CD15Ch case    4:*/		return 0x821CD160;
		  /* 821CD160h */ case    5:  		/* li R5, 6 */
		/* 821CD160h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821CD160h case    5:*/		return 0x821CD164;
		  /* 821CD164h */ case    6:  		/* li R4, 8 */
		/* 821CD164h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CD164h case    6:*/		return 0x821CD168;
		  /* 821CD168h */ case    7:  		/* mr R3, R23 */
		/* 821CD168h case    7:*/		regs.R3 = regs.R23;
		/* 821CD168h case    7:*/		return 0x821CD16C;
		  /* 821CD16Ch */ case    8:  		/* bl -428156 */
		/* 821CD16Ch case    8:*/		regs.LR = 0x821CD170; return 0x821648F0;
		/* 821CD16Ch case    8:*/		return 0x821CD170;
		  /* 821CD170h */ case    9:  		/* addi R27, R3, 4 */
		/* 821CD170h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 821CD170h case    9:*/		return 0x821CD174;
		  /* 821CD174h */ case   10:  		/* ori R11, R3, 1 */
		/* 821CD174h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CD174h case   10:*/		return 0x821CD178;
		  /* 821CD178h */ case   11:  		/* ori R10, R27, 1 */
		/* 821CD178h case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 821CD178h case   11:*/		return 0x821CD17C;
		  /* 821CD17Ch */ case   12:  		/* mr R29, R3 */
		/* 821CD17Ch case   12:*/		regs.R29 = regs.R3;
		/* 821CD17Ch case   12:*/		return 0x821CD180;
		  /* 821CD180h */ case   13:  		/* stw R11, <#[R3 + 4]> */
		/* 821CD180h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CD180h case   13:*/		return 0x821CD184;
		  /* 821CD184h */ case   14:  		/* stw R10, <#[R3]> */
		/* 821CD184h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CD184h case   14:*/		return 0x821CD188;
		  /* 821CD188h */ case   15:  		/* lwz R28, <#[R31 + 8]> */
		/* 821CD188h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 821CD188h case   15:*/		return 0x821CD18C;
		  /* 821CD18Ch */ case   16:  		/* cmplwi CR6, R28, 0 */
		/* 821CD18Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CD18Ch case   16:*/		return 0x821CD190;
		  /* 821CD190h */ case   17:  		/* bc 12, CR6_EQ, 648 */
		/* 821CD190h case   17:*/		if ( regs.CR[6].eq ) { return 0x821CD418;  }
		/* 821CD190h case   17:*/		return 0x821CD194;
		  /* 821CD194h */ case   18:  		/* lwz R30, <#[R28 + 4]> */
		/* 821CD194h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000004) );
		/* 821CD194h case   18:*/		return 0x821CD198;
		  /* 821CD198h */ case   19:  		/* mr R31, R30 */
		/* 821CD198h case   19:*/		regs.R31 = regs.R30;
		/* 821CD198h case   19:*/		return 0x821CD19C;
		  /* 821CD19Ch */ case   20:  		/* cmplwi CR6, R30, 0 */
		/* 821CD19Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CD19Ch case   20:*/		return 0x821CD1A0;
		  /* 821CD1A0h */ case   21:  		/* bc 12, CR6_EQ, 28 */
		/* 821CD1A0h case   21:*/		if ( regs.CR[6].eq ) { return 0x821CD1BC;  }
		/* 821CD1A0h case   21:*/		return 0x821CD1A4;
		  /* 821CD1A4h */ case   22:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CD1A4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CD1A4h case   22:*/		return 0x821CD1A8;
		  /* 821CD1A8h */ case   23:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821CD1A8h case   23:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821CD1A8h case   23:*/		return 0x821CD1AC;
		  /* 821CD1ACh */ case   24:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD1ACh case   24:*/		if ( !regs.CR[0].eq ) { return 0x821CD1BC;  }
		/* 821CD1ACh case   24:*/		return 0x821CD1B0;
		  /* 821CD1B0h */ case   25:  		/* lwz R31, <#[R31 + 52]> */
		/* 821CD1B0h case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 821CD1B0h case   25:*/		return 0x821CD1B4;
		  /* 821CD1B4h */ case   26:  		/* cmplwi CR6, R31, 0 */
		/* 821CD1B4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CD1B4h case   26:*/		return 0x821CD1B8;
		  /* 821CD1B8h */ case   27:  		/* bc 4, CR6_EQ, -20 */
		/* 821CD1B8h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821CD1A4;  }
		/* 821CD1B8h case   27:*/		return 0x821CD1BC;
	}
	return 0x821CD1BC;
} // Block from 821CD14Ch-821CD1BCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 821CD1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD1BC);
		  /* 821CD1BCh */ case    0:  		/* cmplw CR6, R31, R22 */
		/* 821CD1BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R22);
		/* 821CD1BCh case    0:*/		return 0x821CD1C0;
		  /* 821CD1C0h */ case    1:  		/* bc 4, CR6_EQ, 204 */
		/* 821CD1C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CD28C;  }
		/* 821CD1C0h case    1:*/		return 0x821CD1C4;
		  /* 821CD1C4h */ case    2:  		/* lwz R11, <#[R30 + 36]> */
		/* 821CD1C4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821CD1C4h case    2:*/		return 0x821CD1C8;
		  /* 821CD1C8h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD1C8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD1C8h case    3:*/		return 0x821CD1CC;
		  /* 821CD1CCh */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD1CCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821CD1D8;  }
		/* 821CD1CCh case    4:*/		return 0x821CD1D0;
		  /* 821CD1D0h */ case    5:  		/* li R4, 0 */
		/* 821CD1D0h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CD1D0h case    5:*/		return 0x821CD1D4;
		  /* 821CD1D4h */ case    6:  		/* b 16 */
		/* 821CD1D4h case    6:*/		return 0x821CD1E4;
		/* 821CD1D4h case    6:*/		return 0x821CD1D8;
	}
	return 0x821CD1D8;
} // Block from 821CD1BCh-821CD1D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD1D8);
		  /* 821CD1D8h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821CD1D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821CD1D8h case    0:*/		return 0x821CD1DC;
		  /* 821CD1DCh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD1DCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD1DCh case    1:*/		return 0x821CD1E0;
		  /* 821CD1E0h */ case    2:  		/* addi R4, R11, -40 */
		/* 821CD1E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821CD1E0h case    2:*/		return 0x821CD1E4;
	}
	return 0x821CD1E4;
} // Block from 821CD1D8h-821CD1E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD1E4);
		  /* 821CD1E4h */ case    0:  		/* mr R3, R23 */
		/* 821CD1E4h case    0:*/		regs.R3 = regs.R23;
		/* 821CD1E4h case    0:*/		return 0x821CD1E8;
		  /* 821CD1E8h */ case    1:  		/* bl -62568 */
		/* 821CD1E8h case    1:*/		regs.LR = 0x821CD1EC; return 0x821BDD80;
		/* 821CD1E8h case    1:*/		return 0x821CD1EC;
		  /* 821CD1ECh */ case    2:  		/* mr R4, R29 */
		/* 821CD1ECh case    2:*/		regs.R4 = regs.R29;
		/* 821CD1ECh case    2:*/		return 0x821CD1F0;
		  /* 821CD1F0h */ case    3:  		/* addi R3, R1, 80 */
		/* 821CD1F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CD1F0h case    3:*/		return 0x821CD1F4;
		  /* 821CD1F4h */ case    4:  		/* li R21, 1 */
		/* 821CD1F4h case    4:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821CD1F4h case    4:*/		return 0x821CD1F8;
		  /* 821CD1F8h */ case    5:  		/* bl -185288 */
		/* 821CD1F8h case    5:*/		regs.LR = 0x821CD1FC; return 0x8219FE30;
		/* 821CD1F8h case    5:*/		return 0x821CD1FC;
		  /* 821CD1FCh */ case    6:  		/* lwz R11, <#[R1 + 88]> */
		/* 821CD1FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821CD1FCh case    6:*/		return 0x821CD200;
		  /* 821CD200h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821CD200h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD200h case    7:*/		return 0x821CD204;
		  /* 821CD204h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 821CD204h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CD230;  }
		/* 821CD204h case    8:*/		return 0x821CD208;
		  /* 821CD208h */ case    9:  		/* lwz R11, <#[R1 + 80]> */
		/* 821CD208h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821CD208h case    9:*/		return 0x821CD20C;
		  /* 821CD20Ch */ case   10:  		/* lwz R10, <#[R1 + 84]> */
		/* 821CD20Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821CD20Ch case   10:*/		return 0x821CD210;
		  /* 821CD210h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD210h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD210h case   11:*/		return 0x821CD214;
		  /* 821CD214h */ case   12:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CD214h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CD214h case   12:*/		return 0x821CD218;
		  /* 821CD218h */ case   13:  		/* addic R9, R9, -1 */
		/* 821CD218h case   13:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CD218h case   13:*/		return 0x821CD21C;
		  /* 821CD21Ch */ case   14:  		/* subfe R9, R9, R9 */
		/* 821CD21Ch case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CD21Ch case   14:*/		return 0x821CD220;
		  /* 821CD220h */ case   15:  		/* and R11, R9, R11 */
		/* 821CD220h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CD220h case   15:*/		return 0x821CD224;
		  /* 821CD224h */ case   16:  		/* cmplw CR6, R10, R11 */
		/* 821CD224h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CD224h case   16:*/		return 0x821CD228;
		  /* 821CD228h */ case   17:  		/* li R11, 1 */
		/* 821CD228h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CD228h case   17:*/		return 0x821CD22C;
		  /* 821CD22Ch */ case   18:  		/* bc 12, CR6_EQ, 8 */
		/* 821CD22Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821CD234;  }
		/* 821CD22Ch case   18:*/		return 0x821CD230;
	}
	return 0x821CD230;
} // Block from 821CD1E4h-821CD230h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CD230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD230);
		  /* 821CD230h */ case    0:  		/* li R11, 0 */
		/* 821CD230h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CD230h case    0:*/		return 0x821CD234;
	}
	return 0x821CD234;
} // Block from 821CD230h-821CD234h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD234);
		  /* 821CD234h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CD234h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CD234h case    0:*/		return 0x821CD238;
		  /* 821CD238h */ case    1:  		/* bc 4, CR0_EQ, 252 */
		/* 821CD238h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CD334;  }
		/* 821CD238h case    1:*/		return 0x821CD23C;
		  /* 821CD23Ch */ case    2:  		/* addi R3, R1, 80 */
		/* 821CD23Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CD23Ch case    2:*/		return 0x821CD240;
		  /* 821CD240h */ case    3:  		/* bl -189512 */
		/* 821CD240h case    3:*/		regs.LR = 0x821CD244; return 0x8219EDF8;
		/* 821CD240h case    3:*/		return 0x821CD244;
		  /* 821CD244h */ case    4:  		/* mr R11, R3 */
		/* 821CD244h case    4:*/		regs.R11 = regs.R3;
		/* 821CD244h case    4:*/		return 0x821CD248;
		  /* 821CD248h */ case    5:  		/* addi R3, R1, 80 */
		/* 821CD248h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CD248h case    5:*/		return 0x821CD24C;
		  /* 821CD24Ch */ case    6:  		/* lwz R31, <#[R11]> */
		/* 821CD24Ch case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD24Ch case    6:*/		return 0x821CD250;
		  /* 821CD250h */ case    7:  		/* bl -189528 */
		/* 821CD250h case    7:*/		regs.LR = 0x821CD254; return 0x8219EDF8;
		/* 821CD250h case    7:*/		return 0x821CD254;
		  /* 821CD254h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821CD254h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821CD254h case    8:*/		return 0x821CD258;
		  /* 821CD258h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 821CD258h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CD258h case    9:*/		return 0x821CD25C;
		  /* 821CD25Ch */ case   10:  		/* bc 4, CR6_EQ, -96 */
		/* 821CD25Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CD1FC;  }
		/* 821CD25Ch case   10:*/		return 0x821CD260;
		  /* 821CD260h */ case   11:  		/* lwz R11, <#[R31 + 36]> */
		/* 821CD260h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821CD260h case   11:*/		return 0x821CD264;
		  /* 821CD264h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD264h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD264h case   12:*/		return 0x821CD268;
		  /* 821CD268h */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD268h case   13:*/		if ( regs.CR[0].eq ) { return 0x821CD274;  }
		/* 821CD268h case   13:*/		return 0x821CD26C;
		  /* 821CD26Ch */ case   14:  		/* li R4, 0 */
		/* 821CD26Ch case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CD26Ch case   14:*/		return 0x821CD270;
		  /* 821CD270h */ case   15:  		/* b 16 */
		/* 821CD270h case   15:*/		return 0x821CD280;
		/* 821CD270h case   15:*/		return 0x821CD274;
	}
	return 0x821CD274;
} // Block from 821CD234h-821CD274h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CD274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD274);
		  /* 821CD274h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 821CD274h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821CD274h case    0:*/		return 0x821CD278;
		  /* 821CD278h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD278h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD278h case    1:*/		return 0x821CD27C;
		  /* 821CD27Ch */ case    2:  		/* addi R4, R11, -40 */
		/* 821CD27Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821CD27Ch case    2:*/		return 0x821CD280;
	}
	return 0x821CD280;
} // Block from 821CD274h-821CD280h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD280);
		  /* 821CD280h */ case    0:  		/* mr R3, R23 */
		/* 821CD280h case    0:*/		regs.R3 = regs.R23;
		/* 821CD280h case    0:*/		return 0x821CD284;
		  /* 821CD284h */ case    1:  		/* bl -62724 */
		/* 821CD284h case    1:*/		regs.LR = 0x821CD288; return 0x821BDD80;
		/* 821CD284h case    1:*/		return 0x821CD288;
		  /* 821CD288h */ case    2:  		/* b -140 */
		/* 821CD288h case    2:*/		return 0x821CD1FC;
		/* 821CD288h case    2:*/		return 0x821CD28C;
	}
	return 0x821CD28C;
} // Block from 821CD280h-821CD28Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD28Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD28C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD28C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD28C);
		  /* 821CD28Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821CD28Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD28Ch case    0:*/		return 0x821CD290;
		  /* 821CD290h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD290h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD290h case    1:*/		return 0x821CD294;
		  /* 821CD294h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821CD294h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD2BC;  }
		/* 821CD294h case    2:*/		return 0x821CD298;
		  /* 821CD298h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 821CD298h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD298h case    3:*/		return 0x821CD29C;
		  /* 821CD29Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD29Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD29Ch case    4:*/		return 0x821CD2A0;
		  /* 821CD2A0h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821CD2A0h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CD2A0h case    5:*/		return 0x821CD2A4;
		  /* 821CD2A4h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821CD2A4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CD2BC;  }
		/* 821CD2A4h case    6:*/		return 0x821CD2A8;
		  /* 821CD2A8h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD2A8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD2A8h case    7:*/		return 0x821CD2AC;
		  /* 821CD2ACh */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CD2ACh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CD2ACh case    8:*/		return 0x821CD2B0;
		  /* 821CD2B0h */ case    9:  		/* addi R11, R11, 1 */
		/* 821CD2B0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CD2B0h case    9:*/		return 0x821CD2B4;
		  /* 821CD2B4h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821CD2B4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CD2B4h case   10:*/		return 0x821CD2B8;
		  /* 821CD2B8h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821CD2B8h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821CD2C8;  }
		/* 821CD2B8h case   11:*/		return 0x821CD2BC;
	}
	return 0x821CD2BC;
} // Block from 821CD28Ch-821CD2BCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CD2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD2BC);
		  /* 821CD2BCh */ case    0:  		/* li R4, 1 */
		/* 821CD2BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CD2BCh case    0:*/		return 0x821CD2C0;
		  /* 821CD2C0h */ case    1:  		/* mr R3, R29 */
		/* 821CD2C0h case    1:*/		regs.R3 = regs.R29;
		/* 821CD2C0h case    1:*/		return 0x821CD2C4;
		  /* 821CD2C4h */ case    2:  		/* bl -262652 */
		/* 821CD2C4h case    2:*/		regs.LR = 0x821CD2C8; return 0x8218D0C8;
		/* 821CD2C4h case    2:*/		return 0x821CD2C8;
	}
	return 0x821CD2C8;
} // Block from 821CD2BCh-821CD2C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD2C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD2C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD2C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD2C8);
		  /* 821CD2C8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD2C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD2C8h case    0:*/		return 0x821CD2CC;
		  /* 821CD2CCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821CD2CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CD2CCh case    1:*/		return 0x821CD2D0;
		  /* 821CD2D0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CD2D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CD2D0h case    2:*/		return 0x821CD2D4;
		  /* 821CD2D4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CD2D4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CD2D4h case    3:*/		return 0x821CD2D8;
		  /* 821CD2D8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CD2D8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD2D8h case    4:*/		return 0x821CD2DC;
		  /* 821CD2DCh */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821CD2DCh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CD2DCh case    5:*/		return 0x821CD2E0;
		  /* 821CD2E0h */ case    6:  		/* lwz R11, <#[R27]> */
		/* 821CD2E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD2E0h case    6:*/		return 0x821CD2E4;
		  /* 821CD2E4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD2E4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD2E4h case    7:*/		return 0x821CD2E8;
		  /* 821CD2E8h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821CD2E8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CD310;  }
		/* 821CD2E8h case    8:*/		return 0x821CD2EC;
		  /* 821CD2ECh */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821CD2ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD2ECh case    9:*/		return 0x821CD2F0;
		  /* 821CD2F0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD2F0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD2F0h case   10:*/		return 0x821CD2F4;
		  /* 821CD2F4h */ case   11:  		/* addic. R3, R11, -4 */
		/* 821CD2F4h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CD2F4h case   11:*/		return 0x821CD2F8;
		  /* 821CD2F8h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821CD2F8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821CD310;  }
		/* 821CD2F8h case   12:*/		return 0x821CD2FC;
		  /* 821CD2FCh */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD2FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD2FCh case   13:*/		return 0x821CD300;
		  /* 821CD300h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CD300h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CD300h case   14:*/		return 0x821CD304;
		  /* 821CD304h */ case   15:  		/* addi R11, R11, 1 */
		/* 821CD304h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CD304h case   15:*/		return 0x821CD308;
		  /* 821CD308h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821CD308h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CD308h case   16:*/		return 0x821CD30C;
		  /* 821CD30Ch */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821CD30Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x821CD31C;  }
		/* 821CD30Ch case   17:*/		return 0x821CD310;
	}
	return 0x821CD310;
} // Block from 821CD2C8h-821CD310h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CD310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD310);
		  /* 821CD310h */ case    0:  		/* li R4, 1 */
		/* 821CD310h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CD310h case    0:*/		return 0x821CD314;
		  /* 821CD314h */ case    1:  		/* mr R3, R29 */
		/* 821CD314h case    1:*/		regs.R3 = regs.R29;
		/* 821CD314h case    1:*/		return 0x821CD318;
		  /* 821CD318h */ case    2:  		/* bl -262736 */
		/* 821CD318h case    2:*/		regs.LR = 0x821CD31C; return 0x8218D0C8;
		/* 821CD318h case    2:*/		return 0x821CD31C;
	}
	return 0x821CD31C;
} // Block from 821CD310h-821CD31Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD31C);
		  /* 821CD31Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD31Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD31Ch case    0:*/		return 0x821CD320;
		  /* 821CD320h */ case    1:  		/* addi R10, R11, 4 */
		/* 821CD320h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CD320h case    1:*/		return 0x821CD324;
		  /* 821CD324h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CD324h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CD324h case    2:*/		return 0x821CD328;
		  /* 821CD328h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CD328h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CD328h case    3:*/		return 0x821CD32C;
		  /* 821CD32Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CD32Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD32Ch case    4:*/		return 0x821CD330;
		  /* 821CD330h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821CD330h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CD330h case    5:*/		return 0x821CD334;
	}
	return 0x821CD334;
} // Block from 821CD31Ch-821CD334h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CD334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD334);
		  /* 821CD334h */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 821CD334h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 821CD334h case    0:*/		return 0x821CD338;
		  /* 821CD338h */ case    1:  		/* b -428 */
		/* 821CD338h case    1:*/		return 0x821CD18C;
		/* 821CD338h case    1:*/		return 0x821CD33C;
		  /* 821CD33Ch */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821CD33Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD33Ch case    2:*/		return 0x821CD340;
		  /* 821CD340h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD340h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD340h case    3:*/		return 0x821CD344;
		  /* 821CD344h */ case    4:  		/* addi R4, R11, -4 */
		/* 821CD344h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CD344h case    4:*/		return 0x821CD348;
		  /* 821CD348h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD348h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD348h case    5:*/		return 0x821CD34C;
		  /* 821CD34Ch */ case    6:  		/* addi R10, R11, 3 */
		/* 821CD34Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CD34Ch case    6:*/		return 0x821CD350;
		  /* 821CD350h */ case    7:  		/* addic. R11, R11, -1 */
		/* 821CD350h case    7:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CD350h case    7:*/		return 0x821CD354;
		  /* 821CD354h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CD354h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CD354h case    8:*/		return 0x821CD358;
		  /* 821CD358h */ case    9:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821CD358h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CD358h case    9:*/		return 0x821CD35C;
		  /* 821CD35Ch */ case   10:  		/* stw R11, <#[R4 + 8]> */
		/* 821CD35Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CD35Ch case   10:*/		return 0x821CD360;
		  /* 821CD360h */ case   11:  		/* bc 4, CR0_EQ, 60 */
		/* 821CD360h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821CD39C;  }
		/* 821CD360h case   11:*/		return 0x821CD364;
		  /* 821CD364h */ case   12:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CD364h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CD364h case   12:*/		return 0x821CD368;
		  /* 821CD368h */ case   13:  		/* mr R3, R29 */
		/* 821CD368h case   13:*/		regs.R3 = regs.R29;
		/* 821CD368h case   13:*/		return 0x821CD36C;
		  /* 821CD36Ch */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CD36Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD36Ch case   14:*/		return 0x821CD370;
		  /* 821CD370h */ case   15:  		/* lwz R9, <#[R11]> */
		/* 821CD370h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD370h case   15:*/		return 0x821CD374;
		  /* 821CD374h */ case   16:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CD374h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CD374h case   16:*/		return 0x821CD378;
		  /* 821CD378h */ case   17:  		/* stw R9, <#[R10]> */
		/* 821CD378h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CD378h case   17:*/		return 0x821CD37C;
		  /* 821CD37Ch */ case   18:  		/* lwz R10, <#[R11]> */
		/* 821CD37Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD37Ch case   18:*/		return 0x821CD380;
		  /* 821CD380h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CD380h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CD380h case   19:*/		return 0x821CD384;
		  /* 821CD384h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD384h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD384h case   20:*/		return 0x821CD388;
		  /* 821CD388h */ case   21:  		/* stw R11, <#[R10]> */
		/* 821CD388h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CD388h case   21:*/		return 0x821CD38C;
		  /* 821CD38Ch */ case   22:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CD38Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CD38Ch case   22:*/		return 0x821CD390;
		  /* 821CD390h */ case   23:  		/* addi R11, R11, 4 */
		/* 821CD390h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CD390h case   23:*/		return 0x821CD394;
		  /* 821CD394h */ case   24:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CD394h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CD394h case   24:*/		return 0x821CD398;
		  /* 821CD398h */ case   25:  		/* bl -505232 */
		/* 821CD398h case   25:*/		regs.LR = 0x821CD39C; return 0x82151E08;
		/* 821CD398h case   25:*/		return 0x821CD39C;
	}
	return 0x821CD39C;
} // Block from 821CD334h-821CD39Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821CD39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD39C);
		  /* 821CD39Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821CD39Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD39Ch case    0:*/		return 0x821CD3A0;
		  /* 821CD3A0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD3A0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD3A0h case    1:*/		return 0x821CD3A4;
		  /* 821CD3A4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD3A4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CD3B0;  }
		/* 821CD3A4h case    2:*/		return 0x821CD3A8;
		  /* 821CD3A8h */ case    3:  		/* li R4, 0 */
		/* 821CD3A8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CD3A8h case    3:*/		return 0x821CD3AC;
		  /* 821CD3ACh */ case    4:  		/* b 16 */
		/* 821CD3ACh case    4:*/		return 0x821CD3BC;
		/* 821CD3ACh case    4:*/		return 0x821CD3B0;
	}
	return 0x821CD3B0;
} // Block from 821CD39Ch-821CD3B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD3B0);
		  /* 821CD3B0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821CD3B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD3B0h case    0:*/		return 0x821CD3B4;
		  /* 821CD3B4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD3B4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD3B4h case    1:*/		return 0x821CD3B8;
		  /* 821CD3B8h */ case    2:  		/* addi R4, R11, -4 */
		/* 821CD3B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CD3B8h case    2:*/		return 0x821CD3BC;
	}
	return 0x821CD3BC;
} // Block from 821CD3B0h-821CD3BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD3BC);
		  /* 821CD3BCh */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821CD3BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CD3BCh case    0:*/		return 0x821CD3C0;
		  /* 821CD3C0h */ case    1:  		/* addi R10, R11, 3 */
		/* 821CD3C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CD3C0h case    1:*/		return 0x821CD3C4;
		  /* 821CD3C4h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821CD3C4h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CD3C4h case    2:*/		return 0x821CD3C8;
		  /* 821CD3C8h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CD3C8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CD3C8h case    3:*/		return 0x821CD3CC;
		  /* 821CD3CCh */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821CD3CCh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CD3CCh case    4:*/		return 0x821CD3D0;
		  /* 821CD3D0h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821CD3D0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CD3D0h case    5:*/		return 0x821CD3D4;
		  /* 821CD3D4h */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 821CD3D4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CD410;  }
		/* 821CD3D4h case    6:*/		return 0x821CD3D8;
		  /* 821CD3D8h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CD3D8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CD3D8h case    7:*/		return 0x821CD3DC;
		  /* 821CD3DCh */ case    8:  		/* mr R3, R29 */
		/* 821CD3DCh case    8:*/		regs.R3 = regs.R29;
		/* 821CD3DCh case    8:*/		return 0x821CD3E0;
		  /* 821CD3E0h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CD3E0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD3E0h case    9:*/		return 0x821CD3E4;
		  /* 821CD3E4h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 821CD3E4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD3E4h case   10:*/		return 0x821CD3E8;
		  /* 821CD3E8h */ case   11:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CD3E8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CD3E8h case   11:*/		return 0x821CD3EC;
		  /* 821CD3ECh */ case   12:  		/* stw R9, <#[R10]> */
		/* 821CD3ECh case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CD3ECh case   12:*/		return 0x821CD3F0;
		  /* 821CD3F0h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821CD3F0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD3F0h case   13:*/		return 0x821CD3F4;
		  /* 821CD3F4h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CD3F4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CD3F4h case   14:*/		return 0x821CD3F8;
		  /* 821CD3F8h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD3F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD3F8h case   15:*/		return 0x821CD3FC;
		  /* 821CD3FCh */ case   16:  		/* stw R11, <#[R10]> */
		/* 821CD3FCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821CD3FCh case   16:*/		return 0x821CD400;
		  /* 821CD400h */ case   17:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CD400h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CD400h case   17:*/		return 0x821CD404;
		  /* 821CD404h */ case   18:  		/* addi R11, R11, 4 */
		/* 821CD404h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CD404h case   18:*/		return 0x821CD408;
		  /* 821CD408h */ case   19:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CD408h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CD408h case   19:*/		return 0x821CD40C;
		  /* 821CD40Ch */ case   20:  		/* bl -505348 */
		/* 821CD40Ch case   20:*/		regs.LR = 0x821CD410; return 0x82151E08;
		/* 821CD40Ch case   20:*/		return 0x821CD410;
	}
	return 0x821CD410;
} // Block from 821CD3BCh-821CD410h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CD410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD410);
		  /* 821CD410h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821CD410h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CD410h case    0:*/		return 0x821CD414;
		  /* 821CD414h */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 821CD414h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CD494;  }
		/* 821CD414h case    1:*/		return 0x821CD418;
	}
	return 0x821CD418;
} // Block from 821CD410h-821CD418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD418);
		  /* 821CD418h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821CD418h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD418h case    0:*/		return 0x821CD41C;
		  /* 821CD41Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD41Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD41Ch case    1:*/		return 0x821CD420;
		  /* 821CD420h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821CD420h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD42C;  }
		/* 821CD420h case    2:*/		return 0x821CD424;
		  /* 821CD424h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821CD424h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CD424h case    3:*/		return 0x821CD428;
		  /* 821CD428h */ case    4:  		/* bc 4, CR0_EQ, -236 */
		/* 821CD428h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CD33C;  }
		/* 821CD428h case    4:*/		return 0x821CD42C;
	}
	return 0x821CD42C;
} // Block from 821CD418h-821CD42Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD42C);
		  /* 821CD42Ch */ case    0:  		/* lwz R10, <#[R23 + 976]> */
		/* 821CD42Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x000003D0) );
		/* 821CD42Ch case    0:*/		return 0x821CD430;
		  /* 821CD430h */ case    1:  		/* addi R11, R23, 972 */
		/* 821CD430h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x3CC);
		/* 821CD430h case    1:*/		return 0x821CD434;
		  /* 821CD434h */ case    2:  		/* stw R10, <#[R29]> */
		/* 821CD434h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD434h case    2:*/		return 0x821CD438;
		  /* 821CD438h */ case    3:  		/* stw R29, <#[R23 + 976]> */
		/* 821CD438h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x000003D0) );
		/* 821CD438h case    3:*/		return 0x821CD43C;
	}
	return 0x821CD43C;
} // Block from 821CD42Ch-821CD43Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CD43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD43C);
		  /* 821CD43Ch */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821CD43Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821CD43Ch case    0:*/		return 0x821CD440;
		  /* 821CD440h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CD440h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CD440h case    1:*/		return 0x821CD444;
		  /* 821CD444h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD444h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD444h case    2:*/		return 0x821CD448;
		  /* 821CD448h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD448h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CD458;  }
		/* 821CD448h case    3:*/		return 0x821CD44C;
		  /* 821CD44Ch */ case    4:  		/* mr R26, R11 */
		/* 821CD44Ch case    4:*/		regs.R26 = regs.R11;
		/* 821CD44Ch case    4:*/		return 0x821CD450;
		  /* 821CD450h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CD450h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD450h case    5:*/		return 0x821CD454;
		  /* 821CD454h */ case    6:  		/* bc 4, CR6_EQ, -908 */
		/* 821CD454h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CD0C8;  }
		/* 821CD454h case    6:*/		return 0x821CD458;
	}
	return 0x821CD458;
} // Block from 821CD43Ch-821CD458h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD458);
		  /* 821CD458h */ case    0:  		/* addi R10, R25, 32 */
		/* 821CD458h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x20);
		/* 821CD458h case    0:*/		return 0x821CD45C;
		  /* 821CD45Ch */ case    1:  		/* cmplw CR6, R24, R10 */
		/* 821CD45Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R10);
		/* 821CD45Ch case    1:*/		return 0x821CD460;
		  /* 821CD460h */ case    2:  		/* bc 12, CR6_EQ, 256 */
		/* 821CD460h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CD560;  }
		/* 821CD460h case    2:*/		return 0x821CD464;
		  /* 821CD464h */ case    3:  		/* addi R11, R25, 24 */
		/* 821CD464h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x18);
		/* 821CD464h case    3:*/		return 0x821CD468;
		  /* 821CD468h */ case    4:  		/* cmplw CR6, R24, R11 */
		/* 821CD468h case    4:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821CD468h case    4:*/		return 0x821CD46C;
		  /* 821CD46Ch */ case    5:  		/* bc 12, CR6_EQ, 216 */
		/* 821CD46Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CD544;  }
		/* 821CD46Ch case    5:*/		return 0x821CD470;
		  /* 821CD470h */ case    6:  		/* lwz R9, <#[R25 + 28]> */
		/* 821CD470h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x0000001C) );
		/* 821CD470h case    6:*/		return 0x821CD474;
		  /* 821CD474h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821CD474h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821CD474h case    7:*/		return 0x821CD478;
		  /* 821CD478h */ case    8:  		/* bc 4, CR0_EQ, 204 */
		/* 821CD478h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CD544;  }
		/* 821CD478h case    8:*/		return 0x821CD47C;
		  /* 821CD47Ch */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CD47Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD47Ch case    9:*/		return 0x821CD480;
		  /* 821CD480h */ case   10:  		/* mr R24, R11 */
		/* 821CD480h case   10:*/		regs.R24 = regs.R11;
		/* 821CD480h case   10:*/		return 0x821CD484;
		  /* 821CD484h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821CD484h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CD484h case   11:*/		return 0x821CD488;
		  /* 821CD488h */ case   12:  		/* bc 4, CR0_EQ, 216 */
		/* 821CD488h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CD560;  }
		/* 821CD488h case   12:*/		return 0x821CD48C;
		  /* 821CD48Ch */ case   13:  		/* mr R26, R10 */
		/* 821CD48Ch case   13:*/		regs.R26 = regs.R10;
		/* 821CD48Ch case   13:*/		return 0x821CD490;
		  /* 821CD490h */ case   14:  		/* b 200 */
		/* 821CD490h case   14:*/		return 0x821CD558;
		/* 821CD490h case   14:*/		return 0x821CD494;
	}
	return 0x821CD494;
} // Block from 821CD458h-821CD494h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CD494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD494);
		  /* 821CD494h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821CD494h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD494h case    0:*/		return 0x821CD498;
		  /* 821CD498h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD498h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD498h case    1:*/		return 0x821CD49C;
		  /* 821CD49Ch */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821CD49Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD4C4;  }
		/* 821CD49Ch case    2:*/		return 0x821CD4A0;
		  /* 821CD4A0h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 821CD4A0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD4A0h case    3:*/		return 0x821CD4A4;
		  /* 821CD4A4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD4A4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD4A4h case    4:*/		return 0x821CD4A8;
		  /* 821CD4A8h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821CD4A8h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CD4A8h case    5:*/		return 0x821CD4AC;
		  /* 821CD4ACh */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821CD4ACh case    6:*/		if ( regs.CR[0].eq ) { return 0x821CD4C4;  }
		/* 821CD4ACh case    6:*/		return 0x821CD4B0;
		  /* 821CD4B0h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD4B0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD4B0h case    7:*/		return 0x821CD4B4;
		  /* 821CD4B4h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CD4B4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CD4B4h case    8:*/		return 0x821CD4B8;
		  /* 821CD4B8h */ case    9:  		/* addi R11, R11, 1 */
		/* 821CD4B8h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CD4B8h case    9:*/		return 0x821CD4BC;
		  /* 821CD4BCh */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821CD4BCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CD4BCh case   10:*/		return 0x821CD4C0;
		  /* 821CD4C0h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821CD4C0h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821CD4D0;  }
		/* 821CD4C0h case   11:*/		return 0x821CD4C4;
	}
	return 0x821CD4C4;
} // Block from 821CD494h-821CD4C4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CD4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD4C4);
		  /* 821CD4C4h */ case    0:  		/* li R4, 1 */
		/* 821CD4C4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CD4C4h case    0:*/		return 0x821CD4C8;
		  /* 821CD4C8h */ case    1:  		/* mr R3, R29 */
		/* 821CD4C8h case    1:*/		regs.R3 = regs.R29;
		/* 821CD4C8h case    1:*/		return 0x821CD4CC;
		  /* 821CD4CCh */ case    2:  		/* bl -263172 */
		/* 821CD4CCh case    2:*/		regs.LR = 0x821CD4D0; return 0x8218D0C8;
		/* 821CD4CCh case    2:*/		return 0x821CD4D0;
	}
	return 0x821CD4D0;
} // Block from 821CD4C4h-821CD4D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD4D0);
		  /* 821CD4D0h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD4D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD4D0h case    0:*/		return 0x821CD4D4;
		  /* 821CD4D4h */ case    1:  		/* li R10, 0 */
		/* 821CD4D4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CD4D4h case    1:*/		return 0x821CD4D8;
		  /* 821CD4D8h */ case    2:  		/* addi R9, R11, 4 */
		/* 821CD4D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821CD4D8h case    2:*/		return 0x821CD4DC;
		  /* 821CD4DCh */ case    3:  		/* addi R8, R11, 1 */
		/* 821CD4DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821CD4DCh case    3:*/		return 0x821CD4E0;
		  /* 821CD4E0h */ case    4:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 821CD4E0h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 821CD4E0h case    4:*/		return 0x821CD4E4;
		  /* 821CD4E4h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821CD4E4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD4E4h case    5:*/		return 0x821CD4E8;
		  /* 821CD4E8h */ case    6:  		/* stwx R10, <#[R11 + R3]> */
		/* 821CD4E8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CD4E8h case    6:*/		return 0x821CD4EC;
		  /* 821CD4ECh */ case    7:  		/* lwz R11, <#[R27]> */
		/* 821CD4ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CD4ECh case    7:*/		return 0x821CD4F0;
		  /* 821CD4F0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD4F0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD4F0h case    8:*/		return 0x821CD4F4;
		  /* 821CD4F4h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 821CD4F4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CD51C;  }
		/* 821CD4F4h case    9:*/		return 0x821CD4F8;
		  /* 821CD4F8h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 821CD4F8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD4F8h case   10:*/		return 0x821CD4FC;
		  /* 821CD4FCh */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD4FCh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD4FCh case   11:*/		return 0x821CD500;
		  /* 821CD500h */ case   12:  		/* addic. R3, R11, -4 */
		/* 821CD500h case   12:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CD500h case   12:*/		return 0x821CD504;
		  /* 821CD504h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 821CD504h case   13:*/		if ( regs.CR[0].eq ) { return 0x821CD51C;  }
		/* 821CD504h case   13:*/		return 0x821CD508;
		  /* 821CD508h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD508h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD508h case   14:*/		return 0x821CD50C;
		  /* 821CD50Ch */ case   15:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CD50Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CD50Ch case   15:*/		return 0x821CD510;
		  /* 821CD510h */ case   16:  		/* addi R11, R11, 1 */
		/* 821CD510h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CD510h case   16:*/		return 0x821CD514;
		  /* 821CD514h */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 821CD514h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CD514h case   17:*/		return 0x821CD518;
		  /* 821CD518h */ case   18:  		/* bc 4, CR6_GT, 16 */
		/* 821CD518h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821CD528;  }
		/* 821CD518h case   18:*/		return 0x821CD51C;
	}
	return 0x821CD51C;
} // Block from 821CD4D0h-821CD51Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CD51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD51C);
		  /* 821CD51Ch */ case    0:  		/* li R4, 1 */
		/* 821CD51Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CD51Ch case    0:*/		return 0x821CD520;
		  /* 821CD520h */ case    1:  		/* mr R3, R29 */
		/* 821CD520h case    1:*/		regs.R3 = regs.R29;
		/* 821CD520h case    1:*/		return 0x821CD524;
		  /* 821CD524h */ case    2:  		/* bl -263260 */
		/* 821CD524h case    2:*/		regs.LR = 0x821CD528; return 0x8218D0C8;
		/* 821CD524h case    2:*/		return 0x821CD528;
	}
	return 0x821CD528;
} // Block from 821CD51Ch-821CD528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD528);
		  /* 821CD528h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CD528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD528h case    0:*/		return 0x821CD52C;
		  /* 821CD52Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821CD52Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CD52Ch case    1:*/		return 0x821CD530;
		  /* 821CD530h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CD530h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CD530h case    2:*/		return 0x821CD534;
		  /* 821CD534h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CD534h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CD534h case    3:*/		return 0x821CD538;
		  /* 821CD538h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CD538h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CD538h case    4:*/		return 0x821CD53C;
		  /* 821CD53Ch */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821CD53Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CD53Ch case    5:*/		return 0x821CD540;
		  /* 821CD540h */ case    6:  		/* b -952 */
		/* 821CD540h case    6:*/		return 0x821CD188;
		/* 821CD540h case    6:*/		return 0x821CD544;
	}
	return 0x821CD544;
} // Block from 821CD528h-821CD544h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD544);
		  /* 821CD544h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821CD544h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821CD544h case    0:*/		return 0x821CD548;
		  /* 821CD548h */ case    1:  		/* mr R24, R10 */
		/* 821CD548h case    1:*/		regs.R24 = regs.R10;
		/* 821CD548h case    1:*/		return 0x821CD54C;
		  /* 821CD54Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD54Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD54Ch case    2:*/		return 0x821CD550;
		  /* 821CD550h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD550h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CD560;  }
		/* 821CD550h case    3:*/		return 0x821CD554;
		  /* 821CD554h */ case    4:  		/* mr R26, R11 */
		/* 821CD554h case    4:*/		regs.R26 = regs.R11;
		/* 821CD554h case    4:*/		return 0x821CD558;
	}
	return 0x821CD558;
} // Block from 821CD544h-821CD558h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD558);
		  /* 821CD558h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821CD558h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821CD558h case    0:*/		return 0x821CD55C;
		  /* 821CD55Ch */ case    1:  		/* bc 4, CR6_EQ, -1172 */
		/* 821CD55Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CD0C8;  }
		/* 821CD55Ch case    1:*/		return 0x821CD560;
	}
	return 0x821CD560;
} // Block from 821CD558h-821CD560h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD560);
		  /* 821CD560h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821CD560h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821CD560h case    0:*/		return 0x821CD564;
		  /* 821CD564h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD564h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD564h case    1:*/		return 0x821CD568;
		  /* 821CD568h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD568h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD568h case    2:*/		return 0x821CD56C;
		  /* 821CD56Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD56Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CD57C;  }
		/* 821CD56Ch case    3:*/		return 0x821CD570;
		  /* 821CD570h */ case    4:  		/* mr R25, R11 */
		/* 821CD570h case    4:*/		regs.R25 = regs.R11;
		/* 821CD570h case    4:*/		return 0x821CD574;
		  /* 821CD574h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CD574h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD574h case    5:*/		return 0x821CD578;
		  /* 821CD578h */ case    6:  		/* bc 4, CR6_EQ, -1292 */
		/* 821CD578h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CD06C;  }
		/* 821CD578h case    6:*/		return 0x821CD57C;
	}
	return 0x821CD57C;
} // Block from 821CD560h-821CD57Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD57C);
		  /* 821CD57Ch */ case    0:  		/* mr R3, R21 */
		/* 821CD57Ch case    0:*/		regs.R3 = regs.R21;
		/* 821CD57Ch case    0:*/		return 0x821CD580;
		  /* 821CD580h */ case    1:  		/* addi R1, R1, 192 */
		/* 821CD580h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821CD580h case    1:*/		return 0x821CD584;
		  /* 821CD584h */ case    2:  		/* b -1295096 */
		/* 821CD584h case    2:*/		return 0x8209128C;
		/* 821CD584h case    2:*/		return 0x821CD588;
	}
	return 0x821CD588;
} // Block from 821CD57Ch-821CD588h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD588);
		  /* 821CD588h */ case    0:  		/* mfspr R12, LR */
		/* 821CD588h case    0:*/		regs.R12 = regs.LR;
		/* 821CD588h case    0:*/		return 0x821CD58C;
		  /* 821CD58Ch */ case    1:  		/* bl -1295184 */
		/* 821CD58Ch case    1:*/		regs.LR = 0x821CD590; return 0x8209123C;
		/* 821CD58Ch case    1:*/		return 0x821CD590;
		  /* 821CD590h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821CD590h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821CD590h case    2:*/		return 0x821CD594;
		  /* 821CD594h */ case    3:  		/* mr R27, R4 */
		/* 821CD594h case    3:*/		regs.R27 = regs.R4;
		/* 821CD594h case    3:*/		return 0x821CD598;
		  /* 821CD598h */ case    4:  		/* mr R25, R3 */
		/* 821CD598h case    4:*/		regs.R25 = regs.R3;
		/* 821CD598h case    4:*/		return 0x821CD59C;
		  /* 821CD59Ch */ case    5:  		/* mr R29, R5 */
		/* 821CD59Ch case    5:*/		regs.R29 = regs.R5;
		/* 821CD59Ch case    5:*/		return 0x821CD5A0;
		  /* 821CD5A0h */ case    6:  		/* mr R4, R6 */
		/* 821CD5A0h case    6:*/		regs.R4 = regs.R6;
		/* 821CD5A0h case    6:*/		return 0x821CD5A4;
		  /* 821CD5A4h */ case    7:  		/* mr R22, R7 */
		/* 821CD5A4h case    7:*/		regs.R22 = regs.R7;
		/* 821CD5A4h case    7:*/		return 0x821CD5A8;
		  /* 821CD5A8h */ case    8:  		/* lwz R11, <#[R27 + 76]> */
		/* 821CD5A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821CD5A8h case    8:*/		return 0x821CD5AC;
		  /* 821CD5ACh */ case    9:  		/* mr R23, R8 */
		/* 821CD5ACh case    9:*/		regs.R23 = regs.R8;
		/* 821CD5ACh case    9:*/		return 0x821CD5B0;
		  /* 821CD5B0h */ case   10:  		/* li R21, 1 */
		/* 821CD5B0h case   10:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821CD5B0h case   10:*/		return 0x821CD5B4;
		  /* 821CD5B4h */ case   11:  		/* rlwinm. R10, R11, 0, 13, 31 */
		/* 821CD5B4h case   11:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R10,regs.R11);
		/* 821CD5B4h case   11:*/		return 0x821CD5B8;
		  /* 821CD5B8h */ case   12:  		/* bc 4, CR0_EQ, 28 */
		/* 821CD5B8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CD5D4;  }
		/* 821CD5B8h case   12:*/		return 0x821CD5BC;
		  /* 821CD5BCh */ case   13:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821CD5BCh case   13:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821CD5BCh case   13:*/		return 0x821CD5C0;
		  /* 821CD5C0h */ case   14:  		/* bc 4, CR0_EQ, 20 */
		/* 821CD5C0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821CD5D4;  }
		/* 821CD5C0h case   14:*/		return 0x821CD5C4;
		  /* 821CD5C4h */ case   15:  		/* lwz R11, <#[R27 + 68]> */
		/* 821CD5C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000044) );
		/* 821CD5C4h case   15:*/		return 0x821CD5C8;
		  /* 821CD5C8h */ case   16:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821CD5C8h case   16:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821CD5C8h case   16:*/		return 0x821CD5CC;
		  /* 821CD5CCh */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 821CD5CCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821CD5CCh case   17:*/		return 0x821CD5D0;
		  /* 821CD5D0h */ case   18:  		/* bc 12, CR6_EQ, 276 */
		/* 821CD5D0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CD6E4;  }
		/* 821CD5D0h case   18:*/		return 0x821CD5D4;
	}
	return 0x821CD5D4;
} // Block from 821CD588h-821CD5D4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CD5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD5D4);
		  /* 821CD5D4h */ case    0:  		/* lwz R11, <#[R25 + 4]> */
		/* 821CD5D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821CD5D4h case    0:*/		return 0x821CD5D8;
		  /* 821CD5D8h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD5D8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD5D8h case    1:*/		return 0x821CD5DC;
		  /* 821CD5DCh */ case    2:  		/* bc 4, CR0_EQ, 264 */
		/* 821CD5DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD6E4;  }
		/* 821CD5DCh case    2:*/		return 0x821CD5E0;
		  /* 821CD5E0h */ case    3:  		/* mr R7, R11 */
		/* 821CD5E0h case    3:*/		regs.R7 = regs.R11;
		/* 821CD5E0h case    3:*/		return 0x821CD5E4;
		  /* 821CD5E4h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821CD5E4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CD5E4h case    4:*/		return 0x821CD5E8;
		  /* 821CD5E8h */ case    5:  		/* bc 12, CR0_EQ, 252 */
		/* 821CD5E8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CD6E4;  }
		/* 821CD5E8h case    5:*/		return 0x821CD5EC;
		  /* 821CD5ECh */ case    6:  		/* lis R11, 4095 */
		/* 821CD5ECh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFF);
		/* 821CD5ECh case    6:*/		return 0x821CD5F0;
		  /* 821CD5F0h */ case    7:  		/* ori R6, R11, 65535 */
		/* 821CD5F0h case    7:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xFFFF);
		/* 821CD5F0h case    7:*/		return 0x821CD5F4;
		  /* 821CD5F4h */ case    8:  		/* cmplwi CR6, R23, 0 */
		/* 821CD5F4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821CD5F4h case    8:*/		return 0x821CD5F8;
		  /* 821CD5F8h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821CD5F8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CD610;  }
		/* 821CD5F8h case    9:*/		return 0x821CD5FC;
		  /* 821CD5FCh */ case   10:  		/* lwz R11, <#[R7 + 44]> */
		/* 821CD5FCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000002C) );
		/* 821CD5FCh case   10:*/		return 0x821CD600;
		  /* 821CD600h */ case   11:  		/* cmplw CR6, R11, R23 */
		/* 821CD600h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821CD600h case   11:*/		return 0x821CD604;
		  /* 821CD604h */ case   12:  		/* bc 4, CR6_EQ, 196 */
		/* 821CD604h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821CD6C8;  }
		/* 821CD604h case   12:*/		return 0x821CD608;
		  /* 821CD608h */ case   13:  		/* lwz R10, <#[R7 + 80]> */
		/* 821CD608h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000050) );
		/* 821CD608h case   13:*/		return 0x821CD60C;
		  /* 821CD60Ch */ case   14:  		/* b 96 */
		/* 821CD60Ch case   14:*/		return 0x821CD66C;
		/* 821CD60Ch case   14:*/		return 0x821CD610;
	}
	return 0x821CD610;
} // Block from 821CD5D4h-821CD610h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CD610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD610);
		  /* 821CD610h */ case    0:  		/* lwz R11, <#[R29 + 48]> */
		/* 821CD610h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821CD610h case    0:*/		return 0x821CD614;
		  /* 821CD614h */ case    1:  		/* lwz R10, <#[R7 + 40]> */
		/* 821CD614h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000028) );
		/* 821CD614h case    1:*/		return 0x821CD618;
		  /* 821CD618h */ case    2:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821CD618h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821CD618h case    2:*/		return 0x821CD61C;
		  /* 821CD61Ch */ case    3:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821CD61Ch case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821CD61Ch case    3:*/		return 0x821CD620;
		  /* 821CD620h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821CD620h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821CD620h case    4:*/		return 0x821CD624;
		  /* 821CD624h */ case    5:  		/* addi R11, R11, 1 */
		/* 821CD624h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CD624h case    5:*/		return 0x821CD628;
		  /* 821CD628h */ case    6:  		/* slw R9, R21, R9 */
		/* 821CD628h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 821CD628h case    6:*/		return 0x821CD62C;
		  /* 821CD62Ch */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CD62Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CD62Ch case    7:*/		return 0x821CD630;
		  /* 821CD630h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821CD630h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821CD630h case    8:*/		return 0x821CD634;
		  /* 821CD634h */ case    9:  		/* and. R11, R11, R9 */
		/* 821CD634h case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CD634h case    9:*/		return 0x821CD638;
		  /* 821CD638h */ case   10:  		/* bc 12, CR0_EQ, 144 */
		/* 821CD638h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CD6C8;  }
		/* 821CD638h case   10:*/		return 0x821CD63C;
		  /* 821CD63Ch */ case   11:  		/* mr R11, R7 */
		/* 821CD63Ch case   11:*/		regs.R11 = regs.R7;
		/* 821CD63Ch case   11:*/		return 0x821CD640;
		  /* 821CD640h */ case   12:  		/* lwz R10, <#[R11 + 48]> */
		/* 821CD640h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821CD640h case   12:*/		return 0x821CD644;
		  /* 821CD644h */ case   13:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821CD644h case   13:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821CD644h case   13:*/		return 0x821CD648;
		  /* 821CD648h */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD648h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821CD658;  }
		/* 821CD648h case   14:*/		return 0x821CD64C;
		  /* 821CD64Ch */ case   15:  		/* lwz R11, <#[R11 + 52]> */
		/* 821CD64Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821CD64Ch case   15:*/		return 0x821CD650;
		  /* 821CD650h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821CD650h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD650h case   16:*/		return 0x821CD654;
		  /* 821CD654h */ case   17:  		/* bc 4, CR6_EQ, -20 */
		/* 821CD654h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821CD640;  }
		/* 821CD654h case   17:*/		return 0x821CD658;
	}
	return 0x821CD658;
} // Block from 821CD610h-821CD658h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CD658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD658);
		  /* 821CD658h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CD658h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD658h case    0:*/		return 0x821CD65C;
		  /* 821CD65Ch */ case    1:  		/* bc 12, CR6_EQ, 220 */
		/* 821CD65Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CD738;  }
		/* 821CD65Ch case    1:*/		return 0x821CD660;
		  /* 821CD660h */ case    2:  		/* cmplw CR6, R11, R29 */
		/* 821CD660h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821CD660h case    2:*/		return 0x821CD664;
		  /* 821CD664h */ case    3:  		/* bc 4, CR6_EQ, 100 */
		/* 821CD664h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CD6C8;  }
		/* 821CD664h case    3:*/		return 0x821CD668;
		  /* 821CD668h */ case    4:  		/* mr R10, R7 */
		/* 821CD668h case    4:*/		regs.R10 = regs.R7;
		/* 821CD668h case    4:*/		return 0x821CD66C;
	}
	return 0x821CD66C;
} // Block from 821CD658h-821CD66Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD66C);
		  /* 821CD66Ch */ case    0:  		/* lwz R11, <#[R10 + 76]> */
		/* 821CD66Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821CD66Ch case    0:*/		return 0x821CD670;
		  /* 821CD670h */ case    1:  		/* rlwinm. R9, R11, 0, 13, 31 */
		/* 821CD670h case    1:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821CD670h case    1:*/		return 0x821CD674;
		  /* 821CD674h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD674h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD684;  }
		/* 821CD674h case    2:*/		return 0x821CD678;
		  /* 821CD678h */ case    3:  		/* lwz R9, <#[R27 + 76]> */
		/* 821CD678h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000004C) );
		/* 821CD678h case    3:*/		return 0x821CD67C;
		  /* 821CD67Ch */ case    4:  		/* rlwimi R11, R9, 0, 13, 31 */
		/* 821CD67Ch case    4:*/		cpu::op::rlwimi<0,0,13,31>(regs,&regs.R11,regs.R9);
		/* 821CD67Ch case    4:*/		return 0x821CD680;
		  /* 821CD680h */ case    5:  		/* stw R11, <#[R10 + 76]> */
		/* 821CD680h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821CD680h case    5:*/		return 0x821CD684;
	}
	return 0x821CD684;
} // Block from 821CD66Ch-821CD684h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CD684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD684);
		  /* 821CD684h */ case    0:  		/* lwz R11, <#[R10 + 76]> */
		/* 821CD684h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821CD684h case    0:*/		return 0x821CD688;
		  /* 821CD688h */ case    1:  		/* rlwinm. R9, R11, 0, 12, 12 */
		/* 821CD688h case    1:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R9,regs.R11);
		/* 821CD688h case    1:*/		return 0x821CD68C;
		  /* 821CD68Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD68Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CD69C;  }
		/* 821CD68Ch case    2:*/		return 0x821CD690;
		  /* 821CD690h */ case    3:  		/* lwz R9, <#[R27 + 76]> */
		/* 821CD690h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000004C) );
		/* 821CD690h case    3:*/		return 0x821CD694;
		  /* 821CD694h */ case    4:  		/* rlwimi R11, R9, 0, 12, 12 */
		/* 821CD694h case    4:*/		cpu::op::rlwimi<0,0,12,12>(regs,&regs.R11,regs.R9);
		/* 821CD694h case    4:*/		return 0x821CD698;
		  /* 821CD698h */ case    5:  		/* stw R11, <#[R10 + 76]> */
		/* 821CD698h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821CD698h case    5:*/		return 0x821CD69C;
	}
	return 0x821CD69C;
} // Block from 821CD684h-821CD69Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CD69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD69C);
		  /* 821CD69Ch */ case    0:  		/* lwz R9, <#[R27 + 68]> */
		/* 821CD69Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000044) );
		/* 821CD69Ch case    0:*/		return 0x821CD6A0;
		  /* 821CD6A0h */ case    1:  		/* lwz R11, <#[R10 + 68]> */
		/* 821CD6A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000044) );
		/* 821CD6A0h case    1:*/		return 0x821CD6A4;
		  /* 821CD6A4h */ case    2:  		/* rlwinm R8, R9, 0, 4, 31 */
		/* 821CD6A4h case    2:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R8,regs.R9);
		/* 821CD6A4h case    2:*/		return 0x821CD6A8;
		  /* 821CD6A8h */ case    3:  		/* rlwinm R9, R11, 0, 4, 31 */
		/* 821CD6A8h case    3:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R9,regs.R11);
		/* 821CD6A8h case    3:*/		return 0x821CD6AC;
		  /* 821CD6ACh */ case    4:  		/* add R9, R8, R9 */
		/* 821CD6ACh case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821CD6ACh case    4:*/		return 0x821CD6B0;
		  /* 821CD6B0h */ case    5:  		/* addi R9, R9, -1 */
		/* 821CD6B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CD6B0h case    5:*/		return 0x821CD6B4;
		  /* 821CD6B4h */ case    6:  		/* cmplw CR6, R9, R6 */
		/* 821CD6B4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 821CD6B4h case    6:*/		return 0x821CD6B8;
		  /* 821CD6B8h */ case    7:  		/* bc 4, CR6_GT, 8 */
		/* 821CD6B8h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821CD6C0;  }
		/* 821CD6B8h case    7:*/		return 0x821CD6BC;
		  /* 821CD6BCh */ case    8:  		/* mr R9, R6 */
		/* 821CD6BCh case    8:*/		regs.R9 = regs.R6;
		/* 821CD6BCh case    8:*/		return 0x821CD6C0;
	}
	return 0x821CD6C0;
} // Block from 821CD69Ch-821CD6C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CD6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD6C0);
		  /* 821CD6C0h */ case    0:  		/* rlwimi R11, R9, 0, 4, 31 */
		/* 821CD6C0h case    0:*/		cpu::op::rlwimi<0,0,4,31>(regs,&regs.R11,regs.R9);
		/* 821CD6C0h case    0:*/		return 0x821CD6C4;
		  /* 821CD6C4h */ case    1:  		/* stw R11, <#[R10 + 68]> */
		/* 821CD6C4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000044) );
		/* 821CD6C4h case    1:*/		return 0x821CD6C8;
	}
	return 0x821CD6C8;
} // Block from 821CD6C0h-821CD6C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD6C8);
		  /* 821CD6C8h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821CD6C8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821CD6C8h case    0:*/		return 0x821CD6CC;
		  /* 821CD6CCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD6CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD6CCh case    1:*/		return 0x821CD6D0;
		  /* 821CD6D0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD6D0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD6D0h case    2:*/		return 0x821CD6D4;
		  /* 821CD6D4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD6D4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CD6E4;  }
		/* 821CD6D4h case    3:*/		return 0x821CD6D8;
		  /* 821CD6D8h */ case    4:  		/* mr R7, R11 */
		/* 821CD6D8h case    4:*/		regs.R7 = regs.R11;
		/* 821CD6D8h case    4:*/		return 0x821CD6DC;
		  /* 821CD6DCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CD6DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD6DCh case    5:*/		return 0x821CD6E0;
		  /* 821CD6E0h */ case    6:  		/* bc 4, CR6_EQ, -236 */
		/* 821CD6E0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CD5F4;  }
		/* 821CD6E0h case    6:*/		return 0x821CD6E4;
	}
	return 0x821CD6E4;
} // Block from 821CD6C8h-821CD6E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CD6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD6E4);
		  /* 821CD6E4h */ case    0:  		/* li R6, 1 */
		/* 821CD6E4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CD6E4h case    0:*/		return 0x821CD6E8;
		  /* 821CD6E8h */ case    1:  		/* li R5, 0 */
		/* 821CD6E8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CD6E8h case    1:*/		return 0x821CD6EC;
		  /* 821CD6ECh */ case    2:  		/* mr R3, R25 */
		/* 821CD6ECh case    2:*/		regs.R3 = regs.R25;
		/* 821CD6ECh case    2:*/		return 0x821CD6F0;
		  /* 821CD6F0h */ case    3:  		/* bl 384216 */
		/* 821CD6F0h case    3:*/		regs.LR = 0x821CD6F4; return 0x8222B3C8;
		/* 821CD6F0h case    3:*/		return 0x821CD6F4;
		  /* 821CD6F4h */ case    4:  		/* li R24, 0 */
		/* 821CD6F4h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821CD6F4h case    4:*/		return 0x821CD6F8;
		  /* 821CD6F8h */ case    5:  		/* lwz R10, <#[R22 + 8]> */
		/* 821CD6F8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000008) );
		/* 821CD6F8h case    5:*/		return 0x821CD6FC;
		  /* 821CD6FCh */ case    6:  		/* mr R26, R24 */
		/* 821CD6FCh case    6:*/		regs.R26 = regs.R24;
		/* 821CD6FCh case    6:*/		return 0x821CD700;
		  /* 821CD700h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821CD700h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CD700h case    7:*/		return 0x821CD704;
		  /* 821CD704h */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 821CD704h case    8:*/		if ( regs.CR[6].eq ) { return 0x821CD758;  }
		/* 821CD704h case    8:*/		return 0x821CD708;
		  /* 821CD708h */ case    9:  		/* lwz R11, <#[R10 + 4]> */
		/* 821CD708h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821CD708h case    9:*/		return 0x821CD70C;
		  /* 821CD70Ch */ case   10:  		/* cmplw CR6, R11, R27 */
		/* 821CD70Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821CD70Ch case   10:*/		return 0x821CD710;
		  /* 821CD710h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 821CD710h case   11:*/		if ( regs.CR[6].eq ) { return 0x821CD74C;  }
		/* 821CD710h case   11:*/		return 0x821CD714;
		  /* 821CD714h */ case   12:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CD714h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CD714h case   12:*/		return 0x821CD718;
		  /* 821CD718h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821CD718h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD718h case   13:*/		return 0x821CD71C;
		  /* 821CD71Ch */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821CD71Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821CD74C;  }
		/* 821CD71Ch case   14:*/		return 0x821CD720;
		  /* 821CD720h */ case   15:  		/* lwz R9, <#[R11]> */
		/* 821CD720h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD720h case   15:*/		return 0x821CD724;
		  /* 821CD724h */ case   16:  		/* lwz R9, <#[R9 + 48]> */
		/* 821CD724h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000030) );
		/* 821CD724h case   16:*/		return 0x821CD728;
		  /* 821CD728h */ case   17:  		/* rlwinm. R9, R9, 13, 31, 31 */
		/* 821CD728h case   17:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R9,regs.R9);
		/* 821CD728h case   17:*/		return 0x821CD72C;
		  /* 821CD72Ch */ case   18:  		/* bc 4, CR0_EQ, 40 */
		/* 821CD72Ch case   18:*/		if ( !regs.CR[0].eq ) { return 0x821CD754;  }
		/* 821CD72Ch case   18:*/		return 0x821CD730;
		  /* 821CD730h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CD730h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CD730h case   19:*/		return 0x821CD734;
		  /* 821CD734h */ case   20:  		/* b -28 */
		/* 821CD734h case   20:*/		return 0x821CD718;
		/* 821CD734h case   20:*/		return 0x821CD738;
	}
	return 0x821CD738;
} // Block from 821CD6E4h-821CD738h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CD738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD738);
		  /* 821CD738h */ case    0:  		/* rlwinm R11, R7, 0, 0, 19 */
		/* 821CD738h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R7);
		/* 821CD738h case    0:*/		return 0x821CD73C;
		  /* 821CD73Ch */ case    1:  		/* li R4, 4800 */
		/* 821CD73Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821CD73Ch case    1:*/		return 0x821CD740;
		  /* 821CD740h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821CD740h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD740h case    2:*/		return 0x821CD744;
		  /* 821CD744h */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 821CD744h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821CD744h case    3:*/		return 0x821CD748;
		  /* 821CD748h */ case    4:  		/* bl -506080 */
		/* 821CD748h case    4:*/		regs.LR = 0x821CD74C; return 0x82151E68;
		/* 821CD748h case    4:*/		return 0x821CD74C;
	}
	return 0x821CD74C;
} // Block from 821CD738h-821CD74Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD74C);
		  /* 821CD74Ch */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 821CD74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821CD74Ch case    0:*/		return 0x821CD750;
		  /* 821CD750h */ case    1:  		/* b -80 */
		/* 821CD750h case    1:*/		return 0x821CD700;
		/* 821CD750h case    1:*/		return 0x821CD754;
	}
	return 0x821CD754;
} // Block from 821CD74Ch-821CD754h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD754);
		  /* 821CD754h */ case    0:  		/* mr R26, R21 */
		/* 821CD754h case    0:*/		regs.R26 = regs.R21;
		/* 821CD754h case    0:*/		return 0x821CD758;
	}
	return 0x821CD758;
} // Block from 821CD754h-821CD758h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD758);
		  /* 821CD758h */ case    0:  		/* lwz R11, <#[R29 + 116]> */
		/* 821CD758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821CD758h case    0:*/		return 0x821CD75C;
		  /* 821CD75Ch */ case    1:  		/* mr R28, R24 */
		/* 821CD75Ch case    1:*/		regs.R28 = regs.R24;
		/* 821CD75Ch case    1:*/		return 0x821CD760;
		  /* 821CD760h */ case    2:  		/* addi R31, R11, 16 */
		/* 821CD760h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821CD760h case    2:*/		return 0x821CD764;
		  /* 821CD764h */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 821CD764h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821CD764h case    3:*/		return 0x821CD768;
		  /* 821CD768h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821CD768h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CD768h case    4:*/		return 0x821CD76C;
		  /* 821CD76Ch */ case    5:  		/* bc 12, CR6_EQ, 136 */
		/* 821CD76Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CD7F4;  }
		/* 821CD76Ch case    5:*/		return 0x821CD770;
		  /* 821CD770h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821CD770h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CD770h case    6:*/		return 0x821CD774;
		  /* 821CD774h */ case    7:  		/* bc 12, CR6_EQ, 128 */
		/* 821CD774h case    7:*/		if ( regs.CR[6].eq ) { return 0x821CD7F4;  }
		/* 821CD774h case    7:*/		return 0x821CD778;
		  /* 821CD778h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821CD778h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CD778h case    8:*/		return 0x821CD77C;
		  /* 821CD77Ch */ case    9:  		/* lwz R10, <#[R11 + 48]> */
		/* 821CD77Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821CD77Ch case    9:*/		return 0x821CD780;
		  /* 821CD780h */ case   10:  		/* rlwinm. R9, R10, 10, 31, 31 */
		/* 821CD780h case   10:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R10);
		/* 821CD780h case   10:*/		return 0x821CD784;
		  /* 821CD784h */ case   11:  		/* bc 4, CR0_EQ, 104 */
		/* 821CD784h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821CD7EC;  }
		/* 821CD784h case   11:*/		return 0x821CD788;
		  /* 821CD788h */ case   12:  		/* rlwinm. R9, R10, 12, 31, 31 */
		/* 821CD788h case   12:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R9,regs.R10);
		/* 821CD788h case   12:*/		return 0x821CD78C;
		  /* 821CD78Ch */ case   13:  		/* bc 12, CR0_EQ, 96 */
		/* 821CD78Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821CD7EC;  }
		/* 821CD78Ch case   13:*/		return 0x821CD790;
		  /* 821CD790h */ case   14:  		/* mr R28, R11 */
		/* 821CD790h case   14:*/		regs.R28 = regs.R11;
		/* 821CD790h case   14:*/		return 0x821CD794;
		  /* 821CD794h */ case   15:  		/* cmplwi CR6, R23, 0 */
		/* 821CD794h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821CD794h case   15:*/		return 0x821CD798;
		  /* 821CD798h */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 821CD798h case   16:*/		if ( regs.CR[6].eq ) { return 0x821CD7A4;  }
		/* 821CD798h case   16:*/		return 0x821CD79C;
		  /* 821CD79Ch */ case   17:  		/* lwz R28, <#[R11 + 80]> */
		/* 821CD79Ch case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000050) );
		/* 821CD79Ch case   17:*/		return 0x821CD7A0;
		  /* 821CD7A0h */ case   18:  		/* b 12 */
		/* 821CD7A0h case   18:*/		return 0x821CD7AC;
		/* 821CD7A0h case   18:*/		return 0x821CD7A4;
	}
	return 0x821CD7A4;
} // Block from 821CD758h-821CD7A4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7A4);
		  /* 821CD7A4h */ case    0:  		/* rlwinm R10, R10, 0, 12, 10 */
		/* 821CD7A4h case    0:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R10,regs.R10);
		/* 821CD7A4h case    0:*/		return 0x821CD7A8;
		  /* 821CD7A8h */ case    1:  		/* stw R10, <#[R11 + 48]> */
		/* 821CD7A8h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821CD7A8h case    1:*/		return 0x821CD7AC;
	}
	return 0x821CD7AC;
} // Block from 821CD7A4h-821CD7ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7AC);
		  /* 821CD7ACh */ case    0:  		/* lwz R11, <#[R28 + 36]> */
		/* 821CD7ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821CD7ACh case    0:*/		return 0x821CD7B0;
		  /* 821CD7B0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CD7B0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CD7B0h case    1:*/		return 0x821CD7B4;
		  /* 821CD7B4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD7B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CD7C0;  }
		/* 821CD7B4h case    2:*/		return 0x821CD7B8;
		  /* 821CD7B8h */ case    3:  		/* mr R4, R24 */
		/* 821CD7B8h case    3:*/		regs.R4 = regs.R24;
		/* 821CD7B8h case    3:*/		return 0x821CD7BC;
		  /* 821CD7BCh */ case    4:  		/* b 16 */
		/* 821CD7BCh case    4:*/		return 0x821CD7CC;
		/* 821CD7BCh case    4:*/		return 0x821CD7C0;
	}
	return 0x821CD7C0;
} // Block from 821CD7ACh-821CD7C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7C0);
		  /* 821CD7C0h */ case    0:  		/* lwz R11, <#[R28 + 32]> */
		/* 821CD7C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 821CD7C0h case    0:*/		return 0x821CD7C4;
		  /* 821CD7C4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD7C4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD7C4h case    1:*/		return 0x821CD7C8;
		  /* 821CD7C8h */ case    2:  		/* addi R4, R11, -40 */
		/* 821CD7C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821CD7C8h case    2:*/		return 0x821CD7CC;
	}
	return 0x821CD7CC;
} // Block from 821CD7C0h-821CD7CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7CC);
		  /* 821CD7CCh */ case    0:  		/* li R6, 1 */
		/* 821CD7CCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CD7CCh case    0:*/		return 0x821CD7D0;
		  /* 821CD7D0h */ case    1:  		/* li R5, 0 */
		/* 821CD7D0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CD7D0h case    1:*/		return 0x821CD7D4;
		  /* 821CD7D4h */ case    2:  		/* mr R3, R25 */
		/* 821CD7D4h case    2:*/		regs.R3 = regs.R25;
		/* 821CD7D4h case    2:*/		return 0x821CD7D8;
		  /* 821CD7D8h */ case    3:  		/* bl 383984 */
		/* 821CD7D8h case    3:*/		regs.LR = 0x821CD7DC; return 0x8222B3C8;
		/* 821CD7D8h case    3:*/		return 0x821CD7DC;
		  /* 821CD7DCh */ case    4:  		/* mr R5, R25 */
		/* 821CD7DCh case    4:*/		regs.R5 = regs.R25;
		/* 821CD7DCh case    4:*/		return 0x821CD7E0;
		  /* 821CD7E0h */ case    5:  		/* mr R4, R22 */
		/* 821CD7E0h case    5:*/		regs.R4 = regs.R22;
		/* 821CD7E0h case    5:*/		return 0x821CD7E4;
		  /* 821CD7E4h */ case    6:  		/* mr R3, R28 */
		/* 821CD7E4h case    6:*/		regs.R3 = regs.R28;
		/* 821CD7E4h case    6:*/		return 0x821CD7E8;
		  /* 821CD7E8h */ case    7:  		/* bl 402168 */
		/* 821CD7E8h case    7:*/		regs.LR = 0x821CD7EC; return 0x8222FAE0;
		/* 821CD7E8h case    7:*/		return 0x821CD7EC;
	}
	return 0x821CD7EC;
} // Block from 821CD7CCh-821CD7ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7EC);
		  /* 821CD7ECh */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821CD7ECh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821CD7ECh case    0:*/		return 0x821CD7F0;
		  /* 821CD7F0h */ case    1:  		/* b -128 */
		/* 821CD7F0h case    1:*/		return 0x821CD770;
		/* 821CD7F0h case    1:*/		return 0x821CD7F4;
	}
	return 0x821CD7F4;
} // Block from 821CD7ECh-821CD7F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD7F4);
		  /* 821CD7F4h */ case    0:  		/* mr R5, R25 */
		/* 821CD7F4h case    0:*/		regs.R5 = regs.R25;
		/* 821CD7F4h case    0:*/		return 0x821CD7F8;
		  /* 821CD7F8h */ case    1:  		/* mr R4, R22 */
		/* 821CD7F8h case    1:*/		regs.R4 = regs.R22;
		/* 821CD7F8h case    1:*/		return 0x821CD7FC;
		  /* 821CD7FCh */ case    2:  		/* mr R3, R27 */
		/* 821CD7FCh case    2:*/		regs.R3 = regs.R27;
		/* 821CD7FCh case    2:*/		return 0x821CD800;
		  /* 821CD800h */ case    3:  		/* bl 401768 */
		/* 821CD800h case    3:*/		regs.LR = 0x821CD804; return 0x8222F968;
		/* 821CD800h case    3:*/		return 0x821CD804;
		  /* 821CD804h */ case    4:  		/* cmplwi CR6, R23, 0 */
		/* 821CD804h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821CD804h case    4:*/		return 0x821CD808;
		  /* 821CD808h */ case    5:  		/* bc 12, CR6_EQ, 88 */
		/* 821CD808h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CD860;  }
		/* 821CD808h case    5:*/		return 0x821CD80C;
		  /* 821CD80Ch */ case    6:  		/* mr R5, R25 */
		/* 821CD80Ch case    6:*/		regs.R5 = regs.R25;
		/* 821CD80Ch case    6:*/		return 0x821CD810;
		  /* 821CD810h */ case    7:  		/* mr R4, R29 */
		/* 821CD810h case    7:*/		regs.R4 = regs.R29;
		/* 821CD810h case    7:*/		return 0x821CD814;
		  /* 821CD814h */ case    8:  		/* mr R3, R27 */
		/* 821CD814h case    8:*/		regs.R3 = regs.R27;
		/* 821CD814h case    8:*/		return 0x821CD818;
		  /* 821CD818h */ case    9:  		/* bl 401744 */
		/* 821CD818h case    9:*/		regs.LR = 0x821CD81C; return 0x8222F968;
		/* 821CD818h case    9:*/		return 0x821CD81C;
		  /* 821CD81Ch */ case   10:  		/* lwz R29, <#[R29 + 80]> */
		/* 821CD81Ch case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000050) );
		/* 821CD81Ch case   10:*/		return 0x821CD820;
		  /* 821CD820h */ case   11:  		/* addi R30, R29, 8 */
		/* 821CD820h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x8);
		/* 821CD820h case   11:*/		return 0x821CD824;
		  /* 821CD824h */ case   12:  		/* lwz R31, <#[R29 + 8]> */
		/* 821CD824h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 821CD824h case   12:*/		return 0x821CD828;
		  /* 821CD828h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 821CD828h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CD828h case   13:*/		return 0x821CD82C;
		  /* 821CD82Ch */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 821CD82Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821CD86C;  }
		/* 821CD82Ch case   14:*/		return 0x821CD830;
		  /* 821CD830h */ case   15:  		/* lwz R3, <#[R31 + 4]> */
		/* 821CD830h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821CD830h case   15:*/		return 0x821CD834;
		  /* 821CD834h */ case   16:  		/* cmplw CR6, R3, R27 */
		/* 821CD834h case   16:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 821CD834h case   16:*/		return 0x821CD838;
		  /* 821CD838h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 821CD838h case   17:*/		if ( regs.CR[6].eq ) { return 0x821CD848;  }
		/* 821CD838h case   17:*/		return 0x821CD83C;
		  /* 821CD83Ch */ case   18:  		/* mr R5, R25 */
		/* 821CD83Ch case   18:*/		regs.R5 = regs.R25;
		/* 821CD83Ch case   18:*/		return 0x821CD840;
		  /* 821CD840h */ case   19:  		/* mr R4, R29 */
		/* 821CD840h case   19:*/		regs.R4 = regs.R29;
		/* 821CD840h case   19:*/		return 0x821CD844;
		  /* 821CD844h */ case   20:  		/* bl 401700 */
		/* 821CD844h case   20:*/		regs.LR = 0x821CD848; return 0x8222F968;
		/* 821CD844h case   20:*/		return 0x821CD848;
	}
	return 0x821CD848;
} // Block from 821CD7F4h-821CD848h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CD848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD848);
		  /* 821CD848h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821CD848h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CD848h case    0:*/		return 0x821CD84C;
		  /* 821CD84Ch */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821CD84Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821CD84Ch case    1:*/		return 0x821CD850;
		  /* 821CD850h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821CD850h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CD858;  }
		/* 821CD850h case    2:*/		return 0x821CD854;
		  /* 821CD854h */ case    3:  		/* addi R30, R31, 12 */
		/* 821CD854h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821CD854h case    3:*/		return 0x821CD858;
	}
	return 0x821CD858;
} // Block from 821CD848h-821CD858h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CD858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD858);
		  /* 821CD858h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821CD858h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821CD858h case    0:*/		return 0x821CD85C;
		  /* 821CD85Ch */ case    1:  		/* b -52 */
		/* 821CD85Ch case    1:*/		return 0x821CD828;
		/* 821CD85Ch case    1:*/		return 0x821CD860;
	}
	return 0x821CD860;
} // Block from 821CD858h-821CD860h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CD860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD860);
		  /* 821CD860h */ case    0:  		/* lwz R11, <#[R29 + 48]> */
		/* 821CD860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821CD860h case    0:*/		return 0x821CD864;
		  /* 821CD864h */ case    1:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 821CD864h case    1:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 821CD864h case    1:*/		return 0x821CD868;
		  /* 821CD868h */ case    2:  		/* stw R11, <#[R29 + 48]> */
		/* 821CD868h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821CD868h case    2:*/		return 0x821CD86C;
	}
	return 0x821CD86C;
} // Block from 821CD860h-821CD86Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD86C);
		  /* 821CD86Ch */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821CD86Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821CD86Ch case    0:*/		return 0x821CD870;
		  /* 821CD870h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821CD870h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CD880;  }
		/* 821CD870h case    1:*/		return 0x821CD874;
		  /* 821CD874h */ case    2:  		/* lwz R11, <#[R22 + 48]> */
		/* 821CD874h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000030) );
		/* 821CD874h case    2:*/		return 0x821CD878;
		  /* 821CD878h */ case    3:  		/* rlwinm R11, R11, 0, 11, 9 */
		/* 821CD878h case    3:*/		cpu::op::rlwinm<0,0,11,9>(regs,&regs.R11,regs.R11);
		/* 821CD878h case    3:*/		return 0x821CD87C;
		  /* 821CD87Ch */ case    4:  		/* stw R11, <#[R22 + 48]> */
		/* 821CD87Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000030) );
		/* 821CD87Ch case    4:*/		return 0x821CD880;
	}
	return 0x821CD880;
} // Block from 821CD86Ch-821CD880h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CD880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD880);
		  /* 821CD880h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821CD880h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821CD880h case    0:*/		return 0x821CD884;
		  /* 821CD884h */ case    1:  		/* stb R21, <#[R1 + 80]> */
		/* 821CD884h case    1:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 821CD884h case    1:*/		return 0x821CD888;
		  /* 821CD888h */ case    2:  		/* mr R3, R25 */
		/* 821CD888h case    2:*/		regs.R3 = regs.R25;
		/* 821CD888h case    2:*/		return 0x821CD88C;
		  /* 821CD88Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821CD88Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821CD8A4;  }
		/* 821CD88Ch case    3:*/		return 0x821CD890;
		  /* 821CD890h */ case    4:  		/* li R6, 0 */
		/* 821CD890h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CD890h case    4:*/		return 0x821CD894;
		  /* 821CD894h */ case    5:  		/* addi R5, R1, 80 */
		/* 821CD894h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821CD894h case    5:*/		return 0x821CD898;
		  /* 821CD898h */ case    6:  		/* mr R4, R23 */
		/* 821CD898h case    6:*/		regs.R4 = regs.R23;
		/* 821CD898h case    6:*/		return 0x821CD89C;
		  /* 821CD89Ch */ case    7:  		/* bl -31844 */
		/* 821CD89Ch case    7:*/		regs.LR = 0x821CD8A0; return 0x821C5C38;
		/* 821CD89Ch case    7:*/		return 0x821CD8A0;
		  /* 821CD8A0h */ case    8:  		/* b 52 */
		/* 821CD8A0h case    8:*/		return 0x821CD8D4;
		/* 821CD8A0h case    8:*/		return 0x821CD8A4;
	}
	return 0x821CD8A4;
} // Block from 821CD880h-821CD8A4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CD8A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD8A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD8A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD8A4);
		  /* 821CD8A4h */ case    0:  		/* bl 121468 */
		/* 821CD8A4h case    0:*/		regs.LR = 0x821CD8A8; return 0x821EB320;
		/* 821CD8A4h case    0:*/		return 0x821CD8A8;
		  /* 821CD8A8h */ case    1:  		/* stb R24, <#[R1 + 81]> */
		/* 821CD8A8h case    1:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000051) );
		/* 821CD8A8h case    1:*/		return 0x821CD8AC;
		  /* 821CD8ACh */ case    2:  		/* mr R6, R27 */
		/* 821CD8ACh case    2:*/		regs.R6 = regs.R27;
		/* 821CD8ACh case    2:*/		return 0x821CD8B0;
		  /* 821CD8B0h */ case    3:  		/* stb R24, <#[R1 + 80]> */
		/* 821CD8B0h case    3:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821CD8B0h case    3:*/		return 0x821CD8B4;
		  /* 821CD8B4h */ case    4:  		/* addi R5, R1, 81 */
		/* 821CD8B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x51);
		/* 821CD8B4h case    4:*/		return 0x821CD8B8;
		  /* 821CD8B8h */ case    5:  		/* li R4, 0 */
		/* 821CD8B8h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CD8B8h case    5:*/		return 0x821CD8BC;
		  /* 821CD8BCh */ case    6:  		/* mr R3, R25 */
		/* 821CD8BCh case    6:*/		regs.R3 = regs.R25;
		/* 821CD8BCh case    6:*/		return 0x821CD8C0;
		  /* 821CD8C0h */ case    7:  		/* bl -31880 */
		/* 821CD8C0h case    7:*/		regs.LR = 0x821CD8C4; return 0x821C5C38;
		/* 821CD8C0h case    7:*/		return 0x821CD8C4;
		  /* 821CD8C4h */ case    8:  		/* addi R5, R1, 80 */
		/* 821CD8C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821CD8C4h case    8:*/		return 0x821CD8C8;
		  /* 821CD8C8h */ case    9:  		/* mr R4, R22 */
		/* 821CD8C8h case    9:*/		regs.R4 = regs.R22;
		/* 821CD8C8h case    9:*/		return 0x821CD8CC;
		  /* 821CD8CCh */ case   10:  		/* mr R3, R25 */
		/* 821CD8CCh case   10:*/		regs.R3 = regs.R25;
		/* 821CD8CCh case   10:*/		return 0x821CD8D0;
	}
	return 0x821CD8D0;
} // Block from 821CD8A4h-821CD8D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CD8D0h
// Function '?MarkMustInlineCallIfDynamic@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD8D0);
		  /* 821CD8D0h */ case    0:  		/* bl -60992 */
		/* 821CD8D0h case    0:*/		regs.LR = 0x821CD8D4; return 0x821BEA90;
		/* 821CD8D0h case    0:*/		return 0x821CD8D4;
	}
	return 0x821CD8D4;
} // Block from 821CD8D0h-821CD8D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD8D4);
		  /* 821CD8D4h */ case    0:  		/* li R6, 1 */
		/* 821CD8D4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CD8D4h case    0:*/		return 0x821CD8D8;
		  /* 821CD8D8h */ case    1:  		/* mr R5, R29 */
		/* 821CD8D8h case    1:*/		regs.R5 = regs.R29;
		/* 821CD8D8h case    1:*/		return 0x821CD8DC;
		  /* 821CD8DCh */ case    2:  		/* mr R4, R27 */
		/* 821CD8DCh case    2:*/		regs.R4 = regs.R27;
		/* 821CD8DCh case    2:*/		return 0x821CD8E0;
		  /* 821CD8E0h */ case    3:  		/* mr R3, R25 */
		/* 821CD8E0h case    3:*/		regs.R3 = regs.R25;
		/* 821CD8E0h case    3:*/		return 0x821CD8E4;
		  /* 821CD8E4h */ case    4:  		/* mr R30, R28 */
		/* 821CD8E4h case    4:*/		regs.R30 = regs.R28;
		/* 821CD8E4h case    4:*/		return 0x821CD8E8;
		  /* 821CD8E8h */ case    5:  		/* bl -4840 */
		/* 821CD8E8h case    5:*/		regs.LR = 0x821CD8EC; return 0x821CC600;
		/* 821CD8E8h case    5:*/		return 0x821CD8EC;
		  /* 821CD8ECh */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CD8ECh case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CD8ECh case    6:*/		return 0x821CD8F0;
		  /* 821CD8F0h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 821CD8F0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821CD908;  }
		/* 821CD8F0h case    7:*/		return 0x821CD8F4;
		  /* 821CD8F4h */ case    8:  		/* mr R31, R21 */
		/* 821CD8F4h case    8:*/		regs.R31 = regs.R21;
		/* 821CD8F4h case    8:*/		return 0x821CD8F8;
		  /* 821CD8F8h */ case    9:  		/* cmplw CR6, R28, R29 */
		/* 821CD8F8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R29);
		/* 821CD8F8h case    9:*/		return 0x821CD8FC;
		  /* 821CD8FCh */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 821CD8FCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CD90C;  }
		/* 821CD8FCh case   10:*/		return 0x821CD900;
		  /* 821CD900h */ case   11:  		/* mr R30, R27 */
		/* 821CD900h case   11:*/		regs.R30 = regs.R27;
		/* 821CD900h case   11:*/		return 0x821CD904;
		  /* 821CD904h */ case   12:  		/* b 8 */
		/* 821CD904h case   12:*/		return 0x821CD90C;
		/* 821CD904h case   12:*/		return 0x821CD908;
	}
	return 0x821CD908;
} // Block from 821CD8D4h-821CD908h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CD908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD908);
		  /* 821CD908h */ case    0:  		/* lbz R31, <#[R1 + 80]> */
		/* 821CD908h case    0:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821CD908h case    0:*/		return 0x821CD90C;
	}
	return 0x821CD90C;
} // Block from 821CD908h-821CD90Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD90C);
		  /* 821CD90Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CD90Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CD90Ch case    0:*/		return 0x821CD910;
		  /* 821CD910h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 821CD910h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CD95C;  }
		/* 821CD910h case    1:*/		return 0x821CD914;
		  /* 821CD914h */ case    2:  		/* lwz R11, <#[R22 + 8]> */
		/* 821CD914h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821CD914h case    2:*/		return 0x821CD918;
		  /* 821CD918h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821CD918h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD918h case    3:*/		return 0x821CD91C;
		  /* 821CD91Ch */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 821CD91Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821CD930;  }
		/* 821CD91Ch case    4:*/		return 0x821CD920;
		  /* 821CD920h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CD920h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CD920h case    5:*/		return 0x821CD924;
		  /* 821CD924h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821CD924h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CD924h case    6:*/		return 0x821CD928;
		  /* 821CD928h */ case    7:  		/* mr R11, R21 */
		/* 821CD928h case    7:*/		regs.R11 = regs.R21;
		/* 821CD928h case    7:*/		return 0x821CD92C;
		  /* 821CD92Ch */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821CD92Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CD934;  }
		/* 821CD92Ch case    8:*/		return 0x821CD930;
	}
	return 0x821CD930;
} // Block from 821CD90Ch-821CD930h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CD930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD930);
		  /* 821CD930h */ case    0:  		/* mr R11, R24 */
		/* 821CD930h case    0:*/		regs.R11 = regs.R24;
		/* 821CD930h case    0:*/		return 0x821CD934;
	}
	return 0x821CD934;
} // Block from 821CD930h-821CD934h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CD934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD934);
		  /* 821CD934h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CD934h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CD934h case    0:*/		return 0x821CD938;
		  /* 821CD938h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821CD938h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CD95C;  }
		/* 821CD938h case    1:*/		return 0x821CD93C;
		  /* 821CD93Ch */ case    2:  		/* li R6, 1 */
		/* 821CD93Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CD93Ch case    2:*/		return 0x821CD940;
		  /* 821CD940h */ case    3:  		/* mr R5, R22 */
		/* 821CD940h case    3:*/		regs.R5 = regs.R22;
		/* 821CD940h case    3:*/		return 0x821CD944;
		  /* 821CD944h */ case    4:  		/* mr R4, R30 */
		/* 821CD944h case    4:*/		regs.R4 = regs.R30;
		/* 821CD944h case    4:*/		return 0x821CD948;
		  /* 821CD948h */ case    5:  		/* mr R3, R25 */
		/* 821CD948h case    5:*/		regs.R3 = regs.R25;
		/* 821CD948h case    5:*/		return 0x821CD94C;
		  /* 821CD94Ch */ case    6:  		/* bl -4940 */
		/* 821CD94Ch case    6:*/		regs.LR = 0x821CD950; return 0x821CC600;
		/* 821CD94Ch case    6:*/		return 0x821CD950;
		  /* 821CD950h */ case    7:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821CD950h case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CD950h case    7:*/		return 0x821CD954;
		  /* 821CD954h */ case    8:  		/* rlwinm R10, R31, 0, 24, 31 */
		/* 821CD954h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R31);
		/* 821CD954h case    8:*/		return 0x821CD958;
		  /* 821CD958h */ case    9:  		/* or R31, R11, R10 */
		/* 821CD958h case    9:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821CD958h case    9:*/		return 0x821CD95C;
	}
	return 0x821CD95C;
} // Block from 821CD934h-821CD95Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CD95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD95C);
		  /* 821CD95Ch */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821CD95Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821CD95Ch case    0:*/		return 0x821CD960;
		  /* 821CD960h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CD960h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CD96C;  }
		/* 821CD960h case    1:*/		return 0x821CD964;
		  /* 821CD964h */ case    2:  		/* mr R3, R25 */
		/* 821CD964h case    2:*/		regs.R3 = regs.R25;
		/* 821CD964h case    2:*/		return 0x821CD968;
		  /* 821CD968h */ case    3:  		/* bl 121272 */
		/* 821CD968h case    3:*/		regs.LR = 0x821CD96C; return 0x821EB320;
		/* 821CD968h case    3:*/		return 0x821CD96C;
	}
	return 0x821CD96C;
} // Block from 821CD95Ch-821CD96Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CD96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD96C);
		  /* 821CD96Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 821CD96Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821CD96Ch case    0:*/		return 0x821CD970;
		  /* 821CD970h */ case    1:  		/* b -1296100 */
		/* 821CD970h case    1:*/		return 0x8209128C;
		/* 821CD970h case    1:*/		return 0x821CD974;
		  /* 821CD974h */ case    2:  		/* nop */
		/* 821CD974h case    2:*/		cpu::op::nop();
		/* 821CD974h case    2:*/		return 0x821CD978;
	}
	return 0x821CD978;
} // Block from 821CD96Ch-821CD978h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CD978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CD978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CD978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CD978);
		  /* 821CD978h */ case    0:  		/* mfspr R12, LR */
		/* 821CD978h case    0:*/		regs.R12 = regs.LR;
		/* 821CD978h case    0:*/		return 0x821CD97C;
		  /* 821CD97Ch */ case    1:  		/* bl -1296168 */
		/* 821CD97Ch case    1:*/		regs.LR = 0x821CD980; return 0x82091254;
		/* 821CD97Ch case    1:*/		return 0x821CD980;
		  /* 821CD980h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CD980h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CD980h case    2:*/		return 0x821CD984;
		  /* 821CD984h */ case    3:  		/* mr R28, R3 */
		/* 821CD984h case    3:*/		regs.R28 = regs.R3;
		/* 821CD984h case    3:*/		return 0x821CD988;
		  /* 821CD988h */ case    4:  		/* mr R29, R4 */
		/* 821CD988h case    4:*/		regs.R29 = regs.R4;
		/* 821CD988h case    4:*/		return 0x821CD98C;
		  /* 821CD98Ch */ case    5:  		/* mr R27, R5 */
		/* 821CD98Ch case    5:*/		regs.R27 = regs.R5;
		/* 821CD98Ch case    5:*/		return 0x821CD990;
		  /* 821CD990h */ case    6:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CD990h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CD990h case    6:*/		return 0x821CD994;
		  /* 821CD994h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CD994h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CD994h case    7:*/		return 0x821CD998;
		  /* 821CD998h */ case    8:  		/* bc 4, CR0_EQ, 272 */
		/* 821CD998h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CDAA8;  }
		/* 821CD998h case    8:*/		return 0x821CD99C;
		  /* 821CD99Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821CD99Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CD99Ch case    9:*/		return 0x821CD9A0;
		  /* 821CD9A0h */ case   10:  		/* bc 12, CR0_EQ, 264 */
		/* 821CD9A0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CDAA8;  }
		/* 821CD9A0h case   10:*/		return 0x821CD9A4;
		  /* 821CD9A4h */ case   11:  		/* lwz R11, <#[R29]> */
		/* 821CD9A4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CD9A4h case   11:*/		return 0x821CD9A8;
		  /* 821CD9A8h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD9A8h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD9A8h case   12:*/		return 0x821CD9AC;
		  /* 821CD9ACh */ case   13:  		/* addi R4, R11, -4 */
		/* 821CD9ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CD9ACh case   13:*/		return 0x821CD9B0;
		  /* 821CD9B0h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CD9B0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD9B0h case   14:*/		return 0x821CD9B4;
		  /* 821CD9B4h */ case   15:  		/* addi R10, R11, 3 */
		/* 821CD9B4h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CD9B4h case   15:*/		return 0x821CD9B8;
		  /* 821CD9B8h */ case   16:  		/* addic. R11, R11, -1 */
		/* 821CD9B8h case   16:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CD9B8h case   16:*/		return 0x821CD9BC;
		  /* 821CD9BCh */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CD9BCh case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CD9BCh case   17:*/		return 0x821CD9C0;
		  /* 821CD9C0h */ case   18:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821CD9C0h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CD9C0h case   18:*/		return 0x821CD9C4;
		  /* 821CD9C4h */ case   19:  		/* stw R11, <#[R4 + 8]> */
		/* 821CD9C4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CD9C4h case   19:*/		return 0x821CD9C8;
		  /* 821CD9C8h */ case   20:  		/* bc 4, CR0_EQ, 60 */
		/* 821CD9C8h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821CDA04;  }
		/* 821CD9C8h case   20:*/		return 0x821CD9CC;
		  /* 821CD9CCh */ case   21:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CD9CCh case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CD9CCh case   21:*/		return 0x821CD9D0;
		  /* 821CD9D0h */ case   22:  		/* mr R3, R29 */
		/* 821CD9D0h case   22:*/		regs.R3 = regs.R29;
		/* 821CD9D0h case   22:*/		return 0x821CD9D4;
		  /* 821CD9D4h */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CD9D4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD9D4h case   23:*/		return 0x821CD9D8;
		  /* 821CD9D8h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 821CD9D8h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD9D8h case   24:*/		return 0x821CD9DC;
		  /* 821CD9DCh */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CD9DCh case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CD9DCh case   25:*/		return 0x821CD9E0;
		  /* 821CD9E0h */ case   26:  		/* stw R9, <#[R10]> */
		/* 821CD9E0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CD9E0h case   26:*/		return 0x821CD9E4;
		  /* 821CD9E4h */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CD9E4h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CD9E4h case   27:*/		return 0x821CD9E8;
		  /* 821CD9E8h */ case   28:  		/* lwz R11, <#[R11]> */
		/* 821CD9E8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD9E8h case   28:*/		return 0x821CD9EC;
		  /* 821CD9ECh */ case   29:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CD9ECh case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CD9ECh case   29:*/		return 0x821CD9F0;
		  /* 821CD9F0h */ case   30:  		/* stw R10, <#[R11]> */
		/* 821CD9F0h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CD9F0h case   30:*/		return 0x821CD9F4;
		  /* 821CD9F4h */ case   31:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CD9F4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CD9F4h case   31:*/		return 0x821CD9F8;
		  /* 821CD9F8h */ case   32:  		/* addi R11, R11, 4 */
		/* 821CD9F8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CD9F8h case   32:*/		return 0x821CD9FC;
		  /* 821CD9FCh */ case   33:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CD9FCh case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CD9FCh case   33:*/		return 0x821CDA00;
		  /* 821CDA00h */ case   34:  		/* bl -506872 */
		/* 821CDA00h case   34:*/		regs.LR = 0x821CDA04; return 0x82151E08;
		/* 821CDA00h case   34:*/		return 0x821CDA04;
	}
	return 0x821CDA04;
} // Block from 821CD978h-821CDA04h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821CDA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDA04);
		  /* 821CDA04h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CDA04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CDA04h case    0:*/		return 0x821CDA08;
		  /* 821CDA08h */ case    1:  		/* li R10, 0 */
		/* 821CDA08h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CDA08h case    1:*/		return 0x821CDA0C;
		  /* 821CDA0Ch */ case    2:  		/* stw R30, <#[R1 + 80]> */
		/* 821CDA0Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821CDA0Ch case    2:*/		return 0x821CDA10;
		  /* 821CDA10h */ case    3:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CDA10h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CDA10h case    3:*/		return 0x821CDA14;
		  /* 821CDA14h */ case    4:  		/* stw R10, <#[R1 + 88]> */
		/* 821CDA14h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CDA14h case    4:*/		return 0x821CDA18;
		  /* 821CDA18h */ case    5:  		/* addic R10, R9, -1 */
		/* 821CDA18h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821CDA18h case    5:*/		return 0x821CDA1C;
		  /* 821CDA1Ch */ case    6:  		/* subfe R10, R10, R10 */
		/* 821CDA1Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDA1Ch case    6:*/		return 0x821CDA20;
		  /* 821CDA20h */ case    7:  		/* and R11, R10, R11 */
		/* 821CDA20h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDA20h case    7:*/		return 0x821CDA24;
		  /* 821CDA24h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 821CDA24h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CDA24h case    8:*/		return 0x821CDA28;
		  /* 821CDA28h */ case    9:  		/* b 8 */
		/* 821CDA28h case    9:*/		return 0x821CDA30;
		/* 821CDA28h case    9:*/		return 0x821CDA2C;
		  /* 821CDA2Ch */ case   10:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CDA2Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CDA2Ch case   10:*/		return 0x821CDA30;
	}
	return 0x821CDA30;
} // Block from 821CDA04h-821CDA30h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CDA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDA30);
		  /* 821CDA30h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CDA30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDA30h case    0:*/		return 0x821CDA34;
		  /* 821CDA34h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CDA34h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CDA4C;  }
		/* 821CDA34h case    1:*/		return 0x821CDA38;
		  /* 821CDA38h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDA38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDA38h case    2:*/		return 0x821CDA3C;
		  /* 821CDA3Ch */ case    3:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CDA3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CDA3Ch case    3:*/		return 0x821CDA40;
		  /* 821CDA40h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CDA40h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CDA40h case    4:*/		return 0x821CDA44;
		  /* 821CDA44h */ case    5:  		/* li R11, 0 */
		/* 821CDA44h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CDA44h case    5:*/		return 0x821CDA48;
		  /* 821CDA48h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CDA48h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CDA50;  }
		/* 821CDA48h case    6:*/		return 0x821CDA4C;
	}
	return 0x821CDA4C;
} // Block from 821CDA30h-821CDA4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CDA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDA4C);
		  /* 821CDA4Ch */ case    0:  		/* li R11, 1 */
		/* 821CDA4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CDA4Ch case    0:*/		return 0x821CDA50;
	}
	return 0x821CDA50;
} // Block from 821CDA4Ch-821CDA50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDA50);
		  /* 821CDA50h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CDA50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CDA50h case    0:*/		return 0x821CDA54;
		  /* 821CDA54h */ case    1:  		/* bc 4, CR0_EQ, 56 */
		/* 821CDA54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CDA8C;  }
		/* 821CDA54h case    1:*/		return 0x821CDA58;
		  /* 821CDA58h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CDA58h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CDA58h case    2:*/		return 0x821CDA5C;
		  /* 821CDA5Ch */ case    3:  		/* bl -52396 */
		/* 821CDA5Ch case    3:*/		regs.LR = 0x821CDA60; return 0x821C0DB0;
		/* 821CDA5Ch case    3:*/		return 0x821CDA60;
		  /* 821CDA60h */ case    4:  		/* mr R4, R28 */
		/* 821CDA60h case    4:*/		regs.R4 = regs.R28;
		/* 821CDA60h case    4:*/		return 0x821CDA64;
		  /* 821CDA64h */ case    5:  		/* mr R31, R3 */
		/* 821CDA64h case    5:*/		regs.R31 = regs.R3;
		/* 821CDA64h case    5:*/		return 0x821CDA68;
		  /* 821CDA68h */ case    6:  		/* lwz R3, <#[R3]> */
		/* 821CDA68h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 821CDA68h case    6:*/		return 0x821CDA6C;
		  /* 821CDA6Ch */ case    7:  		/* bl -224964 */
		/* 821CDA6Ch case    7:*/		regs.LR = 0x821CDA70; return 0x82196BA8;
		/* 821CDA6Ch case    7:*/		return 0x821CDA70;
		  /* 821CDA70h */ case    8:  		/* cmplwi CR6, R27, 0 */
		/* 821CDA70h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821CDA70h case    8:*/		return 0x821CDA74;
		  /* 821CDA74h */ case    9:  		/* bc 12, CR6_EQ, -72 */
		/* 821CDA74h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CDA2C;  }
		/* 821CDA74h case    9:*/		return 0x821CDA78;
		  /* 821CDA78h */ case   10:  		/* mr R5, R27 */
		/* 821CDA78h case   10:*/		regs.R5 = regs.R27;
		/* 821CDA78h case   10:*/		return 0x821CDA7C;
		  /* 821CDA7Ch */ case   11:  		/* lwz R4, <#[R31]> */
		/* 821CDA7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821CDA7Ch case   11:*/		return 0x821CDA80;
		  /* 821CDA80h */ case   12:  		/* mr R3, R28 */
		/* 821CDA80h case   12:*/		regs.R3 = regs.R28;
		/* 821CDA80h case   12:*/		return 0x821CDA84;
		  /* 821CDA84h */ case   13:  		/* bl -8380 */
		/* 821CDA84h case   13:*/		regs.LR = 0x821CDA88; return 0x821CB9C8;
		/* 821CDA84h case   13:*/		return 0x821CDA88;
		  /* 821CDA88h */ case   14:  		/* b -92 */
		/* 821CDA88h case   14:*/		return 0x821CDA2C;
		/* 821CDA88h case   14:*/		return 0x821CDA8C;
	}
	return 0x821CDA8C;
} // Block from 821CDA50h-821CDA8Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CDA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDA8C);
		  /* 821CDA8Ch */ case    0:  		/* mr R3, R30 */
		/* 821CDA8Ch case    0:*/		regs.R3 = regs.R30;
		/* 821CDA8Ch case    0:*/		return 0x821CDA90;
		  /* 821CDA90h */ case    1:  		/* bl 147528 */
		/* 821CDA90h case    1:*/		regs.LR = 0x821CDA94; return 0x821F1AD8;
		/* 821CDA90h case    1:*/		return 0x821CDA94;
		  /* 821CDA94h */ case    2:  		/* lwz R10, <#[R28 + 976]> */
		/* 821CDA94h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CDA94h case    2:*/		return 0x821CDA98;
		  /* 821CDA98h */ case    3:  		/* addi R11, R28, 972 */
		/* 821CDA98h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 821CDA98h case    3:*/		return 0x821CDA9C;
		  /* 821CDA9Ch */ case    4:  		/* stw R10, <#[R30]> */
		/* 821CDA9Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821CDA9Ch case    4:*/		return 0x821CDAA0;
		  /* 821CDAA0h */ case    5:  		/* stw R30, <#[R28 + 976]> */
		/* 821CDAA0h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CDAA0h case    5:*/		return 0x821CDAA4;
		  /* 821CDAA4h */ case    6:  		/* b -276 */
		/* 821CDAA4h case    6:*/		return 0x821CD990;
		/* 821CDAA4h case    6:*/		return 0x821CDAA8;
	}
	return 0x821CDAA8;
} // Block from 821CDA8Ch-821CDAA8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CDAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDAA8);
		  /* 821CDAA8h */ case    0:  		/* lwz R10, <#[R28 + 976]> */
		/* 821CDAA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CDAA8h case    0:*/		return 0x821CDAAC;
		  /* 821CDAACh */ case    1:  		/* addi R11, R28, 972 */
		/* 821CDAACh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 821CDAACh case    1:*/		return 0x821CDAB0;
		  /* 821CDAB0h */ case    2:  		/* stw R10, <#[R29]> */
		/* 821CDAB0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821CDAB0h case    2:*/		return 0x821CDAB4;
		  /* 821CDAB4h */ case    3:  		/* stw R29, <#[R28 + 976]> */
		/* 821CDAB4h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CDAB4h case    3:*/		return 0x821CDAB8;
		  /* 821CDAB8h */ case    4:  		/* addi R1, R1, 144 */
		/* 821CDAB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CDAB8h case    4:*/		return 0x821CDABC;
		  /* 821CDABCh */ case    5:  		/* b -1296408 */
		/* 821CDABCh case    5:*/		return 0x820912A4;
		/* 821CDABCh case    5:*/		return 0x821CDAC0;
	}
	return 0x821CDAC0;
} // Block from 821CDAA8h-821CDAC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CDAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDAC0);
		  /* 821CDAC0h */ case    0:  		/* mfspr R12, LR */
		/* 821CDAC0h case    0:*/		regs.R12 = regs.LR;
		/* 821CDAC0h case    0:*/		return 0x821CDAC4;
		  /* 821CDAC4h */ case    1:  		/* bl -1296508 */
		/* 821CDAC4h case    1:*/		regs.LR = 0x821CDAC8; return 0x82091248;
		/* 821CDAC4h case    1:*/		return 0x821CDAC8;
		  /* 821CDAC8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821CDAC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821CDAC8h case    2:*/		return 0x821CDACC;
		  /* 821CDACCh */ case    3:  		/* lwz R11, <#[R5 + 4]> */
		/* 821CDACCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821CDACCh case    3:*/		return 0x821CDAD0;
		  /* 821CDAD0h */ case    4:  		/* li R10, 0 */
		/* 821CDAD0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CDAD0h case    4:*/		return 0x821CDAD4;
		  /* 821CDAD4h */ case    5:  		/* mr R30, R3 */
		/* 821CDAD4h case    5:*/		regs.R30 = regs.R3;
		/* 821CDAD4h case    5:*/		return 0x821CDAD8;
		  /* 821CDAD8h */ case    6:  		/* stw R5, <#[R1 + 80]> */
		/* 821CDAD8h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821CDAD8h case    6:*/		return 0x821CDADC;
		  /* 821CDADCh */ case    7:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CDADCh case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CDADCh case    7:*/		return 0x821CDAE0;
		  /* 821CDAE0h */ case    8:  		/* stw R10, <#[R1 + 88]> */
		/* 821CDAE0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CDAE0h case    8:*/		return 0x821CDAE4;
		  /* 821CDAE4h */ case    9:  		/* mr R27, R4 */
		/* 821CDAE4h case    9:*/		regs.R27 = regs.R4;
		/* 821CDAE4h case    9:*/		return 0x821CDAE8;
		  /* 821CDAE8h */ case   10:  		/* addic R10, R9, -1 */
		/* 821CDAE8h case   10:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821CDAE8h case   10:*/		return 0x821CDAEC;
		  /* 821CDAECh */ case   11:  		/* mr R28, R6 */
		/* 821CDAECh case   11:*/		regs.R28 = regs.R6;
		/* 821CDAECh case   11:*/		return 0x821CDAF0;
		  /* 821CDAF0h */ case   12:  		/* subfe R10, R10, R10 */
		/* 821CDAF0h case   12:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDAF0h case   12:*/		return 0x821CDAF4;
		  /* 821CDAF4h */ case   13:  		/* mr R24, R7 */
		/* 821CDAF4h case   13:*/		regs.R24 = regs.R7;
		/* 821CDAF4h case   13:*/		return 0x821CDAF8;
	}
	return 0x821CDAF8;
} // Block from 821CDAC0h-821CDAF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CDAF8h
// Function '?MarkMustInlineCallsForInstruction@Compiler@D3DXShader@@AAA_NPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDAF8);
		  /* 821CDAF8h */ case    0:  		/* and R11, R10, R11 */
		/* 821CDAF8h case    0:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDAF8h case    0:*/		return 0x821CDAFC;
		  /* 821CDAFCh */ case    1:  		/* mr R26, R8 */
		/* 821CDAFCh case    1:*/		regs.R26 = regs.R8;
		/* 821CDAFCh case    1:*/		return 0x821CDB00;
		  /* 821CDB00h */ case    2:  		/* li R31, 0 */
		/* 821CDB00h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CDB00h case    2:*/		return 0x821CDB04;
		  /* 821CDB04h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 821CDB04h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CDB04h case    3:*/		return 0x821CDB08;
		  /* 821CDB08h */ case    4:  		/* li R29, 0 */
		/* 821CDB08h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821CDB08h case    4:*/		return 0x821CDB0C;
		  /* 821CDB0Ch */ case    5:  		/* li R25, 0 */
		/* 821CDB0Ch case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821CDB0Ch case    5:*/		return 0x821CDB10;
		  /* 821CDB10h */ case    6:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CDB10h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CDB10h case    6:*/		return 0x821CDB14;
		  /* 821CDB14h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821CDB14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDB14h case    7:*/		return 0x821CDB18;
		  /* 821CDB18h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 821CDB18h case    8:*/		if ( regs.CR[6].eq ) { return 0x821CDB30;  }
		/* 821CDB18h case    8:*/		return 0x821CDB1C;
		  /* 821CDB1Ch */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDB1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDB1Ch case    9:*/		return 0x821CDB20;
		  /* 821CDB20h */ case   10:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CDB20h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CDB20h case   10:*/		return 0x821CDB24;
		  /* 821CDB24h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821CDB24h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CDB24h case   11:*/		return 0x821CDB28;
		  /* 821CDB28h */ case   12:  		/* li R11, 0 */
		/* 821CDB28h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CDB28h case   12:*/		return 0x821CDB2C;
		  /* 821CDB2Ch */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821CDB2Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CDB34;  }
		/* 821CDB2Ch case   13:*/		return 0x821CDB30;
	}
	return 0x821CDB30;
} // Block from 821CDAF8h-821CDB30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CDB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDB30);
		  /* 821CDB30h */ case    0:  		/* li R11, 1 */
		/* 821CDB30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CDB30h case    0:*/		return 0x821CDB34;
	}
	return 0x821CDB34;
} // Block from 821CDB30h-821CDB34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDB34);
		  /* 821CDB34h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CDB34h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CDB34h case    0:*/		return 0x821CDB38;
		  /* 821CDB38h */ case    1:  		/* bc 4, CR0_EQ, 296 */
		/* 821CDB38h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CDC60;  }
		/* 821CDB38h case    1:*/		return 0x821CDB3C;
		  /* 821CDB3Ch */ case    2:  		/* addi R3, R1, 80 */
		/* 821CDB3Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CDB3Ch case    2:*/		return 0x821CDB40;
		  /* 821CDB40h */ case    3:  		/* bl -52624 */
		/* 821CDB40h case    3:*/		regs.LR = 0x821CDB44; return 0x821C0DB0;
		/* 821CDB40h case    3:*/		return 0x821CDB44;
		  /* 821CDB44h */ case    4:  		/* mr R11, R3 */
		/* 821CDB44h case    4:*/		regs.R11 = regs.R3;
		/* 821CDB44h case    4:*/		return 0x821CDB48;
		  /* 821CDB48h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821CDB48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CDB48h case    5:*/		return 0x821CDB4C;
		  /* 821CDB4Ch */ case    6:  		/* bc 12, CR6_EQ, 88 */
		/* 821CDB4Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821CDBA4;  }
		/* 821CDB4Ch case    6:*/		return 0x821CDB50;
		  /* 821CDB50h */ case    7:  		/* lwz R10, <#[R3]> */
		/* 821CDB50h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CDB50h case    7:*/		return 0x821CDB54;
		  /* 821CDB54h */ case    8:  		/* lwz R9, <#[R28]> */
		/* 821CDB54h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 821CDB54h case    8:*/		return 0x821CDB58;
		  /* 821CDB58h */ case    9:  		/* cmplw CR6, R10, R9 */
		/* 821CDB58h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CDB58h case    9:*/		return 0x821CDB5C;
		  /* 821CDB5Ch */ case   10:  		/* bc 4, CR6_EQ, 44 */
		/* 821CDB5Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CDB88;  }
		/* 821CDB5Ch case   10:*/		return 0x821CDB60;
		  /* 821CDB60h */ case   11:  		/* lwz R10, <#[R3 + 4]> */
		/* 821CDB60h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821CDB60h case   11:*/		return 0x821CDB64;
		  /* 821CDB64h */ case   12:  		/* lwz R9, <#[R28 + 4]> */
		/* 821CDB64h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000004) );
		/* 821CDB64h case   12:*/		return 0x821CDB68;
		  /* 821CDB68h */ case   13:  		/* cmpw CR6, R10, R9 */
		/* 821CDB68h case   13:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 821CDB68h case   13:*/		return 0x821CDB6C;
		  /* 821CDB6Ch */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 821CDB6Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CDB88;  }
		/* 821CDB6Ch case   14:*/		return 0x821CDB70;
		  /* 821CDB70h */ case   15:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CDB70h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CDB70h case   15:*/		return 0x821CDB74;
		  /* 821CDB74h */ case   16:  		/* lwz R9, <#[R28 + 8]> */
		/* 821CDB74h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 821CDB74h case   16:*/		return 0x821CDB78;
		  /* 821CDB78h */ case   17:  		/* xor R10, R10, R9 */
		/* 821CDB78h case   17:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CDB78h case   17:*/		return 0x821CDB7C;
		  /* 821CDB7Ch */ case   18:  		/* rlwinm. R10, R10, 0, 30, 28 */
		/* 821CDB7Ch case   18:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R10,regs.R10);
		/* 821CDB7Ch case   18:*/		return 0x821CDB80;
		  /* 821CDB80h */ case   19:  		/* li R10, 1 */
		/* 821CDB80h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821CDB80h case   19:*/		return 0x821CDB84;
		  /* 821CDB84h */ case   20:  		/* bc 12, CR0_EQ, 8 */
		/* 821CDB84h case   20:*/		if ( regs.CR[0].eq ) { return 0x821CDB8C;  }
		/* 821CDB84h case   20:*/		return 0x821CDB88;
	}
	return 0x821CDB88;
} // Block from 821CDB34h-821CDB88h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CDB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDB88);
		  /* 821CDB88h */ case    0:  		/* li R10, 0 */
		/* 821CDB88h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CDB88h case    0:*/		return 0x821CDB8C;
	}
	return 0x821CDB8C;
} // Block from 821CDB88h-821CDB8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDB8C);
		  /* 821CDB8Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821CDB8Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821CDB8Ch case    0:*/		return 0x821CDB90;
		  /* 821CDB90h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821CDB90h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CDBA4;  }
		/* 821CDB90h case    1:*/		return 0x821CDB94;
		  /* 821CDB94h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDB94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDB94h case    2:*/		return 0x821CDB98;
		  /* 821CDB98h */ case    3:  		/* li R28, 0 */
		/* 821CDB98h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821CDB98h case    3:*/		return 0x821CDB9C;
		  /* 821CDB9Ch */ case    4:  		/* rlwinm R25, R11, 0, 29, 29 */
		/* 821CDB9Ch case    4:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R25,regs.R11);
		/* 821CDB9Ch case    4:*/		return 0x821CDBA0;
		  /* 821CDBA0h */ case    5:  		/* b -144 */
		/* 821CDBA0h case    5:*/		return 0x821CDB10;
		/* 821CDBA0h case    5:*/		return 0x821CDBA4;
	}
	return 0x821CDBA4;
} // Block from 821CDB8Ch-821CDBA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CDBA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDBA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDBA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDBA4);
		  /* 821CDBA4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821CDBA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CDBA4h case    0:*/		return 0x821CDBA8;
		  /* 821CDBA8h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821CDBA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CDBBC;  }
		/* 821CDBA8h case    1:*/		return 0x821CDBAC;
		  /* 821CDBACh */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821CDBACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CDBACh case    2:*/		return 0x821CDBB0;
		  /* 821CDBB0h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 821CDBB0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CDC08;  }
		/* 821CDBB0h case    3:*/		return 0x821CDBB4;
		  /* 821CDBB4h */ case    4:  		/* mr R29, R11 */
		/* 821CDBB4h case    4:*/		regs.R29 = regs.R11;
		/* 821CDBB4h case    4:*/		return 0x821CDBB8;
		  /* 821CDBB8h */ case    5:  		/* b -168 */
		/* 821CDBB8h case    5:*/		return 0x821CDB10;
		/* 821CDBB8h case    5:*/		return 0x821CDBBC;
	}
	return 0x821CDBBC;
} // Block from 821CDBA4h-821CDBBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CDBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDBBC);
		  /* 821CDBBCh */ case    0:  		/* mr R3, R30 */
		/* 821CDBBCh case    0:*/		regs.R3 = regs.R30;
		/* 821CDBBCh case    0:*/		return 0x821CDBC0;
		  /* 821CDBC0h */ case    1:  		/* lwz R6, <#[R11 + 8]> */
		/* 821CDBC0h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDBC0h case    1:*/		return 0x821CDBC4;
		  /* 821CDBC4h */ case    2:  		/* lwz R5, <#[R11 + 4]> */
		/* 821CDBC4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821CDBC4h case    2:*/		return 0x821CDBC8;
		  /* 821CDBC8h */ case    3:  		/* lwz R4, <#[R11]> */
		/* 821CDBC8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821CDBC8h case    3:*/		return 0x821CDBCC;
		  /* 821CDBCCh */ case    4:  		/* bl -350820 */
		/* 821CDBCCh case    4:*/		regs.LR = 0x821CDBD0; return 0x82178168;
		/* 821CDBCCh case    4:*/		return 0x821CDBD0;
		  /* 821CDBD0h */ case    5:  		/* mr R31, R3 */
		/* 821CDBD0h case    5:*/		regs.R31 = regs.R3;
		/* 821CDBD0h case    5:*/		return 0x821CDBD4;
		  /* 821CDBD4h */ case    6:  		/* lwz R6, <#[R29 + 8]> */
		/* 821CDBD4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000008) );
		/* 821CDBD4h case    6:*/		return 0x821CDBD8;
		  /* 821CDBD8h */ case    7:  		/* mr R3, R30 */
		/* 821CDBD8h case    7:*/		regs.R3 = regs.R30;
		/* 821CDBD8h case    7:*/		return 0x821CDBDC;
		  /* 821CDBDCh */ case    8:  		/* lwz R5, <#[R29 + 4]> */
		/* 821CDBDCh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 821CDBDCh case    8:*/		return 0x821CDBE0;
		  /* 821CDBE0h */ case    9:  		/* lwz R4, <#[R29]> */
		/* 821CDBE0h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821CDBE0h case    9:*/		return 0x821CDBE4;
		  /* 821CDBE4h */ case   10:  		/* bl -350844 */
		/* 821CDBE4h case   10:*/		regs.LR = 0x821CDBE8; return 0x82178168;
		/* 821CDBE4h case   10:*/		return 0x821CDBE8;
		  /* 821CDBE8h */ case   11:  		/* mr R6, R3 */
		/* 821CDBE8h case   11:*/		regs.R6 = regs.R3;
		/* 821CDBE8h case   11:*/		return 0x821CDBEC;
		  /* 821CDBECh */ case   12:  		/* mr R5, R27 */
		/* 821CDBECh case   12:*/		regs.R5 = regs.R27;
		/* 821CDBECh case   12:*/		return 0x821CDBF0;
		  /* 821CDBF0h */ case   13:  		/* li R4, 0 */
		/* 821CDBF0h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CDBF0h case   13:*/		return 0x821CDBF4;
		  /* 821CDBF4h */ case   14:  		/* mr R3, R30 */
		/* 821CDBF4h case   14:*/		regs.R3 = regs.R30;
		/* 821CDBF4h case   14:*/		return 0x821CDBF8;
		  /* 821CDBF8h */ case   15:  		/* mr R7, R31 */
		/* 821CDBF8h case   15:*/		regs.R7 = regs.R31;
		/* 821CDBF8h case   15:*/		return 0x821CDBFC;
		  /* 821CDBFCh */ case   16:  		/* bl -51948 */
		/* 821CDBFCh case   16:*/		regs.LR = 0x821CDC00; return 0x821C1110;
		/* 821CDBFCh case   16:*/		return 0x821CDC00;
		  /* 821CDC00h */ case   17:  		/* li R29, 0 */
		/* 821CDC00h case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821CDC00h case   17:*/		return 0x821CDC04;
		  /* 821CDC04h */ case   18:  		/* b 48 */
		/* 821CDC04h case   18:*/		return 0x821CDC34;
		/* 821CDC04h case   18:*/		return 0x821CDC08;
	}
	return 0x821CDC08;
} // Block from 821CDBBCh-821CDC08h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CDC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDC08);
		  /* 821CDC08h */ case    0:  		/* mr R3, R30 */
		/* 821CDC08h case    0:*/		regs.R3 = regs.R30;
		/* 821CDC08h case    0:*/		return 0x821CDC0C;
		  /* 821CDC0Ch */ case    1:  		/* lwz R6, <#[R11 + 8]> */
		/* 821CDC0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDC0Ch case    1:*/		return 0x821CDC10;
		  /* 821CDC10h */ case    2:  		/* lwz R5, <#[R11 + 4]> */
		/* 821CDC10h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821CDC10h case    2:*/		return 0x821CDC14;
		  /* 821CDC14h */ case    3:  		/* lwz R4, <#[R11]> */
		/* 821CDC14h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821CDC14h case    3:*/		return 0x821CDC18;
		  /* 821CDC18h */ case    4:  		/* bl -350896 */
		/* 821CDC18h case    4:*/		regs.LR = 0x821CDC1C; return 0x82178168;
		/* 821CDC18h case    4:*/		return 0x821CDC1C;
		  /* 821CDC1Ch */ case    5:  		/* mr R7, R3 */
		/* 821CDC1Ch case    5:*/		regs.R7 = regs.R3;
		/* 821CDC1Ch case    5:*/		return 0x821CDC20;
		  /* 821CDC20h */ case    6:  		/* mr R6, R31 */
		/* 821CDC20h case    6:*/		regs.R6 = regs.R31;
		/* 821CDC20h case    6:*/		return 0x821CDC24;
		  /* 821CDC24h */ case    7:  		/* mr R5, R27 */
		/* 821CDC24h case    7:*/		regs.R5 = regs.R27;
		/* 821CDC24h case    7:*/		return 0x821CDC28;
		  /* 821CDC28h */ case    8:  		/* li R4, 0 */
		/* 821CDC28h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CDC28h case    8:*/		return 0x821CDC2C;
		  /* 821CDC2Ch */ case    9:  		/* mr R3, R30 */
		/* 821CDC2Ch case    9:*/		regs.R3 = regs.R30;
		/* 821CDC2Ch case    9:*/		return 0x821CDC30;
		  /* 821CDC30h */ case   10:  		/* bl -52000 */
		/* 821CDC30h case   10:*/		regs.LR = 0x821CDC34; return 0x821C1110;
		/* 821CDC30h case   10:*/		return 0x821CDC34;
	}
	return 0x821CDC34;
} // Block from 821CDC08h-821CDC34h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CDC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDC34);
		  /* 821CDC34h */ case    0:  		/* mr R31, R3 */
		/* 821CDC34h case    0:*/		regs.R31 = regs.R3;
		/* 821CDC34h case    0:*/		return 0x821CDC38;
		  /* 821CDC38h */ case    1:  		/* mr R4, R3 */
		/* 821CDC38h case    1:*/		regs.R4 = regs.R3;
		/* 821CDC38h case    1:*/		return 0x821CDC3C;
		  /* 821CDC3Ch */ case    2:  		/* mr R5, R26 */
		/* 821CDC3Ch case    2:*/		regs.R5 = regs.R26;
		/* 821CDC3Ch case    2:*/		return 0x821CDC40;
		  /* 821CDC40h */ case    3:  		/* mr R3, R30 */
		/* 821CDC40h case    3:*/		regs.R3 = regs.R30;
		/* 821CDC40h case    3:*/		return 0x821CDC44;
		  /* 821CDC44h */ case    4:  		/* bl -8828 */
		/* 821CDC44h case    4:*/		regs.LR = 0x821CDC48; return 0x821CB9C8;
		/* 821CDC44h case    4:*/		return 0x821CDC48;
		  /* 821CDC48h */ case    5:  		/* li R5, 0 */
		/* 821CDC48h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CDC48h case    5:*/		return 0x821CDC4C;
		  /* 821CDC4Ch */ case    6:  		/* mr R4, R31 */
		/* 821CDC4Ch case    6:*/		regs.R4 = regs.R31;
		/* 821CDC4Ch case    6:*/		return 0x821CDC50;
		  /* 821CDC50h */ case    7:  		/* mr R3, R30 */
		/* 821CDC50h case    7:*/		regs.R3 = regs.R30;
		/* 821CDC50h case    7:*/		return 0x821CDC54;
		  /* 821CDC54h */ case    8:  		/* bl -351044 */
		/* 821CDC54h case    8:*/		regs.LR = 0x821CDC58; return 0x82178110;
		/* 821CDC54h case    8:*/		return 0x821CDC58;
		  /* 821CDC58h */ case    9:  		/* mr R31, R3 */
		/* 821CDC58h case    9:*/		regs.R31 = regs.R3;
		/* 821CDC58h case    9:*/		return 0x821CDC5C;
		  /* 821CDC5Ch */ case   10:  		/* b -332 */
		/* 821CDC5Ch case   10:*/		return 0x821CDB10;
		/* 821CDC5Ch case   10:*/		return 0x821CDC60;
	}
	return 0x821CDC60;
} // Block from 821CDC34h-821CDC60h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CDC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDC60);
		  /* 821CDC60h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821CDC60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CDC60h case    0:*/		return 0x821CDC64;
		  /* 821CDC64h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 821CDC64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CDCA8;  }
		/* 821CDC64h case    1:*/		return 0x821CDC68;
		  /* 821CDC68h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821CDC68h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CDC68h case    2:*/		return 0x821CDC6C;
		  /* 821CDC6Ch */ case    3:  		/* bc 4, CR6_EQ, 84 */
		/* 821CDC6Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CDCC0;  }
		/* 821CDC6Ch case    3:*/		return 0x821CDC70;
		  /* 821CDC70h */ case    4:  		/* lis R11, -32256 */
		/* 821CDC70h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821CDC70h case    4:*/		return 0x821CDC74;
		  /* 821CDC74h */ case    5:  		/* lis R10, -32256 */
		/* 821CDC74h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821CDC74h case    5:*/		return 0x821CDC78;
		  /* 821CDC78h */ case    6:  		/* li R4, 1 */
		/* 821CDC78h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CDC78h case    6:*/		return 0x821CDC7C;
		  /* 821CDC7Ch */ case    7:  		/* mr R3, R30 */
		/* 821CDC7Ch case    7:*/		regs.R3 = regs.R30;
		/* 821CDC7Ch case    7:*/		return 0x821CDC80;
		  /* 821CDC80h */ case    8:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 821CDC80h case    8:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 821CDC80h case    8:*/		return 0x821CDC84;
		  /* 821CDC84h */ case    9:  		/* lfs FR1, <#[R10 + 1792]> */
		/* 821CDC84h case    9:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00000700) );
		/* 821CDC84h case    9:*/		return 0x821CDC88;
		  /* 821CDC88h */ case   10:  		/* fmr FR3, FR4 */
		/* 821CDC88h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821CDC88h case   10:*/		return 0x821CDC8C;
		  /* 821CDC8Ch */ case   11:  		/* fmr FR2, FR4 */
		/* 821CDC8Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 821CDC8Ch case   11:*/		return 0x821CDC90;
		  /* 821CDC90h */ case   12:  		/* bl 380616 */
		/* 821CDC90h case   12:*/		regs.LR = 0x821CDC94; return 0x8222AB58;
		/* 821CDC90h case   12:*/		return 0x821CDC94;
		  /* 821CDC94h */ case   13:  		/* mr R4, R3 */
		/* 821CDC94h case   13:*/		regs.R4 = regs.R3;
		/* 821CDC94h case   13:*/		return 0x821CDC98;
		  /* 821CDC98h */ case   14:  		/* li R5, 0 */
		/* 821CDC98h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CDC98h case   14:*/		return 0x821CDC9C;
		  /* 821CDC9Ch */ case   15:  		/* mr R3, R30 */
		/* 821CDC9Ch case   15:*/		regs.R3 = regs.R30;
		/* 821CDC9Ch case   15:*/		return 0x821CDCA0;
		  /* 821CDCA0h */ case   16:  		/* bl -351120 */
		/* 821CDCA0h case   16:*/		regs.LR = 0x821CDCA4; return 0x82178110;
		/* 821CDCA0h case   16:*/		return 0x821CDCA4;
		  /* 821CDCA4h */ case   17:  		/* b 24 */
		/* 821CDCA4h case   17:*/		return 0x821CDCBC;
		/* 821CDCA4h case   17:*/		return 0x821CDCA8;
	}
	return 0x821CDCA8;
} // Block from 821CDC60h-821CDCA8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CDCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDCA8);
		  /* 821CDCA8h */ case    0:  		/* mr R3, R30 */
		/* 821CDCA8h case    0:*/		regs.R3 = regs.R30;
		/* 821CDCA8h case    0:*/		return 0x821CDCAC;
		  /* 821CDCACh */ case    1:  		/* lwz R6, <#[R29 + 8]> */
		/* 821CDCACh case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000008) );
		/* 821CDCACh case    1:*/		return 0x821CDCB0;
		  /* 821CDCB0h */ case    2:  		/* lwz R5, <#[R29 + 4]> */
		/* 821CDCB0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 821CDCB0h case    2:*/		return 0x821CDCB4;
		  /* 821CDCB4h */ case    3:  		/* lwz R4, <#[R29]> */
		/* 821CDCB4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821CDCB4h case    3:*/		return 0x821CDCB8;
		  /* 821CDCB8h */ case    4:  		/* bl -351056 */
		/* 821CDCB8h case    4:*/		regs.LR = 0x821CDCBC; return 0x82178168;
		/* 821CDCB8h case    4:*/		return 0x821CDCBC;
	}
	return 0x821CDCBC;
} // Block from 821CDCA8h-821CDCBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CDCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDCBC);
		  /* 821CDCBCh */ case    0:  		/* mr R31, R3 */
		/* 821CDCBCh case    0:*/		regs.R31 = regs.R3;
		/* 821CDCBCh case    0:*/		return 0x821CDCC0;
	}
	return 0x821CDCC0;
} // Block from 821CDCBCh-821CDCC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDCC0);
		  /* 821CDCC0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821CDCC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821CDCC0h case    0:*/		return 0x821CDCC4;
		  /* 821CDCC4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821CDCC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CDCD4;  }
		/* 821CDCC4h case    1:*/		return 0x821CDCC8;
		  /* 821CDCC8h */ case    2:  		/* li R4, 4 */
		/* 821CDCC8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821CDCC8h case    2:*/		return 0x821CDCCC;
		  /* 821CDCCCh */ case    3:  		/* mr R3, R31 */
		/* 821CDCCCh case    3:*/		regs.R3 = regs.R31;
		/* 821CDCCCh case    3:*/		return 0x821CDCD0;
		  /* 821CDCD0h */ case    4:  		/* bl -352784 */
		/* 821CDCD0h case    4:*/		regs.LR = 0x821CDCD4; return 0x82177AC0;
		/* 821CDCD0h case    4:*/		return 0x821CDCD4;
	}
	return 0x821CDCD4;
} // Block from 821CDCC0h-821CDCD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CDCD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDCD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDCD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDCD4);
		  /* 821CDCD4h */ case    0:  		/* cntlzw R11, R28 */
		/* 821CDCD4h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 821CDCD4h case    0:*/		return 0x821CDCD8;
		  /* 821CDCD8h */ case    1:  		/* stw R31, <#[R24]> */
		/* 821CDCD8h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821CDCD8h case    1:*/		return 0x821CDCDC;
		  /* 821CDCDCh */ case    2:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 821CDCDCh case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 821CDCDCh case    2:*/		return 0x821CDCE0;
		  /* 821CDCE0h */ case    3:  		/* addi R1, R1, 176 */
		/* 821CDCE0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821CDCE0h case    3:*/		return 0x821CDCE4;
		  /* 821CDCE4h */ case    4:  		/* b -1296972 */
		/* 821CDCE4h case    4:*/		return 0x82091298;
		/* 821CDCE4h case    4:*/		return 0x821CDCE8;
	}
	return 0x821CDCE8;
} // Block from 821CDCD4h-821CDCE8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CDCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDCE8);
		  /* 821CDCE8h */ case    0:  		/* mfspr R12, LR */
		/* 821CDCE8h case    0:*/		regs.R12 = regs.LR;
		/* 821CDCE8h case    0:*/		return 0x821CDCEC;
		  /* 821CDCECh */ case    1:  		/* bl -1297088 */
		/* 821CDCECh case    1:*/		regs.LR = 0x821CDCF0; return 0x8209122C;
		/* 821CDCECh case    1:*/		return 0x821CDCF0;
		  /* 821CDCF0h */ case    2:  		/* stfd FR31, <#[R1 - 136]> */
		/* 821CDCF0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821CDCF0h case    2:*/		return 0x821CDCF4;
		  /* 821CDCF4h */ case    3:  		/* stwu R1, <#[R1 - 288]> */
		/* 821CDCF4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 821CDCF4h case    3:*/		return 0x821CDCF8;
		  /* 821CDCF8h */ case    4:  		/* li R18, 0 */
		/* 821CDCF8h case    4:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821CDCF8h case    4:*/		return 0x821CDCFC;
		  /* 821CDCFCh */ case    5:  		/* mr R30, R3 */
		/* 821CDCFCh case    5:*/		regs.R30 = regs.R3;
		/* 821CDCFCh case    5:*/		return 0x821CDD00;
		  /* 821CDD00h */ case    6:  		/* mr R21, R4 */
		/* 821CDD00h case    6:*/		regs.R21 = regs.R4;
		/* 821CDD00h case    6:*/		return 0x821CDD04;
		  /* 821CDD04h */ case    7:  		/* mr R19, R5 */
		/* 821CDD04h case    7:*/		regs.R19 = regs.R5;
		/* 821CDD04h case    7:*/		return 0x821CDD08;
		  /* 821CDD08h */ case    8:  		/* mr R17, R18 */
		/* 821CDD08h case    8:*/		regs.R17 = regs.R18;
		/* 821CDD08h case    8:*/		return 0x821CDD0C;
		  /* 821CDD0Ch */ case    9:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CDD0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CDD0Ch case    9:*/		return 0x821CDD10;
		  /* 821CDD10h */ case   10:  		/* stw R18, <#[R1 + 144]> */
		/* 821CDD10h case   10:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000090) );
		/* 821CDD10h case   10:*/		return 0x821CDD14;
		  /* 821CDD14h */ case   11:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CDD14h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CDD14h case   11:*/		return 0x821CDD18;
		  /* 821CDD18h */ case   12:  		/* stw R21, <#[R1 + 136]> */
		/* 821CDD18h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000088) );
		/* 821CDD18h case   12:*/		return 0x821CDD1C;
		  /* 821CDD1Ch */ case   13:  		/* addic R10, R10, -1 */
		/* 821CDD1Ch case   13:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CDD1Ch case   13:*/		return 0x821CDD20;
		  /* 821CDD20h */ case   14:  		/* subfe R10, R10, R10 */
		/* 821CDD20h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDD20h case   14:*/		return 0x821CDD24;
		  /* 821CDD24h */ case   15:  		/* and R11, R10, R11 */
		/* 821CDD24h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDD24h case   15:*/		return 0x821CDD28;
		  /* 821CDD28h */ case   16:  		/* stw R11, <#[R1 + 140]> */
		/* 821CDD28h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 821CDD28h case   16:*/		return 0x821CDD2C;
		  /* 821CDD2Ch */ case   17:  		/* b 8 */
		/* 821CDD2Ch case   17:*/		return 0x821CDD34;
		/* 821CDD2Ch case   17:*/		return 0x821CDD30;
		  /* 821CDD30h */ case   18:  		/* lwz R11, <#[R1 + 140]> */
		/* 821CDD30h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 821CDD30h case   18:*/		return 0x821CDD34;
	}
	return 0x821CDD34;
} // Block from 821CDCE8h-821CDD34h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CDD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDD34);
		  /* 821CDD34h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CDD34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDD34h case    0:*/		return 0x821CDD38;
		  /* 821CDD38h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CDD38h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CDD50;  }
		/* 821CDD38h case    1:*/		return 0x821CDD3C;
		  /* 821CDD3Ch */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDD3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDD3Ch case    2:*/		return 0x821CDD40;
		  /* 821CDD40h */ case    3:  		/* lwz R10, <#[R1 + 144]> */
		/* 821CDD40h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 821CDD40h case    3:*/		return 0x821CDD44;
		  /* 821CDD44h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CDD44h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CDD44h case    4:*/		return 0x821CDD48;
		  /* 821CDD48h */ case    5:  		/* mr R11, R18 */
		/* 821CDD48h case    5:*/		regs.R11 = regs.R18;
		/* 821CDD48h case    5:*/		return 0x821CDD4C;
		  /* 821CDD4Ch */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CDD4Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CDD54;  }
		/* 821CDD4Ch case    6:*/		return 0x821CDD50;
	}
	return 0x821CDD50;
} // Block from 821CDD34h-821CDD50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CDD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDD50);
		  /* 821CDD50h */ case    0:  		/* li R11, 1 */
		/* 821CDD50h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CDD50h case    0:*/		return 0x821CDD54;
	}
	return 0x821CDD54;
} // Block from 821CDD50h-821CDD54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDD54);
		  /* 821CDD54h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CDD54h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CDD54h case    0:*/		return 0x821CDD58;
		  /* 821CDD58h */ case    1:  		/* bc 4, CR0_EQ, 1832 */
		/* 821CDD58h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE480;  }
		/* 821CDD58h case    1:*/		return 0x821CDD5C;
		  /* 821CDD5Ch */ case    2:  		/* addi R3, R1, 136 */
		/* 821CDD5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x88);
		/* 821CDD5Ch case    2:*/		return 0x821CDD60;
		  /* 821CDD60h */ case    3:  		/* bl -53080 */
		/* 821CDD60h case    3:*/		regs.LR = 0x821CDD64; return 0x821C0E08;
		/* 821CDD60h case    3:*/		return 0x821CDD64;
		  /* 821CDD64h */ case    4:  		/* mr R11, R3 */
		/* 821CDD64h case    4:*/		regs.R11 = regs.R3;
		/* 821CDD64h case    4:*/		return 0x821CDD68;
		  /* 821CDD68h */ case    5:  		/* mr R3, R30 */
		/* 821CDD68h case    5:*/		regs.R3 = regs.R30;
		/* 821CDD68h case    5:*/		return 0x821CDD6C;
		  /* 821CDD6Ch */ case    6:  		/* lwz R20, <#[R11]> */
		/* 821CDD6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 821CDD6Ch case    6:*/		return 0x821CDD70;
		  /* 821CDD70h */ case    7:  		/* mr R4, R20 */
		/* 821CDD70h case    7:*/		regs.R4 = regs.R20;
		/* 821CDD70h case    7:*/		return 0x821CDD74;
		  /* 821CDD74h */ case    8:  		/* bl -9660 */
		/* 821CDD74h case    8:*/		regs.LR = 0x821CDD78; return 0x821CB7B8;
		/* 821CDD74h case    8:*/		return 0x821CDD78;
		  /* 821CDD78h */ case    9:  		/* mr R3, R20 */
		/* 821CDD78h case    9:*/		regs.R3 = regs.R20;
		/* 821CDD78h case    9:*/		return 0x821CDD7C;
		  /* 821CDD7Ch */ case   10:  		/* bl -27788 */
		/* 821CDD7Ch case   10:*/		regs.LR = 0x821CDD80; return 0x821C70F0;
		/* 821CDD7Ch case   10:*/		return 0x821CDD80;
		  /* 821CDD80h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CDD80h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CDD80h case   11:*/		return 0x821CDD84;
		  /* 821CDD84h */ case   12:  		/* bc 12, CR0_EQ, 388 */
		/* 821CDD84h case   12:*/		if ( regs.CR[0].eq ) { return 0x821CDF08;  }
		/* 821CDD84h case   12:*/		return 0x821CDD88;
		  /* 821CDD88h */ case   13:  		/* lwz R11, <#[R20 + 4]> */
		/* 821CDD88h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821CDD88h case   13:*/		return 0x821CDD8C;
		  /* 821CDD8Ch */ case   14:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CDD8Ch case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CDD8Ch case   14:*/		return 0x821CDD90;
		  /* 821CDD90h */ case   15:  		/* addic R10, R10, -1 */
		/* 821CDD90h case   15:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CDD90h case   15:*/		return 0x821CDD94;
		  /* 821CDD94h */ case   16:  		/* subfe R10, R10, R10 */
		/* 821CDD94h case   16:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDD94h case   16:*/		return 0x821CDD98;
		  /* 821CDD98h */ case   17:  		/* and R11, R10, R11 */
		/* 821CDD98h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDD98h case   17:*/		return 0x821CDD9C;
		  /* 821CDD9Ch */ case   18:  		/* addi R27, R11, 16 */
		/* 821CDD9Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x10);
		/* 821CDD9Ch case   18:*/		return 0x821CDDA0;
		  /* 821CDDA0h */ case   19:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CDDA0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CDDA0h case   19:*/		return 0x821CDDA4;
		  /* 821CDDA4h */ case   20:  		/* cmplwi CR6, R11, 4 */
		/* 821CDDA4h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821CDDA4h case   20:*/		return 0x821CDDA8;
		  /* 821CDDA8h */ case   21:  		/* bc 4, CR6_EQ, 352 */
		/* 821CDDA8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821CDF08;  }
		/* 821CDDA8h case   21:*/		return 0x821CDDAC;
		  /* 821CDDACh */ case   22:  		/* lwz R11, <#[R27]> */
		/* 821CDDACh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CDDACh case   22:*/		return 0x821CDDB0;
		  /* 821CDDB0h */ case   23:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CDDB0h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDDB0h case   23:*/		return 0x821CDDB4;
		  /* 821CDDB4h */ case   24:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821CDDB4h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821CDDB4h case   24:*/		return 0x821CDDB8;
		  /* 821CDDB8h */ case   25:  		/* cmplwi CR6, R10, 1152 */
		/* 821CDDB8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000480);
		/* 821CDDB8h case   25:*/		return 0x821CDDBC;
		  /* 821CDDBCh */ case   26:  		/* bc 4, CR6_EQ, 332 */
		/* 821CDDBCh case   26:*/		if ( !regs.CR[6].eq ) { return 0x821CDF08;  }
		/* 821CDDBCh case   26:*/		return 0x821CDDC0;
		  /* 821CDDC0h */ case   27:  		/* mr R6, R19 */
		/* 821CDDC0h case   27:*/		regs.R6 = regs.R19;
		/* 821CDDC0h case   27:*/		return 0x821CDDC4;
		  /* 821CDDC4h */ case   28:  		/* lwz R4, <#[R11 + 44]> */
		/* 821CDDC4h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CDDC4h case   28:*/		return 0x821CDDC8;
		  /* 821CDDC8h */ case   29:  		/* mr R3, R30 */
		/* 821CDDC8h case   29:*/		regs.R3 = regs.R30;
		/* 821CDDC8h case   29:*/		return 0x821CDDCC;
		  /* 821CDDCCh */ case   30:  		/* lwz R5, <#[R27 + 4]> */
		/* 821CDDCCh case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000004) );
		/* 821CDDCCh case   30:*/		return 0x821CDDD0;
		  /* 821CDDD0h */ case   31:  		/* bl -11280 */
		/* 821CDDD0h case   31:*/		regs.LR = 0x821CDDD4; return 0x821CB1C0;
		/* 821CDDD0h case   31:*/		return 0x821CDDD4;
		  /* 821CDDD4h */ case   32:  		/* mr R28, R3 */
		/* 821CDDD4h case   32:*/		regs.R28 = regs.R3;
		/* 821CDDD4h case   32:*/		return 0x821CDDD8;
		  /* 821CDDD8h */ case   33:  		/* mr R3, R30 */
		/* 821CDDD8h case   33:*/		regs.R3 = regs.R30;
		/* 821CDDD8h case   33:*/		return 0x821CDDDC;
		  /* 821CDDDCh */ case   34:  		/* mr R4, R28 */
		/* 821CDDDCh case   34:*/		regs.R4 = regs.R28;
		/* 821CDDDCh case   34:*/		return 0x821CDDE0;
		  /* 821CDDE0h */ case   35:  		/* bl -9768 */
		/* 821CDDE0h case   35:*/		regs.LR = 0x821CDDE4; return 0x821CB7B8;
		/* 821CDDE0h case   35:*/		return 0x821CDDE4;
		  /* 821CDDE4h */ case   36:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CDDE4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CDDE4h case   36:*/		return 0x821CDDE8;
		  /* 821CDDE8h */ case   37:  		/* stw R18, <#[R1 + 96]> */
		/* 821CDDE8h case   37:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 821CDDE8h case   37:*/		return 0x821CDDEC;
		  /* 821CDDECh */ case   38:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CDDECh case   38:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CDDECh case   38:*/		return 0x821CDDF0;
		  /* 821CDDF0h */ case   39:  		/* stw R21, <#[R1 + 88]> */
		/* 821CDDF0h case   39:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000058) );
		/* 821CDDF0h case   39:*/		return 0x821CDDF4;
		  /* 821CDDF4h */ case   40:  		/* addic R10, R10, -1 */
		/* 821CDDF4h case   40:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CDDF4h case   40:*/		return 0x821CDDF8;
		  /* 821CDDF8h */ case   41:  		/* subfe R10, R10, R10 */
		/* 821CDDF8h case   41:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDDF8h case   41:*/		return 0x821CDDFC;
		  /* 821CDDFCh */ case   42:  		/* and R11, R10, R11 */
		/* 821CDDFCh case   42:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDDFCh case   42:*/		return 0x821CDE00;
		  /* 821CDE00h */ case   43:  		/* stw R11, <#[R1 + 92]> */
		/* 821CDE00h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CDE00h case   43:*/		return 0x821CDE04;
		  /* 821CDE04h */ case   44:  		/* b 8 */
		/* 821CDE04h case   44:*/		return 0x821CDE0C;
		/* 821CDE04h case   44:*/		return 0x821CDE08;
		  /* 821CDE08h */ case   45:  		/* lwz R11, <#[R1 + 92]> */
		/* 821CDE08h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CDE08h case   45:*/		return 0x821CDE0C;
	}
	return 0x821CDE0C;
} // Block from 821CDD54h-821CDE0Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 821CDE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDE0C);
		  /* 821CDE0Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CDE0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDE0Ch case    0:*/		return 0x821CDE10;
		  /* 821CDE10h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CDE10h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CDE28;  }
		/* 821CDE10h case    1:*/		return 0x821CDE14;
		  /* 821CDE14h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDE14h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDE14h case    2:*/		return 0x821CDE18;
		  /* 821CDE18h */ case    3:  		/* lwz R10, <#[R1 + 96]> */
		/* 821CDE18h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821CDE18h case    3:*/		return 0x821CDE1C;
		  /* 821CDE1Ch */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CDE1Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CDE1Ch case    4:*/		return 0x821CDE20;
		  /* 821CDE20h */ case    5:  		/* mr R11, R18 */
		/* 821CDE20h case    5:*/		regs.R11 = regs.R18;
		/* 821CDE20h case    5:*/		return 0x821CDE24;
		  /* 821CDE24h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CDE24h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CDE2C;  }
		/* 821CDE24h case    6:*/		return 0x821CDE28;
	}
	return 0x821CDE28;
} // Block from 821CDE0Ch-821CDE28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CDE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDE28);
		  /* 821CDE28h */ case    0:  		/* li R11, 1 */
		/* 821CDE28h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CDE28h case    0:*/		return 0x821CDE2C;
	}
	return 0x821CDE2C;
} // Block from 821CDE28h-821CDE2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDE2C);
		  /* 821CDE2Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CDE2Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CDE2Ch case    0:*/		return 0x821CDE30;
		  /* 821CDE30h */ case    1:  		/* bc 4, CR0_EQ, 192 */
		/* 821CDE30h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CDEF0;  }
		/* 821CDE30h case    1:*/		return 0x821CDE34;
		  /* 821CDE34h */ case    2:  		/* addi R3, R1, 88 */
		/* 821CDE34h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821CDE34h case    2:*/		return 0x821CDE38;
		  /* 821CDE38h */ case    3:  		/* bl -53296 */
		/* 821CDE38h case    3:*/		regs.LR = 0x821CDE3C; return 0x821C0E08;
		/* 821CDE38h case    3:*/		return 0x821CDE3C;
		  /* 821CDE3Ch */ case    4:  		/* lwz R31, <#[R3]> */
		/* 821CDE3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821CDE3Ch case    4:*/		return 0x821CDE40;
		  /* 821CDE40h */ case    5:  		/* cmplw CR6, R31, R20 */
		/* 821CDE40h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R20);
		/* 821CDE40h case    5:*/		return 0x821CDE44;
		  /* 821CDE44h */ case    6:  		/* bc 12, CR6_EQ, -60 */
		/* 821CDE44h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CDE08;  }
		/* 821CDE44h case    6:*/		return 0x821CDE48;
		  /* 821CDE48h */ case    7:  		/* mr R4, R31 */
		/* 821CDE48h case    7:*/		regs.R4 = regs.R31;
		/* 821CDE48h case    7:*/		return 0x821CDE4C;
		  /* 821CDE4Ch */ case    8:  		/* mr R3, R30 */
		/* 821CDE4Ch case    8:*/		regs.R3 = regs.R30;
		/* 821CDE4Ch case    8:*/		return 0x821CDE50;
		  /* 821CDE50h */ case    9:  		/* bl -9880 */
		/* 821CDE50h case    9:*/		regs.LR = 0x821CDE54; return 0x821CB7B8;
		/* 821CDE50h case    9:*/		return 0x821CDE54;
		  /* 821CDE54h */ case   10:  		/* li R6, 0 */
		/* 821CDE54h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CDE54h case   10:*/		return 0x821CDE58;
		  /* 821CDE58h */ case   11:  		/* mr R5, R28 */
		/* 821CDE58h case   11:*/		regs.R5 = regs.R28;
		/* 821CDE58h case   11:*/		return 0x821CDE5C;
		  /* 821CDE5Ch */ case   12:  		/* mr R4, R31 */
		/* 821CDE5Ch case   12:*/		regs.R4 = regs.R31;
		/* 821CDE5Ch case   12:*/		return 0x821CDE60;
		  /* 821CDE60h */ case   13:  		/* mr R3, R30 */
		/* 821CDE60h case   13:*/		regs.R3 = regs.R30;
		/* 821CDE60h case   13:*/		return 0x821CDE64;
		  /* 821CDE64h */ case   14:  		/* bl -13900 */
		/* 821CDE64h case   14:*/		regs.LR = 0x821CDE68; return 0x821CA818;
		/* 821CDE64h case   14:*/		return 0x821CDE68;
		  /* 821CDE68h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CDE68h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CDE68h case   15:*/		return 0x821CDE6C;
		  /* 821CDE6Ch */ case   16:  		/* bc 12, CR0_EQ, -100 */
		/* 821CDE6Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x821CDE08;  }
		/* 821CDE6Ch case   16:*/		return 0x821CDE70;
		  /* 821CDE70h */ case   17:  		/* addi R7, R1, 80 */
		/* 821CDE70h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821CDE70h case   17:*/		return 0x821CDE74;
		  /* 821CDE74h */ case   18:  		/* lwz R8, <#[R30 + 652]> */
		/* 821CDE74h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000028C) );
		/* 821CDE74h case   18:*/		return 0x821CDE78;
		  /* 821CDE78h */ case   19:  		/* li R6, 0 */
		/* 821CDE78h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CDE78h case   19:*/		return 0x821CDE7C;
		  /* 821CDE7Ch */ case   20:  		/* mr R5, R31 */
		/* 821CDE7Ch case   20:*/		regs.R5 = regs.R31;
		/* 821CDE7Ch case   20:*/		return 0x821CDE80;
		  /* 821CDE80h */ case   21:  		/* mr R4, R19 */
		/* 821CDE80h case   21:*/		regs.R4 = regs.R19;
		/* 821CDE80h case   21:*/		return 0x821CDE84;
		  /* 821CDE84h */ case   22:  		/* mr R3, R30 */
		/* 821CDE84h case   22:*/		regs.R3 = regs.R30;
		/* 821CDE84h case   22:*/		return 0x821CDE88;
		  /* 821CDE88h */ case   23:  		/* bl -968 */
		/* 821CDE88h case   23:*/		regs.LR = 0x821CDE8C; return 0x821CDAC0;
		/* 821CDE88h case   23:*/		return 0x821CDE8C;
		  /* 821CDE8Ch */ case   24:  		/* mr R5, R19 */
		/* 821CDE8Ch case   24:*/		regs.R5 = regs.R19;
		/* 821CDE8Ch case   24:*/		return 0x821CDE90;
		  /* 821CDE90h */ case   25:  		/* li R4, 0 */
		/* 821CDE90h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CDE90h case   25:*/		return 0x821CDE94;
		  /* 821CDE94h */ case   26:  		/* lwz R6, <#[R1 + 80]> */
		/* 821CDE94h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821CDE94h case   26:*/		return 0x821CDE98;
		  /* 821CDE98h */ case   27:  		/* mr R3, R30 */
		/* 821CDE98h case   27:*/		regs.R3 = regs.R30;
		/* 821CDE98h case   27:*/		return 0x821CDE9C;
		  /* 821CDE9Ch */ case   28:  		/* bl -51852 */
		/* 821CDE9Ch case   28:*/		regs.LR = 0x821CDEA0; return 0x821C1410;
		/* 821CDE9Ch case   28:*/		return 0x821CDEA0;
		  /* 821CDEA0h */ case   29:  		/* mr R26, R3 */
		/* 821CDEA0h case   29:*/		regs.R26 = regs.R3;
		/* 821CDEA0h case   29:*/		return 0x821CDEA4;
		  /* 821CDEA4h */ case   30:  		/* mr R4, R31 */
		/* 821CDEA4h case   30:*/		regs.R4 = regs.R31;
		/* 821CDEA4h case   30:*/		return 0x821CDEA8;
		  /* 821CDEA8h */ case   31:  		/* mr R3, R21 */
		/* 821CDEA8h case   31:*/		regs.R3 = regs.R21;
		/* 821CDEA8h case   31:*/		return 0x821CDEAC;
		  /* 821CDEACh */ case   32:  		/* bl -376324 */
		/* 821CDEACh case   32:*/		regs.LR = 0x821CDEB0; return 0x821720A8;
		/* 821CDEACh case   32:*/		return 0x821CDEB0;
		  /* 821CDEB0h */ case   33:  		/* mr R3, R31 */
		/* 821CDEB0h case   33:*/		regs.R3 = regs.R31;
		/* 821CDEB0h case   33:*/		return 0x821CDEB4;
		  /* 821CDEB4h */ case   34:  		/* bl 146468 */
		/* 821CDEB4h case   34:*/		regs.LR = 0x821CDEB8; return 0x821F1AD8;
		/* 821CDEB4h case   34:*/		return 0x821CDEB8;
		  /* 821CDEB8h */ case   35:  		/* lwz R11, <#[R30 + 976]> */
		/* 821CDEB8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDEB8h case   35:*/		return 0x821CDEBC;
		  /* 821CDEBCh */ case   36:  		/* addi R29, R30, 972 */
		/* 821CDEBCh case   36:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x3CC);
		/* 821CDEBCh case   36:*/		return 0x821CDEC0;
		  /* 821CDEC0h */ case   37:  		/* stw R11, <#[R31]> */
		/* 821CDEC0h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CDEC0h case   37:*/		return 0x821CDEC4;
		  /* 821CDEC4h */ case   38:  		/* stw R31, <#[R30 + 976]> */
		/* 821CDEC4h case   38:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDEC4h case   38:*/		return 0x821CDEC8;
		  /* 821CDEC8h */ case   39:  		/* stw R26, <#[R27]> */
		/* 821CDEC8h case   39:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R27 + 0x00000000) );
		/* 821CDEC8h case   39:*/		return 0x821CDECC;
		  /* 821CDECCh */ case   40:  		/* stw R18, <#[R27 + 8]> */
		/* 821CDECCh case   40:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R27 + 0x00000008) );
		/* 821CDECCh case   40:*/		return 0x821CDED0;
		  /* 821CDED0h */ case   41:  		/* stw R18, <#[R27 + 4]> */
		/* 821CDED0h case   41:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R27 + 0x00000004) );
		/* 821CDED0h case   41:*/		return 0x821CDED4;
		  /* 821CDED4h */ case   42:  		/* mr R3, R28 */
		/* 821CDED4h case   42:*/		regs.R3 = regs.R28;
		/* 821CDED4h case   42:*/		return 0x821CDED8;
		  /* 821CDED8h */ case   43:  		/* bl 146432 */
		/* 821CDED8h case   43:*/		regs.LR = 0x821CDEDC; return 0x821F1AD8;
		/* 821CDED8h case   43:*/		return 0x821CDEDC;
		  /* 821CDEDCh */ case   44:  		/* lwz R11, <#[R30 + 976]> */
		/* 821CDEDCh case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDEDCh case   44:*/		return 0x821CDEE0;
		  /* 821CDEE0h */ case   45:  		/* stw R11, <#[R28]> */
		/* 821CDEE0h case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821CDEE0h case   45:*/		return 0x821CDEE4;
		  /* 821CDEE4h */ case   46:  		/* li R17, 1 */
		/* 821CDEE4h case   46:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821CDEE4h case   46:*/		return 0x821CDEE8;
		  /* 821CDEE8h */ case   47:  		/* stw R28, <#[R30 + 976]> */
		/* 821CDEE8h case   47:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDEE8h case   47:*/		return 0x821CDEEC;
		  /* 821CDEECh */ case   48:  		/* b -480 */
		/* 821CDEECh case   48:*/		return 0x821CDD0C;
		/* 821CDEECh case   48:*/		return 0x821CDEF0;
	}
	return 0x821CDEF0;
} // Block from 821CDE2Ch-821CDEF0h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821CDEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDEF0);
		  /* 821CDEF0h */ case    0:  		/* mr R3, R28 */
		/* 821CDEF0h case    0:*/		regs.R3 = regs.R28;
		/* 821CDEF0h case    0:*/		return 0x821CDEF4;
		  /* 821CDEF4h */ case    1:  		/* bl 146404 */
		/* 821CDEF4h case    1:*/		regs.LR = 0x821CDEF8; return 0x821F1AD8;
		/* 821CDEF4h case    1:*/		return 0x821CDEF8;
		  /* 821CDEF8h */ case    2:  		/* lwz R10, <#[R30 + 976]> */
		/* 821CDEF8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDEF8h case    2:*/		return 0x821CDEFC;
		  /* 821CDEFCh */ case    3:  		/* addi R11, R30, 972 */
		/* 821CDEFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821CDEFCh case    3:*/		return 0x821CDF00;
		  /* 821CDF00h */ case    4:  		/* stw R10, <#[R28]> */
		/* 821CDF00h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821CDF00h case    4:*/		return 0x821CDF04;
		  /* 821CDF04h */ case    5:  		/* stw R28, <#[R30 + 976]> */
		/* 821CDF04h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CDF04h case    5:*/		return 0x821CDF08;
	}
	return 0x821CDF08;
} // Block from 821CDEF0h-821CDF08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CDF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDF08);
		  /* 821CDF08h */ case    0:  		/* mr R3, R20 */
		/* 821CDF08h case    0:*/		regs.R3 = regs.R20;
		/* 821CDF08h case    0:*/		return 0x821CDF0C;
		  /* 821CDF0Ch */ case    1:  		/* bl -28188 */
		/* 821CDF0Ch case    1:*/		regs.LR = 0x821CDF10; return 0x821C70F0;
		/* 821CDF0Ch case    1:*/		return 0x821CDF10;
		  /* 821CDF10h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CDF10h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CDF10h case    2:*/		return 0x821CDF14;
		  /* 821CDF14h */ case    3:  		/* bc 12, CR0_EQ, 812 */
		/* 821CDF14h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CE240;  }
		/* 821CDF14h case    3:*/		return 0x821CDF18;
		  /* 821CDF18h */ case    4:  		/* lwz R11, <#[R20 + 4]> */
		/* 821CDF18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821CDF18h case    4:*/		return 0x821CDF1C;
		  /* 821CDF1Ch */ case    5:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CDF1Ch case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CDF1Ch case    5:*/		return 0x821CDF20;
		  /* 821CDF20h */ case    6:  		/* addic R10, R10, -1 */
		/* 821CDF20h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CDF20h case    6:*/		return 0x821CDF24;
		  /* 821CDF24h */ case    7:  		/* subfe R10, R10, R10 */
		/* 821CDF24h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDF24h case    7:*/		return 0x821CDF28;
		  /* 821CDF28h */ case    8:  		/* and R11, R10, R11 */
		/* 821CDF28h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDF28h case    8:*/		return 0x821CDF2C;
		  /* 821CDF2Ch */ case    9:  		/* addi R22, R11, 16 */
		/* 821CDF2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x10);
		/* 821CDF2Ch case    9:*/		return 0x821CDF30;
		  /* 821CDF30h */ case   10:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CDF30h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CDF30h case   10:*/		return 0x821CDF34;
		  /* 821CDF34h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821CDF34h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDF34h case   11:*/		return 0x821CDF38;
		  /* 821CDF38h */ case   12:  		/* bc 4, CR6_EQ, 776 */
		/* 821CDF38h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821CE240;  }
		/* 821CDF38h case   12:*/		return 0x821CDF3C;
		  /* 821CDF3Ch */ case   13:  		/* lwz R11, <#[R22]> */
		/* 821CDF3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821CDF3Ch case   13:*/		return 0x821CDF40;
		  /* 821CDF40h */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CDF40h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDF40h case   14:*/		return 0x821CDF44;
		  /* 821CDF44h */ case   15:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821CDF44h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821CDF44h case   15:*/		return 0x821CDF48;
		  /* 821CDF48h */ case   16:  		/* cmplwi CR6, R10, 1408 */
		/* 821CDF48h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000580);
		/* 821CDF48h case   16:*/		return 0x821CDF4C;
		  /* 821CDF4Ch */ case   17:  		/* bc 4, CR6_EQ, 756 */
		/* 821CDF4Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x821CE240;  }
		/* 821CDF4Ch case   17:*/		return 0x821CDF50;
		  /* 821CDF50h */ case   18:  		/* mr R6, R19 */
		/* 821CDF50h case   18:*/		regs.R6 = regs.R19;
		/* 821CDF50h case   18:*/		return 0x821CDF54;
		  /* 821CDF54h */ case   19:  		/* lwz R4, <#[R11 + 44]> */
		/* 821CDF54h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CDF54h case   19:*/		return 0x821CDF58;
		  /* 821CDF58h */ case   20:  		/* mr R3, R30 */
		/* 821CDF58h case   20:*/		regs.R3 = regs.R30;
		/* 821CDF58h case   20:*/		return 0x821CDF5C;
		  /* 821CDF5Ch */ case   21:  		/* lwz R5, <#[R22 + 4]> */
		/* 821CDF5Ch case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R22 + 0x00000004) );
		/* 821CDF5Ch case   21:*/		return 0x821CDF60;
		  /* 821CDF60h */ case   22:  		/* bl -11680 */
		/* 821CDF60h case   22:*/		regs.LR = 0x821CDF64; return 0x821CB1C0;
		/* 821CDF60h case   22:*/		return 0x821CDF64;
		  /* 821CDF64h */ case   23:  		/* mr R27, R3 */
		/* 821CDF64h case   23:*/		regs.R27 = regs.R3;
		/* 821CDF64h case   23:*/		return 0x821CDF68;
		  /* 821CDF68h */ case   24:  		/* mr R3, R30 */
		/* 821CDF68h case   24:*/		regs.R3 = regs.R30;
		/* 821CDF68h case   24:*/		return 0x821CDF6C;
		  /* 821CDF6Ch */ case   25:  		/* mr R4, R27 */
		/* 821CDF6Ch case   25:*/		regs.R4 = regs.R27;
		/* 821CDF6Ch case   25:*/		return 0x821CDF70;
		  /* 821CDF70h */ case   26:  		/* bl -10168 */
		/* 821CDF70h case   26:*/		regs.LR = 0x821CDF74; return 0x821CB7B8;
		/* 821CDF70h case   26:*/		return 0x821CDF74;
		  /* 821CDF74h */ case   27:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CDF74h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CDF74h case   27:*/		return 0x821CDF78;
		  /* 821CDF78h */ case   28:  		/* stw R18, <#[R1 + 112]> */
		/* 821CDF78h case   28:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000070) );
		/* 821CDF78h case   28:*/		return 0x821CDF7C;
		  /* 821CDF7Ch */ case   29:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CDF7Ch case   29:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CDF7Ch case   29:*/		return 0x821CDF80;
		  /* 821CDF80h */ case   30:  		/* stw R21, <#[R1 + 104]> */
		/* 821CDF80h case   30:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 821CDF80h case   30:*/		return 0x821CDF84;
		  /* 821CDF84h */ case   31:  		/* addic R10, R10, -1 */
		/* 821CDF84h case   31:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CDF84h case   31:*/		return 0x821CDF88;
		  /* 821CDF88h */ case   32:  		/* subfe R10, R10, R10 */
		/* 821CDF88h case   32:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CDF88h case   32:*/		return 0x821CDF8C;
		  /* 821CDF8Ch */ case   33:  		/* and R11, R10, R11 */
		/* 821CDF8Ch case   33:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CDF8Ch case   33:*/		return 0x821CDF90;
		  /* 821CDF90h */ case   34:  		/* stw R11, <#[R1 + 108]> */
		/* 821CDF90h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CDF90h case   34:*/		return 0x821CDF94;
		  /* 821CDF94h */ case   35:  		/* b 8 */
		/* 821CDF94h case   35:*/		return 0x821CDF9C;
		/* 821CDF94h case   35:*/		return 0x821CDF98;
		  /* 821CDF98h */ case   36:  		/* lwz R11, <#[R1 + 108]> */
		/* 821CDF98h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CDF98h case   36:*/		return 0x821CDF9C;
	}
	return 0x821CDF9C;
} // Block from 821CDF08h-821CDF9Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 821CDF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDF9C);
		  /* 821CDF9Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CDF9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CDF9Ch case    0:*/		return 0x821CDFA0;
		  /* 821CDFA0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CDFA0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CDFB8;  }
		/* 821CDFA0h case    1:*/		return 0x821CDFA4;
		  /* 821CDFA4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CDFA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CDFA4h case    2:*/		return 0x821CDFA8;
		  /* 821CDFA8h */ case    3:  		/* lwz R10, <#[R1 + 112]> */
		/* 821CDFA8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821CDFA8h case    3:*/		return 0x821CDFAC;
		  /* 821CDFACh */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CDFACh case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CDFACh case    4:*/		return 0x821CDFB0;
		  /* 821CDFB0h */ case    5:  		/* mr R11, R18 */
		/* 821CDFB0h case    5:*/		regs.R11 = regs.R18;
		/* 821CDFB0h case    5:*/		return 0x821CDFB4;
		  /* 821CDFB4h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CDFB4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CDFBC;  }
		/* 821CDFB4h case    6:*/		return 0x821CDFB8;
	}
	return 0x821CDFB8;
} // Block from 821CDF9Ch-821CDFB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CDFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDFB8);
		  /* 821CDFB8h */ case    0:  		/* li R11, 1 */
		/* 821CDFB8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CDFB8h case    0:*/		return 0x821CDFBC;
	}
	return 0x821CDFBC;
} // Block from 821CDFB8h-821CDFBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CDFBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CDFBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CDFBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CDFBC);
		  /* 821CDFBCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CDFBCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CDFBCh case    0:*/		return 0x821CDFC0;
		  /* 821CDFC0h */ case    1:  		/* bc 4, CR0_EQ, 616 */
		/* 821CDFC0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE228;  }
		/* 821CDFC0h case    1:*/		return 0x821CDFC4;
		  /* 821CDFC4h */ case    2:  		/* addi R3, R1, 104 */
		/* 821CDFC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821CDFC4h case    2:*/		return 0x821CDFC8;
		  /* 821CDFC8h */ case    3:  		/* bl -53696 */
		/* 821CDFC8h case    3:*/		regs.LR = 0x821CDFCC; return 0x821C0E08;
		/* 821CDFC8h case    3:*/		return 0x821CDFCC;
		  /* 821CDFCCh */ case    4:  		/* lwz R26, <#[R3]> */
		/* 821CDFCCh case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 821CDFCCh case    4:*/		return 0x821CDFD0;
		  /* 821CDFD0h */ case    5:  		/* cmplw CR6, R26, R20 */
		/* 821CDFD0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R20);
		/* 821CDFD0h case    5:*/		return 0x821CDFD4;
		  /* 821CDFD4h */ case    6:  		/* bc 12, CR6_EQ, -60 */
		/* 821CDFD4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CDFD4h case    6:*/		return 0x821CDFD8;
		  /* 821CDFD8h */ case    7:  		/* mr R3, R26 */
		/* 821CDFD8h case    7:*/		regs.R3 = regs.R26;
		/* 821CDFD8h case    7:*/		return 0x821CDFDC;
		  /* 821CDFDCh */ case    8:  		/* bl -28316 */
		/* 821CDFDCh case    8:*/		regs.LR = 0x821CDFE0; return 0x821C7140;
		/* 821CDFDCh case    8:*/		return 0x821CDFE0;
		  /* 821CDFE0h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CDFE0h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CDFE0h case    9:*/		return 0x821CDFE4;
		  /* 821CDFE4h */ case   10:  		/* bc 12, CR0_EQ, -76 */
		/* 821CDFE4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CDF98;  }
		/* 821CDFE4h case   10:*/		return 0x821CDFE8;
		  /* 821CDFE8h */ case   11:  		/* lwz R10, <#[R26 + 4]> */
		/* 821CDFE8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821CDFE8h case   11:*/		return 0x821CDFEC;
		  /* 821CDFECh */ case   12:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821CDFECh case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CDFECh case   12:*/		return 0x821CDFF0;
		  /* 821CDFF0h */ case   13:  		/* addic R9, R11, -1 */
		/* 821CDFF0h case   13:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821CDFF0h case   13:*/		return 0x821CDFF4;
		  /* 821CDFF4h */ case   14:  		/* subfe R9, R9, R9 */
		/* 821CDFF4h case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CDFF4h case   14:*/		return 0x821CDFF8;
		  /* 821CDFF8h */ case   15:  		/* addic R11, R11, -1 */
		/* 821CDFF8h case   15:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CDFF8h case   15:*/		return 0x821CDFFC;
		  /* 821CDFFCh */ case   16:  		/* and R11, R9, R10 */
		/* 821CDFFCh case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821CDFFCh case   16:*/		return 0x821CE000;
		  /* 821CE000h */ case   17:  		/* subfe R9, R8, R8 */
		/* 821CE000h case   17:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 821CE000h case   17:*/		return 0x821CE004;
		  /* 821CE004h */ case   18:  		/* addi R24, R11, 16 */
		/* 821CE004h case   18:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x10);
		/* 821CE004h case   18:*/		return 0x821CE008;
		  /* 821CE008h */ case   19:  		/* and R11, R9, R10 */
		/* 821CE008h case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821CE008h case   19:*/		return 0x821CE00C;
		  /* 821CE00Ch */ case   20:  		/* addi R23, R11, 28 */
		/* 821CE00Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x1C);
		/* 821CE00Ch case   20:*/		return 0x821CE010;
		  /* 821CE010h */ case   21:  		/* lwz R11, <#[R24 + 8]> */
		/* 821CE010h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821CE010h case   21:*/		return 0x821CE014;
		  /* 821CE014h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821CE014h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE014h case   22:*/		return 0x821CE018;
		  /* 821CE018h */ case   23:  		/* bc 4, CR6_EQ, -128 */
		/* 821CE018h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE018h case   23:*/		return 0x821CE01C;
		  /* 821CE01Ch */ case   24:  		/* lwz R25, <#[R24]> */
		/* 821CE01Ch case   24:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 821CE01Ch case   24:*/		return 0x821CE020;
		  /* 821CE020h */ case   25:  		/* lwz R11, <#[R25 + 8]> */
		/* 821CE020h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821CE020h case   25:*/		return 0x821CE024;
		  /* 821CE024h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CE024h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CE024h case   26:*/		return 0x821CE028;
		  /* 821CE028h */ case   27:  		/* cmplwi CR6, R11, 768 */
		/* 821CE028h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 821CE028h case   27:*/		return 0x821CE02C;
		  /* 821CE02Ch */ case   28:  		/* bc 4, CR6_EQ, -148 */
		/* 821CE02Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE02Ch case   28:*/		return 0x821CE030;
		  /* 821CE030h */ case   29:  		/* lwz R11, <#[R25 + 48]> */
		/* 821CE030h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821CE030h case   29:*/		return 0x821CE034;
		  /* 821CE034h */ case   30:  		/* lwz R10, <#[R24 + 4]> */
		/* 821CE034h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 821CE034h case   30:*/		return 0x821CE038;
		  /* 821CE038h */ case   31:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821CE038h case   31:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821CE038h case   31:*/		return 0x821CE03C;
		  /* 821CE03Ch */ case   32:  		/* lwz R9, <#[R11]> */
		/* 821CE03Ch case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE03Ch case   32:*/		return 0x821CE040;
		  /* 821CE040h */ case   33:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CE040h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CE040h case   33:*/		return 0x821CE044;
		  /* 821CE044h */ case   34:  		/* rlwinm R8, R9, 27, 24, 31 */
		/* 821CE044h case   34:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R9);
		/* 821CE044h case   34:*/		return 0x821CE048;
		  /* 821CE048h */ case   35:  		/* rlwinm R4, R9, 0, 27, 31 */
		/* 821CE048h case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R9);
		/* 821CE048h case   35:*/		return 0x821CE04C;
		  /* 821CE04Ch */ case   36:  		/* srw R10, R8, R10 */
		/* 821CE04Ch case   36:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821CE04Ch case   36:*/		return 0x821CE050;
		  /* 821CE050h */ case   37:  		/* lhz R11, <#[R11 + 14]> */
		/* 821CE050h case   37:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821CE050h case   37:*/		return 0x821CE054;
		  /* 821CE054h */ case   38:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 821CE054h case   38:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 821CE054h case   38:*/		return 0x821CE058;
		  /* 821CE058h */ case   39:  		/* srw R11, R11, R10 */
		/* 821CE058h case   39:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CE058h case   39:*/		return 0x821CE05C;
		  /* 821CE05Ch */ case   40:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821CE05Ch case   40:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821CE05Ch case   40:*/		return 0x821CE060;
	}
	return 0x821CE060;
} // Block from 821CDFBCh-821CE060h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821CE060h
// Function '?InlineReplaceCallSite@Compiler@D3DXShader@@AAAXPAVBlock@2@0PAVInstruction@2@0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE060);
		  /* 821CE060h */ case    0:  		/* bl -208864 */
		/* 821CE060h case    0:*/		regs.LR = 0x821CE064; return 0x8219B080;
		/* 821CE060h case    0:*/		return 0x821CE064;
		  /* 821CE064h */ case    1:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821CE064h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821CE064h case    1:*/		return 0x821CE068;
		  /* 821CE068h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 821CE068h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821CE068h case    2:*/		return 0x821CE06C;
		  /* 821CE06Ch */ case    3:  		/* bc 4, CR6_EQ, -212 */
		/* 821CE06Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE06Ch case    3:*/		return 0x821CE070;
		  /* 821CE070h */ case    4:  		/* lwz R11, <#[R23 + 8]> */
		/* 821CE070h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821CE070h case    4:*/		return 0x821CE074;
		  /* 821CE074h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CE074h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE074h case    5:*/		return 0x821CE078;
		  /* 821CE078h */ case    6:  		/* bc 4, CR6_EQ, -224 */
		/* 821CE078h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE078h case    6:*/		return 0x821CE07C;
		  /* 821CE07Ch */ case    7:  		/* lwz R31, <#[R23]> */
		/* 821CE07Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000000) );
		/* 821CE07Ch case    7:*/		return 0x821CE080;
		  /* 821CE080h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CE080h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CE080h case    8:*/		return 0x821CE084;
		  /* 821CE084h */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CE084h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CE084h case    9:*/		return 0x821CE088;
		  /* 821CE088h */ case   10:  		/* cmplwi CR6, R11, 768 */
		/* 821CE088h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 821CE088h case   10:*/		return 0x821CE08C;
		  /* 821CE08Ch */ case   11:  		/* bc 4, CR6_EQ, -244 */
		/* 821CE08Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE08Ch case   11:*/		return 0x821CE090;
		  /* 821CE090h */ case   12:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CE090h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CE090h case   12:*/		return 0x821CE094;
		  /* 821CE094h */ case   13:  		/* lwz R10, <#[R23 + 4]> */
		/* 821CE094h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821CE094h case   13:*/		return 0x821CE098;
		  /* 821CE098h */ case   14:  		/* rlwinm R28, R10, 1, 0, 30 */
		/* 821CE098h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R10);
		/* 821CE098h case   14:*/		return 0x821CE09C;
		  /* 821CE09Ch */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821CE09Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE09Ch case   15:*/		return 0x821CE0A0;
		  /* 821CE0A0h */ case   16:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CE0A0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CE0A0h case   16:*/		return 0x821CE0A4;
		  /* 821CE0A4h */ case   17:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821CE0A4h case   17:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821CE0A4h case   17:*/		return 0x821CE0A8;
		  /* 821CE0A8h */ case   18:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821CE0A8h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821CE0A8h case   18:*/		return 0x821CE0AC;
		  /* 821CE0ACh */ case   19:  		/* srw R10, R9, R28 */
		/* 821CE0ACh case   19:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R9,regs.R28);
		/* 821CE0ACh case   19:*/		return 0x821CE0B0;
		  /* 821CE0B0h */ case   20:  		/* lhz R11, <#[R11 + 14]> */
		/* 821CE0B0h case   20:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821CE0B0h case   20:*/		return 0x821CE0B4;
		  /* 821CE0B4h */ case   21:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 821CE0B4h case   21:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 821CE0B4h case   21:*/		return 0x821CE0B8;
		  /* 821CE0B8h */ case   22:  		/* srw R11, R11, R10 */
		/* 821CE0B8h case   22:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CE0B8h case   22:*/		return 0x821CE0BC;
		  /* 821CE0BCh */ case   23:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821CE0BCh case   23:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821CE0BCh case   23:*/		return 0x821CE0C0;
		  /* 821CE0C0h */ case   24:  		/* bl -208960 */
		/* 821CE0C0h case   24:*/		regs.LR = 0x821CE0C4; return 0x8219B080;
		/* 821CE0C0h case   24:*/		return 0x821CE0C4;
		  /* 821CE0C4h */ case   25:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821CE0C4h case   25:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821CE0C4h case   25:*/		return 0x821CE0C8;
		  /* 821CE0C8h */ case   26:  		/* cmplwi CR6, R11, 3 */
		/* 821CE0C8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821CE0C8h case   26:*/		return 0x821CE0CC;
		  /* 821CE0CCh */ case   27:  		/* bc 4, CR6_EQ, -308 */
		/* 821CE0CCh case   27:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE0CCh case   27:*/		return 0x821CE0D0;
		  /* 821CE0D0h */ case   28:  		/* lwz R29, <#[R31 + 44]> */
		/* 821CE0D0h case   28:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000002C) );
		/* 821CE0D0h case   28:*/		return 0x821CE0D4;
		  /* 821CE0D4h */ case   29:  		/* lwz R25, <#[R25 + 44]> */
		/* 821CE0D4h case   29:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x0000002C) );
		/* 821CE0D4h case   29:*/		return 0x821CE0D8;
		  /* 821CE0D8h */ case   30:  		/* lwz R11, <#[R29]> */
		/* 821CE0D8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CE0D8h case   30:*/		return 0x821CE0DC;
		  /* 821CE0DCh */ case   31:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 821CE0DCh case   31:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821CE0DCh case   31:*/		return 0x821CE0E0;
		  /* 821CE0E0h */ case   32:  		/* bc 4, CR0_EQ, 124 */
		/* 821CE0E0h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821CE15C;  }
		/* 821CE0E0h case   32:*/		return 0x821CE0E4;
		  /* 821CE0E4h */ case   33:  		/* lwz R10, <#[R29 + 12]> */
		/* 821CE0E4h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CE0E4h case   33:*/		return 0x821CE0E8;
		  /* 821CE0E8h */ case   34:  		/* lwz R9, <#[R10 + 8]> */
		/* 821CE0E8h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821CE0E8h case   34:*/		return 0x821CE0EC;
		  /* 821CE0ECh */ case   35:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821CE0ECh case   35:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821CE0ECh case   35:*/		return 0x821CE0F0;
		  /* 821CE0F0h */ case   36:  		/* cmplwi CR6, R9, 1152 */
		/* 821CE0F0h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000480);
		/* 821CE0F0h case   36:*/		return 0x821CE0F4;
		  /* 821CE0F4h */ case   37:  		/* bc 4, CR6_EQ, 104 */
		/* 821CE0F4h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821CE15C;  }
		/* 821CE0F4h case   37:*/		return 0x821CE0F8;
		  /* 821CE0F8h */ case   38:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821CE0F8h case   38:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE0F8h case   38:*/		return 0x821CE0FC;
		  /* 821CE0FCh */ case   39:  		/* lwz R4, <#[R10 + 44]> */
		/* 821CE0FCh case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x0000002C) );
		/* 821CE0FCh case   39:*/		return 0x821CE100;
		  /* 821CE100h */ case   40:  		/* mr R6, R19 */
		/* 821CE100h case   40:*/		regs.R6 = regs.R19;
		/* 821CE100h case   40:*/		return 0x821CE104;
		  /* 821CE104h */ case   41:  		/* srw R11, R11, R28 */
		/* 821CE104h case   41:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821CE104h case   41:*/		return 0x821CE108;
		  /* 821CE108h */ case   42:  		/* rlwinm R5, R11, 0, 30, 31 */
		/* 821CE108h case   42:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R11);
		/* 821CE108h case   42:*/		return 0x821CE10C;
		  /* 821CE10Ch */ case   43:  		/* mr R3, R30 */
		/* 821CE10Ch case   43:*/		regs.R3 = regs.R30;
		/* 821CE10Ch case   43:*/		return 0x821CE110;
		  /* 821CE110h */ case   44:  		/* bl -12112 */
		/* 821CE110h case   44:*/		regs.LR = 0x821CE114; return 0x821CB1C0;
		/* 821CE110h case   44:*/		return 0x821CE114;
		  /* 821CE114h */ case   45:  		/* mr R31, R3 */
		/* 821CE114h case   45:*/		regs.R31 = regs.R3;
		/* 821CE114h case   45:*/		return 0x821CE118;
		  /* 821CE118h */ case   46:  		/* mr R5, R3 */
		/* 821CE118h case   46:*/		regs.R5 = regs.R3;
		/* 821CE118h case   46:*/		return 0x821CE11C;
		  /* 821CE11Ch */ case   47:  		/* li R6, 0 */
		/* 821CE11Ch case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CE11Ch case   47:*/		return 0x821CE120;
		  /* 821CE120h */ case   48:  		/* mr R4, R27 */
		/* 821CE120h case   48:*/		regs.R4 = regs.R27;
		/* 821CE120h case   48:*/		return 0x821CE124;
		  /* 821CE124h */ case   49:  		/* mr R3, R30 */
		/* 821CE124h case   49:*/		regs.R3 = regs.R30;
		/* 821CE124h case   49:*/		return 0x821CE128;
		  /* 821CE128h */ case   50:  		/* bl -14608 */
		/* 821CE128h case   50:*/		regs.LR = 0x821CE12C; return 0x821CA818;
		/* 821CE128h case   50:*/		return 0x821CE12C;
		  /* 821CE12Ch */ case   51:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE12Ch case   51:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE12Ch case   51:*/		return 0x821CE130;
		  /* 821CE130h */ case   52:  		/* bc 12, CR0_EQ, 20 */
		/* 821CE130h case   52:*/		if ( regs.CR[0].eq ) { return 0x821CE144;  }
		/* 821CE130h case   52:*/		return 0x821CE134;
		  /* 821CE134h */ case   53:  		/* mr R11, R24 */
		/* 821CE134h case   53:*/		regs.R11 = regs.R24;
		/* 821CE134h case   53:*/		return 0x821CE138;
		  /* 821CE138h */ case   54:  		/* mr R24, R23 */
		/* 821CE138h case   54:*/		regs.R24 = regs.R23;
		/* 821CE138h case   54:*/		return 0x821CE13C;
		  /* 821CE13Ch */ case   55:  		/* mr R23, R11 */
		/* 821CE13Ch case   55:*/		regs.R23 = regs.R11;
		/* 821CE13Ch case   55:*/		return 0x821CE140;
		  /* 821CE140h */ case   56:  		/* mr R25, R29 */
		/* 821CE140h case   56:*/		regs.R25 = regs.R29;
		/* 821CE140h case   56:*/		return 0x821CE144;
	}
	return 0x821CE144;
} // Block from 821CE060h-821CE144h (57 instructions)

//////////////////////////////////////////////////////
// Block at 821CE144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE144);
		  /* 821CE144h */ case    0:  		/* mr R3, R31 */
		/* 821CE144h case    0:*/		regs.R3 = regs.R31;
		/* 821CE144h case    0:*/		return 0x821CE148;
		  /* 821CE148h */ case    1:  		/* bl 145808 */
		/* 821CE148h case    1:*/		regs.LR = 0x821CE14C; return 0x821F1AD8;
		/* 821CE148h case    1:*/		return 0x821CE14C;
		  /* 821CE14Ch */ case    2:  		/* lwz R10, <#[R30 + 976]> */
		/* 821CE14Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE14Ch case    2:*/		return 0x821CE150;
		  /* 821CE150h */ case    3:  		/* addi R11, R30, 972 */
		/* 821CE150h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821CE150h case    3:*/		return 0x821CE154;
		  /* 821CE154h */ case    4:  		/* stw R10, <#[R31]> */
		/* 821CE154h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CE154h case    4:*/		return 0x821CE158;
		  /* 821CE158h */ case    5:  		/* stw R31, <#[R30 + 976]> */
		/* 821CE158h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE158h case    5:*/		return 0x821CE15C;
	}
	return 0x821CE15C;
} // Block from 821CE144h-821CE15Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CE15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE15C);
		  /* 821CE15Ch */ case    0:  		/* lwz R10, <#[R25]> */
		/* 821CE15Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821CE15Ch case    0:*/		return 0x821CE160;
		  /* 821CE160h */ case    1:  		/* rlwinm. R11, R10, 0, 27, 31 */
		/* 821CE160h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821CE160h case    1:*/		return 0x821CE164;
		  /* 821CE164h */ case    2:  		/* bc 4, CR0_EQ, -460 */
		/* 821CE164h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CDF98;  }
		/* 821CE164h case    2:*/		return 0x821CE168;
		  /* 821CE168h */ case    3:  		/* lwz R11, <#[R25 + 12]> */
		/* 821CE168h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821CE168h case    3:*/		return 0x821CE16C;
		  /* 821CE16Ch */ case    4:  		/* lwz R9, <#[R11 + 8]> */
		/* 821CE16Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE16Ch case    4:*/		return 0x821CE170;
		  /* 821CE170h */ case    5:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821CE170h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821CE170h case    5:*/		return 0x821CE174;
		  /* 821CE174h */ case    6:  		/* cmplwi CR6, R9, 1152 */
		/* 821CE174h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000480);
		/* 821CE174h case    6:*/		return 0x821CE178;
		  /* 821CE178h */ case    7:  		/* bc 4, CR6_EQ, -480 */
		/* 821CE178h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CDF98;  }
		/* 821CE178h case    7:*/		return 0x821CE17C;
		  /* 821CE17Ch */ case    8:  		/* lwz R9, <#[R24 + 4]> */
		/* 821CE17Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R24 + 0x00000004) );
		/* 821CE17Ch case    8:*/		return 0x821CE180;
		  /* 821CE180h */ case    9:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821CE180h case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821CE180h case    9:*/		return 0x821CE184;
		  /* 821CE184h */ case   10:  		/* lwz R4, <#[R11 + 44]> */
		/* 821CE184h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CE184h case   10:*/		return 0x821CE188;
		  /* 821CE188h */ case   11:  		/* mr R6, R19 */
		/* 821CE188h case   11:*/		regs.R6 = regs.R19;
		/* 821CE188h case   11:*/		return 0x821CE18C;
		  /* 821CE18Ch */ case   12:  		/* rlwinm R11, R9, 1, 0, 30 */
		/* 821CE18Ch case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R9);
		/* 821CE18Ch case   12:*/		return 0x821CE190;
		  /* 821CE190h */ case   13:  		/* mr R3, R30 */
		/* 821CE190h case   13:*/		regs.R3 = regs.R30;
		/* 821CE190h case   13:*/		return 0x821CE194;
		  /* 821CE194h */ case   14:  		/* srw R11, R10, R11 */
		/* 821CE194h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CE194h case   14:*/		return 0x821CE198;
		  /* 821CE198h */ case   15:  		/* rlwinm R5, R11, 0, 30, 31 */
		/* 821CE198h case   15:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R11);
		/* 821CE198h case   15:*/		return 0x821CE19C;
		  /* 821CE19Ch */ case   16:  		/* bl -12252 */
		/* 821CE19Ch case   16:*/		regs.LR = 0x821CE1A0; return 0x821CB1C0;
		/* 821CE19Ch case   16:*/		return 0x821CE1A0;
		  /* 821CE1A0h */ case   17:  		/* mr R29, R3 */
		/* 821CE1A0h case   17:*/		regs.R29 = regs.R3;
		/* 821CE1A0h case   17:*/		return 0x821CE1A4;
		  /* 821CE1A4h */ case   18:  		/* mr R5, R3 */
		/* 821CE1A4h case   18:*/		regs.R5 = regs.R3;
		/* 821CE1A4h case   18:*/		return 0x821CE1A8;
		  /* 821CE1A8h */ case   19:  		/* li R6, 0 */
		/* 821CE1A8h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CE1A8h case   19:*/		return 0x821CE1AC;
		  /* 821CE1ACh */ case   20:  		/* mr R4, R27 */
		/* 821CE1ACh case   20:*/		regs.R4 = regs.R27;
		/* 821CE1ACh case   20:*/		return 0x821CE1B0;
		  /* 821CE1B0h */ case   21:  		/* mr R3, R30 */
		/* 821CE1B0h case   21:*/		regs.R3 = regs.R30;
		/* 821CE1B0h case   21:*/		return 0x821CE1B4;
		  /* 821CE1B4h */ case   22:  		/* bl -14748 */
		/* 821CE1B4h case   22:*/		regs.LR = 0x821CE1B8; return 0x821CA818;
		/* 821CE1B4h case   22:*/		return 0x821CE1B8;
		  /* 821CE1B8h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE1B8h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE1B8h case   23:*/		return 0x821CE1BC;
		  /* 821CE1BCh */ case   24:  		/* bc 12, CR0_EQ, 80 */
		/* 821CE1BCh case   24:*/		if ( regs.CR[0].eq ) { return 0x821CE20C;  }
		/* 821CE1BCh case   24:*/		return 0x821CE1C0;
		  /* 821CE1C0h */ case   25:  		/* lwz R11, <#[R23]> */
		/* 821CE1C0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821CE1C0h case   25:*/		return 0x821CE1C4;
		  /* 821CE1C4h */ case   26:  		/* mr R6, R19 */
		/* 821CE1C4h case   26:*/		regs.R6 = regs.R19;
		/* 821CE1C4h case   26:*/		return 0x821CE1C8;
		  /* 821CE1C8h */ case   27:  		/* mr R3, R30 */
		/* 821CE1C8h case   27:*/		regs.R3 = regs.R30;
		/* 821CE1C8h case   27:*/		return 0x821CE1CC;
		  /* 821CE1CCh */ case   28:  		/* lwz R5, <#[R23 + 4]> */
		/* 821CE1CCh case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000004) );
		/* 821CE1CCh case   28:*/		return 0x821CE1D0;
		  /* 821CE1D0h */ case   29:  		/* lwz R4, <#[R11 + 44]> */
		/* 821CE1D0h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CE1D0h case   29:*/		return 0x821CE1D4;
		  /* 821CE1D4h */ case   30:  		/* bl -12308 */
		/* 821CE1D4h case   30:*/		regs.LR = 0x821CE1D8; return 0x821CB1C0;
		/* 821CE1D4h case   30:*/		return 0x821CE1D8;
		  /* 821CE1D8h */ case   31:  		/* mr R28, R3 */
		/* 821CE1D8h case   31:*/		regs.R28 = regs.R3;
		/* 821CE1D8h case   31:*/		return 0x821CE1DC;
		  /* 821CE1DCh */ case   32:  		/* mr R5, R3 */
		/* 821CE1DCh case   32:*/		regs.R5 = regs.R3;
		/* 821CE1DCh case   32:*/		return 0x821CE1E0;
		  /* 821CE1E0h */ case   33:  		/* mr R4, R27 */
		/* 821CE1E0h case   33:*/		regs.R4 = regs.R27;
		/* 821CE1E0h case   33:*/		return 0x821CE1E4;
		  /* 821CE1E4h */ case   34:  		/* mr R3, R30 */
		/* 821CE1E4h case   34:*/		regs.R3 = regs.R30;
		/* 821CE1E4h case   34:*/		return 0x821CE1E8;
		  /* 821CE1E8h */ case   35:  		/* bl -15296 */
		/* 821CE1E8h case   35:*/		regs.LR = 0x821CE1EC; return 0x821CA628;
		/* 821CE1E8h case   35:*/		return 0x821CE1EC;
		  /* 821CE1ECh */ case   36:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE1ECh case   36:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE1ECh case   36:*/		return 0x821CE1F0;
		  /* 821CE1F0h */ case   37:  		/* bc 4, CR0_EQ, 444 */
		/* 821CE1F0h case   37:*/		if ( !regs.CR[0].eq ) { return 0x821CE3AC;  }
		/* 821CE1F0h case   37:*/		return 0x821CE1F4;
		  /* 821CE1F4h */ case   38:  		/* mr R3, R28 */
		/* 821CE1F4h case   38:*/		regs.R3 = regs.R28;
		/* 821CE1F4h case   38:*/		return 0x821CE1F8;
		  /* 821CE1F8h */ case   39:  		/* bl 145632 */
		/* 821CE1F8h case   39:*/		regs.LR = 0x821CE1FC; return 0x821F1AD8;
		/* 821CE1F8h case   39:*/		return 0x821CE1FC;
		  /* 821CE1FCh */ case   40:  		/* lwz R10, <#[R30 + 976]> */
		/* 821CE1FCh case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE1FCh case   40:*/		return 0x821CE200;
		  /* 821CE200h */ case   41:  		/* addi R11, R30, 972 */
		/* 821CE200h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821CE200h case   41:*/		return 0x821CE204;
		  /* 821CE204h */ case   42:  		/* stw R10, <#[R28]> */
		/* 821CE204h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821CE204h case   42:*/		return 0x821CE208;
		  /* 821CE208h */ case   43:  		/* stw R28, <#[R30 + 976]> */
		/* 821CE208h case   43:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE208h case   43:*/		return 0x821CE20C;
	}
	return 0x821CE20C;
} // Block from 821CE15Ch-821CE20Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 821CE20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE20C);
		  /* 821CE20Ch */ case    0:  		/* mr R3, R29 */
		/* 821CE20Ch case    0:*/		regs.R3 = regs.R29;
		/* 821CE20Ch case    0:*/		return 0x821CE210;
		  /* 821CE210h */ case    1:  		/* bl 145608 */
		/* 821CE210h case    1:*/		regs.LR = 0x821CE214; return 0x821F1AD8;
		/* 821CE210h case    1:*/		return 0x821CE214;
		  /* 821CE214h */ case    2:  		/* lwz R9, <#[R30 + 976]> */
		/* 821CE214h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE214h case    2:*/		return 0x821CE218;
		  /* 821CE218h */ case    3:  		/* addi R10, R30, 972 */
		/* 821CE218h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x3CC);
		/* 821CE218h case    3:*/		return 0x821CE21C;
		  /* 821CE21Ch */ case    4:  		/* stw R9, <#[R29]> */
		/* 821CE21Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821CE21Ch case    4:*/		return 0x821CE220;
		  /* 821CE220h */ case    5:  		/* stw R29, <#[R30 + 976]> */
		/* 821CE220h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE220h case    5:*/		return 0x821CE224;
		  /* 821CE224h */ case    6:  		/* b -652 */
		/* 821CE224h case    6:*/		return 0x821CDF98;
		/* 821CE224h case    6:*/		return 0x821CE228;
	}
	return 0x821CE228;
} // Block from 821CE20Ch-821CE228h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CE228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE228);
		  /* 821CE228h */ case    0:  		/* mr R3, R27 */
		/* 821CE228h case    0:*/		regs.R3 = regs.R27;
		/* 821CE228h case    0:*/		return 0x821CE22C;
		  /* 821CE22Ch */ case    1:  		/* bl 145580 */
		/* 821CE22Ch case    1:*/		regs.LR = 0x821CE230; return 0x821F1AD8;
		/* 821CE22Ch case    1:*/		return 0x821CE230;
		  /* 821CE230h */ case    2:  		/* lwz R10, <#[R30 + 976]> */
		/* 821CE230h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE230h case    2:*/		return 0x821CE234;
		  /* 821CE234h */ case    3:  		/* addi R11, R30, 972 */
		/* 821CE234h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821CE234h case    3:*/		return 0x821CE238;
		  /* 821CE238h */ case    4:  		/* stw R10, <#[R27]> */
		/* 821CE238h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821CE238h case    4:*/		return 0x821CE23C;
		  /* 821CE23Ch */ case    5:  		/* stw R27, <#[R30 + 976]> */
		/* 821CE23Ch case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE23Ch case    5:*/		return 0x821CE240;
	}
	return 0x821CE240;
} // Block from 821CE228h-821CE240h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CE240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE240);
		  /* 821CE240h */ case    0:  		/* mr R4, R20 */
		/* 821CE240h case    0:*/		regs.R4 = regs.R20;
		/* 821CE240h case    0:*/		return 0x821CE244;
		  /* 821CE244h */ case    1:  		/* mr R3, R30 */
		/* 821CE244h case    1:*/		regs.R3 = regs.R30;
		/* 821CE244h case    1:*/		return 0x821CE248;
		  /* 821CE248h */ case    2:  		/* bl -19072 */
		/* 821CE248h case    2:*/		regs.LR = 0x821CE24C; return 0x821C97C8;
		/* 821CE248h case    2:*/		return 0x821CE24C;
		  /* 821CE24Ch */ case    3:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CE24Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CE24Ch case    3:*/		return 0x821CE250;
		  /* 821CE250h */ case    4:  		/* stw R18, <#[R1 + 128]> */
		/* 821CE250h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000080) );
		/* 821CE250h case    4:*/		return 0x821CE254;
		  /* 821CE254h */ case    5:  		/* mr R26, R3 */
		/* 821CE254h case    5:*/		regs.R26 = regs.R3;
		/* 821CE254h case    5:*/		return 0x821CE258;
		  /* 821CE258h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CE258h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CE258h case    6:*/		return 0x821CE25C;
		  /* 821CE25Ch */ case    7:  		/* stw R21, <#[R1 + 120]> */
		/* 821CE25Ch case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000078) );
		/* 821CE25Ch case    7:*/		return 0x821CE260;
		  /* 821CE260h */ case    8:  		/* addic R10, R10, -1 */
		/* 821CE260h case    8:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CE260h case    8:*/		return 0x821CE264;
		  /* 821CE264h */ case    9:  		/* subfe R10, R10, R10 */
		/* 821CE264h case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CE264h case    9:*/		return 0x821CE268;
		  /* 821CE268h */ case   10:  		/* and R11, R10, R11 */
		/* 821CE268h case   10:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CE268h case   10:*/		return 0x821CE26C;
		  /* 821CE26Ch */ case   11:  		/* stw R11, <#[R1 + 124]> */
		/* 821CE26Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CE26Ch case   11:*/		return 0x821CE270;
		  /* 821CE270h */ case   12:  		/* b 8 */
		/* 821CE270h case   12:*/		return 0x821CE278;
		/* 821CE270h case   12:*/		return 0x821CE274;
		  /* 821CE274h */ case   13:  		/* lwz R11, <#[R1 + 124]> */
		/* 821CE274h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CE274h case   13:*/		return 0x821CE278;
	}
	return 0x821CE278;
} // Block from 821CE240h-821CE278h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CE278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE278);
		  /* 821CE278h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CE278h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE278h case    0:*/		return 0x821CE27C;
		  /* 821CE27Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CE27Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CE294;  }
		/* 821CE27Ch case    1:*/		return 0x821CE280;
		  /* 821CE280h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CE280h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE280h case    2:*/		return 0x821CE284;
		  /* 821CE284h */ case    3:  		/* lwz R10, <#[R1 + 128]> */
		/* 821CE284h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821CE284h case    3:*/		return 0x821CE288;
		  /* 821CE288h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CE288h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CE288h case    4:*/		return 0x821CE28C;
		  /* 821CE28Ch */ case    5:  		/* mr R11, R18 */
		/* 821CE28Ch case    5:*/		regs.R11 = regs.R18;
		/* 821CE28Ch case    5:*/		return 0x821CE290;
		  /* 821CE290h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE290h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CE298;  }
		/* 821CE290h case    6:*/		return 0x821CE294;
	}
	return 0x821CE294;
} // Block from 821CE278h-821CE294h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CE294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE294);
		  /* 821CE294h */ case    0:  		/* li R11, 1 */
		/* 821CE294h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE294h case    0:*/		return 0x821CE298;
	}
	return 0x821CE298;
} // Block from 821CE294h-821CE298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE298);
		  /* 821CE298h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE298h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE298h case    0:*/		return 0x821CE29C;
		  /* 821CE29Ch */ case    1:  		/* bc 4, CR0_EQ, -1388 */
		/* 821CE29Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CDD30;  }
		/* 821CE29Ch case    1:*/		return 0x821CE2A0;
		  /* 821CE2A0h */ case    2:  		/* addi R3, R1, 120 */
		/* 821CE2A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 821CE2A0h case    2:*/		return 0x821CE2A4;
		  /* 821CE2A4h */ case    3:  		/* bl -54428 */
		/* 821CE2A4h case    3:*/		regs.LR = 0x821CE2A8; return 0x821C0E08;
		/* 821CE2A4h case    3:*/		return 0x821CE2A8;
		  /* 821CE2A8h */ case    4:  		/* lwz R28, <#[R3]> */
		/* 821CE2A8h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821CE2A8h case    4:*/		return 0x821CE2AC;
		  /* 821CE2ACh */ case    5:  		/* cmplw CR6, R28, R20 */
		/* 821CE2ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R20);
		/* 821CE2ACh case    5:*/		return 0x821CE2B0;
		  /* 821CE2B0h */ case    6:  		/* bc 12, CR6_EQ, -1408 */
		/* 821CE2B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CDD30;  }
		/* 821CE2B0h case    6:*/		return 0x821CE2B4;
		  /* 821CE2B4h */ case    7:  		/* mr R5, R28 */
		/* 821CE2B4h case    7:*/		regs.R5 = regs.R28;
		/* 821CE2B4h case    7:*/		return 0x821CE2B8;
		  /* 821CE2B8h */ case    8:  		/* mr R4, R20 */
		/* 821CE2B8h case    8:*/		regs.R4 = regs.R20;
		/* 821CE2B8h case    8:*/		return 0x821CE2BC;
		  /* 821CE2BCh */ case    9:  		/* mr R3, R30 */
		/* 821CE2BCh case    9:*/		regs.R3 = regs.R30;
		/* 821CE2BCh case    9:*/		return 0x821CE2C0;
		  /* 821CE2C0h */ case   10:  		/* bl -15512 */
		/* 821CE2C0h case   10:*/		regs.LR = 0x821CE2C4; return 0x821CA628;
		/* 821CE2C0h case   10:*/		return 0x821CE2C4;
		  /* 821CE2C4h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE2C4h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE2C4h case   11:*/		return 0x821CE2C8;
		  /* 821CE2C8h */ case   12:  		/* bc 4, CR0_EQ, 372 */
		/* 821CE2C8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821CE43C;  }
		/* 821CE2C8h case   12:*/		return 0x821CE2CC;
		  /* 821CE2CCh */ case   13:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821CE2CCh case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821CE2CCh case   13:*/		return 0x821CE2D0;
		  /* 821CE2D0h */ case   14:  		/* bc 12, CR0_EQ, -92 */
		/* 821CE2D0h case   14:*/		if ( regs.CR[0].eq ) { return 0x821CE274;  }
		/* 821CE2D0h case   14:*/		return 0x821CE2D4;
		  /* 821CE2D4h */ case   15:  		/* mr R4, R28 */
		/* 821CE2D4h case   15:*/		regs.R4 = regs.R28;
		/* 821CE2D4h case   15:*/		return 0x821CE2D8;
		  /* 821CE2D8h */ case   16:  		/* mr R3, R30 */
		/* 821CE2D8h case   16:*/		regs.R3 = regs.R30;
		/* 821CE2D8h case   16:*/		return 0x821CE2DC;
		  /* 821CE2DCh */ case   17:  		/* bl -19220 */
		/* 821CE2DCh case   17:*/		regs.LR = 0x821CE2E0; return 0x821C97C8;
		/* 821CE2DCh case   17:*/		return 0x821CE2E0;
		  /* 821CE2E0h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE2E0h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE2E0h case   18:*/		return 0x821CE2E4;
		  /* 821CE2E4h */ case   19:  		/* bc 12, CR0_EQ, -112 */
		/* 821CE2E4h case   19:*/		if ( regs.CR[0].eq ) { return 0x821CE274;  }
		/* 821CE2E4h case   19:*/		return 0x821CE2E8;
		  /* 821CE2E8h */ case   20:  		/* lwz R11, <#[R20 + 4]> */
		/* 821CE2E8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821CE2E8h case   20:*/		return 0x821CE2EC;
		  /* 821CE2ECh */ case   21:  		/* lwz R10, <#[R28 + 4]> */
		/* 821CE2ECh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821CE2ECh case   21:*/		return 0x821CE2F0;
		  /* 821CE2F0h */ case   22:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CE2F0h case   22:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CE2F0h case   22:*/		return 0x821CE2F4;
		  /* 821CE2F4h */ case   23:  		/* rlwinm R8, R10, 0, 31, 31 */
		/* 821CE2F4h case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821CE2F4h case   23:*/		return 0x821CE2F8;
		  /* 821CE2F8h */ case   24:  		/* addic R9, R9, -1 */
		/* 821CE2F8h case   24:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CE2F8h case   24:*/		return 0x821CE2FC;
		  /* 821CE2FCh */ case   25:  		/* subfe R9, R9, R9 */
		/* 821CE2FCh case   25:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CE2FCh case   25:*/		return 0x821CE300;
		  /* 821CE300h */ case   26:  		/* addic R8, R8, -1 */
		/* 821CE300h case   26:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821CE300h case   26:*/		return 0x821CE304;
		  /* 821CE304h */ case   27:  		/* and R11, R9, R11 */
		/* 821CE304h case   27:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CE304h case   27:*/		return 0x821CE308;
		  /* 821CE308h */ case   28:  		/* subfe R9, R8, R8 */
		/* 821CE308h case   28:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 821CE308h case   28:*/		return 0x821CE30C;
		  /* 821CE30Ch */ case   29:  		/* addi R31, R11, 16 */
		/* 821CE30Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821CE30Ch case   29:*/		return 0x821CE310;
		  /* 821CE310h */ case   30:  		/* and R29, R9, R10 */
		/* 821CE310h case   30:*/		cpu::op::and<0>(regs,&regs.R29,regs.R9,regs.R10);
		/* 821CE310h case   30:*/		return 0x821CE314;
		  /* 821CE314h */ case   31:  		/* lwz R3, <#[R11 + 16]> */
		/* 821CE314h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 821CE314h case   31:*/		return 0x821CE318;
		  /* 821CE318h */ case   32:  		/* addi R27, R29, 16 */
		/* 821CE318h case   32:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R29,0x10);
		/* 821CE318h case   32:*/		return 0x821CE31C;
		  /* 821CE31Ch */ case   33:  		/* lwz R5, <#[R11 + 24]> */
		/* 821CE31Ch case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000018) );
		/* 821CE31Ch case   33:*/		return 0x821CE320;
		  /* 821CE320h */ case   34:  		/* lwz R4, <#[R11 + 20]> */
		/* 821CE320h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000014) );
		/* 821CE320h case   34:*/		return 0x821CE324;
		  /* 821CE324h */ case   35:  		/* bl 340860 */
		/* 821CE324h case   35:*/		regs.LR = 0x821CE328; return 0x822216A0;
		/* 821CE324h case   35:*/		return 0x821CE328;
		  /* 821CE328h */ case   36:  		/* lwz R5, <#[R29 + 24]> */
		/* 821CE328h case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000018) );
		/* 821CE328h case   36:*/		return 0x821CE32C;
		  /* 821CE32Ch */ case   37:  		/* fmr FR31, FR1 */
		/* 821CE32Ch case   37:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821CE32Ch case   37:*/		return 0x821CE330;
		  /* 821CE330h */ case   38:  		/* lwz R4, <#[R29 + 20]> */
		/* 821CE330h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000014) );
		/* 821CE330h case   38:*/		return 0x821CE334;
		  /* 821CE334h */ case   39:  		/* lwz R3, <#[R29 + 16]> */
		/* 821CE334h case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 821CE334h case   39:*/		return 0x821CE338;
		  /* 821CE338h */ case   40:  		/* bl 340840 */
		/* 821CE338h case   40:*/		regs.LR = 0x821CE33C; return 0x822216A0;
		/* 821CE338h case   40:*/		return 0x821CE33C;
		  /* 821CE33Ch */ case   41:  		/* lwz R4, <#[R31 + 4]> */
		/* 821CE33Ch case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 821CE33Ch case   41:*/		return 0x821CE340;
		  /* 821CE340h */ case   42:  		/* lwz R3, <#[R31]> */
		/* 821CE340h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821CE340h case   42:*/		return 0x821CE344;
		  /* 821CE344h */ case   43:  		/* bl -68628 */
		/* 821CE344h case   43:*/		regs.LR = 0x821CE348; return 0x821BD730;
		/* 821CE344h case   43:*/		return 0x821CE348;
		  /* 821CE348h */ case   44:  		/* mr R8, R3 */
		/* 821CE348h case   44:*/		regs.R8 = regs.R3;
		/* 821CE348h case   44:*/		return 0x821CE34C;
		  /* 821CE34Ch */ case   45:  		/* lwz R4, <#[R29 + 20]> */
		/* 821CE34Ch case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000014) );
		/* 821CE34Ch case   45:*/		return 0x821CE350;
		  /* 821CE350h */ case   46:  		/* lwz R3, <#[R29 + 16]> */
		/* 821CE350h case   46:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 821CE350h case   46:*/		return 0x821CE354;
		  /* 821CE354h */ case   47:  		/* bl -68644 */
		/* 821CE354h case   47:*/		regs.LR = 0x821CE358; return 0x821BD730;
		/* 821CE354h case   47:*/		return 0x821CE358;
		  /* 821CE358h */ case   48:  		/* cmpw CR6, R8, R3 */
		/* 821CE358h case   48:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R3);
		/* 821CE358h case   48:*/		return 0x821CE35C;
		  /* 821CE35Ch */ case   49:  		/* bc 4, CR6_EQ, -232 */
		/* 821CE35Ch case   49:*/		if ( !regs.CR[6].eq ) { return 0x821CE274;  }
		/* 821CE35Ch case   49:*/		return 0x821CE360;
		  /* 821CE360h */ case   50:  		/* cmpwi CR6, R8, 0 */
		/* 821CE360h case   50:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 821CE360h case   50:*/		return 0x821CE364;
		  /* 821CE364h */ case   51:  		/* bc 12, CR6_EQ, 16 */
		/* 821CE364h case   51:*/		if ( regs.CR[6].eq ) { return 0x821CE374;  }
		/* 821CE364h case   51:*/		return 0x821CE368;
		  /* 821CE368h */ case   52:  		/* cmpwi CR6, R3, 0 */
		/* 821CE368h case   52:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821CE368h case   52:*/		return 0x821CE36C;
		  /* 821CE36Ch */ case   53:  		/* mr R29, R8 */
		/* 821CE36Ch case   53:*/		regs.R29 = regs.R8;
		/* 821CE36Ch case   53:*/		return 0x821CE370;
		  /* 821CE370h */ case   54:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE370h case   54:*/		if ( !regs.CR[6].eq ) { return 0x821CE378;  }
		/* 821CE370h case   54:*/		return 0x821CE374;
	}
	return 0x821CE374;
} // Block from 821CE298h-821CE374h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821CE374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE374);
		  /* 821CE374h */ case    0:  		/* mr R29, R18 */
		/* 821CE374h case    0:*/		regs.R29 = regs.R18;
		/* 821CE374h case    0:*/		return 0x821CE378;
	}
	return 0x821CE378;
} // Block from 821CE374h-821CE378h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE378);
		  /* 821CE378h */ case    0:  		/* fadd FR1, FR1, FR31 */
		/* 821CE378h case    0:*/		cpu::op::fadd<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 821CE378h case    0:*/		return 0x821CE37C;
		  /* 821CE37Ch */ case    1:  		/* bl -70892 */
		/* 821CE37Ch case    1:*/		regs.LR = 0x821CE380; return 0x821BCE90;
		/* 821CE37Ch case    1:*/		return 0x821CE380;
		  /* 821CE380h */ case    2:  		/* mr R3, R30 */
		/* 821CE380h case    2:*/		regs.R3 = regs.R30;
		/* 821CE380h case    2:*/		return 0x821CE384;
		  /* 821CE384h */ case    3:  		/* mr R5, R29 */
		/* 821CE384h case    3:*/		regs.R5 = regs.R29;
		/* 821CE384h case    3:*/		return 0x821CE388;
		  /* 821CE388h */ case    4:  		/* bl 378904 */
		/* 821CE388h case    4:*/		regs.LR = 0x821CE38C; return 0x8222ABA0;
		/* 821CE388h case    4:*/		return 0x821CE38C;
		  /* 821CE38Ch */ case    5:  		/* stw R3, <#[R31]> */
		/* 821CE38Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821CE38Ch case    5:*/		return 0x821CE390;
		  /* 821CE390h */ case    6:  		/* stw R18, <#[R31 + 4]> */
		/* 821CE390h case    6:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000004) );
		/* 821CE390h case    6:*/		return 0x821CE394;
		  /* 821CE394h */ case    7:  		/* mr R4, R28 */
		/* 821CE394h case    7:*/		regs.R4 = regs.R28;
		/* 821CE394h case    7:*/		return 0x821CE398;
		  /* 821CE398h */ case    8:  		/* stw R18, <#[R31 + 8]> */
		/* 821CE398h case    8:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000008) );
		/* 821CE398h case    8:*/		return 0x821CE39C;
		  /* 821CE39Ch */ case    9:  		/* mr R3, R21 */
		/* 821CE39Ch case    9:*/		regs.R3 = regs.R21;
		/* 821CE39Ch case    9:*/		return 0x821CE3A0;
		  /* 821CE3A0h */ case   10:  		/* bl -377592 */
		/* 821CE3A0h case   10:*/		regs.LR = 0x821CE3A4; return 0x821720A8;
		/* 821CE3A0h case   10:*/		return 0x821CE3A4;
		  /* 821CE3A4h */ case   11:  		/* li R17, 1 */
		/* 821CE3A4h case   11:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821CE3A4h case   11:*/		return 0x821CE3A8;
		  /* 821CE3A8h */ case   12:  		/* b -1692 */
		/* 821CE3A8h case   12:*/		return 0x821CDD0C;
		/* 821CE3A8h case   12:*/		return 0x821CE3AC;
	}
	return 0x821CE3AC;
} // Block from 821CE378h-821CE3ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CE3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE3AC);
		  /* 821CE3ACh */ case    0:  		/* addi R7, R1, 84 */
		/* 821CE3ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 821CE3ACh case    0:*/		return 0x821CE3B0;
		  /* 821CE3B0h */ case    1:  		/* lwz R8, <#[R30 + 652]> */
		/* 821CE3B0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000028C) );
		/* 821CE3B0h case    1:*/		return 0x821CE3B4;
		  /* 821CE3B4h */ case    2:  		/* li R6, 0 */
		/* 821CE3B4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821CE3B4h case    2:*/		return 0x821CE3B8;
		  /* 821CE3B8h */ case    3:  		/* mr R5, R27 */
		/* 821CE3B8h case    3:*/		regs.R5 = regs.R27;
		/* 821CE3B8h case    3:*/		return 0x821CE3BC;
		  /* 821CE3BCh */ case    4:  		/* mr R4, R19 */
		/* 821CE3BCh case    4:*/		regs.R4 = regs.R19;
		/* 821CE3BCh case    4:*/		return 0x821CE3C0;
		  /* 821CE3C0h */ case    5:  		/* mr R3, R30 */
		/* 821CE3C0h case    5:*/		regs.R3 = regs.R30;
		/* 821CE3C0h case    5:*/		return 0x821CE3C4;
		  /* 821CE3C4h */ case    6:  		/* bl -2308 */
		/* 821CE3C4h case    6:*/		regs.LR = 0x821CE3C8; return 0x821CDAC0;
		/* 821CE3C4h case    6:*/		return 0x821CE3C8;
		  /* 821CE3C8h */ case    7:  		/* mr R5, R19 */
		/* 821CE3C8h case    7:*/		regs.R5 = regs.R19;
		/* 821CE3C8h case    7:*/		return 0x821CE3CC;
		  /* 821CE3CCh */ case    8:  		/* li R4, 0 */
		/* 821CE3CCh case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821CE3CCh case    8:*/		return 0x821CE3D0;
		  /* 821CE3D0h */ case    9:  		/* lwz R6, <#[R1 + 84]> */
		/* 821CE3D0h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE3D0h case    9:*/		return 0x821CE3D4;
		  /* 821CE3D4h */ case   10:  		/* mr R3, R30 */
		/* 821CE3D4h case   10:*/		regs.R3 = regs.R30;
		/* 821CE3D4h case   10:*/		return 0x821CE3D8;
		  /* 821CE3D8h */ case   11:  		/* bl -53352 */
		/* 821CE3D8h case   11:*/		regs.LR = 0x821CE3DC; return 0x821C1370;
		/* 821CE3D8h case   11:*/		return 0x821CE3DC;
		  /* 821CE3DCh */ case   12:  		/* mr R25, R3 */
		/* 821CE3DCh case   12:*/		regs.R25 = regs.R3;
		/* 821CE3DCh case   12:*/		return 0x821CE3E0;
		  /* 821CE3E0h */ case   13:  		/* mr R4, R26 */
		/* 821CE3E0h case   13:*/		regs.R4 = regs.R26;
		/* 821CE3E0h case   13:*/		return 0x821CE3E4;
		  /* 821CE3E4h */ case   14:  		/* mr R3, R21 */
		/* 821CE3E4h case   14:*/		regs.R3 = regs.R21;
		/* 821CE3E4h case   14:*/		return 0x821CE3E8;
		  /* 821CE3E8h */ case   15:  		/* bl -377664 */
		/* 821CE3E8h case   15:*/		regs.LR = 0x821CE3EC; return 0x821720A8;
		/* 821CE3E8h case   15:*/		return 0x821CE3EC;
		  /* 821CE3ECh */ case   16:  		/* mr R3, R26 */
		/* 821CE3ECh case   16:*/		regs.R3 = regs.R26;
		/* 821CE3ECh case   16:*/		return 0x821CE3F0;
		  /* 821CE3F0h */ case   17:  		/* bl 145128 */
		/* 821CE3F0h case   17:*/		regs.LR = 0x821CE3F4; return 0x821F1AD8;
		/* 821CE3F0h case   17:*/		return 0x821CE3F4;
		  /* 821CE3F4h */ case   18:  		/* lwz R11, <#[R30 + 976]> */
		/* 821CE3F4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE3F4h case   18:*/		return 0x821CE3F8;
		  /* 821CE3F8h */ case   19:  		/* mr R3, R27 */
		/* 821CE3F8h case   19:*/		regs.R3 = regs.R27;
		/* 821CE3F8h case   19:*/		return 0x821CE3FC;
		  /* 821CE3FCh */ case   20:  		/* addi R31, R30, 972 */
		/* 821CE3FCh case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x3CC);
		/* 821CE3FCh case   20:*/		return 0x821CE400;
		  /* 821CE400h */ case   21:  		/* stw R11, <#[R26]> */
		/* 821CE400h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821CE400h case   21:*/		return 0x821CE404;
		  /* 821CE404h */ case   22:  		/* stw R26, <#[R30 + 976]> */
		/* 821CE404h case   22:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE404h case   22:*/		return 0x821CE408;
		  /* 821CE408h */ case   23:  		/* stw R25, <#[R22]> */
		/* 821CE408h case   23:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R22 + 0x00000000) );
		/* 821CE408h case   23:*/		return 0x821CE40C;
		  /* 821CE40Ch */ case   24:  		/* stw R18, <#[R22 + 8]> */
		/* 821CE40Ch case   24:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R22 + 0x00000008) );
		/* 821CE40Ch case   24:*/		return 0x821CE410;
		  /* 821CE410h */ case   25:  		/* stw R18, <#[R22 + 4]> */
		/* 821CE410h case   25:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R22 + 0x00000004) );
		/* 821CE410h case   25:*/		return 0x821CE414;
		  /* 821CE414h */ case   26:  		/* bl 145092 */
		/* 821CE414h case   26:*/		regs.LR = 0x821CE418; return 0x821F1AD8;
		/* 821CE414h case   26:*/		return 0x821CE418;
		  /* 821CE418h */ case   27:  		/* lwz R11, <#[R30 + 976]> */
		/* 821CE418h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE418h case   27:*/		return 0x821CE41C;
		  /* 821CE41Ch */ case   28:  		/* mr R3, R29 */
		/* 821CE41Ch case   28:*/		regs.R3 = regs.R29;
		/* 821CE41Ch case   28:*/		return 0x821CE420;
		  /* 821CE420h */ case   29:  		/* stw R11, <#[R27]> */
		/* 821CE420h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CE420h case   29:*/		return 0x821CE424;
		  /* 821CE424h */ case   30:  		/* stw R27, <#[R30 + 976]> */
		/* 821CE424h case   30:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE424h case   30:*/		return 0x821CE428;
		  /* 821CE428h */ case   31:  		/* bl 145072 */
		/* 821CE428h case   31:*/		regs.LR = 0x821CE42C; return 0x821F1AD8;
		/* 821CE428h case   31:*/		return 0x821CE42C;
		  /* 821CE42Ch */ case   32:  		/* lwz R11, <#[R30 + 976]> */
		/* 821CE42Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE42Ch case   32:*/		return 0x821CE430;
		  /* 821CE430h */ case   33:  		/* stw R11, <#[R29]> */
		/* 821CE430h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CE430h case   33:*/		return 0x821CE434;
		  /* 821CE434h */ case   34:  		/* stw R29, <#[R30 + 976]> */
		/* 821CE434h case   34:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE434h case   34:*/		return 0x821CE438;
		  /* 821CE438h */ case   35:  		/* b -1380 */
		/* 821CE438h case   35:*/		return 0x821CDED4;
		/* 821CE438h case   35:*/		return 0x821CE43C;
	}
	return 0x821CE43C;
} // Block from 821CE3ACh-821CE43Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 821CE43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE43C);
		  /* 821CE43Ch */ case    0:  		/* mr R4, R20 */
		/* 821CE43Ch case    0:*/		regs.R4 = regs.R20;
		/* 821CE43Ch case    0:*/		return 0x821CE440;
		  /* 821CE440h */ case    1:  		/* mr R3, R21 */
		/* 821CE440h case    1:*/		regs.R3 = regs.R21;
		/* 821CE440h case    1:*/		return 0x821CE444;
		  /* 821CE444h */ case    2:  		/* bl -377756 */
		/* 821CE444h case    2:*/		regs.LR = 0x821CE448; return 0x821720A8;
		/* 821CE444h case    2:*/		return 0x821CE448;
		  /* 821CE448h */ case    3:  		/* mr R4, R28 */
		/* 821CE448h case    3:*/		regs.R4 = regs.R28;
		/* 821CE448h case    3:*/		return 0x821CE44C;
		  /* 821CE44Ch */ case    4:  		/* mr R3, R21 */
		/* 821CE44Ch case    4:*/		regs.R3 = regs.R21;
		/* 821CE44Ch case    4:*/		return 0x821CE450;
	}
	return 0x821CE450;
} // Block from 821CE43Ch-821CE450h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CE450h
// Function '?FreeSumList@Compiler@D3DXShader@@AAAXPAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE450);
		  /* 821CE450h */ case    0:  		/* bl -377768 */
		/* 821CE450h case    0:*/		regs.LR = 0x821CE454; return 0x821720A8;
		/* 821CE450h case    0:*/		return 0x821CE454;
		  /* 821CE454h */ case    1:  		/* mr R3, R20 */
		/* 821CE454h case    1:*/		regs.R3 = regs.R20;
		/* 821CE454h case    1:*/		return 0x821CE458;
		  /* 821CE458h */ case    2:  		/* bl 145024 */
		/* 821CE458h case    2:*/		regs.LR = 0x821CE45C; return 0x821F1AD8;
		/* 821CE458h case    2:*/		return 0x821CE45C;
		  /* 821CE45Ch */ case    3:  		/* mr R3, R28 */
		/* 821CE45Ch case    3:*/		regs.R3 = regs.R28;
		/* 821CE45Ch case    3:*/		return 0x821CE460;
		  /* 821CE460h */ case    4:  		/* bl 145016 */
		/* 821CE460h case    4:*/		regs.LR = 0x821CE464; return 0x821F1AD8;
		/* 821CE460h case    4:*/		return 0x821CE464;
		  /* 821CE464h */ case    5:  		/* lwz R10, <#[R30 + 976]> */
		/* 821CE464h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE464h case    5:*/		return 0x821CE468;
		  /* 821CE468h */ case    6:  		/* addi R11, R30, 972 */
		/* 821CE468h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3CC);
		/* 821CE468h case    6:*/		return 0x821CE46C;
		  /* 821CE46Ch */ case    7:  		/* stw R10, <#[R20]> */
		/* 821CE46Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821CE46Ch case    7:*/		return 0x821CE470;
		  /* 821CE470h */ case    8:  		/* rlwinm R10, R20, 0, 0, 31 */
		/* 821CE470h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R20);
		/* 821CE470h case    8:*/		return 0x821CE474;
		  /* 821CE474h */ case    9:  		/* stw R20, <#[R30 + 976]> */
		/* 821CE474h case    9:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R30 + 0x000003D0) );
		/* 821CE474h case    9:*/		return 0x821CE478;
		  /* 821CE478h */ case   10:  		/* stw R10, <#[R28]> */
		/* 821CE478h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821CE478h case   10:*/		return 0x821CE47C;
		  /* 821CE47Ch */ case   11:  		/* b -1432 */
		/* 821CE47Ch case   11:*/		return 0x821CDEE4;
		/* 821CE47Ch case   11:*/		return 0x821CE480;
	}
	return 0x821CE480;
} // Block from 821CE450h-821CE480h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CE480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE480);
		  /* 821CE480h */ case    0:  		/* mr R3, R17 */
		/* 821CE480h case    0:*/		regs.R3 = regs.R17;
		/* 821CE480h case    0:*/		return 0x821CE484;
		  /* 821CE484h */ case    1:  		/* addi R1, R1, 288 */
		/* 821CE484h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 821CE484h case    1:*/		return 0x821CE488;
		  /* 821CE488h */ case    2:  		/* lfd FR31, <#[R1 - 136]> */
		/* 821CE488h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821CE488h case    2:*/		return 0x821CE48C;
		  /* 821CE48Ch */ case    3:  		/* b -1298960 */
		/* 821CE48Ch case    3:*/		return 0x8209127C;
		/* 821CE48Ch case    3:*/		return 0x821CE490;
	}
	return 0x821CE490;
} // Block from 821CE480h-821CE490h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CE490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE490);
		  /* 821CE490h */ case    0:  		/* mfspr R12, LR */
		/* 821CE490h case    0:*/		regs.R12 = regs.LR;
		/* 821CE490h case    0:*/		return 0x821CE494;
		  /* 821CE494h */ case    1:  		/* bl -1299048 */
		/* 821CE494h case    1:*/		regs.LR = 0x821CE498; return 0x8209122C;
		/* 821CE494h case    1:*/		return 0x821CE498;
		  /* 821CE498h */ case    2:  		/* stfd FR30, <#[R1 - 144]> */
		/* 821CE498h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821CE498h case    2:*/		return 0x821CE49C;
		  /* 821CE49Ch */ case    3:  		/* stfd FR31, <#[R1 - 136]> */
		/* 821CE49Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821CE49Ch case    3:*/		return 0x821CE4A0;
		  /* 821CE4A0h */ case    4:  		/* stwu R1, <#[R1 - 256]> */
		/* 821CE4A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821CE4A0h case    4:*/		return 0x821CE4A4;
		  /* 821CE4A4h */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 821CE4A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821CE4A4h case    5:*/		return 0x821CE4A8;
		  /* 821CE4A8h */ case    6:  		/* li R17, 0 */
		/* 821CE4A8h case    6:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821CE4A8h case    6:*/		return 0x821CE4AC;
		  /* 821CE4ACh */ case    7:  		/* mr R23, R3 */
		/* 821CE4ACh case    7:*/		regs.R23 = regs.R3;
		/* 821CE4ACh case    7:*/		return 0x821CE4B0;
		  /* 821CE4B0h */ case    8:  		/* stw R4, <#[R1 + 80]> */
		/* 821CE4B0h case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821CE4B0h case    8:*/		return 0x821CE4B4;
		  /* 821CE4B4h */ case    9:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CE4B4h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CE4B4h case    9:*/		return 0x821CE4B8;
		  /* 821CE4B8h */ case   10:  		/* stw R17, <#[R1 + 88]> */
		/* 821CE4B8h case   10:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000058) );
		/* 821CE4B8h case   10:*/		return 0x821CE4BC;
		  /* 821CE4BCh */ case   11:  		/* mr R22, R4 */
		/* 821CE4BCh case   11:*/		regs.R22 = regs.R4;
		/* 821CE4BCh case   11:*/		return 0x821CE4C0;
		  /* 821CE4C0h */ case   12:  		/* addic R10, R10, -1 */
		/* 821CE4C0h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CE4C0h case   12:*/		return 0x821CE4C4;
		  /* 821CE4C4h */ case   13:  		/* mr R20, R5 */
		/* 821CE4C4h case   13:*/		regs.R20 = regs.R5;
		/* 821CE4C4h case   13:*/		return 0x821CE4C8;
		  /* 821CE4C8h */ case   14:  		/* subfe R10, R10, R10 */
		/* 821CE4C8h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CE4C8h case   14:*/		return 0x821CE4CC;
		  /* 821CE4CCh */ case   15:  		/* mr R19, R6 */
		/* 821CE4CCh case   15:*/		regs.R19 = regs.R6;
		/* 821CE4CCh case   15:*/		return 0x821CE4D0;
		  /* 821CE4D0h */ case   16:  		/* and R11, R10, R11 */
		/* 821CE4D0h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CE4D0h case   16:*/		return 0x821CE4D4;
		  /* 821CE4D4h */ case   17:  		/* mr R18, R7 */
		/* 821CE4D4h case   17:*/		regs.R18 = regs.R7;
		/* 821CE4D4h case   17:*/		return 0x821CE4D8;
		  /* 821CE4D8h */ case   18:  		/* mr R31, R17 */
		/* 821CE4D8h case   18:*/		regs.R31 = regs.R17;
		/* 821CE4D8h case   18:*/		return 0x821CE4DC;
		  /* 821CE4DCh */ case   19:  		/* stw R11, <#[R1 + 84]> */
		/* 821CE4DCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE4DCh case   19:*/		return 0x821CE4E0;
		  /* 821CE4E0h */ case   20:  		/* mr R29, R17 */
		/* 821CE4E0h case   20:*/		regs.R29 = regs.R17;
		/* 821CE4E0h case   20:*/		return 0x821CE4E4;
		  /* 821CE4E4h */ case   21:  		/* b 8 */
		/* 821CE4E4h case   21:*/		return 0x821CE4EC;
		/* 821CE4E4h case   21:*/		return 0x821CE4E8;
		  /* 821CE4E8h */ case   22:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CE4E8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE4E8h case   22:*/		return 0x821CE4EC;
	}
	return 0x821CE4EC;
} // Block from 821CE490h-821CE4ECh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CE4ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE4EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE4EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE4EC);
		  /* 821CE4ECh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CE4ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE4ECh case    0:*/		return 0x821CE4F0;
		  /* 821CE4F0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CE4F0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CE508;  }
		/* 821CE4F0h case    1:*/		return 0x821CE4F4;
		  /* 821CE4F4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CE4F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE4F4h case    2:*/		return 0x821CE4F8;
		  /* 821CE4F8h */ case    3:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CE4F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CE4F8h case    3:*/		return 0x821CE4FC;
		  /* 821CE4FCh */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CE4FCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CE4FCh case    4:*/		return 0x821CE500;
		  /* 821CE500h */ case    5:  		/* mr R11, R17 */
		/* 821CE500h case    5:*/		regs.R11 = regs.R17;
		/* 821CE500h case    5:*/		return 0x821CE504;
		  /* 821CE504h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE504h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CE50C;  }
		/* 821CE504h case    6:*/		return 0x821CE508;
	}
	return 0x821CE508;
} // Block from 821CE4ECh-821CE508h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CE508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE508);
		  /* 821CE508h */ case    0:  		/* li R11, 1 */
		/* 821CE508h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE508h case    0:*/		return 0x821CE50C;
	}
	return 0x821CE50C;
} // Block from 821CE508h-821CE50Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE50C);
		  /* 821CE50Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE50Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE50Ch case    0:*/		return 0x821CE510;
		  /* 821CE510h */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 821CE510h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE558;  }
		/* 821CE510h case    1:*/		return 0x821CE514;
		  /* 821CE514h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CE514h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CE514h case    2:*/		return 0x821CE518;
		  /* 821CE518h */ case    3:  		/* bl -55056 */
		/* 821CE518h case    3:*/		regs.LR = 0x821CE51C; return 0x821C0E08;
		/* 821CE518h case    3:*/		return 0x821CE51C;
		  /* 821CE51Ch */ case    4:  		/* lwz R30, <#[R3]> */
		/* 821CE51Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821CE51Ch case    4:*/		return 0x821CE520;
		  /* 821CE520h */ case    5:  		/* lwz R11, <#[R20 + 8]> */
		/* 821CE520h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821CE520h case    5:*/		return 0x821CE524;
		  /* 821CE524h */ case    6:  		/* mr R3, R30 */
		/* 821CE524h case    6:*/		regs.R3 = regs.R30;
		/* 821CE524h case    6:*/		return 0x821CE528;
		  /* 821CE528h */ case    7:  		/* ld R4, <#[R20]> */
		/* 821CE528h case    7:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R20 + 0x00000000) );
		/* 821CE528h case    7:*/		return 0x821CE52C;
		  /* 821CE52Ch */ case    8:  		/* rldicr R5, R11, 32, 63 */
		/* 821CE52Ch case    8:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R5,regs.R11);
		/* 821CE52Ch case    8:*/		return 0x821CE530;
		  /* 821CE530h */ case    9:  		/* bl -29576 */
		/* 821CE530h case    9:*/		regs.LR = 0x821CE534; return 0x821C71A8;
		/* 821CE530h case    9:*/		return 0x821CE534;
		  /* 821CE534h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE534h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE534h case   10:*/		return 0x821CE538;
		  /* 821CE538h */ case   11:  		/* bc 12, CR0_EQ, -80 */
		/* 821CE538h case   11:*/		if ( regs.CR[0].eq ) { return 0x821CE4E8;  }
		/* 821CE538h case   11:*/		return 0x821CE53C;
		  /* 821CE53Ch */ case   12:  		/* mr R3, R30 */
		/* 821CE53Ch case   12:*/		regs.R3 = regs.R30;
		/* 821CE53Ch case   12:*/		return 0x821CE540;
		  /* 821CE540h */ case   13:  		/* bl -29776 */
		/* 821CE540h case   13:*/		regs.LR = 0x821CE544; return 0x821C70F0;
		/* 821CE540h case   13:*/		return 0x821CE544;
		  /* 821CE544h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE544h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE544h case   14:*/		return 0x821CE548;
		  /* 821CE548h */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821CE548h case   15:*/		if ( regs.CR[0].eq ) { return 0x821CE550;  }
		/* 821CE548h case   15:*/		return 0x821CE54C;
		  /* 821CE54Ch */ case   16:  		/* addi R29, R29, 1 */
		/* 821CE54Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821CE54Ch case   16:*/		return 0x821CE550;
	}
	return 0x821CE550;
} // Block from 821CE50Ch-821CE550h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CE550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE550);
		  /* 821CE550h */ case    0:  		/* addi R31, R31, 1 */
		/* 821CE550h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821CE550h case    0:*/		return 0x821CE554;
		  /* 821CE554h */ case    1:  		/* b -108 */
		/* 821CE554h case    1:*/		return 0x821CE4E8;
		/* 821CE554h case    1:*/		return 0x821CE558;
	}
	return 0x821CE558;
} // Block from 821CE550h-821CE558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CE558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE558);
		  /* 821CE558h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821CE558h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CE558h case    0:*/		return 0x821CE55C;
		  /* 821CE55Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821CE55Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CE564;  }
		/* 821CE55Ch case    1:*/		return 0x821CE560;
		  /* 821CE560h */ case    2:  		/* addi R31, R31, -1 */
		/* 821CE560h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821CE560h case    2:*/		return 0x821CE564;
	}
	return 0x821CE564;
} // Block from 821CE558h-821CE564h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CE564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE564);
		  /* 821CE564h */ case    0:  		/* cmplwi CR6, R31, 1 */
		/* 821CE564h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821CE564h case    0:*/		return 0x821CE568;
		  /* 821CE568h */ case    1:  		/* bc 12, CR6_GT, 16 */
		/* 821CE568h case    1:*/		if ( regs.CR[6].gt ) { return 0x821CE578;  }
		/* 821CE568h case    1:*/		return 0x821CE56C;
		  /* 821CE56Ch */ case    2:  		/* mr R3, R31 */
		/* 821CE56Ch case    2:*/		regs.R3 = regs.R31;
		/* 821CE56Ch case    2:*/		return 0x821CE570;
		  /* 821CE570h */ case    3:  		/* stw R17, <#[R18]> */
		/* 821CE570h case    3:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R18 + 0x00000000) );
		/* 821CE570h case    3:*/		return 0x821CE574;
		  /* 821CE574h */ case    4:  		/* b 808 */
		/* 821CE574h case    4:*/		return 0x821CE89C;
		/* 821CE574h case    4:*/		return 0x821CE578;
	}
	return 0x821CE578;
} // Block from 821CE564h-821CE578h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CE578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE578);
		  /* 821CE578h */ case    0:  		/* li R5, 57 */
		/* 821CE578h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x39);
		/* 821CE578h case    0:*/		return 0x821CE57C;
		  /* 821CE57Ch */ case    1:  		/* li R4, 8 */
		/* 821CE57Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CE57Ch case    1:*/		return 0x821CE580;
		  /* 821CE580h */ case    2:  		/* mr R3, R23 */
		/* 821CE580h case    2:*/		regs.R3 = regs.R23;
		/* 821CE580h case    2:*/		return 0x821CE584;
		  /* 821CE584h */ case    3:  		/* bl -433300 */
		/* 821CE584h case    3:*/		regs.LR = 0x821CE588; return 0x821648F0;
		/* 821CE584h case    3:*/		return 0x821CE588;
		  /* 821CE588h */ case    4:  		/* addi R21, R3, 4 */
		/* 821CE588h case    4:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R3,0x4);
		/* 821CE588h case    4:*/		return 0x821CE58C;
		  /* 821CE58Ch */ case    5:  		/* ori R11, R3, 1 */
		/* 821CE58Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CE58Ch case    5:*/		return 0x821CE590;
		  /* 821CE590h */ case    6:  		/* stw R17, <#[R1 + 104]> */
		/* 821CE590h case    6:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000068) );
		/* 821CE590h case    6:*/		return 0x821CE594;
		  /* 821CE594h */ case    7:  		/* ori R10, R21, 1 */
		/* 821CE594h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R21,0x1);
		/* 821CE594h case    7:*/		return 0x821CE598;
	}
	return 0x821CE598;
} // Block from 821CE578h-821CE598h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CE598h
// Function '?GenerateProduct@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAUProductTerm@2@PAPAVDependency@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE598);
		  /* 821CE598h */ case    0:  		/* stw R22, <#[R1 + 96]> */
		/* 821CE598h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000060) );
		/* 821CE598h case    0:*/		return 0x821CE59C;
		  /* 821CE59Ch */ case    1:  		/* stw R11, <#[R3 + 4]> */
		/* 821CE59Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CE59Ch case    1:*/		return 0x821CE5A0;
		  /* 821CE5A0h */ case    2:  		/* lis R9, -32256 */
		/* 821CE5A0h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 821CE5A0h case    2:*/		return 0x821CE5A4;
		  /* 821CE5A4h */ case    3:  		/* stw R10, <#[R3]> */
		/* 821CE5A4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CE5A4h case    3:*/		return 0x821CE5A8;
		  /* 821CE5A8h */ case    4:  		/* mr R25, R3 */
		/* 821CE5A8h case    4:*/		regs.R25 = regs.R3;
		/* 821CE5A8h case    4:*/		return 0x821CE5AC;
		  /* 821CE5ACh */ case    5:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CE5ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CE5ACh case    5:*/		return 0x821CE5B0;
		  /* 821CE5B0h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CE5B0h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CE5B0h case    6:*/		return 0x821CE5B4;
		  /* 821CE5B4h */ case    7:  		/* addic R10, R10, -1 */
		/* 821CE5B4h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CE5B4h case    7:*/		return 0x821CE5B8;
		  /* 821CE5B8h */ case    8:  		/* lfs FR30, <#[R9 + 1792]> */
		/* 821CE5B8h case    8:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R9 + 0x00000700) );
		/* 821CE5B8h case    8:*/		return 0x821CE5BC;
		  /* 821CE5BCh */ case    9:  		/* subfe R10, R10, R10 */
		/* 821CE5BCh case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CE5BCh case    9:*/		return 0x821CE5C0;
		  /* 821CE5C0h */ case   10:  		/* and R10, R10, R11 */
		/* 821CE5C0h case   10:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821CE5C0h case   10:*/		return 0x821CE5C4;
		  /* 821CE5C4h */ case   11:  		/* lis R11, -32256 */
		/* 821CE5C4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821CE5C4h case   11:*/		return 0x821CE5C8;
		  /* 821CE5C8h */ case   12:  		/* stw R10, <#[R1 + 100]> */
		/* 821CE5C8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821CE5C8h case   12:*/		return 0x821CE5CC;
		  /* 821CE5CCh */ case   13:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821CE5CCh case   13:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821CE5CCh case   13:*/		return 0x821CE5D0;
		  /* 821CE5D0h */ case   14:  		/* cmplwi CR6, R10, 0 */
		/* 821CE5D0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CE5D0h case   14:*/		return 0x821CE5D4;
		  /* 821CE5D4h */ case   15:  		/* bc 12, CR6_EQ, 24 */
		/* 821CE5D4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821CE5EC;  }
		/* 821CE5D4h case   15:*/		return 0x821CE5D8;
		  /* 821CE5D8h */ case   16:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CE5D8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CE5D8h case   16:*/		return 0x821CE5DC;
		  /* 821CE5DCh */ case   17:  		/* lwz R10, <#[R1 + 104]> */
		/* 821CE5DCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 821CE5DCh case   17:*/		return 0x821CE5E0;
		  /* 821CE5E0h */ case   18:  		/* cmplw CR6, R10, R11 */
		/* 821CE5E0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CE5E0h case   18:*/		return 0x821CE5E4;
		  /* 821CE5E4h */ case   19:  		/* mr R11, R17 */
		/* 821CE5E4h case   19:*/		regs.R11 = regs.R17;
		/* 821CE5E4h case   19:*/		return 0x821CE5E8;
		  /* 821CE5E8h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE5E8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821CE5F0;  }
		/* 821CE5E8h case   20:*/		return 0x821CE5EC;
	}
	return 0x821CE5EC;
} // Block from 821CE598h-821CE5ECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CE5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE5EC);
		  /* 821CE5ECh */ case    0:  		/* li R11, 1 */
		/* 821CE5ECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE5ECh case    0:*/		return 0x821CE5F0;
	}
	return 0x821CE5F0;
} // Block from 821CE5ECh-821CE5F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE5F0);
		  /* 821CE5F0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE5F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE5F0h case    0:*/		return 0x821CE5F4;
		  /* 821CE5F4h */ case    1:  		/* bc 4, CR0_EQ, 592 */
		/* 821CE5F4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE844;  }
		/* 821CE5F4h case    1:*/		return 0x821CE5F8;
		  /* 821CE5F8h */ case    2:  		/* addi R3, R1, 96 */
		/* 821CE5F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821CE5F8h case    2:*/		return 0x821CE5FC;
		  /* 821CE5FCh */ case    3:  		/* bl -55284 */
		/* 821CE5FCh case    3:*/		regs.LR = 0x821CE600; return 0x821C0E08;
		/* 821CE5FCh case    3:*/		return 0x821CE600;
		  /* 821CE600h */ case    4:  		/* mr R11, R3 */
		/* 821CE600h case    4:*/		regs.R11 = regs.R3;
		/* 821CE600h case    4:*/		return 0x821CE604;
		  /* 821CE604h */ case    5:  		/* li R5, 51 */
		/* 821CE604h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821CE604h case    5:*/		return 0x821CE608;
		  /* 821CE608h */ case    6:  		/* li R4, 8 */
		/* 821CE608h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CE608h case    6:*/		return 0x821CE60C;
		  /* 821CE60Ch */ case    7:  		/* mr R3, R23 */
		/* 821CE60Ch case    7:*/		regs.R3 = regs.R23;
		/* 821CE60Ch case    7:*/		return 0x821CE610;
		  /* 821CE610h */ case    8:  		/* lwz R24, <#[R11]> */
		/* 821CE610h case    8:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE610h case    8:*/		return 0x821CE614;
		  /* 821CE614h */ case    9:  		/* bl -433444 */
		/* 821CE614h case    9:*/		regs.LR = 0x821CE618; return 0x821648F0;
		/* 821CE614h case    9:*/		return 0x821CE618;
		  /* 821CE618h */ case   10:  		/* addi R27, R3, 4 */
		/* 821CE618h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 821CE618h case   10:*/		return 0x821CE61C;
		  /* 821CE61Ch */ case   11:  		/* stw R24, <#[R1 + 80]> */
		/* 821CE61Ch case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821CE61Ch case   11:*/		return 0x821CE620;
		  /* 821CE620h */ case   12:  		/* ori R11, R3, 1 */
		/* 821CE620h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CE620h case   12:*/		return 0x821CE624;
		  /* 821CE624h */ case   13:  		/* stw R17, <#[R1 + 88]> */
		/* 821CE624h case   13:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000058) );
		/* 821CE624h case   13:*/		return 0x821CE628;
		  /* 821CE628h */ case   14:  		/* ori R10, R27, 1 */
		/* 821CE628h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 821CE628h case   14:*/		return 0x821CE62C;
		  /* 821CE62Ch */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 821CE62Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CE62Ch case   15:*/		return 0x821CE630;
		  /* 821CE630h */ case   16:  		/* mr R28, R3 */
		/* 821CE630h case   16:*/		regs.R28 = regs.R3;
		/* 821CE630h case   16:*/		return 0x821CE634;
		  /* 821CE634h */ case   17:  		/* stw R10, <#[R3]> */
		/* 821CE634h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CE634h case   17:*/		return 0x821CE638;
		  /* 821CE638h */ case   18:  		/* mr R26, R17 */
		/* 821CE638h case   18:*/		regs.R26 = regs.R17;
		/* 821CE638h case   18:*/		return 0x821CE63C;
		  /* 821CE63Ch */ case   19:  		/* lwz R11, <#[R24 + 4]> */
		/* 821CE63Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821CE63Ch case   19:*/		return 0x821CE640;
		  /* 821CE640h */ case   20:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CE640h case   20:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CE640h case   20:*/		return 0x821CE644;
		  /* 821CE644h */ case   21:  		/* addic R10, R10, -1 */
		/* 821CE644h case   21:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CE644h case   21:*/		return 0x821CE648;
		  /* 821CE648h */ case   22:  		/* subfe R10, R10, R10 */
		/* 821CE648h case   22:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CE648h case   22:*/		return 0x821CE64C;
		  /* 821CE64Ch */ case   23:  		/* and R9, R10, R11 */
		/* 821CE64Ch case   23:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821CE64Ch case   23:*/		return 0x821CE650;
		  /* 821CE650h */ case   24:  		/* stw R9, <#[R1 + 84]> */
		/* 821CE650h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE650h case   24:*/		return 0x821CE654;
		  /* 821CE654h */ case   25:  		/* cmplwi CR6, R9, 0 */
		/* 821CE654h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821CE654h case   25:*/		return 0x821CE658;
		  /* 821CE658h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 821CE658h case   26:*/		if ( regs.CR[6].eq ) { return 0x821CE670;  }
		/* 821CE658h case   26:*/		return 0x821CE65C;
		  /* 821CE65Ch */ case   27:  		/* lwz R11, <#[R9 + 8]> */
		/* 821CE65Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821CE65Ch case   27:*/		return 0x821CE660;
		  /* 821CE660h */ case   28:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CE660h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CE660h case   28:*/		return 0x821CE664;
		  /* 821CE664h */ case   29:  		/* cmplw CR6, R10, R11 */
		/* 821CE664h case   29:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CE664h case   29:*/		return 0x821CE668;
		  /* 821CE668h */ case   30:  		/* mr R11, R17 */
		/* 821CE668h case   30:*/		regs.R11 = regs.R17;
		/* 821CE668h case   30:*/		return 0x821CE66C;
		  /* 821CE66Ch */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE66Ch case   31:*/		if ( !regs.CR[6].eq ) { return 0x821CE674;  }
		/* 821CE66Ch case   31:*/		return 0x821CE670;
	}
	return 0x821CE670;
} // Block from 821CE5F0h-821CE670h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821CE670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE670);
		  /* 821CE670h */ case    0:  		/* li R11, 1 */
		/* 821CE670h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE670h case    0:*/		return 0x821CE674;
	}
	return 0x821CE674;
} // Block from 821CE670h-821CE674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE674);
		  /* 821CE674h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE674h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE674h case    0:*/		return 0x821CE678;
		  /* 821CE678h */ case    1:  		/* bc 4, CR0_EQ, 368 */
		/* 821CE678h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE7E8;  }
		/* 821CE678h case    1:*/		return 0x821CE67C;
		  /* 821CE67Ch */ case    2:  		/* addi R3, R1, 80 */
		/* 821CE67Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CE67Ch case    2:*/		return 0x821CE680;
		  /* 821CE680h */ case    3:  		/* bl -55504 */
		/* 821CE680h case    3:*/		regs.LR = 0x821CE684; return 0x821C0DB0;
		/* 821CE680h case    3:*/		return 0x821CE684;
		  /* 821CE684h */ case    4:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821CE684h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821CE684h case    4:*/		return 0x821CE688;
		  /* 821CE688h */ case    5:  		/* mr R30, R3 */
		/* 821CE688h case    5:*/		regs.R30 = regs.R3;
		/* 821CE688h case    5:*/		return 0x821CE68C;
		  /* 821CE68Ch */ case    6:  		/* bc 4, CR0_EQ, 232 */
		/* 821CE68Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CE774;  }
		/* 821CE68Ch case    6:*/		return 0x821CE690;
		  /* 821CE690h */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821CE690h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821CE690h case    7:*/		return 0x821CE694;
		  /* 821CE694h */ case    8:  		/* lwz R10, <#[R20]> */
		/* 821CE694h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821CE694h case    8:*/		return 0x821CE698;
		  /* 821CE698h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821CE698h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CE698h case    9:*/		return 0x821CE69C;
		  /* 821CE69Ch */ case   10:  		/* bc 4, CR6_EQ, 44 */
		/* 821CE69Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CE6C8;  }
		/* 821CE69Ch case   10:*/		return 0x821CE6A0;
		  /* 821CE6A0h */ case   11:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CE6A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CE6A0h case   11:*/		return 0x821CE6A4;
		  /* 821CE6A4h */ case   12:  		/* lwz R10, <#[R20 + 4]> */
		/* 821CE6A4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000004) );
		/* 821CE6A4h case   12:*/		return 0x821CE6A8;
		  /* 821CE6A8h */ case   13:  		/* cmpw CR6, R11, R10 */
		/* 821CE6A8h case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CE6A8h case   13:*/		return 0x821CE6AC;
		  /* 821CE6ACh */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 821CE6ACh case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CE6C8;  }
		/* 821CE6ACh case   14:*/		return 0x821CE6B0;
		  /* 821CE6B0h */ case   15:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CE6B0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE6B0h case   15:*/		return 0x821CE6B4;
		  /* 821CE6B4h */ case   16:  		/* lwz R10, <#[R20 + 8]> */
		/* 821CE6B4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821CE6B4h case   16:*/		return 0x821CE6B8;
		  /* 821CE6B8h */ case   17:  		/* xor R11, R11, R10 */
		/* 821CE6B8h case   17:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CE6B8h case   17:*/		return 0x821CE6BC;
		  /* 821CE6BCh */ case   18:  		/* rlwinm. R11, R11, 0, 30, 28 */
		/* 821CE6BCh case   18:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821CE6BCh case   18:*/		return 0x821CE6C0;
		  /* 821CE6C0h */ case   19:  		/* li R11, 1 */
		/* 821CE6C0h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE6C0h case   19:*/		return 0x821CE6C4;
		  /* 821CE6C4h */ case   20:  		/* bc 12, CR0_EQ, 8 */
		/* 821CE6C4h case   20:*/		if ( regs.CR[0].eq ) { return 0x821CE6CC;  }
		/* 821CE6C4h case   20:*/		return 0x821CE6C8;
	}
	return 0x821CE6C8;
} // Block from 821CE674h-821CE6C8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CE6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE6C8);
		  /* 821CE6C8h */ case    0:  		/* mr R11, R17 */
		/* 821CE6C8h case    0:*/		regs.R11 = regs.R17;
		/* 821CE6C8h case    0:*/		return 0x821CE6CC;
	}
	return 0x821CE6CC;
} // Block from 821CE6C8h-821CE6CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE6CC);
		  /* 821CE6CCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE6CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE6CCh case    0:*/		return 0x821CE6D0;
		  /* 821CE6D0h */ case    1:  		/* bc 12, CR0_EQ, 164 */
		/* 821CE6D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CE774;  }
		/* 821CE6D0h case    1:*/		return 0x821CE6D4;
		  /* 821CE6D4h */ case    2:  		/* mr R3, R24 */
		/* 821CE6D4h case    2:*/		regs.R3 = regs.R24;
		/* 821CE6D4h case    2:*/		return 0x821CE6D8;
		  /* 821CE6D8h */ case    3:  		/* bl -30184 */
		/* 821CE6D8h case    3:*/		regs.LR = 0x821CE6DC; return 0x821C70F0;
		/* 821CE6D8h case    3:*/		return 0x821CE6DC;
		  /* 821CE6DCh */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CE6DCh case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CE6DCh case    4:*/		return 0x821CE6E0;
		  /* 821CE6E0h */ case    5:  		/* bc 12, CR0_EQ, 136 */
		/* 821CE6E0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CE768;  }
		/* 821CE6E0h case    5:*/		return 0x821CE6E4;
		  /* 821CE6E4h */ case    6:  		/* lwz R11, <#[R27]> */
		/* 821CE6E4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CE6E4h case    6:*/		return 0x821CE6E8;
		  /* 821CE6E8h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CE6E8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CE6E8h case    7:*/		return 0x821CE6EC;
		  /* 821CE6ECh */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821CE6ECh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CE714;  }
		/* 821CE6ECh case    8:*/		return 0x821CE6F0;
		  /* 821CE6F0h */ case    9:  		/* lwz R11, <#[R28]> */
		/* 821CE6F0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821CE6F0h case    9:*/		return 0x821CE6F4;
		  /* 821CE6F4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CE6F4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CE6F4h case   10:*/		return 0x821CE6F8;
		  /* 821CE6F8h */ case   11:  		/* addic. R11, R11, -4 */
		/* 821CE6F8h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CE6F8h case   11:*/		return 0x821CE6FC;
		  /* 821CE6FCh */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821CE6FCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821CE714;  }
		/* 821CE6FCh case   12:*/		return 0x821CE700;
		  /* 821CE700h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CE700h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE700h case   13:*/		return 0x821CE704;
		  /* 821CE704h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 821CE704h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CE704h case   14:*/		return 0x821CE708;
		  /* 821CE708h */ case   15:  		/* addi R10, R10, 1 */
		/* 821CE708h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CE708h case   15:*/		return 0x821CE70C;
		  /* 821CE70Ch */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821CE70Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CE70Ch case   16:*/		return 0x821CE710;
		  /* 821CE710h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 821CE710h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821CE724;  }
		/* 821CE710h case   17:*/		return 0x821CE714;
	}
	return 0x821CE714;
} // Block from 821CE6CCh-821CE714h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CE714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE714);
		  /* 821CE714h */ case    0:  		/* li R4, 1 */
		/* 821CE714h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CE714h case    0:*/		return 0x821CE718;
		  /* 821CE718h */ case    1:  		/* mr R3, R28 */
		/* 821CE718h case    1:*/		regs.R3 = regs.R28;
		/* 821CE718h case    1:*/		return 0x821CE71C;
		  /* 821CE71Ch */ case    2:  		/* bl 144844 */
		/* 821CE71Ch case    2:*/		regs.LR = 0x821CE720; return 0x821F1CE8;
		/* 821CE71Ch case    2:*/		return 0x821CE720;
		  /* 821CE720h */ case    3:  		/* mr R11, R3 */
		/* 821CE720h case    3:*/		regs.R11 = regs.R3;
		/* 821CE720h case    3:*/		return 0x821CE724;
	}
	return 0x821CE724;
} // Block from 821CE714h-821CE724h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CE724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE724);
		  /* 821CE724h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CE724h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE724h case    0:*/		return 0x821CE728;
		  /* 821CE728h */ case    1:  		/* li R4, 1 */
		/* 821CE728h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CE728h case    1:*/		return 0x821CE72C;
		  /* 821CE72Ch */ case    2:  		/* mr R3, R23 */
		/* 821CE72Ch case    2:*/		regs.R3 = regs.R23;
		/* 821CE72Ch case    2:*/		return 0x821CE730;
		  /* 821CE730h */ case    3:  		/* fmr FR4, FR31 */
		/* 821CE730h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821CE730h case    3:*/		return 0x821CE734;
		  /* 821CE734h */ case    4:  		/* addi R9, R10, 1 */
		/* 821CE734h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 821CE734h case    4:*/		return 0x821CE738;
		  /* 821CE738h */ case    5:  		/* fmr FR3, FR31 */
		/* 821CE738h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821CE738h case    5:*/		return 0x821CE73C;
		  /* 821CE73Ch */ case    6:  		/* mulli R10, R10, 12 */
		/* 821CE73Ch case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821CE73Ch case    6:*/		return 0x821CE740;
		  /* 821CE740h */ case    7:  		/* fmr FR2, FR31 */
		/* 821CE740h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821CE740h case    7:*/		return 0x821CE744;
		  /* 821CE744h */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 821CE744h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE744h case    8:*/		return 0x821CE748;
		  /* 821CE748h */ case    9:  		/* fmr FR1, FR30 */
		/* 821CE748h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821CE748h case    9:*/		return 0x821CE74C;
		  /* 821CE74Ch */ case   10:  		/* add R31, R10, R11 */
		/* 821CE74Ch case   10:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821CE74Ch case   10:*/		return 0x821CE750;
		  /* 821CE750h */ case   11:  		/* addi R11, R31, 16 */
		/* 821CE750h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x10);
		/* 821CE750h case   11:*/		return 0x821CE754;
		  /* 821CE754h */ case   12:  		/* bl 377860 */
		/* 821CE754h case   12:*/		regs.LR = 0x821CE758; return 0x8222AB58;
		/* 821CE754h case   12:*/		return 0x821CE758;
		  /* 821CE758h */ case   13:  		/* stw R3, <#[R31 + 16]> */
		/* 821CE758h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821CE758h case   13:*/		return 0x821CE75C;
		  /* 821CE75Ch */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CE75Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CE75Ch case   14:*/		return 0x821CE760;
		  /* 821CE760h */ case   15:  		/* rlwinm R11, R11, 0, 29, 29 */
		/* 821CE760h case   15:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821CE760h case   15:*/		return 0x821CE764;
		  /* 821CE764h */ case   16:  		/* stw R11, <#[R31 + 24]> */
		/* 821CE764h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 821CE764h case   16:*/		return 0x821CE768;
	}
	return 0x821CE768;
} // Block from 821CE724h-821CE768h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CE768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE768);
		  /* 821CE768h */ case    0:  		/* lwz R9, <#[R1 + 84]> */
		/* 821CE768h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE768h case    0:*/		return 0x821CE76C;
		  /* 821CE76Ch */ case    1:  		/* li R26, 1 */
		/* 821CE76Ch case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821CE76Ch case    1:*/		return 0x821CE770;
		  /* 821CE770h */ case    2:  		/* b -284 */
		/* 821CE770h case    2:*/		return 0x821CE654;
		/* 821CE770h case    2:*/		return 0x821CE774;
	}
	return 0x821CE774;
} // Block from 821CE768h-821CE774h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CE774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE774);
		  /* 821CE774h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821CE774h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CE774h case    0:*/		return 0x821CE778;
		  /* 821CE778h */ case    1:  		/* lwz R31, <#[R30]> */
		/* 821CE778h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821CE778h case    1:*/		return 0x821CE77C;
		  /* 821CE77Ch */ case    2:  		/* lwz R29, <#[R30 + 4]> */
		/* 821CE77Ch case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821CE77Ch case    2:*/		return 0x821CE780;
		  /* 821CE780h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CE780h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CE780h case    3:*/		return 0x821CE784;
		  /* 821CE784h */ case    4:  		/* lwz R30, <#[R30 + 8]> */
		/* 821CE784h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821CE784h case    4:*/		return 0x821CE788;
		  /* 821CE788h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821CE788h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CE7B0;  }
		/* 821CE788h case    5:*/		return 0x821CE78C;
		  /* 821CE78Ch */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821CE78Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821CE78Ch case    6:*/		return 0x821CE790;
		  /* 821CE790h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CE790h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CE790h case    7:*/		return 0x821CE794;
		  /* 821CE794h */ case    8:  		/* addic. R3, R11, -4 */
		/* 821CE794h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CE794h case    8:*/		return 0x821CE798;
		  /* 821CE798h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821CE798h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CE7B0;  }
		/* 821CE798h case    9:*/		return 0x821CE79C;
		  /* 821CE79Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CE79Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE79Ch case   10:*/		return 0x821CE7A0;
		  /* 821CE7A0h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CE7A0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CE7A0h case   11:*/		return 0x821CE7A4;
		  /* 821CE7A4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821CE7A4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CE7A4h case   12:*/		return 0x821CE7A8;
		  /* 821CE7A8h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821CE7A8h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CE7A8h case   13:*/		return 0x821CE7AC;
		  /* 821CE7ACh */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821CE7ACh case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CE7BC;  }
		/* 821CE7ACh case   14:*/		return 0x821CE7B0;
	}
	return 0x821CE7B0;
} // Block from 821CE774h-821CE7B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CE7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE7B0);
		  /* 821CE7B0h */ case    0:  		/* li R4, 1 */
		/* 821CE7B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CE7B0h case    0:*/		return 0x821CE7B4;
		  /* 821CE7B4h */ case    1:  		/* mr R3, R28 */
		/* 821CE7B4h case    1:*/		regs.R3 = regs.R28;
		/* 821CE7B4h case    1:*/		return 0x821CE7B8;
		  /* 821CE7B8h */ case    2:  		/* bl 144688 */
		/* 821CE7B8h case    2:*/		regs.LR = 0x821CE7BC; return 0x821F1CE8;
		/* 821CE7B8h case    2:*/		return 0x821CE7BC;
	}
	return 0x821CE7BC;
} // Block from 821CE7B0h-821CE7BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CE7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE7BC);
		  /* 821CE7BCh */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CE7BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE7BCh case    0:*/		return 0x821CE7C0;
	}
	return 0x821CE7C0;
} // Block from 821CE7BCh-821CE7C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE7C0h
// Function '?SimplifyTerms@Compiler@D3DXShader@@AAA_NPAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE7C0);
		  /* 821CE7C0h */ case    0:  		/* lwz R9, <#[R1 + 84]> */
		/* 821CE7C0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821CE7C0h case    0:*/		return 0x821CE7C4;
		  /* 821CE7C4h */ case    1:  		/* mulli R11, R10, 12 */
		/* 821CE7C4h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0xC);
		/* 821CE7C4h case    1:*/		return 0x821CE7C8;
		  /* 821CE7C8h */ case    2:  		/* add R11, R11, R3 */
		/* 821CE7C8h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821CE7C8h case    2:*/		return 0x821CE7CC;
		  /* 821CE7CCh */ case    3:  		/* addi R8, R10, 1 */
		/* 821CE7CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821CE7CCh case    3:*/		return 0x821CE7D0;
		  /* 821CE7D0h */ case    4:  		/* addi R10, R11, 16 */
		/* 821CE7D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 821CE7D0h case    4:*/		return 0x821CE7D4;
		  /* 821CE7D4h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821CE7D4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE7D4h case    5:*/		return 0x821CE7D8;
		  /* 821CE7D8h */ case    6:  		/* stw R31, <#[R11 + 16]> */
		/* 821CE7D8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821CE7D8h case    6:*/		return 0x821CE7DC;
		  /* 821CE7DCh */ case    7:  		/* stw R29, <#[R11 + 20]> */
		/* 821CE7DCh case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000014) );
		/* 821CE7DCh case    7:*/		return 0x821CE7E0;
		  /* 821CE7E0h */ case    8:  		/* stw R30, <#[R11 + 24]> */
		/* 821CE7E0h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 821CE7E0h case    8:*/		return 0x821CE7E4;
		  /* 821CE7E4h */ case    9:  		/* b -400 */
		/* 821CE7E4h case    9:*/		return 0x821CE654;
		/* 821CE7E4h case    9:*/		return 0x821CE7E8;
	}
	return 0x821CE7E8;
} // Block from 821CE7C0h-821CE7E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CE7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE7E8);
		  /* 821CE7E8h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821CE7E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821CE7E8h case    0:*/		return 0x821CE7EC;
		  /* 821CE7ECh */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CE7ECh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CE7ECh case    1:*/		return 0x821CE7F0;
		  /* 821CE7F0h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821CE7F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CE818;  }
		/* 821CE7F0h case    2:*/		return 0x821CE7F4;
		  /* 821CE7F4h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 821CE7F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CE7F4h case    3:*/		return 0x821CE7F8;
		  /* 821CE7F8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CE7F8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CE7F8h case    4:*/		return 0x821CE7FC;
		  /* 821CE7FCh */ case    5:  		/* addic. R3, R11, -4 */
		/* 821CE7FCh case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CE7FCh case    5:*/		return 0x821CE800;
		  /* 821CE800h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821CE800h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CE818;  }
		/* 821CE800h case    6:*/		return 0x821CE804;
		  /* 821CE804h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CE804h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE804h case    7:*/		return 0x821CE808;
		  /* 821CE808h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CE808h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CE808h case    8:*/		return 0x821CE80C;
		  /* 821CE80Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 821CE80Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CE80Ch case    9:*/		return 0x821CE810;
		  /* 821CE810h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821CE810h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CE810h case   10:*/		return 0x821CE814;
		  /* 821CE814h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821CE814h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821CE824;  }
		/* 821CE814h case   11:*/		return 0x821CE818;
	}
	return 0x821CE818;
} // Block from 821CE7E8h-821CE818h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CE818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE818);
		  /* 821CE818h */ case    0:  		/* li R4, 1 */
		/* 821CE818h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CE818h case    0:*/		return 0x821CE81C;
		  /* 821CE81Ch */ case    1:  		/* mr R3, R25 */
		/* 821CE81Ch case    1:*/		regs.R3 = regs.R25;
		/* 821CE81Ch case    1:*/		return 0x821CE820;
		  /* 821CE820h */ case    2:  		/* bl -268120 */
		/* 821CE820h case    2:*/		regs.LR = 0x821CE824; return 0x8218D0C8;
		/* 821CE820h case    2:*/		return 0x821CE824;
	}
	return 0x821CE824;
} // Block from 821CE818h-821CE824h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CE824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE824);
		  /* 821CE824h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CE824h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE824h case    0:*/		return 0x821CE828;
		  /* 821CE828h */ case    1:  		/* lwz R10, <#[R1 + 100]> */
		/* 821CE828h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821CE828h case    1:*/		return 0x821CE82C;
		  /* 821CE82Ch */ case    2:  		/* addi R9, R11, 4 */
		/* 821CE82Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821CE82Ch case    2:*/		return 0x821CE830;
		  /* 821CE830h */ case    3:  		/* addi R8, R11, 1 */
		/* 821CE830h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821CE830h case    3:*/		return 0x821CE834;
		  /* 821CE834h */ case    4:  		/* rlwinm R11, R9, 2, 0, 29 */
		/* 821CE834h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 821CE834h case    4:*/		return 0x821CE838;
		  /* 821CE838h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821CE838h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821CE838h case    5:*/		return 0x821CE83C;
		  /* 821CE83Ch */ case    6:  		/* stwx R28, <#[R11 + R3]> */
		/* 821CE83Ch case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CE83Ch case    6:*/		return 0x821CE840;
		  /* 821CE840h */ case    7:  		/* b -624 */
		/* 821CE840h case    7:*/		return 0x821CE5D0;
		/* 821CE840h case    7:*/		return 0x821CE844;
	}
	return 0x821CE844;
} // Block from 821CE824h-821CE844h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CE844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE844);
		  /* 821CE844h */ case    0:  		/* mr R5, R19 */
		/* 821CE844h case    0:*/		regs.R5 = regs.R19;
		/* 821CE844h case    0:*/		return 0x821CE848;
		  /* 821CE848h */ case    1:  		/* mr R4, R25 */
		/* 821CE848h case    1:*/		regs.R4 = regs.R25;
		/* 821CE848h case    1:*/		return 0x821CE84C;
		  /* 821CE84Ch */ case    2:  		/* mr R3, R23 */
		/* 821CE84Ch case    2:*/		regs.R3 = regs.R23;
		/* 821CE84Ch case    2:*/		return 0x821CE850;
		  /* 821CE850h */ case    3:  		/* bl -2920 */
		/* 821CE850h case    3:*/		regs.LR = 0x821CE854; return 0x821CDCE8;
		/* 821CE850h case    3:*/		return 0x821CE854;
		  /* 821CE854h */ case    4:  		/* mr R4, R22 */
		/* 821CE854h case    4:*/		regs.R4 = regs.R22;
		/* 821CE854h case    4:*/		return 0x821CE858;
		  /* 821CE858h */ case    5:  		/* mr R3, R23 */
		/* 821CE858h case    5:*/		regs.R3 = regs.R23;
		/* 821CE858h case    5:*/		return 0x821CE85C;
		  /* 821CE85Ch */ case    6:  		/* bl -16084 */
		/* 821CE85Ch case    6:*/		regs.LR = 0x821CE860; return 0x821CA988;
		/* 821CE85Ch case    6:*/		return 0x821CE860;
		  /* 821CE860h */ case    7:  		/* mr R31, R3 */
		/* 821CE860h case    7:*/		regs.R31 = regs.R3;
		/* 821CE860h case    7:*/		return 0x821CE864;
		  /* 821CE864h */ case    8:  		/* mr R4, R25 */
		/* 821CE864h case    8:*/		regs.R4 = regs.R25;
		/* 821CE864h case    8:*/		return 0x821CE868;
		  /* 821CE868h */ case    9:  		/* mr R3, R23 */
		/* 821CE868h case    9:*/		regs.R3 = regs.R23;
		/* 821CE868h case    9:*/		return 0x821CE86C;
		  /* 821CE86Ch */ case   10:  		/* bl -16100 */
		/* 821CE86Ch case   10:*/		regs.LR = 0x821CE870; return 0x821CA988;
		/* 821CE86Ch case   10:*/		return 0x821CE870;
		  /* 821CE870h */ case   11:  		/* addi R11, R3, 1 */
		/* 821CE870h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CE870h case   11:*/		return 0x821CE874;
		  /* 821CE874h */ case   12:  		/* cmplw CR6, R11, R31 */
		/* 821CE874h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821CE874h case   12:*/		return 0x821CE878;
		  /* 821CE878h */ case   13:  		/* bc 12, CR6_LT, 28 */
		/* 821CE878h case   13:*/		if ( regs.CR[6].lt ) { return 0x821CE894;  }
		/* 821CE878h case   13:*/		return 0x821CE87C;
		  /* 821CE87Ch */ case   14:  		/* mr R4, R25 */
		/* 821CE87Ch case   14:*/		regs.R4 = regs.R25;
		/* 821CE87Ch case   14:*/		return 0x821CE880;
		  /* 821CE880h */ case   15:  		/* lwz R5, <#[R23 + 652]> */
		/* 821CE880h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x0000028C) );
		/* 821CE880h case   15:*/		return 0x821CE884;
		  /* 821CE884h */ case   16:  		/* mr R3, R23 */
		/* 821CE884h case   16:*/		regs.R3 = regs.R23;
		/* 821CE884h case   16:*/		return 0x821CE888;
		  /* 821CE888h */ case   17:  		/* bl -3856 */
		/* 821CE888h case   17:*/		regs.LR = 0x821CE88C; return 0x821CD978;
		/* 821CE888h case   17:*/		return 0x821CE88C;
		  /* 821CE88Ch */ case   18:  		/* mr R3, R17 */
		/* 821CE88Ch case   18:*/		regs.R3 = regs.R17;
		/* 821CE88Ch case   18:*/		return 0x821CE890;
		  /* 821CE890h */ case   19:  		/* b -800 */
		/* 821CE890h case   19:*/		return 0x821CE570;
		/* 821CE890h case   19:*/		return 0x821CE894;
	}
	return 0x821CE894;
} // Block from 821CE844h-821CE894h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821CE894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE894);
		  /* 821CE894h */ case    0:  		/* stw R25, <#[R18]> */
		/* 821CE894h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R18 + 0x00000000) );
		/* 821CE894h case    0:*/		return 0x821CE898;
		  /* 821CE898h */ case    1:  		/* subf R3, R3, R31 */
		/* 821CE898h case    1:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R3,regs.R31);
		/* 821CE898h case    1:*/		return 0x821CE89C;
	}
	return 0x821CE89C;
} // Block from 821CE894h-821CE89Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CE89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE89C);
		  /* 821CE89Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 821CE89Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821CE89Ch case    0:*/		return 0x821CE8A0;
		  /* 821CE8A0h */ case    1:  		/* lfd FR30, <#[R1 - 144]> */
		/* 821CE8A0h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821CE8A0h case    1:*/		return 0x821CE8A4;
		  /* 821CE8A4h */ case    2:  		/* lfd FR31, <#[R1 - 136]> */
		/* 821CE8A4h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821CE8A4h case    2:*/		return 0x821CE8A8;
		  /* 821CE8A8h */ case    3:  		/* b -1300012 */
		/* 821CE8A8h case    3:*/		return 0x8209127C;
		/* 821CE8A8h case    3:*/		return 0x821CE8AC;
		  /* 821CE8ACh */ case    4:  		/* nop */
		/* 821CE8ACh case    4:*/		cpu::op::nop();
		/* 821CE8ACh case    4:*/		return 0x821CE8B0;
	}
	return 0x821CE8B0;
} // Block from 821CE89Ch-821CE8B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CE8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE8B0);
		  /* 821CE8B0h */ case    0:  		/* mfspr R12, LR */
		/* 821CE8B0h case    0:*/		regs.R12 = regs.LR;
		/* 821CE8B0h case    0:*/		return 0x821CE8B4;
		  /* 821CE8B4h */ case    1:  		/* bl -1300060 */
		/* 821CE8B4h case    1:*/		regs.LR = 0x821CE8B8; return 0x82091258;
		/* 821CE8B4h case    1:*/		return 0x821CE8B8;
		  /* 821CE8B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821CE8B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821CE8B8h case    2:*/		return 0x821CE8BC;
		  /* 821CE8BCh */ case    3:  		/* lwz R7, <#[R4 + 8]> */
		/* 821CE8BCh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00000008) );
		/* 821CE8BCh case    3:*/		return 0x821CE8C0;
		  /* 821CE8C0h */ case    4:  		/* mr R29, R3 */
		/* 821CE8C0h case    4:*/		regs.R29 = regs.R3;
		/* 821CE8C0h case    4:*/		return 0x821CE8C4;
		  /* 821CE8C4h */ case    5:  		/* mr R30, R4 */
		/* 821CE8C4h case    5:*/		regs.R30 = regs.R4;
		/* 821CE8C4h case    5:*/		return 0x821CE8C8;
		  /* 821CE8C8h */ case    6:  		/* rlwinm R8, R7, 25, 25, 31 */
		/* 821CE8C8h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R8,regs.R7);
		/* 821CE8C8h case    6:*/		return 0x821CE8CC;
		  /* 821CE8CCh */ case    7:  		/* mr R28, R6 */
		/* 821CE8CCh case    7:*/		regs.R28 = regs.R6;
		/* 821CE8CCh case    7:*/		return 0x821CE8D0;
		  /* 821CE8D0h */ case    8:  		/* cmplwi CR6, R8, 16 */
		/* 821CE8D0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 821CE8D0h case    8:*/		return 0x821CE8D4;
		  /* 821CE8D4h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 821CE8D4h case    9:*/		if ( regs.CR[6].lt ) { return 0x821CE8E4;  }
		/* 821CE8D4h case    9:*/		return 0x821CE8D8;
		  /* 821CE8D8h */ case   10:  		/* cmplwi CR6, R8, 18 */
		/* 821CE8D8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000012);
		/* 821CE8D8h case   10:*/		return 0x821CE8DC;
		  /* 821CE8DCh */ case   11:  		/* li R11, 1 */
		/* 821CE8DCh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE8DCh case   11:*/		return 0x821CE8E0;
		  /* 821CE8E0h */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 821CE8E0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821CE8E8;  }
		/* 821CE8E0h case   12:*/		return 0x821CE8E4;
	}
	return 0x821CE8E4;
} // Block from 821CE8B0h-821CE8E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CE8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE8E4);
		  /* 821CE8E4h */ case    0:  		/* li R11, 0 */
		/* 821CE8E4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CE8E4h case    0:*/		return 0x821CE8E8;
	}
	return 0x821CE8E8;
} // Block from 821CE8E4h-821CE8E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE8E8);
		  /* 821CE8E8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE8E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE8E8h case    0:*/		return 0x821CE8EC;
		  /* 821CE8ECh */ case    1:  		/* bc 4, CR0_EQ, 24 */
		/* 821CE8ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CE904;  }
		/* 821CE8ECh case    1:*/		return 0x821CE8F0;
		  /* 821CE8F0h */ case    2:  		/* cmplwi CR6, R8, 2 */
		/* 821CE8F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000002);
		/* 821CE8F0h case    2:*/		return 0x821CE8F4;
		  /* 821CE8F4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821CE8F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CE904;  }
		/* 821CE8F4h case    3:*/		return 0x821CE8F8;
		  /* 821CE8F8h */ case    4:  		/* cmplwi CR6, R8, 12 */
		/* 821CE8F8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x0000000C);
		/* 821CE8F8h case    4:*/		return 0x821CE8FC;
		  /* 821CE8FCh */ case    5:  		/* li R11, 0 */
		/* 821CE8FCh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CE8FCh case    5:*/		return 0x821CE900;
		  /* 821CE900h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE900h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CE908;  }
		/* 821CE900h case    6:*/		return 0x821CE904;
	}
	return 0x821CE904;
} // Block from 821CE8E8h-821CE904h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CE904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE904);
		  /* 821CE904h */ case    0:  		/* li R11, 1 */
		/* 821CE904h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CE904h case    0:*/		return 0x821CE908;
	}
	return 0x821CE908;
} // Block from 821CE904h-821CE908h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CE908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE908);
		  /* 821CE908h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CE908h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CE908h case    0:*/		return 0x821CE90C;
		  /* 821CE90Ch */ case    1:  		/* bc 12, CR0_EQ, 248 */
		/* 821CE90Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CEA04;  }
		/* 821CE90Ch case    1:*/		return 0x821CE910;
		  /* 821CE910h */ case    2:  		/* cmplwi CR6, R5, 4 */
		/* 821CE910h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000004);
		/* 821CE910h case    2:*/		return 0x821CE914;
		  /* 821CE914h */ case    3:  		/* bc 4, CR6_EQ, 240 */
		/* 821CE914h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CEA04;  }
		/* 821CE914h case    3:*/		return 0x821CE918;
		  /* 821CE918h */ case    4:  		/* rlwinm R11, R7, 0, 10, 12 */
		/* 821CE918h case    4:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R7);
		/* 821CE918h case    4:*/		return 0x821CE91C;
		  /* 821CE91Ch */ case    5:  		/* lwz R9, <#[R30 + 44]> */
		/* 821CE91Ch case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000002C) );
		/* 821CE91Ch case    5:*/		return 0x821CE920;
		  /* 821CE920h */ case    6:  		/* lis R10, 16 */
		/* 821CE920h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x10);
		/* 821CE920h case    6:*/		return 0x821CE924;
		  /* 821CE924h */ case    7:  		/* lwz R3, <#[R30 + 48]> */
		/* 821CE924h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821CE924h case    7:*/		return 0x821CE928;
		  /* 821CE928h */ case    8:  		/* li R31, 0 */
		/* 821CE928h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CE928h case    8:*/		return 0x821CE92C;
		  /* 821CE92Ch */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821CE92Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CE92Ch case    9:*/		return 0x821CE930;
		  /* 821CE930h */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 821CE930h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821CE938;  }
		/* 821CE930h case   10:*/		return 0x821CE934;
		  /* 821CE934h */ case   11:  		/* lwz R31, <#[R30 + 52]> */
		/* 821CE934h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000034) );
		/* 821CE934h case   11:*/		return 0x821CE938;
	}
	return 0x821CE938;
} // Block from 821CE908h-821CE938h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CE938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE938);
		  /* 821CE938h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CE938h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CE938h case    0:*/		return 0x821CE93C;
		  /* 821CE93Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CE93Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE93Ch case    1:*/		return 0x821CE940;
		  /* 821CE940h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821CE940h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CE970;  }
		/* 821CE940h case    2:*/		return 0x821CE944;
		  /* 821CE944h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821CE944h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821CE944h case    3:*/		return 0x821CE948;
		  /* 821CE948h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821CE948h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CE948h case    4:*/		return 0x821CE94C;
		  /* 821CE94Ch */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821CE94Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CE968;  }
		/* 821CE94Ch case    5:*/		return 0x821CE950;
		  /* 821CE950h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821CE950h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE950h case    6:*/		return 0x821CE954;
		  /* 821CE954h */ case    7:  		/* rlwinm. R6, R10, 0, 4, 6 */
		/* 821CE954h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R6,regs.R10);
		/* 821CE954h case    7:*/		return 0x821CE958;
		  /* 821CE958h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821CE958h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CE968;  }
		/* 821CE958h case    8:*/		return 0x821CE95C;
		  /* 821CE95Ch */ case    9:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821CE95Ch case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821CE95Ch case    9:*/		return 0x821CE960;
		  /* 821CE960h */ case   10:  		/* cmplwi CR6, R10, 4 */
		/* 821CE960h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821CE960h case   10:*/		return 0x821CE964;
		  /* 821CE964h */ case   11:  		/* bc 4, CR6_EQ, 160 */
		/* 821CE964h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CEA04;  }
		/* 821CE964h case   11:*/		return 0x821CE968;
	}
	return 0x821CE968;
} // Block from 821CE938h-821CE968h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CE968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE968);
		  /* 821CE968h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CE968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE968h case    0:*/		return 0x821CE96C;
		  /* 821CE96Ch */ case    1:  		/* b -48 */
		/* 821CE96Ch case    1:*/		return 0x821CE93C;
		/* 821CE96Ch case    1:*/		return 0x821CE970;
	}
	return 0x821CE970;
} // Block from 821CE968h-821CE970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CE970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE970);
		  /* 821CE970h */ case    0:  		/* lwz R11, <#[R9 + 12]> */
		/* 821CE970h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 821CE970h case    0:*/		return 0x821CE974;
		  /* 821CE974h */ case    1:  		/* li R4, 4 */
		/* 821CE974h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821CE974h case    1:*/		return 0x821CE978;
		  /* 821CE978h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CE978h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE978h case    2:*/		return 0x821CE97C;
		  /* 821CE97Ch */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CE97Ch case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CE97Ch case    3:*/		return 0x821CE980;
		  /* 821CE980h */ case    4:  		/* cmplwi CR6, R11, 16000 */
		/* 821CE980h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821CE980h case    4:*/		return 0x821CE984;
		  /* 821CE984h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821CE984h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CE98C;  }
		/* 821CE984h case    5:*/		return 0x821CE988;
		  /* 821CE988h */ case    6:  		/* mr R3, R9 */
		/* 821CE988h case    6:*/		regs.R3 = regs.R9;
		/* 821CE988h case    6:*/		return 0x821CE98C;
	}
	return 0x821CE98C;
} // Block from 821CE970h-821CE98Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CE98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE98C);
		  /* 821CE98Ch */ case    0:  		/* bl -356044 */
		/* 821CE98Ch case    0:*/		regs.LR = 0x821CE990; return 0x82177AC0;
		/* 821CE98Ch case    0:*/		return 0x821CE990;
		  /* 821CE990h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821CE990h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CE990h case    1:*/		return 0x821CE994;
		  /* 821CE994h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821CE994h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CE9A4;  }
		/* 821CE994h case    2:*/		return 0x821CE998;
		  /* 821CE998h */ case    3:  		/* li R4, 4 */
		/* 821CE998h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821CE998h case    3:*/		return 0x821CE99C;
		  /* 821CE99Ch */ case    4:  		/* mr R3, R31 */
		/* 821CE99Ch case    4:*/		regs.R3 = regs.R31;
		/* 821CE99Ch case    4:*/		return 0x821CE9A0;
		  /* 821CE9A0h */ case    5:  		/* bl -356064 */
		/* 821CE9A0h case    5:*/		regs.LR = 0x821CE9A4; return 0x82177AC0;
		/* 821CE9A0h case    5:*/		return 0x821CE9A4;
	}
	return 0x821CE9A4;
} // Block from 821CE98Ch-821CE9A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CE9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE9A4);
		  /* 821CE9A4h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CE9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CE9A4h case    0:*/		return 0x821CE9A8;
		  /* 821CE9A8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CE9A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CE9A8h case    1:*/		return 0x821CE9AC;
		  /* 821CE9ACh */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821CE9ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x821CE9D8;  }
		/* 821CE9ACh case    2:*/		return 0x821CE9B0;
		  /* 821CE9B0h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821CE9B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821CE9B0h case    3:*/		return 0x821CE9B4;
		  /* 821CE9B4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821CE9B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CE9B4h case    4:*/		return 0x821CE9B8;
		  /* 821CE9B8h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 821CE9B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CE9D0;  }
		/* 821CE9B8h case    5:*/		return 0x821CE9BC;
		  /* 821CE9BCh */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821CE9BCh case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE9BCh case    6:*/		return 0x821CE9C0;
		  /* 821CE9C0h */ case    7:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821CE9C0h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821CE9C0h case    7:*/		return 0x821CE9C4;
		  /* 821CE9C4h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821CE9C4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CE9D0;  }
		/* 821CE9C4h case    8:*/		return 0x821CE9C8;
		  /* 821CE9C8h */ case    9:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821CE9C8h case    9:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821CE9C8h case    9:*/		return 0x821CE9CC;
		  /* 821CE9CCh */ case   10:  		/* stw R10, <#[R11]> */
		/* 821CE9CCh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CE9CCh case   10:*/		return 0x821CE9D0;
	}
	return 0x821CE9D0;
} // Block from 821CE9A4h-821CE9D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CE9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE9D0);
		  /* 821CE9D0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CE9D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CE9D0h case    0:*/		return 0x821CE9D4;
		  /* 821CE9D4h */ case    1:  		/* b -44 */
		/* 821CE9D4h case    1:*/		return 0x821CE9A8;
		/* 821CE9D4h case    1:*/		return 0x821CE9D8;
	}
	return 0x821CE9D8;
} // Block from 821CE9D0h-821CE9D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CE9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE9D8);
		  /* 821CE9D8h */ case    0:  		/* lwz R31, <#[R30 + 4]> */
		/* 821CE9D8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821CE9D8h case    0:*/		return 0x821CE9DC;
		  /* 821CE9DCh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821CE9DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CE9DCh case    1:*/		return 0x821CE9E0;
		  /* 821CE9E0h */ case    2:  		/* bc 12, CR6_EQ, 384 */
		/* 821CE9E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CEB60;  }
		/* 821CE9E0h case    2:*/		return 0x821CE9E4;
		  /* 821CE9E4h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CE9E4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CE9E4h case    3:*/		return 0x821CE9E8;
		  /* 821CE9E8h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821CE9E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CE9E8h case    4:*/		return 0x821CE9EC;
		  /* 821CE9ECh */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821CE9ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x821CE9FC;  }
		/* 821CE9ECh case    5:*/		return 0x821CE9F0;
		  /* 821CE9F0h */ case    6:  		/* mr R5, R28 */
		/* 821CE9F0h case    6:*/		regs.R5 = regs.R28;
		/* 821CE9F0h case    6:*/		return 0x821CE9F4;
		  /* 821CE9F4h */ case    7:  		/* mr R3, R29 */
		/* 821CE9F4h case    7:*/		regs.R3 = regs.R29;
		/* 821CE9F4h case    7:*/		return 0x821CE9F8;
		  /* 821CE9F8h */ case    8:  		/* bl -12336 */
		/* 821CE9F8h case    8:*/		regs.LR = 0x821CE9FC; return 0x821CB9C8;
		/* 821CE9F8h case    8:*/		return 0x821CE9FC;
	}
	return 0x821CE9FC;
} // Block from 821CE9D8h-821CE9FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CE9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CE9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CE9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CE9FC);
		  /* 821CE9FCh */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CE9FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CE9FCh case    0:*/		return 0x821CEA00;
		  /* 821CEA00h */ case    1:  		/* b -36 */
		/* 821CEA00h case    1:*/		return 0x821CE9DC;
		/* 821CEA00h case    1:*/		return 0x821CEA04;
	}
	return 0x821CEA04;
} // Block from 821CE9FCh-821CEA04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA04);
		  /* 821CEA04h */ case    0:  		/* cmplwi CR6, R8, 1 */
		/* 821CEA04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 821CEA04h case    0:*/		return 0x821CEA08;
		  /* 821CEA08h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821CEA08h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CEA18;  }
		/* 821CEA08h case    1:*/		return 0x821CEA0C;
		  /* 821CEA0Ch */ case    2:  		/* cmplwi CR6, R8, 12 */
		/* 821CEA0Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x0000000C);
		/* 821CEA0Ch case    2:*/		return 0x821CEA10;
		  /* 821CEA10h */ case    3:  		/* li R11, 0 */
		/* 821CEA10h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CEA10h case    3:*/		return 0x821CEA14;
		  /* 821CEA14h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821CEA14h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821CEA1C;  }
		/* 821CEA14h case    4:*/		return 0x821CEA18;
	}
	return 0x821CEA18;
} // Block from 821CEA04h-821CEA18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA18);
		  /* 821CEA18h */ case    0:  		/* li R11, 1 */
		/* 821CEA18h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CEA18h case    0:*/		return 0x821CEA1C;
	}
	return 0x821CEA1C;
} // Block from 821CEA18h-821CEA1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA1C);
		  /* 821CEA1Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CEA1Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CEA1Ch case    0:*/		return 0x821CEA20;
		  /* 821CEA20h */ case    1:  		/* bc 12, CR0_EQ, 384 */
		/* 821CEA20h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CEBA0;  }
		/* 821CEA20h case    1:*/		return 0x821CEA24;
		  /* 821CEA24h */ case    2:  		/* cmplwi CR6, R5, 4 */
		/* 821CEA24h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000004);
		/* 821CEA24h case    2:*/		return 0x821CEA28;
		  /* 821CEA28h */ case    3:  		/* bc 4, CR6_EQ, 376 */
		/* 821CEA28h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CEBA0;  }
		/* 821CEA28h case    3:*/		return 0x821CEA2C;
		  /* 821CEA2Ch */ case    4:  		/* cmplwi CR6, R8, 16 */
		/* 821CEA2Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000010);
		/* 821CEA2Ch case    4:*/		return 0x821CEA30;
		  /* 821CEA30h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 821CEA30h case    5:*/		if ( regs.CR[6].lt ) { return 0x821CEA40;  }
		/* 821CEA30h case    5:*/		return 0x821CEA34;
		  /* 821CEA34h */ case    6:  		/* cmplwi CR6, R8, 18 */
		/* 821CEA34h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000012);
		/* 821CEA34h case    6:*/		return 0x821CEA38;
		  /* 821CEA38h */ case    7:  		/* li R11, 1 */
		/* 821CEA38h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CEA38h case    7:*/		return 0x821CEA3C;
		  /* 821CEA3Ch */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 821CEA3Ch case    8:*/		if ( !regs.CR[6].gt ) { return 0x821CEA44;  }
		/* 821CEA3Ch case    8:*/		return 0x821CEA40;
	}
	return 0x821CEA40;
} // Block from 821CEA1Ch-821CEA40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA40);
		  /* 821CEA40h */ case    0:  		/* li R11, 0 */
		/* 821CEA40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CEA40h case    0:*/		return 0x821CEA44;
	}
	return 0x821CEA44;
} // Block from 821CEA40h-821CEA44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA44);
		  /* 821CEA44h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CEA44h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CEA44h case    0:*/		return 0x821CEA48;
		  /* 821CEA48h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CEA48h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CEA54;  }
		/* 821CEA48h case    1:*/		return 0x821CEA4C;
		  /* 821CEA4Ch */ case    2:  		/* cmplwi CR6, R8, 18 */
		/* 821CEA4Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000012);
		/* 821CEA4Ch case    2:*/		return 0x821CEA50;
		  /* 821CEA50h */ case    3:  		/* bc 4, CR6_EQ, 336 */
		/* 821CEA50h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CEBA0;  }
		/* 821CEA50h case    3:*/		return 0x821CEA54;
	}
	return 0x821CEA54;
} // Block from 821CEA44h-821CEA54h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA54);
		  /* 821CEA54h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CEA54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CEA54h case    0:*/		return 0x821CEA58;
		  /* 821CEA58h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CEA58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CEA58h case    1:*/		return 0x821CEA5C;
		  /* 821CEA5Ch */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821CEA5Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821CEA8C;  }
		/* 821CEA5Ch case    2:*/		return 0x821CEA60;
		  /* 821CEA60h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821CEA60h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821CEA60h case    3:*/		return 0x821CEA64;
		  /* 821CEA64h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821CEA64h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CEA64h case    4:*/		return 0x821CEA68;
		  /* 821CEA68h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821CEA68h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CEA84;  }
		/* 821CEA68h case    5:*/		return 0x821CEA6C;
		  /* 821CEA6Ch */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821CEA6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEA6Ch case    6:*/		return 0x821CEA70;
		  /* 821CEA70h */ case    7:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821CEA70h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821CEA70h case    7:*/		return 0x821CEA74;
		  /* 821CEA74h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821CEA74h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CEA84;  }
		/* 821CEA74h case    8:*/		return 0x821CEA78;
		  /* 821CEA78h */ case    9:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821CEA78h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821CEA78h case    9:*/		return 0x821CEA7C;
		  /* 821CEA7Ch */ case   10:  		/* cmplwi CR6, R10, 4 */
		/* 821CEA7Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821CEA7Ch case   10:*/		return 0x821CEA80;
		  /* 821CEA80h */ case   11:  		/* bc 4, CR6_EQ, 288 */
		/* 821CEA80h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CEBA0;  }
		/* 821CEA80h case   11:*/		return 0x821CEA84;
	}
	return 0x821CEA84;
} // Block from 821CEA54h-821CEA84h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA84);
		  /* 821CEA84h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CEA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CEA84h case    0:*/		return 0x821CEA88;
		  /* 821CEA88h */ case    1:  		/* b -48 */
		/* 821CEA88h case    1:*/		return 0x821CEA58;
		/* 821CEA88h case    1:*/		return 0x821CEA8C;
	}
	return 0x821CEA8C;
} // Block from 821CEA84h-821CEA8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEA8C);
		  /* 821CEA8Ch */ case    0:  		/* rlwinm R11, R7, 13, 29, 31 */
		/* 821CEA8Ch case    0:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R7);
		/* 821CEA8Ch case    0:*/		return 0x821CEA90;
		  /* 821CEA90h */ case    1:  		/* li R3, 0 */
		/* 821CEA90h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CEA90h case    1:*/		return 0x821CEA94;
		  /* 821CEA94h */ case    2:  		/* addi R10, R11, 10 */
		/* 821CEA94h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xA);
		/* 821CEA94h case    2:*/		return 0x821CEA98;
		  /* 821CEA98h */ case    3:  		/* addic. R11, R11, -1 */
		/* 821CEA98h case    3:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CEA98h case    3:*/		return 0x821CEA9C;
		  /* 821CEA9Ch */ case    4:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 821CEA9Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821CEA9Ch case    4:*/		return 0x821CEAA0;
		  /* 821CEAA0h */ case    5:  		/* li R10, 0 */
		/* 821CEAA0h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CEAA0h case    5:*/		return 0x821CEAA4;
		  /* 821CEAA4h */ case    6:  		/* lwzx R31, <#[R9 + R30]> */
		/* 821CEAA4h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 821CEAA4h case    6:*/		return 0x821CEAA8;
		  /* 821CEAA8h */ case    7:  		/* bc 12, CR0_EQ, 248 */
		/* 821CEAA8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821CEBA0;  }
		/* 821CEAA8h case    7:*/		return 0x821CEAAC;
		  /* 821CEAACh */ case    8:  		/* addi R9, R30, 44 */
		/* 821CEAACh case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x2C);
		/* 821CEAACh case    8:*/		return 0x821CEAB0;
		  /* 821CEAB0h */ case    9:  		/* lwz R8, <#[R9]> */
		/* 821CEAB0h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821CEAB0h case    9:*/		return 0x821CEAB4;
		  /* 821CEAB4h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 821CEAB4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821CEAB4h case   10:*/		return 0x821CEAB8;
		  /* 821CEAB8h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821CEAB8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821CEAD0;  }
		/* 821CEAB8h case   11:*/		return 0x821CEABC;
		  /* 821CEABCh */ case   12:  		/* lwz R7, <#[R3 + 12]> */
		/* 821CEABCh case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CEABCh case   12:*/		return 0x821CEAC0;
		  /* 821CEAC0h */ case   13:  		/* lwz R7, <#[R7 + 8]> */
		/* 821CEAC0h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821CEAC0h case   13:*/		return 0x821CEAC4;
		  /* 821CEAC4h */ case   14:  		/* rlwinm R7, R7, 0, 18, 24 */
		/* 821CEAC4h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R7,regs.R7);
		/* 821CEAC4h case   14:*/		return 0x821CEAC8;
		  /* 821CEAC8h */ case   15:  		/* cmplwi CR6, R7, 16000 */
		/* 821CEAC8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00003E80);
		/* 821CEAC8h case   15:*/		return 0x821CEACC;
		  /* 821CEACCh */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 821CEACCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821CEAD4;  }
		/* 821CEACCh case   16:*/		return 0x821CEAD0;
	}
	return 0x821CEAD0;
} // Block from 821CEA8Ch-821CEAD0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CEAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEAD0);
		  /* 821CEAD0h */ case    0:  		/* mr R3, R8 */
		/* 821CEAD0h case    0:*/		regs.R3 = regs.R8;
		/* 821CEAD0h case    0:*/		return 0x821CEAD4;
	}
	return 0x821CEAD4;
} // Block from 821CEAD0h-821CEAD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CEAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEAD4);
		  /* 821CEAD4h */ case    0:  		/* addi R10, R10, 1 */
		/* 821CEAD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CEAD4h case    0:*/		return 0x821CEAD8;
		  /* 821CEAD8h */ case    1:  		/* addi R9, R9, 4 */
		/* 821CEAD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821CEAD8h case    1:*/		return 0x821CEADC;
		  /* 821CEADCh */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 821CEADCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CEADCh case    2:*/		return 0x821CEAE0;
		  /* 821CEAE0h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 821CEAE0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821CEAB0;  }
		/* 821CEAE0h case    3:*/		return 0x821CEAE4;
		  /* 821CEAE4h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 821CEAE4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821CEAE4h case    4:*/		return 0x821CEAE8;
		  /* 821CEAE8h */ case    5:  		/* bc 12, CR6_EQ, 184 */
		/* 821CEAE8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CEBA0;  }
		/* 821CEAE8h case    5:*/		return 0x821CEAEC;
		  /* 821CEAECh */ case    6:  		/* li R4, 4 */
		/* 821CEAECh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821CEAECh case    6:*/		return 0x821CEAF0;
		  /* 821CEAF0h */ case    7:  		/* bl -356400 */
		/* 821CEAF0h case    7:*/		regs.LR = 0x821CEAF4; return 0x82177AC0;
		/* 821CEAF0h case    7:*/		return 0x821CEAF4;
		  /* 821CEAF4h */ case    8:  		/* li R4, 4 */
		/* 821CEAF4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821CEAF4h case    8:*/		return 0x821CEAF8;
		  /* 821CEAF8h */ case    9:  		/* mr R3, R31 */
		/* 821CEAF8h case    9:*/		regs.R3 = regs.R31;
		/* 821CEAF8h case    9:*/		return 0x821CEAFC;
		  /* 821CEAFCh */ case   10:  		/* bl -356412 */
		/* 821CEAFCh case   10:*/		regs.LR = 0x821CEB00; return 0x82177AC0;
		/* 821CEAFCh case   10:*/		return 0x821CEB00;
		  /* 821CEB00h */ case   11:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CEB00h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CEB00h case   11:*/		return 0x821CEB04;
		  /* 821CEB04h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821CEB04h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CEB04h case   12:*/		return 0x821CEB08;
		  /* 821CEB08h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 821CEB08h case   13:*/		if ( regs.CR[6].eq ) { return 0x821CEB34;  }
		/* 821CEB08h case   13:*/		return 0x821CEB0C;
		  /* 821CEB0Ch */ case   14:  		/* lwz R10, <#[R11 + 16]> */
		/* 821CEB0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821CEB0Ch case   14:*/		return 0x821CEB10;
		  /* 821CEB10h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821CEB10h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CEB10h case   15:*/		return 0x821CEB14;
		  /* 821CEB14h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 821CEB14h case   16:*/		if ( regs.CR[6].eq ) { return 0x821CEB2C;  }
		/* 821CEB14h case   16:*/		return 0x821CEB18;
		  /* 821CEB18h */ case   17:  		/* lwz R10, <#[R11]> */
		/* 821CEB18h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEB18h case   17:*/		return 0x821CEB1C;
		  /* 821CEB1Ch */ case   18:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821CEB1Ch case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821CEB1Ch case   18:*/		return 0x821CEB20;
		  /* 821CEB20h */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 821CEB20h case   19:*/		if ( regs.CR[0].eq ) { return 0x821CEB2C;  }
		/* 821CEB20h case   19:*/		return 0x821CEB24;
		  /* 821CEB24h */ case   20:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821CEB24h case   20:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821CEB24h case   20:*/		return 0x821CEB28;
		  /* 821CEB28h */ case   21:  		/* stw R10, <#[R11]> */
		/* 821CEB28h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEB28h case   21:*/		return 0x821CEB2C;
	}
	return 0x821CEB2C;
} // Block from 821CEAD4h-821CEB2Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB2C);
		  /* 821CEB2Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CEB2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CEB2Ch case    0:*/		return 0x821CEB30;
		  /* 821CEB30h */ case    1:  		/* b -44 */
		/* 821CEB30h case    1:*/		return 0x821CEB04;
		/* 821CEB30h case    1:*/		return 0x821CEB34;
	}
	return 0x821CEB34;
} // Block from 821CEB2Ch-821CEB34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB34);
		  /* 821CEB34h */ case    0:  		/* lwz R31, <#[R30 + 4]> */
		/* 821CEB34h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821CEB34h case    0:*/		return 0x821CEB38;
		  /* 821CEB38h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821CEB38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CEB38h case    1:*/		return 0x821CEB3C;
		  /* 821CEB3Ch */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821CEB3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821CEB60;  }
		/* 821CEB3Ch case    2:*/		return 0x821CEB40;
		  /* 821CEB40h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CEB40h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CEB40h case    3:*/		return 0x821CEB44;
		  /* 821CEB44h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821CEB44h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CEB44h case    4:*/		return 0x821CEB48;
		  /* 821CEB48h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821CEB48h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CEB58;  }
		/* 821CEB48h case    5:*/		return 0x821CEB4C;
		  /* 821CEB4Ch */ case    6:  		/* mr R5, R28 */
		/* 821CEB4Ch case    6:*/		regs.R5 = regs.R28;
		/* 821CEB4Ch case    6:*/		return 0x821CEB50;
		  /* 821CEB50h */ case    7:  		/* mr R3, R29 */
		/* 821CEB50h case    7:*/		regs.R3 = regs.R29;
		/* 821CEB50h case    7:*/		return 0x821CEB54;
		  /* 821CEB54h */ case    8:  		/* bl -12684 */
		/* 821CEB54h case    8:*/		regs.LR = 0x821CEB58; return 0x821CB9C8;
		/* 821CEB54h case    8:*/		return 0x821CEB58;
	}
	return 0x821CEB58;
} // Block from 821CEB34h-821CEB58h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB58);
		  /* 821CEB58h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CEB58h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CEB58h case    0:*/		return 0x821CEB5C;
		  /* 821CEB5Ch */ case    1:  		/* b -36 */
		/* 821CEB5Ch case    1:*/		return 0x821CEB38;
		/* 821CEB5Ch case    1:*/		return 0x821CEB60;
	}
	return 0x821CEB60;
} // Block from 821CEB58h-821CEB60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB60);
		  /* 821CEB60h */ case    0:  		/* lwz R10, <#[R30 + 12]> */
		/* 821CEB60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821CEB60h case    0:*/		return 0x821CEB64;
		  /* 821CEB64h */ case    1:  		/* andi. R11, R10, 52428 */
		/* 821CEB64h case    1:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R10,0xCCCC);
		/* 821CEB64h case    1:*/		return 0x821CEB68;
		  /* 821CEB68h */ case    2:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821CEB68h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821CEB68h case    2:*/		return 0x821CEB6C;
		  /* 821CEB6Ch */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 821CEB6Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CEB6Ch case    3:*/		return 0x821CEB70;
		  /* 821CEB70h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821CEB70h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821CEB7C;  }
		/* 821CEB70h case    4:*/		return 0x821CEB74;
		  /* 821CEB74h */ case    5:  		/* li R11, 0 */
		/* 821CEB74h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CEB74h case    5:*/		return 0x821CEB78;
		  /* 821CEB78h */ case    6:  		/* b 16 */
		/* 821CEB78h case    6:*/		return 0x821CEB88;
		/* 821CEB78h case    6:*/		return 0x821CEB7C;
	}
	return 0x821CEB7C;
} // Block from 821CEB60h-821CEB7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB7C);
		  /* 821CEB7Ch */ case    0:  		/* mr R10, R11 */
		/* 821CEB7Ch case    0:*/		regs.R10 = regs.R11;
		/* 821CEB7Ch case    0:*/		return 0x821CEB80;
		  /* 821CEB80h */ case    1:  		/* li R11, 1 */
		/* 821CEB80h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CEB80h case    1:*/		return 0x821CEB84;
		  /* 821CEB84h */ case    2:  		/* sth R10, <#[R30 + 14]> */
		/* 821CEB84h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x0000000E) );
		/* 821CEB84h case    2:*/		return 0x821CEB88;
	}
	return 0x821CEB88;
} // Block from 821CEB7Ch-821CEB88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CEB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEB88);
		  /* 821CEB88h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CEB88h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CEB88h case    0:*/		return 0x821CEB8C;
		  /* 821CEB8Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821CEB8Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CEBA0;  }
		/* 821CEB8Ch case    1:*/		return 0x821CEB90;
		  /* 821CEB90h */ case    2:  		/* mr R5, R28 */
		/* 821CEB90h case    2:*/		regs.R5 = regs.R28;
		/* 821CEB90h case    2:*/		return 0x821CEB94;
		  /* 821CEB94h */ case    3:  		/* mr R4, R30 */
		/* 821CEB94h case    3:*/		regs.R4 = regs.R30;
		/* 821CEB94h case    3:*/		return 0x821CEB98;
		  /* 821CEB98h */ case    4:  		/* mr R3, R29 */
		/* 821CEB98h case    4:*/		regs.R3 = regs.R29;
		/* 821CEB98h case    4:*/		return 0x821CEB9C;
		  /* 821CEB9Ch */ case    5:  		/* bl -12756 */
		/* 821CEB9Ch case    5:*/		regs.LR = 0x821CEBA0; return 0x821CB9C8;
		/* 821CEB9Ch case    5:*/		return 0x821CEBA0;
	}
	return 0x821CEBA0;
} // Block from 821CEB88h-821CEBA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CEBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEBA0);
		  /* 821CEBA0h */ case    0:  		/* addi R1, R1, 128 */
		/* 821CEBA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821CEBA0h case    0:*/		return 0x821CEBA4;
		  /* 821CEBA4h */ case    1:  		/* b -1300732 */
		/* 821CEBA4h case    1:*/		return 0x820912A8;
		/* 821CEBA4h case    1:*/		return 0x821CEBA8;
	}
	return 0x821CEBA8;
} // Block from 821CEBA0h-821CEBA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEBA8);
		  /* 821CEBA8h */ case    0:  		/* mfspr R12, LR */
		/* 821CEBA8h case    0:*/		regs.R12 = regs.LR;
		/* 821CEBA8h case    0:*/		return 0x821CEBAC;
		  /* 821CEBACh */ case    1:  		/* bl -1300824 */
		/* 821CEBACh case    1:*/		regs.LR = 0x821CEBB0; return 0x82091254;
		/* 821CEBACh case    1:*/		return 0x821CEBB0;
		  /* 821CEBB0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CEBB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CEBB0h case    2:*/		return 0x821CEBB4;
		  /* 821CEBB4h */ case    3:  		/* rlwinm R11, R5, 2, 0, 29 */
		/* 821CEBB4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R5);
		/* 821CEBB4h case    3:*/		return 0x821CEBB8;
		  /* 821CEBB8h */ case    4:  		/* lwz R10, <#[R4 + 12]> */
		/* 821CEBB8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CEBB8h case    4:*/		return 0x821CEBBC;
		  /* 821CEBBCh */ case    5:  		/* mr R28, R3 */
		/* 821CEBBCh case    5:*/		regs.R28 = regs.R3;
		/* 821CEBBCh case    5:*/		return 0x821CEBC0;
		  /* 821CEBC0h */ case    6:  		/* slw R11, R6, R11 */
		/* 821CEBC0h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821CEBC0h case    6:*/		return 0x821CEBC4;
		  /* 821CEBC4h */ case    7:  		/* and R9, R10, R11 */
		/* 821CEBC4h case    7:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821CEBC4h case    7:*/		return 0x821CEBC8;
		  /* 821CEBC8h */ case    8:  		/* mr R29, R4 */
		/* 821CEBC8h case    8:*/		regs.R29 = regs.R4;
		/* 821CEBC8h case    8:*/		return 0x821CEBCC;
		  /* 821CEBCCh */ case    9:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821CEBCCh case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821CEBCCh case    9:*/		return 0x821CEBD0;
		  /* 821CEBD0h */ case   10:  		/* mr R30, R5 */
		/* 821CEBD0h case   10:*/		regs.R30 = regs.R5;
		/* 821CEBD0h case   10:*/		return 0x821CEBD4;
		  /* 821CEBD4h */ case   11:  		/* mr R27, R7 */
		/* 821CEBD4h case   11:*/		regs.R27 = regs.R7;
		/* 821CEBD4h case   11:*/		return 0x821CEBD8;
		  /* 821CEBD8h */ case   12:  		/* cmplw CR6, R9, R11 */
		/* 821CEBD8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821CEBD8h case   12:*/		return 0x821CEBDC;
		  /* 821CEBDCh */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821CEBDCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CEBE8;  }
		/* 821CEBDCh case   13:*/		return 0x821CEBE0;
		  /* 821CEBE0h */ case   14:  		/* li R11, 0 */
		/* 821CEBE0h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CEBE0h case   14:*/		return 0x821CEBE4;
		  /* 821CEBE4h */ case   15:  		/* b 16 */
		/* 821CEBE4h case   15:*/		return 0x821CEBF4;
		/* 821CEBE4h case   15:*/		return 0x821CEBE8;
	}
	return 0x821CEBE8;
} // Block from 821CEBA8h-821CEBE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CEBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEBE8);
		  /* 821CEBE8h */ case    0:  		/* or R10, R10, R11 */
		/* 821CEBE8h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821CEBE8h case    0:*/		return 0x821CEBEC;
		  /* 821CEBECh */ case    1:  		/* li R11, 1 */
		/* 821CEBECh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CEBECh case    1:*/		return 0x821CEBF0;
		  /* 821CEBF0h */ case    2:  		/* sth R10, <#[R29 + 14]> */
		/* 821CEBF0h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R29 + 0x0000000E) );
		/* 821CEBF0h case    2:*/		return 0x821CEBF4;
	}
	return 0x821CEBF4;
} // Block from 821CEBE8h-821CEBF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CEBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEBF4);
		  /* 821CEBF4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CEBF4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CEBF4h case    0:*/		return 0x821CEBF8;
		  /* 821CEBF8h */ case    1:  		/* bc 12, CR0_EQ, 172 */
		/* 821CEBF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CECA4;  }
		/* 821CEBF8h case    1:*/		return 0x821CEBFC;
		  /* 821CEBFCh */ case    2:  		/* lwz R31, <#[R29 + 16]> */
		/* 821CEBFCh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000010) );
		/* 821CEBFCh case    2:*/		return 0x821CEC00;
		  /* 821CEC00h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821CEC00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CEC00h case    3:*/		return 0x821CEC04;
		  /* 821CEC04h */ case    4:  		/* bc 12, CR6_EQ, 116 */
		/* 821CEC04h case    4:*/		if ( regs.CR[6].eq ) { return 0x821CEC78;  }
		/* 821CEC04h case    4:*/		return 0x821CEC08;
		  /* 821CEC08h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 821CEC08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CEC08h case    5:*/		return 0x821CEC0C;
		  /* 821CEC0Ch */ case    6:  		/* cmpwi CR6, R11, 1 */
		/* 821CEC0Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821CEC0Ch case    6:*/		return 0x821CEC10;
		  /* 821CEC10h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821CEC10h case    7:*/		if ( regs.CR[6].eq ) { return 0x821CEC20;  }
		/* 821CEC10h case    7:*/		return 0x821CEC14;
		  /* 821CEC14h */ case    8:  		/* lwz R31, <#[R31 + 4]> */
		/* 821CEC14h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821CEC14h case    8:*/		return 0x821CEC18;
		  /* 821CEC18h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821CEC18h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CEC18h case    9:*/		return 0x821CEC1C;
		  /* 821CEC1Ch */ case   10:  		/* bc 4, CR6_EQ, -20 */
		/* 821CEC1Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CEC08;  }
		/* 821CEC1Ch case   10:*/		return 0x821CEC20;
	}
	return 0x821CEC20;
} // Block from 821CEBF4h-821CEC20h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CEC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEC20);
		  /* 821CEC20h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821CEC20h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CEC20h case    0:*/		return 0x821CEC24;
		  /* 821CEC24h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821CEC24h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CEC78;  }
		/* 821CEC24h case    1:*/		return 0x821CEC28;
		  /* 821CEC28h */ case    2:  		/* addi R5, R1, 88 */
		/* 821CEC28h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821CEC28h case    2:*/		return 0x821CEC2C;
		  /* 821CEC2Ch */ case    3:  		/* addi R4, R1, 80 */
		/* 821CEC2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821CEC2Ch case    3:*/		return 0x821CEC30;
		  /* 821CEC30h */ case    4:  		/* mr R3, R30 */
		/* 821CEC30h case    4:*/		regs.R3 = regs.R30;
		/* 821CEC30h case    4:*/		return 0x821CEC34;
		  /* 821CEC34h */ case    5:  		/* bl 338660 */
		/* 821CEC34h case    5:*/		regs.LR = 0x821CEC38; return 0x82221718;
		/* 821CEC34h case    5:*/		return 0x821CEC38;
		  /* 821CEC38h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CEC38h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CEC38h case    6:*/		return 0x821CEC3C;
		  /* 821CEC3Ch */ case    7:  		/* bc 12, CR0_EQ, 60 */
		/* 821CEC3Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821CEC78;  }
		/* 821CEC3Ch case    7:*/		return 0x821CEC40;
		  /* 821CEC40h */ case    8:  		/* addi R11, R30, 1 */
		/* 821CEC40h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x1);
		/* 821CEC40h case    8:*/		return 0x821CEC44;
		  /* 821CEC44h */ case    9:  		/* lfd FR0, <#[R1 + 80]> */
		/* 821CEC44h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821CEC44h case    9:*/		return 0x821CEC48;
		  /* 821CEC48h */ case   10:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821CEC48h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821CEC48h case   10:*/		return 0x821CEC4C;
		  /* 821CEC4Ch */ case   11:  		/* lfdx FR13, <#[R11 + R31]> */
		/* 821CEC4Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CEC4Ch case   11:*/		return 0x821CEC50;
		  /* 821CEC50h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821CEC50h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821CEC50h case   12:*/		return 0x821CEC54;
		  /* 821CEC54h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821CEC54h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821CEC5C;  }
		/* 821CEC54h case   13:*/		return 0x821CEC58;
		  /* 821CEC58h */ case   14:  		/* stfdx FR0, <#[R11 + R31]> */
		/* 821CEC58h case   14:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CEC58h case   14:*/		return 0x821CEC5C;
	}
	return 0x821CEC5C;
} // Block from 821CEC20h-821CEC5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CEC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEC5C);
		  /* 821CEC5Ch */ case    0:  		/* addi R11, R30, 5 */
		/* 821CEC5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x5);
		/* 821CEC5Ch case    0:*/		return 0x821CEC60;
		  /* 821CEC60h */ case    1:  		/* lfd FR0, <#[R1 + 88]> */
		/* 821CEC60h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821CEC60h case    1:*/		return 0x821CEC64;
		  /* 821CEC64h */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821CEC64h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821CEC64h case    2:*/		return 0x821CEC68;
		  /* 821CEC68h */ case    3:  		/* lfdx FR13, <#[R11 + R31]> */
		/* 821CEC68h case    3:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CEC68h case    3:*/		return 0x821CEC6C;
		  /* 821CEC6Ch */ case    4:  		/* fcmpu CR6, FR0, FR13 */
		/* 821CEC6Ch case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821CEC6Ch case    4:*/		return 0x821CEC70;
		  /* 821CEC70h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 821CEC70h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821CEC78;  }
		/* 821CEC70h case    5:*/		return 0x821CEC74;
		  /* 821CEC74h */ case    6:  		/* stfdx FR0, <#[R11 + R31]> */
		/* 821CEC74h case    6:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CEC74h case    6:*/		return 0x821CEC78;
	}
	return 0x821CEC78;
} // Block from 821CEC5Ch-821CEC78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CEC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEC78);
		  /* 821CEC78h */ case    0:  		/* lwz R31, <#[R29 + 4]> */
		/* 821CEC78h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821CEC78h case    0:*/		return 0x821CEC7C;
		  /* 821CEC7Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821CEC7Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CEC7Ch case    1:*/		return 0x821CEC80;
		  /* 821CEC80h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821CEC80h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CECA4;  }
		/* 821CEC80h case    2:*/		return 0x821CEC84;
		  /* 821CEC84h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CEC84h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CEC84h case    3:*/		return 0x821CEC88;
		  /* 821CEC88h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821CEC88h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CEC88h case    4:*/		return 0x821CEC8C;
		  /* 821CEC8Ch */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821CEC8Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821CEC9C;  }
		/* 821CEC8Ch case    5:*/		return 0x821CEC90;
		  /* 821CEC90h */ case    6:  		/* mr R5, R27 */
		/* 821CEC90h case    6:*/		regs.R5 = regs.R27;
		/* 821CEC90h case    6:*/		return 0x821CEC94;
		  /* 821CEC94h */ case    7:  		/* mr R3, R28 */
		/* 821CEC94h case    7:*/		regs.R3 = regs.R28;
		/* 821CEC94h case    7:*/		return 0x821CEC98;
		  /* 821CEC98h */ case    8:  		/* bl -13008 */
		/* 821CEC98h case    8:*/		regs.LR = 0x821CEC9C; return 0x821CB9C8;
		/* 821CEC98h case    8:*/		return 0x821CEC9C;
	}
	return 0x821CEC9C;
} // Block from 821CEC78h-821CEC9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CEC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEC9C);
		  /* 821CEC9Ch */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CEC9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CEC9Ch case    0:*/		return 0x821CECA0;
		  /* 821CECA0h */ case    1:  		/* b -36 */
		/* 821CECA0h case    1:*/		return 0x821CEC7C;
		/* 821CECA0h case    1:*/		return 0x821CECA4;
	}
	return 0x821CECA4;
} // Block from 821CEC9Ch-821CECA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CECA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CECA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CECA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CECA4);
		  /* 821CECA4h */ case    0:  		/* addi R1, R1, 144 */
		/* 821CECA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CECA4h case    0:*/		return 0x821CECA8;
		  /* 821CECA8h */ case    1:  		/* b -1300996 */
		/* 821CECA8h case    1:*/		return 0x820912A4;
		/* 821CECA8h case    1:*/		return 0x821CECAC;
		  /* 821CECACh */ case    2:  		/* nop */
		/* 821CECACh case    2:*/		cpu::op::nop();
		/* 821CECACh case    2:*/		return 0x821CECB0;
	}
	return 0x821CECB0;
} // Block from 821CECA4h-821CECB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CECB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CECB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CECB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CECB0);
		  /* 821CECB0h */ case    0:  		/* mfspr R12, LR */
		/* 821CECB0h case    0:*/		regs.R12 = regs.LR;
		/* 821CECB0h case    0:*/		return 0x821CECB4;
		  /* 821CECB4h */ case    1:  		/* bl -1301132 */
		/* 821CECB4h case    1:*/		regs.LR = 0x821CECB8; return 0x82091228;
		/* 821CECB4h case    1:*/		return 0x821CECB8;
		  /* 821CECB8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821CECB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821CECB8h case    2:*/		return 0x821CECBC;
		  /* 821CECBCh */ case    3:  		/* mr R24, R3 */
		/* 821CECBCh case    3:*/		regs.R24 = regs.R3;
		/* 821CECBCh case    3:*/		return 0x821CECC0;
		  /* 821CECC0h */ case    4:  		/* mr R20, R4 */
		/* 821CECC0h case    4:*/		regs.R20 = regs.R4;
		/* 821CECC0h case    4:*/		return 0x821CECC4;
		  /* 821CECC4h */ case    5:  		/* mr R16, R5 */
		/* 821CECC4h case    5:*/		regs.R16 = regs.R5;
		/* 821CECC4h case    5:*/		return 0x821CECC8;
		  /* 821CECC8h */ case    6:  		/* mr R23, R6 */
		/* 821CECC8h case    6:*/		regs.R23 = regs.R6;
		/* 821CECC8h case    6:*/		return 0x821CECCC;
		  /* 821CECCCh */ case    7:  		/* mr R21, R7 */
		/* 821CECCCh case    7:*/		regs.R21 = regs.R7;
		/* 821CECCCh case    7:*/		return 0x821CECD0;
		  /* 821CECD0h */ case    8:  		/* mr R22, R8 */
		/* 821CECD0h case    8:*/		regs.R22 = regs.R8;
		/* 821CECD0h case    8:*/		return 0x821CECD4;
		  /* 821CECD4h */ case    9:  		/* mr R18, R9 */
		/* 821CECD4h case    9:*/		regs.R18 = regs.R9;
		/* 821CECD4h case    9:*/		return 0x821CECD8;
		  /* 821CECD8h */ case   10:  		/* li R30, 0 */
		/* 821CECD8h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CECD8h case   10:*/		return 0x821CECDC;
		  /* 821CECDCh */ case   11:  		/* addi R17, R4, 4 */
		/* 821CECDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R4,0x4);
		/* 821CECDCh case   11:*/		return 0x821CECE0;
		  /* 821CECE0h */ case   12:  		/* lwz R29, <#[R17]> */
		/* 821CECE0h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R17 + 0x00000000) );
		/* 821CECE0h case   12:*/		return 0x821CECE4;
		  /* 821CECE4h */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 821CECE4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CECE4h case   13:*/		return 0x821CECE8;
		  /* 821CECE8h */ case   14:  		/* bc 12, CR6_EQ, 1232 */
		/* 821CECE8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821CF1B8;  }
		/* 821CECE8h case   14:*/		return 0x821CECEC;
		  /* 821CECECh */ case   15:  		/* lwz R19, <#[R29 + 16]> */
		/* 821CECECh case   15:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R29 + 0x00000010) );
		/* 821CECECh case   15:*/		return 0x821CECF0;
		  /* 821CECF0h */ case   16:  		/* cmplwi CR6, R19, 0 */
		/* 821CECF0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821CECF0h case   16:*/		return 0x821CECF4;
		  /* 821CECF4h */ case   17:  		/* bc 12, CR6_EQ, 1200 */
		/* 821CECF4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821CF1A4;  }
		/* 821CECF4h case   17:*/		return 0x821CECF8;
		  /* 821CECF8h */ case   18:  		/* lwz R8, <#[R29]> */
		/* 821CECF8h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 821CECF8h case   18:*/		return 0x821CECFC;
		  /* 821CECFCh */ case   19:  		/* rlwinm. R11, R8, 7, 29, 31 */
		/* 821CECFCh case   19:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R11,regs.R8);
		/* 821CECFCh case   19:*/		return 0x821CED00;
		  /* 821CED00h */ case   20:  		/* bc 12, CR0_EQ, 1188 */
		/* 821CED00h case   20:*/		if ( regs.CR[0].eq ) { return 0x821CF1A4;  }
		/* 821CED00h case   20:*/		return 0x821CED04;
		  /* 821CED04h */ case   21:  		/* li R10, 0 */
		/* 821CED04h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CED04h case   21:*/		return 0x821CED08;
		  /* 821CED08h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821CED08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CED08h case   22:*/		return 0x821CED0C;
		  /* 821CED0Ch */ case   23:  		/* bc 12, CR6_EQ, 52 */
		/* 821CED0Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821CED40;  }
		/* 821CED0Ch case   23:*/		return 0x821CED10;
		  /* 821CED10h */ case   24:  		/* rlwinm R9, R8, 27, 24, 31 */
		/* 821CED10h case   24:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R8);
		/* 821CED10h case   24:*/		return 0x821CED14;
		  /* 821CED14h */ case   25:  		/* li R11, 0 */
		/* 821CED14h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CED14h case   25:*/		return 0x821CED18;
		  /* 821CED18h */ case   26:  		/* srw R7, R9, R11 */
		/* 821CED18h case   26:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 821CED18h case   26:*/		return 0x821CED1C;
		  /* 821CED1Ch */ case   27:  		/* rlwinm R7, R7, 0, 30, 31 */
		/* 821CED1Ch case   27:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R7);
		/* 821CED1Ch case   27:*/		return 0x821CED20;
		  /* 821CED20h */ case   28:  		/* cmpw CR6, R16, R7 */
		/* 821CED20h case   28:*/		cpu::op::cmpw<6>(regs,regs.R16,regs.R7);
		/* 821CED20h case   28:*/		return 0x821CED24;
		  /* 821CED24h */ case   29:  		/* bc 12, CR6_EQ, 84 */
		/* 821CED24h case   29:*/		if ( regs.CR[6].eq ) { return 0x821CED78;  }
		/* 821CED24h case   29:*/		return 0x821CED28;
		  /* 821CED28h */ case   30:  		/* lwz R7, <#[R29]> */
		/* 821CED28h case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 821CED28h case   30:*/		return 0x821CED2C;
		  /* 821CED2Ch */ case   31:  		/* addi R10, R10, 1 */
		/* 821CED2Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CED2Ch case   31:*/		return 0x821CED30;
		  /* 821CED30h */ case   32:  		/* addi R11, R11, 2 */
		/* 821CED30h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821CED30h case   32:*/		return 0x821CED34;
		  /* 821CED34h */ case   33:  		/* rlwinm R7, R7, 7, 29, 31 */
		/* 821CED34h case   33:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R7,regs.R7);
		/* 821CED34h case   33:*/		return 0x821CED38;
		  /* 821CED38h */ case   34:  		/* cmplw CR6, R10, R7 */
		/* 821CED38h case   34:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821CED38h case   34:*/		return 0x821CED3C;
		  /* 821CED3Ch */ case   35:  		/* bc 12, CR6_LT, -36 */
		/* 821CED3Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x821CED18;  }
		/* 821CED3Ch case   35:*/		return 0x821CED40;
	}
	return 0x821CED40;
} // Block from 821CECB0h-821CED40h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821CED40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CED40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CED40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CED40);
		  /* 821CED40h */ case    0:  		/* li R11, 0 */
		/* 821CED40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CED40h case    0:*/		return 0x821CED44;
		  /* 821CED44h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CED44h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CED44h case    1:*/		return 0x821CED48;
		  /* 821CED48h */ case    2:  		/* bc 12, CR0_EQ, 1116 */
		/* 821CED48h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CF1A4;  }
		/* 821CED48h case    2:*/		return 0x821CED4C;
		  /* 821CED4Ch */ case    3:  		/* cmplwi CR6, R22, 0 */
		/* 821CED4Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821CED4Ch case    3:*/		return 0x821CED50;
		  /* 821CED50h */ case    4:  		/* bc 12, CR6_EQ, 208 */
		/* 821CED50h case    4:*/		if ( regs.CR[6].eq ) { return 0x821CEE20;  }
		/* 821CED50h case    4:*/		return 0x821CED54;
		  /* 821CED54h */ case    5:  		/* rlwinm. R11, R22, 0, 27, 28 */
		/* 821CED54h case    5:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R11,regs.R22);
		/* 821CED54h case    5:*/		return 0x821CED58;
		  /* 821CED58h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821CED58h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CEDA0;  }
		/* 821CED58h case    6:*/		return 0x821CED5C;
		  /* 821CED5Ch */ case    7:  		/* rlwinm. R10, R22, 0, 30, 30 */
		/* 821CED5Ch case    7:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R22);
		/* 821CED5Ch case    7:*/		return 0x821CED60;
		  /* 821CED60h */ case    8:  		/* rlwinm R11, R8, 0, 27, 31 */
		/* 821CED60h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R8);
		/* 821CED60h case    8:*/		return 0x821CED64;
		  /* 821CED64h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 821CED64h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CED80;  }
		/* 821CED64h case    9:*/		return 0x821CED68;
		  /* 821CED68h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CED68h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CED68h case   10:*/		return 0x821CED6C;
		  /* 821CED6Ch */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 821CED6Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821CED80;  }
		/* 821CED6Ch case   11:*/		return 0x821CED70;
		  /* 821CED70h */ case   12:  		/* li R11, 0 */
		/* 821CED70h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CED70h case   12:*/		return 0x821CED74;
		  /* 821CED74h */ case   13:  		/* b 36 */
		/* 821CED74h case   13:*/		return 0x821CED98;
		/* 821CED74h case   13:*/		return 0x821CED78;
	}
	return 0x821CED78;
} // Block from 821CED40h-821CED78h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CED78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CED78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CED78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CED78);
		  /* 821CED78h */ case    0:  		/* li R11, 1 */
		/* 821CED78h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CED78h case    0:*/		return 0x821CED7C;
		  /* 821CED7Ch */ case    1:  		/* b -56 */
		/* 821CED7Ch case    1:*/		return 0x821CED44;
		/* 821CED7Ch case    1:*/		return 0x821CED80;
	}
	return 0x821CED80;
} // Block from 821CED78h-821CED80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CED80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CED80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CED80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CED80);
		  /* 821CED80h */ case    0:  		/* rlwinm. R10, R22, 0, 29, 29 */
		/* 821CED80h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R22);
		/* 821CED80h case    0:*/		return 0x821CED84;
		  /* 821CED84h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CED84h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CED94;  }
		/* 821CED84h case    1:*/		return 0x821CED88;
		  /* 821CED88h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CED88h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CED88h case    2:*/		return 0x821CED8C;
		  /* 821CED8Ch */ case    3:  		/* li R11, 0 */
		/* 821CED8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CED8Ch case    3:*/		return 0x821CED90;
		  /* 821CED90h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821CED90h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CED98;  }
		/* 821CED90h case    4:*/		return 0x821CED94;
	}
	return 0x821CED94;
} // Block from 821CED80h-821CED94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CED94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CED94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CED94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CED94);
		  /* 821CED94h */ case    0:  		/* li R11, 1 */
		/* 821CED94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CED94h case    0:*/		return 0x821CED98;
	}
	return 0x821CED98;
} // Block from 821CED94h-821CED98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CED98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CED98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CED98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CED98);
		  /* 821CED98h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CED98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CED98h case    0:*/		return 0x821CED9C;
		  /* 821CED9Ch */ case    1:  		/* bc 4, CR0_EQ, 132 */
		/* 821CED9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CEE20;  }
		/* 821CED9Ch case    1:*/		return 0x821CEDA0;
	}
	return 0x821CEDA0;
} // Block from 821CED98h-821CEDA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CEDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEDA0);
		  /* 821CEDA0h */ case    0:  		/* li R6, 1 */
		/* 821CEDA0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CEDA0h case    0:*/		return 0x821CEDA4;
		  /* 821CEDA4h */ case    1:  		/* lwz R4, <#[R20 + 28]> */
		/* 821CEDA4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x0000001C) );
		/* 821CEDA4h case    1:*/		return 0x821CEDA8;
		  /* 821CEDA8h */ case    2:  		/* li R5, 0 */
		/* 821CEDA8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CEDA8h case    2:*/		return 0x821CEDAC;
		  /* 821CEDACh */ case    3:  		/* mr R3, R24 */
		/* 821CEDACh case    3:*/		regs.R3 = regs.R24;
		/* 821CEDACh case    3:*/		return 0x821CEDB0;
		  /* 821CEDB0h */ case    4:  		/* bl 351568 */
		/* 821CEDB0h case    4:*/		regs.LR = 0x821CEDB4; return 0x82224B00;
		/* 821CEDB0h case    4:*/		return 0x821CEDB4;
		  /* 821CEDB4h */ case    5:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 821CEDB4h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 821CEDB4h case    5:*/		return 0x821CEDB8;
		  /* 821CEDB8h */ case    6:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821CEDB8h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821CEDB8h case    6:*/		return 0x821CEDBC;
		  /* 821CEDBCh */ case    7:  		/* addi R11, R11, 36 */
		/* 821CEDBCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821CEDBCh case    7:*/		return 0x821CEDC0;
		  /* 821CEDC0h */ case    8:  		/* addi R10, R10, 36 */
		/* 821CEDC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821CEDC0h case    8:*/		return 0x821CEDC4;
		  /* 821CEDC4h */ case    9:  		/* addi R8, R11, -36 */
		/* 821CEDC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821CEDC4h case    9:*/		return 0x821CEDC8;
		  /* 821CEDC8h */ case   10:  		/* addi R28, R10, -36 */
		/* 821CEDC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFDC);
		/* 821CEDC8h case   10:*/		return 0x821CEDCC;
		  /* 821CEDCCh */ case   11:  		/* addi R9, R10, 4 */
		/* 821CEDCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CEDCCh case   11:*/		return 0x821CEDD0;
		  /* 821CEDD0h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821CEDD0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEDD0h case   12:*/		return 0x821CEDD4;
		  /* 821CEDD4h */ case   13:  		/* mr R31, R3 */
		/* 821CEDD4h case   13:*/		regs.R31 = regs.R3;
		/* 821CEDD4h case   13:*/		return 0x821CEDD8;
		  /* 821CEDD8h */ case   14:  		/* mr R6, R22 */
		/* 821CEDD8h case   14:*/		regs.R6 = regs.R22;
		/* 821CEDD8h case   14:*/		return 0x821CEDDC;
		  /* 821CEDDCh */ case   15:  		/* mr R5, R21 */
		/* 821CEDDCh case   15:*/		regs.R5 = regs.R21;
		/* 821CEDDCh case   15:*/		return 0x821CEDE0;
		  /* 821CEDE0h */ case   16:  		/* mr R4, R23 */
		/* 821CEDE0h case   16:*/		regs.R4 = regs.R23;
		/* 821CEDE0h case   16:*/		return 0x821CEDE4;
		  /* 821CEDE4h */ case   17:  		/* mr R3, R24 */
		/* 821CEDE4h case   17:*/		regs.R3 = regs.R24;
		/* 821CEDE4h case   17:*/		return 0x821CEDE8;
		  /* 821CEDE8h */ case   18:  		/* stw R7, <#[R10]> */
		/* 821CEDE8h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821CEDE8h case   18:*/		return 0x821CEDEC;
		  /* 821CEDECh */ case   19:  		/* lwz R7, <#[R11]> */
		/* 821CEDECh case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEDECh case   19:*/		return 0x821CEDF0;
		  /* 821CEDF0h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CEDF0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CEDF0h case   20:*/		return 0x821CEDF4;
		  /* 821CEDF4h */ case   21:  		/* stw R28, <#[R7]> */
		/* 821CEDF4h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 821CEDF4h case   21:*/		return 0x821CEDF8;
		  /* 821CEDF8h */ case   22:  		/* stw R8, <#[R10 + 4]> */
		/* 821CEDF8h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821CEDF8h case   22:*/		return 0x821CEDFC;
		  /* 821CEDFCh */ case   23:  		/* stw R9, <#[R11]> */
		/* 821CEDFCh case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEDFCh case   23:*/		return 0x821CEE00;
		  /* 821CEE00h */ case   24:  		/* bl -355480 */
		/* 821CEE00h case   24:*/		regs.LR = 0x821CEE04; return 0x82178168;
		/* 821CEE00h case   24:*/		return 0x821CEE04;
		  /* 821CEE04h */ case   25:  		/* mr R4, R3 */
		/* 821CEE04h case   25:*/		regs.R4 = regs.R3;
		/* 821CEE04h case   25:*/		return 0x821CEE08;
		  /* 821CEE08h */ case   26:  		/* mr R3, R31 */
		/* 821CEE08h case   26:*/		regs.R3 = regs.R31;
		/* 821CEE08h case   26:*/		return 0x821CEE0C;
		  /* 821CEE0Ch */ case   27:  		/* bl -355396 */
		/* 821CEE0Ch case   27:*/		regs.LR = 0x821CEE10; return 0x821781C8;
		/* 821CEE0Ch case   27:*/		return 0x821CEE10;
		  /* 821CEE10h */ case   28:  		/* stw R3, <#[R31 + 44]> */
		/* 821CEE10h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821CEE10h case   28:*/		return 0x821CEE14;
		  /* 821CEE14h */ case   29:  		/* mr R23, R31 */
		/* 821CEE14h case   29:*/		regs.R23 = regs.R31;
		/* 821CEE14h case   29:*/		return 0x821CEE18;
		  /* 821CEE18h */ case   30:  		/* li R21, 0 */
		/* 821CEE18h case   30:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821CEE18h case   30:*/		return 0x821CEE1C;
		  /* 821CEE1Ch */ case   31:  		/* li R22, 0 */
		/* 821CEE1Ch case   31:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821CEE1Ch case   31:*/		return 0x821CEE20;
	}
	return 0x821CEE20;
} // Block from 821CEDA0h-821CEE20h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821CEE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEE20);
		  /* 821CEE20h */ case    0:  		/* lwz R9, <#[R29]> */
		/* 821CEE20h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821CEE20h case    0:*/		return 0x821CEE24;
		  /* 821CEE24h */ case    1:  		/* rlwinm R11, R9, 7, 29, 31 */
		/* 821CEE24h case    1:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R9);
		/* 821CEE24h case    1:*/		return 0x821CEE28;
		  /* 821CEE28h */ case    2:  		/* addic. R10, R11, -1 */
		/* 821CEE28h case    2:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821CEE28h case    2:*/		return 0x821CEE2C;
		  /* 821CEE2Ch */ case    3:  		/* bc 4, CR0_EQ, 400 */
		/* 821CEE2Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CEFBC;  }
		/* 821CEE2Ch case    3:*/		return 0x821CEE30;
		  /* 821CEE30h */ case    4:  		/* lwz R11, <#[R19 + 8]> */
		/* 821CEE30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821CEE30h case    4:*/		return 0x821CEE34;
		  /* 821CEE34h */ case    5:  		/* rlwinm R31, R11, 25, 25, 31 */
		/* 821CEE34h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R31,regs.R11);
		/* 821CEE34h case    5:*/		return 0x821CEE38;
		  /* 821CEE38h */ case    6:  		/* cmplwi CR6, R31, 112 */
		/* 821CEE38h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000070);
		/* 821CEE38h case    6:*/		return 0x821CEE3C;
		  /* 821CEE3Ch */ case    7:  		/* bc 4, CR6_EQ, 48 */
		/* 821CEE3Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CEE6C;  }
		/* 821CEE3Ch case    7:*/		return 0x821CEE40;
		  /* 821CEE40h */ case    8:  		/* lwz R11, <#[R20 + 28]> */
		/* 821CEE40h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 821CEE40h case    8:*/		return 0x821CEE44;
		  /* 821CEE44h */ case    9:  		/* lwz R10, <#[R19 + 28]> */
		/* 821CEE44h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000001C) );
		/* 821CEE44h case    9:*/		return 0x821CEE48;
		  /* 821CEE48h */ case   10:  		/* cmpw CR6, R10, R11 */
		/* 821CEE48h case   10:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821CEE48h case   10:*/		return 0x821CEE4C;
		  /* 821CEE4Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 821CEE4Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CEE6C;  }
		/* 821CEE4Ch case   11:*/		return 0x821CEE50;
		  /* 821CEE50h */ case   12:  		/* lwz R10, <#[R23 + 28]> */
		/* 821CEE50h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000001C) );
		/* 821CEE50h case   12:*/		return 0x821CEE54;
		  /* 821CEE54h */ case   13:  		/* cmpw CR6, R10, R11 */
		/* 821CEE54h case   13:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821CEE54h case   13:*/		return 0x821CEE58;
		  /* 821CEE58h */ case   14:  		/* bc 4, CR6_EQ, 844 */
		/* 821CEE58h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CF1A4;  }
		/* 821CEE58h case   14:*/		return 0x821CEE5C;
		  /* 821CEE5Ch */ case   15:  		/* lwz R11, <#[R23 + 8]> */
		/* 821CEE5Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821CEE5Ch case   15:*/		return 0x821CEE60;
		  /* 821CEE60h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CEE60h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CEE60h case   16:*/		return 0x821CEE64;
		  /* 821CEE64h */ case   17:  		/* cmplwi CR6, R11, 14336 */
		/* 821CEE64h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821CEE64h case   17:*/		return 0x821CEE68;
		  /* 821CEE68h */ case   18:  		/* bc 12, CR6_EQ, 828 */
		/* 821CEE68h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CF1A4;  }
		/* 821CEE68h case   18:*/		return 0x821CEE6C;
	}
	return 0x821CEE6C;
} // Block from 821CEE20h-821CEE6Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CEE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEE6C);
		  /* 821CEE6Ch */ case    0:  		/* mr R5, R24 */
		/* 821CEE6Ch case    0:*/		regs.R5 = regs.R24;
		/* 821CEE6Ch case    0:*/		return 0x821CEE70;
		  /* 821CEE70h */ case    1:  		/* mr R4, R23 */
		/* 821CEE70h case    1:*/		regs.R4 = regs.R23;
		/* 821CEE70h case    1:*/		return 0x821CEE74;
		  /* 821CEE74h */ case    2:  		/* mr R3, R19 */
		/* 821CEE74h case    2:*/		regs.R3 = regs.R19;
		/* 821CEE74h case    2:*/		return 0x821CEE78;
		  /* 821CEE78h */ case    3:  		/* bl -70168 */
		/* 821CEE78h case    3:*/		regs.LR = 0x821CEE7C; return 0x821BDC60;
		/* 821CEE78h case    3:*/		return 0x821CEE7C;
		  /* 821CEE7Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CEE7Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CEE7Ch case    4:*/		return 0x821CEE80;
		  /* 821CEE80h */ case    5:  		/* bc 12, CR0_EQ, 804 */
		/* 821CEE80h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CF1A4;  }
		/* 821CEE80h case    5:*/		return 0x821CEE84;
		  /* 821CEE84h */ case    6:  		/* cmplwi CR6, R31, 112 */
		/* 821CEE84h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000070);
		/* 821CEE84h case    6:*/		return 0x821CEE88;
		  /* 821CEE88h */ case    7:  		/* bc 4, CR6_EQ, 140 */
		/* 821CEE88h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CEF14;  }
		/* 821CEE88h case    7:*/		return 0x821CEE8C;
		  /* 821CEE8Ch */ case    8:  		/* lwz R4, <#[R20 + 28]> */
		/* 821CEE8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x0000001C) );
		/* 821CEE8Ch case    8:*/		return 0x821CEE90;
		  /* 821CEE90h */ case    9:  		/* lwz R11, <#[R23 + 28]> */
		/* 821CEE90h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821CEE90h case    9:*/		return 0x821CEE94;
		  /* 821CEE94h */ case   10:  		/* cmpw CR6, R11, R4 */
		/* 821CEE94h case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R4);
		/* 821CEE94h case   10:*/		return 0x821CEE98;
		  /* 821CEE98h */ case   11:  		/* bc 12, CR6_EQ, 124 */
		/* 821CEE98h case   11:*/		if ( regs.CR[6].eq ) { return 0x821CEF14;  }
		/* 821CEE98h case   11:*/		return 0x821CEE9C;
		  /* 821CEE9Ch */ case   12:  		/* lwz R11, <#[R24 + 4]> */
		/* 821CEE9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821CEE9Ch case   12:*/		return 0x821CEEA0;
		  /* 821CEEA0h */ case   13:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CEEA0h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CEEA0h case   13:*/		return 0x821CEEA4;
		  /* 821CEEA4h */ case   14:  		/* addic R10, R10, -1 */
		/* 821CEEA4h case   14:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CEEA4h case   14:*/		return 0x821CEEA8;
		  /* 821CEEA8h */ case   15:  		/* subfe R10, R10, R10 */
		/* 821CEEA8h case   15:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CEEA8h case   15:*/		return 0x821CEEAC;
		  /* 821CEEACh */ case   16:  		/* and R11, R10, R11 */
		/* 821CEEACh case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CEEACh case   16:*/		return 0x821CEEB0;
		  /* 821CEEB0h */ case   17:  		/* cmplw CR6, R4, R11 */
		/* 821CEEB0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821CEEB0h case   17:*/		return 0x821CEEB4;
		  /* 821CEEB4h */ case   18:  		/* bc 12, CR6_EQ, 752 */
		/* 821CEEB4h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CF1A4;  }
		/* 821CEEB4h case   18:*/		return 0x821CEEB8;
		  /* 821CEEB8h */ case   19:  		/* mr R7, R22 */
		/* 821CEEB8h case   19:*/		regs.R7 = regs.R22;
		/* 821CEEB8h case   19:*/		return 0x821CEEBC;
		  /* 821CEEBCh */ case   20:  		/* mr R6, R21 */
		/* 821CEEBCh case   20:*/		regs.R6 = regs.R21;
		/* 821CEEBCh case   20:*/		return 0x821CEEC0;
		  /* 821CEEC0h */ case   21:  		/* mr R5, R23 */
		/* 821CEEC0h case   21:*/		regs.R5 = regs.R23;
		/* 821CEEC0h case   21:*/		return 0x821CEEC4;
		  /* 821CEEC4h */ case   22:  		/* mr R3, R24 */
		/* 821CEEC4h case   22:*/		regs.R3 = regs.R24;
		/* 821CEEC4h case   22:*/		return 0x821CEEC8;
		  /* 821CEEC8h */ case   23:  		/* bl -99464 */
		/* 821CEEC8h case   23:*/		regs.LR = 0x821CEECC; return 0x821B6A40;
		/* 821CEEC8h case   23:*/		return 0x821CEECC;
		  /* 821CEECCh */ case   24:  		/* lwz R11, <#[R29 + 12]> */
		/* 821CEECCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CEECCh case   24:*/		return 0x821CEED0;
		  /* 821CEED0h */ case   25:  		/* addi R11, R11, 4 */
		/* 821CEED0h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CEED0h case   25:*/		return 0x821CEED4;
		  /* 821CEED4h */ case   26:  		/* lwz R10, <#[R11]> */
		/* 821CEED4h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEED4h case   26:*/		return 0x821CEED8;
		  /* 821CEED8h */ case   27:  		/* b 12 */
		/* 821CEED8h case   27:*/		return 0x821CEEE4;
		/* 821CEED8h case   27:*/		return 0x821CEEDC;
		  /* 821CEEDCh */ case   28:  		/* addi R11, R10, 8 */
		/* 821CEEDCh case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CEEDCh case   28:*/		return 0x821CEEE0;
		  /* 821CEEE0h */ case   29:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CEEE0h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CEEE0h case   29:*/		return 0x821CEEE4;
	}
	return 0x821CEEE4;
} // Block from 821CEE6Ch-821CEEE4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CEEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEEE4);
		  /* 821CEEE4h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821CEEE4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821CEEE4h case    0:*/		return 0x821CEEE8;
		  /* 821CEEE8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CEEE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CEEDC;  }
		/* 821CEEE8h case    1:*/		return 0x821CEEEC;
		  /* 821CEEECh */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821CEEECh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821CEEECh case    2:*/		return 0x821CEEF0;
		  /* 821CEEF0h */ case    3:  		/* li R9, 57 */
		/* 821CEEF0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821CEEF0h case    3:*/		return 0x821CEEF4;
		  /* 821CEEF4h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821CEEF4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEEF4h case    4:*/		return 0x821CEEF8;
		  /* 821CEEF8h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CEEF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CEEF8h case    5:*/		return 0x821CEEFC;
		  /* 821CEEFCh */ case    6:  		/* stw R11, <#[R29 + 8]> */
		/* 821CEEFCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CEEFCh case    6:*/		return 0x821CEF00;
		  /* 821CEF00h */ case    7:  		/* stw R29, <#[R3 + 4]> */
		/* 821CEF00h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		/* 821CEF00h case    7:*/		return 0x821CEF04;
		  /* 821CEF04h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821CEF04h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CEF04h case    8:*/		return 0x821CEF08;
		  /* 821CEF08h */ case    9:  		/* rlwimi R11, R9, 7, 19, 26 */
		/* 821CEF08h case    9:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R9);
		/* 821CEF08h case    9:*/		return 0x821CEF0C;
		  /* 821CEF0Ch */ case   10:  		/* stw R3, <#[R29 + 12]> */
		/* 821CEF0Ch case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CEF0Ch case   10:*/		return 0x821CEF10;
		  /* 821CEF10h */ case   11:  		/* b 636 */
		/* 821CEF10h case   11:*/		return 0x821CF18C;
		/* 821CEF10h case   11:*/		return 0x821CEF14;
	}
	return 0x821CEF14;
} // Block from 821CEEE4h-821CEF14h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CEF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEF14);
		  /* 821CEF14h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821CEF14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CEF14h case    0:*/		return 0x821CEF18;
		  /* 821CEF18h */ case    1:  		/* addi R11, R11, 4 */
		/* 821CEF18h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CEF18h case    1:*/		return 0x821CEF1C;
		  /* 821CEF1Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821CEF1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEF1Ch case    2:*/		return 0x821CEF20;
		  /* 821CEF20h */ case    3:  		/* b 12 */
		/* 821CEF20h case    3:*/		return 0x821CEF2C;
		/* 821CEF20h case    3:*/		return 0x821CEF24;
		  /* 821CEF24h */ case    4:  		/* addi R11, R10, 8 */
		/* 821CEF24h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CEF24h case    4:*/		return 0x821CEF28;
		  /* 821CEF28h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CEF28h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CEF28h case    5:*/		return 0x821CEF2C;
	}
	return 0x821CEF2C;
} // Block from 821CEF14h-821CEF2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CEF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEF2C);
		  /* 821CEF2Ch */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821CEF2Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821CEF2Ch case    0:*/		return 0x821CEF30;
		  /* 821CEF30h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CEF30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CEF24;  }
		/* 821CEF30h case    1:*/		return 0x821CEF34;
		  /* 821CEF34h */ case    2:  		/* lwz R9, <#[R29 + 8]> */
		/* 821CEF34h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 821CEF34h case    2:*/		return 0x821CEF38;
		  /* 821CEF38h */ case    3:  		/* rlwinm R10, R21, 5, 22, 26 */
		/* 821CEF38h case    3:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R10,regs.R21);
		/* 821CEF38h case    3:*/		return 0x821CEF3C;
		  /* 821CEF3Ch */ case    4:  		/* stw R9, <#[R11]> */
		/* 821CEF3Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CEF3Ch case    4:*/		return 0x821CEF40;
		  /* 821CEF40h */ case    5:  		/* rlwinm. R8, R22, 0, 29, 29 */
		/* 821CEF40h case    5:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R22);
		/* 821CEF40h case    5:*/		return 0x821CEF44;
		  /* 821CEF44h */ case    6:  		/* rlwinm R10, R10, 0, 25, 23 */
		/* 821CEF44h case    6:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R10,regs.R10);
		/* 821CEF44h case    6:*/		return 0x821CEF48;
		  /* 821CEF48h */ case    7:  		/* ori R7, R10, 7296 */
		/* 821CEF48h case    7:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1C80);
		/* 821CEF48h case    7:*/		return 0x821CEF4C;
		  /* 821CEF4Ch */ case    8:  		/* mr R10, R22 */
		/* 821CEF4Ch case    8:*/		regs.R10 = regs.R22;
		/* 821CEF4Ch case    8:*/		return 0x821CEF50;
		  /* 821CEF50h */ case    9:  		/* lwz R11, <#[R23 + 4]> */
		/* 821CEF50h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821CEF50h case    9:*/		return 0x821CEF54;
		  /* 821CEF54h */ case   10:  		/* stw R11, <#[R29 + 8]> */
		/* 821CEF54h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CEF54h case   10:*/		return 0x821CEF58;
		  /* 821CEF58h */ case   11:  		/* stw R29, <#[R23 + 4]> */
		/* 821CEF58h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000004) );
		/* 821CEF58h case   11:*/		return 0x821CEF5C;
		  /* 821CEF5Ch */ case   12:  		/* lwz R11, <#[R29]> */
		/* 821CEF5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CEF5Ch case   12:*/		return 0x821CEF60;
		  /* 821CEF60h */ case   13:  		/* rlwinm R11, R11, 0, 27, 24 */
		/* 821CEF60h case   13:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R11,regs.R11);
		/* 821CEF60h case   13:*/		return 0x821CEF64;
		  /* 821CEF64h */ case   14:  		/* rlwinm R11, R11, 0, 24, 21 */
		/* 821CEF64h case   14:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R11,regs.R11);
		/* 821CEF64h case   14:*/		return 0x821CEF68;
	}
	return 0x821CEF68;
} // Block from 821CEF2Ch-821CEF68h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CEF68h
// Function '?ComputeSavingsIfFactored@Compiler@D3DXShader@@AAAIPAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAUProductTerm@2@PAVInstruction@2@PAPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEF68);
		  /* 821CEF68h */ case    0:  		/* stw R23, <#[R29 + 12]> */
		/* 821CEF68h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CEF68h case    0:*/		return 0x821CEF6C;
		  /* 821CEF6Ch */ case    1:  		/* or R9, R7, R11 */
		/* 821CEF6Ch case    1:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R11);
		/* 821CEF6Ch case    1:*/		return 0x821CEF70;
		  /* 821CEF70h */ case    2:  		/* stw R9, <#[R29]> */
		/* 821CEF70h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821CEF70h case    2:*/		return 0x821CEF74;
		  /* 821CEF74h */ case    3:  		/* rlwinm R11, R9, 0, 27, 31 */
		/* 821CEF74h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R9);
		/* 821CEF74h case    3:*/		return 0x821CEF78;
		  /* 821CEF78h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821CEF78h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CEF88;  }
		/* 821CEF78h case    4:*/		return 0x821CEF7C;
		  /* 821CEF7Ch */ case    5:  		/* rlwinm. R8, R11, 0, 30, 30 */
		/* 821CEF7Ch case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R11);
		/* 821CEF7Ch case    5:*/		return 0x821CEF80;
		  /* 821CEF80h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 821CEF80h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CEF88;  }
		/* 821CEF80h case    6:*/		return 0x821CEF84;
		  /* 821CEF84h */ case    7:  		/* addi R10, R22, -4 */
		/* 821CEF84h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0xFFFFFFFC);
		/* 821CEF84h case    7:*/		return 0x821CEF88;
	}
	return 0x821CEF88;
} // Block from 821CEF68h-821CEF88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CEF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEF88);
		  /* 821CEF88h */ case    0:  		/* and R8, R10, R11 */
		/* 821CEF88h case    0:*/		cpu::op::and<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 821CEF88h case    0:*/		return 0x821CEF8C;
		  /* 821CEF8Ch */ case    1:  		/* rlwinm. R8, R8, 0, 29, 29 */
		/* 821CEF8Ch case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R8);
		/* 821CEF8Ch case    1:*/		return 0x821CEF90;
		  /* 821CEF90h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CEF90h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CEF9C;  }
		/* 821CEF90h case    2:*/		return 0x821CEF94;
		  /* 821CEF94h */ case    3:  		/* addi R10, R10, -4 */
		/* 821CEF94h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821CEF94h case    3:*/		return 0x821CEF98;
		  /* 821CEF98h */ case    4:  		/* addi R11, R11, -4 */
		/* 821CEF98h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CEF98h case    4:*/		return 0x821CEF9C;
	}
	return 0x821CEF9C;
} // Block from 821CEF88h-821CEF9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CEF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEF9C);
		  /* 821CEF9Ch */ case    0:  		/* rlwinm. R8, R10, 0, 31, 31 */
		/* 821CEF9Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821CEF9Ch case    0:*/		return 0x821CEFA0;
		  /* 821CEFA0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CEFA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CEFB0;  }
		/* 821CEFA0h case    1:*/		return 0x821CEFA4;
		  /* 821CEFA4h */ case    2:  		/* rlwinm. R8, R11, 0, 30, 30 */
		/* 821CEFA4h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R11);
		/* 821CEFA4h case    2:*/		return 0x821CEFA8;
		  /* 821CEFA8h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CEFA8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CEFB0;  }
		/* 821CEFA8h case    3:*/		return 0x821CEFAC;
		  /* 821CEFACh */ case    4:  		/* addi R11, R11, -2 */
		/* 821CEFACh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821CEFACh case    4:*/		return 0x821CEFB0;
	}
	return 0x821CEFB0;
} // Block from 821CEF9Ch-821CEFB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CEFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEFB0);
		  /* 821CEFB0h */ case    0:  		/* or R11, R10, R11 */
		/* 821CEFB0h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CEFB0h case    0:*/		return 0x821CEFB4;
		  /* 821CEFB4h */ case    1:  		/* rlwimi R11, R9, 0, 0, 26 */
		/* 821CEFB4h case    1:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R9);
		/* 821CEFB4h case    1:*/		return 0x821CEFB8;
		  /* 821CEFB8h */ case    2:  		/* b 468 */
		/* 821CEFB8h case    2:*/		return 0x821CF18C;
		/* 821CEFB8h case    2:*/		return 0x821CEFBC;
	}
	return 0x821CEFBC;
} // Block from 821CEFB0h-821CEFBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CEFBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CEFBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CEFBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CEFBC);
		  /* 821CEFBCh */ case    0:  		/* li R30, 0 */
		/* 821CEFBCh case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CEFBCh case    0:*/		return 0x821CEFC0;
		  /* 821CEFC0h */ case    1:  		/* li R10, 0 */
		/* 821CEFC0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CEFC0h case    1:*/		return 0x821CEFC4;
		  /* 821CEFC4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821CEFC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CEFC4h case    2:*/		return 0x821CEFC8;
		  /* 821CEFC8h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 821CEFC8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CF000;  }
		/* 821CEFC8h case    3:*/		return 0x821CEFCC;
		  /* 821CEFCCh */ case    4:  		/* lwz R8, <#[R29]> */
		/* 821CEFCCh case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 821CEFCCh case    4:*/		return 0x821CEFD0;
		  /* 821CEFD0h */ case    5:  		/* rlwinm R9, R9, 27, 24, 31 */
		/* 821CEFD0h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R9);
		/* 821CEFD0h case    5:*/		return 0x821CEFD4;
		  /* 821CEFD4h */ case    6:  		/* li R11, 0 */
		/* 821CEFD4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CEFD4h case    6:*/		return 0x821CEFD8;
		  /* 821CEFD8h */ case    7:  		/* rlwinm R8, R8, 7, 29, 31 */
		/* 821CEFD8h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R8,regs.R8);
		/* 821CEFD8h case    7:*/		return 0x821CEFDC;
		  /* 821CEFDCh */ case    8:  		/* srw R7, R9, R11 */
		/* 821CEFDCh case    8:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R9,regs.R11);
		/* 821CEFDCh case    8:*/		return 0x821CEFE0;
		  /* 821CEFE0h */ case    9:  		/* rlwinm R7, R7, 0, 30, 31 */
		/* 821CEFE0h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R7,regs.R7);
		/* 821CEFE0h case    9:*/		return 0x821CEFE4;
		  /* 821CEFE4h */ case   10:  		/* li R6, 1 */
		/* 821CEFE4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CEFE4h case   10:*/		return 0x821CEFE8;
		  /* 821CEFE8h */ case   11:  		/* addi R10, R10, 1 */
		/* 821CEFE8h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CEFE8h case   11:*/		return 0x821CEFEC;
		  /* 821CEFECh */ case   12:  		/* slw R7, R6, R7 */
		/* 821CEFECh case   12:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821CEFECh case   12:*/		return 0x821CEFF0;
		  /* 821CEFF0h */ case   13:  		/* or R30, R7, R30 */
		/* 821CEFF0h case   13:*/		cpu::op::or<0>(regs,&regs.R30,regs.R7,regs.R30);
		/* 821CEFF0h case   13:*/		return 0x821CEFF4;
		  /* 821CEFF4h */ case   14:  		/* addi R11, R11, 2 */
		/* 821CEFF4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821CEFF4h case   14:*/		return 0x821CEFF8;
		  /* 821CEFF8h */ case   15:  		/* cmplw CR6, R10, R8 */
		/* 821CEFF8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821CEFF8h case   15:*/		return 0x821CEFFC;
		  /* 821CEFFCh */ case   16:  		/* bc 12, CR6_LT, -32 */
		/* 821CEFFCh case   16:*/		if ( regs.CR[6].lt ) { return 0x821CEFDC;  }
		/* 821CEFFCh case   16:*/		return 0x821CF000;
	}
	return 0x821CF000;
} // Block from 821CEFBCh-821CF000h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CF000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF000);
		  /* 821CF000h */ case    0:  		/* lis R11, -28311 */
		/* 821CF000h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821CF000h case    0:*/		return 0x821CF004;
		  /* 821CF004h */ case    1:  		/* lwz R4, <#[R19 + 28]> */
		/* 821CF004h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x0000001C) );
		/* 821CF004h case    1:*/		return 0x821CF008;
		  /* 821CF008h */ case    2:  		/* lis R10, 0 */
		/* 821CF008h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821CF008h case    2:*/		return 0x821CF00C;
		  /* 821CF00Ch */ case    3:  		/* ori R11, R11, 5192 */
		/* 821CF00Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821CF00Ch case    3:*/		return 0x821CF010;
		  /* 821CF010h */ case    4:  		/* ori R10, R10, 36262 */
		/* 821CF010h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821CF010h case    4:*/		return 0x821CF014;
		  /* 821CF014h */ case    5:  		/* rldicl R9, R30, 0, 32 */
		/* 821CF014h case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R30);
		/* 821CF014h case    5:*/		return 0x821CF018;
		  /* 821CF018h */ case    6:  		/* rldimi R11, R10, 32, 0 */
		/* 821CF018h case    6:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821CF018h case    6:*/		return 0x821CF01C;
		  /* 821CF01Ch */ case    7:  		/* li R5, 0 */
		/* 821CF01Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CF01Ch case    7:*/		return 0x821CF020;
		  /* 821CF020h */ case    8:  		/* srd R11, R11, R9 */
		/* 821CF020h case    8:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CF020h case    8:*/		return 0x821CF024;
		  /* 821CF024h */ case    9:  		/* srd R11, R11, R9 */
		/* 821CF024h case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CF024h case    9:*/		return 0x821CF028;
		  /* 821CF028h */ case   10:  		/* srd R11, R11, R9 */
		/* 821CF028h case   10:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CF028h case   10:*/		return 0x821CF02C;
		  /* 821CF02Ch */ case   11:  		/* mr R3, R24 */
		/* 821CF02Ch case   11:*/		regs.R3 = regs.R24;
		/* 821CF02Ch case   11:*/		return 0x821CF030;
		  /* 821CF030h */ case   12:  		/* rlwinm R6, R11, 0, 29, 31 */
		/* 821CF030h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R11);
		/* 821CF030h case   12:*/		return 0x821CF034;
		  /* 821CF034h */ case   13:  		/* mr R28, R30 */
		/* 821CF034h case   13:*/		regs.R28 = regs.R30;
		/* 821CF034h case   13:*/		return 0x821CF038;
		  /* 821CF038h */ case   14:  		/* bl 350920 */
		/* 821CF038h case   14:*/		regs.LR = 0x821CF03C; return 0x82224B00;
		/* 821CF038h case   14:*/		return 0x821CF03C;
		  /* 821CF03Ch */ case   15:  		/* rlwinm R11, R19, 0, 0, 30 */
		/* 821CF03Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R19);
		/* 821CF03Ch case   15:*/		return 0x821CF040;
		  /* 821CF040h */ case   16:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821CF040h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821CF040h case   16:*/		return 0x821CF044;
		  /* 821CF044h */ case   17:  		/* addi R11, R11, 36 */
		/* 821CF044h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821CF044h case   17:*/		return 0x821CF048;
		  /* 821CF048h */ case   18:  		/* addi R10, R10, 36 */
		/* 821CF048h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821CF048h case   18:*/		return 0x821CF04C;
		  /* 821CF04Ch */ case   19:  		/* addi R8, R11, -36 */
		/* 821CF04Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821CF04Ch case   19:*/		return 0x821CF050;
		  /* 821CF050h */ case   20:  		/* addi R6, R10, -36 */
		/* 821CF050h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821CF050h case   20:*/		return 0x821CF054;
		  /* 821CF054h */ case   21:  		/* addi R9, R10, 4 */
		/* 821CF054h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CF054h case   21:*/		return 0x821CF058;
		  /* 821CF058h */ case   22:  		/* lwz R7, <#[R11]> */
		/* 821CF058h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF058h case   22:*/		return 0x821CF05C;
		  /* 821CF05Ch */ case   23:  		/* mr R31, R3 */
		/* 821CF05Ch case   23:*/		regs.R31 = regs.R3;
		/* 821CF05Ch case   23:*/		return 0x821CF060;
		  /* 821CF060h */ case   24:  		/* mr R4, R3 */
		/* 821CF060h case   24:*/		regs.R4 = regs.R3;
		/* 821CF060h case   24:*/		return 0x821CF064;
		  /* 821CF064h */ case   25:  		/* mr R5, R18 */
		/* 821CF064h case   25:*/		regs.R5 = regs.R18;
		/* 821CF064h case   25:*/		return 0x821CF068;
		  /* 821CF068h */ case   26:  		/* mr R3, R24 */
		/* 821CF068h case   26:*/		regs.R3 = regs.R24;
		/* 821CF068h case   26:*/		return 0x821CF06C;
		  /* 821CF06Ch */ case   27:  		/* stw R7, <#[R10]> */
		/* 821CF06Ch case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821CF06Ch case   27:*/		return 0x821CF070;
		  /* 821CF070h */ case   28:  		/* lwz R7, <#[R11]> */
		/* 821CF070h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF070h case   28:*/		return 0x821CF074;
		  /* 821CF074h */ case   29:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CF074h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CF074h case   29:*/		return 0x821CF078;
		  /* 821CF078h */ case   30:  		/* stw R6, <#[R7]> */
		/* 821CF078h case   30:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821CF078h case   30:*/		return 0x821CF07C;
		  /* 821CF07Ch */ case   31:  		/* stw R8, <#[R10 + 4]> */
		/* 821CF07Ch case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821CF07Ch case   31:*/		return 0x821CF080;
		  /* 821CF080h */ case   32:  		/* stw R9, <#[R11]> */
		/* 821CF080h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF080h case   32:*/		return 0x821CF084;
		  /* 821CF084h */ case   33:  		/* bl -14012 */
		/* 821CF084h case   33:*/		regs.LR = 0x821CF088; return 0x821CB9C8;
		/* 821CF084h case   33:*/		return 0x821CF088;
		  /* 821CF088h */ case   34:  		/* li R27, 0 */
		/* 821CF088h case   34:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CF088h case   34:*/		return 0x821CF08C;
		  /* 821CF08Ch */ case   35:  		/* li R26, 0 */
		/* 821CF08Ch case   35:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821CF08Ch case   35:*/		return 0x821CF090;
		  /* 821CF090h */ case   36:  		/* cmplwi CR6, R30, 0 */
		/* 821CF090h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CF090h case   36:*/		return 0x821CF094;
		  /* 821CF094h */ case   37:  		/* bc 12, CR6_EQ, 128 */
		/* 821CF094h case   37:*/		if ( regs.CR[6].eq ) { return 0x821CF114;  }
		/* 821CF094h case   37:*/		return 0x821CF098;
		  /* 821CF098h */ case   38:  		/* addi R30, R31, 44 */
		/* 821CF098h case   38:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C);
		/* 821CF098h case   38:*/		return 0x821CF09C;
		  /* 821CF09Ch */ case   39:  		/* addi R11, R28, -1 */
		/* 821CF09Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 821CF09Ch case   39:*/		return 0x821CF0A0;
		  /* 821CF0A0h */ case   40:  		/* mr R3, R24 */
		/* 821CF0A0h case   40:*/		regs.R3 = regs.R24;
		/* 821CF0A0h case   40:*/		return 0x821CF0A4;
		  /* 821CF0A4h */ case   41:  		/* andc R11, R28, R11 */
		/* 821CF0A4h case   41:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821CF0A4h case   41:*/		return 0x821CF0A8;
		  /* 821CF0A8h */ case   42:  		/* cntlzw R10, R11 */
		/* 821CF0A8h case   42:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 821CF0A8h case   42:*/		return 0x821CF0AC;
		  /* 821CF0ACh */ case   43:  		/* subf R28, R11, R28 */
		/* 821CF0ACh case   43:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 821CF0ACh case   43:*/		return 0x821CF0B0;
		  /* 821CF0B0h */ case   44:  		/* subfic R25, R10, 31 */
		/* 821CF0B0h case   44:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R10,0x1F);
		/* 821CF0B0h case   44:*/		return 0x821CF0B4;
		  /* 821CF0B4h */ case   45:  		/* cmpw CR6, R25, R16 */
		/* 821CF0B4h case   45:*/		cpu::op::cmpw<6>(regs,regs.R25,regs.R16);
		/* 821CF0B4h case   45:*/		return 0x821CF0B8;
		  /* 821CF0B8h */ case   46:  		/* bc 4, CR6_EQ, 24 */
		/* 821CF0B8h case   46:*/		if ( !regs.CR[6].eq ) { return 0x821CF0D0;  }
		/* 821CF0B8h case   46:*/		return 0x821CF0BC;
		  /* 821CF0BCh */ case   47:  		/* mr R6, R22 */
		/* 821CF0BCh case   47:*/		regs.R6 = regs.R22;
		/* 821CF0BCh case   47:*/		return 0x821CF0C0;
		  /* 821CF0C0h */ case   48:  		/* mr R5, R21 */
		/* 821CF0C0h case   48:*/		regs.R5 = regs.R21;
		/* 821CF0C0h case   48:*/		return 0x821CF0C4;
		  /* 821CF0C4h */ case   49:  		/* mr R4, R23 */
		/* 821CF0C4h case   49:*/		regs.R4 = regs.R23;
		/* 821CF0C4h case   49:*/		return 0x821CF0C8;
		  /* 821CF0C8h */ case   50:  		/* bl -356192 */
		/* 821CF0C8h case   50:*/		regs.LR = 0x821CF0CC; return 0x82178168;
		/* 821CF0C8h case   50:*/		return 0x821CF0CC;
		  /* 821CF0CCh */ case   51:  		/* b 16 */
		/* 821CF0CCh case   51:*/		return 0x821CF0DC;
		/* 821CF0CCh case   51:*/		return 0x821CF0D0;
	}
	return 0x821CF0D0;
} // Block from 821CF000h-821CF0D0h (52 instructions)

//////////////////////////////////////////////////////
// Block at 821CF0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF0D0);
		  /* 821CF0D0h */ case    0:  		/* mr R5, R25 */
		/* 821CF0D0h case    0:*/		regs.R5 = regs.R25;
		/* 821CF0D0h case    0:*/		return 0x821CF0D4;
		  /* 821CF0D4h */ case    1:  		/* mr R4, R20 */
		/* 821CF0D4h case    1:*/		regs.R4 = regs.R20;
		/* 821CF0D4h case    1:*/		return 0x821CF0D8;
		  /* 821CF0D8h */ case    2:  		/* bl -356296 */
		/* 821CF0D8h case    2:*/		regs.LR = 0x821CF0DC; return 0x82178110;
		/* 821CF0D8h case    2:*/		return 0x821CF0DC;
	}
	return 0x821CF0DC;
} // Block from 821CF0D0h-821CF0DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF0DC);
		  /* 821CF0DCh */ case    0:  		/* mr R4, R3 */
		/* 821CF0DCh case    0:*/		regs.R4 = regs.R3;
		/* 821CF0DCh case    0:*/		return 0x821CF0E0;
		  /* 821CF0E0h */ case    1:  		/* mr R3, R31 */
		/* 821CF0E0h case    1:*/		regs.R3 = regs.R31;
		/* 821CF0E0h case    1:*/		return 0x821CF0E4;
		  /* 821CF0E4h */ case    2:  		/* bl -356124 */
		/* 821CF0E4h case    2:*/		regs.LR = 0x821CF0E8; return 0x821781C8;
		/* 821CF0E4h case    2:*/		return 0x821CF0E8;
		  /* 821CF0E8h */ case    3:  		/* rlwinm R11, R25, 1, 0, 30 */
		/* 821CF0E8h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R25);
		/* 821CF0E8h case    3:*/		return 0x821CF0EC;
		  /* 821CF0ECh */ case    4:  		/* li R10, 3 */
		/* 821CF0ECh case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821CF0ECh case    4:*/		return 0x821CF0F0;
		  /* 821CF0F0h */ case    5:  		/* stw R3, <#[R30]> */
		/* 821CF0F0h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821CF0F0h case    5:*/		return 0x821CF0F4;
		  /* 821CF0F4h */ case    6:  		/* slw R9, R26, R11 */
		/* 821CF0F4h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R26,regs.R11);
		/* 821CF0F4h case    6:*/		return 0x821CF0F8;
		  /* 821CF0F8h */ case    7:  		/* slw R11, R10, R11 */
		/* 821CF0F8h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CF0F8h case    7:*/		return 0x821CF0FC;
		  /* 821CF0FCh */ case    8:  		/* andc R11, R27, R11 */
		/* 821CF0FCh case    8:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 821CF0FCh case    8:*/		return 0x821CF100;
		  /* 821CF100h */ case    9:  		/* addi R26, R26, 1 */
		/* 821CF100h case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821CF100h case    9:*/		return 0x821CF104;
		  /* 821CF104h */ case   10:  		/* or R27, R11, R9 */
		/* 821CF104h case   10:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R9);
		/* 821CF104h case   10:*/		return 0x821CF108;
		  /* 821CF108h */ case   11:  		/* addi R30, R30, 4 */
		/* 821CF108h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821CF108h case   11:*/		return 0x821CF10C;
		  /* 821CF10Ch */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 821CF10Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF10Ch case   12:*/		return 0x821CF110;
		  /* 821CF110h */ case   13:  		/* bc 4, CR6_EQ, -116 */
		/* 821CF110h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CF09C;  }
		/* 821CF110h case   13:*/		return 0x821CF114;
	}
	return 0x821CF114;
} // Block from 821CF0DCh-821CF114h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CF114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF114);
		  /* 821CF114h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821CF114h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CF114h case    0:*/		return 0x821CF118;
		  /* 821CF118h */ case    1:  		/* addi R11, R11, 4 */
		/* 821CF118h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CF118h case    1:*/		return 0x821CF11C;
		  /* 821CF11Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821CF11Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF11Ch case    2:*/		return 0x821CF120;
		  /* 821CF120h */ case    3:  		/* b 12 */
		/* 821CF120h case    3:*/		return 0x821CF12C;
		/* 821CF120h case    3:*/		return 0x821CF124;
		  /* 821CF124h */ case    4:  		/* addi R11, R10, 8 */
		/* 821CF124h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CF124h case    4:*/		return 0x821CF128;
		  /* 821CF128h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CF128h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CF128h case    5:*/		return 0x821CF12C;
	}
	return 0x821CF12C;
} // Block from 821CF114h-821CF12Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF12C);
		  /* 821CF12Ch */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821CF12Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821CF12Ch case    0:*/		return 0x821CF130;
		  /* 821CF130h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CF130h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CF124;  }
		/* 821CF130h case    1:*/		return 0x821CF134;
		  /* 821CF134h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821CF134h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821CF134h case    2:*/		return 0x821CF138;
		  /* 821CF138h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821CF138h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF138h case    3:*/		return 0x821CF13C;
		  /* 821CF13Ch */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821CF13Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821CF13Ch case    4:*/		return 0x821CF140;
		  /* 821CF140h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821CF140h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CF140h case    5:*/		return 0x821CF144;
		  /* 821CF144h */ case    6:  		/* stw R29, <#[R31 + 4]> */
		/* 821CF144h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821CF144h case    6:*/		return 0x821CF148;
		  /* 821CF148h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 821CF148h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CF148h case    7:*/		return 0x821CF14C;
		  /* 821CF14Ch */ case    8:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821CF14Ch case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821CF14Ch case    8:*/		return 0x821CF150;
		  /* 821CF150h */ case    9:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821CF150h case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821CF150h case    9:*/		return 0x821CF154;
		  /* 821CF154h */ case   10:  		/* stw R31, <#[R29 + 12]> */
		/* 821CF154h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CF154h case   10:*/		return 0x821CF158;
		  /* 821CF158h */ case   11:  		/* srw R10, R27, R10 */
		/* 821CF158h case   11:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821CF158h case   11:*/		return 0x821CF15C;
		  /* 821CF15Ch */ case   12:  		/* srw R9, R27, R9 */
		/* 821CF15Ch case   12:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821CF15Ch case   12:*/		return 0x821CF160;
		  /* 821CF160h */ case   13:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821CF160h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821CF160h case   13:*/		return 0x821CF164;
		  /* 821CF164h */ case   14:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821CF164h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821CF164h case   14:*/		return 0x821CF168;
		  /* 821CF168h */ case   15:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821CF168h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821CF168h case   15:*/		return 0x821CF16C;
		  /* 821CF16Ch */ case   16:  		/* srw R10, R27, R10 */
		/* 821CF16Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821CF16Ch case   16:*/		return 0x821CF170;
		  /* 821CF170h */ case   17:  		/* rlwinm R8, R11, 28, 29, 30 */
		/* 821CF170h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R11);
		/* 821CF170h case   17:*/		return 0x821CF174;
		  /* 821CF174h */ case   18:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821CF174h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821CF174h case   18:*/		return 0x821CF178;
		  /* 821CF178h */ case   19:  		/* srw R9, R27, R8 */
		/* 821CF178h case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R8);
		/* 821CF178h case   19:*/		return 0x821CF17C;
		  /* 821CF17Ch */ case   20:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821CF17Ch case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821CF17Ch case   20:*/		return 0x821CF180;
		  /* 821CF180h */ case   21:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821CF180h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821CF180h case   21:*/		return 0x821CF184;
		  /* 821CF184h */ case   22:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821CF184h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821CF184h case   22:*/		return 0x821CF188;
		  /* 821CF188h */ case   23:  		/* or R11, R10, R11 */
		/* 821CF188h case   23:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CF188h case   23:*/		return 0x821CF18C;
	}
	return 0x821CF18C;
} // Block from 821CF12Ch-821CF18Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821CF18Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF18C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF18C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF18C);
		  /* 821CF18Ch */ case    0:  		/* stw R11, <#[R29]> */
		/* 821CF18Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CF18Ch case    0:*/		return 0x821CF190;
		  /* 821CF190h */ case    1:  		/* mr R5, R18 */
		/* 821CF190h case    1:*/		regs.R5 = regs.R18;
		/* 821CF190h case    1:*/		return 0x821CF194;
		  /* 821CF194h */ case    2:  		/* mr R4, R19 */
		/* 821CF194h case    2:*/		regs.R4 = regs.R19;
		/* 821CF194h case    2:*/		return 0x821CF198;
		  /* 821CF198h */ case    3:  		/* mr R3, R24 */
		/* 821CF198h case    3:*/		regs.R3 = regs.R24;
		/* 821CF198h case    3:*/		return 0x821CF19C;
		  /* 821CF19Ch */ case    4:  		/* bl -14292 */
		/* 821CF19Ch case    4:*/		regs.LR = 0x821CF1A0; return 0x821CB9C8;
		/* 821CF19Ch case    4:*/		return 0x821CF1A0;
		  /* 821CF1A0h */ case    5:  		/* li R30, 1 */
		/* 821CF1A0h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821CF1A0h case    5:*/		return 0x821CF1A4;
	}
	return 0x821CF1A4;
} // Block from 821CF18Ch-821CF1A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF1A4);
		  /* 821CF1A4h */ case    0:  		/* lwz R11, <#[R17]> */
		/* 821CF1A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821CF1A4h case    0:*/		return 0x821CF1A8;
		  /* 821CF1A8h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821CF1A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821CF1A8h case    1:*/		return 0x821CF1AC;
		  /* 821CF1ACh */ case    2:  		/* bc 4, CR6_EQ, -1228 */
		/* 821CF1ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CECE0;  }
		/* 821CF1ACh case    2:*/		return 0x821CF1B0;
		  /* 821CF1B0h */ case    3:  		/* addi R17, R29, 8 */
		/* 821CF1B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R29,0x8);
		/* 821CF1B0h case    3:*/		return 0x821CF1B4;
		  /* 821CF1B4h */ case    4:  		/* b -1236 */
		/* 821CF1B4h case    4:*/		return 0x821CECE0;
		/* 821CF1B4h case    4:*/		return 0x821CF1B8;
	}
	return 0x821CF1B8;
} // Block from 821CF1A4h-821CF1B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CF1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF1B8);
		  /* 821CF1B8h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821CF1B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821CF1B8h case    0:*/		return 0x821CF1BC;
		  /* 821CF1BCh */ case    1:  		/* bc 12, CR0_EQ, 88 */
		/* 821CF1BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CF214;  }
		/* 821CF1BCh case    1:*/		return 0x821CF1C0;
		  /* 821CF1C0h */ case    2:  		/* mr R5, R18 */
		/* 821CF1C0h case    2:*/		regs.R5 = regs.R18;
		/* 821CF1C0h case    2:*/		return 0x821CF1C4;
		  /* 821CF1C4h */ case    3:  		/* mr R4, R20 */
		/* 821CF1C4h case    3:*/		regs.R4 = regs.R20;
		/* 821CF1C4h case    3:*/		return 0x821CF1C8;
		  /* 821CF1C8h */ case    4:  		/* mr R3, R24 */
		/* 821CF1C8h case    4:*/		regs.R3 = regs.R24;
		/* 821CF1C8h case    4:*/		return 0x821CF1CC;
		  /* 821CF1CCh */ case    5:  		/* bl -14340 */
		/* 821CF1CCh case    5:*/		regs.LR = 0x821CF1D0; return 0x821CB9C8;
		/* 821CF1CCh case    5:*/		return 0x821CF1D0;
		  /* 821CF1D0h */ case    6:  		/* mr R5, R18 */
		/* 821CF1D0h case    6:*/		regs.R5 = regs.R18;
		/* 821CF1D0h case    6:*/		return 0x821CF1D4;
		  /* 821CF1D4h */ case    7:  		/* mr R4, R23 */
		/* 821CF1D4h case    7:*/		regs.R4 = regs.R23;
		/* 821CF1D4h case    7:*/		return 0x821CF1D8;
		  /* 821CF1D8h */ case    8:  		/* mr R3, R24 */
		/* 821CF1D8h case    8:*/		regs.R3 = regs.R24;
		/* 821CF1D8h case    8:*/		return 0x821CF1DC;
		  /* 821CF1DCh */ case    9:  		/* bl -14356 */
		/* 821CF1DCh case    9:*/		regs.LR = 0x821CF1E0; return 0x821CB9C8;
		/* 821CF1DCh case    9:*/		return 0x821CF1E0;
		  /* 821CF1E0h */ case   10:  		/* li R31, 0 */
		/* 821CF1E0h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821CF1E0h case   10:*/		return 0x821CF1E4;
		  /* 821CF1E4h */ case   11:  		/* addi R30, R20, 40 */
		/* 821CF1E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R20,0x28);
		/* 821CF1E4h case   11:*/		return 0x821CF1E8;
		  /* 821CF1E8h */ case   12:  		/* lwz R11, <#[R20 + 8]> */
		/* 821CF1E8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821CF1E8h case   12:*/		return 0x821CF1EC;
		  /* 821CF1ECh */ case   13:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821CF1ECh case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821CF1ECh case   13:*/		return 0x821CF1F0;
		  /* 821CF1F0h */ case   14:  		/* cmplw CR6, R31, R11 */
		/* 821CF1F0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821CF1F0h case   14:*/		return 0x821CF1F4;
		  /* 821CF1F4h */ case   15:  		/* bc 4, CR6_LT, 68 */
		/* 821CF1F4h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821CF238;  }
		/* 821CF1F4h case   15:*/		return 0x821CF1F8;
		  /* 821CF1F8h */ case   16:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821CF1F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821CF1F8h case   16:*/		return 0x821CF1FC;
		  /* 821CF1FCh */ case   17:  		/* mr R5, R18 */
		/* 821CF1FCh case   17:*/		regs.R5 = regs.R18;
		/* 821CF1FCh case   17:*/		return 0x821CF200;
		  /* 821CF200h */ case   18:  		/* mr R3, R24 */
		/* 821CF200h case   18:*/		regs.R3 = regs.R24;
		/* 821CF200h case   18:*/		return 0x821CF204;
		  /* 821CF204h */ case   19:  		/* lwz R4, <#[R11 + 12]> */
		/* 821CF204h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CF204h case   19:*/		return 0x821CF208;
		  /* 821CF208h */ case   20:  		/* bl -14400 */
		/* 821CF208h case   20:*/		regs.LR = 0x821CF20C; return 0x821CB9C8;
		/* 821CF208h case   20:*/		return 0x821CF20C;
		  /* 821CF20Ch */ case   21:  		/* addi R31, R31, 1 */
		/* 821CF20Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821CF20Ch case   21:*/		return 0x821CF210;
		  /* 821CF210h */ case   22:  		/* b -40 */
		/* 821CF210h case   22:*/		return 0x821CF1E8;
		/* 821CF210h case   22:*/		return 0x821CF214;
	}
	return 0x821CF214;
} // Block from 821CF1B8h-821CF214h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CF214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF214);
		  /* 821CF214h */ case    0:  		/* mr R3, R23 */
		/* 821CF214h case    0:*/		regs.R3 = regs.R23;
		/* 821CF214h case    0:*/		return 0x821CF218;
		  /* 821CF218h */ case    1:  		/* bl -436376 */
		/* 821CF218h case    1:*/		regs.LR = 0x821CF21C; return 0x82164980;
		/* 821CF218h case    1:*/		return 0x821CF21C;
		  /* 821CF21Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CF21Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CF21Ch case    2:*/		return 0x821CF220;
		  /* 821CF220h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821CF220h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CF238;  }
		/* 821CF220h case    3:*/		return 0x821CF224;
		  /* 821CF224h */ case    4:  		/* li R6, 1 */
		/* 821CF224h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CF224h case    4:*/		return 0x821CF228;
		  /* 821CF228h */ case    5:  		/* li R5, 0 */
		/* 821CF228h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CF228h case    5:*/		return 0x821CF22C;
		  /* 821CF22Ch */ case    6:  		/* mr R4, R23 */
		/* 821CF22Ch case    6:*/		regs.R4 = regs.R23;
		/* 821CF22Ch case    6:*/		return 0x821CF230;
		  /* 821CF230h */ case    7:  		/* mr R3, R24 */
		/* 821CF230h case    7:*/		regs.R3 = regs.R24;
		/* 821CF230h case    7:*/		return 0x821CF234;
		  /* 821CF234h */ case    8:  		/* bl 377236 */
		/* 821CF234h case    8:*/		regs.LR = 0x821CF238; return 0x8222B3C8;
		/* 821CF234h case    8:*/		return 0x821CF238;
	}
	return 0x821CF238;
} // Block from 821CF214h-821CF238h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CF238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF238);
		  /* 821CF238h */ case    0:  		/* addi R1, R1, 224 */
		/* 821CF238h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821CF238h case    0:*/		return 0x821CF23C;
		  /* 821CF23Ch */ case    1:  		/* b -1302468 */
		/* 821CF23Ch case    1:*/		return 0x82091278;
		/* 821CF23Ch case    1:*/		return 0x821CF240;
	}
	return 0x821CF240;
} // Block from 821CF238h-821CF240h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF240);
		  /* 821CF240h */ case    0:  		/* mfspr R12, LR */
		/* 821CF240h case    0:*/		regs.R12 = regs.LR;
		/* 821CF240h case    0:*/		return 0x821CF244;
		  /* 821CF244h */ case    1:  		/* bl -1302532 */
		/* 821CF244h case    1:*/		regs.LR = 0x821CF248; return 0x82091240;
		/* 821CF244h case    1:*/		return 0x821CF248;
		  /* 821CF248h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821CF248h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821CF248h case    2:*/		return 0x821CF24C;
		  /* 821CF24Ch */ case    3:  		/* mr R31, R5 */
		/* 821CF24Ch case    3:*/		regs.R31 = regs.R5;
		/* 821CF24Ch case    3:*/		return 0x821CF250;
		  /* 821CF250h */ case    4:  		/* lwz R5, <#[R3 + 652]> */
		/* 821CF250h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x0000028C) );
		/* 821CF250h case    4:*/		return 0x821CF254;
		  /* 821CF254h */ case    5:  		/* mr R29, R4 */
		/* 821CF254h case    5:*/		regs.R29 = regs.R4;
		/* 821CF254h case    5:*/		return 0x821CF258;
		  /* 821CF258h */ case    6:  		/* mr R30, R3 */
		/* 821CF258h case    6:*/		regs.R30 = regs.R3;
		/* 821CF258h case    6:*/		return 0x821CF25C;
		  /* 821CF25Ch */ case    7:  		/* mr R22, R6 */
		/* 821CF25Ch case    7:*/		regs.R22 = regs.R6;
		/* 821CF25Ch case    7:*/		return 0x821CF260;
		  /* 821CF260h */ case    8:  		/* mr R25, R7 */
		/* 821CF260h case    8:*/		regs.R25 = regs.R7;
		/* 821CF260h case    8:*/		return 0x821CF264;
		  /* 821CF264h */ case    9:  		/* lwz R4, <#[R31 + 12]> */
		/* 821CF264h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF264h case    9:*/		return 0x821CF268;
		  /* 821CF268h */ case   10:  		/* mr R24, R8 */
		/* 821CF268h case   10:*/		regs.R24 = regs.R8;
		/* 821CF268h case   10:*/		return 0x821CF26C;
		  /* 821CF26Ch */ case   11:  		/* mr R23, R9 */
		/* 821CF26Ch case   11:*/		regs.R23 = regs.R9;
		/* 821CF26Ch case   11:*/		return 0x821CF270;
		  /* 821CF270h */ case   12:  		/* bl -14504 */
		/* 821CF270h case   12:*/		regs.LR = 0x821CF274; return 0x821CB9C8;
		/* 821CF270h case   12:*/		return 0x821CF274;
		  /* 821CF274h */ case   13:  		/* lwz R11, <#[R31]> */
		/* 821CF274h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF274h case   13:*/		return 0x821CF278;
		  /* 821CF278h */ case   14:  		/* rlwinm R28, R11, 7, 29, 31 */
		/* 821CF278h case   14:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R28,regs.R11);
		/* 821CF278h case   14:*/		return 0x821CF27C;
		  /* 821CF27Ch */ case   15:  		/* cmplwi CR6, R28, 1 */
		/* 821CF27Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 821CF27Ch case   15:*/		return 0x821CF280;
		  /* 821CF280h */ case   16:  		/* bc 4, CR6_EQ, 104 */
		/* 821CF280h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821CF2E8;  }
		/* 821CF280h case   16:*/		return 0x821CF284;
		  /* 821CF284h */ case   17:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CF284h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF284h case   17:*/		return 0x821CF288;
		  /* 821CF288h */ case   18:  		/* addi R11, R11, 4 */
		/* 821CF288h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CF288h case   18:*/		return 0x821CF28C;
		  /* 821CF28Ch */ case   19:  		/* lwz R10, <#[R11]> */
		/* 821CF28Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF28Ch case   19:*/		return 0x821CF290;
		  /* 821CF290h */ case   20:  		/* b 12 */
		/* 821CF290h case   20:*/		return 0x821CF29C;
		/* 821CF290h case   20:*/		return 0x821CF294;
		  /* 821CF294h */ case   21:  		/* addi R11, R10, 8 */
		/* 821CF294h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CF294h case   21:*/		return 0x821CF298;
		  /* 821CF298h */ case   22:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CF298h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CF298h case   22:*/		return 0x821CF29C;
	}
	return 0x821CF29C;
} // Block from 821CF240h-821CF29Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CF29Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF29C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF29C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF29C);
		  /* 821CF29Ch */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821CF29Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821CF29Ch case    0:*/		return 0x821CF2A0;
		  /* 821CF2A0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CF2A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CF294;  }
		/* 821CF2A0h case    1:*/		return 0x821CF2A4;
		  /* 821CF2A4h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CF2A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF2A4h case    2:*/		return 0x821CF2A8;
		  /* 821CF2A8h */ case    3:  		/* rlwinm R9, R24, 5, 22, 26 */
		/* 821CF2A8h case    3:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R9,regs.R24);
		/* 821CF2A8h case    3:*/		return 0x821CF2AC;
		  /* 821CF2ACh */ case    4:  		/* rlwinm R8, R23, 0, 27, 31 */
		/* 821CF2ACh case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R23);
		/* 821CF2ACh case    4:*/		return 0x821CF2B0;
		  /* 821CF2B0h */ case    5:  		/* rlwinm R9, R9, 0, 25, 23 */
		/* 821CF2B0h case    5:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R9,regs.R9);
		/* 821CF2B0h case    5:*/		return 0x821CF2B4;
		  /* 821CF2B4h */ case    6:  		/* ori R9, R9, 7296 */
		/* 821CF2B4h case    6:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1C80);
		/* 821CF2B4h case    6:*/		return 0x821CF2B8;
		  /* 821CF2B8h */ case    7:  		/* stw R10, <#[R11]> */
		/* 821CF2B8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF2B8h case    7:*/		return 0x821CF2BC;
		  /* 821CF2BCh */ case    8:  		/* lwz R11, <#[R25 + 4]> */
		/* 821CF2BCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821CF2BCh case    8:*/		return 0x821CF2C0;
		  /* 821CF2C0h */ case    9:  		/* stw R11, <#[R31 + 8]> */
		/* 821CF2C0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF2C0h case    9:*/		return 0x821CF2C4;
		  /* 821CF2C4h */ case   10:  		/* stw R31, <#[R25 + 4]> */
		/* 821CF2C4h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000004) );
		/* 821CF2C4h case   10:*/		return 0x821CF2C8;
		  /* 821CF2C8h */ case   11:  		/* lwz R11, <#[R31]> */
		/* 821CF2C8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF2C8h case   11:*/		return 0x821CF2CC;
		  /* 821CF2CCh */ case   12:  		/* rlwinm R11, R11, 0, 0, 24 */
		/* 821CF2CCh case   12:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R11,regs.R11);
		/* 821CF2CCh case   12:*/		return 0x821CF2D0;
		  /* 821CF2D0h */ case   13:  		/* rlwinm R11, R11, 0, 24, 21 */
		/* 821CF2D0h case   13:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R11,regs.R11);
		/* 821CF2D0h case   13:*/		return 0x821CF2D4;
		  /* 821CF2D4h */ case   14:  		/* stw R25, <#[R31 + 12]> */
		/* 821CF2D4h case   14:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF2D4h case   14:*/		return 0x821CF2D8;
		  /* 821CF2D8h */ case   15:  		/* or R11, R9, R11 */
		/* 821CF2D8h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CF2D8h case   15:*/		return 0x821CF2DC;
		  /* 821CF2DCh */ case   16:  		/* or R11, R11, R8 */
		/* 821CF2DCh case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821CF2DCh case   16:*/		return 0x821CF2E0;
		  /* 821CF2E0h */ case   17:  		/* stw R11, <#[R31]> */
		/* 821CF2E0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF2E0h case   17:*/		return 0x821CF2E4;
		  /* 821CF2E4h */ case   18:  		/* b 300 */
		/* 821CF2E4h case   18:*/		return 0x821CF410;
		/* 821CF2E4h case   18:*/		return 0x821CF2E8;
	}
	return 0x821CF2E8;
} // Block from 821CF29Ch-821CF2E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CF2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF2E8);
		  /* 821CF2E8h */ case    0:  		/* mr R6, R28 */
		/* 821CF2E8h case    0:*/		regs.R6 = regs.R28;
		/* 821CF2E8h case    0:*/		return 0x821CF2EC;
		  /* 821CF2ECh */ case    1:  		/* lwz R4, <#[R29 + 28]> */
		/* 821CF2ECh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000001C) );
		/* 821CF2ECh case    1:*/		return 0x821CF2F0;
		  /* 821CF2F0h */ case    2:  		/* li R5, 0 */
		/* 821CF2F0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CF2F0h case    2:*/		return 0x821CF2F4;
		  /* 821CF2F4h */ case    3:  		/* mr R3, R30 */
		/* 821CF2F4h case    3:*/		regs.R3 = regs.R30;
		/* 821CF2F4h case    3:*/		return 0x821CF2F8;
		  /* 821CF2F8h */ case    4:  		/* bl 350216 */
		/* 821CF2F8h case    4:*/		regs.LR = 0x821CF2FC; return 0x82224B00;
		/* 821CF2F8h case    4:*/		return 0x821CF2FC;
		  /* 821CF2FCh */ case    5:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821CF2FCh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821CF2FCh case    5:*/		return 0x821CF300;
		  /* 821CF300h */ case    6:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821CF300h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821CF300h case    6:*/		return 0x821CF304;
		  /* 821CF304h */ case    7:  		/* addi R11, R11, 36 */
		/* 821CF304h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821CF304h case    7:*/		return 0x821CF308;
		  /* 821CF308h */ case    8:  		/* addi R10, R10, 36 */
		/* 821CF308h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821CF308h case    8:*/		return 0x821CF30C;
		  /* 821CF30Ch */ case    9:  		/* addi R8, R11, -36 */
		/* 821CF30Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821CF30Ch case    9:*/		return 0x821CF310;
		  /* 821CF310h */ case   10:  		/* addi R6, R10, -36 */
		/* 821CF310h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821CF310h case   10:*/		return 0x821CF314;
		  /* 821CF314h */ case   11:  		/* addi R9, R10, 4 */
		/* 821CF314h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CF314h case   11:*/		return 0x821CF318;
		  /* 821CF318h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821CF318h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF318h case   12:*/		return 0x821CF31C;
		  /* 821CF31Ch */ case   13:  		/* mr R29, R3 */
		/* 821CF31Ch case   13:*/		regs.R29 = regs.R3;
		/* 821CF31Ch case   13:*/		return 0x821CF320;
		  /* 821CF320h */ case   14:  		/* li R27, 0 */
		/* 821CF320h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CF320h case   14:*/		return 0x821CF324;
		  /* 821CF324h */ case   15:  		/* cmplwi CR6, R28, 0 */
		/* 821CF324h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF324h case   15:*/		return 0x821CF328;
		  /* 821CF328h */ case   16:  		/* stw R7, <#[R10]> */
		/* 821CF328h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821CF328h case   16:*/		return 0x821CF32C;
		  /* 821CF32Ch */ case   17:  		/* lwz R7, <#[R11]> */
		/* 821CF32Ch case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF32Ch case   17:*/		return 0x821CF330;
		  /* 821CF330h */ case   18:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821CF330h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821CF330h case   18:*/		return 0x821CF334;
		  /* 821CF334h */ case   19:  		/* stw R6, <#[R7]> */
		/* 821CF334h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821CF334h case   19:*/		return 0x821CF338;
		  /* 821CF338h */ case   20:  		/* stw R8, <#[R10 + 4]> */
		/* 821CF338h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821CF338h case   20:*/		return 0x821CF33C;
		  /* 821CF33Ch */ case   21:  		/* stw R9, <#[R11]> */
		/* 821CF33Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF33Ch case   21:*/		return 0x821CF340;
		  /* 821CF340h */ case   22:  		/* bc 12, CR6_EQ, 120 */
		/* 821CF340h case   22:*/		if ( regs.CR[6].eq ) { return 0x821CF3B8;  }
		/* 821CF340h case   22:*/		return 0x821CF344;
		  /* 821CF344h */ case   23:  		/* addi R26, R3, 44 */
		/* 821CF344h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x2C);
		/* 821CF344h case   23:*/		return 0x821CF348;
		  /* 821CF348h */ case   24:  		/* cmpw CR6, R27, R22 */
		/* 821CF348h case   24:*/		cpu::op::cmpw<6>(regs,regs.R27,regs.R22);
		/* 821CF348h case   24:*/		return 0x821CF34C;
		  /* 821CF34Ch */ case   25:  		/* bc 4, CR6_EQ, 20 */
		/* 821CF34Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x821CF360;  }
		/* 821CF34Ch case   25:*/		return 0x821CF350;
		  /* 821CF350h */ case   26:  		/* mr R6, R23 */
		/* 821CF350h case   26:*/		regs.R6 = regs.R23;
		/* 821CF350h case   26:*/		return 0x821CF354;
		  /* 821CF354h */ case   27:  		/* mr R5, R24 */
		/* 821CF354h case   27:*/		regs.R5 = regs.R24;
		/* 821CF354h case   27:*/		return 0x821CF358;
		  /* 821CF358h */ case   28:  		/* mr R4, R25 */
		/* 821CF358h case   28:*/		regs.R4 = regs.R25;
		/* 821CF358h case   28:*/		return 0x821CF35C;
		  /* 821CF35Ch */ case   29:  		/* b 52 */
		/* 821CF35Ch case   29:*/		return 0x821CF390;
		/* 821CF35Ch case   29:*/		return 0x821CF360;
	}
	return 0x821CF360;
} // Block from 821CF2E8h-821CF360h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CF360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF360);
		  /* 821CF360h */ case    0:  		/* li R10, 0 */
		/* 821CF360h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CF360h case    0:*/		return 0x821CF364;
		  /* 821CF364h */ case    1:  		/* li R9, 0 */
		/* 821CF364h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821CF364h case    1:*/		return 0x821CF368;
		  /* 821CF368h */ case    2:  		/* li R8, 0 */
		/* 821CF368h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CF368h case    2:*/		return 0x821CF36C;
		  /* 821CF36Ch */ case    3:  		/* addi R7, R1, 80 */
		/* 821CF36Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821CF36Ch case    3:*/		return 0x821CF370;
		  /* 821CF370h */ case    4:  		/* addi R6, R1, 84 */
		/* 821CF370h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821CF370h case    4:*/		return 0x821CF374;
		  /* 821CF374h */ case    5:  		/* addi R5, R1, 88 */
		/* 821CF374h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821CF374h case    5:*/		return 0x821CF378;
		  /* 821CF378h */ case    6:  		/* mr R4, R27 */
		/* 821CF378h case    6:*/		regs.R4 = regs.R27;
		/* 821CF378h case    6:*/		return 0x821CF37C;
		  /* 821CF37Ch */ case    7:  		/* mr R3, R31 */
		/* 821CF37Ch case    7:*/		regs.R3 = regs.R31;
		/* 821CF37Ch case    7:*/		return 0x821CF380;
		  /* 821CF380h */ case    8:  		/* bl 344400 */
		/* 821CF380h case    8:*/		regs.LR = 0x821CF384; return 0x822234D0;
		/* 821CF380h case    8:*/		return 0x821CF384;
		  /* 821CF384h */ case    9:  		/* lwz R6, <#[R1 + 80]> */
		/* 821CF384h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821CF384h case    9:*/		return 0x821CF388;
	}
	return 0x821CF388;
} // Block from 821CF360h-821CF388h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CF388h
// Function '?TransferDependentModifiersToInputs@Compiler@D3DXShader@@AAAXPAVInstruction@2@IPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF388);
		  /* 821CF388h */ case    0:  		/* lwz R5, <#[R1 + 84]> */
		/* 821CF388h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821CF388h case    0:*/		return 0x821CF38C;
		  /* 821CF38Ch */ case    1:  		/* lwz R4, <#[R1 + 88]> */
		/* 821CF38Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821CF38Ch case    1:*/		return 0x821CF390;
	}
	return 0x821CF390;
} // Block from 821CF388h-821CF390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF390);
		  /* 821CF390h */ case    0:  		/* mr R3, R30 */
		/* 821CF390h case    0:*/		regs.R3 = regs.R30;
		/* 821CF390h case    0:*/		return 0x821CF394;
		  /* 821CF394h */ case    1:  		/* bl -356908 */
		/* 821CF394h case    1:*/		regs.LR = 0x821CF398; return 0x82178168;
		/* 821CF394h case    1:*/		return 0x821CF398;
		  /* 821CF398h */ case    2:  		/* mr R4, R3 */
		/* 821CF398h case    2:*/		regs.R4 = regs.R3;
		/* 821CF398h case    2:*/		return 0x821CF39C;
		  /* 821CF39Ch */ case    3:  		/* mr R3, R29 */
		/* 821CF39Ch case    3:*/		regs.R3 = regs.R29;
		/* 821CF39Ch case    3:*/		return 0x821CF3A0;
		  /* 821CF3A0h */ case    4:  		/* bl -356824 */
		/* 821CF3A0h case    4:*/		regs.LR = 0x821CF3A4; return 0x821781C8;
		/* 821CF3A0h case    4:*/		return 0x821CF3A4;
		  /* 821CF3A4h */ case    5:  		/* addi R27, R27, 1 */
		/* 821CF3A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821CF3A4h case    5:*/		return 0x821CF3A8;
		  /* 821CF3A8h */ case    6:  		/* stw R3, <#[R26]> */
		/* 821CF3A8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 821CF3A8h case    6:*/		return 0x821CF3AC;
		  /* 821CF3ACh */ case    7:  		/* addi R26, R26, 4 */
		/* 821CF3ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821CF3ACh case    7:*/		return 0x821CF3B0;
		  /* 821CF3B0h */ case    8:  		/* cmplw CR6, R27, R28 */
		/* 821CF3B0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 821CF3B0h case    8:*/		return 0x821CF3B4;
		  /* 821CF3B4h */ case    9:  		/* bc 12, CR6_LT, -108 */
		/* 821CF3B4h case    9:*/		if ( regs.CR[6].lt ) { return 0x821CF348;  }
		/* 821CF3B4h case    9:*/		return 0x821CF3B8;
	}
	return 0x821CF3B8;
} // Block from 821CF390h-821CF3B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CF3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF3B8);
		  /* 821CF3B8h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CF3B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF3B8h case    0:*/		return 0x821CF3BC;
		  /* 821CF3BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 821CF3BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CF3BCh case    1:*/		return 0x821CF3C0;
		  /* 821CF3C0h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821CF3C0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF3C0h case    2:*/		return 0x821CF3C4;
		  /* 821CF3C4h */ case    3:  		/* b 12 */
		/* 821CF3C4h case    3:*/		return 0x821CF3D0;
		/* 821CF3C4h case    3:*/		return 0x821CF3C8;
		  /* 821CF3C8h */ case    4:  		/* addi R11, R10, 8 */
		/* 821CF3C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821CF3C8h case    4:*/		return 0x821CF3CC;
		  /* 821CF3CCh */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CF3CCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CF3CCh case    5:*/		return 0x821CF3D0;
	}
	return 0x821CF3D0;
} // Block from 821CF3B8h-821CF3D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF3D0);
		  /* 821CF3D0h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821CF3D0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821CF3D0h case    0:*/		return 0x821CF3D4;
		  /* 821CF3D4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821CF3D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CF3C8;  }
		/* 821CF3D4h case    1:*/		return 0x821CF3D8;
		  /* 821CF3D8h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CF3D8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF3D8h case    2:*/		return 0x821CF3DC;
		  /* 821CF3DCh */ case    3:  		/* li R9, 57 */
		/* 821CF3DCh case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821CF3DCh case    3:*/		return 0x821CF3E0;
		  /* 821CF3E0h */ case    4:  		/* mr R4, R29 */
		/* 821CF3E0h case    4:*/		regs.R4 = regs.R29;
		/* 821CF3E0h case    4:*/		return 0x821CF3E4;
		  /* 821CF3E4h */ case    5:  		/* mr R3, R30 */
		/* 821CF3E4h case    5:*/		regs.R3 = regs.R30;
		/* 821CF3E4h case    5:*/		return 0x821CF3E8;
		  /* 821CF3E8h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821CF3E8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF3E8h case    6:*/		return 0x821CF3EC;
		  /* 821CF3ECh */ case    7:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CF3ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CF3ECh case    7:*/		return 0x821CF3F0;
		  /* 821CF3F0h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821CF3F0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF3F0h case    8:*/		return 0x821CF3F4;
		  /* 821CF3F4h */ case    9:  		/* stw R31, <#[R29 + 4]> */
		/* 821CF3F4h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821CF3F4h case    9:*/		return 0x821CF3F8;
		  /* 821CF3F8h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821CF3F8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF3F8h case   10:*/		return 0x821CF3FC;
		  /* 821CF3FCh */ case   11:  		/* rlwimi R11, R9, 7, 19, 31 */
		/* 821CF3FCh case   11:*/		cpu::op::rlwimi<0,7,19,31>(regs,&regs.R11,regs.R9);
		/* 821CF3FCh case   11:*/		return 0x821CF400;
		  /* 821CF400h */ case   12:  		/* stw R29, <#[R31 + 12]> */
		/* 821CF400h case   12:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF400h case   12:*/		return 0x821CF404;
		  /* 821CF404h */ case   13:  		/* stw R11, <#[R31]> */
		/* 821CF404h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF404h case   13:*/		return 0x821CF408;
		  /* 821CF408h */ case   14:  		/* lwz R5, <#[R30 + 652]> */
		/* 821CF408h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000028C) );
		/* 821CF408h case   14:*/		return 0x821CF40C;
		  /* 821CF40Ch */ case   15:  		/* bl -14916 */
		/* 821CF40Ch case   15:*/		regs.LR = 0x821CF410; return 0x821CB9C8;
		/* 821CF40Ch case   15:*/		return 0x821CF410;
	}
	return 0x821CF410;
} // Block from 821CF3D0h-821CF410h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CF410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF410);
		  /* 821CF410h */ case    0:  		/* addi R1, R1, 192 */
		/* 821CF410h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821CF410h case    0:*/		return 0x821CF414;
		  /* 821CF414h */ case    1:  		/* b -1302916 */
		/* 821CF414h case    1:*/		return 0x82091290;
		/* 821CF414h case    1:*/		return 0x821CF418;
	}
	return 0x821CF418;
} // Block from 821CF410h-821CF418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF418);
		  /* 821CF418h */ case    0:  		/* mfspr R12, LR */
		/* 821CF418h case    0:*/		regs.R12 = regs.LR;
		/* 821CF418h case    0:*/		return 0x821CF41C;
		  /* 821CF41Ch */ case    1:  		/* bl -1303000 */
		/* 821CF41Ch case    1:*/		regs.LR = 0x821CF420; return 0x82091244;
		/* 821CF41Ch case    1:*/		return 0x821CF420;
		  /* 821CF420h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CF420h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CF420h case    2:*/		return 0x821CF424;
		  /* 821CF424h */ case    3:  		/* mr R31, R4 */
		/* 821CF424h case    3:*/		regs.R31 = regs.R4;
		/* 821CF424h case    3:*/		return 0x821CF428;
		  /* 821CF428h */ case    4:  		/* mr R26, R5 */
		/* 821CF428h case    4:*/		regs.R26 = regs.R5;
		/* 821CF428h case    4:*/		return 0x821CF42C;
		  /* 821CF42Ch */ case    5:  		/* li R5, 6 */
		/* 821CF42Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821CF42Ch case    5:*/		return 0x821CF430;
		  /* 821CF430h */ case    6:  		/* li R4, 8 */
		/* 821CF430h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CF430h case    6:*/		return 0x821CF434;
		  /* 821CF434h */ case    7:  		/* mr R23, R3 */
		/* 821CF434h case    7:*/		regs.R23 = regs.R3;
		/* 821CF434h case    7:*/		return 0x821CF438;
		  /* 821CF438h */ case    8:  		/* bl -437064 */
		/* 821CF438h case    8:*/		regs.LR = 0x821CF43C; return 0x821648F0;
		/* 821CF438h case    8:*/		return 0x821CF43C;
		  /* 821CF43Ch */ case    9:  		/* addi R24, R3, 4 */
		/* 821CF43Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x4);
		/* 821CF43Ch case    9:*/		return 0x821CF440;
		  /* 821CF440h */ case   10:  		/* ori R11, R3, 1 */
		/* 821CF440h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CF440h case   10:*/		return 0x821CF444;
		  /* 821CF444h */ case   11:  		/* ori R10, R24, 1 */
		/* 821CF444h case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R24,0x1);
		/* 821CF444h case   11:*/		return 0x821CF448;
		  /* 821CF448h */ case   12:  		/* mr R27, R3 */
		/* 821CF448h case   12:*/		regs.R27 = regs.R3;
		/* 821CF448h case   12:*/		return 0x821CF44C;
		  /* 821CF44Ch */ case   13:  		/* stw R11, <#[R3 + 4]> */
		/* 821CF44Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CF44Ch case   13:*/		return 0x821CF450;
		  /* 821CF450h */ case   14:  		/* li R25, 1 */
		/* 821CF450h case   14:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821CF450h case   14:*/		return 0x821CF454;
		  /* 821CF454h */ case   15:  		/* stw R10, <#[R3]> */
		/* 821CF454h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CF454h case   15:*/		return 0x821CF458;
		  /* 821CF458h */ case   16:  		/* cmplwi CR6, R26, 16 */
		/* 821CF458h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 821CF458h case   16:*/		return 0x821CF45C;
		  /* 821CF45Ch */ case   17:  		/* bc 4, CR6_LT, 40 */
		/* 821CF45Ch case   17:*/		if ( !regs.CR[6].lt ) { return 0x821CF484;  }
		/* 821CF45Ch case   17:*/		return 0x821CF460;
		  /* 821CF460h */ case   18:  		/* rlwinm R11, R26, 27, 5, 31 */
		/* 821CF460h case   18:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R26);
		/* 821CF460h case   18:*/		return 0x821CF464;
		  /* 821CF464h */ case   19:  		/* rlwinm R10, R26, 0, 27, 31 */
		/* 821CF464h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R26);
		/* 821CF464h case   19:*/		return 0x821CF468;
		  /* 821CF468h */ case   20:  		/* addi R11, R11, 21 */
		/* 821CF468h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821CF468h case   20:*/		return 0x821CF46C;
		  /* 821CF46Ch */ case   21:  		/* slw R10, R25, R10 */
		/* 821CF46Ch case   21:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 821CF46Ch case   21:*/		return 0x821CF470;
		  /* 821CF470h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CF470h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CF470h case   22:*/		return 0x821CF474;
		  /* 821CF474h */ case   23:  		/* lwzx R9, <#[R11 + R31]> */
		/* 821CF474h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CF474h case   23:*/		return 0x821CF478;
		  /* 821CF478h */ case   24:  		/* or R10, R10, R9 */
		/* 821CF478h case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CF478h case   24:*/		return 0x821CF47C;
		  /* 821CF47Ch */ case   25:  		/* stwx R10, <#[R11 + R31]> */
		/* 821CF47Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CF47Ch case   25:*/		return 0x821CF480;
		  /* 821CF480h */ case   26:  		/* b 16 */
		/* 821CF480h case   26:*/		return 0x821CF490;
		/* 821CF480h case   26:*/		return 0x821CF484;
	}
	return 0x821CF484;
} // Block from 821CF418h-821CF484h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821CF484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF484);
		  /* 821CF484h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CF484h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CF484h case    0:*/		return 0x821CF488;
		  /* 821CF488h */ case    1:  		/* oris R11, R11, 16384 */
		/* 821CF488h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821CF488h case    1:*/		return 0x821CF48C;
		  /* 821CF48Ch */ case    2:  		/* stw R11, <#[R31 + 48]> */
		/* 821CF48Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CF48Ch case    2:*/		return 0x821CF490;
	}
	return 0x821CF490;
} // Block from 821CF484h-821CF490h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF490);
		  /* 821CF490h */ case    0:  		/* lwz R29, <#[R31 + 8]> */
		/* 821CF490h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF490h case    0:*/		return 0x821CF494;
		  /* 821CF494h */ case    1:  		/* li R28, 0 */
		/* 821CF494h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821CF494h case    1:*/		return 0x821CF498;
		  /* 821CF498h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821CF498h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CF498h case    2:*/		return 0x821CF49C;
		  /* 821CF49Ch */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821CF49Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821CF554;  }
		/* 821CF49Ch case    3:*/		return 0x821CF4A0;
		  /* 821CF4A0h */ case    4:  		/* lwz R30, <#[R29 + 4]> */
		/* 821CF4A0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821CF4A0h case    4:*/		return 0x821CF4A4;
		  /* 821CF4A4h */ case    5:  		/* cmplw CR6, R31, R30 */
		/* 821CF4A4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821CF4A4h case    5:*/		return 0x821CF4A8;
		  /* 821CF4A8h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 821CF4A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CF4DC;  }
		/* 821CF4A8h case    6:*/		return 0x821CF4AC;
		  /* 821CF4ACh */ case    7:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CF4ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CF4ACh case    7:*/		return 0x821CF4B0;
		  /* 821CF4B0h */ case    8:  		/* lwz R10, <#[R30 + 40]> */
		/* 821CF4B0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 821CF4B0h case    8:*/		return 0x821CF4B4;
		  /* 821CF4B4h */ case    9:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821CF4B4h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821CF4B4h case    9:*/		return 0x821CF4B8;
		  /* 821CF4B8h */ case   10:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821CF4B8h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821CF4B8h case   10:*/		return 0x821CF4BC;
		  /* 821CF4BCh */ case   11:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821CF4BCh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821CF4BCh case   11:*/		return 0x821CF4C0;
		  /* 821CF4C0h */ case   12:  		/* addi R11, R11, 1 */
		/* 821CF4C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CF4C0h case   12:*/		return 0x821CF4C4;
		  /* 821CF4C4h */ case   13:  		/* slw R9, R25, R9 */
		/* 821CF4C4h case   13:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R9);
		/* 821CF4C4h case   13:*/		return 0x821CF4C8;
		  /* 821CF4C8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CF4C8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CF4C8h case   14:*/		return 0x821CF4CC;
		  /* 821CF4CCh */ case   15:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821CF4CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821CF4CCh case   15:*/		return 0x821CF4D0;
		  /* 821CF4D0h */ case   16:  		/* and. R11, R11, R9 */
		/* 821CF4D0h case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CF4D0h case   16:*/		return 0x821CF4D4;
		  /* 821CF4D4h */ case   17:  		/* mr R11, R25 */
		/* 821CF4D4h case   17:*/		regs.R11 = regs.R25;
		/* 821CF4D4h case   17:*/		return 0x821CF4D8;
		  /* 821CF4D8h */ case   18:  		/* bc 4, CR0_EQ, 8 */
		/* 821CF4D8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821CF4E0;  }
		/* 821CF4D8h case   18:*/		return 0x821CF4DC;
	}
	return 0x821CF4DC;
} // Block from 821CF490h-821CF4DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CF4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF4DC);
		  /* 821CF4DCh */ case    0:  		/* li R11, 0 */
		/* 821CF4DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CF4DCh case    0:*/		return 0x821CF4E0;
	}
	return 0x821CF4E0;
} // Block from 821CF4DCh-821CF4E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CF4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF4E0);
		  /* 821CF4E0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CF4E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CF4E0h case    0:*/		return 0x821CF4E4;
		  /* 821CF4E4h */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 821CF4E4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CF54C;  }
		/* 821CF4E4h case    1:*/		return 0x821CF4E8;
		  /* 821CF4E8h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821CF4E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF4E8h case    2:*/		return 0x821CF4EC;
		  /* 821CF4ECh */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821CF4ECh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CF4F8;  }
		/* 821CF4ECh case    3:*/		return 0x821CF4F0;
		  /* 821CF4F0h */ case    4:  		/* mr R28, R30 */
		/* 821CF4F0h case    4:*/		regs.R28 = regs.R30;
		/* 821CF4F0h case    4:*/		return 0x821CF4F4;
		  /* 821CF4F4h */ case    5:  		/* b 88 */
		/* 821CF4F4h case    5:*/		return 0x821CF54C;
		/* 821CF4F4h case    5:*/		return 0x821CF4F8;
	}
	return 0x821CF4F8;
} // Block from 821CF4E0h-821CF4F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF4F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF4F8);
		  /* 821CF4F8h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821CF4F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821CF4F8h case    0:*/		return 0x821CF4FC;
		  /* 821CF4FCh */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CF4FCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF4FCh case    1:*/		return 0x821CF500;
		  /* 821CF500h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821CF500h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CF528;  }
		/* 821CF500h case    2:*/		return 0x821CF504;
		  /* 821CF504h */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821CF504h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CF504h case    3:*/		return 0x821CF508;
		  /* 821CF508h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF508h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF508h case    4:*/		return 0x821CF50C;
		  /* 821CF50Ch */ case    5:  		/* addic. R3, R11, -4 */
		/* 821CF50Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CF50Ch case    5:*/		return 0x821CF510;
		  /* 821CF510h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821CF510h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CF528;  }
		/* 821CF510h case    6:*/		return 0x821CF514;
		  /* 821CF514h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF514h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF514h case    7:*/		return 0x821CF518;
		  /* 821CF518h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CF518h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CF518h case    8:*/		return 0x821CF51C;
		  /* 821CF51Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 821CF51Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CF51Ch case    9:*/		return 0x821CF520;
		  /* 821CF520h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821CF520h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CF520h case   10:*/		return 0x821CF524;
		  /* 821CF524h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821CF524h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821CF534;  }
		/* 821CF524h case   11:*/		return 0x821CF528;
	}
	return 0x821CF528;
} // Block from 821CF4F8h-821CF528h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CF528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF528);
		  /* 821CF528h */ case    0:  		/* li R4, 1 */
		/* 821CF528h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CF528h case    0:*/		return 0x821CF52C;
		  /* 821CF52Ch */ case    1:  		/* mr R3, R27 */
		/* 821CF52Ch case    1:*/		regs.R3 = regs.R27;
		/* 821CF52Ch case    1:*/		return 0x821CF530;
		  /* 821CF530h */ case    2:  		/* bl -271464 */
		/* 821CF530h case    2:*/		regs.LR = 0x821CF534; return 0x8218D0C8;
		/* 821CF530h case    2:*/		return 0x821CF534;
	}
	return 0x821CF534;
} // Block from 821CF528h-821CF534h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF534);
		  /* 821CF534h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF534h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF534h case    0:*/		return 0x821CF538;
		  /* 821CF538h */ case    1:  		/* addi R10, R11, 4 */
		/* 821CF538h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CF538h case    1:*/		return 0x821CF53C;
		  /* 821CF53Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 821CF53Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CF53Ch case    2:*/		return 0x821CF540;
		  /* 821CF540h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CF540h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CF540h case    3:*/		return 0x821CF544;
		  /* 821CF544h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CF544h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF544h case    4:*/		return 0x821CF548;
		  /* 821CF548h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821CF548h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CF548h case    5:*/		return 0x821CF54C;
	}
	return 0x821CF54C;
} // Block from 821CF534h-821CF54Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF54Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF54C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF54C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF54C);
		  /* 821CF54Ch */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 821CF54Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821CF54Ch case    0:*/		return 0x821CF550;
		  /* 821CF550h */ case    1:  		/* b -184 */
		/* 821CF550h case    1:*/		return 0x821CF498;
		/* 821CF550h case    1:*/		return 0x821CF554;
	}
	return 0x821CF554;
} // Block from 821CF54Ch-821CF554h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF554);
		  /* 821CF554h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821CF554h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF554h case    0:*/		return 0x821CF558;
		  /* 821CF558h */ case    1:  		/* bc 12, CR6_EQ, 392 */
		/* 821CF558h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CF6E0;  }
		/* 821CF558h case    1:*/		return 0x821CF55C;
		  /* 821CF55Ch */ case    2:  		/* cmplwi CR6, R26, 16 */
		/* 821CF55Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 821CF55Ch case    2:*/		return 0x821CF560;
		  /* 821CF560h */ case    3:  		/* bc 4, CR6_LT, 40 */
		/* 821CF560h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821CF588;  }
		/* 821CF560h case    3:*/		return 0x821CF564;
		  /* 821CF564h */ case    4:  		/* rlwinm R11, R26, 27, 5, 31 */
		/* 821CF564h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R26);
		/* 821CF564h case    4:*/		return 0x821CF568;
		  /* 821CF568h */ case    5:  		/* rlwinm R10, R26, 0, 27, 31 */
		/* 821CF568h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R26);
		/* 821CF568h case    5:*/		return 0x821CF56C;
		  /* 821CF56Ch */ case    6:  		/* addi R11, R11, 21 */
		/* 821CF56Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821CF56Ch case    6:*/		return 0x821CF570;
		  /* 821CF570h */ case    7:  		/* slw R10, R25, R10 */
		/* 821CF570h case    7:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 821CF570h case    7:*/		return 0x821CF574;
		  /* 821CF574h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CF574h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CF574h case    8:*/		return 0x821CF578;
		  /* 821CF578h */ case    9:  		/* lwzx R9, <#[R11 + R28]> */
		/* 821CF578h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821CF578h case    9:*/		return 0x821CF57C;
		  /* 821CF57Ch */ case   10:  		/* or R10, R10, R9 */
		/* 821CF57Ch case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CF57Ch case   10:*/		return 0x821CF580;
		  /* 821CF580h */ case   11:  		/* stwx R10, <#[R11 + R28]> */
		/* 821CF580h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821CF580h case   11:*/		return 0x821CF584;
		  /* 821CF584h */ case   12:  		/* b 16 */
		/* 821CF584h case   12:*/		return 0x821CF594;
		/* 821CF584h case   12:*/		return 0x821CF588;
	}
	return 0x821CF588;
} // Block from 821CF554h-821CF588h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CF588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF588);
		  /* 821CF588h */ case    0:  		/* lwz R11, <#[R28 + 48]> */
		/* 821CF588h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821CF588h case    0:*/		return 0x821CF58C;
		  /* 821CF58Ch */ case    1:  		/* oris R11, R11, 16384 */
		/* 821CF58Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821CF58Ch case    1:*/		return 0x821CF590;
		  /* 821CF590h */ case    2:  		/* stw R11, <#[R28 + 48]> */
		/* 821CF590h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821CF590h case    2:*/		return 0x821CF594;
	}
	return 0x821CF594;
} // Block from 821CF588h-821CF594h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF594);
		  /* 821CF594h */ case    0:  		/* lwz R30, <#[R28 + 8]> */
		/* 821CF594h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000008) );
		/* 821CF594h case    0:*/		return 0x821CF598;
		  /* 821CF598h */ case    1:  		/* li R28, 0 */
		/* 821CF598h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821CF598h case    1:*/		return 0x821CF59C;
		  /* 821CF59Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821CF59Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CF59Ch case    2:*/		return 0x821CF5A0;
		  /* 821CF5A0h */ case    3:  		/* bc 12, CR6_EQ, 188 */
		/* 821CF5A0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CF65C;  }
		/* 821CF5A0h case    3:*/		return 0x821CF5A4;
		  /* 821CF5A4h */ case    4:  		/* lwz R31, <#[R30 + 4]> */
		/* 821CF5A4h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821CF5A4h case    4:*/		return 0x821CF5A8;
		  /* 821CF5A8h */ case    5:  		/* lwz R11, <#[R31 + 40]> */
		/* 821CF5A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821CF5A8h case    5:*/		return 0x821CF5AC;
		  /* 821CF5ACh */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CF5ACh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF5ACh case    6:*/		return 0x821CF5B0;
		  /* 821CF5B0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CF5B0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF5B0h case    7:*/		return 0x821CF5B4;
		  /* 821CF5B4h */ case    8:  		/* bc 4, CR0_EQ, 160 */
		/* 821CF5B4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CF654;  }
		/* 821CF5B4h case    8:*/		return 0x821CF5B8;
		  /* 821CF5B8h */ case    9:  		/* cmplwi CR6, R26, 16 */
		/* 821CF5B8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 821CF5B8h case    9:*/		return 0x821CF5BC;
		  /* 821CF5BCh */ case   10:  		/* bc 4, CR6_LT, 36 */
		/* 821CF5BCh case   10:*/		if ( !regs.CR[6].lt ) { return 0x821CF5E0;  }
		/* 821CF5BCh case   10:*/		return 0x821CF5C0;
		  /* 821CF5C0h */ case   11:  		/* rlwinm R11, R26, 27, 5, 31 */
		/* 821CF5C0h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R26);
		/* 821CF5C0h case   11:*/		return 0x821CF5C4;
		  /* 821CF5C4h */ case   12:  		/* rlwinm R10, R26, 0, 27, 31 */
		/* 821CF5C4h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R26);
		/* 821CF5C4h case   12:*/		return 0x821CF5C8;
		  /* 821CF5C8h */ case   13:  		/* addi R11, R11, 21 */
		/* 821CF5C8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821CF5C8h case   13:*/		return 0x821CF5CC;
		  /* 821CF5CCh */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CF5CCh case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CF5CCh case   14:*/		return 0x821CF5D0;
		  /* 821CF5D0h */ case   15:  		/* lwzx R11, <#[R11 + R31]> */
		/* 821CF5D0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CF5D0h case   15:*/		return 0x821CF5D4;
		  /* 821CF5D4h */ case   16:  		/* srw R11, R11, R10 */
		/* 821CF5D4h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CF5D4h case   16:*/		return 0x821CF5D8;
		  /* 821CF5D8h */ case   17:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 821CF5D8h case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF5D8h case   17:*/		return 0x821CF5DC;
		  /* 821CF5DCh */ case   18:  		/* b 12 */
		/* 821CF5DCh case   18:*/		return 0x821CF5E8;
		/* 821CF5DCh case   18:*/		return 0x821CF5E0;
	}
	return 0x821CF5E0;
} // Block from 821CF594h-821CF5E0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CF5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF5E0);
		  /* 821CF5E0h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CF5E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CF5E0h case    0:*/		return 0x821CF5E4;
		  /* 821CF5E4h */ case    1:  		/* rlwinm R11, R11, 2, 31, 31 */
		/* 821CF5E4h case    1:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF5E4h case    1:*/		return 0x821CF5E8;
	}
	return 0x821CF5E8;
} // Block from 821CF5E0h-821CF5E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF5E8);
		  /* 821CF5E8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CF5E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CF5E8h case    0:*/		return 0x821CF5EC;
		  /* 821CF5ECh */ case    1:  		/* bc 4, CR0_EQ, 104 */
		/* 821CF5ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CF654;  }
		/* 821CF5ECh case    1:*/		return 0x821CF5F0;
		  /* 821CF5F0h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821CF5F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF5F0h case    2:*/		return 0x821CF5F4;
		  /* 821CF5F4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821CF5F4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CF600;  }
		/* 821CF5F4h case    3:*/		return 0x821CF5F8;
		  /* 821CF5F8h */ case    4:  		/* mr R28, R31 */
		/* 821CF5F8h case    4:*/		regs.R28 = regs.R31;
		/* 821CF5F8h case    4:*/		return 0x821CF5FC;
		  /* 821CF5FCh */ case    5:  		/* b 88 */
		/* 821CF5FCh case    5:*/		return 0x821CF654;
		/* 821CF5FCh case    5:*/		return 0x821CF600;
	}
	return 0x821CF600;
} // Block from 821CF5E8h-821CF600h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF600);
		  /* 821CF600h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821CF600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821CF600h case    0:*/		return 0x821CF604;
		  /* 821CF604h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CF604h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF604h case    1:*/		return 0x821CF608;
		  /* 821CF608h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821CF608h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CF630;  }
		/* 821CF608h case    2:*/		return 0x821CF60C;
		  /* 821CF60Ch */ case    3:  		/* lwz R11, <#[R27]> */
		/* 821CF60Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CF60Ch case    3:*/		return 0x821CF610;
		  /* 821CF610h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF610h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF610h case    4:*/		return 0x821CF614;
		  /* 821CF614h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821CF614h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CF614h case    5:*/		return 0x821CF618;
		  /* 821CF618h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821CF618h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CF630;  }
		/* 821CF618h case    6:*/		return 0x821CF61C;
		  /* 821CF61Ch */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF61Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF61Ch case    7:*/		return 0x821CF620;
		  /* 821CF620h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CF620h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CF620h case    8:*/		return 0x821CF624;
		  /* 821CF624h */ case    9:  		/* addi R11, R11, 1 */
		/* 821CF624h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CF624h case    9:*/		return 0x821CF628;
		  /* 821CF628h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821CF628h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CF628h case   10:*/		return 0x821CF62C;
		  /* 821CF62Ch */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821CF62Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x821CF63C;  }
		/* 821CF62Ch case   11:*/		return 0x821CF630;
	}
	return 0x821CF630;
} // Block from 821CF600h-821CF630h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CF630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF630);
		  /* 821CF630h */ case    0:  		/* li R4, 1 */
		/* 821CF630h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CF630h case    0:*/		return 0x821CF634;
		  /* 821CF634h */ case    1:  		/* mr R3, R27 */
		/* 821CF634h case    1:*/		regs.R3 = regs.R27;
		/* 821CF634h case    1:*/		return 0x821CF638;
		  /* 821CF638h */ case    2:  		/* bl -271728 */
		/* 821CF638h case    2:*/		regs.LR = 0x821CF63C; return 0x8218D0C8;
		/* 821CF638h case    2:*/		return 0x821CF63C;
	}
	return 0x821CF63C;
} // Block from 821CF630h-821CF63Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF63C);
		  /* 821CF63Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF63Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF63Ch case    0:*/		return 0x821CF640;
		  /* 821CF640h */ case    1:  		/* addi R10, R11, 4 */
		/* 821CF640h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CF640h case    1:*/		return 0x821CF644;
		  /* 821CF644h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CF644h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CF644h case    2:*/		return 0x821CF648;
		  /* 821CF648h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CF648h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CF648h case    3:*/		return 0x821CF64C;
		  /* 821CF64Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CF64Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF64Ch case    4:*/		return 0x821CF650;
		  /* 821CF650h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821CF650h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CF650h case    5:*/		return 0x821CF654;
	}
	return 0x821CF654;
} // Block from 821CF63Ch-821CF654h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF654);
		  /* 821CF654h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 821CF654h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821CF654h case    0:*/		return 0x821CF658;
		  /* 821CF658h */ case    1:  		/* b -188 */
		/* 821CF658h case    1:*/		return 0x821CF59C;
		/* 821CF658h case    1:*/		return 0x821CF65C;
	}
	return 0x821CF65C;
} // Block from 821CF654h-821CF65Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF65C);
		  /* 821CF65Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821CF65Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CF65Ch case    0:*/		return 0x821CF660;
		  /* 821CF660h */ case    1:  		/* bc 4, CR6_EQ, -260 */
		/* 821CF660h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CF55C;  }
		/* 821CF660h case    1:*/		return 0x821CF664;
		  /* 821CF664h */ case    2:  		/* lwz R11, <#[R24]> */
		/* 821CF664h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821CF664h case    2:*/		return 0x821CF668;
		  /* 821CF668h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CF668h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CF668h case    3:*/		return 0x821CF66C;
		  /* 821CF66Ch */ case    4:  		/* bc 4, CR0_EQ, 116 */
		/* 821CF66Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CF6E0;  }
		/* 821CF66Ch case    4:*/		return 0x821CF670;
		  /* 821CF670h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821CF670h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CF670h case    5:*/		return 0x821CF674;
		  /* 821CF674h */ case    6:  		/* bc 12, CR0_EQ, 108 */
		/* 821CF674h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CF6E0;  }
		/* 821CF674h case    6:*/		return 0x821CF678;
		  /* 821CF678h */ case    7:  		/* lwz R11, <#[R27]> */
		/* 821CF678h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821CF678h case    7:*/		return 0x821CF67C;
		  /* 821CF67Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF67Ch case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF67Ch case    8:*/		return 0x821CF680;
	}
	return 0x821CF680;
} // Block from 821CF65Ch-821CF680h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CF680h
// Function '?SetConstraintFlagsAndUpdateResultBounds@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@IPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF680);
		  /* 821CF680h */ case    0:  		/* addi R4, R11, -4 */
		/* 821CF680h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CF680h case    0:*/		return 0x821CF684;
		  /* 821CF684h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CF684h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF684h case    1:*/		return 0x821CF688;
		  /* 821CF688h */ case    2:  		/* addi R10, R11, 3 */
		/* 821CF688h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CF688h case    2:*/		return 0x821CF68C;
		  /* 821CF68Ch */ case    3:  		/* addic. R11, R11, -1 */
		/* 821CF68Ch case    3:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CF68Ch case    3:*/		return 0x821CF690;
		  /* 821CF690h */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CF690h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CF690h case    4:*/		return 0x821CF694;
		  /* 821CF694h */ case    5:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821CF694h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CF694h case    5:*/		return 0x821CF698;
		  /* 821CF698h */ case    6:  		/* stw R11, <#[R4 + 8]> */
		/* 821CF698h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CF698h case    6:*/		return 0x821CF69C;
		  /* 821CF69Ch */ case    7:  		/* bc 4, CR0_EQ, 60 */
		/* 821CF69Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821CF6D8;  }
		/* 821CF69Ch case    7:*/		return 0x821CF6A0;
		  /* 821CF6A0h */ case    8:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CF6A0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CF6A0h case    8:*/		return 0x821CF6A4;
		  /* 821CF6A4h */ case    9:  		/* mr R3, R27 */
		/* 821CF6A4h case    9:*/		regs.R3 = regs.R27;
		/* 821CF6A4h case    9:*/		return 0x821CF6A8;
		  /* 821CF6A8h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CF6A8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF6A8h case   10:*/		return 0x821CF6AC;
		  /* 821CF6ACh */ case   11:  		/* lwz R9, <#[R11]> */
		/* 821CF6ACh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF6ACh case   11:*/		return 0x821CF6B0;
		  /* 821CF6B0h */ case   12:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CF6B0h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CF6B0h case   12:*/		return 0x821CF6B4;
		  /* 821CF6B4h */ case   13:  		/* stw R9, <#[R10]> */
		/* 821CF6B4h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CF6B4h case   13:*/		return 0x821CF6B8;
		  /* 821CF6B8h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CF6B8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF6B8h case   14:*/		return 0x821CF6BC;
		  /* 821CF6BCh */ case   15:  		/* lwz R11, <#[R11]> */
		/* 821CF6BCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF6BCh case   15:*/		return 0x821CF6C0;
		  /* 821CF6C0h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF6C0h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF6C0h case   16:*/		return 0x821CF6C4;
		  /* 821CF6C4h */ case   17:  		/* stw R10, <#[R11]> */
		/* 821CF6C4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF6C4h case   17:*/		return 0x821CF6C8;
		  /* 821CF6C8h */ case   18:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CF6C8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CF6C8h case   18:*/		return 0x821CF6CC;
		  /* 821CF6CCh */ case   19:  		/* addi R11, R11, 4 */
		/* 821CF6CCh case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CF6CCh case   19:*/		return 0x821CF6D0;
		  /* 821CF6D0h */ case   20:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CF6D0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CF6D0h case   20:*/		return 0x821CF6D4;
		  /* 821CF6D4h */ case   21:  		/* bl -514252 */
		/* 821CF6D4h case   21:*/		regs.LR = 0x821CF6D8; return 0x82151E08;
		/* 821CF6D4h case   21:*/		return 0x821CF6D8;
	}
	return 0x821CF6D8;
} // Block from 821CF680h-821CF6D8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821CF6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF6D8);
		  /* 821CF6D8h */ case    0:  		/* mr R28, R31 */
		/* 821CF6D8h case    0:*/		regs.R28 = regs.R31;
		/* 821CF6D8h case    0:*/		return 0x821CF6DC;
		  /* 821CF6DCh */ case    1:  		/* b -384 */
		/* 821CF6DCh case    1:*/		return 0x821CF55C;
		/* 821CF6DCh case    1:*/		return 0x821CF6E0;
	}
	return 0x821CF6E0;
} // Block from 821CF6D8h-821CF6E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF6E0);
		  /* 821CF6E0h */ case    0:  		/* lwz R10, <#[R23 + 976]> */
		/* 821CF6E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x000003D0) );
		/* 821CF6E0h case    0:*/		return 0x821CF6E4;
		  /* 821CF6E4h */ case    1:  		/* addi R11, R23, 972 */
		/* 821CF6E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x3CC);
		/* 821CF6E4h case    1:*/		return 0x821CF6E8;
		  /* 821CF6E8h */ case    2:  		/* stw R10, <#[R27]> */
		/* 821CF6E8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821CF6E8h case    2:*/		return 0x821CF6EC;
		  /* 821CF6ECh */ case    3:  		/* stw R27, <#[R23 + 976]> */
		/* 821CF6ECh case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R23 + 0x000003D0) );
		/* 821CF6ECh case    3:*/		return 0x821CF6F0;
		  /* 821CF6F0h */ case    4:  		/* addi R1, R1, 160 */
		/* 821CF6F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CF6F0h case    4:*/		return 0x821CF6F4;
		  /* 821CF6F4h */ case    5:  		/* b -1303648 */
		/* 821CF6F4h case    5:*/		return 0x82091294;
		/* 821CF6F4h case    5:*/		return 0x821CF6F8;
	}
	return 0x821CF6F8;
} // Block from 821CF6E0h-821CF6F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF6F8);
		  /* 821CF6F8h */ case    0:  		/* mfspr R12, LR */
		/* 821CF6F8h case    0:*/		regs.R12 = regs.LR;
		/* 821CF6F8h case    0:*/		return 0x821CF6FC;
		  /* 821CF6FCh */ case    1:  		/* bl -1303732 */
		/* 821CF6FCh case    1:*/		regs.LR = 0x821CF700; return 0x82091248;
		/* 821CF6FCh case    1:*/		return 0x821CF700;
		  /* 821CF700h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CF700h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CF700h case    2:*/		return 0x821CF704;
		  /* 821CF704h */ case    3:  		/* mr R31, R4 */
		/* 821CF704h case    3:*/		regs.R31 = regs.R4;
		/* 821CF704h case    3:*/		return 0x821CF708;
		  /* 821CF708h */ case    4:  		/* mr R30, R5 */
		/* 821CF708h case    4:*/		regs.R30 = regs.R5;
		/* 821CF708h case    4:*/		return 0x821CF70C;
		  /* 821CF70Ch */ case    5:  		/* li R5, 28 */
		/* 821CF70Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821CF70Ch case    5:*/		return 0x821CF710;
		  /* 821CF710h */ case    6:  		/* li R4, 8 */
		/* 821CF710h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CF710h case    6:*/		return 0x821CF714;
		  /* 821CF714h */ case    7:  		/* mr R28, R3 */
		/* 821CF714h case    7:*/		regs.R28 = regs.R3;
		/* 821CF714h case    7:*/		return 0x821CF718;
		  /* 821CF718h */ case    8:  		/* mr R27, R6 */
		/* 821CF718h case    8:*/		regs.R27 = regs.R6;
		/* 821CF718h case    8:*/		return 0x821CF71C;
		  /* 821CF71Ch */ case    9:  		/* mr R26, R7 */
		/* 821CF71Ch case    9:*/		regs.R26 = regs.R7;
		/* 821CF71Ch case    9:*/		return 0x821CF720;
		  /* 821CF720h */ case   10:  		/* bl -437808 */
		/* 821CF720h case   10:*/		regs.LR = 0x821CF724; return 0x821648F0;
		/* 821CF720h case   10:*/		return 0x821CF724;
		  /* 821CF724h */ case   11:  		/* addi R25, R3, 4 */
		/* 821CF724h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821CF724h case   11:*/		return 0x821CF728;
		  /* 821CF728h */ case   12:  		/* ori R11, R3, 1 */
		/* 821CF728h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CF728h case   12:*/		return 0x821CF72C;
		  /* 821CF72Ch */ case   13:  		/* ori R10, R25, 1 */
		/* 821CF72Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 821CF72Ch case   13:*/		return 0x821CF730;
		  /* 821CF730h */ case   14:  		/* mr R29, R3 */
		/* 821CF730h case   14:*/		regs.R29 = regs.R3;
		/* 821CF730h case   14:*/		return 0x821CF734;
		  /* 821CF734h */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 821CF734h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CF734h case   15:*/		return 0x821CF738;
		  /* 821CF738h */ case   16:  		/* stw R10, <#[R3]> */
		/* 821CF738h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CF738h case   16:*/		return 0x821CF73C;
		  /* 821CF73Ch */ case   17:  		/* lis R24, 512 */
		/* 821CF73Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R24,0x200);
		/* 821CF73Ch case   17:*/		return 0x821CF740;
		  /* 821CF740h */ case   18:  		/* mr R6, R26 */
		/* 821CF740h case   18:*/		regs.R6 = regs.R26;
		/* 821CF740h case   18:*/		return 0x821CF744;
		  /* 821CF744h */ case   19:  		/* mr R5, R27 */
		/* 821CF744h case   19:*/		regs.R5 = regs.R27;
		/* 821CF744h case   19:*/		return 0x821CF748;
		  /* 821CF748h */ case   20:  		/* mr R4, R31 */
		/* 821CF748h case   20:*/		regs.R4 = regs.R31;
		/* 821CF748h case   20:*/		return 0x821CF74C;
		  /* 821CF74Ch */ case   21:  		/* mr R3, R28 */
		/* 821CF74Ch case   21:*/		regs.R3 = regs.R28;
		/* 821CF74Ch case   21:*/		return 0x821CF750;
		  /* 821CF750h */ case   22:  		/* bl -24176 */
		/* 821CF750h case   22:*/		regs.LR = 0x821CF754; return 0x821C98E0;
		/* 821CF750h case   22:*/		return 0x821CF754;
		  /* 821CF754h */ case   23:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CF754h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF754h case   23:*/		return 0x821CF758;
		  /* 821CF758h */ case   24:  		/* rlwinm. R11, R10, 0, 10, 12 */
		/* 821CF758h case   24:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R10);
		/* 821CF758h case   24:*/		return 0x821CF75C;
		  /* 821CF75Ch */ case   25:  		/* bc 12, CR0_EQ, 396 */
		/* 821CF75Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x821CF8E8;  }
		/* 821CF75Ch case   25:*/		return 0x821CF760;
		  /* 821CF760h */ case   26:  		/* lwz R11, <#[R31 + 44]> */
		/* 821CF760h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821CF760h case   26:*/		return 0x821CF764;
		  /* 821CF764h */ case   27:  		/* cmplw CR6, R11, R30 */
		/* 821CF764h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821CF764h case   27:*/		return 0x821CF768;
		  /* 821CF768h */ case   28:  		/* bc 4, CR6_EQ, 384 */
		/* 821CF768h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E8;  }
		/* 821CF768h case   28:*/		return 0x821CF76C;
		  /* 821CF76Ch */ case   29:  		/* lwz R11, <#[R30]> */
		/* 821CF76Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CF76Ch case   29:*/		return 0x821CF770;
		  /* 821CF770h */ case   30:  		/* rlwinm R9, R11, 0, 4, 6 */
		/* 821CF770h case   30:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R9,regs.R11);
		/* 821CF770h case   30:*/		return 0x821CF774;
		  /* 821CF774h */ case   31:  		/* cmplw CR6, R9, R24 */
		/* 821CF774h case   31:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R24);
		/* 821CF774h case   31:*/		return 0x821CF778;
		  /* 821CF778h */ case   32:  		/* bc 4, CR6_EQ, 368 */
		/* 821CF778h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E8;  }
		/* 821CF778h case   32:*/		return 0x821CF77C;
		  /* 821CF77Ch */ case   33:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821CF77Ch case   33:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821CF77Ch case   33:*/		return 0x821CF780;
		  /* 821CF780h */ case   34:  		/* bc 4, CR0_EQ, 360 */
		/* 821CF780h case   34:*/		if ( !regs.CR[0].eq ) { return 0x821CF8E8;  }
		/* 821CF780h case   34:*/		return 0x821CF784;
		  /* 821CF784h */ case   35:  		/* rlwinm R30, R10, 25, 25, 31 */
		/* 821CF784h case   35:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R30,regs.R10);
		/* 821CF784h case   35:*/		return 0x821CF788;
	}
	return 0x821CF788;
} // Block from 821CF6F8h-821CF788h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821CF788h
// Function '?SimplifyComponentDependents@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@01IPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF788);
		  /* 821CF788h */ case    0:  		/* cmplwi CR6, R30, 11 */
		/* 821CF788h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000B);
		/* 821CF788h case    0:*/		return 0x821CF78C;
		  /* 821CF78Ch */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 821CF78Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CF7DC;  }
		/* 821CF78Ch case    1:*/		return 0x821CF790;
		  /* 821CF790h */ case    2:  		/* cmplwi CR6, R30, 10 */
		/* 821CF790h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000000A);
		/* 821CF790h case    2:*/		return 0x821CF794;
		  /* 821CF794h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 821CF794h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CF7DC;  }
		/* 821CF794h case    3:*/		return 0x821CF798;
		  /* 821CF798h */ case    4:  		/* cmplwi CR6, R30, 103 */
		/* 821CF798h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000067);
		/* 821CF798h case    4:*/		return 0x821CF79C;
		  /* 821CF79Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 821CF79Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CF7B4;  }
		/* 821CF79Ch case    5:*/		return 0x821CF7A0;
		  /* 821CF7A0h */ case    6:  		/* mr R4, R28 */
		/* 821CF7A0h case    6:*/		regs.R4 = regs.R28;
		/* 821CF7A0h case    6:*/		return 0x821CF7A4;
		  /* 821CF7A4h */ case    7:  		/* mr R3, R31 */
		/* 821CF7A4h case    7:*/		regs.R3 = regs.R31;
		/* 821CF7A4h case    7:*/		return 0x821CF7A8;
		  /* 821CF7A8h */ case    8:  		/* bl -72960 */
		/* 821CF7A8h case    8:*/		regs.LR = 0x821CF7AC; return 0x821BDAA8;
		/* 821CF7A8h case    8:*/		return 0x821CF7AC;
		  /* 821CF7ACh */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CF7ACh case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CF7ACh case    9:*/		return 0x821CF7B0;
		  /* 821CF7B0h */ case   10:  		/* bc 4, CR0_EQ, 44 */
		/* 821CF7B0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821CF7DC;  }
		/* 821CF7B0h case   10:*/		return 0x821CF7B4;
	}
	return 0x821CF7B4;
} // Block from 821CF788h-821CF7B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CF7B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF7B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF7B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF7B4);
		  /* 821CF7B4h */ case    0:  		/* cmplwi CR6, R30, 1 */
		/* 821CF7B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 821CF7B4h case    0:*/		return 0x821CF7B8;
		  /* 821CF7B8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821CF7B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CF7C4;  }
		/* 821CF7B8h case    1:*/		return 0x821CF7BC;
		  /* 821CF7BCh */ case    2:  		/* cmplwi CR6, R30, 2 */
		/* 821CF7BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 821CF7BCh case    2:*/		return 0x821CF7C0;
		  /* 821CF7C0h */ case    3:  		/* bc 4, CR6_EQ, 296 */
		/* 821CF7C0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E8;  }
		/* 821CF7C0h case    3:*/		return 0x821CF7C4;
	}
	return 0x821CF7C4;
} // Block from 821CF7B4h-821CF7C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CF7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF7C4);
		  /* 821CF7C4h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CF7C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CF7C4h case    0:*/		return 0x821CF7C8;
		  /* 821CF7C8h */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CF7C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CF7C8h case    1:*/		return 0x821CF7CC;
		  /* 821CF7CCh */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CF7CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CF7CCh case    2:*/		return 0x821CF7D0;
		  /* 821CF7D0h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CF7D0h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CF7D0h case    3:*/		return 0x821CF7D4;
		  /* 821CF7D4h */ case    4:  		/* cmplwi CR6, R11, 16000 */
		/* 821CF7D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821CF7D4h case    4:*/		return 0x821CF7D8;
		  /* 821CF7D8h */ case    5:  		/* bc 4, CR6_EQ, 272 */
		/* 821CF7D8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E8;  }
		/* 821CF7D8h case    5:*/		return 0x821CF7DC;
	}
	return 0x821CF7DC;
} // Block from 821CF7C4h-821CF7DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF7DC);
		  /* 821CF7DCh */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821CF7DCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821CF7DCh case    0:*/		return 0x821CF7E0;
		  /* 821CF7E0h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821CF7E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CF7E0h case    1:*/		return 0x821CF7E4;
		  /* 821CF7E4h */ case    2:  		/* bc 12, CR6_EQ, 260 */
		/* 821CF7E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CF8E8;  }
		/* 821CF7E4h case    2:*/		return 0x821CF7E8;
		  /* 821CF7E8h */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 821CF7E8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821CF7E8h case    3:*/		return 0x821CF7EC;
		  /* 821CF7ECh */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821CF7ECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CF7ECh case    4:*/		return 0x821CF7F0;
		  /* 821CF7F0h */ case    5:  		/* bc 12, CR6_EQ, 240 */
		/* 821CF7F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CF8E0;  }
		/* 821CF7F0h case    5:*/		return 0x821CF7F4;
		  /* 821CF7F4h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 821CF7F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF7F4h case    6:*/		return 0x821CF7F8;
		  /* 821CF7F8h */ case    7:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821CF7F8h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821CF7F8h case    7:*/		return 0x821CF7FC;
		  /* 821CF7FCh */ case    8:  		/* bc 12, CR0_EQ, 228 */
		/* 821CF7FCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821CF8E0;  }
		/* 821CF7FCh case    8:*/		return 0x821CF800;
		  /* 821CF800h */ case    9:  		/* lwz R11, <#[R4 + 8]> */
		/* 821CF800h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CF800h case    9:*/		return 0x821CF804;
		  /* 821CF804h */ case   10:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821CF804h case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821CF804h case   10:*/		return 0x821CF808;
		  /* 821CF808h */ case   11:  		/* cmplwi CR6, R10, 1 */
		/* 821CF808h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821CF808h case   11:*/		return 0x821CF80C;
		  /* 821CF80Ch */ case   12:  		/* bc 12, CR6_LT, 16 */
		/* 821CF80Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x821CF81C;  }
		/* 821CF80Ch case   12:*/		return 0x821CF810;
		  /* 821CF810h */ case   13:  		/* cmplwi CR6, R10, 102 */
		/* 821CF810h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 821CF810h case   13:*/		return 0x821CF814;
		  /* 821CF814h */ case   14:  		/* li R11, 1 */
		/* 821CF814h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CF814h case   14:*/		return 0x821CF818;
		  /* 821CF818h */ case   15:  		/* bc 4, CR6_GT, 8 */
		/* 821CF818h case   15:*/		if ( !regs.CR[6].gt ) { return 0x821CF820;  }
		/* 821CF818h case   15:*/		return 0x821CF81C;
	}
	return 0x821CF81C;
} // Block from 821CF7DCh-821CF81Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CF81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF81C);
		  /* 821CF81Ch */ case    0:  		/* li R11, 0 */
		/* 821CF81Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CF81Ch case    0:*/		return 0x821CF820;
	}
	return 0x821CF820;
} // Block from 821CF81Ch-821CF820h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CF820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF820);
		  /* 821CF820h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CF820h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CF820h case    0:*/		return 0x821CF824;
		  /* 821CF824h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821CF824h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CF830;  }
		/* 821CF824h case    1:*/		return 0x821CF828;
		  /* 821CF828h */ case    2:  		/* cmplwi CR6, R10, 103 */
		/* 821CF828h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000067);
		/* 821CF828h case    2:*/		return 0x821CF82C;
		  /* 821CF82Ch */ case    3:  		/* bc 4, CR6_EQ, 180 */
		/* 821CF82Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E0;  }
		/* 821CF82Ch case    3:*/		return 0x821CF830;
	}
	return 0x821CF830;
} // Block from 821CF820h-821CF830h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CF830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF830);
		  /* 821CF830h */ case    0:  		/* lwz R11, <#[R28 + 616]> */
		/* 821CF830h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000268) );
		/* 821CF830h case    0:*/		return 0x821CF834;
		  /* 821CF834h */ case    1:  		/* li R10, 68 */
		/* 821CF834h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x44);
		/* 821CF834h case    1:*/		return 0x821CF838;
		  /* 821CF838h */ case    2:  		/* lwz R9, <#[R4 + 28]> */
		/* 821CF838h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 821CF838h case    2:*/		return 0x821CF83C;
		  /* 821CF83Ch */ case    3:  		/* subf R11, R11, R27 */
		/* 821CF83Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821CF83Ch case    3:*/		return 0x821CF840;
		  /* 821CF840h */ case    4:  		/* divw R10, R11, R10 */
		/* 821CF840h case    4:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821CF840h case    4:*/		return 0x821CF844;
		  /* 821CF844h */ case    5:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821CF844h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821CF844h case    5:*/		return 0x821CF848;
		  /* 821CF848h */ case    6:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821CF848h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821CF848h case    6:*/		return 0x821CF84C;
		  /* 821CF84Ch */ case    7:  		/* addi R11, R11, 21 */
		/* 821CF84Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821CF84Ch case    7:*/		return 0x821CF850;
		  /* 821CF850h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CF850h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CF850h case    8:*/		return 0x821CF854;
		  /* 821CF854h */ case    9:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821CF854h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821CF854h case    9:*/		return 0x821CF858;
		  /* 821CF858h */ case   10:  		/* srw R11, R11, R10 */
		/* 821CF858h case   10:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CF858h case   10:*/		return 0x821CF85C;
		  /* 821CF85Ch */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CF85Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF85Ch case   11:*/		return 0x821CF860;
		  /* 821CF860h */ case   12:  		/* bc 12, CR0_EQ, 128 */
		/* 821CF860h case   12:*/		if ( regs.CR[0].eq ) { return 0x821CF8E0;  }
		/* 821CF860h case   12:*/		return 0x821CF864;
		  /* 821CF864h */ case   13:  		/* mr R6, R26 */
		/* 821CF864h case   13:*/		regs.R6 = regs.R26;
		/* 821CF864h case   13:*/		return 0x821CF868;
		  /* 821CF868h */ case   14:  		/* mr R5, R27 */
		/* 821CF868h case   14:*/		regs.R5 = regs.R27;
		/* 821CF868h case   14:*/		return 0x821CF86C;
		  /* 821CF86Ch */ case   15:  		/* mr R3, R28 */
		/* 821CF86Ch case   15:*/		regs.R3 = regs.R28;
		/* 821CF86Ch case   15:*/		return 0x821CF870;
		  /* 821CF870h */ case   16:  		/* bl -24464 */
		/* 821CF870h case   16:*/		regs.LR = 0x821CF874; return 0x821C98E0;
		/* 821CF870h case   16:*/		return 0x821CF874;
		  /* 821CF874h */ case   17:  		/* lwz R11, <#[R31]> */
		/* 821CF874h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CF874h case   17:*/		return 0x821CF878;
		  /* 821CF878h */ case   18:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 821CF878h case   18:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821CF878h case   18:*/		return 0x821CF87C;
		  /* 821CF87Ch */ case   19:  		/* bc 4, CR0_EQ, 100 */
		/* 821CF87Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x821CF8E0;  }
		/* 821CF87Ch case   19:*/		return 0x821CF880;
		  /* 821CF880h */ case   20:  		/* rlwinm R11, R11, 0, 4, 6 */
		/* 821CF880h case   20:*/		cpu::op::rlwinm<0,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821CF880h case   20:*/		return 0x821CF884;
		  /* 821CF884h */ case   21:  		/* cmplw CR6, R11, R24 */
		/* 821CF884h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821CF884h case   21:*/		return 0x821CF888;
		  /* 821CF888h */ case   22:  		/* bc 4, CR6_EQ, 88 */
		/* 821CF888h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821CF8E0;  }
		/* 821CF888h case   22:*/		return 0x821CF88C;
		  /* 821CF88Ch */ case   23:  		/* lwz R11, <#[R25]> */
		/* 821CF88Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CF88Ch case   23:*/		return 0x821CF890;
		  /* 821CF890h */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CF890h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CF890h case   24:*/		return 0x821CF894;
		  /* 821CF894h */ case   25:  		/* bc 4, CR0_EQ, 40 */
		/* 821CF894h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821CF8BC;  }
		/* 821CF894h case   25:*/		return 0x821CF898;
		  /* 821CF898h */ case   26:  		/* lwz R11, <#[R29]> */
		/* 821CF898h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CF898h case   26:*/		return 0x821CF89C;
		  /* 821CF89Ch */ case   27:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF89Ch case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF89Ch case   27:*/		return 0x821CF8A0;
		  /* 821CF8A0h */ case   28:  		/* addic. R3, R11, -4 */
		/* 821CF8A0h case   28:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CF8A0h case   28:*/		return 0x821CF8A4;
		  /* 821CF8A4h */ case   29:  		/* bc 12, CR0_EQ, 24 */
		/* 821CF8A4h case   29:*/		if ( regs.CR[0].eq ) { return 0x821CF8BC;  }
		/* 821CF8A4h case   29:*/		return 0x821CF8A8;
		  /* 821CF8A8h */ case   30:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF8A8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF8A8h case   30:*/		return 0x821CF8AC;
		  /* 821CF8ACh */ case   31:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CF8ACh case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CF8ACh case   31:*/		return 0x821CF8B0;
		  /* 821CF8B0h */ case   32:  		/* addi R11, R11, 1 */
		/* 821CF8B0h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CF8B0h case   32:*/		return 0x821CF8B4;
		  /* 821CF8B4h */ case   33:  		/* cmplw CR6, R11, R10 */
		/* 821CF8B4h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CF8B4h case   33:*/		return 0x821CF8B8;
		  /* 821CF8B8h */ case   34:  		/* bc 4, CR6_GT, 16 */
		/* 821CF8B8h case   34:*/		if ( !regs.CR[6].gt ) { return 0x821CF8C8;  }
		/* 821CF8B8h case   34:*/		return 0x821CF8BC;
	}
	return 0x821CF8BC;
} // Block from 821CF830h-821CF8BCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821CF8BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF8BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF8BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF8BC);
		  /* 821CF8BCh */ case    0:  		/* li R4, 1 */
		/* 821CF8BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CF8BCh case    0:*/		return 0x821CF8C0;
		  /* 821CF8C0h */ case    1:  		/* mr R3, R29 */
		/* 821CF8C0h case    1:*/		regs.R3 = regs.R29;
		/* 821CF8C0h case    1:*/		return 0x821CF8C4;
		  /* 821CF8C4h */ case    2:  		/* bl -272380 */
		/* 821CF8C4h case    2:*/		regs.LR = 0x821CF8C8; return 0x8218D0C8;
		/* 821CF8C4h case    2:*/		return 0x821CF8C8;
	}
	return 0x821CF8C8;
} // Block from 821CF8BCh-821CF8C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CF8C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF8C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF8C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF8C8);
		  /* 821CF8C8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CF8C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF8C8h case    0:*/		return 0x821CF8CC;
		  /* 821CF8CCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821CF8CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821CF8CCh case    1:*/		return 0x821CF8D0;
		  /* 821CF8D0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821CF8D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821CF8D0h case    2:*/		return 0x821CF8D4;
		  /* 821CF8D4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821CF8D4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821CF8D4h case    3:*/		return 0x821CF8D8;
		  /* 821CF8D8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821CF8D8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CF8D8h case    4:*/		return 0x821CF8DC;
		  /* 821CF8DCh */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821CF8DCh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821CF8DCh case    5:*/		return 0x821CF8E0;
	}
	return 0x821CF8E0;
} // Block from 821CF8C8h-821CF8E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CF8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF8E0);
		  /* 821CF8E0h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821CF8E0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821CF8E0h case    0:*/		return 0x821CF8E4;
		  /* 821CF8E4h */ case    1:  		/* b -260 */
		/* 821CF8E4h case    1:*/		return 0x821CF7E0;
		/* 821CF8E4h case    1:*/		return 0x821CF8E8;
	}
	return 0x821CF8E8;
} // Block from 821CF8E0h-821CF8E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF8E8);
		  /* 821CF8E8h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821CF8E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CF8E8h case    0:*/		return 0x821CF8EC;
		  /* 821CF8ECh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CF8ECh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CF8ECh case    1:*/		return 0x821CF8F0;
		  /* 821CF8F0h */ case    2:  		/* bc 4, CR0_EQ, 116 */
		/* 821CF8F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CF964;  }
		/* 821CF8F0h case    2:*/		return 0x821CF8F4;
		  /* 821CF8F4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821CF8F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CF8F4h case    3:*/		return 0x821CF8F8;
		  /* 821CF8F8h */ case    4:  		/* bc 12, CR0_EQ, 108 */
		/* 821CF8F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CF964;  }
		/* 821CF8F8h case    4:*/		return 0x821CF8FC;
		  /* 821CF8FCh */ case    5:  		/* lwz R11, <#[R29]> */
		/* 821CF8FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CF8FCh case    5:*/		return 0x821CF900;
		  /* 821CF900h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF900h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF900h case    6:*/		return 0x821CF904;
		  /* 821CF904h */ case    7:  		/* addi R4, R11, -4 */
		/* 821CF904h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CF904h case    7:*/		return 0x821CF908;
		  /* 821CF908h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CF908h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF908h case    8:*/		return 0x821CF90C;
		  /* 821CF90Ch */ case    9:  		/* addi R10, R11, 3 */
		/* 821CF90Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CF90Ch case    9:*/		return 0x821CF910;
		  /* 821CF910h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821CF910h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CF910h case   10:*/		return 0x821CF914;
		  /* 821CF914h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CF914h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CF914h case   11:*/		return 0x821CF918;
		  /* 821CF918h */ case   12:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821CF918h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CF918h case   12:*/		return 0x821CF91C;
		  /* 821CF91Ch */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821CF91Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CF91Ch case   13:*/		return 0x821CF920;
		  /* 821CF920h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821CF920h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821CF95C;  }
		/* 821CF920h case   14:*/		return 0x821CF924;
		  /* 821CF924h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CF924h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CF924h case   15:*/		return 0x821CF928;
		  /* 821CF928h */ case   16:  		/* mr R3, R29 */
		/* 821CF928h case   16:*/		regs.R3 = regs.R29;
		/* 821CF928h case   16:*/		return 0x821CF92C;
		  /* 821CF92Ch */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CF92Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF92Ch case   17:*/		return 0x821CF930;
		  /* 821CF930h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821CF930h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF930h case   18:*/		return 0x821CF934;
		  /* 821CF934h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CF934h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CF934h case   19:*/		return 0x821CF938;
		  /* 821CF938h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821CF938h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CF938h case   20:*/		return 0x821CF93C;
		  /* 821CF93Ch */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CF93Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF93Ch case   21:*/		return 0x821CF940;
		  /* 821CF940h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821CF940h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF940h case   22:*/		return 0x821CF944;
		  /* 821CF944h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CF944h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CF944h case   23:*/		return 0x821CF948;
		  /* 821CF948h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821CF948h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CF948h case   24:*/		return 0x821CF94C;
		  /* 821CF94Ch */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CF94Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CF94Ch case   25:*/		return 0x821CF950;
		  /* 821CF950h */ case   26:  		/* addi R11, R11, 4 */
		/* 821CF950h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CF950h case   26:*/		return 0x821CF954;
		  /* 821CF954h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CF954h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CF954h case   27:*/		return 0x821CF958;
		  /* 821CF958h */ case   28:  		/* bl -514896 */
		/* 821CF958h case   28:*/		regs.LR = 0x821CF95C; return 0x82151E08;
		/* 821CF958h case   28:*/		return 0x821CF95C;
	}
	return 0x821CF95C;
} // Block from 821CF8E8h-821CF95Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CF95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF95C);
		  /* 821CF95Ch */ case    0:  		/* lwz R31, <#[R30 + 16]> */
		/* 821CF95Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821CF95Ch case    0:*/		return 0x821CF960;
		  /* 821CF960h */ case    1:  		/* b -544 */
		/* 821CF960h case    1:*/		return 0x821CF740;
		/* 821CF960h case    1:*/		return 0x821CF964;
	}
	return 0x821CF964;
} // Block from 821CF95Ch-821CF964h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CF964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF964);
		  /* 821CF964h */ case    0:  		/* lwz R10, <#[R28 + 976]> */
		/* 821CF964h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CF964h case    0:*/		return 0x821CF968;
		  /* 821CF968h */ case    1:  		/* addi R11, R28, 972 */
		/* 821CF968h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 821CF968h case    1:*/		return 0x821CF96C;
		  /* 821CF96Ch */ case    2:  		/* stw R10, <#[R29]> */
		/* 821CF96Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821CF96Ch case    2:*/		return 0x821CF970;
		  /* 821CF970h */ case    3:  		/* stw R29, <#[R28 + 976]> */
		/* 821CF970h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x000003D0) );
		/* 821CF970h case    3:*/		return 0x821CF974;
		  /* 821CF974h */ case    4:  		/* addi R1, R1, 160 */
		/* 821CF974h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CF974h case    4:*/		return 0x821CF978;
		  /* 821CF978h */ case    5:  		/* b -1304288 */
		/* 821CF978h case    5:*/		return 0x82091298;
		/* 821CF978h case    5:*/		return 0x821CF97C;
		  /* 821CF97Ch */ case    6:  		/* nop */
		/* 821CF97Ch case    6:*/		cpu::op::nop();
		/* 821CF97Ch case    6:*/		return 0x821CF980;
	}
	return 0x821CF980;
} // Block from 821CF964h-821CF980h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CF980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF980);
		  /* 821CF980h */ case    0:  		/* mfspr R12, LR */
		/* 821CF980h case    0:*/		regs.R12 = regs.LR;
		/* 821CF980h case    0:*/		return 0x821CF984;
		  /* 821CF984h */ case    1:  		/* bl -1304384 */
		/* 821CF984h case    1:*/		regs.LR = 0x821CF988; return 0x82091244;
		/* 821CF984h case    1:*/		return 0x821CF988;
		  /* 821CF988h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CF988h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CF988h case    2:*/		return 0x821CF98C;
		  /* 821CF98Ch */ case    3:  		/* mr R24, R3 */
		/* 821CF98Ch case    3:*/		regs.R24 = regs.R3;
		/* 821CF98Ch case    3:*/		return 0x821CF990;
		  /* 821CF990h */ case    4:  		/* mr R26, R4 */
		/* 821CF990h case    4:*/		regs.R26 = regs.R4;
		/* 821CF990h case    4:*/		return 0x821CF994;
		  /* 821CF994h */ case    5:  		/* li R23, 0 */
		/* 821CF994h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821CF994h case    5:*/		return 0x821CF998;
		  /* 821CF998h */ case    6:  		/* lwz R11, <#[R26 + 8]> */
		/* 821CF998h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821CF998h case    6:*/		return 0x821CF99C;
		  /* 821CF99Ch */ case    7:  		/* li R30, 0 */
		/* 821CF99Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CF99Ch case    7:*/		return 0x821CF9A0;
		  /* 821CF9A0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821CF9A0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CF9A0h case    8:*/		return 0x821CF9A4;
		  /* 821CF9A4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821CF9A4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CF9B8;  }
		/* 821CF9A4h case    9:*/		return 0x821CF9A8;
		  /* 821CF9A8h */ case   10:  		/* lwz R10, <#[R11 + 12]> */
		/* 821CF9A8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CF9A8h case   10:*/		return 0x821CF9AC;
		  /* 821CF9ACh */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821CF9ACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CF9ACh case   11:*/		return 0x821CF9B0;
		  /* 821CF9B0h */ case   12:  		/* li R10, 1 */
		/* 821CF9B0h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821CF9B0h case   12:*/		return 0x821CF9B4;
		  /* 821CF9B4h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821CF9B4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CF9BC;  }
		/* 821CF9B4h case   13:*/		return 0x821CF9B8;
	}
	return 0x821CF9B8;
} // Block from 821CF980h-821CF9B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CF9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF9B8);
		  /* 821CF9B8h */ case    0:  		/* li R10, 0 */
		/* 821CF9B8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CF9B8h case    0:*/		return 0x821CF9BC;
	}
	return 0x821CF9BC;
} // Block from 821CF9B8h-821CF9BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CF9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF9BC);
		  /* 821CF9BCh */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821CF9BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821CF9BCh case    0:*/		return 0x821CF9C0;
		  /* 821CF9C0h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821CF9C0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFA24;  }
		/* 821CF9C0h case    1:*/		return 0x821CF9C4;
		  /* 821CF9C4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821CF9C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CF9C4h case    2:*/		return 0x821CF9C8;
		  /* 821CF9C8h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821CF9C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CFA24;  }
		/* 821CF9C8h case    3:*/		return 0x821CF9CC;
		  /* 821CF9CCh */ case    4:  		/* lwz R31, <#[R11 + 4]> */
		/* 821CF9CCh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821CF9CCh case    4:*/		return 0x821CF9D0;
		  /* 821CF9D0h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821CF9D0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CF9D0h case    5:*/		return 0x821CF9D4;
		  /* 821CF9D4h */ case    6:  		/* bc 12, CR6_EQ, 80 */
		/* 821CF9D4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CFA24;  }
		/* 821CF9D4h case    6:*/		return 0x821CF9D8;
		  /* 821CF9D8h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CF9D8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CF9D8h case    7:*/		return 0x821CF9DC;
		  /* 821CF9DCh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821CF9DCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CF9DCh case    8:*/		return 0x821CF9E0;
		  /* 821CF9E0h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821CF9E0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CF9F4;  }
		/* 821CF9E0h case    9:*/		return 0x821CF9E4;
		  /* 821CF9E4h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CF9E4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CF9E4h case   10:*/		return 0x821CF9E8;
		  /* 821CF9E8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821CF9E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CF9E8h case   11:*/		return 0x821CF9EC;
		  /* 821CF9ECh */ case   12:  		/* li R11, 1 */
		/* 821CF9ECh case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CF9ECh case   12:*/		return 0x821CF9F0;
		  /* 821CF9F0h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821CF9F0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CF9F8;  }
		/* 821CF9F0h case   13:*/		return 0x821CF9F4;
	}
	return 0x821CF9F4;
} // Block from 821CF9BCh-821CF9F4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CF9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF9F4);
		  /* 821CF9F4h */ case    0:  		/* li R11, 0 */
		/* 821CF9F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CF9F4h case    0:*/		return 0x821CF9F8;
	}
	return 0x821CF9F8;
} // Block from 821CF9F4h-821CF9F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CF9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CF9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CF9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CF9F8);
		  /* 821CF9F8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CF9F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CF9F8h case    0:*/		return 0x821CF9FC;
		  /* 821CF9FCh */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821CF9FCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFA24;  }
		/* 821CF9FCh case    1:*/		return 0x821CFA00;
		  /* 821CFA00h */ case    2:  		/* li R6, 1 */
		/* 821CFA00h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CFA00h case    2:*/		return 0x821CFA04;
		  /* 821CFA04h */ case    3:  		/* mr R5, R26 */
		/* 821CFA04h case    3:*/		regs.R5 = regs.R26;
		/* 821CFA04h case    3:*/		return 0x821CFA08;
		  /* 821CFA08h */ case    4:  		/* mr R4, R31 */
		/* 821CFA08h case    4:*/		regs.R4 = regs.R31;
		/* 821CFA08h case    4:*/		return 0x821CFA0C;
		  /* 821CFA0Ch */ case    5:  		/* mr R3, R24 */
		/* 821CFA0Ch case    5:*/		regs.R3 = regs.R24;
		/* 821CFA0Ch case    5:*/		return 0x821CFA10;
		  /* 821CFA10h */ case    6:  		/* bl -13328 */
		/* 821CFA10h case    6:*/		regs.LR = 0x821CFA14; return 0x821CC600;
		/* 821CFA10h case    6:*/		return 0x821CFA14;
		  /* 821CFA14h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CFA14h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CFA14h case    7:*/		return 0x821CFA18;
		  /* 821CFA18h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821CFA18h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CFA24;  }
		/* 821CFA18h case    8:*/		return 0x821CFA1C;
		  /* 821CFA1Ch */ case    9:  		/* mr R26, R31 */
		/* 821CFA1Ch case    9:*/		regs.R26 = regs.R31;
		/* 821CFA1Ch case    9:*/		return 0x821CFA20;
		  /* 821CFA20h */ case   10:  		/* li R30, 1 */
		/* 821CFA20h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821CFA20h case   10:*/		return 0x821CFA24;
	}
	return 0x821CFA24;
} // Block from 821CF9F8h-821CFA24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CFA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFA24);
		  /* 821CFA24h */ case    0:  		/* lwz R10, <#[R26 + 12]> */
		/* 821CFA24h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000000C) );
		/* 821CFA24h case    0:*/		return 0x821CFA28;
		  /* 821CFA28h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821CFA28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CFA28h case    1:*/		return 0x821CFA2C;
		  /* 821CFA2Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821CFA2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821CFA40;  }
		/* 821CFA2Ch case    2:*/		return 0x821CFA30;
		  /* 821CFA30h */ case    3:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CFA30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CFA30h case    3:*/		return 0x821CFA34;
		  /* 821CFA34h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821CFA34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFA34h case    4:*/		return 0x821CFA38;
		  /* 821CFA38h */ case    5:  		/* li R11, 1 */
		/* 821CFA38h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CFA38h case    5:*/		return 0x821CFA3C;
		  /* 821CFA3Ch */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFA3Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CFA44;  }
		/* 821CFA3Ch case    6:*/		return 0x821CFA40;
	}
	return 0x821CFA40;
} // Block from 821CFA24h-821CFA40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CFA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFA40);
		  /* 821CFA40h */ case    0:  		/* li R11, 0 */
		/* 821CFA40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFA40h case    0:*/		return 0x821CFA44;
	}
	return 0x821CFA44;
} // Block from 821CFA40h-821CFA44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFA44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFA44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFA44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFA44);
		  /* 821CFA44h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CFA44h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CFA44h case    0:*/		return 0x821CFA48;
		  /* 821CFA48h */ case    1:  		/* bc 4, CR0_EQ, 92 */
		/* 821CFA48h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFAA4;  }
		/* 821CFA48h case    1:*/		return 0x821CFA4C;
		  /* 821CFA4Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821CFA4Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CFA4Ch case    2:*/		return 0x821CFA50;
		  /* 821CFA50h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 821CFA50h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CFAA4;  }
		/* 821CFA50h case    3:*/		return 0x821CFA54;
		  /* 821CFA54h */ case    4:  		/* lwz R5, <#[R10]> */
		/* 821CFA54h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 821CFA54h case    4:*/		return 0x821CFA58;
		  /* 821CFA58h */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 821CFA58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821CFA58h case    5:*/		return 0x821CFA5C;
		  /* 821CFA5Ch */ case    6:  		/* bc 12, CR6_EQ, 72 */
		/* 821CFA5Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821CFAA4;  }
		/* 821CFA5Ch case    6:*/		return 0x821CFA60;
		  /* 821CFA60h */ case    7:  		/* lwz R11, <#[R5 + 8]> */
		/* 821CFA60h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821CFA60h case    7:*/		return 0x821CFA64;
		  /* 821CFA64h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821CFA64h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFA64h case    8:*/		return 0x821CFA68;
		  /* 821CFA68h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821CFA68h case    9:*/		if ( regs.CR[6].eq ) { return 0x821CFA7C;  }
		/* 821CFA68h case    9:*/		return 0x821CFA6C;
		  /* 821CFA6Ch */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CFA6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CFA6Ch case   10:*/		return 0x821CFA70;
		  /* 821CFA70h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821CFA70h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFA70h case   11:*/		return 0x821CFA74;
		  /* 821CFA74h */ case   12:  		/* li R11, 1 */
		/* 821CFA74h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CFA74h case   12:*/		return 0x821CFA78;
		  /* 821CFA78h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFA78h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CFA80;  }
		/* 821CFA78h case   13:*/		return 0x821CFA7C;
	}
	return 0x821CFA7C;
} // Block from 821CFA44h-821CFA7Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CFA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFA7C);
		  /* 821CFA7Ch */ case    0:  		/* li R11, 0 */
		/* 821CFA7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFA7Ch case    0:*/		return 0x821CFA80;
	}
	return 0x821CFA80;
} // Block from 821CFA7Ch-821CFA80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFA80);
		  /* 821CFA80h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CFA80h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CFA80h case    0:*/		return 0x821CFA84;
		  /* 821CFA84h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 821CFA84h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFAA4;  }
		/* 821CFA84h case    1:*/		return 0x821CFA88;
		  /* 821CFA88h */ case    2:  		/* li R6, 1 */
		/* 821CFA88h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CFA88h case    2:*/		return 0x821CFA8C;
		  /* 821CFA8Ch */ case    3:  		/* mr R4, R26 */
		/* 821CFA8Ch case    3:*/		regs.R4 = regs.R26;
		/* 821CFA8Ch case    3:*/		return 0x821CFA90;
		  /* 821CFA90h */ case    4:  		/* mr R3, R24 */
		/* 821CFA90h case    4:*/		regs.R3 = regs.R24;
		/* 821CFA90h case    4:*/		return 0x821CFA94;
		  /* 821CFA94h */ case    5:  		/* bl -13460 */
		/* 821CFA94h case    5:*/		regs.LR = 0x821CFA98; return 0x821CC600;
		/* 821CFA94h case    5:*/		return 0x821CFA98;
		  /* 821CFA98h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CFA98h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CFA98h case    6:*/		return 0x821CFA9C;
		  /* 821CFA9Ch */ case    7:  		/* bc 12, CR0_EQ, 8 */
		/* 821CFA9Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821CFAA4;  }
		/* 821CFA9Ch case    7:*/		return 0x821CFAA0;
		  /* 821CFAA0h */ case    8:  		/* li R30, 1 */
		/* 821CFAA0h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821CFAA0h case    8:*/		return 0x821CFAA4;
	}
	return 0x821CFAA4;
} // Block from 821CFA80h-821CFAA4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CFAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFAA4);
		  /* 821CFAA4h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 821CFAA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821CFAA4h case    0:*/		return 0x821CFAA8;
		  /* 821CFAA8h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CFAA8h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFAA8h case    1:*/		return 0x821CFAAC;
		  /* 821CFAACh */ case    2:  		/* addic R10, R10, -1 */
		/* 821CFAACh case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CFAACh case    2:*/		return 0x821CFAB0;
		  /* 821CFAB0h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821CFAB0h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CFAB0h case    3:*/		return 0x821CFAB4;
		  /* 821CFAB4h */ case    4:  		/* and R11, R10, R11 */
		/* 821CFAB4h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CFAB4h case    4:*/		return 0x821CFAB8;
		  /* 821CFAB8h */ case    5:  		/* cmplw CR6, R26, R11 */
		/* 821CFAB8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821CFAB8h case    5:*/		return 0x821CFABC;
		  /* 821CFABCh */ case    6:  		/* bc 12, CR6_EQ, 648 */
		/* 821CFABCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821CFD44;  }
		/* 821CFABCh case    6:*/		return 0x821CFAC0;
		  /* 821CFAC0h */ case    7:  		/* lwz R9, <#[R26 + 48]> */
		/* 821CFAC0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000030) );
		/* 821CFAC0h case    7:*/		return 0x821CFAC4;
		  /* 821CFAC4h */ case    8:  		/* addi R25, R26, 48 */
		/* 821CFAC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R26,0x30);
		/* 821CFAC4h case    8:*/		return 0x821CFAC8;
		  /* 821CFAC8h */ case    9:  		/* rlwinm. R11, R9, 13, 31, 31 */
		/* 821CFAC8h case    9:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R9);
		/* 821CFAC8h case    9:*/		return 0x821CFACC;
		  /* 821CFACCh */ case   10:  		/* bc 4, CR0_EQ, 632 */
		/* 821CFACCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821CFD44;  }
		/* 821CFACCh case   10:*/		return 0x821CFAD0;
		  /* 821CFAD0h */ case   11:  		/* lwz R11, <#[R26 + 20]> */
		/* 821CFAD0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 821CFAD0h case   11:*/		return 0x821CFAD4;
		  /* 821CFAD4h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CFAD4h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFAD4h case   12:*/		return 0x821CFAD8;
		  /* 821CFAD8h */ case   13:  		/* bc 12, CR0_EQ, 620 */
		/* 821CFAD8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821CFD44;  }
		/* 821CFAD8h case   13:*/		return 0x821CFADC;
		  /* 821CFADCh */ case   14:  		/* lwz R11, <#[R26 + 28]> */
		/* 821CFADCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821CFADCh case   14:*/		return 0x821CFAE0;
		  /* 821CFAE0h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CFAE0h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFAE0h case   15:*/		return 0x821CFAE4;
		  /* 821CFAE4h */ case   16:  		/* bc 12, CR0_EQ, 608 */
		/* 821CFAE4h case   16:*/		if ( regs.CR[0].eq ) { return 0x821CFD44;  }
		/* 821CFAE4h case   16:*/		return 0x821CFAE8;
		  /* 821CFAE8h */ case   17:  		/* lwz R11, <#[R26 + 36]> */
		/* 821CFAE8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821CFAE8h case   17:*/		return 0x821CFAEC;
		  /* 821CFAECh */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CFAECh case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFAECh case   18:*/		return 0x821CFAF0;
		  /* 821CFAF0h */ case   19:  		/* bc 12, CR0_EQ, 596 */
		/* 821CFAF0h case   19:*/		if ( regs.CR[0].eq ) { return 0x821CFD44;  }
		/* 821CFAF0h case   19:*/		return 0x821CFAF4;
		  /* 821CFAF4h */ case   20:  		/* lwz R10, <#[R26 + 12]> */
		/* 821CFAF4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000000C) );
		/* 821CFAF4h case   20:*/		return 0x821CFAF8;
		  /* 821CFAF8h */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 821CFAF8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CFAF8h case   21:*/		return 0x821CFAFC;
		  /* 821CFAFCh */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821CFAFCh case   22:*/		if ( regs.CR[6].eq ) { return 0x821CFB10;  }
		/* 821CFAFCh case   22:*/		return 0x821CFB00;
		  /* 821CFB00h */ case   23:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CFB00h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CFB00h case   23:*/		return 0x821CFB04;
		  /* 821CFB04h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821CFB04h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFB04h case   24:*/		return 0x821CFB08;
		  /* 821CFB08h */ case   25:  		/* li R11, 1 */
		/* 821CFB08h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CFB08h case   25:*/		return 0x821CFB0C;
		  /* 821CFB0Ch */ case   26:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFB0Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x821CFB14;  }
		/* 821CFB0Ch case   26:*/		return 0x821CFB10;
	}
	return 0x821CFB10;
} // Block from 821CFAA4h-821CFB10h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB10);
		  /* 821CFB10h */ case    0:  		/* li R11, 0 */
		/* 821CFB10h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFB10h case    0:*/		return 0x821CFB14;
	}
	return 0x821CFB14;
} // Block from 821CFB10h-821CFB14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB14);
		  /* 821CFB14h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CFB14h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CFB14h case    0:*/		return 0x821CFB18;
		  /* 821CFB18h */ case    1:  		/* bc 4, CR0_EQ, 596 */
		/* 821CFB18h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFD6C;  }
		/* 821CFB18h case    1:*/		return 0x821CFB1C;
		  /* 821CFB1Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821CFB1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CFB1Ch case    2:*/		return 0x821CFB20;
		  /* 821CFB20h */ case    3:  		/* li R27, 0 */
		/* 821CFB20h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CFB20h case    3:*/		return 0x821CFB24;
		  /* 821CFB24h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 821CFB24h case    4:*/		if ( regs.CR[6].eq ) { return 0x821CFB2C;  }
		/* 821CFB24h case    4:*/		return 0x821CFB28;
		  /* 821CFB28h */ case    5:  		/* lwz R27, <#[R10]> */
		/* 821CFB28h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 821CFB28h case    5:*/		return 0x821CFB2C;
	}
	return 0x821CFB2C;
} // Block from 821CFB14h-821CFB2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB2C);
		  /* 821CFB2Ch */ case    0:  		/* cmplw CR6, R27, R26 */
		/* 821CFB2Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 821CFB2Ch case    0:*/		return 0x821CFB30;
		  /* 821CFB30h */ case    1:  		/* bc 12, CR6_EQ, 532 */
		/* 821CFB30h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CFD44;  }
		/* 821CFB30h case    1:*/		return 0x821CFB34;
		  /* 821CFB34h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821CFB34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821CFB34h case    2:*/		return 0x821CFB38;
		  /* 821CFB38h */ case    3:  		/* bc 12, CR6_EQ, 440 */
		/* 821CFB38h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CFCF0;  }
		/* 821CFB38h case    3:*/		return 0x821CFB3C;
		  /* 821CFB3Ch */ case    4:  		/* rlwinm. R11, R9, 11, 31, 31 */
		/* 821CFB3Ch case    4:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R9);
		/* 821CFB3Ch case    4:*/		return 0x821CFB40;
		  /* 821CFB40h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821CFB40h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CFB50;  }
		/* 821CFB40h case    5:*/		return 0x821CFB44;
		  /* 821CFB44h */ case    6:  		/* lwz R11, <#[R27 + 48]> */
		/* 821CFB44h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821CFB44h case    6:*/		return 0x821CFB48;
		  /* 821CFB48h */ case    7:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821CFB48h case    7:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFB48h case    7:*/		return 0x821CFB4C;
		  /* 821CFB4Ch */ case    8:  		/* bc 4, CR0_EQ, 504 */
		/* 821CFB4Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CFD44;  }
		/* 821CFB4Ch case    8:*/		return 0x821CFB50;
	}
	return 0x821CFB50;
} // Block from 821CFB2Ch-821CFB50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB50);
		  /* 821CFB50h */ case    0:  		/* lwz R29, <#[R26 + 8]> */
		/* 821CFB50h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000008) );
		/* 821CFB50h case    0:*/		return 0x821CFB54;
		  /* 821CFB54h */ case    1:  		/* addi R28, R26, 8 */
		/* 821CFB54h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R26,0x8);
		/* 821CFB54h case    1:*/		return 0x821CFB58;
		  /* 821CFB58h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821CFB58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821CFB58h case    2:*/		return 0x821CFB5C;
		  /* 821CFB5Ch */ case    3:  		/* bc 12, CR6_EQ, 228 */
		/* 821CFB5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821CFC40;  }
		/* 821CFB5Ch case    3:*/		return 0x821CFB60;
		  /* 821CFB60h */ case    4:  		/* lwz R31, <#[R29 + 4]> */
		/* 821CFB60h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821CFB60h case    4:*/		return 0x821CFB64;
		  /* 821CFB64h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 821CFB64h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CFB64h case    5:*/		return 0x821CFB68;
		  /* 821CFB68h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821CFB68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFB68h case    6:*/		return 0x821CFB6C;
		  /* 821CFB6Ch */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821CFB6Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821CFB8C;  }
		/* 821CFB6Ch case    7:*/		return 0x821CFB70;
		  /* 821CFB70h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821CFB70h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFB70h case    8:*/		return 0x821CFB74;
		  /* 821CFB74h */ case    9:  		/* cmplw CR6, R27, R10 */
		/* 821CFB74h case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 821CFB74h case    9:*/		return 0x821CFB78;
		  /* 821CFB78h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821CFB78h case   10:*/		if ( regs.CR[6].eq ) { return 0x821CFB84;  }
		/* 821CFB78h case   10:*/		return 0x821CFB7C;
		  /* 821CFB7Ch */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CFB7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CFB7Ch case   11:*/		return 0x821CFB80;
		  /* 821CFB80h */ case   12:  		/* b -24 */
		/* 821CFB80h case   12:*/		return 0x821CFB68;
		/* 821CFB80h case   12:*/		return 0x821CFB84;
	}
	return 0x821CFB84;
} // Block from 821CFB50h-821CFB84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB84);
		  /* 821CFB84h */ case    0:  		/* li R11, 1 */
		/* 821CFB84h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CFB84h case    0:*/		return 0x821CFB88;
		  /* 821CFB88h */ case    1:  		/* b 8 */
		/* 821CFB88h case    1:*/		return 0x821CFB90;
		/* 821CFB88h case    1:*/		return 0x821CFB8C;
	}
	return 0x821CFB8C;
} // Block from 821CFB84h-821CFB8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB8C);
		  /* 821CFB8Ch */ case    0:  		/* li R11, 0 */
		/* 821CFB8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFB8Ch case    0:*/		return 0x821CFB90;
	}
	return 0x821CFB90;
} // Block from 821CFB8Ch-821CFB90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFB90);
		  /* 821CFB90h */ case    0:  		/* rlwinm. R30, R11, 0, 24, 31 */
		/* 821CFB90h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R11);
		/* 821CFB90h case    0:*/		return 0x821CFB94;
		  /* 821CFB94h */ case    1:  		/* mr R3, R31 */
		/* 821CFB94h case    1:*/		regs.R3 = regs.R31;
		/* 821CFB94h case    1:*/		return 0x821CFB98;
		  /* 821CFB98h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821CFB98h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CFBAC;  }
		/* 821CFB98h case    2:*/		return 0x821CFB9C;
		  /* 821CFB9Ch */ case    3:  		/* mr R5, R24 */
		/* 821CFB9Ch case    3:*/		regs.R5 = regs.R24;
		/* 821CFB9Ch case    3:*/		return 0x821CFBA0;
		  /* 821CFBA0h */ case    4:  		/* mr R4, R26 */
		/* 821CFBA0h case    4:*/		regs.R4 = regs.R26;
		/* 821CFBA0h case    4:*/		return 0x821CFBA4;
		  /* 821CFBA4h */ case    5:  		/* bl 392644 */
		/* 821CFBA4h case    5:*/		regs.LR = 0x821CFBA8; return 0x8222F968;
		/* 821CFBA4h case    5:*/		return 0x821CFBA8;
		  /* 821CFBA8h */ case    6:  		/* b 16 */
		/* 821CFBA8h case    6:*/		return 0x821CFBB8;
		/* 821CFBA8h case    6:*/		return 0x821CFBAC;
	}
	return 0x821CFBAC;
} // Block from 821CFB90h-821CFBACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CFBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFBAC);
		  /* 821CFBACh */ case    0:  		/* mr R5, R27 */
		/* 821CFBACh case    0:*/		regs.R5 = regs.R27;
		/* 821CFBACh case    0:*/		return 0x821CFBB0;
		  /* 821CFBB0h */ case    1:  		/* mr R4, R29 */
		/* 821CFBB0h case    1:*/		regs.R4 = regs.R29;
		/* 821CFBB0h case    1:*/		return 0x821CFBB4;
		  /* 821CFBB4h */ case    2:  		/* bl 392564 */
		/* 821CFBB4h case    2:*/		regs.LR = 0x821CFBB8; return 0x8222F928;
		/* 821CFBB4h case    2:*/		return 0x821CFBB8;
	}
	return 0x821CFBB8;
} // Block from 821CFBACh-821CFBB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CFBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFBB8);
		  /* 821CFBB8h */ case    0:  		/* mr R4, R31 */
		/* 821CFBB8h case    0:*/		regs.R4 = regs.R31;
		/* 821CFBB8h case    0:*/		return 0x821CFBBC;
		  /* 821CFBBCh */ case    1:  		/* mr R3, R24 */
		/* 821CFBBCh case    1:*/		regs.R3 = regs.R24;
		/* 821CFBBCh case    1:*/		return 0x821CFBC0;
		  /* 821CFBC0h */ case    2:  		/* bl -357200 */
		/* 821CFBC0h case    2:*/		regs.LR = 0x821CFBC4; return 0x82178870;
		/* 821CFBC0h case    2:*/		return 0x821CFBC4;
		  /* 821CFBC4h */ case    3:  		/* or. R31, R3, R3 */
		/* 821CFBC4h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821CFBC4h case    3:*/		return 0x821CFBC8;
		  /* 821CFBC8h */ case    4:  		/* bc 12, CR0_EQ, 96 */
		/* 821CFBC8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CFC28;  }
		/* 821CFBC8h case    4:*/		return 0x821CFBCC;
		  /* 821CFBCCh */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CFBCCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CFBCCh case    5:*/		return 0x821CFBD0;
		  /* 821CFBD0h */ case    6:  		/* mr R3, R24 */
		/* 821CFBD0h case    6:*/		regs.R3 = regs.R24;
		/* 821CFBD0h case    6:*/		return 0x821CFBD4;
		  /* 821CFBD4h */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CFBD4h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CFBD4h case    7:*/		return 0x821CFBD8;
		  /* 821CFBD8h */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CFBD8h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CFBD8h case    8:*/		return 0x821CFBDC;
		  /* 821CFBDCh */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821CFBDCh case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821CFBDCh case    9:*/		return 0x821CFBE0;
		  /* 821CFBE0h */ case   10:  		/* bl -440240 */
		/* 821CFBE0h case   10:*/		regs.LR = 0x821CFBE4; return 0x82164430;
		/* 821CFBE0h case   10:*/		return 0x821CFBE4;
		  /* 821CFBE4h */ case   11:  		/* addi R11, R31, -16 */
		/* 821CFBE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821CFBE4h case   11:*/		return 0x821CFBE8;
		  /* 821CFBE8h */ case   12:  		/* add R11, R3, R11 */
		/* 821CFBE8h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821CFBE8h case   12:*/		return 0x821CFBEC;
		  /* 821CFBECh */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821CFBECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFBECh case   13:*/		return 0x821CFBF0;
		  /* 821CFBF0h */ case   14:  		/* cmplw CR6, R10, R26 */
		/* 821CFBF0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821CFBF0h case   14:*/		return 0x821CFBF4;
		  /* 821CFBF4h */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFBF4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821CFBFC;  }
		/* 821CFBF4h case   15:*/		return 0x821CFBF8;
		  /* 821CFBF8h */ case   16:  		/* stw R27, <#[R11]> */
		/* 821CFBF8h case   16:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFBF8h case   16:*/		return 0x821CFBFC;
	}
	return 0x821CFBFC;
} // Block from 821CFBB8h-821CFBFCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CFBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFBFC);
		  /* 821CFBFCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CFBFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CFBFCh case    0:*/		return 0x821CFC00;
		  /* 821CFC00h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821CFC00h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CFC28;  }
		/* 821CFC00h case    1:*/		return 0x821CFC04;
		  /* 821CFC04h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CFC04h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CFC04h case    2:*/		return 0x821CFC08;
		  /* 821CFC08h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821CFC08h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821CFC08h case    3:*/		return 0x821CFC0C;
		  /* 821CFC0Ch */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 821CFC0Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821CFC0Ch case    4:*/		return 0x821CFC10;
		  /* 821CFC10h */ case    5:  		/* bc 12, CR6_EQ, 360 */
		/* 821CFC10h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CFD78;  }
		/* 821CFC10h case    5:*/		return 0x821CFC14;
		  /* 821CFC14h */ case    6:  		/* cmplwi CR6, R11, 90 */
		/* 821CFC14h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821CFC14h case    6:*/		return 0x821CFC18;
		  /* 821CFC18h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 821CFC18h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CFC28;  }
		/* 821CFC18h case    7:*/		return 0x821CFC1C;
		  /* 821CFC1Ch */ case    8:  		/* mr R4, R31 */
		/* 821CFC1Ch case    8:*/		regs.R4 = regs.R31;
		/* 821CFC1Ch case    8:*/		return 0x821CFC20;
		  /* 821CFC20h */ case    9:  		/* mr R3, R24 */
		/* 821CFC20h case    9:*/		regs.R3 = regs.R24;
		/* 821CFC20h case    9:*/		return 0x821CFC24;
		  /* 821CFC24h */ case   10:  		/* bl 375340 */
		/* 821CFC24h case   10:*/		regs.LR = 0x821CFC28; return 0x8222B650;
		/* 821CFC24h case   10:*/		return 0x821CFC28;
	}
	return 0x821CFC28;
} // Block from 821CFBFCh-821CFC28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CFC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFC28);
		  /* 821CFC28h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821CFC28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821CFC28h case    0:*/		return 0x821CFC2C;
		  /* 821CFC2Ch */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821CFC2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821CFC2Ch case    1:*/		return 0x821CFC30;
		  /* 821CFC30h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFC30h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CFC38;  }
		/* 821CFC30h case    2:*/		return 0x821CFC34;
		  /* 821CFC34h */ case    3:  		/* addi R28, R29, 12 */
		/* 821CFC34h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0xC);
		/* 821CFC34h case    3:*/		return 0x821CFC38;
	}
	return 0x821CFC38;
} // Block from 821CFC28h-821CFC38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CFC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFC38);
		  /* 821CFC38h */ case    0:  		/* lwz R29, <#[R28]> */
		/* 821CFC38h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821CFC38h case    0:*/		return 0x821CFC3C;
		  /* 821CFC3Ch */ case    1:  		/* b -228 */
		/* 821CFC3Ch case    1:*/		return 0x821CFB58;
		/* 821CFC3Ch case    1:*/		return 0x821CFC40;
	}
	return 0x821CFC40;
} // Block from 821CFC38h-821CFC40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFC40);
		  /* 821CFC40h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 821CFC40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821CFC40h case    0:*/		return 0x821CFC44;
		  /* 821CFC44h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CFC44h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFC44h case    1:*/		return 0x821CFC48;
		  /* 821CFC48h */ case    2:  		/* bc 4, CR0_EQ, 152 */
		/* 821CFC48h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CFCE0;  }
		/* 821CFC48h case    2:*/		return 0x821CFC4C;
		  /* 821CFC4Ch */ case    3:  		/* mr R30, R11 */
		/* 821CFC4Ch case    3:*/		regs.R30 = regs.R11;
		/* 821CFC4Ch case    3:*/		return 0x821CFC50;
		  /* 821CFC50h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821CFC50h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CFC50h case    4:*/		return 0x821CFC54;
		  /* 821CFC54h */ case    5:  		/* bc 12, CR0_EQ, 140 */
		/* 821CFC54h case    5:*/		if ( regs.CR[0].eq ) { return 0x821CFCE0;  }
		/* 821CFC54h case    5:*/		return 0x821CFC58;
		  /* 821CFC58h */ case    6:  		/* lwz R11, <#[R30 + 12]> */
		/* 821CFC58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821CFC58h case    6:*/		return 0x821CFC5C;
		  /* 821CFC5Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821CFC5Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFC5Ch case    7:*/		return 0x821CFC60;
		  /* 821CFC60h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821CFC60h case    8:*/		if ( regs.CR[6].eq ) { return 0x821CFC74;  }
		/* 821CFC60h case    8:*/		return 0x821CFC64;
		  /* 821CFC64h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CFC64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CFC64h case    9:*/		return 0x821CFC68;
		  /* 821CFC68h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821CFC68h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFC68h case   10:*/		return 0x821CFC6C;
		  /* 821CFC6Ch */ case   11:  		/* li R11, 1 */
		/* 821CFC6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CFC6Ch case   11:*/		return 0x821CFC70;
		  /* 821CFC70h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFC70h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821CFC78;  }
		/* 821CFC70h case   12:*/		return 0x821CFC74;
	}
	return 0x821CFC74;
} // Block from 821CFC40h-821CFC74h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CFC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFC74);
		  /* 821CFC74h */ case    0:  		/* li R11, 0 */
		/* 821CFC74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFC74h case    0:*/		return 0x821CFC78;
	}
	return 0x821CFC78;
} // Block from 821CFC74h-821CFC78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFC78);
		  /* 821CFC78h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CFC78h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CFC78h case    0:*/		return 0x821CFC7C;
		  /* 821CFC7Ch */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 821CFC7Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFCC4;  }
		/* 821CFC7Ch case    1:*/		return 0x821CFC80;
		  /* 821CFC80h */ case    2:  		/* mr R4, R30 */
		/* 821CFC80h case    2:*/		regs.R4 = regs.R30;
		/* 821CFC80h case    2:*/		return 0x821CFC84;
		  /* 821CFC84h */ case    3:  		/* mr R3, R24 */
		/* 821CFC84h case    3:*/		regs.R3 = regs.R24;
		/* 821CFC84h case    3:*/		return 0x821CFC88;
		  /* 821CFC88h */ case    4:  		/* bl -357400 */
		/* 821CFC88h case    4:*/		regs.LR = 0x821CFC8C; return 0x82178870;
		/* 821CFC88h case    4:*/		return 0x821CFC8C;
		  /* 821CFC8Ch */ case    5:  		/* or. R31, R3, R3 */
		/* 821CFC8Ch case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821CFC8Ch case    5:*/		return 0x821CFC90;
		  /* 821CFC90h */ case    6:  		/* bc 12, CR0_EQ, 52 */
		/* 821CFC90h case    6:*/		if ( regs.CR[0].eq ) { return 0x821CFCC4;  }
		/* 821CFC90h case    6:*/		return 0x821CFC94;
		  /* 821CFC94h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CFC94h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CFC94h case    7:*/		return 0x821CFC98;
		  /* 821CFC98h */ case    8:  		/* mr R3, R24 */
		/* 821CFC98h case    8:*/		regs.R3 = regs.R24;
		/* 821CFC98h case    8:*/		return 0x821CFC9C;
		  /* 821CFC9Ch */ case    9:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CFC9Ch case    9:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CFC9Ch case    9:*/		return 0x821CFCA0;
		  /* 821CFCA0h */ case   10:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CFCA0h case   10:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CFCA0h case   10:*/		return 0x821CFCA4;
		  /* 821CFCA4h */ case   11:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821CFCA4h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821CFCA4h case   11:*/		return 0x821CFCA8;
		  /* 821CFCA8h */ case   12:  		/* bl -440440 */
		/* 821CFCA8h case   12:*/		regs.LR = 0x821CFCAC; return 0x82164430;
		/* 821CFCA8h case   12:*/		return 0x821CFCAC;
		  /* 821CFCACh */ case   13:  		/* addi R11, R31, -16 */
		/* 821CFCACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821CFCACh case   13:*/		return 0x821CFCB0;
		  /* 821CFCB0h */ case   14:  		/* add R11, R3, R11 */
		/* 821CFCB0h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821CFCB0h case   14:*/		return 0x821CFCB4;
		  /* 821CFCB4h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821CFCB4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFCB4h case   15:*/		return 0x821CFCB8;
		  /* 821CFCB8h */ case   16:  		/* cmplw CR6, R10, R26 */
		/* 821CFCB8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821CFCB8h case   16:*/		return 0x821CFCBC;
		  /* 821CFCBCh */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 821CFCBCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x821CFCC4;  }
		/* 821CFCBCh case   17:*/		return 0x821CFCC0;
		  /* 821CFCC0h */ case   18:  		/* stw R27, <#[R11]> */
		/* 821CFCC0h case   18:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFCC0h case   18:*/		return 0x821CFCC4;
	}
	return 0x821CFCC4;
} // Block from 821CFC78h-821CFCC4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CFCC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFCC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFCC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFCC4);
		  /* 821CFCC4h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821CFCC4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821CFCC4h case    0:*/		return 0x821CFCC8;
		  /* 821CFCC8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CFCC8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CFCC8h case    1:*/		return 0x821CFCCC;
		  /* 821CFCCCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CFCCCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFCCCh case    2:*/		return 0x821CFCD0;
		  /* 821CFCD0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CFCD0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CFCE0;  }
		/* 821CFCD0h case    3:*/		return 0x821CFCD4;
		  /* 821CFCD4h */ case    4:  		/* mr R30, R11 */
		/* 821CFCD4h case    4:*/		regs.R30 = regs.R11;
		/* 821CFCD4h case    4:*/		return 0x821CFCD8;
		  /* 821CFCD8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CFCD8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFCD8h case    5:*/		return 0x821CFCDC;
		  /* 821CFCDCh */ case    6:  		/* bc 4, CR6_EQ, -132 */
		/* 821CFCDCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CFC58;  }
		/* 821CFCDCh case    6:*/		return 0x821CFCE0;
	}
	return 0x821CFCE0;
} // Block from 821CFCC4h-821CFCE0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CFCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFCE0);
		  /* 821CFCE0h */ case    0:  		/* mr R5, R24 */
		/* 821CFCE0h case    0:*/		regs.R5 = regs.R24;
		/* 821CFCE0h case    0:*/		return 0x821CFCE4;
		  /* 821CFCE4h */ case    1:  		/* mr R4, R27 */
		/* 821CFCE4h case    1:*/		regs.R4 = regs.R27;
		/* 821CFCE4h case    1:*/		return 0x821CFCE8;
		  /* 821CFCE8h */ case    2:  		/* mr R3, R26 */
		/* 821CFCE8h case    2:*/		regs.R3 = regs.R26;
		/* 821CFCE8h case    2:*/		return 0x821CFCEC;
		  /* 821CFCECh */ case    3:  		/* bl 392316 */
		/* 821CFCECh case    3:*/		regs.LR = 0x821CFCF0; return 0x8222F968;
		/* 821CFCECh case    3:*/		return 0x821CFCF0;
	}
	return 0x821CFCF0;
} // Block from 821CFCE0h-821CFCF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CFCF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFCF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFCF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFCF0);
		  /* 821CFCF0h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821CFCF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CFCF0h case    0:*/		return 0x821CFCF4;
		  /* 821CFCF4h */ case    1:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821CFCF4h case    1:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFCF4h case    1:*/		return 0x821CFCF8;
		  /* 821CFCF8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821CFCF8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CFD08;  }
		/* 821CFCF8h case    2:*/		return 0x821CFCFC;
		  /* 821CFCFCh */ case    3:  		/* lwz R11, <#[R27 + 48]> */
		/* 821CFCFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821CFCFCh case    3:*/		return 0x821CFD00;
		  /* 821CFD00h */ case    4:  		/* oris R11, R11, 32 */
		/* 821CFD00h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821CFD00h case    4:*/		return 0x821CFD04;
		  /* 821CFD04h */ case    5:  		/* stw R11, <#[R27 + 48]> */
		/* 821CFD04h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 821CFD04h case    5:*/		return 0x821CFD08;
	}
	return 0x821CFD08;
} // Block from 821CFCF0h-821CFD08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD08);
		  /* 821CFD08h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821CFD08h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821CFD08h case    0:*/		return 0x821CFD0C;
		  /* 821CFD0Ch */ case    1:  		/* li R30, 1 */
		/* 821CFD0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821CFD0Ch case    1:*/		return 0x821CFD10;
		  /* 821CFD10h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CFD10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CFD10h case    2:*/		return 0x821CFD14;
		  /* 821CFD14h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 821CFD14h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFD14h case    3:*/		return 0x821CFD18;
	}
	return 0x821CFD18;
} // Block from 821CFD08h-821CFD18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD18h
// Function '?ReplaceOperandComponent@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAVDependency@2@W4Component@2@02I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD18);
		  /* 821CFD18h */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CFD18h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CFD18h case    0:*/		return 0x821CFD1C;
		  /* 821CFD1Ch */ case    1:  		/* stw R9, <#[R10]> */
		/* 821CFD1Ch case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CFD1Ch case    1:*/		return 0x821CFD20;
		  /* 821CFD20h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CFD20h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CFD20h case    2:*/		return 0x821CFD24;
		  /* 821CFD24h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 821CFD24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFD24h case    3:*/		return 0x821CFD28;
		  /* 821CFD28h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CFD28h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CFD28h case    4:*/		return 0x821CFD2C;
		  /* 821CFD2Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821CFD2Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CFD2Ch case    5:*/		return 0x821CFD30;
		  /* 821CFD30h */ case    6:  		/* lwz R11, <#[R25]> */
		/* 821CFD30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CFD30h case    6:*/		return 0x821CFD34;
		  /* 821CFD34h */ case    7:  		/* oris R11, R11, 64 */
		/* 821CFD34h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821CFD34h case    7:*/		return 0x821CFD38;
		  /* 821CFD38h */ case    8:  		/* stw R27, <#[R26 + 80]> */
		/* 821CFD38h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R26 + 0x00000050) );
		/* 821CFD38h case    8:*/		return 0x821CFD3C;
		  /* 821CFD3Ch */ case    9:  		/* mr R26, R27 */
		/* 821CFD3Ch case    9:*/		regs.R26 = regs.R27;
		/* 821CFD3Ch case    9:*/		return 0x821CFD40;
		  /* 821CFD40h */ case   10:  		/* stw R11, <#[R25]> */
		/* 821CFD40h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CFD40h case   10:*/		return 0x821CFD44;
	}
	return 0x821CFD44;
} // Block from 821CFD18h-821CFD44h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD44);
		  /* 821CFD44h */ case    0:  		/* rlwinm R10, R23, 0, 24, 31 */
		/* 821CFD44h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R23);
		/* 821CFD44h case    0:*/		return 0x821CFD48;
		  /* 821CFD48h */ case    1:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821CFD48h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821CFD48h case    1:*/		return 0x821CFD4C;
		  /* 821CFD4Ch */ case    2:  		/* or R11, R10, R11 */
		/* 821CFD4Ch case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CFD4Ch case    2:*/		return 0x821CFD50;
		  /* 821CFD50h */ case    3:  		/* rlwinm R23, R11, 0, 24, 31 */
		/* 821CFD50h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R23,regs.R11);
		/* 821CFD50h case    3:*/		return 0x821CFD54;
		  /* 821CFD54h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821CFD54h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CFD60;  }
		/* 821CFD54h case    4:*/		return 0x821CFD58;
		  /* 821CFD58h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 821CFD58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821CFD58h case    5:*/		return 0x821CFD5C;
		  /* 821CFD5Ch */ case    6:  		/* bc 4, CR6_EQ, -964 */
		/* 821CFD5Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CF998;  }
		/* 821CFD5Ch case    6:*/		return 0x821CFD60;
	}
	return 0x821CFD60;
} // Block from 821CFD44h-821CFD60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD60);
		  /* 821CFD60h */ case    0:  		/* mr R3, R23 */
		/* 821CFD60h case    0:*/		regs.R3 = regs.R23;
		/* 821CFD60h case    0:*/		return 0x821CFD64;
		  /* 821CFD64h */ case    1:  		/* addi R1, R1, 160 */
		/* 821CFD64h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CFD64h case    1:*/		return 0x821CFD68;
		  /* 821CFD68h */ case    2:  		/* b -1305300 */
		/* 821CFD68h case    2:*/		return 0x82091294;
		/* 821CFD68h case    2:*/		return 0x821CFD6C;
	}
	return 0x821CFD6C;
} // Block from 821CFD60h-821CFD6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD6C);
		  /* 821CFD6Ch */ case    0:  		/* li R4, 4800 */
		/* 821CFD6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821CFD6Ch case    0:*/		return 0x821CFD70;
		  /* 821CFD70h */ case    1:  		/* mr R3, R24 */
		/* 821CFD70h case    1:*/		regs.R3 = regs.R24;
		/* 821CFD70h case    1:*/		return 0x821CFD74;
		  /* 821CFD74h */ case    2:  		/* bl -515852 */
		/* 821CFD74h case    2:*/		regs.LR = 0x821CFD78; return 0x82151E68;
		/* 821CFD74h case    2:*/		return 0x821CFD78;
	}
	return 0x821CFD78;
} // Block from 821CFD6Ch-821CFD78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD78);
		  /* 821CFD78h */ case    0:  		/* lis R11, -32252 */
		/* 821CFD78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821CFD78h case    0:*/		return 0x821CFD7C;
		  /* 821CFD7Ch */ case    1:  		/* li R4, 3500 */
		/* 821CFD7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821CFD7Ch case    1:*/		return 0x821CFD80;
		  /* 821CFD80h */ case    2:  		/* addi R5, R11, -16076 */
		/* 821CFD80h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC134);
		/* 821CFD80h case    2:*/		return 0x821CFD84;
		  /* 821CFD84h */ case    3:  		/* mr R3, R24 */
		/* 821CFD84h case    3:*/		regs.R3 = regs.R24;
		/* 821CFD84h case    3:*/		return 0x821CFD88;
		  /* 821CFD88h */ case    4:  		/* bl -515872 */
		/* 821CFD88h case    4:*/		regs.LR = 0x821CFD8C; return 0x82151E68;
		/* 821CFD88h case    4:*/		return 0x821CFD8C;
		  /* 821CFD8Ch */ case    5:  		/* nop */
		/* 821CFD8Ch case    5:*/		cpu::op::nop();
		/* 821CFD8Ch case    5:*/		return 0x821CFD90;
	}
	return 0x821CFD90;
} // Block from 821CFD78h-821CFD90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CFD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFD90);
		  /* 821CFD90h */ case    0:  		/* mfspr R12, LR */
		/* 821CFD90h case    0:*/		regs.R12 = regs.LR;
		/* 821CFD90h case    0:*/		return 0x821CFD94;
		  /* 821CFD94h */ case    1:  		/* bl -1305424 */
		/* 821CFD94h case    1:*/		regs.LR = 0x821CFD98; return 0x82091244;
		/* 821CFD94h case    1:*/		return 0x821CFD98;
		  /* 821CFD98h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CFD98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CFD98h case    2:*/		return 0x821CFD9C;
		  /* 821CFD9Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CFD9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CFD9Ch case    3:*/		return 0x821CFDA0;
		  /* 821CFDA0h */ case    4:  		/* mr R26, R3 */
		/* 821CFDA0h case    4:*/		regs.R26 = regs.R3;
		/* 821CFDA0h case    4:*/		return 0x821CFDA4;
		  /* 821CFDA4h */ case    5:  		/* li R23, 1 */
		/* 821CFDA4h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821CFDA4h case    5:*/		return 0x821CFDA8;
		  /* 821CFDA8h */ case    6:  		/* li R25, 0 */
		/* 821CFDA8h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821CFDA8h case    6:*/		return 0x821CFDAC;
		  /* 821CFDACh */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CFDACh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFDACh case    7:*/		return 0x821CFDB0;
		  /* 821CFDB0h */ case    8:  		/* li R27, 0 */
		/* 821CFDB0h case    8:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821CFDB0h case    8:*/		return 0x821CFDB4;
		  /* 821CFDB4h */ case    9:  		/* bc 4, CR0_EQ, 308 */
		/* 821CFDB4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CFEE8;  }
		/* 821CFDB4h case    9:*/		return 0x821CFDB8;
		  /* 821CFDB8h */ case   10:  		/* mr R29, R11 */
		/* 821CFDB8h case   10:*/		regs.R29 = regs.R11;
		/* 821CFDB8h case   10:*/		return 0x821CFDBC;
		  /* 821CFDBCh */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821CFDBCh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CFDBCh case   11:*/		return 0x821CFDC0;
		  /* 821CFDC0h */ case   12:  		/* bc 12, CR0_EQ, 296 */
		/* 821CFDC0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821CFEE8;  }
		/* 821CFDC0h case   12:*/		return 0x821CFDC4;
		  /* 821CFDC4h */ case   13:  		/* lwz R11, <#[R29 + 48]> */
		/* 821CFDC4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821CFDC4h case   13:*/		return 0x821CFDC8;
		  /* 821CFDC8h */ case   14:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821CFDC8h case   14:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFDC8h case   14:*/		return 0x821CFDCC;
		  /* 821CFDCCh */ case   15:  		/* bc 12, CR0_EQ, 184 */
		/* 821CFDCCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821CFE84;  }
		/* 821CFDCCh case   15:*/		return 0x821CFDD0;
		  /* 821CFDD0h */ case   16:  		/* lwz R28, <#[R29 + 8]> */
		/* 821CFDD0h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000008) );
		/* 821CFDD0h case   16:*/		return 0x821CFDD4;
		  /* 821CFDD4h */ case   17:  		/* cmplwi CR6, R28, 0 */
		/* 821CFDD4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CFDD4h case   17:*/		return 0x821CFDD8;
		  /* 821CFDD8h */ case   18:  		/* bc 12, CR6_EQ, 172 */
		/* 821CFDD8h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CFE84;  }
		/* 821CFDD8h case   18:*/		return 0x821CFDDC;
		  /* 821CFDDCh */ case   19:  		/* lwz R5, <#[R28 + 4]> */
		/* 821CFDDCh case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000004) );
		/* 821CFDDCh case   19:*/		return 0x821CFDE0;
		  /* 821CFDE0h */ case   20:  		/* lwz R11, <#[R5 + 36]> */
		/* 821CFDE0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000024) );
		/* 821CFDE0h case   20:*/		return 0x821CFDE4;
		  /* 821CFDE4h */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CFDE4h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFDE4h case   21:*/		return 0x821CFDE8;
		  /* 821CFDE8h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821CFDE8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821CFDF4;  }
		/* 821CFDE8h case   22:*/		return 0x821CFDEC;
		  /* 821CFDECh */ case   23:  		/* li R30, 0 */
		/* 821CFDECh case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821CFDECh case   23:*/		return 0x821CFDF0;
		  /* 821CFDF0h */ case   24:  		/* b 16 */
		/* 821CFDF0h case   24:*/		return 0x821CFE00;
		/* 821CFDF0h case   24:*/		return 0x821CFDF4;
	}
	return 0x821CFDF4;
} // Block from 821CFD90h-821CFDF4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821CFDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFDF4);
		  /* 821CFDF4h */ case    0:  		/* lwz R11, <#[R5 + 32]> */
		/* 821CFDF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000020) );
		/* 821CFDF4h case    0:*/		return 0x821CFDF8;
		  /* 821CFDF8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CFDF8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CFDF8h case    1:*/		return 0x821CFDFC;
		  /* 821CFDFCh */ case    2:  		/* addi R30, R11, -40 */
		/* 821CFDFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821CFDFCh case    2:*/		return 0x821CFE00;
	}
	return 0x821CFE00;
} // Block from 821CFDF4h-821CFE00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CFE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFE00);
		  /* 821CFE00h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CFE00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CFE00h case    0:*/		return 0x821CFE04;
		  /* 821CFE04h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CFE04h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CFE04h case    1:*/		return 0x821CFE08;
		  /* 821CFE08h */ case    2:  		/* cmplwi CR6, R11, 11136 */
		/* 821CFE08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002B80);
		/* 821CFE08h case    2:*/		return 0x821CFE0C;
		  /* 821CFE0Ch */ case    3:  		/* bc 12, CR6_EQ, 112 */
		/* 821CFE0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821CFE7C;  }
		/* 821CFE0Ch case    3:*/		return 0x821CFE10;
		  /* 821CFE10h */ case    4:  		/* mr R4, R30 */
		/* 821CFE10h case    4:*/		regs.R4 = regs.R30;
		/* 821CFE10h case    4:*/		return 0x821CFE14;
		  /* 821CFE14h */ case    5:  		/* mr R3, R26 */
		/* 821CFE14h case    5:*/		regs.R3 = regs.R26;
		/* 821CFE14h case    5:*/		return 0x821CFE18;
		  /* 821CFE18h */ case    6:  		/* bl -12320 */
		/* 821CFE18h case    6:*/		regs.LR = 0x821CFE1C; return 0x821CCDF8;
		/* 821CFE18h case    6:*/		return 0x821CFE1C;
		  /* 821CFE1Ch */ case    7:  		/* lwz R11, <#[R29 + 116]> */
		/* 821CFE1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000074) );
		/* 821CFE1Ch case    7:*/		return 0x821CFE20;
		  /* 821CFE20h */ case    8:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 821CFE20h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 821CFE20h case    8:*/		return 0x821CFE24;
		  /* 821CFE24h */ case    9:  		/* addi R31, R11, 16 */
		/* 821CFE24h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x10);
		/* 821CFE24h case    9:*/		return 0x821CFE28;
		  /* 821CFE28h */ case   10:  		/* rlwinm R9, R25, 0, 24, 31 */
		/* 821CFE28h case   10:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R25);
		/* 821CFE28h case   10:*/		return 0x821CFE2C;
		  /* 821CFE2Ch */ case   11:  		/* lwz R11, <#[R11 + 16]> */
		/* 821CFE2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821CFE2Ch case   11:*/		return 0x821CFE30;
		  /* 821CFE30h */ case   12:  		/* or R25, R10, R9 */
		/* 821CFE30h case   12:*/		cpu::op::or<0>(regs,&regs.R25,regs.R10,regs.R9);
		/* 821CFE30h case   12:*/		return 0x821CFE34;
		  /* 821CFE34h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 821CFE34h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CFE34h case   13:*/		return 0x821CFE38;
		  /* 821CFE38h */ case   14:  		/* bc 12, CR6_EQ, 68 */
		/* 821CFE38h case   14:*/		if ( regs.CR[6].eq ) { return 0x821CFE7C;  }
		/* 821CFE38h case   14:*/		return 0x821CFE3C;
		  /* 821CFE3Ch */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 821CFE3Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CFE3Ch case   15:*/		return 0x821CFE40;
		  /* 821CFE40h */ case   16:  		/* bc 12, CR6_EQ, 60 */
		/* 821CFE40h case   16:*/		if ( regs.CR[6].eq ) { return 0x821CFE7C;  }
		/* 821CFE40h case   16:*/		return 0x821CFE44;
		  /* 821CFE44h */ case   17:  		/* lwz R5, <#[R31]> */
		/* 821CFE44h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 821CFE44h case   17:*/		return 0x821CFE48;
		  /* 821CFE48h */ case   18:  		/* lwz R11, <#[R5 + 48]> */
		/* 821CFE48h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 821CFE48h case   18:*/		return 0x821CFE4C;
		  /* 821CFE4Ch */ case   19:  		/* rlwinm. R10, R11, 10, 31, 31 */
		/* 821CFE4Ch case   19:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFE4Ch case   19:*/		return 0x821CFE50;
		  /* 821CFE50h */ case   20:  		/* bc 4, CR0_EQ, 36 */
		/* 821CFE50h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821CFE74;  }
		/* 821CFE50h case   20:*/		return 0x821CFE54;
		  /* 821CFE54h */ case   21:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 821CFE54h case   21:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821CFE54h case   21:*/		return 0x821CFE58;
		  /* 821CFE58h */ case   22:  		/* bc 12, CR0_EQ, 28 */
		/* 821CFE58h case   22:*/		if ( regs.CR[0].eq ) { return 0x821CFE74;  }
		/* 821CFE58h case   22:*/		return 0x821CFE5C;
		  /* 821CFE5Ch */ case   23:  		/* mr R4, R30 */
		/* 821CFE5Ch case   23:*/		regs.R4 = regs.R30;
		/* 821CFE5Ch case   23:*/		return 0x821CFE60;
		  /* 821CFE60h */ case   24:  		/* mr R3, R26 */
		/* 821CFE60h case   24:*/		regs.R3 = regs.R26;
		/* 821CFE60h case   24:*/		return 0x821CFE64;
		  /* 821CFE64h */ case   25:  		/* bl -12396 */
		/* 821CFE64h case   25:*/		regs.LR = 0x821CFE68; return 0x821CCDF8;
		/* 821CFE64h case   25:*/		return 0x821CFE68;
		  /* 821CFE68h */ case   26:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821CFE68h case   26:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CFE68h case   26:*/		return 0x821CFE6C;
		  /* 821CFE6Ch */ case   27:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821CFE6Ch case   27:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821CFE6Ch case   27:*/		return 0x821CFE70;
		  /* 821CFE70h */ case   28:  		/* or R25, R11, R10 */
		/* 821CFE70h case   28:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821CFE70h case   28:*/		return 0x821CFE74;
	}
	return 0x821CFE74;
} // Block from 821CFE00h-821CFE74h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CFE74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFE74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFE74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFE74);
		  /* 821CFE74h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821CFE74h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821CFE74h case    0:*/		return 0x821CFE78;
		  /* 821CFE78h */ case    1:  		/* b -60 */
		/* 821CFE78h case    1:*/		return 0x821CFE3C;
		/* 821CFE78h case    1:*/		return 0x821CFE7C;
	}
	return 0x821CFE7C;
} // Block from 821CFE74h-821CFE7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFE7C);
		  /* 821CFE7Ch */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 821CFE7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 821CFE7Ch case    0:*/		return 0x821CFE80;
		  /* 821CFE80h */ case    1:  		/* b -172 */
		/* 821CFE80h case    1:*/		return 0x821CFDD4;
		/* 821CFE80h case    1:*/		return 0x821CFE84;
	}
	return 0x821CFE84;
} // Block from 821CFE7Ch-821CFE84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFE84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFE84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFE84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFE84);
		  /* 821CFE84h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821CFE84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821CFE84h case    0:*/		return 0x821CFE88;
		  /* 821CFE88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821CFE88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFE88h case    1:*/		return 0x821CFE8C;
		  /* 821CFE8Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821CFE8Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821CFECC;  }
		/* 821CFE8Ch case    2:*/		return 0x821CFE90;
		  /* 821CFE90h */ case    3:  		/* lwz R10, <#[R29 + 48]> */
		/* 821CFE90h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000030) );
		/* 821CFE90h case    3:*/		return 0x821CFE94;
		  /* 821CFE94h */ case    4:  		/* lwz R9, <#[R11 + 4]> */
		/* 821CFE94h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821CFE94h case    4:*/		return 0x821CFE98;
		  /* 821CFE98h */ case    5:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821CFE98h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821CFE98h case    5:*/		return 0x821CFE9C;
		  /* 821CFE9Ch */ case    6:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821CFE9Ch case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821CFE9Ch case    6:*/		return 0x821CFEA0;
		  /* 821CFEA0h */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821CFEA0h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821CFEA0h case    7:*/		return 0x821CFEA4;
		  /* 821CFEA4h */ case    8:  		/* addi R10, R10, 1 */
		/* 821CFEA4h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CFEA4h case    8:*/		return 0x821CFEA8;
		  /* 821CFEA8h */ case    9:  		/* lwz R9, <#[R9 + 40]> */
		/* 821CFEA8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821CFEA8h case    9:*/		return 0x821CFEAC;
		  /* 821CFEACh */ case   10:  		/* slw R8, R23, R8 */
		/* 821CFEACh case   10:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821CFEACh case   10:*/		return 0x821CFEB0;
		  /* 821CFEB0h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CFEB0h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CFEB0h case   11:*/		return 0x821CFEB4;
		  /* 821CFEB4h */ case   12:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821CFEB4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821CFEB4h case   12:*/		return 0x821CFEB8;
		  /* 821CFEB8h */ case   13:  		/* and. R10, R10, R8 */
		/* 821CFEB8h case   13:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821CFEB8h case   13:*/		return 0x821CFEBC;
		  /* 821CFEBCh */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821CFEBCh case   14:*/		if ( !regs.CR[0].eq ) { return 0x821CFEC8;  }
		/* 821CFEBCh case   14:*/		return 0x821CFEC0;
		  /* 821CFEC0h */ case   15:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CFEC0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CFEC0h case   15:*/		return 0x821CFEC4;
		  /* 821CFEC4h */ case   16:  		/* b -60 */
		/* 821CFEC4h case   16:*/		return 0x821CFE88;
		/* 821CFEC4h case   16:*/		return 0x821CFEC8;
	}
	return 0x821CFEC8;
} // Block from 821CFE84h-821CFEC8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821CFEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFEC8);
		  /* 821CFEC8h */ case    0:  		/* mr R27, R23 */
		/* 821CFEC8h case    0:*/		regs.R27 = regs.R23;
		/* 821CFEC8h case    0:*/		return 0x821CFECC;
	}
	return 0x821CFECC;
} // Block from 821CFEC8h-821CFECCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CFECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFECC);
		  /* 821CFECCh */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821CFECCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821CFECCh case    0:*/		return 0x821CFED0;
		  /* 821CFED0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CFED0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CFED0h case    1:*/		return 0x821CFED4;
		  /* 821CFED4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CFED4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFED4h case    2:*/		return 0x821CFED8;
		  /* 821CFED8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CFED8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CFEE8;  }
		/* 821CFED8h case    3:*/		return 0x821CFEDC;
		  /* 821CFEDCh */ case    4:  		/* mr R29, R11 */
		/* 821CFEDCh case    4:*/		regs.R29 = regs.R11;
		/* 821CFEDCh case    4:*/		return 0x821CFEE0;
		  /* 821CFEE0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CFEE0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFEE0h case    5:*/		return 0x821CFEE4;
		  /* 821CFEE4h */ case    6:  		/* bc 4, CR6_EQ, -288 */
		/* 821CFEE4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CFDC4;  }
		/* 821CFEE4h case    6:*/		return 0x821CFEE8;
	}
	return 0x821CFEE8;
} // Block from 821CFECCh-821CFEE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CFEE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFEE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFEE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFEE8);
		  /* 821CFEE8h */ case    0:  		/* rlwinm. R24, R27, 0, 24, 31 */
		/* 821CFEE8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R24,regs.R27);
		/* 821CFEE8h case    0:*/		return 0x821CFEEC;
		  /* 821CFEECh */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821CFEECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CFF10;  }
		/* 821CFEECh case    1:*/		return 0x821CFEF0;
	}
	return 0x821CFEF0;
} // Block from 821CFEE8h-821CFEF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFEF0h
// Function '?MarkLoopBlocks@Compiler@D3DXShader@@AAAXPAVBlock@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFEF0);
		  /* 821CFEF0h */ case    0:  		/* lis R12, 16 */
		/* 821CFEF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x10);
		/* 821CFEF0h case    0:*/		return 0x821CFEF4;
		  /* 821CFEF4h */ case    1:  		/* lwz R11, <#[R26 + 40]> */
		/* 821CFEF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821CFEF4h case    1:*/		return 0x821CFEF8;
		  /* 821CFEF8h */ case    2:  		/* ori R12, R12, 8324 */
		/* 821CFEF8h case    2:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x2084);
		/* 821CFEF8h case    2:*/		return 0x821CFEFC;
		  /* 821CFEFCh */ case    3:  		/* and. R11, R11, R12 */
		/* 821CFEFCh case    3:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R12);
		/* 821CFEFCh case    3:*/		return 0x821CFF00;
		  /* 821CFF00h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821CFF00h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CFF10;  }
		/* 821CFF00h case    4:*/		return 0x821CFF04;
		  /* 821CFF04h */ case    5:  		/* lwz R11, <#[R26 + 44]> */
		/* 821CFF04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821CFF04h case    5:*/		return 0x821CFF08;
		  /* 821CFF08h */ case    6:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821CFF08h case    6:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821CFF08h case    6:*/		return 0x821CFF0C;
		  /* 821CFF0Ch */ case    7:  		/* bc 12, CR0_EQ, 1136 */
		/* 821CFF0Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821D037C;  }
		/* 821CFF0Ch case    7:*/		return 0x821CFF10;
	}
	return 0x821CFF10;
} // Block from 821CFEF0h-821CFF10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CFF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFF10);
		  /* 821CFF10h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821CFF10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821CFF10h case    0:*/		return 0x821CFF14;
		  /* 821CFF14h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CFF14h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CFF14h case    1:*/		return 0x821CFF18;
		  /* 821CFF18h */ case    2:  		/* bc 4, CR0_EQ, 1124 */
		/* 821CFF18h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D037C;  }
		/* 821CFF18h case    2:*/		return 0x821CFF1C;
		  /* 821CFF1Ch */ case    3:  		/* mr R27, R11 */
		/* 821CFF1Ch case    3:*/		regs.R27 = regs.R11;
		/* 821CFF1Ch case    3:*/		return 0x821CFF20;
		  /* 821CFF20h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821CFF20h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CFF20h case    4:*/		return 0x821CFF24;
		  /* 821CFF24h */ case    5:  		/* bc 12, CR0_EQ, 1112 */
		/* 821CFF24h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D037C;  }
		/* 821CFF24h case    5:*/		return 0x821CFF28;
		  /* 821CFF28h */ case    6:  		/* lwz R31, <#[R27 + 28]> */
		/* 821CFF28h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000001C) );
		/* 821CFF28h case    6:*/		return 0x821CFF2C;
		  /* 821CFF2Ch */ case    7:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CFF2Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CFF2Ch case    7:*/		return 0x821CFF30;
		  /* 821CFF30h */ case    8:  		/* bc 4, CR0_EQ, 708 */
		/* 821CFF30h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D01F4;  }
		/* 821CFF30h case    8:*/		return 0x821CFF34;
		  /* 821CFF34h */ case    9:  		/* cmplwi CR0, R31, 0 */
		/* 821CFF34h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821CFF34h case    9:*/		return 0x821CFF38;
		  /* 821CFF38h */ case   10:  		/* bc 12, CR0_EQ, 700 */
		/* 821CFF38h case   10:*/		if ( regs.CR[0].eq ) { return 0x821D01F4;  }
		/* 821CFF38h case   10:*/		return 0x821CFF3C;
		  /* 821CFF3Ch */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CFF3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CFF3Ch case   11:*/		return 0x821CFF40;
		  /* 821CFF40h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CFF40h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CFF40h case   12:*/		return 0x821CFF44;
		  /* 821CFF44h */ case   13:  		/* cmplwi CR6, R11, 15232 */
		/* 821CFF44h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B80);
		/* 821CFF44h case   13:*/		return 0x821CFF48;
		  /* 821CFF48h */ case   14:  		/* bc 4, CR6_EQ, 128 */
		/* 821CFF48h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CFFC8;  }
		/* 821CFF48h case   14:*/		return 0x821CFF4C;
		  /* 821CFF4Ch */ case   15:  		/* lwz R30, <#[R31 + 4]> */
		/* 821CFF4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 821CFF4Ch case   15:*/		return 0x821CFF50;
		  /* 821CFF50h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 821CFF50h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CFF50h case   16:*/		return 0x821CFF54;
		  /* 821CFF54h */ case   17:  		/* bc 12, CR6_EQ, 92 */
		/* 821CFF54h case   17:*/		if ( regs.CR[6].eq ) { return 0x821CFFB0;  }
		/* 821CFF54h case   17:*/		return 0x821CFF58;
		  /* 821CFF58h */ case   18:  		/* lwz R11, <#[R30 + 16]> */
		/* 821CFF58h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821CFF58h case   18:*/		return 0x821CFF5C;
		  /* 821CFF5Ch */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821CFF5Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CFF5Ch case   19:*/		return 0x821CFF60;
		  /* 821CFF60h */ case   20:  		/* bc 12, CR6_EQ, 72 */
		/* 821CFF60h case   20:*/		if ( regs.CR[6].eq ) { return 0x821CFFA8;  }
		/* 821CFF60h case   20:*/		return 0x821CFF64;
		  /* 821CFF64h */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CFF64h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CFF64h case   21:*/		return 0x821CFF68;
		  /* 821CFF68h */ case   22:  		/* mr R3, R26 */
		/* 821CFF68h case   22:*/		regs.R3 = regs.R26;
		/* 821CFF68h case   22:*/		return 0x821CFF6C;
		  /* 821CFF6Ch */ case   23:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821CFF6Ch case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821CFF6Ch case   23:*/		return 0x821CFF70;
		  /* 821CFF70h */ case   24:  		/* cmplwi CR6, R10, 15104 */
		/* 821CFF70h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003B00);
		/* 821CFF70h case   24:*/		return 0x821CFF74;
		  /* 821CFF74h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 821CFF74h case   25:*/		if ( regs.CR[6].eq ) { return 0x821CFF84;  }
		/* 821CFF74h case   25:*/		return 0x821CFF78;
		  /* 821CFF78h */ case   26:  		/* mr R4, R30 */
		/* 821CFF78h case   26:*/		regs.R4 = regs.R30;
		/* 821CFF78h case   26:*/		return 0x821CFF7C;
		  /* 821CFF7Ch */ case   27:  		/* bl 386852 */
		/* 821CFF7Ch case   27:*/		regs.LR = 0x821CFF80; return 0x8222E6A0;
		/* 821CFF7Ch case   27:*/		return 0x821CFF80;
		  /* 821CFF80h */ case   28:  		/* b 40 */
		/* 821CFF80h case   28:*/		return 0x821CFFA8;
		/* 821CFF80h case   28:*/		return 0x821CFF84;
	}
	return 0x821CFF84;
} // Block from 821CFF10h-821CFF84h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CFF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFF84);
		  /* 821CFF84h */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 821CFF84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821CFF84h case    0:*/		return 0x821CFF88;
		  /* 821CFF88h */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821CFF88h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CFF88h case    1:*/		return 0x821CFF8C;
		  /* 821CFF8Ch */ case    2:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CFF8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CFF8Ch case    2:*/		return 0x821CFF90;
		  /* 821CFF90h */ case    3:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821CFF90h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821CFF90h case    3:*/		return 0x821CFF94;
		  /* 821CFF94h */ case    4:  		/* cmplwi CR6, R10, 7040 */
		/* 821CFF94h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00001B80);
		/* 821CFF94h case    4:*/		return 0x821CFF98;
		  /* 821CFF98h */ case    5:  		/* bc 4, CR6_EQ, 1060 */
		/* 821CFF98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D03BC;  }
		/* 821CFF98h case    5:*/		return 0x821CFF9C;
		  /* 821CFF9Ch */ case    6:  		/* li R5, 0 */
		/* 821CFF9Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821CFF9Ch case    6:*/		return 0x821CFFA0;
		  /* 821CFFA0h */ case    7:  		/* lwz R4, <#[R11 + 44]> */
		/* 821CFFA0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CFFA0h case    7:*/		return 0x821CFFA4;
		  /* 821CFFA4h */ case    8:  		/* bl 384452 */
		/* 821CFFA4h case    8:*/		regs.LR = 0x821CFFA8; return 0x8222DD68;
		/* 821CFFA4h case    8:*/		return 0x821CFFA8;
	}
	return 0x821CFFA8;
} // Block from 821CFF84h-821CFFA8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CFFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFFA8);
		  /* 821CFFA8h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821CFFA8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821CFFA8h case    0:*/		return 0x821CFFAC;
		  /* 821CFFACh */ case    1:  		/* b -92 */
		/* 821CFFACh case    1:*/		return 0x821CFF50;
		/* 821CFFACh case    1:*/		return 0x821CFFB0;
	}
	return 0x821CFFB0;
} // Block from 821CFFA8h-821CFFB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CFFB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFFB0);
		  /* 821CFFB0h */ case    0:  		/* mr R4, R31 */
		/* 821CFFB0h case    0:*/		regs.R4 = regs.R31;
		/* 821CFFB0h case    0:*/		return 0x821CFFB4;
		  /* 821CFFB4h */ case    1:  		/* mr R3, R26 */
		/* 821CFFB4h case    1:*/		regs.R3 = regs.R26;
		/* 821CFFB4h case    1:*/		return 0x821CFFB8;
		  /* 821CFFB8h */ case    2:  		/* bl -12184 */
		/* 821CFFB8h case    2:*/		regs.LR = 0x821CFFBC; return 0x821CD020;
		/* 821CFFB8h case    2:*/		return 0x821CFFBC;
		  /* 821CFFBCh */ case    3:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821CFFBCh case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CFFBCh case    3:*/		return 0x821CFFC0;
		  /* 821CFFC0h */ case    4:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821CFFC0h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821CFFC0h case    4:*/		return 0x821CFFC4;
		  /* 821CFFC4h */ case    5:  		/* or R25, R11, R10 */
		/* 821CFFC4h case    5:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821CFFC4h case    5:*/		return 0x821CFFC8;
	}
	return 0x821CFFC8;
} // Block from 821CFFB0h-821CFFC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CFFC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CFFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CFFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CFFC8);
		  /* 821CFFC8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CFFC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CFFC8h case    0:*/		return 0x821CFFCC;
		  /* 821CFFCCh */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821CFFCCh case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821CFFCCh case    1:*/		return 0x821CFFD0;
		  /* 821CFFD0h */ case    2:  		/* cmplwi CR6, R11, 86 */
		/* 821CFFD0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821CFFD0h case    2:*/		return 0x821CFFD4;
		  /* 821CFFD4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821CFFD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D0004;  }
		/* 821CFFD4h case    3:*/		return 0x821CFFD8;
		  /* 821CFFD8h */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 821CFFD8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821CFFD8h case    4:*/		return 0x821CFFDC;
		  /* 821CFFDCh */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821CFFDCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821D0004;  }
		/* 821CFFDCh case    5:*/		return 0x821CFFE0;
		  /* 821CFFE0h */ case    6:  		/* cmplwi CR6, R11, 89 */
		/* 821CFFE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821CFFE0h case    6:*/		return 0x821CFFE4;
		  /* 821CFFE4h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821CFFE4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D0004;  }
		/* 821CFFE4h case    7:*/		return 0x821CFFE8;
		  /* 821CFFE8h */ case    8:  		/* cmplwi CR6, R11, 90 */
		/* 821CFFE8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821CFFE8h case    8:*/		return 0x821CFFEC;
		  /* 821CFFECh */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821CFFECh case    9:*/		if ( regs.CR[6].eq ) { return 0x821D0004;  }
		/* 821CFFECh case    9:*/		return 0x821CFFF0;
		  /* 821CFFF0h */ case   10:  		/* cmplwi CR6, R11, 84 */
		/* 821CFFF0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821CFFF0h case   10:*/		return 0x821CFFF4;
		  /* 821CFFF4h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 821CFFF4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D0004;  }
		/* 821CFFF4h case   11:*/		return 0x821CFFF8;
		  /* 821CFFF8h */ case   12:  		/* cmplwi CR6, R11, 85 */
		/* 821CFFF8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821CFFF8h case   12:*/		return 0x821CFFFC;
		  /* 821CFFFCh */ case   13:  		/* li R11, 0 */
		/* 821CFFFCh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CFFFCh case   13:*/		return 0x821D0000;
		  /* 821D0000h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 821D0000h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D0008;  }
		/* 821D0000h case   14:*/		return 0x821D0004;
	}
	return 0x821D0004;
} // Block from 821CFFC8h-821D0004h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D0004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0004);
		  /* 821D0004h */ case    0:  		/* mr R11, R23 */
		/* 821D0004h case    0:*/		regs.R11 = regs.R23;
		/* 821D0004h case    0:*/		return 0x821D0008;
	}
	return 0x821D0008;
} // Block from 821D0004h-821D0008h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D0008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0008);
		  /* 821D0008h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D0008h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D0008h case    0:*/		return 0x821D000C;
		  /* 821D000Ch */ case    1:  		/* bc 12, CR0_EQ, 92 */
		/* 821D000Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821D0068;  }
		/* 821D000Ch case    1:*/		return 0x821D0010;
		  /* 821D0010h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D0010h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D0010h case    2:*/		return 0x821D0014;
		  /* 821D0014h */ case    3:  		/* mr R3, R26 */
		/* 821D0014h case    3:*/		regs.R3 = regs.R26;
		/* 821D0014h case    3:*/		return 0x821D0018;
		  /* 821D0018h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821D0018h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821D0018h case    4:*/		return 0x821D001C;
		  /* 821D001Ch */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821D001Ch case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821D001Ch case    5:*/		return 0x821D0020;
		  /* 821D0020h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821D0020h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821D0020h case    6:*/		return 0x821D0024;
		  /* 821D0024h */ case    7:  		/* bl -441332 */
		/* 821D0024h case    7:*/		regs.LR = 0x821D0028; return 0x82164430;
		/* 821D0024h case    7:*/		return 0x821D0028;
		  /* 821D0028h */ case    8:  		/* addi R11, R31, -16 */
		/* 821D0028h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821D0028h case    8:*/		return 0x821D002C;
		  /* 821D002Ch */ case    9:  		/* add R11, R3, R11 */
		/* 821D002Ch case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821D002Ch case    9:*/		return 0x821D0030;
		  /* 821D0030h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D0030h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0030h case   10:*/		return 0x821D0034;
		  /* 821D0034h */ case   11:  		/* rlwinm. R10, R10, 0, 30, 31 */
		/* 821D0034h case   11:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821D0034h case   11:*/		return 0x821D0038;
		  /* 821D0038h */ case   12:  		/* bc 12, CR0_EQ, 48 */
		/* 821D0038h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D0068;  }
		/* 821D0038h case   12:*/		return 0x821D003C;
		  /* 821D003Ch */ case   13:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D003Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D003Ch case   13:*/		return 0x821D0040;
		  /* 821D0040h */ case   14:  		/* li R5, 0 */
		/* 821D0040h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D0040h case   14:*/		return 0x821D0044;
		  /* 821D0044h */ case   15:  		/* mr R3, R26 */
		/* 821D0044h case   15:*/		regs.R3 = regs.R26;
		/* 821D0044h case   15:*/		return 0x821D0048;
		  /* 821D0048h */ case   16:  		/* rlwinm R4, R11, 0, 0, 29 */
		/* 821D0048h case   16:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R4,regs.R11);
		/* 821D0048h case   16:*/		return 0x821D004C;
		  /* 821D004Ch */ case   17:  		/* bl 384284 */
		/* 821D004Ch case   17:*/		regs.LR = 0x821D0050; return 0x8222DD68;
		/* 821D004Ch case   17:*/		return 0x821D0050;
		  /* 821D0050h */ case   18:  		/* mr R4, R31 */
		/* 821D0050h case   18:*/		regs.R4 = regs.R31;
		/* 821D0050h case   18:*/		return 0x821D0054;
		  /* 821D0054h */ case   19:  		/* mr R3, R26 */
		/* 821D0054h case   19:*/		regs.R3 = regs.R26;
		/* 821D0054h case   19:*/		return 0x821D0058;
		  /* 821D0058h */ case   20:  		/* bl -12344 */
		/* 821D0058h case   20:*/		regs.LR = 0x821D005C; return 0x821CD020;
		/* 821D0058h case   20:*/		return 0x821D005C;
		  /* 821D005Ch */ case   21:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D005Ch case   21:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D005Ch case   21:*/		return 0x821D0060;
		  /* 821D0060h */ case   22:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821D0060h case   22:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821D0060h case   22:*/		return 0x821D0064;
		  /* 821D0064h */ case   23:  		/* or R25, R11, R10 */
		/* 821D0064h case   23:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821D0064h case   23:*/		return 0x821D0068;
	}
	return 0x821D0068;
} // Block from 821D0008h-821D0068h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D0068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0068);
		  /* 821D0068h */ case    0:  		/* mr R4, R26 */
		/* 821D0068h case    0:*/		regs.R4 = regs.R26;
		/* 821D0068h case    0:*/		return 0x821D006C;
		  /* 821D006Ch */ case    1:  		/* mr R3, R31 */
		/* 821D006Ch case    1:*/		regs.R3 = regs.R31;
		/* 821D006Ch case    1:*/		return 0x821D0070;
		  /* 821D0070h */ case    2:  		/* bl -75488 */
		/* 821D0070h case    2:*/		regs.LR = 0x821D0074; return 0x821BD990;
		/* 821D0070h case    2:*/		return 0x821D0074;
		  /* 821D0074h */ case    3:  		/* or. R29, R3, R3 */
		/* 821D0074h case    3:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821D0074h case    3:*/		return 0x821D0078;
		  /* 821D0078h */ case    4:  		/* bc 12, CR0_EQ, 80 */
		/* 821D0078h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D00C8;  }
		/* 821D0078h case    4:*/		return 0x821D007C;
		  /* 821D007Ch */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 821D007Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821D007Ch case    5:*/		return 0x821D0080;
		  /* 821D0080h */ case    6:  		/* li R30, 0 */
		/* 821D0080h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D0080h case    6:*/		return 0x821D0084;
		  /* 821D0084h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821D0084h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0084h case    7:*/		return 0x821D0088;
		  /* 821D0088h */ case    8:  		/* bc 4, CR6_GT, 40 */
		/* 821D0088h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821D00B0;  }
		/* 821D0088h case    8:*/		return 0x821D008C;
		  /* 821D008Ch */ case    9:  		/* addi R28, R29, 4 */
		/* 821D008Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x4);
		/* 821D008Ch case    9:*/		return 0x821D0090;
		  /* 821D0090h */ case   10:  		/* li R5, 0 */
		/* 821D0090h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D0090h case   10:*/		return 0x821D0094;
		  /* 821D0094h */ case   11:  		/* lwzu R4, <#[R28 + 4]> */
		/* 821D0094h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 821D0094h case   11:*/		return 0x821D0098;
		  /* 821D0098h */ case   12:  		/* mr R3, R26 */
		/* 821D0098h case   12:*/		regs.R3 = regs.R26;
		/* 821D0098h case   12:*/		return 0x821D009C;
		  /* 821D009Ch */ case   13:  		/* bl 384204 */
		/* 821D009Ch case   13:*/		regs.LR = 0x821D00A0; return 0x8222DD68;
		/* 821D009Ch case   13:*/		return 0x821D00A0;
		  /* 821D00A0h */ case   14:  		/* lwz R11, <#[R29 + 4]> */
		/* 821D00A0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821D00A0h case   14:*/		return 0x821D00A4;
		  /* 821D00A4h */ case   15:  		/* addi R30, R30, 1 */
		/* 821D00A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D00A4h case   15:*/		return 0x821D00A8;
		  /* 821D00A8h */ case   16:  		/* cmplw CR6, R30, R11 */
		/* 821D00A8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D00A8h case   16:*/		return 0x821D00AC;
		  /* 821D00ACh */ case   17:  		/* bc 12, CR6_LT, -28 */
		/* 821D00ACh case   17:*/		if ( regs.CR[6].lt ) { return 0x821D0090;  }
		/* 821D00ACh case   17:*/		return 0x821D00B0;
	}
	return 0x821D00B0;
} // Block from 821D0068h-821D00B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D00B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D00B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D00B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D00B0);
		  /* 821D00B0h */ case    0:  		/* mr R4, R31 */
		/* 821D00B0h case    0:*/		regs.R4 = regs.R31;
		/* 821D00B0h case    0:*/		return 0x821D00B4;
		  /* 821D00B4h */ case    1:  		/* mr R3, R26 */
		/* 821D00B4h case    1:*/		regs.R3 = regs.R26;
		/* 821D00B4h case    1:*/		return 0x821D00B8;
		  /* 821D00B8h */ case    2:  		/* bl -12440 */
		/* 821D00B8h case    2:*/		regs.LR = 0x821D00BC; return 0x821CD020;
		/* 821D00B8h case    2:*/		return 0x821D00BC;
		  /* 821D00BCh */ case    3:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D00BCh case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D00BCh case    3:*/		return 0x821D00C0;
		  /* 821D00C0h */ case    4:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821D00C0h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821D00C0h case    4:*/		return 0x821D00C4;
		  /* 821D00C4h */ case    5:  		/* or R25, R11, R10 */
		/* 821D00C4h case    5:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821D00C4h case    5:*/		return 0x821D00C8;
	}
	return 0x821D00C8;
} // Block from 821D00B0h-821D00C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D00C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D00C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D00C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D00C8);
		  /* 821D00C8h */ case    0:  		/* mr R3, R31 */
		/* 821D00C8h case    0:*/		regs.R3 = regs.R31;
		/* 821D00C8h case    0:*/		return 0x821D00CC;
		  /* 821D00CCh */ case    1:  		/* bl -75668 */
		/* 821D00CCh case    1:*/		regs.LR = 0x821D00D0; return 0x821BD938;
		/* 821D00CCh case    1:*/		return 0x821D00D0;
		  /* 821D00D0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D00D0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D00D0h case    2:*/		return 0x821D00D4;
		  /* 821D00D4h */ case    3:  		/* bc 12, CR0_EQ, 136 */
		/* 821D00D4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D015C;  }
		/* 821D00D4h case    3:*/		return 0x821D00D8;
		  /* 821D00D8h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D00D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D00D8h case    4:*/		return 0x821D00DC;
		  /* 821D00DCh */ case    5:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821D00DCh case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821D00DCh case    5:*/		return 0x821D00E0;
		  /* 821D00E0h */ case    6:  		/* cmplwi CR6, R10, 12288 */
		/* 821D00E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821D00E0h case    6:*/		return 0x821D00E4;
		  /* 821D00E4h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 821D00E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D00FC;  }
		/* 821D00E4h case    7:*/		return 0x821D00E8;
		  /* 821D00E8h */ case    8:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821D00E8h case    8:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821D00E8h case    8:*/		return 0x821D00EC;
		  /* 821D00ECh */ case    9:  		/* lis R10, 8 */
		/* 821D00ECh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821D00ECh case    9:*/		return 0x821D00F0;
		  /* 821D00F0h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821D00F0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D00F0h case   10:*/		return 0x821D00F4;
		  /* 821D00F4h */ case   11:  		/* mr R11, R23 */
		/* 821D00F4h case   11:*/		regs.R11 = regs.R23;
		/* 821D00F4h case   11:*/		return 0x821D00F8;
		  /* 821D00F8h */ case   12:  		/* bc 12, CR6_GT, 8 */
		/* 821D00F8h case   12:*/		if ( regs.CR[6].gt ) { return 0x821D0100;  }
		/* 821D00F8h case   12:*/		return 0x821D00FC;
	}
	return 0x821D00FC;
} // Block from 821D00C8h-821D00FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D00FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D00FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D00FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D00FC);
		  /* 821D00FCh */ case    0:  		/* li R11, 0 */
		/* 821D00FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D00FCh case    0:*/		return 0x821D0100;
	}
	return 0x821D0100;
} // Block from 821D00FCh-821D0100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D0100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0100);
		  /* 821D0100h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821D0100h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D0100h case    0:*/		return 0x821D0104;
		  /* 821D0104h */ case    1:  		/* li R6, 0 */
		/* 821D0104h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0104h case    1:*/		return 0x821D0108;
		  /* 821D0108h */ case    2:  		/* addic R10, R11, -1 */
		/* 821D0108h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D0108h case    2:*/		return 0x821D010C;
		  /* 821D010Ch */ case    3:  		/* mr R4, R31 */
		/* 821D010Ch case    3:*/		regs.R4 = regs.R31;
		/* 821D010Ch case    3:*/		return 0x821D0110;
		  /* 821D0110h */ case    4:  		/* subfe R11, R10, R11 */
		/* 821D0110h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D0110h case    4:*/		return 0x821D0114;
		  /* 821D0114h */ case    5:  		/* mr R3, R26 */
		/* 821D0114h case    5:*/		regs.R3 = regs.R26;
		/* 821D0114h case    5:*/		return 0x821D0118;
		  /* 821D0118h */ case    6:  		/* addi R11, R11, 11 */
		/* 821D0118h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821D0118h case    6:*/		return 0x821D011C;
		  /* 821D011Ch */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D011Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D011Ch case    7:*/		return 0x821D0120;
		  /* 821D0120h */ case    8:  		/* lwzx R30, <#[R11 + R31]> */
		/* 821D0120h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821D0120h case    8:*/		return 0x821D0124;
		  /* 821D0124h */ case    9:  		/* lwz R5, <#[R30 + 12]> */
		/* 821D0124h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D0124h case    9:*/		return 0x821D0128;
		  /* 821D0128h */ case   10:  		/* bl -74496 */
		/* 821D0128h case   10:*/		regs.LR = 0x821D012C; return 0x821BDE28;
		/* 821D0128h case   10:*/		return 0x821D012C;
		  /* 821D012Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D012Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D012Ch case   11:*/		return 0x821D0130;
		  /* 821D0130h */ case   12:  		/* bc 4, CR0_EQ, 44 */
		/* 821D0130h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D015C;  }
		/* 821D0130h case   12:*/		return 0x821D0134;
		  /* 821D0134h */ case   13:  		/* li R5, 0 */
		/* 821D0134h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D0134h case   13:*/		return 0x821D0138;
		  /* 821D0138h */ case   14:  		/* mr R4, R30 */
		/* 821D0138h case   14:*/		regs.R4 = regs.R30;
		/* 821D0138h case   14:*/		return 0x821D013C;
		  /* 821D013Ch */ case   15:  		/* mr R3, R26 */
		/* 821D013Ch case   15:*/		regs.R3 = regs.R26;
		/* 821D013Ch case   15:*/		return 0x821D0140;
		  /* 821D0140h */ case   16:  		/* bl 384040 */
		/* 821D0140h case   16:*/		regs.LR = 0x821D0144; return 0x8222DD68;
		/* 821D0140h case   16:*/		return 0x821D0144;
		  /* 821D0144h */ case   17:  		/* mr R4, R31 */
		/* 821D0144h case   17:*/		regs.R4 = regs.R31;
		/* 821D0144h case   17:*/		return 0x821D0148;
		  /* 821D0148h */ case   18:  		/* mr R3, R26 */
		/* 821D0148h case   18:*/		regs.R3 = regs.R26;
		/* 821D0148h case   18:*/		return 0x821D014C;
		  /* 821D014Ch */ case   19:  		/* bl -12588 */
		/* 821D014Ch case   19:*/		regs.LR = 0x821D0150; return 0x821CD020;
		/* 821D014Ch case   19:*/		return 0x821D0150;
		  /* 821D0150h */ case   20:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D0150h case   20:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D0150h case   20:*/		return 0x821D0154;
		  /* 821D0154h */ case   21:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821D0154h case   21:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821D0154h case   21:*/		return 0x821D0158;
		  /* 821D0158h */ case   22:  		/* or R25, R11, R10 */
		/* 821D0158h case   22:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821D0158h case   22:*/		return 0x821D015C;
	}
	return 0x821D015C;
} // Block from 821D0100h-821D015Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D015Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D015C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D015C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D015C);
		  /* 821D015Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D015Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D015Ch case    0:*/		return 0x821D0160;
		  /* 821D0160h */ case    1:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821D0160h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821D0160h case    1:*/		return 0x821D0164;
		  /* 821D0164h */ case    2:  		/* cmplwi CR6, R10, 13184 */
		/* 821D0164h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003380);
		/* 821D0164h case    2:*/		return 0x821D0168;
		  /* 821D0168h */ case    3:  		/* bc 4, CR6_EQ, 116 */
		/* 821D0168h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D01DC;  }
		/* 821D0168h case    3:*/		return 0x821D016C;
		  /* 821D016Ch */ case    4:  		/* li R6, 0 */
		/* 821D016Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D016Ch case    4:*/		return 0x821D0170;
		  /* 821D0170h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821D0170h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821D0170h case    5:*/		return 0x821D0174;
		  /* 821D0174h */ case    6:  		/* li R4, 103 */
		/* 821D0174h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 821D0174h case    6:*/		return 0x821D0178;
		  /* 821D0178h */ case    7:  		/* mr R3, R26 */
		/* 821D0178h case    7:*/		regs.R3 = regs.R26;
		/* 821D0178h case    7:*/		return 0x821D017C;
		  /* 821D017Ch */ case    8:  		/* bl -441676 */
		/* 821D017Ch case    8:*/		regs.LR = 0x821D0180; return 0x82164430;
		/* 821D017Ch case    8:*/		return 0x821D0180;
		  /* 821D0180h */ case    9:  		/* addi R11, R31, -4 */
		/* 821D0180h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFC);
		/* 821D0180h case    9:*/		return 0x821D0184;
		  /* 821D0184h */ case   10:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821D0184h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821D0184h case   10:*/		return 0x821D0188;
		  /* 821D0188h */ case   11:  		/* cmpwi CR6, R11, 6 */
		/* 821D0188h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D0188h case   11:*/		return 0x821D018C;
		  /* 821D018Ch */ case   12:  		/* bc 12, CR6_LT, 80 */
		/* 821D018Ch case   12:*/		if ( regs.CR[6].lt ) { return 0x821D01DC;  }
		/* 821D018Ch case   12:*/		return 0x821D0190;
		  /* 821D0190h */ case   13:  		/* cmpwi CR6, R11, 14 */
		/* 821D0190h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821D0190h case   13:*/		return 0x821D0194;
		  /* 821D0194h */ case   14:  		/* bc 12, CR6_GT, 72 */
		/* 821D0194h case   14:*/		if ( regs.CR[6].gt ) { return 0x821D01DC;  }
		/* 821D0194h case   14:*/		return 0x821D0198;
		  /* 821D0198h */ case   15:  		/* li R30, 0 */
		/* 821D0198h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D0198h case   15:*/		return 0x821D019C;
		  /* 821D019Ch */ case   16:  		/* addi R29, R31, 40 */
		/* 821D019Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x28);
		/* 821D019Ch case   16:*/		return 0x821D01A0;
		  /* 821D01A0h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D01A0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D01A0h case   17:*/		return 0x821D01A4;
		  /* 821D01A4h */ case   18:  		/* mr R3, R26 */
		/* 821D01A4h case   18:*/		regs.R3 = regs.R26;
		/* 821D01A4h case   18:*/		return 0x821D01A8;
		  /* 821D01A8h */ case   19:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821D01A8h case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821D01A8h case   19:*/		return 0x821D01AC;
		  /* 821D01ACh */ case   20:  		/* cmplw CR6, R30, R11 */
		/* 821D01ACh case   20:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D01ACh case   20:*/		return 0x821D01B0;
		  /* 821D01B0h */ case   21:  		/* bc 4, CR6_LT, 24 */
		/* 821D01B0h case   21:*/		if ( !regs.CR[6].lt ) { return 0x821D01C8;  }
		/* 821D01B0h case   21:*/		return 0x821D01B4;
		  /* 821D01B4h */ case   22:  		/* li R5, 0 */
		/* 821D01B4h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D01B4h case   22:*/		return 0x821D01B8;
		  /* 821D01B8h */ case   23:  		/* lwzu R4, <#[R29 + 4]> */
		/* 821D01B8h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821D01B8h case   23:*/		return 0x821D01BC;
		  /* 821D01BCh */ case   24:  		/* bl 383916 */
		/* 821D01BCh case   24:*/		regs.LR = 0x821D01C0; return 0x8222DD68;
		/* 821D01BCh case   24:*/		return 0x821D01C0;
		  /* 821D01C0h */ case   25:  		/* addi R30, R30, 1 */
		/* 821D01C0h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D01C0h case   25:*/		return 0x821D01C4;
		  /* 821D01C4h */ case   26:  		/* b -36 */
		/* 821D01C4h case   26:*/		return 0x821D01A0;
		/* 821D01C4h case   26:*/		return 0x821D01C8;
	}
	return 0x821D01C8;
} // Block from 821D015Ch-821D01C8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821D01C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D01C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D01C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D01C8);
		  /* 821D01C8h */ case    0:  		/* mr R4, R31 */
		/* 821D01C8h case    0:*/		regs.R4 = regs.R31;
		/* 821D01C8h case    0:*/		return 0x821D01CC;
		  /* 821D01CCh */ case    1:  		/* bl -12716 */
		/* 821D01CCh case    1:*/		regs.LR = 0x821D01D0; return 0x821CD020;
		/* 821D01CCh case    1:*/		return 0x821D01D0;
	}
	return 0x821D01D0;
} // Block from 821D01C8h-821D01D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D01D0h
// Function '?FindPossibleLoopArrayAccesses@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAVDependency@2@PAULoop@2@PAUInductionVariable@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D01D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D01D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D01D0);
		  /* 821D01D0h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D01D0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D01D0h case    0:*/		return 0x821D01D4;
		  /* 821D01D4h */ case    1:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821D01D4h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821D01D4h case    1:*/		return 0x821D01D8;
		  /* 821D01D8h */ case    2:  		/* or R25, R11, R10 */
		/* 821D01D8h case    2:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821D01D8h case    2:*/		return 0x821D01DC;
	}
	return 0x821D01DC;
} // Block from 821D01D0h-821D01DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D01DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D01DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D01DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D01DC);
		  /* 821D01DCh */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821D01DCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821D01DCh case    0:*/		return 0x821D01E0;
		  /* 821D01E0h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821D01E0h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821D01E0h case    1:*/		return 0x821D01E4;
		  /* 821D01E4h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D01E4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D01E4h case    2:*/		return 0x821D01E8;
		  /* 821D01E8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821D01E8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D01F4;  }
		/* 821D01E8h case    3:*/		return 0x821D01EC;
		  /* 821D01ECh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821D01ECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D01ECh case    4:*/		return 0x821D01F0;
		  /* 821D01F0h */ case    5:  		/* bc 4, CR6_EQ, -692 */
		/* 821D01F0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CFF3C;  }
		/* 821D01F0h case    5:*/		return 0x821D01F4;
	}
	return 0x821D01F4;
} // Block from 821D01DCh-821D01F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D01F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D01F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D01F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D01F4);
		  /* 821D01F4h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821D01F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821D01F4h case    0:*/		return 0x821D01F8;
		  /* 821D01F8h */ case    1:  		/* bc 12, CR6_EQ, 360 */
		/* 821D01F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D0360;  }
		/* 821D01F8h case    1:*/		return 0x821D01FC;
		  /* 821D01FCh */ case    2:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D01FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D01FCh case    2:*/		return 0x821D0200;
		  /* 821D0200h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821D0200h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0200h case    3:*/		return 0x821D0204;
		  /* 821D0204h */ case    4:  		/* bc 12, CR6_EQ, 348 */
		/* 821D0204h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D0360;  }
		/* 821D0204h case    4:*/		return 0x821D0208;
		  /* 821D0208h */ case    5:  		/* lwz R10, <#[R27 + 48]> */
		/* 821D0208h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 821D0208h case    5:*/		return 0x821D020C;
		  /* 821D020Ch */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 821D020Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D020Ch case    6:*/		return 0x821D0210;
		  /* 821D0210h */ case    7:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821D0210h case    7:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821D0210h case    7:*/		return 0x821D0214;
		  /* 821D0214h */ case    8:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821D0214h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821D0214h case    8:*/		return 0x821D0218;
		  /* 821D0218h */ case    9:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821D0218h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821D0218h case    9:*/		return 0x821D021C;
		  /* 821D021Ch */ case   10:  		/* addi R10, R10, 1 */
		/* 821D021Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D021Ch case   10:*/		return 0x821D0220;
		  /* 821D0220h */ case   11:  		/* lwz R9, <#[R9 + 40]> */
		/* 821D0220h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821D0220h case   11:*/		return 0x821D0224;
		  /* 821D0224h */ case   12:  		/* slw R8, R23, R8 */
		/* 821D0224h case   12:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821D0224h case   12:*/		return 0x821D0228;
		  /* 821D0228h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D0228h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D0228h case   13:*/		return 0x821D022C;
		  /* 821D022Ch */ case   14:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821D022Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D022Ch case   14:*/		return 0x821D0230;
		  /* 821D0230h */ case   15:  		/* and. R10, R10, R8 */
		/* 821D0230h case   15:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D0230h case   15:*/		return 0x821D0234;
		  /* 821D0234h */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 821D0234h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821D0240;  }
		/* 821D0234h case   16:*/		return 0x821D0238;
		  /* 821D0238h */ case   17:  		/* lwz R11, <#[R11 + 12]> */
		/* 821D0238h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D0238h case   17:*/		return 0x821D023C;
		  /* 821D023Ch */ case   18:  		/* b -60 */
		/* 821D023Ch case   18:*/		return 0x821D0200;
		/* 821D023Ch case   18:*/		return 0x821D0240;
	}
	return 0x821D0240;
} // Block from 821D01F4h-821D0240h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D0240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0240);
		  /* 821D0240h */ case    0:  		/* li R5, 16 */
		/* 821D0240h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821D0240h case    0:*/		return 0x821D0244;
		  /* 821D0244h */ case    1:  		/* mr R4, R27 */
		/* 821D0244h case    1:*/		regs.R4 = regs.R27;
		/* 821D0244h case    1:*/		return 0x821D0248;
		  /* 821D0248h */ case    2:  		/* mr R3, R26 */
		/* 821D0248h case    2:*/		regs.R3 = regs.R26;
		/* 821D0248h case    2:*/		return 0x821D024C;
		  /* 821D024Ch */ case    3:  		/* bl -3636 */
		/* 821D024Ch case    3:*/		regs.LR = 0x821D0250; return 0x821CF418;
		/* 821D024Ch case    3:*/		return 0x821D0250;
		  /* 821D0250h */ case    4:  		/* lwz R11, <#[R26 + 4]> */
		/* 821D0250h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821D0250h case    4:*/		return 0x821D0254;
		  /* 821D0254h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0254h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0254h case    5:*/		return 0x821D0258;
		  /* 821D0258h */ case    6:  		/* lwz R10, <#[R26 + 40]> */
		/* 821D0258h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000028) );
		/* 821D0258h case    6:*/		return 0x821D025C;
		  /* 821D025Ch */ case    7:  		/* ori R10, R10, 8 */
		/* 821D025Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821D025Ch case    7:*/		return 0x821D0260;
		  /* 821D0260h */ case    8:  		/* stw R10, <#[R26 + 40]> */
		/* 821D0260h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000028) );
		/* 821D0260h case    8:*/		return 0x821D0264;
		  /* 821D0264h */ case    9:  		/* bc 4, CR0_EQ, 176 */
		/* 821D0264h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821D0314;  }
		/* 821D0264h case    9:*/		return 0x821D0268;
		  /* 821D0268h */ case   10:  		/* mr R30, R11 */
		/* 821D0268h case   10:*/		regs.R30 = regs.R11;
		/* 821D0268h case   10:*/		return 0x821D026C;
		  /* 821D026Ch */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821D026Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D026Ch case   11:*/		return 0x821D0270;
		  /* 821D0270h */ case   12:  		/* bc 12, CR0_EQ, 164 */
		/* 821D0270h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D0314;  }
		/* 821D0270h case   12:*/		return 0x821D0274;
		  /* 821D0274h */ case   13:  		/* lwz R11, <#[R30 + 48]> */
		/* 821D0274h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821D0274h case   13:*/		return 0x821D0278;
		  /* 821D0278h */ case   14:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 821D0278h case   14:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 821D0278h case   14:*/		return 0x821D027C;
		  /* 821D027Ch */ case   15:  		/* bc 12, CR0_EQ, 124 */
		/* 821D027Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821D02F8;  }
		/* 821D027Ch case   15:*/		return 0x821D0280;
		  /* 821D0280h */ case   16:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D0280h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D0280h case   16:*/		return 0x821D0284;
		  /* 821D0284h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821D0284h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0284h case   17:*/		return 0x821D0288;
		  /* 821D0288h */ case   18:  		/* bc 12, CR6_EQ, 112 */
		/* 821D0288h case   18:*/		if ( regs.CR[6].eq ) { return 0x821D02F8;  }
		/* 821D0288h case   18:*/		return 0x821D028C;
		  /* 821D028Ch */ case   19:  		/* lwz R10, <#[R11]> */
		/* 821D028Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D028Ch case   19:*/		return 0x821D0290;
		  /* 821D0290h */ case   20:  		/* lwz R10, <#[R10 + 48]> */
		/* 821D0290h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821D0290h case   20:*/		return 0x821D0294;
		  /* 821D0294h */ case   21:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821D0294h case   21:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821D0294h case   21:*/		return 0x821D0298;
		  /* 821D0298h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821D0298h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D02A4;  }
		/* 821D0298h case   22:*/		return 0x821D029C;
		  /* 821D029Ch */ case   23:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D029Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D029Ch case   23:*/		return 0x821D02A0;
		  /* 821D02A0h */ case   24:  		/* b -28 */
		/* 821D02A0h case   24:*/		return 0x821D0284;
		/* 821D02A0h case   24:*/		return 0x821D02A4;
	}
	return 0x821D02A4;
} // Block from 821D0240h-821D02A4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D02A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D02A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D02A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D02A4);
		  /* 821D02A4h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821D02A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821D02A4h case    0:*/		return 0x821D02A8;
		  /* 821D02A8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D02A8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D02A8h case    1:*/		return 0x821D02AC;
		  /* 821D02ACh */ case    2:  		/* bc 4, CR0_EQ, 76 */
		/* 821D02ACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D02F8;  }
		/* 821D02ACh case    2:*/		return 0x821D02B0;
		  /* 821D02B0h */ case    3:  		/* lwz R11, <#[R30 + 32]> */
		/* 821D02B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821D02B0h case    3:*/		return 0x821D02B4;
		  /* 821D02B4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D02B4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D02B4h case    4:*/		return 0x821D02B8;
		  /* 821D02B8h */ case    5:  		/* addic. R31, R11, -40 */
		/* 821D02B8h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D02B8h case    5:*/		return 0x821D02BC;
		  /* 821D02BCh */ case    6:  		/* bc 12, CR0_EQ, 60 */
		/* 821D02BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821D02F8;  }
		/* 821D02BCh case    6:*/		return 0x821D02C0;
		  /* 821D02C0h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D02C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D02C0h case    7:*/		return 0x821D02C4;
		  /* 821D02C4h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D02C4h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D02C4h case    8:*/		return 0x821D02C8;
		  /* 821D02C8h */ case    9:  		/* cmplwi CR6, R11, 11520 */
		/* 821D02C8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821D02C8h case    9:*/		return 0x821D02CC;
		  /* 821D02CCh */ case   10:  		/* bc 4, CR6_EQ, 44 */
		/* 821D02CCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D02F8;  }
		/* 821D02CCh case   10:*/		return 0x821D02D0;
		  /* 821D02D0h */ case   11:  		/* li R5, 0 */
		/* 821D02D0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D02D0h case   11:*/		return 0x821D02D4;
		  /* 821D02D4h */ case   12:  		/* lwz R4, <#[R31 + 44]> */
		/* 821D02D4h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D02D4h case   12:*/		return 0x821D02D8;
		  /* 821D02D8h */ case   13:  		/* mr R3, R26 */
		/* 821D02D8h case   13:*/		regs.R3 = regs.R26;
		/* 821D02D8h case   13:*/		return 0x821D02DC;
		  /* 821D02DCh */ case   14:  		/* bl 383628 */
		/* 821D02DCh case   14:*/		regs.LR = 0x821D02E0; return 0x8222DD68;
		/* 821D02DCh case   14:*/		return 0x821D02E0;
		  /* 821D02E0h */ case   15:  		/* mr R4, R31 */
		/* 821D02E0h case   15:*/		regs.R4 = regs.R31;
		/* 821D02E0h case   15:*/		return 0x821D02E4;
		  /* 821D02E4h */ case   16:  		/* mr R3, R26 */
		/* 821D02E4h case   16:*/		regs.R3 = regs.R26;
		/* 821D02E4h case   16:*/		return 0x821D02E8;
		  /* 821D02E8h */ case   17:  		/* bl -13000 */
		/* 821D02E8h case   17:*/		regs.LR = 0x821D02EC; return 0x821CD020;
		/* 821D02E8h case   17:*/		return 0x821D02EC;
		  /* 821D02ECh */ case   18:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D02ECh case   18:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D02ECh case   18:*/		return 0x821D02F0;
		  /* 821D02F0h */ case   19:  		/* rlwinm R10, R25, 0, 24, 31 */
		/* 821D02F0h case   19:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R25);
		/* 821D02F0h case   19:*/		return 0x821D02F4;
		  /* 821D02F4h */ case   20:  		/* or R25, R11, R10 */
		/* 821D02F4h case   20:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821D02F4h case   20:*/		return 0x821D02F8;
	}
	return 0x821D02F8;
} // Block from 821D02A4h-821D02F8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D02F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D02F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D02F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D02F8);
		  /* 821D02F8h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D02F8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D02F8h case    0:*/		return 0x821D02FC;
		  /* 821D02FCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D02FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D02FCh case    1:*/		return 0x821D0300;
		  /* 821D0300h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0300h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0300h case    2:*/		return 0x821D0304;
		  /* 821D0304h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D0304h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D0314;  }
		/* 821D0304h case    3:*/		return 0x821D0308;
		  /* 821D0308h */ case    4:  		/* mr R30, R11 */
		/* 821D0308h case    4:*/		regs.R30 = regs.R11;
		/* 821D0308h case    4:*/		return 0x821D030C;
		  /* 821D030Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D030Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D030Ch case    5:*/		return 0x821D0310;
		  /* 821D0310h */ case    6:  		/* bc 4, CR6_EQ, -156 */
		/* 821D0310h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D0274;  }
		/* 821D0310h case    6:*/		return 0x821D0314;
	}
	return 0x821D0314;
} // Block from 821D02F8h-821D0314h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D0314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0314);
		  /* 821D0314h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821D0314h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821D0314h case    0:*/		return 0x821D0318;
		  /* 821D0318h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0318h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0318h case    1:*/		return 0x821D031C;
		  /* 821D031Ch */ case    2:  		/* bc 4, CR0_EQ, 56 */
		/* 821D031Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D0354;  }
		/* 821D031Ch case    2:*/		return 0x821D0320;
		  /* 821D0320h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821D0320h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D0320h case    3:*/		return 0x821D0324;
		  /* 821D0324h */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 821D0324h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D0354;  }
		/* 821D0324h case    4:*/		return 0x821D0328;
		  /* 821D0328h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D0328h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0328h case    5:*/		return 0x821D032C;
		  /* 821D032Ch */ case    6:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821D032Ch case    6:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821D032Ch case    6:*/		return 0x821D0330;
		  /* 821D0330h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 821D0330h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D033C;  }
		/* 821D0330h case    7:*/		return 0x821D0334;
		  /* 821D0334h */ case    8:  		/* rlwinm R10, R10, 0, 2, 0 */
		/* 821D0334h case    8:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R10,regs.R10);
		/* 821D0334h case    8:*/		return 0x821D0338;
		  /* 821D0338h */ case    9:  		/* stw R10, <#[R11 + 48]> */
		/* 821D0338h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0338h case    9:*/		return 0x821D033C;
	}
	return 0x821D033C;
} // Block from 821D0314h-821D033Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D033Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D033C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D033C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D033C);
		  /* 821D033Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D033Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D033Ch case    0:*/		return 0x821D0340;
		  /* 821D0340h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D0340h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0340h case    1:*/		return 0x821D0344;
		  /* 821D0344h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0344h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0344h case    2:*/		return 0x821D0348;
		  /* 821D0348h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821D0348h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D0354;  }
		/* 821D0348h case    3:*/		return 0x821D034C;
		  /* 821D034Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821D034Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D034Ch case    4:*/		return 0x821D0350;
		  /* 821D0350h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821D0350h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D0328;  }
		/* 821D0350h case    5:*/		return 0x821D0354;
	}
	return 0x821D0354;
} // Block from 821D033Ch-821D0354h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D0354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0354);
		  /* 821D0354h */ case    0:  		/* lwz R11, <#[R26 + 40]> */
		/* 821D0354h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821D0354h case    0:*/		return 0x821D0358;
		  /* 821D0358h */ case    1:  		/* addi R11, R11, -8 */
		/* 821D0358h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF8);
		/* 821D0358h case    1:*/		return 0x821D035C;
		  /* 821D035Ch */ case    2:  		/* stw R11, <#[R26 + 40]> */
		/* 821D035Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821D035Ch case    2:*/		return 0x821D0360;
	}
	return 0x821D0360;
} // Block from 821D0354h-821D0360h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D0360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0360);
		  /* 821D0360h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821D0360h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821D0360h case    0:*/		return 0x821D0364;
		  /* 821D0364h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D0364h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0364h case    1:*/		return 0x821D0368;
		  /* 821D0368h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0368h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0368h case    2:*/		return 0x821D036C;
		  /* 821D036Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D036Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D037C;  }
		/* 821D036Ch case    3:*/		return 0x821D0370;
		  /* 821D0370h */ case    4:  		/* mr R27, R11 */
		/* 821D0370h case    4:*/		regs.R27 = regs.R11;
		/* 821D0370h case    4:*/		return 0x821D0374;
		  /* 821D0374h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D0374h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0374h case    5:*/		return 0x821D0378;
		  /* 821D0378h */ case    6:  		/* bc 4, CR6_EQ, -1104 */
		/* 821D0378h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CFF28;  }
		/* 821D0378h case    6:*/		return 0x821D037C;
	}
	return 0x821D037C;
} // Block from 821D0360h-821D037Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D037Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D037C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D037C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D037C);
		  /* 821D037Ch */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821D037Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821D037Ch case    0:*/		return 0x821D0380;
		  /* 821D0380h */ case    1:  		/* li R28, 0 */
		/* 821D0380h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D0380h case    1:*/		return 0x821D0384;
		  /* 821D0384h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0384h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0384h case    2:*/		return 0x821D0388;
		  /* 821D0388h */ case    3:  		/* bc 4, CR0_EQ, 260 */
		/* 821D0388h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D048C;  }
		/* 821D0388h case    3:*/		return 0x821D038C;
		  /* 821D038Ch */ case    4:  		/* mr R30, R11 */
		/* 821D038Ch case    4:*/		regs.R30 = regs.R11;
		/* 821D038Ch case    4:*/		return 0x821D0390;
		  /* 821D0390h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821D0390h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D0390h case    5:*/		return 0x821D0394;
		  /* 821D0394h */ case    6:  		/* bc 12, CR0_EQ, 248 */
		/* 821D0394h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D048C;  }
		/* 821D0394h case    6:*/		return 0x821D0398;
		  /* 821D0398h */ case    7:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D0398h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D0398h case    7:*/		return 0x821D039C;
		  /* 821D039Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821D039Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D039Ch case    8:*/		return 0x821D03A0;
		  /* 821D03A0h */ case    9:  		/* bc 12, CR6_EQ, 208 */
		/* 821D03A0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D0470;  }
		/* 821D03A0h case    9:*/		return 0x821D03A4;
		  /* 821D03A4h */ case   10:  		/* lwz R29, <#[R11]> */
		/* 821D03A4h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821D03A4h case   10:*/		return 0x821D03A8;
		  /* 821D03A8h */ case   11:  		/* lwz R10, <#[R29 + 48]> */
		/* 821D03A8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000030) );
		/* 821D03A8h case   11:*/		return 0x821D03AC;
		  /* 821D03ACh */ case   12:  		/* rlwinm. R10, R10, 13, 31, 31 */
		/* 821D03ACh case   12:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R10);
		/* 821D03ACh case   12:*/		return 0x821D03B0;
		  /* 821D03B0h */ case   13:  		/* bc 4, CR0_EQ, 20 */
		/* 821D03B0h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D03C4;  }
		/* 821D03B0h case   13:*/		return 0x821D03B4;
		  /* 821D03B4h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D03B4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D03B4h case   14:*/		return 0x821D03B8;
		  /* 821D03B8h */ case   15:  		/* b -28 */
		/* 821D03B8h case   15:*/		return 0x821D039C;
		/* 821D03B8h case   15:*/		return 0x821D03BC;
	}
	return 0x821D03BC;
} // Block from 821D037Ch-821D03BCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D03BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D03BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D03BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D03BC);
		  /* 821D03BCh */ case    0:  		/* li R4, 4800 */
		/* 821D03BCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D03BCh case    0:*/		return 0x821D03C0;
		  /* 821D03C0h */ case    1:  		/* bl -517464 */
		/* 821D03C0h case    1:*/		regs.LR = 0x821D03C4; return 0x82151E68;
		/* 821D03C0h case    1:*/		return 0x821D03C4;
	}
	return 0x821D03C4;
} // Block from 821D03BCh-821D03C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D03C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D03C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D03C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D03C4);
		  /* 821D03C4h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821D03C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821D03C4h case    0:*/		return 0x821D03C8;
		  /* 821D03C8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D03C8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D03C8h case    1:*/		return 0x821D03CC;
		  /* 821D03CCh */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821D03CCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821D03D8;  }
		/* 821D03CCh case    2:*/		return 0x821D03D0;
		  /* 821D03D0h */ case    3:  		/* li R31, 0 */
		/* 821D03D0h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821D03D0h case    3:*/		return 0x821D03D4;
		  /* 821D03D4h */ case    4:  		/* b 16 */
		/* 821D03D4h case    4:*/		return 0x821D03E4;
		/* 821D03D4h case    4:*/		return 0x821D03D8;
	}
	return 0x821D03D8;
} // Block from 821D03C4h-821D03D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D03D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D03D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D03D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D03D8);
		  /* 821D03D8h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821D03D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821D03D8h case    0:*/		return 0x821D03DC;
		  /* 821D03DCh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D03DCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D03DCh case    1:*/		return 0x821D03E0;
		  /* 821D03E0h */ case    2:  		/* addi R31, R11, -40 */
		/* 821D03E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D03E0h case    2:*/		return 0x821D03E4;
	}
	return 0x821D03E4;
} // Block from 821D03D8h-821D03E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D03E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D03E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D03E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D03E4);
		  /* 821D03E4h */ case    0:  		/* mr R4, R26 */
		/* 821D03E4h case    0:*/		regs.R4 = regs.R26;
		/* 821D03E4h case    0:*/		return 0x821D03E8;
		  /* 821D03E8h */ case    1:  		/* mr R3, R31 */
		/* 821D03E8h case    1:*/		regs.R3 = regs.R31;
		/* 821D03E8h case    1:*/		return 0x821D03EC;
		  /* 821D03ECh */ case    2:  		/* bl -441444 */
		/* 821D03ECh case    2:*/		regs.LR = 0x821D03F0; return 0x82164788;
		/* 821D03ECh case    2:*/		return 0x821D03F0;
		  /* 821D03F0h */ case    3:  		/* cmpwi CR6, R3, 5 */
		/* 821D03F0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 821D03F0h case    3:*/		return 0x821D03F4;
		  /* 821D03F4h */ case    4:  		/* bc 4, CR6_EQ, 124 */
		/* 821D03F4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D0470;  }
		/* 821D03F4h case    4:*/		return 0x821D03F8;
		  /* 821D03F8h */ case    5:  		/* lwz R10, <#[R30 + 48]> */
		/* 821D03F8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821D03F8h case    5:*/		return 0x821D03FC;
		  /* 821D03FCh */ case    6:  		/* mr R11, R30 */
		/* 821D03FCh case    6:*/		regs.R11 = regs.R30;
		/* 821D03FCh case    6:*/		return 0x821D0400;
		  /* 821D0400h */ case    7:  		/* b 20 */
		/* 821D0400h case    7:*/		return 0x821D0414;
		/* 821D0400h case    7:*/		return 0x821D0404;
		  /* 821D0404h */ case    8:  		/* lwz R11, <#[R11 + 52]> */
		/* 821D0404h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821D0404h case    8:*/		return 0x821D0408;
		  /* 821D0408h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821D0408h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0408h case    9:*/		return 0x821D040C;
		  /* 821D040Ch */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 821D040Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821D041C;  }
		/* 821D040Ch case   10:*/		return 0x821D0410;
		  /* 821D0410h */ case   11:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D0410h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0410h case   11:*/		return 0x821D0414;
	}
	return 0x821D0414;
} // Block from 821D03E4h-821D0414h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D0414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0414);
		  /* 821D0414h */ case    0:  		/* rlwinm. R10, R10, 13, 31, 31 */
		/* 821D0414h case    0:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R10);
		/* 821D0414h case    0:*/		return 0x821D0418;
		  /* 821D0418h */ case    1:  		/* bc 12, CR0_EQ, -20 */
		/* 821D0418h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D0404;  }
		/* 821D0418h case    1:*/		return 0x821D041C;
	}
	return 0x821D041C;
} // Block from 821D0414h-821D041Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D041Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D041C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D041C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D041C);
		  /* 821D041Ch */ case    0:  		/* mr R10, R23 */
		/* 821D041Ch case    0:*/		regs.R10 = regs.R23;
		/* 821D041Ch case    0:*/		return 0x821D0420;
		  /* 821D0420h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D0420h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0420h case    1:*/		return 0x821D0424;
		  /* 821D0424h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821D0424h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D0450;  }
		/* 821D0424h case    2:*/		return 0x821D0428;
		  /* 821D0428h */ case    3:  		/* lwz R11, <#[R11 + 120]> */
		/* 821D0428h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000078) );
		/* 821D0428h case    3:*/		return 0x821D042C;
		  /* 821D042Ch */ case    4:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821D042Ch case    4:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821D042Ch case    4:*/		return 0x821D0430;
		  /* 821D0430h */ case    5:  		/* addi R10, R11, 1 */
		/* 821D0430h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821D0430h case    5:*/		return 0x821D0434;
		  /* 821D0434h */ case    6:  		/* cmplwi CR6, R10, 4 */
		/* 821D0434h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821D0434h case    6:*/		return 0x821D0438;
		  /* 821D0438h */ case    7:  		/* bc 4, CR6_GT, 24 */
		/* 821D0438h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821D0450;  }
		/* 821D0438h case    7:*/		return 0x821D043C;
		  /* 821D043Ch */ case    8:  		/* mr R4, R31 */
		/* 821D043Ch case    8:*/		regs.R4 = regs.R31;
		/* 821D043Ch case    8:*/		return 0x821D0440;
		  /* 821D0440h */ case    9:  		/* mr R3, R26 */
		/* 821D0440h case    9:*/		regs.R3 = regs.R26;
		/* 821D0440h case    9:*/		return 0x821D0444;
		  /* 821D0444h */ case   10:  		/* bl -75460 */
		/* 821D0444h case   10:*/		regs.LR = 0x821D0448; return 0x821BDD80;
		/* 821D0444h case   10:*/		return 0x821D0448;
		  /* 821D0448h */ case   11:  		/* mr R25, R23 */
		/* 821D0448h case   11:*/		regs.R25 = regs.R23;
		/* 821D0448h case   11:*/		return 0x821D044C;
		  /* 821D044Ch */ case   12:  		/* li R10, 4 */
		/* 821D044Ch case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821D044Ch case   12:*/		return 0x821D0450;
	}
	return 0x821D0450;
} // Block from 821D041Ch-821D0450h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D0450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0450);
		  /* 821D0450h */ case    0:  		/* lwz R11, <#[R29 + 120]> */
		/* 821D0450h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000078) );
		/* 821D0450h case    0:*/		return 0x821D0454;
		  /* 821D0454h */ case    1:  		/* addi R9, R29, 116 */
		/* 821D0454h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x74);
		/* 821D0454h case    1:*/		return 0x821D0458;
	}
	return 0x821D0458;
} // Block from 821D0450h-821D0458h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D0458h
// Function '?RemoveBlockIfUseless@Compiler@D3DXShader@@AAA_NPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0458);
		  /* 821D0458h */ case    0:  		/* rlwinm R8, R11, 0, 29, 31 */
		/* 821D0458h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R11);
		/* 821D0458h case    0:*/		return 0x821D045C;
		  /* 821D045Ch */ case    1:  		/* cmplw CR6, R10, R8 */
		/* 821D045Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821D045Ch case    1:*/		return 0x821D0460;
		  /* 821D0460h */ case    2:  		/* bc 4, CR6_GT, 16 */
		/* 821D0460h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821D0470;  }
		/* 821D0460h case    2:*/		return 0x821D0464;
		  /* 821D0464h */ case    3:  		/* rlwimi R11, R10, 0, 29, 31 */
		/* 821D0464h case    3:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R10);
		/* 821D0464h case    3:*/		return 0x821D0468;
		  /* 821D0468h */ case    4:  		/* mr R28, R23 */
		/* 821D0468h case    4:*/		regs.R28 = regs.R23;
		/* 821D0468h case    4:*/		return 0x821D046C;
		  /* 821D046Ch */ case    5:  		/* stw R11, <#[R9 + 4]> */
		/* 821D046Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821D046Ch case    5:*/		return 0x821D0470;
	}
	return 0x821D0470;
} // Block from 821D0458h-821D0470h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D0470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0470);
		  /* 821D0470h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D0470h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D0470h case    0:*/		return 0x821D0474;
		  /* 821D0474h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D0474h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0474h case    1:*/		return 0x821D0478;
		  /* 821D0478h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0478h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0478h case    2:*/		return 0x821D047C;
		  /* 821D047Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D047Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D048C;  }
		/* 821D047Ch case    3:*/		return 0x821D0480;
		  /* 821D0480h */ case    4:  		/* mr R30, R11 */
		/* 821D0480h case    4:*/		regs.R30 = regs.R11;
		/* 821D0480h case    4:*/		return 0x821D0484;
		  /* 821D0484h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D0484h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0484h case    5:*/		return 0x821D0488;
		  /* 821D0488h */ case    6:  		/* bc 4, CR6_EQ, -240 */
		/* 821D0488h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D0398;  }
		/* 821D0488h case    6:*/		return 0x821D048C;
	}
	return 0x821D048C;
} // Block from 821D0470h-821D048Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D048Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D048C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D048C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D048C);
		  /* 821D048Ch */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D048Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D048Ch case    0:*/		return 0x821D0490;
		  /* 821D0490h */ case    1:  		/* bc 4, CR0_EQ, -276 */
		/* 821D0490h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D037C;  }
		/* 821D0490h case    1:*/		return 0x821D0494;
		  /* 821D0494h */ case    2:  		/* mr R3, R25 */
		/* 821D0494h case    2:*/		regs.R3 = regs.R25;
		/* 821D0494h case    2:*/		return 0x821D0498;
		  /* 821D0498h */ case    3:  		/* addi R1, R1, 160 */
		/* 821D0498h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821D0498h case    3:*/		return 0x821D049C;
		  /* 821D049Ch */ case    4:  		/* b -1307144 */
		/* 821D049Ch case    4:*/		return 0x82091294;
		/* 821D049Ch case    4:*/		return 0x821D04A0;
	}
	return 0x821D04A0;
} // Block from 821D048Ch-821D04A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D04A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D04A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D04A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D04A0);
		  /* 821D04A0h */ case    0:  		/* mfspr R12, LR */
		/* 821D04A0h case    0:*/		regs.R12 = regs.LR;
		/* 821D04A0h case    0:*/		return 0x821D04A4;
		  /* 821D04A4h */ case    1:  		/* bl -1307244 */
		/* 821D04A4h case    1:*/		regs.LR = 0x821D04A8; return 0x82091238;
		/* 821D04A4h case    1:*/		return 0x821D04A8;
		  /* 821D04A8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821D04A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821D04A8h case    2:*/		return 0x821D04AC;
		  /* 821D04ACh */ case    3:  		/* lwz R11, <#[R4 + 12]> */
		/* 821D04ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821D04ACh case    3:*/		return 0x821D04B0;
		  /* 821D04B0h */ case    4:  		/* mr R26, R3 */
		/* 821D04B0h case    4:*/		regs.R26 = regs.R3;
		/* 821D04B0h case    4:*/		return 0x821D04B4;
		  /* 821D04B4h */ case    5:  		/* mr R23, R4 */
		/* 821D04B4h case    5:*/		regs.R23 = regs.R4;
		/* 821D04B4h case    5:*/		return 0x821D04B8;
		  /* 821D04B8h */ case    6:  		/* mr R24, R5 */
		/* 821D04B8h case    6:*/		regs.R24 = regs.R5;
		/* 821D04B8h case    6:*/		return 0x821D04BC;
		  /* 821D04BCh */ case    7:  		/* mr R20, R6 */
		/* 821D04BCh case    7:*/		regs.R20 = regs.R6;
		/* 821D04BCh case    7:*/		return 0x821D04C0;
		  /* 821D04C0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821D04C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D04C0h case    8:*/		return 0x821D04C4;
		  /* 821D04C4h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821D04C4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D04DC;  }
		/* 821D04C4h case    9:*/		return 0x821D04C8;
		  /* 821D04C8h */ case   10:  		/* lwz R21, <#[R11]> */
		/* 821D04C8h case   10:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 821D04C8h case   10:*/		return 0x821D04CC;
		  /* 821D04CCh */ case   11:  		/* cmplw CR6, R21, R24 */
		/* 821D04CCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R24);
		/* 821D04CCh case   11:*/		return 0x821D04D0;
		  /* 821D04D0h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 821D04D0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D04E0;  }
		/* 821D04D0h case   12:*/		return 0x821D04D4;
		  /* 821D04D4h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D04D4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D04D4h case   13:*/		return 0x821D04D8;
		  /* 821D04D8h */ case   14:  		/* b -24 */
		/* 821D04D8h case   14:*/		return 0x821D04C0;
		/* 821D04D8h case   14:*/		return 0x821D04DC;
	}
	return 0x821D04DC;
} // Block from 821D04A0h-821D04DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D04DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D04DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D04DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D04DC);
		  /* 821D04DCh */ case    0:  		/* li R21, 0 */
		/* 821D04DCh case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821D04DCh case    0:*/		return 0x821D04E0;
	}
	return 0x821D04E0;
} // Block from 821D04DCh-821D04E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D04E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D04E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D04E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D04E0);
		  /* 821D04E0h */ case    0:  		/* lwz R11, <#[R26 + 108]> */
		/* 821D04E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 821D04E0h case    0:*/		return 0x821D04E4;
		  /* 821D04E4h */ case    1:  		/* addi R10, R1, 80 */
		/* 821D04E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821D04E4h case    1:*/		return 0x821D04E8;
		  /* 821D04E8h */ case    2:  		/* addi R9, R1, 84 */
		/* 821D04E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x54);
		/* 821D04E8h case    2:*/		return 0x821D04EC;
		  /* 821D04ECh */ case    3:  		/* lwz R22, <#[R26 + 92]> */
		/* 821D04ECh case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R26 + 0x0000005C) );
		/* 821D04ECh case    3:*/		return 0x821D04F0;
		  /* 821D04F0h */ case    4:  		/* addi R25, R11, 1 */
		/* 821D04F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x1);
		/* 821D04F0h case    4:*/		return 0x821D04F4;
		  /* 821D04F4h */ case    5:  		/* ori R30, R10, 1 */
		/* 821D04F4h case    5:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R10,0x1);
		/* 821D04F4h case    5:*/		return 0x821D04F8;
		  /* 821D04F8h */ case    6:  		/* ori R11, R9, 1 */
		/* 821D04F8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R9,0x1);
		/* 821D04F8h case    6:*/		return 0x821D04FC;
		  /* 821D04FCh */ case    7:  		/* stw R25, <#[R26 + 108]> */
		/* 821D04FCh case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R26 + 0x0000006C) );
		/* 821D04FCh case    7:*/		return 0x821D0500;
		  /* 821D0500h */ case    8:  		/* stw R30, <#[R1 + 84]> */
		/* 821D0500h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0500h case    8:*/		return 0x821D0504;
		  /* 821D0504h */ case    9:  		/* mr R31, R24 */
		/* 821D0504h case    9:*/		regs.R31 = regs.R24;
		/* 821D0504h case    9:*/		return 0x821D0508;
		  /* 821D0508h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 821D0508h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0508h case   10:*/		return 0x821D050C;
		  /* 821D050Ch */ case   11:  		/* mr R3, R26 */
		/* 821D050Ch case   11:*/		regs.R3 = regs.R26;
		/* 821D050Ch case   11:*/		return 0x821D0510;
		  /* 821D0510h */ case   12:  		/* bl -407000 */
		/* 821D0510h case   12:*/		regs.LR = 0x821D0514; return 0x8216CF38;
		/* 821D0510h case   12:*/		return 0x821D0514;
		  /* 821D0514h */ case   13:  		/* stw R31, <#[R3 + 80]> */
		/* 821D0514h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000050) );
		/* 821D0514h case   13:*/		return 0x821D0518;
		  /* 821D0518h */ case   14:  		/* stw R3, <#[R31 + 80]> */
		/* 821D0518h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 821D0518h case   14:*/		return 0x821D051C;
		  /* 821D051Ch */ case   15:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821D051Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821D051Ch case   15:*/		return 0x821D0520;
		  /* 821D0520h */ case   16:  		/* lwz R9, <#[R1 + 80]> */
		/* 821D0520h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0520h case   16:*/		return 0x821D0524;
		  /* 821D0524h */ case   17:  		/* stw R9, <#[R11]> */
		/* 821D0524h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0524h case   17:*/		return 0x821D0528;
		  /* 821D0528h */ case   18:  		/* addi R10, R11, 4 */
		/* 821D0528h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D0528h case   18:*/		return 0x821D052C;
		  /* 821D052Ch */ case   19:  		/* lwz R9, <#[R1 + 80]> */
		/* 821D052Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821D052Ch case   19:*/		return 0x821D0530;
		  /* 821D0530h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821D0530h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821D0530h case   20:*/		return 0x821D0534;
		  /* 821D0534h */ case   21:  		/* stw R11, <#[R9]> */
		/* 821D0534h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821D0534h case   21:*/		return 0x821D0538;
		  /* 821D0538h */ case   22:  		/* stw R30, <#[R11 + 4]> */
		/* 821D0538h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0538h case   22:*/		return 0x821D053C;
		  /* 821D053Ch */ case   23:  		/* stw R10, <#[R1 + 80]> */
		/* 821D053Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821D053Ch case   23:*/		return 0x821D0540;
		  /* 821D0540h */ case   24:  		/* lwz R11, <#[R31 + 56]> */
		/* 821D0540h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821D0540h case   24:*/		return 0x821D0544;
		  /* 821D0544h */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 821D0544h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0544h case   25:*/		return 0x821D0548;
		  /* 821D0548h */ case   26:  		/* stw R25, <#[R31 + 44]> */
		/* 821D0548h case   26:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D0548h case   26:*/		return 0x821D054C;
		  /* 821D054Ch */ case   27:  		/* bc 12, CR6_EQ, 44 */
		/* 821D054Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x821D0578;  }
		/* 821D054Ch case   27:*/		return 0x821D0550;
		  /* 821D0550h */ case   28:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D0550h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0550h case   28:*/		return 0x821D0554;
		  /* 821D0554h */ case   29:  		/* rlwinm. R10, R10, 13, 31, 31 */
		/* 821D0554h case   29:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R10);
		/* 821D0554h case   29:*/		return 0x821D0558;
		  /* 821D0558h */ case   30:  		/* bc 12, CR0_EQ, 16 */
		/* 821D0558h case   30:*/		if ( regs.CR[0].eq ) { return 0x821D0568;  }
		/* 821D0558h case   30:*/		return 0x821D055C;
		  /* 821D055Ch */ case   31:  		/* lwz R11, <#[R11 + 60]> */
		/* 821D055Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 821D055Ch case   31:*/		return 0x821D0560;
		  /* 821D0560h */ case   32:  		/* cmplwi CR6, R11, 0 */
		/* 821D0560h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0560h case   32:*/		return 0x821D0564;
		  /* 821D0564h */ case   33:  		/* bc 4, CR6_EQ, -20 */
		/* 821D0564h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821D0550;  }
		/* 821D0564h case   33:*/		return 0x821D0568;
	}
	return 0x821D0568;
} // Block from 821D04E0h-821D0568h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821D0568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0568);
		  /* 821D0568h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D0568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0568h case    0:*/		return 0x821D056C;
		  /* 821D056Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821D056Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D0578;  }
		/* 821D056Ch case    1:*/		return 0x821D0570;
		  /* 821D0570h */ case    2:  		/* mr R31, R11 */
		/* 821D0570h case    2:*/		regs.R31 = regs.R11;
		/* 821D0570h case    2:*/		return 0x821D0574;
		  /* 821D0574h */ case    3:  		/* b -104 */
		/* 821D0574h case    3:*/		return 0x821D050C;
		/* 821D0574h case    3:*/		return 0x821D0578;
	}
	return 0x821D0578;
} // Block from 821D0568h-821D0578h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D0578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0578);
		  /* 821D0578h */ case    0:  		/* cmplw CR6, R31, R24 */
		/* 821D0578h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R24);
		/* 821D0578h case    0:*/		return 0x821D057C;
		  /* 821D057Ch */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821D057Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D05A8;  }
		/* 821D057Ch case    1:*/		return 0x821D0580;
		  /* 821D0580h */ case    2:  		/* lwz R11, <#[R31 + 60]> */
		/* 821D0580h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821D0580h case    2:*/		return 0x821D0584;
		  /* 821D0584h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821D0584h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0584h case    3:*/		return 0x821D0588;
		  /* 821D0588h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821D0588h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D0594;  }
		/* 821D0588h case    4:*/		return 0x821D058C;
		  /* 821D058Ch */ case    5:  		/* lwz R31, <#[R31 + 52]> */
		/* 821D058Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 821D058Ch case    5:*/		return 0x821D0590;
		  /* 821D0590h */ case    6:  		/* b -24 */
		/* 821D0590h case    6:*/		return 0x821D0578;
		/* 821D0590h case    6:*/		return 0x821D0594;
	}
	return 0x821D0594;
} // Block from 821D0578h-821D0594h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D0594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0594);
		  /* 821D0594h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D0594h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0594h case    0:*/		return 0x821D0598;
		  /* 821D0598h */ case    1:  		/* mr R31, R11 */
		/* 821D0598h case    1:*/		regs.R31 = regs.R11;
		/* 821D0598h case    1:*/		return 0x821D059C;
		  /* 821D059Ch */ case    2:  		/* rlwinm. R11, R10, 13, 31, 31 */
		/* 821D059Ch case    2:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R10);
		/* 821D059Ch case    2:*/		return 0x821D05A0;
		  /* 821D05A0h */ case    3:  		/* bc 4, CR0_EQ, -40 */
		/* 821D05A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D0578;  }
		/* 821D05A0h case    3:*/		return 0x821D05A4;
		  /* 821D05A4h */ case    4:  		/* b -152 */
		/* 821D05A4h case    4:*/		return 0x821D050C;
		/* 821D05A4h case    4:*/		return 0x821D05A8;
	}
	return 0x821D05A8;
} // Block from 821D0594h-821D05A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D05A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D05A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D05A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D05A8);
		  /* 821D05A8h */ case    0:  		/* li R6, 0 */
		/* 821D05A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D05A8h case    0:*/		return 0x821D05AC;
		  /* 821D05ACh */ case    1:  		/* mr R5, R25 */
		/* 821D05ACh case    1:*/		regs.R5 = regs.R25;
		/* 821D05ACh case    1:*/		return 0x821D05B0;
		  /* 821D05B0h */ case    2:  		/* addi R4, R1, 80 */
		/* 821D05B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821D05B0h case    2:*/		return 0x821D05B4;
		  /* 821D05B4h */ case    3:  		/* mr R3, R26 */
		/* 821D05B4h case    3:*/		regs.R3 = regs.R26;
		/* 821D05B4h case    3:*/		return 0x821D05B8;
		  /* 821D05B8h */ case    4:  		/* bl -30080 */
		/* 821D05B8h case    4:*/		regs.LR = 0x821D05BC; return 0x821C9038;
		/* 821D05B8h case    4:*/		return 0x821D05BC;
		  /* 821D05BCh */ case    5:  		/* addi R4, R1, 80 */
		/* 821D05BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821D05BCh case    5:*/		return 0x821D05C0;
		  /* 821D05C0h */ case    6:  		/* mr R3, R23 */
		/* 821D05C0h case    6:*/		regs.R3 = regs.R23;
		/* 821D05C0h case    6:*/		return 0x821D05C4;
		  /* 821D05C4h */ case    7:  		/* bl -63596 */
		/* 821D05C4h case    7:*/		regs.LR = 0x821D05C8; return 0x821C0D58;
		/* 821D05C4h case    7:*/		return 0x821D05C8;
		  /* 821D05C8h */ case    8:  		/* lwz R11, <#[R24 + 20]> */
		/* 821D05C8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 821D05C8h case    8:*/		return 0x821D05CC;
		  /* 821D05CCh */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D05CCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D05CCh case    9:*/		return 0x821D05D0;
		  /* 821D05D0h */ case   10:  		/* bc 4, CR0_EQ, 256 */
		/* 821D05D0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821D06D0;  }
		/* 821D05D0h case   10:*/		return 0x821D05D4;
		  /* 821D05D4h */ case   11:  		/* mr R29, R11 */
		/* 821D05D4h case   11:*/		regs.R29 = regs.R11;
		/* 821D05D4h case   11:*/		return 0x821D05D8;
		  /* 821D05D8h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821D05D8h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D05D8h case   12:*/		return 0x821D05DC;
		  /* 821D05DCh */ case   13:  		/* bc 12, CR0_EQ, 244 */
		/* 821D05DCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821D06D0;  }
		/* 821D05DCh case   13:*/		return 0x821D05E0;
		  /* 821D05E0h */ case   14:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D05E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D05E0h case   14:*/		return 0x821D05E4;
		  /* 821D05E4h */ case   15:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D05E4h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D05E4h case   15:*/		return 0x821D05E8;
		  /* 821D05E8h */ case   16:  		/* cmplwi CR6, R11, 14336 */
		/* 821D05E8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821D05E8h case   16:*/		return 0x821D05EC;
		  /* 821D05ECh */ case   17:  		/* bc 4, CR6_EQ, 200 */
		/* 821D05ECh case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D06B4;  }
		/* 821D05ECh case   17:*/		return 0x821D05F0;
		  /* 821D05F0h */ case   18:  		/* li R7, 1 */
		/* 821D05F0h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821D05F0h case   18:*/		return 0x821D05F4;
		  /* 821D05F4h */ case   19:  		/* li R6, 0 */
		/* 821D05F4h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D05F4h case   19:*/		return 0x821D05F8;
		  /* 821D05F8h */ case   20:  		/* mr R5, R23 */
		/* 821D05F8h case   20:*/		regs.R5 = regs.R23;
		/* 821D05F8h case   20:*/		return 0x821D05FC;
		  /* 821D05FCh */ case   21:  		/* mr R4, R29 */
		/* 821D05FCh case   21:*/		regs.R4 = regs.R29;
		/* 821D05FCh case   21:*/		return 0x821D0600;
		  /* 821D0600h */ case   22:  		/* mr R3, R26 */
		/* 821D0600h case   22:*/		regs.R3 = regs.R26;
		/* 821D0600h case   22:*/		return 0x821D0604;
		  /* 821D0604h */ case   23:  		/* bl 98044 */
		/* 821D0604h case   23:*/		regs.LR = 0x821D0608; return 0x821E8500;
		/* 821D0604h case   23:*/		return 0x821D0608;
		  /* 821D0608h */ case   24:  		/* or. R27, R3, R3 */
		/* 821D0608h case   24:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 821D0608h case   24:*/		return 0x821D060C;
		  /* 821D060Ch */ case   25:  		/* bc 12, CR0_EQ, 168 */
		/* 821D060Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x821D06B4;  }
		/* 821D060Ch case   25:*/		return 0x821D0610;
		  /* 821D0610h */ case   26:  		/* lwz R28, <#[R29 + 32]> */
		/* 821D0610h case   26:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000020) );
		/* 821D0610h case   26:*/		return 0x821D0614;
		  /* 821D0614h */ case   27:  		/* mr R30, R28 */
		/* 821D0614h case   27:*/		regs.R30 = regs.R28;
		/* 821D0614h case   27:*/		return 0x821D0618;
		  /* 821D0618h */ case   28:  		/* lwz R31, <#[R30]> */
		/* 821D0618h case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821D0618h case   28:*/		return 0x821D061C;
		  /* 821D061Ch */ case   29:  		/* cmplwi CR6, R31, 0 */
		/* 821D061Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D061Ch case   29:*/		return 0x821D0620;
		  /* 821D0620h */ case   30:  		/* bc 12, CR6_EQ, 60 */
		/* 821D0620h case   30:*/		if ( regs.CR[6].eq ) { return 0x821D065C;  }
		/* 821D0620h case   30:*/		return 0x821D0624;
		  /* 821D0624h */ case   31:  		/* mr R4, R27 */
		/* 821D0624h case   31:*/		regs.R4 = regs.R27;
		/* 821D0624h case   31:*/		return 0x821D0628;
		  /* 821D0628h */ case   32:  		/* mr R3, R31 */
		/* 821D0628h case   32:*/		regs.R3 = regs.R31;
		/* 821D0628h case   32:*/		return 0x821D062C;
		  /* 821D062Ch */ case   33:  		/* bl -443300 */
		/* 821D062Ch case   33:*/		regs.LR = 0x821D0630; return 0x82164288;
		/* 821D062Ch case   33:*/		return 0x821D0630;
		  /* 821D0630h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D0630h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D0630h case   34:*/		return 0x821D0634;
		  /* 821D0634h */ case   35:  		/* bc 4, CR0_EQ, 20 */
		/* 821D0634h case   35:*/		if ( !regs.CR[0].eq ) { return 0x821D0648;  }
		/* 821D0634h case   35:*/		return 0x821D0638;
		  /* 821D0638h */ case   36:  		/* mr R5, R26 */
		/* 821D0638h case   36:*/		regs.R5 = regs.R26;
		/* 821D0638h case   36:*/		return 0x821D063C;
		  /* 821D063Ch */ case   37:  		/* mr R4, R31 */
		/* 821D063Ch case   37:*/		regs.R4 = regs.R31;
		/* 821D063Ch case   37:*/		return 0x821D0640;
		  /* 821D0640h */ case   38:  		/* mr R3, R28 */
		/* 821D0640h case   38:*/		regs.R3 = regs.R28;
		/* 821D0640h case   38:*/		return 0x821D0644;
		  /* 821D0644h */ case   39:  		/* bl -359732 */
		/* 821D0644h case   39:*/		regs.LR = 0x821D0648; return 0x82178910;
		/* 821D0644h case   39:*/		return 0x821D0648;
	}
	return 0x821D0648;
} // Block from 821D05A8h-821D0648h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821D0648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0648);
		  /* 821D0648h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821D0648h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D0648h case    0:*/		return 0x821D064C;
		  /* 821D064Ch */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D064Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D064Ch case    1:*/		return 0x821D0650;
		  /* 821D0650h */ case    2:  		/* bc 4, CR6_EQ, -56 */
		/* 821D0650h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D0618;  }
		/* 821D0650h case    2:*/		return 0x821D0654;
		  /* 821D0654h */ case    3:  		/* addi R30, R31, 4 */
		/* 821D0654h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 821D0654h case    3:*/		return 0x821D0658;
		  /* 821D0658h */ case    4:  		/* b -64 */
		/* 821D0658h case    4:*/		return 0x821D0618;
		/* 821D0658h case    4:*/		return 0x821D065C;
	}
	return 0x821D065C;
} // Block from 821D0648h-821D065Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D065Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D065C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D065C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D065C);
		  /* 821D065Ch */ case    0:  		/* lwz R30, <#[R24 + 8]> */
		/* 821D065Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000008) );
		/* 821D065Ch case    0:*/		return 0x821D0660;
		  /* 821D0660h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821D0660h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D0660h case    1:*/		return 0x821D0664;
		  /* 821D0664h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821D0664h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D06A4;  }
		/* 821D0664h case    2:*/		return 0x821D0668;
		  /* 821D0668h */ case    3:  		/* lwz R31, <#[R30 + 4]> */
		/* 821D0668h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821D0668h case    3:*/		return 0x821D066C;
		  /* 821D066Ch */ case    4:  		/* cmplw CR6, R31, R23 */
		/* 821D066Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 821D066Ch case    4:*/		return 0x821D0670;
		  /* 821D0670h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821D0670h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D0694;  }
		/* 821D0670h case    5:*/		return 0x821D0674;
		  /* 821D0674h */ case    6:  		/* li R7, 1 */
		/* 821D0674h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821D0674h case    6:*/		return 0x821D0678;
		  /* 821D0678h */ case    7:  		/* li R6, 0 */
		/* 821D0678h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0678h case    7:*/		return 0x821D067C;
		  /* 821D067Ch */ case    8:  		/* mr R5, R31 */
		/* 821D067Ch case    8:*/		regs.R5 = regs.R31;
		/* 821D067Ch case    8:*/		return 0x821D0680;
		  /* 821D0680h */ case    9:  		/* mr R4, R29 */
		/* 821D0680h case    9:*/		regs.R4 = regs.R29;
		/* 821D0680h case    9:*/		return 0x821D0684;
		  /* 821D0684h */ case   10:  		/* mr R3, R26 */
		/* 821D0684h case   10:*/		regs.R3 = regs.R26;
		/* 821D0684h case   10:*/		return 0x821D0688;
		  /* 821D0688h */ case   11:  		/* bl 97912 */
		/* 821D0688h case   11:*/		regs.LR = 0x821D068C; return 0x821E8500;
		/* 821D0688h case   11:*/		return 0x821D068C;
		  /* 821D068Ch */ case   12:  		/* cmplw CR6, R3, R27 */
		/* 821D068Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 821D068Ch case   12:*/		return 0x821D0690;
		  /* 821D0690h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 821D0690h case   13:*/		if ( regs.CR[6].eq ) { return 0x821D069C;  }
		/* 821D0690h case   13:*/		return 0x821D0694;
	}
	return 0x821D0694;
} // Block from 821D065Ch-821D0694h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D0694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0694);
		  /* 821D0694h */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 821D0694h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D0694h case    0:*/		return 0x821D0698;
		  /* 821D0698h */ case    1:  		/* b -56 */
		/* 821D0698h case    1:*/		return 0x821D0660;
		/* 821D0698h case    1:*/		return 0x821D069C;
	}
	return 0x821D069C;
} // Block from 821D0694h-821D069Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D069Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D069C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D069C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D069C);
		  /* 821D069Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821D069Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D069Ch case    0:*/		return 0x821D06A0;
		  /* 821D06A0h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821D06A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D06B4;  }
		/* 821D06A0h case    1:*/		return 0x821D06A4;
	}
	return 0x821D06A4;
} // Block from 821D069Ch-821D06A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D06A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D06A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D06A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D06A4);
		  /* 821D06A4h */ case    0:  		/* mr R5, R26 */
		/* 821D06A4h case    0:*/		regs.R5 = regs.R26;
		/* 821D06A4h case    0:*/		return 0x821D06A8;
		  /* 821D06A8h */ case    1:  		/* mr R4, R27 */
		/* 821D06A8h case    1:*/		regs.R4 = regs.R27;
		/* 821D06A8h case    1:*/		return 0x821D06AC;
		  /* 821D06ACh */ case    2:  		/* mr R3, R29 */
		/* 821D06ACh case    2:*/		regs.R3 = regs.R29;
		/* 821D06ACh case    2:*/		return 0x821D06B0;
		  /* 821D06B0h */ case    3:  		/* bl -359840 */
		/* 821D06B0h case    3:*/		regs.LR = 0x821D06B4; return 0x82178910;
		/* 821D06B0h case    3:*/		return 0x821D06B4;
	}
	return 0x821D06B4;
} // Block from 821D06A4h-821D06B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D06B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D06B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D06B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D06B4);
		  /* 821D06B4h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821D06B4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821D06B4h case    0:*/		return 0x821D06B8;
		  /* 821D06B8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821D06B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821D06B8h case    1:*/		return 0x821D06BC;
		  /* 821D06BCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D06BCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D06BCh case    2:*/		return 0x821D06C0;
		  /* 821D06C0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D06C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D06D0;  }
		/* 821D06C0h case    3:*/		return 0x821D06C4;
		  /* 821D06C4h */ case    4:  		/* mr R29, R11 */
		/* 821D06C4h case    4:*/		regs.R29 = regs.R11;
		/* 821D06C4h case    4:*/		return 0x821D06C8;
		  /* 821D06C8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D06C8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D06C8h case    5:*/		return 0x821D06CC;
		  /* 821D06CCh */ case    6:  		/* bc 4, CR6_EQ, -236 */
		/* 821D06CCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D05E0;  }
		/* 821D06CCh case    6:*/		return 0x821D06D0;
	}
	return 0x821D06D0;
} // Block from 821D06B4h-821D06D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D06D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D06D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D06D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D06D0);
		  /* 821D06D0h */ case    0:  		/* lwz R11, <#[R21 + 20]> */
		/* 821D06D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821D06D0h case    0:*/		return 0x821D06D4;
		  /* 821D06D4h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D06D4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D06D4h case    1:*/		return 0x821D06D8;
		  /* 821D06D8h */ case    2:  		/* bc 4, CR0_EQ, 132 */
		/* 821D06D8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D075C;  }
		/* 821D06D8h case    2:*/		return 0x821D06DC;
		  /* 821D06DCh */ case    3:  		/* mr R30, R11 */
		/* 821D06DCh case    3:*/		regs.R30 = regs.R11;
		/* 821D06DCh case    3:*/		return 0x821D06E0;
		  /* 821D06E0h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821D06E0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D06E0h case    4:*/		return 0x821D06E4;
		  /* 821D06E4h */ case    5:  		/* bc 12, CR0_EQ, 120 */
		/* 821D06E4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D075C;  }
		/* 821D06E4h case    5:*/		return 0x821D06E8;
		  /* 821D06E8h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D06E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D06E8h case    6:*/		return 0x821D06EC;
		  /* 821D06ECh */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D06ECh case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D06ECh case    7:*/		return 0x821D06F0;
		  /* 821D06F0h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 821D06F0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821D06F0h case    8:*/		return 0x821D06F4;
		  /* 821D06F4h */ case    9:  		/* bc 4, CR6_EQ, 76 */
		/* 821D06F4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D0740;  }
		/* 821D06F4h case    9:*/		return 0x821D06F8;
		  /* 821D06F8h */ case   10:  		/* mr R29, R30 */
		/* 821D06F8h case   10:*/		regs.R29 = regs.R30;
		/* 821D06F8h case   10:*/		return 0x821D06FC;
		  /* 821D06FCh */ case   11:  		/* lwz R31, <#[R29]> */
		/* 821D06FCh case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821D06FCh case   11:*/		return 0x821D0700;
		  /* 821D0700h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821D0700h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D0700h case   12:*/		return 0x821D0704;
		  /* 821D0704h */ case   13:  		/* bc 12, CR6_EQ, 60 */
		/* 821D0704h case   13:*/		if ( regs.CR[6].eq ) { return 0x821D0740;  }
		/* 821D0704h case   13:*/		return 0x821D0708;
		  /* 821D0708h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D0708h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D0708h case   14:*/		return 0x821D070C;
		  /* 821D070Ch */ case   15:  		/* lwz R11, <#[R11 + 28]> */
		/* 821D070Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D070Ch case   15:*/		return 0x821D0710;
		  /* 821D0710h */ case   16:  		/* lwz R11, <#[R11 + 44]> */
		/* 821D0710h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D0710h case   16:*/		return 0x821D0714;
		  /* 821D0714h */ case   17:  		/* cmplw CR6, R11, R25 */
		/* 821D0714h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821D0714h case   17:*/		return 0x821D0718;
		  /* 821D0718h */ case   18:  		/* bc 4, CR6_EQ, 20 */
		/* 821D0718h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821D072C;  }
		/* 821D0718h case   18:*/		return 0x821D071C;
		  /* 821D071Ch */ case   19:  		/* mr R5, R26 */
		/* 821D071Ch case   19:*/		regs.R5 = regs.R26;
		/* 821D071Ch case   19:*/		return 0x821D0720;
		  /* 821D0720h */ case   20:  		/* mr R4, R31 */
		/* 821D0720h case   20:*/		regs.R4 = regs.R31;
		/* 821D0720h case   20:*/		return 0x821D0724;
		  /* 821D0724h */ case   21:  		/* mr R3, R30 */
		/* 821D0724h case   21:*/		regs.R3 = regs.R30;
		/* 821D0724h case   21:*/		return 0x821D0728;
		  /* 821D0728h */ case   22:  		/* bl -359960 */
		/* 821D0728h case   22:*/		regs.LR = 0x821D072C; return 0x82178910;
		/* 821D0728h case   22:*/		return 0x821D072C;
	}
	return 0x821D072C;
} // Block from 821D06D0h-821D072Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D072Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D072C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D072C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D072C);
		  /* 821D072Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821D072Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D072Ch case    0:*/		return 0x821D0730;
		  /* 821D0730h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D0730h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D0730h case    1:*/		return 0x821D0734;
		  /* 821D0734h */ case    2:  		/* bc 4, CR6_EQ, -56 */
		/* 821D0734h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D06FC;  }
		/* 821D0734h case    2:*/		return 0x821D0738;
		  /* 821D0738h */ case    3:  		/* addi R29, R31, 4 */
		/* 821D0738h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821D0738h case    3:*/		return 0x821D073C;
		  /* 821D073Ch */ case    4:  		/* b -64 */
		/* 821D073Ch case    4:*/		return 0x821D06FC;
		/* 821D073Ch case    4:*/		return 0x821D0740;
	}
	return 0x821D0740;
} // Block from 821D072Ch-821D0740h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D0740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0740);
		  /* 821D0740h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D0740h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D0740h case    0:*/		return 0x821D0744;
		  /* 821D0744h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821D0744h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821D0744h case    1:*/		return 0x821D0748;
		  /* 821D0748h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0748h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0748h case    2:*/		return 0x821D074C;
		  /* 821D074Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D074Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D075C;  }
		/* 821D074Ch case    3:*/		return 0x821D0750;
		  /* 821D0750h */ case    4:  		/* mr R30, R11 */
		/* 821D0750h case    4:*/		regs.R30 = regs.R11;
		/* 821D0750h case    4:*/		return 0x821D0754;
		  /* 821D0754h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D0754h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0754h case    5:*/		return 0x821D0758;
		  /* 821D0758h */ case    6:  		/* bc 4, CR6_EQ, -112 */
		/* 821D0758h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D06E8;  }
		/* 821D0758h case    6:*/		return 0x821D075C;
	}
	return 0x821D075C;
} // Block from 821D0740h-821D075Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D075Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D075C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D075C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D075C);
		  /* 821D075Ch */ case    0:  		/* lwz R28, <#[R24 + 8]> */
		/* 821D075Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000008) );
		/* 821D075Ch case    0:*/		return 0x821D0760;
		  /* 821D0760h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821D0760h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821D0760h case    1:*/		return 0x821D0764;
		  /* 821D0764h */ case    2:  		/* bc 12, CR6_EQ, 208 */
		/* 821D0764h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D0834;  }
		/* 821D0764h case    2:*/		return 0x821D0768;
		  /* 821D0768h */ case    3:  		/* lwz R11, <#[R28 + 4]> */
		/* 821D0768h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821D0768h case    3:*/		return 0x821D076C;
		  /* 821D076Ch */ case    4:  		/* cmplw CR6, R11, R23 */
		/* 821D076Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821D076Ch case    4:*/		return 0x821D0770;
		  /* 821D0770h */ case    5:  		/* bc 12, CR6_EQ, 188 */
		/* 821D0770h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D082C;  }
		/* 821D0770h case    5:*/		return 0x821D0774;
		  /* 821D0774h */ case    6:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D0774h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D0774h case    6:*/		return 0x821D0778;
		  /* 821D0778h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821D0778h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D0778h case    7:*/		return 0x821D077C;
		  /* 821D077Ch */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821D077Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821D0798;  }
		/* 821D077Ch case    8:*/		return 0x821D0780;
		  /* 821D0780h */ case    9:  		/* lwz R11, <#[R10]> */
		/* 821D0780h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D0780h case    9:*/		return 0x821D0784;
		  /* 821D0784h */ case   10:  		/* lwz R9, <#[R11 + 48]> */
		/* 821D0784h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821D0784h case   10:*/		return 0x821D0788;
		  /* 821D0788h */ case   11:  		/* rlwinm. R9, R9, 11, 31, 31 */
		/* 821D0788h case   11:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R9,regs.R9);
		/* 821D0788h case   11:*/		return 0x821D078C;
		  /* 821D078Ch */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821D078Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D079C;  }
		/* 821D078Ch case   12:*/		return 0x821D0790;
		  /* 821D0790h */ case   13:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D0790h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D0790h case   13:*/		return 0x821D0794;
		  /* 821D0794h */ case   14:  		/* b -28 */
		/* 821D0794h case   14:*/		return 0x821D0778;
		/* 821D0794h case   14:*/		return 0x821D0798;
	}
	return 0x821D0798;
} // Block from 821D075Ch-821D0798h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D0798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0798);
		  /* 821D0798h */ case    0:  		/* li R11, 0 */
		/* 821D0798h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D0798h case    0:*/		return 0x821D079C;
	}
	return 0x821D079C;
} // Block from 821D0798h-821D079Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D079Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D079C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D079C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D079C);
		  /* 821D079Ch */ case    0:  		/* lwz R11, <#[R11 + 20]> */
		/* 821D079Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821D079Ch case    0:*/		return 0x821D07A0;
		  /* 821D07A0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D07A0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D07A0h case    1:*/		return 0x821D07A4;
		  /* 821D07A4h */ case    2:  		/* bc 4, CR0_EQ, 136 */
		/* 821D07A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D082C;  }
		/* 821D07A4h case    2:*/		return 0x821D07A8;
		  /* 821D07A8h */ case    3:  		/* mr R30, R11 */
		/* 821D07A8h case    3:*/		regs.R30 = regs.R11;
		/* 821D07A8h case    3:*/		return 0x821D07AC;
		  /* 821D07ACh */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821D07ACh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D07ACh case    4:*/		return 0x821D07B0;
		  /* 821D07B0h */ case    5:  		/* bc 12, CR0_EQ, 124 */
		/* 821D07B0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D082C;  }
		/* 821D07B0h case    5:*/		return 0x821D07B4;
		  /* 821D07B4h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D07B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D07B4h case    6:*/		return 0x821D07B8;
		  /* 821D07B8h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D07B8h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D07B8h case    7:*/		return 0x821D07BC;
		  /* 821D07BCh */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 821D07BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821D07BCh case    8:*/		return 0x821D07C0;
		  /* 821D07C0h */ case    9:  		/* bc 4, CR6_EQ, 80 */
		/* 821D07C0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D0810;  }
		/* 821D07C0h case    9:*/		return 0x821D07C4;
		  /* 821D07C4h */ case   10:  		/* mr R29, R30 */
		/* 821D07C4h case   10:*/		regs.R29 = regs.R30;
		/* 821D07C4h case   10:*/		return 0x821D07C8;
		  /* 821D07C8h */ case   11:  		/* lwz R31, <#[R29]> */
		/* 821D07C8h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821D07C8h case   11:*/		return 0x821D07CC;
		  /* 821D07CCh */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821D07CCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D07CCh case   12:*/		return 0x821D07D0;
		  /* 821D07D0h */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 821D07D0h case   13:*/		if ( regs.CR[6].eq ) { return 0x821D0810;  }
		/* 821D07D0h case   13:*/		return 0x821D07D4;
		  /* 821D07D4h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D07D4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D07D4h case   14:*/		return 0x821D07D8;
		  /* 821D07D8h */ case   15:  		/* lwz R11, <#[R11 + 28]> */
		/* 821D07D8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D07D8h case   15:*/		return 0x821D07DC;
		  /* 821D07DCh */ case   16:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D07DCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D07DCh case   16:*/		return 0x821D07E0;
		  /* 821D07E0h */ case   17:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821D07E0h case   17:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821D07E0h case   17:*/		return 0x821D07E4;
		  /* 821D07E4h */ case   18:  		/* cmplw CR6, R11, R22 */
		/* 821D07E4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821D07E4h case   18:*/		return 0x821D07E8;
		  /* 821D07E8h */ case   19:  		/* bc 12, CR6_LT, 20 */
		/* 821D07E8h case   19:*/		if ( regs.CR[6].lt ) { return 0x821D07FC;  }
		/* 821D07E8h case   19:*/		return 0x821D07EC;
		  /* 821D07ECh */ case   20:  		/* mr R5, R26 */
		/* 821D07ECh case   20:*/		regs.R5 = regs.R26;
		/* 821D07ECh case   20:*/		return 0x821D07F0;
		  /* 821D07F0h */ case   21:  		/* mr R4, R31 */
		/* 821D07F0h case   21:*/		regs.R4 = regs.R31;
		/* 821D07F0h case   21:*/		return 0x821D07F4;
		  /* 821D07F4h */ case   22:  		/* mr R3, R30 */
		/* 821D07F4h case   22:*/		regs.R3 = regs.R30;
		/* 821D07F4h case   22:*/		return 0x821D07F8;
		  /* 821D07F8h */ case   23:  		/* bl -360168 */
		/* 821D07F8h case   23:*/		regs.LR = 0x821D07FC; return 0x82178910;
		/* 821D07F8h case   23:*/		return 0x821D07FC;
	}
	return 0x821D07FC;
} // Block from 821D079Ch-821D07FCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D07FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D07FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D07FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D07FC);
		  /* 821D07FCh */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821D07FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D07FCh case    0:*/		return 0x821D0800;
		  /* 821D0800h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D0800h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D0800h case    1:*/		return 0x821D0804;
		  /* 821D0804h */ case    2:  		/* bc 4, CR6_EQ, -60 */
		/* 821D0804h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D07C8;  }
		/* 821D0804h case    2:*/		return 0x821D0808;
		  /* 821D0808h */ case    3:  		/* addi R29, R31, 4 */
		/* 821D0808h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821D0808h case    3:*/		return 0x821D080C;
		  /* 821D080Ch */ case    4:  		/* b -68 */
		/* 821D080Ch case    4:*/		return 0x821D07C8;
		/* 821D080Ch case    4:*/		return 0x821D0810;
	}
	return 0x821D0810;
} // Block from 821D07FCh-821D0810h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D0810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0810);
		  /* 821D0810h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D0810h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D0810h case    0:*/		return 0x821D0814;
		  /* 821D0814h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821D0814h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821D0814h case    1:*/		return 0x821D0818;
		  /* 821D0818h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0818h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0818h case    2:*/		return 0x821D081C;
		  /* 821D081Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D081Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D082C;  }
		/* 821D081Ch case    3:*/		return 0x821D0820;
		  /* 821D0820h */ case    4:  		/* mr R30, R11 */
		/* 821D0820h case    4:*/		regs.R30 = regs.R11;
		/* 821D0820h case    4:*/		return 0x821D0824;
		  /* 821D0824h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D0824h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0824h case    5:*/		return 0x821D0828;
		  /* 821D0828h */ case    6:  		/* bc 4, CR6_EQ, -116 */
		/* 821D0828h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D07B4;  }
		/* 821D0828h case    6:*/		return 0x821D082C;
	}
	return 0x821D082C;
} // Block from 821D0810h-821D082Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D082Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D082C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D082C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D082C);
		  /* 821D082Ch */ case    0:  		/* lwz R28, <#[R28 + 12]> */
		/* 821D082Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D082Ch case    0:*/		return 0x821D0830;
		  /* 821D0830h */ case    1:  		/* b -208 */
		/* 821D0830h case    1:*/		return 0x821D0760;
		/* 821D0830h case    1:*/		return 0x821D0834;
	}
	return 0x821D0834;
} // Block from 821D082Ch-821D0834h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D0834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0834);
		  /* 821D0834h */ case    0:  		/* mr R8, R25 */
		/* 821D0834h case    0:*/		regs.R8 = regs.R25;
		/* 821D0834h case    0:*/		return 0x821D0838;
		  /* 821D0838h */ case    1:  		/* mr R7, R21 */
		/* 821D0838h case    1:*/		regs.R7 = regs.R21;
		/* 821D0838h case    1:*/		return 0x821D083C;
		  /* 821D083Ch */ case    2:  		/* mr R6, R20 */
		/* 821D083Ch case    2:*/		regs.R6 = regs.R20;
		/* 821D083Ch case    2:*/		return 0x821D0840;
		  /* 821D0840h */ case    3:  		/* mr R5, R24 */
		/* 821D0840h case    3:*/		regs.R5 = regs.R24;
		/* 821D0840h case    3:*/		return 0x821D0844;
		  /* 821D0844h */ case    4:  		/* mr R4, R23 */
		/* 821D0844h case    4:*/		regs.R4 = regs.R23;
		/* 821D0844h case    4:*/		return 0x821D0848;
		  /* 821D0848h */ case    5:  		/* mr R3, R26 */
		/* 821D0848h case    5:*/		regs.R3 = regs.R26;
		/* 821D0848h case    5:*/		return 0x821D084C;
		  /* 821D084Ch */ case    6:  		/* bl -12996 */
		/* 821D084Ch case    6:*/		regs.LR = 0x821D0850; return 0x821CD588;
		/* 821D084Ch case    6:*/		return 0x821D0850;
		  /* 821D0850h */ case    7:  		/* addi R1, R1, 192 */
		/* 821D0850h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821D0850h case    7:*/		return 0x821D0854;
		  /* 821D0854h */ case    8:  		/* b -1308108 */
		/* 821D0854h case    8:*/		return 0x82091288;
		/* 821D0854h case    8:*/		return 0x821D0858;
	}
	return 0x821D0858;
} // Block from 821D0834h-821D0858h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D0858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0858);
		  /* 821D0858h */ case    0:  		/* mfspr R12, LR */
		/* 821D0858h case    0:*/		regs.R12 = regs.LR;
		/* 821D0858h case    0:*/		return 0x821D085C;
		  /* 821D085Ch */ case    1:  		/* bl -1308200 */
		/* 821D085Ch case    1:*/		regs.LR = 0x821D0860; return 0x82091234;
		/* 821D085Ch case    1:*/		return 0x821D0860;
		  /* 821D0860h */ case    2:  		/* stfd FR31, <#[R1 - 120]> */
		/* 821D0860h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821D0860h case    2:*/		return 0x821D0864;
		  /* 821D0864h */ case    3:  		/* stwu R1, <#[R1 - 208]> */
		/* 821D0864h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821D0864h case    3:*/		return 0x821D0868;
	}
	return 0x821D0868;
} // Block from 821D0858h-821D0868h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D0868h
// Function '?CheckInliningRequirements@Compiler@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0868);
		  /* 821D0868h */ case    0:  		/* mr R23, R4 */
		/* 821D0868h case    0:*/		regs.R23 = regs.R4;
		/* 821D0868h case    0:*/		return 0x821D086C;
		  /* 821D086Ch */ case    1:  		/* mr R28, R5 */
		/* 821D086Ch case    1:*/		regs.R28 = regs.R5;
		/* 821D086Ch case    1:*/		return 0x821D0870;
		  /* 821D0870h */ case    2:  		/* li R5, 57 */
		/* 821D0870h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x39);
		/* 821D0870h case    2:*/		return 0x821D0874;
		  /* 821D0874h */ case    3:  		/* li R4, 8 */
		/* 821D0874h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D0874h case    3:*/		return 0x821D0878;
		  /* 821D0878h */ case    4:  		/* mr R27, R3 */
		/* 821D0878h case    4:*/		regs.R27 = regs.R3;
		/* 821D0878h case    4:*/		return 0x821D087C;
		  /* 821D087Ch */ case    5:  		/* bl -442252 */
		/* 821D087Ch case    5:*/		regs.LR = 0x821D0880; return 0x821648F0;
		/* 821D087Ch case    5:*/		return 0x821D0880;
		  /* 821D0880h */ case    6:  		/* addi R22, R3, 4 */
		/* 821D0880h case    6:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R3,0x4);
		/* 821D0880h case    6:*/		return 0x821D0884;
		  /* 821D0884h */ case    7:  		/* ori R11, R3, 1 */
		/* 821D0884h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821D0884h case    7:*/		return 0x821D0888;
		  /* 821D0888h */ case    8:  		/* ori R10, R22, 1 */
		/* 821D0888h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R22,0x1);
		/* 821D0888h case    8:*/		return 0x821D088C;
		  /* 821D088Ch */ case    9:  		/* stw R11, <#[R3 + 4]> */
		/* 821D088Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D088Ch case    9:*/		return 0x821D0890;
		  /* 821D0890h */ case   10:  		/* mr R25, R3 */
		/* 821D0890h case   10:*/		regs.R25 = regs.R3;
		/* 821D0890h case   10:*/		return 0x821D0894;
		  /* 821D0894h */ case   11:  		/* stw R10, <#[R3]> */
		/* 821D0894h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821D0894h case   11:*/		return 0x821D0898;
		  /* 821D0898h */ case   12:  		/* li R5, 51 */
		/* 821D0898h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821D0898h case   12:*/		return 0x821D089C;
		  /* 821D089Ch */ case   13:  		/* li R4, 8 */
		/* 821D089Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D089Ch case   13:*/		return 0x821D08A0;
		  /* 821D08A0h */ case   14:  		/* mr R3, R27 */
		/* 821D08A0h case   14:*/		regs.R3 = regs.R27;
		/* 821D08A0h case   14:*/		return 0x821D08A4;
		  /* 821D08A4h */ case   15:  		/* bl -442292 */
		/* 821D08A4h case   15:*/		regs.LR = 0x821D08A8; return 0x821648F0;
		/* 821D08A4h case   15:*/		return 0x821D08A8;
		  /* 821D08A8h */ case   16:  		/* li R11, -1 */
		/* 821D08A8h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821D08A8h case   16:*/		return 0x821D08AC;
		  /* 821D08ACh */ case   17:  		/* addi R21, R3, 4 */
		/* 821D08ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R3,0x4);
		/* 821D08ACh case   17:*/		return 0x821D08B0;
		  /* 821D08B0h */ case   18:  		/* stw R11, <#[R1 + 80]> */
		/* 821D08B0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D08B0h case   18:*/		return 0x821D08B4;
		  /* 821D08B4h */ case   19:  		/* ori R10, R3, 1 */
		/* 821D08B4h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821D08B4h case   19:*/		return 0x821D08B8;
		  /* 821D08B8h */ case   20:  		/* ori R11, R21, 1 */
		/* 821D08B8h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R21,0x1);
		/* 821D08B8h case   20:*/		return 0x821D08BC;
		  /* 821D08BCh */ case   21:  		/* mr R24, R3 */
		/* 821D08BCh case   21:*/		regs.R24 = regs.R3;
		/* 821D08BCh case   21:*/		return 0x821D08C0;
		  /* 821D08C0h */ case   22:  		/* stw R10, <#[R3 + 4]> */
		/* 821D08C0h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821D08C0h case   22:*/		return 0x821D08C4;
		  /* 821D08C4h */ case   23:  		/* stw R11, <#[R3]> */
		/* 821D08C4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821D08C4h case   23:*/		return 0x821D08C8;
		  /* 821D08C8h */ case   24:  		/* lis R11, -32256 */
		/* 821D08C8h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D08C8h case   24:*/		return 0x821D08CC;
		  /* 821D08CCh */ case   25:  		/* mr R31, R23 */
		/* 821D08CCh case   25:*/		regs.R31 = regs.R23;
		/* 821D08CCh case   25:*/		return 0x821D08D0;
		  /* 821D08D0h */ case   26:  		/* li R20, 0 */
		/* 821D08D0h case   26:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821D08D0h case   26:*/		return 0x821D08D4;
		  /* 821D08D4h */ case   27:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 821D08D4h case   27:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 821D08D4h case   27:*/		return 0x821D08D8;
		  /* 821D08D8h */ case   28:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D08D8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D08D8h case   28:*/		return 0x821D08DC;
		  /* 821D08DCh */ case   29:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D08DCh case   29:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D08DCh case   29:*/		return 0x821D08E0;
		  /* 821D08E0h */ case   30:  		/* cmpwi CR6, R11, 1 */
		/* 821D08E0h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821D08E0h case   30:*/		return 0x821D08E4;
		  /* 821D08E4h */ case   31:  		/* bc 12, CR6_EQ, 428 */
		/* 821D08E4h case   31:*/		if ( regs.CR[6].eq ) { return 0x821D0A90;  }
		/* 821D08E4h case   31:*/		return 0x821D08E8;
		  /* 821D08E8h */ case   32:  		/* cmpwi CR6, R11, 12 */
		/* 821D08E8h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821D08E8h case   32:*/		return 0x821D08EC;
		  /* 821D08ECh */ case   33:  		/* bc 12, CR6_EQ, 260 */
		/* 821D08ECh case   33:*/		if ( regs.CR[6].eq ) { return 0x821D09F0;  }
		/* 821D08ECh case   33:*/		return 0x821D08F0;
		  /* 821D08F0h */ case   34:  		/* cmpwi CR6, R11, 15 */
		/* 821D08F0h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821D08F0h case   34:*/		return 0x821D08F4;
		  /* 821D08F4h */ case   35:  		/* bc 4, CR6_GT, 952 */
		/* 821D08F4h case   35:*/		if ( !regs.CR[6].gt ) { return 0x821D0CAC;  }
		/* 821D08F4h case   35:*/		return 0x821D08F8;
		  /* 821D08F8h */ case   36:  		/* cmpwi CR6, R11, 18 */
		/* 821D08F8h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000012);
		/* 821D08F8h case   36:*/		return 0x821D08FC;
		  /* 821D08FCh */ case   37:  		/* bc 12, CR6_GT, 944 */
		/* 821D08FCh case   37:*/		if ( regs.CR[6].gt ) { return 0x821D0CAC;  }
		/* 821D08FCh case   37:*/		return 0x821D0900;
		  /* 821D0900h */ case   38:  		/* lwz R26, <#[R31 + 44]> */
		/* 821D0900h case   38:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D0900h case   38:*/		return 0x821D0904;
		  /* 821D0904h */ case   39:  		/* li R29, 0 */
		/* 821D0904h case   39:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D0904h case   39:*/		return 0x821D0908;
		  /* 821D0908h */ case   40:  		/* lwz R11, <#[R26]> */
		/* 821D0908h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D0908h case   40:*/		return 0x821D090C;
		  /* 821D090Ch */ case   41:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D090Ch case   41:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D090Ch case   41:*/		return 0x821D0910;
		  /* 821D0910h */ case   42:  		/* bc 12, CR0_EQ, 180 */
		/* 821D0910h case   42:*/		if ( regs.CR[0].eq ) { return 0x821D09C4;  }
		/* 821D0910h case   42:*/		return 0x821D0914;
		  /* 821D0914h */ case   43:  		/* li R5, 51 */
		/* 821D0914h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821D0914h case   43:*/		return 0x821D0918;
		  /* 821D0918h */ case   44:  		/* li R4, 8 */
		/* 821D0918h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D0918h case   44:*/		return 0x821D091C;
		  /* 821D091Ch */ case   45:  		/* mr R3, R27 */
		/* 821D091Ch case   45:*/		regs.R3 = regs.R27;
		/* 821D091Ch case   45:*/		return 0x821D0920;
		  /* 821D0920h */ case   46:  		/* bl -442416 */
		/* 821D0920h case   46:*/		regs.LR = 0x821D0924; return 0x821648F0;
		/* 821D0920h case   46:*/		return 0x821D0924;
		  /* 821D0924h */ case   47:  		/* addi R11, R3, 4 */
		/* 821D0924h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821D0924h case   47:*/		return 0x821D0928;
		  /* 821D0928h */ case   48:  		/* ori R10, R3, 1 */
		/* 821D0928h case   48:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821D0928h case   48:*/		return 0x821D092C;
		  /* 821D092Ch */ case   49:  		/* ori R11, R11, 1 */
		/* 821D092Ch case   49:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D092Ch case   49:*/		return 0x821D0930;
		  /* 821D0930h */ case   50:  		/* stw R10, <#[R3 + 4]> */
		/* 821D0930h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821D0930h case   50:*/		return 0x821D0934;
		  /* 821D0934h */ case   51:  		/* mr R30, R3 */
		/* 821D0934h case   51:*/		regs.R30 = regs.R3;
		/* 821D0934h case   51:*/		return 0x821D0938;
		  /* 821D0938h */ case   52:  		/* stw R11, <#[R3]> */
		/* 821D0938h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821D0938h case   52:*/		return 0x821D093C;
		  /* 821D093Ch */ case   53:  		/* lwz R11, <#[R22]> */
		/* 821D093Ch case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D093Ch case   53:*/		return 0x821D0940;
		  /* 821D0940h */ case   54:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D0940h case   54:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D0940h case   54:*/		return 0x821D0944;
		  /* 821D0944h */ case   55:  		/* bc 4, CR0_EQ, 40 */
		/* 821D0944h case   55:*/		if ( !regs.CR[0].eq ) { return 0x821D096C;  }
		/* 821D0944h case   55:*/		return 0x821D0948;
		  /* 821D0948h */ case   56:  		/* lwz R11, <#[R25]> */
		/* 821D0948h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821D0948h case   56:*/		return 0x821D094C;
		  /* 821D094Ch */ case   57:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D094Ch case   57:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D094Ch case   57:*/		return 0x821D0950;
		  /* 821D0950h */ case   58:  		/* addic. R11, R11, -4 */
		/* 821D0950h case   58:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821D0950h case   58:*/		return 0x821D0954;
		  /* 821D0954h */ case   59:  		/* bc 12, CR0_EQ, 24 */
		/* 821D0954h case   59:*/		if ( regs.CR[0].eq ) { return 0x821D096C;  }
		/* 821D0954h case   59:*/		return 0x821D0958;
		  /* 821D0958h */ case   60:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D0958h case   60:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0958h case   60:*/		return 0x821D095C;
		  /* 821D095Ch */ case   61:  		/* lwz R9, <#[R11 + 12]> */
		/* 821D095Ch case   61:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D095Ch case   61:*/		return 0x821D0960;
		  /* 821D0960h */ case   62:  		/* addi R10, R10, 1 */
		/* 821D0960h case   62:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D0960h case   62:*/		return 0x821D0964;
		  /* 821D0964h */ case   63:  		/* cmplw CR6, R10, R9 */
		/* 821D0964h case   63:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821D0964h case   63:*/		return 0x821D0968;
		  /* 821D0968h */ case   64:  		/* bc 4, CR6_GT, 20 */
		/* 821D0968h case   64:*/		if ( !regs.CR[6].gt ) { return 0x821D097C;  }
		/* 821D0968h case   64:*/		return 0x821D096C;
	}
	return 0x821D096C;
} // Block from 821D0868h-821D096Ch (65 instructions)

//////////////////////////////////////////////////////
// Block at 821D096Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D096C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D096C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D096C);
		  /* 821D096Ch */ case    0:  		/* li R4, 1 */
		/* 821D096Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D096Ch case    0:*/		return 0x821D0970;
		  /* 821D0970h */ case    1:  		/* mr R3, R25 */
		/* 821D0970h case    1:*/		regs.R3 = regs.R25;
		/* 821D0970h case    1:*/		return 0x821D0974;
		  /* 821D0974h */ case    2:  		/* bl -276652 */
		/* 821D0974h case    2:*/		regs.LR = 0x821D0978; return 0x8218D0C8;
		/* 821D0974h case    2:*/		return 0x821D0978;
		  /* 821D0978h */ case    3:  		/* mr R11, R3 */
		/* 821D0978h case    3:*/		regs.R11 = regs.R3;
		/* 821D0978h case    3:*/		return 0x821D097C;
	}
	return 0x821D097C;
} // Block from 821D096Ch-821D097Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D097Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D097C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D097C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D097C);
		  /* 821D097Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D097Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D097Ch case    0:*/		return 0x821D0980;
		  /* 821D0980h */ case    1:  		/* addi R8, R1, 80 */
		/* 821D0980h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821D0980h case    1:*/		return 0x821D0984;
		  /* 821D0984h */ case    2:  		/* mr R7, R23 */
		/* 821D0984h case    2:*/		regs.R7 = regs.R23;
		/* 821D0984h case    2:*/		return 0x821D0988;
		  /* 821D0988h */ case    3:  		/* addi R9, R10, 4 */
		/* 821D0988h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D0988h case    3:*/		return 0x821D098C;
		  /* 821D098Ch */ case    4:  		/* addi R6, R10, 1 */
		/* 821D098Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1);
		/* 821D098Ch case    4:*/		return 0x821D0990;
		  /* 821D0990h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821D0990h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821D0990h case    5:*/		return 0x821D0994;
		  /* 821D0994h */ case    6:  		/* stw R6, <#[R11 + 8]> */
		/* 821D0994h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0994h case    6:*/		return 0x821D0998;
		  /* 821D0998h */ case    7:  		/* mr R6, R29 */
		/* 821D0998h case    7:*/		regs.R6 = regs.R29;
		/* 821D0998h case    7:*/		return 0x821D099C;
		  /* 821D099Ch */ case    8:  		/* mr R5, R31 */
		/* 821D099Ch case    8:*/		regs.R5 = regs.R31;
		/* 821D099Ch case    8:*/		return 0x821D09A0;
		  /* 821D09A0h */ case    9:  		/* mr R4, R30 */
		/* 821D09A0h case    9:*/		regs.R4 = regs.R30;
		/* 821D09A0h case    9:*/		return 0x821D09A4;
		  /* 821D09A4h */ case   10:  		/* mr R3, R27 */
		/* 821D09A4h case   10:*/		regs.R3 = regs.R27;
		/* 821D09A4h case   10:*/		return 0x821D09A8;
		  /* 821D09A8h */ case   11:  		/* stwx R30, <#[R10 + R11]> */
		/* 821D09A8h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821D09A8h case   11:*/		return 0x821D09AC;
		  /* 821D09ACh */ case   12:  		/* bl -23044 */
		/* 821D09ACh case   12:*/		regs.LR = 0x821D09B0; return 0x821CAFA8;
		/* 821D09ACh case   12:*/		return 0x821D09B0;
		  /* 821D09B0h */ case   13:  		/* lwz R11, <#[R26]> */
		/* 821D09B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D09B0h case   13:*/		return 0x821D09B4;
		  /* 821D09B4h */ case   14:  		/* addi R29, R29, 1 */
		/* 821D09B4h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D09B4h case   14:*/		return 0x821D09B8;
		  /* 821D09B8h */ case   15:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821D09B8h case   15:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821D09B8h case   15:*/		return 0x821D09BC;
		  /* 821D09BCh */ case   16:  		/* cmplw CR6, R29, R11 */
		/* 821D09BCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821D09BCh case   16:*/		return 0x821D09C0;
		  /* 821D09C0h */ case   17:  		/* bc 12, CR6_LT, -172 */
		/* 821D09C0h case   17:*/		if ( regs.CR[6].lt ) { return 0x821D0914;  }
		/* 821D09C0h case   17:*/		return 0x821D09C4;
	}
	return 0x821D09C4;
} // Block from 821D097Ch-821D09C4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D09C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D09C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D09C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D09C4);
		  /* 821D09C4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D09C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D09C4h case    0:*/		return 0x821D09C8;
		  /* 821D09C8h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D09C8h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D09C8h case    1:*/		return 0x821D09CC;
		  /* 821D09CCh */ case    2:  		/* cmplwi CR6, R11, 2304 */
		/* 821D09CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000900);
		/* 821D09CCh case    2:*/		return 0x821D09D0;
		  /* 821D09D0h */ case    3:  		/* bc 4, CR6_EQ, 256 */
		/* 821D09D0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D0AD0;  }
		/* 821D09D0h case    3:*/		return 0x821D09D4;
		  /* 821D09D4h */ case    4:  		/* lwz R3, <#[R31 + 52]> */
		/* 821D09D4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821D09D4h case    4:*/		return 0x821D09D8;
		  /* 821D09D8h */ case    5:  		/* fmr FR1, FR31 */
		/* 821D09D8h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821D09D8h case    5:*/		return 0x821D09DC;
		  /* 821D09DCh */ case    6:  		/* bl -437292 */
		/* 821D09DCh case    6:*/		regs.LR = 0x821D09E0; return 0x82165DB0;
		/* 821D09DCh case    6:*/		return 0x821D09E0;
		  /* 821D09E0h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D09E0h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D09E0h case    7:*/		return 0x821D09E4;
		  /* 821D09E4h */ case    8:  		/* bc 4, CR0_EQ, 236 */
		/* 821D09E4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D0AD0;  }
		/* 821D09E4h case    8:*/		return 0x821D09E8;
		  /* 821D09E8h */ case    9:  		/* li R5, 2 */
		/* 821D09E8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821D09E8h case    9:*/		return 0x821D09EC;
		  /* 821D09ECh */ case   10:  		/* b 200 */
		/* 821D09ECh case   10:*/		return 0x821D0AB4;
		/* 821D09ECh case   10:*/		return 0x821D09F0;
	}
	return 0x821D09F0;
} // Block from 821D09C4h-821D09F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D09F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D09F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D09F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D09F0);
		  /* 821D09F0h */ case    0:  		/* li R5, 51 */
		/* 821D09F0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821D09F0h case    0:*/		return 0x821D09F4;
		  /* 821D09F4h */ case    1:  		/* li R4, 8 */
		/* 821D09F4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D09F4h case    1:*/		return 0x821D09F8;
		  /* 821D09F8h */ case    2:  		/* mr R3, R27 */
		/* 821D09F8h case    2:*/		regs.R3 = regs.R27;
		/* 821D09F8h case    2:*/		return 0x821D09FC;
		  /* 821D09FCh */ case    3:  		/* bl -442636 */
		/* 821D09FCh case    3:*/		regs.LR = 0x821D0A00; return 0x821648F0;
		/* 821D09FCh case    3:*/		return 0x821D0A00;
		  /* 821D0A00h */ case    4:  		/* ori R10, R3, 1 */
		/* 821D0A00h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821D0A00h case    4:*/		return 0x821D0A04;
		  /* 821D0A04h */ case    5:  		/* addi R11, R3, 4 */
		/* 821D0A04h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821D0A04h case    5:*/		return 0x821D0A08;
		  /* 821D0A08h */ case    6:  		/* stw R10, <#[R3 + 4]> */
		/* 821D0A08h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821D0A08h case    6:*/		return 0x821D0A0C;
		  /* 821D0A0Ch */ case    7:  		/* mr R30, R3 */
		/* 821D0A0Ch case    7:*/		regs.R30 = regs.R3;
		/* 821D0A0Ch case    7:*/		return 0x821D0A10;
		  /* 821D0A10h */ case    8:  		/* ori R11, R11, 1 */
		/* 821D0A10h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D0A10h case    8:*/		return 0x821D0A14;
		  /* 821D0A14h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821D0A14h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821D0A14h case    9:*/		return 0x821D0A18;
		  /* 821D0A18h */ case   10:  		/* lwz R11, <#[R22]> */
		/* 821D0A18h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D0A18h case   10:*/		return 0x821D0A1C;
		  /* 821D0A1Ch */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D0A1Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D0A1Ch case   11:*/		return 0x821D0A20;
		  /* 821D0A20h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821D0A20h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D0A48;  }
		/* 821D0A20h case   12:*/		return 0x821D0A24;
		  /* 821D0A24h */ case   13:  		/* lwz R11, <#[R25]> */
		/* 821D0A24h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821D0A24h case   13:*/		return 0x821D0A28;
		  /* 821D0A28h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0A28h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0A28h case   14:*/		return 0x821D0A2C;
		  /* 821D0A2Ch */ case   15:  		/* addic. R11, R11, -4 */
		/* 821D0A2Ch case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821D0A2Ch case   15:*/		return 0x821D0A30;
		  /* 821D0A30h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821D0A30h case   16:*/		if ( regs.CR[0].eq ) { return 0x821D0A48;  }
		/* 821D0A30h case   16:*/		return 0x821D0A34;
		  /* 821D0A34h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D0A34h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0A34h case   17:*/		return 0x821D0A38;
		  /* 821D0A38h */ case   18:  		/* lwz R9, <#[R11 + 12]> */
		/* 821D0A38h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D0A38h case   18:*/		return 0x821D0A3C;
		  /* 821D0A3Ch */ case   19:  		/* addi R10, R10, 1 */
		/* 821D0A3Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D0A3Ch case   19:*/		return 0x821D0A40;
		  /* 821D0A40h */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 821D0A40h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821D0A40h case   20:*/		return 0x821D0A44;
		  /* 821D0A44h */ case   21:  		/* bc 4, CR6_GT, 20 */
		/* 821D0A44h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821D0A58;  }
		/* 821D0A44h case   21:*/		return 0x821D0A48;
	}
	return 0x821D0A48;
} // Block from 821D09F0h-821D0A48h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D0A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0A48);
		  /* 821D0A48h */ case    0:  		/* li R4, 1 */
		/* 821D0A48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D0A48h case    0:*/		return 0x821D0A4C;
		  /* 821D0A4Ch */ case    1:  		/* mr R3, R25 */
		/* 821D0A4Ch case    1:*/		regs.R3 = regs.R25;
		/* 821D0A4Ch case    1:*/		return 0x821D0A50;
		  /* 821D0A50h */ case    2:  		/* bl -276872 */
		/* 821D0A50h case    2:*/		regs.LR = 0x821D0A54; return 0x8218D0C8;
		/* 821D0A50h case    2:*/		return 0x821D0A54;
		  /* 821D0A54h */ case    3:  		/* mr R11, R3 */
		/* 821D0A54h case    3:*/		regs.R11 = regs.R3;
		/* 821D0A54h case    3:*/		return 0x821D0A58;
	}
	return 0x821D0A58;
} // Block from 821D0A48h-821D0A58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D0A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0A58);
		  /* 821D0A58h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D0A58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0A58h case    0:*/		return 0x821D0A5C;
		  /* 821D0A5Ch */ case    1:  		/* addi R8, R1, 80 */
		/* 821D0A5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821D0A5Ch case    1:*/		return 0x821D0A60;
		  /* 821D0A60h */ case    2:  		/* mr R7, R23 */
		/* 821D0A60h case    2:*/		regs.R7 = regs.R23;
		/* 821D0A60h case    2:*/		return 0x821D0A64;
		  /* 821D0A64h */ case    3:  		/* addi R9, R10, 4 */
		/* 821D0A64h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D0A64h case    3:*/		return 0x821D0A68;
		  /* 821D0A68h */ case    4:  		/* addi R6, R10, 1 */
		/* 821D0A68h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1);
		/* 821D0A68h case    4:*/		return 0x821D0A6C;
		  /* 821D0A6Ch */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821D0A6Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821D0A6Ch case    5:*/		return 0x821D0A70;
		  /* 821D0A70h */ case    6:  		/* stw R6, <#[R11 + 8]> */
		/* 821D0A70h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0A70h case    6:*/		return 0x821D0A74;
		  /* 821D0A74h */ case    7:  		/* mr R6, R28 */
		/* 821D0A74h case    7:*/		regs.R6 = regs.R28;
		/* 821D0A74h case    7:*/		return 0x821D0A78;
		  /* 821D0A78h */ case    8:  		/* mr R5, R31 */
		/* 821D0A78h case    8:*/		regs.R5 = regs.R31;
		/* 821D0A78h case    8:*/		return 0x821D0A7C;
		  /* 821D0A7Ch */ case    9:  		/* mr R4, R30 */
		/* 821D0A7Ch case    9:*/		regs.R4 = regs.R30;
		/* 821D0A7Ch case    9:*/		return 0x821D0A80;
		  /* 821D0A80h */ case   10:  		/* mr R3, R27 */
		/* 821D0A80h case   10:*/		regs.R3 = regs.R27;
		/* 821D0A80h case   10:*/		return 0x821D0A84;
		  /* 821D0A84h */ case   11:  		/* stwx R30, <#[R10 + R11]> */
		/* 821D0A84h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821D0A84h case   11:*/		return 0x821D0A88;
		  /* 821D0A88h */ case   12:  		/* bl -23264 */
		/* 821D0A88h case   12:*/		regs.LR = 0x821D0A8C; return 0x821CAFA8;
		/* 821D0A88h case   12:*/		return 0x821D0A8C;
		  /* 821D0A8Ch */ case   13:  		/* b -164 */
		/* 821D0A8Ch case   13:*/		return 0x821D09E8;
		/* 821D0A8Ch case   13:*/		return 0x821D0A90;
	}
	return 0x821D0A90;
} // Block from 821D0A58h-821D0A90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D0A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0A90);
		  /* 821D0A90h */ case    0:  		/* addi R9, R1, 80 */
		/* 821D0A90h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821D0A90h case    0:*/		return 0x821D0A94;
		  /* 821D0A94h */ case    1:  		/* mr R8, R24 */
		/* 821D0A94h case    1:*/		regs.R8 = regs.R24;
		/* 821D0A94h case    1:*/		return 0x821D0A98;
		  /* 821D0A98h */ case    2:  		/* mr R7, R25 */
		/* 821D0A98h case    2:*/		regs.R7 = regs.R25;
		/* 821D0A98h case    2:*/		return 0x821D0A9C;
		  /* 821D0A9Ch */ case    3:  		/* mr R6, R28 */
		/* 821D0A9Ch case    3:*/		regs.R6 = regs.R28;
		/* 821D0A9Ch case    3:*/		return 0x821D0AA0;
		  /* 821D0AA0h */ case    4:  		/* li R5, 0 */
		/* 821D0AA0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D0AA0h case    4:*/		return 0x821D0AA4;
		  /* 821D0AA4h */ case    5:  		/* mr R4, R31 */
		/* 821D0AA4h case    5:*/		regs.R4 = regs.R31;
		/* 821D0AA4h case    5:*/		return 0x821D0AA8;
		  /* 821D0AA8h */ case    6:  		/* mr R3, R27 */
		/* 821D0AA8h case    6:*/		regs.R3 = regs.R27;
		/* 821D0AA8h case    6:*/		return 0x821D0AAC;
		  /* 821D0AACh */ case    7:  		/* bl -23148 */
		/* 821D0AACh case    7:*/		regs.LR = 0x821D0AB0; return 0x821CB040;
		/* 821D0AACh case    7:*/		return 0x821D0AB0;
		  /* 821D0AB0h */ case    8:  		/* li R5, 1 */
		/* 821D0AB0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821D0AB0h case    8:*/		return 0x821D0AB4;
	}
	return 0x821D0AB4;
} // Block from 821D0A90h-821D0AB4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D0AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0AB4);
		  /* 821D0AB4h */ case    0:  		/* addi R9, R1, 80 */
		/* 821D0AB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821D0AB4h case    0:*/		return 0x821D0AB8;
		  /* 821D0AB8h */ case    1:  		/* mr R8, R24 */
		/* 821D0AB8h case    1:*/		regs.R8 = regs.R24;
		/* 821D0AB8h case    1:*/		return 0x821D0ABC;
		  /* 821D0ABCh */ case    2:  		/* mr R7, R25 */
		/* 821D0ABCh case    2:*/		regs.R7 = regs.R25;
		/* 821D0ABCh case    2:*/		return 0x821D0AC0;
		  /* 821D0AC0h */ case    3:  		/* mr R6, R28 */
		/* 821D0AC0h case    3:*/		regs.R6 = regs.R28;
		/* 821D0AC0h case    3:*/		return 0x821D0AC4;
		  /* 821D0AC4h */ case    4:  		/* mr R4, R31 */
		/* 821D0AC4h case    4:*/		regs.R4 = regs.R31;
		/* 821D0AC4h case    4:*/		return 0x821D0AC8;
		  /* 821D0AC8h */ case    5:  		/* mr R3, R27 */
		/* 821D0AC8h case    5:*/		regs.R3 = regs.R27;
		/* 821D0AC8h case    5:*/		return 0x821D0ACC;
		  /* 821D0ACCh */ case    6:  		/* bl -23180 */
		/* 821D0ACCh case    6:*/		regs.LR = 0x821D0AD0; return 0x821CB040;
		/* 821D0ACCh case    6:*/		return 0x821D0AD0;
	}
	return 0x821D0AD0;
} // Block from 821D0AB4h-821D0AD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D0AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0AD0);
		  /* 821D0AD0h */ case    0:  		/* lwz R19, <#[R1 + 80]> */
		/* 821D0AD0h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0AD0h case    0:*/		return 0x821D0AD4;
		  /* 821D0AD4h */ case    1:  		/* lwz R11, <#[R21]> */
		/* 821D0AD4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821D0AD4h case    1:*/		return 0x821D0AD8;
		  /* 821D0AD8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D0AD8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D0AD8h case    2:*/		return 0x821D0ADC;
		  /* 821D0ADCh */ case    3:  		/* bc 4, CR0_EQ, 476 */
		/* 821D0ADCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D0CB8;  }
		/* 821D0ADCh case    3:*/		return 0x821D0AE0;
		  /* 821D0AE0h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821D0AE0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D0AE0h case    4:*/		return 0x821D0AE4;
		  /* 821D0AE4h */ case    5:  		/* bc 12, CR0_EQ, 468 */
		/* 821D0AE4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D0CB8;  }
		/* 821D0AE4h case    5:*/		return 0x821D0AE8;
		  /* 821D0AE8h */ case    6:  		/* addi R20, R20, 1 */
		/* 821D0AE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821D0AE8h case    6:*/		return 0x821D0AEC;
		  /* 821D0AECh */ case    7:  		/* cmplwi CR6, R20, 3000 */
		/* 821D0AECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000BB8);
		/* 821D0AECh case    7:*/		return 0x821D0AF0;
		  /* 821D0AF0h */ case    8:  		/* bc 12, CR6_GT, 464 */
		/* 821D0AF0h case    8:*/		if ( regs.CR[6].gt ) { return 0x821D0CC0;  }
		/* 821D0AF0h case    8:*/		return 0x821D0AF4;
		  /* 821D0AF4h */ case    9:  		/* lwz R11, <#[R24]> */
		/* 821D0AF4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821D0AF4h case    9:*/		return 0x821D0AF8;
		  /* 821D0AF8h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0AF8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0AF8h case   10:*/		return 0x821D0AFC;
		  /* 821D0AFCh */ case   11:  		/* addi R4, R11, -4 */
		/* 821D0AFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821D0AFCh case   11:*/		return 0x821D0B00;
		  /* 821D0B00h */ case   12:  		/* lwz R9, <#[R11 + 4]> */
		/* 821D0B00h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0B00h case   12:*/		return 0x821D0B04;
		  /* 821D0B04h */ case   13:  		/* mulli R11, R9, 12 */
		/* 821D0B04h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0xC);
		/* 821D0B04h case   13:*/		return 0x821D0B08;
		  /* 821D0B08h */ case   14:  		/* add R10, R11, R4 */
		/* 821D0B08h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R4);
		/* 821D0B08h case   14:*/		return 0x821D0B0C;
		  /* 821D0B0Ch */ case   15:  		/* addic. R11, R9, -1 */
		/* 821D0B0Ch case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 821D0B0Ch case   15:*/		return 0x821D0B10;
		  /* 821D0B10h */ case   16:  		/* lwz R31, <#[R10 + 4]> */
		/* 821D0B10h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821D0B10h case   16:*/		return 0x821D0B14;
		  /* 821D0B14h */ case   17:  		/* lwz R28, <#[R10 + 8]> */
		/* 821D0B14h case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000008) );
		/* 821D0B14h case   17:*/		return 0x821D0B18;
		  /* 821D0B18h */ case   18:  		/* lwz R26, <#[R10 + 12]> */
		/* 821D0B18h case   18:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x0000000C) );
		/* 821D0B18h case   18:*/		return 0x821D0B1C;
		  /* 821D0B1Ch */ case   19:  		/* stw R11, <#[R4 + 8]> */
		/* 821D0B1Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821D0B1Ch case   19:*/		return 0x821D0B20;
		  /* 821D0B20h */ case   20:  		/* bc 4, CR0_EQ, 60 */
		/* 821D0B20h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821D0B5C;  }
		/* 821D0B20h case   20:*/		return 0x821D0B24;
		  /* 821D0B24h */ case   21:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821D0B24h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821D0B24h case   21:*/		return 0x821D0B28;
		  /* 821D0B28h */ case   22:  		/* mr R3, R24 */
		/* 821D0B28h case   22:*/		regs.R3 = regs.R24;
		/* 821D0B28h case   22:*/		return 0x821D0B2C;
		  /* 821D0B2Ch */ case   23:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D0B2Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0B2Ch case   23:*/		return 0x821D0B30;
		  /* 821D0B30h */ case   24:  		/* lwz R9, <#[R11]> */
		/* 821D0B30h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0B30h case   24:*/		return 0x821D0B34;
		  /* 821D0B34h */ case   25:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821D0B34h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821D0B34h case   25:*/		return 0x821D0B38;
		  /* 821D0B38h */ case   26:  		/* stw R9, <#[R10]> */
		/* 821D0B38h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D0B38h case   26:*/		return 0x821D0B3C;
		  /* 821D0B3Ch */ case   27:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D0B3Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D0B3Ch case   27:*/		return 0x821D0B40;
		  /* 821D0B40h */ case   28:  		/* lwz R11, <#[R11]> */
		/* 821D0B40h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0B40h case   28:*/		return 0x821D0B44;
		  /* 821D0B44h */ case   29:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0B44h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0B44h case   29:*/		return 0x821D0B48;
		  /* 821D0B48h */ case   30:  		/* stw R10, <#[R11]> */
		/* 821D0B48h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0B48h case   30:*/		return 0x821D0B4C;
		  /* 821D0B4Ch */ case   31:  		/* lwz R11, <#[R4 + 12]> */
		/* 821D0B4Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821D0B4Ch case   31:*/		return 0x821D0B50;
		  /* 821D0B50h */ case   32:  		/* mulli R11, R11, 12 */
		/* 821D0B50h case   32:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821D0B50h case   32:*/		return 0x821D0B54;
		  /* 821D0B54h */ case   33:  		/* addi R5, R11, 16 */
		/* 821D0B54h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 821D0B54h case   33:*/		return 0x821D0B58;
		  /* 821D0B58h */ case   34:  		/* bl -519504 */
		/* 821D0B58h case   34:*/		regs.LR = 0x821D0B5C; return 0x82151E08;
		/* 821D0B58h case   34:*/		return 0x821D0B5C;
	}
	return 0x821D0B5C;
} // Block from 821D0AD0h-821D0B5Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 821D0B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0B5C);
		  /* 821D0B5Ch */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821D0B5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D0B5Ch case    0:*/		return 0x821D0B60;
		  /* 821D0B60h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 821D0B60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D0B9C;  }
		/* 821D0B60h case    1:*/		return 0x821D0B64;
		  /* 821D0B64h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D0B64h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D0B64h case    2:*/		return 0x821D0B68;
		  /* 821D0B68h */ case    3:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821D0B68h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821D0B68h case    3:*/		return 0x821D0B6C;
		  /* 821D0B6Ch */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 821D0B6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D0B6Ch case    4:*/		return 0x821D0B70;
		  /* 821D0B70h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D0B70h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D0B80;  }
		/* 821D0B70h case    5:*/		return 0x821D0B74;
		  /* 821D0B74h */ case    6:  		/* cmplwi CR6, R11, 12 */
		/* 821D0B74h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 821D0B74h case    6:*/		return 0x821D0B78;
		  /* 821D0B78h */ case    7:  		/* li R11, 0 */
		/* 821D0B78h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D0B78h case    7:*/		return 0x821D0B7C;
		  /* 821D0B7Ch */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821D0B7Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D0B84;  }
		/* 821D0B7Ch case    8:*/		return 0x821D0B80;
	}
	return 0x821D0B80;
} // Block from 821D0B5Ch-821D0B80h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D0B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0B80);
		  /* 821D0B80h */ case    0:  		/* li R11, 1 */
		/* 821D0B80h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D0B80h case    0:*/		return 0x821D0B84;
	}
	return 0x821D0B84;
} // Block from 821D0B80h-821D0B84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D0B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0B84);
		  /* 821D0B84h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D0B84h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D0B84h case    0:*/		return 0x821D0B88;
		  /* 821D0B88h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D0B88h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D0B9C;  }
		/* 821D0B88h case    1:*/		return 0x821D0B8C;
		  /* 821D0B8Ch */ case    2:  		/* rlwinm. R11, R10, 26, 31, 31 */
		/* 821D0B8Ch case    2:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R10);
		/* 821D0B8Ch case    2:*/		return 0x821D0B90;
		  /* 821D0B90h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821D0B90h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D0B9C;  }
		/* 821D0B90h case    3:*/		return 0x821D0B94;
		  /* 821D0B94h */ case    4:  		/* rlwinm. R11, R10, 7, 31, 31 */
		/* 821D0B94h case    4:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R10);
		/* 821D0B94h case    4:*/		return 0x821D0B98;
		  /* 821D0B98h */ case    5:  		/* bc 12, CR0_EQ, -704 */
		/* 821D0B98h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D08D8;  }
		/* 821D0B98h case    5:*/		return 0x821D0B9C;
	}
	return 0x821D0B9C;
} // Block from 821D0B84h-821D0B9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D0B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0B9C);
		  /* 821D0B9Ch */ case    0:  		/* li R5, 51 */
		/* 821D0B9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821D0B9Ch case    0:*/		return 0x821D0BA0;
		  /* 821D0BA0h */ case    1:  		/* li R4, 8 */
		/* 821D0BA0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D0BA0h case    1:*/		return 0x821D0BA4;
		  /* 821D0BA4h */ case    2:  		/* mr R3, R27 */
		/* 821D0BA4h case    2:*/		regs.R3 = regs.R27;
		/* 821D0BA4h case    2:*/		return 0x821D0BA8;
		  /* 821D0BA8h */ case    3:  		/* bl -443064 */
		/* 821D0BA8h case    3:*/		regs.LR = 0x821D0BAC; return 0x821648F0;
		/* 821D0BA8h case    3:*/		return 0x821D0BAC;
		  /* 821D0BACh */ case    4:  		/* ori R11, R3, 1 */
		/* 821D0BACh case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821D0BACh case    4:*/		return 0x821D0BB0;
		  /* 821D0BB0h */ case    5:  		/* addi R29, R3, 4 */
		/* 821D0BB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x4);
		/* 821D0BB0h case    5:*/		return 0x821D0BB4;
		  /* 821D0BB4h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821D0BB4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D0BB4h case    6:*/		return 0x821D0BB8;
		  /* 821D0BB8h */ case    7:  		/* mr R30, R3 */
		/* 821D0BB8h case    7:*/		regs.R30 = regs.R3;
		/* 821D0BB8h case    7:*/		return 0x821D0BBC;
		  /* 821D0BBCh */ case    8:  		/* ori R11, R29, 1 */
		/* 821D0BBCh case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R29,0x1);
		/* 821D0BBCh case    8:*/		return 0x821D0BC0;
		  /* 821D0BC0h */ case    9:  		/* stw R11, <#[R3]> */
		/* 821D0BC0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821D0BC0h case    9:*/		return 0x821D0BC4;
		  /* 821D0BC4h */ case   10:  		/* lwz R11, <#[R22]> */
		/* 821D0BC4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D0BC4h case   10:*/		return 0x821D0BC8;
		  /* 821D0BC8h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D0BC8h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D0BC8h case   11:*/		return 0x821D0BCC;
		  /* 821D0BCCh */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821D0BCCh case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D0BF4;  }
		/* 821D0BCCh case   12:*/		return 0x821D0BD0;
		  /* 821D0BD0h */ case   13:  		/* lwz R11, <#[R25]> */
		/* 821D0BD0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821D0BD0h case   13:*/		return 0x821D0BD4;
		  /* 821D0BD4h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0BD4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0BD4h case   14:*/		return 0x821D0BD8;
		  /* 821D0BD8h */ case   15:  		/* addic. R3, R11, -4 */
		/* 821D0BD8h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821D0BD8h case   15:*/		return 0x821D0BDC;
		  /* 821D0BDCh */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821D0BDCh case   16:*/		if ( regs.CR[0].eq ) { return 0x821D0BF4;  }
		/* 821D0BDCh case   16:*/		return 0x821D0BE0;
		  /* 821D0BE0h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D0BE0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D0BE0h case   17:*/		return 0x821D0BE4;
		  /* 821D0BE4h */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D0BE4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D0BE4h case   18:*/		return 0x821D0BE8;
		  /* 821D0BE8h */ case   19:  		/* addi R11, R11, 1 */
		/* 821D0BE8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D0BE8h case   19:*/		return 0x821D0BEC;
		  /* 821D0BECh */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821D0BECh case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D0BECh case   20:*/		return 0x821D0BF0;
		  /* 821D0BF0h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821D0BF0h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821D0C00;  }
		/* 821D0BF0h case   21:*/		return 0x821D0BF4;
	}
	return 0x821D0BF4;
} // Block from 821D0B9Ch-821D0BF4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D0BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0BF4);
		  /* 821D0BF4h */ case    0:  		/* li R4, 1 */
		/* 821D0BF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D0BF4h case    0:*/		return 0x821D0BF8;
		  /* 821D0BF8h */ case    1:  		/* mr R3, R25 */
		/* 821D0BF8h case    1:*/		regs.R3 = regs.R25;
		/* 821D0BF8h case    1:*/		return 0x821D0BFC;
		  /* 821D0BFCh */ case    2:  		/* bl -277300 */
		/* 821D0BFCh case    2:*/		regs.LR = 0x821D0C00; return 0x8218D0C8;
		/* 821D0BFCh case    2:*/		return 0x821D0C00;
	}
	return 0x821D0C00;
} // Block from 821D0BF4h-821D0C00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D0C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0C00);
		  /* 821D0C00h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D0C00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D0C00h case    0:*/		return 0x821D0C04;
		  /* 821D0C04h */ case    1:  		/* addi R10, R11, 4 */
		/* 821D0C04h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D0C04h case    1:*/		return 0x821D0C08;
		  /* 821D0C08h */ case    2:  		/* addi R9, R11, 1 */
		/* 821D0C08h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821D0C08h case    2:*/		return 0x821D0C0C;
		  /* 821D0C0Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821D0C0Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D0C0Ch case    3:*/		return 0x821D0C10;
		  /* 821D0C10h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821D0C10h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D0C10h case    4:*/		return 0x821D0C14;
		  /* 821D0C14h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821D0C14h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821D0C14h case    5:*/		return 0x821D0C18;
		  /* 821D0C18h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 821D0C18h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D0C18h case    6:*/		return 0x821D0C1C;
		  /* 821D0C1Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D0C1Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D0C1Ch case    7:*/		return 0x821D0C20;
		  /* 821D0C20h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821D0C20h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D0C48;  }
		/* 821D0C20h case    8:*/		return 0x821D0C24;
		  /* 821D0C24h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821D0C24h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D0C24h case    9:*/		return 0x821D0C28;
		  /* 821D0C28h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0C28h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0C28h case   10:*/		return 0x821D0C2C;
		  /* 821D0C2Ch */ case   11:  		/* addic. R10, R11, -4 */
		/* 821D0C2Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 821D0C2Ch case   11:*/		return 0x821D0C30;
		  /* 821D0C30h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821D0C30h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D0C48;  }
		/* 821D0C30h case   12:*/		return 0x821D0C34;
		  /* 821D0C34h */ case   13:  		/* lwz R11, <#[R10 + 8]> */
		/* 821D0C34h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821D0C34h case   13:*/		return 0x821D0C38;
		  /* 821D0C38h */ case   14:  		/* lwz R9, <#[R10 + 12]> */
		/* 821D0C38h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821D0C38h case   14:*/		return 0x821D0C3C;
		  /* 821D0C3Ch */ case   15:  		/* addi R11, R11, 1 */
		/* 821D0C3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D0C3Ch case   15:*/		return 0x821D0C40;
		  /* 821D0C40h */ case   16:  		/* cmplw CR6, R11, R9 */
		/* 821D0C40h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821D0C40h case   16:*/		return 0x821D0C44;
		  /* 821D0C44h */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 821D0C44h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821D0C58;  }
		/* 821D0C44h case   17:*/		return 0x821D0C48;
	}
	return 0x821D0C48;
} // Block from 821D0C00h-821D0C48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D0C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0C48);
		  /* 821D0C48h */ case    0:  		/* li R4, 1 */
		/* 821D0C48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D0C48h case    0:*/		return 0x821D0C4C;
		  /* 821D0C4Ch */ case    1:  		/* mr R3, R30 */
		/* 821D0C4Ch case    1:*/		regs.R3 = regs.R30;
		/* 821D0C4Ch case    1:*/		return 0x821D0C50;
		  /* 821D0C50h */ case    2:  		/* bl 135320 */
		/* 821D0C50h case    2:*/		regs.LR = 0x821D0C54; return 0x821F1CE8;
		/* 821D0C50h case    2:*/		return 0x821D0C54;
		  /* 821D0C54h */ case    3:  		/* mr R10, R3 */
		/* 821D0C54h case    3:*/		regs.R10 = regs.R3;
		/* 821D0C54h case    3:*/		return 0x821D0C58;
	}
	return 0x821D0C58;
} // Block from 821D0C48h-821D0C58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D0C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0C58);
		  /* 821D0C58h */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 821D0C58h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821D0C58h case    0:*/		return 0x821D0C5C;
		  /* 821D0C5Ch */ case    1:  		/* mr R4, R28 */
		/* 821D0C5Ch case    1:*/		regs.R4 = regs.R28;
		/* 821D0C5Ch case    1:*/		return 0x821D0C60;
		  /* 821D0C60h */ case    2:  		/* mr R3, R31 */
		/* 821D0C60h case    2:*/		regs.R3 = regs.R31;
		/* 821D0C60h case    2:*/		return 0x821D0C64;
		  /* 821D0C64h */ case    3:  		/* mulli R11, R9, 12 */
		/* 821D0C64h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0xC);
		/* 821D0C64h case    3:*/		return 0x821D0C68;
		  /* 821D0C68h */ case    4:  		/* add R11, R11, R10 */
		/* 821D0C68h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D0C68h case    4:*/		return 0x821D0C6C;
		  /* 821D0C6Ch */ case    5:  		/* addi R8, R9, 1 */
		/* 821D0C6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x1);
		/* 821D0C6Ch case    5:*/		return 0x821D0C70;
		  /* 821D0C70h */ case    6:  		/* addi R9, R11, 16 */
		/* 821D0C70h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 821D0C70h case    6:*/		return 0x821D0C74;
		  /* 821D0C74h */ case    7:  		/* stw R8, <#[R10 + 8]> */
		/* 821D0C74h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 821D0C74h case    7:*/		return 0x821D0C78;
		  /* 821D0C78h */ case    8:  		/* stw R31, <#[R11 + 16]> */
		/* 821D0C78h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821D0C78h case    8:*/		return 0x821D0C7C;
		  /* 821D0C7Ch */ case    9:  		/* stw R28, <#[R11 + 20]> */
		/* 821D0C7Ch case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000014) );
		/* 821D0C7Ch case    9:*/		return 0x821D0C80;
		  /* 821D0C80h */ case   10:  		/* stw R26, <#[R11 + 24]> */
		/* 821D0C80h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000018) );
		/* 821D0C80h case   10:*/		return 0x821D0C84;
		  /* 821D0C84h */ case   11:  		/* bl -79188 */
		/* 821D0C84h case   11:*/		regs.LR = 0x821D0C88; return 0x821BD730;
		/* 821D0C84h case   11:*/		return 0x821D0C88;
		  /* 821D0C88h */ case   12:  		/* cmpwi CR6, R19, -1 */
		/* 821D0C88h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R19,0xFFFFFFFF);
		/* 821D0C88h case   12:*/		return 0x821D0C8C;
		  /* 821D0C8Ch */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 821D0C8Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D0C98;  }
		/* 821D0C8Ch case   13:*/		return 0x821D0C90;
		  /* 821D0C90h */ case   14:  		/* mr R19, R3 */
		/* 821D0C90h case   14:*/		regs.R19 = regs.R3;
		/* 821D0C90h case   14:*/		return 0x821D0C94;
		  /* 821D0C94h */ case   15:  		/* b 16 */
		/* 821D0C94h case   15:*/		return 0x821D0CA4;
		/* 821D0C94h case   15:*/		return 0x821D0C98;
	}
	return 0x821D0C98;
} // Block from 821D0C58h-821D0C98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D0C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0C98);
		  /* 821D0C98h */ case    0:  		/* cmpw CR6, R19, R3 */
		/* 821D0C98h case    0:*/		cpu::op::cmpw<6>(regs,regs.R19,regs.R3);
		/* 821D0C98h case    0:*/		return 0x821D0C9C;
		  /* 821D0C9Ch */ case    1:  		/* bc 12, CR6_EQ, -456 */
		/* 821D0C9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D0AD4;  }
		/* 821D0C9Ch case    1:*/		return 0x821D0CA0;
		  /* 821D0CA0h */ case    2:  		/* li R19, -2 */
		/* 821D0CA0h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0xFFFFFFFE);
		/* 821D0CA0h case    2:*/		return 0x821D0CA4;
	}
	return 0x821D0CA4;
} // Block from 821D0C98h-821D0CA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CA4);
		  /* 821D0CA4h */ case    0:  		/* stw R19, <#[R1 + 80]> */
		/* 821D0CA4h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0CA4h case    0:*/		return 0x821D0CA8;
		  /* 821D0CA8h */ case    1:  		/* b -468 */
		/* 821D0CA8h case    1:*/		return 0x821D0AD4;
		/* 821D0CA8h case    1:*/		return 0x821D0CAC;
	}
	return 0x821D0CAC;
} // Block from 821D0CA4h-821D0CACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CAC);
		  /* 821D0CACh */ case    0:  		/* li R4, 4800 */
		/* 821D0CACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D0CACh case    0:*/		return 0x821D0CB0;
		  /* 821D0CB0h */ case    1:  		/* mr R3, R27 */
		/* 821D0CB0h case    1:*/		regs.R3 = regs.R27;
		/* 821D0CB0h case    1:*/		return 0x821D0CB4;
		  /* 821D0CB4h */ case    2:  		/* bl -519756 */
		/* 821D0CB4h case    2:*/		regs.LR = 0x821D0CB8; return 0x82151E68;
		/* 821D0CB4h case    2:*/		return 0x821D0CB8;
	}
	return 0x821D0CB8;
} // Block from 821D0CACh-821D0CB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CB8);
		  /* 821D0CB8h */ case    0:  		/* mr R3, R25 */
		/* 821D0CB8h case    0:*/		regs.R3 = regs.R25;
		/* 821D0CB8h case    0:*/		return 0x821D0CBC;
		  /* 821D0CBCh */ case    1:  		/* b 32 */
		/* 821D0CBCh case    1:*/		return 0x821D0CDC;
		/* 821D0CBCh case    1:*/		return 0x821D0CC0;
	}
	return 0x821D0CC0;
} // Block from 821D0CB8h-821D0CC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CC0);
		  /* 821D0CC0h */ case    0:  		/* li R5, 0 */
		/* 821D0CC0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D0CC0h case    0:*/		return 0x821D0CC4;
		  /* 821D0CC4h */ case    1:  		/* mr R4, R25 */
		/* 821D0CC4h case    1:*/		regs.R4 = regs.R25;
		/* 821D0CC4h case    1:*/		return 0x821D0CC8;
		  /* 821D0CC8h */ case    2:  		/* mr R3, R27 */
		/* 821D0CC8h case    2:*/		regs.R3 = regs.R27;
		/* 821D0CC8h case    2:*/		return 0x821D0CCC;
		  /* 821D0CCCh */ case    3:  		/* bl -13140 */
		/* 821D0CCCh case    3:*/		regs.LR = 0x821D0CD0; return 0x821CD978;
		/* 821D0CCCh case    3:*/		return 0x821D0CD0;
		  /* 821D0CD0h */ case    4:  		/* mr R3, R24 */
		/* 821D0CD0h case    4:*/		regs.R3 = regs.R24;
		/* 821D0CD0h case    4:*/		return 0x821D0CD4;
		  /* 821D0CD4h */ case    5:  		/* bl 134660 */
		/* 821D0CD4h case    5:*/		regs.LR = 0x821D0CD8; return 0x821F1AD8;
		/* 821D0CD4h case    5:*/		return 0x821D0CD8;
		  /* 821D0CD8h */ case    6:  		/* li R3, 0 */
		/* 821D0CD8h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821D0CD8h case    6:*/		return 0x821D0CDC;
	}
	return 0x821D0CDC;
} // Block from 821D0CC0h-821D0CDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CDC);
		  /* 821D0CDCh */ case    0:  		/* addi R1, R1, 208 */
		/* 821D0CDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821D0CDCh case    0:*/		return 0x821D0CE0;
		  /* 821D0CE0h */ case    1:  		/* lfd FR31, <#[R1 - 120]> */
		/* 821D0CE0h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821D0CE0h case    1:*/		return 0x821D0CE4;
		  /* 821D0CE4h */ case    2:  		/* b -1309280 */
		/* 821D0CE4h case    2:*/		return 0x82091284;
		/* 821D0CE4h case    2:*/		return 0x821D0CE8;
	}
	return 0x821D0CE8;
} // Block from 821D0CDCh-821D0CE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D0CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0CE8);
		  /* 821D0CE8h */ case    0:  		/* mfspr R12, LR */
		/* 821D0CE8h case    0:*/		regs.R12 = regs.LR;
		/* 821D0CE8h case    0:*/		return 0x821D0CEC;
		  /* 821D0CECh */ case    1:  		/* bl -1309356 */
		/* 821D0CECh case    1:*/		regs.LR = 0x821D0CF0; return 0x82091240;
		/* 821D0CECh case    1:*/		return 0x821D0CF0;
		  /* 821D0CF0h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821D0CF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821D0CF0h case    2:*/		return 0x821D0CF4;
		  /* 821D0CF4h */ case    3:  		/* lwz R24, <#[R4 + 44]> */
		/* 821D0CF4h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R4 + 0x0000002C) );
		/* 821D0CF4h case    3:*/		return 0x821D0CF8;
		  /* 821D0CF8h */ case    4:  		/* mr R31, R3 */
		/* 821D0CF8h case    4:*/		regs.R31 = regs.R3;
		/* 821D0CF8h case    4:*/		return 0x821D0CFC;
		  /* 821D0CFCh */ case    5:  		/* lwz R23, <#[R4 + 48]> */
		/* 821D0CFCh case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R4 + 0x00000030) );
		/* 821D0CFCh case    5:*/		return 0x821D0D00;
		  /* 821D0D00h */ case    6:  		/* mr R30, R4 */
		/* 821D0D00h case    6:*/		regs.R30 = regs.R4;
		/* 821D0D00h case    6:*/		return 0x821D0D04;
		  /* 821D0D04h */ case    7:  		/* li R25, 0 */
		/* 821D0D04h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D0D04h case    7:*/		return 0x821D0D08;
		  /* 821D0D08h */ case    8:  		/* li R28, 0 */
		/* 821D0D08h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D0D08h case    8:*/		return 0x821D0D0C;
		  /* 821D0D0Ch */ case    9:  		/* lwz R11, <#[R24]> */
		/* 821D0D0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821D0D0Ch case    9:*/		return 0x821D0D10;
		  /* 821D0D10h */ case   10:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D0D10h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D0D10h case   10:*/		return 0x821D0D14;
		  /* 821D0D14h */ case   11:  		/* bc 12, CR0_EQ, 2372 */
		/* 821D0D14h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D1658;  }
		/* 821D0D14h case   11:*/		return 0x821D0D18;
		  /* 821D0D18h */ case   12:  		/* li R22, 1 */
		/* 821D0D18h case   12:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821D0D18h case   12:*/		return 0x821D0D1C;
		  /* 821D0D1Ch */ case   13:  		/* li R10, 0 */
		/* 821D0D1Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D0D1Ch case   13:*/		return 0x821D0D20;
		  /* 821D0D20h */ case   14:  		/* mr R9, R30 */
		/* 821D0D20h case   14:*/		regs.R9 = regs.R30;
		/* 821D0D20h case   14:*/		return 0x821D0D24;
		  /* 821D0D24h */ case   15:  		/* li R8, 0 */
		/* 821D0D24h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D0D24h case   15:*/		return 0x821D0D28;
		  /* 821D0D28h */ case   16:  		/* addi R7, R1, 100 */
		/* 821D0D28h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x64);
		/* 821D0D28h case   16:*/		return 0x821D0D2C;
		  /* 821D0D2Ch */ case   17:  		/* addi R6, R1, 88 */
		/* 821D0D2Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821D0D2Ch case   17:*/		return 0x821D0D30;
		  /* 821D0D30h */ case   18:  		/* addi R5, R1, 80 */
		/* 821D0D30h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821D0D30h case   18:*/		return 0x821D0D34;
		  /* 821D0D34h */ case   19:  		/* mr R4, R28 */
		/* 821D0D34h case   19:*/		regs.R4 = regs.R28;
		/* 821D0D34h case   19:*/		return 0x821D0D38;
		  /* 821D0D38h */ case   20:  		/* mr R3, R24 */
		/* 821D0D38h case   20:*/		regs.R3 = regs.R24;
		/* 821D0D38h case   20:*/		return 0x821D0D3C;
		  /* 821D0D3Ch */ case   21:  		/* bl 337812 */
		/* 821D0D3Ch case   21:*/		regs.LR = 0x821D0D40; return 0x822234D0;
		/* 821D0D3Ch case   21:*/		return 0x821D0D40;
		  /* 821D0D40h */ case   22:  		/* li R10, 0 */
		/* 821D0D40h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D0D40h case   22:*/		return 0x821D0D44;
		  /* 821D0D44h */ case   23:  		/* mr R9, R30 */
		/* 821D0D44h case   23:*/		regs.R9 = regs.R30;
		/* 821D0D44h case   23:*/		return 0x821D0D48;
		  /* 821D0D48h */ case   24:  		/* li R8, 0 */
		/* 821D0D48h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D0D48h case   24:*/		return 0x821D0D4C;
		  /* 821D0D4Ch */ case   25:  		/* addi R7, R1, 96 */
		/* 821D0D4Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821D0D4Ch case   25:*/		return 0x821D0D50;
		  /* 821D0D50h */ case   26:  		/* addi R6, R1, 92 */
		/* 821D0D50h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C);
		/* 821D0D50h case   26:*/		return 0x821D0D54;
		  /* 821D0D54h */ case   27:  		/* addi R5, R1, 84 */
		/* 821D0D54h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821D0D54h case   27:*/		return 0x821D0D58;
		  /* 821D0D58h */ case   28:  		/* mr R4, R28 */
		/* 821D0D58h case   28:*/		regs.R4 = regs.R28;
		/* 821D0D58h case   28:*/		return 0x821D0D5C;
		  /* 821D0D5Ch */ case   29:  		/* mr R3, R23 */
		/* 821D0D5Ch case   29:*/		regs.R3 = regs.R23;
		/* 821D0D5Ch case   29:*/		return 0x821D0D60;
		  /* 821D0D60h */ case   30:  		/* bl 337776 */
		/* 821D0D60h case   30:*/		regs.LR = 0x821D0D64; return 0x822234D0;
		/* 821D0D60h case   30:*/		return 0x821D0D64;
		  /* 821D0D64h */ case   31:  		/* lwz R27, <#[R1 + 80]> */
		/* 821D0D64h case   31:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0D64h case   31:*/		return 0x821D0D68;
		  /* 821D0D68h */ case   32:  		/* lwz R29, <#[R1 + 84]> */
		/* 821D0D68h case   32:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0D68h case   32:*/		return 0x821D0D6C;
		  /* 821D0D6Ch */ case   33:  		/* cmplw CR6, R27, R29 */
		/* 821D0D6Ch case   33:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R29);
		/* 821D0D6Ch case   33:*/		return 0x821D0D70;
		  /* 821D0D70h */ case   34:  		/* bc 12, CR6_EQ, 2260 */
		/* 821D0D70h case   34:*/		if ( regs.CR[6].eq ) { return 0x821D1644;  }
		/* 821D0D70h case   34:*/		return 0x821D0D74;
		  /* 821D0D74h */ case   35:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D0D74h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D0D74h case   35:*/		return 0x821D0D78;
		  /* 821D0D78h */ case   36:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D0D78h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D0D78h case   36:*/		return 0x821D0D7C;
		  /* 821D0D7Ch */ case   37:  		/* rlwinm R9, R11, 25, 25, 31 */
		/* 821D0D7Ch case   37:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R11);
		/* 821D0D7Ch case   37:*/		return 0x821D0D80;
		  /* 821D0D80h */ case   38:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821D0D80h case   38:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821D0D80h case   38:*/		return 0x821D0D84;
		  /* 821D0D84h */ case   39:  		/* cmplw CR6, R9, R11 */
		/* 821D0D84h case   39:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D0D84h case   39:*/		return 0x821D0D88;
		  /* 821D0D88h */ case   40:  		/* bc 4, CR6_EQ, 728 */
		/* 821D0D88h case   40:*/		if ( !regs.CR[6].eq ) { return 0x821D1060;  }
		/* 821D0D88h case   40:*/		return 0x821D0D8C;
		  /* 821D0D8Ch */ case   41:  		/* lwz R10, <#[R27 + 8]> */
		/* 821D0D8Ch case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821D0D8Ch case   41:*/		return 0x821D0D90;
		  /* 821D0D90h */ case   42:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821D0D90h case   42:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821D0D90h case   42:*/		return 0x821D0D94;
		  /* 821D0D94h */ case   43:  		/* cmplw CR6, R10, R11 */
		/* 821D0D94h case   43:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D0D94h case   43:*/		return 0x821D0D98;
		  /* 821D0D98h */ case   44:  		/* bc 4, CR6_EQ, 576 */
		/* 821D0D98h case   44:*/		if ( !regs.CR[6].eq ) { return 0x821D0FD8;  }
		/* 821D0D98h case   44:*/		return 0x821D0D9C;
		  /* 821D0D9Ch */ case   45:  		/* lwz R11, <#[R1 + 96]> */
		/* 821D0D9Ch case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821D0D9Ch case   45:*/		return 0x821D0DA0;
		  /* 821D0DA0h */ case   46:  		/* cmplwi CR6, R11, 0 */
		/* 821D0DA0h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D0DA0h case   46:*/		return 0x821D0DA4;
		  /* 821D0DA4h */ case   47:  		/* bc 4, CR6_EQ, 564 */
		/* 821D0DA4h case   47:*/		if ( !regs.CR[6].eq ) { return 0x821D0FD8;  }
		/* 821D0DA4h case   47:*/		return 0x821D0DA8;
		  /* 821D0DA8h */ case   48:  		/* li R10, 0 */
		/* 821D0DA8h case   48:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D0DA8h case   48:*/		return 0x821D0DAC;
		  /* 821D0DACh */ case   49:  		/* lwz R3, <#[R29 + 44]> */
		/* 821D0DACh case   49:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D0DACh case   49:*/		return 0x821D0DB0;
		  /* 821D0DB0h */ case   50:  		/* mr R9, R30 */
		/* 821D0DB0h case   50:*/		regs.R9 = regs.R30;
		/* 821D0DB0h case   50:*/		return 0x821D0DB4;
		  /* 821D0DB4h */ case   51:  		/* lwz R4, <#[R1 + 92]> */
		/* 821D0DB4h case   51:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0DB4h case   51:*/		return 0x821D0DB8;
		  /* 821D0DB8h */ case   52:  		/* li R8, 0 */
		/* 821D0DB8h case   52:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D0DB8h case   52:*/		return 0x821D0DBC;
		  /* 821D0DBCh */ case   53:  		/* addi R7, R1, 120 */
		/* 821D0DBCh case   53:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 821D0DBCh case   53:*/		return 0x821D0DC0;
		  /* 821D0DC0h */ case   54:  		/* addi R6, R1, 116 */
		/* 821D0DC0h case   54:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x74);
		/* 821D0DC0h case   54:*/		return 0x821D0DC4;
		  /* 821D0DC4h */ case   55:  		/* addi R5, R1, 112 */
		/* 821D0DC4h case   55:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821D0DC4h case   55:*/		return 0x821D0DC8;
		  /* 821D0DC8h */ case   56:  		/* bl 337672 */
		/* 821D0DC8h case   56:*/		regs.LR = 0x821D0DCC; return 0x822234D0;
		/* 821D0DC8h case   56:*/		return 0x821D0DCC;
		  /* 821D0DCCh */ case   57:  		/* lwz R7, <#[R1 + 112]> */
		/* 821D0DCCh case   57:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000070) );
		/* 821D0DCCh case   57:*/		return 0x821D0DD0;
		  /* 821D0DD0h */ case   58:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D0DD0h case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D0DD0h case   58:*/		return 0x821D0DD4;
		  /* 821D0DD4h */ case   59:  		/* lwz R11, <#[R7 + 8]> */
		/* 821D0DD4h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821D0DD4h case   59:*/		return 0x821D0DD8;
		  /* 821D0DD8h */ case   60:  		/* xor R11, R11, R10 */
		/* 821D0DD8h case   60:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D0DD8h case   60:*/		return 0x821D0DDC;
		  /* 821D0DDCh */ case   61:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821D0DDCh case   61:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D0DDCh case   61:*/		return 0x821D0DE0;
		  /* 821D0DE0h */ case   62:  		/* bc 12, CR0_EQ, 496 */
		/* 821D0DE0h case   62:*/		if ( regs.CR[0].eq ) { return 0x821D0FD0;  }
		/* 821D0DE0h case   62:*/		return 0x821D0DE4;
		  /* 821D0DE4h */ case   63:  		/* lwz R29, <#[R1 + 84]> */
		/* 821D0DE4h case   63:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0DE4h case   63:*/		return 0x821D0DE8;
		  /* 821D0DE8h */ case   64:  		/* li R6, 0 */
		/* 821D0DE8h case   64:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0DE8h case   64:*/		return 0x821D0DEC;
		  /* 821D0DECh */ case   65:  		/* mr R5, R28 */
		/* 821D0DECh case   65:*/		regs.R5 = regs.R28;
		/* 821D0DECh case   65:*/		return 0x821D0DF0;
		  /* 821D0DF0h */ case   66:  		/* lwz R9, <#[R1 + 120]> */
		/* 821D0DF0h case   66:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 821D0DF0h case   66:*/		return 0x821D0DF4;
		  /* 821D0DF4h */ case   67:  		/* mr R10, R29 */
		/* 821D0DF4h case   67:*/		regs.R10 = regs.R29;
		/* 821D0DF4h case   67:*/		return 0x821D0DF8;
		  /* 821D0DF8h */ case   68:  		/* lwz R8, <#[R1 + 116]> */
		/* 821D0DF8h case   68:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 821D0DF8h case   68:*/		return 0x821D0DFC;
		  /* 821D0DFCh */ case   69:  		/* mr R4, R30 */
		/* 821D0DFCh case   69:*/		regs.R4 = regs.R30;
		/* 821D0DFCh case   69:*/		return 0x821D0E00;
		  /* 821D0E00h */ case   70:  		/* mr R3, R31 */
		/* 821D0E00h case   70:*/		regs.R3 = regs.R31;
		/* 821D0E00h case   70:*/		return 0x821D0E04;
		  /* 821D0E04h */ case   71:  		/* bl -67836 */
		/* 821D0E04h case   71:*/		regs.LR = 0x821D0E08; return 0x821C0508;
		/* 821D0E04h case   71:*/		return 0x821D0E08;
		  /* 821D0E08h */ case   72:  		/* lwz R27, <#[R1 + 80]> */
		/* 821D0E08h case   72:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0E08h case   72:*/		return 0x821D0E0C;
		  /* 821D0E0Ch */ case   73:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D0E0Ch case   73:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D0E0Ch case   73:*/		return 0x821D0E10;
		  /* 821D0E10h */ case   74:  		/* bc 12, CR0_EQ, 456 */
		/* 821D0E10h case   74:*/		if ( regs.CR[0].eq ) { return 0x821D0FD8;  }
		/* 821D0E10h case   74:*/		return 0x821D0E14;
		  /* 821D0E14h */ case   75:  		/* mr R10, R30 */
		/* 821D0E14h case   75:*/		regs.R10 = regs.R30;
		/* 821D0E14h case   75:*/		return 0x821D0E18;
		  /* 821D0E18h */ case   76:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D0E18h case   76:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D0E18h case   76:*/		return 0x821D0E1C;
		  /* 821D0E1Ch */ case   77:  		/* li R6, 0 */
		/* 821D0E1Ch case   77:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0E1Ch case   77:*/		return 0x821D0E20;
		  /* 821D0E20h */ case   78:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D0E20h case   78:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D0E20h case   78:*/		return 0x821D0E24;
		  /* 821D0E24h */ case   79:  		/* mr R7, R27 */
		/* 821D0E24h case   79:*/		regs.R7 = regs.R27;
		/* 821D0E24h case   79:*/		return 0x821D0E28;
		  /* 821D0E28h */ case   80:  		/* lwz R5, <#[R1 + 92]> */
		/* 821D0E28h case   80:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0E28h case   80:*/		return 0x821D0E2C;
		  /* 821D0E2Ch */ case   81:  		/* mr R4, R29 */
		/* 821D0E2Ch case   81:*/		regs.R4 = regs.R29;
		/* 821D0E2Ch case   81:*/		return 0x821D0E30;
		  /* 821D0E30h */ case   82:  		/* mr R3, R31 */
		/* 821D0E30h case   82:*/		regs.R3 = regs.R31;
		/* 821D0E30h case   82:*/		return 0x821D0E34;
		  /* 821D0E34h */ case   83:  		/* bl -67884 */
		/* 821D0E34h case   83:*/		regs.LR = 0x821D0E38; return 0x821C0508;
		/* 821D0E34h case   83:*/		return 0x821D0E38;
		  /* 821D0E38h */ case   84:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D0E38h case   84:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D0E38h case   84:*/		return 0x821D0E3C;
		  /* 821D0E3Ch */ case   85:  		/* bc 12, CR0_EQ, 412 */
		/* 821D0E3Ch case   85:*/		if ( regs.CR[0].eq ) { return 0x821D0FD8;  }
		/* 821D0E3Ch case   85:*/		return 0x821D0E40;
		  /* 821D0E40h */ case   86:  		/* li R6, 0 */
		/* 821D0E40h case   86:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0E40h case   86:*/		return 0x821D0E44;
		  /* 821D0E44h */ case   87:  		/* mr R5, R29 */
		/* 821D0E44h case   87:*/		regs.R5 = regs.R29;
		/* 821D0E44h case   87:*/		return 0x821D0E48;
		  /* 821D0E48h */ case   88:  		/* mr R4, R27 */
		/* 821D0E48h case   88:*/		regs.R4 = regs.R27;
		/* 821D0E48h case   88:*/		return 0x821D0E4C;
		  /* 821D0E4Ch */ case   89:  		/* mr R3, R31 */
		/* 821D0E4Ch case   89:*/		regs.R3 = regs.R31;
		/* 821D0E4Ch case   89:*/		return 0x821D0E50;
		  /* 821D0E50h */ case   90:  		/* bl 374296 */
		/* 821D0E50h case   90:*/		regs.LR = 0x821D0E54; return 0x8222C468;
		/* 821D0E50h case   90:*/		return 0x821D0E54;
		  /* 821D0E54h */ case   91:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D0E54h case   91:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D0E54h case   91:*/		return 0x821D0E58;
		  /* 821D0E58h */ case   92:  		/* bc 12, CR0_EQ, 376 */
		/* 821D0E58h case   92:*/		if ( regs.CR[0].eq ) { return 0x821D0FD0;  }
		/* 821D0E58h case   92:*/		return 0x821D0E5C;
		  /* 821D0E5Ch */ case   93:  		/* li R6, 0 */
		/* 821D0E5Ch case   93:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D0E5Ch case   93:*/		return 0x821D0E60;
		  /* 821D0E60h */ case   94:  		/* lwz R5, <#[R1 + 84]> */
		/* 821D0E60h case   94:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0E60h case   94:*/		return 0x821D0E64;
		  /* 821D0E64h */ case   95:  		/* mr R3, R31 */
		/* 821D0E64h case   95:*/		regs.R3 = regs.R31;
		/* 821D0E64h case   95:*/		return 0x821D0E68;
		  /* 821D0E68h */ case   96:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D0E68h case   96:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0E68h case   96:*/		return 0x821D0E6C;
		  /* 821D0E6Ch */ case   97:  		/* bl 380372 */
		/* 821D0E6Ch case   97:*/		regs.LR = 0x821D0E70; return 0x8222DC40;
		/* 821D0E6Ch case   97:*/		return 0x821D0E70;
		  /* 821D0E70h */ case   98:  		/* mr R6, R28 */
		/* 821D0E70h case   98:*/		regs.R6 = regs.R28;
		/* 821D0E70h case   98:*/		return 0x821D0E74;
		  /* 821D0E74h */ case   99:  		/* mr R5, R24 */
		/* 821D0E74h case   99:*/		regs.R5 = regs.R24;
		/* 821D0E74h case   99:*/		return 0x821D0E78;
		  /* 821D0E78h */ case  100:  		/* lwz R9, <#[R1 + 120]> */
		/* 821D0E78h case  100:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 821D0E78h case  100:*/		return 0x821D0E7C;
		  /* 821D0E7Ch */ case  101:  		/* mr R4, R30 */
		/* 821D0E7Ch case  101:*/		regs.R4 = regs.R30;
		/* 821D0E7Ch case  101:*/		return 0x821D0E80;
		  /* 821D0E80h */ case  102:  		/* lwz R8, <#[R1 + 116]> */
		/* 821D0E80h case  102:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 821D0E80h case  102:*/		return 0x821D0E84;
		  /* 821D0E84h */ case  103:  		/* mr R3, R31 */
		/* 821D0E84h case  103:*/		regs.R3 = regs.R31;
		/* 821D0E84h case  103:*/		return 0x821D0E88;
		  /* 821D0E88h */ case  104:  		/* lwz R7, <#[R1 + 112]> */
		/* 821D0E88h case  104:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000070) );
		/* 821D0E88h case  104:*/		return 0x821D0E8C;
		  /* 821D0E8Ch */ case  105:  		/* bl -7244 */
		/* 821D0E8Ch case  105:*/		regs.LR = 0x821D0E90; return 0x821CF240;
		/* 821D0E8Ch case  105:*/		return 0x821D0E90;
		  /* 821D0E90h */ case  106:  		/* mr R3, R31 */
		/* 821D0E90h case  106:*/		regs.R3 = regs.R31;
		/* 821D0E90h case  106:*/		return 0x821D0E94;
		  /* 821D0E94h */ case  107:  		/* lwz R4, <#[R1 + 84]> */
		/* 821D0E94h case  107:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0E94h case  107:*/		return 0x821D0E98;
		  /* 821D0E98h */ case  108:  		/* bl 343304 */
		/* 821D0E98h case  108:*/		regs.LR = 0x821D0E9C; return 0x82224BA0;
		/* 821D0E98h case  108:*/		return 0x821D0E9C;
		  /* 821D0E9Ch */ case  109:  		/* mr R29, R3 */
		/* 821D0E9Ch case  109:*/		regs.R29 = regs.R3;
		/* 821D0E9Ch case  109:*/		return 0x821D0EA0;
		  /* 821D0EA0h */ case  110:  		/* li R26, 0 */
		/* 821D0EA0h case  110:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D0EA0h case  110:*/		return 0x821D0EA4;
		  /* 821D0EA4h */ case  111:  		/* li R27, 44 */
		/* 821D0EA4h case  111:*/		cpu::op::li<0>(regs,&regs.R27,0x2C);
		/* 821D0EA4h case  111:*/		return 0x821D0EA8;
		  /* 821D0EA8h */ case  112:  		/* lwz R11, <#[R1 + 84]> */
		/* 821D0EA8h case  112:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0EA8h case  112:*/		return 0x821D0EAC;
		  /* 821D0EACh */ case  113:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D0EACh case  113:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D0EACh case  113:*/		return 0x821D0EB0;
		  /* 821D0EB0h */ case  114:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821D0EB0h case  114:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821D0EB0h case  114:*/		return 0x821D0EB4;
		  /* 821D0EB4h */ case  115:  		/* cmplw CR6, R26, R10 */
		/* 821D0EB4h case  115:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821D0EB4h case  115:*/		return 0x821D0EB8;
		  /* 821D0EB8h */ case  116:  		/* bc 4, CR6_LT, 32 */
		/* 821D0EB8h case  116:*/		if ( !regs.CR[6].lt ) { return 0x821D0ED8;  }
		/* 821D0EB8h case  116:*/		return 0x821D0EBC;
		  /* 821D0EBCh */ case  117:  		/* mr R3, R29 */
		/* 821D0EBCh case  117:*/		regs.R3 = regs.R29;
		/* 821D0EBCh case  117:*/		return 0x821D0EC0;
		  /* 821D0EC0h */ case  118:  		/* lwzx R4, <#[R27 + R11]> */
		/* 821D0EC0h case  118:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821D0EC0h case  118:*/		return 0x821D0EC4;
		  /* 821D0EC4h */ case  119:  		/* bl -363772 */
		/* 821D0EC4h case  119:*/		regs.LR = 0x821D0EC8; return 0x821781C8;
		/* 821D0EC4h case  119:*/		return 0x821D0EC8;
		  /* 821D0EC8h */ case  120:  		/* stwx R3, <#[R27 + R29]> */
		/* 821D0EC8h case  120:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 821D0EC8h case  120:*/		return 0x821D0ECC;
		  /* 821D0ECCh */ case  121:  		/* addi R26, R26, 1 */
		/* 821D0ECCh case  121:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821D0ECCh case  121:*/		return 0x821D0ED0;
		  /* 821D0ED0h */ case  122:  		/* addi R27, R27, 4 */
		/* 821D0ED0h case  122:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821D0ED0h case  122:*/		return 0x821D0ED4;
		  /* 821D0ED4h */ case  123:  		/* b -44 */
		/* 821D0ED4h case  123:*/		return 0x821D0EA8;
		/* 821D0ED4h case  123:*/		return 0x821D0ED8;
	}
	return 0x821D0ED8;
} // Block from 821D0CE8h-821D0ED8h (124 instructions)

//////////////////////////////////////////////////////
// Block at 821D0ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0ED8);
		  /* 821D0ED8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D0ED8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D0ED8h case    0:*/		return 0x821D0EDC;
		  /* 821D0EDCh */ case    1:  		/* rlwinm R10, R29, 0, 0, 30 */
		/* 821D0EDCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R29);
		/* 821D0EDCh case    1:*/		return 0x821D0EE0;
		  /* 821D0EE0h */ case    2:  		/* addi R11, R11, 36 */
		/* 821D0EE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D0EE0h case    2:*/		return 0x821D0EE4;
		  /* 821D0EE4h */ case    3:  		/* addi R10, R10, 36 */
		/* 821D0EE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D0EE4h case    3:*/		return 0x821D0EE8;
		  /* 821D0EE8h */ case    4:  		/* addi R8, R11, -36 */
		/* 821D0EE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D0EE8h case    4:*/		return 0x821D0EEC;
		  /* 821D0EECh */ case    5:  		/* addi R7, R10, -36 */
		/* 821D0EECh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821D0EECh case    5:*/		return 0x821D0EF0;
		  /* 821D0EF0h */ case    6:  		/* addi R9, R10, 4 */
		/* 821D0EF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D0EF0h case    6:*/		return 0x821D0EF4;
		  /* 821D0EF4h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821D0EF4h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0EF4h case    7:*/		return 0x821D0EF8;
		  /* 821D0EF8h */ case    8:  		/* mr R4, R29 */
		/* 821D0EF8h case    8:*/		regs.R4 = regs.R29;
		/* 821D0EF8h case    8:*/		return 0x821D0EFC;
		  /* 821D0EFCh */ case    9:  		/* mr R3, R31 */
		/* 821D0EFCh case    9:*/		regs.R3 = regs.R31;
		/* 821D0EFCh case    9:*/		return 0x821D0F00;
		  /* 821D0F00h */ case   10:  		/* stw R6, <#[R10]> */
		/* 821D0F00h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821D0F00h case   10:*/		return 0x821D0F04;
		  /* 821D0F04h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821D0F04h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0F04h case   11:*/		return 0x821D0F08;
		  /* 821D0F08h */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821D0F08h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821D0F08h case   12:*/		return 0x821D0F0C;
		  /* 821D0F0Ch */ case   13:  		/* stw R7, <#[R6]> */
		/* 821D0F0Ch case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821D0F0Ch case   13:*/		return 0x821D0F10;
		  /* 821D0F10h */ case   14:  		/* stw R8, <#[R10 + 4]> */
		/* 821D0F10h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821D0F10h case   14:*/		return 0x821D0F14;
		  /* 821D0F14h */ case   15:  		/* stw R9, <#[R11]> */
		/* 821D0F14h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D0F14h case   15:*/		return 0x821D0F18;
		  /* 821D0F18h */ case   16:  		/* lwz R5, <#[R29 + 44]> */
		/* 821D0F18h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D0F18h case   16:*/		return 0x821D0F1C;
		  /* 821D0F1Ch */ case   17:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D0F1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D0F1Ch case   17:*/		return 0x821D0F20;
		  /* 821D0F20h */ case   18:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D0F20h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D0F20h case   18:*/		return 0x821D0F24;
		  /* 821D0F24h */ case   19:  		/* lwz R7, <#[R1 + 80]> */
		/* 821D0F24h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0F24h case   19:*/		return 0x821D0F28;
		  /* 821D0F28h */ case   20:  		/* lwz R6, <#[R1 + 92]> */
		/* 821D0F28h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0F28h case   20:*/		return 0x821D0F2C;
		  /* 821D0F2Ch */ case   21:  		/* bl -7404 */
		/* 821D0F2Ch case   21:*/		regs.LR = 0x821D0F30; return 0x821CF240;
		/* 821D0F2Ch case   21:*/		return 0x821D0F30;
		  /* 821D0F30h */ case   22:  		/* mr R3, R29 */
		/* 821D0F30h case   22:*/		regs.R3 = regs.R29;
		/* 821D0F30h case   22:*/		return 0x821D0F34;
		  /* 821D0F34h */ case   23:  		/* lwz R4, <#[R1 + 92]> */
		/* 821D0F34h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0F34h case   23:*/		return 0x821D0F38;
		  /* 821D0F38h */ case   24:  		/* bl -81712 */
		/* 821D0F38h case   24:*/		regs.LR = 0x821D0F3C; return 0x821BD008;
		/* 821D0F38h case   24:*/		return 0x821D0F3C;
		  /* 821D0F3Ch */ case   25:  		/* mr R7, R29 */
		/* 821D0F3Ch case   25:*/		regs.R7 = regs.R29;
		/* 821D0F3Ch case   25:*/		return 0x821D0F40;
		  /* 821D0F40h */ case   26:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D0F40h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D0F40h case   26:*/		return 0x821D0F44;
		  /* 821D0F44h */ case   27:  		/* mr R6, R28 */
		/* 821D0F44h case   27:*/		regs.R6 = regs.R28;
		/* 821D0F44h case   27:*/		return 0x821D0F48;
		  /* 821D0F48h */ case   28:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D0F48h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0F48h case   28:*/		return 0x821D0F4C;
		  /* 821D0F4Ch */ case   29:  		/* mr R5, R23 */
		/* 821D0F4Ch case   29:*/		regs.R5 = regs.R23;
		/* 821D0F4Ch case   29:*/		return 0x821D0F50;
		  /* 821D0F50h */ case   30:  		/* mr R4, R30 */
		/* 821D0F50h case   30:*/		regs.R4 = regs.R30;
		/* 821D0F50h case   30:*/		return 0x821D0F54;
		  /* 821D0F54h */ case   31:  		/* mr R3, R31 */
		/* 821D0F54h case   31:*/		regs.R3 = regs.R31;
		/* 821D0F54h case   31:*/		return 0x821D0F58;
		  /* 821D0F58h */ case   32:  		/* bl -7448 */
		/* 821D0F58h case   32:*/		regs.LR = 0x821D0F5C; return 0x821CF240;
		/* 821D0F58h case   32:*/		return 0x821D0F5C;
		  /* 821D0F5Ch */ case   33:  		/* lwz R10, <#[R30 + 12]> */
		/* 821D0F5Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D0F5Ch case   33:*/		return 0x821D0F60;
		  /* 821D0F60h */ case   34:  		/* andi. R11, R10, 17476 */
		/* 821D0F60h case   34:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R10,0x4444);
		/* 821D0F60h case   34:*/		return 0x821D0F64;
		  /* 821D0F64h */ case   35:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821D0F64h case   35:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821D0F64h case   35:*/		return 0x821D0F68;
		  /* 821D0F68h */ case   36:  		/* cmplw CR6, R10, R11 */
		/* 821D0F68h case   36:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D0F68h case   36:*/		return 0x821D0F6C;
		  /* 821D0F6Ch */ case   37:  		/* bc 12, CR6_EQ, 8 */
		/* 821D0F6Ch case   37:*/		if ( regs.CR[6].eq ) { return 0x821D0F74;  }
		/* 821D0F6Ch case   37:*/		return 0x821D0F70;
		  /* 821D0F70h */ case   38:  		/* sth R11, <#[R30 + 14]> */
		/* 821D0F70h case   38:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821D0F70h case   38:*/		return 0x821D0F74;
	}
	return 0x821D0F74;
} // Block from 821D0ED8h-821D0F74h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821D0F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0F74);
		  /* 821D0F74h */ case    0:  		/* mr R4, R28 */
		/* 821D0F74h case    0:*/		regs.R4 = regs.R28;
		/* 821D0F74h case    0:*/		return 0x821D0F78;
	}
	return 0x821D0F78;
} // Block from 821D0F74h-821D0F78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D0F78h
// Function '?InlineCopy@Compiler@D3DXShader@@AAAXPAVBlock@2@0PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0F78);
		  /* 821D0F78h */ case    0:  		/* mr R3, R30 */
		/* 821D0F78h case    0:*/		regs.R3 = regs.R30;
		/* 821D0F78h case    0:*/		return 0x821D0F7C;
		  /* 821D0F7Ch */ case    1:  		/* bl -81780 */
		/* 821D0F7Ch case    1:*/		regs.LR = 0x821D0F80; return 0x821BD008;
		/* 821D0F7Ch case    1:*/		return 0x821D0F80;
		  /* 821D0F80h */ case    2:  		/* mr R3, R31 */
		/* 821D0F80h case    2:*/		regs.R3 = regs.R31;
		/* 821D0F80h case    2:*/		return 0x821D0F84;
		  /* 821D0F84h */ case    3:  		/* lwz R4, <#[R1 + 84]> */
		/* 821D0F84h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0F84h case    3:*/		return 0x821D0F88;
		  /* 821D0F88h */ case    4:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D0F88h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D0F88h case    4:*/		return 0x821D0F8C;
		  /* 821D0F8Ch */ case    5:  		/* bl -21956 */
		/* 821D0F8Ch case    5:*/		regs.LR = 0x821D0F90; return 0x821CB9C8;
		/* 821D0F8Ch case    5:*/		return 0x821D0F90;
		  /* 821D0F90h */ case    6:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D0F90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D0F90h case    6:*/		return 0x821D0F94;
		  /* 821D0F94h */ case    7:  		/* mr R4, R29 */
		/* 821D0F94h case    7:*/		regs.R4 = regs.R29;
		/* 821D0F94h case    7:*/		return 0x821D0F98;
		  /* 821D0F98h */ case    8:  		/* mr R3, R31 */
		/* 821D0F98h case    8:*/		regs.R3 = regs.R31;
		/* 821D0F98h case    8:*/		return 0x821D0F9C;
		  /* 821D0F9Ch */ case    9:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821D0F9Ch case    9:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821D0F9Ch case    9:*/		return 0x821D0FA0;
		  /* 821D0FA0h */ case   10:  		/* stw R11, <#[R29 + 8]> */
		/* 821D0FA0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D0FA0h case   10:*/		return 0x821D0FA4;
		  /* 821D0FA4h */ case   11:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D0FA4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D0FA4h case   11:*/		return 0x821D0FA8;
		  /* 821D0FA8h */ case   12:  		/* bl -21984 */
		/* 821D0FA8h case   12:*/		regs.LR = 0x821D0FAC; return 0x821CB9C8;
		/* 821D0FA8h case   12:*/		return 0x821D0FAC;
		  /* 821D0FACh */ case   13:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D0FACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D0FACh case   13:*/		return 0x821D0FB0;
		  /* 821D0FB0h */ case   14:  		/* lwz R27, <#[R1 + 112]> */
		/* 821D0FB0h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 821D0FB0h case   14:*/		return 0x821D0FB4;
		  /* 821D0FB4h */ case   15:  		/* mr R25, R22 */
		/* 821D0FB4h case   15:*/		regs.R25 = regs.R22;
		/* 821D0FB4h case   15:*/		return 0x821D0FB8;
		  /* 821D0FB8h */ case   16:  		/* lwz R10, <#[R1 + 120]> */
		/* 821D0FB8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 821D0FB8h case   16:*/		return 0x821D0FBC;
		  /* 821D0FBCh */ case   17:  		/* stw R29, <#[R1 + 84]> */
		/* 821D0FBCh case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0FBCh case   17:*/		return 0x821D0FC0;
		  /* 821D0FC0h */ case   18:  		/* stw R11, <#[R1 + 88]> */
		/* 821D0FC0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821D0FC0h case   18:*/		return 0x821D0FC4;
		  /* 821D0FC4h */ case   19:  		/* stw R27, <#[R1 + 80]> */
		/* 821D0FC4h case   19:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0FC4h case   19:*/		return 0x821D0FC8;
		  /* 821D0FC8h */ case   20:  		/* stw R10, <#[R1 + 100]> */
		/* 821D0FC8h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821D0FC8h case   20:*/		return 0x821D0FCC;
		  /* 821D0FCCh */ case   21:  		/* b 12 */
		/* 821D0FCCh case   21:*/		return 0x821D0FD8;
		/* 821D0FCCh case   21:*/		return 0x821D0FD0;
	}
	return 0x821D0FD0;
} // Block from 821D0F78h-821D0FD0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D0FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0FD0);
		  /* 821D0FD0h */ case    0:  		/* lwz R27, <#[R1 + 80]> */
		/* 821D0FD0h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D0FD0h case    0:*/		return 0x821D0FD4;
		  /* 821D0FD4h */ case    1:  		/* lwz R29, <#[R1 + 84]> */
		/* 821D0FD4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D0FD4h case    1:*/		return 0x821D0FD8;
	}
	return 0x821D0FD8;
} // Block from 821D0FD0h-821D0FD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D0FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D0FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D0FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D0FD8);
		  /* 821D0FD8h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D0FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D0FD8h case    0:*/		return 0x821D0FDC;
		  /* 821D0FDCh */ case    1:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D0FDCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D0FDCh case    1:*/		return 0x821D0FE0;
		  /* 821D0FE0h */ case    2:  		/* xor R11, R11, R10 */
		/* 821D0FE0h case    2:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D0FE0h case    2:*/		return 0x821D0FE4;
		  /* 821D0FE4h */ case    3:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821D0FE4h case    3:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D0FE4h case    3:*/		return 0x821D0FE8;
		  /* 821D0FE8h */ case    4:  		/* bc 12, CR0_EQ, 120 */
		/* 821D0FE8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D1060;  }
		/* 821D0FE8h case    4:*/		return 0x821D0FEC;
		  /* 821D0FECh */ case    5:  		/* mr R7, R29 */
		/* 821D0FECh case    5:*/		regs.R7 = regs.R29;
		/* 821D0FECh case    5:*/		return 0x821D0FF0;
		  /* 821D0FF0h */ case    6:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D0FF0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D0FF0h case    6:*/		return 0x821D0FF4;
		  /* 821D0FF4h */ case    7:  		/* mr R6, R28 */
		/* 821D0FF4h case    7:*/		regs.R6 = regs.R28;
		/* 821D0FF4h case    7:*/		return 0x821D0FF8;
		  /* 821D0FF8h */ case    8:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D0FF8h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D0FF8h case    8:*/		return 0x821D0FFC;
		  /* 821D0FFCh */ case    9:  		/* mr R5, R24 */
		/* 821D0FFCh case    9:*/		regs.R5 = regs.R24;
		/* 821D0FFCh case    9:*/		return 0x821D1000;
		  /* 821D1000h */ case   10:  		/* mr R4, R30 */
		/* 821D1000h case   10:*/		regs.R4 = regs.R30;
		/* 821D1000h case   10:*/		return 0x821D1004;
		  /* 821D1004h */ case   11:  		/* mr R3, R31 */
		/* 821D1004h case   11:*/		regs.R3 = regs.R31;
		/* 821D1004h case   11:*/		return 0x821D1008;
		  /* 821D1008h */ case   12:  		/* bl -7624 */
		/* 821D1008h case   12:*/		regs.LR = 0x821D100C; return 0x821CF240;
		/* 821D1008h case   12:*/		return 0x821D100C;
		  /* 821D100Ch */ case   13:  		/* mr R6, R28 */
		/* 821D100Ch case   13:*/		regs.R6 = regs.R28;
		/* 821D100Ch case   13:*/		return 0x821D1010;
		  /* 821D1010h */ case   14:  		/* mr R5, R23 */
		/* 821D1010h case   14:*/		regs.R5 = regs.R23;
		/* 821D1010h case   14:*/		return 0x821D1014;
		  /* 821D1014h */ case   15:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D1014h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1014h case   15:*/		return 0x821D1018;
		  /* 821D1018h */ case   16:  		/* mr R4, R30 */
		/* 821D1018h case   16:*/		regs.R4 = regs.R30;
		/* 821D1018h case   16:*/		return 0x821D101C;
		  /* 821D101Ch */ case   17:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D101Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D101Ch case   17:*/		return 0x821D1020;
		  /* 821D1020h */ case   18:  		/* mr R3, R31 */
		/* 821D1020h case   18:*/		regs.R3 = regs.R31;
		/* 821D1020h case   18:*/		return 0x821D1024;
		  /* 821D1024h */ case   19:  		/* lwz R7, <#[R1 + 80]> */
		/* 821D1024h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1024h case   19:*/		return 0x821D1028;
		  /* 821D1028h */ case   20:  		/* bl -7656 */
		/* 821D1028h case   20:*/		regs.LR = 0x821D102C; return 0x821CF240;
		/* 821D1028h case   20:*/		return 0x821D102C;
		  /* 821D102Ch */ case   21:  		/* lwz R11, <#[R1 + 88]> */
		/* 821D102Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821D102Ch case   21:*/		return 0x821D1030;
		  /* 821D1030h */ case   22:  		/* lwz R10, <#[R1 + 100]> */
		/* 821D1030h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1030h case   22:*/		return 0x821D1034;
		  /* 821D1034h */ case   23:  		/* mr R25, R22 */
		/* 821D1034h case   23:*/		regs.R25 = regs.R22;
		/* 821D1034h case   23:*/		return 0x821D1038;
		  /* 821D1038h */ case   24:  		/* lwz R9, <#[R1 + 92]> */
		/* 821D1038h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1038h case   24:*/		return 0x821D103C;
		  /* 821D103Ch */ case   25:  		/* lwz R8, <#[R1 + 96]> */
		/* 821D103Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 821D103Ch case   25:*/		return 0x821D1040;
		  /* 821D1040h */ case   26:  		/* stw R11, <#[R1 + 92]> */
		/* 821D1040h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1040h case   26:*/		return 0x821D1044;
		  /* 821D1044h */ case   27:  		/* stw R10, <#[R1 + 96]> */
		/* 821D1044h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821D1044h case   27:*/		return 0x821D1048;
		  /* 821D1048h */ case   28:  		/* stw R9, <#[R1 + 88]> */
		/* 821D1048h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1048h case   28:*/		return 0x821D104C;
		  /* 821D104Ch */ case   29:  		/* stw R8, <#[R1 + 100]> */
		/* 821D104Ch case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 821D104Ch case   29:*/		return 0x821D1050;
		  /* 821D1050h */ case   30:  		/* lwz R29, <#[R1 + 80]> */
		/* 821D1050h case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1050h case   30:*/		return 0x821D1054;
		  /* 821D1054h */ case   31:  		/* lwz R27, <#[R1 + 84]> */
		/* 821D1054h case   31:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1054h case   31:*/		return 0x821D1058;
		  /* 821D1058h */ case   32:  		/* stw R29, <#[R1 + 84]> */
		/* 821D1058h case   32:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1058h case   32:*/		return 0x821D105C;
		  /* 821D105Ch */ case   33:  		/* stw R27, <#[R1 + 80]> */
		/* 821D105Ch case   33:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D105Ch case   33:*/		return 0x821D1060;
	}
	return 0x821D1060;
} // Block from 821D0FD8h-821D1060h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821D1060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1060);
		  /* 821D1060h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D1060h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D1060h case    0:*/		return 0x821D1064;
		  /* 821D1064h */ case    1:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D1064h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1064h case    1:*/		return 0x821D1068;
		  /* 821D1068h */ case    2:  		/* xor R11, R11, R10 */
		/* 821D1068h case    2:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D1068h case    2:*/		return 0x821D106C;
		  /* 821D106Ch */ case    3:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821D106Ch case    3:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D106Ch case    3:*/		return 0x821D1070;
		  /* 821D1070h */ case    4:  		/* bc 4, CR0_EQ, 1356 */
		/* 821D1070h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D15BC;  }
		/* 821D1070h case    4:*/		return 0x821D1074;
		  /* 821D1074h */ case    5:  		/* lwz R11, <#[R1 + 100]> */
		/* 821D1074h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1074h case    5:*/		return 0x821D1078;
		  /* 821D1078h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821D1078h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D1078h case    6:*/		return 0x821D107C;
		  /* 821D107Ch */ case    7:  		/* bc 4, CR6_EQ, 1480 */
		/* 821D107Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1644;  }
		/* 821D107Ch case    7:*/		return 0x821D1080;
		  /* 821D1080h */ case    8:  		/* li R10, 0 */
		/* 821D1080h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1080h case    8:*/		return 0x821D1084;
		  /* 821D1084h */ case    9:  		/* lwz R3, <#[R27 + 48]> */
		/* 821D1084h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000030) );
		/* 821D1084h case    9:*/		return 0x821D1088;
		  /* 821D1088h */ case   10:  		/* mr R9, R30 */
		/* 821D1088h case   10:*/		regs.R9 = regs.R30;
		/* 821D1088h case   10:*/		return 0x821D108C;
		  /* 821D108Ch */ case   11:  		/* lwz R4, <#[R1 + 88]> */
		/* 821D108Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821D108Ch case   11:*/		return 0x821D1090;
		  /* 821D1090h */ case   12:  		/* li R8, 0 */
		/* 821D1090h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1090h case   12:*/		return 0x821D1094;
		  /* 821D1094h */ case   13:  		/* addi R7, R1, 128 */
		/* 821D1094h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 821D1094h case   13:*/		return 0x821D1098;
		  /* 821D1098h */ case   14:  		/* addi R6, R1, 124 */
		/* 821D1098h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x7C);
		/* 821D1098h case   14:*/		return 0x821D109C;
		  /* 821D109Ch */ case   15:  		/* addi R5, R1, 104 */
		/* 821D109Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 821D109Ch case   15:*/		return 0x821D10A0;
		  /* 821D10A0h */ case   16:  		/* bl 336944 */
		/* 821D10A0h case   16:*/		regs.LR = 0x821D10A4; return 0x822234D0;
		/* 821D10A0h case   16:*/		return 0x821D10A4;
		  /* 821D10A4h */ case   17:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D10A4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D10A4h case   17:*/		return 0x821D10A8;
		  /* 821D10A8h */ case   18:  		/* lwz R26, <#[R1 + 104]> */
		/* 821D10A8h case   18:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000068) );
		/* 821D10A8h case   18:*/		return 0x821D10AC;
		  /* 821D10ACh */ case   19:  		/* lwz R10, <#[R26 + 8]> */
		/* 821D10ACh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821D10ACh case   19:*/		return 0x821D10B0;
		  /* 821D10B0h */ case   20:  		/* xor R11, R10, R11 */
		/* 821D10B0h case   20:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D10B0h case   20:*/		return 0x821D10B4;
		  /* 821D10B4h */ case   21:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821D10B4h case   21:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D10B4h case   21:*/		return 0x821D10B8;
		  /* 821D10B8h */ case   22:  		/* bc 12, CR0_EQ, 620 */
		/* 821D10B8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D1324;  }
		/* 821D10B8h case   22:*/		return 0x821D10BC;
		  /* 821D10BCh */ case   23:  		/* lwz R27, <#[R1 + 84]> */
		/* 821D10BCh case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 821D10BCh case   23:*/		return 0x821D10C0;
		  /* 821D10C0h */ case   24:  		/* mr R7, R26 */
		/* 821D10C0h case   24:*/		regs.R7 = regs.R26;
		/* 821D10C0h case   24:*/		return 0x821D10C4;
		  /* 821D10C4h */ case   25:  		/* li R6, 1 */
		/* 821D10C4h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D10C4h case   25:*/		return 0x821D10C8;
		  /* 821D10C8h */ case   26:  		/* lwz R9, <#[R1 + 128]> */
		/* 821D10C8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 821D10C8h case   26:*/		return 0x821D10CC;
		  /* 821D10CCh */ case   27:  		/* mr R10, R27 */
		/* 821D10CCh case   27:*/		regs.R10 = regs.R27;
		/* 821D10CCh case   27:*/		return 0x821D10D0;
		  /* 821D10D0h */ case   28:  		/* lwz R8, <#[R1 + 124]> */
		/* 821D10D0h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D10D0h case   28:*/		return 0x821D10D4;
		  /* 821D10D4h */ case   29:  		/* mr R5, R28 */
		/* 821D10D4h case   29:*/		regs.R5 = regs.R28;
		/* 821D10D4h case   29:*/		return 0x821D10D8;
		  /* 821D10D8h */ case   30:  		/* mr R4, R30 */
		/* 821D10D8h case   30:*/		regs.R4 = regs.R30;
		/* 821D10D8h case   30:*/		return 0x821D10DC;
		  /* 821D10DCh */ case   31:  		/* mr R3, R31 */
		/* 821D10DCh case   31:*/		regs.R3 = regs.R31;
		/* 821D10DCh case   31:*/		return 0x821D10E0;
		  /* 821D10E0h */ case   32:  		/* bl -68568 */
		/* 821D10E0h case   32:*/		regs.LR = 0x821D10E4; return 0x821C0508;
		/* 821D10E0h case   32:*/		return 0x821D10E4;
		  /* 821D10E4h */ case   33:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D10E4h case   33:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D10E4h case   33:*/		return 0x821D10E8;
		  /* 821D10E8h */ case   34:  		/* bc 12, CR0_EQ, 572 */
		/* 821D10E8h case   34:*/		if ( regs.CR[0].eq ) { return 0x821D1324;  }
		/* 821D10E8h case   34:*/		return 0x821D10EC;
		  /* 821D10ECh */ case   35:  		/* lwz R29, <#[R1 + 80]> */
		/* 821D10ECh case   35:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D10ECh case   35:*/		return 0x821D10F0;
		  /* 821D10F0h */ case   36:  		/* mr R10, R30 */
		/* 821D10F0h case   36:*/		regs.R10 = regs.R30;
		/* 821D10F0h case   36:*/		return 0x821D10F4;
		  /* 821D10F4h */ case   37:  		/* mr R7, R27 */
		/* 821D10F4h case   37:*/		regs.R7 = regs.R27;
		/* 821D10F4h case   37:*/		return 0x821D10F8;
		  /* 821D10F8h */ case   38:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D10F8h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D10F8h case   38:*/		return 0x821D10FC;
		  /* 821D10FCh */ case   39:  		/* li R6, 1 */
		/* 821D10FCh case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D10FCh case   39:*/		return 0x821D1100;
		  /* 821D1100h */ case   40:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D1100h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1100h case   40:*/		return 0x821D1104;
		  /* 821D1104h */ case   41:  		/* mr R4, R29 */
		/* 821D1104h case   41:*/		regs.R4 = regs.R29;
		/* 821D1104h case   41:*/		return 0x821D1108;
		  /* 821D1108h */ case   42:  		/* lwz R5, <#[R1 + 88]> */
		/* 821D1108h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1108h case   42:*/		return 0x821D110C;
		  /* 821D110Ch */ case   43:  		/* mr R3, R31 */
		/* 821D110Ch case   43:*/		regs.R3 = regs.R31;
		/* 821D110Ch case   43:*/		return 0x821D1110;
		  /* 821D1110h */ case   44:  		/* bl -68616 */
		/* 821D1110h case   44:*/		regs.LR = 0x821D1114; return 0x821C0508;
		/* 821D1110h case   44:*/		return 0x821D1114;
		  /* 821D1114h */ case   45:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1114h case   45:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1114h case   45:*/		return 0x821D1118;
		  /* 821D1118h */ case   46:  		/* bc 12, CR0_EQ, 528 */
		/* 821D1118h case   46:*/		if ( regs.CR[0].eq ) { return 0x821D1328;  }
		/* 821D1118h case   46:*/		return 0x821D111C;
		  /* 821D111Ch */ case   47:  		/* mr R4, R26 */
		/* 821D111Ch case   47:*/		regs.R4 = regs.R26;
		/* 821D111Ch case   47:*/		return 0x821D1120;
		  /* 821D1120h */ case   48:  		/* mr R3, R27 */
		/* 821D1120h case   48:*/		regs.R3 = regs.R27;
		/* 821D1120h case   48:*/		return 0x821D1124;
		  /* 821D1124h */ case   49:  		/* bl -80708 */
		/* 821D1124h case   49:*/		regs.LR = 0x821D1128; return 0x821BD5E0;
		/* 821D1124h case   49:*/		return 0x821D1128;
		  /* 821D1128h */ case   50:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1128h case   50:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1128h case   50:*/		return 0x821D112C;
		  /* 821D112Ch */ case   51:  		/* bc 12, CR0_EQ, 508 */
		/* 821D112Ch case   51:*/		if ( regs.CR[0].eq ) { return 0x821D1328;  }
		/* 821D112Ch case   51:*/		return 0x821D1130;
		  /* 821D1130h */ case   52:  		/* mr R3, R27 */
		/* 821D1130h case   52:*/		regs.R3 = regs.R27;
		/* 821D1130h case   52:*/		return 0x821D1134;
		  /* 821D1134h */ case   53:  		/* bl -391564 */
		/* 821D1134h case   53:*/		regs.LR = 0x821D1138; return 0x821717A8;
		/* 821D1134h case   53:*/		return 0x821D1138;
		  /* 821D1138h */ case   54:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1138h case   54:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1138h case   54:*/		return 0x821D113C;
		  /* 821D113Ch */ case   55:  		/* bc 4, CR0_EQ, 56 */
		/* 821D113Ch case   55:*/		if ( !regs.CR[0].eq ) { return 0x821D1174;  }
		/* 821D113Ch case   55:*/		return 0x821D1140;
		  /* 821D1140h */ case   56:  		/* lwz R11, <#[R27 + 28]> */
		/* 821D1140h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821D1140h case   56:*/		return 0x821D1144;
		  /* 821D1144h */ case   57:  		/* lwz R10, <#[R29 + 28]> */
		/* 821D1144h case   57:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D1144h case   57:*/		return 0x821D1148;
		  /* 821D1148h */ case   58:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D1148h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D1148h case   58:*/		return 0x821D114C;
		  /* 821D114Ch */ case   59:  		/* lwz R10, <#[R10 + 40]> */
		/* 821D114Ch case   59:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821D114Ch case   59:*/		return 0x821D1150;
		  /* 821D1150h */ case   60:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821D1150h case   60:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821D1150h case   60:*/		return 0x821D1154;
		  /* 821D1154h */ case   61:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821D1154h case   61:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821D1154h case   61:*/		return 0x821D1158;
		  /* 821D1158h */ case   62:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821D1158h case   62:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821D1158h case   62:*/		return 0x821D115C;
		  /* 821D115Ch */ case   63:  		/* addi R11, R11, 1 */
		/* 821D115Ch case   63:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D115Ch case   63:*/		return 0x821D1160;
		  /* 821D1160h */ case   64:  		/* slw R9, R22, R9 */
		/* 821D1160h case   64:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821D1160h case   64:*/		return 0x821D1164;
		  /* 821D1164h */ case   65:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D1164h case   65:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D1164h case   65:*/		return 0x821D1168;
		  /* 821D1168h */ case   66:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821D1168h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821D1168h case   66:*/		return 0x821D116C;
		  /* 821D116Ch */ case   67:  		/* and. R11, R11, R9 */
		/* 821D116Ch case   67:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D116Ch case   67:*/		return 0x821D1170;
		  /* 821D1170h */ case   68:  		/* bc 4, CR0_EQ, 44 */
		/* 821D1170h case   68:*/		if ( !regs.CR[0].eq ) { return 0x821D119C;  }
		/* 821D1170h case   68:*/		return 0x821D1174;
	}
	return 0x821D1174;
} // Block from 821D1060h-821D1174h (69 instructions)

//////////////////////////////////////////////////////
// Block at 821D1174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1174);
		  /* 821D1174h */ case    0:  		/* li R6, 0 */
		/* 821D1174h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D1174h case    0:*/		return 0x821D1178;
		  /* 821D1178h */ case    1:  		/* mr R5, R29 */
		/* 821D1178h case    1:*/		regs.R5 = regs.R29;
		/* 821D1178h case    1:*/		return 0x821D117C;
		  /* 821D117Ch */ case    2:  		/* mr R4, R27 */
		/* 821D117Ch case    2:*/		regs.R4 = regs.R27;
		/* 821D117Ch case    2:*/		return 0x821D1180;
		  /* 821D1180h */ case    3:  		/* mr R3, R31 */
		/* 821D1180h case    3:*/		regs.R3 = regs.R31;
		/* 821D1180h case    3:*/		return 0x821D1184;
		  /* 821D1184h */ case    4:  		/* bl 373476 */
		/* 821D1184h case    4:*/		regs.LR = 0x821D1188; return 0x8222C468;
		/* 821D1184h case    4:*/		return 0x821D1188;
		  /* 821D1188h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1188h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1188h case    5:*/		return 0x821D118C;
		  /* 821D118Ch */ case    6:  		/* bc 12, CR0_EQ, 408 */
		/* 821D118Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821D1324;  }
		/* 821D118Ch case    6:*/		return 0x821D1190;
		  /* 821D1190h */ case    7:  		/* lwz R29, <#[R1 + 80]> */
		/* 821D1190h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1190h case    7:*/		return 0x821D1194;
		  /* 821D1194h */ case    8:  		/* lwz R27, <#[R1 + 84]> */
		/* 821D1194h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1194h case    8:*/		return 0x821D1198;
		  /* 821D1198h */ case    9:  		/* lwz R26, <#[R1 + 104]> */
		/* 821D1198h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000068) );
		/* 821D1198h case    9:*/		return 0x821D119C;
	}
	return 0x821D119C;
} // Block from 821D1174h-821D119Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D119Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D119C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D119C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D119C);
		  /* 821D119Ch */ case    0:  		/* mr R3, R27 */
		/* 821D119Ch case    0:*/		regs.R3 = regs.R27;
		/* 821D119Ch case    0:*/		return 0x821D11A0;
		  /* 821D11A0h */ case    1:  		/* bl -391672 */
		/* 821D11A0h case    1:*/		regs.LR = 0x821D11A4; return 0x821717A8;
		/* 821D11A0h case    1:*/		return 0x821D11A4;
		  /* 821D11A4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D11A4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D11A4h case    2:*/		return 0x821D11A8;
		  /* 821D11A8h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 821D11A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D11C4;  }
		/* 821D11A8h case    3:*/		return 0x821D11AC;
		  /* 821D11ACh */ case    4:  		/* li R6, 0 */
		/* 821D11ACh case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D11ACh case    4:*/		return 0x821D11B0;
		  /* 821D11B0h */ case    5:  		/* mr R5, R29 */
		/* 821D11B0h case    5:*/		regs.R5 = regs.R29;
		/* 821D11B0h case    5:*/		return 0x821D11B4;
		  /* 821D11B4h */ case    6:  		/* mr R4, R27 */
		/* 821D11B4h case    6:*/		regs.R4 = regs.R27;
		/* 821D11B4h case    6:*/		return 0x821D11B8;
		  /* 821D11B8h */ case    7:  		/* mr R3, R31 */
		/* 821D11B8h case    7:*/		regs.R3 = regs.R31;
		/* 821D11B8h case    7:*/		return 0x821D11BC;
		  /* 821D11BCh */ case    8:  		/* bl 379524 */
		/* 821D11BCh case    8:*/		regs.LR = 0x821D11C0; return 0x8222DC40;
		/* 821D11BCh case    8:*/		return 0x821D11C0;
		  /* 821D11C0h */ case    9:  		/* lwz R26, <#[R1 + 104]> */
		/* 821D11C0h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000068) );
		/* 821D11C0h case    9:*/		return 0x821D11C4;
	}
	return 0x821D11C4;
} // Block from 821D119Ch-821D11C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D11C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D11C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D11C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D11C4);
		  /* 821D11C4h */ case    0:  		/* mr R7, R26 */
		/* 821D11C4h case    0:*/		regs.R7 = regs.R26;
		/* 821D11C4h case    0:*/		return 0x821D11C8;
		  /* 821D11C8h */ case    1:  		/* lwz R9, <#[R1 + 128]> */
		/* 821D11C8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 821D11C8h case    1:*/		return 0x821D11CC;
		  /* 821D11CCh */ case    2:  		/* mr R6, R28 */
		/* 821D11CCh case    2:*/		regs.R6 = regs.R28;
		/* 821D11CCh case    2:*/		return 0x821D11D0;
		  /* 821D11D0h */ case    3:  		/* lwz R8, <#[R1 + 124]> */
		/* 821D11D0h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D11D0h case    3:*/		return 0x821D11D4;
		  /* 821D11D4h */ case    4:  		/* mr R5, R23 */
		/* 821D11D4h case    4:*/		regs.R5 = regs.R23;
		/* 821D11D4h case    4:*/		return 0x821D11D8;
		  /* 821D11D8h */ case    5:  		/* mr R4, R30 */
		/* 821D11D8h case    5:*/		regs.R4 = regs.R30;
		/* 821D11D8h case    5:*/		return 0x821D11DC;
		  /* 821D11DCh */ case    6:  		/* mr R3, R31 */
		/* 821D11DCh case    6:*/		regs.R3 = regs.R31;
		/* 821D11DCh case    6:*/		return 0x821D11E0;
		  /* 821D11E0h */ case    7:  		/* bl -8096 */
		/* 821D11E0h case    7:*/		regs.LR = 0x821D11E4; return 0x821CF240;
		/* 821D11E0h case    7:*/		return 0x821D11E4;
		  /* 821D11E4h */ case    8:  		/* mr R3, R31 */
		/* 821D11E4h case    8:*/		regs.R3 = regs.R31;
		/* 821D11E4h case    8:*/		return 0x821D11E8;
		  /* 821D11E8h */ case    9:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D11E8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D11E8h case    9:*/		return 0x821D11EC;
		  /* 821D11ECh */ case   10:  		/* bl 342452 */
		/* 821D11ECh case   10:*/		regs.LR = 0x821D11F0; return 0x82224BA0;
		/* 821D11ECh case   10:*/		return 0x821D11F0;
		  /* 821D11F0h */ case   11:  		/* mr R29, R3 */
		/* 821D11F0h case   11:*/		regs.R29 = regs.R3;
		/* 821D11F0h case   11:*/		return 0x821D11F4;
		  /* 821D11F4h */ case   12:  		/* li R26, 0 */
		/* 821D11F4h case   12:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D11F4h case   12:*/		return 0x821D11F8;
		  /* 821D11F8h */ case   13:  		/* li R27, 44 */
		/* 821D11F8h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x2C);
		/* 821D11F8h case   13:*/		return 0x821D11FC;
		  /* 821D11FCh */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D11FCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D11FCh case   14:*/		return 0x821D1200;
		  /* 821D1200h */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D1200h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D1200h case   15:*/		return 0x821D1204;
		  /* 821D1204h */ case   16:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821D1204h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821D1204h case   16:*/		return 0x821D1208;
		  /* 821D1208h */ case   17:  		/* cmplw CR6, R26, R10 */
		/* 821D1208h case   17:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821D1208h case   17:*/		return 0x821D120C;
		  /* 821D120Ch */ case   18:  		/* bc 4, CR6_LT, 32 */
		/* 821D120Ch case   18:*/		if ( !regs.CR[6].lt ) { return 0x821D122C;  }
		/* 821D120Ch case   18:*/		return 0x821D1210;
		  /* 821D1210h */ case   19:  		/* mr R3, R29 */
		/* 821D1210h case   19:*/		regs.R3 = regs.R29;
		/* 821D1210h case   19:*/		return 0x821D1214;
		  /* 821D1214h */ case   20:  		/* lwzx R4, <#[R27 + R11]> */
		/* 821D1214h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821D1214h case   20:*/		return 0x821D1218;
		  /* 821D1218h */ case   21:  		/* bl -364624 */
		/* 821D1218h case   21:*/		regs.LR = 0x821D121C; return 0x821781C8;
		/* 821D1218h case   21:*/		return 0x821D121C;
		  /* 821D121Ch */ case   22:  		/* stwx R3, <#[R27 + R29]> */
		/* 821D121Ch case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 821D121Ch case   22:*/		return 0x821D1220;
		  /* 821D1220h */ case   23:  		/* addi R26, R26, 1 */
		/* 821D1220h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821D1220h case   23:*/		return 0x821D1224;
		  /* 821D1224h */ case   24:  		/* addi R27, R27, 4 */
		/* 821D1224h case   24:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821D1224h case   24:*/		return 0x821D1228;
		  /* 821D1228h */ case   25:  		/* b -44 */
		/* 821D1228h case   25:*/		return 0x821D11FC;
		/* 821D1228h case   25:*/		return 0x821D122C;
	}
	return 0x821D122C;
} // Block from 821D11C4h-821D122Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D122Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D122C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D122C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D122C);
		  /* 821D122Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D122Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D122Ch case    0:*/		return 0x821D1230;
		  /* 821D1230h */ case    1:  		/* rlwinm R10, R29, 0, 0, 30 */
		/* 821D1230h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R29);
		/* 821D1230h case    1:*/		return 0x821D1234;
		  /* 821D1234h */ case    2:  		/* addi R11, R11, 36 */
		/* 821D1234h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D1234h case    2:*/		return 0x821D1238;
		  /* 821D1238h */ case    3:  		/* addi R10, R10, 36 */
		/* 821D1238h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D1238h case    3:*/		return 0x821D123C;
		  /* 821D123Ch */ case    4:  		/* addi R8, R11, -36 */
		/* 821D123Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D123Ch case    4:*/		return 0x821D1240;
		  /* 821D1240h */ case    5:  		/* addi R7, R10, -36 */
		/* 821D1240h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821D1240h case    5:*/		return 0x821D1244;
		  /* 821D1244h */ case    6:  		/* addi R9, R10, 4 */
		/* 821D1244h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D1244h case    6:*/		return 0x821D1248;
		  /* 821D1248h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821D1248h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1248h case    7:*/		return 0x821D124C;
		  /* 821D124Ch */ case    8:  		/* mr R4, R29 */
		/* 821D124Ch case    8:*/		regs.R4 = regs.R29;
		/* 821D124Ch case    8:*/		return 0x821D1250;
		  /* 821D1250h */ case    9:  		/* mr R3, R31 */
		/* 821D1250h case    9:*/		regs.R3 = regs.R31;
		/* 821D1250h case    9:*/		return 0x821D1254;
		  /* 821D1254h */ case   10:  		/* stw R6, <#[R10]> */
		/* 821D1254h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821D1254h case   10:*/		return 0x821D1258;
		  /* 821D1258h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821D1258h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1258h case   11:*/		return 0x821D125C;
		  /* 821D125Ch */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821D125Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821D125Ch case   12:*/		return 0x821D1260;
		  /* 821D1260h */ case   13:  		/* stw R7, <#[R6]> */
		/* 821D1260h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821D1260h case   13:*/		return 0x821D1264;
		  /* 821D1264h */ case   14:  		/* stw R8, <#[R10 + 4]> */
		/* 821D1264h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821D1264h case   14:*/		return 0x821D1268;
		  /* 821D1268h */ case   15:  		/* stw R9, <#[R11]> */
		/* 821D1268h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1268h case   15:*/		return 0x821D126C;
		  /* 821D126Ch */ case   16:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D126Ch case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D126Ch case   16:*/		return 0x821D1270;
		  /* 821D1270h */ case   17:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D1270h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D1270h case   17:*/		return 0x821D1274;
		  /* 821D1274h */ case   18:  		/* lwz R5, <#[R29 + 48]> */
		/* 821D1274h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000030) );
		/* 821D1274h case   18:*/		return 0x821D1278;
		  /* 821D1278h */ case   19:  		/* lwz R7, <#[R1 + 84]> */
		/* 821D1278h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1278h case   19:*/		return 0x821D127C;
		  /* 821D127Ch */ case   20:  		/* lwz R6, <#[R1 + 88]> */
		/* 821D127Ch case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821D127Ch case   20:*/		return 0x821D1280;
		  /* 821D1280h */ case   21:  		/* bl -8256 */
		/* 821D1280h case   21:*/		regs.LR = 0x821D1284; return 0x821CF240;
		/* 821D1280h case   21:*/		return 0x821D1284;
		  /* 821D1284h */ case   22:  		/* mr R3, R29 */
		/* 821D1284h case   22:*/		regs.R3 = regs.R29;
		/* 821D1284h case   22:*/		return 0x821D1288;
		  /* 821D1288h */ case   23:  		/* lwz R4, <#[R1 + 88]> */
		/* 821D1288h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1288h case   23:*/		return 0x821D128C;
		  /* 821D128Ch */ case   24:  		/* bl -82564 */
		/* 821D128Ch case   24:*/		regs.LR = 0x821D1290; return 0x821BD008;
		/* 821D128Ch case   24:*/		return 0x821D1290;
		  /* 821D1290h */ case   25:  		/* mr R7, R29 */
		/* 821D1290h case   25:*/		regs.R7 = regs.R29;
		/* 821D1290h case   25:*/		return 0x821D1294;
		  /* 821D1294h */ case   26:  		/* mr R6, R28 */
		/* 821D1294h case   26:*/		regs.R6 = regs.R28;
		/* 821D1294h case   26:*/		return 0x821D1298;
		  /* 821D1298h */ case   27:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D1298h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1298h case   27:*/		return 0x821D129C;
		  /* 821D129Ch */ case   28:  		/* mr R5, R24 */
		/* 821D129Ch case   28:*/		regs.R5 = regs.R24;
		/* 821D129Ch case   28:*/		return 0x821D12A0;
		  /* 821D12A0h */ case   29:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D12A0h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D12A0h case   29:*/		return 0x821D12A4;
		  /* 821D12A4h */ case   30:  		/* mr R4, R30 */
		/* 821D12A4h case   30:*/		regs.R4 = regs.R30;
		/* 821D12A4h case   30:*/		return 0x821D12A8;
		  /* 821D12A8h */ case   31:  		/* mr R3, R31 */
		/* 821D12A8h case   31:*/		regs.R3 = regs.R31;
		/* 821D12A8h case   31:*/		return 0x821D12AC;
		  /* 821D12ACh */ case   32:  		/* bl -8300 */
		/* 821D12ACh case   32:*/		regs.LR = 0x821D12B0; return 0x821CF240;
		/* 821D12ACh case   32:*/		return 0x821D12B0;
		  /* 821D12B0h */ case   33:  		/* lwz R10, <#[R30 + 12]> */
		/* 821D12B0h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D12B0h case   33:*/		return 0x821D12B4;
		  /* 821D12B4h */ case   34:  		/* andi. R11, R10, 17476 */
		/* 821D12B4h case   34:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R10,0x4444);
		/* 821D12B4h case   34:*/		return 0x821D12B8;
		  /* 821D12B8h */ case   35:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821D12B8h case   35:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821D12B8h case   35:*/		return 0x821D12BC;
		  /* 821D12BCh */ case   36:  		/* cmplw CR6, R10, R11 */
		/* 821D12BCh case   36:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D12BCh case   36:*/		return 0x821D12C0;
		  /* 821D12C0h */ case   37:  		/* bc 12, CR6_EQ, 8 */
		/* 821D12C0h case   37:*/		if ( regs.CR[6].eq ) { return 0x821D12C8;  }
		/* 821D12C0h case   37:*/		return 0x821D12C4;
		  /* 821D12C4h */ case   38:  		/* sth R11, <#[R30 + 14]> */
		/* 821D12C4h case   38:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821D12C4h case   38:*/		return 0x821D12C8;
	}
	return 0x821D12C8;
} // Block from 821D122Ch-821D12C8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821D12C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D12C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D12C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D12C8);
		  /* 821D12C8h */ case    0:  		/* mr R4, R28 */
		/* 821D12C8h case    0:*/		regs.R4 = regs.R28;
		/* 821D12C8h case    0:*/		return 0x821D12CC;
		  /* 821D12CCh */ case    1:  		/* mr R3, R30 */
		/* 821D12CCh case    1:*/		regs.R3 = regs.R30;
		/* 821D12CCh case    1:*/		return 0x821D12D0;
		  /* 821D12D0h */ case    2:  		/* bl -82632 */
		/* 821D12D0h case    2:*/		regs.LR = 0x821D12D4; return 0x821BD008;
		/* 821D12D0h case    2:*/		return 0x821D12D4;
		  /* 821D12D4h */ case    3:  		/* mr R3, R31 */
		/* 821D12D4h case    3:*/		regs.R3 = regs.R31;
		/* 821D12D4h case    3:*/		return 0x821D12D8;
		  /* 821D12D8h */ case    4:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D12D8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D12D8h case    4:*/		return 0x821D12DC;
		  /* 821D12DCh */ case    5:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D12DCh case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D12DCh case    5:*/		return 0x821D12E0;
		  /* 821D12E0h */ case    6:  		/* bl -22808 */
		/* 821D12E0h case    6:*/		regs.LR = 0x821D12E4; return 0x821CB9C8;
		/* 821D12E0h case    6:*/		return 0x821D12E4;
		  /* 821D12E4h */ case    7:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D12E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D12E4h case    7:*/		return 0x821D12E8;
		  /* 821D12E8h */ case    8:  		/* mr R4, R29 */
		/* 821D12E8h case    8:*/		regs.R4 = regs.R29;
		/* 821D12E8h case    8:*/		return 0x821D12EC;
		  /* 821D12ECh */ case    9:  		/* mr R3, R31 */
		/* 821D12ECh case    9:*/		regs.R3 = regs.R31;
		/* 821D12ECh case    9:*/		return 0x821D12F0;
		  /* 821D12F0h */ case   10:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821D12F0h case   10:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821D12F0h case   10:*/		return 0x821D12F4;
		  /* 821D12F4h */ case   11:  		/* stw R11, <#[R29 + 8]> */
		/* 821D12F4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D12F4h case   11:*/		return 0x821D12F8;
		  /* 821D12F8h */ case   12:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D12F8h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D12F8h case   12:*/		return 0x821D12FC;
		  /* 821D12FCh */ case   13:  		/* bl -22836 */
		/* 821D12FCh case   13:*/		regs.LR = 0x821D1300; return 0x821CB9C8;
		/* 821D12FCh case   13:*/		return 0x821D1300;
		  /* 821D1300h */ case   14:  		/* lwz R11, <#[R1 + 104]> */
		/* 821D1300h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 821D1300h case   14:*/		return 0x821D1304;
		  /* 821D1304h */ case   15:  		/* mr R25, R22 */
		/* 821D1304h case   15:*/		regs.R25 = regs.R22;
		/* 821D1304h case   15:*/		return 0x821D1308;
		  /* 821D1308h */ case   16:  		/* lwz R10, <#[R1 + 124]> */
		/* 821D1308h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D1308h case   16:*/		return 0x821D130C;
		  /* 821D130Ch */ case   17:  		/* lwz R9, <#[R1 + 128]> */
		/* 821D130Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 821D130Ch case   17:*/		return 0x821D1310;
		  /* 821D1310h */ case   18:  		/* stw R29, <#[R1 + 80]> */
		/* 821D1310h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1310h case   18:*/		return 0x821D1314;
		  /* 821D1314h */ case   19:  		/* stw R11, <#[R1 + 84]> */
		/* 821D1314h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1314h case   19:*/		return 0x821D1318;
		  /* 821D1318h */ case   20:  		/* stw R10, <#[R1 + 92]> */
		/* 821D1318h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1318h case   20:*/		return 0x821D131C;
		  /* 821D131Ch */ case   21:  		/* stw R9, <#[R1 + 96]> */
		/* 821D131Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D131Ch case   21:*/		return 0x821D1320;
		  /* 821D1320h */ case   22:  		/* b 8 */
		/* 821D1320h case   22:*/		return 0x821D1328;
		/* 821D1320h case   22:*/		return 0x821D1324;
	}
	return 0x821D1324;
} // Block from 821D12C8h-821D1324h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D1324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1324);
		  /* 821D1324h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 821D1324h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1324h case    0:*/		return 0x821D1328;
	}
	return 0x821D1328;
} // Block from 821D1324h-821D1328h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1328);
		  /* 821D1328h */ case    0:  		/* li R10, 0 */
		/* 821D1328h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1328h case    0:*/		return 0x821D132C;
		  /* 821D132Ch */ case    1:  		/* lwz R3, <#[R29 + 44]> */
		/* 821D132Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D132Ch case    1:*/		return 0x821D1330;
	}
	return 0x821D1330;
} // Block from 821D1328h-821D1330h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D1330h
// Function '?FindSumOfProducts@Compiler@D3DXShader@@AAAPAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVInstruction@2@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1330);
		  /* 821D1330h */ case    0:  		/* mr R9, R30 */
		/* 821D1330h case    0:*/		regs.R9 = regs.R30;
		/* 821D1330h case    0:*/		return 0x821D1334;
		  /* 821D1334h */ case    1:  		/* lwz R4, <#[R1 + 88]> */
		/* 821D1334h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1334h case    1:*/		return 0x821D1338;
		  /* 821D1338h */ case    2:  		/* li R8, 0 */
		/* 821D1338h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1338h case    2:*/		return 0x821D133C;
		  /* 821D133Ch */ case    3:  		/* addi R7, R1, 136 */
		/* 821D133Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x88);
		/* 821D133Ch case    3:*/		return 0x821D1340;
		  /* 821D1340h */ case    4:  		/* addi R6, R1, 132 */
		/* 821D1340h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 821D1340h case    4:*/		return 0x821D1344;
		  /* 821D1344h */ case    5:  		/* addi R5, R1, 108 */
		/* 821D1344h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x6C);
		/* 821D1344h case    5:*/		return 0x821D1348;
		  /* 821D1348h */ case    6:  		/* bl 336264 */
		/* 821D1348h case    6:*/		regs.LR = 0x821D134C; return 0x822234D0;
		/* 821D1348h case    6:*/		return 0x821D134C;
		  /* 821D134Ch */ case    7:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D134Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D134Ch case    7:*/		return 0x821D1350;
		  /* 821D1350h */ case    8:  		/* lwz R26, <#[R1 + 108]> */
		/* 821D1350h case    8:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 821D1350h case    8:*/		return 0x821D1354;
		  /* 821D1354h */ case    9:  		/* lwz R10, <#[R26 + 8]> */
		/* 821D1354h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821D1354h case    9:*/		return 0x821D1358;
		  /* 821D1358h */ case   10:  		/* xor R11, R10, R11 */
		/* 821D1358h case   10:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D1358h case   10:*/		return 0x821D135C;
		  /* 821D135Ch */ case   11:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821D135Ch case   11:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D135Ch case   11:*/		return 0x821D1360;
		  /* 821D1360h */ case   12:  		/* bc 12, CR0_EQ, 740 */
		/* 821D1360h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D1360h case   12:*/		return 0x821D1364;
		  /* 821D1364h */ case   13:  		/* lwz R27, <#[R1 + 80]> */
		/* 821D1364h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1364h case   13:*/		return 0x821D1368;
		  /* 821D1368h */ case   14:  		/* mr R7, R26 */
		/* 821D1368h case   14:*/		regs.R7 = regs.R26;
		/* 821D1368h case   14:*/		return 0x821D136C;
		  /* 821D136Ch */ case   15:  		/* li R6, 1 */
		/* 821D136Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D136Ch case   15:*/		return 0x821D1370;
		  /* 821D1370h */ case   16:  		/* lwz R9, <#[R1 + 136]> */
		/* 821D1370h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 821D1370h case   16:*/		return 0x821D1374;
		  /* 821D1374h */ case   17:  		/* mr R10, R27 */
		/* 821D1374h case   17:*/		regs.R10 = regs.R27;
		/* 821D1374h case   17:*/		return 0x821D1378;
		  /* 821D1378h */ case   18:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D1378h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D1378h case   18:*/		return 0x821D137C;
		  /* 821D137Ch */ case   19:  		/* mr R5, R28 */
		/* 821D137Ch case   19:*/		regs.R5 = regs.R28;
		/* 821D137Ch case   19:*/		return 0x821D1380;
		  /* 821D1380h */ case   20:  		/* mr R4, R30 */
		/* 821D1380h case   20:*/		regs.R4 = regs.R30;
		/* 821D1380h case   20:*/		return 0x821D1384;
		  /* 821D1384h */ case   21:  		/* mr R3, R31 */
		/* 821D1384h case   21:*/		regs.R3 = regs.R31;
		/* 821D1384h case   21:*/		return 0x821D1388;
		  /* 821D1388h */ case   22:  		/* bl -69248 */
		/* 821D1388h case   22:*/		regs.LR = 0x821D138C; return 0x821C0508;
		/* 821D1388h case   22:*/		return 0x821D138C;
		  /* 821D138Ch */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D138Ch case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D138Ch case   23:*/		return 0x821D1390;
		  /* 821D1390h */ case   24:  		/* bc 12, CR0_EQ, 692 */
		/* 821D1390h case   24:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D1390h case   24:*/		return 0x821D1394;
		  /* 821D1394h */ case   25:  		/* lwz R29, <#[R1 + 84]> */
		/* 821D1394h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1394h case   25:*/		return 0x821D1398;
		  /* 821D1398h */ case   26:  		/* mr R10, R30 */
		/* 821D1398h case   26:*/		regs.R10 = regs.R30;
		/* 821D1398h case   26:*/		return 0x821D139C;
		  /* 821D139Ch */ case   27:  		/* li R6, 0 */
		/* 821D139Ch case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D139Ch case   27:*/		return 0x821D13A0;
		  /* 821D13A0h */ case   28:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D13A0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D13A0h case   28:*/		return 0x821D13A4;
		  /* 821D13A4h */ case   29:  		/* mr R7, R29 */
		/* 821D13A4h case   29:*/		regs.R7 = regs.R29;
		/* 821D13A4h case   29:*/		return 0x821D13A8;
		  /* 821D13A8h */ case   30:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D13A8h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D13A8h case   30:*/		return 0x821D13AC;
		  /* 821D13ACh */ case   31:  		/* mr R4, R27 */
		/* 821D13ACh case   31:*/		regs.R4 = regs.R27;
		/* 821D13ACh case   31:*/		return 0x821D13B0;
		  /* 821D13B0h */ case   32:  		/* lwz R5, <#[R1 + 88]> */
		/* 821D13B0h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 821D13B0h case   32:*/		return 0x821D13B4;
		  /* 821D13B4h */ case   33:  		/* mr R3, R31 */
		/* 821D13B4h case   33:*/		regs.R3 = regs.R31;
		/* 821D13B4h case   33:*/		return 0x821D13B8;
		  /* 821D13B8h */ case   34:  		/* bl -69296 */
		/* 821D13B8h case   34:*/		regs.LR = 0x821D13BC; return 0x821C0508;
		/* 821D13B8h case   34:*/		return 0x821D13BC;
		  /* 821D13BCh */ case   35:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D13BCh case   35:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D13BCh case   35:*/		return 0x821D13C0;
		  /* 821D13C0h */ case   36:  		/* bc 12, CR0_EQ, 644 */
		/* 821D13C0h case   36:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D13C0h case   36:*/		return 0x821D13C4;
		  /* 821D13C4h */ case   37:  		/* mr R4, R26 */
		/* 821D13C4h case   37:*/		regs.R4 = regs.R26;
		/* 821D13C4h case   37:*/		return 0x821D13C8;
		  /* 821D13C8h */ case   38:  		/* mr R3, R29 */
		/* 821D13C8h case   38:*/		regs.R3 = regs.R29;
		/* 821D13C8h case   38:*/		return 0x821D13CC;
		  /* 821D13CCh */ case   39:  		/* bl -81388 */
		/* 821D13CCh case   39:*/		regs.LR = 0x821D13D0; return 0x821BD5E0;
		/* 821D13CCh case   39:*/		return 0x821D13D0;
		  /* 821D13D0h */ case   40:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D13D0h case   40:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D13D0h case   40:*/		return 0x821D13D4;
		  /* 821D13D4h */ case   41:  		/* bc 12, CR0_EQ, 624 */
		/* 821D13D4h case   41:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D13D4h case   41:*/		return 0x821D13D8;
		  /* 821D13D8h */ case   42:  		/* mr R3, R29 */
		/* 821D13D8h case   42:*/		regs.R3 = regs.R29;
		/* 821D13D8h case   42:*/		return 0x821D13DC;
		  /* 821D13DCh */ case   43:  		/* bl -392244 */
		/* 821D13DCh case   43:*/		regs.LR = 0x821D13E0; return 0x821717A8;
		/* 821D13DCh case   43:*/		return 0x821D13E0;
		  /* 821D13E0h */ case   44:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D13E0h case   44:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D13E0h case   44:*/		return 0x821D13E4;
		  /* 821D13E4h */ case   45:  		/* bc 4, CR0_EQ, 56 */
		/* 821D13E4h case   45:*/		if ( !regs.CR[0].eq ) { return 0x821D141C;  }
		/* 821D13E4h case   45:*/		return 0x821D13E8;
		  /* 821D13E8h */ case   46:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D13E8h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D13E8h case   46:*/		return 0x821D13EC;
		  /* 821D13ECh */ case   47:  		/* lwz R10, <#[R27 + 28]> */
		/* 821D13ECh case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821D13ECh case   47:*/		return 0x821D13F0;
		  /* 821D13F0h */ case   48:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D13F0h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D13F0h case   48:*/		return 0x821D13F4;
		  /* 821D13F4h */ case   49:  		/* lwz R10, <#[R10 + 40]> */
		/* 821D13F4h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821D13F4h case   49:*/		return 0x821D13F8;
		  /* 821D13F8h */ case   50:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821D13F8h case   50:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821D13F8h case   50:*/		return 0x821D13FC;
		  /* 821D13FCh */ case   51:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821D13FCh case   51:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821D13FCh case   51:*/		return 0x821D1400;
		  /* 821D1400h */ case   52:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821D1400h case   52:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821D1400h case   52:*/		return 0x821D1404;
		  /* 821D1404h */ case   53:  		/* addi R11, R11, 1 */
		/* 821D1404h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D1404h case   53:*/		return 0x821D1408;
		  /* 821D1408h */ case   54:  		/* slw R9, R22, R9 */
		/* 821D1408h case   54:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821D1408h case   54:*/		return 0x821D140C;
		  /* 821D140Ch */ case   55:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D140Ch case   55:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D140Ch case   55:*/		return 0x821D1410;
		  /* 821D1410h */ case   56:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821D1410h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821D1410h case   56:*/		return 0x821D1414;
		  /* 821D1414h */ case   57:  		/* and. R11, R11, R9 */
		/* 821D1414h case   57:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D1414h case   57:*/		return 0x821D1418;
		  /* 821D1418h */ case   58:  		/* bc 4, CR0_EQ, 44 */
		/* 821D1418h case   58:*/		if ( !regs.CR[0].eq ) { return 0x821D1444;  }
		/* 821D1418h case   58:*/		return 0x821D141C;
	}
	return 0x821D141C;
} // Block from 821D1330h-821D141Ch (59 instructions)

//////////////////////////////////////////////////////
// Block at 821D141Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D141C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D141C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D141C);
		  /* 821D141Ch */ case    0:  		/* li R6, 0 */
		/* 821D141Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D141Ch case    0:*/		return 0x821D1420;
		  /* 821D1420h */ case    1:  		/* mr R5, R27 */
		/* 821D1420h case    1:*/		regs.R5 = regs.R27;
		/* 821D1420h case    1:*/		return 0x821D1424;
		  /* 821D1424h */ case    2:  		/* mr R4, R29 */
		/* 821D1424h case    2:*/		regs.R4 = regs.R29;
		/* 821D1424h case    2:*/		return 0x821D1428;
		  /* 821D1428h */ case    3:  		/* mr R3, R31 */
		/* 821D1428h case    3:*/		regs.R3 = regs.R31;
		/* 821D1428h case    3:*/		return 0x821D142C;
		  /* 821D142Ch */ case    4:  		/* bl 372796 */
		/* 821D142Ch case    4:*/		regs.LR = 0x821D1430; return 0x8222C468;
		/* 821D142Ch case    4:*/		return 0x821D1430;
		  /* 821D1430h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1430h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1430h case    5:*/		return 0x821D1434;
		  /* 821D1434h */ case    6:  		/* bc 12, CR0_EQ, 528 */
		/* 821D1434h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D1434h case    6:*/		return 0x821D1438;
		  /* 821D1438h */ case    7:  		/* lwz R27, <#[R1 + 80]> */
		/* 821D1438h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1438h case    7:*/		return 0x821D143C;
		  /* 821D143Ch */ case    8:  		/* lwz R29, <#[R1 + 84]> */
		/* 821D143Ch case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821D143Ch case    8:*/		return 0x821D1440;
		  /* 821D1440h */ case    9:  		/* lwz R26, <#[R1 + 108]> */
		/* 821D1440h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 821D1440h case    9:*/		return 0x821D1444;
	}
	return 0x821D1444;
} // Block from 821D141Ch-821D1444h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D1444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1444);
		  /* 821D1444h */ case    0:  		/* mr R3, R29 */
		/* 821D1444h case    0:*/		regs.R3 = regs.R29;
		/* 821D1444h case    0:*/		return 0x821D1448;
		  /* 821D1448h */ case    1:  		/* bl -392352 */
		/* 821D1448h case    1:*/		regs.LR = 0x821D144C; return 0x821717A8;
		/* 821D1448h case    1:*/		return 0x821D144C;
		  /* 821D144Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D144Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D144Ch case    2:*/		return 0x821D1450;
		  /* 821D1450h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 821D1450h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D146C;  }
		/* 821D1450h case    3:*/		return 0x821D1454;
		  /* 821D1454h */ case    4:  		/* li R6, 0 */
		/* 821D1454h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D1454h case    4:*/		return 0x821D1458;
		  /* 821D1458h */ case    5:  		/* mr R5, R27 */
		/* 821D1458h case    5:*/		regs.R5 = regs.R27;
		/* 821D1458h case    5:*/		return 0x821D145C;
		  /* 821D145Ch */ case    6:  		/* mr R4, R29 */
		/* 821D145Ch case    6:*/		regs.R4 = regs.R29;
		/* 821D145Ch case    6:*/		return 0x821D1460;
		  /* 821D1460h */ case    7:  		/* mr R3, R31 */
		/* 821D1460h case    7:*/		regs.R3 = regs.R31;
		/* 821D1460h case    7:*/		return 0x821D1464;
		  /* 821D1464h */ case    8:  		/* bl 378844 */
		/* 821D1464h case    8:*/		regs.LR = 0x821D1468; return 0x8222DC40;
		/* 821D1464h case    8:*/		return 0x821D1468;
		  /* 821D1468h */ case    9:  		/* lwz R26, <#[R1 + 108]> */
		/* 821D1468h case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 821D1468h case    9:*/		return 0x821D146C;
	}
	return 0x821D146C;
} // Block from 821D1444h-821D146Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D146Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D146C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D146C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D146C);
		  /* 821D146Ch */ case    0:  		/* mr R7, R26 */
		/* 821D146Ch case    0:*/		regs.R7 = regs.R26;
		/* 821D146Ch case    0:*/		return 0x821D1470;
		  /* 821D1470h */ case    1:  		/* lwz R9, <#[R1 + 136]> */
		/* 821D1470h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 821D1470h case    1:*/		return 0x821D1474;
		  /* 821D1474h */ case    2:  		/* mr R6, R28 */
		/* 821D1474h case    2:*/		regs.R6 = regs.R28;
		/* 821D1474h case    2:*/		return 0x821D1478;
		  /* 821D1478h */ case    3:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D1478h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D1478h case    3:*/		return 0x821D147C;
		  /* 821D147Ch */ case    4:  		/* mr R5, R23 */
		/* 821D147Ch case    4:*/		regs.R5 = regs.R23;
		/* 821D147Ch case    4:*/		return 0x821D1480;
		  /* 821D1480h */ case    5:  		/* mr R4, R30 */
		/* 821D1480h case    5:*/		regs.R4 = regs.R30;
		/* 821D1480h case    5:*/		return 0x821D1484;
		  /* 821D1484h */ case    6:  		/* mr R3, R31 */
		/* 821D1484h case    6:*/		regs.R3 = regs.R31;
		/* 821D1484h case    6:*/		return 0x821D1488;
		  /* 821D1488h */ case    7:  		/* bl -8776 */
		/* 821D1488h case    7:*/		regs.LR = 0x821D148C; return 0x821CF240;
		/* 821D1488h case    7:*/		return 0x821D148C;
		  /* 821D148Ch */ case    8:  		/* mr R3, R31 */
		/* 821D148Ch case    8:*/		regs.R3 = regs.R31;
		/* 821D148Ch case    8:*/		return 0x821D1490;
		  /* 821D1490h */ case    9:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D1490h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1490h case    9:*/		return 0x821D1494;
		  /* 821D1494h */ case   10:  		/* bl 341772 */
		/* 821D1494h case   10:*/		regs.LR = 0x821D1498; return 0x82224BA0;
		/* 821D1494h case   10:*/		return 0x821D1498;
		  /* 821D1498h */ case   11:  		/* mr R29, R3 */
		/* 821D1498h case   11:*/		regs.R29 = regs.R3;
		/* 821D1498h case   11:*/		return 0x821D149C;
		  /* 821D149Ch */ case   12:  		/* li R26, 0 */
		/* 821D149Ch case   12:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D149Ch case   12:*/		return 0x821D14A0;
		  /* 821D14A0h */ case   13:  		/* li R27, 44 */
		/* 821D14A0h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x2C);
		/* 821D14A0h case   13:*/		return 0x821D14A4;
		  /* 821D14A4h */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D14A4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D14A4h case   14:*/		return 0x821D14A8;
		  /* 821D14A8h */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D14A8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D14A8h case   15:*/		return 0x821D14AC;
		  /* 821D14ACh */ case   16:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821D14ACh case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821D14ACh case   16:*/		return 0x821D14B0;
		  /* 821D14B0h */ case   17:  		/* cmplw CR6, R26, R10 */
		/* 821D14B0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821D14B0h case   17:*/		return 0x821D14B4;
		  /* 821D14B4h */ case   18:  		/* bc 4, CR6_LT, 32 */
		/* 821D14B4h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821D14D4;  }
		/* 821D14B4h case   18:*/		return 0x821D14B8;
		  /* 821D14B8h */ case   19:  		/* mr R3, R29 */
		/* 821D14B8h case   19:*/		regs.R3 = regs.R29;
		/* 821D14B8h case   19:*/		return 0x821D14BC;
		  /* 821D14BCh */ case   20:  		/* lwzx R4, <#[R27 + R11]> */
		/* 821D14BCh case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821D14BCh case   20:*/		return 0x821D14C0;
		  /* 821D14C0h */ case   21:  		/* bl -365304 */
		/* 821D14C0h case   21:*/		regs.LR = 0x821D14C4; return 0x821781C8;
		/* 821D14C0h case   21:*/		return 0x821D14C4;
		  /* 821D14C4h */ case   22:  		/* stwx R3, <#[R27 + R29]> */
		/* 821D14C4h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + regs.R29 + 0x00000000) );
		/* 821D14C4h case   22:*/		return 0x821D14C8;
		  /* 821D14C8h */ case   23:  		/* addi R26, R26, 1 */
		/* 821D14C8h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821D14C8h case   23:*/		return 0x821D14CC;
		  /* 821D14CCh */ case   24:  		/* addi R27, R27, 4 */
		/* 821D14CCh case   24:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821D14CCh case   24:*/		return 0x821D14D0;
		  /* 821D14D0h */ case   25:  		/* b -44 */
		/* 821D14D0h case   25:*/		return 0x821D14A4;
		/* 821D14D0h case   25:*/		return 0x821D14D4;
	}
	return 0x821D14D4;
} // Block from 821D146Ch-821D14D4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D14D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D14D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D14D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D14D4);
		  /* 821D14D4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D14D4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D14D4h case    0:*/		return 0x821D14D8;
		  /* 821D14D8h */ case    1:  		/* rlwinm R10, R29, 0, 0, 30 */
		/* 821D14D8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R29);
		/* 821D14D8h case    1:*/		return 0x821D14DC;
		  /* 821D14DCh */ case    2:  		/* addi R11, R11, 36 */
		/* 821D14DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D14DCh case    2:*/		return 0x821D14E0;
		  /* 821D14E0h */ case    3:  		/* addi R10, R10, 36 */
		/* 821D14E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D14E0h case    3:*/		return 0x821D14E4;
		  /* 821D14E4h */ case    4:  		/* addi R8, R11, -36 */
		/* 821D14E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D14E4h case    4:*/		return 0x821D14E8;
		  /* 821D14E8h */ case    5:  		/* addi R7, R10, -36 */
		/* 821D14E8h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821D14E8h case    5:*/		return 0x821D14EC;
		  /* 821D14ECh */ case    6:  		/* addi R9, R10, 4 */
		/* 821D14ECh case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D14ECh case    6:*/		return 0x821D14F0;
		  /* 821D14F0h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821D14F0h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D14F0h case    7:*/		return 0x821D14F4;
		  /* 821D14F4h */ case    8:  		/* mr R4, R29 */
		/* 821D14F4h case    8:*/		regs.R4 = regs.R29;
		/* 821D14F4h case    8:*/		return 0x821D14F8;
		  /* 821D14F8h */ case    9:  		/* mr R3, R31 */
		/* 821D14F8h case    9:*/		regs.R3 = regs.R31;
		/* 821D14F8h case    9:*/		return 0x821D14FC;
		  /* 821D14FCh */ case   10:  		/* stw R6, <#[R10]> */
		/* 821D14FCh case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821D14FCh case   10:*/		return 0x821D1500;
		  /* 821D1500h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821D1500h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1500h case   11:*/		return 0x821D1504;
		  /* 821D1504h */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821D1504h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821D1504h case   12:*/		return 0x821D1508;
		  /* 821D1508h */ case   13:  		/* stw R7, <#[R6]> */
		/* 821D1508h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821D1508h case   13:*/		return 0x821D150C;
		  /* 821D150Ch */ case   14:  		/* stw R8, <#[R10 + 4]> */
		/* 821D150Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821D150Ch case   14:*/		return 0x821D1510;
		  /* 821D1510h */ case   15:  		/* stw R9, <#[R11]> */
		/* 821D1510h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1510h case   15:*/		return 0x821D1514;
		  /* 821D1514h */ case   16:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D1514h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D1514h case   16:*/		return 0x821D1518;
		  /* 821D1518h */ case   17:  		/* lwz R5, <#[R29 + 44]> */
		/* 821D1518h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D1518h case   17:*/		return 0x821D151C;
		  /* 821D151Ch */ case   18:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D151Ch case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D151Ch case   18:*/		return 0x821D1520;
		  /* 821D1520h */ case   19:  		/* lwz R7, <#[R1 + 84]> */
		/* 821D1520h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1520h case   19:*/		return 0x821D1524;
		  /* 821D1524h */ case   20:  		/* lwz R6, <#[R1 + 88]> */
		/* 821D1524h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1524h case   20:*/		return 0x821D1528;
		  /* 821D1528h */ case   21:  		/* bl -8936 */
		/* 821D1528h case   21:*/		regs.LR = 0x821D152C; return 0x821CF240;
		/* 821D1528h case   21:*/		return 0x821D152C;
		  /* 821D152Ch */ case   22:  		/* mr R3, R29 */
		/* 821D152Ch case   22:*/		regs.R3 = regs.R29;
		/* 821D152Ch case   22:*/		return 0x821D1530;
		  /* 821D1530h */ case   23:  		/* lwz R4, <#[R1 + 88]> */
		/* 821D1530h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1530h case   23:*/		return 0x821D1534;
		  /* 821D1534h */ case   24:  		/* bl -83244 */
		/* 821D1534h case   24:*/		regs.LR = 0x821D1538; return 0x821BD008;
		/* 821D1534h case   24:*/		return 0x821D1538;
		  /* 821D1538h */ case   25:  		/* mr R7, R29 */
		/* 821D1538h case   25:*/		regs.R7 = regs.R29;
		/* 821D1538h case   25:*/		return 0x821D153C;
		  /* 821D153Ch */ case   26:  		/* mr R6, R28 */
		/* 821D153Ch case   26:*/		regs.R6 = regs.R28;
		/* 821D153Ch case   26:*/		return 0x821D1540;
		  /* 821D1540h */ case   27:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D1540h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1540h case   27:*/		return 0x821D1544;
		  /* 821D1544h */ case   28:  		/* mr R5, R24 */
		/* 821D1544h case   28:*/		regs.R5 = regs.R24;
		/* 821D1544h case   28:*/		return 0x821D1548;
		  /* 821D1548h */ case   29:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D1548h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1548h case   29:*/		return 0x821D154C;
		  /* 821D154Ch */ case   30:  		/* mr R4, R30 */
		/* 821D154Ch case   30:*/		regs.R4 = regs.R30;
		/* 821D154Ch case   30:*/		return 0x821D1550;
		  /* 821D1550h */ case   31:  		/* mr R3, R31 */
		/* 821D1550h case   31:*/		regs.R3 = regs.R31;
		/* 821D1550h case   31:*/		return 0x821D1554;
		  /* 821D1554h */ case   32:  		/* bl -8980 */
		/* 821D1554h case   32:*/		regs.LR = 0x821D1558; return 0x821CF240;
		/* 821D1554h case   32:*/		return 0x821D1558;
		  /* 821D1558h */ case   33:  		/* lwz R10, <#[R30 + 12]> */
		/* 821D1558h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D1558h case   33:*/		return 0x821D155C;
		  /* 821D155Ch */ case   34:  		/* andi. R11, R10, 17476 */
		/* 821D155Ch case   34:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R10,0x4444);
		/* 821D155Ch case   34:*/		return 0x821D1560;
		  /* 821D1560h */ case   35:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821D1560h case   35:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821D1560h case   35:*/		return 0x821D1564;
		  /* 821D1564h */ case   36:  		/* cmplw CR6, R10, R11 */
		/* 821D1564h case   36:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D1564h case   36:*/		return 0x821D1568;
		  /* 821D1568h */ case   37:  		/* bc 12, CR6_EQ, 8 */
		/* 821D1568h case   37:*/		if ( regs.CR[6].eq ) { return 0x821D1570;  }
		/* 821D1568h case   37:*/		return 0x821D156C;
		  /* 821D156Ch */ case   38:  		/* sth R11, <#[R30 + 14]> */
		/* 821D156Ch case   38:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821D156Ch case   38:*/		return 0x821D1570;
	}
	return 0x821D1570;
} // Block from 821D14D4h-821D1570h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821D1570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1570);
		  /* 821D1570h */ case    0:  		/* mr R4, R28 */
		/* 821D1570h case    0:*/		regs.R4 = regs.R28;
		/* 821D1570h case    0:*/		return 0x821D1574;
		  /* 821D1574h */ case    1:  		/* mr R3, R30 */
		/* 821D1574h case    1:*/		regs.R3 = regs.R30;
		/* 821D1574h case    1:*/		return 0x821D1578;
		  /* 821D1578h */ case    2:  		/* bl -83312 */
		/* 821D1578h case    2:*/		regs.LR = 0x821D157C; return 0x821BD008;
		/* 821D1578h case    2:*/		return 0x821D157C;
		  /* 821D157Ch */ case    3:  		/* mr R3, R31 */
		/* 821D157Ch case    3:*/		regs.R3 = regs.R31;
		/* 821D157Ch case    3:*/		return 0x821D1580;
		  /* 821D1580h */ case    4:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D1580h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1580h case    4:*/		return 0x821D1584;
		  /* 821D1584h */ case    5:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D1584h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D1584h case    5:*/		return 0x821D1588;
		  /* 821D1588h */ case    6:  		/* bl -23488 */
		/* 821D1588h case    6:*/		regs.LR = 0x821D158C; return 0x821CB9C8;
		/* 821D1588h case    6:*/		return 0x821D158C;
		  /* 821D158Ch */ case    7:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D158Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D158Ch case    7:*/		return 0x821D1590;
		  /* 821D1590h */ case    8:  		/* mr R4, R29 */
		/* 821D1590h case    8:*/		regs.R4 = regs.R29;
		/* 821D1590h case    8:*/		return 0x821D1594;
		  /* 821D1594h */ case    9:  		/* mr R3, R31 */
		/* 821D1594h case    9:*/		regs.R3 = regs.R31;
		/* 821D1594h case    9:*/		return 0x821D1598;
		  /* 821D1598h */ case   10:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821D1598h case   10:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821D1598h case   10:*/		return 0x821D159C;
		  /* 821D159Ch */ case   11:  		/* stw R11, <#[R29 + 8]> */
		/* 821D159Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D159Ch case   11:*/		return 0x821D15A0;
		  /* 821D15A0h */ case   12:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D15A0h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D15A0h case   12:*/		return 0x821D15A4;
		  /* 821D15A4h */ case   13:  		/* bl -23516 */
		/* 821D15A4h case   13:*/		regs.LR = 0x821D15A8; return 0x821CB9C8;
		/* 821D15A4h case   13:*/		return 0x821D15A8;
		  /* 821D15A8h */ case   14:  		/* lwz R11, <#[R1 + 108]> */
		/* 821D15A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821D15A8h case   14:*/		return 0x821D15AC;
		  /* 821D15ACh */ case   15:  		/* lwz R10, <#[R1 + 132]> */
		/* 821D15ACh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821D15ACh case   15:*/		return 0x821D15B0;
		  /* 821D15B0h */ case   16:  		/* lwz R9, <#[R1 + 136]> */
		/* 821D15B0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 821D15B0h case   16:*/		return 0x821D15B4;
		  /* 821D15B4h */ case   17:  		/* stw R29, <#[R1 + 80]> */
		/* 821D15B4h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821D15B4h case   17:*/		return 0x821D15B8;
		  /* 821D15B8h */ case   18:  		/* b 124 */
		/* 821D15B8h case   18:*/		return 0x821D1634;
		/* 821D15B8h case   18:*/		return 0x821D15BC;
	}
	return 0x821D15BC;
} // Block from 821D1570h-821D15BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D15BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D15BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D15BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D15BC);
		  /* 821D15BCh */ case    0:  		/* mr R4, R29 */
		/* 821D15BCh case    0:*/		regs.R4 = regs.R29;
		/* 821D15BCh case    0:*/		return 0x821D15C0;
		  /* 821D15C0h */ case    1:  		/* mr R3, R27 */
		/* 821D15C0h case    1:*/		regs.R3 = regs.R27;
		/* 821D15C0h case    1:*/		return 0x821D15C4;
		  /* 821D15C4h */ case    2:  		/* bl -81892 */
		/* 821D15C4h case    2:*/		regs.LR = 0x821D15C8; return 0x821BD5E0;
		/* 821D15C4h case    2:*/		return 0x821D15C8;
		  /* 821D15C8h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D15C8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D15C8h case    3:*/		return 0x821D15CC;
		  /* 821D15CCh */ case    4:  		/* bc 12, CR0_EQ, 120 */
		/* 821D15CCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821D1644;  }
		/* 821D15CCh case    4:*/		return 0x821D15D0;
		  /* 821D15D0h */ case    5:  		/* mr R7, R29 */
		/* 821D15D0h case    5:*/		regs.R7 = regs.R29;
		/* 821D15D0h case    5:*/		return 0x821D15D4;
		  /* 821D15D4h */ case    6:  		/* lwz R9, <#[R1 + 96]> */
		/* 821D15D4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D15D4h case    6:*/		return 0x821D15D8;
		  /* 821D15D8h */ case    7:  		/* mr R6, R28 */
		/* 821D15D8h case    7:*/		regs.R6 = regs.R28;
		/* 821D15D8h case    7:*/		return 0x821D15DC;
		  /* 821D15DCh */ case    8:  		/* lwz R8, <#[R1 + 92]> */
		/* 821D15DCh case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D15DCh case    8:*/		return 0x821D15E0;
		  /* 821D15E0h */ case    9:  		/* mr R5, R24 */
		/* 821D15E0h case    9:*/		regs.R5 = regs.R24;
		/* 821D15E0h case    9:*/		return 0x821D15E4;
		  /* 821D15E4h */ case   10:  		/* mr R4, R30 */
		/* 821D15E4h case   10:*/		regs.R4 = regs.R30;
		/* 821D15E4h case   10:*/		return 0x821D15E8;
		  /* 821D15E8h */ case   11:  		/* mr R3, R31 */
		/* 821D15E8h case   11:*/		regs.R3 = regs.R31;
		/* 821D15E8h case   11:*/		return 0x821D15EC;
		  /* 821D15ECh */ case   12:  		/* bl -9132 */
		/* 821D15ECh case   12:*/		regs.LR = 0x821D15F0; return 0x821CF240;
		/* 821D15ECh case   12:*/		return 0x821D15F0;
		  /* 821D15F0h */ case   13:  		/* mr R6, R28 */
		/* 821D15F0h case   13:*/		regs.R6 = regs.R28;
		/* 821D15F0h case   13:*/		return 0x821D15F4;
		  /* 821D15F4h */ case   14:  		/* mr R5, R23 */
		/* 821D15F4h case   14:*/		regs.R5 = regs.R23;
		/* 821D15F4h case   14:*/		return 0x821D15F8;
		  /* 821D15F8h */ case   15:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D15F8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D15F8h case   15:*/		return 0x821D15FC;
		  /* 821D15FCh */ case   16:  		/* mr R4, R30 */
		/* 821D15FCh case   16:*/		regs.R4 = regs.R30;
		/* 821D15FCh case   16:*/		return 0x821D1600;
		  /* 821D1600h */ case   17:  		/* lwz R8, <#[R1 + 88]> */
		/* 821D1600h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1600h case   17:*/		return 0x821D1604;
		  /* 821D1604h */ case   18:  		/* mr R3, R31 */
		/* 821D1604h case   18:*/		regs.R3 = regs.R31;
		/* 821D1604h case   18:*/		return 0x821D1608;
		  /* 821D1608h */ case   19:  		/* lwz R7, <#[R1 + 80]> */
		/* 821D1608h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1608h case   19:*/		return 0x821D160C;
		  /* 821D160Ch */ case   20:  		/* bl -9164 */
		/* 821D160Ch case   20:*/		regs.LR = 0x821D1610; return 0x821CF240;
		/* 821D160Ch case   20:*/		return 0x821D1610;
		  /* 821D1610h */ case   21:  		/* lwz R8, <#[R1 + 84]> */
		/* 821D1610h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1610h case   21:*/		return 0x821D1614;
		  /* 821D1614h */ case   22:  		/* lwz R7, <#[R1 + 92]> */
		/* 821D1614h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1614h case   22:*/		return 0x821D1618;
		  /* 821D1618h */ case   23:  		/* lwz R6, <#[R1 + 96]> */
		/* 821D1618h case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 821D1618h case   23:*/		return 0x821D161C;
		  /* 821D161Ch */ case   24:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D161Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D161Ch case   24:*/		return 0x821D1620;
		  /* 821D1620h */ case   25:  		/* lwz R10, <#[R1 + 88]> */
		/* 821D1620h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821D1620h case   25:*/		return 0x821D1624;
		  /* 821D1624h */ case   26:  		/* lwz R9, <#[R1 + 100]> */
		/* 821D1624h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1624h case   26:*/		return 0x821D1628;
		  /* 821D1628h */ case   27:  		/* stw R8, <#[R1 + 80]> */
		/* 821D1628h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1628h case   27:*/		return 0x821D162C;
		  /* 821D162Ch */ case   28:  		/* stw R7, <#[R1 + 88]> */
		/* 821D162Ch case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000058) );
		/* 821D162Ch case   28:*/		return 0x821D1630;
		  /* 821D1630h */ case   29:  		/* stw R6, <#[R1 + 100]> */
		/* 821D1630h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1630h case   29:*/		return 0x821D1634;
	}
	return 0x821D1634;
} // Block from 821D15BCh-821D1634h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D1634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1634);
		  /* 821D1634h */ case    0:  		/* stw R9, <#[R1 + 96]> */
		/* 821D1634h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 821D1634h case    0:*/		return 0x821D1638;
		  /* 821D1638h */ case    1:  		/* mr R25, R22 */
		/* 821D1638h case    1:*/		regs.R25 = regs.R22;
		/* 821D1638h case    1:*/		return 0x821D163C;
		  /* 821D163Ch */ case    2:  		/* stw R10, <#[R1 + 92]> */
		/* 821D163Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D163Ch case    2:*/		return 0x821D1640;
		  /* 821D1640h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 821D1640h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1640h case    3:*/		return 0x821D1644;
	}
	return 0x821D1644;
} // Block from 821D1634h-821D1644h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D1644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1644);
		  /* 821D1644h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821D1644h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821D1644h case    0:*/		return 0x821D1648;
		  /* 821D1648h */ case    1:  		/* addi R28, R28, 1 */
		/* 821D1648h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821D1648h case    1:*/		return 0x821D164C;
		  /* 821D164Ch */ case    2:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821D164Ch case    2:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821D164Ch case    2:*/		return 0x821D1650;
		  /* 821D1650h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 821D1650h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821D1650h case    3:*/		return 0x821D1654;
		  /* 821D1654h */ case    4:  		/* bc 12, CR6_LT, -2360 */
		/* 821D1654h case    4:*/		if ( regs.CR[6].lt ) { return 0x821D0D1C;  }
		/* 821D1654h case    4:*/		return 0x821D1658;
	}
	return 0x821D1658;
} // Block from 821D1644h-821D1658h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D1658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1658);
		  /* 821D1658h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821D1658h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821D1658h case    0:*/		return 0x821D165C;
		  /* 821D165Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821D165Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821D1690;  }
		/* 821D165Ch case    1:*/		return 0x821D1660;
		  /* 821D1660h */ case    2:  		/* lwz R29, <#[R31 + 652]> */
		/* 821D1660h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D1660h case    2:*/		return 0x821D1664;
		  /* 821D1664h */ case    3:  		/* lwz R30, <#[R30 + 4]> */
		/* 821D1664h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821D1664h case    3:*/		return 0x821D1668;
		  /* 821D1668h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821D1668h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D1668h case    4:*/		return 0x821D166C;
		  /* 821D166Ch */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821D166Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821D1690;  }
		/* 821D166Ch case    5:*/		return 0x821D1670;
		  /* 821D1670h */ case    6:  		/* lwz R4, <#[R30 + 16]> */
		/* 821D1670h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821D1670h case    6:*/		return 0x821D1674;
		  /* 821D1674h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 821D1674h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821D1674h case    7:*/		return 0x821D1678;
		  /* 821D1678h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821D1678h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D1688;  }
		/* 821D1678h case    8:*/		return 0x821D167C;
		  /* 821D167Ch */ case    9:  		/* mr R5, R29 */
		/* 821D167Ch case    9:*/		regs.R5 = regs.R29;
		/* 821D167Ch case    9:*/		return 0x821D1680;
		  /* 821D1680h */ case   10:  		/* mr R3, R31 */
		/* 821D1680h case   10:*/		regs.R3 = regs.R31;
		/* 821D1680h case   10:*/		return 0x821D1684;
		  /* 821D1684h */ case   11:  		/* bl -23740 */
		/* 821D1684h case   11:*/		regs.LR = 0x821D1688; return 0x821CB9C8;
		/* 821D1684h case   11:*/		return 0x821D1688;
	}
	return 0x821D1688;
} // Block from 821D1658h-821D1688h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D1688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1688);
		  /* 821D1688h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821D1688h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1688h case    0:*/		return 0x821D168C;
		  /* 821D168Ch */ case    1:  		/* b -36 */
		/* 821D168Ch case    1:*/		return 0x821D1668;
		/* 821D168Ch case    1:*/		return 0x821D1690;
	}
	return 0x821D1690;
} // Block from 821D1688h-821D1690h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D1690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1690);
		  /* 821D1690h */ case    0:  		/* addi R1, R1, 240 */
		/* 821D1690h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821D1690h case    0:*/		return 0x821D1694;
		  /* 821D1694h */ case    1:  		/* b -1311748 */
		/* 821D1694h case    1:*/		return 0x82091290;
		/* 821D1694h case    1:*/		return 0x821D1698;
	}
	return 0x821D1698;
} // Block from 821D1690h-821D1698h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D1698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1698);
		  /* 821D1698h */ case    0:  		/* mfspr R12, LR */
		/* 821D1698h case    0:*/		regs.R12 = regs.LR;
		/* 821D1698h case    0:*/		return 0x821D169C;
		  /* 821D169Ch */ case    1:  		/* bl -1311852 */
		/* 821D169Ch case    1:*/		regs.LR = 0x821D16A0; return 0x82091230;
		/* 821D169Ch case    1:*/		return 0x821D16A0;
		  /* 821D16A0h */ case    2:  		/* stfd FR30, <#[R1 - 136]> */
		/* 821D16A0h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821D16A0h case    2:*/		return 0x821D16A4;
		  /* 821D16A4h */ case    3:  		/* stfd FR31, <#[R1 - 128]> */
		/* 821D16A4h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 821D16A4h case    3:*/		return 0x821D16A8;
		  /* 821D16A8h */ case    4:  		/* stwu R1, <#[R1 - 336]> */
		/* 821D16A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEB0);
		/* 821D16A8h case    4:*/		return 0x821D16AC;
		  /* 821D16ACh */ case    5:  		/* mr R21, R10 */
		/* 821D16ACh case    5:*/		regs.R21 = regs.R10;
		/* 821D16ACh case    5:*/		return 0x821D16B0;
		  /* 821D16B0h */ case    6:  		/* lwz R11, <#[R9 + 8]> */
		/* 821D16B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821D16B0h case    6:*/		return 0x821D16B4;
		  /* 821D16B4h */ case    7:  		/* lis R10, -32256 */
		/* 821D16B4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821D16B4h case    7:*/		return 0x821D16B8;
		  /* 821D16B8h */ case    8:  		/* lwz R19, <#[R1 + 428]> */
		/* 821D16B8h case    8:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000001AC) );
		/* 821D16B8h case    8:*/		return 0x821D16BC;
		  /* 821D16BCh */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D16BCh case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D16BCh case    9:*/		return 0x821D16C0;
		  /* 821D16C0h */ case   10:  		/* lwz R20, <#[R1 + 420]> */
		/* 821D16C0h case   10:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000001A4) );
		/* 821D16C0h case   10:*/		return 0x821D16C4;
		  /* 821D16C4h */ case   11:  		/* mr R31, R3 */
		/* 821D16C4h case   11:*/		regs.R31 = regs.R3;
		/* 821D16C4h case   11:*/		return 0x821D16C8;
		  /* 821D16C8h */ case   12:  		/* mr R29, R4 */
		/* 821D16C8h case   12:*/		regs.R29 = regs.R4;
		/* 821D16C8h case   12:*/		return 0x821D16CC;
		  /* 821D16CCh */ case   13:  		/* mr R18, R5 */
		/* 821D16CCh case   13:*/		regs.R18 = regs.R5;
		/* 821D16CCh case   13:*/		return 0x821D16D0;
		  /* 821D16D0h */ case   14:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 821D16D0h case   14:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 821D16D0h case   14:*/		return 0x821D16D4;
		  /* 821D16D4h */ case   15:  		/* mr R30, R6 */
		/* 821D16D4h case   15:*/		regs.R30 = regs.R6;
		/* 821D16D4h case   15:*/		return 0x821D16D8;
		  /* 821D16D8h */ case   16:  		/* mr R26, R7 */
		/* 821D16D8h case   16:*/		regs.R26 = regs.R7;
		/* 821D16D8h case   16:*/		return 0x821D16DC;
		  /* 821D16DCh */ case   17:  		/* mr R23, R8 */
		/* 821D16DCh case   17:*/		regs.R23 = regs.R8;
		/* 821D16DCh case   17:*/		return 0x821D16E0;
		  /* 821D16E0h */ case   18:  		/* mr R28, R9 */
		/* 821D16E0h case   18:*/		regs.R28 = regs.R9;
		/* 821D16E0h case   18:*/		return 0x821D16E4;
		  /* 821D16E4h */ case   19:  		/* cmplwi CR6, R11, 16000 */
		/* 821D16E4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D16E4h case   19:*/		return 0x821D16E8;
		  /* 821D16E8h */ case   20:  		/* bc 4, CR6_EQ, 1072 */
		/* 821D16E8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D16E8h case   20:*/		return 0x821D16EC;
		  /* 821D16ECh */ case   21:  		/* lwz R11, <#[R6 + 8]> */
		/* 821D16ECh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000008) );
		/* 821D16ECh case   21:*/		return 0x821D16F0;
		  /* 821D16F0h */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D16F0h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D16F0h case   22:*/		return 0x821D16F4;
		  /* 821D16F4h */ case   23:  		/* cmplwi CR6, R11, 16000 */
		/* 821D16F4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D16F4h case   23:*/		return 0x821D16F8;
		  /* 821D16F8h */ case   24:  		/* bc 4, CR6_EQ, 360 */
		/* 821D16F8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D1860;  }
		/* 821D16F8h case   24:*/		return 0x821D16FC;
		  /* 821D16FCh */ case   25:  		/* mr R5, R8 */
		/* 821D16FCh case   25:*/		regs.R5 = regs.R8;
		/* 821D16FCh case   25:*/		return 0x821D1700;
		  /* 821D1700h */ case   26:  		/* mr R4, R7 */
		/* 821D1700h case   26:*/		regs.R4 = regs.R7;
		/* 821D1700h case   26:*/		return 0x821D1704;
		  /* 821D1704h */ case   27:  		/* mr R3, R6 */
		/* 821D1704h case   27:*/		regs.R3 = regs.R6;
		/* 821D1704h case   27:*/		return 0x821D1708;
		  /* 821D1708h */ case   28:  		/* bl 327576 */
		/* 821D1708h case   28:*/		regs.LR = 0x821D170C; return 0x822216A0;
		/* 821D1708h case   28:*/		return 0x821D170C;
		  /* 821D170Ch */ case   29:  		/* mr R4, R21 */
		/* 821D170Ch case   29:*/		regs.R4 = regs.R21;
		/* 821D170Ch case   29:*/		return 0x821D1710;
		  /* 821D1710h */ case   30:  		/* mr R3, R28 */
		/* 821D1710h case   30:*/		regs.R3 = regs.R28;
		/* 821D1710h case   30:*/		return 0x821D1714;
		  /* 821D1714h */ case   31:  		/* fmr FR31, FR1 */
		/* 821D1714h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D1714h case   31:*/		return 0x821D1718;
		  /* 821D1718h */ case   32:  		/* rlwinm R5, R20, 0, 0, 31 */
		/* 821D1718h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R20);
		/* 821D1718h case   32:*/		return 0x821D171C;
		  /* 821D171Ch */ case   33:  		/* bl 327556 */
		/* 821D171Ch case   33:*/		regs.LR = 0x821D1720; return 0x822216A0;
		/* 821D171Ch case   33:*/		return 0x821D1720;
		  /* 821D1720h */ case   34:  		/* mr R4, R26 */
		/* 821D1720h case   34:*/		regs.R4 = regs.R26;
		/* 821D1720h case   34:*/		return 0x821D1724;
		  /* 821D1724h */ case   35:  		/* mr R3, R30 */
		/* 821D1724h case   35:*/		regs.R3 = regs.R30;
		/* 821D1724h case   35:*/		return 0x821D1728;
		  /* 821D1728h */ case   36:  		/* fmr FR30, FR1 */
		/* 821D1728h case   36:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 821D1728h case   36:*/		return 0x821D172C;
		  /* 821D172Ch */ case   37:  		/* bl -81916 */
		/* 821D172Ch case   37:*/		regs.LR = 0x821D1730; return 0x821BD730;
		/* 821D172Ch case   37:*/		return 0x821D1730;
		  /* 821D1730h */ case   38:  		/* or. R8, R3, R3 */
		/* 821D1730h case   38:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 821D1730h case   38:*/		return 0x821D1734;
		  /* 821D1734h */ case   39:  		/* bc 12, CR0_EQ, 28 */
		/* 821D1734h case   39:*/		if ( regs.CR[0].eq ) { return 0x821D1750;  }
		/* 821D1734h case   39:*/		return 0x821D1738;
		  /* 821D1738h */ case   40:  		/* mr R4, R21 */
		/* 821D1738h case   40:*/		regs.R4 = regs.R21;
		/* 821D1738h case   40:*/		return 0x821D173C;
		  /* 821D173Ch */ case   41:  		/* mr R3, R28 */
		/* 821D173Ch case   41:*/		regs.R3 = regs.R28;
		/* 821D173Ch case   41:*/		return 0x821D1740;
		  /* 821D1740h */ case   42:  		/* bl -81936 */
		/* 821D1740h case   42:*/		regs.LR = 0x821D1744; return 0x821BD730;
		/* 821D1740h case   42:*/		return 0x821D1744;
		  /* 821D1744h */ case   43:  		/* cmpwi CR0, R3, 0 */
		/* 821D1744h case   43:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821D1744h case   43:*/		return 0x821D1748;
		  /* 821D1748h */ case   44:  		/* mr R30, R8 */
		/* 821D1748h case   44:*/		regs.R30 = regs.R8;
		/* 821D1748h case   44:*/		return 0x821D174C;
		  /* 821D174Ch */ case   45:  		/* bc 4, CR0_EQ, 8 */
		/* 821D174Ch case   45:*/		if ( !regs.CR[0].eq ) { return 0x821D1754;  }
		/* 821D174Ch case   45:*/		return 0x821D1750;
	}
	return 0x821D1750;
} // Block from 821D1698h-821D1750h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821D1750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1750);
		  /* 821D1750h */ case    0:  		/* li R30, 0 */
		/* 821D1750h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D1750h case    0:*/		return 0x821D1754;
	}
	return 0x821D1754;
} // Block from 821D1750h-821D1754h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1754);
		  /* 821D1754h */ case    0:  		/* lis R11, -32256 */
		/* 821D1754h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D1754h case    0:*/		return 0x821D1758;
		  /* 821D1758h */ case    1:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 821D1758h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 821D1758h case    1:*/		return 0x821D175C;
		  /* 821D175Ch */ case    2:  		/* fcmpu CR6, FR31, FR0 */
		/* 821D175Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821D175Ch case    2:*/		return 0x821D1760;
		  /* 821D1760h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821D1760h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D1778;  }
		/* 821D1760h case    3:*/		return 0x821D1764;
		  /* 821D1764h */ case    4:  		/* fcmpu CR6, FR30, FR0 */
		/* 821D1764h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR0);
		/* 821D1764h case    4:*/		return 0x821D1768;
		  /* 821D1768h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D1768h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D1778;  }
		/* 821D1768h case    5:*/		return 0x821D176C;
		  /* 821D176Ch */ case    6:  		/* fmul FR1, FR30, FR31 */
		/* 821D176Ch case    6:*/		cpu::op::fmul<0>(regs,&regs.FR1,regs.FR30,regs.FR31);
		/* 821D176Ch case    6:*/		return 0x821D1770;
		  /* 821D1770h */ case    7:  		/* bl -84192 */
		/* 821D1770h case    7:*/		regs.LR = 0x821D1774; return 0x821BCE90;
		/* 821D1770h case    7:*/		return 0x821D1774;
		  /* 821D1774h */ case    8:  		/* b 8 */
		/* 821D1774h case    8:*/		return 0x821D177C;
		/* 821D1774h case    8:*/		return 0x821D1778;
	}
	return 0x821D1778;
} // Block from 821D1754h-821D1778h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D1778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1778);
		  /* 821D1778h */ case    0:  		/* fmr FR1, FR0 */
		/* 821D1778h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D1778h case    0:*/		return 0x821D177C;
	}
	return 0x821D177C;
} // Block from 821D1778h-821D177Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D177Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D177C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D177C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D177C);
		  /* 821D177Ch */ case    0:  		/* mr R5, R30 */
		/* 821D177Ch case    0:*/		regs.R5 = regs.R30;
		/* 821D177Ch case    0:*/		return 0x821D1780;
		  /* 821D1780h */ case    1:  		/* mr R3, R31 */
		/* 821D1780h case    1:*/		regs.R3 = regs.R31;
		/* 821D1780h case    1:*/		return 0x821D1784;
		  /* 821D1784h */ case    2:  		/* bl 365596 */
		/* 821D1784h case    2:*/		regs.LR = 0x821D1788; return 0x8222ABA0;
		/* 821D1784h case    2:*/		return 0x821D1788;
		  /* 821D1788h */ case    3:  		/* lwz R30, <#[R1 + 428]> */
		/* 821D1788h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000001AC) );
		/* 821D1788h case    3:*/		return 0x821D178C;
		  /* 821D178Ch */ case    4:  		/* mr R28, R3 */
		/* 821D178Ch case    4:*/		regs.R28 = regs.R3;
		/* 821D178Ch case    4:*/		return 0x821D1790;
		  /* 821D1790h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821D1790h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D1790h case    5:*/		return 0x821D1794;
		  /* 821D1794h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D1794h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D17A0;  }
		/* 821D1794h case    6:*/		return 0x821D1798;
		  /* 821D1798h */ case    7:  		/* mr R6, R3 */
		/* 821D1798h case    7:*/		regs.R6 = regs.R3;
		/* 821D1798h case    7:*/		return 0x821D179C;
		  /* 821D179Ch */ case    8:  		/* b 156 */
		/* 821D179Ch case    8:*/		return 0x821D1838;
		/* 821D179Ch case    8:*/		return 0x821D17A0;
	}
	return 0x821D17A0;
} // Block from 821D177Ch-821D17A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D17A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D17A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D17A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D17A0);
		  /* 821D17A0h */ case    0:  		/* mr R3, R31 */
		/* 821D17A0h case    0:*/		regs.R3 = regs.R31;
		/* 821D17A0h case    0:*/		return 0x821D17A4;
		  /* 821D17A4h */ case    1:  		/* lwz R6, <#[R30 + 8]> */
		/* 821D17A4h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000008) );
		/* 821D17A4h case    1:*/		return 0x821D17A8;
		  /* 821D17A8h */ case    2:  		/* lwz R5, <#[R30 + 4]> */
		/* 821D17A8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 821D17A8h case    2:*/		return 0x821D17AC;
		  /* 821D17ACh */ case    3:  		/* lwz R4, <#[R30]> */
		/* 821D17ACh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821D17ACh case    3:*/		return 0x821D17B0;
		  /* 821D17B0h */ case    4:  		/* bl -366152 */
		/* 821D17B0h case    4:*/		regs.LR = 0x821D17B4; return 0x82178168;
		/* 821D17B0h case    4:*/		return 0x821D17B4;
		  /* 821D17B4h */ case    5:  		/* mr R27, R3 */
		/* 821D17B4h case    5:*/		regs.R27 = regs.R3;
		/* 821D17B4h case    5:*/		return 0x821D17B8;
		  /* 821D17B8h */ case    6:  		/* li R5, 0 */
		/* 821D17B8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D17B8h case    6:*/		return 0x821D17BC;
		  /* 821D17BCh */ case    7:  		/* mr R4, R28 */
		/* 821D17BCh case    7:*/		regs.R4 = regs.R28;
		/* 821D17BCh case    7:*/		return 0x821D17C0;
	}
	return 0x821D17C0;
} // Block from 821D17A0h-821D17C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D17C0h
// Function '?CanonicalizeDependencyGraph@Compiler@D3DXShader@@AAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D17C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D17C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D17C0);
		  /* 821D17C0h */ case    0:  		/* mr R3, R31 */
		/* 821D17C0h case    0:*/		regs.R3 = regs.R31;
		/* 821D17C0h case    0:*/		return 0x821D17C4;
		  /* 821D17C4h */ case    1:  		/* bl -366260 */
		/* 821D17C4h case    1:*/		regs.LR = 0x821D17C8; return 0x82178110;
		/* 821D17C4h case    1:*/		return 0x821D17C8;
		  /* 821D17C8h */ case    2:  		/* mr R6, R3 */
		/* 821D17C8h case    2:*/		regs.R6 = regs.R3;
		/* 821D17C8h case    2:*/		return 0x821D17CC;
		  /* 821D17CCh */ case    3:  		/* mr R5, R29 */
		/* 821D17CCh case    3:*/		regs.R5 = regs.R29;
		/* 821D17CCh case    3:*/		return 0x821D17D0;
		  /* 821D17D0h */ case    4:  		/* li R4, 0 */
		/* 821D17D0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D17D0h case    4:*/		return 0x821D17D4;
		  /* 821D17D4h */ case    5:  		/* mr R3, R31 */
		/* 821D17D4h case    5:*/		regs.R3 = regs.R31;
		/* 821D17D4h case    5:*/		return 0x821D17D8;
		  /* 821D17D8h */ case    6:  		/* mr R7, R27 */
		/* 821D17D8h case    6:*/		regs.R7 = regs.R27;
		/* 821D17D8h case    6:*/		return 0x821D17DC;
		  /* 821D17DCh */ case    7:  		/* bl -67276 */
		/* 821D17DCh case    7:*/		regs.LR = 0x821D17E0; return 0x821C1110;
		/* 821D17DCh case    7:*/		return 0x821D17E0;
		  /* 821D17E0h */ case    8:  		/* fctiwz FR0, FR30 */
		/* 821D17E0h case    8:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR30);
		/* 821D17E0h case    8:*/		return 0x821D17E4;
		  /* 821D17E4h */ case    9:  		/* stfd FR0, <#[R1 + 120]> */
		/* 821D17E4h case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 821D17E4h case    9:*/		return 0x821D17E8;
		  /* 821D17E8h */ case   10:  		/* lwa R11, <#[R1 + 124]> */
		/* 821D17E8h case   10:*/		cpu::mem::load32a( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D17E8h case   10:*/		return 0x821D17EC;
		  /* 821D17ECh */ case   11:  		/* std R11, <#[R1 + 120]> */
		/* 821D17ECh case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821D17ECh case   11:*/		return 0x821D17F0;
		  /* 821D17F0h */ case   12:  		/* mr R6, R3 */
		/* 821D17F0h case   12:*/		regs.R6 = regs.R3;
		/* 821D17F0h case   12:*/		return 0x821D17F4;
		  /* 821D17F4h */ case   13:  		/* lfd FR0, <#[R1 + 120]> */
		/* 821D17F4h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 821D17F4h case   13:*/		return 0x821D17F8;
		  /* 821D17F8h */ case   14:  		/* fcfid FR0, FR0 */
		/* 821D17F8h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821D17F8h case   14:*/		return 0x821D17FC;
		  /* 821D17FCh */ case   15:  		/* fcmpu CR6, FR0, FR30 */
		/* 821D17FCh case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 821D17FCh case   15:*/		return 0x821D1800;
		  /* 821D1800h */ case   16:  		/* bc 4, CR6_EQ, 56 */
		/* 821D1800h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D1838;  }
		/* 821D1800h case   16:*/		return 0x821D1804;
		  /* 821D1804h */ case   17:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D1804h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D1804h case   17:*/		return 0x821D1808;
		  /* 821D1808h */ case   18:  		/* lwz R10, <#[R30 + 16]> */
		/* 821D1808h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821D1808h case   18:*/		return 0x821D180C;
		  /* 821D180Ch */ case   19:  		/* rlwinm R10, R10, 2, 16, 29 */
		/* 821D180Ch case   19:*/		cpu::op::rlwinm<0,2,16,29>(regs,&regs.R10,regs.R10);
		/* 821D180Ch case   19:*/		return 0x821D1810;
		  /* 821D1810h */ case   20:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D1810h case   20:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D1810h case   20:*/		return 0x821D1814;
		  /* 821D1814h */ case   21:  		/* srw R11, R11, R10 */
		/* 821D1814h case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D1814h case   21:*/		return 0x821D1818;
		  /* 821D1818h */ case   22:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821D1818h case   22:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821D1818h case   22:*/		return 0x821D181C;
		  /* 821D181Ch */ case   23:  		/* bc 12, CR0_EQ, 28 */
		/* 821D181Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821D1838;  }
		/* 821D181Ch case   23:*/		return 0x821D1820;
		  /* 821D1820h */ case   24:  		/* lwz R11, <#[R3 + 12]> */
		/* 821D1820h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D1820h case   24:*/		return 0x821D1824;
		  /* 821D1824h */ case   25:  		/* rlwinm R10, R11, 0, 29, 29 */
		/* 821D1824h case   25:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R10,regs.R11);
		/* 821D1824h case   25:*/		return 0x821D1828;
		  /* 821D1828h */ case   26:  		/* cmplwi CR6, R10, 4 */
		/* 821D1828h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821D1828h case   26:*/		return 0x821D182C;
		  /* 821D182Ch */ case   27:  		/* bc 12, CR6_EQ, 12 */
		/* 821D182Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x821D1838;  }
		/* 821D182Ch case   27:*/		return 0x821D1830;
		  /* 821D1830h */ case   28:  		/* ori R11, R11, 4 */
		/* 821D1830h case   28:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D1830h case   28:*/		return 0x821D1834;
		  /* 821D1834h */ case   29:  		/* sth R11, <#[R3 + 14]> */
		/* 821D1834h case   29:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R3 + 0x0000000E) );
		/* 821D1834h case   29:*/		return 0x821D1838;
	}
	return 0x821D1838;
} // Block from 821D17C0h-821D1838h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D1838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1838);
		  /* 821D1838h */ case    0:  		/* li R8, 0 */
		/* 821D1838h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1838h case    0:*/		return 0x821D183C;
		  /* 821D183Ch */ case    1:  		/* li R7, 0 */
		/* 821D183Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D183Ch case    1:*/		return 0x821D1840;
		  /* 821D1840h */ case    2:  		/* mr R5, R18 */
		/* 821D1840h case    2:*/		regs.R5 = regs.R18;
		/* 821D1840h case    2:*/		return 0x821D1844;
		  /* 821D1844h */ case    3:  		/* lwz R9, <#[R31 + 652]> */
		/* 821D1844h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D1844h case    3:*/		return 0x821D1848;
		  /* 821D1848h */ case    4:  		/* mr R4, R29 */
		/* 821D1848h case    4:*/		regs.R4 = regs.R29;
		/* 821D1848h case    4:*/		return 0x821D184C;
		  /* 821D184Ch */ case    5:  		/* lwz R10, <#[R1 + 436]> */
		/* 821D184Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001B4) );
		/* 821D184Ch case    5:*/		return 0x821D1850;
		  /* 821D1850h */ case    6:  		/* mr R3, R31 */
		/* 821D1850h case    6:*/		regs.R3 = regs.R31;
		/* 821D1850h case    6:*/		return 0x821D1854;
		  /* 821D1854h */ case    7:  		/* bl -11172 */
		/* 821D1854h case    7:*/		regs.LR = 0x821D1858; return 0x821CECB0;
		/* 821D1854h case    7:*/		return 0x821D1858;
		  /* 821D1858h */ case    8:  		/* li R3, 1 */
		/* 821D1858h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821D1858h case    8:*/		return 0x821D185C;
		  /* 821D185Ch */ case    9:  		/* b 1440 */
		/* 821D185Ch case    9:*/		return 0x821D1DFC;
		/* 821D185Ch case    9:*/		return 0x821D1860;
	}
	return 0x821D1860;
} // Block from 821D1838h-821D1860h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D1860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1860);
		  /* 821D1860h */ case    0:  		/* mr R5, R20 */
		/* 821D1860h case    0:*/		regs.R5 = regs.R20;
		/* 821D1860h case    0:*/		return 0x821D1864;
		  /* 821D1864h */ case    1:  		/* mr R4, R21 */
		/* 821D1864h case    1:*/		regs.R4 = regs.R21;
		/* 821D1864h case    1:*/		return 0x821D1868;
		  /* 821D1868h */ case    2:  		/* mr R3, R28 */
		/* 821D1868h case    2:*/		regs.R3 = regs.R28;
		/* 821D1868h case    2:*/		return 0x821D186C;
		  /* 821D186Ch */ case    3:  		/* bl 327220 */
		/* 821D186Ch case    3:*/		regs.LR = 0x821D1870; return 0x822216A0;
		/* 821D186Ch case    3:*/		return 0x821D1870;
		  /* 821D1870h */ case    4:  		/* lis R11, -32256 */
		/* 821D1870h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D1870h case    4:*/		return 0x821D1874;
		  /* 821D1874h */ case    5:  		/* lfd FR0, <#[R11 + 1848]> */
		/* 821D1874h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000738) );
		/* 821D1874h case    5:*/		return 0x821D1878;
		  /* 821D1878h */ case    6:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D1878h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D1878h case    6:*/		return 0x821D187C;
		  /* 821D187Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 821D187Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1898;  }
		/* 821D187Ch case    7:*/		return 0x821D1880;
		  /* 821D1880h */ case    8:  		/* cmplwi CR6, R19, 0 */
		/* 821D1880h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D1880h case    8:*/		return 0x821D1884;
		  /* 821D1884h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821D1884h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D1898;  }
		/* 821D1884h case    9:*/		return 0x821D1888;
		  /* 821D1888h */ case   10:  		/* mr R8, R23 */
		/* 821D1888h case   10:*/		regs.R8 = regs.R23;
		/* 821D1888h case   10:*/		return 0x821D188C;
		  /* 821D188Ch */ case   11:  		/* mr R7, R26 */
		/* 821D188Ch case   11:*/		regs.R7 = regs.R26;
		/* 821D188Ch case   11:*/		return 0x821D1890;
		  /* 821D1890h */ case   12:  		/* mr R6, R30 */
		/* 821D1890h case   12:*/		regs.R6 = regs.R30;
		/* 821D1890h case   12:*/		return 0x821D1894;
		  /* 821D1894h */ case   13:  		/* b -84 */
		/* 821D1894h case   13:*/		return 0x821D1840;
		/* 821D1894h case   13:*/		return 0x821D1898;
	}
	return 0x821D1898;
} // Block from 821D1860h-821D1898h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D1898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1898);
		  /* 821D1898h */ case    0:  		/* lis R11, -32255 */
		/* 821D1898h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D1898h case    0:*/		return 0x821D189C;
		  /* 821D189Ch */ case    1:  		/* lfd FR0, <#[R11 - 24504]> */
		/* 821D189Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 821D189Ch case    1:*/		return 0x821D18A0;
		  /* 821D18A0h */ case    2:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D18A0h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D18A0h case    2:*/		return 0x821D18A4;
		  /* 821D18A4h */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 821D18A4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D18E4;  }
		/* 821D18A4h case    3:*/		return 0x821D18A8;
		  /* 821D18A8h */ case    4:  		/* cmplwi CR6, R19, 0 */
		/* 821D18A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D18A8h case    4:*/		return 0x821D18AC;
		  /* 821D18ACh */ case    5:  		/* bc 4, CR6_EQ, 620 */
		/* 821D18ACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D18ACh case    5:*/		return 0x821D18B0;
		  /* 821D18B0h */ case    6:  		/* mr R6, R23 */
		/* 821D18B0h case    6:*/		regs.R6 = regs.R23;
		/* 821D18B0h case    6:*/		return 0x821D18B4;
		  /* 821D18B4h */ case    7:  		/* mr R5, R26 */
		/* 821D18B4h case    7:*/		regs.R5 = regs.R26;
		/* 821D18B4h case    7:*/		return 0x821D18B8;
		  /* 821D18B8h */ case    8:  		/* mr R4, R30 */
		/* 821D18B8h case    8:*/		regs.R4 = regs.R30;
		/* 821D18B8h case    8:*/		return 0x821D18BC;
		  /* 821D18BCh */ case    9:  		/* mr R3, R31 */
		/* 821D18BCh case    9:*/		regs.R3 = regs.R31;
		/* 821D18BCh case    9:*/		return 0x821D18C0;
		  /* 821D18C0h */ case   10:  		/* bl -366424 */
		/* 821D18C0h case   10:*/		regs.LR = 0x821D18C4; return 0x82178168;
		/* 821D18C0h case   10:*/		return 0x821D18C4;
		  /* 821D18C4h */ case   11:  		/* mr R7, R3 */
		/* 821D18C4h case   11:*/		regs.R7 = regs.R3;
		/* 821D18C4h case   11:*/		return 0x821D18C8;
		  /* 821D18C8h */ case   12:  		/* mr R6, R3 */
		/* 821D18C8h case   12:*/		regs.R6 = regs.R3;
		/* 821D18C8h case   12:*/		return 0x821D18CC;
		  /* 821D18CCh */ case   13:  		/* mr R3, R31 */
		/* 821D18CCh case   13:*/		regs.R3 = regs.R31;
		/* 821D18CCh case   13:*/		return 0x821D18D0;
		  /* 821D18D0h */ case   14:  		/* li R4, 0 */
		/* 821D18D0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D18D0h case   14:*/		return 0x821D18D4;
		  /* 821D18D4h */ case   15:  		/* mr R5, R29 */
		/* 821D18D4h case   15:*/		regs.R5 = regs.R29;
		/* 821D18D4h case   15:*/		return 0x821D18D8;
		  /* 821D18D8h */ case   16:  		/* bl -211696 */
		/* 821D18D8h case   16:*/		regs.LR = 0x821D18DC; return 0x8219DDE8;
		/* 821D18D8h case   16:*/		return 0x821D18DC;
		  /* 821D18DCh */ case   17:  		/* mr R6, R3 */
		/* 821D18DCh case   17:*/		regs.R6 = regs.R3;
		/* 821D18DCh case   17:*/		return 0x821D18E0;
		  /* 821D18E0h */ case   18:  		/* b -168 */
		/* 821D18E0h case   18:*/		return 0x821D1838;
		/* 821D18E0h case   18:*/		return 0x821D18E4;
	}
	return 0x821D18E4;
} // Block from 821D1898h-821D18E4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D18E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D18E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D18E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D18E4);
		  /* 821D18E4h */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821D18E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D18E4h case    0:*/		return 0x821D18E8;
		  /* 821D18E8h */ case    1:  		/* bc 4, CR6_EQ, 560 */
		/* 821D18E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D18E8h case    1:*/		return 0x821D18EC;
		  /* 821D18ECh */ case    2:  		/* bl -1284276 */
		/* 821D18ECh case    2:*/		regs.LR = 0x821D18F0; return 0x82098038;
		/* 821D18ECh case    2:*/		return 0x821D18F0;
		  /* 821D18F0h */ case    3:  		/* cmpwi CR6, R3, 4 */
		/* 821D18F0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821D18F0h case    3:*/		return 0x821D18F4;
		  /* 821D18F4h */ case    4:  		/* bc 12, CR6_EQ, 68 */
		/* 821D18F4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D1938;  }
		/* 821D18F4h case    4:*/		return 0x821D18F8;
		  /* 821D18F8h */ case    5:  		/* cmpwi CR6, R3, 32 */
		/* 821D18F8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000020);
		/* 821D18F8h case    5:*/		return 0x821D18FC;
		  /* 821D18FCh */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821D18FCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821D192C;  }
		/* 821D18FCh case    6:*/		return 0x821D1900;
		  /* 821D1900h */ case    7:  		/* cmpwi CR6, R3, 64 */
		/* 821D1900h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000040);
		/* 821D1900h case    7:*/		return 0x821D1904;
		  /* 821D1904h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 821D1904h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D191C;  }
		/* 821D1904h case    8:*/		return 0x821D1908;
		  /* 821D1908h */ case    9:  		/* cmpwi CR6, R3, 512 */
		/* 821D1908h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 821D1908h case    9:*/		return 0x821D190C;
		  /* 821D190Ch */ case   10:  		/* bc 4, CR6_EQ, 148 */
		/* 821D190Ch case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D19A0;  }
		/* 821D190Ch case   10:*/		return 0x821D1910;
		  /* 821D1910h */ case   11:  		/* lis R11, 32640 */
		/* 821D1910h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 821D1910h case   11:*/		return 0x821D1914;
		  /* 821D1914h */ case   12:  		/* lis R10, -128 */
		/* 821D1914h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFF80);
		/* 821D1914h case   12:*/		return 0x821D1918;
		  /* 821D1918h */ case   13:  		/* b 40 */
		/* 821D1918h case   13:*/		return 0x821D1940;
		/* 821D1918h case   13:*/		return 0x821D191C;
	}
	return 0x821D191C;
} // Block from 821D18E4h-821D191Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D191Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D191C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D191C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D191C);
		  /* 821D191Ch */ case    0:  		/* lis R11, -32768 */
		/* 821D191Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821D191Ch case    0:*/		return 0x821D1920;
		  /* 821D1920h */ case    1:  		/* stfs FR31, <#[R1 + 120]> */
		/* 821D1920h case    1:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000078) );
		/* 821D1920h case    1:*/		return 0x821D1924;
		  /* 821D1924h */ case    2:  		/* stw R11, <#[R1 + 112]> */
		/* 821D1924h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821D1924h case    2:*/		return 0x821D1928;
		  /* 821D1928h */ case    3:  		/* b 32 */
		/* 821D1928h case    3:*/		return 0x821D1948;
		/* 821D1928h case    3:*/		return 0x821D192C;
	}
	return 0x821D192C;
} // Block from 821D191Ch-821D192Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D192Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D192C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D192C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D192C);
		  /* 821D192Ch */ case    0:  		/* stfs FR31, <#[R1 + 112]> */
		/* 821D192Ch case    0:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000070) );
		/* 821D192Ch case    0:*/		return 0x821D1930;
		  /* 821D1930h */ case    1:  		/* lis R11, -32768 */
		/* 821D1930h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821D1930h case    1:*/		return 0x821D1934;
		  /* 821D1934h */ case    2:  		/* b 16 */
		/* 821D1934h case    2:*/		return 0x821D1944;
		/* 821D1934h case    2:*/		return 0x821D1938;
	}
	return 0x821D1938;
} // Block from 821D192Ch-821D1938h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D1938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1938);
		  /* 821D1938h */ case    0:  		/* lis R11, -128 */
		/* 821D1938h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 821D1938h case    0:*/		return 0x821D193C;
		  /* 821D193Ch */ case    1:  		/* lis R10, 32640 */
		/* 821D193Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x7F80);
		/* 821D193Ch case    1:*/		return 0x821D1940;
	}
	return 0x821D1940;
} // Block from 821D1938h-821D1940h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D1940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1940);
		  /* 821D1940h */ case    0:  		/* stw R10, <#[R1 + 112]> */
		/* 821D1940h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821D1940h case    0:*/		return 0x821D1944;
	}
	return 0x821D1944;
} // Block from 821D1940h-821D1944h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1944);
		  /* 821D1944h */ case    0:  		/* stw R11, <#[R1 + 120]> */
		/* 821D1944h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821D1944h case    0:*/		return 0x821D1948;
	}
	return 0x821D1948;
} // Block from 821D1944h-821D1948h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1948);
		  /* 821D1948h */ case    0:  		/* lhz R11, <#[R30 + 14]> */
		/* 821D1948h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821D1948h case    0:*/		return 0x821D194C;
		  /* 821D194Ch */ case    1:  		/* rlwinm R10, R26, 2, 16, 29 */
		/* 821D194Ch case    1:*/		cpu::op::rlwinm<0,2,16,29>(regs,&regs.R10,regs.R26);
		/* 821D194Ch case    1:*/		return 0x821D1950;
		  /* 821D1950h */ case    2:  		/* mr R4, R23 */
		/* 821D1950h case    2:*/		regs.R4 = regs.R23;
		/* 821D1950h case    2:*/		return 0x821D1954;
		  /* 821D1954h */ case    3:  		/* srw R11, R11, R10 */
		/* 821D1954h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D1954h case    3:*/		return 0x821D1958;
		  /* 821D1958h */ case    4:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D1958h case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D1958h case    4:*/		return 0x821D195C;
		  /* 821D195Ch */ case    5:  		/* li R27, 2 */
		/* 821D195Ch case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x2);
		/* 821D195Ch case    5:*/		return 0x821D1960;
		  /* 821D1960h */ case    6:  		/* bl -223456 */
		/* 821D1960h case    6:*/		regs.LR = 0x821D1964; return 0x8219B080;
		/* 821D1960h case    6:*/		return 0x821D1964;
		  /* 821D1964h */ case    7:  		/* rlwinm. R11, R3, 0, 30, 30 */
		/* 821D1964h case    7:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R3);
		/* 821D1964h case    7:*/		return 0x821D1968;
		  /* 821D1968h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821D1968h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D1978;  }
		/* 821D1968h case    8:*/		return 0x821D196C;
		  /* 821D196Ch */ case    9:  		/* lfs FR1, <#[R1 + 112]> */
		/* 821D196Ch case    9:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000070) );
		/* 821D196Ch case    9:*/		return 0x821D1970;
		  /* 821D1970h */ case   10:  		/* li R27, 1 */
		/* 821D1970h case   10:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821D1970h case   10:*/		return 0x821D1974;
		  /* 821D1974h */ case   11:  		/* b 8 */
		/* 821D1974h case   11:*/		return 0x821D197C;
		/* 821D1974h case   11:*/		return 0x821D1978;
	}
	return 0x821D1978;
} // Block from 821D1948h-821D1978h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D1978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1978);
		  /* 821D1978h */ case    0:  		/* lfs FR1, <#[R1 + 120]> */
		/* 821D1978h case    0:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000078) );
		/* 821D1978h case    0:*/		return 0x821D197C;
	}
	return 0x821D197C;
} // Block from 821D1978h-821D197Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D197Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D197C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D197C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D197C);
		  /* 821D197Ch */ case    0:  		/* and. R11, R3, R27 */
		/* 821D197Ch case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R27);
		/* 821D197Ch case    0:*/		return 0x821D1980;
		  /* 821D1980h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 821D1980h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D19A0;  }
		/* 821D1980h case    1:*/		return 0x821D1984;
		  /* 821D1984h */ case    2:  		/* mr R3, R31 */
		/* 821D1984h case    2:*/		regs.R3 = regs.R31;
		/* 821D1984h case    2:*/		return 0x821D1988;
		  /* 821D1988h */ case    3:  		/* fmr FR3, FR31 */
		/* 821D1988h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821D1988h case    3:*/		return 0x821D198C;
		  /* 821D198Ch */ case    4:  		/* li R4, 1 */
		/* 821D198Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D198Ch case    4:*/		return 0x821D1990;
		  /* 821D1990h */ case    5:  		/* fmr FR4, FR31 */
		/* 821D1990h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821D1990h case    5:*/		return 0x821D1994;
		  /* 821D1994h */ case    6:  		/* fmr FR2, FR31 */
		/* 821D1994h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821D1994h case    6:*/		return 0x821D1998;
		  /* 821D1998h */ case    7:  		/* bl 364992 */
		/* 821D1998h case    7:*/		regs.LR = 0x821D199C; return 0x8222AB58;
		/* 821D1998h case    7:*/		return 0x821D199C;
		  /* 821D199Ch */ case    8:  		/* b -192 */
		/* 821D199Ch case    8:*/		return 0x821D18DC;
		/* 821D199Ch case    8:*/		return 0x821D19A0;
	}
	return 0x821D19A0;
} // Block from 821D197Ch-821D19A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D19A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D19A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D19A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D19A0);
		  /* 821D19A0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821D19A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821D19A0h case    0:*/		return 0x821D19A4;
		  /* 821D19A4h */ case    1:  		/* bc 4, CR6_EQ, 372 */
		/* 821D19A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D19A4h case    1:*/		return 0x821D19A8;
		  /* 821D19A8h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D19A8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D19A8h case    2:*/		return 0x821D19AC;
		  /* 821D19ACh */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D19ACh case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D19ACh case    3:*/		return 0x821D19B0;
		  /* 821D19B0h */ case    4:  		/* cmplwi CR6, R11, 128 */
		/* 821D19B0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821D19B0h case    4:*/		return 0x821D19B4;
		  /* 821D19B4h */ case    5:  		/* bc 4, CR6_EQ, 356 */
		/* 821D19B4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D19B4h case    5:*/		return 0x821D19B8;
		  /* 821D19B8h */ case    6:  		/* li R10, 0 */
		/* 821D19B8h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D19B8h case    6:*/		return 0x821D19BC;
		  /* 821D19BCh */ case    7:  		/* lwz R3, <#[R30 + 48]> */
		/* 821D19BCh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821D19BCh case    7:*/		return 0x821D19C0;
		  /* 821D19C0h */ case    8:  		/* mr R9, R29 */
		/* 821D19C0h case    8:*/		regs.R9 = regs.R29;
		/* 821D19C0h case    8:*/		return 0x821D19C4;
		  /* 821D19C4h */ case    9:  		/* li R8, 0 */
		/* 821D19C4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D19C4h case    9:*/		return 0x821D19C8;
		  /* 821D19C8h */ case   10:  		/* addi R7, R1, 160 */
		/* 821D19C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 821D19C8h case   10:*/		return 0x821D19CC;
		  /* 821D19CCh */ case   11:  		/* addi R6, R1, 128 */
		/* 821D19CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 821D19CCh case   11:*/		return 0x821D19D0;
		  /* 821D19D0h */ case   12:  		/* addi R5, R1, 132 */
		/* 821D19D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x84);
		/* 821D19D0h case   12:*/		return 0x821D19D4;
		  /* 821D19D4h */ case   13:  		/* mr R4, R26 */
		/* 821D19D4h case   13:*/		regs.R4 = regs.R26;
		/* 821D19D4h case   13:*/		return 0x821D19D8;
		  /* 821D19D8h */ case   14:  		/* bl 334584 */
		/* 821D19D8h case   14:*/		regs.LR = 0x821D19DC; return 0x822234D0;
		/* 821D19D8h case   14:*/		return 0x821D19DC;
		  /* 821D19DCh */ case   15:  		/* lwz R3, <#[R1 + 132]> */
		/* 821D19DCh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 821D19DCh case   15:*/		return 0x821D19E0;
		  /* 821D19E0h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D19E0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D19E0h case   16:*/		return 0x821D19E4;
		  /* 821D19E4h */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D19E4h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D19E4h case   17:*/		return 0x821D19E8;
		  /* 821D19E8h */ case   18:  		/* cmplwi CR6, R11, 16000 */
		/* 821D19E8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D19E8h case   18:*/		return 0x821D19EC;
		  /* 821D19ECh */ case   19:  		/* bc 4, CR6_EQ, 300 */
		/* 821D19ECh case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D1B18;  }
		/* 821D19ECh case   19:*/		return 0x821D19F0;
		  /* 821D19F0h */ case   20:  		/* lwz R5, <#[R1 + 160]> */
		/* 821D19F0h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D19F0h case   20:*/		return 0x821D19F4;
		  /* 821D19F4h */ case   21:  		/* lwz R4, <#[R1 + 128]> */
		/* 821D19F4h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 821D19F4h case   21:*/		return 0x821D19F8;
		  /* 821D19F8h */ case   22:  		/* bl 326824 */
		/* 821D19F8h case   22:*/		regs.LR = 0x821D19FC; return 0x822216A0;
		/* 821D19F8h case   22:*/		return 0x821D19FC;
		  /* 821D19FCh */ case   23:  		/* mr R5, R20 */
		/* 821D19FCh case   23:*/		regs.R5 = regs.R20;
		/* 821D19FCh case   23:*/		return 0x821D1A00;
		  /* 821D1A00h */ case   24:  		/* fmr FR30, FR1 */
		/* 821D1A00h case   24:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 821D1A00h case   24:*/		return 0x821D1A04;
		  /* 821D1A04h */ case   25:  		/* mr R4, R21 */
		/* 821D1A04h case   25:*/		regs.R4 = regs.R21;
		/* 821D1A04h case   25:*/		return 0x821D1A08;
		  /* 821D1A08h */ case   26:  		/* mr R3, R28 */
		/* 821D1A08h case   26:*/		regs.R3 = regs.R28;
		/* 821D1A08h case   26:*/		return 0x821D1A0C;
		  /* 821D1A0Ch */ case   27:  		/* bl 326804 */
		/* 821D1A0Ch case   27:*/		regs.LR = 0x821D1A10; return 0x822216A0;
		/* 821D1A0Ch case   27:*/		return 0x821D1A10;
		  /* 821D1A10h */ case   28:  		/* mr R4, R21 */
		/* 821D1A10h case   28:*/		regs.R4 = regs.R21;
		/* 821D1A10h case   28:*/		return 0x821D1A14;
		  /* 821D1A14h */ case   29:  		/* mr R3, R28 */
		/* 821D1A14h case   29:*/		regs.R3 = regs.R28;
		/* 821D1A14h case   29:*/		return 0x821D1A18;
		  /* 821D1A18h */ case   30:  		/* fmr FR31, FR1 */
		/* 821D1A18h case   30:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D1A18h case   30:*/		return 0x821D1A1C;
		  /* 821D1A1Ch */ case   31:  		/* bl -82668 */
		/* 821D1A1Ch case   31:*/		regs.LR = 0x821D1A20; return 0x821BD730;
		/* 821D1A1Ch case   31:*/		return 0x821D1A20;
		  /* 821D1A20h */ case   32:  		/* mr R5, R3 */
		/* 821D1A20h case   32:*/		regs.R5 = regs.R3;
		/* 821D1A20h case   32:*/		return 0x821D1A24;
		  /* 821D1A24h */ case   33:  		/* mr R3, R31 */
		/* 821D1A24h case   33:*/		regs.R3 = regs.R31;
		/* 821D1A24h case   33:*/		return 0x821D1A28;
		  /* 821D1A28h */ case   34:  		/* bl 364920 */
		/* 821D1A28h case   34:*/		regs.LR = 0x821D1A2C; return 0x8222ABA0;
		/* 821D1A28h case   34:*/		return 0x821D1A2C;
		  /* 821D1A2Ch */ case   35:  		/* mr R27, R3 */
		/* 821D1A2Ch case   35:*/		regs.R27 = regs.R3;
		/* 821D1A2Ch case   35:*/		return 0x821D1A30;
		  /* 821D1A30h */ case   36:  		/* lwz R4, <#[R1 + 128]> */
		/* 821D1A30h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 821D1A30h case   36:*/		return 0x821D1A34;
		  /* 821D1A34h */ case   37:  		/* lwz R3, <#[R1 + 132]> */
		/* 821D1A34h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 821D1A34h case   37:*/		return 0x821D1A38;
		  /* 821D1A38h */ case   38:  		/* bl -82696 */
		/* 821D1A38h case   38:*/		regs.LR = 0x821D1A3C; return 0x821BD730;
		/* 821D1A38h case   38:*/		return 0x821D1A3C;
		  /* 821D1A3Ch */ case   39:  		/* or. R8, R3, R3 */
		/* 821D1A3Ch case   39:*/		cpu::op::or<1>(regs,&regs.R8,regs.R3,regs.R3);
		/* 821D1A3Ch case   39:*/		return 0x821D1A40;
		  /* 821D1A40h */ case   40:  		/* bc 12, CR0_EQ, 28 */
		/* 821D1A40h case   40:*/		if ( regs.CR[0].eq ) { return 0x821D1A5C;  }
		/* 821D1A40h case   40:*/		return 0x821D1A44;
		  /* 821D1A44h */ case   41:  		/* mr R4, R21 */
		/* 821D1A44h case   41:*/		regs.R4 = regs.R21;
		/* 821D1A44h case   41:*/		return 0x821D1A48;
		  /* 821D1A48h */ case   42:  		/* mr R3, R28 */
		/* 821D1A48h case   42:*/		regs.R3 = regs.R28;
		/* 821D1A48h case   42:*/		return 0x821D1A4C;
		  /* 821D1A4Ch */ case   43:  		/* bl -82716 */
		/* 821D1A4Ch case   43:*/		regs.LR = 0x821D1A50; return 0x821BD730;
		/* 821D1A4Ch case   43:*/		return 0x821D1A50;
		  /* 821D1A50h */ case   44:  		/* cmpwi CR0, R3, 0 */
		/* 821D1A50h case   44:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821D1A50h case   44:*/		return 0x821D1A54;
		  /* 821D1A54h */ case   45:  		/* mr R28, R8 */
		/* 821D1A54h case   45:*/		regs.R28 = regs.R8;
		/* 821D1A54h case   45:*/		return 0x821D1A58;
		  /* 821D1A58h */ case   46:  		/* bc 4, CR0_EQ, 8 */
		/* 821D1A58h case   46:*/		if ( !regs.CR[0].eq ) { return 0x821D1A60;  }
		/* 821D1A58h case   46:*/		return 0x821D1A5C;
	}
	return 0x821D1A5C;
} // Block from 821D19A0h-821D1A5Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 821D1A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1A5C);
		  /* 821D1A5Ch */ case    0:  		/* li R28, 0 */
		/* 821D1A5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D1A5Ch case    0:*/		return 0x821D1A60;
	}
	return 0x821D1A60;
} // Block from 821D1A5Ch-821D1A60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1A60);
		  /* 821D1A60h */ case    0:  		/* lis R11, -32256 */
		/* 821D1A60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D1A60h case    0:*/		return 0x821D1A64;
		  /* 821D1A64h */ case    1:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 821D1A64h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 821D1A64h case    1:*/		return 0x821D1A68;
		  /* 821D1A68h */ case    2:  		/* fcmpu CR6, FR30, FR0 */
		/* 821D1A68h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR0);
		/* 821D1A68h case    2:*/		return 0x821D1A6C;
		  /* 821D1A6Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821D1A6Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821D1A84;  }
		/* 821D1A6Ch case    3:*/		return 0x821D1A70;
		  /* 821D1A70h */ case    4:  		/* fcmpu CR6, FR31, FR0 */
		/* 821D1A70h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821D1A70h case    4:*/		return 0x821D1A74;
		  /* 821D1A74h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D1A74h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D1A84;  }
		/* 821D1A74h case    5:*/		return 0x821D1A78;
		  /* 821D1A78h */ case    6:  		/* fmul FR1, FR31, FR30 */
		/* 821D1A78h case    6:*/		cpu::op::fmul<0>(regs,&regs.FR1,regs.FR31,regs.FR30);
		/* 821D1A78h case    6:*/		return 0x821D1A7C;
		  /* 821D1A7Ch */ case    7:  		/* bl -84972 */
		/* 821D1A7Ch case    7:*/		regs.LR = 0x821D1A80; return 0x821BCE90;
		/* 821D1A7Ch case    7:*/		return 0x821D1A80;
		  /* 821D1A80h */ case    8:  		/* b 8 */
		/* 821D1A80h case    8:*/		return 0x821D1A88;
		/* 821D1A80h case    8:*/		return 0x821D1A84;
	}
	return 0x821D1A84;
} // Block from 821D1A60h-821D1A84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D1A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1A84);
		  /* 821D1A84h */ case    0:  		/* fmr FR1, FR0 */
		/* 821D1A84h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D1A84h case    0:*/		return 0x821D1A88;
	}
	return 0x821D1A88;
} // Block from 821D1A84h-821D1A88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1A88);
		  /* 821D1A88h */ case    0:  		/* mr R5, R28 */
		/* 821D1A88h case    0:*/		regs.R5 = regs.R28;
		/* 821D1A88h case    0:*/		return 0x821D1A8C;
		  /* 821D1A8Ch */ case    1:  		/* mr R3, R31 */
		/* 821D1A8Ch case    1:*/		regs.R3 = regs.R31;
		/* 821D1A8Ch case    1:*/		return 0x821D1A90;
		  /* 821D1A90h */ case    2:  		/* bl 364816 */
		/* 821D1A90h case    2:*/		regs.LR = 0x821D1A94; return 0x8222ABA0;
		/* 821D1A90h case    2:*/		return 0x821D1A94;
		  /* 821D1A94h */ case    3:  		/* mr R28, R3 */
		/* 821D1A94h case    3:*/		regs.R28 = regs.R3;
		/* 821D1A94h case    3:*/		return 0x821D1A98;
		  /* 821D1A98h */ case    4:  		/* li R5, 0 */
		/* 821D1A98h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D1A98h case    4:*/		return 0x821D1A9C;
		  /* 821D1A9Ch */ case    5:  		/* lwz R30, <#[R30 + 44]> */
		/* 821D1A9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D1A9Ch case    5:*/		return 0x821D1AA0;
		  /* 821D1AA0h */ case    6:  		/* mr R4, R27 */
		/* 821D1AA0h case    6:*/		regs.R4 = regs.R27;
		/* 821D1AA0h case    6:*/		return 0x821D1AA4;
		  /* 821D1AA4h */ case    7:  		/* mr R3, R31 */
		/* 821D1AA4h case    7:*/		regs.R3 = regs.R31;
		/* 821D1AA4h case    7:*/		return 0x821D1AA8;
		  /* 821D1AA8h */ case    8:  		/* bl -367000 */
		/* 821D1AA8h case    8:*/		regs.LR = 0x821D1AAC; return 0x82178110;
		/* 821D1AA8h case    8:*/		return 0x821D1AAC;
		  /* 821D1AACh */ case    9:  		/* mr R27, R3 */
		/* 821D1AACh case    9:*/		regs.R27 = regs.R3;
		/* 821D1AACh case    9:*/		return 0x821D1AB0;
		  /* 821D1AB0h */ case   10:  		/* mr R5, R26 */
		/* 821D1AB0h case   10:*/		regs.R5 = regs.R26;
		/* 821D1AB0h case   10:*/		return 0x821D1AB4;
		  /* 821D1AB4h */ case   11:  		/* mr R4, R30 */
		/* 821D1AB4h case   11:*/		regs.R4 = regs.R30;
		/* 821D1AB4h case   11:*/		return 0x821D1AB8;
		  /* 821D1AB8h */ case   12:  		/* mr R3, R31 */
		/* 821D1AB8h case   12:*/		regs.R3 = regs.R31;
		/* 821D1AB8h case   12:*/		return 0x821D1ABC;
		  /* 821D1ABCh */ case   13:  		/* bl 114372 */
		/* 821D1ABCh case   13:*/		regs.LR = 0x821D1AC0; return 0x821ED980;
		/* 821D1ABCh case   13:*/		return 0x821D1AC0;
		  /* 821D1AC0h */ case   14:  		/* mr R6, R3 */
		/* 821D1AC0h case   14:*/		regs.R6 = regs.R3;
		/* 821D1AC0h case   14:*/		return 0x821D1AC4;
		  /* 821D1AC4h */ case   15:  		/* mr R5, R29 */
		/* 821D1AC4h case   15:*/		regs.R5 = regs.R29;
		/* 821D1AC4h case   15:*/		return 0x821D1AC8;
		  /* 821D1AC8h */ case   16:  		/* li R4, 0 */
		/* 821D1AC8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D1AC8h case   16:*/		return 0x821D1ACC;
		  /* 821D1ACCh */ case   17:  		/* mr R3, R31 */
		/* 821D1ACCh case   17:*/		regs.R3 = regs.R31;
		/* 821D1ACCh case   17:*/		return 0x821D1AD0;
		  /* 821D1AD0h */ case   18:  		/* mr R7, R27 */
		/* 821D1AD0h case   18:*/		regs.R7 = regs.R27;
		/* 821D1AD0h case   18:*/		return 0x821D1AD4;
		  /* 821D1AD4h */ case   19:  		/* bl -68036 */
		/* 821D1AD4h case   19:*/		regs.LR = 0x821D1AD8; return 0x821C1110;
		/* 821D1AD4h case   19:*/		return 0x821D1AD8;
		  /* 821D1AD8h */ case   20:  		/* mr R30, R3 */
		/* 821D1AD8h case   20:*/		regs.R30 = regs.R3;
		/* 821D1AD8h case   20:*/		return 0x821D1ADC;
		  /* 821D1ADCh */ case   21:  		/* mr R3, R31 */
		/* 821D1ADCh case   21:*/		regs.R3 = regs.R31;
		/* 821D1ADCh case   21:*/		return 0x821D1AE0;
		  /* 821D1AE0h */ case   22:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D1AE0h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D1AE0h case   22:*/		return 0x821D1AE4;
		  /* 821D1AE4h */ case   23:  		/* mr R4, R30 */
		/* 821D1AE4h case   23:*/		regs.R4 = regs.R30;
		/* 821D1AE4h case   23:*/		return 0x821D1AE8;
		  /* 821D1AE8h */ case   24:  		/* bl -24864 */
		/* 821D1AE8h case   24:*/		regs.LR = 0x821D1AEC; return 0x821CB9C8;
		/* 821D1AE8h case   24:*/		return 0x821D1AEC;
		  /* 821D1AECh */ case   25:  		/* li R5, 0 */
		/* 821D1AECh case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D1AECh case   25:*/		return 0x821D1AF0;
		  /* 821D1AF0h */ case   26:  		/* mr R4, R28 */
		/* 821D1AF0h case   26:*/		regs.R4 = regs.R28;
		/* 821D1AF0h case   26:*/		return 0x821D1AF4;
		  /* 821D1AF4h */ case   27:  		/* mr R3, R31 */
		/* 821D1AF4h case   27:*/		regs.R3 = regs.R31;
		/* 821D1AF4h case   27:*/		return 0x821D1AF8;
		  /* 821D1AF8h */ case   28:  		/* bl -367080 */
		/* 821D1AF8h case   28:*/		regs.LR = 0x821D1AFC; return 0x82178110;
		/* 821D1AF8h case   28:*/		return 0x821D1AFC;
		  /* 821D1AFCh */ case   29:  		/* mr R28, R3 */
		/* 821D1AFCh case   29:*/		regs.R28 = regs.R3;
		/* 821D1AFCh case   29:*/		return 0x821D1B00;
		  /* 821D1B00h */ case   30:  		/* li R5, 0 */
		/* 821D1B00h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D1B00h case   30:*/		return 0x821D1B04;
		  /* 821D1B04h */ case   31:  		/* mr R4, R30 */
		/* 821D1B04h case   31:*/		regs.R4 = regs.R30;
		/* 821D1B04h case   31:*/		return 0x821D1B08;
		  /* 821D1B08h */ case   32:  		/* mr R3, R31 */
		/* 821D1B08h case   32:*/		regs.R3 = regs.R31;
		/* 821D1B08h case   32:*/		return 0x821D1B0C;
		  /* 821D1B0Ch */ case   33:  		/* bl -367100 */
		/* 821D1B0Ch case   33:*/		regs.LR = 0x821D1B10; return 0x82178110;
		/* 821D1B0Ch case   33:*/		return 0x821D1B10;
		  /* 821D1B10h */ case   34:  		/* mr R7, R28 */
		/* 821D1B10h case   34:*/		regs.R7 = regs.R28;
		/* 821D1B10h case   34:*/		return 0x821D1B14;
		  /* 821D1B14h */ case   35:  		/* b -588 */
		/* 821D1B14h case   35:*/		return 0x821D18C8;
		/* 821D1B14h case   35:*/		return 0x821D1B18;
	}
	return 0x821D1B18;
} // Block from 821D1A88h-821D1B18h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D1B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1B18);
		  /* 821D1B18h */ case    0:  		/* cmplw CR6, R30, R28 */
		/* 821D1B18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 821D1B18h case    0:*/		return 0x821D1B1C;
		  /* 821D1B1Ch */ case    1:  		/* bc 4, CR6_EQ, 224 */
		/* 821D1B1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1B1Ch case    1:*/		return 0x821D1B20;
		  /* 821D1B20h */ case    2:  		/* cmpw CR6, R26, R21 */
		/* 821D1B20h case    2:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R21);
		/* 821D1B20h case    2:*/		return 0x821D1B24;
		  /* 821D1B24h */ case    3:  		/* bc 4, CR6_EQ, 216 */
		/* 821D1B24h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1B24h case    3:*/		return 0x821D1B28;
		  /* 821D1B28h */ case    4:  		/* cmplw CR6, R23, R20 */
		/* 821D1B28h case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R20);
		/* 821D1B28h case    4:*/		return 0x821D1B2C;
		  /* 821D1B2Ch */ case    5:  		/* bc 4, CR6_EQ, 208 */
		/* 821D1B2Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1B2Ch case    5:*/		return 0x821D1B30;
		  /* 821D1B30h */ case    6:  		/* cmplwi CR6, R23, 0 */
		/* 821D1B30h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821D1B30h case    6:*/		return 0x821D1B34;
		  /* 821D1B34h */ case    7:  		/* bc 4, CR6_EQ, 120 */
		/* 821D1B34h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1BAC;  }
		/* 821D1B34h case    7:*/		return 0x821D1B38;
		  /* 821D1B38h */ case    8:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D1B38h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1B38h case    8:*/		return 0x821D1B3C;
		  /* 821D1B3Ch */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D1B3Ch case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D1B3Ch case    9:*/		return 0x821D1B40;
		  /* 821D1B40h */ case   10:  		/* cmplwi CR6, R11, 9216 */
		/* 821D1B40h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002400);
		/* 821D1B40h case   10:*/		return 0x821D1B44;
		  /* 821D1B44h */ case   11:  		/* bc 4, CR6_EQ, 104 */
		/* 821D1B44h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D1BAC;  }
		/* 821D1B44h case   11:*/		return 0x821D1B48;
		  /* 821D1B48h */ case   12:  		/* lwz R11, <#[R30 + 44]> */
		/* 821D1B48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D1B48h case   12:*/		return 0x821D1B4C;
		  /* 821D1B4Ch */ case   13:  		/* cmplwi CR6, R19, 0 */
		/* 821D1B4Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D1B4Ch case   13:*/		return 0x821D1B50;
		  /* 821D1B50h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 821D1B50h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D1B68;  }
		/* 821D1B50h case   14:*/		return 0x821D1B54;
		  /* 821D1B54h */ case   15:  		/* lwz R7, <#[R11]> */
		/* 821D1B54h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1B54h case   15:*/		return 0x821D1B58;
		  /* 821D1B58h */ case   16:  		/* lwz R6, <#[R11 + 12]> */
		/* 821D1B58h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D1B58h case   16:*/		return 0x821D1B5C;
		  /* 821D1B5Ch */ case   17:  		/* rlwinm R8, R7, 0, 27, 31 */
		/* 821D1B5Ch case   17:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R7);
		/* 821D1B5Ch case   17:*/		return 0x821D1B60;
		  /* 821D1B60h */ case   18:  		/* rlwinm R7, R7, 27, 30, 31 */
		/* 821D1B60h case   18:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R7,regs.R7);
		/* 821D1B60h case   18:*/		return 0x821D1B64;
		  /* 821D1B64h */ case   19:  		/* b -804 */
		/* 821D1B64h case   19:*/		return 0x821D1840;
		/* 821D1B64h case   19:*/		return 0x821D1B68;
	}
	return 0x821D1B68;
} // Block from 821D1B18h-821D1B68h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D1B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1B68);
		  /* 821D1B68h */ case    0:  		/* mr R5, R26 */
		/* 821D1B68h case    0:*/		regs.R5 = regs.R26;
		/* 821D1B68h case    0:*/		return 0x821D1B6C;
		  /* 821D1B6Ch */ case    1:  		/* mr R4, R11 */
		/* 821D1B6Ch case    1:*/		regs.R4 = regs.R11;
		/* 821D1B6Ch case    1:*/		return 0x821D1B70;
		  /* 821D1B70h */ case    2:  		/* mr R3, R31 */
		/* 821D1B70h case    2:*/		regs.R3 = regs.R31;
		/* 821D1B70h case    2:*/		return 0x821D1B74;
		  /* 821D1B74h */ case    3:  		/* bl 114188 */
		/* 821D1B74h case    3:*/		regs.LR = 0x821D1B78; return 0x821ED980;
		/* 821D1B74h case    3:*/		return 0x821D1B78;
		  /* 821D1B78h */ case    4:  		/* mr R30, R3 */
		/* 821D1B78h case    4:*/		regs.R30 = regs.R3;
		/* 821D1B78h case    4:*/		return 0x821D1B7C;
		  /* 821D1B7Ch */ case    5:  		/* mr R3, R31 */
		/* 821D1B7Ch case    5:*/		regs.R3 = regs.R31;
		/* 821D1B7Ch case    5:*/		return 0x821D1B80;
		  /* 821D1B80h */ case    6:  		/* lwz R6, <#[R19 + 8]> */
		/* 821D1B80h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R19 + 0x00000008) );
		/* 821D1B80h case    6:*/		return 0x821D1B84;
		  /* 821D1B84h */ case    7:  		/* lwz R5, <#[R19 + 4]> */
		/* 821D1B84h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x00000004) );
		/* 821D1B84h case    7:*/		return 0x821D1B88;
		  /* 821D1B88h */ case    8:  		/* lwz R4, <#[R19]> */
		/* 821D1B88h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + 0x00000000) );
		/* 821D1B88h case    8:*/		return 0x821D1B8C;
		  /* 821D1B8Ch */ case    9:  		/* bl -367140 */
		/* 821D1B8Ch case    9:*/		regs.LR = 0x821D1B90; return 0x82178168;
		/* 821D1B8Ch case    9:*/		return 0x821D1B90;
		  /* 821D1B90h */ case   10:  		/* mr R7, R3 */
		/* 821D1B90h case   10:*/		regs.R7 = regs.R3;
		/* 821D1B90h case   10:*/		return 0x821D1B94;
		  /* 821D1B94h */ case   11:  		/* mr R6, R30 */
		/* 821D1B94h case   11:*/		regs.R6 = regs.R30;
		/* 821D1B94h case   11:*/		return 0x821D1B98;
		  /* 821D1B98h */ case   12:  		/* mr R5, R29 */
		/* 821D1B98h case   12:*/		regs.R5 = regs.R29;
		/* 821D1B98h case   12:*/		return 0x821D1B9C;
		  /* 821D1B9Ch */ case   13:  		/* li R4, 0 */
		/* 821D1B9Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D1B9Ch case   13:*/		return 0x821D1BA0;
		  /* 821D1BA0h */ case   14:  		/* mr R3, R31 */
		/* 821D1BA0h case   14:*/		regs.R3 = regs.R31;
		/* 821D1BA0h case   14:*/		return 0x821D1BA4;
		  /* 821D1BA4h */ case   15:  		/* bl -68244 */
		/* 821D1BA4h case   15:*/		regs.LR = 0x821D1BA8; return 0x821C1110;
		/* 821D1BA4h case   15:*/		return 0x821D1BA8;
		  /* 821D1BA8h */ case   16:  		/* b -716 */
		/* 821D1BA8h case   16:*/		return 0x821D18DC;
		/* 821D1BA8h case   16:*/		return 0x821D1BAC;
	}
	return 0x821D1BAC;
} // Block from 821D1B68h-821D1BACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D1BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1BAC);
		  /* 821D1BACh */ case    0:  		/* cmplw CR6, R23, R20 */
		/* 821D1BACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R20);
		/* 821D1BACh case    0:*/		return 0x821D1BB0;
		  /* 821D1BB0h */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 821D1BB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1BB0h case    1:*/		return 0x821D1BB4;
		  /* 821D1BB4h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 821D1BB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821D1BB4h case    2:*/		return 0x821D1BB8;
		  /* 821D1BB8h */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 821D1BB8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1BB8h case    3:*/		return 0x821D1BBC;
		  /* 821D1BBCh */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D1BBCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1BBCh case    4:*/		return 0x821D1BC0;
		  /* 821D1BC0h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D1BC0h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D1BC0h case    5:*/		return 0x821D1BC4;
		  /* 821D1BC4h */ case    6:  		/* cmplwi CR6, R11, 6912 */
		/* 821D1BC4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001B00);
		/* 821D1BC4h case    6:*/		return 0x821D1BC8;
		  /* 821D1BC8h */ case    7:  		/* bc 4, CR6_EQ, 52 */
		/* 821D1BC8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1BC8h case    7:*/		return 0x821D1BCC;
		  /* 821D1BCCh */ case    8:  		/* lwz R4, <#[R30 + 44]> */
		/* 821D1BCCh case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D1BCCh case    8:*/		return 0x821D1BD0;
		  /* 821D1BD0h */ case    9:  		/* cmplwi CR6, R19, 0 */
		/* 821D1BD0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D1BD0h case    9:*/		return 0x821D1BD4;
		  /* 821D1BD4h */ case   10:  		/* bc 4, CR6_EQ, 40 */
		/* 821D1BD4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D1BFC;  }
		/* 821D1BD4h case   10:*/		return 0x821D1BD8;
		  /* 821D1BD8h */ case   11:  		/* mr R3, R31 */
		/* 821D1BD8h case   11:*/		regs.R3 = regs.R31;
		/* 821D1BD8h case   11:*/		return 0x821D1BDC;
		  /* 821D1BDCh */ case   12:  		/* lwz R5, <#[R4 + 12]> */
		/* 821D1BDCh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821D1BDCh case   12:*/		return 0x821D1BE0;
		  /* 821D1BE0h */ case   13:  		/* bl -396016 */
		/* 821D1BE0h case   13:*/		regs.LR = 0x821D1BE4; return 0x821710F0;
		/* 821D1BE0h case   13:*/		return 0x821D1BE4;
		  /* 821D1BE4h */ case   14:  		/* mr R6, R3 */
		/* 821D1BE4h case   14:*/		regs.R6 = regs.R3;
		/* 821D1BE4h case   14:*/		return 0x821D1BE8;
		  /* 821D1BE8h */ case   15:  		/* mr R5, R29 */
		/* 821D1BE8h case   15:*/		regs.R5 = regs.R29;
		/* 821D1BE8h case   15:*/		return 0x821D1BEC;
		  /* 821D1BECh */ case   16:  		/* li R4, 0 */
		/* 821D1BECh case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D1BECh case   16:*/		return 0x821D1BF0;
		  /* 821D1BF0h */ case   17:  		/* mr R3, R31 */
		/* 821D1BF0h case   17:*/		regs.R3 = regs.R31;
		/* 821D1BF0h case   17:*/		return 0x821D1BF4;
		  /* 821D1BF4h */ case   18:  		/* bl -66492 */
		/* 821D1BF4h case   18:*/		regs.LR = 0x821D1BF8; return 0x821C1838;
		/* 821D1BF4h case   18:*/		return 0x821D1BF8;
		  /* 821D1BF8h */ case   19:  		/* b -796 */
		/* 821D1BF8h case   19:*/		return 0x821D18DC;
		/* 821D1BF8h case   19:*/		return 0x821D1BFC;
	}
	return 0x821D1BFC;
} // Block from 821D1BACh-821D1BFCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D1BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1BFC);
		  /* 821D1BFCh */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D1BFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1BFCh case    0:*/		return 0x821D1C00;
		  /* 821D1C00h */ case    1:  		/* li R22, 0 */
		/* 821D1C00h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821D1C00h case    1:*/		return 0x821D1C04;
		  /* 821D1C04h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D1C04h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D1C04h case    2:*/		return 0x821D1C08;
		  /* 821D1C08h */ case    3:  		/* cmplwi CR6, R11, 6528 */
		/* 821D1C08h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001980);
		/* 821D1C08h case    3:*/		return 0x821D1C0C;
		  /* 821D1C0Ch */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 821D1C0Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1C0Ch case    4:*/		return 0x821D1C10;
		  /* 821D1C10h */ case    5:  		/* cmplwi CR6, R23, 0 */
		/* 821D1C10h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821D1C10h case    5:*/		return 0x821D1C14;
		  /* 821D1C14h */ case    6:  		/* bc 4, CR6_EQ, 24 */
		/* 821D1C14h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1C14h case    6:*/		return 0x821D1C18;
		  /* 821D1C18h */ case    7:  		/* mr R11, R30 */
		/* 821D1C18h case    7:*/		regs.R11 = regs.R30;
		/* 821D1C18h case    7:*/		return 0x821D1C1C;
		  /* 821D1C1Ch */ case    8:  		/* mr R27, R28 */
		/* 821D1C1Ch case    8:*/		regs.R27 = regs.R28;
		/* 821D1C1Ch case    8:*/		return 0x821D1C20;
		  /* 821D1C20h */ case    9:  		/* mr R25, R21 */
		/* 821D1C20h case    9:*/		regs.R25 = regs.R21;
		/* 821D1C20h case    9:*/		return 0x821D1C24;
		  /* 821D1C24h */ case   10:  		/* mr R24, R20 */
		/* 821D1C24h case   10:*/		regs.R24 = regs.R20;
		/* 821D1C24h case   10:*/		return 0x821D1C28;
		  /* 821D1C28h */ case   11:  		/* b 56 */
		/* 821D1C28h case   11:*/		return 0x821D1C60;
		/* 821D1C28h case   11:*/		return 0x821D1C2C;
	}
	return 0x821D1C2C;
} // Block from 821D1BFCh-821D1C2Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D1C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1C2C);
		  /* 821D1C2Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821D1C2Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821D1C2Ch case    0:*/		return 0x821D1C30;
		  /* 821D1C30h */ case    1:  		/* bc 4, CR0_EQ, 140 */
		/* 821D1C30h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D1CBC;  }
		/* 821D1C30h case    1:*/		return 0x821D1C34;
		  /* 821D1C34h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821D1C34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821D1C34h case    2:*/		return 0x821D1C38;
		  /* 821D1C38h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D1C38h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D1C38h case    3:*/		return 0x821D1C3C;
		  /* 821D1C3Ch */ case    4:  		/* cmplwi CR6, R11, 6528 */
		/* 821D1C3Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001980);
		/* 821D1C3Ch case    4:*/		return 0x821D1C40;
		  /* 821D1C40h */ case    5:  		/* bc 4, CR6_EQ, 124 */
		/* 821D1C40h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D1CBC;  }
		/* 821D1C40h case    5:*/		return 0x821D1C44;
		  /* 821D1C44h */ case    6:  		/* cmplwi CR6, R20, 0 */
		/* 821D1C44h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821D1C44h case    6:*/		return 0x821D1C48;
		  /* 821D1C48h */ case    7:  		/* bc 4, CR6_EQ, 116 */
		/* 821D1C48h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1CBC;  }
		/* 821D1C48h case    7:*/		return 0x821D1C4C;
		  /* 821D1C4Ch */ case    8:  		/* li R22, 1 */
		/* 821D1C4Ch case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821D1C4Ch case    8:*/		return 0x821D1C50;
		  /* 821D1C50h */ case    9:  		/* mr R11, R28 */
		/* 821D1C50h case    9:*/		regs.R11 = regs.R28;
		/* 821D1C50h case    9:*/		return 0x821D1C54;
		  /* 821D1C54h */ case   10:  		/* mr R27, R30 */
		/* 821D1C54h case   10:*/		regs.R27 = regs.R30;
		/* 821D1C54h case   10:*/		return 0x821D1C58;
		  /* 821D1C58h */ case   11:  		/* mr R25, R26 */
		/* 821D1C58h case   11:*/		regs.R25 = regs.R26;
		/* 821D1C58h case   11:*/		return 0x821D1C5C;
		  /* 821D1C5Ch */ case   12:  		/* mr R24, R23 */
		/* 821D1C5Ch case   12:*/		regs.R24 = regs.R23;
		/* 821D1C5Ch case   12:*/		return 0x821D1C60;
	}
	return 0x821D1C60;
} // Block from 821D1C2Ch-821D1C60h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D1C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1C60);
		  /* 821D1C60h */ case    0:  		/* li R10, 0 */
		/* 821D1C60h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1C60h case    0:*/		return 0x821D1C64;
		  /* 821D1C64h */ case    1:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D1C64h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D1C64h case    1:*/		return 0x821D1C68;
		  /* 821D1C68h */ case    2:  		/* mr R9, R29 */
		/* 821D1C68h case    2:*/		regs.R9 = regs.R29;
		/* 821D1C68h case    2:*/		return 0x821D1C6C;
		  /* 821D1C6Ch */ case    3:  		/* li R8, 0 */
		/* 821D1C6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1C6Ch case    3:*/		return 0x821D1C70;
		  /* 821D1C70h */ case    4:  		/* addi R7, R1, 172 */
		/* 821D1C70h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xAC);
		/* 821D1C70h case    4:*/		return 0x821D1C74;
		  /* 821D1C74h */ case    5:  		/* addi R6, R1, 168 */
		/* 821D1C74h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA8);
		/* 821D1C74h case    5:*/		return 0x821D1C78;
		  /* 821D1C78h */ case    6:  		/* addi R5, R1, 164 */
		/* 821D1C78h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA4);
		/* 821D1C78h case    6:*/		return 0x821D1C7C;
		  /* 821D1C7Ch */ case    7:  		/* li R4, 0 */
		/* 821D1C7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D1C7Ch case    7:*/		return 0x821D1C80;
		  /* 821D1C80h */ case    8:  		/* bl 333904 */
		/* 821D1C80h case    8:*/		regs.LR = 0x821D1C84; return 0x822234D0;
		/* 821D1C80h case    8:*/		return 0x821D1C84;
		  /* 821D1C84h */ case    9:  		/* lwz R11, <#[R1 + 164]> */
		/* 821D1C84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D1C84h case    9:*/		return 0x821D1C88;
		  /* 821D1C88h */ case   10:  		/* cmplw CR6, R11, R27 */
		/* 821D1C88h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821D1C88h case   10:*/		return 0x821D1C8C;
		  /* 821D1C8Ch */ case   11:  		/* bc 4, CR6_EQ, -96 */
		/* 821D1C8Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1C8Ch case   11:*/		return 0x821D1C90;
		  /* 821D1C90h */ case   12:  		/* lwz R11, <#[R1 + 168]> */
		/* 821D1C90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D1C90h case   12:*/		return 0x821D1C94;
		  /* 821D1C94h */ case   13:  		/* cmpw CR6, R11, R25 */
		/* 821D1C94h case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R25);
		/* 821D1C94h case   13:*/		return 0x821D1C98;
		  /* 821D1C98h */ case   14:  		/* bc 4, CR6_EQ, -108 */
		/* 821D1C98h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1C98h case   14:*/		return 0x821D1C9C;
		  /* 821D1C9Ch */ case   15:  		/* lwz R11, <#[R1 + 172]> */
		/* 821D1C9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 821D1C9Ch case   15:*/		return 0x821D1CA0;
		  /* 821D1CA0h */ case   16:  		/* cmplw CR6, R11, R24 */
		/* 821D1CA0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821D1CA0h case   16:*/		return 0x821D1CA4;
		  /* 821D1CA4h */ case   17:  		/* bc 4, CR6_EQ, -120 */
		/* 821D1CA4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1CA4h case   17:*/		return 0x821D1CA8;
		  /* 821D1CA8h */ case   18:  		/* cmplwi CR6, R19, 0 */
		/* 821D1CA8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D1CA8h case   18:*/		return 0x821D1CAC;
		  /* 821D1CACh */ case   19:  		/* bc 4, CR6_EQ, -128 */
		/* 821D1CACh case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D1C2C;  }
		/* 821D1CACh case   19:*/		return 0x821D1CB0;
		  /* 821D1CB0h */ case   20:  		/* lis R11, -32256 */
		/* 821D1CB0h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D1CB0h case   20:*/		return 0x821D1CB4;
		  /* 821D1CB4h */ case   21:  		/* lfs FR1, <#[R11 + 1792]> */
		/* 821D1CB4h case   21:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000700) );
		/* 821D1CB4h case   21:*/		return 0x821D1CB8;
		  /* 821D1CB8h */ case   22:  		/* b -820 */
		/* 821D1CB8h case   22:*/		return 0x821D1984;
		/* 821D1CB8h case   22:*/		return 0x821D1CBC;
	}
	return 0x821D1CBC;
} // Block from 821D1C60h-821D1CBCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D1CBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1CBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1CBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1CBC);
		  /* 821D1CBCh */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821D1CBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821D1CBCh case    0:*/		return 0x821D1CC0;
		  /* 821D1CC0h */ case    1:  		/* bc 4, CR6_EQ, 312 */
		/* 821D1CC0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D1DF8;  }
		/* 821D1CC0h case    1:*/		return 0x821D1CC4;
		  /* 821D1CC4h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 821D1CC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821D1CC4h case    2:*/		return 0x821D1CC8;
		  /* 821D1CC8h */ case    3:  		/* bc 4, CR6_EQ, 304 */
		/* 821D1CC8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D1DF8;  }
		/* 821D1CC8h case    3:*/		return 0x821D1CCC;
		  /* 821D1CCCh */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D1CCCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D1CCCh case    4:*/		return 0x821D1CD0;
		  /* 821D1CD0h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D1CD0h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D1CD0h case    5:*/		return 0x821D1CD4;
		  /* 821D1CD4h */ case    6:  		/* cmplwi CR6, R11, 256 */
		/* 821D1CD4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821D1CD4h case    6:*/		return 0x821D1CD8;
		  /* 821D1CD8h */ case    7:  		/* bc 4, CR6_EQ, 288 */
		/* 821D1CD8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D1DF8;  }
		/* 821D1CD8h case    7:*/		return 0x821D1CDC;
		  /* 821D1CDCh */ case    8:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D1CDCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D1CDCh case    8:*/		return 0x821D1CE0;
		  /* 821D1CE0h */ case    9:  		/* lwz R10, <#[R30 + 28]> */
		/* 821D1CE0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821D1CE0h case    9:*/		return 0x821D1CE4;
		  /* 821D1CE4h */ case   10:  		/* lwz R11, <#[R11 + 76]> */
		/* 821D1CE4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821D1CE4h case   10:*/		return 0x821D1CE8;
		  /* 821D1CE8h */ case   11:  		/* lwz R10, <#[R10 + 76]> */
		/* 821D1CE8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 821D1CE8h case   11:*/		return 0x821D1CEC;
		  /* 821D1CECh */ case   12:  		/* xor R11, R11, R10 */
		/* 821D1CECh case   12:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D1CECh case   12:*/		return 0x821D1CF0;
		  /* 821D1CF0h */ case   13:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821D1CF0h case   13:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821D1CF0h case   13:*/		return 0x821D1CF4;
		  /* 821D1CF4h */ case   14:  		/* bc 4, CR0_EQ, 260 */
		/* 821D1CF4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821D1DF8;  }
		/* 821D1CF4h case   14:*/		return 0x821D1CF8;
		  /* 821D1CF8h */ case   15:  		/* li R10, 0 */
		/* 821D1CF8h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1CF8h case   15:*/		return 0x821D1CFC;
		  /* 821D1CFCh */ case   16:  		/* lwz R3, <#[R30 + 44]> */
		/* 821D1CFCh case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D1CFCh case   16:*/		return 0x821D1D00;
		  /* 821D1D00h */ case   17:  		/* mr R9, R29 */
		/* 821D1D00h case   17:*/		regs.R9 = regs.R29;
		/* 821D1D00h case   17:*/		return 0x821D1D04;
		  /* 821D1D04h */ case   18:  		/* li R8, 0 */
		/* 821D1D04h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1D04h case   18:*/		return 0x821D1D08;
		  /* 821D1D08h */ case   19:  		/* addi R7, R1, 140 */
		/* 821D1D08h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x8C);
		/* 821D1D08h case   19:*/		return 0x821D1D0C;
		  /* 821D1D0Ch */ case   20:  		/* addi R6, R1, 136 */
		/* 821D1D0Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x88);
		/* 821D1D0Ch case   20:*/		return 0x821D1D10;
		  /* 821D1D10h */ case   21:  		/* addi R5, R1, 144 */
		/* 821D1D10h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 821D1D10h case   21:*/		return 0x821D1D14;
		  /* 821D1D14h */ case   22:  		/* mr R4, R26 */
		/* 821D1D14h case   22:*/		regs.R4 = regs.R26;
		/* 821D1D14h case   22:*/		return 0x821D1D18;
		  /* 821D1D18h */ case   23:  		/* bl 333752 */
		/* 821D1D18h case   23:*/		regs.LR = 0x821D1D1C; return 0x822234D0;
		/* 821D1D18h case   23:*/		return 0x821D1D1C;
		  /* 821D1D1Ch */ case   24:  		/* li R10, 0 */
		/* 821D1D1Ch case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1D1Ch case   24:*/		return 0x821D1D20;
		  /* 821D1D20h */ case   25:  		/* mr R9, R29 */
		/* 821D1D20h case   25:*/		regs.R9 = regs.R29;
		/* 821D1D20h case   25:*/		return 0x821D1D24;
		  /* 821D1D24h */ case   26:  		/* lwz R3, <#[R30 + 48]> */
		/* 821D1D24h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821D1D24h case   26:*/		return 0x821D1D28;
		  /* 821D1D28h */ case   27:  		/* li R8, 0 */
		/* 821D1D28h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1D28h case   27:*/		return 0x821D1D2C;
		  /* 821D1D2Ch */ case   28:  		/* addi R7, R1, 148 */
		/* 821D1D2Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x94);
		/* 821D1D2Ch case   28:*/		return 0x821D1D30;
		  /* 821D1D30h */ case   29:  		/* addi R6, R1, 152 */
		/* 821D1D30h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 821D1D30h case   29:*/		return 0x821D1D34;
		  /* 821D1D34h */ case   30:  		/* addi R5, R1, 156 */
		/* 821D1D34h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x9C);
		/* 821D1D34h case   30:*/		return 0x821D1D38;
		  /* 821D1D38h */ case   31:  		/* mr R4, R26 */
		/* 821D1D38h case   31:*/		regs.R4 = regs.R26;
		/* 821D1D38h case   31:*/		return 0x821D1D3C;
		  /* 821D1D3Ch */ case   32:  		/* bl 333716 */
		/* 821D1D3Ch case   32:*/		regs.LR = 0x821D1D40; return 0x822234D0;
		/* 821D1D3Ch case   32:*/		return 0x821D1D40;
		  /* 821D1D40h */ case   33:  		/* addi R11, R1, 176 */
		/* 821D1D40h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 821D1D40h case   33:*/		return 0x821D1D44;
		  /* 821D1D44h */ case   34:  		/* stw R30, <#[R1 + 188]> */
		/* 821D1D44h case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D1D44h case   34:*/		return 0x821D1D48;
		  /* 821D1D48h */ case   35:  		/* mr R10, R21 */
		/* 821D1D48h case   35:*/		regs.R10 = regs.R21;
		/* 821D1D48h case   35:*/		return 0x821D1D4C;
		  /* 821D1D4Ch */ case   36:  		/* stw R26, <#[R1 + 192]> */
		/* 821D1D4Ch case   36:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D1D4Ch case   36:*/		return 0x821D1D50;
		  /* 821D1D50h */ case   37:  		/* mr R9, R28 */
		/* 821D1D50h case   37:*/		regs.R9 = regs.R28;
		/* 821D1D50h case   37:*/		return 0x821D1D54;
		  /* 821D1D54h */ case   38:  		/* stw R11, <#[R1 + 92]> */
		/* 821D1D54h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1D54h case   38:*/		return 0x821D1D58;
		  /* 821D1D58h */ case   39:  		/* mr R5, R18 */
		/* 821D1D58h case   39:*/		regs.R5 = regs.R18;
		/* 821D1D58h case   39:*/		return 0x821D1D5C;
		  /* 821D1D5Ch */ case   40:  		/* lwz R27, <#[R1 + 436]> */
		/* 821D1D5Ch case   40:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000001B4) );
		/* 821D1D5Ch case   40:*/		return 0x821D1D60;
		  /* 821D1D60h */ case   41:  		/* mr R4, R29 */
		/* 821D1D60h case   41:*/		regs.R4 = regs.R29;
		/* 821D1D60h case   41:*/		return 0x821D1D64;
		  /* 821D1D64h */ case   42:  		/* mr R3, R31 */
		/* 821D1D64h case   42:*/		regs.R3 = regs.R31;
		/* 821D1D64h case   42:*/		return 0x821D1D68;
		  /* 821D1D68h */ case   43:  		/* lwz R8, <#[R1 + 140]> */
		/* 821D1D68h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D1D68h case   43:*/		return 0x821D1D6C;
		  /* 821D1D6Ch */ case   44:  		/* lwz R7, <#[R1 + 136]> */
		/* 821D1D6Ch case   44:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 821D1D6Ch case   44:*/		return 0x821D1D70;
		  /* 821D1D70h */ case   45:  		/* lwz R6, <#[R1 + 144]> */
		/* 821D1D70h case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 821D1D70h case   45:*/		return 0x821D1D74;
		  /* 821D1D74h */ case   46:  		/* stw R20, <#[R1 + 84]> */
		/* 821D1D74h case   46:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1D74h case   46:*/		return 0x821D1D78;
		  /* 821D1D78h */ case   47:  		/* stw R27, <#[R1 + 100]> */
		/* 821D1D78h case   47:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1D78h case   47:*/		return 0x821D1D7C;
		  /* 821D1D7Ch */ case   48:  		/* lwz R11, <#[R1 + 156]> */
		/* 821D1D7Ch case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D1D7Ch case   48:*/		return 0x821D1D80;
		  /* 821D1D80h */ case   49:  		/* lwz R30, <#[R1 + 152]> */
		/* 821D1D80h case   49:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000098) );
		/* 821D1D80h case   49:*/		return 0x821D1D84;
		  /* 821D1D84h */ case   50:  		/* lwz R26, <#[R1 + 148]> */
		/* 821D1D84h case   50:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000094) );
		/* 821D1D84h case   50:*/		return 0x821D1D88;
		  /* 821D1D88h */ case   51:  		/* stw R11, <#[R1 + 176]> */
		/* 821D1D88h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D1D88h case   51:*/		return 0x821D1D8C;
		  /* 821D1D8Ch */ case   52:  		/* stw R30, <#[R1 + 180]> */
		/* 821D1D8Ch case   52:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000B4) );
		/* 821D1D8Ch case   52:*/		return 0x821D1D90;
		  /* 821D1D90h */ case   53:  		/* stw R26, <#[R1 + 184]> */
		/* 821D1D90h case   53:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D1D90h case   53:*/		return 0x821D1D94;
		  /* 821D1D94h */ case   54:  		/* bl -1788 */
		/* 821D1D94h case   54:*/		regs.LR = 0x821D1D98; return 0x821D1698;
		/* 821D1D94h case   54:*/		return 0x821D1D98;
		  /* 821D1D98h */ case   55:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1D98h case   55:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1D98h case   55:*/		return 0x821D1D9C;
		  /* 821D1D9Ch */ case   56:  		/* bc 4, CR0_EQ, -1348 */
		/* 821D1D9Ch case   56:*/		if ( !regs.CR[0].eq ) { return 0x821D1858;  }
		/* 821D1D9Ch case   56:*/		return 0x821D1DA0;
		  /* 821D1DA0h */ case   57:  		/* lwz R11, <#[R1 + 136]> */
		/* 821D1DA0h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821D1DA0h case   57:*/		return 0x821D1DA4;
		  /* 821D1DA4h */ case   58:  		/* addi R30, R1, 176 */
		/* 821D1DA4h case   58:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xB0);
		/* 821D1DA4h case   58:*/		return 0x821D1DA8;
		  /* 821D1DA8h */ case   59:  		/* lwz R26, <#[R1 + 140]> */
		/* 821D1DA8h case   59:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D1DA8h case   59:*/		return 0x821D1DAC;
		  /* 821D1DACh */ case   60:  		/* mr R10, R21 */
		/* 821D1DACh case   60:*/		regs.R10 = regs.R21;
		/* 821D1DACh case   60:*/		return 0x821D1DB0;
		  /* 821D1DB0h */ case   61:  		/* lwz R25, <#[R1 + 144]> */
		/* 821D1DB0h case   61:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000090) );
		/* 821D1DB0h case   61:*/		return 0x821D1DB4;
		  /* 821D1DB4h */ case   62:  		/* mr R9, R28 */
		/* 821D1DB4h case   62:*/		regs.R9 = regs.R28;
		/* 821D1DB4h case   62:*/		return 0x821D1DB8;
		  /* 821D1DB8h */ case   63:  		/* mr R5, R18 */
		/* 821D1DB8h case   63:*/		regs.R5 = regs.R18;
		/* 821D1DB8h case   63:*/		return 0x821D1DBC;
		  /* 821D1DBCh */ case   64:  		/* lwz R8, <#[R1 + 148]> */
		/* 821D1DBCh case   64:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 821D1DBCh case   64:*/		return 0x821D1DC0;
		  /* 821D1DC0h */ case   65:  		/* mr R4, R29 */
		/* 821D1DC0h case   65:*/		regs.R4 = regs.R29;
		/* 821D1DC0h case   65:*/		return 0x821D1DC4;
		  /* 821D1DC4h */ case   66:  		/* lwz R7, <#[R1 + 152]> */
		/* 821D1DC4h case   66:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000098) );
		/* 821D1DC4h case   66:*/		return 0x821D1DC8;
		  /* 821D1DC8h */ case   67:  		/* mr R3, R31 */
		/* 821D1DC8h case   67:*/		regs.R3 = regs.R31;
		/* 821D1DC8h case   67:*/		return 0x821D1DCC;
		  /* 821D1DCCh */ case   68:  		/* lwz R6, <#[R1 + 156]> */
		/* 821D1DCCh case   68:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D1DCCh case   68:*/		return 0x821D1DD0;
		  /* 821D1DD0h */ case   69:  		/* stw R11, <#[R1 + 180]> */
		/* 821D1DD0h case   69:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 821D1DD0h case   69:*/		return 0x821D1DD4;
		  /* 821D1DD4h */ case   70:  		/* stw R26, <#[R1 + 184]> */
		/* 821D1DD4h case   70:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D1DD4h case   70:*/		return 0x821D1DD8;
		  /* 821D1DD8h */ case   71:  		/* stw R25, <#[R1 + 176]> */
		/* 821D1DD8h case   71:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D1DD8h case   71:*/		return 0x821D1DDC;
		  /* 821D1DDCh */ case   72:  		/* stw R27, <#[R1 + 100]> */
		/* 821D1DDCh case   72:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 821D1DDCh case   72:*/		return 0x821D1DE0;
		  /* 821D1DE0h */ case   73:  		/* stw R20, <#[R1 + 84]> */
		/* 821D1DE0h case   73:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1DE0h case   73:*/		return 0x821D1DE4;
		  /* 821D1DE4h */ case   74:  		/* stw R30, <#[R1 + 92]> */
		/* 821D1DE4h case   74:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D1DE4h case   74:*/		return 0x821D1DE8;
		  /* 821D1DE8h */ case   75:  		/* bl -1872 */
		/* 821D1DE8h case   75:*/		regs.LR = 0x821D1DEC; return 0x821D1698;
		/* 821D1DE8h case   75:*/		return 0x821D1DEC;
		  /* 821D1DECh */ case   76:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D1DECh case   76:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D1DECh case   76:*/		return 0x821D1DF0;
		  /* 821D1DF0h */ case   77:  		/* li R3, 1 */
		/* 821D1DF0h case   77:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821D1DF0h case   77:*/		return 0x821D1DF4;
		  /* 821D1DF4h */ case   78:  		/* bc 4, CR0_EQ, 8 */
		/* 821D1DF4h case   78:*/		if ( !regs.CR[0].eq ) { return 0x821D1DFC;  }
		/* 821D1DF4h case   78:*/		return 0x821D1DF8;
	}
	return 0x821D1DF8;
} // Block from 821D1CBCh-821D1DF8h (79 instructions)

//////////////////////////////////////////////////////
// Block at 821D1DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1DF8);
		  /* 821D1DF8h */ case    0:  		/* li R3, 0 */
		/* 821D1DF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821D1DF8h case    0:*/		return 0x821D1DFC;
	}
	return 0x821D1DFC;
} // Block from 821D1DF8h-821D1DFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D1DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1DFC);
		  /* 821D1DFCh */ case    0:  		/* addi R1, R1, 336 */
		/* 821D1DFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x150);
		/* 821D1DFCh case    0:*/		return 0x821D1E00;
		  /* 821D1E00h */ case    1:  		/* lfd FR30, <#[R1 - 136]> */
		/* 821D1E00h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821D1E00h case    1:*/		return 0x821D1E04;
		  /* 821D1E04h */ case    2:  		/* lfd FR31, <#[R1 - 128]> */
		/* 821D1E04h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF80) );
		/* 821D1E04h case    2:*/		return 0x821D1E08;
		  /* 821D1E08h */ case    3:  		/* b -1313672 */
		/* 821D1E08h case    3:*/		return 0x82091280;
		/* 821D1E08h case    3:*/		return 0x821D1E0C;
		  /* 821D1E0Ch */ case    4:  		/* nop */
		/* 821D1E0Ch case    4:*/		cpu::op::nop();
		/* 821D1E0Ch case    4:*/		return 0x821D1E10;
	}
	return 0x821D1E10;
} // Block from 821D1DFCh-821D1E10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D1E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1E10);
		  /* 821D1E10h */ case    0:  		/* mfspr R12, LR */
		/* 821D1E10h case    0:*/		regs.R12 = regs.LR;
		/* 821D1E10h case    0:*/		return 0x821D1E14;
		  /* 821D1E14h */ case    1:  		/* bl -1313764 */
		/* 821D1E14h case    1:*/		regs.LR = 0x821D1E18; return 0x82091230;
		/* 821D1E14h case    1:*/		return 0x821D1E18;
		  /* 821D1E18h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821D1E18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821D1E18h case    2:*/		return 0x821D1E1C;
		  /* 821D1E1Ch */ case    3:  		/* stw R4, <#[R1 + 80]> */
		/* 821D1E1Ch case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1E1Ch case    3:*/		return 0x821D1E20;
		  /* 821D1E20h */ case    4:  		/* mr R31, R3 */
		/* 821D1E20h case    4:*/		regs.R31 = regs.R3;
		/* 821D1E20h case    4:*/		return 0x821D1E24;
		  /* 821D1E24h */ case    5:  		/* stw R5, <#[R1 + 84]> */
		/* 821D1E24h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1E24h case    5:*/		return 0x821D1E28;
		  /* 821D1E28h */ case    6:  		/* mr R29, R4 */
		/* 821D1E28h case    6:*/		regs.R29 = regs.R4;
		/* 821D1E28h case    6:*/		return 0x821D1E2C;
		  /* 821D1E2Ch */ case    7:  		/* lwz R28, <#[R4 + 48]> */
		/* 821D1E2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000030) );
		/* 821D1E2Ch case    7:*/		return 0x821D1E30;
		  /* 821D1E30h */ case    8:  		/* mr R22, R5 */
		/* 821D1E30h case    8:*/		regs.R22 = regs.R5;
		/* 821D1E30h case    8:*/		return 0x821D1E34;
		  /* 821D1E34h */ case    9:  		/* mr R25, R6 */
		/* 821D1E34h case    9:*/		regs.R25 = regs.R6;
		/* 821D1E34h case    9:*/		return 0x821D1E38;
		  /* 821D1E38h */ case   10:  		/* mr R19, R7 */
		/* 821D1E38h case   10:*/		regs.R19 = regs.R7;
		/* 821D1E38h case   10:*/		return 0x821D1E3C;
		  /* 821D1E3Ch */ case   11:  		/* mr R20, R8 */
		/* 821D1E3Ch case   11:*/		regs.R20 = regs.R8;
		/* 821D1E3Ch case   11:*/		return 0x821D1E40;
		  /* 821D1E40h */ case   12:  		/* mr R18, R9 */
		/* 821D1E40h case   12:*/		regs.R18 = regs.R9;
		/* 821D1E40h case   12:*/		return 0x821D1E44;
		  /* 821D1E44h */ case   13:  		/* mr R11, R4 */
		/* 821D1E44h case   13:*/		regs.R11 = regs.R4;
		/* 821D1E44h case   13:*/		return 0x821D1E48;
		  /* 821D1E48h */ case   14:  		/* b 48 */
		/* 821D1E48h case   14:*/		return 0x821D1E78;
		/* 821D1E48h case   14:*/		return 0x821D1E4C;
		  /* 821D1E4Ch */ case   15:  		/* li R10, 0 */
		/* 821D1E4Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D1E4Ch case   15:*/		return 0x821D1E50;
		  /* 821D1E50h */ case   16:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D1E50h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D1E50h case   16:*/		return 0x821D1E54;
		  /* 821D1E54h */ case   17:  		/* mr R9, R29 */
		/* 821D1E54h case   17:*/		regs.R9 = regs.R29;
		/* 821D1E54h case   17:*/		return 0x821D1E58;
		  /* 821D1E58h */ case   18:  		/* lwz R4, <#[R1 + 84]> */
		/* 821D1E58h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1E58h case   18:*/		return 0x821D1E5C;
		  /* 821D1E5Ch */ case   19:  		/* li R8, 0 */
		/* 821D1E5Ch case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D1E5Ch case   19:*/		return 0x821D1E60;
		  /* 821D1E60h */ case   20:  		/* addi R7, R1, 88 */
		/* 821D1E60h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 821D1E60h case   20:*/		return 0x821D1E64;
		  /* 821D1E64h */ case   21:  		/* addi R6, R1, 84 */
		/* 821D1E64h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821D1E64h case   21:*/		return 0x821D1E68;
		  /* 821D1E68h */ case   22:  		/* addi R5, R1, 80 */
		/* 821D1E68h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821D1E68h case   22:*/		return 0x821D1E6C;
		  /* 821D1E6Ch */ case   23:  		/* bl 333412 */
		/* 821D1E6Ch case   23:*/		regs.LR = 0x821D1E70; return 0x822234D0;
		/* 821D1E6Ch case   23:*/		return 0x821D1E70;
		  /* 821D1E70h */ case   24:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D1E70h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1E70h case   24:*/		return 0x821D1E74;
		  /* 821D1E74h */ case   25:  		/* lwz R28, <#[R11 + 48]> */
		/* 821D1E74h case   25:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000030) );
		/* 821D1E74h case   25:*/		return 0x821D1E78;
	}
	return 0x821D1E78;
} // Block from 821D1E10h-821D1E78h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D1E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1E78);
		  /* 821D1E78h */ case    0:  		/* lwz R10, <#[R28 + 12]> */
		/* 821D1E78h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D1E78h case    0:*/		return 0x821D1E7C;
		  /* 821D1E7Ch */ case    1:  		/* cmplw CR6, R10, R25 */
		/* 821D1E7Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 821D1E7Ch case    1:*/		return 0x821D1E80;
		  /* 821D1E80h */ case    2:  		/* bc 4, CR6_EQ, -52 */
		/* 821D1E80h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D1E4C;  }
		/* 821D1E80h case    2:*/		return 0x821D1E84;
		  /* 821D1E84h */ case    3:  		/* lis R11, -32256 */
		/* 821D1E84h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D1E84h case    3:*/		return 0x821D1E88;
		  /* 821D1E88h */ case    4:  		/* li R4, 1 */
		/* 821D1E88h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D1E88h case    4:*/		return 0x821D1E8C;
		  /* 821D1E8Ch */ case    5:  		/* mr R3, R31 */
		/* 821D1E8Ch case    5:*/		regs.R3 = regs.R31;
		/* 821D1E8Ch case    5:*/		return 0x821D1E90;
		  /* 821D1E90h */ case    6:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 821D1E90h case    6:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 821D1E90h case    6:*/		return 0x821D1E94;
		  /* 821D1E94h */ case    7:  		/* fmr FR3, FR4 */
		/* 821D1E94h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821D1E94h case    7:*/		return 0x821D1E98;
		  /* 821D1E98h */ case    8:  		/* fmr FR2, FR4 */
		/* 821D1E98h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 821D1E98h case    8:*/		return 0x821D1E9C;
		  /* 821D1E9Ch */ case    9:  		/* fmr FR1, FR4 */
		/* 821D1E9Ch case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 821D1E9Ch case    9:*/		return 0x821D1EA0;
		  /* 821D1EA0h */ case   10:  		/* bl 363704 */
		/* 821D1EA0h case   10:*/		regs.LR = 0x821D1EA4; return 0x8222AB58;
		/* 821D1EA0h case   10:*/		return 0x821D1EA4;
		  /* 821D1EA4h */ case   11:  		/* lwz R10, <#[R28]> */
		/* 821D1EA4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821D1EA4h case   11:*/		return 0x821D1EA8;
		  /* 821D1EA8h */ case   12:  		/* mr R21, R3 */
		/* 821D1EA8h case   12:*/		regs.R21 = regs.R3;
		/* 821D1EA8h case   12:*/		return 0x821D1EAC;
		  /* 821D1EACh */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D1EACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1EACh case   13:*/		return 0x821D1EB0;
		  /* 821D1EB0h */ case   14:  		/* li R5, 0 */
		/* 821D1EB0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D1EB0h case   14:*/		return 0x821D1EB4;
		  /* 821D1EB4h */ case   15:  		/* rlwinm R27, R10, 7, 29, 31 */
		/* 821D1EB4h case   15:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R27,regs.R10);
		/* 821D1EB4h case   15:*/		return 0x821D1EB8;
		  /* 821D1EB8h */ case   16:  		/* mr R3, R31 */
		/* 821D1EB8h case   16:*/		regs.R3 = regs.R31;
		/* 821D1EB8h case   16:*/		return 0x821D1EBC;
		  /* 821D1EBCh */ case   17:  		/* mr R6, R27 */
		/* 821D1EBCh case   17:*/		regs.R6 = regs.R27;
		/* 821D1EBCh case   17:*/		return 0x821D1EC0;
		  /* 821D1EC0h */ case   18:  		/* mr R30, R11 */
		/* 821D1EC0h case   18:*/		regs.R30 = regs.R11;
		/* 821D1EC0h case   18:*/		return 0x821D1EC4;
		  /* 821D1EC4h */ case   19:  		/* lwz R4, <#[R11 + 28]> */
		/* 821D1EC4h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D1EC4h case   19:*/		return 0x821D1EC8;
		  /* 821D1EC8h */ case   20:  		/* bl 339000 */
		/* 821D1EC8h case   20:*/		regs.LR = 0x821D1ECC; return 0x82224B00;
		/* 821D1EC8h case   20:*/		return 0x821D1ECC;
		  /* 821D1ECCh */ case   21:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D1ECCh case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D1ECCh case   21:*/		return 0x821D1ED0;
		  /* 821D1ED0h */ case   22:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821D1ED0h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821D1ED0h case   22:*/		return 0x821D1ED4;
		  /* 821D1ED4h */ case   23:  		/* addi R11, R11, 36 */
		/* 821D1ED4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D1ED4h case   23:*/		return 0x821D1ED8;
		  /* 821D1ED8h */ case   24:  		/* addi R10, R10, 36 */
		/* 821D1ED8h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D1ED8h case   24:*/		return 0x821D1EDC;
		  /* 821D1EDCh */ case   25:  		/* addi R8, R11, -36 */
		/* 821D1EDCh case   25:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D1EDCh case   25:*/		return 0x821D1EE0;
		  /* 821D1EE0h */ case   26:  		/* addi R6, R10, -36 */
		/* 821D1EE0h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821D1EE0h case   26:*/		return 0x821D1EE4;
		  /* 821D1EE4h */ case   27:  		/* addi R9, R10, 4 */
		/* 821D1EE4h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D1EE4h case   27:*/		return 0x821D1EE8;
		  /* 821D1EE8h */ case   28:  		/* lwz R7, <#[R11]> */
		/* 821D1EE8h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1EE8h case   28:*/		return 0x821D1EEC;
		  /* 821D1EECh */ case   29:  		/* mr R30, R3 */
		/* 821D1EECh case   29:*/		regs.R30 = regs.R3;
		/* 821D1EECh case   29:*/		return 0x821D1EF0;
		  /* 821D1EF0h */ case   30:  		/* li R23, 0 */
		/* 821D1EF0h case   30:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821D1EF0h case   30:*/		return 0x821D1EF4;
		  /* 821D1EF4h */ case   31:  		/* cmplwi CR6, R27, 0 */
		/* 821D1EF4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D1EF4h case   31:*/		return 0x821D1EF8;
		  /* 821D1EF8h */ case   32:  		/* stw R7, <#[R10]> */
		/* 821D1EF8h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821D1EF8h case   32:*/		return 0x821D1EFC;
		  /* 821D1EFCh */ case   33:  		/* lwz R7, <#[R11]> */
		/* 821D1EFCh case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1EFCh case   33:*/		return 0x821D1F00;
		  /* 821D1F00h */ case   34:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821D1F00h case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821D1F00h case   34:*/		return 0x821D1F04;
		  /* 821D1F04h */ case   35:  		/* stw R6, <#[R7]> */
		/* 821D1F04h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821D1F04h case   35:*/		return 0x821D1F08;
		  /* 821D1F08h */ case   36:  		/* stw R8, <#[R10 + 4]> */
		/* 821D1F08h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821D1F08h case   36:*/		return 0x821D1F0C;
		  /* 821D1F0Ch */ case   37:  		/* stw R9, <#[R11]> */
		/* 821D1F0Ch case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D1F0Ch case   37:*/		return 0x821D1F10;
		  /* 821D1F10h */ case   38:  		/* bc 12, CR6_EQ, 108 */
		/* 821D1F10h case   38:*/		if ( regs.CR[6].eq ) { return 0x821D1F7C;  }
		/* 821D1F10h case   38:*/		return 0x821D1F14;
		  /* 821D1F14h */ case   39:  		/* li R24, 0 */
		/* 821D1F14h case   39:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821D1F14h case   39:*/		return 0x821D1F18;
		  /* 821D1F18h */ case   40:  		/* addi R26, R3, 44 */
		/* 821D1F18h case   40:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x2C);
		/* 821D1F18h case   40:*/		return 0x821D1F1C;
		  /* 821D1F1Ch */ case   41:  		/* lwz R11, <#[R1 + 84]> */
		/* 821D1F1Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821D1F1Ch case   41:*/		return 0x821D1F20;
		  /* 821D1F20h */ case   42:  		/* mr R3, R31 */
		/* 821D1F20h case   42:*/		regs.R3 = regs.R31;
		/* 821D1F20h case   42:*/		return 0x821D1F24;
		  /* 821D1F24h */ case   43:  		/* cmpw CR6, R23, R11 */
		/* 821D1F24h case   43:*/		cpu::op::cmpw<6>(regs,regs.R23,regs.R11);
		/* 821D1F24h case   43:*/		return 0x821D1F28;
		  /* 821D1F28h */ case   44:  		/* bc 4, CR6_EQ, 20 */
		/* 821D1F28h case   44:*/		if ( !regs.CR[6].eq ) { return 0x821D1F3C;  }
		/* 821D1F28h case   44:*/		return 0x821D1F2C;
		  /* 821D1F2Ch */ case   45:  		/* li R5, 0 */
		/* 821D1F2Ch case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D1F2Ch case   45:*/		return 0x821D1F30;
		  /* 821D1F30h */ case   46:  		/* mr R4, R21 */
		/* 821D1F30h case   46:*/		regs.R4 = regs.R21;
		/* 821D1F30h case   46:*/		return 0x821D1F34;
		  /* 821D1F34h */ case   47:  		/* bl -368164 */
		/* 821D1F34h case   47:*/		regs.LR = 0x821D1F38; return 0x82178110;
		/* 821D1F34h case   47:*/		return 0x821D1F38;
		  /* 821D1F38h */ case   48:  		/* b 32 */
		/* 821D1F38h case   48:*/		return 0x821D1F58;
		/* 821D1F38h case   48:*/		return 0x821D1F3C;
	}
	return 0x821D1F3C;
} // Block from 821D1E78h-821D1F3Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 821D1F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1F3C);
		  /* 821D1F3Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821D1F3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D1F3Ch case    0:*/		return 0x821D1F40;
		  /* 821D1F40h */ case    1:  		/* mr R6, R20 */
		/* 821D1F40h case    1:*/		regs.R6 = regs.R20;
		/* 821D1F40h case    1:*/		return 0x821D1F44;
		  /* 821D1F44h */ case    2:  		/* mr R4, R25 */
		/* 821D1F44h case    2:*/		regs.R4 = regs.R25;
		/* 821D1F44h case    2:*/		return 0x821D1F48;
		  /* 821D1F48h */ case    3:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821D1F48h case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821D1F48h case    3:*/		return 0x821D1F4C;
		  /* 821D1F4Ch */ case    4:  		/* srw R11, R11, R24 */
		/* 821D1F4Ch case    4:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821D1F4Ch case    4:*/		return 0x821D1F50;
		  /* 821D1F50h */ case    5:  		/* rlwinm R5, R11, 0, 30, 31 */
		/* 821D1F50h case    5:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R11);
		/* 821D1F50h case    5:*/		return 0x821D1F54;
		  /* 821D1F54h */ case    6:  		/* bl -368108 */
		/* 821D1F54h case    6:*/		regs.LR = 0x821D1F58; return 0x82178168;
		/* 821D1F54h case    6:*/		return 0x821D1F58;
	}
	return 0x821D1F58;
} // Block from 821D1F3Ch-821D1F58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D1F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1F58);
		  /* 821D1F58h */ case    0:  		/* mr R4, R3 */
		/* 821D1F58h case    0:*/		regs.R4 = regs.R3;
		/* 821D1F58h case    0:*/		return 0x821D1F5C;
		  /* 821D1F5Ch */ case    1:  		/* mr R3, R30 */
		/* 821D1F5Ch case    1:*/		regs.R3 = regs.R30;
		/* 821D1F5Ch case    1:*/		return 0x821D1F60;
		  /* 821D1F60h */ case    2:  		/* bl -368024 */
		/* 821D1F60h case    2:*/		regs.LR = 0x821D1F64; return 0x821781C8;
		/* 821D1F60h case    2:*/		return 0x821D1F64;
		  /* 821D1F64h */ case    3:  		/* addi R23, R23, 1 */
		/* 821D1F64h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821D1F64h case    3:*/		return 0x821D1F68;
		  /* 821D1F68h */ case    4:  		/* stw R3, <#[R26]> */
		/* 821D1F68h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 821D1F68h case    4:*/		return 0x821D1F6C;
		  /* 821D1F6Ch */ case    5:  		/* addi R26, R26, 4 */
		/* 821D1F6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821D1F6Ch case    5:*/		return 0x821D1F70;
		  /* 821D1F70h */ case    6:  		/* addi R24, R24, 2 */
		/* 821D1F70h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x2);
		/* 821D1F70h case    6:*/		return 0x821D1F74;
		  /* 821D1F74h */ case    7:  		/* cmplw CR6, R23, R27 */
		/* 821D1F74h case    7:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R27);
		/* 821D1F74h case    7:*/		return 0x821D1F78;
		  /* 821D1F78h */ case    8:  		/* bc 12, CR6_LT, -92 */
		/* 821D1F78h case    8:*/		if ( regs.CR[6].lt ) { return 0x821D1F1C;  }
		/* 821D1F78h case    8:*/		return 0x821D1F7C;
	}
	return 0x821D1F7C;
} // Block from 821D1F58h-821D1F7Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D1F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D1F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D1F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D1F7C);
		  /* 821D1F7Ch */ case    0:  		/* mr R4, R30 */
		/* 821D1F7Ch case    0:*/		regs.R4 = regs.R30;
		/* 821D1F7Ch case    0:*/		return 0x821D1F80;
		  /* 821D1F80h */ case    1:  		/* mr R3, R31 */
		/* 821D1F80h case    1:*/		regs.R3 = regs.R31;
		/* 821D1F80h case    1:*/		return 0x821D1F84;
		  /* 821D1F84h */ case    2:  		/* bl -368516 */
		/* 821D1F84h case    2:*/		regs.LR = 0x821D1F88; return 0x82178000;
		/* 821D1F84h case    2:*/		return 0x821D1F88;
		  /* 821D1F88h */ case    3:  		/* lwz R11, <#[R1 + 80]> */
		/* 821D1F88h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1F88h case    3:*/		return 0x821D1F8C;
		  /* 821D1F8Ch */ case    4:  		/* mr R27, R3 */
		/* 821D1F8Ch case    4:*/		regs.R27 = regs.R3;
		/* 821D1F8Ch case    4:*/		return 0x821D1F90;
		  /* 821D1F90h */ case    5:  		/* mr R5, R31 */
		/* 821D1F90h case    5:*/		regs.R5 = regs.R31;
		/* 821D1F90h case    5:*/		return 0x821D1F94;
		  /* 821D1F94h */ case    6:  		/* mr R3, R11 */
		/* 821D1F94h case    6:*/		regs.R3 = regs.R11;
		/* 821D1F94h case    6:*/		return 0x821D1F98;
		  /* 821D1F98h */ case    7:  		/* mr R26, R11 */
		/* 821D1F98h case    7:*/		regs.R26 = regs.R11;
		/* 821D1F98h case    7:*/		return 0x821D1F9C;
		  /* 821D1F9Ch */ case    8:  		/* lwz R4, <#[R11 + 48]> */
		/* 821D1F9Ch case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000030) );
		/* 821D1F9Ch case    8:*/		return 0x821D1FA0;
		  /* 821D1FA0h */ case    9:  		/* addi R28, R11, 48 */
		/* 821D1FA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x30);
		/* 821D1FA0h case    9:*/		return 0x821D1FA4;
		  /* 821D1FA4h */ case   10:  		/* bl -366228 */
		/* 821D1FA4h case   10:*/		regs.LR = 0x821D1FA8; return 0x82178910;
		/* 821D1FA4h case   10:*/		return 0x821D1FA8;
		  /* 821D1FA8h */ case   11:  		/* mr R4, R27 */
		/* 821D1FA8h case   11:*/		regs.R4 = regs.R27;
		/* 821D1FA8h case   11:*/		return 0x821D1FAC;
		  /* 821D1FACh */ case   12:  		/* mr R3, R26 */
		/* 821D1FACh case   12:*/		regs.R3 = regs.R26;
		/* 821D1FACh case   12:*/		return 0x821D1FB0;
		  /* 821D1FB0h */ case   13:  		/* bl -368104 */
		/* 821D1FB0h case   13:*/		regs.LR = 0x821D1FB4; return 0x821781C8;
		/* 821D1FB0h case   13:*/		return 0x821D1FB4;
		  /* 821D1FB4h */ case   14:  		/* stw R3, <#[R28]> */
		/* 821D1FB4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 821D1FB4h case   14:*/		return 0x821D1FB8;
		  /* 821D1FB8h */ case   15:  		/* mr R6, R20 */
		/* 821D1FB8h case   15:*/		regs.R6 = regs.R20;
		/* 821D1FB8h case   15:*/		return 0x821D1FBC;
		  /* 821D1FBCh */ case   16:  		/* mr R5, R19 */
		/* 821D1FBCh case   16:*/		regs.R5 = regs.R19;
		/* 821D1FBCh case   16:*/		return 0x821D1FC0;
		  /* 821D1FC0h */ case   17:  		/* mr R4, R25 */
		/* 821D1FC0h case   17:*/		regs.R4 = regs.R25;
		/* 821D1FC0h case   17:*/		return 0x821D1FC4;
		  /* 821D1FC4h */ case   18:  		/* mr R3, R31 */
		/* 821D1FC4h case   18:*/		regs.R3 = regs.R31;
		/* 821D1FC4h case   18:*/		return 0x821D1FC8;
		  /* 821D1FC8h */ case   19:  		/* bl -368224 */
		/* 821D1FC8h case   19:*/		regs.LR = 0x821D1FCC; return 0x82178168;
		/* 821D1FC8h case   19:*/		return 0x821D1FCC;
		  /* 821D1FCCh */ case   20:  		/* mr R28, R3 */
		/* 821D1FCCh case   20:*/		regs.R28 = regs.R3;
		/* 821D1FCCh case   20:*/		return 0x821D1FD0;
		  /* 821D1FD0h */ case   21:  		/* mr R5, R22 */
		/* 821D1FD0h case   21:*/		regs.R5 = regs.R22;
		/* 821D1FD0h case   21:*/		return 0x821D1FD4;
		  /* 821D1FD4h */ case   22:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D1FD4h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D1FD4h case   22:*/		return 0x821D1FD8;
		  /* 821D1FD8h */ case   23:  		/* mr R3, R31 */
		/* 821D1FD8h case   23:*/		regs.R3 = regs.R31;
		/* 821D1FD8h case   23:*/		return 0x821D1FDC;
		  /* 821D1FDCh */ case   24:  		/* bl -368332 */
		/* 821D1FDCh case   24:*/		regs.LR = 0x821D1FE0; return 0x82178110;
		/* 821D1FDCh case   24:*/		return 0x821D1FE0;
		  /* 821D1FE0h */ case   25:  		/* mr R6, R3 */
		/* 821D1FE0h case   25:*/		regs.R6 = regs.R3;
		/* 821D1FE0h case   25:*/		return 0x821D1FE4;
		  /* 821D1FE4h */ case   26:  		/* mr R5, R29 */
		/* 821D1FE4h case   26:*/		regs.R5 = regs.R29;
		/* 821D1FE4h case   26:*/		return 0x821D1FE8;
		  /* 821D1FE8h */ case   27:  		/* li R4, 1 */
		/* 821D1FE8h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D1FE8h case   27:*/		return 0x821D1FEC;
		  /* 821D1FECh */ case   28:  		/* mr R3, R31 */
		/* 821D1FECh case   28:*/		regs.R3 = regs.R31;
		/* 821D1FECh case   28:*/		return 0x821D1FF0;
		  /* 821D1FF0h */ case   29:  		/* mr R7, R28 */
		/* 821D1FF0h case   29:*/		regs.R7 = regs.R28;
		/* 821D1FF0h case   29:*/		return 0x821D1FF4;
		  /* 821D1FF4h */ case   30:  		/* bl -213516 */
		/* 821D1FF4h case   30:*/		regs.LR = 0x821D1FF8; return 0x8219DDE8;
		/* 821D1FF4h case   30:*/		return 0x821D1FF8;
		  /* 821D1FF8h */ case   31:  		/* mr R28, R3 */
		/* 821D1FF8h case   31:*/		regs.R28 = regs.R3;
		/* 821D1FF8h case   31:*/		return 0x821D1FFC;
		  /* 821D1FFCh */ case   32:  		/* mr R6, R3 */
		/* 821D1FFCh case   32:*/		regs.R6 = regs.R3;
		/* 821D1FFCh case   32:*/		return 0x821D2000;
		  /* 821D2000h */ case   33:  		/* lwz R9, <#[R31 + 652]> */
		/* 821D2000h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D2000h case   33:*/		return 0x821D2004;
		  /* 821D2004h */ case   34:  		/* mr R10, R18 */
		/* 821D2004h case   34:*/		regs.R10 = regs.R18;
		/* 821D2004h case   34:*/		return 0x821D2008;
		  /* 821D2008h */ case   35:  		/* li R8, 0 */
		/* 821D2008h case   35:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D2008h case   35:*/		return 0x821D200C;
		  /* 821D200Ch */ case   36:  		/* li R7, 0 */
		/* 821D200Ch case   36:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D200Ch case   36:*/		return 0x821D2010;
		  /* 821D2010h */ case   37:  		/* mr R5, R22 */
		/* 821D2010h case   37:*/		regs.R5 = regs.R22;
		/* 821D2010h case   37:*/		return 0x821D2014;
		  /* 821D2014h */ case   38:  		/* mr R4, R29 */
		/* 821D2014h case   38:*/		regs.R4 = regs.R29;
		/* 821D2014h case   38:*/		return 0x821D2018;
		  /* 821D2018h */ case   39:  		/* mr R3, R31 */
		/* 821D2018h case   39:*/		regs.R3 = regs.R31;
		/* 821D2018h case   39:*/		return 0x821D201C;
		  /* 821D201Ch */ case   40:  		/* bl -13164 */
		/* 821D201Ch case   40:*/		regs.LR = 0x821D2020; return 0x821CECB0;
		/* 821D201Ch case   40:*/		return 0x821D2020;
		  /* 821D2020h */ case   41:  		/* lwz R11, <#[R28 + 44]> */
		/* 821D2020h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 821D2020h case   41:*/		return 0x821D2024;
		  /* 821D2024h */ case   42:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D2024h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D2024h case   42:*/		return 0x821D2028;
		  /* 821D2028h */ case   43:  		/* addi R10, R10, 4 */
		/* 821D2028h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D2028h case   43:*/		return 0x821D202C;
		  /* 821D202Ch */ case   44:  		/* lwz R9, <#[R10]> */
		/* 821D202Ch case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D202Ch case   44:*/		return 0x821D2030;
		  /* 821D2030h */ case   45:  		/* b 12 */
		/* 821D2030h case   45:*/		return 0x821D203C;
		/* 821D2030h case   45:*/		return 0x821D2034;
		  /* 821D2034h */ case   46:  		/* addi R10, R9, 8 */
		/* 821D2034h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D2034h case   46:*/		return 0x821D2038;
		  /* 821D2038h */ case   47:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D2038h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D2038h case   47:*/		return 0x821D203C;
	}
	return 0x821D203C;
} // Block from 821D1F7Ch-821D203Ch (48 instructions)

//////////////////////////////////////////////////////
// Block at 821D203Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D203C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D203C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D203C);
		  /* 821D203Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821D203Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D203Ch case    0:*/		return 0x821D2040;
		  /* 821D2040h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D2040h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2034;  }
		/* 821D2040h case    1:*/		return 0x821D2044;
		  /* 821D2044h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821D2044h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2044h case    2:*/		return 0x821D2048;
		  /* 821D2048h */ case    3:  		/* mr R4, R30 */
		/* 821D2048h case    3:*/		regs.R4 = regs.R30;
		/* 821D2048h case    3:*/		return 0x821D204C;
		  /* 821D204Ch */ case    4:  		/* mr R3, R31 */
		/* 821D204Ch case    4:*/		regs.R3 = regs.R31;
		/* 821D204Ch case    4:*/		return 0x821D2050;
		  /* 821D2050h */ case    5:  		/* stw R9, <#[R10]> */
		/* 821D2050h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D2050h case    5:*/		return 0x821D2054;
		  /* 821D2054h */ case    6:  		/* lwz R10, <#[R29 + 4]> */
		/* 821D2054h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 821D2054h case    6:*/		return 0x821D2058;
		  /* 821D2058h */ case    7:  		/* stw R10, <#[R11 + 8]> */
		/* 821D2058h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2058h case    7:*/		return 0x821D205C;
		  /* 821D205Ch */ case    8:  		/* stw R11, <#[R29 + 4]> */
		/* 821D205Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821D205Ch case    8:*/		return 0x821D2060;
		  /* 821D2060h */ case    9:  		/* stw R29, <#[R11 + 12]> */
		/* 821D2060h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D2060h case    9:*/		return 0x821D2064;
		  /* 821D2064h */ case   10:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D2064h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D2064h case   10:*/		return 0x821D2068;
		  /* 821D2068h */ case   11:  		/* bl -26272 */
		/* 821D2068h case   11:*/		regs.LR = 0x821D206C; return 0x821CB9C8;
		/* 821D2068h case   11:*/		return 0x821D206C;
		  /* 821D206Ch */ case   12:  		/* mr R3, R31 */
		/* 821D206Ch case   12:*/		regs.R3 = regs.R31;
		/* 821D206Ch case   12:*/		return 0x821D2070;
		  /* 821D2070h */ case   13:  		/* lwz R4, <#[R1 + 80]> */
		/* 821D2070h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821D2070h case   13:*/		return 0x821D2074;
		  /* 821D2074h */ case   14:  		/* lwz R5, <#[R31 + 652]> */
		/* 821D2074h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821D2074h case   14:*/		return 0x821D2078;
		  /* 821D2078h */ case   15:  		/* bl -26288 */
		/* 821D2078h case   15:*/		regs.LR = 0x821D207C; return 0x821CB9C8;
		/* 821D2078h case   15:*/		return 0x821D207C;
		  /* 821D207Ch */ case   16:  		/* addi R1, R1, 224 */
		/* 821D207Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821D207Ch case   16:*/		return 0x821D2080;
		  /* 821D2080h */ case   17:  		/* b -1314304 */
		/* 821D2080h case   17:*/		return 0x82091280;
		/* 821D2080h case   17:*/		return 0x821D2084;
		  /* 821D2084h */ case   18:  		/* nop */
		/* 821D2084h case   18:*/		cpu::op::nop();
		/* 821D2084h case   18:*/		return 0x821D2088;
	}
	return 0x821D2088;
} // Block from 821D203Ch-821D2088h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D2088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2088);
		  /* 821D2088h */ case    0:  		/* mfspr R12, LR */
		/* 821D2088h case    0:*/		regs.R12 = regs.LR;
		/* 821D2088h case    0:*/		return 0x821D208C;
		  /* 821D208Ch */ case    1:  		/* bl -1314412 */
		/* 821D208Ch case    1:*/		regs.LR = 0x821D2090; return 0x82091220;
		/* 821D208Ch case    1:*/		return 0x821D2090;
		  /* 821D2090h */ case    2:  		/* addi R12, R1, -152 */
		/* 821D2090h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821D2090h case    2:*/		return 0x821D2094;
		  /* 821D2094h */ case    3:  		/* bl -1313924 */
		/* 821D2094h case    3:*/		regs.LR = 0x821D2098; return 0x82091410;
		/* 821D2094h case    3:*/		return 0x821D2098;
		  /* 821D2098h */ case    4:  		/* stwu R1, <#[R1 - 1888]> */
		/* 821D2098h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF8A0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF8A0);
		/* 821D2098h case    4:*/		return 0x821D209C;
		  /* 821D209Ch */ case    5:  		/* lwz R11, <#[R4 + 28]> */
		/* 821D209Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 821D209Ch case    5:*/		return 0x821D20A0;
		  /* 821D20A0h */ case    6:  		/* mr R18, R3 */
		/* 821D20A0h case    6:*/		regs.R18 = regs.R3;
		/* 821D20A0h case    6:*/		return 0x821D20A4;
		  /* 821D20A4h */ case    7:  		/* stw R3, <#[R1 + 1908]> */
		/* 821D20A4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D20A4h case    7:*/		return 0x821D20A8;
		  /* 821D20A8h */ case    8:  		/* mr R16, R4 */
		/* 821D20A8h case    8:*/		regs.R16 = regs.R4;
		/* 821D20A8h case    8:*/		return 0x821D20AC;
		  /* 821D20ACh */ case    9:  		/* mr R22, R5 */
		/* 821D20ACh case    9:*/		regs.R22 = regs.R5;
		/* 821D20ACh case    9:*/		return 0x821D20B0;
		  /* 821D20B0h */ case   10:  		/* stw R5, <#[R1 + 1924]> */
		/* 821D20B0h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000784) );
		/* 821D20B0h case   10:*/		return 0x821D20B4;
		  /* 821D20B4h */ case   11:  		/* lwz R11, <#[R11 + 76]> */
		/* 821D20B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000004C) );
		/* 821D20B4h case   11:*/		return 0x821D20B8;
		  /* 821D20B8h */ case   12:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821D20B8h case   12:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821D20B8h case   12:*/		return 0x821D20BC;
		  /* 821D20BCh */ case   13:  		/* bc 4, CR0_EQ, 1108 */
		/* 821D20BCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D2510;  }
		/* 821D20BCh case   13:*/		return 0x821D20C0;
		  /* 821D20C0h */ case   14:  		/* lwz R17, <#[R3 + 652]> */
		/* 821D20C0h case   14:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R3 + 0x0000028C) );
		/* 821D20C0h case   14:*/		return 0x821D20C4;
		  /* 821D20C4h */ case   15:  		/* mr R3, R4 */
		/* 821D20C4h case   15:*/		regs.R3 = regs.R4;
		/* 821D20C4h case   15:*/		return 0x821D20C8;
		  /* 821D20C8h */ case   16:  		/* stw R17, <#[R1 + 112]> */
		/* 821D20C8h case   16:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000070) );
		/* 821D20C8h case   16:*/		return 0x821D20CC;
		  /* 821D20CCh */ case   17:  		/* bl -448332 */
		/* 821D20CCh case   17:*/		regs.LR = 0x821D20D0; return 0x82164980;
		/* 821D20CCh case   17:*/		return 0x821D20D0;
		  /* 821D20D0h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D20D0h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D20D0h case   18:*/		return 0x821D20D4;
		  /* 821D20D4h */ case   19:  		/* bc 12, CR0_EQ, 32 */
		/* 821D20D4h case   19:*/		if ( regs.CR[0].eq ) { return 0x821D20F4;  }
		/* 821D20D4h case   19:*/		return 0x821D20D8;
		  /* 821D20D8h */ case   20:  		/* mr R5, R17 */
		/* 821D20D8h case   20:*/		regs.R5 = regs.R17;
		/* 821D20D8h case   20:*/		return 0x821D20DC;
		  /* 821D20DCh */ case   21:  		/* mr R3, R18 */
		/* 821D20DCh case   21:*/		regs.R3 = regs.R18;
		/* 821D20DCh case   21:*/		return 0x821D20E0;
		  /* 821D20E0h */ case   22:  		/* mr R4, R16 */
		/* 821D20E0h case   22:*/		regs.R4 = regs.R16;
		/* 821D20E0h case   22:*/		return 0x821D20E4;
		  /* 821D20E4h */ case   23:  		/* li R6, 1 */
		/* 821D20E4h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D20E4h case   23:*/		return 0x821D20E8;
		  /* 821D20E8h */ case   24:  		/* bl 365280 */
		/* 821D20E8h case   24:*/		regs.LR = 0x821D20EC; return 0x8222B3C8;
		/* 821D20E8h case   24:*/		return 0x821D20EC;
		  /* 821D20ECh */ case   25:  		/* li R3, 1 */
		/* 821D20ECh case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821D20ECh case   25:*/		return 0x821D20F0;
		  /* 821D20F0h */ case   26:  		/* b 1060 */
		/* 821D20F0h case   26:*/		return 0x821D2514;
		/* 821D20F0h case   26:*/		return 0x821D20F4;
	}
	return 0x821D20F4;
} // Block from 821D2088h-821D20F4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821D20F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D20F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D20F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D20F4);
		  /* 821D20F4h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D20F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D20F4h case    0:*/		return 0x821D20F8;
		  /* 821D20F8h */ case    1:  		/* li R24, -1 */
		/* 821D20F8h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0xFFFFFFFF);
		/* 821D20F8h case    1:*/		return 0x821D20FC;
		  /* 821D20FCh */ case    2:  		/* li R23, 1 */
		/* 821D20FCh case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821D20FCh case    2:*/		return 0x821D2100;
		  /* 821D2100h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D2100h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D2100h case    3:*/		return 0x821D2104;
		  /* 821D2104h */ case    4:  		/* cmplwi CR6, R11, 16000 */
		/* 821D2104h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D2104h case    4:*/		return 0x821D2108;
		  /* 821D2108h */ case    5:  		/* bc 12, CR6_EQ, 1920 */
		/* 821D2108h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D2888;  }
		/* 821D2108h case    5:*/		return 0x821D210C;
		  /* 821D210Ch */ case    6:  		/* addi R5, R1, 352 */
		/* 821D210Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x160);
		/* 821D210Ch case    6:*/		return 0x821D2110;
		  /* 821D2110h */ case    7:  		/* addi R4, R1, 1536 */
		/* 821D2110h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x600);
		/* 821D2110h case    7:*/		return 0x821D2114;
		  /* 821D2114h */ case    8:  		/* mr R3, R16 */
		/* 821D2114h case    8:*/		regs.R3 = regs.R16;
		/* 821D2114h case    8:*/		return 0x821D2118;
		  /* 821D2118h */ case    9:  		/* bl 348968 */
		/* 821D2118h case    9:*/		regs.LR = 0x821D211C; return 0x82227440;
		/* 821D2118h case    9:*/		return 0x821D211C;
		  /* 821D211Ch */ case   10:  		/* or. R25, R3, R3 */
		/* 821D211Ch case   10:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 821D211Ch case   10:*/		return 0x821D2120;
		  /* 821D2120h */ case   11:  		/* bc 12, CR0_EQ, 1896 */
		/* 821D2120h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D2888;  }
		/* 821D2120h case   11:*/		return 0x821D2124;
		  /* 821D2124h */ case   12:  		/* lwz R8, <#[R16 + 8]> */
		/* 821D2124h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2124h case   12:*/		return 0x821D2128;
		  /* 821D2128h */ case   13:  		/* rlwinm. R11, R8, 27, 31, 31 */
		/* 821D2128h case   13:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R8);
		/* 821D2128h case   13:*/		return 0x821D212C;
		  /* 821D212Ch */ case   14:  		/* bc 12, CR0_EQ, 1016 */
		/* 821D212Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821D2524;  }
		/* 821D212Ch case   14:*/		return 0x821D2130;
		  /* 821D2130h */ case   15:  		/* lwz R21, <#[R16 + 4]> */
		/* 821D2130h case   15:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R16 + 0x00000004) );
		/* 821D2130h case   15:*/		return 0x821D2134;
		  /* 821D2134h */ case   16:  		/* addi R24, R16, 4 */
		/* 821D2134h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R16,0x4);
		/* 821D2134h case   16:*/		return 0x821D2138;
		  /* 821D2138h */ case   17:  		/* cmplwi CR6, R21, 0 */
		/* 821D2138h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821D2138h case   17:*/		return 0x821D213C;
		  /* 821D213Ch */ case   18:  		/* bc 12, CR6_EQ, 64 */
		/* 821D213Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821D217C;  }
		/* 821D213Ch case   18:*/		return 0x821D2140;
		  /* 821D2140h */ case   19:  		/* lwz R11, <#[R21 + 16]> */
		/* 821D2140h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821D2140h case   19:*/		return 0x821D2144;
		  /* 821D2144h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821D2144h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D2144h case   20:*/		return 0x821D2148;
		  /* 821D2148h */ case   21:  		/* bc 12, CR6_EQ, 44 */
		/* 821D2148h case   21:*/		if ( regs.CR[6].eq ) { return 0x821D2174;  }
		/* 821D2148h case   21:*/		return 0x821D214C;
		  /* 821D214Ch */ case   22:  		/* lwz R10, <#[R21]> */
		/* 821D214Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821D214Ch case   22:*/		return 0x821D2150;
		  /* 821D2150h */ case   23:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821D2150h case   23:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821D2150h case   23:*/		return 0x821D2154;
		  /* 821D2154h */ case   24:  		/* bc 12, CR0_EQ, 32 */
		/* 821D2154h case   24:*/		if ( regs.CR[0].eq ) { return 0x821D2174;  }
		/* 821D2154h case   24:*/		return 0x821D2158;
		  /* 821D2158h */ case   25:  		/* lwz R11, <#[R21 + 16]> */
		/* 821D2158h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821D2158h case   25:*/		return 0x821D215C;
		  /* 821D215Ch */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D215Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D215Ch case   26:*/		return 0x821D2160;
		  /* 821D2160h */ case   27:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D2160h case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D2160h case   27:*/		return 0x821D2164;
		  /* 821D2164h */ case   28:  		/* cmplwi CR6, R11, 83 */
		/* 821D2164h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 821D2164h case   28:*/		return 0x821D2168;
		  /* 821D2168h */ case   29:  		/* bc 12, CR6_EQ, 32 */
		/* 821D2168h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D2188;  }
		/* 821D2168h case   29:*/		return 0x821D216C;
		  /* 821D216Ch */ case   30:  		/* cmplwi CR6, R11, 117 */
		/* 821D216Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000075);
		/* 821D216Ch case   30:*/		return 0x821D2170;
	}
	return 0x821D2170;
} // Block from 821D20F4h-821D2170h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821D2170h
// Function '?Simplify_MUL@Compiler@D3DXShader@@AAA_NPAVInstruction@2@W4Component@2@01I01IPAUSimplifyMULState@2@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2170);
		  /* 821D2170h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 821D2170h case    0:*/		if ( regs.CR[6].eq ) { return 0x821D2188;  }
		/* 821D2170h case    0:*/		return 0x821D2174;
	}
	return 0x821D2174;
} // Block from 821D2170h-821D2174h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D2174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2174);
		  /* 821D2174h */ case    0:  		/* lwz R21, <#[R21 + 8]> */
		/* 821D2174h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R21 + 0x00000008) );
		/* 821D2174h case    0:*/		return 0x821D2178;
		  /* 821D2178h */ case    1:  		/* b -64 */
		/* 821D2178h case    1:*/		return 0x821D2138;
		/* 821D2178h case    1:*/		return 0x821D217C;
	}
	return 0x821D217C;
} // Block from 821D2174h-821D217Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D217Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D217C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D217C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D217C);
		  /* 821D217Ch */ case    0:  		/* li R4, 4800 */
		/* 821D217Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D217Ch case    0:*/		return 0x821D2180;
		  /* 821D2180h */ case    1:  		/* mr R3, R18 */
		/* 821D2180h case    1:*/		regs.R3 = regs.R18;
		/* 821D2180h case    1:*/		return 0x821D2184;
		  /* 821D2184h */ case    2:  		/* bl -525084 */
		/* 821D2184h case    2:*/		regs.LR = 0x821D2188; return 0x82151E68;
		/* 821D2184h case    2:*/		return 0x821D2188;
	}
	return 0x821D2188;
} // Block from 821D217Ch-821D2188h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D2188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2188);
		  /* 821D2188h */ case    0:  		/* rlwinm R11, R8, 18, 29, 31 */
		/* 821D2188h case    0:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R8);
		/* 821D2188h case    0:*/		return 0x821D218C;
		  /* 821D218Ch */ case    1:  		/* rlwinm R20, R10, 19, 20, 31 */
		/* 821D218Ch case    1:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R20,regs.R10);
		/* 821D218Ch case    1:*/		return 0x821D2190;
		  /* 821D2190h */ case    2:  		/* cmplwi CR6, R11, 4 */
		/* 821D2190h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821D2190h case    2:*/		return 0x821D2194;
		  /* 821D2194h */ case    3:  		/* bc 4, CR6_EQ, 892 */
		/* 821D2194h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D2510;  }
		/* 821D2194h case    3:*/		return 0x821D2198;
		  /* 821D2198h */ case    4:  		/* li R10, 4 */
		/* 821D2198h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821D2198h case    4:*/		return 0x821D219C;
		  /* 821D219Ch */ case    5:  		/* lis R9, -32256 */
		/* 821D219Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 821D219Ch case    5:*/		return 0x821D21A0;
		  /* 821D21A0h */ case    6:  		/* rlwinm R7, R20, 0, 28, 31 */
		/* 821D21A0h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R20);
		/* 821D21A0h case    6:*/		return 0x821D21A4;
		  /* 821D21A4h */ case    7:  		/* li R27, 0 */
		/* 821D21A4h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821D21A4h case    7:*/		return 0x821D21A8;
		  /* 821D21A8h */ case    8:  		/* mr R11, R7 */
		/* 821D21A8h case    8:*/		regs.R11 = regs.R7;
		/* 821D21A8h case    8:*/		return 0x821D21AC;
		  /* 821D21ACh */ case    9:  		/* mtspr CTR, R10 */
		/* 821D21ACh case    9:*/		regs.CTR = regs.R10;
		/* 821D21ACh case    9:*/		return 0x821D21B0;
		  /* 821D21B0h */ case   10:  		/* lis R10, -32256 */
		/* 821D21B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821D21B0h case   10:*/		return 0x821D21B4;
		  /* 821D21B4h */ case   11:  		/* lfd FR31, <#[R9 + 1808]> */
		/* 821D21B4h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R9 + 0x00000710) );
		/* 821D21B4h case   11:*/		return 0x821D21B8;
		  /* 821D21B8h */ case   12:  		/* li R22, 0 */
		/* 821D21B8h case   12:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821D21B8h case   12:*/		return 0x821D21BC;
		  /* 821D21BCh */ case   13:  		/* li R8, 0 */
		/* 821D21BCh case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D21BCh case   13:*/		return 0x821D21C0;
		  /* 821D21C0h */ case   14:  		/* addi R6, R1, 1536 */
		/* 821D21C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x600);
		/* 821D21C0h case   14:*/		return 0x821D21C4;
		  /* 821D21C4h */ case   15:  		/* li R19, 1 */
		/* 821D21C4h case   15:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821D21C4h case   15:*/		return 0x821D21C8;
		  /* 821D21C8h */ case   16:  		/* lfd FR13, <#[R10 + 1848]> */
		/* 821D21C8h case   16:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000738) );
		/* 821D21C8h case   16:*/		return 0x821D21CC;
		  /* 821D21CCh */ case   17:  		/* addi R9, R11, -1 */
		/* 821D21CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821D21CCh case   17:*/		return 0x821D21D0;
		  /* 821D21D0h */ case   18:  		/* slw R10, R19, R8 */
		/* 821D21D0h case   18:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R19,regs.R8);
		/* 821D21D0h case   18:*/		return 0x821D21D4;
		  /* 821D21D4h */ case   19:  		/* andc R9, R11, R9 */
		/* 821D21D4h case   19:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821D21D4h case   19:*/		return 0x821D21D8;
		  /* 821D21D8h */ case   20:  		/* and. R5, R10, R25 */
		/* 821D21D8h case   20:*/		cpu::op::and<1>(regs,&regs.R5,regs.R10,regs.R25);
		/* 821D21D8h case   20:*/		return 0x821D21DC;
		  /* 821D21DCh */ case   21:  		/* subf R11, R9, R11 */
		/* 821D21DCh case   21:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D21DCh case   21:*/		return 0x821D21E0;
		  /* 821D21E0h */ case   22:  		/* bc 12, CR0_EQ, 32 */
		/* 821D21E0h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D2200;  }
		/* 821D21E0h case   22:*/		return 0x821D21E4;
		  /* 821D21E4h */ case   23:  		/* lfd FR0, <#[R6]> */
		/* 821D21E4h case   23:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000000) );
		/* 821D21E4h case   23:*/		return 0x821D21E8;
		  /* 821D21E8h */ case   24:  		/* fcmpu CR6, FR0, FR31 */
		/* 821D21E8h case   24:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821D21E8h case   24:*/		return 0x821D21EC;
		  /* 821D21ECh */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 821D21ECh case   25:*/		if ( regs.CR[6].eq ) { return 0x821D21F8;  }
		/* 821D21ECh case   25:*/		return 0x821D21F0;
		  /* 821D21F0h */ case   26:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D21F0h case   26:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D21F0h case   26:*/		return 0x821D21F4;
		  /* 821D21F4h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 821D21F4h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821D2200;  }
		/* 821D21F4h case   27:*/		return 0x821D21F8;
	}
	return 0x821D21F8;
} // Block from 821D2188h-821D21F8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D21F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D21F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D21F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D21F8);
		  /* 821D21F8h */ case    0:  		/* or R27, R10, R27 */
		/* 821D21F8h case    0:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R27);
		/* 821D21F8h case    0:*/		return 0x821D21FC;
		  /* 821D21FCh */ case    1:  		/* or R22, R9, R22 */
		/* 821D21FCh case    1:*/		cpu::op::or<0>(regs,&regs.R22,regs.R9,regs.R22);
		/* 821D21FCh case    1:*/		return 0x821D2200;
	}
	return 0x821D2200;
} // Block from 821D21F8h-821D2200h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2200);
		  /* 821D2200h */ case    0:  		/* addi R8, R8, 1 */
		/* 821D2200h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821D2200h case    0:*/		return 0x821D2204;
		  /* 821D2204h */ case    1:  		/* addi R6, R6, 8 */
		/* 821D2204h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x8);
		/* 821D2204h case    1:*/		return 0x821D2208;
		  /* 821D2208h */ case    2:  		/* bc 16, CR0_LT, -60 */
		/* 821D2208h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821D21CC;  }
		/* 821D2208h case    2:*/		return 0x821D220C;
		  /* 821D220Ch */ case    3:  		/* cmplw CR6, R22, R7 */
		/* 821D220Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R7);
		/* 821D220Ch case    3:*/		return 0x821D2210;
		  /* 821D2210h */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 821D2210h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D222C;  }
		/* 821D2210h case    4:*/		return 0x821D2214;
		  /* 821D2214h */ case    5:  		/* addi R11, R27, -1 */
		/* 821D2214h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 821D2214h case    5:*/		return 0x821D2218;
		  /* 821D2218h */ case    6:  		/* addi R10, R22, -1 */
		/* 821D2218h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0xFFFFFFFF);
		/* 821D2218h case    6:*/		return 0x821D221C;
		  /* 821D221Ch */ case    7:  		/* andc R11, R27, R11 */
		/* 821D221Ch case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 821D221Ch case    7:*/		return 0x821D2220;
		  /* 821D2220h */ case    8:  		/* andc R10, R22, R10 */
		/* 821D2220h case    8:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R22,regs.R10);
		/* 821D2220h case    8:*/		return 0x821D2224;
		  /* 821D2224h */ case    9:  		/* subf R27, R11, R27 */
		/* 821D2224h case    9:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 821D2224h case    9:*/		return 0x821D2228;
		  /* 821D2228h */ case   10:  		/* subf R22, R10, R22 */
		/* 821D2228h case   10:*/		cpu::op::subf<0>(regs,&regs.R22,regs.R10,regs.R22);
		/* 821D2228h case   10:*/		return 0x821D222C;
	}
	return 0x821D222C;
} // Block from 821D2200h-821D222Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D222Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D222C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D222C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D222C);
		  /* 821D222Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821D222Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D222Ch case    0:*/		return 0x821D2230;
		  /* 821D2230h */ case    1:  		/* bc 12, CR6_EQ, 736 */
		/* 821D2230h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D2510;  }
		/* 821D2230h case    1:*/		return 0x821D2234;
		  /* 821D2234h */ case    2:  		/* li R23, 0 */
		/* 821D2234h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821D2234h case    2:*/		return 0x821D2238;
		  /* 821D2238h */ case    3:  		/* li R25, 0 */
		/* 821D2238h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D2238h case    3:*/		return 0x821D223C;
		  /* 821D223Ch */ case    4:  		/* mr R28, R7 */
		/* 821D223Ch case    4:*/		regs.R28 = regs.R7;
		/* 821D223Ch case    4:*/		return 0x821D2240;
		  /* 821D2240h */ case    5:  		/* li R30, 0 */
		/* 821D2240h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D2240h case    5:*/		return 0x821D2244;
		  /* 821D2244h */ case    6:  		/* li R29, 0 */
		/* 821D2244h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D2244h case    6:*/		return 0x821D2248;
		  /* 821D2248h */ case    7:  		/* addi R26, R1, 1536 */
		/* 821D2248h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x600);
		/* 821D2248h case    7:*/		return 0x821D224C;
		  /* 821D224Ch */ case    8:  		/* addi R11, R28, -1 */
		/* 821D224Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 821D224Ch case    8:*/		return 0x821D2250;
		  /* 821D2250h */ case    9:  		/* slw R10, R19, R30 */
		/* 821D2250h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R19,regs.R30);
		/* 821D2250h case    9:*/		return 0x821D2254;
		  /* 821D2254h */ case   10:  		/* andc R31, R28, R11 */
		/* 821D2254h case   10:*/		cpu::op::andc<0>(regs,&regs.R31,regs.R28,regs.R11);
		/* 821D2254h case   10:*/		return 0x821D2258;
		  /* 821D2258h */ case   11:  		/* and. R11, R10, R27 */
		/* 821D2258h case   11:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R27);
		/* 821D2258h case   11:*/		return 0x821D225C;
		  /* 821D225Ch */ case   12:  		/* subf R28, R31, R28 */
		/* 821D225Ch case   12:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R31,regs.R28);
		/* 821D225Ch case   12:*/		return 0x821D2260;
		  /* 821D2260h */ case   13:  		/* bc 12, CR0_EQ, 124 */
		/* 821D2260h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D22DC;  }
		/* 821D2260h case   13:*/		return 0x821D2264;
		  /* 821D2264h */ case   14:  		/* lfd FR0, <#[R26]> */
		/* 821D2264h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R26 + 0x00000000) );
		/* 821D2264h case   14:*/		return 0x821D2268;
		  /* 821D2268h */ case   15:  		/* li R6, 121 */
		/* 821D2268h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x79);
		/* 821D2268h case   15:*/		return 0x821D226C;
		  /* 821D226Ch */ case   16:  		/* fcmpu CR6, FR0, FR31 */
		/* 821D226Ch case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821D226Ch case   16:*/		return 0x821D2270;
		  /* 821D2270h */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 821D2270h case   17:*/		if ( regs.CR[6].eq ) { return 0x821D2278;  }
		/* 821D2270h case   17:*/		return 0x821D2274;
		  /* 821D2274h */ case   18:  		/* li R6, 122 */
		/* 821D2274h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x7A);
		/* 821D2274h case   18:*/		return 0x821D2278;
	}
	return 0x821D2278;
} // Block from 821D222Ch-821D2278h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D2278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2278);
		  /* 821D2278h */ case    0:  		/* lwz R4, <#[R16 + 28]> */
		/* 821D2278h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D2278h case    0:*/		return 0x821D227C;
		  /* 821D227Ch */ case    1:  		/* li R8, 1 */
		/* 821D227Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821D227Ch case    1:*/		return 0x821D2280;
		  /* 821D2280h */ case    2:  		/* li R7, 0 */
		/* 821D2280h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D2280h case    2:*/		return 0x821D2284;
		  /* 821D2284h */ case    3:  		/* addi R5, R4, 24 */
		/* 821D2284h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x18);
		/* 821D2284h case    3:*/		return 0x821D2288;
		  /* 821D2288h */ case    4:  		/* mr R3, R18 */
		/* 821D2288h case    4:*/		regs.R3 = regs.R18;
		/* 821D2288h case    4:*/		return 0x821D228C;
		  /* 821D228Ch */ case    5:  		/* bl 337676 */
		/* 821D228Ch case    5:*/		regs.LR = 0x821D2290; return 0x82224998;
		/* 821D228Ch case    5:*/		return 0x821D2290;
		  /* 821D2290h */ case    6:  		/* mr R15, R3 */
		/* 821D2290h case    6:*/		regs.R15 = regs.R3;
		/* 821D2290h case    6:*/		return 0x821D2294;
		  /* 821D2294h */ case    7:  		/* mr R3, R18 */
		/* 821D2294h case    7:*/		regs.R3 = regs.R18;
		/* 821D2294h case    7:*/		return 0x821D2298;
		  /* 821D2298h */ case    8:  		/* mr R4, R15 */
		/* 821D2298h case    8:*/		regs.R4 = regs.R15;
		/* 821D2298h case    8:*/		return 0x821D229C;
		  /* 821D229Ch */ case    9:  		/* bl -369308 */
		/* 821D229Ch case    9:*/		regs.LR = 0x821D22A0; return 0x82178000;
		/* 821D229Ch case    9:*/		return 0x821D22A0;
		  /* 821D22A0h */ case   10:  		/* mr R14, R3 */
		/* 821D22A0h case   10:*/		regs.R14 = regs.R3;
		/* 821D22A0h case   10:*/		return 0x821D22A4;
		  /* 821D22A4h */ case   11:  		/* lwz R3, <#[R21 + 16]> */
		/* 821D22A4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000010) );
		/* 821D22A4h case   11:*/		return 0x821D22A8;
		  /* 821D22A8h */ case   12:  		/* mr R4, R14 */
		/* 821D22A8h case   12:*/		regs.R4 = regs.R14;
		/* 821D22A8h case   12:*/		return 0x821D22AC;
		  /* 821D22ACh */ case   13:  		/* bl -368868 */
		/* 821D22ACh case   13:*/		regs.LR = 0x821D22B0; return 0x821781C8;
		/* 821D22ACh case   13:*/		return 0x821D22B0;
		  /* 821D22B0h */ case   14:  		/* lwz R10, <#[R15 + 8]> */
		/* 821D22B0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 821D22B0h case   14:*/		return 0x821D22B4;
		  /* 821D22B4h */ case   15:  		/* lis R11, 16384 */
		/* 821D22B4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0x4000);
		/* 821D22B4h case   15:*/		return 0x821D22B8;
		  /* 821D22B8h */ case   16:  		/* ori R10, R10, 32 */
		/* 821D22B8h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x20);
		/* 821D22B8h case   16:*/		return 0x821D22BC;
		  /* 821D22BCh */ case   17:  		/* rlwimi R31, R20, 0, 0, 27 */
		/* 821D22BCh case   17:*/		cpu::op::rlwimi<0,0,0,27>(regs,&regs.R31,regs.R20);
		/* 821D22BCh case   17:*/		return 0x821D22C0;
		  /* 821D22C0h */ case   18:  		/* stw R10, <#[R15 + 8]> */
		/* 821D22C0h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 821D22C0h case   18:*/		return 0x821D22C4;
		  /* 821D22C4h */ case   19:  		/* rlwimi R11, R31, 13, 7, 18 */
		/* 821D22C4h case   19:*/		cpu::op::rlwimi<0,13,7,18>(regs,&regs.R11,regs.R31);
		/* 821D22C4h case   19:*/		return 0x821D22C8;
		  /* 821D22C8h */ case   20:  		/* lwz R10, <#[R14]> */
		/* 821D22C8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000000) );
		/* 821D22C8h case   20:*/		return 0x821D22CC;
		  /* 821D22CCh */ case   21:  		/* rlwinm R10, R10, 0, 19, 6 */
		/* 821D22CCh case   21:*/		cpu::op::rlwinm<0,0,19,6>(regs,&regs.R10,regs.R10);
		/* 821D22CCh case   21:*/		return 0x821D22D0;
		  /* 821D22D0h */ case   22:  		/* or R11, R11, R10 */
		/* 821D22D0h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D22D0h case   22:*/		return 0x821D22D4;
		  /* 821D22D4h */ case   23:  		/* stw R11, <#[R14]> */
		/* 821D22D4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821D22D4h case   23:*/		return 0x821D22D8;
		  /* 821D22D8h */ case   24:  		/* b 32 */
		/* 821D22D8h case   24:*/		return 0x821D22F8;
		/* 821D22D8h case   24:*/		return 0x821D22DC;
	}
	return 0x821D22DC;
} // Block from 821D2278h-821D22DCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D22DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D22DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D22DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D22DC);
		  /* 821D22DCh */ case    0:  		/* li R11, 3 */
		/* 821D22DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821D22DCh case    0:*/		return 0x821D22E0;
		  /* 821D22E0h */ case    1:  		/* slw R10, R30, R29 */
		/* 821D22E0h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R29);
		/* 821D22E0h case    1:*/		return 0x821D22E4;
		  /* 821D22E4h */ case    2:  		/* slw R11, R11, R29 */
		/* 821D22E4h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821D22E4h case    2:*/		return 0x821D22E8;
		  /* 821D22E8h */ case    3:  		/* andc R11, R23, R11 */
		/* 821D22E8h case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821D22E8h case    3:*/		return 0x821D22EC;
		  /* 821D22ECh */ case    4:  		/* addi R25, R25, 1 */
		/* 821D22ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821D22ECh case    4:*/		return 0x821D22F0;
		  /* 821D22F0h */ case    5:  		/* or R23, R11, R10 */
		/* 821D22F0h case    5:*/		cpu::op::or<0>(regs,&regs.R23,regs.R11,regs.R10);
		/* 821D22F0h case    5:*/		return 0x821D22F4;
		  /* 821D22F4h */ case    6:  		/* addi R29, R29, 2 */
		/* 821D22F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 821D22F4h case    6:*/		return 0x821D22F8;
	}
	return 0x821D22F8;
} // Block from 821D22DCh-821D22F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D22F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D22F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D22F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D22F8);
		  /* 821D22F8h */ case    0:  		/* addi R30, R30, 1 */
		/* 821D22F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D22F8h case    0:*/		return 0x821D22FC;
		  /* 821D22FCh */ case    1:  		/* addi R26, R26, 8 */
		/* 821D22FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x8);
		/* 821D22FCh case    1:*/		return 0x821D2300;
		  /* 821D2300h */ case    2:  		/* cmplwi CR6, R30, 4 */
		/* 821D2300h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 821D2300h case    2:*/		return 0x821D2304;
		  /* 821D2304h */ case    3:  		/* bc 12, CR6_LT, -184 */
		/* 821D2304h case    3:*/		if ( regs.CR[6].lt ) { return 0x821D224C;  }
		/* 821D2304h case    3:*/		return 0x821D2308;
		  /* 821D2308h */ case    4:  		/* mr R8, R25 */
		/* 821D2308h case    4:*/		regs.R8 = regs.R25;
		/* 821D2308h case    4:*/		return 0x821D230C;
		  /* 821D230Ch */ case    5:  		/* lwz R4, <#[R16 + 28]> */
		/* 821D230Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D230Ch case    5:*/		return 0x821D2310;
		  /* 821D2310h */ case    6:  		/* li R7, 2 */
		/* 821D2310h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821D2310h case    6:*/		return 0x821D2314;
		  /* 821D2314h */ case    7:  		/* li R6, 3 */
		/* 821D2314h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821D2314h case    7:*/		return 0x821D2318;
		  /* 821D2318h */ case    8:  		/* li R5, 0 */
		/* 821D2318h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D2318h case    8:*/		return 0x821D231C;
		  /* 821D231Ch */ case    9:  		/* mr R3, R18 */
		/* 821D231Ch case    9:*/		regs.R3 = regs.R18;
		/* 821D231Ch case    9:*/		return 0x821D2320;
		  /* 821D2320h */ case   10:  		/* bl 337528 */
		/* 821D2320h case   10:*/		regs.LR = 0x821D2324; return 0x82224998;
		/* 821D2320h case   10:*/		return 0x821D2324;
		  /* 821D2324h */ case   11:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 821D2324h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 821D2324h case   11:*/		return 0x821D2328;
		  /* 821D2328h */ case   12:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821D2328h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821D2328h case   12:*/		return 0x821D232C;
		  /* 821D232Ch */ case   13:  		/* addi R11, R11, 36 */
		/* 821D232Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D232Ch case   13:*/		return 0x821D2330;
		  /* 821D2330h */ case   14:  		/* addi R10, R10, 36 */
		/* 821D2330h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D2330h case   14:*/		return 0x821D2334;
		  /* 821D2334h */ case   15:  		/* addi R9, R11, 4 */
		/* 821D2334h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821D2334h case   15:*/		return 0x821D2338;
		  /* 821D2338h */ case   16:  		/* addi R8, R10, 4 */
		/* 821D2338h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821D2338h case   16:*/		return 0x821D233C;
		  /* 821D233Ch */ case   17:  		/* addi R5, R10, -36 */
		/* 821D233Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFFDC);
		/* 821D233Ch case   17:*/		return 0x821D2340;
		  /* 821D2340h */ case   18:  		/* lwz R6, <#[R11 + 4]> */
		/* 821D2340h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821D2340h case   18:*/		return 0x821D2344;
		  /* 821D2344h */ case   19:  		/* mr R31, R3 */
		/* 821D2344h case   19:*/		regs.R31 = regs.R3;
		/* 821D2344h case   19:*/		return 0x821D2348;
		  /* 821D2348h */ case   20:  		/* mr R7, R24 */
		/* 821D2348h case   20:*/		regs.R7 = regs.R24;
		/* 821D2348h case   20:*/		return 0x821D234C;
		  /* 821D234Ch */ case   21:  		/* stw R6, <#[R10 + 4]> */
		/* 821D234Ch case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821D234Ch case   21:*/		return 0x821D2350;
		  /* 821D2350h */ case   22:  		/* lwz R6, <#[R11 + 4]> */
		/* 821D2350h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821D2350h case   22:*/		return 0x821D2354;
		  /* 821D2354h */ case   23:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821D2354h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821D2354h case   23:*/		return 0x821D2358;
		  /* 821D2358h */ case   24:  		/* stw R8, <#[R6 + 36]> */
		/* 821D2358h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000024) );
		/* 821D2358h case   24:*/		return 0x821D235C;
		  /* 821D235Ch */ case   25:  		/* stw R9, <#[R10]> */
		/* 821D235Ch case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D235Ch case   25:*/		return 0x821D2360;
		  /* 821D2360h */ case   26:  		/* stw R5, <#[R11 + 4]> */
		/* 821D2360h case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821D2360h case   26:*/		return 0x821D2364;
		  /* 821D2364h */ case   27:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D2364h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D2364h case   27:*/		return 0x821D2368;
		  /* 821D2368h */ case   28:  		/* ori R11, R11, 32 */
		/* 821D2368h case   28:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821D2368h case   28:*/		return 0x821D236C;
		  /* 821D236Ch */ case   29:  		/* stw R11, <#[R3 + 8]> */
		/* 821D236Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D236Ch case   29:*/		return 0x821D2370;
		  /* 821D2370h */ case   30:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D2370h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2370h case   30:*/		return 0x821D2374;
		  /* 821D2374h */ case   31:  		/* rlwinm R11, R11, 0, 27, 25 */
		/* 821D2374h case   31:*/		cpu::op::rlwinm<0,0,27,25>(regs,&regs.R11,regs.R11);
		/* 821D2374h case   31:*/		return 0x821D2378;
		  /* 821D2378h */ case   32:  		/* stw R11, <#[R16 + 8]> */
		/* 821D2378h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2378h case   32:*/		return 0x821D237C;
		  /* 821D237Ch */ case   33:  		/* lwz R11, <#[R7]> */
		/* 821D237Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821D237Ch case   33:*/		return 0x821D2380;
		  /* 821D2380h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 821D2380h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D2380h case   34:*/		return 0x821D2384;
		  /* 821D2384h */ case   35:  		/* bc 12, CR6_EQ, 92 */
		/* 821D2384h case   35:*/		if ( regs.CR[6].eq ) { return 0x821D23E0;  }
		/* 821D2384h case   35:*/		return 0x821D2388;
		  /* 821D2388h */ case   36:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D2388h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D2388h case   36:*/		return 0x821D238C;
		  /* 821D238Ch */ case   37:  		/* cmplwi CR6, R10, 0 */
		/* 821D238Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D238Ch case   37:*/		return 0x821D2390;
		  /* 821D2390h */ case   38:  		/* bc 12, CR6_EQ, 60 */
		/* 821D2390h case   38:*/		if ( regs.CR[6].eq ) { return 0x821D23CC;  }
		/* 821D2390h case   38:*/		return 0x821D2394;
		  /* 821D2394h */ case   39:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D2394h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D2394h case   39:*/		return 0x821D2398;
		  /* 821D2398h */ case   40:  		/* addi R10, R10, 4 */
		/* 821D2398h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D2398h case   40:*/		return 0x821D239C;
		  /* 821D239Ch */ case   41:  		/* lwz R9, <#[R10]> */
		/* 821D239Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D239Ch case   41:*/		return 0x821D23A0;
		  /* 821D23A0h */ case   42:  		/* b 12 */
		/* 821D23A0h case   42:*/		return 0x821D23AC;
		/* 821D23A0h case   42:*/		return 0x821D23A4;
		  /* 821D23A4h */ case   43:  		/* addi R10, R9, 8 */
		/* 821D23A4h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D23A4h case   43:*/		return 0x821D23A8;
		  /* 821D23A8h */ case   44:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D23A8h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D23A8h case   44:*/		return 0x821D23AC;
	}
	return 0x821D23AC;
} // Block from 821D22F8h-821D23ACh (45 instructions)

//////////////////////////////////////////////////////
// Block at 821D23ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D23AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D23AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D23AC);
		  /* 821D23ACh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821D23ACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D23ACh case    0:*/		return 0x821D23B0;
		  /* 821D23B0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D23B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D23A4;  }
		/* 821D23B0h case    1:*/		return 0x821D23B4;
		  /* 821D23B4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821D23B4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821D23B4h case    2:*/		return 0x821D23B8;
		  /* 821D23B8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821D23B8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D23B8h case    3:*/		return 0x821D23BC;
		  /* 821D23BCh */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821D23BCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821D23BCh case    4:*/		return 0x821D23C0;
		  /* 821D23C0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821D23C0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D23C0h case    5:*/		return 0x821D23C4;
		  /* 821D23C4h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821D23C4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821D23C4h case    6:*/		return 0x821D23C8;
		  /* 821D23C8h */ case    7:  		/* stw R31, <#[R11 + 12]> */
		/* 821D23C8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D23C8h case    7:*/		return 0x821D23CC;
	}
	return 0x821D23CC;
} // Block from 821D23ACh-821D23CCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D23CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D23CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D23CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D23CC);
		  /* 821D23CCh */ case    0:  		/* lwz R10, <#[R7]> */
		/* 821D23CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821D23CCh case    0:*/		return 0x821D23D0;
		  /* 821D23D0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821D23D0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D23D0h case    1:*/		return 0x821D23D4;
		  /* 821D23D4h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821D23D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D237C;  }
		/* 821D23D4h case    2:*/		return 0x821D23D8;
		  /* 821D23D8h */ case    3:  		/* addi R7, R11, 8 */
		/* 821D23D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 821D23D8h case    3:*/		return 0x821D23DC;
		  /* 821D23DCh */ case    4:  		/* b -96 */
		/* 821D23DCh case    4:*/		return 0x821D237C;
		/* 821D23DCh case    4:*/		return 0x821D23E0;
	}
	return 0x821D23E0;
} // Block from 821D23CCh-821D23E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D23E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D23E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D23E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D23E0);
		  /* 821D23E0h */ case    0:  		/* mr R8, R16 */
		/* 821D23E0h case    0:*/		regs.R8 = regs.R16;
		/* 821D23E0h case    0:*/		return 0x821D23E4;
		  /* 821D23E4h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821D23E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821D23E4h case    1:*/		return 0x821D23E8;
		  /* 821D23E8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821D23E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D23E8h case    2:*/		return 0x821D23EC;
		  /* 821D23ECh */ case    3:  		/* bc 12, CR6_EQ, 112 */
		/* 821D23ECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821D245C;  }
		/* 821D23ECh case    3:*/		return 0x821D23F0;
		  /* 821D23F0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821D23F0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D23F0h case    4:*/		return 0x821D23F4;
		  /* 821D23F4h */ case    5:  		/* rlwinm. R9, R10, 0, 1, 1 */
		/* 821D23F4h case    5:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R10);
		/* 821D23F4h case    5:*/		return 0x821D23F8;
		  /* 821D23F8h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821D23F8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D2408;  }
		/* 821D23F8h case    6:*/		return 0x821D23FC;
		  /* 821D23FCh */ case    7:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821D23FCh case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821D23FCh case    7:*/		return 0x821D2400;
		  /* 821D2400h */ case    8:  		/* mr R10, R19 */
		/* 821D2400h case    8:*/		regs.R10 = regs.R19;
		/* 821D2400h case    8:*/		return 0x821D2404;
		  /* 821D2404h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821D2404h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D240C;  }
		/* 821D2404h case    9:*/		return 0x821D2408;
	}
	return 0x821D2408;
} // Block from 821D23E0h-821D2408h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D2408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2408);
		  /* 821D2408h */ case    0:  		/* li R10, 0 */
		/* 821D2408h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D2408h case    0:*/		return 0x821D240C;
	}
	return 0x821D240C;
} // Block from 821D2408h-821D240Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D240Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D240C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D240C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D240C);
		  /* 821D240Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821D240Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821D240Ch case    0:*/		return 0x821D2410;
		  /* 821D2410h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 821D2410h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D2448;  }
		/* 821D2410h case    1:*/		return 0x821D2414;
		  /* 821D2414h */ case    2:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D2414h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D2414h case    2:*/		return 0x821D2418;
		  /* 821D2418h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821D2418h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D2418h case    3:*/		return 0x821D241C;
		  /* 821D241Ch */ case    4:  		/* b 12 */
		/* 821D241Ch case    4:*/		return 0x821D2428;
		/* 821D241Ch case    4:*/		return 0x821D2420;
		  /* 821D2420h */ case    5:  		/* addi R10, R9, 4 */
		/* 821D2420h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821D2420h case    5:*/		return 0x821D2424;
		  /* 821D2424h */ case    6:  		/* lwz R9, <#[R9 + 4]> */
		/* 821D2424h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821D2424h case    6:*/		return 0x821D2428;
	}
	return 0x821D2428;
} // Block from 821D240Ch-821D2428h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D2428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2428);
		  /* 821D2428h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821D2428h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D2428h case    0:*/		return 0x821D242C;
		  /* 821D242Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D242Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2420;  }
		/* 821D242Ch case    1:*/		return 0x821D2430;
		  /* 821D2430h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821D2430h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D2430h case    2:*/		return 0x821D2434;
		  /* 821D2434h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821D2434h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D2434h case    3:*/		return 0x821D2438;
		  /* 821D2438h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821D2438h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2438h case    4:*/		return 0x821D243C;
		  /* 821D243Ch */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821D243Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D243Ch case    5:*/		return 0x821D2440;
		  /* 821D2440h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821D2440h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2440h case    6:*/		return 0x821D2444;
		  /* 821D2444h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821D2444h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821D2444h case    7:*/		return 0x821D2448;
	}
	return 0x821D2448;
} // Block from 821D2428h-821D2448h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D2448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2448);
		  /* 821D2448h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821D2448h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821D2448h case    0:*/		return 0x821D244C;
		  /* 821D244Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821D244Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D244Ch case    1:*/		return 0x821D2450;
		  /* 821D2450h */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 821D2450h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D23E4;  }
		/* 821D2450h case    2:*/		return 0x821D2454;
		  /* 821D2454h */ case    3:  		/* addi R8, R11, 4 */
		/* 821D2454h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821D2454h case    3:*/		return 0x821D2458;
		  /* 821D2458h */ case    4:  		/* b -116 */
		/* 821D2458h case    4:*/		return 0x821D23E4;
		/* 821D2458h case    4:*/		return 0x821D245C;
	}
	return 0x821D245C;
} // Block from 821D2448h-821D245Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D245Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D245C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D245C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D245C);
		  /* 821D245Ch */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D245Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D245Ch case    0:*/		return 0x821D2460;
		  /* 821D2460h */ case    1:  		/* rlwinm. R11, R11, 7, 31, 31 */
		/* 821D2460h case    1:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R11);
		/* 821D2460h case    1:*/		return 0x821D2464;
		  /* 821D2464h */ case    2:  		/* bc 12, CR0_EQ, 68 */
		/* 821D2464h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D24A8;  }
		/* 821D2464h case    2:*/		return 0x821D2468;
		  /* 821D2468h */ case    3:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D2468h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2468h case    3:*/		return 0x821D246C;
		  /* 821D246Ch */ case    4:  		/* li R11, 4 */
		/* 821D246Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821D246Ch case    4:*/		return 0x821D2470;
		  /* 821D2470h */ case    5:  		/* oris R10, R10, 512 */
		/* 821D2470h case    5:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x200);
		/* 821D2470h case    5:*/		return 0x821D2474;
		  /* 821D2474h */ case    6:  		/* stw R10, <#[R31 + 8]> */
		/* 821D2474h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2474h case    6:*/		return 0x821D2478;
		  /* 821D2478h */ case    7:  		/* lwz R10, <#[R16 + 8]> */
		/* 821D2478h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2478h case    7:*/		return 0x821D247C;
		  /* 821D247Ch */ case    8:  		/* rlwinm R10, R10, 0, 7, 5 */
		/* 821D247Ch case    8:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R10,regs.R10);
		/* 821D247Ch case    8:*/		return 0x821D2480;
		  /* 821D2480h */ case    9:  		/* mtspr CTR, R11 */
		/* 821D2480h case    9:*/		regs.CTR = regs.R11;
		/* 821D2480h case    9:*/		return 0x821D2484;
		  /* 821D2484h */ case   10:  		/* stw R10, <#[R16 + 8]> */
		/* 821D2484h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2484h case   10:*/		return 0x821D2488;
		  /* 821D2488h */ case   11:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D2488h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D2488h case   11:*/		return 0x821D248C;
		  /* 821D248Ch */ case   12:  		/* addi R11, R11, 92 */
		/* 821D248Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5C);
		/* 821D248Ch case   12:*/		return 0x821D2490;
		  /* 821D2490h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821D2490h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2490h case   13:*/		return 0x821D2494;
		  /* 821D2494h */ case   14:  		/* cmplw CR6, R10, R16 */
		/* 821D2494h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 821D2494h case   14:*/		return 0x821D2498;
		  /* 821D2498h */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 821D2498h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D24A0;  }
		/* 821D2498h case   15:*/		return 0x821D249C;
		  /* 821D249Ch */ case   16:  		/* stw R31, <#[R11]> */
		/* 821D249Ch case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821D249Ch case   16:*/		return 0x821D24A0;
	}
	return 0x821D24A0;
} // Block from 821D245Ch-821D24A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D24A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D24A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D24A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D24A0);
		  /* 821D24A0h */ case    0:  		/* addi R11, R11, 4 */
		/* 821D24A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D24A0h case    0:*/		return 0x821D24A4;
		  /* 821D24A4h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821D24A4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821D2490;  }
		/* 821D24A4h case    1:*/		return 0x821D24A8;
	}
	return 0x821D24A8;
} // Block from 821D24A0h-821D24A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D24A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D24A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D24A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D24A8);
		  /* 821D24A8h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821D24A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821D24A8h case    0:*/		return 0x821D24AC;
		  /* 821D24ACh */ case    1:  		/* mr R6, R23 */
		/* 821D24ACh case    1:*/		regs.R6 = regs.R23;
		/* 821D24ACh case    1:*/		return 0x821D24B0;
		  /* 821D24B0h */ case    2:  		/* mr R5, R25 */
		/* 821D24B0h case    2:*/		regs.R5 = regs.R25;
		/* 821D24B0h case    2:*/		return 0x821D24B4;
		  /* 821D24B4h */ case    3:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821D24B4h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821D24B4h case    3:*/		return 0x821D24B8;
		  /* 821D24B8h */ case    4:  		/* mr R4, R16 */
		/* 821D24B8h case    4:*/		regs.R4 = regs.R16;
		/* 821D24B8h case    4:*/		return 0x821D24BC;
		  /* 821D24BCh */ case    5:  		/* mr R3, R18 */
		/* 821D24BCh case    5:*/		regs.R3 = regs.R18;
		/* 821D24BCh case    5:*/		return 0x821D24C0;
		  /* 821D24C0h */ case    6:  		/* bl -369664 */
		/* 821D24C0h case    6:*/		regs.LR = 0x821D24C4; return 0x821780C0;
		/* 821D24C0h case    6:*/		return 0x821D24C4;
		  /* 821D24C4h */ case    7:  		/* mr R30, R3 */
		/* 821D24C4h case    7:*/		regs.R30 = regs.R3;
		/* 821D24C4h case    7:*/		return 0x821D24C8;
		  /* 821D24C8h */ case    8:  		/* mr R5, R3 */
		/* 821D24C8h case    8:*/		regs.R5 = regs.R3;
		/* 821D24C8h case    8:*/		return 0x821D24CC;
		  /* 821D24CCh */ case    9:  		/* li R4, 0 */
		/* 821D24CCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D24CCh case    9:*/		return 0x821D24D0;
		  /* 821D24D0h */ case   10:  		/* mr R3, R31 */
		/* 821D24D0h case   10:*/		regs.R3 = regs.R31;
		/* 821D24D0h case   10:*/		return 0x821D24D4;
		  /* 821D24D4h */ case   11:  		/* bl -400932 */
		/* 821D24D4h case   11:*/		regs.LR = 0x821D24D8; return 0x821706B0;
		/* 821D24D4h case   11:*/		return 0x821D24D8;
		  /* 821D24D8h */ case   12:  		/* mr R5, R30 */
		/* 821D24D8h case   12:*/		regs.R5 = regs.R30;
		/* 821D24D8h case   12:*/		return 0x821D24DC;
		  /* 821D24DCh */ case   13:  		/* li R4, 1 */
		/* 821D24DCh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D24DCh case   13:*/		return 0x821D24E0;
		  /* 821D24E0h */ case   14:  		/* mr R3, R31 */
		/* 821D24E0h case   14:*/		regs.R3 = regs.R31;
		/* 821D24E0h case   14:*/		return 0x821D24E4;
		  /* 821D24E4h */ case   15:  		/* bl -400948 */
		/* 821D24E4h case   15:*/		regs.LR = 0x821D24E8; return 0x821706B0;
		/* 821D24E4h case   15:*/		return 0x821D24E8;
		  /* 821D24E8h */ case   16:  		/* lwz R10, <#[R21]> */
		/* 821D24E8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821D24E8h case   16:*/		return 0x821D24EC;
		  /* 821D24ECh */ case   17:  		/* subf R11, R22, R20 */
		/* 821D24ECh case   17:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R22,regs.R20);
		/* 821D24ECh case   17:*/		return 0x821D24F0;
		  /* 821D24F0h */ case   18:  		/* rlwimi R10, R25, 25, 4, 6 */
		/* 821D24F0h case   18:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R25);
		/* 821D24F0h case   18:*/		return 0x821D24F4;
		  /* 821D24F4h */ case   19:  		/* mr R5, R17 */
		/* 821D24F4h case   19:*/		regs.R5 = regs.R17;
		/* 821D24F4h case   19:*/		return 0x821D24F8;
		  /* 821D24F8h */ case   20:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821D24F8h case   20:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821D24F8h case   20:*/		return 0x821D24FC;
		  /* 821D24FCh */ case   21:  		/* mr R4, R16 */
		/* 821D24FCh case   21:*/		regs.R4 = regs.R16;
		/* 821D24FCh case   21:*/		return 0x821D2500;
		  /* 821D2500h */ case   22:  		/* rlwimi R10, R11, 13, 15, 18 */
		/* 821D2500h case   22:*/		cpu::op::rlwimi<0,13,15,18>(regs,&regs.R10,regs.R11);
		/* 821D2500h case   22:*/		return 0x821D2504;
		  /* 821D2504h */ case   23:  		/* mr R3, R18 */
		/* 821D2504h case   23:*/		regs.R3 = regs.R18;
		/* 821D2504h case   23:*/		return 0x821D2508;
		  /* 821D2508h */ case   24:  		/* stw R10, <#[R21]> */
		/* 821D2508h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821D2508h case   24:*/		return 0x821D250C;
		  /* 821D250Ch */ case   25:  		/* bl -27460 */
		/* 821D250Ch case   25:*/		regs.LR = 0x821D2510; return 0x821CB9C8;
		/* 821D250Ch case   25:*/		return 0x821D2510;
	}
	return 0x821D2510;
} // Block from 821D24A8h-821D2510h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D2510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2510);
		  /* 821D2510h */ case    0:  		/* li R3, 0 */
		/* 821D2510h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821D2510h case    0:*/		return 0x821D2514;
	}
	return 0x821D2514;
} // Block from 821D2510h-821D2514h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D2514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2514);
		  /* 821D2514h */ case    0:  		/* addi R1, R1, 1888 */
		/* 821D2514h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x760);
		/* 821D2514h case    0:*/		return 0x821D2518;
		  /* 821D2518h */ case    1:  		/* addi R12, R1, -152 */
		/* 821D2518h case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821D2518h case    1:*/		return 0x821D251C;
		  /* 821D251Ch */ case    2:  		/* bl -1315008 */
		/* 821D251Ch case    2:*/		regs.LR = 0x821D2520; return 0x8209145C;
		/* 821D251Ch case    2:*/		return 0x821D2520;
		  /* 821D2520h */ case    3:  		/* b -1315504 */
		/* 821D2520h case    3:*/		return 0x82091270;
		/* 821D2520h case    3:*/		return 0x821D2524;
	}
	return 0x821D2524;
} // Block from 821D2514h-821D2524h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2524);
		  /* 821D2524h */ case    0:  		/* rlwinm. R11, R8, 7, 31, 31 */
		/* 821D2524h case    0:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R8);
		/* 821D2524h case    0:*/		return 0x821D2528;
		  /* 821D2528h */ case    1:  		/* bc 12, CR0_EQ, 176 */
		/* 821D2528h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D25D8;  }
		/* 821D2528h case    1:*/		return 0x821D252C;
		  /* 821D252Ch */ case    2:  		/* rlwinm R11, R8, 25, 25, 31 */
		/* 821D252Ch case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R8);
		/* 821D252Ch case    2:*/		return 0x821D2530;
		  /* 821D2530h */ case    3:  		/* cmplwi CR6, R11, 25 */
		/* 821D2530h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000019);
		/* 821D2530h case    3:*/		return 0x821D2534;
		  /* 821D2534h */ case    4:  		/* bc 12, CR6_LT, 12 */
		/* 821D2534h case    4:*/		if ( regs.CR[6].lt ) { return 0x821D2540;  }
		/* 821D2534h case    4:*/		return 0x821D2538;
		  /* 821D2538h */ case    5:  		/* cmplwi CR6, R11, 28 */
		/* 821D2538h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 821D2538h case    5:*/		return 0x821D253C;
		  /* 821D253Ch */ case    6:  		/* bc 4, CR6_GT, 20 */
		/* 821D253Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x821D2550;  }
		/* 821D253Ch case    6:*/		return 0x821D2540;
	}
	return 0x821D2540;
} // Block from 821D2524h-821D2540h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D2540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2540);
		  /* 821D2540h */ case    0:  		/* cmplwi CR6, R11, 67 */
		/* 821D2540h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000043);
		/* 821D2540h case    0:*/		return 0x821D2544;
		  /* 821D2544h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 821D2544h case    1:*/		if ( regs.CR[6].lt ) { return 0x821D2558;  }
		/* 821D2544h case    1:*/		return 0x821D2548;
		  /* 821D2548h */ case    2:  		/* cmplwi CR6, R11, 71 */
		/* 821D2548h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000047);
		/* 821D2548h case    2:*/		return 0x821D254C;
		  /* 821D254Ch */ case    3:  		/* bc 12, CR6_GT, 12 */
		/* 821D254Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x821D2558;  }
		/* 821D254Ch case    3:*/		return 0x821D2550;
	}
	return 0x821D2550;
} // Block from 821D2540h-821D2550h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2550);
		  /* 821D2550h */ case    0:  		/* li R11, 1 */
		/* 821D2550h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D2550h case    0:*/		return 0x821D2554;
		  /* 821D2554h */ case    1:  		/* b 8 */
		/* 821D2554h case    1:*/		return 0x821D255C;
		/* 821D2554h case    1:*/		return 0x821D2558;
	}
	return 0x821D2558;
} // Block from 821D2550h-821D2558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2558);
		  /* 821D2558h */ case    0:  		/* li R11, 0 */
		/* 821D2558h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D2558h case    0:*/		return 0x821D255C;
	}
	return 0x821D255C;
} // Block from 821D2558h-821D255Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D255Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D255C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D255C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D255C);
		  /* 821D255Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D255Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D255Ch case    0:*/		return 0x821D2560;
		  /* 821D2560h */ case    1:  		/* bc 12, CR0_EQ, -80 */
		/* 821D2560h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D2510;  }
		/* 821D2560h case    1:*/		return 0x821D2564;
		  /* 821D2564h */ case    2:  		/* rlwinm R11, R8, 18, 29, 31 */
		/* 821D2564h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R8);
		/* 821D2564h case    2:*/		return 0x821D2568;
		  /* 821D2568h */ case    3:  		/* li R10, 1 */
		/* 821D2568h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821D2568h case    3:*/		return 0x821D256C;
		  /* 821D256Ch */ case    4:  		/* slw R10, R10, R11 */
		/* 821D256Ch case    4:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821D256Ch case    4:*/		return 0x821D2570;
		  /* 821D2570h */ case    5:  		/* addi R10, R10, -1 */
		/* 821D2570h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D2570h case    5:*/		return 0x821D2574;
		  /* 821D2574h */ case    6:  		/* cmplw CR6, R25, R10 */
		/* 821D2574h case    6:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 821D2574h case    6:*/		return 0x821D2578;
		  /* 821D2578h */ case    7:  		/* bc 4, CR6_EQ, -104 */
		/* 821D2578h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D2510;  }
		/* 821D2578h case    7:*/		return 0x821D257C;
		  /* 821D257Ch */ case    8:  		/* li R10, 0 */
		/* 821D257Ch case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D257Ch case    8:*/		return 0x821D2580;
		  /* 821D2580h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821D2580h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D2580h case    9:*/		return 0x821D2584;
		  /* 821D2584h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 821D2584h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D25B0;  }
		/* 821D2584h case   10:*/		return 0x821D2588;
		  /* 821D2588h */ case   11:  		/* lis R8, -32256 */
		/* 821D2588h case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 821D2588h case   11:*/		return 0x821D258C;
		  /* 821D258Ch */ case   12:  		/* addi R9, R1, 1536 */
		/* 821D258Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x600);
		/* 821D258Ch case   12:*/		return 0x821D2590;
		  /* 821D2590h */ case   13:  		/* lfd FR0, <#[R8 + 1808]> */
		/* 821D2590h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R8 + 0x00000710) );
		/* 821D2590h case   13:*/		return 0x821D2594;
		  /* 821D2594h */ case   14:  		/* lfd FR13, <#[R9]> */
		/* 821D2594h case   14:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00000000) );
		/* 821D2594h case   14:*/		return 0x821D2598;
		  /* 821D2598h */ case   15:  		/* fcmpu CR6, FR13, FR0 */
		/* 821D2598h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821D2598h case   15:*/		return 0x821D259C;
		  /* 821D259Ch */ case   16:  		/* bc 4, CR6_EQ, -140 */
		/* 821D259Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D2510;  }
		/* 821D259Ch case   16:*/		return 0x821D25A0;
		  /* 821D25A0h */ case   17:  		/* addi R10, R10, 1 */
		/* 821D25A0h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D25A0h case   17:*/		return 0x821D25A4;
		  /* 821D25A4h */ case   18:  		/* addi R9, R9, 8 */
		/* 821D25A4h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 821D25A4h case   18:*/		return 0x821D25A8;
		  /* 821D25A8h */ case   19:  		/* cmplw CR6, R10, R11 */
		/* 821D25A8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D25A8h case   19:*/		return 0x821D25AC;
		  /* 821D25ACh */ case   20:  		/* bc 12, CR6_LT, -24 */
		/* 821D25ACh case   20:*/		if ( regs.CR[6].lt ) { return 0x821D2594;  }
		/* 821D25ACh case   20:*/		return 0x821D25B0;
	}
	return 0x821D25B0;
} // Block from 821D255Ch-821D25B0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D25B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D25B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D25B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D25B0);
		  /* 821D25B0h */ case    0:  		/* mr R6, R18 */
		/* 821D25B0h case    0:*/		regs.R6 = regs.R18;
		/* 821D25B0h case    0:*/		return 0x821D25B4;
		  /* 821D25B4h */ case    1:  		/* lwz R3, <#[R16 + 28]> */
		/* 821D25B4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D25B4h case    1:*/		return 0x821D25B8;
		  /* 821D25B8h */ case    2:  		/* mr R5, R16 */
		/* 821D25B8h case    2:*/		regs.R5 = regs.R16;
		/* 821D25B8h case    2:*/		return 0x821D25BC;
		  /* 821D25BCh */ case    3:  		/* li R4, 0 */
		/* 821D25BCh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D25BCh case    3:*/		return 0x821D25C0;
		  /* 821D25C0h */ case    4:  		/* bl 382416 */
		/* 821D25C0h case    4:*/		regs.LR = 0x821D25C4; return 0x8222FB90;
		/* 821D25C0h case    4:*/		return 0x821D25C4;
		  /* 821D25C4h */ case    5:  		/* mr R3, R16 */
		/* 821D25C4h case    5:*/		regs.R3 = regs.R16;
		/* 821D25C4h case    5:*/		return 0x821D25C8;
		  /* 821D25C8h */ case    6:  		/* bl -449608 */
		/* 821D25C8h case    6:*/		regs.LR = 0x821D25CC; return 0x82164980;
		/* 821D25C8h case    6:*/		return 0x821D25CC;
		  /* 821D25CCh */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D25CCh case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D25CCh case    7:*/		return 0x821D25D0;
		  /* 821D25D0h */ case    8:  		/* bc 12, CR0_EQ, -192 */
		/* 821D25D0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D2510;  }
		/* 821D25D0h case    8:*/		return 0x821D25D4;
		  /* 821D25D4h */ case    9:  		/* b -1276 */
		/* 821D25D4h case    9:*/		return 0x821D20D8;
		/* 821D25D4h case    9:*/		return 0x821D25D8;
	}
	return 0x821D25D8;
} // Block from 821D25B0h-821D25D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D25D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D25D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D25D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D25D8);
		  /* 821D25D8h */ case    0:  		/* rlwinm R11, R8, 18, 29, 31 */
		/* 821D25D8h case    0:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R8);
		/* 821D25D8h case    0:*/		return 0x821D25DC;
		  /* 821D25DCh */ case    1:  		/* slw R11, R23, R11 */
		/* 821D25DCh case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821D25DCh case    1:*/		return 0x821D25E0;
		  /* 821D25E0h */ case    2:  		/* addi R11, R11, -1 */
		/* 821D25E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D25E0h case    2:*/		return 0x821D25E4;
		  /* 821D25E4h */ case    3:  		/* cmplw CR6, R25, R11 */
		/* 821D25E4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821D25E4h case    3:*/		return 0x821D25E8;
		  /* 821D25E8h */ case    4:  		/* bc 4, CR6_EQ, 92 */
		/* 821D25E8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D2644;  }
		/* 821D25E8h case    4:*/		return 0x821D25EC;
		  /* 821D25ECh */ case    5:  		/* rlwinm R11, R8, 0, 18, 24 */
		/* 821D25ECh case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R8);
		/* 821D25ECh case    5:*/		return 0x821D25F0;
		  /* 821D25F0h */ case    6:  		/* lwz R9, <#[R1 + 352]> */
		/* 821D25F0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000160) );
		/* 821D25F0h case    6:*/		return 0x821D25F4;
		  /* 821D25F4h */ case    7:  		/* cmplwi CR6, R11, 14080 */
		/* 821D25F4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821D25F4h case    7:*/		return 0x821D25F8;
		  /* 821D25F8h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821D25F8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D2604;  }
		/* 821D25F8h case    8:*/		return 0x821D25FC;
		  /* 821D25FCh */ case    9:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821D25FCh case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821D25FCh case    9:*/		return 0x821D2600;
		  /* 821D2600h */ case   10:  		/* bc 4, CR0_EQ, 68 */
		/* 821D2600h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821D2644;  }
		/* 821D2600h case   10:*/		return 0x821D2604;
	}
	return 0x821D2604;
} // Block from 821D25D8h-821D2604h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D2604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2604);
		  /* 821D2604h */ case    0:  		/* mr R8, R17 */
		/* 821D2604h case    0:*/		regs.R8 = regs.R17;
		/* 821D2604h case    0:*/		return 0x821D2608;
		  /* 821D2608h */ case    1:  		/* addi R7, R1, 1536 */
		/* 821D2608h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x600);
		/* 821D2608h case    1:*/		return 0x821D260C;
		  /* 821D260Ch */ case    2:  		/* mr R6, R25 */
		/* 821D260Ch case    2:*/		regs.R6 = regs.R25;
		/* 821D260Ch case    2:*/		return 0x821D2610;
		  /* 821D2610h */ case    3:  		/* mr R5, R16 */
		/* 821D2610h case    3:*/		regs.R5 = regs.R16;
		/* 821D2610h case    3:*/		return 0x821D2614;
		  /* 821D2614h */ case    4:  		/* mr R4, R18 */
		/* 821D2614h case    4:*/		regs.R4 = regs.R18;
		/* 821D2614h case    4:*/		return 0x821D2618;
		  /* 821D2618h */ case    5:  		/* addi R3, R1, 864 */
		/* 821D2618h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x360);
		/* 821D2618h case    5:*/		return 0x821D261C;
		  /* 821D261Ch */ case    6:  		/* bl 377884 */
		/* 821D261Ch case    6:*/		regs.LR = 0x821D2620; return 0x8222EA38;
		/* 821D261Ch case    6:*/		return 0x821D2620;
		  /* 821D2620h */ case    7:  		/* lwz R11, <#[R1 + 864]> */
		/* 821D2620h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000360) );
		/* 821D2620h case    7:*/		return 0x821D2624;
		  /* 821D2624h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821D2624h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D2624h case    8:*/		return 0x821D2628;
		  /* 821D2628h */ case    9:  		/* bc 12, CR6_EQ, 608 */
		/* 821D2628h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D2888;  }
		/* 821D2628h case    9:*/		return 0x821D262C;
		  /* 821D262Ch */ case   10:  		/* lwz R11, <#[R1 + 868]> */
		/* 821D262Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000364) );
		/* 821D262Ch case   10:*/		return 0x821D2630;
		  /* 821D2630h */ case   11:  		/* lbz R10, <#[R22]> */
		/* 821D2630h case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000000) );
		/* 821D2630h case   11:*/		return 0x821D2634;
		  /* 821D2634h */ case   12:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 821D2634h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D2634h case   12:*/		return 0x821D2638;
		  /* 821D2638h */ case   13:  		/* or R11, R11, R10 */
		/* 821D2638h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D2638h case   13:*/		return 0x821D263C;
		  /* 821D263Ch */ case   14:  		/* stb R11, <#[R22]> */
		/* 821D263Ch case   14:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D263Ch case   14:*/		return 0x821D2640;
		  /* 821D2640h */ case   15:  		/* b 584 */
		/* 821D2640h case   15:*/		return 0x821D2888;
		/* 821D2640h case   15:*/		return 0x821D2644;
	}
	return 0x821D2644;
} // Block from 821D2604h-821D2644h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D2644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2644);
		  /* 821D2644h */ case    0:  		/* rlwinm R11, R8, 25, 25, 31 */
		/* 821D2644h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R8);
		/* 821D2644h case    0:*/		return 0x821D2648;
		  /* 821D2648h */ case    1:  		/* cmplwi CR6, R11, 110 */
		/* 821D2648h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821D2648h case    1:*/		return 0x821D264C;
		  /* 821D264Ch */ case    2:  		/* bc 12, CR6_EQ, 572 */
		/* 821D264Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821D2888;  }
		/* 821D264Ch case    2:*/		return 0x821D2650;
		  /* 821D2650h */ case    3:  		/* cmplwi CR6, R11, 97 */
		/* 821D2650h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000061);
		/* 821D2650h case    3:*/		return 0x821D2654;
		  /* 821D2654h */ case    4:  		/* bc 12, CR6_EQ, 564 */
		/* 821D2654h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D2888;  }
		/* 821D2654h case    4:*/		return 0x821D2658;
		  /* 821D2658h */ case    5:  		/* cmplwi CR6, R11, 96 */
		/* 821D2658h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 821D2658h case    5:*/		return 0x821D265C;
		  /* 821D265Ch */ case    6:  		/* bc 12, CR6_EQ, 556 */
		/* 821D265Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821D2888;  }
		/* 821D265Ch case    6:*/		return 0x821D2660;
		  /* 821D2660h */ case    7:  		/* lwz R31, <#[R16 + 4]> */
		/* 821D2660h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000004) );
		/* 821D2660h case    7:*/		return 0x821D2664;
		  /* 821D2664h */ case    8:  		/* addi R26, R16, 4 */
		/* 821D2664h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R16,0x4);
		/* 821D2664h case    8:*/		return 0x821D2668;
		  /* 821D2668h */ case    9:  		/* li R29, 0 */
		/* 821D2668h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D2668h case    9:*/		return 0x821D266C;
		  /* 821D266Ch */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821D266Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D266Ch case   10:*/		return 0x821D2670;
		  /* 821D2670h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 821D2670h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D26A0;  }
		/* 821D2670h case   11:*/		return 0x821D2674;
		  /* 821D2674h */ case   12:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D2674h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D2674h case   12:*/		return 0x821D2678;
		  /* 821D2678h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821D2678h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D2678h case   13:*/		return 0x821D267C;
		  /* 821D267Ch */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 821D267Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821D2698;  }
		/* 821D267Ch case   14:*/		return 0x821D2680;
		  /* 821D2680h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 821D2680h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2680h case   15:*/		return 0x821D2684;
		  /* 821D2684h */ case   16:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D2684h case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D2684h case   16:*/		return 0x821D2688;
		  /* 821D2688h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 821D2688h case   17:*/		if ( regs.CR[0].eq ) { return 0x821D2698;  }
		/* 821D2688h case   17:*/		return 0x821D268C;
		  /* 821D268Ch */ case   18:  		/* mr R3, R31 */
		/* 821D268Ch case   18:*/		regs.R3 = regs.R31;
		/* 821D268Ch case   18:*/		return 0x821D2690;
		  /* 821D2690h */ case   19:  		/* bl -451664 */
		/* 821D2690h case   19:*/		regs.LR = 0x821D2694; return 0x82164240;
		/* 821D2690h case   19:*/		return 0x821D2694;
		  /* 821D2694h */ case   20:  		/* or R29, R3, R29 */
		/* 821D2694h case   20:*/		cpu::op::or<0>(regs,&regs.R29,regs.R3,regs.R29);
		/* 821D2694h case   20:*/		return 0x821D2698;
	}
	return 0x821D2698;
} // Block from 821D2644h-821D2698h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D2698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2698);
		  /* 821D2698h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821D2698h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2698h case    0:*/		return 0x821D269C;
		  /* 821D269Ch */ case    1:  		/* b -48 */
		/* 821D269Ch case    1:*/		return 0x821D266C;
		/* 821D269Ch case    1:*/		return 0x821D26A0;
	}
	return 0x821D26A0;
} // Block from 821D2698h-821D26A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D26A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D26A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D26A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D26A0);
		  /* 821D26A0h */ case    0:  		/* and. R11, R29, R25 */
		/* 821D26A0h case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R29,regs.R25);
		/* 821D26A0h case    0:*/		return 0x821D26A4;
		  /* 821D26A4h */ case    1:  		/* bc 12, CR0_EQ, 484 */
		/* 821D26A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D2888;  }
		/* 821D26A4h case    1:*/		return 0x821D26A8;
		  /* 821D26A8h */ case    2:  		/* lis R11, -28311 */
		/* 821D26A8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821D26A8h case    2:*/		return 0x821D26AC;
		  /* 821D26ACh */ case    3:  		/* lis R10, 0 */
		/* 821D26ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821D26ACh case    3:*/		return 0x821D26B0;
		  /* 821D26B0h */ case    4:  		/* ori R11, R11, 5192 */
		/* 821D26B0h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821D26B0h case    4:*/		return 0x821D26B4;
		  /* 821D26B4h */ case    5:  		/* ori R10, R10, 36262 */
		/* 821D26B4h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821D26B4h case    5:*/		return 0x821D26B8;
		  /* 821D26B8h */ case    6:  		/* rldicl R9, R29, 0, 32 */
		/* 821D26B8h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R29);
		/* 821D26B8h case    6:*/		return 0x821D26BC;
		  /* 821D26BCh */ case    7:  		/* rldimi R11, R10, 32, 0 */
		/* 821D26BCh case    7:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821D26BCh case    7:*/		return 0x821D26C0;
		  /* 821D26C0h */ case    8:  		/* mr R5, R16 */
		/* 821D26C0h case    8:*/		regs.R5 = regs.R16;
		/* 821D26C0h case    8:*/		return 0x821D26C4;
		  /* 821D26C4h */ case    9:  		/* srd R11, R11, R9 */
		/* 821D26C4h case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D26C4h case    9:*/		return 0x821D26C8;
		  /* 821D26C8h */ case   10:  		/* srd R11, R11, R9 */
		/* 821D26C8h case   10:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D26C8h case   10:*/		return 0x821D26CC;
		  /* 821D26CCh */ case   11:  		/* srd R11, R11, R9 */
		/* 821D26CCh case   11:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D26CCh case   11:*/		return 0x821D26D0;
		  /* 821D26D0h */ case   12:  		/* li R4, 1 */
		/* 821D26D0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D26D0h case   12:*/		return 0x821D26D4;
		  /* 821D26D4h */ case   13:  		/* rlwinm R6, R11, 0, 29, 31 */
		/* 821D26D4h case   13:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R11);
		/* 821D26D4h case   13:*/		return 0x821D26D8;
		  /* 821D26D8h */ case   14:  		/* mr R3, R18 */
		/* 821D26D8h case   14:*/		regs.R3 = regs.R18;
		/* 821D26D8h case   14:*/		return 0x821D26DC;
		  /* 821D26DCh */ case   15:  		/* bl -215356 */
		/* 821D26DCh case   15:*/		regs.LR = 0x821D26E0; return 0x8219DDA0;
		/* 821D26DCh case   15:*/		return 0x821D26E0;
		  /* 821D26E0h */ case   16:  		/* mr R28, R3 */
		/* 821D26E0h case   16:*/		regs.R28 = regs.R3;
		/* 821D26E0h case   16:*/		return 0x821D26E4;
		  /* 821D26E4h */ case   17:  		/* li R30, 0 */
		/* 821D26E4h case   17:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D26E4h case   17:*/		return 0x821D26E8;
		  /* 821D26E8h */ case   18:  		/* li R27, 0 */
		/* 821D26E8h case   18:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821D26E8h case   18:*/		return 0x821D26EC;
		  /* 821D26ECh */ case   19:  		/* cmplwi CR6, R29, 0 */
		/* 821D26ECh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D26ECh case   19:*/		return 0x821D26F0;
		  /* 821D26F0h */ case   20:  		/* bc 12, CR6_EQ, 196 */
		/* 821D26F0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D27B4;  }
		/* 821D26F0h case   20:*/		return 0x821D26F4;
		  /* 821D26F4h */ case   21:  		/* addi R11, R29, -1 */
		/* 821D26F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821D26F4h case   21:*/		return 0x821D26F8;
		  /* 821D26F8h */ case   22:  		/* mr R3, R18 */
		/* 821D26F8h case   22:*/		regs.R3 = regs.R18;
		/* 821D26F8h case   22:*/		return 0x821D26FC;
		  /* 821D26FCh */ case   23:  		/* andc R11, R29, R11 */
		/* 821D26FCh case   23:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821D26FCh case   23:*/		return 0x821D2700;
		  /* 821D2700h */ case   24:  		/* cntlzw R11, R11 */
		/* 821D2700h case   24:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D2700h case   24:*/		return 0x821D2704;
		  /* 821D2704h */ case   25:  		/* subfic R31, R11, 31 */
		/* 821D2704h case   25:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821D2704h case   25:*/		return 0x821D2708;
		  /* 821D2708h */ case   26:  		/* slw R11, R23, R31 */
		/* 821D2708h case   26:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R31);
		/* 821D2708h case   26:*/		return 0x821D270C;
		  /* 821D270Ch */ case   27:  		/* and. R11, R11, R25 */
		/* 821D270Ch case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821D270Ch case   27:*/		return 0x821D2710;
		  /* 821D2710h */ case   28:  		/* bc 12, CR0_EQ, 92 */
		/* 821D2710h case   28:*/		if ( regs.CR[0].eq ) { return 0x821D276C;  }
		/* 821D2710h case   28:*/		return 0x821D2714;
		  /* 821D2714h */ case   29:  		/* rlwinm R11, R31, 1, 0, 30 */
		/* 821D2714h case   29:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R31);
		/* 821D2714h case   29:*/		return 0x821D2718;
		  /* 821D2718h */ case   30:  		/* addi R9, R1, 352 */
		/* 821D2718h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 821D2718h case   30:*/		return 0x821D271C;
		  /* 821D271Ch */ case   31:  		/* addi R11, R11, 1 */
		/* 821D271Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D271Ch case   31:*/		return 0x821D2720;
		  /* 821D2720h */ case   32:  		/* li R8, 2 */
		/* 821D2720h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 821D2720h case   32:*/		return 0x821D2724;
		  /* 821D2724h */ case   33:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821D2724h case   33:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821D2724h case   33:*/		return 0x821D2728;
		  /* 821D2728h */ case   34:  		/* rlwinm R10, R31, 30, 3, 29 */
		/* 821D2728h case   34:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R10,regs.R31);
		/* 821D2728h case   34:*/		return 0x821D272C;
		  /* 821D272Ch */ case   35:  		/* slw R11, R8, R11 */
		/* 821D272Ch case   35:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821D272Ch case   35:*/		return 0x821D2730;
		  /* 821D2730h */ case   36:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821D2730h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D2730h case   36:*/		return 0x821D2734;
		  /* 821D2734h */ case   37:  		/* rlwinm R7, R31, 1, 27, 30 */
		/* 821D2734h case   37:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R7,regs.R31);
		/* 821D2734h case   37:*/		return 0x821D2738;
		  /* 821D2738h */ case   38:  		/* addi R11, R11, -1 */
		/* 821D2738h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D2738h case   38:*/		return 0x821D273C;
		  /* 821D273Ch */ case   39:  		/* slw R9, R24, R7 */
		/* 821D273Ch case   39:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R7);
		/* 821D273Ch case   39:*/		return 0x821D2740;
		  /* 821D2740h */ case   40:  		/* and R11, R11, R10 */
		/* 821D2740h case   40:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D2740h case   40:*/		return 0x821D2744;
		  /* 821D2744h */ case   41:  		/* rlwinm R10, R31, 3, 0, 28 */
		/* 821D2744h case   41:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R31);
		/* 821D2744h case   41:*/		return 0x821D2748;
		  /* 821D2748h */ case   42:  		/* addi R8, R1, 1536 */
		/* 821D2748h case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x600);
		/* 821D2748h case   42:*/		return 0x821D274C;
		  /* 821D274Ch */ case   43:  		/* and R11, R11, R9 */
		/* 821D274Ch case   43:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D274Ch case   43:*/		return 0x821D2750;
		  /* 821D2750h */ case   44:  		/* srw R5, R11, R7 */
		/* 821D2750h case   44:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R11,regs.R7);
		/* 821D2750h case   44:*/		return 0x821D2754;
		  /* 821D2754h */ case   45:  		/* lfdx FR1, <#[R10 + R8]> */
		/* 821D2754h case   45:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821D2754h case   45:*/		return 0x821D2758;
		  /* 821D2758h */ case   46:  		/* bl 361544 */
		/* 821D2758h case   46:*/		regs.LR = 0x821D275C; return 0x8222ABA0;
		/* 821D2758h case   46:*/		return 0x821D275C;
		  /* 821D275Ch */ case   47:  		/* mr R4, R3 */
		/* 821D275Ch case   47:*/		regs.R4 = regs.R3;
		/* 821D275Ch case   47:*/		return 0x821D2760;
		  /* 821D2760h */ case   48:  		/* li R5, 0 */
		/* 821D2760h case   48:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D2760h case   48:*/		return 0x821D2764;
		  /* 821D2764h */ case   49:  		/* mr R3, R18 */
		/* 821D2764h case   49:*/		regs.R3 = regs.R18;
		/* 821D2764h case   49:*/		return 0x821D2768;
		  /* 821D2768h */ case   50:  		/* b 12 */
		/* 821D2768h case   50:*/		return 0x821D2774;
		/* 821D2768h case   50:*/		return 0x821D276C;
	}
	return 0x821D276C;
} // Block from 821D26A0h-821D276Ch (51 instructions)

//////////////////////////////////////////////////////
// Block at 821D276Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D276C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D276C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D276C);
		  /* 821D276Ch */ case    0:  		/* mr R5, R31 */
		/* 821D276Ch case    0:*/		regs.R5 = regs.R31;
		/* 821D276Ch case    0:*/		return 0x821D2770;
		  /* 821D2770h */ case    1:  		/* mr R4, R16 */
		/* 821D2770h case    1:*/		regs.R4 = regs.R16;
		/* 821D2770h case    1:*/		return 0x821D2774;
	}
	return 0x821D2774;
} // Block from 821D276Ch-821D2774h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2774);
		  /* 821D2774h */ case    0:  		/* bl -370276 */
		/* 821D2774h case    0:*/		regs.LR = 0x821D2778; return 0x82178110;
		/* 821D2774h case    0:*/		return 0x821D2778;
		  /* 821D2778h */ case    1:  		/* mr R5, R3 */
		/* 821D2778h case    1:*/		regs.R5 = regs.R3;
		/* 821D2778h case    1:*/		return 0x821D277C;
		  /* 821D277Ch */ case    2:  		/* mr R4, R30 */
		/* 821D277Ch case    2:*/		regs.R4 = regs.R30;
		/* 821D277Ch case    2:*/		return 0x821D2780;
		  /* 821D2780h */ case    3:  		/* mr R3, R28 */
		/* 821D2780h case    3:*/		regs.R3 = regs.R28;
		/* 821D2780h case    3:*/		return 0x821D2784;
		  /* 821D2784h */ case    4:  		/* bl -401620 */
		/* 821D2784h case    4:*/		regs.LR = 0x821D2788; return 0x821706B0;
		/* 821D2784h case    4:*/		return 0x821D2788;
		  /* 821D2788h */ case    5:  		/* rlwinm R11, R31, 1, 0, 30 */
		/* 821D2788h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R31);
		/* 821D2788h case    5:*/		return 0x821D278C;
		  /* 821D278Ch */ case    6:  		/* li R10, 3 */
		/* 821D278Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821D278Ch case    6:*/		return 0x821D2790;
		  /* 821D2790h */ case    7:  		/* addi R9, R29, -1 */
		/* 821D2790h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0xFFFFFFFF);
		/* 821D2790h case    7:*/		return 0x821D2794;
		  /* 821D2794h */ case    8:  		/* slw R10, R10, R11 */
		/* 821D2794h case    8:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821D2794h case    8:*/		return 0x821D2798;
		  /* 821D2798h */ case    9:  		/* slw R11, R30, R11 */
		/* 821D2798h case    9:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821D2798h case    9:*/		return 0x821D279C;
		  /* 821D279Ch */ case   10:  		/* andc R10, R27, R10 */
		/* 821D279Ch case   10:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821D279Ch case   10:*/		return 0x821D27A0;
		  /* 821D27A0h */ case   11:  		/* andc R9, R29, R9 */
		/* 821D27A0h case   11:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R29,regs.R9);
		/* 821D27A0h case   11:*/		return 0x821D27A4;
		  /* 821D27A4h */ case   12:  		/* or R27, R10, R11 */
		/* 821D27A4h case   12:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 821D27A4h case   12:*/		return 0x821D27A8;
		  /* 821D27A8h */ case   13:  		/* addi R30, R30, 1 */
		/* 821D27A8h case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D27A8h case   13:*/		return 0x821D27AC;
		  /* 821D27ACh */ case   14:  		/* subf R29, R9, R29 */
		/* 821D27ACh case   14:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R9,regs.R29);
		/* 821D27ACh case   14:*/		return 0x821D27B0;
		  /* 821D27B0h */ case   15:  		/* b -196 */
		/* 821D27B0h case   15:*/		return 0x821D26EC;
		/* 821D27B0h case   15:*/		return 0x821D27B4;
	}
	return 0x821D27B4;
} // Block from 821D2774h-821D27B4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D27B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D27B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D27B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D27B4);
		  /* 821D27B4h */ case    0:  		/* mr R8, R26 */
		/* 821D27B4h case    0:*/		regs.R8 = regs.R26;
		/* 821D27B4h case    0:*/		return 0x821D27B8;
		  /* 821D27B8h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821D27B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821D27B8h case    1:*/		return 0x821D27BC;
		  /* 821D27BCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821D27BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D27BCh case    2:*/		return 0x821D27C0;
		  /* 821D27C0h */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821D27C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D2878;  }
		/* 821D27C0h case    3:*/		return 0x821D27C4;
		  /* 821D27C4h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D27C4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D27C4h case    4:*/		return 0x821D27C8;
		  /* 821D27C8h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821D27C8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D27C8h case    5:*/		return 0x821D27CC;
		  /* 821D27CCh */ case    6:  		/* bc 12, CR6_EQ, 152 */
		/* 821D27CCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821D2864;  }
		/* 821D27CCh case    6:*/		return 0x821D27D0;
		  /* 821D27D0h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821D27D0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D27D0h case    7:*/		return 0x821D27D4;
		  /* 821D27D4h */ case    8:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821D27D4h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821D27D4h case    8:*/		return 0x821D27D8;
		  /* 821D27D8h */ case    9:  		/* bc 12, CR0_EQ, 140 */
		/* 821D27D8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D2864;  }
		/* 821D27D8h case    9:*/		return 0x821D27DC;
		  /* 821D27DCh */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D27DCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D27DCh case   10:*/		return 0x821D27E0;
		  /* 821D27E0h */ case   11:  		/* cmplw CR6, R10, R28 */
		/* 821D27E0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 821D27E0h case   11:*/		return 0x821D27E4;
		  /* 821D27E4h */ case   12:  		/* bc 12, CR6_EQ, 128 */
		/* 821D27E4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821D2864;  }
		/* 821D27E4h case   12:*/		return 0x821D27E8;
		  /* 821D27E8h */ case   13:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D27E8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D27E8h case   13:*/		return 0x821D27EC;
		  /* 821D27ECh */ case   14:  		/* addi R10, R10, 4 */
		/* 821D27ECh case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D27ECh case   14:*/		return 0x821D27F0;
		  /* 821D27F0h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821D27F0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D27F0h case   15:*/		return 0x821D27F4;
		  /* 821D27F4h */ case   16:  		/* b 12 */
		/* 821D27F4h case   16:*/		return 0x821D2800;
		/* 821D27F4h case   16:*/		return 0x821D27F8;
		  /* 821D27F8h */ case   17:  		/* addi R10, R9, 8 */
		/* 821D27F8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D27F8h case   17:*/		return 0x821D27FC;
		  /* 821D27FCh */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D27FCh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D27FCh case   18:*/		return 0x821D2800;
	}
	return 0x821D2800;
} // Block from 821D27B4h-821D2800h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D2800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2800);
		  /* 821D2800h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821D2800h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D2800h case    0:*/		return 0x821D2804;
		  /* 821D2804h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D2804h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D27F8;  }
		/* 821D2804h case    1:*/		return 0x821D2808;
		  /* 821D2808h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821D2808h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2808h case    2:*/		return 0x821D280C;
		  /* 821D280Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821D280Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D280Ch case    3:*/		return 0x821D2810;
		  /* 821D2810h */ case    4:  		/* lwz R10, <#[R28 + 4]> */
		/* 821D2810h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821D2810h case    4:*/		return 0x821D2814;
		  /* 821D2814h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821D2814h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2814h case    5:*/		return 0x821D2818;
		  /* 821D2818h */ case    6:  		/* stw R11, <#[R28 + 4]> */
		/* 821D2818h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821D2818h case    6:*/		return 0x821D281C;
		  /* 821D281Ch */ case    7:  		/* stw R28, <#[R11 + 12]> */
		/* 821D281Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D281Ch case    7:*/		return 0x821D2820;
		  /* 821D2820h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821D2820h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2820h case    8:*/		return 0x821D2824;
		  /* 821D2824h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821D2824h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821D2824h case    9:*/		return 0x821D2828;
		  /* 821D2828h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821D2828h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821D2828h case   10:*/		return 0x821D282C;
		  /* 821D282Ch */ case   11:  		/* srw R9, R27, R9 */
		/* 821D282Ch case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821D282Ch case   11:*/		return 0x821D2830;
		  /* 821D2830h */ case   12:  		/* srw R7, R27, R7 */
		/* 821D2830h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R27,regs.R7);
		/* 821D2830h case   12:*/		return 0x821D2834;
		  /* 821D2834h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821D2834h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821D2834h case   13:*/		return 0x821D2838;
		  /* 821D2838h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821D2838h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821D2838h case   14:*/		return 0x821D283C;
		  /* 821D283Ch */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821D283Ch case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821D283Ch case   15:*/		return 0x821D2840;
		  /* 821D2840h */ case   16:  		/* srw R9, R27, R9 */
		/* 821D2840h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821D2840h case   16:*/		return 0x821D2844;
		  /* 821D2844h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821D2844h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821D2844h case   17:*/		return 0x821D2848;
		  /* 821D2848h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821D2848h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821D2848h case   18:*/		return 0x821D284C;
		  /* 821D284Ch */ case   19:  		/* srw R7, R27, R6 */
		/* 821D284Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R27,regs.R6);
		/* 821D284Ch case   19:*/		return 0x821D2850;
		  /* 821D2850h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821D2850h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821D2850h case   20:*/		return 0x821D2854;
		  /* 821D2854h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821D2854h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821D2854h case   21:*/		return 0x821D2858;
		  /* 821D2858h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821D2858h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821D2858h case   22:*/		return 0x821D285C;
		  /* 821D285Ch */ case   23:  		/* or R10, R9, R10 */
		/* 821D285Ch case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821D285Ch case   23:*/		return 0x821D2860;
		  /* 821D2860h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821D2860h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2860h case   24:*/		return 0x821D2864;
	}
	return 0x821D2864;
} // Block from 821D2800h-821D2864h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D2864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2864);
		  /* 821D2864h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821D2864h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821D2864h case    0:*/		return 0x821D2868;
		  /* 821D2868h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821D2868h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D2868h case    1:*/		return 0x821D286C;
		  /* 821D286Ch */ case    2:  		/* bc 4, CR6_EQ, -180 */
		/* 821D286Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D27B8;  }
		/* 821D286Ch case    2:*/		return 0x821D2870;
		  /* 821D2870h */ case    3:  		/* addi R8, R11, 8 */
		/* 821D2870h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821D2870h case    3:*/		return 0x821D2874;
		  /* 821D2874h */ case    4:  		/* b -188 */
		/* 821D2874h case    4:*/		return 0x821D27B8;
		/* 821D2874h case    4:*/		return 0x821D2878;
	}
	return 0x821D2878;
} // Block from 821D2864h-821D2878h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2878);
		  /* 821D2878h */ case    0:  		/* mr R5, R17 */
		/* 821D2878h case    0:*/		regs.R5 = regs.R17;
		/* 821D2878h case    0:*/		return 0x821D287C;
		  /* 821D287Ch */ case    1:  		/* mr R4, R28 */
		/* 821D287Ch case    1:*/		regs.R4 = regs.R28;
		/* 821D287Ch case    1:*/		return 0x821D2880;
		  /* 821D2880h */ case    2:  		/* mr R3, R18 */
		/* 821D2880h case    2:*/		regs.R3 = regs.R18;
		/* 821D2880h case    2:*/		return 0x821D2884;
		  /* 821D2884h */ case    3:  		/* bl -28348 */
		/* 821D2884h case    3:*/		regs.LR = 0x821D2888; return 0x821CB9C8;
		/* 821D2884h case    3:*/		return 0x821D2888;
	}
	return 0x821D2888;
} // Block from 821D2878h-821D2888h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2888);
		  /* 821D2888h */ case    0:  		/* lis R11, -32256 */
		/* 821D2888h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D2888h case    0:*/		return 0x821D288C;
		  /* 821D288Ch */ case    1:  		/* lwz R31, <#[R16]> */
		/* 821D288Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000000) );
		/* 821D288Ch case    1:*/		return 0x821D2890;
		  /* 821D2890h */ case    2:  		/* lis R10, -32256 */
		/* 821D2890h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821D2890h case    2:*/		return 0x821D2894;
		  /* 821D2894h */ case    3:  		/* lis R25, 32640 */
		/* 821D2894h case    3:*/		cpu::op::lis<0>(regs,&regs.R25,0x7F80);
		/* 821D2894h case    3:*/		return 0x821D2898;
		  /* 821D2898h */ case    4:  		/* lis R24, -128 */
		/* 821D2898h case    4:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFFFF80);
		/* 821D2898h case    4:*/		return 0x821D289C;
		  /* 821D289Ch */ case    5:  		/* lfd FR26, <#[R11 + 1848]> */
		/* 821D289Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR26, (uint32)(regs.R11 + 0x00000738) );
		/* 821D289Ch case    5:*/		return 0x821D28A0;
		  /* 821D28A0h */ case    6:  		/* lfd FR27, <#[R10 + 1808]> */
		/* 821D28A0h case    6:*/		cpu::mem::load64f( regs, &regs.FR27, (uint32)(regs.R10 + 0x00000710) );
		/* 821D28A0h case    6:*/		return 0x821D28A4;
		  /* 821D28A4h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821D28A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D28A4h case    7:*/		return 0x821D28A8;
		  /* 821D28A8h */ case    8:  		/* bc 12, CR6_EQ, 1036 */
		/* 821D28A8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D2CB4;  }
		/* 821D28A8h case    8:*/		return 0x821D28AC;
		  /* 821D28ACh */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821D28ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D28ACh case    9:*/		return 0x821D28B0;
		  /* 821D28B0h */ case   10:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821D28B0h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821D28B0h case   10:*/		return 0x821D28B4;
		  /* 821D28B4h */ case   11:  		/* bc 12, CR0_EQ, 1016 */
		/* 821D28B4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D28B4h case   11:*/		return 0x821D28B8;
		  /* 821D28B8h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D28B8h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D28B8h case   12:*/		return 0x821D28BC;
		  /* 821D28BCh */ case   13:  		/* bc 12, CR0_EQ, 1008 */
		/* 821D28BCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D28BCh case   13:*/		return 0x821D28C0;
		  /* 821D28C0h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D28C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D28C0h case   14:*/		return 0x821D28C4;
		  /* 821D28C4h */ case   15:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D28C4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D28C4h case   15:*/		return 0x821D28C8;
		  /* 821D28C8h */ case   16:  		/* rlwinm. R9, R10, 27, 31, 31 */
		/* 821D28C8h case   16:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R9,regs.R10);
		/* 821D28C8h case   16:*/		return 0x821D28CC;
		  /* 821D28CCh */ case   17:  		/* bc 12, CR0_EQ, 144 */
		/* 821D28CCh case   17:*/		if ( regs.CR[0].eq ) { return 0x821D295C;  }
		/* 821D28CCh case   17:*/		return 0x821D28D0;
		  /* 821D28D0h */ case   18:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D28D0h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D28D0h case   18:*/		return 0x821D28D4;
		  /* 821D28D4h */ case   19:  		/* cmplwi CR6, R10, 384 */
		/* 821D28D4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000180);
		/* 821D28D4h case   19:*/		return 0x821D28D8;
		  /* 821D28D8h */ case   20:  		/* bc 4, CR6_EQ, 132 */
		/* 821D28D8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D295C;  }
		/* 821D28D8h case   20:*/		return 0x821D28DC;
		  /* 821D28DCh */ case   21:  		/* lwz R30, <#[R11 + 44]> */
		/* 821D28DCh case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D28DCh case   21:*/		return 0x821D28E0;
		  /* 821D28E0h */ case   22:  		/* lwz R29, <#[R11 + 48]> */
		/* 821D28E0h case   22:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000030) );
		/* 821D28E0h case   22:*/		return 0x821D28E4;
		  /* 821D28E4h */ case   23:  		/* mr R3, R30 */
		/* 821D28E4h case   23:*/		regs.R3 = regs.R30;
		/* 821D28E4h case   23:*/		return 0x821D28E8;
	}
	return 0x821D28E8;
} // Block from 821D2888h-821D28E8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D28E8h
// Function '?ExtractAddChainConstant@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@01IPA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D28E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D28E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D28E8);
		  /* 821D28E8h */ case    0:  		/* mr R4, R29 */
		/* 821D28E8h case    0:*/		regs.R4 = regs.R29;
		/* 821D28E8h case    0:*/		return 0x821D28EC;
		  /* 821D28ECh */ case    1:  		/* bl -452196 */
		/* 821D28ECh case    1:*/		regs.LR = 0x821D28F0; return 0x82164288;
		/* 821D28ECh case    1:*/		return 0x821D28F0;
		  /* 821D28F0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D28F0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D28F0h case    2:*/		return 0x821D28F4;
		  /* 821D28F4h */ case    3:  		/* bc 12, CR0_EQ, 952 */
		/* 821D28F4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D28F4h case    3:*/		return 0x821D28F8;
		  /* 821D28F8h */ case    4:  		/* li R4, 1 */
		/* 821D28F8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D28F8h case    4:*/		return 0x821D28FC;
		  /* 821D28FCh */ case    5:  		/* mr R3, R30 */
		/* 821D28FCh case    5:*/		regs.R3 = regs.R30;
		/* 821D28FCh case    5:*/		return 0x821D2900;
		  /* 821D2900h */ case    6:  		/* bl -247488 */
		/* 821D2900h case    6:*/		regs.LR = 0x821D2904; return 0x82196240;
		/* 821D2900h case    6:*/		return 0x821D2904;
		  /* 821D2904h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2904h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2904h case    7:*/		return 0x821D2908;
		  /* 821D2908h */ case    8:  		/* bc 12, CR0_EQ, 84 */
		/* 821D2908h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D295C;  }
		/* 821D2908h case    8:*/		return 0x821D290C;
		  /* 821D290Ch */ case    9:  		/* li R4, 1 */
		/* 821D290Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D290Ch case    9:*/		return 0x821D2910;
		  /* 821D2910h */ case   10:  		/* mr R3, R29 */
		/* 821D2910h case   10:*/		regs.R3 = regs.R29;
		/* 821D2910h case   10:*/		return 0x821D2914;
		  /* 821D2914h */ case   11:  		/* bl -247508 */
		/* 821D2914h case   11:*/		regs.LR = 0x821D2918; return 0x82196240;
		/* 821D2914h case   11:*/		return 0x821D2918;
		  /* 821D2918h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2918h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2918h case   12:*/		return 0x821D291C;
		  /* 821D291Ch */ case   13:  		/* bc 12, CR0_EQ, 64 */
		/* 821D291Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821D295C;  }
		/* 821D291Ch case   13:*/		return 0x821D2920;
		  /* 821D2920h */ case   14:  		/* li R4, 1 */
		/* 821D2920h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D2920h case   14:*/		return 0x821D2924;
		  /* 821D2924h */ case   15:  		/* mr R3, R30 */
		/* 821D2924h case   15:*/		regs.R3 = regs.R30;
		/* 821D2924h case   15:*/		return 0x821D2928;
		  /* 821D2928h */ case   16:  		/* bl -372328 */
		/* 821D2928h case   16:*/		regs.LR = 0x821D292C; return 0x82177AC0;
		/* 821D2928h case   16:*/		return 0x821D292C;
		  /* 821D292Ch */ case   17:  		/* li R4, 1 */
		/* 821D292Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D292Ch case   17:*/		return 0x821D2930;
		  /* 821D2930h */ case   18:  		/* mr R3, R29 */
		/* 821D2930h case   18:*/		regs.R3 = regs.R29;
		/* 821D2930h case   18:*/		return 0x821D2934;
		  /* 821D2934h */ case   19:  		/* bl -372340 */
		/* 821D2934h case   19:*/		regs.LR = 0x821D2938; return 0x82177AC0;
		/* 821D2934h case   19:*/		return 0x821D2938;
		  /* 821D2938h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 821D2938h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2938h case   20:*/		return 0x821D293C;
		  /* 821D293Ch */ case   21:  		/* addi R10, R11, -1 */
		/* 821D293Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D293Ch case   21:*/		return 0x821D2940;
		  /* 821D2940h */ case   22:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 821D2940h case   22:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 821D2940h case   22:*/		return 0x821D2944;
		  /* 821D2944h */ case   23:  		/* stw R10, <#[R31]> */
		/* 821D2944h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2944h case   23:*/		return 0x821D2948;
		  /* 821D2948h */ case   24:  		/* lwz R4, <#[R31 + 12]> */
		/* 821D2948h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2948h case   24:*/		return 0x821D294C;
		  /* 821D294Ch */ case   25:  		/* mr R3, R18 */
		/* 821D294Ch case   25:*/		regs.R3 = regs.R18;
		/* 821D294Ch case   25:*/		return 0x821D2950;
		  /* 821D2950h */ case   26:  		/* mr R5, R17 */
		/* 821D2950h case   26:*/		regs.R5 = regs.R17;
		/* 821D2950h case   26:*/		return 0x821D2954;
		  /* 821D2954h */ case   27:  		/* bl -28556 */
		/* 821D2954h case   27:*/		regs.LR = 0x821D2958; return 0x821CB9C8;
		/* 821D2954h case   27:*/		return 0x821D2958;
		  /* 821D2958h */ case   28:  		/* b 852 */
		/* 821D2958h case   28:*/		return 0x821D2CAC;
		/* 821D2958h case   28:*/		return 0x821D295C;
	}
	return 0x821D295C;
} // Block from 821D28E8h-821D295Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D295Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D295C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D295C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D295C);
		  /* 821D295Ch */ case    0:  		/* mr R3, R31 */
		/* 821D295Ch case    0:*/		regs.R3 = regs.R31;
		/* 821D295Ch case    0:*/		return 0x821D2960;
		  /* 821D2960h */ case    1:  		/* bl -450864 */
		/* 821D2960h case    1:*/		regs.LR = 0x821D2964; return 0x82164830;
		/* 821D2960h case    1:*/		return 0x821D2964;
		  /* 821D2964h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2964h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2964h case    2:*/		return 0x821D2968;
		  /* 821D2968h */ case    3:  		/* bc 12, CR0_EQ, 836 */
		/* 821D2968h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D2968h case    3:*/		return 0x821D296C;
		  /* 821D296Ch */ case    4:  		/* mr R7, R16 */
		/* 821D296Ch case    4:*/		regs.R7 = regs.R16;
		/* 821D296Ch case    4:*/		return 0x821D2970;
		  /* 821D2970h */ case    5:  		/* addi R6, R1, 608 */
		/* 821D2970h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x260);
		/* 821D2970h case    5:*/		return 0x821D2974;
		  /* 821D2974h */ case    6:  		/* addi R5, R1, 232 */
		/* 821D2974h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE8);
		/* 821D2974h case    6:*/		return 0x821D2978;
		  /* 821D2978h */ case    7:  		/* addi R4, R1, 412 */
		/* 821D2978h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x19C);
		/* 821D2978h case    7:*/		return 0x821D297C;
		  /* 821D297Ch */ case    8:  		/* mr R3, R31 */
		/* 821D297Ch case    8:*/		regs.R3 = regs.R31;
		/* 821D297Ch case    8:*/		return 0x821D2980;
		  /* 821D2980h */ case    9:  		/* bl 378288 */
		/* 821D2980h case    9:*/		regs.LR = 0x821D2984; return 0x8222EF30;
		/* 821D2980h case    9:*/		return 0x821D2984;
		  /* 821D2984h */ case   10:  		/* lwz R11, <#[R1 + 412]> */
		/* 821D2984h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019C) );
		/* 821D2984h case   10:*/		return 0x821D2988;
		  /* 821D2988h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D2988h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2988h case   11:*/		return 0x821D298C;
		  /* 821D298Ch */ case   12:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821D298Ch case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821D298Ch case   12:*/		return 0x821D2990;
		  /* 821D2990h */ case   13:  		/* cmplwi CR6, R10, 3 */
		/* 821D2990h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 821D2990h case   13:*/		return 0x821D2994;
		  /* 821D2994h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 821D2994h case   14:*/		if ( regs.CR[6].eq ) { return 0x821D29A0;  }
		/* 821D2994h case   14:*/		return 0x821D2998;
		  /* 821D2998h */ case   15:  		/* cmplwi CR6, R10, 4 */
		/* 821D2998h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821D2998h case   15:*/		return 0x821D299C;
		  /* 821D299Ch */ case   16:  		/* bc 4, CR6_EQ, 784 */
		/* 821D299Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D2CAC;  }
		/* 821D299Ch case   16:*/		return 0x821D29A0;
	}
	return 0x821D29A0;
} // Block from 821D295Ch-821D29A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D29A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D29A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D29A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D29A0);
		  /* 821D29A0h */ case    0:  		/* stw R24, <#[R1 + 192]> */
		/* 821D29A0h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29A0h case    0:*/		return 0x821D29A4;
		  /* 821D29A4h */ case    1:  		/* li R30, 0 */
		/* 821D29A4h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D29A4h case    1:*/		return 0x821D29A8;
		  /* 821D29A8h */ case    2:  		/* stw R24, <#[R1 + 160]> */
		/* 821D29A8h case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D29A8h case    2:*/		return 0x821D29AC;
		  /* 821D29ACh */ case    3:  		/* lwz R10, <#[R31]> */
		/* 821D29ACh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D29ACh case    3:*/		return 0x821D29B0;
		  /* 821D29B0h */ case    4:  		/* lwz R29, <#[R11 + 44]> */
		/* 821D29B0h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D29B0h case    4:*/		return 0x821D29B4;
		  /* 821D29B4h */ case    5:  		/* lwz R26, <#[R11 + 48]> */
		/* 821D29B4h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000030) );
		/* 821D29B4h case    5:*/		return 0x821D29B8;
		  /* 821D29B8h */ case    6:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821D29B8h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821D29B8h case    6:*/		return 0x821D29BC;
		  /* 821D29BCh */ case    7:  		/* lfs FR31, <#[R1 + 192]> */
		/* 821D29BCh case    7:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29BCh case    7:*/		return 0x821D29C0;
		  /* 821D29C0h */ case    8:  		/* stw R25, <#[R1 + 192]> */
		/* 821D29C0h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29C0h case    8:*/		return 0x821D29C4;
		  /* 821D29C4h */ case    9:  		/* lfs FR30, <#[R1 + 192]> */
		/* 821D29C4h case    9:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29C4h case    9:*/		return 0x821D29C8;
		  /* 821D29C8h */ case   10:  		/* stw R25, <#[R1 + 192]> */
		/* 821D29C8h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29C8h case   10:*/		return 0x821D29CC;
		  /* 821D29CCh */ case   11:  		/* lfs FR28, <#[R1 + 192]> */
		/* 821D29CCh case   11:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D29CCh case   11:*/		return 0x821D29D0;
		  /* 821D29D0h */ case   12:  		/* lfs FR29, <#[R1 + 160]> */
		/* 821D29D0h case   12:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D29D0h case   12:*/		return 0x821D29D4;
		  /* 821D29D4h */ case   13:  		/* bc 12, CR0_EQ, 152 */
		/* 821D29D4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D2A6C;  }
		/* 821D29D4h case   13:*/		return 0x821D29D8;
		  /* 821D29D8h */ case   14:  		/* li R28, 0 */
		/* 821D29D8h case   14:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D29D8h case   14:*/		return 0x821D29DC;
		  /* 821D29DCh */ case   15:  		/* lwz R11, <#[R1 + 232]> */
		/* 821D29DCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821D29DCh case   15:*/		return 0x821D29E0;
		  /* 821D29E0h */ case   16:  		/* addi R6, R1, 1064 */
		/* 821D29E0h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x428);
		/* 821D29E0h case   16:*/		return 0x821D29E4;
		  /* 821D29E4h */ case   17:  		/* addi R5, R1, 1416 */
		/* 821D29E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x588);
		/* 821D29E4h case   17:*/		return 0x821D29E8;
		  /* 821D29E8h */ case   18:  		/* srw R11, R11, R28 */
		/* 821D29E8h case   18:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821D29E8h case   18:*/		return 0x821D29EC;
		  /* 821D29ECh */ case   19:  		/* rlwinm R27, R11, 0, 30, 31 */
		/* 821D29ECh case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R27,regs.R11);
		/* 821D29ECh case   19:*/		return 0x821D29F0;
		  /* 821D29F0h */ case   20:  		/* mr R3, R29 */
		/* 821D29F0h case   20:*/		regs.R3 = regs.R29;
		/* 821D29F0h case   20:*/		return 0x821D29F4;
		  /* 821D29F4h */ case   21:  		/* mr R4, R27 */
		/* 821D29F4h case   21:*/		regs.R4 = regs.R27;
		/* 821D29F4h case   21:*/		return 0x821D29F8;
		  /* 821D29F8h */ case   22:  		/* bl 328496 */
		/* 821D29F8h case   22:*/		regs.LR = 0x821D29FC; return 0x82222D28;
		/* 821D29F8h case   22:*/		return 0x821D29FC;
		  /* 821D29FCh */ case   23:  		/* lfd FR0, <#[R1 + 1416]> */
		/* 821D29FCh case   23:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000588) );
		/* 821D29FCh case   23:*/		return 0x821D2A00;
		  /* 821D2A00h */ case   24:  		/* fcmpu CR6, FR0, FR30 */
		/* 821D2A00h case   24:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 821D2A00h case   24:*/		return 0x821D2A04;
		  /* 821D2A04h */ case   25:  		/* bc 4, CR6_LT, 8 */
		/* 821D2A04h case   25:*/		if ( !regs.CR[6].lt ) { return 0x821D2A0C;  }
		/* 821D2A04h case   25:*/		return 0x821D2A08;
		  /* 821D2A08h */ case   26:  		/* fmr FR30, FR0 */
		/* 821D2A08h case   26:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR0);
		/* 821D2A08h case   26:*/		return 0x821D2A0C;
	}
	return 0x821D2A0C;
} // Block from 821D29A0h-821D2A0Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A0C);
		  /* 821D2A0Ch */ case    0:  		/* lfd FR0, <#[R1 + 1064]> */
		/* 821D2A0Ch case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000428) );
		/* 821D2A0Ch case    0:*/		return 0x821D2A10;
		  /* 821D2A10h */ case    1:  		/* fcmpu CR6, FR0, FR31 */
		/* 821D2A10h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821D2A10h case    1:*/		return 0x821D2A14;
		  /* 821D2A14h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821D2A14h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821D2A1C;  }
		/* 821D2A14h case    2:*/		return 0x821D2A18;
		  /* 821D2A18h */ case    3:  		/* fmr FR31, FR0 */
		/* 821D2A18h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR0);
		/* 821D2A18h case    3:*/		return 0x821D2A1C;
	}
	return 0x821D2A1C;
} // Block from 821D2A0Ch-821D2A1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A1C);
		  /* 821D2A1Ch */ case    0:  		/* addi R6, R1, 1080 */
		/* 821D2A1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x438);
		/* 821D2A1Ch case    0:*/		return 0x821D2A20;
		  /* 821D2A20h */ case    1:  		/* addi R5, R1, 1304 */
		/* 821D2A20h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x518);
		/* 821D2A20h case    1:*/		return 0x821D2A24;
		  /* 821D2A24h */ case    2:  		/* mr R4, R27 */
		/* 821D2A24h case    2:*/		regs.R4 = regs.R27;
		/* 821D2A24h case    2:*/		return 0x821D2A28;
		  /* 821D2A28h */ case    3:  		/* mr R3, R26 */
		/* 821D2A28h case    3:*/		regs.R3 = regs.R26;
		/* 821D2A28h case    3:*/		return 0x821D2A2C;
		  /* 821D2A2Ch */ case    4:  		/* bl 328444 */
		/* 821D2A2Ch case    4:*/		regs.LR = 0x821D2A30; return 0x82222D28;
		/* 821D2A2Ch case    4:*/		return 0x821D2A30;
		  /* 821D2A30h */ case    5:  		/* lfd FR0, <#[R1 + 1304]> */
		/* 821D2A30h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000518) );
		/* 821D2A30h case    5:*/		return 0x821D2A34;
		  /* 821D2A34h */ case    6:  		/* fcmpu CR6, FR0, FR28 */
		/* 821D2A34h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR28);
		/* 821D2A34h case    6:*/		return 0x821D2A38;
		  /* 821D2A38h */ case    7:  		/* bc 4, CR6_LT, 8 */
		/* 821D2A38h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821D2A40;  }
		/* 821D2A38h case    7:*/		return 0x821D2A3C;
		  /* 821D2A3Ch */ case    8:  		/* fmr FR28, FR0 */
		/* 821D2A3Ch case    8:*/		cpu::op::fmr<0>(regs,&regs.FR28,regs.FR0);
		/* 821D2A3Ch case    8:*/		return 0x821D2A40;
	}
	return 0x821D2A40;
} // Block from 821D2A1Ch-821D2A40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A40);
		  /* 821D2A40h */ case    0:  		/* lfd FR0, <#[R1 + 1080]> */
		/* 821D2A40h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000438) );
		/* 821D2A40h case    0:*/		return 0x821D2A44;
		  /* 821D2A44h */ case    1:  		/* fcmpu CR6, FR0, FR29 */
		/* 821D2A44h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR29);
		/* 821D2A44h case    1:*/		return 0x821D2A48;
		  /* 821D2A48h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 821D2A48h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821D2A50;  }
		/* 821D2A48h case    2:*/		return 0x821D2A4C;
		  /* 821D2A4Ch */ case    3:  		/* fmr FR29, FR0 */
		/* 821D2A4Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR0);
		/* 821D2A4Ch case    3:*/		return 0x821D2A50;
	}
	return 0x821D2A50;
} // Block from 821D2A40h-821D2A50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A50);
		  /* 821D2A50h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821D2A50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2A50h case    0:*/		return 0x821D2A54;
		  /* 821D2A54h */ case    1:  		/* addi R30, R30, 1 */
		/* 821D2A54h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D2A54h case    1:*/		return 0x821D2A58;
		  /* 821D2A58h */ case    2:  		/* addi R28, R28, 2 */
		/* 821D2A58h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 821D2A58h case    2:*/		return 0x821D2A5C;
		  /* 821D2A5Ch */ case    3:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821D2A5Ch case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821D2A5Ch case    3:*/		return 0x821D2A60;
		  /* 821D2A60h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821D2A60h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D2A60h case    4:*/		return 0x821D2A64;
		  /* 821D2A64h */ case    5:  		/* bc 12, CR6_LT, -136 */
		/* 821D2A64h case    5:*/		if ( regs.CR[6].lt ) { return 0x821D29DC;  }
		/* 821D2A64h case    5:*/		return 0x821D2A68;
		  /* 821D2A68h */ case    6:  		/* lwz R11, <#[R1 + 412]> */
		/* 821D2A68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019C) );
		/* 821D2A68h case    6:*/		return 0x821D2A6C;
	}
	return 0x821D2A6C;
} // Block from 821D2A50h-821D2A6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A6C);
		  /* 821D2A6Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D2A6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D2A6Ch case    0:*/		return 0x821D2A70;
		  /* 821D2A70h */ case    1:  		/* lwz R28, <#[R1 + 608]> */
		/* 821D2A70h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000260) );
		/* 821D2A70h case    1:*/		return 0x821D2A74;
		  /* 821D2A74h */ case    2:  		/* rlwinm R27, R11, 25, 25, 31 */
		/* 821D2A74h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R27,regs.R11);
		/* 821D2A74h case    2:*/		return 0x821D2A78;
		  /* 821D2A78h */ case    3:  		/* cmplwi CR6, R27, 3 */
		/* 821D2A78h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000003);
		/* 821D2A78h case    3:*/		return 0x821D2A7C;
		  /* 821D2A7Ch */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821D2A7Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D2A88;  }
		/* 821D2A7Ch case    4:*/		return 0x821D2A80;
		  /* 821D2A80h */ case    5:  		/* fcmpu CR6, FR31, FR27 */
		/* 821D2A80h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR27);
		/* 821D2A80h case    5:*/		return 0x821D2A84;
		  /* 821D2A84h */ case    6:  		/* bc 4, CR6_GT, 20 */
		/* 821D2A84h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821D2A98;  }
		/* 821D2A84h case    6:*/		return 0x821D2A88;
	}
	return 0x821D2A88;
} // Block from 821D2A6Ch-821D2A88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A88);
		  /* 821D2A88h */ case    0:  		/* cmplwi CR6, R27, 4 */
		/* 821D2A88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 821D2A88h case    0:*/		return 0x821D2A8C;
		  /* 821D2A8Ch */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 821D2A8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2ADC;  }
		/* 821D2A8Ch case    1:*/		return 0x821D2A90;
		  /* 821D2A90h */ case    2:  		/* fcmpu CR6, FR30, FR26 */
		/* 821D2A90h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR26);
		/* 821D2A90h case    2:*/		return 0x821D2A94;
		  /* 821D2A94h */ case    3:  		/* bc 12, CR6_LT, 72 */
		/* 821D2A94h case    3:*/		if ( regs.CR[6].lt ) { return 0x821D2ADC;  }
		/* 821D2A94h case    3:*/		return 0x821D2A98;
	}
	return 0x821D2A98;
} // Block from 821D2A88h-821D2A98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2A98);
		  /* 821D2A98h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821D2A98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D2A98h case    0:*/		return 0x821D2A9C;
		  /* 821D2A9Ch */ case    1:  		/* mr R4, R28 */
		/* 821D2A9Ch case    1:*/		regs.R4 = regs.R28;
		/* 821D2A9Ch case    1:*/		return 0x821D2AA0;
		  /* 821D2AA0h */ case    2:  		/* rlwinm R30, R11, 0, 27, 31 */
		/* 821D2AA0h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R11);
		/* 821D2AA0h case    2:*/		return 0x821D2AA4;
		  /* 821D2AA4h */ case    3:  		/* mr R3, R30 */
		/* 821D2AA4h case    3:*/		regs.R3 = regs.R30;
		/* 821D2AA4h case    3:*/		return 0x821D2AA8;
		  /* 821D2AA8h */ case    4:  		/* bl -248064 */
		/* 821D2AA8h case    4:*/		regs.LR = 0x821D2AAC; return 0x821961A8;
		/* 821D2AA8h case    4:*/		return 0x821D2AAC;
		  /* 821D2AACh */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2AACh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2AACh case    5:*/		return 0x821D2AB0;
		  /* 821D2AB0h */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 821D2AB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D2ADC;  }
		/* 821D2AB0h case    6:*/		return 0x821D2AB4;
		  /* 821D2AB4h */ case    7:  		/* mr R4, R28 */
		/* 821D2AB4h case    7:*/		regs.R4 = regs.R28;
		/* 821D2AB4h case    7:*/		return 0x821D2AB8;
		  /* 821D2AB8h */ case    8:  		/* mr R3, R30 */
		/* 821D2AB8h case    8:*/		regs.R3 = regs.R30;
		/* 821D2AB8h case    8:*/		return 0x821D2ABC;
		  /* 821D2ABCh */ case    9:  		/* bl -372804 */
		/* 821D2ABCh case    9:*/		regs.LR = 0x821D2AC0; return 0x82177A78;
		/* 821D2ABCh case    9:*/		return 0x821D2AC0;
		  /* 821D2AC0h */ case   10:  		/* li R4, 1 */
		/* 821D2AC0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D2AC0h case   10:*/		return 0x821D2AC4;
		  /* 821D2AC4h */ case   11:  		/* bl -248092 */
		/* 821D2AC4h case   11:*/		regs.LR = 0x821D2AC8; return 0x821961A8;
		/* 821D2AC4h case   11:*/		return 0x821D2AC8;
		  /* 821D2AC8h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2AC8h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2AC8h case   12:*/		return 0x821D2ACC;
		  /* 821D2ACCh */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821D2ACCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821D2ADC;  }
		/* 821D2ACCh case   13:*/		return 0x821D2AD0;
		  /* 821D2AD0h */ case   14:  		/* mr R29, R26 */
		/* 821D2AD0h case   14:*/		regs.R29 = regs.R26;
		/* 821D2AD0h case   14:*/		return 0x821D2AD4;
		  /* 821D2AD4h */ case   15:  		/* fmr FR28, FR30 */
		/* 821D2AD4h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR28,regs.FR30);
		/* 821D2AD4h case   15:*/		return 0x821D2AD8;
		  /* 821D2AD8h */ case   16:  		/* fmr FR29, FR31 */
		/* 821D2AD8h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR31);
		/* 821D2AD8h case   16:*/		return 0x821D2ADC;
	}
	return 0x821D2ADC;
} // Block from 821D2A98h-821D2ADCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D2ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2ADC);
		  /* 821D2ADCh */ case    0:  		/* cmplwi CR6, R27, 3 */
		/* 821D2ADCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000003);
		/* 821D2ADCh case    0:*/		return 0x821D2AE0;
		  /* 821D2AE0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821D2AE0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2AEC;  }
		/* 821D2AE0h case    1:*/		return 0x821D2AE4;
		  /* 821D2AE4h */ case    2:  		/* fcmpu CR6, FR29, FR27 */
		/* 821D2AE4h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR27);
		/* 821D2AE4h case    2:*/		return 0x821D2AE8;
		  /* 821D2AE8h */ case    3:  		/* bc 4, CR6_GT, 20 */
		/* 821D2AE8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821D2AFC;  }
		/* 821D2AE8h case    3:*/		return 0x821D2AEC;
	}
	return 0x821D2AEC;
} // Block from 821D2ADCh-821D2AECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2AEC);
		  /* 821D2AECh */ case    0:  		/* cmplwi CR6, R27, 4 */
		/* 821D2AECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 821D2AECh case    0:*/		return 0x821D2AF0;
		  /* 821D2AF0h */ case    1:  		/* bc 4, CR6_EQ, 444 */
		/* 821D2AF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2CAC;  }
		/* 821D2AF0h case    1:*/		return 0x821D2AF4;
		  /* 821D2AF4h */ case    2:  		/* fcmpu CR6, FR28, FR26 */
		/* 821D2AF4h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR28,regs.FR26);
		/* 821D2AF4h case    2:*/		return 0x821D2AF8;
		  /* 821D2AF8h */ case    3:  		/* bc 12, CR6_LT, 436 */
		/* 821D2AF8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821D2CAC;  }
		/* 821D2AF8h case    3:*/		return 0x821D2AFC;
	}
	return 0x821D2AFC;
} // Block from 821D2AECh-821D2AFCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D2AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2AFC);
		  /* 821D2AFCh */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821D2AFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D2AFCh case    0:*/		return 0x821D2B00;
		  /* 821D2B00h */ case    1:  		/* mr R4, R28 */
		/* 821D2B00h case    1:*/		regs.R4 = regs.R28;
		/* 821D2B00h case    1:*/		return 0x821D2B04;
		  /* 821D2B04h */ case    2:  		/* rlwinm R30, R11, 0, 27, 31 */
		/* 821D2B04h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R11);
		/* 821D2B04h case    2:*/		return 0x821D2B08;
		  /* 821D2B08h */ case    3:  		/* mr R3, R30 */
		/* 821D2B08h case    3:*/		regs.R3 = regs.R30;
		/* 821D2B08h case    3:*/		return 0x821D2B0C;
		  /* 821D2B0Ch */ case    4:  		/* bl -248164 */
		/* 821D2B0Ch case    4:*/		regs.LR = 0x821D2B10; return 0x821961A8;
		/* 821D2B0Ch case    4:*/		return 0x821D2B10;
		  /* 821D2B10h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2B10h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2B10h case    5:*/		return 0x821D2B14;
		  /* 821D2B14h */ case    6:  		/* bc 12, CR0_EQ, 408 */
		/* 821D2B14h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D2B14h case    6:*/		return 0x821D2B18;
		  /* 821D2B18h */ case    7:  		/* mr R4, R28 */
		/* 821D2B18h case    7:*/		regs.R4 = regs.R28;
		/* 821D2B18h case    7:*/		return 0x821D2B1C;
		  /* 821D2B1Ch */ case    8:  		/* mr R3, R30 */
		/* 821D2B1Ch case    8:*/		regs.R3 = regs.R30;
		/* 821D2B1Ch case    8:*/		return 0x821D2B20;
		  /* 821D2B20h */ case    9:  		/* bl -372904 */
		/* 821D2B20h case    9:*/		regs.LR = 0x821D2B24; return 0x82177A78;
		/* 821D2B20h case    9:*/		return 0x821D2B24;
		  /* 821D2B24h */ case   10:  		/* li R4, 1 */
		/* 821D2B24h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D2B24h case   10:*/		return 0x821D2B28;
		  /* 821D2B28h */ case   11:  		/* mr R30, R3 */
		/* 821D2B28h case   11:*/		regs.R30 = regs.R3;
		/* 821D2B28h case   11:*/		return 0x821D2B2C;
		  /* 821D2B2Ch */ case   12:  		/* bl -248196 */
		/* 821D2B2Ch case   12:*/		regs.LR = 0x821D2B30; return 0x821961A8;
		/* 821D2B2Ch case   12:*/		return 0x821D2B30;
		  /* 821D2B30h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2B30h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2B30h case   13:*/		return 0x821D2B34;
		  /* 821D2B34h */ case   14:  		/* bc 12, CR0_EQ, 376 */
		/* 821D2B34h case   14:*/		if ( regs.CR[0].eq ) { return 0x821D2CAC;  }
		/* 821D2B34h case   14:*/		return 0x821D2B38;
		  /* 821D2B38h */ case   15:  		/* mr R5, R17 */
		/* 821D2B38h case   15:*/		regs.R5 = regs.R17;
		/* 821D2B38h case   15:*/		return 0x821D2B3C;
		  /* 821D2B3Ch */ case   16:  		/* lwz R4, <#[R31 + 12]> */
		/* 821D2B3Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2B3Ch case   16:*/		return 0x821D2B40;
		  /* 821D2B40h */ case   17:  		/* mr R3, R18 */
		/* 821D2B40h case   17:*/		regs.R3 = regs.R18;
		/* 821D2B40h case   17:*/		return 0x821D2B44;
		  /* 821D2B44h */ case   18:  		/* bl -29052 */
		/* 821D2B44h case   18:*/		regs.LR = 0x821D2B48; return 0x821CB9C8;
		/* 821D2B44h case   18:*/		return 0x821D2B48;
		  /* 821D2B48h */ case   19:  		/* mr R5, R17 */
		/* 821D2B48h case   19:*/		regs.R5 = regs.R17;
		/* 821D2B48h case   19:*/		return 0x821D2B4C;
		  /* 821D2B4Ch */ case   20:  		/* mr R4, R16 */
		/* 821D2B4Ch case   20:*/		regs.R4 = regs.R16;
		/* 821D2B4Ch case   20:*/		return 0x821D2B50;
		  /* 821D2B50h */ case   21:  		/* mr R3, R18 */
		/* 821D2B50h case   21:*/		regs.R3 = regs.R18;
		/* 821D2B50h case   21:*/		return 0x821D2B54;
		  /* 821D2B54h */ case   22:  		/* bl -29068 */
		/* 821D2B54h case   22:*/		regs.LR = 0x821D2B58; return 0x821CB9C8;
		/* 821D2B54h case   22:*/		return 0x821D2B58;
		  /* 821D2B58h */ case   23:  		/* li R4, 1 */
		/* 821D2B58h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D2B58h case   23:*/		return 0x821D2B5C;
		  /* 821D2B5Ch */ case   24:  		/* mr R3, R30 */
		/* 821D2B5Ch case   24:*/		regs.R3 = regs.R30;
		/* 821D2B5Ch case   24:*/		return 0x821D2B60;
	}
	return 0x821D2B60;
} // Block from 821D2AFCh-821D2B60h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D2B60h
// Function '?Simplify@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2B60);
		  /* 821D2B60h */ case    0:  		/* bl -372968 */
		/* 821D2B60h case    0:*/		regs.LR = 0x821D2B64; return 0x82177A78;
		/* 821D2B60h case    0:*/		return 0x821D2B64;
		  /* 821D2B64h */ case    1:  		/* lwz R11, <#[R1 + 232]> */
		/* 821D2B64h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821D2B64h case    1:*/		return 0x821D2B68;
		  /* 821D2B68h */ case    2:  		/* lwz R10, <#[R29]> */
		/* 821D2B68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821D2B68h case    2:*/		return 0x821D2B6C;
		  /* 821D2B6Ch */ case    3:  		/* mr R30, R3 */
		/* 821D2B6Ch case    3:*/		regs.R30 = regs.R3;
		/* 821D2B6Ch case    3:*/		return 0x821D2B70;
		  /* 821D2B70h */ case    4:  		/* rlwinm R9, R11, 27, 29, 30 */
		/* 821D2B70h case    4:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R9,regs.R11);
		/* 821D2B70h case    4:*/		return 0x821D2B74;
		  /* 821D2B74h */ case    5:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821D2B74h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821D2B74h case    5:*/		return 0x821D2B78;
		  /* 821D2B78h */ case    6:  		/* rlwinm R8, R11, 29, 29, 30 */
		/* 821D2B78h case    6:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R8,regs.R11);
		/* 821D2B78h case    6:*/		return 0x821D2B7C;
		  /* 821D2B7Ch */ case    7:  		/* srw R9, R10, R9 */
		/* 821D2B7Ch case    7:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821D2B7Ch case    7:*/		return 0x821D2B80;
		  /* 821D2B80h */ case    8:  		/* srw R8, R10, R8 */
		/* 821D2B80h case    8:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821D2B80h case    8:*/		return 0x821D2B84;
		  /* 821D2B84h */ case    9:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821D2B84h case    9:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821D2B84h case    9:*/		return 0x821D2B88;
		  /* 821D2B88h */ case   10:  		/* rlwinm R7, R11, 31, 29, 30 */
		/* 821D2B88h case   10:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R7,regs.R11);
		/* 821D2B88h case   10:*/		return 0x821D2B8C;
		  /* 821D2B8Ch */ case   11:  		/* rlwinm R9, R8, 0, 28, 31 */
		/* 821D2B8Ch case   11:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R8);
		/* 821D2B8Ch case   11:*/		return 0x821D2B90;
		  /* 821D2B90h */ case   12:  		/* srw R8, R10, R7 */
		/* 821D2B90h case   12:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R10,regs.R7);
		/* 821D2B90h case   12:*/		return 0x821D2B94;
		  /* 821D2B94h */ case   13:  		/* rlwinm R11, R11, 1, 29, 30 */
		/* 821D2B94h case   13:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R11,regs.R11);
		/* 821D2B94h case   13:*/		return 0x821D2B98;
		  /* 821D2B98h */ case   14:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821D2B98h case   14:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821D2B98h case   14:*/		return 0x821D2B9C;
		  /* 821D2B9Ch */ case   15:  		/* srw R11, R10, R11 */
		/* 821D2B9Ch case   15:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D2B9Ch case   15:*/		return 0x821D2BA0;
		  /* 821D2BA0h */ case   16:  		/* rlwimi R11, R8, 2, 0, 29 */
		/* 821D2BA0h case   16:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 821D2BA0h case   16:*/		return 0x821D2BA4;
		  /* 821D2BA4h */ case   17:  		/* stw R11, <#[R1 + 232]> */
		/* 821D2BA4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821D2BA4h case   17:*/		return 0x821D2BA8;
		  /* 821D2BA8h */ case   18:  		/* lwz R10, <#[R16 + 8]> */
		/* 821D2BA8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2BA8h case   18:*/		return 0x821D2BAC;
		  /* 821D2BACh */ case   19:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D2BACh case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D2BACh case   19:*/		return 0x821D2BB0;
		  /* 821D2BB0h */ case   20:  		/* cmplwi CR6, R10, 14336 */
		/* 821D2BB0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 821D2BB0h case   20:*/		return 0x821D2BB4;
		  /* 821D2BB4h */ case   21:  		/* bc 4, CR6_EQ, 160 */
		/* 821D2BB4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821D2C54;  }
		/* 821D2BB4h case   21:*/		return 0x821D2BB8;
		  /* 821D2BB8h */ case   22:  		/* lwz R10, <#[R18 + 4]> */
		/* 821D2BB8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000004) );
		/* 821D2BB8h case   22:*/		return 0x821D2BBC;
		  /* 821D2BBCh */ case   23:  		/* lwz R9, <#[R31 + 12]> */
		/* 821D2BBCh case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2BBCh case   23:*/		return 0x821D2BC0;
		  /* 821D2BC0h */ case   24:  		/* rlwinm R8, R10, 0, 31, 31 */
		/* 821D2BC0h case   24:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821D2BC0h case   24:*/		return 0x821D2BC4;
		  /* 821D2BC4h */ case   25:  		/* addic R8, R8, -1 */
		/* 821D2BC4h case   25:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821D2BC4h case   25:*/		return 0x821D2BC8;
		  /* 821D2BC8h */ case   26:  		/* subfe R8, R8, R8 */
		/* 821D2BC8h case   26:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 821D2BC8h case   26:*/		return 0x821D2BCC;
		  /* 821D2BCCh */ case   27:  		/* lwz R4, <#[R9 + 28]> */
		/* 821D2BCCh case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x0000001C) );
		/* 821D2BCCh case   27:*/		return 0x821D2BD0;
		  /* 821D2BD0h */ case   28:  		/* and R10, R8, R10 */
		/* 821D2BD0h case   28:*/		cpu::op::and<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821D2BD0h case   28:*/		return 0x821D2BD4;
		  /* 821D2BD4h */ case   29:  		/* cmplw CR6, R4, R10 */
		/* 821D2BD4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821D2BD4h case   29:*/		return 0x821D2BD8;
		  /* 821D2BD8h */ case   30:  		/* bc 12, CR6_EQ, 124 */
		/* 821D2BD8h case   30:*/		if ( regs.CR[6].eq ) { return 0x821D2C54;  }
		/* 821D2BD8h case   30:*/		return 0x821D2BDC;
		  /* 821D2BDCh */ case   31:  		/* lwz R5, <#[R29 + 12]> */
		/* 821D2BDCh case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D2BDCh case   31:*/		return 0x821D2BE0;
		  /* 821D2BE0h */ case   32:  		/* lwz R10, <#[R5 + 28]> */
		/* 821D2BE0h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000001C) );
		/* 821D2BE0h case   32:*/		return 0x821D2BE4;
		  /* 821D2BE4h */ case   33:  		/* cmpw CR6, R10, R4 */
		/* 821D2BE4h case   33:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R4);
		/* 821D2BE4h case   33:*/		return 0x821D2BE8;
		  /* 821D2BE8h */ case   34:  		/* bc 12, CR6_EQ, 108 */
		/* 821D2BE8h case   34:*/		if ( regs.CR[6].eq ) { return 0x821D2C54;  }
		/* 821D2BE8h case   34:*/		return 0x821D2BEC;
		  /* 821D2BECh */ case   35:  		/* rlwinm R7, R3, 0, 31, 31 */
		/* 821D2BECh case   35:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R3);
		/* 821D2BECh case   35:*/		return 0x821D2BF0;
		  /* 821D2BF0h */ case   36:  		/* rlwinm R6, R11, 0, 30, 31 */
		/* 821D2BF0h case   36:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R11);
		/* 821D2BF0h case   36:*/		return 0x821D2BF4;
		  /* 821D2BF4h */ case   37:  		/* mr R3, R18 */
		/* 821D2BF4h case   37:*/		regs.R3 = regs.R18;
		/* 821D2BF4h case   37:*/		return 0x821D2BF8;
		  /* 821D2BF8h */ case   38:  		/* bl -115128 */
		/* 821D2BF8h case   38:*/		regs.LR = 0x821D2BFC; return 0x821B6A40;
		/* 821D2BF8h case   38:*/		return 0x821D2BFC;
		  /* 821D2BFCh */ case   39:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D2BFCh case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2BFCh case   39:*/		return 0x821D2C00;
		  /* 821D2C00h */ case   40:  		/* mr R4, R3 */
		/* 821D2C00h case   40:*/		regs.R4 = regs.R3;
		/* 821D2C00h case   40:*/		return 0x821D2C04;
		  /* 821D2C04h */ case   41:  		/* addi R11, R11, 4 */
		/* 821D2C04h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D2C04h case   41:*/		return 0x821D2C08;
		  /* 821D2C08h */ case   42:  		/* lwz R10, <#[R11]> */
		/* 821D2C08h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2C08h case   42:*/		return 0x821D2C0C;
		  /* 821D2C0Ch */ case   43:  		/* b 12 */
		/* 821D2C0Ch case   43:*/		return 0x821D2C18;
		/* 821D2C0Ch case   43:*/		return 0x821D2C10;
		  /* 821D2C10h */ case   44:  		/* addi R11, R10, 8 */
		/* 821D2C10h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D2C10h case   44:*/		return 0x821D2C14;
		  /* 821D2C14h */ case   45:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D2C14h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D2C14h case   45:*/		return 0x821D2C18;
	}
	return 0x821D2C18;
} // Block from 821D2B60h-821D2C18h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821D2C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2C18);
		  /* 821D2C18h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D2C18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D2C18h case    0:*/		return 0x821D2C1C;
		  /* 821D2C1Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D2C1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2C10;  }
		/* 821D2C1Ch case    1:*/		return 0x821D2C20;
		  /* 821D2C20h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D2C20h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2C20h case    2:*/		return 0x821D2C24;
		  /* 821D2C24h */ case    3:  		/* li R9, 57 */
		/* 821D2C24h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821D2C24h case    3:*/		return 0x821D2C28;
		  /* 821D2C28h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821D2C28h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2C28h case    4:*/		return 0x821D2C2C;
		  /* 821D2C2Ch */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 821D2C2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821D2C2Ch case    5:*/		return 0x821D2C30;
		  /* 821D2C30h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821D2C30h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2C30h case    6:*/		return 0x821D2C34;
		  /* 821D2C34h */ case    7:  		/* stw R31, <#[R4 + 4]> */
		/* 821D2C34h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 821D2C34h case    7:*/		return 0x821D2C38;
		  /* 821D2C38h */ case    8:  		/* stw R4, <#[R31 + 12]> */
		/* 821D2C38h case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2C38h case    8:*/		return 0x821D2C3C;
		  /* 821D2C3Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821D2C3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2C3Ch case    9:*/		return 0x821D2C40;
		  /* 821D2C40h */ case   10:  		/* rlwimi R11, R30, 0, 27, 30 */
		/* 821D2C40h case   10:*/		cpu::op::rlwimi<0,0,27,30>(regs,&regs.R11,regs.R30);
		/* 821D2C40h case   10:*/		return 0x821D2C44;
		  /* 821D2C44h */ case   11:  		/* rlwimi R11, R9, 7, 31, 31 */
		/* 821D2C44h case   11:*/		cpu::op::rlwimi<0,7,31,31>(regs,&regs.R11,regs.R9);
		/* 821D2C44h case   11:*/		return 0x821D2C48;
		  /* 821D2C48h */ case   12:  		/* rlwimi R11, R9, 7, 19, 26 */
		/* 821D2C48h case   12:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R9);
		/* 821D2C48h case   12:*/		return 0x821D2C4C;
		  /* 821D2C4Ch */ case   13:  		/* stw R11, <#[R31]> */
		/* 821D2C4Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2C4Ch case   13:*/		return 0x821D2C50;
		  /* 821D2C50h */ case   14:  		/* b -772 */
		/* 821D2C50h case   14:*/		return 0x821D294C;
		/* 821D2C50h case   14:*/		return 0x821D2C54;
	}
	return 0x821D2C54;
} // Block from 821D2C18h-821D2C54h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D2C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2C54);
		  /* 821D2C54h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D2C54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2C54h case    0:*/		return 0x821D2C58;
		  /* 821D2C58h */ case    1:  		/* lwz R9, <#[R29 + 12]> */
		/* 821D2C58h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D2C58h case    1:*/		return 0x821D2C5C;
		  /* 821D2C5Ch */ case    2:  		/* addi R11, R11, 4 */
		/* 821D2C5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D2C5Ch case    2:*/		return 0x821D2C60;
		  /* 821D2C60h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821D2C60h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2C60h case    3:*/		return 0x821D2C64;
		  /* 821D2C64h */ case    4:  		/* b 12 */
		/* 821D2C64h case    4:*/		return 0x821D2C70;
		/* 821D2C64h case    4:*/		return 0x821D2C68;
		  /* 821D2C68h */ case    5:  		/* addi R11, R10, 8 */
		/* 821D2C68h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D2C68h case    5:*/		return 0x821D2C6C;
		  /* 821D2C6Ch */ case    6:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D2C6Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D2C6Ch case    6:*/		return 0x821D2C70;
	}
	return 0x821D2C70;
} // Block from 821D2C54h-821D2C70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D2C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2C70);
		  /* 821D2C70h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D2C70h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D2C70h case    0:*/		return 0x821D2C74;
		  /* 821D2C74h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D2C74h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D2C68;  }
		/* 821D2C74h case    1:*/		return 0x821D2C78;
		  /* 821D2C78h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D2C78h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2C78h case    2:*/		return 0x821D2C7C;
		  /* 821D2C7Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 821D2C7Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D2C7Ch case    3:*/		return 0x821D2C80;
		  /* 821D2C80h */ case    4:  		/* lwz R11, <#[R9 + 4]> */
		/* 821D2C80h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821D2C80h case    4:*/		return 0x821D2C84;
		  /* 821D2C84h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821D2C84h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D2C84h case    5:*/		return 0x821D2C88;
		  /* 821D2C88h */ case    6:  		/* stw R31, <#[R9 + 4]> */
		/* 821D2C88h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R9 + 0x00000004) );
		/* 821D2C88h case    6:*/		return 0x821D2C8C;
		  /* 821D2C8Ch */ case    7:  		/* stw R9, <#[R31 + 12]> */
		/* 821D2C8Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2C8Ch case    7:*/		return 0x821D2C90;
		  /* 821D2C90h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821D2C90h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2C90h case    8:*/		return 0x821D2C94;
		  /* 821D2C94h */ case    9:  		/* rlwimi R11, R30, 0, 27, 31 */
		/* 821D2C94h case    9:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R30);
		/* 821D2C94h case    9:*/		return 0x821D2C98;
		  /* 821D2C98h */ case   10:  		/* mr R10, R11 */
		/* 821D2C98h case   10:*/		regs.R10 = regs.R11;
		/* 821D2C98h case   10:*/		return 0x821D2C9C;
		  /* 821D2C9Ch */ case   11:  		/* stw R11, <#[R31]> */
		/* 821D2C9Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2C9Ch case   11:*/		return 0x821D2CA0;
		  /* 821D2CA0h */ case   12:  		/* lwz R11, <#[R1 + 232]> */
		/* 821D2CA0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E8) );
		/* 821D2CA0h case   12:*/		return 0x821D2CA4;
		  /* 821D2CA4h */ case   13:  		/* rlwimi R10, R11, 5, 19, 26 */
		/* 821D2CA4h case   13:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R10,regs.R11);
		/* 821D2CA4h case   13:*/		return 0x821D2CA8;
		  /* 821D2CA8h */ case   14:  		/* stw R10, <#[R31]> */
		/* 821D2CA8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D2CA8h case   14:*/		return 0x821D2CAC;
	}
	return 0x821D2CAC;
} // Block from 821D2C70h-821D2CACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D2CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2CAC);
		  /* 821D2CACh */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821D2CACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821D2CACh case    0:*/		return 0x821D2CB0;
		  /* 821D2CB0h */ case    1:  		/* b -1036 */
		/* 821D2CB0h case    1:*/		return 0x821D28A4;
		/* 821D2CB0h case    1:*/		return 0x821D2CB4;
	}
	return 0x821D2CB4;
} // Block from 821D2CACh-821D2CB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2CB4);
		  /* 821D2CB4h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D2CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2CB4h case    0:*/		return 0x821D2CB8;
		  /* 821D2CB8h */ case    1:  		/* rlwinm. R10, R11, 7, 31, 31 */
		/* 821D2CB8h case    1:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R10,regs.R11);
		/* 821D2CB8h case    1:*/		return 0x821D2CBC;
		  /* 821D2CBCh */ case    2:  		/* bc 4, CR0_EQ, -1964 */
		/* 821D2CBCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D2510;  }
		/* 821D2CBCh case    2:*/		return 0x821D2CC0;
		  /* 821D2CC0h */ case    3:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821D2CC0h case    3:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821D2CC0h case    3:*/		return 0x821D2CC4;
		  /* 821D2CC4h */ case    4:  		/* bc 4, CR0_EQ, -1972 */
		/* 821D2CC4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D2510;  }
		/* 821D2CC4h case    4:*/		return 0x821D2CC8;
		  /* 821D2CC8h */ case    5:  		/* mr R3, R16 */
		/* 821D2CC8h case    5:*/		regs.R3 = regs.R16;
		/* 821D2CC8h case    5:*/		return 0x821D2CCC;
		  /* 821D2CCCh */ case    6:  		/* bl -451404 */
		/* 821D2CCCh case    6:*/		regs.LR = 0x821D2CD0; return 0x82164980;
		/* 821D2CCCh case    6:*/		return 0x821D2CD0;
		  /* 821D2CD0h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2CD0h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2CD0h case    7:*/		return 0x821D2CD4;
		  /* 821D2CD4h */ case    8:  		/* bc 4, CR0_EQ, -3068 */
		/* 821D2CD4h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D20D8;  }
		/* 821D2CD4h case    8:*/		return 0x821D2CD8;
		  /* 821D2CD8h */ case    9:  		/* mr R3, R16 */
		/* 821D2CD8h case    9:*/		regs.R3 = regs.R16;
		/* 821D2CD8h case    9:*/		return 0x821D2CDC;
		  /* 821D2CDCh */ case   10:  		/* bl -453676 */
		/* 821D2CDCh case   10:*/		regs.LR = 0x821D2CE0; return 0x821640B0;
		/* 821D2CDCh case   10:*/		return 0x821D2CE0;
		  /* 821D2CE0h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2CE0h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2CE0h case   11:*/		return 0x821D2CE4;
		  /* 821D2CE4h */ case   12:  		/* bc 4, CR0_EQ, 76 */
		/* 821D2CE4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D2D30;  }
		/* 821D2CE4h case   12:*/		return 0x821D2CE8;
		  /* 821D2CE8h */ case   13:  		/* lwz R31, <#[R16]> */
		/* 821D2CE8h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000000) );
		/* 821D2CE8h case   13:*/		return 0x821D2CEC;
		  /* 821D2CECh */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821D2CECh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D2CECh case   14:*/		return 0x821D2CF0;
		  /* 821D2CF0h */ case   15:  		/* bc 12, CR6_EQ, 64 */
		/* 821D2CF0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821D2D30;  }
		/* 821D2CF0h case   15:*/		return 0x821D2CF4;
		  /* 821D2CF4h */ case   16:  		/* lwz R4, <#[R31 + 12]> */
		/* 821D2CF4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D2CF4h case   16:*/		return 0x821D2CF8;
		  /* 821D2CF8h */ case   17:  		/* cmplw CR6, R4, R16 */
		/* 821D2CF8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R16);
		/* 821D2CF8h case   17:*/		return 0x821D2CFC;
		  /* 821D2CFCh */ case   18:  		/* bc 12, CR6_EQ, 44 */
		/* 821D2CFCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821D2D28;  }
		/* 821D2CFCh case   18:*/		return 0x821D2D00;
		  /* 821D2D00h */ case   19:  		/* mr R7, R22 */
		/* 821D2D00h case   19:*/		regs.R7 = regs.R22;
		/* 821D2D00h case   19:*/		return 0x821D2D04;
		  /* 821D2D04h */ case   20:  		/* mr R6, R17 */
		/* 821D2D04h case   20:*/		regs.R6 = regs.R17;
		/* 821D2D04h case   20:*/		return 0x821D2D08;
		  /* 821D2D08h */ case   21:  		/* mr R5, R16 */
		/* 821D2D08h case   21:*/		regs.R5 = regs.R16;
		/* 821D2D08h case   21:*/		return 0x821D2D0C;
		  /* 821D2D0Ch */ case   22:  		/* mr R3, R18 */
		/* 821D2D0Ch case   22:*/		regs.R3 = regs.R18;
		/* 821D2D0Ch case   22:*/		return 0x821D2D10;
		  /* 821D2D10h */ case   23:  		/* bl -27424 */
		/* 821D2D10h case   23:*/		regs.LR = 0x821D2D14; return 0x821CC1F0;
		/* 821D2D10h case   23:*/		return 0x821D2D14;
		  /* 821D2D14h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2D14h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2D14h case   24:*/		return 0x821D2D18;
		  /* 821D2D18h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 821D2D18h case   25:*/		if ( regs.CR[0].eq ) { return 0x821D2D28;  }
		/* 821D2D18h case   25:*/		return 0x821D2D1C;
		  /* 821D2D1Ch */ case   26:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D2D1Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2D1Ch case   26:*/		return 0x821D2D20;
		  /* 821D2D20h */ case   27:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821D2D20h case   27:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821D2D20h case   27:*/		return 0x821D2D24;
		  /* 821D2D24h */ case   28:  		/* bc 4, CR0_EQ, -3128 */
		/* 821D2D24h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821D20EC;  }
		/* 821D2D24h case   28:*/		return 0x821D2D28;
	}
	return 0x821D2D28;
} // Block from 821D2CB4h-821D2D28h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D2D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2D28);
		  /* 821D2D28h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821D2D28h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821D2D28h case    0:*/		return 0x821D2D2C;
		  /* 821D2D2Ch */ case    1:  		/* b -64 */
		/* 821D2D2Ch case    1:*/		return 0x821D2CEC;
		/* 821D2D2Ch case    1:*/		return 0x821D2D30;
	}
	return 0x821D2D30;
} // Block from 821D2D28h-821D2D30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2D30);
		  /* 821D2D30h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D2D30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2D30h case    0:*/		return 0x821D2D34;
		  /* 821D2D34h */ case    1:  		/* rlwinm. R11, R11, 25, 25, 31 */
		/* 821D2D34h case    1:*/		cpu::op::rlwinm<1,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D2D34h case    1:*/		return 0x821D2D38;
		  /* 821D2D38h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821D2D38h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D2D48;  }
		/* 821D2D38h case    2:*/		return 0x821D2D3C;
		  /* 821D2D3Ch */ case    3:  		/* cmplwi CR6, R11, 4 */
		/* 821D2D3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821D2D3Ch case    3:*/		return 0x821D2D40;
		  /* 821D2D40h */ case    4:  		/* mr R11, R23 */
		/* 821D2D40h case    4:*/		regs.R11 = regs.R23;
		/* 821D2D40h case    4:*/		return 0x821D2D44;
		  /* 821D2D44h */ case    5:  		/* bc 4, CR6_GT, 8 */
		/* 821D2D44h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821D2D4C;  }
		/* 821D2D44h case    5:*/		return 0x821D2D48;
	}
	return 0x821D2D48;
} // Block from 821D2D30h-821D2D48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D2D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2D48);
		  /* 821D2D48h */ case    0:  		/* li R11, 0 */
		/* 821D2D48h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D2D48h case    0:*/		return 0x821D2D4C;
	}
	return 0x821D2D4C;
} // Block from 821D2D48h-821D2D4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D2D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2D4C);
		  /* 821D2D4Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D2D4Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D2D4Ch case    0:*/		return 0x821D2D50;
		  /* 821D2D50h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D2D50h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D2D60;  }
		/* 821D2D50h case    1:*/		return 0x821D2D54;
		  /* 821D2D54h */ case    2:  		/* mr R4, R16 */
		/* 821D2D54h case    2:*/		regs.R4 = regs.R16;
		/* 821D2D54h case    2:*/		return 0x821D2D58;
		  /* 821D2D58h */ case    3:  		/* mr R3, R18 */
		/* 821D2D58h case    3:*/		regs.R3 = regs.R18;
		/* 821D2D58h case    3:*/		return 0x821D2D5C;
		  /* 821D2D5Ch */ case    4:  		/* bl -8308 */
		/* 821D2D5Ch case    4:*/		regs.LR = 0x821D2D60; return 0x821D0CE8;
		/* 821D2D5Ch case    4:*/		return 0x821D2D60;
	}
	return 0x821D2D60;
} // Block from 821D2D4Ch-821D2D60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2D60);
		  /* 821D2D60h */ case    0:  		/* mr R3, R16 */
		/* 821D2D60h case    0:*/		regs.R3 = regs.R16;
		/* 821D2D60h case    0:*/		return 0x821D2D64;
		  /* 821D2D64h */ case    1:  		/* bl -451556 */
		/* 821D2D64h case    1:*/		regs.LR = 0x821D2D68; return 0x82164980;
		/* 821D2D64h case    1:*/		return 0x821D2D68;
		  /* 821D2D68h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2D68h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2D68h case    2:*/		return 0x821D2D6C;
		  /* 821D2D6Ch */ case    3:  		/* bc 4, CR0_EQ, -3220 */
		/* 821D2D6Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D20D8;  }
		/* 821D2D6Ch case    3:*/		return 0x821D2D70;
		  /* 821D2D70h */ case    4:  		/* mr R3, R16 */
		/* 821D2D70h case    4:*/		regs.R3 = regs.R16;
		/* 821D2D70h case    4:*/		return 0x821D2D74;
		  /* 821D2D74h */ case    5:  		/* bl -89900 */
		/* 821D2D74h case    5:*/		regs.LR = 0x821D2D78; return 0x821BCE48;
		/* 821D2D74h case    5:*/		return 0x821D2D78;
		  /* 821D2D78h */ case    6:  		/* lis R11, -32256 */
		/* 821D2D78h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D2D78h case    6:*/		return 0x821D2D7C;
		  /* 821D2D7Ch */ case    7:  		/* rlwinm. R10, R3, 0, 24, 31 */
		/* 821D2D7Ch case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R3);
		/* 821D2D7Ch case    7:*/		return 0x821D2D80;
		  /* 821D2D80h */ case    8:  		/* lfs FR29, <#[R11 + 1816]> */
		/* 821D2D80h case    8:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000718) );
		/* 821D2D80h case    8:*/		return 0x821D2D84;
		  /* 821D2D84h */ case    9:  		/* bc 12, CR0_EQ, 3552 */
		/* 821D2D84h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D3B64;  }
		/* 821D2D84h case    9:*/		return 0x821D2D88;
		  /* 821D2D88h */ case   10:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D2D88h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D2D88h case   10:*/		return 0x821D2D8C;
		  /* 821D2D8Ch */ case   11:  		/* lis R10, 16 */
		/* 821D2D8Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x10);
		/* 821D2D8Ch case   11:*/		return 0x821D2D90;
		  /* 821D2D90h */ case   12:  		/* lwz R23, <#[R16 + 44]> */
		/* 821D2D90h case   12:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D2D90h case   12:*/		return 0x821D2D94;
		  /* 821D2D94h */ case   13:  		/* li R14, 0 */
		/* 821D2D94h case   13:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 821D2D94h case   13:*/		return 0x821D2D98;
		  /* 821D2D98h */ case   14:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821D2D98h case   14:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821D2D98h case   14:*/		return 0x821D2D9C;
		  /* 821D2D9Ch */ case   15:  		/* lwz R21, <#[R16 + 48]> */
		/* 821D2D9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R16 + 0x00000030) );
		/* 821D2D9Ch case   15:*/		return 0x821D2DA0;
		  /* 821D2DA0h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821D2DA0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D2DA0h case   16:*/		return 0x821D2DA4;
		  /* 821D2DA4h */ case   17:  		/* bc 4, CR6_GT, 8 */
		/* 821D2DA4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821D2DAC;  }
		/* 821D2DA4h case   17:*/		return 0x821D2DA8;
		  /* 821D2DA8h */ case   18:  		/* lwz R14, <#[R16 + 52]> */
		/* 821D2DA8h case   18:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R16 + 0x00000034) );
		/* 821D2DA8h case   18:*/		return 0x821D2DAC;
	}
	return 0x821D2DAC;
} // Block from 821D2D60h-821D2DACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D2DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2DAC);
		  /* 821D2DACh */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821D2DACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821D2DACh case    0:*/		return 0x821D2DB0;
		  /* 821D2DB0h */ case    1:  		/* li R20, 0 */
		/* 821D2DB0h case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821D2DB0h case    1:*/		return 0x821D2DB4;
		  /* 821D2DB4h */ case    2:  		/* li R18, 0 */
		/* 821D2DB4h case    2:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821D2DB4h case    2:*/		return 0x821D2DB8;
		  /* 821D2DB8h */ case    3:  		/* rlwinm. R15, R11, 7, 29, 31 */
		/* 821D2DB8h case    3:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R15,regs.R11);
		/* 821D2DB8h case    3:*/		return 0x821D2DBC;
		  /* 821D2DBCh */ case    4:  		/* li R17, 0 */
		/* 821D2DBCh case    4:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821D2DBCh case    4:*/		return 0x821D2DC0;
		  /* 821D2DC0h */ case    5:  		/* li R19, 0 */
		/* 821D2DC0h case    5:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821D2DC0h case    5:*/		return 0x821D2DC4;
		  /* 821D2DC4h */ case    6:  		/* li R24, 0 */
		/* 821D2DC4h case    6:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821D2DC4h case    6:*/		return 0x821D2DC8;
		  /* 821D2DC8h */ case    7:  		/* li R30, 0 */
		/* 821D2DC8h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D2DC8h case    7:*/		return 0x821D2DCC;
		  /* 821D2DCCh */ case    8:  		/* li R27, 1 */
		/* 821D2DCCh case    8:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821D2DCCh case    8:*/		return 0x821D2DD0;
		  /* 821D2DD0h */ case    9:  		/* bc 12, CR0_EQ, 740 */
		/* 821D2DD0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D30B4;  }
		/* 821D2DD0h case    9:*/		return 0x821D2DD4;
		  /* 821D2DD4h */ case   10:  		/* lwz R25, <#[R1 + 112]> */
		/* 821D2DD4h case   10:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 821D2DD4h case   10:*/		return 0x821D2DD8;
		  /* 821D2DD8h */ case   11:  		/* li R28, 0 */
		/* 821D2DD8h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D2DD8h case   11:*/		return 0x821D2DDC;
		  /* 821D2DDCh */ case   12:  		/* lwz R26, <#[R1 + 1908]> */
		/* 821D2DDCh case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000774) );
		/* 821D2DDCh case   12:*/		return 0x821D2DE0;
		  /* 821D2DE0h */ case   13:  		/* li R29, 0 */
		/* 821D2DE0h case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D2DE0h case   13:*/		return 0x821D2DE4;
		  /* 821D2DE4h */ case   14:  		/* li R10, 0 */
		/* 821D2DE4h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D2DE4h case   14:*/		return 0x821D2DE8;
		  /* 821D2DE8h */ case   15:  		/* mr R9, R16 */
		/* 821D2DE8h case   15:*/		regs.R9 = regs.R16;
		/* 821D2DE8h case   15:*/		return 0x821D2DEC;
		  /* 821D2DECh */ case   16:  		/* li R8, 0 */
		/* 821D2DECh case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D2DECh case   16:*/		return 0x821D2DF0;
		  /* 821D2DF0h */ case   17:  		/* addi R7, R1, 776 */
		/* 821D2DF0h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x308);
		/* 821D2DF0h case   17:*/		return 0x821D2DF4;
		  /* 821D2DF4h */ case   18:  		/* addi R6, R1, 1040 */
		/* 821D2DF4h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x410);
		/* 821D2DF4h case   18:*/		return 0x821D2DF8;
		  /* 821D2DF8h */ case   19:  		/* addi R5, R1, 1384 */
		/* 821D2DF8h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x568);
		/* 821D2DF8h case   19:*/		return 0x821D2DFC;
		  /* 821D2DFCh */ case   20:  		/* mr R4, R30 */
		/* 821D2DFCh case   20:*/		regs.R4 = regs.R30;
		/* 821D2DFCh case   20:*/		return 0x821D2E00;
		  /* 821D2E00h */ case   21:  		/* mr R3, R23 */
		/* 821D2E00h case   21:*/		regs.R3 = regs.R23;
		/* 821D2E00h case   21:*/		return 0x821D2E04;
		  /* 821D2E04h */ case   22:  		/* bl 329420 */
		/* 821D2E04h case   22:*/		regs.LR = 0x821D2E08; return 0x822234D0;
		/* 821D2E04h case   22:*/		return 0x821D2E08;
		  /* 821D2E08h */ case   23:  		/* li R10, 0 */
		/* 821D2E08h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D2E08h case   23:*/		return 0x821D2E0C;
		  /* 821D2E0Ch */ case   24:  		/* mr R9, R16 */
		/* 821D2E0Ch case   24:*/		regs.R9 = regs.R16;
		/* 821D2E0Ch case   24:*/		return 0x821D2E10;
		  /* 821D2E10h */ case   25:  		/* li R8, 0 */
		/* 821D2E10h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D2E10h case   25:*/		return 0x821D2E14;
		  /* 821D2E14h */ case   26:  		/* addi R7, R1, 788 */
		/* 821D2E14h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x314);
		/* 821D2E14h case   26:*/		return 0x821D2E18;
		  /* 821D2E18h */ case   27:  		/* addi R6, R1, 1424 */
		/* 821D2E18h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x590);
		/* 821D2E18h case   27:*/		return 0x821D2E1C;
		  /* 821D2E1Ch */ case   28:  		/* addi R5, R1, 1440 */
		/* 821D2E1Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5A0);
		/* 821D2E1Ch case   28:*/		return 0x821D2E20;
		  /* 821D2E20h */ case   29:  		/* mr R4, R30 */
		/* 821D2E20h case   29:*/		regs.R4 = regs.R30;
		/* 821D2E20h case   29:*/		return 0x821D2E24;
		  /* 821D2E24h */ case   30:  		/* mr R3, R21 */
		/* 821D2E24h case   30:*/		regs.R3 = regs.R21;
		/* 821D2E24h case   30:*/		return 0x821D2E28;
		  /* 821D2E28h */ case   31:  		/* bl 329384 */
		/* 821D2E28h case   31:*/		regs.LR = 0x821D2E2C; return 0x822234D0;
		/* 821D2E28h case   31:*/		return 0x821D2E2C;
		  /* 821D2E2Ch */ case   32:  		/* mr R4, R30 */
		/* 821D2E2Ch case   32:*/		regs.R4 = regs.R30;
		/* 821D2E2Ch case   32:*/		return 0x821D2E30;
		  /* 821D2E30h */ case   33:  		/* mr R3, R23 */
		/* 821D2E30h case   33:*/		regs.R3 = regs.R23;
		/* 821D2E30h case   33:*/		return 0x821D2E34;
		  /* 821D2E34h */ case   34:  		/* bl -228620 */
		/* 821D2E34h case   34:*/		regs.LR = 0x821D2E38; return 0x8219B128;
		/* 821D2E34h case   34:*/		return 0x821D2E38;
		  /* 821D2E38h */ case   35:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2E38h case   35:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2E38h case   35:*/		return 0x821D2E3C;
		  /* 821D2E3Ch */ case   36:  		/* bc 4, CR0_EQ, 52 */
		/* 821D2E3Ch case   36:*/		if ( !regs.CR[0].eq ) { return 0x821D2E70;  }
		/* 821D2E3Ch case   36:*/		return 0x821D2E40;
		  /* 821D2E40h */ case   37:  		/* mr R4, R30 */
		/* 821D2E40h case   37:*/		regs.R4 = regs.R30;
		/* 821D2E40h case   37:*/		return 0x821D2E44;
		  /* 821D2E44h */ case   38:  		/* mr R3, R21 */
		/* 821D2E44h case   38:*/		regs.R3 = regs.R21;
		/* 821D2E44h case   38:*/		return 0x821D2E48;
		  /* 821D2E48h */ case   39:  		/* bl -228640 */
		/* 821D2E48h case   39:*/		regs.LR = 0x821D2E4C; return 0x8219B128;
		/* 821D2E48h case   39:*/		return 0x821D2E4C;
		  /* 821D2E4Ch */ case   40:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2E4Ch case   40:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2E4Ch case   40:*/		return 0x821D2E50;
		  /* 821D2E50h */ case   41:  		/* bc 4, CR0_EQ, 32 */
		/* 821D2E50h case   41:*/		if ( !regs.CR[0].eq ) { return 0x821D2E70;  }
		/* 821D2E50h case   41:*/		return 0x821D2E54;
		  /* 821D2E54h */ case   42:  		/* li R11, 3 */
		/* 821D2E54h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821D2E54h case   42:*/		return 0x821D2E58;
		  /* 821D2E58h */ case   43:  		/* slw R10, R24, R29 */
		/* 821D2E58h case   43:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R29);
		/* 821D2E58h case   43:*/		return 0x821D2E5C;
		  /* 821D2E5Ch */ case   44:  		/* slw R11, R11, R29 */
		/* 821D2E5Ch case   44:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821D2E5Ch case   44:*/		return 0x821D2E60;
		  /* 821D2E60h */ case   45:  		/* andc R11, R19, R11 */
		/* 821D2E60h case   45:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R19,regs.R11);
		/* 821D2E60h case   45:*/		return 0x821D2E64;
		  /* 821D2E64h */ case   46:  		/* addi R24, R24, 1 */
		/* 821D2E64h case   46:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821D2E64h case   46:*/		return 0x821D2E68;
		  /* 821D2E68h */ case   47:  		/* or R19, R11, R10 */
		/* 821D2E68h case   47:*/		cpu::op::or<0>(regs,&regs.R19,regs.R11,regs.R10);
		/* 821D2E68h case   47:*/		return 0x821D2E6C;
		  /* 821D2E6Ch */ case   48:  		/* b 12 */
		/* 821D2E6Ch case   48:*/		return 0x821D2E78;
		/* 821D2E6Ch case   48:*/		return 0x821D2E70;
	}
	return 0x821D2E70;
} // Block from 821D2DACh-821D2E70h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821D2E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2E70);
		  /* 821D2E70h */ case    0:  		/* slw R11, R27, R30 */
		/* 821D2E70h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R27,regs.R30);
		/* 821D2E70h case    0:*/		return 0x821D2E74;
		  /* 821D2E74h */ case    1:  		/* or R20, R11, R20 */
		/* 821D2E74h case    1:*/		cpu::op::or<0>(regs,&regs.R20,regs.R11,regs.R20);
		/* 821D2E74h case    1:*/		return 0x821D2E78;
	}
	return 0x821D2E78;
} // Block from 821D2E70h-821D2E78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2E78);
		  /* 821D2E78h */ case    0:  		/* lwz R11, <#[R1 + 776]> */
		/* 821D2E78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000308) );
		/* 821D2E78h case    0:*/		return 0x821D2E7C;
		  /* 821D2E7Ch */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821D2E7Ch case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821D2E7Ch case    1:*/		return 0x821D2E80;
		  /* 821D2E80h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821D2E80h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D2E8C;  }
		/* 821D2E80h case    2:*/		return 0x821D2E84;
		  /* 821D2E84h */ case    3:  		/* slw R11, R27, R30 */
		/* 821D2E84h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R27,regs.R30);
		/* 821D2E84h case    3:*/		return 0x821D2E88;
		  /* 821D2E88h */ case    4:  		/* or R18, R11, R18 */
		/* 821D2E88h case    4:*/		cpu::op::or<0>(regs,&regs.R18,regs.R11,regs.R18);
		/* 821D2E88h case    4:*/		return 0x821D2E8C;
	}
	return 0x821D2E8C;
} // Block from 821D2E78h-821D2E8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2E8C);
		  /* 821D2E8Ch */ case    0:  		/* lwz R11, <#[R1 + 788]> */
		/* 821D2E8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000314) );
		/* 821D2E8Ch case    0:*/		return 0x821D2E90;
		  /* 821D2E90h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821D2E90h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821D2E90h case    1:*/		return 0x821D2E94;
		  /* 821D2E94h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821D2E94h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D2EA0;  }
		/* 821D2E94h case    2:*/		return 0x821D2E98;
		  /* 821D2E98h */ case    3:  		/* slw R11, R27, R30 */
		/* 821D2E98h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R27,regs.R30);
		/* 821D2E98h case    3:*/		return 0x821D2E9C;
		  /* 821D2E9Ch */ case    4:  		/* or R17, R11, R17 */
		/* 821D2E9Ch case    4:*/		cpu::op::or<0>(regs,&regs.R17,regs.R11,regs.R17);
		/* 821D2E9Ch case    4:*/		return 0x821D2EA0;
	}
	return 0x821D2EA0;
} // Block from 821D2E8Ch-821D2EA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2EA0);
		  /* 821D2EA0h */ case    0:  		/* mr R3, R16 */
		/* 821D2EA0h case    0:*/		regs.R3 = regs.R16;
		/* 821D2EA0h case    0:*/		return 0x821D2EA4;
		  /* 821D2EA4h */ case    1:  		/* bl -401652 */
		/* 821D2EA4h case    1:*/		regs.LR = 0x821D2EA8; return 0x82170DB0;
		/* 821D2EA4h case    1:*/		return 0x821D2EA8;
		  /* 821D2EA8h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2EA8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2EA8h case    2:*/		return 0x821D2EAC;
		  /* 821D2EACh */ case    3:  		/* bc 12, CR0_EQ, 500 */
		/* 821D2EACh case    3:*/		if ( regs.CR[0].eq ) { return 0x821D30A0;  }
		/* 821D2EACh case    3:*/		return 0x821D2EB0;
		  /* 821D2EB0h */ case    4:  		/* cmplwi CR6, R14, 0 */
		/* 821D2EB0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821D2EB0h case    4:*/		return 0x821D2EB4;
		  /* 821D2EB4h */ case    5:  		/* bc 4, CR6_EQ, 492 */
		/* 821D2EB4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D30A0;  }
		/* 821D2EB4h case    5:*/		return 0x821D2EB8;
		  /* 821D2EB8h */ case    6:  		/* mr R4, R21 */
		/* 821D2EB8h case    6:*/		regs.R4 = regs.R21;
		/* 821D2EB8h case    6:*/		return 0x821D2EBC;
		  /* 821D2EBCh */ case    7:  		/* mr R3, R23 */
		/* 821D2EBCh case    7:*/		regs.R3 = regs.R23;
		/* 821D2EBCh case    7:*/		return 0x821D2EC0;
		  /* 821D2EC0h */ case    8:  		/* bl -453688 */
		/* 821D2EC0h case    8:*/		regs.LR = 0x821D2EC4; return 0x82164288;
		/* 821D2EC0h case    8:*/		return 0x821D2EC4;
		  /* 821D2EC4h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2EC4h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2EC4h case    9:*/		return 0x821D2EC8;
		  /* 821D2EC8h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821D2EC8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821D2EE0;  }
		/* 821D2EC8h case   10:*/		return 0x821D2ECC;
		  /* 821D2ECCh */ case   11:  		/* mr R4, R30 */
		/* 821D2ECCh case   11:*/		regs.R4 = regs.R30;
		/* 821D2ECCh case   11:*/		return 0x821D2ED0;
		  /* 821D2ED0h */ case   12:  		/* mr R3, R16 */
		/* 821D2ED0h case   12:*/		regs.R3 = regs.R16;
		/* 821D2ED0h case   12:*/		return 0x821D2ED4;
		  /* 821D2ED4h */ case   13:  		/* bl -89492 */
		/* 821D2ED4h case   13:*/		regs.LR = 0x821D2ED8; return 0x821BD140;
		/* 821D2ED4h case   13:*/		return 0x821D2ED8;
		  /* 821D2ED8h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D2ED8h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D2ED8h case   14:*/		return 0x821D2EDC;
		  /* 821D2EDCh */ case   15:  		/* b 228 */
		/* 821D2EDCh case   15:*/		return 0x821D2FC0;
		/* 821D2EDCh case   15:*/		return 0x821D2EE0;
	}
	return 0x821D2EE0;
} // Block from 821D2EA0h-821D2EE0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D2EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2EE0);
		  /* 821D2EE0h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821D2EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821D2EE0h case    0:*/		return 0x821D2EE4;
		  /* 821D2EE4h */ case    1:  		/* lwz R10, <#[R23 + 12]> */
		/* 821D2EE4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000000C) );
		/* 821D2EE4h case    1:*/		return 0x821D2EE8;
		  /* 821D2EE8h */ case    2:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D2EE8h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D2EE8h case    2:*/		return 0x821D2EEC;
		  /* 821D2EECh */ case    3:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D2EECh case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D2EECh case    3:*/		return 0x821D2EF0;
		  /* 821D2EF0h */ case    4:  		/* srw R11, R9, R29 */
		/* 821D2EF0h case    4:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 821D2EF0h case    4:*/		return 0x821D2EF4;
		  /* 821D2EF4h */ case    5:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D2EF4h case    5:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D2EF4h case    5:*/		return 0x821D2EF8;
		  /* 821D2EF8h */ case    6:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D2EF8h case    6:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D2EF8h case    6:*/		return 0x821D2EFC;
		  /* 821D2EFCh */ case    7:  		/* srw R11, R10, R11 */
		/* 821D2EFCh case    7:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D2EFCh case    7:*/		return 0x821D2F00;
		  /* 821D2F00h */ case    8:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D2F00h case    8:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D2F00h case    8:*/		return 0x821D2F04;
		  /* 821D2F04h */ case    9:  		/* bl -228996 */
		/* 821D2F04h case    9:*/		regs.LR = 0x821D2F08; return 0x8219B080;
		/* 821D2F04h case    9:*/		return 0x821D2F08;
		  /* 821D2F08h */ case   10:  		/* lwz R11, <#[R21]> */
		/* 821D2F08h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821D2F08h case   10:*/		return 0x821D2F0C;
		  /* 821D2F0Ch */ case   11:  		/* lwz R10, <#[R21 + 12]> */
		/* 821D2F0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000000C) );
		/* 821D2F0Ch case   11:*/		return 0x821D2F10;
		  /* 821D2F10h */ case   12:  		/* mr R31, R3 */
		/* 821D2F10h case   12:*/		regs.R31 = regs.R3;
		/* 821D2F10h case   12:*/		return 0x821D2F14;
		  /* 821D2F14h */ case   13:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D2F14h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D2F14h case   13:*/		return 0x821D2F18;
		  /* 821D2F18h */ case   14:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D2F18h case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D2F18h case   14:*/		return 0x821D2F1C;
		  /* 821D2F1Ch */ case   15:  		/* srw R11, R9, R29 */
		/* 821D2F1Ch case   15:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 821D2F1Ch case   15:*/		return 0x821D2F20;
		  /* 821D2F20h */ case   16:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D2F20h case   16:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D2F20h case   16:*/		return 0x821D2F24;
		  /* 821D2F24h */ case   17:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D2F24h case   17:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D2F24h case   17:*/		return 0x821D2F28;
		  /* 821D2F28h */ case   18:  		/* srw R11, R10, R11 */
		/* 821D2F28h case   18:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D2F28h case   18:*/		return 0x821D2F2C;
		  /* 821D2F2Ch */ case   19:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D2F2Ch case   19:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D2F2Ch case   19:*/		return 0x821D2F30;
		  /* 821D2F30h */ case   20:  		/* bl -229040 */
		/* 821D2F30h case   20:*/		regs.LR = 0x821D2F34; return 0x8219B080;
		/* 821D2F30h case   20:*/		return 0x821D2F34;
		  /* 821D2F34h */ case   21:  		/* lwz R11, <#[R16 + 12]> */
		/* 821D2F34h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D2F34h case   21:*/		return 0x821D2F38;
		  /* 821D2F38h */ case   22:  		/* rlwinm R10, R31, 0, 30, 31 */
		/* 821D2F38h case   22:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R31);
		/* 821D2F38h case   22:*/		return 0x821D2F3C;
		  /* 821D2F3Ch */ case   23:  		/* rlwinm R8, R11, 0, 16, 31 */
		/* 821D2F3Ch case   23:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R11);
		/* 821D2F3Ch case   23:*/		return 0x821D2F40;
		  /* 821D2F40h */ case   24:  		/* rlwinm R9, R3, 0, 30, 31 */
		/* 821D2F40h case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R3);
		/* 821D2F40h case   24:*/		return 0x821D2F44;
		  /* 821D2F44h */ case   25:  		/* srw R8, R8, R28 */
		/* 821D2F44h case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R28);
		/* 821D2F44h case   25:*/		return 0x821D2F48;
		  /* 821D2F48h */ case   26:  		/* rlwinm R8, R8, 0, 29, 29 */
		/* 821D2F48h case   26:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R8,regs.R8);
		/* 821D2F48h case   26:*/		return 0x821D2F4C;
		  /* 821D2F4Ch */ case   27:  		/* cmplw CR6, R10, R9 */
		/* 821D2F4Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821D2F4Ch case   27:*/		return 0x821D2F50;
		  /* 821D2F50h */ case   28:  		/* bc 4, CR6_EQ, 36 */
		/* 821D2F50h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D2F74;  }
		/* 821D2F50h case   28:*/		return 0x821D2F54;
		  /* 821D2F54h */ case   29:  		/* cmplwi CR6, R10, 0 */
		/* 821D2F54h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D2F54h case   29:*/		return 0x821D2F58;
		  /* 821D2F58h */ case   30:  		/* bc 12, CR6_EQ, 48 */
		/* 821D2F58h case   30:*/		if ( regs.CR[6].eq ) { return 0x821D2F88;  }
		/* 821D2F58h case   30:*/		return 0x821D2F5C;
		  /* 821D2F5Ch */ case   31:  		/* cmplwi CR6, R10, 3 */
		/* 821D2F5Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000003);
		/* 821D2F5Ch case   31:*/		return 0x821D2F60;
		  /* 821D2F60h */ case   32:  		/* bc 4, CR6_EQ, 12 */
		/* 821D2F60h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821D2F6C;  }
		/* 821D2F60h case   32:*/		return 0x821D2F64;
		  /* 821D2F64h */ case   33:  		/* ori R8, R8, 3 */
		/* 821D2F64h case   33:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3);
		/* 821D2F64h case   33:*/		return 0x821D2F68;
		  /* 821D2F68h */ case   34:  		/* b 32 */
		/* 821D2F68h case   34:*/		return 0x821D2F88;
		/* 821D2F68h case   34:*/		return 0x821D2F6C;
	}
	return 0x821D2F6C;
} // Block from 821D2EE0h-821D2F6Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 821D2F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2F6C);
		  /* 821D2F6Ch */ case    0:  		/* ori R8, R8, 2 */
		/* 821D2F6Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2);
		/* 821D2F6Ch case    0:*/		return 0x821D2F70;
		  /* 821D2F70h */ case    1:  		/* b 24 */
		/* 821D2F70h case    1:*/		return 0x821D2F88;
		/* 821D2F70h case    1:*/		return 0x821D2F74;
	}
	return 0x821D2F74;
} // Block from 821D2F6Ch-821D2F74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D2F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2F74);
		  /* 821D2F74h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821D2F74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D2F74h case    0:*/		return 0x821D2F78;
		  /* 821D2F78h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821D2F78h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D2F88;  }
		/* 821D2F78h case    1:*/		return 0x821D2F7C;
		  /* 821D2F7Ch */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821D2F7Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821D2F7Ch case    2:*/		return 0x821D2F80;
		  /* 821D2F80h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821D2F80h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D2F88;  }
		/* 821D2F80h case    3:*/		return 0x821D2F84;
		  /* 821D2F84h */ case    4:  		/* ori R8, R8, 1 */
		/* 821D2F84h case    4:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821D2F84h case    4:*/		return 0x821D2F88;
	}
	return 0x821D2F88;
} // Block from 821D2F74h-821D2F88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2F88);
		  /* 821D2F88h */ case    0:  		/* and R10, R3, R31 */
		/* 821D2F88h case    0:*/		cpu::op::and<0>(regs,&regs.R10,regs.R3,regs.R31);
		/* 821D2F88h case    0:*/		return 0x821D2F8C;
		  /* 821D2F8Ch */ case    1:  		/* rlwinm R10, R10, 0, 0, 29 */
		/* 821D2F8Ch case    1:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R10);
		/* 821D2F8Ch case    1:*/		return 0x821D2F90;
		  /* 821D2F90h */ case    2:  		/* or R10, R10, R8 */
		/* 821D2F90h case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D2F90h case    2:*/		return 0x821D2F94;
		  /* 821D2F94h */ case    3:  		/* slw R10, R10, R28 */
		/* 821D2F94h case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 821D2F94h case    3:*/		return 0x821D2F98;
		  /* 821D2F98h */ case    4:  		/* and R9, R10, R11 */
		/* 821D2F98h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821D2F98h case    4:*/		return 0x821D2F9C;
		  /* 821D2F9Ch */ case    5:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D2F9Ch case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D2F9Ch case    5:*/		return 0x821D2FA0;
		  /* 821D2FA0h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 821D2FA0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821D2FA0h case    6:*/		return 0x821D2FA4;
		  /* 821D2FA4h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821D2FA4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D2FB0;  }
		/* 821D2FA4h case    7:*/		return 0x821D2FA8;
		  /* 821D2FA8h */ case    8:  		/* li R11, 0 */
		/* 821D2FA8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D2FA8h case    8:*/		return 0x821D2FAC;
		  /* 821D2FACh */ case    9:  		/* b 16 */
		/* 821D2FACh case    9:*/		return 0x821D2FBC;
		/* 821D2FACh case    9:*/		return 0x821D2FB0;
	}
	return 0x821D2FB0;
} // Block from 821D2F88h-821D2FB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D2FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2FB0);
		  /* 821D2FB0h */ case    0:  		/* or R10, R10, R11 */
		/* 821D2FB0h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821D2FB0h case    0:*/		return 0x821D2FB4;
		  /* 821D2FB4h */ case    1:  		/* mr R11, R27 */
		/* 821D2FB4h case    1:*/		regs.R11 = regs.R27;
		/* 821D2FB4h case    1:*/		return 0x821D2FB8;
		  /* 821D2FB8h */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D2FB8h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D2FB8h case    2:*/		return 0x821D2FBC;
	}
	return 0x821D2FBC;
} // Block from 821D2FB0h-821D2FBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D2FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2FBC);
		  /* 821D2FBCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D2FBCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D2FBCh case    0:*/		return 0x821D2FC0;
	}
	return 0x821D2FC0;
} // Block from 821D2FBCh-821D2FC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D2FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2FC0);
		  /* 821D2FC0h */ case    0:  		/* bc 12, CR0_EQ, 20 */
		/* 821D2FC0h case    0:*/		if ( regs.CR[0].eq ) { return 0x821D2FD4;  }
		/* 821D2FC0h case    0:*/		return 0x821D2FC4;
		  /* 821D2FC4h */ case    1:  		/* mr R5, R25 */
		/* 821D2FC4h case    1:*/		regs.R5 = regs.R25;
		/* 821D2FC4h case    1:*/		return 0x821D2FC8;
		  /* 821D2FC8h */ case    2:  		/* mr R4, R16 */
		/* 821D2FC8h case    2:*/		regs.R4 = regs.R16;
		/* 821D2FC8h case    2:*/		return 0x821D2FCC;
		  /* 821D2FCCh */ case    3:  		/* mr R3, R26 */
		/* 821D2FCCh case    3:*/		regs.R3 = regs.R26;
		/* 821D2FCCh case    3:*/		return 0x821D2FD0;
		  /* 821D2FD0h */ case    4:  		/* bl -30064 */
		/* 821D2FD0h case    4:*/		regs.LR = 0x821D2FD4; return 0x821CBA60;
		/* 821D2FD0h case    4:*/		return 0x821D2FD4;
	}
	return 0x821D2FD4;
} // Block from 821D2FC0h-821D2FD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D2FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D2FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D2FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D2FD4);
		  /* 821D2FD4h */ case    0:  		/* addi R6, R1, 896 */
		/* 821D2FD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x380);
		/* 821D2FD4h case    0:*/		return 0x821D2FD8;
		  /* 821D2FD8h */ case    1:  		/* addi R5, R1, 928 */
		/* 821D2FD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3A0);
		/* 821D2FD8h case    1:*/		return 0x821D2FDC;
		  /* 821D2FDCh */ case    2:  		/* mr R4, R30 */
		/* 821D2FDCh case    2:*/		regs.R4 = regs.R30;
		/* 821D2FDCh case    2:*/		return 0x821D2FE0;
		  /* 821D2FE0h */ case    3:  		/* mr R3, R23 */
		/* 821D2FE0h case    3:*/		regs.R3 = regs.R23;
		/* 821D2FE0h case    3:*/		return 0x821D2FE4;
		  /* 821D2FE4h */ case    4:  		/* bl 326980 */
		/* 821D2FE4h case    4:*/		regs.LR = 0x821D2FE8; return 0x82222D28;
		/* 821D2FE4h case    4:*/		return 0x821D2FE8;
		  /* 821D2FE8h */ case    5:  		/* addi R6, R1, 920 */
		/* 821D2FE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x398);
		/* 821D2FE8h case    5:*/		return 0x821D2FEC;
		  /* 821D2FECh */ case    6:  		/* addi R5, R1, 880 */
		/* 821D2FECh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x370);
		/* 821D2FECh case    6:*/		return 0x821D2FF0;
		  /* 821D2FF0h */ case    7:  		/* mr R4, R30 */
		/* 821D2FF0h case    7:*/		regs.R4 = regs.R30;
		/* 821D2FF0h case    7:*/		return 0x821D2FF4;
		  /* 821D2FF4h */ case    8:  		/* mr R3, R21 */
		/* 821D2FF4h case    8:*/		regs.R3 = regs.R21;
		/* 821D2FF4h case    8:*/		return 0x821D2FF8;
		  /* 821D2FF8h */ case    9:  		/* bl 326960 */
		/* 821D2FF8h case    9:*/		regs.LR = 0x821D2FFC; return 0x82222D28;
		/* 821D2FF8h case    9:*/		return 0x821D2FFC;
		  /* 821D2FFCh */ case   10:  		/* lfd FR2, <#[R1 + 880]> */
		/* 821D2FFCh case   10:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000370) );
		/* 821D2FFCh case   10:*/		return 0x821D3000;
		  /* 821D3000h */ case   11:  		/* lfd FR1, <#[R1 + 928]> */
		/* 821D3000h case   11:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000003A0) );
		/* 821D3000h case   11:*/		return 0x821D3004;
		  /* 821D3004h */ case   12:  		/* bl 321612 */
		/* 821D3004h case   12:*/		regs.LR = 0x821D3008; return 0x82221850;
		/* 821D3004h case   12:*/		return 0x821D3008;
		  /* 821D3008h */ case   13:  		/* fmr FR31, FR1 */
		/* 821D3008h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D3008h case   13:*/		return 0x821D300C;
		  /* 821D300Ch */ case   14:  		/* lfd FR2, <#[R1 + 920]> */
		/* 821D300Ch case   14:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000398) );
		/* 821D300Ch case   14:*/		return 0x821D3010;
		  /* 821D3010h */ case   15:  		/* lfd FR1, <#[R1 + 928]> */
		/* 821D3010h case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000003A0) );
		/* 821D3010h case   15:*/		return 0x821D3014;
		  /* 821D3014h */ case   16:  		/* stfd FR31, <#[R1 + 1008]> */
		/* 821D3014h case   16:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0x000003F0) );
		/* 821D3014h case   16:*/		return 0x821D3018;
		  /* 821D3018h */ case   17:  		/* bl 321592 */
		/* 821D3018h case   17:*/		regs.LR = 0x821D301C; return 0x82221850;
		/* 821D3018h case   17:*/		return 0x821D301C;
		  /* 821D301Ch */ case   18:  		/* stfd FR1, <#[R1 + 1016]> */
		/* 821D301Ch case   18:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x000003F8) );
		/* 821D301Ch case   18:*/		return 0x821D3020;
		  /* 821D3020h */ case   19:  		/* lfd FR2, <#[R1 + 880]> */
		/* 821D3020h case   19:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000370) );
		/* 821D3020h case   19:*/		return 0x821D3024;
		  /* 821D3024h */ case   20:  		/* lfd FR1, <#[R1 + 896]> */
		/* 821D3024h case   20:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000380) );
		/* 821D3024h case   20:*/		return 0x821D3028;
		  /* 821D3028h */ case   21:  		/* bl 321576 */
		/* 821D3028h case   21:*/		regs.LR = 0x821D302C; return 0x82221850;
		/* 821D3028h case   21:*/		return 0x821D302C;
		  /* 821D302Ch */ case   22:  		/* stfd FR1, <#[R1 + 1024]> */
		/* 821D302Ch case   22:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000400) );
		/* 821D302Ch case   22:*/		return 0x821D3030;
		  /* 821D3030h */ case   23:  		/* lfd FR2, <#[R1 + 920]> */
		/* 821D3030h case   23:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000398) );
		/* 821D3030h case   23:*/		return 0x821D3034;
		  /* 821D3034h */ case   24:  		/* lfd FR1, <#[R1 + 896]> */
		/* 821D3034h case   24:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000380) );
		/* 821D3034h case   24:*/		return 0x821D3038;
		  /* 821D3038h */ case   25:  		/* bl 321560 */
		/* 821D3038h case   25:*/		regs.LR = 0x821D303C; return 0x82221850;
		/* 821D3038h case   25:*/		return 0x821D303C;
		  /* 821D303Ch */ case   26:  		/* li R11, 3 */
		/* 821D303Ch case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821D303Ch case   26:*/		return 0x821D3040;
		  /* 821D3040h */ case   27:  		/* stfd FR1, <#[R1 + 1032]> */
		/* 821D3040h case   27:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000408) );
		/* 821D3040h case   27:*/		return 0x821D3044;
		  /* 821D3044h */ case   28:  		/* fmr FR1, FR31 */
		/* 821D3044h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821D3044h case   28:*/		return 0x821D3048;
		  /* 821D3048h */ case   29:  		/* addi R10, R1, 1016 */
		/* 821D3048h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x3F8);
		/* 821D3048h case   29:*/		return 0x821D304C;
		  /* 821D304Ch */ case   30:  		/* fmr FR2, FR31 */
		/* 821D304Ch case   30:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821D304Ch case   30:*/		return 0x821D3050;
		  /* 821D3050h */ case   31:  		/* mtspr CTR, R11 */
		/* 821D3050h case   31:*/		regs.CTR = regs.R11;
		/* 821D3050h case   31:*/		return 0x821D3054;
		  /* 821D3054h */ case   32:  		/* lfd FR0, <#[R10]> */
		/* 821D3054h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000000) );
		/* 821D3054h case   32:*/		return 0x821D3058;
		  /* 821D3058h */ case   33:  		/* fcmpu CR6, FR0, FR1 */
		/* 821D3058h case   33:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821D3058h case   33:*/		return 0x821D305C;
		  /* 821D305Ch */ case   34:  		/* bc 4, CR6_LT, 8 */
		/* 821D305Ch case   34:*/		if ( !regs.CR[6].lt ) { return 0x821D3064;  }
		/* 821D305Ch case   34:*/		return 0x821D3060;
		  /* 821D3060h */ case   35:  		/* fmr FR1, FR0 */
		/* 821D3060h case   35:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D3060h case   35:*/		return 0x821D3064;
	}
	return 0x821D3064;
} // Block from 821D2FD4h-821D3064h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D3064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3064);
		  /* 821D3064h */ case    0:  		/* fcmpu CR6, FR0, FR2 */
		/* 821D3064h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR2);
		/* 821D3064h case    0:*/		return 0x821D3068;
		  /* 821D3068h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 821D3068h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821D3070;  }
		/* 821D3068h case    1:*/		return 0x821D306C;
		  /* 821D306Ch */ case    2:  		/* fmr FR2, FR0 */
		/* 821D306Ch case    2:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR0);
		/* 821D306Ch case    2:*/		return 0x821D3070;
	}
	return 0x821D3070;
} // Block from 821D3064h-821D3070h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D3070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3070);
		  /* 821D3070h */ case    0:  		/* addi R10, R10, 8 */
		/* 821D3070h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821D3070h case    0:*/		return 0x821D3074;
		  /* 821D3074h */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 821D3074h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821D3054;  }
		/* 821D3074h case    1:*/		return 0x821D3078;
		  /* 821D3078h */ case    2:  		/* mr R7, R26 */
		/* 821D3078h case    2:*/		regs.R7 = regs.R26;
		/* 821D3078h case    2:*/		return 0x821D307C;
		  /* 821D307Ch */ case    3:  		/* mr R4, R30 */
		/* 821D307Ch case    3:*/		regs.R4 = regs.R30;
		/* 821D307Ch case    3:*/		return 0x821D3080;
		  /* 821D3080h */ case    4:  		/* mr R3, R16 */
		/* 821D3080h case    4:*/		regs.R3 = regs.R16;
		/* 821D3080h case    4:*/		return 0x821D3084;
		  /* 821D3084h */ case    5:  		/* bl 326300 */
		/* 821D3084h case    5:*/		regs.LR = 0x821D3088; return 0x82222B20;
		/* 821D3084h case    5:*/		return 0x821D3088;
		  /* 821D3088h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D3088h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D3088h case    6:*/		return 0x821D308C;
		  /* 821D308Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821D308Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821D30A0;  }
		/* 821D308Ch case    7:*/		return 0x821D3090;
		  /* 821D3090h */ case    8:  		/* mr R5, R25 */
		/* 821D3090h case    8:*/		regs.R5 = regs.R25;
		/* 821D3090h case    8:*/		return 0x821D3094;
		  /* 821D3094h */ case    9:  		/* mr R4, R16 */
		/* 821D3094h case    9:*/		regs.R4 = regs.R16;
		/* 821D3094h case    9:*/		return 0x821D3098;
		  /* 821D3098h */ case   10:  		/* mr R3, R26 */
		/* 821D3098h case   10:*/		regs.R3 = regs.R26;
		/* 821D3098h case   10:*/		return 0x821D309C;
		  /* 821D309Ch */ case   11:  		/* bl -30268 */
		/* 821D309Ch case   11:*/		regs.LR = 0x821D30A0; return 0x821CBA60;
		/* 821D309Ch case   11:*/		return 0x821D30A0;
	}
	return 0x821D30A0;
} // Block from 821D3070h-821D30A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D30A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D30A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D30A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D30A0);
		  /* 821D30A0h */ case    0:  		/* addi R30, R30, 1 */
		/* 821D30A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D30A0h case    0:*/		return 0x821D30A4;
		  /* 821D30A4h */ case    1:  		/* addi R29, R29, 2 */
		/* 821D30A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 821D30A4h case    1:*/		return 0x821D30A8;
		  /* 821D30A8h */ case    2:  		/* addi R28, R28, 4 */
		/* 821D30A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821D30A8h case    2:*/		return 0x821D30AC;
		  /* 821D30ACh */ case    3:  		/* cmplw CR6, R30, R15 */
		/* 821D30ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R15);
		/* 821D30ACh case    3:*/		return 0x821D30B0;
		  /* 821D30B0h */ case    4:  		/* bc 12, CR6_LT, -716 */
		/* 821D30B0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821D2DE4;  }
		/* 821D30B0h case    4:*/		return 0x821D30B4;
	}
	return 0x821D30B4;
} // Block from 821D30A0h-821D30B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D30B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D30B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D30B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D30B4);
		  /* 821D30B4h */ case    0:  		/* slw R11, R27, R15 */
		/* 821D30B4h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R27,regs.R15);
		/* 821D30B4h case    0:*/		return 0x821D30B8;
		  /* 821D30B8h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 821D30B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821D30B8h case    1:*/		return 0x821D30BC;
		  /* 821D30BCh */ case    2:  		/* addi R22, R11, -1 */
		/* 821D30BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFFFFFF);
		/* 821D30BCh case    2:*/		return 0x821D30C0;
		  /* 821D30C0h */ case    3:  		/* bc 12, CR6_EQ, 1088 */
		/* 821D30C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D3500;  }
		/* 821D30C0h case    3:*/		return 0x821D30C4;
		  /* 821D30C4h */ case    4:  		/* subf R31, R20, R22 */
		/* 821D30C4h case    4:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R20,regs.R22);
		/* 821D30C4h case    4:*/		return 0x821D30C8;
		  /* 821D30C8h */ case    5:  		/* cmplwi CR6, R24, 0 */
		/* 821D30C8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821D30C8h case    5:*/		return 0x821D30CC;
		  /* 821D30CCh */ case    6:  		/* bc 4, CR6_EQ, 80 */
		/* 821D30CCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D311C;  }
		/* 821D30CCh case    6:*/		return 0x821D30D0;
		  /* 821D30D0h */ case    7:  		/* cmplwi CR6, R14, 0 */
		/* 821D30D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821D30D0h case    7:*/		return 0x821D30D4;
		  /* 821D30D4h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821D30D4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D30F0;  }
		/* 821D30D4h case    8:*/		return 0x821D30D8;
		  /* 821D30D8h */ case    9:  		/* lwz R11, <#[R14]> */
		/* 821D30D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821D30D8h case    9:*/		return 0x821D30DC;
		  /* 821D30DCh */ case   10:  		/* lwz R5, <#[R14 + 12]> */
		/* 821D30DCh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x0000000C) );
		/* 821D30DCh case   10:*/		return 0x821D30E0;
		  /* 821D30E0h */ case   11:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D30E0h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D30E0h case   11:*/		return 0x821D30E4;
		  /* 821D30E4h */ case   12:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821D30E4h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821D30E4h case   12:*/		return 0x821D30E8;
		  /* 821D30E8h */ case   13:  		/* rlwinm R6, R11, 27, 24, 31 */
		/* 821D30E8h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R11);
		/* 821D30E8h case   13:*/		return 0x821D30EC;
		  /* 821D30ECh */ case   14:  		/* b 1028 */
		/* 821D30ECh case   14:*/		return 0x821D34F0;
		/* 821D30ECh case   14:*/		return 0x821D30F0;
	}
	return 0x821D30F0;
} // Block from 821D30B4h-821D30F0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D30F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D30F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D30F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D30F0);
		  /* 821D30F0h */ case    0:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D30F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D30F0h case    0:*/		return 0x821D30F4;
		  /* 821D30F4h */ case    1:  		/* li R4, 1 */
		/* 821D30F4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D30F4h case    1:*/		return 0x821D30F8;
		  /* 821D30F8h */ case    2:  		/* fmr FR4, FR29 */
		/* 821D30F8h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D30F8h case    2:*/		return 0x821D30FC;
		  /* 821D30FCh */ case    3:  		/* mr R3, R31 */
		/* 821D30FCh case    3:*/		regs.R3 = regs.R31;
		/* 821D30FCh case    3:*/		return 0x821D3100;
		  /* 821D3100h */ case    4:  		/* fmr FR3, FR29 */
		/* 821D3100h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D3100h case    4:*/		return 0x821D3104;
		  /* 821D3104h */ case    5:  		/* fmr FR2, FR29 */
		/* 821D3104h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D3104h case    5:*/		return 0x821D3108;
		  /* 821D3108h */ case    6:  		/* fmr FR1, FR29 */
		/* 821D3108h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D3108h case    6:*/		return 0x821D310C;
		  /* 821D310Ch */ case    7:  		/* bl 358988 */
		/* 821D310Ch case    7:*/		regs.LR = 0x821D3110; return 0x8222AB58;
		/* 821D310Ch case    7:*/		return 0x821D3110;
		  /* 821D3110h */ case    8:  		/* mr R5, R3 */
		/* 821D3110h case    8:*/		regs.R5 = regs.R3;
		/* 821D3110h case    8:*/		return 0x821D3114;
		  /* 821D3114h */ case    9:  		/* mr R3, R31 */
		/* 821D3114h case    9:*/		regs.R3 = regs.R31;
		/* 821D3114h case    9:*/		return 0x821D3118;
		  /* 821D3118h */ case   10:  		/* b 976 */
		/* 821D3118h case   10:*/		return 0x821D34E8;
		/* 821D3118h case   10:*/		return 0x821D311C;
	}
	return 0x821D311C;
} // Block from 821D30F0h-821D311Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D311Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D311C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D311C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D311C);
		  /* 821D311Ch */ case    0:  		/* cmplwi CR6, R24, 1 */
		/* 821D311Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 821D311Ch case    0:*/		return 0x821D3120;
		  /* 821D3120h */ case    1:  		/* bc 4, CR6_EQ, 200 */
		/* 821D3120h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D31E8;  }
		/* 821D3120h case    1:*/		return 0x821D3124;
		  /* 821D3124h */ case    2:  		/* cntlzw R11, R31 */
		/* 821D3124h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R31);
		/* 821D3124h case    2:*/		return 0x821D3128;
		  /* 821D3128h */ case    3:  		/* cmplwi CR6, R14, 0 */
		/* 821D3128h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821D3128h case    3:*/		return 0x821D312C;
		  /* 821D312Ch */ case    4:  		/* subfic R31, R11, 31 */
		/* 821D312Ch case    4:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821D312Ch case    4:*/		return 0x821D3130;
		  /* 821D3130h */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 821D3130h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D31A4;  }
		/* 821D3130h case    5:*/		return 0x821D3134;
		  /* 821D3134h */ case    6:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D3134h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3134h case    6:*/		return 0x821D3138;
		  /* 821D3138h */ case    7:  		/* mr R30, R14 */
		/* 821D3138h case    7:*/		regs.R30 = regs.R14;
		/* 821D3138h case    7:*/		return 0x821D313C;
		  /* 821D313Ch */ case    8:  		/* lwz R29, <#[R1 + 1908]> */
		/* 821D313Ch case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000774) );
		/* 821D313Ch case    8:*/		return 0x821D3140;
		  /* 821D3140h */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D3140h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D3140h case    9:*/		return 0x821D3144;
		  /* 821D3144h */ case   10:  		/* cmplwi CR6, R11, 1536 */
		/* 821D3144h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000600);
		/* 821D3144h case   10:*/		return 0x821D3148;
		  /* 821D3148h */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 821D3148h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D3160;  }
		/* 821D3148h case   11:*/		return 0x821D314C;
		  /* 821D314Ch */ case   12:  		/* mr R5, R31 */
		/* 821D314Ch case   12:*/		regs.R5 = regs.R31;
		/* 821D314Ch case   12:*/		return 0x821D3150;
		  /* 821D3150h */ case   13:  		/* mr R4, R14 */
		/* 821D3150h case   13:*/		regs.R4 = regs.R14;
		/* 821D3150h case   13:*/		return 0x821D3154;
		  /* 821D3154h */ case   14:  		/* mr R3, R29 */
		/* 821D3154h case   14:*/		regs.R3 = regs.R29;
		/* 821D3154h case   14:*/		return 0x821D3158;
		  /* 821D3158h */ case   15:  		/* bl -83896 */
		/* 821D3158h case   15:*/		regs.LR = 0x821D315C; return 0x821BE9A0;
		/* 821D3158h case   15:*/		return 0x821D315C;
		  /* 821D315Ch */ case   16:  		/* mr R30, R3 */
		/* 821D315Ch case   16:*/		regs.R30 = regs.R3;
		/* 821D315Ch case   16:*/		return 0x821D3160;
	}
	return 0x821D3160;
} // Block from 821D311Ch-821D3160h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D3160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3160);
		  /* 821D3160h */ case    0:  		/* mr R5, R31 */
		/* 821D3160h case    0:*/		regs.R5 = regs.R31;
		/* 821D3160h case    0:*/		return 0x821D3164;
		  /* 821D3164h */ case    1:  		/* mr R4, R21 */
		/* 821D3164h case    1:*/		regs.R4 = regs.R21;
		/* 821D3164h case    1:*/		return 0x821D3168;
		  /* 821D3168h */ case    2:  		/* mr R3, R29 */
		/* 821D3168h case    2:*/		regs.R3 = regs.R29;
		/* 821D3168h case    2:*/		return 0x821D316C;
		  /* 821D316Ch */ case    3:  		/* bl -83916 */
		/* 821D316Ch case    3:*/		regs.LR = 0x821D3170; return 0x821BE9A0;
		/* 821D316Ch case    3:*/		return 0x821D3170;
		  /* 821D3170h */ case    4:  		/* mr R28, R3 */
		/* 821D3170h case    4:*/		regs.R28 = regs.R3;
		/* 821D3170h case    4:*/		return 0x821D3174;
		  /* 821D3174h */ case    5:  		/* mr R5, R31 */
		/* 821D3174h case    5:*/		regs.R5 = regs.R31;
		/* 821D3174h case    5:*/		return 0x821D3178;
		  /* 821D3178h */ case    6:  		/* mr R4, R23 */
		/* 821D3178h case    6:*/		regs.R4 = regs.R23;
		/* 821D3178h case    6:*/		return 0x821D317C;
		  /* 821D317Ch */ case    7:  		/* mr R3, R29 */
		/* 821D317Ch case    7:*/		regs.R3 = regs.R29;
		/* 821D317Ch case    7:*/		return 0x821D3180;
		  /* 821D3180h */ case    8:  		/* bl -83936 */
		/* 821D3180h case    8:*/		regs.LR = 0x821D3184; return 0x821BE9A0;
		/* 821D3180h case    8:*/		return 0x821D3184;
		  /* 821D3184h */ case    9:  		/* mr R6, R3 */
		/* 821D3184h case    9:*/		regs.R6 = regs.R3;
		/* 821D3184h case    9:*/		return 0x821D3188;
		  /* 821D3188h */ case   10:  		/* mr R5, R16 */
		/* 821D3188h case   10:*/		regs.R5 = regs.R16;
		/* 821D3188h case   10:*/		return 0x821D318C;
		  /* 821D318Ch */ case   11:  		/* li R4, 0 */
		/* 821D318Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D318Ch case   11:*/		return 0x821D3190;
		  /* 821D3190h */ case   12:  		/* mr R3, R29 */
		/* 821D3190h case   12:*/		regs.R3 = regs.R29;
		/* 821D3190h case   12:*/		return 0x821D3194;
		  /* 821D3194h */ case   13:  		/* mr R7, R28 */
		/* 821D3194h case   13:*/		regs.R7 = regs.R28;
		/* 821D3194h case   13:*/		return 0x821D3198;
		  /* 821D3198h */ case   14:  		/* mr R8, R30 */
		/* 821D3198h case   14:*/		regs.R8 = regs.R30;
		/* 821D3198h case   14:*/		return 0x821D319C;
		  /* 821D319Ch */ case   15:  		/* bl -246748 */
		/* 821D319Ch case   15:*/		regs.LR = 0x821D31A0; return 0x82196DC0;
		/* 821D319Ch case   15:*/		return 0x821D31A0;
		  /* 821D31A0h */ case   16:  		/* b 580 */
		/* 821D31A0h case   16:*/		return 0x821D33E4;
		/* 821D31A0h case   16:*/		return 0x821D31A4;
	}
	return 0x821D31A4;
} // Block from 821D3160h-821D31A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D31A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D31A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D31A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D31A4);
		  /* 821D31A4h */ case    0:  		/* lwz R30, <#[R1 + 1908]> */
		/* 821D31A4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000774) );
		/* 821D31A4h case    0:*/		return 0x821D31A8;
		  /* 821D31A8h */ case    1:  		/* mr R5, R31 */
		/* 821D31A8h case    1:*/		regs.R5 = regs.R31;
		/* 821D31A8h case    1:*/		return 0x821D31AC;
		  /* 821D31ACh */ case    2:  		/* mr R4, R21 */
		/* 821D31ACh case    2:*/		regs.R4 = regs.R21;
		/* 821D31ACh case    2:*/		return 0x821D31B0;
		  /* 821D31B0h */ case    3:  		/* mr R3, R30 */
		/* 821D31B0h case    3:*/		regs.R3 = regs.R30;
		/* 821D31B0h case    3:*/		return 0x821D31B4;
		  /* 821D31B4h */ case    4:  		/* bl -83988 */
		/* 821D31B4h case    4:*/		regs.LR = 0x821D31B8; return 0x821BE9A0;
		/* 821D31B4h case    4:*/		return 0x821D31B8;
		  /* 821D31B8h */ case    5:  		/* mr R29, R3 */
		/* 821D31B8h case    5:*/		regs.R29 = regs.R3;
		/* 821D31B8h case    5:*/		return 0x821D31BC;
		  /* 821D31BCh */ case    6:  		/* mr R5, R31 */
		/* 821D31BCh case    6:*/		regs.R5 = regs.R31;
		/* 821D31BCh case    6:*/		return 0x821D31C0;
		  /* 821D31C0h */ case    7:  		/* mr R4, R23 */
		/* 821D31C0h case    7:*/		regs.R4 = regs.R23;
		/* 821D31C0h case    7:*/		return 0x821D31C4;
		  /* 821D31C4h */ case    8:  		/* mr R3, R30 */
		/* 821D31C4h case    8:*/		regs.R3 = regs.R30;
		/* 821D31C4h case    8:*/		return 0x821D31C8;
		  /* 821D31C8h */ case    9:  		/* bl -84008 */
		/* 821D31C8h case    9:*/		regs.LR = 0x821D31CC; return 0x821BE9A0;
		/* 821D31C8h case    9:*/		return 0x821D31CC;
		  /* 821D31CCh */ case   10:  		/* mr R6, R3 */
		/* 821D31CCh case   10:*/		regs.R6 = regs.R3;
		/* 821D31CCh case   10:*/		return 0x821D31D0;
		  /* 821D31D0h */ case   11:  		/* mr R5, R16 */
		/* 821D31D0h case   11:*/		regs.R5 = regs.R16;
		/* 821D31D0h case   11:*/		return 0x821D31D4;
		  /* 821D31D4h */ case   12:  		/* li R4, 0 */
		/* 821D31D4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D31D4h case   12:*/		return 0x821D31D8;
		  /* 821D31D8h */ case   13:  		/* mr R3, R30 */
		/* 821D31D8h case   13:*/		regs.R3 = regs.R30;
		/* 821D31D8h case   13:*/		return 0x821D31DC;
		  /* 821D31DCh */ case   14:  		/* mr R7, R29 */
		/* 821D31DCh case   14:*/		regs.R7 = regs.R29;
		/* 821D31DCh case   14:*/		return 0x821D31E0;
		  /* 821D31E0h */ case   15:  		/* bl -73936 */
		/* 821D31E0h case   15:*/		regs.LR = 0x821D31E4; return 0x821C1110;
		/* 821D31E0h case   15:*/		return 0x821D31E4;
		  /* 821D31E4h */ case   16:  		/* b 512 */
		/* 821D31E4h case   16:*/		return 0x821D33E4;
		/* 821D31E4h case   16:*/		return 0x821D31E8;
	}
	return 0x821D31E8;
} // Block from 821D31A4h-821D31E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D31E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D31E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D31E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D31E8);
		  /* 821D31E8h */ case    0:  		/* lwz R30, <#[R1 + 1908]> */
		/* 821D31E8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000774) );
		/* 821D31E8h case    0:*/		return 0x821D31EC;
		  /* 821D31ECh */ case    1:  		/* mr R6, R24 */
		/* 821D31ECh case    1:*/		regs.R6 = regs.R24;
		/* 821D31ECh case    1:*/		return 0x821D31F0;
		  /* 821D31F0h */ case    2:  		/* mr R5, R16 */
		/* 821D31F0h case    2:*/		regs.R5 = regs.R16;
		/* 821D31F0h case    2:*/		return 0x821D31F4;
		  /* 821D31F4h */ case    3:  		/* mr R3, R30 */
		/* 821D31F4h case    3:*/		regs.R3 = regs.R30;
		/* 821D31F4h case    3:*/		return 0x821D31F8;
		  /* 821D31F8h */ case    4:  		/* li R4, 0 */
		/* 821D31F8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D31F8h case    4:*/		return 0x821D31FC;
		  /* 821D31FCh */ case    5:  		/* bl -218204 */
		/* 821D31FCh case    5:*/		regs.LR = 0x821D3200; return 0x8219DDA0;
		/* 821D31FCh case    5:*/		return 0x821D3200;
		  /* 821D3200h */ case    6:  		/* mr R28, R3 */
		/* 821D3200h case    6:*/		regs.R28 = regs.R3;
		/* 821D3200h case    6:*/		return 0x821D3204;
		  /* 821D3204h */ case    7:  		/* mr R6, R24 */
		/* 821D3204h case    7:*/		regs.R6 = regs.R24;
		/* 821D3204h case    7:*/		return 0x821D3208;
		  /* 821D3208h */ case    8:  		/* mr R5, R16 */
		/* 821D3208h case    8:*/		regs.R5 = regs.R16;
		/* 821D3208h case    8:*/		return 0x821D320C;
		  /* 821D320Ch */ case    9:  		/* li R4, 0 */
		/* 821D320Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D320Ch case    9:*/		return 0x821D3210;
		  /* 821D3210h */ case   10:  		/* mr R3, R30 */
		/* 821D3210h case   10:*/		regs.R3 = regs.R30;
		/* 821D3210h case   10:*/		return 0x821D3214;
		  /* 821D3214h */ case   11:  		/* bl -218228 */
		/* 821D3214h case   11:*/		regs.LR = 0x821D3218; return 0x8219DDA0;
		/* 821D3214h case   11:*/		return 0x821D3218;
		  /* 821D3218h */ case   12:  		/* mr R27, R3 */
		/* 821D3218h case   12:*/		regs.R27 = regs.R3;
		/* 821D3218h case   12:*/		return 0x821D321C;
		  /* 821D321Ch */ case   13:  		/* li R29, 0 */
		/* 821D321Ch case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D321Ch case   13:*/		return 0x821D3220;
		  /* 821D3220h */ case   14:  		/* li R26, 0 */
		/* 821D3220h case   14:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D3220h case   14:*/		return 0x821D3224;
		  /* 821D3224h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 821D3224h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D3224h case   15:*/		return 0x821D3228;
		  /* 821D3228h */ case   16:  		/* bc 12, CR6_EQ, 156 */
		/* 821D3228h case   16:*/		if ( regs.CR[6].eq ) { return 0x821D32C4;  }
		/* 821D3228h case   16:*/		return 0x821D322C;
		  /* 821D322Ch */ case   17:  		/* li R25, 0 */
		/* 821D322Ch case   17:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D322Ch case   17:*/		return 0x821D3230;
		  /* 821D3230h */ case   18:  		/* addi R11, R31, -1 */
		/* 821D3230h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821D3230h case   18:*/		return 0x821D3234;
		  /* 821D3234h */ case   19:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D3234h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3234h case   19:*/		return 0x821D3238;
		  /* 821D3238h */ case   20:  		/* mr R4, R23 */
		/* 821D3238h case   20:*/		regs.R4 = regs.R23;
		/* 821D3238h case   20:*/		return 0x821D323C;
		  /* 821D323Ch */ case   21:  		/* andc R11, R31, R11 */
		/* 821D323Ch case   21:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D323Ch case   21:*/		return 0x821D3240;
		  /* 821D3240h */ case   22:  		/* cntlzw R10, R11 */
		/* 821D3240h case   22:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 821D3240h case   22:*/		return 0x821D3244;
		  /* 821D3244h */ case   23:  		/* subf R31, R11, R31 */
		/* 821D3244h case   23:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821D3244h case   23:*/		return 0x821D3248;
		  /* 821D3248h */ case   24:  		/* subfic R30, R10, 31 */
		/* 821D3248h case   24:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R10,0x1F);
		/* 821D3248h case   24:*/		return 0x821D324C;
		  /* 821D324Ch */ case   25:  		/* mr R5, R30 */
		/* 821D324Ch case   25:*/		regs.R5 = regs.R30;
		/* 821D324Ch case   25:*/		return 0x821D3250;
		  /* 821D3250h */ case   26:  		/* bl -84144 */
		/* 821D3250h case   26:*/		regs.LR = 0x821D3254; return 0x821BE9A0;
		/* 821D3250h case   26:*/		return 0x821D3254;
		  /* 821D3254h */ case   27:  		/* mr R5, R3 */
		/* 821D3254h case   27:*/		regs.R5 = regs.R3;
		/* 821D3254h case   27:*/		return 0x821D3258;
		  /* 821D3258h */ case   28:  		/* mr R4, R29 */
		/* 821D3258h case   28:*/		regs.R4 = regs.R29;
		/* 821D3258h case   28:*/		return 0x821D325C;
		  /* 821D325Ch */ case   29:  		/* mr R3, R28 */
		/* 821D325Ch case   29:*/		regs.R3 = regs.R28;
		/* 821D325Ch case   29:*/		return 0x821D3260;
		  /* 821D3260h */ case   30:  		/* bl -404400 */
		/* 821D3260h case   30:*/		regs.LR = 0x821D3264; return 0x821706B0;
		/* 821D3260h case   30:*/		return 0x821D3264;
		  /* 821D3264h */ case   31:  		/* mr R5, R30 */
		/* 821D3264h case   31:*/		regs.R5 = regs.R30;
		/* 821D3264h case   31:*/		return 0x821D3268;
		  /* 821D3268h */ case   32:  		/* mr R4, R21 */
		/* 821D3268h case   32:*/		regs.R4 = regs.R21;
		/* 821D3268h case   32:*/		return 0x821D326C;
		  /* 821D326Ch */ case   33:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D326Ch case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D326Ch case   33:*/		return 0x821D3270;
		  /* 821D3270h */ case   34:  		/* bl -84176 */
		/* 821D3270h case   34:*/		regs.LR = 0x821D3274; return 0x821BE9A0;
		/* 821D3270h case   34:*/		return 0x821D3274;
		  /* 821D3274h */ case   35:  		/* mr R5, R3 */
		/* 821D3274h case   35:*/		regs.R5 = regs.R3;
		/* 821D3274h case   35:*/		return 0x821D3278;
		  /* 821D3278h */ case   36:  		/* mr R4, R29 */
		/* 821D3278h case   36:*/		regs.R4 = regs.R29;
		/* 821D3278h case   36:*/		return 0x821D327C;
		  /* 821D327Ch */ case   37:  		/* mr R3, R27 */
		/* 821D327Ch case   37:*/		regs.R3 = regs.R27;
		/* 821D327Ch case   37:*/		return 0x821D3280;
		  /* 821D3280h */ case   38:  		/* bl -404432 */
		/* 821D3280h case   38:*/		regs.LR = 0x821D3284; return 0x821706B0;
		/* 821D3280h case   38:*/		return 0x821D3284;
		  /* 821D3284h */ case   39:  		/* cmplwi CR6, R14, 0 */
		/* 821D3284h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821D3284h case   39:*/		return 0x821D3288;
		  /* 821D3288h */ case   40:  		/* bc 12, CR6_EQ, 44 */
		/* 821D3288h case   40:*/		if ( regs.CR[6].eq ) { return 0x821D32B4;  }
		/* 821D3288h case   40:*/		return 0x821D328C;
		  /* 821D328Ch */ case   41:  		/* lwz R11, <#[R14]> */
		/* 821D328Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821D328Ch case   41:*/		return 0x821D3290;
		  /* 821D3290h */ case   42:  		/* rlwinm R10, R30, 1, 0, 30 */
		/* 821D3290h case   42:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R30);
		/* 821D3290h case   42:*/		return 0x821D3294;
		  /* 821D3294h */ case   43:  		/* li R9, 3 */
		/* 821D3294h case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821D3294h case   43:*/		return 0x821D3298;
		  /* 821D3298h */ case   44:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821D3298h case   44:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821D3298h case   44:*/		return 0x821D329C;
		  /* 821D329Ch */ case   45:  		/* slw R9, R9, R25 */
		/* 821D329Ch case   45:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821D329Ch case   45:*/		return 0x821D32A0;
		  /* 821D32A0h */ case   46:  		/* srw R11, R11, R10 */
		/* 821D32A0h case   46:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D32A0h case   46:*/		return 0x821D32A4;
		  /* 821D32A4h */ case   47:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821D32A4h case   47:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821D32A4h case   47:*/		return 0x821D32A8;
		  /* 821D32A8h */ case   48:  		/* andc R10, R26, R9 */
		/* 821D32A8h case   48:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R26,regs.R9);
		/* 821D32A8h case   48:*/		return 0x821D32AC;
		  /* 821D32ACh */ case   49:  		/* slw R11, R11, R25 */
		/* 821D32ACh case   49:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821D32ACh case   49:*/		return 0x821D32B0;
		  /* 821D32B0h */ case   50:  		/* or R26, R11, R10 */
		/* 821D32B0h case   50:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821D32B0h case   50:*/		return 0x821D32B4;
	}
	return 0x821D32B4;
} // Block from 821D31E8h-821D32B4h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821D32B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D32B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D32B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D32B4);
		  /* 821D32B4h */ case    0:  		/* addi R29, R29, 1 */
		/* 821D32B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D32B4h case    0:*/		return 0x821D32B8;
		  /* 821D32B8h */ case    1:  		/* addi R25, R25, 2 */
		/* 821D32B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x2);
		/* 821D32B8h case    1:*/		return 0x821D32BC;
		  /* 821D32BCh */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821D32BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D32BCh case    2:*/		return 0x821D32C0;
		  /* 821D32C0h */ case    3:  		/* bc 4, CR6_EQ, -144 */
		/* 821D32C0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D3230;  }
		/* 821D32C0h case    3:*/		return 0x821D32C4;
	}
	return 0x821D32C4;
} // Block from 821D32B4h-821D32C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D32C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D32C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D32C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D32C4);
		  /* 821D32C4h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D32C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D32C4h case    0:*/		return 0x821D32C8;
		  /* 821D32C8h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D32C8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D32C8h case    1:*/		return 0x821D32CC;
		  /* 821D32CCh */ case    2:  		/* cmpwi CR6, R11, 2 */
		/* 821D32CCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821D32CCh case    2:*/		return 0x821D32D0;
		  /* 821D32D0h */ case    3:  		/* bc 12, CR6_EQ, 252 */
		/* 821D32D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D33CC;  }
		/* 821D32D0h case    3:*/		return 0x821D32D4;
		  /* 821D32D4h */ case    4:  		/* cmpwi CR6, R11, 12 */
		/* 821D32D4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 821D32D4h case    4:*/		return 0x821D32D8;
		  /* 821D32D8h */ case    5:  		/* bc 12, CR6_EQ, 152 */
		/* 821D32D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D3370;  }
		/* 821D32D8h case    5:*/		return 0x821D32DC;
		  /* 821D32DCh */ case    6:  		/* cmpwi CR6, R11, 16 */
		/* 821D32DCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000010);
		/* 821D32DCh case    6:*/		return 0x821D32E0;
		  /* 821D32E0h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 821D32E0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D32F8;  }
		/* 821D32E0h case    7:*/		return 0x821D32E4;
		  /* 821D32E4h */ case    8:  		/* cmpwi CR6, R11, 17 */
		/* 821D32E4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000011);
		/* 821D32E4h case    8:*/		return 0x821D32E8;
		  /* 821D32E8h */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 821D32E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D3320;  }
		/* 821D32E8h case    9:*/		return 0x821D32EC;
		  /* 821D32ECh */ case   10:  		/* li R4, 4800 */
		/* 821D32ECh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D32ECh case   10:*/		return 0x821D32F0;
		  /* 821D32F0h */ case   11:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D32F0h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D32F0h case   11:*/		return 0x821D32F4;
		  /* 821D32F4h */ case   12:  		/* bl -529548 */
		/* 821D32F4h case   12:*/		regs.LR = 0x821D32F8; return 0x82151E68;
		/* 821D32F4h case   12:*/		return 0x821D32F8;
	}
	return 0x821D32F8;
} // Block from 821D32C4h-821D32F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D32F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D32F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D32F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D32F8);
		  /* 821D32F8h */ case    0:  		/* cmplwi CR6, R24, 3 */
		/* 821D32F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 821D32F8h case    0:*/		return 0x821D32FC;
		  /* 821D32FCh */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 821D32FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D3320;  }
		/* 821D32FCh case    1:*/		return 0x821D3300;
		  /* 821D3300h */ case    2:  		/* mr R7, R27 */
		/* 821D3300h case    2:*/		regs.R7 = regs.R27;
		/* 821D3300h case    2:*/		return 0x821D3304;
		  /* 821D3304h */ case    3:  		/* lwz R27, <#[R1 + 1908]> */
		/* 821D3304h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3304h case    3:*/		return 0x821D3308;
		  /* 821D3308h */ case    4:  		/* mr R6, R28 */
		/* 821D3308h case    4:*/		regs.R6 = regs.R28;
		/* 821D3308h case    4:*/		return 0x821D330C;
		  /* 821D330Ch */ case    5:  		/* mr R5, R16 */
		/* 821D330Ch case    5:*/		regs.R5 = regs.R16;
		/* 821D330Ch case    5:*/		return 0x821D3310;
		  /* 821D3310h */ case    6:  		/* li R4, 0 */
		/* 821D3310h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D3310h case    6:*/		return 0x821D3314;
		  /* 821D3314h */ case    7:  		/* mr R3, R27 */
		/* 821D3314h case    7:*/		regs.R3 = regs.R27;
		/* 821D3314h case    7:*/		return 0x821D3318;
		  /* 821D3318h */ case    8:  		/* bl -69000 */
		/* 821D3318h case    8:*/		regs.LR = 0x821D331C; return 0x821C2590;
		/* 821D3318h case    8:*/		return 0x821D331C;
		  /* 821D331Ch */ case    9:  		/* b 204 */
		/* 821D331Ch case    9:*/		return 0x821D33E8;
		/* 821D331Ch case    9:*/		return 0x821D3320;
	}
	return 0x821D3320;
} // Block from 821D32F8h-821D3320h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D3320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3320);
		  /* 821D3320h */ case    0:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D3320h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3320h case    0:*/		return 0x821D3324;
		  /* 821D3324h */ case    1:  		/* li R4, 1 */
		/* 821D3324h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D3324h case    1:*/		return 0x821D3328;
		  /* 821D3328h */ case    2:  		/* fmr FR4, FR29 */
		/* 821D3328h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D3328h case    2:*/		return 0x821D332C;
		  /* 821D332Ch */ case    3:  		/* mr R3, R31 */
		/* 821D332Ch case    3:*/		regs.R3 = regs.R31;
		/* 821D332Ch case    3:*/		return 0x821D3330;
		  /* 821D3330h */ case    4:  		/* fmr FR3, FR29 */
		/* 821D3330h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D3330h case    4:*/		return 0x821D3334;
		  /* 821D3334h */ case    5:  		/* fmr FR2, FR29 */
		/* 821D3334h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D3334h case    5:*/		return 0x821D3338;
		  /* 821D3338h */ case    6:  		/* fmr FR1, FR29 */
		/* 821D3338h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D3338h case    6:*/		return 0x821D333C;
		  /* 821D333Ch */ case    7:  		/* bl 358428 */
		/* 821D333Ch case    7:*/		regs.LR = 0x821D3340; return 0x8222AB58;
		/* 821D333Ch case    7:*/		return 0x821D3340;
		  /* 821D3340h */ case    8:  		/* mr R4, R3 */
		/* 821D3340h case    8:*/		regs.R4 = regs.R3;
		/* 821D3340h case    8:*/		return 0x821D3344;
		  /* 821D3344h */ case    9:  		/* li R5, 0 */
		/* 821D3344h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D3344h case    9:*/		return 0x821D3348;
		  /* 821D3348h */ case   10:  		/* mr R3, R31 */
		/* 821D3348h case   10:*/		regs.R3 = regs.R31;
		/* 821D3348h case   10:*/		return 0x821D334C;
		  /* 821D334Ch */ case   11:  		/* bl -373308 */
		/* 821D334Ch case   11:*/		regs.LR = 0x821D3350; return 0x82178110;
		/* 821D334Ch case   11:*/		return 0x821D3350;
		  /* 821D3350h */ case   12:  		/* mr R8, R3 */
		/* 821D3350h case   12:*/		regs.R8 = regs.R3;
		/* 821D3350h case   12:*/		return 0x821D3354;
		  /* 821D3354h */ case   13:  		/* mr R7, R27 */
		/* 821D3354h case   13:*/		regs.R7 = regs.R27;
		/* 821D3354h case   13:*/		return 0x821D3358;
		  /* 821D3358h */ case   14:  		/* mr R6, R28 */
		/* 821D3358h case   14:*/		regs.R6 = regs.R28;
		/* 821D3358h case   14:*/		return 0x821D335C;
		  /* 821D335Ch */ case   15:  		/* mr R5, R16 */
		/* 821D335Ch case   15:*/		regs.R5 = regs.R16;
		/* 821D335Ch case   15:*/		return 0x821D3360;
		  /* 821D3360h */ case   16:  		/* li R4, 0 */
		/* 821D3360h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D3360h case   16:*/		return 0x821D3364;
		  /* 821D3364h */ case   17:  		/* mr R3, R31 */
		/* 821D3364h case   17:*/		regs.R3 = regs.R31;
		/* 821D3364h case   17:*/		return 0x821D3368;
		  /* 821D3368h */ case   18:  		/* bl -68912 */
		/* 821D3368h case   18:*/		regs.LR = 0x821D336C; return 0x821C2638;
		/* 821D3368h case   18:*/		return 0x821D336C;
		  /* 821D336Ch */ case   19:  		/* b 120 */
		/* 821D336Ch case   19:*/		return 0x821D33E4;
		/* 821D336Ch case   19:*/		return 0x821D3370;
	}
	return 0x821D3370;
} // Block from 821D3320h-821D3370h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D3370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3370);
		  /* 821D3370h */ case    0:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D3370h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3370h case    0:*/		return 0x821D3374;
		  /* 821D3374h */ case    1:  		/* mr R4, R14 */
		/* 821D3374h case    1:*/		regs.R4 = regs.R14;
		/* 821D3374h case    1:*/		return 0x821D3378;
		  /* 821D3378h */ case    2:  		/* lwz R5, <#[R14 + 12]> */
		/* 821D3378h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x0000000C) );
		/* 821D3378h case    2:*/		return 0x821D337C;
		  /* 821D337Ch */ case    3:  		/* mr R3, R31 */
		/* 821D337Ch case    3:*/		regs.R3 = regs.R31;
		/* 821D337Ch case    3:*/		return 0x821D3380;
		  /* 821D3380h */ case    4:  		/* bl -402064 */
		/* 821D3380h case    4:*/		regs.LR = 0x821D3384; return 0x821710F0;
		/* 821D3380h case    4:*/		return 0x821D3384;
		  /* 821D3384h */ case    5:  		/* mr R4, R26 */
		/* 821D3384h case    5:*/		regs.R4 = regs.R26;
		/* 821D3384h case    5:*/		return 0x821D3388;
		  /* 821D3388h */ case    6:  		/* mr R30, R3 */
		/* 821D3388h case    6:*/		regs.R30 = regs.R3;
		/* 821D3388h case    6:*/		return 0x821D338C;
		  /* 821D338Ch */ case    7:  		/* bl -250268 */
		/* 821D338Ch case    7:*/		regs.LR = 0x821D3390; return 0x821961F0;
		/* 821D338Ch case    7:*/		return 0x821D3390;
		  /* 821D3390h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821D3390h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D3390h case    8:*/		return 0x821D3394;
		  /* 821D3394h */ case    9:  		/* mr R3, R31 */
		/* 821D3394h case    9:*/		regs.R3 = regs.R31;
		/* 821D3394h case    9:*/		return 0x821D3398;
		  /* 821D3398h */ case   10:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D3398h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D3398h case   10:*/		return 0x821D339C;
		  /* 821D339Ch */ case   11:  		/* rlwimi R11, R24, 25, 4, 6 */
		/* 821D339Ch case   11:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R24);
		/* 821D339Ch case   11:*/		return 0x821D33A0;
		  /* 821D33A0h */ case   12:  		/* stw R11, <#[R30]> */
		/* 821D33A0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D33A0h case   12:*/		return 0x821D33A4;
		  /* 821D33A4h */ case   13:  		/* lwz R4, <#[R30 + 12]> */
		/* 821D33A4h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D33A4h case   13:*/		return 0x821D33A8;
		  /* 821D33A8h */ case   14:  		/* bl -31200 */
		/* 821D33A8h case   14:*/		regs.LR = 0x821D33AC; return 0x821CB9C8;
		/* 821D33A8h case   14:*/		return 0x821D33AC;
		  /* 821D33ACh */ case   15:  		/* mr R8, R30 */
		/* 821D33ACh case   15:*/		regs.R8 = regs.R30;
		/* 821D33ACh case   15:*/		return 0x821D33B0;
		  /* 821D33B0h */ case   16:  		/* mr R7, R27 */
		/* 821D33B0h case   16:*/		regs.R7 = regs.R27;
		/* 821D33B0h case   16:*/		return 0x821D33B4;
		  /* 821D33B4h */ case   17:  		/* mr R6, R28 */
		/* 821D33B4h case   17:*/		regs.R6 = regs.R28;
		/* 821D33B4h case   17:*/		return 0x821D33B8;
		  /* 821D33B8h */ case   18:  		/* mr R5, R16 */
		/* 821D33B8h case   18:*/		regs.R5 = regs.R16;
		/* 821D33B8h case   18:*/		return 0x821D33BC;
		  /* 821D33BCh */ case   19:  		/* li R4, 0 */
		/* 821D33BCh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D33BCh case   19:*/		return 0x821D33C0;
		  /* 821D33C0h */ case   20:  		/* mr R3, R31 */
		/* 821D33C0h case   20:*/		regs.R3 = regs.R31;
		/* 821D33C0h case   20:*/		return 0x821D33C4;
		  /* 821D33C4h */ case   21:  		/* bl -69396 */
		/* 821D33C4h case   21:*/		regs.LR = 0x821D33C8; return 0x821C24B0;
		/* 821D33C4h case   21:*/		return 0x821D33C8;
		  /* 821D33C8h */ case   22:  		/* b 28 */
		/* 821D33C8h case   22:*/		return 0x821D33E4;
		/* 821D33C8h case   22:*/		return 0x821D33CC;
	}
	return 0x821D33CC;
} // Block from 821D3370h-821D33CCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D33CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D33CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D33CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D33CC);
		  /* 821D33CCh */ case    0:  		/* mr R7, R27 */
		/* 821D33CCh case    0:*/		regs.R7 = regs.R27;
		/* 821D33CCh case    0:*/		return 0x821D33D0;
		  /* 821D33D0h */ case    1:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D33D0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D33D0h case    1:*/		return 0x821D33D4;
		  /* 821D33D4h */ case    2:  		/* mr R6, R28 */
		/* 821D33D4h case    2:*/		regs.R6 = regs.R28;
		/* 821D33D4h case    2:*/		return 0x821D33D8;
		  /* 821D33D8h */ case    3:  		/* mr R5, R16 */
		/* 821D33D8h case    3:*/		regs.R5 = regs.R16;
		/* 821D33D8h case    3:*/		return 0x821D33DC;
		  /* 821D33DCh */ case    4:  		/* li R4, 0 */
		/* 821D33DCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D33DCh case    4:*/		return 0x821D33E0;
		  /* 821D33E0h */ case    5:  		/* bl -69600 */
		/* 821D33E0h case    5:*/		regs.LR = 0x821D33E4; return 0x821C2400;
		/* 821D33E0h case    5:*/		return 0x821D33E4;
	}
	return 0x821D33E4;
} // Block from 821D33CCh-821D33E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D33E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D33E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D33E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D33E4);
		  /* 821D33E4h */ case    0:  		/* lwz R27, <#[R1 + 1908]> */
		/* 821D33E4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000774) );
		/* 821D33E4h case    0:*/		return 0x821D33E8;
	}
	return 0x821D33E8;
} // Block from 821D33E4h-821D33E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D33E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D33E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D33E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D33E8);
		  /* 821D33E8h */ case    0:  		/* mr R31, R3 */
		/* 821D33E8h case    0:*/		regs.R31 = regs.R3;
		/* 821D33E8h case    0:*/		return 0x821D33EC;
		  /* 821D33ECh */ case    1:  		/* mr R3, R16 */
		/* 821D33ECh case    1:*/		regs.R3 = regs.R16;
		/* 821D33ECh case    1:*/		return 0x821D33F0;
		  /* 821D33F0h */ case    2:  		/* bl -403008 */
		/* 821D33F0h case    2:*/		regs.LR = 0x821D33F4; return 0x82170DB0;
		/* 821D33F0h case    2:*/		return 0x821D33F4;
		  /* 821D33F4h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D33F4h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D33F4h case    3:*/		return 0x821D33F8;
		  /* 821D33F8h */ case    4:  		/* bc 12, CR0_EQ, 232 */
		/* 821D33F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D34E0;  }
		/* 821D33F8h case    4:*/		return 0x821D33FC;
		  /* 821D33FCh */ case    5:  		/* mr R28, R19 */
		/* 821D33FCh case    5:*/		regs.R28 = regs.R19;
		/* 821D33FCh case    5:*/		return 0x821D3400;
		  /* 821D3400h */ case    6:  		/* mr R11, R20 */
		/* 821D3400h case    6:*/		regs.R11 = regs.R20;
		/* 821D3400h case    6:*/		return 0x821D3404;
		  /* 821D3404h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821D3404h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3404h case    7:*/		return 0x821D3408;
		  /* 821D3408h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 821D3408h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D3444;  }
		/* 821D3408h case    8:*/		return 0x821D340C;
		  /* 821D340Ch */ case    9:  		/* addi R10, R11, -1 */
		/* 821D340Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D340Ch case    9:*/		return 0x821D3410;
		  /* 821D3410h */ case   10:  		/* li R9, 3 */
		/* 821D3410h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821D3410h case   10:*/		return 0x821D3414;
		  /* 821D3414h */ case   11:  		/* andc R10, R11, R10 */
		/* 821D3414h case   11:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D3414h case   11:*/		return 0x821D3418;
		  /* 821D3418h */ case   12:  		/* addi R8, R11, -1 */
		/* 821D3418h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821D3418h case   12:*/		return 0x821D341C;
		  /* 821D341Ch */ case   13:  		/* cntlzw R10, R10 */
		/* 821D341Ch case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D341Ch case   13:*/		return 0x821D3420;
		  /* 821D3420h */ case   14:  		/* andc R8, R11, R8 */
		/* 821D3420h case   14:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821D3420h case   14:*/		return 0x821D3424;
		  /* 821D3424h */ case   15:  		/* subfic R10, R10, 31 */
		/* 821D3424h case   15:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D3424h case   15:*/		return 0x821D3428;
		  /* 821D3428h */ case   16:  		/* subf R11, R8, R11 */
		/* 821D3428h case   16:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821D3428h case   16:*/		return 0x821D342C;
		  /* 821D342Ch */ case   17:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821D342Ch case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821D342Ch case   17:*/		return 0x821D3430;
		  /* 821D3430h */ case   18:  		/* slw R9, R9, R10 */
		/* 821D3430h case   18:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821D3430h case   18:*/		return 0x821D3434;
		  /* 821D3434h */ case   19:  		/* andc R9, R28, R9 */
		/* 821D3434h case   19:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R28,regs.R9);
		/* 821D3434h case   19:*/		return 0x821D3438;
		  /* 821D3438h */ case   20:  		/* slw R10, R24, R10 */
		/* 821D3438h case   20:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821D3438h case   20:*/		return 0x821D343C;
		  /* 821D343Ch */ case   21:  		/* or R28, R9, R10 */
		/* 821D343Ch case   21:*/		cpu::op::or<0>(regs,&regs.R28,regs.R9,regs.R10);
		/* 821D343Ch case   21:*/		return 0x821D3440;
		  /* 821D3440h */ case   22:  		/* b -60 */
		/* 821D3440h case   22:*/		return 0x821D3404;
		/* 821D3440h case   22:*/		return 0x821D3444;
	}
	return 0x821D3444;
} // Block from 821D33E8h-821D3444h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D3444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3444);
		  /* 821D3444h */ case    0:  		/* addi R6, R24, 1 */
		/* 821D3444h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R24,0x1);
		/* 821D3444h case    0:*/		return 0x821D3448;
		  /* 821D3448h */ case    1:  		/* mr R5, R31 */
		/* 821D3448h case    1:*/		regs.R5 = regs.R31;
		/* 821D3448h case    1:*/		return 0x821D344C;
		  /* 821D344Ch */ case    2:  		/* li R4, 1 */
		/* 821D344Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D344Ch case    2:*/		return 0x821D3450;
		  /* 821D3450h */ case    3:  		/* mr R3, R27 */
		/* 821D3450h case    3:*/		regs.R3 = regs.R27;
		/* 821D3450h case    3:*/		return 0x821D3454;
		  /* 821D3454h */ case    4:  		/* bl -218804 */
		/* 821D3454h case    4:*/		regs.LR = 0x821D3458; return 0x8219DDA0;
		/* 821D3454h case    4:*/		return 0x821D3458;
		  /* 821D3458h */ case    5:  		/* mr R29, R3 */
		/* 821D3458h case    5:*/		regs.R29 = regs.R3;
		/* 821D3458h case    5:*/		return 0x821D345C;
		  /* 821D345Ch */ case    6:  		/* li R30, 0 */
		/* 821D345Ch case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D345Ch case    6:*/		return 0x821D3460;
		  /* 821D3460h */ case    7:  		/* cmplwi CR6, R24, 0 */
		/* 821D3460h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821D3460h case    7:*/		return 0x821D3464;
		  /* 821D3464h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 821D3464h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D3494;  }
		/* 821D3464h case    8:*/		return 0x821D3468;
		  /* 821D3468h */ case    9:  		/* mr R5, R30 */
		/* 821D3468h case    9:*/		regs.R5 = regs.R30;
		/* 821D3468h case    9:*/		return 0x821D346C;
		  /* 821D346Ch */ case   10:  		/* mr R4, R31 */
		/* 821D346Ch case   10:*/		regs.R4 = regs.R31;
		/* 821D346Ch case   10:*/		return 0x821D3470;
		  /* 821D3470h */ case   11:  		/* mr R3, R27 */
		/* 821D3470h case   11:*/		regs.R3 = regs.R27;
		/* 821D3470h case   11:*/		return 0x821D3474;
		  /* 821D3474h */ case   12:  		/* bl -373604 */
		/* 821D3474h case   12:*/		regs.LR = 0x821D3478; return 0x82178110;
		/* 821D3474h case   12:*/		return 0x821D3478;
		  /* 821D3478h */ case   13:  		/* mr R5, R3 */
		/* 821D3478h case   13:*/		regs.R5 = regs.R3;
		/* 821D3478h case   13:*/		return 0x821D347C;
		  /* 821D347Ch */ case   14:  		/* mr R4, R30 */
		/* 821D347Ch case   14:*/		regs.R4 = regs.R30;
		/* 821D347Ch case   14:*/		return 0x821D3480;
		  /* 821D3480h */ case   15:  		/* mr R3, R29 */
		/* 821D3480h case   15:*/		regs.R3 = regs.R29;
		/* 821D3480h case   15:*/		return 0x821D3484;
		  /* 821D3484h */ case   16:  		/* bl -404948 */
		/* 821D3484h case   16:*/		regs.LR = 0x821D3488; return 0x821706B0;
		/* 821D3484h case   16:*/		return 0x821D3488;
		  /* 821D3488h */ case   17:  		/* addi R30, R30, 1 */
		/* 821D3488h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D3488h case   17:*/		return 0x821D348C;
		  /* 821D348Ch */ case   18:  		/* cmplw CR6, R30, R24 */
		/* 821D348Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821D348Ch case   18:*/		return 0x821D3490;
		  /* 821D3490h */ case   19:  		/* bc 12, CR6_LT, -40 */
		/* 821D3490h case   19:*/		if ( regs.CR[6].lt ) { return 0x821D3468;  }
		/* 821D3490h case   19:*/		return 0x821D3494;
	}
	return 0x821D3494;
} // Block from 821D3444h-821D3494h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D3494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3494);
		  /* 821D3494h */ case    0:  		/* li R4, 1 */
		/* 821D3494h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D3494h case    0:*/		return 0x821D3498;
		  /* 821D3498h */ case    1:  		/* fmr FR4, FR29 */
		/* 821D3498h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D3498h case    1:*/		return 0x821D349C;
		  /* 821D349Ch */ case    2:  		/* mr R3, R27 */
		/* 821D349Ch case    2:*/		regs.R3 = regs.R27;
		/* 821D349Ch case    2:*/		return 0x821D34A0;
		  /* 821D34A0h */ case    3:  		/* fmr FR3, FR29 */
		/* 821D34A0h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D34A0h case    3:*/		return 0x821D34A4;
		  /* 821D34A4h */ case    4:  		/* fmr FR2, FR29 */
		/* 821D34A4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D34A4h case    4:*/		return 0x821D34A8;
		  /* 821D34A8h */ case    5:  		/* fmr FR1, FR29 */
		/* 821D34A8h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D34A8h case    5:*/		return 0x821D34AC;
		  /* 821D34ACh */ case    6:  		/* bl 358060 */
		/* 821D34ACh case    6:*/		regs.LR = 0x821D34B0; return 0x8222AB58;
		/* 821D34ACh case    6:*/		return 0x821D34B0;
		  /* 821D34B0h */ case    7:  		/* mr R4, R3 */
		/* 821D34B0h case    7:*/		regs.R4 = regs.R3;
		/* 821D34B0h case    7:*/		return 0x821D34B4;
		  /* 821D34B4h */ case    8:  		/* li R5, 0 */
		/* 821D34B4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D34B4h case    8:*/		return 0x821D34B8;
		  /* 821D34B8h */ case    9:  		/* mr R3, R27 */
		/* 821D34B8h case    9:*/		regs.R3 = regs.R27;
		/* 821D34B8h case    9:*/		return 0x821D34BC;
		  /* 821D34BCh */ case   10:  		/* bl -373676 */
		/* 821D34BCh case   10:*/		regs.LR = 0x821D34C0; return 0x82178110;
		/* 821D34BCh case   10:*/		return 0x821D34C0;
		  /* 821D34C0h */ case   11:  		/* mr R5, R3 */
		/* 821D34C0h case   11:*/		regs.R5 = regs.R3;
		/* 821D34C0h case   11:*/		return 0x821D34C4;
		  /* 821D34C4h */ case   12:  		/* mr R4, R24 */
		/* 821D34C4h case   12:*/		regs.R4 = regs.R24;
		/* 821D34C4h case   12:*/		return 0x821D34C8;
		  /* 821D34C8h */ case   13:  		/* mr R3, R29 */
		/* 821D34C8h case   13:*/		regs.R3 = regs.R29;
		/* 821D34C8h case   13:*/		return 0x821D34CC;
		  /* 821D34CCh */ case   14:  		/* bl -405020 */
		/* 821D34CCh case   14:*/		regs.LR = 0x821D34D0; return 0x821706B0;
		/* 821D34CCh case   14:*/		return 0x821D34D0;
		  /* 821D34D0h */ case   15:  		/* mr R6, R28 */
		/* 821D34D0h case   15:*/		regs.R6 = regs.R28;
		/* 821D34D0h case   15:*/		return 0x821D34D4;
		  /* 821D34D4h */ case   16:  		/* mr R5, R29 */
		/* 821D34D4h case   16:*/		regs.R5 = regs.R29;
		/* 821D34D4h case   16:*/		return 0x821D34D8;
		  /* 821D34D8h */ case   17:  		/* mr R3, R27 */
		/* 821D34D8h case   17:*/		regs.R3 = regs.R27;
		/* 821D34D8h case   17:*/		return 0x821D34DC;
		  /* 821D34DCh */ case   18:  		/* b 16 */
		/* 821D34DCh case   18:*/		return 0x821D34EC;
		/* 821D34DCh case   18:*/		return 0x821D34E0;
	}
	return 0x821D34E0;
} // Block from 821D3494h-821D34E0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D34E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D34E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D34E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D34E0);
		  /* 821D34E0h */ case    0:  		/* mr R5, R31 */
		/* 821D34E0h case    0:*/		regs.R5 = regs.R31;
		/* 821D34E0h case    0:*/		return 0x821D34E4;
		  /* 821D34E4h */ case    1:  		/* mr R3, R27 */
		/* 821D34E4h case    1:*/		regs.R3 = regs.R27;
		/* 821D34E4h case    1:*/		return 0x821D34E8;
	}
	return 0x821D34E8;
} // Block from 821D34E0h-821D34E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D34E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D34E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D34E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D34E8);
		  /* 821D34E8h */ case    0:  		/* li R6, 0 */
		/* 821D34E8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D34E8h case    0:*/		return 0x821D34EC;
	}
	return 0x821D34EC;
} // Block from 821D34E8h-821D34ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D34ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D34EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D34EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D34EC);
		  /* 821D34ECh */ case    0:  		/* li R7, 0 */
		/* 821D34ECh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D34ECh case    0:*/		return 0x821D34F0;
	}
	return 0x821D34F0;
} // Block from 821D34ECh-821D34F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D34F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D34F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D34F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D34F0);
		  /* 821D34F0h */ case    0:  		/* mr R4, R16 */
		/* 821D34F0h case    0:*/		regs.R4 = regs.R16;
		/* 821D34F0h case    0:*/		return 0x821D34F4;
		  /* 821D34F4h */ case    1:  		/* lwz R9, <#[R1 + 1924]> */
		/* 821D34F4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000784) );
		/* 821D34F4h case    1:*/		return 0x821D34F8;
		  /* 821D34F8h */ case    2:  		/* lwz R8, <#[R1 + 112]> */
		/* 821D34F8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 821D34F8h case    2:*/		return 0x821D34FC;
		  /* 821D34FCh */ case    3:  		/* bl 368148 */
		/* 821D34FCh case    3:*/		regs.LR = 0x821D3500; return 0x8222D310;
		/* 821D34FCh case    3:*/		return 0x821D3500;
	}
	return 0x821D3500;
} // Block from 821D34F0h-821D3500h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D3500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3500);
		  /* 821D3500h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 821D3500h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821D3500h case    0:*/		return 0x821D3504;
		  /* 821D3504h */ case    1:  		/* bc 12, CR6_EQ, 1632 */
		/* 821D3504h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D3B64;  }
		/* 821D3504h case    1:*/		return 0x821D3508;
		  /* 821D3508h */ case    2:  		/* mr R3, R16 */
		/* 821D3508h case    2:*/		regs.R3 = regs.R16;
		/* 821D3508h case    2:*/		return 0x821D350C;
		  /* 821D350Ch */ case    3:  		/* bl -453516 */
		/* 821D350Ch case    3:*/		regs.LR = 0x821D3510; return 0x82164980;
		/* 821D350Ch case    3:*/		return 0x821D3510;
		  /* 821D3510h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D3510h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D3510h case    4:*/		return 0x821D3514;
		  /* 821D3514h */ case    5:  		/* bc 4, CR0_EQ, 1616 */
		/* 821D3514h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D3B64;  }
		/* 821D3514h case    5:*/		return 0x821D3518;
		  /* 821D3518h */ case    6:  		/* cmplwi CR6, R18, 0 */
		/* 821D3518h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821D3518h case    6:*/		return 0x821D351C;
		  /* 821D351Ch */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 821D351Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821D3538;  }
		/* 821D351Ch case    7:*/		return 0x821D3520;
		  /* 821D3520h */ case    8:  		/* cmplw CR6, R18, R22 */
		/* 821D3520h case    8:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R22);
		/* 821D3520h case    8:*/		return 0x821D3524;
		  /* 821D3524h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821D3524h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D3538;  }
		/* 821D3524h case    9:*/		return 0x821D3528;
		  /* 821D3528h */ case   10:  		/* li R25, 0 */
		/* 821D3528h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D3528h case   10:*/		return 0x821D352C;
		  /* 821D352Ch */ case   11:  		/* li R28, 1 */
		/* 821D352Ch case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821D352Ch case   11:*/		return 0x821D3530;
		  /* 821D3530h */ case   12:  		/* mr R11, R25 */
		/* 821D3530h case   12:*/		regs.R11 = regs.R25;
		/* 821D3530h case   12:*/		return 0x821D3534;
		  /* 821D3534h */ case   13:  		/* b 16 */
		/* 821D3534h case   13:*/		return 0x821D3544;
		/* 821D3534h case   13:*/		return 0x821D3538;
	}
	return 0x821D3538;
} // Block from 821D3500h-821D3538h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D3538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3538);
		  /* 821D3538h */ case    0:  		/* li R28, 1 */
		/* 821D3538h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821D3538h case    0:*/		return 0x821D353C;
		  /* 821D353Ch */ case    1:  		/* li R25, 0 */
		/* 821D353Ch case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D353Ch case    1:*/		return 0x821D3540;
		  /* 821D3540h */ case    2:  		/* mr R11, R28 */
		/* 821D3540h case    2:*/		regs.R11 = regs.R28;
		/* 821D3540h case    2:*/		return 0x821D3544;
	}
	return 0x821D3544;
} // Block from 821D3538h-821D3544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D3544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3544);
		  /* 821D3544h */ case    0:  		/* rlwinm R10, R11, 0, 24, 31 */
		/* 821D3544h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 821D3544h case    0:*/		return 0x821D3548;
		  /* 821D3548h */ case    1:  		/* cmplwi CR6, R17, 0 */
		/* 821D3548h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821D3548h case    1:*/		return 0x821D354C;
		  /* 821D354Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821D354Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821D355C;  }
		/* 821D354Ch case    2:*/		return 0x821D3550;
		  /* 821D3550h */ case    3:  		/* cmplw CR6, R17, R22 */
		/* 821D3550h case    3:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R22);
		/* 821D3550h case    3:*/		return 0x821D3554;
		  /* 821D3554h */ case    4:  		/* mr R11, R25 */
		/* 821D3554h case    4:*/		regs.R11 = regs.R25;
		/* 821D3554h case    4:*/		return 0x821D3558;
		  /* 821D3558h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821D3558h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D3560;  }
		/* 821D3558h case    5:*/		return 0x821D355C;
	}
	return 0x821D355C;
} // Block from 821D3544h-821D355Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D355Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D355C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D355C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D355C);
		  /* 821D355Ch */ case    0:  		/* mr R11, R28 */
		/* 821D355Ch case    0:*/		regs.R11 = regs.R28;
		/* 821D355Ch case    0:*/		return 0x821D3560;
	}
	return 0x821D3560;
} // Block from 821D355Ch-821D3560h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D3560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3560);
		  /* 821D3560h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821D3560h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821D3560h case    0:*/		return 0x821D3564;
		  /* 821D3564h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821D3564h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D3570;  }
		/* 821D3564h case    1:*/		return 0x821D3568;
		  /* 821D3568h */ case    2:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D3568h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D3568h case    2:*/		return 0x821D356C;
		  /* 821D356Ch */ case    3:  		/* bc 4, CR0_EQ, 1528 */
		/* 821D356Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D3B64;  }
		/* 821D356Ch case    3:*/		return 0x821D3570;
	}
	return 0x821D3570;
} // Block from 821D3560h-821D3570h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D3570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3570);
		  /* 821D3570h */ case    0:  		/* addi R11, R1, 976 */
		/* 821D3570h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3D0);
		/* 821D3570h case    0:*/		return 0x821D3574;
		  /* 821D3574h */ case    1:  		/* addi R10, R1, 1488 */
		/* 821D3574h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5D0);
		/* 821D3574h case    1:*/		return 0x821D3578;
		  /* 821D3578h */ case    2:  		/* addi R9, R1, 944 */
		/* 821D3578h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3B0);
		/* 821D3578h case    2:*/		return 0x821D357C;
		  /* 821D357Ch */ case    3:  		/* addi R8, R1, 1584 */
		/* 821D357Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x630);
		/* 821D357Ch case    3:*/		return 0x821D3580;
		  /* 821D3580h */ case    4:  		/* addi R7, R1, 1008 */
		/* 821D3580h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3F0);
		/* 821D3580h case    4:*/		return 0x821D3584;
		  /* 821D3584h */ case    5:  		/* std R25, <#[R11]> */
		/* 821D3584h case    5:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3584h case    5:*/		return 0x821D3588;
		  /* 821D3588h */ case    6:  		/* mr R27, R25 */
		/* 821D3588h case    6:*/		regs.R27 = regs.R25;
		/* 821D3588h case    6:*/		return 0x821D358C;
		  /* 821D358Ch */ case    7:  		/* std R25, <#[R10]> */
		/* 821D358Ch case    7:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R10 + 0x00000000) );
		/* 821D358Ch case    7:*/		return 0x821D3590;
		  /* 821D3590h */ case    8:  		/* mr R29, R25 */
		/* 821D3590h case    8:*/		regs.R29 = regs.R25;
		/* 821D3590h case    8:*/		return 0x821D3594;
		  /* 821D3594h */ case    9:  		/* std R25, <#[R9]> */
		/* 821D3594h case    9:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000000) );
		/* 821D3594h case    9:*/		return 0x821D3598;
		  /* 821D3598h */ case   10:  		/* mr R30, R25 */
		/* 821D3598h case   10:*/		regs.R30 = regs.R25;
		/* 821D3598h case   10:*/		return 0x821D359C;
		  /* 821D359Ch */ case   11:  		/* std R25, <#[R8]> */
		/* 821D359Ch case   11:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000000) );
		/* 821D359Ch case   11:*/		return 0x821D35A0;
		  /* 821D35A0h */ case   12:  		/* cmplwi CR6, R15, 0 */
		/* 821D35A0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821D35A0h case   12:*/		return 0x821D35A4;
		  /* 821D35A4h */ case   13:  		/* std R25, <#[R7]> */
		/* 821D35A4h case   13:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R7 + 0x00000000) );
		/* 821D35A4h case   13:*/		return 0x821D35A8;
		  /* 821D35A8h */ case   14:  		/* std R25, <#[R11 + 8]> */
		/* 821D35A8h case   14:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 821D35A8h case   14:*/		return 0x821D35AC;
		  /* 821D35ACh */ case   15:  		/* std R25, <#[R10 + 8]> */
		/* 821D35ACh case   15:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R10 + 0x00000008) );
		/* 821D35ACh case   15:*/		return 0x821D35B0;
		  /* 821D35B0h */ case   16:  		/* std R25, <#[R9 + 8]> */
		/* 821D35B0h case   16:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000008) );
		/* 821D35B0h case   16:*/		return 0x821D35B4;
		  /* 821D35B4h */ case   17:  		/* std R25, <#[R8 + 8]> */
		/* 821D35B4h case   17:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000008) );
		/* 821D35B4h case   17:*/		return 0x821D35B8;
		  /* 821D35B8h */ case   18:  		/* std R25, <#[R7 + 8]> */
		/* 821D35B8h case   18:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R7 + 0x00000008) );
		/* 821D35B8h case   18:*/		return 0x821D35BC;
		  /* 821D35BCh */ case   19:  		/* std R25, <#[R11 + 16]> */
		/* 821D35BCh case   19:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R11 + 0x00000010) );
		/* 821D35BCh case   19:*/		return 0x821D35C0;
		  /* 821D35C0h */ case   20:  		/* std R25, <#[R10 + 16]> */
		/* 821D35C0h case   20:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R10 + 0x00000010) );
		/* 821D35C0h case   20:*/		return 0x821D35C4;
		  /* 821D35C4h */ case   21:  		/* std R25, <#[R9 + 16]> */
		/* 821D35C4h case   21:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000010) );
		/* 821D35C4h case   21:*/		return 0x821D35C8;
		  /* 821D35C8h */ case   22:  		/* std R25, <#[R8 + 16]> */
		/* 821D35C8h case   22:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000010) );
		/* 821D35C8h case   22:*/		return 0x821D35CC;
		  /* 821D35CCh */ case   23:  		/* std R25, <#[R7 + 16]> */
		/* 821D35CCh case   23:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R7 + 0x00000010) );
		/* 821D35CCh case   23:*/		return 0x821D35D0;
		  /* 821D35D0h */ case   24:  		/* std R25, <#[R11 + 24]> */
		/* 821D35D0h case   24:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R11 + 0x00000018) );
		/* 821D35D0h case   24:*/		return 0x821D35D4;
		  /* 821D35D4h */ case   25:  		/* std R25, <#[R10 + 24]> */
		/* 821D35D4h case   25:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R10 + 0x00000018) );
		/* 821D35D4h case   25:*/		return 0x821D35D8;
		  /* 821D35D8h */ case   26:  		/* std R25, <#[R9 + 24]> */
		/* 821D35D8h case   26:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R9 + 0x00000018) );
		/* 821D35D8h case   26:*/		return 0x821D35DC;
		  /* 821D35DCh */ case   27:  		/* std R25, <#[R8 + 24]> */
		/* 821D35DCh case   27:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R8 + 0x00000018) );
		/* 821D35DCh case   27:*/		return 0x821D35E0;
		  /* 821D35E0h */ case   28:  		/* std R25, <#[R7 + 24]> */
		/* 821D35E0h case   28:*/		cpu::mem::store64( regs, regs.R25, (uint32)(regs.R7 + 0x00000018) );
		/* 821D35E0h case   28:*/		return 0x821D35E4;
		  /* 821D35E4h */ case   29:  		/* bc 12, CR6_EQ, 120 */
		/* 821D35E4h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D365C;  }
		/* 821D35E4h case   29:*/		return 0x821D35E8;
		  /* 821D35E8h */ case   30:  		/* mr R31, R25 */
		/* 821D35E8h case   30:*/		regs.R31 = regs.R25;
		/* 821D35E8h case   30:*/		return 0x821D35EC;
		  /* 821D35ECh */ case   31:  		/* addi R11, R1, 944 */
		/* 821D35ECh case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3B0);
		/* 821D35ECh case   31:*/		return 0x821D35F0;
		  /* 821D35F0h */ case   32:  		/* addi R6, R1, 1488 */
		/* 821D35F0h case   32:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5D0);
		/* 821D35F0h case   32:*/		return 0x821D35F4;
		  /* 821D35F4h */ case   33:  		/* addi R5, R1, 976 */
		/* 821D35F4h case   33:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3D0);
		/* 821D35F4h case   33:*/		return 0x821D35F8;
		  /* 821D35F8h */ case   34:  		/* li R10, 0 */
		/* 821D35F8h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D35F8h case   34:*/		return 0x821D35FC;
		  /* 821D35FCh */ case   35:  		/* mr R9, R16 */
		/* 821D35FCh case   35:*/		regs.R9 = regs.R16;
		/* 821D35FCh case   35:*/		return 0x821D3600;
		  /* 821D3600h */ case   36:  		/* li R8, 0 */
		/* 821D3600h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D3600h case   36:*/		return 0x821D3604;
		  /* 821D3604h */ case   37:  		/* add R7, R31, R11 */
		/* 821D3604h case   37:*/		cpu::op::add<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 821D3604h case   37:*/		return 0x821D3608;
		  /* 821D3608h */ case   38:  		/* add R6, R31, R6 */
		/* 821D3608h case   38:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R6);
		/* 821D3608h case   38:*/		return 0x821D360C;
		  /* 821D360Ch */ case   39:  		/* add R5, R31, R5 */
		/* 821D360Ch case   39:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821D360Ch case   39:*/		return 0x821D3610;
		  /* 821D3610h */ case   40:  		/* mr R4, R30 */
		/* 821D3610h case   40:*/		regs.R4 = regs.R30;
		/* 821D3610h case   40:*/		return 0x821D3614;
		  /* 821D3614h */ case   41:  		/* mr R3, R23 */
		/* 821D3614h case   41:*/		regs.R3 = regs.R23;
		/* 821D3614h case   41:*/		return 0x821D3618;
		  /* 821D3618h */ case   42:  		/* bl 327352 */
		/* 821D3618h case   42:*/		regs.LR = 0x821D361C; return 0x822234D0;
		/* 821D3618h case   42:*/		return 0x821D361C;
		  /* 821D361Ch */ case   43:  		/* addi R11, R1, 960 */
		/* 821D361Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3C0);
		/* 821D361Ch case   43:*/		return 0x821D3620;
		  /* 821D3620h */ case   44:  		/* addi R6, R1, 1504 */
		/* 821D3620h case   44:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5E0);
		/* 821D3620h case   44:*/		return 0x821D3624;
		  /* 821D3624h */ case   45:  		/* addi R5, R1, 992 */
		/* 821D3624h case   45:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3E0);
		/* 821D3624h case   45:*/		return 0x821D3628;
		  /* 821D3628h */ case   46:  		/* li R10, 0 */
		/* 821D3628h case   46:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D3628h case   46:*/		return 0x821D362C;
		  /* 821D362Ch */ case   47:  		/* mr R9, R16 */
		/* 821D362Ch case   47:*/		regs.R9 = regs.R16;
		/* 821D362Ch case   47:*/		return 0x821D3630;
		  /* 821D3630h */ case   48:  		/* li R8, 0 */
		/* 821D3630h case   48:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D3630h case   48:*/		return 0x821D3634;
		  /* 821D3634h */ case   49:  		/* add R7, R31, R11 */
		/* 821D3634h case   49:*/		cpu::op::add<0>(regs,&regs.R7,regs.R31,regs.R11);
		/* 821D3634h case   49:*/		return 0x821D3638;
		  /* 821D3638h */ case   50:  		/* add R6, R31, R6 */
		/* 821D3638h case   50:*/		cpu::op::add<0>(regs,&regs.R6,regs.R31,regs.R6);
		/* 821D3638h case   50:*/		return 0x821D363C;
		  /* 821D363Ch */ case   51:  		/* add R5, R31, R5 */
		/* 821D363Ch case   51:*/		cpu::op::add<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821D363Ch case   51:*/		return 0x821D3640;
		  /* 821D3640h */ case   52:  		/* mr R4, R30 */
		/* 821D3640h case   52:*/		regs.R4 = regs.R30;
		/* 821D3640h case   52:*/		return 0x821D3644;
		  /* 821D3644h */ case   53:  		/* mr R3, R21 */
		/* 821D3644h case   53:*/		regs.R3 = regs.R21;
		/* 821D3644h case   53:*/		return 0x821D3648;
		  /* 821D3648h */ case   54:  		/* bl 327304 */
		/* 821D3648h case   54:*/		regs.LR = 0x821D364C; return 0x822234D0;
		/* 821D3648h case   54:*/		return 0x821D364C;
		  /* 821D364Ch */ case   55:  		/* addi R30, R30, 1 */
		/* 821D364Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D364Ch case   55:*/		return 0x821D3650;
		  /* 821D3650h */ case   56:  		/* addi R31, R31, 4 */
		/* 821D3650h case   56:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821D3650h case   56:*/		return 0x821D3654;
		  /* 821D3654h */ case   57:  		/* cmplw CR6, R30, R15 */
		/* 821D3654h case   57:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R15);
		/* 821D3654h case   57:*/		return 0x821D3658;
		  /* 821D3658h */ case   58:  		/* bc 12, CR6_LT, -108 */
		/* 821D3658h case   58:*/		if ( regs.CR[6].lt ) { return 0x821D35EC;  }
		/* 821D3658h case   58:*/		return 0x821D365C;
	}
	return 0x821D365C;
} // Block from 821D3570h-821D365Ch (59 instructions)

//////////////////////////////////////////////////////
// Block at 821D365Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D365C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D365C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D365C);
		  /* 821D365Ch */ case    0:  		/* mr R8, R25 */
		/* 821D365Ch case    0:*/		regs.R8 = regs.R25;
		/* 821D365Ch case    0:*/		return 0x821D3660;
		  /* 821D3660h */ case    1:  		/* mr R7, R25 */
		/* 821D3660h case    1:*/		regs.R7 = regs.R25;
		/* 821D3660h case    1:*/		return 0x821D3664;
		  /* 821D3664h */ case    2:  		/* addi R11, R1, 976 */
		/* 821D3664h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3D0);
		/* 821D3664h case    2:*/		return 0x821D3668;
		  /* 821D3668h */ case    3:  		/* lwzx R5, <#[R7 + R11]> */
		/* 821D3668h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821D3668h case    3:*/		return 0x821D366C;
		  /* 821D366Ch */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 821D366Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821D366Ch case    4:*/		return 0x821D3670;
		  /* 821D3670h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821D3670h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D368C;  }
		/* 821D3670h case    5:*/		return 0x821D3674;
		  /* 821D3674h */ case    6:  		/* lwz R11, <#[R5 + 8]> */
		/* 821D3674h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821D3674h case    6:*/		return 0x821D3678;
		  /* 821D3678h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D3678h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D3678h case    7:*/		return 0x821D367C;
		  /* 821D367Ch */ case    8:  		/* cmplwi CR6, R11, 16000 */
		/* 821D367Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D367Ch case    8:*/		return 0x821D3680;
		  /* 821D3680h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821D3680h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D368C;  }
		/* 821D3680h case    9:*/		return 0x821D3684;
		  /* 821D3684h */ case   10:  		/* slw R11, R28, R8 */
		/* 821D3684h case   10:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R8);
		/* 821D3684h case   10:*/		return 0x821D3688;
		  /* 821D3688h */ case   11:  		/* or R27, R11, R27 */
		/* 821D3688h case   11:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 821D3688h case   11:*/		return 0x821D368C;
	}
	return 0x821D368C;
} // Block from 821D365Ch-821D368Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D368Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D368C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D368C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D368C);
		  /* 821D368Ch */ case    0:  		/* addi R11, R1, 944 */
		/* 821D368Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3B0);
		/* 821D368Ch case    0:*/		return 0x821D3690;
		  /* 821D3690h */ case    1:  		/* lwzx R11, <#[R7 + R11]> */
		/* 821D3690h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821D3690h case    1:*/		return 0x821D3694;
		  /* 821D3694h */ case    2:  		/* rlwinm. R6, R11, 0, 29, 29 */
		/* 821D3694h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R6,regs.R11);
		/* 821D3694h case    2:*/		return 0x821D3698;
		  /* 821D3698h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821D3698h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D36B0;  }
		/* 821D3698h case    3:*/		return 0x821D369C;
		  /* 821D369Ch */ case    4:  		/* addi R11, R1, 1008 */
		/* 821D369Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3F0);
		/* 821D369Ch case    4:*/		return 0x821D36A0;
		  /* 821D36A0h */ case    5:  		/* slw R10, R28, R8 */
		/* 821D36A0h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R28,regs.R8);
		/* 821D36A0h case    5:*/		return 0x821D36A4;
		  /* 821D36A4h */ case    6:  		/* lwzx R9, <#[R7 + R11]> */
		/* 821D36A4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821D36A4h case    6:*/		return 0x821D36A8;
		  /* 821D36A8h */ case    7:  		/* or R10, R10, R9 */
		/* 821D36A8h case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821D36A8h case    7:*/		return 0x821D36AC;
		  /* 821D36ACh */ case    8:  		/* stwx R10, <#[R7 + R11]> */
		/* 821D36ACh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 821D36ACh case    8:*/		return 0x821D36B0;
	}
	return 0x821D36B0;
} // Block from 821D368Ch-821D36B0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D36B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D36B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D36B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D36B0);
		  /* 821D36B0h */ case    0:  		/* rlwinm R11, R8, 0, 29, 29 */
		/* 821D36B0h case    0:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R11,regs.R8);
		/* 821D36B0h case    0:*/		return 0x821D36B4;
		  /* 821D36B4h */ case    1:  		/* cmplw CR6, R11, R8 */
		/* 821D36B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821D36B4h case    1:*/		return 0x821D36B8;
		  /* 821D36B8h */ case    2:  		/* bc 4, CR6_LT, 104 */
		/* 821D36B8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821D3720;  }
		/* 821D36B8h case    2:*/		return 0x821D36BC;
		  /* 821D36BCh */ case    3:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 821D36BCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821D36BCh case    3:*/		return 0x821D36C0;
		  /* 821D36C0h */ case    4:  		/* addi R10, R1, 976 */
		/* 821D36C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x3D0);
		/* 821D36C0h case    4:*/		return 0x821D36C4;
		  /* 821D36C4h */ case    5:  		/* add R10, R9, R10 */
		/* 821D36C4h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821D36C4h case    5:*/		return 0x821D36C8;
		  /* 821D36C8h */ case    6:  		/* lwz R9, <#[R10]> */
		/* 821D36C8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D36C8h case    6:*/		return 0x821D36CC;
		  /* 821D36CCh */ case    7:  		/* cmplw CR6, R5, R9 */
		/* 821D36CCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R9);
		/* 821D36CCh case    7:*/		return 0x821D36D0;
		  /* 821D36D0h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 821D36D0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D36E8;  }
		/* 821D36D0h case    8:*/		return 0x821D36D4;
		  /* 821D36D4h */ case    9:  		/* addi R11, R11, 1 */
		/* 821D36D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D36D4h case    9:*/		return 0x821D36D8;
		  /* 821D36D8h */ case   10:  		/* addi R10, R10, 4 */
		/* 821D36D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D36D8h case   10:*/		return 0x821D36DC;
		  /* 821D36DCh */ case   11:  		/* cmplw CR6, R11, R8 */
		/* 821D36DCh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821D36DCh case   11:*/		return 0x821D36E0;
		  /* 821D36E0h */ case   12:  		/* bc 12, CR6_LT, -24 */
		/* 821D36E0h case   12:*/		if ( regs.CR[6].lt ) { return 0x821D36C8;  }
		/* 821D36E0h case   12:*/		return 0x821D36E4;
		  /* 821D36E4h */ case   13:  		/* b 60 */
		/* 821D36E4h case   13:*/		return 0x821D3720;
		/* 821D36E4h case   13:*/		return 0x821D36E8;
	}
	return 0x821D36E8;
} // Block from 821D36B0h-821D36E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D36E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D36E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D36E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D36E8);
		  /* 821D36E8h */ case    0:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 821D36E8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 821D36E8h case    0:*/		return 0x821D36EC;
		  /* 821D36ECh */ case    1:  		/* addi R9, R1, 1584 */
		/* 821D36ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x630);
		/* 821D36ECh case    1:*/		return 0x821D36F0;
		  /* 821D36F0h */ case    2:  		/* slw R5, R28, R11 */
		/* 821D36F0h case    2:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R28,regs.R11);
		/* 821D36F0h case    2:*/		return 0x821D36F4;
		  /* 821D36F4h */ case    3:  		/* lwzx R4, <#[R10 + R9]> */
		/* 821D36F4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D36F4h case    3:*/		return 0x821D36F8;
		  /* 821D36F8h */ case    4:  		/* slw R11, R28, R8 */
		/* 821D36F8h case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R8);
		/* 821D36F8h case    4:*/		return 0x821D36FC;
		  /* 821D36FCh */ case    5:  		/* or R5, R5, R4 */
		/* 821D36FCh case    5:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 821D36FCh case    5:*/		return 0x821D3700;
		  /* 821D3700h */ case    6:  		/* cmplwi CR6, R6, 0 */
		/* 821D3700h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821D3700h case    6:*/		return 0x821D3704;
		  /* 821D3704h */ case    7:  		/* or R6, R5, R11 */
		/* 821D3704h case    7:*/		cpu::op::or<0>(regs,&regs.R6,regs.R5,regs.R11);
		/* 821D3704h case    7:*/		return 0x821D3708;
		  /* 821D3708h */ case    8:  		/* stwx R6, <#[R10 + R9]> */
		/* 821D3708h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D3708h case    8:*/		return 0x821D370C;
		  /* 821D370Ch */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821D370Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821D3720;  }
		/* 821D370Ch case    9:*/		return 0x821D3710;
		  /* 821D3710h */ case   10:  		/* addi R9, R1, 1008 */
		/* 821D3710h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3F0);
		/* 821D3710h case   10:*/		return 0x821D3714;
		  /* 821D3714h */ case   11:  		/* lwzx R6, <#[R10 + R9]> */
		/* 821D3714h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D3714h case   11:*/		return 0x821D3718;
		  /* 821D3718h */ case   12:  		/* or R11, R6, R11 */
		/* 821D3718h case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821D3718h case   12:*/		return 0x821D371C;
		  /* 821D371Ch */ case   13:  		/* stwx R11, <#[R10 + R9]> */
		/* 821D371Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D371Ch case   13:*/		return 0x821D3720;
	}
	return 0x821D3720;
} // Block from 821D36E8h-821D3720h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D3720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3720);
		  /* 821D3720h */ case    0:  		/* addi R7, R7, 4 */
		/* 821D3720h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821D3720h case    0:*/		return 0x821D3724;
		  /* 821D3724h */ case    1:  		/* addi R8, R8, 1 */
		/* 821D3724h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821D3724h case    1:*/		return 0x821D3728;
		  /* 821D3728h */ case    2:  		/* cmplwi CR6, R7, 32 */
		/* 821D3728h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000020);
		/* 821D3728h case    2:*/		return 0x821D372C;
		  /* 821D372Ch */ case    3:  		/* bc 12, CR6_LT, -200 */
		/* 821D372Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821D3664;  }
		/* 821D372Ch case    3:*/		return 0x821D3730;
		  /* 821D3730h */ case    4:  		/* nor R11, R27, R27 */
		/* 821D3730h case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R27,regs.R27);
		/* 821D3730h case    4:*/		return 0x821D3734;
		  /* 821D3734h */ case    5:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 821D3734h case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 821D3734h case    5:*/		return 0x821D3738;
		  /* 821D3738h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821D3738h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821D3738h case    6:*/		return 0x821D373C;
		  /* 821D373Ch */ case    7:  		/* bc 12, CR6_EQ, 300 */
		/* 821D373Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821D3868;  }
		/* 821D373Ch case    7:*/		return 0x821D3740;
		  /* 821D3740h */ case    8:  		/* addi R11, R3, -1 */
		/* 821D3740h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 821D3740h case    8:*/		return 0x821D3744;
		  /* 821D3744h */ case    9:  		/* addi R9, R1, 1584 */
		/* 821D3744h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x630);
		/* 821D3744h case    9:*/		return 0x821D3748;
		  /* 821D3748h */ case   10:  		/* andc R11, R3, R11 */
		/* 821D3748h case   10:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821D3748h case   10:*/		return 0x821D374C;
		  /* 821D374Ch */ case   11:  		/* addi R4, R1, 1008 */
		/* 821D374Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x3F0);
		/* 821D374Ch case   11:*/		return 0x821D3750;
		  /* 821D3750h */ case   12:  		/* cntlzw R11, R11 */
		/* 821D3750h case   12:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D3750h case   12:*/		return 0x821D3754;
		  /* 821D3754h */ case   13:  		/* subfic R10, R11, 31 */
		/* 821D3754h case   13:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R11,0x1F);
		/* 821D3754h case   13:*/		return 0x821D3758;
		  /* 821D3758h */ case   14:  		/* rlwinm R5, R10, 2, 0, 29 */
		/* 821D3758h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R10);
		/* 821D3758h case   14:*/		return 0x821D375C;
		  /* 821D375Ch */ case   15:  		/* lwzx R6, <#[R5 + R9]> */
		/* 821D375Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 821D375Ch case   15:*/		return 0x821D3760;
		  /* 821D3760h */ case   16:  		/* lwzx R9, <#[R5 + R4]> */
		/* 821D3760h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 821D3760h case   16:*/		return 0x821D3764;
		  /* 821D3764h */ case   17:  		/* and. R11, R6, R9 */
		/* 821D3764h case   17:*/		cpu::op::and<1>(regs,&regs.R11,regs.R6,regs.R9);
		/* 821D3764h case   17:*/		return 0x821D3768;
		  /* 821D3768h */ case   18:  		/* bc 12, CR0_EQ, 240 */
		/* 821D3768h case   18:*/		if ( regs.CR[0].eq ) { return 0x821D3858;  }
		/* 821D3768h case   18:*/		return 0x821D376C;
		  /* 821D376Ch */ case   19:  		/* cmplw CR6, R11, R6 */
		/* 821D376Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821D376Ch case   19:*/		return 0x821D3770;
		  /* 821D3770h */ case   20:  		/* bc 12, CR6_EQ, 232 */
		/* 821D3770h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D3858;  }
		/* 821D3770h case   20:*/		return 0x821D3774;
		  /* 821D3774h */ case   21:  		/* rlwinm R10, R10, 0, 29, 29 */
		/* 821D3774h case   21:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R10,regs.R10);
		/* 821D3774h case   21:*/		return 0x821D3778;
		  /* 821D3778h */ case   22:  		/* subfic R10, R10, 4 */
		/* 821D3778h case   22:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D3778h case   22:*/		return 0x821D377C;
		  /* 821D377Ch */ case   23:  		/* srw R10, R27, R10 */
		/* 821D377Ch case   23:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821D377Ch case   23:*/		return 0x821D3780;
		  /* 821D3780h */ case   24:  		/* rlwinm R10, R10, 0, 28, 31 */
		/* 821D3780h case   24:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R10);
		/* 821D3780h case   24:*/		return 0x821D3784;
		  /* 821D3784h */ case   25:  		/* and R8, R10, R11 */
		/* 821D3784h case   25:*/		cpu::op::and<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 821D3784h case   25:*/		return 0x821D3788;
		  /* 821D3788h */ case   26:  		/* cmplw CR6, R8, R11 */
		/* 821D3788h case   26:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821D3788h case   26:*/		return 0x821D378C;
		  /* 821D378Ch */ case   27:  		/* bc 4, CR6_EQ, 96 */
		/* 821D378Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x821D37EC;  }
		/* 821D378Ch case   27:*/		return 0x821D3790;
		  /* 821D3790h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821D3790h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3790h case   28:*/		return 0x821D3794;
		  /* 821D3794h */ case   29:  		/* bc 12, CR6_EQ, 80 */
		/* 821D3794h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D37E4;  }
		/* 821D3794h case   29:*/		return 0x821D3798;
		  /* 821D3798h */ case   30:  		/* addi R10, R11, -1 */
		/* 821D3798h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3798h case   30:*/		return 0x821D379C;
		  /* 821D379Ch */ case   31:  		/* addi R7, R11, -1 */
		/* 821D379Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 821D379Ch case   31:*/		return 0x821D37A0;
		  /* 821D37A0h */ case   32:  		/* andc R10, R11, R10 */
		/* 821D37A0h case   32:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D37A0h case   32:*/		return 0x821D37A4;
		  /* 821D37A4h */ case   33:  		/* andc R6, R11, R7 */
		/* 821D37A4h case   33:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R11,regs.R7);
		/* 821D37A4h case   33:*/		return 0x821D37A8;
		  /* 821D37A8h */ case   34:  		/* cntlzw R10, R10 */
		/* 821D37A8h case   34:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D37A8h case   34:*/		return 0x821D37AC;
		  /* 821D37ACh */ case   35:  		/* addi R8, R1, 944 */
		/* 821D37ACh case   35:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x3B0);
		/* 821D37ACh case   35:*/		return 0x821D37B0;
		  /* 821D37B0h */ case   36:  		/* subfic R10, R10, 31 */
		/* 821D37B0h case   36:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D37B0h case   36:*/		return 0x821D37B4;
		  /* 821D37B4h */ case   37:  		/* subf R11, R6, R11 */
		/* 821D37B4h case   37:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821D37B4h case   37:*/		return 0x821D37B8;
		  /* 821D37B8h */ case   38:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 821D37B8h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 821D37B8h case   38:*/		return 0x821D37BC;
		  /* 821D37BCh */ case   39:  		/* addi R9, R1, 944 */
		/* 821D37BCh case   39:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3B0);
		/* 821D37BCh case   39:*/		return 0x821D37C0;
		  /* 821D37C0h */ case   40:  		/* xori R7, R7, 16 */
		/* 821D37C0h case   40:*/		cpu::op::xori<0>(regs,&regs.R7,regs.R7,0x10);
		/* 821D37C0h case   40:*/		return 0x821D37C4;
		  /* 821D37C4h */ case   41:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D37C4h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D37C4h case   41:*/		return 0x821D37C8;
		  /* 821D37C8h */ case   42:  		/* lwzx R6, <#[R7 + R8]> */
		/* 821D37C8h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D37C8h case   42:*/		return 0x821D37CC;
		  /* 821D37CCh */ case   43:  		/* xori R6, R6, 4 */
		/* 821D37CCh case   43:*/		cpu::op::xori<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821D37CCh case   43:*/		return 0x821D37D0;
		  /* 821D37D0h */ case   44:  		/* stwx R6, <#[R7 + R8]> */
		/* 821D37D0h case   44:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D37D0h case   44:*/		return 0x821D37D4;
		  /* 821D37D4h */ case   45:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821D37D4h case   45:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D37D4h case   45:*/		return 0x821D37D8;
		  /* 821D37D8h */ case   46:  		/* addi R8, R8, -4 */
		/* 821D37D8h case   46:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFC);
		/* 821D37D8h case   46:*/		return 0x821D37DC;
		  /* 821D37DCh */ case   47:  		/* stwx R8, <#[R10 + R9]> */
		/* 821D37DCh case   47:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D37DCh case   47:*/		return 0x821D37E0;
		  /* 821D37E0h */ case   48:  		/* b -80 */
		/* 821D37E0h case   48:*/		return 0x821D3790;
		/* 821D37E0h case   48:*/		return 0x821D37E4;
	}
	return 0x821D37E4;
} // Block from 821D3720h-821D37E4h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821D37E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D37E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D37E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D37E4);
		  /* 821D37E4h */ case    0:  		/* stwx R25, <#[R5 + R4]> */
		/* 821D37E4h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 821D37E4h case    0:*/		return 0x821D37E8;
		  /* 821D37E8h */ case    1:  		/* b 108 */
		/* 821D37E8h case    1:*/		return 0x821D3854;
		/* 821D37E8h case    1:*/		return 0x821D37EC;
	}
	return 0x821D37EC;
} // Block from 821D37E4h-821D37ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D37ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D37EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D37EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D37EC);
		  /* 821D37ECh */ case    0:  		/* subf R11, R9, R6 */
		/* 821D37ECh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R6);
		/* 821D37ECh case    0:*/		return 0x821D37F0;
		  /* 821D37F0h */ case    1:  		/* and R10, R11, R10 */
		/* 821D37F0h case    1:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D37F0h case    1:*/		return 0x821D37F4;
		  /* 821D37F4h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 821D37F4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D37F4h case    2:*/		return 0x821D37F8;
		  /* 821D37F8h */ case    3:  		/* bc 4, CR6_EQ, 96 */
		/* 821D37F8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D3858;  }
		/* 821D37F8h case    3:*/		return 0x821D37FC;
		  /* 821D37FCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821D37FCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D37FCh case    4:*/		return 0x821D3800;
		  /* 821D3800h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 821D3800h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D3850;  }
		/* 821D3800h case    5:*/		return 0x821D3804;
		  /* 821D3804h */ case    6:  		/* addi R10, R11, -1 */
		/* 821D3804h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3804h case    6:*/		return 0x821D3808;
		  /* 821D3808h */ case    7:  		/* addi R7, R11, -1 */
		/* 821D3808h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 821D3808h case    7:*/		return 0x821D380C;
		  /* 821D380Ch */ case    8:  		/* andc R10, R11, R10 */
		/* 821D380Ch case    8:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D380Ch case    8:*/		return 0x821D3810;
		  /* 821D3810h */ case    9:  		/* andc R31, R11, R7 */
		/* 821D3810h case    9:*/		cpu::op::andc<0>(regs,&regs.R31,regs.R11,regs.R7);
		/* 821D3810h case    9:*/		return 0x821D3814;
		  /* 821D3814h */ case   10:  		/* cntlzw R10, R10 */
		/* 821D3814h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D3814h case   10:*/		return 0x821D3818;
		  /* 821D3818h */ case   11:  		/* addi R8, R1, 944 */
		/* 821D3818h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x3B0);
		/* 821D3818h case   11:*/		return 0x821D381C;
		  /* 821D381Ch */ case   12:  		/* subfic R10, R10, 31 */
		/* 821D381Ch case   12:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D381Ch case   12:*/		return 0x821D3820;
		  /* 821D3820h */ case   13:  		/* subf R11, R31, R11 */
		/* 821D3820h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D3820h case   13:*/		return 0x821D3824;
		  /* 821D3824h */ case   14:  		/* rlwinm R7, R10, 2, 0, 29 */
		/* 821D3824h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R10);
		/* 821D3824h case   14:*/		return 0x821D3828;
		  /* 821D3828h */ case   15:  		/* addi R9, R1, 944 */
		/* 821D3828h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3B0);
		/* 821D3828h case   15:*/		return 0x821D382C;
		  /* 821D382Ch */ case   16:  		/* xori R7, R7, 16 */
		/* 821D382Ch case   16:*/		cpu::op::xori<0>(regs,&regs.R7,regs.R7,0x10);
		/* 821D382Ch case   16:*/		return 0x821D3830;
		  /* 821D3830h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D3830h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D3830h case   17:*/		return 0x821D3834;
		  /* 821D3834h */ case   18:  		/* lwzx R31, <#[R7 + R8]> */
		/* 821D3834h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D3834h case   18:*/		return 0x821D3838;
		  /* 821D3838h */ case   19:  		/* xori R31, R31, 4 */
		/* 821D3838h case   19:*/		cpu::op::xori<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821D3838h case   19:*/		return 0x821D383C;
		  /* 821D383Ch */ case   20:  		/* stwx R31, <#[R7 + R8]> */
		/* 821D383Ch case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D383Ch case   20:*/		return 0x821D3840;
		  /* 821D3840h */ case   21:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821D3840h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D3840h case   21:*/		return 0x821D3844;
		  /* 821D3844h */ case   22:  		/* ori R8, R8, 4 */
		/* 821D3844h case   22:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821D3844h case   22:*/		return 0x821D3848;
		  /* 821D3848h */ case   23:  		/* stwx R8, <#[R10 + R9]> */
		/* 821D3848h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821D3848h case   23:*/		return 0x821D384C;
		  /* 821D384Ch */ case   24:  		/* b -80 */
		/* 821D384Ch case   24:*/		return 0x821D37FC;
		/* 821D384Ch case   24:*/		return 0x821D3850;
	}
	return 0x821D3850;
} // Block from 821D37ECh-821D3850h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D3850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3850);
		  /* 821D3850h */ case    0:  		/* stwx R6, <#[R5 + R4]> */
		/* 821D3850h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 821D3850h case    0:*/		return 0x821D3854;
	}
	return 0x821D3854;
} // Block from 821D3850h-821D3854h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D3854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3854);
		  /* 821D3854h */ case    0:  		/* mr R29, R28 */
		/* 821D3854h case    0:*/		regs.R29 = regs.R28;
		/* 821D3854h case    0:*/		return 0x821D3858;
	}
	return 0x821D3858;
} // Block from 821D3854h-821D3858h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D3858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3858);
		  /* 821D3858h */ case    0:  		/* addi R11, R3, -1 */
		/* 821D3858h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 821D3858h case    0:*/		return 0x821D385C;
		  /* 821D385Ch */ case    1:  		/* andc R11, R3, R11 */
		/* 821D385Ch case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821D385Ch case    1:*/		return 0x821D3860;
		  /* 821D3860h */ case    2:  		/* subf R3, R11, R3 */
		/* 821D3860h case    2:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 821D3860h case    2:*/		return 0x821D3864;
		  /* 821D3864h */ case    3:  		/* b -300 */
		/* 821D3864h case    3:*/		return 0x821D3738;
		/* 821D3864h case    3:*/		return 0x821D3868;
	}
	return 0x821D3868;
} // Block from 821D3858h-821D3868h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D3868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3868);
		  /* 821D3868h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821D3868h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821D3868h case    0:*/		return 0x821D386C;
		  /* 821D386Ch */ case    1:  		/* bc 12, CR0_EQ, 760 */
		/* 821D386Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821D3B64;  }
		/* 821D386Ch case    1:*/		return 0x821D3870;
		  /* 821D3870h */ case    2:  		/* li R11, 8 */
		/* 821D3870h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 821D3870h case    2:*/		return 0x821D3874;
		  /* 821D3874h */ case    3:  		/* addi R10, R1, 1608 */
		/* 821D3874h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x648);
		/* 821D3874h case    3:*/		return 0x821D3878;
		  /* 821D3878h */ case    4:  		/* mr R9, R25 */
		/* 821D3878h case    4:*/		regs.R9 = regs.R25;
		/* 821D3878h case    4:*/		return 0x821D387C;
		  /* 821D387Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 821D387Ch case    5:*/		regs.CTR = regs.R11;
		/* 821D387Ch case    5:*/		return 0x821D3880;
		  /* 821D3880h */ case    6:  		/* stdu R9, <#[R10 + 8]> */
		/* 821D3880h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 821D3880h case    6:*/		return 0x821D3884;
		  /* 821D3884h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 821D3884h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821D3880;  }
		/* 821D3884h case    7:*/		return 0x821D3888;
		  /* 821D3888h */ case    8:  		/* mr R31, R27 */
		/* 821D3888h case    8:*/		regs.R31 = regs.R27;
		/* 821D3888h case    8:*/		return 0x821D388C;
		  /* 821D388Ch */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821D388Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D388Ch case    9:*/		return 0x821D3890;
		  /* 821D3890h */ case   10:  		/* bc 12, CR6_EQ, 104 */
		/* 821D3890h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D38F8;  }
		/* 821D3890h case   10:*/		return 0x821D3894;
		  /* 821D3894h */ case   11:  		/* addi R11, R31, -1 */
		/* 821D3894h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821D3894h case   11:*/		return 0x821D3898;
		  /* 821D3898h */ case   12:  		/* addi R10, R1, 1488 */
		/* 821D3898h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5D0);
		/* 821D3898h case   12:*/		return 0x821D389C;
		  /* 821D389Ch */ case   13:  		/* andc R11, R31, R11 */
		/* 821D389Ch case   13:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D389Ch case   13:*/		return 0x821D38A0;
		  /* 821D38A0h */ case   14:  		/* addi R9, R1, 976 */
		/* 821D38A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3D0);
		/* 821D38A0h case   14:*/		return 0x821D38A4;
		  /* 821D38A4h */ case   15:  		/* cntlzw R11, R11 */
		/* 821D38A4h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D38A4h case   15:*/		return 0x821D38A8;
		  /* 821D38A8h */ case   16:  		/* addi R28, R1, 944 */
		/* 821D38A8h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x3B0);
		/* 821D38A8h case   16:*/		return 0x821D38AC;
		  /* 821D38ACh */ case   17:  		/* subfic R29, R11, 31 */
		/* 821D38ACh case   17:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0x1F);
		/* 821D38ACh case   17:*/		return 0x821D38B0;
		  /* 821D38B0h */ case   18:  		/* addi R3, R1, 1568 */
		/* 821D38B0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x620);
		/* 821D38B0h case   18:*/		return 0x821D38B4;
		  /* 821D38B4h */ case   19:  		/* rlwinm R30, R29, 2, 0, 29 */
		/* 821D38B4h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R29);
		/* 821D38B4h case   19:*/		return 0x821D38B8;
		  /* 821D38B8h */ case   20:  		/* lwzx R5, <#[R30 + R10]> */
		/* 821D38B8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 821D38B8h case   20:*/		return 0x821D38BC;
		  /* 821D38BCh */ case   21:  		/* lwzx R4, <#[R30 + R9]> */
		/* 821D38BCh case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 821D38BCh case   21:*/		return 0x821D38C0;
		  /* 821D38C0h */ case   22:  		/* lwzx R6, <#[R30 + R28]> */
		/* 821D38C0h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 821D38C0h case   22:*/		return 0x821D38C4;
		  /* 821D38C4h */ case   23:  		/* bl 342636 */
		/* 821D38C4h case   23:*/		regs.LR = 0x821D38C8; return 0x82227330;
		/* 821D38C4h case   23:*/		return 0x821D38C8;
		  /* 821D38C8h */ case   24:  		/* addi R11, R1, 1616 */
		/* 821D38C8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x650);
		/* 821D38C8h case   24:*/		return 0x821D38CC;
		  /* 821D38CCh */ case   25:  		/* lwz R7, <#[R3]> */
		/* 821D38CCh case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 821D38CCh case   25:*/		return 0x821D38D0;
		  /* 821D38D0h */ case   26:  		/* rlwinm R10, R29, 3, 0, 28 */
		/* 821D38D0h case   26:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R29);
		/* 821D38D0h case   26:*/		return 0x821D38D4;
		  /* 821D38D4h */ case   27:  		/* addi R9, R31, -1 */
		/* 821D38D4h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFFF);
		/* 821D38D4h case   27:*/		return 0x821D38D8;
		  /* 821D38D8h */ case   28:  		/* add R8, R10, R11 */
		/* 821D38D8h case   28:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 821D38D8h case   28:*/		return 0x821D38DC;
		  /* 821D38DCh */ case   29:  		/* andc R9, R31, R9 */
		/* 821D38DCh case   29:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R31,regs.R9);
		/* 821D38DCh case   29:*/		return 0x821D38E0;
		  /* 821D38E0h */ case   30:  		/* stwx R7, <#[R10 + R11]> */
		/* 821D38E0h case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821D38E0h case   30:*/		return 0x821D38E4;
		  /* 821D38E4h */ case   31:  		/* subf R31, R9, R31 */
		/* 821D38E4h case   31:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R9,regs.R31);
		/* 821D38E4h case   31:*/		return 0x821D38E8;
		  /* 821D38E8h */ case   32:  		/* lwz R11, <#[R3 + 4]> */
		/* 821D38E8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D38E8h case   32:*/		return 0x821D38EC;
		  /* 821D38ECh */ case   33:  		/* stwx R25, <#[R30 + R28]> */
		/* 821D38ECh case   33:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + regs.R28 + 0x00000000) );
		/* 821D38ECh case   33:*/		return 0x821D38F0;
		  /* 821D38F0h */ case   34:  		/* stw R11, <#[R8 + 4]> */
		/* 821D38F0h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821D38F0h case   34:*/		return 0x821D38F4;
		  /* 821D38F4h */ case   35:  		/* b -104 */
		/* 821D38F4h case   35:*/		return 0x821D388C;
		/* 821D38F4h case   35:*/		return 0x821D38F8;
	}
	return 0x821D38F8;
} // Block from 821D3868h-821D38F8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D38F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D38F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D38F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D38F8);
		  /* 821D38F8h */ case    0:  		/* lwz R26, <#[R1 + 1908]> */
		/* 821D38F8h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000774) );
		/* 821D38F8h case    0:*/		return 0x821D38FC;
		  /* 821D38FCh */ case    1:  		/* rlwinm. R31, R27, 0, 28, 31 */
		/* 821D38FCh case    1:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R31,regs.R27);
		/* 821D38FCh case    1:*/		return 0x821D3900;
		  /* 821D3900h */ case    2:  		/* bc 12, CR0_EQ, 84 */
		/* 821D3900h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D3954;  }
		/* 821D3900h case    2:*/		return 0x821D3904;
		  /* 821D3904h */ case    3:  		/* addi R5, R1, 1616 */
		/* 821D3904h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x650);
		/* 821D3904h case    3:*/		return 0x821D3908;
		  /* 821D3908h */ case    4:  		/* mr R4, R15 */
		/* 821D3908h case    4:*/		regs.R4 = regs.R15;
		/* 821D3908h case    4:*/		return 0x821D390C;
		  /* 821D390Ch */ case    5:  		/* mr R3, R26 */
		/* 821D390Ch case    5:*/		regs.R3 = regs.R26;
		/* 821D390Ch case    5:*/		return 0x821D3910;
		  /* 821D3910h */ case    6:  		/* bl 342192 */
		/* 821D3910h case    6:*/		regs.LR = 0x821D3914; return 0x822271C0;
		/* 821D3910h case    6:*/		return 0x821D3914;
		  /* 821D3914h */ case    7:  		/* mr R11, R31 */
		/* 821D3914h case    7:*/		regs.R11 = regs.R31;
		/* 821D3914h case    7:*/		return 0x821D3918;
		  /* 821D3918h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821D3918h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3918h case    8:*/		return 0x821D391C;
		  /* 821D391Ch */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 821D391Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821D3954;  }
		/* 821D391Ch case    9:*/		return 0x821D3920;
		  /* 821D3920h */ case   10:  		/* addi R10, R11, -1 */
		/* 821D3920h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3920h case   10:*/		return 0x821D3924;
		  /* 821D3924h */ case   11:  		/* addi R9, R11, -1 */
		/* 821D3924h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821D3924h case   11:*/		return 0x821D3928;
		  /* 821D3928h */ case   12:  		/* andc R10, R11, R10 */
		/* 821D3928h case   12:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D3928h case   12:*/		return 0x821D392C;
		  /* 821D392Ch */ case   13:  		/* addi R8, R1, 976 */
		/* 821D392Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x3D0);
		/* 821D392Ch case   13:*/		return 0x821D3930;
		  /* 821D3930h */ case   14:  		/* cntlzw R10, R10 */
		/* 821D3930h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D3930h case   14:*/		return 0x821D3934;
		  /* 821D3934h */ case   15:  		/* addi R7, R1, 1488 */
		/* 821D3934h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x5D0);
		/* 821D3934h case   15:*/		return 0x821D3938;
		  /* 821D3938h */ case   16:  		/* subfic R10, R10, 31 */
		/* 821D3938h case   16:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D3938h case   16:*/		return 0x821D393C;
		  /* 821D393Ch */ case   17:  		/* andc R9, R11, R9 */
		/* 821D393Ch case   17:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821D393Ch case   17:*/		return 0x821D3940;
		  /* 821D3940h */ case   18:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 821D3940h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 821D3940h case   18:*/		return 0x821D3944;
		  /* 821D3944h */ case   19:  		/* subf R11, R9, R11 */
		/* 821D3944h case   19:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D3944h case   19:*/		return 0x821D3948;
		  /* 821D3948h */ case   20:  		/* stwx R3, <#[R6 + R8]> */
		/* 821D3948h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 821D3948h case   20:*/		return 0x821D394C;
		  /* 821D394Ch */ case   21:  		/* stwx R10, <#[R6 + R7]> */
		/* 821D394Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 821D394Ch case   21:*/		return 0x821D3950;
		  /* 821D3950h */ case   22:  		/* b -56 */
		/* 821D3950h case   22:*/		return 0x821D3918;
		/* 821D3950h case   22:*/		return 0x821D3954;
	}
	return 0x821D3954;
} // Block from 821D38F8h-821D3954h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D3954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3954);
		  /* 821D3954h */ case    0:  		/* rlwinm. R31, R27, 0, 24, 27 */
		/* 821D3954h case    0:*/		cpu::op::rlwinm<1,0,24,27>(regs,&regs.R31,regs.R27);
		/* 821D3954h case    0:*/		return 0x821D3958;
		  /* 821D3958h */ case    1:  		/* bc 12, CR0_EQ, 88 */
		/* 821D3958h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D39B0;  }
		/* 821D3958h case    1:*/		return 0x821D395C;
		  /* 821D395Ch */ case    2:  		/* addi R5, R1, 1648 */
		/* 821D395Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x670);
		/* 821D395Ch case    2:*/		return 0x821D3960;
		  /* 821D3960h */ case    3:  		/* mr R4, R15 */
		/* 821D3960h case    3:*/		regs.R4 = regs.R15;
		/* 821D3960h case    3:*/		return 0x821D3964;
		  /* 821D3964h */ case    4:  		/* mr R3, R26 */
		/* 821D3964h case    4:*/		regs.R3 = regs.R26;
		/* 821D3964h case    4:*/		return 0x821D3968;
		  /* 821D3968h */ case    5:  		/* bl 342104 */
		/* 821D3968h case    5:*/		regs.LR = 0x821D396C; return 0x822271C0;
		/* 821D3968h case    5:*/		return 0x821D396C;
		  /* 821D396Ch */ case    6:  		/* mr R11, R31 */
		/* 821D396Ch case    6:*/		regs.R11 = regs.R31;
		/* 821D396Ch case    6:*/		return 0x821D3970;
		  /* 821D3970h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821D3970h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3970h case    7:*/		return 0x821D3974;
		  /* 821D3974h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 821D3974h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D39B0;  }
		/* 821D3974h case    8:*/		return 0x821D3978;
		  /* 821D3978h */ case    9:  		/* addi R10, R11, -1 */
		/* 821D3978h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3978h case    9:*/		return 0x821D397C;
		  /* 821D397Ch */ case   10:  		/* addi R9, R11, -1 */
		/* 821D397Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821D397Ch case   10:*/		return 0x821D3980;
		  /* 821D3980h */ case   11:  		/* andc R10, R11, R10 */
		/* 821D3980h case   11:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D3980h case   11:*/		return 0x821D3984;
		  /* 821D3984h */ case   12:  		/* addi R8, R1, 976 */
		/* 821D3984h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x3D0);
		/* 821D3984h case   12:*/		return 0x821D3988;
		  /* 821D3988h */ case   13:  		/* cntlzw R10, R10 */
		/* 821D3988h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D3988h case   13:*/		return 0x821D398C;
		  /* 821D398Ch */ case   14:  		/* addi R7, R1, 1488 */
		/* 821D398Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x5D0);
		/* 821D398Ch case   14:*/		return 0x821D3990;
		  /* 821D3990h */ case   15:  		/* subfic R10, R10, 31 */
		/* 821D3990h case   15:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D3990h case   15:*/		return 0x821D3994;
		  /* 821D3994h */ case   16:  		/* andc R9, R11, R9 */
		/* 821D3994h case   16:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821D3994h case   16:*/		return 0x821D3998;
		  /* 821D3998h */ case   17:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 821D3998h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 821D3998h case   17:*/		return 0x821D399C;
		  /* 821D399Ch */ case   18:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821D399Ch case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821D399Ch case   18:*/		return 0x821D39A0;
		  /* 821D39A0h */ case   19:  		/* subf R11, R9, R11 */
		/* 821D39A0h case   19:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D39A0h case   19:*/		return 0x821D39A4;
		  /* 821D39A4h */ case   20:  		/* stwx R3, <#[R6 + R8]> */
		/* 821D39A4h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 821D39A4h case   20:*/		return 0x821D39A8;
		  /* 821D39A8h */ case   21:  		/* stwx R10, <#[R6 + R7]> */
		/* 821D39A8h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 821D39A8h case   21:*/		return 0x821D39AC;
		  /* 821D39ACh */ case   22:  		/* b -60 */
		/* 821D39ACh case   22:*/		return 0x821D3970;
		/* 821D39ACh case   22:*/		return 0x821D39B0;
	}
	return 0x821D39B0;
} // Block from 821D3954h-821D39B0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D39B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D39B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D39B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D39B0);
		  /* 821D39B0h */ case    0:  		/* mr R6, R15 */
		/* 821D39B0h case    0:*/		regs.R6 = regs.R15;
		/* 821D39B0h case    0:*/		return 0x821D39B4;
		  /* 821D39B4h */ case    1:  		/* mr R5, R16 */
		/* 821D39B4h case    1:*/		regs.R5 = regs.R16;
		/* 821D39B4h case    1:*/		return 0x821D39B8;
		  /* 821D39B8h */ case    2:  		/* li R4, 0 */
		/* 821D39B8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D39B8h case    2:*/		return 0x821D39BC;
		  /* 821D39BCh */ case    3:  		/* mr R3, R26 */
		/* 821D39BCh case    3:*/		regs.R3 = regs.R26;
		/* 821D39BCh case    3:*/		return 0x821D39C0;
		  /* 821D39C0h */ case    4:  		/* bl -220192 */
		/* 821D39C0h case    4:*/		regs.LR = 0x821D39C4; return 0x8219DDA0;
		/* 821D39C0h case    4:*/		return 0x821D39C4;
		  /* 821D39C4h */ case    5:  		/* lwz R27, <#[R1 + 112]> */
		/* 821D39C4h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 821D39C4h case    5:*/		return 0x821D39C8;
		  /* 821D39C8h */ case    6:  		/* mr R29, R3 */
		/* 821D39C8h case    6:*/		regs.R29 = regs.R3;
		/* 821D39C8h case    6:*/		return 0x821D39CC;
		  /* 821D39CCh */ case    7:  		/* mr R4, R3 */
		/* 821D39CCh case    7:*/		regs.R4 = regs.R3;
		/* 821D39CCh case    7:*/		return 0x821D39D0;
		  /* 821D39D0h */ case    8:  		/* mr R5, R27 */
		/* 821D39D0h case    8:*/		regs.R5 = regs.R27;
		/* 821D39D0h case    8:*/		return 0x821D39D4;
		  /* 821D39D4h */ case    9:  		/* mr R3, R26 */
		/* 821D39D4h case    9:*/		regs.R3 = regs.R26;
		/* 821D39D4h case    9:*/		return 0x821D39D8;
		  /* 821D39D8h */ case   10:  		/* bl -32784 */
		/* 821D39D8h case   10:*/		regs.LR = 0x821D39DC; return 0x821CB9C8;
		/* 821D39D8h case   10:*/		return 0x821D39DC;
		  /* 821D39DCh */ case   11:  		/* mr R6, R15 */
		/* 821D39DCh case   11:*/		regs.R6 = regs.R15;
		/* 821D39DCh case   11:*/		return 0x821D39E0;
		  /* 821D39E0h */ case   12:  		/* mr R5, R16 */
		/* 821D39E0h case   12:*/		regs.R5 = regs.R16;
		/* 821D39E0h case   12:*/		return 0x821D39E4;
		  /* 821D39E4h */ case   13:  		/* li R4, 0 */
		/* 821D39E4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D39E4h case   13:*/		return 0x821D39E8;
		  /* 821D39E8h */ case   14:  		/* mr R3, R26 */
		/* 821D39E8h case   14:*/		regs.R3 = regs.R26;
		/* 821D39E8h case   14:*/		return 0x821D39EC;
		  /* 821D39ECh */ case   15:  		/* bl -220236 */
		/* 821D39ECh case   15:*/		regs.LR = 0x821D39F0; return 0x8219DDA0;
		/* 821D39ECh case   15:*/		return 0x821D39F0;
		  /* 821D39F0h */ case   16:  		/* mr R28, R3 */
		/* 821D39F0h case   16:*/		regs.R28 = regs.R3;
		/* 821D39F0h case   16:*/		return 0x821D39F4;
		  /* 821D39F4h */ case   17:  		/* mr R4, R3 */
		/* 821D39F4h case   17:*/		regs.R4 = regs.R3;
		/* 821D39F4h case   17:*/		return 0x821D39F8;
		  /* 821D39F8h */ case   18:  		/* mr R5, R27 */
		/* 821D39F8h case   18:*/		regs.R5 = regs.R27;
		/* 821D39F8h case   18:*/		return 0x821D39FC;
		  /* 821D39FCh */ case   19:  		/* mr R3, R26 */
		/* 821D39FCh case   19:*/		regs.R3 = regs.R26;
		/* 821D39FCh case   19:*/		return 0x821D3A00;
		  /* 821D3A00h */ case   20:  		/* bl -32824 */
		/* 821D3A00h case   20:*/		regs.LR = 0x821D3A04; return 0x821CB9C8;
		/* 821D3A00h case   20:*/		return 0x821D3A04;
		  /* 821D3A04h */ case   21:  		/* mr R30, R25 */
		/* 821D3A04h case   21:*/		regs.R30 = regs.R25;
		/* 821D3A04h case   21:*/		return 0x821D3A08;
		  /* 821D3A08h */ case   22:  		/* cmplwi CR6, R15, 0 */
		/* 821D3A08h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821D3A08h case   22:*/		return 0x821D3A0C;
		  /* 821D3A0Ch */ case   23:  		/* bc 12, CR6_EQ, 120 */
		/* 821D3A0Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821D3A84;  }
		/* 821D3A0Ch case   23:*/		return 0x821D3A10;
		  /* 821D3A10h */ case   24:  		/* mr R31, R25 */
		/* 821D3A10h case   24:*/		regs.R31 = regs.R25;
		/* 821D3A10h case   24:*/		return 0x821D3A14;
		  /* 821D3A14h */ case   25:  		/* addi R11, R1, 944 */
		/* 821D3A14h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3B0);
		/* 821D3A14h case   25:*/		return 0x821D3A18;
		  /* 821D3A18h */ case   26:  		/* addi R10, R1, 1488 */
		/* 821D3A18h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5D0);
		/* 821D3A18h case   26:*/		return 0x821D3A1C;
		  /* 821D3A1Ch */ case   27:  		/* addi R9, R1, 976 */
		/* 821D3A1Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3D0);
		/* 821D3A1Ch case   27:*/		return 0x821D3A20;
		  /* 821D3A20h */ case   28:  		/* mr R3, R26 */
		/* 821D3A20h case   28:*/		regs.R3 = regs.R26;
		/* 821D3A20h case   28:*/		return 0x821D3A24;
		  /* 821D3A24h */ case   29:  		/* lwzx R6, <#[R31 + R11]> */
		/* 821D3A24h case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821D3A24h case   29:*/		return 0x821D3A28;
		  /* 821D3A28h */ case   30:  		/* lwzx R5, <#[R31 + R10]> */
		/* 821D3A28h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 821D3A28h case   30:*/		return 0x821D3A2C;
		  /* 821D3A2Ch */ case   31:  		/* lwzx R4, <#[R31 + R9]> */
		/* 821D3A2Ch case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 821D3A2Ch case   31:*/		return 0x821D3A30;
		  /* 821D3A30h */ case   32:  		/* bl -374984 */
		/* 821D3A30h case   32:*/		regs.LR = 0x821D3A34; return 0x82178168;
		/* 821D3A30h case   32:*/		return 0x821D3A34;
		  /* 821D3A34h */ case   33:  		/* mr R5, R3 */
		/* 821D3A34h case   33:*/		regs.R5 = regs.R3;
		/* 821D3A34h case   33:*/		return 0x821D3A38;
		  /* 821D3A38h */ case   34:  		/* mr R4, R30 */
		/* 821D3A38h case   34:*/		regs.R4 = regs.R30;
		/* 821D3A38h case   34:*/		return 0x821D3A3C;
		  /* 821D3A3Ch */ case   35:  		/* mr R3, R29 */
		/* 821D3A3Ch case   35:*/		regs.R3 = regs.R29;
		/* 821D3A3Ch case   35:*/		return 0x821D3A40;
		  /* 821D3A40h */ case   36:  		/* bl -406416 */
		/* 821D3A40h case   36:*/		regs.LR = 0x821D3A44; return 0x821706B0;
		/* 821D3A40h case   36:*/		return 0x821D3A44;
		  /* 821D3A44h */ case   37:  		/* addi R11, R1, 960 */
		/* 821D3A44h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3C0);
		/* 821D3A44h case   37:*/		return 0x821D3A48;
		  /* 821D3A48h */ case   38:  		/* addi R10, R1, 1504 */
		/* 821D3A48h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5E0);
		/* 821D3A48h case   38:*/		return 0x821D3A4C;
		  /* 821D3A4Ch */ case   39:  		/* addi R9, R1, 992 */
		/* 821D3A4Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x3E0);
		/* 821D3A4Ch case   39:*/		return 0x821D3A50;
		  /* 821D3A50h */ case   40:  		/* mr R3, R26 */
		/* 821D3A50h case   40:*/		regs.R3 = regs.R26;
		/* 821D3A50h case   40:*/		return 0x821D3A54;
		  /* 821D3A54h */ case   41:  		/* lwzx R6, <#[R31 + R11]> */
		/* 821D3A54h case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821D3A54h case   41:*/		return 0x821D3A58;
		  /* 821D3A58h */ case   42:  		/* lwzx R5, <#[R31 + R10]> */
		/* 821D3A58h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 821D3A58h case   42:*/		return 0x821D3A5C;
		  /* 821D3A5Ch */ case   43:  		/* lwzx R4, <#[R31 + R9]> */
		/* 821D3A5Ch case   43:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 821D3A5Ch case   43:*/		return 0x821D3A60;
		  /* 821D3A60h */ case   44:  		/* bl -375032 */
		/* 821D3A60h case   44:*/		regs.LR = 0x821D3A64; return 0x82178168;
		/* 821D3A60h case   44:*/		return 0x821D3A64;
		  /* 821D3A64h */ case   45:  		/* mr R5, R3 */
		/* 821D3A64h case   45:*/		regs.R5 = regs.R3;
		/* 821D3A64h case   45:*/		return 0x821D3A68;
		  /* 821D3A68h */ case   46:  		/* mr R4, R30 */
		/* 821D3A68h case   46:*/		regs.R4 = regs.R30;
		/* 821D3A68h case   46:*/		return 0x821D3A6C;
		  /* 821D3A6Ch */ case   47:  		/* mr R3, R28 */
		/* 821D3A6Ch case   47:*/		regs.R3 = regs.R28;
		/* 821D3A6Ch case   47:*/		return 0x821D3A70;
		  /* 821D3A70h */ case   48:  		/* bl -406464 */
		/* 821D3A70h case   48:*/		regs.LR = 0x821D3A74; return 0x821706B0;
		/* 821D3A70h case   48:*/		return 0x821D3A74;
		  /* 821D3A74h */ case   49:  		/* addi R30, R30, 1 */
		/* 821D3A74h case   49:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D3A74h case   49:*/		return 0x821D3A78;
		  /* 821D3A78h */ case   50:  		/* addi R31, R31, 4 */
		/* 821D3A78h case   50:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821D3A78h case   50:*/		return 0x821D3A7C;
		  /* 821D3A7Ch */ case   51:  		/* cmplw CR6, R30, R15 */
		/* 821D3A7Ch case   51:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R15);
		/* 821D3A7Ch case   51:*/		return 0x821D3A80;
		  /* 821D3A80h */ case   52:  		/* bc 12, CR6_LT, -108 */
		/* 821D3A80h case   52:*/		if ( regs.CR[6].lt ) { return 0x821D3A14;  }
		/* 821D3A80h case   52:*/		return 0x821D3A84;
	}
	return 0x821D3A84;
} // Block from 821D39B0h-821D3A84h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821D3A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3A84);
		  /* 821D3A84h */ case    0:  		/* cntlzw R11, R14 */
		/* 821D3A84h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R14);
		/* 821D3A84h case    0:*/		return 0x821D3A88;
		  /* 821D3A88h */ case    1:  		/* lwz R10, <#[R16 + 8]> */
		/* 821D3A88h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3A88h case    1:*/		return 0x821D3A8C;
		  /* 821D3A8Ch */ case    2:  		/* mr R8, R15 */
		/* 821D3A8Ch case    2:*/		regs.R8 = regs.R15;
		/* 821D3A8Ch case    2:*/		return 0x821D3A90;
		  /* 821D3A90h */ case    3:  		/* lwz R4, <#[R16 + 28]> */
		/* 821D3A90h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D3A90h case    3:*/		return 0x821D3A94;
		  /* 821D3A94h */ case    4:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821D3A94h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821D3A94h case    4:*/		return 0x821D3A98;
		  /* 821D3A98h */ case    5:  		/* rlwinm R6, R10, 25, 25, 31 */
		/* 821D3A98h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R6,regs.R10);
		/* 821D3A98h case    5:*/		return 0x821D3A9C;
		  /* 821D3A9Ch */ case    6:  		/* xori R11, R11, 1 */
		/* 821D3A9Ch case    6:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D3A9Ch case    6:*/		return 0x821D3AA0;
		  /* 821D3AA0h */ case    7:  		/* li R5, 0 */
		/* 821D3AA0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D3AA0h case    7:*/		return 0x821D3AA4;
		  /* 821D3AA4h */ case    8:  		/* addi R7, R11, 2 */
		/* 821D3AA4h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x2);
		/* 821D3AA4h case    8:*/		return 0x821D3AA8;
		  /* 821D3AA8h */ case    9:  		/* mr R3, R26 */
		/* 821D3AA8h case    9:*/		regs.R3 = regs.R26;
		/* 821D3AA8h case    9:*/		return 0x821D3AAC;
		  /* 821D3AACh */ case   10:  		/* bl 331500 */
		/* 821D3AACh case   10:*/		regs.LR = 0x821D3AB0; return 0x82224998;
		/* 821D3AACh case   10:*/		return 0x821D3AB0;
		  /* 821D3AB0h */ case   11:  		/* mr R31, R3 */
		/* 821D3AB0h case   11:*/		regs.R31 = regs.R3;
		/* 821D3AB0h case   11:*/		return 0x821D3AB4;
		  /* 821D3AB4h */ case   12:  		/* mr R4, R29 */
		/* 821D3AB4h case   12:*/		regs.R4 = regs.R29;
		/* 821D3AB4h case   12:*/		return 0x821D3AB8;
		  /* 821D3AB8h */ case   13:  		/* mr R3, R26 */
		/* 821D3AB8h case   13:*/		regs.R3 = regs.R26;
		/* 821D3AB8h case   13:*/		return 0x821D3ABC;
		  /* 821D3ABCh */ case   14:  		/* bl -375484 */
		/* 821D3ABCh case   14:*/		regs.LR = 0x821D3AC0; return 0x82178000;
		/* 821D3ABCh case   14:*/		return 0x821D3AC0;
		  /* 821D3AC0h */ case   15:  		/* mr R5, R3 */
		/* 821D3AC0h case   15:*/		regs.R5 = regs.R3;
		/* 821D3AC0h case   15:*/		return 0x821D3AC4;
		  /* 821D3AC4h */ case   16:  		/* mr R3, R31 */
		/* 821D3AC4h case   16:*/		regs.R3 = regs.R31;
		/* 821D3AC4h case   16:*/		return 0x821D3AC8;
		  /* 821D3AC8h */ case   17:  		/* li R4, 0 */
		/* 821D3AC8h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D3AC8h case   17:*/		return 0x821D3ACC;
		  /* 821D3ACCh */ case   18:  		/* bl -406556 */
		/* 821D3ACCh case   18:*/		regs.LR = 0x821D3AD0; return 0x821706B0;
		/* 821D3ACCh case   18:*/		return 0x821D3AD0;
		  /* 821D3AD0h */ case   19:  		/* mr R4, R28 */
		/* 821D3AD0h case   19:*/		regs.R4 = regs.R28;
		/* 821D3AD0h case   19:*/		return 0x821D3AD4;
		  /* 821D3AD4h */ case   20:  		/* mr R3, R26 */
		/* 821D3AD4h case   20:*/		regs.R3 = regs.R26;
		/* 821D3AD4h case   20:*/		return 0x821D3AD8;
		  /* 821D3AD8h */ case   21:  		/* bl -375512 */
		/* 821D3AD8h case   21:*/		regs.LR = 0x821D3ADC; return 0x82178000;
		/* 821D3AD8h case   21:*/		return 0x821D3ADC;
		  /* 821D3ADCh */ case   22:  		/* mr R5, R3 */
		/* 821D3ADCh case   22:*/		regs.R5 = regs.R3;
		/* 821D3ADCh case   22:*/		return 0x821D3AE0;
		  /* 821D3AE0h */ case   23:  		/* li R4, 1 */
		/* 821D3AE0h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D3AE0h case   23:*/		return 0x821D3AE4;
		  /* 821D3AE4h */ case   24:  		/* mr R3, R31 */
		/* 821D3AE4h case   24:*/		regs.R3 = regs.R31;
		/* 821D3AE4h case   24:*/		return 0x821D3AE8;
		  /* 821D3AE8h */ case   25:  		/* bl -406584 */
		/* 821D3AE8h case   25:*/		regs.LR = 0x821D3AEC; return 0x821706B0;
		/* 821D3AE8h case   25:*/		return 0x821D3AEC;
		  /* 821D3AECh */ case   26:  		/* cmplwi CR6, R14, 0 */
		/* 821D3AECh case   26:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821D3AECh case   26:*/		return 0x821D3AF0;
		  /* 821D3AF0h */ case   27:  		/* bc 12, CR6_EQ, 20 */
		/* 821D3AF0h case   27:*/		if ( regs.CR[6].eq ) { return 0x821D3B04;  }
		/* 821D3AF0h case   27:*/		return 0x821D3AF4;
		  /* 821D3AF4h */ case   28:  		/* mr R5, R14 */
		/* 821D3AF4h case   28:*/		regs.R5 = regs.R14;
		/* 821D3AF4h case   28:*/		return 0x821D3AF8;
		  /* 821D3AF8h */ case   29:  		/* li R4, 2 */
		/* 821D3AF8h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821D3AF8h case   29:*/		return 0x821D3AFC;
		  /* 821D3AFCh */ case   30:  		/* mr R3, R31 */
		/* 821D3AFCh case   30:*/		regs.R3 = regs.R31;
		/* 821D3AFCh case   30:*/		return 0x821D3B00;
		  /* 821D3B00h */ case   31:  		/* bl -406608 */
		/* 821D3B00h case   31:*/		regs.LR = 0x821D3B04; return 0x821706B0;
		/* 821D3B00h case   31:*/		return 0x821D3B04;
	}
	return 0x821D3B04;
} // Block from 821D3A84h-821D3B04h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D3B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3B04);
		  /* 821D3B04h */ case    0:  		/* lwz R8, <#[R16 + 12]> */
		/* 821D3B04h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D3B04h case    0:*/		return 0x821D3B08;
		  /* 821D3B08h */ case    1:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 821D3B08h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 821D3B08h case    1:*/		return 0x821D3B0C;
		  /* 821D3B0Ch */ case    2:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821D3B0Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821D3B0Ch case    2:*/		return 0x821D3B10;
		  /* 821D3B10h */ case    3:  		/* lwz R9, <#[R1 + 1924]> */
		/* 821D3B10h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000784) );
		/* 821D3B10h case    3:*/		return 0x821D3B14;
		  /* 821D3B14h */ case    4:  		/* addi R11, R11, 36 */
		/* 821D3B14h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D3B14h case    4:*/		return 0x821D3B18;
		  /* 821D3B18h */ case    5:  		/* addi R10, R10, 36 */
		/* 821D3B18h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D3B18h case    5:*/		return 0x821D3B1C;
		  /* 821D3B1Ch */ case    6:  		/* addi R28, R11, -36 */
		/* 821D3B1Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFDC);
		/* 821D3B1Ch case    6:*/		return 0x821D3B20;
		  /* 821D3B20h */ case    7:  		/* sth R8, <#[R31 + 14]> */
		/* 821D3B20h case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R31 + 0x0000000E) );
		/* 821D3B20h case    7:*/		return 0x821D3B24;
		  /* 821D3B24h */ case    8:  		/* addi R29, R10, -36 */
		/* 821D3B24h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFFDC);
		/* 821D3B24h case    8:*/		return 0x821D3B28;
		  /* 821D3B28h */ case    9:  		/* addi R30, R10, 4 */
		/* 821D3B28h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4);
		/* 821D3B28h case    9:*/		return 0x821D3B2C;
		  /* 821D3B2Ch */ case   10:  		/* li R7, 0 */
		/* 821D3B2Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D3B2Ch case   10:*/		return 0x821D3B30;
		  /* 821D3B30h */ case   11:  		/* li R6, 228 */
		/* 821D3B30h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D3B30h case   11:*/		return 0x821D3B34;
		  /* 821D3B34h */ case   12:  		/* mr R4, R16 */
		/* 821D3B34h case   12:*/		regs.R4 = regs.R16;
		/* 821D3B34h case   12:*/		return 0x821D3B38;
		  /* 821D3B38h */ case   13:  		/* mr R3, R26 */
		/* 821D3B38h case   13:*/		regs.R3 = regs.R26;
		/* 821D3B38h case   13:*/		return 0x821D3B3C;
		  /* 821D3B3Ch */ case   14:  		/* lwz R8, <#[R11]> */
		/* 821D3B3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3B3Ch case   14:*/		return 0x821D3B40;
		  /* 821D3B40h */ case   15:  		/* stw R8, <#[R10]> */
		/* 821D3B40h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821D3B40h case   15:*/		return 0x821D3B44;
		  /* 821D3B44h */ case   16:  		/* mr R8, R27 */
		/* 821D3B44h case   16:*/		regs.R8 = regs.R27;
		/* 821D3B44h case   16:*/		return 0x821D3B48;
		  /* 821D3B48h */ case   17:  		/* lwz R5, <#[R11]> */
		/* 821D3B48h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3B48h case   17:*/		return 0x821D3B4C;
		  /* 821D3B4Ch */ case   18:  		/* rlwinm R27, R5, 0, 0, 30 */
		/* 821D3B4Ch case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R27,regs.R5);
		/* 821D3B4Ch case   18:*/		return 0x821D3B50;
		  /* 821D3B50h */ case   19:  		/* stw R29, <#[R27]> */
		/* 821D3B50h case   19:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 821D3B50h case   19:*/		return 0x821D3B54;
		  /* 821D3B54h */ case   20:  		/* mr R5, R31 */
		/* 821D3B54h case   20:*/		regs.R5 = regs.R31;
		/* 821D3B54h case   20:*/		return 0x821D3B58;
		  /* 821D3B58h */ case   21:  		/* stw R28, <#[R10 + 4]> */
		/* 821D3B58h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + 0x00000004) );
		/* 821D3B58h case   21:*/		return 0x821D3B5C;
		  /* 821D3B5Ch */ case   22:  		/* stw R30, <#[R11]> */
		/* 821D3B5Ch case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3B5Ch case   22:*/		return 0x821D3B60;
		  /* 821D3B60h */ case   23:  		/* bl 366512 */
		/* 821D3B60h case   23:*/		regs.LR = 0x821D3B64; return 0x8222D310;
		/* 821D3B60h case   23:*/		return 0x821D3B64;
	}
	return 0x821D3B64;
} // Block from 821D3B04h-821D3B64h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D3B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3B64);
		  /* 821D3B64h */ case    0:  		/* mr R3, R16 */
		/* 821D3B64h case    0:*/		regs.R3 = regs.R16;
		/* 821D3B64h case    0:*/		return 0x821D3B68;
		  /* 821D3B68h */ case    1:  		/* bl -455144 */
		/* 821D3B68h case    1:*/		regs.LR = 0x821D3B6C; return 0x82164980;
		/* 821D3B68h case    1:*/		return 0x821D3B6C;
		  /* 821D3B6Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D3B6Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D3B6Ch case    2:*/		return 0x821D3B70;
		  /* 821D3B70h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821D3B70h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D3B80;  }
		/* 821D3B70h case    3:*/		return 0x821D3B74;
		  /* 821D3B74h */ case    4:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D3B74h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D3B74h case    4:*/		return 0x821D3B78;
		  /* 821D3B78h */ case    5:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D3B78h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3B78h case    5:*/		return 0x821D3B7C;
		  /* 821D3B7Ch */ case    6:  		/* b -6812 */
		/* 821D3B7Ch case    6:*/		return 0x821D20E0;
		/* 821D3B7Ch case    6:*/		return 0x821D3B80;
	}
	return 0x821D3B80;
} // Block from 821D3B64h-821D3B80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D3B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3B80);
		  /* 821D3B80h */ case    0:  		/* mr R3, R16 */
		/* 821D3B80h case    0:*/		regs.R3 = regs.R16;
		/* 821D3B80h case    0:*/		return 0x821D3B84;
		  /* 821D3B84h */ case    1:  		/* bl -455172 */
		/* 821D3B84h case    1:*/		regs.LR = 0x821D3B88; return 0x82164980;
		/* 821D3B84h case    1:*/		return 0x821D3B88;
		  /* 821D3B88h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D3B88h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D3B88h case    2:*/		return 0x821D3B8C;
		  /* 821D3B8Ch */ case    3:  		/* bc 4, CR0_EQ, -24 */
		/* 821D3B8Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D3B74;  }
		/* 821D3B8Ch case    3:*/		return 0x821D3B90;
		  /* 821D3B90h */ case    4:  		/* mr R3, R16 */
		/* 821D3B90h case    4:*/		regs.R3 = regs.R16;
		/* 821D3B90h case    4:*/		return 0x821D3B94;
		  /* 821D3B94h */ case    5:  		/* bl -404964 */
		/* 821D3B94h case    5:*/		regs.LR = 0x821D3B98; return 0x82170DB0;
		/* 821D3B94h case    5:*/		return 0x821D3B98;
		  /* 821D3B98h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D3B98h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D3B98h case    6:*/		return 0x821D3B9C;
		  /* 821D3B9Ch */ case    7:  		/* bc 12, CR0_EQ, 12760 */
		/* 821D3B9Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821D6D74;  }
		/* 821D3B9Ch case    7:*/		return 0x821D3BA0;
		  /* 821D3BA0h */ case    8:  		/* lwz R10, <#[R16 + 44]> */
		/* 821D3BA0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D3BA0h case    8:*/		return 0x821D3BA4;
		  /* 821D3BA4h */ case    9:  		/* addi R18, R16, 44 */
		/* 821D3BA4h case    9:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R16,0x2C);
		/* 821D3BA4h case    9:*/		return 0x821D3BA8;
		  /* 821D3BA8h */ case   10:  		/* lwz R30, <#[R16 + 4]> */
		/* 821D3BA8h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R16 + 0x00000004) );
		/* 821D3BA8h case   10:*/		return 0x821D3BAC;
		  /* 821D3BACh */ case   11:  		/* addi R11, R16, 4 */
		/* 821D3BACh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0x4);
		/* 821D3BACh case   11:*/		return 0x821D3BB0;
		  /* 821D3BB0h */ case   12:  		/* li R31, 0 */
		/* 821D3BB0h case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821D3BB0h case   12:*/		return 0x821D3BB4;
		  /* 821D3BB4h */ case   13:  		/* lwz R10, <#[R10]> */
		/* 821D3BB4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821D3BB4h case   13:*/		return 0x821D3BB8;
		  /* 821D3BB8h */ case   14:  		/* rlwinm R29, R10, 7, 29, 31 */
		/* 821D3BB8h case   14:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R29,regs.R10);
		/* 821D3BB8h case   14:*/		return 0x821D3BBC;
		  /* 821D3BBCh */ case   15:  		/* stw R29, <#[R1 + 160]> */
		/* 821D3BBCh case   15:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D3BBCh case   15:*/		return 0x821D3BC0;
		  /* 821D3BC0h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 821D3BC0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D3BC0h case   16:*/		return 0x821D3BC4;
		  /* 821D3BC4h */ case   17:  		/* bc 12, CR6_EQ, 72 */
		/* 821D3BC4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821D3C0C;  }
		/* 821D3BC4h case   17:*/		return 0x821D3BC8;
		  /* 821D3BC8h */ case   18:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D3BC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D3BC8h case   18:*/		return 0x821D3BCC;
		  /* 821D3BCCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821D3BCCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3BCCh case   19:*/		return 0x821D3BD0;
		  /* 821D3BD0h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 821D3BD0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D3C04;  }
		/* 821D3BD0h case   20:*/		return 0x821D3BD4;
		  /* 821D3BD4h */ case   21:  		/* lwz R11, <#[R30]> */
		/* 821D3BD4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D3BD4h case   21:*/		return 0x821D3BD8;
		  /* 821D3BD8h */ case   22:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D3BD8h case   22:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D3BD8h case   22:*/		return 0x821D3BDC;
		  /* 821D3BDCh */ case   23:  		/* bc 4, CR0_EQ, 16 */
		/* 821D3BDCh case   23:*/		if ( !regs.CR[0].eq ) { return 0x821D3BEC;  }
		/* 821D3BDCh case   23:*/		return 0x821D3BE0;
		  /* 821D3BE0h */ case   24:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D3BE0h case   24:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D3BE0h case   24:*/		return 0x821D3BE4;
		  /* 821D3BE4h */ case   25:  		/* li R11, 0 */
		/* 821D3BE4h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D3BE4h case   25:*/		return 0x821D3BE8;
		  /* 821D3BE8h */ case   26:  		/* bc 12, CR0_EQ, 8 */
		/* 821D3BE8h case   26:*/		if ( regs.CR[0].eq ) { return 0x821D3BF0;  }
		/* 821D3BE8h case   26:*/		return 0x821D3BEC;
	}
	return 0x821D3BEC;
} // Block from 821D3B80h-821D3BECh (27 instructions)

//////////////////////////////////////////////////////
// Block at 821D3BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3BEC);
		  /* 821D3BECh */ case    0:  		/* li R11, 1 */
		/* 821D3BECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D3BECh case    0:*/		return 0x821D3BF0;
	}
	return 0x821D3BF0;
} // Block from 821D3BECh-821D3BF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D3BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3BF0);
		  /* 821D3BF0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D3BF0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D3BF0h case    0:*/		return 0x821D3BF4;
		  /* 821D3BF4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D3BF4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D3C04;  }
		/* 821D3BF4h case    1:*/		return 0x821D3BF8;
		  /* 821D3BF8h */ case    2:  		/* mr R3, R30 */
		/* 821D3BF8h case    2:*/		regs.R3 = regs.R30;
		/* 821D3BF8h case    2:*/		return 0x821D3BFC;
		  /* 821D3BFCh */ case    3:  		/* bl -457148 */
		/* 821D3BFCh case    3:*/		regs.LR = 0x821D3C00; return 0x82164240;
		/* 821D3BFCh case    3:*/		return 0x821D3C00;
		  /* 821D3C00h */ case    4:  		/* or R31, R3, R31 */
		/* 821D3C00h case    4:*/		cpu::op::or<0>(regs,&regs.R31,regs.R3,regs.R31);
		/* 821D3C00h case    4:*/		return 0x821D3C04;
	}
	return 0x821D3C04;
} // Block from 821D3BF0h-821D3C04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D3C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3C04);
		  /* 821D3C04h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821D3C04h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821D3C04h case    0:*/		return 0x821D3C08;
		  /* 821D3C08h */ case    1:  		/* b -72 */
		/* 821D3C08h case    1:*/		return 0x821D3BC0;
		/* 821D3C08h case    1:*/		return 0x821D3C0C;
	}
	return 0x821D3C0C;
} // Block from 821D3C04h-821D3C0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D3C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3C0C);
		  /* 821D3C0Ch */ case    0:  		/* li R11, 1 */
		/* 821D3C0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D3C0Ch case    0:*/		return 0x821D3C10;
		  /* 821D3C10h */ case    1:  		/* slw R11, R11, R29 */
		/* 821D3C10h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821D3C10h case    1:*/		return 0x821D3C14;
		  /* 821D3C14h */ case    2:  		/* addi R11, R11, -1 */
		/* 821D3C14h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D3C14h case    2:*/		return 0x821D3C18;
		  /* 821D3C18h */ case    3:  		/* cmplw CR6, R31, R11 */
		/* 821D3C18h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D3C18h case    3:*/		return 0x821D3C1C;
		  /* 821D3C1Ch */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 821D3C1Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821D3C70;  }
		/* 821D3C1Ch case    4:*/		return 0x821D3C20;
		  /* 821D3C20h */ case    5:  		/* li R7, 0 */
		/* 821D3C20h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D3C20h case    5:*/		return 0x821D3C24;
		  /* 821D3C24h */ case    6:  		/* lwz R6, <#[R1 + 112]> */
		/* 821D3C24h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 821D3C24h case    6:*/		return 0x821D3C28;
		  /* 821D3C28h */ case    7:  		/* mr R5, R31 */
		/* 821D3C28h case    7:*/		regs.R5 = regs.R31;
		/* 821D3C28h case    7:*/		return 0x821D3C2C;
		  /* 821D3C2Ch */ case    8:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D3C2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3C2Ch case    8:*/		return 0x821D3C30;
		  /* 821D3C30h */ case    9:  		/* mr R4, R16 */
		/* 821D3C30h case    9:*/		regs.R4 = regs.R16;
		/* 821D3C30h case    9:*/		return 0x821D3C34;
		  /* 821D3C34h */ case   10:  		/* bl -33164 */
		/* 821D3C34h case   10:*/		regs.LR = 0x821D3C38; return 0x821CBAA8;
		/* 821D3C34h case   10:*/		return 0x821D3C38;
		  /* 821D3C38h */ case   11:  		/* lis R10, -28311 */
		/* 821D3C38h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF9169);
		/* 821D3C38h case   11:*/		return 0x821D3C3C;
		  /* 821D3C3Ch */ case   12:  		/* lis R9, 0 */
		/* 821D3C3Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 821D3C3Ch case   12:*/		return 0x821D3C40;
		  /* 821D3C40h */ case   13:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D3C40h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3C40h case   13:*/		return 0x821D3C44;
		  /* 821D3C44h */ case   14:  		/* ori R10, R10, 5192 */
		/* 821D3C44h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1448);
		/* 821D3C44h case   14:*/		return 0x821D3C48;
		  /* 821D3C48h */ case   15:  		/* ori R9, R9, 36262 */
		/* 821D3C48h case   15:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 821D3C48h case   15:*/		return 0x821D3C4C;
		  /* 821D3C4Ch */ case   16:  		/* rldicl R8, R31, 0, 32 */
		/* 821D3C4Ch case   16:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R31);
		/* 821D3C4Ch case   16:*/		return 0x821D3C50;
		  /* 821D3C50h */ case   17:  		/* rldimi R10, R9, 32, 0 */
		/* 821D3C50h case   17:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R10,regs.R9);
		/* 821D3C50h case   17:*/		return 0x821D3C54;
		  /* 821D3C54h */ case   18:  		/* srd R10, R10, R8 */
		/* 821D3C54h case   18:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D3C54h case   18:*/		return 0x821D3C58;
		  /* 821D3C58h */ case   19:  		/* srd R10, R10, R8 */
		/* 821D3C58h case   19:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D3C58h case   19:*/		return 0x821D3C5C;
		  /* 821D3C5Ch */ case   20:  		/* srd R10, R10, R8 */
		/* 821D3C5Ch case   20:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D3C5Ch case   20:*/		return 0x821D3C60;
		  /* 821D3C60h */ case   21:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821D3C60h case   21:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821D3C60h case   21:*/		return 0x821D3C64;
		  /* 821D3C64h */ case   22:  		/* rlwimi R11, R10, 14, 15, 17 */
		/* 821D3C64h case   22:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R10);
		/* 821D3C64h case   22:*/		return 0x821D3C68;
		  /* 821D3C68h */ case   23:  		/* stw R10, <#[R1 + 160]> */
		/* 821D3C68h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D3C68h case   23:*/		return 0x821D3C6C;
		  /* 821D3C6Ch */ case   24:  		/* b 12 */
		/* 821D3C6Ch case   24:*/		return 0x821D3C78;
		/* 821D3C6Ch case   24:*/		return 0x821D3C70;
	}
	return 0x821D3C70;
} // Block from 821D3C0Ch-821D3C70h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D3C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3C70);
		  /* 821D3C70h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D3C70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3C70h case    0:*/		return 0x821D3C74;
		  /* 821D3C74h */ case    1:  		/* rlwimi R11, R29, 14, 15, 17 */
		/* 821D3C74h case    1:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R29);
		/* 821D3C74h case    1:*/		return 0x821D3C78;
	}
	return 0x821D3C78;
} // Block from 821D3C70h-821D3C78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D3C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3C78);
		  /* 821D3C78h */ case    0:  		/* stw R11, <#[R16 + 8]> */
		/* 821D3C78h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3C78h case    0:*/		return 0x821D3C7C;
		  /* 821D3C7Ch */ case    1:  		/* rlwinm. R11, R11, 26, 31, 31 */
		/* 821D3C7Ch case    1:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R11);
		/* 821D3C7Ch case    1:*/		return 0x821D3C80;
		  /* 821D3C80h */ case    2:  		/* bc 4, CR0_EQ, 1060 */
		/* 821D3C80h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D40A4;  }
		/* 821D3C80h case    2:*/		return 0x821D3C84;
		  /* 821D3C84h */ case    3:  		/* addi R10, R1, 216 */
		/* 821D3C84h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD8);
		/* 821D3C84h case    3:*/		return 0x821D3C88;
		  /* 821D3C88h */ case    4:  		/* li R26, 0 */
		/* 821D3C88h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D3C88h case    4:*/		return 0x821D3C8C;
		  /* 821D3C8Ch */ case    5:  		/* addi R11, R16, 4 */
		/* 821D3C8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0x4);
		/* 821D3C8Ch case    5:*/		return 0x821D3C90;
		  /* 821D3C90h */ case    6:  		/* li R30, -1 */
		/* 821D3C90h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 821D3C90h case    6:*/		return 0x821D3C94;
		  /* 821D3C94h */ case    7:  		/* stw R26, <#[R10]> */
		/* 821D3C94h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R10 + 0x00000000) );
		/* 821D3C94h case    7:*/		return 0x821D3C98;
		  /* 821D3C98h */ case    8:  		/* lwz R31, <#[R16 + 4]> */
		/* 821D3C98h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000004) );
		/* 821D3C98h case    8:*/		return 0x821D3C9C;
		  /* 821D3C9Ch */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 821D3C9Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D3C9Ch case    9:*/		return 0x821D3CA0;
		  /* 821D3CA0h */ case   10:  		/* bc 12, CR6_EQ, 228 */
		/* 821D3CA0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D3D84;  }
		/* 821D3CA0h case   10:*/		return 0x821D3CA4;
		  /* 821D3CA4h */ case   11:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D3CA4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D3CA4h case   11:*/		return 0x821D3CA8;
		  /* 821D3CA8h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821D3CA8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3CA8h case   12:*/		return 0x821D3CAC;
		  /* 821D3CACh */ case   13:  		/* bc 12, CR6_EQ, 208 */
		/* 821D3CACh case   13:*/		if ( regs.CR[6].eq ) { return 0x821D3D7C;  }
		/* 821D3CACh case   13:*/		return 0x821D3CB0;
		  /* 821D3CB0h */ case   14:  		/* lwz R11, <#[R31]> */
		/* 821D3CB0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D3CB0h case   14:*/		return 0x821D3CB4;
		  /* 821D3CB4h */ case   15:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D3CB4h case   15:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D3CB4h case   15:*/		return 0x821D3CB8;
		  /* 821D3CB8h */ case   16:  		/* bc 12, CR0_EQ, 196 */
		/* 821D3CB8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821D3D7C;  }
		/* 821D3CB8h case   16:*/		return 0x821D3CBC;
		  /* 821D3CBCh */ case   17:  		/* mr R3, R31 */
		/* 821D3CBCh case   17:*/		regs.R3 = regs.R31;
		/* 821D3CBCh case   17:*/		return 0x821D3CC0;
		  /* 821D3CC0h */ case   18:  		/* bl -457344 */
		/* 821D3CC0h case   18:*/		regs.LR = 0x821D3CC4; return 0x82164240;
		/* 821D3CC0h case   18:*/		return 0x821D3CC4;
		  /* 821D3CC4h */ case   19:  		/* mr R9, R3 */
		/* 821D3CC4h case   19:*/		regs.R9 = regs.R3;
		/* 821D3CC4h case   19:*/		return 0x821D3CC8;
		  /* 821D3CC8h */ case   20:  		/* mr R11, R3 */
		/* 821D3CC8h case   20:*/		regs.R11 = regs.R3;
		/* 821D3CC8h case   20:*/		return 0x821D3CCC;
		  /* 821D3CCCh */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821D3CCCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3CCCh case   21:*/		return 0x821D3CD0;
		  /* 821D3CD0h */ case   22:  		/* bc 12, CR6_EQ, 96 */
		/* 821D3CD0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D3D30;  }
		/* 821D3CD0h case   22:*/		return 0x821D3CD4;
		  /* 821D3CD4h */ case   23:  		/* addi R10, R11, -1 */
		/* 821D3CD4h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3CD4h case   23:*/		return 0x821D3CD8;
		  /* 821D3CD8h */ case   24:  		/* addi R8, R11, -1 */
		/* 821D3CD8h case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821D3CD8h case   24:*/		return 0x821D3CDC;
		  /* 821D3CDCh */ case   25:  		/* andc R10, R11, R10 */
		/* 821D3CDCh case   25:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D3CDCh case   25:*/		return 0x821D3CE0;
		  /* 821D3CE0h */ case   26:  		/* andc R5, R11, R8 */
		/* 821D3CE0h case   26:*/		cpu::op::andc<0>(regs,&regs.R5,regs.R11,regs.R8);
		/* 821D3CE0h case   26:*/		return 0x821D3CE4;
		  /* 821D3CE4h */ case   27:  		/* cntlzw R10, R10 */
		/* 821D3CE4h case   27:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D3CE4h case   27:*/		return 0x821D3CE8;
		  /* 821D3CE8h */ case   28:  		/* addi R7, R1, 216 */
		/* 821D3CE8h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD8);
		/* 821D3CE8h case   28:*/		return 0x821D3CEC;
		  /* 821D3CECh */ case   29:  		/* subfic R10, R10, 31 */
		/* 821D3CECh case   29:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D3CECh case   29:*/		return 0x821D3CF0;
		  /* 821D3CF0h */ case   30:  		/* li R6, 2 */
		/* 821D3CF0h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821D3CF0h case   30:*/		return 0x821D3CF4;
		  /* 821D3CF4h */ case   31:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 821D3CF4h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 821D3CF4h case   31:*/		return 0x821D3CF8;
		  /* 821D3CF8h */ case   32:  		/* rlwinm R4, R10, 31, 3, 29 */
		/* 821D3CF8h case   32:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R4,regs.R10);
		/* 821D3CF8h case   32:*/		return 0x821D3CFC;
		  /* 821D3CFCh */ case   33:  		/* addi R8, R8, 3 */
		/* 821D3CFCh case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x3);
		/* 821D3CFCh case   33:*/		return 0x821D3D00;
		  /* 821D3D00h */ case   34:  		/* rlwinm R29, R10, 2, 27, 29 */
		/* 821D3D00h case   34:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R29,regs.R10);
		/* 821D3D00h case   34:*/		return 0x821D3D04;
		  /* 821D3D04h */ case   35:  		/* rlwinm R10, R8, 0, 27, 31 */
		/* 821D3D04h case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R8);
		/* 821D3D04h case   35:*/		return 0x821D3D08;
		  /* 821D3D08h */ case   36:  		/* slw R8, R30, R29 */
		/* 821D3D08h case   36:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R30,regs.R29);
		/* 821D3D08h case   36:*/		return 0x821D3D0C;
		  /* 821D3D0Ch */ case   37:  		/* slw R10, R6, R10 */
		/* 821D3D0Ch case   37:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821D3D0Ch case   37:*/		return 0x821D3D10;
		  /* 821D3D10h */ case   38:  		/* lwzx R7, <#[R4 + R7]> */
		/* 821D3D10h case   38:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 821D3D10h case   38:*/		return 0x821D3D14;
		  /* 821D3D14h */ case   39:  		/* addi R10, R10, -1 */
		/* 821D3D14h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D3D14h case   39:*/		return 0x821D3D18;
		  /* 821D3D18h */ case   40:  		/* subf R11, R5, R11 */
		/* 821D3D18h case   40:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 821D3D18h case   40:*/		return 0x821D3D1C;
		  /* 821D3D1Ch */ case   41:  		/* and R10, R10, R7 */
		/* 821D3D1Ch case   41:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821D3D1Ch case   41:*/		return 0x821D3D20;
		  /* 821D3D20h */ case   42:  		/* and R10, R10, R8 */
		/* 821D3D20h case   42:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821D3D20h case   42:*/		return 0x821D3D24;
		  /* 821D3D24h */ case   43:  		/* srw R10, R10, R29 */
		/* 821D3D24h case   43:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821D3D24h case   43:*/		return 0x821D3D28;
		  /* 821D3D28h */ case   44:  		/* or R9, R10, R9 */
		/* 821D3D28h case   44:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821D3D28h case   44:*/		return 0x821D3D2C;
		  /* 821D3D2Ch */ case   45:  		/* b -96 */
		/* 821D3D2Ch case   45:*/		return 0x821D3CCC;
		/* 821D3D2Ch case   45:*/		return 0x821D3D30;
	}
	return 0x821D3D30;
} // Block from 821D3C78h-821D3D30h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821D3D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3D30);
		  /* 821D3D30h */ case    0:  		/* mr R11, R9 */
		/* 821D3D30h case    0:*/		regs.R11 = regs.R9;
		/* 821D3D30h case    0:*/		return 0x821D3D34;
		  /* 821D3D34h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D3D34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3D34h case    1:*/		return 0x821D3D38;
		  /* 821D3D38h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821D3D38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D3D78;  }
		/* 821D3D38h case    2:*/		return 0x821D3D3C;
		  /* 821D3D3Ch */ case    3:  		/* addi R10, R11, -1 */
		/* 821D3D3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D3D3Ch case    3:*/		return 0x821D3D40;
		  /* 821D3D40h */ case    4:  		/* addi R7, R11, -1 */
		/* 821D3D40h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 821D3D40h case    4:*/		return 0x821D3D44;
		  /* 821D3D44h */ case    5:  		/* andc R10, R11, R10 */
		/* 821D3D44h case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D3D44h case    5:*/		return 0x821D3D48;
		  /* 821D3D48h */ case    6:  		/* andc R7, R11, R7 */
		/* 821D3D48h case    6:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821D3D48h case    6:*/		return 0x821D3D4C;
		  /* 821D3D4Ch */ case    7:  		/* cntlzw R10, R10 */
		/* 821D3D4Ch case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821D3D4Ch case    7:*/		return 0x821D3D50;
		  /* 821D3D50h */ case    8:  		/* subf R11, R7, R11 */
		/* 821D3D50h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821D3D50h case    8:*/		return 0x821D3D54;
		  /* 821D3D54h */ case    9:  		/* subfic R10, R10, 31 */
		/* 821D3D54h case    9:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821D3D54h case    9:*/		return 0x821D3D58;
		  /* 821D3D58h */ case   10:  		/* addi R8, R1, 216 */
		/* 821D3D58h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xD8);
		/* 821D3D58h case   10:*/		return 0x821D3D5C;
		  /* 821D3D5Ch */ case   11:  		/* rlwinm R7, R10, 31, 3, 29 */
		/* 821D3D5Ch case   11:*/		cpu::op::rlwinm<0,31,3,29>(regs,&regs.R7,regs.R10);
		/* 821D3D5Ch case   11:*/		return 0x821D3D60;
		  /* 821D3D60h */ case   12:  		/* rlwinm R10, R10, 2, 27, 29 */
		/* 821D3D60h case   12:*/		cpu::op::rlwinm<0,2,27,29>(regs,&regs.R10,regs.R10);
		/* 821D3D60h case   12:*/		return 0x821D3D64;
		  /* 821D3D64h */ case   13:  		/* slw R10, R9, R10 */
		/* 821D3D64h case   13:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821D3D64h case   13:*/		return 0x821D3D68;
		  /* 821D3D68h */ case   14:  		/* lwzx R6, <#[R7 + R8]> */
		/* 821D3D68h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D3D68h case   14:*/		return 0x821D3D6C;
		  /* 821D3D6Ch */ case   15:  		/* or R10, R10, R6 */
		/* 821D3D6Ch case   15:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 821D3D6Ch case   15:*/		return 0x821D3D70;
		  /* 821D3D70h */ case   16:  		/* stwx R10, <#[R7 + R8]> */
		/* 821D3D70h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 821D3D70h case   16:*/		return 0x821D3D74;
		  /* 821D3D74h */ case   17:  		/* b -64 */
		/* 821D3D74h case   17:*/		return 0x821D3D34;
		/* 821D3D74h case   17:*/		return 0x821D3D78;
	}
	return 0x821D3D78;
} // Block from 821D3D30h-821D3D78h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D3D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3D78);
		  /* 821D3D78h */ case    0:  		/* or R26, R3, R26 */
		/* 821D3D78h case    0:*/		cpu::op::or<0>(regs,&regs.R26,regs.R3,regs.R26);
		/* 821D3D78h case    0:*/		return 0x821D3D7C;
	}
	return 0x821D3D7C;
} // Block from 821D3D78h-821D3D7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D3D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3D7C);
		  /* 821D3D7Ch */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821D3D7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821D3D7Ch case    0:*/		return 0x821D3D80;
		  /* 821D3D80h */ case    1:  		/* b -228 */
		/* 821D3D80h case    1:*/		return 0x821D3C9C;
		/* 821D3D80h case    1:*/		return 0x821D3D84;
	}
	return 0x821D3D84;
} // Block from 821D3D7Ch-821D3D84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D3D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3D84);
		  /* 821D3D84h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821D3D84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D3D84h case    0:*/		return 0x821D3D88;
		  /* 821D3D88h */ case    1:  		/* bc 12, CR6_EQ, 796 */
		/* 821D3D88h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D40A4;  }
		/* 821D3D88h case    1:*/		return 0x821D3D8C;
		  /* 821D3D8Ch */ case    2:  		/* addi R11, R26, -1 */
		/* 821D3D8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFF);
		/* 821D3D8Ch case    2:*/		return 0x821D3D90;
		  /* 821D3D90h */ case    3:  		/* li R9, 2 */
		/* 821D3D90h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 821D3D90h case    3:*/		return 0x821D3D94;
		  /* 821D3D94h */ case    4:  		/* andc R11, R26, R11 */
		/* 821D3D94h case    4:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821D3D94h case    4:*/		return 0x821D3D98;
		  /* 821D3D98h */ case    5:  		/* addi R10, R1, 216 */
		/* 821D3D98h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD8);
		/* 821D3D98h case    5:*/		return 0x821D3D9C;
		  /* 821D3D9Ch */ case    6:  		/* cntlzw R11, R11 */
		/* 821D3D9Ch case    6:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D3D9Ch case    6:*/		return 0x821D3DA0;
		  /* 821D3DA0h */ case    7:  		/* li R8, -1 */
		/* 821D3DA0h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 821D3DA0h case    7:*/		return 0x821D3DA4;
		  /* 821D3DA4h */ case    8:  		/* subfic R11, R11, 31 */
		/* 821D3DA4h case    8:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821D3DA4h case    8:*/		return 0x821D3DA8;
		  /* 821D3DA8h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D3DA8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D3DA8h case    9:*/		return 0x821D3DAC;
		  /* 821D3DACh */ case   10:  		/* addi R7, R11, 3 */
		/* 821D3DACh case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3);
		/* 821D3DACh case   10:*/		return 0x821D3DB0;
		  /* 821D3DB0h */ case   11:  		/* rlwinm R6, R11, 29, 3, 29 */
		/* 821D3DB0h case   11:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R6,regs.R11);
		/* 821D3DB0h case   11:*/		return 0x821D3DB4;
		  /* 821D3DB4h */ case   12:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821D3DB4h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821D3DB4h case   12:*/		return 0x821D3DB8;
		  /* 821D3DB8h */ case   13:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821D3DB8h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821D3DB8h case   13:*/		return 0x821D3DBC;
		  /* 821D3DBCh */ case   14:  		/* slw R11, R9, R7 */
		/* 821D3DBCh case   14:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R7);
		/* 821D3DBCh case   14:*/		return 0x821D3DC0;
		  /* 821D3DC0h */ case   15:  		/* lwzx R10, <#[R6 + R10]> */
		/* 821D3DC0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + regs.R10 + 0x00000000) );
		/* 821D3DC0h case   15:*/		return 0x821D3DC4;
		  /* 821D3DC4h */ case   16:  		/* addi R11, R11, -1 */
		/* 821D3DC4h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D3DC4h case   16:*/		return 0x821D3DC8;
		  /* 821D3DC8h */ case   17:  		/* slw R9, R8, R5 */
		/* 821D3DC8h case   17:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R8,regs.R5);
		/* 821D3DC8h case   17:*/		return 0x821D3DCC;
		  /* 821D3DCCh */ case   18:  		/* and R11, R11, R10 */
		/* 821D3DCCh case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D3DCCh case   18:*/		return 0x821D3DD0;
		  /* 821D3DD0h */ case   19:  		/* and R11, R11, R9 */
		/* 821D3DD0h case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D3DD0h case   19:*/		return 0x821D3DD4;
		  /* 821D3DD4h */ case   20:  		/* srw R11, R11, R5 */
		/* 821D3DD4h case   20:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821D3DD4h case   20:*/		return 0x821D3DD8;
		  /* 821D3DD8h */ case   21:  		/* cmplw CR6, R11, R26 */
		/* 821D3DD8h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821D3DD8h case   21:*/		return 0x821D3DDC;
		  /* 821D3DDCh */ case   22:  		/* bc 12, CR6_EQ, 712 */
		/* 821D3DDCh case   22:*/		if ( regs.CR[6].eq ) { return 0x821D40A4;  }
		/* 821D3DDCh case   22:*/		return 0x821D3DE0;
		  /* 821D3DE0h */ case   23:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 821D3DE0h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 821D3DE0h case   23:*/		return 0x821D3DE4;
		  /* 821D3DE4h */ case   24:  		/* lwz R17, <#[R1 + 1908]> */
		/* 821D3DE4h case   24:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000774) );
		/* 821D3DE4h case   24:*/		return 0x821D3DE8;
		  /* 821D3DE8h */ case   25:  		/* li R14, 3 */
		/* 821D3DE8h case   25:*/		cpu::op::li<0>(regs,&regs.R14,0x3);
		/* 821D3DE8h case   25:*/		return 0x821D3DEC;
		  /* 821D3DECh */ case   26:  		/* addi R11, R11, 36 */
		/* 821D3DECh case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D3DECh case   26:*/		return 0x821D3DF0;
		  /* 821D3DF0h */ case   27:  		/* li R15, -1 */
		/* 821D3DF0h case   27:*/		cpu::op::li<0>(regs,&regs.R15,0xFFFFFFFF);
		/* 821D3DF0h case   27:*/		return 0x821D3DF4;
		  /* 821D3DF4h */ case   28:  		/* addi R25, R11, 4 */
		/* 821D3DF4h case   28:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x4);
		/* 821D3DF4h case   28:*/		return 0x821D3DF8;
		  /* 821D3DF8h */ case   29:  		/* addi R11, R26, -1 */
		/* 821D3DF8h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFF);
		/* 821D3DF8h case   29:*/		return 0x821D3DFC;
		  /* 821D3DFCh */ case   30:  		/* li R9, 2 */
		/* 821D3DFCh case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 821D3DFCh case   30:*/		return 0x821D3E00;
		  /* 821D3E00h */ case   31:  		/* andc R11, R26, R11 */
		/* 821D3E00h case   31:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821D3E00h case   31:*/		return 0x821D3E04;
		  /* 821D3E04h */ case   32:  		/* addi R10, R1, 216 */
		/* 821D3E04h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD8);
		/* 821D3E04h case   32:*/		return 0x821D3E08;
		  /* 821D3E08h */ case   33:  		/* cntlzw R11, R11 */
		/* 821D3E08h case   33:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D3E08h case   33:*/		return 0x821D3E0C;
		  /* 821D3E0Ch */ case   34:  		/* lis R7, 0 */
		/* 821D3E0Ch case   34:*/		cpu::op::lis<0>(regs,&regs.R7,0x0);
		/* 821D3E0Ch case   34:*/		return 0x821D3E10;
		  /* 821D3E10h */ case   35:  		/* subfic R11, R11, 31 */
		/* 821D3E10h case   35:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821D3E10h case   35:*/		return 0x821D3E14;
		  /* 821D3E14h */ case   36:  		/* lis R8, -28311 */
		/* 821D3E14h case   36:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF9169);
		/* 821D3E14h case   36:*/		return 0x821D3E18;
		  /* 821D3E18h */ case   37:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D3E18h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D3E18h case   37:*/		return 0x821D3E1C;
		  /* 821D3E1Ch */ case   38:  		/* ori R8, R8, 5192 */
		/* 821D3E1Ch case   38:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1448);
		/* 821D3E1Ch case   38:*/		return 0x821D3E20;
		  /* 821D3E20h */ case   39:  		/* addi R6, R11, 3 */
		/* 821D3E20h case   39:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x3);
		/* 821D3E20h case   39:*/		return 0x821D3E24;
		  /* 821D3E24h */ case   40:  		/* rlwinm R5, R11, 29, 3, 29 */
		/* 821D3E24h case   40:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R5,regs.R11);
		/* 821D3E24h case   40:*/		return 0x821D3E28;
		  /* 821D3E28h */ case   41:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821D3E28h case   41:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821D3E28h case   41:*/		return 0x821D3E2C;
		  /* 821D3E2Ch */ case   42:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D3E2Ch case   42:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D3E2Ch case   42:*/		return 0x821D3E30;
		  /* 821D3E30h */ case   43:  		/* slw R11, R9, R6 */
		/* 821D3E30h case   43:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R6);
		/* 821D3E30h case   43:*/		return 0x821D3E34;
		  /* 821D3E34h */ case   44:  		/* lwzx R10, <#[R5 + R10]> */
		/* 821D3E34h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 821D3E34h case   44:*/		return 0x821D3E38;
		  /* 821D3E38h */ case   45:  		/* addi R11, R11, -1 */
		/* 821D3E38h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D3E38h case   45:*/		return 0x821D3E3C;
		  /* 821D3E3Ch */ case   46:  		/* slw R9, R15, R4 */
		/* 821D3E3Ch case   46:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R15,regs.R4);
		/* 821D3E3Ch case   46:*/		return 0x821D3E40;
		  /* 821D3E40h */ case   47:  		/* and R11, R11, R10 */
		/* 821D3E40h case   47:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D3E40h case   47:*/		return 0x821D3E44;
		  /* 821D3E44h */ case   48:  		/* ori R10, R7, 36262 */
		/* 821D3E44h case   48:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R7,0x8DA6);
		/* 821D3E44h case   48:*/		return 0x821D3E48;
		  /* 821D3E48h */ case   49:  		/* and R11, R11, R9 */
		/* 821D3E48h case   49:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D3E48h case   49:*/		return 0x821D3E4C;
		  /* 821D3E4Ch */ case   50:  		/* rldimi R8, R10, 32, 0 */
		/* 821D3E4Ch case   50:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R8,regs.R10);
		/* 821D3E4Ch case   50:*/		return 0x821D3E50;
		  /* 821D3E50h */ case   51:  		/* srw R21, R11, R4 */
		/* 821D3E50h case   51:*/		cpu::op::srw<0>(regs,&regs.R21,regs.R11,regs.R4);
		/* 821D3E50h case   51:*/		return 0x821D3E54;
		  /* 821D3E54h */ case   52:  		/* rldicl R11, R21, 0, 32 */
		/* 821D3E54h case   52:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R21);
		/* 821D3E54h case   52:*/		return 0x821D3E58;
		  /* 821D3E58h */ case   53:  		/* mr R4, R16 */
		/* 821D3E58h case   53:*/		regs.R4 = regs.R16;
		/* 821D3E58h case   53:*/		return 0x821D3E5C;
		  /* 821D3E5Ch */ case   54:  		/* srd R10, R8, R11 */
		/* 821D3E5Ch case   54:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R8,regs.R11);
		/* 821D3E5Ch case   54:*/		return 0x821D3E60;
		  /* 821D3E60h */ case   55:  		/* srd R10, R10, R11 */
		/* 821D3E60h case   55:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821D3E60h case   55:*/		return 0x821D3E64;
		  /* 821D3E64h */ case   56:  		/* srd R11, R10, R11 */
		/* 821D3E64h case   56:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D3E64h case   56:*/		return 0x821D3E68;
		  /* 821D3E68h */ case   57:  		/* mr R3, R17 */
		/* 821D3E68h case   57:*/		regs.R3 = regs.R17;
		/* 821D3E68h case   57:*/		return 0x821D3E6C;
		  /* 821D3E6Ch */ case   58:  		/* li R29, 0 */
		/* 821D3E6Ch case   58:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D3E6Ch case   58:*/		return 0x821D3E70;
		  /* 821D3E70h */ case   59:  		/* subf R26, R21, R26 */
		/* 821D3E70h case   59:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R21,regs.R26);
		/* 821D3E70h case   59:*/		return 0x821D3E74;
		  /* 821D3E74h */ case   60:  		/* rlwinm R19, R11, 0, 29, 31 */
		/* 821D3E74h case   60:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R19,regs.R11);
		/* 821D3E74h case   60:*/		return 0x821D3E78;
		  /* 821D3E78h */ case   61:  		/* li R23, 0 */
		/* 821D3E78h case   61:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821D3E78h case   61:*/		return 0x821D3E7C;
		  /* 821D3E7Ch */ case   62:  		/* li R20, 0 */
		/* 821D3E7Ch case   62:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821D3E7Ch case   62:*/		return 0x821D3E80;
		  /* 821D3E80h */ case   63:  		/* bl 331040 */
		/* 821D3E80h case   63:*/		regs.LR = 0x821D3E84; return 0x82224BA0;
		/* 821D3E80h case   63:*/		return 0x821D3E84;
		  /* 821D3E84h */ case   64:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821D3E84h case   64:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821D3E84h case   64:*/		return 0x821D3E88;
		  /* 821D3E88h */ case   65:  		/* lwz R9, <#[R3 + 8]> */
		/* 821D3E88h case   65:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D3E88h case   65:*/		return 0x821D3E8C;
		  /* 821D3E8Ch */ case   66:  		/* mr R31, R3 */
		/* 821D3E8Ch case   66:*/		regs.R31 = regs.R3;
		/* 821D3E8Ch case   66:*/		return 0x821D3E90;
		  /* 821D3E90h */ case   67:  		/* addi R11, R11, 36 */
		/* 821D3E90h case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D3E90h case   67:*/		return 0x821D3E94;
		  /* 821D3E94h */ case   68:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821D3E94h case   68:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821D3E94h case   68:*/		return 0x821D3E98;
		  /* 821D3E98h */ case   69:  		/* addi R10, R11, 4 */
		/* 821D3E98h case   69:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D3E98h case   69:*/		return 0x821D3E9C;
		  /* 821D3E9Ch */ case   70:  		/* stw R9, <#[R3 + 8]> */
		/* 821D3E9Ch case   70:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D3E9Ch case   70:*/		return 0x821D3EA0;
		  /* 821D3EA0h */ case   71:  		/* addi R8, R11, -36 */
		/* 821D3EA0h case   71:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D3EA0h case   71:*/		return 0x821D3EA4;
		  /* 821D3EA4h */ case   72:  		/* lwz R9, <#[R25]> */
		/* 821D3EA4h case   72:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821D3EA4h case   72:*/		return 0x821D3EA8;
		  /* 821D3EA8h */ case   73:  		/* li R28, 0 */
		/* 821D3EA8h case   73:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D3EA8h case   73:*/		return 0x821D3EAC;
		  /* 821D3EACh */ case   74:  		/* stw R9, <#[R11 + 4]> */
		/* 821D3EACh case   74:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D3EACh case   74:*/		return 0x821D3EB0;
		  /* 821D3EB0h */ case   75:  		/* li R22, 0 */
		/* 821D3EB0h case   75:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821D3EB0h case   75:*/		return 0x821D3EB4;
		  /* 821D3EB4h */ case   76:  		/* lwz R9, <#[R25]> */
		/* 821D3EB4h case   76:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821D3EB4h case   76:*/		return 0x821D3EB8;
		  /* 821D3EB8h */ case   77:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821D3EB8h case   77:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821D3EB8h case   77:*/		return 0x821D3EBC;
		  /* 821D3EBCh */ case   78:  		/* stw R10, <#[R9 + 36]> */
		/* 821D3EBCh case   78:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000024) );
		/* 821D3EBCh case   78:*/		return 0x821D3EC0;
		  /* 821D3EC0h */ case   79:  		/* li R24, 0 */
		/* 821D3EC0h case   79:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821D3EC0h case   79:*/		return 0x821D3EC4;
		  /* 821D3EC4h */ case   80:  		/* stw R25, <#[R11]> */
		/* 821D3EC4h case   80:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3EC4h case   80:*/		return 0x821D3EC8;
		  /* 821D3EC8h */ case   81:  		/* li R27, 0 */
		/* 821D3EC8h case   81:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821D3EC8h case   81:*/		return 0x821D3ECC;
		  /* 821D3ECCh */ case   82:  		/* li R30, 0 */
		/* 821D3ECCh case   82:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D3ECCh case   82:*/		return 0x821D3ED0;
		  /* 821D3ED0h */ case   83:  		/* stw R8, <#[R25]> */
		/* 821D3ED0h case   83:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R25 + 0x00000000) );
		/* 821D3ED0h case   83:*/		return 0x821D3ED4;
		  /* 821D3ED4h */ case   84:  		/* li R11, 1 */
		/* 821D3ED4h case   84:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D3ED4h case   84:*/		return 0x821D3ED8;
		  /* 821D3ED8h */ case   85:  		/* slw R11, R11, R28 */
		/* 821D3ED8h case   85:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821D3ED8h case   85:*/		return 0x821D3EDC;
		  /* 821D3EDCh */ case   86:  		/* and. R11, R11, R21 */
		/* 821D3EDCh case   86:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821D3EDCh case   86:*/		return 0x821D3EE0;
		  /* 821D3EE0h */ case   87:  		/* bc 12, CR0_EQ, 152 */
		/* 821D3EE0h case   87:*/		if ( regs.CR[0].eq ) { return 0x821D3F78;  }
		/* 821D3EE0h case   87:*/		return 0x821D3EE4;
		  /* 821D3EE4h */ case   88:  		/* lhz R11, <#[R16 + 14]> */
		/* 821D3EE4h case   88:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D3EE4h case   88:*/		return 0x821D3EE8;
		  /* 821D3EE8h */ case   89:  		/* rlwinm R10, R24, 0, 16, 31 */
		/* 821D3EE8h case   89:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R24);
		/* 821D3EE8h case   89:*/		return 0x821D3EEC;
		  /* 821D3EECh */ case   90:  		/* slw R9, R14, R30 */
		/* 821D3EECh case   90:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R14,regs.R30);
		/* 821D3EECh case   90:*/		return 0x821D3EF0;
		  /* 821D3EF0h */ case   91:  		/* slw R8, R14, R27 */
		/* 821D3EF0h case   91:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R14,regs.R27);
		/* 821D3EF0h case   91:*/		return 0x821D3EF4;
		  /* 821D3EF4h */ case   92:  		/* srw R11, R11, R10 */
		/* 821D3EF4h case   92:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D3EF4h case   92:*/		return 0x821D3EF8;
		  /* 821D3EF8h */ case   93:  		/* andc R10, R20, R9 */
		/* 821D3EF8h case   93:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R20,regs.R9);
		/* 821D3EF8h case   93:*/		return 0x821D3EFC;
		  /* 821D3EFCh */ case   94:  		/* slw R9, R29, R30 */
		/* 821D3EFCh case   94:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R30);
		/* 821D3EFCh case   94:*/		return 0x821D3F00;
		  /* 821D3F00h */ case   95:  		/* andc R8, R23, R8 */
		/* 821D3F00h case   95:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821D3F00h case   95:*/		return 0x821D3F04;
		  /* 821D3F04h */ case   96:  		/* slw R7, R28, R27 */
		/* 821D3F04h case   96:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R28,regs.R27);
		/* 821D3F04h case   96:*/		return 0x821D3F08;
		  /* 821D3F08h */ case   97:  		/* rlwinm R6, R11, 0, 28, 31 */
		/* 821D3F08h case   97:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R11);
		/* 821D3F08h case   97:*/		return 0x821D3F0C;
		  /* 821D3F0Ch */ case   98:  		/* li R5, 15 */
		/* 821D3F0Ch case   98:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821D3F0Ch case   98:*/		return 0x821D3F10;
		  /* 821D3F10h */ case   99:  		/* mr R4, R29 */
		/* 821D3F10h case   99:*/		regs.R4 = regs.R29;
		/* 821D3F10h case   99:*/		return 0x821D3F14;
		  /* 821D3F14h */ case  100:  		/* mr R3, R31 */
		/* 821D3F14h case  100:*/		regs.R3 = regs.R31;
		/* 821D3F14h case  100:*/		return 0x821D3F18;
		  /* 821D3F18h */ case  101:  		/* or R20, R10, R9 */
		/* 821D3F18h case  101:*/		cpu::op::or<0>(regs,&regs.R20,regs.R10,regs.R9);
		/* 821D3F18h case  101:*/		return 0x821D3F1C;
		  /* 821D3F1Ch */ case  102:  		/* or R23, R8, R7 */
		/* 821D3F1Ch case  102:*/		cpu::op::or<0>(regs,&regs.R23,regs.R8,regs.R7);
		/* 821D3F1Ch case  102:*/		return 0x821D3F20;
		  /* 821D3F20h */ case  103:  		/* bl -93856 */
		/* 821D3F20h case  103:*/		regs.LR = 0x821D3F24; return 0x821BD080;
		/* 821D3F20h case  103:*/		return 0x821D3F24;
		  /* 821D3F24h */ case  104:  		/* lwz R11, <#[R16 + 16]> */
		/* 821D3F24h case  104:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000010) );
		/* 821D3F24h case  104:*/		return 0x821D3F28;
		  /* 821D3F28h */ case  105:  		/* cmplwi CR6, R11, 0 */
		/* 821D3F28h case  105:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3F28h case  105:*/		return 0x821D3F2C;
		  /* 821D3F2Ch */ case  106:  		/* bc 12, CR6_EQ, 68 */
		/* 821D3F2Ch case  106:*/		if ( regs.CR[6].eq ) { return 0x821D3F70;  }
		/* 821D3F2Ch case  106:*/		return 0x821D3F30;
		  /* 821D3F30h */ case  107:  		/* lwz R10, <#[R11]> */
		/* 821D3F30h case  107:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D3F30h case  107:*/		return 0x821D3F34;
		  /* 821D3F34h */ case  108:  		/* cmpwi CR6, R10, 1 */
		/* 821D3F34h case  108:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821D3F34h case  108:*/		return 0x821D3F38;
		  /* 821D3F38h */ case  109:  		/* bc 12, CR6_EQ, 16 */
		/* 821D3F38h case  109:*/		if ( regs.CR[6].eq ) { return 0x821D3F48;  }
		/* 821D3F38h case  109:*/		return 0x821D3F3C;
		  /* 821D3F3Ch */ case  110:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D3F3Ch case  110:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D3F3Ch case  110:*/		return 0x821D3F40;
		  /* 821D3F40h */ case  111:  		/* cmplwi CR6, R11, 0 */
		/* 821D3F40h case  111:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3F40h case  111:*/		return 0x821D3F44;
		  /* 821D3F44h */ case  112:  		/* bc 4, CR6_EQ, -20 */
		/* 821D3F44h case  112:*/		if ( !regs.CR[6].eq ) { return 0x821D3F30;  }
		/* 821D3F44h case  112:*/		return 0x821D3F48;
	}
	return 0x821D3F48;
} // Block from 821D3D84h-821D3F48h (113 instructions)

//////////////////////////////////////////////////////
// Block at 821D3F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3F48);
		  /* 821D3F48h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D3F48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3F48h case    0:*/		return 0x821D3F4C;
		  /* 821D3F4Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821D3F4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D3F70;  }
		/* 821D3F4Ch case    1:*/		return 0x821D3F50;
		  /* 821D3F50h */ case    2:  		/* add R10, R22, R11 */
		/* 821D3F50h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R22,regs.R11);
		/* 821D3F50h case    2:*/		return 0x821D3F54;
		  /* 821D3F54h */ case    3:  		/* add R11, R22, R11 */
		/* 821D3F54h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 821D3F54h case    3:*/		return 0x821D3F58;
		  /* 821D3F58h */ case    4:  		/* mr R7, R17 */
		/* 821D3F58h case    4:*/		regs.R7 = regs.R17;
		/* 821D3F58h case    4:*/		return 0x821D3F5C;
		  /* 821D3F5Ch */ case    5:  		/* mr R4, R29 */
		/* 821D3F5Ch case    5:*/		regs.R4 = regs.R29;
		/* 821D3F5Ch case    5:*/		return 0x821D3F60;
		  /* 821D3F60h */ case    6:  		/* mr R3, R31 */
		/* 821D3F60h case    6:*/		regs.R3 = regs.R31;
		/* 821D3F60h case    6:*/		return 0x821D3F64;
		  /* 821D3F64h */ case    7:  		/* lfd FR2, <#[R10 + 40]> */
		/* 821D3F64h case    7:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R10 + 0x00000028) );
		/* 821D3F64h case    7:*/		return 0x821D3F68;
		  /* 821D3F68h */ case    8:  		/* lfd FR1, <#[R11 + 8]> */
		/* 821D3F68h case    8:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000008) );
		/* 821D3F68h case    8:*/		return 0x821D3F6C;
		  /* 821D3F6Ch */ case    9:  		/* bl 322484 */
		/* 821D3F6Ch case    9:*/		regs.LR = 0x821D3F70; return 0x82222B20;
		/* 821D3F6Ch case    9:*/		return 0x821D3F70;
	}
	return 0x821D3F70;
} // Block from 821D3F48h-821D3F70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D3F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3F70);
		  /* 821D3F70h */ case    0:  		/* addi R29, R29, 1 */
		/* 821D3F70h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D3F70h case    0:*/		return 0x821D3F74;
		  /* 821D3F74h */ case    1:  		/* addi R27, R27, 2 */
		/* 821D3F74h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 821D3F74h case    1:*/		return 0x821D3F78;
	}
	return 0x821D3F78;
} // Block from 821D3F70h-821D3F78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D3F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3F78);
		  /* 821D3F78h */ case    0:  		/* addi R30, R30, 2 */
		/* 821D3F78h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821D3F78h case    0:*/		return 0x821D3F7C;
		  /* 821D3F7Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 821D3F7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821D3F7Ch case    1:*/		return 0x821D3F80;
		  /* 821D3F80h */ case    2:  		/* addi R24, R24, 4 */
		/* 821D3F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821D3F80h case    2:*/		return 0x821D3F84;
		  /* 821D3F84h */ case    3:  		/* addi R22, R22, 8 */
		/* 821D3F84h case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x8);
		/* 821D3F84h case    3:*/		return 0x821D3F88;
		  /* 821D3F88h */ case    4:  		/* cmplwi CR6, R30, 8 */
		/* 821D3F88h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000008);
		/* 821D3F88h case    4:*/		return 0x821D3F8C;
		  /* 821D3F8Ch */ case    5:  		/* bc 12, CR6_LT, -184 */
		/* 821D3F8Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821D3ED4;  }
		/* 821D3F8Ch case    5:*/		return 0x821D3F90;
		  /* 821D3F90h */ case    6:  		/* li R30, 0 */
		/* 821D3F90h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D3F90h case    6:*/		return 0x821D3F94;
		  /* 821D3F94h */ case    7:  		/* addi R29, R18, -4 */
		/* 821D3F94h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R18,0xFFFFFFFC);
		/* 821D3F94h case    7:*/		return 0x821D3F98;
		  /* 821D3F98h */ case    8:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D3F98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D3F98h case    8:*/		return 0x821D3F9C;
		  /* 821D3F9Ch */ case    9:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821D3F9Ch case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821D3F9Ch case    9:*/		return 0x821D3FA0;
		  /* 821D3FA0h */ case   10:  		/* cmplw CR6, R30, R11 */
		/* 821D3FA0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D3FA0h case   10:*/		return 0x821D3FA4;
		  /* 821D3FA4h */ case   11:  		/* bc 4, CR6_LT, 68 */
		/* 821D3FA4h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821D3FE8;  }
		/* 821D3FA4h case   11:*/		return 0x821D3FA8;
		  /* 821D3FA8h */ case   12:  		/* lwzu R4, <#[R29 + 4]> */
		/* 821D3FA8h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821D3FA8h case   12:*/		return 0x821D3FAC;
		  /* 821D3FACh */ case   13:  		/* mr R3, R17 */
		/* 821D3FACh case   13:*/		regs.R3 = regs.R17;
		/* 821D3FACh case   13:*/		return 0x821D3FB0;
		  /* 821D3FB0h */ case   14:  		/* lwz R5, <#[R4 + 12]> */
		/* 821D3FB0h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821D3FB0h case   14:*/		return 0x821D3FB4;
		  /* 821D3FB4h */ case   15:  		/* bl -405188 */
		/* 821D3FB4h case   15:*/		regs.LR = 0x821D3FB8; return 0x821710F0;
		/* 821D3FB4h case   15:*/		return 0x821D3FB8;
		  /* 821D3FB8h */ case   16:  		/* mr R4, R23 */
		/* 821D3FB8h case   16:*/		regs.R4 = regs.R23;
		/* 821D3FB8h case   16:*/		return 0x821D3FBC;
		  /* 821D3FBCh */ case   17:  		/* mr R28, R3 */
		/* 821D3FBCh case   17:*/		regs.R28 = regs.R3;
		/* 821D3FBCh case   17:*/		return 0x821D3FC0;
		  /* 821D3FC0h */ case   18:  		/* bl -253392 */
		/* 821D3FC0h case   18:*/		regs.LR = 0x821D3FC4; return 0x821961F0;
		/* 821D3FC0h case   18:*/		return 0x821D3FC4;
		  /* 821D3FC4h */ case   19:  		/* lwz R11, <#[R28]> */
		/* 821D3FC4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D3FC4h case   19:*/		return 0x821D3FC8;
		  /* 821D3FC8h */ case   20:  		/* mr R4, R30 */
		/* 821D3FC8h case   20:*/		regs.R4 = regs.R30;
		/* 821D3FC8h case   20:*/		return 0x821D3FCC;
		  /* 821D3FCCh */ case   21:  		/* rlwimi R11, R19, 25, 4, 6 */
		/* 821D3FCCh case   21:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R19);
		/* 821D3FCCh case   21:*/		return 0x821D3FD0;
		  /* 821D3FD0h */ case   22:  		/* mr R3, R31 */
		/* 821D3FD0h case   22:*/		regs.R3 = regs.R31;
		/* 821D3FD0h case   22:*/		return 0x821D3FD4;
		  /* 821D3FD4h */ case   23:  		/* stw R11, <#[R28]> */
		/* 821D3FD4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D3FD4h case   23:*/		return 0x821D3FD8;
		  /* 821D3FD8h */ case   24:  		/* mr R5, R28 */
		/* 821D3FD8h case   24:*/		regs.R5 = regs.R28;
		/* 821D3FD8h case   24:*/		return 0x821D3FDC;
		  /* 821D3FDCh */ case   25:  		/* bl -407852 */
		/* 821D3FDCh case   25:*/		regs.LR = 0x821D3FE0; return 0x821706B0;
		/* 821D3FDCh case   25:*/		return 0x821D3FE0;
		  /* 821D3FE0h */ case   26:  		/* addi R30, R30, 1 */
		/* 821D3FE0h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821D3FE0h case   26:*/		return 0x821D3FE4;
		  /* 821D3FE4h */ case   27:  		/* b -76 */
		/* 821D3FE4h case   27:*/		return 0x821D3F98;
		/* 821D3FE4h case   27:*/		return 0x821D3FE8;
	}
	return 0x821D3FE8;
} // Block from 821D3F78h-821D3FE8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D3FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D3FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D3FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D3FE8);
		  /* 821D3FE8h */ case    0:  		/* addi R29, R16, 4 */
		/* 821D3FE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R16,0x4);
		/* 821D3FE8h case    0:*/		return 0x821D3FEC;
		  /* 821D3FECh */ case    1:  		/* lwz R30, <#[R29]> */
		/* 821D3FECh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821D3FECh case    1:*/		return 0x821D3FF0;
		  /* 821D3FF0h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821D3FF0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D3FF0h case    2:*/		return 0x821D3FF4;
		  /* 821D3FF4h */ case    3:  		/* bc 12, CR6_EQ, 132 */
		/* 821D3FF4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D4078;  }
		/* 821D3FF4h case    3:*/		return 0x821D3FF8;
		  /* 821D3FF8h */ case    4:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D3FF8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D3FF8h case    4:*/		return 0x821D3FFC;
		  /* 821D3FFCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D3FFCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D3FFCh case    5:*/		return 0x821D4000;
		  /* 821D4000h */ case    6:  		/* bc 12, CR6_EQ, 100 */
		/* 821D4000h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D4064;  }
		/* 821D4000h case    6:*/		return 0x821D4004;
		  /* 821D4004h */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821D4004h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D4004h case    7:*/		return 0x821D4008;
		  /* 821D4008h */ case    8:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D4008h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D4008h case    8:*/		return 0x821D400C;
		  /* 821D400Ch */ case    9:  		/* bc 12, CR0_EQ, 88 */
		/* 821D400Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821D4064;  }
		/* 821D400Ch case    9:*/		return 0x821D4010;
		  /* 821D4010h */ case   10:  		/* mr R3, R30 */
		/* 821D4010h case   10:*/		regs.R3 = regs.R30;
		/* 821D4010h case   10:*/		return 0x821D4014;
		  /* 821D4014h */ case   11:  		/* bl -458196 */
		/* 821D4014h case   11:*/		regs.LR = 0x821D4018; return 0x82164240;
		/* 821D4014h case   11:*/		return 0x821D4018;
		  /* 821D4018h */ case   12:  		/* and. R11, R3, R21 */
		/* 821D4018h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R21);
		/* 821D4018h case   12:*/		return 0x821D401C;
		  /* 821D401Ch */ case   13:  		/* bc 12, CR0_EQ, 72 */
		/* 821D401Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821D4064;  }
		/* 821D401Ch case   13:*/		return 0x821D4020;
		  /* 821D4020h */ case   14:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D4020h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D4020h case   14:*/		return 0x821D4024;
		  /* 821D4024h */ case   15:  		/* addi R11, R11, 4 */
		/* 821D4024h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D4024h case   15:*/		return 0x821D4028;
		  /* 821D4028h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 821D4028h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D4028h case   16:*/		return 0x821D402C;
		  /* 821D402Ch */ case   17:  		/* b 12 */
		/* 821D402Ch case   17:*/		return 0x821D4038;
		/* 821D402Ch case   17:*/		return 0x821D4030;
		  /* 821D4030h */ case   18:  		/* addi R11, R10, 8 */
		/* 821D4030h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D4030h case   18:*/		return 0x821D4034;
		  /* 821D4034h */ case   19:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D4034h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D4034h case   19:*/		return 0x821D4038;
	}
	return 0x821D4038;
} // Block from 821D3FE8h-821D4038h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D4038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4038);
		  /* 821D4038h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 821D4038h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821D4038h case    0:*/		return 0x821D403C;
		  /* 821D403Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D403Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D4030;  }
		/* 821D403Ch case    1:*/		return 0x821D4040;
		  /* 821D4040h */ case    2:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D4040h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D4040h case    2:*/		return 0x821D4044;
		  /* 821D4044h */ case    3:  		/* mr R4, R20 */
		/* 821D4044h case    3:*/		regs.R4 = regs.R20;
		/* 821D4044h case    3:*/		return 0x821D4048;
		  /* 821D4048h */ case    4:  		/* mr R3, R30 */
		/* 821D4048h case    4:*/		regs.R3 = regs.R30;
		/* 821D4048h case    4:*/		return 0x821D404C;
		  /* 821D404Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821D404Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D404Ch case    5:*/		return 0x821D4050;
		  /* 821D4050h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 821D4050h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821D4050h case    6:*/		return 0x821D4054;
		  /* 821D4054h */ case    7:  		/* stw R11, <#[R30 + 8]> */
		/* 821D4054h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D4054h case    7:*/		return 0x821D4058;
		  /* 821D4058h */ case    8:  		/* stw R30, <#[R31 + 4]> */
		/* 821D4058h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 821D4058h case    8:*/		return 0x821D405C;
		  /* 821D405Ch */ case    9:  		/* stw R31, <#[R30 + 12]> */
		/* 821D405Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D405Ch case    9:*/		return 0x821D4060;
		  /* 821D4060h */ case   10:  		/* bl -406264 */
		/* 821D4060h case   10:*/		regs.LR = 0x821D4064; return 0x82170D68;
		/* 821D4060h case   10:*/		return 0x821D4064;
	}
	return 0x821D4064;
} // Block from 821D4038h-821D4064h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D4064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4064);
		  /* 821D4064h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821D4064h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D4064h case    0:*/		return 0x821D4068;
		  /* 821D4068h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821D4068h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821D4068h case    1:*/		return 0x821D406C;
		  /* 821D406Ch */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 821D406Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D3FEC;  }
		/* 821D406Ch case    2:*/		return 0x821D4070;
		  /* 821D4070h */ case    3:  		/* addi R29, R30, 8 */
		/* 821D4070h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821D4070h case    3:*/		return 0x821D4074;
		  /* 821D4074h */ case    4:  		/* b -136 */
		/* 821D4074h case    4:*/		return 0x821D3FEC;
		/* 821D4074h case    4:*/		return 0x821D4078;
	}
	return 0x821D4078;
} // Block from 821D4064h-821D4078h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D4078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4078);
		  /* 821D4078h */ case    0:  		/* lwz R30, <#[R1 + 112]> */
		/* 821D4078h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 821D4078h case    0:*/		return 0x821D407C;
		  /* 821D407Ch */ case    1:  		/* mr R4, R31 */
		/* 821D407Ch case    1:*/		regs.R4 = regs.R31;
		/* 821D407Ch case    1:*/		return 0x821D4080;
		  /* 821D4080h */ case    2:  		/* mr R3, R17 */
		/* 821D4080h case    2:*/		regs.R3 = regs.R17;
		/* 821D4080h case    2:*/		return 0x821D4084;
		  /* 821D4084h */ case    3:  		/* mr R5, R30 */
		/* 821D4084h case    3:*/		regs.R5 = regs.R30;
		/* 821D4084h case    3:*/		return 0x821D4088;
		  /* 821D4088h */ case    4:  		/* bl -34496 */
		/* 821D4088h case    4:*/		regs.LR = 0x821D408C; return 0x821CB9C8;
		/* 821D4088h case    4:*/		return 0x821D408C;
		  /* 821D408Ch */ case    5:  		/* mr R5, R30 */
		/* 821D408Ch case    5:*/		regs.R5 = regs.R30;
		/* 821D408Ch case    5:*/		return 0x821D4090;
		  /* 821D4090h */ case    6:  		/* mr R4, R16 */
		/* 821D4090h case    6:*/		regs.R4 = regs.R16;
		/* 821D4090h case    6:*/		return 0x821D4094;
		  /* 821D4094h */ case    7:  		/* mr R3, R17 */
		/* 821D4094h case    7:*/		regs.R3 = regs.R17;
		/* 821D4094h case    7:*/		return 0x821D4098;
		  /* 821D4098h */ case    8:  		/* bl -34512 */
		/* 821D4098h case    8:*/		regs.LR = 0x821D409C; return 0x821CB9C8;
		/* 821D4098h case    8:*/		return 0x821D409C;
		  /* 821D409Ch */ case    9:  		/* cmplwi CR6, R26, 0 */
		/* 821D409Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D409Ch case    9:*/		return 0x821D40A0;
		  /* 821D40A0h */ case   10:  		/* bc 4, CR6_EQ, -680 */
		/* 821D40A0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D3DF8;  }
		/* 821D40A0h case   10:*/		return 0x821D40A4;
	}
	return 0x821D40A4;
} // Block from 821D4078h-821D40A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D40A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D40A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D40A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D40A4);
		  /* 821D40A4h */ case    0:  		/* lwz R29, <#[R16]> */
		/* 821D40A4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R16 + 0x00000000) );
		/* 821D40A4h case    0:*/		return 0x821D40A8;
		  /* 821D40A8h */ case    1:  		/* lwz R24, <#[R1 + 1908]> */
		/* 821D40A8h case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000774) );
		/* 821D40A8h case    1:*/		return 0x821D40AC;
		  /* 821D40ACh */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821D40ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D40ACh case    2:*/		return 0x821D40B0;
		  /* 821D40B0h */ case    3:  		/* bc 12, CR6_EQ, 208 */
		/* 821D40B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D4180;  }
		/* 821D40B0h case    3:*/		return 0x821D40B4;
		  /* 821D40B4h */ case    4:  		/* lwz R11, <#[R29]> */
		/* 821D40B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D40B4h case    4:*/		return 0x821D40B8;
		  /* 821D40B8h */ case    5:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821D40B8h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821D40B8h case    5:*/		return 0x821D40BC;
		  /* 821D40BCh */ case    6:  		/* bc 12, CR0_EQ, 188 */
		/* 821D40BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821D4178;  }
		/* 821D40BCh case    6:*/		return 0x821D40C0;
		  /* 821D40C0h */ case    7:  		/* lwz R4, <#[R29 + 12]> */
		/* 821D40C0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D40C0h case    7:*/		return 0x821D40C4;
		  /* 821D40C4h */ case    8:  		/* lhz R10, <#[R4 + 14]> */
		/* 821D40C4h case    8:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000E) );
		/* 821D40C4h case    8:*/		return 0x821D40C8;
		  /* 821D40C8h */ case    9:  		/* rlwinm R9, R10, 28, 4, 31 */
		/* 821D40C8h case    9:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R9,regs.R10);
		/* 821D40C8h case    9:*/		return 0x821D40CC;
		  /* 821D40CCh */ case   10:  		/* rlwinm R7, R10, 24, 8, 31 */
		/* 821D40CCh case   10:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R7,regs.R10);
		/* 821D40CCh case   10:*/		return 0x821D40D0;
		  /* 821D40D0h */ case   11:  		/* rlwinm R8, R10, 20, 12, 31 */
		/* 821D40D0h case   11:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R8,regs.R10);
		/* 821D40D0h case   11:*/		return 0x821D40D4;
		  /* 821D40D4h */ case   12:  		/* or R6, R10, R9 */
		/* 821D40D4h case   12:*/		cpu::op::or<0>(regs,&regs.R6,regs.R10,regs.R9);
		/* 821D40D4h case   12:*/		return 0x821D40D8;
		  /* 821D40D8h */ case   13:  		/* and R8, R8, R7 */
		/* 821D40D8h case   13:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821D40D8h case   13:*/		return 0x821D40DC;
		  /* 821D40DCh */ case   14:  		/* rlwinm R7, R6, 24, 8, 31 */
		/* 821D40DCh case   14:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R7,regs.R6);
		/* 821D40DCh case   14:*/		return 0x821D40E0;
		  /* 821D40E0h */ case   15:  		/* and R8, R8, R10 */
		/* 821D40E0h case   15:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 821D40E0h case   15:*/		return 0x821D40E4;
		  /* 821D40E4h */ case   16:  		/* or R10, R7, R10 */
		/* 821D40E4h case   16:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821D40E4h case   16:*/		return 0x821D40E8;
		  /* 821D40E8h */ case   17:  		/* and R8, R8, R9 */
		/* 821D40E8h case   17:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821D40E8h case   17:*/		return 0x821D40EC;
		  /* 821D40ECh */ case   18:  		/* or R10, R10, R9 */
		/* 821D40ECh case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821D40ECh case   18:*/		return 0x821D40F0;
		  /* 821D40F0h */ case   19:  		/* rlwinm R30, R8, 0, 30, 31 */
		/* 821D40F0h case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R30,regs.R8);
		/* 821D40F0h case   19:*/		return 0x821D40F4;
		  /* 821D40F4h */ case   20:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821D40F4h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821D40F4h case   20:*/		return 0x821D40F8;
		  /* 821D40F8h */ case   21:  		/* cmplw CR6, R10, R30 */
		/* 821D40F8h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821D40F8h case   21:*/		return 0x821D40FC;
		  /* 821D40FCh */ case   22:  		/* bc 4, CR6_EQ, 124 */
		/* 821D40FCh case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D4178;  }
		/* 821D40FCh case   22:*/		return 0x821D4100;
		  /* 821D4100h */ case   23:  		/* rlwinm R31, R11, 0, 27, 31 */
		/* 821D4100h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R11);
		/* 821D4100h case   23:*/		return 0x821D4104;
		  /* 821D4104h */ case   24:  		/* cmplwi CR6, R30, 3 */
		/* 821D4104h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 821D4104h case   24:*/		return 0x821D4108;
		  /* 821D4108h */ case   25:  		/* mr R28, R31 */
		/* 821D4108h case   25:*/		regs.R28 = regs.R31;
		/* 821D4108h case   25:*/		return 0x821D410C;
		  /* 821D410Ch */ case   26:  		/* bc 4, CR6_EQ, 8 */
		/* 821D410Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x821D4114;  }
		/* 821D410Ch case   26:*/		return 0x821D4110;
		  /* 821D4110h */ case   27:  		/* rlwinm R31, R31, 0, 0, 30 */
		/* 821D4110h case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R31,regs.R31);
		/* 821D4110h case   27:*/		return 0x821D4114;
	}
	return 0x821D4114;
} // Block from 821D40A4h-821D4114h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D4114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4114);
		  /* 821D4114h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D4114h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D4114h case    0:*/		return 0x821D4118;
		  /* 821D4118h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821D4118h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D4130;  }
		/* 821D4118h case    1:*/		return 0x821D411C;
		  /* 821D411Ch */ case    2:  		/* mr R3, R24 */
		/* 821D411Ch case    2:*/		regs.R3 = regs.R24;
		/* 821D411Ch case    2:*/		return 0x821D4120;
		  /* 821D4120h */ case    3:  		/* bl -90624 */
		/* 821D4120h case    3:*/		regs.LR = 0x821D4124; return 0x821BDF20;
		/* 821D4120h case    3:*/		return 0x821D4124;
		  /* 821D4124h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4124h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4124h case    4:*/		return 0x821D4128;
		  /* 821D4128h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821D4128h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D4130;  }
		/* 821D4128h case    5:*/		return 0x821D412C;
		  /* 821D412Ch */ case    6:  		/* addi R31, R31, -1 */
		/* 821D412Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821D412Ch case    6:*/		return 0x821D4130;
	}
	return 0x821D4130;
} // Block from 821D4114h-821D4130h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D4130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4130);
		  /* 821D4130h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D4130h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D4130h case    0:*/		return 0x821D4134;
		  /* 821D4134h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D4134h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D4144;  }
		/* 821D4134h case    1:*/		return 0x821D4138;
		  /* 821D4138h */ case    2:  		/* rlwinm. R11, R31, 0, 30, 30 */
		/* 821D4138h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R31);
		/* 821D4138h case    2:*/		return 0x821D413C;
		  /* 821D413Ch */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821D413Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821D4144;  }
		/* 821D413Ch case    3:*/		return 0x821D4140;
		  /* 821D4140h */ case    4:  		/* addi R31, R31, -2 */
		/* 821D4140h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFE);
		/* 821D4140h case    4:*/		return 0x821D4144;
	}
	return 0x821D4144;
} // Block from 821D4130h-821D4144h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D4144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4144);
		  /* 821D4144h */ case    0:  		/* rlwinm. R11, R30, 0, 30, 30 */
		/* 821D4144h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R30);
		/* 821D4144h case    0:*/		return 0x821D4148;
		  /* 821D4148h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D4148h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D4158;  }
		/* 821D4148h case    1:*/		return 0x821D414C;
		  /* 821D414Ch */ case    2:  		/* rlwinm. R11, R31, 0, 30, 30 */
		/* 821D414Ch case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R31);
		/* 821D414Ch case    2:*/		return 0x821D4150;
		  /* 821D4150h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821D4150h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D4158;  }
		/* 821D4150h case    3:*/		return 0x821D4154;
		  /* 821D4154h */ case    4:  		/* addi R31, R31, -2 */
		/* 821D4154h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFE);
		/* 821D4154h case    4:*/		return 0x821D4158;
	}
	return 0x821D4158;
} // Block from 821D4144h-821D4158h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D4158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4158);
		  /* 821D4158h */ case    0:  		/* cmplwi CR6, R30, 3 */
		/* 821D4158h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000003);
		/* 821D4158h case    0:*/		return 0x821D415C;
		  /* 821D415Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821D415Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D4164;  }
		/* 821D415Ch case    1:*/		return 0x821D4160;
		  /* 821D4160h */ case    2:  		/* rlwinm R31, R31, 0, 30, 28 */
		/* 821D4160h case    2:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R31,regs.R31);
		/* 821D4160h case    2:*/		return 0x821D4164;
	}
	return 0x821D4164;
} // Block from 821D4158h-821D4164h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D4164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4164);
		  /* 821D4164h */ case    0:  		/* cmplw CR6, R31, R28 */
		/* 821D4164h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 821D4164h case    0:*/		return 0x821D4168;
		  /* 821D4168h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821D4168h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D4178;  }
		/* 821D4168h case    1:*/		return 0x821D416C;
		  /* 821D416Ch */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821D416Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D416Ch case    2:*/		return 0x821D4170;
		  /* 821D4170h */ case    3:  		/* rlwimi R31, R11, 0, 0, 26 */
		/* 821D4170h case    3:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R31,regs.R11);
		/* 821D4170h case    3:*/		return 0x821D4174;
		  /* 821D4174h */ case    4:  		/* stw R31, <#[R29]> */
		/* 821D4174h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821D4174h case    4:*/		return 0x821D4178;
	}
	return 0x821D4178;
} // Block from 821D4164h-821D4178h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D4178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4178);
		  /* 821D4178h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821D4178h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821D4178h case    0:*/		return 0x821D417C;
		  /* 821D417Ch */ case    1:  		/* b -208 */
		/* 821D417Ch case    1:*/		return 0x821D40AC;
		/* 821D417Ch case    1:*/		return 0x821D4180;
	}
	return 0x821D4180;
} // Block from 821D4178h-821D4180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4180);
		  /* 821D4180h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D4180h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D4180h case    0:*/		return 0x821D4184;
		  /* 821D4184h */ case    1:  		/* lwz R19, <#[R18]> */
		/* 821D4184h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R18 + 0x00000000) );
		/* 821D4184h case    1:*/		return 0x821D4188;
		  /* 821D4188h */ case    2:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821D4188h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821D4188h case    2:*/		return 0x821D418C;
		  /* 821D418Ch */ case    3:  		/* lwz R18, <#[R1 + 160]> */
		/* 821D418Ch case    3:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D418Ch case    3:*/		return 0x821D4190;
		  /* 821D4190h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 821D4190h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D4190h case    4:*/		return 0x821D4194;
		  /* 821D4194h */ case    5:  		/* bc 4, CR6_EQ, 2228 */
		/* 821D4194h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D4A48;  }
		/* 821D4194h case    5:*/		return 0x821D4198;
		  /* 821D4198h */ case    6:  		/* li R27, 0 */
		/* 821D4198h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821D4198h case    6:*/		return 0x821D419C;
		  /* 821D419Ch */ case    7:  		/* cmplwi CR6, R18, 0 */
		/* 821D419Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821D419Ch case    7:*/		return 0x821D41A0;
		  /* 821D41A0h */ case    8:  		/* bc 12, CR6_EQ, 2056 */
		/* 821D41A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D49A8;  }
		/* 821D41A0h case    8:*/		return 0x821D41A4;
		  /* 821D41A4h */ case    9:  		/* lwz R25, <#[R1 + 1924]> */
		/* 821D41A4h case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000784) );
		/* 821D41A4h case    9:*/		return 0x821D41A8;
		  /* 821D41A8h */ case   10:  		/* lwz R26, <#[R1 + 112]> */
		/* 821D41A8h case   10:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 821D41A8h case   10:*/		return 0x821D41AC;
		  /* 821D41ACh */ case   11:  		/* li R10, 0 */
		/* 821D41ACh case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D41ACh case   11:*/		return 0x821D41B0;
		  /* 821D41B0h */ case   12:  		/* mr R9, R16 */
		/* 821D41B0h case   12:*/		regs.R9 = regs.R16;
		/* 821D41B0h case   12:*/		return 0x821D41B4;
		  /* 821D41B4h */ case   13:  		/* li R8, 0 */
		/* 821D41B4h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D41B4h case   13:*/		return 0x821D41B8;
		  /* 821D41B8h */ case   14:  		/* addi R7, R1, 244 */
		/* 821D41B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF4);
		/* 821D41B8h case   14:*/		return 0x821D41BC;
		  /* 821D41BCh */ case   15:  		/* addi R6, R1, 184 */
		/* 821D41BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB8);
		/* 821D41BCh case   15:*/		return 0x821D41C0;
		  /* 821D41C0h */ case   16:  		/* addi R5, R1, 188 */
		/* 821D41C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xBC);
		/* 821D41C0h case   16:*/		return 0x821D41C4;
		  /* 821D41C4h */ case   17:  		/* mr R4, R27 */
		/* 821D41C4h case   17:*/		regs.R4 = regs.R27;
		/* 821D41C4h case   17:*/		return 0x821D41C8;
		  /* 821D41C8h */ case   18:  		/* mr R3, R19 */
		/* 821D41C8h case   18:*/		regs.R3 = regs.R19;
		/* 821D41C8h case   18:*/		return 0x821D41CC;
		  /* 821D41CCh */ case   19:  		/* bl 324356 */
		/* 821D41CCh case   19:*/		regs.LR = 0x821D41D0; return 0x822234D0;
		/* 821D41CCh case   19:*/		return 0x821D41D0;
		  /* 821D41D0h */ case   20:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D41D0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D41D0h case   20:*/		return 0x821D41D4;
		  /* 821D41D4h */ case   21:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D41D4h case   21:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D41D4h case   21:*/		return 0x821D41D8;
		  /* 821D41D8h */ case   22:  		/* cmpwi CR6, R11, 9 */
		/* 821D41D8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821D41D8h case   22:*/		return 0x821D41DC;
		  /* 821D41DCh */ case   23:  		/* bc 12, CR6_EQ, 1032 */
		/* 821D41DCh case   23:*/		if ( regs.CR[6].eq ) { return 0x821D45E4;  }
		/* 821D41DCh case   23:*/		return 0x821D41E0;
		  /* 821D41E0h */ case   24:  		/* cmpwi CR6, R11, 10 */
		/* 821D41E0h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 821D41E0h case   24:*/		return 0x821D41E4;
		  /* 821D41E4h */ case   25:  		/* bc 12, CR6_EQ, 112 */
		/* 821D41E4h case   25:*/		if ( regs.CR[6].eq ) { return 0x821D4254;  }
		/* 821D41E4h case   25:*/		return 0x821D41E8;
		  /* 821D41E8h */ case   26:  		/* cmpwi CR6, R11, 11 */
		/* 821D41E8h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000B);
		/* 821D41E8h case   26:*/		return 0x821D41EC;
		  /* 821D41ECh */ case   27:  		/* bc 4, CR6_EQ, 1968 */
		/* 821D41ECh case   27:*/		if ( !regs.CR[6].eq ) { return 0x821D499C;  }
		/* 821D41ECh case   27:*/		return 0x821D41F0;
		  /* 821D41F0h */ case   28:  		/* addi R6, R1, 1096 */
		/* 821D41F0h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x448);
		/* 821D41F0h case   28:*/		return 0x821D41F4;
		  /* 821D41F4h */ case   29:  		/* addi R5, R1, 1464 */
		/* 821D41F4h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5B8);
		/* 821D41F4h case   29:*/		return 0x821D41F8;
		  /* 821D41F8h */ case   30:  		/* mr R4, R27 */
		/* 821D41F8h case   30:*/		regs.R4 = regs.R27;
		/* 821D41F8h case   30:*/		return 0x821D41FC;
		  /* 821D41FCh */ case   31:  		/* mr R3, R19 */
		/* 821D41FCh case   31:*/		regs.R3 = regs.R19;
		/* 821D41FCh case   31:*/		return 0x821D4200;
		  /* 821D4200h */ case   32:  		/* bl 322344 */
		/* 821D4200h case   32:*/		regs.LR = 0x821D4204; return 0x82222D28;
		/* 821D4200h case   32:*/		return 0x821D4204;
		  /* 821D4204h */ case   33:  		/* lfd FR1, <#[R1 + 1464]> */
		/* 821D4204h case   33:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000005B8) );
		/* 821D4204h case   33:*/		return 0x821D4208;
		  /* 821D4208h */ case   34:  		/* bl -95016 */
		/* 821D4208h case   34:*/		regs.LR = 0x821D420C; return 0x821BCEE0;
		/* 821D4208h case   34:*/		return 0x821D420C;
		  /* 821D420Ch */ case   35:  		/* fmr FR31, FR1 */
		/* 821D420Ch case   35:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D420Ch case   35:*/		return 0x821D4210;
		  /* 821D4210h */ case   36:  		/* lfd FR1, <#[R1 + 1096]> */
		/* 821D4210h case   36:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000448) );
		/* 821D4210h case   36:*/		return 0x821D4214;
		  /* 821D4214h */ case   37:  		/* bl -95028 */
		/* 821D4214h case   37:*/		regs.LR = 0x821D4218; return 0x821BCEE0;
		/* 821D4214h case   37:*/		return 0x821D4218;
		  /* 821D4218h */ case   38:  		/* fmr FR30, FR1 */
		/* 821D4218h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 821D4218h case   38:*/		return 0x821D421C;
		  /* 821D421Ch */ case   39:  		/* fcmpu CR6, FR31, FR1 */
		/* 821D421Ch case   39:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR1);
		/* 821D421Ch case   39:*/		return 0x821D4220;
		  /* 821D4220h */ case   40:  		/* bc 4, CR6_EQ, 688 */
		/* 821D4220h case   40:*/		if ( !regs.CR[6].eq ) { return 0x821D44D0;  }
		/* 821D4220h case   40:*/		return 0x821D4224;
		  /* 821D4224h */ case   41:  		/* frsp FR1, FR31 */
		/* 821D4224h case   41:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR31);
		/* 821D4224h case   41:*/		return 0x821D4228;
		  /* 821D4228h */ case   42:  		/* fcmpu CR6, FR1, FR31 */
		/* 821D4228h case   42:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821D4228h case   42:*/		return 0x821D422C;
		  /* 821D422Ch */ case   43:  		/* bc 4, CR6_EQ, 676 */
		/* 821D422Ch case   43:*/		if ( !regs.CR[6].eq ) { return 0x821D44D0;  }
		/* 821D422Ch case   43:*/		return 0x821D4230;
		  /* 821D4230h */ case   44:  		/* li R4, 1 */
		/* 821D4230h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D4230h case   44:*/		return 0x821D4234;
		  /* 821D4234h */ case   45:  		/* fmr FR4, FR29 */
		/* 821D4234h case   45:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D4234h case   45:*/		return 0x821D4238;
		  /* 821D4238h */ case   46:  		/* mr R3, R24 */
		/* 821D4238h case   46:*/		regs.R3 = regs.R24;
		/* 821D4238h case   46:*/		return 0x821D423C;
		  /* 821D423Ch */ case   47:  		/* fmr FR3, FR29 */
		/* 821D423Ch case   47:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D423Ch case   47:*/		return 0x821D4240;
		  /* 821D4240h */ case   48:  		/* fmr FR2, FR29 */
		/* 821D4240h case   48:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D4240h case   48:*/		return 0x821D4244;
		  /* 821D4244h */ case   49:  		/* bl 354580 */
		/* 821D4244h case   49:*/		regs.LR = 0x821D4248; return 0x8222AB58;
		/* 821D4244h case   49:*/		return 0x821D4248;
		  /* 821D4248h */ case   50:  		/* mr R6, R3 */
		/* 821D4248h case   50:*/		regs.R6 = regs.R3;
		/* 821D4248h case   50:*/		return 0x821D424C;
		  /* 821D424Ch */ case   51:  		/* li R7, 0 */
		/* 821D424Ch case   51:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D424Ch case   51:*/		return 0x821D4250;
		  /* 821D4250h */ case   52:  		/* b 632 */
		/* 821D4250h case   52:*/		return 0x821D44C8;
		/* 821D4250h case   52:*/		return 0x821D4254;
	}
	return 0x821D4254;
} // Block from 821D4180h-821D4254h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821D4254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4254);
		  /* 821D4254h */ case    0:  		/* addi R6, R1, 1112 */
		/* 821D4254h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x458);
		/* 821D4254h case    0:*/		return 0x821D4258;
		  /* 821D4258h */ case    1:  		/* addi R5, R1, 1320 */
		/* 821D4258h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x528);
		/* 821D4258h case    1:*/		return 0x821D425C;
		  /* 821D425Ch */ case    2:  		/* mr R4, R27 */
		/* 821D425Ch case    2:*/		regs.R4 = regs.R27;
		/* 821D425Ch case    2:*/		return 0x821D4260;
		  /* 821D4260h */ case    3:  		/* mr R3, R19 */
		/* 821D4260h case    3:*/		regs.R3 = regs.R19;
		/* 821D4260h case    3:*/		return 0x821D4264;
		  /* 821D4264h */ case    4:  		/* bl 322244 */
		/* 821D4264h case    4:*/		regs.LR = 0x821D4268; return 0x82222D28;
		/* 821D4264h case    4:*/		return 0x821D4268;
		  /* 821D4268h */ case    5:  		/* addi R4, R1, 1432 */
		/* 821D4268h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x598);
		/* 821D4268h case    5:*/		return 0x821D426C;
		  /* 821D426Ch */ case    6:  		/* lfd FR1, <#[R1 + 1320]> */
		/* 821D426Ch case    6:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000528) );
		/* 821D426Ch case    6:*/		return 0x821D4270;
		  /* 821D4270h */ case    7:  		/* bl 610864 */
		/* 821D4270h case    7:*/		regs.LR = 0x821D4274; return 0x822694A0;
		/* 821D4270h case    7:*/		return 0x821D4274;
		  /* 821D4274h */ case    8:  		/* addi R4, R1, 1128 */
		/* 821D4274h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x468);
		/* 821D4274h case    8:*/		return 0x821D4278;
		  /* 821D4278h */ case    9:  		/* lfd FR1, <#[R1 + 1112]> */
		/* 821D4278h case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000458) );
		/* 821D4278h case    9:*/		return 0x821D427C;
		  /* 821D427Ch */ case   10:  		/* lfd FR31, <#[R1 + 1432]> */
		/* 821D427Ch case   10:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0x00000598) );
		/* 821D427Ch case   10:*/		return 0x821D4280;
		  /* 821D4280h */ case   11:  		/* bl 610848 */
		/* 821D4280h case   11:*/		regs.LR = 0x821D4284; return 0x822694A0;
		/* 821D4280h case   11:*/		return 0x821D4284;
		  /* 821D4284h */ case   12:  		/* lfd FR0, <#[R1 + 1128]> */
		/* 821D4284h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000468) );
		/* 821D4284h case   12:*/		return 0x821D4288;
		  /* 821D4288h */ case   13:  		/* fcmpu CR6, FR31, FR0 */
		/* 821D4288h case   13:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821D4288h case   13:*/		return 0x821D428C;
		  /* 821D428Ch */ case   14:  		/* fmr FR30, FR0 */
		/* 821D428Ch case   14:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR0);
		/* 821D428Ch case   14:*/		return 0x821D4290;
		  /* 821D4290h */ case   15:  		/* bc 4, CR6_EQ, 56 */
		/* 821D4290h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D42C8;  }
		/* 821D4290h case   15:*/		return 0x821D4294;
		  /* 821D4294h */ case   16:  		/* frsp FR1, FR31 */
		/* 821D4294h case   16:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR31);
		/* 821D4294h case   16:*/		return 0x821D4298;
		  /* 821D4298h */ case   17:  		/* fcmpu CR6, FR1, FR31 */
		/* 821D4298h case   17:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821D4298h case   17:*/		return 0x821D429C;
		  /* 821D429Ch */ case   18:  		/* bc 4, CR6_EQ, 44 */
		/* 821D429Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x821D42C8;  }
		/* 821D429Ch case   18:*/		return 0x821D42A0;
		  /* 821D42A0h */ case   19:  		/* fmr FR4, FR29 */
		/* 821D42A0h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D42A0h case   19:*/		return 0x821D42A4;
		  /* 821D42A4h */ case   20:  		/* fmr FR3, FR29 */
		/* 821D42A4h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D42A4h case   20:*/		return 0x821D42A8;
		  /* 821D42A8h */ case   21:  		/* fmr FR2, FR29 */
		/* 821D42A8h case   21:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D42A8h case   21:*/		return 0x821D42AC;
		  /* 821D42ACh */ case   22:  		/* mr R3, R24 */
		/* 821D42ACh case   22:*/		regs.R3 = regs.R24;
		/* 821D42ACh case   22:*/		return 0x821D42B0;
		  /* 821D42B0h */ case   23:  		/* li R4, 1 */
		/* 821D42B0h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D42B0h case   23:*/		return 0x821D42B4;
		  /* 821D42B4h */ case   24:  		/* bl 354468 */
		/* 821D42B4h case   24:*/		regs.LR = 0x821D42B8; return 0x8222AB58;
		/* 821D42B4h case   24:*/		return 0x821D42B8;
		  /* 821D42B8h */ case   25:  		/* mr R6, R3 */
		/* 821D42B8h case   25:*/		regs.R6 = regs.R3;
		/* 821D42B8h case   25:*/		return 0x821D42BC;
		  /* 821D42BCh */ case   26:  		/* li R8, 0 */
		/* 821D42BCh case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D42BCh case   26:*/		return 0x821D42C0;
		  /* 821D42C0h */ case   27:  		/* li R7, 0 */
		/* 821D42C0h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D42C0h case   27:*/		return 0x821D42C4;
		  /* 821D42C4h */ case   28:  		/* b 856 */
		/* 821D42C4h case   28:*/		return 0x821D461C;
		/* 821D42C4h case   28:*/		return 0x821D42C8;
	}
	return 0x821D42C8;
} // Block from 821D4254h-821D42C8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D42C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D42C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D42C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D42C8);
		  /* 821D42C8h */ case    0:  		/* lwz R29, <#[R1 + 188]> */
		/* 821D42C8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D42C8h case    0:*/		return 0x821D42CC;
		  /* 821D42CCh */ case    1:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D42CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D42CCh case    1:*/		return 0x821D42D0;
		  /* 821D42D0h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D42D0h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D42D0h case    2:*/		return 0x821D42D4;
		  /* 821D42D4h */ case    3:  		/* cmplwi CR6, R11, 128 */
		/* 821D42D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821D42D4h case    3:*/		return 0x821D42D8;
		  /* 821D42D8h */ case    4:  		/* bc 4, CR6_EQ, 504 */
		/* 821D42D8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D44D0;  }
		/* 821D42D8h case    4:*/		return 0x821D42DC;
		  /* 821D42DCh */ case    5:  		/* lwz R11, <#[R1 + 244]> */
		/* 821D42DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 821D42DCh case    5:*/		return 0x821D42E0;
		  /* 821D42E0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821D42E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D42E0h case    6:*/		return 0x821D42E4;
		  /* 821D42E4h */ case    7:  		/* bc 4, CR6_EQ, 492 */
		/* 821D42E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D44D0;  }
		/* 821D42E4h case    7:*/		return 0x821D42E8;
		  /* 821D42E8h */ case    8:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D42E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D42E8h case    8:*/		return 0x821D42EC;
		  /* 821D42ECh */ case    9:  		/* li R30, 0 */
		/* 821D42ECh case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D42ECh case    9:*/		return 0x821D42F0;
		  /* 821D42F0h */ case   10:  		/* lwz R10, <#[R11 + 28]> */
		/* 821D42F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D42F0h case   10:*/		return 0x821D42F4;
		  /* 821D42F4h */ case   11:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D42F4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D42F4h case   11:*/		return 0x821D42F8;
		  /* 821D42F8h */ case   12:  		/* bc 4, CR0_EQ, 232 */
		/* 821D42F8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D43E0;  }
		/* 821D42F8h case   12:*/		return 0x821D42FC;
		  /* 821D42FCh */ case   13:  		/* lwz R11, <#[R11 + 24]> */
		/* 821D42FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821D42FCh case   13:*/		return 0x821D4300;
		  /* 821D4300h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D4300h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D4300h case   14:*/		return 0x821D4304;
		  /* 821D4304h */ case   15:  		/* addic. R31, R11, -40 */
		/* 821D4304h case   15:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D4304h case   15:*/		return 0x821D4308;
		  /* 821D4308h */ case   16:  		/* bc 12, CR0_EQ, 216 */
		/* 821D4308h case   16:*/		if ( regs.CR[0].eq ) { return 0x821D43E0;  }
		/* 821D4308h case   16:*/		return 0x821D430C;
		  /* 821D430Ch */ case   17:  		/* mr R3, R31 */
		/* 821D430Ch case   17:*/		regs.R3 = regs.R31;
		/* 821D430Ch case   17:*/		return 0x821D4310;
		  /* 821D4310h */ case   18:  		/* bl -457104 */
		/* 821D4310h case   18:*/		regs.LR = 0x821D4314; return 0x82164980;
		/* 821D4310h case   18:*/		return 0x821D4314;
		  /* 821D4314h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4314h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4314h case   19:*/		return 0x821D4318;
		  /* 821D4318h */ case   20:  		/* bc 12, CR0_EQ, 32 */
		/* 821D4318h case   20:*/		if ( regs.CR[0].eq ) { return 0x821D4338;  }
		/* 821D4318h case   20:*/		return 0x821D431C;
		  /* 821D431Ch */ case   21:  		/* cmplw CR6, R31, R16 */
		/* 821D431Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 821D431Ch case   21:*/		return 0x821D4320;
		  /* 821D4320h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 821D4320h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D4338;  }
		/* 821D4320h case   22:*/		return 0x821D4324;
		  /* 821D4324h */ case   23:  		/* li R6, 1 */
		/* 821D4324h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D4324h case   23:*/		return 0x821D4328;
		  /* 821D4328h */ case   24:  		/* mr R5, R26 */
		/* 821D4328h case   24:*/		regs.R5 = regs.R26;
		/* 821D4328h case   24:*/		return 0x821D432C;
		  /* 821D432Ch */ case   25:  		/* mr R4, R31 */
		/* 821D432Ch case   25:*/		regs.R4 = regs.R31;
		/* 821D432Ch case   25:*/		return 0x821D4330;
		  /* 821D4330h */ case   26:  		/* mr R3, R24 */
		/* 821D4330h case   26:*/		regs.R3 = regs.R24;
		/* 821D4330h case   26:*/		return 0x821D4334;
		  /* 821D4334h */ case   27:  		/* bl 356500 */
		/* 821D4334h case   27:*/		regs.LR = 0x821D4338; return 0x8222B3C8;
		/* 821D4334h case   27:*/		return 0x821D4338;
	}
	return 0x821D4338;
} // Block from 821D42C8h-821D4338h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D4338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4338);
		  /* 821D4338h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821D4338h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D4338h case    0:*/		return 0x821D433C;
		  /* 821D433Ch */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821D433Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D4390;  }
		/* 821D433Ch case    1:*/		return 0x821D4340;
		  /* 821D4340h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D4340h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D4340h case    2:*/		return 0x821D4344;
		  /* 821D4344h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 821D4344h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821D4344h case    3:*/		return 0x821D4348;
		  /* 821D4348h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D4348h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D4348h case    4:*/		return 0x821D434C;
		  /* 821D434Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821D434Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821D4358;  }
		/* 821D434Ch case    5:*/		return 0x821D4350;
		  /* 821D4350h */ case    6:  		/* li R11, 0 */
		/* 821D4350h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D4350h case    6:*/		return 0x821D4354;
		  /* 821D4354h */ case    7:  		/* b 12 */
		/* 821D4354h case    7:*/		return 0x821D4360;
		/* 821D4354h case    7:*/		return 0x821D4358;
	}
	return 0x821D4358;
} // Block from 821D4338h-821D4358h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D4358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4358);
		  /* 821D4358h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D4358h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D4358h case    0:*/		return 0x821D435C;
		  /* 821D435Ch */ case    1:  		/* addi R11, R11, -40 */
		/* 821D435Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D435Ch case    1:*/		return 0x821D4360;
	}
	return 0x821D4360;
} // Block from 821D4358h-821D4360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4360);
		  /* 821D4360h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821D4360h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D4360h case    0:*/		return 0x821D4364;
		  /* 821D4364h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821D4364h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D4380;  }
		/* 821D4364h case    1:*/		return 0x821D4368;
		  /* 821D4368h */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821D4368h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821D4368h case    2:*/		return 0x821D436C;
		  /* 821D436Ch */ case    3:  		/* mr R30, R31 */
		/* 821D436Ch case    3:*/		regs.R30 = regs.R31;
		/* 821D436Ch case    3:*/		return 0x821D4370;
		  /* 821D4370h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821D4370h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821D4370h case    4:*/		return 0x821D4374;
		  /* 821D4374h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D4374h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D4374h case    5:*/		return 0x821D4378;
		  /* 821D4378h */ case    6:  		/* bc 4, CR0_EQ, 100 */
		/* 821D4378h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D43DC;  }
		/* 821D4378h case    6:*/		return 0x821D437C;
		  /* 821D437Ch */ case    7:  		/* b 80 */
		/* 821D437Ch case    7:*/		return 0x821D43CC;
		/* 821D437Ch case    7:*/		return 0x821D4380;
	}
	return 0x821D4380;
} // Block from 821D4360h-821D4380h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D4380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4380);
		  /* 821D4380h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D4380h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D4380h case    0:*/		return 0x821D4384;
		  /* 821D4384h */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 821D4384h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D43DC;  }
		/* 821D4384h case    1:*/		return 0x821D4388;
		  /* 821D4388h */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D4388h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D4388h case    2:*/		return 0x821D438C;
		  /* 821D438Ch */ case    3:  		/* b 68 */
		/* 821D438Ch case    3:*/		return 0x821D43D0;
		/* 821D438Ch case    3:*/		return 0x821D4390;
	}
	return 0x821D4390;
} // Block from 821D4380h-821D4390h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D4390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4390);
		  /* 821D4390h */ case    0:  		/* lwz R10, <#[R16 + 28]> */
		/* 821D4390h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D4390h case    0:*/		return 0x821D4394;
		  /* 821D4394h */ case    1:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D4394h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D4394h case    1:*/		return 0x821D4398;
		  /* 821D4398h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D4398h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D4398h case    2:*/		return 0x821D439C;
		  /* 821D439Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821D439Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821D43A8;  }
		/* 821D439Ch case    3:*/		return 0x821D43A0;
		  /* 821D43A0h */ case    4:  		/* li R11, 0 */
		/* 821D43A0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D43A0h case    4:*/		return 0x821D43A4;
		  /* 821D43A4h */ case    5:  		/* b 16 */
		/* 821D43A4h case    5:*/		return 0x821D43B4;
		/* 821D43A4h case    5:*/		return 0x821D43A8;
	}
	return 0x821D43A8;
} // Block from 821D4390h-821D43A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D43A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43A8);
		  /* 821D43A8h */ case    0:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D43A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D43A8h case    0:*/		return 0x821D43AC;
		  /* 821D43ACh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D43ACh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D43ACh case    1:*/		return 0x821D43B0;
		  /* 821D43B0h */ case    2:  		/* addi R11, R11, -40 */
		/* 821D43B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D43B0h case    2:*/		return 0x821D43B4;
	}
	return 0x821D43B4;
} // Block from 821D43A8h-821D43B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D43B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43B4);
		  /* 821D43B4h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821D43B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D43B4h case    0:*/		return 0x821D43B8;
		  /* 821D43B8h */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 821D43B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D4368;  }
		/* 821D43B8h case    1:*/		return 0x821D43BC;
		  /* 821D43BCh */ case    2:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D43BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D43BCh case    2:*/		return 0x821D43C0;
		  /* 821D43C0h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D43C0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D43C0h case    3:*/		return 0x821D43C4;
		  /* 821D43C4h */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 821D43C4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D43DC;  }
		/* 821D43C4h case    4:*/		return 0x821D43C8;
		  /* 821D43C8h */ case    5:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D43C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D43C8h case    5:*/		return 0x821D43CC;
	}
	return 0x821D43CC;
} // Block from 821D43B4h-821D43CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D43CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43CC);
		  /* 821D43CCh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D43CCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D43CCh case    0:*/		return 0x821D43D0;
	}
	return 0x821D43D0;
} // Block from 821D43CCh-821D43D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D43D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43D0);
		  /* 821D43D0h */ case    0:  		/* addi R31, R11, -40 */
		/* 821D43D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D43D0h case    0:*/		return 0x821D43D4;
		  /* 821D43D4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821D43D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D43D4h case    1:*/		return 0x821D43D8;
		  /* 821D43D8h */ case    2:  		/* bc 4, CR6_EQ, -204 */
		/* 821D43D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D430C;  }
		/* 821D43D8h case    2:*/		return 0x821D43DC;
	}
	return 0x821D43DC;
} // Block from 821D43D0h-821D43DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D43DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43DC);
		  /* 821D43DCh */ case    0:  		/* lwz R29, <#[R1 + 188]> */
		/* 821D43DCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D43DCh case    0:*/		return 0x821D43E0;
	}
	return 0x821D43E0;
} // Block from 821D43DCh-821D43E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D43E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D43E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D43E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D43E0);
		  /* 821D43E0h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821D43E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821D43E0h case    0:*/		return 0x821D43E4;
		  /* 821D43E4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D43E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D43E4h case    1:*/		return 0x821D43E8;
		  /* 821D43E8h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821D43E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D4414;  }
		/* 821D43E8h case    2:*/		return 0x821D43EC;
		  /* 821D43ECh */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D43ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D43ECh case    3:*/		return 0x821D43F0;
		  /* 821D43F0h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821D43F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D43F0h case    4:*/		return 0x821D43F4;
		  /* 821D43F4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D43F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D4404;  }
		/* 821D43F4h case    5:*/		return 0x821D43F8;
		  /* 821D43F8h */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821D43F8h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821D43F8h case    6:*/		return 0x821D43FC;
		  /* 821D43FCh */ case    7:  		/* cmplw CR6, R10, R16 */
		/* 821D43FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 821D43FCh case    7:*/		return 0x821D4400;
		  /* 821D4400h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821D4400h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D440C;  }
		/* 821D4400h case    8:*/		return 0x821D4404;
	}
	return 0x821D4404;
} // Block from 821D43E0h-821D4404h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D4404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4404);
		  /* 821D4404h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D4404h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4404h case    0:*/		return 0x821D4408;
		  /* 821D4408h */ case    1:  		/* b -36 */
		/* 821D4408h case    1:*/		return 0x821D43E4;
		/* 821D4408h case    1:*/		return 0x821D440C;
	}
	return 0x821D440C;
} // Block from 821D4404h-821D440Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D440Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D440C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D440C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D440C);
		  /* 821D440Ch */ case    0:  		/* li R11, 1 */
		/* 821D440Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D440Ch case    0:*/		return 0x821D4410;
		  /* 821D4410h */ case    1:  		/* b 8 */
		/* 821D4410h case    1:*/		return 0x821D4418;
		/* 821D4410h case    1:*/		return 0x821D4414;
	}
	return 0x821D4414;
} // Block from 821D440Ch-821D4414h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4414);
		  /* 821D4414h */ case    0:  		/* li R11, 0 */
		/* 821D4414h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D4414h case    0:*/		return 0x821D4418;
	}
	return 0x821D4418;
} // Block from 821D4414h-821D4418h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D4418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4418);
		  /* 821D4418h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D4418h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D4418h case    0:*/		return 0x821D441C;
		  /* 821D441Ch */ case    1:  		/* bc 4, CR0_EQ, 180 */
		/* 821D441Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D44D0;  }
		/* 821D441Ch case    1:*/		return 0x821D4420;
		  /* 821D4420h */ case    2:  		/* lwz R31, <#[R29 + 48]> */
		/* 821D4420h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000030) );
		/* 821D4420h case    2:*/		return 0x821D4424;
		  /* 821D4424h */ case    3:  		/* lwz R30, <#[R1 + 184]> */
		/* 821D4424h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D4424h case    3:*/		return 0x821D4428;
		  /* 821D4428h */ case    4:  		/* mr R3, R31 */
		/* 821D4428h case    4:*/		regs.R3 = regs.R31;
		/* 821D4428h case    4:*/		return 0x821D442C;
		  /* 821D442Ch */ case    5:  		/* mr R4, R30 */
		/* 821D442Ch case    5:*/		regs.R4 = regs.R30;
		/* 821D442Ch case    5:*/		return 0x821D4430;
		  /* 821D4430h */ case    6:  		/* bl -94576 */
		/* 821D4430h case    6:*/		regs.LR = 0x821D4434; return 0x821BD2C0;
		/* 821D4430h case    6:*/		return 0x821D4434;
		  /* 821D4434h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4434h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4434h case    7:*/		return 0x821D4438;
		  /* 821D4438h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821D4438h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D4444;  }
		/* 821D4438h case    8:*/		return 0x821D443C;
		  /* 821D443Ch */ case    9:  		/* lwz R31, <#[R29 + 44]> */
		/* 821D443Ch case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D443Ch case    9:*/		return 0x821D4440;
		  /* 821D4440h */ case   10:  		/* b 24 */
		/* 821D4440h case   10:*/		return 0x821D4458;
		/* 821D4440h case   10:*/		return 0x821D4444;
	}
	return 0x821D4444;
} // Block from 821D4418h-821D4444h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D4444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4444);
		  /* 821D4444h */ case    0:  		/* mr R4, R30 */
		/* 821D4444h case    0:*/		regs.R4 = regs.R30;
		/* 821D4444h case    0:*/		return 0x821D4448;
		  /* 821D4448h */ case    1:  		/* lwz R3, <#[R29 + 44]> */
		/* 821D4448h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D4448h case    1:*/		return 0x821D444C;
		  /* 821D444Ch */ case    2:  		/* bl -94604 */
		/* 821D444Ch case    2:*/		regs.LR = 0x821D4450; return 0x821BD2C0;
		/* 821D444Ch case    2:*/		return 0x821D4450;
		  /* 821D4450h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4450h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4450h case    3:*/		return 0x821D4454;
		  /* 821D4454h */ case    4:  		/* bc 12, CR0_EQ, 124 */
		/* 821D4454h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D44D0;  }
		/* 821D4454h case    4:*/		return 0x821D4458;
	}
	return 0x821D4458;
} // Block from 821D4444h-821D4458h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D4458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4458);
		  /* 821D4458h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821D4458h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D4458h case    0:*/		return 0x821D445C;
		  /* 821D445Ch */ case    1:  		/* bc 12, CR6_EQ, 116 */
		/* 821D445Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D44D0;  }
		/* 821D445Ch case    1:*/		return 0x821D4460;
		  /* 821D4460h */ case    2:  		/* mr R6, R31 */
		/* 821D4460h case    2:*/		regs.R6 = regs.R31;
		/* 821D4460h case    2:*/		return 0x821D4464;
		  /* 821D4464h */ case    3:  		/* mr R5, R29 */
		/* 821D4464h case    3:*/		regs.R5 = regs.R29;
		/* 821D4464h case    3:*/		return 0x821D4468;
		  /* 821D4468h */ case    4:  		/* li R4, 0 */
		/* 821D4468h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D4468h case    4:*/		return 0x821D446C;
		  /* 821D446Ch */ case    5:  		/* mr R3, R24 */
		/* 821D446Ch case    5:*/		regs.R3 = regs.R24;
		/* 821D446Ch case    5:*/		return 0x821D4470;
		  /* 821D4470h */ case    6:  		/* bl -78080 */
		/* 821D4470h case    6:*/		regs.LR = 0x821D4474; return 0x821C1370;
		/* 821D4470h case    6:*/		return 0x821D4474;
		  /* 821D4474h */ case    7:  		/* lwz R10, <#[R31 + 12]> */
		/* 821D4474h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D4474h case    7:*/		return 0x821D4478;
		  /* 821D4478h */ case    8:  		/* mr R11, R3 */
		/* 821D4478h case    8:*/		regs.R11 = regs.R3;
		/* 821D4478h case    8:*/		return 0x821D447C;
		  /* 821D447Ch */ case    9:  		/* addi R7, R10, 4 */
		/* 821D447Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x4);
		/* 821D447Ch case    9:*/		return 0x821D4480;
		  /* 821D4480h */ case   10:  		/* lwz R10, <#[R10 + 4]> */
		/* 821D4480h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821D4480h case   10:*/		return 0x821D4484;
		  /* 821D4484h */ case   11:  		/* b 12 */
		/* 821D4484h case   11:*/		return 0x821D4490;
		/* 821D4484h case   11:*/		return 0x821D4488;
		  /* 821D4488h */ case   12:  		/* addi R7, R10, 8 */
		/* 821D4488h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x8);
		/* 821D4488h case   12:*/		return 0x821D448C;
		  /* 821D448Ch */ case   13:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D448Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D448Ch case   13:*/		return 0x821D4490;
	}
	return 0x821D4490;
} // Block from 821D4458h-821D4490h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D4490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4490);
		  /* 821D4490h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D4490h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D4490h case    0:*/		return 0x821D4494;
		  /* 821D4494h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D4494h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D4488;  }
		/* 821D4494h case    1:*/		return 0x821D4498;
		  /* 821D4498h */ case    2:  		/* lwz R6, <#[R31 + 8]> */
		/* 821D4498h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 821D4498h case    2:*/		return 0x821D449C;
		  /* 821D449Ch */ case    3:  		/* li R30, 57 */
		/* 821D449Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x39);
		/* 821D449Ch case    3:*/		return 0x821D44A0;
		  /* 821D44A0h */ case    4:  		/* stw R6, <#[R7]> */
		/* 821D44A0h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821D44A0h case    4:*/		return 0x821D44A4;
		  /* 821D44A4h */ case    5:  		/* lwz R7, <#[R11 + 4]> */
		/* 821D44A4h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821D44A4h case    5:*/		return 0x821D44A8;
		  /* 821D44A8h */ case    6:  		/* stw R7, <#[R31 + 8]> */
		/* 821D44A8h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 821D44A8h case    6:*/		return 0x821D44AC;
		  /* 821D44ACh */ case    7:  		/* stw R31, <#[R11 + 4]> */
		/* 821D44ACh case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D44ACh case    7:*/		return 0x821D44B0;
		  /* 821D44B0h */ case    8:  		/* stw R11, <#[R31 + 12]> */
		/* 821D44B0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D44B0h case    8:*/		return 0x821D44B4;
		  /* 821D44B4h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821D44B4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D44B4h case    9:*/		return 0x821D44B8;
		  /* 821D44B8h */ case   10:  		/* rlwimi R11, R30, 7, 19, 31 */
		/* 821D44B8h case   10:*/		cpu::op::rlwimi<0,7,19,31>(regs,&regs.R11,regs.R30);
		/* 821D44B8h case   10:*/		return 0x821D44BC;
		  /* 821D44BCh */ case   11:  		/* stw R11, <#[R31]> */
		/* 821D44BCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D44BCh case   11:*/		return 0x821D44C0;
		  /* 821D44C0h */ case   12:  		/* lwz R6, <#[R1 + 188]> */
		/* 821D44C0h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D44C0h case   12:*/		return 0x821D44C4;
		  /* 821D44C4h */ case   13:  		/* lwz R7, <#[R1 + 184]> */
		/* 821D44C4h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D44C4h case   13:*/		return 0x821D44C8;
	}
	return 0x821D44C8;
} // Block from 821D4490h-821D44C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D44C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D44C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D44C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D44C8);
		  /* 821D44C8h */ case    0:  		/* li R8, 0 */
		/* 821D44C8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D44C8h case    0:*/		return 0x821D44CC;
		  /* 821D44CCh */ case    1:  		/* b 336 */
		/* 821D44CCh case    1:*/		return 0x821D461C;
		/* 821D44CCh case    1:*/		return 0x821D44D0;
	}
	return 0x821D44D0;
} // Block from 821D44C8h-821D44D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D44D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D44D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D44D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D44D0);
		  /* 821D44D0h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821D44D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821D44D0h case    0:*/		return 0x821D44D4;
		  /* 821D44D4h */ case    1:  		/* rlwinm R10, R27, 1, 0, 30 */
		/* 821D44D4h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R27);
		/* 821D44D4h case    1:*/		return 0x821D44D8;
		  /* 821D44D8h */ case    2:  		/* lwz R9, <#[R19 + 12]> */
		/* 821D44D8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D44D8h case    2:*/		return 0x821D44DC;
		  /* 821D44DCh */ case    3:  		/* rlwinm R8, R11, 27, 24, 31 */
		/* 821D44DCh case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R11);
		/* 821D44DCh case    3:*/		return 0x821D44E0;
		  /* 821D44E0h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D44E0h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D44E0h case    4:*/		return 0x821D44E4;
		  /* 821D44E4h */ case    5:  		/* srw R11, R8, R10 */
		/* 821D44E4h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R8,regs.R10);
		/* 821D44E4h case    5:*/		return 0x821D44E8;
		  /* 821D44E8h */ case    6:  		/* lhz R10, <#[R9 + 14]> */
		/* 821D44E8h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000000E) );
		/* 821D44E8h case    6:*/		return 0x821D44EC;
		  /* 821D44ECh */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D44ECh case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D44ECh case    7:*/		return 0x821D44F0;
		  /* 821D44F0h */ case    8:  		/* srw R11, R10, R11 */
		/* 821D44F0h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D44F0h case    8:*/		return 0x821D44F4;
		  /* 821D44F4h */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D44F4h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D44F4h case    9:*/		return 0x821D44F8;
		  /* 821D44F8h */ case   10:  		/* bl -234616 */
		/* 821D44F8h case   10:*/		regs.LR = 0x821D44FC; return 0x8219B080;
		/* 821D44F8h case   10:*/		return 0x821D44FC;
		  /* 821D44FCh */ case   11:  		/* ori R5, R3, 4 */
		/* 821D44FCh case   11:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R3,0x4);
		/* 821D44FCh case   11:*/		return 0x821D4500;
		  /* 821D4500h */ case   12:  		/* mr R4, R27 */
		/* 821D4500h case   12:*/		regs.R4 = regs.R27;
		/* 821D4500h case   12:*/		return 0x821D4504;
		  /* 821D4504h */ case   13:  		/* mr R3, R16 */
		/* 821D4504h case   13:*/		regs.R3 = regs.R16;
		/* 821D4504h case   13:*/		return 0x821D4508;
		  /* 821D4508h */ case   14:  		/* bl -95304 */
		/* 821D4508h case   14:*/		regs.LR = 0x821D450C; return 0x821BD0C0;
		/* 821D4508h case   14:*/		return 0x821D450C;
		  /* 821D450Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D450Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D450Ch case   15:*/		return 0x821D4510;
		  /* 821D4510h */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 821D4510h case   16:*/		if ( regs.CR[0].eq ) { return 0x821D4524;  }
		/* 821D4510h case   16:*/		return 0x821D4514;
		  /* 821D4514h */ case   17:  		/* mr R5, R26 */
		/* 821D4514h case   17:*/		regs.R5 = regs.R26;
		/* 821D4514h case   17:*/		return 0x821D4518;
		  /* 821D4518h */ case   18:  		/* mr R4, R16 */
		/* 821D4518h case   18:*/		regs.R4 = regs.R16;
		/* 821D4518h case   18:*/		return 0x821D451C;
		  /* 821D451Ch */ case   19:  		/* mr R3, R24 */
		/* 821D451Ch case   19:*/		regs.R3 = regs.R24;
		/* 821D451Ch case   19:*/		return 0x821D4520;
		  /* 821D4520h */ case   20:  		/* bl -35520 */
		/* 821D4520h case   20:*/		regs.LR = 0x821D4524; return 0x821CBA60;
		/* 821D4520h case   20:*/		return 0x821D4524;
	}
	return 0x821D4524;
} // Block from 821D44D0h-821D4524h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D4524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4524);
		  /* 821D4524h */ case    0:  		/* mr R7, R24 */
		/* 821D4524h case    0:*/		regs.R7 = regs.R24;
		/* 821D4524h case    0:*/		return 0x821D4528;
		  /* 821D4528h */ case    1:  		/* fmr FR2, FR30 */
		/* 821D4528h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821D4528h case    1:*/		return 0x821D452C;
		  /* 821D452Ch */ case    2:  		/* mr R4, R27 */
		/* 821D452Ch case    2:*/		regs.R4 = regs.R27;
		/* 821D452Ch case    2:*/		return 0x821D4530;
		  /* 821D4530h */ case    3:  		/* fmr FR1, FR31 */
		/* 821D4530h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821D4530h case    3:*/		return 0x821D4534;
		  /* 821D4534h */ case    4:  		/* mr R3, R16 */
		/* 821D4534h case    4:*/		regs.R3 = regs.R16;
		/* 821D4534h case    4:*/		return 0x821D4538;
		  /* 821D4538h */ case    5:  		/* bl 321000 */
		/* 821D4538h case    5:*/		regs.LR = 0x821D453C; return 0x82222B20;
		/* 821D4538h case    5:*/		return 0x821D453C;
		  /* 821D453Ch */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D453Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D453Ch case    6:*/		return 0x821D4540;
		  /* 821D4540h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821D4540h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D4554;  }
		/* 821D4540h case    7:*/		return 0x821D4544;
		  /* 821D4544h */ case    8:  		/* mr R5, R26 */
		/* 821D4544h case    8:*/		regs.R5 = regs.R26;
		/* 821D4544h case    8:*/		return 0x821D4548;
		  /* 821D4548h */ case    9:  		/* mr R4, R16 */
		/* 821D4548h case    9:*/		regs.R4 = regs.R16;
		/* 821D4548h case    9:*/		return 0x821D454C;
		  /* 821D454Ch */ case   10:  		/* mr R3, R24 */
		/* 821D454Ch case   10:*/		regs.R3 = regs.R24;
		/* 821D454Ch case   10:*/		return 0x821D4550;
		  /* 821D4550h */ case   11:  		/* bl -35568 */
		/* 821D4550h case   11:*/		regs.LR = 0x821D4554; return 0x821CBA60;
		/* 821D4550h case   11:*/		return 0x821D4554;
	}
	return 0x821D4554;
} // Block from 821D4524h-821D4554h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D4554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4554);
		  /* 821D4554h */ case    0:  		/* lwz R31, <#[R1 + 188]> */
		/* 821D4554h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D4554h case    0:*/		return 0x821D4558;
		  /* 821D4558h */ case    1:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D4558h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D4558h case    1:*/		return 0x821D455C;
		  /* 821D455Ch */ case    2:  		/* lwz R28, <#[R1 + 244]> */
		/* 821D455Ch case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000F4) );
		/* 821D455Ch case    2:*/		return 0x821D4560;
		  /* 821D4560h */ case    3:  		/* rlwinm R29, R11, 25, 25, 31 */
		/* 821D4560h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R11);
		/* 821D4560h case    3:*/		return 0x821D4564;
		  /* 821D4564h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D4564h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D4564h case    4:*/		return 0x821D4568;
		  /* 821D4568h */ case    5:  		/* rlwinm R30, R11, 25, 25, 31 */
		/* 821D4568h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R30,regs.R11);
		/* 821D4568h case    5:*/		return 0x821D456C;
		  /* 821D456Ch */ case    6:  		/* cmplw CR6, R30, R29 */
		/* 821D456Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 821D456Ch case    6:*/		return 0x821D4570;
		  /* 821D4570h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 821D4570h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D4588;  }
		/* 821D4570h case    7:*/		return 0x821D4574;
		  /* 821D4574h */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 821D4574h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821D4574h case    8:*/		return 0x821D4578;
		  /* 821D4578h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821D4578h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D4588;  }
		/* 821D4578h case    9:*/		return 0x821D457C;
		  /* 821D457Ch */ case   10:  		/* li R8, 0 */
		/* 821D457Ch case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D457Ch case   10:*/		return 0x821D4580;
		  /* 821D4580h */ case   11:  		/* mr R6, R31 */
		/* 821D4580h case   11:*/		regs.R6 = regs.R31;
		/* 821D4580h case   11:*/		return 0x821D4584;
		  /* 821D4584h */ case   12:  		/* b 148 */
		/* 821D4584h case   12:*/		return 0x821D4618;
		/* 821D4584h case   12:*/		return 0x821D4588;
	}
	return 0x821D4588;
} // Block from 821D4554h-821D4588h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D4588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4588);
		  /* 821D4588h */ case    0:  		/* mr R4, R27 */
		/* 821D4588h case    0:*/		regs.R4 = regs.R27;
		/* 821D4588h case    0:*/		return 0x821D458C;
		  /* 821D458Ch */ case    1:  		/* mr R3, R19 */
		/* 821D458Ch case    1:*/		regs.R3 = regs.R19;
		/* 821D458Ch case    1:*/		return 0x821D4590;
		  /* 821D4590h */ case    2:  		/* bl -94928 */
		/* 821D4590h case    2:*/		regs.LR = 0x821D4594; return 0x821BD2C0;
		/* 821D4590h case    2:*/		return 0x821D4594;
		  /* 821D4594h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4594h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4594h case    3:*/		return 0x821D4598;
		  /* 821D4598h */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 821D4598h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D45CC;  }
		/* 821D4598h case    4:*/		return 0x821D459C;
		  /* 821D459Ch */ case    5:  		/* cmplwi CR6, R29, 9 */
		/* 821D459Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000009);
		/* 821D459Ch case    5:*/		return 0x821D45A0;
		  /* 821D45A0h */ case    6:  		/* mr R3, R24 */
		/* 821D45A0h case    6:*/		regs.R3 = regs.R24;
		/* 821D45A0h case    6:*/		return 0x821D45A4;
		  /* 821D45A4h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 821D45A4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D45BC;  }
		/* 821D45A4h case    7:*/		return 0x821D45A8;
		  /* 821D45A8h */ case    8:  		/* fmr FR4, FR29 */
		/* 821D45A8h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D45A8h case    8:*/		return 0x821D45AC;
		  /* 821D45ACh */ case    9:  		/* fmr FR3, FR29 */
		/* 821D45ACh case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D45ACh case    9:*/		return 0x821D45B0;
		  /* 821D45B0h */ case   10:  		/* fmr FR2, FR29 */
		/* 821D45B0h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D45B0h case   10:*/		return 0x821D45B4;
		  /* 821D45B4h */ case   11:  		/* fmr FR1, FR29 */
		/* 821D45B4h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D45B4h case   11:*/		return 0x821D45B8;
		  /* 821D45B8h */ case   12:  		/* b -776 */
		/* 821D45B8h case   12:*/		return 0x821D42B0;
		/* 821D45B8h case   12:*/		return 0x821D45BC;
	}
	return 0x821D45BC;
} // Block from 821D4588h-821D45BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D45BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D45BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D45BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D45BC);
		  /* 821D45BCh */ case    0:  		/* lwz R7, <#[R1 + 184]> */
		/* 821D45BCh case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D45BCh case    0:*/		return 0x821D45C0;
		  /* 821D45C0h */ case    1:  		/* mr R8, R28 */
		/* 821D45C0h case    1:*/		regs.R8 = regs.R28;
		/* 821D45C0h case    1:*/		return 0x821D45C4;
		  /* 821D45C4h */ case    2:  		/* mr R6, R31 */
		/* 821D45C4h case    2:*/		regs.R6 = regs.R31;
		/* 821D45C4h case    2:*/		return 0x821D45C8;
		  /* 821D45C8h */ case    3:  		/* b 88 */
		/* 821D45C8h case    3:*/		return 0x821D4620;
		/* 821D45C8h case    3:*/		return 0x821D45CC;
	}
	return 0x821D45CC;
} // Block from 821D45BCh-821D45CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D45CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D45CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D45CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D45CC);
		  /* 821D45CCh */ case    0:  		/* cmplwi CR6, R30, 9 */
		/* 821D45CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000009);
		/* 821D45CCh case    0:*/		return 0x821D45D0;
		  /* 821D45D0h */ case    1:  		/* bc 4, CR6_EQ, 972 */
		/* 821D45D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D499C;  }
		/* 821D45D0h case    1:*/		return 0x821D45D4;
		  /* 821D45D4h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821D45D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821D45D4h case    2:*/		return 0x821D45D8;
		  /* 821D45D8h */ case    3:  		/* bc 4, CR6_EQ, 964 */
		/* 821D45D8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D499C;  }
		/* 821D45D8h case    3:*/		return 0x821D45DC;
		  /* 821D45DCh */ case    4:  		/* mr R3, R24 */
		/* 821D45DCh case    4:*/		regs.R3 = regs.R24;
		/* 821D45DCh case    4:*/		return 0x821D45E0;
		  /* 821D45E0h */ case    5:  		/* b -56 */
		/* 821D45E0h case    5:*/		return 0x821D45A8;
		/* 821D45E0h case    5:*/		return 0x821D45E4;
	}
	return 0x821D45E4;
} // Block from 821D45CCh-821D45E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D45E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D45E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D45E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D45E4);
		  /* 821D45E4h */ case    0:  		/* addi R6, R1, 432 */
		/* 821D45E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1B0);
		/* 821D45E4h case    0:*/		return 0x821D45E8;
		  /* 821D45E8h */ case    1:  		/* addi R5, R1, 800 */
		/* 821D45E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x320);
		/* 821D45E8h case    1:*/		return 0x821D45EC;
		  /* 821D45ECh */ case    2:  		/* mr R4, R27 */
		/* 821D45ECh case    2:*/		regs.R4 = regs.R27;
		/* 821D45ECh case    2:*/		return 0x821D45F0;
		  /* 821D45F0h */ case    3:  		/* mr R3, R19 */
		/* 821D45F0h case    3:*/		regs.R3 = regs.R19;
		/* 821D45F0h case    3:*/		return 0x821D45F4;
		  /* 821D45F4h */ case    4:  		/* bl 321332 */
		/* 821D45F4h case    4:*/		regs.LR = 0x821D45F8; return 0x82222D28;
		/* 821D45F4h case    4:*/		return 0x821D45F8;
		  /* 821D45F8h */ case    5:  		/* lfd FR0, <#[R1 + 800]> */
		/* 821D45F8h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000320) );
		/* 821D45F8h case    5:*/		return 0x821D45FC;
		  /* 821D45FCh */ case    6:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D45FCh case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D45FCh case    6:*/		return 0x821D4600;
		  /* 821D4600h */ case    7:  		/* bc 12, CR6_LT, 56 */
		/* 821D4600h case    7:*/		if ( regs.CR[6].lt ) { return 0x821D4638;  }
		/* 821D4600h case    7:*/		return 0x821D4604;
		  /* 821D4604h */ case    8:  		/* lfd FR0, <#[R1 + 432]> */
		/* 821D4604h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000001B0) );
		/* 821D4604h case    8:*/		return 0x821D4608;
		  /* 821D4608h */ case    9:  		/* fcmpu CR6, FR0, FR26 */
		/* 821D4608h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR26);
		/* 821D4608h case    9:*/		return 0x821D460C;
		  /* 821D460Ch */ case   10:  		/* bc 4, CR6_LT, 44 */
		/* 821D460Ch case   10:*/		if ( !regs.CR[6].lt ) { return 0x821D4638;  }
		/* 821D460Ch case   10:*/		return 0x821D4610;
		  /* 821D4610h */ case   11:  		/* lwz R8, <#[R1 + 244]> */
		/* 821D4610h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000F4) );
		/* 821D4610h case   11:*/		return 0x821D4614;
		  /* 821D4614h */ case   12:  		/* lwz R6, <#[R1 + 188]> */
		/* 821D4614h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D4614h case   12:*/		return 0x821D4618;
	}
	return 0x821D4618;
} // Block from 821D45E4h-821D4618h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D4618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4618);
		  /* 821D4618h */ case    0:  		/* lwz R7, <#[R1 + 184]> */
		/* 821D4618h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D4618h case    0:*/		return 0x821D461C;
	}
	return 0x821D461C;
} // Block from 821D4618h-821D461Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D461Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D461C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D461C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D461C);
		  /* 821D461Ch */ case    0:  		/* mr R3, R24 */
		/* 821D461Ch case    0:*/		regs.R3 = regs.R24;
		/* 821D461Ch case    0:*/		return 0x821D4620;
	}
	return 0x821D4620;
} // Block from 821D461Ch-821D4620h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D4620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4620);
		  /* 821D4620h */ case    0:  		/* mr R5, R27 */
		/* 821D4620h case    0:*/		regs.R5 = regs.R27;
		/* 821D4620h case    0:*/		return 0x821D4624;
		  /* 821D4624h */ case    1:  		/* mr R9, R26 */
		/* 821D4624h case    1:*/		regs.R9 = regs.R26;
		/* 821D4624h case    1:*/		return 0x821D4628;
		  /* 821D4628h */ case    2:  		/* mr R10, R25 */
		/* 821D4628h case    2:*/		regs.R10 = regs.R25;
		/* 821D4628h case    2:*/		return 0x821D462C;
		  /* 821D462Ch */ case    3:  		/* mr R4, R16 */
		/* 821D462Ch case    3:*/		regs.R4 = regs.R16;
		/* 821D462Ch case    3:*/		return 0x821D4630;
		  /* 821D4630h */ case    4:  		/* bl -22912 */
		/* 821D4630h case    4:*/		regs.LR = 0x821D4634; return 0x821CECB0;
		/* 821D4630h case    4:*/		return 0x821D4634;
		  /* 821D4634h */ case    5:  		/* b 872 */
		/* 821D4634h case    5:*/		return 0x821D499C;
		/* 821D4634h case    5:*/		return 0x821D4638;
	}
	return 0x821D4638;
} // Block from 821D4620h-821D4638h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D4638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4638);
		  /* 821D4638h */ case    0:  		/* lwz R29, <#[R1 + 188]> */
		/* 821D4638h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D4638h case    0:*/		return 0x821D463C;
		  /* 821D463Ch */ case    1:  		/* lwz R30, <#[R1 + 244]> */
		/* 821D463Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000F4) );
		/* 821D463Ch case    1:*/		return 0x821D4640;
		  /* 821D4640h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D4640h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D4640h case    2:*/		return 0x821D4644;
		  /* 821D4644h */ case    3:  		/* rlwinm R31, R11, 25, 25, 31 */
		/* 821D4644h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R31,regs.R11);
		/* 821D4644h case    3:*/		return 0x821D4648;
		  /* 821D4648h */ case    4:  		/* cmplwi CR6, R31, 9 */
		/* 821D4648h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000009);
		/* 821D4648h case    4:*/		return 0x821D464C;
		  /* 821D464Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 821D464Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D4664;  }
		/* 821D464Ch case    5:*/		return 0x821D4650;
		  /* 821D4650h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821D4650h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D4650h case    6:*/		return 0x821D4654;
		  /* 821D4654h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 821D4654h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D4664;  }
		/* 821D4654h case    7:*/		return 0x821D4658;
		  /* 821D4658h */ case    8:  		/* li R8, 0 */
		/* 821D4658h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4658h case    8:*/		return 0x821D465C;
		  /* 821D465Ch */ case    9:  		/* mr R6, R29 */
		/* 821D465Ch case    9:*/		regs.R6 = regs.R29;
		/* 821D465Ch case    9:*/		return 0x821D4660;
		  /* 821D4660h */ case   10:  		/* b -72 */
		/* 821D4660h case   10:*/		return 0x821D4618;
		/* 821D4660h case   10:*/		return 0x821D4664;
	}
	return 0x821D4664;
} // Block from 821D4638h-821D4664h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D4664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4664);
		  /* 821D4664h */ case    0:  		/* mr R4, R27 */
		/* 821D4664h case    0:*/		regs.R4 = regs.R27;
		/* 821D4664h case    0:*/		return 0x821D4668;
		  /* 821D4668h */ case    1:  		/* mr R3, R19 */
		/* 821D4668h case    1:*/		regs.R3 = regs.R19;
		/* 821D4668h case    1:*/		return 0x821D466C;
		  /* 821D466Ch */ case    2:  		/* bl -95148 */
		/* 821D466Ch case    2:*/		regs.LR = 0x821D4670; return 0x821BD2C0;
		/* 821D466Ch case    2:*/		return 0x821D4670;
		  /* 821D4670h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4670h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4670h case    3:*/		return 0x821D4674;
		  /* 821D4674h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821D4674h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D468C;  }
		/* 821D4674h case    4:*/		return 0x821D4678;
		  /* 821D4678h */ case    5:  		/* fmr FR4, FR29 */
		/* 821D4678h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D4678h case    5:*/		return 0x821D467C;
		  /* 821D467Ch */ case    6:  		/* fmr FR3, FR29 */
		/* 821D467Ch case    6:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D467Ch case    6:*/		return 0x821D4680;
		  /* 821D4680h */ case    7:  		/* fmr FR2, FR29 */
		/* 821D4680h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D4680h case    7:*/		return 0x821D4684;
		  /* 821D4684h */ case    8:  		/* fmr FR1, FR29 */
		/* 821D4684h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D4684h case    8:*/		return 0x821D4688;
		  /* 821D4688h */ case    9:  		/* b -988 */
		/* 821D4688h case    9:*/		return 0x821D42AC;
		/* 821D4688h case    9:*/		return 0x821D468C;
	}
	return 0x821D468C;
} // Block from 821D4664h-821D468Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D468Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D468C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D468C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D468C);
		  /* 821D468Ch */ case    0:  		/* cmplwi CR6, R31, 1 */
		/* 821D468Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821D468Ch case    0:*/		return 0x821D4690;
		  /* 821D4690h */ case    1:  		/* bc 4, CR6_EQ, 428 */
		/* 821D4690h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D483C;  }
		/* 821D4690h case    1:*/		return 0x821D4694;
		  /* 821D4694h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821D4694h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D4694h case    2:*/		return 0x821D4698;
		  /* 821D4698h */ case    3:  		/* bc 4, CR6_EQ, 420 */
		/* 821D4698h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D483C;  }
		/* 821D4698h case    3:*/		return 0x821D469C;
		  /* 821D469Ch */ case    4:  		/* mr R4, R27 */
		/* 821D469Ch case    4:*/		regs.R4 = regs.R27;
		/* 821D469Ch case    4:*/		return 0x821D46A0;
		  /* 821D46A0h */ case    5:  		/* mr R3, R19 */
		/* 821D46A0h case    5:*/		regs.R3 = regs.R19;
		/* 821D46A0h case    5:*/		return 0x821D46A4;
		  /* 821D46A4h */ case    6:  		/* bl -95364 */
		/* 821D46A4h case    6:*/		regs.LR = 0x821D46A8; return 0x821BD220;
		/* 821D46A4h case    6:*/		return 0x821D46A8;
		  /* 821D46A8h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D46A8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D46A8h case    7:*/		return 0x821D46AC;
		  /* 821D46ACh */ case    8:  		/* bc 12, CR0_EQ, 400 */
		/* 821D46ACh case    8:*/		if ( regs.CR[0].eq ) { return 0x821D483C;  }
		/* 821D46ACh case    8:*/		return 0x821D46B0;
		  /* 821D46B0h */ case    9:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D46B0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D46B0h case    9:*/		return 0x821D46B4;
		  /* 821D46B4h */ case   10:  		/* lwz R10, <#[R11 + 28]> */
		/* 821D46B4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D46B4h case   10:*/		return 0x821D46B8;
		  /* 821D46B8h */ case   11:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D46B8h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D46B8h case   11:*/		return 0x821D46BC;
		  /* 821D46BCh */ case   12:  		/* bc 4, CR0_EQ, 232 */
		/* 821D46BCh case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D47A4;  }
		/* 821D46BCh case   12:*/		return 0x821D46C0;
		  /* 821D46C0h */ case   13:  		/* lwz R11, <#[R11 + 24]> */
		/* 821D46C0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821D46C0h case   13:*/		return 0x821D46C4;
		  /* 821D46C4h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D46C4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D46C4h case   14:*/		return 0x821D46C8;
		  /* 821D46C8h */ case   15:  		/* addic. R31, R11, -40 */
		/* 821D46C8h case   15:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D46C8h case   15:*/		return 0x821D46CC;
		  /* 821D46CCh */ case   16:  		/* bc 12, CR0_EQ, 216 */
		/* 821D46CCh case   16:*/		if ( regs.CR[0].eq ) { return 0x821D47A4;  }
		/* 821D46CCh case   16:*/		return 0x821D46D0;
		  /* 821D46D0h */ case   17:  		/* mr R3, R31 */
		/* 821D46D0h case   17:*/		regs.R3 = regs.R31;
		/* 821D46D0h case   17:*/		return 0x821D46D4;
		  /* 821D46D4h */ case   18:  		/* bl -458068 */
		/* 821D46D4h case   18:*/		regs.LR = 0x821D46D8; return 0x82164980;
		/* 821D46D4h case   18:*/		return 0x821D46D8;
		  /* 821D46D8h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D46D8h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D46D8h case   19:*/		return 0x821D46DC;
		  /* 821D46DCh */ case   20:  		/* bc 12, CR0_EQ, 32 */
		/* 821D46DCh case   20:*/		if ( regs.CR[0].eq ) { return 0x821D46FC;  }
		/* 821D46DCh case   20:*/		return 0x821D46E0;
		  /* 821D46E0h */ case   21:  		/* cmplw CR6, R31, R16 */
		/* 821D46E0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R16);
		/* 821D46E0h case   21:*/		return 0x821D46E4;
		  /* 821D46E4h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 821D46E4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D46FC;  }
		/* 821D46E4h case   22:*/		return 0x821D46E8;
		  /* 821D46E8h */ case   23:  		/* li R6, 1 */
		/* 821D46E8h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D46E8h case   23:*/		return 0x821D46EC;
		  /* 821D46ECh */ case   24:  		/* mr R5, R26 */
		/* 821D46ECh case   24:*/		regs.R5 = regs.R26;
		/* 821D46ECh case   24:*/		return 0x821D46F0;
		  /* 821D46F0h */ case   25:  		/* mr R4, R31 */
		/* 821D46F0h case   25:*/		regs.R4 = regs.R31;
		/* 821D46F0h case   25:*/		return 0x821D46F4;
		  /* 821D46F4h */ case   26:  		/* mr R3, R24 */
		/* 821D46F4h case   26:*/		regs.R3 = regs.R24;
		/* 821D46F4h case   26:*/		return 0x821D46F8;
		  /* 821D46F8h */ case   27:  		/* bl 355536 */
		/* 821D46F8h case   27:*/		regs.LR = 0x821D46FC; return 0x8222B3C8;
		/* 821D46F8h case   27:*/		return 0x821D46FC;
	}
	return 0x821D46FC;
} // Block from 821D468Ch-821D46FCh (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D46FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D46FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D46FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D46FC);
		  /* 821D46FCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821D46FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D46FCh case    0:*/		return 0x821D4700;
		  /* 821D4700h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821D4700h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D4754;  }
		/* 821D4700h case    1:*/		return 0x821D4704;
		  /* 821D4704h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D4704h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D4704h case    2:*/		return 0x821D4708;
		  /* 821D4708h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 821D4708h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821D4708h case    3:*/		return 0x821D470C;
		  /* 821D470Ch */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D470Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D470Ch case    4:*/		return 0x821D4710;
		  /* 821D4710h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821D4710h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D471C;  }
		/* 821D4710h case    5:*/		return 0x821D4714;
		  /* 821D4714h */ case    6:  		/* li R11, 0 */
		/* 821D4714h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D4714h case    6:*/		return 0x821D4718;
		  /* 821D4718h */ case    7:  		/* b 12 */
		/* 821D4718h case    7:*/		return 0x821D4724;
		/* 821D4718h case    7:*/		return 0x821D471C;
	}
	return 0x821D471C;
} // Block from 821D46FCh-821D471Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D471Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D471C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D471C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D471C);
		  /* 821D471Ch */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D471Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D471Ch case    0:*/		return 0x821D4720;
		  /* 821D4720h */ case    1:  		/* addi R11, R11, -40 */
		/* 821D4720h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D4720h case    1:*/		return 0x821D4724;
	}
	return 0x821D4724;
} // Block from 821D471Ch-821D4724h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4724);
		  /* 821D4724h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821D4724h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D4724h case    0:*/		return 0x821D4728;
		  /* 821D4728h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821D4728h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D4744;  }
		/* 821D4728h case    1:*/		return 0x821D472C;
		  /* 821D472Ch */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821D472Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821D472Ch case    2:*/		return 0x821D4730;
		  /* 821D4730h */ case    3:  		/* mr R30, R31 */
		/* 821D4730h case    3:*/		regs.R30 = regs.R31;
		/* 821D4730h case    3:*/		return 0x821D4734;
		  /* 821D4734h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821D4734h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821D4734h case    4:*/		return 0x821D4738;
		  /* 821D4738h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D4738h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D4738h case    5:*/		return 0x821D473C;
		  /* 821D473Ch */ case    6:  		/* bc 4, CR0_EQ, 100 */
		/* 821D473Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D47A0;  }
		/* 821D473Ch case    6:*/		return 0x821D4740;
		  /* 821D4740h */ case    7:  		/* b 80 */
		/* 821D4740h case    7:*/		return 0x821D4790;
		/* 821D4740h case    7:*/		return 0x821D4744;
	}
	return 0x821D4744;
} // Block from 821D4724h-821D4744h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D4744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4744);
		  /* 821D4744h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D4744h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D4744h case    0:*/		return 0x821D4748;
		  /* 821D4748h */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 821D4748h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D47A0;  }
		/* 821D4748h case    1:*/		return 0x821D474C;
		  /* 821D474Ch */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D474Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D474Ch case    2:*/		return 0x821D4750;
		  /* 821D4750h */ case    3:  		/* b 68 */
		/* 821D4750h case    3:*/		return 0x821D4794;
		/* 821D4750h case    3:*/		return 0x821D4754;
	}
	return 0x821D4754;
} // Block from 821D4744h-821D4754h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D4754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4754);
		  /* 821D4754h */ case    0:  		/* lwz R10, <#[R16 + 28]> */
		/* 821D4754h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D4754h case    0:*/		return 0x821D4758;
		  /* 821D4758h */ case    1:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D4758h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D4758h case    1:*/		return 0x821D475C;
		  /* 821D475Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D475Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D475Ch case    2:*/		return 0x821D4760;
		  /* 821D4760h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821D4760h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D476C;  }
		/* 821D4760h case    3:*/		return 0x821D4764;
		  /* 821D4764h */ case    4:  		/* li R11, 0 */
		/* 821D4764h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D4764h case    4:*/		return 0x821D4768;
		  /* 821D4768h */ case    5:  		/* b 16 */
		/* 821D4768h case    5:*/		return 0x821D4778;
		/* 821D4768h case    5:*/		return 0x821D476C;
	}
	return 0x821D476C;
} // Block from 821D4754h-821D476Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D476Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D476C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D476C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D476C);
		  /* 821D476Ch */ case    0:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D476Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D476Ch case    0:*/		return 0x821D4770;
		  /* 821D4770h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D4770h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D4770h case    1:*/		return 0x821D4774;
		  /* 821D4774h */ case    2:  		/* addi R11, R11, -40 */
		/* 821D4774h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D4774h case    2:*/		return 0x821D4778;
	}
	return 0x821D4778;
} // Block from 821D476Ch-821D4778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D4778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4778);
		  /* 821D4778h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821D4778h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D4778h case    0:*/		return 0x821D477C;
		  /* 821D477Ch */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 821D477Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D472C;  }
		/* 821D477Ch case    1:*/		return 0x821D4780;
		  /* 821D4780h */ case    2:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D4780h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D4780h case    2:*/		return 0x821D4784;
		  /* 821D4784h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D4784h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D4784h case    3:*/		return 0x821D4788;
		  /* 821D4788h */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 821D4788h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D47A0;  }
		/* 821D4788h case    4:*/		return 0x821D478C;
		  /* 821D478Ch */ case    5:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D478Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D478Ch case    5:*/		return 0x821D4790;
	}
	return 0x821D4790;
} // Block from 821D4778h-821D4790h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D4790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4790);
		  /* 821D4790h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D4790h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D4790h case    0:*/		return 0x821D4794;
	}
	return 0x821D4794;
} // Block from 821D4790h-821D4794h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D4794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4794);
		  /* 821D4794h */ case    0:  		/* addi R31, R11, -40 */
		/* 821D4794h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D4794h case    0:*/		return 0x821D4798;
		  /* 821D4798h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821D4798h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D4798h case    1:*/		return 0x821D479C;
		  /* 821D479Ch */ case    2:  		/* bc 4, CR6_EQ, -204 */
		/* 821D479Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D46D0;  }
		/* 821D479Ch case    2:*/		return 0x821D47A0;
	}
	return 0x821D47A0;
} // Block from 821D4794h-821D47A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D47A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47A0);
		  /* 821D47A0h */ case    0:  		/* lwz R29, <#[R1 + 188]> */
		/* 821D47A0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000BC) );
		/* 821D47A0h case    0:*/		return 0x821D47A4;
	}
	return 0x821D47A4;
} // Block from 821D47A0h-821D47A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D47A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47A4);
		  /* 821D47A4h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821D47A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821D47A4h case    0:*/		return 0x821D47A8;
		  /* 821D47A8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D47A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D47A8h case    1:*/		return 0x821D47AC;
		  /* 821D47ACh */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821D47ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x821D47D8;  }
		/* 821D47ACh case    2:*/		return 0x821D47B0;
		  /* 821D47B0h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D47B0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D47B0h case    3:*/		return 0x821D47B4;
		  /* 821D47B4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821D47B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D47B4h case    4:*/		return 0x821D47B8;
		  /* 821D47B8h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D47B8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D47C8;  }
		/* 821D47B8h case    5:*/		return 0x821D47BC;
		  /* 821D47BCh */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821D47BCh case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821D47BCh case    6:*/		return 0x821D47C0;
		  /* 821D47C0h */ case    7:  		/* cmplw CR6, R10, R16 */
		/* 821D47C0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 821D47C0h case    7:*/		return 0x821D47C4;
		  /* 821D47C4h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821D47C4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D47D0;  }
		/* 821D47C4h case    8:*/		return 0x821D47C8;
	}
	return 0x821D47C8;
} // Block from 821D47A4h-821D47C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D47C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47C8);
		  /* 821D47C8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D47C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D47C8h case    0:*/		return 0x821D47CC;
		  /* 821D47CCh */ case    1:  		/* b -36 */
		/* 821D47CCh case    1:*/		return 0x821D47A8;
		/* 821D47CCh case    1:*/		return 0x821D47D0;
	}
	return 0x821D47D0;
} // Block from 821D47C8h-821D47D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D47D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47D0);
		  /* 821D47D0h */ case    0:  		/* li R11, 1 */
		/* 821D47D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D47D0h case    0:*/		return 0x821D47D4;
		  /* 821D47D4h */ case    1:  		/* b 8 */
		/* 821D47D4h case    1:*/		return 0x821D47DC;
		/* 821D47D4h case    1:*/		return 0x821D47D8;
	}
	return 0x821D47D8;
} // Block from 821D47D0h-821D47D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D47D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47D8);
		  /* 821D47D8h */ case    0:  		/* li R11, 0 */
		/* 821D47D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D47D8h case    0:*/		return 0x821D47DC;
	}
	return 0x821D47DC;
} // Block from 821D47D8h-821D47DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D47DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D47DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D47DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D47DC);
		  /* 821D47DCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D47DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D47DCh case    0:*/		return 0x821D47E0;
		  /* 821D47E0h */ case    1:  		/* bc 4, CR0_EQ, 92 */
		/* 821D47E0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D483C;  }
		/* 821D47E0h case    1:*/		return 0x821D47E4;
		  /* 821D47E4h */ case    2:  		/* lwz R31, <#[R29 + 48]> */
		/* 821D47E4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000030) );
		/* 821D47E4h case    2:*/		return 0x821D47E8;
		  /* 821D47E8h */ case    3:  		/* lwz R30, <#[R1 + 184]> */
		/* 821D47E8h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000B8) );
		/* 821D47E8h case    3:*/		return 0x821D47EC;
		  /* 821D47ECh */ case    4:  		/* mr R3, R31 */
		/* 821D47ECh case    4:*/		regs.R3 = regs.R31;
		/* 821D47ECh case    4:*/		return 0x821D47F0;
		  /* 821D47F0h */ case    5:  		/* mr R4, R30 */
		/* 821D47F0h case    5:*/		regs.R4 = regs.R30;
		/* 821D47F0h case    5:*/		return 0x821D47F4;
		  /* 821D47F4h */ case    6:  		/* bl -95540 */
		/* 821D47F4h case    6:*/		regs.LR = 0x821D47F8; return 0x821BD2C0;
		/* 821D47F4h case    6:*/		return 0x821D47F8;
		  /* 821D47F8h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D47F8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D47F8h case    7:*/		return 0x821D47FC;
		  /* 821D47FCh */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821D47FCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821D4808;  }
		/* 821D47FCh case    8:*/		return 0x821D4800;
		  /* 821D4800h */ case    9:  		/* lwz R6, <#[R29 + 44]> */
		/* 821D4800h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D4800h case    9:*/		return 0x821D4804;
		  /* 821D4804h */ case   10:  		/* b 28 */
		/* 821D4804h case   10:*/		return 0x821D4820;
		/* 821D4804h case   10:*/		return 0x821D4808;
	}
	return 0x821D4808;
} // Block from 821D47DCh-821D4808h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D4808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4808);
		  /* 821D4808h */ case    0:  		/* mr R4, R30 */
		/* 821D4808h case    0:*/		regs.R4 = regs.R30;
		/* 821D4808h case    0:*/		return 0x821D480C;
		  /* 821D480Ch */ case    1:  		/* lwz R3, <#[R29 + 44]> */
		/* 821D480Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821D480Ch case    1:*/		return 0x821D4810;
		  /* 821D4810h */ case    2:  		/* bl -95568 */
		/* 821D4810h case    2:*/		regs.LR = 0x821D4814; return 0x821BD2C0;
		/* 821D4810h case    2:*/		return 0x821D4814;
		  /* 821D4814h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4814h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4814h case    3:*/		return 0x821D4818;
		  /* 821D4818h */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 821D4818h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D483C;  }
		/* 821D4818h case    4:*/		return 0x821D481C;
		  /* 821D481Ch */ case    5:  		/* mr R6, R31 */
		/* 821D481Ch case    5:*/		regs.R6 = regs.R31;
		/* 821D481Ch case    5:*/		return 0x821D4820;
	}
	return 0x821D4820;
} // Block from 821D4808h-821D4820h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D4820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4820);
		  /* 821D4820h */ case    0:  		/* cmplwi CR6, R6, 0 */
		/* 821D4820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821D4820h case    0:*/		return 0x821D4824;
		  /* 821D4824h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821D4824h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D483C;  }
		/* 821D4824h case    1:*/		return 0x821D4828;
		  /* 821D4828h */ case    2:  		/* mr R5, R29 */
		/* 821D4828h case    2:*/		regs.R5 = regs.R29;
		/* 821D4828h case    2:*/		return 0x821D482C;
		  /* 821D482Ch */ case    3:  		/* li R4, 0 */
		/* 821D482Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D482Ch case    3:*/		return 0x821D4830;
		  /* 821D4830h */ case    4:  		/* mr R3, R24 */
		/* 821D4830h case    4:*/		regs.R3 = regs.R24;
		/* 821D4830h case    4:*/		return 0x821D4834;
		  /* 821D4834h */ case    5:  		/* bl -79204 */
		/* 821D4834h case    5:*/		regs.LR = 0x821D4838; return 0x821C12D0;
		/* 821D4834h case    5:*/		return 0x821D4838;
		  /* 821D4838h */ case    6:  		/* b -1408 */
		/* 821D4838h case    6:*/		return 0x821D42B8;
		/* 821D4838h case    6:*/		return 0x821D483C;
	}
	return 0x821D483C;
} // Block from 821D4820h-821D483Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D483Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D483C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D483C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D483C);
		  /* 821D483Ch */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821D483Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821D483Ch case    0:*/		return 0x821D4840;
		  /* 821D4840h */ case    1:  		/* rlwinm R10, R27, 1, 0, 30 */
		/* 821D4840h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R27);
		/* 821D4840h case    1:*/		return 0x821D4844;
		  /* 821D4844h */ case    2:  		/* lwz R9, <#[R19 + 12]> */
		/* 821D4844h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D4844h case    2:*/		return 0x821D4848;
		  /* 821D4848h */ case    3:  		/* rlwinm R8, R11, 27, 24, 31 */
		/* 821D4848h case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R11);
		/* 821D4848h case    3:*/		return 0x821D484C;
		  /* 821D484Ch */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D484Ch case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D484Ch case    4:*/		return 0x821D4850;
		  /* 821D4850h */ case    5:  		/* srw R11, R8, R10 */
		/* 821D4850h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R8,regs.R10);
		/* 821D4850h case    5:*/		return 0x821D4854;
		  /* 821D4854h */ case    6:  		/* lhz R10, <#[R9 + 14]> */
		/* 821D4854h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000000E) );
		/* 821D4854h case    6:*/		return 0x821D4858;
		  /* 821D4858h */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D4858h case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D4858h case    7:*/		return 0x821D485C;
		  /* 821D485Ch */ case    8:  		/* srw R11, R10, R11 */
		/* 821D485Ch case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D485Ch case    8:*/		return 0x821D4860;
		  /* 821D4860h */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D4860h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D4860h case    9:*/		return 0x821D4864;
		  /* 821D4864h */ case   10:  		/* bl -235492 */
		/* 821D4864h case   10:*/		regs.LR = 0x821D4868; return 0x8219B080;
		/* 821D4864h case   10:*/		return 0x821D4868;
		  /* 821D4868h */ case   11:  		/* li R11, 1 */
		/* 821D4868h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D4868h case   11:*/		return 0x821D486C;
		  /* 821D486Ch */ case   12:  		/* rlwinm R9, R27, 2, 0, 29 */
		/* 821D486Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R27);
		/* 821D486Ch case   12:*/		return 0x821D4870;
		  /* 821D4870h */ case   13:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D4870h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D4870h case   13:*/		return 0x821D4874;
		  /* 821D4874h */ case   14:  		/* rlwimi R3, R11, 1, 29, 27 */
		/* 821D4874h case   14:*/		cpu::op::rlwimi<0,1,29,27>(regs,&regs.R3,regs.R11);
		/* 821D4874h case   14:*/		return 0x821D4878;
		  /* 821D4878h */ case   15:  		/* slw R11, R3, R9 */
		/* 821D4878h case   15:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R3,regs.R9);
		/* 821D4878h case   15:*/		return 0x821D487C;
		  /* 821D487Ch */ case   16:  		/* and R9, R11, R10 */
		/* 821D487Ch case   16:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D487Ch case   16:*/		return 0x821D4880;
		  /* 821D4880h */ case   17:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D4880h case   17:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D4880h case   17:*/		return 0x821D4884;
		  /* 821D4884h */ case   18:  		/* cmplw CR6, R9, R11 */
		/* 821D4884h case   18:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D4884h case   18:*/		return 0x821D4888;
		  /* 821D4888h */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 821D4888h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D4894;  }
		/* 821D4888h case   19:*/		return 0x821D488C;
		  /* 821D488Ch */ case   20:  		/* li R11, 0 */
		/* 821D488Ch case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D488Ch case   20:*/		return 0x821D4890;
		  /* 821D4890h */ case   21:  		/* b 16 */
		/* 821D4890h case   21:*/		return 0x821D48A0;
		/* 821D4890h case   21:*/		return 0x821D4894;
	}
	return 0x821D4894;
} // Block from 821D483Ch-821D4894h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D4894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4894);
		  /* 821D4894h */ case    0:  		/* or R10, R11, R10 */
		/* 821D4894h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D4894h case    0:*/		return 0x821D4898;
		  /* 821D4898h */ case    1:  		/* li R11, 1 */
		/* 821D4898h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D4898h case    1:*/		return 0x821D489C;
		  /* 821D489Ch */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D489Ch case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D489Ch case    2:*/		return 0x821D48A0;
	}
	return 0x821D48A0;
} // Block from 821D4894h-821D48A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D48A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D48A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D48A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D48A0);
		  /* 821D48A0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D48A0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D48A0h case    0:*/		return 0x821D48A4;
		  /* 821D48A4h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D48A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D48B8;  }
		/* 821D48A4h case    1:*/		return 0x821D48A8;
		  /* 821D48A8h */ case    2:  		/* mr R5, R26 */
		/* 821D48A8h case    2:*/		regs.R5 = regs.R26;
		/* 821D48A8h case    2:*/		return 0x821D48AC;
		  /* 821D48ACh */ case    3:  		/* mr R4, R16 */
		/* 821D48ACh case    3:*/		regs.R4 = regs.R16;
		/* 821D48ACh case    3:*/		return 0x821D48B0;
		  /* 821D48B0h */ case    4:  		/* mr R3, R24 */
		/* 821D48B0h case    4:*/		regs.R3 = regs.R24;
		/* 821D48B0h case    4:*/		return 0x821D48B4;
		  /* 821D48B4h */ case    5:  		/* bl -36436 */
		/* 821D48B4h case    5:*/		regs.LR = 0x821D48B8; return 0x821CBA60;
		/* 821D48B4h case    5:*/		return 0x821D48B8;
	}
	return 0x821D48B8;
} // Block from 821D48A0h-821D48B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D48B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D48B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D48B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D48B8);
		  /* 821D48B8h */ case    0:  		/* addi R4, R1, 1336 */
		/* 821D48B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x538);
		/* 821D48B8h case    0:*/		return 0x821D48BC;
		  /* 821D48BCh */ case    1:  		/* lfd FR1, <#[R1 + 800]> */
		/* 821D48BCh case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000320) );
		/* 821D48BCh case    1:*/		return 0x821D48C0;
		  /* 821D48C0h */ case    2:  		/* fmr FR31, FR27 */
		/* 821D48C0h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR27);
		/* 821D48C0h case    2:*/		return 0x821D48C4;
		  /* 821D48C4h */ case    3:  		/* fmr FR30, FR26 */
		/* 821D48C4h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR26);
		/* 821D48C4h case    3:*/		return 0x821D48C8;
		  /* 821D48C8h */ case    4:  		/* bl 609240 */
		/* 821D48C8h case    4:*/		regs.LR = 0x821D48CC; return 0x822694A0;
		/* 821D48C8h case    4:*/		return 0x821D48CC;
		  /* 821D48CCh */ case    5:  		/* addi R4, R1, 1144 */
		/* 821D48CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x478);
		/* 821D48CCh case    5:*/		return 0x821D48D0;
		  /* 821D48D0h */ case    6:  		/* lfd FR0, <#[R1 + 1336]> */
		/* 821D48D0h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000538) );
		/* 821D48D0h case    6:*/		return 0x821D48D4;
		  /* 821D48D4h */ case    7:  		/* lfd FR1, <#[R1 + 432]> */
		/* 821D48D4h case    7:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000001B0) );
		/* 821D48D4h case    7:*/		return 0x821D48D8;
		  /* 821D48D8h */ case    8:  		/* stfd FR0, <#[R1 + 176]> */
		/* 821D48D8h case    8:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D48D8h case    8:*/		return 0x821D48DC;
		  /* 821D48DCh */ case    9:  		/* bl 609220 */
		/* 821D48DCh case    9:*/		regs.LR = 0x821D48E0; return 0x822694A0;
		/* 821D48DCh case    9:*/		return 0x821D48E0;
		  /* 821D48E0h */ case   10:  		/* lfd FR0, <#[R1 + 432]> */
		/* 821D48E0h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000001B0) );
		/* 821D48E0h case   10:*/		return 0x821D48E4;
		  /* 821D48E4h */ case   11:  		/* lfd FR13, <#[R1 + 1144]> */
		/* 821D48E4h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000478) );
		/* 821D48E4h case   11:*/		return 0x821D48E8;
		  /* 821D48E8h */ case   12:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D48E8h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D48E8h case   12:*/		return 0x821D48EC;
		  /* 821D48ECh */ case   13:  		/* stfd FR13, <#[R1 + 192]> */
		/* 821D48ECh case   13:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D48ECh case   13:*/		return 0x821D48F0;
		  /* 821D48F0h */ case   14:  		/* bc 12, CR6_GT, 12 */
		/* 821D48F0h case   14:*/		if ( regs.CR[6].gt ) { return 0x821D48FC;  }
		/* 821D48F0h case   14:*/		return 0x821D48F4;
		  /* 821D48F4h */ case   15:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D48F4h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D48F4h case   15:*/		return 0x821D48F8;
		  /* 821D48F8h */ case   16:  		/* bc 12, CR6_EQ, 116 */
		/* 821D48F8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821D496C;  }
		/* 821D48F8h case   16:*/		return 0x821D48FC;
	}
	return 0x821D48FC;
} // Block from 821D48B8h-821D48FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D48FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D48FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D48FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D48FC);
		  /* 821D48FCh */ case    0:  		/* addi R11, R1, 176 */
		/* 821D48FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB0);
		/* 821D48FCh case    0:*/		return 0x821D4900;
		  /* 821D4900h */ case    1:  		/* addi R10, R1, 192 */
		/* 821D4900h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xC0);
		/* 821D4900h case    1:*/		return 0x821D4904;
		  /* 821D4904h */ case    2:  		/* addi R8, R11, 8 */
		/* 821D4904h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821D4904h case    2:*/		return 0x821D4908;
		  /* 821D4908h */ case    3:  		/* lbz R9, <#[R11]> */
		/* 821D4908h case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D4908h case    3:*/		return 0x821D490C;
		  /* 821D490Ch */ case    4:  		/* lbz R7, <#[R10]> */
		/* 821D490Ch case    4:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821D490Ch case    4:*/		return 0x821D4910;
		  /* 821D4910h */ case    5:  		/* subf. R9, R7, R9 */
		/* 821D4910h case    5:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821D4910h case    5:*/		return 0x821D4914;
		  /* 821D4914h */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 821D4914h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D4928;  }
		/* 821D4914h case    6:*/		return 0x821D4918;
		  /* 821D4918h */ case    7:  		/* addi R11, R11, 1 */
		/* 821D4918h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D4918h case    7:*/		return 0x821D491C;
		  /* 821D491Ch */ case    8:  		/* addi R10, R10, 1 */
		/* 821D491Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D491Ch case    8:*/		return 0x821D4920;
		  /* 821D4920h */ case    9:  		/* cmpw CR6, R11, R8 */
		/* 821D4920h case    9:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821D4920h case    9:*/		return 0x821D4924;
		  /* 821D4924h */ case   10:  		/* bc 4, CR6_EQ, -28 */
		/* 821D4924h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D4908;  }
		/* 821D4924h case   10:*/		return 0x821D4928;
	}
	return 0x821D4928;
} // Block from 821D48FCh-821D4928h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D4928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4928);
		  /* 821D4928h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 821D4928h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 821D4928h case    0:*/		return 0x821D492C;
		  /* 821D492Ch */ case    1:  		/* bc 4, CR0_EQ, 64 */
		/* 821D492Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D496C;  }
		/* 821D492Ch case    1:*/		return 0x821D4930;
		  /* 821D4930h */ case    2:  		/* lfd FR1, <#[R1 + 800]> */
		/* 821D4930h case    2:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000320) );
		/* 821D4930h case    2:*/		return 0x821D4934;
		  /* 821D4934h */ case    3:  		/* fmr FR31, FR1 */
		/* 821D4934h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D4934h case    3:*/		return 0x821D4938;
		  /* 821D4938h */ case    4:  		/* bl -96856 */
		/* 821D4938h case    4:*/		regs.LR = 0x821D493C; return 0x821BCEE0;
		/* 821D4938h case    4:*/		return 0x821D493C;
		  /* 821D493Ch */ case    5:  		/* bl -1296796 */
		/* 821D493Ch case    5:*/		regs.LR = 0x821D4940; return 0x82097FA0;
		/* 821D493Ch case    5:*/		return 0x821D4940;
		  /* 821D4940h */ case    6:  		/* fadd FR1, FR1, FR31 */
		/* 821D4940h case    6:*/		cpu::op::fadd<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 821D4940h case    6:*/		return 0x821D4944;
		  /* 821D4944h */ case    7:  		/* bl -96948 */
		/* 821D4944h case    7:*/		regs.LR = 0x821D4948; return 0x821BCE90;
		/* 821D4944h case    7:*/		return 0x821D4948;
		  /* 821D4948h */ case    8:  		/* lfd FR0, <#[R1 + 432]> */
		/* 821D4948h case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000001B0) );
		/* 821D4948h case    8:*/		return 0x821D494C;
		  /* 821D494Ch */ case    9:  		/* fmr FR31, FR1 */
		/* 821D494Ch case    9:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D494Ch case    9:*/		return 0x821D4950;
		  /* 821D4950h */ case   10:  		/* fmr FR30, FR0 */
		/* 821D4950h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR0);
		/* 821D4950h case   10:*/		return 0x821D4954;
		  /* 821D4954h */ case   11:  		/* fmr FR1, FR0 */
		/* 821D4954h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D4954h case   11:*/		return 0x821D4958;
		  /* 821D4958h */ case   12:  		/* bl -96888 */
		/* 821D4958h case   12:*/		regs.LR = 0x821D495C; return 0x821BCEE0;
		/* 821D4958h case   12:*/		return 0x821D495C;
		  /* 821D495Ch */ case   13:  		/* bl -1296828 */
		/* 821D495Ch case   13:*/		regs.LR = 0x821D4960; return 0x82097FA0;
		/* 821D495Ch case   13:*/		return 0x821D4960;
		  /* 821D4960h */ case   14:  		/* fadd FR1, FR1, FR30 */
		/* 821D4960h case   14:*/		cpu::op::fadd<0>(regs,&regs.FR1,regs.FR1,regs.FR30);
		/* 821D4960h case   14:*/		return 0x821D4964;
		  /* 821D4964h */ case   15:  		/* bl -96980 */
		/* 821D4964h case   15:*/		regs.LR = 0x821D4968; return 0x821BCE90;
		/* 821D4964h case   15:*/		return 0x821D4968;
		  /* 821D4968h */ case   16:  		/* fmr FR30, FR1 */
		/* 821D4968h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 821D4968h case   16:*/		return 0x821D496C;
	}
	return 0x821D496C;
} // Block from 821D4928h-821D496Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D496Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D496C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D496C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D496C);
		  /* 821D496Ch */ case    0:  		/* mr R7, R24 */
		/* 821D496Ch case    0:*/		regs.R7 = regs.R24;
		/* 821D496Ch case    0:*/		return 0x821D4970;
		  /* 821D4970h */ case    1:  		/* fmr FR2, FR30 */
		/* 821D4970h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821D4970h case    1:*/		return 0x821D4974;
		  /* 821D4974h */ case    2:  		/* mr R4, R27 */
		/* 821D4974h case    2:*/		regs.R4 = regs.R27;
		/* 821D4974h case    2:*/		return 0x821D4978;
		  /* 821D4978h */ case    3:  		/* fmr FR1, FR31 */
		/* 821D4978h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821D4978h case    3:*/		return 0x821D497C;
		  /* 821D497Ch */ case    4:  		/* mr R3, R16 */
		/* 821D497Ch case    4:*/		regs.R3 = regs.R16;
		/* 821D497Ch case    4:*/		return 0x821D4980;
		  /* 821D4980h */ case    5:  		/* bl 319904 */
		/* 821D4980h case    5:*/		regs.LR = 0x821D4984; return 0x82222B20;
		/* 821D4980h case    5:*/		return 0x821D4984;
		  /* 821D4984h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4984h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4984h case    6:*/		return 0x821D4988;
		  /* 821D4988h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 821D4988h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D499C;  }
		/* 821D4988h case    7:*/		return 0x821D498C;
		  /* 821D498Ch */ case    8:  		/* mr R5, R26 */
		/* 821D498Ch case    8:*/		regs.R5 = regs.R26;
		/* 821D498Ch case    8:*/		return 0x821D4990;
		  /* 821D4990h */ case    9:  		/* mr R4, R16 */
		/* 821D4990h case    9:*/		regs.R4 = regs.R16;
		/* 821D4990h case    9:*/		return 0x821D4994;
		  /* 821D4994h */ case   10:  		/* mr R3, R24 */
		/* 821D4994h case   10:*/		regs.R3 = regs.R24;
		/* 821D4994h case   10:*/		return 0x821D4998;
		  /* 821D4998h */ case   11:  		/* bl -36664 */
		/* 821D4998h case   11:*/		regs.LR = 0x821D499C; return 0x821CBA60;
		/* 821D4998h case   11:*/		return 0x821D499C;
	}
	return 0x821D499C;
} // Block from 821D496Ch-821D499Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D499Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D499C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D499C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D499C);
		  /* 821D499Ch */ case    0:  		/* addi R27, R27, 1 */
		/* 821D499Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821D499Ch case    0:*/		return 0x821D49A0;
		  /* 821D49A0h */ case    1:  		/* cmplw CR6, R27, R18 */
		/* 821D49A0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R18);
		/* 821D49A0h case    1:*/		return 0x821D49A4;
		  /* 821D49A4h */ case    2:  		/* bc 12, CR6_LT, -2040 */
		/* 821D49A4h case    2:*/		if ( regs.CR[6].lt ) { return 0x821D41AC;  }
		/* 821D49A4h case    2:*/		return 0x821D49A8;
	}
	return 0x821D49A8;
} // Block from 821D499Ch-821D49A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D49A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D49A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D49A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D49A8);
		  /* 821D49A8h */ case    0:  		/* mr R3, R16 */
		/* 821D49A8h case    0:*/		regs.R3 = regs.R16;
		/* 821D49A8h case    0:*/		return 0x821D49AC;
		  /* 821D49ACh */ case    1:  		/* bl -458796 */
		/* 821D49ACh case    1:*/		regs.LR = 0x821D49B0; return 0x82164980;
		/* 821D49ACh case    1:*/		return 0x821D49B0;
		  /* 821D49B0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D49B0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D49B0h case    2:*/		return 0x821D49B4;
		  /* 821D49B4h */ case    3:  		/* bc 4, CR0_EQ, 9008 */
		/* 821D49B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D49B4h case    3:*/		return 0x821D49B8;
		  /* 821D49B8h */ case    4:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D49B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D49B8h case    4:*/		return 0x821D49BC;
		  /* 821D49BCh */ case    5:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D49BCh case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D49BCh case    5:*/		return 0x821D49C0;
		  /* 821D49C0h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 821D49C0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D49C0h case    6:*/		return 0x821D49C4;
		  /* 821D49C4h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821D49C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D49D4;  }
		/* 821D49C4h case    7:*/		return 0x821D49C8;
		  /* 821D49C8h */ case    8:  		/* cmplwi CR6, R11, 12 */
		/* 821D49C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 821D49C8h case    8:*/		return 0x821D49CC;
		  /* 821D49CCh */ case    9:  		/* li R11, 0 */
		/* 821D49CCh case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D49CCh case    9:*/		return 0x821D49D0;
		  /* 821D49D0h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 821D49D0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D49D8;  }
		/* 821D49D0h case   10:*/		return 0x821D49D4;
	}
	return 0x821D49D4;
} // Block from 821D49A8h-821D49D4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D49D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D49D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D49D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D49D4);
		  /* 821D49D4h */ case    0:  		/* li R11, 1 */
		/* 821D49D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D49D4h case    0:*/		return 0x821D49D8;
	}
	return 0x821D49D8;
} // Block from 821D49D4h-821D49D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D49D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D49D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D49D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D49D8);
		  /* 821D49D8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D49D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D49D8h case    0:*/		return 0x821D49DC;
		  /* 821D49DCh */ case    1:  		/* bc 12, CR0_EQ, 8968 */
		/* 821D49DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D49DCh case    1:*/		return 0x821D49E0;
		  /* 821D49E0h */ case    2:  		/* lwz R11, <#[R1 + 1908]> */
		/* 821D49E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000774) );
		/* 821D49E0h case    2:*/		return 0x821D49E4;
		  /* 821D49E4h */ case    3:  		/* lwz R11, <#[R11 + 44]> */
		/* 821D49E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D49E4h case    3:*/		return 0x821D49E8;
		  /* 821D49E8h */ case    4:  		/* rlwinm. R11, R11, 0, 14, 14 */
		/* 821D49E8h case    4:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R11,regs.R11);
		/* 821D49E8h case    4:*/		return 0x821D49EC;
		  /* 821D49ECh */ case    5:  		/* bc 4, CR0_EQ, 8952 */
		/* 821D49ECh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D49ECh case    5:*/		return 0x821D49F0;
		  /* 821D49F0h */ case    6:  		/* lwz R10, <#[R16 + 4]> */
		/* 821D49F0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000004) );
		/* 821D49F0h case    6:*/		return 0x821D49F4;
		  /* 821D49F4h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821D49F4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D49F4h case    7:*/		return 0x821D49F8;
		  /* 821D49F8h */ case    8:  		/* bc 12, CR6_EQ, 8028 */
		/* 821D49F8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D6954;  }
		/* 821D49F8h case    8:*/		return 0x821D49FC;
		  /* 821D49FCh */ case    9:  		/* lwz R11, <#[R10 + 16]> */
		/* 821D49FCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821D49FCh case    9:*/		return 0x821D4A00;
		  /* 821D4A00h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821D4A00h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D4A00h case   10:*/		return 0x821D4A04;
		  /* 821D4A04h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 821D4A04h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D4A40;  }
		/* 821D4A04h case   11:*/		return 0x821D4A08;
		  /* 821D4A08h */ case   12:  		/* lwz R11, <#[R10]> */
		/* 821D4A08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D4A08h case   12:*/		return 0x821D4A0C;
		  /* 821D4A0Ch */ case   13:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D4A0Ch case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D4A0Ch case   13:*/		return 0x821D4A10;
		  /* 821D4A10h */ case   14:  		/* bc 12, CR0_EQ, 48 */
		/* 821D4A10h case   14:*/		if ( regs.CR[0].eq ) { return 0x821D4A40;  }
		/* 821D4A10h case   14:*/		return 0x821D4A14;
		  /* 821D4A14h */ case   15:  		/* lwz R11, <#[R10 + 16]> */
		/* 821D4A14h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821D4A14h case   15:*/		return 0x821D4A18;
		  /* 821D4A18h */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D4A18h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4A18h case   16:*/		return 0x821D4A1C;
		  /* 821D4A1Ch */ case   17:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D4A1Ch case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D4A1Ch case   17:*/		return 0x821D4A20;
		  /* 821D4A20h */ case   18:  		/* cmplwi CR6, R11, 1 */
		/* 821D4A20h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D4A20h case   18:*/		return 0x821D4A24;
		  /* 821D4A24h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 821D4A24h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D4A34;  }
		/* 821D4A24h case   19:*/		return 0x821D4A28;
		  /* 821D4A28h */ case   20:  		/* cmplwi CR6, R11, 12 */
		/* 821D4A28h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 821D4A28h case   20:*/		return 0x821D4A2C;
		  /* 821D4A2Ch */ case   21:  		/* li R11, 0 */
		/* 821D4A2Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D4A2Ch case   21:*/		return 0x821D4A30;
		  /* 821D4A30h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 821D4A30h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D4A38;  }
		/* 821D4A30h case   22:*/		return 0x821D4A34;
	}
	return 0x821D4A34;
} // Block from 821D49D8h-821D4A34h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D4A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4A34);
		  /* 821D4A34h */ case    0:  		/* li R11, 1 */
		/* 821D4A34h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D4A34h case    0:*/		return 0x821D4A38;
	}
	return 0x821D4A38;
} // Block from 821D4A34h-821D4A38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D4A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4A38);
		  /* 821D4A38h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D4A38h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D4A38h case    0:*/		return 0x821D4A3C;
		  /* 821D4A3Ch */ case    1:  		/* bc 4, CR0_EQ, 8872 */
		/* 821D4A3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D4A3Ch case    1:*/		return 0x821D4A40;
	}
	return 0x821D4A40;
} // Block from 821D4A38h-821D4A40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4A40);
		  /* 821D4A40h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D4A40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D4A40h case    0:*/		return 0x821D4A44;
		  /* 821D4A44h */ case    1:  		/* b -80 */
		/* 821D4A44h case    1:*/		return 0x821D49F4;
		/* 821D4A44h case    1:*/		return 0x821D4A48;
	}
	return 0x821D4A48;
} // Block from 821D4A40h-821D4A48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4A48);
		  /* 821D4A48h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 821D4A48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821D4A48h case    0:*/		return 0x821D4A4C;
		  /* 821D4A4Ch */ case    1:  		/* bc 4, CR6_EQ, 5488 */
		/* 821D4A4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D5FBC;  }
		/* 821D4A4Ch case    1:*/		return 0x821D4A50;
		  /* 821D4A50h */ case    2:  		/* li R21, 0 */
		/* 821D4A50h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821D4A50h case    2:*/		return 0x821D4A54;
		  /* 821D4A54h */ case    3:  		/* lwz R22, <#[R16 + 48]> */
		/* 821D4A54h case    3:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R16 + 0x00000030) );
		/* 821D4A54h case    3:*/		return 0x821D4A58;
		  /* 821D4A58h */ case    4:  		/* cmplwi CR6, R18, 0 */
		/* 821D4A58h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821D4A58h case    4:*/		return 0x821D4A5C;
		  /* 821D4A5Ch */ case    5:  		/* mr R27, R21 */
		/* 821D4A5Ch case    5:*/		regs.R27 = regs.R21;
		/* 821D4A5Ch case    5:*/		return 0x821D4A60;
		  /* 821D4A60h */ case    6:  		/* bc 12, CR6_EQ, -184 */
		/* 821D4A60h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D49A8;  }
		/* 821D4A60h case    6:*/		return 0x821D4A64;
		  /* 821D4A64h */ case    7:  		/* lis R11, -32256 */
		/* 821D4A64h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D4A64h case    7:*/		return 0x821D4A68;
		  /* 821D4A68h */ case    8:  		/* lwz R25, <#[R1 + 112]> */
		/* 821D4A68h case    8:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 821D4A68h case    8:*/		return 0x821D4A6C;
		  /* 821D4A6Ch */ case    9:  		/* lwz R23, <#[R1 + 1924]> */
		/* 821D4A6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000784) );
		/* 821D4A6Ch case    9:*/		return 0x821D4A70;
		  /* 821D4A70h */ case   10:  		/* lfs FR28, <#[R11 + 1792]> */
		/* 821D4A70h case   10:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000700) );
		/* 821D4A70h case   10:*/		return 0x821D4A74;
		  /* 821D4A74h */ case   11:  		/* li R10, 0 */
		/* 821D4A74h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4A74h case   11:*/		return 0x821D4A78;
		  /* 821D4A78h */ case   12:  		/* mr R9, R16 */
		/* 821D4A78h case   12:*/		regs.R9 = regs.R16;
		/* 821D4A78h case   12:*/		return 0x821D4A7C;
		  /* 821D4A7Ch */ case   13:  		/* li R8, 0 */
		/* 821D4A7Ch case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4A7Ch case   13:*/		return 0x821D4A80;
		  /* 821D4A80h */ case   14:  		/* addi R7, R1, 132 */
		/* 821D4A80h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x84);
		/* 821D4A80h case   14:*/		return 0x821D4A84;
		  /* 821D4A84h */ case   15:  		/* addi R6, R1, 120 */
		/* 821D4A84h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 821D4A84h case   15:*/		return 0x821D4A88;
		  /* 821D4A88h */ case   16:  		/* addi R5, R1, 116 */
		/* 821D4A88h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 821D4A88h case   16:*/		return 0x821D4A8C;
		  /* 821D4A8Ch */ case   17:  		/* mr R4, R27 */
		/* 821D4A8Ch case   17:*/		regs.R4 = regs.R27;
		/* 821D4A8Ch case   17:*/		return 0x821D4A90;
		  /* 821D4A90h */ case   18:  		/* mr R3, R19 */
		/* 821D4A90h case   18:*/		regs.R3 = regs.R19;
		/* 821D4A90h case   18:*/		return 0x821D4A94;
		  /* 821D4A94h */ case   19:  		/* bl 322108 */
		/* 821D4A94h case   19:*/		regs.LR = 0x821D4A98; return 0x822234D0;
		/* 821D4A94h case   19:*/		return 0x821D4A98;
		  /* 821D4A98h */ case   20:  		/* li R10, 0 */
		/* 821D4A98h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4A98h case   20:*/		return 0x821D4A9C;
		  /* 821D4A9Ch */ case   21:  		/* mr R9, R16 */
		/* 821D4A9Ch case   21:*/		regs.R9 = regs.R16;
		/* 821D4A9Ch case   21:*/		return 0x821D4AA0;
		  /* 821D4AA0h */ case   22:  		/* li R8, 0 */
		/* 821D4AA0h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4AA0h case   22:*/		return 0x821D4AA4;
		  /* 821D4AA4h */ case   23:  		/* addi R7, R1, 128 */
		/* 821D4AA4h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 821D4AA4h case   23:*/		return 0x821D4AA8;
		  /* 821D4AA8h */ case   24:  		/* addi R6, R1, 136 */
		/* 821D4AA8h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x88);
		/* 821D4AA8h case   24:*/		return 0x821D4AAC;
		  /* 821D4AACh */ case   25:  		/* addi R5, R1, 124 */
		/* 821D4AACh case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 821D4AACh case   25:*/		return 0x821D4AB0;
		  /* 821D4AB0h */ case   26:  		/* mr R4, R27 */
		/* 821D4AB0h case   26:*/		regs.R4 = regs.R27;
		/* 821D4AB0h case   26:*/		return 0x821D4AB4;
		  /* 821D4AB4h */ case   27:  		/* mr R3, R22 */
		/* 821D4AB4h case   27:*/		regs.R3 = regs.R22;
		/* 821D4AB4h case   27:*/		return 0x821D4AB8;
		  /* 821D4AB8h */ case   28:  		/* bl 322072 */
		/* 821D4AB8h case   28:*/		regs.LR = 0x821D4ABC; return 0x822234D0;
		/* 821D4AB8h case   28:*/		return 0x821D4ABC;
		  /* 821D4ABCh */ case   29:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D4ABCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D4ABCh case   29:*/		return 0x821D4AC0;
		  /* 821D4AC0h */ case   30:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D4AC0h case   30:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D4AC0h case   30:*/		return 0x821D4AC4;
		  /* 821D4AC4h */ case   31:  		/* addi R11, R11, -1 */
		/* 821D4AC4h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D4AC4h case   31:*/		return 0x821D4AC8;
		  /* 821D4AC8h */ case   32:  		/* cmplwi CR6, R11, 7 */
		/* 821D4AC8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D4AC8h case   32:*/		return 0x821D4ACC;
		  /* 821D4ACCh */ case   33:  		/* bc 12, CR6_GT, 5336 */
		/* 821D4ACCh case   33:*/		if ( regs.CR[6].gt ) { return 0x821D5FA4;  }
		/* 821D4ACCh case   33:*/		return 0x821D4AD0;
		  /* 821D4AD0h */ case   34:  		/* mtspr CTR, R11 */
		/* 821D4AD0h case   34:*/		regs.CTR = regs.R11;
		/* 821D4AD0h case   34:*/		return 0x821D4AD4;
		  /* 821D4AD4h */ case   35:  		/* cmpwi CR6, R11, 0 */
		/* 821D4AD4h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821D4AD4h case   35:*/		return 0x821D4AD8;
		  /* 821D4AD8h */ case   36:  		/* bc 2, CR6_EQ, 1896 */
		/* 821D4AD8h case   36:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D5240;  }
		/* 821D4AD8h case   36:*/		return 0x821D4ADC;
		  /* 821D4ADCh */ case   37:  		/* bc 2, CR6_EQ, 1948 */
		/* 821D4ADCh case   37:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D5278;  }
		/* 821D4ADCh case   37:*/		return 0x821D4AE0;
		  /* 821D4AE0h */ case   38:  		/* bc 2, CR6_EQ, 2940 */
		/* 821D4AE0h case   38:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D565C;  }
		/* 821D4AE0h case   38:*/		return 0x821D4AE4;
		  /* 821D4AE4h */ case   39:  		/* bc 2, CR6_EQ, 3924 */
		/* 821D4AE4h case   39:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D5A38;  }
		/* 821D4AE4h case   39:*/		return 0x821D4AE8;
		  /* 821D4AE8h */ case   40:  		/* bc 2, CR6_EQ, 4060 */
		/* 821D4AE8h case   40:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D5AC4;  }
		/* 821D4AE8h case   40:*/		return 0x821D4AEC;
		  /* 821D4AECh */ case   41:  		/* bc 2, CR6_EQ, 4464 */
		/* 821D4AECh case   41:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR == 0 && !regs.CR[6].eq ) { return 0x821D5C5C;  }
		/* 821D4AECh case   41:*/		return 0x821D4AF0;
		  /* 821D4AF0h */ case   42:  		/* bc 4, CR6_EQ, 4700 */
		/* 821D4AF0h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821D5D4C;  }
		/* 821D4AF0h case   42:*/		return 0x821D4AF4;
		  /* 821D4AF4h */ case   43:  		/* mr R4, R27 */
		/* 821D4AF4h case   43:*/		regs.R4 = regs.R27;
		/* 821D4AF4h case   43:*/		return 0x821D4AF8;
		  /* 821D4AF8h */ case   44:  		/* mr R3, R22 */
		/* 821D4AF8h case   44:*/		regs.R3 = regs.R22;
		/* 821D4AF8h case   44:*/		return 0x821D4AFC;
		  /* 821D4AFCh */ case   45:  		/* bl -235988 */
		/* 821D4AFCh case   45:*/		regs.LR = 0x821D4B00; return 0x8219B128;
		/* 821D4AFCh case   45:*/		return 0x821D4B00;
		  /* 821D4B00h */ case   46:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D4B00h case   46:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D4B00h case   46:*/		return 0x821D4B04;
		  /* 821D4B04h */ case   47:  		/* bc 12, CR0_EQ, 20 */
		/* 821D4B04h case   47:*/		if ( regs.CR[0].eq ) { return 0x821D4B18;  }
		/* 821D4B04h case   47:*/		return 0x821D4B08;
		  /* 821D4B08h */ case   48:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D4B08h case   48:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D4B08h case   48:*/		return 0x821D4B0C;
		  /* 821D4B0Ch */ case   49:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D4B0Ch case   49:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D4B0Ch case   49:*/		return 0x821D4B10;
		  /* 821D4B10h */ case   50:  		/* lwz R6, <#[R1 + 116]> */
		/* 821D4B10h case   50:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000074) );
		/* 821D4B10h case   50:*/		return 0x821D4B14;
		  /* 821D4B14h */ case   51:  		/* b 5240 */
		/* 821D4B14h case   51:*/		return 0x821D5F8C;
		/* 821D4B14h case   51:*/		return 0x821D4B18;
	}
	return 0x821D4B18;
} // Block from 821D4A48h-821D4B18h (52 instructions)

//////////////////////////////////////////////////////
// Block at 821D4B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4B18);
		  /* 821D4B18h */ case    0:  		/* lwz R9, <#[R1 + 116]> */
		/* 821D4B18h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 821D4B18h case    0:*/		return 0x821D4B1C;
		  /* 821D4B1Ch */ case    1:  		/* lwz R11, <#[R9 + 8]> */
		/* 821D4B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821D4B1Ch case    1:*/		return 0x821D4B20;
		  /* 821D4B20h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4B20h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4B20h case    2:*/		return 0x821D4B24;
		  /* 821D4B24h */ case    3:  		/* cmplwi CR6, R11, 1152 */
		/* 821D4B24h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000480);
		/* 821D4B24h case    3:*/		return 0x821D4B28;
		  /* 821D4B28h */ case    4:  		/* bc 4, CR6_EQ, 248 */
		/* 821D4B28h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D4C20;  }
		/* 821D4B28h case    4:*/		return 0x821D4B2C;
		  /* 821D4B2Ch */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D4B2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D4B2Ch case    5:*/		return 0x821D4B30;
		  /* 821D4B30h */ case    6:  		/* cmplwi CR6, R11, 4 */
		/* 821D4B30h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821D4B30h case    6:*/		return 0x821D4B34;
		  /* 821D4B34h */ case    7:  		/* bc 4, CR6_EQ, 236 */
		/* 821D4B34h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D4C20;  }
		/* 821D4B34h case    7:*/		return 0x821D4B38;
		  /* 821D4B38h */ case    8:  		/* lwz R3, <#[R9 + 44]> */
		/* 821D4B38h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x0000002C) );
		/* 821D4B38h case    8:*/		return 0x821D4B3C;
		  /* 821D4B3Ch */ case    9:  		/* li R10, 0 */
		/* 821D4B3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4B3Ch case    9:*/		return 0x821D4B40;
		  /* 821D4B40h */ case   10:  		/* mr R9, R16 */
		/* 821D4B40h case   10:*/		regs.R9 = regs.R16;
		/* 821D4B40h case   10:*/		return 0x821D4B44;
		  /* 821D4B44h */ case   11:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D4B44h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D4B44h case   11:*/		return 0x821D4B48;
		  /* 821D4B48h */ case   12:  		/* li R8, 0 */
		/* 821D4B48h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4B48h case   12:*/		return 0x821D4B4C;
		  /* 821D4B4Ch */ case   13:  		/* addi R7, R1, 300 */
		/* 821D4B4Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x12C);
		/* 821D4B4Ch case   13:*/		return 0x821D4B50;
		  /* 821D4B50h */ case   14:  		/* addi R6, R1, 252 */
		/* 821D4B50h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 821D4B50h case   14:*/		return 0x821D4B54;
		  /* 821D4B54h */ case   15:  		/* addi R5, R1, 256 */
		/* 821D4B54h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 821D4B54h case   15:*/		return 0x821D4B58;
		  /* 821D4B58h */ case   16:  		/* bl 321912 */
		/* 821D4B58h case   16:*/		regs.LR = 0x821D4B5C; return 0x822234D0;
		/* 821D4B58h case   16:*/		return 0x821D4B5C;
		  /* 821D4B5Ch */ case   17:  		/* lwz R4, <#[R1 + 256]> */
		/* 821D4B5Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000100) );
		/* 821D4B5Ch case   17:*/		return 0x821D4B60;
		  /* 821D4B60h */ case   18:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D4B60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D4B60h case   18:*/		return 0x821D4B64;
		  /* 821D4B64h */ case   19:  		/* cmplw CR6, R4, R11 */
		/* 821D4B64h case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821D4B64h case   19:*/		return 0x821D4B68;
		  /* 821D4B68h */ case   20:  		/* bc 4, CR6_EQ, 36 */
		/* 821D4B68h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D4B8C;  }
		/* 821D4B68h case   20:*/		return 0x821D4B6C;
		  /* 821D4B6Ch */ case   21:  		/* lwz R5, <#[R1 + 252]> */
		/* 821D4B6Ch case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000FC) );
		/* 821D4B6Ch case   21:*/		return 0x821D4B70;
		  /* 821D4B70h */ case   22:  		/* lwz R10, <#[R1 + 136]> */
		/* 821D4B70h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821D4B70h case   22:*/		return 0x821D4B74;
		  /* 821D4B74h */ case   23:  		/* cmpw CR6, R5, R10 */
		/* 821D4B74h case   23:*/		cpu::op::cmpw<6>(regs,regs.R5,regs.R10);
		/* 821D4B74h case   23:*/		return 0x821D4B78;
		  /* 821D4B78h */ case   24:  		/* bc 4, CR6_EQ, 20 */
		/* 821D4B78h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D4B8C;  }
		/* 821D4B78h case   24:*/		return 0x821D4B7C;
		  /* 821D4B7Ch */ case   25:  		/* lwz R6, <#[R1 + 300]> */
		/* 821D4B7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000012C) );
		/* 821D4B7Ch case   25:*/		return 0x821D4B80;
		  /* 821D4B80h */ case   26:  		/* lwz R10, <#[R1 + 128]> */
		/* 821D4B80h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821D4B80h case   26:*/		return 0x821D4B84;
		  /* 821D4B84h */ case   27:  		/* cmplw CR6, R6, R10 */
		/* 821D4B84h case   27:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R10);
		/* 821D4B84h case   27:*/		return 0x821D4B88;
		  /* 821D4B88h */ case   28:  		/* bc 12, CR6_EQ, 120 */
		/* 821D4B88h case   28:*/		if ( regs.CR[6].eq ) { return 0x821D4C00;  }
		/* 821D4B88h case   28:*/		return 0x821D4B8C;
	}
	return 0x821D4B8C;
} // Block from 821D4B18h-821D4B8Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D4B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4B8C);
		  /* 821D4B8Ch */ case    0:  		/* lwz R9, <#[R1 + 116]> */
		/* 821D4B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 821D4B8Ch case    0:*/		return 0x821D4B90;
		  /* 821D4B90h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D4B90h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4B90h case    1:*/		return 0x821D4B94;
		  /* 821D4B94h */ case    2:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D4B94h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D4B94h case    2:*/		return 0x821D4B98;
		  /* 821D4B98h */ case    3:  		/* cmplwi CR6, R10, 1152 */
		/* 821D4B98h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000480);
		/* 821D4B98h case    3:*/		return 0x821D4B9C;
		  /* 821D4B9Ch */ case    4:  		/* bc 4, CR6_EQ, 144 */
		/* 821D4B9Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D4C2C;  }
		/* 821D4B9Ch case    4:*/		return 0x821D4BA0;
		  /* 821D4BA0h */ case    5:  		/* lwz R10, <#[R1 + 128]> */
		/* 821D4BA0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821D4BA0h case    5:*/		return 0x821D4BA4;
		  /* 821D4BA4h */ case    6:  		/* cmplwi CR6, R10, 4 */
		/* 821D4BA4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821D4BA4h case    6:*/		return 0x821D4BA8;
		  /* 821D4BA8h */ case    7:  		/* bc 4, CR6_EQ, 132 */
		/* 821D4BA8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D4C2C;  }
		/* 821D4BA8h case    7:*/		return 0x821D4BAC;
		  /* 821D4BACh */ case    8:  		/* li R10, 0 */
		/* 821D4BACh case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4BACh case    8:*/		return 0x821D4BB0;
		  /* 821D4BB0h */ case    9:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D4BB0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D4BB0h case    9:*/		return 0x821D4BB4;
		  /* 821D4BB4h */ case   10:  		/* mr R9, R16 */
		/* 821D4BB4h case   10:*/		regs.R9 = regs.R16;
		/* 821D4BB4h case   10:*/		return 0x821D4BB8;
		  /* 821D4BB8h */ case   11:  		/* lwz R4, <#[R1 + 136]> */
		/* 821D4BB8h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821D4BB8h case   11:*/		return 0x821D4BBC;
		  /* 821D4BBCh */ case   12:  		/* li R8, 0 */
		/* 821D4BBCh case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4BBCh case   12:*/		return 0x821D4BC0;
		  /* 821D4BC0h */ case   13:  		/* addi R7, R1, 300 */
		/* 821D4BC0h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x12C);
		/* 821D4BC0h case   13:*/		return 0x821D4BC4;
		  /* 821D4BC4h */ case   14:  		/* addi R6, R1, 252 */
		/* 821D4BC4h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFC);
		/* 821D4BC4h case   14:*/		return 0x821D4BC8;
		  /* 821D4BC8h */ case   15:  		/* addi R5, R1, 256 */
		/* 821D4BC8h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 821D4BC8h case   15:*/		return 0x821D4BCC;
		  /* 821D4BCCh */ case   16:  		/* bl 321796 */
		/* 821D4BCCh case   16:*/		regs.LR = 0x821D4BD0; return 0x822234D0;
		/* 821D4BCCh case   16:*/		return 0x821D4BD0;
		  /* 821D4BD0h */ case   17:  		/* lwz R4, <#[R1 + 256]> */
		/* 821D4BD0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000100) );
		/* 821D4BD0h case   17:*/		return 0x821D4BD4;
		  /* 821D4BD4h */ case   18:  		/* lwz R9, <#[R1 + 116]> */
		/* 821D4BD4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 821D4BD4h case   18:*/		return 0x821D4BD8;
		  /* 821D4BD8h */ case   19:  		/* cmplw CR6, R4, R9 */
		/* 821D4BD8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 821D4BD8h case   19:*/		return 0x821D4BDC;
		  /* 821D4BDCh */ case   20:  		/* bc 4, CR6_EQ, 76 */
		/* 821D4BDCh case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D4C28;  }
		/* 821D4BDCh case   20:*/		return 0x821D4BE0;
		  /* 821D4BE0h */ case   21:  		/* lwz R5, <#[R1 + 252]> */
		/* 821D4BE0h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000FC) );
		/* 821D4BE0h case   21:*/		return 0x821D4BE4;
		  /* 821D4BE4h */ case   22:  		/* lwz R11, <#[R1 + 120]> */
		/* 821D4BE4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821D4BE4h case   22:*/		return 0x821D4BE8;
		  /* 821D4BE8h */ case   23:  		/* cmpw CR6, R5, R11 */
		/* 821D4BE8h case   23:*/		cpu::op::cmpw<6>(regs,regs.R5,regs.R11);
		/* 821D4BE8h case   23:*/		return 0x821D4BEC;
		  /* 821D4BECh */ case   24:  		/* bc 4, CR6_EQ, 60 */
		/* 821D4BECh case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D4C28;  }
		/* 821D4BECh case   24:*/		return 0x821D4BF0;
		  /* 821D4BF0h */ case   25:  		/* lwz R6, <#[R1 + 300]> */
		/* 821D4BF0h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000012C) );
		/* 821D4BF0h case   25:*/		return 0x821D4BF4;
		  /* 821D4BF4h */ case   26:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D4BF4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D4BF4h case   26:*/		return 0x821D4BF8;
		  /* 821D4BF8h */ case   27:  		/* cmplw CR6, R6, R11 */
		/* 821D4BF8h case   27:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821D4BF8h case   27:*/		return 0x821D4BFC;
		  /* 821D4BFCh */ case   28:  		/* bc 4, CR6_EQ, 44 */
		/* 821D4BFCh case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D4C28;  }
		/* 821D4BFCh case   28:*/		return 0x821D4C00;
	}
	return 0x821D4C00;
} // Block from 821D4B8Ch-821D4C00h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D4C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4C00);
		  /* 821D4C00h */ case    0:  		/* mr R3, R24 */
		/* 821D4C00h case    0:*/		regs.R3 = regs.R24;
		/* 821D4C00h case    0:*/		return 0x821D4C04;
		  /* 821D4C04h */ case    1:  		/* bl -379548 */
		/* 821D4C04h case    1:*/		regs.LR = 0x821D4C08; return 0x82178168;
		/* 821D4C04h case    1:*/		return 0x821D4C08;
		  /* 821D4C08h */ case    2:  		/* mr R6, R3 */
		/* 821D4C08h case    2:*/		regs.R6 = regs.R3;
		/* 821D4C08h case    2:*/		return 0x821D4C0C;
		  /* 821D4C0Ch */ case    3:  		/* mr R5, R16 */
		/* 821D4C0Ch case    3:*/		regs.R5 = regs.R16;
		/* 821D4C0Ch case    3:*/		return 0x821D4C10;
		  /* 821D4C10h */ case    4:  		/* li R4, 0 */
		/* 821D4C10h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D4C10h case    4:*/		return 0x821D4C14;
		  /* 821D4C14h */ case    5:  		/* mr R3, R24 */
		/* 821D4C14h case    5:*/		regs.R3 = regs.R24;
		/* 821D4C14h case    5:*/		return 0x821D4C18;
		  /* 821D4C18h */ case    6:  		/* bl -79880 */
		/* 821D4C18h case    6:*/		regs.LR = 0x821D4C1C; return 0x821C1410;
		/* 821D4C18h case    6:*/		return 0x821D4C1C;
		  /* 821D4C1Ch */ case    7:  		/* b 4964 */
		/* 821D4C1Ch case    7:*/		return 0x821D5F80;
		/* 821D4C1Ch case    7:*/		return 0x821D4C20;
	}
	return 0x821D4C20;
} // Block from 821D4C00h-821D4C20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D4C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4C20);
		  /* 821D4C20h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D4C20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D4C20h case    0:*/		return 0x821D4C24;
		  /* 821D4C24h */ case    1:  		/* b -148 */
		/* 821D4C24h case    1:*/		return 0x821D4B90;
		/* 821D4C24h case    1:*/		return 0x821D4C28;
	}
	return 0x821D4C28;
} // Block from 821D4C20h-821D4C28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D4C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4C28);
		  /* 821D4C28h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D4C28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D4C28h case    0:*/		return 0x821D4C2C;
	}
	return 0x821D4C2C;
} // Block from 821D4C28h-821D4C2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D4C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4C2C);
		  /* 821D4C2Ch */ case    0:  		/* lwz R10, <#[R9 + 8]> */
		/* 821D4C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 821D4C2Ch case    0:*/		return 0x821D4C30;
		  /* 821D4C30h */ case    1:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D4C30h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D4C30h case    1:*/		return 0x821D4C34;
		  /* 821D4C34h */ case    2:  		/* cmplwi CR6, R10, 256 */
		/* 821D4C34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821D4C34h case    2:*/		return 0x821D4C38;
		  /* 821D4C38h */ case    3:  		/* bc 4, CR6_EQ, 716 */
		/* 821D4C38h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4C38h case    3:*/		return 0x821D4C3C;
		  /* 821D4C3Ch */ case    4:  		/* lwz R10, <#[R1 + 132]> */
		/* 821D4C3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821D4C3Ch case    4:*/		return 0x821D4C40;
		  /* 821D4C40h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821D4C40h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D4C40h case    5:*/		return 0x821D4C44;
		  /* 821D4C44h */ case    6:  		/* bc 4, CR6_EQ, 704 */
		/* 821D4C44h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4C44h case    6:*/		return 0x821D4C48;
		  /* 821D4C48h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D4C48h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4C48h case    7:*/		return 0x821D4C4C;
		  /* 821D4C4Ch */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4C4Ch case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4C4Ch case    8:*/		return 0x821D4C50;
		  /* 821D4C50h */ case    9:  		/* cmplwi CR6, R11, 1408 */
		/* 821D4C50h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000580);
		/* 821D4C50h case    9:*/		return 0x821D4C54;
		  /* 821D4C54h */ case   10:  		/* bc 4, CR6_EQ, 688 */
		/* 821D4C54h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4C54h case   10:*/		return 0x821D4C58;
		  /* 821D4C58h */ case   11:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D4C58h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D4C58h case   11:*/		return 0x821D4C5C;
		  /* 821D4C5Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821D4C5Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D4C5Ch case   12:*/		return 0x821D4C60;
		  /* 821D4C60h */ case   13:  		/* bc 4, CR6_EQ, 676 */
		/* 821D4C60h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4C60h case   13:*/		return 0x821D4C64;
		  /* 821D4C64h */ case   14:  		/* lwz R3, <#[R9 + 44]> */
		/* 821D4C64h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x0000002C) );
		/* 821D4C64h case   14:*/		return 0x821D4C68;
		  /* 821D4C68h */ case   15:  		/* mr R9, R16 */
		/* 821D4C68h case   15:*/		regs.R9 = regs.R16;
		/* 821D4C68h case   15:*/		return 0x821D4C6C;
		  /* 821D4C6Ch */ case   16:  		/* li R8, 0 */
		/* 821D4C6Ch case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4C6Ch case   16:*/		return 0x821D4C70;
		  /* 821D4C70h */ case   17:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D4C70h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D4C70h case   17:*/		return 0x821D4C74;
		  /* 821D4C74h */ case   18:  		/* addi R7, R1, 420 */
		/* 821D4C74h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A4);
		/* 821D4C74h case   18:*/		return 0x821D4C78;
		  /* 821D4C78h */ case   19:  		/* addi R6, R1, 224 */
		/* 821D4C78h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xE0);
		/* 821D4C78h case   19:*/		return 0x821D4C7C;
		  /* 821D4C7Ch */ case   20:  		/* addi R5, R1, 240 */
		/* 821D4C7Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 821D4C7Ch case   20:*/		return 0x821D4C80;
		  /* 821D4C80h */ case   21:  		/* bl 321616 */
		/* 821D4C80h case   21:*/		regs.LR = 0x821D4C84; return 0x822234D0;
		/* 821D4C80h case   21:*/		return 0x821D4C84;
		  /* 821D4C84h */ case   22:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D4C84h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D4C84h case   22:*/		return 0x821D4C88;
		  /* 821D4C88h */ case   23:  		/* li R10, 0 */
		/* 821D4C88h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4C88h case   23:*/		return 0x821D4C8C;
		  /* 821D4C8Ch */ case   24:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D4C8Ch case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D4C8Ch case   24:*/		return 0x821D4C90;
		  /* 821D4C90h */ case   25:  		/* mr R9, R16 */
		/* 821D4C90h case   25:*/		regs.R9 = regs.R16;
		/* 821D4C90h case   25:*/		return 0x821D4C94;
		  /* 821D4C94h */ case   26:  		/* li R8, 0 */
		/* 821D4C94h case   26:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4C94h case   26:*/		return 0x821D4C98;
		  /* 821D4C98h */ case   27:  		/* addi R7, R1, 408 */
		/* 821D4C98h case   27:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x198);
		/* 821D4C98h case   27:*/		return 0x821D4C9C;
		  /* 821D4C9Ch */ case   28:  		/* addi R6, R1, 212 */
		/* 821D4C9Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xD4);
		/* 821D4C9Ch case   28:*/		return 0x821D4CA0;
		  /* 821D4CA0h */ case   29:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D4CA0h case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D4CA0h case   29:*/		return 0x821D4CA4;
		  /* 821D4CA4h */ case   30:  		/* addi R5, R1, 280 */
		/* 821D4CA4h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x118);
		/* 821D4CA4h case   30:*/		return 0x821D4CA8;
		  /* 821D4CA8h */ case   31:  		/* bl 321576 */
		/* 821D4CA8h case   31:*/		regs.LR = 0x821D4CAC; return 0x822234D0;
		/* 821D4CA8h case   31:*/		return 0x821D4CAC;
		  /* 821D4CACh */ case   32:  		/* lwz R10, <#[R1 + 240]> */
		/* 821D4CACh case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000F0) );
		/* 821D4CACh case   32:*/		return 0x821D4CB0;
		  /* 821D4CB0h */ case   33:  		/* lwz R11, <#[R10 + 8]> */
		/* 821D4CB0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821D4CB0h case   33:*/		return 0x821D4CB4;
		  /* 821D4CB4h */ case   34:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4CB4h case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4CB4h case   34:*/		return 0x821D4CB8;
		  /* 821D4CB8h */ case   35:  		/* cmplwi CR6, R11, 768 */
		/* 821D4CB8h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 821D4CB8h case   35:*/		return 0x821D4CBC;
		  /* 821D4CBCh */ case   36:  		/* bc 4, CR6_EQ, 584 */
		/* 821D4CBCh case   36:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4CBCh case   36:*/		return 0x821D4CC0;
		  /* 821D4CC0h */ case   37:  		/* lwz R11, <#[R1 + 420]> */
		/* 821D4CC0h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001A4) );
		/* 821D4CC0h case   37:*/		return 0x821D4CC4;
		  /* 821D4CC4h */ case   38:  		/* cmplwi CR6, R11, 0 */
		/* 821D4CC4h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D4CC4h case   38:*/		return 0x821D4CC8;
		  /* 821D4CC8h */ case   39:  		/* bc 4, CR6_EQ, 572 */
		/* 821D4CC8h case   39:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4CC8h case   39:*/		return 0x821D4CCC;
		  /* 821D4CCCh */ case   40:  		/* lwz R11, <#[R1 + 280]> */
		/* 821D4CCCh case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 821D4CCCh case   40:*/		return 0x821D4CD0;
		  /* 821D4CD0h */ case   41:  		/* lwz R9, <#[R11 + 8]> */
		/* 821D4CD0h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4CD0h case   41:*/		return 0x821D4CD4;
		  /* 821D4CD4h */ case   42:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821D4CD4h case   42:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821D4CD4h case   42:*/		return 0x821D4CD8;
		  /* 821D4CD8h */ case   43:  		/* cmplwi CR6, R9, 768 */
		/* 821D4CD8h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000300);
		/* 821D4CD8h case   43:*/		return 0x821D4CDC;
		  /* 821D4CDCh */ case   44:  		/* bc 4, CR6_EQ, 552 */
		/* 821D4CDCh case   44:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4CDCh case   44:*/		return 0x821D4CE0;
		  /* 821D4CE0h */ case   45:  		/* lwz R9, <#[R1 + 408]> */
		/* 821D4CE0h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000198) );
		/* 821D4CE0h case   45:*/		return 0x821D4CE4;
		  /* 821D4CE4h */ case   46:  		/* cmplwi CR6, R9, 0 */
		/* 821D4CE4h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821D4CE4h case   46:*/		return 0x821D4CE8;
		  /* 821D4CE8h */ case   47:  		/* bc 4, CR6_EQ, 540 */
		/* 821D4CE8h case   47:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4CE8h case   47:*/		return 0x821D4CEC;
		  /* 821D4CECh */ case   48:  		/* lwz R9, <#[R10 + 48]> */
		/* 821D4CECh case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 821D4CECh case   48:*/		return 0x821D4CF0;
		  /* 821D4CF0h */ case   49:  		/* lwz R9, <#[R9 + 12]> */
		/* 821D4CF0h case   49:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821D4CF0h case   49:*/		return 0x821D4CF4;
		  /* 821D4CF4h */ case   50:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D4CF4h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D4CF4h case   50:*/		return 0x821D4CF8;
		  /* 821D4CF8h */ case   51:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821D4CF8h case   51:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821D4CF8h case   51:*/		return 0x821D4CFC;
		  /* 821D4CFCh */ case   52:  		/* cmplwi CR6, R9, 16000 */
		/* 821D4CFCh case   52:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003E80);
		/* 821D4CFCh case   52:*/		return 0x821D4D00;
		  /* 821D4D00h */ case   53:  		/* bc 4, CR6_EQ, 40 */
		/* 821D4D00h case   53:*/		if ( !regs.CR[6].eq ) { return 0x821D4D28;  }
		/* 821D4D00h case   53:*/		return 0x821D4D04;
		  /* 821D4D04h */ case   54:  		/* lwz R8, <#[R1 + 212]> */
		/* 821D4D04h case   54:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000D4) );
		/* 821D4D04h case   54:*/		return 0x821D4D08;
		  /* 821D4D08h */ case   55:  		/* lwz R9, <#[R1 + 224]> */
		/* 821D4D08h case   55:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000E0) );
		/* 821D4D08h case   55:*/		return 0x821D4D0C;
		  /* 821D4D0Ch */ case   56:  		/* stw R11, <#[R1 + 240]> */
		/* 821D4D0Ch case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821D4D0Ch case   56:*/		return 0x821D4D10;
		  /* 821D4D10h */ case   57:  		/* mr R11, R10 */
		/* 821D4D10h case   57:*/		regs.R11 = regs.R10;
		/* 821D4D10h case   57:*/		return 0x821D4D14;
		  /* 821D4D14h */ case   58:  		/* stw R21, <#[R1 + 420]> */
		/* 821D4D14h case   58:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000001A4) );
		/* 821D4D14h case   58:*/		return 0x821D4D18;
		  /* 821D4D18h */ case   59:  		/* stw R10, <#[R1 + 280]> */
		/* 821D4D18h case   59:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000118) );
		/* 821D4D18h case   59:*/		return 0x821D4D1C;
		  /* 821D4D1Ch */ case   60:  		/* stw R21, <#[R1 + 408]> */
		/* 821D4D1Ch case   60:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000198) );
		/* 821D4D1Ch case   60:*/		return 0x821D4D20;
		  /* 821D4D20h */ case   61:  		/* stw R9, <#[R1 + 212]> */
		/* 821D4D20h case   61:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D4) );
		/* 821D4D20h case   61:*/		return 0x821D4D24;
		  /* 821D4D24h */ case   62:  		/* stw R8, <#[R1 + 224]> */
		/* 821D4D24h case   62:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000E0) );
		/* 821D4D24h case   62:*/		return 0x821D4D28;
	}
	return 0x821D4D28;
} // Block from 821D4C2Ch-821D4D28h (63 instructions)

//////////////////////////////////////////////////////
// Block at 821D4D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4D28);
		  /* 821D4D28h */ case    0:  		/* li R10, 0 */
		/* 821D4D28h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4D28h case    0:*/		return 0x821D4D2C;
		  /* 821D4D2Ch */ case    1:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D4D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D4D2Ch case    1:*/		return 0x821D4D30;
		  /* 821D4D30h */ case    2:  		/* mr R9, R16 */
		/* 821D4D30h case    2:*/		regs.R9 = regs.R16;
		/* 821D4D30h case    2:*/		return 0x821D4D34;
		  /* 821D4D34h */ case    3:  		/* lwz R4, <#[R1 + 212]> */
		/* 821D4D34h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D4) );
		/* 821D4D34h case    3:*/		return 0x821D4D38;
		  /* 821D4D38h */ case    4:  		/* li R8, 0 */
		/* 821D4D38h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4D38h case    4:*/		return 0x821D4D3C;
		  /* 821D4D3Ch */ case    5:  		/* addi R7, R1, 708 */
		/* 821D4D3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2C4);
		/* 821D4D3Ch case    5:*/		return 0x821D4D40;
		  /* 821D4D40h */ case    6:  		/* addi R6, R1, 468 */
		/* 821D4D40h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1D4);
		/* 821D4D40h case    6:*/		return 0x821D4D44;
		  /* 821D4D44h */ case    7:  		/* addi R5, R1, 328 */
		/* 821D4D44h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x148);
		/* 821D4D44h case    7:*/		return 0x821D4D48;
		  /* 821D4D48h */ case    8:  		/* bl 321416 */
		/* 821D4D48h case    8:*/		regs.LR = 0x821D4D4C; return 0x822234D0;
		/* 821D4D48h case    8:*/		return 0x821D4D4C;
		  /* 821D4D4Ch */ case    9:  		/* lwz R11, <#[R1 + 280]> */
		/* 821D4D4Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 821D4D4Ch case    9:*/		return 0x821D4D50;
		  /* 821D4D50h */ case   10:  		/* li R10, 0 */
		/* 821D4D50h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4D50h case   10:*/		return 0x821D4D54;
		  /* 821D4D54h */ case   11:  		/* lwz R4, <#[R1 + 212]> */
		/* 821D4D54h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D4) );
		/* 821D4D54h case   11:*/		return 0x821D4D58;
		  /* 821D4D58h */ case   12:  		/* mr R9, R16 */
		/* 821D4D58h case   12:*/		regs.R9 = regs.R16;
		/* 821D4D58h case   12:*/		return 0x821D4D5C;
		  /* 821D4D5Ch */ case   13:  		/* li R8, 0 */
		/* 821D4D5Ch case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4D5Ch case   13:*/		return 0x821D4D60;
		  /* 821D4D60h */ case   14:  		/* addi R7, R1, 816 */
		/* 821D4D60h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x330);
		/* 821D4D60h case   14:*/		return 0x821D4D64;
		  /* 821D4D64h */ case   15:  		/* addi R6, R1, 460 */
		/* 821D4D64h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1CC);
		/* 821D4D64h case   15:*/		return 0x821D4D68;
		  /* 821D4D68h */ case   16:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D4D68h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D4D68h case   16:*/		return 0x821D4D6C;
		  /* 821D4D6Ch */ case   17:  		/* addi R5, R1, 860 */
		/* 821D4D6Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x35C);
		/* 821D4D6Ch case   17:*/		return 0x821D4D70;
		  /* 821D4D70h */ case   18:  		/* bl 321376 */
		/* 821D4D70h case   18:*/		regs.LR = 0x821D4D74; return 0x822234D0;
		/* 821D4D70h case   18:*/		return 0x821D4D74;
		  /* 821D4D74h */ case   19:  		/* lwz R3, <#[R1 + 860]> */
		/* 821D4D74h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000035C) );
		/* 821D4D74h case   19:*/		return 0x821D4D78;
		  /* 821D4D78h */ case   20:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D4D78h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D4D78h case   20:*/		return 0x821D4D7C;
		  /* 821D4D7Ch */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4D7Ch case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4D7Ch case   21:*/		return 0x821D4D80;
		  /* 821D4D80h */ case   22:  		/* cmplwi CR6, R11, 16000 */
		/* 821D4D80h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D4D80h case   22:*/		return 0x821D4D84;
		  /* 821D4D84h */ case   23:  		/* bc 4, CR6_EQ, 384 */
		/* 821D4D84h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4D84h case   23:*/		return 0x821D4D88;
		  /* 821D4D88h */ case   24:  		/* lwz R5, <#[R1 + 816]> */
		/* 821D4D88h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000330) );
		/* 821D4D88h case   24:*/		return 0x821D4D8C;
		  /* 821D4D8Ch */ case   25:  		/* lwz R4, <#[R1 + 460]> */
		/* 821D4D8Ch case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001CC) );
		/* 821D4D8Ch case   25:*/		return 0x821D4D90;
		  /* 821D4D90h */ case   26:  		/* bl 313616 */
		/* 821D4D90h case   26:*/		regs.LR = 0x821D4D94; return 0x822216A0;
		/* 821D4D90h case   26:*/		return 0x821D4D94;
		  /* 821D4D94h */ case   27:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D4D94h case   27:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D4D94h case   27:*/		return 0x821D4D98;
		  /* 821D4D98h */ case   28:  		/* bc 4, CR6_EQ, 364 */
		/* 821D4D98h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4D98h case   28:*/		return 0x821D4D9C;
		  /* 821D4D9Ch */ case   29:  		/* lwz R11, <#[R1 + 328]> */
		/* 821D4D9Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000148) );
		/* 821D4D9Ch case   29:*/		return 0x821D4DA0;
		  /* 821D4DA0h */ case   30:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D4DA0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D4DA0h case   30:*/		return 0x821D4DA4;
		  /* 821D4DA4h */ case   31:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4DA4h case   31:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4DA4h case   31:*/		return 0x821D4DA8;
		  /* 821D4DA8h */ case   32:  		/* cmplwi CR6, R11, 1152 */
		/* 821D4DA8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000480);
		/* 821D4DA8h case   32:*/		return 0x821D4DAC;
		  /* 821D4DACh */ case   33:  		/* bc 4, CR6_EQ, 344 */
		/* 821D4DACh case   33:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4DACh case   33:*/		return 0x821D4DB0;
		  /* 821D4DB0h */ case   34:  		/* lwz R11, <#[R1 + 708]> */
		/* 821D4DB0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002C4) );
		/* 821D4DB0h case   34:*/		return 0x821D4DB4;
		  /* 821D4DB4h */ case   35:  		/* cmplwi CR6, R11, 0 */
		/* 821D4DB4h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D4DB4h case   35:*/		return 0x821D4DB8;
		  /* 821D4DB8h */ case   36:  		/* bc 4, CR6_EQ, 332 */
		/* 821D4DB8h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4DB8h case   36:*/		return 0x821D4DBC;
		  /* 821D4DBCh */ case   37:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D4DBCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D4DBCh case   37:*/		return 0x821D4DC0;
		  /* 821D4DC0h */ case   38:  		/* li R10, 0 */
		/* 821D4DC0h case   38:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4DC0h case   38:*/		return 0x821D4DC4;
		  /* 821D4DC4h */ case   39:  		/* mr R9, R16 */
		/* 821D4DC4h case   39:*/		regs.R9 = regs.R16;
		/* 821D4DC4h case   39:*/		return 0x821D4DC8;
		  /* 821D4DC8h */ case   40:  		/* lwz R4, <#[R1 + 136]> */
		/* 821D4DC8h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821D4DC8h case   40:*/		return 0x821D4DCC;
		  /* 821D4DCCh */ case   41:  		/* li R8, 0 */
		/* 821D4DCCh case   41:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4DCCh case   41:*/		return 0x821D4DD0;
		  /* 821D4DD0h */ case   42:  		/* addi R7, R1, 424 */
		/* 821D4DD0h case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A8);
		/* 821D4DD0h case   42:*/		return 0x821D4DD4;
		  /* 821D4DD4h */ case   43:  		/* addi R6, R1, 336 */
		/* 821D4DD4h case   43:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x150);
		/* 821D4DD4h case   43:*/		return 0x821D4DD8;
		  /* 821D4DD8h */ case   44:  		/* addi R5, R1, 384 */
		/* 821D4DD8h case   44:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x180);
		/* 821D4DD8h case   44:*/		return 0x821D4DDC;
		  /* 821D4DDCh */ case   45:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D4DDCh case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D4DDCh case   45:*/		return 0x821D4DE0;
		  /* 821D4DE0h */ case   46:  		/* bl 321264 */
		/* 821D4DE0h case   46:*/		regs.LR = 0x821D4DE4; return 0x822234D0;
		/* 821D4DE0h case   46:*/		return 0x821D4DE4;
		  /* 821D4DE4h */ case   47:  		/* lwz R11, <#[R1 + 328]> */
		/* 821D4DE4h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000148) );
		/* 821D4DE4h case   47:*/		return 0x821D4DE8;
		  /* 821D4DE8h */ case   48:  		/* li R10, 0 */
		/* 821D4DE8h case   48:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4DE8h case   48:*/		return 0x821D4DEC;
		  /* 821D4DECh */ case   49:  		/* lwz R4, <#[R1 + 468]> */
		/* 821D4DECh case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001D4) );
		/* 821D4DECh case   49:*/		return 0x821D4DF0;
		  /* 821D4DF0h */ case   50:  		/* mr R9, R16 */
		/* 821D4DF0h case   50:*/		regs.R9 = regs.R16;
		/* 821D4DF0h case   50:*/		return 0x821D4DF4;
		  /* 821D4DF4h */ case   51:  		/* li R8, 0 */
		/* 821D4DF4h case   51:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4DF4h case   51:*/		return 0x821D4DF8;
		  /* 821D4DF8h */ case   52:  		/* addi R7, R1, 724 */
		/* 821D4DF8h case   52:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2D4);
		/* 821D4DF8h case   52:*/		return 0x821D4DFC;
		  /* 821D4DFCh */ case   53:  		/* addi R6, R1, 476 */
		/* 821D4DFCh case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1DC);
		/* 821D4DFCh case   53:*/		return 0x821D4E00;
		  /* 821D4E00h */ case   54:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D4E00h case   54:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D4E00h case   54:*/		return 0x821D4E04;
		  /* 821D4E04h */ case   55:  		/* addi R5, R1, 716 */
		/* 821D4E04h case   55:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2CC);
		/* 821D4E04h case   55:*/		return 0x821D4E08;
		  /* 821D4E08h */ case   56:  		/* bl 321224 */
		/* 821D4E08h case   56:*/		regs.LR = 0x821D4E0C; return 0x822234D0;
		/* 821D4E08h case   56:*/		return 0x821D4E0C;
		  /* 821D4E0Ch */ case   57:  		/* lwz R11, <#[R1 + 384]> */
		/* 821D4E0Ch case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000180) );
		/* 821D4E0Ch case   57:*/		return 0x821D4E10;
		  /* 821D4E10h */ case   58:  		/* lwz R10, <#[R1 + 716]> */
		/* 821D4E10h case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002CC) );
		/* 821D4E10h case   58:*/		return 0x821D4E14;
		  /* 821D4E14h */ case   59:  		/* cmplw CR6, R10, R11 */
		/* 821D4E14h case   59:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D4E14h case   59:*/		return 0x821D4E18;
		  /* 821D4E18h */ case   60:  		/* bc 4, CR6_EQ, 236 */
		/* 821D4E18h case   60:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4E18h case   60:*/		return 0x821D4E1C;
		  /* 821D4E1Ch */ case   61:  		/* lwz R11, <#[R1 + 336]> */
		/* 821D4E1Ch case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000150) );
		/* 821D4E1Ch case   61:*/		return 0x821D4E20;
		  /* 821D4E20h */ case   62:  		/* lwz R10, <#[R1 + 476]> */
		/* 821D4E20h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001DC) );
		/* 821D4E20h case   62:*/		return 0x821D4E24;
		  /* 821D4E24h */ case   63:  		/* cmpw CR6, R10, R11 */
		/* 821D4E24h case   63:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821D4E24h case   63:*/		return 0x821D4E28;
		  /* 821D4E28h */ case   64:  		/* bc 4, CR6_EQ, 220 */
		/* 821D4E28h case   64:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4E28h case   64:*/		return 0x821D4E2C;
		  /* 821D4E2Ch */ case   65:  		/* lwz R11, <#[R1 + 424]> */
		/* 821D4E2Ch case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001A8) );
		/* 821D4E2Ch case   65:*/		return 0x821D4E30;
		  /* 821D4E30h */ case   66:  		/* lwz R10, <#[R1 + 724]> */
		/* 821D4E30h case   66:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002D4) );
		/* 821D4E30h case   66:*/		return 0x821D4E34;
		  /* 821D4E34h */ case   67:  		/* cmplw CR6, R10, R11 */
		/* 821D4E34h case   67:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D4E34h case   67:*/		return 0x821D4E38;
		  /* 821D4E38h */ case   68:  		/* bc 4, CR6_EQ, 204 */
		/* 821D4E38h case   68:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4E38h case   68:*/		return 0x821D4E3C;
		  /* 821D4E3Ch */ case   69:  		/* lwz R11, <#[R1 + 240]> */
		/* 821D4E3Ch case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821D4E3Ch case   69:*/		return 0x821D4E40;
		  /* 821D4E40h */ case   70:  		/* li R10, 0 */
		/* 821D4E40h case   70:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4E40h case   70:*/		return 0x821D4E44;
		  /* 821D4E44h */ case   71:  		/* mr R9, R16 */
		/* 821D4E44h case   71:*/		regs.R9 = regs.R16;
		/* 821D4E44h case   71:*/		return 0x821D4E48;
		  /* 821D4E48h */ case   72:  		/* lwz R4, <#[R1 + 224]> */
		/* 821D4E48h case   72:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E0) );
		/* 821D4E48h case   72:*/		return 0x821D4E4C;
		  /* 821D4E4Ch */ case   73:  		/* li R8, 0 */
		/* 821D4E4Ch case   73:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4E4Ch case   73:*/		return 0x821D4E50;
		  /* 821D4E50h */ case   74:  		/* addi R7, R1, 732 */
		/* 821D4E50h case   74:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2DC);
		/* 821D4E50h case   74:*/		return 0x821D4E54;
		  /* 821D4E54h */ case   75:  		/* addi R6, R1, 492 */
		/* 821D4E54h case   75:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1EC);
		/* 821D4E54h case   75:*/		return 0x821D4E58;
		  /* 821D4E58h */ case   76:  		/* addi R5, R1, 484 */
		/* 821D4E58h case   76:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E4);
		/* 821D4E58h case   76:*/		return 0x821D4E5C;
		  /* 821D4E5Ch */ case   77:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D4E5Ch case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D4E5Ch case   77:*/		return 0x821D4E60;
		  /* 821D4E60h */ case   78:  		/* bl 321136 */
		/* 821D4E60h case   78:*/		regs.LR = 0x821D4E64; return 0x822234D0;
		/* 821D4E60h case   78:*/		return 0x821D4E64;
		  /* 821D4E64h */ case   79:  		/* lwz R11, <#[R1 + 240]> */
		/* 821D4E64h case   79:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821D4E64h case   79:*/		return 0x821D4E68;
		  /* 821D4E68h */ case   80:  		/* li R10, 0 */
		/* 821D4E68h case   80:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D4E68h case   80:*/		return 0x821D4E6C;
		  /* 821D4E6Ch */ case   81:  		/* lwz R4, <#[R1 + 224]> */
		/* 821D4E6Ch case   81:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E0) );
		/* 821D4E6Ch case   81:*/		return 0x821D4E70;
		  /* 821D4E70h */ case   82:  		/* mr R9, R16 */
		/* 821D4E70h case   82:*/		regs.R9 = regs.R16;
		/* 821D4E70h case   82:*/		return 0x821D4E74;
		  /* 821D4E74h */ case   83:  		/* li R8, 0 */
		/* 821D4E74h case   83:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D4E74h case   83:*/		return 0x821D4E78;
		  /* 821D4E78h */ case   84:  		/* addi R7, R1, 748 */
		/* 821D4E78h case   84:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2EC);
		/* 821D4E78h case   84:*/		return 0x821D4E7C;
		  /* 821D4E7Ch */ case   85:  		/* addi R6, R1, 500 */
		/* 821D4E7Ch case   85:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1F4);
		/* 821D4E7Ch case   85:*/		return 0x821D4E80;
		  /* 821D4E80h */ case   86:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D4E80h case   86:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D4E80h case   86:*/		return 0x821D4E84;
		  /* 821D4E84h */ case   87:  		/* addi R5, R1, 740 */
		/* 821D4E84h case   87:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2E4);
		/* 821D4E84h case   87:*/		return 0x821D4E88;
		  /* 821D4E88h */ case   88:  		/* bl 321096 */
		/* 821D4E88h case   88:*/		regs.LR = 0x821D4E8C; return 0x822234D0;
		/* 821D4E88h case   88:*/		return 0x821D4E8C;
		  /* 821D4E8Ch */ case   89:  		/* lwz R3, <#[R1 + 484]> */
		/* 821D4E8Ch case   89:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000001E4) );
		/* 821D4E8Ch case   89:*/		return 0x821D4E90;
		  /* 821D4E90h */ case   90:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D4E90h case   90:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D4E90h case   90:*/		return 0x821D4E94;
		  /* 821D4E94h */ case   91:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D4E94h case   91:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D4E94h case   91:*/		return 0x821D4E98;
		  /* 821D4E98h */ case   92:  		/* cmplwi CR6, R11, 16000 */
		/* 821D4E98h case   92:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D4E98h case   92:*/		return 0x821D4E9C;
		  /* 821D4E9Ch */ case   93:  		/* bc 4, CR6_EQ, 104 */
		/* 821D4E9Ch case   93:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4E9Ch case   93:*/		return 0x821D4EA0;
		  /* 821D4EA0h */ case   94:  		/* lwz R5, <#[R1 + 732]> */
		/* 821D4EA0h case   94:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002DC) );
		/* 821D4EA0h case   94:*/		return 0x821D4EA4;
		  /* 821D4EA4h */ case   95:  		/* lwz R4, <#[R1 + 492]> */
		/* 821D4EA4h case   95:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001EC) );
		/* 821D4EA4h case   95:*/		return 0x821D4EA8;
		  /* 821D4EA8h */ case   96:  		/* bl 313336 */
		/* 821D4EA8h case   96:*/		regs.LR = 0x821D4EAC; return 0x822216A0;
		/* 821D4EA8h case   96:*/		return 0x821D4EAC;
		  /* 821D4EACh */ case   97:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D4EACh case   97:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D4EACh case   97:*/		return 0x821D4EB0;
		  /* 821D4EB0h */ case   98:  		/* bc 4, CR6_EQ, 84 */
		/* 821D4EB0h case   98:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4EB0h case   98:*/		return 0x821D4EB4;
		  /* 821D4EB4h */ case   99:  		/* lwz R11, <#[R1 + 740]> */
		/* 821D4EB4h case   99:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002E4) );
		/* 821D4EB4h case   99:*/		return 0x821D4EB8;
		  /* 821D4EB8h */ case  100:  		/* lwz R4, <#[R1 + 384]> */
		/* 821D4EB8h case  100:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000180) );
		/* 821D4EB8h case  100:*/		return 0x821D4EBC;
		  /* 821D4EBCh */ case  101:  		/* cmplw CR6, R4, R11 */
		/* 821D4EBCh case  101:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821D4EBCh case  101:*/		return 0x821D4EC0;
		  /* 821D4EC0h */ case  102:  		/* bc 4, CR6_EQ, 68 */
		/* 821D4EC0h case  102:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4EC0h case  102:*/		return 0x821D4EC4;
		  /* 821D4EC4h */ case  103:  		/* lwz R11, <#[R1 + 500]> */
		/* 821D4EC4h case  103:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001F4) );
		/* 821D4EC4h case  103:*/		return 0x821D4EC8;
		  /* 821D4EC8h */ case  104:  		/* lwz R5, <#[R1 + 336]> */
		/* 821D4EC8h case  104:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000150) );
		/* 821D4EC8h case  104:*/		return 0x821D4ECC;
		  /* 821D4ECCh */ case  105:  		/* cmpw CR6, R5, R11 */
		/* 821D4ECCh case  105:*/		cpu::op::cmpw<6>(regs,regs.R5,regs.R11);
		/* 821D4ECCh case  105:*/		return 0x821D4ED0;
		  /* 821D4ED0h */ case  106:  		/* bc 4, CR6_EQ, 52 */
		/* 821D4ED0h case  106:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4ED0h case  106:*/		return 0x821D4ED4;
		  /* 821D4ED4h */ case  107:  		/* lwz R11, <#[R1 + 748]> */
		/* 821D4ED4h case  107:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002EC) );
		/* 821D4ED4h case  107:*/		return 0x821D4ED8;
		  /* 821D4ED8h */ case  108:  		/* lwz R6, <#[R1 + 424]> */
		/* 821D4ED8h case  108:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001A8) );
		/* 821D4ED8h case  108:*/		return 0x821D4EDC;
		  /* 821D4EDCh */ case  109:  		/* cmplw CR6, R6, R11 */
		/* 821D4EDCh case  109:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821D4EDCh case  109:*/		return 0x821D4EE0;
		  /* 821D4EE0h */ case  110:  		/* bc 4, CR6_EQ, 36 */
		/* 821D4EE0h case  110:*/		if ( !regs.CR[6].eq ) { return 0x821D4F04;  }
		/* 821D4EE0h case  110:*/		return 0x821D4EE4;
		  /* 821D4EE4h */ case  111:  		/* mr R3, R24 */
		/* 821D4EE4h case  111:*/		regs.R3 = regs.R24;
		/* 821D4EE4h case  111:*/		return 0x821D4EE8;
		  /* 821D4EE8h */ case  112:  		/* bl -380288 */
		/* 821D4EE8h case  112:*/		regs.LR = 0x821D4EEC; return 0x82178168;
		/* 821D4EE8h case  112:*/		return 0x821D4EEC;
		  /* 821D4EECh */ case  113:  		/* mr R6, R3 */
		/* 821D4EECh case  113:*/		regs.R6 = regs.R3;
		/* 821D4EECh case  113:*/		return 0x821D4EF0;
		  /* 821D4EF0h */ case  114:  		/* mr R5, R16 */
		/* 821D4EF0h case  114:*/		regs.R5 = regs.R16;
		/* 821D4EF0h case  114:*/		return 0x821D4EF4;
		  /* 821D4EF4h */ case  115:  		/* li R4, 0 */
		/* 821D4EF4h case  115:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D4EF4h case  115:*/		return 0x821D4EF8;
		  /* 821D4EF8h */ case  116:  		/* mr R3, R24 */
		/* 821D4EF8h case  116:*/		regs.R3 = regs.R24;
		/* 821D4EF8h case  116:*/		return 0x821D4EFC;
		  /* 821D4EFCh */ case  117:  		/* bl -80780 */
		/* 821D4EFCh case  117:*/		regs.LR = 0x821D4F00; return 0x821C1370;
		/* 821D4EFCh case  117:*/		return 0x821D4F00;
		  /* 821D4F00h */ case  118:  		/* b 4224 */
		/* 821D4F00h case  118:*/		return 0x821D5F80;
		/* 821D4F00h case  118:*/		return 0x821D4F04;
	}
	return 0x821D4F04;
} // Block from 821D4D28h-821D4F04h (119 instructions)

//////////////////////////////////////////////////////
// Block at 821D4F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4F04);
		  /* 821D4F04h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821D4F04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821D4F04h case    0:*/		return 0x821D4F08;
		  /* 821D4F08h */ case    1:  		/* rlwinm R31, R27, 1, 0, 30 */
		/* 821D4F08h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R31,regs.R27);
		/* 821D4F08h case    1:*/		return 0x821D4F0C;
		  /* 821D4F0Ch */ case    2:  		/* lwz R10, <#[R19 + 12]> */
		/* 821D4F0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D4F0Ch case    2:*/		return 0x821D4F10;
		  /* 821D4F10h */ case    3:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D4F10h case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D4F10h case    3:*/		return 0x821D4F14;
		  /* 821D4F14h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D4F14h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D4F14h case    4:*/		return 0x821D4F18;
		  /* 821D4F18h */ case    5:  		/* srw R11, R9, R31 */
		/* 821D4F18h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R31);
		/* 821D4F18h case    5:*/		return 0x821D4F1C;
		  /* 821D4F1Ch */ case    6:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D4F1Ch case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D4F1Ch case    6:*/		return 0x821D4F20;
		  /* 821D4F20h */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D4F20h case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D4F20h case    7:*/		return 0x821D4F24;
		  /* 821D4F24h */ case    8:  		/* srw R11, R10, R11 */
		/* 821D4F24h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D4F24h case    8:*/		return 0x821D4F28;
		  /* 821D4F28h */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D4F28h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D4F28h case    9:*/		return 0x821D4F2C;
		  /* 821D4F2Ch */ case   10:  		/* bl -237228 */
		/* 821D4F2Ch case   10:*/		regs.LR = 0x821D4F30; return 0x8219B080;
		/* 821D4F2Ch case   10:*/		return 0x821D4F30;
		  /* 821D4F30h */ case   11:  		/* lwz R11, <#[R22]> */
		/* 821D4F30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D4F30h case   11:*/		return 0x821D4F34;
		  /* 821D4F34h */ case   12:  		/* lwz R10, <#[R22 + 12]> */
		/* 821D4F34h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000000C) );
		/* 821D4F34h case   12:*/		return 0x821D4F38;
		  /* 821D4F38h */ case   13:  		/* mr R30, R3 */
		/* 821D4F38h case   13:*/		regs.R30 = regs.R3;
		/* 821D4F38h case   13:*/		return 0x821D4F3C;
		  /* 821D4F3Ch */ case   14:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D4F3Ch case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D4F3Ch case   14:*/		return 0x821D4F40;
		  /* 821D4F40h */ case   15:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D4F40h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D4F40h case   15:*/		return 0x821D4F44;
		  /* 821D4F44h */ case   16:  		/* srw R11, R9, R31 */
		/* 821D4F44h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R31);
		/* 821D4F44h case   16:*/		return 0x821D4F48;
		  /* 821D4F48h */ case   17:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D4F48h case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D4F48h case   17:*/		return 0x821D4F4C;
		  /* 821D4F4Ch */ case   18:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D4F4Ch case   18:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D4F4Ch case   18:*/		return 0x821D4F50;
		  /* 821D4F50h */ case   19:  		/* srw R11, R10, R11 */
		/* 821D4F50h case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D4F50h case   19:*/		return 0x821D4F54;
		  /* 821D4F54h */ case   20:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D4F54h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D4F54h case   20:*/		return 0x821D4F58;
		  /* 821D4F58h */ case   21:  		/* bl -237272 */
		/* 821D4F58h case   21:*/		regs.LR = 0x821D4F5C; return 0x8219B080;
		/* 821D4F58h case   21:*/		return 0x821D4F5C;
		  /* 821D4F5Ch */ case   22:  		/* rlwinm R10, R30, 0, 30, 31 */
		/* 821D4F5Ch case   22:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R30);
		/* 821D4F5Ch case   22:*/		return 0x821D4F60;
		  /* 821D4F60h */ case   23:  		/* and R11, R3, R30 */
		/* 821D4F60h case   23:*/		cpu::op::and<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 821D4F60h case   23:*/		return 0x821D4F64;
		  /* 821D4F64h */ case   24:  		/* rlwinm R9, R3, 0, 30, 31 */
		/* 821D4F64h case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R3);
		/* 821D4F64h case   24:*/		return 0x821D4F68;
		  /* 821D4F68h */ case   25:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 821D4F68h case   25:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 821D4F68h case   25:*/		return 0x821D4F6C;
		  /* 821D4F6Ch */ case   26:  		/* cmplw CR6, R10, R9 */
		/* 821D4F6Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821D4F6Ch case   26:*/		return 0x821D4F70;
		  /* 821D4F70h */ case   27:  		/* bc 4, CR6_EQ, 8 */
		/* 821D4F70h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821D4F78;  }
		/* 821D4F70h case   27:*/		return 0x821D4F74;
		  /* 821D4F74h */ case   28:  		/* or R11, R11, R10 */
		/* 821D4F74h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D4F74h case   28:*/		return 0x821D4F78;
	}
	return 0x821D4F78;
} // Block from 821D4F04h-821D4F78h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D4F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4F78);
		  /* 821D4F78h */ case    0:  		/* rlwinm R9, R27, 2, 0, 29 */
		/* 821D4F78h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R27);
		/* 821D4F78h case    0:*/		return 0x821D4F7C;
		  /* 821D4F7Ch */ case    1:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D4F7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D4F7Ch case    1:*/		return 0x821D4F80;
		  /* 821D4F80h */ case    2:  		/* slw R11, R11, R9 */
		/* 821D4F80h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D4F80h case    2:*/		return 0x821D4F84;
		  /* 821D4F84h */ case    3:  		/* and R9, R11, R10 */
		/* 821D4F84h case    3:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D4F84h case    3:*/		return 0x821D4F88;
		  /* 821D4F88h */ case    4:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D4F88h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D4F88h case    4:*/		return 0x821D4F8C;
		  /* 821D4F8Ch */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821D4F8Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D4F8Ch case    5:*/		return 0x821D4F90;
		  /* 821D4F90h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D4F90h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D4F9C;  }
		/* 821D4F90h case    6:*/		return 0x821D4F94;
		  /* 821D4F94h */ case    7:  		/* mr R11, R21 */
		/* 821D4F94h case    7:*/		regs.R11 = regs.R21;
		/* 821D4F94h case    7:*/		return 0x821D4F98;
		  /* 821D4F98h */ case    8:  		/* b 16 */
		/* 821D4F98h case    8:*/		return 0x821D4FA8;
		/* 821D4F98h case    8:*/		return 0x821D4F9C;
	}
	return 0x821D4F9C;
} // Block from 821D4F78h-821D4F9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D4F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4F9C);
		  /* 821D4F9Ch */ case    0:  		/* or R10, R11, R10 */
		/* 821D4F9Ch case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D4F9Ch case    0:*/		return 0x821D4FA0;
		  /* 821D4FA0h */ case    1:  		/* li R11, 1 */
		/* 821D4FA0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D4FA0h case    1:*/		return 0x821D4FA4;
		  /* 821D4FA4h */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D4FA4h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D4FA4h case    2:*/		return 0x821D4FA8;
	}
	return 0x821D4FA8;
} // Block from 821D4F9Ch-821D4FA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D4FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4FA8);
		  /* 821D4FA8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D4FA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D4FA8h case    0:*/		return 0x821D4FAC;
		  /* 821D4FACh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D4FACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821D4FC0;  }
		/* 821D4FACh case    1:*/		return 0x821D4FB0;
		  /* 821D4FB0h */ case    2:  		/* mr R5, R25 */
		/* 821D4FB0h case    2:*/		regs.R5 = regs.R25;
		/* 821D4FB0h case    2:*/		return 0x821D4FB4;
		  /* 821D4FB4h */ case    3:  		/* mr R4, R16 */
		/* 821D4FB4h case    3:*/		regs.R4 = regs.R16;
		/* 821D4FB4h case    3:*/		return 0x821D4FB8;
		  /* 821D4FB8h */ case    4:  		/* mr R3, R24 */
		/* 821D4FB8h case    4:*/		regs.R3 = regs.R24;
		/* 821D4FB8h case    4:*/		return 0x821D4FBC;
		  /* 821D4FBCh */ case    5:  		/* bl -38236 */
		/* 821D4FBCh case    5:*/		regs.LR = 0x821D4FC0; return 0x821CBA60;
		/* 821D4FBCh case    5:*/		return 0x821D4FC0;
	}
	return 0x821D4FC0;
} // Block from 821D4FA8h-821D4FC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D4FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D4FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D4FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D4FC0);
		  /* 821D4FC0h */ case    0:  		/* addi R6, R1, 904 */
		/* 821D4FC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x388);
		/* 821D4FC0h case    0:*/		return 0x821D4FC4;
		  /* 821D4FC4h */ case    1:  		/* addi R5, R1, 912 */
		/* 821D4FC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x390);
		/* 821D4FC4h case    1:*/		return 0x821D4FC8;
		  /* 821D4FC8h */ case    2:  		/* mr R4, R27 */
		/* 821D4FC8h case    2:*/		regs.R4 = regs.R27;
		/* 821D4FC8h case    2:*/		return 0x821D4FCC;
		  /* 821D4FCCh */ case    3:  		/* mr R3, R19 */
		/* 821D4FCCh case    3:*/		regs.R3 = regs.R19;
		/* 821D4FCCh case    3:*/		return 0x821D4FD0;
		  /* 821D4FD0h */ case    4:  		/* bl 318808 */
		/* 821D4FD0h case    4:*/		regs.LR = 0x821D4FD4; return 0x82222D28;
		/* 821D4FD0h case    4:*/		return 0x821D4FD4;
		  /* 821D4FD4h */ case    5:  		/* addi R6, R1, 888 */
		/* 821D4FD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x378);
		/* 821D4FD4h case    5:*/		return 0x821D4FD8;
		  /* 821D4FD8h */ case    6:  		/* addi R5, R1, 872 */
		/* 821D4FD8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x368);
		/* 821D4FD8h case    6:*/		return 0x821D4FDC;
		  /* 821D4FDCh */ case    7:  		/* mr R4, R27 */
		/* 821D4FDCh case    7:*/		regs.R4 = regs.R27;
		/* 821D4FDCh case    7:*/		return 0x821D4FE0;
		  /* 821D4FE0h */ case    8:  		/* mr R3, R22 */
		/* 821D4FE0h case    8:*/		regs.R3 = regs.R22;
		/* 821D4FE0h case    8:*/		return 0x821D4FE4;
		  /* 821D4FE4h */ case    9:  		/* bl 318788 */
		/* 821D4FE4h case    9:*/		regs.LR = 0x821D4FE8; return 0x82222D28;
		/* 821D4FE4h case    9:*/		return 0x821D4FE8;
		  /* 821D4FE8h */ case   10:  		/* lfd FR0, <#[R1 + 912]> */
		/* 821D4FE8h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000390) );
		/* 821D4FE8h case   10:*/		return 0x821D4FEC;
		  /* 821D4FECh */ case   11:  		/* lfd FR13, <#[R1 + 872]> */
		/* 821D4FECh case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000368) );
		/* 821D4FECh case   11:*/		return 0x821D4FF0;
		  /* 821D4FF0h */ case   12:  		/* mr R7, R24 */
		/* 821D4FF0h case   12:*/		regs.R7 = regs.R24;
		/* 821D4FF0h case   12:*/		return 0x821D4FF4;
		  /* 821D4FF4h */ case   13:  		/* fadd FR30, FR13, FR0 */
		/* 821D4FF4h case   13:*/		cpu::op::fadd<0>(regs,&regs.FR30,regs.FR13,regs.FR0);
		/* 821D4FF4h case   13:*/		return 0x821D4FF8;
		  /* 821D4FF8h */ case   14:  		/* lfd FR12, <#[R1 + 904]> */
		/* 821D4FF8h case   14:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000388) );
		/* 821D4FF8h case   14:*/		return 0x821D4FFC;
		  /* 821D4FFCh */ case   15:  		/* mr R4, R27 */
		/* 821D4FFCh case   15:*/		regs.R4 = regs.R27;
		/* 821D4FFCh case   15:*/		return 0x821D5000;
		  /* 821D5000h */ case   16:  		/* mr R3, R16 */
		/* 821D5000h case   16:*/		regs.R3 = regs.R16;
		/* 821D5000h case   16:*/		return 0x821D5004;
		  /* 821D5004h */ case   17:  		/* fmr FR1, FR30 */
		/* 821D5004h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821D5004h case   17:*/		return 0x821D5008;
		  /* 821D5008h */ case   18:  		/* lfd FR0, <#[R1 + 888]> */
		/* 821D5008h case   18:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000378) );
		/* 821D5008h case   18:*/		return 0x821D500C;
		  /* 821D500Ch */ case   19:  		/* fadd FR31, FR0, FR12 */
		/* 821D500Ch case   19:*/		cpu::op::fadd<0>(regs,&regs.FR31,regs.FR0,regs.FR12);
		/* 821D500Ch case   19:*/		return 0x821D5010;
		  /* 821D5010h */ case   20:  		/* fmr FR2, FR31 */
		/* 821D5010h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821D5010h case   20:*/		return 0x821D5014;
		  /* 821D5014h */ case   21:  		/* bl 318220 */
		/* 821D5014h case   21:*/		regs.LR = 0x821D5018; return 0x82222B20;
		/* 821D5014h case   21:*/		return 0x821D5018;
		  /* 821D5018h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5018h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5018h case   22:*/		return 0x821D501C;
		  /* 821D501Ch */ case   23:  		/* bc 12, CR0_EQ, 20 */
		/* 821D501Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821D5030;  }
		/* 821D501Ch case   23:*/		return 0x821D5020;
		  /* 821D5020h */ case   24:  		/* mr R5, R25 */
		/* 821D5020h case   24:*/		regs.R5 = regs.R25;
		/* 821D5020h case   24:*/		return 0x821D5024;
		  /* 821D5024h */ case   25:  		/* mr R4, R16 */
		/* 821D5024h case   25:*/		regs.R4 = regs.R16;
		/* 821D5024h case   25:*/		return 0x821D5028;
		  /* 821D5028h */ case   26:  		/* mr R3, R24 */
		/* 821D5028h case   26:*/		regs.R3 = regs.R24;
		/* 821D5028h case   26:*/		return 0x821D502C;
		  /* 821D502Ch */ case   27:  		/* bl -38348 */
		/* 821D502Ch case   27:*/		regs.LR = 0x821D5030; return 0x821CBA60;
		/* 821D502Ch case   27:*/		return 0x821D5030;
	}
	return 0x821D5030;
} // Block from 821D4FC0h-821D5030h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D5030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5030);
		  /* 821D5030h */ case    0:  		/* lfd FR13, <#[R1 + 904]> */
		/* 821D5030h case    0:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000388) );
		/* 821D5030h case    0:*/		return 0x821D5034;
		  /* 821D5034h */ case    1:  		/* fcmpu CR6, FR30, FR27 */
		/* 821D5034h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR27);
		/* 821D5034h case    1:*/		return 0x821D5038;
		  /* 821D5038h */ case    2:  		/* lfd FR12, <#[R1 + 912]> */
		/* 821D5038h case    2:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000390) );
		/* 821D5038h case    2:*/		return 0x821D503C;
		  /* 821D503Ch */ case    3:  		/* bc 4, CR6_GT, 40 */
		/* 821D503Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x821D5064;  }
		/* 821D503Ch case    3:*/		return 0x821D5040;
		  /* 821D5040h */ case    4:  		/* lfd FR0, <#[R1 + 872]> */
		/* 821D5040h case    4:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000368) );
		/* 821D5040h case    4:*/		return 0x821D5044;
		  /* 821D5044h */ case    5:  		/* fcmpu CR6, FR12, FR27 */
		/* 821D5044h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR27);
		/* 821D5044h case    5:*/		return 0x821D5048;
		  /* 821D5048h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D5048h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D5054;  }
		/* 821D5048h case    6:*/		return 0x821D504C;
		  /* 821D504Ch */ case    7:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D504Ch case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D504Ch case    7:*/		return 0x821D5050;
		  /* 821D5050h */ case    8:  		/* bc 12, CR6_GT, 64 */
		/* 821D5050h case    8:*/		if ( regs.CR[6].gt ) { return 0x821D5090;  }
		/* 821D5050h case    8:*/		return 0x821D5054;
	}
	return 0x821D5054;
} // Block from 821D5030h-821D5054h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D5054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5054);
		  /* 821D5054h */ case    0:  		/* fcmpu CR6, FR12, FR27 */
		/* 821D5054h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR27);
		/* 821D5054h case    0:*/		return 0x821D5058;
		  /* 821D5058h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 821D5058h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821D5064;  }
		/* 821D5058h case    1:*/		return 0x821D505C;
		  /* 821D505Ch */ case    2:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D505Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D505Ch case    2:*/		return 0x821D5060;
		  /* 821D5060h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821D5060h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D5090;  }
		/* 821D5060h case    3:*/		return 0x821D5064;
	}
	return 0x821D5064;
} // Block from 821D5054h-821D5064h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5064);
		  /* 821D5064h */ case    0:  		/* fcmpu CR6, FR31, FR27 */
		/* 821D5064h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR27);
		/* 821D5064h case    0:*/		return 0x821D5068;
		  /* 821D5068h */ case    1:  		/* bc 4, CR6_LT, 3900 */
		/* 821D5068h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821D5FA4;  }
		/* 821D5068h case    1:*/		return 0x821D506C;
		  /* 821D506Ch */ case    2:  		/* lfd FR0, <#[R1 + 888]> */
		/* 821D506Ch case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000378) );
		/* 821D506Ch case    2:*/		return 0x821D5070;
		  /* 821D5070h */ case    3:  		/* fcmpu CR6, FR13, FR27 */
		/* 821D5070h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR27);
		/* 821D5070h case    3:*/		return 0x821D5074;
		  /* 821D5074h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821D5074h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D5080;  }
		/* 821D5074h case    4:*/		return 0x821D5078;
		  /* 821D5078h */ case    5:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D5078h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D5078h case    5:*/		return 0x821D507C;
		  /* 821D507Ch */ case    6:  		/* bc 12, CR6_LT, 20 */
		/* 821D507Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x821D5090;  }
		/* 821D507Ch case    6:*/		return 0x821D5080;
	}
	return 0x821D5080;
} // Block from 821D5064h-821D5080h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D5080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5080);
		  /* 821D5080h */ case    0:  		/* fcmpu CR6, FR13, FR27 */
		/* 821D5080h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR27);
		/* 821D5080h case    0:*/		return 0x821D5084;
		  /* 821D5084h */ case    1:  		/* bc 4, CR6_LT, 3872 */
		/* 821D5084h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821D5FA4;  }
		/* 821D5084h case    1:*/		return 0x821D5088;
		  /* 821D5088h */ case    2:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D5088h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D5088h case    2:*/		return 0x821D508C;
		  /* 821D508Ch */ case    3:  		/* bc 4, CR6_EQ, 3864 */
		/* 821D508Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D508Ch case    3:*/		return 0x821D5090;
	}
	return 0x821D5090;
} // Block from 821D5080h-821D5090h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5090);
		  /* 821D5090h */ case    0:  		/* fcmpu CR6, FR30, FR27 */
		/* 821D5090h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR27);
		/* 821D5090h case    0:*/		return 0x821D5094;
		  /* 821D5094h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 821D5094h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821D50A0;  }
		/* 821D5094h case    1:*/		return 0x821D5098;
		  /* 821D5098h */ case    2:  		/* fcmpu CR6, FR12, FR27 */
		/* 821D5098h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR27);
		/* 821D5098h case    2:*/		return 0x821D509C;
		  /* 821D509Ch */ case    3:  		/* b 8 */
		/* 821D509Ch case    3:*/		return 0x821D50A4;
		/* 821D509Ch case    3:*/		return 0x821D50A0;
	}
	return 0x821D50A0;
} // Block from 821D5090h-821D50A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D50A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D50A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D50A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D50A0);
		  /* 821D50A0h */ case    0:  		/* fcmpu CR6, FR13, FR27 */
		/* 821D50A0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR27);
		/* 821D50A0h case    0:*/		return 0x821D50A4;
	}
	return 0x821D50A4;
} // Block from 821D50A0h-821D50A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D50A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D50A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D50A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D50A4);
		  /* 821D50A4h */ case    0:  		/* mr R30, R22 */
		/* 821D50A4h case    0:*/		regs.R30 = regs.R22;
		/* 821D50A4h case    0:*/		return 0x821D50A8;
		  /* 821D50A8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821D50A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D50B0;  }
		/* 821D50A8h case    1:*/		return 0x821D50AC;
		  /* 821D50ACh */ case    2:  		/* mr R30, R19 */
		/* 821D50ACh case    2:*/		regs.R30 = regs.R19;
		/* 821D50ACh case    2:*/		return 0x821D50B0;
	}
	return 0x821D50B0;
} // Block from 821D50A4h-821D50B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D50B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D50B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D50B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D50B0);
		  /* 821D50B0h */ case    0:  		/* addi R26, R16, 4 */
		/* 821D50B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R16,0x4);
		/* 821D50B0h case    0:*/		return 0x821D50B4;
		  /* 821D50B4h */ case    1:  		/* lwz R31, <#[R26]> */
		/* 821D50B4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 821D50B4h case    1:*/		return 0x821D50B8;
		  /* 821D50B8h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821D50B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D50B8h case    2:*/		return 0x821D50BC;
		  /* 821D50BCh */ case    3:  		/* bc 12, CR6_EQ, 3816 */
		/* 821D50BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D50BCh case    3:*/		return 0x821D50C0;
		  /* 821D50C0h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D50C0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D50C0h case    4:*/		return 0x821D50C4;
		  /* 821D50C4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D50C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D50C4h case    5:*/		return 0x821D50C8;
		  /* 821D50C8h */ case    6:  		/* bc 12, CR6_EQ, 356 */
		/* 821D50C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D522C;  }
		/* 821D50C8h case    6:*/		return 0x821D50CC;
		  /* 821D50CCh */ case    7:  		/* lwz R10, <#[R31]> */
		/* 821D50CCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D50CCh case    7:*/		return 0x821D50D0;
		  /* 821D50D0h */ case    8:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821D50D0h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821D50D0h case    8:*/		return 0x821D50D4;
		  /* 821D50D4h */ case    9:  		/* bc 12, CR0_EQ, 344 */
		/* 821D50D4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D522C;  }
		/* 821D50D4h case    9:*/		return 0x821D50D8;
		  /* 821D50D8h */ case   10:  		/* lwz R28, <#[R31 + 16]> */
		/* 821D50D8h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 821D50D8h case   10:*/		return 0x821D50DC;
		  /* 821D50DCh */ case   11:  		/* lwz R29, <#[R28 + 8]> */
		/* 821D50DCh case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000008) );
		/* 821D50DCh case   11:*/		return 0x821D50E0;
		  /* 821D50E0h */ case   12:  		/* rlwinm R11, R29, 25, 25, 31 */
		/* 821D50E0h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R29);
		/* 821D50E0h case   12:*/		return 0x821D50E4;
		  /* 821D50E4h */ case   13:  		/* cmpwi CR6, R11, 6 */
		/* 821D50E4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D50E4h case   13:*/		return 0x821D50E8;
		  /* 821D50E8h */ case   14:  		/* bc 12, CR6_LT, 324 */
		/* 821D50E8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821D522C;  }
		/* 821D50E8h case   14:*/		return 0x821D50EC;
		  /* 821D50ECh */ case   15:  		/* cmpwi CR6, R11, 7 */
		/* 821D50ECh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821D50ECh case   15:*/		return 0x821D50F0;
		  /* 821D50F0h */ case   16:  		/* bc 4, CR6_GT, 32 */
		/* 821D50F0h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821D5110;  }
		/* 821D50F0h case   16:*/		return 0x821D50F4;
		  /* 821D50F4h */ case   17:  		/* cmpwi CR6, R11, 8 */
		/* 821D50F4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D50F4h case   17:*/		return 0x821D50F8;
		  /* 821D50F8h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 821D50F8h case   18:*/		if ( regs.CR[6].eq ) { return 0x821D5118;  }
		/* 821D50F8h case   18:*/		return 0x821D50FC;
		  /* 821D50FCh */ case   19:  		/* cmpwi CR6, R11, 60 */
		/* 821D50FCh case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003C);
		/* 821D50FCh case   19:*/		return 0x821D5100;
		  /* 821D5100h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821D5100h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D5118;  }
		/* 821D5100h case   20:*/		return 0x821D5104;
		  /* 821D5104h */ case   21:  		/* bc 4, CR6_GT, 296 */
		/* 821D5104h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821D522C;  }
		/* 821D5104h case   21:*/		return 0x821D5108;
		  /* 821D5108h */ case   22:  		/* cmpwi CR6, R11, 62 */
		/* 821D5108h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 821D5108h case   22:*/		return 0x821D510C;
		  /* 821D510Ch */ case   23:  		/* bc 12, CR6_GT, 288 */
		/* 821D510Ch case   23:*/		if ( regs.CR[6].gt ) { return 0x821D522C;  }
		/* 821D510Ch case   23:*/		return 0x821D5110;
	}
	return 0x821D5110;
} // Block from 821D50B0h-821D5110h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D5110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5110);
		  /* 821D5110h */ case    0:  		/* fcmpu CR6, FR30, FR27 */
		/* 821D5110h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR27);
		/* 821D5110h case    0:*/		return 0x821D5114;
		  /* 821D5114h */ case    1:  		/* bc 4, CR6_GT, 280 */
		/* 821D5114h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821D522C;  }
		/* 821D5114h case    1:*/		return 0x821D5118;
	}
	return 0x821D5118;
} // Block from 821D5110h-821D5118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D5118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5118);
		  /* 821D5118h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821D5118h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D5118h case    0:*/		return 0x821D511C;
		  /* 821D511Ch */ case    1:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D511Ch case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D511Ch case    1:*/		return 0x821D5120;
		  /* 821D5120h */ case    2:  		/* rlwinm R3, R11, 0, 27, 31 */
		/* 821D5120h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R11);
		/* 821D5120h case    2:*/		return 0x821D5124;
		  /* 821D5124h */ case    3:  		/* bl -257916 */
		/* 821D5124h case    3:*/		regs.LR = 0x821D5128; return 0x821961A8;
		/* 821D5124h case    3:*/		return 0x821D5128;
		  /* 821D5128h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5128h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5128h case    4:*/		return 0x821D512C;
		  /* 821D512Ch */ case    5:  		/* bc 12, CR0_EQ, 256 */
		/* 821D512Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821D522C;  }
		/* 821D512Ch case    5:*/		return 0x821D5130;
		  /* 821D5130h */ case    6:  		/* rlwinm R11, R29, 0, 10, 12 */
		/* 821D5130h case    6:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R29);
		/* 821D5130h case    6:*/		return 0x821D5134;
		  /* 821D5134h */ case    7:  		/* lis R10, 8 */
		/* 821D5134h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821D5134h case    7:*/		return 0x821D5138;
		  /* 821D5138h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821D5138h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D5138h case    8:*/		return 0x821D513C;
		  /* 821D513Ch */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 821D513Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821D5160;  }
		/* 821D513Ch case    9:*/		return 0x821D5140;
		  /* 821D5140h */ case   10:  		/* lwz R11, <#[R28 + 44]> */
		/* 821D5140h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 821D5140h case   10:*/		return 0x821D5144;
		  /* 821D5144h */ case   11:  		/* cmplw CR6, R31, R11 */
		/* 821D5144h case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D5144h case   11:*/		return 0x821D5148;
		  /* 821D5148h */ case   12:  		/* bc 4, CR6_EQ, 228 */
		/* 821D5148h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D522C;  }
		/* 821D5148h case   12:*/		return 0x821D514C;
		  /* 821D514Ch */ case   13:  		/* lwz R3, <#[R28 + 48]> */
		/* 821D514Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000030) );
		/* 821D514Ch case   13:*/		return 0x821D5150;
		  /* 821D5150h */ case   14:  		/* fmr FR1, FR27 */
		/* 821D5150h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR27);
		/* 821D5150h case   14:*/		return 0x821D5154;
		  /* 821D5154h */ case   15:  		/* bl -455588 */
		/* 821D5154h case   15:*/		regs.LR = 0x821D5158; return 0x82165DB0;
		/* 821D5154h case   15:*/		return 0x821D5158;
		  /* 821D5158h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5158h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5158h case   16:*/		return 0x821D515C;
		  /* 821D515Ch */ case   17:  		/* bc 12, CR0_EQ, 208 */
		/* 821D515Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821D522C;  }
		/* 821D515Ch case   17:*/		return 0x821D5160;
	}
	return 0x821D5160;
} // Block from 821D5118h-821D5160h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D5160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5160);
		  /* 821D5160h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 821D5160h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D5160h case    0:*/		return 0x821D5164;
		  /* 821D5164h */ case    1:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D5164h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D5164h case    1:*/		return 0x821D5168;
		  /* 821D5168h */ case    2:  		/* addi R10, R10, 4 */
		/* 821D5168h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D5168h case    2:*/		return 0x821D516C;
		  /* 821D516Ch */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821D516Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D516Ch case    3:*/		return 0x821D5170;
		  /* 821D5170h */ case    4:  		/* b 12 */
		/* 821D5170h case    4:*/		return 0x821D517C;
		/* 821D5170h case    4:*/		return 0x821D5174;
		  /* 821D5174h */ case    5:  		/* addi R10, R9, 8 */
		/* 821D5174h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D5174h case    5:*/		return 0x821D5178;
		  /* 821D5178h */ case    6:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D5178h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D5178h case    6:*/		return 0x821D517C;
	}
	return 0x821D517C;
} // Block from 821D5160h-821D517Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D517Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D517C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D517C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D517C);
		  /* 821D517Ch */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821D517Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821D517Ch case    0:*/		return 0x821D5180;
		  /* 821D5180h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D5180h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D5174;  }
		/* 821D5180h case    1:*/		return 0x821D5184;
		  /* 821D5184h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D5184h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D5184h case    2:*/		return 0x821D5188;
		  /* 821D5188h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821D5188h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D5188h case    3:*/		return 0x821D518C;
		  /* 821D518Ch */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D518Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D518Ch case    4:*/		return 0x821D5190;
		  /* 821D5190h */ case    5:  		/* stw R10, <#[R31 + 8]> */
		/* 821D5190h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D5190h case    5:*/		return 0x821D5194;
		  /* 821D5194h */ case    6:  		/* stw R31, <#[R11 + 4]> */
		/* 821D5194h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D5194h case    6:*/		return 0x821D5198;
		  /* 821D5198h */ case    7:  		/* stw R11, <#[R31 + 12]> */
		/* 821D5198h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D5198h case    7:*/		return 0x821D519C;
		  /* 821D519Ch */ case    8:  		/* lwz R10, <#[R31]> */
		/* 821D519Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D519Ch case    8:*/		return 0x821D51A0;
		  /* 821D51A0h */ case    9:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D51A0h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D51A0h case    9:*/		return 0x821D51A4;
		  /* 821D51A4h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 821D51A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D51A4h case   10:*/		return 0x821D51A8;
		  /* 821D51A8h */ case   11:  		/* rlwinm R3, R11, 0, 27, 31 */
		/* 821D51A8h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R11);
		/* 821D51A8h case   11:*/		return 0x821D51AC;
		  /* 821D51ACh */ case   12:  		/* bl -382772 */
		/* 821D51ACh case   12:*/		regs.LR = 0x821D51B0; return 0x82177A78;
		/* 821D51ACh case   12:*/		return 0x821D51B0;
		  /* 821D51B0h */ case   13:  		/* lwz R11, <#[R31]> */
		/* 821D51B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D51B0h case   13:*/		return 0x821D51B4;
		  /* 821D51B4h */ case   14:  		/* mr R5, R25 */
		/* 821D51B4h case   14:*/		regs.R5 = regs.R25;
		/* 821D51B4h case   14:*/		return 0x821D51B8;
		  /* 821D51B8h */ case   15:  		/* rlwimi R3, R11, 0, 0, 26 */
		/* 821D51B8h case   15:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R3,regs.R11);
		/* 821D51B8h case   15:*/		return 0x821D51BC;
		  /* 821D51BCh */ case   16:  		/* mr R4, R16 */
		/* 821D51BCh case   16:*/		regs.R4 = regs.R16;
		/* 821D51BCh case   16:*/		return 0x821D51C0;
		  /* 821D51C0h */ case   17:  		/* mr R11, R3 */
		/* 821D51C0h case   17:*/		regs.R11 = regs.R3;
		/* 821D51C0h case   17:*/		return 0x821D51C4;
		  /* 821D51C4h */ case   18:  		/* mr R3, R24 */
		/* 821D51C4h case   18:*/		regs.R3 = regs.R24;
		/* 821D51C4h case   18:*/		return 0x821D51C8;
		  /* 821D51C8h */ case   19:  		/* stw R11, <#[R31]> */
		/* 821D51C8h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D51C8h case   19:*/		return 0x821D51CC;
		  /* 821D51CCh */ case   20:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821D51CCh case   20:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821D51CCh case   20:*/		return 0x821D51D0;
		  /* 821D51D0h */ case   21:  		/* lwz R7, <#[R30]> */
		/* 821D51D0h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821D51D0h case   21:*/		return 0x821D51D4;
		  /* 821D51D4h */ case   22:  		/* rlwinm R8, R11, 24, 29, 30 */
		/* 821D51D4h case   22:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R11);
		/* 821D51D4h case   22:*/		return 0x821D51D8;
		  /* 821D51D8h */ case   23:  		/* rlwinm R7, R7, 27, 24, 31 */
		/* 821D51D8h case   23:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R7);
		/* 821D51D8h case   23:*/		return 0x821D51DC;
		  /* 821D51DCh */ case   24:  		/* srw R10, R7, R10 */
		/* 821D51DCh case   24:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821D51DCh case   24:*/		return 0x821D51E0;
		  /* 821D51E0h */ case   25:  		/* srw R8, R7, R8 */
		/* 821D51E0h case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821D51E0h case   25:*/		return 0x821D51E4;
		  /* 821D51E4h */ case   26:  		/* rlwinm R6, R11, 26, 29, 30 */
		/* 821D51E4h case   26:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R6,regs.R11);
		/* 821D51E4h case   26:*/		return 0x821D51E8;
		  /* 821D51E8h */ case   27:  		/* rlwimi R8, R10, 2, 28, 29 */
		/* 821D51E8h case   27:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R10);
		/* 821D51E8h case   27:*/		return 0x821D51EC;
		  /* 821D51ECh */ case   28:  		/* rlwinm R9, R11, 0, 0, 31 */
		/* 821D51ECh case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R11);
		/* 821D51ECh case   28:*/		return 0x821D51F0;
		  /* 821D51F0h */ case   29:  		/* rlwinm R11, R11, 28, 29, 30 */
		/* 821D51F0h case   29:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R11,regs.R11);
		/* 821D51F0h case   29:*/		return 0x821D51F4;
		  /* 821D51F4h */ case   30:  		/* srw R10, R7, R6 */
		/* 821D51F4h case   30:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R6);
		/* 821D51F4h case   30:*/		return 0x821D51F8;
		  /* 821D51F8h */ case   31:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821D51F8h case   31:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821D51F8h case   31:*/		return 0x821D51FC;
		  /* 821D51FCh */ case   32:  		/* srw R11, R7, R11 */
		/* 821D51FCh case   32:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821D51FCh case   32:*/		return 0x821D5200;
		  /* 821D5200h */ case   33:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821D5200h case   33:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821D5200h case   33:*/		return 0x821D5204;
		  /* 821D5204h */ case   34:  		/* rlwinm R9, R9, 0, 27, 18 */
		/* 821D5204h case   34:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R9,regs.R9);
		/* 821D5204h case   34:*/		return 0x821D5208;
		  /* 821D5208h */ case   35:  		/* rlwimi R11, R10, 2, 0, 29 */
		/* 821D5208h case   35:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D5208h case   35:*/		return 0x821D520C;
		  /* 821D520Ch */ case   36:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821D520Ch case   36:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821D520Ch case   36:*/		return 0x821D5210;
		  /* 821D5210h */ case   37:  		/* or R11, R11, R9 */
		/* 821D5210h case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D5210h case   37:*/		return 0x821D5214;
		  /* 821D5214h */ case   38:  		/* stw R11, <#[R31]> */
		/* 821D5214h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D5214h case   38:*/		return 0x821D5218;
		  /* 821D5218h */ case   39:  		/* bl -38992 */
		/* 821D5218h case   39:*/		regs.LR = 0x821D521C; return 0x821CB9C8;
		/* 821D5218h case   39:*/		return 0x821D521C;
		  /* 821D521Ch */ case   40:  		/* mr R5, R25 */
		/* 821D521Ch case   40:*/		regs.R5 = regs.R25;
		/* 821D521Ch case   40:*/		return 0x821D5220;
		  /* 821D5220h */ case   41:  		/* mr R4, R28 */
		/* 821D5220h case   41:*/		regs.R4 = regs.R28;
		/* 821D5220h case   41:*/		return 0x821D5224;
		  /* 821D5224h */ case   42:  		/* mr R3, R24 */
		/* 821D5224h case   42:*/		regs.R3 = regs.R24;
		/* 821D5224h case   42:*/		return 0x821D5228;
		  /* 821D5228h */ case   43:  		/* bl -39008 */
		/* 821D5228h case   43:*/		regs.LR = 0x821D522C; return 0x821CB9C8;
		/* 821D5228h case   43:*/		return 0x821D522C;
	}
	return 0x821D522C;
} // Block from 821D517Ch-821D522Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 821D522Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D522C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D522C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D522C);
		  /* 821D522Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821D522Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D522Ch case    0:*/		return 0x821D5230;
		  /* 821D5230h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D5230h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D5230h case    1:*/		return 0x821D5234;
		  /* 821D5234h */ case    2:  		/* bc 4, CR6_EQ, -384 */
		/* 821D5234h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D50B4;  }
		/* 821D5234h case    2:*/		return 0x821D5238;
		  /* 821D5238h */ case    3:  		/* addi R26, R31, 8 */
		/* 821D5238h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x8);
		/* 821D5238h case    3:*/		return 0x821D523C;
		  /* 821D523Ch */ case    4:  		/* b -392 */
		/* 821D523Ch case    4:*/		return 0x821D50B4;
		/* 821D523Ch case    4:*/		return 0x821D5240;
	}
	return 0x821D5240;
} // Block from 821D522Ch-821D5240h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D5240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5240);
		  /* 821D5240h */ case    0:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D5240h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5240h case    0:*/		return 0x821D5244;
		  /* 821D5244h */ case    1:  		/* mr R5, R27 */
		/* 821D5244h case    1:*/		regs.R5 = regs.R27;
		/* 821D5244h case    1:*/		return 0x821D5248;
		  /* 821D5248h */ case    2:  		/* stw R23, <#[R1 + 100]> */
		/* 821D5248h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000064) );
		/* 821D5248h case    2:*/		return 0x821D524C;
		  /* 821D524Ch */ case    3:  		/* mr R4, R16 */
		/* 821D524Ch case    3:*/		regs.R4 = regs.R16;
		/* 821D524Ch case    3:*/		return 0x821D5250;
		  /* 821D5250h */ case    4:  		/* stw R21, <#[R1 + 92]> */
		/* 821D5250h case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000005C) );
		/* 821D5250h case    4:*/		return 0x821D5254;
		  /* 821D5254h */ case    5:  		/* mr R3, R24 */
		/* 821D5254h case    5:*/		regs.R3 = regs.R24;
		/* 821D5254h case    5:*/		return 0x821D5258;
		  /* 821D5258h */ case    6:  		/* lwz R10, <#[R1 + 136]> */
		/* 821D5258h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5258h case    6:*/		return 0x821D525C;
		  /* 821D525Ch */ case    7:  		/* lwz R9, <#[R1 + 124]> */
		/* 821D525Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D525Ch case    7:*/		return 0x821D5260;
		  /* 821D5260h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 821D5260h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821D5260h case    8:*/		return 0x821D5264;
		  /* 821D5264h */ case    9:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D5264h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5264h case    9:*/		return 0x821D5268;
		  /* 821D5268h */ case   10:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D5268h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5268h case   10:*/		return 0x821D526C;
		  /* 821D526Ch */ case   11:  		/* lwz R6, <#[R1 + 116]> */
		/* 821D526Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000074) );
		/* 821D526Ch case   11:*/		return 0x821D5270;
		  /* 821D5270h */ case   12:  		/* bl -15320 */
		/* 821D5270h case   12:*/		regs.LR = 0x821D5274; return 0x821D1698;
		/* 821D5270h case   12:*/		return 0x821D5274;
		  /* 821D5274h */ case   13:  		/* b 3376 */
		/* 821D5274h case   13:*/		return 0x821D5FA4;
		/* 821D5274h case   13:*/		return 0x821D5278;
	}
	return 0x821D5278;
} // Block from 821D5240h-821D5278h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D5278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5278);
		  /* 821D5278h */ case    0:  		/* mr R4, R27 */
		/* 821D5278h case    0:*/		regs.R4 = regs.R27;
		/* 821D5278h case    0:*/		return 0x821D527C;
		  /* 821D527Ch */ case    1:  		/* mr R3, R22 */
		/* 821D527Ch case    1:*/		regs.R3 = regs.R22;
		/* 821D527Ch case    1:*/		return 0x821D5280;
		  /* 821D5280h */ case    2:  		/* bl -237912 */
		/* 821D5280h case    2:*/		regs.LR = 0x821D5284; return 0x8219B128;
		/* 821D5280h case    2:*/		return 0x821D5284;
		  /* 821D5284h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5284h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5284h case    3:*/		return 0x821D5288;
		  /* 821D5288h */ case    4:  		/* bc 12, CR0_EQ, 204 */
		/* 821D5288h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5354;  }
		/* 821D5288h case    4:*/		return 0x821D528C;
		  /* 821D528Ch */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D528Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D528Ch case    5:*/		return 0x821D5290;
		  /* 821D5290h */ case    6:  		/* lwz R31, <#[R1 + 116]> */
		/* 821D5290h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5290h case    6:*/		return 0x821D5294;
		  /* 821D5294h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821D5294h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D5294h case    7:*/		return 0x821D5298;
		  /* 821D5298h */ case    8:  		/* bc 4, CR6_EQ, 192 */
		/* 821D5298h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D5358;  }
		/* 821D5298h case    8:*/		return 0x821D529C;
		  /* 821D529Ch */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D529Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D529Ch case    9:*/		return 0x821D52A0;
		  /* 821D52A0h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D52A0h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D52A0h case   10:*/		return 0x821D52A4;
		  /* 821D52A4h */ case   11:  		/* cmplwi CR6, R11, 512 */
		/* 821D52A4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 821D52A4h case   11:*/		return 0x821D52A8;
		  /* 821D52A8h */ case   12:  		/* bc 4, CR6_EQ, 176 */
		/* 821D52A8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D5358;  }
		/* 821D52A8h case   12:*/		return 0x821D52AC;
		  /* 821D52ACh */ case   13:  		/* li R10, 0 */
		/* 821D52ACh case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D52ACh case   13:*/		return 0x821D52B0;
		  /* 821D52B0h */ case   14:  		/* lwz R3, <#[R31 + 48]> */
		/* 821D52B0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821D52B0h case   14:*/		return 0x821D52B4;
		  /* 821D52B4h */ case   15:  		/* mr R9, R16 */
		/* 821D52B4h case   15:*/		regs.R9 = regs.R16;
		/* 821D52B4h case   15:*/		return 0x821D52B8;
		  /* 821D52B8h */ case   16:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D52B8h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D52B8h case   16:*/		return 0x821D52BC;
		  /* 821D52BCh */ case   17:  		/* li R8, 0 */
		/* 821D52BCh case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D52BCh case   17:*/		return 0x821D52C0;
		  /* 821D52C0h */ case   18:  		/* addi R7, R1, 756 */
		/* 821D52C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2F4);
		/* 821D52C0h case   18:*/		return 0x821D52C4;
		  /* 821D52C4h */ case   19:  		/* addi R6, R1, 516 */
		/* 821D52C4h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x204);
		/* 821D52C4h case   19:*/		return 0x821D52C8;
		  /* 821D52C8h */ case   20:  		/* addi R5, R1, 508 */
		/* 821D52C8h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1FC);
		/* 821D52C8h case   20:*/		return 0x821D52CC;
		  /* 821D52CCh */ case   21:  		/* bl 320004 */
		/* 821D52CCh case   21:*/		regs.LR = 0x821D52D0; return 0x822234D0;
		/* 821D52CCh case   21:*/		return 0x821D52D0;
		  /* 821D52D0h */ case   22:  		/* lwz R3, <#[R1 + 508]> */
		/* 821D52D0h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000001FC) );
		/* 821D52D0h case   22:*/		return 0x821D52D4;
		  /* 821D52D4h */ case   23:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D52D4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D52D4h case   23:*/		return 0x821D52D8;
		  /* 821D52D8h */ case   24:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D52D8h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D52D8h case   24:*/		return 0x821D52DC;
		  /* 821D52DCh */ case   25:  		/* cmplwi CR6, R11, 16000 */
		/* 821D52DCh case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D52DCh case   25:*/		return 0x821D52E0;
		  /* 821D52E0h */ case   26:  		/* bc 4, CR6_EQ, 116 */
		/* 821D52E0h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821D5354;  }
		/* 821D52E0h case   26:*/		return 0x821D52E4;
		  /* 821D52E4h */ case   27:  		/* lwz R5, <#[R1 + 756]> */
		/* 821D52E4h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002F4) );
		/* 821D52E4h case   27:*/		return 0x821D52E8;
		  /* 821D52E8h */ case   28:  		/* lwz R4, <#[R1 + 516]> */
		/* 821D52E8h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000204) );
		/* 821D52E8h case   28:*/		return 0x821D52EC;
		  /* 821D52ECh */ case   29:  		/* bl 312244 */
		/* 821D52ECh case   29:*/		regs.LR = 0x821D52F0; return 0x822216A0;
		/* 821D52ECh case   29:*/		return 0x821D52F0;
		  /* 821D52F0h */ case   30:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D52F0h case   30:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D52F0h case   30:*/		return 0x821D52F4;
		  /* 821D52F4h */ case   31:  		/* bc 4, CR6_EQ, 96 */
		/* 821D52F4h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821D5354;  }
		/* 821D52F4h case   31:*/		return 0x821D52F8;
		  /* 821D52F8h */ case   32:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D52F8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D52F8h case   32:*/		return 0x821D52FC;
		  /* 821D52FCh */ case   33:  		/* li R10, 0 */
		/* 821D52FCh case   33:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D52FCh case   33:*/		return 0x821D5300;
		  /* 821D5300h */ case   34:  		/* mr R9, R16 */
		/* 821D5300h case   34:*/		regs.R9 = regs.R16;
		/* 821D5300h case   34:*/		return 0x821D5304;
		  /* 821D5304h */ case   35:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D5304h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5304h case   35:*/		return 0x821D5308;
		  /* 821D5308h */ case   36:  		/* li R8, 0 */
		/* 821D5308h case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D5308h case   36:*/		return 0x821D530C;
		  /* 821D530Ch */ case   37:  		/* addi R7, R1, 764 */
		/* 821D530Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2FC);
		/* 821D530Ch case   37:*/		return 0x821D5310;
		  /* 821D5310h */ case   38:  		/* addi R6, R1, 524 */
		/* 821D5310h case   38:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x20C);
		/* 821D5310h case   38:*/		return 0x821D5314;
		  /* 821D5314h */ case   39:  		/* addi R5, R1, 772 */
		/* 821D5314h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x304);
		/* 821D5314h case   39:*/		return 0x821D5318;
		  /* 821D5318h */ case   40:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D5318h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D5318h case   40:*/		return 0x821D531C;
		  /* 821D531Ch */ case   41:  		/* bl 319924 */
		/* 821D531Ch case   41:*/		regs.LR = 0x821D5320; return 0x822234D0;
		/* 821D531Ch case   41:*/		return 0x821D5320;
		  /* 821D5320h */ case   42:  		/* li R4, 1 */
		/* 821D5320h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5320h case   42:*/		return 0x821D5324;
		  /* 821D5324h */ case   43:  		/* lwz R31, <#[R1 + 764]> */
		/* 821D5324h case   43:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000002FC) );
		/* 821D5324h case   43:*/		return 0x821D5328;
		  /* 821D5328h */ case   44:  		/* mr R3, R31 */
		/* 821D5328h case   44:*/		regs.R3 = regs.R31;
		/* 821D5328h case   44:*/		return 0x821D532C;
		  /* 821D532Ch */ case   45:  		/* bl -258436 */
		/* 821D532Ch case   45:*/		regs.LR = 0x821D5330; return 0x821961A8;
		/* 821D532Ch case   45:*/		return 0x821D5330;
		  /* 821D5330h */ case   46:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5330h case   46:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5330h case   46:*/		return 0x821D5334;
		  /* 821D5334h */ case   47:  		/* bc 12, CR0_EQ, 32 */
		/* 821D5334h case   47:*/		if ( regs.CR[0].eq ) { return 0x821D5354;  }
		/* 821D5334h case   47:*/		return 0x821D5338;
		  /* 821D5338h */ case   48:  		/* li R4, 1 */
		/* 821D5338h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5338h case   48:*/		return 0x821D533C;
		  /* 821D533Ch */ case   49:  		/* mr R3, R31 */
		/* 821D533Ch case   49:*/		regs.R3 = regs.R31;
		/* 821D533Ch case   49:*/		return 0x821D5340;
		  /* 821D5340h */ case   50:  		/* bl -383176 */
		/* 821D5340h case   50:*/		regs.LR = 0x821D5344; return 0x82177A78;
		/* 821D5340h case   50:*/		return 0x821D5344;
		  /* 821D5344h */ case   51:  		/* lwz R7, <#[R1 + 524]> */
		/* 821D5344h case   51:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000020C) );
		/* 821D5344h case   51:*/		return 0x821D5348;
		  /* 821D5348h */ case   52:  		/* lwz R6, <#[R1 + 772]> */
		/* 821D5348h case   52:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000304) );
		/* 821D5348h case   52:*/		return 0x821D534C;
		  /* 821D534Ch */ case   53:  		/* mr R8, R3 */
		/* 821D534Ch case   53:*/		regs.R8 = regs.R3;
		/* 821D534Ch case   53:*/		return 0x821D5350;
		  /* 821D5350h */ case   54:  		/* b 3132 */
		/* 821D5350h case   54:*/		return 0x821D5F8C;
		/* 821D5350h case   54:*/		return 0x821D5354;
	}
	return 0x821D5354;
} // Block from 821D5278h-821D5354h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821D5354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5354);
		  /* 821D5354h */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 821D5354h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5354h case    0:*/		return 0x821D5358;
	}
	return 0x821D5358;
} // Block from 821D5354h-821D5358h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5358);
		  /* 821D5358h */ case    0:  		/* lwz R29, <#[R1 + 124]> */
		/* 821D5358h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5358h case    0:*/		return 0x821D535C;
		  /* 821D535Ch */ case    1:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D535Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D535Ch case    1:*/		return 0x821D5360;
		  /* 821D5360h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5360h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5360h case    2:*/		return 0x821D5364;
		  /* 821D5364h */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5364h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5364h case    3:*/		return 0x821D5368;
		  /* 821D5368h */ case    4:  		/* bc 4, CR6_EQ, 180 */
		/* 821D5368h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D541C;  }
		/* 821D5368h case    4:*/		return 0x821D536C;
		  /* 821D536Ch */ case    5:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D536Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D536Ch case    5:*/		return 0x821D5370;
		  /* 821D5370h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821D5370h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D5370h case    6:*/		return 0x821D5374;
		  /* 821D5374h */ case    7:  		/* bc 4, CR6_EQ, 168 */
		/* 821D5374h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D541C;  }
		/* 821D5374h case    7:*/		return 0x821D5378;
		  /* 821D5378h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D5378h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D5378h case    8:*/		return 0x821D537C;
		  /* 821D537Ch */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D537Ch case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D537Ch case    9:*/		return 0x821D5380;
		  /* 821D5380h */ case   10:  		/* cmplwi CR6, R11, 512 */
		/* 821D5380h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 821D5380h case   10:*/		return 0x821D5384;
		  /* 821D5384h */ case   11:  		/* bc 4, CR6_EQ, 152 */
		/* 821D5384h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D541C;  }
		/* 821D5384h case   11:*/		return 0x821D5388;
		  /* 821D5388h */ case   12:  		/* li R10, 0 */
		/* 821D5388h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5388h case   12:*/		return 0x821D538C;
		  /* 821D538Ch */ case   13:  		/* lwz R3, <#[R31 + 48]> */
		/* 821D538Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821D538Ch case   13:*/		return 0x821D5390;
		  /* 821D5390h */ case   14:  		/* mr R9, R16 */
		/* 821D5390h case   14:*/		regs.R9 = regs.R16;
		/* 821D5390h case   14:*/		return 0x821D5394;
		  /* 821D5394h */ case   15:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D5394h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5394h case   15:*/		return 0x821D5398;
		  /* 821D5398h */ case   16:  		/* li R8, 0 */
		/* 821D5398h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D5398h case   16:*/		return 0x821D539C;
		  /* 821D539Ch */ case   17:  		/* addi R7, R1, 780 */
		/* 821D539Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x30C);
		/* 821D539Ch case   17:*/		return 0x821D53A0;
		  /* 821D53A0h */ case   18:  		/* addi R6, R1, 536 */
		/* 821D53A0h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x218);
		/* 821D53A0h case   18:*/		return 0x821D53A4;
		  /* 821D53A4h */ case   19:  		/* addi R5, R1, 344 */
		/* 821D53A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x158);
		/* 821D53A4h case   19:*/		return 0x821D53A8;
		  /* 821D53A8h */ case   20:  		/* bl 319784 */
		/* 821D53A8h case   20:*/		regs.LR = 0x821D53AC; return 0x822234D0;
		/* 821D53A8h case   20:*/		return 0x821D53AC;
		  /* 821D53ACh */ case   21:  		/* lwz R11, <#[R1 + 344]> */
		/* 821D53ACh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000158) );
		/* 821D53ACh case   21:*/		return 0x821D53B0;
		  /* 821D53B0h */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D53B0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D53B0h case   22:*/		return 0x821D53B4;
		  /* 821D53B4h */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D53B4h case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D53B4h case   23:*/		return 0x821D53B8;
		  /* 821D53B8h */ case   24:  		/* cmplwi CR6, R11, 16000 */
		/* 821D53B8h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D53B8h case   24:*/		return 0x821D53BC;
		  /* 821D53BCh */ case   25:  		/* bc 4, CR6_EQ, 88 */
		/* 821D53BCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x821D5414;  }
		/* 821D53BCh case   25:*/		return 0x821D53C0;
		  /* 821D53C0h */ case   26:  		/* lwz R5, <#[R1 + 128]> */
		/* 821D53C0h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 821D53C0h case   26:*/		return 0x821D53C4;
		  /* 821D53C4h */ case   27:  		/* lwz R4, <#[R1 + 136]> */
		/* 821D53C4h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821D53C4h case   27:*/		return 0x821D53C8;
		  /* 821D53C8h */ case   28:  		/* lwz R3, <#[R1 + 124]> */
		/* 821D53C8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D53C8h case   28:*/		return 0x821D53CC;
		  /* 821D53CCh */ case   29:  		/* bl 312020 */
		/* 821D53CCh case   29:*/		regs.LR = 0x821D53D0; return 0x822216A0;
		/* 821D53CCh case   29:*/		return 0x821D53D0;
		  /* 821D53D0h */ case   30:  		/* lwz R5, <#[R1 + 780]> */
		/* 821D53D0h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000030C) );
		/* 821D53D0h case   30:*/		return 0x821D53D4;
		  /* 821D53D4h */ case   31:  		/* fmr FR31, FR1 */
		/* 821D53D4h case   31:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D53D4h case   31:*/		return 0x821D53D8;
		  /* 821D53D8h */ case   32:  		/* lwz R4, <#[R1 + 536]> */
		/* 821D53D8h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000218) );
		/* 821D53D8h case   32:*/		return 0x821D53DC;
		  /* 821D53DCh */ case   33:  		/* lwz R3, <#[R1 + 344]> */
		/* 821D53DCh case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000158) );
		/* 821D53DCh case   33:*/		return 0x821D53E0;
		  /* 821D53E0h */ case   34:  		/* bl 312000 */
		/* 821D53E0h case   34:*/		regs.LR = 0x821D53E4; return 0x822216A0;
		/* 821D53E0h case   34:*/		return 0x821D53E4;
		  /* 821D53E4h */ case   35:  		/* fcmpu CR6, FR1, FR31 */
		/* 821D53E4h case   35:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821D53E4h case   35:*/		return 0x821D53E8;
		  /* 821D53E8h */ case   36:  		/* bc 12, CR6_GT, 44 */
		/* 821D53E8h case   36:*/		if ( regs.CR[6].gt ) { return 0x821D5414;  }
		/* 821D53E8h case   36:*/		return 0x821D53EC;
		  /* 821D53ECh */ case   37:  		/* addi R3, R1, 1520 */
		/* 821D53ECh case   37:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5F0);
		/* 821D53ECh case   37:*/		return 0x821D53F0;
		  /* 821D53F0h */ case   38:  		/* lwz R6, <#[R1 + 128]> */
		/* 821D53F0h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 821D53F0h case   38:*/		return 0x821D53F4;
		  /* 821D53F4h */ case   39:  		/* lwz R5, <#[R1 + 136]> */
		/* 821D53F4h case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 821D53F4h case   39:*/		return 0x821D53F8;
		  /* 821D53F8h */ case   40:  		/* lwz R4, <#[R1 + 124]> */
		/* 821D53F8h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D53F8h case   40:*/		return 0x821D53FC;
		  /* 821D53FCh */ case   41:  		/* bl 335668 */
		/* 821D53FCh case   41:*/		regs.LR = 0x821D5400; return 0x82227330;
		/* 821D53FCh case   41:*/		return 0x821D5400;
		  /* 821D5400h */ case   42:  		/* addi R5, R1, 1520 */
		/* 821D5400h case   42:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5F0);
		/* 821D5400h case   42:*/		return 0x821D5404;
		  /* 821D5404h */ case   43:  		/* li R4, 1 */
		/* 821D5404h case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5404h case   43:*/		return 0x821D5408;
		  /* 821D5408h */ case   44:  		/* mr R3, R24 */
		/* 821D5408h case   44:*/		regs.R3 = regs.R24;
		/* 821D5408h case   44:*/		return 0x821D540C;
		  /* 821D540Ch */ case   45:  		/* bl 335284 */
		/* 821D540Ch case   45:*/		regs.LR = 0x821D5410; return 0x822271C0;
		/* 821D540Ch case   45:*/		return 0x821D5410;
		  /* 821D5410h */ case   46:  		/* b 2928 */
		/* 821D5410h case   46:*/		return 0x821D5F80;
		/* 821D5410h case   46:*/		return 0x821D5414;
	}
	return 0x821D5414;
} // Block from 821D5358h-821D5414h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821D5414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5414);
		  /* 821D5414h */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 821D5414h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5414h case    0:*/		return 0x821D5418;
		  /* 821D5418h */ case    1:  		/* lwz R29, <#[R1 + 124]> */
		/* 821D5418h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5418h case    1:*/		return 0x821D541C;
	}
	return 0x821D541C;
} // Block from 821D5414h-821D541Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D541Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D541C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D541C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D541C);
		  /* 821D541Ch */ case    0:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D541Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D541Ch case    0:*/		return 0x821D5420;
		  /* 821D5420h */ case    1:  		/* cmplw CR6, R31, R29 */
		/* 821D5420h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 821D5420h case    1:*/		return 0x821D5424;
		  /* 821D5424h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 821D5424h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D545C;  }
		/* 821D5424h case    2:*/		return 0x821D5428;
		  /* 821D5428h */ case    3:  		/* lwz R11, <#[R1 + 136]> */
		/* 821D5428h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5428h case    3:*/		return 0x821D542C;
		  /* 821D542Ch */ case    4:  		/* cmpw CR6, R4, R11 */
		/* 821D542Ch case    4:*/		cpu::op::cmpw<6>(regs,regs.R4,regs.R11);
		/* 821D542Ch case    4:*/		return 0x821D5430;
		  /* 821D5430h */ case    5:  		/* bc 4, CR6_EQ, 44 */
		/* 821D5430h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D545C;  }
		/* 821D5430h case    5:*/		return 0x821D5434;
		  /* 821D5434h */ case    6:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D5434h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5434h case    6:*/		return 0x821D5438;
		  /* 821D5438h */ case    7:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D5438h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5438h case    7:*/		return 0x821D543C;
		  /* 821D543Ch */ case    8:  		/* xori R11, R11, 4 */
		/* 821D543Ch case    8:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D543Ch case    8:*/		return 0x821D5440;
		  /* 821D5440h */ case    9:  		/* cmplw CR6, R8, R11 */
		/* 821D5440h case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821D5440h case    9:*/		return 0x821D5444;
		  /* 821D5444h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 821D5444h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D5460;  }
		/* 821D5444h case   10:*/		return 0x821D5448;
		  /* 821D5448h */ case   11:  		/* li R11, 1 */
		/* 821D5448h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D5448h case   11:*/		return 0x821D544C;
		  /* 821D544Ch */ case   12:  		/* mr R7, R4 */
		/* 821D544Ch case   12:*/		regs.R7 = regs.R4;
		/* 821D544Ch case   12:*/		return 0x821D5450;
		  /* 821D5450h */ case   13:  		/* rlwimi R8, R11, 1, 29, 30 */
		/* 821D5450h case   13:*/		cpu::op::rlwimi<0,1,29,30>(regs,&regs.R8,regs.R11);
		/* 821D5450h case   13:*/		return 0x821D5454;
		  /* 821D5454h */ case   14:  		/* mr R6, R31 */
		/* 821D5454h case   14:*/		regs.R6 = regs.R31;
		/* 821D5454h case   14:*/		return 0x821D5458;
		  /* 821D5458h */ case   15:  		/* b 2868 */
		/* 821D5458h case   15:*/		return 0x821D5F8C;
		/* 821D5458h case   15:*/		return 0x821D545C;
	}
	return 0x821D545C;
} // Block from 821D541Ch-821D545Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D545Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D545C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D545C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D545C);
		  /* 821D545Ch */ case    0:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D545Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D545Ch case    0:*/		return 0x821D5460;
	}
	return 0x821D5460;
} // Block from 821D545Ch-821D5460h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5460);
		  /* 821D5460h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821D5460h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821D5460h case    0:*/		return 0x821D5464;
		  /* 821D5464h */ case    1:  		/* bc 4, CR6_EQ, 188 */
		/* 821D5464h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D5520;  }
		/* 821D5464h case    1:*/		return 0x821D5468;
		  /* 821D5468h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D5468h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D5468h case    2:*/		return 0x821D546C;
		  /* 821D546Ch */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D546Ch case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D546Ch case    3:*/		return 0x821D5470;
		  /* 821D5470h */ case    4:  		/* cmplwi CR6, R11, 384 */
		/* 821D5470h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821D5470h case    4:*/		return 0x821D5474;
		  /* 821D5474h */ case    5:  		/* bc 4, CR6_EQ, 172 */
		/* 821D5474h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D5520;  }
		/* 821D5474h case    5:*/		return 0x821D5478;
		  /* 821D5478h */ case    6:  		/* li R10, 0 */
		/* 821D5478h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5478h case    6:*/		return 0x821D547C;
		  /* 821D547Ch */ case    7:  		/* lwz R3, <#[R31 + 44]> */
		/* 821D547Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D547Ch case    7:*/		return 0x821D5480;
		  /* 821D5480h */ case    8:  		/* li R9, 0 */
		/* 821D5480h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D5480h case    8:*/		return 0x821D5484;
		  /* 821D5484h */ case    9:  		/* addi R7, R1, 840 */
		/* 821D5484h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x348);
		/* 821D5484h case    9:*/		return 0x821D5488;
		  /* 821D5488h */ case   10:  		/* addi R6, R1, 544 */
		/* 821D5488h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x220);
		/* 821D5488h case   10:*/		return 0x821D548C;
		  /* 821D548Ch */ case   11:  		/* addi R5, R1, 720 */
		/* 821D548Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2D0);
		/* 821D548Ch case   11:*/		return 0x821D5490;
		  /* 821D5490h */ case   12:  		/* bl 319552 */
		/* 821D5490h case   12:*/		regs.LR = 0x821D5494; return 0x822234D0;
		/* 821D5490h case   12:*/		return 0x821D5494;
		  /* 821D5494h */ case   13:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5494h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5494h case   13:*/		return 0x821D5498;
		  /* 821D5498h */ case   14:  		/* lwz R10, <#[R1 + 720]> */
		/* 821D5498h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002D0) );
		/* 821D5498h case   14:*/		return 0x821D549C;
		  /* 821D549Ch */ case   15:  		/* cmplw CR6, R10, R11 */
		/* 821D549Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D549Ch case   15:*/		return 0x821D54A0;
		  /* 821D54A0h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 821D54A0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D54C4;  }
		/* 821D54A0h case   16:*/		return 0x821D54A4;
		  /* 821D54A4h */ case   17:  		/* lwz R11, <#[R1 + 136]> */
		/* 821D54A4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821D54A4h case   17:*/		return 0x821D54A8;
		  /* 821D54A8h */ case   18:  		/* lwz R10, <#[R1 + 544]> */
		/* 821D54A8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000220) );
		/* 821D54A8h case   18:*/		return 0x821D54AC;
		  /* 821D54ACh */ case   19:  		/* cmpw CR6, R10, R11 */
		/* 821D54ACh case   19:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821D54ACh case   19:*/		return 0x821D54B0;
		  /* 821D54B0h */ case   20:  		/* bc 4, CR6_EQ, 20 */
		/* 821D54B0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D54C4;  }
		/* 821D54B0h case   20:*/		return 0x821D54B4;
		  /* 821D54B4h */ case   21:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D54B4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D54B4h case   21:*/		return 0x821D54B8;
		  /* 821D54B8h */ case   22:  		/* lwz R10, <#[R1 + 840]> */
		/* 821D54B8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000348) );
		/* 821D54B8h case   22:*/		return 0x821D54BC;
		  /* 821D54BCh */ case   23:  		/* cmplw CR6, R10, R11 */
		/* 821D54BCh case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D54BCh case   23:*/		return 0x821D54C0;
		  /* 821D54C0h */ case   24:  		/* bc 12, CR6_EQ, -2488 */
		/* 821D54C0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821D4B08;  }
		/* 821D54C0h case   24:*/		return 0x821D54C4;
	}
	return 0x821D54C4;
} // Block from 821D5460h-821D54C4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D54C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D54C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D54C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D54C4);
		  /* 821D54C4h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D54C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D54C4h case    0:*/		return 0x821D54C8;
		  /* 821D54C8h */ case    1:  		/* li R10, 0 */
		/* 821D54C8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D54C8h case    1:*/		return 0x821D54CC;
		  /* 821D54CCh */ case    2:  		/* li R9, 0 */
		/* 821D54CCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D54CCh case    2:*/		return 0x821D54D0;
		  /* 821D54D0h */ case    3:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D54D0h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D54D0h case    3:*/		return 0x821D54D4;
		  /* 821D54D4h */ case    4:  		/* li R8, 0 */
		/* 821D54D4h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D54D4h case    4:*/		return 0x821D54D8;
		  /* 821D54D8h */ case    5:  		/* addi R7, R1, 560 */
		/* 821D54D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x230);
		/* 821D54D8h case    5:*/		return 0x821D54DC;
		  /* 821D54DCh */ case    6:  		/* addi R6, R1, 728 */
		/* 821D54DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2D8);
		/* 821D54DCh case    6:*/		return 0x821D54E0;
		  /* 821D54E0h */ case    7:  		/* addi R5, R1, 552 */
		/* 821D54E0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x228);
		/* 821D54E0h case    7:*/		return 0x821D54E4;
		  /* 821D54E4h */ case    8:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D54E4h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D54E4h case    8:*/		return 0x821D54E8;
		  /* 821D54E8h */ case    9:  		/* bl 319464 */
		/* 821D54E8h case    9:*/		regs.LR = 0x821D54EC; return 0x822234D0;
		/* 821D54E8h case    9:*/		return 0x821D54EC;
		  /* 821D54ECh */ case   10:  		/* lwz R11, <#[R1 + 552]> */
		/* 821D54ECh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000228) );
		/* 821D54ECh case   10:*/		return 0x821D54F0;
		  /* 821D54F0h */ case   11:  		/* lwz R29, <#[R1 + 124]> */
		/* 821D54F0h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D54F0h case   11:*/		return 0x821D54F4;
		  /* 821D54F4h */ case   12:  		/* cmplw CR6, R11, R29 */
		/* 821D54F4h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821D54F4h case   12:*/		return 0x821D54F8;
		  /* 821D54F8h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 821D54F8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D551C;  }
		/* 821D54F8h case   13:*/		return 0x821D54FC;
		  /* 821D54FCh */ case   14:  		/* lwz R11, <#[R1 + 728]> */
		/* 821D54FCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002D8) );
		/* 821D54FCh case   14:*/		return 0x821D5500;
		  /* 821D5500h */ case   15:  		/* lwz R10, <#[R1 + 136]> */
		/* 821D5500h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5500h case   15:*/		return 0x821D5504;
		  /* 821D5504h */ case   16:  		/* cmpw CR6, R11, R10 */
		/* 821D5504h case   16:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821D5504h case   16:*/		return 0x821D5508;
		  /* 821D5508h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 821D5508h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D551C;  }
		/* 821D5508h case   17:*/		return 0x821D550C;
		  /* 821D550Ch */ case   18:  		/* lwz R11, <#[R1 + 560]> */
		/* 821D550Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000230) );
		/* 821D550Ch case   18:*/		return 0x821D5510;
		  /* 821D5510h */ case   19:  		/* lwz R10, <#[R1 + 128]> */
		/* 821D5510h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5510h case   19:*/		return 0x821D5514;
		  /* 821D5514h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821D5514h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D5514h case   20:*/		return 0x821D5518;
		  /* 821D5518h */ case   21:  		/* bc 12, CR6_EQ, -2576 */
		/* 821D5518h case   21:*/		if ( regs.CR[6].eq ) { return 0x821D4B08;  }
		/* 821D5518h case   21:*/		return 0x821D551C;
	}
	return 0x821D551C;
} // Block from 821D54C4h-821D551Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D551Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D551C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D551C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D551C);
		  /* 821D551Ch */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 821D551Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821D551Ch case    0:*/		return 0x821D5520;
	}
	return 0x821D5520;
} // Block from 821D551Ch-821D5520h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5520);
		  /* 821D5520h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821D5520h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821D5520h case    0:*/		return 0x821D5524;
		  /* 821D5524h */ case    1:  		/* rlwinm R28, R27, 1, 0, 30 */
		/* 821D5524h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R28,regs.R27);
		/* 821D5524h case    1:*/		return 0x821D5528;
		  /* 821D5528h */ case    2:  		/* lwz R10, <#[R19 + 12]> */
		/* 821D5528h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D5528h case    2:*/		return 0x821D552C;
		  /* 821D552Ch */ case    3:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D552Ch case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D552Ch case    3:*/		return 0x821D5530;
		  /* 821D5530h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D5530h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D5530h case    4:*/		return 0x821D5534;
		  /* 821D5534h */ case    5:  		/* srw R11, R9, R28 */
		/* 821D5534h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R28);
		/* 821D5534h case    5:*/		return 0x821D5538;
		  /* 821D5538h */ case    6:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D5538h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D5538h case    6:*/		return 0x821D553C;
		  /* 821D553Ch */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D553Ch case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D553Ch case    7:*/		return 0x821D5540;
		  /* 821D5540h */ case    8:  		/* srw R11, R10, R11 */
		/* 821D5540h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D5540h case    8:*/		return 0x821D5544;
		  /* 821D5544h */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D5544h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D5544h case    9:*/		return 0x821D5548;
		  /* 821D5548h */ case   10:  		/* bl -238792 */
		/* 821D5548h case   10:*/		regs.LR = 0x821D554C; return 0x8219B080;
		/* 821D5548h case   10:*/		return 0x821D554C;
		  /* 821D554Ch */ case   11:  		/* lwz R11, <#[R22]> */
		/* 821D554Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D554Ch case   11:*/		return 0x821D5550;
		  /* 821D5550h */ case   12:  		/* lwz R10, <#[R22 + 12]> */
		/* 821D5550h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000000C) );
		/* 821D5550h case   12:*/		return 0x821D5554;
		  /* 821D5554h */ case   13:  		/* mr R30, R3 */
		/* 821D5554h case   13:*/		regs.R30 = regs.R3;
		/* 821D5554h case   13:*/		return 0x821D5558;
		  /* 821D5558h */ case   14:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D5558h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D5558h case   14:*/		return 0x821D555C;
		  /* 821D555Ch */ case   15:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D555Ch case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D555Ch case   15:*/		return 0x821D5560;
		  /* 821D5560h */ case   16:  		/* srw R11, R9, R28 */
		/* 821D5560h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R28);
		/* 821D5560h case   16:*/		return 0x821D5564;
		  /* 821D5564h */ case   17:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D5564h case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D5564h case   17:*/		return 0x821D5568;
		  /* 821D5568h */ case   18:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D5568h case   18:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D5568h case   18:*/		return 0x821D556C;
		  /* 821D556Ch */ case   19:  		/* srw R11, R10, R11 */
		/* 821D556Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D556Ch case   19:*/		return 0x821D5570;
		  /* 821D5570h */ case   20:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D5570h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D5570h case   20:*/		return 0x821D5574;
		  /* 821D5574h */ case   21:  		/* bl -238836 */
		/* 821D5574h case   21:*/		regs.LR = 0x821D5578; return 0x8219B080;
		/* 821D5574h case   21:*/		return 0x821D5578;
		  /* 821D5578h */ case   22:  		/* rlwinm. R11, R30, 0, 30, 30 */
		/* 821D5578h case   22:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R30);
		/* 821D5578h case   22:*/		return 0x821D557C;
		  /* 821D557Ch */ case   23:  		/* bc 12, CR0_EQ, 24 */
		/* 821D557Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821D5594;  }
		/* 821D557Ch case   23:*/		return 0x821D5580;
		  /* 821D5580h */ case   24:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 821D5580h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 821D5580h case   24:*/		return 0x821D5584;
		  /* 821D5584h */ case   25:  		/* bc 12, CR0_EQ, 16 */
		/* 821D5584h case   25:*/		if ( regs.CR[0].eq ) { return 0x821D5594;  }
		/* 821D5584h case   25:*/		return 0x821D5588;
		  /* 821D5588h */ case   26:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D5588h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5588h case   26:*/		return 0x821D558C;
		  /* 821D558Ch */ case   27:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D558Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D558Ch case   27:*/		return 0x821D5590;
		  /* 821D5590h */ case   28:  		/* b -316 */
		/* 821D5590h case   28:*/		return 0x821D5454;
		/* 821D5590h case   28:*/		return 0x821D5594;
	}
	return 0x821D5594;
} // Block from 821D5520h-821D5594h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D5594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5594);
		  /* 821D5594h */ case    0:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821D5594h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821D5594h case    0:*/		return 0x821D5598;
		  /* 821D5598h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821D5598h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D55B4;  }
		/* 821D5598h case    1:*/		return 0x821D559C;
		  /* 821D559Ch */ case    2:  		/* rlwinm. R11, R3, 0, 30, 30 */
		/* 821D559Ch case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R3);
		/* 821D559Ch case    2:*/		return 0x821D55A0;
		  /* 821D55A0h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 821D55A0h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D55B4;  }
		/* 821D55A0h case    3:*/		return 0x821D55A4;
		  /* 821D55A4h */ case    4:  		/* lwz R8, <#[R1 + 128]> */
		/* 821D55A4h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 821D55A4h case    4:*/		return 0x821D55A8;
		  /* 821D55A8h */ case    5:  		/* mr R6, R29 */
		/* 821D55A8h case    5:*/		regs.R6 = regs.R29;
		/* 821D55A8h case    5:*/		return 0x821D55AC;
		  /* 821D55ACh */ case    6:  		/* lwz R7, <#[R1 + 136]> */
		/* 821D55ACh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 821D55ACh case    6:*/		return 0x821D55B0;
		  /* 821D55B0h */ case    7:  		/* b 2524 */
		/* 821D55B0h case    7:*/		return 0x821D5F8C;
		/* 821D55B0h case    7:*/		return 0x821D55B4;
	}
	return 0x821D55B4;
} // Block from 821D5594h-821D55B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D55B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D55B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D55B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D55B4);
		  /* 821D55B4h */ case    0:  		/* cmplw CR6, R30, R3 */
		/* 821D55B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821D55B4h case    0:*/		return 0x821D55B8;
		  /* 821D55B8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821D55B8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D55C4;  }
		/* 821D55B8h case    1:*/		return 0x821D55BC;
		  /* 821D55BCh */ case    2:  		/* and R11, R3, R30 */
		/* 821D55BCh case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 821D55BCh case    2:*/		return 0x821D55C0;
		  /* 821D55C0h */ case    3:  		/* rlwinm R30, R11, 0, 28, 29 */
		/* 821D55C0h case    3:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R30,regs.R11);
		/* 821D55C0h case    3:*/		return 0x821D55C4;
	}
	return 0x821D55C4;
} // Block from 821D55B4h-821D55C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D55C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D55C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D55C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D55C4);
		  /* 821D55C4h */ case    0:  		/* rlwinm R11, R27, 2, 0, 29 */
		/* 821D55C4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R27);
		/* 821D55C4h case    0:*/		return 0x821D55C8;
		  /* 821D55C8h */ case    1:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D55C8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D55C8h case    1:*/		return 0x821D55CC;
		  /* 821D55CCh */ case    2:  		/* slw R11, R30, R11 */
		/* 821D55CCh case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821D55CCh case    2:*/		return 0x821D55D0;
		  /* 821D55D0h */ case    3:  		/* and R9, R11, R10 */
		/* 821D55D0h case    3:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D55D0h case    3:*/		return 0x821D55D4;
		  /* 821D55D4h */ case    4:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D55D4h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D55D4h case    4:*/		return 0x821D55D8;
		  /* 821D55D8h */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821D55D8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D55D8h case    5:*/		return 0x821D55DC;
		  /* 821D55DCh */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D55DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D55E8;  }
		/* 821D55DCh case    6:*/		return 0x821D55E0;
		  /* 821D55E0h */ case    7:  		/* mr R11, R21 */
		/* 821D55E0h case    7:*/		regs.R11 = regs.R21;
		/* 821D55E0h case    7:*/		return 0x821D55E4;
		  /* 821D55E4h */ case    8:  		/* b 16 */
		/* 821D55E4h case    8:*/		return 0x821D55F4;
		/* 821D55E4h case    8:*/		return 0x821D55E8;
	}
	return 0x821D55E8;
} // Block from 821D55C4h-821D55E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D55E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D55E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D55E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D55E8);
		  /* 821D55E8h */ case    0:  		/* or R10, R11, R10 */
		/* 821D55E8h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D55E8h case    0:*/		return 0x821D55EC;
		  /* 821D55ECh */ case    1:  		/* li R11, 1 */
		/* 821D55ECh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D55ECh case    1:*/		return 0x821D55F0;
		  /* 821D55F0h */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D55F0h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D55F0h case    2:*/		return 0x821D55F4;
	}
	return 0x821D55F4;
} // Block from 821D55E8h-821D55F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D55F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D55F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D55F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D55F4);
		  /* 821D55F4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D55F4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D55F4h case    0:*/		return 0x821D55F8;
		  /* 821D55F8h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D55F8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D560C;  }
		/* 821D55F8h case    1:*/		return 0x821D55FC;
		  /* 821D55FCh */ case    2:  		/* mr R5, R25 */
		/* 821D55FCh case    2:*/		regs.R5 = regs.R25;
		/* 821D55FCh case    2:*/		return 0x821D5600;
		  /* 821D5600h */ case    3:  		/* mr R4, R16 */
		/* 821D5600h case    3:*/		regs.R4 = regs.R16;
		/* 821D5600h case    3:*/		return 0x821D5604;
		  /* 821D5604h */ case    4:  		/* mr R3, R24 */
		/* 821D5604h case    4:*/		regs.R3 = regs.R24;
		/* 821D5604h case    4:*/		return 0x821D5608;
		  /* 821D5608h */ case    5:  		/* bl -39848 */
		/* 821D5608h case    5:*/		regs.LR = 0x821D560C; return 0x821CBA60;
		/* 821D5608h case    5:*/		return 0x821D560C;
	}
	return 0x821D560C;
} // Block from 821D55F4h-821D560Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D560Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D560C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D560C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D560C);
		  /* 821D560Ch */ case    0:  		/* addi R6, R1, 1160 */
		/* 821D560Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x488);
		/* 821D560Ch case    0:*/		return 0x821D5610;
		  /* 821D5610h */ case    1:  		/* addi R5, R1, 1176 */
		/* 821D5610h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x498);
		/* 821D5610h case    1:*/		return 0x821D5614;
		  /* 821D5614h */ case    2:  		/* mr R4, R27 */
		/* 821D5614h case    2:*/		regs.R4 = regs.R27;
		/* 821D5614h case    2:*/		return 0x821D5618;
		  /* 821D5618h */ case    3:  		/* mr R3, R19 */
		/* 821D5618h case    3:*/		regs.R3 = regs.R19;
		/* 821D5618h case    3:*/		return 0x821D561C;
		  /* 821D561Ch */ case    4:  		/* bl 317196 */
		/* 821D561Ch case    4:*/		regs.LR = 0x821D5620; return 0x82222D28;
		/* 821D561Ch case    4:*/		return 0x821D5620;
		  /* 821D5620h */ case    5:  		/* addi R6, R1, 1352 */
		/* 821D5620h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x548);
		/* 821D5620h case    5:*/		return 0x821D5624;
		  /* 821D5624h */ case    6:  		/* addi R5, R1, 1376 */
		/* 821D5624h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x560);
		/* 821D5624h case    6:*/		return 0x821D5628;
		  /* 821D5628h */ case    7:  		/* mr R4, R27 */
		/* 821D5628h case    7:*/		regs.R4 = regs.R27;
		/* 821D5628h case    7:*/		return 0x821D562C;
		  /* 821D562Ch */ case    8:  		/* mr R3, R22 */
		/* 821D562Ch case    8:*/		regs.R3 = regs.R22;
		/* 821D562Ch case    8:*/		return 0x821D5630;
		  /* 821D5630h */ case    9:  		/* bl 317176 */
		/* 821D5630h case    9:*/		regs.LR = 0x821D5634; return 0x82222D28;
		/* 821D5630h case    9:*/		return 0x821D5634;
		  /* 821D5634h */ case   10:  		/* lfd FR0, <#[R1 + 1160]> */
		/* 821D5634h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000488) );
		/* 821D5634h case   10:*/		return 0x821D5638;
		  /* 821D5638h */ case   11:  		/* lfd FR13, <#[R1 + 1352]> */
		/* 821D5638h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000548) );
		/* 821D5638h case   11:*/		return 0x821D563C;
		  /* 821D563Ch */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D563Ch case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D563Ch case   12:*/		return 0x821D5640;
		  /* 821D5640h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821D5640h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821D5648;  }
		/* 821D5640h case   13:*/		return 0x821D5644;
		  /* 821D5644h */ case   14:  		/* fmr FR13, FR0 */
		/* 821D5644h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 821D5644h case   14:*/		return 0x821D5648;
	}
	return 0x821D5648;
} // Block from 821D560Ch-821D5648h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D5648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5648);
		  /* 821D5648h */ case    0:  		/* lfd FR0, <#[R1 + 1176]> */
		/* 821D5648h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000498) );
		/* 821D5648h case    0:*/		return 0x821D564C;
		  /* 821D564Ch */ case    1:  		/* lfd FR1, <#[R1 + 1376]> */
		/* 821D564Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000560) );
		/* 821D564Ch case    1:*/		return 0x821D5650;
		  /* 821D5650h */ case    2:  		/* fcmpu CR6, FR0, FR1 */
		/* 821D5650h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821D5650h case    2:*/		return 0x821D5654;
		  /* 821D5654h */ case    3:  		/* bc 4, CR6_GT, 900 */
		/* 821D5654h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821D59D8;  }
		/* 821D5654h case    3:*/		return 0x821D5658;
		  /* 821D5658h */ case    4:  		/* b 892 */
		/* 821D5658h case    4:*/		return 0x821D59D4;
		/* 821D5658h case    4:*/		return 0x821D565C;
	}
	return 0x821D565C;
} // Block from 821D5648h-821D565Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D565Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D565C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D565C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D565C);
		  /* 821D565Ch */ case    0:  		/* lwz R3, <#[R1 + 124]> */
		/* 821D565Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D565Ch case    0:*/		return 0x821D5660;
		  /* 821D5660h */ case    1:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D5660h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D5660h case    1:*/		return 0x821D5664;
		  /* 821D5664h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5664h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5664h case    2:*/		return 0x821D5668;
		  /* 821D5668h */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5668h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5668h case    3:*/		return 0x821D566C;
		  /* 821D566Ch */ case    4:  		/* bc 4, CR6_EQ, 168 */
		/* 821D566Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D5714;  }
		/* 821D566Ch case    4:*/		return 0x821D5670;
		  /* 821D5670h */ case    5:  		/* lwz R5, <#[R1 + 128]> */
		/* 821D5670h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5670h case    5:*/		return 0x821D5674;
		  /* 821D5674h */ case    6:  		/* lwz R4, <#[R1 + 136]> */
		/* 821D5674h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5674h case    6:*/		return 0x821D5678;
		  /* 821D5678h */ case    7:  		/* bl 311336 */
		/* 821D5678h case    7:*/		regs.LR = 0x821D567C; return 0x822216A0;
		/* 821D5678h case    7:*/		return 0x821D567C;
		  /* 821D567Ch */ case    8:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D567Ch case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D567Ch case    8:*/		return 0x821D5680;
		  /* 821D5680h */ case    9:  		/* bc 4, CR6_EQ, 148 */
		/* 821D5680h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D5714;  }
		/* 821D5680h case    9:*/		return 0x821D5684;
		  /* 821D5684h */ case   10:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D5684h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5684h case   10:*/		return 0x821D5688;
		  /* 821D5688h */ case   11:  		/* lwz R30, <#[R1 + 116]> */
		/* 821D5688h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5688h case   11:*/		return 0x821D568C;
		  /* 821D568Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821D568Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D568Ch case   12:*/		return 0x821D5690;
		  /* 821D5690h */ case   13:  		/* bc 4, CR6_EQ, 520 */
		/* 821D5690h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D5898;  }
		/* 821D5690h case   13:*/		return 0x821D5694;
		  /* 821D5694h */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D5694h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D5694h case   14:*/		return 0x821D5698;
		  /* 821D5698h */ case   15:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5698h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5698h case   15:*/		return 0x821D569C;
		  /* 821D569Ch */ case   16:  		/* cmplwi CR6, R11, 384 */
		/* 821D569Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821D569Ch case   16:*/		return 0x821D56A0;
		  /* 821D56A0h */ case   17:  		/* bc 4, CR6_EQ, 132 */
		/* 821D56A0h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D5724;  }
		/* 821D56A0h case   17:*/		return 0x821D56A4;
		  /* 821D56A4h */ case   18:  		/* lwz R31, <#[R1 + 120]> */
		/* 821D56A4h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000078) );
		/* 821D56A4h case   18:*/		return 0x821D56A8;
		  /* 821D56A8h */ case   19:  		/* lwz R3, <#[R30 + 48]> */
		/* 821D56A8h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821D56A8h case   19:*/		return 0x821D56AC;
		  /* 821D56ACh */ case   20:  		/* mr R4, R31 */
		/* 821D56ACh case   20:*/		regs.R4 = regs.R31;
		/* 821D56ACh case   20:*/		return 0x821D56B0;
		  /* 821D56B0h */ case   21:  		/* bl -238984 */
		/* 821D56B0h case   21:*/		regs.LR = 0x821D56B4; return 0x8219B128;
		/* 821D56B0h case   21:*/		return 0x821D56B4;
		  /* 821D56B4h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D56B4h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D56B4h case   22:*/		return 0x821D56B8;
		  /* 821D56B8h */ case   23:  		/* bc 12, CR0_EQ, 108 */
		/* 821D56B8h case   23:*/		if ( regs.CR[0].eq ) { return 0x821D5724;  }
		/* 821D56B8h case   23:*/		return 0x821D56BC;
		  /* 821D56BCh */ case   24:  		/* li R10, 0 */
		/* 821D56BCh case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D56BCh case   24:*/		return 0x821D56C0;
		  /* 821D56C0h */ case   25:  		/* lwz R3, <#[R30 + 44]> */
		/* 821D56C0h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D56C0h case   25:*/		return 0x821D56C4;
		  /* 821D56C4h */ case   26:  		/* mr R9, R16 */
		/* 821D56C4h case   26:*/		regs.R9 = regs.R16;
		/* 821D56C4h case   26:*/		return 0x821D56C8;
		  /* 821D56C8h */ case   27:  		/* li R8, 0 */
		/* 821D56C8h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D56C8h case   27:*/		return 0x821D56CC;
		  /* 821D56CCh */ case   28:  		/* addi R7, R1, 824 */
		/* 821D56CCh case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x338);
		/* 821D56CCh case   28:*/		return 0x821D56D0;
		  /* 821D56D0h */ case   29:  		/* addi R6, R1, 568 */
		/* 821D56D0h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x238);
		/* 821D56D0h case   29:*/		return 0x821D56D4;
		  /* 821D56D4h */ case   30:  		/* addi R5, R1, 736 */
		/* 821D56D4h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2E0);
		/* 821D56D4h case   30:*/		return 0x821D56D8;
		  /* 821D56D8h */ case   31:  		/* mr R4, R31 */
		/* 821D56D8h case   31:*/		regs.R4 = regs.R31;
		/* 821D56D8h case   31:*/		return 0x821D56DC;
		  /* 821D56DCh */ case   32:  		/* bl 318964 */
		/* 821D56DCh case   32:*/		regs.LR = 0x821D56E0; return 0x822234D0;
		/* 821D56DCh case   32:*/		return 0x821D56E0;
		  /* 821D56E0h */ case   33:  		/* li R4, 1 */
		/* 821D56E0h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D56E0h case   33:*/		return 0x821D56E4;
		  /* 821D56E4h */ case   34:  		/* lwz R31, <#[R1 + 824]> */
		/* 821D56E4h case   34:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000338) );
		/* 821D56E4h case   34:*/		return 0x821D56E8;
		  /* 821D56E8h */ case   35:  		/* mr R3, R31 */
		/* 821D56E8h case   35:*/		regs.R3 = regs.R31;
		/* 821D56E8h case   35:*/		return 0x821D56EC;
		  /* 821D56ECh */ case   36:  		/* bl -259396 */
		/* 821D56ECh case   36:*/		regs.LR = 0x821D56F0; return 0x821961A8;
		/* 821D56ECh case   36:*/		return 0x821D56F0;
		  /* 821D56F0h */ case   37:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D56F0h case   37:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D56F0h case   37:*/		return 0x821D56F4;
		  /* 821D56F4h */ case   38:  		/* bc 12, CR0_EQ, 32 */
		/* 821D56F4h case   38:*/		if ( regs.CR[0].eq ) { return 0x821D5714;  }
		/* 821D56F4h case   38:*/		return 0x821D56F8;
		  /* 821D56F8h */ case   39:  		/* li R4, 1 */
		/* 821D56F8h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D56F8h case   39:*/		return 0x821D56FC;
		  /* 821D56FCh */ case   40:  		/* mr R3, R31 */
		/* 821D56FCh case   40:*/		regs.R3 = regs.R31;
		/* 821D56FCh case   40:*/		return 0x821D5700;
		  /* 821D5700h */ case   41:  		/* bl -384136 */
		/* 821D5700h case   41:*/		regs.LR = 0x821D5704; return 0x82177A78;
		/* 821D5700h case   41:*/		return 0x821D5704;
		  /* 821D5704h */ case   42:  		/* lwz R7, <#[R1 + 568]> */
		/* 821D5704h case   42:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000238) );
		/* 821D5704h case   42:*/		return 0x821D5708;
		  /* 821D5708h */ case   43:  		/* lwz R6, <#[R1 + 736]> */
		/* 821D5708h case   43:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000002E0) );
		/* 821D5708h case   43:*/		return 0x821D570C;
		  /* 821D570Ch */ case   44:  		/* mr R8, R3 */
		/* 821D570Ch case   44:*/		regs.R8 = regs.R3;
		/* 821D570Ch case   44:*/		return 0x821D5710;
		  /* 821D5710h */ case   45:  		/* b 2172 */
		/* 821D5710h case   45:*/		return 0x821D5F8C;
		/* 821D5710h case   45:*/		return 0x821D5714;
	}
	return 0x821D5714;
} // Block from 821D565Ch-821D5714h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821D5714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5714);
		  /* 821D5714h */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D5714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5714h case    0:*/		return 0x821D5718;
		  /* 821D5718h */ case    1:  		/* lwz R30, <#[R1 + 116]> */
		/* 821D5718h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5718h case    1:*/		return 0x821D571C;
		  /* 821D571Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821D571Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D571Ch case    2:*/		return 0x821D5720;
		  /* 821D5720h */ case    3:  		/* bc 4, CR6_EQ, 376 */
		/* 821D5720h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D5898;  }
		/* 821D5720h case    3:*/		return 0x821D5724;
	}
	return 0x821D5724;
} // Block from 821D5714h-821D5724h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5724);
		  /* 821D5724h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5724h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5724h case    0:*/		return 0x821D5728;
		  /* 821D5728h */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D5728h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D5728h case    1:*/		return 0x821D572C;
		  /* 821D572Ch */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D572Ch case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D572Ch case    2:*/		return 0x821D5730;
		  /* 821D5730h */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5730h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5730h case    3:*/		return 0x821D5734;
		  /* 821D5734h */ case    4:  		/* bc 4, CR6_EQ, 164 */
		/* 821D5734h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D57D8;  }
		/* 821D5734h case    4:*/		return 0x821D5738;
		  /* 821D5738h */ case    5:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D5738h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D5738h case    5:*/		return 0x821D573C;
		  /* 821D573Ch */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D573Ch case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D573Ch case    6:*/		return 0x821D5740;
		  /* 821D5740h */ case    7:  		/* cmplwi CR6, R11, 384 */
		/* 821D5740h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821D5740h case    7:*/		return 0x821D5744;
		  /* 821D5744h */ case    8:  		/* bc 4, CR6_EQ, 148 */
		/* 821D5744h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D57D8;  }
		/* 821D5744h case    8:*/		return 0x821D5748;
		  /* 821D5748h */ case    9:  		/* li R10, 0 */
		/* 821D5748h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5748h case    9:*/		return 0x821D574C;
		  /* 821D574Ch */ case   10:  		/* lwz R3, <#[R30 + 48]> */
		/* 821D574Ch case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821D574Ch case   10:*/		return 0x821D5750;
		  /* 821D5750h */ case   11:  		/* mr R9, R16 */
		/* 821D5750h case   11:*/		regs.R9 = regs.R16;
		/* 821D5750h case   11:*/		return 0x821D5754;
		  /* 821D5754h */ case   12:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D5754h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5754h case   12:*/		return 0x821D5758;
		  /* 821D5758h */ case   13:  		/* li R8, 0 */
		/* 821D5758h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D5758h case   13:*/		return 0x821D575C;
		  /* 821D575Ch */ case   14:  		/* addi R7, R1, 576 */
		/* 821D575Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x240);
		/* 821D575Ch case   14:*/		return 0x821D5760;
		  /* 821D5760h */ case   15:  		/* addi R6, R1, 856 */
		/* 821D5760h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x358);
		/* 821D5760h case   15:*/		return 0x821D5764;
		  /* 821D5764h */ case   16:  		/* addi R5, R1, 392 */
		/* 821D5764h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x188);
		/* 821D5764h case   16:*/		return 0x821D5768;
		  /* 821D5768h */ case   17:  		/* bl 318824 */
		/* 821D5768h case   17:*/		regs.LR = 0x821D576C; return 0x822234D0;
		/* 821D5768h case   17:*/		return 0x821D576C;
		  /* 821D576Ch */ case   18:  		/* lwz R11, <#[R1 + 392]> */
		/* 821D576Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000188) );
		/* 821D576Ch case   18:*/		return 0x821D5770;
		  /* 821D5770h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D5770h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D5770h case   19:*/		return 0x821D5774;
		  /* 821D5774h */ case   20:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5774h case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5774h case   20:*/		return 0x821D5778;
		  /* 821D5778h */ case   21:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5778h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5778h case   21:*/		return 0x821D577C;
		  /* 821D577Ch */ case   22:  		/* bc 4, CR6_EQ, 76 */
		/* 821D577Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D57C8;  }
		/* 821D577Ch case   22:*/		return 0x821D5780;
		  /* 821D5780h */ case   23:  		/* lwz R5, <#[R1 + 128]> */
		/* 821D5780h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5780h case   23:*/		return 0x821D5784;
		  /* 821D5784h */ case   24:  		/* lwz R4, <#[R1 + 136]> */
		/* 821D5784h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5784h case   24:*/		return 0x821D5788;
		  /* 821D5788h */ case   25:  		/* lwz R3, <#[R1 + 124]> */
		/* 821D5788h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5788h case   25:*/		return 0x821D578C;
		  /* 821D578Ch */ case   26:  		/* bl 311060 */
		/* 821D578Ch case   26:*/		regs.LR = 0x821D5790; return 0x822216A0;
		/* 821D578Ch case   26:*/		return 0x821D5790;
		  /* 821D5790h */ case   27:  		/* lwz R5, <#[R1 + 576]> */
		/* 821D5790h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000240) );
		/* 821D5790h case   27:*/		return 0x821D5794;
		  /* 821D5794h */ case   28:  		/* fmr FR31, FR1 */
		/* 821D5794h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D5794h case   28:*/		return 0x821D5798;
		  /* 821D5798h */ case   29:  		/* lwz R4, <#[R1 + 856]> */
		/* 821D5798h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000358) );
		/* 821D5798h case   29:*/		return 0x821D579C;
		  /* 821D579Ch */ case   30:  		/* lwz R3, <#[R1 + 392]> */
		/* 821D579Ch case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000188) );
		/* 821D579Ch case   30:*/		return 0x821D57A0;
		  /* 821D57A0h */ case   31:  		/* bl 311040 */
		/* 821D57A0h case   31:*/		regs.LR = 0x821D57A4; return 0x822216A0;
		/* 821D57A0h case   31:*/		return 0x821D57A4;
		  /* 821D57A4h */ case   32:  		/* fcmpu CR6, FR1, FR31 */
		/* 821D57A4h case   32:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821D57A4h case   32:*/		return 0x821D57A8;
		  /* 821D57A8h */ case   33:  		/* bc 12, CR6_LT, 32 */
		/* 821D57A8h case   33:*/		if ( regs.CR[6].lt ) { return 0x821D57C8;  }
		/* 821D57A8h case   33:*/		return 0x821D57AC;
		  /* 821D57ACh */ case   34:  		/* addi R3, R1, 1192 */
		/* 821D57ACh case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x4A8);
		/* 821D57ACh case   34:*/		return 0x821D57B0;
		  /* 821D57B0h */ case   35:  		/* lwz R6, <#[R1 + 128]> */
		/* 821D57B0h case   35:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 821D57B0h case   35:*/		return 0x821D57B4;
		  /* 821D57B4h */ case   36:  		/* lwz R5, <#[R1 + 136]> */
		/* 821D57B4h case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 821D57B4h case   36:*/		return 0x821D57B8;
		  /* 821D57B8h */ case   37:  		/* lwz R4, <#[R1 + 124]> */
		/* 821D57B8h case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D57B8h case   37:*/		return 0x821D57BC;
		  /* 821D57BCh */ case   38:  		/* bl 334708 */
		/* 821D57BCh case   38:*/		regs.LR = 0x821D57C0; return 0x82227330;
		/* 821D57BCh case   38:*/		return 0x821D57C0;
		  /* 821D57C0h */ case   39:  		/* addi R5, R1, 1192 */
		/* 821D57C0h case   39:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4A8);
		/* 821D57C0h case   39:*/		return 0x821D57C4;
		  /* 821D57C4h */ case   40:  		/* b -960 */
		/* 821D57C4h case   40:*/		return 0x821D5404;
		/* 821D57C4h case   40:*/		return 0x821D57C8;
	}
	return 0x821D57C8;
} // Block from 821D5724h-821D57C8h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821D57C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D57C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D57C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D57C8);
		  /* 821D57C8h */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D57C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D57C8h case    0:*/		return 0x821D57CC;
		  /* 821D57CCh */ case    1:  		/* lwz R30, <#[R1 + 116]> */
		/* 821D57CCh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821D57CCh case    1:*/		return 0x821D57D0;
		  /* 821D57D0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821D57D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D57D0h case    2:*/		return 0x821D57D4;
		  /* 821D57D4h */ case    3:  		/* bc 4, CR6_EQ, 196 */
		/* 821D57D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D5898;  }
		/* 821D57D4h case    3:*/		return 0x821D57D8;
	}
	return 0x821D57D8;
} // Block from 821D57C8h-821D57D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D57D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D57D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D57D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D57D8);
		  /* 821D57D8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D57D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D57D8h case    0:*/		return 0x821D57DC;
		  /* 821D57DCh */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D57DCh case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D57DCh case    1:*/		return 0x821D57E0;
		  /* 821D57E0h */ case    2:  		/* cmplwi CR6, R11, 512 */
		/* 821D57E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 821D57E0h case    2:*/		return 0x821D57E4;
		  /* 821D57E4h */ case    3:  		/* bc 4, CR6_EQ, 180 */
		/* 821D57E4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D5898;  }
		/* 821D57E4h case    3:*/		return 0x821D57E8;
		  /* 821D57E8h */ case    4:  		/* li R10, 0 */
		/* 821D57E8h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D57E8h case    4:*/		return 0x821D57EC;
		  /* 821D57ECh */ case    5:  		/* lwz R3, <#[R30 + 44]> */
		/* 821D57ECh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D57ECh case    5:*/		return 0x821D57F0;
		  /* 821D57F0h */ case    6:  		/* li R9, 0 */
		/* 821D57F0h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D57F0h case    6:*/		return 0x821D57F4;
		  /* 821D57F4h */ case    7:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D57F4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D57F4h case    7:*/		return 0x821D57F8;
		  /* 821D57F8h */ case    8:  		/* li R8, 0 */
		/* 821D57F8h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D57F8h case    8:*/		return 0x821D57FC;
		  /* 821D57FCh */ case    9:  		/* addi R7, R1, 592 */
		/* 821D57FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x250);
		/* 821D57FCh case    9:*/		return 0x821D5800;
		  /* 821D5800h */ case   10:  		/* addi R6, R1, 744 */
		/* 821D5800h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2E8);
		/* 821D5800h case   10:*/		return 0x821D5804;
		  /* 821D5804h */ case   11:  		/* addi R5, R1, 584 */
		/* 821D5804h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x248);
		/* 821D5804h case   11:*/		return 0x821D5808;
		  /* 821D5808h */ case   12:  		/* bl 318664 */
		/* 821D5808h case   12:*/		regs.LR = 0x821D580C; return 0x822234D0;
		/* 821D5808h case   12:*/		return 0x821D580C;
		  /* 821D580Ch */ case   13:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D580Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D580Ch case   13:*/		return 0x821D5810;
		  /* 821D5810h */ case   14:  		/* lwz R10, <#[R1 + 584]> */
		/* 821D5810h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000248) );
		/* 821D5810h case   14:*/		return 0x821D5814;
		  /* 821D5814h */ case   15:  		/* cmplw CR6, R10, R11 */
		/* 821D5814h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D5814h case   15:*/		return 0x821D5818;
		  /* 821D5818h */ case   16:  		/* bc 4, CR6_EQ, 36 */
		/* 821D5818h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D583C;  }
		/* 821D5818h case   16:*/		return 0x821D581C;
		  /* 821D581Ch */ case   17:  		/* lwz R11, <#[R1 + 136]> */
		/* 821D581Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821D581Ch case   17:*/		return 0x821D5820;
		  /* 821D5820h */ case   18:  		/* lwz R10, <#[R1 + 744]> */
		/* 821D5820h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000002E8) );
		/* 821D5820h case   18:*/		return 0x821D5824;
		  /* 821D5824h */ case   19:  		/* cmpw CR6, R10, R11 */
		/* 821D5824h case   19:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821D5824h case   19:*/		return 0x821D5828;
		  /* 821D5828h */ case   20:  		/* bc 4, CR6_EQ, 20 */
		/* 821D5828h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D583C;  }
		/* 821D5828h case   20:*/		return 0x821D582C;
		  /* 821D582Ch */ case   21:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D582Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D582Ch case   21:*/		return 0x821D5830;
		  /* 821D5830h */ case   22:  		/* lwz R10, <#[R1 + 592]> */
		/* 821D5830h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000250) );
		/* 821D5830h case   22:*/		return 0x821D5834;
		  /* 821D5834h */ case   23:  		/* cmplw CR6, R10, R11 */
		/* 821D5834h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D5834h case   23:*/		return 0x821D5838;
		  /* 821D5838h */ case   24:  		/* bc 12, CR6_EQ, -3376 */
		/* 821D5838h case   24:*/		if ( regs.CR[6].eq ) { return 0x821D4B08;  }
		/* 821D5838h case   24:*/		return 0x821D583C;
	}
	return 0x821D583C;
} // Block from 821D57D8h-821D583Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D583Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D583C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D583C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D583C);
		  /* 821D583Ch */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D583Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D583Ch case    0:*/		return 0x821D5840;
		  /* 821D5840h */ case    1:  		/* li R10, 0 */
		/* 821D5840h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5840h case    1:*/		return 0x821D5844;
		  /* 821D5844h */ case    2:  		/* li R9, 0 */
		/* 821D5844h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D5844h case    2:*/		return 0x821D5848;
		  /* 821D5848h */ case    3:  		/* lwz R4, <#[R1 + 120]> */
		/* 821D5848h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5848h case    3:*/		return 0x821D584C;
		  /* 821D584Ch */ case    4:  		/* li R8, 0 */
		/* 821D584Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D584Ch case    4:*/		return 0x821D5850;
		  /* 821D5850h */ case    5:  		/* addi R7, R1, 752 */
		/* 821D5850h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2F0);
		/* 821D5850h case    5:*/		return 0x821D5854;
		  /* 821D5854h */ case    6:  		/* addi R6, R1, 600 */
		/* 821D5854h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x258);
		/* 821D5854h case    6:*/		return 0x821D5858;
		  /* 821D5858h */ case    7:  		/* addi R5, R1, 832 */
		/* 821D5858h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x340);
		/* 821D5858h case    7:*/		return 0x821D585C;
		  /* 821D585Ch */ case    8:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D585Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D585Ch case    8:*/		return 0x821D5860;
		  /* 821D5860h */ case    9:  		/* bl 318576 */
		/* 821D5860h case    9:*/		regs.LR = 0x821D5864; return 0x822234D0;
		/* 821D5860h case    9:*/		return 0x821D5864;
		  /* 821D5864h */ case   10:  		/* lwz R11, <#[R1 + 832]> */
		/* 821D5864h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000340) );
		/* 821D5864h case   10:*/		return 0x821D5868;
		  /* 821D5868h */ case   11:  		/* lwz R10, <#[R1 + 124]> */
		/* 821D5868h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5868h case   11:*/		return 0x821D586C;
		  /* 821D586Ch */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821D586Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D586Ch case   12:*/		return 0x821D5870;
		  /* 821D5870h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 821D5870h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D5894;  }
		/* 821D5870h case   13:*/		return 0x821D5874;
		  /* 821D5874h */ case   14:  		/* lwz R11, <#[R1 + 600]> */
		/* 821D5874h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000258) );
		/* 821D5874h case   14:*/		return 0x821D5878;
		  /* 821D5878h */ case   15:  		/* lwz R10, <#[R1 + 136]> */
		/* 821D5878h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5878h case   15:*/		return 0x821D587C;
		  /* 821D587Ch */ case   16:  		/* cmpw CR6, R11, R10 */
		/* 821D587Ch case   16:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821D587Ch case   16:*/		return 0x821D5880;
		  /* 821D5880h */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 821D5880h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D5894;  }
		/* 821D5880h case   17:*/		return 0x821D5884;
		  /* 821D5884h */ case   18:  		/* lwz R11, <#[R1 + 752]> */
		/* 821D5884h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002F0) );
		/* 821D5884h case   18:*/		return 0x821D5888;
		  /* 821D5888h */ case   19:  		/* lwz R10, <#[R1 + 128]> */
		/* 821D5888h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5888h case   19:*/		return 0x821D588C;
		  /* 821D588Ch */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821D588Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D588Ch case   20:*/		return 0x821D5890;
		  /* 821D5890h */ case   21:  		/* bc 12, CR6_EQ, -3464 */
		/* 821D5890h case   21:*/		if ( regs.CR[6].eq ) { return 0x821D4B08;  }
		/* 821D5890h case   21:*/		return 0x821D5894;
	}
	return 0x821D5894;
} // Block from 821D583Ch-821D5894h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D5894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5894);
		  /* 821D5894h */ case    0:  		/* lwz R30, <#[R1 + 116]> */
		/* 821D5894h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5894h case    0:*/		return 0x821D5898;
	}
	return 0x821D5898;
} // Block from 821D5894h-821D5898h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5898);
		  /* 821D5898h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821D5898h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821D5898h case    0:*/		return 0x821D589C;
		  /* 821D589Ch */ case    1:  		/* rlwinm R29, R27, 1, 0, 30 */
		/* 821D589Ch case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R29,regs.R27);
		/* 821D589Ch case    1:*/		return 0x821D58A0;
		  /* 821D58A0h */ case    2:  		/* lwz R10, <#[R19 + 12]> */
		/* 821D58A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D58A0h case    2:*/		return 0x821D58A4;
		  /* 821D58A4h */ case    3:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D58A4h case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D58A4h case    3:*/		return 0x821D58A8;
		  /* 821D58A8h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D58A8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D58A8h case    4:*/		return 0x821D58AC;
		  /* 821D58ACh */ case    5:  		/* srw R11, R9, R29 */
		/* 821D58ACh case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 821D58ACh case    5:*/		return 0x821D58B0;
		  /* 821D58B0h */ case    6:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D58B0h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D58B0h case    6:*/		return 0x821D58B4;
		  /* 821D58B4h */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D58B4h case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D58B4h case    7:*/		return 0x821D58B8;
		  /* 821D58B8h */ case    8:  		/* srw R11, R10, R11 */
		/* 821D58B8h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D58B8h case    8:*/		return 0x821D58BC;
		  /* 821D58BCh */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D58BCh case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D58BCh case    9:*/		return 0x821D58C0;
		  /* 821D58C0h */ case   10:  		/* bl -239680 */
		/* 821D58C0h case   10:*/		regs.LR = 0x821D58C4; return 0x8219B080;
		/* 821D58C0h case   10:*/		return 0x821D58C4;
		  /* 821D58C4h */ case   11:  		/* lwz R11, <#[R22]> */
		/* 821D58C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821D58C4h case   11:*/		return 0x821D58C8;
		  /* 821D58C8h */ case   12:  		/* lwz R10, <#[R22 + 12]> */
		/* 821D58C8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000000C) );
		/* 821D58C8h case   12:*/		return 0x821D58CC;
		  /* 821D58CCh */ case   13:  		/* mr R31, R3 */
		/* 821D58CCh case   13:*/		regs.R31 = regs.R3;
		/* 821D58CCh case   13:*/		return 0x821D58D0;
		  /* 821D58D0h */ case   14:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D58D0h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D58D0h case   14:*/		return 0x821D58D4;
		  /* 821D58D4h */ case   15:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D58D4h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D58D4h case   15:*/		return 0x821D58D8;
		  /* 821D58D8h */ case   16:  		/* srw R11, R9, R29 */
		/* 821D58D8h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 821D58D8h case   16:*/		return 0x821D58DC;
		  /* 821D58DCh */ case   17:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D58DCh case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D58DCh case   17:*/		return 0x821D58E0;
		  /* 821D58E0h */ case   18:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D58E0h case   18:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D58E0h case   18:*/		return 0x821D58E4;
		  /* 821D58E4h */ case   19:  		/* srw R11, R10, R11 */
		/* 821D58E4h case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D58E4h case   19:*/		return 0x821D58E8;
		  /* 821D58E8h */ case   20:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D58E8h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D58E8h case   20:*/		return 0x821D58EC;
		  /* 821D58ECh */ case   21:  		/* bl -239724 */
		/* 821D58ECh case   21:*/		regs.LR = 0x821D58F0; return 0x8219B080;
		/* 821D58ECh case   21:*/		return 0x821D58F0;
		  /* 821D58F0h */ case   22:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D58F0h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D58F0h case   22:*/		return 0x821D58F4;
		  /* 821D58F4h */ case   23:  		/* bc 12, CR0_EQ, 28 */
		/* 821D58F4h case   23:*/		if ( regs.CR[0].eq ) { return 0x821D5910;  }
		/* 821D58F4h case   23:*/		return 0x821D58F8;
		  /* 821D58F8h */ case   24:  		/* rlwinm. R11, R3, 0, 30, 30 */
		/* 821D58F8h case   24:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R3);
		/* 821D58F8h case   24:*/		return 0x821D58FC;
		  /* 821D58FCh */ case   25:  		/* bc 12, CR0_EQ, 20 */
		/* 821D58FCh case   25:*/		if ( regs.CR[0].eq ) { return 0x821D5910;  }
		/* 821D58FCh case   25:*/		return 0x821D5900;
		  /* 821D5900h */ case   26:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D5900h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5900h case   26:*/		return 0x821D5904;
		  /* 821D5904h */ case   27:  		/* mr R6, R30 */
		/* 821D5904h case   27:*/		regs.R6 = regs.R30;
		/* 821D5904h case   27:*/		return 0x821D5908;
		  /* 821D5908h */ case   28:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D5908h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5908h case   28:*/		return 0x821D590C;
		  /* 821D590Ch */ case   29:  		/* b 1664 */
		/* 821D590Ch case   29:*/		return 0x821D5F8C;
		/* 821D590Ch case   29:*/		return 0x821D5910;
	}
	return 0x821D5910;
} // Block from 821D5898h-821D5910h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D5910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5910);
		  /* 821D5910h */ case    0:  		/* rlwinm. R11, R31, 0, 30, 30 */
		/* 821D5910h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R31);
		/* 821D5910h case    0:*/		return 0x821D5914;
		  /* 821D5914h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821D5914h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D5930;  }
		/* 821D5914h case    1:*/		return 0x821D5918;
		  /* 821D5918h */ case    2:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 821D5918h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 821D5918h case    2:*/		return 0x821D591C;
		  /* 821D591Ch */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 821D591Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821D5930;  }
		/* 821D591Ch case    3:*/		return 0x821D5920;
		  /* 821D5920h */ case    4:  		/* lwz R8, <#[R1 + 128]> */
		/* 821D5920h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5920h case    4:*/		return 0x821D5924;
		  /* 821D5924h */ case    5:  		/* lwz R7, <#[R1 + 136]> */
		/* 821D5924h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5924h case    5:*/		return 0x821D5928;
		  /* 821D5928h */ case    6:  		/* lwz R6, <#[R1 + 124]> */
		/* 821D5928h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5928h case    6:*/		return 0x821D592C;
		  /* 821D592Ch */ case    7:  		/* b 1632 */
		/* 821D592Ch case    7:*/		return 0x821D5F8C;
		/* 821D592Ch case    7:*/		return 0x821D5930;
	}
	return 0x821D5930;
} // Block from 821D5910h-821D5930h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D5930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5930);
		  /* 821D5930h */ case    0:  		/* cmplw CR6, R31, R3 */
		/* 821D5930h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821D5930h case    0:*/		return 0x821D5934;
		  /* 821D5934h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821D5934h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D5940;  }
		/* 821D5934h case    1:*/		return 0x821D5938;
		  /* 821D5938h */ case    2:  		/* and R11, R3, R31 */
		/* 821D5938h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R3,regs.R31);
		/* 821D5938h case    2:*/		return 0x821D593C;
		  /* 821D593Ch */ case    3:  		/* rlwinm R31, R11, 0, 28, 29 */
		/* 821D593Ch case    3:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R31,regs.R11);
		/* 821D593Ch case    3:*/		return 0x821D5940;
	}
	return 0x821D5940;
} // Block from 821D5930h-821D5940h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5940);
		  /* 821D5940h */ case    0:  		/* rlwinm R11, R27, 2, 0, 29 */
		/* 821D5940h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R27);
		/* 821D5940h case    0:*/		return 0x821D5944;
		  /* 821D5944h */ case    1:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D5944h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D5944h case    1:*/		return 0x821D5948;
		  /* 821D5948h */ case    2:  		/* slw R11, R31, R11 */
		/* 821D5948h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D5948h case    2:*/		return 0x821D594C;
		  /* 821D594Ch */ case    3:  		/* and R9, R11, R10 */
		/* 821D594Ch case    3:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D594Ch case    3:*/		return 0x821D5950;
		  /* 821D5950h */ case    4:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D5950h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D5950h case    4:*/		return 0x821D5954;
		  /* 821D5954h */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821D5954h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D5954h case    5:*/		return 0x821D5958;
		  /* 821D5958h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D5958h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D5964;  }
		/* 821D5958h case    6:*/		return 0x821D595C;
		  /* 821D595Ch */ case    7:  		/* mr R11, R21 */
		/* 821D595Ch case    7:*/		regs.R11 = regs.R21;
		/* 821D595Ch case    7:*/		return 0x821D5960;
		  /* 821D5960h */ case    8:  		/* b 16 */
		/* 821D5960h case    8:*/		return 0x821D5970;
		/* 821D5960h case    8:*/		return 0x821D5964;
	}
	return 0x821D5964;
} // Block from 821D5940h-821D5964h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D5964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5964);
		  /* 821D5964h */ case    0:  		/* or R10, R11, R10 */
		/* 821D5964h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D5964h case    0:*/		return 0x821D5968;
		  /* 821D5968h */ case    1:  		/* li R11, 1 */
		/* 821D5968h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D5968h case    1:*/		return 0x821D596C;
		  /* 821D596Ch */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D596Ch case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D596Ch case    2:*/		return 0x821D5970;
	}
	return 0x821D5970;
} // Block from 821D5964h-821D5970h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D5970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5970);
		  /* 821D5970h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D5970h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D5970h case    0:*/		return 0x821D5974;
		  /* 821D5974h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D5974h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D5988;  }
		/* 821D5974h case    1:*/		return 0x821D5978;
		  /* 821D5978h */ case    2:  		/* mr R5, R25 */
		/* 821D5978h case    2:*/		regs.R5 = regs.R25;
		/* 821D5978h case    2:*/		return 0x821D597C;
		  /* 821D597Ch */ case    3:  		/* mr R4, R16 */
		/* 821D597Ch case    3:*/		regs.R4 = regs.R16;
		/* 821D597Ch case    3:*/		return 0x821D5980;
		  /* 821D5980h */ case    4:  		/* mr R3, R24 */
		/* 821D5980h case    4:*/		regs.R3 = regs.R24;
		/* 821D5980h case    4:*/		return 0x821D5984;
		  /* 821D5984h */ case    5:  		/* bl -40740 */
		/* 821D5984h case    5:*/		regs.LR = 0x821D5988; return 0x821CBA60;
		/* 821D5984h case    5:*/		return 0x821D5988;
	}
	return 0x821D5988;
} // Block from 821D5970h-821D5988h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D5988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5988);
		  /* 821D5988h */ case    0:  		/* addi R6, R1, 1368 */
		/* 821D5988h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x558);
		/* 821D5988h case    0:*/		return 0x821D598C;
		  /* 821D598Ch */ case    1:  		/* addi R5, R1, 1392 */
		/* 821D598Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x570);
		/* 821D598Ch case    1:*/		return 0x821D5990;
		  /* 821D5990h */ case    2:  		/* mr R4, R27 */
		/* 821D5990h case    2:*/		regs.R4 = regs.R27;
		/* 821D5990h case    2:*/		return 0x821D5994;
		  /* 821D5994h */ case    3:  		/* mr R3, R19 */
		/* 821D5994h case    3:*/		regs.R3 = regs.R19;
		/* 821D5994h case    3:*/		return 0x821D5998;
		  /* 821D5998h */ case    4:  		/* bl 316304 */
		/* 821D5998h case    4:*/		regs.LR = 0x821D599C; return 0x82222D28;
		/* 821D5998h case    4:*/		return 0x821D599C;
		  /* 821D599Ch */ case    5:  		/* addi R6, R1, 1208 */
		/* 821D599Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4B8);
		/* 821D599Ch case    5:*/		return 0x821D59A0;
		  /* 821D59A0h */ case    6:  		/* addi R5, R1, 1224 */
		/* 821D59A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4C8);
		/* 821D59A0h case    6:*/		return 0x821D59A4;
		  /* 821D59A4h */ case    7:  		/* mr R4, R27 */
		/* 821D59A4h case    7:*/		regs.R4 = regs.R27;
		/* 821D59A4h case    7:*/		return 0x821D59A8;
		  /* 821D59A8h */ case    8:  		/* mr R3, R22 */
		/* 821D59A8h case    8:*/		regs.R3 = regs.R22;
		/* 821D59A8h case    8:*/		return 0x821D59AC;
		  /* 821D59ACh */ case    9:  		/* bl 316284 */
		/* 821D59ACh case    9:*/		regs.LR = 0x821D59B0; return 0x82222D28;
		/* 821D59ACh case    9:*/		return 0x821D59B0;
		  /* 821D59B0h */ case   10:  		/* lfd FR0, <#[R1 + 1368]> */
		/* 821D59B0h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000558) );
		/* 821D59B0h case   10:*/		return 0x821D59B4;
		  /* 821D59B4h */ case   11:  		/* lfd FR13, <#[R1 + 1208]> */
		/* 821D59B4h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004B8) );
		/* 821D59B4h case   11:*/		return 0x821D59B8;
		  /* 821D59B8h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D59B8h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D59B8h case   12:*/		return 0x821D59BC;
		  /* 821D59BCh */ case   13:  		/* bc 4, CR6_LT, 8 */
		/* 821D59BCh case   13:*/		if ( !regs.CR[6].lt ) { return 0x821D59C4;  }
		/* 821D59BCh case   13:*/		return 0x821D59C0;
		  /* 821D59C0h */ case   14:  		/* fmr FR13, FR0 */
		/* 821D59C0h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 821D59C0h case   14:*/		return 0x821D59C4;
	}
	return 0x821D59C4;
} // Block from 821D5988h-821D59C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D59C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D59C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D59C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D59C4);
		  /* 821D59C4h */ case    0:  		/* lfd FR0, <#[R1 + 1392]> */
		/* 821D59C4h case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000570) );
		/* 821D59C4h case    0:*/		return 0x821D59C8;
		  /* 821D59C8h */ case    1:  		/* lfd FR1, <#[R1 + 1224]> */
		/* 821D59C8h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000004C8) );
		/* 821D59C8h case    1:*/		return 0x821D59CC;
		  /* 821D59CCh */ case    2:  		/* fcmpu CR6, FR0, FR1 */
		/* 821D59CCh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821D59CCh case    2:*/		return 0x821D59D0;
		  /* 821D59D0h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 821D59D0h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821D59D8;  }
		/* 821D59D0h case    3:*/		return 0x821D59D4;
	}
	return 0x821D59D4;
} // Block from 821D59C4h-821D59D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D59D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D59D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D59D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D59D4);
		  /* 821D59D4h */ case    0:  		/* fmr FR1, FR0 */
		/* 821D59D4h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D59D4h case    0:*/		return 0x821D59D8;
	}
	return 0x821D59D8;
} // Block from 821D59D4h-821D59D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D59D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D59D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D59D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D59D8);
		  /* 821D59D8h */ case    0:  		/* mr R7, R24 */
		/* 821D59D8h case    0:*/		regs.R7 = regs.R24;
		/* 821D59D8h case    0:*/		return 0x821D59DC;
		  /* 821D59DCh */ case    1:  		/* fmr FR2, FR13 */
		/* 821D59DCh case    1:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR13);
		/* 821D59DCh case    1:*/		return 0x821D59E0;
		  /* 821D59E0h */ case    2:  		/* mr R4, R27 */
		/* 821D59E0h case    2:*/		regs.R4 = regs.R27;
		/* 821D59E0h case    2:*/		return 0x821D59E4;
		  /* 821D59E4h */ case    3:  		/* mr R3, R16 */
		/* 821D59E4h case    3:*/		regs.R3 = regs.R16;
		/* 821D59E4h case    3:*/		return 0x821D59E8;
		  /* 821D59E8h */ case    4:  		/* bl 315704 */
		/* 821D59E8h case    4:*/		regs.LR = 0x821D59EC; return 0x82222B20;
		/* 821D59E8h case    4:*/		return 0x821D59EC;
		  /* 821D59ECh */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D59ECh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D59ECh case    5:*/		return 0x821D59F0;
		  /* 821D59F0h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 821D59F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D5A04;  }
		/* 821D59F0h case    6:*/		return 0x821D59F4;
		  /* 821D59F4h */ case    7:  		/* mr R5, R25 */
		/* 821D59F4h case    7:*/		regs.R5 = regs.R25;
		/* 821D59F4h case    7:*/		return 0x821D59F8;
		  /* 821D59F8h */ case    8:  		/* mr R4, R16 */
		/* 821D59F8h case    8:*/		regs.R4 = regs.R16;
		/* 821D59F8h case    8:*/		return 0x821D59FC;
		  /* 821D59FCh */ case    9:  		/* mr R3, R24 */
		/* 821D59FCh case    9:*/		regs.R3 = regs.R24;
		/* 821D59FCh case    9:*/		return 0x821D5A00;
		  /* 821D5A00h */ case   10:  		/* bl -40864 */
		/* 821D5A00h case   10:*/		regs.LR = 0x821D5A04; return 0x821CBA60;
		/* 821D5A00h case   10:*/		return 0x821D5A04;
	}
	return 0x821D5A04;
} // Block from 821D59D8h-821D5A04h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D5A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5A04);
		  /* 821D5A04h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5A04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5A04h case    0:*/		return 0x821D5A08;
		  /* 821D5A08h */ case    1:  		/* lwz R6, <#[R1 + 116]> */
		/* 821D5A08h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5A08h case    1:*/		return 0x821D5A0C;
		  /* 821D5A0Ch */ case    2:  		/* cmplw CR6, R6, R11 */
		/* 821D5A0Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821D5A0Ch case    2:*/		return 0x821D5A10;
		  /* 821D5A10h */ case    3:  		/* bc 4, CR6_EQ, 1428 */
		/* 821D5A10h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5A10h case    3:*/		return 0x821D5A14;
		  /* 821D5A14h */ case    4:  		/* lwz R11, <#[R1 + 136]> */
		/* 821D5A14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5A14h case    4:*/		return 0x821D5A18;
		  /* 821D5A18h */ case    5:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D5A18h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5A18h case    5:*/		return 0x821D5A1C;
		  /* 821D5A1Ch */ case    6:  		/* cmpw CR6, R7, R11 */
		/* 821D5A1Ch case    6:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R11);
		/* 821D5A1Ch case    6:*/		return 0x821D5A20;
		  /* 821D5A20h */ case    7:  		/* bc 4, CR6_EQ, 1412 */
		/* 821D5A20h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5A20h case    7:*/		return 0x821D5A24;
		  /* 821D5A24h */ case    8:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D5A24h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5A24h case    8:*/		return 0x821D5A28;
		  /* 821D5A28h */ case    9:  		/* lwz R8, <#[R1 + 132]> */
		/* 821D5A28h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5A28h case    9:*/		return 0x821D5A2C;
		  /* 821D5A2Ch */ case   10:  		/* cmplw CR6, R8, R11 */
		/* 821D5A2Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821D5A2Ch case   10:*/		return 0x821D5A30;
		  /* 821D5A30h */ case   11:  		/* bc 4, CR6_EQ, 1396 */
		/* 821D5A30h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5A30h case   11:*/		return 0x821D5A34;
		  /* 821D5A34h */ case   12:  		/* b 1368 */
		/* 821D5A34h case   12:*/		return 0x821D5F8C;
		/* 821D5A34h case   12:*/		return 0x821D5A38;
	}
	return 0x821D5A38;
} // Block from 821D5A04h-821D5A38h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D5A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5A38);
		  /* 821D5A38h */ case    0:  		/* mr R4, R27 */
		/* 821D5A38h case    0:*/		regs.R4 = regs.R27;
		/* 821D5A38h case    0:*/		return 0x821D5A3C;
		  /* 821D5A3Ch */ case    1:  		/* mr R3, R19 */
		/* 821D5A3Ch case    1:*/		regs.R3 = regs.R19;
		/* 821D5A3Ch case    1:*/		return 0x821D5A40;
		  /* 821D5A40h */ case    2:  		/* bl -239896 */
		/* 821D5A40h case    2:*/		regs.LR = 0x821D5A44; return 0x8219B128;
		/* 821D5A40h case    2:*/		return 0x821D5A44;
		  /* 821D5A44h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5A44h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5A44h case    3:*/		return 0x821D5A48;
		  /* 821D5A48h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 821D5A48h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5A68;  }
		/* 821D5A48h case    4:*/		return 0x821D5A4C;
		  /* 821D5A4Ch */ case    5:  		/* mr R4, R27 */
		/* 821D5A4Ch case    5:*/		regs.R4 = regs.R27;
		/* 821D5A4Ch case    5:*/		return 0x821D5A50;
		  /* 821D5A50h */ case    6:  		/* mr R3, R22 */
		/* 821D5A50h case    6:*/		regs.R3 = regs.R22;
		/* 821D5A50h case    6:*/		return 0x821D5A54;
		  /* 821D5A54h */ case    7:  		/* bl -239916 */
		/* 821D5A54h case    7:*/		regs.LR = 0x821D5A58; return 0x8219B128;
		/* 821D5A54h case    7:*/		return 0x821D5A58;
		  /* 821D5A58h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5A58h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5A58h case    8:*/		return 0x821D5A5C;
		  /* 821D5A5Ch */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821D5A5Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821D5A68;  }
		/* 821D5A5Ch case    9:*/		return 0x821D5A60;
		  /* 821D5A60h */ case   10:  		/* fmr FR1, FR28 */
		/* 821D5A60h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821D5A60h case   10:*/		return 0x821D5A64;
		  /* 821D5A64h */ case   11:  		/* b 1284 */
		/* 821D5A64h case   11:*/		return 0x821D5F68;
		/* 821D5A64h case   11:*/		return 0x821D5A68;
	}
	return 0x821D5A68;
} // Block from 821D5A38h-821D5A68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D5A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5A68);
		  /* 821D5A68h */ case    0:  		/* addi R6, R1, 1408 */
		/* 821D5A68h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x580);
		/* 821D5A68h case    0:*/		return 0x821D5A6C;
		  /* 821D5A6Ch */ case    1:  		/* addi R5, R1, 1448 */
		/* 821D5A6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5A8);
		/* 821D5A6Ch case    1:*/		return 0x821D5A70;
		  /* 821D5A70h */ case    2:  		/* mr R4, R27 */
		/* 821D5A70h case    2:*/		regs.R4 = regs.R27;
		/* 821D5A70h case    2:*/		return 0x821D5A74;
		  /* 821D5A74h */ case    3:  		/* mr R3, R19 */
		/* 821D5A74h case    3:*/		regs.R3 = regs.R19;
		/* 821D5A74h case    3:*/		return 0x821D5A78;
		  /* 821D5A78h */ case    4:  		/* bl 316080 */
		/* 821D5A78h case    4:*/		regs.LR = 0x821D5A7C; return 0x82222D28;
		/* 821D5A78h case    4:*/		return 0x821D5A7C;
		  /* 821D5A7Ch */ case    5:  		/* addi R6, R1, 1256 */
		/* 821D5A7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4E8);
		/* 821D5A7Ch case    5:*/		return 0x821D5A80;
		  /* 821D5A80h */ case    6:  		/* addi R5, R1, 1240 */
		/* 821D5A80h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4D8);
		/* 821D5A80h case    6:*/		return 0x821D5A84;
		  /* 821D5A84h */ case    7:  		/* mr R4, R27 */
		/* 821D5A84h case    7:*/		regs.R4 = regs.R27;
		/* 821D5A84h case    7:*/		return 0x821D5A88;
		  /* 821D5A88h */ case    8:  		/* mr R3, R22 */
		/* 821D5A88h case    8:*/		regs.R3 = regs.R22;
		/* 821D5A88h case    8:*/		return 0x821D5A8C;
		  /* 821D5A8Ch */ case    9:  		/* bl 316060 */
		/* 821D5A8Ch case    9:*/		regs.LR = 0x821D5A90; return 0x82222D28;
		/* 821D5A8Ch case    9:*/		return 0x821D5A90;
		  /* 821D5A90h */ case   10:  		/* lfd FR0, <#[R1 + 1408]> */
		/* 821D5A90h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000580) );
		/* 821D5A90h case   10:*/		return 0x821D5A94;
		  /* 821D5A94h */ case   11:  		/* lfd FR13, <#[R1 + 1240]> */
		/* 821D5A94h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004D8) );
		/* 821D5A94h case   11:*/		return 0x821D5A98;
		  /* 821D5A98h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5A98h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5A98h case   12:*/		return 0x821D5A9C;
		  /* 821D5A9Ch */ case   13:  		/* bc 12, CR6_LT, 20 */
		/* 821D5A9Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x821D5AB0;  }
		/* 821D5A9Ch case   13:*/		return 0x821D5AA0;
		  /* 821D5AA0h */ case   14:  		/* lfd FR0, <#[R1 + 1448]> */
		/* 821D5AA0h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000005A8) );
		/* 821D5AA0h case   14:*/		return 0x821D5AA4;
		  /* 821D5AA4h */ case   15:  		/* lfd FR13, <#[R1 + 1256]> */
		/* 821D5AA4h case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004E8) );
		/* 821D5AA4h case   15:*/		return 0x821D5AA8;
		  /* 821D5AA8h */ case   16:  		/* fcmpu CR6, FR13, FR0 */
		/* 821D5AA8h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821D5AA8h case   16:*/		return 0x821D5AAC;
		  /* 821D5AACh */ case   17:  		/* bc 4, CR6_LT, 744 */
		/* 821D5AACh case   17:*/		if ( !regs.CR[6].lt ) { return 0x821D5D94;  }
		/* 821D5AACh case   17:*/		return 0x821D5AB0;
	}
	return 0x821D5AB0;
} // Block from 821D5A68h-821D5AB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D5AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5AB0);
		  /* 821D5AB0h */ case    0:  		/* fmr FR4, FR29 */
		/* 821D5AB0h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5AB0h case    0:*/		return 0x821D5AB4;
		  /* 821D5AB4h */ case    1:  		/* fmr FR3, FR29 */
		/* 821D5AB4h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5AB4h case    1:*/		return 0x821D5AB8;
		  /* 821D5AB8h */ case    2:  		/* fmr FR2, FR29 */
		/* 821D5AB8h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5AB8h case    2:*/		return 0x821D5ABC;
		  /* 821D5ABCh */ case    3:  		/* fmr FR1, FR29 */
		/* 821D5ABCh case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D5ABCh case    3:*/		return 0x821D5AC0;
		  /* 821D5AC0h */ case    4:  		/* b 1204 */
		/* 821D5AC0h case    4:*/		return 0x821D5F74;
		/* 821D5AC0h case    4:*/		return 0x821D5AC4;
	}
	return 0x821D5AC4;
} // Block from 821D5AB0h-821D5AC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D5AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5AC4);
		  /* 821D5AC4h */ case    0:  		/* mr R4, R27 */
		/* 821D5AC4h case    0:*/		regs.R4 = regs.R27;
		/* 821D5AC4h case    0:*/		return 0x821D5AC8;
		  /* 821D5AC8h */ case    1:  		/* mr R3, R19 */
		/* 821D5AC8h case    1:*/		regs.R3 = regs.R19;
		/* 821D5AC8h case    1:*/		return 0x821D5ACC;
		  /* 821D5ACCh */ case    2:  		/* bl -100444 */
		/* 821D5ACCh case    2:*/		regs.LR = 0x821D5AD0; return 0x821BD270;
		/* 821D5ACCh case    2:*/		return 0x821D5AD0;
		  /* 821D5AD0h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5AD0h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5AD0h case    3:*/		return 0x821D5AD4;
		  /* 821D5AD4h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821D5AD4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5AEC;  }
		/* 821D5AD4h case    4:*/		return 0x821D5AD8;
		  /* 821D5AD8h */ case    5:  		/* mr R4, R27 */
		/* 821D5AD8h case    5:*/		regs.R4 = regs.R27;
		/* 821D5AD8h case    5:*/		return 0x821D5ADC;
		  /* 821D5ADCh */ case    6:  		/* mr R3, R22 */
		/* 821D5ADCh case    6:*/		regs.R3 = regs.R22;
		/* 821D5ADCh case    6:*/		return 0x821D5AE0;
		  /* 821D5AE0h */ case    7:  		/* bl -100544 */
		/* 821D5AE0h case    7:*/		regs.LR = 0x821D5AE4; return 0x821BD220;
		/* 821D5AE0h case    7:*/		return 0x821D5AE4;
		  /* 821D5AE4h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5AE4h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5AE4h case    8:*/		return 0x821D5AE8;
		  /* 821D5AE8h */ case    9:  		/* bc 4, CR0_EQ, -56 */
		/* 821D5AE8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821D5AB0;  }
		/* 821D5AE8h case    9:*/		return 0x821D5AEC;
	}
	return 0x821D5AEC;
} // Block from 821D5AC4h-821D5AECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D5AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5AEC);
		  /* 821D5AECh */ case    0:  		/* lwz R11, <#[R1 + 132]> */
		/* 821D5AECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5AECh case    0:*/		return 0x821D5AF0;
		  /* 821D5AF0h */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 821D5AF0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821D5AF0h case    1:*/		return 0x821D5AF4;
		  /* 821D5AF4h */ case    2:  		/* bc 4, CR6_EQ, 116 */
		/* 821D5AF4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D5B68;  }
		/* 821D5AF4h case    2:*/		return 0x821D5AF8;
		  /* 821D5AF8h */ case    3:  		/* mr R4, R27 */
		/* 821D5AF8h case    3:*/		regs.R4 = regs.R27;
		/* 821D5AF8h case    3:*/		return 0x821D5AFC;
		  /* 821D5AFCh */ case    4:  		/* mr R3, R22 */
		/* 821D5AFCh case    4:*/		regs.R3 = regs.R22;
		/* 821D5AFCh case    4:*/		return 0x821D5B00;
		  /* 821D5B00h */ case    5:  		/* bl -240088 */
		/* 821D5B00h case    5:*/		regs.LR = 0x821D5B04; return 0x8219B128;
		/* 821D5B00h case    5:*/		return 0x821D5B04;
		  /* 821D5B04h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5B04h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5B04h case    6:*/		return 0x821D5B08;
		  /* 821D5B08h */ case    7:  		/* bc 12, CR0_EQ, 96 */
		/* 821D5B08h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D5B68;  }
		/* 821D5B08h case    7:*/		return 0x821D5B0C;
		  /* 821D5B0Ch */ case    8:  		/* li R4, 1 */
		/* 821D5B0Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5B0Ch case    8:*/		return 0x821D5B10;
		  /* 821D5B10h */ case    9:  		/* fmr FR4, FR29 */
		/* 821D5B10h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5B10h case    9:*/		return 0x821D5B14;
		  /* 821D5B14h */ case   10:  		/* mr R3, R24 */
		/* 821D5B14h case   10:*/		regs.R3 = regs.R24;
		/* 821D5B14h case   10:*/		return 0x821D5B18;
		  /* 821D5B18h */ case   11:  		/* fmr FR3, FR29 */
		/* 821D5B18h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5B18h case   11:*/		return 0x821D5B1C;
		  /* 821D5B1Ch */ case   12:  		/* fmr FR2, FR29 */
		/* 821D5B1Ch case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5B1Ch case   12:*/		return 0x821D5B20;
		  /* 821D5B20h */ case   13:  		/* fmr FR1, FR29 */
		/* 821D5B20h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D5B20h case   13:*/		return 0x821D5B24;
		  /* 821D5B24h */ case   14:  		/* bl 348212 */
		/* 821D5B24h case   14:*/		regs.LR = 0x821D5B28; return 0x8222AB58;
		/* 821D5B24h case   14:*/		return 0x821D5B28;
		  /* 821D5B28h */ case   15:  		/* mr R4, R3 */
		/* 821D5B28h case   15:*/		regs.R4 = regs.R3;
		/* 821D5B28h case   15:*/		return 0x821D5B2C;
		  /* 821D5B2Ch */ case   16:  		/* li R5, 0 */
		/* 821D5B2Ch case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D5B2Ch case   16:*/		return 0x821D5B30;
		  /* 821D5B30h */ case   17:  		/* mr R3, R24 */
		/* 821D5B30h case   17:*/		regs.R3 = regs.R24;
		/* 821D5B30h case   17:*/		return 0x821D5B34;
		  /* 821D5B34h */ case   18:  		/* bl -383524 */
		/* 821D5B34h case   18:*/		regs.LR = 0x821D5B38; return 0x82178110;
		/* 821D5B34h case   18:*/		return 0x821D5B38;
		  /* 821D5B38h */ case   19:  		/* mr R31, R3 */
		/* 821D5B38h case   19:*/		regs.R31 = regs.R3;
		/* 821D5B38h case   19:*/		return 0x821D5B3C;
		  /* 821D5B3Ch */ case   20:  		/* mr R3, R24 */
		/* 821D5B3Ch case   20:*/		regs.R3 = regs.R24;
		/* 821D5B3Ch case   20:*/		return 0x821D5B40;
		  /* 821D5B40h */ case   21:  		/* lwz R5, <#[R1 + 120]> */
		/* 821D5B40h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5B40h case   21:*/		return 0x821D5B44;
		  /* 821D5B44h */ case   22:  		/* lwz R4, <#[R1 + 116]> */
		/* 821D5B44h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5B44h case   22:*/		return 0x821D5B48;
		  /* 821D5B48h */ case   23:  		/* bl -383544 */
		/* 821D5B48h case   23:*/		regs.LR = 0x821D5B4C; return 0x82178110;
		/* 821D5B48h case   23:*/		return 0x821D5B4C;
		  /* 821D5B4Ch */ case   24:  		/* mr R6, R3 */
		/* 821D5B4Ch case   24:*/		regs.R6 = regs.R3;
		/* 821D5B4Ch case   24:*/		return 0x821D5B50;
		  /* 821D5B50h */ case   25:  		/* mr R7, R31 */
		/* 821D5B50h case   25:*/		regs.R7 = regs.R31;
		/* 821D5B50h case   25:*/		return 0x821D5B54;
		  /* 821D5B54h */ case   26:  		/* mr R3, R24 */
		/* 821D5B54h case   26:*/		regs.R3 = regs.R24;
		/* 821D5B54h case   26:*/		return 0x821D5B58;
		  /* 821D5B58h */ case   27:  		/* li R4, 0 */
		/* 821D5B58h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D5B58h case   27:*/		return 0x821D5B5C;
		  /* 821D5B5Ch */ case   28:  		/* mr R5, R16 */
		/* 821D5B5Ch case   28:*/		regs.R5 = regs.R16;
		/* 821D5B5Ch case   28:*/		return 0x821D5B60;
		  /* 821D5B60h */ case   29:  		/* bl -227896 */
		/* 821D5B60h case   29:*/		regs.LR = 0x821D5B64; return 0x8219E128;
		/* 821D5B60h case   29:*/		return 0x821D5B64;
		  /* 821D5B64h */ case   30:  		/* b 1052 */
		/* 821D5B64h case   30:*/		return 0x821D5F80;
		/* 821D5B64h case   30:*/		return 0x821D5B68;
	}
	return 0x821D5B68;
} // Block from 821D5AECh-821D5B68h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821D5B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5B68);
		  /* 821D5B68h */ case    0:  		/* mr R4, R27 */
		/* 821D5B68h case    0:*/		regs.R4 = regs.R27;
		/* 821D5B68h case    0:*/		return 0x821D5B6C;
		  /* 821D5B6Ch */ case    1:  		/* mr R3, R19 */
		/* 821D5B6Ch case    1:*/		regs.R3 = regs.R19;
		/* 821D5B6Ch case    1:*/		return 0x821D5B70;
		  /* 821D5B70h */ case    2:  		/* bl -240200 */
		/* 821D5B70h case    2:*/		regs.LR = 0x821D5B74; return 0x8219B128;
		/* 821D5B70h case    2:*/		return 0x821D5B74;
		  /* 821D5B74h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5B74h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5B74h case    3:*/		return 0x821D5B78;
		  /* 821D5B78h */ case    4:  		/* bc 12, CR0_EQ, 152 */
		/* 821D5B78h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5C10;  }
		/* 821D5B78h case    4:*/		return 0x821D5B7C;
		  /* 821D5B7Ch */ case    5:  		/* li R4, 4 */
		/* 821D5B7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D5B7Ch case    5:*/		return 0x821D5B80;
		  /* 821D5B80h */ case    6:  		/* lwz R3, <#[R1 + 128]> */
		/* 821D5B80h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5B80h case    6:*/		return 0x821D5B84;
		  /* 821D5B84h */ case    7:  		/* bl -260572 */
		/* 821D5B84h case    7:*/		regs.LR = 0x821D5B88; return 0x821961A8;
		/* 821D5B84h case    7:*/		return 0x821D5B88;
		  /* 821D5B88h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5B88h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5B88h case    8:*/		return 0x821D5B8C;
		  /* 821D5B8Ch */ case    9:  		/* bc 12, CR0_EQ, 132 */
		/* 821D5B8Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821D5C10;  }
		/* 821D5B8Ch case    9:*/		return 0x821D5B90;
		  /* 821D5B90h */ case   10:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5B90h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5B90h case   10:*/		return 0x821D5B94;
		  /* 821D5B94h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D5B94h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D5B94h case   11:*/		return 0x821D5B98;
		  /* 821D5B98h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5B98h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5B98h case   12:*/		return 0x821D5B9C;
		  /* 821D5B9Ch */ case   13:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5B9Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5B9Ch case   13:*/		return 0x821D5BA0;
		  /* 821D5BA0h */ case   14:  		/* bc 12, CR6_EQ, 112 */
		/* 821D5BA0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821D5C10;  }
		/* 821D5BA0h case   14:*/		return 0x821D5BA4;
		  /* 821D5BA4h */ case   15:  		/* li R4, 1 */
		/* 821D5BA4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5BA4h case   15:*/		return 0x821D5BA8;
		  /* 821D5BA8h */ case   16:  		/* fmr FR4, FR29 */
		/* 821D5BA8h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5BA8h case   16:*/		return 0x821D5BAC;
		  /* 821D5BACh */ case   17:  		/* mr R3, R24 */
		/* 821D5BACh case   17:*/		regs.R3 = regs.R24;
		/* 821D5BACh case   17:*/		return 0x821D5BB0;
		  /* 821D5BB0h */ case   18:  		/* fmr FR3, FR29 */
		/* 821D5BB0h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5BB0h case   18:*/		return 0x821D5BB4;
		  /* 821D5BB4h */ case   19:  		/* fmr FR2, FR29 */
		/* 821D5BB4h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5BB4h case   19:*/		return 0x821D5BB8;
		  /* 821D5BB8h */ case   20:  		/* fmr FR1, FR29 */
		/* 821D5BB8h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D5BB8h case   20:*/		return 0x821D5BBC;
		  /* 821D5BBCh */ case   21:  		/* bl 348060 */
		/* 821D5BBCh case   21:*/		regs.LR = 0x821D5BC0; return 0x8222AB58;
		/* 821D5BBCh case   21:*/		return 0x821D5BC0;
		  /* 821D5BC0h */ case   22:  		/* mr R4, R3 */
		/* 821D5BC0h case   22:*/		regs.R4 = regs.R3;
		/* 821D5BC0h case   22:*/		return 0x821D5BC4;
		  /* 821D5BC4h */ case   23:  		/* li R5, 0 */
		/* 821D5BC4h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D5BC4h case   23:*/		return 0x821D5BC8;
		  /* 821D5BC8h */ case   24:  		/* mr R3, R24 */
		/* 821D5BC8h case   24:*/		regs.R3 = regs.R24;
		/* 821D5BC8h case   24:*/		return 0x821D5BCC;
		  /* 821D5BCCh */ case   25:  		/* bl -383676 */
		/* 821D5BCCh case   25:*/		regs.LR = 0x821D5BD0; return 0x82178110;
		/* 821D5BCCh case   25:*/		return 0x821D5BD0;
		  /* 821D5BD0h */ case   26:  		/* li R4, 4 */
		/* 821D5BD0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D5BD0h case   26:*/		return 0x821D5BD4;
		  /* 821D5BD4h */ case   27:  		/* mr R31, R3 */
		/* 821D5BD4h case   27:*/		regs.R31 = regs.R3;
		/* 821D5BD4h case   27:*/		return 0x821D5BD8;
		  /* 821D5BD8h */ case   28:  		/* lwz R3, <#[R1 + 128]> */
		/* 821D5BD8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5BD8h case   28:*/		return 0x821D5BDC;
		  /* 821D5BDCh */ case   29:  		/* bl -385380 */
		/* 821D5BDCh case   29:*/		regs.LR = 0x821D5BE0; return 0x82177A78;
		/* 821D5BDCh case   29:*/		return 0x821D5BE0;
		  /* 821D5BE0h */ case   30:  		/* mr R6, R3 */
		/* 821D5BE0h case   30:*/		regs.R6 = regs.R3;
		/* 821D5BE0h case   30:*/		return 0x821D5BE4;
		  /* 821D5BE4h */ case   31:  		/* mr R3, R24 */
		/* 821D5BE4h case   31:*/		regs.R3 = regs.R24;
		/* 821D5BE4h case   31:*/		return 0x821D5BE8;
		  /* 821D5BE8h */ case   32:  		/* lwz R5, <#[R1 + 136]> */
		/* 821D5BE8h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5BE8h case   32:*/		return 0x821D5BEC;
		  /* 821D5BECh */ case   33:  		/* lwz R4, <#[R1 + 124]> */
		/* 821D5BECh case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5BECh case   33:*/		return 0x821D5BF0;
		  /* 821D5BF0h */ case   34:  		/* bl -383624 */
		/* 821D5BF0h case   34:*/		regs.LR = 0x821D5BF4; return 0x82178168;
		/* 821D5BF0h case   34:*/		return 0x821D5BF4;
		  /* 821D5BF4h */ case   35:  		/* mr R6, R3 */
		/* 821D5BF4h case   35:*/		regs.R6 = regs.R3;
		/* 821D5BF4h case   35:*/		return 0x821D5BF8;
		  /* 821D5BF8h */ case   36:  		/* mr R3, R24 */
		/* 821D5BF8h case   36:*/		regs.R3 = regs.R24;
		/* 821D5BF8h case   36:*/		return 0x821D5BFC;
		  /* 821D5BFCh */ case   37:  		/* mr R7, R31 */
		/* 821D5BFCh case   37:*/		regs.R7 = regs.R31;
		/* 821D5BFCh case   37:*/		return 0x821D5C00;
		  /* 821D5C00h */ case   38:  		/* li R4, 0 */
		/* 821D5C00h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D5C00h case   38:*/		return 0x821D5C04;
		  /* 821D5C04h */ case   39:  		/* mr R5, R16 */
		/* 821D5C04h case   39:*/		regs.R5 = regs.R16;
		/* 821D5C04h case   39:*/		return 0x821D5C08;
		  /* 821D5C08h */ case   40:  		/* bl -258024 */
		/* 821D5C08h case   40:*/		regs.LR = 0x821D5C0C; return 0x82196C20;
		/* 821D5C08h case   40:*/		return 0x821D5C0C;
		  /* 821D5C0Ch */ case   41:  		/* b 884 */
		/* 821D5C0Ch case   41:*/		return 0x821D5F80;
		/* 821D5C0Ch case   41:*/		return 0x821D5C10;
	}
	return 0x821D5C10;
} // Block from 821D5B68h-821D5C10h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821D5C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5C10);
		  /* 821D5C10h */ case    0:  		/* addi R6, R1, 1480 */
		/* 821D5C10h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C8);
		/* 821D5C10h case    0:*/		return 0x821D5C14;
		  /* 821D5C14h */ case    1:  		/* addi R5, R1, 1400 */
		/* 821D5C14h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x578);
		/* 821D5C14h case    1:*/		return 0x821D5C18;
		  /* 821D5C18h */ case    2:  		/* mr R4, R27 */
		/* 821D5C18h case    2:*/		regs.R4 = regs.R27;
		/* 821D5C18h case    2:*/		return 0x821D5C1C;
		  /* 821D5C1Ch */ case    3:  		/* mr R3, R19 */
		/* 821D5C1Ch case    3:*/		regs.R3 = regs.R19;
		/* 821D5C1Ch case    3:*/		return 0x821D5C20;
		  /* 821D5C20h */ case    4:  		/* bl 315656 */
		/* 821D5C20h case    4:*/		regs.LR = 0x821D5C24; return 0x82222D28;
		/* 821D5C20h case    4:*/		return 0x821D5C24;
		  /* 821D5C24h */ case    5:  		/* addi R6, R1, 1272 */
		/* 821D5C24h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4F8);
		/* 821D5C24h case    5:*/		return 0x821D5C28;
		  /* 821D5C28h */ case    6:  		/* addi R5, R1, 1288 */
		/* 821D5C28h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x508);
		/* 821D5C28h case    6:*/		return 0x821D5C2C;
		  /* 821D5C2Ch */ case    7:  		/* mr R4, R27 */
		/* 821D5C2Ch case    7:*/		regs.R4 = regs.R27;
		/* 821D5C2Ch case    7:*/		return 0x821D5C30;
		  /* 821D5C30h */ case    8:  		/* mr R3, R22 */
		/* 821D5C30h case    8:*/		regs.R3 = regs.R22;
		/* 821D5C30h case    8:*/		return 0x821D5C34;
		  /* 821D5C34h */ case    9:  		/* bl 315636 */
		/* 821D5C34h case    9:*/		regs.LR = 0x821D5C38; return 0x82222D28;
		/* 821D5C34h case    9:*/		return 0x821D5C38;
		  /* 821D5C38h */ case   10:  		/* lfd FR0, <#[R1 + 1400]> */
		/* 821D5C38h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000578) );
		/* 821D5C38h case   10:*/		return 0x821D5C3C;
		  /* 821D5C3Ch */ case   11:  		/* lfd FR13, <#[R1 + 1272]> */
		/* 821D5C3Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004F8) );
		/* 821D5C3Ch case   11:*/		return 0x821D5C40;
		  /* 821D5C40h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5C40h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5C40h case   12:*/		return 0x821D5C44;
		  /* 821D5C44h */ case   13:  		/* bc 12, CR6_GT, -484 */
		/* 821D5C44h case   13:*/		if ( regs.CR[6].gt ) { return 0x821D5A60;  }
		/* 821D5C44h case   13:*/		return 0x821D5C48;
		  /* 821D5C48h */ case   14:  		/* lfd FR0, <#[R1 + 1480]> */
		/* 821D5C48h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000005C8) );
		/* 821D5C48h case   14:*/		return 0x821D5C4C;
		  /* 821D5C4Ch */ case   15:  		/* lfd FR13, <#[R1 + 1288]> */
		/* 821D5C4Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000508) );
		/* 821D5C4Ch case   15:*/		return 0x821D5C50;
		  /* 821D5C50h */ case   16:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5C50h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5C50h case   16:*/		return 0x821D5C54;
		  /* 821D5C54h */ case   17:  		/* bc 12, CR6_GT, 320 */
		/* 821D5C54h case   17:*/		if ( regs.CR[6].gt ) { return 0x821D5D94;  }
		/* 821D5C54h case   17:*/		return 0x821D5C58;
		  /* 821D5C58h */ case   18:  		/* b -424 */
		/* 821D5C58h case   18:*/		return 0x821D5AB0;
		/* 821D5C58h case   18:*/		return 0x821D5C5C;
	}
	return 0x821D5C5C;
} // Block from 821D5C10h-821D5C5Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D5C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5C5C);
		  /* 821D5C5Ch */ case    0:  		/* mr R4, R27 */
		/* 821D5C5Ch case    0:*/		regs.R4 = regs.R27;
		/* 821D5C5Ch case    0:*/		return 0x821D5C60;
		  /* 821D5C60h */ case    1:  		/* mr R3, R19 */
		/* 821D5C60h case    1:*/		regs.R3 = regs.R19;
		/* 821D5C60h case    1:*/		return 0x821D5C64;
		  /* 821D5C64h */ case    2:  		/* bl -240444 */
		/* 821D5C64h case    2:*/		regs.LR = 0x821D5C68; return 0x8219B128;
		/* 821D5C64h case    2:*/		return 0x821D5C68;
		  /* 821D5C68h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5C68h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5C68h case    3:*/		return 0x821D5C6C;
		  /* 821D5C6Ch */ case    4:  		/* bc 12, CR0_EQ, 152 */
		/* 821D5C6Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5D04;  }
		/* 821D5C6Ch case    4:*/		return 0x821D5C70;
		  /* 821D5C70h */ case    5:  		/* li R4, 4 */
		/* 821D5C70h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D5C70h case    5:*/		return 0x821D5C74;
		  /* 821D5C74h */ case    6:  		/* lwz R3, <#[R1 + 128]> */
		/* 821D5C74h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5C74h case    6:*/		return 0x821D5C78;
		  /* 821D5C78h */ case    7:  		/* bl -260816 */
		/* 821D5C78h case    7:*/		regs.LR = 0x821D5C7C; return 0x821961A8;
		/* 821D5C78h case    7:*/		return 0x821D5C7C;
		  /* 821D5C7Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5C7Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5C7Ch case    8:*/		return 0x821D5C80;
		  /* 821D5C80h */ case    9:  		/* bc 12, CR0_EQ, 132 */
		/* 821D5C80h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D5D04;  }
		/* 821D5C80h case    9:*/		return 0x821D5C84;
		  /* 821D5C84h */ case   10:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5C84h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5C84h case   10:*/		return 0x821D5C88;
		  /* 821D5C88h */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D5C88h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D5C88h case   11:*/		return 0x821D5C8C;
		  /* 821D5C8Ch */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D5C8Ch case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D5C8Ch case   12:*/		return 0x821D5C90;
		  /* 821D5C90h */ case   13:  		/* cmplwi CR6, R11, 16000 */
		/* 821D5C90h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D5C90h case   13:*/		return 0x821D5C94;
		  /* 821D5C94h */ case   14:  		/* bc 12, CR6_EQ, 112 */
		/* 821D5C94h case   14:*/		if ( regs.CR[6].eq ) { return 0x821D5D04;  }
		/* 821D5C94h case   14:*/		return 0x821D5C98;
		  /* 821D5C98h */ case   15:  		/* li R4, 1 */
		/* 821D5C98h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5C98h case   15:*/		return 0x821D5C9C;
		  /* 821D5C9Ch */ case   16:  		/* fmr FR4, FR29 */
		/* 821D5C9Ch case   16:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5C9Ch case   16:*/		return 0x821D5CA0;
		  /* 821D5CA0h */ case   17:  		/* mr R3, R24 */
		/* 821D5CA0h case   17:*/		regs.R3 = regs.R24;
		/* 821D5CA0h case   17:*/		return 0x821D5CA4;
		  /* 821D5CA4h */ case   18:  		/* fmr FR3, FR29 */
		/* 821D5CA4h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5CA4h case   18:*/		return 0x821D5CA8;
		  /* 821D5CA8h */ case   19:  		/* fmr FR2, FR29 */
		/* 821D5CA8h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5CA8h case   19:*/		return 0x821D5CAC;
		  /* 821D5CACh */ case   20:  		/* fmr FR1, FR29 */
		/* 821D5CACh case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D5CACh case   20:*/		return 0x821D5CB0;
		  /* 821D5CB0h */ case   21:  		/* bl 347816 */
		/* 821D5CB0h case   21:*/		regs.LR = 0x821D5CB4; return 0x8222AB58;
		/* 821D5CB0h case   21:*/		return 0x821D5CB4;
		  /* 821D5CB4h */ case   22:  		/* mr R4, R3 */
		/* 821D5CB4h case   22:*/		regs.R4 = regs.R3;
		/* 821D5CB4h case   22:*/		return 0x821D5CB8;
		  /* 821D5CB8h */ case   23:  		/* li R5, 0 */
		/* 821D5CB8h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D5CB8h case   23:*/		return 0x821D5CBC;
		  /* 821D5CBCh */ case   24:  		/* mr R3, R24 */
		/* 821D5CBCh case   24:*/		regs.R3 = regs.R24;
		/* 821D5CBCh case   24:*/		return 0x821D5CC0;
		  /* 821D5CC0h */ case   25:  		/* bl -383920 */
		/* 821D5CC0h case   25:*/		regs.LR = 0x821D5CC4; return 0x82178110;
		/* 821D5CC0h case   25:*/		return 0x821D5CC4;
		  /* 821D5CC4h */ case   26:  		/* li R4, 4 */
		/* 821D5CC4h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D5CC4h case   26:*/		return 0x821D5CC8;
		  /* 821D5CC8h */ case   27:  		/* mr R31, R3 */
		/* 821D5CC8h case   27:*/		regs.R31 = regs.R3;
		/* 821D5CC8h case   27:*/		return 0x821D5CCC;
		  /* 821D5CCCh */ case   28:  		/* lwz R3, <#[R1 + 128]> */
		/* 821D5CCCh case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5CCCh case   28:*/		return 0x821D5CD0;
		  /* 821D5CD0h */ case   29:  		/* bl -385624 */
		/* 821D5CD0h case   29:*/		regs.LR = 0x821D5CD4; return 0x82177A78;
		/* 821D5CD0h case   29:*/		return 0x821D5CD4;
		  /* 821D5CD4h */ case   30:  		/* mr R6, R3 */
		/* 821D5CD4h case   30:*/		regs.R6 = regs.R3;
		/* 821D5CD4h case   30:*/		return 0x821D5CD8;
		  /* 821D5CD8h */ case   31:  		/* mr R3, R24 */
		/* 821D5CD8h case   31:*/		regs.R3 = regs.R24;
		/* 821D5CD8h case   31:*/		return 0x821D5CDC;
		  /* 821D5CDCh */ case   32:  		/* lwz R5, <#[R1 + 136]> */
		/* 821D5CDCh case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5CDCh case   32:*/		return 0x821D5CE0;
		  /* 821D5CE0h */ case   33:  		/* lwz R4, <#[R1 + 124]> */
		/* 821D5CE0h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5CE0h case   33:*/		return 0x821D5CE4;
		  /* 821D5CE4h */ case   34:  		/* bl -383868 */
		/* 821D5CE4h case   34:*/		regs.LR = 0x821D5CE8; return 0x82178168;
		/* 821D5CE4h case   34:*/		return 0x821D5CE8;
		  /* 821D5CE8h */ case   35:  		/* mr R6, R3 */
		/* 821D5CE8h case   35:*/		regs.R6 = regs.R3;
		/* 821D5CE8h case   35:*/		return 0x821D5CEC;
		  /* 821D5CECh */ case   36:  		/* mr R7, R31 */
		/* 821D5CECh case   36:*/		regs.R7 = regs.R31;
		/* 821D5CECh case   36:*/		return 0x821D5CF0;
		  /* 821D5CF0h */ case   37:  		/* mr R3, R24 */
		/* 821D5CF0h case   37:*/		regs.R3 = regs.R24;
		/* 821D5CF0h case   37:*/		return 0x821D5CF4;
		  /* 821D5CF4h */ case   38:  		/* li R4, 0 */
		/* 821D5CF4h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D5CF4h case   38:*/		return 0x821D5CF8;
		  /* 821D5CF8h */ case   39:  		/* mr R5, R16 */
		/* 821D5CF8h case   39:*/		regs.R5 = regs.R16;
		/* 821D5CF8h case   39:*/		return 0x821D5CFC;
		  /* 821D5CFCh */ case   40:  		/* bl -258060 */
		/* 821D5CFCh case   40:*/		regs.LR = 0x821D5D00; return 0x82196CF0;
		/* 821D5CFCh case   40:*/		return 0x821D5D00;
		  /* 821D5D00h */ case   41:  		/* b 640 */
		/* 821D5D00h case   41:*/		return 0x821D5F80;
		/* 821D5D00h case   41:*/		return 0x821D5D04;
	}
	return 0x821D5D04;
} // Block from 821D5C5Ch-821D5D04h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821D5D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5D04);
		  /* 821D5D04h */ case    0:  		/* addi R6, R1, 1072 */
		/* 821D5D04h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x430);
		/* 821D5D04h case    0:*/		return 0x821D5D08;
		  /* 821D5D08h */ case    1:  		/* addi R5, R1, 1048 */
		/* 821D5D08h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x418);
		/* 821D5D08h case    1:*/		return 0x821D5D0C;
		  /* 821D5D0Ch */ case    2:  		/* mr R4, R27 */
		/* 821D5D0Ch case    2:*/		regs.R4 = regs.R27;
		/* 821D5D0Ch case    2:*/		return 0x821D5D10;
		  /* 821D5D10h */ case    3:  		/* mr R3, R19 */
		/* 821D5D10h case    3:*/		regs.R3 = regs.R19;
		/* 821D5D10h case    3:*/		return 0x821D5D14;
		  /* 821D5D14h */ case    4:  		/* bl 315412 */
		/* 821D5D14h case    4:*/		regs.LR = 0x821D5D18; return 0x82222D28;
		/* 821D5D14h case    4:*/		return 0x821D5D18;
		  /* 821D5D18h */ case    5:  		/* addi R6, R1, 1056 */
		/* 821D5D18h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x420);
		/* 821D5D18h case    5:*/		return 0x821D5D1C;
		  /* 821D5D1Ch */ case    6:  		/* addi R5, R1, 1088 */
		/* 821D5D1Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x440);
		/* 821D5D1Ch case    6:*/		return 0x821D5D20;
		  /* 821D5D20h */ case    7:  		/* mr R4, R27 */
		/* 821D5D20h case    7:*/		regs.R4 = regs.R27;
		/* 821D5D20h case    7:*/		return 0x821D5D24;
		  /* 821D5D24h */ case    8:  		/* mr R3, R22 */
		/* 821D5D24h case    8:*/		regs.R3 = regs.R22;
		/* 821D5D24h case    8:*/		return 0x821D5D28;
		  /* 821D5D28h */ case    9:  		/* bl 315392 */
		/* 821D5D28h case    9:*/		regs.LR = 0x821D5D2C; return 0x82222D28;
		/* 821D5D28h case    9:*/		return 0x821D5D2C;
		  /* 821D5D2Ch */ case   10:  		/* lfd FR0, <#[R1 + 1048]> */
		/* 821D5D2Ch case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000418) );
		/* 821D5D2Ch case   10:*/		return 0x821D5D30;
		  /* 821D5D30h */ case   11:  		/* lfd FR13, <#[R1 + 1056]> */
		/* 821D5D30h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000420) );
		/* 821D5D30h case   11:*/		return 0x821D5D34;
		  /* 821D5D34h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5D34h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5D34h case   12:*/		return 0x821D5D38;
		  /* 821D5D38h */ case   13:  		/* bc 4, CR6_LT, -728 */
		/* 821D5D38h case   13:*/		if ( !regs.CR[6].lt ) { return 0x821D5A60;  }
		/* 821D5D38h case   13:*/		return 0x821D5D3C;
		  /* 821D5D3Ch */ case   14:  		/* lfd FR0, <#[R1 + 1072]> */
		/* 821D5D3Ch case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000430) );
		/* 821D5D3Ch case   14:*/		return 0x821D5D40;
		  /* 821D5D40h */ case   15:  		/* lfd FR13, <#[R1 + 1088]> */
		/* 821D5D40h case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000440) );
		/* 821D5D40h case   15:*/		return 0x821D5D44;
		  /* 821D5D44h */ case   16:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5D44h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5D44h case   16:*/		return 0x821D5D48;
		  /* 821D5D48h */ case   17:  		/* b -668 */
		/* 821D5D48h case   17:*/		return 0x821D5AAC;
		/* 821D5D48h case   17:*/		return 0x821D5D4C;
	}
	return 0x821D5D4C;
} // Block from 821D5D04h-821D5D4Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D5D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5D4C);
		  /* 821D5D4Ch */ case    0:  		/* addi R6, R1, 1104 */
		/* 821D5D4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x450);
		/* 821D5D4Ch case    0:*/		return 0x821D5D50;
		  /* 821D5D50h */ case    1:  		/* addi R5, R1, 1136 */
		/* 821D5D50h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x470);
		/* 821D5D50h case    1:*/		return 0x821D5D54;
		  /* 821D5D54h */ case    2:  		/* mr R4, R27 */
		/* 821D5D54h case    2:*/		regs.R4 = regs.R27;
		/* 821D5D54h case    2:*/		return 0x821D5D58;
		  /* 821D5D58h */ case    3:  		/* mr R3, R19 */
		/* 821D5D58h case    3:*/		regs.R3 = regs.R19;
		/* 821D5D58h case    3:*/		return 0x821D5D5C;
		  /* 821D5D5Ch */ case    4:  		/* bl 315340 */
		/* 821D5D5Ch case    4:*/		regs.LR = 0x821D5D60; return 0x82222D28;
		/* 821D5D5Ch case    4:*/		return 0x821D5D60;
		  /* 821D5D60h */ case    5:  		/* addi R6, R1, 1152 */
		/* 821D5D60h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x480);
		/* 821D5D60h case    5:*/		return 0x821D5D64;
		  /* 821D5D64h */ case    6:  		/* addi R5, R1, 1120 */
		/* 821D5D64h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x460);
		/* 821D5D64h case    6:*/		return 0x821D5D68;
		  /* 821D5D68h */ case    7:  		/* mr R4, R27 */
		/* 821D5D68h case    7:*/		regs.R4 = regs.R27;
		/* 821D5D68h case    7:*/		return 0x821D5D6C;
		  /* 821D5D6Ch */ case    8:  		/* mr R3, R22 */
		/* 821D5D6Ch case    8:*/		regs.R3 = regs.R22;
		/* 821D5D6Ch case    8:*/		return 0x821D5D70;
		  /* 821D5D70h */ case    9:  		/* bl 315320 */
		/* 821D5D70h case    9:*/		regs.LR = 0x821D5D74; return 0x82222D28;
		/* 821D5D70h case    9:*/		return 0x821D5D74;
		  /* 821D5D74h */ case   10:  		/* lfd FR0, <#[R1 + 1104]> */
		/* 821D5D74h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000450) );
		/* 821D5D74h case   10:*/		return 0x821D5D78;
		  /* 821D5D78h */ case   11:  		/* lfd FR13, <#[R1 + 1120]> */
		/* 821D5D78h case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000460) );
		/* 821D5D78h case   11:*/		return 0x821D5D7C;
		  /* 821D5D7Ch */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D5D7Ch case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D5D7Ch case   12:*/		return 0x821D5D80;
		  /* 821D5D80h */ case   13:  		/* bc 12, CR6_LT, -800 */
		/* 821D5D80h case   13:*/		if ( regs.CR[6].lt ) { return 0x821D5A60;  }
		/* 821D5D80h case   13:*/		return 0x821D5D84;
		  /* 821D5D84h */ case   14:  		/* lfd FR0, <#[R1 + 1136]> */
		/* 821D5D84h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000470) );
		/* 821D5D84h case   14:*/		return 0x821D5D88;
		  /* 821D5D88h */ case   15:  		/* lfd FR13, <#[R1 + 1152]> */
		/* 821D5D88h case   15:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000480) );
		/* 821D5D88h case   15:*/		return 0x821D5D8C;
		  /* 821D5D8Ch */ case   16:  		/* fcmpu CR6, FR13, FR0 */
		/* 821D5D8Ch case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821D5D8Ch case   16:*/		return 0x821D5D90;
		  /* 821D5D90h */ case   17:  		/* bc 12, CR6_LT, -816 */
		/* 821D5D90h case   17:*/		if ( regs.CR[6].lt ) { return 0x821D5A60;  }
		/* 821D5D90h case   17:*/		return 0x821D5D94;
	}
	return 0x821D5D94;
} // Block from 821D5D4Ch-821D5D94h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D5D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5D94);
		  /* 821D5D94h */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 821D5D94h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5D94h case    0:*/		return 0x821D5D98;
		  /* 821D5D98h */ case    1:  		/* lwz R29, <#[R1 + 132]> */
		/* 821D5D98h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000084) );
		/* 821D5D98h case    1:*/		return 0x821D5D9C;
		  /* 821D5D9Ch */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D5D9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D5D9Ch case    2:*/		return 0x821D5DA0;
		  /* 821D5DA0h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D5DA0h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D5DA0h case    3:*/		return 0x821D5DA4;
		  /* 821D5DA4h */ case    4:  		/* cmplwi CR6, R11, 5 */
		/* 821D5DA4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821D5DA4h case    4:*/		return 0x821D5DA8;
		  /* 821D5DA8h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821D5DA8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D5DC4;  }
		/* 821D5DA8h case    5:*/		return 0x821D5DAC;
		  /* 821D5DACh */ case    6:  		/* cmplwi CR6, R11, 8 */
		/* 821D5DACh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821D5DACh case    6:*/		return 0x821D5DB0;
		  /* 821D5DB0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821D5DB0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D5DC4;  }
		/* 821D5DB0h case    7:*/		return 0x821D5DB4;
		  /* 821D5DB4h */ case    8:  		/* cmplwi CR6, R11, 7 */
		/* 821D5DB4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D5DB4h case    8:*/		return 0x821D5DB8;
		  /* 821D5DB8h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 821D5DB8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D5DC4;  }
		/* 821D5DB8h case    9:*/		return 0x821D5DBC;
		  /* 821D5DBCh */ case   10:  		/* cmplwi CR6, R11, 6 */
		/* 821D5DBCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821D5DBCh case   10:*/		return 0x821D5DC0;
		  /* 821D5DC0h */ case   11:  		/* bc 4, CR6_EQ, 288 */
		/* 821D5DC0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D5EE0;  }
		/* 821D5DC0h case   11:*/		return 0x821D5DC4;
	}
	return 0x821D5DC4;
} // Block from 821D5D94h-821D5DC4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D5DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5DC4);
		  /* 821D5DC4h */ case    0:  		/* rlwinm. R11, R29, 0, 30, 28 */
		/* 821D5DC4h case    0:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R29);
		/* 821D5DC4h case    0:*/		return 0x821D5DC8;
		  /* 821D5DC8h */ case    1:  		/* bc 4, CR0_EQ, 280 */
		/* 821D5DC8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D5EE0;  }
		/* 821D5DC8h case    1:*/		return 0x821D5DCC;
		  /* 821D5DCCh */ case    2:  		/* mr R4, R27 */
		/* 821D5DCCh case    2:*/		regs.R4 = regs.R27;
		/* 821D5DCCh case    2:*/		return 0x821D5DD0;
		  /* 821D5DD0h */ case    3:  		/* mr R3, R22 */
		/* 821D5DD0h case    3:*/		regs.R3 = regs.R22;
		/* 821D5DD0h case    3:*/		return 0x821D5DD4;
		  /* 821D5DD4h */ case    4:  		/* bl -240812 */
		/* 821D5DD4h case    4:*/		regs.LR = 0x821D5DD8; return 0x8219B128;
		/* 821D5DD4h case    4:*/		return 0x821D5DD8;
		  /* 821D5DD8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5DD8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5DD8h case    5:*/		return 0x821D5DDC;
		  /* 821D5DDCh */ case    6:  		/* bc 12, CR0_EQ, 260 */
		/* 821D5DDCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821D5EE0;  }
		/* 821D5DDCh case    6:*/		return 0x821D5DE0;
		  /* 821D5DE0h */ case    7:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D5DE0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D5DE0h case    7:*/		return 0x821D5DE4;
		  /* 821D5DE4h */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D5DE4h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D5DE4h case    8:*/		return 0x821D5DE8;
		  /* 821D5DE8h */ case    9:  		/* cmplwi CR6, R11, 7 */
		/* 821D5DE8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D5DE8h case    9:*/		return 0x821D5DEC;
		  /* 821D5DECh */ case   10:  		/* bc 4, CR6_EQ, 92 */
		/* 821D5DECh case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D5E48;  }
		/* 821D5DECh case   10:*/		return 0x821D5DF0;
		  /* 821D5DF0h */ case   11:  		/* rlwinm. R11, R29, 0, 29, 29 */
		/* 821D5DF0h case   11:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R29);
		/* 821D5DF0h case   11:*/		return 0x821D5DF4;
		  /* 821D5DF4h */ case   12:  		/* mr R3, R24 */
		/* 821D5DF4h case   12:*/		regs.R3 = regs.R24;
		/* 821D5DF4h case   12:*/		return 0x821D5DF8;
		  /* 821D5DF8h */ case   13:  		/* bc 4, CR0_EQ, 24 */
		/* 821D5DF8h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D5E10;  }
		/* 821D5DF8h case   13:*/		return 0x821D5DFC;
		  /* 821D5DFCh */ case   14:  		/* fmr FR4, FR29 */
		/* 821D5DFCh case   14:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5DFCh case   14:*/		return 0x821D5E00;
		  /* 821D5E00h */ case   15:  		/* fmr FR3, FR29 */
		/* 821D5E00h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5E00h case   15:*/		return 0x821D5E04;
		  /* 821D5E04h */ case   16:  		/* fmr FR2, FR29 */
		/* 821D5E04h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5E04h case   16:*/		return 0x821D5E08;
		  /* 821D5E08h */ case   17:  		/* fmr FR1, FR28 */
		/* 821D5E08h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821D5E08h case   17:*/		return 0x821D5E0C;
		  /* 821D5E0Ch */ case   18:  		/* b 364 */
		/* 821D5E0Ch case   18:*/		return 0x821D5F78;
		/* 821D5E0Ch case   18:*/		return 0x821D5E10;
	}
	return 0x821D5E10;
} // Block from 821D5DC4h-821D5E10h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D5E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5E10);
		  /* 821D5E10h */ case    0:  		/* mr R4, R19 */
		/* 821D5E10h case    0:*/		regs.R4 = regs.R19;
		/* 821D5E10h case    0:*/		return 0x821D5E14;
		  /* 821D5E14h */ case    1:  		/* lwz R5, <#[R19 + 12]> */
		/* 821D5E14h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x0000000C) );
		/* 821D5E14h case    1:*/		return 0x821D5E18;
		  /* 821D5E18h */ case    2:  		/* bl -412968 */
		/* 821D5E18h case    2:*/		regs.LR = 0x821D5E1C; return 0x821710F0;
		/* 821D5E18h case    2:*/		return 0x821D5E1C;
		  /* 821D5E1Ch */ case    3:  		/* mr R11, R3 */
		/* 821D5E1Ch case    3:*/		regs.R11 = regs.R3;
		/* 821D5E1Ch case    3:*/		return 0x821D5E20;
		  /* 821D5E20h */ case    4:  		/* mr R7, R22 */
		/* 821D5E20h case    4:*/		regs.R7 = regs.R22;
		/* 821D5E20h case    4:*/		return 0x821D5E24;
		  /* 821D5E24h */ case    5:  		/* mr R3, R24 */
		/* 821D5E24h case    5:*/		regs.R3 = regs.R24;
		/* 821D5E24h case    5:*/		return 0x821D5E28;
		  /* 821D5E28h */ case    6:  		/* mr R6, R11 */
		/* 821D5E28h case    6:*/		regs.R6 = regs.R11;
		/* 821D5E28h case    6:*/		return 0x821D5E2C;
		  /* 821D5E2Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821D5E2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D5E2Ch case    7:*/		return 0x821D5E30;
		  /* 821D5E30h */ case    8:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821D5E30h case    8:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821D5E30h case    8:*/		return 0x821D5E34;
		  /* 821D5E34h */ case    9:  		/* stw R10, <#[R11]> */
		/* 821D5E34h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D5E34h case    9:*/		return 0x821D5E38;
		  /* 821D5E38h */ case   10:  		/* li R4, 0 */
		/* 821D5E38h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D5E38h case   10:*/		return 0x821D5E3C;
		  /* 821D5E3Ch */ case   11:  		/* mr R5, R16 */
		/* 821D5E3Ch case   11:*/		regs.R5 = regs.R16;
		/* 821D5E3Ch case   11:*/		return 0x821D5E40;
		  /* 821D5E40h */ case   12:  		/* bl -228840 */
		/* 821D5E40h case   12:*/		regs.LR = 0x821D5E44; return 0x8219E058;
		/* 821D5E40h case   12:*/		return 0x821D5E44;
		  /* 821D5E44h */ case   13:  		/* b 316 */
		/* 821D5E44h case   13:*/		return 0x821D5F80;
		/* 821D5E44h case   13:*/		return 0x821D5E48;
	}
	return 0x821D5E48;
} // Block from 821D5E10h-821D5E48h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D5E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5E48);
		  /* 821D5E48h */ case    0:  		/* cmplwi CR6, R11, 5 */
		/* 821D5E48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821D5E48h case    0:*/		return 0x821D5E4C;
		  /* 821D5E4Ch */ case    1:  		/* bc 4, CR6_EQ, 120 */
		/* 821D5E4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D5EC4;  }
		/* 821D5E4Ch case    1:*/		return 0x821D5E50;
		  /* 821D5E50h */ case    2:  		/* mr R3, R24 */
		/* 821D5E50h case    2:*/		regs.R3 = regs.R24;
		/* 821D5E50h case    2:*/		return 0x821D5E54;
		  /* 821D5E54h */ case    3:  		/* lwz R4, <#[R31 + 44]> */
		/* 821D5E54h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D5E54h case    3:*/		return 0x821D5E58;
		  /* 821D5E58h */ case    4:  		/* lwz R5, <#[R1 + 120]> */
		/* 821D5E58h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5E58h case    4:*/		return 0x821D5E5C;
		  /* 821D5E5Ch */ case    5:  		/* bl -95420 */
		/* 821D5E5Ch case    5:*/		regs.LR = 0x821D5E60; return 0x821BE9A0;
		/* 821D5E5Ch case    5:*/		return 0x821D5E60;
		  /* 821D5E60h */ case    6:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D5E60h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5E60h case    6:*/		return 0x821D5E64;
		  /* 821D5E64h */ case    7:  		/* mr R31, R3 */
		/* 821D5E64h case    7:*/		regs.R31 = regs.R3;
		/* 821D5E64h case    7:*/		return 0x821D5E68;
		  /* 821D5E68h */ case    8:  		/* lwz R5, <#[R1 + 120]> */
		/* 821D5E68h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5E68h case    8:*/		return 0x821D5E6C;
		  /* 821D5E6Ch */ case    9:  		/* mr R3, R24 */
		/* 821D5E6Ch case    9:*/		regs.R3 = regs.R24;
		/* 821D5E6Ch case    9:*/		return 0x821D5E70;
		  /* 821D5E70h */ case   10:  		/* lwz R4, <#[R11 + 48]> */
		/* 821D5E70h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000030) );
		/* 821D5E70h case   10:*/		return 0x821D5E74;
		  /* 821D5E74h */ case   11:  		/* bl -95444 */
		/* 821D5E74h case   11:*/		regs.LR = 0x821D5E78; return 0x821BE9A0;
		/* 821D5E74h case   11:*/		return 0x821D5E78;
		  /* 821D5E78h */ case   12:  		/* lwz R11, <#[R1 + 116]> */
		/* 821D5E78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821D5E78h case   12:*/		return 0x821D5E7C;
		  /* 821D5E7Ch */ case   13:  		/* mr R6, R3 */
		/* 821D5E7Ch case   13:*/		regs.R6 = regs.R3;
		/* 821D5E7Ch case   13:*/		return 0x821D5E80;
		  /* 821D5E80h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D5E80h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D5E80h case   14:*/		return 0x821D5E84;
		  /* 821D5E84h */ case   15:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D5E84h case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D5E84h case   15:*/		return 0x821D5E88;
		  /* 821D5E88h */ case   16:  		/* cmpwi CR6, R11, 5 */
		/* 821D5E88h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821D5E88h case   16:*/		return 0x821D5E8C;
		  /* 821D5E8Ch */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 821D5E8Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821D5EB8;  }
		/* 821D5E8Ch case   17:*/		return 0x821D5E90;
		  /* 821D5E90h */ case   18:  		/* cmpwi CR6, R11, 6 */
		/* 821D5E90h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D5E90h case   18:*/		return 0x821D5E94;
		  /* 821D5E94h */ case   19:  		/* bc 12, CR6_EQ, -424 */
		/* 821D5E94h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D5CEC;  }
		/* 821D5E94h case   19:*/		return 0x821D5E98;
		  /* 821D5E98h */ case   20:  		/* cmpwi CR6, R11, 7 */
		/* 821D5E98h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821D5E98h case   20:*/		return 0x821D5E9C;
		  /* 821D5E9Ch */ case   21:  		/* mr R3, R24 */
		/* 821D5E9Ch case   21:*/		regs.R3 = regs.R24;
		/* 821D5E9Ch case   21:*/		return 0x821D5EA0;
		  /* 821D5EA0h */ case   22:  		/* bc 12, CR6_EQ, -676 */
		/* 821D5EA0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D5BFC;  }
		/* 821D5EA0h case   22:*/		return 0x821D5EA4;
		  /* 821D5EA4h */ case   23:  		/* cmpwi CR6, R11, 8 */
		/* 821D5EA4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D5EA4h case   23:*/		return 0x821D5EA8;
		  /* 821D5EA8h */ case   24:  		/* bc 4, CR6_EQ, 268 */
		/* 821D5EA8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D5FB4;  }
		/* 821D5EA8h case   24:*/		return 0x821D5EAC;
		  /* 821D5EACh */ case   25:  		/* mr R7, R6 */
		/* 821D5EACh case   25:*/		regs.R7 = regs.R6;
		/* 821D5EACh case   25:*/		return 0x821D5EB0;
		  /* 821D5EB0h */ case   26:  		/* mr R6, R31 */
		/* 821D5EB0h case   26:*/		regs.R6 = regs.R31;
		/* 821D5EB0h case   26:*/		return 0x821D5EB4;
		  /* 821D5EB4h */ case   27:  		/* b -124 */
		/* 821D5EB4h case   27:*/		return 0x821D5E38;
		/* 821D5EB4h case   27:*/		return 0x821D5EB8;
	}
	return 0x821D5EB8;
} // Block from 821D5E48h-821D5EB8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D5EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5EB8);
		  /* 821D5EB8h */ case    0:  		/* mr R7, R6 */
		/* 821D5EB8h case    0:*/		regs.R7 = regs.R6;
		/* 821D5EB8h case    0:*/		return 0x821D5EBC;
		  /* 821D5EBCh */ case    1:  		/* mr R6, R31 */
		/* 821D5EBCh case    1:*/		regs.R6 = regs.R31;
		/* 821D5EBCh case    1:*/		return 0x821D5EC0;
		  /* 821D5EC0h */ case    2:  		/* b -876 */
		/* 821D5EC0h case    2:*/		return 0x821D5B54;
		/* 821D5EC0h case    2:*/		return 0x821D5EC4;
	}
	return 0x821D5EC4;
} // Block from 821D5EB8h-821D5EC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D5EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5EC4);
		  /* 821D5EC4h */ case    0:  		/* cmplwi CR6, R11, 6 */
		/* 821D5EC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821D5EC4h case    0:*/		return 0x821D5EC8;
		  /* 821D5EC8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821D5EC8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D5ED4;  }
		/* 821D5EC8h case    1:*/		return 0x821D5ECC;
		  /* 821D5ECCh */ case    2:  		/* rlwinm. R11, R29, 0, 29, 29 */
		/* 821D5ECCh case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R29);
		/* 821D5ECCh case    2:*/		return 0x821D5ED0;
		  /* 821D5ED0h */ case    3:  		/* bc 4, CR0_EQ, -1056 */
		/* 821D5ED0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D5AB0;  }
		/* 821D5ED0h case    3:*/		return 0x821D5ED4;
	}
	return 0x821D5ED4;
} // Block from 821D5EC4h-821D5ED4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5ED4);
		  /* 821D5ED4h */ case    0:  		/* lwz R7, <#[R1 + 120]> */
		/* 821D5ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5ED4h case    0:*/		return 0x821D5ED8;
		  /* 821D5ED8h */ case    1:  		/* mr R6, R31 */
		/* 821D5ED8h case    1:*/		regs.R6 = regs.R31;
		/* 821D5ED8h case    1:*/		return 0x821D5EDC;
		  /* 821D5EDCh */ case    2:  		/* b 172 */
		/* 821D5EDCh case    2:*/		return 0x821D5F88;
		/* 821D5EDCh case    2:*/		return 0x821D5EE0;
	}
	return 0x821D5EE0;
} // Block from 821D5ED4h-821D5EE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D5EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5EE0);
		  /* 821D5EE0h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D5EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D5EE0h case    0:*/		return 0x821D5EE4;
		  /* 821D5EE4h */ case    1:  		/* rlwinm R30, R11, 25, 25, 31 */
		/* 821D5EE4h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R30,regs.R11);
		/* 821D5EE4h case    1:*/		return 0x821D5EE8;
		  /* 821D5EE8h */ case    2:  		/* cmplwi CR6, R30, 6 */
		/* 821D5EE8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 821D5EE8h case    2:*/		return 0x821D5EEC;
		  /* 821D5EECh */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821D5EECh case    3:*/		if ( regs.CR[6].eq ) { return 0x821D5EF8;  }
		/* 821D5EECh case    3:*/		return 0x821D5EF0;
		  /* 821D5EF0h */ case    4:  		/* cmplwi CR6, R30, 8 */
		/* 821D5EF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000008);
		/* 821D5EF0h case    4:*/		return 0x821D5EF4;
		  /* 821D5EF4h */ case    5:  		/* bc 4, CR6_EQ, 52 */
		/* 821D5EF4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D5F28;  }
		/* 821D5EF4h case    5:*/		return 0x821D5EF8;
	}
	return 0x821D5EF8;
} // Block from 821D5EE0h-821D5EF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D5EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5EF8);
		  /* 821D5EF8h */ case    0:  		/* mr R4, R31 */
		/* 821D5EF8h case    0:*/		regs.R4 = regs.R31;
		/* 821D5EF8h case    0:*/		return 0x821D5EFC;
		  /* 821D5EFCh */ case    1:  		/* mr R3, R24 */
		/* 821D5EFCh case    1:*/		regs.R3 = regs.R24;
		/* 821D5EFCh case    1:*/		return 0x821D5F00;
		  /* 821D5F00h */ case    2:  		/* bl -98272 */
		/* 821D5F00h case    2:*/		regs.LR = 0x821D5F04; return 0x821BDF20;
		/* 821D5F00h case    2:*/		return 0x821D5F04;
		  /* 821D5F04h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5F04h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5F04h case    3:*/		return 0x821D5F08;
		  /* 821D5F08h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 821D5F08h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D5F28;  }
		/* 821D5F08h case    4:*/		return 0x821D5F0C;
		  /* 821D5F0Ch */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 821D5F0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D5F0Ch case    5:*/		return 0x821D5F10;
		  /* 821D5F10h */ case    6:  		/* bc 4, CR6_EQ, 24 */
		/* 821D5F10h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D5F28;  }
		/* 821D5F10h case    6:*/		return 0x821D5F14;
		  /* 821D5F14h */ case    7:  		/* mr R4, R27 */
		/* 821D5F14h case    7:*/		regs.R4 = regs.R27;
		/* 821D5F14h case    7:*/		return 0x821D5F18;
		  /* 821D5F18h */ case    8:  		/* mr R3, R22 */
		/* 821D5F18h case    8:*/		regs.R3 = regs.R22;
		/* 821D5F18h case    8:*/		return 0x821D5F1C;
		  /* 821D5F1Ch */ case    9:  		/* bl -241140 */
		/* 821D5F1Ch case    9:*/		regs.LR = 0x821D5F20; return 0x8219B128;
		/* 821D5F1Ch case    9:*/		return 0x821D5F20;
		  /* 821D5F20h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D5F20h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D5F20h case   10:*/		return 0x821D5F24;
		  /* 821D5F24h */ case   11:  		/* bc 4, CR0_EQ, -80 */
		/* 821D5F24h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821D5ED4;  }
		/* 821D5F24h case   11:*/		return 0x821D5F28;
	}
	return 0x821D5F28;
} // Block from 821D5EF8h-821D5F28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F28);
		  /* 821D5F28h */ case    0:  		/* lwz R11, <#[R1 + 124]> */
		/* 821D5F28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821D5F28h case    0:*/		return 0x821D5F2C;
		  /* 821D5F2Ch */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821D5F2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D5F2Ch case    1:*/		return 0x821D5F30;
		  /* 821D5F30h */ case    2:  		/* bc 4, CR6_EQ, 116 */
		/* 821D5F30h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5F30h case    2:*/		return 0x821D5F34;
		  /* 821D5F34h */ case    3:  		/* lwz R11, <#[R1 + 120]> */
		/* 821D5F34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821D5F34h case    3:*/		return 0x821D5F38;
		  /* 821D5F38h */ case    4:  		/* lwz R10, <#[R1 + 136]> */
		/* 821D5F38h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 821D5F38h case    4:*/		return 0x821D5F3C;
		  /* 821D5F3Ch */ case    5:  		/* cmpw CR6, R11, R10 */
		/* 821D5F3Ch case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821D5F3Ch case    5:*/		return 0x821D5F40;
		  /* 821D5F40h */ case    6:  		/* bc 4, CR6_EQ, 100 */
		/* 821D5F40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5F40h case    6:*/		return 0x821D5F44;
		  /* 821D5F44h */ case    7:  		/* lwz R11, <#[R1 + 128]> */
		/* 821D5F44h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821D5F44h case    7:*/		return 0x821D5F48;
		  /* 821D5F48h */ case    8:  		/* cmplw CR6, R29, R11 */
		/* 821D5F48h case    8:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821D5F48h case    8:*/		return 0x821D5F4C;
		  /* 821D5F4Ch */ case    9:  		/* bc 4, CR6_EQ, 88 */
		/* 821D5F4Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D5FA4;  }
		/* 821D5F4Ch case    9:*/		return 0x821D5F50;
		  /* 821D5F50h */ case   10:  		/* fmr FR1, FR28 */
		/* 821D5F50h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 821D5F50h case   10:*/		return 0x821D5F54;
		  /* 821D5F54h */ case   11:  		/* cmplwi CR6, R30, 6 */
		/* 821D5F54h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 821D5F54h case   11:*/		return 0x821D5F58;
		  /* 821D5F58h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 821D5F58h case   12:*/		if ( regs.CR[6].eq ) { return 0x821D5F64;  }
		/* 821D5F58h case   12:*/		return 0x821D5F5C;
		  /* 821D5F5Ch */ case   13:  		/* cmplwi CR6, R30, 8 */
		/* 821D5F5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000008);
		/* 821D5F5Ch case   13:*/		return 0x821D5F60;
		  /* 821D5F60h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 821D5F60h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D5F68;  }
		/* 821D5F60h case   14:*/		return 0x821D5F64;
	}
	return 0x821D5F64;
} // Block from 821D5F28h-821D5F64h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F64);
		  /* 821D5F64h */ case    0:  		/* fmr FR1, FR29 */
		/* 821D5F64h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D5F64h case    0:*/		return 0x821D5F68;
	}
	return 0x821D5F68;
} // Block from 821D5F64h-821D5F68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F68);
		  /* 821D5F68h */ case    0:  		/* fmr FR4, FR29 */
		/* 821D5F68h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D5F68h case    0:*/		return 0x821D5F6C;
		  /* 821D5F6Ch */ case    1:  		/* fmr FR3, FR29 */
		/* 821D5F6Ch case    1:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D5F6Ch case    1:*/		return 0x821D5F70;
		  /* 821D5F70h */ case    2:  		/* fmr FR2, FR29 */
		/* 821D5F70h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D5F70h case    2:*/		return 0x821D5F74;
	}
	return 0x821D5F74;
} // Block from 821D5F68h-821D5F74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F74);
		  /* 821D5F74h */ case    0:  		/* mr R3, R24 */
		/* 821D5F74h case    0:*/		regs.R3 = regs.R24;
		/* 821D5F74h case    0:*/		return 0x821D5F78;
	}
	return 0x821D5F78;
} // Block from 821D5F74h-821D5F78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F78);
		  /* 821D5F78h */ case    0:  		/* li R4, 1 */
		/* 821D5F78h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D5F78h case    0:*/		return 0x821D5F7C;
		  /* 821D5F7Ch */ case    1:  		/* bl 347100 */
		/* 821D5F7Ch case    1:*/		regs.LR = 0x821D5F80; return 0x8222AB58;
		/* 821D5F7Ch case    1:*/		return 0x821D5F80;
	}
	return 0x821D5F80;
} // Block from 821D5F78h-821D5F80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F80);
		  /* 821D5F80h */ case    0:  		/* li R7, 0 */
		/* 821D5F80h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D5F80h case    0:*/		return 0x821D5F84;
		  /* 821D5F84h */ case    1:  		/* mr R6, R3 */
		/* 821D5F84h case    1:*/		regs.R6 = regs.R3;
		/* 821D5F84h case    1:*/		return 0x821D5F88;
	}
	return 0x821D5F88;
} // Block from 821D5F80h-821D5F88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F88);
		  /* 821D5F88h */ case    0:  		/* li R8, 0 */
		/* 821D5F88h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D5F88h case    0:*/		return 0x821D5F8C;
	}
	return 0x821D5F8C;
} // Block from 821D5F88h-821D5F8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D5F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5F8C);
		  /* 821D5F8Ch */ case    0:  		/* mr R10, R23 */
		/* 821D5F8Ch case    0:*/		regs.R10 = regs.R23;
		/* 821D5F8Ch case    0:*/		return 0x821D5F90;
		  /* 821D5F90h */ case    1:  		/* mr R9, R25 */
		/* 821D5F90h case    1:*/		regs.R9 = regs.R25;
		/* 821D5F90h case    1:*/		return 0x821D5F94;
		  /* 821D5F94h */ case    2:  		/* mr R5, R27 */
		/* 821D5F94h case    2:*/		regs.R5 = regs.R27;
		/* 821D5F94h case    2:*/		return 0x821D5F98;
		  /* 821D5F98h */ case    3:  		/* mr R4, R16 */
		/* 821D5F98h case    3:*/		regs.R4 = regs.R16;
		/* 821D5F98h case    3:*/		return 0x821D5F9C;
		  /* 821D5F9Ch */ case    4:  		/* mr R3, R24 */
		/* 821D5F9Ch case    4:*/		regs.R3 = regs.R24;
		/* 821D5F9Ch case    4:*/		return 0x821D5FA0;
		  /* 821D5FA0h */ case    5:  		/* bl -29424 */
		/* 821D5FA0h case    5:*/		regs.LR = 0x821D5FA4; return 0x821CECB0;
		/* 821D5FA0h case    5:*/		return 0x821D5FA4;
	}
	return 0x821D5FA4;
} // Block from 821D5F8Ch-821D5FA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D5FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5FA4);
		  /* 821D5FA4h */ case    0:  		/* addi R27, R27, 1 */
		/* 821D5FA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821D5FA4h case    0:*/		return 0x821D5FA8;
		  /* 821D5FA8h */ case    1:  		/* cmplw CR6, R27, R18 */
		/* 821D5FA8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R18);
		/* 821D5FA8h case    1:*/		return 0x821D5FAC;
		  /* 821D5FACh */ case    2:  		/* bc 12, CR6_LT, -5432 */
		/* 821D5FACh case    2:*/		if ( regs.CR[6].lt ) { return 0x821D4A74;  }
		/* 821D5FACh case    2:*/		return 0x821D5FB0;
		  /* 821D5FB0h */ case    3:  		/* b -5640 */
		/* 821D5FB0h case    3:*/		return 0x821D49A8;
		/* 821D5FB0h case    3:*/		return 0x821D5FB4;
	}
	return 0x821D5FB4;
} // Block from 821D5FA4h-821D5FB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D5FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5FB4);
		  /* 821D5FB4h */ case    0:  		/* li R4, 4800 */
		/* 821D5FB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D5FB4h case    0:*/		return 0x821D5FB8;
		  /* 821D5FB8h */ case    1:  		/* bl -541008 */
		/* 821D5FB8h case    1:*/		regs.LR = 0x821D5FBC; return 0x82151E68;
		/* 821D5FB8h case    1:*/		return 0x821D5FBC;
	}
	return 0x821D5FBC;
} // Block from 821D5FB4h-821D5FBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D5FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D5FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D5FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D5FBC);
		  /* 821D5FBCh */ case    0:  		/* lwz R21, <#[R16 + 48]> */
		/* 821D5FBCh case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R16 + 0x00000030) );
		/* 821D5FBCh case    0:*/		return 0x821D5FC0;
		  /* 821D5FC0h */ case    1:  		/* li R25, 0 */
		/* 821D5FC0h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D5FC0h case    1:*/		return 0x821D5FC4;
		  /* 821D5FC4h */ case    2:  		/* lwz R20, <#[R16 + 52]> */
		/* 821D5FC4h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R16 + 0x00000034) );
		/* 821D5FC4h case    2:*/		return 0x821D5FC8;
		  /* 821D5FC8h */ case    3:  		/* lwz R23, <#[R1 + 112]> */
		/* 821D5FC8h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 821D5FC8h case    3:*/		return 0x821D5FCC;
		  /* 821D5FCCh */ case    4:  		/* lwz R22, <#[R1 + 1924]> */
		/* 821D5FCCh case    4:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000784) );
		/* 821D5FCCh case    4:*/		return 0x821D5FD0;
		  /* 821D5FD0h */ case    5:  		/* cmplw CR6, R25, R18 */
		/* 821D5FD0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R18);
		/* 821D5FD0h case    5:*/		return 0x821D5FD4;
		  /* 821D5FD4h */ case    6:  		/* bc 4, CR6_LT, -5676 */
		/* 821D5FD4h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821D49A8;  }
		/* 821D5FD4h case    6:*/		return 0x821D5FD8;
		  /* 821D5FD8h */ case    7:  		/* li R10, 0 */
		/* 821D5FD8h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5FD8h case    7:*/		return 0x821D5FDC;
		  /* 821D5FDCh */ case    8:  		/* mr R9, R16 */
		/* 821D5FDCh case    8:*/		regs.R9 = regs.R16;
		/* 821D5FDCh case    8:*/		return 0x821D5FE0;
		  /* 821D5FE0h */ case    9:  		/* li R8, 0 */
		/* 821D5FE0h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D5FE0h case    9:*/		return 0x821D5FE4;
		  /* 821D5FE4h */ case   10:  		/* addi R7, R1, 200 */
		/* 821D5FE4h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC8);
		/* 821D5FE4h case   10:*/		return 0x821D5FE8;
		  /* 821D5FE8h */ case   11:  		/* addi R6, R1, 204 */
		/* 821D5FE8h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xCC);
		/* 821D5FE8h case   11:*/		return 0x821D5FEC;
		  /* 821D5FECh */ case   12:  		/* addi R5, R1, 156 */
		/* 821D5FECh case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x9C);
		/* 821D5FECh case   12:*/		return 0x821D5FF0;
		  /* 821D5FF0h */ case   13:  		/* mr R4, R25 */
		/* 821D5FF0h case   13:*/		regs.R4 = regs.R25;
		/* 821D5FF0h case   13:*/		return 0x821D5FF4;
		  /* 821D5FF4h */ case   14:  		/* mr R3, R19 */
		/* 821D5FF4h case   14:*/		regs.R3 = regs.R19;
		/* 821D5FF4h case   14:*/		return 0x821D5FF8;
		  /* 821D5FF8h */ case   15:  		/* bl 316632 */
		/* 821D5FF8h case   15:*/		regs.LR = 0x821D5FFC; return 0x822234D0;
		/* 821D5FF8h case   15:*/		return 0x821D5FFC;
		  /* 821D5FFCh */ case   16:  		/* li R10, 0 */
		/* 821D5FFCh case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D5FFCh case   16:*/		return 0x821D6000;
		  /* 821D6000h */ case   17:  		/* mr R9, R16 */
		/* 821D6000h case   17:*/		regs.R9 = regs.R16;
		/* 821D6000h case   17:*/		return 0x821D6004;
		  /* 821D6004h */ case   18:  		/* li R8, 0 */
		/* 821D6004h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6004h case   18:*/		return 0x821D6008;
		  /* 821D6008h */ case   19:  		/* addi R7, R1, 148 */
		/* 821D6008h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x94);
		/* 821D6008h case   19:*/		return 0x821D600C;
		  /* 821D600Ch */ case   20:  		/* addi R6, R1, 144 */
		/* 821D600Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 821D600Ch case   20:*/		return 0x821D6010;
		  /* 821D6010h */ case   21:  		/* addi R5, R1, 140 */
		/* 821D6010h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x8C);
		/* 821D6010h case   21:*/		return 0x821D6014;
		  /* 821D6014h */ case   22:  		/* mr R4, R25 */
		/* 821D6014h case   22:*/		regs.R4 = regs.R25;
		/* 821D6014h case   22:*/		return 0x821D6018;
		  /* 821D6018h */ case   23:  		/* mr R3, R21 */
		/* 821D6018h case   23:*/		regs.R3 = regs.R21;
		/* 821D6018h case   23:*/		return 0x821D601C;
		  /* 821D601Ch */ case   24:  		/* bl 316596 */
		/* 821D601Ch case   24:*/		regs.LR = 0x821D6020; return 0x822234D0;
		/* 821D601Ch case   24:*/		return 0x821D6020;
		  /* 821D6020h */ case   25:  		/* li R10, 0 */
		/* 821D6020h case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6020h case   25:*/		return 0x821D6024;
		  /* 821D6024h */ case   26:  		/* mr R9, R16 */
		/* 821D6024h case   26:*/		regs.R9 = regs.R16;
		/* 821D6024h case   26:*/		return 0x821D6028;
		  /* 821D6028h */ case   27:  		/* li R8, 0 */
		/* 821D6028h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6028h case   27:*/		return 0x821D602C;
		  /* 821D602Ch */ case   28:  		/* addi R7, R1, 168 */
		/* 821D602Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA8);
		/* 821D602Ch case   28:*/		return 0x821D6030;
		  /* 821D6030h */ case   29:  		/* addi R6, R1, 164 */
		/* 821D6030h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA4);
		/* 821D6030h case   29:*/		return 0x821D6034;
		  /* 821D6034h */ case   30:  		/* addi R5, R1, 152 */
		/* 821D6034h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x98);
		/* 821D6034h case   30:*/		return 0x821D6038;
		  /* 821D6038h */ case   31:  		/* mr R4, R25 */
		/* 821D6038h case   31:*/		regs.R4 = regs.R25;
		/* 821D6038h case   31:*/		return 0x821D603C;
		  /* 821D603Ch */ case   32:  		/* mr R3, R20 */
		/* 821D603Ch case   32:*/		regs.R3 = regs.R20;
		/* 821D603Ch case   32:*/		return 0x821D6040;
		  /* 821D6040h */ case   33:  		/* bl 316560 */
		/* 821D6040h case   33:*/		regs.LR = 0x821D6044; return 0x822234D0;
		/* 821D6040h case   33:*/		return 0x821D6044;
		  /* 821D6044h */ case   34:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D6044h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D6044h case   34:*/		return 0x821D6048;
		  /* 821D6048h */ case   35:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D6048h case   35:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D6048h case   35:*/		return 0x821D604C;
		  /* 821D604Ch */ case   36:  		/* cmpwi CR6, R11, 13 */
		/* 821D604Ch case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 821D604Ch case   36:*/		return 0x821D6050;
		  /* 821D6050h */ case   37:  		/* bc 12, CR6_EQ, 240 */
		/* 821D6050h case   37:*/		if ( regs.CR[6].eq ) { return 0x821D6140;  }
		/* 821D6050h case   37:*/		return 0x821D6054;
		  /* 821D6054h */ case   38:  		/* cmpwi CR6, R11, 14 */
		/* 821D6054h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821D6054h case   38:*/		return 0x821D6058;
		  /* 821D6058h */ case   39:  		/* bc 12, CR6_EQ, 76 */
		/* 821D6058h case   39:*/		if ( regs.CR[6].eq ) { return 0x821D60A4;  }
		/* 821D6058h case   39:*/		return 0x821D605C;
		  /* 821D605Ch */ case   40:  		/* cmpwi CR6, R11, 15 */
		/* 821D605Ch case   40:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821D605Ch case   40:*/		return 0x821D6060;
		  /* 821D6060h */ case   41:  		/* bc 4, CR6_EQ, 60 */
		/* 821D6060h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821D609C;  }
		/* 821D6060h case   41:*/		return 0x821D6064;
		  /* 821D6064h */ case   42:  		/* mr R4, R25 */
		/* 821D6064h case   42:*/		regs.R4 = regs.R25;
		/* 821D6064h case   42:*/		return 0x821D6068;
		  /* 821D6068h */ case   43:  		/* mr R3, R19 */
		/* 821D6068h case   43:*/		regs.R3 = regs.R19;
		/* 821D6068h case   43:*/		return 0x821D606C;
		  /* 821D606Ch */ case   44:  		/* bl -101884 */
		/* 821D606Ch case   44:*/		regs.LR = 0x821D6070; return 0x821BD270;
		/* 821D606Ch case   44:*/		return 0x821D6070;
		  /* 821D6070h */ case   45:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6070h case   45:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6070h case   45:*/		return 0x821D6074;
		  /* 821D6074h */ case   46:  		/* bc 12, CR0_EQ, 332 */
		/* 821D6074h case   46:*/		if ( regs.CR[0].eq ) { return 0x821D61C0;  }
		/* 821D6074h case   46:*/		return 0x821D6078;
		  /* 821D6078h */ case   47:  		/* lwz R8, <#[R1 + 168]> */
		/* 821D6078h case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D6078h case   47:*/		return 0x821D607C;
		  /* 821D607Ch */ case   48:  		/* lwz R7, <#[R1 + 164]> */
		/* 821D607Ch case   48:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D607Ch case   48:*/		return 0x821D6080;
		  /* 821D6080h */ case   49:  		/* lwz R6, <#[R1 + 152]> */
		/* 821D6080h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000098) );
		/* 821D6080h case   49:*/		return 0x821D6084;
		  /* 821D6084h */ case   50:  		/* mr R10, R22 */
		/* 821D6084h case   50:*/		regs.R10 = regs.R22;
		/* 821D6084h case   50:*/		return 0x821D6088;
		  /* 821D6088h */ case   51:  		/* mr R9, R23 */
		/* 821D6088h case   51:*/		regs.R9 = regs.R23;
		/* 821D6088h case   51:*/		return 0x821D608C;
		  /* 821D608Ch */ case   52:  		/* mr R5, R25 */
		/* 821D608Ch case   52:*/		regs.R5 = regs.R25;
		/* 821D608Ch case   52:*/		return 0x821D6090;
		  /* 821D6090h */ case   53:  		/* mr R4, R16 */
		/* 821D6090h case   53:*/		regs.R4 = regs.R16;
		/* 821D6090h case   53:*/		return 0x821D6094;
		  /* 821D6094h */ case   54:  		/* mr R3, R24 */
		/* 821D6094h case   54:*/		regs.R3 = regs.R24;
		/* 821D6094h case   54:*/		return 0x821D6098;
		  /* 821D6098h */ case   55:  		/* bl -29672 */
		/* 821D6098h case   55:*/		regs.LR = 0x821D609C; return 0x821CECB0;
		/* 821D6098h case   55:*/		return 0x821D609C;
	}
	return 0x821D609C;
} // Block from 821D5FBCh-821D609Ch (56 instructions)

//////////////////////////////////////////////////////
// Block at 821D609Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D609C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D609C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D609C);
		  /* 821D609Ch */ case    0:  		/* addi R25, R25, 1 */
		/* 821D609Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821D609Ch case    0:*/		return 0x821D60A0;
		  /* 821D60A0h */ case    1:  		/* b -208 */
		/* 821D60A0h case    1:*/		return 0x821D5FD0;
		/* 821D60A0h case    1:*/		return 0x821D60A4;
	}
	return 0x821D60A4;
} // Block from 821D609Ch-821D60A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D60A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D60A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D60A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D60A4);
		  /* 821D60A4h */ case    0:  		/* mr R4, R25 */
		/* 821D60A4h case    0:*/		regs.R4 = regs.R25;
		/* 821D60A4h case    0:*/		return 0x821D60A8;
		  /* 821D60A8h */ case    1:  		/* mr R3, R19 */
		/* 821D60A8h case    1:*/		regs.R3 = regs.R19;
		/* 821D60A8h case    1:*/		return 0x821D60AC;
		  /* 821D60ACh */ case    2:  		/* bl -102028 */
		/* 821D60ACh case    2:*/		regs.LR = 0x821D60B0; return 0x821BD220;
		/* 821D60ACh case    2:*/		return 0x821D60B0;
		  /* 821D60B0h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D60B0h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D60B0h case    3:*/		return 0x821D60B4;
		  /* 821D60B4h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 821D60B4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D60C8;  }
		/* 821D60B4h case    4:*/		return 0x821D60B8;
		  /* 821D60B8h */ case    5:  		/* lwz R8, <#[R1 + 148]> */
		/* 821D60B8h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 821D60B8h case    5:*/		return 0x821D60BC;
		  /* 821D60BCh */ case    6:  		/* lwz R7, <#[R1 + 144]> */
		/* 821D60BCh case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 821D60BCh case    6:*/		return 0x821D60C0;
		  /* 821D60C0h */ case    7:  		/* lwz R6, <#[R1 + 140]> */
		/* 821D60C0h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D60C0h case    7:*/		return 0x821D60C4;
		  /* 821D60C4h */ case    8:  		/* b -64 */
		/* 821D60C4h case    8:*/		return 0x821D6084;
		/* 821D60C4h case    8:*/		return 0x821D60C8;
	}
	return 0x821D60C8;
} // Block from 821D60A4h-821D60C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D60C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D60C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D60C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D60C8);
		  /* 821D60C8h */ case    0:  		/* lwz R11, <#[R1 + 200]> */
		/* 821D60C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D60C8h case    0:*/		return 0x821D60CC;
		  /* 821D60CCh */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 821D60CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821D60CCh case    1:*/		return 0x821D60D0;
		  /* 821D60D0h */ case    2:  		/* bc 4, CR6_EQ, 240 */
		/* 821D60D0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D61C0;  }
		/* 821D60D0h case    2:*/		return 0x821D60D4;
		  /* 821D60D4h */ case    3:  		/* mr R3, R24 */
		/* 821D60D4h case    3:*/		regs.R3 = regs.R24;
		/* 821D60D4h case    3:*/		return 0x821D60D8;
		  /* 821D60D8h */ case    4:  		/* lwz R6, <#[R1 + 148]> */
		/* 821D60D8h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 821D60D8h case    4:*/		return 0x821D60DC;
		  /* 821D60DCh */ case    5:  		/* lwz R5, <#[R1 + 144]> */
		/* 821D60DCh case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 821D60DCh case    5:*/		return 0x821D60E0;
		  /* 821D60E0h */ case    6:  		/* lwz R4, <#[R1 + 140]> */
		/* 821D60E0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D60E0h case    6:*/		return 0x821D60E4;
		  /* 821D60E4h */ case    7:  		/* bl -384892 */
		/* 821D60E4h case    7:*/		regs.LR = 0x821D60E8; return 0x82178168;
		/* 821D60E4h case    7:*/		return 0x821D60E8;
		  /* 821D60E8h */ case    8:  		/* mr R31, R3 */
		/* 821D60E8h case    8:*/		regs.R31 = regs.R3;
		/* 821D60E8h case    8:*/		return 0x821D60EC;
		  /* 821D60ECh */ case    9:  		/* lwz R6, <#[R1 + 168]> */
		/* 821D60ECh case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D60ECh case    9:*/		return 0x821D60F0;
		  /* 821D60F0h */ case   10:  		/* mr R3, R24 */
		/* 821D60F0h case   10:*/		regs.R3 = regs.R24;
		/* 821D60F0h case   10:*/		return 0x821D60F4;
		  /* 821D60F4h */ case   11:  		/* lwz R5, <#[R1 + 164]> */
		/* 821D60F4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D60F4h case   11:*/		return 0x821D60F8;
		  /* 821D60F8h */ case   12:  		/* lwz R4, <#[R1 + 152]> */
		/* 821D60F8h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821D60F8h case   12:*/		return 0x821D60FC;
		  /* 821D60FCh */ case   13:  		/* bl -384916 */
		/* 821D60FCh case   13:*/		regs.LR = 0x821D6100; return 0x82178168;
		/* 821D60FCh case   13:*/		return 0x821D6100;
		  /* 821D6100h */ case   14:  		/* mr R30, R3 */
		/* 821D6100h case   14:*/		regs.R30 = regs.R3;
		/* 821D6100h case   14:*/		return 0x821D6104;
		  /* 821D6104h */ case   15:  		/* mr R3, R24 */
		/* 821D6104h case   15:*/		regs.R3 = regs.R24;
		/* 821D6104h case   15:*/		return 0x821D6108;
		  /* 821D6108h */ case   16:  		/* lwz R5, <#[R1 + 204]> */
		/* 821D6108h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D6108h case   16:*/		return 0x821D610C;
		  /* 821D610Ch */ case   17:  		/* lwz R4, <#[R1 + 156]> */
		/* 821D610Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D610Ch case   17:*/		return 0x821D6110;
		  /* 821D6110h */ case   18:  		/* bl -385024 */
		/* 821D6110h case   18:*/		regs.LR = 0x821D6114; return 0x82178110;
		/* 821D6110h case   18:*/		return 0x821D6114;
		  /* 821D6114h */ case   19:  		/* mr R6, R3 */
		/* 821D6114h case   19:*/		regs.R6 = regs.R3;
		/* 821D6114h case   19:*/		return 0x821D6118;
		  /* 821D6118h */ case   20:  		/* mr R5, R16 */
		/* 821D6118h case   20:*/		regs.R5 = regs.R16;
		/* 821D6118h case   20:*/		return 0x821D611C;
		  /* 821D611Ch */ case   21:  		/* li R4, 0 */
		/* 821D611Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D611Ch case   21:*/		return 0x821D6120;
		  /* 821D6120h */ case   22:  		/* mr R3, R24 */
		/* 821D6120h case   22:*/		regs.R3 = regs.R24;
		/* 821D6120h case   22:*/		return 0x821D6124;
		  /* 821D6124h */ case   23:  		/* mr R7, R30 */
		/* 821D6124h case   23:*/		regs.R7 = regs.R30;
		/* 821D6124h case   23:*/		return 0x821D6128;
		  /* 821D6128h */ case   24:  		/* mr R8, R31 */
		/* 821D6128h case   24:*/		regs.R8 = regs.R31;
		/* 821D6128h case   24:*/		return 0x821D612C;
		  /* 821D612Ch */ case   25:  		/* bl -228660 */
		/* 821D612Ch case   25:*/		regs.LR = 0x821D6130; return 0x8219E3F8;
		/* 821D612Ch case   25:*/		return 0x821D6130;
		  /* 821D6130h */ case   26:  		/* mr R6, R3 */
		/* 821D6130h case   26:*/		regs.R6 = regs.R3;
		/* 821D6130h case   26:*/		return 0x821D6134;
		  /* 821D6134h */ case   27:  		/* li R8, 0 */
		/* 821D6134h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6134h case   27:*/		return 0x821D6138;
		  /* 821D6138h */ case   28:  		/* li R7, 0 */
		/* 821D6138h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D6138h case   28:*/		return 0x821D613C;
		  /* 821D613Ch */ case   29:  		/* b -184 */
		/* 821D613Ch case   29:*/		return 0x821D6084;
		/* 821D613Ch case   29:*/		return 0x821D6140;
	}
	return 0x821D6140;
} // Block from 821D60C8h-821D6140h (30 instructions)

