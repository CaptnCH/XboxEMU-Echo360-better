#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82155FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155FA0);
		  /* 82155FA0h */ case    0:  		/* stwu R11, <#[R31 + 4]> */
		/* 82155FA0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155FA0h case    0:*/		return 0x82155FA4;
	}
	return 0x82155FA4;
} // Block from 82155FA0h-82155FA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155FA4);
		  /* 82155FA4h */ case    0:  		/* rlwimi R27, R19, 8, 23, 23 */
		/* 82155FA4h case    0:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R27,regs.R19);
		/* 82155FA4h case    0:*/		return 0x82155FA8;
		  /* 82155FA8h */ case    1:  		/* addi R11, R31, 4 */
		/* 82155FA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82155FA8h case    1:*/		return 0x82155FAC;
		  /* 82155FACh */ case    2:  		/* rlwinm R10, R20, 16, 0, 15 */
		/* 82155FACh case    2:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R20);
		/* 82155FACh case    2:*/		return 0x82155FB0;
		  /* 82155FB0h */ case    3:  		/* rlwinm R9, R27, 0, 23, 31 */
		/* 82155FB0h case    3:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R9,regs.R27);
		/* 82155FB0h case    3:*/		return 0x82155FB4;
		  /* 82155FB4h */ case    4:  		/* or R31, R10, R23 */
		/* 82155FB4h case    4:*/		cpu::op::or<0>(regs,&regs.R31,regs.R10,regs.R23);
		/* 82155FB4h case    4:*/		return 0x82155FB8;
		  /* 82155FB8h */ case    5:  		/* rlwimi R26, R9, 16, 0, 15 */
		/* 82155FB8h case    5:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R26,regs.R9);
		/* 82155FB8h case    5:*/		return 0x82155FBC;
		  /* 82155FBCh */ case    6:  		/* stw R31, <#[R11]> */
		/* 82155FBCh case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82155FBCh case    6:*/		return 0x82155FC0;
		  /* 82155FC0h */ case    7:  		/* addi R5, R1, 80 */
		/* 82155FC0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82155FC0h case    7:*/		return 0x82155FC4;
		  /* 82155FC4h */ case    8:  		/* stwu R26, <#[R11 + 4]> */
		/* 82155FC4h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155FC4h case    8:*/		return 0x82155FC8;
		  /* 82155FC8h */ case    9:  		/* mr R4, R21 */
		/* 82155FC8h case    9:*/		regs.R4 = regs.R21;
		/* 82155FC8h case    9:*/		return 0x82155FCC;
		  /* 82155FCCh */ case   10:  		/* mr R3, R22 */
		/* 82155FCCh case   10:*/		regs.R3 = regs.R22;
		/* 82155FCCh case   10:*/		return 0x82155FD0;
		  /* 82155FD0h */ case   11:  		/* addi R11, R11, 4 */
		/* 82155FD0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155FD0h case   11:*/		return 0x82155FD4;
		  /* 82155FD4h */ case   12:  		/* stw R11, <#[R1 + 80]> */
		/* 82155FD4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155FD4h case   12:*/		return 0x82155FD8;
		  /* 82155FD8h */ case   13:  		/* bl -10808 */
		/* 82155FD8h case   13:*/		regs.LR = 0x82155FDC; return 0x821535A0;
		/* 82155FD8h case   13:*/		return 0x82155FDC;
		  /* 82155FDCh */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155FDCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155FDCh case   14:*/		return 0x82155FE0;
		  /* 82155FE0h */ case   15:  		/* stw R31, <#[R11]> */
		/* 82155FE0h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82155FE0h case   15:*/		return 0x82155FE4;
	}
	return 0x82155FE4;
} // Block from 82155FA4h-82155FE4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82155FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155FE4);
		  /* 82155FE4h */ case    0:  		/* addi R11, R11, 4 */
		/* 82155FE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155FE4h case    0:*/		return 0x82155FE8;
	}
	return 0x82155FE8;
} // Block from 82155FE4h-82155FE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155FE8);
		  /* 82155FE8h */ case    0:  		/* stw R11, <#[R16]> */
		/* 82155FE8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 82155FE8h case    0:*/		return 0x82155FEC;
		  /* 82155FECh */ case    1:  		/* stw R18, <#[R17]> */
		/* 82155FECh case    1:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R17 + 0x00000000) );
		/* 82155FECh case    1:*/		return 0x82155FF0;
		  /* 82155FF0h */ case    2:  		/* addi R1, R1, 224 */
		/* 82155FF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 82155FF0h case    2:*/		return 0x82155FF4;
		  /* 82155FF4h */ case    3:  		/* b -806268 */
		/* 82155FF4h case    3:*/		return 0x82091278;
		/* 82155FF4h case    3:*/		return 0x82155FF8;
	}
	return 0x82155FF8;
} // Block from 82155FE8h-82155FF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82155FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155FF8);
		  /* 82155FF8h */ case    0:  		/* mfspr R12, LR */
		/* 82155FF8h case    0:*/		regs.R12 = regs.LR;
		/* 82155FF8h case    0:*/		return 0x82155FFC;
		  /* 82155FFCh */ case    1:  		/* bl -806340 */
		/* 82155FFCh case    1:*/		regs.LR = 0x82156000; return 0x82091238;
		/* 82155FFCh case    1:*/		return 0x82156000;
		  /* 82156000h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82156000h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82156000h case    2:*/		return 0x82156004;
		  /* 82156004h */ case    3:  		/* lwz R11, <#[R6 + 4]> */
		/* 82156004h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 82156004h case    3:*/		return 0x82156008;
		  /* 82156008h */ case    4:  		/* mr R22, R3 */
		/* 82156008h case    4:*/		regs.R22 = regs.R3;
		/* 82156008h case    4:*/		return 0x8215600C;
		  /* 8215600Ch */ case    5:  		/* mr R27, R6 */
		/* 8215600Ch case    5:*/		regs.R27 = regs.R6;
		/* 8215600Ch case    5:*/		return 0x82156010;
		  /* 82156010h */ case    6:  		/* mr R21, R7 */
		/* 82156010h case    6:*/		regs.R21 = regs.R7;
		/* 82156010h case    6:*/		return 0x82156014;
		  /* 82156014h */ case    7:  		/* cmpwi CR6, R11, 1 */
		/* 82156014h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82156014h case    7:*/		return 0x82156018;
		  /* 82156018h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82156018h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82156024;  }
		/* 82156018h case    8:*/		return 0x8215601C;
		  /* 8215601Ch */ case    9:  		/* li R20, 0 */
		/* 8215601Ch case    9:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8215601Ch case    9:*/		return 0x82156020;
		  /* 82156020h */ case   10:  		/* b 16 */
		/* 82156020h case   10:*/		return 0x82156030;
		/* 82156020h case   10:*/		return 0x82156024;
	}
	return 0x82156024;
} // Block from 82155FF8h-82156024h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82156024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156024);
		  /* 82156024h */ case    0:  		/* addi R11, R11, -2 */
		/* 82156024h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82156024h case    0:*/		return 0x82156028;
		  /* 82156028h */ case    1:  		/* cntlzw R11, R11 */
		/* 82156028h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82156028h case    1:*/		return 0x8215602C;
		  /* 8215602Ch */ case    2:  		/* rlwinm R20, R11, 27, 31, 31 */
		/* 8215602Ch case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R20,regs.R11);
		/* 8215602Ch case    2:*/		return 0x82156030;
	}
	return 0x82156030;
} // Block from 82156024h-82156030h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156030);
		  /* 82156030h */ case    0:  		/* lis R11, -1 */
		/* 82156030h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156030h case    0:*/		return 0x82156034;
		  /* 82156034h */ case    1:  		/* ori R11, R11, 258 */
		/* 82156034h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x102);
		/* 82156034h case    1:*/		return 0x82156038;
		  /* 82156038h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82156038h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82156038h case    2:*/		return 0x8215603C;
		  /* 8215603Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8215603Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82156054;  }
		/* 8215603Ch case    3:*/		return 0x82156040;
		  /* 82156040h */ case    4:  		/* lis R11, -1 */
		/* 82156040h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156040h case    4:*/		return 0x82156044;
		  /* 82156044h */ case    5:  		/* ori R11, R11, 259 */
		/* 82156044h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x103);
		/* 82156044h case    5:*/		return 0x82156048;
		  /* 82156048h */ case    6:  		/* cmplw CR6, R4, R11 */
		/* 82156048h case    6:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82156048h case    6:*/		return 0x8215604C;
		  /* 8215604Ch */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 8215604Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82156054;  }
		/* 8215604Ch case    7:*/		return 0x82156050;
		  /* 82156050h */ case    8:  		/* bl 1118736 */
		/* 82156050h case    8:*/		regs.LR = 0x82156054; return 0x82267260;
		/* 82156050h case    8:*/		return 0x82156054;
	}
	return 0x82156054;
} // Block from 82156030h-82156054h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156054);
		  /* 82156054h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 82156054h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82156054h case    0:*/		return 0x82156058;
		  /* 82156058h */ case    1:  		/* lwz R28, <#[R21]> */
		/* 82156058h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R21 + 0x00000000) );
		/* 82156058h case    1:*/		return 0x8215605C;
		  /* 8215605Ch */ case    2:  		/* lhz R25, <#[R11 + 2]> */
		/* 8215605Ch case    2:*/		cpu::mem::load16z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000002) );
		/* 8215605Ch case    2:*/		return 0x82156060;
		  /* 82156060h */ case    3:  		/* lwzu R31, <#[R11 + 4]> */
		/* 82156060h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82156060h case    3:*/		return 0x82156064;
		  /* 82156064h */ case    4:  		/* mr R10, R31 */
		/* 82156064h case    4:*/		regs.R10 = regs.R31;
		/* 82156064h case    4:*/		return 0x82156068;
		  /* 82156068h */ case    5:  		/* rlwinm R30, R31, 0, 21, 31 */
		/* 82156068h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R30,regs.R31);
		/* 82156068h case    5:*/		return 0x8215606C;
		  /* 8215606Ch */ case    6:  		/* rlwimi R10, R31, 12, 21, 23 */
		/* 8215606Ch case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R31);
		/* 8215606Ch case    6:*/		return 0x82156070;
		  /* 82156070h */ case    7:  		/* lwzu R24, <#[R11 + 4]> */
		/* 82156070h case    7:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82156070h case    7:*/		return 0x82156074;
		  /* 82156074h */ case    8:  		/* rlwinm R29, R10, 24, 27, 31 */
		/* 82156074h case    8:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R29,regs.R10);
		/* 82156074h case    8:*/		return 0x82156078;
		  /* 82156078h */ case    9:  		/* addi R23, R11, 4 */
		/* 82156078h case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x4);
		/* 82156078h case    9:*/		return 0x8215607C;
		  /* 8215607Ch */ case   10:  		/* cmplwi CR6, R29, 3 */
		/* 8215607Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 8215607Ch case   10:*/		return 0x82156080;
		  /* 82156080h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 82156080h case   11:*/		if ( regs.CR[6].eq ) { return 0x82156088;  }
		/* 82156080h case   11:*/		return 0x82156084;
		  /* 82156084h */ case   12:  		/* bl 1118684 */
		/* 82156084h case   12:*/		regs.LR = 0x82156088; return 0x82267260;
		/* 82156084h case   12:*/		return 0x82156088;
	}
	return 0x82156088;
} // Block from 82156054h-82156088h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82156088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156088);
		  /* 82156088h */ case    0:  		/* li R11, 34 */
		/* 82156088h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82156088h case    0:*/		return 0x8215608C;
		  /* 8215608Ch */ case    1:  		/* cmplwi CR6, R25, 85 */
		/* 8215608Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000055);
		/* 8215608Ch case    1:*/		return 0x82156090;
		  /* 82156090h */ case    2:  		/* stw R11, <#[R28]> */
		/* 82156090h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82156090h case    2:*/		return 0x82156094;
		  /* 82156094h */ case    3:  		/* addi R28, R28, 4 */
		/* 82156094h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82156094h case    3:*/		return 0x82156098;
		  /* 82156098h */ case    4:  		/* stw R28, <#[R1 + 80]> */
		/* 82156098h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 82156098h case    4:*/		return 0x8215609C;
		  /* 8215609Ch */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 8215609Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821560BC;  }
		/* 8215609Ch case    5:*/		return 0x821560A0;
		  /* 821560A0h */ case    6:  		/* addi R5, R1, 80 */
		/* 821560A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821560A0h case    6:*/		return 0x821560A4;
		  /* 821560A4h */ case    7:  		/* mr R4, R27 */
		/* 821560A4h case    7:*/		regs.R4 = regs.R27;
		/* 821560A4h case    7:*/		return 0x821560A8;
		  /* 821560A8h */ case    8:  		/* mr R3, R31 */
		/* 821560A8h case    8:*/		regs.R3 = regs.R31;
		/* 821560A8h case    8:*/		return 0x821560AC;
		  /* 821560ACh */ case    9:  		/* bl -11020 */
		/* 821560ACh case    9:*/		regs.LR = 0x821560B0; return 0x821535A0;
		/* 821560ACh case    9:*/		return 0x821560B0;
		  /* 821560B0h */ case   10:  		/* lwz R29, <#[R1 + 80]> */
		/* 821560B0h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821560B0h case   10:*/		return 0x821560B4;
		  /* 821560B4h */ case   11:  		/* lwz R26, <#[R1 + 80]> */
		/* 821560B4h case   11:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 821560B4h case   11:*/		return 0x821560B8;
		  /* 821560B8h */ case   12:  		/* b 80 */
		/* 821560B8h case   12:*/		return 0x82156108;
		/* 821560B8h case   12:*/		return 0x821560BC;
	}
	return 0x821560BC;
} // Block from 82156088h-821560BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821560BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821560BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821560BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821560BC);
		  /* 821560BCh */ case    0:  		/* addi R6, R1, 80 */
		/* 821560BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821560BCh case    0:*/		return 0x821560C0;
		  /* 821560C0h */ case    1:  		/* mr R5, R27 */
		/* 821560C0h case    1:*/		regs.R5 = regs.R27;
		/* 821560C0h case    1:*/		return 0x821560C4;
		  /* 821560C4h */ case    2:  		/* mr R4, R30 */
		/* 821560C4h case    2:*/		regs.R4 = regs.R30;
		/* 821560C4h case    2:*/		return 0x821560C8;
		  /* 821560C8h */ case    3:  		/* mr R3, R29 */
		/* 821560C8h case    3:*/		regs.R3 = regs.R29;
		/* 821560C8h case    3:*/		return 0x821560CC;
		  /* 821560CCh */ case    4:  		/* bl -12764 */
		/* 821560CCh case    4:*/		regs.LR = 0x821560D0; return 0x82152EF0;
		/* 821560CCh case    4:*/		return 0x821560D0;
		  /* 821560D0h */ case    5:  		/* lwz R26, <#[R1 + 80]> */
		/* 821560D0h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 821560D0h case    5:*/		return 0x821560D4;
		  /* 821560D4h */ case    6:  		/* mr R29, R3 */
		/* 821560D4h case    6:*/		regs.R29 = regs.R3;
		/* 821560D4h case    6:*/		return 0x821560D8;
		  /* 821560D8h */ case    7:  		/* cmpwi CR6, R26, 4 */
		/* 821560D8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000004);
		/* 821560D8h case    7:*/		return 0x821560DC;
		  /* 821560DCh */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 821560DCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821560E4;  }
		/* 821560DCh case    8:*/		return 0x821560E0;
		  /* 821560E0h */ case    9:  		/* bl 1118592 */
		/* 821560E0h case    9:*/		regs.LR = 0x821560E4; return 0x82267260;
		/* 821560E0h case    9:*/		return 0x821560E4;
	}
	return 0x821560E4;
} // Block from 821560BCh-821560E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821560E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821560E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821560E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821560E4);
		  /* 821560E4h */ case    0:  		/* lis R11, 64 */
		/* 821560E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x40);
		/* 821560E4h case    0:*/		return 0x821560E8;
		  /* 821560E8h */ case    1:  		/* rlwinm R10, R29, 0, 16, 31 */
		/* 821560E8h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R29);
		/* 821560E8h case    1:*/		return 0x821560EC;
		  /* 821560ECh */ case    2:  		/* rlwimi R11, R26, 16, 10, 15 */
		/* 821560ECh case    2:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R11,regs.R26);
		/* 821560ECh case    2:*/		return 0x821560F0;
		  /* 821560F0h */ case    3:  		/* li R9, 41 */
		/* 821560F0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x29);
		/* 821560F0h case    3:*/		return 0x821560F4;
		  /* 821560F4h */ case    4:  		/* or R11, R11, R10 */
		/* 821560F4h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821560F4h case    4:*/		return 0x821560F8;
		  /* 821560F8h */ case    5:  		/* stw R11, <#[R28]> */
		/* 821560F8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821560F8h case    5:*/		return 0x821560FC;
		  /* 821560FCh */ case    6:  		/* stwu R9, <#[R28 + 4]> */
		/* 821560FCh case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 821560FCh case    6:*/		return 0x82156100;
		  /* 82156100h */ case    7:  		/* addi R11, R28, 4 */
		/* 82156100h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x4);
		/* 82156100h case    7:*/		return 0x82156104;
		  /* 82156104h */ case    8:  		/* stw R11, <#[R1 + 80]> */
		/* 82156104h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82156104h case    8:*/		return 0x82156108;
	}
	return 0x82156108;
} // Block from 821560E4h-82156108h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156108);
		  /* 82156108h */ case    0:  		/* mr R11, R24 */
		/* 82156108h case    0:*/		regs.R11 = regs.R24;
		/* 82156108h case    0:*/		return 0x8215610C;
		  /* 8215610Ch */ case    1:  		/* rlwimi R11, R24, 12, 21, 23 */
		/* 8215610Ch case    1:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R24);
		/* 8215610Ch case    1:*/		return 0x82156110;
		  /* 82156110h */ case    2:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 82156110h case    2:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82156110h case    2:*/		return 0x82156114;
		  /* 82156114h */ case    3:  		/* cmplwi CR6, R11, 768 */
		/* 82156114h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 82156114h case    3:*/		return 0x82156118;
		  /* 82156118h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82156118h case    4:*/		if ( regs.CR[6].eq ) { return 0x82156120;  }
		/* 82156118h case    4:*/		return 0x8215611C;
		  /* 8215611Ch */ case    5:  		/* bl 1118532 */
		/* 8215611Ch case    5:*/		regs.LR = 0x82156120; return 0x82267260;
		/* 8215611Ch case    5:*/		return 0x82156120;
	}
	return 0x82156120;
} // Block from 82156108h-82156120h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82156120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156120);
		  /* 82156120h */ case    0:  		/* addi R7, R1, 80 */
		/* 82156120h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82156120h case    0:*/		return 0x82156124;
		  /* 82156124h */ case    1:  		/* mr R6, R27 */
		/* 82156124h case    1:*/		regs.R6 = regs.R27;
		/* 82156124h case    1:*/		return 0x82156128;
		  /* 82156128h */ case    2:  		/* li R5, 0 */
		/* 82156128h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82156128h case    2:*/		return 0x8215612C;
		  /* 8215612Ch */ case    3:  		/* li R4, 0 */
		/* 8215612Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8215612Ch case    3:*/		return 0x82156130;
		  /* 82156130h */ case    4:  		/* mr R3, R24 */
		/* 82156130h case    4:*/		regs.R3 = regs.R24;
		/* 82156130h case    4:*/		return 0x82156134;
		  /* 82156134h */ case    5:  		/* bl -10868 */
		/* 82156134h case    5:*/		regs.LR = 0x82156138; return 0x821536C0;
		/* 82156134h case    5:*/		return 0x82156138;
		  /* 82156138h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 82156138h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82156138h case    6:*/		return 0x8215613C;
		  /* 8215613Ch */ case    7:  		/* mr R10, R30 */
		/* 8215613Ch case    7:*/		regs.R10 = regs.R30;
		/* 8215613Ch case    7:*/		return 0x82156140;
		  /* 82156140h */ case    8:  		/* li R9, 17 */
		/* 82156140h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 82156140h case    8:*/		return 0x82156144;
		  /* 82156144h */ case    9:  		/* cmplwi CR6, R25, 83 */
		/* 82156144h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000053);
		/* 82156144h case    9:*/		return 0x82156148;
		  /* 82156148h */ case   10:  		/* rlwimi R10, R9, 16, 0, 15 */
		/* 82156148h case   10:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R9);
		/* 82156148h case   10:*/		return 0x8215614C;
		  /* 8215614Ch */ case   11:  		/* stw R10, <#[R11]> */
		/* 8215614Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8215614Ch case   11:*/		return 0x82156150;
		  /* 82156150h */ case   12:  		/* addi R11, R11, 4 */
		/* 82156150h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82156150h case   12:*/		return 0x82156154;
		  /* 82156154h */ case   13:  		/* bc 4, CR6_EQ, 68 */
		/* 82156154h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82156198;  }
		/* 82156154h case   13:*/		return 0x82156158;
		  /* 82156158h */ case   14:  		/* rlwimi R30, R20, 8, 23, 23 */
		/* 82156158h case   14:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R30,regs.R20);
		/* 82156158h case   14:*/		return 0x8215615C;
		  /* 8215615Ch */ case   15:  		/* li R10, 93 */
		/* 8215615Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x5D);
		/* 8215615Ch case   15:*/		return 0x82156160;
		  /* 82156160h */ case   16:  		/* rlwinm R9, R30, 0, 23, 31 */
		/* 82156160h case   16:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R9,regs.R30);
		/* 82156160h case   16:*/		return 0x82156164;
		  /* 82156164h */ case   17:  		/* addi R8, R11, 4 */
		/* 82156164h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 82156164h case   17:*/		return 0x82156168;
		  /* 82156168h */ case   18:  		/* rlwimi R10, R9, 16, 0, 15 */
		/* 82156168h case   18:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R9);
		/* 82156168h case   18:*/		return 0x8215616C;
		  /* 8215616Ch */ case   19:  		/* stw R8, <#[R1 + 80]> */
		/* 8215616Ch case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8215616Ch case   19:*/		return 0x82156170;
		  /* 82156170h */ case   20:  		/* addi R5, R1, 80 */
		/* 82156170h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82156170h case   20:*/		return 0x82156174;
		  /* 82156174h */ case   21:  		/* stw R10, <#[R11]> */
		/* 82156174h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82156174h case   21:*/		return 0x82156178;
		  /* 82156178h */ case   22:  		/* mr R4, R27 */
		/* 82156178h case   22:*/		regs.R4 = regs.R27;
		/* 82156178h case   22:*/		return 0x8215617C;
		  /* 8215617Ch */ case   23:  		/* mr R3, R31 */
		/* 8215617Ch case   23:*/		regs.R3 = regs.R31;
		/* 8215617Ch case   23:*/		return 0x82156180;
		  /* 82156180h */ case   24:  		/* bl -11232 */
		/* 82156180h case   24:*/		regs.LR = 0x82156184; return 0x821535A0;
		/* 82156180h case   24:*/		return 0x82156184;
		  /* 82156184h */ case   25:  		/* lwz R11, <#[R1 + 80]> */
		/* 82156184h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82156184h case   25:*/		return 0x82156188;
		  /* 82156188h */ case   26:  		/* rlwimi R29, R26, 16, 10, 15 */
		/* 82156188h case   26:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R29,regs.R26);
		/* 82156188h case   26:*/		return 0x8215618C;
		  /* 8215618Ch */ case   27:  		/* rlwinm R10, R29, 0, 10, 31 */
		/* 8215618Ch case   27:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R29);
		/* 8215618Ch case   27:*/		return 0x82156190;
		  /* 82156190h */ case   28:  		/* stw R10, <#[R11]> */
		/* 82156190h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82156190h case   28:*/		return 0x82156194;
		  /* 82156194h */ case   29:  		/* addi R11, R11, 4 */
		/* 82156194h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82156194h case   29:*/		return 0x82156198;
	}
	return 0x82156198;
} // Block from 82156120h-82156198h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82156198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156198);
		  /* 82156198h */ case    0:  		/* stw R11, <#[R21]> */
		/* 82156198h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 82156198h case    0:*/		return 0x8215619C;
		  /* 8215619Ch */ case    1:  		/* stw R23, <#[R22]> */
		/* 8215619Ch case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R22 + 0x00000000) );
		/* 8215619Ch case    1:*/		return 0x821561A0;
		  /* 821561A0h */ case    2:  		/* addi R1, R1, 192 */
		/* 821561A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821561A0h case    2:*/		return 0x821561A4;
		  /* 821561A4h */ case    3:  		/* b -806684 */
		/* 821561A4h case    3:*/		return 0x82091288;
		/* 821561A4h case    3:*/		return 0x821561A8;
	}
	return 0x821561A8;
} // Block from 82156198h-821561A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821561A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821561A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821561A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821561A8);
		  /* 821561A8h */ case    0:  		/* mfspr R12, LR */
		/* 821561A8h case    0:*/		regs.R12 = regs.LR;
		/* 821561A8h case    0:*/		return 0x821561AC;
		  /* 821561ACh */ case    1:  		/* bl -806792 */
		/* 821561ACh case    1:*/		regs.LR = 0x821561B0; return 0x82091224;
		/* 821561ACh case    1:*/		return 0x821561B0;
		  /* 821561B0h */ case    2:  		/* lis R9, -32215 */
		/* 821561B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8229);
		/* 821561B0h case    2:*/		return 0x821561B4;
		  /* 821561B4h */ case    3:  		/* lis R10, -32235 */
		/* 821561B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 821561B4h case    3:*/		return 0x821561B8;
		  /* 821561B8h */ case    4:  		/* addi R15, R9, -27976 */
		/* 821561B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R9,0xFFFF92B8);
		/* 821561B8h case    4:*/		return 0x821561BC;
		  /* 821561BCh */ case    5:  		/* addi R10, R10, 12520 */
		/* 821561BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30E8);
		/* 821561BCh case    5:*/		return 0x821561C0;
		  /* 821561C0h */ case    6:  		/* li R11, 75 */
		/* 821561C0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x4B);
		/* 821561C0h case    6:*/		return 0x821561C4;
		  /* 821561C4h */ case    7:  		/* lis R27, -32235 */
		/* 821561C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8215);
		/* 821561C4h case    7:*/		return 0x821561C8;
		  /* 821561C8h */ case    8:  		/* stw R11, <#[R9 - 27976]> */
		/* 821561C8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFF92B8) );
		/* 821561C8h case    8:*/		return 0x821561CC;
		  /* 821561CCh */ case    9:  		/* li R9, 71 */
		/* 821561CCh case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 821561CCh case    9:*/		return 0x821561D0;
		  /* 821561D0h */ case   10:  		/* stw R10, <#[R15 + 4]> */
		/* 821561D0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000004) );
		/* 821561D0h case   10:*/		return 0x821561D4;
		  /* 821561D4h */ case   11:  		/* addi R11, R27, 15424 */
		/* 821561D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x3C40);
		/* 821561D4h case   11:*/		return 0x821561D8;
	}
	return 0x821561D8;
} // Block from 821561A8h-821561D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821561D8h
// Function '?TEXREG2XXConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821561D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821561D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821561D8);
		  /* 821561D8h */ case    0:  		/* li R10, 3 */
		/* 821561D8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821561D8h case    0:*/		return 0x821561DC;
		  /* 821561DCh */ case    1:  		/* stw R9, <#[R15 + 8]> */
		/* 821561DCh case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000008) );
		/* 821561DCh case    1:*/		return 0x821561E0;
		  /* 821561E0h */ case    2:  		/* lis R28, -32235 */
		/* 821561E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8215);
		/* 821561E0h case    2:*/		return 0x821561E4;
		  /* 821561E4h */ case    3:  		/* stw R11, <#[R15 + 12]> */
		/* 821561E4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 821561E4h case    3:*/		return 0x821561E8;
		  /* 821561E8h */ case    4:  		/* lis R29, -32235 */
		/* 821561E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 821561E8h case    4:*/		return 0x821561EC;
		  /* 821561ECh */ case    5:  		/* stw R10, <#[R15 + 16]> */
		/* 821561ECh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000010) );
		/* 821561ECh case    5:*/		return 0x821561F0;
		  /* 821561F0h */ case    6:  		/* addi R9, R28, 15424 */
		/* 821561F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x3C40);
		/* 821561F0h case    6:*/		return 0x821561F4;
		  /* 821561F4h */ case    7:  		/* addi R10, R29, 15424 */
		/* 821561F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x3C40);
		/* 821561F4h case    7:*/		return 0x821561F8;
		  /* 821561F8h */ case    8:  		/* li R11, 91 */
		/* 821561F8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x5B);
		/* 821561F8h case    8:*/		return 0x821561FC;
		  /* 821561FCh */ case    9:  		/* stw R9, <#[R15 + 20]> */
		/* 821561FCh case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000014) );
		/* 821561FCh case    9:*/		return 0x82156200;
		  /* 82156200h */ case   10:  		/* lis R30, -32235 */
		/* 82156200h case   10:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 82156200h case   10:*/		return 0x82156204;
		  /* 82156204h */ case   11:  		/* stw R10, <#[R15 + 28]> */
		/* 82156204h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000001C) );
		/* 82156204h case   11:*/		return 0x82156208;
		  /* 82156208h */ case   12:  		/* stw R11, <#[R15 + 24]> */
		/* 82156208h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000018) );
		/* 82156208h case   12:*/		return 0x8215620C;
		  /* 8215620Ch */ case   13:  		/* li R9, 64 */
		/* 8215620Ch case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 8215620Ch case   13:*/		return 0x82156210;
		  /* 82156210h */ case   14:  		/* addi R11, R30, 15424 */
		/* 82156210h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3C40);
		/* 82156210h case   14:*/		return 0x82156214;
		  /* 82156214h */ case   15:  		/* li R10, 73 */
		/* 82156214h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x49);
		/* 82156214h case   15:*/		return 0x82156218;
		  /* 82156218h */ case   16:  		/* stw R9, <#[R15 + 32]> */
		/* 82156218h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000020) );
		/* 82156218h case   16:*/		return 0x8215621C;
		  /* 8215621Ch */ case   17:  		/* lis R31, -32235 */
		/* 8215621Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 8215621Ch case   17:*/		return 0x82156220;
		  /* 82156220h */ case   18:  		/* stw R11, <#[R15 + 36]> */
		/* 82156220h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000024) );
		/* 82156220h case   18:*/		return 0x82156224;
		  /* 82156224h */ case   19:  		/* lis R3, -32235 */
		/* 82156224h case   19:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 82156224h case   19:*/		return 0x82156228;
		  /* 82156228h */ case   20:  		/* stw R10, <#[R15 + 40]> */
		/* 82156228h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000028) );
		/* 82156228h case   20:*/		return 0x8215622C;
		  /* 8215622Ch */ case   21:  		/* addi R9, R31, 15424 */
		/* 8215622Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x3C40);
		/* 8215622Ch case   21:*/		return 0x82156230;
		  /* 82156230h */ case   22:  		/* addi R10, R3, 15424 */
		/* 82156230h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x3C40);
		/* 82156230h case   22:*/		return 0x82156234;
		  /* 82156234h */ case   23:  		/* li R11, 81 */
		/* 82156234h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x51);
		/* 82156234h case   23:*/		return 0x82156238;
		  /* 82156238h */ case   24:  		/* stw R9, <#[R15 + 44]> */
		/* 82156238h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000002C) );
		/* 82156238h case   24:*/		return 0x8215623C;
		  /* 8215623Ch */ case   25:  		/* lis R4, -32235 */
		/* 8215623Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8215);
		/* 8215623Ch case   25:*/		return 0x82156240;
		  /* 82156240h */ case   26:  		/* stw R10, <#[R15 + 52]> */
		/* 82156240h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000034) );
		/* 82156240h case   26:*/		return 0x82156244;
		  /* 82156244h */ case   27:  		/* stw R11, <#[R15 + 48]> */
		/* 82156244h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000030) );
		/* 82156244h case   27:*/		return 0x82156248;
		  /* 82156248h */ case   28:  		/* li R9, 85 */
		/* 82156248h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x55);
		/* 82156248h case   28:*/		return 0x8215624C;
		  /* 8215624Ch */ case   29:  		/* addi R11, R4, 15424 */
		/* 8215624Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x3C40);
		/* 8215624Ch case   29:*/		return 0x82156250;
		  /* 82156250h */ case   30:  		/* li R10, 34 */
		/* 82156250h case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82156250h case   30:*/		return 0x82156254;
		  /* 82156254h */ case   31:  		/* stw R9, <#[R15 + 56]> */
		/* 82156254h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000038) );
		/* 82156254h case   31:*/		return 0x82156258;
		  /* 82156258h */ case   32:  		/* lis R5, -32235 */
		/* 82156258h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 82156258h case   32:*/		return 0x8215625C;
		  /* 8215625Ch */ case   33:  		/* stw R11, <#[R15 + 60]> */
		/* 8215625Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000003C) );
		/* 8215625Ch case   33:*/		return 0x82156260;
		  /* 82156260h */ case   34:  		/* lis R6, -32235 */
		/* 82156260h case   34:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8215);
		/* 82156260h case   34:*/		return 0x82156264;
		  /* 82156264h */ case   35:  		/* stw R10, <#[R15 + 64]> */
		/* 82156264h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000040) );
		/* 82156264h case   35:*/		return 0x82156268;
		  /* 82156268h */ case   36:  		/* addi R9, R5, 15424 */
		/* 82156268h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0x3C40);
		/* 82156268h case   36:*/		return 0x8215626C;
		  /* 8215626Ch */ case   37:  		/* addi R10, R6, 15424 */
		/* 8215626Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x3C40);
		/* 8215626Ch case   37:*/		return 0x82156270;
		  /* 82156270h */ case   38:  		/* li R11, 35 */
		/* 82156270h case   38:*/		cpu::op::li<0>(regs,&regs.R11,0x23);
		/* 82156270h case   38:*/		return 0x82156274;
		  /* 82156274h */ case   39:  		/* stw R9, <#[R15 + 68]> */
		/* 82156274h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000044) );
		/* 82156274h case   39:*/		return 0x82156278;
		  /* 82156278h */ case   40:  		/* lis R7, -32235 */
		/* 82156278h case   40:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 82156278h case   40:*/		return 0x8215627C;
		  /* 8215627Ch */ case   41:  		/* stw R10, <#[R15 + 76]> */
		/* 8215627Ch case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000004C) );
		/* 8215627Ch case   41:*/		return 0x82156280;
		  /* 82156280h */ case   42:  		/* stw R11, <#[R15 + 72]> */
		/* 82156280h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000048) );
		/* 82156280h case   42:*/		return 0x82156284;
		  /* 82156284h */ case   43:  		/* li R9, 68 */
		/* 82156284h case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x44);
		/* 82156284h case   43:*/		return 0x82156288;
		  /* 82156288h */ case   44:  		/* addi R11, R7, 15424 */
		/* 82156288h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x3C40);
		/* 82156288h case   44:*/		return 0x8215628C;
		  /* 8215628Ch */ case   45:  		/* li R10, 65 */
		/* 8215628Ch case   45:*/		cpu::op::li<0>(regs,&regs.R10,0x41);
		/* 8215628Ch case   45:*/		return 0x82156290;
		  /* 82156290h */ case   46:  		/* stw R9, <#[R15 + 80]> */
		/* 82156290h case   46:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000050) );
		/* 82156290h case   46:*/		return 0x82156294;
		  /* 82156294h */ case   47:  		/* lis R8, -32235 */
		/* 82156294h case   47:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 82156294h case   47:*/		return 0x82156298;
		  /* 82156298h */ case   48:  		/* stw R11, <#[R15 + 84]> */
		/* 82156298h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000054) );
		/* 82156298h case   48:*/		return 0x8215629C;
		  /* 8215629Ch */ case   49:  		/* lis R23, -32235 */
		/* 8215629Ch case   49:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8215);
		/* 8215629Ch case   49:*/		return 0x821562A0;
		  /* 821562A0h */ case   50:  		/* stw R10, <#[R15 + 88]> */
		/* 821562A0h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000058) );
		/* 821562A0h case   50:*/		return 0x821562A4;
		  /* 821562A4h */ case   51:  		/* addi R9, R8, 15424 */
		/* 821562A4h case   51:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x3C40);
		/* 821562A4h case   51:*/		return 0x821562A8;
		  /* 821562A8h */ case   52:  		/* li R11, 86 */
		/* 821562A8h case   52:*/		cpu::op::li<0>(regs,&regs.R11,0x56);
		/* 821562A8h case   52:*/		return 0x821562AC;
		  /* 821562ACh */ case   53:  		/* addi R10, R23, 12520 */
		/* 821562ACh case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0x30E8);
		/* 821562ACh case   53:*/		return 0x821562B0;
		  /* 821562B0h */ case   54:  		/* stw R9, <#[R15 + 92]> */
		/* 821562B0h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000005C) );
		/* 821562B0h case   54:*/		return 0x821562B4;
		  /* 821562B4h */ case   55:  		/* stw R11, <#[R15 + 96]> */
		/* 821562B4h case   55:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000060) );
		/* 821562B4h case   55:*/		return 0x821562B8;
		  /* 821562B8h */ case   56:  		/* lis R24, -32235 */
		/* 821562B8h case   56:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8215);
		/* 821562B8h case   56:*/		return 0x821562BC;
		  /* 821562BCh */ case   57:  		/* lis R25, -32235 */
		/* 821562BCh case   57:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8215);
		/* 821562BCh case   57:*/		return 0x821562C0;
		  /* 821562C0h */ case   58:  		/* stw R10, <#[R15 + 100]> */
		/* 821562C0h case   58:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000064) );
		/* 821562C0h case   58:*/		return 0x821562C4;
		  /* 821562C4h */ case   59:  		/* lis R26, -32235 */
		/* 821562C4h case   59:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8215);
		/* 821562C4h case   59:*/		return 0x821562C8;
		  /* 821562C8h */ case   60:  		/* lis R27, -32235 */
		/* 821562C8h case   60:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8215);
		/* 821562C8h case   60:*/		return 0x821562CC;
		  /* 821562CCh */ case   61:  		/* lis R28, -32235 */
		/* 821562CCh case   61:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8215);
		/* 821562CCh case   61:*/		return 0x821562D0;
		  /* 821562D0h */ case   62:  		/* lis R29, -32235 */
		/* 821562D0h case   62:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 821562D0h case   62:*/		return 0x821562D4;
		  /* 821562D4h */ case   63:  		/* lis R30, -32235 */
		/* 821562D4h case   63:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 821562D4h case   63:*/		return 0x821562D8;
		  /* 821562D8h */ case   64:  		/* lis R31, -32235 */
		/* 821562D8h case   64:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 821562D8h case   64:*/		return 0x821562DC;
		  /* 821562DCh */ case   65:  		/* lis R3, -32235 */
		/* 821562DCh case   65:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 821562DCh case   65:*/		return 0x821562E0;
		  /* 821562E0h */ case   66:  		/* lis R4, -32235 */
		/* 821562E0h case   66:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8215);
		/* 821562E0h case   66:*/		return 0x821562E4;
		  /* 821562E4h */ case   67:  		/* lis R5, -32235 */
		/* 821562E4h case   67:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 821562E4h case   67:*/		return 0x821562E8;
		  /* 821562E8h */ case   68:  		/* lis R6, -32235 */
		/* 821562E8h case   68:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8215);
		/* 821562E8h case   68:*/		return 0x821562EC;
		  /* 821562ECh */ case   69:  		/* lis R7, -32235 */
		/* 821562ECh case   69:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 821562ECh case   69:*/		return 0x821562F0;
		  /* 821562F0h */ case   70:  		/* lis R8, -32235 */
		/* 821562F0h case   70:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 821562F0h case   70:*/		return 0x821562F4;
		  /* 821562F4h */ case   71:  		/* stw R11, <#[R15 + 104]> */
		/* 821562F4h case   71:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000068) );
		/* 821562F4h case   71:*/		return 0x821562F8;
		  /* 821562F8h */ case   72:  		/* addi R11, R25, 15424 */
		/* 821562F8h case   72:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x3C40);
		/* 821562F8h case   72:*/		return 0x821562FC;
		  /* 821562FCh */ case   73:  		/* li R10, 45 */
		/* 821562FCh case   73:*/		cpu::op::li<0>(regs,&regs.R10,0x2D);
		/* 821562FCh case   73:*/		return 0x82156300;
		  /* 82156300h */ case   74:  		/* stw R11, <#[R15 + 116]> */
		/* 82156300h case   74:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000074) );
		/* 82156300h case   74:*/		return 0x82156304;
		  /* 82156304h */ case   75:  		/* addi R9, R24, 12520 */
		/* 82156304h case   75:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R24,0x30E8);
		/* 82156304h case   75:*/		return 0x82156308;
		  /* 82156308h */ case   76:  		/* stw R10, <#[R15 + 112]> */
		/* 82156308h case   76:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000070) );
		/* 82156308h case   76:*/		return 0x8215630C;
		  /* 8215630Ch */ case   77:  		/* li R11, 57 */
		/* 8215630Ch case   77:*/		cpu::op::li<0>(regs,&regs.R11,0x39);
		/* 8215630Ch case   77:*/		return 0x82156310;
		  /* 82156310h */ case   78:  		/* addi R10, R26, 15424 */
		/* 82156310h case   78:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x3C40);
		/* 82156310h case   78:*/		return 0x82156314;
		  /* 82156314h */ case   79:  		/* stw R9, <#[R15 + 108]> */
		/* 82156314h case   79:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000006C) );
		/* 82156314h case   79:*/		return 0x82156318;
		  /* 82156318h */ case   80:  		/* stw R11, <#[R15 + 128]> */
		/* 82156318h case   80:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000080) );
		/* 82156318h case   80:*/		return 0x8215631C;
		  /* 8215631Ch */ case   81:  		/* addi R11, R28, 12520 */
		/* 8215631Ch case   81:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x30E8);
		/* 8215631Ch case   81:*/		return 0x82156320;
		  /* 82156320h */ case   82:  		/* stw R10, <#[R15 + 124]> */
		/* 82156320h case   82:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000007C) );
		/* 82156320h case   82:*/		return 0x82156324;
		  /* 82156324h */ case   83:  		/* li R9, 60 */
		/* 82156324h case   83:*/		cpu::op::li<0>(regs,&regs.R9,0x3C);
		/* 82156324h case   83:*/		return 0x82156328;
		  /* 82156328h */ case   84:  		/* li R10, 36 */
		/* 82156328h case   84:*/		cpu::op::li<0>(regs,&regs.R10,0x24);
		/* 82156328h case   84:*/		return 0x8215632C;
		  /* 8215632Ch */ case   85:  		/* stw R11, <#[R15 + 140]> */
		/* 8215632Ch case   85:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000008C) );
		/* 8215632Ch case   85:*/		return 0x82156330;
		  /* 82156330h */ case   86:  		/* stw R9, <#[R15 + 120]> */
		/* 82156330h case   86:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000078) );
		/* 82156330h case   86:*/		return 0x82156334;
		  /* 82156334h */ case   87:  		/* addi R9, R27, 12520 */
		/* 82156334h case   87:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x30E8);
		/* 82156334h case   87:*/		return 0x82156338;
		  /* 82156338h */ case   88:  		/* stw R10, <#[R15 + 136]> */
		/* 82156338h case   88:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000088) );
		/* 82156338h case   88:*/		return 0x8215633C;
		  /* 8215633Ch */ case   89:  		/* li R11, 49 */
		/* 8215633Ch case   89:*/		cpu::op::li<0>(regs,&regs.R11,0x31);
		/* 8215633Ch case   89:*/		return 0x82156340;
		  /* 82156340h */ case   90:  		/* addi R10, R29, 15424 */
		/* 82156340h case   90:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x3C40);
		/* 82156340h case   90:*/		return 0x82156344;
		  /* 82156344h */ case   91:  		/* stw R9, <#[R15 + 132]> */
		/* 82156344h case   91:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000084) );
		/* 82156344h case   91:*/		return 0x82156348;
		  /* 82156348h */ case   92:  		/* stw R11, <#[R15 + 152]> */
		/* 82156348h case   92:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000098) );
		/* 82156348h case   92:*/		return 0x8215634C;
		  /* 8215634Ch */ case   93:  		/* addi R11, R31, 15424 */
		/* 8215634Ch case   93:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3C40);
		/* 8215634Ch case   93:*/		return 0x82156350;
		  /* 82156350h */ case   94:  		/* stw R10, <#[R15 + 148]> */
		/* 82156350h case   94:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000094) );
		/* 82156350h case   94:*/		return 0x82156354;
		  /* 82156354h */ case   95:  		/* li R9, 63 */
		/* 82156354h case   95:*/		cpu::op::li<0>(regs,&regs.R9,0x3F);
		/* 82156354h case   95:*/		return 0x82156358;
		  /* 82156358h */ case   96:  		/* li R10, 69 */
		/* 82156358h case   96:*/		cpu::op::li<0>(regs,&regs.R10,0x45);
		/* 82156358h case   96:*/		return 0x8215635C;
		  /* 8215635Ch */ case   97:  		/* stw R11, <#[R15 + 164]> */
		/* 8215635Ch case   97:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000A4) );
		/* 8215635Ch case   97:*/		return 0x82156360;
		  /* 82156360h */ case   98:  		/* stw R9, <#[R15 + 144]> */
		/* 82156360h case   98:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000090) );
		/* 82156360h case   98:*/		return 0x82156364;
		  /* 82156364h */ case   99:  		/* addi R9, R30, 15424 */
		/* 82156364h case   99:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x3C40);
		/* 82156364h case   99:*/		return 0x82156368;
		  /* 82156368h */ case  100:  		/* stw R10, <#[R15 + 160]> */
		/* 82156368h case  100:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000A0) );
		/* 82156368h case  100:*/		return 0x8215636C;
		  /* 8215636Ch */ case  101:  		/* li R11, 69 */
		/* 8215636Ch case  101:*/		cpu::op::li<0>(regs,&regs.R11,0x45);
		/* 8215636Ch case  101:*/		return 0x82156370;
		  /* 82156370h */ case  102:  		/* addi R10, R3, 15424 */
		/* 82156370h case  102:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x3C40);
		/* 82156370h case  102:*/		return 0x82156374;
		  /* 82156374h */ case  103:  		/* stw R9, <#[R15 + 156]> */
		/* 82156374h case  103:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000009C) );
		/* 82156374h case  103:*/		return 0x82156378;
		  /* 82156378h */ case  104:  		/* stw R11, <#[R15 + 176]> */
		/* 82156378h case  104:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000B0) );
		/* 82156378h case  104:*/		return 0x8215637C;
		  /* 8215637Ch */ case  105:  		/* addi R11, R5, 15424 */
		/* 8215637Ch case  105:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x3C40);
		/* 8215637Ch case  105:*/		return 0x82156380;
		  /* 82156380h */ case  106:  		/* stw R10, <#[R15 + 172]> */
		/* 82156380h case  106:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000AC) );
		/* 82156380h case  106:*/		return 0x82156384;
		  /* 82156384h */ case  107:  		/* li R9, 69 */
		/* 82156384h case  107:*/		cpu::op::li<0>(regs,&regs.R9,0x45);
		/* 82156384h case  107:*/		return 0x82156388;
		  /* 82156388h */ case  108:  		/* li R10, 69 */
		/* 82156388h case  108:*/		cpu::op::li<0>(regs,&regs.R10,0x45);
		/* 82156388h case  108:*/		return 0x8215638C;
		  /* 8215638Ch */ case  109:  		/* stw R11, <#[R15 + 188]> */
		/* 8215638Ch case  109:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000BC) );
		/* 8215638Ch case  109:*/		return 0x82156390;
		  /* 82156390h */ case  110:  		/* stw R9, <#[R15 + 168]> */
		/* 82156390h case  110:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000A8) );
		/* 82156390h case  110:*/		return 0x82156394;
		  /* 82156394h */ case  111:  		/* addi R9, R4, 15424 */
		/* 82156394h case  111:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x3C40);
		/* 82156394h case  111:*/		return 0x82156398;
		  /* 82156398h */ case  112:  		/* stw R10, <#[R15 + 184]> */
		/* 82156398h case  112:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000B8) );
		/* 82156398h case  112:*/		return 0x8215639C;
		  /* 8215639Ch */ case  113:  		/* li R11, 8 */
		/* 8215639Ch case  113:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8215639Ch case  113:*/		return 0x821563A0;
		  /* 821563A0h */ case  114:  		/* addi R10, R6, 15424 */
		/* 821563A0h case  114:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x3C40);
		/* 821563A0h case  114:*/		return 0x821563A4;
		  /* 821563A4h */ case  115:  		/* stw R9, <#[R15 + 180]> */
		/* 821563A4h case  115:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000B4) );
		/* 821563A4h case  115:*/		return 0x821563A8;
		  /* 821563A8h */ case  116:  		/* stw R11, <#[R15 + 200]> */
		/* 821563A8h case  116:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000C8) );
		/* 821563A8h case  116:*/		return 0x821563AC;
		  /* 821563ACh */ case  117:  		/* addi R11, R8, 16584 */
		/* 821563ACh case  117:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x40C8);
		/* 821563ACh case  117:*/		return 0x821563B0;
		  /* 821563B0h */ case  118:  		/* stw R10, <#[R15 + 196]> */
		/* 821563B0h case  118:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000C4) );
		/* 821563B0h case  118:*/		return 0x821563B4;
		  /* 821563B4h */ case  119:  		/* li R9, 69 */
		/* 821563B4h case  119:*/		cpu::op::li<0>(regs,&regs.R9,0x45);
		/* 821563B4h case  119:*/		return 0x821563B8;
		  /* 821563B8h */ case  120:  		/* li R10, 9 */
		/* 821563B8h case  120:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 821563B8h case  120:*/		return 0x821563BC;
		  /* 821563BCh */ case  121:  		/* stw R11, <#[R15 + 212]> */
		/* 821563BCh case  121:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000D4) );
		/* 821563BCh case  121:*/		return 0x821563C0;
	}
	return 0x821563C0;
} // Block from 821561D8h-821563C0h (122 instructions)

//////////////////////////////////////////////////////
// Block at 821563C0h
// Function '?TEXM3x2PADConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821563C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821563C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821563C0);
		  /* 821563C0h */ case    0:  		/* stw R9, <#[R15 + 192]> */
		/* 821563C0h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000C0) );
		/* 821563C0h case    0:*/		return 0x821563C4;
		  /* 821563C4h */ case    1:  		/* addi R9, R7, 16584 */
		/* 821563C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x40C8);
		/* 821563C4h case    1:*/		return 0x821563C8;
		  /* 821563C8h */ case    2:  		/* stw R10, <#[R15 + 208]> */
		/* 821563C8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000D0) );
		/* 821563C8h case    2:*/		return 0x821563CC;
		  /* 821563CCh */ case    3:  		/* li R11, 62 */
		/* 821563CCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x3E);
		/* 821563CCh case    3:*/		return 0x821563D0;
		  /* 821563D0h */ case    4:  		/* lis R10, -32235 */
		/* 821563D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 821563D0h case    4:*/		return 0x821563D4;
		  /* 821563D4h */ case    5:  		/* stw R9, <#[R15 + 204]> */
		/* 821563D4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000CC) );
		/* 821563D4h case    5:*/		return 0x821563D8;
		  /* 821563D8h */ case    6:  		/* lis R18, -32235 */
		/* 821563D8h case    6:*/		cpu::op::lis<0>(regs,&regs.R18,0xFFFF8215);
		/* 821563D8h case    6:*/		return 0x821563DC;
		  /* 821563DCh */ case    7:  		/* stw R11, <#[R15 + 216]> */
		/* 821563DCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000D8) );
		/* 821563DCh case    7:*/		return 0x821563E0;
		  /* 821563E0h */ case    8:  		/* lis R19, -32235 */
		/* 821563E0h case    8:*/		cpu::op::lis<0>(regs,&regs.R19,0xFFFF8215);
		/* 821563E0h case    8:*/		return 0x821563E4;
		  /* 821563E4h */ case    9:  		/* lis R20, -32235 */
		/* 821563E4h case    9:*/		cpu::op::lis<0>(regs,&regs.R20,0xFFFF8215);
		/* 821563E4h case    9:*/		return 0x821563E8;
		  /* 821563E8h */ case   10:  		/* lis R21, -32235 */
		/* 821563E8h case   10:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8215);
		/* 821563E8h case   10:*/		return 0x821563EC;
		  /* 821563ECh */ case   11:  		/* lis R22, -32235 */
		/* 821563ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFF8215);
		/* 821563ECh case   11:*/		return 0x821563F0;
		  /* 821563F0h */ case   12:  		/* lis R23, -32235 */
		/* 821563F0h case   12:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8215);
		/* 821563F0h case   12:*/		return 0x821563F4;
		  /* 821563F4h */ case   13:  		/* lis R24, -32235 */
		/* 821563F4h case   13:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8215);
		/* 821563F4h case   13:*/		return 0x821563F8;
		  /* 821563F8h */ case   14:  		/* lis R25, -32235 */
		/* 821563F8h case   14:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8215);
		/* 821563F8h case   14:*/		return 0x821563FC;
		  /* 821563FCh */ case   15:  		/* lis R29, -32235 */
		/* 821563FCh case   15:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 821563FCh case   15:*/		return 0x82156400;
		  /* 82156400h */ case   16:  		/* lis R30, -32235 */
		/* 82156400h case   16:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 82156400h case   16:*/		return 0x82156404;
		  /* 82156404h */ case   17:  		/* lis R31, -32235 */
		/* 82156404h case   17:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 82156404h case   17:*/		return 0x82156408;
		  /* 82156408h */ case   18:  		/* lis R3, -32235 */
		/* 82156408h case   18:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 82156408h case   18:*/		return 0x8215640C;
		  /* 8215640Ch */ case   19:  		/* lis R4, -32235 */
		/* 8215640Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8215);
		/* 8215640Ch case   19:*/		return 0x82156410;
		  /* 82156410h */ case   20:  		/* lis R5, -32235 */
		/* 82156410h case   20:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 82156410h case   20:*/		return 0x82156414;
		  /* 82156414h */ case   21:  		/* lis R6, -32235 */
		/* 82156414h case   21:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8215);
		/* 82156414h case   21:*/		return 0x82156418;
		  /* 82156418h */ case   22:  		/* lis R7, -32235 */
		/* 82156418h case   22:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 82156418h case   22:*/		return 0x8215641C;
		  /* 8215641Ch */ case   23:  		/* lis R8, -32235 */
		/* 8215641Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 8215641Ch case   23:*/		return 0x82156420;
		  /* 82156420h */ case   24:  		/* lis R26, -32235 */
		/* 82156420h case   24:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8215);
		/* 82156420h case   24:*/		return 0x82156424;
		  /* 82156424h */ case   25:  		/* lis R27, -32235 */
		/* 82156424h case   25:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8215);
		/* 82156424h case   25:*/		return 0x82156428;
		  /* 82156428h */ case   26:  		/* lis R28, -32235 */
		/* 82156428h case   26:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8215);
		/* 82156428h case   26:*/		return 0x8215642C;
		  /* 8215642Ch */ case   27:  		/* addi R10, R10, 16584 */
		/* 8215642Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x40C8);
		/* 8215642Ch case   27:*/		return 0x82156430;
		  /* 82156430h */ case   28:  		/* li R9, 0 */
		/* 82156430h case   28:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82156430h case   28:*/		return 0x82156434;
		  /* 82156434h */ case   29:  		/* addi R11, R18, 16584 */
		/* 82156434h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x40C8);
		/* 82156434h case   29:*/		return 0x82156438;
		  /* 82156438h */ case   30:  		/* stw R10, <#[R15 + 220]> */
		/* 82156438h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000DC) );
		/* 82156438h case   30:*/		return 0x8215643C;
		  /* 8215643Ch */ case   31:  		/* li R10, 42 */
		/* 8215643Ch case   31:*/		cpu::op::li<0>(regs,&regs.R10,0x2A);
		/* 8215643Ch case   31:*/		return 0x82156440;
		  /* 82156440h */ case   32:  		/* stw R9, <#[R15 + 224]> */
		/* 82156440h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000E0) );
		/* 82156440h case   32:*/		return 0x82156444;
		  /* 82156444h */ case   33:  		/* addi R9, R19, 16584 */
		/* 82156444h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0x40C8);
		/* 82156444h case   33:*/		return 0x82156448;
		  /* 82156448h */ case   34:  		/* stw R11, <#[R15 + 228]> */
		/* 82156448h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000E4) );
		/* 82156448h case   34:*/		return 0x8215644C;
		  /* 8215644Ch */ case   35:  		/* li R11, 50 */
		/* 8215644Ch case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x32);
		/* 8215644Ch case   35:*/		return 0x82156450;
		  /* 82156450h */ case   36:  		/* stw R10, <#[R15 + 232]> */
		/* 82156450h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000E8) );
		/* 82156450h case   36:*/		return 0x82156454;
		  /* 82156454h */ case   37:  		/* addi R10, R20, 16584 */
		/* 82156454h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0x40C8);
		/* 82156454h case   37:*/		return 0x82156458;
		  /* 82156458h */ case   38:  		/* stw R9, <#[R15 + 236]> */
		/* 82156458h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000EC) );
		/* 82156458h case   38:*/		return 0x8215645C;
		  /* 8215645Ch */ case   39:  		/* li R9, 22 */
		/* 8215645Ch case   39:*/		cpu::op::li<0>(regs,&regs.R9,0x16);
		/* 8215645Ch case   39:*/		return 0x82156460;
		  /* 82156460h */ case   40:  		/* stw R11, <#[R15 + 240]> */
		/* 82156460h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000F0) );
		/* 82156460h case   40:*/		return 0x82156464;
		  /* 82156464h */ case   41:  		/* addi R11, R21, 12520 */
		/* 82156464h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x30E8);
		/* 82156464h case   41:*/		return 0x82156468;
		  /* 82156468h */ case   42:  		/* stw R10, <#[R15 + 244]> */
		/* 82156468h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000000F4) );
		/* 82156468h case   42:*/		return 0x8215646C;
		  /* 8215646Ch */ case   43:  		/* li R10, 78 */
		/* 8215646Ch case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x4E);
		/* 8215646Ch case   43:*/		return 0x82156470;
		  /* 82156470h */ case   44:  		/* stw R9, <#[R15 + 248]> */
		/* 82156470h case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000000F8) );
		/* 82156470h case   44:*/		return 0x82156474;
		  /* 82156474h */ case   45:  		/* addi R9, R22, 15424 */
		/* 82156474h case   45:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R22,0x3C40);
		/* 82156474h case   45:*/		return 0x82156478;
		  /* 82156478h */ case   46:  		/* stw R11, <#[R15 + 252]> */
		/* 82156478h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000000FC) );
		/* 82156478h case   46:*/		return 0x8215647C;
		  /* 8215647Ch */ case   47:  		/* li R11, 19 */
		/* 8215647Ch case   47:*/		cpu::op::li<0>(regs,&regs.R11,0x13);
		/* 8215647Ch case   47:*/		return 0x82156480;
		  /* 82156480h */ case   48:  		/* stw R10, <#[R15 + 256]> */
		/* 82156480h case   48:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000100) );
		/* 82156480h case   48:*/		return 0x82156484;
		  /* 82156484h */ case   49:  		/* addi R10, R23, 15424 */
		/* 82156484h case   49:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0x3C40);
		/* 82156484h case   49:*/		return 0x82156488;
		  /* 82156488h */ case   50:  		/* stw R9, <#[R15 + 260]> */
		/* 82156488h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000104) );
		/* 82156488h case   50:*/		return 0x8215648C;
		  /* 8215648Ch */ case   51:  		/* li R9, 87 */
		/* 8215648Ch case   51:*/		cpu::op::li<0>(regs,&regs.R9,0x57);
		/* 8215648Ch case   51:*/		return 0x82156490;
		  /* 82156490h */ case   52:  		/* stw R11, <#[R15 + 264]> */
		/* 82156490h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000108) );
		/* 82156490h case   52:*/		return 0x82156494;
		  /* 82156494h */ case   53:  		/* addi R11, R24, 12520 */
		/* 82156494h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x30E8);
		/* 82156494h case   53:*/		return 0x82156498;
		  /* 82156498h */ case   54:  		/* stw R10, <#[R15 + 268]> */
		/* 82156498h case   54:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000010C) );
		/* 82156498h case   54:*/		return 0x8215649C;
		  /* 8215649Ch */ case   55:  		/* li R10, 1 */
		/* 8215649Ch case   55:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8215649Ch case   55:*/		return 0x821564A0;
	}
	return 0x821564A0;
} // Block from 821563C0h-821564A0h (56 instructions)

//////////////////////////////////////////////////////
// Block at 821564A0h
// Function '?TEXM3x3PADConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821564A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821564A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821564A0);
		  /* 821564A0h */ case    0:  		/* stw R9, <#[R15 + 272]> */
		/* 821564A0h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000110) );
		/* 821564A0h case    0:*/		return 0x821564A4;
		  /* 821564A4h */ case    1:  		/* addi R9, R25, 15424 */
		/* 821564A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R25,0x3C40);
		/* 821564A4h case    1:*/		return 0x821564A8;
		  /* 821564A8h */ case    2:  		/* stw R11, <#[R15 + 276]> */
		/* 821564A8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000114) );
		/* 821564A8h case    2:*/		return 0x821564AC;
		  /* 821564ACh */ case    3:  		/* li R11, 76 */
		/* 821564ACh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x4C);
		/* 821564ACh case    3:*/		return 0x821564B0;
		  /* 821564B0h */ case    4:  		/* stw R10, <#[R15 + 280]> */
		/* 821564B0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000118) );
		/* 821564B0h case    4:*/		return 0x821564B4;
		  /* 821564B4h */ case    5:  		/* addi R10, R29, 15424 */
		/* 821564B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x3C40);
		/* 821564B4h case    5:*/		return 0x821564B8;
		  /* 821564B8h */ case    6:  		/* stw R9, <#[R15 + 284]> */
		/* 821564B8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000011C) );
		/* 821564B8h case    6:*/		return 0x821564BC;
		  /* 821564BCh */ case    7:  		/* li R9, 89 */
		/* 821564BCh case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x59);
		/* 821564BCh case    7:*/		return 0x821564C0;
		  /* 821564C0h */ case    8:  		/* stw R11, <#[R15 + 288]> */
		/* 821564C0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000120) );
		/* 821564C0h case    8:*/		return 0x821564C4;
		  /* 821564C4h */ case    9:  		/* addi R11, R30, 15424 */
		/* 821564C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3C40);
		/* 821564C4h case    9:*/		return 0x821564C8;
		  /* 821564C8h */ case   10:  		/* stw R10, <#[R15 + 292]> */
		/* 821564C8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000124) );
		/* 821564C8h case   10:*/		return 0x821564CC;
		  /* 821564CCh */ case   11:  		/* li R10, 62 */
		/* 821564CCh case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x3E);
		/* 821564CCh case   11:*/		return 0x821564D0;
		  /* 821564D0h */ case   12:  		/* stw R9, <#[R15 + 296]> */
		/* 821564D0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000128) );
		/* 821564D0h case   12:*/		return 0x821564D4;
		  /* 821564D4h */ case   13:  		/* addi R9, R31, 16584 */
		/* 821564D4h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x40C8);
		/* 821564D4h case   13:*/		return 0x821564D8;
		  /* 821564D8h */ case   14:  		/* stw R11, <#[R15 + 300]> */
		/* 821564D8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000012C) );
		/* 821564D8h case   14:*/		return 0x821564DC;
		  /* 821564DCh */ case   15:  		/* li R11, 42 */
		/* 821564DCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x2A);
		/* 821564DCh case   15:*/		return 0x821564E0;
		  /* 821564E0h */ case   16:  		/* stw R10, <#[R15 + 304]> */
		/* 821564E0h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000130) );
		/* 821564E0h case   16:*/		return 0x821564E4;
		  /* 821564E4h */ case   17:  		/* addi R10, R3, 16584 */
		/* 821564E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x40C8);
		/* 821564E4h case   17:*/		return 0x821564E8;
		  /* 821564E8h */ case   18:  		/* stw R9, <#[R15 + 308]> */
		/* 821564E8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000134) );
		/* 821564E8h case   18:*/		return 0x821564EC;
		  /* 821564ECh */ case   19:  		/* li R9, 53 */
		/* 821564ECh case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x35);
		/* 821564ECh case   19:*/		return 0x821564F0;
		  /* 821564F0h */ case   20:  		/* stw R11, <#[R15 + 312]> */
		/* 821564F0h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000138) );
		/* 821564F0h case   20:*/		return 0x821564F4;
		  /* 821564F4h */ case   21:  		/* addi R11, R4, 16584 */
		/* 821564F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x40C8);
		/* 821564F4h case   21:*/		return 0x821564F8;
		  /* 821564F8h */ case   22:  		/* stw R10, <#[R15 + 316]> */
		/* 821564F8h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000013C) );
		/* 821564F8h case   22:*/		return 0x821564FC;
		  /* 821564FCh */ case   23:  		/* li R10, 52 */
		/* 821564FCh case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x34);
		/* 821564FCh case   23:*/		return 0x82156500;
		  /* 82156500h */ case   24:  		/* stw R9, <#[R15 + 320]> */
		/* 82156500h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000140) );
		/* 82156500h case   24:*/		return 0x82156504;
		  /* 82156504h */ case   25:  		/* addi R9, R5, 17792 */
		/* 82156504h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0x4580);
		/* 82156504h case   25:*/		return 0x82156508;
		  /* 82156508h */ case   26:  		/* stw R11, <#[R15 + 324]> */
		/* 82156508h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000144) );
		/* 82156508h case   26:*/		return 0x8215650C;
		  /* 8215650Ch */ case   27:  		/* li R11, 39 */
		/* 8215650Ch case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x27);
		/* 8215650Ch case   27:*/		return 0x82156510;
		  /* 82156510h */ case   28:  		/* stw R10, <#[R15 + 328]> */
		/* 82156510h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000148) );
		/* 82156510h case   28:*/		return 0x82156514;
		  /* 82156514h */ case   29:  		/* addi R10, R6, 16584 */
		/* 82156514h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x40C8);
		/* 82156514h case   29:*/		return 0x82156518;
		  /* 82156518h */ case   30:  		/* stw R9, <#[R15 + 332]> */
		/* 82156518h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000014C) );
		/* 82156518h case   30:*/		return 0x8215651C;
		  /* 8215651Ch */ case   31:  		/* li R9, 41 */
		/* 8215651Ch case   31:*/		cpu::op::li<0>(regs,&regs.R9,0x29);
		/* 8215651Ch case   31:*/		return 0x82156520;
		  /* 82156520h */ case   32:  		/* stw R11, <#[R15 + 336]> */
		/* 82156520h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000150) );
		/* 82156520h case   32:*/		return 0x82156524;
		  /* 82156524h */ case   33:  		/* addi R11, R7, 16584 */
		/* 82156524h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x40C8);
		/* 82156524h case   33:*/		return 0x82156528;
		  /* 82156528h */ case   34:  		/* stw R10, <#[R15 + 340]> */
		/* 82156528h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000154) );
		/* 82156528h case   34:*/		return 0x8215652C;
		  /* 8215652Ch */ case   35:  		/* li R10, 6 */
		/* 8215652Ch case   35:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 8215652Ch case   35:*/		return 0x82156530;
		  /* 82156530h */ case   36:  		/* stw R9, <#[R15 + 344]> */
		/* 82156530h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000158) );
		/* 82156530h case   36:*/		return 0x82156534;
		  /* 82156534h */ case   37:  		/* addi R9, R8, 16584 */
		/* 82156534h case   37:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x40C8);
		/* 82156534h case   37:*/		return 0x82156538;
		  /* 82156538h */ case   38:  		/* stw R11, <#[R15 + 348]> */
		/* 82156538h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000015C) );
		/* 82156538h case   38:*/		return 0x8215653C;
		  /* 8215653Ch */ case   39:  		/* li R11, 7 */
		/* 8215653Ch case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8215653Ch case   39:*/		return 0x82156540;
		  /* 82156540h */ case   40:  		/* stw R10, <#[R15 + 352]> */
		/* 82156540h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000160) );
		/* 82156540h case   40:*/		return 0x82156544;
		  /* 82156544h */ case   41:  		/* addi R10, R26, 17792 */
		/* 82156544h case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x4580);
		/* 82156544h case   41:*/		return 0x82156548;
		  /* 82156548h */ case   42:  		/* stw R9, <#[R15 + 356]> */
		/* 82156548h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000164) );
		/* 82156548h case   42:*/		return 0x8215654C;
		  /* 8215654Ch */ case   43:  		/* lis R29, -32235 */
		/* 8215654Ch case   43:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 8215654Ch case   43:*/		return 0x82156550;
		  /* 82156550h */ case   44:  		/* lis R30, -32235 */
		/* 82156550h case   44:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 82156550h case   44:*/		return 0x82156554;
		  /* 82156554h */ case   45:  		/* stw R11, <#[R15 + 360]> */
		/* 82156554h case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000168) );
		/* 82156554h case   45:*/		return 0x82156558;
		  /* 82156558h */ case   46:  		/* lis R31, -32235 */
		/* 82156558h case   46:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 82156558h case   46:*/		return 0x8215655C;
		  /* 8215655Ch */ case   47:  		/* stw R10, <#[R15 + 364]> */
		/* 8215655Ch case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000016C) );
		/* 8215655Ch case   47:*/		return 0x82156560;
		  /* 82156560h */ case   48:  		/* lis R3, -32235 */
		/* 82156560h case   48:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 82156560h case   48:*/		return 0x82156564;
		  /* 82156564h */ case   49:  		/* lis R4, -32235 */
		/* 82156564h case   49:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8215);
		/* 82156564h case   49:*/		return 0x82156568;
		  /* 82156568h */ case   50:  		/* lis R5, -32235 */
		/* 82156568h case   50:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 82156568h case   50:*/		return 0x8215656C;
		  /* 8215656Ch */ case   51:  		/* lis R6, -32235 */
		/* 8215656Ch case   51:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8215);
		/* 8215656Ch case   51:*/		return 0x82156570;
		  /* 82156570h */ case   52:  		/* lis R7, -32235 */
		/* 82156570h case   52:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 82156570h case   52:*/		return 0x82156574;
		  /* 82156574h */ case   53:  		/* lis R8, -32235 */
		/* 82156574h case   53:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 82156574h case   53:*/		return 0x82156578;
		  /* 82156578h */ case   54:  		/* li R9, 0 */
		/* 82156578h case   54:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82156578h case   54:*/		return 0x8215657C;
		  /* 8215657Ch */ case   55:  		/* addi R11, R27, 12520 */
		/* 8215657Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x30E8);
		/* 8215657Ch case   55:*/		return 0x82156580;
		  /* 82156580h */ case   56:  		/* stw R9, <#[R15 + 368]> */
		/* 82156580h case   56:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000170) );
		/* 82156580h case   56:*/		return 0x82156584;
		  /* 82156584h */ case   57:  		/* li R10, 28 */
		/* 82156584h case   57:*/		cpu::op::li<0>(regs,&regs.R10,0x1C);
		/* 82156584h case   57:*/		return 0x82156588;
		  /* 82156588h */ case   58:  		/* stw R11, <#[R15 + 372]> */
		/* 82156588h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000174) );
		/* 82156588h case   58:*/		return 0x8215658C;
		  /* 8215658Ch */ case   59:  		/* li R11, 28 */
		/* 8215658Ch case   59:*/		cpu::op::li<0>(regs,&regs.R11,0x1C);
		/* 8215658Ch case   59:*/		return 0x82156590;
		  /* 82156590h */ case   60:  		/* stw R10, <#[R15 + 376]> */
		/* 82156590h case   60:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000178) );
		/* 82156590h case   60:*/		return 0x82156594;
		  /* 82156594h */ case   61:  		/* addi R10, R29, 12520 */
		/* 82156594h case   61:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x30E8);
		/* 82156594h case   61:*/		return 0x82156598;
		  /* 82156598h */ case   62:  		/* stw R11, <#[R15 + 384]> */
		/* 82156598h case   62:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000180) );
		/* 82156598h case   62:*/		return 0x8215659C;
		  /* 8215659Ch */ case   63:  		/* addi R9, R28, 12520 */
		/* 8215659Ch case   63:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x30E8);
		/* 8215659Ch case   63:*/		return 0x821565A0;
		  /* 821565A0h */ case   64:  		/* stw R10, <#[R15 + 388]> */
		/* 821565A0h case   64:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000184) );
		/* 821565A0h case   64:*/		return 0x821565A4;
		  /* 821565A4h */ case   65:  		/* addi R11, R30, 18256 */
		/* 821565A4h case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4750);
		/* 821565A4h case   65:*/		return 0x821565A8;
		  /* 821565A8h */ case   66:  		/* li R10, 55 */
		/* 821565A8h case   66:*/		cpu::op::li<0>(regs,&regs.R10,0x37);
		/* 821565A8h case   66:*/		return 0x821565AC;
		  /* 821565ACh */ case   67:  		/* stw R9, <#[R15 + 380]> */
		/* 821565ACh case   67:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000017C) );
		/* 821565ACh case   67:*/		return 0x821565B0;
		  /* 821565B0h */ case   68:  		/* stw R11, <#[R15 + 516]> */
		/* 821565B0h case   68:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000204) );
		/* 821565B0h case   68:*/		return 0x821565B4;
		  /* 821565B4h */ case   69:  		/* li R9, 71 */
		/* 821565B4h case   69:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 821565B4h case   69:*/		return 0x821565B8;
		  /* 821565B8h */ case   70:  		/* stw R10, <#[R15 + 520]> */
		/* 821565B8h case   70:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000208) );
		/* 821565B8h case   70:*/		return 0x821565BC;
		  /* 821565BCh */ case   71:  		/* li R11, 93 */
		/* 821565BCh case   71:*/		cpu::op::li<0>(regs,&regs.R11,0x5D);
		/* 821565BCh case   71:*/		return 0x821565C0;
		  /* 821565C0h */ case   72:  		/* addi R10, R3, 19152 */
		/* 821565C0h case   72:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x4AD0);
		/* 821565C0h case   72:*/		return 0x821565C4;
		  /* 821565C4h */ case   73:  		/* stw R9, <#[R15 + 512]> */
		/* 821565C4h case   73:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000200) );
		/* 821565C4h case   73:*/		return 0x821565C8;
		  /* 821565C8h */ case   74:  		/* stw R11, <#[R15 + 528]> */
		/* 821565C8h case   74:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000210) );
		/* 821565C8h case   74:*/		return 0x821565CC;
		  /* 821565CCh */ case   75:  		/* addi R9, R31, 18656 */
		/* 821565CCh case   75:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x48E0);
		/* 821565CCh case   75:*/		return 0x821565D0;
		  /* 821565D0h */ case   76:  		/* stw R10, <#[R15 + 532]> */
		/* 821565D0h case   76:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000214) );
		/* 821565D0h case   76:*/		return 0x821565D4;
		  /* 821565D4h */ case   77:  		/* addi R11, R4, 20720 */
		/* 821565D4h case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x50F0);
		/* 821565D4h case   77:*/		return 0x821565D8;
		  /* 821565D8h */ case   78:  		/* li R10, 33 */
		/* 821565D8h case   78:*/		cpu::op::li<0>(regs,&regs.R10,0x21);
		/* 821565D8h case   78:*/		return 0x821565DC;
		  /* 821565DCh */ case   79:  		/* stw R9, <#[R15 + 524]> */
		/* 821565DCh case   79:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000020C) );
		/* 821565DCh case   79:*/		return 0x821565E0;
		  /* 821565E0h */ case   80:  		/* stw R11, <#[R15 + 540]> */
		/* 821565E0h case   80:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000021C) );
		/* 821565E0h case   80:*/		return 0x821565E4;
		  /* 821565E4h */ case   81:  		/* li R9, 33 */
		/* 821565E4h case   81:*/		cpu::op::li<0>(regs,&regs.R9,0x21);
		/* 821565E4h case   81:*/		return 0x821565E8;
		  /* 821565E8h */ case   82:  		/* stw R10, <#[R15 + 544]> */
		/* 821565E8h case   82:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000220) );
		/* 821565E8h case   82:*/		return 0x821565EC;
		  /* 821565ECh */ case   83:  		/* li R11, 93 */
		/* 821565ECh case   83:*/		cpu::op::li<0>(regs,&regs.R11,0x5D);
		/* 821565ECh case   83:*/		return 0x821565F0;
		  /* 821565F0h */ case   84:  		/* addi R10, R6, 22552 */
		/* 821565F0h case   84:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x5818);
		/* 821565F0h case   84:*/		return 0x821565F4;
		  /* 821565F4h */ case   85:  		/* stw R9, <#[R15 + 536]> */
		/* 821565F4h case   85:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000218) );
		/* 821565F4h case   85:*/		return 0x821565F8;
		  /* 821565F8h */ case   86:  		/* stw R11, <#[R15 + 552]> */
		/* 821565F8h case   86:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000228) );
		/* 821565F8h case   86:*/		return 0x821565FC;
		  /* 821565FCh */ case   87:  		/* addi R9, R5, 20720 */
		/* 821565FCh case   87:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0x50F0);
		/* 821565FCh case   87:*/		return 0x82156600;
	}
	return 0x82156600;
} // Block from 821564A0h-82156600h (88 instructions)

//////////////////////////////////////////////////////
// Block at 82156600h
// Function '?TEXM3xXXConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156600);
		  /* 82156600h */ case    0:  		/* stw R10, <#[R15 + 556]> */
		/* 82156600h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000022C) );
		/* 82156600h case    0:*/		return 0x82156604;
		  /* 82156604h */ case    1:  		/* addi R11, R7, 22552 */
		/* 82156604h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x5818);
		/* 82156604h case    1:*/		return 0x82156608;
		  /* 82156608h */ case    2:  		/* li R10, 34 */
		/* 82156608h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82156608h case    2:*/		return 0x8215660C;
		  /* 8215660Ch */ case    3:  		/* stw R9, <#[R15 + 548]> */
		/* 8215660Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000224) );
		/* 8215660Ch case    3:*/		return 0x82156610;
		  /* 82156610h */ case    4:  		/* stw R11, <#[R15 + 564]> */
		/* 82156610h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000234) );
		/* 82156610h case    4:*/		return 0x82156614;
		  /* 82156614h */ case    5:  		/* li R9, 93 */
		/* 82156614h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x5D);
		/* 82156614h case    5:*/		return 0x82156618;
		  /* 82156618h */ case    6:  		/* stw R10, <#[R15 + 568]> */
		/* 82156618h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000238) );
		/* 82156618h case    6:*/		return 0x8215661C;
		  /* 8215661Ch */ case    7:  		/* li R11, 34 */
		/* 8215661Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 8215661Ch case    7:*/		return 0x82156620;
		  /* 82156620h */ case    8:  		/* lis R10, -32235 */
		/* 82156620h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 82156620h case    8:*/		return 0x82156624;
		  /* 82156624h */ case    9:  		/* stw R9, <#[R15 + 560]> */
		/* 82156624h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000230) );
		/* 82156624h case    9:*/		return 0x82156628;
		  /* 82156628h */ case   10:  		/* stw R11, <#[R15 + 576]> */
		/* 82156628h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000240) );
		/* 82156628h case   10:*/		return 0x8215662C;
		  /* 8215662Ch */ case   11:  		/* addi R9, R8, 23040 */
		/* 8215662Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x5A00);
		/* 8215662Ch case   11:*/		return 0x82156630;
		  /* 82156630h */ case   12:  		/* addi R11, R10, 23616 */
		/* 82156630h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x5C40);
		/* 82156630h case   12:*/		return 0x82156634;
		  /* 82156634h */ case   13:  		/* stw R9, <#[R15 + 572]> */
		/* 82156634h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000023C) );
		/* 82156634h case   13:*/		return 0x82156638;
		  /* 82156638h */ case   14:  		/* lis R9, -32235 */
		/* 82156638h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8215);
		/* 82156638h case   14:*/		return 0x8215663C;
		  /* 8215663Ch */ case   15:  		/* stw R11, <#[R15 + 580]> */
		/* 8215663Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000244) );
		/* 8215663Ch case   15:*/		return 0x82156640;
		  /* 82156640h */ case   16:  		/* li R11, 34 */
		/* 82156640h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82156640h case   16:*/		return 0x82156644;
		  /* 82156644h */ case   17:  		/* lis R17, -32235 */
		/* 82156644h case   17:*/		cpu::op::lis<0>(regs,&regs.R17,0xFFFF8215);
		/* 82156644h case   17:*/		return 0x82156648;
		  /* 82156648h */ case   18:  		/* li R10, 34 */
		/* 82156648h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82156648h case   18:*/		return 0x8215664C;
		  /* 8215664Ch */ case   19:  		/* stw R11, <#[R15 + 592]> */
		/* 8215664Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000250) );
		/* 8215664Ch case   19:*/		return 0x82156650;
		  /* 82156650h */ case   20:  		/* addi R9, R9, 23264 */
		/* 82156650h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x5AE0);
		/* 82156650h case   20:*/		return 0x82156654;
		  /* 82156654h */ case   21:  		/* lis R16, -32235 */
		/* 82156654h case   21:*/		cpu::op::lis<0>(regs,&regs.R16,0xFFFF8215);
		/* 82156654h case   21:*/		return 0x82156658;
		  /* 82156658h */ case   22:  		/* stw R10, <#[R15 + 584]> */
		/* 82156658h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000248) );
		/* 82156658h case   22:*/		return 0x8215665C;
		  /* 8215665Ch */ case   23:  		/* addi R11, R17, 12520 */
		/* 8215665Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x30E8);
		/* 8215665Ch case   23:*/		return 0x82156660;
		  /* 82156660h */ case   24:  		/* stw R9, <#[R15 + 588]> */
		/* 82156660h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000024C) );
		/* 82156660h case   24:*/		return 0x82156664;
		  /* 82156664h */ case   25:  		/* lis R18, -32235 */
		/* 82156664h case   25:*/		cpu::op::lis<0>(regs,&regs.R18,0xFFFF8215);
		/* 82156664h case   25:*/		return 0x82156668;
		  /* 82156668h */ case   26:  		/* lis R19, -32235 */
		/* 82156668h case   26:*/		cpu::op::lis<0>(regs,&regs.R19,0xFFFF8215);
		/* 82156668h case   26:*/		return 0x8215666C;
		  /* 8215666Ch */ case   27:  		/* stw R11, <#[R15 + 604]> */
		/* 8215666Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000025C) );
		/* 8215666Ch case   27:*/		return 0x82156670;
		  /* 82156670h */ case   28:  		/* lis R20, -32235 */
		/* 82156670h case   28:*/		cpu::op::lis<0>(regs,&regs.R20,0xFFFF8215);
		/* 82156670h case   28:*/		return 0x82156674;
		  /* 82156674h */ case   29:  		/* lis R21, -32235 */
		/* 82156674h case   29:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8215);
		/* 82156674h case   29:*/		return 0x82156678;
		  /* 82156678h */ case   30:  		/* lis R22, -32235 */
		/* 82156678h case   30:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFF8215);
		/* 82156678h case   30:*/		return 0x8215667C;
		  /* 8215667Ch */ case   31:  		/* lis R23, -32235 */
		/* 8215667Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8215);
		/* 8215667Ch case   31:*/		return 0x82156680;
		  /* 82156680h */ case   32:  		/* lis R24, -32235 */
		/* 82156680h case   32:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8215);
		/* 82156680h case   32:*/		return 0x82156684;
		  /* 82156684h */ case   33:  		/* lis R25, -32235 */
		/* 82156684h case   33:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8215);
		/* 82156684h case   33:*/		return 0x82156688;
		  /* 82156688h */ case   34:  		/* lis R26, -32235 */
		/* 82156688h case   34:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8215);
		/* 82156688h case   34:*/		return 0x8215668C;
		  /* 8215668Ch */ case   35:  		/* lis R27, -32235 */
		/* 8215668Ch case   35:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8215);
		/* 8215668Ch case   35:*/		return 0x82156690;
		  /* 82156690h */ case   36:  		/* lis R28, -32235 */
		/* 82156690h case   36:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8215);
		/* 82156690h case   36:*/		return 0x82156694;
		  /* 82156694h */ case   37:  		/* lis R29, -32235 */
		/* 82156694h case   37:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 82156694h case   37:*/		return 0x82156698;
		  /* 82156698h */ case   38:  		/* lis R30, -32235 */
		/* 82156698h case   38:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 82156698h case   38:*/		return 0x8215669C;
		  /* 8215669Ch */ case   39:  		/* lis R31, -32235 */
		/* 8215669Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 8215669Ch case   39:*/		return 0x821566A0;
		  /* 821566A0h */ case   40:  		/* lis R3, -32235 */
		/* 821566A0h case   40:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 821566A0h case   40:*/		return 0x821566A4;
		  /* 821566A4h */ case   41:  		/* lis R8, -32235 */
		/* 821566A4h case   41:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 821566A4h case   41:*/		return 0x821566A8;
		  /* 821566A8h */ case   42:  		/* lis R4, -32235 */
		/* 821566A8h case   42:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8215);
		/* 821566A8h case   42:*/		return 0x821566AC;
		  /* 821566ACh */ case   43:  		/* lis R5, -32235 */
		/* 821566ACh case   43:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 821566ACh case   43:*/		return 0x821566B0;
		  /* 821566B0h */ case   44:  		/* lis R6, -32235 */
		/* 821566B0h case   44:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8215);
		/* 821566B0h case   44:*/		return 0x821566B4;
		  /* 821566B4h */ case   45:  		/* lis R7, -32235 */
		/* 821566B4h case   45:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 821566B4h case   45:*/		return 0x821566B8;
		  /* 821566B8h */ case   46:  		/* addi R10, R16, 23616 */
		/* 821566B8h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R16,0x5C40);
		/* 821566B8h case   46:*/		return 0x821566BC;
		  /* 821566BCh */ case   47:  		/* li R9, 0 */
		/* 821566BCh case   47:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821566BCh case   47:*/		return 0x821566C0;
		  /* 821566C0h */ case   48:  		/* stw R10, <#[R15 + 596]> */
		/* 821566C0h case   48:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000254) );
		/* 821566C0h case   48:*/		return 0x821566C4;
		  /* 821566C4h */ case   49:  		/* li R11, 34 */
		/* 821566C4h case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 821566C4h case   49:*/		return 0x821566C8;
		  /* 821566C8h */ case   50:  		/* li R10, 34 */
		/* 821566C8h case   50:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 821566C8h case   50:*/		return 0x821566CC;
		  /* 821566CCh */ case   51:  		/* stw R9, <#[R15 + 600]> */
		/* 821566CCh case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000258) );
		/* 821566CCh case   51:*/		return 0x821566D0;
		  /* 821566D0h */ case   52:  		/* stw R11, <#[R15 + 616]> */
		/* 821566D0h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000268) );
		/* 821566D0h case   52:*/		return 0x821566D4;
		  /* 821566D4h */ case   53:  		/* addi R9, R18, 23616 */
		/* 821566D4h case   53:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R18,0x5C40);
		/* 821566D4h case   53:*/		return 0x821566D8;
		  /* 821566D8h */ case   54:  		/* stw R10, <#[R15 + 608]> */
		/* 821566D8h case   54:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000260) );
		/* 821566D8h case   54:*/		return 0x821566DC;
		  /* 821566DCh */ case   55:  		/* addi R11, R20, 15424 */
		/* 821566DCh case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x3C40);
		/* 821566DCh case   55:*/		return 0x821566E0;
		  /* 821566E0h */ case   56:  		/* addi R10, R19, 23616 */
		/* 821566E0h case   56:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R19,0x5C40);
		/* 821566E0h case   56:*/		return 0x821566E4;
		  /* 821566E4h */ case   57:  		/* stw R9, <#[R15 + 612]> */
		/* 821566E4h case   57:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000264) );
		/* 821566E4h case   57:*/		return 0x821566E8;
		  /* 821566E8h */ case   58:  		/* stw R11, <#[R15 + 628]> */
		/* 821566E8h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000274) );
		/* 821566E8h case   58:*/		return 0x821566EC;
		  /* 821566ECh */ case   59:  		/* li R9, 46 */
		/* 821566ECh case   59:*/		cpu::op::li<0>(regs,&regs.R9,0x2E);
		/* 821566ECh case   59:*/		return 0x821566F0;
		  /* 821566F0h */ case   60:  		/* stw R10, <#[R15 + 620]> */
		/* 821566F0h case   60:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000026C) );
		/* 821566F0h case   60:*/		return 0x821566F4;
		  /* 821566F4h */ case   61:  		/* li R11, 13 */
		/* 821566F4h case   61:*/		cpu::op::li<0>(regs,&regs.R11,0xD);
		/* 821566F4h case   61:*/		return 0x821566F8;
		  /* 821566F8h */ case   62:  		/* li R10, 61 */
		/* 821566F8h case   62:*/		cpu::op::li<0>(regs,&regs.R10,0x3D);
		/* 821566F8h case   62:*/		return 0x821566FC;
		  /* 821566FCh */ case   63:  		/* stw R9, <#[R15 + 624]> */
		/* 821566FCh case   63:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000270) );
		/* 821566FCh case   63:*/		return 0x82156700;
		  /* 82156700h */ case   64:  		/* stw R11, <#[R15 + 640]> */
		/* 82156700h case   64:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000280) );
		/* 82156700h case   64:*/		return 0x82156704;
		  /* 82156704h */ case   65:  		/* addi R9, R21, 15424 */
		/* 82156704h case   65:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R21,0x3C40);
		/* 82156704h case   65:*/		return 0x82156708;
		  /* 82156708h */ case   66:  		/* stw R10, <#[R15 + 632]> */
		/* 82156708h case   66:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000278) );
		/* 82156708h case   66:*/		return 0x8215670C;
		  /* 8215670Ch */ case   67:  		/* addi R11, R23, 12520 */
		/* 8215670Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x30E8);
		/* 8215670Ch case   67:*/		return 0x82156710;
		  /* 82156710h */ case   68:  		/* addi R10, R22, 15424 */
		/* 82156710h case   68:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0x3C40);
		/* 82156710h case   68:*/		return 0x82156714;
		  /* 82156714h */ case   69:  		/* stw R9, <#[R15 + 636]> */
		/* 82156714h case   69:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x0000027C) );
		/* 82156714h case   69:*/		return 0x82156718;
		  /* 82156718h */ case   70:  		/* stw R11, <#[R15 + 652]> */
		/* 82156718h case   70:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000028C) );
		/* 82156718h case   70:*/		return 0x8215671C;
		  /* 8215671Ch */ case   71:  		/* li R9, 28 */
		/* 8215671Ch case   71:*/		cpu::op::li<0>(regs,&regs.R9,0x1C);
		/* 8215671Ch case   71:*/		return 0x82156720;
		  /* 82156720h */ case   72:  		/* stw R10, <#[R15 + 644]> */
		/* 82156720h case   72:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000284) );
		/* 82156720h case   72:*/		return 0x82156724;
		  /* 82156724h */ case   73:  		/* li R11, 34 */
		/* 82156724h case   73:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82156724h case   73:*/		return 0x82156728;
		  /* 82156728h */ case   74:  		/* li R10, 93 */
		/* 82156728h case   74:*/		cpu::op::li<0>(regs,&regs.R10,0x5D);
		/* 82156728h case   74:*/		return 0x8215672C;
		  /* 8215672Ch */ case   75:  		/* stw R9, <#[R15 + 648]> */
		/* 8215672Ch case   75:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000288) );
		/* 8215672Ch case   75:*/		return 0x82156730;
		  /* 82156730h */ case   76:  		/* stw R11, <#[R15 + 664]> */
		/* 82156730h case   76:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000298) );
		/* 82156730h case   76:*/		return 0x82156734;
		  /* 82156734h */ case   77:  		/* addi R9, R24, 22552 */
		/* 82156734h case   77:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R24,0x5818);
		/* 82156734h case   77:*/		return 0x82156738;
		  /* 82156738h */ case   78:  		/* stw R10, <#[R15 + 656]> */
		/* 82156738h case   78:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000290) );
		/* 82156738h case   78:*/		return 0x8215673C;
		  /* 8215673Ch */ case   79:  		/* addi R11, R26, 23616 */
		/* 8215673Ch case   79:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x5C40);
		/* 8215673Ch case   79:*/		return 0x82156740;
		  /* 82156740h */ case   80:  		/* addi R10, R25, 24568 */
		/* 82156740h case   80:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x5FF8);
		/* 82156740h case   80:*/		return 0x82156744;
		  /* 82156744h */ case   81:  		/* stw R9, <#[R15 + 660]> */
		/* 82156744h case   81:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000294) );
		/* 82156744h case   81:*/		return 0x82156748;
		  /* 82156748h */ case   82:  		/* stw R11, <#[R15 + 676]> */
		/* 82156748h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002A4) );
		/* 82156748h case   82:*/		return 0x8215674C;
		  /* 8215674Ch */ case   83:  		/* li R9, 34 */
		/* 8215674Ch case   83:*/		cpu::op::li<0>(regs,&regs.R9,0x22);
		/* 8215674Ch case   83:*/		return 0x82156750;
		  /* 82156750h */ case   84:  		/* stw R10, <#[R15 + 668]> */
		/* 82156750h case   84:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x0000029C) );
		/* 82156750h case   84:*/		return 0x82156754;
		  /* 82156754h */ case   85:  		/* li R11, 34 */
		/* 82156754h case   85:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82156754h case   85:*/		return 0x82156758;
		  /* 82156758h */ case   86:  		/* li R10, 34 */
		/* 82156758h case   86:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82156758h case   86:*/		return 0x8215675C;
		  /* 8215675Ch */ case   87:  		/* stw R9, <#[R15 + 672]> */
		/* 8215675Ch case   87:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002A0) );
		/* 8215675Ch case   87:*/		return 0x82156760;
		  /* 82156760h */ case   88:  		/* stw R11, <#[R15 + 688]> */
		/* 82156760h case   88:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002B0) );
		/* 82156760h case   88:*/		return 0x82156764;
		  /* 82156764h */ case   89:  		/* addi R9, R27, 24568 */
		/* 82156764h case   89:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x5FF8);
		/* 82156764h case   89:*/		return 0x82156768;
		  /* 82156768h */ case   90:  		/* stw R10, <#[R15 + 680]> */
		/* 82156768h case   90:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002A8) );
		/* 82156768h case   90:*/		return 0x8215676C;
		  /* 8215676Ch */ case   91:  		/* addi R11, R29, 12608 */
		/* 8215676Ch case   91:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x3140);
		/* 8215676Ch case   91:*/		return 0x82156770;
		  /* 82156770h */ case   92:  		/* addi R10, R28, 23616 */
		/* 82156770h case   92:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x5C40);
		/* 82156770h case   92:*/		return 0x82156774;
		  /* 82156774h */ case   93:  		/* stw R9, <#[R15 + 684]> */
		/* 82156774h case   93:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002AC) );
		/* 82156774h case   93:*/		return 0x82156778;
		  /* 82156778h */ case   94:  		/* stw R11, <#[R15 + 700]> */
		/* 82156778h case   94:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002BC) );
		/* 82156778h case   94:*/		return 0x8215677C;
		  /* 8215677Ch */ case   95:  		/* li R9, 71 */
		/* 8215677Ch case   95:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 8215677Ch case   95:*/		return 0x82156780;
		  /* 82156780h */ case   96:  		/* stw R10, <#[R15 + 692]> */
		/* 82156780h case   96:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002B4) );
		/* 82156780h case   96:*/		return 0x82156784;
		  /* 82156784h */ case   97:  		/* li R11, 33 */
		/* 82156784h case   97:*/		cpu::op::li<0>(regs,&regs.R11,0x21);
		/* 82156784h case   97:*/		return 0x82156788;
		  /* 82156788h */ case   98:  		/* li R10, 13 */
		/* 82156788h case   98:*/		cpu::op::li<0>(regs,&regs.R10,0xD);
		/* 82156788h case   98:*/		return 0x8215678C;
		  /* 8215678Ch */ case   99:  		/* stw R9, <#[R15 + 696]> */
		/* 8215678Ch case   99:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002B8) );
		/* 8215678Ch case   99:*/		return 0x82156790;
		  /* 82156790h */ case  100:  		/* stw R11, <#[R15 + 712]> */
		/* 82156790h case  100:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002C8) );
		/* 82156790h case  100:*/		return 0x82156794;
		  /* 82156794h */ case  101:  		/* addi R9, R30, 15424 */
		/* 82156794h case  101:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x3C40);
		/* 82156794h case  101:*/		return 0x82156798;
		  /* 82156798h */ case  102:  		/* stw R10, <#[R15 + 704]> */
		/* 82156798h case  102:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002C0) );
		/* 82156798h case  102:*/		return 0x8215679C;
		  /* 8215679Ch */ case  103:  		/* addi R11, R3, 15424 */
		/* 8215679Ch case  103:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x3C40);
		/* 8215679Ch case  103:*/		return 0x821567A0;
		  /* 821567A0h */ case  104:  		/* addi R10, R31, 21736 */
		/* 821567A0h case  104:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x54E8);
		/* 821567A0h case  104:*/		return 0x821567A4;
		  /* 821567A4h */ case  105:  		/* stw R9, <#[R15 + 708]> */
		/* 821567A4h case  105:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002C4) );
		/* 821567A4h case  105:*/		return 0x821567A8;
		  /* 821567A8h */ case  106:  		/* stw R11, <#[R15 + 724]> */
		/* 821567A8h case  106:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002D4) );
		/* 821567A8h case  106:*/		return 0x821567AC;
		  /* 821567ACh */ case  107:  		/* li R9, 33 */
		/* 821567ACh case  107:*/		cpu::op::li<0>(regs,&regs.R9,0x21);
		/* 821567ACh case  107:*/		return 0x821567B0;
		  /* 821567B0h */ case  108:  		/* stw R10, <#[R15 + 716]> */
		/* 821567B0h case  108:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002CC) );
		/* 821567B0h case  108:*/		return 0x821567B4;
		  /* 821567B4h */ case  109:  		/* li R11, 38 */
		/* 821567B4h case  109:*/		cpu::op::li<0>(regs,&regs.R11,0x26);
		/* 821567B4h case  109:*/		return 0x821567B8;
		  /* 821567B8h */ case  110:  		/* li R10, 37 */
		/* 821567B8h case  110:*/		cpu::op::li<0>(regs,&regs.R10,0x25);
		/* 821567B8h case  110:*/		return 0x821567BC;
		  /* 821567BCh */ case  111:  		/* stw R9, <#[R15 + 720]> */
		/* 821567BCh case  111:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002D0) );
		/* 821567BCh case  111:*/		return 0x821567C0;
		  /* 821567C0h */ case  112:  		/* stw R11, <#[R15 + 736]> */
		/* 821567C0h case  112:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002E0) );
		/* 821567C0h case  112:*/		return 0x821567C4;
		  /* 821567C4h */ case  113:  		/* addi R9, R8, 15424 */
		/* 821567C4h case  113:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x3C40);
		/* 821567C4h case  113:*/		return 0x821567C8;
		  /* 821567C8h */ case  114:  		/* addi R11, R4, 15424 */
		/* 821567C8h case  114:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x3C40);
		/* 821567C8h case  114:*/		return 0x821567CC;
		  /* 821567CCh */ case  115:  		/* stw R10, <#[R15 + 728]> */
		/* 821567CCh case  115:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002D8) );
		/* 821567CCh case  115:*/		return 0x821567D0;
		  /* 821567D0h */ case  116:  		/* li R10, 95 */
		/* 821567D0h case  116:*/		cpu::op::li<0>(regs,&regs.R10,0x5F);
		/* 821567D0h case  116:*/		return 0x821567D4;
		  /* 821567D4h */ case  117:  		/* stw R9, <#[R15 + 732]> */
		/* 821567D4h case  117:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002DC) );
		/* 821567D4h case  117:*/		return 0x821567D8;
		  /* 821567D8h */ case  118:  		/* stw R11, <#[R15 + 740]> */
		/* 821567D8h case  118:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002E4) );
		/* 821567D8h case  118:*/		return 0x821567DC;
		  /* 821567DCh */ case  119:  		/* addi R9, R5, 20064 */
		/* 821567DCh case  119:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0x4E60);
		/* 821567DCh case  119:*/		return 0x821567E0;
		  /* 821567E0h */ case  120:  		/* li R11, 86 */
		/* 821567E0h case  120:*/		cpu::op::li<0>(regs,&regs.R11,0x56);
		/* 821567E0h case  120:*/		return 0x821567E4;
		  /* 821567E4h */ case  121:  		/* stw R10, <#[R15 + 744]> */
		/* 821567E4h case  121:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002E8) );
		/* 821567E4h case  121:*/		return 0x821567E8;
		  /* 821567E8h */ case  122:  		/* addi R10, R6, 17792 */
		/* 821567E8h case  122:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x4580);
		/* 821567E8h case  122:*/		return 0x821567EC;
		  /* 821567ECh */ case  123:  		/* stw R9, <#[R15 + 748]> */
		/* 821567ECh case  123:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002EC) );
		/* 821567ECh case  123:*/		return 0x821567F0;
		  /* 821567F0h */ case  124:  		/* stw R11, <#[R15 + 752]> */
		/* 821567F0h case  124:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002F0) );
		/* 821567F0h case  124:*/		return 0x821567F4;
		  /* 821567F4h */ case  125:  		/* lis R8, -32235 */
		/* 821567F4h case  125:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 821567F4h case  125:*/		return 0x821567F8;
		  /* 821567F8h */ case  126:  		/* li R9, 94 */
		/* 821567F8h case  126:*/		cpu::op::li<0>(regs,&regs.R9,0x5E);
		/* 821567F8h case  126:*/		return 0x821567FC;
		  /* 821567FCh */ case  127:  		/* stw R10, <#[R15 + 756]> */
		/* 821567FCh case  127:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x000002F4) );
		/* 821567FCh case  127:*/		return 0x82156800;
		  /* 82156800h */ case  128:  		/* addi R11, R7, 20064 */
		/* 82156800h case  128:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4E60);
		/* 82156800h case  128:*/		return 0x82156804;
		  /* 82156804h */ case  129:  		/* stw R9, <#[R15 + 760]> */
		/* 82156804h case  129:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x000002F8) );
		/* 82156804h case  129:*/		return 0x82156808;
		  /* 82156808h */ case  130:  		/* li R10, 7 */
		/* 82156808h case  130:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 82156808h case  130:*/		return 0x8215680C;
		  /* 8215680Ch */ case  131:  		/* addi R9, R8, 16584 */
		/* 8215680Ch case  131:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x40C8);
		/* 8215680Ch case  131:*/		return 0x82156810;
		  /* 82156810h */ case  132:  		/* stw R11, <#[R15 + 764]> */
		/* 82156810h case  132:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x000002FC) );
		/* 82156810h case  132:*/		return 0x82156814;
		  /* 82156814h */ case  133:  		/* stw R10, <#[R15 + 768]> */
		/* 82156814h case  133:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R15 + 0x00000300) );
		/* 82156814h case  133:*/		return 0x82156818;
		  /* 82156818h */ case  134:  		/* stw R9, <#[R15 + 772]> */
		/* 82156818h case  134:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R15 + 0x00000304) );
		/* 82156818h case  134:*/		return 0x8215681C;
		  /* 8215681Ch */ case  135:  		/* b -808360 */
		/* 8215681Ch case  135:*/		return 0x82091274;
		/* 8215681Ch case  135:*/		return 0x82156820;
	}
	return 0x82156820;
} // Block from 82156600h-82156820h (136 instructions)

//////////////////////////////////////////////////////
// Block at 82156820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156820);
		  /* 82156820h */ case    0:  		/* mfspr R12, LR */
		/* 82156820h case    0:*/		regs.R12 = regs.LR;
		/* 82156820h case    0:*/		return 0x82156824;
		  /* 82156824h */ case    1:  		/* bl -808404 */
		/* 82156824h case    1:*/		regs.LR = 0x82156828; return 0x82091250;
		/* 82156824h case    1:*/		return 0x82156828;
		  /* 82156828h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82156828h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82156828h case    2:*/		return 0x8215682C;
		  /* 8215682Ch */ case    3:  		/* lis R11, -1 */
		/* 8215682Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215682Ch case    3:*/		return 0x82156830;
		  /* 82156830h */ case    4:  		/* mr R27, R3 */
		/* 82156830h case    4:*/		regs.R27 = regs.R3;
		/* 82156830h case    4:*/		return 0x82156834;
		  /* 82156834h */ case    5:  		/* ori R11, R11, 512 */
		/* 82156834h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82156834h case    5:*/		return 0x82156838;
		  /* 82156838h */ case    6:  		/* mr R26, R5 */
		/* 82156838h case    6:*/		regs.R26 = regs.R5;
		/* 82156838h case    6:*/		return 0x8215683C;
		  /* 8215683Ch */ case    7:  		/* cmplw CR6, R4, R11 */
		/* 8215683Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8215683Ch case    7:*/		return 0x82156840;
		  /* 82156840h */ case    8:  		/* bc 4, CR6_LT, 8 */
		/* 82156840h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82156848;  }
		/* 82156840h case    8:*/		return 0x82156844;
		  /* 82156844h */ case    9:  		/* bl 1116700 */
		/* 82156844h case    9:*/		regs.LR = 0x82156848; return 0x82267260;
		/* 82156844h case    9:*/		return 0x82156848;
	}
	return 0x82156848;
} // Block from 82156820h-82156848h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82156848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156848);
		  /* 82156848h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 82156848h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82156848h case    0:*/		return 0x8215684C;
		  /* 8215684Ch */ case    1:  		/* lwz R31, <#[R26]> */
		/* 8215684Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8215684Ch case    1:*/		return 0x82156850;
		  /* 82156850h */ case    2:  		/* addi R11, R11, 4 */
		/* 82156850h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82156850h case    2:*/		return 0x82156854;
		  /* 82156854h */ case    3:  		/* addi R30, R11, 4 */
		/* 82156854h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 82156854h case    3:*/		return 0x82156858;
		  /* 82156858h */ case    4:  		/* lwz R28, <#[R11]> */
		/* 82156858h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82156858h case    4:*/		return 0x8215685C;
		  /* 8215685Ch */ case    5:  		/* rlwinm R29, R28, 0, 21, 31 */
		/* 8215685Ch case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R29,regs.R28);
		/* 8215685Ch case    5:*/		return 0x82156860;
		  /* 82156860h */ case    6:  		/* cmplwi CR6, R29, 256 */
		/* 82156860h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000100);
		/* 82156860h case    6:*/		return 0x82156864;
		  /* 82156864h */ case    7:  		/* bc 12, CR6_LT, 12 */
		/* 82156864h case    7:*/		if ( regs.CR[6].lt ) { return 0x82156870;  }
		/* 82156864h case    7:*/		return 0x82156868;
		  /* 82156868h */ case    8:  		/* bl 1116664 */
		/* 82156868h case    8:*/		regs.LR = 0x8215686C; return 0x82267260;
		/* 82156868h case    8:*/		return 0x8215686C;
		  /* 8215686Ch */ case    9:  		/* li R29, 255 */
		/* 8215686Ch case    9:*/		cpu::op::li<0>(regs,&regs.R29,0xFF);
		/* 8215686Ch case    9:*/		return 0x82156870;
	}
	return 0x82156870;
} // Block from 82156848h-82156870h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82156870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156870);
		  /* 82156870h */ case    0:  		/* rlwimi R28, R28, 12, 21, 23 */
		/* 82156870h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R28,regs.R28);
		/* 82156870h case    0:*/		return 0x82156874;
		  /* 82156874h */ case    1:  		/* rlwinm R11, R28, 0, 19, 23 */
		/* 82156874h case    1:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R28);
		/* 82156874h case    1:*/		return 0x82156878;
		  /* 82156878h */ case    2:  		/* cmplwi CR6, R11, 512 */
		/* 82156878h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000200);
		/* 82156878h case    2:*/		return 0x8215687C;
		  /* 8215687Ch */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8215687Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82156884;  }
		/* 8215687Ch case    3:*/		return 0x82156880;
		  /* 82156880h */ case    4:  		/* bl 1116640 */
		/* 82156880h case    4:*/		regs.LR = 0x82156884; return 0x82267260;
		/* 82156880h case    4:*/		return 0x82156884;
	}
	return 0x82156884;
} // Block from 82156870h-82156884h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156884);
		  /* 82156884h */ case    0:  		/* li R11, 1 */
		/* 82156884h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82156884h case    0:*/		return 0x82156888;
		  /* 82156888h */ case    1:  		/* li R10, 28 */
		/* 82156888h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1C);
		/* 82156888h case    1:*/		return 0x8215688C;
		  /* 8215688Ch */ case    2:  		/* rlwimi R29, R11, 16, 0, 15 */
		/* 8215688Ch case    2:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R29,regs.R11);
		/* 8215688Ch case    2:*/		return 0x82156890;
		  /* 82156890h */ case    3:  		/* stw R10, <#[R31]> */
		/* 82156890h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82156890h case    3:*/		return 0x82156894;
		  /* 82156894h */ case    4:  		/* stwu R29, <#[R31 + 4]> */
		/* 82156894h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156894h case    4:*/		return 0x82156898;
		  /* 82156898h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82156898h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82156898h case    5:*/		return 0x8215689C;
		  /* 8215689Ch */ case    6:  		/* stwu R11, <#[R31 + 4]> */
		/* 8215689Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215689Ch case    6:*/		return 0x821568A0;
		  /* 821568A0h */ case    7:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821568A0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821568A0h case    7:*/		return 0x821568A4;
		  /* 821568A4h */ case    8:  		/* stwu R11, <#[R31 + 4]> */
		/* 821568A4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821568A4h case    8:*/		return 0x821568A8;
		  /* 821568A8h */ case    9:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821568A8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821568A8h case    9:*/		return 0x821568AC;
		  /* 821568ACh */ case   10:  		/* stwu R11, <#[R31 + 4]> */
		/* 821568ACh case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821568ACh case   10:*/		return 0x821568B0;
		  /* 821568B0h */ case   11:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821568B0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821568B0h case   11:*/		return 0x821568B4;
		  /* 821568B4h */ case   12:  		/* addi R10, R30, 4 */
		/* 821568B4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821568B4h case   12:*/		return 0x821568B8;
		  /* 821568B8h */ case   13:  		/* stwu R11, <#[R31 + 4]> */
		/* 821568B8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821568B8h case   13:*/		return 0x821568BC;
		  /* 821568BCh */ case   14:  		/* stw R10, <#[R27]> */
		/* 821568BCh case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821568BCh case   14:*/		return 0x821568C0;
		  /* 821568C0h */ case   15:  		/* addi R11, R31, 4 */
		/* 821568C0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821568C0h case   15:*/		return 0x821568C4;
		  /* 821568C4h */ case   16:  		/* stw R11, <#[R26]> */
		/* 821568C4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821568C4h case   16:*/		return 0x821568C8;
		  /* 821568C8h */ case   17:  		/* addi R1, R1, 144 */
		/* 821568C8h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821568C8h case   17:*/		return 0x821568CC;
		  /* 821568CCh */ case   18:  		/* b -808492 */
		/* 821568CCh case   18:*/		return 0x820912A0;
		/* 821568CCh case   18:*/		return 0x821568D0;
	}
	return 0x821568D0;
} // Block from 82156884h-821568D0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821568D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821568D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821568D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821568D0);
		  /* 821568D0h */ case    0:  		/* mfspr R12, LR */
		/* 821568D0h case    0:*/		regs.R12 = regs.LR;
		/* 821568D0h case    0:*/		return 0x821568D4;
		  /* 821568D4h */ case    1:  		/* bl -808580 */
		/* 821568D4h case    1:*/		regs.LR = 0x821568D8; return 0x82091250;
		/* 821568D4h case    1:*/		return 0x821568D8;
		  /* 821568D8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821568D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821568D8h case    2:*/		return 0x821568DC;
		  /* 821568DCh */ case    3:  		/* lis R11, -1 */
		/* 821568DCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821568DCh case    3:*/		return 0x821568E0;
		  /* 821568E0h */ case    4:  		/* mr R27, R3 */
		/* 821568E0h case    4:*/		regs.R27 = regs.R3;
		/* 821568E0h case    4:*/		return 0x821568E4;
		  /* 821568E4h */ case    5:  		/* ori R11, R11, 512 */
		/* 821568E4h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821568E4h case    5:*/		return 0x821568E8;
		  /* 821568E8h */ case    6:  		/* mr R26, R5 */
		/* 821568E8h case    6:*/		regs.R26 = regs.R5;
		/* 821568E8h case    6:*/		return 0x821568EC;
		  /* 821568ECh */ case    7:  		/* cmplw CR6, R4, R11 */
		/* 821568ECh case    7:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821568ECh case    7:*/		return 0x821568F0;
		  /* 821568F0h */ case    8:  		/* bc 4, CR6_LT, 8 */
		/* 821568F0h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821568F8;  }
		/* 821568F0h case    8:*/		return 0x821568F4;
		  /* 821568F4h */ case    9:  		/* bl 1116524 */
		/* 821568F4h case    9:*/		regs.LR = 0x821568F8; return 0x82267260;
		/* 821568F4h case    9:*/		return 0x821568F8;
	}
	return 0x821568F8;
} // Block from 821568D0h-821568F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821568F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821568F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821568F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821568F8);
		  /* 821568F8h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821568F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821568F8h case    0:*/		return 0x821568FC;
		  /* 821568FCh */ case    1:  		/* lwz R31, <#[R26]> */
		/* 821568FCh case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 821568FCh case    1:*/		return 0x82156900;
		  /* 82156900h */ case    2:  		/* addi R11, R11, 4 */
		/* 82156900h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82156900h case    2:*/		return 0x82156904;
		  /* 82156904h */ case    3:  		/* addi R30, R11, 4 */
		/* 82156904h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 82156904h case    3:*/		return 0x82156908;
		  /* 82156908h */ case    4:  		/* lwz R28, <#[R11]> */
		/* 82156908h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82156908h case    4:*/		return 0x8215690C;
		  /* 8215690Ch */ case    5:  		/* rlwinm R29, R28, 0, 21, 31 */
		/* 8215690Ch case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R29,regs.R28);
		/* 8215690Ch case    5:*/		return 0x82156910;
		  /* 82156910h */ case    6:  		/* cmplwi CR6, R29, 16 */
		/* 82156910h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 82156910h case    6:*/		return 0x82156914;
		  /* 82156914h */ case    7:  		/* bc 12, CR6_LT, 12 */
		/* 82156914h case    7:*/		if ( regs.CR[6].lt ) { return 0x82156920;  }
		/* 82156914h case    7:*/		return 0x82156918;
		  /* 82156918h */ case    8:  		/* bl 1116488 */
		/* 82156918h case    8:*/		regs.LR = 0x8215691C; return 0x82267260;
		/* 82156918h case    8:*/		return 0x8215691C;
		  /* 8215691Ch */ case    9:  		/* li R29, 15 */
		/* 8215691Ch case    9:*/		cpu::op::li<0>(regs,&regs.R29,0xF);
		/* 8215691Ch case    9:*/		return 0x82156920;
	}
	return 0x82156920;
} // Block from 821568F8h-82156920h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82156920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156920);
		  /* 82156920h */ case    0:  		/* rlwimi R28, R28, 12, 21, 23 */
		/* 82156920h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R28,regs.R28);
		/* 82156920h case    0:*/		return 0x82156924;
		  /* 82156924h */ case    1:  		/* rlwinm R11, R28, 0, 19, 23 */
		/* 82156924h case    1:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R28);
		/* 82156924h case    1:*/		return 0x82156928;
		  /* 82156928h */ case    2:  		/* cmplwi CR6, R11, 1792 */
		/* 82156928h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000700);
		/* 82156928h case    2:*/		return 0x8215692C;
		  /* 8215692Ch */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8215692Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82156934;  }
		/* 8215692Ch case    3:*/		return 0x82156930;
		  /* 82156930h */ case    4:  		/* bl 1116464 */
		/* 82156930h case    4:*/		regs.LR = 0x82156934; return 0x82267260;
		/* 82156930h case    4:*/		return 0x82156934;
	}
	return 0x82156934;
} // Block from 82156920h-82156934h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156934);
		  /* 82156934h */ case    0:  		/* li R11, 1 */
		/* 82156934h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82156934h case    0:*/		return 0x82156938;
		  /* 82156938h */ case    1:  		/* li R10, 28 */
		/* 82156938h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1C);
		/* 82156938h case    1:*/		return 0x8215693C;
		  /* 8215693Ch */ case    2:  		/* rlwimi R29, R11, 17, 0, 15 */
		/* 8215693Ch case    2:*/		cpu::op::rlwimi<0,17,0,15>(regs,&regs.R29,regs.R11);
		/* 8215693Ch case    2:*/		return 0x82156940;
		  /* 82156940h */ case    3:  		/* stw R10, <#[R31]> */
		/* 82156940h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82156940h case    3:*/		return 0x82156944;
		  /* 82156944h */ case    4:  		/* stwu R29, <#[R31 + 4]> */
		/* 82156944h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156944h case    4:*/		return 0x82156948;
		  /* 82156948h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82156948h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82156948h case    5:*/		return 0x8215694C;
		  /* 8215694Ch */ case    6:  		/* stwu R11, <#[R31 + 4]> */
		/* 8215694Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215694Ch case    6:*/		return 0x82156950;
		  /* 82156950h */ case    7:  		/* lwzu R11, <#[R30 + 4]> */
		/* 82156950h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82156950h case    7:*/		return 0x82156954;
		  /* 82156954h */ case    8:  		/* stwu R11, <#[R31 + 4]> */
		/* 82156954h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156954h case    8:*/		return 0x82156958;
		  /* 82156958h */ case    9:  		/* lwzu R11, <#[R30 + 4]> */
		/* 82156958h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82156958h case    9:*/		return 0x8215695C;
		  /* 8215695Ch */ case   10:  		/* stwu R11, <#[R31 + 4]> */
		/* 8215695Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215695Ch case   10:*/		return 0x82156960;
		  /* 82156960h */ case   11:  		/* lwzu R11, <#[R30 + 4]> */
		/* 82156960h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82156960h case   11:*/		return 0x82156964;
		  /* 82156964h */ case   12:  		/* addi R10, R30, 4 */
		/* 82156964h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 82156964h case   12:*/		return 0x82156968;
		  /* 82156968h */ case   13:  		/* stwu R11, <#[R31 + 4]> */
		/* 82156968h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156968h case   13:*/		return 0x8215696C;
		  /* 8215696Ch */ case   14:  		/* stw R10, <#[R27]> */
		/* 8215696Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8215696Ch case   14:*/		return 0x82156970;
		  /* 82156970h */ case   15:  		/* addi R11, R31, 4 */
		/* 82156970h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82156970h case   15:*/		return 0x82156974;
		  /* 82156974h */ case   16:  		/* stw R11, <#[R26]> */
		/* 82156974h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82156974h case   16:*/		return 0x82156978;
		  /* 82156978h */ case   17:  		/* addi R1, R1, 144 */
		/* 82156978h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82156978h case   17:*/		return 0x8215697C;
		  /* 8215697Ch */ case   18:  		/* b -808668 */
		/* 8215697Ch case   18:*/		return 0x820912A0;
		/* 8215697Ch case   18:*/		return 0x82156980;
		  /* 82156980h */ case   19:  		/* rlwinm. R10, R3, 0, 15, 15 */
		/* 82156980h case   19:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R3);
		/* 82156980h case   19:*/		return 0x82156984;
		  /* 82156984h */ case   20:  		/* li R11, 0 */
		/* 82156984h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82156984h case   20:*/		return 0x82156988;
		  /* 82156988h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 82156988h case   21:*/		if ( regs.CR[0].eq ) { return 0x82156998;  }
		/* 82156988h case   21:*/		return 0x8215698C;
		  /* 8215698Ch */ case   22:  		/* lwz R10, <#[R4]> */
		/* 8215698Ch case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 8215698Ch case   22:*/		return 0x82156990;
		  /* 82156990h */ case   23:  		/* stw R10, <#[R5]> */
		/* 82156990h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82156990h case   23:*/		return 0x82156994;
		  /* 82156994h */ case   24:  		/* b 8 */
		/* 82156994h case   24:*/		return 0x8215699C;
		/* 82156994h case   24:*/		return 0x82156998;
	}
	return 0x82156998;
} // Block from 82156934h-82156998h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82156998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156998);
		  /* 82156998h */ case    0:  		/* stw R11, <#[R5]> */
		/* 82156998h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82156998h case    0:*/		return 0x8215699C;
	}
	return 0x8215699C;
} // Block from 82156998h-8215699Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215699Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215699C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215699C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215699C);
		  /* 8215699Ch */ case    0:  		/* rlwinm. R10, R3, 0, 14, 14 */
		/* 8215699Ch case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R10,regs.R3);
		/* 8215699Ch case    0:*/		return 0x821569A0;
		  /* 821569A0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821569A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821569B0;  }
		/* 821569A0h case    1:*/		return 0x821569A4;
		  /* 821569A4h */ case    2:  		/* lwz R10, <#[R4 + 4]> */
		/* 821569A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821569A4h case    2:*/		return 0x821569A8;
		  /* 821569A8h */ case    3:  		/* stw R10, <#[R6]> */
		/* 821569A8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 821569A8h case    3:*/		return 0x821569AC;
		  /* 821569ACh */ case    4:  		/* b 8 */
		/* 821569ACh case    4:*/		return 0x821569B4;
		/* 821569ACh case    4:*/		return 0x821569B0;
	}
	return 0x821569B0;
} // Block from 8215699Ch-821569B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821569B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569B0);
		  /* 821569B0h */ case    0:  		/* stw R11, <#[R6]> */
		/* 821569B0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821569B0h case    0:*/		return 0x821569B4;
	}
	return 0x821569B4;
} // Block from 821569B0h-821569B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821569B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569B4);
		  /* 821569B4h */ case    0:  		/* rlwinm. R10, R3, 0, 13, 13 */
		/* 821569B4h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R3);
		/* 821569B4h case    0:*/		return 0x821569B8;
	}
	return 0x821569B8;
} // Block from 821569B4h-821569B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821569B8h
// Function '?TEXALUConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569B8);
		  /* 821569B8h */ case    0:  		/* bc 12, CR0_EQ, 16 */
		/* 821569B8h case    0:*/		if ( regs.CR[0].eq ) { return 0x821569C8;  }
		/* 821569B8h case    0:*/		return 0x821569BC;
		  /* 821569BCh */ case    1:  		/* lwz R10, <#[R4 + 8]> */
		/* 821569BCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821569BCh case    1:*/		return 0x821569C0;
		  /* 821569C0h */ case    2:  		/* stw R10, <#[R7]> */
		/* 821569C0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821569C0h case    2:*/		return 0x821569C4;
		  /* 821569C4h */ case    3:  		/* b 8 */
		/* 821569C4h case    3:*/		return 0x821569CC;
		/* 821569C4h case    3:*/		return 0x821569C8;
	}
	return 0x821569C8;
} // Block from 821569B8h-821569C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821569C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569C8);
		  /* 821569C8h */ case    0:  		/* stw R11, <#[R7]> */
		/* 821569C8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821569C8h case    0:*/		return 0x821569CC;
	}
	return 0x821569CC;
} // Block from 821569C8h-821569CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821569CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569CC);
		  /* 821569CCh */ case    0:  		/* rlwinm. R10, R3, 0, 12, 12 */
		/* 821569CCh case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R3);
		/* 821569CCh case    0:*/		return 0x821569D0;
		  /* 821569D0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821569D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821569D8;  }
		/* 821569D0h case    1:*/		return 0x821569D4;
		  /* 821569D4h */ case    2:  		/* lwz R11, <#[R4 + 12]> */
		/* 821569D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821569D4h case    2:*/		return 0x821569D8;
	}
	return 0x821569D8;
} // Block from 821569CCh-821569D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821569D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569D8);
		  /* 821569D8h */ case    0:  		/* stw R11, <#[R8]> */
		/* 821569D8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821569D8h case    0:*/		return 0x821569DC;
		  /* 821569DCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 821569DCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821569DCh case    1:*/		return 0x821569E0;
	}
	return 0x821569E0;
} // Block from 821569D8h-821569E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821569E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821569E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821569E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821569E0);
		  /* 821569E0h */ case    0:  		/* mfspr R12, LR */
		/* 821569E0h case    0:*/		regs.R12 = regs.LR;
		/* 821569E0h case    0:*/		return 0x821569E4;
		  /* 821569E4h */ case    1:  		/* bl -808848 */
		/* 821569E4h case    1:*/		regs.LR = 0x821569E8; return 0x82091254;
		/* 821569E4h case    1:*/		return 0x821569E8;
		  /* 821569E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821569E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821569E8h case    2:*/		return 0x821569EC;
		  /* 821569ECh */ case    3:  		/* lwz R27, <#[R5]> */
		/* 821569ECh case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R5 + 0x00000000) );
		/* 821569ECh case    3:*/		return 0x821569F0;
		  /* 821569F0h */ case    4:  		/* mr R29, R3 */
		/* 821569F0h case    4:*/		regs.R29 = regs.R3;
		/* 821569F0h case    4:*/		return 0x821569F4;
		  /* 821569F4h */ case    5:  		/* mr R30, R4 */
		/* 821569F4h case    5:*/		regs.R30 = regs.R4;
		/* 821569F4h case    5:*/		return 0x821569F8;
		  /* 821569F8h */ case    6:  		/* mr R28, R5 */
		/* 821569F8h case    6:*/		regs.R28 = regs.R5;
		/* 821569F8h case    6:*/		return 0x821569FC;
		  /* 821569FCh */ case    7:  		/* cmplwi CR6, R3, 16 */
		/* 821569FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000010);
		/* 821569FCh case    7:*/		return 0x82156A00;
		  /* 82156A00h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 82156A00h case    8:*/		if ( regs.CR[6].lt ) { return 0x82156A08;  }
		/* 82156A00h case    8:*/		return 0x82156A04;
		  /* 82156A04h */ case    9:  		/* bl 1116252 */
		/* 82156A04h case    9:*/		regs.LR = 0x82156A08; return 0x82267260;
		/* 82156A04h case    9:*/		return 0x82156A08;
	}
	return 0x82156A08;
} // Block from 821569E0h-82156A08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82156A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A08);
		  /* 82156A08h */ case    0:  		/* li R31, 0 */
		/* 82156A08h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82156A08h case    0:*/		return 0x82156A0C;
		  /* 82156A0Ch */ case    1:  		/* cmpwi CR6, R30, 0 */
		/* 82156A0Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82156A0Ch case    1:*/		return 0x82156A10;
		  /* 82156A10h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82156A10h case    2:*/		if ( regs.CR[6].eq ) { return 0x82156A58;  }
		/* 82156A10h case    2:*/		return 0x82156A14;
		  /* 82156A14h */ case    3:  		/* lis R11, 4096 */
		/* 82156A14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x1000);
		/* 82156A14h case    3:*/		return 0x82156A18;
		  /* 82156A18h */ case    4:  		/* cmpw CR6, R30, R11 */
		/* 82156A18h case    4:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 82156A18h case    4:*/		return 0x82156A1C;
		  /* 82156A1Ch */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 82156A1Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82156A50;  }
		/* 82156A1Ch case    5:*/		return 0x82156A20;
		  /* 82156A20h */ case    6:  		/* lis R11, 6144 */
		/* 82156A20h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x1800);
		/* 82156A20h case    6:*/		return 0x82156A24;
		  /* 82156A24h */ case    7:  		/* cmpw CR6, R30, R11 */
		/* 82156A24h case    7:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 82156A24h case    7:*/		return 0x82156A28;
		  /* 82156A28h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 82156A28h case    8:*/		if ( regs.CR[6].eq ) { return 0x82156A48;  }
		/* 82156A28h case    8:*/		return 0x82156A2C;
		  /* 82156A2Ch */ case    9:  		/* lis R11, 8192 */
		/* 82156A2Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x2000);
		/* 82156A2Ch case    9:*/		return 0x82156A30;
		  /* 82156A30h */ case   10:  		/* cmpw CR6, R30, R11 */
		/* 82156A30h case   10:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 82156A30h case   10:*/		return 0x82156A34;
		  /* 82156A34h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 82156A34h case   11:*/		if ( regs.CR[6].eq ) { return 0x82156A40;  }
		/* 82156A34h case   11:*/		return 0x82156A38;
		  /* 82156A38h */ case   12:  		/* bl 1116200 */
		/* 82156A38h case   12:*/		regs.LR = 0x82156A3C; return 0x82267260;
		/* 82156A38h case   12:*/		return 0x82156A3C;
		  /* 82156A3Ch */ case   13:  		/* b 32 */
		/* 82156A3Ch case   13:*/		return 0x82156A5C;
		/* 82156A3Ch case   13:*/		return 0x82156A40;
	}
	return 0x82156A40;
} // Block from 82156A08h-82156A40h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82156A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A40);
		  /* 82156A40h */ case    0:  		/* lis R31, 768 */
		/* 82156A40h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x300);
		/* 82156A40h case    0:*/		return 0x82156A44;
		  /* 82156A44h */ case    1:  		/* b 24 */
		/* 82156A44h case    1:*/		return 0x82156A5C;
		/* 82156A44h case    1:*/		return 0x82156A48;
	}
	return 0x82156A48;
} // Block from 82156A40h-82156A48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82156A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A48);
		  /* 82156A48h */ case    0:  		/* lis R31, 1024 */
		/* 82156A48h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x400);
		/* 82156A48h case    0:*/		return 0x82156A4C;
		  /* 82156A4Ch */ case    1:  		/* b 16 */
		/* 82156A4Ch case    1:*/		return 0x82156A5C;
		/* 82156A4Ch case    1:*/		return 0x82156A50;
	}
	return 0x82156A50;
} // Block from 82156A48h-82156A50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82156A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A50);
		  /* 82156A50h */ case    0:  		/* lis R31, 512 */
		/* 82156A50h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x200);
		/* 82156A50h case    0:*/		return 0x82156A54;
		  /* 82156A54h */ case    1:  		/* b 8 */
		/* 82156A54h case    1:*/		return 0x82156A5C;
		/* 82156A54h case    1:*/		return 0x82156A58;
	}
	return 0x82156A58;
} // Block from 82156A50h-82156A58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82156A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A58);
		  /* 82156A58h */ case    0:  		/* li R31, 0 */
		/* 82156A58h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82156A58h case    0:*/		return 0x82156A5C;
	}
	return 0x82156A5C;
} // Block from 82156A58h-82156A5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82156A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A5C);
		  /* 82156A5Ch */ case    0:  		/* rlwimi R31, R29, 16, 8, 15 */
		/* 82156A5Ch case    0:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R31,regs.R29);
		/* 82156A5Ch case    0:*/		return 0x82156A60;
		  /* 82156A60h */ case    1:  		/* li R11, 801 */
		/* 82156A60h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x321);
		/* 82156A60h case    1:*/		return 0x82156A64;
		  /* 82156A64h */ case    2:  		/* addi R10, R27, 4 */
		/* 82156A64h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x4);
		/* 82156A64h case    2:*/		return 0x82156A68;
		  /* 82156A68h */ case    3:  		/* rlwimi R31, R11, 27, 16, 31 */
		/* 82156A68h case    3:*/		cpu::op::rlwimi<0,27,16,31>(regs,&regs.R31,regs.R11);
		/* 82156A68h case    3:*/		return 0x82156A6C;
		  /* 82156A6Ch */ case    4:  		/* rlwimi R31, R11, 27, 3, 4 */
		/* 82156A6Ch case    4:*/		cpu::op::rlwimi<0,27,3,4>(regs,&regs.R31,regs.R11);
		/* 82156A6Ch case    4:*/		return 0x82156A70;
		  /* 82156A70h */ case    5:  		/* stw R31, <#[R27]> */
		/* 82156A70h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 82156A70h case    5:*/		return 0x82156A74;
		  /* 82156A74h */ case    6:  		/* stw R10, <#[R28]> */
		/* 82156A74h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82156A74h case    6:*/		return 0x82156A78;
		  /* 82156A78h */ case    7:  		/* addi R1, R1, 128 */
		/* 82156A78h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82156A78h case    7:*/		return 0x82156A7C;
		  /* 82156A7Ch */ case    8:  		/* b -808920 */
		/* 82156A7Ch case    8:*/		return 0x820912A4;
		/* 82156A7Ch case    8:*/		return 0x82156A80;
	}
	return 0x82156A80;
} // Block from 82156A5Ch-82156A80h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156A80);
		  /* 82156A80h */ case    0:  		/* mfspr R12, LR */
		/* 82156A80h case    0:*/		regs.R12 = regs.LR;
		/* 82156A80h case    0:*/		return 0x82156A84;
		  /* 82156A84h */ case    1:  		/* bl -809028 */
		/* 82156A84h case    1:*/		regs.LR = 0x82156A88; return 0x82091240;
		/* 82156A84h case    1:*/		return 0x82156A88;
		  /* 82156A88h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82156A88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82156A88h case    2:*/		return 0x82156A8C;
		  /* 82156A8Ch */ case    3:  		/* rlwinm R11, R5, 21, 3, 10 */
		/* 82156A8Ch case    3:*/		cpu::op::rlwinm<0,21,3,10>(regs,&regs.R11,regs.R5);
		/* 82156A8Ch case    3:*/		return 0x82156A90;
		  /* 82156A90h */ case    4:  		/* lwz R26, <#[R10]> */
		/* 82156A90h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R10 + 0x00000000) );
		/* 82156A90h case    4:*/		return 0x82156A94;
		  /* 82156A94h */ case    5:  		/* mr R27, R3 */
		/* 82156A94h case    5:*/		regs.R27 = regs.R3;
		/* 82156A94h case    5:*/		return 0x82156A98;
		  /* 82156A98h */ case    6:  		/* mr R31, R4 */
		/* 82156A98h case    6:*/		regs.R31 = regs.R4;
		/* 82156A98h case    6:*/		return 0x82156A9C;
		  /* 82156A9Ch */ case    7:  		/* mr R28, R5 */
		/* 82156A9Ch case    7:*/		regs.R28 = regs.R5;
		/* 82156A9Ch case    7:*/		return 0x82156AA0;
		  /* 82156AA0h */ case    8:  		/* mr R25, R6 */
		/* 82156AA0h case    8:*/		regs.R25 = regs.R6;
		/* 82156AA0h case    8:*/		return 0x82156AA4;
		  /* 82156AA4h */ case    9:  		/* mr R24, R7 */
		/* 82156AA4h case    9:*/		regs.R24 = regs.R7;
		/* 82156AA4h case    9:*/		return 0x82156AA8;
		  /* 82156AA8h */ case   10:  		/* mr R23, R8 */
		/* 82156AA8h case   10:*/		regs.R23 = regs.R8;
		/* 82156AA8h case   10:*/		return 0x82156AAC;
		  /* 82156AACh */ case   11:  		/* mr R30, R9 */
		/* 82156AACh case   11:*/		regs.R30 = regs.R9;
		/* 82156AACh case   11:*/		return 0x82156AB0;
		  /* 82156AB0h */ case   12:  		/* mr R22, R10 */
		/* 82156AB0h case   12:*/		regs.R22 = regs.R10;
		/* 82156AB0h case   12:*/		return 0x82156AB4;
		  /* 82156AB4h */ case   13:  		/* cmpwi CR6, R4, 13 */
		/* 82156AB4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000000D);
		/* 82156AB4h case   13:*/		return 0x82156AB8;
		  /* 82156AB8h */ case   14:  		/* ori R29, R11, 23 */
		/* 82156AB8h case   14:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x17);
		/* 82156AB8h case   14:*/		return 0x82156ABC;
		  /* 82156ABCh */ case   15:  		/* bc 4, CR6_GT, 8 */
		/* 82156ABCh case   15:*/		if ( !regs.CR[6].gt ) { return 0x82156AC4;  }
		/* 82156ABCh case   15:*/		return 0x82156AC0;
		  /* 82156AC0h */ case   16:  		/* bl 1116064 */
		/* 82156AC0h case   16:*/		regs.LR = 0x82156AC4; return 0x82267260;
		/* 82156AC0h case   16:*/		return 0x82156AC4;
	}
	return 0x82156AC4;
} // Block from 82156A80h-82156AC4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82156AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156AC4);
		  /* 82156AC4h */ case    0:  		/* cmplwi CR6, R27, 16 */
		/* 82156AC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000010);
		/* 82156AC4h case    0:*/		return 0x82156AC8;
		  /* 82156AC8h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82156AC8h case    1:*/		if ( regs.CR[6].lt ) { return 0x82156AD0;  }
		/* 82156AC8h case    1:*/		return 0x82156ACC;
		  /* 82156ACCh */ case    2:  		/* bl 1116052 */
		/* 82156ACCh case    2:*/		regs.LR = 0x82156AD0; return 0x82267260;
		/* 82156ACCh case    2:*/		return 0x82156AD0;
	}
	return 0x82156AD0;
} // Block from 82156AC4h-82156AD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156AD0);
		  /* 82156AD0h */ case    0:  		/* cmpwi CR6, R31, 5 */
		/* 82156AD0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000005);
		/* 82156AD0h case    0:*/		return 0x82156AD4;
		  /* 82156AD4h */ case    1:  		/* bc 4, CR6_EQ, 88 */
		/* 82156AD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156B2C;  }
		/* 82156AD4h case    1:*/		return 0x82156AD8;
		  /* 82156AD8h */ case    2:  		/* lwz R10, <#[R30 + 4]> */
		/* 82156AD8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82156AD8h case    2:*/		return 0x82156ADC;
		  /* 82156ADCh */ case    3:  		/* addi R11, R28, 1 */
		/* 82156ADCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x1);
		/* 82156ADCh case    3:*/		return 0x82156AE0;
		  /* 82156AE0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82156AE0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82156AE0h case    4:*/		return 0x82156AE4;
		  /* 82156AE4h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82156AE4h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82156AEC;  }
		/* 82156AE4h case    5:*/		return 0x82156AE8;
		  /* 82156AE8h */ case    6:  		/* mr R11, R10 */
		/* 82156AE8h case    6:*/		regs.R11 = regs.R10;
		/* 82156AE8h case    6:*/		return 0x82156AEC;
	}
	return 0x82156AEC;
} // Block from 82156AD0h-82156AECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156AEC);
		  /* 82156AECh */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 82156AECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82156AECh case    0:*/		return 0x82156AF0;
		  /* 82156AF0h */ case    1:  		/* stw R11, <#[R30 + 4]> */
		/* 82156AF0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82156AF0h case    1:*/		return 0x82156AF4;
		  /* 82156AF4h */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 82156AF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82156AF4h case    2:*/		return 0x82156AF8;
		  /* 82156AF8h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82156AF8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82156AF8h case    3:*/		return 0x82156AFC;
		  /* 82156AFCh */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82156AFCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82156B08;  }
		/* 82156AFCh case    4:*/		return 0x82156B00;
		  /* 82156B00h */ case    5:  		/* li R25, 0 */
		/* 82156B00h case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82156B00h case    5:*/		return 0x82156B04;
		  /* 82156B04h */ case    6:  		/* b 16 */
		/* 82156B04h case    6:*/		return 0x82156B14;
		/* 82156B04h case    6:*/		return 0x82156B08;
	}
	return 0x82156B08;
} // Block from 82156AECh-82156B08h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B08);
		  /* 82156B08h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82156B08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82156B08h case    0:*/		return 0x82156B0C;
		  /* 82156B0Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82156B0Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156B14;  }
		/* 82156B0Ch case    1:*/		return 0x82156B10;
		  /* 82156B10h */ case    2:  		/* li R25, 1 */
		/* 82156B10h case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82156B10h case    2:*/		return 0x82156B14;
	}
	return 0x82156B14;
} // Block from 82156B08h-82156B14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B14);
		  /* 82156B14h */ case    0:  		/* li R11, 5 */
		/* 82156B14h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82156B14h case    0:*/		return 0x82156B18;
		  /* 82156B18h */ case    1:  		/* cmplwi CR6, R28, 8 */
		/* 82156B18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000008);
		/* 82156B18h case    1:*/		return 0x82156B1C;
		  /* 82156B1Ch */ case    2:  		/* rlwimi R29, R11, 16, 11, 15 */
		/* 82156B1Ch case    2:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R29,regs.R11);
		/* 82156B1Ch case    2:*/		return 0x82156B20;
		  /* 82156B20h */ case    3:  		/* bc 12, CR6_LT, 60 */
		/* 82156B20h case    3:*/		if ( regs.CR[6].lt ) { return 0x82156B5C;  }
		/* 82156B20h case    3:*/		return 0x82156B24;
		  /* 82156B24h */ case    4:  		/* bl 1115964 */
		/* 82156B24h case    4:*/		regs.LR = 0x82156B28; return 0x82267260;
		/* 82156B24h case    4:*/		return 0x82156B28;
		  /* 82156B28h */ case    5:  		/* b 52 */
		/* 82156B28h case    5:*/		return 0x82156B5C;
		/* 82156B28h case    5:*/		return 0x82156B2C;
	}
	return 0x82156B2C;
} // Block from 82156B14h-82156B2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82156B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B2C);
		  /* 82156B2Ch */ case    0:  		/* cmpwi CR6, R31, 10 */
		/* 82156B2Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000000A);
		/* 82156B2Ch case    0:*/		return 0x82156B30;
		  /* 82156B30h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82156B30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156B40;  }
		/* 82156B30h case    1:*/		return 0x82156B34;
		  /* 82156B34h */ case    2:  		/* li R11, 1 */
		/* 82156B34h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82156B34h case    2:*/		return 0x82156B38;
		  /* 82156B38h */ case    3:  		/* rlwimi R29, R11, 17, 11, 15 */
		/* 82156B38h case    3:*/		cpu::op::rlwimi<0,17,11,15>(regs,&regs.R29,regs.R11);
		/* 82156B38h case    3:*/		return 0x82156B3C;
		  /* 82156B3Ch */ case    4:  		/* b 32 */
		/* 82156B3Ch case    4:*/		return 0x82156B5C;
		/* 82156B3Ch case    4:*/		return 0x82156B40;
	}
	return 0x82156B40;
} // Block from 82156B2Ch-82156B40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B40);
		  /* 82156B40h */ case    0:  		/* addi R11, R31, 1 */
		/* 82156B40h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82156B40h case    0:*/		return 0x82156B44;
		  /* 82156B44h */ case    1:  		/* rlwinm R10, R28, 21, 0, 10 */
		/* 82156B44h case    1:*/		cpu::op::rlwinm<0,21,0,10>(regs,&regs.R10,regs.R28);
		/* 82156B44h case    1:*/		return 0x82156B48;
		  /* 82156B48h */ case    2:  		/* rlwinm R11, R11, 25, 0, 6 */
		/* 82156B48h case    2:*/		cpu::op::rlwinm<0,25,0,6>(regs,&regs.R11,regs.R11);
		/* 82156B48h case    2:*/		return 0x82156B4C;
		  /* 82156B4Ch */ case    3:  		/* li R9, 5 */
		/* 82156B4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 82156B4Ch case    3:*/		return 0x82156B50;
		  /* 82156B50h */ case    4:  		/* or R11, R11, R10 */
		/* 82156B50h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82156B50h case    4:*/		return 0x82156B54;
		  /* 82156B54h */ case    5:  		/* rlwimi R29, R11, 0, 3, 10 */
		/* 82156B54h case    5:*/		cpu::op::rlwimi<0,0,3,10>(regs,&regs.R29,regs.R11);
		/* 82156B54h case    5:*/		return 0x82156B58;
		  /* 82156B58h */ case    6:  		/* rlwimi R29, R9, 16, 11, 15 */
		/* 82156B58h case    6:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R29,regs.R9);
		/* 82156B58h case    6:*/		return 0x82156B5C;
	}
	return 0x82156B5C;
} // Block from 82156B40h-82156B5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B5C);
		  /* 82156B5Ch */ case    0:  		/* cmplwi CR6, R27, 16 */
		/* 82156B5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000010);
		/* 82156B5Ch case    0:*/		return 0x82156B60;
		  /* 82156B60h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82156B60h case    1:*/		if ( regs.CR[6].lt ) { return 0x82156B68;  }
		/* 82156B60h case    1:*/		return 0x82156B64;
		  /* 82156B64h */ case    2:  		/* bl 1115900 */
		/* 82156B64h case    2:*/		regs.LR = 0x82156B68; return 0x82267260;
		/* 82156B64h case    2:*/		return 0x82156B68;
	}
	return 0x82156B68;
} // Block from 82156B5Ch-82156B68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156B68h
// Function '?CreateDXToILTable@XGRAPHICS@@YAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156B68);
		  /* 82156B68h */ case    0:  		/* addi R11, R27, 4 */
		/* 82156B68h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x4);
		/* 82156B68h case    0:*/		return 0x82156B6C;
		  /* 82156B6Ch */ case    1:  		/* lwz R10, <#[R30 + 16]> */
		/* 82156B6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82156B6Ch case    1:*/		return 0x82156B70;
		  /* 82156B70h */ case    2:  		/* li R9, 12 */
		/* 82156B70h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0xC);
		/* 82156B70h case    2:*/		return 0x82156B74;
		  /* 82156B74h */ case    3:  		/* rlwinm R5, R11, 3, 0, 28 */
		/* 82156B74h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R11);
		/* 82156B74h case    3:*/		return 0x82156B78;
		  /* 82156B78h */ case    4:  		/* rlwinm R11, R27, 3, 0, 28 */
		/* 82156B78h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R27);
		/* 82156B78h case    4:*/		return 0x82156B7C;
		  /* 82156B7Ch */ case    5:  		/* addi R8, R1, 80 */
		/* 82156B7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82156B7Ch case    5:*/		return 0x82156B80;
		  /* 82156B80h */ case    6:  		/* addi R7, R1, 84 */
		/* 82156B80h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 82156B80h case    6:*/		return 0x82156B84;
		  /* 82156B84h */ case    7:  		/* addi R6, R1, 88 */
		/* 82156B84h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82156B84h case    7:*/		return 0x82156B88;
		  /* 82156B88h */ case    8:  		/* stwx R9, <#[R5 + R10]> */
		/* 82156B88h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 82156B88h case    8:*/		return 0x82156B8C;
		  /* 82156B8Ch */ case    9:  		/* addi R5, R1, 92 */
		/* 82156B8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 82156B8Ch case    9:*/		return 0x82156B90;
		  /* 82156B90h */ case   10:  		/* lwz R10, <#[R30 + 16]> */
		/* 82156B90h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82156B90h case   10:*/		return 0x82156B94;
		  /* 82156B94h */ case   11:  		/* add R11, R11, R10 */
		/* 82156B94h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82156B94h case   11:*/		return 0x82156B98;
		  /* 82156B98h */ case   12:  		/* stw R27, <#[R11 + 28]> */
		/* 82156B98h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x0000001C) );
		/* 82156B98h case   12:*/		return 0x82156B9C;
		  /* 82156B9Ch */ case   13:  		/* mr R4, R24 */
		/* 82156B9Ch case   13:*/		regs.R4 = regs.R24;
		/* 82156B9Ch case   13:*/		return 0x82156BA0;
		  /* 82156BA0h */ case   14:  		/* mr R3, R23 */
		/* 82156BA0h case   14:*/		regs.R3 = regs.R23;
		/* 82156BA0h case   14:*/		return 0x82156BA4;
		  /* 82156BA4h */ case   15:  		/* bl -548 */
		/* 82156BA4h case   15:*/		regs.LR = 0x82156BA8; return 0x82156980;
		/* 82156BA4h case   15:*/		return 0x82156BA8;
		  /* 82156BA8h */ case   16:  		/* lwz R11, <#[R1 + 80]> */
		/* 82156BA8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82156BA8h case   16:*/		return 0x82156BAC;
		  /* 82156BACh */ case   17:  		/* lwz R10, <#[R1 + 84]> */
		/* 82156BACh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82156BACh case   17:*/		return 0x82156BB0;
		  /* 82156BB0h */ case   18:  		/* cmpwi CR6, R25, 0 */
		/* 82156BB0h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82156BB0h case   18:*/		return 0x82156BB4;
		  /* 82156BB4h */ case   19:  		/* lwz R9, <#[R1 + 88]> */
		/* 82156BB4h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 82156BB4h case   19:*/		return 0x82156BB8;
		  /* 82156BB8h */ case   20:  		/* lwz R8, <#[R1 + 92]> */
		/* 82156BB8h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 82156BB8h case   20:*/		return 0x82156BBC;
		  /* 82156BBCh */ case   21:  		/* bc 4, CR6_EQ, 48 */
		/* 82156BBCh case   21:*/		if ( !regs.CR[6].eq ) { return 0x82156BEC;  }
		/* 82156BBCh case   21:*/		return 0x82156BC0;
		  /* 82156BC0h */ case   22:  		/* cmpwi CR6, R8, 3 */
		/* 82156BC0h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000003);
		/* 82156BC0h case   22:*/		return 0x82156BC4;
		  /* 82156BC4h */ case   23:  		/* bc 4, CR6_EQ, 40 */
		/* 82156BC4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82156BEC;  }
		/* 82156BC4h case   23:*/		return 0x82156BC8;
		  /* 82156BC8h */ case   24:  		/* cmpwi CR6, R9, 3 */
		/* 82156BC8h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000003);
		/* 82156BC8h case   24:*/		return 0x82156BCC;
		  /* 82156BCCh */ case   25:  		/* bc 4, CR6_EQ, 32 */
		/* 82156BCCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x82156BEC;  }
		/* 82156BCCh case   25:*/		return 0x82156BD0;
		  /* 82156BD0h */ case   26:  		/* cmpwi CR6, R10, 3 */
		/* 82156BD0h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82156BD0h case   26:*/		return 0x82156BD4;
		  /* 82156BD4h */ case   27:  		/* bc 4, CR6_EQ, 24 */
		/* 82156BD4h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82156BEC;  }
		/* 82156BD4h case   27:*/		return 0x82156BD8;
		  /* 82156BD8h */ case   28:  		/* cmpwi CR6, R11, 3 */
		/* 82156BD8h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82156BD8h case   28:*/		return 0x82156BDC;
		  /* 82156BDCh */ case   29:  		/* bc 4, CR6_EQ, 16 */
		/* 82156BDCh case   29:*/		if ( !regs.CR[6].eq ) { return 0x82156BEC;  }
		/* 82156BDCh case   29:*/		return 0x82156BE0;
		  /* 82156BE0h */ case   30:  		/* rlwinm R10, R29, 0, 1, 31 */
		/* 82156BE0h case   30:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R10,regs.R29);
		/* 82156BE0h case   30:*/		return 0x82156BE4;
		  /* 82156BE4h */ case   31:  		/* stw R10, <#[R26]> */
		/* 82156BE4h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 82156BE4h case   31:*/		return 0x82156BE8;
		  /* 82156BE8h */ case   32:  		/* b 36 */
		/* 82156BE8h case   32:*/		return 0x82156C0C;
		/* 82156BE8h case   32:*/		return 0x82156BEC;
	}
	return 0x82156BEC;
} // Block from 82156B68h-82156BECh (33 instructions)

//////////////////////////////////////////////////////
// Block at 82156BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156BEC);
		  /* 82156BECh */ case    0:  		/* rlwimi R11, R25, 2, 29, 29 */
		/* 82156BECh case    0:*/		cpu::op::rlwimi<0,2,29,29>(regs,&regs.R11,regs.R25);
		/* 82156BECh case    0:*/		return 0x82156BF0;
		  /* 82156BF0h */ case    1:  		/* oris R7, R29, 32768 */
		/* 82156BF0h case    1:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R29,0x8000);
		/* 82156BF0h case    1:*/		return 0x82156BF4;
		  /* 82156BF4h */ case    2:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82156BF4h case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82156BF4h case    2:*/		return 0x82156BF8;
		  /* 82156BF8h */ case    3:  		/* stw R7, <#[R26]> */
		/* 82156BF8h case    3:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R26 + 0x00000000) );
		/* 82156BF8h case    3:*/		return 0x82156BFC;
		  /* 82156BFCh */ case    4:  		/* rlwimi R10, R11, 2, 0, 29 */
		/* 82156BFCh case    4:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82156BFCh case    4:*/		return 0x82156C00;
		  /* 82156C00h */ case    5:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 82156C00h case    5:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 82156C00h case    5:*/		return 0x82156C04;
		  /* 82156C04h */ case    6:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 82156C04h case    6:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 82156C04h case    6:*/		return 0x82156C08;
		  /* 82156C08h */ case    7:  		/* stwu R8, <#[R26 + 4]> */
		/* 82156C08h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 82156C08h case    7:*/		return 0x82156C0C;
	}
	return 0x82156C0C;
} // Block from 82156BECh-82156C0Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82156C0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156C0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156C0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156C0C);
		  /* 82156C0Ch */ case    0:  		/* addi R11, R26, 4 */
		/* 82156C0Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x4);
		/* 82156C0Ch case    0:*/		return 0x82156C10;
		  /* 82156C10h */ case    1:  		/* li R10, 3 */
		/* 82156C10h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82156C10h case    1:*/		return 0x82156C14;
		  /* 82156C14h */ case    2:  		/* addi R9, R11, 4 */
		/* 82156C14h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82156C14h case    2:*/		return 0x82156C18;
		  /* 82156C18h */ case    3:  		/* rlwimi R27, R10, 18, 0, 15 */
		/* 82156C18h case    3:*/		cpu::op::rlwimi<0,18,0,15>(regs,&regs.R27,regs.R10);
		/* 82156C18h case    3:*/		return 0x82156C1C;
		  /* 82156C1Ch */ case    4:  		/* stw R27, <#[R11]> */
		/* 82156C1Ch case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82156C1Ch case    4:*/		return 0x82156C20;
		  /* 82156C20h */ case    5:  		/* stw R9, <#[R22]> */
		/* 82156C20h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R22 + 0x00000000) );
		/* 82156C20h case    5:*/		return 0x82156C24;
		  /* 82156C24h */ case    6:  		/* addi R1, R1, 192 */
		/* 82156C24h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82156C24h case    6:*/		return 0x82156C28;
		  /* 82156C28h */ case    7:  		/* b -809368 */
		/* 82156C28h case    7:*/		return 0x82091290;
		/* 82156C28h case    7:*/		return 0x82156C2C;
		  /* 82156C2Ch */ case    8:  		/* nop */
		/* 82156C2Ch case    8:*/		cpu::op::nop();
		/* 82156C2Ch case    8:*/		return 0x82156C30;
	}
	return 0x82156C30;
} // Block from 82156C0Ch-82156C30h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156C30);
		  /* 82156C30h */ case    0:  		/* mfspr R12, LR */
		/* 82156C30h case    0:*/		regs.R12 = regs.LR;
		/* 82156C30h case    0:*/		return 0x82156C34;
		  /* 82156C34h */ case    1:  		/* bl -809456 */
		/* 82156C34h case    1:*/		regs.LR = 0x82156C38; return 0x82091244;
		/* 82156C34h case    1:*/		return 0x82156C38;
		  /* 82156C38h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82156C38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82156C38h case    2:*/		return 0x82156C3C;
		  /* 82156C3Ch */ case    3:  		/* lwz R30, <#[R10]> */
		/* 82156C3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 82156C3Ch case    3:*/		return 0x82156C40;
		  /* 82156C40h */ case    4:  		/* mr R27, R3 */
		/* 82156C40h case    4:*/		regs.R27 = regs.R3;
		/* 82156C40h case    4:*/		return 0x82156C44;
		  /* 82156C44h */ case    5:  		/* mr R31, R5 */
		/* 82156C44h case    5:*/		regs.R31 = regs.R5;
		/* 82156C44h case    5:*/		return 0x82156C48;
		  /* 82156C48h */ case    6:  		/* mr R25, R6 */
		/* 82156C48h case    6:*/		regs.R25 = regs.R6;
		/* 82156C48h case    6:*/		return 0x82156C4C;
		  /* 82156C4Ch */ case    7:  		/* mr R24, R7 */
		/* 82156C4Ch case    7:*/		regs.R24 = regs.R7;
		/* 82156C4Ch case    7:*/		return 0x82156C50;
		  /* 82156C50h */ case    8:  		/* mr R23, R8 */
		/* 82156C50h case    8:*/		regs.R23 = regs.R8;
		/* 82156C50h case    8:*/		return 0x82156C54;
		  /* 82156C54h */ case    9:  		/* mr R29, R9 */
		/* 82156C54h case    9:*/		regs.R29 = regs.R9;
		/* 82156C54h case    9:*/		return 0x82156C58;
		  /* 82156C58h */ case   10:  		/* mr R26, R10 */
		/* 82156C58h case   10:*/		regs.R26 = regs.R10;
		/* 82156C58h case   10:*/		return 0x82156C5C;
		  /* 82156C5Ch */ case   11:  		/* cmpwi CR6, R4, 10 */
		/* 82156C5Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000000A);
		/* 82156C5Ch case   11:*/		return 0x82156C60;
		  /* 82156C60h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 82156C60h case   12:*/		if ( regs.CR[6].eq ) { return 0x82156C78;  }
		/* 82156C60h case   12:*/		return 0x82156C64;
		  /* 82156C64h */ case   13:  		/* cmpwi CR6, R4, 5 */
		/* 82156C64h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000005);
		/* 82156C64h case   13:*/		return 0x82156C68;
		  /* 82156C68h */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 82156C68h case   14:*/		if ( regs.CR[6].eq ) { return 0x82156C90;  }
		/* 82156C68h case   14:*/		return 0x82156C6C;
		  /* 82156C6Ch */ case   15:  		/* bl 1115636 */
		/* 82156C6Ch case   15:*/		regs.LR = 0x82156C70; return 0x82267260;
		/* 82156C6Ch case   15:*/		return 0x82156C70;
		  /* 82156C70h */ case   16:  		/* lwz R28, <#[R1 + 92]> */
		/* 82156C70h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 82156C70h case   16:*/		return 0x82156C74;
		  /* 82156C74h */ case   17:  		/* b 92 */
		/* 82156C74h case   17:*/		return 0x82156CD0;
		/* 82156C74h case   17:*/		return 0x82156C78;
	}
	return 0x82156C78;
} // Block from 82156C30h-82156C78h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82156C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156C78);
		  /* 82156C78h */ case    0:  		/* cntlzw R11, R31 */
		/* 82156C78h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R31);
		/* 82156C78h case    0:*/		return 0x82156C7C;
		  /* 82156C7Ch */ case    1:  		/* li R31, 0 */
		/* 82156C7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82156C7Ch case    1:*/		return 0x82156C80;
		  /* 82156C80h */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82156C80h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82156C80h case    2:*/		return 0x82156C84;
		  /* 82156C84h */ case    3:  		/* xori R11, R11, 1 */
		/* 82156C84h case    3:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82156C84h case    3:*/		return 0x82156C88;
		  /* 82156C88h */ case    4:  		/* addi R28, R11, 18 */
		/* 82156C88h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x12);
		/* 82156C88h case    4:*/		return 0x82156C8C;
		  /* 82156C8Ch */ case    5:  		/* b 68 */
		/* 82156C8Ch case    5:*/		return 0x82156CD0;
		/* 82156C8Ch case    5:*/		return 0x82156C90;
	}
	return 0x82156C90;
} // Block from 82156C78h-82156C90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82156C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156C90);
		  /* 82156C90h */ case    0:  		/* lwz R10, <#[R29 + 4]> */
		/* 82156C90h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82156C90h case    0:*/		return 0x82156C94;
		  /* 82156C94h */ case    1:  		/* addi R11, R31, 1 */
		/* 82156C94h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82156C94h case    1:*/		return 0x82156C98;
		  /* 82156C98h */ case    2:  		/* li R28, 17 */
		/* 82156C98h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x11);
		/* 82156C98h case    2:*/		return 0x82156C9C;
		  /* 82156C9Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82156C9Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82156C9Ch case    3:*/		return 0x82156CA0;
		  /* 82156CA0h */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 82156CA0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x82156CA8;  }
		/* 82156CA0h case    4:*/		return 0x82156CA4;
		  /* 82156CA4h */ case    5:  		/* mr R11, R10 */
		/* 82156CA4h case    5:*/		regs.R11 = regs.R10;
		/* 82156CA4h case    5:*/		return 0x82156CA8;
	}
	return 0x82156CA8;
} // Block from 82156C90h-82156CA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82156CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156CA8);
		  /* 82156CA8h */ case    0:  		/* lwz R10, <#[R29 + 16]> */
		/* 82156CA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 82156CA8h case    0:*/		return 0x82156CAC;
		  /* 82156CACh */ case    1:  		/* stw R11, <#[R29 + 4]> */
		/* 82156CACh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82156CACh case    1:*/		return 0x82156CB0;
		  /* 82156CB0h */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 82156CB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82156CB0h case    2:*/		return 0x82156CB4;
		  /* 82156CB4h */ case    3:  		/* cmpwi CR6, R11, 1 */
		/* 82156CB4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82156CB4h case    3:*/		return 0x82156CB8;
		  /* 82156CB8h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82156CB8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82156CC4;  }
		/* 82156CB8h case    4:*/		return 0x82156CBC;
		  /* 82156CBCh */ case    5:  		/* li R25, 0 */
		/* 82156CBCh case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82156CBCh case    5:*/		return 0x82156CC0;
		  /* 82156CC0h */ case    6:  		/* b 16 */
		/* 82156CC0h case    6:*/		return 0x82156CD0;
		/* 82156CC0h case    6:*/		return 0x82156CC4;
	}
	return 0x82156CC4;
} // Block from 82156CA8h-82156CC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156CC4);
		  /* 82156CC4h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82156CC4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82156CC4h case    0:*/		return 0x82156CC8;
		  /* 82156CC8h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82156CC8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156CD0;  }
		/* 82156CC8h case    1:*/		return 0x82156CCC;
		  /* 82156CCCh */ case    2:  		/* li R25, 1 */
		/* 82156CCCh case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82156CCCh case    2:*/		return 0x82156CD0;
	}
	return 0x82156CD0;
} // Block from 82156CC4h-82156CD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156CD0);
		  /* 82156CD0h */ case    0:  		/* cmplwi CR6, R27, 16 */
		/* 82156CD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000010);
		/* 82156CD0h case    0:*/		return 0x82156CD4;
		  /* 82156CD4h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82156CD4h case    1:*/		if ( regs.CR[6].lt ) { return 0x82156CDC;  }
		/* 82156CD4h case    1:*/		return 0x82156CD8;
		  /* 82156CD8h */ case    2:  		/* bl 1115528 */
		/* 82156CD8h case    2:*/		regs.LR = 0x82156CDC; return 0x82267260;
		/* 82156CD8h case    2:*/		return 0x82156CDC;
	}
	return 0x82156CDC;
} // Block from 82156CD0h-82156CDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156CDC);
		  /* 82156CDCh */ case    0:  		/* addi R10, R27, 4 */
		/* 82156CDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x4);
		/* 82156CDCh case    0:*/		return 0x82156CE0;
		  /* 82156CE0h */ case    1:  		/* lwz R9, <#[R29 + 16]> */
		/* 82156CE0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 82156CE0h case    1:*/		return 0x82156CE4;
		  /* 82156CE4h */ case    2:  		/* rlwinm R11, R27, 3, 0, 28 */
		/* 82156CE4h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R27);
		/* 82156CE4h case    2:*/		return 0x82156CE8;
		  /* 82156CE8h */ case    3:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82156CE8h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82156CE8h case    3:*/		return 0x82156CEC;
		  /* 82156CECh */ case    4:  		/* addi R8, R1, 80 */
		/* 82156CECh case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82156CECh case    4:*/		return 0x82156CF0;
		  /* 82156CF0h */ case    5:  		/* addi R7, R1, 84 */
		/* 82156CF0h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 82156CF0h case    5:*/		return 0x82156CF4;
		  /* 82156CF4h */ case    6:  		/* addi R6, R1, 88 */
		/* 82156CF4h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82156CF4h case    6:*/		return 0x82156CF8;
		  /* 82156CF8h */ case    7:  		/* addi R5, R1, 92 */
		/* 82156CF8h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 82156CF8h case    7:*/		return 0x82156CFC;
		  /* 82156CFCh */ case    8:  		/* stwx R28, <#[R10 + R9]> */
		/* 82156CFCh case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82156CFCh case    8:*/		return 0x82156D00;
		  /* 82156D00h */ case    9:  		/* mr R4, R24 */
		/* 82156D00h case    9:*/		regs.R4 = regs.R24;
		/* 82156D00h case    9:*/		return 0x82156D04;
		  /* 82156D04h */ case   10:  		/* lwz R10, <#[R29 + 16]> */
		/* 82156D04h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 82156D04h case   10:*/		return 0x82156D08;
		  /* 82156D08h */ case   11:  		/* add R11, R11, R10 */
		/* 82156D08h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82156D08h case   11:*/		return 0x82156D0C;
		  /* 82156D0Ch */ case   12:  		/* stw R31, <#[R11 + 28]> */
		/* 82156D0Ch case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000001C) );
		/* 82156D0Ch case   12:*/		return 0x82156D10;
		  /* 82156D10h */ case   13:  		/* mr R3, R23 */
		/* 82156D10h case   13:*/		regs.R3 = regs.R23;
		/* 82156D10h case   13:*/		return 0x82156D14;
		  /* 82156D14h */ case   14:  		/* bl -916 */
		/* 82156D14h case   14:*/		regs.LR = 0x82156D18; return 0x82156980;
		/* 82156D14h case   14:*/		return 0x82156D18;
		  /* 82156D18h */ case   15:  		/* cntlzw R11, R25 */
		/* 82156D18h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R25);
		/* 82156D18h case   15:*/		return 0x82156D1C;
		  /* 82156D1Ch */ case   16:  		/* lwz R8, <#[R1 + 80]> */
		/* 82156D1Ch case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82156D1Ch case   16:*/		return 0x82156D20;
		  /* 82156D20h */ case   17:  		/* li R10, 22 */
		/* 82156D20h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x16);
		/* 82156D20h case   17:*/		return 0x82156D24;
		  /* 82156D24h */ case   18:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82156D24h case   18:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82156D24h case   18:*/		return 0x82156D28;
		  /* 82156D28h */ case   19:  		/* lwz R7, <#[R1 + 84]> */
		/* 82156D28h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 82156D28h case   19:*/		return 0x82156D2C;
		  /* 82156D2Ch */ case   20:  		/* lwz R6, <#[R1 + 92]> */
		/* 82156D2Ch case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 82156D2Ch case   20:*/		return 0x82156D30;
		  /* 82156D30h */ case   21:  		/* rlwimi R31, R28, 16, 10, 15 */
		/* 82156D30h case   21:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R31,regs.R28);
		/* 82156D30h case   21:*/		return 0x82156D34;
		  /* 82156D34h */ case   22:  		/* rlwimi R8, R11, 2, 29, 29 */
		/* 82156D34h case   22:*/		cpu::op::rlwimi<0,2,29,29>(regs,&regs.R8,regs.R11);
		/* 82156D34h case   22:*/		return 0x82156D38;
		  /* 82156D38h */ case   23:  		/* rlwinm R9, R31, 0, 10, 31 */
		/* 82156D38h case   23:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R9,regs.R31);
		/* 82156D38h case   23:*/		return 0x82156D3C;
		  /* 82156D3Ch */ case   24:  		/* rlwinm R8, R8, 0, 29, 31 */
		/* 82156D3Ch case   24:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R8);
		/* 82156D3Ch case   24:*/		return 0x82156D40;
		  /* 82156D40h */ case   25:  		/* rlwimi R7, R8, 2, 0, 29 */
		/* 82156D40h case   25:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R8);
		/* 82156D40h case   25:*/		return 0x82156D44;
		  /* 82156D44h */ case   26:  		/* lwz R11, <#[R1 + 88]> */
		/* 82156D44h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82156D44h case   26:*/		return 0x82156D48;
		  /* 82156D48h */ case   27:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 82156D48h case   27:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 82156D48h case   27:*/		return 0x82156D4C;
		  /* 82156D4Ch */ case   28:  		/* rlwimi R6, R11, 2, 0, 29 */
		/* 82156D4Ch case   28:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 82156D4Ch case   28:*/		return 0x82156D50;
		  /* 82156D50h */ case   29:  		/* rlwimi R10, R6, 16, 0, 15 */
		/* 82156D50h case   29:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R6);
		/* 82156D50h case   29:*/		return 0x82156D54;
		  /* 82156D54h */ case   30:  		/* stw R10, <#[R30]> */
		/* 82156D54h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82156D54h case   30:*/		return 0x82156D58;
		  /* 82156D58h */ case   31:  		/* stwu R9, <#[R30 + 4]> */
		/* 82156D58h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82156D58h case   31:*/		return 0x82156D5C;
		  /* 82156D5Ch */ case   32:  		/* addi R11, R30, 4 */
		/* 82156D5Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82156D5Ch case   32:*/		return 0x82156D60;
		  /* 82156D60h */ case   33:  		/* stw R11, <#[R26]> */
		/* 82156D60h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82156D60h case   33:*/		return 0x82156D64;
		  /* 82156D64h */ case   34:  		/* addi R1, R1, 176 */
		/* 82156D64h case   34:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82156D64h case   34:*/		return 0x82156D68;
		  /* 82156D68h */ case   35:  		/* b -809684 */
		/* 82156D68h case   35:*/		return 0x82091294;
		/* 82156D68h case   35:*/		return 0x82156D6C;
		  /* 82156D6Ch */ case   36:  		/* nop */
		/* 82156D6Ch case   36:*/		cpu::op::nop();
		/* 82156D6Ch case   36:*/		return 0x82156D70;
	}
	return 0x82156D70;
} // Block from 82156CDCh-82156D70h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82156D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156D70);
		  /* 82156D70h */ case    0:  		/* mfspr R12, LR */
		/* 82156D70h case    0:*/		regs.R12 = regs.LR;
		/* 82156D70h case    0:*/		return 0x82156D74;
		  /* 82156D74h */ case    1:  		/* bl -809784 */
		/* 82156D74h case    1:*/		regs.LR = 0x82156D78; return 0x8209123C;
		/* 82156D74h case    1:*/		return 0x82156D78;
		  /* 82156D78h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 82156D78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82156D78h case    2:*/		return 0x82156D7C;
		  /* 82156D7Ch */ case    3:  		/* lwz R31, <#[R3]> */
		/* 82156D7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82156D7Ch case    3:*/		return 0x82156D80;
		  /* 82156D80h */ case    4:  		/* mr R22, R3 */
		/* 82156D80h case    4:*/		regs.R22 = regs.R3;
		/* 82156D80h case    4:*/		return 0x82156D84;
		  /* 82156D84h */ case    5:  		/* mr R26, R4 */
		/* 82156D84h case    5:*/		regs.R26 = regs.R4;
		/* 82156D84h case    5:*/		return 0x82156D88;
		  /* 82156D88h */ case    6:  		/* mr R28, R5 */
		/* 82156D88h case    6:*/		regs.R28 = regs.R5;
		/* 82156D88h case    6:*/		return 0x82156D8C;
		  /* 82156D8Ch */ case    7:  		/* mr R25, R6 */
		/* 82156D8Ch case    7:*/		regs.R25 = regs.R6;
		/* 82156D8Ch case    7:*/		return 0x82156D90;
		  /* 82156D90h */ case    8:  		/* mr R24, R7 */
		/* 82156D90h case    8:*/		regs.R24 = regs.R7;
		/* 82156D90h case    8:*/		return 0x82156D94;
		  /* 82156D94h */ case    9:  		/* lbz R11, <#[R31]> */
		/* 82156D94h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82156D94h case    9:*/		return 0x82156D98;
		  /* 82156D98h */ case   10:  		/* mr R23, R8 */
		/* 82156D98h case   10:*/		regs.R23 = regs.R8;
		/* 82156D98h case   10:*/		return 0x82156D9C;
		  /* 82156D9Ch */ case   11:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 82156D9Ch case   11:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82156D9Ch case   11:*/		return 0x82156DA0;
		  /* 82156DA0h */ case   12:  		/* cmplwi CR6, R11, 2 */
		/* 82156DA0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82156DA0h case   12:*/		return 0x82156DA4;
		  /* 82156DA4h */ case   13:  		/* bc 12, CR6_EQ, 8 */
		/* 82156DA4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82156DAC;  }
		/* 82156DA4h case   13:*/		return 0x82156DA8;
		  /* 82156DA8h */ case   14:  		/* bl 1115320 */
		/* 82156DA8h case   14:*/		regs.LR = 0x82156DAC; return 0x82267260;
		/* 82156DA8h case   14:*/		return 0x82156DAC;
	}
	return 0x82156DAC;
} // Block from 82156D70h-82156DACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82156DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156DAC);
		  /* 82156DACh */ case    0:  		/* lis R11, -1 */
		/* 82156DACh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156DACh case    0:*/		return 0x82156DB0;
		  /* 82156DB0h */ case    1:  		/* ori R11, R11, 512 */
		/* 82156DB0h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82156DB0h case    1:*/		return 0x82156DB4;
		  /* 82156DB4h */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82156DB4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82156DB4h case    2:*/		return 0x82156DB8;
		  /* 82156DB8h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 82156DB8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82156DC0;  }
		/* 82156DB8h case    3:*/		return 0x82156DBC;
		  /* 82156DBCh */ case    4:  		/* bl 1115300 */
		/* 82156DBCh case    4:*/		regs.LR = 0x82156DC0; return 0x82267260;
		/* 82156DBCh case    4:*/		return 0x82156DC0;
	}
	return 0x82156DC0;
} // Block from 82156DACh-82156DC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156DC0);
		  /* 82156DC0h */ case    0:  		/* lwzu R29, <#[R31 + 4]> */
		/* 82156DC0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156DC0h case    0:*/		return 0x82156DC4;
		  /* 82156DC4h */ case    1:  		/* lwzu R30, <#[R31 + 4]> */
		/* 82156DC4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82156DC4h case    1:*/		return 0x82156DC8;
		  /* 82156DC8h */ case    2:  		/* mr R11, R30 */
		/* 82156DC8h case    2:*/		regs.R11 = regs.R30;
		/* 82156DC8h case    2:*/		return 0x82156DCC;
		  /* 82156DCCh */ case    3:  		/* addi R21, R31, 4 */
		/* 82156DCCh case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R31,0x4);
		/* 82156DCCh case    3:*/		return 0x82156DD0;
		  /* 82156DD0h */ case    4:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 82156DD0h case    4:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 82156DD0h case    4:*/		return 0x82156DD4;
		  /* 82156DD4h */ case    5:  		/* rlwinm R31, R30, 0, 21, 31 */
		/* 82156DD4h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R30);
		/* 82156DD4h case    5:*/		return 0x82156DD8;
		  /* 82156DD8h */ case    6:  		/* rlwinm R11, R11, 24, 27, 31 */
		/* 82156DD8h case    6:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R11,regs.R11);
		/* 82156DD8h case    6:*/		return 0x82156DDC;
		  /* 82156DDCh */ case    7:  		/* cmpwi CR6, R11, 10 */
		/* 82156DDCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000A);
		/* 82156DDCh case    7:*/		return 0x82156DE0;
		  /* 82156DE0h */ case    8:  		/* bc 4, CR6_EQ, 112 */
		/* 82156DE0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82156E50;  }
		/* 82156DE0h case    8:*/		return 0x82156DE4;
		  /* 82156DE4h */ case    9:  		/* cmplwi CR6, R31, 16 */
		/* 82156DE4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 82156DE4h case    9:*/		return 0x82156DE8;
		  /* 82156DE8h */ case   10:  		/* bc 12, CR6_LT, 40 */
		/* 82156DE8h case   10:*/		if ( regs.CR[6].lt ) { return 0x82156E10;  }
		/* 82156DE8h case   10:*/		return 0x82156DEC;
		  /* 82156DECh */ case   11:  		/* lis R11, -32252 */
		/* 82156DECh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82156DECh case   11:*/		return 0x82156DF0;
		  /* 82156DF0h */ case   12:  		/* li R5, 5105 */
		/* 82156DF0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x13F1);
		/* 82156DF0h case   12:*/		return 0x82156DF4;
		  /* 82156DF4h */ case   13:  		/* addi R6, R11, -25724 */
		/* 82156DF4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF9B84);
		/* 82156DF4h case   13:*/		return 0x82156DF8;
		  /* 82156DF8h */ case   14:  		/* li R4, 1 */
		/* 82156DF8h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82156DF8h case   14:*/		return 0x82156DFC;
		  /* 82156DFCh */ case   15:  		/* mtspr CTR, R23 */
		/* 82156DFCh case   15:*/		regs.CTR = regs.R23;
		/* 82156DFCh case   15:*/		return 0x82156E00;
		  /* 82156E00h */ case   16:  		/* mr R3, R24 */
		/* 82156E00h case   16:*/		regs.R3 = regs.R24;
		/* 82156E00h case   16:*/		return 0x82156E04;
		  /* 82156E04h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 82156E04h case   17:*/		if ( 1 ) { regs.LR = 0x82156E08; return (uint32)regs.CTR; }
		/* 82156E04h case   17:*/		return 0x82156E08;
		  /* 82156E08h */ case   18:  		/* li R3, 2 */
		/* 82156E08h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82156E08h case   18:*/		return 0x82156E0C;
		  /* 82156E0Ch */ case   19:  		/* b 404 */
		/* 82156E0Ch case   19:*/		return 0x82156FA0;
		/* 82156E0Ch case   19:*/		return 0x82156E10;
	}
	return 0x82156E10;
} // Block from 82156DC0h-82156E10h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82156E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E10);
		  /* 82156E10h */ case    0:  		/* mr R5, R25 */
		/* 82156E10h case    0:*/		regs.R5 = regs.R25;
		/* 82156E10h case    0:*/		return 0x82156E14;
		  /* 82156E14h */ case    1:  		/* rlwinm R4, R29, 0, 1, 4 */
		/* 82156E14h case    1:*/		cpu::op::rlwinm<0,0,1,4>(regs,&regs.R4,regs.R29);
		/* 82156E14h case    1:*/		return 0x82156E18;
		  /* 82156E18h */ case    2:  		/* mr R3, R31 */
		/* 82156E18h case    2:*/		regs.R3 = regs.R31;
		/* 82156E18h case    2:*/		return 0x82156E1C;
		  /* 82156E1Ch */ case    3:  		/* bl -1084 */
		/* 82156E1Ch case    3:*/		regs.LR = 0x82156E20; return 0x821569E0;
		/* 82156E1Ch case    3:*/		return 0x82156E20;
		  /* 82156E20h */ case    4:  		/* lwz R10, <#[R28 + 8]> */
		/* 82156E20h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 82156E20h case    4:*/		return 0x82156E24;
		  /* 82156E24h */ case    5:  		/* addi R11, R31, 1 */
		/* 82156E24h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82156E24h case    5:*/		return 0x82156E28;
		  /* 82156E28h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82156E28h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82156E28h case    6:*/		return 0x82156E2C;
		  /* 82156E2Ch */ case    7:  		/* bc 4, CR6_LT, 8 */
		/* 82156E2Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82156E34;  }
		/* 82156E2Ch case    7:*/		return 0x82156E30;
		  /* 82156E30h */ case    8:  		/* mr R11, R10 */
		/* 82156E30h case    8:*/		regs.R11 = regs.R10;
		/* 82156E30h case    8:*/		return 0x82156E34;
	}
	return 0x82156E34;
} // Block from 82156E10h-82156E34h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E34);
		  /* 82156E34h */ case    0:  		/* li R10, 1 */
		/* 82156E34h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82156E34h case    0:*/		return 0x82156E38;
		  /* 82156E38h */ case    1:  		/* stw R11, <#[R28 + 8]> */
		/* 82156E38h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82156E38h case    1:*/		return 0x82156E3C;
		  /* 82156E3Ch */ case    2:  		/* lwz R9, <#[R28 + 12]> */
		/* 82156E3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x0000000C) );
		/* 82156E3Ch case    2:*/		return 0x82156E40;
		  /* 82156E40h */ case    3:  		/* slw R11, R10, R31 */
		/* 82156E40h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R31);
		/* 82156E40h case    3:*/		return 0x82156E44;
		  /* 82156E44h */ case    4:  		/* or R11, R11, R9 */
		/* 82156E44h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82156E44h case    4:*/		return 0x82156E48;
		  /* 82156E48h */ case    5:  		/* stw R11, <#[R28 + 12]> */
		/* 82156E48h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 82156E48h case    5:*/		return 0x82156E4C;
		  /* 82156E4Ch */ case    6:  		/* b 332 */
		/* 82156E4Ch case    6:*/		return 0x82156F98;
		/* 82156E4Ch case    6:*/		return 0x82156E50;
	}
	return 0x82156E50;
} // Block from 82156E34h-82156E50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E50);
		  /* 82156E50h */ case    0:  		/* rlwinm R27, R30, 0, 12, 15 */
		/* 82156E50h case    0:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R27,regs.R30);
		/* 82156E50h case    0:*/		return 0x82156E54;
		  /* 82156E54h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82156E54h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82156E54h case    1:*/		return 0x82156E58;
		  /* 82156E58h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 82156E58h case    2:*/		if ( regs.CR[6].eq ) { return 0x82156EC4;  }
		/* 82156E58h case    2:*/		return 0x82156E5C;
		  /* 82156E5Ch */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 82156E5Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 82156E5Ch case    3:*/		return 0x82156E60;
		  /* 82156E60h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82156E60h case    4:*/		if ( regs.CR[6].eq ) { return 0x82156E88;  }
		/* 82156E60h case    4:*/		return 0x82156E64;
		  /* 82156E64h */ case    5:  		/* cmpwi CR6, R11, 17 */
		/* 82156E64h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000011);
		/* 82156E64h case    5:*/		return 0x82156E68;
		  /* 82156E68h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 82156E68h case    6:*/		if ( regs.CR[6].eq ) { return 0x82156E74;  }
		/* 82156E68h case    6:*/		return 0x82156E6C;
		  /* 82156E6Ch */ case    7:  		/* bl 1115124 */
		/* 82156E6Ch case    7:*/		regs.LR = 0x82156E70; return 0x82267260;
		/* 82156E6Ch case    7:*/		return 0x82156E70;
		  /* 82156E70h */ case    8:  		/* b 296 */
		/* 82156E70h case    8:*/		return 0x82156F98;
		/* 82156E70h case    8:*/		return 0x82156E74;
	}
	return 0x82156E74;
} // Block from 82156E50h-82156E74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82156E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E74);
		  /* 82156E74h */ case    0:  		/* lis R11, -1 */
		/* 82156E74h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156E74h case    0:*/		return 0x82156E78;
		  /* 82156E78h */ case    1:  		/* ori R11, R11, 768 */
		/* 82156E78h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82156E78h case    1:*/		return 0x82156E7C;
		  /* 82156E7Ch */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82156E7Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82156E7Ch case    2:*/		return 0x82156E80;
		  /* 82156E80h */ case    3:  		/* bc 4, CR6_LT, 280 */
		/* 82156E80h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82156F98;  }
		/* 82156E80h case    3:*/		return 0x82156E84;
		  /* 82156E84h */ case    4:  		/* b -24 */
		/* 82156E84h case    4:*/		return 0x82156E6C;
		/* 82156E84h case    4:*/		return 0x82156E88;
	}
	return 0x82156E88;
} // Block from 82156E74h-82156E88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E88);
		  /* 82156E88h */ case    0:  		/* lis R11, -1 */
		/* 82156E88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156E88h case    0:*/		return 0x82156E8C;
		  /* 82156E8Ch */ case    1:  		/* ori R11, R11, 768 */
		/* 82156E8Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82156E8Ch case    1:*/		return 0x82156E90;
		  /* 82156E90h */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82156E90h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82156E90h case    2:*/		return 0x82156E94;
		  /* 82156E94h */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 82156E94h case    3:*/		if ( regs.CR[6].lt ) { return 0x82156E9C;  }
		/* 82156E94h case    3:*/		return 0x82156E98;
		  /* 82156E98h */ case    4:  		/* bl 1115080 */
		/* 82156E98h case    4:*/		regs.LR = 0x82156E9C; return 0x82267260;
		/* 82156E98h case    4:*/		return 0x82156E9C;
	}
	return 0x82156E9C;
} // Block from 82156E88h-82156E9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156E9C);
		  /* 82156E9Ch */ case    0:  		/* cmplwi CR6, R31, 8 */
		/* 82156E9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 82156E9Ch case    0:*/		return 0x82156EA0;
		  /* 82156EA0h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82156EA0h case    1:*/		if ( regs.CR[6].lt ) { return 0x82156EA8;  }
		/* 82156EA0h case    1:*/		return 0x82156EA4;
		  /* 82156EA4h */ case    2:  		/* bl 1115068 */
		/* 82156EA4h case    2:*/		regs.LR = 0x82156EA8; return 0x82267260;
		/* 82156EA4h case    2:*/		return 0x82156EA8;
	}
	return 0x82156EA8;
} // Block from 82156E9Ch-82156EA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82156EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156EA8);
		  /* 82156EA8h */ case    0:  		/* lis R11, -32217 */
		/* 82156EA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82156EA8h case    0:*/		return 0x82156EAC;
		  /* 82156EACh */ case    1:  		/* li R6, 0 */
		/* 82156EACh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82156EACh case    1:*/		return 0x82156EB0;
		  /* 82156EB0h */ case    2:  		/* addi R7, R11, 19828 */
		/* 82156EB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4D74);
		/* 82156EB0h case    2:*/		return 0x82156EB4;
		  /* 82156EB4h */ case    3:  		/* mr R5, R31 */
		/* 82156EB4h case    3:*/		regs.R5 = regs.R31;
		/* 82156EB4h case    3:*/		return 0x82156EB8;
		  /* 82156EB8h */ case    4:  		/* li R4, 5 */
		/* 82156EB8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 82156EB8h case    4:*/		return 0x82156EBC;
		  /* 82156EBCh */ case    5:  		/* addi R3, R31, 2 */
		/* 82156EBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x2);
		/* 82156EBCh case    5:*/		return 0x82156EC0;
		  /* 82156EC0h */ case    6:  		/* b 200 */
		/* 82156EC0h case    6:*/		return 0x82156F88;
		/* 82156EC0h case    6:*/		return 0x82156EC4;
	}
	return 0x82156EC4;
} // Block from 82156EA8h-82156EC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156EC4);
		  /* 82156EC4h */ case    0:  		/* lis R11, -1 */
		/* 82156EC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156EC4h case    0:*/		return 0x82156EC8;
		  /* 82156EC8h */ case    1:  		/* ori R11, R11, 768 */
		/* 82156EC8h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82156EC8h case    1:*/		return 0x82156ECC;
		  /* 82156ECCh */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82156ECCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82156ECCh case    2:*/		return 0x82156ED0;
		  /* 82156ED0h */ case    3:  		/* bc 12, CR6_LT, 124 */
		/* 82156ED0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82156F4C;  }
		/* 82156ED0h case    3:*/		return 0x82156ED4;
		  /* 82156ED4h */ case    4:  		/* cmplwi CR6, R31, 16 */
		/* 82156ED4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 82156ED4h case    4:*/		return 0x82156ED8;
		  /* 82156ED8h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 82156ED8h case    5:*/		if ( regs.CR[6].lt ) { return 0x82156EE0;  }
		/* 82156ED8h case    5:*/		return 0x82156EDC;
		  /* 82156EDCh */ case    6:  		/* bl 1115012 */
		/* 82156EDCh case    6:*/		regs.LR = 0x82156EE0; return 0x82267260;
		/* 82156EDCh case    6:*/		return 0x82156EE0;
	}
	return 0x82156EE0;
} // Block from 82156EC4h-82156EE0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82156EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156EE0);
		  /* 82156EE0h */ case    0:  		/* rlwinm R4, R29, 0, 28, 31 */
		/* 82156EE0h case    0:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R4,regs.R29);
		/* 82156EE0h case    0:*/		return 0x82156EE4;
		  /* 82156EE4h */ case    1:  		/* rlwinm R6, R30, 10, 31, 31 */
		/* 82156EE4h case    1:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R6,regs.R30);
		/* 82156EE4h case    1:*/		return 0x82156EE8;
		  /* 82156EE8h */ case    2:  		/* rlwinm R5, R29, 16, 28, 31 */
		/* 82156EE8h case    2:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R5,regs.R29);
		/* 82156EE8h case    2:*/		return 0x82156EEC;
		  /* 82156EECh */ case    3:  		/* cmpwi CR6, R4, 10 */
		/* 82156EECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000000A);
		/* 82156EECh case    3:*/		return 0x82156EF0;
		  /* 82156EF0h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 82156EF0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82156EF8;  }
		/* 82156EF0h case    4:*/		return 0x82156EF4;
		  /* 82156EF4h */ case    5:  		/* li R6, 1 */
		/* 82156EF4h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82156EF4h case    5:*/		return 0x82156EF8;
	}
	return 0x82156EF8;
} // Block from 82156EE0h-82156EF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82156EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156EF8);
		  /* 82156EF8h */ case    0:  		/* cmpwi CR6, R4, 5 */
		/* 82156EF8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000005);
		/* 82156EF8h case    0:*/		return 0x82156EFC;
		  /* 82156EFCh */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 82156EFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156F2C;  }
		/* 82156EFCh case    1:*/		return 0x82156F00;
		  /* 82156F00h */ case    2:  		/* cmplwi CR6, R5, 8 */
		/* 82156F00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000008);
		/* 82156F00h case    2:*/		return 0x82156F04;
		  /* 82156F04h */ case    3:  		/* bc 12, CR6_LT, 40 */
		/* 82156F04h case    3:*/		if ( regs.CR[6].lt ) { return 0x82156F2C;  }
		/* 82156F04h case    3:*/		return 0x82156F08;
		  /* 82156F08h */ case    4:  		/* lis R11, -32252 */
		/* 82156F08h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82156F08h case    4:*/		return 0x82156F0C;
		  /* 82156F0Ch */ case    5:  		/* mr R6, R5 */
		/* 82156F0Ch case    5:*/		regs.R6 = regs.R5;
		/* 82156F0Ch case    5:*/		return 0x82156F10;
		  /* 82156F10h */ case    6:  		/* addi R5, R11, -25840 */
		/* 82156F10h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9B10);
		/* 82156F10h case    6:*/		return 0x82156F14;
		  /* 82156F14h */ case    7:  		/* li R4, 200 */
		/* 82156F14h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xC8);
		/* 82156F14h case    7:*/		return 0x82156F18;
		  /* 82156F18h */ case    8:  		/* addi R3, R1, 80 */
		/* 82156F18h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82156F18h case    8:*/		return 0x82156F1C;
		  /* 82156F1Ch */ case    9:  		/* bl 1121932 */
		/* 82156F1Ch case    9:*/		regs.LR = 0x82156F20; return 0x82268DA8;
		/* 82156F1Ch case    9:*/		return 0x82156F20;
		  /* 82156F20h */ case   10:  		/* addi R6, R1, 80 */
		/* 82156F20h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82156F20h case   10:*/		return 0x82156F24;
		  /* 82156F24h */ case   11:  		/* li R5, 5106 */
		/* 82156F24h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x13F2);
		/* 82156F24h case   11:*/		return 0x82156F28;
		  /* 82156F28h */ case   12:  		/* b -304 */
		/* 82156F28h case   12:*/		return 0x82156DF8;
		/* 82156F28h case   12:*/		return 0x82156F2C;
	}
	return 0x82156F2C;
} // Block from 82156EF8h-82156F2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82156F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F2C);
		  /* 82156F2Ch */ case    0:  		/* lis R11, -32217 */
		/* 82156F2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82156F2Ch case    0:*/		return 0x82156F30;
		  /* 82156F30h */ case    1:  		/* mr R10, R25 */
		/* 82156F30h case    1:*/		regs.R10 = regs.R25;
		/* 82156F30h case    1:*/		return 0x82156F34;
		  /* 82156F34h */ case    2:  		/* addi R7, R11, 19844 */
		/* 82156F34h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4D84);
		/* 82156F34h case    2:*/		return 0x82156F38;
		  /* 82156F38h */ case    3:  		/* mr R9, R28 */
		/* 82156F38h case    3:*/		regs.R9 = regs.R28;
		/* 82156F38h case    3:*/		return 0x82156F3C;
		  /* 82156F3Ch */ case    4:  		/* mr R8, R27 */
		/* 82156F3Ch case    4:*/		regs.R8 = regs.R27;
		/* 82156F3Ch case    4:*/		return 0x82156F40;
		  /* 82156F40h */ case    5:  		/* mr R3, R31 */
		/* 82156F40h case    5:*/		regs.R3 = regs.R31;
		/* 82156F40h case    5:*/		return 0x82156F44;
		  /* 82156F44h */ case    6:  		/* bl -1220 */
		/* 82156F44h case    6:*/		regs.LR = 0x82156F48; return 0x82156A80;
		/* 82156F44h case    6:*/		return 0x82156F48;
		  /* 82156F48h */ case    7:  		/* b 80 */
		/* 82156F48h case    7:*/		return 0x82156F98;
		/* 82156F48h case    7:*/		return 0x82156F4C;
	}
	return 0x82156F4C;
} // Block from 82156F2Ch-82156F4Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82156F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F4C);
		  /* 82156F4Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82156F4Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82156F4Ch case    0:*/		return 0x82156F50;
		  /* 82156F50h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82156F50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82156F60;  }
		/* 82156F50h case    1:*/		return 0x82156F54;
		  /* 82156F54h */ case    2:  		/* lis R11, -32217 */
		/* 82156F54h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82156F54h case    2:*/		return 0x82156F58;
		  /* 82156F58h */ case    3:  		/* addi R30, R11, 19796 */
		/* 82156F58h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4D54);
		/* 82156F58h case    3:*/		return 0x82156F5C;
		  /* 82156F5Ch */ case    4:  		/* b 24 */
		/* 82156F5Ch case    4:*/		return 0x82156F74;
		/* 82156F5Ch case    4:*/		return 0x82156F60;
	}
	return 0x82156F60;
} // Block from 82156F4Ch-82156F60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F60);
		  /* 82156F60h */ case    0:  		/* lis R11, -32217 */
		/* 82156F60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82156F60h case    0:*/		return 0x82156F64;
		  /* 82156F64h */ case    1:  		/* cmplwi CR6, R31, 2 */
		/* 82156F64h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 82156F64h case    1:*/		return 0x82156F68;
		  /* 82156F68h */ case    2:  		/* addi R30, R11, 19812 */
		/* 82156F68h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4D64);
		/* 82156F68h case    2:*/		return 0x82156F6C;
		  /* 82156F6Ch */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 82156F6Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82156F74;  }
		/* 82156F6Ch case    3:*/		return 0x82156F70;
		  /* 82156F70h */ case    4:  		/* bl 1114864 */
		/* 82156F70h case    4:*/		regs.LR = 0x82156F74; return 0x82267260;
		/* 82156F70h case    4:*/		return 0x82156F74;
	}
	return 0x82156F74;
} // Block from 82156F60h-82156F74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F74);
		  /* 82156F74h */ case    0:  		/* mr R7, R30 */
		/* 82156F74h case    0:*/		regs.R7 = regs.R30;
		/* 82156F74h case    0:*/		return 0x82156F78;
		  /* 82156F78h */ case    1:  		/* li R6, 1 */
		/* 82156F78h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82156F78h case    1:*/		return 0x82156F7C;
		  /* 82156F7Ch */ case    2:  		/* mr R5, R31 */
		/* 82156F7Ch case    2:*/		regs.R5 = regs.R31;
		/* 82156F7Ch case    2:*/		return 0x82156F80;
		  /* 82156F80h */ case    3:  		/* li R4, 10 */
		/* 82156F80h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 82156F80h case    3:*/		return 0x82156F84;
		  /* 82156F84h */ case    4:  		/* mr R3, R31 */
		/* 82156F84h case    4:*/		regs.R3 = regs.R31;
		/* 82156F84h case    4:*/		return 0x82156F88;
	}
	return 0x82156F88;
} // Block from 82156F74h-82156F88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82156F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F88);
		  /* 82156F88h */ case    0:  		/* mr R10, R25 */
		/* 82156F88h case    0:*/		regs.R10 = regs.R25;
		/* 82156F88h case    0:*/		return 0x82156F8C;
		  /* 82156F8Ch */ case    1:  		/* mr R9, R28 */
		/* 82156F8Ch case    1:*/		regs.R9 = regs.R28;
		/* 82156F8Ch case    1:*/		return 0x82156F90;
		  /* 82156F90h */ case    2:  		/* mr R8, R27 */
		/* 82156F90h case    2:*/		regs.R8 = regs.R27;
		/* 82156F90h case    2:*/		return 0x82156F94;
		  /* 82156F94h */ case    3:  		/* bl -868 */
		/* 82156F94h case    3:*/		regs.LR = 0x82156F98; return 0x82156C30;
		/* 82156F94h case    3:*/		return 0x82156F98;
	}
	return 0x82156F98;
} // Block from 82156F88h-82156F98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82156F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156F98);
		  /* 82156F98h */ case    0:  		/* stw R21, <#[R22]> */
		/* 82156F98h case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R22 + 0x00000000) );
		/* 82156F98h case    0:*/		return 0x82156F9C;
		  /* 82156F9Ch */ case    1:  		/* li R3, 0 */
		/* 82156F9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82156F9Ch case    1:*/		return 0x82156FA0;
	}
	return 0x82156FA0;
} // Block from 82156F98h-82156FA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82156FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156FA0);
		  /* 82156FA0h */ case    0:  		/* addi R1, R1, 384 */
		/* 82156FA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82156FA0h case    0:*/		return 0x82156FA4;
		  /* 82156FA4h */ case    1:  		/* b -810264 */
		/* 82156FA4h case    1:*/		return 0x8209128C;
		/* 82156FA4h case    1:*/		return 0x82156FA8;
	}
	return 0x82156FA8;
} // Block from 82156FA0h-82156FA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82156FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156FA8);
		  /* 82156FA8h */ case    0:  		/* mfspr R12, LR */
		/* 82156FA8h case    0:*/		regs.R12 = regs.LR;
		/* 82156FA8h case    0:*/		return 0x82156FAC;
		  /* 82156FACh */ case    1:  		/* bl -810332 */
		/* 82156FACh case    1:*/		regs.LR = 0x82156FB0; return 0x82091250;
		/* 82156FACh case    1:*/		return 0x82156FB0;
		  /* 82156FB0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82156FB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82156FB0h case    2:*/		return 0x82156FB4;
		  /* 82156FB4h */ case    3:  		/* lis R11, -1 */
		/* 82156FB4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82156FB4h case    3:*/		return 0x82156FB8;
		  /* 82156FB8h */ case    4:  		/* lwz R26, <#[R4 + 16]> */
		/* 82156FB8h case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R4 + 0x00000010) );
		/* 82156FB8h case    4:*/		return 0x82156FBC;
		  /* 82156FBCh */ case    5:  		/* mr R29, R4 */
		/* 82156FBCh case    5:*/		regs.R29 = regs.R4;
		/* 82156FBCh case    5:*/		return 0x82156FC0;
		  /* 82156FC0h */ case    6:  		/* ori R11, R11, 512 */
		/* 82156FC0h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82156FC0h case    6:*/		return 0x82156FC4;
		  /* 82156FC4h */ case    7:  		/* mr R27, R5 */
		/* 82156FC4h case    7:*/		regs.R27 = regs.R5;
		/* 82156FC4h case    7:*/		return 0x82156FC8;
		  /* 82156FC8h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 82156FC8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82156FC8h case    8:*/		return 0x82156FCC;
		  /* 82156FCCh */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82156FCCh case    9:*/		if ( regs.CR[6].lt ) { return 0x82156FD4;  }
		/* 82156FCCh case    9:*/		return 0x82156FD0;
		  /* 82156FD0h */ case   10:  		/* bl 1114768 */
		/* 82156FD0h case   10:*/		regs.LR = 0x82156FD4; return 0x82267260;
		/* 82156FD0h case   10:*/		return 0x82156FD4;
	}
	return 0x82156FD4;
} // Block from 82156FA8h-82156FD4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82156FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82156FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82156FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82156FD4);
		  /* 82156FD4h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 82156FD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82156FD4h case    0:*/		return 0x82156FD8;
		  /* 82156FD8h */ case    1:  		/* li R31, 0 */
		/* 82156FD8h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82156FD8h case    1:*/		return 0x82156FDC;
		  /* 82156FDCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82156FDCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82156FDCh case    2:*/		return 0x82156FE0;
		  /* 82156FE0h */ case    3:  		/* bc 4, CR6_GT, 76 */
		/* 82156FE0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8215702C;  }
		/* 82156FE0h case    3:*/		return 0x82156FE4;
		  /* 82156FE4h */ case    4:  		/* lwz R11, <#[R29 + 12]> */
		/* 82156FE4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82156FE4h case    4:*/		return 0x82156FE8;
		  /* 82156FE8h */ case    5:  		/* srw R11, R11, R31 */
		/* 82156FE8h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82156FE8h case    5:*/		return 0x82156FEC;
		  /* 82156FECh */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82156FECh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82156FECh case    6:*/		return 0x82156FF0;
		  /* 82156FF0h */ case    7:  		/* bc 12, CR0_EQ, 44 */
		/* 82156FF0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8215701C;  }
		/* 82156FF0h case    7:*/		return 0x82156FF4;
		  /* 82156FF4h */ case    8:  		/* lwz R30, <#[R27]> */
		/* 82156FF4h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 82156FF4h case    8:*/		return 0x82156FF8;
		  /* 82156FF8h */ case    9:  		/* cmplwi CR6, R31, 16 */
		/* 82156FF8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 82156FF8h case    9:*/		return 0x82156FFC;
		  /* 82156FFCh */ case   10:  		/* bc 12, CR6_LT, 8 */
		/* 82156FFCh case   10:*/		if ( regs.CR[6].lt ) { return 0x82157004;  }
		/* 82156FFCh case   10:*/		return 0x82157000;
		  /* 82157000h */ case   11:  		/* bl 1114720 */
		/* 82157000h case   11:*/		regs.LR = 0x82157004; return 0x82267260;
		/* 82157000h case   11:*/		return 0x82157004;
	}
	return 0x82157004;
} // Block from 82156FD4h-82157004h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82157004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157004);
		  /* 82157004h */ case    0:  		/* lis R11, 2048 */
		/* 82157004h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x800);
		/* 82157004h case    0:*/		return 0x82157008;
		  /* 82157008h */ case    1:  		/* addi R10, R30, 4 */
		/* 82157008h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 82157008h case    1:*/		return 0x8215700C;
		  /* 8215700Ch */ case    2:  		/* ori R11, R11, 25 */
		/* 8215700Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x19);
		/* 8215700Ch case    2:*/		return 0x82157010;
		  /* 82157010h */ case    3:  		/* rlwimi R11, R31, 16, 8, 15 */
		/* 82157010h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R11,regs.R31);
		/* 82157010h case    3:*/		return 0x82157014;
		  /* 82157014h */ case    4:  		/* stw R11, <#[R30]> */
		/* 82157014h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82157014h case    4:*/		return 0x82157018;
		  /* 82157018h */ case    5:  		/* stw R10, <#[R27]> */
		/* 82157018h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82157018h case    5:*/		return 0x8215701C;
	}
	return 0x8215701C;
} // Block from 82157004h-8215701Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215701Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215701C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215701C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215701C);
		  /* 8215701Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8215701Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8215701Ch case    0:*/		return 0x82157020;
		  /* 82157020h */ case    1:  		/* addi R31, R31, 1 */
		/* 82157020h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82157020h case    1:*/		return 0x82157024;
		  /* 82157024h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 82157024h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82157024h case    2:*/		return 0x82157028;
		  /* 82157028h */ case    3:  		/* bc 12, CR6_LT, -68 */
		/* 82157028h case    3:*/		if ( regs.CR[6].lt ) { return 0x82156FE4;  }
		/* 82157028h case    3:*/		return 0x8215702C;
	}
	return 0x8215702C;
} // Block from 8215701Ch-8215702Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215702Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215702C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215702C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215702C);
		  /* 8215702Ch */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 8215702Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8215702Ch case    0:*/		return 0x82157030;
		  /* 82157030h */ case    1:  		/* li R31, 0 */
		/* 82157030h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82157030h case    1:*/		return 0x82157034;
		  /* 82157034h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82157034h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157034h case    2:*/		return 0x82157038;
		  /* 82157038h */ case    3:  		/* bc 4, CR6_GT, 80 */
		/* 82157038h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82157088;  }
		/* 82157038h case    3:*/		return 0x8215703C;
		  /* 8215703Ch */ case    4:  		/* lis R11, -32217 */
		/* 8215703Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8215703Ch case    4:*/		return 0x82157040;
		  /* 82157040h */ case    5:  		/* addi R30, R11, 19828 */
		/* 82157040h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4D74);
		/* 82157040h case    5:*/		return 0x82157044;
		  /* 82157044h */ case    6:  		/* lwz R11, <#[R26 + 196]> */
		/* 82157044h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000000C4) );
		/* 82157044h case    6:*/		return 0x82157048;
		  /* 82157048h */ case    7:  		/* srw R11, R11, R31 */
		/* 82157048h case    7:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82157048h case    7:*/		return 0x8215704C;
		  /* 8215704Ch */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8215704Ch case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8215704Ch case    8:*/		return 0x82157050;
		  /* 82157050h */ case    9:  		/* bc 12, CR0_EQ, 40 */
		/* 82157050h case    9:*/		if ( regs.CR[0].eq ) { return 0x82157078;  }
		/* 82157050h case    9:*/		return 0x82157054;
		  /* 82157054h */ case   10:  		/* mr R7, R30 */
		/* 82157054h case   10:*/		regs.R7 = regs.R30;
		/* 82157054h case   10:*/		return 0x82157058;
		  /* 82157058h */ case   11:  		/* mr R10, R27 */
		/* 82157058h case   11:*/		regs.R10 = regs.R27;
		/* 82157058h case   11:*/		return 0x8215705C;
		  /* 8215705Ch */ case   12:  		/* mr R9, R29 */
		/* 8215705Ch case   12:*/		regs.R9 = regs.R29;
		/* 8215705Ch case   12:*/		return 0x82157060;
		  /* 82157060h */ case   13:  		/* lis R8, 15 */
		/* 82157060h case   13:*/		cpu::op::lis<0>(regs,&regs.R8,0xF);
		/* 82157060h case   13:*/		return 0x82157064;
		  /* 82157064h */ case   14:  		/* li R6, 0 */
		/* 82157064h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82157064h case   14:*/		return 0x82157068;
		  /* 82157068h */ case   15:  		/* mr R5, R31 */
		/* 82157068h case   15:*/		regs.R5 = regs.R31;
		/* 82157068h case   15:*/		return 0x8215706C;
		  /* 8215706Ch */ case   16:  		/* li R4, 5 */
		/* 8215706Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8215706Ch case   16:*/		return 0x82157070;
		  /* 82157070h */ case   17:  		/* addi R3, R31, 2 */
		/* 82157070h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x2);
		/* 82157070h case   17:*/		return 0x82157074;
		  /* 82157074h */ case   18:  		/* bl -1092 */
		/* 82157074h case   18:*/		regs.LR = 0x82157078; return 0x82156C30;
		/* 82157074h case   18:*/		return 0x82157078;
	}
	return 0x82157078;
} // Block from 8215702Ch-82157078h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82157078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157078);
		  /* 82157078h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 82157078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82157078h case    0:*/		return 0x8215707C;
		  /* 8215707Ch */ case    1:  		/* addi R31, R31, 1 */
		/* 8215707Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8215707Ch case    1:*/		return 0x82157080;
		  /* 82157080h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 82157080h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82157080h case    2:*/		return 0x82157084;
		  /* 82157084h */ case    3:  		/* bc 12, CR6_LT, -64 */
		/* 82157084h case    3:*/		if ( regs.CR[6].lt ) { return 0x82157044;  }
		/* 82157084h case    3:*/		return 0x82157088;
	}
	return 0x82157088;
} // Block from 82157078h-82157088h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157088);
		  /* 82157088h */ case    0:  		/* lis R10, -32217 */
		/* 82157088h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82157088h case    0:*/		return 0x8215708C;
		  /* 8215708Ch */ case    1:  		/* lis R11, -32217 */
		/* 8215708Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8215708Ch case    1:*/		return 0x82157090;
		  /* 82157090h */ case    2:  		/* li R31, 0 */
		/* 82157090h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82157090h case    2:*/		return 0x82157094;
		  /* 82157094h */ case    3:  		/* addi R30, R10, 19812 */
		/* 82157094h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4D64);
		/* 82157094h case    3:*/		return 0x82157098;
		  /* 82157098h */ case    4:  		/* addi R28, R11, 19796 */
		/* 82157098h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4D54);
		/* 82157098h case    4:*/		return 0x8215709C;
		  /* 8215709Ch */ case    5:  		/* addi R11, R31, 4 */
		/* 8215709Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8215709Ch case    5:*/		return 0x821570A0;
		  /* 821570A0h */ case    6:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821570A0h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821570A0h case    6:*/		return 0x821570A4;
		  /* 821570A4h */ case    7:  		/* lwzx R11, <#[R11 + R26]> */
		/* 821570A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821570A4h case    7:*/		return 0x821570A8;
		  /* 821570A8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821570A8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821570A8h case    8:*/		return 0x821570AC;
		  /* 821570ACh */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 821570ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x821570E0;  }
		/* 821570ACh case    9:*/		return 0x821570B0;
		  /* 821570B0h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821570B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821570B0h case   10:*/		return 0x821570B4;
		  /* 821570B4h */ case   11:  		/* mr R7, R28 */
		/* 821570B4h case   11:*/		regs.R7 = regs.R28;
		/* 821570B4h case   11:*/		return 0x821570B8;
		  /* 821570B8h */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 821570B8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821570C0;  }
		/* 821570B8h case   12:*/		return 0x821570BC;
		  /* 821570BCh */ case   13:  		/* mr R7, R30 */
		/* 821570BCh case   13:*/		regs.R7 = regs.R30;
		/* 821570BCh case   13:*/		return 0x821570C0;
	}
	return 0x821570C0;
} // Block from 82157088h-821570C0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821570C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821570C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821570C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821570C0);
		  /* 821570C0h */ case    0:  		/* mr R10, R27 */
		/* 821570C0h case    0:*/		regs.R10 = regs.R27;
		/* 821570C0h case    0:*/		return 0x821570C4;
		  /* 821570C4h */ case    1:  		/* mr R9, R29 */
		/* 821570C4h case    1:*/		regs.R9 = regs.R29;
		/* 821570C4h case    1:*/		return 0x821570C8;
		  /* 821570C8h */ case    2:  		/* lis R8, 15 */
		/* 821570C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xF);
		/* 821570C8h case    2:*/		return 0x821570CC;
		  /* 821570CCh */ case    3:  		/* li R6, 1 */
		/* 821570CCh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821570CCh case    3:*/		return 0x821570D0;
		  /* 821570D0h */ case    4:  		/* mr R5, R31 */
		/* 821570D0h case    4:*/		regs.R5 = regs.R31;
		/* 821570D0h case    4:*/		return 0x821570D4;
		  /* 821570D4h */ case    5:  		/* li R4, 10 */
		/* 821570D4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 821570D4h case    5:*/		return 0x821570D8;
		  /* 821570D8h */ case    6:  		/* mr R3, R31 */
		/* 821570D8h case    6:*/		regs.R3 = regs.R31;
		/* 821570D8h case    6:*/		return 0x821570DC;
		  /* 821570DCh */ case    7:  		/* bl -1196 */
		/* 821570DCh case    7:*/		regs.LR = 0x821570E0; return 0x82156C30;
		/* 821570DCh case    7:*/		return 0x821570E0;
	}
	return 0x821570E0;
} // Block from 821570C0h-821570E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821570E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821570E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821570E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821570E0);
		  /* 821570E0h */ case    0:  		/* addi R31, R31, 1 */
		/* 821570E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821570E0h case    0:*/		return 0x821570E4;
		  /* 821570E4h */ case    1:  		/* cmplwi CR6, R31, 2 */
		/* 821570E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000002);
		/* 821570E4h case    1:*/		return 0x821570E8;
		  /* 821570E8h */ case    2:  		/* bc 12, CR6_LT, -76 */
		/* 821570E8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8215709C;  }
		/* 821570E8h case    2:*/		return 0x821570EC;
		  /* 821570ECh */ case    3:  		/* addi R1, R1, 144 */
		/* 821570ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821570ECh case    3:*/		return 0x821570F0;
		  /* 821570F0h */ case    4:  		/* b -810576 */
		/* 821570F0h case    4:*/		return 0x820912A0;
		/* 821570F0h case    4:*/		return 0x821570F4;
		  /* 821570F4h */ case    5:  		/* nop */
		/* 821570F4h case    5:*/		cpu::op::nop();
		/* 821570F4h case    5:*/		return 0x821570F8;
	}
	return 0x821570F8;
} // Block from 821570E0h-821570F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821570F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821570F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821570F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821570F8);
		  /* 821570F8h */ case    0:  		/* mfspr R12, LR */
		/* 821570F8h case    0:*/		regs.R12 = regs.LR;
		/* 821570F8h case    0:*/		return 0x821570FC;
		  /* 821570FCh */ case    1:  		/* bl -810692 */
		/* 821570FCh case    1:*/		regs.LR = 0x82157100; return 0x82091238;
		/* 821570FCh case    1:*/		return 0x82157100;
		  /* 82157100h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82157100h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82157100h case    2:*/		return 0x82157104;
		  /* 82157104h */ case    3:  		/* lis R11, -1 */
		/* 82157104h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82157104h case    3:*/		return 0x82157108;
		  /* 82157108h */ case    4:  		/* lwz R24, <#[R5 + 16]> */
		/* 82157108h case    4:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R5 + 0x00000010) );
		/* 82157108h case    4:*/		return 0x8215710C;
		  /* 8215710Ch */ case    5:  		/* mr R30, R3 */
		/* 8215710Ch case    5:*/		regs.R30 = regs.R3;
		/* 8215710Ch case    5:*/		return 0x82157110;
		  /* 82157110h */ case    6:  		/* ori R11, R11, 512 */
		/* 82157110h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82157110h case    6:*/		return 0x82157114;
		  /* 82157114h */ case    7:  		/* mr R20, R4 */
		/* 82157114h case    7:*/		regs.R20 = regs.R4;
		/* 82157114h case    7:*/		return 0x82157118;
		  /* 82157118h */ case    8:  		/* mr R23, R5 */
		/* 82157118h case    8:*/		regs.R23 = regs.R5;
		/* 82157118h case    8:*/		return 0x8215711C;
		  /* 8215711Ch */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 8215711Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215711Ch case    9:*/		return 0x82157120;
		  /* 82157120h */ case   10:  		/* bc 12, CR6_LT, 8 */
		/* 82157120h case   10:*/		if ( regs.CR[6].lt ) { return 0x82157128;  }
		/* 82157120h case   10:*/		return 0x82157124;
		  /* 82157124h */ case   11:  		/* bl 1114428 */
		/* 82157124h case   11:*/		regs.LR = 0x82157128; return 0x82267260;
		/* 82157124h case   11:*/		return 0x82157128;
	}
	return 0x82157128;
} // Block from 821570F8h-82157128h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82157128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157128);
		  /* 82157128h */ case    0:  		/* lwz R11, <#[R24 + 432]> */
		/* 82157128h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000001B0) );
		/* 82157128h case    0:*/		return 0x8215712C;
		  /* 8215712Ch */ case    1:  		/* lwz R22, <#[R20]> */
		/* 8215712Ch case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R20 + 0x00000000) );
		/* 8215712Ch case    1:*/		return 0x82157130;
		  /* 82157130h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82157130h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157130h case    2:*/		return 0x82157134;
		  /* 82157134h */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82157134h case    3:*/		if ( regs.CR[6].eq ) { return 0x82157184;  }
		/* 82157134h case    3:*/		return 0x82157138;
		  /* 82157138h */ case    4:  		/* lwz R11, <#[R22]> */
		/* 82157138h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82157138h case    4:*/		return 0x8215713C;
		  /* 8215713Ch */ case    5:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8215713Ch case    5:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8215713Ch case    5:*/		return 0x82157140;
		  /* 82157140h */ case    6:  		/* bc 12, CR0_EQ, 68 */
		/* 82157140h case    6:*/		if ( regs.CR[0].eq ) { return 0x82157184;  }
		/* 82157140h case    6:*/		return 0x82157144;
		  /* 82157144h */ case    7:  		/* lwz R11, <#[R24 + 424]> */
		/* 82157144h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000001A8) );
		/* 82157144h case    7:*/		return 0x82157148;
		  /* 82157148h */ case    8:  		/* cmplwi CR6, R11, 28 */
		/* 82157148h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 82157148h case    8:*/		return 0x8215714C;
		  /* 8215714Ch */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 8215714Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x82157154;  }
		/* 8215714Ch case    9:*/		return 0x82157150;
		  /* 82157150h */ case   10:  		/* bl 1114384 */
		/* 82157150h case   10:*/		regs.LR = 0x82157154; return 0x82267260;
		/* 82157150h case   10:*/		return 0x82157154;
	}
	return 0x82157154;
} // Block from 82157128h-82157154h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82157154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157154);
		  /* 82157154h */ case    0:  		/* lwz R11, <#[R24 + 424]> */
		/* 82157154h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000001A8) );
		/* 82157154h case    0:*/		return 0x82157158;
		  /* 82157158h */ case    1:  		/* lwz R10, <#[R24 + 432]> */
		/* 82157158h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x000001B0) );
		/* 82157158h case    1:*/		return 0x8215715C;
		  /* 8215715Ch */ case    2:  		/* addi R11, R11, 25 */
		/* 8215715Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x19);
		/* 8215715Ch case    2:*/		return 0x82157160;
		  /* 82157160h */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82157160h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82157160h case    3:*/		return 0x82157164;
		  /* 82157164h */ case    4:  		/* stwx R10, <#[R11 + R24]> */
		/* 82157164h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 82157164h case    4:*/		return 0x82157168;
		  /* 82157168h */ case    5:  		/* lwz R11, <#[R24 + 424]> */
		/* 82157168h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000001A8) );
		/* 82157168h case    5:*/		return 0x8215716C;
		  /* 8215716Ch */ case    6:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8215716Ch case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8215716Ch case    6:*/		return 0x82157170;
		  /* 82157170h */ case    7:  		/* add R11, R11, R24 */
		/* 82157170h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 82157170h case    7:*/		return 0x82157174;
		  /* 82157174h */ case    8:  		/* stw R22, <#[R11 + 204]> */
		/* 82157174h case    8:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x000000CC) );
		/* 82157174h case    8:*/		return 0x82157178;
		  /* 82157178h */ case    9:  		/* lwz R11, <#[R24 + 424]> */
		/* 82157178h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000001A8) );
		/* 82157178h case    9:*/		return 0x8215717C;
		  /* 8215717Ch */ case   10:  		/* addi R11, R11, 1 */
		/* 8215717Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215717Ch case   10:*/		return 0x82157180;
		  /* 82157180h */ case   11:  		/* stw R11, <#[R24 + 424]> */
		/* 82157180h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x000001A8) );
		/* 82157180h case   11:*/		return 0x82157184;
	}
	return 0x82157184;
} // Block from 82157154h-82157184h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82157184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157184);
		  /* 82157184h */ case    0:  		/* stw R22, <#[R24 + 432]> */
		/* 82157184h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R24 + 0x000001B0) );
		/* 82157184h case    0:*/		return 0x82157188;
		  /* 82157188h */ case    1:  		/* lhz R27, <#[R22 + 2]> */
		/* 82157188h case    1:*/		cpu::mem::load16z( regs, &regs.R27, (uint32)(regs.R22 + 0x00000002) );
		/* 82157188h case    1:*/		return 0x8215718C;
		  /* 8215718Ch */ case    2:  		/* lwzu R11, <#[R22 + 4]> */
		/* 8215718Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		regs.R22 = (uint32)(regs.R22 + 0x00000004);
		/* 8215718Ch case    2:*/		return 0x82157190;
		  /* 82157190h */ case    3:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 82157190h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82157190h case    3:*/		return 0x82157194;
		  /* 82157194h */ case    4:  		/* bc 12, CR0_EQ, 564 */
		/* 82157194h case    4:*/		if ( regs.CR[0].eq ) { return 0x821573C8;  }
		/* 82157194h case    4:*/		return 0x82157198;
		  /* 82157198h */ case    5:  		/* mr R9, R11 */
		/* 82157198h case    5:*/		regs.R9 = regs.R11;
		/* 82157198h case    5:*/		return 0x8215719C;
		  /* 8215719Ch */ case    6:  		/* lis R10, -1 */
		/* 8215719Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8215719Ch case    6:*/		return 0x821571A0;
		  /* 821571A0h */ case    7:  		/* rlwimi R9, R11, 12, 21, 23 */
		/* 821571A0h case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R11);
		/* 821571A0h case    7:*/		return 0x821571A4;
		  /* 821571A4h */ case    8:  		/* ori R10, R10, 260 */
		/* 821571A4h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x104);
		/* 821571A4h case    8:*/		return 0x821571A8;
		  /* 821571A8h */ case    9:  		/* li R21, 1 */
		/* 821571A8h case    9:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821571A8h case    9:*/		return 0x821571AC;
		  /* 821571ACh */ case   10:  		/* addi R22, R22, 4 */
		/* 821571ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821571ACh case   10:*/		return 0x821571B0;
		  /* 821571B0h */ case   11:  		/* rlwinm R26, R9, 24, 27, 31 */
		/* 821571B0h case   11:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R26,regs.R9);
		/* 821571B0h case   11:*/		return 0x821571B4;
		  /* 821571B4h */ case   12:  		/* rlwinm R31, R11, 0, 21, 31 */
		/* 821571B4h case   12:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R11);
		/* 821571B4h case   12:*/		return 0x821571B8;
		  /* 821571B8h */ case   13:  		/* li R29, 0 */
		/* 821571B8h case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821571B8h case   13:*/		return 0x821571BC;
		  /* 821571BCh */ case   14:  		/* li R25, 0 */
		/* 821571BCh case   14:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821571BCh case   14:*/		return 0x821571C0;
		  /* 821571C0h */ case   15:  		/* li R28, 0 */
		/* 821571C0h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821571C0h case   15:*/		return 0x821571C4;
		  /* 821571C4h */ case   16:  		/* cmplw CR6, R30, R10 */
		/* 821571C4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821571C4h case   16:*/		return 0x821571C8;
		  /* 821571C8h */ case   17:  		/* bc 4, CR6_LT, 248 */
		/* 821571C8h case   17:*/		if ( !regs.CR[6].lt ) { return 0x821572C0;  }
		/* 821571C8h case   17:*/		return 0x821571CC;
		  /* 821571CCh */ case   18:  		/* addi R11, R27, -64 */
		/* 821571CCh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFC0);
		/* 821571CCh case   18:*/		return 0x821571D0;
		  /* 821571D0h */ case   19:  		/* cmplwi CR6, R11, 22 */
		/* 821571D0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000016);
		/* 821571D0h case   19:*/		return 0x821571D4;
		  /* 821571D4h */ case   20:  		/* bc 12, CR6_GT, 68 */
		/* 821571D4h case   20:*/		if ( regs.CR[6].gt ) { return 0x82157218;  }
		/* 821571D4h case   20:*/		return 0x821571D8;
		  /* 821571D8h */ case   21:  		/* lis R12, -32252 */
		/* 821571D8h case   21:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821571D8h case   21:*/		return 0x821571DC;
		  /* 821571DCh */ case   22:  		/* addi R12, R12, -25680 */
		/* 821571DCh case   22:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9BB0);
		/* 821571DCh case   22:*/		return 0x821571E0;
	}
	return 0x821571E0;
} // Block from 82157184h-821571E0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821571E0h
// Function '?DEFConvertToILFunc@XGRAPHICS@@YAXPAPAKKPAU_R400PSIL@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821571E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821571E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821571E0);
		  /* 821571E0h */ case    0:  		/* lbzx R0, <#[R12 + R11]> */
		/* 821571E0h case    0:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 821571E0h case    0:*/		return 0x821571E4;
		  /* 821571E4h */ case    1:  		/* lis R12, -32235 */
		/* 821571E4h case    1:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8215);
		/* 821571E4h case    1:*/		return 0x821571E8;
		  /* 821571E8h */ case    2:  		/* ori R0, R0, 0 */
		/* 821571E8h case    2:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821571E8h case    2:*/		return 0x821571EC;
		  /* 821571ECh */ case    3:  		/* addi R12, R12, 29184 */
		/* 821571ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x7200);
		/* 821571ECh case    3:*/		return 0x821571F0;
		  /* 821571F0h */ case    4:  		/* ori R0, R0, 0 */
		/* 821571F0h case    4:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821571F0h case    4:*/		return 0x821571F4;
		  /* 821571F4h */ case    5:  		/* add R12, R12, R0 */
		/* 821571F4h case    5:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821571F4h case    5:*/		return 0x821571F8;
		  /* 821571F8h */ case    6:  		/* mtspr CTR, R12 */
		/* 821571F8h case    6:*/		regs.CTR = regs.R12;
		/* 821571F8h case    6:*/		return 0x821571FC;
		  /* 821571FCh */ case    7:  		/* bcctr 20, CR0_LT */
		/* 821571FCh case    7:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821571FCh case    7:*/		return 0x82157200;
		  /* 82157200h */ case    8:  		/* mr R29, R21 */
		/* 82157200h case    8:*/		regs.R29 = regs.R21;
		/* 82157200h case    8:*/		return 0x82157204;
		  /* 82157204h */ case    9:  		/* mr R25, R21 */
		/* 82157204h case    9:*/		regs.R25 = regs.R21;
		/* 82157204h case    9:*/		return 0x82157208;
		  /* 82157208h */ case   10:  		/* mr R28, R21 */
		/* 82157208h case   10:*/		regs.R28 = regs.R21;
		/* 82157208h case   10:*/		return 0x8215720C;
		  /* 8215720Ch */ case   11:  		/* b 24 */
		/* 8215720Ch case   11:*/		return 0x82157224;
		/* 8215720Ch case   11:*/		return 0x82157210;
		  /* 82157210h */ case   12:  		/* mr R29, R21 */
		/* 82157210h case   12:*/		regs.R29 = regs.R21;
		/* 82157210h case   12:*/		return 0x82157214;
		  /* 82157214h */ case   13:  		/* b 12 */
		/* 82157214h case   13:*/		return 0x82157220;
		/* 82157214h case   13:*/		return 0x82157218;
	}
	return 0x82157218;
} // Block from 821571E0h-82157218h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82157218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157218);
		  /* 82157218h */ case    0:  		/* cmplwi CR6, R26, 3 */
		/* 82157218h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 82157218h case    0:*/		return 0x8215721C;
		  /* 8215721Ch */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8215721Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157224;  }
		/* 8215721Ch case    1:*/		return 0x82157220;
	}
	return 0x82157220;
} // Block from 82157218h-82157220h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157220);
		  /* 82157220h */ case    0:  		/* mr R25, R21 */
		/* 82157220h case    0:*/		regs.R25 = regs.R21;
		/* 82157220h case    0:*/		return 0x82157224;
	}
	return 0x82157224;
} // Block from 82157220h-82157224h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157224);
		  /* 82157224h */ case    0:  		/* cmplwi CR6, R31, 8 */
		/* 82157224h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 82157224h case    0:*/		return 0x82157228;
		  /* 82157228h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82157228h case    1:*/		if ( regs.CR[6].lt ) { return 0x82157230;  }
		/* 82157228h case    1:*/		return 0x8215722C;
		  /* 8215722Ch */ case    2:  		/* bl 1114164 */
		/* 8215722Ch case    2:*/		regs.LR = 0x82157230; return 0x82267260;
		/* 8215722Ch case    2:*/		return 0x82157230;
	}
	return 0x82157230;
} // Block from 82157224h-82157230h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82157230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157230);
		  /* 82157230h */ case    0:  		/* cmplwi CR6, R26, 3 */
		/* 82157230h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 82157230h case    0:*/		return 0x82157234;
		  /* 82157234h */ case    1:  		/* bc 4, CR6_EQ, 252 */
		/* 82157234h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157330;  }
		/* 82157234h case    1:*/		return 0x82157238;
		  /* 82157238h */ case    2:  		/* cmpwi CR6, R29, 0 */
		/* 82157238h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82157238h case    2:*/		return 0x8215723C;
		  /* 8215723Ch */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 8215723Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82157274;  }
		/* 8215723Ch case    3:*/		return 0x82157240;
		  /* 82157240h */ case    4:  		/* lwz R11, <#[R23 + 12]> */
		/* 82157240h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82157240h case    4:*/		return 0x82157244;
		  /* 82157244h */ case    5:  		/* slw R10, R21, R31 */
		/* 82157244h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R31);
		/* 82157244h case    5:*/		return 0x82157248;
		  /* 82157248h */ case    6:  		/* or R11, R10, R11 */
		/* 82157248h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82157248h case    6:*/		return 0x8215724C;
		  /* 8215724Ch */ case    7:  		/* cmplwi CR6, R31, 32 */
		/* 8215724Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000020);
		/* 8215724Ch case    7:*/		return 0x82157250;
		  /* 82157250h */ case    8:  		/* stw R11, <#[R23 + 12]> */
		/* 82157250h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 82157250h case    8:*/		return 0x82157254;
		  /* 82157254h */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82157254h case    9:*/		if ( regs.CR[6].lt ) { return 0x8215725C;  }
		/* 82157254h case    9:*/		return 0x82157258;
		  /* 82157258h */ case   10:  		/* bl 1114120 */
		/* 82157258h case   10:*/		regs.LR = 0x8215725C; return 0x82267260;
		/* 82157258h case   10:*/		return 0x8215725C;
	}
	return 0x8215725C;
} // Block from 82157230h-8215725Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215725Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215725C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215725C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215725C);
		  /* 8215725Ch */ case    0:  		/* lwz R10, <#[R23 + 8]> */
		/* 8215725Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 8215725Ch case    0:*/		return 0x82157260;
		  /* 82157260h */ case    1:  		/* addi R11, R31, 1 */
		/* 82157260h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82157260h case    1:*/		return 0x82157264;
		  /* 82157264h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82157264h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157264h case    2:*/		return 0x82157268;
		  /* 82157268h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 82157268h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82157270;  }
		/* 82157268h case    3:*/		return 0x8215726C;
		  /* 8215726Ch */ case    4:  		/* mr R11, R10 */
		/* 8215726Ch case    4:*/		regs.R11 = regs.R10;
		/* 8215726Ch case    4:*/		return 0x82157270;
	}
	return 0x82157270;
} // Block from 8215725Ch-82157270h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82157270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157270);
		  /* 82157270h */ case    0:  		/* stw R11, <#[R23 + 8]> */
		/* 82157270h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82157270h case    0:*/		return 0x82157274;
	}
	return 0x82157274;
} // Block from 82157270h-82157274h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157274);
		  /* 82157274h */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 82157274h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82157274h case    0:*/		return 0x82157278;
		  /* 82157278h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 82157278h case    1:*/		if ( regs.CR[6].eq ) { return 0x821572A4;  }
		/* 82157278h case    1:*/		return 0x8215727C;
		  /* 8215727Ch */ case    2:  		/* lwz R11, <#[R24 + 196]> */
		/* 8215727Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000000C4) );
		/* 8215727Ch case    2:*/		return 0x82157280;
		  /* 82157280h */ case    3:  		/* slw R10, R21, R31 */
		/* 82157280h case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R31);
		/* 82157280h case    3:*/		return 0x82157284;
		  /* 82157284h */ case    4:  		/* or R10, R10, R11 */
		/* 82157284h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82157284h case    4:*/		return 0x82157288;
		  /* 82157288h */ case    5:  		/* addi R11, R31, 1 */
		/* 82157288h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82157288h case    5:*/		return 0x8215728C;
		  /* 8215728Ch */ case    6:  		/* stw R10, <#[R24 + 196]> */
		/* 8215728Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x000000C4) );
		/* 8215728Ch case    6:*/		return 0x82157290;
	}
	return 0x82157290;
} // Block from 82157274h-82157290h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82157290h
// Function '?DEFIConvertToILFunc@XGRAPHICS@@YAXPAPAKKPAU_R400PSIL@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157290);
		  /* 82157290h */ case    0:  		/* lwz R10, <#[R23 + 4]> */
		/* 82157290h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 82157290h case    0:*/		return 0x82157294;
		  /* 82157294h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82157294h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157294h case    1:*/		return 0x82157298;
		  /* 82157298h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 82157298h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821572A0;  }
		/* 82157298h case    2:*/		return 0x8215729C;
		  /* 8215729Ch */ case    3:  		/* mr R11, R10 */
		/* 8215729Ch case    3:*/		regs.R11 = regs.R10;
		/* 8215729Ch case    3:*/		return 0x821572A0;
	}
	return 0x821572A0;
} // Block from 82157290h-821572A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821572A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821572A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821572A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821572A0);
		  /* 821572A0h */ case    0:  		/* stw R11, <#[R23 + 4]> */
		/* 821572A0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821572A0h case    0:*/		return 0x821572A4;
	}
	return 0x821572A4;
} // Block from 821572A0h-821572A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821572A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821572A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821572A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821572A4);
		  /* 821572A4h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 821572A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821572A4h case    0:*/		return 0x821572A8;
		  /* 821572A8h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 821572A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82157330;  }
		/* 821572A8h case    1:*/		return 0x821572AC;
		  /* 821572ACh */ case    2:  		/* addi R11, R31, 41 */
		/* 821572ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x29);
		/* 821572ACh case    2:*/		return 0x821572B0;
		  /* 821572B0h */ case    3:  		/* addi R10, R31, 6 */
		/* 821572B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x6);
		/* 821572B0h case    3:*/		return 0x821572B4;
		  /* 821572B4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821572B4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821572B4h case    4:*/		return 0x821572B8;
		  /* 821572B8h */ case    5:  		/* stwx R10, <#[R11 + R24]> */
		/* 821572B8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 821572B8h case    5:*/		return 0x821572BC;
		  /* 821572BCh */ case    6:  		/* b 116 */
		/* 821572BCh case    6:*/		return 0x82157330;
		/* 821572BCh case    6:*/		return 0x821572C0;
	}
	return 0x821572C0;
} // Block from 821572A4h-821572C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821572C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821572C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821572C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821572C0);
		  /* 821572C0h */ case    0:  		/* bc 12, CR6_EQ, 8 */
		/* 821572C0h case    0:*/		if ( regs.CR[6].eq ) { return 0x821572C8;  }
		/* 821572C0h case    0:*/		return 0x821572C4;
		  /* 821572C4h */ case    1:  		/* bl 1114012 */
		/* 821572C4h case    1:*/		regs.LR = 0x821572C8; return 0x82267260;
		/* 821572C4h case    1:*/		return 0x821572C8;
	}
	return 0x821572C8;
} // Block from 821572C0h-821572C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821572C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821572C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821572C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821572C8);
		  /* 821572C8h */ case    0:  		/* cmplwi CR6, R27, 65 */
		/* 821572C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000041);
		/* 821572C8h case    0:*/		return 0x821572CC;
		  /* 821572CCh */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 821572CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82157310;  }
		/* 821572CCh case    1:*/		return 0x821572D0;
		  /* 821572D0h */ case    2:  		/* cmplwi CR6, R27, 66 */
		/* 821572D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000042);
		/* 821572D0h case    2:*/		return 0x821572D4;
		  /* 821572D4h */ case    3:  		/* bc 4, CR6_EQ, 92 */
		/* 821572D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82157330;  }
		/* 821572D4h case    3:*/		return 0x821572D8;
		  /* 821572D8h */ case    4:  		/* lwz R11, <#[R23 + 12]> */
		/* 821572D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821572D8h case    4:*/		return 0x821572DC;
		  /* 821572DCh */ case    5:  		/* slw R10, R21, R31 */
		/* 821572DCh case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R31);
		/* 821572DCh case    5:*/		return 0x821572E0;
		  /* 821572E0h */ case    6:  		/* or R11, R10, R11 */
		/* 821572E0h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821572E0h case    6:*/		return 0x821572E4;
		  /* 821572E4h */ case    7:  		/* cmplwi CR6, R31, 32 */
		/* 821572E4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000020);
		/* 821572E4h case    7:*/		return 0x821572E8;
		  /* 821572E8h */ case    8:  		/* stw R11, <#[R23 + 12]> */
		/* 821572E8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821572E8h case    8:*/		return 0x821572EC;
		  /* 821572ECh */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 821572ECh case    9:*/		if ( regs.CR[6].lt ) { return 0x821572F4;  }
		/* 821572ECh case    9:*/		return 0x821572F0;
		  /* 821572F0h */ case   10:  		/* bl 1113968 */
		/* 821572F0h case   10:*/		regs.LR = 0x821572F4; return 0x82267260;
		/* 821572F0h case   10:*/		return 0x821572F4;
	}
	return 0x821572F4;
} // Block from 821572C8h-821572F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821572F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821572F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821572F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821572F4);
		  /* 821572F4h */ case    0:  		/* lwz R10, <#[R23 + 8]> */
		/* 821572F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821572F4h case    0:*/		return 0x821572F8;
		  /* 821572F8h */ case    1:  		/* addi R11, R31, 1 */
		/* 821572F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 821572F8h case    1:*/		return 0x821572FC;
		  /* 821572FCh */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 821572FCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821572FCh case    2:*/		return 0x82157300;
		  /* 82157300h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 82157300h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82157308;  }
		/* 82157300h case    3:*/		return 0x82157304;
		  /* 82157304h */ case    4:  		/* mr R11, R10 */
		/* 82157304h case    4:*/		regs.R11 = regs.R10;
		/* 82157304h case    4:*/		return 0x82157308;
	}
	return 0x82157308;
} // Block from 821572F4h-82157308h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82157308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157308);
		  /* 82157308h */ case    0:  		/* stw R11, <#[R23 + 8]> */
		/* 82157308h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82157308h case    0:*/		return 0x8215730C;
		  /* 8215730Ch */ case    1:  		/* b 36 */
		/* 8215730Ch case    1:*/		return 0x82157330;
		/* 8215730Ch case    1:*/		return 0x82157310;
	}
	return 0x82157310;
} // Block from 82157308h-82157310h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157310);
		  /* 82157310h */ case    0:  		/* cmplwi CR6, R26, 3 */
		/* 82157310h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 82157310h case    0:*/		return 0x82157314;
		  /* 82157314h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82157314h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157330;  }
		/* 82157314h case    1:*/		return 0x82157318;
		  /* 82157318h */ case    2:  		/* lwz R10, <#[R23 + 4]> */
		/* 82157318h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 82157318h case    2:*/		return 0x8215731C;
		  /* 8215731Ch */ case    3:  		/* addi R11, R31, 1 */
		/* 8215731Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 8215731Ch case    3:*/		return 0x82157320;
		  /* 82157320h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82157320h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157320h case    4:*/		return 0x82157324;
		  /* 82157324h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82157324h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8215732C;  }
		/* 82157324h case    5:*/		return 0x82157328;
		  /* 82157328h */ case    6:  		/* mr R11, R10 */
		/* 82157328h case    6:*/		regs.R11 = regs.R10;
		/* 82157328h case    6:*/		return 0x8215732C;
	}
	return 0x8215732C;
} // Block from 82157310h-8215732Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215732Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215732C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215732C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215732C);
		  /* 8215732Ch */ case    0:  		/* stw R11, <#[R23 + 4]> */
		/* 8215732Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 8215732Ch case    0:*/		return 0x82157330;
	}
	return 0x82157330;
} // Block from 8215732Ch-82157330h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157330);
		  /* 82157330h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 82157330h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82157330h case    0:*/		return 0x82157334;
		  /* 82157334h */ case    1:  		/* b 140 */
		/* 82157334h case    1:*/		return 0x821573C0;
		/* 82157334h case    1:*/		return 0x82157338;
		  /* 82157338h */ case    2:  		/* mr R10, R11 */
		/* 82157338h case    2:*/		regs.R10 = regs.R11;
		/* 82157338h case    2:*/		return 0x8215733C;
		  /* 8215733Ch */ case    3:  		/* rlwinm R31, R11, 0, 21, 31 */
		/* 8215733Ch case    3:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R11);
		/* 8215733Ch case    3:*/		return 0x82157340;
	}
	return 0x82157340;
} // Block from 82157330h-82157340h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157340h
// Function '?SetupRegDefault@XGRAPHICS@@YAXKPAW4ILImportComponent@1@0000@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157340);
		  /* 82157340h */ case    0:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 82157340h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 82157340h case    0:*/		return 0x82157344;
		  /* 82157344h */ case    1:  		/* rlwinm R11, R10, 24, 27, 31 */
		/* 82157344h case    1:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R11,regs.R10);
		/* 82157344h case    1:*/		return 0x82157348;
		  /* 82157348h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82157348h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82157348h case    2:*/		return 0x8215734C;
		  /* 8215734Ch */ case    3:  		/* bc 4, CR6_EQ, 80 */
		/* 8215734Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215739C;  }
		/* 8215734Ch case    3:*/		return 0x82157350;
		  /* 82157350h */ case    4:  		/* addi R11, R31, 41 */
		/* 82157350h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x29);
		/* 82157350h case    4:*/		return 0x82157354;
		  /* 82157354h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82157354h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82157354h case    5:*/		return 0x82157358;
		  /* 82157358h */ case    6:  		/* lwzx R11, <#[R11 + R24]> */
		/* 82157358h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 82157358h case    6:*/		return 0x8215735C;
		  /* 8215735Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8215735Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215735Ch case    7:*/		return 0x82157360;
		  /* 82157360h */ case    8:  		/* bc 4, CR6_EQ, 92 */
		/* 82157360h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821573BC;  }
		/* 82157360h case    8:*/		return 0x82157364;
		  /* 82157364h */ case    9:  		/* cmplwi CR6, R31, 8 */
		/* 82157364h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000008);
		/* 82157364h case    9:*/		return 0x82157368;
		  /* 82157368h */ case   10:  		/* bc 12, CR6_LT, 8 */
		/* 82157368h case   10:*/		if ( regs.CR[6].lt ) { return 0x82157370;  }
		/* 82157368h case   10:*/		return 0x8215736C;
		  /* 8215736Ch */ case   11:  		/* bl 1113844 */
		/* 8215736Ch case   11:*/		regs.LR = 0x82157370; return 0x82267260;
		/* 8215736Ch case   11:*/		return 0x82157370;
	}
	return 0x82157370;
} // Block from 82157340h-82157370h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82157370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157370);
		  /* 82157370h */ case    0:  		/* lwz R10, <#[R23 + 4]> */
		/* 82157370h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 82157370h case    0:*/		return 0x82157374;
		  /* 82157374h */ case    1:  		/* addi R11, R31, 1 */
		/* 82157374h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1);
		/* 82157374h case    1:*/		return 0x82157378;
		  /* 82157378h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82157378h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157378h case    2:*/		return 0x8215737C;
		  /* 8215737Ch */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 8215737Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x82157384;  }
		/* 8215737Ch case    3:*/		return 0x82157380;
		  /* 82157380h */ case    4:  		/* mr R11, R10 */
		/* 82157380h case    4:*/		regs.R11 = regs.R10;
		/* 82157380h case    4:*/		return 0x82157384;
	}
	return 0x82157384;
} // Block from 82157370h-82157384h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82157384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157384);
		  /* 82157384h */ case    0:  		/* stw R11, <#[R23 + 4]> */
		/* 82157384h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82157384h case    0:*/		return 0x82157388;
		  /* 82157388h */ case    1:  		/* slw R11, R21, R31 */
		/* 82157388h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R31);
		/* 82157388h case    1:*/		return 0x8215738C;
		  /* 8215738Ch */ case    2:  		/* lwz R10, <#[R24 + 196]> */
		/* 8215738Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x000000C4) );
		/* 8215738Ch case    2:*/		return 0x82157390;
		  /* 82157390h */ case    3:  		/* or R11, R11, R10 */
		/* 82157390h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82157390h case    3:*/		return 0x82157394;
		  /* 82157394h */ case    4:  		/* stw R11, <#[R24 + 196]> */
		/* 82157394h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x000000C4) );
		/* 82157394h case    4:*/		return 0x82157398;
		  /* 82157398h */ case    5:  		/* b 36 */
		/* 82157398h case    5:*/		return 0x821573BC;
		/* 82157398h case    5:*/		return 0x8215739C;
	}
	return 0x8215739C;
} // Block from 82157384h-8215739Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215739Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215739C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215739C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215739C);
		  /* 8215739Ch */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 8215739Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8215739Ch case    0:*/		return 0x821573A0;
	}
	return 0x821573A0;
} // Block from 8215739Ch-821573A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821573A0h
// Function '?SetupDCLPT@XGRAPHICS@@YAXKW4_D3DSAMPLER_TEXTURE_TYPE@@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573A0);
		  /* 821573A0h */ case    0:  		/* bc 4, CR6_EQ, 28 */
		/* 821573A0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821573BC;  }
		/* 821573A0h case    0:*/		return 0x821573A4;
		  /* 821573A4h */ case    1:  		/* cmplwi CR6, R31, 16 */
		/* 821573A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 821573A4h case    1:*/		return 0x821573A8;
		  /* 821573A8h */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 821573A8h case    2:*/		if ( regs.CR[6].lt ) { return 0x821573B0;  }
		/* 821573A8h case    2:*/		return 0x821573AC;
		  /* 821573ACh */ case    3:  		/* bl 1113780 */
		/* 821573ACh case    3:*/		regs.LR = 0x821573B0; return 0x82267260;
		/* 821573ACh case    3:*/		return 0x821573B0;
	}
	return 0x821573B0;
} // Block from 821573A0h-821573B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821573B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573B0);
		  /* 821573B0h */ case    0:  		/* addi R11, R31, 4 */
		/* 821573B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821573B0h case    0:*/		return 0x821573B4;
		  /* 821573B4h */ case    1:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 821573B4h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 821573B4h case    1:*/		return 0x821573B8;
		  /* 821573B8h */ case    2:  		/* stwx R21, <#[R11 + R24]> */
		/* 821573B8h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 821573B8h case    2:*/		return 0x821573BC;
	}
	return 0x821573BC;
} // Block from 821573B0h-821573BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821573BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573BC);
		  /* 821573BCh */ case    0:  		/* lwzu R11, <#[R22 + 4]> */
		/* 821573BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		regs.R22 = (uint32)(regs.R22 + 0x00000004);
		/* 821573BCh case    0:*/		return 0x821573C0;
	}
	return 0x821573C0;
} // Block from 821573BCh-821573C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821573C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573C0);
		  /* 821573C0h */ case    0:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 821573C0h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 821573C0h case    0:*/		return 0x821573C4;
		  /* 821573C4h */ case    1:  		/* bc 4, CR0_EQ, -140 */
		/* 821573C4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82157338;  }
		/* 821573C4h case    1:*/		return 0x821573C8;
	}
	return 0x821573C8;
} // Block from 821573C0h-821573C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821573C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573C8);
		  /* 821573C8h */ case    0:  		/* stw R22, <#[R20]> */
		/* 821573C8h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R20 + 0x00000000) );
		/* 821573C8h case    0:*/		return 0x821573CC;
		  /* 821573CCh */ case    1:  		/* addi R1, R1, 192 */
		/* 821573CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821573CCh case    1:*/		return 0x821573D0;
		  /* 821573D0h */ case    2:  		/* b -811336 */
		/* 821573D0h case    2:*/		return 0x82091288;
		/* 821573D0h case    2:*/		return 0x821573D4;
		  /* 821573D4h */ case    3:  		/* nop */
		/* 821573D4h case    3:*/		cpu::op::nop();
		/* 821573D4h case    3:*/		return 0x821573D8;
	}
	return 0x821573D8;
} // Block from 821573C8h-821573D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821573D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821573D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821573D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821573D8);
		  /* 821573D8h */ case    0:  		/* mfspr R12, LR */
		/* 821573D8h case    0:*/		regs.R12 = regs.LR;
		/* 821573D8h case    0:*/		return 0x821573DC;
		  /* 821573DCh */ case    1:  		/* bl -811400 */
		/* 821573DCh case    1:*/		regs.LR = 0x821573E0; return 0x82091254;
		/* 821573DCh case    1:*/		return 0x821573E0;
		  /* 821573E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821573E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821573E0h case    2:*/		return 0x821573E4;
		  /* 821573E4h */ case    3:  		/* lis R11, -1 */
		/* 821573E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821573E4h case    3:*/		return 0x821573E8;
		  /* 821573E8h */ case    4:  		/* lwz R29, <#[R3]> */
		/* 821573E8h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 821573E8h case    4:*/		return 0x821573EC;
		  /* 821573ECh */ case    5:  		/* addi R31, R3, 4 */
		/* 821573ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x4);
		/* 821573ECh case    5:*/		return 0x821573F0;
		  /* 821573F0h */ case    6:  		/* ori R11, R11, 512 */
		/* 821573F0h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821573F0h case    6:*/		return 0x821573F4;
		  /* 821573F4h */ case    7:  		/* mr R30, R3 */
		/* 821573F4h case    7:*/		regs.R30 = regs.R3;
		/* 821573F4h case    7:*/		return 0x821573F8;
		  /* 821573F8h */ case    8:  		/* stw R31, <#[R1 + 80]> */
		/* 821573F8h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821573F8h case    8:*/		return 0x821573FC;
		  /* 821573FCh */ case    9:  		/* mr R28, R4 */
		/* 821573FCh case    9:*/		regs.R28 = regs.R4;
		/* 821573FCh case    9:*/		return 0x82157400;
		  /* 82157400h */ case   10:  		/* mr R27, R5 */
		/* 82157400h case   10:*/		regs.R27 = regs.R5;
		/* 82157400h case   10:*/		return 0x82157404;
		  /* 82157404h */ case   11:  		/* cmplw CR6, R29, R11 */
		/* 82157404h case   11:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82157404h case   11:*/		return 0x82157408;
		  /* 82157408h */ case   12:  		/* bc 12, CR6_LT, 132 */
		/* 82157408h case   12:*/		if ( regs.CR[6].lt ) { return 0x8215748C;  }
		/* 82157408h case   12:*/		return 0x8215740C;
		  /* 8215740Ch */ case   13:  		/* bl 1113684 */
		/* 8215740Ch case   13:*/		regs.LR = 0x82157410; return 0x82267260;
		/* 8215740Ch case   13:*/		return 0x82157410;
		  /* 82157410h */ case   14:  		/* b 124 */
		/* 82157410h case   14:*/		return 0x8215748C;
		/* 82157410h case   14:*/		return 0x82157414;
		  /* 82157414h */ case   15:  		/* rlwinm. R9, R11, 0, 0, 0 */
		/* 82157414h case   15:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R9,regs.R11);
		/* 82157414h case   15:*/		return 0x82157418;
		  /* 82157418h */ case   16:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 82157418h case   16:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 82157418h case   16:*/		return 0x8215741C;
		  /* 8215741Ch */ case   17:  		/* bc 4, CR0_EQ, 156 */
		/* 8215741Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x821574B8;  }
		/* 8215741Ch case   17:*/		return 0x82157420;
		  /* 82157420h */ case   18:  		/* cmplwi CR6, R10, 65534 */
		/* 82157420h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFE);
		/* 82157420h case   18:*/		return 0x82157424;
		  /* 82157424h */ case   19:  		/* bc 4, CR6_EQ, 24 */
		/* 82157424h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8215743C;  }
		/* 82157424h case   19:*/		return 0x82157428;
		  /* 82157428h */ case   20:  		/* rlwinm R11, R11, 16, 17, 31 */
		/* 82157428h case   20:*/		cpu::op::rlwinm<0,16,17,31>(regs,&regs.R11,regs.R11);
		/* 82157428h case   20:*/		return 0x8215742C;
		  /* 8215742Ch */ case   21:  		/* addi R11, R11, 1 */
		/* 8215742Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215742Ch case   21:*/		return 0x82157430;
		  /* 82157430h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82157430h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82157430h case   22:*/		return 0x82157434;
		  /* 82157434h */ case   23:  		/* add R31, R11, R31 */
		/* 82157434h case   23:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82157434h case   23:*/		return 0x82157438;
		  /* 82157438h */ case   24:  		/* b 64 */
		/* 82157438h case   24:*/		return 0x82157478;
		/* 82157438h case   24:*/		return 0x8215743C;
	}
	return 0x8215743C;
} // Block from 821573D8h-8215743Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8215743Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215743C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215743C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215743C);
		  /* 8215743Ch */ case    0:  		/* cmplwi CR6, R10, 65533 */
		/* 8215743Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFD);
		/* 8215743Ch case    0:*/		return 0x82157440;
	}
	return 0x82157440;
} // Block from 8215743Ch-82157440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157440h
// Function '?SetupDCLPIN@XGRAPHICS@@YAXKW4_D3DDECLUSAGE@@KHPAW4ILImportComponent@1@KPAU_R400PSIL@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157440);
		  /* 82157440h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 82157440h case    0:*/		if ( regs.CR[6].eq ) { return 0x82157474;  }
		/* 82157440h case    0:*/		return 0x82157444;
		  /* 82157444h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82157444h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82157444h case    1:*/		return 0x82157448;
		  /* 82157448h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82157448h case    2:*/		if ( regs.CR[6].eq ) { return 0x82157474;  }
		/* 82157448h case    2:*/		return 0x8215744C;
		  /* 8215744Ch */ case    3:  		/* cmplwi CR6, R10, 81 */
		/* 8215744Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000051);
		/* 8215744Ch case    3:*/		return 0x82157450;
		  /* 82157450h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82157450h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8215745C;  }
		/* 82157450h case    4:*/		return 0x82157454;
		  /* 82157454h */ case    5:  		/* addi R31, R31, 24 */
		/* 82157454h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x18);
		/* 82157454h case    5:*/		return 0x82157458;
		  /* 82157458h */ case    6:  		/* b 32 */
		/* 82157458h case    6:*/		return 0x82157478;
		/* 82157458h case    6:*/		return 0x8215745C;
	}
	return 0x8215745C;
} // Block from 82157440h-8215745Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215745Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215745C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215745C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215745C);
		  /* 8215745Ch */ case    0:  		/* mr R5, R27 */
		/* 8215745Ch case    0:*/		regs.R5 = regs.R27;
		/* 8215745Ch case    0:*/		return 0x82157460;
		  /* 82157460h */ case    1:  		/* addi R4, R1, 80 */
		/* 82157460h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82157460h case    1:*/		return 0x82157464;
		  /* 82157464h */ case    2:  		/* mr R3, R29 */
		/* 82157464h case    2:*/		regs.R3 = regs.R29;
		/* 82157464h case    2:*/		return 0x82157468;
		  /* 82157468h */ case    3:  		/* bl -880 */
		/* 82157468h case    3:*/		regs.LR = 0x8215746C; return 0x821570F8;
		/* 82157468h case    3:*/		return 0x8215746C;
		  /* 8215746Ch */ case    4:  		/* lwz R31, <#[R1 + 80]> */
		/* 8215746Ch case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 8215746Ch case    4:*/		return 0x82157470;
		  /* 82157470h */ case    5:  		/* b 12 */
		/* 82157470h case    5:*/		return 0x8215747C;
		/* 82157470h case    5:*/		return 0x82157474;
	}
	return 0x82157474;
} // Block from 8215745Ch-82157474h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82157474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157474);
		  /* 82157474h */ case    0:  		/* addi R31, R31, 4 */
		/* 82157474h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82157474h case    0:*/		return 0x82157478;
	}
	return 0x82157478;
} // Block from 82157474h-82157478h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157478);
		  /* 82157478h */ case    0:  		/* stw R31, <#[R1 + 80]> */
		/* 82157478h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82157478h case    0:*/		return 0x8215747C;
	}
	return 0x8215747C;
} // Block from 82157478h-8215747Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215747Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215747C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215747C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215747C);
		  /* 8215747Ch */ case    0:  		/* subf R11, R30, R31 */
		/* 8215747Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R31);
		/* 8215747Ch case    0:*/		return 0x82157480;
		  /* 82157480h */ case    1:  		/* srawi R11, R11, 2 */
		/* 82157480h case    1:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 82157480h case    1:*/		return 0x82157484;
		  /* 82157484h */ case    2:  		/* cmpw CR6, R11, R28 */
		/* 82157484h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 82157484h case    2:*/		return 0x82157488;
		  /* 82157488h */ case    3:  		/* bc 12, CR6_GT, 48 */
		/* 82157488h case    3:*/		if ( regs.CR[6].gt ) { return 0x821574B8;  }
		/* 82157488h case    3:*/		return 0x8215748C;
	}
	return 0x8215748C;
} // Block from 8215747Ch-8215748Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215748Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215748C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215748C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215748C);
		  /* 8215748Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8215748Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215748Ch case    0:*/		return 0x82157490;
		  /* 82157490h */ case    1:  		/* cmplwi CR6, R11, 65535 */
		/* 82157490h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000FFFF);
		/* 82157490h case    1:*/		return 0x82157494;
		  /* 82157494h */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 82157494h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82157414;  }
		/* 82157494h case    2:*/		return 0x82157498;
		  /* 82157498h */ case    3:  		/* addi R11, R31, 4 */
		/* 82157498h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82157498h case    3:*/		return 0x8215749C;
		  /* 8215749Ch */ case    4:  		/* subf R11, R30, R11 */
		/* 8215749Ch case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8215749Ch case    4:*/		return 0x821574A0;
		  /* 821574A0h */ case    5:  		/* srawi R11, R11, 2 */
		/* 821574A0h case    5:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 821574A0h case    5:*/		return 0x821574A4;
		  /* 821574A4h */ case    6:  		/* cmpw CR6, R11, R28 */
		/* 821574A4h case    6:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 821574A4h case    6:*/		return 0x821574A8;
		  /* 821574A8h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 821574A8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821574B8;  }
		/* 821574A8h case    7:*/		return 0x821574AC;
		  /* 821574ACh */ case    8:  		/* li R3, 0 */
		/* 821574ACh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821574ACh case    8:*/		return 0x821574B0;
		  /* 821574B0h */ case    9:  		/* addi R1, R1, 144 */
		/* 821574B0h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821574B0h case    9:*/		return 0x821574B4;
		  /* 821574B4h */ case   10:  		/* b -811536 */
		/* 821574B4h case   10:*/		return 0x820912A4;
		/* 821574B4h case   10:*/		return 0x821574B8;
	}
	return 0x821574B8;
} // Block from 8215748Ch-821574B8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821574B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821574B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821574B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821574B8);
		  /* 821574B8h */ case    0:  		/* bl 1113512 */
		/* 821574B8h case    0:*/		regs.LR = 0x821574BC; return 0x82267260;
		/* 821574B8h case    0:*/		return 0x821574BC;
		  /* 821574BCh */ case    1:  		/* li R3, 2 */
		/* 821574BCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 821574BCh case    1:*/		return 0x821574C0;
		  /* 821574C0h */ case    2:  		/* b -16 */
		/* 821574C0h case    2:*/		return 0x821574B0;
		/* 821574C0h case    2:*/		return 0x821574C4;
		  /* 821574C4h */ case    3:  		/* nop */
		/* 821574C4h case    3:*/		cpu::op::nop();
		/* 821574C4h case    3:*/		return 0x821574C8;
	}
	return 0x821574C8;
} // Block from 821574B8h-821574C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821574C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821574C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821574C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821574C8);
		  /* 821574C8h */ case    0:  		/* mfspr R12, LR */
		/* 821574C8h case    0:*/		regs.R12 = regs.LR;
		/* 821574C8h case    0:*/		return 0x821574CC;
		  /* 821574CCh */ case    1:  		/* bl -811632 */
		/* 821574CCh case    1:*/		regs.LR = 0x821574D0; return 0x8209125C;
		/* 821574CCh case    1:*/		return 0x821574D0;
		  /* 821574D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821574D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821574D0h case    2:*/		return 0x821574D4;
		  /* 821574D4h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821574D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821574D4h case    3:*/		return 0x821574D8;
		  /* 821574D8h */ case    4:  		/* mr R31, R3 */
		/* 821574D8h case    4:*/		regs.R31 = regs.R3;
		/* 821574D8h case    4:*/		return 0x821574DC;
		  /* 821574DCh */ case    5:  		/* lwz R10, <#[R3 + 4]> */
		/* 821574DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821574DCh case    5:*/		return 0x821574E0;
		  /* 821574E0h */ case    6:  		/* lis R4, 9351 */
		/* 821574E0h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 821574E0h case    6:*/		return 0x821574E4;
		  /* 821574E4h */ case    7:  		/* subf R11, R11, R10 */
		/* 821574E4h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821574E4h case    7:*/		return 0x821574E8;
		  /* 821574E8h */ case    8:  		/* srawi R11, R11, 2 */
		/* 821574E8h case    8:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 821574E8h case    8:*/		return 0x821574EC;
		  /* 821574ECh */ case    9:  		/* addi R11, R11, 16379 */
		/* 821574ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3FFB);
		/* 821574ECh case    9:*/		return 0x821574F0;
		  /* 821574F0h */ case   10:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 821574F0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 821574F0h case   10:*/		return 0x821574F4;
		  /* 821574F4h */ case   11:  		/* mr R3, R29 */
		/* 821574F4h case   11:*/		regs.R3 = regs.R29;
		/* 821574F4h case   11:*/		return 0x821574F8;
		  /* 821574F8h */ case   12:  		/* bl -848632 */
		/* 821574F8h case   12:*/		regs.LR = 0x821574FC; return 0x82088200;
		/* 821574F8h case   12:*/		return 0x821574FC;
		  /* 821574FCh */ case   13:  		/* or. R30, R3, R3 */
		/* 821574FCh case   13:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821574FCh case   13:*/		return 0x82157500;
		  /* 82157500h */ case   14:  		/* bc 4, CR0_EQ, 20 */
		/* 82157500h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82157514;  }
		/* 82157500h case   14:*/		return 0x82157504;
		  /* 82157504h */ case   15:  		/* bl 1113436 */
		/* 82157504h case   15:*/		regs.LR = 0x82157508; return 0x82267260;
		/* 82157504h case   15:*/		return 0x82157508;
		  /* 82157508h */ case   16:  		/* lis R3, -32761 */
		/* 82157508h case   16:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82157508h case   16:*/		return 0x8215750C;
		  /* 8215750Ch */ case   17:  		/* ori R3, R3, 14 */
		/* 8215750Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8215750Ch case   17:*/		return 0x82157510;
		  /* 82157510h */ case   18:  		/* b 68 */
		/* 82157510h case   18:*/		return 0x82157554;
		/* 82157510h case   18:*/		return 0x82157514;
	}
	return 0x82157514;
} // Block from 821574C8h-82157514h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82157514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157514);
		  /* 82157514h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82157514h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82157514h case    0:*/		return 0x82157518;
		  /* 82157518h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82157518h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82157518h case    1:*/		return 0x8215751C;
		  /* 8215751Ch */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 8215751Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82157544;  }
		/* 8215751Ch case    2:*/		return 0x82157520;
		  /* 82157520h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 82157520h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82157520h case    3:*/		return 0x82157524;
		  /* 82157524h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82157524h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157524h case    4:*/		return 0x82157528;
		  /* 82157528h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82157528h case    5:*/		if ( regs.CR[6].eq ) { return 0x82157538;  }
		/* 82157528h case    5:*/		return 0x8215752C;
		  /* 8215752Ch */ case    6:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8215752Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8215752Ch case    6:*/		return 0x82157530;
		  /* 82157530h */ case    7:  		/* mr R3, R30 */
		/* 82157530h case    7:*/		regs.R3 = regs.R30;
		/* 82157530h case    7:*/		return 0x82157534;
		  /* 82157534h */ case    8:  		/* bl -809860 */
		/* 82157534h case    8:*/		regs.LR = 0x82157538; return 0x820919B0;
		/* 82157534h case    8:*/		return 0x82157538;
	}
	return 0x82157538;
} // Block from 82157514h-82157538h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82157538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157538);
		  /* 82157538h */ case    0:  		/* lis R4, 9351 */
		/* 82157538h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82157538h case    0:*/		return 0x8215753C;
		  /* 8215753Ch */ case    1:  		/* lwz R3, <#[R31]> */
		/* 8215753Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215753Ch case    1:*/		return 0x82157540;
		  /* 82157540h */ case    2:  		/* bl -848392 */
		/* 82157540h case    2:*/		regs.LR = 0x82157544; return 0x82088338;
		/* 82157540h case    2:*/		return 0x82157544;
	}
	return 0x82157544;
} // Block from 82157538h-82157544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82157544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157544);
		  /* 82157544h */ case    0:  		/* add R11, R29, R30 */
		/* 82157544h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 82157544h case    0:*/		return 0x82157548;
		  /* 82157548h */ case    1:  		/* stw R30, <#[R31]> */
		/* 82157548h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82157548h case    1:*/		return 0x8215754C;
		  /* 8215754Ch */ case    2:  		/* li R3, 0 */
		/* 8215754Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215754Ch case    2:*/		return 0x82157550;
		  /* 82157550h */ case    3:  		/* stw R11, <#[R31 + 4]> */
		/* 82157550h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82157550h case    3:*/		return 0x82157554;
	}
	return 0x82157554;
} // Block from 82157544h-82157554h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157554);
		  /* 82157554h */ case    0:  		/* addi R1, R1, 112 */
		/* 82157554h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82157554h case    0:*/		return 0x82157558;
		  /* 82157558h */ case    1:  		/* b -811692 */
		/* 82157558h case    1:*/		return 0x820912AC;
		/* 82157558h case    1:*/		return 0x8215755C;
		  /* 8215755Ch */ case    2:  		/* nop */
		/* 8215755Ch case    2:*/		cpu::op::nop();
		/* 8215755Ch case    2:*/		return 0x82157560;
	}
	return 0x82157560;
} // Block from 82157554h-82157560h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82157560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157560);
		  /* 82157560h */ case    0:  		/* mfspr R12, LR */
		/* 82157560h case    0:*/		regs.R12 = regs.LR;
		/* 82157560h case    0:*/		return 0x82157564;
		  /* 82157564h */ case    1:  		/* bl -811784 */
		/* 82157564h case    1:*/		regs.LR = 0x82157568; return 0x8209125C;
		/* 82157564h case    1:*/		return 0x82157568;
		  /* 82157568h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82157568h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82157568h case    2:*/		return 0x8215756C;
		  /* 8215756Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8215756Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8215756Ch case    3:*/		return 0x82157570;
		  /* 82157570h */ case    4:  		/* mr R30, R3 */
		/* 82157570h case    4:*/		regs.R30 = regs.R3;
		/* 82157570h case    4:*/		return 0x82157574;
		  /* 82157574h */ case    5:  		/* lwz R10, <#[R4]> */
		/* 82157574h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82157574h case    5:*/		return 0x82157578;
		  /* 82157578h */ case    6:  		/* mr R31, R4 */
		/* 82157578h case    6:*/		regs.R31 = regs.R4;
		/* 82157578h case    6:*/		return 0x8215757C;
		  /* 8215757Ch */ case    7:  		/* li R29, 0 */
		/* 8215757Ch case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215757Ch case    7:*/		return 0x82157580;
		  /* 82157580h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82157580h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157580h case    8:*/		return 0x82157584;
		  /* 82157584h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 82157584h case    9:*/		if ( regs.CR[6].lt ) { return 0x82157594;  }
		/* 82157584h case    9:*/		return 0x82157588;
		  /* 82157588h */ case   10:  		/* lwz R10, <#[R4 + 4]> */
		/* 82157588h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82157588h case   10:*/		return 0x8215758C;
		  /* 8215758Ch */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 8215758Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8215758Ch case   11:*/		return 0x82157590;
		  /* 82157590h */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 82157590h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82157598;  }
		/* 82157590h case   12:*/		return 0x82157594;
	}
	return 0x82157594;
} // Block from 82157560h-82157594h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82157594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157594);
		  /* 82157594h */ case    0:  		/* bl 1113292 */
		/* 82157594h case    0:*/		regs.LR = 0x82157598; return 0x82267260;
		/* 82157594h case    0:*/		return 0x82157598;
	}
	return 0x82157598;
} // Block from 82157594h-82157598h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157598);
		  /* 82157598h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82157598h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82157598h case    0:*/		return 0x8215759C;
		  /* 8215759Ch */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 8215759Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8215759Ch case    1:*/		return 0x821575A0;
		  /* 821575A0h */ case    2:  		/* subf R10, R11, R10 */
		/* 821575A0h case    2:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821575A0h case    2:*/		return 0x821575A4;
		  /* 821575A4h */ case    3:  		/* srawi R10, R10, 2 */
		/* 821575A4h case    3:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 821575A4h case    3:*/		return 0x821575A8;
		  /* 821575A8h */ case    4:  		/* cmplwi CR6, R10, 256 */
		/* 821575A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821575A8h case    4:*/		return 0x821575AC;
		  /* 821575ACh */ case    5:  		/* bc 4, CR6_LT, 52 */
		/* 821575ACh case    5:*/		if ( !regs.CR[6].lt ) { return 0x821575E0;  }
		/* 821575ACh case    5:*/		return 0x821575B0;
		  /* 821575B0h */ case    6:  		/* lwz R10, <#[R31]> */
		/* 821575B0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821575B0h case    6:*/		return 0x821575B4;
		  /* 821575B4h */ case    7:  		/* mr R3, R31 */
		/* 821575B4h case    7:*/		regs.R3 = regs.R31;
		/* 821575B4h case    7:*/		return 0x821575B8;
		  /* 821575B8h */ case    8:  		/* subf R11, R10, R11 */
		/* 821575B8h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821575B8h case    8:*/		return 0x821575BC;
		  /* 821575BCh */ case    9:  		/* srawi R11, R11, 2 */
		/* 821575BCh case    9:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 821575BCh case    9:*/		return 0x821575C0;
		  /* 821575C0h */ case   10:  		/* stw R11, <#[R31 + 8]> */
		/* 821575C0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821575C0h case   10:*/		return 0x821575C4;
		  /* 821575C4h */ case   11:  		/* bl -252 */
		/* 821575C4h case   11:*/		regs.LR = 0x821575C8; return 0x821574C8;
		/* 821575C4h case   11:*/		return 0x821575C8;
		  /* 821575C8h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 821575C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821575C8h case   12:*/		return 0x821575CC;
		  /* 821575CCh */ case   13:  		/* lwz R10, <#[R31]> */
		/* 821575CCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821575CCh case   13:*/		return 0x821575D0;
		  /* 821575D0h */ case   14:  		/* mr R29, R3 */
		/* 821575D0h case   14:*/		regs.R29 = regs.R3;
		/* 821575D0h case   14:*/		return 0x821575D4;
		  /* 821575D4h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821575D4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821575D4h case   15:*/		return 0x821575D8;
		  /* 821575D8h */ case   16:  		/* add R11, R11, R10 */
		/* 821575D8h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821575D8h case   16:*/		return 0x821575DC;
		  /* 821575DCh */ case   17:  		/* stw R11, <#[R30]> */
		/* 821575DCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821575DCh case   17:*/		return 0x821575E0;
	}
	return 0x821575E0;
} // Block from 82157598h-821575E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821575E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821575E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821575E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821575E0);
		  /* 821575E0h */ case    0:  		/* mr R3, R29 */
		/* 821575E0h case    0:*/		regs.R3 = regs.R29;
		/* 821575E0h case    0:*/		return 0x821575E4;
		  /* 821575E4h */ case    1:  		/* addi R1, R1, 112 */
		/* 821575E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821575E4h case    1:*/		return 0x821575E8;
		  /* 821575E8h */ case    2:  		/* b -811836 */
		/* 821575E8h case    2:*/		return 0x820912AC;
		/* 821575E8h case    2:*/		return 0x821575EC;
		  /* 821575ECh */ case    3:  		/* nop */
		/* 821575ECh case    3:*/		cpu::op::nop();
		/* 821575ECh case    3:*/		return 0x821575F0;
	}
	return 0x821575F0;
} // Block from 821575E0h-821575F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821575F0h
// Function '?SetupDCLPI@XGRAPHICS@@YAXKW4_D3DDECLUSAGE@@KHPAW4ILImportComponent@1@KPAU_R400PSIL@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821575F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821575F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821575F0);
		  /* 821575F0h */ case    0:  		/* mfspr R12, LR */
		/* 821575F0h case    0:*/		regs.R12 = regs.LR;
		/* 821575F0h case    0:*/		return 0x821575F4;
		  /* 821575F4h */ case    1:  		/* bl -811928 */
		/* 821575F4h case    1:*/		regs.LR = 0x821575F8; return 0x8209125C;
		/* 821575F4h case    1:*/		return 0x821575F8;
		  /* 821575F8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821575F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821575F8h case    2:*/		return 0x821575FC;
		  /* 821575FCh */ case    3:  		/* mr R31, R4 */
		/* 821575FCh case    3:*/		regs.R31 = regs.R4;
		/* 821575FCh case    3:*/		return 0x82157600;
		  /* 82157600h */ case    4:  		/* mr R30, R3 */
		/* 82157600h case    4:*/		regs.R30 = regs.R3;
		/* 82157600h case    4:*/		return 0x82157604;
		  /* 82157604h */ case    5:  		/* mr R4, R5 */
		/* 82157604h case    5:*/		regs.R4 = regs.R5;
		/* 82157604h case    5:*/		return 0x82157608;
		  /* 82157608h */ case    6:  		/* mr R3, R31 */
		/* 82157608h case    6:*/		regs.R3 = regs.R31;
		/* 82157608h case    6:*/		return 0x8215760C;
		  /* 8215760Ch */ case    7:  		/* mr R29, R6 */
		/* 8215760Ch case    7:*/		regs.R29 = regs.R6;
		/* 8215760Ch case    7:*/		return 0x82157610;
		  /* 82157610h */ case    8:  		/* bl -176 */
		/* 82157610h case    8:*/		regs.LR = 0x82157614; return 0x82157560;
		/* 82157610h case    8:*/		return 0x82157614;
		  /* 82157614h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82157614h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82157614h case    9:*/		return 0x82157618;
		  /* 82157618h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 82157618h case   10:*/		if ( regs.CR[0].eq ) { return 0x82157624;  }
		/* 82157618h case   10:*/		return 0x8215761C;
		  /* 8215761Ch */ case   11:  		/* li R3, 1 */
		/* 8215761Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8215761Ch case   11:*/		return 0x82157620;
		  /* 82157620h */ case   12:  		/* b 240 */
		/* 82157620h case   12:*/		return 0x82157710;
		/* 82157620h case   12:*/		return 0x82157624;
	}
	return 0x82157624;
} // Block from 821575F0h-82157624h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82157624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157624);
		  /* 82157624h */ case    0:  		/* lis R11, -1 */
		/* 82157624h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82157624h case    0:*/		return 0x82157628;
		  /* 82157628h */ case    1:  		/* ori R11, R11, 512 */
		/* 82157628h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82157628h case    1:*/		return 0x8215762C;
		  /* 8215762Ch */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 8215762Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8215762Ch case    2:*/		return 0x82157630;
		  /* 82157630h */ case    3:  		/* bc 4, CR6_LT, 44 */
		/* 82157630h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8215765C;  }
		/* 82157630h case    3:*/		return 0x82157634;
		  /* 82157634h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 82157634h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82157634h case    4:*/		return 0x82157638;
		  /* 82157638h */ case    5:  		/* li R10, 71 */
		/* 82157638h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x47);
		/* 82157638h case    5:*/		return 0x8215763C;
		  /* 8215763Ch */ case    6:  		/* lis R9, 87 */
		/* 8215763Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x57);
		/* 8215763Ch case    6:*/		return 0x82157640;
		  /* 82157640h */ case    7:  		/* li R8, 341 */
		/* 82157640h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x155);
		/* 82157640h case    7:*/		return 0x82157644;
		  /* 82157644h */ case    8:  		/* lis R7, 4 */
		/* 82157644h case    8:*/		cpu::op::lis<0>(regs,&regs.R7,0x4);
		/* 82157644h case    8:*/		return 0x82157648;
		  /* 82157648h */ case    9:  		/* stw R10, <#[R11]> */
		/* 82157648h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82157648h case    9:*/		return 0x8215764C;
		  /* 8215764Ch */ case   10:  		/* stwu R9, <#[R11 + 4]> */
		/* 8215764Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8215764Ch case   10:*/		return 0x82157650;
		  /* 82157650h */ case   11:  		/* stwu R8, <#[R11 + 4]> */
		/* 82157650h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82157650h case   11:*/		return 0x82157654;
		  /* 82157654h */ case   12:  		/* stwu R7, <#[R11 + 4]> */
		/* 82157654h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82157654h case   12:*/		return 0x82157658;
		  /* 82157658h */ case   13:  		/* b 172 */
		/* 82157658h case   13:*/		return 0x82157704;
		/* 82157658h case   13:*/		return 0x8215765C;
	}
	return 0x8215765C;
} // Block from 82157624h-8215765Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215765Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215765C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215765C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215765C);
		  /* 8215765Ch */ case    0:  		/* lis R11, -1 */
		/* 8215765Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215765Ch case    0:*/		return 0x82157660;
		  /* 82157660h */ case    1:  		/* ori R11, R11, 768 */
		/* 82157660h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82157660h case    1:*/		return 0x82157664;
		  /* 82157664h */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 82157664h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82157664h case    2:*/		return 0x82157668;
		  /* 82157668h */ case    3:  		/* bc 4, CR6_LT, 100 */
		/* 82157668h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821576CC;  }
		/* 82157668h case    3:*/		return 0x8215766C;
		  /* 8215766Ch */ case    4:  		/* li R9, 4 */
		/* 8215766Ch case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8215766Ch case    4:*/		return 0x82157670;
		  /* 82157670h */ case    5:  		/* lwz R8, <#[R29 + 16]> */
		/* 82157670h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000010) );
		/* 82157670h case    5:*/		return 0x82157674;
		  /* 82157674h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 82157674h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82157674h case    6:*/		return 0x82157678;
		  /* 82157678h */ case    7:  		/* li R10, 0 */
		/* 82157678h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82157678h case    7:*/		return 0x8215767C;
		  /* 8215767Ch */ case    8:  		/* mtspr CTR, R9 */
		/* 8215767Ch case    8:*/		regs.CTR = regs.R9;
		/* 8215767Ch case    8:*/		return 0x82157680;
		  /* 82157680h */ case    9:  		/* lwz R9, <#[R8 + 160]> */
		/* 82157680h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x000000A0) );
		/* 82157680h case    9:*/		return 0x82157684;
		  /* 82157684h */ case   10:  		/* srw R9, R9, R10 */
		/* 82157684h case   10:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82157684h case   10:*/		return 0x82157688;
		  /* 82157688h */ case   11:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82157688h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82157688h case   11:*/		return 0x8215768C;
		  /* 8215768Ch */ case   12:  		/* bc 12, CR0_EQ, 52 */
		/* 8215768Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821576C0;  }
		/* 8215768Ch case   12:*/		return 0x82157690;
		  /* 82157690h */ case   13:  		/* li R7, 23 */
		/* 82157690h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x17);
		/* 82157690h case   13:*/		return 0x82157694;
		  /* 82157694h */ case   14:  		/* mr R9, R10 */
		/* 82157694h case   14:*/		regs.R9 = regs.R10;
		/* 82157694h case   14:*/		return 0x82157698;
		  /* 82157698h */ case   15:  		/* li R6, 14 */
		/* 82157698h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 82157698h case   15:*/		return 0x8215769C;
		  /* 8215769Ch */ case   16:  		/* rlwimi R9, R7, 16, 0, 15 */
		/* 8215769Ch case   16:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R9,regs.R7);
		/* 8215769Ch case   16:*/		return 0x821576A0;
		  /* 821576A0h */ case   17:  		/* stw R6, <#[R11]> */
		/* 821576A0h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821576A0h case   17:*/		return 0x821576A4;
		  /* 821576A4h */ case   18:  		/* addi R7, R10, 35 */
		/* 821576A4h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x23);
		/* 821576A4h case   18:*/		return 0x821576A8;
		  /* 821576A8h */ case   19:  		/* stwu R9, <#[R11 + 4]> */
		/* 821576A8h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821576A8h case   19:*/		return 0x821576AC;
		  /* 821576ACh */ case   20:  		/* li R9, 1 */
		/* 821576ACh case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821576ACh case   20:*/		return 0x821576B0;
		  /* 821576B0h */ case   21:  		/* rlwimi R7, R9, 18, 0, 15 */
		/* 821576B0h case   21:*/		cpu::op::rlwimi<0,18,0,15>(regs,&regs.R7,regs.R9);
		/* 821576B0h case   21:*/		return 0x821576B4;
		  /* 821576B4h */ case   22:  		/* stwu R7, <#[R11 + 4]> */
		/* 821576B4h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821576B4h case   22:*/		return 0x821576B8;
		  /* 821576B8h */ case   23:  		/* addi R11, R11, 4 */
		/* 821576B8h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821576B8h case   23:*/		return 0x821576BC;
		  /* 821576BCh */ case   24:  		/* stw R11, <#[R31]> */
		/* 821576BCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821576BCh case   24:*/		return 0x821576C0;
	}
	return 0x821576C0;
} // Block from 8215765Ch-821576C0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821576C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821576C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821576C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821576C0);
		  /* 821576C0h */ case    0:  		/* addi R10, R10, 1 */
		/* 821576C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821576C0h case    0:*/		return 0x821576C4;
		  /* 821576C4h */ case    1:  		/* bc 16, CR0_LT, -68 */
		/* 821576C4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82157680;  }
		/* 821576C4h case    1:*/		return 0x821576C8;
		  /* 821576C8h */ case    2:  		/* stw R11, <#[R31]> */
		/* 821576C8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821576C8h case    2:*/		return 0x821576CC;
	}
	return 0x821576CC;
} // Block from 821576C0h-821576CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821576CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821576CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821576CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821576CC);
		  /* 821576CCh */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 821576CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821576CCh case    0:*/		return 0x821576D0;
		  /* 821576D0h */ case    1:  		/* lwz R11, <#[R11 + 156]> */
		/* 821576D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000009C) );
		/* 821576D0h case    1:*/		return 0x821576D4;
		  /* 821576D4h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 821576D4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821576D4h case    2:*/		return 0x821576D8;
		  /* 821576D8h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 821576D8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215770C;  }
		/* 821576D8h case    3:*/		return 0x821576DC;
		  /* 821576DCh */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821576DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821576DCh case    4:*/		return 0x821576E0;
		  /* 821576E0h */ case    5:  		/* li R10, 71 */
		/* 821576E0h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x47);
		/* 821576E0h case    5:*/		return 0x821576E4;
		  /* 821576E4h */ case    6:  		/* lis R9, 88 */
		/* 821576E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x58);
		/* 821576E4h case    6:*/		return 0x821576E8;
		  /* 821576E8h */ case    7:  		/* li R8, 341 */
		/* 821576E8h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x155);
		/* 821576E8h case    7:*/		return 0x821576EC;
		  /* 821576ECh */ case    8:  		/* lis R7, 4 */
		/* 821576ECh case    8:*/		cpu::op::lis<0>(regs,&regs.R7,0x4);
		/* 821576ECh case    8:*/		return 0x821576F0;
		  /* 821576F0h */ case    9:  		/* stw R10, <#[R11]> */
		/* 821576F0h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821576F0h case    9:*/		return 0x821576F4;
		  /* 821576F4h */ case   10:  		/* ori R10, R7, 34 */
		/* 821576F4h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R7,0x22);
		/* 821576F4h case   10:*/		return 0x821576F8;
		  /* 821576F8h */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 821576F8h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821576F8h case   11:*/		return 0x821576FC;
		  /* 821576FCh */ case   12:  		/* stwu R8, <#[R11 + 4]> */
		/* 821576FCh case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821576FCh case   12:*/		return 0x82157700;
		  /* 82157700h */ case   13:  		/* stwu R10, <#[R11 + 4]> */
		/* 82157700h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82157700h case   13:*/		return 0x82157704;
	}
	return 0x82157704;
} // Block from 821576CCh-82157704h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82157704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157704);
		  /* 82157704h */ case    0:  		/* addi R11, R11, 4 */
		/* 82157704h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82157704h case    0:*/		return 0x82157708;
		  /* 82157708h */ case    1:  		/* stw R11, <#[R31]> */
		/* 82157708h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82157708h case    1:*/		return 0x8215770C;
	}
	return 0x8215770C;
} // Block from 82157704h-8215770Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215770Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215770C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215770C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215770C);
		  /* 8215770Ch */ case    0:  		/* li R3, 0 */
		/* 8215770Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215770Ch case    0:*/		return 0x82157710;
	}
	return 0x82157710;
} // Block from 8215770Ch-82157710h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157710);
		  /* 82157710h */ case    0:  		/* addi R1, R1, 112 */
		/* 82157710h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82157710h case    0:*/		return 0x82157714;
		  /* 82157714h */ case    1:  		/* b -812136 */
		/* 82157714h case    1:*/		return 0x820912AC;
		/* 82157714h case    1:*/		return 0x82157718;
	}
	return 0x82157718;
} // Block from 82157710h-82157718h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157718h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157718);
		  /* 82157718h */ case    0:  		/* mfspr R12, LR */
		/* 82157718h case    0:*/		regs.R12 = regs.LR;
		/* 82157718h case    0:*/		return 0x8215771C;
		  /* 8215771Ch */ case    1:  		/* bl -812268 */
		/* 8215771Ch case    1:*/		regs.LR = 0x82157720; return 0x82091230;
		/* 8215771Ch case    1:*/		return 0x82157720;
		  /* 82157720h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82157720h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82157720h case    2:*/		return 0x82157724;
		  /* 82157724h */ case    3:  		/* addi R11, R6, 12 */
		/* 82157724h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xC);
		/* 82157724h case    3:*/		return 0x82157728;
		  /* 82157728h */ case    4:  		/* stw R3, <#[R1 + 84]> */
		/* 82157728h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82157728h case    4:*/		return 0x8215772C;
		  /* 8215772Ch */ case    5:  		/* mr R18, R9 */
		/* 8215772Ch case    5:*/		regs.R18 = regs.R9;
		/* 8215772Ch case    5:*/		return 0x82157730;
	}
	return 0x82157730;
} // Block from 82157718h-82157730h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82157730h
// Function '?PSConvertDCLToILFunc@XGRAPHICS@@YAKPAPAKKPAU_R400PSIL@1@0PAXP6AX2HKPBD@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157730);
		  /* 82157730h */ case    0:  		/* stw R11, <#[R5 + 16]> */
		/* 82157730h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 82157730h case    0:*/		return 0x82157734;
		  /* 82157734h */ case    1:  		/* mr R19, R8 */
		/* 82157734h case    1:*/		regs.R19 = regs.R8;
		/* 82157734h case    1:*/		return 0x82157738;
		  /* 82157738h */ case    2:  		/* stw R7, <#[R6 + 16]> */
		/* 82157738h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000010) );
		/* 82157738h case    2:*/		return 0x8215773C;
		  /* 8215773Ch */ case    3:  		/* lis R10, -1 */
		/* 8215773Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8215773Ch case    3:*/		return 0x82157740;
		  /* 82157740h */ case    4:  		/* lwz R9, <#[R5 + 16]> */
		/* 82157740h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000010) );
		/* 82157740h case    4:*/		return 0x82157744;
		  /* 82157744h */ case    5:  		/* mr R21, R3 */
		/* 82157744h case    5:*/		regs.R21 = regs.R3;
		/* 82157744h case    5:*/		return 0x82157748;
		  /* 82157748h */ case    6:  		/* lwz R11, <#[R1 + 84]> */
		/* 82157748h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157748h case    6:*/		return 0x8215774C;
		  /* 8215774Ch */ case    7:  		/* addi R8, R11, 4 */
		/* 8215774Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 8215774Ch case    7:*/		return 0x82157750;
		  /* 82157750h */ case    8:  		/* lwz R27, <#[R11]> */
		/* 82157750h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82157750h case    8:*/		return 0x82157754;
		  /* 82157754h */ case    9:  		/* rlwinm R11, R27, 0, 0, 15 */
		/* 82157754h case    9:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R27);
		/* 82157754h case    9:*/		return 0x82157758;
		  /* 82157758h */ case   10:  		/* stw R8, <#[R1 + 84]> */
		/* 82157758h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 82157758h case   10:*/		return 0x8215775C;
		  /* 8215775Ch */ case   11:  		/* mr R31, R4 */
		/* 8215775Ch case   11:*/		regs.R31 = regs.R4;
		/* 8215775Ch case   11:*/		return 0x82157760;
		  /* 82157760h */ case   12:  		/* mr R26, R5 */
		/* 82157760h case   12:*/		regs.R26 = regs.R5;
		/* 82157760h case   12:*/		return 0x82157764;
		  /* 82157764h */ case   13:  		/* stw R27, <#[R9]> */
		/* 82157764h case   13:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R9 + 0x00000000) );
		/* 82157764h case   13:*/		return 0x82157768;
		  /* 82157768h */ case   14:  		/* mr R24, R6 */
		/* 82157768h case   14:*/		regs.R24 = regs.R6;
		/* 82157768h case   14:*/		return 0x8215776C;
		  /* 8215776Ch */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8215776Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8215776Ch case   15:*/		return 0x82157770;
		  /* 82157770h */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 82157770h case   16:*/		if ( regs.CR[6].eq ) { return 0x82157778;  }
		/* 82157770h case   16:*/		return 0x82157774;
		  /* 82157774h */ case   17:  		/* bl 1112812 */
		/* 82157774h case   17:*/		regs.LR = 0x82157778; return 0x82267260;
		/* 82157774h case   17:*/		return 0x82157778;
	}
	return 0x82157778;
} // Block from 82157730h-82157778h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82157778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157778);
		  /* 82157778h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 82157778h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82157778h case    0:*/		return 0x8215777C;
		  /* 8215777Ch */ case    1:  		/* rlwinm R20, R31, 30, 2, 31 */
		/* 8215777Ch case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R20,regs.R31);
		/* 8215777Ch case    1:*/		return 0x82157780;
		  /* 82157780h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82157780h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157780h case    2:*/		return 0x82157784;
		  /* 82157784h */ case    3:  		/* stw R11, <#[R1 + 80]> */
		/* 82157784h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157784h case    3:*/		return 0x82157788;
		  /* 82157788h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82157788h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82157794;  }
		/* 82157788h case    4:*/		return 0x8215778C;
		  /* 8215778Ch */ case    5:  		/* bl 1112788 */
		/* 8215778Ch case    5:*/		regs.LR = 0x82157790; return 0x82267260;
		/* 8215778Ch case    5:*/		return 0x82157790;
		  /* 82157790h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 82157790h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157790h case    6:*/		return 0x82157794;
	}
	return 0x82157794;
} // Block from 82157778h-82157794h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82157794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157794);
		  /* 82157794h */ case    0:  		/* lis R10, -1 */
		/* 82157794h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82157794h case    0:*/		return 0x82157798;
		  /* 82157798h */ case    1:  		/* ori R23, R10, 512 */
		/* 82157798h case    1:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R10,0x200);
		/* 82157798h case    1:*/		return 0x8215779C;
		  /* 8215779Ch */ case    2:  		/* li R10, 2 */
		/* 8215779Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8215779Ch case    2:*/		return 0x821577A0;
		  /* 821577A0h */ case    3:  		/* cmplw CR6, R27, R23 */
		/* 821577A0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 821577A0h case    3:*/		return 0x821577A4;
		  /* 821577A4h */ case    4:  		/* bc 12, CR6_LT, 8 */
		/* 821577A4h case    4:*/		if ( regs.CR[6].lt ) { return 0x821577AC;  }
		/* 821577A4h case    4:*/		return 0x821577A8;
		  /* 821577A8h */ case    5:  		/* li R10, 0 */
		/* 821577A8h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821577A8h case    5:*/		return 0x821577AC;
	}
	return 0x821577AC;
} // Block from 82157794h-821577ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821577ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821577AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821577AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821577AC);
		  /* 821577ACh */ case    0:  		/* stw R10, <#[R11]> */
		/* 821577ACh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821577ACh case    0:*/		return 0x821577B0;
		  /* 821577B0h */ case    1:  		/* lis R10, 1 */
		/* 821577B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 821577B0h case    1:*/		return 0x821577B4;
		  /* 821577B4h */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 821577B4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821577B4h case    2:*/		return 0x821577B8;
		  /* 821577B8h */ case    3:  		/* addi R11, R11, 4 */
		/* 821577B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821577B8h case    3:*/		return 0x821577BC;
		  /* 821577BCh */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 821577BCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821577BCh case    4:*/		return 0x821577C0;
		  /* 821577C0h */ case    5:  		/* ori R10, R10, 256 */
		/* 821577C0h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x100);
		/* 821577C0h case    5:*/		return 0x821577C4;
		  /* 821577C4h */ case    6:  		/* cmplw CR6, R27, R23 */
		/* 821577C4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 821577C4h case    6:*/		return 0x821577C8;
		  /* 821577C8h */ case    7:  		/* stw R10, <#[R11]> */
		/* 821577C8h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821577C8h case    7:*/		return 0x821577CC;
		  /* 821577CCh */ case    8:  		/* lwz R11, <#[R1 + 80]> */
		/* 821577CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821577CCh case    8:*/		return 0x821577D0;
		  /* 821577D0h */ case    9:  		/* addi R11, R11, 4 */
		/* 821577D0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821577D0h case    9:*/		return 0x821577D4;
		  /* 821577D4h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 821577D4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821577D4h case   10:*/		return 0x821577D8;
		  /* 821577D8h */ case   11:  		/* bc 4, CR6_LT, 64 */
		/* 821577D8h case   11:*/		if ( !regs.CR[6].lt ) { return 0x82157818;  }
		/* 821577D8h case   11:*/		return 0x821577DC;
		  /* 821577DCh */ case   12:  		/* mr R5, R26 */
		/* 821577DCh case   12:*/		regs.R5 = regs.R26;
		/* 821577DCh case   12:*/		return 0x821577E0;
		  /* 821577E0h */ case   13:  		/* mr R4, R20 */
		/* 821577E0h case   13:*/		regs.R4 = regs.R20;
		/* 821577E0h case   13:*/		return 0x821577E4;
		  /* 821577E4h */ case   14:  		/* mr R3, R21 */
		/* 821577E4h case   14:*/		regs.R3 = regs.R21;
		/* 821577E4h case   14:*/		return 0x821577E8;
		  /* 821577E8h */ case   15:  		/* bl -1040 */
		/* 821577E8h case   15:*/		regs.LR = 0x821577EC; return 0x821573D8;
		/* 821577E8h case   15:*/		return 0x821577EC;
		  /* 821577ECh */ case   16:  		/* mr R4, R24 */
		/* 821577ECh case   16:*/		regs.R4 = regs.R24;
		/* 821577ECh case   16:*/		return 0x821577F0;
		  /* 821577F0h */ case   17:  		/* addi R3, R1, 80 */
		/* 821577F0h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821577F0h case   17:*/		return 0x821577F4;
		  /* 821577F4h */ case   18:  		/* bl -660 */
		/* 821577F4h case   18:*/		regs.LR = 0x821577F8; return 0x82157560;
		/* 821577F4h case   18:*/		return 0x821577F8;
		  /* 821577F8h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 821577F8h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821577F8h case   19:*/		return 0x821577FC;
		  /* 821577FCh */ case   20:  		/* bc 12, CR0_EQ, 12 */
		/* 821577FCh case   20:*/		if ( regs.CR[0].eq ) { return 0x82157808;  }
		/* 821577FCh case   20:*/		return 0x82157800;
		  /* 82157800h */ case   21:  		/* li R3, 1 */
		/* 82157800h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82157800h case   21:*/		return 0x82157804;
		  /* 82157804h */ case   22:  		/* b 752 */
		/* 82157804h case   22:*/		return 0x82157AF4;
		/* 82157804h case   22:*/		return 0x82157808;
	}
	return 0x82157808;
} // Block from 821577ACh-82157808h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82157808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157808);
		  /* 82157808h */ case    0:  		/* addi R5, R1, 80 */
		/* 82157808h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82157808h case    0:*/		return 0x8215780C;
		  /* 8215780Ch */ case    1:  		/* mr R4, R26 */
		/* 8215780Ch case    1:*/		regs.R4 = regs.R26;
		/* 8215780Ch case    1:*/		return 0x82157810;
		  /* 82157810h */ case    2:  		/* mr R3, R27 */
		/* 82157810h case    2:*/		regs.R3 = regs.R27;
		/* 82157810h case    2:*/		return 0x82157814;
		  /* 82157814h */ case    3:  		/* bl -2156 */
		/* 82157814h case    3:*/		regs.LR = 0x82157818; return 0x82156FA8;
		/* 82157814h case    3:*/		return 0x82157818;
	}
	return 0x82157818;
} // Block from 82157808h-82157818h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157818);
		  /* 82157818h */ case    0:  		/* addi R11, R21, 4 */
		/* 82157818h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x4);
		/* 82157818h case    0:*/		return 0x8215781C;
		  /* 8215781Ch */ case    1:  		/* stw R11, <#[R1 + 84]> */
		/* 8215781Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8215781Ch case    1:*/		return 0x82157820;
		  /* 82157820h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82157820h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82157820h case    2:*/		return 0x82157824;
		  /* 82157824h */ case    3:  		/* cmplwi CR6, R10, 65535 */
		/* 82157824h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFF);
		/* 82157824h case    3:*/		return 0x82157828;
		  /* 82157828h */ case    4:  		/* bc 12, CR6_EQ, 568 */
		/* 82157828h case    4:*/		if ( regs.CR[6].eq ) { return 0x82157A60;  }
		/* 82157828h case    4:*/		return 0x8215782C;
		  /* 8215782Ch */ case    5:  		/* lis R11, -32215 */
		/* 8215782Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8215782Ch case    5:*/		return 0x82157830;
		  /* 82157830h */ case    6:  		/* addi R25, R11, -27976 */
		/* 82157830h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFF92B8);
		/* 82157830h case    6:*/		return 0x82157834;
		  /* 82157834h */ case    7:  		/* mr R4, R24 */
		/* 82157834h case    7:*/		regs.R4 = regs.R24;
		/* 82157834h case    7:*/		return 0x82157838;
		  /* 82157838h */ case    8:  		/* addi R3, R1, 80 */
		/* 82157838h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82157838h case    8:*/		return 0x8215783C;
		  /* 8215783Ch */ case    9:  		/* bl -732 */
		/* 8215783Ch case    9:*/		regs.LR = 0x82157840; return 0x82157560;
		/* 8215783Ch case    9:*/		return 0x82157840;
		  /* 82157840h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82157840h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82157840h case   10:*/		return 0x82157844;
		  /* 82157844h */ case   11:  		/* bc 4, CR0_EQ, -68 */
		/* 82157844h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82157800;  }
		/* 82157844h case   11:*/		return 0x82157848;
		  /* 82157848h */ case   12:  		/* lwz R9, <#[R1 + 84]> */
		/* 82157848h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82157848h case   12:*/		return 0x8215784C;
		  /* 8215784Ch */ case   13:  		/* lwz R22, <#[R1 + 80]> */
		/* 8215784Ch case   13:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000050) );
		/* 8215784Ch case   13:*/		return 0x82157850;
		  /* 82157850h */ case   14:  		/* lwz R11, <#[R9]> */
		/* 82157850h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82157850h case   14:*/		return 0x82157854;
		  /* 82157854h */ case   15:  		/* rlwinm. R8, R11, 0, 0, 0 */
		/* 82157854h case   15:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R8,regs.R11);
		/* 82157854h case   15:*/		return 0x82157858;
		  /* 82157858h */ case   16:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 82157858h case   16:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 82157858h case   16:*/		return 0x8215785C;
		  /* 8215785Ch */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 8215785Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x82157868;  }
		/* 8215785Ch case   17:*/		return 0x82157860;
		  /* 82157860h */ case   18:  		/* bl 1112576 */
		/* 82157860h case   18:*/		regs.LR = 0x82157864; return 0x82267260;
		/* 82157860h case   18:*/		return 0x82157864;
		  /* 82157864h */ case   19:  		/* b 448 */
		/* 82157864h case   19:*/		return 0x82157A24;
		/* 82157864h case   19:*/		return 0x82157868;
	}
	return 0x82157868;
} // Block from 82157818h-82157868h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82157868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157868);
		  /* 82157868h */ case    0:  		/* cmplwi CR6, R10, 65534 */
		/* 82157868h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFE);
		/* 82157868h case    0:*/		return 0x8215786C;
		  /* 8215786Ch */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8215786Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157884;  }
		/* 8215786Ch case    1:*/		return 0x82157870;
		  /* 82157870h */ case    2:  		/* rlwinm R11, R11, 16, 17, 31 */
		/* 82157870h case    2:*/		cpu::op::rlwinm<0,16,17,31>(regs,&regs.R11,regs.R11);
		/* 82157870h case    2:*/		return 0x82157874;
		  /* 82157874h */ case    3:  		/* addi R11, R11, 1 */
		/* 82157874h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82157874h case    3:*/		return 0x82157878;
		  /* 82157878h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82157878h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82157878h case    4:*/		return 0x8215787C;
		  /* 8215787Ch */ case    5:  		/* add R11, R11, R9 */
		/* 8215787Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8215787Ch case    5:*/		return 0x82157880;
		  /* 82157880h */ case    6:  		/* b 416 */
		/* 82157880h case    6:*/		return 0x82157A20;
		/* 82157880h case    6:*/		return 0x82157884;
	}
	return 0x82157884;
} // Block from 82157868h-82157884h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82157884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157884);
		  /* 82157884h */ case    0:  		/* cmplwi CR6, R10, 65533 */
		/* 82157884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFD);
		/* 82157884h case    0:*/		return 0x82157888;
		  /* 82157888h */ case    1:  		/* bc 12, CR6_EQ, 404 */
		/* 82157888h case    1:*/		if ( regs.CR[6].eq ) { return 0x82157A1C;  }
		/* 82157888h case    1:*/		return 0x8215788C;
		  /* 8215788Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8215788Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8215788Ch case    2:*/		return 0x82157890;
		  /* 82157890h */ case    3:  		/* bc 12, CR6_EQ, 396 */
		/* 82157890h case    3:*/		if ( regs.CR[6].eq ) { return 0x82157A1C;  }
		/* 82157890h case    3:*/		return 0x82157894;
		  /* 82157894h */ case    4:  		/* cmplwi CR6, R10, 81 */
		/* 82157894h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000051);
		/* 82157894h case    4:*/		return 0x82157898;
		  /* 82157898h */ case    5:  		/* bc 4, CR6_EQ, 40 */
		/* 82157898h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821578C0;  }
		/* 82157898h case    5:*/		return 0x8215789C;
		  /* 8215789Ch */ case    6:  		/* cmplw CR6, R27, R23 */
		/* 8215789Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 8215789Ch case    6:*/		return 0x821578A0;
		  /* 821578A0h */ case    7:  		/* bc 12, CR6_LT, 24 */
		/* 821578A0h case    7:*/		if ( regs.CR[6].lt ) { return 0x821578B8;  }
		/* 821578A0h case    7:*/		return 0x821578A4;
		  /* 821578A4h */ case    8:  		/* addi R5, R1, 80 */
		/* 821578A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821578A4h case    8:*/		return 0x821578A8;
		  /* 821578A8h */ case    9:  		/* mr R4, R27 */
		/* 821578A8h case    9:*/		regs.R4 = regs.R27;
		/* 821578A8h case    9:*/		return 0x821578AC;
		  /* 821578ACh */ case   10:  		/* addi R3, R1, 84 */
		/* 821578ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 821578ACh case   10:*/		return 0x821578B0;
		  /* 821578B0h */ case   11:  		/* bl -4240 */
		/* 821578B0h case   11:*/		regs.LR = 0x821578B4; return 0x82156820;
		/* 821578B0h case   11:*/		return 0x821578B4;
		  /* 821578B4h */ case   12:  		/* b 368 */
		/* 821578B4h case   12:*/		return 0x82157A24;
		/* 821578B4h case   12:*/		return 0x821578B8;
	}
	return 0x821578B8;
} // Block from 82157884h-821578B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821578B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821578B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821578B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821578B8);
		  /* 821578B8h */ case    0:  		/* addi R11, R9, 24 */
		/* 821578B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x18);
		/* 821578B8h case    0:*/		return 0x821578BC;
		  /* 821578BCh */ case    1:  		/* b 356 */
		/* 821578BCh case    1:*/		return 0x82157A20;
		/* 821578BCh case    1:*/		return 0x821578C0;
	}
	return 0x821578C0;
} // Block from 821578B8h-821578C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821578C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821578C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821578C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821578C0);
		  /* 821578C0h */ case    0:  		/* cmplwi CR6, R10, 48 */
		/* 821578C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 821578C0h case    0:*/		return 0x821578C4;
		  /* 821578C4h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821578C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821578DC;  }
		/* 821578C4h case    1:*/		return 0x821578C8;
		  /* 821578C8h */ case    2:  		/* addi R5, R1, 80 */
		/* 821578C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821578C8h case    2:*/		return 0x821578CC;
		  /* 821578CCh */ case    3:  		/* mr R4, R27 */
		/* 821578CCh case    3:*/		regs.R4 = regs.R27;
		/* 821578CCh case    3:*/		return 0x821578D0;
		  /* 821578D0h */ case    4:  		/* addi R3, R1, 84 */
		/* 821578D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 821578D0h case    4:*/		return 0x821578D4;
		  /* 821578D4h */ case    5:  		/* bl -4100 */
		/* 821578D4h case    5:*/		regs.LR = 0x821578D8; return 0x821568D0;
		/* 821578D4h case    5:*/		return 0x821578D8;
		  /* 821578D8h */ case    6:  		/* b 332 */
		/* 821578D8h case    6:*/		return 0x82157A24;
		/* 821578D8h case    6:*/		return 0x821578DC;
	}
	return 0x821578DC;
} // Block from 821578C0h-821578DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821578DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821578DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821578DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821578DC);
		  /* 821578DCh */ case    0:  		/* cmplwi CR6, R10, 47 */
		/* 821578DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000002F);
		/* 821578DCh case    0:*/		return 0x821578E0;
		  /* 821578E0h */ case    1:  		/* bc 4, CR6_EQ, 128 */
		/* 821578E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157960;  }
		/* 821578E0h case    1:*/		return 0x821578E4;
		  /* 821578E4h */ case    2:  		/* cmplw CR6, R27, R23 */
		/* 821578E4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 821578E4h case    2:*/		return 0x821578E8;
		  /* 821578E8h */ case    3:  		/* bc 4, CR6_LT, 12 */
		/* 821578E8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821578F4;  }
		/* 821578E8h case    3:*/		return 0x821578EC;
		  /* 821578ECh */ case    4:  		/* bl 1112436 */
		/* 821578ECh case    4:*/		regs.LR = 0x821578F0; return 0x82267260;
		/* 821578ECh case    4:*/		return 0x821578F0;
		  /* 821578F0h */ case    5:  		/* lwz R9, <#[R1 + 84]> */
		/* 821578F0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 821578F0h case    5:*/		return 0x821578F4;
	}
	return 0x821578F4;
} // Block from 821578DCh-821578F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821578F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821578F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821578F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821578F4);
		  /* 821578F4h */ case    0:  		/* lwz R29, <#[R9 + 4]> */
		/* 821578F4h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + 0x00000004) );
		/* 821578F4h case    0:*/		return 0x821578F8;
		  /* 821578F8h */ case    1:  		/* addi R11, R9, 4 */
		/* 821578F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x4);
		/* 821578F8h case    1:*/		return 0x821578FC;
		  /* 821578FCh */ case    2:  		/* lwz R31, <#[R1 + 80]> */
		/* 821578FCh case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821578FCh case    2:*/		return 0x82157900;
		  /* 82157900h */ case    3:  		/* rlwinm R30, R29, 0, 21, 31 */
		/* 82157900h case    3:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R30,regs.R29);
		/* 82157900h case    3:*/		return 0x82157904;
		  /* 82157904h */ case    4:  		/* addi R28, R11, 4 */
		/* 82157904h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4);
		/* 82157904h case    4:*/		return 0x82157908;
		  /* 82157908h */ case    5:  		/* cmplwi CR6, R30, 16 */
		/* 82157908h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 82157908h case    5:*/		return 0x8215790C;
		  /* 8215790Ch */ case    6:  		/* bc 12, CR6_LT, 12 */
		/* 8215790Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x82157918;  }
		/* 8215790Ch case    6:*/		return 0x82157910;
		  /* 82157910h */ case    7:  		/* bl 1112400 */
		/* 82157910h case    7:*/		regs.LR = 0x82157914; return 0x82267260;
		/* 82157910h case    7:*/		return 0x82157914;
		  /* 82157914h */ case    8:  		/* li R30, 15 */
		/* 82157914h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0xF);
		/* 82157914h case    8:*/		return 0x82157918;
	}
	return 0x82157918;
} // Block from 821578F4h-82157918h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82157918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157918);
		  /* 82157918h */ case    0:  		/* rlwimi R29, R29, 12, 21, 23 */
		/* 82157918h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R29,regs.R29);
		/* 82157918h case    0:*/		return 0x8215791C;
		  /* 8215791Ch */ case    1:  		/* rlwinm R11, R29, 0, 19, 23 */
		/* 8215791Ch case    1:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R29);
		/* 8215791Ch case    1:*/		return 0x82157920;
		  /* 82157920h */ case    2:  		/* cmplwi CR6, R11, 3584 */
		/* 82157920h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000E00);
		/* 82157920h case    2:*/		return 0x82157924;
		  /* 82157924h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82157924h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215792C;  }
		/* 82157924h case    3:*/		return 0x82157928;
		  /* 82157928h */ case    4:  		/* bl 1112376 */
		/* 82157928h case    4:*/		regs.LR = 0x8215792C; return 0x82267260;
		/* 82157928h case    4:*/		return 0x8215792C;
	}
	return 0x8215792C;
} // Block from 82157918h-8215792Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215792Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215792C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215792C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215792C);
		  /* 8215792Ch */ case    0:  		/* li R11, 29 */
		/* 8215792Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1D);
		/* 8215792Ch case    0:*/		return 0x82157930;
		  /* 82157930h */ case    1:  		/* rlwinm R10, R30, 0, 16, 31 */
		/* 82157930h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R30);
		/* 82157930h case    1:*/		return 0x82157934;
		  /* 82157934h */ case    2:  		/* stw R11, <#[R31]> */
		/* 82157934h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82157934h case    2:*/		return 0x82157938;
		  /* 82157938h */ case    3:  		/* addi R11, R28, 4 */
		/* 82157938h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x4);
		/* 82157938h case    3:*/		return 0x8215793C;
		  /* 8215793Ch */ case    4:  		/* stwu R10, <#[R31 + 4]> */
		/* 8215793Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215793Ch case    4:*/		return 0x82157940;
		  /* 82157940h */ case    5:  		/* lwz R10, <#[R28]> */
		/* 82157940h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82157940h case    5:*/		return 0x82157944;
		  /* 82157944h */ case    6:  		/* addic R9, R10, -1 */
		/* 82157944h case    6:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82157944h case    6:*/		return 0x82157948;
		  /* 82157948h */ case    7:  		/* subfe R10, R9, R10 */
		/* 82157948h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82157948h case    7:*/		return 0x8215794C;
		  /* 8215794Ch */ case    8:  		/* stwu R10, <#[R31 + 4]> */
		/* 8215794Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215794Ch case    8:*/		return 0x82157950;
		  /* 82157950h */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 82157950h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157950h case    9:*/		return 0x82157954;
		  /* 82157954h */ case   10:  		/* addi R11, R31, 4 */
		/* 82157954h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82157954h case   10:*/		return 0x82157958;
		  /* 82157958h */ case   11:  		/* stw R11, <#[R1 + 80]> */
		/* 82157958h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157958h case   11:*/		return 0x8215795C;
		  /* 8215795Ch */ case   12:  		/* b 200 */
		/* 8215795Ch case   12:*/		return 0x82157A24;
		/* 8215795Ch case   12:*/		return 0x82157960;
	}
	return 0x82157960;
} // Block from 8215792Ch-82157960h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82157960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157960);
		  /* 82157960h */ case    0:  		/* cmplwi CR6, R10, 31 */
		/* 82157960h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001F);
		/* 82157960h case    0:*/		return 0x82157964;
		  /* 82157964h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82157964h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215799C;  }
		/* 82157964h case    1:*/		return 0x82157968;
	}
	return 0x82157968;
} // Block from 82157960h-82157968h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157968h
// Function '?ProcessFirstPassInfo@XGRAPHICS@@YAXKPAU_R400PSIL@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157968);
		  /* 82157968h */ case    0:  		/* cmplw CR6, R27, R23 */
		/* 82157968h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 82157968h case    0:*/		return 0x8215796C;
		  /* 8215796Ch */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8215796Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x82157974;  }
		/* 8215796Ch case    1:*/		return 0x82157970;
		  /* 82157970h */ case    2:  		/* bl 1112304 */
		/* 82157970h case    2:*/		regs.LR = 0x82157974; return 0x82267260;
		/* 82157970h case    2:*/		return 0x82157974;
	}
	return 0x82157974;
} // Block from 82157968h-82157974h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82157974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157974);
		  /* 82157974h */ case    0:  		/* mr R8, R18 */
		/* 82157974h case    0:*/		regs.R8 = regs.R18;
		/* 82157974h case    0:*/		return 0x82157978;
		  /* 82157978h */ case    1:  		/* mr R7, R19 */
		/* 82157978h case    1:*/		regs.R7 = regs.R19;
		/* 82157978h case    1:*/		return 0x8215797C;
		  /* 8215797Ch */ case    2:  		/* addi R6, R1, 80 */
		/* 8215797Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8215797Ch case    2:*/		return 0x82157980;
		  /* 82157980h */ case    3:  		/* mr R5, R26 */
		/* 82157980h case    3:*/		regs.R5 = regs.R26;
		/* 82157980h case    3:*/		return 0x82157984;
		  /* 82157984h */ case    4:  		/* mr R4, R27 */
		/* 82157984h case    4:*/		regs.R4 = regs.R27;
		/* 82157984h case    4:*/		return 0x82157988;
		  /* 82157988h */ case    5:  		/* addi R3, R1, 84 */
		/* 82157988h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 82157988h case    5:*/		return 0x8215798C;
		  /* 8215798Ch */ case    6:  		/* bl -3100 */
		/* 8215798Ch case    6:*/		regs.LR = 0x82157990; return 0x82156D70;
		/* 8215798Ch case    6:*/		return 0x82157990;
		  /* 82157990h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82157990h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82157990h case    7:*/		return 0x82157994;
		  /* 82157994h */ case    8:  		/* bc 4, CR0_EQ, 352 */
		/* 82157994h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82157AF4;  }
		/* 82157994h case    8:*/		return 0x82157998;
		  /* 82157998h */ case    9:  		/* b 140 */
		/* 82157998h case    9:*/		return 0x82157A24;
		/* 82157998h case    9:*/		return 0x8215799C;
	}
	return 0x8215799C;
} // Block from 82157974h-8215799Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215799Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215799C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215799C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215799C);
		  /* 8215799Ch */ case    0:  		/* cmplwi CR6, R10, 28 */
		/* 8215799Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001C);
		/* 8215799Ch case    0:*/		return 0x821579A0;
		  /* 821579A0h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 821579A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821579E8;  }
		/* 821579A0h case    1:*/		return 0x821579A4;
		  /* 821579A4h */ case    2:  		/* lwz R11, <#[R26 + 16]> */
		/* 821579A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 821579A4h case    2:*/		return 0x821579A8;
		  /* 821579A8h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821579A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821579A8h case    3:*/		return 0x821579AC;
		  /* 821579ACh */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821579ACh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821579ACh case    4:*/		return 0x821579B0;
		  /* 821579B0h */ case    5:  		/* bc 4, CR6_EQ, 64 */
		/* 821579B0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821579F0;  }
		/* 821579B0h case    5:*/		return 0x821579B4;
		  /* 821579B4h */ case    6:  		/* cmplw CR6, R27, R23 */
		/* 821579B4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R23);
		/* 821579B4h case    6:*/		return 0x821579B8;
		  /* 821579B8h */ case    7:  		/* bc 4, CR6_LT, 8 */
		/* 821579B8h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821579C0;  }
		/* 821579B8h case    7:*/		return 0x821579BC;
		  /* 821579BCh */ case    8:  		/* bl 1112228 */
		/* 821579BCh case    8:*/		regs.LR = 0x821579C0; return 0x82267260;
		/* 821579BCh case    8:*/		return 0x821579C0;
	}
	return 0x821579C0;
} // Block from 8215799Ch-821579C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821579C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821579C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821579C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821579C0);
		  /* 821579C0h */ case    0:  		/* mr R6, R26 */
		/* 821579C0h case    0:*/		regs.R6 = regs.R26;
		/* 821579C0h case    0:*/		return 0x821579C4;
		  /* 821579C4h */ case    1:  		/* mr R5, R24 */
		/* 821579C4h case    1:*/		regs.R5 = regs.R24;
		/* 821579C4h case    1:*/		return 0x821579C8;
		  /* 821579C8h */ case    2:  		/* addi R4, R1, 80 */
		/* 821579C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821579C8h case    2:*/		return 0x821579CC;
		  /* 821579CCh */ case    3:  		/* mr R3, R27 */
		/* 821579CCh case    3:*/		regs.R3 = regs.R27;
		/* 821579CCh case    3:*/		return 0x821579D0;
		  /* 821579D0h */ case    4:  		/* bl -992 */
		/* 821579D0h case    4:*/		regs.LR = 0x821579D4; return 0x821575F0;
		/* 821579D0h case    4:*/		return 0x821579D4;
		  /* 821579D4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 821579D4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821579D4h case    5:*/		return 0x821579D8;
		  /* 821579D8h */ case    6:  		/* bc 4, CR0_EQ, 284 */
		/* 821579D8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82157AF4;  }
		/* 821579D8h case    6:*/		return 0x821579DC;
		  /* 821579DCh */ case    7:  		/* lwz R11, <#[R25 + 228]> */
		/* 821579DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x000000E4) );
		/* 821579DCh case    7:*/		return 0x821579E0;
		  /* 821579E0h */ case    8:  		/* lwz R5, <#[R25 + 224]> */
		/* 821579E0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x000000E0) );
		/* 821579E0h case    8:*/		return 0x821579E4;
		  /* 821579E4h */ case    9:  		/* b 28 */
		/* 821579E4h case    9:*/		return 0x82157A00;
		/* 821579E4h case    9:*/		return 0x821579E8;
	}
	return 0x821579E8;
} // Block from 821579C0h-821579E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821579E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821579E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821579E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821579E8);
		  /* 821579E8h */ case    0:  		/* cmplwi CR6, R10, 97 */
		/* 821579E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000061);
		/* 821579E8h case    0:*/		return 0x821579EC;
		  /* 821579ECh */ case    1:  		/* bc 4, CR6_LT, -396 */
		/* 821579ECh case    1:*/		if ( !regs.CR[6].lt ) { return 0x82157860;  }
		/* 821579ECh case    1:*/		return 0x821579F0;
	}
	return 0x821579F0;
} // Block from 821579E8h-821579F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821579F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821579F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821579F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821579F0);
		  /* 821579F0h */ case    0:  		/* rlwinm R11, R10, 3, 0, 28 */
		/* 821579F0h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R10);
		/* 821579F0h case    0:*/		return 0x821579F4;
		  /* 821579F4h */ case    1:  		/* addi R10, R25, 4 */
		/* 821579F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x4);
		/* 821579F4h case    1:*/		return 0x821579F8;
		  /* 821579F8h */ case    2:  		/* lwzx R5, <#[R11 + R25]> */
		/* 821579F8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821579F8h case    2:*/		return 0x821579FC;
		  /* 821579FCh */ case    3:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821579FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821579FCh case    3:*/		return 0x82157A00;
	}
	return 0x82157A00;
} // Block from 821579F0h-82157A00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A00);
		  /* 82157A00h */ case    0:  		/* addi R3, R1, 84 */
		/* 82157A00h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 82157A00h case    0:*/		return 0x82157A04;
		  /* 82157A04h */ case    1:  		/* lwz R6, <#[R26 + 16]> */
		/* 82157A04h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R26 + 0x00000010) );
		/* 82157A04h case    1:*/		return 0x82157A08;
		  /* 82157A08h */ case    2:  		/* mr R4, R27 */
		/* 82157A08h case    2:*/		regs.R4 = regs.R27;
		/* 82157A08h case    2:*/		return 0x82157A0C;
		  /* 82157A0Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 82157A0Ch case    3:*/		regs.CTR = regs.R11;
		/* 82157A0Ch case    3:*/		return 0x82157A10;
		  /* 82157A10h */ case    4:  		/* addi R7, R1, 80 */
		/* 82157A10h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82157A10h case    4:*/		return 0x82157A14;
		  /* 82157A14h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 82157A14h case    5:*/		if ( 1 ) { regs.LR = 0x82157A18; return (uint32)regs.CTR; }
		/* 82157A14h case    5:*/		return 0x82157A18;
		  /* 82157A18h */ case    6:  		/* b 12 */
		/* 82157A18h case    6:*/		return 0x82157A24;
		/* 82157A18h case    6:*/		return 0x82157A1C;
	}
	return 0x82157A1C;
} // Block from 82157A00h-82157A1Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82157A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A1C);
		  /* 82157A1Ch */ case    0:  		/* addi R11, R9, 4 */
		/* 82157A1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x4);
		/* 82157A1Ch case    0:*/		return 0x82157A20;
	}
	return 0x82157A20;
} // Block from 82157A1Ch-82157A20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A20);
		  /* 82157A20h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 82157A20h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157A20h case    0:*/		return 0x82157A24;
	}
	return 0x82157A24;
} // Block from 82157A20h-82157A24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A24);
		  /* 82157A24h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 82157A24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157A24h case    0:*/		return 0x82157A28;
		  /* 82157A28h */ case    1:  		/* subf R11, R21, R11 */
		/* 82157A28h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 82157A28h case    1:*/		return 0x82157A2C;
		  /* 82157A2Ch */ case    2:  		/* srawi R11, R11, 2 */
		/* 82157A2Ch case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 82157A2Ch case    2:*/		return 0x82157A30;
		  /* 82157A30h */ case    3:  		/* cmpw CR6, R11, R20 */
		/* 82157A30h case    3:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R20);
		/* 82157A30h case    3:*/		return 0x82157A34;
		  /* 82157A34h */ case    4:  		/* bc 12, CR6_GT, 200 */
		/* 82157A34h case    4:*/		if ( regs.CR[6].gt ) { return 0x82157AFC;  }
		/* 82157A34h case    4:*/		return 0x82157A38;
		  /* 82157A38h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 82157A38h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157A38h case    5:*/		return 0x82157A3C;
		  /* 82157A3Ch */ case    6:  		/* subf R11, R22, R11 */
		/* 82157A3Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 82157A3Ch case    6:*/		return 0x82157A40;
		  /* 82157A40h */ case    7:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 82157A40h case    7:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 82157A40h case    7:*/		return 0x82157A44;
		  /* 82157A44h */ case    8:  		/* cmpwi CR6, R11, 1024 */
		/* 82157A44h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000400);
		/* 82157A44h case    8:*/		return 0x82157A48;
		  /* 82157A48h */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82157A48h case    9:*/		if ( regs.CR[6].lt ) { return 0x82157A50;  }
		/* 82157A48h case    9:*/		return 0x82157A4C;
		  /* 82157A4Ch */ case   10:  		/* bl 1112084 */
		/* 82157A4Ch case   10:*/		regs.LR = 0x82157A50; return 0x82267260;
		/* 82157A4Ch case   10:*/		return 0x82157A50;
	}
	return 0x82157A50;
} // Block from 82157A24h-82157A50h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82157A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A50);
		  /* 82157A50h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 82157A50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157A50h case    0:*/		return 0x82157A54;
		  /* 82157A54h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 82157A54h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82157A54h case    1:*/		return 0x82157A58;
		  /* 82157A58h */ case    2:  		/* cmplwi CR6, R10, 65535 */
		/* 82157A58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFF);
		/* 82157A58h case    2:*/		return 0x82157A5C;
		  /* 82157A5Ch */ case    3:  		/* bc 4, CR6_EQ, -552 */
		/* 82157A5Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82157834;  }
		/* 82157A5Ch case    3:*/		return 0x82157A60;
	}
	return 0x82157A60;
} // Block from 82157A50h-82157A60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157A60);
		  /* 82157A60h */ case    0:  		/* addi R11, R11, 4 */
		/* 82157A60h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82157A60h case    0:*/		return 0x82157A64;
		  /* 82157A64h */ case    1:  		/* subf R10, R21, R11 */
		/* 82157A64h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R21,regs.R11);
		/* 82157A64h case    1:*/		return 0x82157A68;
		  /* 82157A68h */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 82157A68h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82157A68h case    2:*/		return 0x82157A6C;
		  /* 82157A6Ch */ case    3:  		/* srawi R11, R10, 2 */
		/* 82157A6Ch case    3:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R10);
		/* 82157A6Ch case    3:*/		return 0x82157A70;
		  /* 82157A70h */ case    4:  		/* cmpw CR6, R11, R20 */
		/* 82157A70h case    4:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R20);
		/* 82157A70h case    4:*/		return 0x82157A74;
		  /* 82157A74h */ case    5:  		/* bc 4, CR6_EQ, 140 */
		/* 82157A74h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82157B00;  }
		/* 82157A74h case    5:*/		return 0x82157A78;
		  /* 82157A78h */ case    6:  		/* mr R4, R24 */
		/* 82157A78h case    6:*/		regs.R4 = regs.R24;
		/* 82157A78h case    6:*/		return 0x82157A7C;
		  /* 82157A7Ch */ case    7:  		/* addi R3, R1, 80 */
		/* 82157A7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82157A7Ch case    7:*/		return 0x82157A80;
		  /* 82157A80h */ case    8:  		/* bl -1312 */
		/* 82157A80h case    8:*/		regs.LR = 0x82157A84; return 0x82157560;
		/* 82157A80h case    8:*/		return 0x82157A84;
		  /* 82157A84h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82157A84h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82157A84h case    9:*/		return 0x82157A88;
		  /* 82157A88h */ case   10:  		/* bc 4, CR0_EQ, -648 */
		/* 82157A88h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82157800;  }
		/* 82157A88h case   10:*/		return 0x82157A8C;
		  /* 82157A8Ch */ case   11:  		/* lwz R11, <#[R26 + 16]> */
		/* 82157A8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82157A8Ch case   11:*/		return 0x82157A90;
		  /* 82157A90h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82157A90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82157A90h case   12:*/		return 0x82157A94;
		  /* 82157A94h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 82157A94h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82157A94h case   13:*/		return 0x82157A98;
		  /* 82157A98h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 82157A98h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82157AB8;  }
		/* 82157A98h case   14:*/		return 0x82157A9C;
		  /* 82157A9Ch */ case   15:  		/* mr R6, R26 */
		/* 82157A9Ch case   15:*/		regs.R6 = regs.R26;
		/* 82157A9Ch case   15:*/		return 0x82157AA0;
		  /* 82157AA0h */ case   16:  		/* mr R5, R24 */
		/* 82157AA0h case   16:*/		regs.R5 = regs.R24;
		/* 82157AA0h case   16:*/		return 0x82157AA4;
		  /* 82157AA4h */ case   17:  		/* addi R4, R1, 80 */
		/* 82157AA4h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82157AA4h case   17:*/		return 0x82157AA8;
		  /* 82157AA8h */ case   18:  		/* mr R3, R27 */
		/* 82157AA8h case   18:*/		regs.R3 = regs.R27;
		/* 82157AA8h case   18:*/		return 0x82157AAC;
		  /* 82157AACh */ case   19:  		/* bl -1212 */
		/* 82157AACh case   19:*/		regs.LR = 0x82157AB0; return 0x821575F0;
		/* 82157AACh case   19:*/		return 0x82157AB0;
		  /* 82157AB0h */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 82157AB0h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82157AB0h case   20:*/		return 0x82157AB4;
		  /* 82157AB4h */ case   21:  		/* bc 4, CR0_EQ, 64 */
		/* 82157AB4h case   21:*/		if ( !regs.CR[0].eq ) { return 0x82157AF4;  }
		/* 82157AB4h case   21:*/		return 0x82157AB8;
	}
	return 0x82157AB8;
} // Block from 82157A60h-82157AB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82157AB8h
// Function '?CollectPS1InstInfo@XGRAPHICS@@YAXKPAPAKPAU_R400PSIL@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157AB8);
		  /* 82157AB8h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82157AB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157AB8h case    0:*/		return 0x82157ABC;
		  /* 82157ABCh */ case    1:  		/* li R10, 40 */
		/* 82157ABCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x28);
		/* 82157ABCh case    1:*/		return 0x82157AC0;
		  /* 82157AC0h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82157AC0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82157AC0h case    2:*/		return 0x82157AC4;
		  /* 82157AC4h */ case    3:  		/* lwz R11, <#[R1 + 80]> */
		/* 82157AC4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157AC4h case    3:*/		return 0x82157AC8;
		  /* 82157AC8h */ case    4:  		/* addi R11, R11, 4 */
		/* 82157AC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82157AC8h case    4:*/		return 0x82157ACC;
		  /* 82157ACCh */ case    5:  		/* lwz R9, <#[R24]> */
		/* 82157ACCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R24 + 0x00000000) );
		/* 82157ACCh case    5:*/		return 0x82157AD0;
		  /* 82157AD0h */ case    6:  		/* lwz R10, <#[R24 + 4]> */
		/* 82157AD0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 82157AD0h case    6:*/		return 0x82157AD4;
		  /* 82157AD4h */ case    7:  		/* subf R9, R9, R11 */
		/* 82157AD4h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82157AD4h case    7:*/		return 0x82157AD8;
		  /* 82157AD8h */ case    8:  		/* stw R11, <#[R1 + 80]> */
		/* 82157AD8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82157AD8h case    8:*/		return 0x82157ADC;
		  /* 82157ADCh */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 82157ADCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82157ADCh case    9:*/		return 0x82157AE0;
		  /* 82157AE0h */ case   10:  		/* srawi R9, R9, 2 */
		/* 82157AE0h case   10:*/		cpu::op::srawi<0,2>(regs,&regs.R9,regs.R9);
		/* 82157AE0h case   10:*/		return 0x82157AE4;
		  /* 82157AE4h */ case   11:  		/* stw R9, <#[R24 + 8]> */
		/* 82157AE4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R24 + 0x00000008) );
		/* 82157AE4h case   11:*/		return 0x82157AE8;
		  /* 82157AE8h */ case   12:  		/* bc 4, CR6_GT, 8 */
		/* 82157AE8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82157AF0;  }
		/* 82157AE8h case   12:*/		return 0x82157AEC;
		  /* 82157AECh */ case   13:  		/* bl 1111924 */
		/* 82157AECh case   13:*/		regs.LR = 0x82157AF0; return 0x82267260;
		/* 82157AECh case   13:*/		return 0x82157AF0;
	}
	return 0x82157AF0;
} // Block from 82157AB8h-82157AF0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82157AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157AF0);
		  /* 82157AF0h */ case    0:  		/* li R3, 0 */
		/* 82157AF0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82157AF0h case    0:*/		return 0x82157AF4;
	}
	return 0x82157AF4;
} // Block from 82157AF0h-82157AF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157AF4);
		  /* 82157AF4h */ case    0:  		/* addi R1, R1, 208 */
		/* 82157AF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82157AF4h case    0:*/		return 0x82157AF8;
		  /* 82157AF8h */ case    1:  		/* b -813176 */
		/* 82157AF8h case    1:*/		return 0x82091280;
		/* 82157AF8h case    1:*/		return 0x82157AFC;
	}
	return 0x82157AFC;
} // Block from 82157AF4h-82157AFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157AFC);
		  /* 82157AFCh */ case    0:  		/* bl 1111908 */
		/* 82157AFCh case    0:*/		regs.LR = 0x82157B00; return 0x82267260;
		/* 82157AFCh case    0:*/		return 0x82157B00;
	}
	return 0x82157B00;
} // Block from 82157AFCh-82157B00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157B00);
		  /* 82157B00h */ case    0:  		/* bl 1111904 */
		/* 82157B00h case    0:*/		regs.LR = 0x82157B04; return 0x82267260;
		/* 82157B00h case    0:*/		return 0x82157B04;
		  /* 82157B04h */ case    1:  		/* li R3, 2 */
		/* 82157B04h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82157B04h case    1:*/		return 0x82157B08;
		  /* 82157B08h */ case    2:  		/* b -20 */
		/* 82157B08h case    2:*/		return 0x82157AF4;
		/* 82157B08h case    2:*/		return 0x82157B0C;
		  /* 82157B0Ch */ case    3:  		/* nop */
		/* 82157B0Ch case    3:*/		cpu::op::nop();
		/* 82157B0Ch case    3:*/		return 0x82157B10;
	}
	return 0x82157B10;
} // Block from 82157B00h-82157B10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157B10h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157B10);
		  /* 82157B10h */ case    0:  		/* addi R11, R4, -1 */
		/* 82157B10h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFF);
		/* 82157B10h case    0:*/		return 0x82157B14;
		  /* 82157B14h */ case    1:  		/* subfic R9, R5, 32 */
		/* 82157B14h case    1:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R5,0x20);
		/* 82157B14h case    1:*/		return 0x82157B18;
		  /* 82157B18h */ case    2:  		/* rlwinm R10, R11, 29, 3, 31 */
		/* 82157B18h case    2:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R11);
		/* 82157B18h case    2:*/		return 0x82157B1C;
		  /* 82157B1Ch */ case    3:  		/* add R11, R10, R3 */
		/* 82157B1Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R3);
		/* 82157B1Ch case    3:*/		return 0x82157B20;
		  /* 82157B20h */ case    4:  		/* rlwinm R8, R10, 3, 0, 28 */
		/* 82157B20h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R10);
		/* 82157B20h case    4:*/		return 0x82157B24;
		  /* 82157B24h */ case    5:  		/* subf R8, R4, R8 */
		/* 82157B24h case    5:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 82157B24h case    5:*/		return 0x82157B28;
		  /* 82157B28h */ case    6:  		/* lbzx R7, <#[R10 + R3]> */
		/* 82157B28h case    6:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82157B28h case    6:*/		return 0x82157B2C;
		  /* 82157B2Ch */ case    7:  		/* lbz R6, <#[R11 + 3]> */
		/* 82157B2Ch case    7:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000003) );
		/* 82157B2Ch case    7:*/		return 0x82157B30;
		  /* 82157B30h */ case    8:  		/* subf R10, R5, R8 */
		/* 82157B30h case    8:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R5,regs.R8);
		/* 82157B30h case    8:*/		return 0x82157B34;
		  /* 82157B34h */ case    9:  		/* lbz R8, <#[R11 + 2]> */
		/* 82157B34h case    9:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82157B34h case    9:*/		return 0x82157B38;
		  /* 82157B38h */ case   10:  		/* rlwinm R6, R6, 8, 0, 31 */
		/* 82157B38h case   10:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R6,regs.R6);
		/* 82157B38h case   10:*/		return 0x82157B3C;
		  /* 82157B3Ch */ case   11:  		/* lbz R11, <#[R11 + 1]> */
		/* 82157B3Ch case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000001) );
		/* 82157B3Ch case   11:*/		return 0x82157B40;
		  /* 82157B40h */ case   12:  		/* addi R10, R10, 33 */
		/* 82157B40h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21);
		/* 82157B40h case   12:*/		return 0x82157B44;
		  /* 82157B44h */ case   13:  		/* or R8, R6, R8 */
		/* 82157B44h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 82157B44h case   13:*/		return 0x82157B48;
		  /* 82157B48h */ case   14:  		/* rlwinm R8, R8, 8, 0, 23 */
		/* 82157B48h case   14:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R8,regs.R8);
		/* 82157B48h case   14:*/		return 0x82157B4C;
		  /* 82157B4Ch */ case   15:  		/* or R11, R8, R11 */
		/* 82157B4Ch case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82157B4Ch case   15:*/		return 0x82157B50;
		  /* 82157B50h */ case   16:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 82157B50h case   16:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 82157B50h case   16:*/		return 0x82157B54;
		  /* 82157B54h */ case   17:  		/* or R11, R11, R7 */
		/* 82157B54h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82157B54h case   17:*/		return 0x82157B58;
		  /* 82157B58h */ case   18:  		/* slw R11, R11, R10 */
		/* 82157B58h case   18:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82157B58h case   18:*/		return 0x82157B5C;
		  /* 82157B5Ch */ case   19:  		/* srw R3, R11, R9 */
		/* 82157B5Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R3,regs.R11,regs.R9);
		/* 82157B5Ch case   19:*/		return 0x82157B60;
		  /* 82157B60h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82157B60h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82157B60h case   20:*/		return 0x82157B64;
	}
	return 0x82157B64;
} // Block from 82157B10h-82157B64h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82157B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157B64);
		  /* 82157B64h */ case    0:  		/* nop */
		/* 82157B64h case    0:*/		cpu::op::nop();
		/* 82157B64h case    0:*/		return 0x82157B68;
	}
	return 0x82157B68;
} // Block from 82157B64h-82157B68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157B68);
		  /* 82157B68h */ case    0:  		/* mfspr R12, LR */
		/* 82157B68h case    0:*/		regs.R12 = regs.LR;
		/* 82157B68h case    0:*/		return 0x82157B6C;
		  /* 82157B6Ch */ case    1:  		/* bl -813332 */
		/* 82157B6Ch case    1:*/		regs.LR = 0x82157B70; return 0x82091258;
		/* 82157B6Ch case    1:*/		return 0x82157B70;
		  /* 82157B70h */ case    2:  		/* addi R11, R4, -1 */
		/* 82157B70h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFF);
		/* 82157B70h case    2:*/		return 0x82157B74;
		  /* 82157B74h */ case    3:  		/* li R7, 4 */
		/* 82157B74h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 82157B74h case    3:*/		return 0x82157B78;
		  /* 82157B78h */ case    4:  		/* rlwinm R10, R11, 29, 3, 31 */
		/* 82157B78h case    4:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R11);
		/* 82157B78h case    4:*/		return 0x82157B7C;
		  /* 82157B7Ch */ case    5:  		/* li R31, -1 */
		/* 82157B7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 82157B7Ch case    5:*/		return 0x82157B80;
		  /* 82157B80h */ case    6:  		/* add R11, R10, R3 */
		/* 82157B80h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R3);
		/* 82157B80h case    6:*/		return 0x82157B84;
		  /* 82157B84h */ case    7:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82157B84h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82157B84h case    7:*/		return 0x82157B88;
		  /* 82157B88h */ case    8:  		/* mtspr CTR, R7 */
		/* 82157B88h case    8:*/		regs.CTR = regs.R7;
		/* 82157B88h case    8:*/		return 0x82157B8C;
		  /* 82157B8Ch */ case    9:  		/* li R8, 0 */
		/* 82157B8Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82157B8Ch case    9:*/		return 0x82157B90;
		  /* 82157B90h */ case   10:  		/* subf R10, R10, R4 */
		/* 82157B90h case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82157B90h case   10:*/		return 0x82157B94;
		  /* 82157B94h */ case   11:  		/* li R9, 0 */
		/* 82157B94h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82157B94h case   11:*/		return 0x82157B98;
		  /* 82157B98h */ case   12:  		/* lbz R4, <#[R11 + 3]> */
		/* 82157B98h case   12:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000003) );
		/* 82157B98h case   12:*/		return 0x82157B9C;
		  /* 82157B9Ch */ case   13:  		/* addi R10, R10, -1 */
		/* 82157B9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82157B9Ch case   13:*/		return 0x82157BA0;
		  /* 82157BA0h */ case   14:  		/* lbz R3, <#[R11 + 2]> */
		/* 82157BA0h case   14:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82157BA0h case   14:*/		return 0x82157BA4;
		  /* 82157BA4h */ case   15:  		/* rlwinm R4, R4, 8, 0, 31 */
		/* 82157BA4h case   15:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R4,regs.R4);
		/* 82157BA4h case   15:*/		return 0x82157BA8;
		  /* 82157BA8h */ case   16:  		/* lbz R30, <#[R11 + 1]> */
		/* 82157BA8h case   16:*/		cpu::mem::load8z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000001) );
		/* 82157BA8h case   16:*/		return 0x82157BAC;
		  /* 82157BACh */ case   17:  		/* subfic R29, R10, 32 */
		/* 82157BACh case   17:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R10,0x20);
		/* 82157BACh case   17:*/		return 0x82157BB0;
		  /* 82157BB0h */ case   18:  		/* lbz R28, <#[R11]> */
		/* 82157BB0h case   18:*/		cpu::mem::load8z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82157BB0h case   18:*/		return 0x82157BB4;
		  /* 82157BB4h */ case   19:  		/* or R4, R4, R3 */
		/* 82157BB4h case   19:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R3);
		/* 82157BB4h case   19:*/		return 0x82157BB8;
		  /* 82157BB8h */ case   20:  		/* subf R7, R5, R29 */
		/* 82157BB8h case   20:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R5,regs.R29);
		/* 82157BB8h case   20:*/		return 0x82157BBC;
		  /* 82157BBCh */ case   21:  		/* rlwinm R5, R4, 8, 0, 23 */
		/* 82157BBCh case   21:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R5,regs.R4);
		/* 82157BBCh case   21:*/		return 0x82157BC0;
		  /* 82157BC0h */ case   22:  		/* srw R7, R31, R7 */
		/* 82157BC0h case   22:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R31,regs.R7);
		/* 82157BC0h case   22:*/		return 0x82157BC4;
		  /* 82157BC4h */ case   23:  		/* or R5, R5, R30 */
		/* 82157BC4h case   23:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R30);
		/* 82157BC4h case   23:*/		return 0x82157BC8;
		  /* 82157BC8h */ case   24:  		/* srw R7, R7, R10 */
		/* 82157BC8h case   24:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 82157BC8h case   24:*/		return 0x82157BCC;
		  /* 82157BCCh */ case   25:  		/* rlwinm R5, R5, 8, 0, 23 */
		/* 82157BCCh case   25:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R5,regs.R5);
		/* 82157BCCh case   25:*/		return 0x82157BD0;
		  /* 82157BD0h */ case   26:  		/* slw R7, R7, R10 */
		/* 82157BD0h case   26:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 82157BD0h case   26:*/		return 0x82157BD4;
		  /* 82157BD4h */ case   27:  		/* slw R10, R6, R10 */
		/* 82157BD4h case   27:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 82157BD4h case   27:*/		return 0x82157BD8;
		  /* 82157BD8h */ case   28:  		/* or R6, R5, R28 */
		/* 82157BD8h case   28:*/		cpu::op::or<0>(regs,&regs.R6,regs.R5,regs.R28);
		/* 82157BD8h case   28:*/		return 0x82157BDC;
		  /* 82157BDCh */ case   29:  		/* and R10, R10, R7 */
		/* 82157BDCh case   29:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82157BDCh case   29:*/		return 0x82157BE0;
		  /* 82157BE0h */ case   30:  		/* andc R7, R6, R7 */
		/* 82157BE0h case   30:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 82157BE0h case   30:*/		return 0x82157BE4;
		  /* 82157BE4h */ case   31:  		/* or R10, R7, R10 */
		/* 82157BE4h case   31:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 82157BE4h case   31:*/		return 0x82157BE8;
		  /* 82157BE8h */ case   32:  		/* srw R7, R10, R9 */
		/* 82157BE8h case   32:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R10,regs.R9);
		/* 82157BE8h case   32:*/		return 0x82157BEC;
		  /* 82157BECh */ case   33:  		/* rlwinm R7, R7, 0, 24, 31 */
		/* 82157BECh case   33:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R7);
		/* 82157BECh case   33:*/		return 0x82157BF0;
		  /* 82157BF0h */ case   34:  		/* addi R9, R9, 8 */
		/* 82157BF0h case   34:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 82157BF0h case   34:*/		return 0x82157BF4;
		  /* 82157BF4h */ case   35:  		/* stbx R7, <#[R11 + R8]> */
		/* 82157BF4h case   35:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82157BF4h case   35:*/		return 0x82157BF8;
		  /* 82157BF8h */ case   36:  		/* addi R8, R8, 1 */
		/* 82157BF8h case   36:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82157BF8h case   36:*/		return 0x82157BFC;
		  /* 82157BFCh */ case   37:  		/* bc 16, CR0_LT, -20 */
		/* 82157BFCh case   37:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82157BE8;  }
		/* 82157BFCh case   37:*/		return 0x82157C00;
		  /* 82157C00h */ case   38:  		/* b -813400 */
		/* 82157C00h case   38:*/		return 0x820912A8;
		/* 82157C00h case   38:*/		return 0x82157C04;
		  /* 82157C04h */ case   39:  		/* nop */
		/* 82157C04h case   39:*/		cpu::op::nop();
		/* 82157C04h case   39:*/		return 0x82157C08;
	}
	return 0x82157C08;
} // Block from 82157B68h-82157C08h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82157C08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157C08);
		  /* 82157C08h */ case    0:  		/* mfspr R12, LR */
		/* 82157C08h case    0:*/		regs.R12 = regs.LR;
		/* 82157C08h case    0:*/		return 0x82157C0C;
		  /* 82157C0Ch */ case    1:  		/* bl -813504 */
		/* 82157C0Ch case    1:*/		regs.LR = 0x82157C10; return 0x8209124C;
		/* 82157C0Ch case    1:*/		return 0x82157C10;
		  /* 82157C10h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 82157C10h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82157C10h case    2:*/		return 0x82157C14;
		  /* 82157C14h */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 82157C14h case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82157C14h case    3:*/		return 0x82157C18;
		  /* 82157C18h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 82157C18h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82157C18h case    4:*/		return 0x82157C1C;
		  /* 82157C1Ch */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 82157C1Ch case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82157C1Ch case    5:*/		return 0x82157C20;
		  /* 82157C20h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 82157C20h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82157C20h case    6:*/		return 0x82157C24;
		  /* 82157C24h */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 82157C24h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82157C24h case    7:*/		return 0x82157C28;
		  /* 82157C28h */ case    8:  		/* stwu R1, <#[R1 - 160]> */
		/* 82157C28h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82157C28h case    8:*/		return 0x82157C2C;
		  /* 82157C2Ch */ case    9:  		/* lis R25, -32215 */
		/* 82157C2Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8229);
		/* 82157C2Ch case    9:*/		return 0x82157C30;
		  /* 82157C30h */ case   10:  		/* stw R4, <#[R1 + 188]> */
		/* 82157C30h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000000BC) );
		/* 82157C30h case   10:*/		return 0x82157C34;
		  /* 82157C34h */ case   11:  		/* mr R29, R3 */
		/* 82157C34h case   11:*/		regs.R29 = regs.R3;
		/* 82157C34h case   11:*/		return 0x82157C38;
		  /* 82157C38h */ case   12:  		/* mr R5, R4 */
		/* 82157C38h case   12:*/		regs.R5 = regs.R4;
		/* 82157C38h case   12:*/		return 0x82157C3C;
		  /* 82157C3Ch */ case   13:  		/* lwz R11, <#[R25 - 26160]> */
		/* 82157C3Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0xFFFF99D0) );
		/* 82157C3Ch case   13:*/		return 0x82157C40;
		  /* 82157C40h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82157C40h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157C40h case   14:*/		return 0x82157C44;
		  /* 82157C44h */ case   15:  		/* bc 4, CR6_EQ, 32 */
		/* 82157C44h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82157C64;  }
		/* 82157C44h case   15:*/		return 0x82157C48;
		  /* 82157C48h */ case   16:  		/* lis R10, -32215 */
		/* 82157C48h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157C48h case   16:*/		return 0x82157C4C;
		  /* 82157C4Ch */ case   17:  		/* lis R11, -32215 */
		/* 82157C4Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157C4Ch case   17:*/		return 0x82157C50;
		  /* 82157C50h */ case   18:  		/* addi R11, R11, -26148 */
		/* 82157C50h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF99DC);
		/* 82157C50h case   18:*/		return 0x82157C54;
		  /* 82157C54h */ case   19:  		/* lwz R10, <#[R10 - 26152]> */
		/* 82157C54h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFF99D8) );
		/* 82157C54h case   19:*/		return 0x82157C58;
		  /* 82157C58h */ case   20:  		/* lwz R3, <#[R11 - 16]> */
		/* 82157C58h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 82157C58h case   20:*/		return 0x82157C5C;
		  /* 82157C5Ch */ case   21:  		/* mtspr CTR, R10 */
		/* 82157C5Ch case   21:*/		regs.CTR = regs.R10;
		/* 82157C5Ch case   21:*/		return 0x82157C60;
		  /* 82157C60h */ case   22:  		/* b 488 */
		/* 82157C60h case   22:*/		return 0x82157E48;
		/* 82157C60h case   22:*/		return 0x82157C64;
	}
	return 0x82157C64;
} // Block from 82157C08h-82157C64h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82157C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157C64);
		  /* 82157C64h */ case    0:  		/* cmpwi CR6, R29, 15 */
		/* 82157C64h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000000F);
		/* 82157C64h case    0:*/		return 0x82157C68;
		  /* 82157C68h */ case    1:  		/* bc 12, CR6_LT, 48 */
		/* 82157C68h case    1:*/		if ( regs.CR[6].lt ) { return 0x82157C98;  }
		/* 82157C68h case    1:*/		return 0x82157C6C;
		  /* 82157C6Ch */ case    2:  		/* lis R11, -32215 */
		/* 82157C6Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157C6Ch case    2:*/		return 0x82157C70;
		  /* 82157C70h */ case    3:  		/* lwz R10, <#[R25 - 26160]> */
		/* 82157C70h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0xFFFF99D0) );
		/* 82157C70h case    3:*/		return 0x82157C74;
		  /* 82157C74h */ case    4:  		/* lis R9, -32252 */
		/* 82157C74h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82157C74h case    4:*/		return 0x82157C78;
		  /* 82157C78h */ case    5:  		/* addi R11, R11, -26148 */
		/* 82157C78h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF99DC);
		/* 82157C78h case    5:*/		return 0x82157C7C;
		  /* 82157C7Ch */ case    6:  		/* lis R8, -32252 */
		/* 82157C7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 82157C7Ch case    6:*/		return 0x82157C80;
		  /* 82157C80h */ case    7:  		/* addi R5, R9, -25404 */
		/* 82157C80h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0xFFFF9CC4);
		/* 82157C80h case    7:*/		return 0x82157C84;
		  /* 82157C84h */ case    8:  		/* addi R4, R8, -25412 */
		/* 82157C84h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0xFFFF9CBC);
		/* 82157C84h case    8:*/		return 0x82157C88;
		  /* 82157C88h */ case    9:  		/* mtspr CTR, R10 */
		/* 82157C88h case    9:*/		regs.CTR = regs.R10;
		/* 82157C88h case    9:*/		return 0x82157C8C;
		  /* 82157C8Ch */ case   10:  		/* li R6, 0 */
		/* 82157C8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82157C8Ch case   10:*/		return 0x82157C90;
		  /* 82157C90h */ case   11:  		/* lwz R3, <#[R11 - 16]> */
		/* 82157C90h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 82157C90h case   11:*/		return 0x82157C94;
		  /* 82157C94h */ case   12:  		/* b 228 */
		/* 82157C94h case   12:*/		return 0x82157D78;
		/* 82157C94h case   12:*/		return 0x82157C98;
	}
	return 0x82157C98;
} // Block from 82157C64h-82157C98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82157C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157C98);
		  /* 82157C98h */ case    0:  		/* lis R11, -32217 */
		/* 82157C98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82157C98h case    0:*/		return 0x82157C9C;
		  /* 82157C9Ch */ case    1:  		/* mulli R26, R29, 12 */
		/* 82157C9Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R26,regs.R29,0xC);
		/* 82157C9Ch case    1:*/		return 0x82157CA0;
		  /* 82157CA0h */ case    2:  		/* addi R11, R11, 19864 */
		/* 82157CA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4D98);
		/* 82157CA0h case    2:*/		return 0x82157CA4;
		  /* 82157CA4h */ case    3:  		/* addi R27, R11, 8 */
		/* 82157CA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x8);
		/* 82157CA4h case    3:*/		return 0x82157CA8;
		  /* 82157CA8h */ case    4:  		/* lwzx R11, <#[R26 + R27]> */
		/* 82157CA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R27 + 0x00000000) );
		/* 82157CA8h case    4:*/		return 0x82157CAC;
		  /* 82157CACh */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82157CACh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82157CACh case    5:*/		return 0x82157CB0;
		  /* 82157CB0h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 82157CB0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82157CC4;  }
		/* 82157CB0h case    6:*/		return 0x82157CB4;
		  /* 82157CB4h */ case    7:  		/* cmpwi CR6, R29, 0 */
		/* 82157CB4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82157CB4h case    7:*/		return 0x82157CB8;
		  /* 82157CB8h */ case    8:  		/* bc 4, CR6_EQ, 404 */
		/* 82157CB8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82157E4C;  }
		/* 82157CB8h case    8:*/		return 0x82157CBC;
		  /* 82157CBCh */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 82157CBCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82157CBCh case    9:*/		return 0x82157CC0;
		  /* 82157CC0h */ case   10:  		/* bc 12, CR6_EQ, 396 */
		/* 82157CC0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82157E4C;  }
		/* 82157CC0h case   10:*/		return 0x82157CC4;
	}
	return 0x82157CC4;
} // Block from 82157C98h-82157CC4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82157CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157CC4);
		  /* 82157CC4h */ case    0:  		/* addi R10, R1, 80 */
		/* 82157CC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82157CC4h case    0:*/		return 0x82157CC8;
		  /* 82157CC8h */ case    1:  		/* lis R11, -32215 */
		/* 82157CC8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157CC8h case    1:*/		return 0x82157CCC;
		  /* 82157CCCh */ case    2:  		/* addi R9, R1, 192 */
		/* 82157CCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xC0);
		/* 82157CCCh case    2:*/		return 0x82157CD0;
		  /* 82157CD0h */ case    3:  		/* addi R31, R11, -27200 */
		/* 82157CD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF95C0);
		/* 82157CD0h case    3:*/		return 0x82157CD4;
		  /* 82157CD4h */ case    4:  		/* li R4, 1022 */
		/* 82157CD4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x3FE);
		/* 82157CD4h case    4:*/		return 0x82157CD8;
		  /* 82157CD8h */ case    5:  		/* stw R9, <#[R10]> */
		/* 82157CD8h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82157CD8h case    5:*/		return 0x82157CDC;
		  /* 82157CDCh */ case    6:  		/* mr R3, R31 */
		/* 82157CDCh case    6:*/		regs.R3 = regs.R31;
		/* 82157CDCh case    6:*/		return 0x82157CE0;
		  /* 82157CE0h */ case    7:  		/* lwz R28, <#[R1 + 80]> */
		/* 82157CE0h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 82157CE0h case    7:*/		return 0x82157CE4;
		  /* 82157CE4h */ case    8:  		/* mr R6, R28 */
		/* 82157CE4h case    8:*/		regs.R6 = regs.R28;
		/* 82157CE4h case    8:*/		return 0x82157CE8;
		  /* 82157CE8h */ case    9:  		/* bl -773408 */
		/* 82157CE8h case    9:*/		regs.LR = 0x82157CEC; return 0x8209AFC8;
		/* 82157CE8h case    9:*/		return 0x82157CEC;
		  /* 82157CECh */ case   10:  		/* li R11, 0 */
		/* 82157CECh case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82157CECh case   10:*/		return 0x82157CF0;
		  /* 82157CF0h */ case   11:  		/* lis R10, -32256 */
		/* 82157CF0h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82157CF0h case   11:*/		return 0x82157CF4;
		  /* 82157CF4h */ case   12:  		/* stb R11, <#[R31 + 1022]> */
		/* 82157CF4h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000003FE) );
		/* 82157CF4h case   12:*/		return 0x82157CF8;
		  /* 82157CF8h */ case   13:  		/* mr R6, R31 */
		/* 82157CF8h case   13:*/		regs.R6 = regs.R31;
		/* 82157CF8h case   13:*/		return 0x82157CFC;
		  /* 82157CFCh */ case   14:  		/* addi R5, R10, 17784 */
		/* 82157CFCh case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x4578);
		/* 82157CFCh case   14:*/		return 0x82157D00;
		  /* 82157D00h */ case   15:  		/* mr R3, R31 */
		/* 82157D00h case   15:*/		regs.R3 = regs.R31;
		/* 82157D00h case   15:*/		return 0x82157D04;
		  /* 82157D04h */ case   16:  		/* li R4, 1023 */
		/* 82157D04h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x3FF);
		/* 82157D04h case   16:*/		return 0x82157D08;
		  /* 82157D08h */ case   17:  		/* bl 1118368 */
		/* 82157D08h case   17:*/		regs.LR = 0x82157D0C; return 0x82268DA8;
		/* 82157D08h case   17:*/		return 0x82157D0C;
		  /* 82157D0Ch */ case   18:  		/* li R11, 0 */
		/* 82157D0Ch case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82157D0Ch case   18:*/		return 0x82157D10;
		  /* 82157D10h */ case   19:  		/* lis R10, -32215 */
		/* 82157D10h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157D10h case   19:*/		return 0x82157D14;
		  /* 82157D14h */ case   20:  		/* stb R11, <#[R31 + 1023]> */
		/* 82157D14h case   20:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000003FF) );
		/* 82157D14h case   20:*/		return 0x82157D18;
		  /* 82157D18h */ case   21:  		/* cmpwi CR6, R29, 0 */
		/* 82157D18h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82157D18h case   21:*/		return 0x82157D1C;
		  /* 82157D1Ch */ case   22:  		/* addi R30, R10, -26148 */
		/* 82157D1Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFF99DC);
		/* 82157D1Ch case   22:*/		return 0x82157D20;
		  /* 82157D20h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82157D20h case   23:*/		if ( regs.CR[6].eq ) { return 0x82157D2C;  }
		/* 82157D20h case   23:*/		return 0x82157D24;
		  /* 82157D24h */ case   24:  		/* cmpwi CR6, R29, 3 */
		/* 82157D24h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000003);
		/* 82157D24h case   24:*/		return 0x82157D28;
		  /* 82157D28h */ case   25:  		/* bc 4, CR6_EQ, 40 */
		/* 82157D28h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82157D50;  }
		/* 82157D28h case   25:*/		return 0x82157D2C;
	}
	return 0x82157D2C;
} // Block from 82157CC4h-82157D2Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 82157D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157D2C);
		  /* 82157D2Ch */ case    0:  		/* addi R11, R29, -3 */
		/* 82157D2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFD);
		/* 82157D2Ch case    0:*/		return 0x82157D30;
		  /* 82157D30h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 82157D30h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82157D30h case    1:*/		return 0x82157D34;
		  /* 82157D34h */ case    2:  		/* mr R6, R31 */
		/* 82157D34h case    2:*/		regs.R6 = regs.R31;
		/* 82157D34h case    2:*/		return 0x82157D38;
		  /* 82157D38h */ case    3:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157D38h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157D38h case    3:*/		return 0x82157D3C;
		  /* 82157D3Ch */ case    4:  		/* cntlzw R11, R11 */
		/* 82157D3Ch case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82157D3Ch case    4:*/		return 0x82157D40;
		  /* 82157D40h */ case    5:  		/* li R5, 0 */
		/* 82157D40h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82157D40h case    5:*/		return 0x82157D44;
		  /* 82157D44h */ case    6:  		/* rlwinm R4, R11, 27, 31, 31 */
		/* 82157D44h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R11);
		/* 82157D44h case    6:*/		return 0x82157D48;
		  /* 82157D48h */ case    7:  		/* mtspr CTR, R10 */
		/* 82157D48h case    7:*/		regs.CTR = regs.R10;
		/* 82157D48h case    7:*/		return 0x82157D4C;
		  /* 82157D4Ch */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82157D4Ch case    8:*/		if ( 1 ) { regs.LR = 0x82157D50; return (uint32)regs.CTR; }
		/* 82157D4Ch case    8:*/		return 0x82157D50;
	}
	return 0x82157D50;
} // Block from 82157D2Ch-82157D50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82157D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157D50);
		  /* 82157D50h */ case    0:  		/* lwzx R11, <#[R26 + R27]> */
		/* 82157D50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R27 + 0x00000000) );
		/* 82157D50h case    0:*/		return 0x82157D54;
		  /* 82157D54h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82157D54h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82157D54h case    1:*/		return 0x82157D58;
		  /* 82157D58h */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 82157D58h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82157D80;  }
		/* 82157D58h case    2:*/		return 0x82157D5C;
		  /* 82157D5Ch */ case    3:  		/* lwz R11, <#[R25 - 26160]> */
		/* 82157D5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0xFFFF99D0) );
		/* 82157D5Ch case    3:*/		return 0x82157D60;
		  /* 82157D60h */ case    4:  		/* lis R10, -32252 */
		/* 82157D60h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82157D60h case    4:*/		return 0x82157D64;
		  /* 82157D64h */ case    5:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157D64h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157D64h case    5:*/		return 0x82157D68;
		  /* 82157D68h */ case    6:  		/* mr R5, R31 */
		/* 82157D68h case    6:*/		regs.R5 = regs.R31;
		/* 82157D68h case    6:*/		return 0x82157D6C;
		  /* 82157D6Ch */ case    7:  		/* addi R4, R10, -25412 */
		/* 82157D6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9CBC);
		/* 82157D6Ch case    7:*/		return 0x82157D70;
		  /* 82157D70h */ case    8:  		/* mr R6, R28 */
		/* 82157D70h case    8:*/		regs.R6 = regs.R28;
		/* 82157D70h case    8:*/		return 0x82157D74;
		  /* 82157D74h */ case    9:  		/* mtspr CTR, R11 */
		/* 82157D74h case    9:*/		regs.CTR = regs.R11;
		/* 82157D74h case    9:*/		return 0x82157D78;
	}
	return 0x82157D78;
} // Block from 82157D50h-82157D78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82157D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157D78);
		  /* 82157D78h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 82157D78h case    0:*/		if ( 1 ) { regs.LR = 0x82157D7C; return (uint32)regs.CTR; }
		/* 82157D78h case    0:*/		return 0x82157D7C;
		  /* 82157D7Ch */ case    1:  		/* b 208 */
		/* 82157D7Ch case    1:*/		return 0x82157E4C;
		/* 82157D7Ch case    1:*/		return 0x82157D80;
	}
	return 0x82157D80;
} // Block from 82157D78h-82157D80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157D80);
		  /* 82157D80h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82157D80h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82157D80h case    0:*/		return 0x82157D84;
		  /* 82157D84h */ case    1:  		/* bc 4, CR6_EQ, 180 */
		/* 82157D84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82157E38;  }
		/* 82157D84h case    1:*/		return 0x82157D88;
		  /* 82157D88h */ case    2:  		/* lis R10, -32215 */
		/* 82157D88h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157D88h case    2:*/		return 0x82157D8C;
		  /* 82157D8Ch */ case    3:  		/* lwz R11, <#[R10 - 26176]> */
		/* 82157D8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFF99C0) );
		/* 82157D8Ch case    3:*/		return 0x82157D90;
		  /* 82157D90h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82157D90h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157D90h case    4:*/		return 0x82157D94;
		  /* 82157D94h */ case    5:  		/* bc 12, CR6_EQ, 164 */
		/* 82157D94h case    5:*/		if ( regs.CR[6].eq ) { return 0x82157E38;  }
		/* 82157D94h case    5:*/		return 0x82157D98;
	}
	return 0x82157D98;
} // Block from 82157D80h-82157D98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82157D98h
// Function '?FirstPassForPS1_XX@XGRAPHICS@@YAKPAKKPAU_R400PSIL@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157D98);
		  /* 82157D98h */ case    0:  		/* lis R27, -32215 */
		/* 82157D98h case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8229);
		/* 82157D98h case    0:*/		return 0x82157D9C;
		  /* 82157D9Ch */ case    1:  		/* lwz R11, <#[R27 - 26168]> */
		/* 82157D9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0xFFFF99C8) );
		/* 82157D9Ch case    1:*/		return 0x82157DA0;
		  /* 82157DA0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82157DA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157DA0h case    2:*/		return 0x82157DA4;
		  /* 82157DA4h */ case    3:  		/* bc 12, CR6_EQ, 148 */
		/* 82157DA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82157E38;  }
		/* 82157DA4h case    3:*/		return 0x82157DA8;
		  /* 82157DA8h */ case    4:  		/* lis R28, -32215 */
		/* 82157DA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8229);
		/* 82157DA8h case    4:*/		return 0x82157DAC;
		  /* 82157DACh */ case    5:  		/* lwz R11, <#[R28 - 26172]> */
		/* 82157DACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0xFFFF99C4) );
		/* 82157DACh case    5:*/		return 0x82157DB0;
		  /* 82157DB0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82157DB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82157DB0h case    6:*/		return 0x82157DB4;
		  /* 82157DB4h */ case    7:  		/* bc 12, CR6_EQ, 132 */
		/* 82157DB4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82157E38;  }
		/* 82157DB4h case    7:*/		return 0x82157DB8;
		  /* 82157DB8h */ case    8:  		/* lwz R11, <#[R10 - 26176]> */
		/* 82157DB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFF99C0) );
		/* 82157DB8h case    8:*/		return 0x82157DBC;
		  /* 82157DBCh */ case    9:  		/* lis R10, -32252 */
		/* 82157DBCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82157DBCh case    9:*/		return 0x82157DC0;
		  /* 82157DC0h */ case   10:  		/* li R5, 2 */
		/* 82157DC0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82157DC0h case   10:*/		return 0x82157DC4;
		  /* 82157DC4h */ case   11:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157DC4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157DC4h case   11:*/		return 0x82157DC8;
		  /* 82157DC8h */ case   12:  		/* addi R4, R10, -25424 */
		/* 82157DC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF9CB0);
		/* 82157DC8h case   12:*/		return 0x82157DCC;
		  /* 82157DCCh */ case   13:  		/* mtspr CTR, R11 */
		/* 82157DCCh case   13:*/		regs.CTR = regs.R11;
		/* 82157DCCh case   13:*/		return 0x82157DD0;
		  /* 82157DD0h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82157DD0h case   14:*/		if ( 1 ) { regs.LR = 0x82157DD4; return (uint32)regs.CTR; }
		/* 82157DD0h case   14:*/		return 0x82157DD4;
		  /* 82157DD4h */ case   15:  		/* or. R29, R3, R3 */
		/* 82157DD4h case   15:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82157DD4h case   15:*/		return 0x82157DD8;
		  /* 82157DD8h */ case   16:  		/* bc 12, CR0_EQ, 116 */
		/* 82157DD8h case   16:*/		if ( regs.CR[0].eq ) { return 0x82157E4C;  }
		/* 82157DD8h case   16:*/		return 0x82157DDC;
		  /* 82157DDCh */ case   17:  		/* mr R11, R31 */
		/* 82157DDCh case   17:*/		regs.R11 = regs.R31;
		/* 82157DDCh case   17:*/		return 0x82157DE0;
		  /* 82157DE0h */ case   18:  		/* mr R10, R31 */
		/* 82157DE0h case   18:*/		regs.R10 = regs.R31;
		/* 82157DE0h case   18:*/		return 0x82157DE4;
		  /* 82157DE4h */ case   19:  		/* lbz R9, <#[R11]> */
		/* 82157DE4h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82157DE4h case   19:*/		return 0x82157DE8;
		  /* 82157DE8h */ case   20:  		/* addi R11, R11, 1 */
		/* 82157DE8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82157DE8h case   20:*/		return 0x82157DEC;
		  /* 82157DECh */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 82157DECh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82157DECh case   21:*/		return 0x82157DF0;
		  /* 82157DF0h */ case   22:  		/* bc 4, CR6_EQ, -12 */
		/* 82157DF0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82157DE4;  }
		/* 82157DF0h case   22:*/		return 0x82157DF4;
		  /* 82157DF4h */ case   23:  		/* subf R11, R10, R11 */
		/* 82157DF4h case   23:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82157DF4h case   23:*/		return 0x82157DF8;
		  /* 82157DF8h */ case   24:  		/* lwz R10, <#[R27 - 26168]> */
		/* 82157DF8h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0xFFFF99C8) );
		/* 82157DF8h case   24:*/		return 0x82157DFC;
		  /* 82157DFCh */ case   25:  		/* mr R5, R31 */
		/* 82157DFCh case   25:*/		regs.R5 = regs.R31;
		/* 82157DFCh case   25:*/		return 0x82157E00;
		  /* 82157E00h */ case   26:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157E00h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157E00h case   26:*/		return 0x82157E04;
		  /* 82157E04h */ case   27:  		/* addi R11, R11, -1 */
		/* 82157E04h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82157E04h case   27:*/		return 0x82157E08;
		  /* 82157E08h */ case   28:  		/* addi R7, R1, 80 */
		/* 82157E08h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82157E08h case   28:*/		return 0x82157E0C;
		  /* 82157E0Ch */ case   29:  		/* rlwinm R6, R11, 0, 0, 31 */
		/* 82157E0Ch case   29:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R11);
		/* 82157E0Ch case   29:*/		return 0x82157E10;
		  /* 82157E10h */ case   30:  		/* mr R4, R29 */
		/* 82157E10h case   30:*/		regs.R4 = regs.R29;
		/* 82157E10h case   30:*/		return 0x82157E14;
		  /* 82157E14h */ case   31:  		/* mtspr CTR, R10 */
		/* 82157E14h case   31:*/		regs.CTR = regs.R10;
		/* 82157E14h case   31:*/		return 0x82157E18;
		  /* 82157E18h */ case   32:  		/* stw R6, <#[R1 + 80]> */
		/* 82157E18h case   32:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82157E18h case   32:*/		return 0x82157E1C;
		  /* 82157E1Ch */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 82157E1Ch case   33:*/		if ( 1 ) { regs.LR = 0x82157E20; return (uint32)regs.CTR; }
		/* 82157E1Ch case   33:*/		return 0x82157E20;
		  /* 82157E20h */ case   34:  		/* lwz R11, <#[R28 - 26172]> */
		/* 82157E20h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0xFFFF99C4) );
		/* 82157E20h case   34:*/		return 0x82157E24;
		  /* 82157E24h */ case   35:  		/* mr R4, R29 */
		/* 82157E24h case   35:*/		regs.R4 = regs.R29;
		/* 82157E24h case   35:*/		return 0x82157E28;
		  /* 82157E28h */ case   36:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157E28h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157E28h case   36:*/		return 0x82157E2C;
		  /* 82157E2Ch */ case   37:  		/* mtspr CTR, R11 */
		/* 82157E2Ch case   37:*/		regs.CTR = regs.R11;
		/* 82157E2Ch case   37:*/		return 0x82157E30;
		  /* 82157E30h */ case   38:  		/* bcctrl 20, CR0_LT */
		/* 82157E30h case   38:*/		if ( 1 ) { regs.LR = 0x82157E34; return (uint32)regs.CTR; }
		/* 82157E30h case   38:*/		return 0x82157E34;
		  /* 82157E34h */ case   39:  		/* b 24 */
		/* 82157E34h case   39:*/		return 0x82157E4C;
		/* 82157E34h case   39:*/		return 0x82157E38;
	}
	return 0x82157E38;
} // Block from 82157D98h-82157E38h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82157E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E38);
		  /* 82157E38h */ case    0:  		/* lis R11, -32215 */
		/* 82157E38h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157E38h case    0:*/		return 0x82157E3C;
		  /* 82157E3Ch */ case    1:  		/* lwz R3, <#[R30 - 16]> */
		/* 82157E3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157E3Ch case    1:*/		return 0x82157E40;
		  /* 82157E40h */ case    2:  		/* lwz R11, <#[R11 - 26152]> */
		/* 82157E40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF99D8) );
		/* 82157E40h case    2:*/		return 0x82157E44;
		  /* 82157E44h */ case    3:  		/* mtspr CTR, R11 */
		/* 82157E44h case    3:*/		regs.CTR = regs.R11;
		/* 82157E44h case    3:*/		return 0x82157E48;
	}
	return 0x82157E48;
} // Block from 82157E38h-82157E48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E48);
		  /* 82157E48h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 82157E48h case    0:*/		if ( 1 ) { regs.LR = 0x82157E4C; return (uint32)regs.CTR; }
		/* 82157E48h case    0:*/		return 0x82157E4C;
	}
	return 0x82157E4C;
} // Block from 82157E48h-82157E4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E4C);
		  /* 82157E4Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 82157E4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82157E4Ch case    0:*/		return 0x82157E50;
		  /* 82157E50h */ case    1:  		/* b -814004 */
		/* 82157E50h case    1:*/		return 0x8209129C;
		/* 82157E50h case    1:*/		return 0x82157E54;
		  /* 82157E54h */ case    2:  		/* nop */
		/* 82157E54h case    2:*/		cpu::op::nop();
		/* 82157E54h case    2:*/		return 0x82157E58;
		  /* 82157E58h */ case    3:  		/* lis R11, -32215 */
		/* 82157E58h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157E58h case    3:*/		return 0x82157E5C;
		  /* 82157E5Ch */ case    4:  		/* mr R4, R3 */
		/* 82157E5Ch case    4:*/		regs.R4 = regs.R3;
		/* 82157E5Ch case    4:*/		return 0x82157E60;
		  /* 82157E60h */ case    5:  		/* li R3, 0 */
		/* 82157E60h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82157E60h case    5:*/		return 0x82157E64;
		  /* 82157E64h */ case    6:  		/* lwz R10, <#[R11 - 26176]> */
		/* 82157E64h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFF99C0) );
		/* 82157E64h case    6:*/		return 0x82157E68;
		  /* 82157E68h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82157E68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82157E68h case    7:*/		return 0x82157E6C;
		  /* 82157E6Ch */ case    8:  		/* bclr 12, CR6_EQ */
		/* 82157E6Ch case    8:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82157E6Ch case    8:*/		return 0x82157E70;
	}
	return 0x82157E70;
} // Block from 82157E4Ch-82157E70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82157E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E70);
		  /* 82157E70h */ case    0:  		/* lis R10, -32215 */
		/* 82157E70h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157E70h case    0:*/		return 0x82157E74;
		  /* 82157E74h */ case    1:  		/* lwz R10, <#[R10 - 26168]> */
		/* 82157E74h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFF99C8) );
		/* 82157E74h case    1:*/		return 0x82157E78;
		  /* 82157E78h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82157E78h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82157E78h case    2:*/		return 0x82157E7C;
		  /* 82157E7Ch */ case    3:  		/* bclr 12, CR6_EQ */
		/* 82157E7Ch case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82157E7Ch case    3:*/		return 0x82157E80;
	}
	return 0x82157E80;
} // Block from 82157E70h-82157E80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E80);
		  /* 82157E80h */ case    0:  		/* lis R10, -32215 */
		/* 82157E80h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157E80h case    0:*/		return 0x82157E84;
		  /* 82157E84h */ case    1:  		/* lwz R10, <#[R10 - 26172]> */
		/* 82157E84h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFF99C4) );
		/* 82157E84h case    1:*/		return 0x82157E88;
	}
	return 0x82157E88;
} // Block from 82157E80h-82157E88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157E88h
// Function '?GrowILMemory@XGRAPHICS@@YAJPAU_R400ILSTORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E88);
		  /* 82157E88h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82157E88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82157E88h case    0:*/		return 0x82157E8C;
		  /* 82157E8Ch */ case    1:  		/* bclr 12, CR6_EQ */
		/* 82157E8Ch case    1:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82157E8Ch case    1:*/		return 0x82157E90;
	}
	return 0x82157E90;
} // Block from 82157E88h-82157E90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157E90);
		  /* 82157E90h */ case    0:  		/* lwz R11, <#[R11 - 26176]> */
		/* 82157E90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF99C0) );
		/* 82157E90h case    0:*/		return 0x82157E94;
		  /* 82157E94h */ case    1:  		/* lis R10, -32215 */
		/* 82157E94h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157E94h case    1:*/		return 0x82157E98;
		  /* 82157E98h */ case    2:  		/* li R5, 2 */
		/* 82157E98h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82157E98h case    2:*/		return 0x82157E9C;
		  /* 82157E9Ch */ case    3:  		/* lwz R3, <#[R10 - 26164]> */
		/* 82157E9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0xFFFF99CC) );
		/* 82157E9Ch case    3:*/		return 0x82157EA0;
		  /* 82157EA0h */ case    4:  		/* mtspr CTR, R11 */
		/* 82157EA0h case    4:*/		regs.CTR = regs.R11;
		/* 82157EA0h case    4:*/		return 0x82157EA4;
		  /* 82157EA4h */ case    5:  		/* bcctr 20, CR0_LT */
		/* 82157EA4h case    5:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82157EA4h case    5:*/		return 0x82157EA8;
		  /* 82157EA8h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82157EA8h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82157EA8h case    6:*/		return 0x82157EAC;
	}
	return 0x82157EAC;
} // Block from 82157E90h-82157EACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82157EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157EAC);
		  /* 82157EACh */ case    0:  		/* nop */
		/* 82157EACh case    0:*/		cpu::op::nop();
		/* 82157EACh case    0:*/		return 0x82157EB0;
		  /* 82157EB0h */ case    1:  		/* mr R4, R3 */
		/* 82157EB0h case    1:*/		regs.R4 = regs.R3;
		/* 82157EB0h case    1:*/		return 0x82157EB4;
		  /* 82157EB4h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82157EB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82157EB4h case    2:*/		return 0x82157EB8;
		  /* 82157EB8h */ case    3:  		/* bclr 12, CR6_EQ */
		/* 82157EB8h case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82157EB8h case    3:*/		return 0x82157EBC;
	}
	return 0x82157EBC;
} // Block from 82157EACh-82157EBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157EBC);
		  /* 82157EBCh */ case    0:  		/* lis R11, -32215 */
		/* 82157EBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157EBCh case    0:*/		return 0x82157EC0;
		  /* 82157EC0h */ case    1:  		/* lwz R10, <#[R11 - 26172]> */
		/* 82157EC0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFF99C4) );
		/* 82157EC0h case    1:*/		return 0x82157EC4;
		  /* 82157EC4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82157EC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82157EC4h case    2:*/		return 0x82157EC8;
		  /* 82157EC8h */ case    3:  		/* bclr 12, CR6_EQ */
		/* 82157EC8h case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82157EC8h case    3:*/		return 0x82157ECC;
	}
	return 0x82157ECC;
} // Block from 82157EBCh-82157ECCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82157ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157ECC);
		  /* 82157ECCh */ case    0:  		/* lwz R11, <#[R11 - 26172]> */
		/* 82157ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF99C4) );
		/* 82157ECCh case    0:*/		return 0x82157ED0;
		  /* 82157ED0h */ case    1:  		/* lis R10, -32215 */
		/* 82157ED0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82157ED0h case    1:*/		return 0x82157ED4;
		  /* 82157ED4h */ case    2:  		/* lwz R3, <#[R10 - 26164]> */
		/* 82157ED4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0xFFFF99CC) );
		/* 82157ED4h case    2:*/		return 0x82157ED8;
		  /* 82157ED8h */ case    3:  		/* mtspr CTR, R11 */
		/* 82157ED8h case    3:*/		regs.CTR = regs.R11;
		/* 82157ED8h case    3:*/		return 0x82157EDC;
		  /* 82157EDCh */ case    4:  		/* bcctr 20, CR0_LT */
		/* 82157EDCh case    4:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82157EDCh case    4:*/		return 0x82157EE0;
		  /* 82157EE0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82157EE0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82157EE0h case    5:*/		return 0x82157EE4;
	}
	return 0x82157EE4;
} // Block from 82157ECCh-82157EE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82157EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157EE4);
		  /* 82157EE4h */ case    0:  		/* nop */
		/* 82157EE4h case    0:*/		cpu::op::nop();
		/* 82157EE4h case    0:*/		return 0x82157EE8;
	}
	return 0x82157EE8;
} // Block from 82157EE4h-82157EE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82157EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157EE8);
		  /* 82157EE8h */ case    0:  		/* mfspr R12, LR */
		/* 82157EE8h case    0:*/		regs.R12 = regs.LR;
		/* 82157EE8h case    0:*/		return 0x82157EEC;
		  /* 82157EECh */ case    1:  		/* bl -814228 */
		/* 82157EECh case    1:*/		regs.LR = 0x82157EF0; return 0x82091258;
		/* 82157EECh case    1:*/		return 0x82157EF0;
		  /* 82157EF0h */ case    2:  		/* lis R11, -32215 */
		/* 82157EF0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82157EF0h case    2:*/		return 0x82157EF4;
		  /* 82157EF4h */ case    3:  		/* lis R31, -32215 */
		/* 82157EF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8229);
		/* 82157EF4h case    3:*/		return 0x82157EF8;
		  /* 82157EF8h */ case    4:  		/* addi R30, R11, -26148 */
		/* 82157EF8h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF99DC);
		/* 82157EF8h case    4:*/		return 0x82157EFC;
		  /* 82157EFCh */ case    5:  		/* lis R29, -32215 */
		/* 82157EFCh case    5:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8229);
		/* 82157EFCh case    5:*/		return 0x82157F00;
		  /* 82157F00h */ case    6:  		/* lis R28, -32215 */
		/* 82157F00h case    6:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8229);
		/* 82157F00h case    6:*/		return 0x82157F04;
		  /* 82157F04h */ case    7:  		/* stw R10, <#[R11 - 26148]> */
		/* 82157F04h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0xFFFF99DC) );
		/* 82157F04h case    7:*/		return 0x82157F08;
		  /* 82157F08h */ case    8:  		/* stw R5, <#[R31 - 26176]> */
		/* 82157F08h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0xFFFF99C0) );
		/* 82157F08h case    8:*/		return 0x82157F0C;
		  /* 82157F0Ch */ case    9:  		/* stw R3, <#[R30 - 16]> */
		/* 82157F0Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82157F0Ch case    9:*/		return 0x82157F10;
		  /* 82157F10h */ case   10:  		/* stw R4, <#[R30 - 12]> */
		/* 82157F10h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R30 + 0xFFFFFFF4) );
		/* 82157F10h case   10:*/		return 0x82157F14;
		  /* 82157F14h */ case   11:  		/* stw R6, <#[R29 - 26172]> */
		/* 82157F14h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R29 + 0xFFFF99C4) );
		/* 82157F14h case   11:*/		return 0x82157F18;
		  /* 82157F18h */ case   12:  		/* stw R7, <#[R28 - 26168]> */
		/* 82157F18h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R28 + 0xFFFF99C8) );
		/* 82157F18h case   12:*/		return 0x82157F1C;
		  /* 82157F1Ch */ case   13:  		/* stw R8, <#[R30 - 8]> */
		/* 82157F1Ch case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82157F1Ch case   13:*/		return 0x82157F20;
	}
	return 0x82157F20;
} // Block from 82157EE8h-82157F20h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82157F20h
// Function '?HasNeededILMem@XGRAPHICS@@YAJPAPAKPAU_R400ILSTORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157F20);
		  /* 82157F20h */ case    0:  		/* stw R9, <#[R30 - 4]> */
		/* 82157F20h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82157F20h case    0:*/		return 0x82157F24;
		  /* 82157F24h */ case    1:  		/* b -814204 */
		/* 82157F24h case    1:*/		return 0x820912A8;
		/* 82157F24h case    1:*/		return 0x82157F28;
	}
	return 0x82157F28;
} // Block from 82157F20h-82157F28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82157F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157F28);
		  /* 82157F28h */ case    0:  		/* mfspr R12, LR */
		/* 82157F28h case    0:*/		regs.R12 = regs.LR;
		/* 82157F28h case    0:*/		return 0x82157F2C;
		  /* 82157F2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82157F2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82157F2Ch case    1:*/		return 0x82157F30;
		  /* 82157F30h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 82157F30h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82157F30h case    2:*/		return 0x82157F34;
		  /* 82157F34h */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 82157F34h case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82157F34h case    3:*/		return 0x82157F38;
		  /* 82157F38h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 82157F38h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82157F38h case    4:*/		return 0x82157F3C;
		  /* 82157F3Ch */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 82157F3Ch case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82157F3Ch case    5:*/		return 0x82157F40;
		  /* 82157F40h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 82157F40h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82157F40h case    6:*/		return 0x82157F44;
		  /* 82157F44h */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 82157F44h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82157F44h case    7:*/		return 0x82157F48;
		  /* 82157F48h */ case    8:  		/* stwu R1, <#[R1 - 96]> */
		/* 82157F48h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82157F48h case    8:*/		return 0x82157F4C;
		  /* 82157F4Ch */ case    9:  		/* li R11, 0 */
		/* 82157F4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82157F4Ch case    9:*/		return 0x82157F50;
		  /* 82157F50h */ case   10:  		/* stw R4, <#[R1 + 124]> */
		/* 82157F50h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82157F50h case   10:*/		return 0x82157F54;
		  /* 82157F54h */ case   11:  		/* lwz R10, <#[R3]> */
		/* 82157F54h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82157F54h case   11:*/		return 0x82157F58;
		  /* 82157F58h */ case   12:  		/* addi R9, R1, 80 */
		/* 82157F58h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82157F58h case   12:*/		return 0x82157F5C;
		  /* 82157F5Ch */ case   13:  		/* stb R11, <#[R3 + 4]> */
		/* 82157F5Ch case   13:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82157F5Ch case   13:*/		return 0x82157F60;
		  /* 82157F60h */ case   14:  		/* addi R11, R1, 128 */
		/* 82157F60h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 82157F60h case   14:*/		return 0x82157F64;
		  /* 82157F64h */ case   15:  		/* lwz R10, <#[R10]> */
		/* 82157F64h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82157F64h case   15:*/		return 0x82157F68;
		  /* 82157F68h */ case   16:  		/* stw R11, <#[R9]> */
		/* 82157F68h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82157F68h case   16:*/		return 0x82157F6C;
		  /* 82157F6Ch */ case   17:  		/* lwz R5, <#[R1 + 80]> */
		/* 82157F6Ch case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82157F6Ch case   17:*/		return 0x82157F70;
		  /* 82157F70h */ case   18:  		/* mtspr CTR, R10 */
		/* 82157F70h case   18:*/		regs.CTR = regs.R10;
		/* 82157F70h case   18:*/		return 0x82157F74;
		  /* 82157F74h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82157F74h case   19:*/		if ( 1 ) { regs.LR = 0x82157F78; return (uint32)regs.CTR; }
		/* 82157F74h case   19:*/		return 0x82157F78;
		  /* 82157F78h */ case   20:  		/* addi R1, R1, 96 */
		/* 82157F78h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82157F78h case   20:*/		return 0x82157F7C;
		  /* 82157F7Ch */ case   21:  		/* lwz R12, <#[R1 - 8]> */
		/* 82157F7Ch case   21:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82157F7Ch case   21:*/		return 0x82157F80;
		  /* 82157F80h */ case   22:  		/* mtspr LR, R12 */
		/* 82157F80h case   22:*/		regs.LR = regs.R12;
		/* 82157F80h case   22:*/		return 0x82157F84;
		  /* 82157F84h */ case   23:  		/* bclr 20, CR0_LT */
		/* 82157F84h case   23:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82157F84h case   23:*/		return 0x82157F88;
	}
	return 0x82157F88;
} // Block from 82157F28h-82157F88h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82157F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157F88);
		  /* 82157F88h */ case    0:  		/* mfspr R12, LR */
		/* 82157F88h case    0:*/		regs.R12 = regs.LR;
		/* 82157F88h case    0:*/		return 0x82157F8C;
		  /* 82157F8Ch */ case    1:  		/* bl -814444 */
		/* 82157F8Ch case    1:*/		regs.LR = 0x82157F90; return 0x82091220;
		/* 82157F8Ch case    1:*/		return 0x82157F90;
		  /* 82157F90h */ case    2:  		/* lis R11, -32217 */
		/* 82157F90h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82157F90h case    2:*/		return 0x82157F94;
		  /* 82157F94h */ case    3:  		/* lis R7, -32252 */
		/* 82157F94h case    3:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 82157F94h case    3:*/		return 0x82157F98;
		  /* 82157F98h */ case    4:  		/* stw R11, <#[R1 - 192]> */
		/* 82157F98h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157F98h case    4:*/		return 0x82157F9C;
		  /* 82157F9Ch */ case    5:  		/* lis R11, -32255 */
		/* 82157F9Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82157F9Ch case    5:*/		return 0x82157FA0;
		  /* 82157FA0h */ case    6:  		/* lwz R10, <#[R1 - 192]> */
		/* 82157FA0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FA0h case    6:*/		return 0x82157FA4;
		  /* 82157FA4h */ case    7:  		/* addi R9, R10, 20824 */
		/* 82157FA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x5158);
		/* 82157FA4h case    7:*/		return 0x82157FA8;
		  /* 82157FA8h */ case    8:  		/* stw R9, <#[R1 - 192]> */
		/* 82157FA8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FA8h case    8:*/		return 0x82157FAC;
		  /* 82157FACh */ case    9:  		/* addi R11, R11, -8168 */
		/* 82157FACh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFE018);
		/* 82157FACh case    9:*/		return 0x82157FB0;
	}
	return 0x82157FB0;
} // Block from 82157F88h-82157FB0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82157FB0h
// Function '?r400InsertEndMainILCode@XGRAPHICS@@YAKKPAPAKPAU_R400ILSTORE@1@PAU_R400PSIL@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82157FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82157FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82157FB0);
		  /* 82157FB0h */ case    0:  		/* stw R10, <#[R1 - 164]> */
		/* 82157FB0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF5C) );
		/* 82157FB0h case    0:*/		return 0x82157FB4;
		  /* 82157FB4h */ case    1:  		/* lis R10, -32255 */
		/* 82157FB4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82157FB4h case    1:*/		return 0x82157FB8;
		  /* 82157FB8h */ case    2:  		/* lis R9, -32255 */
		/* 82157FB8h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 82157FB8h case    2:*/		return 0x82157FBC;
		  /* 82157FBCh */ case    3:  		/* lwz R8, <#[R1 - 192]> */
		/* 82157FBCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FBCh case    3:*/		return 0x82157FC0;
		  /* 82157FC0h */ case    4:  		/* stw R11, <#[R8 - 760]> */
		/* 82157FC0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFFFD08) );
		/* 82157FC0h case    4:*/		return 0x82157FC4;
		  /* 82157FC4h */ case    5:  		/* addi R10, R10, -8180 */
		/* 82157FC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFE00C);
		/* 82157FC4h case    5:*/		return 0x82157FC8;
		  /* 82157FC8h */ case    6:  		/* addi R9, R9, -8204 */
		/* 82157FC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFDFF4);
		/* 82157FC8h case    6:*/		return 0x82157FCC;
		  /* 82157FCCh */ case    7:  		/* stw R8, <#[R1 - 192]> */
		/* 82157FCCh case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FCCh case    7:*/		return 0x82157FD0;
		  /* 82157FD0h */ case    8:  		/* lis R8, -32255 */
		/* 82157FD0h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82157FD0h case    8:*/		return 0x82157FD4;
		  /* 82157FD4h */ case    9:  		/* lwz R11, <#[R1 - 192]> */
		/* 82157FD4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FD4h case    9:*/		return 0x82157FD8;
		  /* 82157FD8h */ case   10:  		/* lis R6, -32252 */
		/* 82157FD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 82157FD8h case   10:*/		return 0x82157FDC;
		  /* 82157FDCh */ case   11:  		/* stw R10, <#[R11 - 756]> */
		/* 82157FDCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFD0C) );
		/* 82157FDCh case   11:*/		return 0x82157FE0;
		  /* 82157FE0h */ case   12:  		/* stw R9, <#[R11 - 752]> */
		/* 82157FE0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0xFFFFFD10) );
		/* 82157FE0h case   12:*/		return 0x82157FE4;
		  /* 82157FE4h */ case   13:  		/* addi R10, R7, -24028 */
		/* 82157FE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0xFFFFA224);
		/* 82157FE4h case   13:*/		return 0x82157FE8;
		  /* 82157FE8h */ case   14:  		/* stw R11, <#[R1 - 192]> */
		/* 82157FE8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FE8h case   14:*/		return 0x82157FEC;
		  /* 82157FECh */ case   15:  		/* addi R11, R8, -8200 */
		/* 82157FECh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFDFF8);
		/* 82157FECh case   15:*/		return 0x82157FF0;
		  /* 82157FF0h */ case   16:  		/* addi R9, R6, -24036 */
		/* 82157FF0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0xFFFFA21C);
		/* 82157FF0h case   16:*/		return 0x82157FF4;
		  /* 82157FF4h */ case   17:  		/* lwz R8, <#[R1 - 192]> */
		/* 82157FF4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82157FF4h case   17:*/		return 0x82157FF8;
		  /* 82157FF8h */ case   18:  		/* lis R5, -32252 */
		/* 82157FF8h case   18:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 82157FF8h case   18:*/		return 0x82157FFC;
		  /* 82157FFCh */ case   19:  		/* stw R11, <#[R8 - 748]> */
		/* 82157FFCh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFFFD14) );
		/* 82157FFCh case   19:*/		return 0x82158000;
		  /* 82158000h */ case   20:  		/* lis R4, -32252 */
		/* 82158000h case   20:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 82158000h case   20:*/		return 0x82158004;
		  /* 82158004h */ case   21:  		/* stw R10, <#[R8 - 744]> */
		/* 82158004h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0xFFFFFD18) );
		/* 82158004h case   21:*/		return 0x82158008;
		  /* 82158008h */ case   22:  		/* lis R3, -32252 */
		/* 82158008h case   22:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 82158008h case   22:*/		return 0x8215800C;
		  /* 8215800Ch */ case   23:  		/* stw R9, <#[R8 - 740]> */
		/* 8215800Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0xFFFFFD1C) );
		/* 8215800Ch case   23:*/		return 0x82158010;
		  /* 82158010h */ case   24:  		/* addi R11, R5, -24044 */
		/* 82158010h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xFFFFA214);
		/* 82158010h case   24:*/		return 0x82158014;
		  /* 82158014h */ case   25:  		/* stw R8, <#[R1 - 192]> */
		/* 82158014h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158014h case   25:*/		return 0x82158018;
		  /* 82158018h */ case   26:  		/* addi R10, R4, -24052 */
		/* 82158018h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFFA20C);
		/* 82158018h case   26:*/		return 0x8215801C;
		  /* 8215801Ch */ case   27:  		/* addi R9, R3, -24060 */
		/* 8215801Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFA204);
		/* 8215801Ch case   27:*/		return 0x82158020;
		  /* 82158020h */ case   28:  		/* stw R11, <#[R8 - 736]> */
		/* 82158020h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFFFD20) );
		/* 82158020h case   28:*/		return 0x82158024;
		  /* 82158024h */ case   29:  		/* lis R31, -32255 */
		/* 82158024h case   29:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8201);
		/* 82158024h case   29:*/		return 0x82158028;
		  /* 82158028h */ case   30:  		/* stw R10, <#[R8 - 732]> */
		/* 82158028h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0xFFFFFD24) );
		/* 82158028h case   30:*/		return 0x8215802C;
		  /* 8215802Ch */ case   31:  		/* lis R30, -32255 */
		/* 8215802Ch case   31:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8201);
		/* 8215802Ch case   31:*/		return 0x82158030;
		  /* 82158030h */ case   32:  		/* stw R9, <#[R8 - 728]> */
		/* 82158030h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0xFFFFFD28) );
		/* 82158030h case   32:*/		return 0x82158034;
		  /* 82158034h */ case   33:  		/* lis R29, -32255 */
		/* 82158034h case   33:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8201);
		/* 82158034h case   33:*/		return 0x82158038;
		  /* 82158038h */ case   34:  		/* addi R11, R31, 13816 */
		/* 82158038h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x35F8);
		/* 82158038h case   34:*/		return 0x8215803C;
		  /* 8215803Ch */ case   35:  		/* addi R10, R30, -21040 */
		/* 8215803Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFADD0);
		/* 8215803Ch case   35:*/		return 0x82158040;
		  /* 82158040h */ case   36:  		/* addi R9, R29, -8176 */
		/* 82158040h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0xFFFFE010);
		/* 82158040h case   36:*/		return 0x82158044;
		  /* 82158044h */ case   37:  		/* stw R11, <#[R8 - 724]> */
		/* 82158044h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFFFD2C) );
		/* 82158044h case   37:*/		return 0x82158048;
		  /* 82158048h */ case   38:  		/* lis R28, -32252 */
		/* 82158048h case   38:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 82158048h case   38:*/		return 0x8215804C;
		  /* 8215804Ch */ case   39:  		/* stw R10, <#[R8 - 720]> */
		/* 8215804Ch case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0xFFFFFD30) );
		/* 8215804Ch case   39:*/		return 0x82158050;
		  /* 82158050h */ case   40:  		/* lis R27, -32255 */
		/* 82158050h case   40:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8201);
		/* 82158050h case   40:*/		return 0x82158054;
		  /* 82158054h */ case   41:  		/* stw R9, <#[R8 - 716]> */
		/* 82158054h case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0xFFFFFD34) );
		/* 82158054h case   41:*/		return 0x82158058;
		  /* 82158058h */ case   42:  		/* lis R26, -32255 */
		/* 82158058h case   42:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8201);
		/* 82158058h case   42:*/		return 0x8215805C;
		  /* 8215805Ch */ case   43:  		/* addi R11, R28, -23876 */
		/* 8215805Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFA2BC);
		/* 8215805Ch case   43:*/		return 0x82158060;
		  /* 82158060h */ case   44:  		/* addi R10, R27, 13800 */
		/* 82158060h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x35E8);
		/* 82158060h case   44:*/		return 0x82158064;
		  /* 82158064h */ case   45:  		/* addi R9, R26, 13792 */
		/* 82158064h case   45:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R26,0x35E0);
		/* 82158064h case   45:*/		return 0x82158068;
		  /* 82158068h */ case   46:  		/* stw R11, <#[R8 - 712]> */
		/* 82158068h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFFFD38) );
		/* 82158068h case   46:*/		return 0x8215806C;
		  /* 8215806Ch */ case   47:  		/* stw R10, <#[R8 - 708]> */
		/* 8215806Ch case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0xFFFFFD3C) );
		/* 8215806Ch case   47:*/		return 0x82158070;
		  /* 82158070h */ case   48:  		/* lis R31, -32252 */
		/* 82158070h case   48:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8204);
		/* 82158070h case   48:*/		return 0x82158074;
		  /* 82158074h */ case   49:  		/* stw R9, <#[R8 - 704]> */
		/* 82158074h case   49:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0xFFFFFD40) );
		/* 82158074h case   49:*/		return 0x82158078;
		  /* 82158078h */ case   50:  		/* lis R30, -32252 */
		/* 82158078h case   50:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8204);
		/* 82158078h case   50:*/		return 0x8215807C;
		  /* 8215807Ch */ case   51:  		/* lis R29, -32252 */
		/* 8215807Ch case   51:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8204);
		/* 8215807Ch case   51:*/		return 0x82158080;
		  /* 82158080h */ case   52:  		/* lis R28, -32252 */
		/* 82158080h case   52:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 82158080h case   52:*/		return 0x82158084;
		  /* 82158084h */ case   53:  		/* lis R11, -32255 */
		/* 82158084h case   53:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158084h case   53:*/		return 0x82158088;
		  /* 82158088h */ case   54:  		/* lis R10, -32255 */
		/* 82158088h case   54:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82158088h case   54:*/		return 0x8215808C;
		  /* 8215808Ch */ case   55:  		/* lis R9, -32255 */
		/* 8215808Ch case   55:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8215808Ch case   55:*/		return 0x82158090;
		  /* 82158090h */ case   56:  		/* lis R8, -32255 */
		/* 82158090h case   56:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82158090h case   56:*/		return 0x82158094;
		  /* 82158094h */ case   57:  		/* lis R7, -32255 */
		/* 82158094h case   57:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 82158094h case   57:*/		return 0x82158098;
		  /* 82158098h */ case   58:  		/* lis R6, -32252 */
		/* 82158098h case   58:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 82158098h case   58:*/		return 0x8215809C;
		  /* 8215809Ch */ case   59:  		/* lis R5, -32252 */
		/* 8215809Ch case   59:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 8215809Ch case   59:*/		return 0x821580A0;
		  /* 821580A0h */ case   60:  		/* lis R4, -32252 */
		/* 821580A0h case   60:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 821580A0h case   60:*/		return 0x821580A4;
		  /* 821580A4h */ case   61:  		/* lis R3, -32252 */
		/* 821580A4h case   61:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 821580A4h case   61:*/		return 0x821580A8;
		  /* 821580A8h */ case   62:  		/* addi R31, R31, -23960 */
		/* 821580A8h case   62:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFA268);
		/* 821580A8h case   62:*/		return 0x821580AC;
		  /* 821580ACh */ case   63:  		/* addi R30, R30, -23968 */
		/* 821580ACh case   63:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFA260);
		/* 821580ACh case   63:*/		return 0x821580B0;
		  /* 821580B0h */ case   64:  		/* addi R29, R29, -23976 */
		/* 821580B0h case   64:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFA258);
		/* 821580B0h case   64:*/		return 0x821580B4;
		  /* 821580B4h */ case   65:  		/* addi R28, R28, -23984 */
		/* 821580B4h case   65:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFA250);
		/* 821580B4h case   65:*/		return 0x821580B8;
		  /* 821580B8h */ case   66:  		/* lis R27, -32255 */
		/* 821580B8h case   66:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8201);
		/* 821580B8h case   66:*/		return 0x821580BC;
		  /* 821580BCh */ case   67:  		/* lis R26, -32255 */
		/* 821580BCh case   67:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8201);
		/* 821580BCh case   67:*/		return 0x821580C0;
		  /* 821580C0h */ case   68:  		/* addi R11, R11, -8196 */
		/* 821580C0h case   68:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFDFFC);
		/* 821580C0h case   68:*/		return 0x821580C4;
		  /* 821580C4h */ case   69:  		/* addi R10, R10, -8192 */
		/* 821580C4h case   69:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFE000);
		/* 821580C4h case   69:*/		return 0x821580C8;
		  /* 821580C8h */ case   70:  		/* addi R9, R9, -8668 */
		/* 821580C8h case   70:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFDE24);
		/* 821580C8h case   70:*/		return 0x821580CC;
		  /* 821580CCh */ case   71:  		/* addi R8, R8, 4960 */
		/* 821580CCh case   71:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1360);
		/* 821580CCh case   71:*/		return 0x821580D0;
		  /* 821580D0h */ case   72:  		/* addi R7, R7, 13784 */
		/* 821580D0h case   72:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x35D8);
		/* 821580D0h case   72:*/		return 0x821580D4;
		  /* 821580D4h */ case   73:  		/* lwz R25, <#[R1 - 192]> */
		/* 821580D4h case   73:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821580D4h case   73:*/		return 0x821580D8;
	}
	return 0x821580D8;
} // Block from 82157FB0h-821580D8h (74 instructions)

//////////////////////////////////////////////////////
// Block at 821580D8h
// Function '?r400PS_TO_ILConversion@XGRAPHICS@@YAKPAKKPAU_R400PSIL@1@PAU_R400ILSTORE@1@W4_E_CENTER_CENTROID@1@PAXP6AX4HKPBD@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821580D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821580D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821580D8);
		  /* 821580D8h */ case    0:  		/* lis R24, -32217 */
		/* 821580D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8227);
		/* 821580D8h case    0:*/		return 0x821580DC;
		  /* 821580DCh */ case    1:  		/* addi R3, R3, -23776 */
		/* 821580DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xFFFFA320);
		/* 821580DCh case    1:*/		return 0x821580E0;
		  /* 821580E0h */ case    2:  		/* stw R31, <#[R1 - 180]> */
		/* 821580E0h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFF4C) );
		/* 821580E0h case    2:*/		return 0x821580E4;
		  /* 821580E4h */ case    3:  		/* addi R23, R24, 20184 */
		/* 821580E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R24,0x4ED8);
		/* 821580E4h case    3:*/		return 0x821580E8;
		  /* 821580E8h */ case    4:  		/* stw R30, <#[R1 - 176]> */
		/* 821580E8h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 821580E8h case    4:*/		return 0x821580EC;
		  /* 821580ECh */ case    5:  		/* addi R6, R6, -23892 */
		/* 821580ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFA2AC);
		/* 821580ECh case    5:*/		return 0x821580F0;
		  /* 821580F0h */ case    6:  		/* stw R29, <#[R1 - 172]> */
		/* 821580F0h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0xFFFFFF54) );
		/* 821580F0h case    6:*/		return 0x821580F4;
		  /* 821580F4h */ case    7:  		/* addi R5, R5, -23744 */
		/* 821580F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFA340);
		/* 821580F4h case    7:*/		return 0x821580F8;
		  /* 821580F8h */ case    8:  		/* stw R28, <#[R1 - 168]> */
		/* 821580F8h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821580F8h case    8:*/		return 0x821580FC;
		  /* 821580FCh */ case    9:  		/* stw R8, <#[R25 - 688]> */
		/* 821580FCh case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R25 + 0xFFFFFD50) );
		/* 821580FCh case    9:*/		return 0x82158100;
		  /* 82158100h */ case   10:  		/* li R8, 2 */
		/* 82158100h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 82158100h case   10:*/		return 0x82158104;
		  /* 82158104h */ case   11:  		/* stw R3, <#[R25 - 668]> */
		/* 82158104h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0xFFFFFD64) );
		/* 82158104h case   11:*/		return 0x82158108;
		  /* 82158108h */ case   12:  		/* addi R4, R4, -23760 */
		/* 82158108h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0xFFFFA330);
		/* 82158108h case   12:*/		return 0x8215810C;
		  /* 8215810Ch */ case   13:  		/* stw R31, <#[R25 - 664]> */
		/* 8215810Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0xFFFFFD68) );
		/* 8215810Ch case   13:*/		return 0x82158110;
		  /* 82158110h */ case   14:  		/* addi R27, R27, -8220 */
		/* 82158110h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFDFE4);
		/* 82158110h case   14:*/		return 0x82158114;
		  /* 82158114h */ case   15:  		/* stw R30, <#[R25 - 660]> */
		/* 82158114h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R25 + 0xFFFFFD6C) );
		/* 82158114h case   15:*/		return 0x82158118;
		  /* 82158118h */ case   16:  		/* li R3, 1 */
		/* 82158118h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82158118h case   16:*/		return 0x8215811C;
		  /* 8215811Ch */ case   17:  		/* stw R29, <#[R25 - 656]> */
		/* 8215811Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0xFFFFFD70) );
		/* 8215811Ch case   17:*/		return 0x82158120;
		  /* 82158120h */ case   18:  		/* li R31, 1 */
		/* 82158120h case   18:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82158120h case   18:*/		return 0x82158124;
		  /* 82158124h */ case   19:  		/* stw R10, <#[R25 - 696]> */
		/* 82158124h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0xFFFFFD48) );
		/* 82158124h case   19:*/		return 0x82158128;
		  /* 82158128h */ case   20:  		/* addi R26, R26, -8376 */
		/* 82158128h case   20:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFDF48);
		/* 82158128h case   20:*/		return 0x8215812C;
		  /* 8215812Ch */ case   21:  		/* li R30, 3 */
		/* 8215812Ch case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x3);
		/* 8215812Ch case   21:*/		return 0x82158130;
		  /* 82158130h */ case   22:  		/* stw R7, <#[R25 - 684]> */
		/* 82158130h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R25 + 0xFFFFFD54) );
		/* 82158130h case   22:*/		return 0x82158134;
		  /* 82158134h */ case   23:  		/* li R29, 3 */
		/* 82158134h case   23:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 82158134h case   23:*/		return 0x82158138;
		  /* 82158138h */ case   24:  		/* stw R8, <#[R23 + 16]> */
		/* 82158138h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R23 + 0x00000010) );
		/* 82158138h case   24:*/		return 0x8215813C;
		  /* 8215813Ch */ case   25:  		/* li R10, 2 */
		/* 8215813Ch case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8215813Ch case   25:*/		return 0x82158140;
		  /* 82158140h */ case   26:  		/* stw R28, <#[R25 - 652]> */
		/* 82158140h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R25 + 0xFFFFFD74) );
		/* 82158140h case   26:*/		return 0x82158144;
		  /* 82158144h */ case   27:  		/* li R7, 2 */
		/* 82158144h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82158144h case   27:*/		return 0x82158148;
		  /* 82158148h */ case   28:  		/* stw R27, <#[R25 - 648]> */
		/* 82158148h case   28:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R25 + 0xFFFFFD78) );
		/* 82158148h case   28:*/		return 0x8215814C;
		  /* 8215814Ch */ case   29:  		/* stw R6, <#[R25 - 680]> */
		/* 8215814Ch case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R25 + 0xFFFFFD58) );
		/* 8215814Ch case   29:*/		return 0x82158150;
		  /* 82158150h */ case   30:  		/* li R8, 1 */
		/* 82158150h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82158150h case   30:*/		return 0x82158154;
		  /* 82158154h */ case   31:  		/* stw R5, <#[R25 - 676]> */
		/* 82158154h case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R25 + 0xFFFFFD5C) );
		/* 82158154h case   31:*/		return 0x82158158;
		  /* 82158158h */ case   32:  		/* li R28, 3 */
		/* 82158158h case   32:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 82158158h case   32:*/		return 0x8215815C;
		  /* 8215815Ch */ case   33:  		/* stw R4, <#[R25 - 672]> */
		/* 8215815Ch case   33:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R25 + 0xFFFFFD60) );
		/* 8215815Ch case   33:*/		return 0x82158160;
		  /* 82158160h */ case   34:  		/* li R27, 3 */
		/* 82158160h case   34:*/		cpu::op::li<0>(regs,&regs.R27,0x3);
		/* 82158160h case   34:*/		return 0x82158164;
		  /* 82158164h */ case   35:  		/* stw R3, <#[R23 + 36]> */
		/* 82158164h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R23 + 0x00000024) );
		/* 82158164h case   35:*/		return 0x82158168;
		  /* 82158168h */ case   36:  		/* li R6, 2 */
		/* 82158168h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82158168h case   36:*/		return 0x8215816C;
		  /* 8215816Ch */ case   37:  		/* stw R31, <#[R23 + 40]> */
		/* 8215816Ch case   37:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x00000028) );
		/* 8215816Ch case   37:*/		return 0x82158170;
		  /* 82158170h */ case   38:  		/* li R5, 2 */
		/* 82158170h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82158170h case   38:*/		return 0x82158174;
		  /* 82158174h */ case   39:  		/* stw R11, <#[R25 - 700]> */
		/* 82158174h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0xFFFFFD44) );
		/* 82158174h case   39:*/		return 0x82158178;
		  /* 82158178h */ case   40:  		/* li R4, 1 */
		/* 82158178h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82158178h case   40:*/		return 0x8215817C;
		  /* 8215817Ch */ case   41:  		/* stw R9, <#[R25 - 692]> */
		/* 8215817Ch case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0xFFFFFD4C) );
		/* 8215817Ch case   41:*/		return 0x82158180;
		  /* 82158180h */ case   42:  		/* lis R3, -32252 */
		/* 82158180h case   42:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 82158180h case   42:*/		return 0x82158184;
		  /* 82158184h */ case   43:  		/* lis R31, -32252 */
		/* 82158184h case   43:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8204);
		/* 82158184h case   43:*/		return 0x82158188;
		  /* 82158188h */ case   44:  		/* stw R26, <#[R25 - 644]> */
		/* 82158188h case   44:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + 0xFFFFFD7C) );
		/* 82158188h case   44:*/		return 0x8215818C;
		  /* 8215818Ch */ case   45:  		/* stw R30, <#[R23 + 44]> */
		/* 8215818Ch case   45:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R23 + 0x0000002C) );
		/* 8215818Ch case   45:*/		return 0x82158190;
		  /* 82158190h */ case   46:  		/* li R11, 2 */
		/* 82158190h case   46:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82158190h case   46:*/		return 0x82158194;
		  /* 82158194h */ case   47:  		/* stw R29, <#[R23 + 48]> */
		/* 82158194h case   47:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R23 + 0x00000030) );
		/* 82158194h case   47:*/		return 0x82158198;
		  /* 82158198h */ case   48:  		/* li R9, 2 */
		/* 82158198h case   48:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82158198h case   48:*/		return 0x8215819C;
		  /* 8215819Ch */ case   49:  		/* stw R25, <#[R1 - 192]> */
		/* 8215819Ch case   49:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 8215819Ch case   49:*/		return 0x821581A0;
		  /* 821581A0h */ case   50:  		/* lis R30, -32255 */
		/* 821581A0h case   50:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8201);
		/* 821581A0h case   50:*/		return 0x821581A4;
		  /* 821581A4h */ case   51:  		/* stw R10, <#[R23 + 8]> */
		/* 821581A4h case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821581A4h case   51:*/		return 0x821581A8;
		  /* 821581A8h */ case   52:  		/* lis R29, -32255 */
		/* 821581A8h case   52:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8201);
		/* 821581A8h case   52:*/		return 0x821581AC;
		  /* 821581ACh */ case   53:  		/* li R25, 2 */
		/* 821581ACh case   53:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821581ACh case   53:*/		return 0x821581B0;
		  /* 821581B0h */ case   54:  		/* stw R7, <#[R23 + 20]> */
		/* 821581B0h case   54:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R23 + 0x00000014) );
		/* 821581B0h case   54:*/		return 0x821581B4;
		  /* 821581B4h */ case   55:  		/* li R26, 2 */
		/* 821581B4h case   55:*/		cpu::op::li<0>(regs,&regs.R26,0x2);
		/* 821581B4h case   55:*/		return 0x821581B8;
		  /* 821581B8h */ case   56:  		/* stw R8, <#[R23 + 76]> */
		/* 821581B8h case   56:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R23 + 0x0000004C) );
		/* 821581B8h case   56:*/		return 0x821581BC;
		  /* 821581BCh */ case   57:  		/* li R10, 3 */
		/* 821581BCh case   57:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821581BCh case   57:*/		return 0x821581C0;
		  /* 821581C0h */ case   58:  		/* stw R7, <#[R23 + 80]> */
		/* 821581C0h case   58:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R23 + 0x00000050) );
		/* 821581C0h case   58:*/		return 0x821581C4;
		  /* 821581C4h */ case   59:  		/* stw R28, <#[R23 + 52]> */
		/* 821581C4h case   59:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R23 + 0x00000034) );
		/* 821581C4h case   59:*/		return 0x821581C8;
		  /* 821581C8h */ case   60:  		/* addi R8, R3, -24008 */
		/* 821581C8h case   60:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R3,0xFFFFA238);
		/* 821581C8h case   60:*/		return 0x821581CC;
		  /* 821581CCh */ case   61:  		/* stw R27, <#[R23 + 56]> */
		/* 821581CCh case   61:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R23 + 0x00000038) );
		/* 821581CCh case   61:*/		return 0x821581D0;
		  /* 821581D0h */ case   62:  		/* addi R7, R31, -24020 */
		/* 821581D0h case   62:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0xFFFFA22C);
		/* 821581D0h case   62:*/		return 0x821581D4;
		  /* 821581D4h */ case   63:  		/* stw R6, <#[R23 + 24]> */
		/* 821581D4h case   63:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R23 + 0x00000018) );
		/* 821581D4h case   63:*/		return 0x821581D8;
		  /* 821581D8h */ case   64:  		/* lis R28, -32252 */
		/* 821581D8h case   64:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 821581D8h case   64:*/		return 0x821581DC;
		  /* 821581DCh */ case   65:  		/* stw R5, <#[R23 + 28]> */
		/* 821581DCh case   65:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R23 + 0x0000001C) );
		/* 821581DCh case   65:*/		return 0x821581E0;
		  /* 821581E0h */ case   66:  		/* lis R27, -32252 */
		/* 821581E0h case   66:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 821581E0h case   66:*/		return 0x821581E4;
		  /* 821581E4h */ case   67:  		/* stw R4, <#[R23 + 32]> */
		/* 821581E4h case   67:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R23 + 0x00000020) );
		/* 821581E4h case   67:*/		return 0x821581E8;
		  /* 821581E8h */ case   68:  		/* lis R6, -32255 */
		/* 821581E8h case   68:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 821581E8h case   68:*/		return 0x821581EC;
		  /* 821581ECh */ case   69:  		/* stw R11, <#[R23 + 4]> */
		/* 821581ECh case   69:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821581ECh case   69:*/		return 0x821581F0;
		  /* 821581F0h */ case   70:  		/* lis R5, -32252 */
		/* 821581F0h case   70:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 821581F0h case   70:*/		return 0x821581F4;
		  /* 821581F4h */ case   71:  		/* stw R9, <#[R23 + 12]> */
		/* 821581F4h case   71:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x0000000C) );
		/* 821581F4h case   71:*/		return 0x821581F8;
		  /* 821581F8h */ case   72:  		/* lis R4, -32255 */
		/* 821581F8h case   72:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 821581F8h case   72:*/		return 0x821581FC;
		  /* 821581FCh */ case   73:  		/* stw R25, <#[R24 + 20184]> */
		/* 821581FCh case   73:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R24 + 0x00004ED8) );
		/* 821581FCh case   73:*/		return 0x82158200;
		  /* 82158200h */ case   74:  		/* addi R3, R30, 13620 */
		/* 82158200h case   74:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x3534);
		/* 82158200h case   74:*/		return 0x82158204;
		  /* 82158204h */ case   75:  		/* stw R26, <#[R23 + 60]> */
		/* 82158204h case   75:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R23 + 0x0000003C) );
		/* 82158204h case   75:*/		return 0x82158208;
		  /* 82158208h */ case   76:  		/* addi R31, R29, 13612 */
		/* 82158208h case   76:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x352C);
		/* 82158208h case   76:*/		return 0x8215820C;
		  /* 8215820Ch */ case   77:  		/* stw R11, <#[R23 + 64]> */
		/* 8215820Ch case   77:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000040) );
		/* 8215820Ch case   77:*/		return 0x82158210;
		  /* 82158210h */ case   78:  		/* stw R10, <#[R23 + 68]> */
		/* 82158210h case   78:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000044) );
		/* 82158210h case   78:*/		return 0x82158214;
		  /* 82158214h */ case   79:  		/* stw R9, <#[R23 + 72]> */
		/* 82158214h case   79:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x00000048) );
		/* 82158214h case   79:*/		return 0x82158218;
		  /* 82158218h */ case   80:  		/* lwz R10, <#[R1 - 192]> */
		/* 82158218h case   80:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158218h case   80:*/		return 0x8215821C;
		  /* 8215821Ch */ case   81:  		/* addi R6, R6, 13660 */
		/* 8215821Ch case   81:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x355C);
		/* 8215821Ch case   81:*/		return 0x82158220;
		  /* 82158220h */ case   82:  		/* stw R11, <#[R23 + 84]> */
		/* 82158220h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000054) );
		/* 82158220h case   82:*/		return 0x82158224;
		  /* 82158224h */ case   83:  		/* addi R30, R28, -23784 */
		/* 82158224h case   83:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0xFFFFA318);
		/* 82158224h case   83:*/		return 0x82158228;
		  /* 82158228h */ case   84:  		/* stw R11, <#[R23 + 96]> */
		/* 82158228h case   84:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000060) );
		/* 82158228h case   84:*/		return 0x8215822C;
		  /* 8215822Ch */ case   85:  		/* addi R29, R27, -23792 */
		/* 8215822Ch case   85:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0xFFFFA310);
		/* 8215822Ch case   85:*/		return 0x82158230;
		  /* 82158230h */ case   86:  		/* stw R11, <#[R23 + 108]> */
		/* 82158230h case   86:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x0000006C) );
		/* 82158230h case   86:*/		return 0x82158234;
		  /* 82158234h */ case   87:  		/* li R11, 1 */
		/* 82158234h case   87:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82158234h case   87:*/		return 0x82158238;
		  /* 82158238h */ case   88:  		/* stw R9, <#[R23 + 92]> */
		/* 82158238h case   88:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x0000005C) );
		/* 82158238h case   88:*/		return 0x8215823C;
		  /* 8215823Ch */ case   89:  		/* lis R28, -32252 */
		/* 8215823Ch case   89:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 8215823Ch case   89:*/		return 0x82158240;
		  /* 82158240h */ case   90:  		/* stw R6, <#[R10 - 400]> */
		/* 82158240h case   90:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0xFFFFFE70) );
		/* 82158240h case   90:*/		return 0x82158244;
		  /* 82158244h */ case   91:  		/* lis R27, -32252 */
		/* 82158244h case   91:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 82158244h case   91:*/		return 0x82158248;
		  /* 82158248h */ case   92:  		/* stw R10, <#[R1 - 192]> */
		/* 82158248h case   92:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158248h case   92:*/		return 0x8215824C;
		  /* 8215824Ch */ case   93:  		/* li R10, 2 */
		/* 8215824Ch case   93:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8215824Ch case   93:*/		return 0x82158250;
		  /* 82158250h */ case   94:  		/* stw R9, <#[R23 + 104]> */
		/* 82158250h case   94:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x00000068) );
		/* 82158250h case   94:*/		return 0x82158254;
		  /* 82158254h */ case   95:  		/* lis R26, -32252 */
		/* 82158254h case   95:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8204);
		/* 82158254h case   95:*/		return 0x82158258;
		  /* 82158258h */ case   96:  		/* stw R10, <#[R23 + 88]> */
		/* 82158258h case   96:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000058) );
		/* 82158258h case   96:*/		return 0x8215825C;
		  /* 8215825Ch */ case   97:  		/* lis R25, -32255 */
		/* 8215825Ch case   97:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8201);
		/* 8215825Ch case   97:*/		return 0x82158260;
		  /* 82158260h */ case   98:  		/* stw R10, <#[R23 + 100]> */
		/* 82158260h case   98:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000064) );
		/* 82158260h case   98:*/		return 0x82158264;
		  /* 82158264h */ case   99:  		/* lis R24, -32255 */
		/* 82158264h case   99:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8201);
		/* 82158264h case   99:*/		return 0x82158268;
		  /* 82158268h */ case  100:  		/* lwz R10, <#[R1 - 192]> */
		/* 82158268h case  100:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158268h case  100:*/		return 0x8215826C;
		  /* 8215826Ch */ case  101:  		/* lis R22, -32255 */
		/* 8215826Ch case  101:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFF8201);
		/* 8215826Ch case  101:*/		return 0x82158270;
		  /* 82158270h */ case  102:  		/* stw R11, <#[R10 - 520]> */
		/* 82158270h case  102:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFFFDF8) );
		/* 82158270h case  102:*/		return 0x82158274;
		  /* 82158274h */ case  103:  		/* lis R21, -32252 */
		/* 82158274h case  103:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8204);
		/* 82158274h case  103:*/		return 0x82158278;
		  /* 82158278h */ case  104:  		/* stw R10, <#[R1 - 192]> */
		/* 82158278h case  104:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158278h case  104:*/		return 0x8215827C;
		  /* 8215827Ch */ case  105:  		/* li R10, 2 */
		/* 8215827Ch case  105:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8215827Ch case  105:*/		return 0x82158280;
		  /* 82158280h */ case  106:  		/* lwz R9, <#[R1 - 192]> */
		/* 82158280h case  106:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158280h case  106:*/		return 0x82158284;
		  /* 82158284h */ case  107:  		/* addi R5, R5, -23996 */
		/* 82158284h case  107:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFA244);
		/* 82158284h case  107:*/		return 0x82158288;
		  /* 82158288h */ case  108:  		/* stw R11, <#[R9 - 508]> */
		/* 82158288h case  108:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFFFE04) );
		/* 82158288h case  108:*/		return 0x8215828C;
		  /* 8215828Ch */ case  109:  		/* addi R4, R4, 13628 */
		/* 8215828Ch case  109:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x353C);
		/* 8215828Ch case  109:*/		return 0x82158290;
		  /* 82158290h */ case  110:  		/* stw R10, <#[R23 + 112]> */
		/* 82158290h case  110:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000070) );
		/* 82158290h case  110:*/		return 0x82158294;
		  /* 82158294h */ case  111:  		/* addi R28, R28, -23800 */
		/* 82158294h case  111:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFA308);
		/* 82158294h case  111:*/		return 0x82158298;
		  /* 82158298h */ case  112:  		/* stw R9, <#[R1 - 192]> */
		/* 82158298h case  112:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158298h case  112:*/		return 0x8215829C;
		  /* 8215829Ch */ case  113:  		/* li R9, 1 */
		/* 8215829Ch case  113:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8215829Ch case  113:*/		return 0x821582A0;
		  /* 821582A0h */ case  114:  		/* lwz R10, <#[R1 - 192]> */
		/* 821582A0h case  114:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582A0h case  114:*/		return 0x821582A4;
		  /* 821582A4h */ case  115:  		/* addi R27, R27, -23808 */
		/* 821582A4h case  115:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFA300);
		/* 821582A4h case  115:*/		return 0x821582A8;
		  /* 821582A8h */ case  116:  		/* stw R11, <#[R10 - 496]> */
		/* 821582A8h case  116:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFFFE10) );
		/* 821582A8h case  116:*/		return 0x821582AC;
		  /* 821582ACh */ case  117:  		/* addi R26, R26, -23816 */
		/* 821582ACh case  117:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFA2F8);
		/* 821582ACh case  117:*/		return 0x821582B0;
		  /* 821582B0h */ case  118:  		/* stw R10, <#[R1 - 192]> */
		/* 821582B0h case  118:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582B0h case  118:*/		return 0x821582B4;
		  /* 821582B4h */ case  119:  		/* li R10, 1 */
		/* 821582B4h case  119:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821582B4h case  119:*/		return 0x821582B8;
		  /* 821582B8h */ case  120:  		/* stw R9, <#[R23 + 116]> */
		/* 821582B8h case  120:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x00000074) );
		/* 821582B8h case  120:*/		return 0x821582BC;
		  /* 821582BCh */ case  121:  		/* lis R23, -32255 */
		/* 821582BCh case  121:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8201);
		/* 821582BCh case  121:*/		return 0x821582C0;
		  /* 821582C0h */ case  122:  		/* lwz R9, <#[R1 - 192]> */
		/* 821582C0h case  122:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582C0h case  122:*/		return 0x821582C4;
		  /* 821582C4h */ case  123:  		/* addi R25, R25, 13564 */
		/* 821582C4h case  123:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x34FC);
		/* 821582C4h case  123:*/		return 0x821582C8;
		  /* 821582C8h */ case  124:  		/* stw R10, <#[R9 - 516]> */
		/* 821582C8h case  124:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0xFFFFFDFC) );
		/* 821582C8h case  124:*/		return 0x821582CC;
		  /* 821582CCh */ case  125:  		/* addi R24, R24, 13556 */
		/* 821582CCh case  125:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x34F4);
		/* 821582CCh case  125:*/		return 0x821582D0;
		  /* 821582D0h */ case  126:  		/* stw R9, <#[R1 - 192]> */
		/* 821582D0h case  126:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582D0h case  126:*/		return 0x821582D4;
		  /* 821582D4h */ case  127:  		/* addi R23, R23, -20932 */
		/* 821582D4h case  127:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0xFFFFAE3C);
		/* 821582D4h case  127:*/		return 0x821582D8;
		  /* 821582D8h */ case  128:  		/* lwz R10, <#[R1 - 192]> */
		/* 821582D8h case  128:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582D8h case  128:*/		return 0x821582DC;
		  /* 821582DCh */ case  129:  		/* addi R22, R22, -20940 */
		/* 821582DCh case  129:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0xFFFFAE34);
		/* 821582DCh case  129:*/		return 0x821582E0;
		  /* 821582E0h */ case  130:  		/* stw R10, <#[R1 - 192]> */
		/* 821582E0h case  130:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582E0h case  130:*/		return 0x821582E4;
		  /* 821582E4h */ case  131:  		/* addi R21, R21, -24084 */
		/* 821582E4h case  131:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0xFFFFA1EC);
		/* 821582E4h case  131:*/		return 0x821582E8;
		  /* 821582E8h */ case  132:  		/* lwz R6, <#[R1 - 192]> */
		/* 821582E8h case  132:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821582E8h case  132:*/		return 0x821582EC;
		  /* 821582ECh */ case  133:  		/* stw R11, <#[R9 - 484]> */
		/* 821582ECh case  133:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFFFE1C) );
		/* 821582ECh case  133:*/		return 0x821582F0;
		  /* 821582F0h */ case  134:  		/* li R9, 1 */
		/* 821582F0h case  134:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821582F0h case  134:*/		return 0x821582F4;
		  /* 821582F4h */ case  135:  		/* stw R11, <#[R10 - 472]> */
		/* 821582F4h case  135:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFFFE28) );
		/* 821582F4h case  135:*/		return 0x821582F8;
		  /* 821582F8h */ case  136:  		/* li R10, 1 */
		/* 821582F8h case  136:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821582F8h case  136:*/		return 0x821582FC;
		  /* 821582FCh */ case  137:  		/* stw R11, <#[R6 - 460]> */
		/* 821582FCh case  137:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0xFFFFFE34) );
		/* 821582FCh case  137:*/		return 0x82158300;
		  /* 82158300h */ case  138:  		/* stw R11, <#[R6 - 448]> */
		/* 82158300h case  138:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0xFFFFFE40) );
		/* 82158300h case  138:*/		return 0x82158304;
		  /* 82158304h */ case  139:  		/* lis R11, -32255 */
		/* 82158304h case  139:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158304h case  139:*/		return 0x82158308;
		  /* 82158308h */ case  140:  		/* stw R9, <#[R6 - 512]> */
		/* 82158308h case  140:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE00) );
		/* 82158308h case  140:*/		return 0x8215830C;
		  /* 8215830Ch */ case  141:  		/* addi R20, R11, -8184 */
		/* 8215830Ch case  141:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0xFFFFE008);
		/* 8215830Ch case  141:*/		return 0x82158310;
		  /* 82158310h */ case  142:  		/* stw R10, <#[R6 - 504]> */
		/* 82158310h case  142:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE08) );
		/* 82158310h case  142:*/		return 0x82158314;
		  /* 82158314h */ case  143:  		/* lis R11, -32252 */
		/* 82158314h case  143:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158314h case  143:*/		return 0x82158318;
		  /* 82158318h */ case  144:  		/* stw R9, <#[R6 - 500]> */
		/* 82158318h case  144:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE0C) );
		/* 82158318h case  144:*/		return 0x8215831C;
		  /* 8215831Ch */ case  145:  		/* stw R10, <#[R6 - 492]> */
		/* 8215831Ch case  145:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE14) );
		/* 8215831Ch case  145:*/		return 0x82158320;
		  /* 82158320h */ case  146:  		/* addi R19, R11, -23828 */
		/* 82158320h case  146:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFA2EC);
		/* 82158320h case  146:*/		return 0x82158324;
		  /* 82158324h */ case  147:  		/* stw R9, <#[R6 - 488]> */
		/* 82158324h case  147:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE18) );
		/* 82158324h case  147:*/		return 0x82158328;
		  /* 82158328h */ case  148:  		/* lis R11, -32252 */
		/* 82158328h case  148:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158328h case  148:*/		return 0x8215832C;
		  /* 8215832Ch */ case  149:  		/* stw R10, <#[R6 - 480]> */
		/* 8215832Ch case  149:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE20) );
		/* 8215832Ch case  149:*/		return 0x82158330;
		  /* 82158330h */ case  150:  		/* stw R9, <#[R6 - 476]> */
		/* 82158330h case  150:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE24) );
		/* 82158330h case  150:*/		return 0x82158334;
		  /* 82158334h */ case  151:  		/* addi R18, R11, -23836 */
		/* 82158334h case  151:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0xFFFFA2E4);
		/* 82158334h case  151:*/		return 0x82158338;
		  /* 82158338h */ case  152:  		/* stw R10, <#[R6 - 468]> */
		/* 82158338h case  152:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE2C) );
		/* 82158338h case  152:*/		return 0x8215833C;
		  /* 8215833Ch */ case  153:  		/* lis R11, -32255 */
		/* 8215833Ch case  153:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8215833Ch case  153:*/		return 0x82158340;
		  /* 82158340h */ case  154:  		/* stw R9, <#[R6 - 464]> */
		/* 82158340h case  154:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE30) );
		/* 82158340h case  154:*/		return 0x82158344;
		  /* 82158344h */ case  155:  		/* stw R10, <#[R6 - 456]> */
		/* 82158344h case  155:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE38) );
		/* 82158344h case  155:*/		return 0x82158348;
		  /* 82158348h */ case  156:  		/* addi R11, R11, -8188 */
		/* 82158348h case  156:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFE004);
		/* 82158348h case  156:*/		return 0x8215834C;
		  /* 8215834Ch */ case  157:  		/* stw R9, <#[R6 - 452]> */
		/* 8215834Ch case  157:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE3C) );
		/* 8215834Ch case  157:*/		return 0x82158350;
		  /* 82158350h */ case  158:  		/* stw R10, <#[R6 - 444]> */
		/* 82158350h case  158:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE44) );
		/* 82158350h case  158:*/		return 0x82158354;
		  /* 82158354h */ case  159:  		/* stw R11, <#[R1 - 192]> */
		/* 82158354h case  159:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158354h case  159:*/		return 0x82158358;
		  /* 82158358h */ case  160:  		/* li R11, 1 */
		/* 82158358h case  160:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82158358h case  160:*/		return 0x8215835C;
		  /* 8215835Ch */ case  161:  		/* stw R30, <#[R6 - 372]> */
		/* 8215835Ch case  161:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R6 + 0xFFFFFE8C) );
		/* 8215835Ch case  161:*/		return 0x82158360;
		  /* 82158360h */ case  162:  		/* lis R9, -32252 */
		/* 82158360h case  162:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82158360h case  162:*/		return 0x82158364;
		  /* 82158364h */ case  163:  		/* lwz R30, <#[R1 - 192]> */
		/* 82158364h case  163:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158364h case  163:*/		return 0x82158368;
		  /* 82158368h */ case  164:  		/* lis R17, -32252 */
		/* 82158368h case  164:*/		cpu::op::lis<0>(regs,&regs.R17,0xFFFF8204);
		/* 82158368h case  164:*/		return 0x8215836C;
		  /* 8215836Ch */ case  165:  		/* stw R6, <#[R1 - 192]> */
		/* 8215836Ch case  165:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 8215836Ch case  165:*/		return 0x82158370;
		  /* 82158370h */ case  166:  		/* lis R16, -32252 */
		/* 82158370h case  166:*/		cpu::op::lis<0>(regs,&regs.R16,0xFFFF8204);
		/* 82158370h case  166:*/		return 0x82158374;
		  /* 82158374h */ case  167:  		/* stw R9, <#[R1 - 188]> */
		/* 82158374h case  167:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 82158374h case  167:*/		return 0x82158378;
		  /* 82158378h */ case  168:  		/* li R9, 1 */
		/* 82158378h case  168:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82158378h case  168:*/		return 0x8215837C;
		  /* 8215837Ch */ case  169:  		/* stw R30, <#[R1 - 184]> */
		/* 8215837Ch case  169:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFF48) );
		/* 8215837Ch case  169:*/		return 0x82158380;
		  /* 82158380h */ case  170:  		/* lis R30, -32252 */
		/* 82158380h case  170:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8204);
		/* 82158380h case  170:*/		return 0x82158384;
		  /* 82158384h */ case  171:  		/* stw R5, <#[R6 - 396]> */
		/* 82158384h case  171:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0xFFFFFE74) );
		/* 82158384h case  171:*/		return 0x82158388;
		  /* 82158388h */ case  172:  		/* lis R5, -32252 */
		/* 82158388h case  172:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 82158388h case  172:*/		return 0x8215838C;
		  /* 8215838Ch */ case  173:  		/* stw R8, <#[R6 - 388]> */
		/* 8215838Ch case  173:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0xFFFFFE7C) );
		/* 8215838Ch case  173:*/		return 0x82158390;
		  /* 82158390h */ case  174:  		/* lis R15, -32255 */
		/* 82158390h case  174:*/		cpu::op::lis<0>(regs,&regs.R15,0xFFFF8201);
		/* 82158390h case  174:*/		return 0x82158394;
		  /* 82158394h */ case  175:  		/* addi R8, R5, -23848 */
		/* 82158394h case  175:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R5,0xFFFFA2D8);
		/* 82158394h case  175:*/		return 0x82158398;
		  /* 82158398h */ case  176:  		/* stw R4, <#[R6 - 392]> */
		/* 82158398h case  176:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R6 + 0xFFFFFE78) );
		/* 82158398h case  176:*/		return 0x8215839C;
		  /* 8215839Ch */ case  177:  		/* stw R3, <#[R6 - 380]> */
		/* 8215839Ch case  177:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R6 + 0xFFFFFE84) );
		/* 8215839Ch case  177:*/		return 0x821583A0;
		  /* 821583A0h */ case  178:  		/* lis R4, -32255 */
		/* 821583A0h case  178:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 821583A0h case  178:*/		return 0x821583A4;
		  /* 821583A4h */ case  179:  		/* stw R31, <#[R6 - 376]> */
		/* 821583A4h case  179:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R6 + 0xFFFFFE88) );
		/* 821583A4h case  179:*/		return 0x821583A8;
		  /* 821583A8h */ case  180:  		/* lis R3, -32252 */
		/* 821583A8h case  180:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 821583A8h case  180:*/		return 0x821583AC;
		  /* 821583ACh */ case  181:  		/* lis R31, -32252 */
		/* 821583ACh case  181:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8204);
		/* 821583ACh case  181:*/		return 0x821583B0;
		  /* 821583B0h */ case  182:  		/* stw R7, <#[R6 - 384]> */
		/* 821583B0h case  182:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0xFFFFFE80) );
		/* 821583B0h case  182:*/		return 0x821583B4;
		  /* 821583B4h */ case  183:  		/* addi R7, R4, 13480 */
		/* 821583B4h case  183:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R4,0x34A8);
		/* 821583B4h case  183:*/		return 0x821583B8;
		  /* 821583B8h */ case  184:  		/* stw R10, <#[R6 - 436]> */
		/* 821583B8h case  184:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE4C) );
		/* 821583B8h case  184:*/		return 0x821583BC;
		  /* 821583BCh */ case  185:  		/* addi R4, R31, -24216 */
		/* 821583BCh case  185:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0xFFFFA168);
		/* 821583BCh case  185:*/		return 0x821583C0;
		  /* 821583C0h */ case  186:  		/* stw R10, <#[R6 - 424]> */
		/* 821583C0h case  186:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE58) );
		/* 821583C0h case  186:*/		return 0x821583C4;
		  /* 821583C4h */ case  187:  		/* stw R10, <#[R6 - 412]> */
		/* 821583C4h case  187:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0xFFFFFE64) );
		/* 821583C4h case  187:*/		return 0x821583C8;
		  /* 821583C8h */ case  188:  		/* lis R10, -32252 */
		/* 821583C8h case  188:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821583C8h case  188:*/		return 0x821583CC;
		  /* 821583CCh */ case  189:  		/* stw R11, <#[R6 - 440]> */
		/* 821583CCh case  189:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0xFFFFFE48) );
		/* 821583CCh case  189:*/		return 0x821583D0;
		  /* 821583D0h */ case  190:  		/* lis R14, -32252 */
		/* 821583D0h case  190:*/		cpu::op::lis<0>(regs,&regs.R14,0xFFFF8204);
		/* 821583D0h case  190:*/		return 0x821583D4;
		  /* 821583D4h */ case  191:  		/* stw R11, <#[R6 - 428]> */
		/* 821583D4h case  191:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0xFFFFFE54) );
		/* 821583D4h case  191:*/		return 0x821583D8;
		  /* 821583D8h */ case  192:  		/* stw R11, <#[R6 - 416]> */
		/* 821583D8h case  192:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0xFFFFFE60) );
		/* 821583D8h case  192:*/		return 0x821583DC;
		  /* 821583DCh */ case  193:  		/* stw R29, <#[R6 - 368]> */
		/* 821583DCh case  193:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R6 + 0xFFFFFE90) );
		/* 821583DCh case  193:*/		return 0x821583E0;
		  /* 821583E0h */ case  194:  		/* lis R29, -32252 */
		/* 821583E0h case  194:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8204);
		/* 821583E0h case  194:*/		return 0x821583E4;
		  /* 821583E4h */ case  195:  		/* stw R9, <#[R6 - 432]> */
		/* 821583E4h case  195:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE50) );
		/* 821583E4h case  195:*/		return 0x821583E8;
		  /* 821583E8h */ case  196:  		/* stw R9, <#[R6 - 420]> */
		/* 821583E8h case  196:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE5C) );
		/* 821583E8h case  196:*/		return 0x821583EC;
		  /* 821583ECh */ case  197:  		/* stw R9, <#[R6 - 408]> */
		/* 821583ECh case  197:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0xFFFFFE68) );
		/* 821583ECh case  197:*/		return 0x821583F0;
		  /* 821583F0h */ case  198:  		/* lis R9, -32252 */
		/* 821583F0h case  198:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821583F0h case  198:*/		return 0x821583F4;
		  /* 821583F4h */ case  199:  		/* stw R28, <#[R6 - 364]> */
		/* 821583F4h case  199:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + 0xFFFFFE94) );
		/* 821583F4h case  199:*/		return 0x821583F8;
		  /* 821583F8h */ case  200:  		/* lis R28, -32252 */
		/* 821583F8h case  200:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 821583F8h case  200:*/		return 0x821583FC;
		  /* 821583FCh */ case  201:  		/* lwz R5, <#[R1 - 192]> */
		/* 821583FCh case  201:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 821583FCh case  201:*/		return 0x82158400;
		  /* 82158400h */ case  202:  		/* stw R27, <#[R6 - 360]> */
		/* 82158400h case  202:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R6 + 0xFFFFFE98) );
		/* 82158400h case  202:*/		return 0x82158404;
		  /* 82158404h */ case  203:  		/* lis R27, -32252 */
		/* 82158404h case  203:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 82158404h case  203:*/		return 0x82158408;
		  /* 82158408h */ case  204:  		/* lwz R31, <#[R1 - 184]> */
		/* 82158408h case  204:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFF48) );
		/* 82158408h case  204:*/		return 0x8215840C;
		  /* 8215840Ch */ case  205:  		/* stw R26, <#[R6 - 356]> */
		/* 8215840Ch case  205:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R6 + 0xFFFFFE9C) );
		/* 8215840Ch case  205:*/		return 0x82158410;
		  /* 82158410h */ case  206:  		/* lis R26, -32252 */
		/* 82158410h case  206:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8204);
		/* 82158410h case  206:*/		return 0x82158414;
		  /* 82158414h */ case  207:  		/* stw R25, <#[R6 - 352]> */
		/* 82158414h case  207:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R6 + 0xFFFFFEA0) );
		/* 82158414h case  207:*/		return 0x82158418;
		  /* 82158418h */ case  208:  		/* lis R6, -32255 */
		/* 82158418h case  208:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 82158418h case  208:*/		return 0x8215841C;
		  /* 8215841Ch */ case  209:  		/* stw R11, <#[R5 - 404]> */
		/* 8215841Ch case  209:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0xFFFFFE6C) );
		/* 8215841Ch case  209:*/		return 0x82158420;
		  /* 82158420h */ case  210:  		/* lis R25, -32252 */
		/* 82158420h case  210:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8204);
		/* 82158420h case  210:*/		return 0x82158424;
		  /* 82158424h */ case  211:  		/* stw R24, <#[R5 - 348]> */
		/* 82158424h case  211:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R5 + 0xFFFFFEA4) );
		/* 82158424h case  211:*/		return 0x82158428;
		  /* 82158428h */ case  212:  		/* stw R5, <#[R1 - 192]> */
		/* 82158428h case  212:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158428h case  212:*/		return 0x8215842C;
		  /* 8215842Ch */ case  213:  		/* addi R5, R3, -24204 */
		/* 8215842Ch case  213:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0xFFFFA174);
		/* 8215842Ch case  213:*/		return 0x82158430;
		  /* 82158430h */ case  214:  		/* lwz R3, <#[R1 - 188]> */
		/* 82158430h case  214:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 82158430h case  214:*/		return 0x82158434;
		  /* 82158434h */ case  215:  		/* lwz R11, <#[R1 - 192]> */
		/* 82158434h case  215:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFF40) );
		/* 82158434h case  215:*/		return 0x82158438;
		  /* 82158438h */ case  216:  		/* stw R11, <#[R1 - 188]> */
		/* 82158438h case  216:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 82158438h case  216:*/		return 0x8215843C;
		  /* 8215843Ch */ case  217:  		/* stw R23, <#[R11 - 344]> */
		/* 8215843Ch case  217:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0xFFFFFEA8) );
		/* 8215843Ch case  217:*/		return 0x82158440;
		  /* 82158440h */ case  218:  		/* stw R22, <#[R11 - 336]> */
		/* 82158440h case  218:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0xFFFFFEB0) );
		/* 82158440h case  218:*/		return 0x82158444;
		  /* 82158444h */ case  219:  		/* addi R22, R16, -24316 */
		/* 82158444h case  219:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R16,0xFFFFA104);
		/* 82158444h case  219:*/		return 0x82158448;
		  /* 82158448h */ case  220:  		/* stw R21, <#[R11 - 340]> */
		/* 82158448h case  220:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0xFFFFFEAC) );
		/* 82158448h case  220:*/		return 0x8215844C;
		  /* 8215844Ch */ case  221:  		/* stw R20, <#[R11 - 324]> */
		/* 8215844Ch case  221:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0xFFFFFEBC) );
		/* 8215844Ch case  221:*/		return 0x82158450;
		  /* 82158450h */ case  222:  		/* stw R19, <#[R11 - 332]> */
		/* 82158450h case  222:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0xFFFFFEB4) );
		/* 82158450h case  222:*/		return 0x82158454;
		  /* 82158454h */ case  223:  		/* addi R11, R10, -23860 */
		/* 82158454h case  223:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFA2CC);
		/* 82158454h case  223:*/		return 0x82158458;
		  /* 82158458h */ case  224:  		/* lwz R10, <#[R1 - 188]> */
		/* 82158458h case  224:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 82158458h case  224:*/		return 0x8215845C;
		  /* 8215845Ch */ case  225:  		/* stw R31, <#[R10 - 312]> */
		/* 8215845Ch case  225:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + 0xFFFFFEC8) );
		/* 8215845Ch case  225:*/		return 0x82158460;
		  /* 82158460h */ case  226:  		/* addi R31, R29, -24240 */
		/* 82158460h case  226:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0xFFFFA150);
		/* 82158460h case  226:*/		return 0x82158464;
		  /* 82158464h */ case  227:  		/* stw R3, <#[R1 - 188]> */
		/* 82158464h case  227:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 82158464h case  227:*/		return 0x82158468;
		  /* 82158468h */ case  228:  		/* addi R3, R30, -24228 */
		/* 82158468h case  228:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0xFFFFA15C);
		/* 82158468h case  228:*/		return 0x8215846C;
		  /* 8215846Ch */ case  229:  		/* stw R18, <#[R10 - 328]> */
		/* 8215846Ch case  229:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R10 + 0xFFFFFEB8) );
		/* 8215846Ch case  229:*/		return 0x82158470;
		  /* 82158470h */ case  230:  		/* addi R30, R28, -24256 */
		/* 82158470h case  230:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0xFFFFA140);
		/* 82158470h case  230:*/		return 0x82158474;
		  /* 82158474h */ case  231:  		/* stw R10, <#[R1 - 184]> */
		/* 82158474h case  231:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFF48) );
		/* 82158474h case  231:*/		return 0x82158478;
		  /* 82158478h */ case  232:  		/* addi R10, R9, -23868 */
		/* 82158478h case  232:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0xFFFFA2C4);
		/* 82158478h case  232:*/		return 0x8215847C;
		  /* 8215847Ch */ case  233:  		/* addi R29, R27, -24272 */
		/* 8215847Ch case  233:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0xFFFFA130);
		/* 8215847Ch case  233:*/		return 0x82158480;
		  /* 82158480h */ case  234:  		/* lwz R24, <#[R1 - 172]> */
		/* 82158480h case  234:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0xFFFFFF54) );
		/* 82158480h case  234:*/		return 0x82158484;
		  /* 82158484h */ case  235:  		/* addi R9, R6, 13280 */
		/* 82158484h case  235:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0x33E0);
		/* 82158484h case  235:*/		return 0x82158488;
		  /* 82158488h */ case  236:  		/* lwz R23, <#[R1 - 168]> */
		/* 82158488h case  236:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158488h case  236:*/		return 0x8215848C;
		  /* 8215848Ch */ case  237:  		/* addi R28, R26, -24288 */
		/* 8215848Ch case  237:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R26,0xFFFFA120);
		/* 8215848Ch case  237:*/		return 0x82158490;
		  /* 82158490h */ case  238:  		/* lwz R26, <#[R1 - 180]> */
		/* 82158490h case  238:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0xFFFFFF4C) );
		/* 82158490h case  238:*/		return 0x82158494;
		  /* 82158494h */ case  239:  		/* addi R27, R25, -24308 */
		/* 82158494h case  239:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R25,0xFFFFA10C);
		/* 82158494h case  239:*/		return 0x82158498;
		  /* 82158498h */ case  240:  		/* lwz R25, <#[R1 - 176]> */
		/* 82158498h case  240:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 82158498h case  240:*/		return 0x8215849C;
		  /* 8215849Ch */ case  241:  		/* addi R6, R17, -24192 */
		/* 8215849Ch case  241:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R17,0xFFFFA180);
		/* 8215849Ch case  241:*/		return 0x821584A0;
		  /* 821584A0h */ case  242:  		/* lwz R19, <#[R1 - 184]> */
		/* 821584A0h case  242:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0xFFFFFF48) );
		/* 821584A0h case  242:*/		return 0x821584A4;
		  /* 821584A4h */ case  243:  		/* lis R18, -32217 */
		/* 821584A4h case  243:*/		cpu::op::lis<0>(regs,&regs.R18,0xFFFF8227);
		/* 821584A4h case  243:*/		return 0x821584A8;
		  /* 821584A8h */ case  244:  		/* addi R21, R15, -21012 */
		/* 821584A8h case  244:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R15,0xFFFFADEC);
		/* 821584A8h case  244:*/		return 0x821584AC;
		  /* 821584ACh */ case  245:  		/* addi R17, R18, 20624 */
		/* 821584ACh case  245:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R18,0x5090);
		/* 821584ACh case  245:*/		return 0x821584B0;
		  /* 821584B0h */ case  246:  		/* addi R20, R14, -24340 */
		/* 821584B0h case  246:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R14,0xFFFFA0EC);
		/* 821584B0h case  246:*/		return 0x821584B4;
		  /* 821584B4h */ case  247:  		/* stw R19, <#[R1 - 168]> */
		/* 821584B4h case  247:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821584B4h case  247:*/		return 0x821584B8;
		  /* 821584B8h */ case  248:  		/* stw R11, <#[R19 - 320]> */
		/* 821584B8h case  248:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0xFFFFFEC0) );
		/* 821584B8h case  248:*/		return 0x821584BC;
		  /* 821584BCh */ case  249:  		/* lis R11, -32252 */
		/* 821584BCh case  249:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821584BCh case  249:*/		return 0x821584C0;
		  /* 821584C0h */ case  250:  		/* stw R8, <#[R19 - 304]> */
		/* 821584C0h case  250:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R19 + 0xFFFFFED0) );
		/* 821584C0h case  250:*/		return 0x821584C4;
		  /* 821584C4h */ case  251:  		/* lis R8, -32252 */
		/* 821584C4h case  251:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 821584C4h case  251:*/		return 0x821584C8;
		  /* 821584C8h */ case  252:  		/* stw R7, <#[R19 - 300]> */
		/* 821584C8h case  252:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R19 + 0xFFFFFED4) );
		/* 821584C8h case  252:*/		return 0x821584CC;
		  /* 821584CCh */ case  253:  		/* addi R11, R11, -24364 */
		/* 821584CCh case  253:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFA0D4);
		/* 821584CCh case  253:*/		return 0x821584D0;
	}
	return 0x821584D0;
} // Block from 821580D8h-821584D0h (254 instructions)

//////////////////////////////////////////////////////
// Block at 821584D0h
// Function '?bfx@XGRAPHICS@@YAKPBEKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821584D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821584D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821584D0);
		  /* 821584D0h */ case    0:  		/* stw R10, <#[R19 - 316]> */
		/* 821584D0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0xFFFFFEC4) );
		/* 821584D0h case    0:*/		return 0x821584D4;
		  /* 821584D4h */ case    1:  		/* lis R10, -32252 */
		/* 821584D4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821584D4h case    1:*/		return 0x821584D8;
		  /* 821584D8h */ case    2:  		/* stw R9, <#[R19 - 308]> */
		/* 821584D8h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R19 + 0xFFFFFECC) );
		/* 821584D8h case    2:*/		return 0x821584DC;
		  /* 821584DCh */ case    3:  		/* lis R9, -32252 */
		/* 821584DCh case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821584DCh case    3:*/		return 0x821584E0;
		  /* 821584E0h */ case    4:  		/* lis R7, -32255 */
		/* 821584E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 821584E0h case    4:*/		return 0x821584E4;
		  /* 821584E4h */ case    5:  		/* stw R11, <#[R19 - 232]> */
		/* 821584E4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0xFFFFFF18) );
		/* 821584E4h case    5:*/		return 0x821584E8;
		  /* 821584E8h */ case    6:  		/* addi R8, R8, -24400 */
		/* 821584E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFA0B0);
		/* 821584E8h case    6:*/		return 0x821584EC;
		  /* 821584ECh */ case    7:  		/* lwz R11, <#[R1 - 188]> */
		/* 821584ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFF44) );
		/* 821584ECh case    7:*/		return 0x821584F0;
		  /* 821584F0h */ case    8:  		/* addi R7, R7, -21016 */
		/* 821584F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFADE8);
		/* 821584F0h case    8:*/		return 0x821584F4;
		  /* 821584F4h */ case    9:  		/* stw R6, <#[R19 - 296]> */
		/* 821584F4h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R19 + 0xFFFFFED8) );
		/* 821584F4h case    9:*/		return 0x821584F8;
		  /* 821584F8h */ case   10:  		/* addi R10, R10, -24376 */
		/* 821584F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFA0C8);
		/* 821584F8h case   10:*/		return 0x821584FC;
		  /* 821584FCh */ case   11:  		/* stw R5, <#[R19 - 292]> */
		/* 821584FCh case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R19 + 0xFFFFFEDC) );
		/* 821584FCh case   11:*/		return 0x82158500;
		  /* 82158500h */ case   12:  		/* addi R9, R9, -24388 */
		/* 82158500h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFA0BC);
		/* 82158500h case   12:*/		return 0x82158504;
		  /* 82158504h */ case   13:  		/* stw R4, <#[R19 - 288]> */
		/* 82158504h case   13:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R19 + 0xFFFFFEE0) );
		/* 82158504h case   13:*/		return 0x82158508;
		  /* 82158508h */ case   14:  		/* stw R3, <#[R19 - 284]> */
		/* 82158508h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0xFFFFFEE4) );
		/* 82158508h case   14:*/		return 0x8215850C;
		  /* 8215850Ch */ case   15:  		/* lis R6, -32255 */
		/* 8215850Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 8215850Ch case   15:*/		return 0x82158510;
		  /* 82158510h */ case   16:  		/* stw R8, <#[R19 - 228]> */
		/* 82158510h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R19 + 0xFFFFFF1C) );
		/* 82158510h case   16:*/		return 0x82158514;
		  /* 82158514h */ case   17:  		/* li R5, 1 */
		/* 82158514h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82158514h case   17:*/		return 0x82158518;
		  /* 82158518h */ case   18:  		/* stw R7, <#[R19 - 208]> */
		/* 82158518h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R19 + 0xFFFFFF30) );
		/* 82158518h case   18:*/		return 0x8215851C;
		  /* 8215851Ch */ case   19:  		/* addi R6, R6, -21020 */
		/* 8215851Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFADE4);
		/* 8215851Ch case   19:*/		return 0x82158520;
		  /* 82158520h */ case   20:  		/* stw R31, <#[R19 - 280]> */
		/* 82158520h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0xFFFFFEE8) );
		/* 82158520h case   20:*/		return 0x82158524;
		  /* 82158524h */ case   21:  		/* li R4, 1 */
		/* 82158524h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82158524h case   21:*/		return 0x82158528;
	}
	return 0x82158528;
} // Block from 821584D0h-82158528h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82158528h
// Function '?bfi@XGRAPHICS@@YAXPAEKKJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158528);
		  /* 82158528h */ case    0:  		/* stw R30, <#[R19 - 276]> */
		/* 82158528h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R19 + 0xFFFFFEEC) );
		/* 82158528h case    0:*/		return 0x8215852C;
		  /* 8215852Ch */ case    1:  		/* li R3, 1 */
		/* 8215852Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8215852Ch case    1:*/		return 0x82158530;
		  /* 82158530h */ case    2:  		/* stw R29, <#[R19 - 272]> */
		/* 82158530h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R19 + 0xFFFFFEF0) );
		/* 82158530h case    2:*/		return 0x82158534;
		  /* 82158534h */ case    3:  		/* li R31, 1 */
		/* 82158534h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82158534h case    3:*/		return 0x82158538;
		  /* 82158538h */ case    4:  		/* stw R28, <#[R19 - 268]> */
		/* 82158538h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R19 + 0xFFFFFEF4) );
		/* 82158538h case    4:*/		return 0x8215853C;
		  /* 8215853Ch */ case    5:  		/* li R30, 1 */
		/* 8215853Ch case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8215853Ch case    5:*/		return 0x82158540;
		  /* 82158540h */ case    6:  		/* stw R27, <#[R19 - 264]> */
		/* 82158540h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R19 + 0xFFFFFEF8) );
		/* 82158540h case    6:*/		return 0x82158544;
		  /* 82158544h */ case    7:  		/* li R29, 1 */
		/* 82158544h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82158544h case    7:*/		return 0x82158548;
		  /* 82158548h */ case    8:  		/* stw R26, <#[R19 - 260]> */
		/* 82158548h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R19 + 0xFFFFFEFC) );
		/* 82158548h case    8:*/		return 0x8215854C;
		  /* 8215854Ch */ case    9:  		/* li R28, 1 */
		/* 8215854Ch case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8215854Ch case    9:*/		return 0x82158550;
		  /* 82158550h */ case   10:  		/* stw R10, <#[R19 - 220]> */
		/* 82158550h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0xFFFFFF24) );
		/* 82158550h case   10:*/		return 0x82158554;
		  /* 82158554h */ case   11:  		/* li R27, 1 */
		/* 82158554h case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82158554h case   11:*/		return 0x82158558;
		  /* 82158558h */ case   12:  		/* stw R9, <#[R19 - 212]> */
		/* 82158558h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R19 + 0xFFFFFF2C) );
		/* 82158558h case   12:*/		return 0x8215855C;
		  /* 8215855Ch */ case   13:  		/* addi R19, R11, -24352 */
		/* 8215855Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFA0E0);
		/* 8215855Ch case   13:*/		return 0x82158560;
		  /* 82158560h */ case   14:  		/* lwz R11, <#[R1 - 168]> */
		/* 82158560h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158560h case   14:*/		return 0x82158564;
		  /* 82158564h */ case   15:  		/* li R26, 1 */
		/* 82158564h case   15:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 82158564h case   15:*/		return 0x82158568;
		  /* 82158568h */ case   16:  		/* stw R5, <#[R18 + 20624]> */
		/* 82158568h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R18 + 0x00005090) );
		/* 82158568h case   16:*/		return 0x8215856C;
		  /* 8215856Ch */ case   17:  		/* li R10, 1 */
		/* 8215856Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8215856Ch case   17:*/		return 0x82158570;
		  /* 82158570h */ case   18:  		/* stw R4, <#[R17 + 4]> */
		/* 82158570h case   18:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R17 + 0x00000004) );
		/* 82158570h case   18:*/		return 0x82158574;
		  /* 82158574h */ case   19:  		/* li R9, 1 */
		/* 82158574h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82158574h case   19:*/		return 0x82158578;
		  /* 82158578h */ case   20:  		/* stw R3, <#[R17 + 8]> */
		/* 82158578h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x00000008) );
		/* 82158578h case   20:*/		return 0x8215857C;
		  /* 8215857Ch */ case   21:  		/* stw R31, <#[R17 + 12]> */
		/* 8215857Ch case   21:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R17 + 0x0000000C) );
		/* 8215857Ch case   21:*/		return 0x82158580;
		  /* 82158580h */ case   22:  		/* stw R11, <#[R1 - 168]> */
		/* 82158580h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158580h case   22:*/		return 0x82158584;
		  /* 82158584h */ case   23:  		/* lwz R8, <#[R1 - 168]> */
		/* 82158584h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158584h case   23:*/		return 0x82158588;
		  /* 82158588h */ case   24:  		/* stw R8, <#[R1 - 168]> */
		/* 82158588h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158588h case   24:*/		return 0x8215858C;
		  /* 8215858Ch */ case   25:  		/* lwz R7, <#[R1 - 168]> */
		/* 8215858Ch case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8215858Ch case   25:*/		return 0x82158590;
		  /* 82158590h */ case   26:  		/* stw R7, <#[R1 - 168]> */
		/* 82158590h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158590h case   26:*/		return 0x82158594;
		  /* 82158594h */ case   27:  		/* stw R6, <#[R11 - 204]> */
		/* 82158594h case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0xFFFFFF34) );
		/* 82158594h case   27:*/		return 0x82158598;
		  /* 82158598h */ case   28:  		/* li R11, 1 */
		/* 82158598h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82158598h case   28:*/		return 0x8215859C;
		  /* 8215859Ch */ case   29:  		/* lwz R6, <#[R1 - 168]> */
		/* 8215859Ch case   29:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8215859Ch case   29:*/		return 0x821585A0;
		  /* 821585A0h */ case   30:  		/* stw R25, <#[R8 - 256]> */
		/* 821585A0h case   30:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R8 + 0xFFFFFF00) );
		/* 821585A0h case   30:*/		return 0x821585A4;
		  /* 821585A4h */ case   31:  		/* li R8, 1 */
		/* 821585A4h case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821585A4h case   31:*/		return 0x821585A8;
		  /* 821585A8h */ case   32:  		/* stw R24, <#[R7 - 252]> */
		/* 821585A8h case   32:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R7 + 0xFFFFFF04) );
		/* 821585A8h case   32:*/		return 0x821585AC;
		  /* 821585ACh */ case   33:  		/* li R7, 1 */
		/* 821585ACh case   33:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821585ACh case   33:*/		return 0x821585B0;
		  /* 821585B0h */ case   34:  		/* stw R30, <#[R17 + 16]> */
		/* 821585B0h case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R17 + 0x00000010) );
		/* 821585B0h case   34:*/		return 0x821585B4;
		  /* 821585B4h */ case   35:  		/* stw R6, <#[R1 - 168]> */
		/* 821585B4h case   35:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585B4h case   35:*/		return 0x821585B8;
		  /* 821585B8h */ case   36:  		/* lwz R5, <#[R1 - 168]> */
		/* 821585B8h case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585B8h case   36:*/		return 0x821585BC;
		  /* 821585BCh */ case   37:  		/* stw R5, <#[R1 - 168]> */
		/* 821585BCh case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585BCh case   37:*/		return 0x821585C0;
		  /* 821585C0h */ case   38:  		/* lwz R4, <#[R1 - 168]> */
		/* 821585C0h case   38:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585C0h case   38:*/		return 0x821585C4;
		  /* 821585C4h */ case   39:  		/* stw R4, <#[R1 - 168]> */
		/* 821585C4h case   39:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585C4h case   39:*/		return 0x821585C8;
	}
	return 0x821585C8;
} // Block from 82158528h-821585C8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821585C8h
// Function 'SSMDebugPrint'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821585C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821585C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821585C8);
		  /* 821585C8h */ case    0:  		/* stw R23, <#[R6 - 248]> */
		/* 821585C8h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R6 + 0xFFFFFF08) );
		/* 821585C8h case    0:*/		return 0x821585CC;
		  /* 821585CCh */ case    1:  		/* li R6, 1 */
		/* 821585CCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821585CCh case    1:*/		return 0x821585D0;
		  /* 821585D0h */ case    2:  		/* stw R22, <#[R5 - 244]> */
		/* 821585D0h case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R5 + 0xFFFFFF0C) );
		/* 821585D0h case    2:*/		return 0x821585D4;
		  /* 821585D4h */ case    3:  		/* li R5, 1 */
		/* 821585D4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821585D4h case    3:*/		return 0x821585D8;
		  /* 821585D8h */ case    4:  		/* stw R21, <#[R4 - 240]> */
		/* 821585D8h case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R4 + 0xFFFFFF10) );
		/* 821585D8h case    4:*/		return 0x821585DC;
		  /* 821585DCh */ case    5:  		/* li R4, 1 */
		/* 821585DCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821585DCh case    5:*/		return 0x821585E0;
		  /* 821585E0h */ case    6:  		/* lwz R3, <#[R1 - 168]> */
		/* 821585E0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585E0h case    6:*/		return 0x821585E4;
		  /* 821585E4h */ case    7:  		/* stw R3, <#[R1 - 168]> */
		/* 821585E4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821585E4h case    7:*/		return 0x821585E8;
		  /* 821585E8h */ case    8:  		/* stw R10, <#[R17 + 40]> */
		/* 821585E8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000028) );
		/* 821585E8h case    8:*/		return 0x821585EC;
		  /* 821585ECh */ case    9:  		/* stw R10, <#[R17 + 80]> */
		/* 821585ECh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000050) );
		/* 821585ECh case    9:*/		return 0x821585F0;
		  /* 821585F0h */ case   10:  		/* stw R10, <#[R17 + 96]> */
		/* 821585F0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000060) );
		/* 821585F0h case   10:*/		return 0x821585F4;
		  /* 821585F4h */ case   11:  		/* stw R10, <#[R17 + 108]> */
		/* 821585F4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x0000006C) );
		/* 821585F4h case   11:*/		return 0x821585F8;
		  /* 821585F8h */ case   12:  		/* stw R10, <#[R17 + 120]> */
		/* 821585F8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000078) );
		/* 821585F8h case   12:*/		return 0x821585FC;
		  /* 821585FCh */ case   13:  		/* li R10, 0 */
		/* 821585FCh case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821585FCh case   13:*/		return 0x82158600;
		  /* 82158600h */ case   14:  		/* stw R9, <#[R17 + 44]> */
		/* 82158600h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x0000002C) );
		/* 82158600h case   14:*/		return 0x82158604;
		  /* 82158604h */ case   15:  		/* stw R10, <#[R17 + 132]> */
		/* 82158604h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000084) );
		/* 82158604h case   15:*/		return 0x82158608;
		  /* 82158608h */ case   16:  		/* li R10, 1 */
		/* 82158608h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82158608h case   16:*/		return 0x8215860C;
		  /* 8215860Ch */ case   17:  		/* stw R9, <#[R17 + 84]> */
		/* 8215860Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x00000054) );
		/* 8215860Ch case   17:*/		return 0x82158610;
		  /* 82158610h */ case   18:  		/* stw R10, <#[R17 + 144]> */
		/* 82158610h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x00000090) );
		/* 82158610h case   18:*/		return 0x82158614;
		  /* 82158614h */ case   19:  		/* stw R10, <#[R17 + 156]> */
		/* 82158614h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x0000009C) );
		/* 82158614h case   19:*/		return 0x82158618;
		  /* 82158618h */ case   20:  		/* li R10, 2 */
		/* 82158618h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82158618h case   20:*/		return 0x8215861C;
		  /* 8215861Ch */ case   21:  		/* stw R9, <#[R17 + 100]> */
		/* 8215861Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x00000064) );
		/* 8215861Ch case   21:*/		return 0x82158620;
		  /* 82158620h */ case   22:  		/* stw R10, <#[R17 + 184]> */
		/* 82158620h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x000000B8) );
		/* 82158620h case   22:*/		return 0x82158624;
		  /* 82158624h */ case   23:  		/* stw R10, <#[R17 + 188]> */
		/* 82158624h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x000000BC) );
		/* 82158624h case   23:*/		return 0x82158628;
		  /* 82158628h */ case   24:  		/* li R10, 1 */
		/* 82158628h case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82158628h case   24:*/		return 0x8215862C;
		  /* 8215862Ch */ case   25:  		/* stw R9, <#[R17 + 112]> */
		/* 8215862Ch case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x00000070) );
		/* 8215862Ch case   25:*/		return 0x82158630;
		  /* 82158630h */ case   26:  		/* stw R9, <#[R17 + 124]> */
		/* 82158630h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x0000007C) );
		/* 82158630h case   26:*/		return 0x82158634;
		  /* 82158634h */ case   27:  		/* stw R9, <#[R17 + 136]> */
		/* 82158634h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x00000088) );
		/* 82158634h case   27:*/		return 0x82158638;
		  /* 82158638h */ case   28:  		/* stw R9, <#[R17 + 148]> */
		/* 82158638h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x00000094) );
		/* 82158638h case   28:*/		return 0x8215863C;
		  /* 8215863Ch */ case   29:  		/* stw R9, <#[R17 + 160]> */
		/* 8215863Ch case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x000000A0) );
		/* 8215863Ch case   29:*/		return 0x82158640;
		  /* 82158640h */ case   30:  		/* li R9, 2 */
		/* 82158640h case   30:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82158640h case   30:*/		return 0x82158644;
		  /* 82158644h */ case   31:  		/* stw R10, <#[R17 + 196]> */
		/* 82158644h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R17 + 0x000000C4) );
		/* 82158644h case   31:*/		return 0x82158648;
		  /* 82158648h */ case   32:  		/* lwz R31, <#[R1 - 168]> */
		/* 82158648h case   32:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 82158648h case   32:*/		return 0x8215864C;
		  /* 8215864Ch */ case   33:  		/* lwz R10, <#[R1 - 164]> */
		/* 8215864Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFF5C) );
		/* 8215864Ch case   33:*/		return 0x82158650;
		  /* 82158650h */ case   34:  		/* stw R11, <#[R17 + 36]> */
		/* 82158650h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000024) );
		/* 82158650h case   34:*/		return 0x82158654;
		  /* 82158654h */ case   35:  		/* stw R11, <#[R17 + 88]> */
		/* 82158654h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000058) );
		/* 82158654h case   35:*/		return 0x82158658;
		  /* 82158658h */ case   36:  		/* stw R11, <#[R17 + 92]> */
		/* 82158658h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x0000005C) );
		/* 82158658h case   36:*/		return 0x8215865C;
		  /* 8215865Ch */ case   37:  		/* stw R31, <#[R1 - 168]> */
		/* 8215865Ch case   37:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8215865Ch case   37:*/		return 0x82158660;
		  /* 82158660h */ case   38:  		/* stw R11, <#[R17 + 104]> */
		/* 82158660h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000068) );
		/* 82158660h case   38:*/		return 0x82158664;
		  /* 82158664h */ case   39:  		/* stw R11, <#[R17 + 116]> */
		/* 82158664h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000074) );
		/* 82158664h case   39:*/		return 0x82158668;
		  /* 82158668h */ case   40:  		/* stw R11, <#[R17 + 128]> */
		/* 82158668h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000080) );
		/* 82158668h case   40:*/		return 0x8215866C;
		  /* 8215866Ch */ case   41:  		/* stw R11, <#[R17 + 140]> */
		/* 8215866Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x0000008C) );
		/* 8215866Ch case   41:*/		return 0x82158670;
		  /* 82158670h */ case   42:  		/* stw R11, <#[R17 + 152]> */
		/* 82158670h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000098) );
		/* 82158670h case   42:*/		return 0x82158674;
		  /* 82158674h */ case   43:  		/* li R11, 2 */
		/* 82158674h case   43:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82158674h case   43:*/		return 0x82158678;
		  /* 82158678h */ case   44:  		/* stw R9, <#[R17 + 168]> */
		/* 82158678h case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x000000A8) );
		/* 82158678h case   44:*/		return 0x8215867C;
		  /* 8215867Ch */ case   45:  		/* stw R9, <#[R17 + 172]> */
		/* 8215867Ch case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R17 + 0x000000AC) );
		/* 8215867Ch case   45:*/		return 0x82158680;
		  /* 82158680h */ case   46:  		/* li R9, 1 */
		/* 82158680h case   46:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82158680h case   46:*/		return 0x82158684;
		  /* 82158684h */ case   47:  		/* stw R8, <#[R17 + 48]> */
		/* 82158684h case   47:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R17 + 0x00000030) );
		/* 82158684h case   47:*/		return 0x82158688;
		  /* 82158688h */ case   48:  		/* stw R20, <#[R3 - 224]> */
		/* 82158688h case   48:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R3 + 0xFFFFFF20) );
		/* 82158688h case   48:*/		return 0x8215868C;
		  /* 8215868Ch */ case   49:  		/* li R3, 1 */
		/* 8215868Ch case   49:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8215868Ch case   49:*/		return 0x82158690;
		  /* 82158690h */ case   50:  		/* stw R19, <#[R31 - 216]> */
		/* 82158690h case   50:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0xFFFFFF28) );
		/* 82158690h case   50:*/		return 0x82158694;
		  /* 82158694h */ case   51:  		/* li R31, 1 */
		/* 82158694h case   51:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82158694h case   51:*/		return 0x82158698;
		  /* 82158698h */ case   52:  		/* stw R11, <#[R17 + 176]> */
		/* 82158698h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x000000B0) );
		/* 82158698h case   52:*/		return 0x8215869C;
		  /* 8215869Ch */ case   53:  		/* stw R11, <#[R17 + 180]> */
		/* 8215869Ch case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x000000B4) );
		/* 8215869Ch case   53:*/		return 0x821586A0;
		  /* 821586A0h */ case   54:  		/* li R11, 1 */
		/* 821586A0h case   54:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821586A0h case   54:*/		return 0x821586A4;
		  /* 821586A4h */ case   55:  		/* stw R9, <#[R10 + 20824]> */
		/* 821586A4h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00005158) );
		/* 821586A4h case   55:*/		return 0x821586A8;
		  /* 821586A8h */ case   56:  		/* li R10, 1 */
		/* 821586A8h case   56:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821586A8h case   56:*/		return 0x821586AC;
		  /* 821586ACh */ case   57:  		/* stw R29, <#[R17 + 20]> */
		/* 821586ACh case   57:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R17 + 0x00000014) );
		/* 821586ACh case   57:*/		return 0x821586B0;
		  /* 821586B0h */ case   58:  		/* stw R28, <#[R17 + 24]> */
		/* 821586B0h case   58:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R17 + 0x00000018) );
		/* 821586B0h case   58:*/		return 0x821586B4;
		  /* 821586B4h */ case   59:  		/* stw R27, <#[R17 + 28]> */
		/* 821586B4h case   59:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R17 + 0x0000001C) );
		/* 821586B4h case   59:*/		return 0x821586B8;
		  /* 821586B8h */ case   60:  		/* stw R26, <#[R17 + 32]> */
		/* 821586B8h case   60:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R17 + 0x00000020) );
		/* 821586B8h case   60:*/		return 0x821586BC;
		  /* 821586BCh */ case   61:  		/* stw R7, <#[R17 + 52]> */
		/* 821586BCh case   61:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R17 + 0x00000034) );
		/* 821586BCh case   61:*/		return 0x821586C0;
		  /* 821586C0h */ case   62:  		/* stw R6, <#[R17 + 56]> */
		/* 821586C0h case   62:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R17 + 0x00000038) );
		/* 821586C0h case   62:*/		return 0x821586C4;
		  /* 821586C4h */ case   63:  		/* lwz R8, <#[R1 - 168]> */
		/* 821586C4h case   63:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821586C4h case   63:*/		return 0x821586C8;
		  /* 821586C8h */ case   64:  		/* stw R5, <#[R17 + 64]> */
		/* 821586C8h case   64:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R17 + 0x00000040) );
		/* 821586C8h case   64:*/		return 0x821586CC;
		  /* 821586CCh */ case   65:  		/* stw R4, <#[R17 + 60]> */
		/* 821586CCh case   65:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R17 + 0x0000003C) );
		/* 821586CCh case   65:*/		return 0x821586D0;
		  /* 821586D0h */ case   66:  		/* stw R3, <#[R17 + 76]> */
		/* 821586D0h case   66:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x0000004C) );
		/* 821586D0h case   66:*/		return 0x821586D4;
		  /* 821586D4h */ case   67:  		/* stw R31, <#[R17 + 68]> */
		/* 821586D4h case   67:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R17 + 0x00000044) );
		/* 821586D4h case   67:*/		return 0x821586D8;
		  /* 821586D8h */ case   68:  		/* stw R30, <#[R17 + 72]> */
		/* 821586D8h case   68:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R17 + 0x00000048) );
		/* 821586D8h case   68:*/		return 0x821586DC;
		  /* 821586DCh */ case   69:  		/* stw R11, <#[R17 + 192]> */
		/* 821586DCh case   69:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x000000C0) );
		/* 821586DCh case   69:*/		return 0x821586E0;
		  /* 821586E0h */ case   70:  		/* stw R11, <#[R8 + 4]> */
		/* 821586E0h case   70:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821586E0h case   70:*/		return 0x821586E4;
		  /* 821586E4h */ case   71:  		/* stw R10, <#[R8 + 8]> */
		/* 821586E4h case   71:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 821586E4h case   71:*/		return 0x821586E8;
		  /* 821586E8h */ case   72:  		/* stw R9, <#[R8 + 12]> */
		/* 821586E8h case   72:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 821586E8h case   72:*/		return 0x821586EC;
		  /* 821586ECh */ case   73:  		/* stw R11, <#[R8 + 16]> */
		/* 821586ECh case   73:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 821586ECh case   73:*/		return 0x821586F0;
		  /* 821586F0h */ case   74:  		/* stw R10, <#[R8 + 20]> */
		/* 821586F0h case   74:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000014) );
		/* 821586F0h case   74:*/		return 0x821586F4;
		  /* 821586F4h */ case   75:  		/* stw R9, <#[R8 + 24]> */
		/* 821586F4h case   75:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000018) );
		/* 821586F4h case   75:*/		return 0x821586F8;
		  /* 821586F8h */ case   76:  		/* stw R11, <#[R8 + 28]> */
		/* 821586F8h case   76:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821586F8h case   76:*/		return 0x821586FC;
		  /* 821586FCh */ case   77:  		/* stw R10, <#[R8 + 32]> */
		/* 821586FCh case   77:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000020) );
		/* 821586FCh case   77:*/		return 0x82158700;
		  /* 82158700h */ case   78:  		/* stw R9, <#[R8 + 36]> */
		/* 82158700h case   78:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000024) );
		/* 82158700h case   78:*/		return 0x82158704;
		  /* 82158704h */ case   79:  		/* stw R11, <#[R8 + 40]> */
		/* 82158704h case   79:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000028) );
		/* 82158704h case   79:*/		return 0x82158708;
		  /* 82158708h */ case   80:  		/* stw R11, <#[R8 + 44]> */
		/* 82158708h case   80:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000002C) );
		/* 82158708h case   80:*/		return 0x8215870C;
		  /* 8215870Ch */ case   81:  		/* stw R10, <#[R8 + 48]> */
		/* 8215870Ch case   81:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000030) );
		/* 8215870Ch case   81:*/		return 0x82158710;
		  /* 82158710h */ case   82:  		/* stw R9, <#[R8 + 52]> */
		/* 82158710h case   82:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000034) );
		/* 82158710h case   82:*/		return 0x82158714;
		  /* 82158714h */ case   83:  		/* stw R11, <#[R8 + 56]> */
		/* 82158714h case   83:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000038) );
		/* 82158714h case   83:*/		return 0x82158718;
		  /* 82158718h */ case   84:  		/* stw R10, <#[R8 + 64]> */
		/* 82158718h case   84:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000040) );
		/* 82158718h case   84:*/		return 0x8215871C;
		  /* 8215871Ch */ case   85:  		/* stw R9, <#[R8 + 60]> */
		/* 8215871Ch case   85:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x0000003C) );
		/* 8215871Ch case   85:*/		return 0x82158720;
		  /* 82158720h */ case   86:  		/* stw R11, <#[R8 + 76]> */
		/* 82158720h case   86:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000004C) );
		/* 82158720h case   86:*/		return 0x82158724;
		  /* 82158724h */ case   87:  		/* stw R10, <#[R8 + 68]> */
		/* 82158724h case   87:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000044) );
		/* 82158724h case   87:*/		return 0x82158728;
		  /* 82158728h */ case   88:  		/* stw R9, <#[R8 + 72]> */
		/* 82158728h case   88:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000048) );
		/* 82158728h case   88:*/		return 0x8215872C;
		  /* 8215872Ch */ case   89:  		/* stw R11, <#[R8 + 88]> */
		/* 8215872Ch case   89:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000058) );
		/* 8215872Ch case   89:*/		return 0x82158730;
		  /* 82158730h */ case   90:  		/* stw R10, <#[R8 + 84]> */
		/* 82158730h case   90:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000054) );
		/* 82158730h case   90:*/		return 0x82158734;
		  /* 82158734h */ case   91:  		/* stw R9, <#[R8 + 80]> */
		/* 82158734h case   91:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000050) );
		/* 82158734h case   91:*/		return 0x82158738;
		  /* 82158738h */ case   92:  		/* stw R11, <#[R8 + 92]> */
		/* 82158738h case   92:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000005C) );
		/* 82158738h case   92:*/		return 0x8215873C;
		  /* 8215873Ch */ case   93:  		/* stw R10, <#[R8 + 96]> */
		/* 8215873Ch case   93:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000060) );
		/* 8215873Ch case   93:*/		return 0x82158740;
		  /* 82158740h */ case   94:  		/* stw R9, <#[R8 + 100]> */
		/* 82158740h case   94:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000064) );
		/* 82158740h case   94:*/		return 0x82158744;
		  /* 82158744h */ case   95:  		/* stw R11, <#[R8 + 104]> */
		/* 82158744h case   95:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000068) );
		/* 82158744h case   95:*/		return 0x82158748;
		  /* 82158748h */ case   96:  		/* stw R10, <#[R8 + 108]> */
		/* 82158748h case   96:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x0000006C) );
		/* 82158748h case   96:*/		return 0x8215874C;
		  /* 8215874Ch */ case   97:  		/* stw R9, <#[R8 + 112]> */
		/* 8215874Ch case   97:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000070) );
		/* 8215874Ch case   97:*/		return 0x82158750;
		  /* 82158750h */ case   98:  		/* stw R11, <#[R8 + 116]> */
		/* 82158750h case   98:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000074) );
		/* 82158750h case   98:*/		return 0x82158754;
		  /* 82158754h */ case   99:  		/* stw R10, <#[R8 + 120]> */
		/* 82158754h case   99:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000078) );
		/* 82158754h case   99:*/		return 0x82158758;
		  /* 82158758h */ case  100:  		/* stw R9, <#[R8 + 124]> */
		/* 82158758h case  100:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x0000007C) );
		/* 82158758h case  100:*/		return 0x8215875C;
		  /* 8215875Ch */ case  101:  		/* stw R11, <#[R8 + 128]> */
		/* 8215875Ch case  101:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000080) );
		/* 8215875Ch case  101:*/		return 0x82158760;
		  /* 82158760h */ case  102:  		/* stw R10, <#[R8 + 132]> */
		/* 82158760h case  102:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000084) );
		/* 82158760h case  102:*/		return 0x82158764;
		  /* 82158764h */ case  103:  		/* stw R9, <#[R8 + 136]> */
		/* 82158764h case  103:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000088) );
		/* 82158764h case  103:*/		return 0x82158768;
		  /* 82158768h */ case  104:  		/* stw R11, <#[R8 + 140]> */
		/* 82158768h case  104:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x0000008C) );
		/* 82158768h case  104:*/		return 0x8215876C;
		  /* 8215876Ch */ case  105:  		/* stw R10, <#[R8 + 144]> */
		/* 8215876Ch case  105:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000090) );
		/* 8215876Ch case  105:*/		return 0x82158770;
		  /* 82158770h */ case  106:  		/* stw R9, <#[R8 + 148]> */
		/* 82158770h case  106:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000094) );
		/* 82158770h case  106:*/		return 0x82158774;
		  /* 82158774h */ case  107:  		/* stw R11, <#[R8 + 152]> */
		/* 82158774h case  107:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000098) );
		/* 82158774h case  107:*/		return 0x82158778;
		  /* 82158778h */ case  108:  		/* stw R10, <#[R8 + 156]> */
		/* 82158778h case  108:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x0000009C) );
		/* 82158778h case  108:*/		return 0x8215877C;
		  /* 8215877Ch */ case  109:  		/* stw R9, <#[R8 + 160]> */
		/* 8215877Ch case  109:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x000000A0) );
		/* 8215877Ch case  109:*/		return 0x82158780;
		  /* 82158780h */ case  110:  		/* stw R11, <#[R8 + 176]> */
		/* 82158780h case  110:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x000000B0) );
		/* 82158780h case  110:*/		return 0x82158784;
		  /* 82158784h */ case  111:  		/* stw R10, <#[R8 + 184]> */
		/* 82158784h case  111:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x000000B8) );
		/* 82158784h case  111:*/		return 0x82158788;
		  /* 82158788h */ case  112:  		/* stw R9, <#[R8 + 168]> */
		/* 82158788h case  112:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x000000A8) );
		/* 82158788h case  112:*/		return 0x8215878C;
		  /* 8215878Ch */ case  113:  		/* stw R11, <#[R8 + 180]> */
		/* 8215878Ch case  113:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x000000B4) );
		/* 8215878Ch case  113:*/		return 0x82158790;
		  /* 82158790h */ case  114:  		/* stw R10, <#[R8 + 188]> */
		/* 82158790h case  114:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x000000BC) );
		/* 82158790h case  114:*/		return 0x82158794;
		  /* 82158794h */ case  115:  		/* stw R9, <#[R8 + 172]> */
		/* 82158794h case  115:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x000000AC) );
		/* 82158794h case  115:*/		return 0x82158798;
		  /* 82158798h */ case  116:  		/* stw R11, <#[R8 + 192]> */
		/* 82158798h case  116:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x000000C0) );
		/* 82158798h case  116:*/		return 0x8215879C;
		  /* 8215879Ch */ case  117:  		/* stw R10, <#[R8 + 196]> */
		/* 8215879Ch case  117:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x000000C4) );
		/* 8215879Ch case  117:*/		return 0x821587A0;
		  /* 821587A0h */ case  118:  		/* b -816432 */
		/* 821587A0h case  118:*/		return 0x82091270;
		/* 821587A0h case  118:*/		return 0x821587A4;
		  /* 821587A4h */ case  119:  		/* nop */
		/* 821587A4h case  119:*/		cpu::op::nop();
		/* 821587A4h case  119:*/		return 0x821587A8;
	}
	return 0x821587A8;
} // Block from 821585C8h-821587A8h (120 instructions)

//////////////////////////////////////////////////////
// Block at 821587A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821587A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821587A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821587A8);
		  /* 821587A8h */ case    0:  		/* mfspr R12, LR */
		/* 821587A8h case    0:*/		regs.R12 = regs.LR;
		/* 821587A8h case    0:*/		return 0x821587AC;
		  /* 821587ACh */ case    1:  		/* bl -816464 */
		/* 821587ACh case    1:*/		regs.LR = 0x821587B0; return 0x8209125C;
		/* 821587ACh case    1:*/		return 0x821587B0;
		  /* 821587B0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821587B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821587B0h case    2:*/		return 0x821587B4;
		  /* 821587B4h */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 821587B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821587B4h case    3:*/		return 0x821587B8;
		  /* 821587B8h */ case    4:  		/* lis R11, -32255 */
		/* 821587B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821587B8h case    4:*/		return 0x821587BC;
		  /* 821587BCh */ case    5:  		/* mr R31, R3 */
		/* 821587BCh case    5:*/		regs.R31 = regs.R3;
		/* 821587BCh case    5:*/		return 0x821587C0;
		  /* 821587C0h */ case    6:  		/* mr R29, R4 */
		/* 821587C0h case    6:*/		regs.R29 = regs.R4;
		/* 821587C0h case    6:*/		return 0x821587C4;
		  /* 821587C4h */ case    7:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 821587C4h case    7:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 821587C4h case    7:*/		return 0x821587C8;
		  /* 821587C8h */ case    8:  		/* addi R30, R11, -10432 */
		/* 821587C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFD740);
		/* 821587C8h case    8:*/		return 0x821587CC;
		  /* 821587CCh */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821587CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821587E0;  }
		/* 821587CCh case    9:*/		return 0x821587D0;
		  /* 821587D0h */ case   10:  		/* lis R11, -32252 */
		/* 821587D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821587D0h case   10:*/		return 0x821587D4;
		  /* 821587D4h */ case   11:  		/* mr R4, R30 */
		/* 821587D4h case   11:*/		regs.R4 = regs.R30;
		/* 821587D4h case   11:*/		return 0x821587D8;
		  /* 821587D8h */ case   12:  		/* addi R5, R11, -23720 */
		/* 821587D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA358);
		/* 821587D8h case   12:*/		return 0x821587DC;
		  /* 821587DCh */ case   13:  		/* bl -2228 */
		/* 821587DCh case   13:*/		regs.LR = 0x821587E0; return 0x82157F28;
		/* 821587DCh case   13:*/		return 0x821587E0;
	}
	return 0x821587E0;
} // Block from 821587A8h-821587E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821587E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821587E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821587E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821587E0);
		  /* 821587E0h */ case    0:  		/* mr R4, R30 */
		/* 821587E0h case    0:*/		regs.R4 = regs.R30;
		/* 821587E0h case    0:*/		return 0x821587E4;
		  /* 821587E4h */ case    1:  		/* mr R5, R29 */
		/* 821587E4h case    1:*/		regs.R5 = regs.R29;
		/* 821587E4h case    1:*/		return 0x821587E8;
		  /* 821587E8h */ case    2:  		/* mr R3, R31 */
		/* 821587E8h case    2:*/		regs.R3 = regs.R31;
		/* 821587E8h case    2:*/		return 0x821587EC;
		  /* 821587ECh */ case    3:  		/* bl -2244 */
		/* 821587ECh case    3:*/		regs.LR = 0x821587F0; return 0x82157F28;
		/* 821587ECh case    3:*/		return 0x821587F0;
		  /* 821587F0h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821587F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821587F0h case    4:*/		return 0x821587F4;
		  /* 821587F4h */ case    5:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821587F4h case    5:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821587F4h case    5:*/		return 0x821587F8;
		  /* 821587F8h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821587F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82158810;  }
		/* 821587F8h case    6:*/		return 0x821587FC;
		  /* 821587FCh */ case    7:  		/* lis R11, -32252 */
		/* 821587FCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821587FCh case    7:*/		return 0x82158800;
		  /* 82158800h */ case    8:  		/* mr R4, R30 */
		/* 82158800h case    8:*/		regs.R4 = regs.R30;
		/* 82158800h case    8:*/		return 0x82158804;
		  /* 82158804h */ case    9:  		/* addi R5, R11, -23728 */
		/* 82158804h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA350);
		/* 82158804h case    9:*/		return 0x82158808;
		  /* 82158808h */ case   10:  		/* mr R3, R31 */
		/* 82158808h case   10:*/		regs.R3 = regs.R31;
		/* 82158808h case   10:*/		return 0x8215880C;
		  /* 8215880Ch */ case   11:  		/* bl -2276 */
		/* 8215880Ch case   11:*/		regs.LR = 0x82158810; return 0x82157F28;
		/* 8215880Ch case   11:*/		return 0x82158810;
	}
	return 0x82158810;
} // Block from 821587E0h-82158810h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82158810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158810);
		  /* 82158810h */ case    0:  		/* addi R1, R1, 144 */
		/* 82158810h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82158810h case    0:*/		return 0x82158814;
		  /* 82158814h */ case    1:  		/* b -816488 */
		/* 82158814h case    1:*/		return 0x820912AC;
		/* 82158814h case    1:*/		return 0x82158818;
	}
	return 0x82158818;
} // Block from 82158810h-82158818h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158818h
// Function 'SSMDebugOpenAppendFile'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158818);
		  /* 82158818h */ case    0:  		/* mfspr R12, LR */
		/* 82158818h case    0:*/		regs.R12 = regs.LR;
		/* 82158818h case    0:*/		return 0x8215881C;
		  /* 8215881Ch */ case    1:  		/* bl -816576 */
		/* 8215881Ch case    1:*/		regs.LR = 0x82158820; return 0x8209125C;
		/* 8215881Ch case    1:*/		return 0x82158820;
		  /* 82158820h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82158820h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82158820h case    2:*/		return 0x82158824;
		  /* 82158824h */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 82158824h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82158824h case    3:*/		return 0x82158828;
		  /* 82158828h */ case    4:  		/* lis R11, -32255 */
		/* 82158828h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158828h case    4:*/		return 0x8215882C;
		  /* 8215882Ch */ case    5:  		/* mr R31, R3 */
		/* 8215882Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215882Ch case    5:*/		return 0x82158830;
		  /* 82158830h */ case    6:  		/* mr R29, R4 */
		/* 82158830h case    6:*/		regs.R29 = regs.R4;
		/* 82158830h case    6:*/		return 0x82158834;
		  /* 82158834h */ case    7:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 82158834h case    7:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 82158834h case    7:*/		return 0x82158838;
		  /* 82158838h */ case    8:  		/* addi R30, R11, -10432 */
		/* 82158838h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFD740);
		/* 82158838h case    8:*/		return 0x8215883C;
		  /* 8215883Ch */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8215883Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82158850;  }
		/* 8215883Ch case    9:*/		return 0x82158840;
		  /* 82158840h */ case   10:  		/* lis R11, -32252 */
		/* 82158840h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158840h case   10:*/		return 0x82158844;
		  /* 82158844h */ case   11:  		/* mr R4, R30 */
		/* 82158844h case   11:*/		regs.R4 = regs.R30;
		/* 82158844h case   11:*/		return 0x82158848;
		  /* 82158848h */ case   12:  		/* addi R5, R11, -23712 */
		/* 82158848h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA360);
		/* 82158848h case   12:*/		return 0x8215884C;
		  /* 8215884Ch */ case   13:  		/* bl -2340 */
		/* 8215884Ch case   13:*/		regs.LR = 0x82158850; return 0x82157F28;
		/* 8215884Ch case   13:*/		return 0x82158850;
	}
	return 0x82158850;
} // Block from 82158818h-82158850h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82158850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158850);
		  /* 82158850h */ case    0:  		/* mr R4, R30 */
		/* 82158850h case    0:*/		regs.R4 = regs.R30;
		/* 82158850h case    0:*/		return 0x82158854;
		  /* 82158854h */ case    1:  		/* mr R5, R29 */
		/* 82158854h case    1:*/		regs.R5 = regs.R29;
		/* 82158854h case    1:*/		return 0x82158858;
		  /* 82158858h */ case    2:  		/* mr R3, R31 */
		/* 82158858h case    2:*/		regs.R3 = regs.R31;
		/* 82158858h case    2:*/		return 0x8215885C;
		  /* 8215885Ch */ case    3:  		/* bl -2356 */
		/* 8215885Ch case    3:*/		regs.LR = 0x82158860; return 0x82157F28;
		/* 8215885Ch case    3:*/		return 0x82158860;
		  /* 82158860h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 82158860h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82158860h case    4:*/		return 0x82158864;
		  /* 82158864h */ case    5:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82158864h case    5:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82158864h case    5:*/		return 0x82158868;
		  /* 82158868h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82158868h case    6:*/		if ( regs.CR[0].eq ) { return 0x82158880;  }
		/* 82158868h case    6:*/		return 0x8215886C;
		  /* 8215886Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215886Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215886Ch case    7:*/		return 0x82158870;
	}
	return 0x82158870;
} // Block from 82158850h-82158870h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82158870h
// Function 'SSMDebugCloseFile'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158870);
		  /* 82158870h */ case    0:  		/* mr R4, R30 */
		/* 82158870h case    0:*/		regs.R4 = regs.R30;
		/* 82158870h case    0:*/		return 0x82158874;
		  /* 82158874h */ case    1:  		/* addi R5, R11, -23728 */
		/* 82158874h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA350);
		/* 82158874h case    1:*/		return 0x82158878;
		  /* 82158878h */ case    2:  		/* mr R3, R31 */
		/* 82158878h case    2:*/		regs.R3 = regs.R31;
		/* 82158878h case    2:*/		return 0x8215887C;
		  /* 8215887Ch */ case    3:  		/* bl -2388 */
		/* 8215887Ch case    3:*/		regs.LR = 0x82158880; return 0x82157F28;
		/* 8215887Ch case    3:*/		return 0x82158880;
	}
	return 0x82158880;
} // Block from 82158870h-82158880h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82158880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158880);
		  /* 82158880h */ case    0:  		/* addi R1, R1, 144 */
		/* 82158880h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82158880h case    0:*/		return 0x82158884;
		  /* 82158884h */ case    1:  		/* b -816600 */
		/* 82158884h case    1:*/		return 0x820912AC;
		/* 82158884h case    1:*/		return 0x82158888;
	}
	return 0x82158888;
} // Block from 82158880h-82158888h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158888);
		  /* 82158888h */ case    0:  		/* mfspr R12, LR */
		/* 82158888h case    0:*/		regs.R12 = regs.LR;
		/* 82158888h case    0:*/		return 0x8215888C;
		  /* 8215888Ch */ case    1:  		/* bl -816728 */
		/* 8215888Ch case    1:*/		regs.LR = 0x82158890; return 0x82091234;
		/* 8215888Ch case    1:*/		return 0x82158890;
		  /* 82158890h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82158890h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82158890h case    2:*/		return 0x82158894;
		  /* 82158894h */ case    3:  		/* mr R23, R10 */
		/* 82158894h case    3:*/		regs.R23 = regs.R10;
		/* 82158894h case    3:*/		return 0x82158898;
		  /* 82158898h */ case    4:  		/* lis R10, -32255 */
		/* 82158898h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82158898h case    4:*/		return 0x8215889C;
		  /* 8215889Ch */ case    5:  		/* mr R22, R9 */
		/* 8215889Ch case    5:*/		regs.R22 = regs.R9;
		/* 8215889Ch case    5:*/		return 0x821588A0;
		  /* 821588A0h */ case    6:  		/* mr R11, R4 */
		/* 821588A0h case    6:*/		regs.R11 = regs.R4;
		/* 821588A0h case    6:*/		return 0x821588A4;
		  /* 821588A4h */ case    7:  		/* srawi R9, R4, 7 */
		/* 821588A4h case    7:*/		cpu::op::srawi<0,7>(regs,&regs.R9,regs.R4);
		/* 821588A4h case    7:*/		return 0x821588A8;
	}
	return 0x821588A8;
} // Block from 82158888h-821588A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821588A8h
// Function '?SSMDebug_SetFuncs@XGRAPHICS@@YAXPAXP6AX0PAD11@ZP6APAX01I@ZP6AI00@ZP6AI001IPAI@Z6P6AX0@ZP6AX0II1@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821588A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821588A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821588A8);
		  /* 821588A8h */ case    0:  		/* addi R4, R10, -15864 */
		/* 821588A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFC208);
		/* 821588A8h case    0:*/		return 0x821588AC;
		  /* 821588ACh */ case    1:  		/* mr R31, R3 */
		/* 821588ACh case    1:*/		regs.R31 = regs.R3;
		/* 821588ACh case    1:*/		return 0x821588B0;
		  /* 821588B0h */ case    2:  		/* mr R24, R5 */
		/* 821588B0h case    2:*/		regs.R24 = regs.R5;
		/* 821588B0h case    2:*/		return 0x821588B4;
		  /* 821588B4h */ case    3:  		/* mr R26, R6 */
		/* 821588B4h case    3:*/		regs.R26 = regs.R6;
		/* 821588B4h case    3:*/		return 0x821588B8;
		  /* 821588B8h */ case    4:  		/* mr R19, R7 */
		/* 821588B8h case    4:*/		regs.R19 = regs.R7;
		/* 821588B8h case    4:*/		return 0x821588BC;
		  /* 821588BCh */ case    5:  		/* mr R25, R8 */
		/* 821588BCh case    5:*/		regs.R25 = regs.R8;
		/* 821588BCh case    5:*/		return 0x821588C0;
		  /* 821588C0h */ case    6:  		/* rlwinm R21, R9, 0, 31, 31 */
		/* 821588C0h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R21,regs.R9);
		/* 821588C0h case    6:*/		return 0x821588C4;
		  /* 821588C4h */ case    7:  		/* rlwinm R27, R11, 0, 26, 31 */
		/* 821588C4h case    7:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R27,regs.R11);
		/* 821588C4h case    7:*/		return 0x821588C8;
		  /* 821588C8h */ case    8:  		/* bl -2464 */
		/* 821588C8h case    8:*/		regs.LR = 0x821588CC; return 0x82157F28;
		/* 821588C8h case    8:*/		return 0x821588CC;
		  /* 821588CCh */ case    9:  		/* lis R11, -32255 */
		/* 821588CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821588CCh case    9:*/		return 0x821588D0;
		  /* 821588D0h */ case   10:  		/* cmpwi CR6, R21, 0 */
		/* 821588D0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 821588D0h case   10:*/		return 0x821588D4;
		  /* 821588D4h */ case   11:  		/* addi R20, R11, -16588 */
		/* 821588D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0xFFFFBF34);
		/* 821588D4h case   11:*/		return 0x821588D8;
		  /* 821588D8h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821588D8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821588E8;  }
		/* 821588D8h case   12:*/		return 0x821588DC;
		  /* 821588DCh */ case   13:  		/* mr R4, R20 */
		/* 821588DCh case   13:*/		regs.R4 = regs.R20;
		/* 821588DCh case   13:*/		return 0x821588E0;
		  /* 821588E0h */ case   14:  		/* mr R3, R31 */
		/* 821588E0h case   14:*/		regs.R3 = regs.R31;
		/* 821588E0h case   14:*/		return 0x821588E4;
		  /* 821588E4h */ case   15:  		/* bl -2492 */
		/* 821588E4h case   15:*/		regs.LR = 0x821588E8; return 0x82157F28;
		/* 821588E4h case   15:*/		return 0x821588E8;
	}
	return 0x821588E8;
} // Block from 821588A8h-821588E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821588E8h
// Function '?DoPrintImp@Disassembler@XGRAPHICS@@AAAXPADZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821588E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821588E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821588E8);
		  /* 821588E8h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821588E8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821588E8h case    0:*/		return 0x821588EC;
		  /* 821588ECh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821588ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821588FC;  }
		/* 821588ECh case    1:*/		return 0x821588F0;
		  /* 821588F0h */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 821588F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821588F0h case    2:*/		return 0x821588F4;
		  /* 821588F4h */ case    3:  		/* li R11, 1 */
		/* 821588F4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821588F4h case    3:*/		return 0x821588F8;
		  /* 821588F8h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821588F8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82158900;  }
		/* 821588F8h case    4:*/		return 0x821588FC;
	}
	return 0x821588FC;
} // Block from 821588E8h-821588FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821588FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821588FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821588FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821588FC);
		  /* 821588FCh */ case    0:  		/* li R11, 0 */
		/* 821588FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821588FCh case    0:*/		return 0x82158900;
	}
	return 0x82158900;
} // Block from 821588FCh-82158900h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158900);
		  /* 82158900h */ case    0:  		/* rlwinm R28, R11, 0, 24, 31 */
		/* 82158900h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R11);
		/* 82158900h case    0:*/		return 0x82158904;
		  /* 82158904h */ case    1:  		/* cmpwi CR6, R24, 0 */
		/* 82158904h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82158904h case    1:*/		return 0x82158908;
		  /* 82158908h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82158908h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82158918;  }
		/* 82158908h case    2:*/		return 0x8215890C;
		  /* 8215890Ch */ case    3:  		/* cmpwi CR6, R27, 16 */
		/* 8215890Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000010);
		/* 8215890Ch case    3:*/		return 0x82158910;
		  /* 82158910h */ case    4:  		/* li R11, 1 */
		/* 82158910h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82158910h case    4:*/		return 0x82158914;
		  /* 82158914h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82158914h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215891C;  }
		/* 82158914h case    5:*/		return 0x82158918;
	}
	return 0x82158918;
} // Block from 82158900h-82158918h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158918);
		  /* 82158918h */ case    0:  		/* li R11, 0 */
		/* 82158918h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82158918h case    0:*/		return 0x8215891C;
	}
	return 0x8215891C;
} // Block from 82158918h-8215891Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215891Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215891C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215891C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215891C);
		  /* 8215891Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8215891Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8215891Ch case    0:*/		return 0x82158920;
		  /* 82158920h */ case    1:  		/* lis R10, -32255 */
		/* 82158920h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82158920h case    1:*/		return 0x82158924;
		  /* 82158924h */ case    2:  		/* mr R30, R11 */
		/* 82158924h case    2:*/		regs.R30 = regs.R11;
		/* 82158924h case    2:*/		return 0x82158928;
		  /* 82158928h */ case    3:  		/* addi R29, R10, -10432 */
		/* 82158928h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFD740);
		/* 82158928h case    3:*/		return 0x8215892C;
		  /* 8215892Ch */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 8215892Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82158944;  }
		/* 8215892Ch case    4:*/		return 0x82158930;
		  /* 82158930h */ case    5:  		/* lis R11, -32255 */
		/* 82158930h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158930h case    5:*/		return 0x82158934;
		  /* 82158934h */ case    6:  		/* mr R3, R31 */
		/* 82158934h case    6:*/		regs.R3 = regs.R31;
		/* 82158934h case    6:*/		return 0x82158938;
		  /* 82158938h */ case    7:  		/* addi R4, R11, -16532 */
		/* 82158938h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFBF6C);
		/* 82158938h case    7:*/		return 0x8215893C;
		  /* 8215893Ch */ case    8:  		/* bl -2580 */
		/* 8215893Ch case    8:*/		regs.LR = 0x82158940; return 0x82157F28;
		/* 8215893Ch case    8:*/		return 0x82158940;
	}
	return 0x82158940;
} // Block from 8215891Ch-82158940h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82158940h
// Function '?DoPrint2@Disassembler@XGRAPHICS@@AAAXPADZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158940);
		  /* 82158940h */ case    0:  		/* b 44 */
		/* 82158940h case    0:*/		return 0x8215896C;
		/* 82158940h case    0:*/		return 0x82158944;
	}
	return 0x82158944;
} // Block from 82158940h-82158944h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158944);
		  /* 82158944h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 82158944h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82158944h case    0:*/		return 0x82158948;
		  /* 82158948h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82158948h case    1:*/		if ( regs.CR[6].eq ) { return 0x82158958;  }
		/* 82158948h case    1:*/		return 0x8215894C;
		  /* 8215894Ch */ case    2:  		/* lis R11, -32255 */
		/* 8215894Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8215894Ch case    2:*/		return 0x82158950;
		  /* 82158950h */ case    3:  		/* addi R5, R11, -8832 */
		/* 82158950h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDD80);
		/* 82158950h case    3:*/		return 0x82158954;
		  /* 82158954h */ case    4:  		/* b 12 */
		/* 82158954h case    4:*/		return 0x82158960;
		/* 82158954h case    4:*/		return 0x82158958;
	}
	return 0x82158958;
} // Block from 82158944h-82158958h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82158958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158958);
		  /* 82158958h */ case    0:  		/* lis R11, -32255 */
		/* 82158958h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158958h case    0:*/		return 0x8215895C;
		  /* 8215895Ch */ case    1:  		/* addi R5, R11, -8732 */
		/* 8215895Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDDE4);
		/* 8215895Ch case    1:*/		return 0x82158960;
	}
	return 0x82158960;
} // Block from 82158958h-82158960h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158960);
		  /* 82158960h */ case    0:  		/* mr R4, R29 */
		/* 82158960h case    0:*/		regs.R4 = regs.R29;
		/* 82158960h case    0:*/		return 0x82158964;
		  /* 82158964h */ case    1:  		/* mr R3, R31 */
		/* 82158964h case    1:*/		regs.R3 = regs.R31;
		/* 82158964h case    1:*/		return 0x82158968;
		  /* 82158968h */ case    2:  		/* bl -2624 */
		/* 82158968h case    2:*/		regs.LR = 0x8215896C; return 0x82157F28;
		/* 82158968h case    2:*/		return 0x8215896C;
	}
	return 0x8215896C;
} // Block from 82158960h-8215896Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215896Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215896C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215896C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215896C);
		  /* 8215896Ch */ case    0:  		/* rlwinm. R28, R28, 0, 24, 31 */
		/* 8215896Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R28,regs.R28);
		/* 8215896Ch case    0:*/		return 0x82158970;
		  /* 82158970h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82158970h case    1:*/		if ( regs.CR[0].eq ) { return 0x82158984;  }
		/* 82158970h case    1:*/		return 0x82158974;
		  /* 82158974h */ case    2:  		/* lis R11, -32252 */
		/* 82158974h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158974h case    2:*/		return 0x82158978;
		  /* 82158978h */ case    3:  		/* mr R3, R31 */
		/* 82158978h case    3:*/		regs.R3 = regs.R31;
		/* 82158978h case    3:*/		return 0x8215897C;
		  /* 8215897Ch */ case    4:  		/* addi R4, R11, -23676 */
		/* 8215897Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA384);
		/* 8215897Ch case    4:*/		return 0x82158980;
		  /* 82158980h */ case    5:  		/* bl -2648 */
		/* 82158980h case    5:*/		regs.LR = 0x82158984; return 0x82157F28;
		/* 82158980h case    5:*/		return 0x82158984;
	}
	return 0x82158984;
} // Block from 8215896Ch-82158984h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158984);
		  /* 82158984h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82158984h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82158984h case    0:*/		return 0x82158988;
		  /* 82158988h */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 82158988h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821589D4;  }
		/* 82158988h case    1:*/		return 0x8215898C;
		  /* 8215898Ch */ case    2:  		/* cmpwi CR6, R26, 0 */
		/* 8215898Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 8215898Ch case    2:*/		return 0x82158990;
		  /* 82158990h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 82158990h case    3:*/		if ( regs.CR[6].eq ) { return 0x821589C0;  }
		/* 82158990h case    3:*/		return 0x82158994;
		  /* 82158994h */ case    4:  		/* cmpwi CR6, R27, 62 */
		/* 82158994h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x0000003E);
		/* 82158994h case    4:*/		return 0x82158998;
		  /* 82158998h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82158998h case    5:*/		if ( regs.CR[6].eq ) { return 0x821589B4;  }
		/* 82158998h case    5:*/		return 0x8215899C;
		  /* 8215899Ch */ case    6:  		/* cmpwi CR6, R27, 63 */
		/* 8215899Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x0000003F);
		/* 8215899Ch case    6:*/		return 0x821589A0;
	}
	return 0x821589A0;
} // Block from 82158984h-821589A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821589A0h
// Function '?UpdateOpcodeTables@Disassembler@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589A0);
		  /* 821589A0h */ case    0:  		/* bc 4, CR6_EQ, 32 */
		/* 821589A0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821589C0;  }
		/* 821589A0h case    0:*/		return 0x821589A4;
		  /* 821589A4h */ case    1:  		/* lis R11, -32255 */
		/* 821589A4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821589A4h case    1:*/		return 0x821589A8;
		  /* 821589A8h */ case    2:  		/* addi R5, R11, 22344 */
		/* 821589A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x5748);
		/* 821589A8h case    2:*/		return 0x821589AC;
		  /* 821589ACh */ case    3:  		/* mr R4, R29 */
		/* 821589ACh case    3:*/		regs.R4 = regs.R29;
		/* 821589ACh case    3:*/		return 0x821589B0;
		  /* 821589B0h */ case    4:  		/* b 28 */
		/* 821589B0h case    4:*/		return 0x821589CC;
		/* 821589B0h case    4:*/		return 0x821589B4;
	}
	return 0x821589B4;
} // Block from 821589A0h-821589B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821589B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589B4);
		  /* 821589B4h */ case    0:  		/* lis R11, -32255 */
		/* 821589B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821589B4h case    0:*/		return 0x821589B8;
		  /* 821589B8h */ case    1:  		/* addi R5, R11, 22340 */
		/* 821589B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x5744);
		/* 821589B8h case    1:*/		return 0x821589BC;
		  /* 821589BCh */ case    2:  		/* b -16 */
		/* 821589BCh case    2:*/		return 0x821589AC;
		/* 821589BCh case    2:*/		return 0x821589C0;
	}
	return 0x821589C0;
} // Block from 821589B4h-821589C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821589C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589C0);
		  /* 821589C0h */ case    0:  		/* lis R11, -32253 */
		/* 821589C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821589C0h case    0:*/		return 0x821589C4;
		  /* 821589C4h */ case    1:  		/* mr R5, R27 */
		/* 821589C4h case    1:*/		regs.R5 = regs.R27;
		/* 821589C4h case    1:*/		return 0x821589C8;
		  /* 821589C8h */ case    2:  		/* addi R4, R11, 26668 */
		/* 821589C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x682C);
		/* 821589C8h case    2:*/		return 0x821589CC;
	}
	return 0x821589CC;
} // Block from 821589C0h-821589CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821589CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589CC);
		  /* 821589CCh */ case    0:  		/* mr R3, R31 */
		/* 821589CCh case    0:*/		regs.R3 = regs.R31;
		/* 821589CCh case    0:*/		return 0x821589D0;
		  /* 821589D0h */ case    1:  		/* bl -2728 */
		/* 821589D0h case    1:*/		regs.LR = 0x821589D4; return 0x82157F28;
		/* 821589D0h case    1:*/		return 0x821589D4;
	}
	return 0x821589D4;
} // Block from 821589CCh-821589D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821589D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589D4);
		  /* 821589D4h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821589D4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821589D4h case    0:*/		return 0x821589D8;
		  /* 821589D8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821589D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821589F4;  }
		/* 821589D8h case    1:*/		return 0x821589DC;
		  /* 821589DCh */ case    2:  		/* cmpwi CR6, R25, 0 */
		/* 821589DCh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821589DCh case    2:*/		return 0x821589E0;
		  /* 821589E0h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821589E0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821589F4;  }
		/* 821589E0h case    3:*/		return 0x821589E4;
		  /* 821589E4h */ case    4:  		/* lis R11, -32252 */
		/* 821589E4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821589E4h case    4:*/		return 0x821589E8;
		  /* 821589E8h */ case    5:  		/* mr R3, R31 */
		/* 821589E8h case    5:*/		regs.R3 = regs.R31;
		/* 821589E8h case    5:*/		return 0x821589EC;
		  /* 821589ECh */ case    6:  		/* addi R4, R11, -23680 */
		/* 821589ECh case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA380);
		/* 821589ECh case    6:*/		return 0x821589F0;
		  /* 821589F0h */ case    7:  		/* bl -2760 */
		/* 821589F0h case    7:*/		regs.LR = 0x821589F4; return 0x82157F28;
		/* 821589F0h case    7:*/		return 0x821589F4;
	}
	return 0x821589F4;
} // Block from 821589D4h-821589F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821589F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821589F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821589F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821589F4);
		  /* 821589F4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821589F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821589F4h case    0:*/		return 0x821589F8;
		  /* 821589F8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821589F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82158A0C;  }
		/* 821589F8h case    1:*/		return 0x821589FC;
		  /* 821589FCh */ case    2:  		/* lis R11, -32252 */
		/* 821589FCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821589FCh case    2:*/		return 0x82158A00;
		  /* 82158A00h */ case    3:  		/* mr R3, R31 */
		/* 82158A00h case    3:*/		regs.R3 = regs.R31;
		/* 82158A00h case    3:*/		return 0x82158A04;
		  /* 82158A04h */ case    4:  		/* addi R4, R11, -23684 */
		/* 82158A04h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA37C);
		/* 82158A04h case    4:*/		return 0x82158A08;
		  /* 82158A08h */ case    5:  		/* bl -2784 */
		/* 82158A08h case    5:*/		regs.LR = 0x82158A0C; return 0x82157F28;
		/* 82158A08h case    5:*/		return 0x82158A0C;
	}
	return 0x82158A0C;
} // Block from 821589F4h-82158A0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158A0C);
		  /* 82158A0Ch */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 82158A0Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82158A0Ch case    0:*/		return 0x82158A10;
		  /* 82158A10h */ case    1:  		/* bc 4, CR6_EQ, 120 */
		/* 82158A10h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82158A88;  }
		/* 82158A10h case    1:*/		return 0x82158A14;
		  /* 82158A14h */ case    2:  		/* cmpwi CR6, R24, 15 */
		/* 82158A14h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x0000000F);
		/* 82158A14h case    2:*/		return 0x82158A18;
		  /* 82158A18h */ case    3:  		/* bc 12, CR6_EQ, 456 */
		/* 82158A18h case    3:*/		if ( regs.CR[6].eq ) { return 0x82158BE0;  }
		/* 82158A18h case    3:*/		return 0x82158A1C;
		  /* 82158A1Ch */ case    4:  		/* lis R11, -32256 */
		/* 82158A1Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158A1Ch case    4:*/		return 0x82158A20;
		  /* 82158A20h */ case    5:  		/* mr R3, R31 */
		/* 82158A20h case    5:*/		regs.R3 = regs.R31;
		/* 82158A20h case    5:*/		return 0x82158A24;
		  /* 82158A24h */ case    6:  		/* addi R4, R11, 20592 */
		/* 82158A24h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5070);
		/* 82158A24h case    6:*/		return 0x82158A28;
		  /* 82158A28h */ case    7:  		/* bl -2816 */
		/* 82158A28h case    7:*/		regs.LR = 0x82158A2C; return 0x82157F28;
		/* 82158A28h case    7:*/		return 0x82158A2C;
		  /* 82158A2Ch */ case    8:  		/* rlwinm. R11, R24, 0, 31, 31 */
		/* 82158A2Ch case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R24);
		/* 82158A2Ch case    8:*/		return 0x82158A30;
		  /* 82158A30h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82158A30h case    9:*/		if ( regs.CR[0].eq ) { return 0x82158A44;  }
		/* 82158A30h case    9:*/		return 0x82158A34;
		  /* 82158A34h */ case   10:  		/* lis R11, -32255 */
		/* 82158A34h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158A34h case   10:*/		return 0x82158A38;
		  /* 82158A38h */ case   11:  		/* mr R3, R31 */
		/* 82158A38h case   11:*/		regs.R3 = regs.R31;
		/* 82158A38h case   11:*/		return 0x82158A3C;
		  /* 82158A3Ch */ case   12:  		/* addi R4, R11, 12560 */
		/* 82158A3Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3110);
		/* 82158A3Ch case   12:*/		return 0x82158A40;
		  /* 82158A40h */ case   13:  		/* bl -2840 */
		/* 82158A40h case   13:*/		regs.LR = 0x82158A44; return 0x82157F28;
		/* 82158A40h case   13:*/		return 0x82158A44;
	}
	return 0x82158A44;
} // Block from 82158A0Ch-82158A44h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82158A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158A44);
		  /* 82158A44h */ case    0:  		/* rlwinm. R11, R24, 0, 30, 30 */
		/* 82158A44h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R24);
		/* 82158A44h case    0:*/		return 0x82158A48;
		  /* 82158A48h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82158A48h case    1:*/		if ( regs.CR[0].eq ) { return 0x82158A5C;  }
		/* 82158A48h case    1:*/		return 0x82158A4C;
		  /* 82158A4Ch */ case    2:  		/* lis R11, -32255 */
		/* 82158A4Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158A4Ch case    2:*/		return 0x82158A50;
		  /* 82158A50h */ case    3:  		/* mr R3, R31 */
		/* 82158A50h case    3:*/		regs.R3 = regs.R31;
		/* 82158A50h case    3:*/		return 0x82158A54;
		  /* 82158A54h */ case    4:  		/* addi R4, R11, 12556 */
		/* 82158A54h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x310C);
		/* 82158A54h case    4:*/		return 0x82158A58;
		  /* 82158A58h */ case    5:  		/* bl -2864 */
		/* 82158A58h case    5:*/		regs.LR = 0x82158A5C; return 0x82157F28;
		/* 82158A58h case    5:*/		return 0x82158A5C;
	}
	return 0x82158A5C;
} // Block from 82158A44h-82158A5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158A5C);
		  /* 82158A5Ch */ case    0:  		/* rlwinm. R11, R24, 0, 29, 29 */
		/* 82158A5Ch case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R24);
		/* 82158A5Ch case    0:*/		return 0x82158A60;
		  /* 82158A60h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82158A60h case    1:*/		if ( regs.CR[0].eq ) { return 0x82158A74;  }
		/* 82158A60h case    1:*/		return 0x82158A64;
		  /* 82158A64h */ case    2:  		/* lis R11, -32255 */
		/* 82158A64h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158A64h case    2:*/		return 0x82158A68;
		  /* 82158A68h */ case    3:  		/* mr R3, R31 */
		/* 82158A68h case    3:*/		regs.R3 = regs.R31;
		/* 82158A68h case    3:*/		return 0x82158A6C;
		  /* 82158A6Ch */ case    4:  		/* addi R4, R11, 12548 */
		/* 82158A6Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3104);
		/* 82158A6Ch case    4:*/		return 0x82158A70;
		  /* 82158A70h */ case    5:  		/* bl -2888 */
		/* 82158A70h case    5:*/		regs.LR = 0x82158A74; return 0x82157F28;
		/* 82158A70h case    5:*/		return 0x82158A74;
	}
	return 0x82158A74;
} // Block from 82158A5Ch-82158A74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158A74);
		  /* 82158A74h */ case    0:  		/* rlwinm. R11, R24, 0, 28, 28 */
		/* 82158A74h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R24);
		/* 82158A74h case    0:*/		return 0x82158A78;
		  /* 82158A78h */ case    1:  		/* bc 12, CR0_EQ, 360 */
		/* 82158A78h case    1:*/		if ( regs.CR[0].eq ) { return 0x82158BE0;  }
		/* 82158A78h case    1:*/		return 0x82158A7C;
		  /* 82158A7Ch */ case    2:  		/* lis R11, -32255 */
		/* 82158A7Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158A7Ch case    2:*/		return 0x82158A80;
		  /* 82158A80h */ case    3:  		/* addi R4, R11, 12532 */
		/* 82158A80h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x30F4);
		/* 82158A80h case    3:*/		return 0x82158A84;
		  /* 82158A84h */ case    4:  		/* b 340 */
		/* 82158A84h case    4:*/		return 0x82158BD8;
		/* 82158A84h case    4:*/		return 0x82158A88;
	}
	return 0x82158A88;
} // Block from 82158A74h-82158A88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82158A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158A88);
		  /* 82158A88h */ case    0:  		/* lis R11, -32256 */
		/* 82158A88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158A88h case    0:*/		return 0x82158A8C;
		  /* 82158A8Ch */ case    1:  		/* mr R3, R31 */
		/* 82158A8Ch case    1:*/		regs.R3 = regs.R31;
		/* 82158A8Ch case    1:*/		return 0x82158A90;
		  /* 82158A90h */ case    2:  		/* addi R4, R11, 20592 */
		/* 82158A90h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5070);
		/* 82158A90h case    2:*/		return 0x82158A94;
		  /* 82158A94h */ case    3:  		/* bl -2924 */
		/* 82158A94h case    3:*/		regs.LR = 0x82158A98; return 0x82157F28;
		/* 82158A94h case    3:*/		return 0x82158A98;
		  /* 82158A98h */ case    4:  		/* lis R11, -32252 */
		/* 82158A98h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158A98h case    4:*/		return 0x82158A9C;
		  /* 82158A9Ch */ case    5:  		/* lis R10, -32255 */
		/* 82158A9Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82158A9Ch case    5:*/		return 0x82158AA0;
		  /* 82158AA0h */ case    6:  		/* lis R9, -32252 */
		/* 82158AA0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82158AA0h case    6:*/		return 0x82158AA4;
		  /* 82158AA4h */ case    7:  		/* rlwinm. R8, R24, 0, 31, 31 */
		/* 82158AA4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R24);
		/* 82158AA4h case    7:*/		return 0x82158AA8;
		  /* 82158AA8h */ case    8:  		/* addi R28, R11, -25364 */
		/* 82158AA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFF9CEC);
		/* 82158AA8h case    8:*/		return 0x82158AAC;
		  /* 82158AACh */ case    9:  		/* addi R30, R10, 22348 */
		/* 82158AACh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x574C);
		/* 82158AACh case    9:*/		return 0x82158AB0;
		  /* 82158AB0h */ case   10:  		/* addi R29, R9, -23688 */
		/* 82158AB0h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R9,0xFFFFA378);
		/* 82158AB0h case   10:*/		return 0x82158AB4;
		  /* 82158AB4h */ case   11:  		/* bc 12, CR0_EQ, 36 */
		/* 82158AB4h case   11:*/		if ( regs.CR[0].eq ) { return 0x82158AD8;  }
		/* 82158AB4h case   11:*/		return 0x82158AB8;
		  /* 82158AB8h */ case   12:  		/* rlwinm. R11, R23, 0, 31, 31 */
		/* 82158AB8h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R23);
		/* 82158AB8h case   12:*/		return 0x82158ABC;
		  /* 82158ABCh */ case   13:  		/* mr R3, R31 */
		/* 82158ABCh case   13:*/		regs.R3 = regs.R31;
		/* 82158ABCh case   13:*/		return 0x82158AC0;
		  /* 82158AC0h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 82158AC0h case   14:*/		if ( regs.CR[0].eq ) { return 0x82158ACC;  }
		/* 82158AC0h case   14:*/		return 0x82158AC4;
		  /* 82158AC4h */ case   15:  		/* mr R4, R29 */
		/* 82158AC4h case   15:*/		regs.R4 = regs.R29;
		/* 82158AC4h case   15:*/		return 0x82158AC8;
		  /* 82158AC8h */ case   16:  		/* b 48 */
		/* 82158AC8h case   16:*/		return 0x82158AF8;
		/* 82158AC8h case   16:*/		return 0x82158ACC;
	}
	return 0x82158ACC;
} // Block from 82158A88h-82158ACCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82158ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158ACC);
		  /* 82158ACCh */ case    0:  		/* lis R11, -32255 */
		/* 82158ACCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158ACCh case    0:*/		return 0x82158AD0;
		  /* 82158AD0h */ case    1:  		/* addi R4, R11, 12560 */
		/* 82158AD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3110);
		/* 82158AD0h case    1:*/		return 0x82158AD4;
		  /* 82158AD4h */ case    2:  		/* b 36 */
		/* 82158AD4h case    2:*/		return 0x82158AF8;
		/* 82158AD4h case    2:*/		return 0x82158AD8;
	}
	return 0x82158AD8;
} // Block from 82158ACCh-82158AD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82158AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158AD8);
		  /* 82158AD8h */ case    0:  		/* rlwinm R11, R23, 0, 31, 31 */
		/* 82158AD8h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R23);
		/* 82158AD8h case    0:*/		return 0x82158ADC;
		  /* 82158ADCh */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82158ADCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82158ADCh case    1:*/		return 0x82158AE0;
		  /* 82158AE0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82158AE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82158AF0;  }
		/* 82158AE0h case    2:*/		return 0x82158AE4;
		  /* 82158AE4h */ case    3:  		/* cmpwi CR6, R22, 0 */
		/* 82158AE4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82158AE4h case    3:*/		return 0x82158AE8;
		  /* 82158AE8h */ case    4:  		/* mr R4, R28 */
		/* 82158AE8h case    4:*/		regs.R4 = regs.R28;
		/* 82158AE8h case    4:*/		return 0x82158AEC;
		  /* 82158AECh */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82158AECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82158AF4;  }
		/* 82158AECh case    5:*/		return 0x82158AF0;
	}
	return 0x82158AF0;
} // Block from 82158AD8h-82158AF0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158AF0);
		  /* 82158AF0h */ case    0:  		/* mr R4, R30 */
		/* 82158AF0h case    0:*/		regs.R4 = regs.R30;
		/* 82158AF0h case    0:*/		return 0x82158AF4;
	}
	return 0x82158AF4;
} // Block from 82158AF0h-82158AF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158AF4);
		  /* 82158AF4h */ case    0:  		/* mr R3, R31 */
		/* 82158AF4h case    0:*/		regs.R3 = regs.R31;
		/* 82158AF4h case    0:*/		return 0x82158AF8;
	}
	return 0x82158AF8;
} // Block from 82158AF4h-82158AF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158AF8);
		  /* 82158AF8h */ case    0:  		/* bl -3024 */
		/* 82158AF8h case    0:*/		regs.LR = 0x82158AFC; return 0x82157F28;
		/* 82158AF8h case    0:*/		return 0x82158AFC;
		  /* 82158AFCh */ case    1:  		/* rlwinm. R11, R24, 0, 30, 30 */
		/* 82158AFCh case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R24);
		/* 82158AFCh case    1:*/		return 0x82158B00;
		  /* 82158B00h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 82158B00h case    2:*/		if ( regs.CR[0].eq ) { return 0x82158B24;  }
		/* 82158B00h case    2:*/		return 0x82158B04;
		  /* 82158B04h */ case    3:  		/* rlwinm. R11, R23, 0, 30, 30 */
		/* 82158B04h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R23);
		/* 82158B04h case    3:*/		return 0x82158B08;
		  /* 82158B08h */ case    4:  		/* mr R3, R31 */
		/* 82158B08h case    4:*/		regs.R3 = regs.R31;
		/* 82158B08h case    4:*/		return 0x82158B0C;
		  /* 82158B0Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82158B0Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82158B18;  }
		/* 82158B0Ch case    5:*/		return 0x82158B10;
		  /* 82158B10h */ case    6:  		/* mr R4, R29 */
		/* 82158B10h case    6:*/		regs.R4 = regs.R29;
		/* 82158B10h case    6:*/		return 0x82158B14;
		  /* 82158B14h */ case    7:  		/* b 48 */
		/* 82158B14h case    7:*/		return 0x82158B44;
		/* 82158B14h case    7:*/		return 0x82158B18;
	}
	return 0x82158B18;
} // Block from 82158AF8h-82158B18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82158B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B18);
		  /* 82158B18h */ case    0:  		/* lis R11, -32255 */
		/* 82158B18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158B18h case    0:*/		return 0x82158B1C;
		  /* 82158B1Ch */ case    1:  		/* addi R4, R11, 12556 */
		/* 82158B1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x310C);
		/* 82158B1Ch case    1:*/		return 0x82158B20;
		  /* 82158B20h */ case    2:  		/* b 36 */
		/* 82158B20h case    2:*/		return 0x82158B44;
		/* 82158B20h case    2:*/		return 0x82158B24;
	}
	return 0x82158B24;
} // Block from 82158B18h-82158B24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82158B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B24);
		  /* 82158B24h */ case    0:  		/* rlwinm R11, R23, 0, 30, 30 */
		/* 82158B24h case    0:*/		cpu::op::rlwinm<0,0,30,30>(regs,&regs.R11,regs.R23);
		/* 82158B24h case    0:*/		return 0x82158B28;
		  /* 82158B28h */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 82158B28h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82158B28h case    1:*/		return 0x82158B2C;
		  /* 82158B2Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82158B2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82158B3C;  }
		/* 82158B2Ch case    2:*/		return 0x82158B30;
		  /* 82158B30h */ case    3:  		/* cmpwi CR6, R22, 0 */
		/* 82158B30h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82158B30h case    3:*/		return 0x82158B34;
		  /* 82158B34h */ case    4:  		/* mr R4, R28 */
		/* 82158B34h case    4:*/		regs.R4 = regs.R28;
		/* 82158B34h case    4:*/		return 0x82158B38;
		  /* 82158B38h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82158B38h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82158B40;  }
		/* 82158B38h case    5:*/		return 0x82158B3C;
	}
	return 0x82158B3C;
} // Block from 82158B24h-82158B3Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B3C);
		  /* 82158B3Ch */ case    0:  		/* mr R4, R30 */
		/* 82158B3Ch case    0:*/		regs.R4 = regs.R30;
		/* 82158B3Ch case    0:*/		return 0x82158B40;
	}
	return 0x82158B40;
} // Block from 82158B3Ch-82158B40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B40);
		  /* 82158B40h */ case    0:  		/* mr R3, R31 */
		/* 82158B40h case    0:*/		regs.R3 = regs.R31;
		/* 82158B40h case    0:*/		return 0x82158B44;
	}
	return 0x82158B44;
} // Block from 82158B40h-82158B44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B44);
		  /* 82158B44h */ case    0:  		/* bl -3100 */
		/* 82158B44h case    0:*/		regs.LR = 0x82158B48; return 0x82157F28;
		/* 82158B44h case    0:*/		return 0x82158B48;
		  /* 82158B48h */ case    1:  		/* rlwinm. R11, R24, 0, 29, 29 */
		/* 82158B48h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R24);
		/* 82158B48h case    1:*/		return 0x82158B4C;
		  /* 82158B4Ch */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 82158B4Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82158B70;  }
		/* 82158B4Ch case    2:*/		return 0x82158B50;
		  /* 82158B50h */ case    3:  		/* rlwinm. R11, R23, 0, 29, 29 */
		/* 82158B50h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R23);
		/* 82158B50h case    3:*/		return 0x82158B54;
		  /* 82158B54h */ case    4:  		/* mr R3, R31 */
		/* 82158B54h case    4:*/		regs.R3 = regs.R31;
		/* 82158B54h case    4:*/		return 0x82158B58;
		  /* 82158B58h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82158B58h case    5:*/		if ( regs.CR[0].eq ) { return 0x82158B64;  }
		/* 82158B58h case    5:*/		return 0x82158B5C;
		  /* 82158B5Ch */ case    6:  		/* mr R4, R29 */
		/* 82158B5Ch case    6:*/		regs.R4 = regs.R29;
		/* 82158B5Ch case    6:*/		return 0x82158B60;
		  /* 82158B60h */ case    7:  		/* b 48 */
		/* 82158B60h case    7:*/		return 0x82158B90;
		/* 82158B60h case    7:*/		return 0x82158B64;
	}
	return 0x82158B64;
} // Block from 82158B44h-82158B64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82158B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B64);
		  /* 82158B64h */ case    0:  		/* lis R11, -32255 */
		/* 82158B64h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158B64h case    0:*/		return 0x82158B68;
		  /* 82158B68h */ case    1:  		/* addi R4, R11, 12548 */
		/* 82158B68h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3104);
		/* 82158B68h case    1:*/		return 0x82158B6C;
		  /* 82158B6Ch */ case    2:  		/* b 36 */
		/* 82158B6Ch case    2:*/		return 0x82158B90;
		/* 82158B6Ch case    2:*/		return 0x82158B70;
	}
	return 0x82158B70;
} // Block from 82158B64h-82158B70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82158B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B70);
		  /* 82158B70h */ case    0:  		/* rlwinm R11, R23, 0, 29, 29 */
		/* 82158B70h case    0:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R11,regs.R23);
		/* 82158B70h case    0:*/		return 0x82158B74;
		  /* 82158B74h */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 82158B74h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82158B74h case    1:*/		return 0x82158B78;
		  /* 82158B78h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82158B78h case    2:*/		if ( regs.CR[6].eq ) { return 0x82158B88;  }
		/* 82158B78h case    2:*/		return 0x82158B7C;
		  /* 82158B7Ch */ case    3:  		/* cmpwi CR6, R22, 0 */
		/* 82158B7Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82158B7Ch case    3:*/		return 0x82158B80;
		  /* 82158B80h */ case    4:  		/* mr R4, R28 */
		/* 82158B80h case    4:*/		regs.R4 = regs.R28;
		/* 82158B80h case    4:*/		return 0x82158B84;
		  /* 82158B84h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82158B84h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82158B8C;  }
		/* 82158B84h case    5:*/		return 0x82158B88;
	}
	return 0x82158B88;
} // Block from 82158B70h-82158B88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B88);
		  /* 82158B88h */ case    0:  		/* mr R4, R30 */
		/* 82158B88h case    0:*/		regs.R4 = regs.R30;
		/* 82158B88h case    0:*/		return 0x82158B8C;
	}
	return 0x82158B8C;
} // Block from 82158B88h-82158B8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B8C);
		  /* 82158B8Ch */ case    0:  		/* mr R3, R31 */
		/* 82158B8Ch case    0:*/		regs.R3 = regs.R31;
		/* 82158B8Ch case    0:*/		return 0x82158B90;
	}
	return 0x82158B90;
} // Block from 82158B8Ch-82158B90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158B90);
		  /* 82158B90h */ case    0:  		/* bl -3176 */
		/* 82158B90h case    0:*/		regs.LR = 0x82158B94; return 0x82157F28;
		/* 82158B90h case    0:*/		return 0x82158B94;
		  /* 82158B94h */ case    1:  		/* rlwinm. R11, R24, 0, 28, 28 */
		/* 82158B94h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R24);
		/* 82158B94h case    1:*/		return 0x82158B98;
		  /* 82158B98h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 82158B98h case    2:*/		if ( regs.CR[0].eq ) { return 0x82158BBC;  }
		/* 82158B98h case    2:*/		return 0x82158B9C;
		  /* 82158B9Ch */ case    3:  		/* rlwinm. R11, R23, 0, 28, 28 */
		/* 82158B9Ch case    3:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R23);
		/* 82158B9Ch case    3:*/		return 0x82158BA0;
		  /* 82158BA0h */ case    4:  		/* mr R3, R31 */
		/* 82158BA0h case    4:*/		regs.R3 = regs.R31;
		/* 82158BA0h case    4:*/		return 0x82158BA4;
		  /* 82158BA4h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82158BA4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82158BB0;  }
		/* 82158BA4h case    5:*/		return 0x82158BA8;
		  /* 82158BA8h */ case    6:  		/* mr R4, R29 */
		/* 82158BA8h case    6:*/		regs.R4 = regs.R29;
		/* 82158BA8h case    6:*/		return 0x82158BAC;
		  /* 82158BACh */ case    7:  		/* b 48 */
		/* 82158BACh case    7:*/		return 0x82158BDC;
		/* 82158BACh case    7:*/		return 0x82158BB0;
	}
	return 0x82158BB0;
} // Block from 82158B90h-82158BB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82158BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BB0);
		  /* 82158BB0h */ case    0:  		/* lis R11, -32255 */
		/* 82158BB0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158BB0h case    0:*/		return 0x82158BB4;
		  /* 82158BB4h */ case    1:  		/* addi R4, R11, 12532 */
		/* 82158BB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x30F4);
		/* 82158BB4h case    1:*/		return 0x82158BB8;
		  /* 82158BB8h */ case    2:  		/* b 36 */
		/* 82158BB8h case    2:*/		return 0x82158BDC;
		/* 82158BB8h case    2:*/		return 0x82158BBC;
	}
	return 0x82158BBC;
} // Block from 82158BB0h-82158BBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82158BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BBC);
		  /* 82158BBCh */ case    0:  		/* rlwinm R11, R23, 0, 28, 28 */
		/* 82158BBCh case    0:*/		cpu::op::rlwinm<0,0,28,28>(regs,&regs.R11,regs.R23);
		/* 82158BBCh case    0:*/		return 0x82158BC0;
		  /* 82158BC0h */ case    1:  		/* cmpwi CR6, R11, 8 */
		/* 82158BC0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 82158BC0h case    1:*/		return 0x82158BC4;
		  /* 82158BC4h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82158BC4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82158BD4;  }
		/* 82158BC4h case    2:*/		return 0x82158BC8;
		  /* 82158BC8h */ case    3:  		/* cmpwi CR6, R22, 0 */
		/* 82158BC8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82158BC8h case    3:*/		return 0x82158BCC;
		  /* 82158BCCh */ case    4:  		/* mr R4, R28 */
		/* 82158BCCh case    4:*/		regs.R4 = regs.R28;
		/* 82158BCCh case    4:*/		return 0x82158BD0;
		  /* 82158BD0h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82158BD0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82158BD8;  }
		/* 82158BD0h case    5:*/		return 0x82158BD4;
	}
	return 0x82158BD4;
} // Block from 82158BBCh-82158BD4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BD4);
		  /* 82158BD4h */ case    0:  		/* mr R4, R30 */
		/* 82158BD4h case    0:*/		regs.R4 = regs.R30;
		/* 82158BD4h case    0:*/		return 0x82158BD8;
	}
	return 0x82158BD8;
} // Block from 82158BD4h-82158BD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BD8);
		  /* 82158BD8h */ case    0:  		/* mr R3, R31 */
		/* 82158BD8h case    0:*/		regs.R3 = regs.R31;
		/* 82158BD8h case    0:*/		return 0x82158BDC;
	}
	return 0x82158BDC;
} // Block from 82158BD8h-82158BDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BDC);
		  /* 82158BDCh */ case    0:  		/* bl -3252 */
		/* 82158BDCh case    0:*/		regs.LR = 0x82158BE0; return 0x82157F28;
		/* 82158BDCh case    0:*/		return 0x82158BE0;
	}
	return 0x82158BE0;
} // Block from 82158BDCh-82158BE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BE0);
		  /* 82158BE0h */ case    0:  		/* cmpwi CR6, R21, 0 */
		/* 82158BE0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 82158BE0h case    0:*/		return 0x82158BE4;
		  /* 82158BE4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82158BE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82158BF0;  }
		/* 82158BE4h case    1:*/		return 0x82158BE8;
		  /* 82158BE8h */ case    2:  		/* mr R4, R20 */
		/* 82158BE8h case    2:*/		regs.R4 = regs.R20;
		/* 82158BE8h case    2:*/		return 0x82158BEC;
		  /* 82158BECh */ case    3:  		/* b 12 */
		/* 82158BECh case    3:*/		return 0x82158BF8;
		/* 82158BECh case    3:*/		return 0x82158BF0;
	}
	return 0x82158BF0;
} // Block from 82158BE0h-82158BF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82158BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BF0);
		  /* 82158BF0h */ case    0:  		/* lis R11, -32256 */
		/* 82158BF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158BF0h case    0:*/		return 0x82158BF4;
		  /* 82158BF4h */ case    1:  		/* addi R4, R11, 4485 */
		/* 82158BF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1185);
		/* 82158BF4h case    1:*/		return 0x82158BF8;
	}
	return 0x82158BF8;
} // Block from 82158BF0h-82158BF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158BF8);
		  /* 82158BF8h */ case    0:  		/* mr R3, R31 */
		/* 82158BF8h case    0:*/		regs.R3 = regs.R31;
		/* 82158BF8h case    0:*/		return 0x82158BFC;
		  /* 82158BFCh */ case    1:  		/* bl -3284 */
		/* 82158BFCh case    1:*/		regs.LR = 0x82158C00; return 0x82157F28;
		/* 82158BFCh case    1:*/		return 0x82158C00;
		  /* 82158C00h */ case    2:  		/* cmpwi CR6, R19, 0 */
		/* 82158C00h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 82158C00h case    2:*/		return 0x82158C04;
		  /* 82158C04h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 82158C04h case    3:*/		if ( regs.CR[6].eq ) { return 0x82158C18;  }
		/* 82158C04h case    3:*/		return 0x82158C08;
		  /* 82158C08h */ case    4:  		/* lis R11, -32252 */
		/* 82158C08h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158C08h case    4:*/		return 0x82158C0C;
		  /* 82158C0Ch */ case    5:  		/* mr R3, R31 */
		/* 82158C0Ch case    5:*/		regs.R3 = regs.R31;
		/* 82158C0Ch case    5:*/		return 0x82158C10;
		  /* 82158C10h */ case    6:  		/* addi R4, R11, -23696 */
		/* 82158C10h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA370);
		/* 82158C10h case    6:*/		return 0x82158C14;
		  /* 82158C14h */ case    7:  		/* bl -3308 */
		/* 82158C14h case    7:*/		regs.LR = 0x82158C18; return 0x82157F28;
		/* 82158C14h case    7:*/		return 0x82158C18;
	}
	return 0x82158C18;
} // Block from 82158BF8h-82158C18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82158C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C18);
		  /* 82158C18h */ case    0:  		/* addi R1, R1, 256 */
		/* 82158C18h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82158C18h case    0:*/		return 0x82158C1C;
		  /* 82158C1Ch */ case    1:  		/* b -817560 */
		/* 82158C1Ch case    1:*/		return 0x82091284;
		/* 82158C1Ch case    1:*/		return 0x82158C20;
	}
	return 0x82158C20;
} // Block from 82158C18h-82158C20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C20);
		  /* 82158C20h */ case    0:  		/* mfspr R12, LR */
		/* 82158C20h case    0:*/		regs.R12 = regs.LR;
		/* 82158C20h case    0:*/		return 0x82158C24;
		  /* 82158C24h */ case    1:  		/* bl -817640 */
		/* 82158C24h case    1:*/		regs.LR = 0x82158C28; return 0x8209123C;
		/* 82158C24h case    1:*/		return 0x82158C28;
		  /* 82158C28h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82158C28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82158C28h case    2:*/		return 0x82158C2C;
		  /* 82158C2Ch */ case    3:  		/* mr R27, R3 */
		/* 82158C2Ch case    3:*/		regs.R27 = regs.R3;
		/* 82158C2Ch case    3:*/		return 0x82158C30;
		  /* 82158C30h */ case    4:  		/* mr R31, R4 */
		/* 82158C30h case    4:*/		regs.R31 = regs.R4;
		/* 82158C30h case    4:*/		return 0x82158C34;
		  /* 82158C34h */ case    5:  		/* mr R23, R7 */
		/* 82158C34h case    5:*/		regs.R23 = regs.R7;
		/* 82158C34h case    5:*/		return 0x82158C38;
		  /* 82158C38h */ case    6:  		/* mr R29, R10 */
		/* 82158C38h case    6:*/		regs.R29 = regs.R10;
		/* 82158C38h case    6:*/		return 0x82158C3C;
		  /* 82158C3Ch */ case    7:  		/* cmpwi CR6, R4, 0 */
		/* 82158C3Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 82158C3Ch case    7:*/		return 0x82158C40;
		  /* 82158C40h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82158C40h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82158C4C;  }
		/* 82158C40h case    8:*/		return 0x82158C44;
		  /* 82158C44h */ case    9:  		/* cmpwi CR6, R8, 0 */
		/* 82158C44h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82158C44h case    9:*/		return 0x82158C48;
		  /* 82158C48h */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 82158C48h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82158C5C;  }
		/* 82158C48h case   10:*/		return 0x82158C4C;
	}
	return 0x82158C4C;
} // Block from 82158C20h-82158C4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82158C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C4C);
		  /* 82158C4Ch */ case    0:  		/* cmpwi CR6, R31, 1 */
		/* 82158C4Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000001);
		/* 82158C4Ch case    0:*/		return 0x82158C50;
		  /* 82158C50h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82158C50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82158C64;  }
		/* 82158C50h case    1:*/		return 0x82158C54;
		  /* 82158C54h */ case    2:  		/* rlwinm. R11, R5, 0, 24, 24 */
		/* 82158C54h case    2:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R5);
		/* 82158C54h case    2:*/		return 0x82158C58;
		  /* 82158C58h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82158C58h case    3:*/		if ( regs.CR[0].eq ) { return 0x82158C64;  }
		/* 82158C58h case    3:*/		return 0x82158C5C;
	}
	return 0x82158C5C;
} // Block from 82158C4Ch-82158C5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82158C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C5C);
		  /* 82158C5Ch */ case    0:  		/* li R21, 1 */
		/* 82158C5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 82158C5Ch case    0:*/		return 0x82158C60;
		  /* 82158C60h */ case    1:  		/* b 8 */
		/* 82158C60h case    1:*/		return 0x82158C68;
		/* 82158C60h case    1:*/		return 0x82158C64;
	}
	return 0x82158C64;
} // Block from 82158C5Ch-82158C64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C64);
		  /* 82158C64h */ case    0:  		/* li R21, 0 */
		/* 82158C64h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82158C64h case    0:*/		return 0x82158C68;
	}
	return 0x82158C68;
} // Block from 82158C64h-82158C68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158C68);
		  /* 82158C68h */ case    0:  		/* srawi R11, R5, 6 */
		/* 82158C68h case    0:*/		cpu::op::srawi<0,6>(regs,&regs.R11,regs.R5);
		/* 82158C68h case    0:*/		return 0x82158C6C;
		  /* 82158C6Ch */ case    1:  		/* subfic R10, R31, 0 */
		/* 82158C6Ch case    1:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R31,0x0);
		/* 82158C6Ch case    1:*/		return 0x82158C70;
		  /* 82158C70h */ case    2:  		/* and R7, R11, R31 */
		/* 82158C70h case    2:*/		cpu::op::and<0>(regs,&regs.R7,regs.R11,regs.R31);
		/* 82158C70h case    2:*/		return 0x82158C74;
		  /* 82158C74h */ case    3:  		/* subfe R10, R10, R10 */
		/* 82158C74h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82158C74h case    3:*/		return 0x82158C78;
		  /* 82158C78h */ case    4:  		/* cntlzw R8, R31 */
		/* 82158C78h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R31);
		/* 82158C78h case    4:*/		return 0x82158C7C;
		  /* 82158C7Ch */ case    5:  		/* rlwinm R11, R10, 0, 0, 25 */
		/* 82158C7Ch case    5:*/		cpu::op::rlwinm<0,0,0,25>(regs,&regs.R11,regs.R10);
		/* 82158C7Ch case    5:*/		return 0x82158C80;
		  /* 82158C80h */ case    6:  		/* rlwinm R10, R8, 27, 31, 31 */
		/* 82158C80h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R8);
		/* 82158C80h case    6:*/		return 0x82158C84;
		  /* 82158C84h */ case    7:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 82158C84h case    7:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 82158C84h case    7:*/		return 0x82158C88;
		  /* 82158C88h */ case    8:  		/* rlwinm R30, R7, 0, 31, 31 */
		/* 82158C88h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R30,regs.R7);
		/* 82158C88h case    8:*/		return 0x82158C8C;
		  /* 82158C8Ch */ case    9:  		/* addi R11, R11, 255 */
		/* 82158C8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFF);
		/* 82158C8Ch case    9:*/		return 0x82158C90;
		  /* 82158C90h */ case   10:  		/* and R24, R10, R6 */
		/* 82158C90h case   10:*/		cpu::op::and<0>(regs,&regs.R24,regs.R10,regs.R6);
		/* 82158C90h case   10:*/		return 0x82158C94;
		  /* 82158C94h */ case   11:  		/* and R26, R11, R5 */
		/* 82158C94h case   11:*/		cpu::op::and<0>(regs,&regs.R26,regs.R11,regs.R5);
		/* 82158C94h case   11:*/		return 0x82158C98;
		  /* 82158C98h */ case   12:  		/* cmpwi CR6, R9, 0 */
		/* 82158C98h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 82158C98h case   12:*/		return 0x82158C9C;
		  /* 82158C9Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 82158C9Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82158CB0;  }
		/* 82158C9Ch case   13:*/		return 0x82158CA0;
		  /* 82158CA0h */ case   14:  		/* lis R11, -32255 */
		/* 82158CA0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158CA0h case   14:*/		return 0x82158CA4;
		  /* 82158CA4h */ case   15:  		/* mr R3, R27 */
		/* 82158CA4h case   15:*/		regs.R3 = regs.R27;
		/* 82158CA4h case   15:*/		return 0x82158CA8;
		  /* 82158CA8h */ case   16:  		/* addi R4, R11, -16532 */
		/* 82158CA8h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFBF6C);
		/* 82158CA8h case   16:*/		return 0x82158CAC;
		  /* 82158CACh */ case   17:  		/* bl -3460 */
		/* 82158CACh case   17:*/		regs.LR = 0x82158CB0; return 0x82157F28;
		/* 82158CACh case   17:*/		return 0x82158CB0;
	}
	return 0x82158CB0;
} // Block from 82158C68h-82158CB0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82158CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158CB0);
		  /* 82158CB0h */ case    0:  		/* lis R11, -32255 */
		/* 82158CB0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158CB0h case    0:*/		return 0x82158CB4;
		  /* 82158CB4h */ case    1:  		/* cmpwi CR6, R21, 0 */
		/* 82158CB4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 82158CB4h case    1:*/		return 0x82158CB8;
		  /* 82158CB8h */ case    2:  		/* addi R22, R11, -16588 */
		/* 82158CB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFFBF34);
		/* 82158CB8h case    2:*/		return 0x82158CBC;
		  /* 82158CBCh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82158CBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82158CCC;  }
		/* 82158CBCh case    3:*/		return 0x82158CC0;
		  /* 82158CC0h */ case    4:  		/* mr R4, R22 */
		/* 82158CC0h case    4:*/		regs.R4 = regs.R22;
		/* 82158CC0h case    4:*/		return 0x82158CC4;
		  /* 82158CC4h */ case    5:  		/* mr R3, R27 */
		/* 82158CC4h case    5:*/		regs.R3 = regs.R27;
		/* 82158CC4h case    5:*/		return 0x82158CC8;
		  /* 82158CC8h */ case    6:  		/* bl -3488 */
		/* 82158CC8h case    6:*/		regs.LR = 0x82158CCC; return 0x82157F28;
		/* 82158CC8h case    6:*/		return 0x82158CCC;
	}
	return 0x82158CCC;
} // Block from 82158CB0h-82158CCCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82158CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158CCC);
		  /* 82158CCCh */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 82158CCCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82158CCCh case    0:*/		return 0x82158CD0;
		  /* 82158CD0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82158CD0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82158CE0;  }
		/* 82158CD0h case    1:*/		return 0x82158CD4;
		  /* 82158CD4h */ case    2:  		/* cmpwi CR6, R24, 0 */
		/* 82158CD4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82158CD4h case    2:*/		return 0x82158CD8;
		  /* 82158CD8h */ case    3:  		/* li R10, 0 */
		/* 82158CD8h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82158CD8h case    3:*/		return 0x82158CDC;
		  /* 82158CDCh */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82158CDCh case    4:*/		if ( regs.CR[6].eq ) { return 0x82158CE4;  }
		/* 82158CDCh case    4:*/		return 0x82158CE0;
	}
	return 0x82158CE0;
} // Block from 82158CCCh-82158CE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82158CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158CE0);
		  /* 82158CE0h */ case    0:  		/* li R10, 1 */
		/* 82158CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82158CE0h case    0:*/		return 0x82158CE4;
	}
	return 0x82158CE4;
} // Block from 82158CE0h-82158CE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82158CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158CE4);
		  /* 82158CE4h */ case    0:  		/* subfic R9, R31, 0 */
		/* 82158CE4h case    0:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R31,0x0);
		/* 82158CE4h case    0:*/		return 0x82158CE8;
		  /* 82158CE8h */ case    1:  		/* lis R11, -32253 */
		/* 82158CE8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82158CE8h case    1:*/		return 0x82158CEC;
		  /* 82158CECh */ case    2:  		/* subfe R9, R9, R9 */
		/* 82158CECh case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82158CECh case    2:*/		return 0x82158CF0;
		  /* 82158CF0h */ case    3:  		/* addi R25, R11, 25796 */
		/* 82158CF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x64C4);
		/* 82158CF0h case    3:*/		return 0x82158CF4;
		  /* 82158CF4h */ case    4:  		/* rlwinm R11, R9, 0, 28, 31 */
		/* 82158CF4h case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R9);
		/* 82158CF4h case    4:*/		return 0x82158CF8;
		  /* 82158CF8h */ case    5:  		/* mr R4, R25 */
		/* 82158CF8h case    5:*/		regs.R4 = regs.R25;
		/* 82158CF8h case    5:*/		return 0x82158CFC;
		  /* 82158CFCh */ case    6:  		/* mr R3, R27 */
		/* 82158CFCh case    6:*/		regs.R3 = regs.R27;
		/* 82158CFCh case    6:*/		return 0x82158D00;
		  /* 82158D00h */ case    7:  		/* addi R5, R11, 99 */
		/* 82158D00h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x63);
		/* 82158D00h case    7:*/		return 0x82158D04;
		  /* 82158D04h */ case    8:  		/* rlwinm R31, R10, 0, 24, 31 */
		/* 82158D04h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R31,regs.R10);
		/* 82158D04h case    8:*/		return 0x82158D08;
		  /* 82158D08h */ case    9:  		/* bl -3552 */
		/* 82158D08h case    9:*/		regs.LR = 0x82158D0C; return 0x82157F28;
		/* 82158D08h case    9:*/		return 0x82158D0C;
		  /* 82158D0Ch */ case   10:  		/* mr R28, R31 */
		/* 82158D0Ch case   10:*/		regs.R28 = regs.R31;
		/* 82158D0Ch case   10:*/		return 0x82158D10;
		  /* 82158D10h */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 82158D10h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82158D10h case   11:*/		return 0x82158D14;
		  /* 82158D14h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 82158D14h case   12:*/		if ( regs.CR[0].eq ) { return 0x82158D28;  }
		/* 82158D14h case   12:*/		return 0x82158D18;
		  /* 82158D18h */ case   13:  		/* lis R11, -32252 */
		/* 82158D18h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158D18h case   13:*/		return 0x82158D1C;
		  /* 82158D1Ch */ case   14:  		/* mr R3, R27 */
		/* 82158D1Ch case   14:*/		regs.R3 = regs.R27;
		/* 82158D1Ch case   14:*/		return 0x82158D20;
		  /* 82158D20h */ case   15:  		/* addi R4, R11, -23676 */
		/* 82158D20h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA384);
		/* 82158D20h case   15:*/		return 0x82158D24;
		  /* 82158D24h */ case   16:  		/* bl -3580 */
		/* 82158D24h case   16:*/		regs.LR = 0x82158D28; return 0x82157F28;
		/* 82158D24h case   16:*/		return 0x82158D28;
	}
	return 0x82158D28;
} // Block from 82158CE4h-82158D28h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82158D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D28);
		  /* 82158D28h */ case    0:  		/* lis R11, -32253 */
		/* 82158D28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82158D28h case    0:*/		return 0x82158D2C;
		  /* 82158D2Ch */ case    1:  		/* mr R5, R26 */
		/* 82158D2Ch case    1:*/		regs.R5 = regs.R26;
		/* 82158D2Ch case    1:*/		return 0x82158D30;
		  /* 82158D30h */ case    2:  		/* addi R4, R11, 26668 */
		/* 82158D30h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x682C);
		/* 82158D30h case    2:*/		return 0x82158D34;
		  /* 82158D34h */ case    3:  		/* mr R3, R27 */
		/* 82158D34h case    3:*/		regs.R3 = regs.R27;
		/* 82158D34h case    3:*/		return 0x82158D38;
		  /* 82158D38h */ case    4:  		/* bl -3600 */
		/* 82158D38h case    4:*/		regs.LR = 0x82158D3C; return 0x82157F28;
		/* 82158D38h case    4:*/		return 0x82158D3C;
		  /* 82158D3Ch */ case    5:  		/* lis R11, -32252 */
		/* 82158D3Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158D3Ch case    5:*/		return 0x82158D40;
		  /* 82158D40h */ case    6:  		/* cmpwi CR6, R30, 0 */
		/* 82158D40h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82158D40h case    6:*/		return 0x82158D44;
		  /* 82158D44h */ case    7:  		/* addi R31, R11, -23680 */
		/* 82158D44h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFA380);
		/* 82158D44h case    7:*/		return 0x82158D48;
		  /* 82158D48h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82158D48h case    8:*/		if ( regs.CR[6].eq ) { return 0x82158D58;  }
		/* 82158D48h case    8:*/		return 0x82158D4C;
		  /* 82158D4Ch */ case    9:  		/* mr R4, R31 */
		/* 82158D4Ch case    9:*/		regs.R4 = regs.R31;
		/* 82158D4Ch case    9:*/		return 0x82158D50;
		  /* 82158D50h */ case   10:  		/* mr R3, R27 */
		/* 82158D50h case   10:*/		regs.R3 = regs.R27;
		/* 82158D50h case   10:*/		return 0x82158D54;
		  /* 82158D54h */ case   11:  		/* bl -3628 */
		/* 82158D54h case   11:*/		regs.LR = 0x82158D58; return 0x82157F28;
		/* 82158D54h case   11:*/		return 0x82158D58;
	}
	return 0x82158D58;
} // Block from 82158D28h-82158D58h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82158D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D58);
		  /* 82158D58h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 82158D58h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82158D58h case    0:*/		return 0x82158D5C;
		  /* 82158D5Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82158D5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82158D80;  }
		/* 82158D5Ch case    1:*/		return 0x82158D60;
		  /* 82158D60h */ case    2:  		/* cmpwi CR6, R23, 0 */
		/* 82158D60h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 82158D60h case    2:*/		return 0x82158D64;
		  /* 82158D64h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82158D64h case    3:*/		if ( regs.CR[6].eq ) { return 0x82158D70;  }
		/* 82158D64h case    3:*/		return 0x82158D68;
		  /* 82158D68h */ case    4:  		/* mr R4, R31 */
		/* 82158D68h case    4:*/		regs.R4 = regs.R31;
		/* 82158D68h case    4:*/		return 0x82158D6C;
		  /* 82158D6Ch */ case    5:  		/* b 12 */
		/* 82158D6Ch case    5:*/		return 0x82158D78;
		/* 82158D6Ch case    5:*/		return 0x82158D70;
	}
	return 0x82158D70;
} // Block from 82158D58h-82158D70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D70);
		  /* 82158D70h */ case    0:  		/* lis R11, -32252 */
		/* 82158D70h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158D70h case    0:*/		return 0x82158D74;
		  /* 82158D74h */ case    1:  		/* addi R4, R11, -23672 */
		/* 82158D74h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA388);
		/* 82158D74h case    1:*/		return 0x82158D78;
	}
	return 0x82158D78;
} // Block from 82158D70h-82158D78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D78);
		  /* 82158D78h */ case    0:  		/* mr R3, R27 */
		/* 82158D78h case    0:*/		regs.R3 = regs.R27;
		/* 82158D78h case    0:*/		return 0x82158D7C;
		  /* 82158D7Ch */ case    1:  		/* bl -3668 */
		/* 82158D7Ch case    1:*/		regs.LR = 0x82158D80; return 0x82157F28;
		/* 82158D7Ch case    1:*/		return 0x82158D80;
	}
	return 0x82158D80;
} // Block from 82158D78h-82158D80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158D80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D80);
		  /* 82158D80h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82158D80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82158D80h case    0:*/		return 0x82158D84;
		  /* 82158D84h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82158D84h case    1:*/		if ( regs.CR[6].eq ) { return 0x82158D98;  }
		/* 82158D84h case    1:*/		return 0x82158D88;
		  /* 82158D88h */ case    2:  		/* lis R11, -32252 */
		/* 82158D88h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158D88h case    2:*/		return 0x82158D8C;
		  /* 82158D8Ch */ case    3:  		/* mr R3, R27 */
		/* 82158D8Ch case    3:*/		regs.R3 = regs.R27;
		/* 82158D8Ch case    3:*/		return 0x82158D90;
		  /* 82158D90h */ case    4:  		/* addi R4, R11, -23684 */
		/* 82158D90h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA37C);
		/* 82158D90h case    4:*/		return 0x82158D94;
		  /* 82158D94h */ case    5:  		/* bl -3692 */
		/* 82158D94h case    5:*/		regs.LR = 0x82158D98; return 0x82157F28;
		/* 82158D94h case    5:*/		return 0x82158D98;
	}
	return 0x82158D98;
} // Block from 82158D80h-82158D98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82158D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158D98);
		  /* 82158D98h */ case    0:  		/* lwz R28, <#[R1 + 340]> */
		/* 82158D98h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000154) );
		/* 82158D98h case    0:*/		return 0x82158D9C;
		  /* 82158D9Ch */ case    1:  		/* li R11, 4 */
		/* 82158D9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82158D9Ch case    1:*/		return 0x82158DA0;
		  /* 82158DA0h */ case    2:  		/* cmpwi CR6, R29, 0 */
		/* 82158DA0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82158DA0h case    2:*/		return 0x82158DA4;
		  /* 82158DA4h */ case    3:  		/* subfc R10, R11, R28 */
		/* 82158DA4h case    3:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 82158DA4h case    3:*/		return 0x82158DA8;
		  /* 82158DA8h */ case    4:  		/* eqv R11, R11, R28 */
		/* 82158DA8h case    4:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82158DA8h case    4:*/		return 0x82158DAC;
		  /* 82158DACh */ case    5:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 82158DACh case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 82158DACh case    5:*/		return 0x82158DB0;
		  /* 82158DB0h */ case    6:  		/* addze R11, R11 */
		/* 82158DB0h case    6:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 82158DB0h case    6:*/		return 0x82158DB4;
		  /* 82158DB4h */ case    7:  		/* rlwinm R23, R11, 0, 31, 31 */
		/* 82158DB4h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R23,regs.R11);
		/* 82158DB4h case    7:*/		return 0x82158DB8;
		  /* 82158DB8h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82158DB8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82158DC4;  }
		/* 82158DB8h case    8:*/		return 0x82158DBC;
		  /* 82158DBCh */ case    9:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 82158DBCh case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 82158DBCh case    9:*/		return 0x82158DC0;
		  /* 82158DC0h */ case   10:  		/* bc 12, CR0_EQ, 244 */
		/* 82158DC0h case   10:*/		if ( regs.CR[0].eq ) { return 0x82158EB4;  }
		/* 82158DC0h case   10:*/		return 0x82158DC4;
	}
	return 0x82158DC4;
} // Block from 82158D98h-82158DC4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82158DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158DC4);
		  /* 82158DC4h */ case    0:  		/* lis R11, -32256 */
		/* 82158DC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158DC4h case    0:*/		return 0x82158DC8;
		  /* 82158DC8h */ case    1:  		/* mr R3, R27 */
		/* 82158DC8h case    1:*/		regs.R3 = regs.R27;
		/* 82158DC8h case    1:*/		return 0x82158DCC;
		  /* 82158DCCh */ case    2:  		/* addi R4, R11, 20592 */
		/* 82158DCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5070);
		/* 82158DCCh case    2:*/		return 0x82158DD0;
		  /* 82158DD0h */ case    3:  		/* bl -3752 */
		/* 82158DD0h case    3:*/		regs.LR = 0x82158DD4; return 0x82157F28;
		/* 82158DD0h case    3:*/		return 0x82158DD4;
		  /* 82158DD4h */ case    4:  		/* lis R11, -32255 */
		/* 82158DD4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158DD4h case    4:*/		return 0x82158DD8;
		  /* 82158DD8h */ case    5:  		/* srawi R9, R29, 2 */
		/* 82158DD8h case    5:*/		cpu::op::srawi<0,2>(regs,&regs.R9,regs.R29);
		/* 82158DD8h case    5:*/		return 0x82158DDC;
		  /* 82158DDCh */ case    6:  		/* addi R30, R11, 12500 */
		/* 82158DDCh case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x30D4);
		/* 82158DDCh case    6:*/		return 0x82158DE0;
		  /* 82158DE0h */ case    7:  		/* srawi R10, R29, 4 */
		/* 82158DE0h case    7:*/		cpu::op::srawi<0,4>(regs,&regs.R10,regs.R29);
		/* 82158DE0h case    7:*/		return 0x82158DE4;
		  /* 82158DE4h */ case    8:  		/* srawi R11, R29, 6 */
		/* 82158DE4h case    8:*/		cpu::op::srawi<0,6>(regs,&regs.R11,regs.R29);
		/* 82158DE4h case    8:*/		return 0x82158DE8;
		  /* 82158DE8h */ case    9:  		/* rlwinm R31, R29, 0, 30, 31 */
		/* 82158DE8h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R31,regs.R29);
		/* 82158DE8h case    9:*/		return 0x82158DEC;
		  /* 82158DECh */ case   10:  		/* addi R11, R11, -1 */
		/* 82158DECh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82158DECh case   10:*/		return 0x82158DF0;
		  /* 82158DF0h */ case   11:  		/* addi R9, R9, 1 */
		/* 82158DF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82158DF0h case   11:*/		return 0x82158DF4;
		  /* 82158DF4h */ case   12:  		/* rlwinm R24, R11, 0, 30, 31 */
		/* 82158DF4h case   12:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R24,regs.R11);
		/* 82158DF4h case   12:*/		return 0x82158DF8;
		  /* 82158DF8h */ case   13:  		/* addi R10, R10, -2 */
		/* 82158DF8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 82158DF8h case   13:*/		return 0x82158DFC;
		  /* 82158DFCh */ case   14:  		/* mr R4, R25 */
		/* 82158DFCh case   14:*/		regs.R4 = regs.R25;
		/* 82158DFCh case   14:*/		return 0x82158E00;
		  /* 82158E00h */ case   15:  		/* mr R3, R27 */
		/* 82158E00h case   15:*/		regs.R3 = regs.R27;
		/* 82158E00h case   15:*/		return 0x82158E04;
		  /* 82158E04h */ case   16:  		/* rlwinm R29, R9, 0, 30, 31 */
		/* 82158E04h case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R29,regs.R9);
		/* 82158E04h case   16:*/		return 0x82158E08;
		  /* 82158E08h */ case   17:  		/* rlwinm R26, R10, 0, 30, 31 */
		/* 82158E08h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R26,regs.R10);
		/* 82158E08h case   17:*/		return 0x82158E0C;
		  /* 82158E0Ch */ case   18:  		/* lbzx R11, <#[R31 + R30]> */
		/* 82158E0Ch case   18:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82158E0Ch case   18:*/		return 0x82158E10;
		  /* 82158E10h */ case   19:  		/* extsb R5, R11 */
		/* 82158E10h case   19:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158E10h case   19:*/		return 0x82158E14;
		  /* 82158E14h */ case   20:  		/* bl -3820 */
		/* 82158E14h case   20:*/		regs.LR = 0x82158E18; return 0x82157F28;
		/* 82158E14h case   20:*/		return 0x82158E18;
		  /* 82158E18h */ case   21:  		/* cmpwi CR6, R28, 1 */
		/* 82158E18h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000001);
		/* 82158E18h case   21:*/		return 0x82158E1C;
		  /* 82158E1Ch */ case   22:  		/* bc 4, CR6_GT, 152 */
		/* 82158E1Ch case   22:*/		if ( !regs.CR[6].gt ) { return 0x82158EB4;  }
		/* 82158E1Ch case   22:*/		return 0x82158E20;
		  /* 82158E20h */ case   23:  		/* rlwinm. R23, R23, 0, 24, 31 */
		/* 82158E20h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R23,regs.R23);
		/* 82158E20h case   23:*/		return 0x82158E24;
		  /* 82158E24h */ case   24:  		/* bc 4, CR0_EQ, 28 */
		/* 82158E24h case   24:*/		if ( !regs.CR[0].eq ) { return 0x82158E40;  }
		/* 82158E24h case   24:*/		return 0x82158E28;
		  /* 82158E28h */ case   25:  		/* cmpw CR6, R29, R31 */
		/* 82158E28h case   25:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R31);
		/* 82158E28h case   25:*/		return 0x82158E2C;
		  /* 82158E2Ch */ case   26:  		/* bc 4, CR6_EQ, 20 */
		/* 82158E2Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x82158E40;  }
		/* 82158E2Ch case   26:*/		return 0x82158E30;
		  /* 82158E30h */ case   27:  		/* cmpw CR6, R26, R31 */
		/* 82158E30h case   27:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R31);
		/* 82158E30h case   27:*/		return 0x82158E34;
		  /* 82158E34h */ case   28:  		/* bc 4, CR6_EQ, 12 */
		/* 82158E34h case   28:*/		if ( !regs.CR[6].eq ) { return 0x82158E40;  }
		/* 82158E34h case   28:*/		return 0x82158E38;
		  /* 82158E38h */ case   29:  		/* cmpw CR6, R24, R31 */
		/* 82158E38h case   29:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R31);
		/* 82158E38h case   29:*/		return 0x82158E3C;
		  /* 82158E3Ch */ case   30:  		/* bc 12, CR6_EQ, 120 */
		/* 82158E3Ch case   30:*/		if ( regs.CR[6].eq ) { return 0x82158EB4;  }
		/* 82158E3Ch case   30:*/		return 0x82158E40;
	}
	return 0x82158E40;
} // Block from 82158DC4h-82158E40h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82158E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158E40);
		  /* 82158E40h */ case    0:  		/* lbzx R11, <#[R29 + R30]> */
		/* 82158E40h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 82158E40h case    0:*/		return 0x82158E44;
		  /* 82158E44h */ case    1:  		/* mr R4, R25 */
		/* 82158E44h case    1:*/		regs.R4 = regs.R25;
		/* 82158E44h case    1:*/		return 0x82158E48;
		  /* 82158E48h */ case    2:  		/* mr R3, R27 */
		/* 82158E48h case    2:*/		regs.R3 = regs.R27;
		/* 82158E48h case    2:*/		return 0x82158E4C;
		  /* 82158E4Ch */ case    3:  		/* extsb R5, R11 */
		/* 82158E4Ch case    3:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158E4Ch case    3:*/		return 0x82158E50;
		  /* 82158E50h */ case    4:  		/* bl -3880 */
		/* 82158E50h case    4:*/		regs.LR = 0x82158E54; return 0x82157F28;
		/* 82158E50h case    4:*/		return 0x82158E54;
		  /* 82158E54h */ case    5:  		/* cmpwi CR6, R28, 2 */
		/* 82158E54h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000002);
		/* 82158E54h case    5:*/		return 0x82158E58;
		  /* 82158E58h */ case    6:  		/* bc 4, CR6_GT, 92 */
		/* 82158E58h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82158EB4;  }
		/* 82158E58h case    6:*/		return 0x82158E5C;
		  /* 82158E5Ch */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 82158E5Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82158E5Ch case    7:*/		return 0x82158E60;
		  /* 82158E60h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82158E60h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82158E74;  }
		/* 82158E60h case    8:*/		return 0x82158E64;
		  /* 82158E64h */ case    9:  		/* cmpw CR6, R26, R29 */
		/* 82158E64h case    9:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R29);
		/* 82158E64h case    9:*/		return 0x82158E68;
		  /* 82158E68h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82158E68h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82158E74;  }
		/* 82158E68h case   10:*/		return 0x82158E6C;
		  /* 82158E6Ch */ case   11:  		/* cmpw CR6, R24, R29 */
		/* 82158E6Ch case   11:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R29);
		/* 82158E6Ch case   11:*/		return 0x82158E70;
		  /* 82158E70h */ case   12:  		/* bc 12, CR6_EQ, 68 */
		/* 82158E70h case   12:*/		if ( regs.CR[6].eq ) { return 0x82158EB4;  }
		/* 82158E70h case   12:*/		return 0x82158E74;
	}
	return 0x82158E74;
} // Block from 82158E40h-82158E74h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82158E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158E74);
		  /* 82158E74h */ case    0:  		/* lbzx R11, <#[R26 + R30]> */
		/* 82158E74h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R26 + regs.R30 + 0x00000000) );
		/* 82158E74h case    0:*/		return 0x82158E78;
		  /* 82158E78h */ case    1:  		/* mr R4, R25 */
		/* 82158E78h case    1:*/		regs.R4 = regs.R25;
		/* 82158E78h case    1:*/		return 0x82158E7C;
		  /* 82158E7Ch */ case    2:  		/* mr R3, R27 */
		/* 82158E7Ch case    2:*/		regs.R3 = regs.R27;
		/* 82158E7Ch case    2:*/		return 0x82158E80;
		  /* 82158E80h */ case    3:  		/* extsb R5, R11 */
		/* 82158E80h case    3:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158E80h case    3:*/		return 0x82158E84;
		  /* 82158E84h */ case    4:  		/* bl -3932 */
		/* 82158E84h case    4:*/		regs.LR = 0x82158E88; return 0x82157F28;
		/* 82158E84h case    4:*/		return 0x82158E88;
		  /* 82158E88h */ case    5:  		/* cmpwi CR6, R28, 3 */
		/* 82158E88h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000003);
		/* 82158E88h case    5:*/		return 0x82158E8C;
		  /* 82158E8Ch */ case    6:  		/* bc 4, CR6_GT, 40 */
		/* 82158E8Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x82158EB4;  }
		/* 82158E8Ch case    6:*/		return 0x82158E90;
		  /* 82158E90h */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 82158E90h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82158E90h case    7:*/		return 0x82158E94;
		  /* 82158E94h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82158E94h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82158EA0;  }
		/* 82158E94h case    8:*/		return 0x82158E98;
		  /* 82158E98h */ case    9:  		/* cmpw CR6, R24, R26 */
		/* 82158E98h case    9:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R26);
		/* 82158E98h case    9:*/		return 0x82158E9C;
		  /* 82158E9Ch */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82158E9Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x82158EB4;  }
		/* 82158E9Ch case   10:*/		return 0x82158EA0;
	}
	return 0x82158EA0;
} // Block from 82158E74h-82158EA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82158EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158EA0);
		  /* 82158EA0h */ case    0:  		/* lbzx R11, <#[R24 + R30]> */
		/* 82158EA0h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R24 + regs.R30 + 0x00000000) );
		/* 82158EA0h case    0:*/		return 0x82158EA4;
		  /* 82158EA4h */ case    1:  		/* mr R4, R25 */
		/* 82158EA4h case    1:*/		regs.R4 = regs.R25;
		/* 82158EA4h case    1:*/		return 0x82158EA8;
		  /* 82158EA8h */ case    2:  		/* mr R3, R27 */
		/* 82158EA8h case    2:*/		regs.R3 = regs.R27;
		/* 82158EA8h case    2:*/		return 0x82158EAC;
		  /* 82158EACh */ case    3:  		/* extsb R5, R11 */
		/* 82158EACh case    3:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158EACh case    3:*/		return 0x82158EB0;
		  /* 82158EB0h */ case    4:  		/* bl -3976 */
		/* 82158EB0h case    4:*/		regs.LR = 0x82158EB4; return 0x82157F28;
		/* 82158EB0h case    4:*/		return 0x82158EB4;
	}
	return 0x82158EB4;
} // Block from 82158EA0h-82158EB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82158EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158EB4);
		  /* 82158EB4h */ case    0:  		/* cmpwi CR6, R21, 0 */
		/* 82158EB4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000000);
		/* 82158EB4h case    0:*/		return 0x82158EB8;
		  /* 82158EB8h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82158EB8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82158EC4;  }
		/* 82158EB8h case    1:*/		return 0x82158EBC;
		  /* 82158EBCh */ case    2:  		/* mr R4, R22 */
		/* 82158EBCh case    2:*/		regs.R4 = regs.R22;
		/* 82158EBCh case    2:*/		return 0x82158EC0;
		  /* 82158EC0h */ case    3:  		/* b 12 */
		/* 82158EC0h case    3:*/		return 0x82158ECC;
		/* 82158EC0h case    3:*/		return 0x82158EC4;
	}
	return 0x82158EC4;
} // Block from 82158EB4h-82158EC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82158EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158EC4);
		  /* 82158EC4h */ case    0:  		/* lis R11, -32256 */
		/* 82158EC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158EC4h case    0:*/		return 0x82158EC8;
		  /* 82158EC8h */ case    1:  		/* addi R4, R11, 4485 */
		/* 82158EC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1185);
		/* 82158EC8h case    1:*/		return 0x82158ECC;
	}
	return 0x82158ECC;
} // Block from 82158EC4h-82158ECCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82158ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158ECC);
		  /* 82158ECCh */ case    0:  		/* mr R3, R27 */
		/* 82158ECCh case    0:*/		regs.R3 = regs.R27;
		/* 82158ECCh case    0:*/		return 0x82158ED0;
		  /* 82158ED0h */ case    1:  		/* bl -4008 */
		/* 82158ED0h case    1:*/		regs.LR = 0x82158ED4; return 0x82157F28;
		/* 82158ED0h case    1:*/		return 0x82158ED4;
		  /* 82158ED4h */ case    2:  		/* addi R1, R1, 256 */
		/* 82158ED4h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82158ED4h case    2:*/		return 0x82158ED8;
		  /* 82158ED8h */ case    3:  		/* b -818252 */
		/* 82158ED8h case    3:*/		return 0x8209128C;
		/* 82158ED8h case    3:*/		return 0x82158EDC;
		  /* 82158EDCh */ case    4:  		/* nop */
		/* 82158EDCh case    4:*/		cpu::op::nop();
		/* 82158EDCh case    4:*/		return 0x82158EE0;
	}
	return 0x82158EE0;
} // Block from 82158ECCh-82158EE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82158EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158EE0);
		  /* 82158EE0h */ case    0:  		/* mfspr R12, LR */
		/* 82158EE0h case    0:*/		regs.R12 = regs.LR;
		/* 82158EE0h case    0:*/		return 0x82158EE4;
		  /* 82158EE4h */ case    1:  		/* bl -818320 */
		/* 82158EE4h case    1:*/		regs.LR = 0x82158EE8; return 0x82091254;
		/* 82158EE4h case    1:*/		return 0x82158EE8;
		  /* 82158EE8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82158EE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82158EE8h case    2:*/		return 0x82158EEC;
		  /* 82158EECh */ case    3:  		/* srawi R11, R4, 7 */
		/* 82158EECh case    3:*/		cpu::op::srawi<0,7>(regs,&regs.R11,regs.R4);
		/* 82158EECh case    3:*/		return 0x82158EF0;
		  /* 82158EF0h */ case    4:  		/* mr R31, R3 */
		/* 82158EF0h case    4:*/		regs.R31 = regs.R3;
		/* 82158EF0h case    4:*/		return 0x82158EF4;
		  /* 82158EF4h */ case    5:  		/* mr R30, R6 */
		/* 82158EF4h case    5:*/		regs.R30 = regs.R6;
		/* 82158EF4h case    5:*/		return 0x82158EF8;
		  /* 82158EF8h */ case    6:  		/* rlwinm R28, R4, 0, 26, 31 */
		/* 82158EF8h case    6:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R28,regs.R4);
		/* 82158EF8h case    6:*/		return 0x82158EFC;
		  /* 82158EFCh */ case    7:  		/* rlwinm R27, R11, 0, 31, 31 */
		/* 82158EFCh case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R27,regs.R11);
		/* 82158EFCh case    7:*/		return 0x82158F00;
		  /* 82158F00h */ case    8:  		/* cmpwi CR6, R5, 0 */
		/* 82158F00h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82158F00h case    8:*/		return 0x82158F04;
		  /* 82158F04h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82158F04h case    9:*/		if ( regs.CR[6].eq ) { return 0x82158F14;  }
		/* 82158F04h case    9:*/		return 0x82158F08;
		  /* 82158F08h */ case   10:  		/* lis R11, -32255 */
		/* 82158F08h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158F08h case   10:*/		return 0x82158F0C;
		  /* 82158F0Ch */ case   11:  		/* addi R4, R11, -16532 */
		/* 82158F0Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFBF6C);
		/* 82158F0Ch case   11:*/		return 0x82158F10;
		  /* 82158F10h */ case   12:  		/* bl -4072 */
		/* 82158F10h case   12:*/		regs.LR = 0x82158F14; return 0x82157F28;
		/* 82158F10h case   12:*/		return 0x82158F14;
	}
	return 0x82158F14;
} // Block from 82158EE0h-82158F14h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82158F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158F14);
		  /* 82158F14h */ case    0:  		/* lis R11, -32255 */
		/* 82158F14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158F14h case    0:*/		return 0x82158F18;
		  /* 82158F18h */ case    1:  		/* cmpwi CR6, R27, 0 */
		/* 82158F18h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82158F18h case    1:*/		return 0x82158F1C;
		  /* 82158F1Ch */ case    2:  		/* addi R29, R11, -16588 */
		/* 82158F1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFBF34);
		/* 82158F1Ch case    2:*/		return 0x82158F20;
		  /* 82158F20h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82158F20h case    3:*/		if ( regs.CR[6].eq ) { return 0x82158F30;  }
		/* 82158F20h case    3:*/		return 0x82158F24;
		  /* 82158F24h */ case    4:  		/* mr R4, R29 */
		/* 82158F24h case    4:*/		regs.R4 = regs.R29;
		/* 82158F24h case    4:*/		return 0x82158F28;
		  /* 82158F28h */ case    5:  		/* mr R3, R31 */
		/* 82158F28h case    5:*/		regs.R3 = regs.R31;
		/* 82158F28h case    5:*/		return 0x82158F2C;
		  /* 82158F2Ch */ case    6:  		/* bl -4100 */
		/* 82158F2Ch case    6:*/		regs.LR = 0x82158F30; return 0x82157F28;
		/* 82158F2Ch case    6:*/		return 0x82158F30;
	}
	return 0x82158F30;
} // Block from 82158F14h-82158F30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82158F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82158F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82158F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82158F30);
		  /* 82158F30h */ case    0:  		/* lis R11, -32252 */
		/* 82158F30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158F30h case    0:*/		return 0x82158F34;
		  /* 82158F34h */ case    1:  		/* mr R5, R28 */
		/* 82158F34h case    1:*/		regs.R5 = regs.R28;
		/* 82158F34h case    1:*/		return 0x82158F38;
		  /* 82158F38h */ case    2:  		/* addi R4, R11, -23644 */
		/* 82158F38h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA3A4);
		/* 82158F38h case    2:*/		return 0x82158F3C;
		  /* 82158F3Ch */ case    3:  		/* mr R3, R31 */
		/* 82158F3Ch case    3:*/		regs.R3 = regs.R31;
		/* 82158F3Ch case    3:*/		return 0x82158F40;
		  /* 82158F40h */ case    4:  		/* bl -4120 */
		/* 82158F40h case    4:*/		regs.LR = 0x82158F44; return 0x82157F28;
		/* 82158F40h case    4:*/		return 0x82158F44;
		  /* 82158F44h */ case    5:  		/* lis R11, -32252 */
		/* 82158F44h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82158F44h case    5:*/		return 0x82158F48;
		  /* 82158F48h */ case    6:  		/* mr R3, R31 */
		/* 82158F48h case    6:*/		regs.R3 = regs.R31;
		/* 82158F48h case    6:*/		return 0x82158F4C;
		  /* 82158F4Ch */ case    7:  		/* addi R4, R11, -23684 */
		/* 82158F4Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA37C);
		/* 82158F4Ch case    7:*/		return 0x82158F50;
		  /* 82158F50h */ case    8:  		/* bl -4136 */
		/* 82158F50h case    8:*/		regs.LR = 0x82158F54; return 0x82157F28;
		/* 82158F50h case    8:*/		return 0x82158F54;
		  /* 82158F54h */ case    9:  		/* cmpwi CR6, R30, 0 */
		/* 82158F54h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82158F54h case    9:*/		return 0x82158F58;
		  /* 82158F58h */ case   10:  		/* bc 12, CR6_EQ, 168 */
		/* 82158F58h case   10:*/		if ( regs.CR[6].eq ) { return 0x82159000;  }
		/* 82158F58h case   10:*/		return 0x82158F5C;
		  /* 82158F5Ch */ case   11:  		/* lis R11, -32256 */
		/* 82158F5Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82158F5Ch case   11:*/		return 0x82158F60;
		  /* 82158F60h */ case   12:  		/* mr R3, R31 */
		/* 82158F60h case   12:*/		regs.R3 = regs.R31;
		/* 82158F60h case   12:*/		return 0x82158F64;
		  /* 82158F64h */ case   13:  		/* addi R4, R11, 20592 */
		/* 82158F64h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5070);
		/* 82158F64h case   13:*/		return 0x82158F68;
		  /* 82158F68h */ case   14:  		/* bl -4160 */
		/* 82158F68h case   14:*/		regs.LR = 0x82158F6C; return 0x82157F28;
		/* 82158F68h case   14:*/		return 0x82158F6C;
		  /* 82158F6Ch */ case   15:  		/* lis R11, -32255 */
		/* 82158F6Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82158F6Ch case   15:*/		return 0x82158F70;
		  /* 82158F70h */ case   16:  		/* rlwinm R10, R30, 0, 30, 31 */
		/* 82158F70h case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R30);
		/* 82158F70h case   16:*/		return 0x82158F74;
		  /* 82158F74h */ case   17:  		/* addi R11, R11, 12500 */
		/* 82158F74h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x30D4);
		/* 82158F74h case   17:*/		return 0x82158F78;
		  /* 82158F78h */ case   18:  		/* lis R9, -32253 */
		/* 82158F78h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82158F78h case   18:*/		return 0x82158F7C;
		  /* 82158F7Ch */ case   19:  		/* mr R3, R31 */
		/* 82158F7Ch case   19:*/		regs.R3 = regs.R31;
		/* 82158F7Ch case   19:*/		return 0x82158F80;
		  /* 82158F80h */ case   20:  		/* addi R28, R9, 25796 */
		/* 82158F80h case   20:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x64C4);
		/* 82158F80h case   20:*/		return 0x82158F84;
		  /* 82158F84h */ case   21:  		/* mr R4, R28 */
		/* 82158F84h case   21:*/		regs.R4 = regs.R28;
		/* 82158F84h case   21:*/		return 0x82158F88;
		  /* 82158F88h */ case   22:  		/* lbzx R11, <#[R10 + R11]> */
		/* 82158F88h case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82158F88h case   22:*/		return 0x82158F8C;
		  /* 82158F8Ch */ case   23:  		/* extsb R5, R11 */
		/* 82158F8Ch case   23:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158F8Ch case   23:*/		return 0x82158F90;
		  /* 82158F90h */ case   24:  		/* bl -4200 */
		/* 82158F90h case   24:*/		regs.LR = 0x82158F94; return 0x82157F28;
		/* 82158F90h case   24:*/		return 0x82158F94;
		  /* 82158F94h */ case   25:  		/* srawi R11, R30, 2 */
		/* 82158F94h case   25:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R30);
		/* 82158F94h case   25:*/		return 0x82158F98;
		  /* 82158F98h */ case   26:  		/* lis R10, -32252 */
		/* 82158F98h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82158F98h case   26:*/		return 0x82158F9C;
		  /* 82158F9Ch */ case   27:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82158F9Ch case   27:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82158F9Ch case   27:*/		return 0x82158FA0;
		  /* 82158FA0h */ case   28:  		/* addi R10, R10, -23652 */
		/* 82158FA0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFA39C);
		/* 82158FA0h case   28:*/		return 0x82158FA4;
		  /* 82158FA4h */ case   29:  		/* mr R4, R28 */
		/* 82158FA4h case   29:*/		regs.R4 = regs.R28;
		/* 82158FA4h case   29:*/		return 0x82158FA8;
		  /* 82158FA8h */ case   30:  		/* mr R3, R31 */
		/* 82158FA8h case   30:*/		regs.R3 = regs.R31;
		/* 82158FA8h case   30:*/		return 0x82158FAC;
		  /* 82158FACh */ case   31:  		/* lbzx R11, <#[R11 + R10]> */
		/* 82158FACh case   31:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82158FACh case   31:*/		return 0x82158FB0;
		  /* 82158FB0h */ case   32:  		/* extsb R5, R11 */
		/* 82158FB0h case   32:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158FB0h case   32:*/		return 0x82158FB4;
		  /* 82158FB4h */ case   33:  		/* bl -4236 */
		/* 82158FB4h case   33:*/		regs.LR = 0x82158FB8; return 0x82157F28;
		/* 82158FB4h case   33:*/		return 0x82158FB8;
		  /* 82158FB8h */ case   34:  		/* srawi R11, R30, 4 */
		/* 82158FB8h case   34:*/		cpu::op::srawi<0,4>(regs,&regs.R11,regs.R30);
		/* 82158FB8h case   34:*/		return 0x82158FBC;
		  /* 82158FBCh */ case   35:  		/* lis R10, -32252 */
		/* 82158FBCh case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82158FBCh case   35:*/		return 0x82158FC0;
		  /* 82158FC0h */ case   36:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82158FC0h case   36:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82158FC0h case   36:*/		return 0x82158FC4;
		  /* 82158FC4h */ case   37:  		/* addi R10, R10, -23660 */
		/* 82158FC4h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFA394);
		/* 82158FC4h case   37:*/		return 0x82158FC8;
		  /* 82158FC8h */ case   38:  		/* mr R4, R28 */
		/* 82158FC8h case   38:*/		regs.R4 = regs.R28;
		/* 82158FC8h case   38:*/		return 0x82158FCC;
		  /* 82158FCCh */ case   39:  		/* mr R3, R31 */
		/* 82158FCCh case   39:*/		regs.R3 = regs.R31;
		/* 82158FCCh case   39:*/		return 0x82158FD0;
		  /* 82158FD0h */ case   40:  		/* lbzx R11, <#[R11 + R10]> */
		/* 82158FD0h case   40:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82158FD0h case   40:*/		return 0x82158FD4;
		  /* 82158FD4h */ case   41:  		/* extsb R5, R11 */
		/* 82158FD4h case   41:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158FD4h case   41:*/		return 0x82158FD8;
		  /* 82158FD8h */ case   42:  		/* bl -4272 */
		/* 82158FD8h case   42:*/		regs.LR = 0x82158FDC; return 0x82157F28;
		/* 82158FD8h case   42:*/		return 0x82158FDC;
		  /* 82158FDCh */ case   43:  		/* srawi R11, R30, 6 */
		/* 82158FDCh case   43:*/		cpu::op::srawi<0,6>(regs,&regs.R11,regs.R30);
		/* 82158FDCh case   43:*/		return 0x82158FE0;
		  /* 82158FE0h */ case   44:  		/* lis R10, -32252 */
		/* 82158FE0h case   44:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82158FE0h case   44:*/		return 0x82158FE4;
		  /* 82158FE4h */ case   45:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82158FE4h case   45:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82158FE4h case   45:*/		return 0x82158FE8;
		  /* 82158FE8h */ case   46:  		/* addi R10, R10, -23668 */
		/* 82158FE8h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFA38C);
		/* 82158FE8h case   46:*/		return 0x82158FEC;
		  /* 82158FECh */ case   47:  		/* mr R4, R28 */
		/* 82158FECh case   47:*/		regs.R4 = regs.R28;
		/* 82158FECh case   47:*/		return 0x82158FF0;
		  /* 82158FF0h */ case   48:  		/* mr R3, R31 */
		/* 82158FF0h case   48:*/		regs.R3 = regs.R31;
		/* 82158FF0h case   48:*/		return 0x82158FF4;
		  /* 82158FF4h */ case   49:  		/* lbzx R11, <#[R11 + R10]> */
		/* 82158FF4h case   49:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82158FF4h case   49:*/		return 0x82158FF8;
		  /* 82158FF8h */ case   50:  		/* extsb R5, R11 */
		/* 82158FF8h case   50:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82158FF8h case   50:*/		return 0x82158FFC;
		  /* 82158FFCh */ case   51:  		/* bl -4308 */
		/* 82158FFCh case   51:*/		regs.LR = 0x82159000; return 0x82157F28;
		/* 82158FFCh case   51:*/		return 0x82159000;
	}
	return 0x82159000;
} // Block from 82158F30h-82159000h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82159000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159000);
		  /* 82159000h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 82159000h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 82159000h case    0:*/		return 0x82159004;
		  /* 82159004h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82159004h case    1:*/		if ( regs.CR[6].eq ) { return 0x82159010;  }
		/* 82159004h case    1:*/		return 0x82159008;
		  /* 82159008h */ case    2:  		/* mr R4, R29 */
		/* 82159008h case    2:*/		regs.R4 = regs.R29;
		/* 82159008h case    2:*/		return 0x8215900C;
		  /* 8215900Ch */ case    3:  		/* b 12 */
		/* 8215900Ch case    3:*/		return 0x82159018;
		/* 8215900Ch case    3:*/		return 0x82159010;
	}
	return 0x82159010;
} // Block from 82159000h-82159010h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82159010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159010);
		  /* 82159010h */ case    0:  		/* lis R11, -32256 */
		/* 82159010h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82159010h case    0:*/		return 0x82159014;
		  /* 82159014h */ case    1:  		/* addi R4, R11, 4485 */
		/* 82159014h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1185);
		/* 82159014h case    1:*/		return 0x82159018;
	}
	return 0x82159018;
} // Block from 82159010h-82159018h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159018);
		  /* 82159018h */ case    0:  		/* mr R3, R31 */
		/* 82159018h case    0:*/		regs.R3 = regs.R31;
		/* 82159018h case    0:*/		return 0x8215901C;
		  /* 8215901Ch */ case    1:  		/* bl -4340 */
		/* 8215901Ch case    1:*/		regs.LR = 0x82159020; return 0x82157F28;
		/* 8215901Ch case    1:*/		return 0x82159020;
		  /* 82159020h */ case    2:  		/* addi R1, R1, 160 */
		/* 82159020h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82159020h case    2:*/		return 0x82159024;
		  /* 82159024h */ case    3:  		/* b -818560 */
		/* 82159024h case    3:*/		return 0x820912A4;
		/* 82159024h case    3:*/		return 0x82159028;
	}
	return 0x82159028;
} // Block from 82159018h-82159028h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82159028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159028);
		  /* 82159028h */ case    0:  		/* mfspr R12, LR */
		/* 82159028h case    0:*/		regs.R12 = regs.LR;
		/* 82159028h case    0:*/		return 0x8215902C;
		  /* 8215902Ch */ case    1:  		/* bl -818660 */
		/* 8215902Ch case    1:*/		regs.LR = 0x82159030; return 0x82091248;
		/* 8215902Ch case    1:*/		return 0x82159030;
		  /* 82159030h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82159030h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82159030h case    2:*/		return 0x82159034;
		  /* 82159034h */ case    3:  		/* lhz R11, <#[R4]> */
		/* 82159034h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82159034h case    3:*/		return 0x82159038;
		  /* 82159038h */ case    4:  		/* mr R29, R3 */
		/* 82159038h case    4:*/		regs.R29 = regs.R3;
		/* 82159038h case    4:*/		return 0x8215903C;
		  /* 8215903Ch */ case    5:  		/* mr R31, R4 */
		/* 8215903Ch case    5:*/		regs.R31 = regs.R4;
		/* 8215903Ch case    5:*/		return 0x82159040;
		  /* 82159040h */ case    6:  		/* li R24, 0 */
		/* 82159040h case    6:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82159040h case    6:*/		return 0x82159044;
		  /* 82159044h */ case    7:  		/* li R25, 0 */
		/* 82159044h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82159044h case    7:*/		return 0x82159048;
		  /* 82159048h */ case    8:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 82159048h case    8:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82159048h case    8:*/		return 0x8215904C;
		  /* 8215904Ch */ case    9:  		/* li R27, 0 */
		/* 8215904Ch case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8215904Ch case    9:*/		return 0x82159050;
		  /* 82159050h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 82159050h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82159068;  }
		/* 82159050h case   10:*/		return 0x82159054;
		  /* 82159054h */ case   11:  		/* lbz R11, <#[R4 + 8]> */
		/* 82159054h case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82159054h case   11:*/		return 0x82159058;
		  /* 82159058h */ case   12:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82159058h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82159058h case   12:*/		return 0x8215905C;
		  /* 8215905Ch */ case   13:  		/* cmplwi CR6, R11, 2 */
		/* 8215905Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8215905Ch case   13:*/		return 0x82159060;
		  /* 82159060h */ case   14:  		/* li R11, 1 */
		/* 82159060h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82159060h case   14:*/		return 0x82159064;
		  /* 82159064h */ case   15:  		/* bc 12, CR6_EQ, 8 */
		/* 82159064h case   15:*/		if ( regs.CR[6].eq ) { return 0x8215906C;  }
		/* 82159064h case   15:*/		return 0x82159068;
	}
	return 0x82159068;
} // Block from 82159028h-82159068h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82159068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159068);
		  /* 82159068h */ case    0:  		/* li R11, 0 */
		/* 82159068h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82159068h case    0:*/		return 0x8215906C;
	}
	return 0x8215906C;
} // Block from 82159068h-8215906Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215906Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215906C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215906C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215906C);
		  /* 8215906Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8215906Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8215906Ch case    0:*/		return 0x82159070;
		  /* 82159070h */ case    1:  		/* bc 4, CR0_EQ, 648 */
		/* 82159070h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821592F8;  }
		/* 82159070h case    1:*/		return 0x82159074;
		  /* 82159074h */ case    2:  		/* lbz R11, <#[R31 + 8]> */
		/* 82159074h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159074h case    2:*/		return 0x82159078;
		  /* 82159078h */ case    3:  		/* lis R10, -32217 */
		/* 82159078h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82159078h case    3:*/		return 0x8215907C;
		  /* 8215907Ch */ case    4:  		/* mr R3, R29 */
		/* 8215907Ch case    4:*/		regs.R3 = regs.R29;
		/* 8215907Ch case    4:*/		return 0x82159080;
		  /* 82159080h */ case    5:  		/* addi R10, R10, 20064 */
		/* 82159080h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4E60);
		/* 82159080h case    5:*/		return 0x82159084;
		  /* 82159084h */ case    6:  		/* rlwinm R11, R11, 2, 25, 29 */
		/* 82159084h case    6:*/		cpu::op::rlwinm<0,2,25,29>(regs,&regs.R11,regs.R11);
		/* 82159084h case    6:*/		return 0x82159088;
		  /* 82159088h */ case    7:  		/* lwzx R4, <#[R11 + R10]> */
		/* 82159088h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159088h case    7:*/		return 0x8215908C;
		  /* 8215908Ch */ case    8:  		/* bl -2276 */
		/* 8215908Ch case    8:*/		regs.LR = 0x82159090; return 0x821587A8;
		/* 8215908Ch case    8:*/		return 0x82159090;
		  /* 82159090h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 82159090h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82159090h case    9:*/		return 0x82159094;
		  /* 82159094h */ case   10:  		/* mr R3, R29 */
		/* 82159094h case   10:*/		regs.R3 = regs.R29;
		/* 82159094h case   10:*/		return 0x82159098;
		  /* 82159098h */ case   11:  		/* rlwinm R10, R11, 12, 28, 31 */
		/* 82159098h case   11:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R10,regs.R11);
		/* 82159098h case   11:*/		return 0x8215909C;
		  /* 8215909Ch */ case   12:  		/* rlwinm R9, R11, 18, 31, 31 */
		/* 8215909Ch case   12:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R9,regs.R11);
		/* 8215909Ch case   12:*/		return 0x821590A0;
		  /* 821590A0h */ case   13:  		/* rlwinm R8, R11, 26, 31, 31 */
		/* 821590A0h case   13:*/		cpu::op::rlwinm<0,26,31,31>(regs,&regs.R8,regs.R11);
		/* 821590A0h case   13:*/		return 0x821590A4;
		  /* 821590A4h */ case   14:  		/* rlwinm R7, R11, 8, 31, 31 */
		/* 821590A4h case   14:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R7,regs.R11);
		/* 821590A4h case   14:*/		return 0x821590A8;
		  /* 821590A8h */ case   15:  		/* rlwinm R6, R11, 17, 31, 31 */
		/* 821590A8h case   15:*/		cpu::op::rlwinm<0,17,31,31>(regs,&regs.R6,regs.R11);
		/* 821590A8h case   15:*/		return 0x821590AC;
		  /* 821590ACh */ case   16:  		/* rlwinm R5, R11, 16, 28, 31 */
		/* 821590ACh case   16:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R5,regs.R11);
		/* 821590ACh case   16:*/		return 0x821590B0;
		  /* 821590B0h */ case   17:  		/* rlwinm R4, R11, 0, 26, 31 */
		/* 821590B0h case   17:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R4,regs.R11);
		/* 821590B0h case   17:*/		return 0x821590B4;
		  /* 821590B4h */ case   18:  		/* bl -2092 */
		/* 821590B4h case   18:*/		regs.LR = 0x821590B8; return 0x82158888;
		/* 821590B4h case   18:*/		return 0x821590B8;
		  /* 821590B8h */ case   19:  		/* lis R11, -32256 */
		/* 821590B8h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821590B8h case   19:*/		return 0x821590BC;
		  /* 821590BCh */ case   20:  		/* mr R3, R29 */
		/* 821590BCh case   20:*/		regs.R3 = regs.R29;
		/* 821590BCh case   20:*/		return 0x821590C0;
		  /* 821590C0h */ case   21:  		/* addi R28, R11, 17860 */
		/* 821590C0h case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x45C4);
		/* 821590C0h case   21:*/		return 0x821590C4;
		  /* 821590C4h */ case   22:  		/* mr R4, R28 */
		/* 821590C4h case   22:*/		regs.R4 = regs.R28;
		/* 821590C4h case   22:*/		return 0x821590C8;
		  /* 821590C8h */ case   23:  		/* bl -4512 */
		/* 821590C8h case   23:*/		regs.LR = 0x821590CC; return 0x82157F28;
		/* 821590C8h case   23:*/		return 0x821590CC;
		  /* 821590CCh */ case   24:  		/* lwz R11, <#[R31 + 4]> */
		/* 821590CCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821590CCh case   24:*/		return 0x821590D0;
		  /* 821590D0h */ case   25:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 821590D0h case   25:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 821590D0h case   25:*/		return 0x821590D4;
		  /* 821590D4h */ case   26:  		/* bc 4, CR0_EQ, 24 */
		/* 821590D4h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821590EC;  }
		/* 821590D4h case   26:*/		return 0x821590D8;
		  /* 821590D8h */ case   27:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821590D8h case   27:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821590D8h case   27:*/		return 0x821590DC;
		  /* 821590DCh */ case   28:  		/* bc 4, CR0_EQ, 16 */
		/* 821590DCh case   28:*/		if ( !regs.CR[0].eq ) { return 0x821590EC;  }
		/* 821590DCh case   28:*/		return 0x821590E0;
		  /* 821590E0h */ case   29:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 821590E0h case   29:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821590E0h case   29:*/		return 0x821590E4;
		  /* 821590E4h */ case   30:  		/* bc 12, CR0_EQ, 8 */
		/* 821590E4h case   30:*/		if ( regs.CR[0].eq ) { return 0x821590EC;  }
		/* 821590E4h case   30:*/		return 0x821590E8;
		  /* 821590E8h */ case   31:  		/* li R24, 1 */
		/* 821590E8h case   31:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 821590E8h case   31:*/		return 0x821590EC;
	}
	return 0x821590EC;
} // Block from 8215906Ch-821590ECh (32 instructions)

//////////////////////////////////////////////////////
// Block at 821590ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821590EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821590EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821590EC);
		  /* 821590ECh */ case    0:  		/* lis R10, -32217 */
		/* 821590ECh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821590ECh case    0:*/		return 0x821590F0;
		  /* 821590F0h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 821590F0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821590F0h case    1:*/		return 0x821590F4;
		  /* 821590F4h */ case    2:  		/* li R26, 4 */
		/* 821590F4h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x4);
		/* 821590F4h case    2:*/		return 0x821590F8;
		  /* 821590F8h */ case    3:  		/* addi R30, R10, 20184 */
		/* 821590F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4ED8);
		/* 821590F8h case    3:*/		return 0x821590FC;
		  /* 821590FCh */ case    4:  		/* rlwinm R10, R11, 10, 25, 29 */
		/* 821590FCh case    4:*/		cpu::op::rlwinm<0,10,25,29>(regs,&regs.R10,regs.R11);
		/* 821590FCh case    4:*/		return 0x82159100;
		  /* 82159100h */ case    5:  		/* lwzx R10, <#[R10 + R30]> */
		/* 82159100h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82159100h case    5:*/		return 0x82159104;
		  /* 82159104h */ case    6:  		/* cmpwi CR6, R10, 1 */
		/* 82159104h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 82159104h case    6:*/		return 0x82159108;
		  /* 82159108h */ case    7:  		/* bc 12, CR6_LT, 112 */
		/* 82159108h case    7:*/		if ( regs.CR[6].lt ) { return 0x82159178;  }
		/* 82159108h case    7:*/		return 0x8215910C;
		  /* 8215910Ch */ case    8:  		/* rlwinm. R11, R11, 1, 31, 31 */
		/* 8215910Ch case    8:*/		cpu::op::rlwinm<1,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8215910Ch case    8:*/		return 0x82159110;
		  /* 82159110h */ case    9:  		/* nor R10, R11, R11 */
		/* 82159110h case    9:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 82159110h case    9:*/		return 0x82159114;
		  /* 82159114h */ case   10:  		/* rlwinm R25, R10, 0, 31, 31 */
		/* 82159114h case   10:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R25,regs.R10);
		/* 82159114h case   10:*/		return 0x82159118;
		  /* 82159118h */ case   11:  		/* mr R27, R25 */
		/* 82159118h case   11:*/		regs.R27 = regs.R25;
		/* 82159118h case   11:*/		return 0x8215911C;
		  /* 8215911Ch */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215911Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x82159144;  }
		/* 8215911Ch case   12:*/		return 0x82159120;
		  /* 82159120h */ case   13:  		/* cmpwi CR6, R24, 0 */
		/* 82159120h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82159120h case   13:*/		return 0x82159124;
		  /* 82159124h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 82159124h case   14:*/		if ( regs.CR[6].eq ) { return 0x82159144;  }
		/* 82159124h case   14:*/		return 0x82159128;
		  /* 82159128h */ case   15:  		/* lwz R11, <#[R31 + 4]> */
		/* 82159128h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82159128h case   15:*/		return 0x8215912C;
		  /* 8215912Ch */ case   16:  		/* mr R3, R29 */
		/* 8215912Ch case   16:*/		regs.R3 = regs.R29;
		/* 8215912Ch case   16:*/		return 0x82159130;
		  /* 82159130h */ case   17:  		/* lbz R6, <#[R31 + 5]> */
		/* 82159130h case   17:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000005) );
		/* 82159130h case   17:*/		return 0x82159134;
		  /* 82159134h */ case   18:  		/* rlwinm R5, R11, 6, 31, 31 */
		/* 82159134h case   18:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R5,regs.R11);
		/* 82159134h case   18:*/		return 0x82159138;
		  /* 82159138h */ case   19:  		/* lbz R4, <#[R31 + 9]> */
		/* 82159138h case   19:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000009) );
		/* 82159138h case   19:*/		return 0x8215913C;
		  /* 8215913Ch */ case   20:  		/* bl -604 */
		/* 8215913Ch case   20:*/		regs.LR = 0x82159140; return 0x82158EE0;
		/* 8215913Ch case   20:*/		return 0x82159140;
		  /* 82159140h */ case   21:  		/* b 56 */
		/* 82159140h case   21:*/		return 0x82159178;
		/* 82159140h case   21:*/		return 0x82159144;
	}
	return 0x82159144;
} // Block from 821590ECh-82159144h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82159144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159144);
		  /* 82159144h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82159144h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82159144h case    0:*/		return 0x82159148;
		  /* 82159148h */ case    1:  		/* mr R3, R29 */
		/* 82159148h case    1:*/		regs.R3 = regs.R29;
		/* 82159148h case    1:*/		return 0x8215914C;
		  /* 8215914Ch */ case    2:  		/* lwz R10, <#[R31]> */
		/* 8215914Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8215914Ch case    2:*/		return 0x82159150;
		  /* 82159150h */ case    3:  		/* lwz R4, <#[R31 + 8]> */
		/* 82159150h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 82159150h case    3:*/		return 0x82159154;
		  /* 82159154h */ case    4:  		/* rlwinm R9, R11, 6, 31, 31 */
		/* 82159154h case    4:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R9,regs.R11);
		/* 82159154h case    4:*/		return 0x82159158;
		  /* 82159158h */ case    5:  		/* rlwinm R8, R10, 25, 31, 31 */
		/* 82159158h case    5:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R8,regs.R10);
		/* 82159158h case    5:*/		return 0x8215915C;
		  /* 8215915Ch */ case    6:  		/* lbz R10, <#[R31 + 5]> */
		/* 8215915Ch case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000005) );
		/* 8215915Ch case    6:*/		return 0x82159160;
		  /* 82159160h */ case    7:  		/* rlwinm R7, R11, 3, 31, 31 */
		/* 82159160h case    7:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R7,regs.R11);
		/* 82159160h case    7:*/		return 0x82159164;
		  /* 82159164h */ case    8:  		/* lbz R5, <#[R31 + 9]> */
		/* 82159164h case    8:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000009) );
		/* 82159164h case    8:*/		return 0x82159168;
		  /* 82159168h */ case    9:  		/* rlwinm R6, R11, 1, 31, 31 */
		/* 82159168h case    9:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R6,regs.R11);
		/* 82159168h case    9:*/		return 0x8215916C;
		  /* 8215916Ch */ case   10:  		/* stw R26, <#[R1 + 84]> */
		/* 8215916Ch case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 8215916Ch case   10:*/		return 0x82159170;
		  /* 82159170h */ case   11:  		/* rlwinm R4, R4, 1, 31, 31 */
		/* 82159170h case   11:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R4,regs.R4);
		/* 82159170h case   11:*/		return 0x82159174;
		  /* 82159174h */ case   12:  		/* bl -1364 */
		/* 82159174h case   12:*/		regs.LR = 0x82159178; return 0x82158C20;
		/* 82159174h case   12:*/		return 0x82159178;
	}
	return 0x82159178;
} // Block from 82159144h-82159178h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82159178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159178);
		  /* 82159178h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159178h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159178h case    0:*/		return 0x8215917C;
		  /* 8215917Ch */ case    1:  		/* rlwinm R10, R11, 10, 25, 29 */
		/* 8215917Ch case    1:*/		cpu::op::rlwinm<0,10,25,29>(regs,&regs.R10,regs.R11);
		/* 8215917Ch case    1:*/		return 0x82159180;
		  /* 82159180h */ case    2:  		/* lwzx R10, <#[R10 + R30]> */
		/* 82159180h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82159180h case    2:*/		return 0x82159184;
		  /* 82159184h */ case    3:  		/* cmpwi CR6, R10, 2 */
		/* 82159184h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000002);
		/* 82159184h case    3:*/		return 0x82159188;
		  /* 82159188h */ case    4:  		/* bc 12, CR6_LT, 168 */
		/* 82159188h case    4:*/		if ( regs.CR[6].lt ) { return 0x82159230;  }
		/* 82159188h case    4:*/		return 0x8215918C;
		  /* 8215918Ch */ case    5:  		/* rlwinm. R10, R11, 2, 31, 31 */
		/* 8215918Ch case    5:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R11);
		/* 8215918Ch case    5:*/		return 0x82159190;
		  /* 82159190h */ case    6:  		/* rlwinm R11, R11, 2, 30, 31 */
		/* 82159190h case    6:*/		cpu::op::rlwinm<0,2,30,31>(regs,&regs.R11,regs.R11);
		/* 82159190h case    6:*/		return 0x82159194;
		  /* 82159194h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 82159194h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821591A4;  }
		/* 82159194h case    7:*/		return 0x82159198;
		  /* 82159198h */ case    8:  		/* cmpwi CR6, R25, 0 */
		/* 82159198h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82159198h case    8:*/		return 0x8215919C;
		  /* 8215919Ch */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8215919Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821591A4;  }
		/* 8215919Ch case    9:*/		return 0x821591A0;
		  /* 821591A0h */ case   10:  		/* li R25, 2 */
		/* 821591A0h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821591A0h case   10:*/		return 0x821591A4;
	}
	return 0x821591A4;
} // Block from 82159178h-821591A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821591A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821591A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821591A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821591A4);
		  /* 821591A4h */ case    0:  		/* nor R11, R11, R11 */
		/* 821591A4h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821591A4h case    0:*/		return 0x821591A8;
		  /* 821591A8h */ case    1:  		/* mr R4, R28 */
		/* 821591A8h case    1:*/		regs.R4 = regs.R28;
		/* 821591A8h case    1:*/		return 0x821591AC;
		  /* 821591ACh */ case    2:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 821591ACh case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821591ACh case    2:*/		return 0x821591B0;
		  /* 821591B0h */ case    3:  		/* mr R3, R29 */
		/* 821591B0h case    3:*/		regs.R3 = regs.R29;
		/* 821591B0h case    3:*/		return 0x821591B4;
		  /* 821591B4h */ case    4:  		/* add R27, R11, R27 */
		/* 821591B4h case    4:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 821591B4h case    4:*/		return 0x821591B8;
		  /* 821591B8h */ case    5:  		/* bl -4752 */
		/* 821591B8h case    5:*/		regs.LR = 0x821591BC; return 0x82157F28;
		/* 821591B8h case    5:*/		return 0x821591BC;
		  /* 821591BCh */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821591BCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821591BCh case    6:*/		return 0x821591C0;
	}
	return 0x821591C0;
} // Block from 821591A4h-821591C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821591C0h
// Function '?PrintOpcode@Disassembler@XGRAPHICS@@AAAXPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821591C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821591C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821591C0);
		  /* 821591C0h */ case    0:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821591C0h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821591C0h case    0:*/		return 0x821591C4;
		  /* 821591C4h */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821591C4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821591EC;  }
		/* 821591C4h case    1:*/		return 0x821591C8;
		  /* 821591C8h */ case    2:  		/* cmpwi CR6, R24, 0 */
		/* 821591C8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 821591C8h case    2:*/		return 0x821591CC;
		  /* 821591CCh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821591CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821591EC;  }
		/* 821591CCh case    3:*/		return 0x821591D0;
		  /* 821591D0h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821591D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821591D0h case    4:*/		return 0x821591D4;
		  /* 821591D4h */ case    5:  		/* mr R3, R29 */
		/* 821591D4h case    5:*/		regs.R3 = regs.R29;
		/* 821591D4h case    5:*/		return 0x821591D8;
		  /* 821591D8h */ case    6:  		/* lbz R6, <#[R31 + 6]> */
		/* 821591D8h case    6:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000006) );
		/* 821591D8h case    6:*/		return 0x821591DC;
		  /* 821591DCh */ case    7:  		/* rlwinm R5, R11, 7, 31, 31 */
		/* 821591DCh case    7:*/		cpu::op::rlwinm<0,7,31,31>(regs,&regs.R5,regs.R11);
		/* 821591DCh case    7:*/		return 0x821591E0;
		  /* 821591E0h */ case    8:  		/* lbz R4, <#[R31 + 10]> */
		/* 821591E0h case    8:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000A) );
		/* 821591E0h case    8:*/		return 0x821591E4;
		  /* 821591E4h */ case    9:  		/* bl -772 */
		/* 821591E4h case    9:*/		regs.LR = 0x821591E8; return 0x82158EE0;
		/* 821591E4h case    9:*/		return 0x821591E8;
		  /* 821591E8h */ case   10:  		/* b 72 */
		/* 821591E8h case   10:*/		return 0x82159230;
		/* 821591E8h case   10:*/		return 0x821591EC;
	}
	return 0x821591EC;
} // Block from 821591C0h-821591ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821591ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821591EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821591EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821591EC);
		  /* 821591ECh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821591ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821591ECh case    0:*/		return 0x821591F0;
		  /* 821591F0h */ case    1:  		/* cmpwi CR6, R25, 2 */
		/* 821591F0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821591F0h case    1:*/		return 0x821591F4;
		  /* 821591F4h */ case    2:  		/* rlwinm R6, R11, 1, 31, 31 */
		/* 821591F4h case    2:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R6,regs.R11);
		/* 821591F4h case    2:*/		return 0x821591F8;
		  /* 821591F8h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821591F8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82159200;  }
		/* 821591F8h case    3:*/		return 0x821591FC;
		  /* 821591FCh */ case    4:  		/* rlwinm R6, R11, 2, 31, 31 */
		/* 821591FCh case    4:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R6,regs.R11);
		/* 821591FCh case    4:*/		return 0x82159200;
	}
	return 0x82159200;
} // Block from 821591ECh-82159200h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82159200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159200);
		  /* 82159200h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82159200h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82159200h case    0:*/		return 0x82159204;
		  /* 82159204h */ case    1:  		/* mr R3, R29 */
		/* 82159204h case    1:*/		regs.R3 = regs.R29;
		/* 82159204h case    1:*/		return 0x82159208;
		  /* 82159208h */ case    2:  		/* lwz R10, <#[R31]> */
		/* 82159208h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82159208h case    2:*/		return 0x8215920C;
		  /* 8215920Ch */ case    3:  		/* lwz R4, <#[R31 + 8]> */
		/* 8215920Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8215920Ch case    3:*/		return 0x82159210;
		  /* 82159210h */ case    4:  		/* rlwinm R9, R11, 7, 31, 31 */
		/* 82159210h case    4:*/		cpu::op::rlwinm<0,7,31,31>(regs,&regs.R9,regs.R11);
		/* 82159210h case    4:*/		return 0x82159214;
		  /* 82159214h */ case    5:  		/* rlwinm R8, R10, 25, 31, 31 */
		/* 82159214h case    5:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R8,regs.R10);
		/* 82159214h case    5:*/		return 0x82159218;
		  /* 82159218h */ case    6:  		/* lbz R10, <#[R31 + 6]> */
		/* 82159218h case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82159218h case    6:*/		return 0x8215921C;
		  /* 8215921Ch */ case    7:  		/* rlwinm R7, R11, 3, 31, 31 */
		/* 8215921Ch case    7:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R7,regs.R11);
		/* 8215921Ch case    7:*/		return 0x82159220;
		  /* 82159220h */ case    8:  		/* lbz R5, <#[R31 + 10]> */
		/* 82159220h case    8:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000A) );
		/* 82159220h case    8:*/		return 0x82159224;
		  /* 82159224h */ case    9:  		/* rlwinm R4, R4, 2, 31, 31 */
		/* 82159224h case    9:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R4,regs.R4);
		/* 82159224h case    9:*/		return 0x82159228;
		  /* 82159228h */ case   10:  		/* stw R26, <#[R1 + 84]> */
		/* 82159228h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 82159228h case   10:*/		return 0x8215922C;
		  /* 8215922Ch */ case   11:  		/* bl -1548 */
		/* 8215922Ch case   11:*/		regs.LR = 0x82159230; return 0x82158C20;
		/* 8215922Ch case   11:*/		return 0x82159230;
	}
	return 0x82159230;
} // Block from 82159200h-82159230h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82159230h
// Function '?PrintCFOpcode@Disassembler@XGRAPHICS@@AAAXPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159230);
		  /* 82159230h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159230h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159230h case    0:*/		return 0x82159234;
		  /* 82159234h */ case    1:  		/* rlwinm R10, R11, 10, 25, 29 */
		/* 82159234h case    1:*/		cpu::op::rlwinm<0,10,25,29>(regs,&regs.R10,regs.R11);
		/* 82159234h case    1:*/		return 0x82159238;
		  /* 82159238h */ case    2:  		/* lwzx R10, <#[R10 + R30]> */
		/* 82159238h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82159238h case    2:*/		return 0x8215923C;
		  /* 8215923Ch */ case    3:  		/* cmpwi CR6, R10, 3 */
		/* 8215923Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8215923Ch case    3:*/		return 0x82159240;
		  /* 82159240h */ case    4:  		/* bc 12, CR6_LT, 184 */
		/* 82159240h case    4:*/		if ( regs.CR[6].lt ) { return 0x821592F8;  }
		/* 82159240h case    4:*/		return 0x82159244;
		  /* 82159244h */ case    5:  		/* rlwinm. R10, R11, 3, 31, 31 */
		/* 82159244h case    5:*/		cpu::op::rlwinm<1,3,31,31>(regs,&regs.R10,regs.R11);
		/* 82159244h case    5:*/		return 0x82159248;
		  /* 82159248h */ case    6:  		/* rlwinm R11, R11, 3, 29, 31 */
		/* 82159248h case    6:*/		cpu::op::rlwinm<0,3,29,31>(regs,&regs.R11,regs.R11);
		/* 82159248h case    6:*/		return 0x8215924C;
		  /* 8215924Ch */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 8215924Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8215925C;  }
		/* 8215924Ch case    7:*/		return 0x82159250;
		  /* 82159250h */ case    8:  		/* cmpwi CR6, R25, 0 */
		/* 82159250h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82159250h case    8:*/		return 0x82159254;
		  /* 82159254h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82159254h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215925C;  }
		/* 82159254h case    9:*/		return 0x82159258;
		  /* 82159258h */ case   10:  		/* li R25, 3 */
		/* 82159258h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x3);
		/* 82159258h case   10:*/		return 0x8215925C;
	}
	return 0x8215925C;
} // Block from 82159230h-8215925Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215925Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215925C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215925C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215925C);
		  /* 8215925Ch */ case    0:  		/* nor R11, R11, R11 */
		/* 8215925Ch case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8215925Ch case    0:*/		return 0x82159260;
		  /* 82159260h */ case    1:  		/* mr R4, R28 */
		/* 82159260h case    1:*/		regs.R4 = regs.R28;
		/* 82159260h case    1:*/		return 0x82159264;
		  /* 82159264h */ case    2:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82159264h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82159264h case    2:*/		return 0x82159268;
		  /* 82159268h */ case    3:  		/* mr R3, R29 */
		/* 82159268h case    3:*/		regs.R3 = regs.R29;
		/* 82159268h case    3:*/		return 0x8215926C;
		  /* 8215926Ch */ case    4:  		/* add R30, R11, R27 */
		/* 8215926Ch case    4:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R27);
		/* 8215926Ch case    4:*/		return 0x82159270;
		  /* 82159270h */ case    5:  		/* bl -4936 */
		/* 82159270h case    5:*/		regs.LR = 0x82159274; return 0x82157F28;
		/* 82159270h case    5:*/		return 0x82159274;
		  /* 82159274h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159274h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159274h case    6:*/		return 0x82159278;
		  /* 82159278h */ case    7:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 82159278h case    7:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 82159278h case    7:*/		return 0x8215927C;
		  /* 8215927Ch */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8215927Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821592A4;  }
		/* 8215927Ch case    8:*/		return 0x82159280;
		  /* 82159280h */ case    9:  		/* cmpwi CR6, R24, 0 */
		/* 82159280h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82159280h case    9:*/		return 0x82159284;
		  /* 82159284h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 82159284h case   10:*/		if ( regs.CR[6].eq ) { return 0x821592A4;  }
		/* 82159284h case   10:*/		return 0x82159288;
		  /* 82159288h */ case   11:  		/* lwz R10, <#[R31 + 4]> */
		/* 82159288h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82159288h case   11:*/		return 0x8215928C;
		  /* 8215928Ch */ case   12:  		/* rlwinm R4, R11, 0, 24, 31 */
		/* 8215928Ch case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R4,regs.R11);
		/* 8215928Ch case   12:*/		return 0x82159290;
		  /* 82159290h */ case   13:  		/* mr R3, R29 */
		/* 82159290h case   13:*/		regs.R3 = regs.R29;
		/* 82159290h case   13:*/		return 0x82159294;
		  /* 82159294h */ case   14:  		/* rlwinm R6, R10, 0, 24, 31 */
		/* 82159294h case   14:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R6,regs.R10);
		/* 82159294h case   14:*/		return 0x82159298;
		  /* 82159298h */ case   15:  		/* rlwinm R5, R10, 8, 31, 31 */
		/* 82159298h case   15:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R5,regs.R10);
		/* 82159298h case   15:*/		return 0x8215929C;
		  /* 8215929Ch */ case   16:  		/* bl -956 */
		/* 8215929Ch case   16:*/		regs.LR = 0x821592A0; return 0x82158EE0;
		/* 8215929Ch case   16:*/		return 0x821592A0;
	}
	return 0x821592A0;
} // Block from 8215925Ch-821592A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821592A0h
// Function '?PrintDestReg@Disassembler@XGRAPHICS@@AAAXHHHHHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821592A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821592A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821592A0);
		  /* 821592A0h */ case    0:  		/* b 88 */
		/* 821592A0h case    0:*/		return 0x821592F8;
		/* 821592A0h case    0:*/		return 0x821592A4;
	}
	return 0x821592A4;
} // Block from 821592A0h-821592A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821592A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821592A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821592A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821592A4);
		  /* 821592A4h */ case    0:  		/* cmpwi CR6, R25, 3 */
		/* 821592A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000003);
		/* 821592A4h case    0:*/		return 0x821592A8;
		  /* 821592A8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821592A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821592C0;  }
		/* 821592A8h case    1:*/		return 0x821592AC;
		  /* 821592ACh */ case    2:  		/* cmpwi CR6, R30, 2 */
		/* 821592ACh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 821592ACh case    2:*/		return 0x821592B0;
		  /* 821592B0h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 821592B0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821592C0;  }
		/* 821592B0h case    3:*/		return 0x821592B4;
		  /* 821592B4h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 821592B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821592B4h case    4:*/		return 0x821592B8;
		  /* 821592B8h */ case    5:  		/* rlwinm R6, R11, 2, 31, 31 */
		/* 821592B8h case    5:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R6,regs.R11);
		/* 821592B8h case    5:*/		return 0x821592BC;
		  /* 821592BCh */ case    6:  		/* b 12 */
		/* 821592BCh case    6:*/		return 0x821592C8;
		/* 821592BCh case    6:*/		return 0x821592C0;
	}
	return 0x821592C0;
} // Block from 821592A4h-821592C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821592C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821592C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821592C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821592C0);
		  /* 821592C0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821592C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821592C0h case    0:*/		return 0x821592C4;
		  /* 821592C4h */ case    1:  		/* rlwinm R6, R11, 1, 31, 31 */
		/* 821592C4h case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R6,regs.R11);
		/* 821592C4h case    1:*/		return 0x821592C8;
	}
	return 0x821592C8;
} // Block from 821592C0h-821592C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821592C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821592C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821592C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821592C8);
		  /* 821592C8h */ case    0:  		/* lwz R4, <#[R31 + 8]> */
		/* 821592C8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821592C8h case    0:*/		return 0x821592CC;
		  /* 821592CCh */ case    1:  		/* mr R3, R29 */
		/* 821592CCh case    1:*/		regs.R3 = regs.R29;
		/* 821592CCh case    1:*/		return 0x821592D0;
		  /* 821592D0h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821592D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821592D0h case    2:*/		return 0x821592D4;
		  /* 821592D4h */ case    3:  		/* lwz R8, <#[R31]> */
		/* 821592D4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821592D4h case    3:*/		return 0x821592D8;
		  /* 821592D8h */ case    4:  		/* rlwinm R5, R4, 0, 24, 31 */
		/* 821592D8h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R5,regs.R4);
		/* 821592D8h case    4:*/		return 0x821592DC;
		  /* 821592DCh */ case    5:  		/* rlwinm R10, R11, 0, 24, 31 */
		/* 821592DCh case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 821592DCh case    5:*/		return 0x821592E0;
		  /* 821592E0h */ case    6:  		/* stw R26, <#[R1 + 84]> */
		/* 821592E0h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000054) );
		/* 821592E0h case    6:*/		return 0x821592E4;
		  /* 821592E4h */ case    7:  		/* rlwinm R9, R11, 8, 31, 31 */
		/* 821592E4h case    7:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R9,regs.R11);
		/* 821592E4h case    7:*/		return 0x821592E8;
		  /* 821592E8h */ case    8:  		/* rlwinm R7, R11, 3, 31, 31 */
		/* 821592E8h case    8:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R7,regs.R11);
		/* 821592E8h case    8:*/		return 0x821592EC;
		  /* 821592ECh */ case    9:  		/* rlwinm R8, R8, 25, 31, 31 */
		/* 821592ECh case    9:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R8,regs.R8);
		/* 821592ECh case    9:*/		return 0x821592F0;
		  /* 821592F0h */ case   10:  		/* rlwinm R4, R4, 3, 31, 31 */
		/* 821592F0h case   10:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R4,regs.R4);
		/* 821592F0h case   10:*/		return 0x821592F4;
		  /* 821592F4h */ case   11:  		/* bl -1748 */
		/* 821592F4h case   11:*/		regs.LR = 0x821592F8; return 0x82158C20;
		/* 821592F4h case   11:*/		return 0x821592F8;
	}
	return 0x821592F8;
} // Block from 821592C8h-821592F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821592F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821592F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821592F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821592F8);
		  /* 821592F8h */ case    0:  		/* addi R1, R1, 176 */
		/* 821592F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821592F8h case    0:*/		return 0x821592FC;
		  /* 821592FCh */ case    1:  		/* b -819300 */
		/* 821592FCh case    1:*/		return 0x82091298;
		/* 821592FCh case    1:*/		return 0x82159300;
	}
	return 0x82159300;
} // Block from 821592F8h-82159300h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159300);
		  /* 82159300h */ case    0:  		/* mfspr R12, LR */
		/* 82159300h case    0:*/		regs.R12 = regs.LR;
		/* 82159300h case    0:*/		return 0x82159304;
		  /* 82159304h */ case    1:  		/* bl -819372 */
		/* 82159304h case    1:*/		regs.LR = 0x82159308; return 0x82091258;
		/* 82159304h case    1:*/		return 0x82159308;
		  /* 82159308h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82159308h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82159308h case    2:*/		return 0x8215930C;
		  /* 8215930Ch */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 8215930Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8215930Ch case    3:*/		return 0x82159310;
		  /* 82159310h */ case    4:  		/* mr R30, R3 */
		/* 82159310h case    4:*/		regs.R30 = regs.R3;
		/* 82159310h case    4:*/		return 0x82159314;
		  /* 82159314h */ case    5:  		/* mr R31, R4 */
		/* 82159314h case    5:*/		regs.R31 = regs.R4;
		/* 82159314h case    5:*/		return 0x82159318;
		  /* 82159318h */ case    6:  		/* li R28, 0 */
		/* 82159318h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82159318h case    6:*/		return 0x8215931C;
		  /* 8215931Ch */ case    7:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 8215931Ch case    7:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 8215931Ch case    7:*/		return 0x82159320;
		  /* 82159320h */ case    8:  		/* bc 4, CR0_EQ, 24 */
		/* 82159320h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82159338;  }
		/* 82159320h case    8:*/		return 0x82159324;
		  /* 82159324h */ case    9:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 82159324h case    9:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 82159324h case    9:*/		return 0x82159328;
		  /* 82159328h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 82159328h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82159338;  }
		/* 82159328h case   10:*/		return 0x8215932C;
		  /* 8215932Ch */ case   11:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8215932Ch case   11:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8215932Ch case   11:*/		return 0x82159330;
		  /* 82159330h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 82159330h case   12:*/		if ( regs.CR[0].eq ) { return 0x82159338;  }
		/* 82159330h case   12:*/		return 0x82159334;
		  /* 82159334h */ case   13:  		/* li R28, 1 */
		/* 82159334h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82159334h case   13:*/		return 0x82159338;
	}
	return 0x82159338;
} // Block from 82159300h-82159338h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82159338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159338);
		  /* 82159338h */ case    0:  		/* lis R11, -32217 */
		/* 82159338h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82159338h case    0:*/		return 0x8215933C;
		  /* 8215933Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 8215933Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8215933Ch case    1:*/		return 0x82159340;
		  /* 82159340h */ case    2:  		/* mr R3, R30 */
		/* 82159340h case    2:*/		regs.R3 = regs.R30;
		/* 82159340h case    2:*/		return 0x82159344;
		  /* 82159344h */ case    3:  		/* addi R29, R11, 21024 */
		/* 82159344h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x5220);
		/* 82159344h case    3:*/		return 0x82159348;
		  /* 82159348h */ case    4:  		/* rlwinm R11, R10, 8, 24, 29 */
		/* 82159348h case    4:*/		cpu::op::rlwinm<0,8,24,29>(regs,&regs.R11,regs.R10);
		/* 82159348h case    4:*/		return 0x8215934C;
		  /* 8215934Ch */ case    5:  		/* addi R10, R29, -600 */
		/* 8215934Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFDA8);
		/* 8215934Ch case    5:*/		return 0x82159350;
		  /* 82159350h */ case    6:  		/* lwzx R4, <#[R11 + R10]> */
		/* 82159350h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159350h case    6:*/		return 0x82159354;
		  /* 82159354h */ case    7:  		/* bl -2988 */
		/* 82159354h case    7:*/		regs.LR = 0x82159358; return 0x821587A8;
		/* 82159354h case    7:*/		return 0x82159358;
		  /* 82159358h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82159358h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82159358h case    8:*/		return 0x8215935C;
		  /* 8215935Ch */ case    9:  		/* rlwinm. R6, R11, 17, 31, 31 */
		/* 8215935Ch case    9:*/		cpu::op::rlwinm<1,17,31,31>(regs,&regs.R6,regs.R11);
		/* 8215935Ch case    9:*/		return 0x82159360;
		  /* 82159360h */ case   10:  		/* rlwinm R8, R11, 26, 31, 31 */
		/* 82159360h case   10:*/		cpu::op::rlwinm<0,26,31,31>(regs,&regs.R8,regs.R11);
		/* 82159360h case   10:*/		return 0x82159364;
		  /* 82159364h */ case   11:  		/* bc 4, CR0_EQ, 8 */
		/* 82159364h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8215936C;  }
		/* 82159364h case   11:*/		return 0x82159368;
		  /* 82159368h */ case   12:  		/* rlwinm R8, R11, 18, 31, 31 */
		/* 82159368h case   12:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R8,regs.R11);
		/* 82159368h case   12:*/		return 0x8215936C;
	}
	return 0x8215936C;
} // Block from 82159338h-8215936Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215936C);
		  /* 8215936Ch */ case    0:  		/* cmplwi CR6, R6, 0 */
		/* 8215936Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8215936Ch case    0:*/		return 0x82159370;
		  /* 82159370h */ case    1:  		/* rlwinm R4, R11, 0, 26, 31 */
		/* 82159370h case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R4,regs.R11);
		/* 82159370h case    1:*/		return 0x82159374;
		  /* 82159374h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82159374h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215937C;  }
		/* 82159374h case    2:*/		return 0x82159378;
		  /* 82159378h */ case    3:  		/* rlwinm R4, R11, 24, 26, 31 */
		/* 82159378h case    3:*/		cpu::op::rlwinm<0,24,26,31>(regs,&regs.R4,regs.R11);
		/* 82159378h case    3:*/		return 0x8215937C;
	}
	return 0x8215937C;
} // Block from 8215936Ch-8215937Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215937Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215937C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215937C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215937C);
		  /* 8215937Ch */ case    0:  		/* rlwinm R10, R11, 16, 28, 31 */
		/* 8215937Ch case    0:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R10,regs.R11);
		/* 8215937Ch case    0:*/		return 0x82159380;
		  /* 82159380h */ case    1:  		/* rlwinm R9, R11, 18, 31, 31 */
		/* 82159380h case    1:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R9,regs.R11);
		/* 82159380h case    1:*/		return 0x82159384;
		  /* 82159384h */ case    2:  		/* rlwinm R7, R11, 7, 31, 31 */
		/* 82159384h case    2:*/		cpu::op::rlwinm<0,7,31,31>(regs,&regs.R7,regs.R11);
		/* 82159384h case    2:*/		return 0x82159388;
		  /* 82159388h */ case    3:  		/* rlwinm R5, R11, 12, 28, 31 */
		/* 82159388h case    3:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R5,regs.R11);
		/* 82159388h case    3:*/		return 0x8215938C;
		  /* 8215938Ch */ case    4:  		/* mr R3, R30 */
		/* 8215938Ch case    4:*/		regs.R3 = regs.R30;
		/* 8215938Ch case    4:*/		return 0x82159390;
		  /* 82159390h */ case    5:  		/* bl -2824 */
		/* 82159390h case    5:*/		regs.LR = 0x82159394; return 0x82158888;
		/* 82159390h case    5:*/		return 0x82159394;
		  /* 82159394h */ case    6:  		/* lis R11, -32256 */
		/* 82159394h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82159394h case    6:*/		return 0x82159398;
		  /* 82159398h */ case    7:  		/* mr R3, R30 */
		/* 82159398h case    7:*/		regs.R3 = regs.R30;
		/* 82159398h case    7:*/		return 0x8215939C;
		  /* 8215939Ch */ case    8:  		/* addi R4, R11, 17860 */
		/* 8215939Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x45C4);
		/* 8215939Ch case    8:*/		return 0x821593A0;
		  /* 821593A0h */ case    9:  		/* bl -5240 */
		/* 821593A0h case    9:*/		regs.LR = 0x821593A4; return 0x82157F28;
		/* 821593A0h case    9:*/		return 0x821593A4;
		  /* 821593A4h */ case   10:  		/* lwz R9, <#[R31]> */
		/* 821593A4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821593A4h case   10:*/		return 0x821593A8;
		  /* 821593A8h */ case   11:  		/* lis R11, -32217 */
		/* 821593A8h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821593A8h case   11:*/		return 0x821593AC;
		  /* 821593ACh */ case   12:  		/* rlwinm R8, R9, 8, 24, 29 */
		/* 821593ACh case   12:*/		cpu::op::rlwinm<0,8,24,29>(regs,&regs.R8,regs.R9);
		/* 821593ACh case   12:*/		return 0x821593B0;
		  /* 821593B0h */ case   13:  		/* addi R11, R11, 20624 */
		/* 821593B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5090);
		/* 821593B0h case   13:*/		return 0x821593B4;
		  /* 821593B4h */ case   14:  		/* lwzx R11, <#[R8 + R11]> */
		/* 821593B4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821593B4h case   14:*/		return 0x821593B8;
		  /* 821593B8h */ case   15:  		/* cmpwi CR6, R11, 1 */
		/* 821593B8h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821593B8h case   15:*/		return 0x821593BC;
		  /* 821593BCh */ case   16:  		/* bc 12, CR6_LT, 216 */
		/* 821593BCh case   16:*/		if ( regs.CR[6].lt ) { return 0x82159494;  }
		/* 821593BCh case   16:*/		return 0x821593C0;
		  /* 821593C0h */ case   17:  		/* lwz R7, <#[R31 + 8]> */
		/* 821593C0h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 821593C0h case   17:*/		return 0x821593C4;
		  /* 821593C4h */ case   18:  		/* rlwinm R11, R7, 3, 31, 31 */
		/* 821593C4h case   18:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R11,regs.R7);
		/* 821593C4h case   18:*/		return 0x821593C8;
		  /* 821593C8h */ case   19:  		/* rlwinm R10, R7, 2, 31, 31 */
		/* 821593C8h case   19:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R10,regs.R7);
		/* 821593C8h case   19:*/		return 0x821593CC;
		  /* 821593CCh */ case   20:  		/* rlwinm. R7, R7, 1, 31, 31 */
		/* 821593CCh case   20:*/		cpu::op::rlwinm<1,1,31,31>(regs,&regs.R7,regs.R7);
		/* 821593CCh case   20:*/		return 0x821593D0;
		  /* 821593D0h */ case   21:  		/* add R11, R10, R11 */
		/* 821593D0h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821593D0h case   21:*/		return 0x821593D4;
		  /* 821593D4h */ case   22:  		/* subf R11, R7, R11 */
		/* 821593D4h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821593D4h case   22:*/		return 0x821593D8;
		  /* 821593D8h */ case   23:  		/* addi R7, R11, 3 */
		/* 821593D8h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x3);
		/* 821593D8h case   23:*/		return 0x821593DC;
		  /* 821593DCh */ case   24:  		/* bc 12, CR0_EQ, 12 */
		/* 821593DCh case   24:*/		if ( regs.CR[0].eq ) { return 0x821593E8;  }
		/* 821593DCh case   24:*/		return 0x821593E0;
		  /* 821593E0h */ case   25:  		/* li R10, 1 */
		/* 821593E0h case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821593E0h case   25:*/		return 0x821593E4;
		  /* 821593E4h */ case   26:  		/* b 44 */
		/* 821593E4h case   26:*/		return 0x82159410;
		/* 821593E4h case   26:*/		return 0x821593E8;
	}
	return 0x821593E8;
} // Block from 8215937Ch-821593E8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821593E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821593E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821593E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821593E8);
		  /* 821593E8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821593E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821593E8h case    0:*/		return 0x821593EC;
		  /* 821593ECh */ case    1:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821593ECh case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821593ECh case    1:*/		return 0x821593F0;
		  /* 821593F0h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821593F0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821593FC;  }
		/* 821593F0h case    2:*/		return 0x821593F4;
		  /* 821593F4h */ case    3:  		/* li R10, 2 */
		/* 821593F4h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821593F4h case    3:*/		return 0x821593F8;
		  /* 821593F8h */ case    4:  		/* b 24 */
		/* 821593F8h case    4:*/		return 0x82159410;
		/* 821593F8h case    4:*/		return 0x821593FC;
	}
	return 0x821593FC;
} // Block from 821593E8h-821593FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821593FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821593FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821593FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821593FC);
		  /* 821593FCh */ case    0:  		/* rlwinm R11, R11, 0, 2, 2 */
		/* 821593FCh case    0:*/		cpu::op::rlwinm<0,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821593FCh case    0:*/		return 0x82159400;
		  /* 82159400h */ case    1:  		/* li R10, 3 */
		/* 82159400h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82159400h case    1:*/		return 0x82159404;
		  /* 82159404h */ case    2:  		/* subfic R11, R11, 0 */
		/* 82159404h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82159404h case    2:*/		return 0x82159408;
		  /* 82159408h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82159408h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82159408h case    3:*/		return 0x8215940C;
		  /* 8215940Ch */ case    4:  		/* and R10, R11, R10 */
		/* 8215940Ch case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8215940Ch case    4:*/		return 0x82159410;
	}
	return 0x82159410;
} // Block from 821593FCh-82159410h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82159410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159410);
		  /* 82159410h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159410h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159410h case    0:*/		return 0x82159414;
		  /* 82159414h */ case    1:  		/* rlwinm. R6, R11, 0, 2, 2 */
		/* 82159414h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R6,regs.R11);
		/* 82159414h case    1:*/		return 0x82159418;
		  /* 82159418h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 82159418h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82159440;  }
		/* 82159418h case    2:*/		return 0x8215941C;
		  /* 8215941Ch */ case    3:  		/* cmpwi CR6, R28, 0 */
		/* 8215941Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8215941Ch case    3:*/		return 0x82159420;
		  /* 82159420h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82159420h case    4:*/		if ( regs.CR[6].eq ) { return 0x82159440;  }
		/* 82159420h case    4:*/		return 0x82159424;
		  /* 82159424h */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 82159424h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82159424h case    5:*/		return 0x82159428;
		  /* 82159428h */ case    6:  		/* rlwinm R4, R11, 0, 24, 31 */
		/* 82159428h case    6:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R4,regs.R11);
		/* 82159428h case    6:*/		return 0x8215942C;
		  /* 8215942Ch */ case    7:  		/* mr R3, R30 */
		/* 8215942Ch case    7:*/		regs.R3 = regs.R30;
		/* 8215942Ch case    7:*/		return 0x82159430;
		  /* 82159430h */ case    8:  		/* rlwinm R6, R10, 0, 24, 31 */
		/* 82159430h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R6,regs.R10);
		/* 82159430h case    8:*/		return 0x82159434;
		  /* 82159434h */ case    9:  		/* rlwinm R5, R10, 8, 31, 31 */
		/* 82159434h case    9:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R5,regs.R10);
		/* 82159434h case    9:*/		return 0x82159438;
		  /* 82159438h */ case   10:  		/* bl -1368 */
		/* 82159438h case   10:*/		regs.LR = 0x8215943C; return 0x82158EE0;
		/* 82159438h case   10:*/		return 0x8215943C;
		  /* 8215943Ch */ case   11:  		/* b 88 */
		/* 8215943Ch case   11:*/		return 0x82159494;
		/* 8215943Ch case   11:*/		return 0x82159440;
	}
	return 0x82159440;
} // Block from 82159410h-82159440h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82159440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159440);
		  /* 82159440h */ case    0:  		/* cmpwi CR6, R10, 3 */
		/* 82159440h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 82159440h case    0:*/		return 0x82159444;
		  /* 82159444h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82159444h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215945C;  }
		/* 82159444h case    1:*/		return 0x82159448;
		  /* 82159448h */ case    2:  		/* cmpwi CR6, R7, 2 */
		/* 82159448h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000002);
		/* 82159448h case    2:*/		return 0x8215944C;
		  /* 8215944Ch */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 8215944Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215945C;  }
		/* 8215944Ch case    3:*/		return 0x82159450;
		  /* 82159450h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82159450h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82159450h case    4:*/		return 0x82159454;
		  /* 82159454h */ case    5:  		/* rlwinm R6, R11, 2, 31, 31 */
		/* 82159454h case    5:*/		cpu::op::rlwinm<0,2,31,31>(regs,&regs.R6,regs.R11);
		/* 82159454h case    5:*/		return 0x82159458;
		  /* 82159458h */ case    6:  		/* b 12 */
		/* 82159458h case    6:*/		return 0x82159464;
		/* 82159458h case    6:*/		return 0x8215945C;
	}
	return 0x8215945C;
} // Block from 82159440h-8215945Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215945Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215945C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215945C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215945C);
		  /* 8215945Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215945Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215945Ch case    0:*/		return 0x82159460;
		  /* 82159460h */ case    1:  		/* rlwinm R6, R11, 1, 31, 31 */
		/* 82159460h case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R6,regs.R11);
		/* 82159460h case    1:*/		return 0x82159464;
	}
	return 0x82159464;
} // Block from 8215945Ch-82159464h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159464);
		  /* 82159464h */ case    0:  		/* lwz R7, <#[R31 + 4]> */
		/* 82159464h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82159464h case    0:*/		return 0x82159468;
		  /* 82159468h */ case    1:  		/* mr R3, R30 */
		/* 82159468h case    1:*/		regs.R3 = regs.R30;
		/* 82159468h case    1:*/		return 0x8215946C;
		  /* 8215946Ch */ case    2:  		/* lwzx R11, <#[R8 + R29]> */
		/* 8215946Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R29 + 0x00000000) );
		/* 8215946Ch case    2:*/		return 0x82159470;
		  /* 82159470h */ case    3:  		/* rlwinm R8, R9, 25, 31, 31 */
		/* 82159470h case    3:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R8,regs.R9);
		/* 82159470h case    3:*/		return 0x82159474;
		  /* 82159474h */ case    4:  		/* lwz R4, <#[R31 + 8]> */
		/* 82159474h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 82159474h case    4:*/		return 0x82159478;
		  /* 82159478h */ case    5:  		/* rlwinm R10, R7, 0, 24, 31 */
		/* 82159478h case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R7);
		/* 82159478h case    5:*/		return 0x8215947C;
		  /* 8215947Ch */ case    6:  		/* rlwinm R9, R7, 8, 31, 31 */
		/* 8215947Ch case    6:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R9,regs.R7);
		/* 8215947Ch case    6:*/		return 0x82159480;
		  /* 82159480h */ case    7:  		/* rlwinm R5, R4, 0, 24, 31 */
		/* 82159480h case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R5,regs.R4);
		/* 82159480h case    7:*/		return 0x82159484;
		  /* 82159484h */ case    8:  		/* rlwinm R7, R7, 3, 31, 31 */
		/* 82159484h case    8:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R7,regs.R7);
		/* 82159484h case    8:*/		return 0x82159488;
		  /* 82159488h */ case    9:  		/* rlwinm R4, R4, 3, 31, 31 */
		/* 82159488h case    9:*/		cpu::op::rlwinm<0,3,31,31>(regs,&regs.R4,regs.R4);
		/* 82159488h case    9:*/		return 0x8215948C;
		  /* 8215948Ch */ case   10:  		/* stw R11, <#[R1 + 84]> */
		/* 8215948Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8215948Ch case   10:*/		return 0x82159490;
		  /* 82159490h */ case   11:  		/* bl -2160 */
		/* 82159490h case   11:*/		regs.LR = 0x82159494; return 0x82158C20;
		/* 82159490h case   11:*/		return 0x82159494;
	}
	return 0x82159494;
} // Block from 82159464h-82159494h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82159494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159494);
		  /* 82159494h */ case    0:  		/* addi R1, R1, 144 */
		/* 82159494h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82159494h case    0:*/		return 0x82159498;
		  /* 82159498h */ case    1:  		/* b -819696 */
		/* 82159498h case    1:*/		return 0x820912A8;
		/* 82159498h case    1:*/		return 0x8215949C;
		  /* 8215949Ch */ case    2:  		/* nop */
		/* 8215949Ch case    2:*/		cpu::op::nop();
		/* 8215949Ch case    2:*/		return 0x821594A0;
	}
	return 0x821594A0;
} // Block from 82159494h-821594A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821594A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821594A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821594A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821594A0);
		  /* 821594A0h */ case    0:  		/* mfspr R12, LR */
		/* 821594A0h case    0:*/		regs.R12 = regs.LR;
		/* 821594A0h case    0:*/		return 0x821594A4;
		  /* 821594A4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821594A4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821594A4h case    1:*/		return 0x821594A8;
		  /* 821594A8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821594A8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821594A8h case    2:*/		return 0x821594AC;
		  /* 821594ACh */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 821594ACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821594ACh case    3:*/		return 0x821594B0;
		  /* 821594B0h */ case    4:  		/* lbz R11, <#[R3 + 4]> */
		/* 821594B0h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821594B0h case    4:*/		return 0x821594B4;
		  /* 821594B4h */ case    5:  		/* mr R31, R3 */
		/* 821594B4h case    5:*/		regs.R31 = regs.R3;
		/* 821594B4h case    5:*/		return 0x821594B8;
		  /* 821594B8h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821594B8h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821594B8h case    6:*/		return 0x821594BC;
		  /* 821594BCh */ case    7:  		/* bc 4, CR0_EQ, 48 */
		/* 821594BCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821594EC;  }
		/* 821594BCh case    7:*/		return 0x821594C0;
		  /* 821594C0h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 821594C0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821594C0h case    8:*/		return 0x821594C4;
		  /* 821594C4h */ case    9:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821594C4h case    9:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821594C4h case    9:*/		return 0x821594C8;
		  /* 821594C8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821594C8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821594D8;  }
		/* 821594C8h case   10:*/		return 0x821594CC;
		  /* 821594CCh */ case   11:  		/* lis R11, -32253 */
		/* 821594CCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821594CCh case   11:*/		return 0x821594D0;
		  /* 821594D0h */ case   12:  		/* addi R4, R11, 28332 */
		/* 821594D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EAC);
		/* 821594D0h case   12:*/		return 0x821594D4;
		  /* 821594D4h */ case   13:  		/* b 12 */
		/* 821594D4h case   13:*/		return 0x821594E0;
		/* 821594D4h case   13:*/		return 0x821594D8;
	}
	return 0x821594D8;
} // Block from 821594A0h-821594D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821594D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821594D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821594D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821594D8);
		  /* 821594D8h */ case    0:  		/* lis R11, -32256 */
		/* 821594D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821594D8h case    0:*/		return 0x821594DC;
		  /* 821594DCh */ case    1:  		/* addi R4, R11, 17768 */
		/* 821594DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 821594DCh case    1:*/		return 0x821594E0;
	}
	return 0x821594E0;
} // Block from 821594D8h-821594E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821594E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821594E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821594E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821594E0);
		  /* 821594E0h */ case    0:  		/* bl -79408 */
		/* 821594E0h case    0:*/		regs.LR = 0x821594E4; return 0x82145EB0;
		/* 821594E0h case    0:*/		return 0x821594E4;
		  /* 821594E4h */ case    1:  		/* li R11, 1 */
		/* 821594E4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821594E4h case    1:*/		return 0x821594E8;
		  /* 821594E8h */ case    2:  		/* stb R11, <#[R31 + 4]> */
		/* 821594E8h case    2:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821594E8h case    2:*/		return 0x821594EC;
	}
	return 0x821594EC;
} // Block from 821594E0h-821594ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821594ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821594EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821594EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821594EC);
		  /* 821594ECh */ case    0:  		/* addi R1, R1, 112 */
		/* 821594ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821594ECh case    0:*/		return 0x821594F0;
		  /* 821594F0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821594F0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821594F0h case    1:*/		return 0x821594F4;
		  /* 821594F4h */ case    2:  		/* mtspr LR, R12 */
		/* 821594F4h case    2:*/		regs.LR = regs.R12;
		/* 821594F4h case    2:*/		return 0x821594F8;
		  /* 821594F8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821594F8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821594F8h case    3:*/		return 0x821594FC;
		  /* 821594FCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821594FCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821594FCh case    4:*/		return 0x82159500;
	}
	return 0x82159500;
} // Block from 821594ECh-82159500h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82159500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159500);
		  /* 82159500h */ case    0:  		/* mfspr R12, LR */
		/* 82159500h case    0:*/		regs.R12 = regs.LR;
		/* 82159500h case    0:*/		return 0x82159504;
		  /* 82159504h */ case    1:  		/* bl -819892 */
		/* 82159504h case    1:*/		regs.LR = 0x82159508; return 0x82091250;
		/* 82159504h case    1:*/		return 0x82159508;
		  /* 82159508h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82159508h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82159508h case    2:*/		return 0x8215950C;
		  /* 8215950Ch */ case    3:  		/* li R29, 1 */
		/* 8215950Ch case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8215950Ch case    3:*/		return 0x82159510;
		  /* 82159510h */ case    4:  		/* mr R30, R3 */
		/* 82159510h case    4:*/		regs.R30 = regs.R3;
		/* 82159510h case    4:*/		return 0x82159514;
		  /* 82159514h */ case    5:  		/* mr R31, R4 */
		/* 82159514h case    5:*/		regs.R31 = regs.R4;
		/* 82159514h case    5:*/		return 0x82159518;
		  /* 82159518h */ case    6:  		/* mr R28, R29 */
		/* 82159518h case    6:*/		regs.R28 = regs.R29;
		/* 82159518h case    6:*/		return 0x8215951C;
		  /* 8215951Ch */ case    7:  		/* bl -5524 */
		/* 8215951Ch case    7:*/		regs.LR = 0x82159520; return 0x82157F88;
		/* 8215951Ch case    7:*/		return 0x82159520;
		  /* 82159520h */ case    8:  		/* li R27, -1 */
		/* 82159520h case    8:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 82159520h case    8:*/		return 0x82159524;
		  /* 82159524h */ case    9:  		/* li R26, -1 */
		/* 82159524h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFF);
		/* 82159524h case    9:*/		return 0x82159528;
		  /* 82159528h */ case   10:  		/* addi R26, R26, 1 */
		/* 82159528h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82159528h case   10:*/		return 0x8215952C;
		  /* 8215952Ch */ case   11:  		/* srawi R11, R26, 1 */
		/* 8215952Ch case   11:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R26);
		/* 8215952Ch case   11:*/		return 0x82159530;
		  /* 82159530h */ case   12:  		/* addze R11, R11 */
		/* 82159530h case   12:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 82159530h case   12:*/		return 0x82159534;
		  /* 82159534h */ case   13:  		/* cmpw CR6, R11, R27 */
		/* 82159534h case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 82159534h case   13:*/		return 0x82159538;
		  /* 82159538h */ case   14:  		/* bc 12, CR6_EQ, 168 */
		/* 82159538h case   14:*/		if ( regs.CR[6].eq ) { return 0x821595E0;  }
		/* 82159538h case   14:*/		return 0x8215953C;
		  /* 8215953Ch */ case   15:  		/* li R5, 4 */
		/* 8215953Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8215953Ch case   15:*/		return 0x82159540;
		  /* 82159540h */ case   16:  		/* li R4, 45 */
		/* 82159540h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 82159540h case   16:*/		return 0x82159544;
		  /* 82159544h */ case   17:  		/* mr R3, R31 */
		/* 82159544h case   17:*/		regs.R3 = regs.R31;
		/* 82159544h case   17:*/		return 0x82159548;
		  /* 82159548h */ case   18:  		/* bl -6712 */
		/* 82159548h case   18:*/		regs.LR = 0x8215954C; return 0x82157B10;
		/* 82159548h case   18:*/		return 0x8215954C;
		  /* 8215954Ch */ case   19:  		/* addi R11, R3, -1 */
		/* 8215954Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 8215954Ch case   19:*/		return 0x82159550;
		  /* 82159550h */ case   20:  		/* cmplwi CR6, R11, 10 */
		/* 82159550h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 82159550h case   20:*/		return 0x82159554;
		  /* 82159554h */ case   21:  		/* bc 12, CR6_GT, 128 */
		/* 82159554h case   21:*/		if ( regs.CR[6].gt ) { return 0x821595D4;  }
		/* 82159554h case   21:*/		return 0x82159558;
		  /* 82159558h */ case   22:  		/* lis R12, -32252 */
		/* 82159558h case   22:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 82159558h case   22:*/		return 0x8215955C;
		  /* 8215955Ch */ case   23:  		/* addi R12, R12, -23616 */
		/* 8215955Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA3C0);
		/* 8215955Ch case   23:*/		return 0x82159560;
		  /* 82159560h */ case   24:  		/* lbzx R0, <#[R12 + R11]> */
		/* 82159560h case   24:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 82159560h case   24:*/		return 0x82159564;
		  /* 82159564h */ case   25:  		/* lis R12, -32234 */
		/* 82159564h case   25:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8216);
		/* 82159564h case   25:*/		return 0x82159568;
		  /* 82159568h */ case   26:  		/* ori R0, R0, 0 */
		/* 82159568h case   26:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82159568h case   26:*/		return 0x8215956C;
		  /* 8215956Ch */ case   27:  		/* addi R12, R12, -27264 */
		/* 8215956Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9580);
		/* 8215956Ch case   27:*/		return 0x82159570;
		  /* 82159570h */ case   28:  		/* ori R0, R0, 0 */
		/* 82159570h case   28:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82159570h case   28:*/		return 0x82159574;
		  /* 82159574h */ case   29:  		/* add R12, R12, R0 */
		/* 82159574h case   29:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82159574h case   29:*/		return 0x82159578;
		  /* 82159578h */ case   30:  		/* mtspr CTR, R12 */
		/* 82159578h case   30:*/		regs.CTR = regs.R12;
		/* 82159578h case   30:*/		return 0x8215957C;
		  /* 8215957Ch */ case   31:  		/* bcctr 20, CR0_LT */
		/* 8215957Ch case   31:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8215957Ch case   31:*/		return 0x82159580;
		  /* 82159580h */ case   32:  		/* li R5, 12 */
		/* 82159580h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82159580h case   32:*/		return 0x82159584;
		  /* 82159584h */ case   33:  		/* li R4, 1 */
		/* 82159584h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82159584h case   33:*/		return 0x82159588;
		  /* 82159588h */ case   34:  		/* mr R3, R31 */
		/* 82159588h case   34:*/		regs.R3 = regs.R31;
		/* 82159588h case   34:*/		return 0x8215958C;
		  /* 8215958Ch */ case   35:  		/* bl -6780 */
		/* 8215958Ch case   35:*/		regs.LR = 0x82159590; return 0x82157B10;
		/* 8215958Ch case   35:*/		return 0x82159590;
		  /* 82159590h */ case   36:  		/* cmpwi CR6, R27, -1 */
		/* 82159590h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R27,0xFFFFFFFF);
		/* 82159590h case   36:*/		return 0x82159594;
		  /* 82159594h */ case   37:  		/* bc 4, CR6_EQ, 64 */
		/* 82159594h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821595D4;  }
		/* 82159594h case   37:*/		return 0x82159598;
		  /* 82159598h */ case   38:  		/* mr R27, R3 */
		/* 82159598h case   38:*/		regs.R27 = regs.R3;
		/* 82159598h case   38:*/		return 0x8215959C;
		  /* 8215959Ch */ case   39:  		/* b 56 */
		/* 8215959Ch case   39:*/		return 0x821595D4;
		/* 8215959Ch case   39:*/		return 0x821595A0;
		  /* 821595A0h */ case   40:  		/* li R28, 0 */
		/* 821595A0h case   40:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821595A0h case   40:*/		return 0x821595A4;
		  /* 821595A4h */ case   41:  		/* b 48 */
		/* 821595A4h case   41:*/		return 0x821595D4;
		/* 821595A4h case   41:*/		return 0x821595A8;
		  /* 821595A8h */ case   42:  		/* li R5, 13 */
		/* 821595A8h case   42:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 821595A8h case   42:*/		return 0x821595AC;
		  /* 821595ACh */ case   43:  		/* li R4, 1 */
		/* 821595ACh case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821595ACh case   43:*/		return 0x821595B0;
		  /* 821595B0h */ case   44:  		/* mr R3, R31 */
		/* 821595B0h case   44:*/		regs.R3 = regs.R31;
		/* 821595B0h case   44:*/		return 0x821595B4;
		  /* 821595B4h */ case   45:  		/* bl -6820 */
		/* 821595B4h case   45:*/		regs.LR = 0x821595B8; return 0x82157B10;
		/* 821595B4h case   45:*/		return 0x821595B8;
		  /* 821595B8h */ case   46:  		/* addi R11, R30, 16 */
		/* 821595B8h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x10);
		/* 821595B8h case   46:*/		return 0x821595BC;
		  /* 821595BCh */ case   47:  		/* rlwinm R10, R3, 29, 3, 29 */
		/* 821595BCh case   47:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R3);
		/* 821595BCh case   47:*/		return 0x821595C0;
		  /* 821595C0h */ case   48:  		/* rlwinm R9, R3, 0, 27, 31 */
		/* 821595C0h case   48:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R3);
		/* 821595C0h case   48:*/		return 0x821595C4;
		  /* 821595C4h */ case   49:  		/* slw R9, R29, R9 */
		/* 821595C4h case   49:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R9);
		/* 821595C4h case   49:*/		return 0x821595C8;
		  /* 821595C8h */ case   50:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821595C8h case   50:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821595C8h case   50:*/		return 0x821595CC;
		  /* 821595CCh */ case   51:  		/* or R9, R9, R8 */
		/* 821595CCh case   51:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821595CCh case   51:*/		return 0x821595D0;
		  /* 821595D0h */ case   52:  		/* stwx R9, <#[R10 + R11]> */
		/* 821595D0h case   52:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821595D0h case   52:*/		return 0x821595D4;
	}
	return 0x821595D4;
} // Block from 82159500h-821595D4h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821595D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821595D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821595D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821595D4);
		  /* 821595D4h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821595D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821595D4h case    0:*/		return 0x821595D8;
		  /* 821595D8h */ case    1:  		/* addi R31, R31, 6 */
		/* 821595D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x6);
		/* 821595D8h case    1:*/		return 0x821595DC;
		  /* 821595DCh */ case    2:  		/* bc 4, CR0_EQ, -180 */
		/* 821595DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82159528;  }
		/* 821595DCh case    2:*/		return 0x821595E0;
	}
	return 0x821595E0;
} // Block from 821595D4h-821595E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821595E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821595E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821595E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821595E0);
		  /* 821595E0h */ case    0:  		/* addi R1, R1, 144 */
		/* 821595E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821595E0h case    0:*/		return 0x821595E4;
		  /* 821595E4h */ case    1:  		/* b -820036 */
		/* 821595E4h case    1:*/		return 0x820912A0;
		/* 821595E4h case    1:*/		return 0x821595E8;
	}
	return 0x821595E8;
} // Block from 821595E0h-821595E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821595E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821595E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821595E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821595E8);
		  /* 821595E8h */ case    0:  		/* mfspr R12, LR */
		/* 821595E8h case    0:*/		regs.R12 = regs.LR;
		/* 821595E8h case    0:*/		return 0x821595EC;
		  /* 821595ECh */ case    1:  		/* bl -820132 */
		/* 821595ECh case    1:*/		regs.LR = 0x821595F0; return 0x82091248;
		/* 821595ECh case    1:*/		return 0x821595F0;
		  /* 821595F0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821595F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821595F0h case    2:*/		return 0x821595F4;
		  /* 821595F4h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 821595F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821595F4h case    3:*/		return 0x821595F8;
		  /* 821595F8h */ case    4:  		/* lis R10, -32768 */
		/* 821595F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 821595F8h case    4:*/		return 0x821595FC;
		  /* 821595FCh */ case    5:  		/* mr R31, R3 */
		/* 821595FCh case    5:*/		regs.R31 = regs.R3;
		/* 821595FCh case    5:*/		return 0x82159600;
		  /* 82159600h */ case    6:  		/* rlwinm R11, R11, 0, 0, 0 */
		/* 82159600h case    6:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82159600h case    6:*/		return 0x82159604;
		  /* 82159604h */ case    7:  		/* mr R30, R4 */
		/* 82159604h case    7:*/		regs.R30 = regs.R4;
		/* 82159604h case    7:*/		return 0x82159608;
		  /* 82159608h */ case    8:  		/* mr R24, R5 */
		/* 82159608h case    8:*/		regs.R24 = regs.R5;
		/* 82159608h case    8:*/		return 0x8215960C;
		  /* 8215960Ch */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8215960Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8215960Ch case    9:*/		return 0x82159610;
		  /* 82159610h */ case   10:  		/* bc 4, CR6_EQ, 52 */
		/* 82159610h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82159644;  }
		/* 82159610h case   10:*/		return 0x82159614;
		  /* 82159614h */ case   11:  		/* lwz R11, <#[R4 + 8]> */
		/* 82159614h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 82159614h case   11:*/		return 0x82159618;
		  /* 82159618h */ case   12:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82159618h case   12:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82159618h case   12:*/		return 0x8215961C;
		  /* 8215961Ch */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 8215961Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x8215962C;  }
		/* 8215961Ch case   13:*/		return 0x82159620;
		  /* 82159620h */ case   14:  		/* lis R11, -32252 */
		/* 82159620h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159620h case   14:*/		return 0x82159624;
		  /* 82159624h */ case   15:  		/* addi R5, R11, -22800 */
		/* 82159624h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA6F0);
		/* 82159624h case   15:*/		return 0x82159628;
		  /* 82159628h */ case   16:  		/* b 12 */
		/* 82159628h case   16:*/		return 0x82159634;
		/* 82159628h case   16:*/		return 0x8215962C;
	}
	return 0x8215962C;
} // Block from 821595E8h-8215962Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215962Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215962C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215962C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215962C);
		  /* 8215962Ch */ case    0:  		/* lis R11, -32252 */
		/* 8215962Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215962Ch case    0:*/		return 0x82159630;
		  /* 82159630h */ case    1:  		/* addi R5, R11, -22804 */
		/* 82159630h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA6EC);
		/* 82159630h case    1:*/		return 0x82159634;
	}
	return 0x82159634;
} // Block from 8215962Ch-82159634h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159634);
		  /* 82159634h */ case    0:  		/* lis R11, -32253 */
		/* 82159634h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82159634h case    0:*/		return 0x82159638;
	}
	return 0x82159638;
} // Block from 82159634h-82159638h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82159638h
// Function '?PrintSourceReg@Disassembler@XGRAPHICS@@AAAXHHHHHHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159638);
		  /* 82159638h */ case    0:  		/* mr R3, R31 */
		/* 82159638h case    0:*/		regs.R3 = regs.R31;
		/* 82159638h case    0:*/		return 0x8215963C;
		  /* 8215963Ch */ case    1:  		/* addi R4, R11, 31028 */
		/* 8215963Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7934);
		/* 8215963Ch case    1:*/		return 0x82159640;
		  /* 82159640h */ case    2:  		/* bl -5912 */
		/* 82159640h case    2:*/		regs.LR = 0x82159644; return 0x82157F28;
		/* 82159640h case    2:*/		return 0x82159644;
	}
	return 0x82159644;
} // Block from 82159638h-82159644h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82159644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159644);
		  /* 82159644h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82159644h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159644h case    0:*/		return 0x82159648;
		  /* 82159648h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 82159648h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82159648h case    1:*/		return 0x8215964C;
		  /* 8215964Ch */ case    2:  		/* bc 12, CR0_EQ, 1260 */
		/* 8215964Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82159B38;  }
		/* 8215964Ch case    2:*/		return 0x82159650;
		  /* 82159650h */ case    3:  		/* cmpwi CR6, R11, 0 */
		/* 82159650h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82159650h case    3:*/		return 0x82159654;
		  /* 82159654h */ case    4:  		/* bc 4, CR6_GT, 1232 */
		/* 82159654h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82159B24;  }
		/* 82159654h case    4:*/		return 0x82159658;
		  /* 82159658h */ case    5:  		/* cmpwi CR6, R11, 4 */
		/* 82159658h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82159658h case    5:*/		return 0x8215965C;
		  /* 8215965Ch */ case    6:  		/* bc 4, CR6_GT, 36 */
		/* 8215965Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x82159680;  }
		/* 8215965Ch case    6:*/		return 0x82159660;
		  /* 82159660h */ case    7:  		/* cmpwi CR6, R11, 15 */
		/* 82159660h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 82159660h case    7:*/		return 0x82159664;
		  /* 82159664h */ case    8:  		/* bc 4, CR6_GT, 1216 */
		/* 82159664h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82159B24;  }
		/* 82159664h case    8:*/		return 0x82159668;
		  /* 82159668h */ case    9:  		/* cmpwi CR6, R11, 19 */
		/* 82159668h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82159668h case    9:*/		return 0x8215966C;
		  /* 8215966Ch */ case   10:  		/* bc 4, CR6_GT, 20 */
		/* 8215966Ch case   10:*/		if ( !regs.CR[6].gt ) { return 0x82159680;  }
		/* 8215966Ch case   10:*/		return 0x82159670;
		  /* 82159670h */ case   11:  		/* cmpwi CR6, R11, 23 */
		/* 82159670h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 82159670h case   11:*/		return 0x82159674;
		  /* 82159674h */ case   12:  		/* bc 4, CR6_GT, 1200 */
		/* 82159674h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82159B24;  }
		/* 82159674h case   12:*/		return 0x82159678;
		  /* 82159678h */ case   13:  		/* cmpwi CR6, R11, 27 */
		/* 82159678h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001B);
		/* 82159678h case   13:*/		return 0x8215967C;
		  /* 8215967Ch */ case   14:  		/* bc 12, CR6_GT, 1192 */
		/* 8215967Ch case   14:*/		if ( regs.CR[6].gt ) { return 0x82159B24;  }
		/* 8215967Ch case   14:*/		return 0x82159680;
	}
	return 0x82159680;
} // Block from 82159644h-82159680h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82159680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159680);
		  /* 82159680h */ case    0:  		/* lis R10, -32252 */
		/* 82159680h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82159680h case    0:*/		return 0x82159684;
		  /* 82159684h */ case    1:  		/* addi R11, R11, -1 */
		/* 82159684h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82159684h case    1:*/		return 0x82159688;
		  /* 82159688h */ case    2:  		/* addi R4, R10, -22820 */
		/* 82159688h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFA6DC);
		/* 82159688h case    2:*/		return 0x8215968C;
		  /* 8215968Ch */ case    3:  		/* cmplwi CR6, R11, 26 */
		/* 8215968Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001A);
		/* 8215968Ch case    3:*/		return 0x82159690;
		  /* 82159690h */ case    4:  		/* bc 12, CR6_GT, 184 */
		/* 82159690h case    4:*/		if ( regs.CR[6].gt ) { return 0x82159748;  }
		/* 82159690h case    4:*/		return 0x82159694;
		  /* 82159694h */ case    5:  		/* lis R12, -32252 */
		/* 82159694h case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 82159694h case    5:*/		return 0x82159698;
		  /* 82159698h */ case    6:  		/* addi R12, R12, -23600 */
		/* 82159698h case    6:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA3D0);
		/* 82159698h case    6:*/		return 0x8215969C;
		  /* 8215969Ch */ case    7:  		/* lbzx R0, <#[R12 + R11]> */
		/* 8215969Ch case    7:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 8215969Ch case    7:*/		return 0x821596A0;
		  /* 821596A0h */ case    8:  		/* lis R12, -32234 */
		/* 821596A0h case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8216);
		/* 821596A0h case    8:*/		return 0x821596A4;
		  /* 821596A4h */ case    9:  		/* ori R0, R0, 0 */
		/* 821596A4h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821596A4h case    9:*/		return 0x821596A8;
		  /* 821596A8h */ case   10:  		/* addi R12, R12, -26948 */
		/* 821596A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF96BC);
		/* 821596A8h case   10:*/		return 0x821596AC;
		  /* 821596ACh */ case   11:  		/* ori R0, R0, 0 */
		/* 821596ACh case   11:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821596ACh case   11:*/		return 0x821596B0;
		  /* 821596B0h */ case   12:  		/* add R12, R12, R0 */
		/* 821596B0h case   12:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821596B0h case   12:*/		return 0x821596B4;
		  /* 821596B4h */ case   13:  		/* mtspr CTR, R12 */
		/* 821596B4h case   13:*/		regs.CTR = regs.R12;
		/* 821596B4h case   13:*/		return 0x821596B8;
		  /* 821596B8h */ case   14:  		/* bcctr 20, CR0_LT */
		/* 821596B8h case   14:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821596B8h case   14:*/		return 0x821596BC;
		  /* 821596BCh */ case   15:  		/* lis R11, -32252 */
		/* 821596BCh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596BCh case   15:*/		return 0x821596C0;
		  /* 821596C0h */ case   16:  		/* addi R4, R11, -22828 */
		/* 821596C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA6D4);
		/* 821596C0h case   16:*/		return 0x821596C4;
		  /* 821596C4h */ case   17:  		/* b 132 */
		/* 821596C4h case   17:*/		return 0x82159748;
		/* 821596C4h case   17:*/		return 0x821596C8;
		  /* 821596C8h */ case   18:  		/* lis R11, -32252 */
		/* 821596C8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596C8h case   18:*/		return 0x821596CC;
		  /* 821596CCh */ case   19:  		/* addi R4, R11, -22844 */
		/* 821596CCh case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA6C4);
		/* 821596CCh case   19:*/		return 0x821596D0;
		  /* 821596D0h */ case   20:  		/* b 120 */
		/* 821596D0h case   20:*/		return 0x82159748;
		/* 821596D0h case   20:*/		return 0x821596D4;
		  /* 821596D4h */ case   21:  		/* lis R11, -32252 */
		/* 821596D4h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596D4h case   21:*/		return 0x821596D8;
		  /* 821596D8h */ case   22:  		/* addi R4, R11, -22860 */
		/* 821596D8h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA6B4);
		/* 821596D8h case   22:*/		return 0x821596DC;
		  /* 821596DCh */ case   23:  		/* b 108 */
		/* 821596DCh case   23:*/		return 0x82159748;
		/* 821596DCh case   23:*/		return 0x821596E0;
		  /* 821596E0h */ case   24:  		/* lis R11, -32252 */
		/* 821596E0h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596E0h case   24:*/		return 0x821596E4;
		  /* 821596E4h */ case   25:  		/* addi R4, R11, -22880 */
		/* 821596E4h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA6A0);
		/* 821596E4h case   25:*/		return 0x821596E8;
		  /* 821596E8h */ case   26:  		/* b 96 */
		/* 821596E8h case   26:*/		return 0x82159748;
		/* 821596E8h case   26:*/		return 0x821596EC;
		  /* 821596ECh */ case   27:  		/* lis R11, -32252 */
		/* 821596ECh case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596ECh case   27:*/		return 0x821596F0;
		  /* 821596F0h */ case   28:  		/* addi R4, R11, -22904 */
		/* 821596F0h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA688);
		/* 821596F0h case   28:*/		return 0x821596F4;
		  /* 821596F4h */ case   29:  		/* b 84 */
		/* 821596F4h case   29:*/		return 0x82159748;
		/* 821596F4h case   29:*/		return 0x821596F8;
		  /* 821596F8h */ case   30:  		/* lis R11, -32252 */
		/* 821596F8h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821596F8h case   30:*/		return 0x821596FC;
		  /* 821596FCh */ case   31:  		/* addi R4, R11, -22920 */
		/* 821596FCh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA678);
		/* 821596FCh case   31:*/		return 0x82159700;
		  /* 82159700h */ case   32:  		/* b 72 */
		/* 82159700h case   32:*/		return 0x82159748;
		/* 82159700h case   32:*/		return 0x82159704;
		  /* 82159704h */ case   33:  		/* lis R11, -32252 */
		/* 82159704h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159704h case   33:*/		return 0x82159708;
		  /* 82159708h */ case   34:  		/* addi R4, R11, -22932 */
		/* 82159708h case   34:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA66C);
		/* 82159708h case   34:*/		return 0x8215970C;
		  /* 8215970Ch */ case   35:  		/* b 60 */
		/* 8215970Ch case   35:*/		return 0x82159748;
		/* 8215970Ch case   35:*/		return 0x82159710;
		  /* 82159710h */ case   36:  		/* lis R11, -32252 */
		/* 82159710h case   36:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159710h case   36:*/		return 0x82159714;
		  /* 82159714h */ case   37:  		/* addi R4, R11, -22944 */
		/* 82159714h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA660);
		/* 82159714h case   37:*/		return 0x82159718;
		  /* 82159718h */ case   38:  		/* b 48 */
		/* 82159718h case   38:*/		return 0x82159748;
		/* 82159718h case   38:*/		return 0x8215971C;
		  /* 8215971Ch */ case   39:  		/* lis R11, -32255 */
		/* 8215971Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8215971Ch case   39:*/		return 0x82159720;
		  /* 82159720h */ case   40:  		/* addi R4, R11, 12984 */
		/* 82159720h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x32B8);
		/* 82159720h case   40:*/		return 0x82159724;
		  /* 82159724h */ case   41:  		/* b 36 */
		/* 82159724h case   41:*/		return 0x82159748;
		/* 82159724h case   41:*/		return 0x82159728;
		  /* 82159728h */ case   42:  		/* lis R11, -32255 */
		/* 82159728h case   42:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159728h case   42:*/		return 0x8215972C;
		  /* 8215972Ch */ case   43:  		/* addi R4, R11, 12968 */
		/* 8215972Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x32A8);
		/* 8215972Ch case   43:*/		return 0x82159730;
		  /* 82159730h */ case   44:  		/* b 24 */
		/* 82159730h case   44:*/		return 0x82159748;
		/* 82159730h case   44:*/		return 0x82159734;
		  /* 82159734h */ case   45:  		/* lis R11, -32255 */
		/* 82159734h case   45:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159734h case   45:*/		return 0x82159738;
		  /* 82159738h */ case   46:  		/* addi R4, R11, 12952 */
		/* 82159738h case   46:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3298);
		/* 82159738h case   46:*/		return 0x8215973C;
		  /* 8215973Ch */ case   47:  		/* b 12 */
		/* 8215973Ch case   47:*/		return 0x82159748;
		/* 8215973Ch case   47:*/		return 0x82159740;
		  /* 82159740h */ case   48:  		/* lis R11, -32252 */
		/* 82159740h case   48:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159740h case   48:*/		return 0x82159744;
		  /* 82159744h */ case   49:  		/* addi R4, R11, -22964 */
		/* 82159744h case   49:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA64C);
		/* 82159744h case   49:*/		return 0x82159748;
	}
	return 0x82159748;
} // Block from 82159680h-82159748h (50 instructions)

//////////////////////////////////////////////////////
// Block at 82159748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159748);
		  /* 82159748h */ case    0:  		/* mr R3, R31 */
		/* 82159748h case    0:*/		regs.R3 = regs.R31;
		/* 82159748h case    0:*/		return 0x8215974C;
		  /* 8215974Ch */ case    1:  		/* bl -4004 */
		/* 8215974Ch case    1:*/		regs.LR = 0x82159750; return 0x821587A8;
		/* 8215974Ch case    1:*/		return 0x82159750;
		  /* 82159750h */ case    2:  		/* lis R11, -32255 */
		/* 82159750h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159750h case    2:*/		return 0x82159754;
		  /* 82159754h */ case    3:  		/* mr R3, R31 */
		/* 82159754h case    3:*/		regs.R3 = regs.R31;
		/* 82159754h case    3:*/		return 0x82159758;
		  /* 82159758h */ case    4:  		/* addi R4, R11, -15864 */
		/* 82159758h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFC208);
		/* 82159758h case    4:*/		return 0x8215975C;
		  /* 8215975Ch */ case    5:  		/* bl -6196 */
		/* 8215975Ch case    5:*/		regs.LR = 0x82159760; return 0x82157F28;
		/* 8215975Ch case    5:*/		return 0x82159760;
		  /* 82159760h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 82159760h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159760h case    6:*/		return 0x82159764;
		  /* 82159764h */ case    7:  		/* mr R3, R31 */
		/* 82159764h case    7:*/		regs.R3 = regs.R31;
		/* 82159764h case    7:*/		return 0x82159768;
		  /* 82159768h */ case    8:  		/* rlwinm. R10, R11, 0, 13, 13 */
		/* 82159768h case    8:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R11);
		/* 82159768h case    8:*/		return 0x8215976C;
		  /* 8215976Ch */ case    9:  		/* rlwinm R5, R11, 20, 26, 31 */
		/* 8215976Ch case    9:*/		cpu::op::rlwinm<0,20,26,31>(regs,&regs.R5,regs.R11);
		/* 8215976Ch case    9:*/		return 0x82159770;
		  /* 82159770h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 82159770h case   10:*/		if ( regs.CR[0].eq ) { return 0x82159780;  }
		/* 82159770h case   10:*/		return 0x82159774;
		  /* 82159774h */ case   11:  		/* lis R11, -32252 */
		/* 82159774h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159774h case   11:*/		return 0x82159778;
		  /* 82159778h */ case   12:  		/* addi R4, R11, -23632 */
		/* 82159778h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA3B0);
		/* 82159778h case   12:*/		return 0x8215977C;
		  /* 8215977Ch */ case   13:  		/* b 12 */
		/* 8215977Ch case   13:*/		return 0x82159788;
		/* 8215977Ch case   13:*/		return 0x82159780;
	}
	return 0x82159780;
} // Block from 82159748h-82159780h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82159780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159780);
		  /* 82159780h */ case    0:  		/* lis R11, -32252 */
		/* 82159780h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159780h case    0:*/		return 0x82159784;
		  /* 82159784h */ case    1:  		/* addi R4, R11, -23636 */
		/* 82159784h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA3AC);
		/* 82159784h case    1:*/		return 0x82159788;
	}
	return 0x82159788;
} // Block from 82159780h-82159788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159788);
		  /* 82159788h */ case    0:  		/* bl -6240 */
		/* 82159788h case    0:*/		regs.LR = 0x8215978C; return 0x82157F28;
		/* 82159788h case    0:*/		return 0x8215978C;
		  /* 8215978Ch */ case    1:  		/* lis R11, -32256 */
		/* 8215978Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8215978Ch case    1:*/		return 0x82159790;
		  /* 82159790h */ case    2:  		/* mr R3, R31 */
		/* 82159790h case    2:*/		regs.R3 = regs.R31;
		/* 82159790h case    2:*/		return 0x82159794;
		  /* 82159794h */ case    3:  		/* addi R27, R11, 20592 */
		/* 82159794h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x5070);
		/* 82159794h case    3:*/		return 0x82159798;
		  /* 82159798h */ case    4:  		/* mr R4, R27 */
		/* 82159798h case    4:*/		regs.R4 = regs.R27;
		/* 82159798h case    4:*/		return 0x8215979C;
		  /* 8215979Ch */ case    5:  		/* bl -6260 */
		/* 8215979Ch case    5:*/		regs.LR = 0x821597A0; return 0x82157F28;
		/* 8215979Ch case    5:*/		return 0x821597A0;
		  /* 821597A0h */ case    6:  		/* lis R11, -32217 */
		/* 821597A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821597A0h case    6:*/		return 0x821597A4;
		  /* 821597A4h */ case    7:  		/* lis R10, -32253 */
		/* 821597A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821597A4h case    7:*/		return 0x821597A8;
		  /* 821597A8h */ case    8:  		/* addi R29, R11, 20048 */
		/* 821597A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4E50);
		/* 821597A8h case    8:*/		return 0x821597AC;
		  /* 821597ACh */ case    9:  		/* addi R28, R10, 25796 */
		/* 821597ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x64C4);
		/* 821597ACh case    9:*/		return 0x821597B0;
		  /* 821597B0h */ case   10:  		/* mr R3, R31 */
		/* 821597B0h case   10:*/		regs.R3 = regs.R31;
		/* 821597B0h case   10:*/		return 0x821597B4;
		  /* 821597B4h */ case   11:  		/* mr R4, R28 */
		/* 821597B4h case   11:*/		regs.R4 = regs.R28;
		/* 821597B4h case   11:*/		return 0x821597B8;
		  /* 821597B8h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 821597B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821597B8h case   12:*/		return 0x821597BC;
		  /* 821597BCh */ case   13:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821597BCh case   13:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821597BCh case   13:*/		return 0x821597C0;
		  /* 821597C0h */ case   14:  		/* lbzx R11, <#[R11 + R29]> */
		/* 821597C0h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821597C0h case   14:*/		return 0x821597C4;
		  /* 821597C4h */ case   15:  		/* extsb R5, R11 */
		/* 821597C4h case   15:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 821597C4h case   15:*/		return 0x821597C8;
		  /* 821597C8h */ case   16:  		/* bl -6304 */
		/* 821597C8h case   16:*/		regs.LR = 0x821597CC; return 0x82157F28;
		/* 821597C8h case   16:*/		return 0x821597CC;
		  /* 821597CCh */ case   17:  		/* lwz R11, <#[R30 + 4]> */
		/* 821597CCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821597CCh case   17:*/		return 0x821597D0;
		  /* 821597D0h */ case   18:  		/* mr R4, R28 */
		/* 821597D0h case   18:*/		regs.R4 = regs.R28;
		/* 821597D0h case   18:*/		return 0x821597D4;
		  /* 821597D4h */ case   19:  		/* rlwinm R11, R11, 29, 29, 31 */
		/* 821597D4h case   19:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R11,regs.R11);
		/* 821597D4h case   19:*/		return 0x821597D8;
		  /* 821597D8h */ case   20:  		/* mr R3, R31 */
		/* 821597D8h case   20:*/		regs.R3 = regs.R31;
		/* 821597D8h case   20:*/		return 0x821597DC;
		  /* 821597DCh */ case   21:  		/* lbzx R11, <#[R11 + R29]> */
		/* 821597DCh case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821597DCh case   21:*/		return 0x821597E0;
		  /* 821597E0h */ case   22:  		/* extsb R5, R11 */
		/* 821597E0h case   22:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 821597E0h case   22:*/		return 0x821597E4;
		  /* 821597E4h */ case   23:  		/* bl -6332 */
		/* 821597E4h case   23:*/		regs.LR = 0x821597E8; return 0x82157F28;
		/* 821597E4h case   23:*/		return 0x821597E8;
		  /* 821597E8h */ case   24:  		/* lwz R11, <#[R30 + 4]> */
		/* 821597E8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821597E8h case   24:*/		return 0x821597EC;
		  /* 821597ECh */ case   25:  		/* mr R4, R28 */
		/* 821597ECh case   25:*/		regs.R4 = regs.R28;
		/* 821597ECh case   25:*/		return 0x821597F0;
		  /* 821597F0h */ case   26:  		/* rlwinm R11, R11, 26, 29, 31 */
		/* 821597F0h case   26:*/		cpu::op::rlwinm<0,26,29,31>(regs,&regs.R11,regs.R11);
		/* 821597F0h case   26:*/		return 0x821597F4;
		  /* 821597F4h */ case   27:  		/* mr R3, R31 */
		/* 821597F4h case   27:*/		regs.R3 = regs.R31;
		/* 821597F4h case   27:*/		return 0x821597F8;
		  /* 821597F8h */ case   28:  		/* lbzx R11, <#[R11 + R29]> */
		/* 821597F8h case   28:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821597F8h case   28:*/		return 0x821597FC;
		  /* 821597FCh */ case   29:  		/* extsb R5, R11 */
		/* 821597FCh case   29:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 821597FCh case   29:*/		return 0x82159800;
		  /* 82159800h */ case   30:  		/* bl -6360 */
		/* 82159800h case   30:*/		regs.LR = 0x82159804; return 0x82157F28;
		/* 82159800h case   30:*/		return 0x82159804;
		  /* 82159804h */ case   31:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159804h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159804h case   31:*/		return 0x82159808;
		  /* 82159808h */ case   32:  		/* mr R4, R28 */
		/* 82159808h case   32:*/		regs.R4 = regs.R28;
		/* 82159808h case   32:*/		return 0x8215980C;
		  /* 8215980Ch */ case   33:  		/* rlwinm R11, R11, 23, 29, 31 */
		/* 8215980Ch case   33:*/		cpu::op::rlwinm<0,23,29,31>(regs,&regs.R11,regs.R11);
		/* 8215980Ch case   33:*/		return 0x82159810;
		  /* 82159810h */ case   34:  		/* mr R3, R31 */
		/* 82159810h case   34:*/		regs.R3 = regs.R31;
		/* 82159810h case   34:*/		return 0x82159814;
		  /* 82159814h */ case   35:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159814h case   35:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159814h case   35:*/		return 0x82159818;
		  /* 82159818h */ case   36:  		/* extsb R5, R11 */
		/* 82159818h case   36:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159818h case   36:*/		return 0x8215981C;
		  /* 8215981Ch */ case   37:  		/* bl -6388 */
		/* 8215981Ch case   37:*/		regs.LR = 0x82159820; return 0x82157F28;
		/* 8215981Ch case   37:*/		return 0x82159820;
		  /* 82159820h */ case   38:  		/* lis R11, -32256 */
		/* 82159820h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82159820h case   38:*/		return 0x82159824;
		  /* 82159824h */ case   39:  		/* mr R3, R31 */
		/* 82159824h case   39:*/		regs.R3 = regs.R31;
		/* 82159824h case   39:*/		return 0x82159828;
		  /* 82159828h */ case   40:  		/* addi R4, R11, 17860 */
		/* 82159828h case   40:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x45C4);
		/* 82159828h case   40:*/		return 0x8215982C;
		  /* 8215982Ch */ case   41:  		/* bl -6404 */
		/* 8215982Ch case   41:*/		regs.LR = 0x82159830; return 0x82157F28;
		/* 8215982Ch case   41:*/		return 0x82159830;
		  /* 82159830h */ case   42:  		/* li R11, 4 */
		/* 82159830h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82159830h case   42:*/		return 0x82159834;
		  /* 82159834h */ case   43:  		/* li R10, 0 */
		/* 82159834h case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82159834h case   43:*/		return 0x82159838;
		  /* 82159838h */ case   44:  		/* stw R11, <#[R1 + 84]> */
		/* 82159838h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82159838h case   44:*/		return 0x8215983C;
		  /* 8215983Ch */ case   45:  		/* li R9, 0 */
		/* 8215983Ch case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8215983Ch case   45:*/		return 0x82159840;
		  /* 82159840h */ case   46:  		/* li R8, 0 */
		/* 82159840h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82159840h case   46:*/		return 0x82159844;
		  /* 82159844h */ case   47:  		/* li R7, 0 */
		/* 82159844h case   47:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82159844h case   47:*/		return 0x82159848;
		  /* 82159848h */ case   48:  		/* li R6, 0 */
		/* 82159848h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82159848h case   48:*/		return 0x8215984C;
		  /* 8215984Ch */ case   49:  		/* li R4, 1 */
		/* 8215984Ch case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215984Ch case   49:*/		return 0x82159850;
		  /* 82159850h */ case   50:  		/* mr R3, R31 */
		/* 82159850h case   50:*/		regs.R3 = regs.R31;
		/* 82159850h case   50:*/		return 0x82159854;
		  /* 82159854h */ case   51:  		/* lwz R11, <#[R30]> */
		/* 82159854h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159854h case   51:*/		return 0x82159858;
		  /* 82159858h */ case   52:  		/* rlwinm R5, R11, 28, 24, 24 */
		/* 82159858h case   52:*/		cpu::op::rlwinm<0,28,24,24>(regs,&regs.R5,regs.R11);
		/* 82159858h case   52:*/		return 0x8215985C;
		  /* 8215985Ch */ case   53:  		/* rlwinm R11, R11, 27, 26, 31 */
		/* 8215985Ch case   53:*/		cpu::op::rlwinm<0,27,26,31>(regs,&regs.R11,regs.R11);
		/* 8215985Ch case   53:*/		return 0x82159860;
		  /* 82159860h */ case   54:  		/* or R5, R5, R11 */
		/* 82159860h case   54:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R11);
		/* 82159860h case   54:*/		return 0x82159864;
		  /* 82159864h */ case   55:  		/* bl -3140 */
		/* 82159864h case   55:*/		regs.LR = 0x82159868; return 0x82158C20;
		/* 82159864h case   55:*/		return 0x82159868;
		  /* 82159868h */ case   56:  		/* mr R4, R27 */
		/* 82159868h case   56:*/		regs.R4 = regs.R27;
		/* 82159868h case   56:*/		return 0x8215986C;
		  /* 8215986Ch */ case   57:  		/* mr R3, R31 */
		/* 8215986Ch case   57:*/		regs.R3 = regs.R31;
		/* 8215986Ch case   57:*/		return 0x82159870;
		  /* 82159870h */ case   58:  		/* bl -6472 */
		/* 82159870h case   58:*/		regs.LR = 0x82159874; return 0x82157F28;
		/* 82159870h case   58:*/		return 0x82159874;
		  /* 82159874h */ case   59:  		/* lwz R11, <#[R30]> */
		/* 82159874h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159874h case   59:*/		return 0x82159878;
		  /* 82159878h */ case   60:  		/* mr R4, R28 */
		/* 82159878h case   60:*/		regs.R4 = regs.R28;
		/* 82159878h case   60:*/		return 0x8215987C;
		  /* 8215987Ch */ case   61:  		/* rlwinm R11, R11, 6, 30, 31 */
		/* 8215987Ch case   61:*/		cpu::op::rlwinm<0,6,30,31>(regs,&regs.R11,regs.R11);
		/* 8215987Ch case   61:*/		return 0x82159880;
		  /* 82159880h */ case   62:  		/* mr R3, R31 */
		/* 82159880h case   62:*/		regs.R3 = regs.R31;
		/* 82159880h case   62:*/		return 0x82159884;
		  /* 82159884h */ case   63:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159884h case   63:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159884h case   63:*/		return 0x82159888;
		  /* 82159888h */ case   64:  		/* extsb R5, R11 */
		/* 82159888h case   64:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159888h case   64:*/		return 0x8215988C;
		  /* 8215988Ch */ case   65:  		/* bl -6500 */
		/* 8215988Ch case   65:*/		regs.LR = 0x82159890; return 0x82157F28;
		/* 8215988Ch case   65:*/		return 0x82159890;
		  /* 82159890h */ case   66:  		/* lwz R11, <#[R30]> */
		/* 82159890h case   66:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159890h case   66:*/		return 0x82159894;
		  /* 82159894h */ case   67:  		/* mr R4, R28 */
		/* 82159894h case   67:*/		regs.R4 = regs.R28;
		/* 82159894h case   67:*/		return 0x82159898;
		  /* 82159898h */ case   68:  		/* rlwinm R11, R11, 4, 30, 31 */
		/* 82159898h case   68:*/		cpu::op::rlwinm<0,4,30,31>(regs,&regs.R11,regs.R11);
		/* 82159898h case   68:*/		return 0x8215989C;
		  /* 8215989Ch */ case   69:  		/* mr R3, R31 */
		/* 8215989Ch case   69:*/		regs.R3 = regs.R31;
		/* 8215989Ch case   69:*/		return 0x821598A0;
		  /* 821598A0h */ case   70:  		/* lbzx R11, <#[R11 + R29]> */
		/* 821598A0h case   70:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821598A0h case   70:*/		return 0x821598A4;
		  /* 821598A4h */ case   71:  		/* extsb R5, R11 */
		/* 821598A4h case   71:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 821598A4h case   71:*/		return 0x821598A8;
		  /* 821598A8h */ case   72:  		/* bl -6528 */
		/* 821598A8h case   72:*/		regs.LR = 0x821598AC; return 0x82157F28;
		/* 821598A8h case   72:*/		return 0x821598AC;
		  /* 821598ACh */ case   73:  		/* lwz R11, <#[R30]> */
		/* 821598ACh case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821598ACh case   73:*/		return 0x821598B0;
		  /* 821598B0h */ case   74:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821598B0h case   74:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821598B0h case   74:*/		return 0x821598B4;
		  /* 821598B4h */ case   75:  		/* cmplwi CR6, R10, 18 */
		/* 821598B4h case   75:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 821598B4h case   75:*/		return 0x821598B8;
		  /* 821598B8h */ case   76:  		/* bc 12, CR6_EQ, 28 */
		/* 821598B8h case   76:*/		if ( regs.CR[6].eq ) { return 0x821598D4;  }
		/* 821598B8h case   76:*/		return 0x821598BC;
		  /* 821598BCh */ case   77:  		/* rlwinm R11, R11, 2, 30, 31 */
		/* 821598BCh case   77:*/		cpu::op::rlwinm<0,2,30,31>(regs,&regs.R11,regs.R11);
		/* 821598BCh case   77:*/		return 0x821598C0;
		  /* 821598C0h */ case   78:  		/* mr R4, R28 */
		/* 821598C0h case   78:*/		regs.R4 = regs.R28;
		/* 821598C0h case   78:*/		return 0x821598C4;
		  /* 821598C4h */ case   79:  		/* mr R3, R31 */
		/* 821598C4h case   79:*/		regs.R3 = regs.R31;
		/* 821598C4h case   79:*/		return 0x821598C8;
		  /* 821598C8h */ case   80:  		/* lbzx R11, <#[R11 + R29]> */
		/* 821598C8h case   80:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821598C8h case   80:*/		return 0x821598CC;
		  /* 821598CCh */ case   81:  		/* extsb R5, R11 */
		/* 821598CCh case   81:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 821598CCh case   81:*/		return 0x821598D0;
		  /* 821598D0h */ case   82:  		/* bl -6568 */
		/* 821598D0h case   82:*/		regs.LR = 0x821598D4; return 0x82157F28;
		/* 821598D0h case   82:*/		return 0x821598D4;
	}
	return 0x821598D4;
} // Block from 82159788h-821598D4h (83 instructions)

//////////////////////////////////////////////////////
// Block at 821598D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821598D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821598D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821598D4);
		  /* 821598D4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821598D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821598D4h case    0:*/		return 0x821598D8;
		  /* 821598D8h */ case    1:  		/* lis R10, -32252 */
		/* 821598D8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821598D8h case    1:*/		return 0x821598DC;
		  /* 821598DCh */ case    2:  		/* mr R3, R31 */
		/* 821598DCh case    2:*/		regs.R3 = regs.R31;
		/* 821598DCh case    2:*/		return 0x821598E0;
		  /* 821598E0h */ case    3:  		/* addi R4, R10, -22972 */
		/* 821598E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFA644);
		/* 821598E0h case    3:*/		return 0x821598E4;
		  /* 821598E4h */ case    4:  		/* rlwinm R5, R11, 12, 27, 31 */
		/* 821598E4h case    4:*/		cpu::op::rlwinm<0,12,27,31>(regs,&regs.R5,regs.R11);
		/* 821598E4h case    4:*/		return 0x821598E8;
		  /* 821598E8h */ case    5:  		/* bl -6592 */
		/* 821598E8h case    5:*/		regs.LR = 0x821598EC; return 0x82157F28;
		/* 821598E8h case    5:*/		return 0x821598EC;
		  /* 821598ECh */ case    6:  		/* lwz R11, <#[R30]> */
		/* 821598ECh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821598ECh case    6:*/		return 0x821598F0;
		  /* 821598F0h */ case    7:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821598F0h case    7:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821598F0h case    7:*/		return 0x821598F4;
		  /* 821598F4h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821598F4h case    8:*/		if ( regs.CR[0].eq ) { return 0x82159908;  }
		/* 821598F4h case    8:*/		return 0x821598F8;
	}
	return 0x821598F8;
} // Block from 821598D4h-821598F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821598F8h
// Function '?PrintInternalKonstantReg@Disassembler@XGRAPHICS@@AAAXHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821598F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821598F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821598F8);
		  /* 821598F8h */ case    0:  		/* lis R11, -32252 */
		/* 821598F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821598F8h case    0:*/		return 0x821598FC;
		  /* 821598FCh */ case    1:  		/* mr R3, R31 */
		/* 821598FCh case    1:*/		regs.R3 = regs.R31;
		/* 821598FCh case    1:*/		return 0x82159900;
		  /* 82159900h */ case    2:  		/* addi R4, R11, -23008 */
		/* 82159900h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA620);
		/* 82159900h case    2:*/		return 0x82159904;
		  /* 82159904h */ case    3:  		/* bl -6620 */
		/* 82159904h case    3:*/		regs.LR = 0x82159908; return 0x82157F28;
		/* 82159904h case    3:*/		return 0x82159908;
	}
	return 0x82159908;
} // Block from 821598F8h-82159908h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82159908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159908);
		  /* 82159908h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159908h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159908h case    0:*/		return 0x8215990C;
		  /* 8215990Ch */ case    1:  		/* rlwinm R11, R11, 20, 30, 31 */
		/* 8215990Ch case    1:*/		cpu::op::rlwinm<0,20,30,31>(regs,&regs.R11,regs.R11);
		/* 8215990Ch case    1:*/		return 0x82159910;
		  /* 82159910h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82159910h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82159910h case    2:*/		return 0x82159914;
		  /* 82159914h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82159914h case    3:*/		if ( regs.CR[6].eq ) { return 0x82159934;  }
		/* 82159914h case    3:*/		return 0x82159918;
		  /* 82159918h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82159918h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82159918h case    4:*/		return 0x8215991C;
		  /* 8215991Ch */ case    5:  		/* addi R10, R29, 1176 */
		/* 8215991Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x498);
		/* 8215991Ch case    5:*/		return 0x82159920;
		  /* 82159920h */ case    6:  		/* lis R9, -32252 */
		/* 82159920h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159920h case    6:*/		return 0x82159924;
		  /* 82159924h */ case    7:  		/* mr R3, R31 */
		/* 82159924h case    7:*/		regs.R3 = regs.R31;
		/* 82159924h case    7:*/		return 0x82159928;
		  /* 82159928h */ case    8:  		/* addi R4, R9, -23024 */
		/* 82159928h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA610);
		/* 82159928h case    8:*/		return 0x8215992C;
		  /* 8215992Ch */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 8215992Ch case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8215992Ch case    9:*/		return 0x82159930;
		  /* 82159930h */ case   10:  		/* bl -6664 */
		/* 82159930h case   10:*/		regs.LR = 0x82159934; return 0x82157F28;
		/* 82159930h case   10:*/		return 0x82159934;
	}
	return 0x82159934;
} // Block from 82159908h-82159934h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82159934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159934);
		  /* 82159934h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159934h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159934h case    0:*/		return 0x82159938;
		  /* 82159938h */ case    1:  		/* rlwinm R11, R11, 18, 30, 31 */
		/* 82159938h case    1:*/		cpu::op::rlwinm<0,18,30,31>(regs,&regs.R11,regs.R11);
		/* 82159938h case    1:*/		return 0x8215993C;
		  /* 8215993Ch */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 8215993Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8215993Ch case    2:*/		return 0x82159940;
		  /* 82159940h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82159940h case    3:*/		if ( regs.CR[6].eq ) { return 0x82159960;  }
		/* 82159940h case    3:*/		return 0x82159944;
		  /* 82159944h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82159944h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82159944h case    4:*/		return 0x82159948;
		  /* 82159948h */ case    5:  		/* addi R10, R29, 1192 */
		/* 82159948h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4A8);
		/* 82159948h case    5:*/		return 0x8215994C;
		  /* 8215994Ch */ case    6:  		/* lis R9, -32252 */
		/* 8215994Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215994Ch case    6:*/		return 0x82159950;
		  /* 82159950h */ case    7:  		/* mr R3, R31 */
		/* 82159950h case    7:*/		regs.R3 = regs.R31;
		/* 82159950h case    7:*/		return 0x82159954;
		  /* 82159954h */ case    8:  		/* addi R4, R9, -23040 */
		/* 82159954h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA600);
		/* 82159954h case    8:*/		return 0x82159958;
		  /* 82159958h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82159958h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159958h case    9:*/		return 0x8215995C;
		  /* 8215995Ch */ case   10:  		/* bl -6708 */
		/* 8215995Ch case   10:*/		regs.LR = 0x82159960; return 0x82157F28;
		/* 8215995Ch case   10:*/		return 0x82159960;
	}
	return 0x82159960;
} // Block from 82159934h-82159960h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82159960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159960);
		  /* 82159960h */ case    0:  		/* lhz R11, <#[R30 + 4]> */
		/* 82159960h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159960h case    0:*/		return 0x82159964;
		  /* 82159964h */ case    1:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82159964h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82159964h case    1:*/		return 0x82159968;
		  /* 82159968h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82159968h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82159968h case    2:*/		return 0x8215996C;
		  /* 8215996Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8215996Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8215998C;  }
		/* 8215996Ch case    3:*/		return 0x82159970;
		  /* 82159970h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82159970h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82159970h case    4:*/		return 0x82159974;
		  /* 82159974h */ case    5:  		/* addi R10, R29, 1208 */
		/* 82159974h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4B8);
		/* 82159974h case    5:*/		return 0x82159978;
		  /* 82159978h */ case    6:  		/* lis R9, -32252 */
		/* 82159978h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159978h case    6:*/		return 0x8215997C;
		  /* 8215997Ch */ case    7:  		/* mr R3, R31 */
		/* 8215997Ch case    7:*/		regs.R3 = regs.R31;
		/* 8215997Ch case    7:*/		return 0x82159980;
		  /* 82159980h */ case    8:  		/* addi R4, R9, -23056 */
		/* 82159980h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA5F0);
		/* 82159980h case    8:*/		return 0x82159984;
		  /* 82159984h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82159984h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159984h case    9:*/		return 0x82159988;
		  /* 82159988h */ case   10:  		/* bl -6752 */
		/* 82159988h case   10:*/		regs.LR = 0x8215998C; return 0x82157F28;
		/* 82159988h case   10:*/		return 0x8215998C;
	}
	return 0x8215998C;
} // Block from 82159960h-8215998Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215998Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215998C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215998C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215998C);
		  /* 8215998Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8215998Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8215998Ch case    0:*/		return 0x82159990;
		  /* 82159990h */ case    1:  		/* rlwinm R11, R11, 14, 29, 31 */
		/* 82159990h case    1:*/		cpu::op::rlwinm<0,14,29,31>(regs,&regs.R11,regs.R11);
		/* 82159990h case    1:*/		return 0x82159994;
		  /* 82159994h */ case    2:  		/* cmplwi CR6, R11, 7 */
		/* 82159994h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 82159994h case    2:*/		return 0x82159998;
		  /* 82159998h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82159998h case    3:*/		if ( regs.CR[6].eq ) { return 0x821599B8;  }
		/* 82159998h case    3:*/		return 0x8215999C;
		  /* 8215999Ch */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8215999Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8215999Ch case    4:*/		return 0x821599A0;
		  /* 821599A0h */ case    5:  		/* addi R10, R29, 1224 */
		/* 821599A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4C8);
		/* 821599A0h case    5:*/		return 0x821599A4;
		  /* 821599A4h */ case    6:  		/* lis R9, -32252 */
		/* 821599A4h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821599A4h case    6:*/		return 0x821599A8;
		  /* 821599A8h */ case    7:  		/* mr R3, R31 */
		/* 821599A8h case    7:*/		regs.R3 = regs.R31;
		/* 821599A8h case    7:*/		return 0x821599AC;
		  /* 821599ACh */ case    8:  		/* addi R4, R9, -23076 */
		/* 821599ACh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA5DC);
		/* 821599ACh case    8:*/		return 0x821599B0;
		  /* 821599B0h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 821599B0h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821599B0h case    9:*/		return 0x821599B4;
		  /* 821599B4h */ case   10:  		/* bl -6796 */
		/* 821599B4h case   10:*/		regs.LR = 0x821599B8; return 0x82157F28;
		/* 821599B4h case   10:*/		return 0x821599B8;
	}
	return 0x821599B8;
} // Block from 8215998Ch-821599B8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821599B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821599B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821599B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821599B8);
		  /* 821599B8h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821599B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821599B8h case    0:*/		return 0x821599BC;
		  /* 821599BCh */ case    1:  		/* rlwinm R11, R11, 11, 29, 31 */
		/* 821599BCh case    1:*/		cpu::op::rlwinm<0,11,29,31>(regs,&regs.R11,regs.R11);
		/* 821599BCh case    1:*/		return 0x821599C0;
		  /* 821599C0h */ case    2:  		/* cmplwi CR6, R11, 7 */
		/* 821599C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821599C0h case    2:*/		return 0x821599C4;
		  /* 821599C4h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821599C4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821599E4;  }
		/* 821599C4h case    3:*/		return 0x821599C8;
		  /* 821599C8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821599C8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821599C8h case    4:*/		return 0x821599CC;
		  /* 821599CCh */ case    5:  		/* addi R10, R29, 1256 */
		/* 821599CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4E8);
		/* 821599CCh case    5:*/		return 0x821599D0;
		  /* 821599D0h */ case    6:  		/* lis R9, -32254 */
		/* 821599D0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8202);
		/* 821599D0h case    6:*/		return 0x821599D4;
		  /* 821599D4h */ case    7:  		/* mr R3, R31 */
		/* 821599D4h case    7:*/		regs.R3 = regs.R31;
		/* 821599D4h case    7:*/		return 0x821599D8;
		  /* 821599D8h */ case    8:  		/* addi R4, R9, -30860 */
		/* 821599D8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFF8774);
		/* 821599D8h case    8:*/		return 0x821599DC;
		  /* 821599DCh */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 821599DCh case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821599DCh case    9:*/		return 0x821599E0;
		  /* 821599E0h */ case   10:  		/* bl -6840 */
		/* 821599E0h case   10:*/		regs.LR = 0x821599E4; return 0x82157F28;
		/* 821599E0h case   10:*/		return 0x821599E4;
	}
	return 0x821599E4;
} // Block from 821599B8h-821599E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821599E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821599E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821599E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821599E4);
		  /* 821599E4h */ case    0:  		/* lbz R11, <#[R30 + 4]> */
		/* 821599E4h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821599E4h case    0:*/		return 0x821599E8;
		  /* 821599E8h */ case    1:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821599E8h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821599E8h case    1:*/		return 0x821599EC;
		  /* 821599ECh */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 821599ECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821599ECh case    2:*/		return 0x821599F0;
		  /* 821599F0h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 821599F0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82159A10;  }
		/* 821599F0h case    3:*/		return 0x821599F4;
		  /* 821599F4h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821599F4h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821599F4h case    4:*/		return 0x821599F8;
		  /* 821599F8h */ case    5:  		/* addi R10, R29, 1288 */
		/* 821599F8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x508);
		/* 821599F8h case    5:*/		return 0x821599FC;
		  /* 821599FCh */ case    6:  		/* lis R9, -32252 */
		/* 821599FCh case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821599FCh case    6:*/		return 0x82159A00;
		  /* 82159A00h */ case    7:  		/* mr R3, R31 */
		/* 82159A00h case    7:*/		regs.R3 = regs.R31;
		/* 82159A00h case    7:*/		return 0x82159A04;
		  /* 82159A04h */ case    8:  		/* addi R4, R9, -23096 */
		/* 82159A04h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA5C8);
		/* 82159A04h case    8:*/		return 0x82159A08;
		  /* 82159A08h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82159A08h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159A08h case    9:*/		return 0x82159A0C;
		  /* 82159A0Ch */ case   10:  		/* bl -6884 */
		/* 82159A0Ch case   10:*/		regs.LR = 0x82159A10; return 0x82157F28;
		/* 82159A0Ch case   10:*/		return 0x82159A10;
	}
	return 0x82159A10;
} // Block from 821599E4h-82159A10h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82159A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A10);
		  /* 82159A10h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159A10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159A10h case    0:*/		return 0x82159A14;
		  /* 82159A14h */ case    1:  		/* rlwinm R11, R11, 6, 30, 31 */
		/* 82159A14h case    1:*/		cpu::op::rlwinm<0,6,30,31>(regs,&regs.R11,regs.R11);
		/* 82159A14h case    1:*/		return 0x82159A18;
		  /* 82159A18h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82159A18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82159A18h case    2:*/		return 0x82159A1C;
		  /* 82159A1Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82159A1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82159A3C;  }
		/* 82159A1Ch case    3:*/		return 0x82159A20;
		  /* 82159A20h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82159A20h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82159A20h case    4:*/		return 0x82159A24;
		  /* 82159A24h */ case    5:  		/* addi R10, R29, 1304 */
		/* 82159A24h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x518);
		/* 82159A24h case    5:*/		return 0x82159A28;
		  /* 82159A28h */ case    6:  		/* lis R9, -32252 */
		/* 82159A28h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159A28h case    6:*/		return 0x82159A2C;
		  /* 82159A2Ch */ case    7:  		/* mr R3, R31 */
		/* 82159A2Ch case    7:*/		regs.R3 = regs.R31;
		/* 82159A2Ch case    7:*/		return 0x82159A30;
		  /* 82159A30h */ case    8:  		/* addi R4, R9, -23116 */
		/* 82159A30h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA5B4);
		/* 82159A30h case    8:*/		return 0x82159A34;
		  /* 82159A34h */ case    9:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82159A34h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159A34h case    9:*/		return 0x82159A38;
		  /* 82159A38h */ case   10:  		/* bl -6928 */
		/* 82159A38h case   10:*/		regs.LR = 0x82159A3C; return 0x82157F28;
		/* 82159A38h case   10:*/		return 0x82159A3C;
	}
	return 0x82159A3C;
} // Block from 82159A10h-82159A3Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82159A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A3C);
		  /* 82159A3Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159A3Ch case    0:*/		return 0x82159A40;
	}
	return 0x82159A40;
} // Block from 82159A3Ch-82159A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82159A40h
// Function '?PrintAluVector@Disassembler@XGRAPHICS@@AAAXPAUaluFormat@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A40);
		  /* 82159A40h */ case    0:  		/* rlwinm. R5, R11, 4, 31, 31 */
		/* 82159A40h case    0:*/		cpu::op::rlwinm<1,4,31,31>(regs,&regs.R5,regs.R11);
		/* 82159A40h case    0:*/		return 0x82159A44;
		  /* 82159A44h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82159A44h case    1:*/		if ( regs.CR[0].eq ) { return 0x82159A58;  }
		/* 82159A44h case    1:*/		return 0x82159A48;
		  /* 82159A48h */ case    2:  		/* lis R11, -32252 */
		/* 82159A48h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159A48h case    2:*/		return 0x82159A4C;
		  /* 82159A4Ch */ case    3:  		/* mr R3, R31 */
		/* 82159A4Ch case    3:*/		regs.R3 = regs.R31;
		/* 82159A4Ch case    3:*/		return 0x82159A50;
		  /* 82159A50h */ case    4:  		/* addi R4, R11, -23136 */
		/* 82159A50h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA5A0);
		/* 82159A50h case    4:*/		return 0x82159A54;
		  /* 82159A54h */ case    5:  		/* bl -6956 */
		/* 82159A54h case    5:*/		regs.LR = 0x82159A58; return 0x82157F28;
		/* 82159A54h case    5:*/		return 0x82159A58;
	}
	return 0x82159A58;
} // Block from 82159A40h-82159A58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82159A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A58);
		  /* 82159A58h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159A58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159A58h case    0:*/		return 0x82159A5C;
		  /* 82159A5Ch */ case    1:  		/* rlwinm. R11, R11, 3, 30, 31 */
		/* 82159A5Ch case    1:*/		cpu::op::rlwinm<1,3,30,31>(regs,&regs.R11,regs.R11);
		/* 82159A5Ch case    1:*/		return 0x82159A60;
		  /* 82159A60h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 82159A60h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159A80;  }
		/* 82159A60h case    2:*/		return 0x82159A64;
		  /* 82159A64h */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82159A64h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82159A64h case    3:*/		return 0x82159A68;
		  /* 82159A68h */ case    4:  		/* addi R10, R29, 1320 */
		/* 82159A68h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x528);
		/* 82159A68h case    4:*/		return 0x82159A6C;
		  /* 82159A6Ch */ case    5:  		/* lis R9, -32252 */
		/* 82159A6Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159A6Ch case    5:*/		return 0x82159A70;
		  /* 82159A70h */ case    6:  		/* mr R3, R31 */
		/* 82159A70h case    6:*/		regs.R3 = regs.R31;
		/* 82159A70h case    6:*/		return 0x82159A74;
		  /* 82159A74h */ case    7:  		/* addi R4, R9, -23156 */
		/* 82159A74h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA58C);
		/* 82159A74h case    7:*/		return 0x82159A78;
		  /* 82159A78h */ case    8:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82159A78h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82159A78h case    8:*/		return 0x82159A7C;
		  /* 82159A7Ch */ case    9:  		/* bl -6996 */
		/* 82159A7Ch case    9:*/		regs.LR = 0x82159A80; return 0x82157F28;
		/* 82159A7Ch case    9:*/		return 0x82159A80;
	}
	return 0x82159A80;
} // Block from 82159A58h-82159A80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82159A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A80);
		  /* 82159A80h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159A80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159A80h case    0:*/		return 0x82159A84;
		  /* 82159A84h */ case    1:  		/* rlwinm. R5, R11, 0, 31, 31 */
		/* 82159A84h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R5,regs.R11);
		/* 82159A84h case    1:*/		return 0x82159A88;
		  /* 82159A88h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82159A88h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159A9C;  }
		/* 82159A88h case    2:*/		return 0x82159A8C;
		  /* 82159A8Ch */ case    3:  		/* lis R11, -32252 */
		/* 82159A8Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159A8Ch case    3:*/		return 0x82159A90;
		  /* 82159A90h */ case    4:  		/* mr R3, R31 */
		/* 82159A90h case    4:*/		regs.R3 = regs.R31;
		/* 82159A90h case    4:*/		return 0x82159A94;
		  /* 82159A94h */ case    5:  		/* addi R4, R11, -23184 */
		/* 82159A94h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA570);
		/* 82159A94h case    5:*/		return 0x82159A98;
		  /* 82159A98h */ case    6:  		/* bl -7024 */
		/* 82159A98h case    6:*/		regs.LR = 0x82159A9C; return 0x82157F28;
		/* 82159A98h case    6:*/		return 0x82159A9C;
	}
	return 0x82159A9C;
} // Block from 82159A80h-82159A9Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82159A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159A9C);
		  /* 82159A9Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159A9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159A9Ch case    0:*/		return 0x82159AA0;
		  /* 82159AA0h */ case    1:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82159AA0h case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82159AA0h case    1:*/		return 0x82159AA4;
		  /* 82159AA4h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82159AA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159AB8;  }
		/* 82159AA4h case    2:*/		return 0x82159AA8;
		  /* 82159AA8h */ case    3:  		/* lis R11, -32252 */
		/* 82159AA8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159AA8h case    3:*/		return 0x82159AAC;
		  /* 82159AACh */ case    4:  		/* mr R3, R31 */
		/* 82159AACh case    4:*/		regs.R3 = regs.R31;
		/* 82159AACh case    4:*/		return 0x82159AB0;
		  /* 82159AB0h */ case    5:  		/* addi R4, R11, -23212 */
		/* 82159AB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA554);
		/* 82159AB0h case    5:*/		return 0x82159AB4;
		  /* 82159AB4h */ case    6:  		/* bl -7052 */
		/* 82159AB4h case    6:*/		regs.LR = 0x82159AB8; return 0x82157F28;
		/* 82159AB4h case    6:*/		return 0x82159AB8;
	}
	return 0x82159AB8;
} // Block from 82159A9Ch-82159AB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82159AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159AB8);
		  /* 82159AB8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159AB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159AB8h case    0:*/		return 0x82159ABC;
		  /* 82159ABCh */ case    1:  		/* rlwinm. R5, R11, 30, 25, 31 */
		/* 82159ABCh case    1:*/		cpu::op::rlwinm<1,30,25,31>(regs,&regs.R5,regs.R11);
		/* 82159ABCh case    1:*/		return 0x82159AC0;
		  /* 82159AC0h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82159AC0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159AD4;  }
		/* 82159AC0h case    2:*/		return 0x82159AC4;
		  /* 82159AC4h */ case    3:  		/* lis R11, -32252 */
		/* 82159AC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159AC4h case    3:*/		return 0x82159AC8;
		  /* 82159AC8h */ case    4:  		/* mr R3, R31 */
		/* 82159AC8h case    4:*/		regs.R3 = regs.R31;
		/* 82159AC8h case    4:*/		return 0x82159ACC;
		  /* 82159ACCh */ case    5:  		/* addi R4, R11, -23228 */
		/* 82159ACCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA544);
		/* 82159ACCh case    5:*/		return 0x82159AD0;
		  /* 82159AD0h */ case    6:  		/* bl -7080 */
		/* 82159AD0h case    6:*/		regs.LR = 0x82159AD4; return 0x82157F28;
		/* 82159AD0h case    6:*/		return 0x82159AD4;
	}
	return 0x82159AD4;
} // Block from 82159AB8h-82159AD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82159AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159AD4);
		  /* 82159AD4h */ case    0:  		/* lhz R11, <#[R30 + 8]> */
		/* 82159AD4h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159AD4h case    0:*/		return 0x82159AD8;
		  /* 82159AD8h */ case    1:  		/* rlwinm. R5, R11, 0, 27, 31 */
		/* 82159AD8h case    1:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R5,regs.R11);
		/* 82159AD8h case    1:*/		return 0x82159ADC;
		  /* 82159ADCh */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82159ADCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82159AF0;  }
		/* 82159ADCh case    2:*/		return 0x82159AE0;
		  /* 82159AE0h */ case    3:  		/* lis R11, -32252 */
		/* 82159AE0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159AE0h case    3:*/		return 0x82159AE4;
		  /* 82159AE4h */ case    4:  		/* mr R3, R31 */
		/* 82159AE4h case    4:*/		regs.R3 = regs.R31;
		/* 82159AE4h case    4:*/		return 0x82159AE8;
		  /* 82159AE8h */ case    5:  		/* addi R4, R11, -23244 */
		/* 82159AE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA534);
		/* 82159AE8h case    5:*/		return 0x82159AEC;
		  /* 82159AECh */ case    6:  		/* bl -7108 */
		/* 82159AECh case    6:*/		regs.LR = 0x82159AF0; return 0x82157F28;
		/* 82159AECh case    6:*/		return 0x82159AF0;
	}
	return 0x82159AF0;
} // Block from 82159AD4h-82159AF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82159AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159AF0);
		  /* 82159AF0h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159AF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159AF0h case    0:*/		return 0x82159AF4;
		  /* 82159AF4h */ case    1:  		/* rlwinm. R5, R11, 11, 27, 31 */
		/* 82159AF4h case    1:*/		cpu::op::rlwinm<1,11,27,31>(regs,&regs.R5,regs.R11);
		/* 82159AF4h case    1:*/		return 0x82159AF8;
		  /* 82159AF8h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82159AF8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159B0C;  }
		/* 82159AF8h case    2:*/		return 0x82159AFC;
		  /* 82159AFCh */ case    3:  		/* lis R11, -32252 */
		/* 82159AFCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159AFCh case    3:*/		return 0x82159B00;
		  /* 82159B00h */ case    4:  		/* mr R3, R31 */
		/* 82159B00h case    4:*/		regs.R3 = regs.R31;
		/* 82159B00h case    4:*/		return 0x82159B04;
		  /* 82159B04h */ case    5:  		/* addi R4, R11, -23260 */
		/* 82159B04h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA524);
		/* 82159B04h case    5:*/		return 0x82159B08;
		  /* 82159B08h */ case    6:  		/* bl -7136 */
		/* 82159B08h case    6:*/		regs.LR = 0x82159B0C; return 0x82157F28;
		/* 82159B08h case    6:*/		return 0x82159B0C;
	}
	return 0x82159B0C;
} // Block from 82159AF0h-82159B0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82159B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159B0C);
		  /* 82159B0Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159B0Ch case    0:*/		return 0x82159B10;
		  /* 82159B10h */ case    1:  		/* rlwinm. R5, R11, 6, 27, 31 */
		/* 82159B10h case    1:*/		cpu::op::rlwinm<1,6,27,31>(regs,&regs.R5,regs.R11);
		/* 82159B10h case    1:*/		return 0x82159B14;
		  /* 82159B14h */ case    2:  		/* bc 12, CR0_EQ, 944 */
		/* 82159B14h case    2:*/		if ( regs.CR[0].eq ) { return 0x82159EC4;  }
		/* 82159B14h case    2:*/		return 0x82159B18;
		  /* 82159B18h */ case    3:  		/* lis R11, -32252 */
		/* 82159B18h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159B18h case    3:*/		return 0x82159B1C;
		  /* 82159B1Ch */ case    4:  		/* addi R4, R11, -23276 */
		/* 82159B1Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA514);
		/* 82159B1Ch case    4:*/		return 0x82159B20;
		  /* 82159B20h */ case    5:  		/* b 924 */
		/* 82159B20h case    5:*/		return 0x82159EBC;
		/* 82159B20h case    5:*/		return 0x82159B24;
	}
	return 0x82159B24;
} // Block from 82159B0Ch-82159B24h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82159B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159B24);
		  /* 82159B24h */ case    0:  		/* lis R11, -32252 */
		/* 82159B24h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159B24h case    0:*/		return 0x82159B28;
		  /* 82159B28h */ case    1:  		/* mr R3, R31 */
		/* 82159B28h case    1:*/		regs.R3 = regs.R31;
		/* 82159B28h case    1:*/		return 0x82159B2C;
		  /* 82159B2Ch */ case    2:  		/* addi R4, R11, -23300 */
		/* 82159B2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA4FC);
		/* 82159B2Ch case    2:*/		return 0x82159B30;
		  /* 82159B30h */ case    3:  		/* bl -7176 */
		/* 82159B30h case    3:*/		regs.LR = 0x82159B34; return 0x82157F28;
		/* 82159B30h case    3:*/		return 0x82159B34;
		  /* 82159B34h */ case    4:  		/* b 912 */
		/* 82159B34h case    4:*/		return 0x82159EC4;
		/* 82159B34h case    4:*/		return 0x82159B38;
	}
	return 0x82159B38;
} // Block from 82159B24h-82159B38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82159B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159B38);
		  /* 82159B38h */ case    0:  		/* lis R11, -32255 */
		/* 82159B38h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159B38h case    0:*/		return 0x82159B3C;
		  /* 82159B3Ch */ case    1:  		/* mr R3, R31 */
		/* 82159B3Ch case    1:*/		regs.R3 = regs.R31;
		/* 82159B3Ch case    1:*/		return 0x82159B40;
		  /* 82159B40h */ case    2:  		/* addi R4, R11, 13240 */
		/* 82159B40h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x33B8);
		/* 82159B40h case    2:*/		return 0x82159B44;
		  /* 82159B44h */ case    3:  		/* bl -5020 */
		/* 82159B44h case    3:*/		regs.LR = 0x82159B48; return 0x821587A8;
		/* 82159B44h case    3:*/		return 0x82159B48;
		  /* 82159B48h */ case    4:  		/* lis R11, -32255 */
		/* 82159B48h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159B48h case    4:*/		return 0x82159B4C;
		  /* 82159B4Ch */ case    5:  		/* mr R3, R31 */
		/* 82159B4Ch case    5:*/		regs.R3 = regs.R31;
		/* 82159B4Ch case    5:*/		return 0x82159B50;
		  /* 82159B50h */ case    6:  		/* addi R4, R11, -15864 */
		/* 82159B50h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFC208);
		/* 82159B50h case    6:*/		return 0x82159B54;
		  /* 82159B54h */ case    7:  		/* bl -7212 */
		/* 82159B54h case    7:*/		regs.LR = 0x82159B58; return 0x82157F28;
		/* 82159B54h case    7:*/		return 0x82159B58;
		  /* 82159B58h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82159B58h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159B58h case    8:*/		return 0x82159B5C;
		  /* 82159B5Ch */ case    9:  		/* mr R3, R31 */
		/* 82159B5Ch case    9:*/		regs.R3 = regs.R31;
		/* 82159B5Ch case    9:*/		return 0x82159B60;
		  /* 82159B60h */ case   10:  		/* rlwinm. R10, R11, 0, 13, 13 */
		/* 82159B60h case   10:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R11);
		/* 82159B60h case   10:*/		return 0x82159B64;
		  /* 82159B64h */ case   11:  		/* rlwinm R5, R11, 20, 26, 31 */
		/* 82159B64h case   11:*/		cpu::op::rlwinm<0,20,26,31>(regs,&regs.R5,regs.R11);
		/* 82159B64h case   11:*/		return 0x82159B68;
		  /* 82159B68h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 82159B68h case   12:*/		if ( regs.CR[0].eq ) { return 0x82159B78;  }
		/* 82159B68h case   12:*/		return 0x82159B6C;
		  /* 82159B6Ch */ case   13:  		/* lis R11, -32252 */
		/* 82159B6Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159B6Ch case   13:*/		return 0x82159B70;
		  /* 82159B70h */ case   14:  		/* addi R4, R11, -23632 */
		/* 82159B70h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA3B0);
		/* 82159B70h case   14:*/		return 0x82159B74;
		  /* 82159B74h */ case   15:  		/* b 12 */
		/* 82159B74h case   15:*/		return 0x82159B80;
		/* 82159B74h case   15:*/		return 0x82159B78;
	}
	return 0x82159B78;
} // Block from 82159B38h-82159B78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82159B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159B78);
		  /* 82159B78h */ case    0:  		/* lis R11, -32252 */
		/* 82159B78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159B78h case    0:*/		return 0x82159B7C;
		  /* 82159B7Ch */ case    1:  		/* addi R4, R11, -23636 */
		/* 82159B7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA3AC);
		/* 82159B7Ch case    1:*/		return 0x82159B80;
	}
	return 0x82159B80;
} // Block from 82159B78h-82159B80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159B80);
		  /* 82159B80h */ case    0:  		/* bl -7256 */
		/* 82159B80h case    0:*/		regs.LR = 0x82159B84; return 0x82157F28;
		/* 82159B80h case    0:*/		return 0x82159B84;
		  /* 82159B84h */ case    1:  		/* lis R11, -32256 */
		/* 82159B84h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82159B84h case    1:*/		return 0x82159B88;
		  /* 82159B88h */ case    2:  		/* mr R3, R31 */
		/* 82159B88h case    2:*/		regs.R3 = regs.R31;
		/* 82159B88h case    2:*/		return 0x82159B8C;
		  /* 82159B8Ch */ case    3:  		/* addi R4, R11, 20592 */
		/* 82159B8Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5070);
		/* 82159B8Ch case    3:*/		return 0x82159B90;
		  /* 82159B90h */ case    4:  		/* bl -7272 */
		/* 82159B90h case    4:*/		regs.LR = 0x82159B94; return 0x82157F28;
		/* 82159B90h case    4:*/		return 0x82159B94;
		  /* 82159B94h */ case    5:  		/* lis R11, -32217 */
		/* 82159B94h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82159B94h case    5:*/		return 0x82159B98;
		  /* 82159B98h */ case    6:  		/* lis R10, -32253 */
		/* 82159B98h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82159B98h case    6:*/		return 0x82159B9C;
		  /* 82159B9Ch */ case    7:  		/* addi R29, R11, 20048 */
		/* 82159B9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4E50);
		/* 82159B9Ch case    7:*/		return 0x82159BA0;
		  /* 82159BA0h */ case    8:  		/* addi R28, R10, 25796 */
		/* 82159BA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x64C4);
		/* 82159BA0h case    8:*/		return 0x82159BA4;
		  /* 82159BA4h */ case    9:  		/* mr R3, R31 */
		/* 82159BA4h case    9:*/		regs.R3 = regs.R31;
		/* 82159BA4h case    9:*/		return 0x82159BA8;
		  /* 82159BA8h */ case   10:  		/* mr R4, R28 */
		/* 82159BA8h case   10:*/		regs.R4 = regs.R28;
		/* 82159BA8h case   10:*/		return 0x82159BAC;
		  /* 82159BACh */ case   11:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159BACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159BACh case   11:*/		return 0x82159BB0;
		  /* 82159BB0h */ case   12:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82159BB0h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82159BB0h case   12:*/		return 0x82159BB4;
		  /* 82159BB4h */ case   13:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159BB4h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159BB4h case   13:*/		return 0x82159BB8;
		  /* 82159BB8h */ case   14:  		/* extsb R5, R11 */
		/* 82159BB8h case   14:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159BB8h case   14:*/		return 0x82159BBC;
		  /* 82159BBCh */ case   15:  		/* bl -7316 */
		/* 82159BBCh case   15:*/		regs.LR = 0x82159BC0; return 0x82157F28;
		/* 82159BBCh case   15:*/		return 0x82159BC0;
		  /* 82159BC0h */ case   16:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159BC0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159BC0h case   16:*/		return 0x82159BC4;
		  /* 82159BC4h */ case   17:  		/* mr R4, R28 */
		/* 82159BC4h case   17:*/		regs.R4 = regs.R28;
		/* 82159BC4h case   17:*/		return 0x82159BC8;
		  /* 82159BC8h */ case   18:  		/* rlwinm R11, R11, 29, 29, 31 */
		/* 82159BC8h case   18:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R11,regs.R11);
		/* 82159BC8h case   18:*/		return 0x82159BCC;
		  /* 82159BCCh */ case   19:  		/* mr R3, R31 */
		/* 82159BCCh case   19:*/		regs.R3 = regs.R31;
		/* 82159BCCh case   19:*/		return 0x82159BD0;
		  /* 82159BD0h */ case   20:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159BD0h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159BD0h case   20:*/		return 0x82159BD4;
		  /* 82159BD4h */ case   21:  		/* extsb R5, R11 */
		/* 82159BD4h case   21:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159BD4h case   21:*/		return 0x82159BD8;
		  /* 82159BD8h */ case   22:  		/* bl -7344 */
		/* 82159BD8h case   22:*/		regs.LR = 0x82159BDC; return 0x82157F28;
		/* 82159BD8h case   22:*/		return 0x82159BDC;
		  /* 82159BDCh */ case   23:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159BDCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159BDCh case   23:*/		return 0x82159BE0;
		  /* 82159BE0h */ case   24:  		/* mr R4, R28 */
		/* 82159BE0h case   24:*/		regs.R4 = regs.R28;
		/* 82159BE0h case   24:*/		return 0x82159BE4;
		  /* 82159BE4h */ case   25:  		/* rlwinm R11, R11, 26, 29, 31 */
		/* 82159BE4h case   25:*/		cpu::op::rlwinm<0,26,29,31>(regs,&regs.R11,regs.R11);
		/* 82159BE4h case   25:*/		return 0x82159BE8;
		  /* 82159BE8h */ case   26:  		/* mr R3, R31 */
		/* 82159BE8h case   26:*/		regs.R3 = regs.R31;
		/* 82159BE8h case   26:*/		return 0x82159BEC;
		  /* 82159BECh */ case   27:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159BECh case   27:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159BECh case   27:*/		return 0x82159BF0;
		  /* 82159BF0h */ case   28:  		/* extsb R5, R11 */
		/* 82159BF0h case   28:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159BF0h case   28:*/		return 0x82159BF4;
		  /* 82159BF4h */ case   29:  		/* bl -7372 */
		/* 82159BF4h case   29:*/		regs.LR = 0x82159BF8; return 0x82157F28;
		/* 82159BF4h case   29:*/		return 0x82159BF8;
		  /* 82159BF8h */ case   30:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159BF8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159BF8h case   30:*/		return 0x82159BFC;
		  /* 82159BFCh */ case   31:  		/* mr R4, R28 */
		/* 82159BFCh case   31:*/		regs.R4 = regs.R28;
		/* 82159BFCh case   31:*/		return 0x82159C00;
		  /* 82159C00h */ case   32:  		/* rlwinm R11, R11, 23, 29, 31 */
		/* 82159C00h case   32:*/		cpu::op::rlwinm<0,23,29,31>(regs,&regs.R11,regs.R11);
		/* 82159C00h case   32:*/		return 0x82159C04;
		  /* 82159C04h */ case   33:  		/* mr R3, R31 */
		/* 82159C04h case   33:*/		regs.R3 = regs.R31;
		/* 82159C04h case   33:*/		return 0x82159C08;
		  /* 82159C08h */ case   34:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159C08h case   34:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159C08h case   34:*/		return 0x82159C0C;
		  /* 82159C0Ch */ case   35:  		/* extsb R5, R11 */
		/* 82159C0Ch case   35:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159C0Ch case   35:*/		return 0x82159C10;
		  /* 82159C10h */ case   36:  		/* bl -7400 */
		/* 82159C10h case   36:*/		regs.LR = 0x82159C14; return 0x82157F28;
		/* 82159C10h case   36:*/		return 0x82159C14;
		  /* 82159C14h */ case   37:  		/* lis R11, -32256 */
		/* 82159C14h case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82159C14h case   37:*/		return 0x82159C18;
		  /* 82159C18h */ case   38:  		/* mr R3, R31 */
		/* 82159C18h case   38:*/		regs.R3 = regs.R31;
		/* 82159C18h case   38:*/		return 0x82159C1C;
		  /* 82159C1Ch */ case   39:  		/* addi R27, R11, 17860 */
		/* 82159C1Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x45C4);
		/* 82159C1Ch case   39:*/		return 0x82159C20;
		  /* 82159C20h */ case   40:  		/* mr R4, R27 */
		/* 82159C20h case   40:*/		regs.R4 = regs.R27;
		/* 82159C20h case   40:*/		return 0x82159C24;
		  /* 82159C24h */ case   41:  		/* bl -7420 */
		/* 82159C24h case   41:*/		regs.LR = 0x82159C28; return 0x82157F28;
		/* 82159C24h case   41:*/		return 0x82159C28;
		  /* 82159C28h */ case   42:  		/* li R11, 4 */
		/* 82159C28h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82159C28h case   42:*/		return 0x82159C2C;
		  /* 82159C2Ch */ case   43:  		/* li R10, 0 */
		/* 82159C2Ch case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82159C2Ch case   43:*/		return 0x82159C30;
		  /* 82159C30h */ case   44:  		/* stw R11, <#[R1 + 84]> */
		/* 82159C30h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82159C30h case   44:*/		return 0x82159C34;
		  /* 82159C34h */ case   45:  		/* li R9, 0 */
		/* 82159C34h case   45:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82159C34h case   45:*/		return 0x82159C38;
		  /* 82159C38h */ case   46:  		/* li R8, 0 */
		/* 82159C38h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82159C38h case   46:*/		return 0x82159C3C;
		  /* 82159C3Ch */ case   47:  		/* li R7, 0 */
		/* 82159C3Ch case   47:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82159C3Ch case   47:*/		return 0x82159C40;
		  /* 82159C40h */ case   48:  		/* li R6, 0 */
		/* 82159C40h case   48:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82159C40h case   48:*/		return 0x82159C44;
		  /* 82159C44h */ case   49:  		/* li R4, 1 */
		/* 82159C44h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82159C44h case   49:*/		return 0x82159C48;
		  /* 82159C48h */ case   50:  		/* mr R3, R31 */
		/* 82159C48h case   50:*/		regs.R3 = regs.R31;
		/* 82159C48h case   50:*/		return 0x82159C4C;
		  /* 82159C4Ch */ case   51:  		/* lwz R11, <#[R30]> */
		/* 82159C4Ch case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159C4Ch case   51:*/		return 0x82159C50;
		  /* 82159C50h */ case   52:  		/* rlwinm R5, R11, 28, 24, 24 */
		/* 82159C50h case   52:*/		cpu::op::rlwinm<0,28,24,24>(regs,&regs.R5,regs.R11);
		/* 82159C50h case   52:*/		return 0x82159C54;
		  /* 82159C54h */ case   53:  		/* rlwinm R11, R11, 27, 26, 31 */
		/* 82159C54h case   53:*/		cpu::op::rlwinm<0,27,26,31>(regs,&regs.R11,regs.R11);
		/* 82159C54h case   53:*/		return 0x82159C58;
		  /* 82159C58h */ case   54:  		/* or R5, R5, R11 */
		/* 82159C58h case   54:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R11);
		/* 82159C58h case   54:*/		return 0x82159C5C;
		  /* 82159C5Ch */ case   55:  		/* bl -4156 */
		/* 82159C5Ch case   55:*/		regs.LR = 0x82159C60; return 0x82158C20;
		/* 82159C5Ch case   55:*/		return 0x82159C60;
		  /* 82159C60h */ case   56:  		/* lis R11, -32252 */
		/* 82159C60h case   56:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159C60h case   56:*/		return 0x82159C64;
		  /* 82159C64h */ case   57:  		/* mr R3, R31 */
		/* 82159C64h case   57:*/		regs.R3 = regs.R31;
		/* 82159C64h case   57:*/		return 0x82159C68;
		  /* 82159C68h */ case   58:  		/* addi R4, R11, -23304 */
		/* 82159C68h case   58:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA4F8);
		/* 82159C68h case   58:*/		return 0x82159C6C;
		  /* 82159C6Ch */ case   59:  		/* lwz R11, <#[R30]> */
		/* 82159C6Ch case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159C6Ch case   59:*/		return 0x82159C70;
		  /* 82159C70h */ case   60:  		/* rlwinm R11, R11, 2, 30, 31 */
		/* 82159C70h case   60:*/		cpu::op::rlwinm<0,2,30,31>(regs,&regs.R11,regs.R11);
		/* 82159C70h case   60:*/		return 0x82159C74;
		  /* 82159C74h */ case   61:  		/* lbzx R11, <#[R11 + R29]> */
		/* 82159C74h case   61:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 82159C74h case   61:*/		return 0x82159C78;
		  /* 82159C78h */ case   62:  		/* extsb R5, R11 */
		/* 82159C78h case   62:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R11);
		/* 82159C78h case   62:*/		return 0x82159C7C;
		  /* 82159C7Ch */ case   63:  		/* bl -7508 */
		/* 82159C7Ch case   63:*/		regs.LR = 0x82159C80; return 0x82157F28;
		/* 82159C7Ch case   63:*/		return 0x82159C80;
		  /* 82159C80h */ case   64:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159C80h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159C80h case   64:*/		return 0x82159C84;
		  /* 82159C84h */ case   65:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82159C84h case   65:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82159C84h case   65:*/		return 0x82159C88;
		  /* 82159C88h */ case   66:  		/* bc 4, CR0_EQ, 44 */
		/* 82159C88h case   66:*/		if ( !regs.CR[0].eq ) { return 0x82159CB4;  }
		/* 82159C88h case   66:*/		return 0x82159C8C;
		  /* 82159C8Ch */ case   67:  		/* lwz R11, <#[R30]> */
		/* 82159C8Ch case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159C8Ch case   67:*/		return 0x82159C90;
		  /* 82159C90h */ case   68:  		/* lis R10, -32217 */
		/* 82159C90h case   68:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82159C90h case   68:*/		return 0x82159C94;
		  /* 82159C94h */ case   69:  		/* lis R9, -32252 */
		/* 82159C94h case   69:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159C94h case   69:*/		return 0x82159C98;
		  /* 82159C98h */ case   70:  		/* addi R10, R10, 21628 */
		/* 82159C98h case   70:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x547C);
		/* 82159C98h case   70:*/		return 0x82159C9C;
		  /* 82159C9Ch */ case   71:  		/* rlwinm R8, R11, 9, 28, 29 */
		/* 82159C9Ch case   71:*/		cpu::op::rlwinm<0,9,28,29>(regs,&regs.R8,regs.R11);
		/* 82159C9Ch case   71:*/		return 0x82159CA0;
		  /* 82159CA0h */ case   72:  		/* addi R4, R9, -23316 */
		/* 82159CA0h case   72:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFA4EC);
		/* 82159CA0h case   72:*/		return 0x82159CA4;
		  /* 82159CA4h */ case   73:  		/* rlwinm R5, R11, 12, 27, 31 */
		/* 82159CA4h case   73:*/		cpu::op::rlwinm<0,12,27,31>(regs,&regs.R5,regs.R11);
		/* 82159CA4h case   73:*/		return 0x82159CA8;
		  /* 82159CA8h */ case   74:  		/* mr R3, R31 */
		/* 82159CA8h case   74:*/		regs.R3 = regs.R31;
		/* 82159CA8h case   74:*/		return 0x82159CAC;
		  /* 82159CACh */ case   75:  		/* lwzx R6, <#[R8 + R10]> */
		/* 82159CACh case   75:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82159CACh case   75:*/		return 0x82159CB0;
		  /* 82159CB0h */ case   76:  		/* bl -7560 */
		/* 82159CB0h case   76:*/		regs.LR = 0x82159CB4; return 0x82157F28;
		/* 82159CB0h case   76:*/		return 0x82159CB4;
	}
	return 0x82159CB4;
} // Block from 82159B80h-82159CB4h (77 instructions)

//////////////////////////////////////////////////////
// Block at 82159CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159CB4);
		  /* 82159CB4h */ case    0:  		/* lis R11, -32255 */
		/* 82159CB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159CB4h case    0:*/		return 0x82159CB8;
		  /* 82159CB8h */ case    1:  		/* mr R3, R31 */
		/* 82159CB8h case    1:*/		regs.R3 = regs.R31;
		/* 82159CB8h case    1:*/		return 0x82159CBC;
		  /* 82159CBCh */ case    2:  		/* addi R26, R11, -16572 */
		/* 82159CBCh case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFBF44);
		/* 82159CBCh case    2:*/		return 0x82159CC0;
		  /* 82159CC0h */ case    3:  		/* mr R4, R26 */
		/* 82159CC0h case    3:*/		regs.R4 = regs.R26;
		/* 82159CC0h case    3:*/		return 0x82159CC4;
		  /* 82159CC4h */ case    4:  		/* bl -7580 */
		/* 82159CC4h case    4:*/		regs.LR = 0x82159CC8; return 0x82157F28;
		/* 82159CC4h case    4:*/		return 0x82159CC8;
		  /* 82159CC8h */ case    5:  		/* lis R11, -32255 */
		/* 82159CC8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82159CC8h case    5:*/		return 0x82159CCC;
		  /* 82159CCCh */ case    6:  		/* addi R25, R11, -10432 */
		/* 82159CCCh case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFD740);
		/* 82159CCCh case    6:*/		return 0x82159CD0;
		  /* 82159CD0h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159CD0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159CD0h case    7:*/		return 0x82159CD4;
		  /* 82159CD4h */ case    8:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82159CD4h case    8:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82159CD4h case    8:*/		return 0x82159CD8;
		  /* 82159CD8h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82159CD8h case    9:*/		if ( regs.CR[0].eq ) { return 0x82159CF0;  }
		/* 82159CD8h case    9:*/		return 0x82159CDC;
		  /* 82159CDCh */ case   10:  		/* lis R11, -32253 */
		/* 82159CDCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82159CDCh case   10:*/		return 0x82159CE0;
		  /* 82159CE0h */ case   11:  		/* mr R4, R25 */
		/* 82159CE0h case   11:*/		regs.R4 = regs.R25;
		/* 82159CE0h case   11:*/		return 0x82159CE4;
		  /* 82159CE4h */ case   12:  		/* addi R5, R11, 28356 */
		/* 82159CE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6EC4);
		/* 82159CE4h case   12:*/		return 0x82159CE8;
		  /* 82159CE8h */ case   13:  		/* mr R3, R31 */
		/* 82159CE8h case   13:*/		regs.R3 = regs.R31;
		/* 82159CE8h case   13:*/		return 0x82159CEC;
		  /* 82159CECh */ case   14:  		/* bl -7620 */
		/* 82159CECh case   14:*/		regs.LR = 0x82159CF0; return 0x82157F28;
		/* 82159CECh case   14:*/		return 0x82159CF0;
	}
	return 0x82159CF0;
} // Block from 82159CB4h-82159CF0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82159CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159CF0);
		  /* 82159CF0h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 82159CF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82159CF0h case    0:*/		return 0x82159CF4;
		  /* 82159CF4h */ case    1:  		/* lis R11, -32252 */
		/* 82159CF4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159CF4h case    1:*/		return 0x82159CF8;
		  /* 82159CF8h */ case    2:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 82159CF8h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 82159CF8h case    2:*/		return 0x82159CFC;
		  /* 82159CFCh */ case    3:  		/* addi R28, R11, -23328 */
		/* 82159CFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFA4E0);
		/* 82159CFCh case    3:*/		return 0x82159D00;
		  /* 82159D00h */ case    4:  		/* bc 4, CR0_EQ, 84 */
		/* 82159D00h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82159D54;  }
		/* 82159D00h case    4:*/		return 0x82159D04;
		  /* 82159D04h */ case    5:  		/* mr R3, R31 */
		/* 82159D04h case    5:*/		regs.R3 = regs.R31;
		/* 82159D04h case    5:*/		return 0x82159D08;
		  /* 82159D08h */ case    6:  		/* bl -2152 */
		/* 82159D08h case    6:*/		regs.LR = 0x82159D0C; return 0x821594A0;
		/* 82159D08h case    6:*/		return 0x82159D0C;
		  /* 82159D0Ch */ case    7:  		/* mr R4, R28 */
		/* 82159D0Ch case    7:*/		regs.R4 = regs.R28;
		/* 82159D0Ch case    7:*/		return 0x82159D10;
		  /* 82159D10h */ case    8:  		/* mr R3, R31 */
		/* 82159D10h case    8:*/		regs.R3 = regs.R31;
		/* 82159D10h case    8:*/		return 0x82159D14;
		  /* 82159D14h */ case    9:  		/* bl -7660 */
		/* 82159D14h case    9:*/		regs.LR = 0x82159D18; return 0x82157F28;
		/* 82159D14h case    9:*/		return 0x82159D18;
	}
	return 0x82159D18;
} // Block from 82159CF0h-82159D18h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82159D18h
// Function '?PrintAluScalar@Disassembler@XGRAPHICS@@AAAXPAUaluFormat@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159D18);
		  /* 82159D18h */ case    0:  		/* lis R11, -32252 */
		/* 82159D18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159D18h case    0:*/		return 0x82159D1C;
		  /* 82159D1Ch */ case    1:  		/* mr R3, R31 */
		/* 82159D1Ch case    1:*/		regs.R3 = regs.R31;
		/* 82159D1Ch case    1:*/		return 0x82159D20;
		  /* 82159D20h */ case    2:  		/* addi R4, R11, -23356 */
		/* 82159D20h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA4C4);
		/* 82159D20h case    2:*/		return 0x82159D24;
		  /* 82159D24h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 82159D24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82159D24h case    3:*/		return 0x82159D28;
		  /* 82159D28h */ case    4:  		/* rlwinm R6, R11, 24, 9, 31 */
		/* 82159D28h case    4:*/		cpu::op::rlwinm<0,24,9,31>(regs,&regs.R6,regs.R11);
		/* 82159D28h case    4:*/		return 0x82159D2C;
		  /* 82159D2Ch */ case    5:  		/* rlwinm R5, R11, 0, 24, 31 */
		/* 82159D2Ch case    5:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R5,regs.R11);
		/* 82159D2Ch case    5:*/		return 0x82159D30;
		  /* 82159D30h */ case    6:  		/* bl -7688 */
		/* 82159D30h case    6:*/		regs.LR = 0x82159D34; return 0x82157F28;
		/* 82159D30h case    6:*/		return 0x82159D34;
		  /* 82159D34h */ case    7:  		/* lis R10, -32252 */
		/* 82159D34h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82159D34h case    7:*/		return 0x82159D38;
		  /* 82159D38h */ case    8:  		/* addi R11, R29, 1336 */
		/* 82159D38h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x538);
		/* 82159D38h case    8:*/		return 0x82159D3C;
		  /* 82159D3Ch */ case    9:  		/* addi R4, R10, -23372 */
		/* 82159D3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFA4B4);
		/* 82159D3Ch case    9:*/		return 0x82159D40;
		  /* 82159D40h */ case   10:  		/* mr R3, R31 */
		/* 82159D40h case   10:*/		regs.R3 = regs.R31;
		/* 82159D40h case   10:*/		return 0x82159D44;
		  /* 82159D44h */ case   11:  		/* lhz R10, <#[R30 + 4]> */
		/* 82159D44h case   11:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82159D44h case   11:*/		return 0x82159D48;
		  /* 82159D48h */ case   12:  		/* rlwinm R10, R10, 2, 24, 29 */
		/* 82159D48h case   12:*/		cpu::op::rlwinm<0,2,24,29>(regs,&regs.R10,regs.R10);
		/* 82159D48h case   12:*/		return 0x82159D4C;
		  /* 82159D4Ch */ case   13:  		/* lwzx R5, <#[R10 + R11]> */
		/* 82159D4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82159D4Ch case   13:*/		return 0x82159D50;
		  /* 82159D50h */ case   14:  		/* bl -7720 */
		/* 82159D50h case   14:*/		regs.LR = 0x82159D54; return 0x82157F28;
		/* 82159D50h case   14:*/		return 0x82159D54;
	}
	return 0x82159D54;
} // Block from 82159D18h-82159D54h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82159D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159D54);
		  /* 82159D54h */ case    0:  		/* mr R3, R31 */
		/* 82159D54h case    0:*/		regs.R3 = regs.R31;
		/* 82159D54h case    0:*/		return 0x82159D58;
		  /* 82159D58h */ case    1:  		/* bl -2232 */
		/* 82159D58h case    1:*/		regs.LR = 0x82159D5C; return 0x821594A0;
		/* 82159D58h case    1:*/		return 0x82159D5C;
		  /* 82159D5Ch */ case    2:  		/* mr R4, R28 */
		/* 82159D5Ch case    2:*/		regs.R4 = regs.R28;
		/* 82159D5Ch case    2:*/		return 0x82159D60;
		  /* 82159D60h */ case    3:  		/* mr R3, R31 */
		/* 82159D60h case    3:*/		regs.R3 = regs.R31;
		/* 82159D60h case    3:*/		return 0x82159D64;
		  /* 82159D64h */ case    4:  		/* bl -7740 */
		/* 82159D64h case    4:*/		regs.LR = 0x82159D68; return 0x82157F28;
		/* 82159D64h case    4:*/		return 0x82159D68;
		  /* 82159D68h */ case    5:  		/* lis R11, -32252 */
		/* 82159D68h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159D68h case    5:*/		return 0x82159D6C;
		  /* 82159D6Ch */ case    6:  		/* addi R29, R11, -23380 */
		/* 82159D6Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFA4AC);
		/* 82159D6Ch case    6:*/		return 0x82159D70;
		  /* 82159D70h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159D70h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159D70h case    7:*/		return 0x82159D74;
		  /* 82159D74h */ case    8:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 82159D74h case    8:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82159D74h case    8:*/		return 0x82159D78;
		  /* 82159D78h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82159D78h case    9:*/		if ( regs.CR[0].eq ) { return 0x82159D90;  }
		/* 82159D78h case    9:*/		return 0x82159D7C;
		  /* 82159D7Ch */ case   10:  		/* lis R11, -32252 */
		/* 82159D7Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159D7Ch case   10:*/		return 0x82159D80;
		  /* 82159D80h */ case   11:  		/* mr R5, R29 */
		/* 82159D80h case   11:*/		regs.R5 = regs.R29;
		/* 82159D80h case   11:*/		return 0x82159D84;
		  /* 82159D84h */ case   12:  		/* addi R4, R11, -23392 */
		/* 82159D84h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA4A0);
		/* 82159D84h case   12:*/		return 0x82159D88;
		  /* 82159D88h */ case   13:  		/* mr R3, R31 */
		/* 82159D88h case   13:*/		regs.R3 = regs.R31;
		/* 82159D88h case   13:*/		return 0x82159D8C;
		  /* 82159D8Ch */ case   14:  		/* bl -7780 */
		/* 82159D8Ch case   14:*/		regs.LR = 0x82159D90; return 0x82157F28;
		/* 82159D8Ch case   14:*/		return 0x82159D90;
	}
	return 0x82159D90;
} // Block from 82159D54h-82159D90h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82159D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159D90);
		  /* 82159D90h */ case    0:  		/* lis R11, -32252 */
		/* 82159D90h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159D90h case    0:*/		return 0x82159D94;
		  /* 82159D94h */ case    1:  		/* mr R3, R31 */
		/* 82159D94h case    1:*/		regs.R3 = regs.R31;
		/* 82159D94h case    1:*/		return 0x82159D98;
		  /* 82159D98h */ case    2:  		/* addi R4, R11, -23404 */
		/* 82159D98h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA494);
		/* 82159D98h case    2:*/		return 0x82159D9C;
		  /* 82159D9Ch */ case    3:  		/* bl -7796 */
		/* 82159D9Ch case    3:*/		regs.LR = 0x82159DA0; return 0x82157F28;
		/* 82159D9Ch case    3:*/		return 0x82159DA0;
		  /* 82159DA0h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159DA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159DA0h case    4:*/		return 0x82159DA4;
		  /* 82159DA4h */ case    5:  		/* mr R3, R31 */
		/* 82159DA4h case    5:*/		regs.R3 = regs.R31;
		/* 82159DA4h case    5:*/		return 0x82159DA8;
		  /* 82159DA8h */ case    6:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 82159DA8h case    6:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 82159DA8h case    6:*/		return 0x82159DAC;
		  /* 82159DACh */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 82159DACh case    7:*/		if ( regs.CR[0].eq ) { return 0x82159DBC;  }
		/* 82159DACh case    7:*/		return 0x82159DB0;
		  /* 82159DB0h */ case    8:  		/* lis R11, -32252 */
		/* 82159DB0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159DB0h case    8:*/		return 0x82159DB4;
		  /* 82159DB4h */ case    9:  		/* addi R4, R11, -23428 */
		/* 82159DB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA47C);
		/* 82159DB4h case    9:*/		return 0x82159DB8;
		  /* 82159DB8h */ case   10:  		/* b 12 */
		/* 82159DB8h case   10:*/		return 0x82159DC4;
		/* 82159DB8h case   10:*/		return 0x82159DBC;
	}
	return 0x82159DBC;
} // Block from 82159D90h-82159DBCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82159DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159DBC);
		  /* 82159DBCh */ case    0:  		/* lis R11, -32252 */
		/* 82159DBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159DBCh case    0:*/		return 0x82159DC0;
		  /* 82159DC0h */ case    1:  		/* addi R4, R11, -23452 */
		/* 82159DC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA464);
		/* 82159DC0h case    1:*/		return 0x82159DC4;
	}
	return 0x82159DC4;
} // Block from 82159DBCh-82159DC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159DC4);
		  /* 82159DC4h */ case    0:  		/* bl -7836 */
		/* 82159DC4h case    0:*/		regs.LR = 0x82159DC8; return 0x82157F28;
		/* 82159DC4h case    0:*/		return 0x82159DC8;
		  /* 82159DC8h */ case    1:  		/* mr R4, R27 */
		/* 82159DC8h case    1:*/		regs.R4 = regs.R27;
		/* 82159DC8h case    1:*/		return 0x82159DCC;
		  /* 82159DCCh */ case    2:  		/* mr R3, R31 */
		/* 82159DCCh case    2:*/		regs.R3 = regs.R31;
		/* 82159DCCh case    2:*/		return 0x82159DD0;
		  /* 82159DD0h */ case    3:  		/* bl -7848 */
		/* 82159DD0h case    3:*/		regs.LR = 0x82159DD4; return 0x82157F28;
		/* 82159DD0h case    3:*/		return 0x82159DD4;
		  /* 82159DD4h */ case    4:  		/* mr R3, R31 */
		/* 82159DD4h case    4:*/		regs.R3 = regs.R31;
		/* 82159DD4h case    4:*/		return 0x82159DD8;
		  /* 82159DD8h */ case    5:  		/* bl -2360 */
		/* 82159DD8h case    5:*/		regs.LR = 0x82159DDC; return 0x821594A0;
		/* 82159DD8h case    5:*/		return 0x82159DDC;
		  /* 82159DDCh */ case    6:  		/* mr R4, R28 */
		/* 82159DDCh case    6:*/		regs.R4 = regs.R28;
		/* 82159DDCh case    6:*/		return 0x82159DE0;
		  /* 82159DE0h */ case    7:  		/* mr R3, R31 */
		/* 82159DE0h case    7:*/		regs.R3 = regs.R31;
		/* 82159DE0h case    7:*/		return 0x82159DE4;
		  /* 82159DE4h */ case    8:  		/* bl -7868 */
		/* 82159DE4h case    8:*/		regs.LR = 0x82159DE8; return 0x82157F28;
		/* 82159DE4h case    8:*/		return 0x82159DE8;
		  /* 82159DE8h */ case    9:  		/* lis R11, -32252 */
		/* 82159DE8h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159DE8h case    9:*/		return 0x82159DEC;
		  /* 82159DECh */ case   10:  		/* mr R3, R31 */
		/* 82159DECh case   10:*/		regs.R3 = regs.R31;
		/* 82159DECh case   10:*/		return 0x82159DF0;
		  /* 82159DF0h */ case   11:  		/* addi R4, R11, -23464 */
		/* 82159DF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA458);
		/* 82159DF0h case   11:*/		return 0x82159DF4;
		  /* 82159DF4h */ case   12:  		/* bl -7884 */
		/* 82159DF4h case   12:*/		regs.LR = 0x82159DF8; return 0x82157F28;
		/* 82159DF4h case   12:*/		return 0x82159DF8;
		  /* 82159DF8h */ case   13:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159DF8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159DF8h case   13:*/		return 0x82159DFC;
		  /* 82159DFCh */ case   14:  		/* mr R3, R31 */
		/* 82159DFCh case   14:*/		regs.R3 = regs.R31;
		/* 82159DFCh case   14:*/		return 0x82159E00;
		  /* 82159E00h */ case   15:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 82159E00h case   15:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 82159E00h case   15:*/		return 0x82159E04;
		  /* 82159E04h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 82159E04h case   16:*/		if ( regs.CR[0].eq ) { return 0x82159E10;  }
		/* 82159E04h case   16:*/		return 0x82159E08;
		  /* 82159E08h */ case   17:  		/* mr R4, R29 */
		/* 82159E08h case   17:*/		regs.R4 = regs.R29;
		/* 82159E08h case   17:*/		return 0x82159E0C;
		  /* 82159E0Ch */ case   18:  		/* b 12 */
		/* 82159E0Ch case   18:*/		return 0x82159E18;
		/* 82159E0Ch case   18:*/		return 0x82159E10;
	}
	return 0x82159E10;
} // Block from 82159DC4h-82159E10h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82159E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159E10);
		  /* 82159E10h */ case    0:  		/* lis R11, -32252 */
		/* 82159E10h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159E10h case    0:*/		return 0x82159E14;
		  /* 82159E14h */ case    1:  		/* addi R4, R11, -23472 */
		/* 82159E14h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA450);
		/* 82159E14h case    1:*/		return 0x82159E18;
	}
	return 0x82159E18;
} // Block from 82159E10h-82159E18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159E18);
		  /* 82159E18h */ case    0:  		/* bl -7920 */
		/* 82159E18h case    0:*/		regs.LR = 0x82159E1C; return 0x82157F28;
		/* 82159E18h case    0:*/		return 0x82159E1C;
		  /* 82159E1Ch */ case    1:  		/* lbz R11, <#[R30 + 4]> */
		/* 82159E1Ch case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159E1Ch case    1:*/		return 0x82159E20;
		  /* 82159E20h */ case    2:  		/* rlwinm. R5, R11, 0, 26, 31 */
		/* 82159E20h case    2:*/		cpu::op::rlwinm<1,0,26,31>(regs,&regs.R5,regs.R11);
		/* 82159E20h case    2:*/		return 0x82159E24;
		  /* 82159E24h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 82159E24h case    3:*/		if ( regs.CR[0].eq ) { return 0x82159E38;  }
		/* 82159E24h case    3:*/		return 0x82159E28;
		  /* 82159E28h */ case    4:  		/* lis R11, -32252 */
		/* 82159E28h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159E28h case    4:*/		return 0x82159E2C;
		  /* 82159E2Ch */ case    5:  		/* mr R3, R31 */
		/* 82159E2Ch case    5:*/		regs.R3 = regs.R31;
		/* 82159E2Ch case    5:*/		return 0x82159E30;
		  /* 82159E30h */ case    6:  		/* addi R4, R11, -23488 */
		/* 82159E30h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA440);
		/* 82159E30h case    6:*/		return 0x82159E34;
		  /* 82159E34h */ case    7:  		/* bl -7948 */
		/* 82159E34h case    7:*/		regs.LR = 0x82159E38; return 0x82157F28;
		/* 82159E34h case    7:*/		return 0x82159E38;
	}
	return 0x82159E38;
} // Block from 82159E18h-82159E38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82159E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159E38);
		  /* 82159E38h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 82159E38h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82159E38h case    0:*/		return 0x82159E3C;
		  /* 82159E3Ch */ case    1:  		/* bc 12, CR6_EQ, 104 */
		/* 82159E3Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82159EA4;  }
		/* 82159E3Ch case    1:*/		return 0x82159E40;
		  /* 82159E40h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159E40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159E40h case    2:*/		return 0x82159E44;
		  /* 82159E44h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82159E44h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82159E44h case    3:*/		return 0x82159E48;
		  /* 82159E48h */ case    4:  		/* bc 4, CR0_EQ, 92 */
		/* 82159E48h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82159EA4;  }
		/* 82159E48h case    4:*/		return 0x82159E4C;
		  /* 82159E4Ch */ case    5:  		/* mr R4, R26 */
		/* 82159E4Ch case    5:*/		regs.R4 = regs.R26;
		/* 82159E4Ch case    5:*/		return 0x82159E50;
		  /* 82159E50h */ case    6:  		/* mr R3, R31 */
		/* 82159E50h case    6:*/		regs.R3 = regs.R31;
		/* 82159E50h case    6:*/		return 0x82159E54;
		  /* 82159E54h */ case    7:  		/* bl -7980 */
		/* 82159E54h case    7:*/		regs.LR = 0x82159E58; return 0x82157F28;
		/* 82159E54h case    7:*/		return 0x82159E58;
		  /* 82159E58h */ case    8:  		/* mr R3, R31 */
		/* 82159E58h case    8:*/		regs.R3 = regs.R31;
		/* 82159E58h case    8:*/		return 0x82159E5C;
		  /* 82159E5Ch */ case    9:  		/* bl -2492 */
		/* 82159E5Ch case    9:*/		regs.LR = 0x82159E60; return 0x821594A0;
		/* 82159E5Ch case    9:*/		return 0x82159E60;
		  /* 82159E60h */ case   10:  		/* mr R4, R28 */
		/* 82159E60h case   10:*/		regs.R4 = regs.R28;
		/* 82159E60h case   10:*/		return 0x82159E64;
		  /* 82159E64h */ case   11:  		/* mr R3, R31 */
		/* 82159E64h case   11:*/		regs.R3 = regs.R31;
		/* 82159E64h case   11:*/		return 0x82159E68;
		  /* 82159E68h */ case   12:  		/* bl -8000 */
		/* 82159E68h case   12:*/		regs.LR = 0x82159E6C; return 0x82157F28;
		/* 82159E68h case   12:*/		return 0x82159E6C;
		  /* 82159E6Ch */ case   13:  		/* lwz R11, <#[R30 + 4]> */
		/* 82159E6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82159E6Ch case   13:*/		return 0x82159E70;
		  /* 82159E70h */ case   14:  		/* mr R3, R31 */
		/* 82159E70h case   14:*/		regs.R3 = regs.R31;
		/* 82159E70h case   14:*/		return 0x82159E74;
		  /* 82159E74h */ case   15:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 82159E74h case   15:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 82159E74h case   15:*/		return 0x82159E78;
		  /* 82159E78h */ case   16:  		/* bc 4, CR0_EQ, 32 */
		/* 82159E78h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82159E98;  }
		/* 82159E78h case   16:*/		return 0x82159E7C;
		  /* 82159E7Ch */ case   17:  		/* lwz R11, <#[R30]> */
		/* 82159E7Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82159E7Ch case   17:*/		return 0x82159E80;
		  /* 82159E80h */ case   18:  		/* lis R10, -32252 */
		/* 82159E80h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82159E80h case   18:*/		return 0x82159E84;
		  /* 82159E84h */ case   19:  		/* rlwinm R11, R11, 5, 29, 31 */
		/* 82159E84h case   19:*/		cpu::op::rlwinm<0,5,29,31>(regs,&regs.R11,regs.R11);
		/* 82159E84h case   19:*/		return 0x82159E88;
		  /* 82159E88h */ case   20:  		/* addi R4, R10, -23524 */
		/* 82159E88h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFA41C);
		/* 82159E88h case   20:*/		return 0x82159E8C;
		  /* 82159E8Ch */ case   21:  		/* addi R5, R11, 1 */
		/* 82159E8Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1);
		/* 82159E8Ch case   21:*/		return 0x82159E90;
		  /* 82159E90h */ case   22:  		/* bl -8040 */
		/* 82159E90h case   22:*/		regs.LR = 0x82159E94; return 0x82157F28;
		/* 82159E90h case   22:*/		return 0x82159E94;
		  /* 82159E94h */ case   23:  		/* b 16 */
		/* 82159E94h case   23:*/		return 0x82159EA4;
		/* 82159E94h case   23:*/		return 0x82159E98;
	}
	return 0x82159E98;
} // Block from 82159E38h-82159E98h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82159E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159E98);
		  /* 82159E98h */ case    0:  		/* lis R11, -32252 */
		/* 82159E98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82159E98h case    0:*/		return 0x82159E9C;
		  /* 82159E9Ch */ case    1:  		/* addi R4, R11, -23540 */
		/* 82159E9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFA40C);
		/* 82159E9Ch case    1:*/		return 0x82159EA0;
		  /* 82159EA0h */ case    2:  		/* bl -8056 */
		/* 82159EA0h case    2:*/		regs.LR = 0x82159EA4; return 0x82157F28;
		/* 82159EA0h case    2:*/		return 0x82159EA4;
	}
	return 0x82159EA4;
} // Block from 82159E98h-82159EA4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82159EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159EA4);
		  /* 82159EA4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82159EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82159EA4h case    0:*/		return 0x82159EA8;
		  /* 82159EA8h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82159EA8h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82159EA8h case    1:*/		return 0x82159EAC;
		  /* 82159EACh */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 82159EACh case    2:*/		if ( regs.CR[0].eq ) { return 0x82159EC4;  }
		/* 82159EACh case    2:*/		return 0x82159EB0;
		  /* 82159EB0h */ case    3:  		/* lis R11, -32253 */
		/* 82159EB0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82159EB0h case    3:*/		return 0x82159EB4;
		  /* 82159EB4h */ case    4:  		/* mr R4, R25 */
		/* 82159EB4h case    4:*/		regs.R4 = regs.R25;
		/* 82159EB4h case    4:*/		return 0x82159EB8;
	}
	return 0x82159EB8;
} // Block from 82159EA4h-82159EB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82159EB8h
// Function '?StartLine@Disassembler@XGRAPHICS@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159EB8);
		  /* 82159EB8h */ case    0:  		/* addi R5, R11, 28348 */
		/* 82159EB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6EBC);
		/* 82159EB8h case    0:*/		return 0x82159EBC;
	}
	return 0x82159EBC;
} // Block from 82159EB8h-82159EBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82159EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159EBC);
		  /* 82159EBCh */ case    0:  		/* mr R3, R31 */
		/* 82159EBCh case    0:*/		regs.R3 = regs.R31;
		/* 82159EBCh case    0:*/		return 0x82159EC0;
		  /* 82159EC0h */ case    1:  		/* bl -8088 */
		/* 82159EC0h case    1:*/		regs.LR = 0x82159EC4; return 0x82157F28;
		/* 82159EC0h case    1:*/		return 0x82159EC4;
	}
	return 0x82159EC4;
} // Block from 82159EBCh-82159EC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82159EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159EC4);
		  /* 82159EC4h */ case    0:  		/* addi R1, R1, 192 */
		/* 82159EC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82159EC4h case    0:*/		return 0x82159EC8;
		  /* 82159EC8h */ case    1:  		/* b -822320 */
		/* 82159EC8h case    1:*/		return 0x82091298;
		/* 82159EC8h case    1:*/		return 0x82159ECC;
		  /* 82159ECCh */ case    2:  		/* nop */
		/* 82159ECCh case    2:*/		cpu::op::nop();
		/* 82159ECCh case    2:*/		return 0x82159ED0;
	}
	return 0x82159ED0;
} // Block from 82159EC4h-82159ED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82159ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159ED0);
		  /* 82159ED0h */ case    0:  		/* mfspr R12, LR */
		/* 82159ED0h case    0:*/		regs.R12 = regs.LR;
		/* 82159ED0h case    0:*/		return 0x82159ED4;
		  /* 82159ED4h */ case    1:  		/* bl -822440 */
		/* 82159ED4h case    1:*/		regs.LR = 0x82159ED8; return 0x8209122C;
		/* 82159ED4h case    1:*/		return 0x82159ED8;
		  /* 82159ED8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82159ED8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82159ED8h case    2:*/		return 0x82159EDC;
		  /* 82159EDCh */ case    3:  		/* mr R29, R3 */
		/* 82159EDCh case    3:*/		regs.R29 = regs.R3;
		/* 82159EDCh case    3:*/		return 0x82159EE0;
		  /* 82159EE0h */ case    4:  		/* mr R28, R5 */
		/* 82159EE0h case    4:*/		regs.R28 = regs.R5;
		/* 82159EE0h case    4:*/		return 0x82159EE4;
		  /* 82159EE4h */ case    5:  		/* mr R19, R6 */
		/* 82159EE4h case    5:*/		regs.R19 = regs.R6;
		/* 82159EE4h case    5:*/		return 0x82159EE8;
		  /* 82159EE8h */ case    6:  		/* mr R17, R7 */
		/* 82159EE8h case    6:*/		regs.R17 = regs.R7;
		/* 82159EE8h case    6:*/		return 0x82159EEC;
		  /* 82159EECh */ case    7:  		/* mr R18, R8 */
		/* 82159EECh case    7:*/		regs.R18 = regs.R8;
		/* 82159EECh case    7:*/		return 0x82159EF0;
		  /* 82159EF0h */ case    8:  		/* cmpwi CR6, R6, 0 */
		/* 82159EF0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82159EF0h case    8:*/		return 0x82159EF4;
		  /* 82159EF4h */ case    9:  		/* bc 12, CR6_EQ, 472 */
		/* 82159EF4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8215A0CC;  }
		/* 82159EF4h case    9:*/		return 0x82159EF8;
		  /* 82159EF8h */ case   10:  		/* lis R3, -32252 */
		/* 82159EF8h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 82159EF8h case   10:*/		return 0x82159EFC;
		  /* 82159EFCh */ case   11:  		/* lis R4, -32253 */
		/* 82159EFCh case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 82159EFCh case   11:*/		return 0x82159F00;
		  /* 82159F00h */ case   12:  		/* lis R5, -32255 */
		/* 82159F00h case   12:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8201);
		/* 82159F00h case   12:*/		return 0x82159F04;
		  /* 82159F04h */ case   13:  		/* lis R6, -32252 */
		/* 82159F04h case   13:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 82159F04h case   13:*/		return 0x82159F08;
		  /* 82159F08h */ case   14:  		/* lis R7, -32217 */
		/* 82159F08h case   14:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8227);
		/* 82159F08h case   14:*/		return 0x82159F0C;
		  /* 82159F0Ch */ case   15:  		/* lis R8, -32253 */
		/* 82159F0Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82159F0Ch case   15:*/		return 0x82159F10;
		  /* 82159F10h */ case   16:  		/* lis R9, -32252 */
		/* 82159F10h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82159F10h case   16:*/		return 0x82159F14;
		  /* 82159F14h */ case   17:  		/* lis R10, -32252 */
		/* 82159F14h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82159F14h case   17:*/		return 0x82159F18;
	}
	return 0x82159F18;
} // Block from 82159ED0h-82159F18h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82159F18h
// Function '?FindBranchTargets@Disassembler@XGRAPHICS@@AAAXPADI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159F18);
		  /* 82159F18h */ case    0:  		/* lis R11, -32254 */
		/* 82159F18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 82159F18h case    0:*/		return 0x82159F1C;
		  /* 82159F1Ch */ case    1:  		/* addi R23, R3, -22696 */
		/* 82159F1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R3,0xFFFFA758);
		/* 82159F1Ch case    1:*/		return 0x82159F20;
		  /* 82159F20h */ case    2:  		/* addi R27, R4, 27460 */
		/* 82159F20h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x6B44);
		/* 82159F20h case    2:*/		return 0x82159F24;
		  /* 82159F24h */ case    3:  		/* addi R26, R5, 5216 */
		/* 82159F24h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R5,0x1460);
		/* 82159F24h case    3:*/		return 0x82159F28;
		  /* 82159F28h */ case    4:  		/* addi R25, R6, -22792 */
		/* 82159F28h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R6,0xFFFFA6F8);
		/* 82159F28h case    4:*/		return 0x82159F2C;
		  /* 82159F2Ch */ case    5:  		/* addi R22, R7, 20184 */
		/* 82159F2Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R7,0x4ED8);
		/* 82159F2Ch case    5:*/		return 0x82159F30;
		  /* 82159F30h */ case    6:  		/* addi R24, R8, 28832 */
		/* 82159F30h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R8,0x70A0);
		/* 82159F30h case    6:*/		return 0x82159F34;
		  /* 82159F34h */ case    7:  		/* addi R21, R9, -22804 */
		/* 82159F34h case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0xFFFFA6EC);
		/* 82159F34h case    7:*/		return 0x82159F38;
		  /* 82159F38h */ case    8:  		/* addi R20, R10, -22800 */
		/* 82159F38h case    8:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R10,0xFFFFA6F0);
		/* 82159F38h case    8:*/		return 0x82159F3C;
		  /* 82159F3Ch */ case    9:  		/* addi R30, R11, -30880 */
		/* 82159F3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF8760);
		/* 82159F3Ch case    9:*/		return 0x82159F40;
		  /* 82159F40h */ case   10:  		/* rlwinm R11, R17, 0, 31, 31 */
		/* 82159F40h case   10:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R17);
		/* 82159F40h case   10:*/		return 0x82159F44;
		  /* 82159F44h */ case   11:  		/* rlwinm R31, R18, 0, 31, 31 */
		/* 82159F44h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R31,regs.R18);
		/* 82159F44h case   11:*/		return 0x82159F48;
		  /* 82159F48h */ case   12:  		/* srawi R18, R18, 1 */
		/* 82159F48h case   12:*/		cpu::op::srawi<0,1>(regs,&regs.R18,regs.R18);
		/* 82159F48h case   12:*/		return 0x82159F4C;
		  /* 82159F4Ch */ case   13:  		/* srawi R17, R17, 2 */
		/* 82159F4Ch case   13:*/		cpu::op::srawi<0,2>(regs,&regs.R17,regs.R17);
		/* 82159F4Ch case   13:*/		return 0x82159F50;
		  /* 82159F50h */ case   14:  		/* cmpwi CR6, R11, 1 */
		/* 82159F50h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82159F50h case   14:*/		return 0x82159F54;
		  /* 82159F54h */ case   15:  		/* bc 4, CR6_EQ, 44 */
		/* 82159F54h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82159F80;  }
		/* 82159F54h case   15:*/		return 0x82159F58;
		  /* 82159F58h */ case   16:  		/* mr R3, R29 */
		/* 82159F58h case   16:*/		regs.R3 = regs.R29;
		/* 82159F58h case   16:*/		return 0x82159F5C;
		  /* 82159F5Ch */ case   17:  		/* bl -2748 */
		/* 82159F5Ch case   17:*/		regs.LR = 0x82159F60; return 0x821594A0;
		/* 82159F5Ch case   17:*/		return 0x82159F60;
		  /* 82159F60h */ case   18:  		/* mr R4, R30 */
		/* 82159F60h case   18:*/		regs.R4 = regs.R30;
		/* 82159F60h case   18:*/		return 0x82159F64;
		  /* 82159F64h */ case   19:  		/* mr R3, R29 */
		/* 82159F64h case   19:*/		regs.R3 = regs.R29;
		/* 82159F64h case   19:*/		return 0x82159F68;
		  /* 82159F68h */ case   20:  		/* bl -8256 */
		/* 82159F68h case   20:*/		regs.LR = 0x82159F6C; return 0x82157F28;
		/* 82159F68h case   20:*/		return 0x82159F6C;
		  /* 82159F6Ch */ case   21:  		/* mr R5, R31 */
		/* 82159F6Ch case   21:*/		regs.R5 = regs.R31;
		/* 82159F6Ch case   21:*/		return 0x82159F70;
		  /* 82159F70h */ case   22:  		/* mr R4, R28 */
		/* 82159F70h case   22:*/		regs.R4 = regs.R28;
		/* 82159F70h case   22:*/		return 0x82159F74;
		  /* 82159F74h */ case   23:  		/* mr R3, R29 */
		/* 82159F74h case   23:*/		regs.R3 = regs.R29;
		/* 82159F74h case   23:*/		return 0x82159F78;
		  /* 82159F78h */ case   24:  		/* bl -2448 */
		/* 82159F78h case   24:*/		regs.LR = 0x82159F7C; return 0x821595E8;
		/* 82159F78h case   24:*/		return 0x82159F7C;
		  /* 82159F7Ch */ case   25:  		/* b 324 */
		/* 82159F7Ch case   25:*/		return 0x8215A0C0;
		/* 82159F7Ch case   25:*/		return 0x82159F80;
	}
	return 0x82159F80;
} // Block from 82159F18h-82159F80h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82159F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159F80);
		  /* 82159F80h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 82159F80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82159F80h case    0:*/		return 0x82159F84;
		  /* 82159F84h */ case    1:  		/* rlwinm R11, R11, 5, 27, 31 */
		/* 82159F84h case    1:*/		cpu::op::rlwinm<0,5,27,31>(regs,&regs.R11,regs.R11);
		/* 82159F84h case    1:*/		return 0x82159F88;
		  /* 82159F88h */ case    2:  		/* rlwinm R10, R11, 0, 30, 31 */
		/* 82159F88h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R11);
		/* 82159F88h case    2:*/		return 0x82159F8C;
		  /* 82159F8Ch */ case    3:  		/* cmplwi CR6, R10, 2 */
		/* 82159F8Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 82159F8Ch case    3:*/		return 0x82159F90;
		  /* 82159F90h */ case    4:  		/* bc 12, CR6_LT, 36 */
		/* 82159F90h case    4:*/		if ( regs.CR[6].lt ) { return 0x82159FB4;  }
		/* 82159F90h case    4:*/		return 0x82159F94;
		  /* 82159F94h */ case    5:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82159F94h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82159F94h case    5:*/		return 0x82159F98;
		  /* 82159F98h */ case    6:  		/* mr R5, R20 */
		/* 82159F98h case    6:*/		regs.R5 = regs.R20;
		/* 82159F98h case    6:*/		return 0x82159F9C;
		  /* 82159F9Ch */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 82159F9Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82159F9Ch case    7:*/		return 0x82159FA0;
		  /* 82159FA0h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 82159FA0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82159FA8;  }
		/* 82159FA0h case    8:*/		return 0x82159FA4;
		  /* 82159FA4h */ case    9:  		/* mr R5, R21 */
		/* 82159FA4h case    9:*/		regs.R5 = regs.R21;
		/* 82159FA4h case    9:*/		return 0x82159FA8;
	}
	return 0x82159FA8;
} // Block from 82159F80h-82159FA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82159FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159FA8);
		  /* 82159FA8h */ case    0:  		/* mr R4, R24 */
		/* 82159FA8h case    0:*/		regs.R4 = regs.R24;
		/* 82159FA8h case    0:*/		return 0x82159FAC;
		  /* 82159FACh */ case    1:  		/* mr R3, R29 */
		/* 82159FACh case    1:*/		regs.R3 = regs.R29;
		/* 82159FACh case    1:*/		return 0x82159FB0;
		  /* 82159FB0h */ case    2:  		/* bl -8328 */
		/* 82159FB0h case    2:*/		regs.LR = 0x82159FB4; return 0x82157F28;
		/* 82159FB0h case    2:*/		return 0x82159FB4;
	}
	return 0x82159FB4;
} // Block from 82159FA8h-82159FB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82159FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159FB4);
		  /* 82159FB4h */ case    0:  		/* lhz R11, <#[R28]> */
		/* 82159FB4h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82159FB4h case    0:*/		return 0x82159FB8;
		  /* 82159FB8h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 82159FB8h case    1:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82159FB8h case    1:*/		return 0x82159FBC;
		  /* 82159FBCh */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 82159FBCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82159FD4;  }
		/* 82159FBCh case    2:*/		return 0x82159FC0;
		  /* 82159FC0h */ case    3:  		/* lbz R11, <#[R28 + 8]> */
		/* 82159FC0h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82159FC0h case    3:*/		return 0x82159FC4;
		  /* 82159FC4h */ case    4:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82159FC4h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82159FC4h case    4:*/		return 0x82159FC8;
		  /* 82159FC8h */ case    5:  		/* cmplwi CR6, R11, 2 */
		/* 82159FC8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82159FC8h case    5:*/		return 0x82159FCC;
		  /* 82159FCCh */ case    6:  		/* li R11, 1 */
		/* 82159FCCh case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82159FCCh case    6:*/		return 0x82159FD0;
		  /* 82159FD0h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 82159FD0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82159FD8;  }
		/* 82159FD0h case    7:*/		return 0x82159FD4;
	}
	return 0x82159FD4;
} // Block from 82159FB4h-82159FD4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82159FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159FD4);
		  /* 82159FD4h */ case    0:  		/* li R11, 0 */
		/* 82159FD4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82159FD4h case    0:*/		return 0x82159FD8;
	}
	return 0x82159FD8;
} // Block from 82159FD4h-82159FD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82159FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82159FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82159FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82159FD8);
		  /* 82159FD8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82159FD8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82159FD8h case    0:*/		return 0x82159FDC;
		  /* 82159FDCh */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 82159FDCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8215A000;  }
		/* 82159FDCh case    1:*/		return 0x82159FE0;
		  /* 82159FE0h */ case    2:  		/* mr R3, R29 */
		/* 82159FE0h case    2:*/		regs.R3 = regs.R29;
		/* 82159FE0h case    2:*/		return 0x82159FE4;
		  /* 82159FE4h */ case    3:  		/* bl -2884 */
		/* 82159FE4h case    3:*/		regs.LR = 0x82159FE8; return 0x821594A0;
		/* 82159FE4h case    3:*/		return 0x82159FE8;
		  /* 82159FE8h */ case    4:  		/* mr R4, R30 */
		/* 82159FE8h case    4:*/		regs.R4 = regs.R30;
		/* 82159FE8h case    4:*/		return 0x82159FEC;
		  /* 82159FECh */ case    5:  		/* mr R3, R29 */
		/* 82159FECh case    5:*/		regs.R3 = regs.R29;
		/* 82159FECh case    5:*/		return 0x82159FF0;
		  /* 82159FF0h */ case    6:  		/* bl -8392 */
		/* 82159FF0h case    6:*/		regs.LR = 0x82159FF4; return 0x82157F28;
		/* 82159FF0h case    6:*/		return 0x82159FF4;
		  /* 82159FF4h */ case    7:  		/* mr R4, R28 */
		/* 82159FF4h case    7:*/		regs.R4 = regs.R28;
		/* 82159FF4h case    7:*/		return 0x82159FF8;
		  /* 82159FF8h */ case    8:  		/* mr R3, R29 */
		/* 82159FF8h case    8:*/		regs.R3 = regs.R29;
		/* 82159FF8h case    8:*/		return 0x82159FFC;
		  /* 82159FFCh */ case    9:  		/* bl -4052 */
		/* 82159FFCh case    9:*/		regs.LR = 0x8215A000; return 0x82159028;
		/* 82159FFCh case    9:*/		return 0x8215A000;
	}
	return 0x8215A000;
} // Block from 82159FD8h-8215A000h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215A000h
// Function '?PrintFetch@Disassembler@XGRAPHICS@@AAAXPADH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A000);
		  /* 8215A000h */ case    0:  		/* lbz R11, <#[R28 + 8]> */
		/* 8215A000h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8215A000h case    0:*/		return 0x8215A004;
		  /* 8215A004h */ case    1:  		/* rlwinm R11, R11, 2, 25, 29 */
		/* 8215A004h case    1:*/		cpu::op::rlwinm<0,2,25,29>(regs,&regs.R11,regs.R11);
		/* 8215A004h case    1:*/		return 0x8215A008;
		  /* 8215A008h */ case    2:  		/* lwzx R11, <#[R11 + R22]> */
		/* 8215A008h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8215A008h case    2:*/		return 0x8215A00C;
		  /* 8215A00Ch */ case    3:  		/* cmpwi CR6, R11, 3 */
		/* 8215A00Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8215A00Ch case    3:*/		return 0x8215A010;
		  /* 8215A010h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 8215A010h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8215A010h case    4:*/		return 0x8215A014;
		  /* 8215A014h */ case    5:  		/* bc 12, CR6_LT, 40 */
		/* 8215A014h case    5:*/		if ( regs.CR[6].lt ) { return 0x8215A03C;  }
		/* 8215A014h case    5:*/		return 0x8215A018;
		  /* 8215A018h */ case    6:  		/* rlwinm. R11, R11, 0, 8, 11 */
		/* 8215A018h case    6:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R11,regs.R11);
		/* 8215A018h case    6:*/		return 0x8215A01C;
		  /* 8215A01Ch */ case    7:  		/* bc 12, CR0_EQ, 164 */
		/* 8215A01Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8215A0C0;  }
		/* 8215A01Ch case    7:*/		return 0x8215A020;
		  /* 8215A020h */ case    8:  		/* mr R6, R25 */
		/* 8215A020h case    8:*/		regs.R6 = regs.R25;
		/* 8215A020h case    8:*/		return 0x8215A024;
		  /* 8215A024h */ case    9:  		/* mr R5, R26 */
		/* 8215A024h case    9:*/		regs.R5 = regs.R26;
		/* 8215A024h case    9:*/		return 0x8215A028;
		  /* 8215A028h */ case   10:  		/* mr R4, R27 */
		/* 8215A028h case   10:*/		regs.R4 = regs.R27;
		/* 8215A028h case   10:*/		return 0x8215A02C;
		  /* 8215A02Ch */ case   11:  		/* li R7, 1151 */
		/* 8215A02Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x47F);
		/* 8215A02Ch case   11:*/		return 0x8215A030;
		  /* 8215A030h */ case   12:  		/* li R3, 0 */
		/* 8215A030h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215A030h case   12:*/		return 0x8215A034;
		  /* 8215A034h */ case   13:  		/* bl -9260 */
		/* 8215A034h case   13:*/		regs.LR = 0x8215A038; return 0x82157C08;
		/* 8215A034h case   13:*/		return 0x8215A038;
		  /* 8215A038h */ case   14:  		/* b 136 */
		/* 8215A038h case   14:*/		return 0x8215A0C0;
		/* 8215A038h case   14:*/		return 0x8215A03C;
	}
	return 0x8215A03C;
} // Block from 8215A000h-8215A03Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215A03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A03C);
		  /* 8215A03Ch */ case    0:  		/* rlwinm. R10, R11, 0, 8, 11 */
		/* 8215A03Ch case    0:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R10,regs.R11);
		/* 8215A03Ch case    0:*/		return 0x8215A040;
		  /* 8215A040h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 8215A040h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8215A064;  }
		/* 8215A040h case    1:*/		return 0x8215A044;
		  /* 8215A044h */ case    2:  		/* rlwinm R10, R11, 0, 0, 5 */
		/* 8215A044h case    2:*/		cpu::op::rlwinm<0,0,0,5>(regs,&regs.R10,regs.R11);
		/* 8215A044h case    2:*/		return 0x8215A048;
		  /* 8215A048h */ case    3:  		/* lis R9, 5120 */
		/* 8215A048h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x1400);
		/* 8215A048h case    3:*/		return 0x8215A04C;
		  /* 8215A04Ch */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 8215A04Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8215A04Ch case    4:*/		return 0x8215A050;
		  /* 8215A050h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 8215A050h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215A064;  }
		/* 8215A050h case    5:*/		return 0x8215A054;
		  /* 8215A054h */ case    6:  		/* rlwinm R11, R11, 0, 18, 23 */
		/* 8215A054h case    6:*/		cpu::op::rlwinm<0,0,18,23>(regs,&regs.R11,regs.R11);
		/* 8215A054h case    6:*/		return 0x8215A058;
		  /* 8215A058h */ case    7:  		/* cmplwi CR6, R11, 4096 */
		/* 8215A058h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001000);
		/* 8215A058h case    7:*/		return 0x8215A05C;
		  /* 8215A05Ch */ case    8:  		/* li R11, 1 */
		/* 8215A05Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215A05Ch case    8:*/		return 0x8215A060;
		  /* 8215A060h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 8215A060h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215A068;  }
		/* 8215A060h case    9:*/		return 0x8215A064;
	}
	return 0x8215A064;
} // Block from 8215A03Ch-8215A064h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215A064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A064);
		  /* 8215A064h */ case    0:  		/* li R11, 0 */
		/* 8215A064h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215A064h case    0:*/		return 0x8215A068;
	}
	return 0x8215A068;
} // Block from 8215A064h-8215A068h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215A068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A068);
		  /* 8215A068h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8215A068h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8215A068h case    0:*/		return 0x8215A06C;
		  /* 8215A06Ch */ case    1:  		/* bc 4, CR0_EQ, 84 */
		/* 8215A06Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8215A0C0;  }
		/* 8215A06Ch case    1:*/		return 0x8215A070;
		  /* 8215A070h */ case    2:  		/* mr R3, R29 */
		/* 8215A070h case    2:*/		regs.R3 = regs.R29;
		/* 8215A070h case    2:*/		return 0x8215A074;
		  /* 8215A074h */ case    3:  		/* bl -3028 */
		/* 8215A074h case    3:*/		regs.LR = 0x8215A078; return 0x821594A0;
		/* 8215A074h case    3:*/		return 0x8215A078;
		  /* 8215A078h */ case    4:  		/* lhz R11, <#[R28]> */
		/* 8215A078h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8215A078h case    4:*/		return 0x8215A07C;
		  /* 8215A07Ch */ case    5:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 8215A07Ch case    5:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 8215A07Ch case    5:*/		return 0x8215A080;
		  /* 8215A080h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 8215A080h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8215A098;  }
		/* 8215A080h case    6:*/		return 0x8215A084;
		  /* 8215A084h */ case    7:  		/* lbz R11, <#[R28 + 8]> */
		/* 8215A084h case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8215A084h case    7:*/		return 0x8215A088;
		  /* 8215A088h */ case    8:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8215A088h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8215A088h case    8:*/		return 0x8215A08C;
		  /* 8215A08Ch */ case    9:  		/* cmplwi CR6, R11, 2 */
		/* 8215A08Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8215A08Ch case    9:*/		return 0x8215A090;
		  /* 8215A090h */ case   10:  		/* li R11, 1 */
		/* 8215A090h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215A090h case   10:*/		return 0x8215A094;
		  /* 8215A094h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 8215A094h case   11:*/		if ( regs.CR[6].eq ) { return 0x8215A09C;  }
		/* 8215A094h case   11:*/		return 0x8215A098;
	}
	return 0x8215A098;
} // Block from 8215A068h-8215A098h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215A098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A098);
		  /* 8215A098h */ case    0:  		/* li R11, 0 */
		/* 8215A098h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215A098h case    0:*/		return 0x8215A09C;
	}
	return 0x8215A09C;
} // Block from 8215A098h-8215A09Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215A09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A09C);
		  /* 8215A09Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8215A09Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8215A09Ch case    0:*/		return 0x8215A0A0;
		  /* 8215A0A0h */ case    1:  		/* mr R3, R29 */
		/* 8215A0A0h case    1:*/		regs.R3 = regs.R29;
		/* 8215A0A0h case    1:*/		return 0x8215A0A4;
		  /* 8215A0A4h */ case    2:  		/* mr R4, R23 */
		/* 8215A0A4h case    2:*/		regs.R4 = regs.R23;
		/* 8215A0A4h case    2:*/		return 0x8215A0A8;
		  /* 8215A0A8h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8215A0A8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215A0B0;  }
		/* 8215A0A8h case    3:*/		return 0x8215A0AC;
		  /* 8215A0ACh */ case    4:  		/* mr R4, R30 */
		/* 8215A0ACh case    4:*/		regs.R4 = regs.R30;
		/* 8215A0ACh case    4:*/		return 0x8215A0B0;
	}
	return 0x8215A0B0;
} // Block from 8215A09Ch-8215A0B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215A0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A0B0);
		  /* 8215A0B0h */ case    0:  		/* bl -8584 */
		/* 8215A0B0h case    0:*/		regs.LR = 0x8215A0B4; return 0x82157F28;
		/* 8215A0B0h case    0:*/		return 0x8215A0B4;
		  /* 8215A0B4h */ case    1:  		/* mr R4, R28 */
		/* 8215A0B4h case    1:*/		regs.R4 = regs.R28;
		/* 8215A0B4h case    1:*/		return 0x8215A0B8;
		  /* 8215A0B8h */ case    2:  		/* mr R3, R29 */
		/* 8215A0B8h case    2:*/		regs.R3 = regs.R29;
		/* 8215A0B8h case    2:*/		return 0x8215A0BC;
		  /* 8215A0BCh */ case    3:  		/* bl -3516 */
		/* 8215A0BCh case    3:*/		regs.LR = 0x8215A0C0; return 0x82159300;
		/* 8215A0BCh case    3:*/		return 0x8215A0C0;
	}
	return 0x8215A0C0;
} // Block from 8215A0B0h-8215A0C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215A0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A0C0);
		  /* 8215A0C0h */ case    0:  		/* addic. R19, R19, -1 */
		/* 8215A0C0h case    0:*/		cpu::op::addic<1>(regs,&regs.R19,regs.R19,0xFFFFFFFF);
		/* 8215A0C0h case    0:*/		return 0x8215A0C4;
		  /* 8215A0C4h */ case    1:  		/* addi R28, R28, 12 */
		/* 8215A0C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xC);
		/* 8215A0C4h case    1:*/		return 0x8215A0C8;
		  /* 8215A0C8h */ case    2:  		/* bc 4, CR0_EQ, -392 */
		/* 8215A0C8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82159F40;  }
		/* 8215A0C8h case    2:*/		return 0x8215A0CC;
	}
	return 0x8215A0CC;
} // Block from 8215A0C0h-8215A0CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215A0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A0CC);
		  /* 8215A0CCh */ case    0:  		/* stw R28, <#[R29 + 12]> */
		/* 8215A0CCh case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215A0CCh case    0:*/		return 0x8215A0D0;
		  /* 8215A0D0h */ case    1:  		/* addi R1, R1, 256 */
		/* 8215A0D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8215A0D0h case    1:*/		return 0x8215A0D4;
		  /* 8215A0D4h */ case    2:  		/* b -822872 */
		/* 8215A0D4h case    2:*/		return 0x8209127C;
		/* 8215A0D4h case    2:*/		return 0x8215A0D8;
	}
	return 0x8215A0D8;
} // Block from 8215A0CCh-8215A0D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215A0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A0D8);
		  /* 8215A0D8h */ case    0:  		/* mfspr R12, LR */
		/* 8215A0D8h case    0:*/		regs.R12 = regs.LR;
		/* 8215A0D8h case    0:*/		return 0x8215A0DC;
		  /* 8215A0DCh */ case    1:  		/* bl -822972 */
		/* 8215A0DCh case    1:*/		regs.LR = 0x8215A0E0; return 0x82091220;
		/* 8215A0DCh case    1:*/		return 0x8215A0E0;
		  /* 8215A0E0h */ case    2:  		/* stwu R1, <#[R1 - 432]> */
		/* 8215A0E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE50);
		/* 8215A0E0h case    2:*/		return 0x8215A0E4;
		  /* 8215A0E4h */ case    3:  		/* li R11, 1 */
		/* 8215A0E4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215A0E4h case    3:*/		return 0x8215A0E8;
		  /* 8215A0E8h */ case    4:  		/* stw R6, <#[R3 + 8]> */
		/* 8215A0E8h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 8215A0E8h case    4:*/		return 0x8215A0EC;
		  /* 8215A0ECh */ case    5:  		/* nor R10, R6, R6 */
		/* 8215A0ECh case    5:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R6,regs.R6);
		/* 8215A0ECh case    5:*/		return 0x8215A0F0;
		  /* 8215A0F0h */ case    6:  		/* stw R4, <#[R1 + 460]> */
		/* 8215A0F0h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001CC) );
		/* 8215A0F0h case    6:*/		return 0x8215A0F4;
		  /* 8215A0F4h */ case    7:  		/* stb R11, <#[R3 + 4]> */
		/* 8215A0F4h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8215A0F4h case    7:*/		return 0x8215A0F8;
		  /* 8215A0F8h */ case    8:  		/* li R9, 0 */
		/* 8215A0F8h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8215A0F8h case    8:*/		return 0x8215A0FC;
		  /* 8215A0FCh */ case    9:  		/* mr R31, R3 */
		/* 8215A0FCh case    9:*/		regs.R31 = regs.R3;
		/* 8215A0FCh case    9:*/		return 0x8215A100;
		  /* 8215A100h */ case   10:  		/* stw R5, <#[R1 + 468]> */
		/* 8215A100h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000001D4) );
		/* 8215A100h case   10:*/		return 0x8215A104;
		  /* 8215A104h */ case   11:  		/* mr R29, R4 */
		/* 8215A104h case   11:*/		regs.R29 = regs.R4;
		/* 8215A104h case   11:*/		return 0x8215A108;
		  /* 8215A108h */ case   12:  		/* stb R11, <#[R1 + 113]> */
		/* 8215A108h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000071) );
		/* 8215A108h case   12:*/		return 0x8215A10C;
		  /* 8215A10Ch */ case   13:  		/* mr R28, R5 */
		/* 8215A10Ch case   13:*/		regs.R28 = regs.R5;
		/* 8215A10Ch case   13:*/		return 0x8215A110;
		  /* 8215A110h */ case   14:  		/* stw R9, <#[R1 + 116]> */
		/* 8215A110h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 8215A110h case   14:*/		return 0x8215A114;
		  /* 8215A114h */ case   15:  		/* rlwinm R30, R10, 0, 31, 31 */
		/* 8215A114h case   15:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R30,regs.R10);
		/* 8215A114h case   15:*/		return 0x8215A118;
		  /* 8215A118h */ case   16:  		/* bl -8592 */
		/* 8215A118h case   16:*/		regs.LR = 0x8215A11C; return 0x82157F88;
		/* 8215A118h case   16:*/		return 0x8215A11C;
		  /* 8215A11Ch */ case   17:  		/* li R11, -1 */
		/* 8215A11Ch case   17:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215A11Ch case   17:*/		return 0x8215A120;
		  /* 8215A120h */ case   18:  		/* mr R5, R28 */
		/* 8215A120h case   18:*/		regs.R5 = regs.R28;
		/* 8215A120h case   18:*/		return 0x8215A124;
		  /* 8215A124h */ case   19:  		/* mr R4, R29 */
		/* 8215A124h case   19:*/		regs.R4 = regs.R29;
		/* 8215A124h case   19:*/		return 0x8215A128;
		  /* 8215A128h */ case   20:  		/* stw R11, <#[R1 + 136]> */
		/* 8215A128h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 8215A128h case   20:*/		return 0x8215A12C;
		  /* 8215A12Ch */ case   21:  		/* mr R3, R31 */
		/* 8215A12Ch case   21:*/		regs.R3 = regs.R31;
		/* 8215A12Ch case   21:*/		return 0x8215A130;
		  /* 8215A130h */ case   22:  		/* stw R11, <#[R1 + 140]> */
		/* 8215A130h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8215A130h case   22:*/		return 0x8215A134;
		  /* 8215A134h */ case   23:  		/* bl -3124 */
		/* 8215A134h case   23:*/		regs.LR = 0x8215A138; return 0x82159500;
		/* 8215A134h case   23:*/		return 0x8215A138;
		  /* 8215A138h */ case   24:  		/* lis R11, -32252 */
		/* 8215A138h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215A138h case   24:*/		return 0x8215A13C;
		  /* 8215A13Ch */ case   25:  		/* lis R10, -32256 */
		/* 8215A13Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8215A13Ch case   25:*/		return 0x8215A140;
		  /* 8215A140h */ case   26:  		/* stw R30, <#[R1 + 124]> */
		/* 8215A140h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215A140h case   26:*/		return 0x8215A144;
		  /* 8215A144h */ case   27:  		/* lis R9, -32252 */
		/* 8215A144h case   27:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215A144h case   27:*/		return 0x8215A148;
		  /* 8215A148h */ case   28:  		/* stw R11, <#[R1 + 128]> */
		/* 8215A148h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8215A148h case   28:*/		return 0x8215A14C;
		  /* 8215A14Ch */ case   29:  		/* stw R10, <#[R1 + 132]> */
		/* 8215A14Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 8215A14Ch case   29:*/		return 0x8215A150;
		  /* 8215A150h */ case   30:  		/* lis R11, -32252 */
		/* 8215A150h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215A150h case   30:*/		return 0x8215A154;
		  /* 8215A154h */ case   31:  		/* stw R9, <#[R1 + 120]> */
		/* 8215A154h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 8215A154h case   31:*/		return 0x8215A158;
		  /* 8215A158h */ case   32:  		/* lis R23, -32217 */
		/* 8215A158h case   32:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8227);
		/* 8215A158h case   32:*/		return 0x8215A15C;
		  /* 8215A15Ch */ case   33:  		/* lwz R10, <#[R1 + 128]> */
		/* 8215A15Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8215A15Ch case   33:*/		return 0x8215A160;
		  /* 8215A160h */ case   34:  		/* lis R20, -32252 */
		/* 8215A160h case   34:*/		cpu::op::lis<0>(regs,&regs.R20,0xFFFF8204);
		/* 8215A160h case   34:*/		return 0x8215A164;
		  /* 8215A164h */ case   35:  		/* lwz R9, <#[R1 + 132]> */
		/* 8215A164h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8215A164h case   35:*/		return 0x8215A168;
		  /* 8215A168h */ case   36:  		/* lis R19, -32252 */
		/* 8215A168h case   36:*/		cpu::op::lis<0>(regs,&regs.R19,0xFFFF8204);
		/* 8215A168h case   36:*/		return 0x8215A16C;
		  /* 8215A16Ch */ case   37:  		/* lwz R8, <#[R1 + 120]> */
		/* 8215A16Ch case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 8215A16Ch case   37:*/		return 0x8215A170;
		  /* 8215A170h */ case   38:  		/* addi R7, R23, 21640 */
		/* 8215A170h case   38:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R23,0x5488);
		/* 8215A170h case   38:*/		return 0x8215A174;
		  /* 8215A174h */ case   39:  		/* stw R11, <#[R1 + 120]> */
		/* 8215A174h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8215A174h case   39:*/		return 0x8215A178;
		  /* 8215A178h */ case   40:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8215A178h case   40:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8215A178h case   40:*/		return 0x8215A17C;
		  /* 8215A17Ch */ case   41:  		/* addi R6, R20, -22252 */
		/* 8215A17Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R20,0xFFFFA914);
		/* 8215A17Ch case   41:*/		return 0x8215A180;
		  /* 8215A180h */ case   42:  		/* stw R7, <#[R1 + 232]> */
		/* 8215A180h case   42:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000E8) );
		/* 8215A180h case   42:*/		return 0x8215A184;
		  /* 8215A184h */ case   43:  		/* addi R11, R11, -22232 */
		/* 8215A184h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFA928);
		/* 8215A184h case   43:*/		return 0x8215A188;
		  /* 8215A188h */ case   44:  		/* addi R5, R19, -22272 */
		/* 8215A188h case   44:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R19,0xFFFFA900);
		/* 8215A188h case   44:*/		return 0x8215A18C;
		  /* 8215A18Ch */ case   45:  		/* stw R6, <#[R1 + 264]> */
		/* 8215A18Ch case   45:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000108) );
		/* 8215A18Ch case   45:*/		return 0x8215A190;
		  /* 8215A190h */ case   46:  		/* lis R18, -32252 */
		/* 8215A190h case   46:*/		cpu::op::lis<0>(regs,&regs.R18,0xFFFF8204);
		/* 8215A190h case   46:*/		return 0x8215A194;
		  /* 8215A194h */ case   47:  		/* stw R11, <#[R1 + 216]> */
		/* 8215A194h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D8) );
		/* 8215A194h case   47:*/		return 0x8215A198;
		  /* 8215A198h */ case   48:  		/* lis R17, -32252 */
		/* 8215A198h case   48:*/		cpu::op::lis<0>(regs,&regs.R17,0xFFFF8204);
		/* 8215A198h case   48:*/		return 0x8215A19C;
		  /* 8215A19Ch */ case   49:  		/* stw R5, <#[R1 + 256]> */
		/* 8215A19Ch case   49:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000100) );
		/* 8215A19Ch case   49:*/		return 0x8215A1A0;
		  /* 8215A1A0h */ case   50:  		/* lis R14, -32252 */
		/* 8215A1A0h case   50:*/		cpu::op::lis<0>(regs,&regs.R14,0xFFFF8204);
		/* 8215A1A0h case   50:*/		return 0x8215A1A4;
		  /* 8215A1A4h */ case   51:  		/* addi R11, R8, -22216 */
		/* 8215A1A4h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFA938);
		/* 8215A1A4h case   51:*/		return 0x8215A1A8;
		  /* 8215A1A8h */ case   52:  		/* addi R7, R18, -22288 */
		/* 8215A1A8h case   52:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R18,0xFFFFA8F0);
		/* 8215A1A8h case   52:*/		return 0x8215A1AC;
		  /* 8215A1ACh */ case   53:  		/* stw R11, <#[R1 + 192]> */
		/* 8215A1ACh case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 8215A1ACh case   53:*/		return 0x8215A1B0;
		  /* 8215A1B0h */ case   54:  		/* addi R6, R17, -22300 */
		/* 8215A1B0h case   54:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R17,0xFFFFA8E4);
		/* 8215A1B0h case   54:*/		return 0x8215A1B4;
		  /* 8215A1B4h */ case   55:  		/* addi R5, R14, -22320 */
		/* 8215A1B4h case   55:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R14,0xFFFFA8D0);
		/* 8215A1B4h case   55:*/		return 0x8215A1B8;
		  /* 8215A1B8h */ case   56:  		/* stw R7, <#[R1 + 248]> */
		/* 8215A1B8h case   56:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000F8) );
		/* 8215A1B8h case   56:*/		return 0x8215A1BC;
		  /* 8215A1BCh */ case   57:  		/* addi R10, R10, -22208 */
		/* 8215A1BCh case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFA940);
		/* 8215A1BCh case   57:*/		return 0x8215A1C0;
		  /* 8215A1C0h */ case   58:  		/* stw R6, <#[R1 + 240]> */
		/* 8215A1C0h case   58:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000F0) );
		/* 8215A1C0h case   58:*/		return 0x8215A1C4;
		  /* 8215A1C4h */ case   59:  		/* addi R9, R9, 17860 */
		/* 8215A1C4h case   59:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x45C4);
		/* 8215A1C4h case   59:*/		return 0x8215A1C8;
		  /* 8215A1C8h */ case   60:  		/* stw R5, <#[R1 + 224]> */
		/* 8215A1C8h case   60:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000E0) );
		/* 8215A1C8h case   60:*/		return 0x8215A1CC;
		  /* 8215A1CCh */ case   61:  		/* lis R22, -32252 */
		/* 8215A1CCh case   61:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFF8204);
		/* 8215A1CCh case   61:*/		return 0x8215A1D0;
		  /* 8215A1D0h */ case   62:  		/* stw R10, <#[R1 + 208]> */
		/* 8215A1D0h case   62:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D0) );
		/* 8215A1D0h case   62:*/		return 0x8215A1D4;
		  /* 8215A1D4h */ case   63:  		/* stw R9, <#[R1 + 200]> */
		/* 8215A1D4h case   63:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000C8) );
		/* 8215A1D4h case   63:*/		return 0x8215A1D8;
		  /* 8215A1D8h */ case   64:  		/* lis R21, -32252 */
		/* 8215A1D8h case   64:*/		cpu::op::lis<0>(regs,&regs.R21,0xFFFF8204);
		/* 8215A1D8h case   64:*/		return 0x8215A1DC;
		  /* 8215A1DCh */ case   65:  		/* lis R16, -32255 */
		/* 8215A1DCh case   65:*/		cpu::op::lis<0>(regs,&regs.R16,0xFFFF8201);
		/* 8215A1DCh case   65:*/		return 0x8215A1E0;
		  /* 8215A1E0h */ case   66:  		/* lis R15, -32255 */
		/* 8215A1E0h case   66:*/		cpu::op::lis<0>(regs,&regs.R15,0xFFFF8201);
		/* 8215A1E0h case   66:*/		return 0x8215A1E4;
		  /* 8215A1E4h */ case   67:  		/* lis R24, -32255 */
		/* 8215A1E4h case   67:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8201);
		/* 8215A1E4h case   67:*/		return 0x8215A1E8;
		  /* 8215A1E8h */ case   68:  		/* lis R25, -32255 */
		/* 8215A1E8h case   68:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8201);
		/* 8215A1E8h case   68:*/		return 0x8215A1EC;
		  /* 8215A1ECh */ case   69:  		/* lis R26, -32252 */
		/* 8215A1ECh case   69:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8204);
		/* 8215A1ECh case   69:*/		return 0x8215A1F0;
		  /* 8215A1F0h */ case   70:  		/* lis R27, -32252 */
		/* 8215A1F0h case   70:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 8215A1F0h case   70:*/		return 0x8215A1F4;
		  /* 8215A1F4h */ case   71:  		/* lis R28, -32255 */
		/* 8215A1F4h case   71:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8201);
		/* 8215A1F4h case   71:*/		return 0x8215A1F8;
		  /* 8215A1F8h */ case   72:  		/* lis R29, -32255 */
		/* 8215A1F8h case   72:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8201);
		/* 8215A1F8h case   72:*/		return 0x8215A1FC;
		  /* 8215A1FCh */ case   73:  		/* lis R30, -32252 */
		/* 8215A1FCh case   73:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8204);
		/* 8215A1FCh case   73:*/		return 0x8215A200;
		  /* 8215A200h */ case   74:  		/* lis R3, -32255 */
		/* 8215A200h case   74:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8201);
		/* 8215A200h case   74:*/		return 0x8215A204;
		  /* 8215A204h */ case   75:  		/* lis R4, -32252 */
		/* 8215A204h case   75:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 8215A204h case   75:*/		return 0x8215A208;
		  /* 8215A208h */ case   76:  		/* lis R5, -32252 */
		/* 8215A208h case   76:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 8215A208h case   76:*/		return 0x8215A20C;
		  /* 8215A20Ch */ case   77:  		/* lis R6, -32252 */
		/* 8215A20Ch case   77:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 8215A20Ch case   77:*/		return 0x8215A210;
		  /* 8215A210h */ case   78:  		/* lis R7, -32252 */
		/* 8215A210h case   78:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8215A210h case   78:*/		return 0x8215A214;
		  /* 8215A214h */ case   79:  		/* lis R8, -32252 */
		/* 8215A214h case   79:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8215A214h case   79:*/		return 0x8215A218;
		  /* 8215A218h */ case   80:  		/* lis R9, -32252 */
		/* 8215A218h case   80:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215A218h case   80:*/		return 0x8215A21C;
		  /* 8215A21Ch */ case   81:  		/* lis R10, -32252 */
		/* 8215A21Ch case   81:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215A21Ch case   81:*/		return 0x8215A220;
		  /* 8215A220h */ case   82:  		/* lis R11, -32252 */
		/* 8215A220h case   82:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215A220h case   82:*/		return 0x8215A224;
		  /* 8215A224h */ case   83:  		/* addi R23, R22, -23704 */
		/* 8215A224h case   83:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R22,0xFFFFA368);
		/* 8215A224h case   83:*/		return 0x8215A228;
		  /* 8215A228h */ case   84:  		/* addi R30, R30, -22364 */
		/* 8215A228h case   84:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFA8A4);
		/* 8215A228h case   84:*/		return 0x8215A22C;
		  /* 8215A22Ch */ case   85:  		/* addi R28, R28, 12892 */
		/* 8215A22Ch case   85:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x325C);
		/* 8215A22Ch case   85:*/		return 0x8215A230;
		  /* 8215A230h */ case   86:  		/* addi R3, R3, 12904 */
		/* 8215A230h case   86:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x3268);
		/* 8215A230h case   86:*/		return 0x8215A234;
		  /* 8215A234h */ case   87:  		/* stw R30, <#[R1 + 148]> */
		/* 8215A234h case   87:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000094) );
		/* 8215A234h case   87:*/		return 0x8215A238;
		  /* 8215A238h */ case   88:  		/* addi R4, R4, -22376 */
		/* 8215A238h case   88:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0xFFFFA898);
		/* 8215A238h case   88:*/		return 0x8215A23C;
		  /* 8215A23Ch */ case   89:  		/* stw R28, <#[R1 + 160]> */
		/* 8215A23Ch case   89:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000A0) );
		/* 8215A23Ch case   89:*/		return 0x8215A240;
		  /* 8215A240h */ case   90:  		/* addi R5, R5, -22400 */
		/* 8215A240h case   90:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFA880);
		/* 8215A240h case   90:*/		return 0x8215A244;
		  /* 8215A244h */ case   91:  		/* stw R3, <#[R1 + 204]> */
		/* 8215A244h case   91:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000CC) );
		/* 8215A244h case   91:*/		return 0x8215A248;
		  /* 8215A248h */ case   92:  		/* addi R6, R6, -22420 */
		/* 8215A248h case   92:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFA86C);
		/* 8215A248h case   92:*/		return 0x8215A24C;
		  /* 8215A24Ch */ case   93:  		/* stw R4, <#[R1 + 260]> */
		/* 8215A24Ch case   93:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000104) );
		/* 8215A24Ch case   93:*/		return 0x8215A250;
		  /* 8215A250h */ case   94:  		/* addi R7, R7, -22440 */
		/* 8215A250h case   94:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFA858);
		/* 8215A250h case   94:*/		return 0x8215A254;
		  /* 8215A254h */ case   95:  		/* stw R5, <#[R1 + 196]> */
		/* 8215A254h case   95:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000C4) );
		/* 8215A254h case   95:*/		return 0x8215A258;
		  /* 8215A258h */ case   96:  		/* addi R8, R8, -22460 */
		/* 8215A258h case   96:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFA844);
		/* 8215A258h case   96:*/		return 0x8215A25C;
		  /* 8215A25Ch */ case   97:  		/* stw R6, <#[R1 + 228]> */
		/* 8215A25Ch case   97:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000E4) );
		/* 8215A25Ch case   97:*/		return 0x8215A260;
		  /* 8215A260h */ case   98:  		/* addi R9, R9, -22484 */
		/* 8215A260h case   98:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFA82C);
		/* 8215A260h case   98:*/		return 0x8215A264;
		  /* 8215A264h */ case   99:  		/* stw R7, <#[R1 + 144]> */
		/* 8215A264h case   99:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 8215A264h case   99:*/		return 0x8215A268;
		  /* 8215A268h */ case  100:  		/* addi R17, R10, -22496 */
		/* 8215A268h case  100:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0xFFFFA820);
		/* 8215A268h case  100:*/		return 0x8215A26C;
		  /* 8215A26Ch */ case  101:  		/* stw R8, <#[R1 + 244]> */
		/* 8215A26Ch case  101:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000F4) );
		/* 8215A26Ch case  101:*/		return 0x8215A270;
		  /* 8215A270h */ case  102:  		/* addi R19, R15, 12884 */
		/* 8215A270h case  102:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R15,0x3254);
		/* 8215A270h case  102:*/		return 0x8215A274;
		  /* 8215A274h */ case  103:  		/* stw R9, <#[R1 + 180]> */
		/* 8215A274h case  103:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B4) );
		/* 8215A274h case  103:*/		return 0x8215A278;
		  /* 8215A278h */ case  104:  		/* addi R10, R24, 5216 */
		/* 8215A278h case  104:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R24,0x1460);
		/* 8215A278h case  104:*/		return 0x8215A27C;
		  /* 8215A27Ch */ case  105:  		/* addi R14, R26, -22336 */
		/* 8215A27Ch case  105:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R26,0xFFFFA8C0);
		/* 8215A27Ch case  105:*/		return 0x8215A280;
		  /* 8215A280h */ case  106:  		/* addi R15, R11, -22516 */
		/* 8215A280h case  106:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R11,0xFFFFA80C);
		/* 8215A280h case  106:*/		return 0x8215A284;
		  /* 8215A284h */ case  107:  		/* stw R10, <#[R1 + 184]> */
		/* 8215A284h case  107:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 8215A284h case  107:*/		return 0x8215A288;
		  /* 8215A288h */ case  108:  		/* addi R27, R27, -22344 */
		/* 8215A288h case  108:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFA8B8);
		/* 8215A288h case  108:*/		return 0x8215A28C;
		  /* 8215A28Ch */ case  109:  		/* addi R29, R29, -8296 */
		/* 8215A28Ch case  109:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFDF98);
		/* 8215A28Ch case  109:*/		return 0x8215A290;
		  /* 8215A290h */ case  110:  		/* addi R30, R25, 5224 */
		/* 8215A290h case  110:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x1468);
		/* 8215A290h case  110:*/		return 0x8215A294;
		  /* 8215A294h */ case  111:  		/* stw R27, <#[R1 + 168]> */
		/* 8215A294h case  111:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000A8) );
		/* 8215A294h case  111:*/		return 0x8215A298;
		  /* 8215A298h */ case  112:  		/* lis R26, -32252 */
		/* 8215A298h case  112:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8204);
		/* 8215A298h case  112:*/		return 0x8215A29C;
		  /* 8215A29Ch */ case  113:  		/* stw R29, <#[R1 + 152]> */
		/* 8215A29Ch case  113:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000098) );
		/* 8215A29Ch case  113:*/		return 0x8215A2A0;
		  /* 8215A2A0h */ case  114:  		/* lis R28, -32252 */
		/* 8215A2A0h case  114:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 8215A2A0h case  114:*/		return 0x8215A2A4;
		  /* 8215A2A4h */ case  115:  		/* stw R30, <#[R1 + 176]> */
		/* 8215A2A4h case  115:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000B0) );
		/* 8215A2A4h case  115:*/		return 0x8215A2A8;
		  /* 8215A2A8h */ case  116:  		/* lis R3, -32252 */
		/* 8215A2A8h case  116:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 8215A2A8h case  116:*/		return 0x8215A2AC;
		  /* 8215A2ACh */ case  117:  		/* lis R4, -32252 */
		/* 8215A2ACh case  117:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 8215A2ACh case  117:*/		return 0x8215A2B0;
		  /* 8215A2B0h */ case  118:  		/* lis R5, -32252 */
		/* 8215A2B0h case  118:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 8215A2B0h case  118:*/		return 0x8215A2B4;
		  /* 8215A2B4h */ case  119:  		/* lis R6, -32255 */
		/* 8215A2B4h case  119:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 8215A2B4h case  119:*/		return 0x8215A2B8;
		  /* 8215A2B8h */ case  120:  		/* lis R7, -32252 */
		/* 8215A2B8h case  120:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8215A2B8h case  120:*/		return 0x8215A2BC;
		  /* 8215A2BCh */ case  121:  		/* lis R8, -32252 */
		/* 8215A2BCh case  121:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8215A2BCh case  121:*/		return 0x8215A2C0;
		  /* 8215A2C0h */ case  122:  		/* lis R9, -32255 */
		/* 8215A2C0h case  122:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8215A2C0h case  122:*/		return 0x8215A2C4;
		  /* 8215A2C4h */ case  123:  		/* lis R11, -32252 */
		/* 8215A2C4h case  123:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215A2C4h case  123:*/		return 0x8215A2C8;
		  /* 8215A2C8h */ case  124:  		/* lis R27, -32252 */
		/* 8215A2C8h case  124:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 8215A2C8h case  124:*/		return 0x8215A2CC;
		  /* 8215A2CCh */ case  125:  		/* lis R29, -32255 */
		/* 8215A2CCh case  125:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8201);
		/* 8215A2CCh case  125:*/		return 0x8215A2D0;
		  /* 8215A2D0h */ case  126:  		/* lis R30, -32255 */
		/* 8215A2D0h case  126:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8201);
		/* 8215A2D0h case  126:*/		return 0x8215A2D4;
		  /* 8215A2D4h */ case  127:  		/* lis R10, -32254 */
		/* 8215A2D4h case  127:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8202);
		/* 8215A2D4h case  127:*/		return 0x8215A2D8;
		  /* 8215A2D8h */ case  128:  		/* addi R26, R26, -22540 */
		/* 8215A2D8h case  128:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFA7F4);
		/* 8215A2D8h case  128:*/		return 0x8215A2DC;
		  /* 8215A2DCh */ case  129:  		/* addi R28, R28, -22564 */
		/* 8215A2DCh case  129:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFA7DC);
		/* 8215A2DCh case  129:*/		return 0x8215A2E0;
		  /* 8215A2E0h */ case  130:  		/* addi R3, R3, -22576 */
		/* 8215A2E0h case  130:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xFFFFA7D0);
		/* 8215A2E0h case  130:*/		return 0x8215A2E4;
		  /* 8215A2E4h */ case  131:  		/* stw R26, <#[R1 + 220]> */
		/* 8215A2E4h case  131:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x000000DC) );
		/* 8215A2E4h case  131:*/		return 0x8215A2E8;
		  /* 8215A2E8h */ case  132:  		/* addi R4, R4, -22584 */
		/* 8215A2E8h case  132:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0xFFFFA7C8);
		/* 8215A2E8h case  132:*/		return 0x8215A2EC;
		  /* 8215A2ECh */ case  133:  		/* stw R28, <#[R1 + 172]> */
		/* 8215A2ECh case  133:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000000AC) );
		/* 8215A2ECh case  133:*/		return 0x8215A2F0;
		  /* 8215A2F0h */ case  134:  		/* addi R5, R5, -22596 */
		/* 8215A2F0h case  134:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFA7BC);
		/* 8215A2F0h case  134:*/		return 0x8215A2F4;
		  /* 8215A2F4h */ case  135:  		/* stw R3, <#[R1 + 252]> */
		/* 8215A2F4h case  135:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000FC) );
		/* 8215A2F4h case  135:*/		return 0x8215A2F8;
		  /* 8215A2F8h */ case  136:  		/* addi R6, R6, 12920 */
		/* 8215A2F8h case  136:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x3278);
		/* 8215A2F8h case  136:*/		return 0x8215A2FC;
		  /* 8215A2FCh */ case  137:  		/* stw R4, <#[R1 + 164]> */
		/* 8215A2FCh case  137:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000000A4) );
		/* 8215A2FCh case  137:*/		return 0x8215A300;
		  /* 8215A300h */ case  138:  		/* addi R7, R7, -22652 */
		/* 8215A300h case  138:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFA784);
		/* 8215A300h case  138:*/		return 0x8215A304;
		  /* 8215A304h */ case  139:  		/* stw R5, <#[R1 + 212]> */
		/* 8215A304h case  139:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000D4) );
		/* 8215A304h case  139:*/		return 0x8215A308;
		  /* 8215A308h */ case  140:  		/* addi R8, R8, -22664 */
		/* 8215A308h case  140:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFA778);
		/* 8215A308h case  140:*/		return 0x8215A30C;
		  /* 8215A30Ch */ case  141:  		/* stw R6, <#[R1 + 156]> */
		/* 8215A30Ch case  141:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000009C) );
		/* 8215A30Ch case  141:*/		return 0x8215A310;
		  /* 8215A310h */ case  142:  		/* addi R9, R9, -8160 */
		/* 8215A310h case  142:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFE020);
		/* 8215A310h case  142:*/		return 0x8215A314;
		  /* 8215A314h */ case  143:  		/* stw R7, <#[R1 + 236]> */
		/* 8215A314h case  143:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000EC) );
		/* 8215A314h case  143:*/		return 0x8215A318;
		  /* 8215A318h */ case  144:  		/* addi R11, R11, -22672 */
		/* 8215A318h case  144:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFA770);
		/* 8215A318h case  144:*/		return 0x8215A31C;
		  /* 8215A31Ch */ case  145:  		/* stw R8, <#[R1 + 188]> */
		/* 8215A31Ch case  145:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000BC) );
		/* 8215A31Ch case  145:*/		return 0x8215A320;
		  /* 8215A320h */ case  146:  		/* addi R20, R16, -10432 */
		/* 8215A320h case  146:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R16,0xFFFFD740);
		/* 8215A320h case  146:*/		return 0x8215A324;
		  /* 8215A324h */ case  147:  		/* stw R9, <#[R1 + 128]> */
		/* 8215A324h case  147:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 8215A324h case  147:*/		return 0x8215A328;
		  /* 8215A328h */ case  148:  		/* addi R21, R21, -22332 */
		/* 8215A328h case  148:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0xFFFFA8C4);
		/* 8215A328h case  148:*/		return 0x8215A32C;
		  /* 8215A32Ch */ case  149:  		/* stw R11, <#[R1 + 132]> */
		/* 8215A32Ch case  149:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 8215A32Ch case  149:*/		return 0x8215A330;
		  /* 8215A330h */ case  150:  		/* addi R18, R27, -22688 */
		/* 8215A330h case  150:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R27,0xFFFFA760);
		/* 8215A330h case  150:*/		return 0x8215A334;
		  /* 8215A334h */ case  151:  		/* addi R22, R29, -15864 */
		/* 8215A334h case  151:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R29,0xFFFFC208);
		/* 8215A334h case  151:*/		return 0x8215A338;
		  /* 8215A338h */ case  152:  		/* addi R16, R30, -8292 */
		/* 8215A338h case  152:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R30,0xFFFFDF9C);
		/* 8215A338h case  152:*/		return 0x8215A33C;
		  /* 8215A33Ch */ case  153:  		/* addi R24, R10, -30880 */
		/* 8215A33Ch case  153:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFF8760);
		/* 8215A33Ch case  153:*/		return 0x8215A340;
		  /* 8215A340h */ case  154:  		/* lwz R30, <#[R1 + 460]> */
		/* 8215A340h case  154:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000001CC) );
		/* 8215A340h case  154:*/		return 0x8215A344;
		  /* 8215A344h */ case  155:  		/* li R11, -1 */
		/* 8215A344h case  155:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215A344h case  155:*/		return 0x8215A348;
		  /* 8215A348h */ case  156:  		/* b 8 */
		/* 8215A348h case  156:*/		return 0x8215A350;
		/* 8215A348h case  156:*/		return 0x8215A34C;
		  /* 8215A34Ch */ case  157:  		/* lwz R11, <#[R1 + 120]> */
		/* 8215A34Ch case  157:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8215A34Ch case  157:*/		return 0x8215A350;
	}
	return 0x8215A350;
} // Block from 8215A0D8h-8215A350h (158 instructions)

//////////////////////////////////////////////////////
// Block at 8215A350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A350);
		  /* 8215A350h */ case    0:  		/* addi R11, R11, 1 */
		/* 8215A350h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215A350h case    0:*/		return 0x8215A354;
		  /* 8215A354h */ case    1:  		/* lwz R28, <#[R1 + 136]> */
		/* 8215A354h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000088) );
		/* 8215A354h case    1:*/		return 0x8215A358;
		  /* 8215A358h */ case    2:  		/* srawi R10, R11, 1 */
		/* 8215A358h case    2:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R11);
		/* 8215A358h case    2:*/		return 0x8215A35C;
		  /* 8215A35Ch */ case    3:  		/* stw R11, <#[R1 + 120]> */
		/* 8215A35Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8215A35Ch case    3:*/		return 0x8215A360;
		  /* 8215A360h */ case    4:  		/* addze R11, R10 */
		/* 8215A360h case    4:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R10);
		/* 8215A360h case    4:*/		return 0x8215A364;
		  /* 8215A364h */ case    5:  		/* cmpw CR6, R11, R28 */
		/* 8215A364h case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R28);
		/* 8215A364h case    5:*/		return 0x8215A368;
		  /* 8215A368h */ case    6:  		/* bc 12, CR6_EQ, 544 */
		/* 8215A368h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215A588;  }
		/* 8215A368h case    6:*/		return 0x8215A36C;
		  /* 8215A36Ch */ case    7:  		/* li R5, 4 */
		/* 8215A36Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8215A36Ch case    7:*/		return 0x8215A370;
		  /* 8215A370h */ case    8:  		/* li R4, 45 */
		/* 8215A370h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8215A370h case    8:*/		return 0x8215A374;
		  /* 8215A374h */ case    9:  		/* mr R3, R30 */
		/* 8215A374h case    9:*/		regs.R3 = regs.R30;
		/* 8215A374h case    9:*/		return 0x8215A378;
		  /* 8215A378h */ case   10:  		/* bl -10344 */
		/* 8215A378h case   10:*/		regs.LR = 0x8215A37C; return 0x82157B10;
		/* 8215A378h case   10:*/		return 0x8215A37C;
		  /* 8215A37Ch */ case   11:  		/* lbz R25, <#[R1 + 113]> */
		/* 8215A37Ch case   11:*/		cpu::mem::load8z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000071) );
		/* 8215A37Ch case   11:*/		return 0x8215A380;
		  /* 8215A380h */ case   12:  		/* li R26, 1 */
		/* 8215A380h case   12:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 8215A380h case   12:*/		return 0x8215A384;
		  /* 8215A384h */ case   13:  		/* mr R29, R3 */
		/* 8215A384h case   13:*/		regs.R29 = regs.R3;
		/* 8215A384h case   13:*/		return 0x8215A388;
		  /* 8215A388h */ case   14:  		/* stb R26, <#[R1 + 112]> */
		/* 8215A388h case   14:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 8215A388h case   14:*/		return 0x8215A38C;
		  /* 8215A38Ch */ case   15:  		/* cmplwi CR0, R25, 0 */
		/* 8215A38Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R25,0x00000000);
		/* 8215A38Ch case   15:*/		return 0x8215A390;
		  /* 8215A390h */ case   16:  		/* bc 12, CR0_EQ, 96 */
		/* 8215A390h case   16:*/		if ( regs.CR[0].eq ) { return 0x8215A3F0;  }
		/* 8215A390h case   16:*/		return 0x8215A394;
		  /* 8215A394h */ case   17:  		/* mr R3, R31 */
		/* 8215A394h case   17:*/		regs.R3 = regs.R31;
		/* 8215A394h case   17:*/		return 0x8215A398;
		  /* 8215A398h */ case   18:  		/* bl -3832 */
		/* 8215A398h case   18:*/		regs.LR = 0x8215A39C; return 0x821594A0;
		/* 8215A398h case   18:*/		return 0x8215A39C;
		  /* 8215A39Ch */ case   19:  		/* lwz R27, <#[R1 + 116]> */
		/* 8215A39Ch case   19:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 8215A39Ch case   19:*/		return 0x8215A3A0;
		  /* 8215A3A0h */ case   20:  		/* rlwinm R11, R27, 27, 5, 31 */
		/* 8215A3A0h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R27);
		/* 8215A3A0h case   20:*/		return 0x8215A3A4;
		  /* 8215A3A4h */ case   21:  		/* rlwinm R10, R27, 0, 27, 31 */
		/* 8215A3A4h case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R27);
		/* 8215A3A4h case   21:*/		return 0x8215A3A8;
		  /* 8215A3A8h */ case   22:  		/* addi R11, R11, 4 */
		/* 8215A3A8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215A3A8h case   22:*/		return 0x8215A3AC;
		  /* 8215A3ACh */ case   23:  		/* slw R10, R26, R10 */
		/* 8215A3ACh case   23:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 8215A3ACh case   23:*/		return 0x8215A3B0;
		  /* 8215A3B0h */ case   24:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8215A3B0h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8215A3B0h case   24:*/		return 0x8215A3B4;
		  /* 8215A3B4h */ case   25:  		/* lwzx R11, <#[R11 + R31]> */
		/* 8215A3B4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8215A3B4h case   25:*/		return 0x8215A3B8;
		  /* 8215A3B8h */ case   26:  		/* and. R11, R10, R11 */
		/* 8215A3B8h case   26:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8215A3B8h case   26:*/		return 0x8215A3BC;
		  /* 8215A3BCh */ case   27:  		/* bc 12, CR0_EQ, 56 */
		/* 8215A3BCh case   27:*/		if ( regs.CR[0].eq ) { return 0x8215A3F4;  }
		/* 8215A3BCh case   27:*/		return 0x8215A3C0;
		  /* 8215A3C0h */ case   28:  		/* srawi R11, R27, 1 */
		/* 8215A3C0h case   28:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R27);
		/* 8215A3C0h case   28:*/		return 0x8215A3C4;
		  /* 8215A3C4h */ case   29:  		/* lwz R4, <#[R1 + 132]> */
		/* 8215A3C4h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 8215A3C4h case   29:*/		return 0x8215A3C8;
		  /* 8215A3C8h */ case   30:  		/* mr R3, R31 */
		/* 8215A3C8h case   30:*/		regs.R3 = regs.R31;
		/* 8215A3C8h case   30:*/		return 0x8215A3CC;
		  /* 8215A3CCh */ case   31:  		/* addze R11, R11 */
		/* 8215A3CCh case   31:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8215A3CCh case   31:*/		return 0x8215A3D0;
		  /* 8215A3D0h */ case   32:  		/* srawi R10, R27, 1 */
		/* 8215A3D0h case   32:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R27);
		/* 8215A3D0h case   32:*/		return 0x8215A3D4;
		  /* 8215A3D4h */ case   33:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8215A3D4h case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8215A3D4h case   33:*/		return 0x8215A3D8;
		  /* 8215A3D8h */ case   34:  		/* addze R5, R10 */
		/* 8215A3D8h case   34:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R10);
		/* 8215A3D8h case   34:*/		return 0x8215A3DC;
		  /* 8215A3DCh */ case   35:  		/* subf R6, R11, R27 */
		/* 8215A3DCh case   35:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R27);
		/* 8215A3DCh case   35:*/		return 0x8215A3E0;
		  /* 8215A3E0h */ case   36:  		/* bl -9400 */
		/* 8215A3E0h case   36:*/		regs.LR = 0x8215A3E4; return 0x82157F28;
		/* 8215A3E0h case   36:*/		return 0x8215A3E4;
		  /* 8215A3E4h */ case   37:  		/* mr R3, R31 */
		/* 8215A3E4h case   37:*/		regs.R3 = regs.R31;
		/* 8215A3E4h case   37:*/		return 0x8215A3E8;
		  /* 8215A3E8h */ case   38:  		/* bl -3912 */
		/* 8215A3E8h case   38:*/		regs.LR = 0x8215A3EC; return 0x821594A0;
		/* 8215A3E8h case   38:*/		return 0x8215A3EC;
		  /* 8215A3ECh */ case   39:  		/* b 8 */
		/* 8215A3ECh case   39:*/		return 0x8215A3F4;
		/* 8215A3ECh case   39:*/		return 0x8215A3F0;
	}
	return 0x8215A3F0;
} // Block from 8215A350h-8215A3F0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8215A3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A3F0);
		  /* 8215A3F0h */ case    0:  		/* lwz R27, <#[R1 + 116]> */
		/* 8215A3F0h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 8215A3F0h case    0:*/		return 0x8215A3F4;
	}
	return 0x8215A3F4;
} // Block from 8215A3F0h-8215A3F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215A3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A3F4);
		  /* 8215A3F4h */ case    0:  		/* cmplwi CR6, R29, 12 */
		/* 8215A3F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000000C);
		/* 8215A3F4h case    0:*/		return 0x8215A3F8;
		  /* 8215A3F8h */ case    1:  		/* bc 12, CR6_GT, 1828 */
		/* 8215A3F8h case    1:*/		if ( regs.CR[6].gt ) { return 0x8215AB1C;  }
		/* 8215A3F8h case    1:*/		return 0x8215A3FC;
		  /* 8215A3FCh */ case    2:  		/* lis R12, -32252 */
		/* 8215A3FCh case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 8215A3FCh case    2:*/		return 0x8215A400;
		  /* 8215A400h */ case    3:  		/* rlwinm R0, R29, 1, 0, 30 */
		/* 8215A400h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R29);
		/* 8215A400h case    3:*/		return 0x8215A404;
		  /* 8215A404h */ case    4:  		/* addi R12, R12, -23568 */
		/* 8215A404h case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA3F0);
		/* 8215A404h case    4:*/		return 0x8215A408;
		  /* 8215A408h */ case    5:  		/* lhzx R0, <#[R12 + R0]> */
		/* 8215A408h case    5:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 8215A408h case    5:*/		return 0x8215A40C;
		  /* 8215A40Ch */ case    6:  		/* lis R12, -32234 */
		/* 8215A40Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8216);
		/* 8215A40Ch case    6:*/		return 0x8215A410;
		  /* 8215A410h */ case    7:  		/* addi R12, R12, -23516 */
		/* 8215A410h case    7:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFA424);
		/* 8215A410h case    7:*/		return 0x8215A414;
		  /* 8215A414h */ case    8:  		/* ori R0, R0, 0 */
		/* 8215A414h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8215A414h case    8:*/		return 0x8215A418;
		  /* 8215A418h */ case    9:  		/* add R12, R12, R0 */
		/* 8215A418h case    9:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8215A418h case    9:*/		return 0x8215A41C;
		  /* 8215A41Ch */ case   10:  		/* mtspr CTR, R12 */
		/* 8215A41Ch case   10:*/		regs.CTR = regs.R12;
		/* 8215A41Ch case   10:*/		return 0x8215A420;
		  /* 8215A420h */ case   11:  		/* bcctr 20, CR0_LT */
		/* 8215A420h case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8215A420h case   11:*/		return 0x8215A424;
		  /* 8215A424h */ case   12:  		/* cmplwi CR6, R25, 0 */
		/* 8215A424h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A424h case   12:*/		return 0x8215A428;
		  /* 8215A428h */ case   13:  		/* bc 12, CR6_EQ, 328 */
		/* 8215A428h case   13:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A428h case   13:*/		return 0x8215A42C;
		  /* 8215A42Ch */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215A42Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215A42Ch case   14:*/		return 0x8215A430;
		  /* 8215A430h */ case   15:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8215A430h case   15:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8215A430h case   15:*/		return 0x8215A434;
		  /* 8215A434h */ case   16:  		/* bc 12, CR0_EQ, 316 */
		/* 8215A434h case   16:*/		if ( regs.CR[0].eq ) { return 0x8215A570;  }
		/* 8215A434h case   16:*/		return 0x8215A438;
		  /* 8215A438h */ case   17:  		/* mr R4, R24 */
		/* 8215A438h case   17:*/		regs.R4 = regs.R24;
		/* 8215A438h case   17:*/		return 0x8215A43C;
		  /* 8215A43Ch */ case   18:  		/* mr R3, R31 */
		/* 8215A43Ch case   18:*/		regs.R3 = regs.R31;
		/* 8215A43Ch case   18:*/		return 0x8215A440;
		  /* 8215A440h */ case   19:  		/* bl -9496 */
		/* 8215A440h case   19:*/		regs.LR = 0x8215A444; return 0x82157F28;
		/* 8215A440h case   19:*/		return 0x8215A444;
		  /* 8215A444h */ case   20:  		/* lwz R4, <#[R1 + 128]> */
		/* 8215A444h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 8215A444h case   20:*/		return 0x8215A448;
		  /* 8215A448h */ case   21:  		/* mr R3, R31 */
		/* 8215A448h case   21:*/		regs.R3 = regs.R31;
		/* 8215A448h case   21:*/		return 0x8215A44C;
		  /* 8215A44Ch */ case   22:  		/* bl -7220 */
		/* 8215A44Ch case   22:*/		regs.LR = 0x8215A450; return 0x82158818;
		/* 8215A44Ch case   22:*/		return 0x8215A450;
		  /* 8215A450h */ case   23:  		/* b 288 */
		/* 8215A450h case   23:*/		return 0x8215A570;
		/* 8215A450h case   23:*/		return 0x8215A454;
		  /* 8215A454h */ case   24:  		/* cmplwi CR6, R25, 0 */
		/* 8215A454h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A454h case   24:*/		return 0x8215A458;
		  /* 8215A458h */ case   25:  		/* bc 12, CR6_EQ, 40 */
		/* 8215A458h case   25:*/		if ( regs.CR[6].eq ) { return 0x8215A480;  }
		/* 8215A458h case   25:*/		return 0x8215A45C;
		  /* 8215A45Ch */ case   26:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215A45Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215A45Ch case   26:*/		return 0x8215A460;
		  /* 8215A460h */ case   27:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8215A460h case   27:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8215A460h case   27:*/		return 0x8215A464;
		  /* 8215A464h */ case   28:  		/* bc 12, CR0_EQ, 28 */
		/* 8215A464h case   28:*/		if ( regs.CR[0].eq ) { return 0x8215A480;  }
		/* 8215A464h case   28:*/		return 0x8215A468;
		  /* 8215A468h */ case   29:  		/* mr R4, R24 */
		/* 8215A468h case   29:*/		regs.R4 = regs.R24;
		/* 8215A468h case   29:*/		return 0x8215A46C;
		  /* 8215A46Ch */ case   30:  		/* mr R3, R31 */
		/* 8215A46Ch case   30:*/		regs.R3 = regs.R31;
		/* 8215A46Ch case   30:*/		return 0x8215A470;
		  /* 8215A470h */ case   31:  		/* bl -9544 */
		/* 8215A470h case   31:*/		regs.LR = 0x8215A474; return 0x82157F28;
		/* 8215A470h case   31:*/		return 0x8215A474;
		  /* 8215A474h */ case   32:  		/* mr R3, R31 */
		/* 8215A474h case   32:*/		regs.R3 = regs.R31;
		/* 8215A474h case   32:*/		return 0x8215A478;
		  /* 8215A478h */ case   33:  		/* lwz R4, <#[R1 + 188]> */
		/* 8215A478h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000BC) );
		/* 8215A478h case   33:*/		return 0x8215A47C;
		  /* 8215A47Ch */ case   34:  		/* bl -9556 */
		/* 8215A47Ch case   34:*/		regs.LR = 0x8215A480; return 0x82157F28;
		/* 8215A47Ch case   34:*/		return 0x8215A480;
	}
	return 0x8215A480;
} // Block from 8215A3F4h-8215A480h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8215A480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A480);
		  /* 8215A480h */ case    0:  		/* li R5, 12 */
		/* 8215A480h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8215A480h case    0:*/		return 0x8215A484;
		  /* 8215A484h */ case    1:  		/* li R4, 1 */
		/* 8215A484h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215A484h case    1:*/		return 0x8215A488;
		  /* 8215A488h */ case    2:  		/* mr R3, R30 */
		/* 8215A488h case    2:*/		regs.R3 = regs.R30;
		/* 8215A488h case    2:*/		return 0x8215A48C;
		  /* 8215A48Ch */ case    3:  		/* bl -10620 */
		/* 8215A48Ch case    3:*/		regs.LR = 0x8215A490; return 0x82157B10;
		/* 8215A48Ch case    3:*/		return 0x8215A490;
		  /* 8215A490h */ case    4:  		/* mr R29, R3 */
		/* 8215A490h case    4:*/		regs.R29 = regs.R3;
		/* 8215A490h case    4:*/		return 0x8215A494;
		  /* 8215A494h */ case    5:  		/* cmpwi CR6, R28, -1 */
		/* 8215A494h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0xFFFFFFFF);
		/* 8215A494h case    5:*/		return 0x8215A498;
		  /* 8215A498h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8215A498h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215A4A0;  }
		/* 8215A498h case    6:*/		return 0x8215A49C;
		  /* 8215A49Ch */ case    7:  		/* stw R3, <#[R1 + 136]> */
		/* 8215A49Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 8215A49Ch case    7:*/		return 0x8215A4A0;
	}
	return 0x8215A4A0;
} // Block from 8215A480h-8215A4A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215A4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A4A0);
		  /* 8215A4A0h */ case    0:  		/* li R5, 4 */
		/* 8215A4A0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8215A4A0h case    0:*/		return 0x8215A4A4;
		  /* 8215A4A4h */ case    1:  		/* li R4, 13 */
		/* 8215A4A4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8215A4A4h case    1:*/		return 0x8215A4A8;
		  /* 8215A4A8h */ case    2:  		/* mr R3, R30 */
		/* 8215A4A8h case    2:*/		regs.R3 = regs.R30;
		/* 8215A4A8h case    2:*/		return 0x8215A4AC;
		  /* 8215A4ACh */ case    3:  		/* bl -10652 */
		/* 8215A4ACh case    3:*/		regs.LR = 0x8215A4B0; return 0x82157B10;
		/* 8215A4ACh case    3:*/		return 0x8215A4B0;
		  /* 8215A4B0h */ case    4:  		/* mr R28, R3 */
		/* 8215A4B0h case    4:*/		regs.R28 = regs.R3;
		/* 8215A4B0h case    4:*/		return 0x8215A4B4;
		  /* 8215A4B4h */ case    5:  		/* li R5, 12 */
		/* 8215A4B4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8215A4B4h case    5:*/		return 0x8215A4B8;
		  /* 8215A4B8h */ case    6:  		/* li R4, 17 */
		/* 8215A4B8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 8215A4B8h case    6:*/		return 0x8215A4BC;
		  /* 8215A4BCh */ case    7:  		/* mr R3, R30 */
		/* 8215A4BCh case    7:*/		regs.R3 = regs.R30;
		/* 8215A4BCh case    7:*/		return 0x8215A4C0;
		  /* 8215A4C0h */ case    8:  		/* bl -10672 */
		/* 8215A4C0h case    8:*/		regs.LR = 0x8215A4C4; return 0x82157B10;
		/* 8215A4C0h case    8:*/		return 0x8215A4C4;
		  /* 8215A4C4h */ case    9:  		/* mr R27, R3 */
		/* 8215A4C4h case    9:*/		regs.R27 = regs.R3;
		/* 8215A4C4h case    9:*/		return 0x8215A4C8;
		  /* 8215A4C8h */ case   10:  		/* li R5, 6 */
		/* 8215A4C8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8215A4C8h case   10:*/		return 0x8215A4CC;
		  /* 8215A4CCh */ case   11:  		/* li R4, 29 */
		/* 8215A4CCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 8215A4CCh case   11:*/		return 0x8215A4D0;
		  /* 8215A4D0h */ case   12:  		/* mr R3, R30 */
		/* 8215A4D0h case   12:*/		regs.R3 = regs.R30;
		/* 8215A4D0h case   12:*/		return 0x8215A4D4;
		  /* 8215A4D4h */ case   13:  		/* bl -10692 */
		/* 8215A4D4h case   13:*/		regs.LR = 0x8215A4D8; return 0x82157B10;
		/* 8215A4D4h case   13:*/		return 0x8215A4D8;
		  /* 8215A4D8h */ case   14:  		/* mr R26, R3 */
		/* 8215A4D8h case   14:*/		regs.R26 = regs.R3;
		/* 8215A4D8h case   14:*/		return 0x8215A4DC;
		  /* 8215A4DCh */ case   15:  		/* li R5, 9 */
		/* 8215A4DCh case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8215A4DCh case   15:*/		return 0x8215A4E0;
		  /* 8215A4E0h */ case   16:  		/* li R4, 35 */
		/* 8215A4E0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8215A4E0h case   16:*/		return 0x8215A4E4;
		  /* 8215A4E4h */ case   17:  		/* mr R3, R30 */
		/* 8215A4E4h case   17:*/		regs.R3 = regs.R30;
		/* 8215A4E4h case   17:*/		return 0x8215A4E8;
		  /* 8215A4E8h */ case   18:  		/* bl -10712 */
		/* 8215A4E8h case   18:*/		regs.LR = 0x8215A4EC; return 0x82157B10;
		/* 8215A4E8h case   18:*/		return 0x8215A4EC;
		  /* 8215A4ECh */ case   19:  		/* li R5, 1 */
		/* 8215A4ECh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A4ECh case   19:*/		return 0x8215A4F0;
		  /* 8215A4F0h */ case   20:  		/* li R4, 44 */
		/* 8215A4F0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8215A4F0h case   20:*/		return 0x8215A4F4;
		  /* 8215A4F4h */ case   21:  		/* mr R3, R30 */
		/* 8215A4F4h case   21:*/		regs.R3 = regs.R30;
		/* 8215A4F4h case   21:*/		return 0x8215A4F8;
		  /* 8215A4F8h */ case   22:  		/* bl -10728 */
		/* 8215A4F8h case   22:*/		regs.LR = 0x8215A4FC; return 0x82157B10;
		/* 8215A4F8h case   22:*/		return 0x8215A4FC;
		  /* 8215A4FCh */ case   23:  		/* lwz R11, <#[R1 + 124]> */
		/* 8215A4FCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215A4FCh case   23:*/		return 0x8215A500;
		  /* 8215A500h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 8215A500h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215A500h case   24:*/		return 0x8215A504;
		  /* 8215A504h */ case   25:  		/* bc 12, CR6_EQ, 64 */
		/* 8215A504h case   25:*/		if ( regs.CR[6].eq ) { return 0x8215A544;  }
		/* 8215A504h case   25:*/		return 0x8215A508;
		  /* 8215A508h */ case   26:  		/* lwz R11, <#[R1 + 140]> */
		/* 8215A508h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8215A508h case   26:*/		return 0x8215A50C;
		  /* 8215A50Ch */ case   27:  		/* cmpw CR6, R29, R11 */
		/* 8215A50Ch case   27:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R11);
		/* 8215A50Ch case   27:*/		return 0x8215A510;
		  /* 8215A510h */ case   28:  		/* bc 4, CR6_GT, 52 */
		/* 8215A510h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8215A544;  }
		/* 8215A510h case   28:*/		return 0x8215A514;
		  /* 8215A514h */ case   29:  		/* lwz R10, <#[R1 + 460]> */
		/* 8215A514h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001CC) );
		/* 8215A514h case   29:*/		return 0x8215A518;
		  /* 8215A518h */ case   30:  		/* mulli R11, R29, 12 */
		/* 8215A518h case   30:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R29,0xC);
		/* 8215A518h case   30:*/		return 0x8215A51C;
		  /* 8215A51Ch */ case   31:  		/* mr R8, R26 */
		/* 8215A51Ch case   31:*/		regs.R8 = regs.R26;
		/* 8215A51Ch case   31:*/		return 0x8215A520;
		  /* 8215A520h */ case   32:  		/* mr R7, R27 */
		/* 8215A520h case   32:*/		regs.R7 = regs.R27;
		/* 8215A520h case   32:*/		return 0x8215A524;
		  /* 8215A524h */ case   33:  		/* mr R6, R28 */
		/* 8215A524h case   33:*/		regs.R6 = regs.R28;
		/* 8215A524h case   33:*/		return 0x8215A528;
		  /* 8215A528h */ case   34:  		/* add R5, R11, R10 */
		/* 8215A528h case   34:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 8215A528h case   34:*/		return 0x8215A52C;
		  /* 8215A52Ch */ case   35:  		/* mr R4, R29 */
		/* 8215A52Ch case   35:*/		regs.R4 = regs.R29;
		/* 8215A52Ch case   35:*/		return 0x8215A530;
		  /* 8215A530h */ case   36:  		/* mr R3, R31 */
		/* 8215A530h case   36:*/		regs.R3 = regs.R31;
		/* 8215A530h case   36:*/		return 0x8215A534;
		  /* 8215A534h */ case   37:  		/* bl -1636 */
		/* 8215A534h case   37:*/		regs.LR = 0x8215A538; return 0x82159ED0;
		/* 8215A534h case   37:*/		return 0x8215A538;
		  /* 8215A538h */ case   38:  		/* add R11, R28, R29 */
		/* 8215A538h case   38:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R29);
		/* 8215A538h case   38:*/		return 0x8215A53C;
		  /* 8215A53Ch */ case   39:  		/* addi R11, R11, -1 */
		/* 8215A53Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215A53Ch case   39:*/		return 0x8215A540;
		  /* 8215A540h */ case   40:  		/* stw R11, <#[R1 + 140]> */
		/* 8215A540h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8215A540h case   40:*/		return 0x8215A544;
	}
	return 0x8215A544;
} // Block from 8215A4A0h-8215A544h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8215A544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A544);
		  /* 8215A544h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8215A544h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A544h case    0:*/		return 0x8215A548;
		  /* 8215A548h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8215A548h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215A56C;  }
		/* 8215A548h case    1:*/		return 0x8215A54C;
		  /* 8215A54Ch */ case    2:  		/* add R11, R28, R29 */
		/* 8215A54Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R29);
		/* 8215A54Ch case    2:*/		return 0x8215A550;
		  /* 8215A550h */ case    3:  		/* lwz R5, <#[R1 + 468]> */
		/* 8215A550h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001D4) );
		/* 8215A550h case    3:*/		return 0x8215A554;
		  /* 8215A554h */ case    4:  		/* mulli R6, R11, 3 */
		/* 8215A554h case    4:*/		cpu::op::mulli<0>(regs,&regs.R6,regs.R11,0x3);
		/* 8215A554h case    4:*/		return 0x8215A558;
		  /* 8215A558h */ case    5:  		/* cmplw CR6, R6, R5 */
		/* 8215A558h case    5:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R5);
		/* 8215A558h case    5:*/		return 0x8215A55C;
		  /* 8215A55Ch */ case    6:  		/* bc 4, CR6_GT, 16 */
		/* 8215A55Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x8215A56C;  }
		/* 8215A55Ch case    6:*/		return 0x8215A560;
		  /* 8215A560h */ case    7:  		/* mr R3, R31 */
		/* 8215A560h case    7:*/		regs.R3 = regs.R31;
		/* 8215A560h case    7:*/		return 0x8215A564;
		  /* 8215A564h */ case    8:  		/* lwz R4, <#[R1 + 236]> */
		/* 8215A564h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000EC) );
		/* 8215A564h case    8:*/		return 0x8215A568;
		  /* 8215A568h */ case    9:  		/* bl -9792 */
		/* 8215A568h case    9:*/		regs.LR = 0x8215A56C; return 0x82157F28;
		/* 8215A568h case    9:*/		return 0x8215A56C;
	}
	return 0x8215A56C;
} // Block from 8215A544h-8215A56Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215A56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A56C);
		  /* 8215A56Ch */ case    0:  		/* lwz R27, <#[R1 + 116]> */
		/* 8215A56Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000074) );
		/* 8215A56Ch case    0:*/		return 0x8215A570;
	}
	return 0x8215A570;
} // Block from 8215A56Ch-8215A570h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215A570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A570);
		  /* 8215A570h */ case    0:  		/* lbz R11, <#[R1 + 112]> */
		/* 8215A570h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8215A570h case    0:*/		return 0x8215A574;
		  /* 8215A574h */ case    1:  		/* addi R10, R27, 1 */
		/* 8215A574h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x1);
		/* 8215A574h case    1:*/		return 0x8215A578;
		  /* 8215A578h */ case    2:  		/* addi R30, R30, 6 */
		/* 8215A578h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6);
		/* 8215A578h case    2:*/		return 0x8215A57C;
		  /* 8215A57Ch */ case    3:  		/* stw R10, <#[R1 + 116]> */
		/* 8215A57Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 8215A57Ch case    3:*/		return 0x8215A580;
		  /* 8215A580h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8215A580h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8215A580h case    4:*/		return 0x8215A584;
		  /* 8215A584h */ case    5:  		/* bc 4, CR0_EQ, -568 */
		/* 8215A584h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215A34C;  }
		/* 8215A584h case    5:*/		return 0x8215A588;
	}
	return 0x8215A588;
} // Block from 8215A570h-8215A588h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215A588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A588);
		  /* 8215A588h */ case    0:  		/* lwz R10, <#[R1 + 124]> */
		/* 8215A588h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215A588h case    0:*/		return 0x8215A58C;
		  /* 8215A58Ch */ case    1:  		/* lbz R11, <#[R1 + 113]> */
		/* 8215A58Ch case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000071) );
		/* 8215A58Ch case    1:*/		return 0x8215A590;
		  /* 8215A590h */ case    2:  		/* cntlzw R10, R10 */
		/* 8215A590h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8215A590h case    2:*/		return 0x8215A594;
		  /* 8215A594h */ case    3:  		/* cntlzw R9, R11 */
		/* 8215A594h case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R11);
		/* 8215A594h case    3:*/		return 0x8215A598;
		  /* 8215A598h */ case    4:  		/* rlwinm. R11, R10, 27, 31, 31 */
		/* 8215A598h case    4:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R10);
		/* 8215A598h case    4:*/		return 0x8215A59C;
		  /* 8215A59Ch */ case    5:  		/* rlwinm R10, R9, 27, 31, 31 */
		/* 8215A59Ch case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R9);
		/* 8215A59Ch case    5:*/		return 0x8215A5A0;
		  /* 8215A5A0h */ case    6:  		/* stw R11, <#[R1 + 124]> */
		/* 8215A5A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215A5A0h case    6:*/		return 0x8215A5A4;
		  /* 8215A5A4h */ case    7:  		/* stb R10, <#[R1 + 113]> */
		/* 8215A5A4h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000071) );
		/* 8215A5A4h case    7:*/		return 0x8215A5A8;
		  /* 8215A5A8h */ case    8:  		/* bc 4, CR0_EQ, -616 */
		/* 8215A5A8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215A340;  }
		/* 8215A5A8h case    8:*/		return 0x8215A5AC;
		  /* 8215A5ACh */ case    9:  		/* mr R3, R31 */
		/* 8215A5ACh case    9:*/		regs.R3 = regs.R31;
		/* 8215A5ACh case    9:*/		return 0x8215A5B0;
		  /* 8215A5B0h */ case   10:  		/* bl -4368 */
		/* 8215A5B0h case   10:*/		regs.LR = 0x8215A5B4; return 0x821594A0;
		/* 8215A5B0h case   10:*/		return 0x8215A5B4;
		  /* 8215A5B4h */ case   11:  		/* lwz R3, <#[R31 + 12]> */
		/* 8215A5B4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215A5B4h case   11:*/		return 0x8215A5B8;
		  /* 8215A5B8h */ case   12:  		/* addi R1, R1, 432 */
		/* 8215A5B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1B0);
		/* 8215A5B8h case   12:*/		return 0x8215A5BC;
		  /* 8215A5BCh */ case   13:  		/* b -824140 */
		/* 8215A5BCh case   13:*/		return 0x82091270;
		/* 8215A5BCh case   13:*/		return 0x8215A5C0;
		  /* 8215A5C0h */ case   14:  		/* cmplwi CR6, R25, 0 */
		/* 8215A5C0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A5C0h case   14:*/		return 0x8215A5C4;
		  /* 8215A5C4h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 8215A5C4h case   15:*/		if ( regs.CR[6].eq ) { return 0x8215A5E0;  }
		/* 8215A5C4h case   15:*/		return 0x8215A5C8;
		  /* 8215A5C8h */ case   16:  		/* mr R4, R24 */
		/* 8215A5C8h case   16:*/		regs.R4 = regs.R24;
		/* 8215A5C8h case   16:*/		return 0x8215A5CC;
		  /* 8215A5CCh */ case   17:  		/* mr R3, R31 */
		/* 8215A5CCh case   17:*/		regs.R3 = regs.R31;
		/* 8215A5CCh case   17:*/		return 0x8215A5D0;
		  /* 8215A5D0h */ case   18:  		/* bl -9896 */
		/* 8215A5D0h case   18:*/		regs.LR = 0x8215A5D4; return 0x82157F28;
		/* 8215A5D0h case   18:*/		return 0x8215A5D4;
		  /* 8215A5D4h */ case   19:  		/* lwz R4, <#[R1 + 156]> */
		/* 8215A5D4h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 8215A5D4h case   19:*/		return 0x8215A5D8;
		  /* 8215A5D8h */ case   20:  		/* mr R3, R31 */
		/* 8215A5D8h case   20:*/		regs.R3 = regs.R31;
		/* 8215A5D8h case   20:*/		return 0x8215A5DC;
		  /* 8215A5DCh */ case   21:  		/* bl -7620 */
		/* 8215A5DCh case   21:*/		regs.LR = 0x8215A5E0; return 0x82158818;
		/* 8215A5DCh case   21:*/		return 0x8215A5E0;
	}
	return 0x8215A5E0;
} // Block from 8215A588h-8215A5E0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215A5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A5E0);
		  /* 8215A5E0h */ case    0:  		/* li R11, 0 */
		/* 8215A5E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215A5E0h case    0:*/		return 0x8215A5E4;
		  /* 8215A5E4h */ case    1:  		/* stb R11, <#[R1 + 112]> */
		/* 8215A5E4h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8215A5E4h case    1:*/		return 0x8215A5E8;
		  /* 8215A5E8h */ case    2:  		/* b -120 */
		/* 8215A5E8h case    2:*/		return 0x8215A570;
		/* 8215A5E8h case    2:*/		return 0x8215A5EC;
		  /* 8215A5ECh */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 8215A5ECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A5ECh case    3:*/		return 0x8215A5F0;
		  /* 8215A5F0h */ case    4:  		/* bc 12, CR6_EQ, -16 */
		/* 8215A5F0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8215A5E0;  }
		/* 8215A5F0h case    4:*/		return 0x8215A5F4;
		  /* 8215A5F4h */ case    5:  		/* mr R4, R24 */
		/* 8215A5F4h case    5:*/		regs.R4 = regs.R24;
		/* 8215A5F4h case    5:*/		return 0x8215A5F8;
		  /* 8215A5F8h */ case    6:  		/* mr R3, R31 */
		/* 8215A5F8h case    6:*/		regs.R3 = regs.R31;
		/* 8215A5F8h case    6:*/		return 0x8215A5FC;
		  /* 8215A5FCh */ case    7:  		/* bl -9940 */
		/* 8215A5FCh case    7:*/		regs.LR = 0x8215A600; return 0x82157F28;
		/* 8215A5FCh case    7:*/		return 0x8215A600;
		  /* 8215A600h */ case    8:  		/* lwz R4, <#[R1 + 212]> */
		/* 8215A600h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D4) );
		/* 8215A600h case    8:*/		return 0x8215A604;
		  /* 8215A604h */ case    9:  		/* b -44 */
		/* 8215A604h case    9:*/		return 0x8215A5D8;
		/* 8215A604h case    9:*/		return 0x8215A608;
		  /* 8215A608h */ case   10:  		/* cmplwi CR6, R25, 0 */
		/* 8215A608h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A608h case   10:*/		return 0x8215A60C;
		  /* 8215A60Ch */ case   11:  		/* bc 12, CR6_EQ, -44 */
		/* 8215A60Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8215A5E0;  }
		/* 8215A60Ch case   11:*/		return 0x8215A610;
		  /* 8215A610h */ case   12:  		/* mr R4, R24 */
		/* 8215A610h case   12:*/		regs.R4 = regs.R24;
		/* 8215A610h case   12:*/		return 0x8215A614;
		  /* 8215A614h */ case   13:  		/* mr R3, R31 */
		/* 8215A614h case   13:*/		regs.R3 = regs.R31;
		/* 8215A614h case   13:*/		return 0x8215A618;
		  /* 8215A618h */ case   14:  		/* bl -9968 */
		/* 8215A618h case   14:*/		regs.LR = 0x8215A61C; return 0x82157F28;
		/* 8215A618h case   14:*/		return 0x8215A61C;
		  /* 8215A61Ch */ case   15:  		/* lwz R4, <#[R1 + 164]> */
		/* 8215A61Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A4) );
		/* 8215A61Ch case   15:*/		return 0x8215A620;
		  /* 8215A620h */ case   16:  		/* b -72 */
		/* 8215A620h case   16:*/		return 0x8215A5D8;
		/* 8215A620h case   16:*/		return 0x8215A624;
		  /* 8215A624h */ case   17:  		/* cmplwi CR6, R25, 0 */
		/* 8215A624h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A624h case   17:*/		return 0x8215A628;
		  /* 8215A628h */ case   18:  		/* bc 12, CR6_EQ, -72 */
		/* 8215A628h case   18:*/		if ( regs.CR[6].eq ) { return 0x8215A5E0;  }
		/* 8215A628h case   18:*/		return 0x8215A62C;
		  /* 8215A62Ch */ case   19:  		/* mr R4, R24 */
		/* 8215A62Ch case   19:*/		regs.R4 = regs.R24;
		/* 8215A62Ch case   19:*/		return 0x8215A630;
		  /* 8215A630h */ case   20:  		/* mr R3, R31 */
		/* 8215A630h case   20:*/		regs.R3 = regs.R31;
		/* 8215A630h case   20:*/		return 0x8215A634;
		  /* 8215A634h */ case   21:  		/* bl -9996 */
		/* 8215A634h case   21:*/		regs.LR = 0x8215A638; return 0x82157F28;
		/* 8215A634h case   21:*/		return 0x8215A638;
		  /* 8215A638h */ case   22:  		/* lwz R4, <#[R1 + 252]> */
		/* 8215A638h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000FC) );
		/* 8215A638h case   22:*/		return 0x8215A63C;
		  /* 8215A63Ch */ case   23:  		/* b -100 */
		/* 8215A63Ch case   23:*/		return 0x8215A5D8;
		/* 8215A63Ch case   23:*/		return 0x8215A640;
		  /* 8215A640h */ case   24:  		/* cmplwi CR6, R25, 0 */
		/* 8215A640h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A640h case   24:*/		return 0x8215A644;
		  /* 8215A644h */ case   25:  		/* bc 12, CR6_EQ, -212 */
		/* 8215A644h case   25:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A644h case   25:*/		return 0x8215A648;
		  /* 8215A648h */ case   26:  		/* mr R4, R24 */
		/* 8215A648h case   26:*/		regs.R4 = regs.R24;
		/* 8215A648h case   26:*/		return 0x8215A64C;
		  /* 8215A64Ch */ case   27:  		/* mr R3, R31 */
		/* 8215A64Ch case   27:*/		regs.R3 = regs.R31;
		/* 8215A64Ch case   27:*/		return 0x8215A650;
		  /* 8215A650h */ case   28:  		/* bl -10024 */
		/* 8215A650h case   28:*/		regs.LR = 0x8215A654; return 0x82157F28;
		/* 8215A650h case   28:*/		return 0x8215A654;
		  /* 8215A654h */ case   29:  		/* mr R4, R16 */
		/* 8215A654h case   29:*/		regs.R4 = regs.R16;
		/* 8215A654h case   29:*/		return 0x8215A658;
		  /* 8215A658h */ case   30:  		/* mr R3, R31 */
		/* 8215A658h case   30:*/		regs.R3 = regs.R31;
		/* 8215A658h case   30:*/		return 0x8215A65C;
		  /* 8215A65Ch */ case   31:  		/* bl -7748 */
		/* 8215A65Ch case   31:*/		regs.LR = 0x8215A660; return 0x82158818;
		/* 8215A65Ch case   31:*/		return 0x8215A660;
		  /* 8215A660h */ case   32:  		/* mr R4, R22 */
		/* 8215A660h case   32:*/		regs.R4 = regs.R22;
		/* 8215A660h case   32:*/		return 0x8215A664;
		  /* 8215A664h */ case   33:  		/* mr R3, R31 */
		/* 8215A664h case   33:*/		regs.R3 = regs.R31;
		/* 8215A664h case   33:*/		return 0x8215A668;
		  /* 8215A668h */ case   34:  		/* bl -10048 */
		/* 8215A668h case   34:*/		regs.LR = 0x8215A66C; return 0x82157F28;
		/* 8215A668h case   34:*/		return 0x8215A66C;
		  /* 8215A66Ch */ case   35:  		/* li R5, 13 */
		/* 8215A66Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8215A66Ch case   35:*/		return 0x8215A670;
		  /* 8215A670h */ case   36:  		/* li R4, 1 */
		/* 8215A670h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215A670h case   36:*/		return 0x8215A674;
		  /* 8215A674h */ case   37:  		/* mr R3, R30 */
		/* 8215A674h case   37:*/		regs.R3 = regs.R30;
		/* 8215A674h case   37:*/		return 0x8215A678;
		  /* 8215A678h */ case   38:  		/* bl -11112 */
		/* 8215A678h case   38:*/		regs.LR = 0x8215A67C; return 0x82157B10;
		/* 8215A678h case   38:*/		return 0x8215A67C;
		  /* 8215A67Ch */ case   39:  		/* srawi R11, R3, 1 */
		/* 8215A67Ch case   39:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R3);
		/* 8215A67Ch case   39:*/		return 0x8215A680;
		  /* 8215A680h */ case   40:  		/* rlwinm R6, R3, 0, 31, 31 */
		/* 8215A680h case   40:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R3);
		/* 8215A680h case   40:*/		return 0x8215A684;
		  /* 8215A684h */ case   41:  		/* mr R4, R23 */
		/* 8215A684h case   41:*/		regs.R4 = regs.R23;
		/* 8215A684h case   41:*/		return 0x8215A688;
		  /* 8215A688h */ case   42:  		/* addze R5, R11 */
		/* 8215A688h case   42:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R11);
		/* 8215A688h case   42:*/		return 0x8215A68C;
		  /* 8215A68Ch */ case   43:  		/* mr R3, R31 */
		/* 8215A68Ch case   43:*/		regs.R3 = regs.R31;
		/* 8215A68Ch case   43:*/		return 0x8215A690;
		  /* 8215A690h */ case   44:  		/* bl -10088 */
		/* 8215A690h case   44:*/		regs.LR = 0x8215A694; return 0x82157F28;
		/* 8215A690h case   44:*/		return 0x8215A694;
		  /* 8215A694h */ case   45:  		/* li R5, 3 */
		/* 8215A694h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8215A694h case   45:*/		return 0x8215A698;
		  /* 8215A698h */ case   46:  		/* li R4, 14 */
		/* 8215A698h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8215A698h case   46:*/		return 0x8215A69C;
		  /* 8215A69Ch */ case   47:  		/* mr R3, R30 */
		/* 8215A69Ch case   47:*/		regs.R3 = regs.R30;
		/* 8215A69Ch case   47:*/		return 0x8215A6A0;
		  /* 8215A6A0h */ case   48:  		/* bl -11152 */
		/* 8215A6A0h case   48:*/		regs.LR = 0x8215A6A4; return 0x82157B10;
		/* 8215A6A0h case   48:*/		return 0x8215A6A4;
		  /* 8215A6A4h */ case   49:  		/* cmpwi CR0, R3, 0 */
		/* 8215A6A4h case   49:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A6A4h case   49:*/		return 0x8215A6A8;
		  /* 8215A6A8h */ case   50:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A6A8h case   50:*/		if ( regs.CR[0].eq ) { return 0x8215A6BC;  }
		/* 8215A6A8h case   50:*/		return 0x8215A6AC;
		  /* 8215A6ACh */ case   51:  		/* mr R5, R3 */
		/* 8215A6ACh case   51:*/		regs.R5 = regs.R3;
		/* 8215A6ACh case   51:*/		return 0x8215A6B0;
		  /* 8215A6B0h */ case   52:  		/* lwz R4, <#[R1 + 172]> */
		/* 8215A6B0h case   52:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000AC) );
		/* 8215A6B0h case   52:*/		return 0x8215A6B4;
		  /* 8215A6B4h */ case   53:  		/* mr R3, R31 */
		/* 8215A6B4h case   53:*/		regs.R3 = regs.R31;
		/* 8215A6B4h case   53:*/		return 0x8215A6B8;
		  /* 8215A6B8h */ case   54:  		/* bl -10128 */
		/* 8215A6B8h case   54:*/		regs.LR = 0x8215A6BC; return 0x82157F28;
		/* 8215A6B8h case   54:*/		return 0x8215A6BC;
	}
	return 0x8215A6BC;
} // Block from 8215A5E0h-8215A6BCh (55 instructions)

//////////////////////////////////////////////////////
// Block at 8215A6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A6BC);
		  /* 8215A6BCh */ case    0:  		/* li R5, 5 */
		/* 8215A6BCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8215A6BCh case    0:*/		return 0x8215A6C0;
		  /* 8215A6C0h */ case    1:  		/* li R4, 17 */
		/* 8215A6C0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 8215A6C0h case    1:*/		return 0x8215A6C4;
		  /* 8215A6C4h */ case    2:  		/* mr R3, R30 */
		/* 8215A6C4h case    2:*/		regs.R3 = regs.R30;
		/* 8215A6C4h case    2:*/		return 0x8215A6C8;
		  /* 8215A6C8h */ case    3:  		/* bl -11192 */
		/* 8215A6C8h case    3:*/		regs.LR = 0x8215A6CC; return 0x82157B10;
		/* 8215A6C8h case    3:*/		return 0x8215A6CC;
		  /* 8215A6CCh */ case    4:  		/* mr R5, R3 */
		/* 8215A6CCh case    4:*/		regs.R5 = regs.R3;
		/* 8215A6CCh case    4:*/		return 0x8215A6D0;
		  /* 8215A6D0h */ case    5:  		/* mr R4, R18 */
		/* 8215A6D0h case    5:*/		regs.R4 = regs.R18;
		/* 8215A6D0h case    5:*/		return 0x8215A6D4;
		  /* 8215A6D4h */ case    6:  		/* mr R3, R31 */
		/* 8215A6D4h case    6:*/		regs.R3 = regs.R31;
		/* 8215A6D4h case    6:*/		return 0x8215A6D8;
		  /* 8215A6D8h */ case    7:  		/* bl -10160 */
		/* 8215A6D8h case    7:*/		regs.LR = 0x8215A6DC; return 0x82157F28;
		/* 8215A6D8h case    7:*/		return 0x8215A6DC;
		  /* 8215A6DCh */ case    8:  		/* li R5, 22 */
		/* 8215A6DCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 8215A6DCh case    8:*/		return 0x8215A6E0;
		  /* 8215A6E0h */ case    9:  		/* li R4, 22 */
		/* 8215A6E0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 8215A6E0h case    9:*/		return 0x8215A6E4;
		  /* 8215A6E4h */ case   10:  		/* mr R3, R30 */
		/* 8215A6E4h case   10:*/		regs.R3 = regs.R30;
		/* 8215A6E4h case   10:*/		return 0x8215A6E8;
		  /* 8215A6E8h */ case   11:  		/* bl -11224 */
		/* 8215A6E8h case   11:*/		regs.LR = 0x8215A6EC; return 0x82157B10;
		/* 8215A6E8h case   11:*/		return 0x8215A6EC;
		  /* 8215A6ECh */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8215A6ECh case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A6ECh case   12:*/		return 0x8215A6F0;
		  /* 8215A6F0h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A6F0h case   13:*/		if ( regs.CR[0].eq ) { return 0x8215A704;  }
		/* 8215A6F0h case   13:*/		return 0x8215A6F4;
		  /* 8215A6F4h */ case   14:  		/* lwz R4, <#[R1 + 220]> */
		/* 8215A6F4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000DC) );
		/* 8215A6F4h case   14:*/		return 0x8215A6F8;
		  /* 8215A6F8h */ case   15:  		/* mr R5, R3 */
		/* 8215A6F8h case   15:*/		regs.R5 = regs.R3;
		/* 8215A6F8h case   15:*/		return 0x8215A6FC;
		  /* 8215A6FCh */ case   16:  		/* mr R3, R31 */
		/* 8215A6FCh case   16:*/		regs.R3 = regs.R31;
		/* 8215A6FCh case   16:*/		return 0x8215A700;
		  /* 8215A700h */ case   17:  		/* bl -10200 */
		/* 8215A700h case   17:*/		regs.LR = 0x8215A704; return 0x82157F28;
		/* 8215A700h case   17:*/		return 0x8215A704;
	}
	return 0x8215A704;
} // Block from 8215A6BCh-8215A704h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215A704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A704);
		  /* 8215A704h */ case    0:  		/* li R5, 1 */
		/* 8215A704h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A704h case    0:*/		return 0x8215A708;
		  /* 8215A708h */ case    1:  		/* li R4, 44 */
		/* 8215A708h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8215A708h case    1:*/		return 0x8215A70C;
		  /* 8215A70Ch */ case    2:  		/* mr R3, R30 */
		/* 8215A70Ch case    2:*/		regs.R3 = regs.R30;
		/* 8215A70Ch case    2:*/		return 0x8215A710;
		  /* 8215A710h */ case    3:  		/* bl -11264 */
		/* 8215A710h case    3:*/		regs.LR = 0x8215A714; return 0x82157B10;
		/* 8215A710h case    3:*/		return 0x8215A714;
		  /* 8215A714h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8215A714h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A714h case    4:*/		return 0x8215A718;
		  /* 8215A718h */ case    5:  		/* bc 12, CR0_EQ, -424 */
		/* 8215A718h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215A570;  }
		/* 8215A718h case    5:*/		return 0x8215A71C;
		  /* 8215A71Ch */ case    6:  		/* mr R4, R15 */
		/* 8215A71Ch case    6:*/		regs.R4 = regs.R15;
		/* 8215A71Ch case    6:*/		return 0x8215A720;
		  /* 8215A720h */ case    7:  		/* mr R5, R3 */
		/* 8215A720h case    7:*/		regs.R5 = regs.R3;
		/* 8215A720h case    7:*/		return 0x8215A724;
		  /* 8215A724h */ case    8:  		/* mr R3, R31 */
		/* 8215A724h case    8:*/		regs.R3 = regs.R31;
		/* 8215A724h case    8:*/		return 0x8215A728;
		  /* 8215A728h */ case    9:  		/* bl -10240 */
		/* 8215A728h case    9:*/		regs.LR = 0x8215A72C; return 0x82157F28;
		/* 8215A728h case    9:*/		return 0x8215A72C;
		  /* 8215A72Ch */ case   10:  		/* b -444 */
		/* 8215A72Ch case   10:*/		return 0x8215A570;
		/* 8215A72Ch case   10:*/		return 0x8215A730;
		  /* 8215A730h */ case   11:  		/* cmplwi CR6, R25, 0 */
		/* 8215A730h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A730h case   11:*/		return 0x8215A734;
		  /* 8215A734h */ case   12:  		/* bc 12, CR6_EQ, -452 */
		/* 8215A734h case   12:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A734h case   12:*/		return 0x8215A738;
		  /* 8215A738h */ case   13:  		/* mr R4, R24 */
		/* 8215A738h case   13:*/		regs.R4 = regs.R24;
		/* 8215A738h case   13:*/		return 0x8215A73C;
		  /* 8215A73Ch */ case   14:  		/* mr R3, R31 */
		/* 8215A73Ch case   14:*/		regs.R3 = regs.R31;
		/* 8215A73Ch case   14:*/		return 0x8215A740;
		  /* 8215A740h */ case   15:  		/* bl -10264 */
		/* 8215A740h case   15:*/		regs.LR = 0x8215A744; return 0x82157F28;
		/* 8215A740h case   15:*/		return 0x8215A744;
		  /* 8215A744h */ case   16:  		/* mr R4, R17 */
		/* 8215A744h case   16:*/		regs.R4 = regs.R17;
		/* 8215A744h case   16:*/		return 0x8215A748;
		  /* 8215A748h */ case   17:  		/* mr R3, R31 */
		/* 8215A748h case   17:*/		regs.R3 = regs.R31;
		/* 8215A748h case   17:*/		return 0x8215A74C;
		  /* 8215A74Ch */ case   18:  		/* bl -7988 */
		/* 8215A74Ch case   18:*/		regs.LR = 0x8215A750; return 0x82158818;
		/* 8215A74Ch case   18:*/		return 0x8215A750;
		  /* 8215A750h */ case   19:  		/* mr R4, R22 */
		/* 8215A750h case   19:*/		regs.R4 = regs.R22;
		/* 8215A750h case   19:*/		return 0x8215A754;
		  /* 8215A754h */ case   20:  		/* mr R3, R31 */
		/* 8215A754h case   20:*/		regs.R3 = regs.R31;
		/* 8215A754h case   20:*/		return 0x8215A758;
		  /* 8215A758h */ case   21:  		/* bl -10288 */
		/* 8215A758h case   21:*/		regs.LR = 0x8215A75C; return 0x82157F28;
		/* 8215A758h case   21:*/		return 0x8215A75C;
		  /* 8215A75Ch */ case   22:  		/* li R5, 13 */
		/* 8215A75Ch case   22:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8215A75Ch case   22:*/		return 0x8215A760;
		  /* 8215A760h */ case   23:  		/* li R4, 1 */
		/* 8215A760h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215A760h case   23:*/		return 0x8215A764;
		  /* 8215A764h */ case   24:  		/* mr R3, R30 */
		/* 8215A764h case   24:*/		regs.R3 = regs.R30;
		/* 8215A764h case   24:*/		return 0x8215A768;
		  /* 8215A768h */ case   25:  		/* bl -11352 */
		/* 8215A768h case   25:*/		regs.LR = 0x8215A76C; return 0x82157B10;
		/* 8215A768h case   25:*/		return 0x8215A76C;
		  /* 8215A76Ch */ case   26:  		/* srawi R11, R3, 1 */
		/* 8215A76Ch case   26:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R3);
		/* 8215A76Ch case   26:*/		return 0x8215A770;
		  /* 8215A770h */ case   27:  		/* rlwinm R6, R3, 0, 31, 31 */
		/* 8215A770h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R3);
		/* 8215A770h case   27:*/		return 0x8215A774;
		  /* 8215A774h */ case   28:  		/* mr R4, R23 */
		/* 8215A774h case   28:*/		regs.R4 = regs.R23;
		/* 8215A774h case   28:*/		return 0x8215A778;
		  /* 8215A778h */ case   29:  		/* addze R5, R11 */
		/* 8215A778h case   29:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R11);
		/* 8215A778h case   29:*/		return 0x8215A77C;
		  /* 8215A77Ch */ case   30:  		/* mr R3, R31 */
		/* 8215A77Ch case   30:*/		regs.R3 = regs.R31;
		/* 8215A77Ch case   30:*/		return 0x8215A780;
		  /* 8215A780h */ case   31:  		/* bl -10328 */
		/* 8215A780h case   31:*/		regs.LR = 0x8215A784; return 0x82157F28;
		/* 8215A780h case   31:*/		return 0x8215A784;
		  /* 8215A784h */ case   32:  		/* li R5, 3 */
		/* 8215A784h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8215A784h case   32:*/		return 0x8215A788;
		  /* 8215A788h */ case   33:  		/* li R4, 14 */
		/* 8215A788h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8215A788h case   33:*/		return 0x8215A78C;
		  /* 8215A78Ch */ case   34:  		/* mr R3, R30 */
		/* 8215A78Ch case   34:*/		regs.R3 = regs.R30;
		/* 8215A78Ch case   34:*/		return 0x8215A790;
		  /* 8215A790h */ case   35:  		/* bl -11392 */
		/* 8215A790h case   35:*/		regs.LR = 0x8215A794; return 0x82157B10;
		/* 8215A790h case   35:*/		return 0x8215A794;
		  /* 8215A794h */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 8215A794h case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A794h case   36:*/		return 0x8215A798;
		  /* 8215A798h */ case   37:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A798h case   37:*/		if ( regs.CR[0].eq ) { return 0x8215A7AC;  }
		/* 8215A798h case   37:*/		return 0x8215A79C;
		  /* 8215A79Ch */ case   38:  		/* mr R5, R3 */
		/* 8215A79Ch case   38:*/		regs.R5 = regs.R3;
		/* 8215A79Ch case   38:*/		return 0x8215A7A0;
		  /* 8215A7A0h */ case   39:  		/* lwz R4, <#[R1 + 180]> */
		/* 8215A7A0h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B4) );
		/* 8215A7A0h case   39:*/		return 0x8215A7A4;
		  /* 8215A7A4h */ case   40:  		/* mr R3, R31 */
		/* 8215A7A4h case   40:*/		regs.R3 = regs.R31;
		/* 8215A7A4h case   40:*/		return 0x8215A7A8;
		  /* 8215A7A8h */ case   41:  		/* bl -10368 */
		/* 8215A7A8h case   41:*/		regs.LR = 0x8215A7AC; return 0x82157F28;
		/* 8215A7A8h case   41:*/		return 0x8215A7AC;
	}
	return 0x8215A7AC;
} // Block from 8215A704h-8215A7ACh (42 instructions)

//////////////////////////////////////////////////////
// Block at 8215A7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A7AC);
		  /* 8215A7ACh */ case    0:  		/* li R5, 5 */
		/* 8215A7ACh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8215A7ACh case    0:*/		return 0x8215A7B0;
		  /* 8215A7B0h */ case    1:  		/* li R4, 17 */
		/* 8215A7B0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 8215A7B0h case    1:*/		return 0x8215A7B4;
		  /* 8215A7B4h */ case    2:  		/* mr R3, R30 */
		/* 8215A7B4h case    2:*/		regs.R3 = regs.R30;
		/* 8215A7B4h case    2:*/		return 0x8215A7B8;
		  /* 8215A7B8h */ case    3:  		/* bl -11432 */
		/* 8215A7B8h case    3:*/		regs.LR = 0x8215A7BC; return 0x82157B10;
		/* 8215A7B8h case    3:*/		return 0x8215A7BC;
		  /* 8215A7BCh */ case    4:  		/* mr R5, R3 */
		/* 8215A7BCh case    4:*/		regs.R5 = regs.R3;
		/* 8215A7BCh case    4:*/		return 0x8215A7C0;
		  /* 8215A7C0h */ case    5:  		/* mr R4, R18 */
		/* 8215A7C0h case    5:*/		regs.R4 = regs.R18;
		/* 8215A7C0h case    5:*/		return 0x8215A7C4;
		  /* 8215A7C4h */ case    6:  		/* mr R3, R31 */
		/* 8215A7C4h case    6:*/		regs.R3 = regs.R31;
		/* 8215A7C4h case    6:*/		return 0x8215A7C8;
		  /* 8215A7C8h */ case    7:  		/* bl -10400 */
		/* 8215A7C8h case    7:*/		regs.LR = 0x8215A7CC; return 0x82157F28;
		/* 8215A7C8h case    7:*/		return 0x8215A7CC;
		  /* 8215A7CCh */ case    8:  		/* li R5, 1 */
		/* 8215A7CCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A7CCh case    8:*/		return 0x8215A7D0;
		  /* 8215A7D0h */ case    9:  		/* li R4, 22 */
		/* 8215A7D0h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x16);
		/* 8215A7D0h case    9:*/		return 0x8215A7D4;
		  /* 8215A7D4h */ case   10:  		/* mr R3, R30 */
		/* 8215A7D4h case   10:*/		regs.R3 = regs.R30;
		/* 8215A7D4h case   10:*/		return 0x8215A7D8;
		  /* 8215A7D8h */ case   11:  		/* bl -11464 */
		/* 8215A7D8h case   11:*/		regs.LR = 0x8215A7DC; return 0x82157B10;
		/* 8215A7D8h case   11:*/		return 0x8215A7DC;
		  /* 8215A7DCh */ case   12:  		/* mr R5, R3 */
		/* 8215A7DCh case   12:*/		regs.R5 = regs.R3;
		/* 8215A7DCh case   12:*/		return 0x8215A7E0;
		  /* 8215A7E0h */ case   13:  		/* mr R3, R31 */
		/* 8215A7E0h case   13:*/		regs.R3 = regs.R31;
		/* 8215A7E0h case   13:*/		return 0x8215A7E4;
		  /* 8215A7E4h */ case   14:  		/* lwz R4, <#[R1 + 244]> */
		/* 8215A7E4h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000F4) );
		/* 8215A7E4h case   14:*/		return 0x8215A7E8;
		  /* 8215A7E8h */ case   15:  		/* bl -10432 */
		/* 8215A7E8h case   15:*/		regs.LR = 0x8215A7EC; return 0x82157F28;
		/* 8215A7E8h case   15:*/		return 0x8215A7EC;
		  /* 8215A7ECh */ case   16:  		/* li R5, 12 */
		/* 8215A7ECh case   16:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8215A7ECh case   16:*/		return 0x8215A7F0;
		  /* 8215A7F0h */ case   17:  		/* li R4, 23 */
		/* 8215A7F0h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x17);
		/* 8215A7F0h case   17:*/		return 0x8215A7F4;
		  /* 8215A7F4h */ case   18:  		/* mr R3, R30 */
		/* 8215A7F4h case   18:*/		regs.R3 = regs.R30;
		/* 8215A7F4h case   18:*/		return 0x8215A7F8;
		  /* 8215A7F8h */ case   19:  		/* bl -11496 */
		/* 8215A7F8h case   19:*/		regs.LR = 0x8215A7FC; return 0x82157B10;
		/* 8215A7F8h case   19:*/		return 0x8215A7FC;
		  /* 8215A7FCh */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 8215A7FCh case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A7FCh case   20:*/		return 0x8215A800;
		  /* 8215A800h */ case   21:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A800h case   21:*/		if ( regs.CR[0].eq ) { return 0x8215A814;  }
		/* 8215A800h case   21:*/		return 0x8215A804;
		  /* 8215A804h */ case   22:  		/* mr R5, R3 */
		/* 8215A804h case   22:*/		regs.R5 = regs.R3;
		/* 8215A804h case   22:*/		return 0x8215A808;
		  /* 8215A808h */ case   23:  		/* lwz R4, <#[R1 + 144]> */
		/* 8215A808h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 8215A808h case   23:*/		return 0x8215A80C;
		  /* 8215A80Ch */ case   24:  		/* mr R3, R31 */
		/* 8215A80Ch case   24:*/		regs.R3 = regs.R31;
		/* 8215A80Ch case   24:*/		return 0x8215A810;
		  /* 8215A810h */ case   25:  		/* bl -10472 */
		/* 8215A810h case   25:*/		regs.LR = 0x8215A814; return 0x82157F28;
		/* 8215A810h case   25:*/		return 0x8215A814;
	}
	return 0x8215A814;
} // Block from 8215A7ACh-8215A814h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215A814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A814);
		  /* 8215A814h */ case    0:  		/* li R5, 2 */
		/* 8215A814h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8215A814h case    0:*/		return 0x8215A818;
		  /* 8215A818h */ case    1:  		/* li R4, 35 */
		/* 8215A818h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8215A818h case    1:*/		return 0x8215A81C;
		  /* 8215A81Ch */ case    2:  		/* mr R3, R30 */
		/* 8215A81Ch case    2:*/		regs.R3 = regs.R30;
		/* 8215A81Ch case    2:*/		return 0x8215A820;
		  /* 8215A820h */ case    3:  		/* bl -11536 */
		/* 8215A820h case    3:*/		regs.LR = 0x8215A824; return 0x82157B10;
		/* 8215A820h case    3:*/		return 0x8215A824;
		  /* 8215A824h */ case    4:  		/* mr R5, R3 */
		/* 8215A824h case    4:*/		regs.R5 = regs.R3;
		/* 8215A824h case    4:*/		return 0x8215A828;
		  /* 8215A828h */ case    5:  		/* mr R3, R31 */
		/* 8215A828h case    5:*/		regs.R3 = regs.R31;
		/* 8215A828h case    5:*/		return 0x8215A82C;
		  /* 8215A82Ch */ case    6:  		/* lwz R4, <#[R1 + 228]> */
		/* 8215A82Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E4) );
		/* 8215A82Ch case    6:*/		return 0x8215A830;
		  /* 8215A830h */ case    7:  		/* bl -10504 */
		/* 8215A830h case    7:*/		regs.LR = 0x8215A834; return 0x82157F28;
		/* 8215A830h case    7:*/		return 0x8215A834;
		  /* 8215A834h */ case    8:  		/* li R5, 6 */
		/* 8215A834h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8215A834h case    8:*/		return 0x8215A838;
		  /* 8215A838h */ case    9:  		/* li R4, 37 */
		/* 8215A838h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 8215A838h case    9:*/		return 0x8215A83C;
		  /* 8215A83Ch */ case   10:  		/* mr R3, R30 */
		/* 8215A83Ch case   10:*/		regs.R3 = regs.R30;
		/* 8215A83Ch case   10:*/		return 0x8215A840;
		  /* 8215A840h */ case   11:  		/* bl -11568 */
		/* 8215A840h case   11:*/		regs.LR = 0x8215A844; return 0x82157B10;
		/* 8215A840h case   11:*/		return 0x8215A844;
		  /* 8215A844h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 8215A844h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A844h case   12:*/		return 0x8215A848;
		  /* 8215A848h */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A848h case   13:*/		if ( regs.CR[0].eq ) { return 0x8215A85C;  }
		/* 8215A848h case   13:*/		return 0x8215A84C;
		  /* 8215A84Ch */ case   14:  		/* mr R5, R3 */
		/* 8215A84Ch case   14:*/		regs.R5 = regs.R3;
		/* 8215A84Ch case   14:*/		return 0x8215A850;
		  /* 8215A850h */ case   15:  		/* lwz R4, <#[R1 + 196]> */
		/* 8215A850h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C4) );
		/* 8215A850h case   15:*/		return 0x8215A854;
		  /* 8215A854h */ case   16:  		/* mr R3, R31 */
		/* 8215A854h case   16:*/		regs.R3 = regs.R31;
		/* 8215A854h case   16:*/		return 0x8215A858;
		  /* 8215A858h */ case   17:  		/* bl -10544 */
		/* 8215A858h case   17:*/		regs.LR = 0x8215A85C; return 0x82157F28;
		/* 8215A858h case   17:*/		return 0x8215A85C;
	}
	return 0x8215A85C;
} // Block from 8215A814h-8215A85Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215A85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A85C);
		  /* 8215A85Ch */ case    0:  		/* li R5, 1 */
		/* 8215A85Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A85Ch case    0:*/		return 0x8215A860;
		  /* 8215A860h */ case    1:  		/* li R4, 43 */
		/* 8215A860h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 8215A860h case    1:*/		return 0x8215A864;
		  /* 8215A864h */ case    2:  		/* mr R3, R30 */
		/* 8215A864h case    2:*/		regs.R3 = regs.R30;
		/* 8215A864h case    2:*/		return 0x8215A868;
		  /* 8215A868h */ case    3:  		/* bl -11608 */
		/* 8215A868h case    3:*/		regs.LR = 0x8215A86C; return 0x82157B10;
		/* 8215A868h case    3:*/		return 0x8215A86C;
		  /* 8215A86Ch */ case    4:  		/* lwz R4, <#[R1 + 260]> */
		/* 8215A86Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000104) );
		/* 8215A86Ch case    4:*/		return 0x8215A870;
		  /* 8215A870h */ case    5:  		/* b -376 */
		/* 8215A870h case    5:*/		return 0x8215A6F8;
		/* 8215A870h case    5:*/		return 0x8215A874;
		  /* 8215A874h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 8215A874h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A874h case    6:*/		return 0x8215A878;
		  /* 8215A878h */ case    7:  		/* bc 12, CR6_EQ, -776 */
		/* 8215A878h case    7:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A878h case    7:*/		return 0x8215A87C;
		  /* 8215A87Ch */ case    8:  		/* li R5, 13 */
		/* 8215A87Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8215A87Ch case    8:*/		return 0x8215A880;
		  /* 8215A880h */ case    9:  		/* li R4, 1 */
		/* 8215A880h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215A880h case    9:*/		return 0x8215A884;
		  /* 8215A884h */ case   10:  		/* mr R3, R30 */
		/* 8215A884h case   10:*/		regs.R3 = regs.R30;
		/* 8215A884h case   10:*/		return 0x8215A888;
		  /* 8215A888h */ case   11:  		/* bl -11640 */
		/* 8215A888h case   11:*/		regs.LR = 0x8215A88C; return 0x82157B10;
		/* 8215A888h case   11:*/		return 0x8215A88C;
		  /* 8215A88Ch */ case   12:  		/* mr R29, R3 */
		/* 8215A88Ch case   12:*/		regs.R29 = regs.R3;
		/* 8215A88Ch case   12:*/		return 0x8215A890;
		  /* 8215A890h */ case   13:  		/* mr R4, R24 */
		/* 8215A890h case   13:*/		regs.R4 = regs.R24;
		/* 8215A890h case   13:*/		return 0x8215A894;
		  /* 8215A894h */ case   14:  		/* mr R3, R31 */
		/* 8215A894h case   14:*/		regs.R3 = regs.R31;
		/* 8215A894h case   14:*/		return 0x8215A898;
		  /* 8215A898h */ case   15:  		/* bl -10608 */
		/* 8215A898h case   15:*/		regs.LR = 0x8215A89C; return 0x82157F28;
		/* 8215A898h case   15:*/		return 0x8215A89C;
		  /* 8215A89Ch */ case   16:  		/* mr R3, R31 */
		/* 8215A89Ch case   16:*/		regs.R3 = regs.R31;
		/* 8215A89Ch case   16:*/		return 0x8215A8A0;
		  /* 8215A8A0h */ case   17:  		/* lwz R4, <#[R1 + 204]> */
		/* 8215A8A0h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000CC) );
		/* 8215A8A0h case   17:*/		return 0x8215A8A4;
		  /* 8215A8A4h */ case   18:  		/* bl -8332 */
		/* 8215A8A4h case   18:*/		regs.LR = 0x8215A8A8; return 0x82158818;
		/* 8215A8A4h case   18:*/		return 0x8215A8A8;
		  /* 8215A8A8h */ case   19:  		/* srawi R11, R29, 1 */
		/* 8215A8A8h case   19:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R29);
		/* 8215A8A8h case   19:*/		return 0x8215A8AC;
		  /* 8215A8ACh */ case   20:  		/* mr R3, R31 */
		/* 8215A8ACh case   20:*/		regs.R3 = regs.R31;
		/* 8215A8ACh case   20:*/		return 0x8215A8B0;
		  /* 8215A8B0h */ case   21:  		/* lwz R4, <#[R1 + 148]> */
		/* 8215A8B0h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000094) );
		/* 8215A8B0h case   21:*/		return 0x8215A8B4;
		  /* 8215A8B4h */ case   22:  		/* addze R11, R11 */
		/* 8215A8B4h case   22:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8215A8B4h case   22:*/		return 0x8215A8B8;
		  /* 8215A8B8h */ case   23:  		/* srawi R10, R29, 1 */
		/* 8215A8B8h case   23:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R29);
		/* 8215A8B8h case   23:*/		return 0x8215A8BC;
		  /* 8215A8BCh */ case   24:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8215A8BCh case   24:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8215A8BCh case   24:*/		return 0x8215A8C0;
		  /* 8215A8C0h */ case   25:  		/* addze R5, R10 */
		/* 8215A8C0h case   25:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R10);
		/* 8215A8C0h case   25:*/		return 0x8215A8C4;
		  /* 8215A8C4h */ case   26:  		/* subf R6, R11, R29 */
		/* 8215A8C4h case   26:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R29);
		/* 8215A8C4h case   26:*/		return 0x8215A8C8;
		  /* 8215A8C8h */ case   27:  		/* bl -10656 */
		/* 8215A8C8h case   27:*/		regs.LR = 0x8215A8CC; return 0x82157F28;
		/* 8215A8C8h case   27:*/		return 0x8215A8CC;
		  /* 8215A8CCh */ case   28:  		/* b -860 */
		/* 8215A8CCh case   28:*/		return 0x8215A570;
		/* 8215A8CCh case   28:*/		return 0x8215A8D0;
		  /* 8215A8D0h */ case   29:  		/* cmplwi CR6, R25, 0 */
		/* 8215A8D0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A8D0h case   29:*/		return 0x8215A8D4;
		  /* 8215A8D4h */ case   30:  		/* bc 12, CR6_EQ, -868 */
		/* 8215A8D4h case   30:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A8D4h case   30:*/		return 0x8215A8D8;
		  /* 8215A8D8h */ case   31:  		/* mr R4, R24 */
		/* 8215A8D8h case   31:*/		regs.R4 = regs.R24;
		/* 8215A8D8h case   31:*/		return 0x8215A8DC;
		  /* 8215A8DCh */ case   32:  		/* mr R3, R31 */
		/* 8215A8DCh case   32:*/		regs.R3 = regs.R31;
		/* 8215A8DCh case   32:*/		return 0x8215A8E0;
		  /* 8215A8E0h */ case   33:  		/* bl -10680 */
		/* 8215A8E0h case   33:*/		regs.LR = 0x8215A8E4; return 0x82157F28;
		/* 8215A8E0h case   33:*/		return 0x8215A8E4;
		  /* 8215A8E4h */ case   34:  		/* lwz R4, <#[R1 + 152]> */
		/* 8215A8E4h case   34:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 8215A8E4h case   34:*/		return 0x8215A8E8;
	}
	return 0x8215A8E8;
} // Block from 8215A85Ch-8215A8E8h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8215A8E8h
// Function '?PrintInst@Disassembler@XGRAPHICS@@AAAXHPADHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A8E8);
		  /* 8215A8E8h */ case    0:  		/* b -1184 */
		/* 8215A8E8h case    0:*/		return 0x8215A448;
		/* 8215A8E8h case    0:*/		return 0x8215A8EC;
		  /* 8215A8ECh */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 8215A8ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215A8ECh case    1:*/		return 0x8215A8F0;
		  /* 8215A8F0h */ case    2:  		/* bc 12, CR6_EQ, -896 */
		/* 8215A8F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215A8F0h case    2:*/		return 0x8215A8F4;
		  /* 8215A8F4h */ case    3:  		/* mr R4, R24 */
		/* 8215A8F4h case    3:*/		regs.R4 = regs.R24;
		/* 8215A8F4h case    3:*/		return 0x8215A8F8;
		  /* 8215A8F8h */ case    4:  		/* mr R3, R31 */
		/* 8215A8F8h case    4:*/		regs.R3 = regs.R31;
		/* 8215A8F8h case    4:*/		return 0x8215A8FC;
		  /* 8215A8FCh */ case    5:  		/* bl -10708 */
		/* 8215A8FCh case    5:*/		regs.LR = 0x8215A900; return 0x82157F28;
		/* 8215A8FCh case    5:*/		return 0x8215A900;
		  /* 8215A900h */ case    6:  		/* li R5, 1 */
		/* 8215A900h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A900h case    6:*/		return 0x8215A904;
		  /* 8215A904h */ case    7:  		/* li R4, 14 */
		/* 8215A904h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 8215A904h case    7:*/		return 0x8215A908;
		  /* 8215A908h */ case    8:  		/* mr R3, R30 */
		/* 8215A908h case    8:*/		regs.R3 = regs.R30;
		/* 8215A908h case    8:*/		return 0x8215A90C;
		  /* 8215A90Ch */ case    9:  		/* li R29, 0 */
		/* 8215A90Ch case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215A90Ch case    9:*/		return 0x8215A910;
		  /* 8215A910h */ case   10:  		/* bl -11776 */
		/* 8215A910h case   10:*/		regs.LR = 0x8215A914; return 0x82157B10;
		/* 8215A910h case   10:*/		return 0x8215A914;
		  /* 8215A914h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 8215A914h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A914h case   11:*/		return 0x8215A918;
		  /* 8215A918h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 8215A918h case   12:*/		if ( regs.CR[0].eq ) { return 0x8215A920;  }
		/* 8215A918h case   12:*/		return 0x8215A91C;
		  /* 8215A91Ch */ case   13:  		/* mr R29, R26 */
		/* 8215A91Ch case   13:*/		regs.R29 = regs.R26;
		/* 8215A91Ch case   13:*/		return 0x8215A920;
	}
	return 0x8215A920;
} // Block from 8215A8E8h-8215A920h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215A920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A920);
		  /* 8215A920h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8215A920h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8215A920h case    0:*/		return 0x8215A924;
		  /* 8215A924h */ case    1:  		/* mr R3, R31 */
		/* 8215A924h case    1:*/		regs.R3 = regs.R31;
		/* 8215A924h case    1:*/		return 0x8215A928;
		  /* 8215A928h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A928h case    2:*/		if ( regs.CR[0].eq ) { return 0x8215A93C;  }
		/* 8215A928h case    2:*/		return 0x8215A92C;
		  /* 8215A92Ch */ case    3:  		/* lwz R4, <#[R1 + 160]> */
		/* 8215A92Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A0) );
		/* 8215A92Ch case    3:*/		return 0x8215A930;
		  /* 8215A930h */ case    4:  		/* bl -8472 */
		/* 8215A930h case    4:*/		regs.LR = 0x8215A934; return 0x82158818;
		/* 8215A930h case    4:*/		return 0x8215A934;
		  /* 8215A934h */ case    5:  		/* mr R4, R22 */
		/* 8215A934h case    5:*/		regs.R4 = regs.R22;
		/* 8215A934h case    5:*/		return 0x8215A938;
		  /* 8215A938h */ case    6:  		/* b 104 */
		/* 8215A938h case    6:*/		return 0x8215A9A0;
		/* 8215A938h case    6:*/		return 0x8215A93C;
	}
	return 0x8215A93C;
} // Block from 8215A920h-8215A93Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215A93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A93C);
		  /* 8215A93Ch */ case    0:  		/* lwz R4, <#[R1 + 168]> */
		/* 8215A93Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A8) );
		/* 8215A93Ch case    0:*/		return 0x8215A940;
		  /* 8215A940h */ case    1:  		/* bl -8488 */
		/* 8215A940h case    1:*/		regs.LR = 0x8215A944; return 0x82158818;
		/* 8215A940h case    1:*/		return 0x8215A944;
		  /* 8215A944h */ case    2:  		/* mr R4, R22 */
		/* 8215A944h case    2:*/		regs.R4 = regs.R22;
		/* 8215A944h case    2:*/		return 0x8215A948;
		  /* 8215A948h */ case    3:  		/* mr R3, R31 */
		/* 8215A948h case    3:*/		regs.R3 = regs.R31;
		/* 8215A948h case    3:*/		return 0x8215A94C;
		  /* 8215A94Ch */ case    4:  		/* bl -10788 */
		/* 8215A94Ch case    4:*/		regs.LR = 0x8215A950; return 0x82157F28;
		/* 8215A94Ch case    4:*/		return 0x8215A950;
		  /* 8215A950h */ case    5:  		/* li R5, 8 */
		/* 8215A950h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 8215A950h case    5:*/		return 0x8215A954;
		  /* 8215A954h */ case    6:  		/* li R4, 35 */
		/* 8215A954h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x23);
		/* 8215A954h case    6:*/		return 0x8215A958;
		  /* 8215A958h */ case    7:  		/* mr R3, R30 */
		/* 8215A958h case    7:*/		regs.R3 = regs.R30;
		/* 8215A958h case    7:*/		return 0x8215A95C;
		  /* 8215A95Ch */ case    8:  		/* bl -11852 */
		/* 8215A95Ch case    8:*/		regs.LR = 0x8215A960; return 0x82157B10;
		/* 8215A95Ch case    8:*/		return 0x8215A960;
		  /* 8215A960h */ case    9:  		/* mr R5, R3 */
		/* 8215A960h case    9:*/		regs.R5 = regs.R3;
		/* 8215A960h case    9:*/		return 0x8215A964;
		  /* 8215A964h */ case   10:  		/* mr R4, R14 */
		/* 8215A964h case   10:*/		regs.R4 = regs.R14;
		/* 8215A964h case   10:*/		return 0x8215A968;
		  /* 8215A968h */ case   11:  		/* mr R3, R31 */
		/* 8215A968h case   11:*/		regs.R3 = regs.R31;
		/* 8215A968h case   11:*/		return 0x8215A96C;
		  /* 8215A96Ch */ case   12:  		/* bl -10820 */
		/* 8215A96Ch case   12:*/		regs.LR = 0x8215A970; return 0x82157F28;
		/* 8215A96Ch case   12:*/		return 0x8215A970;
		  /* 8215A970h */ case   13:  		/* li R5, 1 */
		/* 8215A970h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215A970h case   13:*/		return 0x8215A974;
		  /* 8215A974h */ case   14:  		/* li R4, 43 */
		/* 8215A974h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x2B);
		/* 8215A974h case   14:*/		return 0x8215A978;
		  /* 8215A978h */ case   15:  		/* mr R3, R30 */
		/* 8215A978h case   15:*/		regs.R3 = regs.R30;
		/* 8215A978h case   15:*/		return 0x8215A97C;
		  /* 8215A97Ch */ case   16:  		/* bl -11884 */
		/* 8215A97Ch case   16:*/		regs.LR = 0x8215A980; return 0x82157B10;
		/* 8215A97Ch case   16:*/		return 0x8215A980;
		  /* 8215A980h */ case   17:  		/* lwz R5, <#[R1 + 176]> */
		/* 8215A980h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B0) );
		/* 8215A980h case   17:*/		return 0x8215A984;
		  /* 8215A984h */ case   18:  		/* cmpwi CR0, R3, 0 */
		/* 8215A984h case   18:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A984h case   18:*/		return 0x8215A988;
		  /* 8215A988h */ case   19:  		/* bc 4, CR0_EQ, 8 */
		/* 8215A988h case   19:*/		if ( !regs.CR[0].eq ) { return 0x8215A990;  }
		/* 8215A988h case   19:*/		return 0x8215A98C;
		  /* 8215A98Ch */ case   20:  		/* lwz R5, <#[R1 + 184]> */
		/* 8215A98Ch case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000B8) );
		/* 8215A98Ch case   20:*/		return 0x8215A990;
	}
	return 0x8215A990;
} // Block from 8215A93Ch-8215A990h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8215A990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A990);
		  /* 8215A990h */ case    0:  		/* mr R3, R31 */
		/* 8215A990h case    0:*/		regs.R3 = regs.R31;
		/* 8215A990h case    0:*/		return 0x8215A994;
		  /* 8215A994h */ case    1:  		/* lwz R4, <#[R1 + 192]> */
		/* 8215A994h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C0) );
		/* 8215A994h case    1:*/		return 0x8215A998;
		  /* 8215A998h */ case    2:  		/* bl -10864 */
		/* 8215A998h case    2:*/		regs.LR = 0x8215A99C; return 0x82157F28;
		/* 8215A998h case    2:*/		return 0x8215A99C;
		  /* 8215A99Ch */ case    3:  		/* lwz R4, <#[R1 + 200]> */
		/* 8215A99Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000C8) );
		/* 8215A99Ch case    3:*/		return 0x8215A9A0;
	}
	return 0x8215A9A0;
} // Block from 8215A990h-8215A9A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215A9A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A9A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A9A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A9A0);
		  /* 8215A9A0h */ case    0:  		/* mr R3, R31 */
		/* 8215A9A0h case    0:*/		regs.R3 = regs.R31;
		/* 8215A9A0h case    0:*/		return 0x8215A9A4;
		  /* 8215A9A4h */ case    1:  		/* bl -10876 */
		/* 8215A9A4h case    1:*/		regs.LR = 0x8215A9A8; return 0x82157F28;
		/* 8215A9A4h case    1:*/		return 0x8215A9A8;
		  /* 8215A9A8h */ case    2:  		/* li R5, 13 */
		/* 8215A9A8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8215A9A8h case    2:*/		return 0x8215A9AC;
		  /* 8215A9ACh */ case    3:  		/* li R4, 1 */
		/* 8215A9ACh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215A9ACh case    3:*/		return 0x8215A9B0;
		  /* 8215A9B0h */ case    4:  		/* mr R3, R30 */
		/* 8215A9B0h case    4:*/		regs.R3 = regs.R30;
		/* 8215A9B0h case    4:*/		return 0x8215A9B4;
		  /* 8215A9B4h */ case    5:  		/* bl -11940 */
		/* 8215A9B4h case    5:*/		regs.LR = 0x8215A9B8; return 0x82157B10;
		/* 8215A9B4h case    5:*/		return 0x8215A9B8;
		  /* 8215A9B8h */ case    6:  		/* srawi R11, R3, 1 */
		/* 8215A9B8h case    6:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R3);
		/* 8215A9B8h case    6:*/		return 0x8215A9BC;
		  /* 8215A9BCh */ case    7:  		/* rlwinm R6, R3, 0, 31, 31 */
		/* 8215A9BCh case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R3);
		/* 8215A9BCh case    7:*/		return 0x8215A9C0;
		  /* 8215A9C0h */ case    8:  		/* mr R4, R23 */
		/* 8215A9C0h case    8:*/		regs.R4 = regs.R23;
		/* 8215A9C0h case    8:*/		return 0x8215A9C4;
		  /* 8215A9C4h */ case    9:  		/* addze R5, R11 */
		/* 8215A9C4h case    9:*/		cpu::op::addze<0>(regs,&regs.R5,regs.R11);
		/* 8215A9C4h case    9:*/		return 0x8215A9C8;
		  /* 8215A9C8h */ case   10:  		/* mr R3, R31 */
		/* 8215A9C8h case   10:*/		regs.R3 = regs.R31;
		/* 8215A9C8h case   10:*/		return 0x8215A9CC;
		  /* 8215A9CCh */ case   11:  		/* bl -10916 */
		/* 8215A9CCh case   11:*/		regs.LR = 0x8215A9D0; return 0x82157F28;
		/* 8215A9CCh case   11:*/		return 0x8215A9D0;
		  /* 8215A9D0h */ case   12:  		/* li R5, 19 */
		/* 8215A9D0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x13);
		/* 8215A9D0h case   12:*/		return 0x8215A9D4;
		  /* 8215A9D4h */ case   13:  		/* li R4, 15 */
		/* 8215A9D4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xF);
		/* 8215A9D4h case   13:*/		return 0x8215A9D8;
		  /* 8215A9D8h */ case   14:  		/* mr R3, R30 */
		/* 8215A9D8h case   14:*/		regs.R3 = regs.R30;
		/* 8215A9D8h case   14:*/		return 0x8215A9DC;
		  /* 8215A9DCh */ case   15:  		/* bl -11980 */
		/* 8215A9DCh case   15:*/		regs.LR = 0x8215A9E0; return 0x82157B10;
		/* 8215A9DCh case   15:*/		return 0x8215A9E0;
		  /* 8215A9E0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8215A9E0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215A9E0h case   16:*/		return 0x8215A9E4;
		  /* 8215A9E4h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 8215A9E4h case   17:*/		if ( regs.CR[0].eq ) { return 0x8215A9F8;  }
		/* 8215A9E4h case   17:*/		return 0x8215A9E8;
		  /* 8215A9E8h */ case   18:  		/* mr R5, R3 */
		/* 8215A9E8h case   18:*/		regs.R5 = regs.R3;
		/* 8215A9E8h case   18:*/		return 0x8215A9EC;
		  /* 8215A9ECh */ case   19:  		/* lwz R4, <#[R1 + 208]> */
		/* 8215A9ECh case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D0) );
		/* 8215A9ECh case   19:*/		return 0x8215A9F0;
		  /* 8215A9F0h */ case   20:  		/* mr R3, R31 */
		/* 8215A9F0h case   20:*/		regs.R3 = regs.R31;
		/* 8215A9F0h case   20:*/		return 0x8215A9F4;
		  /* 8215A9F4h */ case   21:  		/* bl -10956 */
		/* 8215A9F4h case   21:*/		regs.LR = 0x8215A9F8; return 0x82157F28;
		/* 8215A9F4h case   21:*/		return 0x8215A9F8;
	}
	return 0x8215A9F8;
} // Block from 8215A9A0h-8215A9F8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215A9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215A9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215A9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215A9F8);
		  /* 8215A9F8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215A9F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215A9F8h case    0:*/		return 0x8215A9FC;
		  /* 8215A9FCh */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8215A9FCh case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8215A9FCh case    1:*/		return 0x8215AA00;
		  /* 8215AA00h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 8215AA00h case    2:*/		if ( regs.CR[0].eq ) { return 0x8215AA24;  }
		/* 8215AA00h case    2:*/		return 0x8215AA04;
		  /* 8215AA04h */ case    3:  		/* li R5, 1 */
		/* 8215AA04h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215AA04h case    3:*/		return 0x8215AA08;
		  /* 8215AA08h */ case    4:  		/* li R4, 34 */
		/* 8215AA08h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 8215AA08h case    4:*/		return 0x8215AA0C;
		  /* 8215AA0Ch */ case    5:  		/* mr R3, R30 */
		/* 8215AA0Ch case    5:*/		regs.R3 = regs.R30;
		/* 8215AA0Ch case    5:*/		return 0x8215AA10;
		  /* 8215AA10h */ case    6:  		/* bl -12032 */
		/* 8215AA10h case    6:*/		regs.LR = 0x8215AA14; return 0x82157B10;
		/* 8215AA10h case    6:*/		return 0x8215AA14;
		  /* 8215AA14h */ case    7:  		/* mr R5, R3 */
		/* 8215AA14h case    7:*/		regs.R5 = regs.R3;
		/* 8215AA14h case    7:*/		return 0x8215AA18;
		  /* 8215AA18h */ case    8:  		/* mr R3, R31 */
		/* 8215AA18h case    8:*/		regs.R3 = regs.R31;
		/* 8215AA18h case    8:*/		return 0x8215AA1C;
		  /* 8215AA1Ch */ case    9:  		/* lwz R4, <#[R1 + 216]> */
		/* 8215AA1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D8) );
		/* 8215AA1Ch case    9:*/		return 0x8215AA20;
		  /* 8215AA20h */ case   10:  		/* bl -11000 */
		/* 8215AA20h case   10:*/		regs.LR = 0x8215AA24; return 0x82157F28;
		/* 8215AA20h case   10:*/		return 0x8215AA24;
	}
	return 0x8215AA24;
} // Block from 8215A9F8h-8215AA24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215AA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AA24);
		  /* 8215AA24h */ case    0:  		/* li R5, 1 */
		/* 8215AA24h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215AA24h case    0:*/		return 0x8215AA28;
		  /* 8215AA28h */ case    1:  		/* li R4, 44 */
		/* 8215AA28h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8215AA28h case    1:*/		return 0x8215AA2C;
		  /* 8215AA2Ch */ case    2:  		/* mr R3, R30 */
		/* 8215AA2Ch case    2:*/		regs.R3 = regs.R30;
		/* 8215AA2Ch case    2:*/		return 0x8215AA30;
		  /* 8215AA30h */ case    3:  		/* bl -12064 */
		/* 8215AA30h case    3:*/		regs.LR = 0x8215AA34; return 0x82157B10;
		/* 8215AA30h case    3:*/		return 0x8215AA34;
		  /* 8215AA34h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8215AA34h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215AA34h case    4:*/		return 0x8215AA38;
		  /* 8215AA38h */ case    5:  		/* bc 12, CR0_EQ, -1224 */
		/* 8215AA38h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215A570;  }
		/* 8215AA38h case    5:*/		return 0x8215AA3C;
		  /* 8215AA3Ch */ case    6:  		/* lwz R4, <#[R1 + 224]> */
		/* 8215AA3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E0) );
		/* 8215AA3Ch case    6:*/		return 0x8215AA40;
		  /* 8215AA40h */ case    7:  		/* b -800 */
		/* 8215AA40h case    7:*/		return 0x8215A720;
		/* 8215AA40h case    7:*/		return 0x8215AA44;
		  /* 8215AA44h */ case    8:  		/* cmplwi CR6, R25, 0 */
		/* 8215AA44h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215AA44h case    8:*/		return 0x8215AA48;
		  /* 8215AA48h */ case    9:  		/* bc 12, CR6_EQ, -1240 */
		/* 8215AA48h case    9:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215AA48h case    9:*/		return 0x8215AA4C;
		  /* 8215AA4Ch */ case   10:  		/* mr R4, R24 */
		/* 8215AA4Ch case   10:*/		regs.R4 = regs.R24;
		/* 8215AA4Ch case   10:*/		return 0x8215AA50;
		  /* 8215AA50h */ case   11:  		/* mr R3, R31 */
		/* 8215AA50h case   11:*/		regs.R3 = regs.R31;
		/* 8215AA50h case   11:*/		return 0x8215AA54;
		  /* 8215AA54h */ case   12:  		/* bl -11052 */
		/* 8215AA54h case   12:*/		regs.LR = 0x8215AA58; return 0x82157F28;
		/* 8215AA54h case   12:*/		return 0x8215AA58;
		  /* 8215AA58h */ case   13:  		/* mr R4, R19 */
		/* 8215AA58h case   13:*/		regs.R4 = regs.R19;
		/* 8215AA58h case   13:*/		return 0x8215AA5C;
		  /* 8215AA5Ch */ case   14:  		/* mr R3, R31 */
		/* 8215AA5Ch case   14:*/		regs.R3 = regs.R31;
		/* 8215AA5Ch case   14:*/		return 0x8215AA60;
		  /* 8215AA60h */ case   15:  		/* bl -8776 */
		/* 8215AA60h case   15:*/		regs.LR = 0x8215AA64; return 0x82158818;
		/* 8215AA60h case   15:*/		return 0x8215AA64;
		  /* 8215AA64h */ case   16:  		/* mr R4, R22 */
		/* 8215AA64h case   16:*/		regs.R4 = regs.R22;
		/* 8215AA64h case   16:*/		return 0x8215AA68;
		  /* 8215AA68h */ case   17:  		/* mr R3, R31 */
		/* 8215AA68h case   17:*/		regs.R3 = regs.R31;
		/* 8215AA68h case   17:*/		return 0x8215AA6C;
		  /* 8215AA6Ch */ case   18:  		/* bl -11076 */
		/* 8215AA6Ch case   18:*/		regs.LR = 0x8215AA70; return 0x82157F28;
		/* 8215AA6Ch case   18:*/		return 0x8215AA70;
		  /* 8215AA70h */ case   19:  		/* li R5, 2 */
		/* 8215AA70h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8215AA70h case   19:*/		return 0x8215AA74;
		  /* 8215AA74h */ case   20:  		/* li R4, 42 */
		/* 8215AA74h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x2A);
		/* 8215AA74h case   20:*/		return 0x8215AA78;
		  /* 8215AA78h */ case   21:  		/* mr R3, R30 */
		/* 8215AA78h case   21:*/		regs.R3 = regs.R30;
		/* 8215AA78h case   21:*/		return 0x8215AA7C;
		  /* 8215AA7Ch */ case   22:  		/* bl -12140 */
		/* 8215AA7Ch case   22:*/		regs.LR = 0x8215AA80; return 0x82157B10;
		/* 8215AA7Ch case   22:*/		return 0x8215AA80;
		  /* 8215AA80h */ case   23:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215AA80h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215AA80h case   23:*/		return 0x8215AA84;
		  /* 8215AA84h */ case   24:  		/* rlwinm R10, R3, 1, 0, 30 */
		/* 8215AA84h case   24:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R3);
		/* 8215AA84h case   24:*/		return 0x8215AA88;
		  /* 8215AA88h */ case   25:  		/* lwz R9, <#[R1 + 232]> */
		/* 8215AA88h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000E8) );
		/* 8215AA88h case   25:*/		return 0x8215AA8C;
		  /* 8215AA8Ch */ case   26:  		/* rlwinm R11, R11, 29, 31, 31 */
		/* 8215AA8Ch case   26:*/		cpu::op::rlwinm<0,29,31,31>(regs,&regs.R11,regs.R11);
		/* 8215AA8Ch case   26:*/		return 0x8215AA90;
		  /* 8215AA90h */ case   27:  		/* mr R29, R3 */
		/* 8215AA90h case   27:*/		regs.R29 = regs.R3;
		/* 8215AA90h case   27:*/		return 0x8215AA94;
		  /* 8215AA94h */ case   28:  		/* add R11, R11, R10 */
		/* 8215AA94h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8215AA94h case   28:*/		return 0x8215AA98;
		  /* 8215AA98h */ case   29:  		/* mr R4, R20 */
		/* 8215AA98h case   29:*/		regs.R4 = regs.R20;
		/* 8215AA98h case   29:*/		return 0x8215AA9C;
		  /* 8215AA9Ch */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8215AA9Ch case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8215AA9Ch case   30:*/		return 0x8215AAA0;
		  /* 8215AAA0h */ case   31:  		/* mr R3, R31 */
		/* 8215AAA0h case   31:*/		regs.R3 = regs.R31;
		/* 8215AAA0h case   31:*/		return 0x8215AAA4;
		  /* 8215AAA4h */ case   32:  		/* lwzx R5, <#[R11 + R9]> */
		/* 8215AAA4h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8215AAA4h case   32:*/		return 0x8215AAA8;
		  /* 8215AAA8h */ case   33:  		/* bl -11136 */
		/* 8215AAA8h case   33:*/		regs.LR = 0x8215AAAC; return 0x82157F28;
		/* 8215AAA8h case   33:*/		return 0x8215AAAC;
		  /* 8215AAACh */ case   34:  		/* cmpwi CR6, R29, 3 */
		/* 8215AAACh case   34:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000003);
		/* 8215AAACh case   34:*/		return 0x8215AAB0;
		  /* 8215AAB0h */ case   35:  		/* bc 4, CR6_EQ, 36 */
		/* 8215AAB0h case   35:*/		if ( !regs.CR[6].eq ) { return 0x8215AAD4;  }
		/* 8215AAB0h case   35:*/		return 0x8215AAB4;
		  /* 8215AAB4h */ case   36:  		/* li R5, 3 */
		/* 8215AAB4h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8215AAB4h case   36:*/		return 0x8215AAB8;
		  /* 8215AAB8h */ case   37:  		/* li R4, 1 */
		/* 8215AAB8h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215AAB8h case   37:*/		return 0x8215AABC;
		  /* 8215AABCh */ case   38:  		/* mr R3, R30 */
		/* 8215AABCh case   38:*/		regs.R3 = regs.R30;
		/* 8215AABCh case   38:*/		return 0x8215AAC0;
		  /* 8215AAC0h */ case   39:  		/* bl -12208 */
		/* 8215AAC0h case   39:*/		regs.LR = 0x8215AAC4; return 0x82157B10;
		/* 8215AAC0h case   39:*/		return 0x8215AAC4;
		  /* 8215AAC4h */ case   40:  		/* mr R5, R3 */
		/* 8215AAC4h case   40:*/		regs.R5 = regs.R3;
		/* 8215AAC4h case   40:*/		return 0x8215AAC8;
		  /* 8215AAC8h */ case   41:  		/* mr R3, R31 */
		/* 8215AAC8h case   41:*/		regs.R3 = regs.R31;
		/* 8215AAC8h case   41:*/		return 0x8215AACC;
		  /* 8215AACCh */ case   42:  		/* lwz R4, <#[R1 + 240]> */
		/* 8215AACCh case   42:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000F0) );
		/* 8215AACCh case   42:*/		return 0x8215AAD0;
		  /* 8215AAD0h */ case   43:  		/* bl -11176 */
		/* 8215AAD0h case   43:*/		regs.LR = 0x8215AAD4; return 0x82157F28;
		/* 8215AAD0h case   43:*/		return 0x8215AAD4;
	}
	return 0x8215AAD4;
} // Block from 8215AA24h-8215AAD4h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8215AAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AAD4);
		  /* 8215AAD4h */ case    0:  		/* li R5, 1 */
		/* 8215AAD4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8215AAD4h case    0:*/		return 0x8215AAD8;
		  /* 8215AAD8h */ case    1:  		/* li R4, 44 */
		/* 8215AAD8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8215AAD8h case    1:*/		return 0x8215AADC;
		  /* 8215AADCh */ case    2:  		/* mr R3, R30 */
		/* 8215AADCh case    2:*/		regs.R3 = regs.R30;
		/* 8215AADCh case    2:*/		return 0x8215AAE0;
		  /* 8215AAE0h */ case    3:  		/* bl -12240 */
		/* 8215AAE0h case    3:*/		regs.LR = 0x8215AAE4; return 0x82157B10;
		/* 8215AAE0h case    3:*/		return 0x8215AAE4;
		  /* 8215AAE4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8215AAE4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215AAE4h case    4:*/		return 0x8215AAE8;
		  /* 8215AAE8h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 8215AAE8h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215AAFC;  }
		/* 8215AAE8h case    5:*/		return 0x8215AAEC;
		  /* 8215AAECh */ case    6:  		/* mr R5, R3 */
		/* 8215AAECh case    6:*/		regs.R5 = regs.R3;
		/* 8215AAECh case    6:*/		return 0x8215AAF0;
	}
	return 0x8215AAF0;
} // Block from 8215AAD4h-8215AAF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215AAF0h
// Function '?doDisassembly@Disassembler@XGRAPHICS@@QAAPADPADII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AAF0);
		  /* 8215AAF0h */ case    0:  		/* lwz R4, <#[R1 + 248]> */
		/* 8215AAF0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000F8) );
		/* 8215AAF0h case    0:*/		return 0x8215AAF4;
		  /* 8215AAF4h */ case    1:  		/* mr R3, R31 */
		/* 8215AAF4h case    1:*/		regs.R3 = regs.R31;
		/* 8215AAF4h case    1:*/		return 0x8215AAF8;
		  /* 8215AAF8h */ case    2:  		/* bl -11216 */
		/* 8215AAF8h case    2:*/		regs.LR = 0x8215AAFC; return 0x82157F28;
		/* 8215AAF8h case    2:*/		return 0x8215AAFC;
	}
	return 0x8215AAFC;
} // Block from 8215AAF0h-8215AAFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215AAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AAFC);
		  /* 8215AAFCh */ case    0:  		/* li R5, 38 */
		/* 8215AAFCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8215AAFCh case    0:*/		return 0x8215AB00;
		  /* 8215AB00h */ case    1:  		/* li R4, 4 */
		/* 8215AB00h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8215AB00h case    1:*/		return 0x8215AB04;
		  /* 8215AB04h */ case    2:  		/* mr R3, R30 */
		/* 8215AB04h case    2:*/		regs.R3 = regs.R30;
		/* 8215AB04h case    2:*/		return 0x8215AB08;
		  /* 8215AB08h */ case    3:  		/* bl -12280 */
		/* 8215AB08h case    3:*/		regs.LR = 0x8215AB0C; return 0x82157B10;
		/* 8215AB08h case    3:*/		return 0x8215AB0C;
		  /* 8215AB0Ch */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8215AB0Ch case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215AB0Ch case    4:*/		return 0x8215AB10;
		  /* 8215AB10h */ case    5:  		/* bc 12, CR0_EQ, -1440 */
		/* 8215AB10h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215A570;  }
		/* 8215AB10h case    5:*/		return 0x8215AB14;
		  /* 8215AB14h */ case    6:  		/* lwz R4, <#[R1 + 256]> */
		/* 8215AB14h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000100) );
		/* 8215AB14h case    6:*/		return 0x8215AB18;
		  /* 8215AB18h */ case    7:  		/* b -1016 */
		/* 8215AB18h case    7:*/		return 0x8215A720;
		/* 8215AB18h case    7:*/		return 0x8215AB1C;
	}
	return 0x8215AB1C;
} // Block from 8215AAFCh-8215AB1Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215AB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AB1C);
		  /* 8215AB1Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8215AB1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215AB1Ch case    0:*/		return 0x8215AB20;
		  /* 8215AB20h */ case    1:  		/* bc 12, CR6_EQ, -1456 */
		/* 8215AB20h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215A570;  }
		/* 8215AB20h case    1:*/		return 0x8215AB24;
		  /* 8215AB24h */ case    2:  		/* mr R4, R24 */
		/* 8215AB24h case    2:*/		regs.R4 = regs.R24;
		/* 8215AB24h case    2:*/		return 0x8215AB28;
		  /* 8215AB28h */ case    3:  		/* mr R3, R31 */
		/* 8215AB28h case    3:*/		regs.R3 = regs.R31;
		/* 8215AB28h case    3:*/		return 0x8215AB2C;
		  /* 8215AB2Ch */ case    4:  		/* bl -11268 */
		/* 8215AB2Ch case    4:*/		regs.LR = 0x8215AB30; return 0x82157F28;
		/* 8215AB2Ch case    4:*/		return 0x8215AB30;
		  /* 8215AB30h */ case    5:  		/* mr R3, R31 */
		/* 8215AB30h case    5:*/		regs.R3 = regs.R31;
		/* 8215AB30h case    5:*/		return 0x8215AB34;
		  /* 8215AB34h */ case    6:  		/* lwz R4, <#[R1 + 264]> */
		/* 8215AB34h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000108) );
		/* 8215AB34h case    6:*/		return 0x8215AB38;
		  /* 8215AB38h */ case    7:  		/* bl -8992 */
		/* 8215AB38h case    7:*/		regs.LR = 0x8215AB3C; return 0x82158818;
		/* 8215AB38h case    7:*/		return 0x8215AB3C;
		  /* 8215AB3Ch */ case    8:  		/* mr R4, R21 */
		/* 8215AB3Ch case    8:*/		regs.R4 = regs.R21;
		/* 8215AB3Ch case    8:*/		return 0x8215AB40;
		  /* 8215AB40h */ case    9:  		/* mr R5, R29 */
		/* 8215AB40h case    9:*/		regs.R5 = regs.R29;
		/* 8215AB40h case    9:*/		return 0x8215AB44;
		  /* 8215AB44h */ case   10:  		/* b -1056 */
		/* 8215AB44h case   10:*/		return 0x8215A724;
		/* 8215AB44h case   10:*/		return 0x8215AB48;
	}
	return 0x8215AB48;
} // Block from 8215AB1Ch-8215AB48h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215AB48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AB48);
		  /* 8215AB48h */ case    0:  		/* mfspr R12, LR */
		/* 8215AB48h case    0:*/		regs.R12 = regs.LR;
		/* 8215AB48h case    0:*/		return 0x8215AB4C;
		  /* 8215AB4Ch */ case    1:  		/* bl -825592 */
		/* 8215AB4Ch case    1:*/		regs.LR = 0x8215AB50; return 0x82091254;
		/* 8215AB4Ch case    1:*/		return 0x8215AB50;
		  /* 8215AB50h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215AB50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215AB50h case    2:*/		return 0x8215AB54;
		  /* 8215AB54h */ case    3:  		/* li R9, 0 */
		/* 8215AB54h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8215AB54h case    3:*/		return 0x8215AB58;
		  /* 8215AB58h */ case    4:  		/* lis R11, -32253 */
		/* 8215AB58h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215AB58h case    4:*/		return 0x8215AB5C;
		  /* 8215AB5Ch */ case    5:  		/* lis R10, -32252 */
		/* 8215AB5Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215AB5Ch case    5:*/		return 0x8215AB60;
		  /* 8215AB60h */ case    6:  		/* stw R9, <#[R1 + 80]> */
		/* 8215AB60h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8215AB60h case    6:*/		return 0x8215AB64;
		  /* 8215AB64h */ case    7:  		/* mr R31, R3 */
		/* 8215AB64h case    7:*/		regs.R31 = regs.R3;
		/* 8215AB64h case    7:*/		return 0x8215AB68;
		  /* 8215AB68h */ case    8:  		/* mr R28, R4 */
		/* 8215AB68h case    8:*/		regs.R28 = regs.R4;
		/* 8215AB68h case    8:*/		return 0x8215AB6C;
		  /* 8215AB6Ch */ case    9:  		/* mr R27, R5 */
		/* 8215AB6Ch case    9:*/		regs.R27 = regs.R5;
		/* 8215AB6Ch case    9:*/		return 0x8215AB70;
		  /* 8215AB70h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8215AB70h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215AB70h case   10:*/		return 0x8215AB74;
		  /* 8215AB74h */ case   11:  		/* addi R30, R11, 27460 */
		/* 8215AB74h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215AB74h case   11:*/		return 0x8215AB78;
		  /* 8215AB78h */ case   12:  		/* addi R29, R10, -22136 */
		/* 8215AB78h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFA988);
		/* 8215AB78h case   12:*/		return 0x8215AB7C;
		  /* 8215AB7Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8215AB7Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8215AB9C;  }
		/* 8215AB7Ch case   13:*/		return 0x8215AB80;
		  /* 8215AB80h */ case   14:  		/* lis R11, -32252 */
		/* 8215AB80h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AB80h case   14:*/		return 0x8215AB84;
		  /* 8215AB84h */ case   15:  		/* mr R6, R29 */
		/* 8215AB84h case   15:*/		regs.R6 = regs.R29;
		/* 8215AB84h case   15:*/		return 0x8215AB88;
		  /* 8215AB88h */ case   16:  		/* addi R5, R11, -22152 */
		/* 8215AB88h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA978);
		/* 8215AB88h case   16:*/		return 0x8215AB8C;
		  /* 8215AB8Ch */ case   17:  		/* mr R4, R30 */
		/* 8215AB8Ch case   17:*/		regs.R4 = regs.R30;
		/* 8215AB8Ch case   17:*/		return 0x8215AB90;
		  /* 8215AB90h */ case   18:  		/* li R7, 265 */
		/* 8215AB90h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x109);
		/* 8215AB90h case   18:*/		return 0x8215AB94;
		  /* 8215AB94h */ case   19:  		/* li R3, 0 */
		/* 8215AB94h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AB94h case   19:*/		return 0x8215AB98;
		  /* 8215AB98h */ case   20:  		/* bl -12176 */
		/* 8215AB98h case   20:*/		regs.LR = 0x8215AB9C; return 0x82157C08;
		/* 8215AB98h case   20:*/		return 0x8215AB9C;
	}
	return 0x8215AB9C;
} // Block from 8215AB48h-8215AB9Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8215AB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AB9C);
		  /* 8215AB9Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215AB9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215AB9Ch case    0:*/		return 0x8215ABA0;
		  /* 8215ABA0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215ABA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215ABC0;  }
		/* 8215ABA0h case    1:*/		return 0x8215ABA4;
		  /* 8215ABA4h */ case    2:  		/* lis R11, -32252 */
		/* 8215ABA4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215ABA4h case    2:*/		return 0x8215ABA8;
		  /* 8215ABA8h */ case    3:  		/* mr R6, R29 */
		/* 8215ABA8h case    3:*/		regs.R6 = regs.R29;
		/* 8215ABA8h case    3:*/		return 0x8215ABAC;
		  /* 8215ABACh */ case    4:  		/* addi R5, R11, -22168 */
		/* 8215ABACh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA968);
		/* 8215ABACh case    4:*/		return 0x8215ABB0;
		  /* 8215ABB0h */ case    5:  		/* mr R4, R30 */
		/* 8215ABB0h case    5:*/		regs.R4 = regs.R30;
		/* 8215ABB0h case    5:*/		return 0x8215ABB4;
		  /* 8215ABB4h */ case    6:  		/* li R7, 266 */
		/* 8215ABB4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x10A);
		/* 8215ABB4h case    6:*/		return 0x8215ABB8;
		  /* 8215ABB8h */ case    7:  		/* li R3, 0 */
		/* 8215ABB8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ABB8h case    7:*/		return 0x8215ABBC;
		  /* 8215ABBCh */ case    8:  		/* bl -12212 */
		/* 8215ABBCh case    8:*/		regs.LR = 0x8215ABC0; return 0x82157C08;
		/* 8215ABBCh case    8:*/		return 0x8215ABC0;
	}
	return 0x8215ABC0;
} // Block from 8215AB9Ch-8215ABC0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215ABC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ABC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ABC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ABC0);
		  /* 8215ABC0h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8215ABC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215ABC0h case    0:*/		return 0x8215ABC4;
		  /* 8215ABC4h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8215ABC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215ABF0;  }
		/* 8215ABC4h case    1:*/		return 0x8215ABC8;
		  /* 8215ABC8h */ case    2:  		/* lis R11, -32252 */
		/* 8215ABC8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215ABC8h case    2:*/		return 0x8215ABCC;
		  /* 8215ABCCh */ case    3:  		/* mr R6, R29 */
		/* 8215ABCCh case    3:*/		regs.R6 = regs.R29;
		/* 8215ABCCh case    3:*/		return 0x8215ABD0;
		  /* 8215ABD0h */ case    4:  		/* addi R5, R11, -22188 */
		/* 8215ABD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA954);
		/* 8215ABD0h case    4:*/		return 0x8215ABD4;
		  /* 8215ABD4h */ case    5:  		/* mr R4, R30 */
		/* 8215ABD4h case    5:*/		regs.R4 = regs.R30;
		/* 8215ABD4h case    5:*/		return 0x8215ABD8;
		  /* 8215ABD8h */ case    6:  		/* li R7, 267 */
		/* 8215ABD8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x10B);
		/* 8215ABD8h case    6:*/		return 0x8215ABDC;
		  /* 8215ABDCh */ case    7:  		/* li R3, 0 */
		/* 8215ABDCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ABDCh case    7:*/		return 0x8215ABE0;
		  /* 8215ABE0h */ case    8:  		/* bl -12248 */
		/* 8215ABE0h case    8:*/		regs.LR = 0x8215ABE4; return 0x82157C08;
		/* 8215ABE0h case    8:*/		return 0x8215ABE4;
		  /* 8215ABE4h */ case    9:  		/* li R3, 0 */
		/* 8215ABE4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ABE4h case    9:*/		return 0x8215ABE8;
		  /* 8215ABE8h */ case   10:  		/* addi R1, R1, 144 */
		/* 8215ABE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215ABE8h case   10:*/		return 0x8215ABEC;
		  /* 8215ABECh */ case   11:  		/* b -825672 */
		/* 8215ABECh case   11:*/		return 0x820912A4;
		/* 8215ABECh case   11:*/		return 0x8215ABF0;
	}
	return 0x8215ABF0;
} // Block from 8215ABC0h-8215ABF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215ABF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ABF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ABF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ABF0);
		  /* 8215ABF0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215ABF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215ABF0h case    0:*/		return 0x8215ABF4;
		  /* 8215ABF4h */ case    1:  		/* bc 12, CR6_EQ, -16 */
		/* 8215ABF4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215ABE4;  }
		/* 8215ABF4h case    1:*/		return 0x8215ABF8;
		  /* 8215ABF8h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8215ABF8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215ABF8h case    2:*/		return 0x8215ABFC;
		  /* 8215ABFCh */ case    3:  		/* bc 12, CR6_EQ, -24 */
		/* 8215ABFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8215ABE4;  }
		/* 8215ABFCh case    3:*/		return 0x8215AC00;
		  /* 8215AC00h */ case    4:  		/* mr R3, R31 */
		/* 8215AC00h case    4:*/		regs.R3 = regs.R31;
		/* 8215AC00h case    4:*/		return 0x8215AC04;
		  /* 8215AC04h */ case    5:  		/* bl 16356 */
		/* 8215AC04h case    5:*/		regs.LR = 0x8215AC08; return 0x8215EBE8;
		/* 8215AC04h case    5:*/		return 0x8215AC08;
		  /* 8215AC08h */ case    6:  		/* addi R6, R1, 80 */
		/* 8215AC08h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8215AC08h case    6:*/		return 0x8215AC0C;
		  /* 8215AC0Ch */ case    7:  		/* mr R5, R27 */
		/* 8215AC0Ch case    7:*/		regs.R5 = regs.R27;
		/* 8215AC0Ch case    7:*/		return 0x8215AC10;
		  /* 8215AC10h */ case    8:  		/* mr R4, R28 */
		/* 8215AC10h case    8:*/		regs.R4 = regs.R28;
		/* 8215AC10h case    8:*/		return 0x8215AC14;
		  /* 8215AC14h */ case    9:  		/* bl 22156 */
		/* 8215AC14h case    9:*/		regs.LR = 0x8215AC18; return 0x821602A0;
		/* 8215AC14h case    9:*/		return 0x8215AC18;
		  /* 8215AC18h */ case   10:  		/* addic R11, R3, -1 */
		/* 8215AC18h case   10:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 8215AC18h case   10:*/		return 0x8215AC1C;
		  /* 8215AC1Ch */ case   11:  		/* lwz R10, <#[R1 + 80]> */
		/* 8215AC1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8215AC1Ch case   11:*/		return 0x8215AC20;
		  /* 8215AC20h */ case   12:  		/* subfe R11, R11, R11 */
		/* 8215AC20h case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8215AC20h case   12:*/		return 0x8215AC24;
		  /* 8215AC24h */ case   13:  		/* and R3, R11, R10 */
		/* 8215AC24h case   13:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8215AC24h case   13:*/		return 0x8215AC28;
		  /* 8215AC28h */ case   14:  		/* b -64 */
		/* 8215AC28h case   14:*/		return 0x8215ABE8;
		/* 8215AC28h case   14:*/		return 0x8215AC2C;
		  /* 8215AC2Ch */ case   15:  		/* nop */
		/* 8215AC2Ch case   15:*/		cpu::op::nop();
		/* 8215AC2Ch case   15:*/		return 0x8215AC30;
	}
	return 0x8215AC30;
} // Block from 8215ABF0h-8215AC30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215AC30h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AC30);
		  /* 8215AC30h */ case    0:  		/* mfspr R12, LR */
		/* 8215AC30h case    0:*/		regs.R12 = regs.LR;
		/* 8215AC30h case    0:*/		return 0x8215AC34;
		  /* 8215AC34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215AC34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215AC34h case    1:*/		return 0x8215AC38;
		  /* 8215AC38h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215AC38h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215AC38h case    2:*/		return 0x8215AC3C;
		  /* 8215AC3Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215AC3Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215AC3Ch case    3:*/		return 0x8215AC40;
		  /* 8215AC40h */ case    4:  		/* mr R31, R4 */
		/* 8215AC40h case    4:*/		regs.R31 = regs.R4;
		/* 8215AC40h case    4:*/		return 0x8215AC44;
		  /* 8215AC44h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215AC44h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215AC44h case    5:*/		return 0x8215AC48;
		  /* 8215AC48h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 8215AC48h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215AC74;  }
		/* 8215AC48h case    6:*/		return 0x8215AC4C;
		  /* 8215AC4Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215AC4Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AC4Ch case    7:*/		return 0x8215AC50;
		  /* 8215AC50h */ case    8:  		/* lis R10, -32252 */
		/* 8215AC50h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215AC50h case    8:*/		return 0x8215AC54;
		  /* 8215AC54h */ case    9:  		/* lis R9, -32253 */
		/* 8215AC54h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215AC54h case    9:*/		return 0x8215AC58;
		  /* 8215AC58h */ case   10:  		/* addi R6, R11, -22136 */
		/* 8215AC58h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFA988);
		/* 8215AC58h case   10:*/		return 0x8215AC5C;
		  /* 8215AC5Ch */ case   11:  		/* addi R5, R10, -22152 */
		/* 8215AC5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA978);
		/* 8215AC5Ch case   11:*/		return 0x8215AC60;
		  /* 8215AC60h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215AC60h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215AC60h case   12:*/		return 0x8215AC64;
		  /* 8215AC64h */ case   13:  		/* li R7, 391 */
		/* 8215AC64h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x187);
		/* 8215AC64h case   13:*/		return 0x8215AC68;
		  /* 8215AC68h */ case   14:  		/* bl -12384 */
		/* 8215AC68h case   14:*/		regs.LR = 0x8215AC6C; return 0x82157C08;
		/* 8215AC68h case   14:*/		return 0x8215AC6C;
		  /* 8215AC6Ch */ case   15:  		/* li R3, 0 */
		/* 8215AC6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AC6Ch case   15:*/		return 0x8215AC70;
		  /* 8215AC70h */ case   16:  		/* b 20 */
		/* 8215AC70h case   16:*/		return 0x8215AC84;
		/* 8215AC70h case   16:*/		return 0x8215AC74;
	}
	return 0x8215AC74;
} // Block from 8215AC30h-8215AC74h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215AC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AC74);
		  /* 8215AC74h */ case    0:  		/* bl 16244 */
		/* 8215AC74h case    0:*/		regs.LR = 0x8215AC78; return 0x8215EBE8;
		/* 8215AC74h case    0:*/		return 0x8215AC78;
		  /* 8215AC78h */ case    1:  		/* addi R5, R1, 80 */
		/* 8215AC78h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215AC78h case    1:*/		return 0x8215AC7C;
		  /* 8215AC7Ch */ case    2:  		/* mr R4, R31 */
		/* 8215AC7Ch case    2:*/		regs.R4 = regs.R31;
		/* 8215AC7Ch case    2:*/		return 0x8215AC80;
		  /* 8215AC80h */ case    3:  		/* bl 20504 */
		/* 8215AC80h case    3:*/		regs.LR = 0x8215AC84; return 0x8215FC98;
		/* 8215AC80h case    3:*/		return 0x8215AC84;
	}
	return 0x8215AC84;
} // Block from 8215AC74h-8215AC84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215AC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AC84);
		  /* 8215AC84h */ case    0:  		/* addi R1, R1, 112 */
		/* 8215AC84h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215AC84h case    0:*/		return 0x8215AC88;
		  /* 8215AC88h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215AC88h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215AC88h case    1:*/		return 0x8215AC8C;
		  /* 8215AC8Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8215AC8Ch case    2:*/		regs.LR = regs.R12;
		/* 8215AC8Ch case    2:*/		return 0x8215AC90;
		  /* 8215AC90h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8215AC90h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215AC90h case    3:*/		return 0x8215AC94;
		  /* 8215AC94h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8215AC94h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215AC94h case    4:*/		return 0x8215AC98;
	}
	return 0x8215AC98;
} // Block from 8215AC84h-8215AC98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215AC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AC98);
		  /* 8215AC98h */ case    0:  		/* mfspr R12, LR */
		/* 8215AC98h case    0:*/		regs.R12 = regs.LR;
		/* 8215AC98h case    0:*/		return 0x8215AC9C;
		  /* 8215AC9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215AC9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215AC9Ch case    1:*/		return 0x8215ACA0;
		  /* 8215ACA0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215ACA0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215ACA0h case    2:*/		return 0x8215ACA4;
		  /* 8215ACA4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215ACA4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215ACA4h case    3:*/		return 0x8215ACA8;
		  /* 8215ACA8h */ case    4:  		/* mr R31, R3 */
		/* 8215ACA8h case    4:*/		regs.R31 = regs.R3;
		/* 8215ACA8h case    4:*/		return 0x8215ACAC;
		  /* 8215ACACh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215ACACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215ACACh case    5:*/		return 0x8215ACB0;
		  /* 8215ACB0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215ACB0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215ACD4;  }
		/* 8215ACB0h case    6:*/		return 0x8215ACB4;
		  /* 8215ACB4h */ case    7:  		/* lis R11, -32253 */
		/* 8215ACB4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215ACB4h case    7:*/		return 0x8215ACB8;
		  /* 8215ACB8h */ case    8:  		/* lis R10, -32253 */
		/* 8215ACB8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215ACB8h case    8:*/		return 0x8215ACBC;
		  /* 8215ACBCh */ case    9:  		/* lis R9, -32253 */
		/* 8215ACBCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215ACBCh case    9:*/		return 0x8215ACC0;
		  /* 8215ACC0h */ case   10:  		/* addi R6, R11, 27808 */
		/* 8215ACC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6CA0);
		/* 8215ACC0h case   10:*/		return 0x8215ACC4;
		  /* 8215ACC4h */ case   11:  		/* addi R5, R10, 27792 */
		/* 8215ACC4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C90);
		/* 8215ACC4h case   11:*/		return 0x8215ACC8;
		  /* 8215ACC8h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215ACC8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215ACC8h case   12:*/		return 0x8215ACCC;
		  /* 8215ACCCh */ case   13:  		/* li R7, 241 */
		/* 8215ACCCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xF1);
		/* 8215ACCCh case   13:*/		return 0x8215ACD0;
		  /* 8215ACD0h */ case   14:  		/* bl -12488 */
		/* 8215ACD0h case   14:*/		regs.LR = 0x8215ACD4; return 0x82157C08;
		/* 8215ACD0h case   14:*/		return 0x8215ACD4;
	}
	return 0x8215ACD4;
} // Block from 8215AC98h-8215ACD4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215ACD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ACD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ACD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ACD4);
		  /* 8215ACD4h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215ACD4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215ACD4h case    0:*/		return 0x8215ACD8;
		  /* 8215ACD8h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215ACD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215ACD8h case    1:*/		return 0x8215ACDC;
		  /* 8215ACDCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215ACDCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215ACDCh case    2:*/		return 0x8215ACE0;
		  /* 8215ACE0h */ case    3:  		/* mtspr LR, R12 */
		/* 8215ACE0h case    3:*/		regs.LR = regs.R12;
		/* 8215ACE0h case    3:*/		return 0x8215ACE4;
		  /* 8215ACE4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215ACE4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215ACE4h case    4:*/		return 0x8215ACE8;
		  /* 8215ACE8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215ACE8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215ACE8h case    5:*/		return 0x8215ACEC;
	}
	return 0x8215ACEC;
} // Block from 8215ACD4h-8215ACECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215ACECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ACEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ACEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ACEC);
		  /* 8215ACECh */ case    0:  		/* nop */
		/* 8215ACECh case    0:*/		cpu::op::nop();
		/* 8215ACECh case    0:*/		return 0x8215ACF0;
	}
	return 0x8215ACF0;
} // Block from 8215ACECh-8215ACF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215ACF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ACF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ACF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ACF0);
		  /* 8215ACF0h */ case    0:  		/* mfspr R12, LR */
		/* 8215ACF0h case    0:*/		regs.R12 = regs.LR;
		/* 8215ACF0h case    0:*/		return 0x8215ACF4;
		  /* 8215ACF4h */ case    1:  		/* bl -826052 */
		/* 8215ACF4h case    1:*/		regs.LR = 0x8215ACF8; return 0x82091230;
		/* 8215ACF4h case    1:*/		return 0x8215ACF8;
		  /* 8215ACF8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8215ACF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8215ACF8h case    2:*/		return 0x8215ACFC;
		  /* 8215ACFCh */ case    3:  		/* mr R19, R3 */
		/* 8215ACFCh case    3:*/		regs.R19 = regs.R3;
		/* 8215ACFCh case    3:*/		return 0x8215AD00;
		  /* 8215AD00h */ case    4:  		/* mr R3, R4 */
		/* 8215AD00h case    4:*/		regs.R3 = regs.R4;
		/* 8215AD00h case    4:*/		return 0x8215AD04;
		  /* 8215AD04h */ case    5:  		/* mr R24, R4 */
		/* 8215AD04h case    5:*/		regs.R24 = regs.R4;
		/* 8215AD04h case    5:*/		return 0x8215AD08;
		  /* 8215AD08h */ case    6:  		/* bl -112 */
		/* 8215AD08h case    6:*/		regs.LR = 0x8215AD0C; return 0x8215AC98;
		/* 8215AD08h case    6:*/		return 0x8215AD0C;
		  /* 8215AD0Ch */ case    7:  		/* or. R31, R3, R3 */
		/* 8215AD0Ch case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215AD0Ch case    7:*/		return 0x8215AD10;
		  /* 8215AD10h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 8215AD10h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215AD1C;  }
		/* 8215AD10h case    8:*/		return 0x8215AD14;
		  /* 8215AD14h */ case    9:  		/* li R3, 22 */
		/* 8215AD14h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x16);
		/* 8215AD14h case    9:*/		return 0x8215AD18;
		  /* 8215AD18h */ case   10:  		/* b 504 */
		/* 8215AD18h case   10:*/		return 0x8215AF10;
		/* 8215AD18h case   10:*/		return 0x8215AD1C;
	}
	return 0x8215AD1C;
} // Block from 8215ACF0h-8215AD1Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215AD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AD1C);
		  /* 8215AD1Ch */ case    0:  		/* mr R3, R31 */
		/* 8215AD1Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215AD1Ch case    0:*/		return 0x8215AD20;
		  /* 8215AD20h */ case    1:  		/* bl 18664 */
		/* 8215AD20h case    1:*/		regs.LR = 0x8215AD24; return 0x8215F608;
		/* 8215AD20h case    1:*/		return 0x8215AD24;
		  /* 8215AD24h */ case    2:  		/* bl 16068 */
		/* 8215AD24h case    2:*/		regs.LR = 0x8215AD28; return 0x8215EBE8;
		/* 8215AD24h case    2:*/		return 0x8215AD28;
		  /* 8215AD28h */ case    3:  		/* mr R20, R3 */
		/* 8215AD28h case    3:*/		regs.R20 = regs.R3;
		/* 8215AD28h case    3:*/		return 0x8215AD2C;
		  /* 8215AD2Ch */ case    4:  		/* mr R3, R31 */
		/* 8215AD2Ch case    4:*/		regs.R3 = regs.R31;
		/* 8215AD2Ch case    4:*/		return 0x8215AD30;
		  /* 8215AD30h */ case    5:  		/* bl 18648 */
		/* 8215AD30h case    5:*/		regs.LR = 0x8215AD34; return 0x8215F608;
		/* 8215AD30h case    5:*/		return 0x8215AD34;
		  /* 8215AD34h */ case    6:  		/* bl 16076 */
		/* 8215AD34h case    6:*/		regs.LR = 0x8215AD38; return 0x8215EC00;
		/* 8215AD34h case    6:*/		return 0x8215AD38;
		  /* 8215AD38h */ case    7:  		/* mr R18, R3 */
		/* 8215AD38h case    7:*/		regs.R18 = regs.R3;
		/* 8215AD38h case    7:*/		return 0x8215AD3C;
		  /* 8215AD3Ch */ case    8:  		/* mr R3, R31 */
		/* 8215AD3Ch case    8:*/		regs.R3 = regs.R31;
		/* 8215AD3Ch case    8:*/		return 0x8215AD40;
		  /* 8215AD40h */ case    9:  		/* bl 18632 */
		/* 8215AD40h case    9:*/		regs.LR = 0x8215AD44; return 0x8215F608;
		/* 8215AD40h case    9:*/		return 0x8215AD44;
		  /* 8215AD44h */ case   10:  		/* bl 16044 */
		/* 8215AD44h case   10:*/		regs.LR = 0x8215AD48; return 0x8215EBF0;
		/* 8215AD44h case   10:*/		return 0x8215AD48;
		  /* 8215AD48h */ case   11:  		/* mr R29, R3 */
		/* 8215AD48h case   11:*/		regs.R29 = regs.R3;
		/* 8215AD48h case   11:*/		return 0x8215AD4C;
		  /* 8215AD4Ch */ case   12:  		/* mr R3, R31 */
		/* 8215AD4Ch case   12:*/		regs.R3 = regs.R31;
		/* 8215AD4Ch case   12:*/		return 0x8215AD50;
		  /* 8215AD50h */ case   13:  		/* bl 18616 */
		/* 8215AD50h case   13:*/		regs.LR = 0x8215AD54; return 0x8215F608;
		/* 8215AD50h case   13:*/		return 0x8215AD54;
		  /* 8215AD54h */ case   14:  		/* bl 16060 */
		/* 8215AD54h case   14:*/		regs.LR = 0x8215AD58; return 0x8215EC10;
		/* 8215AD54h case   14:*/		return 0x8215AD58;
		  /* 8215AD58h */ case   15:  		/* mr R23, R3 */
		/* 8215AD58h case   15:*/		regs.R23 = regs.R3;
		/* 8215AD58h case   15:*/		return 0x8215AD5C;
		  /* 8215AD5Ch */ case   16:  		/* mr R3, R31 */
		/* 8215AD5Ch case   16:*/		regs.R3 = regs.R31;
		/* 8215AD5Ch case   16:*/		return 0x8215AD60;
		  /* 8215AD60h */ case   17:  		/* bl 18600 */
		/* 8215AD60h case   17:*/		regs.LR = 0x8215AD64; return 0x8215F608;
		/* 8215AD60h case   17:*/		return 0x8215AD64;
		  /* 8215AD64h */ case   18:  		/* bl 16052 */
		/* 8215AD64h case   18:*/		regs.LR = 0x8215AD68; return 0x8215EC18;
		/* 8215AD64h case   18:*/		return 0x8215AD68;
		  /* 8215AD68h */ case   19:  		/* mr R22, R3 */
		/* 8215AD68h case   19:*/		regs.R22 = regs.R3;
		/* 8215AD68h case   19:*/		return 0x8215AD6C;
		  /* 8215AD6Ch */ case   20:  		/* mr R3, R31 */
		/* 8215AD6Ch case   20:*/		regs.R3 = regs.R31;
		/* 8215AD6Ch case   20:*/		return 0x8215AD70;
		  /* 8215AD70h */ case   21:  		/* bl 18584 */
		/* 8215AD70h case   21:*/		regs.LR = 0x8215AD74; return 0x8215F608;
		/* 8215AD70h case   21:*/		return 0x8215AD74;
		  /* 8215AD74h */ case   22:  		/* bl 16044 */
		/* 8215AD74h case   22:*/		regs.LR = 0x8215AD78; return 0x8215EC20;
		/* 8215AD74h case   22:*/		return 0x8215AD78;
		  /* 8215AD78h */ case   23:  		/* mr R21, R3 */
		/* 8215AD78h case   23:*/		regs.R21 = regs.R3;
		/* 8215AD78h case   23:*/		return 0x8215AD7C;
		  /* 8215AD7Ch */ case   24:  		/* mr R3, R31 */
		/* 8215AD7Ch case   24:*/		regs.R3 = regs.R31;
		/* 8215AD7Ch case   24:*/		return 0x8215AD80;
		  /* 8215AD80h */ case   25:  		/* bl 18568 */
		/* 8215AD80h case   25:*/		regs.LR = 0x8215AD84; return 0x8215F608;
		/* 8215AD80h case   25:*/		return 0x8215AD84;
		  /* 8215AD84h */ case   26:  		/* bl 16004 */
		/* 8215AD84h case   26:*/		regs.LR = 0x8215AD88; return 0x8215EC08;
		/* 8215AD84h case   26:*/		return 0x8215AD88;
		  /* 8215AD88h */ case   27:  		/* mr R27, R3 */
		/* 8215AD88h case   27:*/		regs.R27 = regs.R3;
		/* 8215AD88h case   27:*/		return 0x8215AD8C;
		  /* 8215AD8Ch */ case   28:  		/* mr R3, R31 */
		/* 8215AD8Ch case   28:*/		regs.R3 = regs.R31;
		/* 8215AD8Ch case   28:*/		return 0x8215AD90;
		  /* 8215AD90h */ case   29:  		/* bl 18552 */
		/* 8215AD90h case   29:*/		regs.LR = 0x8215AD94; return 0x8215F608;
		/* 8215AD90h case   29:*/		return 0x8215AD94;
		  /* 8215AD94h */ case   30:  		/* bl 796204 */
		/* 8215AD94h case   30:*/		regs.LR = 0x8215AD98; return 0x8221D3C0;
		/* 8215AD94h case   30:*/		return 0x8215AD98;
		  /* 8215AD98h */ case   31:  		/* mr R28, R3 */
		/* 8215AD98h case   31:*/		regs.R28 = regs.R3;
		/* 8215AD98h case   31:*/		return 0x8215AD9C;
		  /* 8215AD9Ch */ case   32:  		/* li R4, 9 */
		/* 8215AD9Ch case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 8215AD9Ch case   32:*/		return 0x8215ADA0;
		  /* 8215ADA0h */ case   33:  		/* mr R3, R27 */
		/* 8215ADA0h case   33:*/		regs.R3 = regs.R27;
		/* 8215ADA0h case   33:*/		return 0x8215ADA4;
		  /* 8215ADA4h */ case   34:  		/* bl 717796 */
		/* 8215ADA4h case   34:*/		regs.LR = 0x8215ADA8; return 0x8220A188;
		/* 8215ADA4h case   34:*/		return 0x8215ADA8;
		  /* 8215ADA8h */ case   35:  		/* cmplwi CR0, R3, 0 */
		/* 8215ADA8h case   35:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215ADA8h case   35:*/		return 0x8215ADAC;
		  /* 8215ADACh */ case   36:  		/* bc 4, CR0_EQ, 12 */
		/* 8215ADACh case   36:*/		if ( !regs.CR[0].eq ) { return 0x8215ADB8;  }
		/* 8215ADACh case   36:*/		return 0x8215ADB0;
		  /* 8215ADB0h */ case   37:  		/* li R3, 0 */
		/* 8215ADB0h case   37:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ADB0h case   37:*/		return 0x8215ADB4;
		  /* 8215ADB4h */ case   38:  		/* b 348 */
		/* 8215ADB4h case   38:*/		return 0x8215AF10;
		/* 8215ADB4h case   38:*/		return 0x8215ADB8;
	}
	return 0x8215ADB8;
} // Block from 8215AD1Ch-8215ADB8h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8215ADB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ADB8);
		  /* 8215ADB8h */ case    0:  		/* li R4, 1 */
		/* 8215ADB8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8215ADB8h case    0:*/		return 0x8215ADBC;
		  /* 8215ADBCh */ case    1:  		/* mr R3, R27 */
		/* 8215ADBCh case    1:*/		regs.R3 = regs.R27;
		/* 8215ADBCh case    1:*/		return 0x8215ADC0;
		  /* 8215ADC0h */ case    2:  		/* bl 717768 */
		/* 8215ADC0h case    2:*/		regs.LR = 0x8215ADC4; return 0x8220A188;
		/* 8215ADC0h case    2:*/		return 0x8215ADC4;
		  /* 8215ADC4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215ADC4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215ADC4h case    3:*/		return 0x8215ADC8;
		  /* 8215ADC8h */ case    4:  		/* bc 4, CR0_EQ, -24 */
		/* 8215ADC8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8215ADB0;  }
		/* 8215ADC8h case    4:*/		return 0x8215ADCC;
		  /* 8215ADCCh */ case    5:  		/* mr R4, R19 */
		/* 8215ADCCh case    5:*/		regs.R4 = regs.R19;
		/* 8215ADCCh case    5:*/		return 0x8215ADD0;
		  /* 8215ADD0h */ case    6:  		/* mr R3, R20 */
		/* 8215ADD0h case    6:*/		regs.R3 = regs.R20;
		/* 8215ADD0h case    6:*/		return 0x8215ADD4;
		  /* 8215ADD4h */ case    7:  		/* bl 20836 */
		/* 8215ADD4h case    7:*/		regs.LR = 0x8215ADD8; return 0x8215FF38;
		/* 8215ADD4h case    7:*/		return 0x8215ADD8;
		  /* 8215ADD8h */ case    8:  		/* mr R30, R3 */
		/* 8215ADD8h case    8:*/		regs.R30 = regs.R3;
		/* 8215ADD8h case    8:*/		return 0x8215ADDC;
		  /* 8215ADDCh */ case    9:  		/* bl 7268 */
		/* 8215ADDCh case    9:*/		regs.LR = 0x8215ADE0; return 0x8215CA40;
		/* 8215ADDCh case    9:*/		return 0x8215ADE0;
		  /* 8215ADE0h */ case   10:  		/* b 40 */
		/* 8215ADE0h case   10:*/		return 0x8215AE08;
		/* 8215ADE0h case   10:*/		return 0x8215ADE4;
		  /* 8215ADE4h */ case   11:  		/* mr R3, R31 */
		/* 8215ADE4h case   11:*/		regs.R3 = regs.R31;
		/* 8215ADE4h case   11:*/		return 0x8215ADE8;
		  /* 8215ADE8h */ case   12:  		/* bl 8200 */
		/* 8215ADE8h case   12:*/		regs.LR = 0x8215ADEC; return 0x8215CDF0;
		/* 8215ADE8h case   12:*/		return 0x8215ADEC;
		  /* 8215ADECh */ case   13:  		/* mr R4, R24 */
		/* 8215ADECh case   13:*/		regs.R4 = regs.R24;
		/* 8215ADECh case   13:*/		return 0x8215ADF0;
		  /* 8215ADF0h */ case   14:  		/* bl 12152 */
		/* 8215ADF0h case   14:*/		regs.LR = 0x8215ADF4; return 0x8215DD68;
		/* 8215ADF0h case   14:*/		return 0x8215ADF4;
		  /* 8215ADF4h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8215ADF4h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215ADF4h case   15:*/		return 0x8215ADF8;
		  /* 8215ADF8h */ case   16:  		/* bc 4, CR0_EQ, -72 */
		/* 8215ADF8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8215ADB0;  }
		/* 8215ADF8h case   16:*/		return 0x8215ADFC;
		  /* 8215ADFCh */ case   17:  		/* mr R4, R31 */
		/* 8215ADFCh case   17:*/		regs.R4 = regs.R31;
		/* 8215ADFCh case   17:*/		return 0x8215AE00;
		  /* 8215AE00h */ case   18:  		/* mr R3, R30 */
		/* 8215AE00h case   18:*/		regs.R3 = regs.R30;
		/* 8215AE00h case   18:*/		return 0x8215AE04;
		  /* 8215AE04h */ case   19:  		/* bl 7996 */
		/* 8215AE04h case   19:*/		regs.LR = 0x8215AE08; return 0x8215CD40;
		/* 8215AE04h case   19:*/		return 0x8215AE08;
	}
	return 0x8215AE08;
} // Block from 8215ADB8h-8215AE08h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215AE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AE08);
		  /* 8215AE08h */ case    0:  		/* or. R31, R3, R3 */
		/* 8215AE08h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215AE08h case    0:*/		return 0x8215AE0C;
		  /* 8215AE0Ch */ case    1:  		/* bc 4, CR0_EQ, -40 */
		/* 8215AE0Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8215ADE4;  }
		/* 8215AE0Ch case    1:*/		return 0x8215AE10;
		  /* 8215AE10h */ case    2:  		/* mr R4, R24 */
		/* 8215AE10h case    2:*/		regs.R4 = regs.R24;
		/* 8215AE10h case    2:*/		return 0x8215AE14;
		  /* 8215AE14h */ case    3:  		/* mr R3, R29 */
		/* 8215AE14h case    3:*/		regs.R3 = regs.R29;
		/* 8215AE14h case    3:*/		return 0x8215AE18;
		  /* 8215AE18h */ case    4:  		/* bl 717104 */
		/* 8215AE18h case    4:*/		regs.LR = 0x8215AE1C; return 0x82209F48;
		/* 8215AE18h case    4:*/		return 0x8215AE1C;
		  /* 8215AE1Ch */ case    5:  		/* lis R10, -32253 */
		/* 8215AE1Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215AE1Ch case    5:*/		return 0x8215AE20;
		  /* 8215AE20h */ case    6:  		/* lis R9, -32252 */
		/* 8215AE20h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215AE20h case    6:*/		return 0x8215AE24;
		  /* 8215AE24h */ case    7:  		/* lis R11, -32252 */
		/* 8215AE24h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AE24h case    7:*/		return 0x8215AE28;
		  /* 8215AE28h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8215AE28h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215AE28h case    8:*/		return 0x8215AE2C;
		  /* 8215AE2Ch */ case    9:  		/* addi R29, R10, 27460 */
		/* 8215AE2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x6B44);
		/* 8215AE2Ch case    9:*/		return 0x8215AE30;
		  /* 8215AE30h */ case   10:  		/* addi R25, R9, -22032 */
		/* 8215AE30h case   10:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0xFFFFA9F0);
		/* 8215AE30h case   10:*/		return 0x8215AE34;
		  /* 8215AE34h */ case   11:  		/* addi R26, R11, -22136 */
		/* 8215AE34h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFA988);
		/* 8215AE34h case   11:*/		return 0x8215AE38;
		  /* 8215AE38h */ case   12:  		/* bc 12, CR0_EQ, 28 */
		/* 8215AE38h case   12:*/		if ( regs.CR[0].eq ) { return 0x8215AE54;  }
		/* 8215AE38h case   12:*/		return 0x8215AE3C;
		  /* 8215AE3Ch */ case   13:  		/* mr R6, R26 */
		/* 8215AE3Ch case   13:*/		regs.R6 = regs.R26;
		/* 8215AE3Ch case   13:*/		return 0x8215AE40;
		  /* 8215AE40h */ case   14:  		/* mr R5, R25 */
		/* 8215AE40h case   14:*/		regs.R5 = regs.R25;
		/* 8215AE40h case   14:*/		return 0x8215AE44;
		  /* 8215AE44h */ case   15:  		/* mr R4, R29 */
		/* 8215AE44h case   15:*/		regs.R4 = regs.R29;
		/* 8215AE44h case   15:*/		return 0x8215AE48;
		  /* 8215AE48h */ case   16:  		/* li R7, 520 */
		/* 8215AE48h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x208);
		/* 8215AE48h case   16:*/		return 0x8215AE4C;
		  /* 8215AE4Ch */ case   17:  		/* li R3, 0 */
		/* 8215AE4Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AE4Ch case   17:*/		return 0x8215AE50;
		  /* 8215AE50h */ case   18:  		/* bl -12872 */
		/* 8215AE50h case   18:*/		regs.LR = 0x8215AE54; return 0x82157C08;
		/* 8215AE50h case   18:*/		return 0x8215AE54;
	}
	return 0x8215AE54;
} // Block from 8215AE08h-8215AE54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215AE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AE54);
		  /* 8215AE54h */ case    0:  		/* li R10, 1 */
		/* 8215AE54h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8215AE54h case    0:*/		return 0x8215AE58;
		  /* 8215AE58h */ case    1:  		/* lwz R5, <#[R28 + 24]> */
		/* 8215AE58h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000018) );
		/* 8215AE58h case    1:*/		return 0x8215AE5C;
		  /* 8215AE5Ch */ case    2:  		/* mr R9, R21 */
		/* 8215AE5Ch case    2:*/		regs.R9 = regs.R21;
		/* 8215AE5Ch case    2:*/		return 0x8215AE60;
		  /* 8215AE60h */ case    3:  		/* lwz R4, <#[R28 + 20]> */
		/* 8215AE60h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000014) );
		/* 8215AE60h case    3:*/		return 0x8215AE64;
		  /* 8215AE64h */ case    4:  		/* mr R8, R22 */
		/* 8215AE64h case    4:*/		regs.R8 = regs.R22;
		/* 8215AE64h case    4:*/		return 0x8215AE68;
		  /* 8215AE68h */ case    5:  		/* lwz R3, <#[R28 + 16]> */
		/* 8215AE68h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8215AE68h case    5:*/		return 0x8215AE6C;
		  /* 8215AE6Ch */ case    6:  		/* mr R7, R23 */
		/* 8215AE6Ch case    6:*/		regs.R7 = regs.R23;
		/* 8215AE6Ch case    6:*/		return 0x8215AE70;
		  /* 8215AE70h */ case    7:  		/* mr R6, R27 */
		/* 8215AE70h case    7:*/		regs.R6 = regs.R27;
		/* 8215AE70h case    7:*/		return 0x8215AE74;
		  /* 8215AE74h */ case    8:  		/* bl 8652 */
		/* 8215AE74h case    8:*/		regs.LR = 0x8215AE78; return 0x8215D040;
		/* 8215AE74h case    8:*/		return 0x8215AE78;
		  /* 8215AE78h */ case    9:  		/* or. R31, R3, R3 */
		/* 8215AE78h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215AE78h case    9:*/		return 0x8215AE7C;
		  /* 8215AE7Ch */ case   10:  		/* bc 4, CR0_EQ, 40 */
		/* 8215AE7Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8215AEA4;  }
		/* 8215AE7Ch case   10:*/		return 0x8215AE80;
		  /* 8215AE80h */ case   11:  		/* lis R11, -32252 */
		/* 8215AE80h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AE80h case   11:*/		return 0x8215AE84;
		  /* 8215AE84h */ case   12:  		/* mr R6, R26 */
		/* 8215AE84h case   12:*/		regs.R6 = regs.R26;
		/* 8215AE84h case   12:*/		return 0x8215AE88;
		  /* 8215AE88h */ case   13:  		/* addi R5, R11, -22036 */
		/* 8215AE88h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215AE88h case   13:*/		return 0x8215AE8C;
		  /* 8215AE8Ch */ case   14:  		/* mr R4, R29 */
		/* 8215AE8Ch case   14:*/		regs.R4 = regs.R29;
		/* 8215AE8Ch case   14:*/		return 0x8215AE90;
		  /* 8215AE90h */ case   15:  		/* li R7, 531 */
		/* 8215AE90h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x213);
		/* 8215AE90h case   15:*/		return 0x8215AE94;
		  /* 8215AE94h */ case   16:  		/* li R3, 0 */
		/* 8215AE94h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AE94h case   16:*/		return 0x8215AE98;
		  /* 8215AE98h */ case   17:  		/* bl -12944 */
		/* 8215AE98h case   17:*/		regs.LR = 0x8215AE9C; return 0x82157C08;
		/* 8215AE98h case   17:*/		return 0x8215AE9C;
		  /* 8215AE9Ch */ case   18:  		/* li R3, 16 */
		/* 8215AE9Ch case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215AE9Ch case   18:*/		return 0x8215AEA0;
		  /* 8215AEA0h */ case   19:  		/* b 112 */
		/* 8215AEA0h case   19:*/		return 0x8215AF10;
		/* 8215AEA0h case   19:*/		return 0x8215AEA4;
	}
	return 0x8215AEA4;
} // Block from 8215AE54h-8215AEA4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215AEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AEA4);
		  /* 8215AEA4h */ case    0:  		/* mr R4, R19 */
		/* 8215AEA4h case    0:*/		regs.R4 = regs.R19;
		/* 8215AEA4h case    0:*/		return 0x8215AEA8;
		  /* 8215AEA8h */ case    1:  		/* mr R3, R31 */
		/* 8215AEA8h case    1:*/		regs.R3 = regs.R31;
		/* 8215AEA8h case    1:*/		return 0x8215AEAC;
		  /* 8215AEACh */ case    2:  		/* bl 9980 */
		/* 8215AEACh case    2:*/		regs.LR = 0x8215AEB0; return 0x8215D5A8;
		/* 8215AEACh case    2:*/		return 0x8215AEB0;
		  /* 8215AEB0h */ case    3:  		/* mr R6, R31 */
		/* 8215AEB0h case    3:*/		regs.R6 = regs.R31;
		/* 8215AEB0h case    3:*/		return 0x8215AEB4;
		  /* 8215AEB4h */ case    4:  		/* mr R5, R24 */
		/* 8215AEB4h case    4:*/		regs.R5 = regs.R24;
		/* 8215AEB4h case    4:*/		return 0x8215AEB8;
		  /* 8215AEB8h */ case    5:  		/* mr R4, R19 */
		/* 8215AEB8h case    5:*/		regs.R4 = regs.R19;
		/* 8215AEB8h case    5:*/		return 0x8215AEBC;
		  /* 8215AEBCh */ case    6:  		/* mr R3, R18 */
		/* 8215AEBCh case    6:*/		regs.R3 = regs.R18;
		/* 8215AEBCh case    6:*/		return 0x8215AEC0;
		  /* 8215AEC0h */ case    7:  		/* bl 23296 */
		/* 8215AEC0h case    7:*/		regs.LR = 0x8215AEC4; return 0x821609C0;
		/* 8215AEC0h case    7:*/		return 0x8215AEC4;
		  /* 8215AEC4h */ case    8:  		/* or. R30, R3, R3 */
		/* 8215AEC4h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215AEC4h case    8:*/		return 0x8215AEC8;
		  /* 8215AEC8h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8215AEC8h case    9:*/		if ( regs.CR[0].eq ) { return 0x8215AEDC;  }
		/* 8215AEC8h case    9:*/		return 0x8215AECC;
		  /* 8215AECCh */ case   10:  		/* mr R3, R31 */
		/* 8215AECCh case   10:*/		regs.R3 = regs.R31;
		/* 8215AECCh case   10:*/		return 0x8215AED0;
		  /* 8215AED0h */ case   11:  		/* bl 9032 */
		/* 8215AED0h case   11:*/		regs.LR = 0x8215AED4; return 0x8215D218;
		/* 8215AED0h case   11:*/		return 0x8215AED4;
		  /* 8215AED4h */ case   12:  		/* mr R3, R30 */
		/* 8215AED4h case   12:*/		regs.R3 = regs.R30;
		/* 8215AED4h case   12:*/		return 0x8215AED8;
		  /* 8215AED8h */ case   13:  		/* b 56 */
		/* 8215AED8h case   13:*/		return 0x8215AF10;
		/* 8215AED8h case   13:*/		return 0x8215AEDC;
	}
	return 0x8215AEDC;
} // Block from 8215AEA4h-8215AEDCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215AEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AEDC);
		  /* 8215AEDCh */ case    0:  		/* mr R5, R31 */
		/* 8215AEDCh case    0:*/		regs.R5 = regs.R31;
		/* 8215AEDCh case    0:*/		return 0x8215AEE0;
		  /* 8215AEE0h */ case    1:  		/* mr R4, R19 */
		/* 8215AEE0h case    1:*/		regs.R4 = regs.R19;
		/* 8215AEE0h case    1:*/		return 0x8215AEE4;
		  /* 8215AEE4h */ case    2:  		/* mr R3, R20 */
		/* 8215AEE4h case    2:*/		regs.R3 = regs.R20;
		/* 8215AEE4h case    2:*/		return 0x8215AEE8;
		  /* 8215AEE8h */ case    3:  		/* bl 20336 */
		/* 8215AEE8h case    3:*/		regs.LR = 0x8215AEEC; return 0x8215FE58;
		/* 8215AEE8h case    3:*/		return 0x8215AEEC;
		  /* 8215AEECh */ case    4:  		/* or. R31, R3, R3 */
		/* 8215AEECh case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215AEECh case    4:*/		return 0x8215AEF0;
		  /* 8215AEF0h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 8215AEF0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215AF0C;  }
		/* 8215AEF0h case    5:*/		return 0x8215AEF4;
		  /* 8215AEF4h */ case    6:  		/* mr R6, R26 */
		/* 8215AEF4h case    6:*/		regs.R6 = regs.R26;
		/* 8215AEF4h case    6:*/		return 0x8215AEF8;
		  /* 8215AEF8h */ case    7:  		/* mr R5, R25 */
		/* 8215AEF8h case    7:*/		regs.R5 = regs.R25;
		/* 8215AEF8h case    7:*/		return 0x8215AEFC;
		  /* 8215AEFCh */ case    8:  		/* mr R4, R29 */
		/* 8215AEFCh case    8:*/		regs.R4 = regs.R29;
		/* 8215AEFCh case    8:*/		return 0x8215AF00;
		  /* 8215AF00h */ case    9:  		/* li R7, 580 */
		/* 8215AF00h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x244);
		/* 8215AF00h case    9:*/		return 0x8215AF04;
		  /* 8215AF04h */ case   10:  		/* li R3, 0 */
		/* 8215AF04h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AF04h case   10:*/		return 0x8215AF08;
		  /* 8215AF08h */ case   11:  		/* bl -13056 */
		/* 8215AF08h case   11:*/		regs.LR = 0x8215AF0C; return 0x82157C08;
		/* 8215AF08h case   11:*/		return 0x8215AF0C;
	}
	return 0x8215AF0C;
} // Block from 8215AEDCh-8215AF0Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215AF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AF0C);
		  /* 8215AF0Ch */ case    0:  		/* mr R3, R31 */
		/* 8215AF0Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215AF0Ch case    0:*/		return 0x8215AF10;
	}
	return 0x8215AF10;
} // Block from 8215AF0Ch-8215AF10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215AF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AF10);
		  /* 8215AF10h */ case    0:  		/* addi R1, R1, 208 */
		/* 8215AF10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8215AF10h case    0:*/		return 0x8215AF14;
		  /* 8215AF14h */ case    1:  		/* b -826516 */
		/* 8215AF14h case    1:*/		return 0x82091280;
		/* 8215AF14h case    1:*/		return 0x8215AF18;
	}
	return 0x8215AF18;
} // Block from 8215AF10h-8215AF18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215AF18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AF18);
		  /* 8215AF18h */ case    0:  		/* mfspr R12, LR */
		/* 8215AF18h case    0:*/		regs.R12 = regs.LR;
		/* 8215AF18h case    0:*/		return 0x8215AF1C;
		  /* 8215AF1Ch */ case    1:  		/* bl -826564 */
		/* 8215AF1Ch case    1:*/		regs.LR = 0x8215AF20; return 0x82091258;
		/* 8215AF1Ch case    1:*/		return 0x8215AF20;
		  /* 8215AF20h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215AF20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215AF20h case    2:*/		return 0x8215AF24;
		  /* 8215AF24h */ case    3:  		/* lis R11, -32253 */
		/* 8215AF24h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215AF24h case    3:*/		return 0x8215AF28;
		  /* 8215AF28h */ case    4:  		/* lis R10, -32252 */
		/* 8215AF28h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215AF28h case    4:*/		return 0x8215AF2C;
		  /* 8215AF2Ch */ case    5:  		/* mr R31, R3 */
		/* 8215AF2Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215AF2Ch case    5:*/		return 0x8215AF30;
		  /* 8215AF30h */ case    6:  		/* mr R30, R4 */
		/* 8215AF30h case    6:*/		regs.R30 = regs.R4;
		/* 8215AF30h case    6:*/		return 0x8215AF34;
		  /* 8215AF34h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215AF34h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215AF34h case    7:*/		return 0x8215AF38;
		  /* 8215AF38h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215AF38h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215AF38h case    8:*/		return 0x8215AF3C;
		  /* 8215AF3Ch */ case    9:  		/* addi R28, R10, -22136 */
		/* 8215AF3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFA988);
		/* 8215AF3Ch case    9:*/		return 0x8215AF40;
		  /* 8215AF40h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215AF40h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215AF60;  }
		/* 8215AF40h case   10:*/		return 0x8215AF44;
		  /* 8215AF44h */ case   11:  		/* lis R11, -32252 */
		/* 8215AF44h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AF44h case   11:*/		return 0x8215AF48;
		  /* 8215AF48h */ case   12:  		/* mr R6, R28 */
		/* 8215AF48h case   12:*/		regs.R6 = regs.R28;
		/* 8215AF48h case   12:*/		return 0x8215AF4C;
		  /* 8215AF4Ch */ case   13:  		/* addi R5, R11, -22008 */
		/* 8215AF4Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA08);
		/* 8215AF4Ch case   13:*/		return 0x8215AF50;
		  /* 8215AF50h */ case   14:  		/* mr R4, R29 */
		/* 8215AF50h case   14:*/		regs.R4 = regs.R29;
		/* 8215AF50h case   14:*/		return 0x8215AF54;
		  /* 8215AF54h */ case   15:  		/* li R7, 619 */
		/* 8215AF54h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x26B);
		/* 8215AF54h case   15:*/		return 0x8215AF58;
		  /* 8215AF58h */ case   16:  		/* li R3, 0 */
		/* 8215AF58h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AF58h case   16:*/		return 0x8215AF5C;
		  /* 8215AF5Ch */ case   17:  		/* bl -13140 */
		/* 8215AF5Ch case   17:*/		regs.LR = 0x8215AF60; return 0x82157C08;
		/* 8215AF5Ch case   17:*/		return 0x8215AF60;
	}
	return 0x8215AF60;
} // Block from 8215AF18h-8215AF60h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215AF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AF60);
		  /* 8215AF60h */ case    0:  		/* mr R4, R30 */
		/* 8215AF60h case    0:*/		regs.R4 = regs.R30;
		/* 8215AF60h case    0:*/		return 0x8215AF64;
		  /* 8215AF64h */ case    1:  		/* mr R3, R31 */
		/* 8215AF64h case    1:*/		regs.R3 = regs.R31;
		/* 8215AF64h case    1:*/		return 0x8215AF68;
		  /* 8215AF68h */ case    2:  		/* bl 718560 */
		/* 8215AF68h case    2:*/		regs.LR = 0x8215AF6C; return 0x8220A648;
		/* 8215AF68h case    2:*/		return 0x8215AF6C;
		  /* 8215AF6Ch */ case    3:  		/* or. R30, R3, R3 */
		/* 8215AF6Ch case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215AF6Ch case    3:*/		return 0x8215AF70;
		  /* 8215AF70h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8215AF70h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8215AF90;  }
		/* 8215AF70h case    4:*/		return 0x8215AF74;
		  /* 8215AF74h */ case    5:  		/* lis R11, -32252 */
		/* 8215AF74h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AF74h case    5:*/		return 0x8215AF78;
		  /* 8215AF78h */ case    6:  		/* mr R6, R28 */
		/* 8215AF78h case    6:*/		regs.R6 = regs.R28;
		/* 8215AF78h case    6:*/		return 0x8215AF7C;
		  /* 8215AF7Ch */ case    7:  		/* addi R5, R11, -22012 */
		/* 8215AF7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8215AF7Ch case    7:*/		return 0x8215AF80;
		  /* 8215AF80h */ case    8:  		/* mr R4, R29 */
		/* 8215AF80h case    8:*/		regs.R4 = regs.R29;
		/* 8215AF80h case    8:*/		return 0x8215AF84;
		  /* 8215AF84h */ case    9:  		/* li R7, 623 */
		/* 8215AF84h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x26F);
		/* 8215AF84h case    9:*/		return 0x8215AF88;
		  /* 8215AF88h */ case   10:  		/* li R3, 0 */
		/* 8215AF88h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AF88h case   10:*/		return 0x8215AF8C;
		  /* 8215AF8Ch */ case   11:  		/* bl -13188 */
		/* 8215AF8Ch case   11:*/		regs.LR = 0x8215AF90; return 0x82157C08;
		/* 8215AF8Ch case   11:*/		return 0x8215AF90;
	}
	return 0x8215AF90;
} // Block from 8215AF60h-8215AF90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215AF90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AF90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AF90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AF90);
		  /* 8215AF90h */ case    0:  		/* mr R3, R30 */
		/* 8215AF90h case    0:*/		regs.R3 = regs.R30;
		/* 8215AF90h case    0:*/		return 0x8215AF94;
		  /* 8215AF94h */ case    1:  		/* bl 717548 */
		/* 8215AF94h case    1:*/		regs.LR = 0x8215AF98; return 0x8220A280;
		/* 8215AF94h case    1:*/		return 0x8215AF98;
		  /* 8215AF98h */ case    2:  		/* mr R4, R30 */
		/* 8215AF98h case    2:*/		regs.R4 = regs.R30;
		/* 8215AF98h case    2:*/		return 0x8215AF9C;
		  /* 8215AF9Ch */ case    3:  		/* mr R3, R31 */
		/* 8215AF9Ch case    3:*/		regs.R3 = regs.R31;
		/* 8215AF9Ch case    3:*/		return 0x8215AFA0;
		  /* 8215AFA0h */ case    4:  		/* bl 18448 */
		/* 8215AFA0h case    4:*/		regs.LR = 0x8215AFA4; return 0x8215F7B0;
		/* 8215AFA0h case    4:*/		return 0x8215AFA4;
		  /* 8215AFA4h */ case    5:  		/* mr R3, R30 */
		/* 8215AFA4h case    5:*/		regs.R3 = regs.R30;
		/* 8215AFA4h case    5:*/		return 0x8215AFA8;
		  /* 8215AFA8h */ case    6:  		/* addi R1, R1, 128 */
		/* 8215AFA8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215AFA8h case    6:*/		return 0x8215AFAC;
		  /* 8215AFACh */ case    7:  		/* b -826628 */
		/* 8215AFACh case    7:*/		return 0x820912A8;
		/* 8215AFACh case    7:*/		return 0x8215AFB0;
	}
	return 0x8215AFB0;
} // Block from 8215AF90h-8215AFB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215AFB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AFB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AFB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AFB0);
		  /* 8215AFB0h */ case    0:  		/* mfspr R12, LR */
		/* 8215AFB0h case    0:*/		regs.R12 = regs.LR;
		/* 8215AFB0h case    0:*/		return 0x8215AFB4;
		  /* 8215AFB4h */ case    1:  		/* bl -826716 */
		/* 8215AFB4h case    1:*/		regs.LR = 0x8215AFB8; return 0x82091258;
		/* 8215AFB4h case    1:*/		return 0x8215AFB8;
		  /* 8215AFB8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215AFB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215AFB8h case    2:*/		return 0x8215AFBC;
		  /* 8215AFBCh */ case    3:  		/* lis R11, -32253 */
		/* 8215AFBCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215AFBCh case    3:*/		return 0x8215AFC0;
		  /* 8215AFC0h */ case    4:  		/* lis R10, -32252 */
		/* 8215AFC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215AFC0h case    4:*/		return 0x8215AFC4;
		  /* 8215AFC4h */ case    5:  		/* mr R31, R3 */
		/* 8215AFC4h case    5:*/		regs.R31 = regs.R3;
		/* 8215AFC4h case    5:*/		return 0x8215AFC8;
		  /* 8215AFC8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215AFC8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215AFC8h case    6:*/		return 0x8215AFCC;
		  /* 8215AFCCh */ case    7:  		/* addi R30, R11, 27460 */
		/* 8215AFCCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215AFCCh case    7:*/		return 0x8215AFD0;
		  /* 8215AFD0h */ case    8:  		/* addi R29, R10, -22136 */
		/* 8215AFD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFA988);
		/* 8215AFD0h case    8:*/		return 0x8215AFD4;
		  /* 8215AFD4h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215AFD4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215AFF4;  }
		/* 8215AFD4h case    9:*/		return 0x8215AFD8;
		  /* 8215AFD8h */ case   10:  		/* lis R11, -32252 */
		/* 8215AFD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215AFD8h case   10:*/		return 0x8215AFDC;
		  /* 8215AFDCh */ case   11:  		/* mr R6, R29 */
		/* 8215AFDCh case   11:*/		regs.R6 = regs.R29;
		/* 8215AFDCh case   11:*/		return 0x8215AFE0;
		  /* 8215AFE0h */ case   12:  		/* addi R5, R11, -21948 */
		/* 8215AFE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA44);
		/* 8215AFE0h case   12:*/		return 0x8215AFE4;
		  /* 8215AFE4h */ case   13:  		/* mr R4, R30 */
		/* 8215AFE4h case   13:*/		regs.R4 = regs.R30;
		/* 8215AFE4h case   13:*/		return 0x8215AFE8;
		  /* 8215AFE8h */ case   14:  		/* li R7, 659 */
		/* 8215AFE8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x293);
		/* 8215AFE8h case   14:*/		return 0x8215AFEC;
		  /* 8215AFECh */ case   15:  		/* li R3, 0 */
		/* 8215AFECh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215AFECh case   15:*/		return 0x8215AFF0;
		  /* 8215AFF0h */ case   16:  		/* bl -13288 */
		/* 8215AFF0h case   16:*/		regs.LR = 0x8215AFF4; return 0x82157C08;
		/* 8215AFF0h case   16:*/		return 0x8215AFF4;
	}
	return 0x8215AFF4;
} // Block from 8215AFB0h-8215AFF4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215AFF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215AFF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215AFF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215AFF4);
		  /* 8215AFF4h */ case    0:  		/* mr R3, R31 */
		/* 8215AFF4h case    0:*/		regs.R3 = regs.R31;
		/* 8215AFF4h case    0:*/		return 0x8215AFF8;
		  /* 8215AFF8h */ case    1:  		/* bl -864 */
		/* 8215AFF8h case    1:*/		regs.LR = 0x8215AFFC; return 0x8215AC98;
		/* 8215AFF8h case    1:*/		return 0x8215AFFC;
		  /* 8215AFFCh */ case    2:  		/* or. R28, R3, R3 */
		/* 8215AFFCh case    2:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8215AFFCh case    2:*/		return 0x8215B000;
		  /* 8215B000h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215B000h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215B020;  }
		/* 8215B000h case    3:*/		return 0x8215B004;
		  /* 8215B004h */ case    4:  		/* lis R11, -32252 */
		/* 8215B004h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B004h case    4:*/		return 0x8215B008;
		  /* 8215B008h */ case    5:  		/* mr R6, R29 */
		/* 8215B008h case    5:*/		regs.R6 = regs.R29;
		/* 8215B008h case    5:*/		return 0x8215B00C;
		  /* 8215B00Ch */ case    6:  		/* addi R5, R11, -21960 */
		/* 8215B00Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA38);
		/* 8215B00Ch case    6:*/		return 0x8215B010;
		  /* 8215B010h */ case    7:  		/* mr R4, R30 */
		/* 8215B010h case    7:*/		regs.R4 = regs.R30;
		/* 8215B010h case    7:*/		return 0x8215B014;
		  /* 8215B014h */ case    8:  		/* li R7, 663 */
		/* 8215B014h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x297);
		/* 8215B014h case    8:*/		return 0x8215B018;
		  /* 8215B018h */ case    9:  		/* li R3, 0 */
		/* 8215B018h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B018h case    9:*/		return 0x8215B01C;
		  /* 8215B01Ch */ case   10:  		/* bl -13332 */
		/* 8215B01Ch case   10:*/		regs.LR = 0x8215B020; return 0x82157C08;
		/* 8215B01Ch case   10:*/		return 0x8215B020;
	}
	return 0x8215B020;
} // Block from 8215AFF4h-8215B020h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215B020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B020);
		  /* 8215B020h */ case    0:  		/* mr R3, R28 */
		/* 8215B020h case    0:*/		regs.R3 = regs.R28;
		/* 8215B020h case    0:*/		return 0x8215B024;
		  /* 8215B024h */ case    1:  		/* bl 17892 */
		/* 8215B024h case    1:*/		regs.LR = 0x8215B028; return 0x8215F608;
		/* 8215B024h case    1:*/		return 0x8215B028;
		  /* 8215B028h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8215B028h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215B028h case    2:*/		return 0x8215B02C;
		  /* 8215B02Ch */ case    3:  		/* bc 4, CR0_EQ, 28 */
		/* 8215B02Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215B048;  }
		/* 8215B02Ch case    3:*/		return 0x8215B030;
		  /* 8215B030h */ case    4:  		/* lis R11, -32252 */
		/* 8215B030h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B030h case    4:*/		return 0x8215B034;
		  /* 8215B034h */ case    5:  		/* mr R6, R29 */
		/* 8215B034h case    5:*/		regs.R6 = regs.R29;
		/* 8215B034h case    5:*/		return 0x8215B038;
		  /* 8215B038h */ case    6:  		/* addi R5, R11, -22000 */
		/* 8215B038h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA10);
		/* 8215B038h case    6:*/		return 0x8215B03C;
		  /* 8215B03Ch */ case    7:  		/* mr R4, R30 */
		/* 8215B03Ch case    7:*/		regs.R4 = regs.R30;
		/* 8215B03Ch case    7:*/		return 0x8215B040;
		  /* 8215B040h */ case    8:  		/* li R7, 664 */
		/* 8215B040h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x298);
		/* 8215B040h case    8:*/		return 0x8215B044;
		  /* 8215B044h */ case    9:  		/* bl -13372 */
		/* 8215B044h case    9:*/		regs.LR = 0x8215B048; return 0x82157C08;
		/* 8215B044h case    9:*/		return 0x8215B048;
	}
	return 0x8215B048;
} // Block from 8215B020h-8215B048h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B048);
		  /* 8215B048h */ case    0:  		/* mr R4, R31 */
		/* 8215B048h case    0:*/		regs.R4 = regs.R31;
		/* 8215B048h case    0:*/		return 0x8215B04C;
		  /* 8215B04Ch */ case    1:  		/* mr R3, R28 */
		/* 8215B04Ch case    1:*/		regs.R3 = regs.R28;
		/* 8215B04Ch case    1:*/		return 0x8215B050;
		  /* 8215B050h */ case    2:  		/* bl 18304 */
		/* 8215B050h case    2:*/		regs.LR = 0x8215B054; return 0x8215F7D0;
		/* 8215B050h case    2:*/		return 0x8215B054;
		  /* 8215B054h */ case    3:  		/* mr R3, R31 */
		/* 8215B054h case    3:*/		regs.R3 = regs.R31;
		/* 8215B054h case    3:*/		return 0x8215B058;
		  /* 8215B058h */ case    4:  		/* bl 717984 */
		/* 8215B058h case    4:*/		regs.LR = 0x8215B05C; return 0x8220A4F8;
		/* 8215B058h case    4:*/		return 0x8215B05C;
		  /* 8215B05Ch */ case    5:  		/* li R3, 0 */
		/* 8215B05Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B05Ch case    5:*/		return 0x8215B060;
		  /* 8215B060h */ case    6:  		/* addi R1, R1, 128 */
		/* 8215B060h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215B060h case    6:*/		return 0x8215B064;
		  /* 8215B064h */ case    7:  		/* b -826812 */
		/* 8215B064h case    7:*/		return 0x820912A8;
		/* 8215B064h case    7:*/		return 0x8215B068;
	}
	return 0x8215B068;
} // Block from 8215B048h-8215B068h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215B068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B068);
		  /* 8215B068h */ case    0:  		/* mfspr R12, LR */
		/* 8215B068h case    0:*/		regs.R12 = regs.LR;
		/* 8215B068h case    0:*/		return 0x8215B06C;
		  /* 8215B06Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215B06Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215B06Ch case    1:*/		return 0x8215B070;
		  /* 8215B070h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215B070h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215B070h case    2:*/		return 0x8215B074;
		  /* 8215B074h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215B074h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215B074h case    3:*/		return 0x8215B078;
		  /* 8215B078h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215B078h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215B078h case    4:*/		return 0x8215B07C;
		  /* 8215B07Ch */ case    5:  		/* mr R30, R3 */
		/* 8215B07Ch case    5:*/		regs.R30 = regs.R3;
		/* 8215B07Ch case    5:*/		return 0x8215B080;
		  /* 8215B080h */ case    6:  		/* bl 723056 */
		/* 8215B080h case    6:*/		regs.LR = 0x8215B084; return 0x8220B8F0;
		/* 8215B080h case    6:*/		return 0x8215B084;
		  /* 8215B084h */ case    7:  		/* or. R31, R3, R3 */
		/* 8215B084h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215B084h case    7:*/		return 0x8215B088;
		  /* 8215B088h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8215B088h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215B0B0;  }
		/* 8215B088h case    8:*/		return 0x8215B08C;
		  /* 8215B08Ch */ case    9:  		/* lis R11, -32252 */
		/* 8215B08Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B08Ch case    9:*/		return 0x8215B090;
		  /* 8215B090h */ case   10:  		/* lis R10, -32252 */
		/* 8215B090h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B090h case   10:*/		return 0x8215B094;
		  /* 8215B094h */ case   11:  		/* lis R9, -32253 */
		/* 8215B094h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215B094h case   11:*/		return 0x8215B098;
		  /* 8215B098h */ case   12:  		/* addi R6, R11, -21920 */
		/* 8215B098h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215B098h case   12:*/		return 0x8215B09C;
		  /* 8215B09Ch */ case   13:  		/* addi R5, R10, -21932 */
		/* 8215B09Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAA54);
		/* 8215B09Ch case   13:*/		return 0x8215B0A0;
		  /* 8215B0A0h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8215B0A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215B0A0h case   14:*/		return 0x8215B0A4;
		  /* 8215B0A4h */ case   15:  		/* li R7, 73 */
		/* 8215B0A4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x49);
		/* 8215B0A4h case   15:*/		return 0x8215B0A8;
		  /* 8215B0A8h */ case   16:  		/* li R3, 0 */
		/* 8215B0A8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B0A8h case   16:*/		return 0x8215B0AC;
		  /* 8215B0ACh */ case   17:  		/* bl -13476 */
		/* 8215B0ACh case   17:*/		regs.LR = 0x8215B0B0; return 0x82157C08;
		/* 8215B0ACh case   17:*/		return 0x8215B0B0;
	}
	return 0x8215B0B0;
} // Block from 8215B068h-8215B0B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215B0B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B0B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B0B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B0B0);
		  /* 8215B0B0h */ case    0:  		/* li R11, 0 */
		/* 8215B0B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215B0B0h case    0:*/		return 0x8215B0B4;
		  /* 8215B0B4h */ case    1:  		/* stw R30, <#[R31]> */
		/* 8215B0B4h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8215B0B4h case    1:*/		return 0x8215B0B8;
		  /* 8215B0B8h */ case    2:  		/* mr R3, R31 */
		/* 8215B0B8h case    2:*/		regs.R3 = regs.R31;
		/* 8215B0B8h case    2:*/		return 0x8215B0BC;
		  /* 8215B0BCh */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 8215B0BCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B0BCh case    3:*/		return 0x8215B0C0;
		  /* 8215B0C0h */ case    4:  		/* stw R11, <#[R31 + 4]> */
		/* 8215B0C0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B0C0h case    4:*/		return 0x8215B0C4;
		  /* 8215B0C4h */ case    5:  		/* addi R1, R1, 112 */
		/* 8215B0C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215B0C4h case    5:*/		return 0x8215B0C8;
		  /* 8215B0C8h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215B0C8h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215B0C8h case    6:*/		return 0x8215B0CC;
		  /* 8215B0CCh */ case    7:  		/* mtspr LR, R12 */
		/* 8215B0CCh case    7:*/		regs.LR = regs.R12;
		/* 8215B0CCh case    7:*/		return 0x8215B0D0;
		  /* 8215B0D0h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 8215B0D0h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215B0D0h case    8:*/		return 0x8215B0D4;
		  /* 8215B0D4h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 8215B0D4h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215B0D4h case    9:*/		return 0x8215B0D8;
		  /* 8215B0D8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 8215B0D8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215B0D8h case   10:*/		return 0x8215B0DC;
	}
	return 0x8215B0DC;
} // Block from 8215B0B0h-8215B0DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215B0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B0DC);
		  /* 8215B0DCh */ case    0:  		/* nop */
		/* 8215B0DCh case    0:*/		cpu::op::nop();
		/* 8215B0DCh case    0:*/		return 0x8215B0E0;
	}
	return 0x8215B0E0;
} // Block from 8215B0DCh-8215B0E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215B0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B0E0);
		  /* 8215B0E0h */ case    0:  		/* mfspr R12, LR */
		/* 8215B0E0h case    0:*/		regs.R12 = regs.LR;
		/* 8215B0E0h case    0:*/		return 0x8215B0E4;
		  /* 8215B0E4h */ case    1:  		/* bl -827020 */
		/* 8215B0E4h case    1:*/		regs.LR = 0x8215B0E8; return 0x82091258;
		/* 8215B0E4h case    1:*/		return 0x8215B0E8;
		  /* 8215B0E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215B0E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215B0E8h case    2:*/		return 0x8215B0EC;
		  /* 8215B0ECh */ case    3:  		/* mr R29, R3 */
		/* 8215B0ECh case    3:*/		regs.R29 = regs.R3;
		/* 8215B0ECh case    3:*/		return 0x8215B0F0;
		  /* 8215B0F0h */ case    4:  		/* mr R28, R4 */
		/* 8215B0F0h case    4:*/		regs.R28 = regs.R4;
		/* 8215B0F0h case    4:*/		return 0x8215B0F4;
		  /* 8215B0F4h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8215B0F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215B0F4h case    5:*/		return 0x8215B0F8;
		  /* 8215B0F8h */ case    6:  		/* bc 12, CR6_EQ, 200 */
		/* 8215B0F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215B1C0;  }
		/* 8215B0F8h case    6:*/		return 0x8215B0FC;
		  /* 8215B0FCh */ case    7:  		/* lis R11, -32253 */
		/* 8215B0FCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B0FCh case    7:*/		return 0x8215B100;
		  /* 8215B100h */ case    8:  		/* lis R10, -32252 */
		/* 8215B100h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B100h case    8:*/		return 0x8215B104;
		  /* 8215B104h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215B104h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B104h case    9:*/		return 0x8215B108;
		  /* 8215B108h */ case   10:  		/* addi R31, R11, 27460 */
		/* 8215B108h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8215B108h case   10:*/		return 0x8215B10C;
		  /* 8215B10Ch */ case   11:  		/* addi R30, R10, -21920 */
		/* 8215B10Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFAA60);
		/* 8215B10Ch case   11:*/		return 0x8215B110;
		  /* 8215B110h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B110h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B130;  }
		/* 8215B110h case   12:*/		return 0x8215B114;
		  /* 8215B114h */ case   13:  		/* lis R11, -32252 */
		/* 8215B114h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B114h case   13:*/		return 0x8215B118;
		  /* 8215B118h */ case   14:  		/* mr R6, R30 */
		/* 8215B118h case   14:*/		regs.R6 = regs.R30;
		/* 8215B118h case   14:*/		return 0x8215B11C;
		  /* 8215B11Ch */ case   15:  		/* addi R5, R11, -21748 */
		/* 8215B11Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB0C);
		/* 8215B11Ch case   15:*/		return 0x8215B120;
		  /* 8215B120h */ case   16:  		/* mr R4, R31 */
		/* 8215B120h case   16:*/		regs.R4 = regs.R31;
		/* 8215B120h case   16:*/		return 0x8215B124;
		  /* 8215B124h */ case   17:  		/* li R7, 115 */
		/* 8215B124h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x73);
		/* 8215B124h case   17:*/		return 0x8215B128;
		  /* 8215B128h */ case   18:  		/* li R3, 0 */
		/* 8215B128h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B128h case   18:*/		return 0x8215B12C;
		  /* 8215B12Ch */ case   19:  		/* bl -13604 */
		/* 8215B12Ch case   19:*/		regs.LR = 0x8215B130; return 0x82157C08;
		/* 8215B12Ch case   19:*/		return 0x8215B130;
	}
	return 0x8215B130;
} // Block from 8215B0E0h-8215B130h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215B130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B130);
		  /* 8215B130h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8215B130h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8215B130h case    0:*/		return 0x8215B134;
		  /* 8215B134h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B134h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B134h case    1:*/		return 0x8215B138;
		  /* 8215B138h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B138h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B158;  }
		/* 8215B138h case    2:*/		return 0x8215B13C;
		  /* 8215B13Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215B13Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B13Ch case    3:*/		return 0x8215B140;
		  /* 8215B140h */ case    4:  		/* mr R6, R30 */
		/* 8215B140h case    4:*/		regs.R6 = regs.R30;
		/* 8215B140h case    4:*/		return 0x8215B144;
		  /* 8215B144h */ case    5:  		/* addi R5, R11, -21768 */
		/* 8215B144h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAAF8);
		/* 8215B144h case    5:*/		return 0x8215B148;
		  /* 8215B148h */ case    6:  		/* mr R4, R31 */
		/* 8215B148h case    6:*/		regs.R4 = regs.R31;
		/* 8215B148h case    6:*/		return 0x8215B14C;
		  /* 8215B14Ch */ case    7:  		/* li R7, 116 */
		/* 8215B14Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x74);
		/* 8215B14Ch case    7:*/		return 0x8215B150;
		  /* 8215B150h */ case    8:  		/* li R3, 0 */
		/* 8215B150h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B150h case    8:*/		return 0x8215B154;
		  /* 8215B154h */ case    9:  		/* bl -13644 */
		/* 8215B154h case    9:*/		regs.LR = 0x8215B158; return 0x82157C08;
		/* 8215B154h case    9:*/		return 0x8215B158;
	}
	return 0x8215B158;
} // Block from 8215B130h-8215B158h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B158);
		  /* 8215B158h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8215B158h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8215B158h case    0:*/		return 0x8215B15C;
		  /* 8215B15Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B15Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B15Ch case    1:*/		return 0x8215B160;
		  /* 8215B160h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B160h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B180;  }
		/* 8215B160h case    2:*/		return 0x8215B164;
		  /* 8215B164h */ case    3:  		/* lis R11, -32252 */
		/* 8215B164h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B164h case    3:*/		return 0x8215B168;
		  /* 8215B168h */ case    4:  		/* mr R6, R30 */
		/* 8215B168h case    4:*/		regs.R6 = regs.R30;
		/* 8215B168h case    4:*/		return 0x8215B16C;
		  /* 8215B16Ch */ case    5:  		/* addi R5, R11, -21796 */
		/* 8215B16Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAADC);
		/* 8215B16Ch case    5:*/		return 0x8215B170;
		  /* 8215B170h */ case    6:  		/* mr R4, R31 */
		/* 8215B170h case    6:*/		regs.R4 = regs.R31;
		/* 8215B170h case    6:*/		return 0x8215B174;
		  /* 8215B174h */ case    7:  		/* li R7, 119 */
		/* 8215B174h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x77);
		/* 8215B174h case    7:*/		return 0x8215B178;
		  /* 8215B178h */ case    8:  		/* li R3, 0 */
		/* 8215B178h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B178h case    8:*/		return 0x8215B17C;
		  /* 8215B17Ch */ case    9:  		/* bl -13684 */
		/* 8215B17Ch case    9:*/		regs.LR = 0x8215B180; return 0x82157C08;
		/* 8215B17Ch case    9:*/		return 0x8215B180;
	}
	return 0x8215B180;
} // Block from 8215B158h-8215B180h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B180);
		  /* 8215B180h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8215B180h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8215B180h case    0:*/		return 0x8215B184;
		  /* 8215B184h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B184h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B184h case    1:*/		return 0x8215B188;
		  /* 8215B188h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B188h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B1A8;  }
		/* 8215B188h case    2:*/		return 0x8215B18C;
		  /* 8215B18Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215B18Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B18Ch case    3:*/		return 0x8215B190;
		  /* 8215B190h */ case    4:  		/* mr R6, R30 */
		/* 8215B190h case    4:*/		regs.R6 = regs.R30;
		/* 8215B190h case    4:*/		return 0x8215B194;
		  /* 8215B194h */ case    5:  		/* addi R5, R11, -21824 */
		/* 8215B194h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAAC0);
		/* 8215B194h case    5:*/		return 0x8215B198;
		  /* 8215B198h */ case    6:  		/* mr R4, R31 */
		/* 8215B198h case    6:*/		regs.R4 = regs.R31;
		/* 8215B198h case    6:*/		return 0x8215B19C;
		  /* 8215B19Ch */ case    7:  		/* li R7, 120 */
		/* 8215B19Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x78);
		/* 8215B19Ch case    7:*/		return 0x8215B1A0;
		  /* 8215B1A0h */ case    8:  		/* li R3, 0 */
		/* 8215B1A0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B1A0h case    8:*/		return 0x8215B1A4;
		  /* 8215B1A4h */ case    9:  		/* bl -13724 */
		/* 8215B1A4h case    9:*/		regs.LR = 0x8215B1A8; return 0x82157C08;
		/* 8215B1A4h case    9:*/		return 0x8215B1A8;
	}
	return 0x8215B1A8;
} // Block from 8215B180h-8215B1A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B1A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B1A8);
		  /* 8215B1A8h */ case    0:  		/* stw R29, <#[R28 + 4]> */
		/* 8215B1A8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000004) );
		/* 8215B1A8h case    0:*/		return 0x8215B1AC;
		  /* 8215B1ACh */ case    1:  		/* lwz R11, <#[R29 + 8]> */
		/* 8215B1ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8215B1ACh case    1:*/		return 0x8215B1B0;
		  /* 8215B1B0h */ case    2:  		/* stw R11, <#[R28 + 8]> */
		/* 8215B1B0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8215B1B0h case    2:*/		return 0x8215B1B4;
		  /* 8215B1B4h */ case    3:  		/* lwz R11, <#[R29 + 8]> */
		/* 8215B1B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8215B1B4h case    3:*/		return 0x8215B1B8;
		  /* 8215B1B8h */ case    4:  		/* stw R28, <#[R11 + 4]> */
		/* 8215B1B8h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 8215B1B8h case    4:*/		return 0x8215B1BC;
		  /* 8215B1BCh */ case    5:  		/* stw R28, <#[R29 + 8]> */
		/* 8215B1BCh case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000008) );
		/* 8215B1BCh case    5:*/		return 0x8215B1C0;
	}
	return 0x8215B1C0;
} // Block from 8215B1A8h-8215B1C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215B1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B1C0);
		  /* 8215B1C0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215B1C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215B1C0h case    0:*/		return 0x8215B1C4;
		  /* 8215B1C4h */ case    1:  		/* b -827164 */
		/* 8215B1C4h case    1:*/		return 0x820912A8;
		/* 8215B1C4h case    1:*/		return 0x8215B1C8;
	}
	return 0x8215B1C8;
} // Block from 8215B1C0h-8215B1C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215B1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B1C8);
		  /* 8215B1C8h */ case    0:  		/* mfspr R12, LR */
		/* 8215B1C8h case    0:*/		regs.R12 = regs.LR;
		/* 8215B1C8h case    0:*/		return 0x8215B1CC;
		  /* 8215B1CCh */ case    1:  		/* bl -827252 */
		/* 8215B1CCh case    1:*/		regs.LR = 0x8215B1D0; return 0x82091258;
		/* 8215B1CCh case    1:*/		return 0x8215B1D0;
		  /* 8215B1D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215B1D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215B1D0h case    2:*/		return 0x8215B1D4;
		  /* 8215B1D4h */ case    3:  		/* mr R29, R3 */
		/* 8215B1D4h case    3:*/		regs.R29 = regs.R3;
		/* 8215B1D4h case    3:*/		return 0x8215B1D8;
		  /* 8215B1D8h */ case    4:  		/* mr R28, R4 */
		/* 8215B1D8h case    4:*/		regs.R28 = regs.R4;
		/* 8215B1D8h case    4:*/		return 0x8215B1DC;
		  /* 8215B1DCh */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8215B1DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215B1DCh case    5:*/		return 0x8215B1E0;
		  /* 8215B1E0h */ case    6:  		/* bc 12, CR6_EQ, 196 */
		/* 8215B1E0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215B2A4;  }
		/* 8215B1E0h case    6:*/		return 0x8215B1E4;
		  /* 8215B1E4h */ case    7:  		/* lis R11, -32253 */
		/* 8215B1E4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B1E4h case    7:*/		return 0x8215B1E8;
		  /* 8215B1E8h */ case    8:  		/* lis R10, -32252 */
		/* 8215B1E8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B1E8h case    8:*/		return 0x8215B1EC;
		  /* 8215B1ECh */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215B1ECh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B1ECh case    9:*/		return 0x8215B1F0;
		  /* 8215B1F0h */ case   10:  		/* addi R31, R11, 27460 */
		/* 8215B1F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8215B1F0h case   10:*/		return 0x8215B1F4;
		  /* 8215B1F4h */ case   11:  		/* addi R30, R10, -21920 */
		/* 8215B1F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFAA60);
		/* 8215B1F4h case   11:*/		return 0x8215B1F8;
		  /* 8215B1F8h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B1F8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B218;  }
		/* 8215B1F8h case   12:*/		return 0x8215B1FC;
		  /* 8215B1FCh */ case   13:  		/* lis R11, -32252 */
		/* 8215B1FCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B1FCh case   13:*/		return 0x8215B200;
		  /* 8215B200h */ case   14:  		/* mr R6, R30 */
		/* 8215B200h case   14:*/		regs.R6 = regs.R30;
		/* 8215B200h case   14:*/		return 0x8215B204;
		  /* 8215B204h */ case   15:  		/* addi R5, R11, -21716 */
		/* 8215B204h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB2C);
		/* 8215B204h case   15:*/		return 0x8215B208;
		  /* 8215B208h */ case   16:  		/* mr R4, R31 */
		/* 8215B208h case   16:*/		regs.R4 = regs.R31;
		/* 8215B208h case   16:*/		return 0x8215B20C;
		  /* 8215B20Ch */ case   17:  		/* li R7, 163 */
		/* 8215B20Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xA3);
		/* 8215B20Ch case   17:*/		return 0x8215B210;
		  /* 8215B210h */ case   18:  		/* li R3, 0 */
		/* 8215B210h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B210h case   18:*/		return 0x8215B214;
		  /* 8215B214h */ case   19:  		/* bl -13836 */
		/* 8215B214h case   19:*/		regs.LR = 0x8215B218; return 0x82157C08;
		/* 8215B214h case   19:*/		return 0x8215B218;
	}
	return 0x8215B218;
} // Block from 8215B1C8h-8215B218h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215B218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B218);
		  /* 8215B218h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 8215B218h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8215B218h case    0:*/		return 0x8215B21C;
		  /* 8215B21Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B21Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B21Ch case    1:*/		return 0x8215B220;
		  /* 8215B220h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B220h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B240;  }
		/* 8215B220h case    2:*/		return 0x8215B224;
		  /* 8215B224h */ case    3:  		/* lis R11, -32252 */
		/* 8215B224h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B224h case    3:*/		return 0x8215B228;
		  /* 8215B228h */ case    4:  		/* mr R6, R30 */
		/* 8215B228h case    4:*/		regs.R6 = regs.R30;
		/* 8215B228h case    4:*/		return 0x8215B22C;
		  /* 8215B22Ch */ case    5:  		/* addi R5, R11, -21736 */
		/* 8215B22Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB18);
		/* 8215B22Ch case    5:*/		return 0x8215B230;
		  /* 8215B230h */ case    6:  		/* mr R4, R31 */
		/* 8215B230h case    6:*/		regs.R4 = regs.R31;
		/* 8215B230h case    6:*/		return 0x8215B234;
		  /* 8215B234h */ case    7:  		/* li R7, 164 */
		/* 8215B234h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA4);
		/* 8215B234h case    7:*/		return 0x8215B238;
		  /* 8215B238h */ case    8:  		/* li R3, 0 */
		/* 8215B238h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B238h case    8:*/		return 0x8215B23C;
		  /* 8215B23Ch */ case    9:  		/* bl -13876 */
		/* 8215B23Ch case    9:*/		regs.LR = 0x8215B240; return 0x82157C08;
		/* 8215B23Ch case    9:*/		return 0x8215B240;
	}
	return 0x8215B240;
} // Block from 8215B218h-8215B240h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B240);
		  /* 8215B240h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8215B240h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8215B240h case    0:*/		return 0x8215B244;
		  /* 8215B244h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B244h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B244h case    1:*/		return 0x8215B248;
		  /* 8215B248h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B248h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B268;  }
		/* 8215B248h case    2:*/		return 0x8215B24C;
		  /* 8215B24Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215B24Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B24Ch case    3:*/		return 0x8215B250;
		  /* 8215B250h */ case    4:  		/* mr R6, R30 */
		/* 8215B250h case    4:*/		regs.R6 = regs.R30;
		/* 8215B250h case    4:*/		return 0x8215B254;
		  /* 8215B254h */ case    5:  		/* addi R5, R11, -21796 */
		/* 8215B254h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAADC);
		/* 8215B254h case    5:*/		return 0x8215B258;
		  /* 8215B258h */ case    6:  		/* mr R4, R31 */
		/* 8215B258h case    6:*/		regs.R4 = regs.R31;
		/* 8215B258h case    6:*/		return 0x8215B25C;
		  /* 8215B25Ch */ case    7:  		/* li R7, 167 */
		/* 8215B25Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA7);
		/* 8215B25Ch case    7:*/		return 0x8215B260;
		  /* 8215B260h */ case    8:  		/* li R3, 0 */
		/* 8215B260h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B260h case    8:*/		return 0x8215B264;
		  /* 8215B264h */ case    9:  		/* bl -13916 */
		/* 8215B264h case    9:*/		regs.LR = 0x8215B268; return 0x82157C08;
		/* 8215B264h case    9:*/		return 0x8215B268;
	}
	return 0x8215B268;
} // Block from 8215B240h-8215B268h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B268);
		  /* 8215B268h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8215B268h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8215B268h case    0:*/		return 0x8215B26C;
		  /* 8215B26Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B26Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B26Ch case    1:*/		return 0x8215B270;
		  /* 8215B270h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B270h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B290;  }
		/* 8215B270h case    2:*/		return 0x8215B274;
		  /* 8215B274h */ case    3:  		/* lis R11, -32252 */
		/* 8215B274h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B274h case    3:*/		return 0x8215B278;
		  /* 8215B278h */ case    4:  		/* mr R6, R30 */
		/* 8215B278h case    4:*/		regs.R6 = regs.R30;
		/* 8215B278h case    4:*/		return 0x8215B27C;
		  /* 8215B27Ch */ case    5:  		/* addi R5, R11, -21824 */
		/* 8215B27Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAAC0);
		/* 8215B27Ch case    5:*/		return 0x8215B280;
		  /* 8215B280h */ case    6:  		/* mr R4, R31 */
		/* 8215B280h case    6:*/		regs.R4 = regs.R31;
		/* 8215B280h case    6:*/		return 0x8215B284;
		  /* 8215B284h */ case    7:  		/* li R7, 168 */
		/* 8215B284h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA8);
		/* 8215B284h case    7:*/		return 0x8215B288;
		  /* 8215B288h */ case    8:  		/* li R3, 0 */
		/* 8215B288h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B288h case    8:*/		return 0x8215B28C;
		  /* 8215B28Ch */ case    9:  		/* bl -13956 */
		/* 8215B28Ch case    9:*/		regs.LR = 0x8215B290; return 0x82157C08;
		/* 8215B28Ch case    9:*/		return 0x8215B290;
	}
	return 0x8215B290;
} // Block from 8215B268h-8215B290h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B290);
		  /* 8215B290h */ case    0:  		/* stw R29, <#[R28 + 8]> */
		/* 8215B290h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + 0x00000008) );
		/* 8215B290h case    0:*/		return 0x8215B294;
		  /* 8215B294h */ case    1:  		/* lwz R11, <#[R29 + 4]> */
		/* 8215B294h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8215B294h case    1:*/		return 0x8215B298;
		  /* 8215B298h */ case    2:  		/* stw R11, <#[R28 + 4]> */
		/* 8215B298h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8215B298h case    2:*/		return 0x8215B29C;
		  /* 8215B29Ch */ case    3:  		/* stw R28, <#[R11 + 8]> */
		/* 8215B29Ch case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 8215B29Ch case    3:*/		return 0x8215B2A0;
		  /* 8215B2A0h */ case    4:  		/* stw R28, <#[R29 + 4]> */
		/* 8215B2A0h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000004) );
		/* 8215B2A0h case    4:*/		return 0x8215B2A4;
	}
	return 0x8215B2A4;
} // Block from 8215B290h-8215B2A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215B2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B2A4);
		  /* 8215B2A4h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215B2A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215B2A4h case    0:*/		return 0x8215B2A8;
		  /* 8215B2A8h */ case    1:  		/* b -827392 */
		/* 8215B2A8h case    1:*/		return 0x820912A8;
		/* 8215B2A8h case    1:*/		return 0x8215B2AC;
		  /* 8215B2ACh */ case    2:  		/* nop */
		/* 8215B2ACh case    2:*/		cpu::op::nop();
		/* 8215B2ACh case    2:*/		return 0x8215B2B0;
	}
	return 0x8215B2B0;
} // Block from 8215B2A4h-8215B2B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B2B0);
		  /* 8215B2B0h */ case    0:  		/* mfspr R12, LR */
		/* 8215B2B0h case    0:*/		regs.R12 = regs.LR;
		/* 8215B2B0h case    0:*/		return 0x8215B2B4;
		  /* 8215B2B4h */ case    1:  		/* bl -827480 */
		/* 8215B2B4h case    1:*/		regs.LR = 0x8215B2B8; return 0x8209125C;
		/* 8215B2B4h case    1:*/		return 0x8215B2B8;
		  /* 8215B2B8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215B2B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215B2B8h case    2:*/		return 0x8215B2BC;
		  /* 8215B2BCh */ case    3:  		/* mr R31, R3 */
		/* 8215B2BCh case    3:*/		regs.R31 = regs.R3;
		/* 8215B2BCh case    3:*/		return 0x8215B2C0;
		  /* 8215B2C0h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8215B2C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B2C0h case    4:*/		return 0x8215B2C4;
		  /* 8215B2C4h */ case    5:  		/* bc 12, CR6_EQ, 140 */
		/* 8215B2C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215B350;  }
		/* 8215B2C4h case    5:*/		return 0x8215B2C8;
		  /* 8215B2C8h */ case    6:  		/* lwz R9, <#[R31 + 8]> */
		/* 8215B2C8h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B2C8h case    6:*/		return 0x8215B2CC;
		  /* 8215B2CCh */ case    7:  		/* lis R11, -32253 */
		/* 8215B2CCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B2CCh case    7:*/		return 0x8215B2D0;
		  /* 8215B2D0h */ case    8:  		/* lis R10, -32252 */
		/* 8215B2D0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B2D0h case    8:*/		return 0x8215B2D4;
		  /* 8215B2D4h */ case    9:  		/* addi R30, R11, 27460 */
		/* 8215B2D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215B2D4h case    9:*/		return 0x8215B2D8;
		  /* 8215B2D8h */ case   10:  		/* addi R29, R10, -21920 */
		/* 8215B2D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215B2D8h case   10:*/		return 0x8215B2DC;
		  /* 8215B2DCh */ case   11:  		/* cmplwi CR6, R9, 0 */
		/* 8215B2DCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8215B2DCh case   11:*/		return 0x8215B2E0;
		  /* 8215B2E0h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B2E0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B300;  }
		/* 8215B2E0h case   12:*/		return 0x8215B2E4;
		  /* 8215B2E4h */ case   13:  		/* lis R11, -32252 */
		/* 8215B2E4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B2E4h case   13:*/		return 0x8215B2E8;
		  /* 8215B2E8h */ case   14:  		/* mr R6, R29 */
		/* 8215B2E8h case   14:*/		regs.R6 = regs.R29;
		/* 8215B2E8h case   14:*/		return 0x8215B2EC;
		  /* 8215B2ECh */ case   15:  		/* addi R5, R11, -21704 */
		/* 8215B2ECh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB38);
		/* 8215B2ECh case   15:*/		return 0x8215B2F0;
		  /* 8215B2F0h */ case   16:  		/* mr R4, R30 */
		/* 8215B2F0h case   16:*/		regs.R4 = regs.R30;
		/* 8215B2F0h case   16:*/		return 0x8215B2F4;
		  /* 8215B2F4h */ case   17:  		/* li R7, 264 */
		/* 8215B2F4h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x108);
		/* 8215B2F4h case   17:*/		return 0x8215B2F8;
		  /* 8215B2F8h */ case   18:  		/* li R3, 0 */
		/* 8215B2F8h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B2F8h case   18:*/		return 0x8215B2FC;
		  /* 8215B2FCh */ case   19:  		/* bl -14068 */
		/* 8215B2FCh case   19:*/		regs.LR = 0x8215B300; return 0x82157C08;
		/* 8215B2FCh case   19:*/		return 0x8215B300;
	}
	return 0x8215B300;
} // Block from 8215B2B0h-8215B300h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215B300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B300);
		  /* 8215B300h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215B300h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B300h case    0:*/		return 0x8215B304;
		  /* 8215B304h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B304h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B304h case    1:*/		return 0x8215B308;
		  /* 8215B308h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B308h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B328;  }
		/* 8215B308h case    2:*/		return 0x8215B30C;
		  /* 8215B30Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215B30Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B30Ch case    3:*/		return 0x8215B310;
		  /* 8215B310h */ case    4:  		/* mr R6, R29 */
		/* 8215B310h case    4:*/		regs.R6 = regs.R29;
		/* 8215B310h case    4:*/		return 0x8215B314;
		  /* 8215B314h */ case    5:  		/* addi R5, R11, -21688 */
		/* 8215B314h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB48);
		/* 8215B314h case    5:*/		return 0x8215B318;
		  /* 8215B318h */ case    6:  		/* mr R4, R30 */
		/* 8215B318h case    6:*/		regs.R4 = regs.R30;
		/* 8215B318h case    6:*/		return 0x8215B31C;
		  /* 8215B31Ch */ case    7:  		/* li R7, 265 */
		/* 8215B31Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x109);
		/* 8215B31Ch case    7:*/		return 0x8215B320;
		  /* 8215B320h */ case    8:  		/* li R3, 0 */
		/* 8215B320h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B320h case    8:*/		return 0x8215B324;
		  /* 8215B324h */ case    9:  		/* bl -14108 */
		/* 8215B324h case    9:*/		regs.LR = 0x8215B328; return 0x82157C08;
		/* 8215B324h case    9:*/		return 0x8215B328;
	}
	return 0x8215B328;
} // Block from 8215B300h-8215B328h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B328);
		  /* 8215B328h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8215B328h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B328h case    0:*/		return 0x8215B32C;
		  /* 8215B32Ch */ case    1:  		/* li R11, 0 */
		/* 8215B32Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215B32Ch case    1:*/		return 0x8215B330;
		  /* 8215B330h */ case    2:  		/* lwz R9, <#[R31 + 4]> */
		/* 8215B330h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B330h case    2:*/		return 0x8215B334;
		  /* 8215B334h */ case    3:  		/* mr R3, R31 */
		/* 8215B334h case    3:*/		regs.R3 = regs.R31;
		/* 8215B334h case    3:*/		return 0x8215B338;
		  /* 8215B338h */ case    4:  		/* stw R9, <#[R10 + 4]> */
		/* 8215B338h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8215B338h case    4:*/		return 0x8215B33C;
		  /* 8215B33Ch */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 8215B33Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B33Ch case    5:*/		return 0x8215B340;
		  /* 8215B340h */ case    6:  		/* lwz R9, <#[R31 + 8]> */
		/* 8215B340h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B340h case    6:*/		return 0x8215B344;
		  /* 8215B344h */ case    7:  		/* stw R9, <#[R10 + 8]> */
		/* 8215B344h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8215B344h case    7:*/		return 0x8215B348;
		  /* 8215B348h */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 8215B348h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B348h case    8:*/		return 0x8215B34C;
		  /* 8215B34Ch */ case    9:  		/* stw R11, <#[R31 + 8]> */
		/* 8215B34Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B34Ch case    9:*/		return 0x8215B350;
	}
	return 0x8215B350;
} // Block from 8215B328h-8215B350h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B350);
		  /* 8215B350h */ case    0:  		/* addi R1, R1, 112 */
		/* 8215B350h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215B350h case    0:*/		return 0x8215B354;
		  /* 8215B354h */ case    1:  		/* b -827560 */
		/* 8215B354h case    1:*/		return 0x820912AC;
		/* 8215B354h case    1:*/		return 0x8215B358;
	}
	return 0x8215B358;
} // Block from 8215B350h-8215B358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215B358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B358);
		  /* 8215B358h */ case    0:  		/* mfspr R12, LR */
		/* 8215B358h case    0:*/		regs.R12 = regs.LR;
		/* 8215B358h case    0:*/		return 0x8215B35C;
		  /* 8215B35Ch */ case    1:  		/* bl -827664 */
		/* 8215B35Ch case    1:*/		regs.LR = 0x8215B360; return 0x8209124C;
		/* 8215B35Ch case    1:*/		return 0x8215B360;
		  /* 8215B360h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215B360h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215B360h case    2:*/		return 0x8215B364;
		  /* 8215B364h */ case    3:  		/* lis R11, -32253 */
		/* 8215B364h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B364h case    3:*/		return 0x8215B368;
		  /* 8215B368h */ case    4:  		/* lis R10, -32252 */
		/* 8215B368h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B368h case    4:*/		return 0x8215B36C;
		  /* 8215B36Ch */ case    5:  		/* mr R29, R3 */
		/* 8215B36Ch case    5:*/		regs.R29 = regs.R3;
		/* 8215B36Ch case    5:*/		return 0x8215B370;
		  /* 8215B370h */ case    6:  		/* mr R30, R4 */
		/* 8215B370h case    6:*/		regs.R30 = regs.R4;
		/* 8215B370h case    6:*/		return 0x8215B374;
		  /* 8215B374h */ case    7:  		/* mr R28, R5 */
		/* 8215B374h case    7:*/		regs.R28 = regs.R5;
		/* 8215B374h case    7:*/		return 0x8215B378;
		  /* 8215B378h */ case    8:  		/* mr R25, R6 */
		/* 8215B378h case    8:*/		regs.R25 = regs.R6;
		/* 8215B378h case    8:*/		return 0x8215B37C;
		  /* 8215B37Ch */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 8215B37Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215B37Ch case    9:*/		return 0x8215B380;
		  /* 8215B380h */ case   10:  		/* addi R27, R11, 27460 */
		/* 8215B380h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215B380h case   10:*/		return 0x8215B384;
		  /* 8215B384h */ case   11:  		/* addi R26, R10, -21920 */
		/* 8215B384h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215B384h case   11:*/		return 0x8215B388;
		  /* 8215B388h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B388h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B3A8;  }
		/* 8215B388h case   12:*/		return 0x8215B38C;
		  /* 8215B38Ch */ case   13:  		/* lis R11, -32252 */
		/* 8215B38Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B38Ch case   13:*/		return 0x8215B390;
		  /* 8215B390h */ case   14:  		/* mr R6, R26 */
		/* 8215B390h case   14:*/		regs.R6 = regs.R26;
		/* 8215B390h case   14:*/		return 0x8215B394;
		  /* 8215B394h */ case   15:  		/* addi R5, R11, -21620 */
		/* 8215B394h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8215B394h case   15:*/		return 0x8215B398;
		  /* 8215B398h */ case   16:  		/* mr R4, R27 */
		/* 8215B398h case   16:*/		regs.R4 = regs.R27;
		/* 8215B398h case   16:*/		return 0x8215B39C;
		  /* 8215B39Ch */ case   17:  		/* li R7, 449 */
		/* 8215B39Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x1C1);
		/* 8215B39Ch case   17:*/		return 0x8215B3A0;
		  /* 8215B3A0h */ case   18:  		/* li R3, 0 */
		/* 8215B3A0h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B3A0h case   18:*/		return 0x8215B3A4;
		  /* 8215B3A4h */ case   19:  		/* bl -14236 */
		/* 8215B3A4h case   19:*/		regs.LR = 0x8215B3A8; return 0x82157C08;
		/* 8215B3A4h case   19:*/		return 0x8215B3A8;
	}
	return 0x8215B3A8;
} // Block from 8215B358h-8215B3A8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215B3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B3A8);
		  /* 8215B3A8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215B3A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215B3A8h case    0:*/		return 0x8215B3AC;
		  /* 8215B3ACh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B3ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215B3CC;  }
		/* 8215B3ACh case    1:*/		return 0x8215B3B0;
		  /* 8215B3B0h */ case    2:  		/* lis R11, -32252 */
		/* 8215B3B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B3B0h case    2:*/		return 0x8215B3B4;
		  /* 8215B3B4h */ case    3:  		/* mr R6, R26 */
		/* 8215B3B4h case    3:*/		regs.R6 = regs.R26;
		/* 8215B3B4h case    3:*/		return 0x8215B3B8;
		  /* 8215B3B8h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8215B3B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8215B3B8h case    4:*/		return 0x8215B3BC;
		  /* 8215B3BCh */ case    5:  		/* mr R4, R27 */
		/* 8215B3BCh case    5:*/		regs.R4 = regs.R27;
		/* 8215B3BCh case    5:*/		return 0x8215B3C0;
		  /* 8215B3C0h */ case    6:  		/* li R7, 450 */
		/* 8215B3C0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1C2);
		/* 8215B3C0h case    6:*/		return 0x8215B3C4;
		  /* 8215B3C4h */ case    7:  		/* li R3, 0 */
		/* 8215B3C4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B3C4h case    7:*/		return 0x8215B3C8;
		  /* 8215B3C8h */ case    8:  		/* bl -14272 */
		/* 8215B3C8h case    8:*/		regs.LR = 0x8215B3CC; return 0x82157C08;
		/* 8215B3C8h case    8:*/		return 0x8215B3CC;
	}
	return 0x8215B3CC;
} // Block from 8215B3A8h-8215B3CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215B3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B3CC);
		  /* 8215B3CCh */ case    0:  		/* li R4, 32 */
		/* 8215B3CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8215B3CCh case    0:*/		return 0x8215B3D0;
		  /* 8215B3D0h */ case    1:  		/* mtspr CTR, R30 */
		/* 8215B3D0h case    1:*/		regs.CTR = regs.R30;
		/* 8215B3D0h case    1:*/		return 0x8215B3D4;
		  /* 8215B3D4h */ case    2:  		/* mr R3, R29 */
		/* 8215B3D4h case    2:*/		regs.R3 = regs.R29;
		/* 8215B3D4h case    2:*/		return 0x8215B3D8;
		  /* 8215B3D8h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8215B3D8h case    3:*/		if ( 1 ) { regs.LR = 0x8215B3DC; return (uint32)regs.CTR; }
		/* 8215B3D8h case    3:*/		return 0x8215B3DC;
		  /* 8215B3DCh */ case    4:  		/* or. R31, R3, R3 */
		/* 8215B3DCh case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215B3DCh case    4:*/		return 0x8215B3E0;
		  /* 8215B3E0h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8215B3E0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215B400;  }
		/* 8215B3E0h case    5:*/		return 0x8215B3E4;
		  /* 8215B3E4h */ case    6:  		/* lis R11, -32252 */
		/* 8215B3E4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B3E4h case    6:*/		return 0x8215B3E8;
		  /* 8215B3E8h */ case    7:  		/* mr R6, R26 */
		/* 8215B3E8h case    7:*/		regs.R6 = regs.R26;
		/* 8215B3E8h case    7:*/		return 0x8215B3EC;
		  /* 8215B3ECh */ case    8:  		/* addi R5, R11, -21644 */
		/* 8215B3ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB74);
		/* 8215B3ECh case    8:*/		return 0x8215B3F0;
		  /* 8215B3F0h */ case    9:  		/* mr R4, R27 */
		/* 8215B3F0h case    9:*/		regs.R4 = regs.R27;
		/* 8215B3F0h case    9:*/		return 0x8215B3F4;
		  /* 8215B3F4h */ case   10:  		/* li R7, 456 */
		/* 8215B3F4h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x1C8);
		/* 8215B3F4h case   10:*/		return 0x8215B3F8;
		  /* 8215B3F8h */ case   11:  		/* li R3, 0 */
		/* 8215B3F8h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B3F8h case   11:*/		return 0x8215B3FC;
		  /* 8215B3FCh */ case   12:  		/* bl -14324 */
		/* 8215B3FCh case   12:*/		regs.LR = 0x8215B400; return 0x82157C08;
		/* 8215B3FCh case   12:*/		return 0x8215B400;
	}
	return 0x8215B400;
} // Block from 8215B3CCh-8215B400h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215B400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B400);
		  /* 8215B400h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 8215B400h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B400h case    0:*/		return 0x8215B404;
		  /* 8215B404h */ case    1:  		/* mr R7, R29 */
		/* 8215B404h case    1:*/		regs.R7 = regs.R29;
		/* 8215B404h case    1:*/		return 0x8215B408;
		  /* 8215B408h */ case    2:  		/* stw R30, <#[R31 + 8]> */
		/* 8215B408h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B408h case    2:*/		return 0x8215B40C;
		  /* 8215B40Ch */ case    3:  		/* mr R6, R28 */
		/* 8215B40Ch case    3:*/		regs.R6 = regs.R28;
		/* 8215B40Ch case    3:*/		return 0x8215B410;
		  /* 8215B410h */ case    4:  		/* stw R28, <#[R31 + 12]> */
		/* 8215B410h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215B410h case    4:*/		return 0x8215B414;
		  /* 8215B414h */ case    5:  		/* mr R5, R30 */
		/* 8215B414h case    5:*/		regs.R5 = regs.R30;
		/* 8215B414h case    5:*/		return 0x8215B418;
		  /* 8215B418h */ case    6:  		/* li R4, 20 */
		/* 8215B418h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8215B418h case    6:*/		return 0x8215B41C;
		  /* 8215B41Ch */ case    7:  		/* mr R3, R25 */
		/* 8215B41Ch case    7:*/		regs.R3 = regs.R25;
		/* 8215B41Ch case    7:*/		return 0x8215B420;
		  /* 8215B420h */ case    8:  		/* bl 721840 */
		/* 8215B420h case    8:*/		regs.LR = 0x8215B424; return 0x8220B7D0;
		/* 8215B420h case    8:*/		return 0x8215B424;
		  /* 8215B424h */ case    9:  		/* stw R3, <#[R31]> */
		/* 8215B424h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215B424h case    9:*/		return 0x8215B428;
		  /* 8215B428h */ case   10:  		/* bl -960 */
		/* 8215B428h case   10:*/		regs.LR = 0x8215B42C; return 0x8215B068;
		/* 8215B428h case   10:*/		return 0x8215B42C;
		  /* 8215B42Ch */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 8215B42Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215B42Ch case   11:*/		return 0x8215B430;
		  /* 8215B430h */ case   12:  		/* stw R3, <#[R31 + 16]> */
		/* 8215B430h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B430h case   12:*/		return 0x8215B434;
		  /* 8215B434h */ case   13:  		/* bc 4, CR0_EQ, 32 */
		/* 8215B434h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8215B454;  }
		/* 8215B434h case   13:*/		return 0x8215B438;
		  /* 8215B438h */ case   14:  		/* lis R11, -32252 */
		/* 8215B438h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B438h case   14:*/		return 0x8215B43C;
		  /* 8215B43Ch */ case   15:  		/* mr R6, R26 */
		/* 8215B43Ch case   15:*/		regs.R6 = regs.R26;
		/* 8215B43Ch case   15:*/		return 0x8215B440;
		  /* 8215B440h */ case   16:  		/* addi R5, R11, -21664 */
		/* 8215B440h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB60);
		/* 8215B440h case   16:*/		return 0x8215B444;
		  /* 8215B444h */ case   17:  		/* mr R4, R27 */
		/* 8215B444h case   17:*/		regs.R4 = regs.R27;
		/* 8215B444h case   17:*/		return 0x8215B448;
		  /* 8215B448h */ case   18:  		/* li R7, 471 */
		/* 8215B448h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x1D7);
		/* 8215B448h case   18:*/		return 0x8215B44C;
		  /* 8215B44Ch */ case   19:  		/* li R3, 0 */
		/* 8215B44Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B44Ch case   19:*/		return 0x8215B450;
		  /* 8215B450h */ case   20:  		/* bl -14408 */
		/* 8215B450h case   20:*/		regs.LR = 0x8215B454; return 0x82157C08;
		/* 8215B450h case   20:*/		return 0x8215B454;
	}
	return 0x8215B454;
} // Block from 8215B400h-8215B454h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8215B454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B454);
		  /* 8215B454h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B454h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B454h case    0:*/		return 0x8215B458;
		  /* 8215B458h */ case    1:  		/* li R11, 0 */
		/* 8215B458h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215B458h case    1:*/		return 0x8215B45C;
		  /* 8215B45Ch */ case    2:  		/* mr R3, R31 */
		/* 8215B45Ch case    2:*/		regs.R3 = regs.R31;
		/* 8215B45Ch case    2:*/		return 0x8215B460;
		  /* 8215B460h */ case    3:  		/* stw R11, <#[R10 + 12]> */
		/* 8215B460h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8215B460h case    3:*/		return 0x8215B464;
		  /* 8215B464h */ case    4:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B464h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B464h case    4:*/		return 0x8215B468;
		  /* 8215B468h */ case    5:  		/* stw R11, <#[R10 + 16]> */
		/* 8215B468h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8215B468h case    5:*/		return 0x8215B46C;
		  /* 8215B46Ch */ case    6:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B46Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B46Ch case    6:*/		return 0x8215B470;
		  /* 8215B470h */ case    7:  		/* stw R10, <#[R10 + 8]> */
		/* 8215B470h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8215B470h case    7:*/		return 0x8215B474;
		  /* 8215B474h */ case    8:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B474h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B474h case    8:*/		return 0x8215B478;
		  /* 8215B478h */ case    9:  		/* stw R10, <#[R10 + 4]> */
		/* 8215B478h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8215B478h case    9:*/		return 0x8215B47C;
		  /* 8215B47Ch */ case   10:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B47Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B47Ch case   10:*/		return 0x8215B480;
		  /* 8215B480h */ case   11:  		/* stw R11, <#[R31 + 20]> */
		/* 8215B480h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B480h case   11:*/		return 0x8215B484;
		  /* 8215B484h */ case   12:  		/* stw R10, <#[R31 + 24]> */
		/* 8215B484h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8215B484h case   12:*/		return 0x8215B488;
		  /* 8215B488h */ case   13:  		/* addi R1, R1, 144 */
		/* 8215B488h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215B488h case   13:*/		return 0x8215B48C;
		  /* 8215B48Ch */ case   14:  		/* b -827888 */
		/* 8215B48Ch case   14:*/		return 0x8209129C;
		/* 8215B48Ch case   14:*/		return 0x8215B490;
	}
	return 0x8215B490;
} // Block from 8215B454h-8215B490h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215B490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B490);
		  /* 8215B490h */ case    0:  		/* mfspr R12, LR */
		/* 8215B490h case    0:*/		regs.R12 = regs.LR;
		/* 8215B490h case    0:*/		return 0x8215B494;
		  /* 8215B494h */ case    1:  		/* bl -827972 */
		/* 8215B494h case    1:*/		regs.LR = 0x8215B498; return 0x82091250;
		/* 8215B494h case    1:*/		return 0x8215B498;
		  /* 8215B498h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215B498h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215B498h case    2:*/		return 0x8215B49C;
		  /* 8215B49Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215B49Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B49Ch case    3:*/		return 0x8215B4A0;
		  /* 8215B4A0h */ case    4:  		/* lis R9, -32252 */
		/* 8215B4A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215B4A0h case    4:*/		return 0x8215B4A4;
		  /* 8215B4A4h */ case    5:  		/* addi R28, R11, 27460 */
		/* 8215B4A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215B4A4h case    5:*/		return 0x8215B4A8;
		  /* 8215B4A8h */ case    6:  		/* lwz R11, <#[R3 + 16]> */
		/* 8215B4A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8215B4A8h case    6:*/		return 0x8215B4AC;
		  /* 8215B4ACh */ case    7:  		/* lis R10, -32252 */
		/* 8215B4ACh case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B4ACh case    7:*/		return 0x8215B4B0;
		  /* 8215B4B0h */ case    8:  		/* mr R31, R3 */
		/* 8215B4B0h case    8:*/		regs.R31 = regs.R3;
		/* 8215B4B0h case    8:*/		return 0x8215B4B4;
		  /* 8215B4B4h */ case    9:  		/* addi R27, R9, -21604 */
		/* 8215B4B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFFAB9C);
		/* 8215B4B4h case    9:*/		return 0x8215B4B8;
		  /* 8215B4B8h */ case   10:  		/* addi R26, R10, -21920 */
		/* 8215B4B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215B4B8h case   10:*/		return 0x8215B4BC;
		  /* 8215B4BCh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8215B4BCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B4BCh case   11:*/		return 0x8215B4C0;
		  /* 8215B4C0h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 8215B4C0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B4CC;  }
		/* 8215B4C0h case   12:*/		return 0x8215B4C4;
		  /* 8215B4C4h */ case   13:  		/* li R30, 0 */
		/* 8215B4C4h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215B4C4h case   13:*/		return 0x8215B4C8;
		  /* 8215B4C8h */ case   14:  		/* b 16 */
		/* 8215B4C8h case   14:*/		return 0x8215B4D8;
		/* 8215B4C8h case   14:*/		return 0x8215B4CC;
	}
	return 0x8215B4CC;
} // Block from 8215B490h-8215B4CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215B4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B4CC);
		  /* 8215B4CCh */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215B4CCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215B4CCh case    0:*/		return 0x8215B4D0;
		  /* 8215B4D0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215B4D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215B4D0h case    1:*/		return 0x8215B4D4;
		  /* 8215B4D4h */ case    2:  		/* bc 4, CR6_EQ, 124 */
		/* 8215B4D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B550;  }
		/* 8215B4D4h case    2:*/		return 0x8215B4D8;
	}
	return 0x8215B4D8;
} // Block from 8215B4CCh-8215B4D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B4D8);
		  /* 8215B4D8h */ case    0:  		/* mr R6, R26 */
		/* 8215B4D8h case    0:*/		regs.R6 = regs.R26;
		/* 8215B4D8h case    0:*/		return 0x8215B4DC;
		  /* 8215B4DCh */ case    1:  		/* mr R5, R27 */
		/* 8215B4DCh case    1:*/		regs.R5 = regs.R27;
		/* 8215B4DCh case    1:*/		return 0x8215B4E0;
		  /* 8215B4E0h */ case    2:  		/* mr R4, R28 */
		/* 8215B4E0h case    2:*/		regs.R4 = regs.R28;
		/* 8215B4E0h case    2:*/		return 0x8215B4E4;
		  /* 8215B4E4h */ case    3:  		/* li R7, 515 */
		/* 8215B4E4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x203);
		/* 8215B4E4h case    3:*/		return 0x8215B4E8;
		  /* 8215B4E8h */ case    4:  		/* li R3, 0 */
		/* 8215B4E8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B4E8h case    4:*/		return 0x8215B4EC;
		  /* 8215B4ECh */ case    5:  		/* bl -14564 */
		/* 8215B4ECh case    5:*/		regs.LR = 0x8215B4F0; return 0x82157C08;
		/* 8215B4ECh case    5:*/		return 0x8215B4F0;
		  /* 8215B4F0h */ case    6:  		/* b 96 */
		/* 8215B4F0h case    6:*/		return 0x8215B550;
		/* 8215B4F0h case    6:*/		return 0x8215B4F4;
		  /* 8215B4F4h */ case    7:  		/* mr R29, R30 */
		/* 8215B4F4h case    7:*/		regs.R29 = regs.R30;
		/* 8215B4F4h case    7:*/		return 0x8215B4F8;
		  /* 8215B4F8h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 8215B4F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215B4F8h case    8:*/		return 0x8215B4FC;
		  /* 8215B4FCh */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8215B4FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8215B50C;  }
		/* 8215B4FCh case    9:*/		return 0x8215B500;
		  /* 8215B500h */ case   10:  		/* lwz R30, <#[R30 + 8]> */
		/* 8215B500h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8215B500h case   10:*/		return 0x8215B504;
		  /* 8215B504h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 8215B504h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215B504h case   11:*/		return 0x8215B508;
		  /* 8215B508h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8215B508h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215B524;  }
		/* 8215B508h case   12:*/		return 0x8215B50C;
	}
	return 0x8215B50C;
} // Block from 8215B4D8h-8215B50Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215B50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B50C);
		  /* 8215B50Ch */ case    0:  		/* mr R6, R26 */
		/* 8215B50Ch case    0:*/		regs.R6 = regs.R26;
		/* 8215B50Ch case    0:*/		return 0x8215B510;
		  /* 8215B510h */ case    1:  		/* mr R5, R27 */
		/* 8215B510h case    1:*/		regs.R5 = regs.R27;
		/* 8215B510h case    1:*/		return 0x8215B514;
		  /* 8215B514h */ case    2:  		/* mr R4, R28 */
		/* 8215B514h case    2:*/		regs.R4 = regs.R28;
		/* 8215B514h case    2:*/		return 0x8215B518;
		  /* 8215B518h */ case    3:  		/* li R7, 524 */
		/* 8215B518h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x20C);
		/* 8215B518h case    3:*/		return 0x8215B51C;
		  /* 8215B51Ch */ case    4:  		/* li R3, 0 */
		/* 8215B51Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B51Ch case    4:*/		return 0x8215B520;
		  /* 8215B520h */ case    5:  		/* bl -14616 */
		/* 8215B520h case    5:*/		regs.LR = 0x8215B524; return 0x82157C08;
		/* 8215B520h case    5:*/		return 0x8215B524;
	}
	return 0x8215B524;
} // Block from 8215B50Ch-8215B524h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215B524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B524);
		  /* 8215B524h */ case    0:  		/* mr R3, R29 */
		/* 8215B524h case    0:*/		regs.R3 = regs.R29;
		/* 8215B524h case    0:*/		return 0x8215B528;
		  /* 8215B528h */ case    1:  		/* bl -632 */
		/* 8215B528h case    1:*/		regs.LR = 0x8215B52C; return 0x8215B2B0;
		/* 8215B528h case    1:*/		return 0x8215B52C;
		  /* 8215B52Ch */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215B52Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215B52Ch case    2:*/		return 0x8215B530;
		  /* 8215B530h */ case    3:  		/* mr R29, R3 */
		/* 8215B530h case    3:*/		regs.R29 = regs.R3;
		/* 8215B530h case    3:*/		return 0x8215B534;
		  /* 8215B534h */ case    4:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215B534h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B534h case    4:*/		return 0x8215B538;
		  /* 8215B538h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215B538h case    5:*/		regs.CTR = regs.R11;
		/* 8215B538h case    5:*/		return 0x8215B53C;
		  /* 8215B53Ch */ case    6:  		/* lwz R4, <#[R29 + 16]> */
		/* 8215B53Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 8215B53Ch case    6:*/		return 0x8215B540;
		  /* 8215B540h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8215B540h case    7:*/		if ( 1 ) { regs.LR = 0x8215B544; return (uint32)regs.CTR; }
		/* 8215B540h case    7:*/		return 0x8215B544;
		  /* 8215B544h */ case    8:  		/* mr R4, R29 */
		/* 8215B544h case    8:*/		regs.R4 = regs.R29;
		/* 8215B544h case    8:*/		return 0x8215B548;
		  /* 8215B548h */ case    9:  		/* lwz R3, <#[R29]> */
		/* 8215B548h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8215B548h case    9:*/		return 0x8215B54C;
		  /* 8215B54Ch */ case   10:  		/* bl 722092 */
		/* 8215B54Ch case   10:*/		regs.LR = 0x8215B550; return 0x8220B9F8;
		/* 8215B54Ch case   10:*/		return 0x8215B550;
	}
	return 0x8215B550;
} // Block from 8215B524h-8215B550h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215B550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B550);
		  /* 8215B550h */ case    0:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215B550h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B550h case    0:*/		return 0x8215B554;
		  /* 8215B554h */ case    1:  		/* cmplw CR6, R30, R4 */
		/* 8215B554h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8215B554h case    1:*/		return 0x8215B558;
		  /* 8215B558h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 8215B558h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B4F4;  }
		/* 8215B558h case    2:*/		return 0x8215B55C;
		  /* 8215B55Ch */ case    3:  		/* cmplwi CR0, R4, 0 */
		/* 8215B55Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8215B55Ch case    3:*/		return 0x8215B560;
	}
	return 0x8215B560;
} // Block from 8215B550h-8215B560h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215B560h
// Function '?SSMCreateShader@XGRAPHICS@@YIIPAX0IW4_E_SSM_COMPILEMODE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B560);
		  /* 8215B560h */ case    0:  		/* bc 12, CR0_EQ, 12 */
		/* 8215B560h case    0:*/		if ( regs.CR[0].eq ) { return 0x8215B56C;  }
		/* 8215B560h case    0:*/		return 0x8215B564;
		  /* 8215B564h */ case    1:  		/* lwz R3, <#[R4]> */
		/* 8215B564h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215B564h case    1:*/		return 0x8215B568;
		  /* 8215B568h */ case    2:  		/* bl 722064 */
		/* 8215B568h case    2:*/		regs.LR = 0x8215B56C; return 0x8220B9F8;
		/* 8215B568h case    2:*/		return 0x8215B56C;
	}
	return 0x8215B56C;
} // Block from 8215B560h-8215B56Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B56C);
		  /* 8215B56Ch */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215B56Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215B56Ch case    0:*/		return 0x8215B570;
		  /* 8215B570h */ case    1:  		/* bl 721696 */
		/* 8215B570h case    1:*/		regs.LR = 0x8215B574; return 0x8220B890;
		/* 8215B570h case    1:*/		return 0x8215B574;
		  /* 8215B574h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215B574h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215B574h case    2:*/		return 0x8215B578;
		  /* 8215B578h */ case    3:  		/* mr R4, R31 */
		/* 8215B578h case    3:*/		regs.R4 = regs.R31;
		/* 8215B578h case    3:*/		return 0x8215B57C;
		  /* 8215B57Ch */ case    4:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215B57Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B57Ch case    4:*/		return 0x8215B580;
		  /* 8215B580h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215B580h case    5:*/		regs.CTR = regs.R11;
		/* 8215B580h case    5:*/		return 0x8215B584;
		  /* 8215B584h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8215B584h case    6:*/		if ( 1 ) { regs.LR = 0x8215B588; return (uint32)regs.CTR; }
		/* 8215B584h case    6:*/		return 0x8215B588;
		  /* 8215B588h */ case    7:  		/* addi R1, R1, 144 */
		/* 8215B588h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215B588h case    7:*/		return 0x8215B58C;
		  /* 8215B58Ch */ case    8:  		/* b -828140 */
		/* 8215B58Ch case    8:*/		return 0x820912A0;
		/* 8215B58Ch case    8:*/		return 0x8215B590;
	}
	return 0x8215B590;
} // Block from 8215B56Ch-8215B590h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215B590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B590);
		  /* 8215B590h */ case    0:  		/* mfspr R12, LR */
		/* 8215B590h case    0:*/		regs.R12 = regs.LR;
		/* 8215B590h case    0:*/		return 0x8215B594;
		  /* 8215B594h */ case    1:  		/* bl -828228 */
		/* 8215B594h case    1:*/		regs.LR = 0x8215B598; return 0x82091250;
		/* 8215B594h case    1:*/		return 0x8215B598;
		  /* 8215B598h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215B598h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215B598h case    2:*/		return 0x8215B59C;
		  /* 8215B59Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215B59Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B59Ch case    3:*/		return 0x8215B5A0;
		  /* 8215B5A0h */ case    4:  		/* lis R10, -32252 */
		/* 8215B5A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B5A0h case    4:*/		return 0x8215B5A4;
		  /* 8215B5A4h */ case    5:  		/* mr R31, R3 */
		/* 8215B5A4h case    5:*/		regs.R31 = regs.R3;
		/* 8215B5A4h case    5:*/		return 0x8215B5A8;
		  /* 8215B5A8h */ case    6:  		/* mr R27, R4 */
		/* 8215B5A8h case    6:*/		regs.R27 = regs.R4;
		/* 8215B5A8h case    6:*/		return 0x8215B5AC;
		  /* 8215B5ACh */ case    7:  		/* mr R26, R5 */
		/* 8215B5ACh case    7:*/		regs.R26 = regs.R5;
		/* 8215B5ACh case    7:*/		return 0x8215B5B0;
		  /* 8215B5B0h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215B5B0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B5B0h case    8:*/		return 0x8215B5B4;
		  /* 8215B5B4h */ case    9:  		/* addi R29, R11, 27460 */
		/* 8215B5B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215B5B4h case    9:*/		return 0x8215B5B8;
		  /* 8215B5B8h */ case   10:  		/* addi R28, R10, -21920 */
		/* 8215B5B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215B5B8h case   10:*/		return 0x8215B5BC;
		  /* 8215B5BCh */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B5BCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215B5DC;  }
		/* 8215B5BCh case   11:*/		return 0x8215B5C0;
		  /* 8215B5C0h */ case   12:  		/* lis R11, -32252 */
		/* 8215B5C0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B5C0h case   12:*/		return 0x8215B5C4;
		  /* 8215B5C4h */ case   13:  		/* mr R6, R28 */
		/* 8215B5C4h case   13:*/		regs.R6 = regs.R28;
		/* 8215B5C4h case   13:*/		return 0x8215B5C8;
		  /* 8215B5C8h */ case   14:  		/* addi R5, R11, -21592 */
		/* 8215B5C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABA8);
		/* 8215B5C8h case   14:*/		return 0x8215B5CC;
		  /* 8215B5CCh */ case   15:  		/* mr R4, R29 */
		/* 8215B5CCh case   15:*/		regs.R4 = regs.R29;
		/* 8215B5CCh case   15:*/		return 0x8215B5D0;
		  /* 8215B5D0h */ case   16:  		/* li R7, 570 */
		/* 8215B5D0h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x23A);
		/* 8215B5D0h case   16:*/		return 0x8215B5D4;
		  /* 8215B5D4h */ case   17:  		/* li R3, 0 */
		/* 8215B5D4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B5D4h case   17:*/		return 0x8215B5D8;
		  /* 8215B5D8h */ case   18:  		/* bl -14800 */
		/* 8215B5D8h case   18:*/		regs.LR = 0x8215B5DC; return 0x82157C08;
		/* 8215B5D8h case   18:*/		return 0x8215B5DC;
	}
	return 0x8215B5DC;
} // Block from 8215B590h-8215B5DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215B5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B5DC);
		  /* 8215B5DCh */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215B5DCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215B5DCh case    0:*/		return 0x8215B5E0;
		  /* 8215B5E0h */ case    1:  		/* bl -1400 */
		/* 8215B5E0h case    1:*/		regs.LR = 0x8215B5E4; return 0x8215B068;
		/* 8215B5E0h case    1:*/		return 0x8215B5E4;
		  /* 8215B5E4h */ case    2:  		/* or. R30, R3, R3 */
		/* 8215B5E4h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215B5E4h case    2:*/		return 0x8215B5E8;
		  /* 8215B5E8h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215B5E8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215B608;  }
		/* 8215B5E8h case    3:*/		return 0x8215B5EC;
		  /* 8215B5ECh */ case    4:  		/* lis R11, -32252 */
		/* 8215B5ECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B5ECh case    4:*/		return 0x8215B5F0;
		  /* 8215B5F0h */ case    5:  		/* mr R6, R28 */
		/* 8215B5F0h case    5:*/		regs.R6 = regs.R28;
		/* 8215B5F0h case    5:*/		return 0x8215B5F4;
		  /* 8215B5F4h */ case    6:  		/* addi R5, R11, -21932 */
		/* 8215B5F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA54);
		/* 8215B5F4h case    6:*/		return 0x8215B5F8;
		  /* 8215B5F8h */ case    7:  		/* mr R4, R29 */
		/* 8215B5F8h case    7:*/		regs.R4 = regs.R29;
		/* 8215B5F8h case    7:*/		return 0x8215B5FC;
		  /* 8215B5FCh */ case    8:  		/* li R7, 575 */
		/* 8215B5FCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x23F);
		/* 8215B5FCh case    8:*/		return 0x8215B600;
		  /* 8215B600h */ case    9:  		/* li R3, 0 */
		/* 8215B600h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B600h case    9:*/		return 0x8215B604;
		  /* 8215B604h */ case   10:  		/* bl -14844 */
		/* 8215B604h case   10:*/		regs.LR = 0x8215B608; return 0x82157C08;
		/* 8215B604h case   10:*/		return 0x8215B608;
	}
	return 0x8215B608;
} // Block from 8215B5DCh-8215B608h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215B608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B608);
		  /* 8215B608h */ case    0:  		/* stw R27, <#[R30 + 12]> */
		/* 8215B608h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215B608h case    0:*/		return 0x8215B60C;
		  /* 8215B60Ch */ case    1:  		/* mr R4, R30 */
		/* 8215B60Ch case    1:*/		regs.R4 = regs.R30;
		/* 8215B60Ch case    1:*/		return 0x8215B610;
		  /* 8215B610h */ case    2:  		/* stw R26, <#[R30 + 16]> */
		/* 8215B610h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000010) );
		/* 8215B610h case    2:*/		return 0x8215B614;
		  /* 8215B614h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215B614h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B614h case    3:*/		return 0x8215B618;
		  /* 8215B618h */ case    4:  		/* bl -1104 */
		/* 8215B618h case    4:*/		regs.LR = 0x8215B61C; return 0x8215B1C8;
		/* 8215B618h case    4:*/		return 0x8215B61C;
		  /* 8215B61Ch */ case    5:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215B61Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B61Ch case    5:*/		return 0x8215B620;
		  /* 8215B620h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8215B620h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B620h case    6:*/		return 0x8215B624;
		  /* 8215B624h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 8215B624h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8215B630;  }
		/* 8215B624h case    7:*/		return 0x8215B628;
		  /* 8215B628h */ case    8:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B628h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B628h case    8:*/		return 0x8215B62C;
		  /* 8215B62Ch */ case    9:  		/* stw R30, <#[R11 + 8]> */
		/* 8215B62Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215B62Ch case    9:*/		return 0x8215B630;
	}
	return 0x8215B630;
} // Block from 8215B608h-8215B630h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B630);
		  /* 8215B630h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215B630h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B630h case    0:*/		return 0x8215B634;
		  /* 8215B634h */ case    1:  		/* addi R11, R11, 1 */
		/* 8215B634h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215B634h case    1:*/		return 0x8215B638;
		  /* 8215B638h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215B638h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B638h case    2:*/		return 0x8215B63C;
		  /* 8215B63Ch */ case    3:  		/* addi R1, R1, 144 */
		/* 8215B63Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215B63Ch case    3:*/		return 0x8215B640;
		  /* 8215B640h */ case    4:  		/* b -828320 */
		/* 8215B640h case    4:*/		return 0x820912A0;
		/* 8215B640h case    4:*/		return 0x8215B644;
		  /* 8215B644h */ case    5:  		/* nop */
		/* 8215B644h case    5:*/		cpu::op::nop();
		/* 8215B644h case    5:*/		return 0x8215B648;
	}
	return 0x8215B648;
} // Block from 8215B630h-8215B648h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215B648h
// Function '?SSMDeleteShader@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@PAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B648);
		  /* 8215B648h */ case    0:  		/* mfspr R12, LR */
		/* 8215B648h case    0:*/		regs.R12 = regs.LR;
		/* 8215B648h case    0:*/		return 0x8215B64C;
		  /* 8215B64Ch */ case    1:  		/* bl -828412 */
		/* 8215B64Ch case    1:*/		regs.LR = 0x8215B650; return 0x82091250;
		/* 8215B64Ch case    1:*/		return 0x8215B650;
		  /* 8215B650h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215B650h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215B650h case    2:*/		return 0x8215B654;
		  /* 8215B654h */ case    3:  		/* lis R11, -32253 */
		/* 8215B654h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B654h case    3:*/		return 0x8215B658;
		  /* 8215B658h */ case    4:  		/* lis R10, -32252 */
		/* 8215B658h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B658h case    4:*/		return 0x8215B65C;
		  /* 8215B65Ch */ case    5:  		/* mr R31, R3 */
		/* 8215B65Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215B65Ch case    5:*/		return 0x8215B660;
		  /* 8215B660h */ case    6:  		/* mr R28, R4 */
		/* 8215B660h case    6:*/		regs.R28 = regs.R4;
		/* 8215B660h case    6:*/		return 0x8215B664;
		  /* 8215B664h */ case    7:  		/* mr R26, R5 */
		/* 8215B664h case    7:*/		regs.R26 = regs.R5;
		/* 8215B664h case    7:*/		return 0x8215B668;
		  /* 8215B668h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8215B668h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215B668h case    8:*/		return 0x8215B66C;
		  /* 8215B66Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215B66Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B66Ch case    9:*/		return 0x8215B670;
		  /* 8215B670h */ case   10:  		/* addi R29, R10, -21920 */
		/* 8215B670h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215B670h case   10:*/		return 0x8215B674;
		  /* 8215B674h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B674h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215B694;  }
		/* 8215B674h case   11:*/		return 0x8215B678;
		  /* 8215B678h */ case   12:  		/* lis R11, -32252 */
		/* 8215B678h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B678h case   12:*/		return 0x8215B67C;
		  /* 8215B67Ch */ case   13:  		/* mr R6, R29 */
		/* 8215B67Ch case   13:*/		regs.R6 = regs.R29;
		/* 8215B67Ch case   13:*/		return 0x8215B680;
		  /* 8215B680h */ case   14:  		/* addi R5, R11, -21560 */
		/* 8215B680h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABC8);
		/* 8215B680h case   14:*/		return 0x8215B684;
		  /* 8215B684h */ case   15:  		/* mr R4, R30 */
		/* 8215B684h case   15:*/		regs.R4 = regs.R30;
		/* 8215B684h case   15:*/		return 0x8215B688;
		  /* 8215B688h */ case   16:  		/* li R7, 621 */
		/* 8215B688h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x26D);
		/* 8215B688h case   16:*/		return 0x8215B68C;
		  /* 8215B68Ch */ case   17:  		/* li R3, 0 */
		/* 8215B68Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B68Ch case   17:*/		return 0x8215B690;
		  /* 8215B690h */ case   18:  		/* bl -14984 */
		/* 8215B690h case   18:*/		regs.LR = 0x8215B694; return 0x82157C08;
		/* 8215B690h case   18:*/		return 0x8215B694;
	}
	return 0x8215B694;
} // Block from 8215B648h-8215B694h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215B694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B694);
		  /* 8215B694h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215B694h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215B694h case    0:*/		return 0x8215B698;
		  /* 8215B698h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B698h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215B6B8;  }
		/* 8215B698h case    1:*/		return 0x8215B69C;
		  /* 8215B69Ch */ case    2:  		/* lis R11, -32252 */
		/* 8215B69Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B69Ch case    2:*/		return 0x8215B6A0;
		  /* 8215B6A0h */ case    3:  		/* mr R6, R29 */
		/* 8215B6A0h case    3:*/		regs.R6 = regs.R29;
		/* 8215B6A0h case    3:*/		return 0x8215B6A4;
		  /* 8215B6A4h */ case    4:  		/* addi R5, R11, -21572 */
		/* 8215B6A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABBC);
		/* 8215B6A4h case    4:*/		return 0x8215B6A8;
		  /* 8215B6A8h */ case    5:  		/* mr R4, R30 */
		/* 8215B6A8h case    5:*/		regs.R4 = regs.R30;
		/* 8215B6A8h case    5:*/		return 0x8215B6AC;
		  /* 8215B6ACh */ case    6:  		/* li R7, 622 */
		/* 8215B6ACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x26E);
		/* 8215B6ACh case    6:*/		return 0x8215B6B0;
	}
	return 0x8215B6B0;
} // Block from 8215B694h-8215B6B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215B6B0h
// Function '?AS_GetSSMOBJHandle@XGRAPHICS@@YAPAXPAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B6B0);
		  /* 8215B6B0h */ case    0:  		/* li R3, 0 */
		/* 8215B6B0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B6B0h case    0:*/		return 0x8215B6B4;
		  /* 8215B6B4h */ case    1:  		/* bl -15020 */
		/* 8215B6B4h case    1:*/		regs.LR = 0x8215B6B8; return 0x82157C08;
		/* 8215B6B4h case    1:*/		return 0x8215B6B8;
	}
	return 0x8215B6B8;
} // Block from 8215B6B0h-8215B6B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215B6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B6B8);
		  /* 8215B6B8h */ case    0:  		/* cmplw CR6, R31, R28 */
		/* 8215B6B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 8215B6B8h case    0:*/		return 0x8215B6BC;
		  /* 8215B6BCh */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 8215B6BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8215B700;  }
		/* 8215B6BCh case    1:*/		return 0x8215B6C0;
		  /* 8215B6C0h */ case    2:  		/* lis R11, -32252 */
		/* 8215B6C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B6C0h case    2:*/		return 0x8215B6C4;
		  /* 8215B6C4h */ case    3:  		/* addi R27, R11, -21584 */
		/* 8215B6C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFABB0);
		/* 8215B6C4h case    3:*/		return 0x8215B6C8;
		  /* 8215B6C8h */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215B6C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215B6C8h case    4:*/		return 0x8215B6CC;
		  /* 8215B6CCh */ case    5:  		/* cmplw CR6, R11, R26 */
		/* 8215B6CCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8215B6CCh case    5:*/		return 0x8215B6D0;
		  /* 8215B6D0h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8215B6D0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215B704;  }
		/* 8215B6D0h case    6:*/		return 0x8215B6D4;
		  /* 8215B6D4h */ case    7:  		/* lwz R31, <#[R31 + 8]> */
		/* 8215B6D4h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B6D4h case    7:*/		return 0x8215B6D8;
		  /* 8215B6D8h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8215B6D8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215B6D8h case    8:*/		return 0x8215B6DC;
		  /* 8215B6DCh */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 8215B6DCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215B6F8;  }
		/* 8215B6DCh case    9:*/		return 0x8215B6E0;
		  /* 8215B6E0h */ case   10:  		/* mr R6, R29 */
		/* 8215B6E0h case   10:*/		regs.R6 = regs.R29;
		/* 8215B6E0h case   10:*/		return 0x8215B6E4;
		  /* 8215B6E4h */ case   11:  		/* mr R5, R27 */
		/* 8215B6E4h case   11:*/		regs.R5 = regs.R27;
		/* 8215B6E4h case   11:*/		return 0x8215B6E8;
		  /* 8215B6E8h */ case   12:  		/* mr R4, R30 */
		/* 8215B6E8h case   12:*/		regs.R4 = regs.R30;
		/* 8215B6E8h case   12:*/		return 0x8215B6EC;
		  /* 8215B6ECh */ case   13:  		/* li R7, 636 */
		/* 8215B6ECh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x27C);
		/* 8215B6ECh case   13:*/		return 0x8215B6F0;
		  /* 8215B6F0h */ case   14:  		/* li R3, 0 */
		/* 8215B6F0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B6F0h case   14:*/		return 0x8215B6F4;
		  /* 8215B6F4h */ case   15:  		/* bl -15084 */
		/* 8215B6F4h case   15:*/		regs.LR = 0x8215B6F8; return 0x82157C08;
		/* 8215B6F4h case   15:*/		return 0x8215B6F8;
	}
	return 0x8215B6F8;
} // Block from 8215B6B8h-8215B6F8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215B6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B6F8);
		  /* 8215B6F8h */ case    0:  		/* cmplw CR6, R31, R28 */
		/* 8215B6F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 8215B6F8h case    0:*/		return 0x8215B6FC;
		  /* 8215B6FCh */ case    1:  		/* bc 4, CR6_EQ, -52 */
		/* 8215B6FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215B6C8;  }
		/* 8215B6FCh case    1:*/		return 0x8215B700;
	}
	return 0x8215B700;
} // Block from 8215B6F8h-8215B700h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215B700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B700);
		  /* 8215B700h */ case    0:  		/* li R31, 0 */
		/* 8215B700h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215B700h case    0:*/		return 0x8215B704;
	}
	return 0x8215B704;
} // Block from 8215B700h-8215B704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215B704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B704);
		  /* 8215B704h */ case    0:  		/* mr R3, R31 */
		/* 8215B704h case    0:*/		regs.R3 = regs.R31;
		/* 8215B704h case    0:*/		return 0x8215B708;
	}
	return 0x8215B708;
} // Block from 8215B704h-8215B708h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215B708h
// Function '?SSMPrecompileShader@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B708);
		  /* 8215B708h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215B708h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215B708h case    0:*/		return 0x8215B70C;
		  /* 8215B70Ch */ case    1:  		/* b -828524 */
		/* 8215B70Ch case    1:*/		return 0x820912A0;
		/* 8215B70Ch case    1:*/		return 0x8215B710;
	}
	return 0x8215B710;
} // Block from 8215B708h-8215B710h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215B710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B710);
		  /* 8215B710h */ case    0:  		/* mfspr R12, LR */
		/* 8215B710h case    0:*/		regs.R12 = regs.LR;
		/* 8215B710h case    0:*/		return 0x8215B714;
		  /* 8215B714h */ case    1:  		/* bl -828608 */
		/* 8215B714h case    1:*/		regs.LR = 0x8215B718; return 0x82091254;
		/* 8215B714h case    1:*/		return 0x8215B718;
		  /* 8215B718h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215B718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215B718h case    2:*/		return 0x8215B71C;
		  /* 8215B71Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215B71Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B71Ch case    3:*/		return 0x8215B720;
		  /* 8215B720h */ case    4:  		/* lis R10, -32252 */
		/* 8215B720h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B720h case    4:*/		return 0x8215B724;
		  /* 8215B724h */ case    5:  		/* mr R31, R3 */
		/* 8215B724h case    5:*/		regs.R31 = regs.R3;
		/* 8215B724h case    5:*/		return 0x8215B728;
		  /* 8215B728h */ case    6:  		/* mr R27, R4 */
		/* 8215B728h case    6:*/		regs.R27 = regs.R4;
		/* 8215B728h case    6:*/		return 0x8215B72C;
		  /* 8215B72Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215B72Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B72Ch case    7:*/		return 0x8215B730;
		  /* 8215B730h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215B730h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215B730h case    8:*/		return 0x8215B734;
		  /* 8215B734h */ case    9:  		/* addi R28, R10, -21920 */
		/* 8215B734h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215B734h case    9:*/		return 0x8215B738;
		  /* 8215B738h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B738h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215B758;  }
		/* 8215B738h case   10:*/		return 0x8215B73C;
		  /* 8215B73Ch */ case   11:  		/* lis R11, -32252 */
		/* 8215B73Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B73Ch case   11:*/		return 0x8215B740;
		  /* 8215B740h */ case   12:  		/* mr R6, R28 */
		/* 8215B740h case   12:*/		regs.R6 = regs.R28;
		/* 8215B740h case   12:*/		return 0x8215B744;
		  /* 8215B744h */ case   13:  		/* addi R5, R11, -21592 */
		/* 8215B744h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABA8);
		/* 8215B744h case   13:*/		return 0x8215B748;
		  /* 8215B748h */ case   14:  		/* mr R4, R29 */
		/* 8215B748h case   14:*/		regs.R4 = regs.R29;
		/* 8215B748h case   14:*/		return 0x8215B74C;
		  /* 8215B74Ch */ case   15:  		/* li R7, 672 */
		/* 8215B74Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x2A0);
		/* 8215B74Ch case   15:*/		return 0x8215B750;
		  /* 8215B750h */ case   16:  		/* li R3, 0 */
		/* 8215B750h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B750h case   16:*/		return 0x8215B754;
		  /* 8215B754h */ case   17:  		/* bl -15180 */
		/* 8215B754h case   17:*/		regs.LR = 0x8215B758; return 0x82157C08;
		/* 8215B754h case   17:*/		return 0x8215B758;
	}
	return 0x8215B758;
} // Block from 8215B710h-8215B758h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215B758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B758);
		  /* 8215B758h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B758h case    0:*/		return 0x8215B75C;
		  /* 8215B75Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B75Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B75Ch case    1:*/		return 0x8215B760;
		  /* 8215B760h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215B760h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B76C;  }
		/* 8215B760h case    2:*/		return 0x8215B764;
		  /* 8215B764h */ case    3:  		/* li R30, 0 */
		/* 8215B764h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215B764h case    3:*/		return 0x8215B768;
		  /* 8215B768h */ case    4:  		/* b 16 */
		/* 8215B768h case    4:*/		return 0x8215B778;
		/* 8215B768h case    4:*/		return 0x8215B76C;
	}
	return 0x8215B76C;
} // Block from 8215B758h-8215B76Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215B76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B76C);
		  /* 8215B76Ch */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215B76Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215B76Ch case    0:*/		return 0x8215B770;
		  /* 8215B770h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215B770h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215B770h case    1:*/		return 0x8215B774;
		  /* 8215B774h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B774h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B794;  }
		/* 8215B774h case    2:*/		return 0x8215B778;
	}
	return 0x8215B778;
} // Block from 8215B76Ch-8215B778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B778);
		  /* 8215B778h */ case    0:  		/* lis R11, -32252 */
		/* 8215B778h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B778h case    0:*/		return 0x8215B77C;
		  /* 8215B77Ch */ case    1:  		/* mr R6, R28 */
		/* 8215B77Ch case    1:*/		regs.R6 = regs.R28;
		/* 8215B77Ch case    1:*/		return 0x8215B780;
		  /* 8215B780h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215B780h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215B780h case    2:*/		return 0x8215B784;
		  /* 8215B784h */ case    3:  		/* mr R4, R29 */
		/* 8215B784h case    3:*/		regs.R4 = regs.R29;
		/* 8215B784h case    3:*/		return 0x8215B788;
		  /* 8215B788h */ case    4:  		/* li R7, 677 */
		/* 8215B788h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2A5);
		/* 8215B788h case    4:*/		return 0x8215B78C;
		  /* 8215B78Ch */ case    5:  		/* li R3, 0 */
		/* 8215B78Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B78Ch case    5:*/		return 0x8215B790;
		  /* 8215B790h */ case    6:  		/* bl -15240 */
		/* 8215B790h case    6:*/		regs.LR = 0x8215B794; return 0x82157C08;
		/* 8215B790h case    6:*/		return 0x8215B794;
	}
	return 0x8215B794;
} // Block from 8215B778h-8215B794h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215B794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B794);
		  /* 8215B794h */ case    0:  		/* mr R5, R27 */
		/* 8215B794h case    0:*/		regs.R5 = regs.R27;
		/* 8215B794h case    0:*/		return 0x8215B798;
		  /* 8215B798h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215B798h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B798h case    1:*/		return 0x8215B79C;
		  /* 8215B79Ch */ case    2:  		/* mr R3, R30 */
		/* 8215B79Ch case    2:*/		regs.R3 = regs.R30;
		/* 8215B79Ch case    2:*/		return 0x8215B7A0;
		  /* 8215B7A0h */ case    3:  		/* bl -344 */
		/* 8215B7A0h case    3:*/		regs.LR = 0x8215B7A4; return 0x8215B648;
		/* 8215B7A0h case    3:*/		return 0x8215B7A4;
		  /* 8215B7A4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215B7A4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215B7A4h case    4:*/		return 0x8215B7A8;
		  /* 8215B7A8h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8215B7A8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215B7B0;  }
		/* 8215B7A8h case    5:*/		return 0x8215B7AC;
		  /* 8215B7ACh */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215B7ACh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B7ACh case    6:*/		return 0x8215B7B0;
	}
	return 0x8215B7B0;
} // Block from 8215B794h-8215B7B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215B7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B7B0);
		  /* 8215B7B0h */ case    0:  		/* stw R3, <#[R31 + 24]> */
		/* 8215B7B0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215B7B0h case    0:*/		return 0x8215B7B4;
		  /* 8215B7B4h */ case    1:  		/* lwz R3, <#[R3 + 16]> */
		/* 8215B7B4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8215B7B4h case    1:*/		return 0x8215B7B8;
		  /* 8215B7B8h */ case    2:  		/* addi R1, R1, 128 */
		/* 8215B7B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215B7B8h case    2:*/		return 0x8215B7BC;
		  /* 8215B7BCh */ case    3:  		/* b -828696 */
		/* 8215B7BCh case    3:*/		return 0x820912A4;
		/* 8215B7BCh case    3:*/		return 0x8215B7C0;
	}
	return 0x8215B7C0;
} // Block from 8215B7B0h-8215B7C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215B7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B7C0);
		  /* 8215B7C0h */ case    0:  		/* mfspr R12, LR */
		/* 8215B7C0h case    0:*/		regs.R12 = regs.LR;
		/* 8215B7C0h case    0:*/		return 0x8215B7C4;
		  /* 8215B7C4h */ case    1:  		/* bl -828784 */
		/* 8215B7C4h case    1:*/		regs.LR = 0x8215B7C8; return 0x82091254;
		/* 8215B7C4h case    1:*/		return 0x8215B7C8;
		  /* 8215B7C8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215B7C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215B7C8h case    2:*/		return 0x8215B7CC;
		  /* 8215B7CCh */ case    3:  		/* lis R11, -32253 */
		/* 8215B7CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B7CCh case    3:*/		return 0x8215B7D0;
		  /* 8215B7D0h */ case    4:  		/* lis R10, -32252 */
		/* 8215B7D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B7D0h case    4:*/		return 0x8215B7D4;
		  /* 8215B7D4h */ case    5:  		/* mr R31, R3 */
		/* 8215B7D4h case    5:*/		regs.R31 = regs.R3;
		/* 8215B7D4h case    5:*/		return 0x8215B7D8;
		  /* 8215B7D8h */ case    6:  		/* mr R27, R4 */
		/* 8215B7D8h case    6:*/		regs.R27 = regs.R4;
		/* 8215B7D8h case    6:*/		return 0x8215B7DC;
		  /* 8215B7DCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215B7DCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B7DCh case    7:*/		return 0x8215B7E0;
		  /* 8215B7E0h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215B7E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215B7E0h case    8:*/		return 0x8215B7E4;
		  /* 8215B7E4h */ case    9:  		/* addi R28, R10, -21920 */
		/* 8215B7E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215B7E4h case    9:*/		return 0x8215B7E8;
		  /* 8215B7E8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B7E8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215B808;  }
		/* 8215B7E8h case   10:*/		return 0x8215B7EC;
		  /* 8215B7ECh */ case   11:  		/* lis R11, -32252 */
		/* 8215B7ECh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B7ECh case   11:*/		return 0x8215B7F0;
		  /* 8215B7F0h */ case   12:  		/* mr R6, R28 */
		/* 8215B7F0h case   12:*/		regs.R6 = regs.R28;
		/* 8215B7F0h case   12:*/		return 0x8215B7F4;
		  /* 8215B7F4h */ case   13:  		/* addi R5, R11, -21592 */
		/* 8215B7F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABA8);
		/* 8215B7F4h case   13:*/		return 0x8215B7F8;
		  /* 8215B7F8h */ case   14:  		/* mr R4, R29 */
		/* 8215B7F8h case   14:*/		regs.R4 = regs.R29;
		/* 8215B7F8h case   14:*/		return 0x8215B7FC;
		  /* 8215B7FCh */ case   15:  		/* li R7, 759 */
		/* 8215B7FCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x2F7);
		/* 8215B7FCh case   15:*/		return 0x8215B800;
		  /* 8215B800h */ case   16:  		/* li R3, 0 */
		/* 8215B800h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B800h case   16:*/		return 0x8215B804;
		  /* 8215B804h */ case   17:  		/* bl -15356 */
		/* 8215B804h case   17:*/		regs.LR = 0x8215B808; return 0x82157C08;
		/* 8215B804h case   17:*/		return 0x8215B808;
	}
	return 0x8215B808;
} // Block from 8215B7C0h-8215B808h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215B808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B808);
		  /* 8215B808h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B808h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B808h case    0:*/		return 0x8215B80C;
		  /* 8215B80Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B80Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B80Ch case    1:*/		return 0x8215B810;
		  /* 8215B810h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215B810h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B81C;  }
		/* 8215B810h case    2:*/		return 0x8215B814;
		  /* 8215B814h */ case    3:  		/* li R30, 0 */
		/* 8215B814h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215B814h case    3:*/		return 0x8215B818;
		  /* 8215B818h */ case    4:  		/* b 16 */
		/* 8215B818h case    4:*/		return 0x8215B828;
		/* 8215B818h case    4:*/		return 0x8215B81C;
	}
	return 0x8215B81C;
} // Block from 8215B808h-8215B81Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215B81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B81C);
		  /* 8215B81Ch */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215B81Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215B81Ch case    0:*/		return 0x8215B820;
		  /* 8215B820h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215B820h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215B820h case    1:*/		return 0x8215B824;
		  /* 8215B824h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B824h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215B844;  }
		/* 8215B824h case    2:*/		return 0x8215B828;
	}
	return 0x8215B828;
} // Block from 8215B81Ch-8215B828h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B828);
		  /* 8215B828h */ case    0:  		/* lis R11, -32252 */
		/* 8215B828h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B828h case    0:*/		return 0x8215B82C;
		  /* 8215B82Ch */ case    1:  		/* mr R6, R28 */
		/* 8215B82Ch case    1:*/		regs.R6 = regs.R28;
		/* 8215B82Ch case    1:*/		return 0x8215B830;
		  /* 8215B830h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215B830h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215B830h case    2:*/		return 0x8215B834;
		  /* 8215B834h */ case    3:  		/* mr R4, R29 */
		/* 8215B834h case    3:*/		regs.R4 = regs.R29;
		/* 8215B834h case    3:*/		return 0x8215B838;
		  /* 8215B838h */ case    4:  		/* li R7, 765 */
		/* 8215B838h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2FD);
		/* 8215B838h case    4:*/		return 0x8215B83C;
		  /* 8215B83Ch */ case    5:  		/* li R3, 0 */
		/* 8215B83Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B83Ch case    5:*/		return 0x8215B840;
		  /* 8215B840h */ case    6:  		/* bl -15416 */
		/* 8215B840h case    6:*/		regs.LR = 0x8215B844; return 0x82157C08;
		/* 8215B840h case    6:*/		return 0x8215B844;
	}
	return 0x8215B844;
} // Block from 8215B828h-8215B844h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215B844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B844);
		  /* 8215B844h */ case    0:  		/* mr R5, R27 */
		/* 8215B844h case    0:*/		regs.R5 = regs.R27;
		/* 8215B844h case    0:*/		return 0x8215B848;
		  /* 8215B848h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215B848h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B848h case    1:*/		return 0x8215B84C;
		  /* 8215B84Ch */ case    2:  		/* mr R3, R30 */
		/* 8215B84Ch case    2:*/		regs.R3 = regs.R30;
		/* 8215B84Ch case    2:*/		return 0x8215B850;
		  /* 8215B850h */ case    3:  		/* bl -520 */
		/* 8215B850h case    3:*/		regs.LR = 0x8215B854; return 0x8215B648;
		/* 8215B850h case    3:*/		return 0x8215B854;
		  /* 8215B854h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215B854h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215B854h case    4:*/		return 0x8215B858;
		  /* 8215B858h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8215B858h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215B860;  }
		/* 8215B858h case    5:*/		return 0x8215B85C;
		  /* 8215B85Ch */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215B85Ch case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B85Ch case    6:*/		return 0x8215B860;
	}
	return 0x8215B860;
} // Block from 8215B844h-8215B860h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215B860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B860);
		  /* 8215B860h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B860h case    0:*/		return 0x8215B864;
		  /* 8215B864h */ case    1:  		/* lwz R30, <#[R3 + 16]> */
		/* 8215B864h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000010) );
		/* 8215B864h case    1:*/		return 0x8215B868;
		  /* 8215B868h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 8215B868h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215B868h case    2:*/		return 0x8215B86C;
		  /* 8215B86Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8215B86Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8215B8A8;  }
		/* 8215B86Ch case    3:*/		return 0x8215B870;
		  /* 8215B870h */ case    4:  		/* bl -1472 */
		/* 8215B870h case    4:*/		regs.LR = 0x8215B874; return 0x8215B2B0;
		/* 8215B870h case    4:*/		return 0x8215B874;
		  /* 8215B874h */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215B874h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215B874h case    5:*/		return 0x8215B878;
		  /* 8215B878h */ case    6:  		/* mr R4, R3 */
		/* 8215B878h case    6:*/		regs.R4 = regs.R3;
		/* 8215B878h case    6:*/		return 0x8215B87C;
		  /* 8215B87Ch */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 8215B87Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215B87Ch case    7:*/		return 0x8215B880;
		  /* 8215B880h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 8215B880h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215B88C;  }
		/* 8215B880h case    8:*/		return 0x8215B884;
		  /* 8215B884h */ case    9:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B884h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B884h case    9:*/		return 0x8215B888;
		  /* 8215B888h */ case   10:  		/* stw R11, <#[R31 + 24]> */
		/* 8215B888h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215B888h case   10:*/		return 0x8215B88C;
	}
	return 0x8215B88C;
} // Block from 8215B860h-8215B88Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215B88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B88C);
		  /* 8215B88Ch */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8215B88Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215B88Ch case    0:*/		return 0x8215B890;
		  /* 8215B890h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8215B890h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215B89C;  }
		/* 8215B890h case    1:*/		return 0x8215B894;
		  /* 8215B894h */ case    2:  		/* lwz R3, <#[R4]> */
		/* 8215B894h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215B894h case    2:*/		return 0x8215B898;
		  /* 8215B898h */ case    3:  		/* bl 721248 */
		/* 8215B898h case    3:*/		regs.LR = 0x8215B89C; return 0x8220B9F8;
		/* 8215B898h case    3:*/		return 0x8215B89C;
	}
	return 0x8215B89C;
} // Block from 8215B88Ch-8215B89Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215B89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B89C);
		  /* 8215B89Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215B89Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B89Ch case    0:*/		return 0x8215B8A0;
		  /* 8215B8A0h */ case    1:  		/* addi R11, R11, -1 */
		/* 8215B8A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215B8A0h case    1:*/		return 0x8215B8A4;
		  /* 8215B8A4h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215B8A4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B8A4h case    2:*/		return 0x8215B8A8;
	}
	return 0x8215B8A8;
} // Block from 8215B89Ch-8215B8A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B8A8);
		  /* 8215B8A8h */ case    0:  		/* mr R3, R30 */
		/* 8215B8A8h case    0:*/		regs.R3 = regs.R30;
		/* 8215B8A8h case    0:*/		return 0x8215B8AC;
		  /* 8215B8ACh */ case    1:  		/* addi R1, R1, 128 */
		/* 8215B8ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215B8ACh case    1:*/		return 0x8215B8B0;
		  /* 8215B8B0h */ case    2:  		/* b -828940 */
		/* 8215B8B0h case    2:*/		return 0x820912A4;
		/* 8215B8B0h case    2:*/		return 0x8215B8B4;
		  /* 8215B8B4h */ case    3:  		/* nop */
		/* 8215B8B4h case    3:*/		cpu::op::nop();
		/* 8215B8B4h case    3:*/		return 0x8215B8B8;
	}
	return 0x8215B8B8;
} // Block from 8215B8A8h-8215B8B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215B8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B8B8);
		  /* 8215B8B8h */ case    0:  		/* mfspr R12, LR */
		/* 8215B8B8h case    0:*/		regs.R12 = regs.LR;
		/* 8215B8B8h case    0:*/		return 0x8215B8BC;
		  /* 8215B8BCh */ case    1:  		/* bl -829040 */
		/* 8215B8BCh case    1:*/		regs.LR = 0x8215B8C0; return 0x8209124C;
		/* 8215B8BCh case    1:*/		return 0x8215B8C0;
		  /* 8215B8C0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215B8C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215B8C0h case    2:*/		return 0x8215B8C4;
		  /* 8215B8C4h */ case    3:  		/* lis R11, -32253 */
		/* 8215B8C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215B8C4h case    3:*/		return 0x8215B8C8;
		  /* 8215B8C8h */ case    4:  		/* lis R10, -32252 */
		/* 8215B8C8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215B8C8h case    4:*/		return 0x8215B8CC;
		  /* 8215B8CCh */ case    5:  		/* mr R31, R3 */
		/* 8215B8CCh case    5:*/		regs.R31 = regs.R3;
		/* 8215B8CCh case    5:*/		return 0x8215B8D0;
		  /* 8215B8D0h */ case    6:  		/* mr R28, R4 */
		/* 8215B8D0h case    6:*/		regs.R28 = regs.R4;
		/* 8215B8D0h case    6:*/		return 0x8215B8D4;
		  /* 8215B8D4h */ case    7:  		/* mr R27, R5 */
		/* 8215B8D4h case    7:*/		regs.R27 = regs.R5;
		/* 8215B8D4h case    7:*/		return 0x8215B8D8;
		  /* 8215B8D8h */ case    8:  		/* mr R26, R6 */
		/* 8215B8D8h case    8:*/		regs.R26 = regs.R6;
		/* 8215B8D8h case    8:*/		return 0x8215B8DC;
		  /* 8215B8DCh */ case    9:  		/* mr R25, R7 */
		/* 8215B8DCh case    9:*/		regs.R25 = regs.R7;
		/* 8215B8DCh case    9:*/		return 0x8215B8E0;
		  /* 8215B8E0h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8215B8E0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215B8E0h case   10:*/		return 0x8215B8E4;
		  /* 8215B8E4h */ case   11:  		/* addi R30, R11, 27460 */
		/* 8215B8E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215B8E4h case   11:*/		return 0x8215B8E8;
		  /* 8215B8E8h */ case   12:  		/* addi R29, R10, -21920 */
		/* 8215B8E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215B8E8h case   12:*/		return 0x8215B8EC;
		  /* 8215B8ECh */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B8ECh case   13:*/		if ( !regs.CR[6].eq ) { return 0x8215B90C;  }
		/* 8215B8ECh case   13:*/		return 0x8215B8F0;
		  /* 8215B8F0h */ case   14:  		/* lis R11, -32252 */
		/* 8215B8F0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B8F0h case   14:*/		return 0x8215B8F4;
		  /* 8215B8F4h */ case   15:  		/* mr R6, R29 */
		/* 8215B8F4h case   15:*/		regs.R6 = regs.R29;
		/* 8215B8F4h case   15:*/		return 0x8215B8F8;
		  /* 8215B8F8h */ case   16:  		/* addi R5, R11, -21472 */
		/* 8215B8F8h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215B8F8h case   16:*/		return 0x8215B8FC;
		  /* 8215B8FCh */ case   17:  		/* mr R4, R30 */
		/* 8215B8FCh case   17:*/		regs.R4 = regs.R30;
		/* 8215B8FCh case   17:*/		return 0x8215B900;
		  /* 8215B900h */ case   18:  		/* li R7, 1010 */
		/* 8215B900h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x3F2);
		/* 8215B900h case   18:*/		return 0x8215B904;
		  /* 8215B904h */ case   19:  		/* li R3, 0 */
		/* 8215B904h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B904h case   19:*/		return 0x8215B908;
		  /* 8215B908h */ case   20:  		/* bl -15616 */
		/* 8215B908h case   20:*/		regs.LR = 0x8215B90C; return 0x82157C08;
		/* 8215B908h case   20:*/		return 0x8215B90C;
	}
	return 0x8215B90C;
} // Block from 8215B8B8h-8215B90Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8215B90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B90C);
		  /* 8215B90Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215B90Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215B90Ch case    0:*/		return 0x8215B910;
		  /* 8215B910h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215B910h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215B930;  }
		/* 8215B910h case    1:*/		return 0x8215B914;
		  /* 8215B914h */ case    2:  		/* lis R11, -32252 */
		/* 8215B914h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B914h case    2:*/		return 0x8215B918;
		  /* 8215B918h */ case    3:  		/* mr R6, R29 */
		/* 8215B918h case    3:*/		regs.R6 = regs.R29;
		/* 8215B918h case    3:*/		return 0x8215B91C;
		  /* 8215B91Ch */ case    4:  		/* addi R5, R11, -21480 */
		/* 8215B91Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC18);
		/* 8215B91Ch case    4:*/		return 0x8215B920;
		  /* 8215B920h */ case    5:  		/* mr R4, R30 */
		/* 8215B920h case    5:*/		regs.R4 = regs.R30;
		/* 8215B920h case    5:*/		return 0x8215B924;
		  /* 8215B924h */ case    6:  		/* li R7, 1011 */
		/* 8215B924h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3F3);
		/* 8215B924h case    6:*/		return 0x8215B928;
		  /* 8215B928h */ case    7:  		/* li R3, 0 */
		/* 8215B928h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B928h case    7:*/		return 0x8215B92C;
		  /* 8215B92Ch */ case    8:  		/* bl -15652 */
		/* 8215B92Ch case    8:*/		regs.LR = 0x8215B930; return 0x82157C08;
		/* 8215B92Ch case    8:*/		return 0x8215B930;
	}
	return 0x8215B930;
} // Block from 8215B90Ch-8215B930h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215B930h
// Function '?SSMCreateASObj@XGRAPHICS@@YIPAXPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B930);
		  /* 8215B930h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215B930h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B930h case    0:*/		return 0x8215B934;
		  /* 8215B934h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B934h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B934h case    1:*/		return 0x8215B938;
		  /* 8215B938h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B938h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B958;  }
		/* 8215B938h case    2:*/		return 0x8215B93C;
		  /* 8215B93Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215B93Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B93Ch case    3:*/		return 0x8215B940;
		  /* 8215B940h */ case    4:  		/* mr R6, R29 */
		/* 8215B940h case    4:*/		regs.R6 = regs.R29;
		/* 8215B940h case    4:*/		return 0x8215B944;
		  /* 8215B944h */ case    5:  		/* addi R5, R11, -21500 */
		/* 8215B944h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC04);
		/* 8215B944h case    5:*/		return 0x8215B948;
		  /* 8215B948h */ case    6:  		/* mr R4, R30 */
		/* 8215B948h case    6:*/		regs.R4 = regs.R30;
		/* 8215B948h case    6:*/		return 0x8215B94C;
		  /* 8215B94Ch */ case    7:  		/* li R7, 1014 */
		/* 8215B94Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3F6);
		/* 8215B94Ch case    7:*/		return 0x8215B950;
		  /* 8215B950h */ case    8:  		/* li R3, 0 */
		/* 8215B950h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B950h case    8:*/		return 0x8215B954;
		  /* 8215B954h */ case    9:  		/* bl -15692 */
		/* 8215B954h case    9:*/		regs.LR = 0x8215B958; return 0x82157C08;
		/* 8215B954h case    9:*/		return 0x8215B958;
	}
	return 0x8215B958;
} // Block from 8215B930h-8215B958h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B958);
		  /* 8215B958h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215B958h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B958h case    0:*/		return 0x8215B95C;
		  /* 8215B95Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215B95Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215B95Ch case    1:*/		return 0x8215B960;
		  /* 8215B960h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215B960h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215B980;  }
		/* 8215B960h case    2:*/		return 0x8215B964;
		  /* 8215B964h */ case    3:  		/* lis R11, -32252 */
		/* 8215B964h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B964h case    3:*/		return 0x8215B968;
		  /* 8215B968h */ case    4:  		/* mr R6, R29 */
		/* 8215B968h case    4:*/		regs.R6 = regs.R29;
		/* 8215B968h case    4:*/		return 0x8215B96C;
		  /* 8215B96Ch */ case    5:  		/* addi R5, R11, -21520 */
		/* 8215B96Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABF0);
		/* 8215B96Ch case    5:*/		return 0x8215B970;
		  /* 8215B970h */ case    6:  		/* mr R4, R30 */
		/* 8215B970h case    6:*/		regs.R4 = regs.R30;
		/* 8215B970h case    6:*/		return 0x8215B974;
		  /* 8215B974h */ case    7:  		/* li R7, 1015 */
		/* 8215B974h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3F7);
		/* 8215B974h case    7:*/		return 0x8215B978;
		  /* 8215B978h */ case    8:  		/* li R3, 0 */
		/* 8215B978h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215B978h case    8:*/		return 0x8215B97C;
		  /* 8215B97Ch */ case    9:  		/* bl -15732 */
		/* 8215B97Ch case    9:*/		regs.LR = 0x8215B980; return 0x82157C08;
		/* 8215B97Ch case    9:*/		return 0x8215B980;
	}
	return 0x8215B980;
} // Block from 8215B958h-8215B980h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215B980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B980);
		  /* 8215B980h */ case    0:  		/* stw R27, <#[R31 + 4]> */
		/* 8215B980h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000004) );
		/* 8215B980h case    0:*/		return 0x8215B984;
		  /* 8215B984h */ case    1:  		/* mr R3, R28 */
		/* 8215B984h case    1:*/		regs.R3 = regs.R28;
		/* 8215B984h case    1:*/		return 0x8215B988;
		  /* 8215B988h */ case    2:  		/* stw R26, <#[R31 + 8]> */
		/* 8215B988h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 8215B988h case    2:*/		return 0x8215B98C;
		  /* 8215B98Ch */ case    3:  		/* stw R25, <#[R31 + 12]> */
		/* 8215B98Ch case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215B98Ch case    3:*/		return 0x8215B990;
		  /* 8215B990h */ case    4:  		/* stw R28, <#[R31]> */
		/* 8215B990h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8215B990h case    4:*/		return 0x8215B994;
		  /* 8215B994h */ case    5:  		/* bl -2348 */
		/* 8215B994h case    5:*/		regs.LR = 0x8215B998; return 0x8215B068;
		/* 8215B994h case    5:*/		return 0x8215B998;
		  /* 8215B998h */ case    6:  		/* stw R3, <#[R31 + 16]> */
		/* 8215B998h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B998h case    6:*/		return 0x8215B99C;
		  /* 8215B99Ch */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8215B99Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215B99Ch case    7:*/		return 0x8215B9A0;
		  /* 8215B9A0h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 8215B9A0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215B9BC;  }
		/* 8215B9A0h case    8:*/		return 0x8215B9A4;
		  /* 8215B9A4h */ case    9:  		/* lis R11, -32252 */
		/* 8215B9A4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215B9A4h case    9:*/		return 0x8215B9A8;
		  /* 8215B9A8h */ case   10:  		/* mr R6, R29 */
		/* 8215B9A8h case   10:*/		regs.R6 = regs.R29;
		/* 8215B9A8h case   10:*/		return 0x8215B9AC;
		  /* 8215B9ACh */ case   11:  		/* addi R5, R11, -21540 */
		/* 8215B9ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABDC);
		/* 8215B9ACh case   11:*/		return 0x8215B9B0;
		  /* 8215B9B0h */ case   12:  		/* mr R4, R30 */
		/* 8215B9B0h case   12:*/		regs.R4 = regs.R30;
		/* 8215B9B0h case   12:*/		return 0x8215B9B4;
		  /* 8215B9B4h */ case   13:  		/* li R7, 1031 */
		/* 8215B9B4h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x407);
		/* 8215B9B4h case   13:*/		return 0x8215B9B8;
		  /* 8215B9B8h */ case   14:  		/* bl -15792 */
		/* 8215B9B8h case   14:*/		regs.LR = 0x8215B9BC; return 0x82157C08;
		/* 8215B9B8h case   14:*/		return 0x8215B9BC;
	}
	return 0x8215B9BC;
} // Block from 8215B980h-8215B9BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215B9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B9BC);
		  /* 8215B9BCh */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B9BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B9BCh case    0:*/		return 0x8215B9C0;
		  /* 8215B9C0h */ case    1:  		/* li R11, 0 */
		/* 8215B9C0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215B9C0h case    1:*/		return 0x8215B9C4;
		  /* 8215B9C4h */ case    2:  		/* li R9, 1 */
		/* 8215B9C4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8215B9C4h case    2:*/		return 0x8215B9C8;
	}
	return 0x8215B9C8;
} // Block from 8215B9BCh-8215B9C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215B9C8h
// Function '?SSMDeleteASObj@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215B9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215B9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215B9C8);
		  /* 8215B9C8h */ case    0:  		/* stw R11, <#[R10 + 12]> */
		/* 8215B9C8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8215B9C8h case    0:*/		return 0x8215B9CC;
		  /* 8215B9CCh */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B9CCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B9CCh case    1:*/		return 0x8215B9D0;
		  /* 8215B9D0h */ case    2:  		/* stw R11, <#[R10 + 16]> */
		/* 8215B9D0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8215B9D0h case    2:*/		return 0x8215B9D4;
		  /* 8215B9D4h */ case    3:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B9D4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B9D4h case    3:*/		return 0x8215B9D8;
		  /* 8215B9D8h */ case    4:  		/* stw R10, <#[R10 + 8]> */
		/* 8215B9D8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8215B9D8h case    4:*/		return 0x8215B9DC;
		  /* 8215B9DCh */ case    5:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B9DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B9DCh case    5:*/		return 0x8215B9E0;
		  /* 8215B9E0h */ case    6:  		/* stw R10, <#[R10 + 4]> */
		/* 8215B9E0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8215B9E0h case    6:*/		return 0x8215B9E4;
		  /* 8215B9E4h */ case    7:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215B9E4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215B9E4h case    7:*/		return 0x8215B9E8;
		  /* 8215B9E8h */ case    8:  		/* stw R11, <#[R31 + 20]> */
		/* 8215B9E8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215B9E8h case    8:*/		return 0x8215B9EC;
		  /* 8215B9ECh */ case    9:  		/* stw R10, <#[R31 + 24]> */
		/* 8215B9ECh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8215B9ECh case    9:*/		return 0x8215B9F0;
		  /* 8215B9F0h */ case   10:  		/* stw R9, <#[R31 + 28]> */
		/* 8215B9F0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 8215B9F0h case   10:*/		return 0x8215B9F4;
		  /* 8215B9F4h */ case   11:  		/* addi R1, R1, 144 */
		/* 8215B9F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215B9F4h case   11:*/		return 0x8215B9F8;
		  /* 8215B9F8h */ case   12:  		/* b -829276 */
		/* 8215B9F8h case   12:*/		return 0x8209129C;
		/* 8215B9F8h case   12:*/		return 0x8215B9FC;
		  /* 8215B9FCh */ case   13:  		/* nop */
		/* 8215B9FCh case   13:*/		cpu::op::nop();
		/* 8215B9FCh case   13:*/		return 0x8215BA00;
	}
	return 0x8215BA00;
} // Block from 8215B9C8h-8215BA00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215BA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BA00);
		  /* 8215BA00h */ case    0:  		/* mfspr R12, LR */
		/* 8215BA00h case    0:*/		regs.R12 = regs.LR;
		/* 8215BA00h case    0:*/		return 0x8215BA04;
		  /* 8215BA04h */ case    1:  		/* bl -829364 */
		/* 8215BA04h case    1:*/		regs.LR = 0x8215BA08; return 0x82091250;
		/* 8215BA04h case    1:*/		return 0x8215BA08;
		  /* 8215BA08h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215BA08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215BA08h case    2:*/		return 0x8215BA0C;
		  /* 8215BA0Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215BA0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BA0Ch case    3:*/		return 0x8215BA10;
		  /* 8215BA10h */ case    4:  		/* lis R10, -32252 */
		/* 8215BA10h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BA10h case    4:*/		return 0x8215BA14;
		  /* 8215BA14h */ case    5:  		/* mr R30, R3 */
		/* 8215BA14h case    5:*/		regs.R30 = regs.R3;
		/* 8215BA14h case    5:*/		return 0x8215BA18;
		  /* 8215BA18h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215BA18h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BA18h case    6:*/		return 0x8215BA1C;
		  /* 8215BA1Ch */ case    7:  		/* addi R27, R11, 27460 */
		/* 8215BA1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215BA1Ch case    7:*/		return 0x8215BA20;
		  /* 8215BA20h */ case    8:  		/* addi R26, R10, -21920 */
		/* 8215BA20h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215BA20h case    8:*/		return 0x8215BA24;
		  /* 8215BA24h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BA24h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215BA44;  }
		/* 8215BA24h case    9:*/		return 0x8215BA28;
		  /* 8215BA28h */ case   10:  		/* lis R11, -32252 */
		/* 8215BA28h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BA28h case   10:*/		return 0x8215BA2C;
		  /* 8215BA2Ch */ case   11:  		/* mr R6, R26 */
		/* 8215BA2Ch case   11:*/		regs.R6 = regs.R26;
		/* 8215BA2Ch case   11:*/		return 0x8215BA30;
		  /* 8215BA30h */ case   12:  		/* addi R5, R11, -21472 */
		/* 8215BA30h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BA30h case   12:*/		return 0x8215BA34;
		  /* 8215BA34h */ case   13:  		/* mr R4, R27 */
		/* 8215BA34h case   13:*/		regs.R4 = regs.R27;
		/* 8215BA34h case   13:*/		return 0x8215BA38;
		  /* 8215BA38h */ case   14:  		/* li R7, 1076 */
		/* 8215BA38h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x434);
		/* 8215BA38h case   14:*/		return 0x8215BA3C;
		  /* 8215BA3Ch */ case   15:  		/* li R3, 0 */
		/* 8215BA3Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BA3Ch case   15:*/		return 0x8215BA40;
		  /* 8215BA40h */ case   16:  		/* bl -15928 */
		/* 8215BA40h case   16:*/		regs.LR = 0x8215BA44; return 0x82157C08;
		/* 8215BA40h case   16:*/		return 0x8215BA44;
	}
	return 0x8215BA44;
} // Block from 8215BA00h-8215BA44h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215BA44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BA44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BA44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BA44);
		  /* 8215BA44h */ case    0:  		/* lwz R4, <#[R30 + 16]> */
		/* 8215BA44h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 8215BA44h case    0:*/		return 0x8215BA48;
		  /* 8215BA48h */ case    1:  		/* li R31, 0 */
		/* 8215BA48h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215BA48h case    1:*/		return 0x8215BA4C;
		  /* 8215BA4Ch */ case    2:  		/* cmplwi CR0, R4, 0 */
		/* 8215BA4Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8215BA4Ch case    2:*/		return 0x8215BA50;
		  /* 8215BA50h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 8215BA50h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215BA58;  }
		/* 8215BA50h case    3:*/		return 0x8215BA54;
		  /* 8215BA54h */ case    4:  		/* lwz R31, <#[R4 + 8]> */
		/* 8215BA54h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000008) );
		/* 8215BA54h case    4:*/		return 0x8215BA58;
	}
	return 0x8215BA58;
} // Block from 8215BA44h-8215BA58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215BA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BA58);
		  /* 8215BA58h */ case    0:  		/* cmplw CR6, R31, R4 */
		/* 8215BA58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R4);
		/* 8215BA58h case    0:*/		return 0x8215BA5C;
		  /* 8215BA5Ch */ case    1:  		/* bc 12, CR6_EQ, 116 */
		/* 8215BA5Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8215BAD0;  }
		/* 8215BA5Ch case    1:*/		return 0x8215BA60;
		  /* 8215BA60h */ case    2:  		/* lis R11, -32252 */
		/* 8215BA60h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BA60h case    2:*/		return 0x8215BA64;
		  /* 8215BA64h */ case    3:  		/* addi R28, R11, -21604 */
		/* 8215BA64h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFAB9C);
		/* 8215BA64h case    3:*/		return 0x8215BA68;
		  /* 8215BA68h */ case    4:  		/* mr R29, R31 */
		/* 8215BA68h case    4:*/		regs.R29 = regs.R31;
		/* 8215BA68h case    4:*/		return 0x8215BA6C;
		  /* 8215BA6Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 8215BA6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215BA6Ch case    5:*/		return 0x8215BA70;
		  /* 8215BA70h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8215BA70h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215BA80;  }
		/* 8215BA70h case    6:*/		return 0x8215BA74;
		  /* 8215BA74h */ case    7:  		/* lwz R31, <#[R31 + 8]> */
		/* 8215BA74h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8215BA74h case    7:*/		return 0x8215BA78;
		  /* 8215BA78h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8215BA78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215BA78h case    8:*/		return 0x8215BA7C;
		  /* 8215BA7Ch */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 8215BA7Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215BA98;  }
		/* 8215BA7Ch case    9:*/		return 0x8215BA80;
	}
	return 0x8215BA80;
} // Block from 8215BA58h-8215BA80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215BA80h
// Function '?LST_CreateItem@XGRAPHICS@@YAPAXPAU_MEM_HEAD@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BA80);
		  /* 8215BA80h */ case    0:  		/* mr R6, R26 */
		/* 8215BA80h case    0:*/		regs.R6 = regs.R26;
		/* 8215BA80h case    0:*/		return 0x8215BA84;
		  /* 8215BA84h */ case    1:  		/* mr R5, R28 */
		/* 8215BA84h case    1:*/		regs.R5 = regs.R28;
		/* 8215BA84h case    1:*/		return 0x8215BA88;
		  /* 8215BA88h */ case    2:  		/* mr R4, R27 */
		/* 8215BA88h case    2:*/		regs.R4 = regs.R27;
		/* 8215BA88h case    2:*/		return 0x8215BA8C;
		  /* 8215BA8Ch */ case    3:  		/* li R7, 1088 */
		/* 8215BA8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x440);
		/* 8215BA8Ch case    3:*/		return 0x8215BA90;
		  /* 8215BA90h */ case    4:  		/* li R3, 0 */
		/* 8215BA90h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BA90h case    4:*/		return 0x8215BA94;
		  /* 8215BA94h */ case    5:  		/* bl -16012 */
		/* 8215BA94h case    5:*/		regs.LR = 0x8215BA98; return 0x82157C08;
		/* 8215BA94h case    5:*/		return 0x8215BA98;
	}
	return 0x8215BA98;
} // Block from 8215BA80h-8215BA98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215BA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BA98);
		  /* 8215BA98h */ case    0:  		/* mr R3, R29 */
		/* 8215BA98h case    0:*/		regs.R3 = regs.R29;
		/* 8215BA98h case    0:*/		return 0x8215BA9C;
		  /* 8215BA9Ch */ case    1:  		/* bl -2028 */
		/* 8215BA9Ch case    1:*/		regs.LR = 0x8215BAA0; return 0x8215B2B0;
		/* 8215BA9Ch case    1:*/		return 0x8215BAA0;
		  /* 8215BAA0h */ case    2:  		/* lwz R11, <#[R30 + 12]> */
		/* 8215BAA0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215BAA0h case    2:*/		return 0x8215BAA4;
		  /* 8215BAA4h */ case    3:  		/* mr R29, R3 */
		/* 8215BAA4h case    3:*/		regs.R29 = regs.R3;
		/* 8215BAA4h case    3:*/		return 0x8215BAA8;
		  /* 8215BAA8h */ case    4:  		/* lwz R3, <#[R30 + 4]> */
		/* 8215BAA8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8215BAA8h case    4:*/		return 0x8215BAAC;
		  /* 8215BAACh */ case    5:  		/* mtspr CTR, R11 */
		/* 8215BAACh case    5:*/		regs.CTR = regs.R11;
		/* 8215BAACh case    5:*/		return 0x8215BAB0;
		  /* 8215BAB0h */ case    6:  		/* lwz R4, <#[R29 + 16]> */
		/* 8215BAB0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000010) );
		/* 8215BAB0h case    6:*/		return 0x8215BAB4;
		  /* 8215BAB4h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8215BAB4h case    7:*/		if ( 1 ) { regs.LR = 0x8215BAB8; return (uint32)regs.CTR; }
		/* 8215BAB4h case    7:*/		return 0x8215BAB8;
		  /* 8215BAB8h */ case    8:  		/* mr R4, R29 */
		/* 8215BAB8h case    8:*/		regs.R4 = regs.R29;
		/* 8215BAB8h case    8:*/		return 0x8215BABC;
		  /* 8215BABCh */ case    9:  		/* lwz R3, <#[R29]> */
		/* 8215BABCh case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8215BABCh case    9:*/		return 0x8215BAC0;
		  /* 8215BAC0h */ case   10:  		/* bl 720696 */
		/* 8215BAC0h case   10:*/		regs.LR = 0x8215BAC4; return 0x8220B9F8;
		/* 8215BAC0h case   10:*/		return 0x8215BAC4;
		  /* 8215BAC4h */ case   11:  		/* lwz R4, <#[R30 + 16]> */
		/* 8215BAC4h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 8215BAC4h case   11:*/		return 0x8215BAC8;
		  /* 8215BAC8h */ case   12:  		/* cmplw CR6, R31, R4 */
		/* 8215BAC8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R4);
		/* 8215BAC8h case   12:*/		return 0x8215BACC;
		  /* 8215BACCh */ case   13:  		/* bc 4, CR6_EQ, -100 */
		/* 8215BACCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x8215BA68;  }
		/* 8215BACCh case   13:*/		return 0x8215BAD0;
	}
	return 0x8215BAD0;
} // Block from 8215BA98h-8215BAD0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215BAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BAD0);
		  /* 8215BAD0h */ case    0:  		/* cmplwi CR0, R4, 0 */
		/* 8215BAD0h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8215BAD0h case    0:*/		return 0x8215BAD4;
		  /* 8215BAD4h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8215BAD4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8215BAE0;  }
		/* 8215BAD4h case    1:*/		return 0x8215BAD8;
		  /* 8215BAD8h */ case    2:  		/* lwz R3, <#[R4]> */
		/* 8215BAD8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215BAD8h case    2:*/		return 0x8215BADC;
		  /* 8215BADCh */ case    3:  		/* bl 720668 */
		/* 8215BADCh case    3:*/		regs.LR = 0x8215BAE0; return 0x8220B9F8;
		/* 8215BADCh case    3:*/		return 0x8215BAE0;
	}
	return 0x8215BAE0;
} // Block from 8215BAD0h-8215BAE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BAE0);
		  /* 8215BAE0h */ case    0:  		/* lwz R11, <#[R30 + 28]> */
		/* 8215BAE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8215BAE0h case    0:*/		return 0x8215BAE4;
		  /* 8215BAE4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215BAE4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BAE4h case    1:*/		return 0x8215BAE8;
		  /* 8215BAE8h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BAE8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BB08;  }
		/* 8215BAE8h case    2:*/		return 0x8215BAEC;
		  /* 8215BAECh */ case    3:  		/* lwz R3, <#[R30]> */
		/* 8215BAECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8215BAECh case    3:*/		return 0x8215BAF0;
		  /* 8215BAF0h */ case    4:  		/* bl 720288 */
		/* 8215BAF0h case    4:*/		regs.LR = 0x8215BAF4; return 0x8220B890;
		/* 8215BAF0h case    4:*/		return 0x8215BAF4;
		  /* 8215BAF4h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 8215BAF4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215BAF4h case    5:*/		return 0x8215BAF8;
	}
	return 0x8215BAF8;
} // Block from 8215BAE0h-8215BAF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215BAF8h
// Function '?LST_InsertAfterItem@XGRAPHICS@@YAXPAU_LIST_PRIM_ITEM@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BAF8);
		  /* 8215BAF8h */ case    0:  		/* mr R4, R30 */
		/* 8215BAF8h case    0:*/		regs.R4 = regs.R30;
		/* 8215BAF8h case    0:*/		return 0x8215BAFC;
		  /* 8215BAFCh */ case    1:  		/* lwz R3, <#[R30 + 4]> */
		/* 8215BAFCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8215BAFCh case    1:*/		return 0x8215BB00;
		  /* 8215BB00h */ case    2:  		/* mtspr CTR, R11 */
		/* 8215BB00h case    2:*/		regs.CTR = regs.R11;
		/* 8215BB00h case    2:*/		return 0x8215BB04;
		  /* 8215BB04h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8215BB04h case    3:*/		if ( 1 ) { regs.LR = 0x8215BB08; return (uint32)regs.CTR; }
		/* 8215BB04h case    3:*/		return 0x8215BB08;
	}
	return 0x8215BB08;
} // Block from 8215BAF8h-8215BB08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BB08);
		  /* 8215BB08h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215BB08h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215BB08h case    0:*/		return 0x8215BB0C;
		  /* 8215BB0Ch */ case    1:  		/* b -829548 */
		/* 8215BB0Ch case    1:*/		return 0x820912A0;
		/* 8215BB0Ch case    1:*/		return 0x8215BB10;
	}
	return 0x8215BB10;
} // Block from 8215BB08h-8215BB10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215BB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BB10);
		  /* 8215BB10h */ case    0:  		/* mfspr R12, LR */
		/* 8215BB10h case    0:*/		regs.R12 = regs.LR;
		/* 8215BB10h case    0:*/		return 0x8215BB14;
		  /* 8215BB14h */ case    1:  		/* bl -829640 */
		/* 8215BB14h case    1:*/		regs.LR = 0x8215BB18; return 0x8209124C;
		/* 8215BB14h case    1:*/		return 0x8215BB18;
		  /* 8215BB18h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215BB18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215BB18h case    2:*/		return 0x8215BB1C;
		  /* 8215BB1Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215BB1Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BB1Ch case    3:*/		return 0x8215BB20;
		  /* 8215BB20h */ case    4:  		/* lis R10, -32252 */
		/* 8215BB20h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BB20h case    4:*/		return 0x8215BB24;
		  /* 8215BB24h */ case    5:  		/* mr R31, R3 */
		/* 8215BB24h case    5:*/		regs.R31 = regs.R3;
		/* 8215BB24h case    5:*/		return 0x8215BB28;
		  /* 8215BB28h */ case    6:  		/* mr R25, R4 */
		/* 8215BB28h case    6:*/		regs.R25 = regs.R4;
		/* 8215BB28h case    6:*/		return 0x8215BB2C;
		  /* 8215BB2Ch */ case    7:  		/* mr R30, R5 */
		/* 8215BB2Ch case    7:*/		regs.R30 = regs.R5;
		/* 8215BB2Ch case    7:*/		return 0x8215BB30;
		  /* 8215BB30h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215BB30h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BB30h case    8:*/		return 0x8215BB34;
		  /* 8215BB34h */ case    9:  		/* addi R27, R11, 27460 */
		/* 8215BB34h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215BB34h case    9:*/		return 0x8215BB38;
		  /* 8215BB38h */ case   10:  		/* addi R26, R10, -21920 */
		/* 8215BB38h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215BB38h case   10:*/		return 0x8215BB3C;
		  /* 8215BB3Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BB3Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215BB5C;  }
		/* 8215BB3Ch case   11:*/		return 0x8215BB40;
		  /* 8215BB40h */ case   12:  		/* lis R11, -32252 */
		/* 8215BB40h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BB40h case   12:*/		return 0x8215BB44;
		  /* 8215BB44h */ case   13:  		/* mr R6, R26 */
		/* 8215BB44h case   13:*/		regs.R6 = regs.R26;
		/* 8215BB44h case   13:*/		return 0x8215BB48;
		  /* 8215BB48h */ case   14:  		/* addi R5, R11, -21472 */
		/* 8215BB48h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BB48h case   14:*/		return 0x8215BB4C;
		  /* 8215BB4Ch */ case   15:  		/* mr R4, R27 */
		/* 8215BB4Ch case   15:*/		regs.R4 = regs.R27;
		/* 8215BB4Ch case   15:*/		return 0x8215BB50;
		  /* 8215BB50h */ case   16:  		/* li R7, 1143 */
		/* 8215BB50h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x477);
		/* 8215BB50h case   16:*/		return 0x8215BB54;
		  /* 8215BB54h */ case   17:  		/* li R3, 0 */
		/* 8215BB54h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BB54h case   17:*/		return 0x8215BB58;
		  /* 8215BB58h */ case   18:  		/* bl -16208 */
		/* 8215BB58h case   18:*/		regs.LR = 0x8215BB5C; return 0x82157C08;
		/* 8215BB58h case   18:*/		return 0x8215BB5C;
	}
	return 0x8215BB5C;
} // Block from 8215BB10h-8215BB5Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215BB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BB5C);
		  /* 8215BB5Ch */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215BB5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215BB5Ch case    0:*/		return 0x8215BB60;
		  /* 8215BB60h */ case    1:  		/* bl -2808 */
		/* 8215BB60h case    1:*/		regs.LR = 0x8215BB64; return 0x8215B068;
		/* 8215BB60h case    1:*/		return 0x8215BB64;
		  /* 8215BB64h */ case    2:  		/* or. R29, R3, R3 */
		/* 8215BB64h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8215BB64h case    2:*/		return 0x8215BB68;
		  /* 8215BB68h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215BB68h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215BB88;  }
		/* 8215BB68h case    3:*/		return 0x8215BB6C;
		  /* 8215BB6Ch */ case    4:  		/* lis R11, -32252 */
		/* 8215BB6Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BB6Ch case    4:*/		return 0x8215BB70;
		  /* 8215BB70h */ case    5:  		/* mr R6, R26 */
		/* 8215BB70h case    5:*/		regs.R6 = regs.R26;
		/* 8215BB70h case    5:*/		return 0x8215BB74;
		  /* 8215BB74h */ case    6:  		/* addi R5, R11, -21932 */
		/* 8215BB74h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA54);
		/* 8215BB74h case    6:*/		return 0x8215BB78;
		  /* 8215BB78h */ case    7:  		/* mr R4, R27 */
		/* 8215BB78h case    7:*/		regs.R4 = regs.R27;
		/* 8215BB78h case    7:*/		return 0x8215BB7C;
		  /* 8215BB7Ch */ case    8:  		/* li R7, 1147 */
		/* 8215BB7Ch case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x47B);
		/* 8215BB7Ch case    8:*/		return 0x8215BB80;
		  /* 8215BB80h */ case    9:  		/* li R3, 0 */
		/* 8215BB80h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BB80h case    9:*/		return 0x8215BB84;
		  /* 8215BB84h */ case   10:  		/* bl -16252 */
		/* 8215BB84h case   10:*/		regs.LR = 0x8215BB88; return 0x82157C08;
		/* 8215BB84h case   10:*/		return 0x8215BB88;
	}
	return 0x8215BB88;
} // Block from 8215BB5Ch-8215BB88h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215BB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BB88);
		  /* 8215BB88h */ case    0:  		/* lis R11, -32252 */
		/* 8215BB88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BB88h case    0:*/		return 0x8215BB8C;
		  /* 8215BB8Ch */ case    1:  		/* stw R25, <#[R29 + 12]> */
		/* 8215BB8Ch case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215BB8Ch case    1:*/		return 0x8215BB90;
		  /* 8215BB90h */ case    2:  		/* stw R30, <#[R29 + 16]> */
		/* 8215BB90h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000010) );
		/* 8215BB90h case    2:*/		return 0x8215BB94;
		  /* 8215BB94h */ case    3:  		/* addi R28, R11, -21584 */
		/* 8215BB94h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFABB0);
		/* 8215BB94h case    3:*/		return 0x8215BB98;
		  /* 8215BB98h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BB98h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BB98h case    4:*/		return 0x8215BB9C;
		  /* 8215BB9Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8215BB9Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BB9Ch case    5:*/		return 0x8215BBA0;
		  /* 8215BBA0h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BBA0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215BBAC;  }
		/* 8215BBA0h case    6:*/		return 0x8215BBA4;
		  /* 8215BBA4h */ case    7:  		/* li R30, 0 */
		/* 8215BBA4h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215BBA4h case    7:*/		return 0x8215BBA8;
		  /* 8215BBA8h */ case    8:  		/* b 16 */
		/* 8215BBA8h case    8:*/		return 0x8215BBB8;
		/* 8215BBA8h case    8:*/		return 0x8215BBAC;
	}
	return 0x8215BBAC;
} // Block from 8215BB88h-8215BBACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBAC);
		  /* 8215BBACh */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215BBACh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BBACh case    0:*/		return 0x8215BBB0;
		  /* 8215BBB0h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215BBB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BBB0h case    1:*/		return 0x8215BBB4;
		  /* 8215BBB4h */ case    2:  		/* bc 4, CR6_EQ, 60 */
		/* 8215BBB4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BBF0;  }
		/* 8215BBB4h case    2:*/		return 0x8215BBB8;
	}
	return 0x8215BBB8;
} // Block from 8215BBACh-8215BBB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBB8);
		  /* 8215BBB8h */ case    0:  		/* li R7, 1158 */
		/* 8215BBB8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x486);
		/* 8215BBB8h case    0:*/		return 0x8215BBBC;
		  /* 8215BBBCh */ case    1:  		/* b 32 */
		/* 8215BBBCh case    1:*/		return 0x8215BBDC;
		/* 8215BBBCh case    1:*/		return 0x8215BBC0;
		  /* 8215BBC0h */ case    2:  		/* lwz R11, <#[R30 + 12]> */
		/* 8215BBC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215BBC0h case    2:*/		return 0x8215BBC4;
		  /* 8215BBC4h */ case    3:  		/* cmplw CR6, R11, R25 */
		/* 8215BBC4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 8215BBC4h case    3:*/		return 0x8215BBC8;
		  /* 8215BBC8h */ case    4:  		/* bc 12, CR6_GT, 52 */
		/* 8215BBC8h case    4:*/		if ( regs.CR[6].gt ) { return 0x8215BBFC;  }
		/* 8215BBC8h case    4:*/		return 0x8215BBCC;
		  /* 8215BBCCh */ case    5:  		/* lwz R30, <#[R30 + 8]> */
		/* 8215BBCCh case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8215BBCCh case    5:*/		return 0x8215BBD0;
		  /* 8215BBD0h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 8215BBD0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BBD0h case    6:*/		return 0x8215BBD4;
		  /* 8215BBD4h */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8215BBD4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8215BBF0;  }
		/* 8215BBD4h case    7:*/		return 0x8215BBD8;
		  /* 8215BBD8h */ case    8:  		/* li R7, 1168 */
		/* 8215BBD8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x490);
		/* 8215BBD8h case    8:*/		return 0x8215BBDC;
	}
	return 0x8215BBDC;
} // Block from 8215BBB8h-8215BBDCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBDC);
		  /* 8215BBDCh */ case    0:  		/* mr R6, R26 */
		/* 8215BBDCh case    0:*/		regs.R6 = regs.R26;
		/* 8215BBDCh case    0:*/		return 0x8215BBE0;
	}
	return 0x8215BBE0;
} // Block from 8215BBDCh-8215BBE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBE0h
// Function '?LST_InsertBeforeItem@XGRAPHICS@@YAXPAU_LIST_PRIM_ITEM@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBE0);
		  /* 8215BBE0h */ case    0:  		/* mr R5, R28 */
		/* 8215BBE0h case    0:*/		regs.R5 = regs.R28;
		/* 8215BBE0h case    0:*/		return 0x8215BBE4;
		  /* 8215BBE4h */ case    1:  		/* mr R4, R27 */
		/* 8215BBE4h case    1:*/		regs.R4 = regs.R27;
		/* 8215BBE4h case    1:*/		return 0x8215BBE8;
		  /* 8215BBE8h */ case    2:  		/* li R3, 0 */
		/* 8215BBE8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BBE8h case    2:*/		return 0x8215BBEC;
		  /* 8215BBECh */ case    3:  		/* bl -16356 */
		/* 8215BBECh case    3:*/		regs.LR = 0x8215BBF0; return 0x82157C08;
		/* 8215BBECh case    3:*/		return 0x8215BBF0;
	}
	return 0x8215BBF0;
} // Block from 8215BBE0h-8215BBF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBF0);
		  /* 8215BBF0h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BBF0h case    0:*/		return 0x8215BBF4;
		  /* 8215BBF4h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8215BBF4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8215BBF4h case    1:*/		return 0x8215BBF8;
		  /* 8215BBF8h */ case    2:  		/* bc 4, CR6_EQ, -56 */
		/* 8215BBF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BBC0;  }
		/* 8215BBF8h case    2:*/		return 0x8215BBFC;
	}
	return 0x8215BBFC;
} // Block from 8215BBF0h-8215BBFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BBFC);
		  /* 8215BBFCh */ case    0:  		/* mr R4, R29 */
		/* 8215BBFCh case    0:*/		regs.R4 = regs.R29;
		/* 8215BBFCh case    0:*/		return 0x8215BC00;
		  /* 8215BC00h */ case    1:  		/* mr R3, R30 */
		/* 8215BC00h case    1:*/		regs.R3 = regs.R30;
		/* 8215BC00h case    1:*/		return 0x8215BC04;
		  /* 8215BC04h */ case    2:  		/* bl -2620 */
		/* 8215BC04h case    2:*/		regs.LR = 0x8215BC08; return 0x8215B1C8;
		/* 8215BC04h case    2:*/		return 0x8215BC08;
		  /* 8215BC08h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215BC08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215BC08h case    3:*/		return 0x8215BC0C;
		  /* 8215BC0Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215BC0Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BC0Ch case    4:*/		return 0x8215BC10;
		  /* 8215BC10h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BC10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215BC1C;  }
		/* 8215BC10h case    5:*/		return 0x8215BC14;
		  /* 8215BC14h */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BC14h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BC14h case    6:*/		return 0x8215BC18;
		  /* 8215BC18h */ case    7:  		/* stw R29, <#[R11 + 8]> */
		/* 8215BC18h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BC18h case    7:*/		return 0x8215BC1C;
	}
	return 0x8215BC1C;
} // Block from 8215BBFCh-8215BC1Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215BC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BC1C);
		  /* 8215BC1Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215BC1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215BC1Ch case    0:*/		return 0x8215BC20;
		  /* 8215BC20h */ case    1:  		/* addi R11, R11, 1 */
		/* 8215BC20h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215BC20h case    1:*/		return 0x8215BC24;
		  /* 8215BC24h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215BC24h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215BC24h case    2:*/		return 0x8215BC28;
		  /* 8215BC28h */ case    3:  		/* addi R1, R1, 144 */
		/* 8215BC28h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215BC28h case    3:*/		return 0x8215BC2C;
		  /* 8215BC2Ch */ case    4:  		/* b -829840 */
		/* 8215BC2Ch case    4:*/		return 0x8209129C;
		/* 8215BC2Ch case    4:*/		return 0x8215BC30;
	}
	return 0x8215BC30;
} // Block from 8215BC1Ch-8215BC30h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215BC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BC30);
		  /* 8215BC30h */ case    0:  		/* mfspr R12, LR */
		/* 8215BC30h case    0:*/		regs.R12 = regs.LR;
		/* 8215BC30h case    0:*/		return 0x8215BC34;
		  /* 8215BC34h */ case    1:  		/* bl -829924 */
		/* 8215BC34h case    1:*/		regs.LR = 0x8215BC38; return 0x82091250;
		/* 8215BC34h case    1:*/		return 0x8215BC38;
		  /* 8215BC38h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215BC38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215BC38h case    2:*/		return 0x8215BC3C;
		  /* 8215BC3Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215BC3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BC3Ch case    3:*/		return 0x8215BC40;
		  /* 8215BC40h */ case    4:  		/* lis R10, -32252 */
		/* 8215BC40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BC40h case    4:*/		return 0x8215BC44;
		  /* 8215BC44h */ case    5:  		/* mr R31, R3 */
		/* 8215BC44h case    5:*/		regs.R31 = regs.R3;
		/* 8215BC44h case    5:*/		return 0x8215BC48;
		  /* 8215BC48h */ case    6:  		/* mr R28, R4 */
		/* 8215BC48h case    6:*/		regs.R28 = regs.R4;
		/* 8215BC48h case    6:*/		return 0x8215BC4C;
		  /* 8215BC4Ch */ case    7:  		/* mr R26, R5 */
		/* 8215BC4Ch case    7:*/		regs.R26 = regs.R5;
		/* 8215BC4Ch case    7:*/		return 0x8215BC50;
		  /* 8215BC50h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8215BC50h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215BC50h case    8:*/		return 0x8215BC54;
		  /* 8215BC54h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215BC54h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BC54h case    9:*/		return 0x8215BC58;
		  /* 8215BC58h */ case   10:  		/* addi R29, R10, -21920 */
		/* 8215BC58h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215BC58h case   10:*/		return 0x8215BC5C;
		  /* 8215BC5Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BC5Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215BC7C;  }
		/* 8215BC5Ch case   11:*/		return 0x8215BC60;
		  /* 8215BC60h */ case   12:  		/* lis R11, -32252 */
		/* 8215BC60h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BC60h case   12:*/		return 0x8215BC64;
		  /* 8215BC64h */ case   13:  		/* mr R6, R29 */
		/* 8215BC64h case   13:*/		regs.R6 = regs.R29;
		/* 8215BC64h case   13:*/		return 0x8215BC68;
		  /* 8215BC68h */ case   14:  		/* addi R5, R11, -21560 */
		/* 8215BC68h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABC8);
		/* 8215BC68h case   14:*/		return 0x8215BC6C;
		  /* 8215BC6Ch */ case   15:  		/* mr R4, R30 */
		/* 8215BC6Ch case   15:*/		regs.R4 = regs.R30;
		/* 8215BC6Ch case   15:*/		return 0x8215BC70;
		  /* 8215BC70h */ case   16:  		/* li R7, 1212 */
		/* 8215BC70h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x4BC);
		/* 8215BC70h case   16:*/		return 0x8215BC74;
		  /* 8215BC74h */ case   17:  		/* li R3, 0 */
		/* 8215BC74h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BC74h case   17:*/		return 0x8215BC78;
		  /* 8215BC78h */ case   18:  		/* bl -16496 */
		/* 8215BC78h case   18:*/		regs.LR = 0x8215BC7C; return 0x82157C08;
		/* 8215BC78h case   18:*/		return 0x8215BC7C;
	}
	return 0x8215BC7C;
} // Block from 8215BC30h-8215BC7Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215BC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BC7C);
		  /* 8215BC7Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215BC7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215BC7Ch case    0:*/		return 0x8215BC80;
		  /* 8215BC80h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BC80h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215BCA0;  }
		/* 8215BC80h case    1:*/		return 0x8215BC84;
		  /* 8215BC84h */ case    2:  		/* lis R11, -32252 */
		/* 8215BC84h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BC84h case    2:*/		return 0x8215BC88;
		  /* 8215BC88h */ case    3:  		/* mr R6, R29 */
		/* 8215BC88h case    3:*/		regs.R6 = regs.R29;
		/* 8215BC88h case    3:*/		return 0x8215BC8C;
		  /* 8215BC8Ch */ case    4:  		/* addi R5, R11, -21572 */
		/* 8215BC8Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABBC);
		/* 8215BC8Ch case    4:*/		return 0x8215BC90;
		  /* 8215BC90h */ case    5:  		/* mr R4, R30 */
		/* 8215BC90h case    5:*/		regs.R4 = regs.R30;
		/* 8215BC90h case    5:*/		return 0x8215BC94;
		  /* 8215BC94h */ case    6:  		/* li R7, 1213 */
		/* 8215BC94h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4BD);
		/* 8215BC94h case    6:*/		return 0x8215BC98;
		  /* 8215BC98h */ case    7:  		/* li R3, 0 */
		/* 8215BC98h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BC98h case    7:*/		return 0x8215BC9C;
		  /* 8215BC9Ch */ case    8:  		/* bl -16532 */
		/* 8215BC9Ch case    8:*/		regs.LR = 0x8215BCA0; return 0x82157C08;
		/* 8215BC9Ch case    8:*/		return 0x8215BCA0;
	}
	return 0x8215BCA0;
} // Block from 8215BC7Ch-8215BCA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCA0);
		  /* 8215BCA0h */ case    0:  		/* cmplw CR6, R31, R28 */
		/* 8215BCA0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 8215BCA0h case    0:*/		return 0x8215BCA4;
		  /* 8215BCA4h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 8215BCA4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215BCE8;  }
		/* 8215BCA4h case    1:*/		return 0x8215BCA8;
		  /* 8215BCA8h */ case    2:  		/* lis R11, -32252 */
		/* 8215BCA8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BCA8h case    2:*/		return 0x8215BCAC;
		  /* 8215BCACh */ case    3:  		/* addi R27, R11, -21584 */
		/* 8215BCACh case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0xFFFFABB0);
		/* 8215BCACh case    3:*/		return 0x8215BCB0;
		  /* 8215BCB0h */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215BCB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215BCB0h case    4:*/		return 0x8215BCB4;
		  /* 8215BCB4h */ case    5:  		/* cmplw CR6, R11, R26 */
		/* 8215BCB4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8215BCB4h case    5:*/		return 0x8215BCB8;
		  /* 8215BCB8h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8215BCB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215BCEC;  }
		/* 8215BCB8h case    6:*/		return 0x8215BCBC;
		  /* 8215BCBCh */ case    7:  		/* lwz R31, <#[R31 + 8]> */
		/* 8215BCBCh case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8215BCBCh case    7:*/		return 0x8215BCC0;
		  /* 8215BCC0h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8215BCC0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215BCC0h case    8:*/		return 0x8215BCC4;
		  /* 8215BCC4h */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 8215BCC4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215BCE0;  }
		/* 8215BCC4h case    9:*/		return 0x8215BCC8;
	}
	return 0x8215BCC8;
} // Block from 8215BCA0h-8215BCC8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCC8h
// Function '?LST_RemoveItem@XGRAPHICS@@YAPAU_LIST_PRIM_ITEM@1@PAU21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCC8);
		  /* 8215BCC8h */ case    0:  		/* mr R6, R29 */
		/* 8215BCC8h case    0:*/		regs.R6 = regs.R29;
		/* 8215BCC8h case    0:*/		return 0x8215BCCC;
		  /* 8215BCCCh */ case    1:  		/* mr R5, R27 */
		/* 8215BCCCh case    1:*/		regs.R5 = regs.R27;
		/* 8215BCCCh case    1:*/		return 0x8215BCD0;
		  /* 8215BCD0h */ case    2:  		/* mr R4, R30 */
		/* 8215BCD0h case    2:*/		regs.R4 = regs.R30;
		/* 8215BCD0h case    2:*/		return 0x8215BCD4;
		  /* 8215BCD4h */ case    3:  		/* li R7, 1227 */
		/* 8215BCD4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x4CB);
		/* 8215BCD4h case    3:*/		return 0x8215BCD8;
		  /* 8215BCD8h */ case    4:  		/* li R3, 0 */
		/* 8215BCD8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BCD8h case    4:*/		return 0x8215BCDC;
		  /* 8215BCDCh */ case    5:  		/* bl -16596 */
		/* 8215BCDCh case    5:*/		regs.LR = 0x8215BCE0; return 0x82157C08;
		/* 8215BCDCh case    5:*/		return 0x8215BCE0;
	}
	return 0x8215BCE0;
} // Block from 8215BCC8h-8215BCE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCE0);
		  /* 8215BCE0h */ case    0:  		/* cmplw CR6, R31, R28 */
		/* 8215BCE0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R28);
		/* 8215BCE0h case    0:*/		return 0x8215BCE4;
		  /* 8215BCE4h */ case    1:  		/* bc 4, CR6_EQ, -52 */
		/* 8215BCE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215BCB0;  }
		/* 8215BCE4h case    1:*/		return 0x8215BCE8;
	}
	return 0x8215BCE8;
} // Block from 8215BCE0h-8215BCE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCE8);
		  /* 8215BCE8h */ case    0:  		/* li R31, 0 */
		/* 8215BCE8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215BCE8h case    0:*/		return 0x8215BCEC;
	}
	return 0x8215BCEC;
} // Block from 8215BCE8h-8215BCECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCEC);
		  /* 8215BCECh */ case    0:  		/* mr R3, R31 */
		/* 8215BCECh case    0:*/		regs.R3 = regs.R31;
		/* 8215BCECh case    0:*/		return 0x8215BCF0;
		  /* 8215BCF0h */ case    1:  		/* addi R1, R1, 144 */
		/* 8215BCF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215BCF0h case    1:*/		return 0x8215BCF4;
		  /* 8215BCF4h */ case    2:  		/* b -830036 */
		/* 8215BCF4h case    2:*/		return 0x820912A0;
		/* 8215BCF4h case    2:*/		return 0x8215BCF8;
	}
	return 0x8215BCF8;
} // Block from 8215BCECh-8215BCF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BCF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BCF8);
		  /* 8215BCF8h */ case    0:  		/* mfspr R12, LR */
		/* 8215BCF8h case    0:*/		regs.R12 = regs.LR;
		/* 8215BCF8h case    0:*/		return 0x8215BCFC;
		  /* 8215BCFCh */ case    1:  		/* bl -830120 */
		/* 8215BCFCh case    1:*/		regs.LR = 0x8215BD00; return 0x82091254;
		/* 8215BCFCh case    1:*/		return 0x8215BD00;
		  /* 8215BD00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215BD00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215BD00h case    2:*/		return 0x8215BD04;
		  /* 8215BD04h */ case    3:  		/* lis R11, -32253 */
		/* 8215BD04h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BD04h case    3:*/		return 0x8215BD08;
		  /* 8215BD08h */ case    4:  		/* lis R10, -32252 */
		/* 8215BD08h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BD08h case    4:*/		return 0x8215BD0C;
		  /* 8215BD0Ch */ case    5:  		/* mr R31, R3 */
		/* 8215BD0Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215BD0Ch case    5:*/		return 0x8215BD10;
		  /* 8215BD10h */ case    6:  		/* mr R27, R4 */
		/* 8215BD10h case    6:*/		regs.R27 = regs.R4;
		/* 8215BD10h case    6:*/		return 0x8215BD14;
		  /* 8215BD14h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215BD14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BD14h case    7:*/		return 0x8215BD18;
		  /* 8215BD18h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215BD18h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215BD18h case    8:*/		return 0x8215BD1C;
		  /* 8215BD1Ch */ case    9:  		/* addi R28, R10, -21920 */
		/* 8215BD1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215BD1Ch case    9:*/		return 0x8215BD20;
		  /* 8215BD20h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BD20h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215BD40;  }
		/* 8215BD20h case   10:*/		return 0x8215BD24;
		  /* 8215BD24h */ case   11:  		/* lis R11, -32252 */
		/* 8215BD24h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BD24h case   11:*/		return 0x8215BD28;
		  /* 8215BD28h */ case   12:  		/* mr R6, R28 */
		/* 8215BD28h case   12:*/		regs.R6 = regs.R28;
		/* 8215BD28h case   12:*/		return 0x8215BD2C;
		  /* 8215BD2Ch */ case   13:  		/* addi R5, R11, -21472 */
		/* 8215BD2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BD2Ch case   13:*/		return 0x8215BD30;
		  /* 8215BD30h */ case   14:  		/* mr R4, R29 */
		/* 8215BD30h case   14:*/		regs.R4 = regs.R29;
		/* 8215BD30h case   14:*/		return 0x8215BD34;
		  /* 8215BD34h */ case   15:  		/* li R7, 1262 */
		/* 8215BD34h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x4EE);
		/* 8215BD34h case   15:*/		return 0x8215BD38;
		  /* 8215BD38h */ case   16:  		/* li R3, 0 */
		/* 8215BD38h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BD38h case   16:*/		return 0x8215BD3C;
		  /* 8215BD3Ch */ case   17:  		/* bl -16692 */
		/* 8215BD3Ch case   17:*/		regs.LR = 0x8215BD40; return 0x82157C08;
		/* 8215BD3Ch case   17:*/		return 0x8215BD40;
	}
	return 0x8215BD40;
} // Block from 8215BCF8h-8215BD40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD40);
		  /* 8215BD40h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BD40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BD40h case    0:*/		return 0x8215BD44;
		  /* 8215BD44h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215BD44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BD44h case    1:*/		return 0x8215BD48;
		  /* 8215BD48h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BD48h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BD54;  }
		/* 8215BD48h case    2:*/		return 0x8215BD4C;
		  /* 8215BD4Ch */ case    3:  		/* li R30, 0 */
		/* 8215BD4Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215BD4Ch case    3:*/		return 0x8215BD50;
		  /* 8215BD50h */ case    4:  		/* b 16 */
		/* 8215BD50h case    4:*/		return 0x8215BD60;
		/* 8215BD50h case    4:*/		return 0x8215BD54;
	}
	return 0x8215BD54;
} // Block from 8215BD40h-8215BD54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD54);
		  /* 8215BD54h */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215BD54h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BD54h case    0:*/		return 0x8215BD58;
		  /* 8215BD58h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215BD58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BD58h case    1:*/		return 0x8215BD5C;
		  /* 8215BD5Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BD5Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BD7C;  }
		/* 8215BD5Ch case    2:*/		return 0x8215BD60;
	}
	return 0x8215BD60;
} // Block from 8215BD54h-8215BD60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD60);
		  /* 8215BD60h */ case    0:  		/* lis R11, -32252 */
		/* 8215BD60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BD60h case    0:*/		return 0x8215BD64;
		  /* 8215BD64h */ case    1:  		/* mr R6, R28 */
		/* 8215BD64h case    1:*/		regs.R6 = regs.R28;
		/* 8215BD64h case    1:*/		return 0x8215BD68;
		  /* 8215BD68h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215BD68h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215BD68h case    2:*/		return 0x8215BD6C;
		  /* 8215BD6Ch */ case    3:  		/* mr R4, R29 */
		/* 8215BD6Ch case    3:*/		regs.R4 = regs.R29;
		/* 8215BD6Ch case    3:*/		return 0x8215BD70;
	}
	return 0x8215BD70;
} // Block from 8215BD60h-8215BD70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD70h
// Function '?ULIST_CreateList@XGRAPHICS@@YAPAU_KEY_LIST@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD70);
		  /* 8215BD70h */ case    0:  		/* li R7, 1267 */
		/* 8215BD70h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x4F3);
		/* 8215BD70h case    0:*/		return 0x8215BD74;
		  /* 8215BD74h */ case    1:  		/* li R3, 0 */
		/* 8215BD74h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BD74h case    1:*/		return 0x8215BD78;
		  /* 8215BD78h */ case    2:  		/* bl -16752 */
		/* 8215BD78h case    2:*/		regs.LR = 0x8215BD7C; return 0x82157C08;
		/* 8215BD78h case    2:*/		return 0x8215BD7C;
	}
	return 0x8215BD7C;
} // Block from 8215BD70h-8215BD7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD7C);
		  /* 8215BD7Ch */ case    0:  		/* mr R5, R27 */
		/* 8215BD7Ch case    0:*/		regs.R5 = regs.R27;
		/* 8215BD7Ch case    0:*/		return 0x8215BD80;
		  /* 8215BD80h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215BD80h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BD80h case    1:*/		return 0x8215BD84;
		  /* 8215BD84h */ case    2:  		/* mr R3, R30 */
		/* 8215BD84h case    2:*/		regs.R3 = regs.R30;
		/* 8215BD84h case    2:*/		return 0x8215BD88;
		  /* 8215BD88h */ case    3:  		/* bl -344 */
		/* 8215BD88h case    3:*/		regs.LR = 0x8215BD8C; return 0x8215BC30;
		/* 8215BD88h case    3:*/		return 0x8215BD8C;
		  /* 8215BD8Ch */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215BD8Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215BD8Ch case    4:*/		return 0x8215BD90;
		  /* 8215BD90h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8215BD90h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215BD98;  }
		/* 8215BD90h case    5:*/		return 0x8215BD94;
		  /* 8215BD94h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215BD94h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BD94h case    6:*/		return 0x8215BD98;
	}
	return 0x8215BD98;
} // Block from 8215BD7Ch-8215BD98h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215BD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BD98);
		  /* 8215BD98h */ case    0:  		/* stw R3, <#[R31 + 24]> */
		/* 8215BD98h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BD98h case    0:*/		return 0x8215BD9C;
		  /* 8215BD9Ch */ case    1:  		/* lwz R3, <#[R3 + 16]> */
		/* 8215BD9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8215BD9Ch case    1:*/		return 0x8215BDA0;
		  /* 8215BDA0h */ case    2:  		/* addi R1, R1, 128 */
		/* 8215BDA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215BDA0h case    2:*/		return 0x8215BDA4;
		  /* 8215BDA4h */ case    3:  		/* b -830208 */
		/* 8215BDA4h case    3:*/		return 0x820912A4;
		/* 8215BDA4h case    3:*/		return 0x8215BDA8;
	}
	return 0x8215BDA8;
} // Block from 8215BD98h-8215BDA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BDA8);
		  /* 8215BDA8h */ case    0:  		/* mfspr R12, LR */
		/* 8215BDA8h case    0:*/		regs.R12 = regs.LR;
		/* 8215BDA8h case    0:*/		return 0x8215BDAC;
		  /* 8215BDACh */ case    1:  		/* bl -830292 */
		/* 8215BDACh case    1:*/		regs.LR = 0x8215BDB0; return 0x82091258;
		/* 8215BDACh case    1:*/		return 0x8215BDB0;
		  /* 8215BDB0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215BDB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215BDB0h case    2:*/		return 0x8215BDB4;
		  /* 8215BDB4h */ case    3:  		/* lis R11, -32253 */
		/* 8215BDB4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BDB4h case    3:*/		return 0x8215BDB8;
		  /* 8215BDB8h */ case    4:  		/* lis R10, -32252 */
		/* 8215BDB8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BDB8h case    4:*/		return 0x8215BDBC;
		  /* 8215BDBCh */ case    5:  		/* mr R31, R3 */
		/* 8215BDBCh case    5:*/		regs.R31 = regs.R3;
		/* 8215BDBCh case    5:*/		return 0x8215BDC0;
		  /* 8215BDC0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215BDC0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BDC0h case    6:*/		return 0x8215BDC4;
		  /* 8215BDC4h */ case    7:  		/* addi R29, R11, 27460 */
		/* 8215BDC4h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215BDC4h case    7:*/		return 0x8215BDC8;
		  /* 8215BDC8h */ case    8:  		/* addi R28, R10, -21920 */
		/* 8215BDC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215BDC8h case    8:*/		return 0x8215BDCC;
		  /* 8215BDCCh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BDCCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215BDEC;  }
		/* 8215BDCCh case    9:*/		return 0x8215BDD0;
		  /* 8215BDD0h */ case   10:  		/* lis R11, -32252 */
		/* 8215BDD0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BDD0h case   10:*/		return 0x8215BDD4;
		  /* 8215BDD4h */ case   11:  		/* mr R6, R28 */
		/* 8215BDD4h case   11:*/		regs.R6 = regs.R28;
		/* 8215BDD4h case   11:*/		return 0x8215BDD8;
		  /* 8215BDD8h */ case   12:  		/* addi R5, R11, -21472 */
		/* 8215BDD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BDD8h case   12:*/		return 0x8215BDDC;
		  /* 8215BDDCh */ case   13:  		/* mr R4, R29 */
		/* 8215BDDCh case   13:*/		regs.R4 = regs.R29;
		/* 8215BDDCh case   13:*/		return 0x8215BDE0;
		  /* 8215BDE0h */ case   14:  		/* li R7, 1304 */
		/* 8215BDE0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x518);
		/* 8215BDE0h case   14:*/		return 0x8215BDE4;
		  /* 8215BDE4h */ case   15:  		/* li R3, 0 */
		/* 8215BDE4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BDE4h case   15:*/		return 0x8215BDE8;
		  /* 8215BDE8h */ case   16:  		/* bl -16864 */
		/* 8215BDE8h case   16:*/		regs.LR = 0x8215BDEC; return 0x82157C08;
		/* 8215BDE8h case   16:*/		return 0x8215BDEC;
	}
	return 0x8215BDEC;
} // Block from 8215BDA8h-8215BDECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215BDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BDEC);
		  /* 8215BDECh */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215BDECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BDECh case    0:*/		return 0x8215BDF0;
		  /* 8215BDF0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215BDF0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BDF0h case    1:*/		return 0x8215BDF4;
		  /* 8215BDF4h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BDF4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BE00;  }
		/* 8215BDF4h case    2:*/		return 0x8215BDF8;
		  /* 8215BDF8h */ case    3:  		/* li R30, 0 */
		/* 8215BDF8h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215BDF8h case    3:*/		return 0x8215BDFC;
		  /* 8215BDFCh */ case    4:  		/* b 16 */
		/* 8215BDFCh case    4:*/		return 0x8215BE0C;
		/* 8215BDFCh case    4:*/		return 0x8215BE00;
	}
	return 0x8215BE00;
} // Block from 8215BDECh-8215BE00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215BE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BE00);
		  /* 8215BE00h */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215BE00h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BE00h case    0:*/		return 0x8215BE04;
		  /* 8215BE04h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215BE04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BE04h case    1:*/		return 0x8215BE08;
		  /* 8215BE08h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BE08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BE28;  }
		/* 8215BE08h case    2:*/		return 0x8215BE0C;
	}
	return 0x8215BE0C;
} // Block from 8215BE00h-8215BE0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BE0C);
		  /* 8215BE0Ch */ case    0:  		/* lis R11, -32252 */
		/* 8215BE0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BE0Ch case    0:*/		return 0x8215BE10;
		  /* 8215BE10h */ case    1:  		/* mr R6, R28 */
		/* 8215BE10h case    1:*/		regs.R6 = regs.R28;
		/* 8215BE10h case    1:*/		return 0x8215BE14;
		  /* 8215BE14h */ case    2:  		/* addi R5, R11, -21560 */
		/* 8215BE14h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABC8);
		/* 8215BE14h case    2:*/		return 0x8215BE18;
		  /* 8215BE18h */ case    3:  		/* mr R4, R29 */
		/* 8215BE18h case    3:*/		regs.R4 = regs.R29;
		/* 8215BE18h case    3:*/		return 0x8215BE1C;
		  /* 8215BE1Ch */ case    4:  		/* li R7, 1310 */
		/* 8215BE1Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x51E);
		/* 8215BE1Ch case    4:*/		return 0x8215BE20;
		  /* 8215BE20h */ case    5:  		/* li R3, 0 */
		/* 8215BE20h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BE20h case    5:*/		return 0x8215BE24;
		  /* 8215BE24h */ case    6:  		/* bl -16924 */
		/* 8215BE24h case    6:*/		regs.LR = 0x8215BE28; return 0x82157C08;
		/* 8215BE24h case    6:*/		return 0x8215BE28;
	}
	return 0x8215BE28;
} // Block from 8215BE0Ch-8215BE28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215BE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BE28);
		  /* 8215BE28h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215BE28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BE28h case    0:*/		return 0x8215BE2C;
		  /* 8215BE2Ch */ case    1:  		/* mr R3, R30 */
		/* 8215BE2Ch case    1:*/		regs.R3 = regs.R30;
		/* 8215BE2Ch case    1:*/		return 0x8215BE30;
		  /* 8215BE30h */ case    2:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215BE30h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BE30h case    2:*/		return 0x8215BE34;
		  /* 8215BE34h */ case    3:  		/* lwz R5, <#[R11 + 12]> */
		/* 8215BE34h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 8215BE34h case    3:*/		return 0x8215BE38;
		  /* 8215BE38h */ case    4:  		/* bl -520 */
		/* 8215BE38h case    4:*/		regs.LR = 0x8215BE3C; return 0x8215BC30;
		/* 8215BE38h case    4:*/		return 0x8215BE3C;
		  /* 8215BE3Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8215BE3Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215BE3Ch case    5:*/		return 0x8215BE40;
		  /* 8215BE40h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 8215BE40h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8215BE48;  }
		/* 8215BE40h case    6:*/		return 0x8215BE44;
		  /* 8215BE44h */ case    7:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215BE44h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BE44h case    7:*/		return 0x8215BE48;
	}
	return 0x8215BE48;
} // Block from 8215BE28h-8215BE48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215BE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BE48);
		  /* 8215BE48h */ case    0:  		/* stw R3, <#[R31 + 24]> */
		/* 8215BE48h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BE48h case    0:*/		return 0x8215BE4C;
		  /* 8215BE4Ch */ case    1:  		/* lwz R3, <#[R3 + 16]> */
		/* 8215BE4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8215BE4Ch case    1:*/		return 0x8215BE50;
		  /* 8215BE50h */ case    2:  		/* addi R1, R1, 128 */
		/* 8215BE50h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215BE50h case    2:*/		return 0x8215BE54;
		  /* 8215BE54h */ case    3:  		/* b -830380 */
		/* 8215BE54h case    3:*/		return 0x820912A8;
		/* 8215BE54h case    3:*/		return 0x8215BE58;
	}
	return 0x8215BE58;
} // Block from 8215BE48h-8215BE58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BE58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BE58);
		  /* 8215BE58h */ case    0:  		/* mfspr R12, LR */
		/* 8215BE58h case    0:*/		regs.R12 = regs.LR;
		/* 8215BE58h case    0:*/		return 0x8215BE5C;
		  /* 8215BE5Ch */ case    1:  		/* bl -830472 */
		/* 8215BE5Ch case    1:*/		regs.LR = 0x8215BE60; return 0x82091254;
		/* 8215BE5Ch case    1:*/		return 0x8215BE60;
		  /* 8215BE60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215BE60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215BE60h case    2:*/		return 0x8215BE64;
		  /* 8215BE64h */ case    3:  		/* lis R11, -32253 */
		/* 8215BE64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BE64h case    3:*/		return 0x8215BE68;
		  /* 8215BE68h */ case    4:  		/* lis R10, -32252 */
		/* 8215BE68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BE68h case    4:*/		return 0x8215BE6C;
		  /* 8215BE6Ch */ case    5:  		/* mr R31, R3 */
		/* 8215BE6Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215BE6Ch case    5:*/		return 0x8215BE70;
		  /* 8215BE70h */ case    6:  		/* mr R27, R4 */
		/* 8215BE70h case    6:*/		regs.R27 = regs.R4;
		/* 8215BE70h case    6:*/		return 0x8215BE74;
		  /* 8215BE74h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215BE74h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BE74h case    7:*/		return 0x8215BE78;
		  /* 8215BE78h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215BE78h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215BE78h case    8:*/		return 0x8215BE7C;
		  /* 8215BE7Ch */ case    9:  		/* addi R28, R10, -21920 */
		/* 8215BE7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215BE7Ch case    9:*/		return 0x8215BE80;
		  /* 8215BE80h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BE80h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215BEA0;  }
		/* 8215BE80h case   10:*/		return 0x8215BE84;
		  /* 8215BE84h */ case   11:  		/* lis R11, -32252 */
		/* 8215BE84h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BE84h case   11:*/		return 0x8215BE88;
		  /* 8215BE88h */ case   12:  		/* mr R6, R28 */
		/* 8215BE88h case   12:*/		regs.R6 = regs.R28;
		/* 8215BE88h case   12:*/		return 0x8215BE8C;
		  /* 8215BE8Ch */ case   13:  		/* addi R5, R11, -21472 */
		/* 8215BE8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BE8Ch case   13:*/		return 0x8215BE90;
		  /* 8215BE90h */ case   14:  		/* mr R4, R29 */
		/* 8215BE90h case   14:*/		regs.R4 = regs.R29;
		/* 8215BE90h case   14:*/		return 0x8215BE94;
		  /* 8215BE94h */ case   15:  		/* li R7, 1421 */
		/* 8215BE94h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x58D);
		/* 8215BE94h case   15:*/		return 0x8215BE98;
		  /* 8215BE98h */ case   16:  		/* li R3, 0 */
		/* 8215BE98h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BE98h case   16:*/		return 0x8215BE9C;
		  /* 8215BE9Ch */ case   17:  		/* bl -17044 */
		/* 8215BE9Ch case   17:*/		regs.LR = 0x8215BEA0; return 0x82157C08;
		/* 8215BE9Ch case   17:*/		return 0x8215BEA0;
	}
	return 0x8215BEA0;
} // Block from 8215BE58h-8215BEA0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEA0);
		  /* 8215BEA0h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BEA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BEA0h case    0:*/		return 0x8215BEA4;
		  /* 8215BEA4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215BEA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BEA4h case    1:*/		return 0x8215BEA8;
	}
	return 0x8215BEA8;
} // Block from 8215BEA0h-8215BEA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEA8h
// Function '?ULIST_DestroyList@XGRAPHICS@@YAXPAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEA8);
		  /* 8215BEA8h */ case    0:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BEA8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8215BEB4;  }
		/* 8215BEA8h case    0:*/		return 0x8215BEAC;
		  /* 8215BEACh */ case    1:  		/* li R30, 0 */
		/* 8215BEACh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215BEACh case    1:*/		return 0x8215BEB0;
		  /* 8215BEB0h */ case    2:  		/* b 16 */
		/* 8215BEB0h case    2:*/		return 0x8215BEC0;
		/* 8215BEB0h case    2:*/		return 0x8215BEB4;
	}
	return 0x8215BEB4;
} // Block from 8215BEA8h-8215BEB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEB4);
		  /* 8215BEB4h */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215BEB4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BEB4h case    0:*/		return 0x8215BEB8;
		  /* 8215BEB8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215BEB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BEB8h case    1:*/		return 0x8215BEBC;
		  /* 8215BEBCh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BEBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BEDC;  }
		/* 8215BEBCh case    2:*/		return 0x8215BEC0;
	}
	return 0x8215BEC0;
} // Block from 8215BEB4h-8215BEC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEC0);
		  /* 8215BEC0h */ case    0:  		/* lis R11, -32252 */
		/* 8215BEC0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BEC0h case    0:*/		return 0x8215BEC4;
		  /* 8215BEC4h */ case    1:  		/* mr R6, R28 */
		/* 8215BEC4h case    1:*/		regs.R6 = regs.R28;
		/* 8215BEC4h case    1:*/		return 0x8215BEC8;
		  /* 8215BEC8h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215BEC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215BEC8h case    2:*/		return 0x8215BECC;
		  /* 8215BECCh */ case    3:  		/* mr R4, R29 */
		/* 8215BECCh case    3:*/		regs.R4 = regs.R29;
		/* 8215BECCh case    3:*/		return 0x8215BED0;
		  /* 8215BED0h */ case    4:  		/* li R7, 1427 */
		/* 8215BED0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x593);
		/* 8215BED0h case    4:*/		return 0x8215BED4;
		  /* 8215BED4h */ case    5:  		/* li R3, 0 */
		/* 8215BED4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BED4h case    5:*/		return 0x8215BED8;
		  /* 8215BED8h */ case    6:  		/* bl -17104 */
		/* 8215BED8h case    6:*/		regs.LR = 0x8215BEDC; return 0x82157C08;
		/* 8215BED8h case    6:*/		return 0x8215BEDC;
	}
	return 0x8215BEDC;
} // Block from 8215BEC0h-8215BEDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEDC);
		  /* 8215BEDCh */ case    0:  		/* mr R5, R27 */
		/* 8215BEDCh case    0:*/		regs.R5 = regs.R27;
		/* 8215BEDCh case    0:*/		return 0x8215BEE0;
		  /* 8215BEE0h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215BEE0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BEE0h case    1:*/		return 0x8215BEE4;
		  /* 8215BEE4h */ case    2:  		/* mr R3, R30 */
		/* 8215BEE4h case    2:*/		regs.R3 = regs.R30;
		/* 8215BEE4h case    2:*/		return 0x8215BEE8;
		  /* 8215BEE8h */ case    3:  		/* bl -2208 */
		/* 8215BEE8h case    3:*/		regs.LR = 0x8215BEEC; return 0x8215B648;
		/* 8215BEE8h case    3:*/		return 0x8215BEEC;
		  /* 8215BEECh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215BEECh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215BEECh case    4:*/		return 0x8215BEF0;
		  /* 8215BEF0h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8215BEF0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215BEF8;  }
		/* 8215BEF0h case    5:*/		return 0x8215BEF4;
		  /* 8215BEF4h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215BEF4h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BEF4h case    6:*/		return 0x8215BEF8;
	}
	return 0x8215BEF8;
} // Block from 8215BEDCh-8215BEF8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215BEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BEF8);
		  /* 8215BEF8h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BEF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BEF8h case    0:*/		return 0x8215BEFC;
		  /* 8215BEFCh */ case    1:  		/* lwz R30, <#[R3 + 16]> */
		/* 8215BEFCh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000010) );
		/* 8215BEFCh case    1:*/		return 0x8215BF00;
		  /* 8215BF00h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 8215BF00h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215BF00h case    2:*/		return 0x8215BF04;
		  /* 8215BF04h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8215BF04h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215BF40;  }
		/* 8215BF04h case    3:*/		return 0x8215BF08;
		  /* 8215BF08h */ case    4:  		/* bl -3160 */
		/* 8215BF08h case    4:*/		regs.LR = 0x8215BF0C; return 0x8215B2B0;
		/* 8215BF08h case    4:*/		return 0x8215BF0C;
		  /* 8215BF0Ch */ case    5:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215BF0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BF0Ch case    5:*/		return 0x8215BF10;
		  /* 8215BF10h */ case    6:  		/* mr R4, R3 */
		/* 8215BF10h case    6:*/		regs.R4 = regs.R3;
		/* 8215BF10h case    6:*/		return 0x8215BF14;
		  /* 8215BF14h */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 8215BF14h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215BF14h case    7:*/		return 0x8215BF18;
		  /* 8215BF18h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BF18h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215BF24;  }
		/* 8215BF18h case    8:*/		return 0x8215BF1C;
		  /* 8215BF1Ch */ case    9:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BF1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BF1Ch case    9:*/		return 0x8215BF20;
		  /* 8215BF20h */ case   10:  		/* stw R11, <#[R31 + 24]> */
		/* 8215BF20h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BF20h case   10:*/		return 0x8215BF24;
	}
	return 0x8215BF24;
} // Block from 8215BEF8h-8215BF24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215BF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BF24);
		  /* 8215BF24h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8215BF24h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215BF24h case    0:*/		return 0x8215BF28;
		  /* 8215BF28h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8215BF28h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215BF34;  }
		/* 8215BF28h case    1:*/		return 0x8215BF2C;
		  /* 8215BF2Ch */ case    2:  		/* lwz R3, <#[R4]> */
		/* 8215BF2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215BF2Ch case    2:*/		return 0x8215BF30;
		  /* 8215BF30h */ case    3:  		/* bl 719560 */
		/* 8215BF30h case    3:*/		regs.LR = 0x8215BF34; return 0x8220B9F8;
		/* 8215BF30h case    3:*/		return 0x8215BF34;
	}
	return 0x8215BF34;
} // Block from 8215BF24h-8215BF34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BF34);
		  /* 8215BF34h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215BF34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215BF34h case    0:*/		return 0x8215BF38;
		  /* 8215BF38h */ case    1:  		/* addi R11, R11, -1 */
		/* 8215BF38h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215BF38h case    1:*/		return 0x8215BF3C;
		  /* 8215BF3Ch */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215BF3Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215BF3Ch case    2:*/		return 0x8215BF40;
	}
	return 0x8215BF40;
} // Block from 8215BF34h-8215BF40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BF40);
		  /* 8215BF40h */ case    0:  		/* mr R3, R30 */
		/* 8215BF40h case    0:*/		regs.R3 = regs.R30;
		/* 8215BF40h case    0:*/		return 0x8215BF44;
		  /* 8215BF44h */ case    1:  		/* addi R1, R1, 128 */
		/* 8215BF44h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215BF44h case    1:*/		return 0x8215BF48;
		  /* 8215BF48h */ case    2:  		/* b -830628 */
		/* 8215BF48h case    2:*/		return 0x820912A4;
		/* 8215BF48h case    2:*/		return 0x8215BF4C;
		  /* 8215BF4Ch */ case    3:  		/* nop */
		/* 8215BF4Ch case    3:*/		cpu::op::nop();
		/* 8215BF4Ch case    3:*/		return 0x8215BF50;
	}
	return 0x8215BF50;
} // Block from 8215BF40h-8215BF50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215BF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BF50);
		  /* 8215BF50h */ case    0:  		/* mfspr R12, LR */
		/* 8215BF50h case    0:*/		regs.R12 = regs.LR;
		/* 8215BF50h case    0:*/		return 0x8215BF54;
		  /* 8215BF54h */ case    1:  		/* bl -830716 */
		/* 8215BF54h case    1:*/		regs.LR = 0x8215BF58; return 0x82091258;
		/* 8215BF54h case    1:*/		return 0x8215BF58;
		  /* 8215BF58h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215BF58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215BF58h case    2:*/		return 0x8215BF5C;
		  /* 8215BF5Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215BF5Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215BF5Ch case    3:*/		return 0x8215BF60;
		  /* 8215BF60h */ case    4:  		/* lis R10, -32252 */
		/* 8215BF60h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215BF60h case    4:*/		return 0x8215BF64;
		  /* 8215BF64h */ case    5:  		/* mr R31, R3 */
		/* 8215BF64h case    5:*/		regs.R31 = regs.R3;
		/* 8215BF64h case    5:*/		return 0x8215BF68;
		  /* 8215BF68h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215BF68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215BF68h case    6:*/		return 0x8215BF6C;
		  /* 8215BF6Ch */ case    7:  		/* addi R29, R11, 27460 */
		/* 8215BF6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215BF6Ch case    7:*/		return 0x8215BF70;
		  /* 8215BF70h */ case    8:  		/* addi R28, R10, -21920 */
		/* 8215BF70h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215BF70h case    8:*/		return 0x8215BF74;
		  /* 8215BF74h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BF74h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215BF94;  }
		/* 8215BF74h case    9:*/		return 0x8215BF78;
		  /* 8215BF78h */ case   10:  		/* lis R11, -32252 */
		/* 8215BF78h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BF78h case   10:*/		return 0x8215BF7C;
		  /* 8215BF7Ch */ case   11:  		/* mr R6, R28 */
		/* 8215BF7Ch case   11:*/		regs.R6 = regs.R28;
		/* 8215BF7Ch case   11:*/		return 0x8215BF80;
		  /* 8215BF80h */ case   12:  		/* addi R5, R11, -21472 */
		/* 8215BF80h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC20);
		/* 8215BF80h case   12:*/		return 0x8215BF84;
		  /* 8215BF84h */ case   13:  		/* mr R4, R29 */
		/* 8215BF84h case   13:*/		regs.R4 = regs.R29;
		/* 8215BF84h case   13:*/		return 0x8215BF88;
		  /* 8215BF88h */ case   14:  		/* li R7, 1485 */
		/* 8215BF88h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x5CD);
		/* 8215BF88h case   14:*/		return 0x8215BF8C;
		  /* 8215BF8Ch */ case   15:  		/* li R3, 0 */
		/* 8215BF8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BF8Ch case   15:*/		return 0x8215BF90;
		  /* 8215BF90h */ case   16:  		/* bl -17288 */
		/* 8215BF90h case   16:*/		regs.LR = 0x8215BF94; return 0x82157C08;
		/* 8215BF90h case   16:*/		return 0x8215BF94;
	}
	return 0x8215BF94;
} // Block from 8215BF50h-8215BF94h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215BF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BF94);
		  /* 8215BF94h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BF94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BF94h case    0:*/		return 0x8215BF98;
		  /* 8215BF98h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215BF98h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215BF98h case    1:*/		return 0x8215BF9C;
		  /* 8215BF9Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BF9Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BFA8;  }
		/* 8215BF9Ch case    2:*/		return 0x8215BFA0;
		  /* 8215BFA0h */ case    3:  		/* li R30, 0 */
		/* 8215BFA0h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215BFA0h case    3:*/		return 0x8215BFA4;
		  /* 8215BFA4h */ case    4:  		/* b 16 */
		/* 8215BFA4h case    4:*/		return 0x8215BFB4;
		/* 8215BFA4h case    4:*/		return 0x8215BFA8;
	}
	return 0x8215BFA8;
} // Block from 8215BF94h-8215BFA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215BFA8h
// Function '?ULIST_InsertItem@XGRAPHICS@@YAXPAU_KEY_LIST@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BFA8);
		  /* 8215BFA8h */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215BFA8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215BFA8h case    0:*/		return 0x8215BFAC;
		  /* 8215BFACh */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215BFACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215BFACh case    1:*/		return 0x8215BFB0;
		  /* 8215BFB0h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215BFB0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215BFD0;  }
		/* 8215BFB0h case    2:*/		return 0x8215BFB4;
	}
	return 0x8215BFB4;
} // Block from 8215BFA8h-8215BFB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215BFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BFB4);
		  /* 8215BFB4h */ case    0:  		/* lis R11, -32252 */
		/* 8215BFB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215BFB4h case    0:*/		return 0x8215BFB8;
		  /* 8215BFB8h */ case    1:  		/* mr R6, R28 */
		/* 8215BFB8h case    1:*/		regs.R6 = regs.R28;
		/* 8215BFB8h case    1:*/		return 0x8215BFBC;
		  /* 8215BFBCh */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215BFBCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215BFBCh case    2:*/		return 0x8215BFC0;
		  /* 8215BFC0h */ case    3:  		/* mr R4, R29 */
		/* 8215BFC0h case    3:*/		regs.R4 = regs.R29;
		/* 8215BFC0h case    3:*/		return 0x8215BFC4;
		  /* 8215BFC4h */ case    4:  		/* li R7, 1491 */
		/* 8215BFC4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x5D3);
		/* 8215BFC4h case    4:*/		return 0x8215BFC8;
		  /* 8215BFC8h */ case    5:  		/* li R3, 0 */
		/* 8215BFC8h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215BFC8h case    5:*/		return 0x8215BFCC;
		  /* 8215BFCCh */ case    6:  		/* bl -17348 */
		/* 8215BFCCh case    6:*/		regs.LR = 0x8215BFD0; return 0x82157C08;
		/* 8215BFCCh case    6:*/		return 0x8215BFD0;
	}
	return 0x8215BFD0;
} // Block from 8215BFB4h-8215BFD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215BFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215BFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215BFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215BFD0);
		  /* 8215BFD0h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BFD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BFD0h case    0:*/		return 0x8215BFD4;
		  /* 8215BFD4h */ case    1:  		/* lwz R29, <#[R30 + 16]> */
		/* 8215BFD4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000010) );
		/* 8215BFD4h case    1:*/		return 0x8215BFD8;
		  /* 8215BFD8h */ case    2:  		/* cmplw CR6, R30, R11 */
		/* 8215BFD8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8215BFD8h case    2:*/		return 0x8215BFDC;
		  /* 8215BFDCh */ case    3:  		/* bc 12, CR6_EQ, 64 */
		/* 8215BFDCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8215C01C;  }
		/* 8215BFDCh case    3:*/		return 0x8215BFE0;
		  /* 8215BFE0h */ case    4:  		/* mr R3, R30 */
		/* 8215BFE0h case    4:*/		regs.R3 = regs.R30;
		/* 8215BFE0h case    4:*/		return 0x8215BFE4;
		  /* 8215BFE4h */ case    5:  		/* bl -3380 */
		/* 8215BFE4h case    5:*/		regs.LR = 0x8215BFE8; return 0x8215B2B0;
		/* 8215BFE4h case    5:*/		return 0x8215BFE8;
		  /* 8215BFE8h */ case    6:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215BFE8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BFE8h case    6:*/		return 0x8215BFEC;
		  /* 8215BFECh */ case    7:  		/* mr R4, R3 */
		/* 8215BFECh case    7:*/		regs.R4 = regs.R3;
		/* 8215BFECh case    7:*/		return 0x8215BFF0;
		  /* 8215BFF0h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 8215BFF0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215BFF0h case    8:*/		return 0x8215BFF4;
		  /* 8215BFF4h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 8215BFF4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215C000;  }
		/* 8215BFF4h case    9:*/		return 0x8215BFF8;
		  /* 8215BFF8h */ case   10:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215BFF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215BFF8h case   10:*/		return 0x8215BFFC;
		  /* 8215BFFCh */ case   11:  		/* stw R11, <#[R31 + 24]> */
		/* 8215BFFCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215BFFCh case   11:*/		return 0x8215C000;
	}
	return 0x8215C000;
} // Block from 8215BFD0h-8215C000h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215C000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C000);
		  /* 8215C000h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 8215C000h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215C000h case    0:*/		return 0x8215C004;
		  /* 8215C004h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8215C004h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215C010;  }
		/* 8215C004h case    1:*/		return 0x8215C008;
		  /* 8215C008h */ case    2:  		/* lwz R3, <#[R4]> */
		/* 8215C008h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215C008h case    2:*/		return 0x8215C00C;
		  /* 8215C00Ch */ case    3:  		/* bl 719340 */
		/* 8215C00Ch case    3:*/		regs.LR = 0x8215C010; return 0x8220B9F8;
		/* 8215C00Ch case    3:*/		return 0x8215C010;
	}
	return 0x8215C010;
} // Block from 8215C000h-8215C010h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215C010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C010);
		  /* 8215C010h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C010h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C010h case    0:*/		return 0x8215C014;
		  /* 8215C014h */ case    1:  		/* addi R11, R11, -1 */
		/* 8215C014h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215C014h case    1:*/		return 0x8215C018;
		  /* 8215C018h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215C018h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C018h case    2:*/		return 0x8215C01C;
	}
	return 0x8215C01C;
} // Block from 8215C010h-8215C01Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C01Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C01C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C01C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C01C);
		  /* 8215C01Ch */ case    0:  		/* mr R3, R29 */
		/* 8215C01Ch case    0:*/		regs.R3 = regs.R29;
		/* 8215C01Ch case    0:*/		return 0x8215C020;
		  /* 8215C020h */ case    1:  		/* addi R1, R1, 128 */
		/* 8215C020h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C020h case    1:*/		return 0x8215C024;
		  /* 8215C024h */ case    2:  		/* b -830844 */
		/* 8215C024h case    2:*/		return 0x820912A8;
		/* 8215C024h case    2:*/		return 0x8215C028;
	}
	return 0x8215C028;
} // Block from 8215C01Ch-8215C028h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C028);
		  /* 8215C028h */ case    0:  		/* mfspr R12, LR */
		/* 8215C028h case    0:*/		regs.R12 = regs.LR;
		/* 8215C028h case    0:*/		return 0x8215C02C;
		  /* 8215C02Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C02Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C02Ch case    1:*/		return 0x8215C030;
		  /* 8215C030h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C030h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C030h case    2:*/		return 0x8215C034;
		  /* 8215C034h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C034h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C034h case    3:*/		return 0x8215C038;
		  /* 8215C038h */ case    4:  		/* mr R31, R3 */
		/* 8215C038h case    4:*/		regs.R31 = regs.R3;
		/* 8215C038h case    4:*/		return 0x8215C03C;
		  /* 8215C03Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215C03Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C03Ch case    5:*/		return 0x8215C040;
		  /* 8215C040h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215C040h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215C064;  }
		/* 8215C040h case    6:*/		return 0x8215C044;
		  /* 8215C044h */ case    7:  		/* lis R11, -32252 */
		/* 8215C044h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C044h case    7:*/		return 0x8215C048;
		  /* 8215C048h */ case    8:  		/* lis R10, -32252 */
		/* 8215C048h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C048h case    8:*/		return 0x8215C04C;
		  /* 8215C04Ch */ case    9:  		/* lis R9, -32253 */
		/* 8215C04Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C04Ch case    9:*/		return 0x8215C050;
		  /* 8215C050h */ case   10:  		/* addi R6, R11, -21920 */
		/* 8215C050h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C050h case   10:*/		return 0x8215C054;
		  /* 8215C054h */ case   11:  		/* addi R5, R10, -21472 */
		/* 8215C054h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC20);
		/* 8215C054h case   11:*/		return 0x8215C058;
		  /* 8215C058h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215C058h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C058h case   12:*/		return 0x8215C05C;
		  /* 8215C05Ch */ case   13:  		/* li R7, 1533 */
		/* 8215C05Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x5FD);
		/* 8215C05Ch case   13:*/		return 0x8215C060;
	}
	return 0x8215C060;
} // Block from 8215C028h-8215C060h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215C060h
// Function '?ULIST_Search@XGRAPHICS@@YAPAU_KEY_LIST_ITEM@1@PAU21@0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C060);
		  /* 8215C060h */ case    0:  		/* bl -17496 */
		/* 8215C060h case    0:*/		regs.LR = 0x8215C064; return 0x82157C08;
		/* 8215C060h case    0:*/		return 0x8215C064;
	}
	return 0x8215C064;
} // Block from 8215C060h-8215C064h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C064);
		  /* 8215C064h */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215C064h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C064h case    0:*/		return 0x8215C068;
		  /* 8215C068h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C068h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C068h case    1:*/		return 0x8215C06C;
		  /* 8215C06Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C06Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C06Ch case    2:*/		return 0x8215C070;
		  /* 8215C070h */ case    3:  		/* mtspr LR, R12 */
		/* 8215C070h case    3:*/		regs.LR = regs.R12;
		/* 8215C070h case    3:*/		return 0x8215C074;
		  /* 8215C074h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C074h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C074h case    4:*/		return 0x8215C078;
		  /* 8215C078h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C078h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C078h case    5:*/		return 0x8215C07C;
	}
	return 0x8215C07C;
} // Block from 8215C064h-8215C07Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C07C);
		  /* 8215C07Ch */ case    0:  		/* nop */
		/* 8215C07Ch case    0:*/		cpu::op::nop();
		/* 8215C07Ch case    0:*/		return 0x8215C080;
	}
	return 0x8215C080;
} // Block from 8215C07Ch-8215C080h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C080);
		  /* 8215C080h */ case    0:  		/* mfspr R12, LR */
		/* 8215C080h case    0:*/		regs.R12 = regs.LR;
		/* 8215C080h case    0:*/		return 0x8215C084;
		  /* 8215C084h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C084h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C084h case    1:*/		return 0x8215C088;
		  /* 8215C088h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C088h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C088h case    2:*/		return 0x8215C08C;
		  /* 8215C08Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C08Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C08Ch case    3:*/		return 0x8215C090;
		  /* 8215C090h */ case    4:  		/* mr R11, R6 */
		/* 8215C090h case    4:*/		regs.R11 = regs.R6;
		/* 8215C090h case    4:*/		return 0x8215C094;
		  /* 8215C094h */ case    5:  		/* mr R6, R5 */
		/* 8215C094h case    5:*/		regs.R6 = regs.R5;
		/* 8215C094h case    5:*/		return 0x8215C098;
		  /* 8215C098h */ case    6:  		/* mr R7, R3 */
		/* 8215C098h case    6:*/		regs.R7 = regs.R3;
		/* 8215C098h case    6:*/		return 0x8215C09C;
		  /* 8215C09Ch */ case    7:  		/* mr R5, R4 */
		/* 8215C09Ch case    7:*/		regs.R5 = regs.R4;
		/* 8215C09Ch case    7:*/		return 0x8215C0A0;
		  /* 8215C0A0h */ case    8:  		/* li R4, 32 */
		/* 8215C0A0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8215C0A0h case    8:*/		return 0x8215C0A4;
		  /* 8215C0A4h */ case    9:  		/* mr R3, R11 */
		/* 8215C0A4h case    9:*/		regs.R3 = regs.R11;
		/* 8215C0A4h case    9:*/		return 0x8215C0A8;
		  /* 8215C0A8h */ case   10:  		/* bl 718632 */
		/* 8215C0A8h case   10:*/		regs.LR = 0x8215C0AC; return 0x8220B7D0;
		/* 8215C0A8h case   10:*/		return 0x8215C0AC;
		  /* 8215C0ACh */ case   11:  		/* or. R31, R3, R3 */
		/* 8215C0ACh case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215C0ACh case   11:*/		return 0x8215C0B0;
		  /* 8215C0B0h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215C0B0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215C0D8;  }
		/* 8215C0B0h case   12:*/		return 0x8215C0B4;
		  /* 8215C0B4h */ case   13:  		/* lis R11, -32252 */
		/* 8215C0B4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C0B4h case   13:*/		return 0x8215C0B8;
		  /* 8215C0B8h */ case   14:  		/* lis R10, -32252 */
		/* 8215C0B8h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C0B8h case   14:*/		return 0x8215C0BC;
		  /* 8215C0BCh */ case   15:  		/* lis R9, -32253 */
		/* 8215C0BCh case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C0BCh case   15:*/		return 0x8215C0C0;
		  /* 8215C0C0h */ case   16:  		/* addi R6, R11, -21920 */
		/* 8215C0C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C0C0h case   16:*/		return 0x8215C0C4;
		  /* 8215C0C4h */ case   17:  		/* addi R5, R10, -21480 */
		/* 8215C0C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215C0C4h case   17:*/		return 0x8215C0C8;
		  /* 8215C0C8h */ case   18:  		/* addi R4, R9, 27460 */
		/* 8215C0C8h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C0C8h case   18:*/		return 0x8215C0CC;
		  /* 8215C0CCh */ case   19:  		/* li R7, 1609 */
		/* 8215C0CCh case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x649);
		/* 8215C0CCh case   19:*/		return 0x8215C0D0;
		  /* 8215C0D0h */ case   20:  		/* li R3, 0 */
		/* 8215C0D0h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C0D0h case   20:*/		return 0x8215C0D4;
		  /* 8215C0D4h */ case   21:  		/* bl -17612 */
		/* 8215C0D4h case   21:*/		regs.LR = 0x8215C0D8; return 0x82157C08;
		/* 8215C0D4h case   21:*/		return 0x8215C0D8;
	}
	return 0x8215C0D8;
} // Block from 8215C080h-8215C0D8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215C0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C0D8);
		  /* 8215C0D8h */ case    0:  		/* mr R3, R31 */
		/* 8215C0D8h case    0:*/		regs.R3 = regs.R31;
		/* 8215C0D8h case    0:*/		return 0x8215C0DC;
		  /* 8215C0DCh */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C0DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C0DCh case    1:*/		return 0x8215C0E0;
		  /* 8215C0E0h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C0E0h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C0E0h case    2:*/		return 0x8215C0E4;
		  /* 8215C0E4h */ case    3:  		/* mtspr LR, R12 */
		/* 8215C0E4h case    3:*/		regs.LR = regs.R12;
		/* 8215C0E4h case    3:*/		return 0x8215C0E8;
		  /* 8215C0E8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C0E8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C0E8h case    4:*/		return 0x8215C0EC;
		  /* 8215C0ECh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C0ECh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C0ECh case    5:*/		return 0x8215C0F0;
	}
	return 0x8215C0F0;
} // Block from 8215C0D8h-8215C0F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C0F0);
		  /* 8215C0F0h */ case    0:  		/* mfspr R12, LR */
		/* 8215C0F0h case    0:*/		regs.R12 = regs.LR;
		/* 8215C0F0h case    0:*/		return 0x8215C0F4;
		  /* 8215C0F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C0F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C0F4h case    1:*/		return 0x8215C0F8;
		  /* 8215C0F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C0F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C0F8h case    2:*/		return 0x8215C0FC;
		  /* 8215C0FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C0FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C0FCh case    3:*/		return 0x8215C100;
		  /* 8215C100h */ case    4:  		/* mr R11, R6 */
		/* 8215C100h case    4:*/		regs.R11 = regs.R6;
		/* 8215C100h case    4:*/		return 0x8215C104;
		  /* 8215C104h */ case    5:  		/* mr R6, R5 */
		/* 8215C104h case    5:*/		regs.R6 = regs.R5;
		/* 8215C104h case    5:*/		return 0x8215C108;
		  /* 8215C108h */ case    6:  		/* mr R7, R3 */
		/* 8215C108h case    6:*/		regs.R7 = regs.R3;
		/* 8215C108h case    6:*/		return 0x8215C10C;
		  /* 8215C10Ch */ case    7:  		/* mr R5, R4 */
		/* 8215C10Ch case    7:*/		regs.R5 = regs.R4;
		/* 8215C10Ch case    7:*/		return 0x8215C110;
		  /* 8215C110h */ case    8:  		/* li R4, 20 */
		/* 8215C110h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8215C110h case    8:*/		return 0x8215C114;
		  /* 8215C114h */ case    9:  		/* mr R3, R11 */
		/* 8215C114h case    9:*/		regs.R3 = regs.R11;
		/* 8215C114h case    9:*/		return 0x8215C118;
		  /* 8215C118h */ case   10:  		/* bl 718520 */
		/* 8215C118h case   10:*/		regs.LR = 0x8215C11C; return 0x8220B7D0;
		/* 8215C118h case   10:*/		return 0x8215C11C;
		  /* 8215C11Ch */ case   11:  		/* or. R31, R3, R3 */
		/* 8215C11Ch case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215C11Ch case   11:*/		return 0x8215C120;
		  /* 8215C120h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215C120h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215C148;  }
		/* 8215C120h case   12:*/		return 0x8215C124;
		  /* 8215C124h */ case   13:  		/* lis R11, -32252 */
		/* 8215C124h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C124h case   13:*/		return 0x8215C128;
	}
	return 0x8215C128;
} // Block from 8215C0F0h-8215C128h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215C128h
// Function '?ULIST_GetItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C128);
		  /* 8215C128h */ case    0:  		/* lis R10, -32252 */
		/* 8215C128h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C128h case    0:*/		return 0x8215C12C;
		  /* 8215C12Ch */ case    1:  		/* lis R9, -32253 */
		/* 8215C12Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C12Ch case    1:*/		return 0x8215C130;
		  /* 8215C130h */ case    2:  		/* addi R6, R11, -21920 */
		/* 8215C130h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C130h case    2:*/		return 0x8215C134;
		  /* 8215C134h */ case    3:  		/* addi R5, R10, -21480 */
		/* 8215C134h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215C134h case    3:*/		return 0x8215C138;
		  /* 8215C138h */ case    4:  		/* addi R4, R9, 27460 */
		/* 8215C138h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C138h case    4:*/		return 0x8215C13C;
		  /* 8215C13Ch */ case    5:  		/* li R7, 1650 */
		/* 8215C13Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x672);
		/* 8215C13Ch case    5:*/		return 0x8215C140;
		  /* 8215C140h */ case    6:  		/* li R3, 0 */
		/* 8215C140h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C140h case    6:*/		return 0x8215C144;
		  /* 8215C144h */ case    7:  		/* bl -17724 */
		/* 8215C144h case    7:*/		regs.LR = 0x8215C148; return 0x82157C08;
		/* 8215C144h case    7:*/		return 0x8215C148;
	}
	return 0x8215C148;
} // Block from 8215C128h-8215C148h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215C148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C148);
		  /* 8215C148h */ case    0:  		/* mr R3, R31 */
		/* 8215C148h case    0:*/		regs.R3 = regs.R31;
		/* 8215C148h case    0:*/		return 0x8215C14C;
		  /* 8215C14Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C14Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C14Ch case    1:*/		return 0x8215C150;
		  /* 8215C150h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C150h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C150h case    2:*/		return 0x8215C154;
		  /* 8215C154h */ case    3:  		/* mtspr LR, R12 */
		/* 8215C154h case    3:*/		regs.LR = regs.R12;
		/* 8215C154h case    3:*/		return 0x8215C158;
		  /* 8215C158h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C158h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C158h case    4:*/		return 0x8215C15C;
		  /* 8215C15Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C15Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C15Ch case    5:*/		return 0x8215C160;
	}
	return 0x8215C160;
} // Block from 8215C148h-8215C160h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C160);
		  /* 8215C160h */ case    0:  		/* li R3, 32 */
		/* 8215C160h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8215C160h case    0:*/		return 0x8215C164;
		  /* 8215C164h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215C164h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C164h case    1:*/		return 0x8215C168;
	}
	return 0x8215C168;
} // Block from 8215C160h-8215C168h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215C168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C168);
		  /* 8215C168h */ case    0:  		/* mfspr R12, LR */
		/* 8215C168h case    0:*/		regs.R12 = regs.LR;
		/* 8215C168h case    0:*/		return 0x8215C16C;
		  /* 8215C16Ch */ case    1:  		/* bl -831252 */
		/* 8215C16Ch case    1:*/		regs.LR = 0x8215C170; return 0x82091258;
		/* 8215C16Ch case    1:*/		return 0x8215C170;
		  /* 8215C170h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C170h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C170h case    2:*/		return 0x8215C174;
		  /* 8215C174h */ case    3:  		/* lis R11, -32253 */
		/* 8215C174h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C174h case    3:*/		return 0x8215C178;
		  /* 8215C178h */ case    4:  		/* lis R10, -32252 */
		/* 8215C178h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C178h case    4:*/		return 0x8215C17C;
		  /* 8215C17Ch */ case    5:  		/* mr R31, R3 */
		/* 8215C17Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215C17Ch case    5:*/		return 0x8215C180;
		  /* 8215C180h */ case    6:  		/* mr R28, R4 */
		/* 8215C180h case    6:*/		regs.R28 = regs.R4;
		/* 8215C180h case    6:*/		return 0x8215C184;
		  /* 8215C184h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215C184h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C184h case    7:*/		return 0x8215C188;
		  /* 8215C188h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8215C188h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215C188h case    8:*/		return 0x8215C18C;
		  /* 8215C18Ch */ case    9:  		/* addi R29, R10, -21920 */
		/* 8215C18Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215C18Ch case    9:*/		return 0x8215C190;
		  /* 8215C190h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C190h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215C1B0;  }
		/* 8215C190h case   10:*/		return 0x8215C194;
		  /* 8215C194h */ case   11:  		/* lis R11, -32252 */
		/* 8215C194h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C194h case   11:*/		return 0x8215C198;
		  /* 8215C198h */ case   12:  		/* mr R6, R29 */
		/* 8215C198h case   12:*/		regs.R6 = regs.R29;
		/* 8215C198h case   12:*/		return 0x8215C19C;
		  /* 8215C19Ch */ case   13:  		/* addi R5, R11, -21400 */
		/* 8215C19Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC68);
		/* 8215C19Ch case   13:*/		return 0x8215C1A0;
		  /* 8215C1A0h */ case   14:  		/* mr R4, R30 */
		/* 8215C1A0h case   14:*/		regs.R4 = regs.R30;
		/* 8215C1A0h case   14:*/		return 0x8215C1A4;
		  /* 8215C1A4h */ case   15:  		/* li R7, 2228 */
		/* 8215C1A4h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x8B4);
		/* 8215C1A4h case   15:*/		return 0x8215C1A8;
		  /* 8215C1A8h */ case   16:  		/* li R3, 0 */
		/* 8215C1A8h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C1A8h case   16:*/		return 0x8215C1AC;
		  /* 8215C1ACh */ case   17:  		/* bl -17828 */
		/* 8215C1ACh case   17:*/		regs.LR = 0x8215C1B0; return 0x82157C08;
		/* 8215C1ACh case   17:*/		return 0x8215C1B0;
	}
	return 0x8215C1B0;
} // Block from 8215C168h-8215C1B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215C1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C1B0);
		  /* 8215C1B0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215C1B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215C1B0h case    0:*/		return 0x8215C1B4;
		  /* 8215C1B4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C1B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215C1D4;  }
		/* 8215C1B4h case    1:*/		return 0x8215C1B8;
		  /* 8215C1B8h */ case    2:  		/* lis R11, -32252 */
		/* 8215C1B8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C1B8h case    2:*/		return 0x8215C1BC;
		  /* 8215C1BCh */ case    3:  		/* mr R6, R29 */
		/* 8215C1BCh case    3:*/		regs.R6 = regs.R29;
		/* 8215C1BCh case    3:*/		return 0x8215C1C0;
		  /* 8215C1C0h */ case    4:  		/* addi R5, R11, -21480 */
		/* 8215C1C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC18);
		/* 8215C1C0h case    4:*/		return 0x8215C1C4;
		  /* 8215C1C4h */ case    5:  		/* mr R4, R30 */
		/* 8215C1C4h case    5:*/		regs.R4 = regs.R30;
		/* 8215C1C4h case    5:*/		return 0x8215C1C8;
		  /* 8215C1C8h */ case    6:  		/* li R7, 2229 */
		/* 8215C1C8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x8B5);
		/* 8215C1C8h case    6:*/		return 0x8215C1CC;
		  /* 8215C1CCh */ case    7:  		/* li R3, 0 */
		/* 8215C1CCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C1CCh case    7:*/		return 0x8215C1D0;
		  /* 8215C1D0h */ case    8:  		/* bl -17864 */
		/* 8215C1D0h case    8:*/		regs.LR = 0x8215C1D4; return 0x82157C08;
		/* 8215C1D0h case    8:*/		return 0x8215C1D4;
	}
	return 0x8215C1D4;
} // Block from 8215C1B0h-8215C1D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215C1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C1D4);
		  /* 8215C1D4h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C1D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C1D4h case    0:*/		return 0x8215C1D8;
	}
	return 0x8215C1D8;
} // Block from 8215C1D4h-8215C1D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C1D8h
// Function '?ULIST_RemoveItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C1D8);
		  /* 8215C1D8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8215C1D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C1D8h case    0:*/		return 0x8215C1DC;
		  /* 8215C1DCh */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8215C1DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8215C1FC;  }
		/* 8215C1DCh case    1:*/		return 0x8215C1E0;
		  /* 8215C1E0h */ case    2:  		/* lis R11, -32252 */
		/* 8215C1E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C1E0h case    2:*/		return 0x8215C1E4;
		  /* 8215C1E4h */ case    3:  		/* mr R6, R29 */
		/* 8215C1E4h case    3:*/		regs.R6 = regs.R29;
		/* 8215C1E4h case    3:*/		return 0x8215C1E8;
		  /* 8215C1E8h */ case    4:  		/* addi R5, R11, -21424 */
		/* 8215C1E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC50);
		/* 8215C1E8h case    4:*/		return 0x8215C1EC;
		  /* 8215C1ECh */ case    5:  		/* mr R4, R30 */
		/* 8215C1ECh case    5:*/		regs.R4 = regs.R30;
		/* 8215C1ECh case    5:*/		return 0x8215C1F0;
		  /* 8215C1F0h */ case    6:  		/* li R7, 2232 */
		/* 8215C1F0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x8B8);
		/* 8215C1F0h case    6:*/		return 0x8215C1F4;
		  /* 8215C1F4h */ case    7:  		/* li R3, 0 */
		/* 8215C1F4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C1F4h case    7:*/		return 0x8215C1F8;
		  /* 8215C1F8h */ case    8:  		/* bl -17904 */
		/* 8215C1F8h case    8:*/		regs.LR = 0x8215C1FC; return 0x82157C08;
		/* 8215C1F8h case    8:*/		return 0x8215C1FC;
	}
	return 0x8215C1FC;
} // Block from 8215C1D8h-8215C1FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215C1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C1FC);
		  /* 8215C1FCh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C1FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C1FCh case    0:*/		return 0x8215C200;
		  /* 8215C200h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215C200h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C200h case    1:*/		return 0x8215C204;
		  /* 8215C204h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215C204h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215C224;  }
		/* 8215C204h case    2:*/		return 0x8215C208;
		  /* 8215C208h */ case    3:  		/* lis R11, -32252 */
		/* 8215C208h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C208h case    3:*/		return 0x8215C20C;
		  /* 8215C20Ch */ case    4:  		/* mr R6, R29 */
		/* 8215C20Ch case    4:*/		regs.R6 = regs.R29;
		/* 8215C20Ch case    4:*/		return 0x8215C210;
		  /* 8215C210h */ case    5:  		/* addi R5, R11, -21444 */
		/* 8215C210h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC3C);
		/* 8215C210h case    5:*/		return 0x8215C214;
		  /* 8215C214h */ case    6:  		/* mr R4, R30 */
		/* 8215C214h case    6:*/		regs.R4 = regs.R30;
		/* 8215C214h case    6:*/		return 0x8215C218;
		  /* 8215C218h */ case    7:  		/* li R7, 2233 */
		/* 8215C218h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x8B9);
		/* 8215C218h case    7:*/		return 0x8215C21C;
		  /* 8215C21Ch */ case    8:  		/* li R3, 0 */
		/* 8215C21Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C21Ch case    8:*/		return 0x8215C220;
		  /* 8215C220h */ case    9:  		/* bl -17944 */
		/* 8215C220h case    9:*/		regs.LR = 0x8215C224; return 0x82157C08;
		/* 8215C220h case    9:*/		return 0x8215C224;
	}
	return 0x8215C224;
} // Block from 8215C1FCh-8215C224h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C224);
		  /* 8215C224h */ case    0:  		/* stw R28, <#[R31]> */
		/* 8215C224h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8215C224h case    0:*/		return 0x8215C228;
		  /* 8215C228h */ case    1:  		/* mr R3, R28 */
		/* 8215C228h case    1:*/		regs.R3 = regs.R28;
		/* 8215C228h case    1:*/		return 0x8215C22C;
		  /* 8215C22Ch */ case    2:  		/* bl -4548 */
		/* 8215C22Ch case    2:*/		regs.LR = 0x8215C230; return 0x8215B068;
		/* 8215C22Ch case    2:*/		return 0x8215C230;
		  /* 8215C230h */ case    3:  		/* stw R3, <#[R31 + 16]> */
		/* 8215C230h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C230h case    3:*/		return 0x8215C234;
		  /* 8215C234h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215C234h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215C234h case    4:*/		return 0x8215C238;
		  /* 8215C238h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 8215C238h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215C254;  }
		/* 8215C238h case    5:*/		return 0x8215C23C;
		  /* 8215C23Ch */ case    6:  		/* lis R11, -32252 */
		/* 8215C23Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C23Ch case    6:*/		return 0x8215C240;
		  /* 8215C240h */ case    7:  		/* mr R6, R29 */
		/* 8215C240h case    7:*/		regs.R6 = regs.R29;
		/* 8215C240h case    7:*/		return 0x8215C244;
		  /* 8215C244h */ case    8:  		/* addi R5, R11, -21464 */
		/* 8215C244h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC28);
		/* 8215C244h case    8:*/		return 0x8215C248;
		  /* 8215C248h */ case    9:  		/* mr R4, R30 */
		/* 8215C248h case    9:*/		regs.R4 = regs.R30;
		/* 8215C248h case    9:*/		return 0x8215C24C;
		  /* 8215C24Ch */ case   10:  		/* li R7, 2242 */
		/* 8215C24Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x8C2);
		/* 8215C24Ch case   10:*/		return 0x8215C250;
		  /* 8215C250h */ case   11:  		/* bl -17992 */
		/* 8215C250h case   11:*/		regs.LR = 0x8215C254; return 0x82157C08;
		/* 8215C250h case   11:*/		return 0x8215C254;
	}
	return 0x8215C254;
} // Block from 8215C224h-8215C254h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215C254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C254);
		  /* 8215C254h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C254h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C254h case    0:*/		return 0x8215C258;
		  /* 8215C258h */ case    1:  		/* li R11, 0 */
		/* 8215C258h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215C258h case    1:*/		return 0x8215C25C;
		  /* 8215C25Ch */ case    2:  		/* li R9, 1 */
		/* 8215C25Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8215C25Ch case    2:*/		return 0x8215C260;
		  /* 8215C260h */ case    3:  		/* stw R11, <#[R10 + 12]> */
		/* 8215C260h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8215C260h case    3:*/		return 0x8215C264;
		  /* 8215C264h */ case    4:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C264h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C264h case    4:*/		return 0x8215C268;
		  /* 8215C268h */ case    5:  		/* stw R10, <#[R10 + 8]> */
		/* 8215C268h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8215C268h case    5:*/		return 0x8215C26C;
		  /* 8215C26Ch */ case    6:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C26Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C26Ch case    6:*/		return 0x8215C270;
		  /* 8215C270h */ case    7:  		/* stw R10, <#[R10 + 4]> */
		/* 8215C270h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8215C270h case    7:*/		return 0x8215C274;
		  /* 8215C274h */ case    8:  		/* stw R11, <#[R31 + 20]> */
		/* 8215C274h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C274h case    8:*/		return 0x8215C278;
		  /* 8215C278h */ case    9:  		/* stw R9, <#[R31 + 24]> */
		/* 8215C278h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8215C278h case    9:*/		return 0x8215C27C;
		  /* 8215C27Ch */ case   10:  		/* addi R1, R1, 128 */
		/* 8215C27Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C27Ch case   10:*/		return 0x8215C280;
		  /* 8215C280h */ case   11:  		/* b -831448 */
		/* 8215C280h case   11:*/		return 0x820912A8;
		/* 8215C280h case   11:*/		return 0x8215C284;
		  /* 8215C284h */ case   12:  		/* nop */
		/* 8215C284h case   12:*/		cpu::op::nop();
		/* 8215C284h case   12:*/		return 0x8215C288;
	}
	return 0x8215C288;
} // Block from 8215C254h-8215C288h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215C288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C288);
		  /* 8215C288h */ case    0:  		/* mfspr R12, LR */
		/* 8215C288h case    0:*/		regs.R12 = regs.LR;
		/* 8215C288h case    0:*/		return 0x8215C28C;
		  /* 8215C28Ch */ case    1:  		/* bl -831552 */
		/* 8215C28Ch case    1:*/		regs.LR = 0x8215C290; return 0x8209124C;
		/* 8215C28Ch case    1:*/		return 0x8215C290;
		  /* 8215C290h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215C290h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215C290h case    2:*/		return 0x8215C294;
		  /* 8215C294h */ case    3:  		/* lis R10, -32253 */
		/* 8215C294h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215C294h case    3:*/		return 0x8215C298;
		  /* 8215C298h */ case    4:  		/* lis R11, -32252 */
		/* 8215C298h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C298h case    4:*/		return 0x8215C29C;
		  /* 8215C29Ch */ case    5:  		/* mr R30, R3 */
		/* 8215C29Ch case    5:*/		regs.R30 = regs.R3;
		/* 8215C29Ch case    5:*/		return 0x8215C2A0;
		  /* 8215C2A0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215C2A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C2A0h case    6:*/		return 0x8215C2A4;
		  /* 8215C2A4h */ case    7:  		/* addi R27, R10, 27460 */
		/* 8215C2A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6B44);
		/* 8215C2A4h case    7:*/		return 0x8215C2A8;
		  /* 8215C2A8h */ case    8:  		/* addi R26, R11, -21920 */
		/* 8215C2A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFAA60);
		/* 8215C2A8h case    8:*/		return 0x8215C2AC;
		  /* 8215C2ACh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C2ACh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215C2CC;  }
		/* 8215C2ACh case    9:*/		return 0x8215C2B0;
		  /* 8215C2B0h */ case   10:  		/* lis R11, -32252 */
		/* 8215C2B0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C2B0h case   10:*/		return 0x8215C2B4;
		  /* 8215C2B4h */ case   11:  		/* mr R6, R26 */
		/* 8215C2B4h case   11:*/		regs.R6 = regs.R26;
		/* 8215C2B4h case   11:*/		return 0x8215C2B8;
		  /* 8215C2B8h */ case   12:  		/* addi R5, R11, -21400 */
		/* 8215C2B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC68);
		/* 8215C2B8h case   12:*/		return 0x8215C2BC;
		  /* 8215C2BCh */ case   13:  		/* mr R4, R27 */
		/* 8215C2BCh case   13:*/		regs.R4 = regs.R27;
		/* 8215C2BCh case   13:*/		return 0x8215C2C0;
		  /* 8215C2C0h */ case   14:  		/* li R7, 2279 */
		/* 8215C2C0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x8E7);
		/* 8215C2C0h case   14:*/		return 0x8215C2C4;
		  /* 8215C2C4h */ case   15:  		/* li R3, 0 */
		/* 8215C2C4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C2C4h case   15:*/		return 0x8215C2C8;
		  /* 8215C2C8h */ case   16:  		/* bl -18112 */
		/* 8215C2C8h case   16:*/		regs.LR = 0x8215C2CC; return 0x82157C08;
		/* 8215C2C8h case   16:*/		return 0x8215C2CC;
	}
	return 0x8215C2CC;
} // Block from 8215C288h-8215C2CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215C2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C2CC);
		  /* 8215C2CCh */ case    0:  		/* lis R11, -32252 */
		/* 8215C2CCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C2CCh case    0:*/		return 0x8215C2D0;
	}
	return 0x8215C2D0;
} // Block from 8215C2CCh-8215C2D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C2D0h
// Function '?OLIST_InitList@XGRAPHICS@@YAXPAU_KEY_LIST@1@PAU_MEM_HEAD@1@PAXP6APAX2I@ZP6A?AW4_E_SSM_RETURNCODE@1@22@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C2D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C2D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C2D0);
		  /* 8215C2D0h */ case    0:  		/* addi R25, R11, -21604 */
		/* 8215C2D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFAB9C);
		/* 8215C2D0h case    0:*/		return 0x8215C2D4;
		  /* 8215C2D4h */ case    1:  		/* lwz R11, <#[R30 + 16]> */
		/* 8215C2D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8215C2D4h case    1:*/		return 0x8215C2D8;
		  /* 8215C2D8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8215C2D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C2D8h case    2:*/		return 0x8215C2DC;
		  /* 8215C2DCh */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8215C2DCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215C2E8;  }
		/* 8215C2DCh case    3:*/		return 0x8215C2E0;
		  /* 8215C2E0h */ case    4:  		/* li R31, 0 */
		/* 8215C2E0h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215C2E0h case    4:*/		return 0x8215C2E4;
		  /* 8215C2E4h */ case    5:  		/* b 16 */
		/* 8215C2E4h case    5:*/		return 0x8215C2F4;
		/* 8215C2E4h case    5:*/		return 0x8215C2E8;
	}
	return 0x8215C2E8;
} // Block from 8215C2D0h-8215C2E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C2E8);
		  /* 8215C2E8h */ case    0:  		/* lwz R31, <#[R11 + 8]> */
		/* 8215C2E8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 8215C2E8h case    0:*/		return 0x8215C2EC;
		  /* 8215C2ECh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8215C2ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215C2ECh case    1:*/		return 0x8215C2F0;
		  /* 8215C2F0h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8215C2F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C30C;  }
		/* 8215C2F0h case    2:*/		return 0x8215C2F4;
	}
	return 0x8215C2F4;
} // Block from 8215C2E8h-8215C2F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C2F4);
		  /* 8215C2F4h */ case    0:  		/* mr R6, R26 */
		/* 8215C2F4h case    0:*/		regs.R6 = regs.R26;
		/* 8215C2F4h case    0:*/		return 0x8215C2F8;
		  /* 8215C2F8h */ case    1:  		/* mr R5, R25 */
		/* 8215C2F8h case    1:*/		regs.R5 = regs.R25;
		/* 8215C2F8h case    1:*/		return 0x8215C2FC;
		  /* 8215C2FCh */ case    2:  		/* mr R4, R27 */
		/* 8215C2FCh case    2:*/		regs.R4 = regs.R27;
		/* 8215C2FCh case    2:*/		return 0x8215C300;
		  /* 8215C300h */ case    3:  		/* li R7, 2284 */
		/* 8215C300h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x8EC);
		/* 8215C300h case    3:*/		return 0x8215C304;
		  /* 8215C304h */ case    4:  		/* li R3, 0 */
		/* 8215C304h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C304h case    4:*/		return 0x8215C308;
		  /* 8215C308h */ case    5:  		/* bl -18176 */
		/* 8215C308h case    5:*/		regs.LR = 0x8215C30C; return 0x82157C08;
		/* 8215C308h case    5:*/		return 0x8215C30C;
	}
	return 0x8215C30C;
} // Block from 8215C2F4h-8215C30Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C30C);
		  /* 8215C30Ch */ case    0:  		/* lwz R4, <#[R30 + 16]> */
		/* 8215C30Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 8215C30Ch case    0:*/		return 0x8215C310;
		  /* 8215C310h */ case    1:  		/* cmplw CR6, R31, R4 */
		/* 8215C310h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R4);
		/* 8215C310h case    1:*/		return 0x8215C314;
		  /* 8215C314h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 8215C314h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215C390;  }
		/* 8215C314h case    2:*/		return 0x8215C318;
		  /* 8215C318h */ case    3:  		/* lis R11, -32252 */
		/* 8215C318h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C318h case    3:*/		return 0x8215C31C;
		  /* 8215C31Ch */ case    4:  		/* addi R28, R11, -21388 */
		/* 8215C31Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFAC74);
		/* 8215C31Ch case    4:*/		return 0x8215C320;
		  /* 8215C320h */ case    5:  		/* mr R29, R31 */
		/* 8215C320h case    5:*/		regs.R29 = regs.R31;
		/* 8215C320h case    5:*/		return 0x8215C324;
		  /* 8215C324h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8215C324h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215C324h case    6:*/		return 0x8215C328;
		  /* 8215C328h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 8215C328h case    7:*/		if ( regs.CR[6].eq ) { return 0x8215C338;  }
		/* 8215C328h case    7:*/		return 0x8215C32C;
		  /* 8215C32Ch */ case    8:  		/* lwz R31, <#[R31 + 8]> */
		/* 8215C32Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8215C32Ch case    8:*/		return 0x8215C330;
		  /* 8215C330h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 8215C330h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215C330h case    9:*/		return 0x8215C334;
		  /* 8215C334h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 8215C334h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215C350;  }
		/* 8215C334h case   10:*/		return 0x8215C338;
	}
	return 0x8215C338;
} // Block from 8215C30Ch-8215C338h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215C338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C338);
		  /* 8215C338h */ case    0:  		/* mr R6, R26 */
		/* 8215C338h case    0:*/		regs.R6 = regs.R26;
		/* 8215C338h case    0:*/		return 0x8215C33C;
		  /* 8215C33Ch */ case    1:  		/* mr R5, R25 */
		/* 8215C33Ch case    1:*/		regs.R5 = regs.R25;
		/* 8215C33Ch case    1:*/		return 0x8215C340;
		  /* 8215C340h */ case    2:  		/* mr R4, R27 */
		/* 8215C340h case    2:*/		regs.R4 = regs.R27;
		/* 8215C340h case    2:*/		return 0x8215C344;
		  /* 8215C344h */ case    3:  		/* li R7, 2293 */
		/* 8215C344h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x8F5);
		/* 8215C344h case    3:*/		return 0x8215C348;
		  /* 8215C348h */ case    4:  		/* li R3, 0 */
		/* 8215C348h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C348h case    4:*/		return 0x8215C34C;
		  /* 8215C34Ch */ case    5:  		/* bl -18244 */
		/* 8215C34Ch case    5:*/		regs.LR = 0x8215C350; return 0x82157C08;
		/* 8215C34Ch case    5:*/		return 0x8215C350;
	}
	return 0x8215C350;
} // Block from 8215C338h-8215C350h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C350);
		  /* 8215C350h */ case    0:  		/* mr R3, R29 */
		/* 8215C350h case    0:*/		regs.R3 = regs.R29;
		/* 8215C350h case    0:*/		return 0x8215C354;
		  /* 8215C354h */ case    1:  		/* bl -4260 */
		/* 8215C354h case    1:*/		regs.LR = 0x8215C358; return 0x8215B2B0;
		/* 8215C354h case    1:*/		return 0x8215C358;
		  /* 8215C358h */ case    2:  		/* or. R4, R3, R3 */
		/* 8215C358h case    2:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8215C358h case    2:*/		return 0x8215C35C;
		  /* 8215C35Ch */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215C35Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215C37C;  }
		/* 8215C35Ch case    3:*/		return 0x8215C360;
		  /* 8215C360h */ case    4:  		/* mr R6, R26 */
		/* 8215C360h case    4:*/		regs.R6 = regs.R26;
		/* 8215C360h case    4:*/		return 0x8215C364;
		  /* 8215C364h */ case    5:  		/* mr R5, R28 */
		/* 8215C364h case    5:*/		regs.R5 = regs.R28;
		/* 8215C364h case    5:*/		return 0x8215C368;
		  /* 8215C368h */ case    6:  		/* mr R4, R27 */
		/* 8215C368h case    6:*/		regs.R4 = regs.R27;
		/* 8215C368h case    6:*/		return 0x8215C36C;
		  /* 8215C36Ch */ case    7:  		/* li R7, 2297 */
		/* 8215C36Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x8F9);
		/* 8215C36Ch case    7:*/		return 0x8215C370;
		  /* 8215C370h */ case    8:  		/* li R3, 0 */
		/* 8215C370h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C370h case    8:*/		return 0x8215C374;
		  /* 8215C374h */ case    9:  		/* bl -18284 */
		/* 8215C374h case    9:*/		regs.LR = 0x8215C378; return 0x82157C08;
		/* 8215C374h case    9:*/		return 0x8215C378;
		  /* 8215C378h */ case   10:  		/* b 12 */
		/* 8215C378h case   10:*/		return 0x8215C384;
		/* 8215C378h case   10:*/		return 0x8215C37C;
	}
	return 0x8215C37C;
} // Block from 8215C350h-8215C37Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215C37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C37C);
		  /* 8215C37Ch */ case    0:  		/* lwz R3, <#[R4]> */
		/* 8215C37Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215C37Ch case    0:*/		return 0x8215C380;
		  /* 8215C380h */ case    1:  		/* bl 718456 */
		/* 8215C380h case    1:*/		regs.LR = 0x8215C384; return 0x8220B9F8;
		/* 8215C380h case    1:*/		return 0x8215C384;
	}
	return 0x8215C384;
} // Block from 8215C37Ch-8215C384h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215C384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C384);
		  /* 8215C384h */ case    0:  		/* lwz R4, <#[R30 + 16]> */
		/* 8215C384h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 8215C384h case    0:*/		return 0x8215C388;
		  /* 8215C388h */ case    1:  		/* cmplw CR6, R31, R4 */
		/* 8215C388h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R4);
		/* 8215C388h case    1:*/		return 0x8215C38C;
		  /* 8215C38Ch */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 8215C38Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C320;  }
		/* 8215C38Ch case    2:*/		return 0x8215C390;
	}
	return 0x8215C390;
} // Block from 8215C384h-8215C390h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C390);
		  /* 8215C390h */ case    0:  		/* cmplwi CR0, R4, 0 */
		/* 8215C390h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8215C390h case    0:*/		return 0x8215C394;
		  /* 8215C394h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8215C394h case    1:*/		if ( regs.CR[0].eq ) { return 0x8215C3A0;  }
		/* 8215C394h case    1:*/		return 0x8215C398;
		  /* 8215C398h */ case    2:  		/* lwz R3, <#[R4]> */
		/* 8215C398h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215C398h case    2:*/		return 0x8215C39C;
		  /* 8215C39Ch */ case    3:  		/* bl 718428 */
		/* 8215C39Ch case    3:*/		regs.LR = 0x8215C3A0; return 0x8220B9F8;
		/* 8215C39Ch case    3:*/		return 0x8215C3A0;
	}
	return 0x8215C3A0;
} // Block from 8215C390h-8215C3A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215C3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C3A0);
		  /* 8215C3A0h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 8215C3A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8215C3A0h case    0:*/		return 0x8215C3A4;
		  /* 8215C3A4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215C3A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C3A4h case    1:*/		return 0x8215C3A8;
		  /* 8215C3A8h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C3A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C3C8;  }
		/* 8215C3A8h case    2:*/		return 0x8215C3AC;
		  /* 8215C3ACh */ case    3:  		/* lwz R3, <#[R30]> */
		/* 8215C3ACh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8215C3ACh case    3:*/		return 0x8215C3B0;
		  /* 8215C3B0h */ case    4:  		/* bl 718048 */
		/* 8215C3B0h case    4:*/		regs.LR = 0x8215C3B4; return 0x8220B890;
		/* 8215C3B0h case    4:*/		return 0x8215C3B4;
		  /* 8215C3B4h */ case    5:  		/* lwz R11, <#[R30 + 12]> */
		/* 8215C3B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215C3B4h case    5:*/		return 0x8215C3B8;
		  /* 8215C3B8h */ case    6:  		/* mr R4, R30 */
		/* 8215C3B8h case    6:*/		regs.R4 = regs.R30;
		/* 8215C3B8h case    6:*/		return 0x8215C3BC;
		  /* 8215C3BCh */ case    7:  		/* lwz R3, <#[R30 + 4]> */
		/* 8215C3BCh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 8215C3BCh case    7:*/		return 0x8215C3C0;
		  /* 8215C3C0h */ case    8:  		/* mtspr CTR, R11 */
		/* 8215C3C0h case    8:*/		regs.CTR = regs.R11;
		/* 8215C3C0h case    8:*/		return 0x8215C3C4;
		  /* 8215C3C4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8215C3C4h case    9:*/		if ( 1 ) { regs.LR = 0x8215C3C8; return (uint32)regs.CTR; }
		/* 8215C3C4h case    9:*/		return 0x8215C3C8;
	}
	return 0x8215C3C8;
} // Block from 8215C3A0h-8215C3C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C3C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C3C8);
		  /* 8215C3C8h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215C3C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215C3C8h case    0:*/		return 0x8215C3CC;
		  /* 8215C3CCh */ case    1:  		/* b -831792 */
		/* 8215C3CCh case    1:*/		return 0x8209129C;
		/* 8215C3CCh case    1:*/		return 0x8215C3D0;
	}
	return 0x8215C3D0;
} // Block from 8215C3C8h-8215C3D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215C3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C3D0);
		  /* 8215C3D0h */ case    0:  		/* mfspr R12, LR */
		/* 8215C3D0h case    0:*/		regs.R12 = regs.LR;
		/* 8215C3D0h case    0:*/		return 0x8215C3D4;
		  /* 8215C3D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C3D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C3D4h case    1:*/		return 0x8215C3D8;
		  /* 8215C3D8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C3D8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C3D8h case    2:*/		return 0x8215C3DC;
		  /* 8215C3DCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C3DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C3DCh case    3:*/		return 0x8215C3E0;
		  /* 8215C3E0h */ case    4:  		/* mr R31, R3 */
		/* 8215C3E0h case    4:*/		regs.R31 = regs.R3;
		/* 8215C3E0h case    4:*/		return 0x8215C3E4;
		  /* 8215C3E4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215C3E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C3E4h case    5:*/		return 0x8215C3E8;
		  /* 8215C3E8h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215C3E8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215C40C;  }
		/* 8215C3E8h case    6:*/		return 0x8215C3EC;
		  /* 8215C3ECh */ case    7:  		/* lis R11, -32252 */
		/* 8215C3ECh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C3ECh case    7:*/		return 0x8215C3F0;
		  /* 8215C3F0h */ case    8:  		/* lis R10, -32252 */
		/* 8215C3F0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C3F0h case    8:*/		return 0x8215C3F4;
		  /* 8215C3F4h */ case    9:  		/* lis R9, -32253 */
		/* 8215C3F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C3F4h case    9:*/		return 0x8215C3F8;
		  /* 8215C3F8h */ case   10:  		/* addi R6, R11, -21920 */
		/* 8215C3F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C3F8h case   10:*/		return 0x8215C3FC;
		  /* 8215C3FCh */ case   11:  		/* addi R5, R10, -21400 */
		/* 8215C3FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC68);
		/* 8215C3FCh case   11:*/		return 0x8215C400;
		  /* 8215C400h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215C400h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C400h case   12:*/		return 0x8215C404;
		  /* 8215C404h */ case   13:  		/* li R7, 2334 */
		/* 8215C404h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x91E);
		/* 8215C404h case   13:*/		return 0x8215C408;
		  /* 8215C408h */ case   14:  		/* bl -18432 */
		/* 8215C408h case   14:*/		regs.LR = 0x8215C40C; return 0x82157C08;
		/* 8215C408h case   14:*/		return 0x8215C40C;
	}
	return 0x8215C40C;
} // Block from 8215C3D0h-8215C40Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215C40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C40C);
		  /* 8215C40Ch */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215C40Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C40Ch case    0:*/		return 0x8215C410;
		  /* 8215C410h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C410h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C410h case    1:*/		return 0x8215C414;
		  /* 8215C414h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C414h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C414h case    2:*/		return 0x8215C418;
	}
	return 0x8215C418;
} // Block from 8215C40Ch-8215C418h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C418h
// Function '?OLIST_DestroyList@XGRAPHICS@@YAXPAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C418);
		  /* 8215C418h */ case    0:  		/* mtspr LR, R12 */
		/* 8215C418h case    0:*/		regs.LR = regs.R12;
		/* 8215C418h case    0:*/		return 0x8215C41C;
		  /* 8215C41Ch */ case    1:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C41Ch case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C41Ch case    1:*/		return 0x8215C420;
		  /* 8215C420h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8215C420h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C420h case    2:*/		return 0x8215C424;
	}
	return 0x8215C424;
} // Block from 8215C418h-8215C424h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C424);
		  /* 8215C424h */ case    0:  		/* nop */
		/* 8215C424h case    0:*/		cpu::op::nop();
		/* 8215C424h case    0:*/		return 0x8215C428;
	}
	return 0x8215C428;
} // Block from 8215C424h-8215C428h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C428);
		  /* 8215C428h */ case    0:  		/* mfspr R12, LR */
		/* 8215C428h case    0:*/		regs.R12 = regs.LR;
		/* 8215C428h case    0:*/		return 0x8215C42C;
		  /* 8215C42Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C42Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C42Ch case    1:*/		return 0x8215C430;
		  /* 8215C430h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C430h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C430h case    2:*/		return 0x8215C434;
		  /* 8215C434h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C434h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C434h case    3:*/		return 0x8215C438;
		  /* 8215C438h */ case    4:  		/* mr R11, R6 */
		/* 8215C438h case    4:*/		regs.R11 = regs.R6;
		/* 8215C438h case    4:*/		return 0x8215C43C;
		  /* 8215C43Ch */ case    5:  		/* mr R6, R5 */
		/* 8215C43Ch case    5:*/		regs.R6 = regs.R5;
		/* 8215C43Ch case    5:*/		return 0x8215C440;
		  /* 8215C440h */ case    6:  		/* mr R7, R3 */
		/* 8215C440h case    6:*/		regs.R7 = regs.R3;
		/* 8215C440h case    6:*/		return 0x8215C444;
		  /* 8215C444h */ case    7:  		/* mr R5, R4 */
		/* 8215C444h case    7:*/		regs.R5 = regs.R4;
		/* 8215C444h case    7:*/		return 0x8215C448;
		  /* 8215C448h */ case    8:  		/* li R4, 28 */
		/* 8215C448h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8215C448h case    8:*/		return 0x8215C44C;
		  /* 8215C44Ch */ case    9:  		/* mr R3, R11 */
		/* 8215C44Ch case    9:*/		regs.R3 = regs.R11;
		/* 8215C44Ch case    9:*/		return 0x8215C450;
		  /* 8215C450h */ case   10:  		/* bl 717696 */
		/* 8215C450h case   10:*/		regs.LR = 0x8215C454; return 0x8220B7D0;
		/* 8215C450h case   10:*/		return 0x8215C454;
		  /* 8215C454h */ case   11:  		/* or. R31, R3, R3 */
		/* 8215C454h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215C454h case   11:*/		return 0x8215C458;
		  /* 8215C458h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215C458h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215C480;  }
		/* 8215C458h case   12:*/		return 0x8215C45C;
		  /* 8215C45Ch */ case   13:  		/* lis R11, -32252 */
		/* 8215C45Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C45Ch case   13:*/		return 0x8215C460;
		  /* 8215C460h */ case   14:  		/* lis R10, -32252 */
		/* 8215C460h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C460h case   14:*/		return 0x8215C464;
		  /* 8215C464h */ case   15:  		/* lis R9, -32253 */
		/* 8215C464h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C464h case   15:*/		return 0x8215C468;
		  /* 8215C468h */ case   16:  		/* addi R6, R11, -21920 */
		/* 8215C468h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C468h case   16:*/		return 0x8215C46C;
		  /* 8215C46Ch */ case   17:  		/* addi R5, R10, -21480 */
		/* 8215C46Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215C46Ch case   17:*/		return 0x8215C470;
		  /* 8215C470h */ case   18:  		/* addi R4, R9, 27460 */
		/* 8215C470h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C470h case   18:*/		return 0x8215C474;
		  /* 8215C474h */ case   19:  		/* li R7, 2712 */
		/* 8215C474h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xA98);
		/* 8215C474h case   19:*/		return 0x8215C478;
		  /* 8215C478h */ case   20:  		/* li R3, 0 */
		/* 8215C478h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C478h case   20:*/		return 0x8215C47C;
		  /* 8215C47Ch */ case   21:  		/* bl -18548 */
		/* 8215C47Ch case   21:*/		regs.LR = 0x8215C480; return 0x82157C08;
		/* 8215C47Ch case   21:*/		return 0x8215C480;
	}
	return 0x8215C480;
} // Block from 8215C428h-8215C480h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215C480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C480);
		  /* 8215C480h */ case    0:  		/* mr R3, R31 */
		/* 8215C480h case    0:*/		regs.R3 = regs.R31;
		/* 8215C480h case    0:*/		return 0x8215C484;
		  /* 8215C484h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C484h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C484h case    1:*/		return 0x8215C488;
		  /* 8215C488h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C488h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C488h case    2:*/		return 0x8215C48C;
		  /* 8215C48Ch */ case    3:  		/* mtspr LR, R12 */
		/* 8215C48Ch case    3:*/		regs.LR = regs.R12;
		/* 8215C48Ch case    3:*/		return 0x8215C490;
		  /* 8215C490h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C490h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C490h case    4:*/		return 0x8215C494;
		  /* 8215C494h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C494h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C494h case    5:*/		return 0x8215C498;
	}
	return 0x8215C498;
} // Block from 8215C480h-8215C498h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C498);
		  /* 8215C498h */ case    0:  		/* mfspr R12, LR */
		/* 8215C498h case    0:*/		regs.R12 = regs.LR;
		/* 8215C498h case    0:*/		return 0x8215C49C;
		  /* 8215C49Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C49Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C49Ch case    1:*/		return 0x8215C4A0;
		  /* 8215C4A0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C4A0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C4A0h case    2:*/		return 0x8215C4A4;
		  /* 8215C4A4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C4A4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C4A4h case    3:*/		return 0x8215C4A8;
		  /* 8215C4A8h */ case    4:  		/* mr R11, R6 */
		/* 8215C4A8h case    4:*/		regs.R11 = regs.R6;
		/* 8215C4A8h case    4:*/		return 0x8215C4AC;
		  /* 8215C4ACh */ case    5:  		/* mr R6, R5 */
		/* 8215C4ACh case    5:*/		regs.R6 = regs.R5;
		/* 8215C4ACh case    5:*/		return 0x8215C4B0;
		  /* 8215C4B0h */ case    6:  		/* mr R7, R3 */
		/* 8215C4B0h case    6:*/		regs.R7 = regs.R3;
		/* 8215C4B0h case    6:*/		return 0x8215C4B4;
		  /* 8215C4B4h */ case    7:  		/* mr R5, R4 */
		/* 8215C4B4h case    7:*/		regs.R5 = regs.R4;
		/* 8215C4B4h case    7:*/		return 0x8215C4B8;
		  /* 8215C4B8h */ case    8:  		/* li R4, 16 */
		/* 8215C4B8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8215C4B8h case    8:*/		return 0x8215C4BC;
		  /* 8215C4BCh */ case    9:  		/* mr R3, R11 */
		/* 8215C4BCh case    9:*/		regs.R3 = regs.R11;
		/* 8215C4BCh case    9:*/		return 0x8215C4C0;
		  /* 8215C4C0h */ case   10:  		/* bl 717584 */
		/* 8215C4C0h case   10:*/		regs.LR = 0x8215C4C4; return 0x8220B7D0;
		/* 8215C4C0h case   10:*/		return 0x8215C4C4;
		  /* 8215C4C4h */ case   11:  		/* or. R31, R3, R3 */
		/* 8215C4C4h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215C4C4h case   11:*/		return 0x8215C4C8;
		  /* 8215C4C8h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215C4C8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215C4F0;  }
		/* 8215C4C8h case   12:*/		return 0x8215C4CC;
		  /* 8215C4CCh */ case   13:  		/* lis R11, -32252 */
		/* 8215C4CCh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C4CCh case   13:*/		return 0x8215C4D0;
		  /* 8215C4D0h */ case   14:  		/* lis R10, -32252 */
		/* 8215C4D0h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C4D0h case   14:*/		return 0x8215C4D4;
		  /* 8215C4D4h */ case   15:  		/* lis R9, -32253 */
		/* 8215C4D4h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C4D4h case   15:*/		return 0x8215C4D8;
		  /* 8215C4D8h */ case   16:  		/* addi R6, R11, -21920 */
		/* 8215C4D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C4D8h case   16:*/		return 0x8215C4DC;
		  /* 8215C4DCh */ case   17:  		/* addi R5, R10, -21480 */
		/* 8215C4DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215C4DCh case   17:*/		return 0x8215C4E0;
		  /* 8215C4E0h */ case   18:  		/* addi R4, R9, 27460 */
		/* 8215C4E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C4E0h case   18:*/		return 0x8215C4E4;
		  /* 8215C4E4h */ case   19:  		/* li R7, 2753 */
		/* 8215C4E4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xAC1);
		/* 8215C4E4h case   19:*/		return 0x8215C4E8;
		  /* 8215C4E8h */ case   20:  		/* li R3, 0 */
		/* 8215C4E8h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C4E8h case   20:*/		return 0x8215C4EC;
		  /* 8215C4ECh */ case   21:  		/* bl -18660 */
		/* 8215C4ECh case   21:*/		regs.LR = 0x8215C4F0; return 0x82157C08;
		/* 8215C4ECh case   21:*/		return 0x8215C4F0;
	}
	return 0x8215C4F0;
} // Block from 8215C498h-8215C4F0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215C4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C4F0);
		  /* 8215C4F0h */ case    0:  		/* mr R3, R31 */
		/* 8215C4F0h case    0:*/		regs.R3 = regs.R31;
		/* 8215C4F0h case    0:*/		return 0x8215C4F4;
		  /* 8215C4F4h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C4F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C4F4h case    1:*/		return 0x8215C4F8;
		  /* 8215C4F8h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C4F8h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C4F8h case    2:*/		return 0x8215C4FC;
		  /* 8215C4FCh */ case    3:  		/* mtspr LR, R12 */
		/* 8215C4FCh case    3:*/		regs.LR = regs.R12;
		/* 8215C4FCh case    3:*/		return 0x8215C500;
		  /* 8215C500h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C500h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C500h case    4:*/		return 0x8215C504;
		  /* 8215C504h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C504h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C504h case    5:*/		return 0x8215C508;
	}
	return 0x8215C508;
} // Block from 8215C4F0h-8215C508h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C508);
		  /* 8215C508h */ case    0:  		/* mfspr R12, LR */
		/* 8215C508h case    0:*/		regs.R12 = regs.LR;
		/* 8215C508h case    0:*/		return 0x8215C50C;
		  /* 8215C50Ch */ case    1:  		/* bl -832180 */
		/* 8215C50Ch case    1:*/		regs.LR = 0x8215C510; return 0x82091258;
		/* 8215C50Ch case    1:*/		return 0x8215C510;
		  /* 8215C510h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C510h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C510h case    2:*/		return 0x8215C514;
		  /* 8215C514h */ case    3:  		/* lis R11, -32253 */
		/* 8215C514h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C514h case    3:*/		return 0x8215C518;
		  /* 8215C518h */ case    4:  		/* lis R10, -32252 */
		/* 8215C518h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C518h case    4:*/		return 0x8215C51C;
		  /* 8215C51Ch */ case    5:  		/* mr R31, R3 */
		/* 8215C51Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215C51Ch case    5:*/		return 0x8215C520;
		  /* 8215C520h */ case    6:  		/* mr R28, R4 */
		/* 8215C520h case    6:*/		regs.R28 = regs.R4;
		/* 8215C520h case    6:*/		return 0x8215C524;
		  /* 8215C524h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215C524h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C524h case    7:*/		return 0x8215C528;
	}
	return 0x8215C528;
} // Block from 8215C508h-8215C528h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215C528h
// Function '?OLIST_InsertItem@XGRAPHICS@@YAXPAU_KEY_LIST@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C528);
		  /* 8215C528h */ case    0:  		/* addi R30, R11, 27460 */
		/* 8215C528h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215C528h case    0:*/		return 0x8215C52C;
		  /* 8215C52Ch */ case    1:  		/* addi R29, R10, -21920 */
		/* 8215C52Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215C52Ch case    1:*/		return 0x8215C530;
		  /* 8215C530h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C530h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C550;  }
		/* 8215C530h case    2:*/		return 0x8215C534;
		  /* 8215C534h */ case    3:  		/* lis R11, -32252 */
		/* 8215C534h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C534h case    3:*/		return 0x8215C538;
		  /* 8215C538h */ case    4:  		/* mr R6, R29 */
		/* 8215C538h case    4:*/		regs.R6 = regs.R29;
		/* 8215C538h case    4:*/		return 0x8215C53C;
		  /* 8215C53Ch */ case    5:  		/* addi R5, R11, -21312 */
		/* 8215C53Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215C53Ch case    5:*/		return 0x8215C540;
		  /* 8215C540h */ case    6:  		/* mr R4, R30 */
		/* 8215C540h case    6:*/		regs.R4 = regs.R30;
		/* 8215C540h case    6:*/		return 0x8215C544;
		  /* 8215C544h */ case    7:  		/* li R7, 2913 */
		/* 8215C544h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xB61);
		/* 8215C544h case    7:*/		return 0x8215C548;
		  /* 8215C548h */ case    8:  		/* li R3, 0 */
		/* 8215C548h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C548h case    8:*/		return 0x8215C54C;
		  /* 8215C54Ch */ case    9:  		/* bl -18756 */
		/* 8215C54Ch case    9:*/		regs.LR = 0x8215C550; return 0x82157C08;
		/* 8215C54Ch case    9:*/		return 0x8215C550;
	}
	return 0x8215C550;
} // Block from 8215C528h-8215C550h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C550);
		  /* 8215C550h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215C550h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215C550h case    0:*/		return 0x8215C554;
		  /* 8215C554h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C554h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215C574;  }
		/* 8215C554h case    1:*/		return 0x8215C558;
		  /* 8215C558h */ case    2:  		/* lis R11, -32252 */
		/* 8215C558h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C558h case    2:*/		return 0x8215C55C;
		  /* 8215C55Ch */ case    3:  		/* mr R6, R29 */
		/* 8215C55Ch case    3:*/		regs.R6 = regs.R29;
		/* 8215C55Ch case    3:*/		return 0x8215C560;
		  /* 8215C560h */ case    4:  		/* addi R5, R11, -21480 */
		/* 8215C560h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC18);
		/* 8215C560h case    4:*/		return 0x8215C564;
		  /* 8215C564h */ case    5:  		/* mr R4, R30 */
		/* 8215C564h case    5:*/		regs.R4 = regs.R30;
		/* 8215C564h case    5:*/		return 0x8215C568;
		  /* 8215C568h */ case    6:  		/* li R7, 2914 */
		/* 8215C568h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xB62);
		/* 8215C568h case    6:*/		return 0x8215C56C;
		  /* 8215C56Ch */ case    7:  		/* li R3, 0 */
		/* 8215C56Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C56Ch case    7:*/		return 0x8215C570;
		  /* 8215C570h */ case    8:  		/* bl -18792 */
		/* 8215C570h case    8:*/		regs.LR = 0x8215C574; return 0x82157C08;
		/* 8215C570h case    8:*/		return 0x8215C574;
	}
	return 0x8215C574;
} // Block from 8215C550h-8215C574h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215C574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C574);
		  /* 8215C574h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C574h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C574h case    0:*/		return 0x8215C578;
		  /* 8215C578h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215C578h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C578h case    1:*/		return 0x8215C57C;
		  /* 8215C57Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215C57Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215C59C;  }
		/* 8215C57Ch case    2:*/		return 0x8215C580;
		  /* 8215C580h */ case    3:  		/* lis R11, -32252 */
		/* 8215C580h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C580h case    3:*/		return 0x8215C584;
		  /* 8215C584h */ case    4:  		/* mr R6, R29 */
		/* 8215C584h case    4:*/		regs.R6 = regs.R29;
		/* 8215C584h case    4:*/		return 0x8215C588;
		  /* 8215C588h */ case    5:  		/* addi R5, R11, -21336 */
		/* 8215C588h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACA8);
		/* 8215C588h case    5:*/		return 0x8215C58C;
		  /* 8215C58Ch */ case    6:  		/* mr R4, R30 */
		/* 8215C58Ch case    6:*/		regs.R4 = regs.R30;
		/* 8215C58Ch case    6:*/		return 0x8215C590;
		  /* 8215C590h */ case    7:  		/* li R7, 2917 */
		/* 8215C590h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xB65);
		/* 8215C590h case    7:*/		return 0x8215C594;
		  /* 8215C594h */ case    8:  		/* li R3, 0 */
		/* 8215C594h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C594h case    8:*/		return 0x8215C598;
		  /* 8215C598h */ case    9:  		/* bl -18832 */
		/* 8215C598h case    9:*/		regs.LR = 0x8215C59C; return 0x82157C08;
		/* 8215C598h case    9:*/		return 0x8215C59C;
	}
	return 0x8215C59C;
} // Block from 8215C574h-8215C59Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C59C);
		  /* 8215C59Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C59Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C59Ch case    0:*/		return 0x8215C5A0;
		  /* 8215C5A0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215C5A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C5A0h case    1:*/		return 0x8215C5A4;
		  /* 8215C5A4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215C5A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215C5C4;  }
		/* 8215C5A4h case    2:*/		return 0x8215C5A8;
		  /* 8215C5A8h */ case    3:  		/* lis R11, -32252 */
		/* 8215C5A8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C5A8h case    3:*/		return 0x8215C5AC;
		  /* 8215C5ACh */ case    4:  		/* mr R6, R29 */
		/* 8215C5ACh case    4:*/		regs.R6 = regs.R29;
		/* 8215C5ACh case    4:*/		return 0x8215C5B0;
		  /* 8215C5B0h */ case    5:  		/* addi R5, R11, -21356 */
		/* 8215C5B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC94);
		/* 8215C5B0h case    5:*/		return 0x8215C5B4;
		  /* 8215C5B4h */ case    6:  		/* mr R4, R30 */
		/* 8215C5B4h case    6:*/		regs.R4 = regs.R30;
		/* 8215C5B4h case    6:*/		return 0x8215C5B8;
		  /* 8215C5B8h */ case    7:  		/* li R7, 2918 */
		/* 8215C5B8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xB66);
		/* 8215C5B8h case    7:*/		return 0x8215C5BC;
		  /* 8215C5BCh */ case    8:  		/* li R3, 0 */
		/* 8215C5BCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C5BCh case    8:*/		return 0x8215C5C0;
		  /* 8215C5C0h */ case    9:  		/* bl -18872 */
		/* 8215C5C0h case    9:*/		regs.LR = 0x8215C5C4; return 0x82157C08;
		/* 8215C5C0h case    9:*/		return 0x8215C5C4;
	}
	return 0x8215C5C4;
} // Block from 8215C59Ch-8215C5C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C5C4);
		  /* 8215C5C4h */ case    0:  		/* stw R28, <#[R31]> */
		/* 8215C5C4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8215C5C4h case    0:*/		return 0x8215C5C8;
		  /* 8215C5C8h */ case    1:  		/* mr R3, R28 */
		/* 8215C5C8h case    1:*/		regs.R3 = regs.R28;
		/* 8215C5C8h case    1:*/		return 0x8215C5CC;
		  /* 8215C5CCh */ case    2:  		/* bl -5476 */
		/* 8215C5CCh case    2:*/		regs.LR = 0x8215C5D0; return 0x8215B068;
		/* 8215C5CCh case    2:*/		return 0x8215C5D0;
		  /* 8215C5D0h */ case    3:  		/* stw R3, <#[R31 + 16]> */
		/* 8215C5D0h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C5D0h case    3:*/		return 0x8215C5D4;
		  /* 8215C5D4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8215C5D4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215C5D4h case    4:*/		return 0x8215C5D8;
		  /* 8215C5D8h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 8215C5D8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215C5F4;  }
		/* 8215C5D8h case    5:*/		return 0x8215C5DC;
		  /* 8215C5DCh */ case    6:  		/* lis R11, -32252 */
		/* 8215C5DCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C5DCh case    6:*/		return 0x8215C5E0;
		  /* 8215C5E0h */ case    7:  		/* mr R6, R29 */
		/* 8215C5E0h case    7:*/		regs.R6 = regs.R29;
		/* 8215C5E0h case    7:*/		return 0x8215C5E4;
		  /* 8215C5E4h */ case    8:  		/* addi R5, R11, -21376 */
		/* 8215C5E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC80);
		/* 8215C5E4h case    8:*/		return 0x8215C5E8;
		  /* 8215C5E8h */ case    9:  		/* mr R4, R30 */
		/* 8215C5E8h case    9:*/		regs.R4 = regs.R30;
		/* 8215C5E8h case    9:*/		return 0x8215C5EC;
		  /* 8215C5ECh */ case   10:  		/* li R7, 2927 */
		/* 8215C5ECh case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xB6F);
		/* 8215C5ECh case   10:*/		return 0x8215C5F0;
		  /* 8215C5F0h */ case   11:  		/* bl -18920 */
		/* 8215C5F0h case   11:*/		regs.LR = 0x8215C5F4; return 0x82157C08;
		/* 8215C5F0h case   11:*/		return 0x8215C5F4;
	}
	return 0x8215C5F4;
} // Block from 8215C5C4h-8215C5F4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215C5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C5F4);
		  /* 8215C5F4h */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C5F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C5F4h case    0:*/		return 0x8215C5F8;
		  /* 8215C5F8h */ case    1:  		/* li R11, 0 */
		/* 8215C5F8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215C5F8h case    1:*/		return 0x8215C5FC;
		  /* 8215C5FCh */ case    2:  		/* li R9, 1 */
		/* 8215C5FCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8215C5FCh case    2:*/		return 0x8215C600;
		  /* 8215C600h */ case    3:  		/* stw R11, <#[R10 + 12]> */
		/* 8215C600h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8215C600h case    3:*/		return 0x8215C604;
		  /* 8215C604h */ case    4:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C604h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C604h case    4:*/		return 0x8215C608;
		  /* 8215C608h */ case    5:  		/* stw R10, <#[R10 + 8]> */
		/* 8215C608h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8215C608h case    5:*/		return 0x8215C60C;
		  /* 8215C60Ch */ case    6:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215C60Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C60Ch case    6:*/		return 0x8215C610;
		  /* 8215C610h */ case    7:  		/* stw R10, <#[R10 + 4]> */
		/* 8215C610h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8215C610h case    7:*/		return 0x8215C614;
		  /* 8215C614h */ case    8:  		/* stw R11, <#[R31 + 20]> */
		/* 8215C614h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C614h case    8:*/		return 0x8215C618;
		  /* 8215C618h */ case    9:  		/* stw R9, <#[R31 + 24]> */
		/* 8215C618h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8215C618h case    9:*/		return 0x8215C61C;
		  /* 8215C61Ch */ case   10:  		/* addi R1, R1, 128 */
		/* 8215C61Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C61Ch case   10:*/		return 0x8215C620;
		  /* 8215C620h */ case   11:  		/* b -832376 */
		/* 8215C620h case   11:*/		return 0x820912A8;
		/* 8215C620h case   11:*/		return 0x8215C624;
		  /* 8215C624h */ case   12:  		/* nop */
		/* 8215C624h case   12:*/		cpu::op::nop();
		/* 8215C624h case   12:*/		return 0x8215C628;
	}
	return 0x8215C628;
} // Block from 8215C5F4h-8215C628h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215C628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C628);
		  /* 8215C628h */ case    0:  		/* mfspr R12, LR */
		/* 8215C628h case    0:*/		regs.R12 = regs.LR;
		/* 8215C628h case    0:*/		return 0x8215C62C;
		  /* 8215C62Ch */ case    1:  		/* bl -832476 */
		/* 8215C62Ch case    1:*/		regs.LR = 0x8215C630; return 0x82091250;
		/* 8215C62Ch case    1:*/		return 0x8215C630;
		  /* 8215C630h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215C630h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215C630h case    2:*/		return 0x8215C634;
		  /* 8215C634h */ case    3:  		/* lis R11, -32253 */
		/* 8215C634h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C634h case    3:*/		return 0x8215C638;
		  /* 8215C638h */ case    4:  		/* lis R9, -32252 */
		/* 8215C638h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8215C638h case    4:*/		return 0x8215C63C;
		  /* 8215C63Ch */ case    5:  		/* addi R28, R11, 27460 */
		/* 8215C63Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215C63Ch case    5:*/		return 0x8215C640;
		  /* 8215C640h */ case    6:  		/* lwz R11, <#[R3 + 16]> */
		/* 8215C640h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8215C640h case    6:*/		return 0x8215C644;
		  /* 8215C644h */ case    7:  		/* lis R10, -32252 */
		/* 8215C644h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C644h case    7:*/		return 0x8215C648;
	}
	return 0x8215C648;
} // Block from 8215C628h-8215C648h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215C648h
// Function '?OLIST_Search@XGRAPHICS@@YAPAU_KEY_LIST_ITEM@1@PAU21@0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C648);
		  /* 8215C648h */ case    0:  		/* mr R31, R3 */
		/* 8215C648h case    0:*/		regs.R31 = regs.R3;
		/* 8215C648h case    0:*/		return 0x8215C64C;
		  /* 8215C64Ch */ case    1:  		/* addi R27, R9, -21604 */
		/* 8215C64Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0xFFFFAB9C);
		/* 8215C64Ch case    1:*/		return 0x8215C650;
		  /* 8215C650h */ case    2:  		/* addi R26, R10, -21920 */
		/* 8215C650h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215C650h case    2:*/		return 0x8215C654;
		  /* 8215C654h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8215C654h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C654h case    3:*/		return 0x8215C658;
		  /* 8215C658h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 8215C658h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8215C664;  }
		/* 8215C658h case    4:*/		return 0x8215C65C;
		  /* 8215C65Ch */ case    5:  		/* li R30, 0 */
		/* 8215C65Ch case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215C65Ch case    5:*/		return 0x8215C660;
		  /* 8215C660h */ case    6:  		/* b 16 */
		/* 8215C660h case    6:*/		return 0x8215C670;
		/* 8215C660h case    6:*/		return 0x8215C664;
	}
	return 0x8215C664;
} // Block from 8215C648h-8215C664h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215C664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C664);
		  /* 8215C664h */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215C664h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215C664h case    0:*/		return 0x8215C668;
		  /* 8215C668h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215C668h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215C668h case    1:*/		return 0x8215C66C;
		  /* 8215C66Ch */ case    2:  		/* bc 4, CR6_EQ, 124 */
		/* 8215C66Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C6E8;  }
		/* 8215C66Ch case    2:*/		return 0x8215C670;
	}
	return 0x8215C670;
} // Block from 8215C664h-8215C670h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C670);
		  /* 8215C670h */ case    0:  		/* mr R6, R26 */
		/* 8215C670h case    0:*/		regs.R6 = regs.R26;
		/* 8215C670h case    0:*/		return 0x8215C674;
		  /* 8215C674h */ case    1:  		/* mr R5, R27 */
		/* 8215C674h case    1:*/		regs.R5 = regs.R27;
		/* 8215C674h case    1:*/		return 0x8215C678;
		  /* 8215C678h */ case    2:  		/* mr R4, R28 */
		/* 8215C678h case    2:*/		regs.R4 = regs.R28;
		/* 8215C678h case    2:*/		return 0x8215C67C;
		  /* 8215C67Ch */ case    3:  		/* li R7, 2964 */
		/* 8215C67Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xB94);
		/* 8215C67Ch case    3:*/		return 0x8215C680;
		  /* 8215C680h */ case    4:  		/* li R3, 0 */
		/* 8215C680h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C680h case    4:*/		return 0x8215C684;
		  /* 8215C684h */ case    5:  		/* bl -19068 */
		/* 8215C684h case    5:*/		regs.LR = 0x8215C688; return 0x82157C08;
		/* 8215C684h case    5:*/		return 0x8215C688;
		  /* 8215C688h */ case    6:  		/* b 96 */
		/* 8215C688h case    6:*/		return 0x8215C6E8;
		/* 8215C688h case    6:*/		return 0x8215C68C;
		  /* 8215C68Ch */ case    7:  		/* mr R29, R30 */
		/* 8215C68Ch case    7:*/		regs.R29 = regs.R30;
		/* 8215C68Ch case    7:*/		return 0x8215C690;
		  /* 8215C690h */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 8215C690h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215C690h case    8:*/		return 0x8215C694;
		  /* 8215C694h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8215C694h case    9:*/		if ( regs.CR[6].eq ) { return 0x8215C6A4;  }
		/* 8215C694h case    9:*/		return 0x8215C698;
		  /* 8215C698h */ case   10:  		/* lwz R30, <#[R30 + 8]> */
		/* 8215C698h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8215C698h case   10:*/		return 0x8215C69C;
		  /* 8215C69Ch */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 8215C69Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215C69Ch case   11:*/		return 0x8215C6A0;
		  /* 8215C6A0h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8215C6A0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215C6BC;  }
		/* 8215C6A0h case   12:*/		return 0x8215C6A4;
	}
	return 0x8215C6A4;
} // Block from 8215C670h-8215C6A4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215C6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C6A4);
		  /* 8215C6A4h */ case    0:  		/* mr R6, R26 */
		/* 8215C6A4h case    0:*/		regs.R6 = regs.R26;
		/* 8215C6A4h case    0:*/		return 0x8215C6A8;
		  /* 8215C6A8h */ case    1:  		/* mr R5, R27 */
		/* 8215C6A8h case    1:*/		regs.R5 = regs.R27;
		/* 8215C6A8h case    1:*/		return 0x8215C6AC;
		  /* 8215C6ACh */ case    2:  		/* mr R4, R28 */
		/* 8215C6ACh case    2:*/		regs.R4 = regs.R28;
		/* 8215C6ACh case    2:*/		return 0x8215C6B0;
		  /* 8215C6B0h */ case    3:  		/* li R7, 2973 */
		/* 8215C6B0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xB9D);
		/* 8215C6B0h case    3:*/		return 0x8215C6B4;
		  /* 8215C6B4h */ case    4:  		/* li R3, 0 */
		/* 8215C6B4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C6B4h case    4:*/		return 0x8215C6B8;
		  /* 8215C6B8h */ case    5:  		/* bl -19120 */
		/* 8215C6B8h case    5:*/		regs.LR = 0x8215C6BC; return 0x82157C08;
		/* 8215C6B8h case    5:*/		return 0x8215C6BC;
	}
	return 0x8215C6BC;
} // Block from 8215C6A4h-8215C6BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C6BC);
		  /* 8215C6BCh */ case    0:  		/* mr R3, R29 */
		/* 8215C6BCh case    0:*/		regs.R3 = regs.R29;
		/* 8215C6BCh case    0:*/		return 0x8215C6C0;
		  /* 8215C6C0h */ case    1:  		/* bl -5136 */
		/* 8215C6C0h case    1:*/		regs.LR = 0x8215C6C4; return 0x8215B2B0;
		/* 8215C6C0h case    1:*/		return 0x8215C6C4;
		  /* 8215C6C4h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215C6C4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215C6C4h case    2:*/		return 0x8215C6C8;
		  /* 8215C6C8h */ case    3:  		/* mr R29, R3 */
		/* 8215C6C8h case    3:*/		regs.R29 = regs.R3;
		/* 8215C6C8h case    3:*/		return 0x8215C6CC;
		  /* 8215C6CCh */ case    4:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215C6CCh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215C6CCh case    4:*/		return 0x8215C6D0;
		  /* 8215C6D0h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215C6D0h case    5:*/		regs.CTR = regs.R11;
		/* 8215C6D0h case    5:*/		return 0x8215C6D4;
		  /* 8215C6D4h */ case    6:  		/* lwz R4, <#[R29 + 12]> */
		/* 8215C6D4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215C6D4h case    6:*/		return 0x8215C6D8;
		  /* 8215C6D8h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8215C6D8h case    7:*/		if ( 1 ) { regs.LR = 0x8215C6DC; return (uint32)regs.CTR; }
		/* 8215C6D8h case    7:*/		return 0x8215C6DC;
		  /* 8215C6DCh */ case    8:  		/* mr R4, R29 */
		/* 8215C6DCh case    8:*/		regs.R4 = regs.R29;
		/* 8215C6DCh case    8:*/		return 0x8215C6E0;
		  /* 8215C6E0h */ case    9:  		/* lwz R3, <#[R29]> */
		/* 8215C6E0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8215C6E0h case    9:*/		return 0x8215C6E4;
		  /* 8215C6E4h */ case   10:  		/* bl 717588 */
		/* 8215C6E4h case   10:*/		regs.LR = 0x8215C6E8; return 0x8220B9F8;
		/* 8215C6E4h case   10:*/		return 0x8215C6E8;
	}
	return 0x8215C6E8;
} // Block from 8215C6BCh-8215C6E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215C6E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C6E8);
		  /* 8215C6E8h */ case    0:  		/* lwz R4, <#[R31 + 16]> */
		/* 8215C6E8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C6E8h case    0:*/		return 0x8215C6EC;
		  /* 8215C6ECh */ case    1:  		/* cmplw CR6, R30, R4 */
		/* 8215C6ECh case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8215C6ECh case    1:*/		return 0x8215C6F0;
		  /* 8215C6F0h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 8215C6F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C68C;  }
		/* 8215C6F0h case    2:*/		return 0x8215C6F4;
		  /* 8215C6F4h */ case    3:  		/* cmplwi CR0, R4, 0 */
		/* 8215C6F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8215C6F4h case    3:*/		return 0x8215C6F8;
		  /* 8215C6F8h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8215C6F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8215C704;  }
		/* 8215C6F8h case    4:*/		return 0x8215C6FC;
		  /* 8215C6FCh */ case    5:  		/* lwz R3, <#[R4]> */
		/* 8215C6FCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215C6FCh case    5:*/		return 0x8215C700;
		  /* 8215C700h */ case    6:  		/* bl 717560 */
		/* 8215C700h case    6:*/		regs.LR = 0x8215C704; return 0x8220B9F8;
		/* 8215C700h case    6:*/		return 0x8215C704;
	}
	return 0x8215C704;
} // Block from 8215C6E8h-8215C704h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215C704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C704);
		  /* 8215C704h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215C704h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215C704h case    0:*/		return 0x8215C708;
		  /* 8215C708h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215C708h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C708h case    1:*/		return 0x8215C70C;
		  /* 8215C70Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C70Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C72C;  }
		/* 8215C70Ch case    2:*/		return 0x8215C710;
	}
	return 0x8215C710;
} // Block from 8215C704h-8215C710h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C710h
// Function '?OLIST_GetItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C710);
		  /* 8215C710h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215C710h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215C710h case    0:*/		return 0x8215C714;
		  /* 8215C714h */ case    1:  		/* bl 717180 */
		/* 8215C714h case    1:*/		regs.LR = 0x8215C718; return 0x8220B890;
		/* 8215C714h case    1:*/		return 0x8215C718;
		  /* 8215C718h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215C718h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215C718h case    2:*/		return 0x8215C71C;
		  /* 8215C71Ch */ case    3:  		/* mr R4, R31 */
		/* 8215C71Ch case    3:*/		regs.R4 = regs.R31;
		/* 8215C71Ch case    3:*/		return 0x8215C720;
		  /* 8215C720h */ case    4:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215C720h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215C720h case    4:*/		return 0x8215C724;
		  /* 8215C724h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215C724h case    5:*/		regs.CTR = regs.R11;
		/* 8215C724h case    5:*/		return 0x8215C728;
		  /* 8215C728h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8215C728h case    6:*/		if ( 1 ) { regs.LR = 0x8215C72C; return (uint32)regs.CTR; }
		/* 8215C728h case    6:*/		return 0x8215C72C;
	}
	return 0x8215C72C;
} // Block from 8215C710h-8215C72Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215C72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C72C);
		  /* 8215C72Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8215C72Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215C72Ch case    0:*/		return 0x8215C730;
		  /* 8215C730h */ case    1:  		/* b -832656 */
		/* 8215C730h case    1:*/		return 0x820912A0;
		/* 8215C730h case    1:*/		return 0x8215C734;
		  /* 8215C734h */ case    2:  		/* nop */
		/* 8215C734h case    2:*/		cpu::op::nop();
		/* 8215C734h case    2:*/		return 0x8215C738;
	}
	return 0x8215C738;
} // Block from 8215C72Ch-8215C738h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215C738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C738);
		  /* 8215C738h */ case    0:  		/* mfspr R12, LR */
		/* 8215C738h case    0:*/		regs.R12 = regs.LR;
		/* 8215C738h case    0:*/		return 0x8215C73C;
		  /* 8215C73Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215C73Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C73Ch case    1:*/		return 0x8215C740;
		  /* 8215C740h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215C740h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C740h case    2:*/		return 0x8215C744;
		  /* 8215C744h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215C744h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215C744h case    3:*/		return 0x8215C748;
		  /* 8215C748h */ case    4:  		/* mr R31, R3 */
		/* 8215C748h case    4:*/		regs.R31 = regs.R3;
		/* 8215C748h case    4:*/		return 0x8215C74C;
		  /* 8215C74Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215C74Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C74Ch case    5:*/		return 0x8215C750;
		  /* 8215C750h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215C750h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215C774;  }
		/* 8215C750h case    6:*/		return 0x8215C754;
		  /* 8215C754h */ case    7:  		/* lis R11, -32252 */
		/* 8215C754h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C754h case    7:*/		return 0x8215C758;
		  /* 8215C758h */ case    8:  		/* lis R10, -32252 */
		/* 8215C758h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C758h case    8:*/		return 0x8215C75C;
		  /* 8215C75Ch */ case    9:  		/* lis R9, -32253 */
		/* 8215C75Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215C75Ch case    9:*/		return 0x8215C760;
		  /* 8215C760h */ case   10:  		/* addi R6, R11, -21920 */
		/* 8215C760h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215C760h case   10:*/		return 0x8215C764;
		  /* 8215C764h */ case   11:  		/* addi R5, R10, -21312 */
		/* 8215C764h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFACC0);
		/* 8215C764h case   11:*/		return 0x8215C768;
		  /* 8215C768h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215C768h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215C768h case   12:*/		return 0x8215C76C;
		  /* 8215C76Ch */ case   13:  		/* li R7, 3010 */
		/* 8215C76Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xBC2);
		/* 8215C76Ch case   13:*/		return 0x8215C770;
		  /* 8215C770h */ case   14:  		/* bl -19304 */
		/* 8215C770h case   14:*/		regs.LR = 0x8215C774; return 0x82157C08;
		/* 8215C770h case   14:*/		return 0x8215C774;
	}
	return 0x8215C774;
} // Block from 8215C738h-8215C774h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215C774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C774);
		  /* 8215C774h */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215C774h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C774h case    0:*/		return 0x8215C778;
		  /* 8215C778h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215C778h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215C778h case    1:*/		return 0x8215C77C;
		  /* 8215C77Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215C77Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215C77Ch case    2:*/		return 0x8215C780;
		  /* 8215C780h */ case    3:  		/* mtspr LR, R12 */
		/* 8215C780h case    3:*/		regs.LR = regs.R12;
		/* 8215C780h case    3:*/		return 0x8215C784;
		  /* 8215C784h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215C784h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215C784h case    4:*/		return 0x8215C788;
		  /* 8215C788h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215C788h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215C788h case    5:*/		return 0x8215C78C;
	}
	return 0x8215C78C;
} // Block from 8215C774h-8215C78Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C78C);
		  /* 8215C78Ch */ case    0:  		/* nop */
		/* 8215C78Ch case    0:*/		cpu::op::nop();
		/* 8215C78Ch case    0:*/		return 0x8215C790;
	}
	return 0x8215C790;
} // Block from 8215C78Ch-8215C790h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215C790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C790);
		  /* 8215C790h */ case    0:  		/* mfspr R12, LR */
		/* 8215C790h case    0:*/		regs.R12 = regs.LR;
		/* 8215C790h case    0:*/		return 0x8215C794;
		  /* 8215C794h */ case    1:  		/* bl -832828 */
		/* 8215C794h case    1:*/		regs.LR = 0x8215C798; return 0x82091258;
		/* 8215C794h case    1:*/		return 0x8215C798;
		  /* 8215C798h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C798h case    2:*/		return 0x8215C79C;
		  /* 8215C79Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215C79Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C79Ch case    3:*/		return 0x8215C7A0;
		  /* 8215C7A0h */ case    4:  		/* lis R10, -32252 */
		/* 8215C7A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C7A0h case    4:*/		return 0x8215C7A4;
		  /* 8215C7A4h */ case    5:  		/* mr R31, R3 */
		/* 8215C7A4h case    5:*/		regs.R31 = regs.R3;
		/* 8215C7A4h case    5:*/		return 0x8215C7A8;
		  /* 8215C7A8h */ case    6:  		/* mr R28, R4 */
		/* 8215C7A8h case    6:*/		regs.R28 = regs.R4;
		/* 8215C7A8h case    6:*/		return 0x8215C7AC;
		  /* 8215C7ACh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215C7ACh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C7ACh case    7:*/		return 0x8215C7B0;
		  /* 8215C7B0h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8215C7B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215C7B0h case    8:*/		return 0x8215C7B4;
		  /* 8215C7B4h */ case    9:  		/* addi R29, R10, -21920 */
		/* 8215C7B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215C7B4h case    9:*/		return 0x8215C7B8;
		  /* 8215C7B8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C7B8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215C7D8;  }
		/* 8215C7B8h case   10:*/		return 0x8215C7BC;
		  /* 8215C7BCh */ case   11:  		/* lis R11, -32252 */
		/* 8215C7BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C7BCh case   11:*/		return 0x8215C7C0;
	}
	return 0x8215C7C0;
} // Block from 8215C790h-8215C7C0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215C7C0h
// Function '?OLIST_GetNextItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C7C0);
		  /* 8215C7C0h */ case    0:  		/* mr R6, R29 */
		/* 8215C7C0h case    0:*/		regs.R6 = regs.R29;
		/* 8215C7C0h case    0:*/		return 0x8215C7C4;
		  /* 8215C7C4h */ case    1:  		/* addi R5, R11, -21312 */
		/* 8215C7C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215C7C4h case    1:*/		return 0x8215C7C8;
		  /* 8215C7C8h */ case    2:  		/* mr R4, R30 */
		/* 8215C7C8h case    2:*/		regs.R4 = regs.R30;
		/* 8215C7C8h case    2:*/		return 0x8215C7CC;
		  /* 8215C7CCh */ case    3:  		/* li R7, 3031 */
		/* 8215C7CCh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xBD7);
		/* 8215C7CCh case    3:*/		return 0x8215C7D0;
		  /* 8215C7D0h */ case    4:  		/* li R3, 0 */
		/* 8215C7D0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C7D0h case    4:*/		return 0x8215C7D4;
		  /* 8215C7D4h */ case    5:  		/* bl -19404 */
		/* 8215C7D4h case    5:*/		regs.LR = 0x8215C7D8; return 0x82157C08;
		/* 8215C7D4h case    5:*/		return 0x8215C7D8;
	}
	return 0x8215C7D8;
} // Block from 8215C7C0h-8215C7D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C7D8);
		  /* 8215C7D8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215C7D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215C7D8h case    0:*/		return 0x8215C7DC;
		  /* 8215C7DCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C7DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215C7FC;  }
		/* 8215C7DCh case    1:*/		return 0x8215C7E0;
		  /* 8215C7E0h */ case    2:  		/* lis R11, -32252 */
		/* 8215C7E0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C7E0h case    2:*/		return 0x8215C7E4;
		  /* 8215C7E4h */ case    3:  		/* mr R6, R29 */
		/* 8215C7E4h case    3:*/		regs.R6 = regs.R29;
		/* 8215C7E4h case    3:*/		return 0x8215C7E8;
		  /* 8215C7E8h */ case    4:  		/* addi R5, R11, -21672 */
		/* 8215C7E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB58);
		/* 8215C7E8h case    4:*/		return 0x8215C7EC;
		  /* 8215C7ECh */ case    5:  		/* mr R4, R30 */
		/* 8215C7ECh case    5:*/		regs.R4 = regs.R30;
		/* 8215C7ECh case    5:*/		return 0x8215C7F0;
		  /* 8215C7F0h */ case    6:  		/* li R7, 3032 */
		/* 8215C7F0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xBD8);
		/* 8215C7F0h case    6:*/		return 0x8215C7F4;
		  /* 8215C7F4h */ case    7:  		/* li R3, 0 */
		/* 8215C7F4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C7F4h case    7:*/		return 0x8215C7F8;
		  /* 8215C7F8h */ case    8:  		/* bl -19440 */
		/* 8215C7F8h case    8:*/		regs.LR = 0x8215C7FC; return 0x82157C08;
		/* 8215C7F8h case    8:*/		return 0x8215C7FC;
	}
	return 0x8215C7FC;
} // Block from 8215C7D8h-8215C7FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215C7FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C7FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C7FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C7FC);
		  /* 8215C7FCh */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C7FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C7FCh case    0:*/		return 0x8215C800;
		  /* 8215C800h */ case    1:  		/* cmplw CR6, R28, R11 */
		/* 8215C800h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8215C800h case    1:*/		return 0x8215C804;
		  /* 8215C804h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C804h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C824;  }
		/* 8215C804h case    2:*/		return 0x8215C808;
		  /* 8215C808h */ case    3:  		/* lis R11, -32252 */
		/* 8215C808h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C808h case    3:*/		return 0x8215C80C;
		  /* 8215C80Ch */ case    4:  		/* mr R6, R29 */
		/* 8215C80Ch case    4:*/		regs.R6 = regs.R29;
		/* 8215C80Ch case    4:*/		return 0x8215C810;
		  /* 8215C810h */ case    5:  		/* addi R5, R11, -21300 */
		/* 8215C810h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACCC);
		/* 8215C810h case    5:*/		return 0x8215C814;
		  /* 8215C814h */ case    6:  		/* mr R4, R30 */
		/* 8215C814h case    6:*/		regs.R4 = regs.R30;
		/* 8215C814h case    6:*/		return 0x8215C818;
		  /* 8215C818h */ case    7:  		/* li R7, 3033 */
		/* 8215C818h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xBD9);
		/* 8215C818h case    7:*/		return 0x8215C81C;
		  /* 8215C81Ch */ case    8:  		/* li R3, 0 */
		/* 8215C81Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C81Ch case    8:*/		return 0x8215C820;
		  /* 8215C820h */ case    9:  		/* bl -19480 */
		/* 8215C820h case    9:*/		regs.LR = 0x8215C824; return 0x82157C08;
		/* 8215C820h case    9:*/		return 0x8215C824;
	}
	return 0x8215C824;
} // Block from 8215C7FCh-8215C824h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215C824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C824);
		  /* 8215C824h */ case    0:  		/* mr R4, R28 */
		/* 8215C824h case    0:*/		regs.R4 = regs.R28;
		/* 8215C824h case    0:*/		return 0x8215C828;
		  /* 8215C828h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215C828h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C828h case    1:*/		return 0x8215C82C;
		  /* 8215C82Ch */ case    2:  		/* bl -5964 */
		/* 8215C82Ch case    2:*/		regs.LR = 0x8215C830; return 0x8215B0E0;
		/* 8215C82Ch case    2:*/		return 0x8215C830;
		  /* 8215C830h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C830h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C830h case    3:*/		return 0x8215C834;
		  /* 8215C834h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215C834h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C834h case    4:*/		return 0x8215C838;
		  /* 8215C838h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8215C838h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215C844;  }
		/* 8215C838h case    5:*/		return 0x8215C83C;
		  /* 8215C83Ch */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C83Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C83Ch case    6:*/		return 0x8215C840;
		  /* 8215C840h */ case    7:  		/* stw R28, <#[R11 + 8]> */
		/* 8215C840h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 8215C840h case    7:*/		return 0x8215C844;
	}
	return 0x8215C844;
} // Block from 8215C824h-8215C844h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215C844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C844);
		  /* 8215C844h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C844h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C844h case    0:*/		return 0x8215C848;
		  /* 8215C848h */ case    1:  		/* addi R11, R11, 1 */
		/* 8215C848h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215C848h case    1:*/		return 0x8215C84C;
		  /* 8215C84Ch */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215C84Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C84Ch case    2:*/		return 0x8215C850;
		  /* 8215C850h */ case    3:  		/* addi R1, R1, 128 */
		/* 8215C850h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C850h case    3:*/		return 0x8215C854;
		  /* 8215C854h */ case    4:  		/* b -832940 */
		/* 8215C854h case    4:*/		return 0x820912A8;
		/* 8215C854h case    4:*/		return 0x8215C858;
	}
	return 0x8215C858;
} // Block from 8215C844h-8215C858h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215C858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C858);
		  /* 8215C858h */ case    0:  		/* mfspr R12, LR */
		/* 8215C858h case    0:*/		regs.R12 = regs.LR;
		/* 8215C858h case    0:*/		return 0x8215C85C;
		  /* 8215C85Ch */ case    1:  		/* bl -833032 */
		/* 8215C85Ch case    1:*/		regs.LR = 0x8215C860; return 0x82091254;
		/* 8215C85Ch case    1:*/		return 0x8215C860;
		  /* 8215C860h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C860h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C860h case    2:*/		return 0x8215C864;
		  /* 8215C864h */ case    3:  		/* lis R11, -32253 */
		/* 8215C864h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C864h case    3:*/		return 0x8215C868;
		  /* 8215C868h */ case    4:  		/* lis R10, -32252 */
		/* 8215C868h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C868h case    4:*/		return 0x8215C86C;
		  /* 8215C86Ch */ case    5:  		/* mr R31, R3 */
		/* 8215C86Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215C86Ch case    5:*/		return 0x8215C870;
	}
	return 0x8215C870;
} // Block from 8215C858h-8215C870h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215C870h
// Function '?OLIST_RemoveItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C870);
		  /* 8215C870h */ case    0:  		/* mr R27, R4 */
		/* 8215C870h case    0:*/		regs.R27 = regs.R4;
		/* 8215C870h case    0:*/		return 0x8215C874;
		  /* 8215C874h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215C874h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C874h case    1:*/		return 0x8215C878;
		  /* 8215C878h */ case    2:  		/* addi R29, R11, 27460 */
		/* 8215C878h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215C878h case    2:*/		return 0x8215C87C;
		  /* 8215C87Ch */ case    3:  		/* addi R28, R10, -21920 */
		/* 8215C87Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215C87Ch case    3:*/		return 0x8215C880;
		  /* 8215C880h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C880h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8215C8A0;  }
		/* 8215C880h case    4:*/		return 0x8215C884;
		  /* 8215C884h */ case    5:  		/* lis R11, -32252 */
		/* 8215C884h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C884h case    5:*/		return 0x8215C888;
		  /* 8215C888h */ case    6:  		/* mr R6, R28 */
		/* 8215C888h case    6:*/		regs.R6 = regs.R28;
		/* 8215C888h case    6:*/		return 0x8215C88C;
		  /* 8215C88Ch */ case    7:  		/* addi R5, R11, -21312 */
		/* 8215C88Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215C88Ch case    7:*/		return 0x8215C890;
		  /* 8215C890h */ case    8:  		/* mr R4, R29 */
		/* 8215C890h case    8:*/		regs.R4 = regs.R29;
		/* 8215C890h case    8:*/		return 0x8215C894;
		  /* 8215C894h */ case    9:  		/* li R7, 3070 */
		/* 8215C894h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xBFE);
		/* 8215C894h case    9:*/		return 0x8215C898;
		  /* 8215C898h */ case   10:  		/* li R3, 0 */
		/* 8215C898h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C898h case   10:*/		return 0x8215C89C;
		  /* 8215C89Ch */ case   11:  		/* bl -19604 */
		/* 8215C89Ch case   11:*/		regs.LR = 0x8215C8A0; return 0x82157C08;
		/* 8215C89Ch case   11:*/		return 0x8215C8A0;
	}
	return 0x8215C8A0;
} // Block from 8215C870h-8215C8A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215C8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C8A0);
		  /* 8215C8A0h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215C8A0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215C8A0h case    0:*/		return 0x8215C8A4;
		  /* 8215C8A4h */ case    1:  		/* bl -6204 */
		/* 8215C8A4h case    1:*/		regs.LR = 0x8215C8A8; return 0x8215B068;
		/* 8215C8A4h case    1:*/		return 0x8215C8A8;
		  /* 8215C8A8h */ case    2:  		/* or. R30, R3, R3 */
		/* 8215C8A8h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215C8A8h case    2:*/		return 0x8215C8AC;
		  /* 8215C8ACh */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215C8ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215C8CC;  }
		/* 8215C8ACh case    3:*/		return 0x8215C8B0;
		  /* 8215C8B0h */ case    4:  		/* lis R11, -32252 */
		/* 8215C8B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C8B0h case    4:*/		return 0x8215C8B4;
		  /* 8215C8B4h */ case    5:  		/* mr R6, R28 */
		/* 8215C8B4h case    5:*/		regs.R6 = regs.R28;
		/* 8215C8B4h case    5:*/		return 0x8215C8B8;
		  /* 8215C8B8h */ case    6:  		/* addi R5, R11, -21932 */
		/* 8215C8B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA54);
		/* 8215C8B8h case    6:*/		return 0x8215C8BC;
		  /* 8215C8BCh */ case    7:  		/* mr R4, R29 */
		/* 8215C8BCh case    7:*/		regs.R4 = regs.R29;
		/* 8215C8BCh case    7:*/		return 0x8215C8C0;
		  /* 8215C8C0h */ case    8:  		/* li R7, 3075 */
		/* 8215C8C0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0xC03);
		/* 8215C8C0h case    8:*/		return 0x8215C8C4;
		  /* 8215C8C4h */ case    9:  		/* li R3, 0 */
		/* 8215C8C4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C8C4h case    9:*/		return 0x8215C8C8;
		  /* 8215C8C8h */ case   10:  		/* bl -19648 */
		/* 8215C8C8h case   10:*/		regs.LR = 0x8215C8CC; return 0x82157C08;
		/* 8215C8C8h case   10:*/		return 0x8215C8CC;
	}
	return 0x8215C8CC;
} // Block from 8215C8A0h-8215C8CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215C8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C8CC);
		  /* 8215C8CCh */ case    0:  		/* stw R27, <#[R30 + 12]> */
		/* 8215C8CCh case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215C8CCh case    0:*/		return 0x8215C8D0;
		  /* 8215C8D0h */ case    1:  		/* mr R4, R30 */
		/* 8215C8D0h case    1:*/		regs.R4 = regs.R30;
		/* 8215C8D0h case    1:*/		return 0x8215C8D4;
		  /* 8215C8D4h */ case    2:  		/* mr R3, R31 */
		/* 8215C8D4h case    2:*/		regs.R3 = regs.R31;
		/* 8215C8D4h case    2:*/		return 0x8215C8D8;
		  /* 8215C8D8h */ case    3:  		/* bl -328 */
		/* 8215C8D8h case    3:*/		regs.LR = 0x8215C8DC; return 0x8215C790;
		/* 8215C8D8h case    3:*/		return 0x8215C8DC;
		  /* 8215C8DCh */ case    4:  		/* mr R3, R30 */
		/* 8215C8DCh case    4:*/		regs.R3 = regs.R30;
		/* 8215C8DCh case    4:*/		return 0x8215C8E0;
		  /* 8215C8E0h */ case    5:  		/* addi R1, R1, 128 */
		/* 8215C8E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C8E0h case    5:*/		return 0x8215C8E4;
		  /* 8215C8E4h */ case    6:  		/* b -833088 */
		/* 8215C8E4h case    6:*/		return 0x820912A4;
		/* 8215C8E4h case    6:*/		return 0x8215C8E8;
	}
	return 0x8215C8E8;
} // Block from 8215C8CCh-8215C8E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215C8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C8E8);
		  /* 8215C8E8h */ case    0:  		/* mfspr R12, LR */
		/* 8215C8E8h case    0:*/		regs.R12 = regs.LR;
		/* 8215C8E8h case    0:*/		return 0x8215C8EC;
		  /* 8215C8ECh */ case    1:  		/* bl -833172 */
		/* 8215C8ECh case    1:*/		regs.LR = 0x8215C8F0; return 0x82091258;
		/* 8215C8ECh case    1:*/		return 0x8215C8F0;
		  /* 8215C8F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C8F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C8F0h case    2:*/		return 0x8215C8F4;
		  /* 8215C8F4h */ case    3:  		/* lis R11, -32253 */
		/* 8215C8F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C8F4h case    3:*/		return 0x8215C8F8;
		  /* 8215C8F8h */ case    4:  		/* lis R10, -32252 */
		/* 8215C8F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C8F8h case    4:*/		return 0x8215C8FC;
		  /* 8215C8FCh */ case    5:  		/* mr R31, R3 */
		/* 8215C8FCh case    5:*/		regs.R31 = regs.R3;
		/* 8215C8FCh case    5:*/		return 0x8215C900;
		  /* 8215C900h */ case    6:  		/* mr R28, R4 */
		/* 8215C900h case    6:*/		regs.R28 = regs.R4;
		/* 8215C900h case    6:*/		return 0x8215C904;
		  /* 8215C904h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215C904h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C904h case    7:*/		return 0x8215C908;
		  /* 8215C908h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8215C908h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215C908h case    8:*/		return 0x8215C90C;
		  /* 8215C90Ch */ case    9:  		/* addi R29, R10, -21920 */
		/* 8215C90Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215C90Ch case    9:*/		return 0x8215C910;
		  /* 8215C910h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C910h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215C930;  }
		/* 8215C910h case   10:*/		return 0x8215C914;
		  /* 8215C914h */ case   11:  		/* lis R11, -32252 */
		/* 8215C914h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C914h case   11:*/		return 0x8215C918;
		  /* 8215C918h */ case   12:  		/* mr R6, R29 */
		/* 8215C918h case   12:*/		regs.R6 = regs.R29;
		/* 8215C918h case   12:*/		return 0x8215C91C;
		  /* 8215C91Ch */ case   13:  		/* addi R5, R11, -21312 */
		/* 8215C91Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215C91Ch case   13:*/		return 0x8215C920;
		  /* 8215C920h */ case   14:  		/* mr R4, R30 */
		/* 8215C920h case   14:*/		regs.R4 = regs.R30;
		/* 8215C920h case   14:*/		return 0x8215C924;
		  /* 8215C924h */ case   15:  		/* li R7, 3105 */
		/* 8215C924h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xC21);
		/* 8215C924h case   15:*/		return 0x8215C928;
		  /* 8215C928h */ case   16:  		/* li R3, 0 */
		/* 8215C928h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C928h case   16:*/		return 0x8215C92C;
		  /* 8215C92Ch */ case   17:  		/* bl -19748 */
		/* 8215C92Ch case   17:*/		regs.LR = 0x8215C930; return 0x82157C08;
		/* 8215C92Ch case   17:*/		return 0x8215C930;
	}
	return 0x8215C930;
} // Block from 8215C8E8h-8215C930h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215C930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C930);
		  /* 8215C930h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215C930h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215C930h case    0:*/		return 0x8215C934;
		  /* 8215C934h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C934h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215C954;  }
		/* 8215C934h case    1:*/		return 0x8215C938;
		  /* 8215C938h */ case    2:  		/* lis R11, -32252 */
		/* 8215C938h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C938h case    2:*/		return 0x8215C93C;
		  /* 8215C93Ch */ case    3:  		/* mr R6, R29 */
		/* 8215C93Ch case    3:*/		regs.R6 = regs.R29;
		/* 8215C93Ch case    3:*/		return 0x8215C940;
		  /* 8215C940h */ case    4:  		/* addi R5, R11, -21672 */
		/* 8215C940h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB58);
		/* 8215C940h case    4:*/		return 0x8215C944;
		  /* 8215C944h */ case    5:  		/* mr R4, R30 */
		/* 8215C944h case    5:*/		regs.R4 = regs.R30;
		/* 8215C944h case    5:*/		return 0x8215C948;
		  /* 8215C948h */ case    6:  		/* li R7, 3106 */
		/* 8215C948h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xC22);
		/* 8215C948h case    6:*/		return 0x8215C94C;
		  /* 8215C94Ch */ case    7:  		/* li R3, 0 */
		/* 8215C94Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C94Ch case    7:*/		return 0x8215C950;
		  /* 8215C950h */ case    8:  		/* bl -19784 */
		/* 8215C950h case    8:*/		regs.LR = 0x8215C954; return 0x82157C08;
		/* 8215C950h case    8:*/		return 0x8215C954;
	}
	return 0x8215C954;
} // Block from 8215C930h-8215C954h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215C954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C954);
		  /* 8215C954h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C954h case    0:*/		return 0x8215C958;
		  /* 8215C958h */ case    1:  		/* cmplw CR6, R28, R11 */
		/* 8215C958h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8215C958h case    1:*/		return 0x8215C95C;
		  /* 8215C95Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C95Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215C97C;  }
		/* 8215C95Ch case    2:*/		return 0x8215C960;
		  /* 8215C960h */ case    3:  		/* lis R11, -32252 */
		/* 8215C960h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C960h case    3:*/		return 0x8215C964;
		  /* 8215C964h */ case    4:  		/* mr R6, R29 */
		/* 8215C964h case    4:*/		regs.R6 = regs.R29;
		/* 8215C964h case    4:*/		return 0x8215C968;
	}
	return 0x8215C968;
} // Block from 8215C954h-8215C968h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215C968h
// Function '?OLIST_RemoveFirstItem@XGRAPHICS@@YAPAXPAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C968);
		  /* 8215C968h */ case    0:  		/* addi R5, R11, -21300 */
		/* 8215C968h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACCC);
		/* 8215C968h case    0:*/		return 0x8215C96C;
		  /* 8215C96Ch */ case    1:  		/* mr R4, R30 */
		/* 8215C96Ch case    1:*/		regs.R4 = regs.R30;
		/* 8215C96Ch case    1:*/		return 0x8215C970;
		  /* 8215C970h */ case    2:  		/* li R7, 3107 */
		/* 8215C970h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0xC23);
		/* 8215C970h case    2:*/		return 0x8215C974;
		  /* 8215C974h */ case    3:  		/* li R3, 0 */
		/* 8215C974h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C974h case    3:*/		return 0x8215C978;
		  /* 8215C978h */ case    4:  		/* bl -19824 */
		/* 8215C978h case    4:*/		regs.LR = 0x8215C97C; return 0x82157C08;
		/* 8215C978h case    4:*/		return 0x8215C97C;
	}
	return 0x8215C97C;
} // Block from 8215C968h-8215C97Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215C97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C97C);
		  /* 8215C97Ch */ case    0:  		/* mr R4, R28 */
		/* 8215C97Ch case    0:*/		regs.R4 = regs.R28;
		/* 8215C97Ch case    0:*/		return 0x8215C980;
		  /* 8215C980h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215C980h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C980h case    1:*/		return 0x8215C984;
		  /* 8215C984h */ case    2:  		/* bl -6076 */
		/* 8215C984h case    2:*/		regs.LR = 0x8215C988; return 0x8215B1C8;
		/* 8215C984h case    2:*/		return 0x8215C988;
		  /* 8215C988h */ case    3:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C988h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C988h case    3:*/		return 0x8215C98C;
		  /* 8215C98Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215C98Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215C98Ch case    4:*/		return 0x8215C990;
		  /* 8215C990h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8215C990h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215C99C;  }
		/* 8215C990h case    5:*/		return 0x8215C994;
		  /* 8215C994h */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215C994h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215C994h case    6:*/		return 0x8215C998;
		  /* 8215C998h */ case    7:  		/* stw R28, <#[R11 + 8]> */
		/* 8215C998h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000008) );
		/* 8215C998h case    7:*/		return 0x8215C99C;
	}
	return 0x8215C99C;
} // Block from 8215C97Ch-8215C99Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215C99Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C99C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C99C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C99C);
		  /* 8215C99Ch */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215C99Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C99Ch case    0:*/		return 0x8215C9A0;
		  /* 8215C9A0h */ case    1:  		/* addi R11, R11, 1 */
		/* 8215C9A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215C9A0h case    1:*/		return 0x8215C9A4;
		  /* 8215C9A4h */ case    2:  		/* stw R11, <#[R31 + 20]> */
		/* 8215C9A4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215C9A4h case    2:*/		return 0x8215C9A8;
		  /* 8215C9A8h */ case    3:  		/* addi R1, R1, 128 */
		/* 8215C9A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215C9A8h case    3:*/		return 0x8215C9AC;
		  /* 8215C9ACh */ case    4:  		/* b -833284 */
		/* 8215C9ACh case    4:*/		return 0x820912A8;
		/* 8215C9ACh case    4:*/		return 0x8215C9B0;
	}
	return 0x8215C9B0;
} // Block from 8215C99Ch-8215C9B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215C9B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C9B0);
		  /* 8215C9B0h */ case    0:  		/* mfspr R12, LR */
		/* 8215C9B0h case    0:*/		regs.R12 = regs.LR;
		/* 8215C9B0h case    0:*/		return 0x8215C9B4;
		  /* 8215C9B4h */ case    1:  		/* bl -833376 */
		/* 8215C9B4h case    1:*/		regs.LR = 0x8215C9B8; return 0x82091254;
		/* 8215C9B4h case    1:*/		return 0x8215C9B8;
		  /* 8215C9B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215C9B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215C9B8h case    2:*/		return 0x8215C9BC;
		  /* 8215C9BCh */ case    3:  		/* lis R11, -32253 */
		/* 8215C9BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215C9BCh case    3:*/		return 0x8215C9C0;
		  /* 8215C9C0h */ case    4:  		/* lis R10, -32252 */
		/* 8215C9C0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215C9C0h case    4:*/		return 0x8215C9C4;
		  /* 8215C9C4h */ case    5:  		/* mr R31, R3 */
		/* 8215C9C4h case    5:*/		regs.R31 = regs.R3;
		/* 8215C9C4h case    5:*/		return 0x8215C9C8;
		  /* 8215C9C8h */ case    6:  		/* mr R27, R4 */
		/* 8215C9C8h case    6:*/		regs.R27 = regs.R4;
		/* 8215C9C8h case    6:*/		return 0x8215C9CC;
		  /* 8215C9CCh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215C9CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215C9CCh case    7:*/		return 0x8215C9D0;
		  /* 8215C9D0h */ case    8:  		/* addi R29, R11, 27460 */
		/* 8215C9D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215C9D0h case    8:*/		return 0x8215C9D4;
		  /* 8215C9D4h */ case    9:  		/* addi R28, R10, -21920 */
		/* 8215C9D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215C9D4h case    9:*/		return 0x8215C9D8;
		  /* 8215C9D8h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215C9D8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215C9F8;  }
		/* 8215C9D8h case   10:*/		return 0x8215C9DC;
		  /* 8215C9DCh */ case   11:  		/* lis R11, -32252 */
		/* 8215C9DCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215C9DCh case   11:*/		return 0x8215C9E0;
		  /* 8215C9E0h */ case   12:  		/* mr R6, R28 */
		/* 8215C9E0h case   12:*/		regs.R6 = regs.R28;
		/* 8215C9E0h case   12:*/		return 0x8215C9E4;
		  /* 8215C9E4h */ case   13:  		/* addi R5, R11, -21312 */
		/* 8215C9E4h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215C9E4h case   13:*/		return 0x8215C9E8;
		  /* 8215C9E8h */ case   14:  		/* mr R4, R29 */
		/* 8215C9E8h case   14:*/		regs.R4 = regs.R29;
		/* 8215C9E8h case   14:*/		return 0x8215C9EC;
		  /* 8215C9ECh */ case   15:  		/* li R7, 3144 */
		/* 8215C9ECh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xC48);
		/* 8215C9ECh case   15:*/		return 0x8215C9F0;
		  /* 8215C9F0h */ case   16:  		/* li R3, 0 */
		/* 8215C9F0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215C9F0h case   16:*/		return 0x8215C9F4;
		  /* 8215C9F4h */ case   17:  		/* bl -19948 */
		/* 8215C9F4h case   17:*/		regs.LR = 0x8215C9F8; return 0x82157C08;
		/* 8215C9F4h case   17:*/		return 0x8215C9F8;
	}
	return 0x8215C9F8;
} // Block from 8215C9B0h-8215C9F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215C9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215C9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215C9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215C9F8);
		  /* 8215C9F8h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215C9F8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215C9F8h case    0:*/		return 0x8215C9FC;
		  /* 8215C9FCh */ case    1:  		/* bl -6548 */
		/* 8215C9FCh case    1:*/		regs.LR = 0x8215CA00; return 0x8215B068;
		/* 8215C9FCh case    1:*/		return 0x8215CA00;
		  /* 8215CA00h */ case    2:  		/* or. R30, R3, R3 */
		/* 8215CA00h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215CA00h case    2:*/		return 0x8215CA04;
		  /* 8215CA04h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215CA04h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215CA24;  }
		/* 8215CA04h case    3:*/		return 0x8215CA08;
		  /* 8215CA08h */ case    4:  		/* lis R11, -32252 */
		/* 8215CA08h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CA08h case    4:*/		return 0x8215CA0C;
		  /* 8215CA0Ch */ case    5:  		/* mr R6, R28 */
		/* 8215CA0Ch case    5:*/		regs.R6 = regs.R28;
		/* 8215CA0Ch case    5:*/		return 0x8215CA10;
		  /* 8215CA10h */ case    6:  		/* addi R5, R11, -21932 */
		/* 8215CA10h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA54);
		/* 8215CA10h case    6:*/		return 0x8215CA14;
		  /* 8215CA14h */ case    7:  		/* mr R4, R29 */
		/* 8215CA14h case    7:*/		regs.R4 = regs.R29;
		/* 8215CA14h case    7:*/		return 0x8215CA18;
		  /* 8215CA18h */ case    8:  		/* li R7, 3149 */
		/* 8215CA18h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0xC4D);
		/* 8215CA18h case    8:*/		return 0x8215CA1C;
		  /* 8215CA1Ch */ case    9:  		/* li R3, 0 */
		/* 8215CA1Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CA1Ch case    9:*/		return 0x8215CA20;
		  /* 8215CA20h */ case   10:  		/* bl -19992 */
		/* 8215CA20h case   10:*/		regs.LR = 0x8215CA24; return 0x82157C08;
		/* 8215CA20h case   10:*/		return 0x8215CA24;
	}
	return 0x8215CA24;
} // Block from 8215C9F8h-8215CA24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215CA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CA24);
		  /* 8215CA24h */ case    0:  		/* stw R27, <#[R30 + 12]> */
		/* 8215CA24h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215CA24h case    0:*/		return 0x8215CA28;
		  /* 8215CA28h */ case    1:  		/* mr R4, R30 */
		/* 8215CA28h case    1:*/		regs.R4 = regs.R30;
		/* 8215CA28h case    1:*/		return 0x8215CA2C;
		  /* 8215CA2Ch */ case    2:  		/* mr R3, R31 */
		/* 8215CA2Ch case    2:*/		regs.R3 = regs.R31;
		/* 8215CA2Ch case    2:*/		return 0x8215CA30;
		  /* 8215CA30h */ case    3:  		/* bl -328 */
		/* 8215CA30h case    3:*/		regs.LR = 0x8215CA34; return 0x8215C8E8;
		/* 8215CA30h case    3:*/		return 0x8215CA34;
		  /* 8215CA34h */ case    4:  		/* mr R3, R30 */
		/* 8215CA34h case    4:*/		regs.R3 = regs.R30;
		/* 8215CA34h case    4:*/		return 0x8215CA38;
		  /* 8215CA38h */ case    5:  		/* addi R1, R1, 128 */
		/* 8215CA38h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215CA38h case    5:*/		return 0x8215CA3C;
		  /* 8215CA3Ch */ case    6:  		/* b -833432 */
		/* 8215CA3Ch case    6:*/		return 0x820912A4;
		/* 8215CA3Ch case    6:*/		return 0x8215CA40;
	}
	return 0x8215CA40;
} // Block from 8215CA24h-8215CA40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CA40h
// Function '?OLIST_GetNumItems@XGRAPHICS@@YAIPAU_KEY_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CA40);
		  /* 8215CA40h */ case    0:  		/* mfspr R12, LR */
		/* 8215CA40h case    0:*/		regs.R12 = regs.LR;
		/* 8215CA40h case    0:*/		return 0x8215CA44;
		  /* 8215CA44h */ case    1:  		/* bl -833512 */
		/* 8215CA44h case    1:*/		regs.LR = 0x8215CA48; return 0x8209125C;
		/* 8215CA44h case    1:*/		return 0x8215CA48;
		  /* 8215CA48h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215CA48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215CA48h case    2:*/		return 0x8215CA4C;
		  /* 8215CA4Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215CA4Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215CA4Ch case    3:*/		return 0x8215CA50;
		  /* 8215CA50h */ case    4:  		/* lis R10, -32252 */
		/* 8215CA50h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CA50h case    4:*/		return 0x8215CA54;
		  /* 8215CA54h */ case    5:  		/* mr R31, R3 */
		/* 8215CA54h case    5:*/		regs.R31 = regs.R3;
		/* 8215CA54h case    5:*/		return 0x8215CA58;
		  /* 8215CA58h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215CA58h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CA58h case    6:*/		return 0x8215CA5C;
		  /* 8215CA5Ch */ case    7:  		/* addi R30, R11, 27460 */
		/* 8215CA5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215CA5Ch case    7:*/		return 0x8215CA60;
		  /* 8215CA60h */ case    8:  		/* addi R29, R10, -21920 */
		/* 8215CA60h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215CA60h case    8:*/		return 0x8215CA64;
		  /* 8215CA64h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CA64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215CA84;  }
		/* 8215CA64h case    9:*/		return 0x8215CA68;
		  /* 8215CA68h */ case   10:  		/* lis R11, -32252 */
		/* 8215CA68h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CA68h case   10:*/		return 0x8215CA6C;
		  /* 8215CA6Ch */ case   11:  		/* mr R6, R29 */
		/* 8215CA6Ch case   11:*/		regs.R6 = regs.R29;
		/* 8215CA6Ch case   11:*/		return 0x8215CA70;
		  /* 8215CA70h */ case   12:  		/* addi R5, R11, -21312 */
		/* 8215CA70h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215CA70h case   12:*/		return 0x8215CA74;
		  /* 8215CA74h */ case   13:  		/* mr R4, R30 */
		/* 8215CA74h case   13:*/		regs.R4 = regs.R30;
		/* 8215CA74h case   13:*/		return 0x8215CA78;
		  /* 8215CA78h */ case   14:  		/* li R7, 3202 */
		/* 8215CA78h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xC82);
		/* 8215CA78h case   14:*/		return 0x8215CA7C;
		  /* 8215CA7Ch */ case   15:  		/* li R3, 0 */
		/* 8215CA7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CA7Ch case   15:*/		return 0x8215CA80;
		  /* 8215CA80h */ case   16:  		/* bl -20088 */
		/* 8215CA80h case   16:*/		regs.LR = 0x8215CA84; return 0x82157C08;
		/* 8215CA80h case   16:*/		return 0x8215CA84;
	}
	return 0x8215CA84;
} // Block from 8215CA40h-8215CA84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215CA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CA84);
		  /* 8215CA84h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CA84h case    0:*/		return 0x8215CA88;
		  /* 8215CA88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CA88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CA88h case    1:*/		return 0x8215CA8C;
		  /* 8215CA8Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CA8Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CA98;  }
		/* 8215CA8Ch case    2:*/		return 0x8215CA90;
		  /* 8215CA90h */ case    3:  		/* li R3, 0 */
		/* 8215CA90h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CA90h case    3:*/		return 0x8215CA94;
		  /* 8215CA94h */ case    4:  		/* b 68 */
		/* 8215CA94h case    4:*/		return 0x8215CAD8;
		/* 8215CA94h case    4:*/		return 0x8215CA98;
	}
	return 0x8215CA98;
} // Block from 8215CA84h-8215CA98h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CA98h
// Function '?OLIST_CreateObjMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CA98);
		  /* 8215CA98h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CA98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CA98h case    0:*/		return 0x8215CA9C;
		  /* 8215CA9Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CA9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CA9Ch case    1:*/		return 0x8215CAA0;
		  /* 8215CAA0h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CAA0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CAAC;  }
		/* 8215CAA0h case    2:*/		return 0x8215CAA4;
		  /* 8215CAA4h */ case    3:  		/* li R31, 0 */
		/* 8215CAA4h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215CAA4h case    3:*/		return 0x8215CAA8;
		  /* 8215CAA8h */ case    4:  		/* b 16 */
		/* 8215CAA8h case    4:*/		return 0x8215CAB8;
		/* 8215CAA8h case    4:*/		return 0x8215CAAC;
	}
	return 0x8215CAAC;
} // Block from 8215CA98h-8215CAACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CAAC);
		  /* 8215CAACh */ case    0:  		/* lwz R31, <#[R11 + 8]> */
		/* 8215CAACh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 8215CAACh case    0:*/		return 0x8215CAB0;
		  /* 8215CAB0h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8215CAB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215CAB0h case    1:*/		return 0x8215CAB4;
		  /* 8215CAB4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CAB4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CAD4;  }
		/* 8215CAB4h case    2:*/		return 0x8215CAB8;
	}
	return 0x8215CAB8;
} // Block from 8215CAACh-8215CAB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215CAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CAB8);
		  /* 8215CAB8h */ case    0:  		/* lis R11, -32252 */
		/* 8215CAB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CAB8h case    0:*/		return 0x8215CABC;
		  /* 8215CABCh */ case    1:  		/* mr R6, R29 */
		/* 8215CABCh case    1:*/		regs.R6 = regs.R29;
		/* 8215CABCh case    1:*/		return 0x8215CAC0;
		  /* 8215CAC0h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215CAC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215CAC0h case    2:*/		return 0x8215CAC4;
		  /* 8215CAC4h */ case    3:  		/* mr R4, R30 */
		/* 8215CAC4h case    3:*/		regs.R4 = regs.R30;
		/* 8215CAC4h case    3:*/		return 0x8215CAC8;
		  /* 8215CAC8h */ case    4:  		/* li R7, 3214 */
		/* 8215CAC8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xC8E);
		/* 8215CAC8h case    4:*/		return 0x8215CACC;
		  /* 8215CACCh */ case    5:  		/* li R3, 0 */
		/* 8215CACCh case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CACCh case    5:*/		return 0x8215CAD0;
		  /* 8215CAD0h */ case    6:  		/* bl -20168 */
		/* 8215CAD0h case    6:*/		regs.LR = 0x8215CAD4; return 0x82157C08;
		/* 8215CAD0h case    6:*/		return 0x8215CAD4;
	}
	return 0x8215CAD4;
} // Block from 8215CAB8h-8215CAD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CAD4);
		  /* 8215CAD4h */ case    0:  		/* mr R3, R31 */
		/* 8215CAD4h case    0:*/		regs.R3 = regs.R31;
		/* 8215CAD4h case    0:*/		return 0x8215CAD8;
	}
	return 0x8215CAD8;
} // Block from 8215CAD4h-8215CAD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CAD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CAD8);
		  /* 8215CAD8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8215CAD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215CAD8h case    0:*/		return 0x8215CADC;
		  /* 8215CADCh */ case    1:  		/* b -833584 */
		/* 8215CADCh case    1:*/		return 0x820912AC;
		/* 8215CADCh case    1:*/		return 0x8215CAE0;
	}
	return 0x8215CAE0;
} // Block from 8215CAD8h-8215CAE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CAE0);
		  /* 8215CAE0h */ case    0:  		/* mfspr R12, LR */
		/* 8215CAE0h case    0:*/		regs.R12 = regs.LR;
		/* 8215CAE0h case    0:*/		return 0x8215CAE4;
		  /* 8215CAE4h */ case    1:  		/* bl -833676 */
		/* 8215CAE4h case    1:*/		regs.LR = 0x8215CAE8; return 0x82091258;
		/* 8215CAE4h case    1:*/		return 0x8215CAE8;
		  /* 8215CAE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215CAE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215CAE8h case    2:*/		return 0x8215CAEC;
		  /* 8215CAECh */ case    3:  		/* lis R11, -32253 */
		/* 8215CAECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215CAECh case    3:*/		return 0x8215CAF0;
		  /* 8215CAF0h */ case    4:  		/* lis R10, -32252 */
		/* 8215CAF0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CAF0h case    4:*/		return 0x8215CAF4;
		  /* 8215CAF4h */ case    5:  		/* mr R31, R3 */
		/* 8215CAF4h case    5:*/		regs.R31 = regs.R3;
		/* 8215CAF4h case    5:*/		return 0x8215CAF8;
		  /* 8215CAF8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215CAF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CAF8h case    6:*/		return 0x8215CAFC;
		  /* 8215CAFCh */ case    7:  		/* addi R29, R11, 27460 */
		/* 8215CAFCh case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215CAFCh case    7:*/		return 0x8215CB00;
		  /* 8215CB00h */ case    8:  		/* addi R28, R10, -21920 */
		/* 8215CB00h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215CB00h case    8:*/		return 0x8215CB04;
		  /* 8215CB04h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CB04h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215CB24;  }
		/* 8215CB04h case    9:*/		return 0x8215CB08;
	}
	return 0x8215CB08;
} // Block from 8215CAE0h-8215CB08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB08h
// Function '?OLIST_CreateItemMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB08);
		  /* 8215CB08h */ case    0:  		/* lis R11, -32252 */
		/* 8215CB08h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CB08h case    0:*/		return 0x8215CB0C;
		  /* 8215CB0Ch */ case    1:  		/* mr R6, R28 */
		/* 8215CB0Ch case    1:*/		regs.R6 = regs.R28;
		/* 8215CB0Ch case    1:*/		return 0x8215CB10;
		  /* 8215CB10h */ case    2:  		/* addi R5, R11, -21312 */
		/* 8215CB10h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215CB10h case    2:*/		return 0x8215CB14;
		  /* 8215CB14h */ case    3:  		/* mr R4, R29 */
		/* 8215CB14h case    3:*/		regs.R4 = regs.R29;
		/* 8215CB14h case    3:*/		return 0x8215CB18;
		  /* 8215CB18h */ case    4:  		/* li R7, 3388 */
		/* 8215CB18h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xD3C);
		/* 8215CB18h case    4:*/		return 0x8215CB1C;
		  /* 8215CB1Ch */ case    5:  		/* li R3, 0 */
		/* 8215CB1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CB1Ch case    5:*/		return 0x8215CB20;
		  /* 8215CB20h */ case    6:  		/* bl -20248 */
		/* 8215CB20h case    6:*/		regs.LR = 0x8215CB24; return 0x82157C08;
		/* 8215CB20h case    6:*/		return 0x8215CB24;
	}
	return 0x8215CB24;
} // Block from 8215CB08h-8215CB24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB24);
		  /* 8215CB24h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CB24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CB24h case    0:*/		return 0x8215CB28;
		  /* 8215CB28h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CB28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CB28h case    1:*/		return 0x8215CB2C;
		  /* 8215CB2Ch */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CB2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CB38;  }
		/* 8215CB2Ch case    2:*/		return 0x8215CB30;
		  /* 8215CB30h */ case    3:  		/* li R3, 0 */
		/* 8215CB30h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CB30h case    3:*/		return 0x8215CB34;
		  /* 8215CB34h */ case    4:  		/* b 124 */
		/* 8215CB34h case    4:*/		return 0x8215CBB0;
		/* 8215CB34h case    4:*/		return 0x8215CB38;
	}
	return 0x8215CB38;
} // Block from 8215CB24h-8215CB38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB38);
		  /* 8215CB38h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CB38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CB38h case    0:*/		return 0x8215CB3C;
		  /* 8215CB3Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CB3Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CB3Ch case    1:*/		return 0x8215CB40;
		  /* 8215CB40h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CB40h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CB4C;  }
		/* 8215CB40h case    2:*/		return 0x8215CB44;
		  /* 8215CB44h */ case    3:  		/* li R30, 0 */
		/* 8215CB44h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215CB44h case    3:*/		return 0x8215CB48;
		  /* 8215CB48h */ case    4:  		/* b 16 */
		/* 8215CB48h case    4:*/		return 0x8215CB58;
		/* 8215CB48h case    4:*/		return 0x8215CB4C;
	}
	return 0x8215CB4C;
} // Block from 8215CB38h-8215CB4Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB4C);
		  /* 8215CB4Ch */ case    0:  		/* lwz R30, <#[R11 + 8]> */
		/* 8215CB4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8215CB4Ch case    0:*/		return 0x8215CB50;
		  /* 8215CB50h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215CB50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215CB50h case    1:*/		return 0x8215CB54;
		  /* 8215CB54h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CB54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CB74;  }
		/* 8215CB54h case    2:*/		return 0x8215CB58;
	}
	return 0x8215CB58;
} // Block from 8215CB4Ch-8215CB58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB58);
		  /* 8215CB58h */ case    0:  		/* lis R11, -32252 */
		/* 8215CB58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CB58h case    0:*/		return 0x8215CB5C;
		  /* 8215CB5Ch */ case    1:  		/* mr R6, R28 */
		/* 8215CB5Ch case    1:*/		regs.R6 = regs.R28;
		/* 8215CB5Ch case    1:*/		return 0x8215CB60;
		  /* 8215CB60h */ case    2:  		/* addi R5, R11, -21548 */
		/* 8215CB60h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFABD4);
		/* 8215CB60h case    2:*/		return 0x8215CB64;
		  /* 8215CB64h */ case    3:  		/* mr R4, R29 */
		/* 8215CB64h case    3:*/		regs.R4 = regs.R29;
		/* 8215CB64h case    3:*/		return 0x8215CB68;
		  /* 8215CB68h */ case    4:  		/* li R7, 3399 */
		/* 8215CB68h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xD47);
		/* 8215CB68h case    4:*/		return 0x8215CB6C;
		  /* 8215CB6Ch */ case    5:  		/* li R3, 0 */
		/* 8215CB6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CB6Ch case    5:*/		return 0x8215CB70;
		  /* 8215CB70h */ case    6:  		/* bl -20328 */
		/* 8215CB70h case    6:*/		regs.LR = 0x8215CB74; return 0x82157C08;
		/* 8215CB70h case    6:*/		return 0x8215CB74;
	}
	return 0x8215CB74;
} // Block from 8215CB58h-8215CB74h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB74);
		  /* 8215CB74h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CB74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CB74h case    0:*/		return 0x8215CB78;
	}
	return 0x8215CB78;
} // Block from 8215CB74h-8215CB78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB78h
// Function '?OLIST_GetObjSize@XGRAPHICS@@YAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB78);
		  /* 8215CB78h */ case    0:  		/* cmplw CR6, R30, R11 */
		/* 8215CB78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8215CB78h case    0:*/		return 0x8215CB7C;
		  /* 8215CB7Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CB7Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215CB9C;  }
		/* 8215CB7Ch case    1:*/		return 0x8215CB80;
	}
	return 0x8215CB80;
} // Block from 8215CB78h-8215CB80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB80h
// Function '?INTLIST_InitList@XGRAPHICS@@YAXPAU_INTEGER_LIST@1@PAU_MEM_HEAD@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB80);
		  /* 8215CB80h */ case    0:  		/* lis R11, -32252 */
		/* 8215CB80h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CB80h case    0:*/		return 0x8215CB84;
		  /* 8215CB84h */ case    1:  		/* mr R6, R28 */
		/* 8215CB84h case    1:*/		regs.R6 = regs.R28;
		/* 8215CB84h case    1:*/		return 0x8215CB88;
		  /* 8215CB88h */ case    2:  		/* addi R5, R11, -21260 */
		/* 8215CB88h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACF4);
		/* 8215CB88h case    2:*/		return 0x8215CB8C;
		  /* 8215CB8Ch */ case    3:  		/* mr R4, R29 */
		/* 8215CB8Ch case    3:*/		regs.R4 = regs.R29;
		/* 8215CB8Ch case    3:*/		return 0x8215CB90;
		  /* 8215CB90h */ case    4:  		/* li R7, 3402 */
		/* 8215CB90h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xD4A);
		/* 8215CB90h case    4:*/		return 0x8215CB94;
		  /* 8215CB94h */ case    5:  		/* li R3, 0 */
		/* 8215CB94h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CB94h case    5:*/		return 0x8215CB98;
		  /* 8215CB98h */ case    6:  		/* bl -20368 */
		/* 8215CB98h case    6:*/		regs.LR = 0x8215CB9C; return 0x82157C08;
		/* 8215CB98h case    6:*/		return 0x8215CB9C;
	}
	return 0x8215CB9C;
} // Block from 8215CB80h-8215CB9Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CB9C);
		  /* 8215CB9Ch */ case    0:  		/* mr R3, R30 */
		/* 8215CB9Ch case    0:*/		regs.R3 = regs.R30;
		/* 8215CB9Ch case    0:*/		return 0x8215CBA0;
		  /* 8215CBA0h */ case    1:  		/* bl -6384 */
		/* 8215CBA0h case    1:*/		regs.LR = 0x8215CBA4; return 0x8215B2B0;
		/* 8215CBA0h case    1:*/		return 0x8215CBA4;
		  /* 8215CBA4h */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CBA4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CBA4h case    2:*/		return 0x8215CBA8;
		  /* 8215CBA8h */ case    3:  		/* addi R11, R11, -1 */
		/* 8215CBA8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215CBA8h case    3:*/		return 0x8215CBAC;
		  /* 8215CBACh */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 8215CBACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CBACh case    4:*/		return 0x8215CBB0;
	}
	return 0x8215CBB0;
} // Block from 8215CB9Ch-8215CBB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CBB0);
		  /* 8215CBB0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215CBB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215CBB0h case    0:*/		return 0x8215CBB4;
		  /* 8215CBB4h */ case    1:  		/* b -833804 */
		/* 8215CBB4h case    1:*/		return 0x820912A8;
		/* 8215CBB4h case    1:*/		return 0x8215CBB8;
	}
	return 0x8215CBB8;
} // Block from 8215CBB0h-8215CBB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CBB8);
		  /* 8215CBB8h */ case    0:  		/* mfspr R12, LR */
		/* 8215CBB8h case    0:*/		regs.R12 = regs.LR;
		/* 8215CBB8h case    0:*/		return 0x8215CBBC;
		  /* 8215CBBCh */ case    1:  		/* bl -833892 */
		/* 8215CBBCh case    1:*/		regs.LR = 0x8215CBC0; return 0x82091258;
		/* 8215CBBCh case    1:*/		return 0x8215CBC0;
		  /* 8215CBC0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215CBC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215CBC0h case    2:*/		return 0x8215CBC4;
		  /* 8215CBC4h */ case    3:  		/* lis R11, -32253 */
		/* 8215CBC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215CBC4h case    3:*/		return 0x8215CBC8;
		  /* 8215CBC8h */ case    4:  		/* lis R10, -32252 */
		/* 8215CBC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CBC8h case    4:*/		return 0x8215CBCC;
		  /* 8215CBCCh */ case    5:  		/* mr R31, R3 */
		/* 8215CBCCh case    5:*/		regs.R31 = regs.R3;
		/* 8215CBCCh case    5:*/		return 0x8215CBD0;
		  /* 8215CBD0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215CBD0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CBD0h case    6:*/		return 0x8215CBD4;
		  /* 8215CBD4h */ case    7:  		/* addi R29, R11, 27460 */
		/* 8215CBD4h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215CBD4h case    7:*/		return 0x8215CBD8;
		  /* 8215CBD8h */ case    8:  		/* addi R28, R10, -21920 */
		/* 8215CBD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFAA60);
		/* 8215CBD8h case    8:*/		return 0x8215CBDC;
		  /* 8215CBDCh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CBDCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215CBFC;  }
		/* 8215CBDCh case    9:*/		return 0x8215CBE0;
		  /* 8215CBE0h */ case   10:  		/* lis R11, -32252 */
		/* 8215CBE0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CBE0h case   10:*/		return 0x8215CBE4;
		  /* 8215CBE4h */ case   11:  		/* mr R6, R28 */
		/* 8215CBE4h case   11:*/		regs.R6 = regs.R28;
		/* 8215CBE4h case   11:*/		return 0x8215CBE8;
		  /* 8215CBE8h */ case   12:  		/* addi R5, R11, -21312 */
		/* 8215CBE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215CBE8h case   12:*/		return 0x8215CBEC;
		  /* 8215CBECh */ case   13:  		/* mr R4, R29 */
		/* 8215CBECh case   13:*/		regs.R4 = regs.R29;
		/* 8215CBECh case   13:*/		return 0x8215CBF0;
		  /* 8215CBF0h */ case   14:  		/* li R7, 3430 */
		/* 8215CBF0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xD66);
		/* 8215CBF0h case   14:*/		return 0x8215CBF4;
		  /* 8215CBF4h */ case   15:  		/* li R3, 0 */
		/* 8215CBF4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CBF4h case   15:*/		return 0x8215CBF8;
		  /* 8215CBF8h */ case   16:  		/* bl -20464 */
		/* 8215CBF8h case   16:*/		regs.LR = 0x8215CBFC; return 0x82157C08;
		/* 8215CBF8h case   16:*/		return 0x8215CBFC;
	}
	return 0x8215CBFC;
} // Block from 8215CBB8h-8215CBFCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215CBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CBFC);
		  /* 8215CBFCh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CBFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CBFCh case    0:*/		return 0x8215CC00;
		  /* 8215CC00h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CC00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CC00h case    1:*/		return 0x8215CC04;
		  /* 8215CC04h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CC04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CC10;  }
		/* 8215CC04h case    2:*/		return 0x8215CC08;
		  /* 8215CC08h */ case    3:  		/* li R3, 0 */
		/* 8215CC08h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CC08h case    3:*/		return 0x8215CC0C;
		  /* 8215CC0Ch */ case    4:  		/* b 124 */
		/* 8215CC0Ch case    4:*/		return 0x8215CC88;
		/* 8215CC0Ch case    4:*/		return 0x8215CC10;
	}
	return 0x8215CC10;
} // Block from 8215CBFCh-8215CC10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC10);
		  /* 8215CC10h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CC10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CC10h case    0:*/		return 0x8215CC14;
		  /* 8215CC14h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215CC14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215CC14h case    1:*/		return 0x8215CC18;
		  /* 8215CC18h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8215CC18h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CC24;  }
		/* 8215CC18h case    2:*/		return 0x8215CC1C;
		  /* 8215CC1Ch */ case    3:  		/* li R30, 0 */
		/* 8215CC1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215CC1Ch case    3:*/		return 0x8215CC20;
		  /* 8215CC20h */ case    4:  		/* b 16 */
		/* 8215CC20h case    4:*/		return 0x8215CC30;
		/* 8215CC20h case    4:*/		return 0x8215CC24;
	}
	return 0x8215CC24;
} // Block from 8215CC10h-8215CC24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC24);
		  /* 8215CC24h */ case    0:  		/* lwz R30, <#[R11 + 4]> */
		/* 8215CC24h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8215CC24h case    0:*/		return 0x8215CC28;
		  /* 8215CC28h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215CC28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215CC28h case    1:*/		return 0x8215CC2C;
		  /* 8215CC2Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CC2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CC4C;  }
		/* 8215CC2Ch case    2:*/		return 0x8215CC30;
	}
	return 0x8215CC30;
} // Block from 8215CC24h-8215CC30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC30);
		  /* 8215CC30h */ case    0:  		/* lis R11, -32252 */
		/* 8215CC30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CC30h case    0:*/		return 0x8215CC34;
		  /* 8215CC34h */ case    1:  		/* mr R6, R28 */
		/* 8215CC34h case    1:*/		regs.R6 = regs.R28;
		/* 8215CC34h case    1:*/		return 0x8215CC38;
		  /* 8215CC38h */ case    2:  		/* addi R5, R11, -21268 */
		/* 8215CC38h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACEC);
		/* 8215CC38h case    2:*/		return 0x8215CC3C;
		  /* 8215CC3Ch */ case    3:  		/* mr R4, R29 */
		/* 8215CC3Ch case    3:*/		regs.R4 = regs.R29;
		/* 8215CC3Ch case    3:*/		return 0x8215CC40;
		  /* 8215CC40h */ case    4:  		/* li R7, 3441 */
		/* 8215CC40h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xD71);
		/* 8215CC40h case    4:*/		return 0x8215CC44;
		  /* 8215CC44h */ case    5:  		/* li R3, 0 */
		/* 8215CC44h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CC44h case    5:*/		return 0x8215CC48;
		  /* 8215CC48h */ case    6:  		/* bl -20544 */
		/* 8215CC48h case    6:*/		regs.LR = 0x8215CC4C; return 0x82157C08;
		/* 8215CC48h case    6:*/		return 0x8215CC4C;
	}
	return 0x8215CC4C;
} // Block from 8215CC30h-8215CC4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC4C);
		  /* 8215CC4Ch */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CC4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CC4Ch case    0:*/		return 0x8215CC50;
		  /* 8215CC50h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8215CC50h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8215CC50h case    1:*/		return 0x8215CC54;
		  /* 8215CC54h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CC54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CC74;  }
		/* 8215CC54h case    2:*/		return 0x8215CC58;
		  /* 8215CC58h */ case    3:  		/* lis R11, -32252 */
		/* 8215CC58h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CC58h case    3:*/		return 0x8215CC5C;
		  /* 8215CC5Ch */ case    4:  		/* mr R6, R28 */
		/* 8215CC5Ch case    4:*/		regs.R6 = regs.R28;
		/* 8215CC5Ch case    4:*/		return 0x8215CC60;
		  /* 8215CC60h */ case    5:  		/* addi R5, R11, -21228 */
		/* 8215CC60h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD14);
		/* 8215CC60h case    5:*/		return 0x8215CC64;
		  /* 8215CC64h */ case    6:  		/* mr R4, R29 */
		/* 8215CC64h case    6:*/		regs.R4 = regs.R29;
		/* 8215CC64h case    6:*/		return 0x8215CC68;
		  /* 8215CC68h */ case    7:  		/* li R7, 3444 */
		/* 8215CC68h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xD74);
		/* 8215CC68h case    7:*/		return 0x8215CC6C;
		  /* 8215CC6Ch */ case    8:  		/* li R3, 0 */
		/* 8215CC6Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CC6Ch case    8:*/		return 0x8215CC70;
		  /* 8215CC70h */ case    9:  		/* bl -20584 */
		/* 8215CC70h case    9:*/		regs.LR = 0x8215CC74; return 0x82157C08;
		/* 8215CC70h case    9:*/		return 0x8215CC74;
	}
	return 0x8215CC74;
} // Block from 8215CC4Ch-8215CC74h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC74);
		  /* 8215CC74h */ case    0:  		/* mr R3, R30 */
		/* 8215CC74h case    0:*/		regs.R3 = regs.R30;
		/* 8215CC74h case    0:*/		return 0x8215CC78;
		  /* 8215CC78h */ case    1:  		/* bl -6600 */
		/* 8215CC78h case    1:*/		regs.LR = 0x8215CC7C; return 0x8215B2B0;
		/* 8215CC78h case    1:*/		return 0x8215CC7C;
		  /* 8215CC7Ch */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CC7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CC7Ch case    2:*/		return 0x8215CC80;
		  /* 8215CC80h */ case    3:  		/* addi R11, R11, -1 */
		/* 8215CC80h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215CC80h case    3:*/		return 0x8215CC84;
		  /* 8215CC84h */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 8215CC84h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CC84h case    4:*/		return 0x8215CC88;
	}
	return 0x8215CC88;
} // Block from 8215CC74h-8215CC88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC88);
		  /* 8215CC88h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215CC88h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215CC88h case    0:*/		return 0x8215CC8C;
		  /* 8215CC8Ch */ case    1:  		/* b -834020 */
		/* 8215CC8Ch case    1:*/		return 0x820912A8;
		/* 8215CC8Ch case    1:*/		return 0x8215CC90;
	}
	return 0x8215CC90;
} // Block from 8215CC88h-8215CC90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CC90);
		  /* 8215CC90h */ case    0:  		/* mfspr R12, LR */
		/* 8215CC90h case    0:*/		regs.R12 = regs.LR;
		/* 8215CC90h case    0:*/		return 0x8215CC94;
		  /* 8215CC94h */ case    1:  		/* bl -834108 */
		/* 8215CC94h case    1:*/		regs.LR = 0x8215CC98; return 0x82091258;
		/* 8215CC94h case    1:*/		return 0x8215CC98;
		  /* 8215CC98h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215CC98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215CC98h case    2:*/		return 0x8215CC9C;
		  /* 8215CC9Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215CC9Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215CC9Ch case    3:*/		return 0x8215CCA0;
	}
	return 0x8215CCA0;
} // Block from 8215CC90h-8215CCA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215CCA0h
// Function '?INTLIST_DestroyList@XGRAPHICS@@YAXPAU_INTEGER_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CCA0);
		  /* 8215CCA0h */ case    0:  		/* lis R10, -32252 */
		/* 8215CCA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CCA0h case    0:*/		return 0x8215CCA4;
		  /* 8215CCA4h */ case    1:  		/* mr R31, R3 */
		/* 8215CCA4h case    1:*/		regs.R31 = regs.R3;
		/* 8215CCA4h case    1:*/		return 0x8215CCA8;
		  /* 8215CCA8h */ case    2:  		/* mr R28, R4 */
		/* 8215CCA8h case    2:*/		regs.R28 = regs.R4;
		/* 8215CCA8h case    2:*/		return 0x8215CCAC;
		  /* 8215CCACh */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 8215CCACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CCACh case    3:*/		return 0x8215CCB0;
		  /* 8215CCB0h */ case    4:  		/* addi R30, R11, 27460 */
		/* 8215CCB0h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215CCB0h case    4:*/		return 0x8215CCB4;
		  /* 8215CCB4h */ case    5:  		/* addi R29, R10, -21920 */
		/* 8215CCB4h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFAA60);
		/* 8215CCB4h case    5:*/		return 0x8215CCB8;
		  /* 8215CCB8h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CCB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215CCD8;  }
		/* 8215CCB8h case    6:*/		return 0x8215CCBC;
		  /* 8215CCBCh */ case    7:  		/* lis R11, -32252 */
		/* 8215CCBCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CCBCh case    7:*/		return 0x8215CCC0;
		  /* 8215CCC0h */ case    8:  		/* mr R6, R29 */
		/* 8215CCC0h case    8:*/		regs.R6 = regs.R29;
		/* 8215CCC0h case    8:*/		return 0x8215CCC4;
		  /* 8215CCC4h */ case    9:  		/* addi R5, R11, -21312 */
		/* 8215CCC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACC0);
		/* 8215CCC4h case    9:*/		return 0x8215CCC8;
		  /* 8215CCC8h */ case   10:  		/* mr R4, R30 */
		/* 8215CCC8h case   10:*/		regs.R4 = regs.R30;
		/* 8215CCC8h case   10:*/		return 0x8215CCCC;
		  /* 8215CCCCh */ case   11:  		/* li R7, 3473 */
		/* 8215CCCCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0xD91);
		/* 8215CCCCh case   11:*/		return 0x8215CCD0;
		  /* 8215CCD0h */ case   12:  		/* li R3, 0 */
		/* 8215CCD0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CCD0h case   12:*/		return 0x8215CCD4;
		  /* 8215CCD4h */ case   13:  		/* bl -20684 */
		/* 8215CCD4h case   13:*/		regs.LR = 0x8215CCD8; return 0x82157C08;
		/* 8215CCD4h case   13:*/		return 0x8215CCD8;
	}
	return 0x8215CCD8;
} // Block from 8215CCA0h-8215CCD8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215CCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CCD8);
		  /* 8215CCD8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215CCD8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215CCD8h case    0:*/		return 0x8215CCDC;
		  /* 8215CCDCh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CCDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215CCFC;  }
		/* 8215CCDCh case    1:*/		return 0x8215CCE0;
		  /* 8215CCE0h */ case    2:  		/* lis R11, -32252 */
		/* 8215CCE0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CCE0h case    2:*/		return 0x8215CCE4;
		  /* 8215CCE4h */ case    3:  		/* mr R6, R29 */
		/* 8215CCE4h case    3:*/		regs.R6 = regs.R29;
		/* 8215CCE4h case    3:*/		return 0x8215CCE8;
		  /* 8215CCE8h */ case    4:  		/* addi R5, R11, -21672 */
		/* 8215CCE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB58);
		/* 8215CCE8h case    4:*/		return 0x8215CCEC;
		  /* 8215CCECh */ case    5:  		/* mr R4, R30 */
		/* 8215CCECh case    5:*/		regs.R4 = regs.R30;
		/* 8215CCECh case    5:*/		return 0x8215CCF0;
		  /* 8215CCF0h */ case    6:  		/* li R7, 3474 */
		/* 8215CCF0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xD92);
		/* 8215CCF0h case    6:*/		return 0x8215CCF4;
		  /* 8215CCF4h */ case    7:  		/* li R3, 0 */
		/* 8215CCF4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CCF4h case    7:*/		return 0x8215CCF8;
		  /* 8215CCF8h */ case    8:  		/* bl -20720 */
		/* 8215CCF8h case    8:*/		regs.LR = 0x8215CCFC; return 0x82157C08;
		/* 8215CCF8h case    8:*/		return 0x8215CCFC;
	}
	return 0x8215CCFC;
} // Block from 8215CCD8h-8215CCFCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215CCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CCFC);
		  /* 8215CCFCh */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215CCFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CCFCh case    0:*/		return 0x8215CD00;
		  /* 8215CD00h */ case    1:  		/* cmplw CR6, R28, R11 */
		/* 8215CD00h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8215CD00h case    1:*/		return 0x8215CD04;
		  /* 8215CD04h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CD04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215CD24;  }
		/* 8215CD04h case    2:*/		return 0x8215CD08;
		  /* 8215CD08h */ case    3:  		/* lis R11, -32252 */
		/* 8215CD08h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CD08h case    3:*/		return 0x8215CD0C;
		  /* 8215CD0Ch */ case    4:  		/* mr R6, R29 */
		/* 8215CD0Ch case    4:*/		regs.R6 = regs.R29;
		/* 8215CD0Ch case    4:*/		return 0x8215CD10;
		  /* 8215CD10h */ case    5:  		/* addi R5, R11, -21300 */
		/* 8215CD10h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFACCC);
		/* 8215CD10h case    5:*/		return 0x8215CD14;
		  /* 8215CD14h */ case    6:  		/* mr R4, R30 */
		/* 8215CD14h case    6:*/		regs.R4 = regs.R30;
		/* 8215CD14h case    6:*/		return 0x8215CD18;
		  /* 8215CD18h */ case    7:  		/* li R7, 3477 */
		/* 8215CD18h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xD95);
		/* 8215CD18h case    7:*/		return 0x8215CD1C;
		  /* 8215CD1Ch */ case    8:  		/* li R3, 0 */
		/* 8215CD1Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CD1Ch case    8:*/		return 0x8215CD20;
		  /* 8215CD20h */ case    9:  		/* bl -20760 */
		/* 8215CD20h case    9:*/		regs.LR = 0x8215CD24; return 0x82157C08;
		/* 8215CD20h case    9:*/		return 0x8215CD24;
	}
	return 0x8215CD24;
} // Block from 8215CCFCh-8215CD24h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215CD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CD24);
		  /* 8215CD24h */ case    0:  		/* mr R3, R28 */
		/* 8215CD24h case    0:*/		regs.R3 = regs.R28;
		/* 8215CD24h case    0:*/		return 0x8215CD28;
		  /* 8215CD28h */ case    1:  		/* bl -6776 */
		/* 8215CD28h case    1:*/		regs.LR = 0x8215CD2C; return 0x8215B2B0;
		/* 8215CD28h case    1:*/		return 0x8215CD2C;
		  /* 8215CD2Ch */ case    2:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215CD2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CD2Ch case    2:*/		return 0x8215CD30;
		  /* 8215CD30h */ case    3:  		/* addi R11, R11, -1 */
		/* 8215CD30h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215CD30h case    3:*/		return 0x8215CD34;
		  /* 8215CD34h */ case    4:  		/* stw R11, <#[R31 + 20]> */
		/* 8215CD34h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215CD34h case    4:*/		return 0x8215CD38;
		  /* 8215CD38h */ case    5:  		/* addi R1, R1, 128 */
		/* 8215CD38h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215CD38h case    5:*/		return 0x8215CD3C;
		  /* 8215CD3Ch */ case    6:  		/* b -834196 */
		/* 8215CD3Ch case    6:*/		return 0x820912A8;
		/* 8215CD3Ch case    6:*/		return 0x8215CD40;
	}
	return 0x8215CD40;
} // Block from 8215CD24h-8215CD40h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215CD40h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CD40);
		  /* 8215CD40h */ case    0:  		/* mfspr R12, LR */
		/* 8215CD40h case    0:*/		regs.R12 = regs.LR;
		/* 8215CD40h case    0:*/		return 0x8215CD44;
		  /* 8215CD44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215CD44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CD44h case    1:*/		return 0x8215CD48;
		  /* 8215CD48h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215CD48h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CD48h case    2:*/		return 0x8215CD4C;
		  /* 8215CD4Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215CD4Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215CD4Ch case    3:*/		return 0x8215CD50;
		  /* 8215CD50h */ case    4:  		/* mr R31, R3 */
		/* 8215CD50h case    4:*/		regs.R31 = regs.R3;
		/* 8215CD50h case    4:*/		return 0x8215CD54;
		  /* 8215CD54h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8215CD54h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215CD54h case    5:*/		return 0x8215CD58;
		  /* 8215CD58h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 8215CD58h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215CD88;  }
		/* 8215CD58h case    6:*/		return 0x8215CD5C;
		  /* 8215CD5Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215CD5Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CD5Ch case    7:*/		return 0x8215CD60;
		  /* 8215CD60h */ case    8:  		/* lis R10, -32252 */
		/* 8215CD60h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CD60h case    8:*/		return 0x8215CD64;
		  /* 8215CD64h */ case    9:  		/* lis R9, -32253 */
		/* 8215CD64h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215CD64h case    9:*/		return 0x8215CD68;
		  /* 8215CD68h */ case   10:  		/* addi R6, R11, -21920 */
		/* 8215CD68h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215CD68h case   10:*/		return 0x8215CD6C;
		  /* 8215CD6Ch */ case   11:  		/* addi R5, R10, -21672 */
		/* 8215CD6Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAB58);
		/* 8215CD6Ch case   11:*/		return 0x8215CD70;
		  /* 8215CD70h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215CD70h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215CD70h case   12:*/		return 0x8215CD74;
		  /* 8215CD74h */ case   13:  		/* li R7, 3540 */
		/* 8215CD74h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xDD4);
		/* 8215CD74h case   13:*/		return 0x8215CD78;
		  /* 8215CD78h */ case   14:  		/* li R3, 0 */
		/* 8215CD78h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CD78h case   14:*/		return 0x8215CD7C;
		  /* 8215CD7Ch */ case   15:  		/* bl -20852 */
		/* 8215CD7Ch case   15:*/		regs.LR = 0x8215CD80; return 0x82157C08;
		/* 8215CD7Ch case   15:*/		return 0x8215CD80;
		  /* 8215CD80h */ case   16:  		/* li R11, 0 */
		/* 8215CD80h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215CD80h case   16:*/		return 0x8215CD84;
		  /* 8215CD84h */ case   17:  		/* b 8 */
		/* 8215CD84h case   17:*/		return 0x8215CD8C;
		/* 8215CD84h case   17:*/		return 0x8215CD88;
	}
	return 0x8215CD88;
} // Block from 8215CD40h-8215CD88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215CD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CD88);
		  /* 8215CD88h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 8215CD88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8215CD88h case    0:*/		return 0x8215CD8C;
	}
	return 0x8215CD8C;
} // Block from 8215CD88h-8215CD8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CD8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CD8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CD8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CD8C);
		  /* 8215CD8Ch */ case    0:  		/* lwz R10, <#[R31 + 16]> */
		/* 8215CD8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8215CD8Ch case    0:*/		return 0x8215CD90;
		  /* 8215CD90h */ case    1:  		/* subf R10, R11, R10 */
		/* 8215CD90h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8215CD90h case    1:*/		return 0x8215CD94;
		  /* 8215CD94h */ case    2:  		/* subfic R10, R10, 0 */
		/* 8215CD94h case    2:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x0);
		/* 8215CD94h case    2:*/		return 0x8215CD98;
		  /* 8215CD98h */ case    3:  		/* subfe R10, R10, R10 */
		/* 8215CD98h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8215CD98h case    3:*/		return 0x8215CD9C;
		  /* 8215CD9Ch */ case    4:  		/* and R3, R10, R11 */
		/* 8215CD9Ch case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 8215CD9Ch case    4:*/		return 0x8215CDA0;
		  /* 8215CDA0h */ case    5:  		/* addi R1, R1, 96 */
		/* 8215CDA0h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215CDA0h case    5:*/		return 0x8215CDA4;
		  /* 8215CDA4h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215CDA4h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CDA4h case    6:*/		return 0x8215CDA8;
		  /* 8215CDA8h */ case    7:  		/* mtspr LR, R12 */
		/* 8215CDA8h case    7:*/		regs.LR = regs.R12;
		/* 8215CDA8h case    7:*/		return 0x8215CDAC;
		  /* 8215CDACh */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 8215CDACh case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CDACh case    8:*/		return 0x8215CDB0;
		  /* 8215CDB0h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8215CDB0h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215CDB0h case    9:*/		return 0x8215CDB4;
	}
	return 0x8215CDB4;
} // Block from 8215CD8Ch-8215CDB4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215CDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CDB4);
		  /* 8215CDB4h */ case    0:  		/* nop */
		/* 8215CDB4h case    0:*/		cpu::op::nop();
		/* 8215CDB4h case    0:*/		return 0x8215CDB8;
		  /* 8215CDB8h */ case    1:  		/* mr R4, R3 */
		/* 8215CDB8h case    1:*/		regs.R4 = regs.R3;
		/* 8215CDB8h case    1:*/		return 0x8215CDBC;
		  /* 8215CDBCh */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8215CDBCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CDBCh case    2:*/		return 0x8215CDC0;
		  /* 8215CDC0h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 8215CDC0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215CDE4;  }
		/* 8215CDC0h case    3:*/		return 0x8215CDC4;
		  /* 8215CDC4h */ case    4:  		/* lis R11, -32252 */
		/* 8215CDC4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CDC4h case    4:*/		return 0x8215CDC8;
		  /* 8215CDC8h */ case    5:  		/* lis R10, -32252 */
		/* 8215CDC8h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CDC8h case    5:*/		return 0x8215CDCC;
		  /* 8215CDCCh */ case    6:  		/* lis R9, -32253 */
		/* 8215CDCCh case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215CDCCh case    6:*/		return 0x8215CDD0;
		  /* 8215CDD0h */ case    7:  		/* addi R6, R11, -21920 */
		/* 8215CDD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215CDD0h case    7:*/		return 0x8215CDD4;
		  /* 8215CDD4h */ case    8:  		/* addi R5, R10, -21672 */
		/* 8215CDD4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAB58);
		/* 8215CDD4h case    8:*/		return 0x8215CDD8;
		  /* 8215CDD8h */ case    9:  		/* addi R4, R9, 27460 */
		/* 8215CDD8h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215CDD8h case    9:*/		return 0x8215CDDC;
		  /* 8215CDDCh */ case   10:  		/* li R7, 3575 */
		/* 8215CDDCh case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xDF7);
		/* 8215CDDCh case   10:*/		return 0x8215CDE0;
		  /* 8215CDE0h */ case   11:  		/* b -20952 */
		/* 8215CDE0h case   11:*/		return 0x82157C08;
		/* 8215CDE0h case   11:*/		return 0x8215CDE4;
	}
	return 0x8215CDE4;
} // Block from 8215CDB4h-8215CDE4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215CDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CDE4);
		  /* 8215CDE4h */ case    0:  		/* lwz R3, <#[R4]> */
		/* 8215CDE4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 8215CDE4h case    0:*/		return 0x8215CDE8;
	}
	return 0x8215CDE8;
} // Block from 8215CDE4h-8215CDE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CDE8h
// Function '?INTLIST_GetNumItems@XGRAPHICS@@YAIPAU_INTEGER_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CDE8);
		  /* 8215CDE8h */ case    0:  		/* b 715792 */
		/* 8215CDE8h case    0:*/		return 0x8220B9F8;
		/* 8215CDE8h case    0:*/		return 0x8215CDEC;
		  /* 8215CDECh */ case    1:  		/* nop */
		/* 8215CDECh case    1:*/		cpu::op::nop();
		/* 8215CDECh case    1:*/		return 0x8215CDF0;
	}
	return 0x8215CDF0;
} // Block from 8215CDE8h-8215CDF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CDF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CDF0);
		  /* 8215CDF0h */ case    0:  		/* mfspr R12, LR */
		/* 8215CDF0h case    0:*/		regs.R12 = regs.LR;
		/* 8215CDF0h case    0:*/		return 0x8215CDF4;
		  /* 8215CDF4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215CDF4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CDF4h case    1:*/		return 0x8215CDF8;
		  /* 8215CDF8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215CDF8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CDF8h case    2:*/		return 0x8215CDFC;
		  /* 8215CDFCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215CDFCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215CDFCh case    3:*/		return 0x8215CE00;
		  /* 8215CE00h */ case    4:  		/* mr R31, R3 */
		/* 8215CE00h case    4:*/		regs.R31 = regs.R3;
		/* 8215CE00h case    4:*/		return 0x8215CE04;
		  /* 8215CE04h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215CE04h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215CE04h case    5:*/		return 0x8215CE08;
		  /* 8215CE08h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215CE08h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215CE2C;  }
		/* 8215CE08h case    6:*/		return 0x8215CE0C;
		  /* 8215CE0Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215CE0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CE0Ch case    7:*/		return 0x8215CE10;
		  /* 8215CE10h */ case    8:  		/* lis R10, -32252 */
		/* 8215CE10h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CE10h case    8:*/		return 0x8215CE14;
		  /* 8215CE14h */ case    9:  		/* lis R9, -32253 */
		/* 8215CE14h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215CE14h case    9:*/		return 0x8215CE18;
		  /* 8215CE18h */ case   10:  		/* addi R6, R11, -21920 */
		/* 8215CE18h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215CE18h case   10:*/		return 0x8215CE1C;
		  /* 8215CE1Ch */ case   11:  		/* addi R5, R10, -21672 */
		/* 8215CE1Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAB58);
		/* 8215CE1Ch case   11:*/		return 0x8215CE20;
		  /* 8215CE20h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215CE20h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215CE20h case   12:*/		return 0x8215CE24;
		  /* 8215CE24h */ case   13:  		/* li R7, 3596 */
		/* 8215CE24h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xE0C);
		/* 8215CE24h case   13:*/		return 0x8215CE28;
		  /* 8215CE28h */ case   14:  		/* bl -21024 */
		/* 8215CE28h case   14:*/		regs.LR = 0x8215CE2C; return 0x82157C08;
		/* 8215CE28h case   14:*/		return 0x8215CE2C;
	}
	return 0x8215CE2C;
} // Block from 8215CDF0h-8215CE2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215CE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CE2C);
		  /* 8215CE2Ch */ case    0:  		/* lwz R3, <#[R31 + 12]> */
		/* 8215CE2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215CE2Ch case    0:*/		return 0x8215CE30;
		  /* 8215CE30h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215CE30h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215CE30h case    1:*/		return 0x8215CE34;
		  /* 8215CE34h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215CE34h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CE34h case    2:*/		return 0x8215CE38;
		  /* 8215CE38h */ case    3:  		/* mtspr LR, R12 */
		/* 8215CE38h case    3:*/		regs.LR = regs.R12;
		/* 8215CE38h case    3:*/		return 0x8215CE3C;
		  /* 8215CE3Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215CE3Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CE3Ch case    4:*/		return 0x8215CE40;
	}
	return 0x8215CE40;
} // Block from 8215CE2Ch-8215CE40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215CE40h
// Function '?INTLIST_CreateObjMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CE40);
		  /* 8215CE40h */ case    0:  		/* bclr 20, CR0_LT */
		/* 8215CE40h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215CE40h case    0:*/		return 0x8215CE44;
	}
	return 0x8215CE44;
} // Block from 8215CE40h-8215CE44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CE44);
		  /* 8215CE44h */ case    0:  		/* nop */
		/* 8215CE44h case    0:*/		cpu::op::nop();
		/* 8215CE44h case    0:*/		return 0x8215CE48;
	}
	return 0x8215CE48;
} // Block from 8215CE44h-8215CE48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215CE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CE48);
		  /* 8215CE48h */ case    0:  		/* mfspr R12, LR */
		/* 8215CE48h case    0:*/		regs.R12 = regs.LR;
		/* 8215CE48h case    0:*/		return 0x8215CE4C;
		  /* 8215CE4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215CE4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CE4Ch case    1:*/		return 0x8215CE50;
		  /* 8215CE50h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215CE50h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CE50h case    2:*/		return 0x8215CE54;
		  /* 8215CE54h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215CE54h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215CE54h case    3:*/		return 0x8215CE58;
		  /* 8215CE58h */ case    4:  		/* mr R11, R6 */
		/* 8215CE58h case    4:*/		regs.R11 = regs.R6;
		/* 8215CE58h case    4:*/		return 0x8215CE5C;
		  /* 8215CE5Ch */ case    5:  		/* mr R6, R5 */
		/* 8215CE5Ch case    5:*/		regs.R6 = regs.R5;
		/* 8215CE5Ch case    5:*/		return 0x8215CE60;
		  /* 8215CE60h */ case    6:  		/* mr R7, R3 */
		/* 8215CE60h case    6:*/		regs.R7 = regs.R3;
		/* 8215CE60h case    6:*/		return 0x8215CE64;
		  /* 8215CE64h */ case    7:  		/* mr R5, R4 */
		/* 8215CE64h case    7:*/		regs.R5 = regs.R4;
		/* 8215CE64h case    7:*/		return 0x8215CE68;
		  /* 8215CE68h */ case    8:  		/* li R4, 28 */
		/* 8215CE68h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8215CE68h case    8:*/		return 0x8215CE6C;
		  /* 8215CE6Ch */ case    9:  		/* mr R3, R11 */
		/* 8215CE6Ch case    9:*/		regs.R3 = regs.R11;
		/* 8215CE6Ch case    9:*/		return 0x8215CE70;
		  /* 8215CE70h */ case   10:  		/* bl 715104 */
		/* 8215CE70h case   10:*/		regs.LR = 0x8215CE74; return 0x8220B7D0;
		/* 8215CE70h case   10:*/		return 0x8215CE74;
		  /* 8215CE74h */ case   11:  		/* or. R31, R3, R3 */
		/* 8215CE74h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215CE74h case   11:*/		return 0x8215CE78;
		  /* 8215CE78h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215CE78h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215CEA0;  }
		/* 8215CE78h case   12:*/		return 0x8215CE7C;
		  /* 8215CE7Ch */ case   13:  		/* lis R11, -32252 */
		/* 8215CE7Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CE7Ch case   13:*/		return 0x8215CE80;
		  /* 8215CE80h */ case   14:  		/* lis R10, -32252 */
		/* 8215CE80h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CE80h case   14:*/		return 0x8215CE84;
		  /* 8215CE84h */ case   15:  		/* lis R9, -32253 */
		/* 8215CE84h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215CE84h case   15:*/		return 0x8215CE88;
		  /* 8215CE88h */ case   16:  		/* addi R6, R11, -21920 */
		/* 8215CE88h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215CE88h case   16:*/		return 0x8215CE8C;
		  /* 8215CE8Ch */ case   17:  		/* addi R5, R10, -21480 */
		/* 8215CE8Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215CE8Ch case   17:*/		return 0x8215CE90;
		  /* 8215CE90h */ case   18:  		/* addi R4, R9, 27460 */
		/* 8215CE90h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215CE90h case   18:*/		return 0x8215CE94;
		  /* 8215CE94h */ case   19:  		/* li R7, 3636 */
		/* 8215CE94h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xE34);
		/* 8215CE94h case   19:*/		return 0x8215CE98;
		  /* 8215CE98h */ case   20:  		/* li R3, 0 */
		/* 8215CE98h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CE98h case   20:*/		return 0x8215CE9C;
		  /* 8215CE9Ch */ case   21:  		/* bl -21140 */
		/* 8215CE9Ch case   21:*/		regs.LR = 0x8215CEA0; return 0x82157C08;
		/* 8215CE9Ch case   21:*/		return 0x8215CEA0;
	}
	return 0x8215CEA0;
} // Block from 8215CE48h-8215CEA0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215CEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CEA0);
		  /* 8215CEA0h */ case    0:  		/* mr R3, R31 */
		/* 8215CEA0h case    0:*/		regs.R3 = regs.R31;
		/* 8215CEA0h case    0:*/		return 0x8215CEA4;
		  /* 8215CEA4h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215CEA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215CEA4h case    1:*/		return 0x8215CEA8;
		  /* 8215CEA8h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215CEA8h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CEA8h case    2:*/		return 0x8215CEAC;
		  /* 8215CEACh */ case    3:  		/* mtspr LR, R12 */
		/* 8215CEACh case    3:*/		regs.LR = regs.R12;
		/* 8215CEACh case    3:*/		return 0x8215CEB0;
	}
	return 0x8215CEB0;
} // Block from 8215CEA0h-8215CEB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215CEB0h
// Function '?INTLIST_CreateItemMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CEB0);
		  /* 8215CEB0h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 8215CEB0h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CEB0h case    0:*/		return 0x8215CEB4;
		  /* 8215CEB4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215CEB4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215CEB4h case    1:*/		return 0x8215CEB8;
	}
	return 0x8215CEB8;
} // Block from 8215CEB0h-8215CEB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CEB8);
		  /* 8215CEB8h */ case    0:  		/* mfspr R12, LR */
		/* 8215CEB8h case    0:*/		regs.R12 = regs.LR;
		/* 8215CEB8h case    0:*/		return 0x8215CEBC;
		  /* 8215CEBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215CEBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CEBCh case    1:*/		return 0x8215CEC0;
		  /* 8215CEC0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215CEC0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CEC0h case    2:*/		return 0x8215CEC4;
		  /* 8215CEC4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215CEC4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215CEC4h case    3:*/		return 0x8215CEC8;
		  /* 8215CEC8h */ case    4:  		/* mr R11, R6 */
		/* 8215CEC8h case    4:*/		regs.R11 = regs.R6;
		/* 8215CEC8h case    4:*/		return 0x8215CECC;
		  /* 8215CECCh */ case    5:  		/* mr R6, R5 */
		/* 8215CECCh case    5:*/		regs.R6 = regs.R5;
		/* 8215CECCh case    5:*/		return 0x8215CED0;
		  /* 8215CED0h */ case    6:  		/* mr R7, R3 */
		/* 8215CED0h case    6:*/		regs.R7 = regs.R3;
		/* 8215CED0h case    6:*/		return 0x8215CED4;
		  /* 8215CED4h */ case    7:  		/* mr R5, R4 */
		/* 8215CED4h case    7:*/		regs.R5 = regs.R4;
		/* 8215CED4h case    7:*/		return 0x8215CED8;
		  /* 8215CED8h */ case    8:  		/* li R4, 16 */
		/* 8215CED8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8215CED8h case    8:*/		return 0x8215CEDC;
		  /* 8215CEDCh */ case    9:  		/* mr R3, R11 */
		/* 8215CEDCh case    9:*/		regs.R3 = regs.R11;
		/* 8215CEDCh case    9:*/		return 0x8215CEE0;
		  /* 8215CEE0h */ case   10:  		/* bl 714992 */
		/* 8215CEE0h case   10:*/		regs.LR = 0x8215CEE4; return 0x8220B7D0;
		/* 8215CEE0h case   10:*/		return 0x8215CEE4;
		  /* 8215CEE4h */ case   11:  		/* or. R31, R3, R3 */
		/* 8215CEE4h case   11:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215CEE4h case   11:*/		return 0x8215CEE8;
		  /* 8215CEE8h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8215CEE8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8215CF10;  }
		/* 8215CEE8h case   12:*/		return 0x8215CEEC;
		  /* 8215CEECh */ case   13:  		/* lis R11, -32252 */
		/* 8215CEECh case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CEECh case   13:*/		return 0x8215CEF0;
		  /* 8215CEF0h */ case   14:  		/* lis R10, -32252 */
		/* 8215CEF0h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CEF0h case   14:*/		return 0x8215CEF4;
		  /* 8215CEF4h */ case   15:  		/* lis R9, -32253 */
		/* 8215CEF4h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215CEF4h case   15:*/		return 0x8215CEF8;
		  /* 8215CEF8h */ case   16:  		/* addi R6, R11, -21920 */
		/* 8215CEF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFAA60);
		/* 8215CEF8h case   16:*/		return 0x8215CEFC;
		  /* 8215CEFCh */ case   17:  		/* addi R5, R10, -21480 */
		/* 8215CEFCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFAC18);
		/* 8215CEFCh case   17:*/		return 0x8215CF00;
		  /* 8215CF00h */ case   18:  		/* addi R4, R9, 27460 */
		/* 8215CF00h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215CF00h case   18:*/		return 0x8215CF04;
		  /* 8215CF04h */ case   19:  		/* li R7, 3676 */
		/* 8215CF04h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0xE5C);
		/* 8215CF04h case   19:*/		return 0x8215CF08;
		  /* 8215CF08h */ case   20:  		/* li R3, 0 */
		/* 8215CF08h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CF08h case   20:*/		return 0x8215CF0C;
		  /* 8215CF0Ch */ case   21:  		/* bl -21252 */
		/* 8215CF0Ch case   21:*/		regs.LR = 0x8215CF10; return 0x82157C08;
		/* 8215CF0Ch case   21:*/		return 0x8215CF10;
	}
	return 0x8215CF10;
} // Block from 8215CEB8h-8215CF10h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8215CF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CF10);
		  /* 8215CF10h */ case    0:  		/* mr R3, R31 */
		/* 8215CF10h case    0:*/		regs.R3 = regs.R31;
		/* 8215CF10h case    0:*/		return 0x8215CF14;
		  /* 8215CF14h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215CF14h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215CF14h case    1:*/		return 0x8215CF18;
		  /* 8215CF18h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215CF18h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215CF18h case    2:*/		return 0x8215CF1C;
		  /* 8215CF1Ch */ case    3:  		/* mtspr LR, R12 */
		/* 8215CF1Ch case    3:*/		regs.LR = regs.R12;
		/* 8215CF1Ch case    3:*/		return 0x8215CF20;
	}
	return 0x8215CF20;
} // Block from 8215CF10h-8215CF20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215CF20h
// Function '?OBJLIST_InitList@XGRAPHICS@@YAXPAU_OBJECT_LIST@1@PAU_MEM_HEAD@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CF20);
		  /* 8215CF20h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 8215CF20h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215CF20h case    0:*/		return 0x8215CF24;
		  /* 8215CF24h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215CF24h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215CF24h case    1:*/		return 0x8215CF28;
	}
	return 0x8215CF28;
} // Block from 8215CF20h-8215CF28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CF28);
		  /* 8215CF28h */ case    0:  		/* li R3, 28 */
		/* 8215CF28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 8215CF28h case    0:*/		return 0x8215CF2C;
		  /* 8215CF2Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215CF2Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215CF2Ch case    1:*/		return 0x8215CF30;
	}
	return 0x8215CF30;
} // Block from 8215CF28h-8215CF30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215CF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CF30);
		  /* 8215CF30h */ case    0:  		/* mfspr R12, LR */
		/* 8215CF30h case    0:*/		regs.R12 = regs.LR;
		/* 8215CF30h case    0:*/		return 0x8215CF34;
		  /* 8215CF34h */ case    1:  		/* bl -834792 */
		/* 8215CF34h case    1:*/		regs.LR = 0x8215CF38; return 0x8209124C;
		/* 8215CF34h case    1:*/		return 0x8215CF38;
		  /* 8215CF38h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215CF38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215CF38h case    2:*/		return 0x8215CF3C;
		  /* 8215CF3Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215CF3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215CF3Ch case    3:*/		return 0x8215CF40;
		  /* 8215CF40h */ case    4:  		/* lis R10, -32252 */
		/* 8215CF40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215CF40h case    4:*/		return 0x8215CF44;
		  /* 8215CF44h */ case    5:  		/* mr R29, R3 */
		/* 8215CF44h case    5:*/		regs.R29 = regs.R3;
		/* 8215CF44h case    5:*/		return 0x8215CF48;
		  /* 8215CF48h */ case    6:  		/* mr R30, R4 */
		/* 8215CF48h case    6:*/		regs.R30 = regs.R4;
		/* 8215CF48h case    6:*/		return 0x8215CF4C;
		  /* 8215CF4Ch */ case    7:  		/* mr R28, R5 */
		/* 8215CF4Ch case    7:*/		regs.R28 = regs.R5;
		/* 8215CF4Ch case    7:*/		return 0x8215CF50;
		  /* 8215CF50h */ case    8:  		/* mr R25, R6 */
		/* 8215CF50h case    8:*/		regs.R25 = regs.R6;
		/* 8215CF50h case    8:*/		return 0x8215CF54;
		  /* 8215CF54h */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 8215CF54h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215CF54h case    9:*/		return 0x8215CF58;
		  /* 8215CF58h */ case   10:  		/* addi R27, R11, 27460 */
		/* 8215CF58h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215CF58h case   10:*/		return 0x8215CF5C;
		  /* 8215CF5Ch */ case   11:  		/* addi R26, R10, -21920 */
		/* 8215CF5Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFAA60);
		/* 8215CF5Ch case   11:*/		return 0x8215CF60;
		  /* 8215CF60h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CF60h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215CF80;  }
		/* 8215CF60h case   12:*/		return 0x8215CF64;
		  /* 8215CF64h */ case   13:  		/* lis R11, -32252 */
		/* 8215CF64h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CF64h case   13:*/		return 0x8215CF68;
		  /* 8215CF68h */ case   14:  		/* mr R6, R26 */
		/* 8215CF68h case   14:*/		regs.R6 = regs.R26;
		/* 8215CF68h case   14:*/		return 0x8215CF6C;
		  /* 8215CF6Ch */ case   15:  		/* addi R5, R11, -21620 */
		/* 8215CF6Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8215CF6Ch case   15:*/		return 0x8215CF70;
		  /* 8215CF70h */ case   16:  		/* mr R4, R27 */
		/* 8215CF70h case   16:*/		regs.R4 = regs.R27;
		/* 8215CF70h case   16:*/		return 0x8215CF74;
		  /* 8215CF74h */ case   17:  		/* li R7, 2860 */
		/* 8215CF74h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xB2C);
		/* 8215CF74h case   17:*/		return 0x8215CF78;
		  /* 8215CF78h */ case   18:  		/* li R3, 0 */
		/* 8215CF78h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CF78h case   18:*/		return 0x8215CF7C;
		  /* 8215CF7Ch */ case   19:  		/* bl -21364 */
		/* 8215CF7Ch case   19:*/		regs.LR = 0x8215CF80; return 0x82157C08;
		/* 8215CF7Ch case   19:*/		return 0x8215CF80;
	}
	return 0x8215CF80;
} // Block from 8215CF30h-8215CF80h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215CF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CF80);
		  /* 8215CF80h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215CF80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215CF80h case    0:*/		return 0x8215CF84;
		  /* 8215CF84h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215CF84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215CFA4;  }
		/* 8215CF84h case    1:*/		return 0x8215CF88;
		  /* 8215CF88h */ case    2:  		/* lis R11, -32252 */
		/* 8215CF88h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CF88h case    2:*/		return 0x8215CF8C;
		  /* 8215CF8Ch */ case    3:  		/* mr R6, R26 */
		/* 8215CF8Ch case    3:*/		regs.R6 = regs.R26;
		/* 8215CF8Ch case    3:*/		return 0x8215CF90;
		  /* 8215CF90h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8215CF90h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8215CF90h case    4:*/		return 0x8215CF94;
		  /* 8215CF94h */ case    5:  		/* mr R4, R27 */
		/* 8215CF94h case    5:*/		regs.R4 = regs.R27;
		/* 8215CF94h case    5:*/		return 0x8215CF98;
		  /* 8215CF98h */ case    6:  		/* li R7, 2861 */
		/* 8215CF98h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xB2D);
		/* 8215CF98h case    6:*/		return 0x8215CF9C;
		  /* 8215CF9Ch */ case    7:  		/* li R3, 0 */
		/* 8215CF9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CF9Ch case    7:*/		return 0x8215CFA0;
		  /* 8215CFA0h */ case    8:  		/* bl -21400 */
		/* 8215CFA0h case    8:*/		regs.LR = 0x8215CFA4; return 0x82157C08;
		/* 8215CFA0h case    8:*/		return 0x8215CFA4;
	}
	return 0x8215CFA4;
} // Block from 8215CF80h-8215CFA4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215CFA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CFA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CFA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CFA4);
		  /* 8215CFA4h */ case    0:  		/* li R4, 28 */
		/* 8215CFA4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8215CFA4h case    0:*/		return 0x8215CFA8;
		  /* 8215CFA8h */ case    1:  		/* mtspr CTR, R30 */
		/* 8215CFA8h case    1:*/		regs.CTR = regs.R30;
		/* 8215CFA8h case    1:*/		return 0x8215CFAC;
		  /* 8215CFACh */ case    2:  		/* mr R3, R29 */
		/* 8215CFACh case    2:*/		regs.R3 = regs.R29;
		/* 8215CFACh case    2:*/		return 0x8215CFB0;
		  /* 8215CFB0h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8215CFB0h case    3:*/		if ( 1 ) { regs.LR = 0x8215CFB4; return (uint32)regs.CTR; }
		/* 8215CFB0h case    3:*/		return 0x8215CFB4;
		  /* 8215CFB4h */ case    4:  		/* or. R31, R3, R3 */
		/* 8215CFB4h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215CFB4h case    4:*/		return 0x8215CFB8;
		  /* 8215CFB8h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8215CFB8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215CFD8;  }
		/* 8215CFB8h case    5:*/		return 0x8215CFBC;
		  /* 8215CFBCh */ case    6:  		/* lis R11, -32252 */
		/* 8215CFBCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215CFBCh case    6:*/		return 0x8215CFC0;
		  /* 8215CFC0h */ case    7:  		/* mr R6, R26 */
		/* 8215CFC0h case    7:*/		regs.R6 = regs.R26;
		/* 8215CFC0h case    7:*/		return 0x8215CFC4;
		  /* 8215CFC4h */ case    8:  		/* addi R5, R11, -21644 */
		/* 8215CFC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB74);
		/* 8215CFC4h case    8:*/		return 0x8215CFC8;
		  /* 8215CFC8h */ case    9:  		/* mr R4, R27 */
		/* 8215CFC8h case    9:*/		regs.R4 = regs.R27;
		/* 8215CFC8h case    9:*/		return 0x8215CFCC;
		  /* 8215CFCCh */ case   10:  		/* li R7, 2867 */
		/* 8215CFCCh case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xB33);
		/* 8215CFCCh case   10:*/		return 0x8215CFD0;
		  /* 8215CFD0h */ case   11:  		/* li R3, 0 */
		/* 8215CFD0h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215CFD0h case   11:*/		return 0x8215CFD4;
		  /* 8215CFD4h */ case   12:  		/* bl -21452 */
		/* 8215CFD4h case   12:*/		regs.LR = 0x8215CFD8; return 0x82157C08;
		/* 8215CFD4h case   12:*/		return 0x8215CFD8;
	}
	return 0x8215CFD8;
} // Block from 8215CFA4h-8215CFD8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215CFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215CFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215CFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215CFD8);
		  /* 8215CFD8h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 8215CFD8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8215CFD8h case    0:*/		return 0x8215CFDC;
		  /* 8215CFDCh */ case    1:  		/* mr R7, R29 */
		/* 8215CFDCh case    1:*/		regs.R7 = regs.R29;
		/* 8215CFDCh case    1:*/		return 0x8215CFE0;
		  /* 8215CFE0h */ case    2:  		/* stw R30, <#[R31 + 8]> */
		/* 8215CFE0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8215CFE0h case    2:*/		return 0x8215CFE4;
		  /* 8215CFE4h */ case    3:  		/* mr R6, R28 */
		/* 8215CFE4h case    3:*/		regs.R6 = regs.R28;
		/* 8215CFE4h case    3:*/		return 0x8215CFE8;
		  /* 8215CFE8h */ case    4:  		/* stw R28, <#[R31 + 12]> */
		/* 8215CFE8h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215CFE8h case    4:*/		return 0x8215CFEC;
		  /* 8215CFECh */ case    5:  		/* mr R5, R30 */
		/* 8215CFECh case    5:*/		regs.R5 = regs.R30;
		/* 8215CFECh case    5:*/		return 0x8215CFF0;
		  /* 8215CFF0h */ case    6:  		/* li R4, 16 */
		/* 8215CFF0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8215CFF0h case    6:*/		return 0x8215CFF4;
		  /* 8215CFF4h */ case    7:  		/* mr R3, R25 */
		/* 8215CFF4h case    7:*/		regs.R3 = regs.R25;
		/* 8215CFF4h case    7:*/		return 0x8215CFF8;
		  /* 8215CFF8h */ case    8:  		/* bl 714712 */
		/* 8215CFF8h case    8:*/		regs.LR = 0x8215CFFC; return 0x8220B7D0;
		/* 8215CFF8h case    8:*/		return 0x8215CFFC;
		  /* 8215CFFCh */ case    9:  		/* or. R30, R3, R3 */
		/* 8215CFFCh case    9:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215CFFCh case    9:*/		return 0x8215D000;
		  /* 8215D000h */ case   10:  		/* bc 4, CR0_EQ, 32 */
		/* 8215D000h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8215D020;  }
		/* 8215D000h case   10:*/		return 0x8215D004;
		  /* 8215D004h */ case   11:  		/* lis R11, -32252 */
		/* 8215D004h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D004h case   11:*/		return 0x8215D008;
		  /* 8215D008h */ case   12:  		/* mr R6, R26 */
		/* 8215D008h case   12:*/		regs.R6 = regs.R26;
		/* 8215D008h case   12:*/		return 0x8215D00C;
		  /* 8215D00Ch */ case   13:  		/* addi R5, R11, -21480 */
		/* 8215D00Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAC18);
		/* 8215D00Ch case   13:*/		return 0x8215D010;
		  /* 8215D010h */ case   14:  		/* mr R4, R27 */
		/* 8215D010h case   14:*/		regs.R4 = regs.R27;
		/* 8215D010h case   14:*/		return 0x8215D014;
		  /* 8215D014h */ case   15:  		/* li R7, 2878 */
		/* 8215D014h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xB3E);
		/* 8215D014h case   15:*/		return 0x8215D018;
		  /* 8215D018h */ case   16:  		/* li R3, 0 */
		/* 8215D018h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D018h case   16:*/		return 0x8215D01C;
		  /* 8215D01Ch */ case   17:  		/* bl -21524 */
		/* 8215D01Ch case   17:*/		regs.LR = 0x8215D020; return 0x82157C08;
		/* 8215D01Ch case   17:*/		return 0x8215D020;
	}
	return 0x8215D020;
} // Block from 8215CFD8h-8215D020h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215D020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D020);
		  /* 8215D020h */ case    0:  		/* mr R4, R30 */
		/* 8215D020h case    0:*/		regs.R4 = regs.R30;
		/* 8215D020h case    0:*/		return 0x8215D024;
		  /* 8215D024h */ case    1:  		/* mr R3, R31 */
		/* 8215D024h case    1:*/		regs.R3 = regs.R31;
		/* 8215D024h case    1:*/		return 0x8215D028;
		  /* 8215D028h */ case    2:  		/* bl -2848 */
		/* 8215D028h case    2:*/		regs.LR = 0x8215D02C; return 0x8215C508;
		/* 8215D028h case    2:*/		return 0x8215D02C;
		  /* 8215D02Ch */ case    3:  		/* li R11, 0 */
		/* 8215D02Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215D02Ch case    3:*/		return 0x8215D030;
		  /* 8215D030h */ case    4:  		/* mr R3, R31 */
		/* 8215D030h case    4:*/		regs.R3 = regs.R31;
		/* 8215D030h case    4:*/		return 0x8215D034;
		  /* 8215D034h */ case    5:  		/* stw R11, <#[R31 + 24]> */
		/* 8215D034h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215D034h case    5:*/		return 0x8215D038;
		  /* 8215D038h */ case    6:  		/* addi R1, R1, 144 */
		/* 8215D038h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215D038h case    6:*/		return 0x8215D03C;
		  /* 8215D03Ch */ case    7:  		/* b -834976 */
		/* 8215D03Ch case    7:*/		return 0x8209129C;
		/* 8215D03Ch case    7:*/		return 0x8215D040;
	}
	return 0x8215D040;
} // Block from 8215D020h-8215D040h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D040h
// Function '?OBJLIST_DestroyList@XGRAPHICS@@YAXPAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D040);
		  /* 8215D040h */ case    0:  		/* mfspr R12, LR */
		/* 8215D040h case    0:*/		regs.R12 = regs.LR;
		/* 8215D040h case    0:*/		return 0x8215D044;
		  /* 8215D044h */ case    1:  		/* bl -835080 */
		/* 8215D044h case    1:*/		regs.LR = 0x8215D048; return 0x8209123C;
		/* 8215D044h case    1:*/		return 0x8215D048;
		  /* 8215D048h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8215D048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8215D048h case    2:*/		return 0x8215D04C;
		  /* 8215D04Ch */ case    3:  		/* mr R21, R10 */
		/* 8215D04Ch case    3:*/		regs.R21 = regs.R10;
		/* 8215D04Ch case    3:*/		return 0x8215D050;
		  /* 8215D050h */ case    4:  		/* lis R11, -32253 */
		/* 8215D050h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D050h case    4:*/		return 0x8215D054;
		  /* 8215D054h */ case    5:  		/* lis R10, -32252 */
		/* 8215D054h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D054h case    5:*/		return 0x8215D058;
		  /* 8215D058h */ case    6:  		/* mr R24, R3 */
		/* 8215D058h case    6:*/		regs.R24 = regs.R3;
		/* 8215D058h case    6:*/		return 0x8215D05C;
		  /* 8215D05Ch */ case    7:  		/* mr R29, R4 */
		/* 8215D05Ch case    7:*/		regs.R29 = regs.R4;
		/* 8215D05Ch case    7:*/		return 0x8215D060;
		  /* 8215D060h */ case    8:  		/* mr R23, R5 */
		/* 8215D060h case    8:*/		regs.R23 = regs.R5;
		/* 8215D060h case    8:*/		return 0x8215D064;
		  /* 8215D064h */ case    9:  		/* mr R22, R6 */
		/* 8215D064h case    9:*/		regs.R22 = regs.R6;
		/* 8215D064h case    9:*/		return 0x8215D068;
		  /* 8215D068h */ case   10:  		/* mr R26, R7 */
		/* 8215D068h case   10:*/		regs.R26 = regs.R7;
		/* 8215D068h case   10:*/		return 0x8215D06C;
		  /* 8215D06Ch */ case   11:  		/* mr R25, R8 */
		/* 8215D06Ch case   11:*/		regs.R25 = regs.R8;
		/* 8215D06Ch case   11:*/		return 0x8215D070;
		  /* 8215D070h */ case   12:  		/* mr R30, R9 */
		/* 8215D070h case   12:*/		regs.R30 = regs.R9;
		/* 8215D070h case   12:*/		return 0x8215D074;
		  /* 8215D074h */ case   13:  		/* cmplwi CR6, R4, 0 */
		/* 8215D074h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215D074h case   13:*/		return 0x8215D078;
		  /* 8215D078h */ case   14:  		/* addi R28, R11, 27460 */
		/* 8215D078h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215D078h case   14:*/		return 0x8215D07C;
		  /* 8215D07Ch */ case   15:  		/* addi R27, R10, -21088 */
		/* 8215D07Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFADA0);
		/* 8215D07Ch case   15:*/		return 0x8215D080;
		  /* 8215D080h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D080h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8215D0A0;  }
		/* 8215D080h case   16:*/		return 0x8215D084;
		  /* 8215D084h */ case   17:  		/* lis R11, -32252 */
		/* 8215D084h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D084h case   17:*/		return 0x8215D088;
		  /* 8215D088h */ case   18:  		/* mr R6, R27 */
		/* 8215D088h case   18:*/		regs.R6 = regs.R27;
		/* 8215D088h case   18:*/		return 0x8215D08C;
		  /* 8215D08Ch */ case   19:  		/* addi R5, R11, -21620 */
		/* 8215D08Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8215D08Ch case   19:*/		return 0x8215D090;
		  /* 8215D090h */ case   20:  		/* mr R4, R28 */
		/* 8215D090h case   20:*/		regs.R4 = regs.R28;
		/* 8215D090h case   20:*/		return 0x8215D094;
		  /* 8215D094h */ case   21:  		/* li R7, 155 */
		/* 8215D094h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x9B);
		/* 8215D094h case   21:*/		return 0x8215D098;
		  /* 8215D098h */ case   22:  		/* li R3, 0 */
		/* 8215D098h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D098h case   22:*/		return 0x8215D09C;
		  /* 8215D09Ch */ case   23:  		/* bl -21652 */
		/* 8215D09Ch case   23:*/		regs.LR = 0x8215D0A0; return 0x82157C08;
		/* 8215D09Ch case   23:*/		return 0x8215D0A0;
	}
	return 0x8215D0A0;
} // Block from 8215D040h-8215D0A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8215D0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D0A0);
		  /* 8215D0A0h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8215D0A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8215D0A0h case    0:*/		return 0x8215D0A4;
		  /* 8215D0A4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D0A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D0C4;  }
		/* 8215D0A4h case    1:*/		return 0x8215D0A8;
		  /* 8215D0A8h */ case    2:  		/* lis R11, -32252 */
		/* 8215D0A8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D0A8h case    2:*/		return 0x8215D0AC;
		  /* 8215D0ACh */ case    3:  		/* mr R6, R27 */
		/* 8215D0ACh case    3:*/		regs.R6 = regs.R27;
		/* 8215D0ACh case    3:*/		return 0x8215D0B0;
		  /* 8215D0B0h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8215D0B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8215D0B0h case    4:*/		return 0x8215D0B4;
		  /* 8215D0B4h */ case    5:  		/* mr R4, R28 */
		/* 8215D0B4h case    5:*/		regs.R4 = regs.R28;
		/* 8215D0B4h case    5:*/		return 0x8215D0B8;
		  /* 8215D0B8h */ case    6:  		/* li R7, 156 */
		/* 8215D0B8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9C);
		/* 8215D0B8h case    6:*/		return 0x8215D0BC;
		  /* 8215D0BCh */ case    7:  		/* li R3, 0 */
		/* 8215D0BCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D0BCh case    7:*/		return 0x8215D0C0;
		  /* 8215D0C0h */ case    8:  		/* bl -21688 */
		/* 8215D0C0h case    8:*/		regs.LR = 0x8215D0C4; return 0x82157C08;
		/* 8215D0C0h case    8:*/		return 0x8215D0C4;
	}
	return 0x8215D0C4;
} // Block from 8215D0A0h-8215D0C4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D0C4);
		  /* 8215D0C4h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8215D0C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8215D0C4h case    0:*/		return 0x8215D0C8;
		  /* 8215D0C8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D0C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D0E8;  }
		/* 8215D0C8h case    1:*/		return 0x8215D0CC;
		  /* 8215D0CCh */ case    2:  		/* lis R11, -32252 */
		/* 8215D0CCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D0CCh case    2:*/		return 0x8215D0D0;
		  /* 8215D0D0h */ case    3:  		/* mr R6, R27 */
		/* 8215D0D0h case    3:*/		regs.R6 = regs.R27;
		/* 8215D0D0h case    3:*/		return 0x8215D0D4;
		  /* 8215D0D4h */ case    4:  		/* addi R5, R11, -21104 */
		/* 8215D0D4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 8215D0D4h case    4:*/		return 0x8215D0D8;
		  /* 8215D0D8h */ case    5:  		/* mr R4, R28 */
		/* 8215D0D8h case    5:*/		regs.R4 = regs.R28;
		/* 8215D0D8h case    5:*/		return 0x8215D0DC;
		  /* 8215D0DCh */ case    6:  		/* li R7, 157 */
		/* 8215D0DCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9D);
		/* 8215D0DCh case    6:*/		return 0x8215D0E0;
		  /* 8215D0E0h */ case    7:  		/* li R3, 0 */
		/* 8215D0E0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D0E0h case    7:*/		return 0x8215D0E4;
		  /* 8215D0E4h */ case    8:  		/* bl -21724 */
		/* 8215D0E4h case    8:*/		regs.LR = 0x8215D0E8; return 0x82157C08;
		/* 8215D0E4h case    8:*/		return 0x8215D0E8;
	}
	return 0x8215D0E8;
} // Block from 8215D0C4h-8215D0E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D0E8);
		  /* 8215D0E8h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8215D0E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215D0E8h case    0:*/		return 0x8215D0EC;
		  /* 8215D0ECh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D0ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D10C;  }
		/* 8215D0ECh case    1:*/		return 0x8215D0F0;
		  /* 8215D0F0h */ case    2:  		/* lis R11, -32252 */
		/* 8215D0F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D0F0h case    2:*/		return 0x8215D0F4;
		  /* 8215D0F4h */ case    3:  		/* mr R6, R27 */
		/* 8215D0F4h case    3:*/		regs.R6 = regs.R27;
		/* 8215D0F4h case    3:*/		return 0x8215D0F8;
		  /* 8215D0F8h */ case    4:  		/* addi R5, R11, -21120 */
		/* 8215D0F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD80);
		/* 8215D0F8h case    4:*/		return 0x8215D0FC;
		  /* 8215D0FCh */ case    5:  		/* mr R4, R28 */
		/* 8215D0FCh case    5:*/		regs.R4 = regs.R28;
		/* 8215D0FCh case    5:*/		return 0x8215D100;
		  /* 8215D100h */ case    6:  		/* li R7, 158 */
		/* 8215D100h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9E);
		/* 8215D100h case    6:*/		return 0x8215D104;
		  /* 8215D104h */ case    7:  		/* li R3, 0 */
		/* 8215D104h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D104h case    7:*/		return 0x8215D108;
		  /* 8215D108h */ case    8:  		/* bl -21760 */
		/* 8215D108h case    8:*/		regs.LR = 0x8215D10C; return 0x82157C08;
		/* 8215D108h case    8:*/		return 0x8215D10C;
	}
	return 0x8215D10C;
} // Block from 8215D0E8h-8215D10Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D10C);
		  /* 8215D10Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8215D10Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215D10Ch case    0:*/		return 0x8215D110;
		  /* 8215D110h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D110h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D130;  }
		/* 8215D110h case    1:*/		return 0x8215D114;
		  /* 8215D114h */ case    2:  		/* lis R11, -32252 */
		/* 8215D114h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D114h case    2:*/		return 0x8215D118;
		  /* 8215D118h */ case    3:  		/* mr R6, R27 */
		/* 8215D118h case    3:*/		regs.R6 = regs.R27;
		/* 8215D118h case    3:*/		return 0x8215D11C;
		  /* 8215D11Ch */ case    4:  		/* addi R5, R11, -21136 */
		/* 8215D11Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD70);
		/* 8215D11Ch case    4:*/		return 0x8215D120;
		  /* 8215D120h */ case    5:  		/* mr R4, R28 */
		/* 8215D120h case    5:*/		regs.R4 = regs.R28;
		/* 8215D120h case    5:*/		return 0x8215D124;
		  /* 8215D124h */ case    6:  		/* li R7, 159 */
		/* 8215D124h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x9F);
		/* 8215D124h case    6:*/		return 0x8215D128;
		  /* 8215D128h */ case    7:  		/* li R3, 0 */
		/* 8215D128h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D128h case    7:*/		return 0x8215D12C;
		  /* 8215D12Ch */ case    8:  		/* bl -21796 */
		/* 8215D12Ch case    8:*/		regs.LR = 0x8215D130; return 0x82157C08;
		/* 8215D12Ch case    8:*/		return 0x8215D130;
	}
	return 0x8215D130;
} // Block from 8215D10Ch-8215D130h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D130);
		  /* 8215D130h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8215D130h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215D130h case    0:*/		return 0x8215D134;
		  /* 8215D134h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D134h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D154;  }
		/* 8215D134h case    1:*/		return 0x8215D138;
		  /* 8215D138h */ case    2:  		/* lis R11, -32252 */
		/* 8215D138h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D138h case    2:*/		return 0x8215D13C;
		  /* 8215D13Ch */ case    3:  		/* mr R6, R27 */
		/* 8215D13Ch case    3:*/		regs.R6 = regs.R27;
		/* 8215D13Ch case    3:*/		return 0x8215D140;
		  /* 8215D140h */ case    4:  		/* addi R5, R11, -21152 */
		/* 8215D140h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD60);
		/* 8215D140h case    4:*/		return 0x8215D144;
		  /* 8215D144h */ case    5:  		/* mr R4, R28 */
		/* 8215D144h case    5:*/		regs.R4 = regs.R28;
		/* 8215D144h case    5:*/		return 0x8215D148;
		  /* 8215D148h */ case    6:  		/* li R7, 160 */
		/* 8215D148h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xA0);
		/* 8215D148h case    6:*/		return 0x8215D14C;
		  /* 8215D14Ch */ case    7:  		/* li R3, 0 */
		/* 8215D14Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D14Ch case    7:*/		return 0x8215D150;
	}
	return 0x8215D150;
} // Block from 8215D130h-8215D150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D150h
// Function '?OBJLIST_GetNumItems@XGRAPHICS@@YAIPAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D150);
		  /* 8215D150h */ case    0:  		/* bl -21832 */
		/* 8215D150h case    0:*/		regs.LR = 0x8215D154; return 0x82157C08;
		/* 8215D150h case    0:*/		return 0x8215D154;
	}
	return 0x8215D154;
} // Block from 8215D150h-8215D154h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D154);
		  /* 8215D154h */ case    0:  		/* li R4, 2452 */
		/* 8215D154h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x994);
		/* 8215D154h case    0:*/		return 0x8215D158;
		  /* 8215D158h */ case    1:  		/* mtspr CTR, R29 */
		/* 8215D158h case    1:*/		regs.CTR = regs.R29;
		/* 8215D158h case    1:*/		return 0x8215D15C;
		  /* 8215D15Ch */ case    2:  		/* mr R3, R24 */
		/* 8215D15Ch case    2:*/		regs.R3 = regs.R24;
		/* 8215D15Ch case    2:*/		return 0x8215D160;
		  /* 8215D160h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8215D160h case    3:*/		if ( 1 ) { regs.LR = 0x8215D164; return (uint32)regs.CTR; }
		/* 8215D160h case    3:*/		return 0x8215D164;
		  /* 8215D164h */ case    4:  		/* or. R31, R3, R3 */
		/* 8215D164h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215D164h case    4:*/		return 0x8215D168;
		  /* 8215D168h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 8215D168h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215D190;  }
		/* 8215D168h case    5:*/		return 0x8215D16C;
		  /* 8215D16Ch */ case    6:  		/* lis R11, -32252 */
		/* 8215D16Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D16Ch case    6:*/		return 0x8215D170;
		  /* 8215D170h */ case    7:  		/* mr R6, R27 */
		/* 8215D170h case    7:*/		regs.R6 = regs.R27;
		/* 8215D170h case    7:*/		return 0x8215D174;
		  /* 8215D174h */ case    8:  		/* addi R5, R11, -21196 */
		/* 8215D174h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD34);
		/* 8215D174h case    8:*/		return 0x8215D178;
		  /* 8215D178h */ case    9:  		/* mr R4, R28 */
		/* 8215D178h case    9:*/		regs.R4 = regs.R28;
		/* 8215D178h case    9:*/		return 0x8215D17C;
		  /* 8215D17Ch */ case   10:  		/* li R7, 166 */
		/* 8215D17Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xA6);
		/* 8215D17Ch case   10:*/		return 0x8215D180;
		  /* 8215D180h */ case   11:  		/* li R3, 0 */
		/* 8215D180h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D180h case   11:*/		return 0x8215D184;
		  /* 8215D184h */ case   12:  		/* bl -21884 */
		/* 8215D184h case   12:*/		regs.LR = 0x8215D188; return 0x82157C08;
		/* 8215D184h case   12:*/		return 0x8215D188;
		  /* 8215D188h */ case   13:  		/* li R3, 0 */
		/* 8215D188h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D188h case   13:*/		return 0x8215D18C;
		  /* 8215D18Ch */ case   14:  		/* b 132 */
		/* 8215D18Ch case   14:*/		return 0x8215D210;
		/* 8215D18Ch case   14:*/		return 0x8215D190;
	}
	return 0x8215D190;
} // Block from 8215D154h-8215D190h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215D190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D190);
		  /* 8215D190h */ case    0:  		/* li R11, 0 */
		/* 8215D190h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215D190h case    0:*/		return 0x8215D194;
		  /* 8215D194h */ case    1:  		/* stw R24, <#[R31]> */
		/* 8215D194h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D194h case    1:*/		return 0x8215D198;
		  /* 8215D198h */ case    2:  		/* li R10, 1 */
		/* 8215D198h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8215D198h case    2:*/		return 0x8215D19C;
		  /* 8215D19Ch */ case    3:  		/* stw R29, <#[R31 + 4]> */
		/* 8215D19Ch case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 8215D19Ch case    3:*/		return 0x8215D1A0;
		  /* 8215D1A0h */ case    4:  		/* stw R23, <#[R31 + 8]> */
		/* 8215D1A0h case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D1A0h case    4:*/		return 0x8215D1A4;
		  /* 8215D1A4h */ case    5:  		/* mr R3, R30 */
		/* 8215D1A4h case    5:*/		regs.R3 = regs.R30;
		/* 8215D1A4h case    5:*/		return 0x8215D1A8;
	}
	return 0x8215D1A8;
} // Block from 8215D190h-8215D1A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D1A8h
// Function '?OBJLIST_PrependItem@XGRAPHICS@@YAXPAU_OBJECT_LIST@1@PAU_OBJECT_LIST_ITEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D1A8);
		  /* 8215D1A8h */ case    0:  		/* stw R22, <#[R31 + 12]> */
		/* 8215D1A8h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215D1A8h case    0:*/		return 0x8215D1AC;
		  /* 8215D1ACh */ case    1:  		/* stw R26, <#[R31 + 16]> */
		/* 8215D1ACh case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 8215D1ACh case    1:*/		return 0x8215D1B0;
		  /* 8215D1B0h */ case    2:  		/* stw R25, <#[R31 + 20]> */
		/* 8215D1B0h case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 8215D1B0h case    2:*/		return 0x8215D1B4;
		  /* 8215D1B4h */ case    3:  		/* stw R30, <#[R31 + 24]> */
		/* 8215D1B4h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000018) );
		/* 8215D1B4h case    3:*/		return 0x8215D1B8;
		  /* 8215D1B8h */ case    4:  		/* stw R10, <#[R31 + 2448]> */
		/* 8215D1B8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000990) );
		/* 8215D1B8h case    4:*/		return 0x8215D1BC;
		  /* 8215D1BCh */ case    5:  		/* stw R11, <#[R31 + 28]> */
		/* 8215D1BCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8215D1BCh case    5:*/		return 0x8215D1C0;
		  /* 8215D1C0h */ case    6:  		/* stw R21, <#[R31 + 36]> */
		/* 8215D1C0h case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000024) );
		/* 8215D1C0h case    6:*/		return 0x8215D1C4;
		  /* 8215D1C4h */ case    7:  		/* stw R11, <#[R31 + 44]> */
		/* 8215D1C4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D1C4h case    7:*/		return 0x8215D1C8;
		  /* 8215D1C8h */ case    8:  		/* stw R11, <#[R31 + 56]> */
		/* 8215D1C8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8215D1C8h case    8:*/		return 0x8215D1CC;
		  /* 8215D1CCh */ case    9:  		/* stw R11, <#[R31 + 52]> */
		/* 8215D1CCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8215D1CCh case    9:*/		return 0x8215D1D0;
		  /* 8215D1D0h */ case   10:  		/* stw R11, <#[R31 + 48]> */
		/* 8215D1D0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8215D1D0h case   10:*/		return 0x8215D1D4;
		  /* 8215D1D4h */ case   11:  		/* bl 716228 */
		/* 8215D1D4h case   11:*/		regs.LR = 0x8215D1D8; return 0x8220BF98;
		/* 8215D1D4h case   11:*/		return 0x8215D1D8;
		  /* 8215D1D8h */ case   12:  		/* stw R3, <#[R31 + 2428]> */
		/* 8215D1D8h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000097C) );
		/* 8215D1D8h case   12:*/		return 0x8215D1DC;
		  /* 8215D1DCh */ case   13:  		/* mr R3, R30 */
		/* 8215D1DCh case   13:*/		regs.R3 = regs.R30;
		/* 8215D1DCh case   13:*/		return 0x8215D1E0;
		  /* 8215D1E0h */ case   14:  		/* bl 716216 */
		/* 8215D1E0h case   14:*/		regs.LR = 0x8215D1E4; return 0x8220BF98;
		/* 8215D1E0h case   14:*/		return 0x8215D1E4;
		  /* 8215D1E4h */ case   15:  		/* stw R3, <#[R31 + 2436]> */
		/* 8215D1E4h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000984) );
		/* 8215D1E4h case   15:*/		return 0x8215D1E8;
		  /* 8215D1E8h */ case   16:  		/* mr R3, R30 */
		/* 8215D1E8h case   16:*/		regs.R3 = regs.R30;
		/* 8215D1E8h case   16:*/		return 0x8215D1EC;
		  /* 8215D1ECh */ case   17:  		/* bl 716204 */
		/* 8215D1ECh case   17:*/		regs.LR = 0x8215D1F0; return 0x8220BF98;
		/* 8215D1ECh case   17:*/		return 0x8215D1F0;
		  /* 8215D1F0h */ case   18:  		/* stw R3, <#[R31 + 2440]> */
		/* 8215D1F0h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000988) );
		/* 8215D1F0h case   18:*/		return 0x8215D1F4;
		  /* 8215D1F4h */ case   19:  		/* mr R3, R26 */
		/* 8215D1F4h case   19:*/		regs.R3 = regs.R26;
		/* 8215D1F4h case   19:*/		return 0x8215D1F8;
		  /* 8215D1F8h */ case   20:  		/* bl 715024 */
		/* 8215D1F8h case   20:*/		regs.LR = 0x8215D1FC; return 0x8220BB08;
		/* 8215D1F8h case   20:*/		return 0x8215D1FC;
		  /* 8215D1FCh */ case   21:  		/* stw R3, <#[R31 + 2432]> */
		/* 8215D1FCh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000980) );
		/* 8215D1FCh case   21:*/		return 0x8215D200;
		  /* 8215D200h */ case   22:  		/* mr R3, R25 */
		/* 8215D200h case   22:*/		regs.R3 = regs.R25;
		/* 8215D200h case   22:*/		return 0x8215D204;
		  /* 8215D204h */ case   23:  		/* bl 715604 */
		/* 8215D204h case   23:*/		regs.LR = 0x8215D208; return 0x8220BD58;
		/* 8215D204h case   23:*/		return 0x8215D208;
		  /* 8215D208h */ case   24:  		/* stw R3, <#[R31 + 2444]> */
		/* 8215D208h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000098C) );
		/* 8215D208h case   24:*/		return 0x8215D20C;
		  /* 8215D20Ch */ case   25:  		/* mr R3, R31 */
		/* 8215D20Ch case   25:*/		regs.R3 = regs.R31;
		/* 8215D20Ch case   25:*/		return 0x8215D210;
	}
	return 0x8215D210;
} // Block from 8215D1A8h-8215D210h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215D210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D210);
		  /* 8215D210h */ case    0:  		/* addi R1, R1, 176 */
		/* 8215D210h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8215D210h case    0:*/		return 0x8215D214;
		  /* 8215D214h */ case    1:  		/* b -835464 */
		/* 8215D214h case    1:*/		return 0x8209128C;
		/* 8215D214h case    1:*/		return 0x8215D218;
	}
	return 0x8215D218;
} // Block from 8215D210h-8215D218h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D218h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D218);
		  /* 8215D218h */ case    0:  		/* mfspr R12, LR */
		/* 8215D218h case    0:*/		regs.R12 = regs.LR;
		/* 8215D218h case    0:*/		return 0x8215D21C;
		  /* 8215D21Ch */ case    1:  		/* bl -835520 */
		/* 8215D21Ch case    1:*/		regs.LR = 0x8215D220; return 0x8209125C;
		/* 8215D21Ch case    1:*/		return 0x8215D220;
		  /* 8215D220h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215D220h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215D220h case    2:*/		return 0x8215D224;
		  /* 8215D224h */ case    3:  		/* lis R11, -32253 */
		/* 8215D224h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D224h case    3:*/		return 0x8215D228;
		  /* 8215D228h */ case    4:  		/* lis R10, -32252 */
		/* 8215D228h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D228h case    4:*/		return 0x8215D22C;
		  /* 8215D22Ch */ case    5:  		/* mr R31, R3 */
		/* 8215D22Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215D22Ch case    5:*/		return 0x8215D230;
		  /* 8215D230h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215D230h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D230h case    6:*/		return 0x8215D234;
		  /* 8215D234h */ case    7:  		/* addi R30, R11, 27460 */
		/* 8215D234h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215D234h case    7:*/		return 0x8215D238;
		  /* 8215D238h */ case    8:  		/* addi R29, R10, -21088 */
		/* 8215D238h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215D238h case    8:*/		return 0x8215D23C;
		  /* 8215D23Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D23Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215D25C;  }
		/* 8215D23Ch case    9:*/		return 0x8215D240;
		  /* 8215D240h */ case   10:  		/* lis R11, -32252 */
		/* 8215D240h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D240h case   10:*/		return 0x8215D244;
		  /* 8215D244h */ case   11:  		/* mr R6, R29 */
		/* 8215D244h case   11:*/		regs.R6 = regs.R29;
		/* 8215D244h case   11:*/		return 0x8215D248;
		  /* 8215D248h */ case   12:  		/* addi R5, R11, -22036 */
		/* 8215D248h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215D248h case   12:*/		return 0x8215D24C;
		  /* 8215D24Ch */ case   13:  		/* mr R4, R30 */
		/* 8215D24Ch case   13:*/		regs.R4 = regs.R30;
		/* 8215D24Ch case   13:*/		return 0x8215D250;
		  /* 8215D250h */ case   14:  		/* li R7, 230 */
		/* 8215D250h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xE6);
		/* 8215D250h case   14:*/		return 0x8215D254;
		  /* 8215D254h */ case   15:  		/* li R3, 0 */
		/* 8215D254h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D254h case   15:*/		return 0x8215D258;
		  /* 8215D258h */ case   16:  		/* bl -22096 */
		/* 8215D258h case   16:*/		regs.LR = 0x8215D25C; return 0x82157C08;
		/* 8215D258h case   16:*/		return 0x8215D25C;
	}
	return 0x8215D25C;
} // Block from 8215D218h-8215D25Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215D25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D25C);
		  /* 8215D25Ch */ case    0:  		/* lwz R11, <#[R31 + 2448]> */
		/* 8215D25Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000990) );
		/* 8215D25Ch case    0:*/		return 0x8215D260;
		  /* 8215D260h */ case    1:  		/* addic. R11, R11, -1 */
		/* 8215D260h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215D260h case    1:*/		return 0x8215D264;
		  /* 8215D264h */ case    2:  		/* stw R11, <#[R31 + 2448]> */
		/* 8215D264h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000990) );
		/* 8215D264h case    2:*/		return 0x8215D268;
		  /* 8215D268h */ case    3:  		/* bc 4, CR0_EQ, 380 */
		/* 8215D268h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215D3E4;  }
		/* 8215D268h case    3:*/		return 0x8215D26C;
		  /* 8215D26Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215D26Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215D26Ch case    4:*/		return 0x8215D270;
	}
	return 0x8215D270;
} // Block from 8215D25Ch-8215D270h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215D270h
// Function '?OBJLIST_PrependNewItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D270);
		  /* 8215D270h */ case    0:  		/* bc 12, CR6_EQ, 32 */
		/* 8215D270h case    0:*/		if ( regs.CR[6].eq ) { return 0x8215D290;  }
		/* 8215D270h case    0:*/		return 0x8215D274;
		  /* 8215D274h */ case    1:  		/* lis R11, -32252 */
		/* 8215D274h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D274h case    1:*/		return 0x8215D278;
		  /* 8215D278h */ case    2:  		/* mr R6, R29 */
		/* 8215D278h case    2:*/		regs.R6 = regs.R29;
		/* 8215D278h case    2:*/		return 0x8215D27C;
		  /* 8215D27Ch */ case    3:  		/* addi R5, R11, -20980 */
		/* 8215D27Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE0C);
		/* 8215D27Ch case    3:*/		return 0x8215D280;
		  /* 8215D280h */ case    4:  		/* mr R4, R30 */
		/* 8215D280h case    4:*/		regs.R4 = regs.R30;
		/* 8215D280h case    4:*/		return 0x8215D284;
		  /* 8215D284h */ case    5:  		/* li R7, 241 */
		/* 8215D284h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0xF1);
		/* 8215D284h case    5:*/		return 0x8215D288;
		  /* 8215D288h */ case    6:  		/* li R3, 0 */
		/* 8215D288h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D288h case    6:*/		return 0x8215D28C;
		  /* 8215D28Ch */ case    7:  		/* bl -22148 */
		/* 8215D28Ch case    7:*/		regs.LR = 0x8215D290; return 0x82157C08;
		/* 8215D28Ch case    7:*/		return 0x8215D290;
	}
	return 0x8215D290;
} // Block from 8215D270h-8215D290h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D290);
		  /* 8215D290h */ case    0:  		/* lwz R4, <#[R31 + 2444]> */
		/* 8215D290h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000098C) );
		/* 8215D290h case    0:*/		return 0x8215D294;
		  /* 8215D294h */ case    1:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215D294h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215D294h case    1:*/		return 0x8215D298;
		  /* 8215D298h */ case    2:  		/* bl 715608 */
		/* 8215D298h case    2:*/		regs.LR = 0x8215D29C; return 0x8220BDF0;
		/* 8215D298h case    2:*/		return 0x8215D29C;
		  /* 8215D29Ch */ case    3:  		/* b 40 */
		/* 8215D29Ch case    3:*/		return 0x8215D2C4;
		/* 8215D29Ch case    3:*/		return 0x8215D2A0;
		  /* 8215D2A0h */ case    4:  		/* mr R3, R30 */
		/* 8215D2A0h case    4:*/		regs.R3 = regs.R30;
		/* 8215D2A0h case    4:*/		return 0x8215D2A4;
		  /* 8215D2A4h */ case    5:  		/* bl -1204 */
		/* 8215D2A4h case    5:*/		regs.LR = 0x8215D2A8; return 0x8215CDF0;
		/* 8215D2A4h case    5:*/		return 0x8215D2A8;
		  /* 8215D2A8h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D2A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D2A8h case    6:*/		return 0x8215D2AC;
		  /* 8215D2ACh */ case    7:  		/* mr R4, R3 */
		/* 8215D2ACh case    7:*/		regs.R4 = regs.R3;
		/* 8215D2ACh case    7:*/		return 0x8215D2B0;
		  /* 8215D2B0h */ case    8:  		/* lwz R3, <#[R31]> */
		/* 8215D2B0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D2B0h case    8:*/		return 0x8215D2B4;
		  /* 8215D2B4h */ case    9:  		/* mtspr CTR, R11 */
		/* 8215D2B4h case    9:*/		regs.CTR = regs.R11;
		/* 8215D2B4h case    9:*/		return 0x8215D2B8;
		  /* 8215D2B8h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8215D2B8h case   10:*/		if ( 1 ) { regs.LR = 0x8215D2BC; return (uint32)regs.CTR; }
		/* 8215D2B8h case   10:*/		return 0x8215D2BC;
		  /* 8215D2BCh */ case   11:  		/* mr R3, R30 */
		/* 8215D2BCh case   11:*/		regs.R3 = regs.R30;
		/* 8215D2BCh case   11:*/		return 0x8215D2C0;
		  /* 8215D2C0h */ case   12:  		/* bl -1288 */
		/* 8215D2C0h case   12:*/		regs.LR = 0x8215D2C4; return 0x8215CDB8;
		/* 8215D2C0h case   12:*/		return 0x8215D2C4;
	}
	return 0x8215D2C4;
} // Block from 8215D290h-8215D2C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215D2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D2C4);
		  /* 8215D2C4h */ case    0:  		/* lwz R3, <#[R31 + 2440]> */
		/* 8215D2C4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000988) );
		/* 8215D2C4h case    0:*/		return 0x8215D2C8;
		  /* 8215D2C8h */ case    1:  		/* bl -2024 */
		/* 8215D2C8h case    1:*/		regs.LR = 0x8215D2CC; return 0x8215CAE0;
		/* 8215D2C8h case    1:*/		return 0x8215D2CC;
		  /* 8215D2CCh */ case    2:  		/* or. R30, R3, R3 */
		/* 8215D2CCh case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215D2CCh case    2:*/		return 0x8215D2D0;
		  /* 8215D2D0h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 8215D2D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215D2A0;  }
		/* 8215D2D0h case    3:*/		return 0x8215D2D4;
		  /* 8215D2D4h */ case    4:  		/* lwz R4, <#[R31 + 2440]> */
		/* 8215D2D4h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000988) );
		/* 8215D2D4h case    4:*/		return 0x8215D2D8;
		  /* 8215D2D8h */ case    5:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215D2D8h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215D2D8h case    5:*/		return 0x8215D2DC;
		  /* 8215D2DCh */ case    6:  		/* bl 716116 */
		/* 8215D2DCh case    6:*/		regs.LR = 0x8215D2E0; return 0x8220C030;
		/* 8215D2DCh case    6:*/		return 0x8215D2E0;
		  /* 8215D2E0h */ case    7:  		/* b 40 */
		/* 8215D2E0h case    7:*/		return 0x8215D308;
		/* 8215D2E0h case    7:*/		return 0x8215D2E4;
		  /* 8215D2E4h */ case    8:  		/* mr R3, R30 */
		/* 8215D2E4h case    8:*/		regs.R3 = regs.R30;
		/* 8215D2E4h case    8:*/		return 0x8215D2E8;
		  /* 8215D2E8h */ case    9:  		/* bl -1272 */
		/* 8215D2E8h case    9:*/		regs.LR = 0x8215D2EC; return 0x8215CDF0;
		/* 8215D2E8h case    9:*/		return 0x8215D2EC;
		  /* 8215D2ECh */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D2ECh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D2ECh case   10:*/		return 0x8215D2F0;
		  /* 8215D2F0h */ case   11:  		/* mr R4, R3 */
		/* 8215D2F0h case   11:*/		regs.R4 = regs.R3;
		/* 8215D2F0h case   11:*/		return 0x8215D2F4;
		  /* 8215D2F4h */ case   12:  		/* lwz R3, <#[R31]> */
		/* 8215D2F4h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D2F4h case   12:*/		return 0x8215D2F8;
		  /* 8215D2F8h */ case   13:  		/* mtspr CTR, R11 */
		/* 8215D2F8h case   13:*/		regs.CTR = regs.R11;
		/* 8215D2F8h case   13:*/		return 0x8215D2FC;
		  /* 8215D2FCh */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8215D2FCh case   14:*/		if ( 1 ) { regs.LR = 0x8215D300; return (uint32)regs.CTR; }
		/* 8215D2FCh case   14:*/		return 0x8215D300;
	}
	return 0x8215D300;
} // Block from 8215D2C4h-8215D300h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215D300h
// Function '?OBJLIST_AppendItem@XGRAPHICS@@YAXPAU_OBJECT_LIST@1@PAU_OBJECT_LIST_ITEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D300);
		  /* 8215D300h */ case    0:  		/* mr R3, R30 */
		/* 8215D300h case    0:*/		regs.R3 = regs.R30;
		/* 8215D300h case    0:*/		return 0x8215D304;
		  /* 8215D304h */ case    1:  		/* bl -1356 */
		/* 8215D304h case    1:*/		regs.LR = 0x8215D308; return 0x8215CDB8;
		/* 8215D304h case    1:*/		return 0x8215D308;
	}
	return 0x8215D308;
} // Block from 8215D300h-8215D308h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D308);
		  /* 8215D308h */ case    0:  		/* lwz R3, <#[R31 + 2436]> */
		/* 8215D308h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000984) );
		/* 8215D308h case    0:*/		return 0x8215D30C;
		  /* 8215D30Ch */ case    1:  		/* bl -2092 */
		/* 8215D30Ch case    1:*/		regs.LR = 0x8215D310; return 0x8215CAE0;
		/* 8215D30Ch case    1:*/		return 0x8215D310;
		  /* 8215D310h */ case    2:  		/* or. R30, R3, R3 */
		/* 8215D310h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215D310h case    2:*/		return 0x8215D314;
		  /* 8215D314h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 8215D314h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215D2E4;  }
		/* 8215D314h case    3:*/		return 0x8215D318;
		  /* 8215D318h */ case    4:  		/* lwz R4, <#[R31 + 2436]> */
		/* 8215D318h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000984) );
		/* 8215D318h case    4:*/		return 0x8215D31C;
		  /* 8215D31Ch */ case    5:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215D31Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215D31Ch case    5:*/		return 0x8215D320;
		  /* 8215D320h */ case    6:  		/* bl 716048 */
		/* 8215D320h case    6:*/		regs.LR = 0x8215D324; return 0x8220C030;
		/* 8215D320h case    6:*/		return 0x8215D324;
		  /* 8215D324h */ case    7:  		/* b 40 */
		/* 8215D324h case    7:*/		return 0x8215D34C;
		/* 8215D324h case    7:*/		return 0x8215D328;
		  /* 8215D328h */ case    8:  		/* mr R3, R30 */
		/* 8215D328h case    8:*/		regs.R3 = regs.R30;
		/* 8215D328h case    8:*/		return 0x8215D32C;
		  /* 8215D32Ch */ case    9:  		/* bl -1340 */
		/* 8215D32Ch case    9:*/		regs.LR = 0x8215D330; return 0x8215CDF0;
		/* 8215D32Ch case    9:*/		return 0x8215D330;
		  /* 8215D330h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D330h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D330h case   10:*/		return 0x8215D334;
		  /* 8215D334h */ case   11:  		/* mr R4, R3 */
		/* 8215D334h case   11:*/		regs.R4 = regs.R3;
		/* 8215D334h case   11:*/		return 0x8215D338;
		  /* 8215D338h */ case   12:  		/* lwz R3, <#[R31]> */
		/* 8215D338h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D338h case   12:*/		return 0x8215D33C;
		  /* 8215D33Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 8215D33Ch case   13:*/		regs.CTR = regs.R11;
		/* 8215D33Ch case   13:*/		return 0x8215D340;
		  /* 8215D340h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8215D340h case   14:*/		if ( 1 ) { regs.LR = 0x8215D344; return (uint32)regs.CTR; }
		/* 8215D340h case   14:*/		return 0x8215D344;
		  /* 8215D344h */ case   15:  		/* mr R3, R30 */
		/* 8215D344h case   15:*/		regs.R3 = regs.R30;
		/* 8215D344h case   15:*/		return 0x8215D348;
		  /* 8215D348h */ case   16:  		/* bl -1424 */
		/* 8215D348h case   16:*/		regs.LR = 0x8215D34C; return 0x8215CDB8;
		/* 8215D348h case   16:*/		return 0x8215D34C;
	}
	return 0x8215D34C;
} // Block from 8215D308h-8215D34Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215D34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D34C);
		  /* 8215D34Ch */ case    0:  		/* lwz R3, <#[R31 + 2428]> */
		/* 8215D34Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000097C) );
		/* 8215D34Ch case    0:*/		return 0x8215D350;
		  /* 8215D350h */ case    1:  		/* bl -2160 */
		/* 8215D350h case    1:*/		regs.LR = 0x8215D354; return 0x8215CAE0;
		/* 8215D350h case    1:*/		return 0x8215D354;
		  /* 8215D354h */ case    2:  		/* or. R30, R3, R3 */
		/* 8215D354h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215D354h case    2:*/		return 0x8215D358;
		  /* 8215D358h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 8215D358h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215D328;  }
		/* 8215D358h case    3:*/		return 0x8215D35C;
		  /* 8215D35Ch */ case    4:  		/* lwz R4, <#[R31 + 2428]> */
		/* 8215D35Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000097C) );
		/* 8215D35Ch case    4:*/		return 0x8215D360;
		  /* 8215D360h */ case    5:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215D360h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215D360h case    5:*/		return 0x8215D364;
		  /* 8215D364h */ case    6:  		/* bl 715980 */
		/* 8215D364h case    6:*/		regs.LR = 0x8215D368; return 0x8220C030;
		/* 8215D364h case    6:*/		return 0x8215D368;
		  /* 8215D368h */ case    7:  		/* b 24 */
		/* 8215D368h case    7:*/		return 0x8215D380;
		/* 8215D368h case    7:*/		return 0x8215D36C;
		  /* 8215D36Ch */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D36Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D36Ch case    8:*/		return 0x8215D370;
		  /* 8215D370h */ case    9:  		/* mr R4, R3 */
		/* 8215D370h case    9:*/		regs.R4 = regs.R3;
		/* 8215D370h case    9:*/		return 0x8215D374;
		  /* 8215D374h */ case   10:  		/* lwz R3, <#[R31]> */
		/* 8215D374h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D374h case   10:*/		return 0x8215D378;
		  /* 8215D378h */ case   11:  		/* mtspr CTR, R11 */
		/* 8215D378h case   11:*/		regs.CTR = regs.R11;
		/* 8215D378h case   11:*/		return 0x8215D37C;
		  /* 8215D37Ch */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8215D37Ch case   12:*/		if ( 1 ) { regs.LR = 0x8215D380; return (uint32)regs.CTR; }
		/* 8215D37Ch case   12:*/		return 0x8215D380;
	}
	return 0x8215D380;
} // Block from 8215D34Ch-8215D380h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215D380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D380);
		  /* 8215D380h */ case    0:  		/* lwz R3, <#[R31 + 2432]> */
		/* 8215D380h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000980) );
		/* 8215D380h case    0:*/		return 0x8215D384;
		  /* 8215D384h */ case    1:  		/* bl -5172 */
		/* 8215D384h case    1:*/		regs.LR = 0x8215D388; return 0x8215BF50;
		/* 8215D384h case    1:*/		return 0x8215D388;
		  /* 8215D388h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8215D388h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215D388h case    2:*/		return 0x8215D38C;
		  /* 8215D38Ch */ case    3:  		/* bc 4, CR0_EQ, -32 */
		/* 8215D38Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215D36C;  }
		/* 8215D38Ch case    3:*/		return 0x8215D390;
		  /* 8215D390h */ case    4:  		/* lwz R4, <#[R31 + 2432]> */
		/* 8215D390h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000980) );
		/* 8215D390h case    4:*/		return 0x8215D394;
		  /* 8215D394h */ case    5:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215D394h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215D394h case    5:*/		return 0x8215D398;
		  /* 8215D398h */ case    6:  		/* bl 714776 */
		/* 8215D398h case    6:*/		regs.LR = 0x8215D39C; return 0x8220BBB0;
		/* 8215D398h case    6:*/		return 0x8215D39C;
		  /* 8215D39Ch */ case    7:  		/* lwz R3, <#[R31 + 52]> */
		/* 8215D39Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8215D39Ch case    7:*/		return 0x8215D3A0;
		  /* 8215D3A0h */ case    8:  		/* bl 6128 */
		/* 8215D3A0h case    8:*/		regs.LR = 0x8215D3A4; return 0x8215EB90;
		/* 8215D3A0h case    8:*/		return 0x8215D3A4;
		  /* 8215D3A4h */ case    9:  		/* lwz R3, <#[R31 + 56]> */
		/* 8215D3A4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8215D3A4h case    9:*/		return 0x8215D3A8;
		  /* 8215D3A8h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8215D3A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D3A8h case   10:*/		return 0x8215D3AC;
		  /* 8215D3ACh */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 8215D3ACh case   11:*/		if ( regs.CR[6].eq ) { return 0x8215D3B4;  }
		/* 8215D3ACh case   11:*/		return 0x8215D3B0;
		  /* 8215D3B0h */ case   12:  		/* bl 717720 */
		/* 8215D3B0h case   12:*/		regs.LR = 0x8215D3B4; return 0x8220C748;
		/* 8215D3B0h case   12:*/		return 0x8215D3B4;
	}
	return 0x8215D3B4;
} // Block from 8215D380h-8215D3B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215D3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D3B4);
		  /* 8215D3B4h */ case    0:  		/* lwz R4, <#[R31 + 44]> */
		/* 8215D3B4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D3B4h case    0:*/		return 0x8215D3B8;
		  /* 8215D3B8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8215D3B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215D3B8h case    1:*/		return 0x8215D3BC;
		  /* 8215D3BCh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8215D3BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8215D3D0;  }
		/* 8215D3BCh case    2:*/		return 0x8215D3C0;
		  /* 8215D3C0h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D3C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D3C0h case    3:*/		return 0x8215D3C4;
		  /* 8215D3C4h */ case    4:  		/* lwz R3, <#[R31]> */
		/* 8215D3C4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D3C4h case    4:*/		return 0x8215D3C8;
	}
	return 0x8215D3C8;
} // Block from 8215D3B4h-8215D3C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215D3C8h
// Function '?OBJLIST_AppendNewItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D3C8);
		  /* 8215D3C8h */ case    0:  		/* mtspr CTR, R11 */
		/* 8215D3C8h case    0:*/		regs.CTR = regs.R11;
		/* 8215D3C8h case    0:*/		return 0x8215D3CC;
		  /* 8215D3CCh */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 8215D3CCh case    1:*/		if ( 1 ) { regs.LR = 0x8215D3D0; return (uint32)regs.CTR; }
		/* 8215D3CCh case    1:*/		return 0x8215D3D0;
	}
	return 0x8215D3D0;
} // Block from 8215D3C8h-8215D3D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D3D0);
		  /* 8215D3D0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D3D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D3D0h case    0:*/		return 0x8215D3D4;
		  /* 8215D3D4h */ case    1:  		/* mr R4, R31 */
		/* 8215D3D4h case    1:*/		regs.R4 = regs.R31;
		/* 8215D3D4h case    1:*/		return 0x8215D3D8;
		  /* 8215D3D8h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215D3D8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D3D8h case    2:*/		return 0x8215D3DC;
		  /* 8215D3DCh */ case    3:  		/* mtspr CTR, R11 */
		/* 8215D3DCh case    3:*/		regs.CTR = regs.R11;
		/* 8215D3DCh case    3:*/		return 0x8215D3E0;
		  /* 8215D3E0h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215D3E0h case    4:*/		if ( 1 ) { regs.LR = 0x8215D3E4; return (uint32)regs.CTR; }
		/* 8215D3E0h case    4:*/		return 0x8215D3E4;
	}
	return 0x8215D3E4;
} // Block from 8215D3D0h-8215D3E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215D3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D3E4);
		  /* 8215D3E4h */ case    0:  		/* addi R1, R1, 112 */
		/* 8215D3E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215D3E4h case    0:*/		return 0x8215D3E8;
		  /* 8215D3E8h */ case    1:  		/* b -835900 */
		/* 8215D3E8h case    1:*/		return 0x820912AC;
		/* 8215D3E8h case    1:*/		return 0x8215D3EC;
		  /* 8215D3ECh */ case    2:  		/* nop */
		/* 8215D3ECh case    2:*/		cpu::op::nop();
		/* 8215D3ECh case    2:*/		return 0x8215D3F0;
	}
	return 0x8215D3F0;
} // Block from 8215D3E4h-8215D3F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215D3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D3F0);
		  /* 8215D3F0h */ case    0:  		/* mfspr R12, LR */
		/* 8215D3F0h case    0:*/		regs.R12 = regs.LR;
		/* 8215D3F0h case    0:*/		return 0x8215D3F4;
		  /* 8215D3F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D3F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D3F4h case    1:*/		return 0x8215D3F8;
		  /* 8215D3F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215D3F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D3F8h case    2:*/		return 0x8215D3FC;
		  /* 8215D3FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215D3FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215D3FCh case    3:*/		return 0x8215D400;
		  /* 8215D400h */ case    4:  		/* mr R31, R3 */
		/* 8215D400h case    4:*/		regs.R31 = regs.R3;
		/* 8215D400h case    4:*/		return 0x8215D404;
		  /* 8215D404h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215D404h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D404h case    5:*/		return 0x8215D408;
		  /* 8215D408h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D408h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215D42C;  }
		/* 8215D408h case    6:*/		return 0x8215D40C;
		  /* 8215D40Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215D40Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D40Ch case    7:*/		return 0x8215D410;
		  /* 8215D410h */ case    8:  		/* lis R10, -32252 */
		/* 8215D410h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D410h case    8:*/		return 0x8215D414;
		  /* 8215D414h */ case    9:  		/* lis R9, -32253 */
		/* 8215D414h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D414h case    9:*/		return 0x8215D418;
		  /* 8215D418h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215D418h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D418h case   10:*/		return 0x8215D41C;
		  /* 8215D41Ch */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215D41Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D41Ch case   11:*/		return 0x8215D420;
		  /* 8215D420h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215D420h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D420h case   12:*/		return 0x8215D424;
		  /* 8215D424h */ case   13:  		/* li R7, 314 */
		/* 8215D424h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x13A);
		/* 8215D424h case   13:*/		return 0x8215D428;
		  /* 8215D428h */ case   14:  		/* bl -22560 */
		/* 8215D428h case   14:*/		regs.LR = 0x8215D42C; return 0x82157C08;
		/* 8215D428h case   14:*/		return 0x8215D42C;
	}
	return 0x8215D42C;
} // Block from 8215D3F0h-8215D42Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215D42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D42C);
		  /* 8215D42Ch */ case    0:  		/* lwz R11, <#[R31 + 2448]> */
		/* 8215D42Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000990) );
		/* 8215D42Ch case    0:*/		return 0x8215D430;
		  /* 8215D430h */ case    1:  		/* addi R11, R11, 1 */
		/* 8215D430h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215D430h case    1:*/		return 0x8215D434;
		  /* 8215D434h */ case    2:  		/* stw R11, <#[R31 + 2448]> */
		/* 8215D434h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000990) );
		/* 8215D434h case    2:*/		return 0x8215D438;
		  /* 8215D438h */ case    3:  		/* addi R1, R1, 96 */
		/* 8215D438h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215D438h case    3:*/		return 0x8215D43C;
		  /* 8215D43Ch */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D43Ch case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D43Ch case    4:*/		return 0x8215D440;
		  /* 8215D440h */ case    5:  		/* mtspr LR, R12 */
		/* 8215D440h case    5:*/		regs.LR = regs.R12;
		/* 8215D440h case    5:*/		return 0x8215D444;
		  /* 8215D444h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D444h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D444h case    6:*/		return 0x8215D448;
		  /* 8215D448h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8215D448h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D448h case    7:*/		return 0x8215D44C;
	}
	return 0x8215D44C;
} // Block from 8215D42Ch-8215D44Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D44C);
		  /* 8215D44Ch */ case    0:  		/* nop */
		/* 8215D44Ch case    0:*/		cpu::op::nop();
		/* 8215D44Ch case    0:*/		return 0x8215D450;
	}
	return 0x8215D450;
} // Block from 8215D44Ch-8215D450h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D450);
		  /* 8215D450h */ case    0:  		/* mfspr R12, LR */
		/* 8215D450h case    0:*/		regs.R12 = regs.LR;
		/* 8215D450h case    0:*/		return 0x8215D454;
		  /* 8215D454h */ case    1:  		/* bl -836096 */
		/* 8215D454h case    1:*/		regs.LR = 0x8215D458; return 0x82091254;
		/* 8215D454h case    1:*/		return 0x8215D458;
	}
	return 0x8215D458;
} // Block from 8215D450h-8215D458h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D458h
// Function '?OBJLIST_GetFirstItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D458);
		  /* 8215D458h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215D458h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215D458h case    0:*/		return 0x8215D45C;
		  /* 8215D45Ch */ case    1:  		/* lis R11, -32253 */
		/* 8215D45Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D45Ch case    1:*/		return 0x8215D460;
		  /* 8215D460h */ case    2:  		/* lis R10, -32252 */
		/* 8215D460h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D460h case    2:*/		return 0x8215D464;
		  /* 8215D464h */ case    3:  		/* mr R31, R3 */
		/* 8215D464h case    3:*/		regs.R31 = regs.R3;
		/* 8215D464h case    3:*/		return 0x8215D468;
		  /* 8215D468h */ case    4:  		/* mr R30, R4 */
		/* 8215D468h case    4:*/		regs.R30 = regs.R4;
		/* 8215D468h case    4:*/		return 0x8215D46C;
		  /* 8215D46Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215D46Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D46Ch case    5:*/		return 0x8215D470;
		  /* 8215D470h */ case    6:  		/* addi R29, R11, 27460 */
		/* 8215D470h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215D470h case    6:*/		return 0x8215D474;
		  /* 8215D474h */ case    7:  		/* addi R28, R10, -21088 */
		/* 8215D474h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFADA0);
		/* 8215D474h case    7:*/		return 0x8215D478;
		  /* 8215D478h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D478h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215D498;  }
		/* 8215D478h case    8:*/		return 0x8215D47C;
		  /* 8215D47Ch */ case    9:  		/* lis R11, -32252 */
		/* 8215D47Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D47Ch case    9:*/		return 0x8215D480;
		  /* 8215D480h */ case   10:  		/* mr R6, R28 */
		/* 8215D480h case   10:*/		regs.R6 = regs.R28;
		/* 8215D480h case   10:*/		return 0x8215D484;
		  /* 8215D484h */ case   11:  		/* addi R5, R11, -22036 */
		/* 8215D484h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215D484h case   11:*/		return 0x8215D488;
		  /* 8215D488h */ case   12:  		/* mr R4, R29 */
		/* 8215D488h case   12:*/		regs.R4 = regs.R29;
		/* 8215D488h case   12:*/		return 0x8215D48C;
		  /* 8215D48Ch */ case   13:  		/* li R7, 376 */
		/* 8215D48Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x178);
		/* 8215D48Ch case   13:*/		return 0x8215D490;
		  /* 8215D490h */ case   14:  		/* li R3, 0 */
		/* 8215D490h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D490h case   14:*/		return 0x8215D494;
		  /* 8215D494h */ case   15:  		/* bl -22668 */
		/* 8215D494h case   15:*/		regs.LR = 0x8215D498; return 0x82157C08;
		/* 8215D494h case   15:*/		return 0x8215D498;
	}
	return 0x8215D498;
} // Block from 8215D458h-8215D498h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215D498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D498);
		  /* 8215D498h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8215D498h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8215D498h case    0:*/		return 0x8215D49C;
		  /* 8215D49Ch */ case    1:  		/* li R10, 1 */
		/* 8215D49Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8215D49Ch case    1:*/		return 0x8215D4A0;
		  /* 8215D4A0h */ case    2:  		/* stw R30, <#[R31 + 32]> */
		/* 8215D4A0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 8215D4A0h case    2:*/		return 0x8215D4A4;
		  /* 8215D4A4h */ case    3:  		/* cmpwi CR6, R30, 0 */
		/* 8215D4A4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8215D4A4h case    3:*/		return 0x8215D4A8;
		  /* 8215D4A8h */ case    4:  		/* cntlzw R11, R11 */
		/* 8215D4A8h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8215D4A8h case    4:*/		return 0x8215D4AC;
		  /* 8215D4ACh */ case    5:  		/* stw R10, <#[R31 + 28]> */
		/* 8215D4ACh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8215D4ACh case    5:*/		return 0x8215D4B0;
		  /* 8215D4B0h */ case    6:  		/* rlwinm R27, R11, 27, 31, 31 */
		/* 8215D4B0h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R27,regs.R11);
		/* 8215D4B0h case    6:*/		return 0x8215D4B4;
		  /* 8215D4B4h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 8215D4B4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8215D4C0;  }
		/* 8215D4B4h case    7:*/		return 0x8215D4B8;
		  /* 8215D4B8h */ case    8:  		/* li R7, 0 */
		/* 8215D4B8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8215D4B8h case    8:*/		return 0x8215D4BC;
		  /* 8215D4BCh */ case    9:  		/* b 44 */
		/* 8215D4BCh case    9:*/		return 0x8215D4E8;
		/* 8215D4BCh case    9:*/		return 0x8215D4C0;
	}
	return 0x8215D4C0;
} // Block from 8215D498h-8215D4C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215D4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D4C0);
		  /* 8215D4C0h */ case    0:  		/* cmpwi CR6, R30, 1 */
		/* 8215D4C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8215D4C0h case    0:*/		return 0x8215D4C4;
		  /* 8215D4C4h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8215D4C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215D4E4;  }
		/* 8215D4C4h case    1:*/		return 0x8215D4C8;
		  /* 8215D4C8h */ case    2:  		/* lis R11, -32252 */
		/* 8215D4C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D4C8h case    2:*/		return 0x8215D4CC;
		  /* 8215D4CCh */ case    3:  		/* mr R6, R28 */
		/* 8215D4CCh case    3:*/		regs.R6 = regs.R28;
		/* 8215D4CCh case    3:*/		return 0x8215D4D0;
		  /* 8215D4D0h */ case    4:  		/* addi R5, R11, -20960 */
		/* 8215D4D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 8215D4D0h case    4:*/		return 0x8215D4D4;
		  /* 8215D4D4h */ case    5:  		/* mr R4, R29 */
		/* 8215D4D4h case    5:*/		regs.R4 = regs.R29;
		/* 8215D4D4h case    5:*/		return 0x8215D4D8;
		  /* 8215D4D8h */ case    6:  		/* li R7, 395 */
		/* 8215D4D8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x18B);
		/* 8215D4D8h case    6:*/		return 0x8215D4DC;
		  /* 8215D4DCh */ case    7:  		/* li R3, 0 */
		/* 8215D4DCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D4DCh case    7:*/		return 0x8215D4E0;
		  /* 8215D4E0h */ case    8:  		/* bl -22744 */
		/* 8215D4E0h case    8:*/		regs.LR = 0x8215D4E4; return 0x82157C08;
		/* 8215D4E0h case    8:*/		return 0x8215D4E4;
	}
	return 0x8215D4E4;
} // Block from 8215D4C0h-8215D4E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D4E4);
		  /* 8215D4E4h */ case    0:  		/* li R7, 1 */
		/* 8215D4E4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8215D4E4h case    0:*/		return 0x8215D4E8;
	}
	return 0x8215D4E8;
} // Block from 8215D4E4h-8215D4E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D4E8);
		  /* 8215D4E8h */ case    0:  		/* mr R8, R27 */
		/* 8215D4E8h case    0:*/		regs.R8 = regs.R27;
		/* 8215D4E8h case    0:*/		return 0x8215D4EC;
		  /* 8215D4ECh */ case    1:  		/* lwz R6, <#[R31 + 12]> */
		/* 8215D4ECh case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215D4ECh case    1:*/		return 0x8215D4F0;
		  /* 8215D4F0h */ case    2:  		/* lwz R5, <#[R31 + 8]> */
		/* 8215D4F0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D4F0h case    2:*/		return 0x8215D4F4;
		  /* 8215D4F4h */ case    3:  		/* lwz R4, <#[R31 + 4]> */
		/* 8215D4F4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8215D4F4h case    3:*/		return 0x8215D4F8;
	}
	return 0x8215D4F8;
} // Block from 8215D4E8h-8215D4F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215D4F8h
// Function '?OBJLIST_RemoveFirstItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D4F8);
		  /* 8215D4F8h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215D4F8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D4F8h case    0:*/		return 0x8215D4FC;
		  /* 8215D4FCh */ case    1:  		/* bl 717052 */
		/* 8215D4FCh case    1:*/		regs.LR = 0x8215D500; return 0x8220C5F8;
		/* 8215D4FCh case    1:*/		return 0x8215D500;
		  /* 8215D500h */ case    2:  		/* stw R3, <#[R31 + 56]> */
		/* 8215D500h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8215D500h case    2:*/		return 0x8215D504;
		  /* 8215D504h */ case    3:  		/* addi R1, R1, 128 */
		/* 8215D504h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215D504h case    3:*/		return 0x8215D508;
		  /* 8215D508h */ case    4:  		/* b -836196 */
		/* 8215D508h case    4:*/		return 0x820912A4;
		/* 8215D508h case    4:*/		return 0x8215D50C;
		  /* 8215D50Ch */ case    5:  		/* nop */
		/* 8215D50Ch case    5:*/		cpu::op::nop();
		/* 8215D50Ch case    5:*/		return 0x8215D510;
	}
	return 0x8215D510;
} // Block from 8215D4F8h-8215D510h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D510);
		  /* 8215D510h */ case    0:  		/* mfspr R12, LR */
		/* 8215D510h case    0:*/		regs.R12 = regs.LR;
		/* 8215D510h case    0:*/		return 0x8215D514;
		  /* 8215D514h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D514h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D514h case    1:*/		return 0x8215D518;
		  /* 8215D518h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215D518h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D518h case    2:*/		return 0x8215D51C;
		  /* 8215D51Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215D51Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D51Ch case    3:*/		return 0x8215D520;
		  /* 8215D520h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215D520h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215D520h case    4:*/		return 0x8215D524;
		  /* 8215D524h */ case    5:  		/* lwz R11, <#[R3 + 68]> */
		/* 8215D524h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000044) );
		/* 8215D524h case    5:*/		return 0x8215D528;
		  /* 8215D528h */ case    6:  		/* mr R31, R3 */
		/* 8215D528h case    6:*/		regs.R31 = regs.R3;
		/* 8215D528h case    6:*/		return 0x8215D52C;
		  /* 8215D52Ch */ case    7:  		/* mr R30, R4 */
		/* 8215D52Ch case    7:*/		regs.R30 = regs.R4;
		/* 8215D52Ch case    7:*/		return 0x8215D530;
		  /* 8215D530h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 8215D530h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8215D530h case    8:*/		return 0x8215D534;
		  /* 8215D534h */ case    9:  		/* bc 12, CR6_LT, 40 */
		/* 8215D534h case    9:*/		if ( regs.CR[6].lt ) { return 0x8215D55C;  }
		/* 8215D534h case    9:*/		return 0x8215D538;
		  /* 8215D538h */ case   10:  		/* lis R11, -32253 */
		/* 8215D538h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D538h case   10:*/		return 0x8215D53C;
		  /* 8215D53Ch */ case   11:  		/* lis R10, -32253 */
		/* 8215D53Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215D53Ch case   11:*/		return 0x8215D540;
		  /* 8215D540h */ case   12:  		/* lis R9, -32253 */
		/* 8215D540h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D540h case   12:*/		return 0x8215D544;
		  /* 8215D544h */ case   13:  		/* addi R6, R11, 27808 */
		/* 8215D544h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6CA0);
		/* 8215D544h case   13:*/		return 0x8215D548;
		  /* 8215D548h */ case   14:  		/* addi R5, R10, 27736 */
		/* 8215D548h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6C58);
		/* 8215D548h case   14:*/		return 0x8215D54C;
		  /* 8215D54Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8215D54Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D54Ch case   15:*/		return 0x8215D550;
		  /* 8215D550h */ case   16:  		/* li R7, 309 */
		/* 8215D550h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x135);
		/* 8215D550h case   16:*/		return 0x8215D554;
		  /* 8215D554h */ case   17:  		/* li R3, 0 */
		/* 8215D554h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D554h case   17:*/		return 0x8215D558;
		  /* 8215D558h */ case   18:  		/* bl -22864 */
		/* 8215D558h case   18:*/		regs.LR = 0x8215D55C; return 0x82157C08;
		/* 8215D558h case   18:*/		return 0x8215D55C;
	}
	return 0x8215D55C;
} // Block from 8215D510h-8215D55Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215D55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D55C);
		  /* 8215D55Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215D55Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215D55Ch case    0:*/		return 0x8215D560;
		  /* 8215D560h */ case    1:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8215D560h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8215D560h case    1:*/		return 0x8215D564;
		  /* 8215D564h */ case    2:  		/* lwzx R3, <#[R11 + R10]> */
		/* 8215D564h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8215D564h case    2:*/		return 0x8215D568;
		  /* 8215D568h */ case    3:  		/* addi R1, R1, 112 */
		/* 8215D568h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215D568h case    3:*/		return 0x8215D56C;
		  /* 8215D56Ch */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D56Ch case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D56Ch case    4:*/		return 0x8215D570;
		  /* 8215D570h */ case    5:  		/* mtspr LR, R12 */
		/* 8215D570h case    5:*/		regs.LR = regs.R12;
		/* 8215D570h case    5:*/		return 0x8215D574;
		  /* 8215D574h */ case    6:  		/* ld R30, <#[R1 - 24]> */
		/* 8215D574h case    6:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D574h case    6:*/		return 0x8215D578;
		  /* 8215D578h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D578h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D578h case    7:*/		return 0x8215D57C;
		  /* 8215D57Ch */ case    8:  		/* bclr 20, CR0_LT */
		/* 8215D57Ch case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D57Ch case    8:*/		return 0x8215D580;
	}
	return 0x8215D580;
} // Block from 8215D55Ch-8215D580h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D580);
		  /* 8215D580h */ case    0:  		/* lwz R11, <#[R3 + 28]> */
		/* 8215D580h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8215D580h case    0:*/		return 0x8215D584;
		  /* 8215D584h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215D584h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215D584h case    1:*/		return 0x8215D588;
		  /* 8215D588h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8215D588h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215D59C;  }
		/* 8215D588h case    2:*/		return 0x8215D58C;
		  /* 8215D58Ch */ case    3:  		/* lwz R11, <#[R3 + 32]> */
		/* 8215D58Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8215D58Ch case    3:*/		return 0x8215D590;
		  /* 8215D590h */ case    4:  		/* li R3, 1 */
		/* 8215D590h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8215D590h case    4:*/		return 0x8215D594;
		  /* 8215D594h */ case    5:  		/* stw R11, <#[R4]> */
		/* 8215D594h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8215D594h case    5:*/		return 0x8215D598;
		  /* 8215D598h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8215D598h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D598h case    6:*/		return 0x8215D59C;
	}
	return 0x8215D59C;
} // Block from 8215D580h-8215D59Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215D59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D59C);
		  /* 8215D59Ch */ case    0:  		/* li R3, 0 */
		/* 8215D59Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D59Ch case    0:*/		return 0x8215D5A0;
		  /* 8215D5A0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215D5A0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D5A0h case    1:*/		return 0x8215D5A4;
	}
	return 0x8215D5A4;
} // Block from 8215D59Ch-8215D5A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D5A4);
		  /* 8215D5A4h */ case    0:  		/* nop */
		/* 8215D5A4h case    0:*/		cpu::op::nop();
		/* 8215D5A4h case    0:*/		return 0x8215D5A8;
	}
	return 0x8215D5A8;
} // Block from 8215D5A4h-8215D5A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D5A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D5A8);
		  /* 8215D5A8h */ case    0:  		/* mfspr R12, LR */
		/* 8215D5A8h case    0:*/		regs.R12 = regs.LR;
		/* 8215D5A8h case    0:*/		return 0x8215D5AC;
		  /* 8215D5ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D5ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D5ACh case    1:*/		return 0x8215D5B0;
		  /* 8215D5B0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215D5B0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D5B0h case    2:*/		return 0x8215D5B4;
		  /* 8215D5B4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215D5B4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D5B4h case    3:*/		return 0x8215D5B8;
		  /* 8215D5B8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215D5B8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215D5B8h case    4:*/		return 0x8215D5BC;
		  /* 8215D5BCh */ case    5:  		/* mr R31, R3 */
		/* 8215D5BCh case    5:*/		regs.R31 = regs.R3;
		/* 8215D5BCh case    5:*/		return 0x8215D5C0;
		  /* 8215D5C0h */ case    6:  		/* mr R30, R4 */
		/* 8215D5C0h case    6:*/		regs.R30 = regs.R4;
		/* 8215D5C0h case    6:*/		return 0x8215D5C4;
		  /* 8215D5C4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215D5C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D5C4h case    7:*/		return 0x8215D5C8;
		  /* 8215D5C8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D5C8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215D5EC;  }
		/* 8215D5C8h case    8:*/		return 0x8215D5CC;
		  /* 8215D5CCh */ case    9:  		/* lis R11, -32252 */
		/* 8215D5CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D5CCh case    9:*/		return 0x8215D5D0;
	}
	return 0x8215D5D0;
} // Block from 8215D5A8h-8215D5D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215D5D0h
// Function '?OBJLIST_RemoveLastItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D5D0);
		  /* 8215D5D0h */ case    0:  		/* lis R10, -32252 */
		/* 8215D5D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D5D0h case    0:*/		return 0x8215D5D4;
		  /* 8215D5D4h */ case    1:  		/* lis R9, -32253 */
		/* 8215D5D4h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D5D4h case    1:*/		return 0x8215D5D8;
		  /* 8215D5D8h */ case    2:  		/* addi R6, R11, -21088 */
		/* 8215D5D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D5D8h case    2:*/		return 0x8215D5DC;
		  /* 8215D5DCh */ case    3:  		/* addi R5, R10, -22036 */
		/* 8215D5DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D5DCh case    3:*/		return 0x8215D5E0;
		  /* 8215D5E0h */ case    4:  		/* addi R4, R9, 27460 */
		/* 8215D5E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D5E0h case    4:*/		return 0x8215D5E4;
		  /* 8215D5E4h */ case    5:  		/* li R7, 452 */
		/* 8215D5E4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1C4);
		/* 8215D5E4h case    5:*/		return 0x8215D5E8;
		  /* 8215D5E8h */ case    6:  		/* bl -23008 */
		/* 8215D5E8h case    6:*/		regs.LR = 0x8215D5EC; return 0x82157C08;
		/* 8215D5E8h case    6:*/		return 0x8215D5EC;
	}
	return 0x8215D5EC;
} // Block from 8215D5D0h-8215D5ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215D5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D5EC);
		  /* 8215D5ECh */ case    0:  		/* stw R30, <#[R31 + 40]> */
		/* 8215D5ECh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000028) );
		/* 8215D5ECh case    0:*/		return 0x8215D5F0;
		  /* 8215D5F0h */ case    1:  		/* addi R1, R1, 112 */
		/* 8215D5F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215D5F0h case    1:*/		return 0x8215D5F4;
		  /* 8215D5F4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D5F4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D5F4h case    2:*/		return 0x8215D5F8;
		  /* 8215D5F8h */ case    3:  		/* mtspr LR, R12 */
		/* 8215D5F8h case    3:*/		regs.LR = regs.R12;
		/* 8215D5F8h case    3:*/		return 0x8215D5FC;
		  /* 8215D5FCh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8215D5FCh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D5FCh case    4:*/		return 0x8215D600;
		  /* 8215D600h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D600h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D600h case    5:*/		return 0x8215D604;
		  /* 8215D604h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8215D604h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D604h case    6:*/		return 0x8215D608;
	}
	return 0x8215D608;
} // Block from 8215D5ECh-8215D608h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215D608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D608);
		  /* 8215D608h */ case    0:  		/* mfspr R12, LR */
		/* 8215D608h case    0:*/		regs.R12 = regs.LR;
		/* 8215D608h case    0:*/		return 0x8215D60C;
		  /* 8215D60Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D60Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D60Ch case    1:*/		return 0x8215D610;
		  /* 8215D610h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215D610h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D610h case    2:*/		return 0x8215D614;
		  /* 8215D614h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215D614h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215D614h case    3:*/		return 0x8215D618;
		  /* 8215D618h */ case    4:  		/* mr R31, R3 */
		/* 8215D618h case    4:*/		regs.R31 = regs.R3;
		/* 8215D618h case    4:*/		return 0x8215D61C;
		  /* 8215D61Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215D61Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D61Ch case    5:*/		return 0x8215D620;
		  /* 8215D620h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D620h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215D644;  }
		/* 8215D620h case    6:*/		return 0x8215D624;
		  /* 8215D624h */ case    7:  		/* lis R11, -32252 */
		/* 8215D624h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D624h case    7:*/		return 0x8215D628;
		  /* 8215D628h */ case    8:  		/* lis R10, -32252 */
		/* 8215D628h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D628h case    8:*/		return 0x8215D62C;
		  /* 8215D62Ch */ case    9:  		/* lis R9, -32253 */
		/* 8215D62Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D62Ch case    9:*/		return 0x8215D630;
		  /* 8215D630h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215D630h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D630h case   10:*/		return 0x8215D634;
		  /* 8215D634h */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215D634h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D634h case   11:*/		return 0x8215D638;
		  /* 8215D638h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215D638h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D638h case   12:*/		return 0x8215D63C;
		  /* 8215D63Ch */ case   13:  		/* li R7, 472 */
		/* 8215D63Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1D8);
		/* 8215D63Ch case   13:*/		return 0x8215D640;
		  /* 8215D640h */ case   14:  		/* bl -23096 */
		/* 8215D640h case   14:*/		regs.LR = 0x8215D644; return 0x82157C08;
		/* 8215D640h case   14:*/		return 0x8215D644;
	}
	return 0x8215D644;
} // Block from 8215D608h-8215D644h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215D644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D644);
		  /* 8215D644h */ case    0:  		/* lwz R3, <#[R31 + 40]> */
		/* 8215D644h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 8215D644h case    0:*/		return 0x8215D648;
		  /* 8215D648h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215D648h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215D648h case    1:*/		return 0x8215D64C;
		  /* 8215D64Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D64Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D64Ch case    2:*/		return 0x8215D650;
		  /* 8215D650h */ case    3:  		/* mtspr LR, R12 */
		/* 8215D650h case    3:*/		regs.LR = regs.R12;
		/* 8215D650h case    3:*/		return 0x8215D654;
		  /* 8215D654h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D654h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D654h case    4:*/		return 0x8215D658;
		  /* 8215D658h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215D658h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D658h case    5:*/		return 0x8215D65C;
	}
	return 0x8215D65C;
} // Block from 8215D644h-8215D65Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D65C);
		  /* 8215D65Ch */ case    0:  		/* nop */
		/* 8215D65Ch case    0:*/		cpu::op::nop();
		/* 8215D65Ch case    0:*/		return 0x8215D660;
	}
	return 0x8215D660;
} // Block from 8215D65Ch-8215D660h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D660);
		  /* 8215D660h */ case    0:  		/* mfspr R12, LR */
		/* 8215D660h case    0:*/		regs.R12 = regs.LR;
		/* 8215D660h case    0:*/		return 0x8215D664;
		  /* 8215D664h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D664h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D664h case    1:*/		return 0x8215D668;
		  /* 8215D668h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215D668h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D668h case    2:*/		return 0x8215D66C;
		  /* 8215D66Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215D66Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D66Ch case    3:*/		return 0x8215D670;
		  /* 8215D670h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215D670h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215D670h case    4:*/		return 0x8215D674;
		  /* 8215D674h */ case    5:  		/* mr R31, R3 */
		/* 8215D674h case    5:*/		regs.R31 = regs.R3;
		/* 8215D674h case    5:*/		return 0x8215D678;
		  /* 8215D678h */ case    6:  		/* mr R30, R4 */
		/* 8215D678h case    6:*/		regs.R30 = regs.R4;
		/* 8215D678h case    6:*/		return 0x8215D67C;
		  /* 8215D67Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215D67Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D67Ch case    7:*/		return 0x8215D680;
		  /* 8215D680h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D680h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215D6A4;  }
		/* 8215D680h case    8:*/		return 0x8215D684;
		  /* 8215D684h */ case    9:  		/* lis R11, -32252 */
		/* 8215D684h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D684h case    9:*/		return 0x8215D688;
		  /* 8215D688h */ case   10:  		/* lis R10, -32252 */
		/* 8215D688h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D688h case   10:*/		return 0x8215D68C;
		  /* 8215D68Ch */ case   11:  		/* lis R9, -32253 */
		/* 8215D68Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D68Ch case   11:*/		return 0x8215D690;
		  /* 8215D690h */ case   12:  		/* addi R6, R11, -21088 */
		/* 8215D690h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D690h case   12:*/		return 0x8215D694;
		  /* 8215D694h */ case   13:  		/* addi R5, R10, -22036 */
		/* 8215D694h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D694h case   13:*/		return 0x8215D698;
		  /* 8215D698h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8215D698h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D698h case   14:*/		return 0x8215D69C;
		  /* 8215D69Ch */ case   15:  		/* li R7, 498 */
		/* 8215D69Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x1F2);
		/* 8215D69Ch case   15:*/		return 0x8215D6A0;
		  /* 8215D6A0h */ case   16:  		/* bl -23192 */
		/* 8215D6A0h case   16:*/		regs.LR = 0x8215D6A4; return 0x82157C08;
		/* 8215D6A0h case   16:*/		return 0x8215D6A4;
	}
	return 0x8215D6A4;
} // Block from 8215D660h-8215D6A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215D6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D6A4);
		  /* 8215D6A4h */ case    0:  		/* stw R30, <#[R31 + 48]> */
		/* 8215D6A4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000030) );
		/* 8215D6A4h case    0:*/		return 0x8215D6A8;
	}
	return 0x8215D6A8;
} // Block from 8215D6A4h-8215D6A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D6A8h
// Function '?OBJLIST_RemoveItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@PAU21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D6A8);
		  /* 8215D6A8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8215D6A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215D6A8h case    0:*/		return 0x8215D6AC;
		  /* 8215D6ACh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D6ACh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D6ACh case    1:*/		return 0x8215D6B0;
		  /* 8215D6B0h */ case    2:  		/* mtspr LR, R12 */
		/* 8215D6B0h case    2:*/		regs.LR = regs.R12;
		/* 8215D6B0h case    2:*/		return 0x8215D6B4;
		  /* 8215D6B4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8215D6B4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215D6B4h case    3:*/		return 0x8215D6B8;
		  /* 8215D6B8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D6B8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D6B8h case    4:*/		return 0x8215D6BC;
		  /* 8215D6BCh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215D6BCh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D6BCh case    5:*/		return 0x8215D6C0;
	}
	return 0x8215D6C0;
} // Block from 8215D6A8h-8215D6C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D6C0);
		  /* 8215D6C0h */ case    0:  		/* mfspr R12, LR */
		/* 8215D6C0h case    0:*/		regs.R12 = regs.LR;
		/* 8215D6C0h case    0:*/		return 0x8215D6C4;
		  /* 8215D6C4h */ case    1:  		/* bl -836724 */
		/* 8215D6C4h case    1:*/		regs.LR = 0x8215D6C8; return 0x82091250;
		/* 8215D6C4h case    1:*/		return 0x8215D6C8;
		  /* 8215D6C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215D6C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215D6C8h case    2:*/		return 0x8215D6CC;
		  /* 8215D6CCh */ case    3:  		/* lis R11, -32253 */
		/* 8215D6CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D6CCh case    3:*/		return 0x8215D6D0;
		  /* 8215D6D0h */ case    4:  		/* lis R10, -32252 */
		/* 8215D6D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D6D0h case    4:*/		return 0x8215D6D4;
		  /* 8215D6D4h */ case    5:  		/* mr R31, R3 */
		/* 8215D6D4h case    5:*/		regs.R31 = regs.R3;
		/* 8215D6D4h case    5:*/		return 0x8215D6D8;
		  /* 8215D6D8h */ case    6:  		/* mr R30, R4 */
		/* 8215D6D8h case    6:*/		regs.R30 = regs.R4;
		/* 8215D6D8h case    6:*/		return 0x8215D6DC;
		  /* 8215D6DCh */ case    7:  		/* mr R26, R5 */
		/* 8215D6DCh case    7:*/		regs.R26 = regs.R5;
		/* 8215D6DCh case    7:*/		return 0x8215D6E0;
		  /* 8215D6E0h */ case    8:  		/* rlwinm R27, R4, 2, 0, 29 */
		/* 8215D6E0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R4);
		/* 8215D6E0h case    8:*/		return 0x8215D6E4;
		  /* 8215D6E4h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215D6E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D6E4h case    9:*/		return 0x8215D6E8;
		  /* 8215D6E8h */ case   10:  		/* addi R29, R11, 27460 */
		/* 8215D6E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215D6E8h case   10:*/		return 0x8215D6EC;
		  /* 8215D6ECh */ case   11:  		/* addi R28, R10, -21088 */
		/* 8215D6ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFADA0);
		/* 8215D6ECh case   11:*/		return 0x8215D6F0;
		  /* 8215D6F0h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D6F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215D710;  }
		/* 8215D6F0h case   12:*/		return 0x8215D6F4;
		  /* 8215D6F4h */ case   13:  		/* lis R11, -32252 */
		/* 8215D6F4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D6F4h case   13:*/		return 0x8215D6F8;
		  /* 8215D6F8h */ case   14:  		/* mr R6, R28 */
		/* 8215D6F8h case   14:*/		regs.R6 = regs.R28;
		/* 8215D6F8h case   14:*/		return 0x8215D6FC;
		  /* 8215D6FCh */ case   15:  		/* addi R5, R11, -22036 */
		/* 8215D6FCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215D6FCh case   15:*/		return 0x8215D700;
		  /* 8215D700h */ case   16:  		/* mr R4, R29 */
		/* 8215D700h case   16:*/		regs.R4 = regs.R29;
		/* 8215D700h case   16:*/		return 0x8215D704;
		  /* 8215D704h */ case   17:  		/* li R7, 550 */
		/* 8215D704h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x226);
		/* 8215D704h case   17:*/		return 0x8215D708;
		  /* 8215D708h */ case   18:  		/* li R3, 0 */
		/* 8215D708h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D708h case   18:*/		return 0x8215D70C;
		  /* 8215D70Ch */ case   19:  		/* bl -23300 */
		/* 8215D70Ch case   19:*/		regs.LR = 0x8215D710; return 0x82157C08;
		/* 8215D70Ch case   19:*/		return 0x8215D710;
	}
	return 0x8215D710;
} // Block from 8215D6C0h-8215D710h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215D710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D710);
		  /* 8215D710h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215D710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215D710h case    0:*/		return 0x8215D714;
		  /* 8215D714h */ case    1:  		/* addi R4, R27, 8 */
		/* 8215D714h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R27,0x8);
		/* 8215D714h case    1:*/		return 0x8215D718;
		  /* 8215D718h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215D718h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215D718h case    2:*/		return 0x8215D71C;
		  /* 8215D71Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8215D71Ch case    3:*/		regs.CTR = regs.R11;
		/* 8215D71Ch case    3:*/		return 0x8215D720;
		  /* 8215D720h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215D720h case    4:*/		if ( 1 ) { regs.LR = 0x8215D724; return (uint32)regs.CTR; }
		/* 8215D720h case    4:*/		return 0x8215D724;
		  /* 8215D724h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8215D724h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215D724h case    5:*/		return 0x8215D728;
		  /* 8215D728h */ case    6:  		/* stw R3, <#[R31 + 44]> */
		/* 8215D728h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D728h case    6:*/		return 0x8215D72C;
		  /* 8215D72Ch */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 8215D72Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8215D754;  }
		/* 8215D72Ch case    7:*/		return 0x8215D730;
		  /* 8215D730h */ case    8:  		/* lis R11, -32252 */
		/* 8215D730h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D730h case    8:*/		return 0x8215D734;
		  /* 8215D734h */ case    9:  		/* mr R6, R28 */
		/* 8215D734h case    9:*/		regs.R6 = regs.R28;
		/* 8215D734h case    9:*/		return 0x8215D738;
		  /* 8215D738h */ case   10:  		/* addi R5, R11, -20844 */
		/* 8215D738h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE94);
		/* 8215D738h case   10:*/		return 0x8215D73C;
		  /* 8215D73Ch */ case   11:  		/* mr R4, R29 */
		/* 8215D73Ch case   11:*/		regs.R4 = regs.R29;
		/* 8215D73Ch case   11:*/		return 0x8215D740;
		  /* 8215D740h */ case   12:  		/* li R7, 557 */
		/* 8215D740h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x22D);
		/* 8215D740h case   12:*/		return 0x8215D744;
		  /* 8215D744h */ case   13:  		/* li R3, 0 */
		/* 8215D744h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D744h case   13:*/		return 0x8215D748;
		  /* 8215D748h */ case   14:  		/* bl -23360 */
		/* 8215D748h case   14:*/		regs.LR = 0x8215D74C; return 0x82157C08;
		/* 8215D748h case   14:*/		return 0x8215D74C;
		  /* 8215D74Ch */ case   15:  		/* li R3, 16 */
		/* 8215D74Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215D74Ch case   15:*/		return 0x8215D750;
		  /* 8215D750h */ case   16:  		/* b 144 */
		/* 8215D750h case   16:*/		return 0x8215D7E0;
		/* 8215D750h case   16:*/		return 0x8215D754;
	}
	return 0x8215D754;
} // Block from 8215D710h-8215D754h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215D754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D754);
		  /* 8215D754h */ case    0:  		/* stw R30, <#[R3]> */
		/* 8215D754h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8215D754h case    0:*/		return 0x8215D758;
	}
	return 0x8215D758;
} // Block from 8215D754h-8215D758h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D758h
// Function '?OBJLIST_GetNextItem@XGRAPHICS@@YAPAU_OBJECT_LIST_ITEM@1@PAU_OBJECT_LIST@1@PAU21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D758);
		  /* 8215D758h */ case    0:  		/* li R11, 3 */
		/* 8215D758h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 8215D758h case    0:*/		return 0x8215D75C;
		  /* 8215D75Ch */ case    1:  		/* lwz R10, <#[R31 + 44]> */
		/* 8215D75Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D75Ch case    1:*/		return 0x8215D760;
		  /* 8215D760h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 8215D760h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8215D760h case    2:*/		return 0x8215D764;
		  /* 8215D764h */ case    3:  		/* stw R9, <#[R10 + 4]> */
		/* 8215D764h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8215D764h case    3:*/		return 0x8215D768;
		  /* 8215D768h */ case    4:  		/* lwz R10, <#[R31 + 44]> */
		/* 8215D768h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D768h case    4:*/		return 0x8215D76C;
		  /* 8215D76Ch */ case    5:  		/* lwz R10, <#[R10]> */
		/* 8215D76Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8215D76Ch case    5:*/		return 0x8215D770;
		  /* 8215D770h */ case    6:  		/* divwu R11, R10, R11 */
		/* 8215D770h case    6:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8215D770h case    6:*/		return 0x8215D774;
		  /* 8215D774h */ case    7:  		/* mulli R11, R11, 3 */
		/* 8215D774h case    7:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8215D774h case    7:*/		return 0x8215D778;
		  /* 8215D778h */ case    8:  		/* subf. R11, R11, R10 */
		/* 8215D778h case    8:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8215D778h case    8:*/		return 0x8215D77C;
		  /* 8215D77Ch */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 8215D77Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8215D79C;  }
		/* 8215D77Ch case    9:*/		return 0x8215D780;
		  /* 8215D780h */ case   10:  		/* lis R11, -32252 */
		/* 8215D780h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D780h case   10:*/		return 0x8215D784;
		  /* 8215D784h */ case   11:  		/* mr R6, R28 */
		/* 8215D784h case   11:*/		regs.R6 = regs.R28;
		/* 8215D784h case   11:*/		return 0x8215D788;
		  /* 8215D788h */ case   12:  		/* addi R5, R11, -20888 */
		/* 8215D788h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE68);
		/* 8215D788h case   12:*/		return 0x8215D78C;
		  /* 8215D78Ch */ case   13:  		/* mr R4, R29 */
		/* 8215D78Ch case   13:*/		regs.R4 = regs.R29;
		/* 8215D78Ch case   13:*/		return 0x8215D790;
		  /* 8215D790h */ case   14:  		/* li R7, 563 */
		/* 8215D790h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x233);
		/* 8215D790h case   14:*/		return 0x8215D794;
		  /* 8215D794h */ case   15:  		/* li R3, 0 */
		/* 8215D794h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D794h case   15:*/		return 0x8215D798;
		  /* 8215D798h */ case   16:  		/* bl -23440 */
		/* 8215D798h case   16:*/		regs.LR = 0x8215D79C; return 0x82157C08;
		/* 8215D798h case   16:*/		return 0x8215D79C;
	}
	return 0x8215D79C;
} // Block from 8215D758h-8215D79Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215D79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D79C);
		  /* 8215D79Ch */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 8215D79Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D79Ch case    0:*/		return 0x8215D7A0;
		  /* 8215D7A0h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8215D7A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8215D7A0h case    1:*/		return 0x8215D7A4;
		  /* 8215D7A4h */ case    2:  		/* cmplwi CR6, R11, 16384 */
		/* 8215D7A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 8215D7A4h case    2:*/		return 0x8215D7A8;
		  /* 8215D7A8h */ case    3:  		/* bc 12, CR6_LT, 32 */
		/* 8215D7A8h case    3:*/		if ( regs.CR[6].lt ) { return 0x8215D7C8;  }
		/* 8215D7A8h case    3:*/		return 0x8215D7AC;
		  /* 8215D7ACh */ case    4:  		/* lis R11, -32252 */
		/* 8215D7ACh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D7ACh case    4:*/		return 0x8215D7B0;
		  /* 8215D7B0h */ case    5:  		/* mr R6, R28 */
		/* 8215D7B0h case    5:*/		regs.R6 = regs.R28;
		/* 8215D7B0h case    5:*/		return 0x8215D7B4;
		  /* 8215D7B4h */ case    6:  		/* addi R5, R11, -20928 */
		/* 8215D7B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE40);
		/* 8215D7B4h case    6:*/		return 0x8215D7B8;
		  /* 8215D7B8h */ case    7:  		/* mr R4, R29 */
		/* 8215D7B8h case    7:*/		regs.R4 = regs.R29;
		/* 8215D7B8h case    7:*/		return 0x8215D7BC;
		  /* 8215D7BCh */ case    8:  		/* li R7, 564 */
		/* 8215D7BCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x234);
		/* 8215D7BCh case    8:*/		return 0x8215D7C0;
		  /* 8215D7C0h */ case    9:  		/* li R3, 0 */
		/* 8215D7C0h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D7C0h case    9:*/		return 0x8215D7C4;
		  /* 8215D7C4h */ case   10:  		/* bl -23484 */
		/* 8215D7C4h case   10:*/		regs.LR = 0x8215D7C8; return 0x82157C08;
		/* 8215D7C4h case   10:*/		return 0x8215D7C8;
	}
	return 0x8215D7C8;
} // Block from 8215D79Ch-8215D7C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215D7C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D7C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D7C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D7C8);
		  /* 8215D7C8h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 8215D7C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D7C8h case    0:*/		return 0x8215D7CC;
		  /* 8215D7CCh */ case    1:  		/* mr R5, R27 */
		/* 8215D7CCh case    1:*/		regs.R5 = regs.R27;
		/* 8215D7CCh case    1:*/		return 0x8215D7D0;
	}
	return 0x8215D7D0;
} // Block from 8215D7C8h-8215D7D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D7D0h
// Function '?OBJLIST_DestroyListItem@XGRAPHICS@@YAXPAU_OBJECT_LIST_ITEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D7D0);
		  /* 8215D7D0h */ case    0:  		/* mr R4, R26 */
		/* 8215D7D0h case    0:*/		regs.R4 = regs.R26;
		/* 8215D7D0h case    0:*/		return 0x8215D7D4;
		  /* 8215D7D4h */ case    1:  		/* addi R3, R11, 8 */
		/* 8215D7D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x8);
		/* 8215D7D4h case    1:*/		return 0x8215D7D8;
		  /* 8215D7D8h */ case    2:  		/* bl -835112 */
		/* 8215D7D8h case    2:*/		regs.LR = 0x8215D7DC; return 0x820919B0;
		/* 8215D7D8h case    2:*/		return 0x8215D7DC;
		  /* 8215D7DCh */ case    3:  		/* li R3, 0 */
		/* 8215D7DCh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D7DCh case    3:*/		return 0x8215D7E0;
	}
	return 0x8215D7E0;
} // Block from 8215D7D0h-8215D7E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215D7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D7E0);
		  /* 8215D7E0h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215D7E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215D7E0h case    0:*/		return 0x8215D7E4;
		  /* 8215D7E4h */ case    1:  		/* b -836932 */
		/* 8215D7E4h case    1:*/		return 0x820912A0;
		/* 8215D7E4h case    1:*/		return 0x8215D7E8;
	}
	return 0x8215D7E8;
} // Block from 8215D7E0h-8215D7E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D7E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D7E8);
		  /* 8215D7E8h */ case    0:  		/* mfspr R12, LR */
		/* 8215D7E8h case    0:*/		regs.R12 = regs.LR;
		/* 8215D7E8h case    0:*/		return 0x8215D7EC;
		  /* 8215D7ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D7ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D7ECh case    1:*/		return 0x8215D7F0;
		  /* 8215D7F0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215D7F0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D7F0h case    2:*/		return 0x8215D7F4;
		  /* 8215D7F4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215D7F4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215D7F4h case    3:*/		return 0x8215D7F8;
		  /* 8215D7F8h */ case    4:  		/* mr R31, R3 */
		/* 8215D7F8h case    4:*/		regs.R31 = regs.R3;
		/* 8215D7F8h case    4:*/		return 0x8215D7FC;
		  /* 8215D7FCh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215D7FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D7FCh case    5:*/		return 0x8215D800;
		  /* 8215D800h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D800h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215D824;  }
		/* 8215D800h case    6:*/		return 0x8215D804;
		  /* 8215D804h */ case    7:  		/* lis R11, -32252 */
		/* 8215D804h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D804h case    7:*/		return 0x8215D808;
	}
	return 0x8215D808;
} // Block from 8215D7E8h-8215D808h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D808h
// Function '?OBJLIST_GetDataObject@XGRAPHICS@@YAPAXPAU_OBJECT_LIST_ITEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D808);
		  /* 8215D808h */ case    0:  		/* lis R10, -32252 */
		/* 8215D808h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D808h case    0:*/		return 0x8215D80C;
		  /* 8215D80Ch */ case    1:  		/* lis R9, -32253 */
		/* 8215D80Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D80Ch case    1:*/		return 0x8215D810;
		  /* 8215D810h */ case    2:  		/* addi R6, R11, -21088 */
		/* 8215D810h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D810h case    2:*/		return 0x8215D814;
		  /* 8215D814h */ case    3:  		/* addi R5, R10, -22036 */
		/* 8215D814h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D814h case    3:*/		return 0x8215D818;
		  /* 8215D818h */ case    4:  		/* addi R4, R9, 27460 */
		/* 8215D818h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D818h case    4:*/		return 0x8215D81C;
		  /* 8215D81Ch */ case    5:  		/* li R7, 591 */
		/* 8215D81Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x24F);
		/* 8215D81Ch case    5:*/		return 0x8215D820;
		  /* 8215D820h */ case    6:  		/* bl -23576 */
		/* 8215D820h case    6:*/		regs.LR = 0x8215D824; return 0x82157C08;
		/* 8215D820h case    6:*/		return 0x8215D824;
	}
	return 0x8215D824;
} // Block from 8215D808h-8215D824h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215D824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D824);
		  /* 8215D824h */ case    0:  		/* lwz R3, <#[R31 + 44]> */
		/* 8215D824h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215D824h case    0:*/		return 0x8215D828;
		  /* 8215D828h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215D828h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215D828h case    1:*/		return 0x8215D82C;
		  /* 8215D82Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D82Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D82Ch case    2:*/		return 0x8215D830;
		  /* 8215D830h */ case    3:  		/* mtspr LR, R12 */
		/* 8215D830h case    3:*/		regs.LR = regs.R12;
		/* 8215D830h case    3:*/		return 0x8215D834;
		  /* 8215D834h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D834h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D834h case    4:*/		return 0x8215D838;
		  /* 8215D838h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215D838h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D838h case    5:*/		return 0x8215D83C;
	}
	return 0x8215D83C;
} // Block from 8215D824h-8215D83Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D83C);
		  /* 8215D83Ch */ case    0:  		/* nop */
		/* 8215D83Ch case    0:*/		cpu::op::nop();
		/* 8215D83Ch case    0:*/		return 0x8215D840;
	}
	return 0x8215D840;
} // Block from 8215D83Ch-8215D840h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D840);
		  /* 8215D840h */ case    0:  		/* mfspr R12, LR */
		/* 8215D840h case    0:*/		regs.R12 = regs.LR;
		/* 8215D840h case    0:*/		return 0x8215D844;
		  /* 8215D844h */ case    1:  		/* bl -837104 */
		/* 8215D844h case    1:*/		regs.LR = 0x8215D848; return 0x82091254;
		/* 8215D844h case    1:*/		return 0x8215D848;
		  /* 8215D848h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215D848h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215D848h case    2:*/		return 0x8215D84C;
		  /* 8215D84Ch */ case    3:  		/* lwz R9, <#[R3 + 72]> */
		/* 8215D84Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000048) );
		/* 8215D84Ch case    3:*/		return 0x8215D850;
		  /* 8215D850h */ case    4:  		/* lis R11, -32253 */
		/* 8215D850h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D850h case    4:*/		return 0x8215D854;
		  /* 8215D854h */ case    5:  		/* lis R10, -32253 */
		/* 8215D854h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215D854h case    5:*/		return 0x8215D858;
		  /* 8215D858h */ case    6:  		/* mr R31, R3 */
		/* 8215D858h case    6:*/		regs.R31 = regs.R3;
		/* 8215D858h case    6:*/		return 0x8215D85C;
		  /* 8215D85Ch */ case    7:  		/* mr R30, R4 */
		/* 8215D85Ch case    7:*/		regs.R30 = regs.R4;
		/* 8215D85Ch case    7:*/		return 0x8215D860;
	}
	return 0x8215D860;
} // Block from 8215D840h-8215D860h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D860h
// Function '?OBJLIST_CreateObjMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D860);
		  /* 8215D860h */ case    0:  		/* mr R29, R5 */
		/* 8215D860h case    0:*/		regs.R29 = regs.R5;
		/* 8215D860h case    0:*/		return 0x8215D864;
		  /* 8215D864h */ case    1:  		/* cmplw CR6, R4, R9 */
		/* 8215D864h case    1:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8215D864h case    1:*/		return 0x8215D868;
		  /* 8215D868h */ case    2:  		/* addi R28, R11, 27460 */
		/* 8215D868h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215D868h case    2:*/		return 0x8215D86C;
		  /* 8215D86Ch */ case    3:  		/* addi R27, R10, 27808 */
		/* 8215D86Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6CA0);
		/* 8215D86Ch case    3:*/		return 0x8215D870;
		  /* 8215D870h */ case    4:  		/* bc 12, CR6_LT, 32 */
		/* 8215D870h case    4:*/		if ( regs.CR[6].lt ) { return 0x8215D890;  }
		/* 8215D870h case    4:*/		return 0x8215D874;
		  /* 8215D874h */ case    5:  		/* lis R11, -32253 */
		/* 8215D874h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D874h case    5:*/		return 0x8215D878;
		  /* 8215D878h */ case    6:  		/* mr R6, R27 */
		/* 8215D878h case    6:*/		regs.R6 = regs.R27;
		/* 8215D878h case    6:*/		return 0x8215D87C;
		  /* 8215D87Ch */ case    7:  		/* addi R5, R11, 27976 */
		/* 8215D87Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D48);
		/* 8215D87Ch case    7:*/		return 0x8215D880;
		  /* 8215D880h */ case    8:  		/* mr R4, R28 */
		/* 8215D880h case    8:*/		regs.R4 = regs.R28;
		/* 8215D880h case    8:*/		return 0x8215D884;
		  /* 8215D884h */ case    9:  		/* li R7, 634 */
		/* 8215D884h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x27A);
		/* 8215D884h case    9:*/		return 0x8215D888;
		  /* 8215D888h */ case   10:  		/* li R3, 0 */
		/* 8215D888h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D888h case   10:*/		return 0x8215D88C;
		  /* 8215D88Ch */ case   11:  		/* bl -23684 */
		/* 8215D88Ch case   11:*/		regs.LR = 0x8215D890; return 0x82157C08;
		/* 8215D88Ch case   11:*/		return 0x8215D890;
	}
	return 0x8215D890;
} // Block from 8215D860h-8215D890h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215D890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D890);
		  /* 8215D890h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8215D890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8215D890h case    0:*/		return 0x8215D894;
		  /* 8215D894h */ case    1:  		/* mulli R30, R30, 12 */
		/* 8215D894h case    1:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R30,0xC);
		/* 8215D894h case    1:*/		return 0x8215D898;
		  /* 8215D898h */ case    2:  		/* add R11, R30, R11 */
		/* 8215D898h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8215D898h case    2:*/		return 0x8215D89C;
		  /* 8215D89Ch */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8215D89Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8215D89Ch case    3:*/		return 0x8215D8A0;
		  /* 8215D8A0h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8215D8A0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8215D8A0h case    4:*/		return 0x8215D8A4;
		  /* 8215D8A4h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8215D8A4h case    5:*/		if ( regs.CR[6].lt ) { return 0x8215D8C4;  }
		/* 8215D8A4h case    5:*/		return 0x8215D8A8;
		  /* 8215D8A8h */ case    6:  		/* lis R11, -32253 */
		/* 8215D8A8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D8A8h case    6:*/		return 0x8215D8AC;
		  /* 8215D8ACh */ case    7:  		/* mr R6, R27 */
		/* 8215D8ACh case    7:*/		regs.R6 = regs.R27;
		/* 8215D8ACh case    7:*/		return 0x8215D8B0;
		  /* 8215D8B0h */ case    8:  		/* addi R5, R11, 27904 */
		/* 8215D8B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D00);
		/* 8215D8B0h case    8:*/		return 0x8215D8B4;
		  /* 8215D8B4h */ case    9:  		/* mr R4, R28 */
		/* 8215D8B4h case    9:*/		regs.R4 = regs.R28;
		/* 8215D8B4h case    9:*/		return 0x8215D8B8;
		  /* 8215D8B8h */ case   10:  		/* li R7, 634 */
		/* 8215D8B8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x27A);
		/* 8215D8B8h case   10:*/		return 0x8215D8BC;
		  /* 8215D8BCh */ case   11:  		/* li R3, 0 */
		/* 8215D8BCh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D8BCh case   11:*/		return 0x8215D8C0;
		  /* 8215D8C0h */ case   12:  		/* bl -23736 */
		/* 8215D8C0h case   12:*/		regs.LR = 0x8215D8C4; return 0x82157C08;
		/* 8215D8C0h case   12:*/		return 0x8215D8C4;
	}
	return 0x8215D8C4;
} // Block from 8215D890h-8215D8C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215D8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D8C4);
		  /* 8215D8C4h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8215D8C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8215D8C4h case    0:*/		return 0x8215D8C8;
		  /* 8215D8C8h */ case    1:  		/* mr R3, R31 */
		/* 8215D8C8h case    1:*/		regs.R3 = regs.R31;
		/* 8215D8C8h case    1:*/		return 0x8215D8CC;
		  /* 8215D8CCh */ case    2:  		/* add R11, R30, R11 */
		/* 8215D8CCh case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8215D8CCh case    2:*/		return 0x8215D8D0;
	}
	return 0x8215D8D0;
} // Block from 8215D8C4h-8215D8D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215D8D0h
// Function '?OBJLIST_CreateItemMemMgr@XGRAPHICS@@YAPAU_MEM_HEAD@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D8D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D8D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D8D0);
		  /* 8215D8D0h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 8215D8D0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8215D8D0h case    0:*/		return 0x8215D8D4;
		  /* 8215D8D4h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 8215D8D4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8215D8D4h case    1:*/		return 0x8215D8D8;
		  /* 8215D8D8h */ case    2:  		/* mullw R11, R9, R29 */
		/* 8215D8D8h case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R29);
		/* 8215D8D8h case    2:*/		return 0x8215D8DC;
		  /* 8215D8DCh */ case    3:  		/* add R4, R11, R10 */
		/* 8215D8DCh case    3:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 8215D8DCh case    3:*/		return 0x8215D8E0;
		  /* 8215D8E0h */ case    4:  		/* bl -976 */
		/* 8215D8E0h case    4:*/		regs.LR = 0x8215D8E4; return 0x8215D510;
		/* 8215D8E0h case    4:*/		return 0x8215D8E4;
		  /* 8215D8E4h */ case    5:  		/* addi R1, R1, 128 */
		/* 8215D8E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215D8E4h case    5:*/		return 0x8215D8E8;
		  /* 8215D8E8h */ case    6:  		/* b -837188 */
		/* 8215D8E8h case    6:*/		return 0x820912A4;
		/* 8215D8E8h case    6:*/		return 0x8215D8EC;
		  /* 8215D8ECh */ case    7:  		/* nop */
		/* 8215D8ECh case    7:*/		cpu::op::nop();
		/* 8215D8ECh case    7:*/		return 0x8215D8F0;
	}
	return 0x8215D8F0;
} // Block from 8215D8D0h-8215D8F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215D8F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D8F0);
		  /* 8215D8F0h */ case    0:  		/* mfspr R12, LR */
		/* 8215D8F0h case    0:*/		regs.R12 = regs.LR;
		/* 8215D8F0h case    0:*/		return 0x8215D8F4;
		  /* 8215D8F4h */ case    1:  		/* bl -837280 */
		/* 8215D8F4h case    1:*/		regs.LR = 0x8215D8F8; return 0x82091254;
		/* 8215D8F4h case    1:*/		return 0x8215D8F8;
		  /* 8215D8F8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215D8F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215D8F8h case    2:*/		return 0x8215D8FC;
		  /* 8215D8FCh */ case    3:  		/* lis R11, -32253 */
		/* 8215D8FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215D8FCh case    3:*/		return 0x8215D900;
		  /* 8215D900h */ case    4:  		/* lis R10, -32252 */
		/* 8215D900h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D900h case    4:*/		return 0x8215D904;
		  /* 8215D904h */ case    5:  		/* mr R31, R3 */
		/* 8215D904h case    5:*/		regs.R31 = regs.R3;
		/* 8215D904h case    5:*/		return 0x8215D908;
		  /* 8215D908h */ case    6:  		/* mr R28, R4 */
		/* 8215D908h case    6:*/		regs.R28 = regs.R4;
		/* 8215D908h case    6:*/		return 0x8215D90C;
		  /* 8215D90Ch */ case    7:  		/* mr R27, R5 */
		/* 8215D90Ch case    7:*/		regs.R27 = regs.R5;
		/* 8215D90Ch case    7:*/		return 0x8215D910;
		  /* 8215D910h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215D910h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D910h case    8:*/		return 0x8215D914;
		  /* 8215D914h */ case    9:  		/* addi R30, R11, 27460 */
		/* 8215D914h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215D914h case    9:*/		return 0x8215D918;
		  /* 8215D918h */ case   10:  		/* addi R29, R10, -21088 */
		/* 8215D918h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215D918h case   10:*/		return 0x8215D91C;
		  /* 8215D91Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D91Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215D93C;  }
		/* 8215D91Ch case   11:*/		return 0x8215D920;
		  /* 8215D920h */ case   12:  		/* lis R11, -32252 */
		/* 8215D920h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D920h case   12:*/		return 0x8215D924;
		  /* 8215D924h */ case   13:  		/* mr R6, R29 */
		/* 8215D924h case   13:*/		regs.R6 = regs.R29;
		/* 8215D924h case   13:*/		return 0x8215D928;
		  /* 8215D928h */ case   14:  		/* addi R5, R11, -22036 */
		/* 8215D928h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215D928h case   14:*/		return 0x8215D92C;
		  /* 8215D92Ch */ case   15:  		/* mr R4, R30 */
		/* 8215D92Ch case   15:*/		regs.R4 = regs.R30;
		/* 8215D92Ch case   15:*/		return 0x8215D930;
		  /* 8215D930h */ case   16:  		/* li R7, 919 */
		/* 8215D930h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x397);
		/* 8215D930h case   16:*/		return 0x8215D934;
		  /* 8215D934h */ case   17:  		/* li R3, 0 */
		/* 8215D934h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D934h case   17:*/		return 0x8215D938;
		  /* 8215D938h */ case   18:  		/* bl -23856 */
		/* 8215D938h case   18:*/		regs.LR = 0x8215D93C; return 0x82157C08;
		/* 8215D938h case   18:*/		return 0x8215D93C;
	}
	return 0x8215D93C;
} // Block from 8215D8F0h-8215D93Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215D93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D93C);
		  /* 8215D93Ch */ case    0:  		/* cmplwi CR6, R28, 16 */
		/* 8215D93Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000010);
		/* 8215D93Ch case    0:*/		return 0x8215D940;
	}
	return 0x8215D940;
} // Block from 8215D93Ch-8215D940h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215D940h
// Function '?OBJLIST_GetObjSize@XGRAPHICS@@YAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D940);
		  /* 8215D940h */ case    0:  		/* bc 12, CR6_LT, 32 */
		/* 8215D940h case    0:*/		if ( regs.CR[6].lt ) { return 0x8215D960;  }
		/* 8215D940h case    0:*/		return 0x8215D944;
		  /* 8215D944h */ case    1:  		/* lis R11, -32252 */
		/* 8215D944h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D944h case    1:*/		return 0x8215D948;
	}
	return 0x8215D948;
} // Block from 8215D940h-8215D948h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215D948h
// Function '?OBJLIST_CreateList@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D948);
		  /* 8215D948h */ case    0:  		/* mr R6, R29 */
		/* 8215D948h case    0:*/		regs.R6 = regs.R29;
		/* 8215D948h case    0:*/		return 0x8215D94C;
		  /* 8215D94Ch */ case    1:  		/* addi R5, R11, -20648 */
		/* 8215D94Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF58);
		/* 8215D94Ch case    1:*/		return 0x8215D950;
		  /* 8215D950h */ case    2:  		/* mr R4, R30 */
		/* 8215D950h case    2:*/		regs.R4 = regs.R30;
		/* 8215D950h case    2:*/		return 0x8215D954;
		  /* 8215D954h */ case    3:  		/* li R7, 920 */
		/* 8215D954h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x398);
		/* 8215D954h case    3:*/		return 0x8215D958;
		  /* 8215D958h */ case    4:  		/* li R3, 0 */
		/* 8215D958h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D958h case    4:*/		return 0x8215D95C;
		  /* 8215D95Ch */ case    5:  		/* bl -23892 */
		/* 8215D95Ch case    5:*/		regs.LR = 0x8215D960; return 0x82157C08;
		/* 8215D95Ch case    5:*/		return 0x8215D960;
	}
	return 0x8215D960;
} // Block from 8215D948h-8215D960h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D960);
		  /* 8215D960h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8215D960h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215D960h case    0:*/		return 0x8215D964;
		  /* 8215D964h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215D964h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215D984;  }
		/* 8215D964h case    1:*/		return 0x8215D968;
		  /* 8215D968h */ case    2:  		/* lis R11, -32252 */
		/* 8215D968h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D968h case    2:*/		return 0x8215D96C;
		  /* 8215D96Ch */ case    3:  		/* mr R6, R29 */
		/* 8215D96Ch case    3:*/		regs.R6 = regs.R29;
		/* 8215D96Ch case    3:*/		return 0x8215D970;
		  /* 8215D970h */ case    4:  		/* addi R5, R11, -20616 */
		/* 8215D970h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF78);
		/* 8215D970h case    4:*/		return 0x8215D974;
		  /* 8215D974h */ case    5:  		/* mr R4, R30 */
		/* 8215D974h case    5:*/		regs.R4 = regs.R30;
		/* 8215D974h case    5:*/		return 0x8215D978;
		  /* 8215D978h */ case    6:  		/* li R7, 921 */
		/* 8215D978h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x399);
		/* 8215D978h case    6:*/		return 0x8215D97C;
		  /* 8215D97Ch */ case    7:  		/* li R3, 0 */
		/* 8215D97Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D97Ch case    7:*/		return 0x8215D980;
		  /* 8215D980h */ case    8:  		/* bl -23928 */
		/* 8215D980h case    8:*/		regs.LR = 0x8215D984; return 0x82157C08;
		/* 8215D980h case    8:*/		return 0x8215D984;
	}
	return 0x8215D984;
} // Block from 8215D960h-8215D984h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D984);
		  /* 8215D984h */ case    0:  		/* mulli R11, R28, 148 */
		/* 8215D984h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R28,0x94);
		/* 8215D984h case    0:*/		return 0x8215D988;
		  /* 8215D988h */ case    1:  		/* add R11, R11, R31 */
		/* 8215D988h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8215D988h case    1:*/		return 0x8215D98C;
		  /* 8215D98Ch */ case    2:  		/* li R5, 148 */
		/* 8215D98Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x94);
		/* 8215D98Ch case    2:*/		return 0x8215D990;
		  /* 8215D990h */ case    3:  		/* addi R4, R11, 60 */
		/* 8215D990h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3C);
		/* 8215D990h case    3:*/		return 0x8215D994;
		  /* 8215D994h */ case    4:  		/* mr R3, R27 */
		/* 8215D994h case    4:*/		regs.R3 = regs.R27;
		/* 8215D994h case    4:*/		return 0x8215D998;
		  /* 8215D998h */ case    5:  		/* bl -835560 */
		/* 8215D998h case    5:*/		regs.LR = 0x8215D99C; return 0x820919B0;
		/* 8215D998h case    5:*/		return 0x8215D99C;
		  /* 8215D99Ch */ case    6:  		/* li R3, 0 */
		/* 8215D99Ch case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215D99Ch case    6:*/		return 0x8215D9A0;
		  /* 8215D9A0h */ case    7:  		/* addi R1, R1, 128 */
		/* 8215D9A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215D9A0h case    7:*/		return 0x8215D9A4;
		  /* 8215D9A4h */ case    8:  		/* b -837376 */
		/* 8215D9A4h case    8:*/		return 0x820912A4;
		/* 8215D9A4h case    8:*/		return 0x8215D9A8;
	}
	return 0x8215D9A8;
} // Block from 8215D984h-8215D9A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215D9A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D9A8);
		  /* 8215D9A8h */ case    0:  		/* mfspr R12, LR */
		/* 8215D9A8h case    0:*/		regs.R12 = regs.LR;
		/* 8215D9A8h case    0:*/		return 0x8215D9AC;
		  /* 8215D9ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215D9ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D9ACh case    1:*/		return 0x8215D9B0;
		  /* 8215D9B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215D9B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D9B0h case    2:*/		return 0x8215D9B4;
		  /* 8215D9B4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215D9B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215D9B4h case    3:*/		return 0x8215D9B8;
		  /* 8215D9B8h */ case    4:  		/* mr R31, R3 */
		/* 8215D9B8h case    4:*/		regs.R31 = regs.R3;
		/* 8215D9B8h case    4:*/		return 0x8215D9BC;
		  /* 8215D9BCh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215D9BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215D9BCh case    5:*/		return 0x8215D9C0;
		  /* 8215D9C0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215D9C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215D9E4;  }
		/* 8215D9C0h case    6:*/		return 0x8215D9C4;
		  /* 8215D9C4h */ case    7:  		/* lis R11, -32252 */
		/* 8215D9C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215D9C4h case    7:*/		return 0x8215D9C8;
		  /* 8215D9C8h */ case    8:  		/* lis R10, -32252 */
		/* 8215D9C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215D9C8h case    8:*/		return 0x8215D9CC;
		  /* 8215D9CCh */ case    9:  		/* lis R9, -32253 */
		/* 8215D9CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215D9CCh case    9:*/		return 0x8215D9D0;
		  /* 8215D9D0h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215D9D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215D9D0h case   10:*/		return 0x8215D9D4;
		  /* 8215D9D4h */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215D9D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215D9D4h case   11:*/		return 0x8215D9D8;
		  /* 8215D9D8h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215D9D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215D9D8h case   12:*/		return 0x8215D9DC;
		  /* 8215D9DCh */ case   13:  		/* li R7, 997 */
		/* 8215D9DCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3E5);
		/* 8215D9DCh case   13:*/		return 0x8215D9E0;
		  /* 8215D9E0h */ case   14:  		/* bl -24024 */
		/* 8215D9E0h case   14:*/		regs.LR = 0x8215D9E4; return 0x82157C08;
		/* 8215D9E0h case   14:*/		return 0x8215D9E4;
	}
	return 0x8215D9E4;
} // Block from 8215D9A8h-8215D9E4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215D9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D9E4);
		  /* 8215D9E4h */ case    0:  		/* lwz R3, <#[R31 + 2428]> */
		/* 8215D9E4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000097C) );
		/* 8215D9E4h case    0:*/		return 0x8215D9E8;
		  /* 8215D9E8h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215D9E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215D9E8h case    1:*/		return 0x8215D9EC;
		  /* 8215D9ECh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215D9ECh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215D9ECh case    2:*/		return 0x8215D9F0;
		  /* 8215D9F0h */ case    3:  		/* mtspr LR, R12 */
		/* 8215D9F0h case    3:*/		regs.LR = regs.R12;
		/* 8215D9F0h case    3:*/		return 0x8215D9F4;
		  /* 8215D9F4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215D9F4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215D9F4h case    4:*/		return 0x8215D9F8;
		  /* 8215D9F8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215D9F8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215D9F8h case    5:*/		return 0x8215D9FC;
	}
	return 0x8215D9FC;
} // Block from 8215D9E4h-8215D9FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215D9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215D9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215D9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215D9FC);
		  /* 8215D9FCh */ case    0:  		/* nop */
		/* 8215D9FCh case    0:*/		cpu::op::nop();
		/* 8215D9FCh case    0:*/		return 0x8215DA00;
	}
	return 0x8215DA00;
} // Block from 8215D9FCh-8215DA00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215DA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DA00);
		  /* 8215DA00h */ case    0:  		/* mfspr R12, LR */
		/* 8215DA00h case    0:*/		regs.R12 = regs.LR;
		/* 8215DA00h case    0:*/		return 0x8215DA04;
		  /* 8215DA04h */ case    1:  		/* bl -837552 */
		/* 8215DA04h case    1:*/		regs.LR = 0x8215DA08; return 0x82091254;
		/* 8215DA04h case    1:*/		return 0x8215DA08;
		  /* 8215DA08h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215DA08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215DA08h case    2:*/		return 0x8215DA0C;
		  /* 8215DA0Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215DA0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DA0Ch case    3:*/		return 0x8215DA10;
		  /* 8215DA10h */ case    4:  		/* lis R10, -32252 */
		/* 8215DA10h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DA10h case    4:*/		return 0x8215DA14;
		  /* 8215DA14h */ case    5:  		/* mr R31, R3 */
		/* 8215DA14h case    5:*/		regs.R31 = regs.R3;
		/* 8215DA14h case    5:*/		return 0x8215DA18;
		  /* 8215DA18h */ case    6:  		/* mr R28, R4 */
		/* 8215DA18h case    6:*/		regs.R28 = regs.R4;
		/* 8215DA18h case    6:*/		return 0x8215DA1C;
		  /* 8215DA1Ch */ case    7:  		/* mr R27, R5 */
		/* 8215DA1Ch case    7:*/		regs.R27 = regs.R5;
		/* 8215DA1Ch case    7:*/		return 0x8215DA20;
		  /* 8215DA20h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215DA20h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DA20h case    8:*/		return 0x8215DA24;
		  /* 8215DA24h */ case    9:  		/* addi R30, R11, 27460 */
		/* 8215DA24h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215DA24h case    9:*/		return 0x8215DA28;
		  /* 8215DA28h */ case   10:  		/* addi R29, R10, -21088 */
		/* 8215DA28h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215DA28h case   10:*/		return 0x8215DA2C;
		  /* 8215DA2Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DA2Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215DA4C;  }
		/* 8215DA2Ch case   11:*/		return 0x8215DA30;
		  /* 8215DA30h */ case   12:  		/* lis R11, -32252 */
		/* 8215DA30h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DA30h case   12:*/		return 0x8215DA34;
		  /* 8215DA34h */ case   13:  		/* mr R6, R29 */
		/* 8215DA34h case   13:*/		regs.R6 = regs.R29;
		/* 8215DA34h case   13:*/		return 0x8215DA38;
		  /* 8215DA38h */ case   14:  		/* addi R5, R11, -22036 */
		/* 8215DA38h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DA38h case   14:*/		return 0x8215DA3C;
		  /* 8215DA3Ch */ case   15:  		/* mr R4, R30 */
		/* 8215DA3Ch case   15:*/		regs.R4 = regs.R30;
		/* 8215DA3Ch case   15:*/		return 0x8215DA40;
		  /* 8215DA40h */ case   16:  		/* li R7, 1100 */
		/* 8215DA40h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x44C);
		/* 8215DA40h case   16:*/		return 0x8215DA44;
		  /* 8215DA44h */ case   17:  		/* li R3, 0 */
		/* 8215DA44h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DA44h case   17:*/		return 0x8215DA48;
		  /* 8215DA48h */ case   18:  		/* bl -24128 */
		/* 8215DA48h case   18:*/		regs.LR = 0x8215DA4C; return 0x82157C08;
		/* 8215DA48h case   18:*/		return 0x8215DA4C;
	}
	return 0x8215DA4C;
} // Block from 8215DA00h-8215DA4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215DA4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DA4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DA4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DA4C);
		  /* 8215DA4Ch */ case    0:  		/* cmpwi CR6, R28, 1966 */
		/* 8215DA4Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x000007AE);
		/* 8215DA4Ch case    0:*/		return 0x8215DA50;
		  /* 8215DA50h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 8215DA50h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8215DA70;  }
		/* 8215DA50h case    1:*/		return 0x8215DA54;
		  /* 8215DA54h */ case    2:  		/* lis R11, -32252 */
		/* 8215DA54h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DA54h case    2:*/		return 0x8215DA58;
	}
	return 0x8215DA58;
} // Block from 8215DA4Ch-8215DA58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215DA58h
// Function '?CS_Create@XGRAPHICS@@YAPAU_CS_COMPILED_SHADER@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SSM_REGISTRY@1@PAU_ORDERED_LIST_FACTORY@1@PAU_INTEGER_LIST_FACTORY@1@PAU_OBJECT_LIST_FACTORY@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DA58);
		  /* 8215DA58h */ case    0:  		/* mr R6, R29 */
		/* 8215DA58h case    0:*/		regs.R6 = regs.R29;
		/* 8215DA58h case    0:*/		return 0x8215DA5C;
		  /* 8215DA5Ch */ case    1:  		/* addi R5, R11, -20432 */
		/* 8215DA5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB030);
		/* 8215DA5Ch case    1:*/		return 0x8215DA60;
		  /* 8215DA60h */ case    2:  		/* mr R4, R30 */
		/* 8215DA60h case    2:*/		regs.R4 = regs.R30;
		/* 8215DA60h case    2:*/		return 0x8215DA64;
		  /* 8215DA64h */ case    3:  		/* li R7, 1101 */
		/* 8215DA64h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x44D);
		/* 8215DA64h case    3:*/		return 0x8215DA68;
		  /* 8215DA68h */ case    4:  		/* li R3, 0 */
		/* 8215DA68h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DA68h case    4:*/		return 0x8215DA6C;
		  /* 8215DA6Ch */ case    5:  		/* bl -24164 */
		/* 8215DA6Ch case    5:*/		regs.LR = 0x8215DA70; return 0x82157C08;
		/* 8215DA6Ch case    5:*/		return 0x8215DA70;
	}
	return 0x8215DA70;
} // Block from 8215DA58h-8215DA70h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215DA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DA70);
		  /* 8215DA70h */ case    0:  		/* cmpwi CR6, R28, 2086 */
		/* 8215DA70h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000826);
		/* 8215DA70h case    0:*/		return 0x8215DA74;
		  /* 8215DA74h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8215DA74h case    1:*/		if ( regs.CR[6].lt ) { return 0x8215DA94;  }
		/* 8215DA74h case    1:*/		return 0x8215DA78;
		  /* 8215DA78h */ case    2:  		/* lis R11, -32252 */
		/* 8215DA78h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DA78h case    2:*/		return 0x8215DA7C;
		  /* 8215DA7Ch */ case    3:  		/* mr R6, R29 */
		/* 8215DA7Ch case    3:*/		regs.R6 = regs.R29;
		/* 8215DA7Ch case    3:*/		return 0x8215DA80;
		  /* 8215DA80h */ case    4:  		/* addi R5, R11, -20460 */
		/* 8215DA80h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB014);
		/* 8215DA80h case    4:*/		return 0x8215DA84;
		  /* 8215DA84h */ case    5:  		/* mr R4, R30 */
		/* 8215DA84h case    5:*/		regs.R4 = regs.R30;
		/* 8215DA84h case    5:*/		return 0x8215DA88;
		  /* 8215DA88h */ case    6:  		/* li R7, 1102 */
		/* 8215DA88h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x44E);
		/* 8215DA88h case    6:*/		return 0x8215DA8C;
		  /* 8215DA8Ch */ case    7:  		/* li R3, 0 */
		/* 8215DA8Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DA8Ch case    7:*/		return 0x8215DA90;
		  /* 8215DA90h */ case    8:  		/* bl -24200 */
		/* 8215DA90h case    8:*/		regs.LR = 0x8215DA94; return 0x82157C08;
		/* 8215DA90h case    8:*/		return 0x8215DA94;
	}
	return 0x8215DA94;
} // Block from 8215DA70h-8215DA94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215DA94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DA94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DA94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DA94);
		  /* 8215DA94h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215DA94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DA94h case    0:*/		return 0x8215DA98;
		  /* 8215DA98h */ case    1:  		/* li R4, 8 */
		/* 8215DA98h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8215DA98h case    1:*/		return 0x8215DA9C;
		  /* 8215DA9Ch */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215DA9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215DA9Ch case    2:*/		return 0x8215DAA0;
		  /* 8215DAA0h */ case    3:  		/* mtspr CTR, R11 */
		/* 8215DAA0h case    3:*/		regs.CTR = regs.R11;
		/* 8215DAA0h case    3:*/		return 0x8215DAA4;
		  /* 8215DAA4h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215DAA4h case    4:*/		if ( 1 ) { regs.LR = 0x8215DAA8; return (uint32)regs.CTR; }
		/* 8215DAA4h case    4:*/		return 0x8215DAA8;
		  /* 8215DAA8h */ case    5:  		/* or. R4, R3, R3 */
		/* 8215DAA8h case    5:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8215DAA8h case    5:*/		return 0x8215DAAC;
		  /* 8215DAACh */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 8215DAACh case    6:*/		if ( !regs.CR[0].eq ) { return 0x8215DAD4;  }
		/* 8215DAACh case    6:*/		return 0x8215DAB0;
		  /* 8215DAB0h */ case    7:  		/* lis R11, -32252 */
		/* 8215DAB0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DAB0h case    7:*/		return 0x8215DAB4;
		  /* 8215DAB4h */ case    8:  		/* mr R6, R29 */
		/* 8215DAB4h case    8:*/		regs.R6 = regs.R29;
		/* 8215DAB4h case    8:*/		return 0x8215DAB8;
		  /* 8215DAB8h */ case    9:  		/* addi R5, R11, -20520 */
		/* 8215DAB8h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAFD8);
		/* 8215DAB8h case    9:*/		return 0x8215DABC;
		  /* 8215DABCh */ case   10:  		/* mr R4, R30 */
		/* 8215DABCh case   10:*/		regs.R4 = regs.R30;
		/* 8215DABCh case   10:*/		return 0x8215DAC0;
		  /* 8215DAC0h */ case   11:  		/* li R7, 1110 */
		/* 8215DAC0h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x456);
		/* 8215DAC0h case   11:*/		return 0x8215DAC4;
		  /* 8215DAC4h */ case   12:  		/* li R3, 0 */
		/* 8215DAC4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DAC4h case   12:*/		return 0x8215DAC8;
		  /* 8215DAC8h */ case   13:  		/* bl -24256 */
		/* 8215DAC8h case   13:*/		regs.LR = 0x8215DACC; return 0x82157C08;
		/* 8215DAC8h case   13:*/		return 0x8215DACC;
		  /* 8215DACCh */ case   14:  		/* li R3, 16 */
		/* 8215DACCh case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215DACCh case   14:*/		return 0x8215DAD0;
		  /* 8215DAD0h */ case   15:  		/* b 24 */
		/* 8215DAD0h case   15:*/		return 0x8215DAE8;
		/* 8215DAD0h case   15:*/		return 0x8215DAD4;
	}
	return 0x8215DAD4;
} // Block from 8215DA94h-8215DAD4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215DAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DAD4);
		  /* 8215DAD4h */ case    0:  		/* stw R28, <#[R4]> */
		/* 8215DAD4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R4 + 0x00000000) );
		/* 8215DAD4h case    0:*/		return 0x8215DAD8;
		  /* 8215DAD8h */ case    1:  		/* stw R27, <#[R4 + 4]> */
		/* 8215DAD8h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000004) );
		/* 8215DAD8h case    1:*/		return 0x8215DADC;
		  /* 8215DADCh */ case    2:  		/* lwz R3, <#[R31 + 2440]> */
		/* 8215DADCh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000988) );
		/* 8215DADCh case    2:*/		return 0x8215DAE0;
		  /* 8215DAE0h */ case    3:  		/* bl -4400 */
		/* 8215DAE0h case    3:*/		regs.LR = 0x8215DAE4; return 0x8215C9B0;
		/* 8215DAE0h case    3:*/		return 0x8215DAE4;
		  /* 8215DAE4h */ case    4:  		/* li R3, 0 */
		/* 8215DAE4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DAE4h case    4:*/		return 0x8215DAE8;
	}
	return 0x8215DAE8;
} // Block from 8215DAD4h-8215DAE8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215DAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DAE8);
		  /* 8215DAE8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215DAE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215DAE8h case    0:*/		return 0x8215DAEC;
		  /* 8215DAECh */ case    1:  		/* b -837704 */
		/* 8215DAECh case    1:*/		return 0x820912A4;
		/* 8215DAECh case    1:*/		return 0x8215DAF0;
	}
	return 0x8215DAF0;
} // Block from 8215DAE8h-8215DAF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215DAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DAF0);
		  /* 8215DAF0h */ case    0:  		/* mfspr R12, LR */
		/* 8215DAF0h case    0:*/		regs.R12 = regs.LR;
		/* 8215DAF0h case    0:*/		return 0x8215DAF4;
		  /* 8215DAF4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215DAF4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DAF4h case    1:*/		return 0x8215DAF8;
		  /* 8215DAF8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215DAF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215DAF8h case    2:*/		return 0x8215DAFC;
		  /* 8215DAFCh */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8215DAFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8215DAFCh case    3:*/		return 0x8215DB00;
		  /* 8215DB00h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8215DB00h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8215DB00h case    4:*/		return 0x8215DB04;
		  /* 8215DB04h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8215DB04h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215DB34;  }
		/* 8215DB04h case    5:*/		return 0x8215DB08;
		  /* 8215DB08h */ case    6:  		/* lis R11, -32252 */
		/* 8215DB08h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DB08h case    6:*/		return 0x8215DB0C;
		  /* 8215DB0Ch */ case    7:  		/* lis R10, -32252 */
		/* 8215DB0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DB0Ch case    7:*/		return 0x8215DB10;
		  /* 8215DB10h */ case    8:  		/* lis R9, -32253 */
		/* 8215DB10h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215DB10h case    8:*/		return 0x8215DB14;
		  /* 8215DB14h */ case    9:  		/* addi R6, R11, -20368 */
		/* 8215DB14h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB070);
		/* 8215DB14h case    9:*/		return 0x8215DB18;
		  /* 8215DB18h */ case   10:  		/* addi R5, R10, -20408 */
		/* 8215DB18h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB048);
		/* 8215DB18h case   10:*/		return 0x8215DB1C;
		  /* 8215DB1Ch */ case   11:  		/* addi R4, R9, 27460 */
		/* 8215DB1Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215DB1Ch case   11:*/		return 0x8215DB20;
		  /* 8215DB20h */ case   12:  		/* li R7, 268 */
		/* 8215DB20h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x10C);
		/* 8215DB20h case   12:*/		return 0x8215DB24;
		  /* 8215DB24h */ case   13:  		/* li R3, 0 */
		/* 8215DB24h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DB24h case   13:*/		return 0x8215DB28;
		  /* 8215DB28h */ case   14:  		/* bl -24352 */
		/* 8215DB28h case   14:*/		regs.LR = 0x8215DB2C; return 0x82157C08;
		/* 8215DB28h case   14:*/		return 0x8215DB2C;
		  /* 8215DB2Ch */ case   15:  		/* li R3, 0 */
		/* 8215DB2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DB2Ch case   15:*/		return 0x8215DB30;
		  /* 8215DB30h */ case   16:  		/* b 8 */
		/* 8215DB30h case   16:*/		return 0x8215DB38;
		/* 8215DB30h case   16:*/		return 0x8215DB34;
	}
	return 0x8215DB34;
} // Block from 8215DAF0h-8215DB34h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215DB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DB34);
		  /* 8215DB34h */ case    0:  		/* li R3, 32 */
		/* 8215DB34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8215DB34h case    0:*/		return 0x8215DB38;
	}
	return 0x8215DB38;
} // Block from 8215DB34h-8215DB38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215DB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DB38);
		  /* 8215DB38h */ case    0:  		/* addi R1, R1, 96 */
		/* 8215DB38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215DB38h case    0:*/		return 0x8215DB3C;
		  /* 8215DB3Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215DB3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DB3Ch case    1:*/		return 0x8215DB40;
		  /* 8215DB40h */ case    2:  		/* mtspr LR, R12 */
		/* 8215DB40h case    2:*/		regs.LR = regs.R12;
		/* 8215DB40h case    2:*/		return 0x8215DB44;
		  /* 8215DB44h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8215DB44h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215DB44h case    3:*/		return 0x8215DB48;
	}
	return 0x8215DB48;
} // Block from 8215DB38h-8215DB48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215DB48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DB48);
		  /* 8215DB48h */ case    0:  		/* mfspr R12, LR */
		/* 8215DB48h case    0:*/		regs.R12 = regs.LR;
		/* 8215DB48h case    0:*/		return 0x8215DB4C;
		  /* 8215DB4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215DB4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DB4Ch case    1:*/		return 0x8215DB50;
		  /* 8215DB50h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215DB50h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215DB50h case    2:*/		return 0x8215DB54;
		  /* 8215DB54h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215DB54h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215DB54h case    3:*/		return 0x8215DB58;
		  /* 8215DB58h */ case    4:  		/* mr R31, R3 */
		/* 8215DB58h case    4:*/		regs.R31 = regs.R3;
		/* 8215DB58h case    4:*/		return 0x8215DB5C;
		  /* 8215DB5Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215DB5Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DB5Ch case    5:*/		return 0x8215DB60;
		  /* 8215DB60h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215DB60h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215DB84;  }
		/* 8215DB60h case    6:*/		return 0x8215DB64;
		  /* 8215DB64h */ case    7:  		/* lis R11, -32252 */
		/* 8215DB64h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DB64h case    7:*/		return 0x8215DB68;
		  /* 8215DB68h */ case    8:  		/* lis R10, -32252 */
		/* 8215DB68h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DB68h case    8:*/		return 0x8215DB6C;
		  /* 8215DB6Ch */ case    9:  		/* lis R9, -32253 */
		/* 8215DB6Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215DB6Ch case    9:*/		return 0x8215DB70;
		  /* 8215DB70h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215DB70h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215DB70h case   10:*/		return 0x8215DB74;
		  /* 8215DB74h */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215DB74h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215DB74h case   11:*/		return 0x8215DB78;
		  /* 8215DB78h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215DB78h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215DB78h case   12:*/		return 0x8215DB7C;
		  /* 8215DB7Ch */ case   13:  		/* li R7, 1138 */
		/* 8215DB7Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x472);
		/* 8215DB7Ch case   13:*/		return 0x8215DB80;
		  /* 8215DB80h */ case   14:  		/* bl -24440 */
		/* 8215DB80h case   14:*/		regs.LR = 0x8215DB84; return 0x82157C08;
		/* 8215DB80h case   14:*/		return 0x8215DB84;
	}
	return 0x8215DB84;
} // Block from 8215DB48h-8215DB84h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215DB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DB84);
		  /* 8215DB84h */ case    0:  		/* lwz R3, <#[R31 + 2440]> */
		/* 8215DB84h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000988) );
		/* 8215DB84h case    0:*/		return 0x8215DB88;
		  /* 8215DB88h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215DB88h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215DB88h case    1:*/		return 0x8215DB8C;
		  /* 8215DB8Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215DB8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DB8Ch case    2:*/		return 0x8215DB90;
		  /* 8215DB90h */ case    3:  		/* mtspr LR, R12 */
		/* 8215DB90h case    3:*/		regs.LR = regs.R12;
		/* 8215DB90h case    3:*/		return 0x8215DB94;
		  /* 8215DB94h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215DB94h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215DB94h case    4:*/		return 0x8215DB98;
		  /* 8215DB98h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215DB98h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215DB98h case    5:*/		return 0x8215DB9C;
	}
	return 0x8215DB9C;
} // Block from 8215DB84h-8215DB9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215DB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DB9C);
		  /* 8215DB9Ch */ case    0:  		/* nop */
		/* 8215DB9Ch case    0:*/		cpu::op::nop();
		/* 8215DB9Ch case    0:*/		return 0x8215DBA0;
	}
	return 0x8215DBA0;
} // Block from 8215DB9Ch-8215DBA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215DBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DBA0);
		  /* 8215DBA0h */ case    0:  		/* mfspr R12, LR */
		/* 8215DBA0h case    0:*/		regs.R12 = regs.LR;
		/* 8215DBA0h case    0:*/		return 0x8215DBA4;
		  /* 8215DBA4h */ case    1:  		/* bl -837972 */
		/* 8215DBA4h case    1:*/		regs.LR = 0x8215DBA8; return 0x82091250;
		/* 8215DBA4h case    1:*/		return 0x8215DBA8;
		  /* 8215DBA8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215DBA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215DBA8h case    2:*/		return 0x8215DBAC;
		  /* 8215DBACh */ case    3:  		/* lis R11, -32253 */
		/* 8215DBACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DBACh case    3:*/		return 0x8215DBB0;
		  /* 8215DBB0h */ case    4:  		/* lis R10, -32252 */
		/* 8215DBB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DBB0h case    4:*/		return 0x8215DBB4;
		  /* 8215DBB4h */ case    5:  		/* mr R31, R3 */
		/* 8215DBB4h case    5:*/		regs.R31 = regs.R3;
		/* 8215DBB4h case    5:*/		return 0x8215DBB8;
		  /* 8215DBB8h */ case    6:  		/* mr R28, R4 */
		/* 8215DBB8h case    6:*/		regs.R28 = regs.R4;
		/* 8215DBB8h case    6:*/		return 0x8215DBBC;
		  /* 8215DBBCh */ case    7:  		/* mr R27, R5 */
		/* 8215DBBCh case    7:*/		regs.R27 = regs.R5;
		/* 8215DBBCh case    7:*/		return 0x8215DBC0;
		  /* 8215DBC0h */ case    8:  		/* mr R26, R6 */
		/* 8215DBC0h case    8:*/		regs.R26 = regs.R6;
		/* 8215DBC0h case    8:*/		return 0x8215DBC4;
		  /* 8215DBC4h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215DBC4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DBC4h case    9:*/		return 0x8215DBC8;
		  /* 8215DBC8h */ case   10:  		/* addi R30, R11, 27460 */
		/* 8215DBC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215DBC8h case   10:*/		return 0x8215DBCC;
		  /* 8215DBCCh */ case   11:  		/* addi R29, R10, -21088 */
		/* 8215DBCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215DBCCh case   11:*/		return 0x8215DBD0;
		  /* 8215DBD0h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DBD0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215DBF0;  }
		/* 8215DBD0h case   12:*/		return 0x8215DBD4;
		  /* 8215DBD4h */ case   13:  		/* lis R11, -32252 */
		/* 8215DBD4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DBD4h case   13:*/		return 0x8215DBD8;
		  /* 8215DBD8h */ case   14:  		/* mr R6, R29 */
		/* 8215DBD8h case   14:*/		regs.R6 = regs.R29;
		/* 8215DBD8h case   14:*/		return 0x8215DBDC;
		  /* 8215DBDCh */ case   15:  		/* addi R5, R11, -22036 */
		/* 8215DBDCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DBDCh case   15:*/		return 0x8215DBE0;
		  /* 8215DBE0h */ case   16:  		/* mr R4, R30 */
		/* 8215DBE0h case   16:*/		regs.R4 = regs.R30;
		/* 8215DBE0h case   16:*/		return 0x8215DBE4;
		  /* 8215DBE4h */ case   17:  		/* li R7, 1177 */
		/* 8215DBE4h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x499);
		/* 8215DBE4h case   17:*/		return 0x8215DBE8;
		  /* 8215DBE8h */ case   18:  		/* li R3, 0 */
		/* 8215DBE8h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DBE8h case   18:*/		return 0x8215DBEC;
		  /* 8215DBECh */ case   19:  		/* bl -24548 */
		/* 8215DBECh case   19:*/		regs.LR = 0x8215DBF0; return 0x82157C08;
		/* 8215DBECh case   19:*/		return 0x8215DBF0;
	}
	return 0x8215DBF0;
} // Block from 8215DBA0h-8215DBF0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215DBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DBF0);
		  /* 8215DBF0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215DBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DBF0h case    0:*/		return 0x8215DBF4;
		  /* 8215DBF4h */ case    1:  		/* li R4, 16 */
		/* 8215DBF4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8215DBF4h case    1:*/		return 0x8215DBF8;
		  /* 8215DBF8h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215DBF8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215DBF8h case    2:*/		return 0x8215DBFC;
		  /* 8215DBFCh */ case    3:  		/* mtspr CTR, R11 */
		/* 8215DBFCh case    3:*/		regs.CTR = regs.R11;
		/* 8215DBFCh case    3:*/		return 0x8215DC00;
		  /* 8215DC00h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215DC00h case    4:*/		if ( 1 ) { regs.LR = 0x8215DC04; return (uint32)regs.CTR; }
		/* 8215DC00h case    4:*/		return 0x8215DC04;
		  /* 8215DC04h */ case    5:  		/* or. R4, R3, R3 */
		/* 8215DC04h case    5:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8215DC04h case    5:*/		return 0x8215DC08;
		  /* 8215DC08h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 8215DC08h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8215DC30;  }
		/* 8215DC08h case    6:*/		return 0x8215DC0C;
		  /* 8215DC0Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215DC0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DC0Ch case    7:*/		return 0x8215DC10;
		  /* 8215DC10h */ case    8:  		/* mr R6, R29 */
		/* 8215DC10h case    8:*/		regs.R6 = regs.R29;
		/* 8215DC10h case    8:*/		return 0x8215DC14;
		  /* 8215DC14h */ case    9:  		/* addi R5, R11, -20264 */
		/* 8215DC14h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB0D8);
		/* 8215DC14h case    9:*/		return 0x8215DC18;
		  /* 8215DC18h */ case   10:  		/* mr R4, R30 */
		/* 8215DC18h case   10:*/		regs.R4 = regs.R30;
		/* 8215DC18h case   10:*/		return 0x8215DC1C;
		  /* 8215DC1Ch */ case   11:  		/* li R7, 1186 */
		/* 8215DC1Ch case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x4A2);
		/* 8215DC1Ch case   11:*/		return 0x8215DC20;
		  /* 8215DC20h */ case   12:  		/* li R3, 0 */
		/* 8215DC20h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DC20h case   12:*/		return 0x8215DC24;
		  /* 8215DC24h */ case   13:  		/* bl -24604 */
		/* 8215DC24h case   13:*/		regs.LR = 0x8215DC28; return 0x82157C08;
		/* 8215DC24h case   13:*/		return 0x8215DC28;
		  /* 8215DC28h */ case   14:  		/* li R3, 16 */
		/* 8215DC28h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215DC28h case   14:*/		return 0x8215DC2C;
		  /* 8215DC2Ch */ case   15:  		/* b 36 */
		/* 8215DC2Ch case   15:*/		return 0x8215DC50;
		/* 8215DC2Ch case   15:*/		return 0x8215DC30;
	}
	return 0x8215DC30;
} // Block from 8215DBF0h-8215DC30h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215DC30h
// Function '?CS_Destroy@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DC30);
		  /* 8215DC30h */ case    0:  		/* li R11, 0 */
		/* 8215DC30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215DC30h case    0:*/		return 0x8215DC34;
		  /* 8215DC34h */ case    1:  		/* stw R28, <#[R4 + 4]> */
		/* 8215DC34h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R4 + 0x00000004) );
		/* 8215DC34h case    1:*/		return 0x8215DC38;
		  /* 8215DC38h */ case    2:  		/* stw R27, <#[R4 + 8]> */
		/* 8215DC38h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000008) );
		/* 8215DC38h case    2:*/		return 0x8215DC3C;
		  /* 8215DC3Ch */ case    3:  		/* stw R11, <#[R4]> */
		/* 8215DC3Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8215DC3Ch case    3:*/		return 0x8215DC40;
		  /* 8215DC40h */ case    4:  		/* stw R26, <#[R4 + 12]> */
		/* 8215DC40h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R4 + 0x0000000C) );
		/* 8215DC40h case    4:*/		return 0x8215DC44;
		  /* 8215DC44h */ case    5:  		/* lwz R3, <#[R31 + 2436]> */
		/* 8215DC44h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000984) );
		/* 8215DC44h case    5:*/		return 0x8215DC48;
		  /* 8215DC48h */ case    6:  		/* bl -4760 */
		/* 8215DC48h case    6:*/		regs.LR = 0x8215DC4C; return 0x8215C9B0;
		/* 8215DC48h case    6:*/		return 0x8215DC4C;
		  /* 8215DC4Ch */ case    7:  		/* li R3, 0 */
		/* 8215DC4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DC4Ch case    7:*/		return 0x8215DC50;
	}
	return 0x8215DC50;
} // Block from 8215DC30h-8215DC50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215DC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DC50);
		  /* 8215DC50h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215DC50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215DC50h case    0:*/		return 0x8215DC54;
		  /* 8215DC54h */ case    1:  		/* b -838068 */
		/* 8215DC54h case    1:*/		return 0x820912A0;
		/* 8215DC54h case    1:*/		return 0x8215DC58;
	}
	return 0x8215DC58;
} // Block from 8215DC50h-8215DC58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215DC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DC58);
		  /* 8215DC58h */ case    0:  		/* mfspr R12, LR */
		/* 8215DC58h case    0:*/		regs.R12 = regs.LR;
		/* 8215DC58h case    0:*/		return 0x8215DC5C;
		  /* 8215DC5Ch */ case    1:  		/* bl -838156 */
		/* 8215DC5Ch case    1:*/		regs.LR = 0x8215DC60; return 0x82091250;
		/* 8215DC5Ch case    1:*/		return 0x8215DC60;
		  /* 8215DC60h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215DC60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215DC60h case    2:*/		return 0x8215DC64;
		  /* 8215DC64h */ case    3:  		/* lis R11, -32253 */
		/* 8215DC64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DC64h case    3:*/		return 0x8215DC68;
		  /* 8215DC68h */ case    4:  		/* lis R10, -32252 */
		/* 8215DC68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DC68h case    4:*/		return 0x8215DC6C;
		  /* 8215DC6Ch */ case    5:  		/* mr R31, R3 */
		/* 8215DC6Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215DC6Ch case    5:*/		return 0x8215DC70;
		  /* 8215DC70h */ case    6:  		/* mr R28, R4 */
		/* 8215DC70h case    6:*/		regs.R28 = regs.R4;
		/* 8215DC70h case    6:*/		return 0x8215DC74;
		  /* 8215DC74h */ case    7:  		/* mr R27, R5 */
		/* 8215DC74h case    7:*/		regs.R27 = regs.R5;
		/* 8215DC74h case    7:*/		return 0x8215DC78;
		  /* 8215DC78h */ case    8:  		/* mr R26, R6 */
		/* 8215DC78h case    8:*/		regs.R26 = regs.R6;
		/* 8215DC78h case    8:*/		return 0x8215DC7C;
		  /* 8215DC7Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215DC7Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DC7Ch case    9:*/		return 0x8215DC80;
		  /* 8215DC80h */ case   10:  		/* addi R30, R11, 27460 */
		/* 8215DC80h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215DC80h case   10:*/		return 0x8215DC84;
		  /* 8215DC84h */ case   11:  		/* addi R29, R10, -21088 */
		/* 8215DC84h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215DC84h case   11:*/		return 0x8215DC88;
		  /* 8215DC88h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DC88h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8215DCA8;  }
		/* 8215DC88h case   12:*/		return 0x8215DC8C;
		  /* 8215DC8Ch */ case   13:  		/* lis R11, -32252 */
		/* 8215DC8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DC8Ch case   13:*/		return 0x8215DC90;
		  /* 8215DC90h */ case   14:  		/* mr R6, R29 */
		/* 8215DC90h case   14:*/		regs.R6 = regs.R29;
		/* 8215DC90h case   14:*/		return 0x8215DC94;
		  /* 8215DC94h */ case   15:  		/* addi R5, R11, -22036 */
		/* 8215DC94h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DC94h case   15:*/		return 0x8215DC98;
		  /* 8215DC98h */ case   16:  		/* mr R4, R30 */
		/* 8215DC98h case   16:*/		regs.R4 = regs.R30;
		/* 8215DC98h case   16:*/		return 0x8215DC9C;
		  /* 8215DC9Ch */ case   17:  		/* li R7, 1284 */
		/* 8215DC9Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x504);
		/* 8215DC9Ch case   17:*/		return 0x8215DCA0;
		  /* 8215DCA0h */ case   18:  		/* li R3, 0 */
		/* 8215DCA0h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DCA0h case   18:*/		return 0x8215DCA4;
		  /* 8215DCA4h */ case   19:  		/* bl -24732 */
		/* 8215DCA4h case   19:*/		regs.LR = 0x8215DCA8; return 0x82157C08;
		/* 8215DCA4h case   19:*/		return 0x8215DCA8;
	}
	return 0x8215DCA8;
} // Block from 8215DC58h-8215DCA8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215DCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DCA8);
		  /* 8215DCA8h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215DCA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DCA8h case    0:*/		return 0x8215DCAC;
		  /* 8215DCACh */ case    1:  		/* li R4, 16 */
		/* 8215DCACh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8215DCACh case    1:*/		return 0x8215DCB0;
		  /* 8215DCB0h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215DCB0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215DCB0h case    2:*/		return 0x8215DCB4;
		  /* 8215DCB4h */ case    3:  		/* mtspr CTR, R11 */
		/* 8215DCB4h case    3:*/		regs.CTR = regs.R11;
		/* 8215DCB4h case    3:*/		return 0x8215DCB8;
		  /* 8215DCB8h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215DCB8h case    4:*/		if ( 1 ) { regs.LR = 0x8215DCBC; return (uint32)regs.CTR; }
		/* 8215DCB8h case    4:*/		return 0x8215DCBC;
		  /* 8215DCBCh */ case    5:  		/* or. R4, R3, R3 */
		/* 8215DCBCh case    5:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8215DCBCh case    5:*/		return 0x8215DCC0;
		  /* 8215DCC0h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 8215DCC0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8215DCE8;  }
		/* 8215DCC0h case    6:*/		return 0x8215DCC4;
		  /* 8215DCC4h */ case    7:  		/* lis R11, -32252 */
		/* 8215DCC4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DCC4h case    7:*/		return 0x8215DCC8;
		  /* 8215DCC8h */ case    8:  		/* mr R6, R29 */
		/* 8215DCC8h case    8:*/		regs.R6 = regs.R29;
		/* 8215DCC8h case    8:*/		return 0x8215DCCC;
		  /* 8215DCCCh */ case    9:  		/* addi R5, R11, -20264 */
		/* 8215DCCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB0D8);
		/* 8215DCCCh case    9:*/		return 0x8215DCD0;
		  /* 8215DCD0h */ case   10:  		/* mr R4, R30 */
		/* 8215DCD0h case   10:*/		regs.R4 = regs.R30;
		/* 8215DCD0h case   10:*/		return 0x8215DCD4;
		  /* 8215DCD4h */ case   11:  		/* li R7, 1293 */
		/* 8215DCD4h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x50D);
		/* 8215DCD4h case   11:*/		return 0x8215DCD8;
		  /* 8215DCD8h */ case   12:  		/* li R3, 0 */
		/* 8215DCD8h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DCD8h case   12:*/		return 0x8215DCDC;
		  /* 8215DCDCh */ case   13:  		/* bl -24788 */
		/* 8215DCDCh case   13:*/		regs.LR = 0x8215DCE0; return 0x82157C08;
		/* 8215DCDCh case   13:*/		return 0x8215DCE0;
		  /* 8215DCE0h */ case   14:  		/* li R3, 16 */
		/* 8215DCE0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215DCE0h case   14:*/		return 0x8215DCE4;
		  /* 8215DCE4h */ case   15:  		/* b 36 */
		/* 8215DCE4h case   15:*/		return 0x8215DD08;
		/* 8215DCE4h case   15:*/		return 0x8215DCE8;
	}
	return 0x8215DCE8;
} // Block from 8215DCA8h-8215DCE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215DCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DCE8);
		  /* 8215DCE8h */ case    0:  		/* li R11, 2 */
		/* 8215DCE8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8215DCE8h case    0:*/		return 0x8215DCEC;
		  /* 8215DCECh */ case    1:  		/* stw R28, <#[R4 + 4]> */
		/* 8215DCECh case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R4 + 0x00000004) );
		/* 8215DCECh case    1:*/		return 0x8215DCF0;
		  /* 8215DCF0h */ case    2:  		/* stw R27, <#[R4 + 8]> */
		/* 8215DCF0h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R4 + 0x00000008) );
		/* 8215DCF0h case    2:*/		return 0x8215DCF4;
		  /* 8215DCF4h */ case    3:  		/* stw R11, <#[R4]> */
		/* 8215DCF4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8215DCF4h case    3:*/		return 0x8215DCF8;
		  /* 8215DCF8h */ case    4:  		/* stw R26, <#[R4 + 12]> */
		/* 8215DCF8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R4 + 0x0000000C) );
		/* 8215DCF8h case    4:*/		return 0x8215DCFC;
		  /* 8215DCFCh */ case    5:  		/* lwz R3, <#[R31 + 2436]> */
		/* 8215DCFCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000984) );
		/* 8215DCFCh case    5:*/		return 0x8215DD00;
		  /* 8215DD00h */ case    6:  		/* bl -4944 */
		/* 8215DD00h case    6:*/		regs.LR = 0x8215DD04; return 0x8215C9B0;
		/* 8215DD00h case    6:*/		return 0x8215DD04;
		  /* 8215DD04h */ case    7:  		/* li R3, 0 */
		/* 8215DD04h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DD04h case    7:*/		return 0x8215DD08;
	}
	return 0x8215DD08;
} // Block from 8215DCE8h-8215DD08h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215DD08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DD08);
		  /* 8215DD08h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215DD08h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215DD08h case    0:*/		return 0x8215DD0C;
		  /* 8215DD0Ch */ case    1:  		/* b -838252 */
		/* 8215DD0Ch case    1:*/		return 0x820912A0;
		/* 8215DD0Ch case    1:*/		return 0x8215DD10;
	}
	return 0x8215DD10;
} // Block from 8215DD08h-8215DD10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215DD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DD10);
		  /* 8215DD10h */ case    0:  		/* mfspr R12, LR */
		/* 8215DD10h case    0:*/		regs.R12 = regs.LR;
		/* 8215DD10h case    0:*/		return 0x8215DD14;
		  /* 8215DD14h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215DD14h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DD14h case    1:*/		return 0x8215DD18;
		  /* 8215DD18h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215DD18h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215DD18h case    2:*/		return 0x8215DD1C;
		  /* 8215DD1Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215DD1Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215DD1Ch case    3:*/		return 0x8215DD20;
		  /* 8215DD20h */ case    4:  		/* mr R31, R3 */
		/* 8215DD20h case    4:*/		regs.R31 = regs.R3;
		/* 8215DD20h case    4:*/		return 0x8215DD24;
		  /* 8215DD24h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215DD24h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DD24h case    5:*/		return 0x8215DD28;
		  /* 8215DD28h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215DD28h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215DD4C;  }
		/* 8215DD28h case    6:*/		return 0x8215DD2C;
		  /* 8215DD2Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215DD2Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DD2Ch case    7:*/		return 0x8215DD30;
		  /* 8215DD30h */ case    8:  		/* lis R10, -32252 */
		/* 8215DD30h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DD30h case    8:*/		return 0x8215DD34;
		  /* 8215DD34h */ case    9:  		/* lis R9, -32253 */
		/* 8215DD34h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215DD34h case    9:*/		return 0x8215DD38;
		  /* 8215DD38h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215DD38h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215DD38h case   10:*/		return 0x8215DD3C;
		  /* 8215DD3Ch */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215DD3Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215DD3Ch case   11:*/		return 0x8215DD40;
		  /* 8215DD40h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8215DD40h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215DD40h case   12:*/		return 0x8215DD44;
		  /* 8215DD44h */ case   13:  		/* li R7, 1327 */
		/* 8215DD44h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x52F);
		/* 8215DD44h case   13:*/		return 0x8215DD48;
		  /* 8215DD48h */ case   14:  		/* bl -24896 */
		/* 8215DD48h case   14:*/		regs.LR = 0x8215DD4C; return 0x82157C08;
		/* 8215DD48h case   14:*/		return 0x8215DD4C;
	}
	return 0x8215DD4C;
} // Block from 8215DD10h-8215DD4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215DD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DD4C);
		  /* 8215DD4Ch */ case    0:  		/* lwz R3, <#[R31 + 2436]> */
		/* 8215DD4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000984) );
		/* 8215DD4Ch case    0:*/		return 0x8215DD50;
		  /* 8215DD50h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215DD50h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215DD50h case    1:*/		return 0x8215DD54;
		  /* 8215DD54h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215DD54h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215DD54h case    2:*/		return 0x8215DD58;
		  /* 8215DD58h */ case    3:  		/* mtspr LR, R12 */
		/* 8215DD58h case    3:*/		regs.LR = regs.R12;
		/* 8215DD58h case    3:*/		return 0x8215DD5C;
		  /* 8215DD5Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215DD5Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215DD5Ch case    4:*/		return 0x8215DD60;
		  /* 8215DD60h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215DD60h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215DD60h case    5:*/		return 0x8215DD64;
	}
	return 0x8215DD64;
} // Block from 8215DD4Ch-8215DD64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215DD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DD64);
		  /* 8215DD64h */ case    0:  		/* nop */
		/* 8215DD64h case    0:*/		cpu::op::nop();
		/* 8215DD64h case    0:*/		return 0x8215DD68;
	}
	return 0x8215DD68;
} // Block from 8215DD64h-8215DD68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215DD68h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DD68);
		  /* 8215DD68h */ case    0:  		/* mfspr R12, LR */
		/* 8215DD68h case    0:*/		regs.R12 = regs.LR;
		/* 8215DD68h case    0:*/		return 0x8215DD6C;
		  /* 8215DD6Ch */ case    1:  		/* bl -838436 */
		/* 8215DD6Ch case    1:*/		regs.LR = 0x8215DD70; return 0x82091248;
		/* 8215DD6Ch case    1:*/		return 0x8215DD70;
		  /* 8215DD70h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8215DD70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8215DD70h case    2:*/		return 0x8215DD74;
		  /* 8215DD74h */ case    3:  		/* lis R11, -32253 */
		/* 8215DD74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DD74h case    3:*/		return 0x8215DD78;
		  /* 8215DD78h */ case    4:  		/* lis R10, -32252 */
		/* 8215DD78h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DD78h case    4:*/		return 0x8215DD7C;
		  /* 8215DD7Ch */ case    5:  		/* mr R31, R3 */
		/* 8215DD7Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215DD7Ch case    5:*/		return 0x8215DD80;
		  /* 8215DD80h */ case    6:  		/* mr R29, R4 */
		/* 8215DD80h case    6:*/		regs.R29 = regs.R4;
		/* 8215DD80h case    6:*/		return 0x8215DD84;
		  /* 8215DD84h */ case    7:  		/* li R30, 1 */
		/* 8215DD84h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8215DD84h case    7:*/		return 0x8215DD88;
		  /* 8215DD88h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215DD88h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DD88h case    8:*/		return 0x8215DD8C;
		  /* 8215DD8Ch */ case    9:  		/* addi R27, R11, 27460 */
		/* 8215DD8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215DD8Ch case    9:*/		return 0x8215DD90;
		  /* 8215DD90h */ case   10:  		/* addi R26, R10, -21088 */
		/* 8215DD90h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFADA0);
		/* 8215DD90h case   10:*/		return 0x8215DD94;
		  /* 8215DD94h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DD94h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215DDB4;  }
		/* 8215DD94h case   11:*/		return 0x8215DD98;
		  /* 8215DD98h */ case   12:  		/* lis R11, -32252 */
		/* 8215DD98h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DD98h case   12:*/		return 0x8215DD9C;
		  /* 8215DD9Ch */ case   13:  		/* mr R6, R26 */
		/* 8215DD9Ch case   13:*/		regs.R6 = regs.R26;
		/* 8215DD9Ch case   13:*/		return 0x8215DDA0;
		  /* 8215DDA0h */ case   14:  		/* addi R5, R11, -22036 */
		/* 8215DDA0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DDA0h case   14:*/		return 0x8215DDA4;
		  /* 8215DDA4h */ case   15:  		/* mr R4, R27 */
		/* 8215DDA4h case   15:*/		regs.R4 = regs.R27;
		/* 8215DDA4h case   15:*/		return 0x8215DDA8;
		  /* 8215DDA8h */ case   16:  		/* li R7, 1533 */
		/* 8215DDA8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x5FD);
		/* 8215DDA8h case   16:*/		return 0x8215DDAC;
		  /* 8215DDACh */ case   17:  		/* li R3, 0 */
		/* 8215DDACh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DDACh case   17:*/		return 0x8215DDB0;
		  /* 8215DDB0h */ case   18:  		/* bl -25000 */
		/* 8215DDB0h case   18:*/		regs.LR = 0x8215DDB4; return 0x82157C08;
		/* 8215DDB0h case   18:*/		return 0x8215DDB4;
	}
	return 0x8215DDB4;
} // Block from 8215DD68h-8215DDB4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215DDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DDB4);
		  /* 8215DDB4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8215DDB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215DDB4h case    0:*/		return 0x8215DDB8;
		  /* 8215DDB8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DDB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215DDD8;  }
		/* 8215DDB8h case    1:*/		return 0x8215DDBC;
		  /* 8215DDBCh */ case    2:  		/* lis R11, -32252 */
		/* 8215DDBCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DDBCh case    2:*/		return 0x8215DDC0;
		  /* 8215DDC0h */ case    3:  		/* mr R6, R26 */
		/* 8215DDC0h case    3:*/		regs.R6 = regs.R26;
		/* 8215DDC0h case    3:*/		return 0x8215DDC4;
		  /* 8215DDC4h */ case    4:  		/* addi R5, R11, -22012 */
		/* 8215DDC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8215DDC4h case    4:*/		return 0x8215DDC8;
		  /* 8215DDC8h */ case    5:  		/* mr R4, R27 */
		/* 8215DDC8h case    5:*/		regs.R4 = regs.R27;
		/* 8215DDC8h case    5:*/		return 0x8215DDCC;
		  /* 8215DDCCh */ case    6:  		/* li R7, 1534 */
		/* 8215DDCCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5FE);
		/* 8215DDCCh case    6:*/		return 0x8215DDD0;
		  /* 8215DDD0h */ case    7:  		/* li R3, 0 */
		/* 8215DDD0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DDD0h case    7:*/		return 0x8215DDD4;
		  /* 8215DDD4h */ case    8:  		/* bl -25036 */
		/* 8215DDD4h case    8:*/		regs.LR = 0x8215DDD8; return 0x82157C08;
		/* 8215DDD4h case    8:*/		return 0x8215DDD8;
	}
	return 0x8215DDD8;
} // Block from 8215DDB4h-8215DDD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215DDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DDD8);
		  /* 8215DDD8h */ case    0:  		/* mr R3, R31 */
		/* 8215DDD8h case    0:*/		regs.R3 = regs.R31;
		/* 8215DDD8h case    0:*/		return 0x8215DDDC;
		  /* 8215DDDCh */ case    1:  		/* bl -204 */
		/* 8215DDDCh case    1:*/		regs.LR = 0x8215DDE0; return 0x8215DD10;
		/* 8215DDDCh case    1:*/		return 0x8215DDE0;
		  /* 8215DDE0h */ case    2:  		/* or. R24, R3, R3 */
		/* 8215DDE0h case    2:*/		cpu::op::or<1>(regs,&regs.R24,regs.R3,regs.R3);
		/* 8215DDE0h case    2:*/		return 0x8215DDE4;
		  /* 8215DDE4h */ case    3:  		/* bc 4, CR0_EQ, 32 */
		/* 8215DDE4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215DE04;  }
		/* 8215DDE4h case    3:*/		return 0x8215DDE8;
		  /* 8215DDE8h */ case    4:  		/* lis R11, -32252 */
		/* 8215DDE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DDE8h case    4:*/		return 0x8215DDEC;
		  /* 8215DDECh */ case    5:  		/* mr R6, R26 */
		/* 8215DDECh case    5:*/		regs.R6 = regs.R26;
		/* 8215DDECh case    5:*/		return 0x8215DDF0;
		  /* 8215DDF0h */ case    6:  		/* addi R5, R11, -20184 */
		/* 8215DDF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB128);
		/* 8215DDF0h case    6:*/		return 0x8215DDF4;
		  /* 8215DDF4h */ case    7:  		/* mr R4, R27 */
		/* 8215DDF4h case    7:*/		regs.R4 = regs.R27;
		/* 8215DDF4h case    7:*/		return 0x8215DDF8;
		  /* 8215DDF8h */ case    8:  		/* li R7, 1565 */
		/* 8215DDF8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x61D);
		/* 8215DDF8h case    8:*/		return 0x8215DDFC;
		  /* 8215DDFCh */ case    9:  		/* li R3, 0 */
		/* 8215DDFCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DDFCh case    9:*/		return 0x8215DE00;
		  /* 8215DE00h */ case   10:  		/* bl -25080 */
		/* 8215DE00h case   10:*/		regs.LR = 0x8215DE04; return 0x82157C08;
		/* 8215DE00h case   10:*/		return 0x8215DE04;
	}
	return 0x8215DE04;
} // Block from 8215DDD8h-8215DE04h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE04);
		  /* 8215DE04h */ case    0:  		/* mr R3, R24 */
		/* 8215DE04h case    0:*/		regs.R3 = regs.R24;
		/* 8215DE04h case    0:*/		return 0x8215DE08;
	}
	return 0x8215DE08;
} // Block from 8215DE04h-8215DE08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE08h
// Function '?CS_AddRef@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE08);
		  /* 8215DE08h */ case    0:  		/* bl -5064 */
		/* 8215DE08h case    0:*/		regs.LR = 0x8215DE0C; return 0x8215CA40;
		/* 8215DE08h case    0:*/		return 0x8215DE0C;
		  /* 8215DE0Ch */ case    1:  		/* or. R28, R3, R3 */
		/* 8215DE0Ch case    1:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8215DE0Ch case    1:*/		return 0x8215DE10;
		  /* 8215DE10h */ case    2:  		/* bc 12, CR0_EQ, 200 */
		/* 8215DE10h case    2:*/		if ( regs.CR[0].eq ) { return 0x8215DED8;  }
		/* 8215DE10h case    2:*/		return 0x8215DE14;
		  /* 8215DE14h */ case    3:  		/* lis R11, -32252 */
		/* 8215DE14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DE14h case    3:*/		return 0x8215DE18;
		  /* 8215DE18h */ case    4:  		/* addi R25, R11, -20196 */
		/* 8215DE18h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFB11C);
		/* 8215DE18h case    4:*/		return 0x8215DE1C;
		  /* 8215DE1Ch */ case    5:  		/* mr R3, R28 */
		/* 8215DE1Ch case    5:*/		regs.R3 = regs.R28;
		/* 8215DE1Ch case    5:*/		return 0x8215DE20;
		  /* 8215DE20h */ case    6:  		/* bl -4144 */
		/* 8215DE20h case    6:*/		regs.LR = 0x8215DE24; return 0x8215CDF0;
		/* 8215DE20h case    6:*/		return 0x8215DE24;
		  /* 8215DE24h */ case    7:  		/* or. R31, R3, R3 */
		/* 8215DE24h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215DE24h case    7:*/		return 0x8215DE28;
		  /* 8215DE28h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 8215DE28h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215DE44;  }
		/* 8215DE28h case    8:*/		return 0x8215DE2C;
		  /* 8215DE2Ch */ case    9:  		/* mr R6, R26 */
		/* 8215DE2Ch case    9:*/		regs.R6 = regs.R26;
		/* 8215DE2Ch case    9:*/		return 0x8215DE30;
		  /* 8215DE30h */ case   10:  		/* mr R5, R25 */
		/* 8215DE30h case   10:*/		regs.R5 = regs.R25;
		/* 8215DE30h case   10:*/		return 0x8215DE34;
		  /* 8215DE34h */ case   11:  		/* mr R4, R27 */
		/* 8215DE34h case   11:*/		regs.R4 = regs.R27;
		/* 8215DE34h case   11:*/		return 0x8215DE38;
		  /* 8215DE38h */ case   12:  		/* li R7, 1573 */
		/* 8215DE38h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x625);
		/* 8215DE38h case   12:*/		return 0x8215DE3C;
		  /* 8215DE3Ch */ case   13:  		/* li R3, 0 */
		/* 8215DE3Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DE3Ch case   13:*/		return 0x8215DE40;
		  /* 8215DE40h */ case   14:  		/* bl -25144 */
		/* 8215DE40h case   14:*/		regs.LR = 0x8215DE44; return 0x82157C08;
		/* 8215DE40h case   14:*/		return 0x8215DE44;
	}
	return 0x8215DE44;
} // Block from 8215DE08h-8215DE44h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE44);
		  /* 8215DE44h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8215DE44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215DE44h case    0:*/		return 0x8215DE48;
		  /* 8215DE48h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8215DE48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8215DE48h case    1:*/		return 0x8215DE4C;
		  /* 8215DE4Ch */ case    2:  		/* bc 12, CR6_LT, 72 */
		/* 8215DE4Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8215DE94;  }
		/* 8215DE4Ch case    2:*/		return 0x8215DE50;
		  /* 8215DE50h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 8215DE50h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215DE80;  }
		/* 8215DE50h case    3:*/		return 0x8215DE54;
		  /* 8215DE54h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8215DE54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8215DE54h case    4:*/		return 0x8215DE58;
		  /* 8215DE58h */ case    5:  		/* bc 4, CR6_LT, 100 */
		/* 8215DE58h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8215DEBC;  }
		/* 8215DE58h case    5:*/		return 0x8215DE5C;
		  /* 8215DE5Ch */ case    6:  		/* mr R3, R29 */
		/* 8215DE5Ch case    6:*/		regs.R3 = regs.R29;
		/* 8215DE5Ch case    6:*/		return 0x8215DE60;
		  /* 8215DE60h */ case    7:  		/* lwz R5, <#[R31 + 8]> */
		/* 8215DE60h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 8215DE60h case    7:*/		return 0x8215DE64;
		  /* 8215DE64h */ case    8:  		/* lwz R4, <#[R31 + 4]> */
		/* 8215DE64h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DE64h case    8:*/		return 0x8215DE68;
	}
	return 0x8215DE68;
} // Block from 8215DE44h-8215DE68h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE68h
// Function '?CS_SetShaderType@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@W4IL_Shader_Type@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE68);
		  /* 8215DE68h */ case    0:  		/* bl -1576 */
		/* 8215DE68h case    0:*/		regs.LR = 0x8215DE6C; return 0x8215D840;
		/* 8215DE68h case    0:*/		return 0x8215DE6C;
		  /* 8215DE6Ch */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215DE6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215DE6Ch case    1:*/		return 0x8215DE70;
		  /* 8215DE70h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 8215DE70h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8215DE70h case    2:*/		return 0x8215DE74;
		  /* 8215DE74h */ case    3:  		/* bc 4, CR6_EQ, 112 */
		/* 8215DE74h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215DEE4;  }
		/* 8215DE74h case    3:*/		return 0x8215DE78;
		  /* 8215DE78h */ case    4:  		/* li R30, 1 */
		/* 8215DE78h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8215DE78h case    4:*/		return 0x8215DE7C;
		  /* 8215DE7Ch */ case    5:  		/* b 72 */
		/* 8215DE7Ch case    5:*/		return 0x8215DEC4;
		/* 8215DE7Ch case    5:*/		return 0x8215DE80;
	}
	return 0x8215DE80;
} // Block from 8215DE68h-8215DE80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE80);
		  /* 8215DE80h */ case    0:  		/* mr R3, R29 */
		/* 8215DE80h case    0:*/		regs.R3 = regs.R29;
		/* 8215DE80h case    0:*/		return 0x8215DE84;
		  /* 8215DE84h */ case    1:  		/* lwz R4, <#[R31 + 4]> */
		/* 8215DE84h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DE84h case    1:*/		return 0x8215DE88;
		  /* 8215DE88h */ case    2:  		/* bl -2424 */
		/* 8215DE88h case    2:*/		regs.LR = 0x8215DE8C; return 0x8215D510;
		/* 8215DE88h case    2:*/		return 0x8215DE8C;
		  /* 8215DE8Ch */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215DE8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215DE8Ch case    3:*/		return 0x8215DE90;
		  /* 8215DE90h */ case    4:  		/* b -32 */
		/* 8215DE90h case    4:*/		return 0x8215DE70;
		/* 8215DE90h case    4:*/		return 0x8215DE94;
	}
	return 0x8215DE94;
} // Block from 8215DE80h-8215DE94h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215DE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DE94);
		  /* 8215DE94h */ case    0:  		/* mr R5, R29 */
		/* 8215DE94h case    0:*/		regs.R5 = regs.R29;
		/* 8215DE94h case    0:*/		return 0x8215DE98;
		  /* 8215DE98h */ case    1:  		/* lwz R4, <#[R31 + 8]> */
		/* 8215DE98h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 8215DE98h case    1:*/		return 0x8215DE9C;
		  /* 8215DE9Ch */ case    2:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215DE9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215DE9Ch case    2:*/		return 0x8215DEA0;
		  /* 8215DEA0h */ case    3:  		/* li R30, 1 */
		/* 8215DEA0h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8215DEA0h case    3:*/		return 0x8215DEA4;
		  /* 8215DEA4h */ case    4:  		/* bl 717044 */
		/* 8215DEA4h case    4:*/		regs.LR = 0x8215DEA8; return 0x8220CF98;
		/* 8215DEA4h case    4:*/		return 0x8215DEA8;
		  /* 8215DEA8h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215DEA8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215DEA8h case    5:*/		return 0x8215DEAC;
		  /* 8215DEACh */ case    6:  		/* subf R11, R3, R11 */
		/* 8215DEACh case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8215DEACh case    6:*/		return 0x8215DEB0;
		  /* 8215DEB0h */ case    7:  		/* addic R11, R11, -1 */
		/* 8215DEB0h case    7:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215DEB0h case    7:*/		return 0x8215DEB4;
		  /* 8215DEB4h */ case    8:  		/* subfe R11, R11, R11 */
		/* 8215DEB4h case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8215DEB4h case    8:*/		return 0x8215DEB8;
		  /* 8215DEB8h */ case    9:  		/* and R30, R11, R30 */
		/* 8215DEB8h case    9:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 8215DEB8h case    9:*/		return 0x8215DEBC;
	}
	return 0x8215DEBC;
} // Block from 8215DE94h-8215DEBCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215DEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DEBC);
		  /* 8215DEBCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8215DEBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215DEBCh case    0:*/		return 0x8215DEC0;
		  /* 8215DEC0h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 8215DEC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215DEE4;  }
		/* 8215DEC0h case    1:*/		return 0x8215DEC4;
	}
	return 0x8215DEC4;
} // Block from 8215DEBCh-8215DEC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215DEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DEC4);
		  /* 8215DEC4h */ case    0:  		/* mr R4, R28 */
		/* 8215DEC4h case    0:*/		regs.R4 = regs.R28;
		/* 8215DEC4h case    0:*/		return 0x8215DEC8;
		  /* 8215DEC8h */ case    1:  		/* mr R3, R24 */
		/* 8215DEC8h case    1:*/		regs.R3 = regs.R24;
		/* 8215DEC8h case    1:*/		return 0x8215DECC;
		  /* 8215DECCh */ case    2:  		/* bl -4492 */
		/* 8215DECCh case    2:*/		regs.LR = 0x8215DED0; return 0x8215CD40;
		/* 8215DECCh case    2:*/		return 0x8215DED0;
		  /* 8215DED0h */ case    3:  		/* or. R28, R3, R3 */
		/* 8215DED0h case    3:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8215DED0h case    3:*/		return 0x8215DED4;
		  /* 8215DED4h */ case    4:  		/* bc 4, CR0_EQ, -184 */
		/* 8215DED4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8215DE1C;  }
		/* 8215DED4h case    4:*/		return 0x8215DED8;
	}
	return 0x8215DED8;
} // Block from 8215DEC4h-8215DED8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215DED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DED8);
		  /* 8215DED8h */ case    0:  		/* li R3, 1 */
		/* 8215DED8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8215DED8h case    0:*/		return 0x8215DEDC;
		  /* 8215DEDCh */ case    1:  		/* addi R1, R1, 160 */
		/* 8215DEDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8215DEDCh case    1:*/		return 0x8215DEE0;
		  /* 8215DEE0h */ case    2:  		/* b -838728 */
		/* 8215DEE0h case    2:*/		return 0x82091298;
		/* 8215DEE0h case    2:*/		return 0x8215DEE4;
	}
	return 0x8215DEE4;
} // Block from 8215DED8h-8215DEE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215DEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DEE4);
		  /* 8215DEE4h */ case    0:  		/* li R3, 0 */
		/* 8215DEE4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DEE4h case    0:*/		return 0x8215DEE8;
		  /* 8215DEE8h */ case    1:  		/* b -12 */
		/* 8215DEE8h case    1:*/		return 0x8215DEDC;
		/* 8215DEE8h case    1:*/		return 0x8215DEEC;
		  /* 8215DEECh */ case    2:  		/* nop */
		/* 8215DEECh case    2:*/		cpu::op::nop();
		/* 8215DEECh case    2:*/		return 0x8215DEF0;
	}
	return 0x8215DEF0;
} // Block from 8215DEE4h-8215DEF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215DEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DEF0);
		  /* 8215DEF0h */ case    0:  		/* mfspr R12, LR */
		/* 8215DEF0h case    0:*/		regs.R12 = regs.LR;
		/* 8215DEF0h case    0:*/		return 0x8215DEF4;
		  /* 8215DEF4h */ case    1:  		/* bl -838824 */
		/* 8215DEF4h case    1:*/		regs.LR = 0x8215DEF8; return 0x8209124C;
		/* 8215DEF4h case    1:*/		return 0x8215DEF8;
		  /* 8215DEF8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215DEF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215DEF8h case    2:*/		return 0x8215DEFC;
		  /* 8215DEFCh */ case    3:  		/* lis R11, -32253 */
		/* 8215DEFCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DEFCh case    3:*/		return 0x8215DF00;
		  /* 8215DF00h */ case    4:  		/* lis R10, -32252 */
		/* 8215DF00h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DF00h case    4:*/		return 0x8215DF04;
		  /* 8215DF04h */ case    5:  		/* mr R31, R3 */
		/* 8215DF04h case    5:*/		regs.R31 = regs.R3;
		/* 8215DF04h case    5:*/		return 0x8215DF08;
		  /* 8215DF08h */ case    6:  		/* mr R28, R4 */
		/* 8215DF08h case    6:*/		regs.R28 = regs.R4;
		/* 8215DF08h case    6:*/		return 0x8215DF0C;
		  /* 8215DF0Ch */ case    7:  		/* mr R27, R5 */
		/* 8215DF0Ch case    7:*/		regs.R27 = regs.R5;
		/* 8215DF0Ch case    7:*/		return 0x8215DF10;
		  /* 8215DF10h */ case    8:  		/* mr R26, R6 */
		/* 8215DF10h case    8:*/		regs.R26 = regs.R6;
		/* 8215DF10h case    8:*/		return 0x8215DF14;
		  /* 8215DF14h */ case    9:  		/* mr R25, R7 */
		/* 8215DF14h case    9:*/		regs.R25 = regs.R7;
		/* 8215DF14h case    9:*/		return 0x8215DF18;
		  /* 8215DF18h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8215DF18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DF18h case   10:*/		return 0x8215DF1C;
		  /* 8215DF1Ch */ case   11:  		/* addi R30, R11, 27460 */
		/* 8215DF1Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215DF1Ch case   11:*/		return 0x8215DF20;
		  /* 8215DF20h */ case   12:  		/* addi R29, R10, -21088 */
		/* 8215DF20h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215DF20h case   12:*/		return 0x8215DF24;
		  /* 8215DF24h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DF24h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8215DF44;  }
		/* 8215DF24h case   13:*/		return 0x8215DF28;
	}
	return 0x8215DF28;
} // Block from 8215DEF0h-8215DF28h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215DF28h
// Function '?AS_GetStateI@XGRAPHICS@@YAIPAU_ABSTRACT_STATE@1@W4_E_AS_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DF28);
		  /* 8215DF28h */ case    0:  		/* lis R11, -32252 */
		/* 8215DF28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DF28h case    0:*/		return 0x8215DF2C;
		  /* 8215DF2Ch */ case    1:  		/* mr R6, R29 */
		/* 8215DF2Ch case    1:*/		regs.R6 = regs.R29;
		/* 8215DF2Ch case    1:*/		return 0x8215DF30;
		  /* 8215DF30h */ case    2:  		/* addi R5, R11, -22036 */
		/* 8215DF30h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DF30h case    2:*/		return 0x8215DF34;
		  /* 8215DF34h */ case    3:  		/* mr R4, R30 */
		/* 8215DF34h case    3:*/		regs.R4 = regs.R30;
		/* 8215DF34h case    3:*/		return 0x8215DF38;
		  /* 8215DF38h */ case    4:  		/* li R7, 1647 */
		/* 8215DF38h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x66F);
		/* 8215DF38h case    4:*/		return 0x8215DF3C;
		  /* 8215DF3Ch */ case    5:  		/* li R3, 0 */
		/* 8215DF3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DF3Ch case    5:*/		return 0x8215DF40;
		  /* 8215DF40h */ case    6:  		/* bl -25400 */
		/* 8215DF40h case    6:*/		regs.LR = 0x8215DF44; return 0x82157C08;
		/* 8215DF40h case    6:*/		return 0x8215DF44;
	}
	return 0x8215DF44;
} // Block from 8215DF28h-8215DF44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215DF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DF44);
		  /* 8215DF44h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8215DF44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8215DF44h case    0:*/		return 0x8215DF48;
		  /* 8215DF48h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215DF48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215DF48h case    1:*/		return 0x8215DF4C;
		  /* 8215DF4Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DF4Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215DF6C;  }
		/* 8215DF4Ch case    2:*/		return 0x8215DF50;
		  /* 8215DF50h */ case    3:  		/* lis R11, -32252 */
		/* 8215DF50h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DF50h case    3:*/		return 0x8215DF54;
		  /* 8215DF54h */ case    4:  		/* mr R6, R29 */
		/* 8215DF54h case    4:*/		regs.R6 = regs.R29;
		/* 8215DF54h case    4:*/		return 0x8215DF58;
		  /* 8215DF58h */ case    5:  		/* addi R5, R11, -20168 */
		/* 8215DF58h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB138);
		/* 8215DF58h case    5:*/		return 0x8215DF5C;
		  /* 8215DF5Ch */ case    6:  		/* mr R4, R30 */
		/* 8215DF5Ch case    6:*/		regs.R4 = regs.R30;
		/* 8215DF5Ch case    6:*/		return 0x8215DF60;
		  /* 8215DF60h */ case    7:  		/* li R7, 1648 */
		/* 8215DF60h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x670);
		/* 8215DF60h case    7:*/		return 0x8215DF64;
		  /* 8215DF64h */ case    8:  		/* li R3, 0 */
		/* 8215DF64h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DF64h case    8:*/		return 0x8215DF68;
		  /* 8215DF68h */ case    9:  		/* bl -25440 */
		/* 8215DF68h case    9:*/		regs.LR = 0x8215DF6C; return 0x82157C08;
		/* 8215DF68h case    9:*/		return 0x8215DF6C;
	}
	return 0x8215DF6C;
} // Block from 8215DF44h-8215DF6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215DF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DF6C);
		  /* 8215DF6Ch */ case    0:  		/* mr R7, R25 */
		/* 8215DF6Ch case    0:*/		regs.R7 = regs.R25;
		/* 8215DF6Ch case    0:*/		return 0x8215DF70;
		  /* 8215DF70h */ case    1:  		/* lwz R3, <#[R31 + 56]> */
		/* 8215DF70h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8215DF70h case    1:*/		return 0x8215DF74;
		  /* 8215DF74h */ case    2:  		/* mr R6, R26 */
		/* 8215DF74h case    2:*/		regs.R6 = regs.R26;
		/* 8215DF74h case    2:*/		return 0x8215DF78;
		  /* 8215DF78h */ case    3:  		/* mr R5, R27 */
		/* 8215DF78h case    3:*/		regs.R5 = regs.R27;
		/* 8215DF78h case    3:*/		return 0x8215DF7C;
		  /* 8215DF7Ch */ case    4:  		/* mr R4, R28 */
		/* 8215DF7Ch case    4:*/		regs.R4 = regs.R28;
		/* 8215DF7Ch case    4:*/		return 0x8215DF80;
		  /* 8215DF80h */ case    5:  		/* bl 714728 */
		/* 8215DF80h case    5:*/		regs.LR = 0x8215DF84; return 0x8220C768;
		/* 8215DF80h case    5:*/		return 0x8215DF84;
		  /* 8215DF84h */ case    6:  		/* addi R1, R1, 144 */
		/* 8215DF84h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215DF84h case    6:*/		return 0x8215DF88;
		  /* 8215DF88h */ case    7:  		/* b -838892 */
		/* 8215DF88h case    7:*/		return 0x8209129C;
		/* 8215DF88h case    7:*/		return 0x8215DF8C;
		  /* 8215DF8Ch */ case    8:  		/* nop */
		/* 8215DF8Ch case    8:*/		cpu::op::nop();
		/* 8215DF8Ch case    8:*/		return 0x8215DF90;
	}
	return 0x8215DF90;
} // Block from 8215DF6Ch-8215DF90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215DF90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DF90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DF90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DF90);
		  /* 8215DF90h */ case    0:  		/* mfspr R12, LR */
		/* 8215DF90h case    0:*/		regs.R12 = regs.LR;
		/* 8215DF90h case    0:*/		return 0x8215DF94;
		  /* 8215DF94h */ case    1:  		/* bl -838988 */
		/* 8215DF94h case    1:*/		regs.LR = 0x8215DF98; return 0x82091248;
		/* 8215DF94h case    1:*/		return 0x8215DF98;
	}
	return 0x8215DF98;
} // Block from 8215DF90h-8215DF98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215DF98h
// Function '?CS_GetShaderType@XGRAPHICS@@YAIPAU_CS_COMPILED_SHADER@1@PAW4IL_Shader_Type@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DF98);
		  /* 8215DF98h */ case    0:  		/* stwu R1, <#[R1 - 160]> */
		/* 8215DF98h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8215DF98h case    0:*/		return 0x8215DF9C;
		  /* 8215DF9Ch */ case    1:  		/* lis R11, -32253 */
		/* 8215DF9Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215DF9Ch case    1:*/		return 0x8215DFA0;
		  /* 8215DFA0h */ case    2:  		/* lis R10, -32252 */
		/* 8215DFA0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215DFA0h case    2:*/		return 0x8215DFA4;
		  /* 8215DFA4h */ case    3:  		/* mr R31, R3 */
		/* 8215DFA4h case    3:*/		regs.R31 = regs.R3;
		/* 8215DFA4h case    3:*/		return 0x8215DFA8;
		  /* 8215DFA8h */ case    4:  		/* mr R26, R4 */
		/* 8215DFA8h case    4:*/		regs.R26 = regs.R4;
		/* 8215DFA8h case    4:*/		return 0x8215DFAC;
		  /* 8215DFACh */ case    5:  		/* mr R30, R5 */
		/* 8215DFACh case    5:*/		regs.R30 = regs.R5;
		/* 8215DFACh case    5:*/		return 0x8215DFB0;
		  /* 8215DFB0h */ case    6:  		/* mr R27, R6 */
		/* 8215DFB0h case    6:*/		regs.R27 = regs.R6;
		/* 8215DFB0h case    6:*/		return 0x8215DFB4;
		  /* 8215DFB4h */ case    7:  		/* mr R25, R7 */
		/* 8215DFB4h case    7:*/		regs.R25 = regs.R7;
		/* 8215DFB4h case    7:*/		return 0x8215DFB8;
		  /* 8215DFB8h */ case    8:  		/* mr R24, R8 */
		/* 8215DFB8h case    8:*/		regs.R24 = regs.R8;
		/* 8215DFB8h case    8:*/		return 0x8215DFBC;
		  /* 8215DFBCh */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215DFBCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215DFBCh case    9:*/		return 0x8215DFC0;
	}
	return 0x8215DFC0;
} // Block from 8215DF98h-8215DFC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215DFC0h
// Function '?CS_SetShaderHandle@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DFC0);
		  /* 8215DFC0h */ case    0:  		/* addi R29, R11, 27460 */
		/* 8215DFC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8215DFC0h case    0:*/		return 0x8215DFC4;
		  /* 8215DFC4h */ case    1:  		/* addi R28, R10, -21088 */
		/* 8215DFC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFADA0);
		/* 8215DFC4h case    1:*/		return 0x8215DFC8;
		  /* 8215DFC8h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DFC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215DFE8;  }
		/* 8215DFC8h case    2:*/		return 0x8215DFCC;
		  /* 8215DFCCh */ case    3:  		/* lis R11, -32252 */
		/* 8215DFCCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DFCCh case    3:*/		return 0x8215DFD0;
		  /* 8215DFD0h */ case    4:  		/* mr R6, R28 */
		/* 8215DFD0h case    4:*/		regs.R6 = regs.R28;
		/* 8215DFD0h case    4:*/		return 0x8215DFD4;
		  /* 8215DFD4h */ case    5:  		/* addi R5, R11, -22036 */
		/* 8215DFD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215DFD4h case    5:*/		return 0x8215DFD8;
		  /* 8215DFD8h */ case    6:  		/* mr R4, R29 */
		/* 8215DFD8h case    6:*/		regs.R4 = regs.R29;
		/* 8215DFD8h case    6:*/		return 0x8215DFDC;
		  /* 8215DFDCh */ case    7:  		/* li R7, 1756 */
		/* 8215DFDCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x6DC);
		/* 8215DFDCh case    7:*/		return 0x8215DFE0;
		  /* 8215DFE0h */ case    8:  		/* li R3, 0 */
		/* 8215DFE0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215DFE0h case    8:*/		return 0x8215DFE4;
		  /* 8215DFE4h */ case    9:  		/* bl -25564 */
		/* 8215DFE4h case    9:*/		regs.LR = 0x8215DFE8; return 0x82157C08;
		/* 8215DFE4h case    9:*/		return 0x8215DFE8;
	}
	return 0x8215DFE8;
} // Block from 8215DFC0h-8215DFE8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215DFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215DFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215DFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215DFE8);
		  /* 8215DFE8h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8215DFE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8215DFE8h case    0:*/		return 0x8215DFEC;
		  /* 8215DFECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215DFECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215DFECh case    1:*/		return 0x8215DFF0;
		  /* 8215DFF0h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215DFF0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215E010;  }
		/* 8215DFF0h case    2:*/		return 0x8215DFF4;
		  /* 8215DFF4h */ case    3:  		/* lis R11, -32252 */
		/* 8215DFF4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215DFF4h case    3:*/		return 0x8215DFF8;
		  /* 8215DFF8h */ case    4:  		/* mr R6, R28 */
		/* 8215DFF8h case    4:*/		regs.R6 = regs.R28;
		/* 8215DFF8h case    4:*/		return 0x8215DFFC;
		  /* 8215DFFCh */ case    5:  		/* addi R5, R11, -20168 */
		/* 8215DFFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB138);
		/* 8215DFFCh case    5:*/		return 0x8215E000;
		  /* 8215E000h */ case    6:  		/* mr R4, R29 */
		/* 8215E000h case    6:*/		regs.R4 = regs.R29;
		/* 8215E000h case    6:*/		return 0x8215E004;
		  /* 8215E004h */ case    7:  		/* li R7, 1757 */
		/* 8215E004h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x6DD);
		/* 8215E004h case    7:*/		return 0x8215E008;
		  /* 8215E008h */ case    8:  		/* li R3, 0 */
		/* 8215E008h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E008h case    8:*/		return 0x8215E00C;
		  /* 8215E00Ch */ case    9:  		/* bl -25604 */
		/* 8215E00Ch case    9:*/		regs.LR = 0x8215E010; return 0x82157C08;
		/* 8215E00Ch case    9:*/		return 0x8215E010;
	}
	return 0x8215E010;
} // Block from 8215DFE8h-8215E010h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E010);
		  /* 8215E010h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8215E010h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215E010h case    0:*/		return 0x8215E014;
		  /* 8215E014h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E014h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215E034;  }
		/* 8215E014h case    1:*/		return 0x8215E018;
		  /* 8215E018h */ case    2:  		/* lis R11, -32252 */
		/* 8215E018h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E018h case    2:*/		return 0x8215E01C;
		  /* 8215E01Ch */ case    3:  		/* mr R6, R28 */
		/* 8215E01Ch case    3:*/		regs.R6 = regs.R28;
		/* 8215E01Ch case    3:*/		return 0x8215E020;
	}
	return 0x8215E020;
} // Block from 8215E010h-8215E020h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215E020h
// Function '?CS_GetShaderHandle@XGRAPHICS@@YAIPAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E020);
		  /* 8215E020h */ case    0:  		/* addi R5, R11, -22012 */
		/* 8215E020h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8215E020h case    0:*/		return 0x8215E024;
		  /* 8215E024h */ case    1:  		/* mr R4, R29 */
		/* 8215E024h case    1:*/		regs.R4 = regs.R29;
		/* 8215E024h case    1:*/		return 0x8215E028;
		  /* 8215E028h */ case    2:  		/* li R7, 1758 */
		/* 8215E028h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x6DE);
		/* 8215E028h case    2:*/		return 0x8215E02C;
		  /* 8215E02Ch */ case    3:  		/* li R3, 0 */
		/* 8215E02Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E02Ch case    3:*/		return 0x8215E030;
		  /* 8215E030h */ case    4:  		/* bl -25640 */
		/* 8215E030h case    4:*/		regs.LR = 0x8215E034; return 0x82157C08;
		/* 8215E030h case    4:*/		return 0x8215E034;
	}
	return 0x8215E034;
} // Block from 8215E020h-8215E034h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215E034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E034);
		  /* 8215E034h */ case    0:  		/* mr R8, R24 */
		/* 8215E034h case    0:*/		regs.R8 = regs.R24;
		/* 8215E034h case    0:*/		return 0x8215E038;
		  /* 8215E038h */ case    1:  		/* lwz R3, <#[R31 + 56]> */
		/* 8215E038h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8215E038h case    1:*/		return 0x8215E03C;
		  /* 8215E03Ch */ case    2:  		/* mr R7, R25 */
		/* 8215E03Ch case    2:*/		regs.R7 = regs.R25;
		/* 8215E03Ch case    2:*/		return 0x8215E040;
		  /* 8215E040h */ case    3:  		/* mr R6, R27 */
		/* 8215E040h case    3:*/		regs.R6 = regs.R27;
		/* 8215E040h case    3:*/		return 0x8215E044;
		  /* 8215E044h */ case    4:  		/* mr R5, R30 */
		/* 8215E044h case    4:*/		regs.R5 = regs.R30;
		/* 8215E044h case    4:*/		return 0x8215E048;
		  /* 8215E048h */ case    5:  		/* mr R4, R26 */
		/* 8215E048h case    5:*/		regs.R4 = regs.R26;
		/* 8215E048h case    5:*/		return 0x8215E04C;
		  /* 8215E04Ch */ case    6:  		/* bl 716308 */
		/* 8215E04Ch case    6:*/		regs.LR = 0x8215E050; return 0x8220CE60;
		/* 8215E04Ch case    6:*/		return 0x8215E050;
		  /* 8215E050h */ case    7:  		/* mr R29, R3 */
		/* 8215E050h case    7:*/		regs.R29 = regs.R3;
		/* 8215E050h case    7:*/		return 0x8215E054;
		  /* 8215E054h */ case    8:  		/* cmpwi CR6, R30, 1 */
		/* 8215E054h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 8215E054h case    8:*/		return 0x8215E058;
		  /* 8215E058h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 8215E058h case    9:*/		if ( regs.CR[6].eq ) { return 0x8215E064;  }
		/* 8215E058h case    9:*/		return 0x8215E05C;
		  /* 8215E05Ch */ case   10:  		/* cmpwi CR6, R30, 3 */
		/* 8215E05Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000003);
		/* 8215E05Ch case   10:*/		return 0x8215E060;
		  /* 8215E060h */ case   11:  		/* bc 4, CR6_EQ, 60 */
		/* 8215E060h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215E09C;  }
		/* 8215E060h case   11:*/		return 0x8215E064;
	}
	return 0x8215E064;
} // Block from 8215E034h-8215E064h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E064);
		  /* 8215E064h */ case    0:  		/* cmpwi CR6, R29, 0 */
		/* 8215E064h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8215E064h case    0:*/		return 0x8215E068;
		  /* 8215E068h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 8215E068h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215E09C;  }
		/* 8215E068h case    1:*/		return 0x8215E06C;
		  /* 8215E06Ch */ case    2:  		/* lwz R11, <#[R31 + 36]> */
		/* 8215E06Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8215E06Ch case    2:*/		return 0x8215E070;
		  /* 8215E070h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8215E070h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E070h case    3:*/		return 0x8215E074;
		  /* 8215E074h */ case    4:  		/* bc 4, CR6_EQ, 40 */
		/* 8215E074h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8215E09C;  }
		/* 8215E074h case    4:*/		return 0x8215E078;
	}
	return 0x8215E078;
} // Block from 8215E064h-8215E078h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215E078h
// Function '?CS_SetInternalConstantAllocator@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@PAU_IA_INTERNALCONST_ALLOCATOR@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E078);
		  /* 8215E078h */ case    0:  		/* mr R5, R27 */
		/* 8215E078h case    0:*/		regs.R5 = regs.R27;
		/* 8215E078h case    0:*/		return 0x8215E07C;
		  /* 8215E07Ch */ case    1:  		/* li R4, 40 */
		/* 8215E07Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8215E07Ch case    1:*/		return 0x8215E080;
		  /* 8215E080h */ case    2:  		/* mr R3, R26 */
		/* 8215E080h case    2:*/		regs.R3 = regs.R26;
		/* 8215E080h case    2:*/		return 0x8215E084;
		  /* 8215E084h */ case    3:  		/* bl -2116 */
		/* 8215E084h case    3:*/		regs.LR = 0x8215E088; return 0x8215D840;
		/* 8215E084h case    3:*/		return 0x8215E088;
		  /* 8215E088h */ case    4:  		/* mr R6, R3 */
		/* 8215E088h case    4:*/		regs.R6 = regs.R3;
		/* 8215E088h case    4:*/		return 0x8215E08C;
		  /* 8215E08Ch */ case    5:  		/* mr R5, R27 */
		/* 8215E08Ch case    5:*/		regs.R5 = regs.R27;
		/* 8215E08Ch case    5:*/		return 0x8215E090;
		  /* 8215E090h */ case    6:  		/* li R4, 40 */
		/* 8215E090h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8215E090h case    6:*/		return 0x8215E094;
		  /* 8215E094h */ case    7:  		/* mr R3, R31 */
		/* 8215E094h case    7:*/		regs.R3 = regs.R31;
		/* 8215E094h case    7:*/		return 0x8215E098;
		  /* 8215E098h */ case    8:  		/* bl -1088 */
		/* 8215E098h case    8:*/		regs.LR = 0x8215E09C; return 0x8215DC58;
		/* 8215E098h case    8:*/		return 0x8215E09C;
	}
	return 0x8215E09C;
} // Block from 8215E078h-8215E09Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E09C);
		  /* 8215E09Ch */ case    0:  		/* mr R3, R29 */
		/* 8215E09Ch case    0:*/		regs.R3 = regs.R29;
		/* 8215E09Ch case    0:*/		return 0x8215E0A0;
		  /* 8215E0A0h */ case    1:  		/* addi R1, R1, 160 */
		/* 8215E0A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8215E0A0h case    1:*/		return 0x8215E0A4;
		  /* 8215E0A4h */ case    2:  		/* b -839180 */
		/* 8215E0A4h case    2:*/		return 0x82091298;
		/* 8215E0A4h case    2:*/		return 0x8215E0A8;
	}
	return 0x8215E0A8;
} // Block from 8215E09Ch-8215E0A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215E0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E0A8);
		  /* 8215E0A8h */ case    0:  		/* mfspr R12, LR */
		/* 8215E0A8h case    0:*/		regs.R12 = regs.LR;
		/* 8215E0A8h case    0:*/		return 0x8215E0AC;
		  /* 8215E0ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215E0ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E0ACh case    1:*/		return 0x8215E0B0;
		  /* 8215E0B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215E0B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E0B0h case    2:*/		return 0x8215E0B4;
		  /* 8215E0B4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215E0B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215E0B4h case    3:*/		return 0x8215E0B8;
		  /* 8215E0B8h */ case    4:  		/* mr R31, R3 */
		/* 8215E0B8h case    4:*/		regs.R31 = regs.R3;
		/* 8215E0B8h case    4:*/		return 0x8215E0BC;
		  /* 8215E0BCh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215E0BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E0BCh case    5:*/		return 0x8215E0C0;
		  /* 8215E0C0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215E0C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215E0E4;  }
		/* 8215E0C0h case    6:*/		return 0x8215E0C4;
		  /* 8215E0C4h */ case    7:  		/* lis R11, -32252 */
		/* 8215E0C4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E0C4h case    7:*/		return 0x8215E0C8;
		  /* 8215E0C8h */ case    8:  		/* lis R10, -32252 */
		/* 8215E0C8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E0C8h case    8:*/		return 0x8215E0CC;
		  /* 8215E0CCh */ case    9:  		/* lis R9, -32253 */
		/* 8215E0CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215E0CCh case    9:*/		return 0x8215E0D0;
		  /* 8215E0D0h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215E0D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215E0D0h case   10:*/		return 0x8215E0D4;
		  /* 8215E0D4h */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215E0D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215E0D4h case   11:*/		return 0x8215E0D8;
	}
	return 0x8215E0D8;
} // Block from 8215E0A8h-8215E0D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E0D8h
// Function '?CS_SetCode@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E0D8);
		  /* 8215E0D8h */ case    0:  		/* addi R4, R9, 27460 */
		/* 8215E0D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215E0D8h case    0:*/		return 0x8215E0DC;
		  /* 8215E0DCh */ case    1:  		/* li R7, 1795 */
		/* 8215E0DCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x703);
		/* 8215E0DCh case    1:*/		return 0x8215E0E0;
		  /* 8215E0E0h */ case    2:  		/* bl -25816 */
		/* 8215E0E0h case    2:*/		regs.LR = 0x8215E0E4; return 0x82157C08;
		/* 8215E0E0h case    2:*/		return 0x8215E0E4;
	}
	return 0x8215E0E4;
} // Block from 8215E0D8h-8215E0E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215E0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E0E4);
		  /* 8215E0E4h */ case    0:  		/* lwz R3, <#[R31 + 56]> */
		/* 8215E0E4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 8215E0E4h case    0:*/		return 0x8215E0E8;
		  /* 8215E0E8h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215E0E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215E0E8h case    1:*/		return 0x8215E0EC;
		  /* 8215E0ECh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215E0ECh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E0ECh case    2:*/		return 0x8215E0F0;
		  /* 8215E0F0h */ case    3:  		/* mtspr LR, R12 */
		/* 8215E0F0h case    3:*/		regs.LR = regs.R12;
		/* 8215E0F0h case    3:*/		return 0x8215E0F4;
		  /* 8215E0F4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215E0F4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E0F4h case    4:*/		return 0x8215E0F8;
		  /* 8215E0F8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215E0F8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E0F8h case    5:*/		return 0x8215E0FC;
	}
	return 0x8215E0FC;
} // Block from 8215E0E4h-8215E0FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215E0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E0FC);
		  /* 8215E0FCh */ case    0:  		/* nop */
		/* 8215E0FCh case    0:*/		cpu::op::nop();
		/* 8215E0FCh case    0:*/		return 0x8215E100;
	}
	return 0x8215E100;
} // Block from 8215E0FCh-8215E100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E100);
		  /* 8215E100h */ case    0:  		/* mfspr R12, LR */
		/* 8215E100h case    0:*/		regs.R12 = regs.LR;
		/* 8215E100h case    0:*/		return 0x8215E104;
		  /* 8215E104h */ case    1:  		/* bl -839336 */
		/* 8215E104h case    1:*/		regs.LR = 0x8215E108; return 0x8209125C;
		/* 8215E104h case    1:*/		return 0x8215E108;
		  /* 8215E108h */ case    2:  		/* stfd FR31, <#[R1 - 40]> */
		/* 8215E108h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFD8) );
		/* 8215E108h case    2:*/		return 0x8215E10C;
		  /* 8215E10Ch */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215E10Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215E10Ch case    3:*/		return 0x8215E110;
		  /* 8215E110h */ case    4:  		/* mr R31, R3 */
		/* 8215E110h case    4:*/		regs.R31 = regs.R3;
		/* 8215E110h case    4:*/		return 0x8215E114;
		  /* 8215E114h */ case    5:  		/* fmr FR31, FR1 */
		/* 8215E114h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8215E114h case    5:*/		return 0x8215E118;
		  /* 8215E118h */ case    6:  		/* mr R30, R4 */
		/* 8215E118h case    6:*/		regs.R30 = regs.R4;
		/* 8215E118h case    6:*/		return 0x8215E11C;
		  /* 8215E11Ch */ case    7:  		/* mr R29, R5 */
		/* 8215E11Ch case    7:*/		regs.R29 = regs.R5;
		/* 8215E11Ch case    7:*/		return 0x8215E120;
		  /* 8215E120h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215E120h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E120h case    8:*/		return 0x8215E124;
		  /* 8215E124h */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 8215E124h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215E148;  }
		/* 8215E124h case    9:*/		return 0x8215E128;
		  /* 8215E128h */ case   10:  		/* lis R11, -32252 */
		/* 8215E128h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E128h case   10:*/		return 0x8215E12C;
		  /* 8215E12Ch */ case   11:  		/* lis R10, -32252 */
		/* 8215E12Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E12Ch case   11:*/		return 0x8215E130;
		  /* 8215E130h */ case   12:  		/* lis R9, -32253 */
		/* 8215E130h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215E130h case   12:*/		return 0x8215E134;
		  /* 8215E134h */ case   13:  		/* addi R6, R11, -21088 */
		/* 8215E134h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215E134h case   13:*/		return 0x8215E138;
		  /* 8215E138h */ case   14:  		/* addi R5, R10, -22036 */
		/* 8215E138h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215E138h case   14:*/		return 0x8215E13C;
		  /* 8215E13Ch */ case   15:  		/* addi R4, R9, 27460 */
		/* 8215E13Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215E13Ch case   15:*/		return 0x8215E140;
		  /* 8215E140h */ case   16:  		/* li R7, 1830 */
		/* 8215E140h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x726);
		/* 8215E140h case   16:*/		return 0x8215E144;
		  /* 8215E144h */ case   17:  		/* bl -25916 */
		/* 8215E144h case   17:*/		regs.LR = 0x8215E148; return 0x82157C08;
		/* 8215E144h case   17:*/		return 0x8215E148;
	}
	return 0x8215E148;
} // Block from 8215E100h-8215E148h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215E148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E148);
		  /* 8215E148h */ case    0:  		/* mr R5, R29 */
		/* 8215E148h case    0:*/		regs.R5 = regs.R29;
		/* 8215E148h case    0:*/		return 0x8215E14C;
		  /* 8215E14Ch */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8215E14Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E14Ch case    1:*/		return 0x8215E150;
		  /* 8215E150h */ case    2:  		/* mr R4, R30 */
		/* 8215E150h case    2:*/		regs.R4 = regs.R30;
		/* 8215E150h case    2:*/		return 0x8215E154;
		  /* 8215E154h */ case    3:  		/* fmr FR1, FR31 */
		/* 8215E154h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8215E154h case    3:*/		return 0x8215E158;
		  /* 8215E158h */ case    4:  		/* bl 1824 */
		/* 8215E158h case    4:*/		regs.LR = 0x8215E15C; return 0x8215E878;
		/* 8215E158h case    4:*/		return 0x8215E15C;
		  /* 8215E15Ch */ case    5:  		/* addi R1, R1, 128 */
		/* 8215E15Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215E15Ch case    5:*/		return 0x8215E160;
		  /* 8215E160h */ case    6:  		/* lfd FR31, <#[R1 - 40]> */
		/* 8215E160h case    6:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFD8) );
		/* 8215E160h case    6:*/		return 0x8215E164;
		  /* 8215E164h */ case    7:  		/* b -839352 */
		/* 8215E164h case    7:*/		return 0x820912AC;
		/* 8215E164h case    7:*/		return 0x8215E168;
	}
	return 0x8215E168;
} // Block from 8215E148h-8215E168h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E168);
		  /* 8215E168h */ case    0:  		/* mfspr R12, LR */
		/* 8215E168h case    0:*/		regs.R12 = regs.LR;
		/* 8215E168h case    0:*/		return 0x8215E16C;
		  /* 8215E16Ch */ case    1:  		/* bl -839448 */
		/* 8215E16Ch case    1:*/		regs.LR = 0x8215E170; return 0x82091254;
		/* 8215E16Ch case    1:*/		return 0x8215E170;
		  /* 8215E170h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215E170h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215E170h case    2:*/		return 0x8215E174;
		  /* 8215E174h */ case    3:  		/* mr R31, R3 */
		/* 8215E174h case    3:*/		regs.R31 = regs.R3;
		/* 8215E174h case    3:*/		return 0x8215E178;
		  /* 8215E178h */ case    4:  		/* mr R30, R4 */
		/* 8215E178h case    4:*/		regs.R30 = regs.R4;
		/* 8215E178h case    4:*/		return 0x8215E17C;
		  /* 8215E17Ch */ case    5:  		/* mr R29, R5 */
		/* 8215E17Ch case    5:*/		regs.R29 = regs.R5;
		/* 8215E17Ch case    5:*/		return 0x8215E180;
		  /* 8215E180h */ case    6:  		/* mr R28, R6 */
		/* 8215E180h case    6:*/		regs.R28 = regs.R6;
		/* 8215E180h case    6:*/		return 0x8215E184;
		  /* 8215E184h */ case    7:  		/* mr R27, R7 */
		/* 8215E184h case    7:*/		regs.R27 = regs.R7;
		/* 8215E184h case    7:*/		return 0x8215E188;
		  /* 8215E188h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215E188h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E188h case    8:*/		return 0x8215E18C;
		  /* 8215E18Ch */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 8215E18Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215E1B0;  }
		/* 8215E18Ch case    9:*/		return 0x8215E190;
		  /* 8215E190h */ case   10:  		/* lis R11, -32252 */
		/* 8215E190h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E190h case   10:*/		return 0x8215E194;
		  /* 8215E194h */ case   11:  		/* lis R10, -32252 */
		/* 8215E194h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E194h case   11:*/		return 0x8215E198;
		  /* 8215E198h */ case   12:  		/* lis R9, -32253 */
		/* 8215E198h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215E198h case   12:*/		return 0x8215E19C;
		  /* 8215E19Ch */ case   13:  		/* addi R6, R11, -21088 */
		/* 8215E19Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215E19Ch case   13:*/		return 0x8215E1A0;
		  /* 8215E1A0h */ case   14:  		/* addi R5, R10, -22036 */
		/* 8215E1A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215E1A0h case   14:*/		return 0x8215E1A4;
		  /* 8215E1A4h */ case   15:  		/* addi R4, R9, 27460 */
		/* 8215E1A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215E1A4h case   15:*/		return 0x8215E1A8;
		  /* 8215E1A8h */ case   16:  		/* li R7, 1870 */
		/* 8215E1A8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x74E);
		/* 8215E1A8h case   16:*/		return 0x8215E1AC;
		  /* 8215E1ACh */ case   17:  		/* bl -26020 */
		/* 8215E1ACh case   17:*/		regs.LR = 0x8215E1B0; return 0x82157C08;
		/* 8215E1ACh case   17:*/		return 0x8215E1B0;
	}
	return 0x8215E1B0;
} // Block from 8215E168h-8215E1B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215E1B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E1B0);
		  /* 8215E1B0h */ case    0:  		/* mr R7, R27 */
		/* 8215E1B0h case    0:*/		regs.R7 = regs.R27;
		/* 8215E1B0h case    0:*/		return 0x8215E1B4;
		  /* 8215E1B4h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8215E1B4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E1B4h case    1:*/		return 0x8215E1B8;
		  /* 8215E1B8h */ case    2:  		/* mr R6, R28 */
		/* 8215E1B8h case    2:*/		regs.R6 = regs.R28;
		/* 8215E1B8h case    2:*/		return 0x8215E1BC;
		  /* 8215E1BCh */ case    3:  		/* mr R5, R29 */
		/* 8215E1BCh case    3:*/		regs.R5 = regs.R29;
		/* 8215E1BCh case    3:*/		return 0x8215E1C0;
		  /* 8215E1C0h */ case    4:  		/* mr R4, R30 */
		/* 8215E1C0h case    4:*/		regs.R4 = regs.R30;
		/* 8215E1C0h case    4:*/		return 0x8215E1C4;
		  /* 8215E1C4h */ case    5:  		/* bl 1820 */
		/* 8215E1C4h case    5:*/		regs.LR = 0x8215E1C8; return 0x8215E8E0;
		/* 8215E1C4h case    5:*/		return 0x8215E1C8;
		  /* 8215E1C8h */ case    6:  		/* addi R1, R1, 128 */
		/* 8215E1C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215E1C8h case    6:*/		return 0x8215E1CC;
		  /* 8215E1CCh */ case    7:  		/* b -839464 */
		/* 8215E1CCh case    7:*/		return 0x820912A4;
		/* 8215E1CCh case    7:*/		return 0x8215E1D0;
	}
	return 0x8215E1D0;
} // Block from 8215E1B0h-8215E1D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E1D0);
		  /* 8215E1D0h */ case    0:  		/* mfspr R12, LR */
		/* 8215E1D0h case    0:*/		regs.R12 = regs.LR;
		/* 8215E1D0h case    0:*/		return 0x8215E1D4;
		  /* 8215E1D4h */ case    1:  		/* bl -839544 */
		/* 8215E1D4h case    1:*/		regs.LR = 0x8215E1D8; return 0x8209125C;
		/* 8215E1D4h case    1:*/		return 0x8215E1D8;
		  /* 8215E1D8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215E1D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215E1D8h case    2:*/		return 0x8215E1DC;
		  /* 8215E1DCh */ case    3:  		/* mr R31, R3 */
		/* 8215E1DCh case    3:*/		regs.R31 = regs.R3;
		/* 8215E1DCh case    3:*/		return 0x8215E1E0;
		  /* 8215E1E0h */ case    4:  		/* mr R30, R4 */
		/* 8215E1E0h case    4:*/		regs.R30 = regs.R4;
		/* 8215E1E0h case    4:*/		return 0x8215E1E4;
		  /* 8215E1E4h */ case    5:  		/* mr R29, R5 */
		/* 8215E1E4h case    5:*/		regs.R29 = regs.R5;
		/* 8215E1E4h case    5:*/		return 0x8215E1E8;
		  /* 8215E1E8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215E1E8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E1E8h case    6:*/		return 0x8215E1EC;
		  /* 8215E1ECh */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 8215E1ECh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8215E210;  }
		/* 8215E1ECh case    7:*/		return 0x8215E1F0;
		  /* 8215E1F0h */ case    8:  		/* lis R11, -32252 */
		/* 8215E1F0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E1F0h case    8:*/		return 0x8215E1F4;
		  /* 8215E1F4h */ case    9:  		/* lis R10, -32252 */
		/* 8215E1F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E1F4h case    9:*/		return 0x8215E1F8;
		  /* 8215E1F8h */ case   10:  		/* lis R9, -32253 */
		/* 8215E1F8h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215E1F8h case   10:*/		return 0x8215E1FC;
		  /* 8215E1FCh */ case   11:  		/* addi R6, R11, -21088 */
		/* 8215E1FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215E1FCh case   11:*/		return 0x8215E200;
	}
	return 0x8215E200;
} // Block from 8215E1D0h-8215E200h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E200h
// Function '?CS_GetCode@XGRAPHICS@@YAPAU_CP_SHADERPROGRAM_BLOCK@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E200);
		  /* 8215E200h */ case    0:  		/* addi R5, R10, -22036 */
		/* 8215E200h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215E200h case    0:*/		return 0x8215E204;
		  /* 8215E204h */ case    1:  		/* addi R4, R9, 27460 */
		/* 8215E204h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215E204h case    1:*/		return 0x8215E208;
		  /* 8215E208h */ case    2:  		/* li R7, 1903 */
		/* 8215E208h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x76F);
		/* 8215E208h case    2:*/		return 0x8215E20C;
		  /* 8215E20Ch */ case    3:  		/* bl -26116 */
		/* 8215E20Ch case    3:*/		regs.LR = 0x8215E210; return 0x82157C08;
		/* 8215E20Ch case    3:*/		return 0x8215E210;
	}
	return 0x8215E210;
} // Block from 8215E200h-8215E210h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215E210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E210);
		  /* 8215E210h */ case    0:  		/* mr R5, R29 */
		/* 8215E210h case    0:*/		regs.R5 = regs.R29;
		/* 8215E210h case    0:*/		return 0x8215E214;
		  /* 8215E214h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8215E214h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E214h case    1:*/		return 0x8215E218;
		  /* 8215E218h */ case    2:  		/* mr R4, R30 */
		/* 8215E218h case    2:*/		regs.R4 = regs.R30;
		/* 8215E218h case    2:*/		return 0x8215E21C;
		  /* 8215E21Ch */ case    3:  		/* bl 1868 */
		/* 8215E21Ch case    3:*/		regs.LR = 0x8215E220; return 0x8215E968;
		/* 8215E21Ch case    3:*/		return 0x8215E220;
		  /* 8215E220h */ case    4:  		/* addi R1, R1, 112 */
		/* 8215E220h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215E220h case    4:*/		return 0x8215E224;
		  /* 8215E224h */ case    5:  		/* b -839544 */
		/* 8215E224h case    5:*/		return 0x820912AC;
		/* 8215E224h case    5:*/		return 0x8215E228;
	}
	return 0x8215E228;
} // Block from 8215E210h-8215E228h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215E228h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E228);
		  /* 8215E228h */ case    0:  		/* mfspr R12, LR */
		/* 8215E228h case    0:*/		regs.R12 = regs.LR;
		/* 8215E228h case    0:*/		return 0x8215E22C;
		  /* 8215E22Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215E22Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E22Ch case    1:*/		return 0x8215E230;
		  /* 8215E230h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215E230h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E230h case    2:*/		return 0x8215E234;
		  /* 8215E234h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215E234h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215E234h case    3:*/		return 0x8215E238;
		  /* 8215E238h */ case    4:  		/* mr R31, R3 */
		/* 8215E238h case    4:*/		regs.R31 = regs.R3;
		/* 8215E238h case    4:*/		return 0x8215E23C;
		  /* 8215E23Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215E23Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E23Ch case    5:*/		return 0x8215E240;
		  /* 8215E240h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8215E240h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215E264;  }
		/* 8215E240h case    6:*/		return 0x8215E244;
		  /* 8215E244h */ case    7:  		/* lis R11, -32252 */
		/* 8215E244h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E244h case    7:*/		return 0x8215E248;
		  /* 8215E248h */ case    8:  		/* lis R10, -32252 */
		/* 8215E248h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E248h case    8:*/		return 0x8215E24C;
		  /* 8215E24Ch */ case    9:  		/* lis R9, -32253 */
		/* 8215E24Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215E24Ch case    9:*/		return 0x8215E250;
		  /* 8215E250h */ case   10:  		/* addi R6, R11, -21088 */
		/* 8215E250h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFADA0);
		/* 8215E250h case   10:*/		return 0x8215E254;
		  /* 8215E254h */ case   11:  		/* addi R5, R10, -22036 */
		/* 8215E254h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFA9EC);
		/* 8215E254h case   11:*/		return 0x8215E258;
	}
	return 0x8215E258;
} // Block from 8215E228h-8215E258h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E258h
// Function '?AS_GetArrayStateI@XGRAPHICS@@YAIPAU_ABSTRACT_STATE@1@W4_E_AS_ARRAY_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E258);
		  /* 8215E258h */ case    0:  		/* addi R4, R9, 27460 */
		/* 8215E258h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215E258h case    0:*/		return 0x8215E25C;
		  /* 8215E25Ch */ case    1:  		/* li R7, 1962 */
		/* 8215E25Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x7AA);
		/* 8215E25Ch case    1:*/		return 0x8215E260;
		  /* 8215E260h */ case    2:  		/* bl -26200 */
		/* 8215E260h case    2:*/		regs.LR = 0x8215E264; return 0x82157C08;
		/* 8215E260h case    2:*/		return 0x8215E264;
	}
	return 0x8215E264;
} // Block from 8215E258h-8215E264h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215E264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E264);
		  /* 8215E264h */ case    0:  		/* lwz R3, <#[R31 + 52]> */
		/* 8215E264h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8215E264h case    0:*/		return 0x8215E268;
		  /* 8215E268h */ case    1:  		/* addi R1, R1, 96 */
		/* 8215E268h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215E268h case    1:*/		return 0x8215E26C;
		  /* 8215E26Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215E26Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E26Ch case    2:*/		return 0x8215E270;
		  /* 8215E270h */ case    3:  		/* mtspr LR, R12 */
		/* 8215E270h case    3:*/		regs.LR = regs.R12;
		/* 8215E270h case    3:*/		return 0x8215E274;
		  /* 8215E274h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215E274h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E274h case    4:*/		return 0x8215E278;
		  /* 8215E278h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215E278h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E278h case    5:*/		return 0x8215E27C;
	}
	return 0x8215E27C;
} // Block from 8215E264h-8215E27Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215E27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E27C);
		  /* 8215E27Ch */ case    0:  		/* nop */
		/* 8215E27Ch case    0:*/		cpu::op::nop();
		/* 8215E27Ch case    0:*/		return 0x8215E280;
	}
	return 0x8215E280;
} // Block from 8215E27Ch-8215E280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E280);
		  /* 8215E280h */ case    0:  		/* mfspr R12, LR */
		/* 8215E280h case    0:*/		regs.R12 = regs.LR;
		/* 8215E280h case    0:*/		return 0x8215E284;
		  /* 8215E284h */ case    1:  		/* bl -839720 */
		/* 8215E284h case    1:*/		regs.LR = 0x8215E288; return 0x8209125C;
		/* 8215E284h case    1:*/		return 0x8215E288;
		  /* 8215E288h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215E288h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215E288h case    2:*/		return 0x8215E28C;
		  /* 8215E28Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215E28Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215E28Ch case    3:*/		return 0x8215E290;
		  /* 8215E290h */ case    4:  		/* lis R10, -32252 */
		/* 8215E290h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E290h case    4:*/		return 0x8215E294;
		  /* 8215E294h */ case    5:  		/* mr R31, R3 */
		/* 8215E294h case    5:*/		regs.R31 = regs.R3;
		/* 8215E294h case    5:*/		return 0x8215E298;
		  /* 8215E298h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215E298h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E298h case    6:*/		return 0x8215E29C;
		  /* 8215E29Ch */ case    7:  		/* addi R30, R11, 27460 */
		/* 8215E29Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215E29Ch case    7:*/		return 0x8215E2A0;
		  /* 8215E2A0h */ case    8:  		/* addi R29, R10, -21088 */
		/* 8215E2A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFADA0);
		/* 8215E2A0h case    8:*/		return 0x8215E2A4;
		  /* 8215E2A4h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E2A4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215E2C4;  }
		/* 8215E2A4h case    9:*/		return 0x8215E2A8;
		  /* 8215E2A8h */ case   10:  		/* lis R11, -32252 */
		/* 8215E2A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E2A8h case   10:*/		return 0x8215E2AC;
		  /* 8215E2ACh */ case   11:  		/* mr R6, R29 */
		/* 8215E2ACh case   11:*/		regs.R6 = regs.R29;
		/* 8215E2ACh case   11:*/		return 0x8215E2B0;
		  /* 8215E2B0h */ case   12:  		/* addi R5, R11, -22036 */
		/* 8215E2B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215E2B0h case   12:*/		return 0x8215E2B4;
		  /* 8215E2B4h */ case   13:  		/* mr R4, R30 */
		/* 8215E2B4h case   13:*/		regs.R4 = regs.R30;
		/* 8215E2B4h case   13:*/		return 0x8215E2B8;
		  /* 8215E2B8h */ case   14:  		/* li R7, 2014 */
		/* 8215E2B8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x7DE);
		/* 8215E2B8h case   14:*/		return 0x8215E2BC;
		  /* 8215E2BCh */ case   15:  		/* li R3, 0 */
		/* 8215E2BCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E2BCh case   15:*/		return 0x8215E2C0;
		  /* 8215E2C0h */ case   16:  		/* bl -26296 */
		/* 8215E2C0h case   16:*/		regs.LR = 0x8215E2C4; return 0x82157C08;
		/* 8215E2C0h case   16:*/		return 0x8215E2C4;
	}
	return 0x8215E2C4;
} // Block from 8215E280h-8215E2C4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215E2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E2C4);
		  /* 8215E2C4h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 8215E2C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E2C4h case    0:*/		return 0x8215E2C8;
		  /* 8215E2C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E2C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E2C8h case    1:*/		return 0x8215E2CC;
		  /* 8215E2CCh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E2CCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215E2EC;  }
		/* 8215E2CCh case    2:*/		return 0x8215E2D0;
		  /* 8215E2D0h */ case    3:  		/* lis R11, -32252 */
		/* 8215E2D0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E2D0h case    3:*/		return 0x8215E2D4;
		  /* 8215E2D4h */ case    4:  		/* mr R6, R29 */
		/* 8215E2D4h case    4:*/		regs.R6 = regs.R29;
		/* 8215E2D4h case    4:*/		return 0x8215E2D8;
		  /* 8215E2D8h */ case    5:  		/* addi R5, R11, -20156 */
		/* 8215E2D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB144);
		/* 8215E2D8h case    5:*/		return 0x8215E2DC;
		  /* 8215E2DCh */ case    6:  		/* mr R4, R30 */
		/* 8215E2DCh case    6:*/		regs.R4 = regs.R30;
		/* 8215E2DCh case    6:*/		return 0x8215E2E0;
		  /* 8215E2E0h */ case    7:  		/* li R7, 2018 */
		/* 8215E2E0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x7E2);
		/* 8215E2E0h case    7:*/		return 0x8215E2E4;
		  /* 8215E2E4h */ case    8:  		/* li R3, 0 */
		/* 8215E2E4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E2E4h case    8:*/		return 0x8215E2E8;
		  /* 8215E2E8h */ case    9:  		/* bl -26336 */
		/* 8215E2E8h case    9:*/		regs.LR = 0x8215E2EC; return 0x82157C08;
		/* 8215E2E8h case    9:*/		return 0x8215E2EC;
	}
	return 0x8215E2EC;
} // Block from 8215E2C4h-8215E2ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E2EC);
		  /* 8215E2ECh */ case    0:  		/* addi R4, R31, 52 */
		/* 8215E2ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x34);
		/* 8215E2ECh case    0:*/		return 0x8215E2F0;
		  /* 8215E2F0h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8215E2F0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E2F0h case    1:*/		return 0x8215E2F4;
		  /* 8215E2F4h */ case    2:  		/* bl 1692 */
		/* 8215E2F4h case    2:*/		regs.LR = 0x8215E2F8; return 0x8215E990;
		/* 8215E2F4h case    2:*/		return 0x8215E2F8;
		  /* 8215E2F8h */ case    3:  		/* li R11, 0 */
		/* 8215E2F8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215E2F8h case    3:*/		return 0x8215E2FC;
		  /* 8215E2FCh */ case    4:  		/* stw R11, <#[R31 + 48]> */
		/* 8215E2FCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8215E2FCh case    4:*/		return 0x8215E300;
		  /* 8215E300h */ case    5:  		/* addi R1, R1, 112 */
		/* 8215E300h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215E300h case    5:*/		return 0x8215E304;
		  /* 8215E304h */ case    6:  		/* b -839768 */
		/* 8215E304h case    6:*/		return 0x820912AC;
		/* 8215E304h case    6:*/		return 0x8215E308;
	}
	return 0x8215E308;
} // Block from 8215E2ECh-8215E308h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215E308h
// Function '?CS_GetInterpUsage@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@IPAU_CS_INTERP_USAGE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E308);
		  /* 8215E308h */ case    0:  		/* mfspr R12, LR */
		/* 8215E308h case    0:*/		regs.R12 = regs.LR;
		/* 8215E308h case    0:*/		return 0x8215E30C;
		  /* 8215E30Ch */ case    1:  		/* bl -839896 */
		/* 8215E30Ch case    1:*/		regs.LR = 0x8215E310; return 0x82091234;
		/* 8215E30Ch case    1:*/		return 0x8215E310;
		  /* 8215E310h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8215E310h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8215E310h case    2:*/		return 0x8215E314;
		  /* 8215E314h */ case    3:  		/* mr R28, R10 */
		/* 8215E314h case    3:*/		regs.R28 = regs.R10;
		/* 8215E314h case    3:*/		return 0x8215E318;
		  /* 8215E318h */ case    4:  		/* lis R11, -32253 */
		/* 8215E318h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215E318h case    4:*/		return 0x8215E31C;
		  /* 8215E31Ch */ case    5:  		/* lis R10, -32252 */
		/* 8215E31Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E31Ch case    5:*/		return 0x8215E320;
		  /* 8215E320h */ case    6:  		/* mr R31, R3 */
		/* 8215E320h case    6:*/		regs.R31 = regs.R3;
		/* 8215E320h case    6:*/		return 0x8215E324;
		  /* 8215E324h */ case    7:  		/* mr R30, R4 */
		/* 8215E324h case    7:*/		regs.R30 = regs.R4;
		/* 8215E324h case    7:*/		return 0x8215E328;
		  /* 8215E328h */ case    8:  		/* mr R24, R5 */
		/* 8215E328h case    8:*/		regs.R24 = regs.R5;
		/* 8215E328h case    8:*/		return 0x8215E32C;
		  /* 8215E32Ch */ case    9:  		/* mr R22, R6 */
		/* 8215E32Ch case    9:*/		regs.R22 = regs.R6;
		/* 8215E32Ch case    9:*/		return 0x8215E330;
		  /* 8215E330h */ case   10:  		/* mr R21, R7 */
		/* 8215E330h case   10:*/		regs.R21 = regs.R7;
		/* 8215E330h case   10:*/		return 0x8215E334;
		  /* 8215E334h */ case   11:  		/* mr R29, R8 */
		/* 8215E334h case   11:*/		regs.R29 = regs.R8;
		/* 8215E334h case   11:*/		return 0x8215E338;
		  /* 8215E338h */ case   12:  		/* mr R26, R9 */
		/* 8215E338h case   12:*/		regs.R26 = regs.R9;
		/* 8215E338h case   12:*/		return 0x8215E33C;
		  /* 8215E33Ch */ case   13:  		/* li R25, 0 */
		/* 8215E33Ch case   13:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8215E33Ch case   13:*/		return 0x8215E340;
		  /* 8215E340h */ case   14:  		/* cmplwi CR6, R3, 0 */
		/* 8215E340h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E340h case   14:*/		return 0x8215E344;
		  /* 8215E344h */ case   15:  		/* addi R20, R11, 27460 */
		/* 8215E344h case   15:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0x6B44);
		/* 8215E344h case   15:*/		return 0x8215E348;
		  /* 8215E348h */ case   16:  		/* addi R19, R10, -21088 */
		/* 8215E348h case   16:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0xFFFFADA0);
		/* 8215E348h case   16:*/		return 0x8215E34C;
		  /* 8215E34Ch */ case   17:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E34Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x8215E36C;  }
		/* 8215E34Ch case   17:*/		return 0x8215E350;
		  /* 8215E350h */ case   18:  		/* lis R11, -32252 */
		/* 8215E350h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E350h case   18:*/		return 0x8215E354;
		  /* 8215E354h */ case   19:  		/* mr R6, R19 */
		/* 8215E354h case   19:*/		regs.R6 = regs.R19;
		/* 8215E354h case   19:*/		return 0x8215E358;
		  /* 8215E358h */ case   20:  		/* addi R5, R11, -22036 */
		/* 8215E358h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215E358h case   20:*/		return 0x8215E35C;
		  /* 8215E35Ch */ case   21:  		/* mr R4, R20 */
		/* 8215E35Ch case   21:*/		regs.R4 = regs.R20;
		/* 8215E35Ch case   21:*/		return 0x8215E360;
		  /* 8215E360h */ case   22:  		/* li R7, 657 */
		/* 8215E360h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x291);
		/* 8215E360h case   22:*/		return 0x8215E364;
		  /* 8215E364h */ case   23:  		/* li R3, 0 */
		/* 8215E364h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E364h case   23:*/		return 0x8215E368;
		  /* 8215E368h */ case   24:  		/* bl -26464 */
		/* 8215E368h case   24:*/		regs.LR = 0x8215E36C; return 0x82157C08;
		/* 8215E368h case   24:*/		return 0x8215E36C;
	}
	return 0x8215E36C;
} // Block from 8215E308h-8215E36Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8215E36Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E36C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E36C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E36C);
		  /* 8215E36Ch */ case    0:  		/* cmplwi CR6, R30, 16 */
		/* 8215E36Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 8215E36Ch case    0:*/		return 0x8215E370;
		  /* 8215E370h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8215E370h case    1:*/		if ( regs.CR[6].lt ) { return 0x8215E390;  }
		/* 8215E370h case    1:*/		return 0x8215E374;
		  /* 8215E374h */ case    2:  		/* lis R11, -32252 */
		/* 8215E374h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E374h case    2:*/		return 0x8215E378;
		  /* 8215E378h */ case    3:  		/* mr R6, R19 */
		/* 8215E378h case    3:*/		regs.R6 = regs.R19;
		/* 8215E378h case    3:*/		return 0x8215E37C;
		  /* 8215E37Ch */ case    4:  		/* addi R5, R11, -20648 */
		/* 8215E37Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF58);
		/* 8215E37Ch case    4:*/		return 0x8215E380;
		  /* 8215E380h */ case    5:  		/* mr R4, R20 */
		/* 8215E380h case    5:*/		regs.R4 = regs.R20;
		/* 8215E380h case    5:*/		return 0x8215E384;
		  /* 8215E384h */ case    6:  		/* li R7, 658 */
		/* 8215E384h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x292);
		/* 8215E384h case    6:*/		return 0x8215E388;
		  /* 8215E388h */ case    7:  		/* li R3, 0 */
		/* 8215E388h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E388h case    7:*/		return 0x8215E38C;
		  /* 8215E38Ch */ case    8:  		/* bl -26500 */
		/* 8215E38Ch case    8:*/		regs.LR = 0x8215E390; return 0x82157C08;
		/* 8215E38Ch case    8:*/		return 0x8215E390;
	}
	return 0x8215E390;
} // Block from 8215E36Ch-8215E390h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E390);
		  /* 8215E390h */ case    0:  		/* mulli R11, R30, 148 */
		/* 8215E390h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x94);
		/* 8215E390h case    0:*/		return 0x8215E394;
		  /* 8215E394h */ case    1:  		/* lwz R8, <#[R1 + 276]> */
		/* 8215E394h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000114) );
		/* 8215E394h case    1:*/		return 0x8215E398;
		  /* 8215E398h */ case    2:  		/* lwz R3, <#[R1 + 284]> */
		/* 8215E398h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000011C) );
		/* 8215E398h case    2:*/		return 0x8215E39C;
		  /* 8215E39Ch */ case    3:  		/* add R27, R11, R31 */
		/* 8215E39Ch case    3:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R31);
		/* 8215E39Ch case    3:*/		return 0x8215E3A0;
		  /* 8215E3A0h */ case    4:  		/* li R11, 4 */
		/* 8215E3A0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8215E3A0h case    4:*/		return 0x8215E3A4;
		  /* 8215E3A4h */ case    5:  		/* li R23, 1 */
		/* 8215E3A4h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8215E3A4h case    5:*/		return 0x8215E3A8;
		  /* 8215E3A8h */ case    6:  		/* mulli R10, R30, 37 */
		/* 8215E3A8h case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R30,0x25);
		/* 8215E3A8h case    6:*/		return 0x8215E3AC;
		  /* 8215E3ACh */ case    7:  		/* stw R23, <#[R27 + 60]> */
		/* 8215E3ACh case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x0000003C) );
		/* 8215E3ACh case    7:*/		return 0x8215E3B0;
		  /* 8215E3B0h */ case    8:  		/* mtspr CTR, R11 */
		/* 8215E3B0h case    8:*/		regs.CTR = regs.R11;
		/* 8215E3B0h case    8:*/		return 0x8215E3B4;
		  /* 8215E3B4h */ case    9:  		/* stw R29, <#[R27 + 192]> */
		/* 8215E3B4h case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R27 + 0x000000C0) );
		/* 8215E3B4h case    9:*/		return 0x8215E3B8;
		  /* 8215E3B8h */ case   10:  		/* li R11, 0 */
		/* 8215E3B8h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215E3B8h case   10:*/		return 0x8215E3BC;
		  /* 8215E3BCh */ case   11:  		/* addi R6, R10, 36 */
		/* 8215E3BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x24);
		/* 8215E3BCh case   11:*/		return 0x8215E3C0;
	}
	return 0x8215E3C0;
} // Block from 8215E390h-8215E3C0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E3C0h
// Function '?CS_GetPatchDescriptionList@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E3C0);
		  /* 8215E3C0h */ case    0:  		/* mr R9, R8 */
		/* 8215E3C0h case    0:*/		regs.R9 = regs.R8;
		/* 8215E3C0h case    0:*/		return 0x8215E3C4;
		  /* 8215E3C4h */ case    1:  		/* subf R5, R8, R28 */
		/* 8215E3C4h case    1:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R8,regs.R28);
		/* 8215E3C4h case    1:*/		return 0x8215E3C8;
		  /* 8215E3C8h */ case    2:  		/* subf R4, R8, R3 */
		/* 8215E3C8h case    2:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R8,regs.R3);
		/* 8215E3C8h case    2:*/		return 0x8215E3CC;
		  /* 8215E3CCh */ case    3:  		/* add R7, R10, R11 */
		/* 8215E3CCh case    3:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8215E3CCh case    3:*/		return 0x8215E3D0;
		  /* 8215E3D0h */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 8215E3D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215E3D0h case    4:*/		return 0x8215E3D4;
		  /* 8215E3D4h */ case    5:  		/* addi R7, R7, 24 */
		/* 8215E3D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x18);
		/* 8215E3D4h case    5:*/		return 0x8215E3D8;
		  /* 8215E3D8h */ case    6:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8215E3D8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8215E3D8h case    6:*/		return 0x8215E3DC;
		  /* 8215E3DCh */ case    7:  		/* stwx R26, <#[R7 + R31]> */
		/* 8215E3DCh case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E3DCh case    7:*/		return 0x8215E3E0;
		  /* 8215E3E0h */ case    8:  		/* add R7, R10, R11 */
		/* 8215E3E0h case    8:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8215E3E0h case    8:*/		return 0x8215E3E4;
		  /* 8215E3E4h */ case    9:  		/* addi R7, R7, 28 */
		/* 8215E3E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1C);
		/* 8215E3E4h case    9:*/		return 0x8215E3E8;
		  /* 8215E3E8h */ case   10:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8215E3E8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8215E3E8h case   10:*/		return 0x8215E3EC;
		  /* 8215E3ECh */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 8215E3ECh case   11:*/		if ( regs.CR[6].eq ) { return 0x8215E3FC;  }
		/* 8215E3ECh case   11:*/		return 0x8215E3F0;
		  /* 8215E3F0h */ case   12:  		/* lwzx R30, <#[R5 + R9]> */
		/* 8215E3F0h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 8215E3F0h case   12:*/		return 0x8215E3F4;
		  /* 8215E3F4h */ case   13:  		/* stwx R30, <#[R7 + R31]> */
		/* 8215E3F4h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E3F4h case   13:*/		return 0x8215E3F8;
		  /* 8215E3F8h */ case   14:  		/* b 8 */
		/* 8215E3F8h case   14:*/		return 0x8215E400;
		/* 8215E3F8h case   14:*/		return 0x8215E3FC;
	}
	return 0x8215E3FC;
} // Block from 8215E3C0h-8215E3FCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215E3FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E3FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E3FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E3FC);
		  /* 8215E3FCh */ case    0:  		/* stwx R24, <#[R7 + R31]> */
		/* 8215E3FCh case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E3FCh case    0:*/		return 0x8215E400;
	}
	return 0x8215E400;
} // Block from 8215E3FCh-8215E400h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E400);
		  /* 8215E400h */ case    0:  		/* add R7, R10, R11 */
		/* 8215E400h case    0:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8215E400h case    0:*/		return 0x8215E404;
		  /* 8215E404h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 8215E404h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8215E404h case    1:*/		return 0x8215E408;
		  /* 8215E408h */ case    2:  		/* addi R7, R7, 32 */
		/* 8215E408h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x20);
		/* 8215E408h case    2:*/		return 0x8215E40C;
		  /* 8215E40Ch */ case    3:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8215E40Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8215E40Ch case    3:*/		return 0x8215E410;
		  /* 8215E410h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8215E410h case    4:*/		if ( regs.CR[6].eq ) { return 0x8215E41C;  }
		/* 8215E410h case    4:*/		return 0x8215E414;
		  /* 8215E414h */ case    5:  		/* lwz R30, <#[R9]> */
		/* 8215E414h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + 0x00000000) );
		/* 8215E414h case    5:*/		return 0x8215E418;
	}
	return 0x8215E418;
} // Block from 8215E400h-8215E418h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215E418h
// Function '?CS_SetR400State@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@W4_E_R400_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E418);
		  /* 8215E418h */ case    0:  		/* b 8 */
		/* 8215E418h case    0:*/		return 0x8215E420;
		/* 8215E418h case    0:*/		return 0x8215E41C;
	}
	return 0x8215E41C;
} // Block from 8215E418h-8215E41Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E41C);
		  /* 8215E41Ch */ case    0:  		/* li R30, 0 */
		/* 8215E41Ch case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215E41Ch case    0:*/		return 0x8215E420;
	}
	return 0x8215E420;
} // Block from 8215E41Ch-8215E420h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E420);
		  /* 8215E420h */ case    0:  		/* stwx R30, <#[R7 + R31]> */
		/* 8215E420h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E420h case    0:*/		return 0x8215E424;
		  /* 8215E424h */ case    1:  		/* add R7, R6, R11 */
		/* 8215E424h case    1:*/		cpu::op::add<0>(regs,&regs.R7,regs.R6,regs.R11);
		/* 8215E424h case    1:*/		return 0x8215E428;
		  /* 8215E428h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8215E428h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E428h case    2:*/		return 0x8215E42C;
		  /* 8215E42Ch */ case    3:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8215E42Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8215E42Ch case    3:*/		return 0x8215E430;
		  /* 8215E430h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8215E430h case    4:*/		if ( regs.CR[6].eq ) { return 0x8215E440;  }
		/* 8215E430h case    4:*/		return 0x8215E434;
		  /* 8215E434h */ case    5:  		/* lwzx R30, <#[R4 + R9]> */
		/* 8215E434h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + regs.R9 + 0x00000000) );
		/* 8215E434h case    5:*/		return 0x8215E438;
		  /* 8215E438h */ case    6:  		/* stwx R30, <#[R7 + R31]> */
		/* 8215E438h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E438h case    6:*/		return 0x8215E43C;
		  /* 8215E43Ch */ case    7:  		/* b 8 */
		/* 8215E43Ch case    7:*/		return 0x8215E444;
		/* 8215E43Ch case    7:*/		return 0x8215E440;
	}
	return 0x8215E440;
} // Block from 8215E420h-8215E440h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E440);
		  /* 8215E440h */ case    0:  		/* stwx R23, <#[R7 + R31]> */
		/* 8215E440h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E440h case    0:*/		return 0x8215E444;
	}
	return 0x8215E444;
} // Block from 8215E440h-8215E444h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E444);
		  /* 8215E444h */ case    0:  		/* addi R11, R11, 1 */
		/* 8215E444h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215E444h case    0:*/		return 0x8215E448;
		  /* 8215E448h */ case    1:  		/* addi R9, R9, 4 */
		/* 8215E448h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8215E448h case    1:*/		return 0x8215E44C;
		  /* 8215E44Ch */ case    2:  		/* bc 16, CR0_LT, -128 */
		/* 8215E44Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215E3CC;  }
		/* 8215E44Ch case    2:*/		return 0x8215E450;
		  /* 8215E450h */ case    3:  		/* li R11, 0 */
		/* 8215E450h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215E450h case    3:*/		return 0x8215E454;
		  /* 8215E454h */ case    4:  		/* addi R6, R10, 44 */
		/* 8215E454h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x2C);
		/* 8215E454h case    4:*/		return 0x8215E458;
		  /* 8215E458h */ case    5:  		/* add R7, R10, R11 */
		/* 8215E458h case    5:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8215E458h case    5:*/		return 0x8215E45C;
		  /* 8215E45Ch */ case    6:  		/* add R8, R10, R11 */
		/* 8215E45Ch case    6:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 8215E45Ch case    6:*/		return 0x8215E460;
		  /* 8215E460h */ case    7:  		/* add R9, R10, R11 */
		/* 8215E460h case    7:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8215E460h case    7:*/		return 0x8215E464;
		  /* 8215E464h */ case    8:  		/* addi R7, R7, 16 */
		/* 8215E464h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x10);
		/* 8215E464h case    8:*/		return 0x8215E468;
		  /* 8215E468h */ case    9:  		/* addi R8, R8, 20 */
		/* 8215E468h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x14);
		/* 8215E468h case    9:*/		return 0x8215E46C;
		  /* 8215E46Ch */ case   10:  		/* addi R9, R9, 40 */
		/* 8215E46Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x28);
		/* 8215E46Ch case   10:*/		return 0x8215E470;
		  /* 8215E470h */ case   11:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8215E470h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8215E470h case   11:*/		return 0x8215E474;
		  /* 8215E474h */ case   12:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8215E474h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8215E474h case   12:*/		return 0x8215E478;
		  /* 8215E478h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8215E478h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8215E478h case   13:*/		return 0x8215E47C;
		  /* 8215E47Ch */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 8215E47Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8215E47Ch case   14:*/		return 0x8215E480;
		  /* 8215E480h */ case   15:  		/* stwx R24, <#[R7 + R31]> */
		/* 8215E480h case   15:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 8215E480h case   15:*/		return 0x8215E484;
		  /* 8215E484h */ case   16:  		/* stwx R22, <#[R8 + R31]> */
		/* 8215E484h case   16:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 8215E484h case   16:*/		return 0x8215E488;
		  /* 8215E488h */ case   17:  		/* stwx R11, <#[R9 + R31]> */
		/* 8215E488h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 8215E488h case   17:*/		return 0x8215E48C;
		  /* 8215E48Ch */ case   18:  		/* bc 12, CR6_LT, 56 */
		/* 8215E48Ch case   18:*/		if ( regs.CR[6].lt ) { return 0x8215E4C4;  }
		/* 8215E48Ch case   18:*/		return 0x8215E490;
		  /* 8215E490h */ case   19:  		/* bc 12, CR6_EQ, 44 */
		/* 8215E490h case   19:*/		if ( regs.CR[6].eq ) { return 0x8215E4BC;  }
		/* 8215E490h case   19:*/		return 0x8215E494;
		  /* 8215E494h */ case   20:  		/* cmplwi CR6, R11, 3 */
		/* 8215E494h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8215E494h case   20:*/		return 0x8215E498;
		  /* 8215E498h */ case   21:  		/* bc 12, CR6_LT, 28 */
		/* 8215E498h case   21:*/		if ( regs.CR[6].lt ) { return 0x8215E4B4;  }
		/* 8215E498h case   21:*/		return 0x8215E49C;
		  /* 8215E49Ch */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 8215E49Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x8215E4AC;  }
		/* 8215E49Ch case   22:*/		return 0x8215E4A0;
		  /* 8215E4A0h */ case   23:  		/* cmplwi CR6, R11, 5 */
		/* 8215E4A0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 8215E4A0h case   23:*/		return 0x8215E4A4;
		  /* 8215E4A4h */ case   24:  		/* bc 12, CR6_LT, 64 */
		/* 8215E4A4h case   24:*/		if ( regs.CR[6].lt ) { return 0x8215E4E4;  }
		/* 8215E4A4h case   24:*/		return 0x8215E4A8;
		  /* 8215E4A8h */ case   25:  		/* b 32 */
		/* 8215E4A8h case   25:*/		return 0x8215E4C8;
		/* 8215E4A8h case   25:*/		return 0x8215E4AC;
	}
	return 0x8215E4AC;
} // Block from 8215E444h-8215E4ACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4AC);
		  /* 8215E4ACh */ case    0:  		/* rlwinm R25, R21, 0, 24, 31 */
		/* 8215E4ACh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R25,regs.R21);
		/* 8215E4ACh case    0:*/		return 0x8215E4B0;
		  /* 8215E4B0h */ case    1:  		/* b 24 */
		/* 8215E4B0h case    1:*/		return 0x8215E4C8;
		/* 8215E4B0h case    1:*/		return 0x8215E4B4;
	}
	return 0x8215E4B4;
} // Block from 8215E4ACh-8215E4B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4B4);
		  /* 8215E4B4h */ case    0:  		/* rlwinm R25, R21, 24, 24, 31 */
		/* 8215E4B4h case    0:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R25,regs.R21);
		/* 8215E4B4h case    0:*/		return 0x8215E4B8;
		  /* 8215E4B8h */ case    1:  		/* b 16 */
		/* 8215E4B8h case    1:*/		return 0x8215E4C8;
		/* 8215E4B8h case    1:*/		return 0x8215E4BC;
	}
	return 0x8215E4BC;
} // Block from 8215E4B4h-8215E4BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4BC);
		  /* 8215E4BCh */ case    0:  		/* rlwinm R25, R21, 16, 24, 31 */
		/* 8215E4BCh case    0:*/		cpu::op::rlwinm<0,16,24,31>(regs,&regs.R25,regs.R21);
		/* 8215E4BCh case    0:*/		return 0x8215E4C0;
		  /* 8215E4C0h */ case    1:  		/* b 8 */
		/* 8215E4C0h case    1:*/		return 0x8215E4C8;
		/* 8215E4C0h case    1:*/		return 0x8215E4C4;
	}
	return 0x8215E4C4;
} // Block from 8215E4BCh-8215E4C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4C4);
		  /* 8215E4C4h */ case    0:  		/* rlwinm R25, R21, 8, 24, 31 */
		/* 8215E4C4h case    0:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R25,regs.R21);
		/* 8215E4C4h case    0:*/		return 0x8215E4C8;
	}
	return 0x8215E4C8;
} // Block from 8215E4C4h-8215E4C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4C8);
		  /* 8215E4C8h */ case    0:  		/* cmplwi CR6, R25, 2 */
		/* 8215E4C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000002);
		/* 8215E4C8h case    0:*/		return 0x8215E4CC;
		  /* 8215E4CCh */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8215E4CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215E4D8;  }
		/* 8215E4CCh case    1:*/		return 0x8215E4D0;
		  /* 8215E4D0h */ case    2:  		/* mr R25, R23 */
		/* 8215E4D0h case    2:*/		regs.R25 = regs.R23;
		/* 8215E4D0h case    2:*/		return 0x8215E4D4;
		  /* 8215E4D4h */ case    3:  		/* b 20 */
		/* 8215E4D4h case    3:*/		return 0x8215E4E8;
		/* 8215E4D4h case    3:*/		return 0x8215E4D8;
	}
	return 0x8215E4D8;
} // Block from 8215E4C8h-8215E4D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4D8);
		  /* 8215E4D8h */ case    0:  		/* cmplwi CR6, R25, 4 */
		/* 8215E4D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 8215E4D8h case    0:*/		return 0x8215E4DC;
		  /* 8215E4DCh */ case    1:  		/* li R25, 2 */
		/* 8215E4DCh case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 8215E4DCh case    1:*/		return 0x8215E4E0;
		  /* 8215E4E0h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8215E4E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E4E8;  }
		/* 8215E4E0h case    2:*/		return 0x8215E4E4;
	}
	return 0x8215E4E4;
} // Block from 8215E4D8h-8215E4E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4E4);
		  /* 8215E4E4h */ case    0:  		/* li R25, 0 */
		/* 8215E4E4h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8215E4E4h case    0:*/		return 0x8215E4E8;
	}
	return 0x8215E4E8;
} // Block from 8215E4E4h-8215E4E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E4E8);
		  /* 8215E4E8h */ case    0:  		/* add R9, R6, R11 */
		/* 8215E4E8h case    0:*/		cpu::op::add<0>(regs,&regs.R9,regs.R6,regs.R11);
		/* 8215E4E8h case    0:*/		return 0x8215E4EC;
		  /* 8215E4ECh */ case    1:  		/* addi R11, R11, 1 */
		/* 8215E4ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215E4ECh case    1:*/		return 0x8215E4F0;
		  /* 8215E4F0h */ case    2:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8215E4F0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8215E4F0h case    2:*/		return 0x8215E4F4;
		  /* 8215E4F4h */ case    3:  		/* cmpwi CR6, R11, 4 */
		/* 8215E4F4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8215E4F4h case    3:*/		return 0x8215E4F8;
		  /* 8215E4F8h */ case    4:  		/* stwx R25, <#[R9 + R31]> */
		/* 8215E4F8h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 8215E4F8h case    4:*/		return 0x8215E4FC;
		  /* 8215E4FCh */ case    5:  		/* bc 12, CR6_LT, -164 */
		/* 8215E4FCh case    5:*/		if ( regs.CR[6].lt ) { return 0x8215E458;  }
		/* 8215E4FCh case    5:*/		return 0x8215E500;
		  /* 8215E500h */ case    6:  		/* cmpwi CR6, R24, 2 */
		/* 8215E500h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 8215E500h case    6:*/		return 0x8215E504;
		  /* 8215E504h */ case    7:  		/* bc 12, CR6_EQ, 192 */
		/* 8215E504h case    7:*/		if ( regs.CR[6].eq ) { return 0x8215E5C4;  }
		/* 8215E504h case    7:*/		return 0x8215E508;
	}
	return 0x8215E508;
} // Block from 8215E4E8h-8215E508h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E508h
// Function '?GetPatchDescrSize@XGRAPHICS@@YAIPAU_CS_GENERIC_PATCH_DESCRIPTION@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E508);
		  /* 8215E508h */ case    0:  		/* bc 4, CR6_GT, 100 */
		/* 8215E508h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8215E56C;  }
		/* 8215E508h case    0:*/		return 0x8215E50C;
		  /* 8215E50Ch */ case    1:  		/* cmpwi CR6, R24, 4 */
		/* 8215E50Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000004);
		/* 8215E50Ch case    1:*/		return 0x8215E510;
		  /* 8215E510h */ case    2:  		/* bc 12, CR6_GT, 92 */
		/* 8215E510h case    2:*/		if ( regs.CR[6].gt ) { return 0x8215E56C;  }
		/* 8215E510h case    2:*/		return 0x8215E514;
		  /* 8215E514h */ case    3:  		/* lwz R11, <#[R27 + 200]> */
		/* 8215E514h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C8) );
		/* 8215E514h case    3:*/		return 0x8215E518;
		  /* 8215E518h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215E518h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E518h case    4:*/		return 0x8215E51C;
		  /* 8215E51Ch */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E51Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8215E53C;  }
		/* 8215E51Ch case    5:*/		return 0x8215E520;
		  /* 8215E520h */ case    6:  		/* lis R11, -32252 */
		/* 8215E520h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E520h case    6:*/		return 0x8215E524;
		  /* 8215E524h */ case    7:  		/* mr R6, R19 */
		/* 8215E524h case    7:*/		regs.R6 = regs.R19;
		/* 8215E524h case    7:*/		return 0x8215E528;
		  /* 8215E528h */ case    8:  		/* addi R5, R11, -20704 */
		/* 8215E528h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF20);
		/* 8215E528h case    8:*/		return 0x8215E52C;
		  /* 8215E52Ch */ case    9:  		/* mr R4, R20 */
		/* 8215E52Ch case    9:*/		regs.R4 = regs.R20;
		/* 8215E52Ch case    9:*/		return 0x8215E530;
		  /* 8215E530h */ case   10:  		/* li R7, 742 */
		/* 8215E530h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x2E6);
		/* 8215E530h case   10:*/		return 0x8215E534;
		  /* 8215E534h */ case   11:  		/* li R3, 0 */
		/* 8215E534h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E534h case   11:*/		return 0x8215E538;
		  /* 8215E538h */ case   12:  		/* bl -26928 */
		/* 8215E538h case   12:*/		regs.LR = 0x8215E53C; return 0x82157C08;
		/* 8215E538h case   12:*/		return 0x8215E53C;
	}
	return 0x8215E53C;
} // Block from 8215E508h-8215E53Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215E53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E53C);
		  /* 8215E53Ch */ case    0:  		/* lwz R11, <#[R27 + 204]> */
		/* 8215E53Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000CC) );
		/* 8215E53Ch case    0:*/		return 0x8215E540;
		  /* 8215E540h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E540h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E540h case    1:*/		return 0x8215E544;
		  /* 8215E544h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E544h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E564;  }
		/* 8215E544h case    2:*/		return 0x8215E548;
		  /* 8215E548h */ case    3:  		/* lis R11, -32252 */
		/* 8215E548h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E548h case    3:*/		return 0x8215E54C;
		  /* 8215E54Ch */ case    4:  		/* mr R6, R19 */
		/* 8215E54Ch case    4:*/		regs.R6 = regs.R19;
		/* 8215E54Ch case    4:*/		return 0x8215E550;
		  /* 8215E550h */ case    5:  		/* addi R5, R11, -20756 */
		/* 8215E550h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAEEC);
		/* 8215E550h case    5:*/		return 0x8215E554;
		  /* 8215E554h */ case    6:  		/* mr R4, R20 */
		/* 8215E554h case    6:*/		regs.R4 = regs.R20;
		/* 8215E554h case    6:*/		return 0x8215E558;
		  /* 8215E558h */ case    7:  		/* li R7, 743 */
		/* 8215E558h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2E7);
		/* 8215E558h case    7:*/		return 0x8215E55C;
		  /* 8215E55Ch */ case    8:  		/* li R3, 0 */
		/* 8215E55Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E55Ch case    8:*/		return 0x8215E560;
	}
	return 0x8215E560;
} // Block from 8215E53Ch-8215E560h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E560h
// Function '?CS_GetR400StateList@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E560);
		  /* 8215E560h */ case    0:  		/* bl -26968 */
		/* 8215E560h case    0:*/		regs.LR = 0x8215E564; return 0x82157C08;
		/* 8215E560h case    0:*/		return 0x8215E564;
	}
	return 0x8215E564;
} // Block from 8215E560h-8215E564h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E564);
		  /* 8215E564h */ case    0:  		/* stw R23, <#[R27 + 196]> */
		/* 8215E564h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x000000C4) );
		/* 8215E564h case    0:*/		return 0x8215E568;
		  /* 8215E568h */ case    1:  		/* b 176 */
		/* 8215E568h case    1:*/		return 0x8215E618;
		/* 8215E568h case    1:*/		return 0x8215E56C;
	}
	return 0x8215E56C;
} // Block from 8215E564h-8215E56Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E56C);
		  /* 8215E56Ch */ case    0:  		/* lwz R11, <#[R27 + 196]> */
		/* 8215E56Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C4) );
		/* 8215E56Ch case    0:*/		return 0x8215E570;
		  /* 8215E570h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E570h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E570h case    1:*/		return 0x8215E574;
		  /* 8215E574h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E574h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E594;  }
		/* 8215E574h case    2:*/		return 0x8215E578;
		  /* 8215E578h */ case    3:  		/* lis R11, -32252 */
		/* 8215E578h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E578h case    3:*/		return 0x8215E57C;
		  /* 8215E57Ch */ case    4:  		/* mr R6, R19 */
		/* 8215E57Ch case    4:*/		regs.R6 = regs.R19;
		/* 8215E57Ch case    4:*/		return 0x8215E580;
		  /* 8215E580h */ case    5:  		/* addi R5, R11, -20808 */
		/* 8215E580h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAEB8);
		/* 8215E580h case    5:*/		return 0x8215E584;
		  /* 8215E584h */ case    6:  		/* mr R4, R20 */
		/* 8215E584h case    6:*/		regs.R4 = regs.R20;
		/* 8215E584h case    6:*/		return 0x8215E588;
		  /* 8215E588h */ case    7:  		/* li R7, 758 */
		/* 8215E588h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2F6);
		/* 8215E588h case    7:*/		return 0x8215E58C;
		  /* 8215E58Ch */ case    8:  		/* li R3, 0 */
		/* 8215E58Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E58Ch case    8:*/		return 0x8215E590;
		  /* 8215E590h */ case    9:  		/* bl -27016 */
		/* 8215E590h case    9:*/		regs.LR = 0x8215E594; return 0x82157C08;
		/* 8215E590h case    9:*/		return 0x8215E594;
	}
	return 0x8215E594;
} // Block from 8215E56Ch-8215E594h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E594);
		  /* 8215E594h */ case    0:  		/* lwz R11, <#[R27 + 200]> */
		/* 8215E594h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C8) );
		/* 8215E594h case    0:*/		return 0x8215E598;
		  /* 8215E598h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E598h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E598h case    1:*/		return 0x8215E59C;
		  /* 8215E59Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E59Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E5BC;  }
		/* 8215E59Ch case    2:*/		return 0x8215E5A0;
		  /* 8215E5A0h */ case    3:  		/* lis R11, -32252 */
		/* 8215E5A0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E5A0h case    3:*/		return 0x8215E5A4;
		  /* 8215E5A4h */ case    4:  		/* mr R6, R19 */
		/* 8215E5A4h case    4:*/		regs.R6 = regs.R19;
		/* 8215E5A4h case    4:*/		return 0x8215E5A8;
		  /* 8215E5A8h */ case    5:  		/* addi R5, R11, -20704 */
		/* 8215E5A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF20);
		/* 8215E5A8h case    5:*/		return 0x8215E5AC;
		  /* 8215E5ACh */ case    6:  		/* mr R4, R20 */
		/* 8215E5ACh case    6:*/		regs.R4 = regs.R20;
		/* 8215E5ACh case    6:*/		return 0x8215E5B0;
		  /* 8215E5B0h */ case    7:  		/* li R7, 759 */
		/* 8215E5B0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2F7);
		/* 8215E5B0h case    7:*/		return 0x8215E5B4;
		  /* 8215E5B4h */ case    8:  		/* li R3, 0 */
		/* 8215E5B4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E5B4h case    8:*/		return 0x8215E5B8;
	}
	return 0x8215E5B8;
} // Block from 8215E594h-8215E5B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E5B8h
// Function '?CS_SetRequiredRenderState@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@W4E_SSM_COMPILEWITH_QUERY@1@IW4_SSM_COMPILEWITH_RESULT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E5B8);
		  /* 8215E5B8h */ case    0:  		/* bl -27056 */
		/* 8215E5B8h case    0:*/		regs.LR = 0x8215E5BC; return 0x82157C08;
		/* 8215E5B8h case    0:*/		return 0x8215E5BC;
	}
	return 0x8215E5BC;
} // Block from 8215E5B8h-8215E5BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E5BC);
		  /* 8215E5BCh */ case    0:  		/* stw R23, <#[R27 + 204]> */
		/* 8215E5BCh case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x000000CC) );
		/* 8215E5BCh case    0:*/		return 0x8215E5C0;
		  /* 8215E5C0h */ case    1:  		/* b 88 */
		/* 8215E5C0h case    1:*/		return 0x8215E618;
		/* 8215E5C0h case    1:*/		return 0x8215E5C4;
	}
	return 0x8215E5C4;
} // Block from 8215E5BCh-8215E5C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E5C4);
		  /* 8215E5C4h */ case    0:  		/* lwz R11, <#[R27 + 196]> */
		/* 8215E5C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000C4) );
		/* 8215E5C4h case    0:*/		return 0x8215E5C8;
		  /* 8215E5C8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E5C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E5C8h case    1:*/		return 0x8215E5CC;
		  /* 8215E5CCh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E5CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E5EC;  }
		/* 8215E5CCh case    2:*/		return 0x8215E5D0;
		  /* 8215E5D0h */ case    3:  		/* lis R11, -32252 */
		/* 8215E5D0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E5D0h case    3:*/		return 0x8215E5D4;
		  /* 8215E5D4h */ case    4:  		/* mr R6, R19 */
		/* 8215E5D4h case    4:*/		regs.R6 = regs.R19;
		/* 8215E5D4h case    4:*/		return 0x8215E5D8;
		  /* 8215E5D8h */ case    5:  		/* addi R5, R11, -20808 */
		/* 8215E5D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAEB8);
		/* 8215E5D8h case    5:*/		return 0x8215E5DC;
		  /* 8215E5DCh */ case    6:  		/* mr R4, R20 */
		/* 8215E5DCh case    6:*/		regs.R4 = regs.R20;
		/* 8215E5DCh case    6:*/		return 0x8215E5E0;
		  /* 8215E5E0h */ case    7:  		/* li R7, 750 */
		/* 8215E5E0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2EE);
		/* 8215E5E0h case    7:*/		return 0x8215E5E4;
		  /* 8215E5E4h */ case    8:  		/* li R3, 0 */
		/* 8215E5E4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E5E4h case    8:*/		return 0x8215E5E8;
		  /* 8215E5E8h */ case    9:  		/* bl -27104 */
		/* 8215E5E8h case    9:*/		regs.LR = 0x8215E5EC; return 0x82157C08;
		/* 8215E5E8h case    9:*/		return 0x8215E5EC;
	}
	return 0x8215E5EC;
} // Block from 8215E5C4h-8215E5ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E5EC);
		  /* 8215E5ECh */ case    0:  		/* lwz R11, <#[R27 + 204]> */
		/* 8215E5ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000CC) );
		/* 8215E5ECh case    0:*/		return 0x8215E5F0;
		  /* 8215E5F0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215E5F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215E5F0h case    1:*/		return 0x8215E5F4;
		  /* 8215E5F4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215E5F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215E614;  }
		/* 8215E5F4h case    2:*/		return 0x8215E5F8;
		  /* 8215E5F8h */ case    3:  		/* lis R11, -32252 */
		/* 8215E5F8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E5F8h case    3:*/		return 0x8215E5FC;
		  /* 8215E5FCh */ case    4:  		/* mr R6, R19 */
		/* 8215E5FCh case    4:*/		regs.R6 = regs.R19;
		/* 8215E5FCh case    4:*/		return 0x8215E600;
		  /* 8215E600h */ case    5:  		/* addi R5, R11, -20756 */
		/* 8215E600h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAEEC);
		/* 8215E600h case    5:*/		return 0x8215E604;
		  /* 8215E604h */ case    6:  		/* mr R4, R20 */
		/* 8215E604h case    6:*/		regs.R4 = regs.R20;
		/* 8215E604h case    6:*/		return 0x8215E608;
		  /* 8215E608h */ case    7:  		/* li R7, 751 */
		/* 8215E608h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2EF);
		/* 8215E608h case    7:*/		return 0x8215E60C;
		  /* 8215E60Ch */ case    8:  		/* li R3, 0 */
		/* 8215E60Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E60Ch case    8:*/		return 0x8215E610;
		  /* 8215E610h */ case    9:  		/* bl -27144 */
		/* 8215E610h case    9:*/		regs.LR = 0x8215E614; return 0x82157C08;
		/* 8215E610h case    9:*/		return 0x8215E614;
	}
	return 0x8215E614;
} // Block from 8215E5ECh-8215E614h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E614);
		  /* 8215E614h */ case    0:  		/* stw R23, <#[R27 + 200]> */
		/* 8215E614h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R27 + 0x000000C8) );
		/* 8215E614h case    0:*/		return 0x8215E618;
	}
	return 0x8215E618;
} // Block from 8215E614h-8215E618h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E618);
		  /* 8215E618h */ case    0:  		/* addi R1, R1, 192 */
		/* 8215E618h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8215E618h case    0:*/		return 0x8215E61C;
		  /* 8215E61Ch */ case    1:  		/* b -840600 */
		/* 8215E61Ch case    1:*/		return 0x82091284;
		/* 8215E61Ch case    1:*/		return 0x8215E620;
	}
	return 0x8215E620;
} // Block from 8215E618h-8215E620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E620);
		  /* 8215E620h */ case    0:  		/* mfspr R12, LR */
		/* 8215E620h case    0:*/		regs.R12 = regs.LR;
		/* 8215E620h case    0:*/		return 0x8215E624;
		  /* 8215E624h */ case    1:  		/* bl -840656 */
		/* 8215E624h case    1:*/		regs.LR = 0x8215E628; return 0x82091254;
		/* 8215E624h case    1:*/		return 0x8215E628;
		  /* 8215E628h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215E628h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215E628h case    2:*/		return 0x8215E62C;
		  /* 8215E62Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215E62Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215E62Ch case    3:*/		return 0x8215E630;
		  /* 8215E630h */ case    4:  		/* lis R10, -32252 */
		/* 8215E630h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E630h case    4:*/		return 0x8215E634;
		  /* 8215E634h */ case    5:  		/* mr R31, R3 */
		/* 8215E634h case    5:*/		regs.R31 = regs.R3;
		/* 8215E634h case    5:*/		return 0x8215E638;
		  /* 8215E638h */ case    6:  		/* mr R29, R4 */
		/* 8215E638h case    6:*/		regs.R29 = regs.R4;
		/* 8215E638h case    6:*/		return 0x8215E63C;
		  /* 8215E63Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215E63Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E63Ch case    7:*/		return 0x8215E640;
		  /* 8215E640h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8215E640h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215E640h case    8:*/		return 0x8215E644;
		  /* 8215E644h */ case    9:  		/* addi R27, R10, -21088 */
		/* 8215E644h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFADA0);
		/* 8215E644h case    9:*/		return 0x8215E648;
		  /* 8215E648h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E648h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215E668;  }
		/* 8215E648h case   10:*/		return 0x8215E64C;
		  /* 8215E64Ch */ case   11:  		/* lis R11, -32252 */
		/* 8215E64Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E64Ch case   11:*/		return 0x8215E650;
		  /* 8215E650h */ case   12:  		/* mr R6, R27 */
		/* 8215E650h case   12:*/		regs.R6 = regs.R27;
		/* 8215E650h case   12:*/		return 0x8215E654;
		  /* 8215E654h */ case   13:  		/* addi R5, R11, -22036 */
		/* 8215E654h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215E654h case   13:*/		return 0x8215E658;
		  /* 8215E658h */ case   14:  		/* mr R4, R28 */
		/* 8215E658h case   14:*/		regs.R4 = regs.R28;
		/* 8215E658h case   14:*/		return 0x8215E65C;
		  /* 8215E65Ch */ case   15:  		/* li R7, 956 */
		/* 8215E65Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x3BC);
		/* 8215E65Ch case   15:*/		return 0x8215E660;
		  /* 8215E660h */ case   16:  		/* li R3, 0 */
		/* 8215E660h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E660h case   16:*/		return 0x8215E664;
		  /* 8215E664h */ case   17:  		/* bl -27228 */
		/* 8215E664h case   17:*/		regs.LR = 0x8215E668; return 0x82157C08;
		/* 8215E664h case   17:*/		return 0x8215E668;
	}
	return 0x8215E668;
} // Block from 8215E620h-8215E668h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215E668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E668);
		  /* 8215E668h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8215E668h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215E668h case    0:*/		return 0x8215E66C;
		  /* 8215E66Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E66Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215E68C;  }
		/* 8215E66Ch case    1:*/		return 0x8215E670;
	}
	return 0x8215E670;
} // Block from 8215E668h-8215E670h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215E670h
// Function '?CS_SetRequiredArrayState@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@W4_E_AS_ARRAY_STATE@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E670);
		  /* 8215E670h */ case    0:  		/* lis R11, -32252 */
		/* 8215E670h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E670h case    0:*/		return 0x8215E674;
		  /* 8215E674h */ case    1:  		/* mr R6, R27 */
		/* 8215E674h case    1:*/		regs.R6 = regs.R27;
		/* 8215E674h case    1:*/		return 0x8215E678;
		  /* 8215E678h */ case    2:  		/* addi R5, R11, -20532 */
		/* 8215E678h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAFCC);
		/* 8215E678h case    2:*/		return 0x8215E67C;
		  /* 8215E67Ch */ case    3:  		/* mr R4, R28 */
		/* 8215E67Ch case    3:*/		regs.R4 = regs.R28;
		/* 8215E67Ch case    3:*/		return 0x8215E680;
		  /* 8215E680h */ case    4:  		/* li R7, 957 */
		/* 8215E680h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x3BD);
		/* 8215E680h case    4:*/		return 0x8215E684;
		  /* 8215E684h */ case    5:  		/* li R3, 0 */
		/* 8215E684h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E684h case    5:*/		return 0x8215E688;
		  /* 8215E688h */ case    6:  		/* bl -27264 */
		/* 8215E688h case    6:*/		regs.LR = 0x8215E68C; return 0x82157C08;
		/* 8215E688h case    6:*/		return 0x8215E68C;
	}
	return 0x8215E68C;
} // Block from 8215E670h-8215E68Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215E68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E68C);
		  /* 8215E68Ch */ case    0:  		/* mr R3, R29 */
		/* 8215E68Ch case    0:*/		regs.R3 = regs.R29;
		/* 8215E68Ch case    0:*/		return 0x8215E690;
		  /* 8215E690h */ case    1:  		/* bl -2976 */
		/* 8215E690h case    1:*/		regs.LR = 0x8215E694; return 0x8215DAF0;
		/* 8215E690h case    1:*/		return 0x8215E694;
		  /* 8215E694h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 8215E694h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8215E694h case    2:*/		return 0x8215E698;
		  /* 8215E698h */ case    3:  		/* mr R4, R3 */
		/* 8215E698h case    3:*/		regs.R4 = regs.R3;
		/* 8215E698h case    3:*/		return 0x8215E69C;
		  /* 8215E69Ch */ case    4:  		/* lwz R3, <#[R31]> */
		/* 8215E69Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215E69Ch case    4:*/		return 0x8215E6A0;
		  /* 8215E6A0h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215E6A0h case    5:*/		regs.CTR = regs.R11;
		/* 8215E6A0h case    5:*/		return 0x8215E6A4;
		  /* 8215E6A4h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8215E6A4h case    6:*/		if ( 1 ) { regs.LR = 0x8215E6A8; return (uint32)regs.CTR; }
		/* 8215E6A4h case    6:*/		return 0x8215E6A8;
		  /* 8215E6A8h */ case    7:  		/* or. R30, R3, R3 */
		/* 8215E6A8h case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215E6A8h case    7:*/		return 0x8215E6AC;
		  /* 8215E6ACh */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 8215E6ACh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8215E6D4;  }
		/* 8215E6ACh case    8:*/		return 0x8215E6B0;
		  /* 8215E6B0h */ case    9:  		/* lis R11, -32252 */
		/* 8215E6B0h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E6B0h case    9:*/		return 0x8215E6B4;
		  /* 8215E6B4h */ case   10:  		/* mr R6, R27 */
		/* 8215E6B4h case   10:*/		regs.R6 = regs.R27;
		/* 8215E6B4h case   10:*/		return 0x8215E6B8;
		  /* 8215E6B8h */ case   11:  		/* addi R5, R11, -20600 */
		/* 8215E6B8h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAF88);
		/* 8215E6B8h case   11:*/		return 0x8215E6BC;
		  /* 8215E6BCh */ case   12:  		/* mr R4, R28 */
		/* 8215E6BCh case   12:*/		regs.R4 = regs.R28;
		/* 8215E6BCh case   12:*/		return 0x8215E6C0;
		  /* 8215E6C0h */ case   13:  		/* li R7, 966 */
		/* 8215E6C0h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3C6);
		/* 8215E6C0h case   13:*/		return 0x8215E6C4;
		  /* 8215E6C4h */ case   14:  		/* li R3, 0 */
		/* 8215E6C4h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E6C4h case   14:*/		return 0x8215E6C8;
		  /* 8215E6C8h */ case   15:  		/* bl -27328 */
		/* 8215E6C8h case   15:*/		regs.LR = 0x8215E6CC; return 0x82157C08;
		/* 8215E6C8h case   15:*/		return 0x8215E6CC;
		  /* 8215E6CCh */ case   16:  		/* li R3, 16 */
		/* 8215E6CCh case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215E6CCh case   16:*/		return 0x8215E6D0;
		  /* 8215E6D0h */ case   17:  		/* b 44 */
		/* 8215E6D0h case   17:*/		return 0x8215E6FC;
		/* 8215E6D0h case   17:*/		return 0x8215E6D4;
	}
	return 0x8215E6D4;
} // Block from 8215E68Ch-8215E6D4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215E6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E6D4);
		  /* 8215E6D4h */ case    0:  		/* mr R3, R29 */
		/* 8215E6D4h case    0:*/		regs.R3 = regs.R29;
		/* 8215E6D4h case    0:*/		return 0x8215E6D8;
		  /* 8215E6D8h */ case    1:  		/* bl -3048 */
		/* 8215E6D8h case    1:*/		regs.LR = 0x8215E6DC; return 0x8215DAF0;
		/* 8215E6D8h case    1:*/		return 0x8215E6DC;
		  /* 8215E6DCh */ case    2:  		/* mr R5, R3 */
		/* 8215E6DCh case    2:*/		regs.R5 = regs.R3;
		/* 8215E6DCh case    2:*/		return 0x8215E6E0;
		  /* 8215E6E0h */ case    3:  		/* mr R4, R29 */
		/* 8215E6E0h case    3:*/		regs.R4 = regs.R29;
		/* 8215E6E0h case    3:*/		return 0x8215E6E4;
		  /* 8215E6E4h */ case    4:  		/* mr R3, R30 */
		/* 8215E6E4h case    4:*/		regs.R3 = regs.R30;
		/* 8215E6E4h case    4:*/		return 0x8215E6E8;
		  /* 8215E6E8h */ case    5:  		/* bl -838968 */
		/* 8215E6E8h case    5:*/		regs.LR = 0x8215E6EC; return 0x820919B0;
		/* 8215E6E8h case    5:*/		return 0x8215E6EC;
		  /* 8215E6ECh */ case    6:  		/* mr R4, R30 */
		/* 8215E6ECh case    6:*/		regs.R4 = regs.R30;
		/* 8215E6ECh case    6:*/		return 0x8215E6F0;
		  /* 8215E6F0h */ case    7:  		/* lwz R3, <#[R31 + 2428]> */
		/* 8215E6F0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000097C) );
		/* 8215E6F0h case    7:*/		return 0x8215E6F4;
		  /* 8215E6F4h */ case    8:  		/* bl -7492 */
		/* 8215E6F4h case    8:*/		regs.LR = 0x8215E6F8; return 0x8215C9B0;
		/* 8215E6F4h case    8:*/		return 0x8215E6F8;
		  /* 8215E6F8h */ case    9:  		/* li R3, 0 */
		/* 8215E6F8h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E6F8h case    9:*/		return 0x8215E6FC;
	}
	return 0x8215E6FC;
} // Block from 8215E6D4h-8215E6FCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E6FC);
		  /* 8215E6FCh */ case    0:  		/* addi R1, R1, 128 */
		/* 8215E6FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215E6FCh case    0:*/		return 0x8215E700;
		  /* 8215E700h */ case    1:  		/* b -840796 */
		/* 8215E700h case    1:*/		return 0x820912A4;
		/* 8215E700h case    1:*/		return 0x8215E704;
		  /* 8215E704h */ case    2:  		/* nop */
		/* 8215E704h case    2:*/		cpu::op::nop();
		/* 8215E704h case    2:*/		return 0x8215E708;
	}
	return 0x8215E708;
} // Block from 8215E6FCh-8215E708h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215E708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E708);
		  /* 8215E708h */ case    0:  		/* mfspr R12, LR */
		/* 8215E708h case    0:*/		regs.R12 = regs.LR;
		/* 8215E708h case    0:*/		return 0x8215E70C;
		  /* 8215E70Ch */ case    1:  		/* bl -840896 */
		/* 8215E70Ch case    1:*/		regs.LR = 0x8215E710; return 0x8209124C;
		/* 8215E70Ch case    1:*/		return 0x8215E710;
		  /* 8215E710h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215E710h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215E710h case    2:*/		return 0x8215E714;
		  /* 8215E714h */ case    3:  		/* lis R11, -32253 */
		/* 8215E714h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215E714h case    3:*/		return 0x8215E718;
		  /* 8215E718h */ case    4:  		/* lis R10, -32252 */
		/* 8215E718h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E718h case    4:*/		return 0x8215E71C;
		  /* 8215E71Ch */ case    5:  		/* mr R29, R3 */
		/* 8215E71Ch case    5:*/		regs.R29 = regs.R3;
		/* 8215E71Ch case    5:*/		return 0x8215E720;
		  /* 8215E720h */ case    6:  		/* mr R30, R4 */
		/* 8215E720h case    6:*/		regs.R30 = regs.R4;
		/* 8215E720h case    6:*/		return 0x8215E724;
		  /* 8215E724h */ case    7:  		/* mr R26, R5 */
		/* 8215E724h case    7:*/		regs.R26 = regs.R5;
		/* 8215E724h case    7:*/		return 0x8215E728;
	}
	return 0x8215E728;
} // Block from 8215E708h-8215E728h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E728h
// Function '?CS_GetRequiredRenderStateList@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E728);
		  /* 8215E728h */ case    0:  		/* mr R25, R6 */
		/* 8215E728h case    0:*/		regs.R25 = regs.R6;
		/* 8215E728h case    0:*/		return 0x8215E72C;
		  /* 8215E72Ch */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8215E72Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215E72Ch case    1:*/		return 0x8215E730;
		  /* 8215E730h */ case    2:  		/* addi R28, R11, 27460 */
		/* 8215E730h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215E730h case    2:*/		return 0x8215E734;
		  /* 8215E734h */ case    3:  		/* addi R27, R10, -20136 */
		/* 8215E734h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFB158);
		/* 8215E734h case    3:*/		return 0x8215E738;
		  /* 8215E738h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E738h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8215E758;  }
		/* 8215E738h case    4:*/		return 0x8215E73C;
		  /* 8215E73Ch */ case    5:  		/* lis R11, -32252 */
		/* 8215E73Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E73Ch case    5:*/		return 0x8215E740;
		  /* 8215E740h */ case    6:  		/* mr R6, R27 */
		/* 8215E740h case    6:*/		regs.R6 = regs.R27;
		/* 8215E740h case    6:*/		return 0x8215E744;
		  /* 8215E744h */ case    7:  		/* addi R5, R11, -21620 */
		/* 8215E744h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 8215E744h case    7:*/		return 0x8215E748;
		  /* 8215E748h */ case    8:  		/* mr R4, R28 */
		/* 8215E748h case    8:*/		regs.R4 = regs.R28;
		/* 8215E748h case    8:*/		return 0x8215E74C;
		  /* 8215E74Ch */ case    9:  		/* li R7, 74 */
		/* 8215E74Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x4A);
		/* 8215E74Ch case    9:*/		return 0x8215E750;
		  /* 8215E750h */ case   10:  		/* li R3, 0 */
		/* 8215E750h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E750h case   10:*/		return 0x8215E754;
		  /* 8215E754h */ case   11:  		/* bl -27468 */
		/* 8215E754h case   11:*/		regs.LR = 0x8215E758; return 0x82157C08;
		/* 8215E754h case   11:*/		return 0x8215E758;
	}
	return 0x8215E758;
} // Block from 8215E728h-8215E758h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215E758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E758);
		  /* 8215E758h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8215E758h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215E758h case    0:*/		return 0x8215E75C;
		  /* 8215E75Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E75Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215E77C;  }
		/* 8215E75Ch case    1:*/		return 0x8215E760;
		  /* 8215E760h */ case    2:  		/* lis R11, -32252 */
		/* 8215E760h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E760h case    2:*/		return 0x8215E764;
		  /* 8215E764h */ case    3:  		/* mr R6, R27 */
		/* 8215E764h case    3:*/		regs.R6 = regs.R27;
		/* 8215E764h case    3:*/		return 0x8215E768;
		  /* 8215E768h */ case    4:  		/* addi R5, R11, -21632 */
		/* 8215E768h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 8215E768h case    4:*/		return 0x8215E76C;
		  /* 8215E76Ch */ case    5:  		/* mr R4, R28 */
		/* 8215E76Ch case    5:*/		regs.R4 = regs.R28;
		/* 8215E76Ch case    5:*/		return 0x8215E770;
		  /* 8215E770h */ case    6:  		/* li R7, 75 */
		/* 8215E770h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4B);
		/* 8215E770h case    6:*/		return 0x8215E774;
		  /* 8215E774h */ case    7:  		/* li R3, 0 */
		/* 8215E774h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E774h case    7:*/		return 0x8215E778;
		  /* 8215E778h */ case    8:  		/* bl -27504 */
		/* 8215E778h case    8:*/		regs.LR = 0x8215E77C; return 0x82157C08;
		/* 8215E778h case    8:*/		return 0x8215E77C;
	}
	return 0x8215E77C;
} // Block from 8215E758h-8215E77Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E77C);
		  /* 8215E77Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8215E77Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215E77Ch case    0:*/		return 0x8215E780;
	}
	return 0x8215E780;
} // Block from 8215E77Ch-8215E780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E780h
// Function '?CS_ValidateRenderstate@XGRAPHICS@@YAIPAU_CS_COMPILED_SHADER@1@PAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E780);
		  /* 8215E780h */ case    0:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E780h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8215E7A0;  }
		/* 8215E780h case    0:*/		return 0x8215E784;
		  /* 8215E784h */ case    1:  		/* lis R11, -32252 */
		/* 8215E784h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E784h case    1:*/		return 0x8215E788;
		  /* 8215E788h */ case    2:  		/* mr R6, R27 */
		/* 8215E788h case    2:*/		regs.R6 = regs.R27;
		/* 8215E788h case    2:*/		return 0x8215E78C;
		  /* 8215E78Ch */ case    3:  		/* addi R5, R11, -21104 */
		/* 8215E78Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 8215E78Ch case    3:*/		return 0x8215E790;
		  /* 8215E790h */ case    4:  		/* mr R4, R28 */
		/* 8215E790h case    4:*/		regs.R4 = regs.R28;
		/* 8215E790h case    4:*/		return 0x8215E794;
		  /* 8215E794h */ case    5:  		/* li R7, 76 */
		/* 8215E794h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x4C);
		/* 8215E794h case    5:*/		return 0x8215E798;
		  /* 8215E798h */ case    6:  		/* li R3, 0 */
		/* 8215E798h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E798h case    6:*/		return 0x8215E79C;
		  /* 8215E79Ch */ case    7:  		/* bl -27540 */
		/* 8215E79Ch case    7:*/		regs.LR = 0x8215E7A0; return 0x82157C08;
		/* 8215E79Ch case    7:*/		return 0x8215E7A0;
	}
	return 0x8215E7A0;
} // Block from 8215E780h-8215E7A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215E7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E7A0);
		  /* 8215E7A0h */ case    0:  		/* li R4, 2704 */
		/* 8215E7A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xA90);
		/* 8215E7A0h case    0:*/		return 0x8215E7A4;
		  /* 8215E7A4h */ case    1:  		/* mtspr CTR, R30 */
		/* 8215E7A4h case    1:*/		regs.CTR = regs.R30;
		/* 8215E7A4h case    1:*/		return 0x8215E7A8;
		  /* 8215E7A8h */ case    2:  		/* mr R3, R29 */
		/* 8215E7A8h case    2:*/		regs.R3 = regs.R29;
		/* 8215E7A8h case    2:*/		return 0x8215E7AC;
		  /* 8215E7ACh */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8215E7ACh case    3:*/		if ( 1 ) { regs.LR = 0x8215E7B0; return (uint32)regs.CTR; }
		/* 8215E7ACh case    3:*/		return 0x8215E7B0;
		  /* 8215E7B0h */ case    4:  		/* or. R31, R3, R3 */
		/* 8215E7B0h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215E7B0h case    4:*/		return 0x8215E7B4;
		  /* 8215E7B4h */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 8215E7B4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215E7D8;  }
		/* 8215E7B4h case    5:*/		return 0x8215E7B8;
		  /* 8215E7B8h */ case    6:  		/* lis R11, -32252 */
		/* 8215E7B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E7B8h case    6:*/		return 0x8215E7BC;
		  /* 8215E7BCh */ case    7:  		/* mr R6, R27 */
		/* 8215E7BCh case    7:*/		regs.R6 = regs.R27;
		/* 8215E7BCh case    7:*/		return 0x8215E7C0;
		  /* 8215E7C0h */ case    8:  		/* addi R5, R11, -20144 */
		/* 8215E7C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB150);
		/* 8215E7C0h case    8:*/		return 0x8215E7C4;
		  /* 8215E7C4h */ case    9:  		/* mr R4, R28 */
		/* 8215E7C4h case    9:*/		regs.R4 = regs.R28;
		/* 8215E7C4h case    9:*/		return 0x8215E7C8;
		  /* 8215E7C8h */ case   10:  		/* li R7, 80 */
		/* 8215E7C8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x50);
		/* 8215E7C8h case   10:*/		return 0x8215E7CC;
		  /* 8215E7CCh */ case   11:  		/* li R3, 0 */
		/* 8215E7CCh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E7CCh case   11:*/		return 0x8215E7D0;
		  /* 8215E7D0h */ case   12:  		/* bl -27592 */
		/* 8215E7D0h case   12:*/		regs.LR = 0x8215E7D4; return 0x82157C08;
		/* 8215E7D0h case   12:*/		return 0x8215E7D4;
		  /* 8215E7D4h */ case   13:  		/* b 84 */
		/* 8215E7D4h case   13:*/		return 0x8215E828;
		/* 8215E7D4h case   13:*/		return 0x8215E7D8;
	}
	return 0x8215E7D8;
} // Block from 8215E7A0h-8215E7D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215E7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E7D8);
		  /* 8215E7D8h */ case    0:  		/* li R11, 32 */
		/* 8215E7D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8215E7D8h case    0:*/		return 0x8215E7DC;
		  /* 8215E7DCh */ case    1:  		/* stw R29, <#[R31]> */
		/* 8215E7DCh case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8215E7DCh case    1:*/		return 0x8215E7E0;
		  /* 8215E7E0h */ case    2:  		/* stw R30, <#[R31 + 4]> */
		/* 8215E7E0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8215E7E0h case    2:*/		return 0x8215E7E4;
		  /* 8215E7E4h */ case    3:  		/* li R10, 0 */
		/* 8215E7E4h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8215E7E4h case    3:*/		return 0x8215E7E8;
		  /* 8215E7E8h */ case    4:  		/* stw R26, <#[R31 + 8]> */
		/* 8215E7E8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 8215E7E8h case    4:*/		return 0x8215E7EC;
		  /* 8215E7ECh */ case    5:  		/* addi R9, R31, -20 */
		/* 8215E7ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFEC);
		/* 8215E7ECh case    5:*/		return 0x8215E7F0;
		  /* 8215E7F0h */ case    6:  		/* stw R25, <#[R31 + 12]> */
		/* 8215E7F0h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215E7F0h case    6:*/		return 0x8215E7F4;
		  /* 8215E7F4h */ case    7:  		/* mtspr CTR, R11 */
		/* 8215E7F4h case    7:*/		regs.CTR = regs.R11;
		/* 8215E7F4h case    7:*/		return 0x8215E7F8;
		  /* 8215E7F8h */ case    8:  		/* rlwinm R11, R10, 0, 24, 31 */
		/* 8215E7F8h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R10);
		/* 8215E7F8h case    8:*/		return 0x8215E7FC;
		  /* 8215E7FCh */ case    9:  		/* addi R10, R10, 1 */
		/* 8215E7FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8215E7FCh case    9:*/		return 0x8215E800;
		  /* 8215E800h */ case   10:  		/* stbu R11, <#[R9 + 36]> */
		/* 8215E800h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R9 + 0x00000024) );
		regs.R9 = (uint32)(regs.R9 + 0x00000024);
		/* 8215E800h case   10:*/		return 0x8215E804;
		  /* 8215E804h */ case   11:  		/* bc 16, CR0_LT, -12 */
		/* 8215E804h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215E7F8;  }
		/* 8215E804h case   11:*/		return 0x8215E808;
		  /* 8215E808h */ case   12:  		/* li R10, 128 */
		/* 8215E808h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x80);
		/* 8215E808h case   12:*/		return 0x8215E80C;
		  /* 8215E80Ch */ case   13:  		/* li R11, 0 */
		/* 8215E80Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215E80Ch case   13:*/		return 0x8215E810;
		  /* 8215E810h */ case   14:  		/* addi R9, R31, 1156 */
		/* 8215E810h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x484);
		/* 8215E810h case   14:*/		return 0x8215E814;
		  /* 8215E814h */ case   15:  		/* mtspr CTR, R10 */
		/* 8215E814h case   15:*/		regs.CTR = regs.R10;
		/* 8215E814h case   15:*/		return 0x8215E818;
		  /* 8215E818h */ case   16:  		/* rlwinm R10, R11, 0, 24, 31 */
		/* 8215E818h case   16:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 8215E818h case   16:*/		return 0x8215E81C;
		  /* 8215E81Ch */ case   17:  		/* addi R11, R11, 1 */
		/* 8215E81Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215E81Ch case   17:*/		return 0x8215E820;
		  /* 8215E820h */ case   18:  		/* stbu R10, <#[R9 + 12]> */
		/* 8215E820h case   18:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R9 + 0x0000000C) );
		regs.R9 = (uint32)(regs.R9 + 0x0000000C);
		/* 8215E820h case   18:*/		return 0x8215E824;
		  /* 8215E824h */ case   19:  		/* bc 16, CR0_LT, -12 */
		/* 8215E824h case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215E818;  }
		/* 8215E824h case   19:*/		return 0x8215E828;
	}
	return 0x8215E828;
} // Block from 8215E7D8h-8215E828h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215E828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E828);
		  /* 8215E828h */ case    0:  		/* mr R3, R31 */
		/* 8215E828h case    0:*/		regs.R3 = regs.R31;
		/* 8215E828h case    0:*/		return 0x8215E82C;
		  /* 8215E82Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 8215E82Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215E82Ch case    1:*/		return 0x8215E830;
		  /* 8215E830h */ case    2:  		/* b -841108 */
		/* 8215E830h case    2:*/		return 0x8209129C;
		/* 8215E830h case    2:*/		return 0x8215E834;
		  /* 8215E834h */ case    3:  		/* nop */
		/* 8215E834h case    3:*/		cpu::op::nop();
		/* 8215E834h case    3:*/		return 0x8215E838;
		  /* 8215E838h */ case    4:  		/* li R10, 32 */
		/* 8215E838h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 8215E838h case    4:*/		return 0x8215E83C;
		  /* 8215E83Ch */ case    5:  		/* addi R11, R3, -20 */
		/* 8215E83Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFEC);
		/* 8215E83Ch case    5:*/		return 0x8215E840;
		  /* 8215E840h */ case    6:  		/* mtspr CTR, R10 */
		/* 8215E840h case    6:*/		regs.CTR = regs.R10;
		/* 8215E840h case    6:*/		return 0x8215E844;
		  /* 8215E844h */ case    7:  		/* lwz R10, <#[R11 + 36]> */
		/* 8215E844h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8215E844h case    7:*/		return 0x8215E848;
		  /* 8215E848h */ case    8:  		/* rlwinm R10, R10, 0, 12, 7 */
		/* 8215E848h case    8:*/		cpu::op::rlwinm<0,0,12,7>(regs,&regs.R10,regs.R10);
		/* 8215E848h case    8:*/		return 0x8215E84C;
		  /* 8215E84Ch */ case    9:  		/* stwu R10, <#[R11 + 36]> */
		/* 8215E84Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000024) );
		regs.R11 = (uint32)(regs.R11 + 0x00000024);
		/* 8215E84Ch case    9:*/		return 0x8215E850;
		  /* 8215E850h */ case   10:  		/* bc 16, CR0_LT, -12 */
		/* 8215E850h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215E844;  }
		/* 8215E850h case   10:*/		return 0x8215E854;
		  /* 8215E854h */ case   11:  		/* li R10, 128 */
		/* 8215E854h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x80);
		/* 8215E854h case   11:*/		return 0x8215E858;
		  /* 8215E858h */ case   12:  		/* addi R11, R3, 1156 */
		/* 8215E858h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x484);
		/* 8215E858h case   12:*/		return 0x8215E85C;
		  /* 8215E85Ch */ case   13:  		/* mtspr CTR, R10 */
		/* 8215E85Ch case   13:*/		regs.CTR = regs.R10;
		/* 8215E85Ch case   13:*/		return 0x8215E860;
		  /* 8215E860h */ case   14:  		/* lwz R10, <#[R11 + 12]> */
		/* 8215E860h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8215E860h case   14:*/		return 0x8215E864;
		  /* 8215E864h */ case   15:  		/* rlwinm R10, R10, 0, 9, 7 */
		/* 8215E864h case   15:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R10,regs.R10);
		/* 8215E864h case   15:*/		return 0x8215E868;
		  /* 8215E868h */ case   16:  		/* stwu R10, <#[R11 + 12]> */
		/* 8215E868h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		regs.R11 = (uint32)(regs.R11 + 0x0000000C);
		/* 8215E868h case   16:*/		return 0x8215E86C;
		  /* 8215E86Ch */ case   17:  		/* bc 16, CR0_LT, -12 */
		/* 8215E86Ch case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215E860;  }
		/* 8215E86Ch case   17:*/		return 0x8215E870;
		  /* 8215E870h */ case   18:  		/* bclr 20, CR0_LT */
		/* 8215E870h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E870h case   18:*/		return 0x8215E874;
	}
	return 0x8215E874;
} // Block from 8215E828h-8215E874h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215E874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E874);
		  /* 8215E874h */ case    0:  		/* nop */
		/* 8215E874h case    0:*/		cpu::op::nop();
		/* 8215E874h case    0:*/		return 0x8215E878;
	}
	return 0x8215E878;
} // Block from 8215E874h-8215E878h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E878h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E878);
		  /* 8215E878h */ case    0:  		/* mulli R10, R4, 36 */
		/* 8215E878h case    0:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R4,0x24);
		/* 8215E878h case    0:*/		return 0x8215E87C;
		  /* 8215E87Ch */ case    1:  		/* add R11, R10, R3 */
		/* 8215E87Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R3);
		/* 8215E87Ch case    1:*/		return 0x8215E880;
		  /* 8215E880h */ case    2:  		/* li R7, 1 */
		/* 8215E880h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8215E880h case    2:*/		return 0x8215E884;
		  /* 8215E884h */ case    3:  		/* rlwinm R9, R5, 1, 0, 30 */
		/* 8215E884h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R5);
		/* 8215E884h case    3:*/		return 0x8215E888;
		  /* 8215E888h */ case    4:  		/* li R6, 3 */
		/* 8215E888h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8215E888h case    4:*/		return 0x8215E88C;
		  /* 8215E88Ch */ case    5:  		/* slw R7, R7, R5 */
		/* 8215E88Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8215E88Ch case    5:*/		return 0x8215E890;
		  /* 8215E890h */ case    6:  		/* slw R6, R6, R9 */
		/* 8215E890h case    6:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R6,regs.R9);
		/* 8215E890h case    6:*/		return 0x8215E894;
		  /* 8215E894h */ case    7:  		/* lwz R8, <#[R11 + 16]> */
		/* 8215E894h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E894h case    7:*/		return 0x8215E898;
		  /* 8215E898h */ case    8:  		/* rlwinm R7, R7, 20, 8, 11 */
		/* 8215E898h case    8:*/		cpu::op::rlwinm<0,20,8,11>(regs,&regs.R7,regs.R7);
		/* 8215E898h case    8:*/		return 0x8215E89C;
		  /* 8215E89Ch */ case    9:  		/* nor R6, R6, R6 */
		/* 8215E89Ch case    9:*/		cpu::op::nor<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 8215E89Ch case    9:*/		return 0x8215E8A0;
		  /* 8215E8A0h */ case   10:  		/* li R4, 0 */
		/* 8215E8A0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8215E8A0h case   10:*/		return 0x8215E8A4;
		  /* 8215E8A4h */ case   11:  		/* or R8, R7, R8 */
		/* 8215E8A4h case   11:*/		cpu::op::or<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8215E8A4h case   11:*/		return 0x8215E8A8;
		  /* 8215E8A8h */ case   12:  		/* rlwinm R7, R6, 12, 0, 19 */
		/* 8215E8A8h case   12:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R7,regs.R6);
		/* 8215E8A8h case   12:*/		return 0x8215E8AC;
		  /* 8215E8ACh */ case   13:  		/* slw R6, R4, R9 */
		/* 8215E8ACh case   13:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R4,regs.R9);
		/* 8215E8ACh case   13:*/		return 0x8215E8B0;
		  /* 8215E8B0h */ case   14:  		/* rlwinm R9, R5, 3, 0, 28 */
		/* 8215E8B0h case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R5);
		/* 8215E8B0h case   14:*/		return 0x8215E8B4;
		  /* 8215E8B4h */ case   15:  		/* and R7, R7, R8 */
		/* 8215E8B4h case   15:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 8215E8B4h case   15:*/		return 0x8215E8B8;
		  /* 8215E8B8h */ case   16:  		/* rlwinm R6, R6, 12, 0, 19 */
		/* 8215E8B8h case   16:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R6,regs.R6);
		/* 8215E8B8h case   16:*/		return 0x8215E8BC;
		  /* 8215E8BCh */ case   17:  		/* add R10, R9, R10 */
		/* 8215E8BCh case   17:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8215E8BCh case   17:*/		return 0x8215E8C0;
		  /* 8215E8C0h */ case   18:  		/* or R9, R7, R6 */
		/* 8215E8C0h case   18:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R6);
		/* 8215E8C0h case   18:*/		return 0x8215E8C4;
		  /* 8215E8C4h */ case   19:  		/* add R7, R10, R3 */
		/* 8215E8C4h case   19:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R3);
		/* 8215E8C4h case   19:*/		return 0x8215E8C8;
		  /* 8215E8C8h */ case   20:  		/* rlwimi R9, R8, 0, 20, 11 */
		/* 8215E8C8h case   20:*/		cpu::op::rlwimi<0,0,20,11>(regs,&regs.R9,regs.R8);
		/* 8215E8C8h case   20:*/		return 0x8215E8CC;
		  /* 8215E8CCh */ case   21:  		/* addi R10, R11, 16 */
		/* 8215E8CCh case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 8215E8CCh case   21:*/		return 0x8215E8D0;
		  /* 8215E8D0h */ case   22:  		/* stw R9, <#[R11 + 16]> */
		/* 8215E8D0h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E8D0h case   22:*/		return 0x8215E8D4;
		  /* 8215E8D4h */ case   23:  		/* li R3, 0 */
		/* 8215E8D4h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E8D4h case   23:*/		return 0x8215E8D8;
		  /* 8215E8D8h */ case   24:  		/* stfs FR1, <#[R7 + 20]> */
		/* 8215E8D8h case   24:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R7 + 0x00000014) );
		/* 8215E8D8h case   24:*/		return 0x8215E8DC;
		  /* 8215E8DCh */ case   25:  		/* bclr 20, CR0_LT */
		/* 8215E8DCh case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E8DCh case   25:*/		return 0x8215E8E0;
	}
	return 0x8215E8E0;
} // Block from 8215E878h-8215E8E0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215E8E0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E8E0);
		  /* 8215E8E0h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 8215E8E0h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E8E0h case    0:*/		return 0x8215E8E4;
		  /* 8215E8E4h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 8215E8E4h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E8E4h case    1:*/		return 0x8215E8E8;
		  /* 8215E8E8h */ case    2:  		/* mulli R9, R4, 36 */
		/* 8215E8E8h case    2:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R4,0x24);
		/* 8215E8E8h case    2:*/		return 0x8215E8EC;
		  /* 8215E8ECh */ case    3:  		/* add R11, R9, R3 */
		/* 8215E8ECh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R3);
		/* 8215E8ECh case    3:*/		return 0x8215E8F0;
		  /* 8215E8F0h */ case    4:  		/* mr R10, R3 */
		/* 8215E8F0h case    4:*/		regs.R10 = regs.R3;
		/* 8215E8F0h case    4:*/		return 0x8215E8F4;
		  /* 8215E8F4h */ case    5:  		/* rlwinm R4, R5, 1, 0, 30 */
		/* 8215E8F4h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R4,regs.R5);
		/* 8215E8F4h case    5:*/		return 0x8215E8F8;
		  /* 8215E8F8h */ case    6:  		/* li R8, 1 */
		/* 8215E8F8h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8215E8F8h case    6:*/		return 0x8215E8FC;
		  /* 8215E8FCh */ case    7:  		/* li R3, 3 */
		/* 8215E8FCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8215E8FCh case    7:*/		return 0x8215E900;
		  /* 8215E900h */ case    8:  		/* slw R31, R8, R5 */
		/* 8215E900h case    8:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R8,regs.R5);
		/* 8215E900h case    8:*/		return 0x8215E904;
		  /* 8215E904h */ case    9:  		/* lwz R30, <#[R11 + 16]> */
		/* 8215E904h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E904h case    9:*/		return 0x8215E908;
	}
	return 0x8215E908;
} // Block from 8215E8E0h-8215E908h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215E908h
// Function '?CS_AllocFetchConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@W4E_FETCH_TYPE@1@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E908);
		  /* 8215E908h */ case    0:  		/* slw R3, R3, R4 */
		/* 8215E908h case    0:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R3,regs.R4);
		/* 8215E908h case    0:*/		return 0x8215E90C;
		  /* 8215E90Ch */ case    1:  		/* nor R3, R3, R3 */
		/* 8215E90Ch case    1:*/		cpu::op::nor<0>(regs,&regs.R3,regs.R3,regs.R3);
		/* 8215E90Ch case    1:*/		return 0x8215E910;
		  /* 8215E910h */ case    2:  		/* rlwinm R31, R31, 20, 8, 11 */
		/* 8215E910h case    2:*/		cpu::op::rlwinm<0,20,8,11>(regs,&regs.R31,regs.R31);
		/* 8215E910h case    2:*/		return 0x8215E914;
		  /* 8215E914h */ case    3:  		/* slw R4, R8, R4 */
		/* 8215E914h case    3:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R8,regs.R4);
		/* 8215E914h case    3:*/		return 0x8215E918;
		  /* 8215E918h */ case    4:  		/* rlwinm R8, R5, 3, 0, 28 */
		/* 8215E918h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R5);
		/* 8215E918h case    4:*/		return 0x8215E91C;
		  /* 8215E91Ch */ case    5:  		/* or R31, R31, R30 */
		/* 8215E91Ch case    5:*/		cpu::op::or<0>(regs,&regs.R31,regs.R31,regs.R30);
		/* 8215E91Ch case    5:*/		return 0x8215E920;
		  /* 8215E920h */ case    6:  		/* rlwinm R3, R3, 12, 0, 19 */
		/* 8215E920h case    6:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R3,regs.R3);
		/* 8215E920h case    6:*/		return 0x8215E924;
		  /* 8215E924h */ case    7:  		/* addi R5, R5, 3 */
		/* 8215E924h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x3);
		/* 8215E924h case    7:*/		return 0x8215E928;
		  /* 8215E928h */ case    8:  		/* and R3, R3, R31 */
		/* 8215E928h case    8:*/		cpu::op::and<0>(regs,&regs.R3,regs.R3,regs.R31);
		/* 8215E928h case    8:*/		return 0x8215E92C;
		  /* 8215E92Ch */ case    9:  		/* rlwinm R4, R4, 12, 0, 19 */
		/* 8215E92Ch case    9:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R4,regs.R4);
		/* 8215E92Ch case    9:*/		return 0x8215E930;
		  /* 8215E930h */ case   10:  		/* add R8, R8, R9 */
		/* 8215E930h case   10:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 8215E930h case   10:*/		return 0x8215E934;
		  /* 8215E934h */ case   11:  		/* rlwinm R5, R5, 3, 0, 28 */
		/* 8215E934h case   11:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R5);
		/* 8215E934h case   11:*/		return 0x8215E938;
		  /* 8215E938h */ case   12:  		/* or R4, R3, R4 */
		/* 8215E938h case   12:*/		cpu::op::or<0>(regs,&regs.R4,regs.R3,regs.R4);
		/* 8215E938h case   12:*/		return 0x8215E93C;
		  /* 8215E93Ch */ case   13:  		/* add R5, R5, R9 */
		/* 8215E93Ch case   13:*/		cpu::op::add<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 8215E93Ch case   13:*/		return 0x8215E940;
		  /* 8215E940h */ case   14:  		/* add R8, R8, R10 */
		/* 8215E940h case   14:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 8215E940h case   14:*/		return 0x8215E944;
		  /* 8215E944h */ case   15:  		/* rlwimi R4, R31, 0, 20, 11 */
		/* 8215E944h case   15:*/		cpu::op::rlwimi<0,0,20,11>(regs,&regs.R4,regs.R31);
		/* 8215E944h case   15:*/		return 0x8215E948;
		  /* 8215E948h */ case   16:  		/* addi R9, R11, 16 */
		/* 8215E948h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 8215E948h case   16:*/		return 0x8215E94C;
		  /* 8215E94Ch */ case   17:  		/* stw R4, <#[R11 + 16]> */
		/* 8215E94Ch case   17:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E94Ch case   17:*/		return 0x8215E950;
		  /* 8215E950h */ case   18:  		/* li R3, 0 */
		/* 8215E950h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E950h case   18:*/		return 0x8215E954;
		  /* 8215E954h */ case   19:  		/* stwx R7, <#[R5 + R10]> */
		/* 8215E954h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R5 + regs.R10 + 0x00000000) );
		/* 8215E954h case   19:*/		return 0x8215E958;
		  /* 8215E958h */ case   20:  		/* stw R6, <#[R8 + 20]> */
		/* 8215E958h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + 0x00000014) );
		/* 8215E958h case   20:*/		return 0x8215E95C;
		  /* 8215E95Ch */ case   21:  		/* ld R30, <#[R1 - 16]> */
		/* 8215E95Ch case   21:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215E95Ch case   21:*/		return 0x8215E960;
		  /* 8215E960h */ case   22:  		/* ld R31, <#[R1 - 8]> */
		/* 8215E960h case   22:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215E960h case   22:*/		return 0x8215E964;
		  /* 8215E964h */ case   23:  		/* bclr 20, CR0_LT */
		/* 8215E964h case   23:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E964h case   23:*/		return 0x8215E968;
	}
	return 0x8215E968;
} // Block from 8215E908h-8215E968h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8215E968h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E968);
		  /* 8215E968h */ case    0:  		/* mulli R11, R4, 36 */
		/* 8215E968h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R4,0x24);
		/* 8215E968h case    0:*/		return 0x8215E96C;
		  /* 8215E96Ch */ case    1:  		/* add R11, R11, R3 */
		/* 8215E96Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8215E96Ch case    1:*/		return 0x8215E970;
		  /* 8215E970h */ case    2:  		/* li R9, 2047 */
		/* 8215E970h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x7FF);
		/* 8215E970h case    2:*/		return 0x8215E974;
		  /* 8215E974h */ case    3:  		/* li R3, 0 */
		/* 8215E974h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E974h case    3:*/		return 0x8215E978;
		  /* 8215E978h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 8215E978h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E978h case    4:*/		return 0x8215E97C;
		  /* 8215E97Ch */ case    5:  		/* stw R5, <#[R11 + 20]> */
		/* 8215E97Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000014) );
		/* 8215E97Ch case    5:*/		return 0x8215E980;
		  /* 8215E980h */ case    6:  		/* rlwimi R10, R9, 13, 8, 19 */
		/* 8215E980h case    6:*/		cpu::op::rlwimi<0,13,8,19>(regs,&regs.R10,regs.R9);
		/* 8215E980h case    6:*/		return 0x8215E984;
		  /* 8215E984h */ case    7:  		/* stw R10, <#[R11 + 16]> */
		/* 8215E984h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8215E984h case    7:*/		return 0x8215E988;
		  /* 8215E988h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8215E988h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215E988h case    8:*/		return 0x8215E98C;
	}
	return 0x8215E98C;
} // Block from 8215E968h-8215E98Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215E98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E98C);
		  /* 8215E98Ch */ case    0:  		/* nop */
		/* 8215E98Ch case    0:*/		cpu::op::nop();
		/* 8215E98Ch case    0:*/		return 0x8215E990;
	}
	return 0x8215E990;
} // Block from 8215E98Ch-8215E990h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215E990h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E990);
		  /* 8215E990h */ case    0:  		/* mfspr R12, LR */
		/* 8215E990h case    0:*/		regs.R12 = regs.LR;
		/* 8215E990h case    0:*/		return 0x8215E994;
		  /* 8215E994h */ case    1:  		/* bl -841556 */
		/* 8215E994h case    1:*/		regs.LR = 0x8215E998; return 0x82091240;
		/* 8215E994h case    1:*/		return 0x8215E998;
		  /* 8215E998h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8215E998h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8215E998h case    2:*/		return 0x8215E99C;
		  /* 8215E99Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215E99Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215E99Ch case    3:*/		return 0x8215E9A0;
		  /* 8215E9A0h */ case    4:  		/* lis R10, -32252 */
		/* 8215E9A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215E9A0h case    4:*/		return 0x8215E9A4;
		  /* 8215E9A4h */ case    5:  		/* mr R31, R3 */
		/* 8215E9A4h case    5:*/		regs.R31 = regs.R3;
		/* 8215E9A4h case    5:*/		return 0x8215E9A8;
	}
	return 0x8215E9A8;
} // Block from 8215E990h-8215E9A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215E9A8h
// Function '?CS_FindOrAllocFetchConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@PAU_ABSTRACT_STATE@1@W4E_FETCH_TYPE@1@IPAI3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E9A8);
		  /* 8215E9A8h */ case    0:  		/* mr R22, R4 */
		/* 8215E9A8h case    0:*/		regs.R22 = regs.R4;
		/* 8215E9A8h case    0:*/		return 0x8215E9AC;
		  /* 8215E9ACh */ case    1:  		/* li R30, 0 */
		/* 8215E9ACh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8215E9ACh case    1:*/		return 0x8215E9B0;
		  /* 8215E9B0h */ case    2:  		/* li R23, 0 */
		/* 8215E9B0h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8215E9B0h case    2:*/		return 0x8215E9B4;
		  /* 8215E9B4h */ case    3:  		/* li R29, 0 */
		/* 8215E9B4h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215E9B4h case    3:*/		return 0x8215E9B8;
		  /* 8215E9B8h */ case    4:  		/* li R27, 0 */
		/* 8215E9B8h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8215E9B8h case    4:*/		return 0x8215E9BC;
		  /* 8215E9BCh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215E9BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215E9BCh case    5:*/		return 0x8215E9C0;
		  /* 8215E9C0h */ case    6:  		/* addi R28, R11, 27460 */
		/* 8215E9C0h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215E9C0h case    6:*/		return 0x8215E9C4;
		  /* 8215E9C4h */ case    7:  		/* addi R26, R10, -20136 */
		/* 8215E9C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB158);
		/* 8215E9C4h case    7:*/		return 0x8215E9C8;
		  /* 8215E9C8h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E9C8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215E9E8;  }
		/* 8215E9C8h case    8:*/		return 0x8215E9CC;
		  /* 8215E9CCh */ case    9:  		/* lis R11, -32252 */
		/* 8215E9CCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E9CCh case    9:*/		return 0x8215E9D0;
		  /* 8215E9D0h */ case   10:  		/* mr R6, R26 */
		/* 8215E9D0h case   10:*/		regs.R6 = regs.R26;
		/* 8215E9D0h case   10:*/		return 0x8215E9D4;
		  /* 8215E9D4h */ case   11:  		/* addi R5, R11, -20144 */
		/* 8215E9D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB150);
		/* 8215E9D4h case   11:*/		return 0x8215E9D8;
		  /* 8215E9D8h */ case   12:  		/* mr R4, R28 */
		/* 8215E9D8h case   12:*/		regs.R4 = regs.R28;
		/* 8215E9D8h case   12:*/		return 0x8215E9DC;
		  /* 8215E9DCh */ case   13:  		/* li R7, 401 */
		/* 8215E9DCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x191);
		/* 8215E9DCh case   13:*/		return 0x8215E9E0;
		  /* 8215E9E0h */ case   14:  		/* li R3, 0 */
		/* 8215E9E0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215E9E0h case   14:*/		return 0x8215E9E4;
		  /* 8215E9E4h */ case   15:  		/* bl -28124 */
		/* 8215E9E4h case   15:*/		regs.LR = 0x8215E9E8; return 0x82157C08;
		/* 8215E9E4h case   15:*/		return 0x8215E9E8;
	}
	return 0x8215E9E8;
} // Block from 8215E9A8h-8215E9E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215E9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215E9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215E9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215E9E8);
		  /* 8215E9E8h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8215E9E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8215E9E8h case    0:*/		return 0x8215E9EC;
		  /* 8215E9ECh */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215E9ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215EA0C;  }
		/* 8215E9ECh case    1:*/		return 0x8215E9F0;
		  /* 8215E9F0h */ case    2:  		/* lis R11, -32252 */
		/* 8215E9F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215E9F0h case    2:*/		return 0x8215E9F4;
		  /* 8215E9F4h */ case    3:  		/* mr R6, R26 */
		/* 8215E9F4h case    3:*/		regs.R6 = regs.R26;
		/* 8215E9F4h case    3:*/		return 0x8215E9F8;
		  /* 8215E9F8h */ case    4:  		/* addi R5, R11, -20012 */
		/* 8215E9F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB1D4);
		/* 8215E9F8h case    4:*/		return 0x8215E9FC;
		  /* 8215E9FCh */ case    5:  		/* mr R4, R28 */
		/* 8215E9FCh case    5:*/		regs.R4 = regs.R28;
		/* 8215E9FCh case    5:*/		return 0x8215EA00;
		  /* 8215EA00h */ case    6:  		/* li R7, 402 */
		/* 8215EA00h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x192);
		/* 8215EA00h case    6:*/		return 0x8215EA04;
		  /* 8215EA04h */ case    7:  		/* li R3, 0 */
		/* 8215EA04h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EA04h case    7:*/		return 0x8215EA08;
		  /* 8215EA08h */ case    8:  		/* bl -28160 */
		/* 8215EA08h case    8:*/		regs.LR = 0x8215EA0C; return 0x82157C08;
		/* 8215EA08h case    8:*/		return 0x8215EA0C;
	}
	return 0x8215EA0C;
} // Block from 8215E9E8h-8215EA0Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215EA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EA0C);
		  /* 8215EA0Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8215EA0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215EA0Ch case    0:*/		return 0x8215EA10;
		  /* 8215EA10h */ case    1:  		/* bc 12, CR6_EQ, 372 */
		/* 8215EA10h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215EB84;  }
		/* 8215EA10h case    1:*/		return 0x8215EA14;
		  /* 8215EA14h */ case    2:  		/* cmplwi CR6, R22, 0 */
		/* 8215EA14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8215EA14h case    2:*/		return 0x8215EA18;
		  /* 8215EA18h */ case    3:  		/* bc 12, CR6_EQ, 364 */
		/* 8215EA18h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215EB84;  }
		/* 8215EA18h case    3:*/		return 0x8215EA1C;
		  /* 8215EA1Ch */ case    4:  		/* li R11, 32 */
		/* 8215EA1Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8215EA1Ch case    4:*/		return 0x8215EA20;
		  /* 8215EA20h */ case    5:  		/* addi R25, R31, 16 */
		/* 8215EA20h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x10);
		/* 8215EA20h case    5:*/		return 0x8215EA24;
		  /* 8215EA24h */ case    6:  		/* mr R10, R25 */
		/* 8215EA24h case    6:*/		regs.R10 = regs.R25;
		/* 8215EA24h case    6:*/		return 0x8215EA28;
		  /* 8215EA28h */ case    7:  		/* mtspr CTR, R11 */
		/* 8215EA28h case    7:*/		regs.CTR = regs.R11;
		/* 8215EA28h case    7:*/		return 0x8215EA2C;
		  /* 8215EA2Ch */ case    8:  		/* lwz R11, <#[R10]> */
		/* 8215EA2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8215EA2Ch case    8:*/		return 0x8215EA30;
		  /* 8215EA30h */ case    9:  		/* rlwinm. R11, R11, 0, 8, 11 */
		/* 8215EA30h case    9:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R11,regs.R11);
		/* 8215EA30h case    9:*/		return 0x8215EA34;
		  /* 8215EA34h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 8215EA34h case   10:*/		if ( regs.CR[0].eq ) { return 0x8215EA3C;  }
		/* 8215EA34h case   10:*/		return 0x8215EA38;
		  /* 8215EA38h */ case   11:  		/* addi R29, R29, 1 */
		/* 8215EA38h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8215EA38h case   11:*/		return 0x8215EA3C;
	}
	return 0x8215EA3C;
} // Block from 8215EA0Ch-8215EA3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215EA3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EA3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EA3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EA3C);
		  /* 8215EA3Ch */ case    0:  		/* addi R10, R10, 36 */
		/* 8215EA3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 8215EA3Ch case    0:*/		return 0x8215EA40;
		  /* 8215EA40h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 8215EA40h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215EA2C;  }
		/* 8215EA40h case    1:*/		return 0x8215EA44;
		  /* 8215EA44h */ case    2:  		/* li R11, 128 */
		/* 8215EA44h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x80);
		/* 8215EA44h case    2:*/		return 0x8215EA48;
		  /* 8215EA48h */ case    3:  		/* addi R24, R31, 1168 */
		/* 8215EA48h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R31,0x490);
		/* 8215EA48h case    3:*/		return 0x8215EA4C;
		  /* 8215EA4Ch */ case    4:  		/* mr R10, R24 */
		/* 8215EA4Ch case    4:*/		regs.R10 = regs.R24;
		/* 8215EA4Ch case    4:*/		return 0x8215EA50;
		  /* 8215EA50h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215EA50h case    5:*/		regs.CTR = regs.R11;
		/* 8215EA50h case    5:*/		return 0x8215EA54;
		  /* 8215EA54h */ case    6:  		/* lwz R11, <#[R10]> */
		/* 8215EA54h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8215EA54h case    6:*/		return 0x8215EA58;
		  /* 8215EA58h */ case    7:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8215EA58h case    7:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8215EA58h case    7:*/		return 0x8215EA5C;
		  /* 8215EA5Ch */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 8215EA5Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8215EA64;  }
		/* 8215EA5Ch case    8:*/		return 0x8215EA60;
		  /* 8215EA60h */ case    9:  		/* addi R27, R27, 1 */
		/* 8215EA60h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8215EA60h case    9:*/		return 0x8215EA64;
	}
	return 0x8215EA64;
} // Block from 8215EA3Ch-8215EA64h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215EA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EA64);
		  /* 8215EA64h */ case    0:  		/* addi R10, R10, 12 */
		/* 8215EA64h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8215EA64h case    0:*/		return 0x8215EA68;
		  /* 8215EA68h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 8215EA68h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215EA54;  }
		/* 8215EA68h case    1:*/		return 0x8215EA6C;
		  /* 8215EA6Ch */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 8215EA6Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215EA6Ch case    2:*/		return 0x8215EA70;
		  /* 8215EA70h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8215EA70h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215EA7C;  }
		/* 8215EA70h case    3:*/		return 0x8215EA74;
		  /* 8215EA74h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 8215EA74h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215EA74h case    4:*/		return 0x8215EA78;
		  /* 8215EA78h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 8215EA78h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215EAC4;  }
		/* 8215EA78h case    5:*/		return 0x8215EA7C;
	}
	return 0x8215EA7C;
} // Block from 8215EA64h-8215EA7Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215EA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EA7C);
		  /* 8215EA7Ch */ case    0:  		/* mulli R11, R29, 3 */
		/* 8215EA7Ch case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R29,0x3);
		/* 8215EA7Ch case    0:*/		return 0x8215EA80;
		  /* 8215EA80h */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 8215EA80h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8215EA80h case    1:*/		return 0x8215EA84;
		  /* 8215EA84h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8215EA84h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215EA84h case    2:*/		return 0x8215EA88;
		  /* 8215EA88h */ case    3:  		/* mtspr CTR, R10 */
		/* 8215EA88h case    3:*/		regs.CTR = regs.R10;
		/* 8215EA88h case    3:*/		return 0x8215EA8C;
		  /* 8215EA8Ch */ case    4:  		/* add R11, R11, R27 */
		/* 8215EA8Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8215EA8Ch case    4:*/		return 0x8215EA90;
		  /* 8215EA90h */ case    5:  		/* mulli R11, R11, 12 */
		/* 8215EA90h case    5:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8215EA90h case    5:*/		return 0x8215EA94;
		  /* 8215EA94h */ case    6:  		/* addi R4, R11, 16 */
		/* 8215EA94h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 8215EA94h case    6:*/		return 0x8215EA98;
		  /* 8215EA98h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8215EA98h case    7:*/		if ( 1 ) { regs.LR = 0x8215EA9C; return (uint32)regs.CTR; }
		/* 8215EA98h case    7:*/		return 0x8215EA9C;
		  /* 8215EA9Ch */ case    8:  		/* or. R30, R3, R3 */
		/* 8215EA9Ch case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215EA9Ch case    8:*/		return 0x8215EAA0;
		  /* 8215EAA0h */ case    9:  		/* bc 4, CR0_EQ, 48 */
		/* 8215EAA0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8215EAD0;  }
		/* 8215EAA0h case    9:*/		return 0x8215EAA4;
		  /* 8215EAA4h */ case   10:  		/* lis R11, -32252 */
		/* 8215EAA4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EAA4h case   10:*/		return 0x8215EAA8;
		  /* 8215EAA8h */ case   11:  		/* mr R6, R26 */
		/* 8215EAA8h case   11:*/		regs.R6 = regs.R26;
		/* 8215EAA8h case   11:*/		return 0x8215EAAC;
		  /* 8215EAACh */ case   12:  		/* addi R5, R11, -20020 */
		/* 8215EAACh case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB1CC);
		/* 8215EAACh case   12:*/		return 0x8215EAB0;
		  /* 8215EAB0h */ case   13:  		/* mr R4, R28 */
		/* 8215EAB0h case   13:*/		regs.R4 = regs.R28;
		/* 8215EAB0h case   13:*/		return 0x8215EAB4;
		  /* 8215EAB4h */ case   14:  		/* li R7, 443 */
		/* 8215EAB4h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1BB);
		/* 8215EAB4h case   14:*/		return 0x8215EAB8;
		  /* 8215EAB8h */ case   15:  		/* li R3, 0 */
		/* 8215EAB8h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EAB8h case   15:*/		return 0x8215EABC;
		  /* 8215EABCh */ case   16:  		/* bl -28340 */
		/* 8215EABCh case   16:*/		regs.LR = 0x8215EAC0; return 0x82157C08;
		/* 8215EABCh case   16:*/		return 0x8215EAC0;
	}
	return 0x8215EAC0;
} // Block from 8215EA7Ch-8215EAC0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215EAC0h
// Function '?CS_GetFetchConstAlloc@XGRAPHICS@@YAPAU_FA_FETCHCONST_ALLOC@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EAC0);
		  /* 8215EAC0h */ case    0:  		/* li R23, 16 */
		/* 8215EAC0h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x10);
		/* 8215EAC0h case    0:*/		return 0x8215EAC4;
	}
	return 0x8215EAC4;
} // Block from 8215EAC0h-8215EAC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215EAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EAC4);
		  /* 8215EAC4h */ case    0:  		/* stw R30, <#[R22]> */
		/* 8215EAC4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R22 + 0x00000000) );
		/* 8215EAC4h case    0:*/		return 0x8215EAC8;
		  /* 8215EAC8h */ case    1:  		/* mr R3, R23 */
		/* 8215EAC8h case    1:*/		regs.R3 = regs.R23;
		/* 8215EAC8h case    1:*/		return 0x8215EACC;
		  /* 8215EACCh */ case    2:  		/* b 188 */
		/* 8215EACCh case    2:*/		return 0x8215EB88;
		/* 8215EACCh case    2:*/		return 0x8215EAD0;
	}
	return 0x8215EAD0;
} // Block from 8215EAC4h-8215EAD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215EAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EAD0);
		  /* 8215EAD0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8215EAD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215EAD0h case    0:*/		return 0x8215EAD4;
		  /* 8215EAD4h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 8215EAD4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215EAD4h case    1:*/		return 0x8215EAD8;
		  /* 8215EAD8h */ case    2:  		/* stw R11, <#[R30]> */
		/* 8215EAD8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8215EAD8h case    2:*/		return 0x8215EADC;
		  /* 8215EADCh */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8215EADCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8215EADCh case    3:*/		return 0x8215EAE0;
		  /* 8215EAE0h */ case    4:  		/* stw R11, <#[R30 + 4]> */
		/* 8215EAE0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8215EAE0h case    4:*/		return 0x8215EAE4;
		  /* 8215EAE4h */ case    5:  		/* stw R29, <#[R30 + 8]> */
		/* 8215EAE4h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 8215EAE4h case    5:*/		return 0x8215EAE8;
		  /* 8215EAE8h */ case    6:  		/* stw R27, <#[R30 + 12]> */
		/* 8215EAE8h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x0000000C) );
		/* 8215EAE8h case    6:*/		return 0x8215EAEC;
		  /* 8215EAECh */ case    7:  		/* bc 12, CR6_EQ, 60 */
		/* 8215EAECh case    7:*/		if ( regs.CR[6].eq ) { return 0x8215EB28;  }
		/* 8215EAECh case    7:*/		return 0x8215EAF0;
		  /* 8215EAF0h */ case    8:  		/* addi R28, R30, 16 */
		/* 8215EAF0h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x10);
		/* 8215EAF0h case    8:*/		return 0x8215EAF4;
		  /* 8215EAF4h */ case    9:  		/* mr R31, R25 */
		/* 8215EAF4h case    9:*/		regs.R31 = regs.R25;
		/* 8215EAF4h case    9:*/		return 0x8215EAF8;
		  /* 8215EAF8h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 8215EAF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215EAF8h case   10:*/		return 0x8215EAFC;
		  /* 8215EAFCh */ case   11:  		/* rlwinm. R11, R11, 0, 8, 11 */
		/* 8215EAFCh case   11:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R11,regs.R11);
		/* 8215EAFCh case   11:*/		return 0x8215EB00;
		  /* 8215EB00h */ case   12:  		/* bc 12, CR0_EQ, 28 */
		/* 8215EB00h case   12:*/		if ( regs.CR[0].eq ) { return 0x8215EB1C;  }
		/* 8215EB00h case   12:*/		return 0x8215EB04;
		  /* 8215EB04h */ case   13:  		/* li R5, 36 */
		/* 8215EB04h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 8215EB04h case   13:*/		return 0x8215EB08;
		  /* 8215EB08h */ case   14:  		/* mr R4, R31 */
		/* 8215EB08h case   14:*/		regs.R4 = regs.R31;
		/* 8215EB08h case   14:*/		return 0x8215EB0C;
		  /* 8215EB0Ch */ case   15:  		/* mr R3, R28 */
		/* 8215EB0Ch case   15:*/		regs.R3 = regs.R28;
		/* 8215EB0Ch case   15:*/		return 0x8215EB10;
		  /* 8215EB10h */ case   16:  		/* bl -840032 */
		/* 8215EB10h case   16:*/		regs.LR = 0x8215EB14; return 0x820919B0;
		/* 8215EB10h case   16:*/		return 0x8215EB14;
		  /* 8215EB14h */ case   17:  		/* addi R28, R28, 36 */
		/* 8215EB14h case   17:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x24);
		/* 8215EB14h case   17:*/		return 0x8215EB18;
	}
	return 0x8215EB18;
} // Block from 8215EAD0h-8215EB18h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB18h
// Function '?CS_AllocStaticScalarConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@IW4E_IA_FLOAT_CHANNEL@1@M@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB18);
		  /* 8215EB18h */ case    0:  		/* addi R29, R29, -1 */
		/* 8215EB18h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8215EB18h case    0:*/		return 0x8215EB1C;
	}
	return 0x8215EB1C;
} // Block from 8215EB18h-8215EB1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB1C);
		  /* 8215EB1Ch */ case    0:  		/* addi R31, R31, 36 */
		/* 8215EB1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x24);
		/* 8215EB1Ch case    0:*/		return 0x8215EB20;
		  /* 8215EB20h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 8215EB20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215EB20h case    1:*/		return 0x8215EB24;
		  /* 8215EB24h */ case    2:  		/* bc 4, CR6_EQ, -44 */
		/* 8215EB24h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215EAF8;  }
		/* 8215EB24h case    2:*/		return 0x8215EB28;
	}
	return 0x8215EB28;
} // Block from 8215EB1Ch-8215EB28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB28);
		  /* 8215EB28h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8215EB28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215EB28h case    0:*/		return 0x8215EB2C;
		  /* 8215EB2Ch */ case    1:  		/* bc 12, CR6_EQ, -104 */
		/* 8215EB2Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8215EAC4;  }
		/* 8215EB2Ch case    1:*/		return 0x8215EB30;
		  /* 8215EB30h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8215EB30h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8215EB30h case    2:*/		return 0x8215EB34;
		  /* 8215EB34h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 8215EB34h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215EB34h case    3:*/		return 0x8215EB38;
		  /* 8215EB38h */ case    4:  		/* mulli R11, R11, 36 */
		/* 8215EB38h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8215EB38h case    4:*/		return 0x8215EB3C;
		  /* 8215EB3Ch */ case    5:  		/* add R11, R11, R30 */
		/* 8215EB3Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8215EB3Ch case    5:*/		return 0x8215EB40;
		  /* 8215EB40h */ case    6:  		/* addi R10, R11, 16 */
		/* 8215EB40h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 8215EB40h case    6:*/		return 0x8215EB44;
		  /* 8215EB44h */ case    7:  		/* bc 12, CR6_EQ, -128 */
		/* 8215EB44h case    7:*/		if ( regs.CR[6].eq ) { return 0x8215EAC4;  }
		/* 8215EB44h case    7:*/		return 0x8215EB48;
		  /* 8215EB48h */ case    8:  		/* mr R11, R24 */
		/* 8215EB48h case    8:*/		regs.R11 = regs.R24;
		/* 8215EB48h case    8:*/		return 0x8215EB4C;
		  /* 8215EB4Ch */ case    9:  		/* mr R9, R25 */
		/* 8215EB4Ch case    9:*/		regs.R9 = regs.R25;
		/* 8215EB4Ch case    9:*/		return 0x8215EB50;
		  /* 8215EB50h */ case   10:  		/* lwz R8, <#[R9]> */
		/* 8215EB50h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8215EB50h case   10:*/		return 0x8215EB54;
		  /* 8215EB54h */ case   11:  		/* rlwinm. R8, R8, 0, 8, 11 */
		/* 8215EB54h case   11:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R8,regs.R8);
		/* 8215EB54h case   11:*/		return 0x8215EB58;
		  /* 8215EB58h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 8215EB58h case   12:*/		if ( regs.CR[0].eq ) { return 0x8215EB78;  }
		/* 8215EB58h case   12:*/		return 0x8215EB5C;
		  /* 8215EB5Ch */ case   13:  		/* lwz R8, <#[R11]> */
		/* 8215EB5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8215EB5Ch case   13:*/		return 0x8215EB60;
		  /* 8215EB60h */ case   14:  		/* stw R8, <#[R10]> */
		/* 8215EB60h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8215EB60h case   14:*/		return 0x8215EB64;
		  /* 8215EB64h */ case   15:  		/* lwz R8, <#[R11 + 4]> */
		/* 8215EB64h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8215EB64h case   15:*/		return 0x8215EB68;
		  /* 8215EB68h */ case   16:  		/* stw R8, <#[R10 + 4]> */
		/* 8215EB68h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 8215EB68h case   16:*/		return 0x8215EB6C;
		  /* 8215EB6Ch */ case   17:  		/* lwz R8, <#[R11 + 8]> */
		/* 8215EB6Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8215EB6Ch case   17:*/		return 0x8215EB70;
		  /* 8215EB70h */ case   18:  		/* stw R8, <#[R10 + 8]> */
		/* 8215EB70h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8215EB70h case   18:*/		return 0x8215EB74;
		  /* 8215EB74h */ case   19:  		/* addi R10, R10, 12 */
		/* 8215EB74h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8215EB74h case   19:*/		return 0x8215EB78;
	}
	return 0x8215EB78;
} // Block from 8215EB28h-8215EB78h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB78);
		  /* 8215EB78h */ case    0:  		/* addi R9, R9, 36 */
		/* 8215EB78h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x24);
		/* 8215EB78h case    0:*/		return 0x8215EB7C;
		  /* 8215EB7Ch */ case    1:  		/* addi R11, R11, 12 */
		/* 8215EB7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8215EB7Ch case    1:*/		return 0x8215EB80;
	}
	return 0x8215EB80;
} // Block from 8215EB78h-8215EB80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB80h
// Function '?CS_AllocQueryScalarConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@IW4E_IA_FLOAT_CHANNEL@1@W4E_SSM_COMPILEGET_QUERY@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB80);
		  /* 8215EB80h */ case    0:  		/* b -48 */
		/* 8215EB80h case    0:*/		return 0x8215EB50;
		/* 8215EB80h case    0:*/		return 0x8215EB84;
	}
	return 0x8215EB84;
} // Block from 8215EB80h-8215EB84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB84);
		  /* 8215EB84h */ case    0:  		/* li R3, 25 */
		/* 8215EB84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x19);
		/* 8215EB84h case    0:*/		return 0x8215EB88;
	}
	return 0x8215EB88;
} // Block from 8215EB84h-8215EB88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB88);
		  /* 8215EB88h */ case    0:  		/* addi R1, R1, 176 */
		/* 8215EB88h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8215EB88h case    0:*/		return 0x8215EB8C;
		  /* 8215EB8Ch */ case    1:  		/* b -841980 */
		/* 8215EB8Ch case    1:*/		return 0x82091290;
		/* 8215EB8Ch case    1:*/		return 0x8215EB90;
	}
	return 0x8215EB90;
} // Block from 8215EB88h-8215EB90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB90h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB90);
		  /* 8215EB90h */ case    0:  		/* mr R4, R3 */
		/* 8215EB90h case    0:*/		regs.R4 = regs.R3;
		/* 8215EB90h case    0:*/		return 0x8215EB94;
		  /* 8215EB94h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215EB94h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215EB94h case    1:*/		return 0x8215EB98;
		  /* 8215EB98h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 8215EB98h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8215EB98h case    2:*/		return 0x8215EB9C;
	}
	return 0x8215EB9C;
} // Block from 8215EB90h-8215EB9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215EB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EB9C);
		  /* 8215EB9Ch */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 8215EB9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8215EB9Ch case    0:*/		return 0x8215EBA0;
		  /* 8215EBA0h */ case    1:  		/* lwz R3, <#[R3]> */
		/* 8215EBA0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8215EBA0h case    1:*/		return 0x8215EBA4;
		  /* 8215EBA4h */ case    2:  		/* mtspr CTR, R11 */
		/* 8215EBA4h case    2:*/		regs.CTR = regs.R11;
		/* 8215EBA4h case    2:*/		return 0x8215EBA8;
		  /* 8215EBA8h */ case    3:  		/* bcctr 20, CR0_LT */
		/* 8215EBA8h case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8215EBA8h case    3:*/		return 0x8215EBAC;
		  /* 8215EBACh */ case    4:  		/* bclr 20, CR0_LT */
		/* 8215EBACh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBACh case    4:*/		return 0x8215EBB0;
	}
	return 0x8215EBB0;
} // Block from 8215EB9Ch-8215EBB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBB0);
		  /* 8215EBB0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8215EBB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215EBB0h case    0:*/		return 0x8215EBB4;
		  /* 8215EBB4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 8215EBB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215EBD0;  }
		/* 8215EBB4h case    1:*/		return 0x8215EBB8;
		  /* 8215EBB8h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8215EBB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215EBB8h case    2:*/		return 0x8215EBBC;
		  /* 8215EBBCh */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8215EBBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8215EBC8;  }
		/* 8215EBBCh case    3:*/		return 0x8215EBC0;
		  /* 8215EBC0h */ case    4:  		/* addi R11, R3, 16 */
		/* 8215EBC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x10);
		/* 8215EBC0h case    4:*/		return 0x8215EBC4;
		  /* 8215EBC4h */ case    5:  		/* stw R11, <#[R4]> */
		/* 8215EBC4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8215EBC4h case    5:*/		return 0x8215EBC8;
	}
	return 0x8215EBC8;
} // Block from 8215EBB0h-8215EBC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBC8);
		  /* 8215EBC8h */ case    0:  		/* lwz R3, <#[R3 + 8]> */
		/* 8215EBC8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8215EBC8h case    0:*/		return 0x8215EBCC;
		  /* 8215EBCCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBCCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBCCh case    1:*/		return 0x8215EBD0;
	}
	return 0x8215EBD0;
} // Block from 8215EBC8h-8215EBD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBD0);
		  /* 8215EBD0h */ case    0:  		/* li R3, 0 */
		/* 8215EBD0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EBD0h case    0:*/		return 0x8215EBD4;
		  /* 8215EBD4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBD4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBD4h case    1:*/		return 0x8215EBD8;
	}
	return 0x8215EBD8;
} // Block from 8215EBD0h-8215EBD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBD8);
		  /* 8215EBD8h */ case    0:  		/* lwz R3, <#[R3 + 124]> */
		/* 8215EBD8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000007C) );
		/* 8215EBD8h case    0:*/		return 0x8215EBDC;
		  /* 8215EBDCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBDCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBDCh case    1:*/		return 0x8215EBE0;
	}
	return 0x8215EBE0;
} // Block from 8215EBD8h-8215EBE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBE0);
		  /* 8215EBE0h */ case    0:  		/* addi R3, R3, 128 */
		/* 8215EBE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8215EBE0h case    0:*/		return 0x8215EBE4;
		  /* 8215EBE4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBE4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBE4h case    1:*/		return 0x8215EBE8;
	}
	return 0x8215EBE8;
} // Block from 8215EBE0h-8215EBE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBE8h
// Function '?CS_AllocExportConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBE8);
		  /* 8215EBE8h */ case    0:  		/* lwz R3, <#[R3 + 84]> */
		/* 8215EBE8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000054) );
		/* 8215EBE8h case    0:*/		return 0x8215EBEC;
		  /* 8215EBECh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBECh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBECh case    1:*/		return 0x8215EBF0;
	}
	return 0x8215EBF0;
} // Block from 8215EBE8h-8215EBF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBF0);
		  /* 8215EBF0h */ case    0:  		/* lwz R3, <#[R3 + 108]> */
		/* 8215EBF0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000006C) );
		/* 8215EBF0h case    0:*/		return 0x8215EBF4;
		  /* 8215EBF4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBF4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBF4h case    1:*/		return 0x8215EBF8;
	}
	return 0x8215EBF8;
} // Block from 8215EBF0h-8215EBF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EBF8);
		  /* 8215EBF8h */ case    0:  		/* lwz R3, <#[R3 + 100]> */
		/* 8215EBF8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000064) );
		/* 8215EBF8h case    0:*/		return 0x8215EBFC;
		  /* 8215EBFCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EBFCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EBFCh case    1:*/		return 0x8215EC00;
	}
	return 0x8215EC00;
} // Block from 8215EBF8h-8215EC00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC00h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC00);
		  /* 8215EC00h */ case    0:  		/* lwz R3, <#[R3 + 96]> */
		/* 8215EC00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000060) );
		/* 8215EC00h case    0:*/		return 0x8215EC04;
		  /* 8215EC04h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC04h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC04h case    1:*/		return 0x8215EC08;
	}
	return 0x8215EC08;
} // Block from 8215EC00h-8215EC08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC08);
		  /* 8215EC08h */ case    0:  		/* lwz R3, <#[R3 + 92]> */
		/* 8215EC08h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000005C) );
		/* 8215EC08h case    0:*/		return 0x8215EC0C;
		  /* 8215EC0Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC0Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC0Ch case    1:*/		return 0x8215EC10;
	}
	return 0x8215EC10;
} // Block from 8215EC08h-8215EC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC10h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC10);
		  /* 8215EC10h */ case    0:  		/* lwz R3, <#[R3 + 112]> */
		/* 8215EC10h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000070) );
		/* 8215EC10h case    0:*/		return 0x8215EC14;
		  /* 8215EC14h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC14h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC14h case    1:*/		return 0x8215EC18;
	}
	return 0x8215EC18;
} // Block from 8215EC10h-8215EC18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC18);
		  /* 8215EC18h */ case    0:  		/* lwz R3, <#[R3 + 116]> */
		/* 8215EC18h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000074) );
		/* 8215EC18h case    0:*/		return 0x8215EC1C;
		  /* 8215EC1Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC1Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC1Ch case    1:*/		return 0x8215EC20;
	}
	return 0x8215EC20;
} // Block from 8215EC18h-8215EC20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC20h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC20);
		  /* 8215EC20h */ case    0:  		/* lwz R3, <#[R3 + 120]> */
		/* 8215EC20h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000078) );
		/* 8215EC20h case    0:*/		return 0x8215EC24;
		  /* 8215EC24h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC24h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC24h case    1:*/		return 0x8215EC28;
	}
	return 0x8215EC28;
} // Block from 8215EC20h-8215EC28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC28);
		  /* 8215EC28h */ case    0:  		/* addi R3, R3, 204 */
		/* 8215EC28h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xCC);
		/* 8215EC28h case    0:*/		return 0x8215EC2C;
		  /* 8215EC2Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215EC2Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC2Ch case    1:*/		return 0x8215EC30;
	}
	return 0x8215EC30;
} // Block from 8215EC28h-8215EC30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC30);
		  /* 8215EC30h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8215EC30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8215EC30h case    0:*/		return 0x8215EC34;
		  /* 8215EC34h */ case    1:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 8215EC34h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 8215EC34h case    1:*/		return 0x8215EC38;
		  /* 8215EC38h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8215EC38h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EC38h case    2:*/		return 0x8215EC3C;
	}
	return 0x8215EC3C;
} // Block from 8215EC30h-8215EC3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC3C);
		  /* 8215EC3Ch */ case    0:  		/* nop */
		/* 8215EC3Ch case    0:*/		cpu::op::nop();
		/* 8215EC3Ch case    0:*/		return 0x8215EC40;
	}
	return 0x8215EC40;
} // Block from 8215EC3Ch-8215EC40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC40h
// Function '?CS_GetInternalConstBlock@XGRAPHICS@@YAPAU_IA_INTERNALCONST_BLOCK_HEADER@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC40);
		  /* 8215EC40h */ case    0:  		/* lwz R11, <#[R3 + 76]> */
		/* 8215EC40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8215EC40h case    0:*/		return 0x8215EC44;
		  /* 8215EC44h */ case    1:  		/* mr R10, R3 */
		/* 8215EC44h case    1:*/		regs.R10 = regs.R3;
		/* 8215EC44h case    1:*/		return 0x8215EC48;
		  /* 8215EC48h */ case    2:  		/* mr R5, R4 */
		/* 8215EC48h case    2:*/		regs.R5 = regs.R4;
		/* 8215EC48h case    2:*/		return 0x8215EC4C;
		  /* 8215EC4Ch */ case    3:  		/* lwz R3, <#[R3 + 72]> */
		/* 8215EC4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000048) );
		/* 8215EC4Ch case    3:*/		return 0x8215EC50;
		  /* 8215EC50h */ case    4:  		/* addi R4, R11, 1 */
		/* 8215EC50h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 8215EC50h case    4:*/		return 0x8215EC54;
		  /* 8215EC54h */ case    5:  		/* stw R4, <#[R10 + 76]> */
		/* 8215EC54h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + 0x0000004C) );
		/* 8215EC54h case    5:*/		return 0x8215EC58;
		  /* 8215EC58h */ case    6:  		/* b -14024 */
		/* 8215EC58h case    6:*/		return 0x8215B590;
		/* 8215EC58h case    6:*/		return 0x8215EC5C;
		  /* 8215EC5Ch */ case    7:  		/* nop */
		/* 8215EC5Ch case    7:*/		cpu::op::nop();
		/* 8215EC5Ch case    7:*/		return 0x8215EC60;
	}
	return 0x8215EC60;
} // Block from 8215EC40h-8215EC60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC60);
		  /* 8215EC60h */ case    0:  		/* mfspr R12, LR */
		/* 8215EC60h case    0:*/		regs.R12 = regs.LR;
		/* 8215EC60h case    0:*/		return 0x8215EC64;
		  /* 8215EC64h */ case    1:  		/* bl -842248 */
		/* 8215EC64h case    1:*/		regs.LR = 0x8215EC68; return 0x8209125C;
		/* 8215EC64h case    1:*/		return 0x8215EC68;
		  /* 8215EC68h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215EC68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215EC68h case    2:*/		return 0x8215EC6C;
		  /* 8215EC6Ch */ case    3:  		/* mr R30, R3 */
		/* 8215EC6Ch case    3:*/		regs.R30 = regs.R3;
		/* 8215EC6Ch case    3:*/		return 0x8215EC70;
		  /* 8215EC70h */ case    4:  		/* mr R29, R4 */
		/* 8215EC70h case    4:*/		regs.R29 = regs.R4;
		/* 8215EC70h case    4:*/		return 0x8215EC74;
		  /* 8215EC74h */ case    5:  		/* li R31, 0 */
		/* 8215EC74h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215EC74h case    5:*/		return 0x8215EC78;
		  /* 8215EC78h */ case    6:  		/* li R3, 0 */
		/* 8215EC78h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EC78h case    6:*/		return 0x8215EC7C;
		  /* 8215EC7Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8215EC7Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215EC7Ch case    7:*/		return 0x8215EC80;
		  /* 8215EC80h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 8215EC80h case    8:*/		if ( regs.CR[6].eq ) { return 0x8215ECC4;  }
		/* 8215EC80h case    8:*/		return 0x8215EC84;
		  /* 8215EC84h */ case    9:  		/* lwz R11, <#[R30 + 76]> */
		/* 8215EC84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8215EC84h case    9:*/		return 0x8215EC88;
		  /* 8215EC88h */ case   10:  		/* cmplw CR6, R31, R11 */
		/* 8215EC88h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215EC88h case   10:*/		return 0x8215EC8C;
		  /* 8215EC8Ch */ case   11:  		/* bc 12, CR6_GT, 28 */
		/* 8215EC8Ch case   11:*/		if ( regs.CR[6].gt ) { return 0x8215ECA8;  }
		/* 8215EC8Ch case   11:*/		return 0x8215EC90;
		  /* 8215EC90h */ case   12:  		/* addi R31, R31, 1 */
		/* 8215EC90h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8215EC90h case   12:*/		return 0x8215EC94;
		  /* 8215EC94h */ case   13:  		/* lwz R3, <#[R30 + 72]> */
		/* 8215EC94h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000048) );
		/* 8215EC94h case   13:*/		return 0x8215EC98;
	}
	return 0x8215EC98;
} // Block from 8215EC60h-8215EC98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215EC98h
// Function '?CS_PostCompile@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EC98);
		  /* 8215EC98h */ case    0:  		/* mr R4, R31 */
		/* 8215EC98h case    0:*/		regs.R4 = regs.R31;
		/* 8215EC98h case    0:*/		return 0x8215EC9C;
		  /* 8215EC9Ch */ case    1:  		/* bl -13708 */
		/* 8215EC9Ch case    1:*/		regs.LR = 0x8215ECA0; return 0x8215B710;
		/* 8215EC9Ch case    1:*/		return 0x8215ECA0;
		  /* 8215ECA0h */ case    2:  		/* cmplw CR6, R3, R29 */
		/* 8215ECA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 8215ECA0h case    2:*/		return 0x8215ECA4;
		  /* 8215ECA4h */ case    3:  		/* bc 4, CR6_EQ, -32 */
		/* 8215ECA4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8215EC84;  }
		/* 8215ECA4h case    3:*/		return 0x8215ECA8;
	}
	return 0x8215ECA8;
} // Block from 8215EC98h-8215ECA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215ECA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ECA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ECA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ECA8);
		  /* 8215ECA8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8215ECA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215ECA8h case    0:*/		return 0x8215ECAC;
		  /* 8215ECACh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8215ECACh case    1:*/		if ( regs.CR[6].eq ) { return 0x8215ECC4;  }
		/* 8215ECACh case    1:*/		return 0x8215ECB0;
		  /* 8215ECB0h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8215ECB0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215ECB0h case    2:*/		return 0x8215ECB4;
		  /* 8215ECB4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8215ECB4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215ECC4;  }
		/* 8215ECB4h case    3:*/		return 0x8215ECB8;
		  /* 8215ECB8h */ case    4:  		/* lwz R11, <#[R30 + 76]> */
		/* 8215ECB8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8215ECB8h case    4:*/		return 0x8215ECBC;
		  /* 8215ECBCh */ case    5:  		/* cmplw CR6, R31, R11 */
		/* 8215ECBCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215ECBCh case    5:*/		return 0x8215ECC0;
		  /* 8215ECC0h */ case    6:  		/* bc 4, CR6_GT, 40 */
		/* 8215ECC0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x8215ECE8;  }
		/* 8215ECC0h case    6:*/		return 0x8215ECC4;
	}
	return 0x8215ECC4;
} // Block from 8215ECA8h-8215ECC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215ECC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ECC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ECC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ECC4);
		  /* 8215ECC4h */ case    0:  		/* lis R11, -32252 */
		/* 8215ECC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215ECC4h case    0:*/		return 0x8215ECC8;
		  /* 8215ECC8h */ case    1:  		/* lis R10, -32252 */
		/* 8215ECC8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215ECC8h case    1:*/		return 0x8215ECCC;
		  /* 8215ECCCh */ case    2:  		/* lis R9, -32253 */
		/* 8215ECCCh case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215ECCCh case    2:*/		return 0x8215ECD0;
		  /* 8215ECD0h */ case    3:  		/* addi R6, R11, -19888 */
		/* 8215ECD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB250);
		/* 8215ECD0h case    3:*/		return 0x8215ECD4;
		  /* 8215ECD4h */ case    4:  		/* addi R5, R10, -19952 */
		/* 8215ECD4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB210);
		/* 8215ECD4h case    4:*/		return 0x8215ECD8;
		  /* 8215ECD8h */ case    5:  		/* addi R4, R9, 27460 */
		/* 8215ECD8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215ECD8h case    5:*/		return 0x8215ECDC;
		  /* 8215ECDCh */ case    6:  		/* li R7, 642 */
		/* 8215ECDCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x282);
		/* 8215ECDCh case    6:*/		return 0x8215ECE0;
		  /* 8215ECE0h */ case    7:  		/* li R3, 0 */
		/* 8215ECE0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ECE0h case    7:*/		return 0x8215ECE4;
		  /* 8215ECE4h */ case    8:  		/* bl -28892 */
		/* 8215ECE4h case    8:*/		regs.LR = 0x8215ECE8; return 0x82157C08;
		/* 8215ECE4h case    8:*/		return 0x8215ECE8;
	}
	return 0x8215ECE8;
} // Block from 8215ECC4h-8215ECE8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215ECE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ECE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ECE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ECE8);
		  /* 8215ECE8h */ case    0:  		/* mr R4, R31 */
		/* 8215ECE8h case    0:*/		regs.R4 = regs.R31;
		/* 8215ECE8h case    0:*/		return 0x8215ECEC;
		  /* 8215ECECh */ case    1:  		/* lwz R3, <#[R30 + 72]> */
		/* 8215ECECh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000048) );
		/* 8215ECECh case    1:*/		return 0x8215ECF0;
		  /* 8215ECF0h */ case    2:  		/* bl -13616 */
		/* 8215ECF0h case    2:*/		regs.LR = 0x8215ECF4; return 0x8215B7C0;
		/* 8215ECF0h case    2:*/		return 0x8215ECF4;
		  /* 8215ECF4h */ case    3:  		/* addi R1, R1, 112 */
		/* 8215ECF4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215ECF4h case    3:*/		return 0x8215ECF8;
		  /* 8215ECF8h */ case    4:  		/* b -842316 */
		/* 8215ECF8h case    4:*/		return 0x820912AC;
		/* 8215ECF8h case    4:*/		return 0x8215ECFC;
		  /* 8215ECFCh */ case    5:  		/* nop */
		/* 8215ECFCh case    5:*/		cpu::op::nop();
		/* 8215ECFCh case    5:*/		return 0x8215ED00;
	}
	return 0x8215ED00;
} // Block from 8215ECE8h-8215ED00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215ED00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ED00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ED00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ED00);
		  /* 8215ED00h */ case    0:  		/* mfspr R12, LR */
		/* 8215ED00h case    0:*/		regs.R12 = regs.LR;
		/* 8215ED00h case    0:*/		return 0x8215ED04;
		  /* 8215ED04h */ case    1:  		/* bl -842424 */
		/* 8215ED04h case    1:*/		regs.LR = 0x8215ED08; return 0x8209124C;
		/* 8215ED04h case    1:*/		return 0x8215ED08;
		  /* 8215ED08h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215ED08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215ED08h case    2:*/		return 0x8215ED0C;
		  /* 8215ED0Ch */ case    3:  		/* lis R8, -32252 */
		/* 8215ED0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8215ED0Ch case    3:*/		return 0x8215ED10;
		  /* 8215ED10h */ case    4:  		/* lis R9, -32253 */
		/* 8215ED10h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215ED10h case    4:*/		return 0x8215ED14;
		  /* 8215ED14h */ case    5:  		/* lis R10, -32252 */
		/* 8215ED14h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215ED14h case    5:*/		return 0x8215ED18;
		  /* 8215ED18h */ case    6:  		/* lis R11, -32252 */
		/* 8215ED18h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215ED18h case    6:*/		return 0x8215ED1C;
		  /* 8215ED1Ch */ case    7:  		/* mr R27, R3 */
		/* 8215ED1Ch case    7:*/		regs.R27 = regs.R3;
		/* 8215ED1Ch case    7:*/		return 0x8215ED20;
	}
	return 0x8215ED20;
} // Block from 8215ED00h-8215ED20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215ED20h
// Function '?CS_SetInterpUsage@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@IW4_E_INTERP_USAGE@1@IT_CS_COMPONENT_SEL@1@W4_E_INTERP_SAMPLING@1@HPAH44@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ED20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ED20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ED20);
		  /* 8215ED20h */ case    0:  		/* li R31, 0 */
		/* 8215ED20h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215ED20h case    0:*/		return 0x8215ED24;
		  /* 8215ED24h */ case    1:  		/* addi R26, R8, -22032 */
		/* 8215ED24h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0xFFFFA9F0);
		/* 8215ED24h case    1:*/		return 0x8215ED28;
		  /* 8215ED28h */ case    2:  		/* addi R29, R9, 27460 */
		/* 8215ED28h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R9,0x6B44);
		/* 8215ED28h case    2:*/		return 0x8215ED2C;
		  /* 8215ED2Ch */ case    3:  		/* addi R25, R10, -19788 */
		/* 8215ED2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFFB2B4);
		/* 8215ED2Ch case    3:*/		return 0x8215ED30;
		  /* 8215ED30h */ case    4:  		/* addi R28, R11, -19888 */
		/* 8215ED30h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB250);
		/* 8215ED30h case    4:*/		return 0x8215ED34;
		  /* 8215ED34h */ case    5:  		/* mr R4, R31 */
		/* 8215ED34h case    5:*/		regs.R4 = regs.R31;
		/* 8215ED34h case    5:*/		return 0x8215ED38;
		  /* 8215ED38h */ case    6:  		/* lwz R3, <#[R27 + 72]> */
		/* 8215ED38h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000048) );
		/* 8215ED38h case    6:*/		return 0x8215ED3C;
		  /* 8215ED3Ch */ case    7:  		/* bl -13868 */
		/* 8215ED3Ch case    7:*/		regs.LR = 0x8215ED40; return 0x8215B710;
		/* 8215ED3Ch case    7:*/		return 0x8215ED40;
		  /* 8215ED40h */ case    8:  		/* or. R30, R3, R3 */
		/* 8215ED40h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215ED40h case    8:*/		return 0x8215ED44;
		  /* 8215ED44h */ case    9:  		/* bc 12, CR0_EQ, 100 */
		/* 8215ED44h case    9:*/		if ( regs.CR[0].eq ) { return 0x8215EDA8;  }
		/* 8215ED44h case    9:*/		return 0x8215ED48;
		  /* 8215ED48h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 8215ED48h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215ED48h case   10:*/		return 0x8215ED4C;
		  /* 8215ED4Ch */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 8215ED4Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8215ED5C;  }
		/* 8215ED4Ch case   11:*/		return 0x8215ED50;
		  /* 8215ED50h */ case   12:  		/* lwz R11, <#[R27 + 76]> */
		/* 8215ED50h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 8215ED50h case   12:*/		return 0x8215ED54;
		  /* 8215ED54h */ case   13:  		/* cmplw CR6, R31, R11 */
		/* 8215ED54h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215ED54h case   13:*/		return 0x8215ED58;
		  /* 8215ED58h */ case   14:  		/* bc 4, CR6_GT, 28 */
		/* 8215ED58h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8215ED74;  }
		/* 8215ED58h case   14:*/		return 0x8215ED5C;
	}
	return 0x8215ED5C;
} // Block from 8215ED20h-8215ED5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215ED5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ED5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ED5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ED5C);
		  /* 8215ED5Ch */ case    0:  		/* mr R6, R28 */
		/* 8215ED5Ch case    0:*/		regs.R6 = regs.R28;
		/* 8215ED5Ch case    0:*/		return 0x8215ED60;
		  /* 8215ED60h */ case    1:  		/* mr R5, R25 */
		/* 8215ED60h case    1:*/		regs.R5 = regs.R25;
		/* 8215ED60h case    1:*/		return 0x8215ED64;
		  /* 8215ED64h */ case    2:  		/* mr R4, R29 */
		/* 8215ED64h case    2:*/		regs.R4 = regs.R29;
		/* 8215ED64h case    2:*/		return 0x8215ED68;
		  /* 8215ED68h */ case    3:  		/* li R7, 664 */
		/* 8215ED68h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x298);
		/* 8215ED68h case    3:*/		return 0x8215ED6C;
		  /* 8215ED6Ch */ case    4:  		/* li R3, 0 */
		/* 8215ED6Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215ED6Ch case    4:*/		return 0x8215ED70;
		  /* 8215ED70h */ case    5:  		/* bl -29032 */
		/* 8215ED70h case    5:*/		regs.LR = 0x8215ED74; return 0x82157C08;
		/* 8215ED70h case    5:*/		return 0x8215ED74;
	}
	return 0x8215ED74;
} // Block from 8215ED5Ch-8215ED74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215ED74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215ED74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215ED74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215ED74);
		  /* 8215ED74h */ case    0:  		/* mr R4, R31 */
		/* 8215ED74h case    0:*/		regs.R4 = regs.R31;
		/* 8215ED74h case    0:*/		return 0x8215ED78;
		  /* 8215ED78h */ case    1:  		/* lwz R3, <#[R27 + 72]> */
		/* 8215ED78h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000048) );
		/* 8215ED78h case    1:*/		return 0x8215ED7C;
		  /* 8215ED7Ch */ case    2:  		/* bl -13756 */
		/* 8215ED7Ch case    2:*/		regs.LR = 0x8215ED80; return 0x8215B7C0;
		/* 8215ED7Ch case    2:*/		return 0x8215ED80;
		  /* 8215ED80h */ case    3:  		/* mr R3, R30 */
		/* 8215ED80h case    3:*/		regs.R3 = regs.R30;
		/* 8215ED80h case    3:*/		return 0x8215ED84;
		  /* 8215ED84h */ case    4:  		/* bl 3028 */
		/* 8215ED84h case    4:*/		regs.LR = 0x8215ED88; return 0x8215F958;
		/* 8215ED84h case    4:*/		return 0x8215ED88;
		  /* 8215ED88h */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8215ED88h case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215ED88h case    5:*/		return 0x8215ED8C;
		  /* 8215ED8Ch */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8215ED8Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8215EDA8;  }
		/* 8215ED8Ch case    6:*/		return 0x8215ED90;
		  /* 8215ED90h */ case    7:  		/* mr R6, R28 */
		/* 8215ED90h case    7:*/		regs.R6 = regs.R28;
		/* 8215ED90h case    7:*/		return 0x8215ED94;
		  /* 8215ED94h */ case    8:  		/* mr R5, R26 */
		/* 8215ED94h case    8:*/		regs.R5 = regs.R26;
		/* 8215ED94h case    8:*/		return 0x8215ED98;
		  /* 8215ED98h */ case    9:  		/* mr R4, R29 */
		/* 8215ED98h case    9:*/		regs.R4 = regs.R29;
		/* 8215ED98h case    9:*/		return 0x8215ED9C;
		  /* 8215ED9Ch */ case   10:  		/* li R7, 670 */
		/* 8215ED9Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x29E);
		/* 8215ED9Ch case   10:*/		return 0x8215EDA0;
		  /* 8215EDA0h */ case   11:  		/* li R3, 0 */
		/* 8215EDA0h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EDA0h case   11:*/		return 0x8215EDA4;
		  /* 8215EDA4h */ case   12:  		/* bl -29084 */
		/* 8215EDA4h case   12:*/		regs.LR = 0x8215EDA8; return 0x82157C08;
		/* 8215EDA4h case   12:*/		return 0x8215EDA8;
	}
	return 0x8215EDA8;
} // Block from 8215ED74h-8215EDA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215EDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EDA8);
		  /* 8215EDA8h */ case    0:  		/* lwz R11, <#[R27 + 76]> */
		/* 8215EDA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 8215EDA8h case    0:*/		return 0x8215EDAC;
		  /* 8215EDACh */ case    1:  		/* addi R31, R31, 1 */
		/* 8215EDACh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8215EDACh case    1:*/		return 0x8215EDB0;
		  /* 8215EDB0h */ case    2:  		/* addi R11, R11, 1 */
		/* 8215EDB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215EDB0h case    2:*/		return 0x8215EDB4;
		  /* 8215EDB4h */ case    3:  		/* cmplw CR6, R31, R11 */
		/* 8215EDB4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215EDB4h case    3:*/		return 0x8215EDB8;
		  /* 8215EDB8h */ case    4:  		/* bc 4, CR6_GT, -132 */
		/* 8215EDB8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8215ED34;  }
		/* 8215EDB8h case    4:*/		return 0x8215EDBC;
		  /* 8215EDBCh */ case    5:  		/* addi R1, R1, 144 */
		/* 8215EDBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215EDBCh case    5:*/		return 0x8215EDC0;
		  /* 8215EDC0h */ case    6:  		/* b -842532 */
		/* 8215EDC0h case    6:*/		return 0x8209129C;
		/* 8215EDC0h case    6:*/		return 0x8215EDC4;
		  /* 8215EDC4h */ case    7:  		/* nop */
		/* 8215EDC4h case    7:*/		cpu::op::nop();
		/* 8215EDC4h case    7:*/		return 0x8215EDC8;
	}
	return 0x8215EDC8;
} // Block from 8215EDA8h-8215EDC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215EDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EDC8);
		  /* 8215EDC8h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 8215EDC8h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215EDC8h case    0:*/		return 0x8215EDCC;
		  /* 8215EDCCh */ case    1:  		/* li R4, 256 */
		/* 8215EDCCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8215EDCCh case    1:*/		return 0x8215EDD0;
		  /* 8215EDD0h */ case    2:  		/* lis R5, -32216 */
		/* 8215EDD0h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8228);
		/* 8215EDD0h case    2:*/		return 0x8215EDD4;
		  /* 8215EDD4h */ case    3:  		/* mr R6, R3 */
		/* 8215EDD4h case    3:*/		regs.R6 = regs.R3;
		/* 8215EDD4h case    3:*/		return 0x8215EDD8;
		  /* 8215EDD8h */ case    4:  		/* stw R4, <#[R3 + 4]> */
		/* 8215EDD8h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8215EDD8h case    4:*/		return 0x8215EDDC;
		  /* 8215EDDCh */ case    5:  		/* li R10, 8 */
		/* 8215EDDCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 8215EDDCh case    5:*/		return 0x8215EDE0;
		  /* 8215EDE0h */ case    6:  		/* li R11, 2 */
		/* 8215EDE0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8215EDE0h case    6:*/		return 0x8215EDE4;
		  /* 8215EDE4h */ case    7:  		/* li R9, 32 */
		/* 8215EDE4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x20);
		/* 8215EDE4h case    7:*/		return 0x8215EDE8;
		  /* 8215EDE8h */ case    8:  		/* stw R10, <#[R3 + 28]> */
		/* 8215EDE8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 8215EDE8h case    8:*/		return 0x8215EDEC;
		  /* 8215EDECh */ case    9:  		/* li R7, 16 */
		/* 8215EDECh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x10);
		/* 8215EDECh case    9:*/		return 0x8215EDF0;
		  /* 8215EDF0h */ case   10:  		/* stw R10, <#[R3 + 32]> */
		/* 8215EDF0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000020) );
		/* 8215EDF0h case   10:*/		return 0x8215EDF4;
		  /* 8215EDF4h */ case   11:  		/* li R8, 64 */
		/* 8215EDF4h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x40);
		/* 8215EDF4h case   11:*/		return 0x8215EDF8;
		  /* 8215EDF8h */ case   12:  		/* stw R9, <#[R3 + 52]> */
		/* 8215EDF8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000034) );
		/* 8215EDF8h case   12:*/		return 0x8215EDFC;
		  /* 8215EDFCh */ case   13:  		/* addi R5, R5, -24956 */
		/* 8215EDFCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFF9E84);
		/* 8215EDFCh case   13:*/		return 0x8215EE00;
		  /* 8215EE00h */ case   14:  		/* stw R7, <#[R3 + 8]> */
		/* 8215EE00h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000008) );
		/* 8215EE00h case   14:*/		return 0x8215EE04;
		  /* 8215EE04h */ case   15:  		/* li R31, 224 */
		/* 8215EE04h case   15:*/		cpu::op::li<0>(regs,&regs.R31,0xE0);
		/* 8215EE04h case   15:*/		return 0x8215EE08;
		  /* 8215EE08h */ case   16:  		/* stw R11, <#[R3 + 56]> */
		/* 8215EE08h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8215EE08h case   16:*/		return 0x8215EE0C;
		  /* 8215EE0Ch */ case   17:  		/* li R4, 28 */
		/* 8215EE0Ch case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8215EE0Ch case   17:*/		return 0x8215EE10;
		  /* 8215EE10h */ case   18:  		/* stw R5, <#[R3]> */
		/* 8215EE10h case   18:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 8215EE10h case   18:*/		return 0x8215EE14;
		  /* 8215EE14h */ case   19:  		/* stw R8, <#[R3 + 12]> */
		/* 8215EE14h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x0000000C) );
		/* 8215EE14h case   19:*/		return 0x8215EE18;
		  /* 8215EE18h */ case   20:  		/* li R3, 0 */
		/* 8215EE18h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EE18h case   20:*/		return 0x8215EE1C;
		  /* 8215EE1Ch */ case   21:  		/* stw R9, <#[R6 + 36]> */
		/* 8215EE1Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000024) );
		/* 8215EE1Ch case   21:*/		return 0x8215EE20;
		  /* 8215EE20h */ case   22:  		/* stw R11, <#[R6 + 60]> */
		/* 8215EE20h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x0000003C) );
		/* 8215EE20h case   22:*/		return 0x8215EE24;
		  /* 8215EE24h */ case   23:  		/* stw R31, <#[R6 + 16]> */
		/* 8215EE24h case   23:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R6 + 0x00000010) );
		/* 8215EE24h case   23:*/		return 0x8215EE28;
		  /* 8215EE28h */ case   24:  		/* stw R10, <#[R6 + 40]> */
		/* 8215EE28h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x00000028) );
		/* 8215EE28h case   24:*/		return 0x8215EE2C;
		  /* 8215EE2Ch */ case   25:  		/* stw R4, <#[R6 + 64]> */
		/* 8215EE2Ch case   25:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R6 + 0x00000040) );
		/* 8215EE2Ch case   25:*/		return 0x8215EE30;
		  /* 8215EE30h */ case   26:  		/* stw R7, <#[R6 + 20]> */
		/* 8215EE30h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000014) );
		/* 8215EE30h case   26:*/		return 0x8215EE34;
		  /* 8215EE34h */ case   27:  		/* stw R10, <#[R6 + 44]> */
		/* 8215EE34h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x0000002C) );
		/* 8215EE34h case   27:*/		return 0x8215EE38;
		  /* 8215EE38h */ case   28:  		/* stw R11, <#[R6 + 68]> */
		/* 8215EE38h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000044) );
		/* 8215EE38h case   28:*/		return 0x8215EE3C;
		  /* 8215EE3Ch */ case   29:  		/* stw R8, <#[R6 + 24]> */
		/* 8215EE3Ch case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000018) );
		/* 8215EE3Ch case   29:*/		return 0x8215EE40;
		  /* 8215EE40h */ case   30:  		/* stw R9, <#[R6 + 48]> */
		/* 8215EE40h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000030) );
		/* 8215EE40h case   30:*/		return 0x8215EE44;
		  /* 8215EE44h */ case   31:  		/* stw R11, <#[R6 + 72]> */
		/* 8215EE44h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000048) );
		/* 8215EE44h case   31:*/		return 0x8215EE48;
		  /* 8215EE48h */ case   32:  		/* ld R31, <#[R1 - 8]> */
		/* 8215EE48h case   32:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215EE48h case   32:*/		return 0x8215EE4C;
		  /* 8215EE4Ch */ case   33:  		/* bclr 20, CR0_LT */
		/* 8215EE4Ch case   33:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215EE4Ch case   33:*/		return 0x8215EE50;
	}
	return 0x8215EE50;
} // Block from 8215EDC8h-8215EE50h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8215EE50h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EE50);
		  /* 8215EE50h */ case    0:  		/* mfspr R12, LR */
		/* 8215EE50h case    0:*/		regs.R12 = regs.LR;
		/* 8215EE50h case    0:*/		return 0x8215EE54;
		  /* 8215EE54h */ case    1:  		/* bl -842760 */
		/* 8215EE54h case    1:*/		regs.LR = 0x8215EE58; return 0x8209124C;
		/* 8215EE54h case    1:*/		return 0x8215EE58;
		  /* 8215EE58h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8215EE58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8215EE58h case    2:*/		return 0x8215EE5C;
		  /* 8215EE5Ch */ case    3:  		/* mr R31, R3 */
		/* 8215EE5Ch case    3:*/		regs.R31 = regs.R3;
		/* 8215EE5Ch case    3:*/		return 0x8215EE60;
		  /* 8215EE60h */ case    4:  		/* cmplwi CR6, R4, 13 */
		/* 8215EE60h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000000D);
		/* 8215EE60h case    4:*/		return 0x8215EE64;
		  /* 8215EE64h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8215EE64h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215EE70;  }
		/* 8215EE64h case    5:*/		return 0x8215EE68;
		  /* 8215EE68h */ case    6:  		/* cmplwi CR6, R4, 11 */
		/* 8215EE68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000000B);
		/* 8215EE68h case    6:*/		return 0x8215EE6C;
		  /* 8215EE6Ch */ case    7:  		/* bc 4, CR6_EQ, 1452 */
		/* 8215EE6Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8215F418;  }
		/* 8215EE6Ch case    7:*/		return 0x8215EE70;
	}
	return 0x8215EE70;
} // Block from 8215EE50h-8215EE70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215EE70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EE70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EE70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EE70);
		  /* 8215EE70h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8215EE70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215EE70h case    0:*/		return 0x8215EE74;
		  /* 8215EE74h */ case    1:  		/* bc 12, CR6_EQ, 1444 */
		/* 8215EE74h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215F418;  }
		/* 8215EE74h case    1:*/		return 0x8215EE78;
		  /* 8215EE78h */ case    2:  		/* lwz R4, <#[R31 + 40]> */
		/* 8215EE78h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000028) );
		/* 8215EE78h case    2:*/		return 0x8215EE7C;
		  /* 8215EE7Ch */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 8215EE7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215EE7Ch case    3:*/		return 0x8215EE80;
		  /* 8215EE80h */ case    4:  		/* bc 12, CR6_EQ, 1432 */
		/* 8215EE80h case    4:*/		if ( regs.CR[6].eq ) { return 0x8215F418;  }
		/* 8215EE80h case    4:*/		return 0x8215EE84;
		  /* 8215EE84h */ case    5:  		/* lwz R10, <#[R31 + 68]> */
		/* 8215EE84h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 8215EE84h case    5:*/		return 0x8215EE88;
		  /* 8215EE88h */ case    6:  		/* lwz R9, <#[R31 + 64]> */
		/* 8215EE88h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000040) );
		/* 8215EE88h case    6:*/		return 0x8215EE8C;
		  /* 8215EE8Ch */ case    7:  		/* lwz R8, <#[R31 + 60]> */
		/* 8215EE8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000003C) );
		/* 8215EE8Ch case    7:*/		return 0x8215EE90;
		  /* 8215EE90h */ case    8:  		/* lwz R7, <#[R31 + 56]> */
		/* 8215EE90h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000038) );
		/* 8215EE90h case    8:*/		return 0x8215EE94;
		  /* 8215EE94h */ case    9:  		/* lwz R6, <#[R31 + 52]> */
		/* 8215EE94h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000034) );
		/* 8215EE94h case    9:*/		return 0x8215EE98;
		  /* 8215EE98h */ case   10:  		/* lwz R5, <#[R31 + 48]> */
		/* 8215EE98h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000030) );
		/* 8215EE98h case   10:*/		return 0x8215EE9C;
		  /* 8215EE9Ch */ case   11:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215EE9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215EE9Ch case   11:*/		return 0x8215EEA0;
		  /* 8215EEA0h */ case   12:  		/* bl -28600 */
		/* 8215EEA0h case   12:*/		regs.LR = 0x8215EEA4; return 0x82157EE8;
		/* 8215EEA0h case   12:*/		return 0x8215EEA4;
		  /* 8215EEA4h */ case   13:  		/* lis R11, -32253 */
		/* 8215EEA4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215EEA4h case   13:*/		return 0x8215EEA8;
		  /* 8215EEA8h */ case   14:  		/* lis R10, -32252 */
		/* 8215EEA8h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215EEA8h case   14:*/		return 0x8215EEAC;
		  /* 8215EEACh */ case   15:  		/* addi R27, R11, 27460 */
		/* 8215EEACh case   15:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215EEACh case   15:*/		return 0x8215EEB0;
		  /* 8215EEB0h */ case   16:  		/* addi R26, R10, -19888 */
		/* 8215EEB0h case   16:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB250);
		/* 8215EEB0h case   16:*/		return 0x8215EEB4;
		  /* 8215EEB4h */ case   17:  		/* lwz R11, <#[R31 + 36]> */
		/* 8215EEB4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8215EEB4h case   17:*/		return 0x8215EEB8;
		  /* 8215EEB8h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8215EEB8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215EEB8h case   18:*/		return 0x8215EEBC;
		  /* 8215EEBCh */ case   19:  		/* bc 4, CR6_EQ, 32 */
		/* 8215EEBCh case   19:*/		if ( !regs.CR[6].eq ) { return 0x8215EEDC;  }
		/* 8215EEBCh case   19:*/		return 0x8215EEC0;
		  /* 8215EEC0h */ case   20:  		/* lis R11, -32252 */
		/* 8215EEC0h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EEC0h case   20:*/		return 0x8215EEC4;
		  /* 8215EEC4h */ case   21:  		/* mr R6, R26 */
		/* 8215EEC4h case   21:*/		regs.R6 = regs.R26;
		/* 8215EEC4h case   21:*/		return 0x8215EEC8;
		  /* 8215EEC8h */ case   22:  		/* addi R5, R11, -19232 */
		/* 8215EEC8h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB4E0);
		/* 8215EEC8h case   22:*/		return 0x8215EECC;
		  /* 8215EECCh */ case   23:  		/* mr R4, R27 */
		/* 8215EECCh case   23:*/		regs.R4 = regs.R27;
		/* 8215EECCh case   23:*/		return 0x8215EED0;
		  /* 8215EED0h */ case   24:  		/* li R7, 291 */
		/* 8215EED0h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x123);
		/* 8215EED0h case   24:*/		return 0x8215EED4;
		  /* 8215EED4h */ case   25:  		/* li R3, 0 */
		/* 8215EED4h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EED4h case   25:*/		return 0x8215EED8;
		  /* 8215EED8h */ case   26:  		/* bl -29392 */
		/* 8215EED8h case   26:*/		regs.LR = 0x8215EEDC; return 0x82157C08;
		/* 8215EED8h case   26:*/		return 0x8215EEDC;
	}
	return 0x8215EEDC;
} // Block from 8215EE70h-8215EEDCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 8215EEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EEDC);
		  /* 8215EEDCh */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8215EEDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8215EEDCh case    0:*/		return 0x8215EEE0;
		  /* 8215EEE0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215EEE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215EEE0h case    1:*/		return 0x8215EEE4;
		  /* 8215EEE4h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 8215EEE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215EF58;  }
		/* 8215EEE4h case    2:*/		return 0x8215EEE8;
		  /* 8215EEE8h */ case    3:  		/* lis R11, -32217 */
		/* 8215EEE8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8215EEE8h case    3:*/		return 0x8215EEEC;
		  /* 8215EEECh */ case    4:  		/* li R29, 15 */
		/* 8215EEECh case    4:*/		cpu::op::li<0>(regs,&regs.R29,0xF);
		/* 8215EEECh case    4:*/		return 0x8215EEF0;
		  /* 8215EEF0h */ case    5:  		/* addi R11, R11, 19864 */
		/* 8215EEF0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4D98);
		/* 8215EEF0h case    5:*/		return 0x8215EEF4;
		  /* 8215EEF4h */ case    6:  		/* addi R30, R11, 8 */
		/* 8215EEF4h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 8215EEF4h case    6:*/		return 0x8215EEF8;
		  /* 8215EEF8h */ case    7:  		/* lis R11, -32252 */
		/* 8215EEF8h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EEF8h case    7:*/		return 0x8215EEFC;
		  /* 8215EEFCh */ case    8:  		/* addi R28, R11, -19368 */
		/* 8215EEFCh case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB458);
		/* 8215EEFCh case    8:*/		return 0x8215EF00;
		  /* 8215EF00h */ case    9:  		/* lwz R11, <#[R31 + 36]> */
		/* 8215EF00h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8215EF00h case    9:*/		return 0x8215EF04;
		  /* 8215EF04h */ case   10:  		/* mr R5, R30 */
		/* 8215EF04h case   10:*/		regs.R5 = regs.R30;
		/* 8215EF04h case   10:*/		return 0x8215EF08;
		  /* 8215EF08h */ case   11:  		/* lwz R4, <#[R30 - 4]> */
		/* 8215EF08h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8215EF08h case   11:*/		return 0x8215EF0C;
		  /* 8215EF0Ch */ case   12:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215EF0Ch case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215EF0Ch case   12:*/		return 0x8215EF10;
		  /* 8215EF10h */ case   13:  		/* mtspr CTR, R11 */
		/* 8215EF10h case   13:*/		regs.CTR = regs.R11;
		/* 8215EF10h case   13:*/		return 0x8215EF14;
		  /* 8215EF14h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 8215EF14h case   14:*/		if ( 1 ) { regs.LR = 0x8215EF18; return (uint32)regs.CTR; }
		/* 8215EF14h case   14:*/		return 0x8215EF18;
		  /* 8215EF18h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8215EF18h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8215EF18h case   15:*/		return 0x8215EF1C;
		  /* 8215EF1Ch */ case   16:  		/* cmpwi CR6, R11, 1 */
		/* 8215EF1Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8215EF1Ch case   16:*/		return 0x8215EF20;
		  /* 8215EF20h */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 8215EF20h case   17:*/		if ( regs.CR[6].eq ) { return 0x8215EF4C;  }
		/* 8215EF20h case   17:*/		return 0x8215EF24;
		  /* 8215EF24h */ case   18:  		/* cmpwi CR6, R11, 2 */
		/* 8215EF24h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8215EF24h case   18:*/		return 0x8215EF28;
		  /* 8215EF28h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 8215EF28h case   19:*/		if ( regs.CR[6].eq ) { return 0x8215EF4C;  }
		/* 8215EF28h case   19:*/		return 0x8215EF2C;
		  /* 8215EF2Ch */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 8215EF2Ch case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8215EF2Ch case   20:*/		return 0x8215EF30;
		  /* 8215EF30h */ case   21:  		/* bc 12, CR6_EQ, 28 */
		/* 8215EF30h case   21:*/		if ( regs.CR[6].eq ) { return 0x8215EF4C;  }
		/* 8215EF30h case   21:*/		return 0x8215EF34;
		  /* 8215EF34h */ case   22:  		/* mr R6, R26 */
		/* 8215EF34h case   22:*/		regs.R6 = regs.R26;
		/* 8215EF34h case   22:*/		return 0x8215EF38;
		  /* 8215EF38h */ case   23:  		/* mr R5, R28 */
		/* 8215EF38h case   23:*/		regs.R5 = regs.R28;
		/* 8215EF38h case   23:*/		return 0x8215EF3C;
		  /* 8215EF3Ch */ case   24:  		/* mr R4, R27 */
		/* 8215EF3Ch case   24:*/		regs.R4 = regs.R27;
		/* 8215EF3Ch case   24:*/		return 0x8215EF40;
		  /* 8215EF40h */ case   25:  		/* li R7, 306 */
		/* 8215EF40h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x132);
		/* 8215EF40h case   25:*/		return 0x8215EF44;
		  /* 8215EF44h */ case   26:  		/* li R3, 0 */
		/* 8215EF44h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EF44h case   26:*/		return 0x8215EF48;
		  /* 8215EF48h */ case   27:  		/* bl -29504 */
		/* 8215EF48h case   27:*/		regs.LR = 0x8215EF4C; return 0x82157C08;
		/* 8215EF48h case   27:*/		return 0x8215EF4C;
	}
	return 0x8215EF4C;
} // Block from 8215EEDCh-8215EF4Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8215EF4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EF4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EF4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EF4C);
		  /* 8215EF4Ch */ case    0:  		/* addic. R29, R29, -1 */
		/* 8215EF4Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8215EF4Ch case    0:*/		return 0x8215EF50;
		  /* 8215EF50h */ case    1:  		/* addi R30, R30, 12 */
		/* 8215EF50h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xC);
		/* 8215EF50h case    1:*/		return 0x8215EF54;
		  /* 8215EF54h */ case    2:  		/* bc 4, CR0_EQ, -84 */
		/* 8215EF54h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8215EF00;  }
		/* 8215EF54h case    2:*/		return 0x8215EF58;
	}
	return 0x8215EF58;
} // Block from 8215EF4Ch-8215EF58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215EF58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EF58);
		  /* 8215EF58h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8215EF58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215EF58h case    0:*/		return 0x8215EF5C;
		  /* 8215EF5Ch */ case    1:  		/* cmplwi CR6, R11, 50 */
		/* 8215EF5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000032);
		/* 8215EF5Ch case    1:*/		return 0x8215EF60;
		  /* 8215EF60h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8215EF60h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215EF80;  }
		/* 8215EF60h case    2:*/		return 0x8215EF64;
		  /* 8215EF64h */ case    3:  		/* lis R11, -32252 */
		/* 8215EF64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EF64h case    3:*/		return 0x8215EF68;
		  /* 8215EF68h */ case    4:  		/* mr R6, R26 */
		/* 8215EF68h case    4:*/		regs.R6 = regs.R26;
		/* 8215EF68h case    4:*/		return 0x8215EF6C;
		  /* 8215EF6Ch */ case    5:  		/* addi R5, R11, -19420 */
		/* 8215EF6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB424);
		/* 8215EF6Ch case    5:*/		return 0x8215EF70;
		  /* 8215EF70h */ case    6:  		/* mr R4, R27 */
		/* 8215EF70h case    6:*/		regs.R4 = regs.R27;
		/* 8215EF70h case    6:*/		return 0x8215EF74;
		  /* 8215EF74h */ case    7:  		/* li R7, 313 */
		/* 8215EF74h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x139);
		/* 8215EF74h case    7:*/		return 0x8215EF78;
		  /* 8215EF78h */ case    8:  		/* li R3, 0 */
		/* 8215EF78h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EF78h case    8:*/		return 0x8215EF7C;
		  /* 8215EF7Ch */ case    9:  		/* bl -29556 */
		/* 8215EF7Ch case    9:*/		regs.LR = 0x8215EF80; return 0x82157C08;
		/* 8215EF7Ch case    9:*/		return 0x8215EF80;
	}
	return 0x8215EF80;
} // Block from 8215EF58h-8215EF80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215EF80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EF80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EF80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EF80);
		  /* 8215EF80h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215EF80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215EF80h case    0:*/		return 0x8215EF84;
		  /* 8215EF84h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215EF84h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215EF84h case    1:*/		return 0x8215EF88;
		  /* 8215EF88h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215EF88h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215EFA8;  }
		/* 8215EF88h case    2:*/		return 0x8215EF8C;
		  /* 8215EF8Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215EF8Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EF8Ch case    3:*/		return 0x8215EF90;
		  /* 8215EF90h */ case    4:  		/* mr R6, R26 */
		/* 8215EF90h case    4:*/		regs.R6 = regs.R26;
		/* 8215EF90h case    4:*/		return 0x8215EF94;
		  /* 8215EF94h */ case    5:  		/* addi R5, R11, -19456 */
		/* 8215EF94h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB400);
		/* 8215EF94h case    5:*/		return 0x8215EF98;
		  /* 8215EF98h */ case    6:  		/* mr R4, R27 */
		/* 8215EF98h case    6:*/		regs.R4 = regs.R27;
		/* 8215EF98h case    6:*/		return 0x8215EF9C;
		  /* 8215EF9Ch */ case    7:  		/* li R7, 316 */
		/* 8215EF9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x13C);
		/* 8215EF9Ch case    7:*/		return 0x8215EFA0;
		  /* 8215EFA0h */ case    8:  		/* li R3, 0 */
		/* 8215EFA0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EFA0h case    8:*/		return 0x8215EFA4;
		  /* 8215EFA4h */ case    9:  		/* bl -29596 */
		/* 8215EFA4h case    9:*/		regs.LR = 0x8215EFA8; return 0x82157C08;
		/* 8215EFA4h case    9:*/		return 0x8215EFA8;
	}
	return 0x8215EFA8;
} // Block from 8215EF80h-8215EFA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215EFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EFA8);
		  /* 8215EFA8h */ case    0:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215EFA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215EFA8h case    0:*/		return 0x8215EFAC;
		  /* 8215EFACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215EFACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215EFACh case    1:*/		return 0x8215EFB0;
		  /* 8215EFB0h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215EFB0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215EFD0;  }
		/* 8215EFB0h case    2:*/		return 0x8215EFB4;
		  /* 8215EFB4h */ case    3:  		/* lis R11, -32252 */
		/* 8215EFB4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215EFB4h case    3:*/		return 0x8215EFB8;
		  /* 8215EFB8h */ case    4:  		/* mr R6, R26 */
		/* 8215EFB8h case    4:*/		regs.R6 = regs.R26;
		/* 8215EFB8h case    4:*/		return 0x8215EFBC;
		  /* 8215EFBCh */ case    5:  		/* addi R5, R11, -19488 */
		/* 8215EFBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB3E0);
		/* 8215EFBCh case    5:*/		return 0x8215EFC0;
		  /* 8215EFC0h */ case    6:  		/* mr R4, R27 */
		/* 8215EFC0h case    6:*/		regs.R4 = regs.R27;
		/* 8215EFC0h case    6:*/		return 0x8215EFC4;
		  /* 8215EFC4h */ case    7:  		/* li R7, 317 */
		/* 8215EFC4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x13D);
		/* 8215EFC4h case    7:*/		return 0x8215EFC8;
		  /* 8215EFC8h */ case    8:  		/* li R3, 0 */
		/* 8215EFC8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215EFC8h case    8:*/		return 0x8215EFCC;
		  /* 8215EFCCh */ case    9:  		/* bl -29636 */
		/* 8215EFCCh case    9:*/		regs.LR = 0x8215EFD0; return 0x82157C08;
		/* 8215EFCCh case    9:*/		return 0x8215EFD0;
	}
	return 0x8215EFD0;
} // Block from 8215EFA8h-8215EFD0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215EFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215EFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215EFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215EFD0);
		  /* 8215EFD0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215EFD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215EFD0h case    0:*/		return 0x8215EFD4;
		  /* 8215EFD4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215EFD4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215EFD4h case    1:*/		return 0x8215EFD8;
		  /* 8215EFD8h */ case    2:  		/* bc 12, CR6_EQ, 1088 */
		/* 8215EFD8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215F418;  }
		/* 8215EFD8h case    2:*/		return 0x8215EFDC;
		  /* 8215EFDCh */ case    3:  		/* lwz R10, <#[R31 + 24]> */
		/* 8215EFDCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8215EFDCh case    3:*/		return 0x8215EFE0;
		  /* 8215EFE0h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8215EFE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8215EFE0h case    4:*/		return 0x8215EFE4;
		  /* 8215EFE4h */ case    5:  		/* bc 12, CR6_EQ, 1076 */
		/* 8215EFE4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215F418;  }
		/* 8215EFE4h case    5:*/		return 0x8215EFE8;
		  /* 8215EFE8h */ case    6:  		/* li R4, 312 */
		/* 8215EFE8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x138);
		/* 8215EFE8h case    6:*/		return 0x8215EFEC;
		  /* 8215EFECh */ case    7:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215EFECh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215EFECh case    7:*/		return 0x8215EFF0;
		  /* 8215EFF0h */ case    8:  		/* mtspr CTR, R11 */
		/* 8215EFF0h case    8:*/		regs.CTR = regs.R11;
		/* 8215EFF0h case    8:*/		return 0x8215EFF4;
		  /* 8215EFF4h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8215EFF4h case    9:*/		if ( 1 ) { regs.LR = 0x8215EFF8; return (uint32)regs.CTR; }
		/* 8215EFF4h case    9:*/		return 0x8215EFF8;
		  /* 8215EFF8h */ case   10:  		/* or. R30, R3, R3 */
		/* 8215EFF8h case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215EFF8h case   10:*/		return 0x8215EFFC;
		  /* 8215EFFCh */ case   11:  		/* bc 12, CR0_EQ, 1052 */
		/* 8215EFFCh case   11:*/		if ( regs.CR[0].eq ) { return 0x8215F418;  }
		/* 8215EFFCh case   11:*/		return 0x8215F000;
		  /* 8215F000h */ case   12:  		/* lis R10, -32217 */
		/* 8215F000h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8215F000h case   12:*/		return 0x8215F004;
		  /* 8215F004h */ case   13:  		/* addi R11, R30, 204 */
		/* 8215F004h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xCC);
		/* 8215F004h case   13:*/		return 0x8215F008;
		  /* 8215F008h */ case   14:  		/* addi R10, R10, 21680 */
		/* 8215F008h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x54B0);
		/* 8215F008h case   14:*/		return 0x8215F00C;
		  /* 8215F00Ch */ case   15:  		/* li R6, 5 */
		/* 8215F00Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x5);
		/* 8215F00Ch case   15:*/		return 0x8215F010;
		  /* 8215F010h */ case   16:  		/* li R9, 5 */
		/* 8215F010h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 8215F010h case   16:*/		return 0x8215F014;
		  /* 8215F014h */ case   17:  		/* addi R8, R10, -4 */
		/* 8215F014h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFC);
		/* 8215F014h case   17:*/		return 0x8215F018;
		  /* 8215F018h */ case   18:  		/* addi R7, R11, -4 */
		/* 8215F018h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFC);
		/* 8215F018h case   18:*/		return 0x8215F01C;
		  /* 8215F01Ch */ case   19:  		/* mtspr CTR, R9 */
		/* 8215F01Ch case   19:*/		regs.CTR = regs.R9;
		/* 8215F01Ch case   19:*/		return 0x8215F020;
		  /* 8215F020h */ case   20:  		/* lwzu R9, <#[R8 + 4]> */
		/* 8215F020h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 8215F020h case   20:*/		return 0x8215F024;
		  /* 8215F024h */ case   21:  		/* stwu R9, <#[R7 + 4]> */
		/* 8215F024h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000004) );
		regs.R7 = (uint32)(regs.R7 + 0x00000004);
		/* 8215F024h case   21:*/		return 0x8215F028;
		  /* 8215F028h */ case   22:  		/* bc 16, CR0_LT, -8 */
		/* 8215F028h case   22:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8215F020;  }
		/* 8215F028h case   22:*/		return 0x8215F02C;
		  /* 8215F02Ch */ case   23:  		/* addic. R6, R6, -1 */
		/* 8215F02Ch case   23:*/		cpu::op::addic<1>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 8215F02Ch case   23:*/		return 0x8215F030;
		  /* 8215F030h */ case   24:  		/* addi R11, R11, 20 */
		/* 8215F030h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x14);
		/* 8215F030h case   24:*/		return 0x8215F034;
		  /* 8215F034h */ case   25:  		/* addi R10, R10, 20 */
		/* 8215F034h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x14);
		/* 8215F034h case   25:*/		return 0x8215F038;
	}
	return 0x8215F038;
} // Block from 8215EFD0h-8215F038h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215F038h
// Function '?CS_SetPatchDescription@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CS_COMPILED_SHADER@1@PAU_CS_GENERIC_PATCH_DESCRIPTION@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F038);
		  /* 8215F038h */ case    0:  		/* bc 4, CR0_EQ, -40 */
		/* 8215F038h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8215F010;  }
		/* 8215F038h case    0:*/		return 0x8215F03C;
		  /* 8215F03Ch */ case    1:  		/* li R11, 10 */
		/* 8215F03Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 8215F03Ch case    1:*/		return 0x8215F040;
		  /* 8215F040h */ case    2:  		/* li R29, 0 */
		/* 8215F040h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215F040h case    2:*/		return 0x8215F044;
		  /* 8215F044h */ case    3:  		/* stw R11, <#[R30 + 304]> */
		/* 8215F044h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000130) );
		/* 8215F044h case    3:*/		return 0x8215F048;
		  /* 8215F048h */ case    4:  		/* li R5, 72 */
		/* 8215F048h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x48);
		/* 8215F048h case    4:*/		return 0x8215F04C;
		  /* 8215F04Ch */ case    5:  		/* stw R11, <#[R30 + 308]> */
		/* 8215F04Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000134) );
		/* 8215F04Ch case    5:*/		return 0x8215F050;
		  /* 8215F050h */ case    6:  		/* mr R4, R31 */
		/* 8215F050h case    6:*/		regs.R4 = regs.R31;
		/* 8215F050h case    6:*/		return 0x8215F054;
		  /* 8215F054h */ case    7:  		/* stw R29, <#[R30 + 76]> */
		/* 8215F054h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x0000004C) );
		/* 8215F054h case    7:*/		return 0x8215F058;
		  /* 8215F058h */ case    8:  		/* mr R3, R30 */
		/* 8215F058h case    8:*/		regs.R3 = regs.R30;
		/* 8215F058h case    8:*/		return 0x8215F05C;
		  /* 8215F05Ch */ case    9:  		/* bl -841388 */
		/* 8215F05Ch case    9:*/		regs.LR = 0x8215F060; return 0x820919B0;
		/* 8215F05Ch case    9:*/		return 0x8215F060;
		  /* 8215F060h */ case   10:  		/* li R7, 100 */
		/* 8215F060h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 8215F060h case   10:*/		return 0x8215F064;
		  /* 8215F064h */ case   11:  		/* li R6, 1000 */
		/* 8215F064h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x3E8);
		/* 8215F064h case   11:*/		return 0x8215F068;
		  /* 8215F068h */ case   12:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F068h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F068h case   12:*/		return 0x8215F06C;
		  /* 8215F06Ch */ case   13:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F06Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F06Ch case   13:*/		return 0x8215F070;
		  /* 8215F070h */ case   14:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F070h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F070h case   14:*/		return 0x8215F074;
		  /* 8215F074h */ case   15:  		/* bl 708796 */
		/* 8215F074h case   15:*/		regs.LR = 0x8215F078; return 0x8220C130;
		/* 8215F074h case   15:*/		return 0x8215F078;
		  /* 8215F078h */ case   16:  		/* stw R3, <#[R30 + 112]> */
		/* 8215F078h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000070) );
		/* 8215F078h case   16:*/		return 0x8215F07C;
		  /* 8215F07Ch */ case   17:  		/* li R7, 100 */
		/* 8215F07Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 8215F07Ch case   17:*/		return 0x8215F080;
		  /* 8215F080h */ case   18:  		/* li R6, 1000 */
		/* 8215F080h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x3E8);
		/* 8215F080h case   18:*/		return 0x8215F084;
		  /* 8215F084h */ case   19:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F084h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F084h case   19:*/		return 0x8215F088;
		  /* 8215F088h */ case   20:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F088h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F088h case   20:*/		return 0x8215F08C;
		  /* 8215F08Ch */ case   21:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F08Ch case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F08Ch case   21:*/		return 0x8215F090;
		  /* 8215F090h */ case   22:  		/* bl 709176 */
		/* 8215F090h case   22:*/		regs.LR = 0x8215F094; return 0x8220C2C8;
		/* 8215F090h case   22:*/		return 0x8215F094;
		  /* 8215F094h */ case   23:  		/* stw R3, <#[R30 + 116]> */
		/* 8215F094h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000074) );
		/* 8215F094h case   23:*/		return 0x8215F098;
		  /* 8215F098h */ case   24:  		/* li R7, 100 */
		/* 8215F098h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 8215F098h case   24:*/		return 0x8215F09C;
		  /* 8215F09Ch */ case   25:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F09Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F09Ch case   25:*/		return 0x8215F0A0;
		  /* 8215F0A0h */ case   26:  		/* li R6, 10 */
		/* 8215F0A0h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8215F0A0h case   26:*/		return 0x8215F0A4;
		  /* 8215F0A4h */ case   27:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F0A4h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F0A4h case   27:*/		return 0x8215F0A8;
		  /* 8215F0A8h */ case   28:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F0A8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F0A8h case   28:*/		return 0x8215F0AC;
		  /* 8215F0ACh */ case   29:  		/* bl 709556 */
		/* 8215F0ACh case   29:*/		regs.LR = 0x8215F0B0; return 0x8220C460;
		/* 8215F0ACh case   29:*/		return 0x8215F0B0;
		  /* 8215F0B0h */ case   30:  		/* lwz R11, <#[R30 + 112]> */
		/* 8215F0B0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8215F0B0h case   30:*/		return 0x8215F0B4;
		  /* 8215F0B4h */ case   31:  		/* stw R3, <#[R30 + 120]> */
		/* 8215F0B4h case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000078) );
		/* 8215F0B4h case   31:*/		return 0x8215F0B8;
		  /* 8215F0B8h */ case   32:  		/* cmplwi CR6, R11, 0 */
		/* 8215F0B8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F0B8h case   32:*/		return 0x8215F0BC;
		  /* 8215F0BCh */ case   33:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F0BCh case   33:*/		if ( !regs.CR[6].eq ) { return 0x8215F0DC;  }
		/* 8215F0BCh case   33:*/		return 0x8215F0C0;
		  /* 8215F0C0h */ case   34:  		/* lis R11, -32252 */
		/* 8215F0C0h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F0C0h case   34:*/		return 0x8215F0C4;
		  /* 8215F0C4h */ case   35:  		/* mr R6, R26 */
		/* 8215F0C4h case   35:*/		regs.R6 = regs.R26;
		/* 8215F0C4h case   35:*/		return 0x8215F0C8;
		  /* 8215F0C8h */ case   36:  		/* addi R5, R11, -19512 */
		/* 8215F0C8h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB3C8);
		/* 8215F0C8h case   36:*/		return 0x8215F0CC;
		  /* 8215F0CCh */ case   37:  		/* mr R4, R27 */
		/* 8215F0CCh case   37:*/		regs.R4 = regs.R27;
		/* 8215F0CCh case   37:*/		return 0x8215F0D0;
		  /* 8215F0D0h */ case   38:  		/* li R7, 382 */
		/* 8215F0D0h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x17E);
		/* 8215F0D0h case   38:*/		return 0x8215F0D4;
		  /* 8215F0D4h */ case   39:  		/* li R3, 0 */
		/* 8215F0D4h case   39:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F0D4h case   39:*/		return 0x8215F0D8;
		  /* 8215F0D8h */ case   40:  		/* bl -29904 */
		/* 8215F0D8h case   40:*/		regs.LR = 0x8215F0DC; return 0x82157C08;
		/* 8215F0D8h case   40:*/		return 0x8215F0DC;
	}
	return 0x8215F0DC;
} // Block from 8215F038h-8215F0DCh (41 instructions)

//////////////////////////////////////////////////////
// Block at 8215F0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F0DC);
		  /* 8215F0DCh */ case    0:  		/* lwz R11, <#[R30 + 116]> */
		/* 8215F0DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 8215F0DCh case    0:*/		return 0x8215F0E0;
		  /* 8215F0E0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F0E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F0E0h case    1:*/		return 0x8215F0E4;
		  /* 8215F0E4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F0E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F104;  }
		/* 8215F0E4h case    2:*/		return 0x8215F0E8;
		  /* 8215F0E8h */ case    3:  		/* lis R11, -32252 */
		/* 8215F0E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F0E8h case    3:*/		return 0x8215F0EC;
		  /* 8215F0ECh */ case    4:  		/* mr R6, R26 */
		/* 8215F0ECh case    4:*/		regs.R6 = regs.R26;
		/* 8215F0ECh case    4:*/		return 0x8215F0F0;
		  /* 8215F0F0h */ case    5:  		/* addi R5, R11, -19540 */
		/* 8215F0F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB3AC);
		/* 8215F0F0h case    5:*/		return 0x8215F0F4;
		  /* 8215F0F4h */ case    6:  		/* mr R4, R27 */
		/* 8215F0F4h case    6:*/		regs.R4 = regs.R27;
		/* 8215F0F4h case    6:*/		return 0x8215F0F8;
		  /* 8215F0F8h */ case    7:  		/* li R7, 383 */
		/* 8215F0F8h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x17F);
		/* 8215F0F8h case    7:*/		return 0x8215F0FC;
		  /* 8215F0FCh */ case    8:  		/* li R3, 0 */
		/* 8215F0FCh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F0FCh case    8:*/		return 0x8215F100;
		  /* 8215F100h */ case    9:  		/* bl -29944 */
		/* 8215F100h case    9:*/		regs.LR = 0x8215F104; return 0x82157C08;
		/* 8215F100h case    9:*/		return 0x8215F104;
	}
	return 0x8215F104;
} // Block from 8215F0DCh-8215F104h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F104);
		  /* 8215F104h */ case    0:  		/* lwz R11, <#[R30 + 120]> */
		/* 8215F104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 8215F104h case    0:*/		return 0x8215F108;
		  /* 8215F108h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F108h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F108h case    1:*/		return 0x8215F10C;
		  /* 8215F10Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F10Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F12C;  }
		/* 8215F10Ch case    2:*/		return 0x8215F110;
		  /* 8215F110h */ case    3:  		/* lis R11, -32252 */
		/* 8215F110h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F110h case    3:*/		return 0x8215F114;
		  /* 8215F114h */ case    4:  		/* mr R6, R26 */
		/* 8215F114h case    4:*/		regs.R6 = regs.R26;
		/* 8215F114h case    4:*/		return 0x8215F118;
		  /* 8215F118h */ case    5:  		/* addi R5, R11, -19568 */
		/* 8215F118h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB390);
		/* 8215F118h case    5:*/		return 0x8215F11C;
		  /* 8215F11Ch */ case    6:  		/* mr R4, R27 */
		/* 8215F11Ch case    6:*/		regs.R4 = regs.R27;
		/* 8215F11Ch case    6:*/		return 0x8215F120;
	}
	return 0x8215F120;
} // Block from 8215F104h-8215F120h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215F120h
// Function '?IA_Create@XGRAPHICS@@YAPAU_IA_INTERNALCONST_ALLOCATOR@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F120);
		  /* 8215F120h */ case    0:  		/* li R7, 384 */
		/* 8215F120h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x180);
		/* 8215F120h case    0:*/		return 0x8215F124;
		  /* 8215F124h */ case    1:  		/* li R3, 0 */
		/* 8215F124h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F124h case    1:*/		return 0x8215F128;
		  /* 8215F128h */ case    2:  		/* bl -29984 */
		/* 8215F128h case    2:*/		regs.LR = 0x8215F12C; return 0x82157C08;
		/* 8215F128h case    2:*/		return 0x8215F12C;
	}
	return 0x8215F12C;
} // Block from 8215F120h-8215F12Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215F12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F12C);
		  /* 8215F12Ch */ case    0:  		/* lwz R6, <#[R31 + 36]> */
		/* 8215F12Ch case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000024) );
		/* 8215F12Ch case    0:*/		return 0x8215F130;
		  /* 8215F130h */ case    1:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F130h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F130h case    1:*/		return 0x8215F134;
		  /* 8215F134h */ case    2:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F134h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F134h case    2:*/		return 0x8215F138;
		  /* 8215F138h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F138h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F138h case    3:*/		return 0x8215F13C;
		  /* 8215F13Ch */ case    4:  		/* bl 700044 */
		/* 8215F13Ch case    4:*/		regs.LR = 0x8215F140; return 0x82209FC8;
		/* 8215F13Ch case    4:*/		return 0x8215F140;
		  /* 8215F140h */ case    5:  		/* stw R3, <#[R30 + 92]> */
		/* 8215F140h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F140h case    5:*/		return 0x8215F144;
		  /* 8215F144h */ case    6:  		/* addi R3, R30, 124 */
		/* 8215F144h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x7C);
		/* 8215F144h case    6:*/		return 0x8215F148;
		  /* 8215F148h */ case    7:  		/* bl -896 */
		/* 8215F148h case    7:*/		regs.LR = 0x8215F14C; return 0x8215EDC8;
		/* 8215F148h case    7:*/		return 0x8215F14C;
		  /* 8215F14Ch */ case    8:  		/* li R6, 10 */
		/* 8215F14Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8215F14Ch case    8:*/		return 0x8215F150;
		  /* 8215F150h */ case    9:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F150h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F150h case    9:*/		return 0x8215F154;
		  /* 8215F154h */ case   10:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F154h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F154h case   10:*/		return 0x8215F158;
		  /* 8215F158h */ case   11:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F158h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F158h case   11:*/		return 0x8215F15C;
		  /* 8215F15Ch */ case   12:  		/* bl -15876 */
		/* 8215F15Ch case   12:*/		regs.LR = 0x8215F160; return 0x8215B358;
		/* 8215F15Ch case   12:*/		return 0x8215F160;
		  /* 8215F160h */ case   13:  		/* li R10, 32 */
		/* 8215F160h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x20);
		/* 8215F160h case   13:*/		return 0x8215F164;
		  /* 8215F164h */ case   14:  		/* stw R3, <#[R30 + 72]> */
		/* 8215F164h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000048) );
		/* 8215F164h case   14:*/		return 0x8215F168;
		  /* 8215F168h */ case   15:  		/* li R11, 256 */
		/* 8215F168h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x100);
		/* 8215F168h case   15:*/		return 0x8215F16C;
		  /* 8215F16Ch */ case   16:  		/* stw R29, <#[R1 + 112]> */
		/* 8215F16Ch case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000070) );
		/* 8215F16Ch case   16:*/		return 0x8215F170;
		  /* 8215F170h */ case   17:  		/* stw R10, <#[R1 + 124]> */
		/* 8215F170h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215F170h case   17:*/		return 0x8215F174;
		  /* 8215F174h */ case   18:  		/* li R9, 5 */
		/* 8215F174h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 8215F174h case   18:*/		return 0x8215F178;
		  /* 8215F178h */ case   19:  		/* li R8, 4096 */
		/* 8215F178h case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x1000);
		/* 8215F178h case   19:*/		return 0x8215F17C;
		  /* 8215F17Ch */ case   20:  		/* stw R11, <#[R1 + 120]> */
		/* 8215F17Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8215F17Ch case   20:*/		return 0x8215F180;
		  /* 8215F180h */ case   21:  		/* li R10, 64 */
		/* 8215F180h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 8215F180h case   21:*/		return 0x8215F184;
		  /* 8215F184h */ case   22:  		/* stw R9, <#[R1 + 116]> */
		/* 8215F184h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 8215F184h case   22:*/		return 0x8215F188;
		  /* 8215F188h */ case   23:  		/* stw R8, <#[R1 + 128]> */
		/* 8215F188h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 8215F188h case   23:*/		return 0x8215F18C;
		  /* 8215F18Ch */ case   24:  		/* mr R4, R31 */
		/* 8215F18Ch case   24:*/		regs.R4 = regs.R31;
		/* 8215F18Ch case   24:*/		return 0x8215F190;
		  /* 8215F190h */ case   25:  		/* stw R11, <#[R1 + 132]> */
		/* 8215F190h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 8215F190h case   25:*/		return 0x8215F194;
		  /* 8215F194h */ case   26:  		/* addi R3, R1, 112 */
		/* 8215F194h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8215F194h case   26:*/		return 0x8215F198;
		  /* 8215F198h */ case   27:  		/* stw R10, <#[R1 + 136]> */
		/* 8215F198h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 8215F198h case   27:*/		return 0x8215F19C;
		  /* 8215F19Ch */ case   28:  		/* stw R11, <#[R1 + 140]> */
		/* 8215F19Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8215F19Ch case   28:*/		return 0x8215F1A0;
		  /* 8215F1A0h */ case   29:  		/* bl 718016 */
		/* 8215F1A0h case   29:*/		regs.LR = 0x8215F1A4; return 0x8220E660;
		/* 8215F1A0h case   29:*/		return 0x8215F1A4;
		  /* 8215F1A4h */ case   30:  		/* stw R3, <#[R30 + 200]> */
		/* 8215F1A4h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x000000C8) );
		/* 8215F1A4h case   30:*/		return 0x8215F1A8;
		  /* 8215F1A8h */ case   31:  		/* mr R8, R3 */
		/* 8215F1A8h case   31:*/		regs.R8 = regs.R3;
		/* 8215F1A8h case   31:*/		return 0x8215F1AC;
		  /* 8215F1ACh */ case   32:  		/* lwz R7, <#[R31 + 32]> */
		/* 8215F1ACh case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 8215F1ACh case   32:*/		return 0x8215F1B0;
		  /* 8215F1B0h */ case   33:  		/* lwz R6, <#[R31 + 28]> */
		/* 8215F1B0h case   33:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000001C) );
		/* 8215F1B0h case   33:*/		return 0x8215F1B4;
		  /* 8215F1B4h */ case   34:  		/* lis R11, -32216 */
		/* 8215F1B4h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8215F1B4h case   34:*/		return 0x8215F1B8;
		  /* 8215F1B8h */ case   35:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F1B8h case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F1B8h case   35:*/		return 0x8215F1BC;
		  /* 8215F1BCh */ case   36:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F1BCh case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F1BCh case   36:*/		return 0x8215F1C0;
		  /* 8215F1C0h */ case   37:  		/* addi R11, R11, 8496 */
		/* 8215F1C0h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2130);
		/* 8215F1C0h case   37:*/		return 0x8215F1C4;
		  /* 8215F1C4h */ case   38:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F1C4h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F1C4h case   38:*/		return 0x8215F1C8;
		  /* 8215F1C8h */ case   39:  		/* lwz R29, <#[R30 + 304]> */
		/* 8215F1C8h case   39:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000130) );
		/* 8215F1C8h case   39:*/		return 0x8215F1CC;
		  /* 8215F1CCh */ case   40:  		/* lwz R28, <#[R30 + 120]> */
		/* 8215F1CCh case   40:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000078) );
		/* 8215F1CCh case   40:*/		return 0x8215F1D0;
		  /* 8215F1D0h */ case   41:  		/* lwz R25, <#[R30 + 116]> */
		/* 8215F1D0h case   41:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R30 + 0x00000074) );
		/* 8215F1D0h case   41:*/		return 0x8215F1D4;
		  /* 8215F1D4h */ case   42:  		/* lwz R11, <#[R11 + 12]> */
		/* 8215F1D4h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8215F1D4h case   42:*/		return 0x8215F1D8;
		  /* 8215F1D8h */ case   43:  		/* stw R29, <#[R1 + 100]> */
		/* 8215F1D8h case   43:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 8215F1D8h case   43:*/		return 0x8215F1DC;
		  /* 8215F1DCh */ case   44:  		/* stw R28, <#[R1 + 92]> */
		/* 8215F1DCh case   44:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 8215F1DCh case   44:*/		return 0x8215F1E0;
		  /* 8215F1E0h */ case   45:  		/* stw R25, <#[R1 + 84]> */
		/* 8215F1E0h case   45:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 8215F1E0h case   45:*/		return 0x8215F1E4;
		  /* 8215F1E4h */ case   46:  		/* stw R11, <#[R1 + 108]> */
		/* 8215F1E4h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8215F1E4h case   46:*/		return 0x8215F1E8;
		  /* 8215F1E8h */ case   47:  		/* lwz R10, <#[R30 + 112]> */
		/* 8215F1E8h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000070) );
		/* 8215F1E8h case   47:*/		return 0x8215F1EC;
		  /* 8215F1ECh */ case   48:  		/* lwz R9, <#[R30 + 92]> */
		/* 8215F1ECh case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F1ECh case   48:*/		return 0x8215F1F0;
		  /* 8215F1F0h */ case   49:  		/* bl 717016 */
		/* 8215F1F0h case   49:*/		regs.LR = 0x8215F1F4; return 0x8220E2C8;
		/* 8215F1F0h case   49:*/		return 0x8215F1F4;
		  /* 8215F1F4h */ case   50:  		/* stw R3, <#[R30 + 80]> */
		/* 8215F1F4h case   50:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000050) );
		/* 8215F1F4h case   50:*/		return 0x8215F1F8;
		  /* 8215F1F8h */ case   51:  		/* lwz R7, <#[R30 + 308]> */
		/* 8215F1F8h case   51:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000134) );
		/* 8215F1F8h case   51:*/		return 0x8215F1FC;
		  /* 8215F1FCh */ case   52:  		/* lwz R6, <#[R30 + 112]> */
		/* 8215F1FCh case   52:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000070) );
		/* 8215F1FCh case   52:*/		return 0x8215F200;
		  /* 8215F200h */ case   53:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F200h case   53:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F200h case   53:*/		return 0x8215F204;
		  /* 8215F204h */ case   54:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F204h case   54:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F204h case   54:*/		return 0x8215F208;
		  /* 8215F208h */ case   55:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F208h case   55:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F208h case   55:*/		return 0x8215F20C;
		  /* 8215F20Ch */ case   56:  		/* bl 3812 */
		/* 8215F20Ch case   56:*/		regs.LR = 0x8215F210; return 0x821600F0;
		/* 8215F20Ch case   56:*/		return 0x8215F210;
		  /* 8215F210h */ case   57:  		/* stw R3, <#[R30 + 84]> */
		/* 8215F210h case   57:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000054) );
		/* 8215F210h case   57:*/		return 0x8215F214;
		  /* 8215F214h */ case   58:  		/* lwz R11, <#[R30 + 8]> */
		/* 8215F214h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8215F214h case   58:*/		return 0x8215F218;
		  /* 8215F218h */ case   59:  		/* lwz R8, <#[R30 + 200]> */
		/* 8215F218h case   59:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x000000C8) );
		/* 8215F218h case   59:*/		return 0x8215F21C;
		  /* 8215F21Ch */ case   60:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 8215F21Ch case   60:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 8215F21Ch case   60:*/		return 0x8215F220;
		  /* 8215F220h */ case   61:  		/* lwz R7, <#[R30 + 80]> */
		/* 8215F220h case   61:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000050) );
		/* 8215F220h case   61:*/		return 0x8215F224;
		  /* 8215F224h */ case   62:  		/* lwz R6, <#[R30 + 92]> */
		/* 8215F224h case   62:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F224h case   62:*/		return 0x8215F228;
		  /* 8215F228h */ case   63:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F228h case   63:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F228h case   63:*/		return 0x8215F22C;
		  /* 8215F22Ch */ case   64:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F22Ch case   64:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F22Ch case   64:*/		return 0x8215F230;
		  /* 8215F230h */ case   65:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F230h case   65:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F230h case   65:*/		return 0x8215F234;
		  /* 8215F234h */ case   66:  		/* bl 704684 */
		/* 8215F234h case   66:*/		regs.LR = 0x8215F238; return 0x8220B2E0;
		/* 8215F234h case   66:*/		return 0x8215F238;
		  /* 8215F238h */ case   67:  		/* stw R3, <#[R30 + 88]> */
		/* 8215F238h case   67:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000058) );
		/* 8215F238h case   67:*/		return 0x8215F23C;
		  /* 8215F23Ch */ case   68:  		/* lwz R7, <#[R30 + 92]> */
		/* 8215F23Ch case   68:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F23Ch case   68:*/		return 0x8215F240;
		  /* 8215F240h */ case   69:  		/* lwz R6, <#[R30 + 84]> */
		/* 8215F240h case   69:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000054) );
		/* 8215F240h case   69:*/		return 0x8215F244;
		  /* 8215F244h */ case   70:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F244h case   70:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F244h case   70:*/		return 0x8215F248;
		  /* 8215F248h */ case   71:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F248h case   71:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F248h case   71:*/		return 0x8215F24C;
		  /* 8215F24Ch */ case   72:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F24Ch case   72:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F24Ch case   72:*/		return 0x8215F250;
	}
	return 0x8215F250;
} // Block from 8215F12Ch-8215F250h (73 instructions)

//////////////////////////////////////////////////////
// Block at 8215F250h
// Function '?IA_Init@XGRAPHICS@@YAXPAU_IA_INTERNALCONST_ALLOCATOR@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F250);
		  /* 8215F250h */ case    0:  		/* bl 712952 */
		/* 8215F250h case    0:*/		regs.LR = 0x8215F254; return 0x8220D348;
		/* 8215F250h case    0:*/		return 0x8215F254;
		  /* 8215F254h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 8215F254h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8215F254h case    1:*/		return 0x8215F258;
		  /* 8215F258h */ case    2:  		/* mr R8, R3 */
		/* 8215F258h case    2:*/		regs.R8 = regs.R3;
		/* 8215F258h case    2:*/		return 0x8215F25C;
		  /* 8215F25Ch */ case    3:  		/* stw R3, <#[R30 + 104]> */
		/* 8215F25Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000068) );
		/* 8215F25Ch case    3:*/		return 0x8215F260;
		  /* 8215F260h */ case    4:  		/* lwz R10, <#[R30 + 92]> */
		/* 8215F260h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F260h case    4:*/		return 0x8215F264;
		  /* 8215F264h */ case    5:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 8215F264h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8215F264h case    5:*/		return 0x8215F268;
		  /* 8215F268h */ case    6:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F268h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F268h case    6:*/		return 0x8215F26C;
		  /* 8215F26Ch */ case    7:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F26Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F26Ch case    7:*/		return 0x8215F270;
		  /* 8215F270h */ case    8:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F270h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F270h case    8:*/		return 0x8215F274;
		  /* 8215F274h */ case    9:  		/* lwz R9, <#[R30 + 200]> */
		/* 8215F274h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x000000C8) );
		/* 8215F274h case    9:*/		return 0x8215F278;
		  /* 8215F278h */ case   10:  		/* lwz R7, <#[R30 + 84]> */
		/* 8215F278h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000054) );
		/* 8215F278h case   10:*/		return 0x8215F27C;
		  /* 8215F27Ch */ case   11:  		/* lwz R6, <#[R30 + 80]> */
		/* 8215F27Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000050) );
		/* 8215F27Ch case   11:*/		return 0x8215F280;
		  /* 8215F280h */ case   12:  		/* stw R11, <#[R1 + 84]> */
		/* 8215F280h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8215F280h case   12:*/		return 0x8215F284;
		  /* 8215F284h */ case   13:  		/* bl 6260 */
		/* 8215F284h case   13:*/		regs.LR = 0x8215F288; return 0x82160AF8;
		/* 8215F284h case   13:*/		return 0x8215F288;
		  /* 8215F288h */ case   14:  		/* stw R3, <#[R30 + 96]> */
		/* 8215F288h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000060) );
		/* 8215F288h case   14:*/		return 0x8215F28C;
		  /* 8215F28Ch */ case   15:  		/* mr R6, R3 */
		/* 8215F28Ch case   15:*/		regs.R6 = regs.R3;
		/* 8215F28Ch case   15:*/		return 0x8215F290;
	}
	return 0x8215F290;
} // Block from 8215F250h-8215F290h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215F290h
// Function '?IA_AllocStaticScalarConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_IA_INTERNALCONST_ALLOCATOR@1@IW4E_IA_FLOAT_CHANNEL@1@M@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F290);
		  /* 8215F290h */ case    0:  		/* lwz R10, <#[R30 + 112]> */
		/* 8215F290h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000070) );
		/* 8215F290h case    0:*/		return 0x8215F294;
		  /* 8215F294h */ case    1:  		/* lwz R9, <#[R30 + 116]> */
		/* 8215F294h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000074) );
		/* 8215F294h case    1:*/		return 0x8215F298;
		  /* 8215F298h */ case    2:  		/* lwz R8, <#[R30 + 88]> */
		/* 8215F298h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000058) );
		/* 8215F298h case    2:*/		return 0x8215F29C;
		  /* 8215F29Ch */ case    3:  		/* lwz R7, <#[R30 + 80]> */
		/* 8215F29Ch case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000050) );
		/* 8215F29Ch case    3:*/		return 0x8215F2A0;
		  /* 8215F2A0h */ case    4:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F2A0h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F2A0h case    4:*/		return 0x8215F2A4;
		  /* 8215F2A4h */ case    5:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F2A4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F2A4h case    5:*/		return 0x8215F2A8;
		  /* 8215F2A8h */ case    6:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F2A8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F2A8h case    6:*/		return 0x8215F2AC;
		  /* 8215F2ACh */ case    7:  		/* bl 704868 */
		/* 8215F2ACh case    7:*/		regs.LR = 0x8215F2B0; return 0x8220B410;
		/* 8215F2ACh case    7:*/		return 0x8215F2B0;
		  /* 8215F2B0h */ case    8:  		/* stw R3, <#[R30 + 100]> */
		/* 8215F2B0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000064) );
		/* 8215F2B0h case    8:*/		return 0x8215F2B4;
		  /* 8215F2B4h */ case    9:  		/* mr R6, R3 */
		/* 8215F2B4h case    9:*/		regs.R6 = regs.R3;
		/* 8215F2B4h case    9:*/		return 0x8215F2B8;
		  /* 8215F2B8h */ case   10:  		/* lwz R7, <#[R30 + 92]> */
		/* 8215F2B8h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F2B8h case   10:*/		return 0x8215F2BC;
		  /* 8215F2BCh */ case   11:  		/* lwz R5, <#[R31 + 24]> */
		/* 8215F2BCh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000018) );
		/* 8215F2BCh case   11:*/		return 0x8215F2C0;
		  /* 8215F2C0h */ case   12:  		/* lwz R4, <#[R31 + 20]> */
		/* 8215F2C0h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 8215F2C0h case   12:*/		return 0x8215F2C4;
		  /* 8215F2C4h */ case   13:  		/* lwz R3, <#[R31 + 16]> */
		/* 8215F2C4h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8215F2C4h case   13:*/		return 0x8215F2C8;
		  /* 8215F2C8h */ case   14:  		/* bl 698480 */
		/* 8215F2C8h case   14:*/		regs.LR = 0x8215F2CC; return 0x82209B38;
		/* 8215F2C8h case   14:*/		return 0x8215F2CC;
		  /* 8215F2CCh */ case   15:  		/* lwz R11, <#[R30 + 92]> */
		/* 8215F2CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000005C) );
		/* 8215F2CCh case   15:*/		return 0x8215F2D0;
		  /* 8215F2D0h */ case   16:  		/* stw R3, <#[R30 + 108]> */
		/* 8215F2D0h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000006C) );
		/* 8215F2D0h case   16:*/		return 0x8215F2D4;
		  /* 8215F2D4h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 8215F2D4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F2D4h case   17:*/		return 0x8215F2D8;
		  /* 8215F2D8h */ case   18:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F2D8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8215F2F8;  }
		/* 8215F2D8h case   18:*/		return 0x8215F2DC;
		  /* 8215F2DCh */ case   19:  		/* lis R11, -32252 */
		/* 8215F2DCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F2DCh case   19:*/		return 0x8215F2E0;
		  /* 8215F2E0h */ case   20:  		/* mr R6, R26 */
		/* 8215F2E0h case   20:*/		regs.R6 = regs.R26;
		/* 8215F2E0h case   20:*/		return 0x8215F2E4;
		  /* 8215F2E4h */ case   21:  		/* addi R5, R11, -19588 */
		/* 8215F2E4h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB37C);
		/* 8215F2E4h case   21:*/		return 0x8215F2E8;
		  /* 8215F2E8h */ case   22:  		/* mr R4, R27 */
		/* 8215F2E8h case   22:*/		regs.R4 = regs.R27;
		/* 8215F2E8h case   22:*/		return 0x8215F2EC;
		  /* 8215F2ECh */ case   23:  		/* li R7, 487 */
		/* 8215F2ECh case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x1E7);
		/* 8215F2ECh case   23:*/		return 0x8215F2F0;
		  /* 8215F2F0h */ case   24:  		/* li R3, 0 */
		/* 8215F2F0h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F2F0h case   24:*/		return 0x8215F2F4;
		  /* 8215F2F4h */ case   25:  		/* bl -30444 */
		/* 8215F2F4h case   25:*/		regs.LR = 0x8215F2F8; return 0x82157C08;
		/* 8215F2F4h case   25:*/		return 0x8215F2F8;
	}
	return 0x8215F2F8;
} // Block from 8215F290h-8215F2F8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215F2F8h
// Function '?IA_AllocQueryScalarConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_IA_INTERNALCONST_ALLOCATOR@1@IW4E_IA_FLOAT_CHANNEL@1@W4E_SSM_COMPILEGET_QUERY@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F2F8);
		  /* 8215F2F8h */ case    0:  		/* lwz R11, <#[R30 + 96]> */
		/* 8215F2F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000060) );
		/* 8215F2F8h case    0:*/		return 0x8215F2FC;
		  /* 8215F2FCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F2FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F2FCh case    1:*/		return 0x8215F300;
		  /* 8215F300h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F300h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F320;  }
		/* 8215F300h case    2:*/		return 0x8215F304;
		  /* 8215F304h */ case    3:  		/* lis R11, -32252 */
		/* 8215F304h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F304h case    3:*/		return 0x8215F308;
		  /* 8215F308h */ case    4:  		/* mr R6, R26 */
		/* 8215F308h case    4:*/		regs.R6 = regs.R26;
		/* 8215F308h case    4:*/		return 0x8215F30C;
		  /* 8215F30Ch */ case    5:  		/* addi R5, R11, -19608 */
		/* 8215F30Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB368);
		/* 8215F30Ch case    5:*/		return 0x8215F310;
		  /* 8215F310h */ case    6:  		/* mr R4, R27 */
		/* 8215F310h case    6:*/		regs.R4 = regs.R27;
		/* 8215F310h case    6:*/		return 0x8215F314;
		  /* 8215F314h */ case    7:  		/* li R7, 488 */
		/* 8215F314h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1E8);
		/* 8215F314h case    7:*/		return 0x8215F318;
		  /* 8215F318h */ case    8:  		/* li R3, 0 */
		/* 8215F318h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F318h case    8:*/		return 0x8215F31C;
		  /* 8215F31Ch */ case    9:  		/* bl -30484 */
		/* 8215F31Ch case    9:*/		regs.LR = 0x8215F320; return 0x82157C08;
		/* 8215F31Ch case    9:*/		return 0x8215F320;
	}
	return 0x8215F320;
} // Block from 8215F2F8h-8215F320h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F320);
		  /* 8215F320h */ case    0:  		/* lwz R11, <#[R30 + 88]> */
		/* 8215F320h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 8215F320h case    0:*/		return 0x8215F324;
		  /* 8215F324h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F324h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F324h case    1:*/		return 0x8215F328;
		  /* 8215F328h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F328h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F348;  }
		/* 8215F328h case    2:*/		return 0x8215F32C;
		  /* 8215F32Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215F32Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F32Ch case    3:*/		return 0x8215F330;
		  /* 8215F330h */ case    4:  		/* mr R6, R26 */
		/* 8215F330h case    4:*/		regs.R6 = regs.R26;
		/* 8215F330h case    4:*/		return 0x8215F334;
		  /* 8215F334h */ case    5:  		/* addi R5, R11, -19632 */
		/* 8215F334h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB350);
		/* 8215F334h case    5:*/		return 0x8215F338;
		  /* 8215F338h */ case    6:  		/* mr R4, R27 */
		/* 8215F338h case    6:*/		regs.R4 = regs.R27;
		/* 8215F338h case    6:*/		return 0x8215F33C;
		  /* 8215F33Ch */ case    7:  		/* li R7, 489 */
		/* 8215F33Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1E9);
		/* 8215F33Ch case    7:*/		return 0x8215F340;
		  /* 8215F340h */ case    8:  		/* li R3, 0 */
		/* 8215F340h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F340h case    8:*/		return 0x8215F344;
		  /* 8215F344h */ case    9:  		/* bl -30524 */
		/* 8215F344h case    9:*/		regs.LR = 0x8215F348; return 0x82157C08;
		/* 8215F344h case    9:*/		return 0x8215F348;
	}
	return 0x8215F348;
} // Block from 8215F320h-8215F348h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F348);
		  /* 8215F348h */ case    0:  		/* lwz R11, <#[R30 + 108]> */
		/* 8215F348h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8215F348h case    0:*/		return 0x8215F34C;
		  /* 8215F34Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F34Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F34Ch case    1:*/		return 0x8215F350;
		  /* 8215F350h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F350h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F370;  }
		/* 8215F350h case    2:*/		return 0x8215F354;
		  /* 8215F354h */ case    3:  		/* lis R11, -32252 */
		/* 8215F354h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F354h case    3:*/		return 0x8215F358;
		  /* 8215F358h */ case    4:  		/* mr R6, R26 */
		/* 8215F358h case    4:*/		regs.R6 = regs.R26;
		/* 8215F358h case    4:*/		return 0x8215F35C;
		  /* 8215F35Ch */ case    5:  		/* addi R5, R11, -19656 */
		/* 8215F35Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB338);
		/* 8215F35Ch case    5:*/		return 0x8215F360;
		  /* 8215F360h */ case    6:  		/* mr R4, R27 */
		/* 8215F360h case    6:*/		regs.R4 = regs.R27;
		/* 8215F360h case    6:*/		return 0x8215F364;
		  /* 8215F364h */ case    7:  		/* li R7, 490 */
		/* 8215F364h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1EA);
		/* 8215F364h case    7:*/		return 0x8215F368;
		  /* 8215F368h */ case    8:  		/* li R3, 0 */
		/* 8215F368h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F368h case    8:*/		return 0x8215F36C;
		  /* 8215F36Ch */ case    9:  		/* bl -30564 */
		/* 8215F36Ch case    9:*/		regs.LR = 0x8215F370; return 0x82157C08;
		/* 8215F36Ch case    9:*/		return 0x8215F370;
	}
	return 0x8215F370;
} // Block from 8215F348h-8215F370h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F370);
		  /* 8215F370h */ case    0:  		/* lwz R11, <#[R30 + 80]> */
		/* 8215F370h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000050) );
		/* 8215F370h case    0:*/		return 0x8215F374;
		  /* 8215F374h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F374h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F374h case    1:*/		return 0x8215F378;
		  /* 8215F378h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F378h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F398;  }
		/* 8215F378h case    2:*/		return 0x8215F37C;
		  /* 8215F37Ch */ case    3:  		/* lis R11, -32252 */
		/* 8215F37Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F37Ch case    3:*/		return 0x8215F380;
	}
	return 0x8215F380;
} // Block from 8215F370h-8215F380h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215F380h
// Function '?IA_AllocExportConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_IA_INTERNALCONST_ALLOCATOR@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F380);
		  /* 8215F380h */ case    0:  		/* mr R6, R26 */
		/* 8215F380h case    0:*/		regs.R6 = regs.R26;
		/* 8215F380h case    0:*/		return 0x8215F384;
		  /* 8215F384h */ case    1:  		/* addi R5, R11, -19680 */
		/* 8215F384h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB320);
		/* 8215F384h case    1:*/		return 0x8215F388;
		  /* 8215F388h */ case    2:  		/* mr R4, R27 */
		/* 8215F388h case    2:*/		regs.R4 = regs.R27;
		/* 8215F388h case    2:*/		return 0x8215F38C;
		  /* 8215F38Ch */ case    3:  		/* li R7, 491 */
		/* 8215F38Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1EB);
		/* 8215F38Ch case    3:*/		return 0x8215F390;
		  /* 8215F390h */ case    4:  		/* li R3, 0 */
		/* 8215F390h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F390h case    4:*/		return 0x8215F394;
		  /* 8215F394h */ case    5:  		/* bl -30604 */
		/* 8215F394h case    5:*/		regs.LR = 0x8215F398; return 0x82157C08;
		/* 8215F394h case    5:*/		return 0x8215F398;
	}
	return 0x8215F398;
} // Block from 8215F380h-8215F398h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215F398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F398);
		  /* 8215F398h */ case    0:  		/* lwz R11, <#[R30 + 84]> */
		/* 8215F398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000054) );
		/* 8215F398h case    0:*/		return 0x8215F39C;
		  /* 8215F39Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F39Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F39Ch case    1:*/		return 0x8215F3A0;
		  /* 8215F3A0h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F3A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F3C0;  }
		/* 8215F3A0h case    2:*/		return 0x8215F3A4;
		  /* 8215F3A4h */ case    3:  		/* lis R11, -32252 */
		/* 8215F3A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F3A4h case    3:*/		return 0x8215F3A8;
	}
	return 0x8215F3A8;
} // Block from 8215F398h-8215F3A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215F3A8h
// Function '?IA_CreatePackedBlock@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_IA_INTERNALCONST_ALLOCATOR@1@PAPAU_IA_INTERNALCONST_BLOCK_HEADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F3A8);
		  /* 8215F3A8h */ case    0:  		/* mr R6, R26 */
		/* 8215F3A8h case    0:*/		regs.R6 = regs.R26;
		/* 8215F3A8h case    0:*/		return 0x8215F3AC;
		  /* 8215F3ACh */ case    1:  		/* addi R5, R11, -19704 */
		/* 8215F3ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB308);
		/* 8215F3ACh case    1:*/		return 0x8215F3B0;
		  /* 8215F3B0h */ case    2:  		/* mr R4, R27 */
		/* 8215F3B0h case    2:*/		regs.R4 = regs.R27;
		/* 8215F3B0h case    2:*/		return 0x8215F3B4;
		  /* 8215F3B4h */ case    3:  		/* li R7, 492 */
		/* 8215F3B4h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1EC);
		/* 8215F3B4h case    3:*/		return 0x8215F3B8;
		  /* 8215F3B8h */ case    4:  		/* li R3, 0 */
		/* 8215F3B8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F3B8h case    4:*/		return 0x8215F3BC;
		  /* 8215F3BCh */ case    5:  		/* bl -30644 */
		/* 8215F3BCh case    5:*/		regs.LR = 0x8215F3C0; return 0x82157C08;
		/* 8215F3BCh case    5:*/		return 0x8215F3C0;
	}
	return 0x8215F3C0;
} // Block from 8215F3A8h-8215F3C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215F3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F3C0);
		  /* 8215F3C0h */ case    0:  		/* lwz R11, <#[R30 + 100]> */
		/* 8215F3C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000064) );
		/* 8215F3C0h case    0:*/		return 0x8215F3C4;
		  /* 8215F3C4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F3C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F3C4h case    1:*/		return 0x8215F3C8;
		  /* 8215F3C8h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F3C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F3E8;  }
		/* 8215F3C8h case    2:*/		return 0x8215F3CC;
		  /* 8215F3CCh */ case    3:  		/* lis R11, -32252 */
		/* 8215F3CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F3CCh case    3:*/		return 0x8215F3D0;
		  /* 8215F3D0h */ case    4:  		/* mr R6, R26 */
		/* 8215F3D0h case    4:*/		regs.R6 = regs.R26;
		/* 8215F3D0h case    4:*/		return 0x8215F3D4;
		  /* 8215F3D4h */ case    5:  		/* addi R5, R11, -19728 */
		/* 8215F3D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB2F0);
		/* 8215F3D4h case    5:*/		return 0x8215F3D8;
		  /* 8215F3D8h */ case    6:  		/* mr R4, R27 */
		/* 8215F3D8h case    6:*/		regs.R4 = regs.R27;
		/* 8215F3D8h case    6:*/		return 0x8215F3DC;
		  /* 8215F3DCh */ case    7:  		/* li R7, 493 */
		/* 8215F3DCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1ED);
		/* 8215F3DCh case    7:*/		return 0x8215F3E0;
		  /* 8215F3E0h */ case    8:  		/* li R3, 0 */
		/* 8215F3E0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F3E0h case    8:*/		return 0x8215F3E4;
		  /* 8215F3E4h */ case    9:  		/* bl -30684 */
		/* 8215F3E4h case    9:*/		regs.LR = 0x8215F3E8; return 0x82157C08;
		/* 8215F3E4h case    9:*/		return 0x8215F3E8;
	}
	return 0x8215F3E8;
} // Block from 8215F3C0h-8215F3E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F3E8);
		  /* 8215F3E8h */ case    0:  		/* lwz R11, <#[R30 + 200]> */
		/* 8215F3E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C8) );
		/* 8215F3E8h case    0:*/		return 0x8215F3EC;
		  /* 8215F3ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F3ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F3ECh case    1:*/		return 0x8215F3F0;
		  /* 8215F3F0h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F3F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F410;  }
		/* 8215F3F0h case    2:*/		return 0x8215F3F4;
		  /* 8215F3F4h */ case    3:  		/* lis R11, -32252 */
		/* 8215F3F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F3F4h case    3:*/		return 0x8215F3F8;
		  /* 8215F3F8h */ case    4:  		/* mr R6, R26 */
		/* 8215F3F8h case    4:*/		regs.R6 = regs.R26;
		/* 8215F3F8h case    4:*/		return 0x8215F3FC;
		  /* 8215F3FCh */ case    5:  		/* addi R5, R11, -19748 */
		/* 8215F3FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB2DC);
		/* 8215F3FCh case    5:*/		return 0x8215F400;
		  /* 8215F400h */ case    6:  		/* mr R4, R27 */
		/* 8215F400h case    6:*/		regs.R4 = regs.R27;
		/* 8215F400h case    6:*/		return 0x8215F404;
		  /* 8215F404h */ case    7:  		/* li R7, 494 */
		/* 8215F404h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x1EE);
		/* 8215F404h case    7:*/		return 0x8215F408;
		  /* 8215F408h */ case    8:  		/* li R3, 0 */
		/* 8215F408h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F408h case    8:*/		return 0x8215F40C;
		  /* 8215F40Ch */ case    9:  		/* bl -30724 */
		/* 8215F40Ch case    9:*/		regs.LR = 0x8215F410; return 0x82157C08;
		/* 8215F40Ch case    9:*/		return 0x8215F410;
	}
	return 0x8215F410;
} // Block from 8215F3E8h-8215F410h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F410);
		  /* 8215F410h */ case    0:  		/* mr R3, R30 */
		/* 8215F410h case    0:*/		regs.R3 = regs.R30;
		/* 8215F410h case    0:*/		return 0x8215F414;
		  /* 8215F414h */ case    1:  		/* b 8 */
		/* 8215F414h case    1:*/		return 0x8215F41C;
		/* 8215F414h case    1:*/		return 0x8215F418;
	}
	return 0x8215F418;
} // Block from 8215F410h-8215F418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F418);
		  /* 8215F418h */ case    0:  		/* li R3, 0 */
		/* 8215F418h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F418h case    0:*/		return 0x8215F41C;
	}
	return 0x8215F41C;
} // Block from 8215F418h-8215F41Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F41C);
		  /* 8215F41Ch */ case    0:  		/* addi R1, R1, 208 */
		/* 8215F41Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8215F41Ch case    0:*/		return 0x8215F420;
		  /* 8215F420h */ case    1:  		/* b -844164 */
		/* 8215F420h case    1:*/		return 0x8209129C;
		/* 8215F420h case    1:*/		return 0x8215F424;
		  /* 8215F424h */ case    2:  		/* nop */
		/* 8215F424h case    2:*/		cpu::op::nop();
		/* 8215F424h case    2:*/		return 0x8215F428;
	}
	return 0x8215F428;
} // Block from 8215F41Ch-8215F428h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215F428h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F428);
		  /* 8215F428h */ case    0:  		/* mfspr R12, LR */
		/* 8215F428h case    0:*/		regs.R12 = regs.LR;
		/* 8215F428h case    0:*/		return 0x8215F42C;
		  /* 8215F42Ch */ case    1:  		/* bl -844244 */
		/* 8215F42Ch case    1:*/		regs.LR = 0x8215F430; return 0x82091258;
		/* 8215F42Ch case    1:*/		return 0x8215F430;
		  /* 8215F430h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215F430h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215F430h case    2:*/		return 0x8215F434;
		  /* 8215F434h */ case    3:  		/* mr R28, R3 */
		/* 8215F434h case    3:*/		regs.R28 = regs.R3;
		/* 8215F434h case    3:*/		return 0x8215F438;
		  /* 8215F438h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8215F438h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215F438h case    4:*/		return 0x8215F43C;
		  /* 8215F43Ch */ case    5:  		/* bc 12, CR6_EQ, 452 */
		/* 8215F43Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8215F600;  }
		/* 8215F43Ch case    5:*/		return 0x8215F440;
		  /* 8215F440h */ case    6:  		/* mr R3, R28 */
		/* 8215F440h case    6:*/		regs.R3 = regs.R28;
		/* 8215F440h case    6:*/		return 0x8215F444;
		  /* 8215F444h */ case    7:  		/* bl -1860 */
		/* 8215F444h case    7:*/		regs.LR = 0x8215F448; return 0x8215ED00;
		/* 8215F444h case    7:*/		return 0x8215F448;
		  /* 8215F448h */ case    8:  		/* lwz R3, <#[R28 + 72]> */
		/* 8215F448h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000048) );
		/* 8215F448h case    8:*/		return 0x8215F44C;
		  /* 8215F44Ch */ case    9:  		/* bl -16316 */
		/* 8215F44Ch case    9:*/		regs.LR = 0x8215F450; return 0x8215B490;
		/* 8215F44Ch case    9:*/		return 0x8215F450;
		  /* 8215F450h */ case   10:  		/* lwz R3, <#[R28 + 108]> */
		/* 8215F450h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000006C) );
		/* 8215F450h case   10:*/		return 0x8215F454;
		  /* 8215F454h */ case   11:  		/* bl 702244 */
		/* 8215F454h case   11:*/		regs.LR = 0x8215F458; return 0x8220AB78;
		/* 8215F454h case   11:*/		return 0x8215F458;
		  /* 8215F458h */ case   12:  		/* lis R9, -32253 */
		/* 8215F458h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215F458h case   12:*/		return 0x8215F45C;
		  /* 8215F45Ch */ case   13:  		/* lis R10, -32252 */
		/* 8215F45Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215F45Ch case   13:*/		return 0x8215F460;
		  /* 8215F460h */ case   14:  		/* lis R11, -32252 */
		/* 8215F460h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F460h case   14:*/		return 0x8215F464;
		  /* 8215F464h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8215F464h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F464h case   15:*/		return 0x8215F468;
		  /* 8215F468h */ case   16:  		/* addi R31, R9, 27460 */
		/* 8215F468h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x6B44);
		/* 8215F468h case   16:*/		return 0x8215F46C;
		  /* 8215F46Ch */ case   17:  		/* addi R30, R10, -19192 */
		/* 8215F46Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFB508);
		/* 8215F46Ch case   17:*/		return 0x8215F470;
		  /* 8215F470h */ case   18:  		/* addi R29, R11, -19888 */
		/* 8215F470h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFB250);
		/* 8215F470h case   18:*/		return 0x8215F474;
		  /* 8215F474h */ case   19:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F474h case   19:*/		if ( regs.CR[0].eq ) { return 0x8215F490;  }
		/* 8215F474h case   19:*/		return 0x8215F478;
		  /* 8215F478h */ case   20:  		/* mr R6, R29 */
		/* 8215F478h case   20:*/		regs.R6 = regs.R29;
		/* 8215F478h case   20:*/		return 0x8215F47C;
		  /* 8215F47Ch */ case   21:  		/* mr R5, R30 */
		/* 8215F47Ch case   21:*/		regs.R5 = regs.R30;
		/* 8215F47Ch case   21:*/		return 0x8215F480;
		  /* 8215F480h */ case   22:  		/* mr R4, R31 */
		/* 8215F480h case   22:*/		regs.R4 = regs.R31;
		/* 8215F480h case   22:*/		return 0x8215F484;
		  /* 8215F484h */ case   23:  		/* li R7, 546 */
		/* 8215F484h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x222);
		/* 8215F484h case   23:*/		return 0x8215F488;
		  /* 8215F488h */ case   24:  		/* li R3, 0 */
		/* 8215F488h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F488h case   24:*/		return 0x8215F48C;
		  /* 8215F48Ch */ case   25:  		/* bl -30852 */
		/* 8215F48Ch case   25:*/		regs.LR = 0x8215F490; return 0x82157C08;
		/* 8215F48Ch case   25:*/		return 0x8215F490;
	}
	return 0x8215F490;
} // Block from 8215F428h-8215F490h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8215F490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F490);
		  /* 8215F490h */ case    0:  		/* lwz R3, <#[R28 + 104]> */
		/* 8215F490h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000068) );
		/* 8215F490h case    0:*/		return 0x8215F494;
		  /* 8215F494h */ case    1:  		/* bl 711596 */
		/* 8215F494h case    1:*/		regs.LR = 0x8215F498; return 0x8220D040;
		/* 8215F494h case    1:*/		return 0x8215F498;
		  /* 8215F498h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F498h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F498h case    2:*/		return 0x8215F49C;
		  /* 8215F49Ch */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F49Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F4B8;  }
		/* 8215F49Ch case    3:*/		return 0x8215F4A0;
		  /* 8215F4A0h */ case    4:  		/* mr R6, R29 */
		/* 8215F4A0h case    4:*/		regs.R6 = regs.R29;
		/* 8215F4A0h case    4:*/		return 0x8215F4A4;
		  /* 8215F4A4h */ case    5:  		/* mr R5, R30 */
		/* 8215F4A4h case    5:*/		regs.R5 = regs.R30;
		/* 8215F4A4h case    5:*/		return 0x8215F4A8;
		  /* 8215F4A8h */ case    6:  		/* mr R4, R31 */
		/* 8215F4A8h case    6:*/		regs.R4 = regs.R31;
		/* 8215F4A8h case    6:*/		return 0x8215F4AC;
		  /* 8215F4ACh */ case    7:  		/* li R7, 549 */
		/* 8215F4ACh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x225);
		/* 8215F4ACh case    7:*/		return 0x8215F4B0;
		  /* 8215F4B0h */ case    8:  		/* li R3, 0 */
		/* 8215F4B0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F4B0h case    8:*/		return 0x8215F4B4;
		  /* 8215F4B4h */ case    9:  		/* bl -30892 */
		/* 8215F4B4h case    9:*/		regs.LR = 0x8215F4B8; return 0x82157C08;
		/* 8215F4B4h case    9:*/		return 0x8215F4B8;
	}
	return 0x8215F4B8;
} // Block from 8215F490h-8215F4B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F4B8);
		  /* 8215F4B8h */ case    0:  		/* lwz R3, <#[R28 + 100]> */
		/* 8215F4B8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000064) );
		/* 8215F4B8h case    0:*/		return 0x8215F4BC;
		  /* 8215F4BCh */ case    1:  		/* bl 704772 */
		/* 8215F4BCh case    1:*/		regs.LR = 0x8215F4C0; return 0x8220B5C0;
		/* 8215F4BCh case    1:*/		return 0x8215F4C0;
		  /* 8215F4C0h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F4C0h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F4C0h case    2:*/		return 0x8215F4C4;
		  /* 8215F4C4h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F4C4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F4E0;  }
		/* 8215F4C4h case    3:*/		return 0x8215F4C8;
		  /* 8215F4C8h */ case    4:  		/* mr R6, R29 */
		/* 8215F4C8h case    4:*/		regs.R6 = regs.R29;
		/* 8215F4C8h case    4:*/		return 0x8215F4CC;
		  /* 8215F4CCh */ case    5:  		/* mr R5, R30 */
		/* 8215F4CCh case    5:*/		regs.R5 = regs.R30;
		/* 8215F4CCh case    5:*/		return 0x8215F4D0;
		  /* 8215F4D0h */ case    6:  		/* mr R4, R31 */
		/* 8215F4D0h case    6:*/		regs.R4 = regs.R31;
		/* 8215F4D0h case    6:*/		return 0x8215F4D4;
		  /* 8215F4D4h */ case    7:  		/* li R7, 552 */
		/* 8215F4D4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x228);
		/* 8215F4D4h case    7:*/		return 0x8215F4D8;
		  /* 8215F4D8h */ case    8:  		/* li R3, 0 */
		/* 8215F4D8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F4D8h case    8:*/		return 0x8215F4DC;
		  /* 8215F4DCh */ case    9:  		/* bl -30932 */
		/* 8215F4DCh case    9:*/		regs.LR = 0x8215F4E0; return 0x82157C08;
		/* 8215F4DCh case    9:*/		return 0x8215F4E0;
	}
	return 0x8215F4E0;
} // Block from 8215F4B8h-8215F4E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F4E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F4E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F4E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F4E0);
		  /* 8215F4E0h */ case    0:  		/* lwz R3, <#[R28 + 96]> */
		/* 8215F4E0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000060) );
		/* 8215F4E0h case    0:*/		return 0x8215F4E4;
		  /* 8215F4E4h */ case    1:  		/* bl 3804 */
		/* 8215F4E4h case    1:*/		regs.LR = 0x8215F4E8; return 0x821603C0;
		/* 8215F4E4h case    1:*/		return 0x8215F4E8;
		  /* 8215F4E8h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F4E8h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F4E8h case    2:*/		return 0x8215F4EC;
		  /* 8215F4ECh */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F4ECh case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F508;  }
		/* 8215F4ECh case    3:*/		return 0x8215F4F0;
		  /* 8215F4F0h */ case    4:  		/* mr R6, R29 */
		/* 8215F4F0h case    4:*/		regs.R6 = regs.R29;
		/* 8215F4F0h case    4:*/		return 0x8215F4F4;
		  /* 8215F4F4h */ case    5:  		/* mr R5, R30 */
		/* 8215F4F4h case    5:*/		regs.R5 = regs.R30;
		/* 8215F4F4h case    5:*/		return 0x8215F4F8;
		  /* 8215F4F8h */ case    6:  		/* mr R4, R31 */
		/* 8215F4F8h case    6:*/		regs.R4 = regs.R31;
		/* 8215F4F8h case    6:*/		return 0x8215F4FC;
		  /* 8215F4FCh */ case    7:  		/* li R7, 555 */
		/* 8215F4FCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x22B);
		/* 8215F4FCh case    7:*/		return 0x8215F500;
		  /* 8215F500h */ case    8:  		/* li R3, 0 */
		/* 8215F500h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F500h case    8:*/		return 0x8215F504;
		  /* 8215F504h */ case    9:  		/* bl -30972 */
		/* 8215F504h case    9:*/		regs.LR = 0x8215F508; return 0x82157C08;
		/* 8215F504h case    9:*/		return 0x8215F508;
	}
	return 0x8215F508;
} // Block from 8215F4E0h-8215F508h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F508);
		  /* 8215F508h */ case    0:  		/* lwz R3, <#[R28 + 88]> */
		/* 8215F508h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000058) );
		/* 8215F508h case    0:*/		return 0x8215F50C;
		  /* 8215F50Ch */ case    1:  		/* bl 702060 */
		/* 8215F50Ch case    1:*/		regs.LR = 0x8215F510; return 0x8220AB78;
		/* 8215F50Ch case    1:*/		return 0x8215F510;
		  /* 8215F510h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F510h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F510h case    2:*/		return 0x8215F514;
		  /* 8215F514h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F514h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F530;  }
		/* 8215F514h case    3:*/		return 0x8215F518;
		  /* 8215F518h */ case    4:  		/* mr R6, R29 */
		/* 8215F518h case    4:*/		regs.R6 = regs.R29;
		/* 8215F518h case    4:*/		return 0x8215F51C;
		  /* 8215F51Ch */ case    5:  		/* mr R5, R30 */
		/* 8215F51Ch case    5:*/		regs.R5 = regs.R30;
		/* 8215F51Ch case    5:*/		return 0x8215F520;
		  /* 8215F520h */ case    6:  		/* mr R4, R31 */
		/* 8215F520h case    6:*/		regs.R4 = regs.R31;
		/* 8215F520h case    6:*/		return 0x8215F524;
		  /* 8215F524h */ case    7:  		/* li R7, 558 */
		/* 8215F524h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x22E);
		/* 8215F524h case    7:*/		return 0x8215F528;
		  /* 8215F528h */ case    8:  		/* li R3, 0 */
		/* 8215F528h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F528h case    8:*/		return 0x8215F52C;
		  /* 8215F52Ch */ case    9:  		/* bl -31012 */
		/* 8215F52Ch case    9:*/		regs.LR = 0x8215F530; return 0x82157C08;
		/* 8215F52Ch case    9:*/		return 0x8215F530;
	}
	return 0x8215F530;
} // Block from 8215F508h-8215F530h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F530);
		  /* 8215F530h */ case    0:  		/* lwz R3, <#[R28 + 84]> */
		/* 8215F530h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000054) );
		/* 8215F530h case    0:*/		return 0x8215F534;
		  /* 8215F534h */ case    1:  		/* bl 1596 */
		/* 8215F534h case    1:*/		regs.LR = 0x8215F538; return 0x8215FB70;
		/* 8215F534h case    1:*/		return 0x8215F538;
		  /* 8215F538h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F538h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F538h case    2:*/		return 0x8215F53C;
		  /* 8215F53Ch */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F53Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F558;  }
		/* 8215F53Ch case    3:*/		return 0x8215F540;
		  /* 8215F540h */ case    4:  		/* mr R6, R29 */
		/* 8215F540h case    4:*/		regs.R6 = regs.R29;
		/* 8215F540h case    4:*/		return 0x8215F544;
		  /* 8215F544h */ case    5:  		/* mr R5, R30 */
		/* 8215F544h case    5:*/		regs.R5 = regs.R30;
		/* 8215F544h case    5:*/		return 0x8215F548;
		  /* 8215F548h */ case    6:  		/* mr R4, R31 */
		/* 8215F548h case    6:*/		regs.R4 = regs.R31;
		/* 8215F548h case    6:*/		return 0x8215F54C;
		  /* 8215F54Ch */ case    7:  		/* li R7, 561 */
		/* 8215F54Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x231);
		/* 8215F54Ch case    7:*/		return 0x8215F550;
		  /* 8215F550h */ case    8:  		/* li R3, 0 */
		/* 8215F550h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F550h case    8:*/		return 0x8215F554;
		  /* 8215F554h */ case    9:  		/* bl -31052 */
		/* 8215F554h case    9:*/		regs.LR = 0x8215F558; return 0x82157C08;
		/* 8215F554h case    9:*/		return 0x8215F558;
	}
	return 0x8215F558;
} // Block from 8215F530h-8215F558h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F558);
		  /* 8215F558h */ case    0:  		/* lwz R3, <#[R28 + 80]> */
		/* 8215F558h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000050) );
		/* 8215F558h case    0:*/		return 0x8215F55C;
		  /* 8215F55Ch */ case    1:  		/* bl 715684 */
		/* 8215F55Ch case    1:*/		regs.LR = 0x8215F560; return 0x8220E100;
		/* 8215F55Ch case    1:*/		return 0x8215F560;
		  /* 8215F560h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F560h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F560h case    2:*/		return 0x8215F564;
		  /* 8215F564h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F564h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F580;  }
		/* 8215F564h case    3:*/		return 0x8215F568;
		  /* 8215F568h */ case    4:  		/* mr R6, R29 */
		/* 8215F568h case    4:*/		regs.R6 = regs.R29;
		/* 8215F568h case    4:*/		return 0x8215F56C;
		  /* 8215F56Ch */ case    5:  		/* mr R5, R30 */
		/* 8215F56Ch case    5:*/		regs.R5 = regs.R30;
		/* 8215F56Ch case    5:*/		return 0x8215F570;
		  /* 8215F570h */ case    6:  		/* mr R4, R31 */
		/* 8215F570h case    6:*/		regs.R4 = regs.R31;
		/* 8215F570h case    6:*/		return 0x8215F574;
		  /* 8215F574h */ case    7:  		/* li R7, 564 */
		/* 8215F574h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x234);
		/* 8215F574h case    7:*/		return 0x8215F578;
		  /* 8215F578h */ case    8:  		/* li R3, 0 */
		/* 8215F578h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F578h case    8:*/		return 0x8215F57C;
		  /* 8215F57Ch */ case    9:  		/* bl -31092 */
		/* 8215F57Ch case    9:*/		regs.LR = 0x8215F580; return 0x82157C08;
		/* 8215F57Ch case    9:*/		return 0x8215F580;
	}
	return 0x8215F580;
} // Block from 8215F558h-8215F580h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F580);
		  /* 8215F580h */ case    0:  		/* lwz R3, <#[R28 + 200]> */
		/* 8215F580h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000000C8) );
		/* 8215F580h case    0:*/		return 0x8215F584;
		  /* 8215F584h */ case    1:  		/* bl 717796 */
		/* 8215F584h case    1:*/		regs.LR = 0x8215F588; return 0x8220E968;
		/* 8215F584h case    1:*/		return 0x8215F588;
		  /* 8215F588h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F588h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F588h case    2:*/		return 0x8215F58C;
		  /* 8215F58Ch */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F58Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F5A8;  }
		/* 8215F58Ch case    3:*/		return 0x8215F590;
		  /* 8215F590h */ case    4:  		/* mr R6, R29 */
		/* 8215F590h case    4:*/		regs.R6 = regs.R29;
		/* 8215F590h case    4:*/		return 0x8215F594;
		  /* 8215F594h */ case    5:  		/* mr R5, R30 */
		/* 8215F594h case    5:*/		regs.R5 = regs.R30;
		/* 8215F594h case    5:*/		return 0x8215F598;
		  /* 8215F598h */ case    6:  		/* mr R4, R31 */
		/* 8215F598h case    6:*/		regs.R4 = regs.R31;
		/* 8215F598h case    6:*/		return 0x8215F59C;
		  /* 8215F59Ch */ case    7:  		/* li R7, 567 */
		/* 8215F59Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x237);
		/* 8215F59Ch case    7:*/		return 0x8215F5A0;
		  /* 8215F5A0h */ case    8:  		/* li R3, 0 */
		/* 8215F5A0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F5A0h case    8:*/		return 0x8215F5A4;
		  /* 8215F5A4h */ case    9:  		/* bl -31132 */
		/* 8215F5A4h case    9:*/		regs.LR = 0x8215F5A8; return 0x82157C08;
		/* 8215F5A4h case    9:*/		return 0x8215F5A8;
	}
	return 0x8215F5A8;
} // Block from 8215F580h-8215F5A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F5A8h
// Function '?IA_DestroyPackedBlock@XGRAPHICS@@YAXPAU_IA_INTERNALCONST_BLOCK_HEADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F5A8);
		  /* 8215F5A8h */ case    0:  		/* lwz R3, <#[R28 + 92]> */
		/* 8215F5A8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000005C) );
		/* 8215F5A8h case    0:*/		return 0x8215F5AC;
		  /* 8215F5ACh */ case    1:  		/* bl 699252 */
		/* 8215F5ACh case    1:*/		regs.LR = 0x8215F5B0; return 0x8220A120;
		/* 8215F5ACh case    1:*/		return 0x8215F5B0;
		  /* 8215F5B0h */ case    2:  		/* lwz R3, <#[R28 + 112]> */
		/* 8215F5B0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000070) );
		/* 8215F5B0h case    2:*/		return 0x8215F5B4;
		  /* 8215F5B4h */ case    3:  		/* bl 705708 */
		/* 8215F5B4h case    3:*/		regs.LR = 0x8215F5B8; return 0x8220BA60;
		/* 8215F5B4h case    3:*/		return 0x8215F5B8;
		  /* 8215F5B8h */ case    4:  		/* lwz R3, <#[R28 + 116]> */
		/* 8215F5B8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000074) );
		/* 8215F5B8h case    4:*/		return 0x8215F5BC;
		  /* 8215F5BCh */ case    5:  		/* bl 706292 */
		/* 8215F5BCh case    5:*/		regs.LR = 0x8215F5C0; return 0x8220BCB0;
		/* 8215F5BCh case    5:*/		return 0x8215F5C0;
		  /* 8215F5C0h */ case    6:  		/* lwz R3, <#[R28 + 120]> */
		/* 8215F5C0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000078) );
		/* 8215F5C0h case    6:*/		return 0x8215F5C4;
		  /* 8215F5C4h */ case    7:  		/* bl 706860 */
		/* 8215F5C4h case    7:*/		regs.LR = 0x8215F5C8; return 0x8220BEF0;
		/* 8215F5C4h case    7:*/		return 0x8215F5C8;
	}
	return 0x8215F5C8;
} // Block from 8215F5A8h-8215F5C8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215F5C8h
// Function '?IA_GetFloatUsageBlock@XGRAPHICS@@YAIPAU_IA_INTERNALCONST_BLOCK_HEADER@1@PAPAU_IA_FLOATUSAGE_BLOCK@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F5C8);
		  /* 8215F5C8h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 8215F5C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8215F5C8h case    0:*/		return 0x8215F5CC;
		  /* 8215F5CCh */ case    1:  		/* mr R4, R28 */
		/* 8215F5CCh case    1:*/		regs.R4 = regs.R28;
		/* 8215F5CCh case    1:*/		return 0x8215F5D0;
		  /* 8215F5D0h */ case    2:  		/* lwz R3, <#[R28 + 16]> */
		/* 8215F5D0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8215F5D0h case    2:*/		return 0x8215F5D4;
		  /* 8215F5D4h */ case    3:  		/* mtspr CTR, R11 */
		/* 8215F5D4h case    3:*/		regs.CTR = regs.R11;
		/* 8215F5D4h case    3:*/		return 0x8215F5D8;
		  /* 8215F5D8h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215F5D8h case    4:*/		if ( 1 ) { regs.LR = 0x8215F5DC; return (uint32)regs.CTR; }
		/* 8215F5D8h case    4:*/		return 0x8215F5DC;
		  /* 8215F5DCh */ case    5:  		/* or. R28, R3, R3 */
		/* 8215F5DCh case    5:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8215F5DCh case    5:*/		return 0x8215F5E0;
		  /* 8215F5E0h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F5E0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8215F5FC;  }
		/* 8215F5E0h case    6:*/		return 0x8215F5E4;
		  /* 8215F5E4h */ case    7:  		/* mr R6, R29 */
		/* 8215F5E4h case    7:*/		regs.R6 = regs.R29;
		/* 8215F5E4h case    7:*/		return 0x8215F5E8;
		  /* 8215F5E8h */ case    8:  		/* mr R5, R30 */
		/* 8215F5E8h case    8:*/		regs.R5 = regs.R30;
		/* 8215F5E8h case    8:*/		return 0x8215F5EC;
		  /* 8215F5ECh */ case    9:  		/* mr R4, R31 */
		/* 8215F5ECh case    9:*/		regs.R4 = regs.R31;
		/* 8215F5ECh case    9:*/		return 0x8215F5F0;
	}
	return 0x8215F5F0;
} // Block from 8215F5C8h-8215F5F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F5F0h
// Function '?GetAsMapInfo@XGRAPHICS@@YAPAU__AS_STATE_MAP_INFO@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F5F0);
		  /* 8215F5F0h */ case    0:  		/* li R7, 580 */
		/* 8215F5F0h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x244);
		/* 8215F5F0h case    0:*/		return 0x8215F5F4;
		  /* 8215F5F4h */ case    1:  		/* li R3, 0 */
		/* 8215F5F4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F5F4h case    1:*/		return 0x8215F5F8;
	}
	return 0x8215F5F8;
} // Block from 8215F5F0h-8215F5F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F5F8h
// Function '?GetAsConstInfo@XGRAPHICS@@YAPAU_AS_CONST_INFO@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F5F8);
		  /* 8215F5F8h */ case    0:  		/* bl -31216 */
		/* 8215F5F8h case    0:*/		regs.LR = 0x8215F5FC; return 0x82157C08;
		/* 8215F5F8h case    0:*/		return 0x8215F5FC;
	}
	return 0x8215F5FC;
} // Block from 8215F5F8h-8215F5FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F5FC);
		  /* 8215F5FCh */ case    0:  		/* mr R3, R28 */
		/* 8215F5FCh case    0:*/		regs.R3 = regs.R28;
		/* 8215F5FCh case    0:*/		return 0x8215F600;
	}
	return 0x8215F600;
} // Block from 8215F5FCh-8215F600h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F600h
// Function '?GetShaderStore@XGRAPHICS@@YAPAU_SS_SHADER_STORE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F600);
		  /* 8215F600h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215F600h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215F600h case    0:*/		return 0x8215F604;
		  /* 8215F604h */ case    1:  		/* b -844636 */
		/* 8215F604h case    1:*/		return 0x820912A8;
		/* 8215F604h case    1:*/		return 0x8215F608;
	}
	return 0x8215F608;
} // Block from 8215F600h-8215F608h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F608h
// Function '?GetStatePreprocessor@XGRAPHICS@@YAPAU_SP_STATE_PREPROCESSOR@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F608);
		  /* 8215F608h */ case    0:  		/* lwz R3, <#[R3 + 32]> */
		/* 8215F608h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000020) );
		/* 8215F608h case    0:*/		return 0x8215F60C;
		  /* 8215F60Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8215F60Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215F60Ch case    1:*/		return 0x8215F610;
	}
	return 0x8215F610;
} // Block from 8215F608h-8215F610h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F610h
// Function '?GetStateCache@XGRAPHICS@@YAPAU_SC_STATE_CACHE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F610);
		  /* 8215F610h */ case    0:  		/* mfspr R12, LR */
		/* 8215F610h case    0:*/		regs.R12 = regs.LR;
		/* 8215F610h case    0:*/		return 0x8215F614;
		  /* 8215F614h */ case    1:  		/* bl -844740 */
		/* 8215F614h case    1:*/		regs.LR = 0x8215F618; return 0x82091250;
		/* 8215F614h case    1:*/		return 0x8215F618;
	}
	return 0x8215F618;
} // Block from 8215F610h-8215F618h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F618h
// Function '?GetStateCompiler@XGRAPHICS@@YAPAU_CC_STATE_COMPILER@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F618);
		  /* 8215F618h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215F618h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215F618h case    0:*/		return 0x8215F61C;
		  /* 8215F61Ch */ case    1:  		/* lis R11, -32253 */
		/* 8215F61Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215F61Ch case    1:*/		return 0x8215F620;
	}
	return 0x8215F620;
} // Block from 8215F618h-8215F620h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F620h
// Function '?GetRegistry@XGRAPHICS@@YAPAU_SSM_REGISTRY@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F620);
		  /* 8215F620h */ case    0:  		/* lis R10, -32252 */
		/* 8215F620h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215F620h case    0:*/		return 0x8215F624;
		  /* 8215F624h */ case    1:  		/* mr R30, R3 */
		/* 8215F624h case    1:*/		regs.R30 = regs.R3;
		/* 8215F624h case    1:*/		return 0x8215F628;
	}
	return 0x8215F628;
} // Block from 8215F620h-8215F628h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F628h
// Function '?GetOrderedListFactory@XGRAPHICS@@YAPAU_ORDERED_LIST_FACTORY@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F628);
		  /* 8215F628h */ case    0:  		/* mr R26, R4 */
		/* 8215F628h case    0:*/		regs.R26 = regs.R4;
		/* 8215F628h case    0:*/		return 0x8215F62C;
		  /* 8215F62Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215F62Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215F62Ch case    1:*/		return 0x8215F630;
	}
	return 0x8215F630;
} // Block from 8215F628h-8215F630h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F630h
// Function '?GetIntegerListFactory@XGRAPHICS@@YAPAU_INTEGER_LIST_FACTORY@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F630);
		  /* 8215F630h */ case    0:  		/* addi R28, R11, 27460 */
		/* 8215F630h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215F630h case    0:*/		return 0x8215F634;
		  /* 8215F634h */ case    1:  		/* addi R27, R10, -19000 */
		/* 8215F634h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFB5C8);
		/* 8215F634h case    1:*/		return 0x8215F638;
	}
	return 0x8215F638;
} // Block from 8215F630h-8215F638h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F638h
// Function '?GetObjectListFactory@XGRAPHICS@@YAPAU_OBJECT_LIST_FACTORY@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F638);
		  /* 8215F638h */ case    0:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F638h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8215F658;  }
		/* 8215F638h case    0:*/		return 0x8215F63C;
		  /* 8215F63Ch */ case    1:  		/* lis R11, -32252 */
		/* 8215F63Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F63Ch case    1:*/		return 0x8215F640;
	}
	return 0x8215F640;
} // Block from 8215F638h-8215F640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F640h
// Function '?GetHwInfoLcc@XGRAPHICS@@YAPAU_HWINFO_LCC@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F640);
		  /* 8215F640h */ case    0:  		/* mr R6, R27 */
		/* 8215F640h case    0:*/		regs.R6 = regs.R27;
		/* 8215F640h case    0:*/		return 0x8215F644;
		  /* 8215F644h */ case    1:  		/* addi R5, R11, -22152 */
		/* 8215F644h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA978);
		/* 8215F644h case    1:*/		return 0x8215F648;
	}
	return 0x8215F648;
} // Block from 8215F640h-8215F648h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215F648h
// Function '?IsRTSEnabled@XGRAPHICS@@YAIPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F648);
		  /* 8215F648h */ case    0:  		/* mr R4, R28 */
		/* 8215F648h case    0:*/		regs.R4 = regs.R28;
		/* 8215F648h case    0:*/		return 0x8215F64C;
		  /* 8215F64Ch */ case    1:  		/* li R7, 132 */
		/* 8215F64Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x84);
		/* 8215F64Ch case    1:*/		return 0x8215F650;
		  /* 8215F650h */ case    2:  		/* li R3, 0 */
		/* 8215F650h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F650h case    2:*/		return 0x8215F654;
		  /* 8215F654h */ case    3:  		/* bl -31308 */
		/* 8215F654h case    3:*/		regs.LR = 0x8215F658; return 0x82157C08;
		/* 8215F654h case    3:*/		return 0x8215F658;
	}
	return 0x8215F658;
} // Block from 8215F648h-8215F658h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215F658h
// Function '?RegisterSSMObj@XGRAPHICS@@YAXPAX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F658);
		  /* 8215F658h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8215F658h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215F658h case    0:*/		return 0x8215F65C;
		  /* 8215F65Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F65Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215F67C;  }
		/* 8215F65Ch case    1:*/		return 0x8215F660;
		  /* 8215F660h */ case    2:  		/* lis R11, -32252 */
		/* 8215F660h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F660h case    2:*/		return 0x8215F664;
		  /* 8215F664h */ case    3:  		/* mr R6, R27 */
		/* 8215F664h case    3:*/		regs.R6 = regs.R27;
		/* 8215F664h case    3:*/		return 0x8215F668;
		  /* 8215F668h */ case    4:  		/* addi R5, R11, -19020 */
		/* 8215F668h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB5B4);
		/* 8215F668h case    4:*/		return 0x8215F66C;
		  /* 8215F66Ch */ case    5:  		/* mr R4, R28 */
		/* 8215F66Ch case    5:*/		regs.R4 = regs.R28;
		/* 8215F66Ch case    5:*/		return 0x8215F670;
		  /* 8215F670h */ case    6:  		/* li R7, 133 */
		/* 8215F670h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x85);
		/* 8215F670h case    6:*/		return 0x8215F674;
		  /* 8215F674h */ case    7:  		/* li R3, 0 */
		/* 8215F674h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F674h case    7:*/		return 0x8215F678;
	}
	return 0x8215F678;
} // Block from 8215F658h-8215F678h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215F678h
// Function '?UnRegisterSSMObj@XGRAPHICS@@YAXPAX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F678);
		  /* 8215F678h */ case    0:  		/* bl -31344 */
		/* 8215F678h case    0:*/		regs.LR = 0x8215F67C; return 0x82157C08;
		/* 8215F678h case    0:*/		return 0x8215F67C;
	}
	return 0x8215F67C;
} // Block from 8215F678h-8215F67Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F67C);
		  /* 8215F67Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8215F67Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215F67Ch case    0:*/		return 0x8215F680;
		  /* 8215F680h */ case    1:  		/* bc 12, CR6_EQ, 288 */
		/* 8215F680h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215F7A0;  }
		/* 8215F680h case    1:*/		return 0x8215F684;
		  /* 8215F684h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8215F684h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215F684h case    2:*/		return 0x8215F688;
		  /* 8215F688h */ case    3:  		/* bc 12, CR6_EQ, 280 */
		/* 8215F688h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215F7A0;  }
		/* 8215F688h case    3:*/		return 0x8215F68C;
		  /* 8215F68Ch */ case    4:  		/* mr R3, R30 */
		/* 8215F68Ch case    4:*/		regs.R3 = regs.R30;
		/* 8215F68Ch case    4:*/		return 0x8215F690;
		  /* 8215F690h */ case    5:  		/* bl 777520 */
		/* 8215F690h case    5:*/		regs.LR = 0x8215F694; return 0x8221D3C0;
		/* 8215F690h case    5:*/		return 0x8215F694;
		  /* 8215F694h */ case    6:  		/* lwz R11, <#[R3 + 20]> */
		/* 8215F694h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8215F694h case    6:*/		return 0x8215F698;
		  /* 8215F698h */ case    7:  		/* li R4, 48 */
		/* 8215F698h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x30);
		/* 8215F698h case    7:*/		return 0x8215F69C;
		  /* 8215F69Ch */ case    8:  		/* mr R29, R3 */
		/* 8215F69Ch case    8:*/		regs.R29 = regs.R3;
		/* 8215F69Ch case    8:*/		return 0x8215F6A0;
		  /* 8215F6A0h */ case    9:  		/* lwz R3, <#[R3 + 16]> */
		/* 8215F6A0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8215F6A0h case    9:*/		return 0x8215F6A4;
		  /* 8215F6A4h */ case   10:  		/* mtspr CTR, R11 */
		/* 8215F6A4h case   10:*/		regs.CTR = regs.R11;
		/* 8215F6A4h case   10:*/		return 0x8215F6A8;
		  /* 8215F6A8h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8215F6A8h case   11:*/		if ( 1 ) { regs.LR = 0x8215F6AC; return (uint32)regs.CTR; }
		/* 8215F6A8h case   11:*/		return 0x8215F6AC;
		  /* 8215F6ACh */ case   12:  		/* or. R31, R3, R3 */
		/* 8215F6ACh case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215F6ACh case   12:*/		return 0x8215F6B0;
		  /* 8215F6B0h */ case   13:  		/* bc 12, CR0_EQ, 240 */
		/* 8215F6B0h case   13:*/		if ( regs.CR[0].eq ) { return 0x8215F7A0;  }
		/* 8215F6B0h case   13:*/		return 0x8215F6B4;
		  /* 8215F6B4h */ case   14:  		/* li R11, 0 */
		/* 8215F6B4h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215F6B4h case   14:*/		return 0x8215F6B8;
		  /* 8215F6B8h */ case   15:  		/* stw R30, <#[R31 + 32]> */
		/* 8215F6B8h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 8215F6B8h case   15:*/		return 0x8215F6BC;
		  /* 8215F6BCh */ case   16:  		/* stw R11, <#[R31 + 40]> */
		/* 8215F6BCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8215F6BCh case   16:*/		return 0x8215F6C0;
		  /* 8215F6C0h */ case   17:  		/* stw R11, <#[R31 + 44]> */
		/* 8215F6C0h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215F6C0h case   17:*/		return 0x8215F6C4;
		  /* 8215F6C4h */ case   18:  		/* lwz R11, <#[R26 + 8]> */
		/* 8215F6C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8215F6C4h case   18:*/		return 0x8215F6C8;
		  /* 8215F6C8h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8215F6C8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F6C8h case   19:*/		return 0x8215F6CC;
		  /* 8215F6CCh */ case   20:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F6CCh case   20:*/		if ( !regs.CR[6].eq ) { return 0x8215F6EC;  }
		/* 8215F6CCh case   20:*/		return 0x8215F6D0;
		  /* 8215F6D0h */ case   21:  		/* lis R11, -32252 */
		/* 8215F6D0h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F6D0h case   21:*/		return 0x8215F6D4;
		  /* 8215F6D4h */ case   22:  		/* mr R6, R27 */
		/* 8215F6D4h case   22:*/		regs.R6 = regs.R27;
		/* 8215F6D4h case   22:*/		return 0x8215F6D8;
		  /* 8215F6D8h */ case   23:  		/* addi R5, R11, -19056 */
		/* 8215F6D8h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB590);
		/* 8215F6D8h case   23:*/		return 0x8215F6DC;
		  /* 8215F6DCh */ case   24:  		/* mr R4, R28 */
		/* 8215F6DCh case   24:*/		regs.R4 = regs.R28;
		/* 8215F6DCh case   24:*/		return 0x8215F6E0;
		  /* 8215F6E0h */ case   25:  		/* li R7, 169 */
		/* 8215F6E0h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0xA9);
		/* 8215F6E0h case   25:*/		return 0x8215F6E4;
		  /* 8215F6E4h */ case   26:  		/* li R3, 0 */
		/* 8215F6E4h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F6E4h case   26:*/		return 0x8215F6E8;
		  /* 8215F6E8h */ case   27:  		/* bl -31456 */
		/* 8215F6E8h case   27:*/		regs.LR = 0x8215F6EC; return 0x82157C08;
		/* 8215F6E8h case   27:*/		return 0x8215F6EC;
	}
	return 0x8215F6EC;
} // Block from 8215F67Ch-8215F6ECh (28 instructions)

//////////////////////////////////////////////////////
// Block at 8215F6ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F6EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F6EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F6EC);
		  /* 8215F6ECh */ case    0:  		/* lwz R11, <#[R26 + 20]> */
		/* 8215F6ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 8215F6ECh case    0:*/		return 0x8215F6F0;
		  /* 8215F6F0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F6F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F6F0h case    1:*/		return 0x8215F6F4;
		  /* 8215F6F4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F6F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F714;  }
		/* 8215F6F4h case    2:*/		return 0x8215F6F8;
		  /* 8215F6F8h */ case    3:  		/* lis R11, -32252 */
		/* 8215F6F8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F6F8h case    3:*/		return 0x8215F6FC;
		  /* 8215F6FCh */ case    4:  		/* mr R6, R27 */
		/* 8215F6FCh case    4:*/		regs.R6 = regs.R27;
		/* 8215F6FCh case    4:*/		return 0x8215F700;
		  /* 8215F700h */ case    5:  		/* addi R5, R11, -19096 */
		/* 8215F700h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB568);
		/* 8215F700h case    5:*/		return 0x8215F704;
		  /* 8215F704h */ case    6:  		/* mr R4, R28 */
		/* 8215F704h case    6:*/		regs.R4 = regs.R28;
		/* 8215F704h case    6:*/		return 0x8215F708;
		  /* 8215F708h */ case    7:  		/* li R7, 170 */
		/* 8215F708h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xAA);
		/* 8215F708h case    7:*/		return 0x8215F70C;
		  /* 8215F70Ch */ case    8:  		/* li R3, 0 */
		/* 8215F70Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F70Ch case    8:*/		return 0x8215F710;
		  /* 8215F710h */ case    9:  		/* bl -31496 */
		/* 8215F710h case    9:*/		regs.LR = 0x8215F714; return 0x82157C08;
		/* 8215F710h case    9:*/		return 0x8215F714;
	}
	return 0x8215F714;
} // Block from 8215F6ECh-8215F714h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F714);
		  /* 8215F714h */ case    0:  		/* lwz R11, <#[R26 + 24]> */
		/* 8215F714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 8215F714h case    0:*/		return 0x8215F718;
	}
	return 0x8215F718;
} // Block from 8215F714h-8215F718h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F718h
// Function '?UnRegisterAndReleaseAllSSMObjects@XGRAPHICS@@YAXPAU_SSM_DEVINFO@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F718);
		  /* 8215F718h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8215F718h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F718h case    0:*/		return 0x8215F71C;
		  /* 8215F71Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F71Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215F73C;  }
		/* 8215F71Ch case    1:*/		return 0x8215F720;
		  /* 8215F720h */ case    2:  		/* lis R11, -32252 */
		/* 8215F720h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F720h case    2:*/		return 0x8215F724;
		  /* 8215F724h */ case    3:  		/* mr R6, R27 */
		/* 8215F724h case    3:*/		regs.R6 = regs.R27;
		/* 8215F724h case    3:*/		return 0x8215F728;
		  /* 8215F728h */ case    4:  		/* addi R5, R11, -19132 */
		/* 8215F728h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB544);
		/* 8215F728h case    4:*/		return 0x8215F72C;
		  /* 8215F72Ch */ case    5:  		/* mr R4, R28 */
		/* 8215F72Ch case    5:*/		regs.R4 = regs.R28;
		/* 8215F72Ch case    5:*/		return 0x8215F730;
		  /* 8215F730h */ case    6:  		/* li R7, 171 */
		/* 8215F730h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xAB);
		/* 8215F730h case    6:*/		return 0x8215F734;
		  /* 8215F734h */ case    7:  		/* li R3, 0 */
		/* 8215F734h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F734h case    7:*/		return 0x8215F738;
		  /* 8215F738h */ case    8:  		/* bl -31536 */
		/* 8215F738h case    8:*/		regs.LR = 0x8215F73C; return 0x82157C08;
		/* 8215F738h case    8:*/		return 0x8215F73C;
	}
	return 0x8215F73C;
} // Block from 8215F718h-8215F73Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215F73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F73C);
		  /* 8215F73Ch */ case    0:  		/* lwz R11, <#[R26 + 28]> */
		/* 8215F73Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 8215F73Ch case    0:*/		return 0x8215F740;
		  /* 8215F740h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215F740h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215F740h case    1:*/		return 0x8215F744;
		  /* 8215F744h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F744h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215F764;  }
		/* 8215F744h case    2:*/		return 0x8215F748;
		  /* 8215F748h */ case    3:  		/* lis R11, -32252 */
		/* 8215F748h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F748h case    3:*/		return 0x8215F74C;
		  /* 8215F74Ch */ case    4:  		/* mr R6, R27 */
		/* 8215F74Ch case    4:*/		regs.R6 = regs.R27;
		/* 8215F74Ch case    4:*/		return 0x8215F750;
		  /* 8215F750h */ case    5:  		/* addi R5, R11, -19172 */
		/* 8215F750h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB51C);
		/* 8215F750h case    5:*/		return 0x8215F754;
		  /* 8215F754h */ case    6:  		/* mr R4, R28 */
		/* 8215F754h case    6:*/		regs.R4 = regs.R28;
		/* 8215F754h case    6:*/		return 0x8215F758;
		  /* 8215F758h */ case    7:  		/* li R7, 172 */
		/* 8215F758h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xAC);
		/* 8215F758h case    7:*/		return 0x8215F75C;
		  /* 8215F75Ch */ case    8:  		/* li R3, 0 */
		/* 8215F75Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F75Ch case    8:*/		return 0x8215F760;
		  /* 8215F760h */ case    9:  		/* bl -31576 */
		/* 8215F760h case    9:*/		regs.LR = 0x8215F764; return 0x82157C08;
		/* 8215F760h case    9:*/		return 0x8215F764;
	}
	return 0x8215F764;
} // Block from 8215F73Ch-8215F764h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F764);
		  /* 8215F764h */ case    0:  		/* li R5, 32 */
		/* 8215F764h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8215F764h case    0:*/		return 0x8215F768;
		  /* 8215F768h */ case    1:  		/* mr R4, R26 */
		/* 8215F768h case    1:*/		regs.R4 = regs.R26;
		/* 8215F768h case    1:*/		return 0x8215F76C;
		  /* 8215F76Ch */ case    2:  		/* mr R3, R31 */
		/* 8215F76Ch case    2:*/		regs.R3 = regs.R31;
		/* 8215F76Ch case    2:*/		return 0x8215F770;
		  /* 8215F770h */ case    3:  		/* bl -843200 */
		/* 8215F770h case    3:*/		regs.LR = 0x8215F774; return 0x820919B0;
		/* 8215F770h case    3:*/		return 0x8215F774;
		  /* 8215F774h */ case    4:  		/* li R6, 10 */
		/* 8215F774h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 8215F774h case    4:*/		return 0x8215F778;
		  /* 8215F778h */ case    5:  		/* lwz R5, <#[R29 + 24]> */
		/* 8215F778h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000018) );
		/* 8215F778h case    5:*/		return 0x8215F77C;
		  /* 8215F77Ch */ case    6:  		/* lwz R4, <#[R29 + 20]> */
		/* 8215F77Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000014) );
		/* 8215F77Ch case    6:*/		return 0x8215F780;
		  /* 8215F780h */ case    7:  		/* lwz R3, <#[R29 + 16]> */
		/* 8215F780h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000010) );
		/* 8215F780h case    7:*/		return 0x8215F784;
		  /* 8215F784h */ case    8:  		/* bl -17452 */
		/* 8215F784h case    8:*/		regs.LR = 0x8215F788; return 0x8215B358;
		/* 8215F784h case    8:*/		return 0x8215F788;
		  /* 8215F788h */ case    9:  		/* stw R3, <#[R31 + 36]> */
		/* 8215F788h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 8215F788h case    9:*/		return 0x8215F78C;
		  /* 8215F78Ch */ case   10:  		/* mr R4, R31 */
		/* 8215F78Ch case   10:*/		regs.R4 = regs.R31;
		/* 8215F78Ch case   10:*/		return 0x8215F790;
		  /* 8215F790h */ case   11:  		/* mr R3, R30 */
		/* 8215F790h case   11:*/		regs.R3 = regs.R30;
		/* 8215F790h case   11:*/		return 0x8215F794;
		  /* 8215F794h */ case   12:  		/* bl -2900 */
		/* 8215F794h case   12:*/		regs.LR = 0x8215F798; return 0x8215EC40;
		/* 8215F794h case   12:*/		return 0x8215F798;
		  /* 8215F798h */ case   13:  		/* mr R3, R31 */
		/* 8215F798h case   13:*/		regs.R3 = regs.R31;
		/* 8215F798h case   13:*/		return 0x8215F79C;
		  /* 8215F79Ch */ case   14:  		/* b 8 */
		/* 8215F79Ch case   14:*/		return 0x8215F7A4;
		/* 8215F79Ch case   14:*/		return 0x8215F7A0;
	}
	return 0x8215F7A0;
} // Block from 8215F764h-8215F7A0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215F7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F7A0);
		  /* 8215F7A0h */ case    0:  		/* li R3, 0 */
		/* 8215F7A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F7A0h case    0:*/		return 0x8215F7A4;
	}
	return 0x8215F7A4;
} // Block from 8215F7A0h-8215F7A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F7A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F7A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F7A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F7A4);
		  /* 8215F7A4h */ case    0:  		/* addi R1, R1, 144 */
		/* 8215F7A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215F7A4h case    0:*/		return 0x8215F7A8;
		  /* 8215F7A8h */ case    1:  		/* b -845064 */
		/* 8215F7A8h case    1:*/		return 0x820912A0;
		/* 8215F7A8h case    1:*/		return 0x8215F7AC;
		  /* 8215F7ACh */ case    2:  		/* nop */
		/* 8215F7ACh case    2:*/		cpu::op::nop();
		/* 8215F7ACh case    2:*/		return 0x8215F7B0;
	}
	return 0x8215F7B0;
} // Block from 8215F7A4h-8215F7B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215F7B0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F7B0);
		  /* 8215F7B0h */ case    0:  		/* lwz R11, <#[R3 + 40]> */
		/* 8215F7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8215F7B0h case    0:*/		return 0x8215F7B4;
		  /* 8215F7B4h */ case    1:  		/* mr R10, R3 */
		/* 8215F7B4h case    1:*/		regs.R10 = regs.R3;
		/* 8215F7B4h case    1:*/		return 0x8215F7B8;
		  /* 8215F7B8h */ case    2:  		/* mr R5, R4 */
		/* 8215F7B8h case    2:*/		regs.R5 = regs.R4;
		/* 8215F7B8h case    2:*/		return 0x8215F7BC;
		  /* 8215F7BCh */ case    3:  		/* lwz R3, <#[R3 + 36]> */
		/* 8215F7BCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000024) );
		/* 8215F7BCh case    3:*/		return 0x8215F7C0;
		  /* 8215F7C0h */ case    4:  		/* addi R4, R11, 1 */
		/* 8215F7C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1);
		/* 8215F7C0h case    4:*/		return 0x8215F7C4;
		  /* 8215F7C4h */ case    5:  		/* stw R4, <#[R10 + 40]> */
		/* 8215F7C4h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + 0x00000028) );
		/* 8215F7C4h case    5:*/		return 0x8215F7C8;
		  /* 8215F7C8h */ case    6:  		/* b -16952 */
		/* 8215F7C8h case    6:*/		return 0x8215B590;
		/* 8215F7C8h case    6:*/		return 0x8215F7CC;
		  /* 8215F7CCh */ case    7:  		/* nop */
		/* 8215F7CCh case    7:*/		cpu::op::nop();
		/* 8215F7CCh case    7:*/		return 0x8215F7D0;
	}
	return 0x8215F7D0;
} // Block from 8215F7B0h-8215F7D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215F7D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F7D0);
		  /* 8215F7D0h */ case    0:  		/* mfspr R12, LR */
		/* 8215F7D0h case    0:*/		regs.R12 = regs.LR;
		/* 8215F7D0h case    0:*/		return 0x8215F7D4;
		  /* 8215F7D4h */ case    1:  		/* bl -845188 */
		/* 8215F7D4h case    1:*/		regs.LR = 0x8215F7D8; return 0x82091250;
		/* 8215F7D4h case    1:*/		return 0x8215F7D8;
		  /* 8215F7D8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215F7D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215F7D8h case    2:*/		return 0x8215F7DC;
		  /* 8215F7DCh */ case    3:  		/* lis R11, -32253 */
		/* 8215F7DCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215F7DCh case    3:*/		return 0x8215F7E0;
	}
	return 0x8215F7E0;
} // Block from 8215F7D0h-8215F7E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215F7E0h
// Function '?AF_Init@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SSM_ABSTRACTSTATE_FACTORY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F7E0);
		  /* 8215F7E0h */ case    0:  		/* lis R10, -32252 */
		/* 8215F7E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215F7E0h case    0:*/		return 0x8215F7E4;
		  /* 8215F7E4h */ case    1:  		/* mr R30, R3 */
		/* 8215F7E4h case    1:*/		regs.R30 = regs.R3;
		/* 8215F7E4h case    1:*/		return 0x8215F7E8;
		  /* 8215F7E8h */ case    2:  		/* mr R28, R4 */
		/* 8215F7E8h case    2:*/		regs.R28 = regs.R4;
		/* 8215F7E8h case    2:*/		return 0x8215F7EC;
		  /* 8215F7ECh */ case    3:  		/* li R31, 0 */
		/* 8215F7ECh case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215F7ECh case    3:*/		return 0x8215F7F0;
		  /* 8215F7F0h */ case    4:  		/* li R29, 0 */
		/* 8215F7F0h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215F7F0h case    4:*/		return 0x8215F7F4;
		  /* 8215F7F4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215F7F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215F7F4h case    5:*/		return 0x8215F7F8;
		  /* 8215F7F8h */ case    6:  		/* addi R27, R11, 27460 */
		/* 8215F7F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8215F7F8h case    6:*/		return 0x8215F7FC;
		  /* 8215F7FCh */ case    7:  		/* addi R26, R10, -19000 */
		/* 8215F7FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB5C8);
		/* 8215F7FCh case    7:*/		return 0x8215F800;
		  /* 8215F800h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 8215F800h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215F820;  }
		/* 8215F800h case    8:*/		return 0x8215F804;
		  /* 8215F804h */ case    9:  		/* lis R11, -32252 */
		/* 8215F804h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F804h case    9:*/		return 0x8215F808;
		  /* 8215F808h */ case   10:  		/* mr R6, R26 */
		/* 8215F808h case   10:*/		regs.R6 = regs.R26;
		/* 8215F808h case   10:*/		return 0x8215F80C;
		  /* 8215F80Ch */ case   11:  		/* addi R5, R11, -22008 */
		/* 8215F80Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA08);
		/* 8215F80Ch case   11:*/		return 0x8215F810;
		  /* 8215F810h */ case   12:  		/* mr R4, R27 */
		/* 8215F810h case   12:*/		regs.R4 = regs.R27;
		/* 8215F810h case   12:*/		return 0x8215F814;
		  /* 8215F814h */ case   13:  		/* li R7, 301 */
		/* 8215F814h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x12D);
		/* 8215F814h case   13:*/		return 0x8215F818;
		  /* 8215F818h */ case   14:  		/* li R3, 0 */
		/* 8215F818h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F818h case   14:*/		return 0x8215F81C;
		  /* 8215F81Ch */ case   15:  		/* bl -31764 */
		/* 8215F81Ch case   15:*/		regs.LR = 0x8215F820; return 0x82157C08;
		/* 8215F81Ch case   15:*/		return 0x8215F820;
	}
	return 0x8215F820;
} // Block from 8215F7E0h-8215F820h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8215F820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F820);
		  /* 8215F820h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8215F820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8215F820h case    0:*/		return 0x8215F824;
		  /* 8215F824h */ case    1:  		/* bc 12, CR6_EQ, 72 */
		/* 8215F824h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215F86C;  }
		/* 8215F824h case    1:*/		return 0x8215F828;
		  /* 8215F828h */ case    2:  		/* lwz R11, <#[R30 + 40]> */
		/* 8215F828h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8215F828h case    2:*/		return 0x8215F82C;
		  /* 8215F82Ch */ case    3:  		/* cmplw CR6, R31, R11 */
		/* 8215F82Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215F82Ch case    3:*/		return 0x8215F830;
		  /* 8215F830h */ case    4:  		/* bc 12, CR6_GT, 32 */
		/* 8215F830h case    4:*/		if ( regs.CR[6].gt ) { return 0x8215F850;  }
		/* 8215F830h case    4:*/		return 0x8215F834;
		  /* 8215F834h */ case    5:  		/* addi R31, R31, 1 */
		/* 8215F834h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8215F834h case    5:*/		return 0x8215F838;
		  /* 8215F838h */ case    6:  		/* lwz R3, <#[R30 + 36]> */
		/* 8215F838h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 8215F838h case    6:*/		return 0x8215F83C;
		  /* 8215F83Ch */ case    7:  		/* mr R4, R31 */
		/* 8215F83Ch case    7:*/		regs.R4 = regs.R31;
		/* 8215F83Ch case    7:*/		return 0x8215F840;
		  /* 8215F840h */ case    8:  		/* bl -16688 */
		/* 8215F840h case    8:*/		regs.LR = 0x8215F844; return 0x8215B710;
		/* 8215F840h case    8:*/		return 0x8215F844;
		  /* 8215F844h */ case    9:  		/* mr R29, R3 */
		/* 8215F844h case    9:*/		regs.R29 = regs.R3;
		/* 8215F844h case    9:*/		return 0x8215F848;
		  /* 8215F848h */ case   10:  		/* cmplw CR6, R3, R28 */
		/* 8215F848h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 8215F848h case   10:*/		return 0x8215F84C;
		  /* 8215F84Ch */ case   11:  		/* bc 4, CR6_EQ, -36 */
		/* 8215F84Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215F828;  }
		/* 8215F84Ch case   11:*/		return 0x8215F850;
	}
	return 0x8215F850;
} // Block from 8215F820h-8215F850h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215F850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F850);
		  /* 8215F850h */ case    0:  		/* cmplw CR6, R29, R28 */
		/* 8215F850h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 8215F850h case    0:*/		return 0x8215F854;
		  /* 8215F854h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 8215F854h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215F86C;  }
		/* 8215F854h case    1:*/		return 0x8215F858;
		  /* 8215F858h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 8215F858h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8215F858h case    2:*/		return 0x8215F85C;
		  /* 8215F85Ch */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8215F85Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8215F86C;  }
		/* 8215F85Ch case    3:*/		return 0x8215F860;
		  /* 8215F860h */ case    4:  		/* lwz R11, <#[R30 + 40]> */
		/* 8215F860h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8215F860h case    4:*/		return 0x8215F864;
		  /* 8215F864h */ case    5:  		/* cmplw CR6, R31, R11 */
		/* 8215F864h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8215F864h case    5:*/		return 0x8215F868;
	}
	return 0x8215F868;
} // Block from 8215F850h-8215F868h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215F868h
// Function '?SSMDeviceCreate@XGRAPHICS@@YIPAXPAU_SSM_SSMDEVICE2CLIENT_INTERFACE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F868);
		  /* 8215F868h */ case    0:  		/* bc 4, CR6_GT, 32 */
		/* 8215F868h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8215F888;  }
		/* 8215F868h case    0:*/		return 0x8215F86C;
	}
	return 0x8215F86C;
} // Block from 8215F868h-8215F86Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F86Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F86C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F86C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F86C);
		  /* 8215F86Ch */ case    0:  		/* lis R11, -32252 */
		/* 8215F86Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F86Ch case    0:*/		return 0x8215F870;
		  /* 8215F870h */ case    1:  		/* mr R6, R26 */
		/* 8215F870h case    1:*/		regs.R6 = regs.R26;
		/* 8215F870h case    1:*/		return 0x8215F874;
		  /* 8215F874h */ case    2:  		/* addi R5, R11, -18900 */
		/* 8215F874h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB62C);
		/* 8215F874h case    2:*/		return 0x8215F878;
		  /* 8215F878h */ case    3:  		/* mr R4, R27 */
		/* 8215F878h case    3:*/		regs.R4 = regs.R27;
		/* 8215F878h case    3:*/		return 0x8215F87C;
		  /* 8215F87Ch */ case    4:  		/* li R7, 316 */
		/* 8215F87Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x13C);
		/* 8215F87Ch case    4:*/		return 0x8215F880;
		  /* 8215F880h */ case    5:  		/* li R3, 0 */
		/* 8215F880h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F880h case    5:*/		return 0x8215F884;
		  /* 8215F884h */ case    6:  		/* bl -31868 */
		/* 8215F884h case    6:*/		regs.LR = 0x8215F888; return 0x82157C08;
		/* 8215F884h case    6:*/		return 0x8215F888;
	}
	return 0x8215F888;
} // Block from 8215F86Ch-8215F888h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215F888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F888);
		  /* 8215F888h */ case    0:  		/* mr R4, R31 */
		/* 8215F888h case    0:*/		regs.R4 = regs.R31;
		/* 8215F888h case    0:*/		return 0x8215F88C;
		  /* 8215F88Ch */ case    1:  		/* lwz R3, <#[R30 + 36]> */
		/* 8215F88Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000024) );
		/* 8215F88Ch case    1:*/		return 0x8215F890;
		  /* 8215F890h */ case    2:  		/* bl -16592 */
		/* 8215F890h case    2:*/		regs.LR = 0x8215F894; return 0x8215B7C0;
		/* 8215F890h case    2:*/		return 0x8215F894;
		  /* 8215F894h */ case    3:  		/* addi R1, R1, 144 */
		/* 8215F894h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215F894h case    3:*/		return 0x8215F898;
		  /* 8215F898h */ case    4:  		/* b -845304 */
		/* 8215F898h case    4:*/		return 0x820912A0;
		/* 8215F898h case    4:*/		return 0x8215F89C;
		  /* 8215F89Ch */ case    5:  		/* nop */
		/* 8215F89Ch case    5:*/		cpu::op::nop();
		/* 8215F89Ch case    5:*/		return 0x8215F8A0;
	}
	return 0x8215F8A0;
} // Block from 8215F888h-8215F8A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215F8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F8A0);
		  /* 8215F8A0h */ case    0:  		/* mfspr R12, LR */
		/* 8215F8A0h case    0:*/		regs.R12 = regs.LR;
		/* 8215F8A0h case    0:*/		return 0x8215F8A4;
		  /* 8215F8A4h */ case    1:  		/* bl -845400 */
		/* 8215F8A4h case    1:*/		regs.LR = 0x8215F8A8; return 0x8209124C;
		/* 8215F8A4h case    1:*/		return 0x8215F8A8;
		  /* 8215F8A8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215F8A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215F8A8h case    2:*/		return 0x8215F8AC;
		  /* 8215F8ACh */ case    3:  		/* lis R8, -32252 */
		/* 8215F8ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8215F8ACh case    3:*/		return 0x8215F8B0;
		  /* 8215F8B0h */ case    4:  		/* lis R9, -32253 */
		/* 8215F8B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215F8B0h case    4:*/		return 0x8215F8B4;
		  /* 8215F8B4h */ case    5:  		/* lis R10, -32252 */
		/* 8215F8B4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215F8B4h case    5:*/		return 0x8215F8B8;
		  /* 8215F8B8h */ case    6:  		/* lis R11, -32252 */
		/* 8215F8B8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F8B8h case    6:*/		return 0x8215F8BC;
		  /* 8215F8BCh */ case    7:  		/* mr R25, R3 */
		/* 8215F8BCh case    7:*/		regs.R25 = regs.R3;
		/* 8215F8BCh case    7:*/		return 0x8215F8C0;
		  /* 8215F8C0h */ case    8:  		/* li R29, 0 */
		/* 8215F8C0h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8215F8C0h case    8:*/		return 0x8215F8C4;
		  /* 8215F8C4h */ case    9:  		/* addi R27, R8, -22032 */
		/* 8215F8C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R8,0xFFFFA9F0);
		/* 8215F8C4h case    9:*/		return 0x8215F8C8;
		  /* 8215F8C8h */ case   10:  		/* addi R31, R9, 27460 */
		/* 8215F8C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x6B44);
		/* 8215F8C8h case   10:*/		return 0x8215F8CC;
		  /* 8215F8CCh */ case   11:  		/* addi R26, R10, -18840 */
		/* 8215F8CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB668);
		/* 8215F8CCh case   11:*/		return 0x8215F8D0;
		  /* 8215F8D0h */ case   12:  		/* addi R30, R11, -19000 */
		/* 8215F8D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFB5C8);
		/* 8215F8D0h case   12:*/		return 0x8215F8D4;
		  /* 8215F8D4h */ case   13:  		/* mr R4, R29 */
		/* 8215F8D4h case   13:*/		regs.R4 = regs.R29;
		/* 8215F8D4h case   13:*/		return 0x8215F8D8;
		  /* 8215F8D8h */ case   14:  		/* lwz R3, <#[R25 + 36]> */
		/* 8215F8D8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000024) );
		/* 8215F8D8h case   14:*/		return 0x8215F8DC;
		  /* 8215F8DCh */ case   15:  		/* bl -16844 */
		/* 8215F8DCh case   15:*/		regs.LR = 0x8215F8E0; return 0x8215B710;
		/* 8215F8DCh case   15:*/		return 0x8215F8E0;
		  /* 8215F8E0h */ case   16:  		/* or. R28, R3, R3 */
		/* 8215F8E0h case   16:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8215F8E0h case   16:*/		return 0x8215F8E4;
		  /* 8215F8E4h */ case   17:  		/* bc 12, CR0_EQ, 88 */
		/* 8215F8E4h case   17:*/		if ( regs.CR[0].eq ) { return 0x8215F93C;  }
		/* 8215F8E4h case   17:*/		return 0x8215F8E8;
		  /* 8215F8E8h */ case   18:  		/* cmplwi CR6, R29, 0 */
		/* 8215F8E8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215F8E8h case   18:*/		return 0x8215F8EC;
		  /* 8215F8ECh */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 8215F8ECh case   19:*/		if ( regs.CR[6].eq ) { return 0x8215F8FC;  }
		/* 8215F8ECh case   19:*/		return 0x8215F8F0;
		  /* 8215F8F0h */ case   20:  		/* lwz R11, <#[R25 + 40]> */
		/* 8215F8F0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 8215F8F0h case   20:*/		return 0x8215F8F4;
		  /* 8215F8F4h */ case   21:  		/* cmplw CR6, R29, R11 */
		/* 8215F8F4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8215F8F4h case   21:*/		return 0x8215F8F8;
		  /* 8215F8F8h */ case   22:  		/* bc 4, CR6_GT, 28 */
		/* 8215F8F8h case   22:*/		if ( !regs.CR[6].gt ) { return 0x8215F914;  }
		/* 8215F8F8h case   22:*/		return 0x8215F8FC;
	}
	return 0x8215F8FC;
} // Block from 8215F8A0h-8215F8FCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8215F8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F8FC);
		  /* 8215F8FCh */ case    0:  		/* mr R6, R30 */
		/* 8215F8FCh case    0:*/		regs.R6 = regs.R30;
		/* 8215F8FCh case    0:*/		return 0x8215F900;
		  /* 8215F900h */ case    1:  		/* mr R5, R26 */
		/* 8215F900h case    1:*/		regs.R5 = regs.R26;
		/* 8215F900h case    1:*/		return 0x8215F904;
		  /* 8215F904h */ case    2:  		/* mr R4, R31 */
		/* 8215F904h case    2:*/		regs.R4 = regs.R31;
		/* 8215F904h case    2:*/		return 0x8215F908;
		  /* 8215F908h */ case    3:  		/* li R7, 340 */
		/* 8215F908h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x154);
		/* 8215F908h case    3:*/		return 0x8215F90C;
		  /* 8215F90Ch */ case    4:  		/* li R3, 0 */
		/* 8215F90Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F90Ch case    4:*/		return 0x8215F910;
		  /* 8215F910h */ case    5:  		/* bl -32008 */
		/* 8215F910h case    5:*/		regs.LR = 0x8215F914; return 0x82157C08;
		/* 8215F910h case    5:*/		return 0x8215F914;
	}
	return 0x8215F914;
} // Block from 8215F8FCh-8215F914h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215F914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F914);
		  /* 8215F914h */ case    0:  		/* mr R3, R28 */
		/* 8215F914h case    0:*/		regs.R3 = regs.R28;
		/* 8215F914h case    0:*/		return 0x8215F918;
		  /* 8215F918h */ case    1:  		/* bl -18792 */
		/* 8215F918h case    1:*/		regs.LR = 0x8215F91C; return 0x8215AFB0;
		/* 8215F918h case    1:*/		return 0x8215F91C;
		  /* 8215F91Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8215F91Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215F91Ch case    2:*/		return 0x8215F920;
		  /* 8215F920h */ case    3:  		/* bc 12, CR0_EQ, 28 */
		/* 8215F920h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215F93C;  }
		/* 8215F920h case    3:*/		return 0x8215F924;
		  /* 8215F924h */ case    4:  		/* mr R6, R30 */
		/* 8215F924h case    4:*/		regs.R6 = regs.R30;
		/* 8215F924h case    4:*/		return 0x8215F928;
		  /* 8215F928h */ case    5:  		/* mr R5, R27 */
		/* 8215F928h case    5:*/		regs.R5 = regs.R27;
		/* 8215F928h case    5:*/		return 0x8215F92C;
		  /* 8215F92Ch */ case    6:  		/* mr R4, R31 */
		/* 8215F92Ch case    6:*/		regs.R4 = regs.R31;
		/* 8215F92Ch case    6:*/		return 0x8215F930;
		  /* 8215F930h */ case    7:  		/* li R7, 345 */
		/* 8215F930h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x159);
		/* 8215F930h case    7:*/		return 0x8215F934;
		  /* 8215F934h */ case    8:  		/* li R3, 0 */
		/* 8215F934h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F934h case    8:*/		return 0x8215F938;
		  /* 8215F938h */ case    9:  		/* bl -32048 */
		/* 8215F938h case    9:*/		regs.LR = 0x8215F93C; return 0x82157C08;
		/* 8215F938h case    9:*/		return 0x8215F93C;
	}
	return 0x8215F93C;
} // Block from 8215F914h-8215F93Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215F93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F93C);
		  /* 8215F93Ch */ case    0:  		/* lwz R11, <#[R25 + 40]> */
		/* 8215F93Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 8215F93Ch case    0:*/		return 0x8215F940;
		  /* 8215F940h */ case    1:  		/* addi R29, R29, 1 */
		/* 8215F940h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8215F940h case    1:*/		return 0x8215F944;
		  /* 8215F944h */ case    2:  		/* addi R11, R11, 1 */
		/* 8215F944h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215F944h case    2:*/		return 0x8215F948;
		  /* 8215F948h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 8215F948h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8215F948h case    3:*/		return 0x8215F94C;
		  /* 8215F94Ch */ case    4:  		/* bc 4, CR6_GT, -120 */
		/* 8215F94Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8215F8D4;  }
		/* 8215F94Ch case    4:*/		return 0x8215F950;
		  /* 8215F950h */ case    5:  		/* addi R1, R1, 144 */
		/* 8215F950h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215F950h case    5:*/		return 0x8215F954;
		  /* 8215F954h */ case    6:  		/* b -845496 */
		/* 8215F954h case    6:*/		return 0x8209129C;
		/* 8215F954h case    6:*/		return 0x8215F958;
	}
	return 0x8215F958;
} // Block from 8215F93Ch-8215F958h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215F958h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F958);
		  /* 8215F958h */ case    0:  		/* mfspr R12, LR */
		/* 8215F958h case    0:*/		regs.R12 = regs.LR;
		/* 8215F958h case    0:*/		return 0x8215F95C;
		  /* 8215F95Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215F95Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215F95Ch case    1:*/		return 0x8215F960;
		  /* 8215F960h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8215F960h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215F960h case    2:*/		return 0x8215F964;
		  /* 8215F964h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8215F964h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8215F964h case    3:*/		return 0x8215F968;
		  /* 8215F968h */ case    4:  		/* mr R31, R3 */
		/* 8215F968h case    4:*/		regs.R31 = regs.R3;
		/* 8215F968h case    4:*/		return 0x8215F96C;
		  /* 8215F96Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8215F96Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215F96Ch case    5:*/		return 0x8215F970;
		  /* 8215F970h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8215F970h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8215F97C;  }
		/* 8215F970h case    6:*/		return 0x8215F974;
		  /* 8215F974h */ case    7:  		/* li R3, 17 */
		/* 8215F974h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x11);
		/* 8215F974h case    7:*/		return 0x8215F978;
		  /* 8215F978h */ case    8:  		/* b 108 */
		/* 8215F978h case    8:*/		return 0x8215F9E4;
		/* 8215F978h case    8:*/		return 0x8215F97C;
	}
	return 0x8215F97C;
} // Block from 8215F958h-8215F97Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215F97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F97C);
		  /* 8215F97Ch */ case    0:  		/* mr R3, R31 */
		/* 8215F97Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215F97Ch case    0:*/		return 0x8215F980;
		  /* 8215F980h */ case    1:  		/* bl -224 */
		/* 8215F980h case    1:*/		regs.LR = 0x8215F984; return 0x8215F8A0;
		/* 8215F980h case    1:*/		return 0x8215F984;
		  /* 8215F984h */ case    2:  		/* lwz R3, <#[R31 + 36]> */
		/* 8215F984h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 8215F984h case    2:*/		return 0x8215F988;
		  /* 8215F988h */ case    3:  		/* bl -17656 */
		/* 8215F988h case    3:*/		regs.LR = 0x8215F98C; return 0x8215B490;
		/* 8215F988h case    3:*/		return 0x8215F98C;
		  /* 8215F98Ch */ case    4:  		/* mr R4, R31 */
		/* 8215F98Ch case    4:*/		regs.R4 = regs.R31;
		/* 8215F98Ch case    4:*/		return 0x8215F990;
		  /* 8215F990h */ case    5:  		/* lwz R3, <#[R31 + 32]> */
		/* 8215F990h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8215F990h case    5:*/		return 0x8215F994;
		  /* 8215F994h */ case    6:  		/* bl -3380 */
		/* 8215F994h case    6:*/		regs.LR = 0x8215F998; return 0x8215EC60;
		/* 8215F994h case    6:*/		return 0x8215F998;
		  /* 8215F998h */ case    7:  		/* lwz R3, <#[R31 + 32]> */
		/* 8215F998h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 8215F998h case    7:*/		return 0x8215F99C;
		  /* 8215F99Ch */ case    8:  		/* bl 776740 */
		/* 8215F99Ch case    8:*/		regs.LR = 0x8215F9A0; return 0x8221D3C0;
		/* 8215F99Ch case    8:*/		return 0x8215F9A0;
		  /* 8215F9A0h */ case    9:  		/* lwz R11, <#[R3 + 24]> */
		/* 8215F9A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8215F9A0h case    9:*/		return 0x8215F9A4;
		  /* 8215F9A4h */ case   10:  		/* mr R4, R31 */
		/* 8215F9A4h case   10:*/		regs.R4 = regs.R31;
		/* 8215F9A4h case   10:*/		return 0x8215F9A8;
		  /* 8215F9A8h */ case   11:  		/* lwz R3, <#[R3 + 16]> */
		/* 8215F9A8h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 8215F9A8h case   11:*/		return 0x8215F9AC;
		  /* 8215F9ACh */ case   12:  		/* mtspr CTR, R11 */
		/* 8215F9ACh case   12:*/		regs.CTR = regs.R11;
		/* 8215F9ACh case   12:*/		return 0x8215F9B0;
		  /* 8215F9B0h */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8215F9B0h case   13:*/		if ( 1 ) { regs.LR = 0x8215F9B4; return (uint32)regs.CTR; }
		/* 8215F9B0h case   13:*/		return 0x8215F9B4;
		  /* 8215F9B4h */ case   14:  		/* or. R31, R3, R3 */
		/* 8215F9B4h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215F9B4h case   14:*/		return 0x8215F9B8;
		  /* 8215F9B8h */ case   15:  		/* bc 12, CR0_EQ, 40 */
		/* 8215F9B8h case   15:*/		if ( regs.CR[0].eq ) { return 0x8215F9E0;  }
		/* 8215F9B8h case   15:*/		return 0x8215F9BC;
		  /* 8215F9BCh */ case   16:  		/* lis R11, -32252 */
		/* 8215F9BCh case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215F9BCh case   16:*/		return 0x8215F9C0;
		  /* 8215F9C0h */ case   17:  		/* lis R10, -32252 */
		/* 8215F9C0h case   17:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215F9C0h case   17:*/		return 0x8215F9C4;
		  /* 8215F9C4h */ case   18:  		/* lis R9, -32253 */
		/* 8215F9C4h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215F9C4h case   18:*/		return 0x8215F9C8;
		  /* 8215F9C8h */ case   19:  		/* addi R6, R11, -19000 */
		/* 8215F9C8h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB5C8);
		/* 8215F9C8h case   19:*/		return 0x8215F9CC;
		  /* 8215F9CCh */ case   20:  		/* addi R5, R10, -19192 */
		/* 8215F9CCh case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB508);
		/* 8215F9CCh case   20:*/		return 0x8215F9D0;
		  /* 8215F9D0h */ case   21:  		/* addi R4, R9, 27460 */
		/* 8215F9D0h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215F9D0h case   21:*/		return 0x8215F9D4;
		  /* 8215F9D4h */ case   22:  		/* li R7, 253 */
		/* 8215F9D4h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0xFD);
		/* 8215F9D4h case   22:*/		return 0x8215F9D8;
		  /* 8215F9D8h */ case   23:  		/* li R3, 0 */
		/* 8215F9D8h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215F9D8h case   23:*/		return 0x8215F9DC;
		  /* 8215F9DCh */ case   24:  		/* bl -32212 */
		/* 8215F9DCh case   24:*/		regs.LR = 0x8215F9E0; return 0x82157C08;
		/* 8215F9DCh case   24:*/		return 0x8215F9E0;
	}
	return 0x8215F9E0;
} // Block from 8215F97Ch-8215F9E0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8215F9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F9E0);
		  /* 8215F9E0h */ case    0:  		/* mr R3, R31 */
		/* 8215F9E0h case    0:*/		regs.R3 = regs.R31;
		/* 8215F9E0h case    0:*/		return 0x8215F9E4;
	}
	return 0x8215F9E4;
} // Block from 8215F9E0h-8215F9E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215F9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F9E4);
		  /* 8215F9E4h */ case    0:  		/* addi R1, R1, 96 */
		/* 8215F9E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215F9E4h case    0:*/		return 0x8215F9E8;
		  /* 8215F9E8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215F9E8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215F9E8h case    1:*/		return 0x8215F9EC;
		  /* 8215F9ECh */ case    2:  		/* mtspr LR, R12 */
		/* 8215F9ECh case    2:*/		regs.LR = regs.R12;
		/* 8215F9ECh case    2:*/		return 0x8215F9F0;
		  /* 8215F9F0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8215F9F0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215F9F0h case    3:*/		return 0x8215F9F4;
		  /* 8215F9F4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8215F9F4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215F9F4h case    4:*/		return 0x8215F9F8;
	}
	return 0x8215F9F8;
} // Block from 8215F9E4h-8215F9F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215F9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215F9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215F9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215F9F8);
		  /* 8215F9F8h */ case    0:  		/* mfspr R12, LR */
		/* 8215F9F8h case    0:*/		regs.R12 = regs.LR;
		/* 8215F9F8h case    0:*/		return 0x8215F9FC;
		  /* 8215F9FCh */ case    1:  		/* bl -845744 */
		/* 8215F9FCh case    1:*/		regs.LR = 0x8215FA00; return 0x8209124C;
		/* 8215F9FCh case    1:*/		return 0x8215FA00;
		  /* 8215FA00h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215FA00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215FA00h case    2:*/		return 0x8215FA04;
		  /* 8215FA04h */ case    3:  		/* lis R11, -32253 */
		/* 8215FA04h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215FA04h case    3:*/		return 0x8215FA08;
		  /* 8215FA08h */ case    4:  		/* lis R10, -32252 */
		/* 8215FA08h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FA08h case    4:*/		return 0x8215FA0C;
		  /* 8215FA0Ch */ case    5:  		/* mr R25, R3 */
		/* 8215FA0Ch case    5:*/		regs.R25 = regs.R3;
		/* 8215FA0Ch case    5:*/		return 0x8215FA10;
		  /* 8215FA10h */ case    6:  		/* mr R29, R4 */
		/* 8215FA10h case    6:*/		regs.R29 = regs.R4;
		/* 8215FA10h case    6:*/		return 0x8215FA14;
		  /* 8215FA14h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215FA14h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FA14h case    7:*/		return 0x8215FA18;
		  /* 8215FA18h */ case    8:  		/* addi R28, R11, 27460 */
		/* 8215FA18h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215FA18h case    8:*/		return 0x8215FA1C;
		  /* 8215FA1Ch */ case    9:  		/* addi R27, R10, -18768 */
		/* 8215FA1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFB6B0);
		/* 8215FA1Ch case    9:*/		return 0x8215FA20;
		  /* 8215FA20h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FA20h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8215FA40;  }
		/* 8215FA20h case   10:*/		return 0x8215FA24;
		  /* 8215FA24h */ case   11:  		/* lis R11, -32252 */
		/* 8215FA24h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FA24h case   11:*/		return 0x8215FA28;
		  /* 8215FA28h */ case   12:  		/* mr R6, R27 */
		/* 8215FA28h case   12:*/		regs.R6 = regs.R27;
		/* 8215FA28h case   12:*/		return 0x8215FA2C;
		  /* 8215FA2Ch */ case   13:  		/* addi R5, R11, -18788 */
		/* 8215FA2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8215FA2Ch case   13:*/		return 0x8215FA30;
		  /* 8215FA30h */ case   14:  		/* mr R4, R28 */
		/* 8215FA30h case   14:*/		regs.R4 = regs.R28;
		/* 8215FA30h case   14:*/		return 0x8215FA34;
		  /* 8215FA34h */ case   15:  		/* li R7, 193 */
		/* 8215FA34h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xC1);
		/* 8215FA34h case   15:*/		return 0x8215FA38;
		  /* 8215FA38h */ case   16:  		/* li R3, 0 */
		/* 8215FA38h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FA38h case   16:*/		return 0x8215FA3C;
		  /* 8215FA3Ch */ case   17:  		/* bl -32308 */
		/* 8215FA3Ch case   17:*/		regs.LR = 0x8215FA40; return 0x82157C08;
		/* 8215FA3Ch case   17:*/		return 0x8215FA40;
	}
	return 0x8215FA40;
} // Block from 8215F9F8h-8215FA40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215FA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FA40);
		  /* 8215FA40h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8215FA40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8215FA40h case    0:*/		return 0x8215FA44;
		  /* 8215FA44h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FA44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215FA64;  }
		/* 8215FA44h case    1:*/		return 0x8215FA48;
		  /* 8215FA48h */ case    2:  		/* lis R11, -32252 */
		/* 8215FA48h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FA48h case    2:*/		return 0x8215FA4C;
		  /* 8215FA4Ch */ case    3:  		/* mr R6, R27 */
		/* 8215FA4Ch case    3:*/		regs.R6 = regs.R27;
		/* 8215FA4Ch case    3:*/		return 0x8215FA50;
		  /* 8215FA50h */ case    4:  		/* addi R5, R11, -18796 */
		/* 8215FA50h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB694);
		/* 8215FA50h case    4:*/		return 0x8215FA54;
		  /* 8215FA54h */ case    5:  		/* mr R4, R28 */
		/* 8215FA54h case    5:*/		regs.R4 = regs.R28;
		/* 8215FA54h case    5:*/		return 0x8215FA58;
		  /* 8215FA58h */ case    6:  		/* li R7, 194 */
		/* 8215FA58h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0xC2);
		/* 8215FA58h case    6:*/		return 0x8215FA5C;
		  /* 8215FA5Ch */ case    7:  		/* li R3, 0 */
		/* 8215FA5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FA5Ch case    7:*/		return 0x8215FA60;
		  /* 8215FA60h */ case    8:  		/* bl -32344 */
		/* 8215FA60h case    8:*/		regs.LR = 0x8215FA64; return 0x82157C08;
		/* 8215FA60h case    8:*/		return 0x8215FA64;
	}
	return 0x8215FA64;
} // Block from 8215FA40h-8215FA64h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215FA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FA64);
		  /* 8215FA64h */ case    0:  		/* lwz R3, <#[R29 + 12]> */
		/* 8215FA64h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215FA64h case    0:*/		return 0x8215FA68;
		  /* 8215FA68h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215FA68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FA68h case    1:*/		return 0x8215FA6C;
		  /* 8215FA6Ch */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 8215FA6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FAD4;  }
		/* 8215FA6Ch case    2:*/		return 0x8215FA70;
		  /* 8215FA70h */ case    3:  		/* bl -12176 */
		/* 8215FA70h case    3:*/		regs.LR = 0x8215FA74; return 0x8215CAE0;
		/* 8215FA70h case    3:*/		return 0x8215FA74;
		  /* 8215FA74h */ case    4:  		/* or. R31, R3, R3 */
		/* 8215FA74h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215FA74h case    4:*/		return 0x8215FA78;
		  /* 8215FA78h */ case    5:  		/* bc 12, CR0_EQ, 84 */
		/* 8215FA78h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215FACC;  }
		/* 8215FA78h case    5:*/		return 0x8215FA7C;
		  /* 8215FA7Ch */ case    6:  		/* lis R11, -32252 */
		/* 8215FA7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FA7Ch case    6:*/		return 0x8215FA80;
		  /* 8215FA80h */ case    7:  		/* addi R26, R11, -22036 */
		/* 8215FA80h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFA9EC);
		/* 8215FA80h case    7:*/		return 0x8215FA84;
		  /* 8215FA84h */ case    8:  		/* mr R3, R31 */
		/* 8215FA84h case    8:*/		regs.R3 = regs.R31;
		/* 8215FA84h case    8:*/		return 0x8215FA88;
		  /* 8215FA88h */ case    9:  		/* bl -11416 */
		/* 8215FA88h case    9:*/		regs.LR = 0x8215FA8C; return 0x8215CDF0;
		/* 8215FA88h case    9:*/		return 0x8215FA8C;
		  /* 8215FA8Ch */ case   10:  		/* or. R30, R3, R3 */
		/* 8215FA8Ch case   10:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215FA8Ch case   10:*/		return 0x8215FA90;
		  /* 8215FA90h */ case   11:  		/* bc 4, CR0_EQ, 28 */
		/* 8215FA90h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8215FAAC;  }
		/* 8215FA90h case   11:*/		return 0x8215FA94;
		  /* 8215FA94h */ case   12:  		/* mr R6, R27 */
		/* 8215FA94h case   12:*/		regs.R6 = regs.R27;
		/* 8215FA94h case   12:*/		return 0x8215FA98;
		  /* 8215FA98h */ case   13:  		/* mr R5, R26 */
		/* 8215FA98h case   13:*/		regs.R5 = regs.R26;
		/* 8215FA98h case   13:*/		return 0x8215FA9C;
		  /* 8215FA9Ch */ case   14:  		/* mr R4, R28 */
		/* 8215FA9Ch case   14:*/		regs.R4 = regs.R28;
		/* 8215FA9Ch case   14:*/		return 0x8215FAA0;
		  /* 8215FAA0h */ case   15:  		/* li R7, 203 */
		/* 8215FAA0h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xCB);
		/* 8215FAA0h case   15:*/		return 0x8215FAA4;
		  /* 8215FAA4h */ case   16:  		/* li R3, 0 */
		/* 8215FAA4h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FAA4h case   16:*/		return 0x8215FAA8;
		  /* 8215FAA8h */ case   17:  		/* bl -32416 */
		/* 8215FAA8h case   17:*/		regs.LR = 0x8215FAAC; return 0x82157C08;
		/* 8215FAA8h case   17:*/		return 0x8215FAAC;
	}
	return 0x8215FAAC;
} // Block from 8215FA64h-8215FAACh (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215FAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FAAC);
		  /* 8215FAACh */ case    0:  		/* mr R3, R30 */
		/* 8215FAACh case    0:*/		regs.R3 = regs.R30;
		/* 8215FAACh case    0:*/		return 0x8215FAB0;
		  /* 8215FAB0h */ case    1:  		/* bl -10392 */
		/* 8215FAB0h case    1:*/		regs.LR = 0x8215FAB4; return 0x8215D218;
		/* 8215FAB0h case    1:*/		return 0x8215FAB4;
		  /* 8215FAB4h */ case    2:  		/* mr R3, R31 */
		/* 8215FAB4h case    2:*/		regs.R3 = regs.R31;
		/* 8215FAB4h case    2:*/		return 0x8215FAB8;
		  /* 8215FAB8h */ case    3:  		/* bl -11520 */
		/* 8215FAB8h case    3:*/		regs.LR = 0x8215FABC; return 0x8215CDB8;
		/* 8215FAB8h case    3:*/		return 0x8215FABC;
		  /* 8215FABCh */ case    4:  		/* lwz R3, <#[R29 + 12]> */
		/* 8215FABCh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215FABCh case    4:*/		return 0x8215FAC0;
		  /* 8215FAC0h */ case    5:  		/* bl -12256 */
		/* 8215FAC0h case    5:*/		regs.LR = 0x8215FAC4; return 0x8215CAE0;
		/* 8215FAC0h case    5:*/		return 0x8215FAC4;
		  /* 8215FAC4h */ case    6:  		/* or. R31, R3, R3 */
		/* 8215FAC4h case    6:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8215FAC4h case    6:*/		return 0x8215FAC8;
		  /* 8215FAC8h */ case    7:  		/* bc 4, CR0_EQ, -68 */
		/* 8215FAC8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8215FA84;  }
		/* 8215FAC8h case    7:*/		return 0x8215FACC;
	}
	return 0x8215FACC;
} // Block from 8215FAACh-8215FACCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215FACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FACC);
		  /* 8215FACCh */ case    0:  		/* lwz R3, <#[R29 + 12]> */
		/* 8215FACCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 8215FACCh case    0:*/		return 0x8215FAD0;
		  /* 8215FAD0h */ case    1:  		/* bl -13480 */
		/* 8215FAD0h case    1:*/		regs.LR = 0x8215FAD4; return 0x8215C628;
		/* 8215FAD0h case    1:*/		return 0x8215FAD4;
	}
	return 0x8215FAD4;
} // Block from 8215FACCh-8215FAD4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215FAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FAD4);
		  /* 8215FAD4h */ case    0:  		/* lwz R4, <#[R29 + 4]> */
		/* 8215FAD4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		/* 8215FAD4h case    0:*/		return 0x8215FAD8;
		  /* 8215FAD8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8215FAD8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8215FAD8h case    1:*/		return 0x8215FADC;
		  /* 8215FADCh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8215FADCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FAF0;  }
		/* 8215FADCh case    2:*/		return 0x8215FAE0;
		  /* 8215FAE0h */ case    3:  		/* lwz R11, <#[R25 + 12]> */
		/* 8215FAE0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 8215FAE0h case    3:*/		return 0x8215FAE4;
		  /* 8215FAE4h */ case    4:  		/* lwz R3, <#[R25 + 4]> */
		/* 8215FAE4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000004) );
		/* 8215FAE4h case    4:*/		return 0x8215FAE8;
		  /* 8215FAE8h */ case    5:  		/* mtspr CTR, R11 */
		/* 8215FAE8h case    5:*/		regs.CTR = regs.R11;
		/* 8215FAE8h case    5:*/		return 0x8215FAEC;
		  /* 8215FAECh */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8215FAECh case    6:*/		if ( 1 ) { regs.LR = 0x8215FAF0; return (uint32)regs.CTR; }
		/* 8215FAECh case    6:*/		return 0x8215FAF0;
	}
	return 0x8215FAF0;
} // Block from 8215FAD4h-8215FAF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215FAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FAF0);
		  /* 8215FAF0h */ case    0:  		/* mr R4, R29 */
		/* 8215FAF0h case    0:*/		regs.R4 = regs.R29;
		/* 8215FAF0h case    0:*/		return 0x8215FAF4;
		  /* 8215FAF4h */ case    1:  		/* lwz R3, <#[R25]> */
		/* 8215FAF4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 8215FAF4h case    1:*/		return 0x8215FAF8;
		  /* 8215FAF8h */ case    2:  		/* bl 704256 */
		/* 8215FAF8h case    2:*/		regs.LR = 0x8215FAFC; return 0x8220B9F8;
		/* 8215FAF8h case    2:*/		return 0x8215FAFC;
		  /* 8215FAFCh */ case    3:  		/* addi R1, R1, 144 */
		/* 8215FAFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215FAFCh case    3:*/		return 0x8215FB00;
		  /* 8215FB00h */ case    4:  		/* b -845924 */
		/* 8215FB00h case    4:*/		return 0x8209129C;
		/* 8215FB00h case    4:*/		return 0x8215FB04;
		  /* 8215FB04h */ case    5:  		/* nop */
		/* 8215FB04h case    5:*/		cpu::op::nop();
		/* 8215FB04h case    5:*/		return 0x8215FB08;
	}
	return 0x8215FB08;
} // Block from 8215FAF0h-8215FB08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215FB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FB08);
		  /* 8215FB08h */ case    0:  		/* mfspr R12, LR */
		/* 8215FB08h case    0:*/		regs.R12 = regs.LR;
		/* 8215FB08h case    0:*/		return 0x8215FB0C;
		  /* 8215FB0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215FB0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FB0Ch case    1:*/		return 0x8215FB10;
		  /* 8215FB10h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215FB10h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FB10h case    2:*/		return 0x8215FB14;
		  /* 8215FB14h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215FB14h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FB14h case    3:*/		return 0x8215FB18;
		  /* 8215FB18h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215FB18h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215FB18h case    4:*/		return 0x8215FB1C;
		  /* 8215FB1Ch */ case    5:  		/* mr R31, R3 */
		/* 8215FB1Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215FB1Ch case    5:*/		return 0x8215FB20;
		  /* 8215FB20h */ case    6:  		/* mr R30, R4 */
		/* 8215FB20h case    6:*/		regs.R30 = regs.R4;
		/* 8215FB20h case    6:*/		return 0x8215FB24;
		  /* 8215FB24h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215FB24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FB24h case    7:*/		return 0x8215FB28;
		  /* 8215FB28h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8215FB28h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215FB4C;  }
		/* 8215FB28h case    8:*/		return 0x8215FB2C;
		  /* 8215FB2Ch */ case    9:  		/* lis R11, -32252 */
		/* 8215FB2Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FB2Ch case    9:*/		return 0x8215FB30;
		  /* 8215FB30h */ case   10:  		/* lis R10, -32252 */
		/* 8215FB30h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FB30h case   10:*/		return 0x8215FB34;
		  /* 8215FB34h */ case   11:  		/* lis R9, -32253 */
		/* 8215FB34h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215FB34h case   11:*/		return 0x8215FB38;
		  /* 8215FB38h */ case   12:  		/* addi R6, R11, -18768 */
		/* 8215FB38h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB6B0);
		/* 8215FB38h case   12:*/		return 0x8215FB3C;
		  /* 8215FB3Ch */ case   13:  		/* addi R5, R10, -18788 */
		/* 8215FB3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB69C);
		/* 8215FB3Ch case   13:*/		return 0x8215FB40;
		  /* 8215FB40h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8215FB40h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215FB40h case   14:*/		return 0x8215FB44;
		  /* 8215FB44h */ case   15:  		/* li R7, 250 */
		/* 8215FB44h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0xFA);
		/* 8215FB44h case   15:*/		return 0x8215FB48;
		  /* 8215FB48h */ case   16:  		/* bl -32576 */
		/* 8215FB48h case   16:*/		regs.LR = 0x8215FB4C; return 0x82157C08;
		/* 8215FB48h case   16:*/		return 0x8215FB4C;
	}
	return 0x8215FB4C;
} // Block from 8215FB08h-8215FB4Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215FB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FB4C);
		  /* 8215FB4Ch */ case    0:  		/* mr R4, R30 */
		/* 8215FB4Ch case    0:*/		regs.R4 = regs.R30;
		/* 8215FB4Ch case    0:*/		return 0x8215FB50;
		  /* 8215FB50h */ case    1:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215FB50h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FB50h case    1:*/		return 0x8215FB54;
		  /* 8215FB54h */ case    2:  		/* bl 716980 */
		/* 8215FB54h case    2:*/		regs.LR = 0x8215FB58; return 0x8220EC08;
		/* 8215FB54h case    2:*/		return 0x8215FB58;
		  /* 8215FB58h */ case    3:  		/* addi R1, R1, 112 */
		/* 8215FB58h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215FB58h case    3:*/		return 0x8215FB5C;
		  /* 8215FB5Ch */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215FB5Ch case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FB5Ch case    4:*/		return 0x8215FB60;
		  /* 8215FB60h */ case    5:  		/* mtspr LR, R12 */
		/* 8215FB60h case    5:*/		regs.LR = regs.R12;
		/* 8215FB60h case    5:*/		return 0x8215FB64;
		  /* 8215FB64h */ case    6:  		/* ld R30, <#[R1 - 24]> */
		/* 8215FB64h case    6:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FB64h case    6:*/		return 0x8215FB68;
		  /* 8215FB68h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 8215FB68h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FB68h case    7:*/		return 0x8215FB6C;
		  /* 8215FB6Ch */ case    8:  		/* bclr 20, CR0_LT */
		/* 8215FB6Ch case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215FB6Ch case    8:*/		return 0x8215FB70;
	}
	return 0x8215FB70;
} // Block from 8215FB4Ch-8215FB70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215FB70h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FB70);
		  /* 8215FB70h */ case    0:  		/* mfspr R12, LR */
		/* 8215FB70h case    0:*/		regs.R12 = regs.LR;
		/* 8215FB70h case    0:*/		return 0x8215FB74;
		  /* 8215FB74h */ case    1:  		/* bl -846116 */
		/* 8215FB74h case    1:*/		regs.LR = 0x8215FB78; return 0x82091250;
		/* 8215FB74h case    1:*/		return 0x8215FB78;
		  /* 8215FB78h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215FB78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215FB78h case    2:*/		return 0x8215FB7C;
		  /* 8215FB7Ch */ case    3:  		/* lis R10, -32253 */
		/* 8215FB7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215FB7Ch case    3:*/		return 0x8215FB80;
		  /* 8215FB80h */ case    4:  		/* lis R11, -32252 */
		/* 8215FB80h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FB80h case    4:*/		return 0x8215FB84;
		  /* 8215FB84h */ case    5:  		/* mr R31, R3 */
		/* 8215FB84h case    5:*/		regs.R31 = regs.R3;
		/* 8215FB84h case    5:*/		return 0x8215FB88;
		  /* 8215FB88h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8215FB88h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FB88h case    6:*/		return 0x8215FB8C;
		  /* 8215FB8Ch */ case    7:  		/* addi R27, R10, 27460 */
		/* 8215FB8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6B44);
		/* 8215FB8Ch case    7:*/		return 0x8215FB90;
		  /* 8215FB90h */ case    8:  		/* addi R26, R11, -18768 */
		/* 8215FB90h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFB6B0);
		/* 8215FB90h case    8:*/		return 0x8215FB94;
		  /* 8215FB94h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FB94h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8215FBB4;  }
		/* 8215FB94h case    9:*/		return 0x8215FB98;
		  /* 8215FB98h */ case   10:  		/* lis R11, -32252 */
		/* 8215FB98h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FB98h case   10:*/		return 0x8215FB9C;
		  /* 8215FB9Ch */ case   11:  		/* mr R6, R26 */
		/* 8215FB9Ch case   11:*/		regs.R6 = regs.R26;
		/* 8215FB9Ch case   11:*/		return 0x8215FBA0;
		  /* 8215FBA0h */ case   12:  		/* addi R5, R11, -18788 */
		/* 8215FBA0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8215FBA0h case   12:*/		return 0x8215FBA4;
		  /* 8215FBA4h */ case   13:  		/* mr R4, R27 */
		/* 8215FBA4h case   13:*/		regs.R4 = regs.R27;
		/* 8215FBA4h case   13:*/		return 0x8215FBA8;
		  /* 8215FBA8h */ case   14:  		/* li R7, 389 */
		/* 8215FBA8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x185);
		/* 8215FBA8h case   14:*/		return 0x8215FBAC;
		  /* 8215FBACh */ case   15:  		/* li R3, 0 */
		/* 8215FBACh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FBACh case   15:*/		return 0x8215FBB0;
		  /* 8215FBB0h */ case   16:  		/* bl -32680 */
		/* 8215FBB0h case   16:*/		regs.LR = 0x8215FBB4; return 0x82157C08;
		/* 8215FBB0h case   16:*/		return 0x8215FBB4;
	}
	return 0x8215FBB4;
} // Block from 8215FB70h-8215FBB4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215FBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FBB4);
		  /* 8215FBB4h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8215FBB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FBB4h case    0:*/		return 0x8215FBB8;
		  /* 8215FBB8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8215FBB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215FBB8h case    1:*/		return 0x8215FBBC;
		  /* 8215FBBCh */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 8215FBBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FC44;  }
		/* 8215FBBCh case    2:*/		return 0x8215FBC0;
		  /* 8215FBC0h */ case    3:  		/* lwz R11, <#[R31 + 24]> */
		/* 8215FBC0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8215FBC0h case    3:*/		return 0x8215FBC4;
		  /* 8215FBC4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8215FBC4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215FBC4h case    4:*/		return 0x8215FBC8;
		  /* 8215FBC8h */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 8215FBC8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215FC44;  }
		/* 8215FBC8h case    5:*/		return 0x8215FBCC;
		  /* 8215FBCCh */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215FBCCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215FBCCh case    6:*/		return 0x8215FBD0;
		  /* 8215FBD0h */ case    7:  		/* li R29, 1 */
		/* 8215FBD0h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8215FBD0h case    7:*/		return 0x8215FBD4;
		  /* 8215FBD4h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 8215FBD4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8215FBD4h case    8:*/		return 0x8215FBD8;
		  /* 8215FBD8h */ case    9:  		/* bc 4, CR6_GT, 108 */
		/* 8215FBD8h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8215FC44;  }
		/* 8215FBD8h case    9:*/		return 0x8215FBDC;
		  /* 8215FBDCh */ case   10:  		/* lis R11, -32252 */
		/* 8215FBDCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FBDCh case   10:*/		return 0x8215FBE0;
		  /* 8215FBE0h */ case   11:  		/* addi R28, R11, -18796 */
		/* 8215FBE0h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB694);
		/* 8215FBE0h case   11:*/		return 0x8215FBE4;
		  /* 8215FBE4h */ case   12:  		/* mr R4, R29 */
		/* 8215FBE4h case   12:*/		regs.R4 = regs.R29;
		/* 8215FBE4h case   12:*/		return 0x8215FBE8;
		  /* 8215FBE8h */ case   13:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215FBE8h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FBE8h case   13:*/		return 0x8215FBEC;
		  /* 8215FBECh */ case   14:  		/* bl 717052 */
		/* 8215FBECh case   14:*/		regs.LR = 0x8215FBF0; return 0x8220ECE8;
		/* 8215FBECh case   14:*/		return 0x8215FBF0;
		  /* 8215FBF0h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8215FBF0h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215FBF0h case   15:*/		return 0x8215FBF4;
		  /* 8215FBF4h */ case   16:  		/* bc 12, CR0_EQ, 64 */
		/* 8215FBF4h case   16:*/		if ( regs.CR[0].eq ) { return 0x8215FC34;  }
		/* 8215FBF4h case   16:*/		return 0x8215FBF8;
		  /* 8215FBF8h */ case   17:  		/* lwz R5, <#[R3 + 8]> */
		/* 8215FBF8h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000008) );
		/* 8215FBF8h case   17:*/		return 0x8215FBFC;
		  /* 8215FBFCh */ case   18:  		/* lwz R4, <#[R3 + 4]> */
		/* 8215FBFCh case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8215FBFCh case   18:*/		return 0x8215FC00;
		  /* 8215FC00h */ case   19:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215FC00h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215FC00h case   19:*/		return 0x8215FC04;
		  /* 8215FC04h */ case   20:  		/* bl 718060 */
		/* 8215FC04h case   20:*/		regs.LR = 0x8215FC08; return 0x8220F0F0;
		/* 8215FC04h case   20:*/		return 0x8215FC08;
		  /* 8215FC08h */ case   21:  		/* or. R30, R3, R3 */
		/* 8215FC08h case   21:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215FC08h case   21:*/		return 0x8215FC0C;
		  /* 8215FC0Ch */ case   22:  		/* bc 4, CR0_EQ, 28 */
		/* 8215FC0Ch case   22:*/		if ( !regs.CR[0].eq ) { return 0x8215FC28;  }
		/* 8215FC0Ch case   22:*/		return 0x8215FC10;
		  /* 8215FC10h */ case   23:  		/* mr R6, R26 */
		/* 8215FC10h case   23:*/		regs.R6 = regs.R26;
		/* 8215FC10h case   23:*/		return 0x8215FC14;
		  /* 8215FC14h */ case   24:  		/* mr R5, R28 */
		/* 8215FC14h case   24:*/		regs.R5 = regs.R28;
		/* 8215FC14h case   24:*/		return 0x8215FC18;
		  /* 8215FC18h */ case   25:  		/* mr R4, R27 */
		/* 8215FC18h case   25:*/		regs.R4 = regs.R27;
		/* 8215FC18h case   25:*/		return 0x8215FC1C;
		  /* 8215FC1Ch */ case   26:  		/* li R7, 423 */
		/* 8215FC1Ch case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x1A7);
		/* 8215FC1Ch case   26:*/		return 0x8215FC20;
		  /* 8215FC20h */ case   27:  		/* li R3, 0 */
		/* 8215FC20h case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FC20h case   27:*/		return 0x8215FC24;
		  /* 8215FC24h */ case   28:  		/* bl -32796 */
		/* 8215FC24h case   28:*/		regs.LR = 0x8215FC28; return 0x82157C08;
		/* 8215FC24h case   28:*/		return 0x8215FC28;
	}
	return 0x8215FC28;
} // Block from 8215FBB4h-8215FC28h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC28);
		  /* 8215FC28h */ case    0:  		/* mr R4, R30 */
		/* 8215FC28h case    0:*/		regs.R4 = regs.R30;
		/* 8215FC28h case    0:*/		return 0x8215FC2C;
		  /* 8215FC2Ch */ case    1:  		/* mr R3, R31 */
		/* 8215FC2Ch case    1:*/		regs.R3 = regs.R31;
		/* 8215FC2Ch case    1:*/		return 0x8215FC30;
		  /* 8215FC30h */ case    2:  		/* bl -568 */
		/* 8215FC30h case    2:*/		regs.LR = 0x8215FC34; return 0x8215F9F8;
		/* 8215FC30h case    2:*/		return 0x8215FC34;
	}
	return 0x8215FC34;
} // Block from 8215FC28h-8215FC34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC34);
		  /* 8215FC34h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8215FC34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8215FC34h case    0:*/		return 0x8215FC38;
		  /* 8215FC38h */ case    1:  		/* addi R29, R29, 1 */
		/* 8215FC38h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8215FC38h case    1:*/		return 0x8215FC3C;
		  /* 8215FC3Ch */ case    2:  		/* cmplw CR6, R29, R11 */
		/* 8215FC3Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8215FC3Ch case    2:*/		return 0x8215FC40;
		  /* 8215FC40h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 8215FC40h case    3:*/		if ( regs.CR[6].lt ) { return 0x8215FBE4;  }
		/* 8215FC40h case    3:*/		return 0x8215FC44;
	}
	return 0x8215FC44;
} // Block from 8215FC34h-8215FC44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC44);
		  /* 8215FC44h */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215FC44h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FC44h case    0:*/		return 0x8215FC48;
		  /* 8215FC48h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215FC48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FC48h case    1:*/		return 0x8215FC4C;
		  /* 8215FC4Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8215FC4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FC54;  }
		/* 8215FC4Ch case    2:*/		return 0x8215FC50;
		  /* 8215FC50h */ case    3:  		/* bl 716400 */
		/* 8215FC50h case    3:*/		regs.LR = 0x8215FC54; return 0x8220EAC0;
		/* 8215FC50h case    3:*/		return 0x8215FC54;
	}
	return 0x8215FC54;
} // Block from 8215FC44h-8215FC54h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC54);
		  /* 8215FC54h */ case    0:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215FC54h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215FC54h case    0:*/		return 0x8215FC58;
		  /* 8215FC58h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215FC58h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FC58h case    1:*/		return 0x8215FC5C;
		  /* 8215FC5Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8215FC5Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FC64;  }
		/* 8215FC5Ch case    2:*/		return 0x8215FC60;
		  /* 8215FC60h */ case    3:  		/* bl 717368 */
		/* 8215FC60h case    3:*/		regs.LR = 0x8215FC64; return 0x8220EE98;
		/* 8215FC60h case    3:*/		return 0x8215FC64;
	}
	return 0x8215FC64;
} // Block from 8215FC54h-8215FC64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC64);
		  /* 8215FC64h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8215FC64h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8215FC64h case    0:*/		return 0x8215FC68;
		  /* 8215FC68h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8215FC68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FC68h case    1:*/		return 0x8215FC6C;
		  /* 8215FC6Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8215FC6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215FC74;  }
		/* 8215FC6Ch case    2:*/		return 0x8215FC70;
		  /* 8215FC70h */ case    3:  		/* bl 703520 */
		/* 8215FC70h case    3:*/		regs.LR = 0x8215FC74; return 0x8220B890;
		/* 8215FC70h case    3:*/		return 0x8215FC74;
	}
	return 0x8215FC74;
} // Block from 8215FC64h-8215FC74h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC74);
		  /* 8215FC74h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8215FC74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8215FC74h case    0:*/		return 0x8215FC78;
		  /* 8215FC78h */ case    1:  		/* mr R4, R31 */
		/* 8215FC78h case    1:*/		regs.R4 = regs.R31;
		/* 8215FC78h case    1:*/		return 0x8215FC7C;
		  /* 8215FC7Ch */ case    2:  		/* lwz R3, <#[R31 + 4]> */
		/* 8215FC7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8215FC7Ch case    2:*/		return 0x8215FC80;
		  /* 8215FC80h */ case    3:  		/* mtspr CTR, R11 */
		/* 8215FC80h case    3:*/		regs.CTR = regs.R11;
		/* 8215FC80h case    3:*/		return 0x8215FC84;
		  /* 8215FC84h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8215FC84h case    4:*/		if ( 1 ) { regs.LR = 0x8215FC88; return (uint32)regs.CTR; }
		/* 8215FC84h case    4:*/		return 0x8215FC88;
		  /* 8215FC88h */ case    5:  		/* li R3, 0 */
		/* 8215FC88h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FC88h case    5:*/		return 0x8215FC8C;
		  /* 8215FC8Ch */ case    6:  		/* addi R1, R1, 144 */
		/* 8215FC8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215FC8Ch case    6:*/		return 0x8215FC90;
		  /* 8215FC90h */ case    7:  		/* b -846320 */
		/* 8215FC90h case    7:*/		return 0x820912A0;
		/* 8215FC90h case    7:*/		return 0x8215FC94;
		  /* 8215FC94h */ case    8:  		/* nop */
		/* 8215FC94h case    8:*/		cpu::op::nop();
		/* 8215FC94h case    8:*/		return 0x8215FC98;
	}
	return 0x8215FC98;
} // Block from 8215FC74h-8215FC98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215FC98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FC98);
		  /* 8215FC98h */ case    0:  		/* mfspr R12, LR */
		/* 8215FC98h case    0:*/		regs.R12 = regs.LR;
		/* 8215FC98h case    0:*/		return 0x8215FC9C;
		  /* 8215FC9Ch */ case    1:  		/* bl -846412 */
		/* 8215FC9Ch case    1:*/		regs.LR = 0x8215FCA0; return 0x82091250;
		/* 8215FC9Ch case    1:*/		return 0x8215FCA0;
		  /* 8215FCA0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215FCA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215FCA0h case    2:*/		return 0x8215FCA4;
		  /* 8215FCA4h */ case    3:  		/* lis R11, -32253 */
		/* 8215FCA4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215FCA4h case    3:*/		return 0x8215FCA8;
		  /* 8215FCA8h */ case    4:  		/* lis R10, -32252 */
		/* 8215FCA8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FCA8h case    4:*/		return 0x8215FCAC;
		  /* 8215FCACh */ case    5:  		/* mr R31, R3 */
		/* 8215FCACh case    5:*/		regs.R31 = regs.R3;
		/* 8215FCACh case    5:*/		return 0x8215FCB0;
		  /* 8215FCB0h */ case    6:  		/* mr R29, R4 */
		/* 8215FCB0h case    6:*/		regs.R29 = regs.R4;
		/* 8215FCB0h case    6:*/		return 0x8215FCB4;
		  /* 8215FCB4h */ case    7:  		/* mr R26, R5 */
		/* 8215FCB4h case    7:*/		regs.R26 = regs.R5;
		/* 8215FCB4h case    7:*/		return 0x8215FCB8;
		  /* 8215FCB8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215FCB8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FCB8h case    8:*/		return 0x8215FCBC;
		  /* 8215FCBCh */ case    9:  		/* addi R28, R11, 27460 */
		/* 8215FCBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215FCBCh case    9:*/		return 0x8215FCC0;
		  /* 8215FCC0h */ case   10:  		/* addi R27, R10, -18768 */
		/* 8215FCC0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFB6B0);
		/* 8215FCC0h case   10:*/		return 0x8215FCC4;
		  /* 8215FCC4h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FCC4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215FCE4;  }
		/* 8215FCC4h case   11:*/		return 0x8215FCC8;
		  /* 8215FCC8h */ case   12:  		/* lis R11, -32252 */
		/* 8215FCC8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FCC8h case   12:*/		return 0x8215FCCC;
		  /* 8215FCCCh */ case   13:  		/* mr R6, R27 */
		/* 8215FCCCh case   13:*/		regs.R6 = regs.R27;
		/* 8215FCCCh case   13:*/		return 0x8215FCD0;
		  /* 8215FCD0h */ case   14:  		/* addi R5, R11, -18788 */
		/* 8215FCD0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8215FCD0h case   14:*/		return 0x8215FCD4;
		  /* 8215FCD4h */ case   15:  		/* mr R4, R28 */
		/* 8215FCD4h case   15:*/		regs.R4 = regs.R28;
		/* 8215FCD4h case   15:*/		return 0x8215FCD8;
		  /* 8215FCD8h */ case   16:  		/* li R7, 575 */
		/* 8215FCD8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x23F);
		/* 8215FCD8h case   16:*/		return 0x8215FCDC;
		  /* 8215FCDCh */ case   17:  		/* li R3, 0 */
		/* 8215FCDCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FCDCh case   17:*/		return 0x8215FCE0;
		  /* 8215FCE0h */ case   18:  		/* bl -32984 */
		/* 8215FCE0h case   18:*/		regs.LR = 0x8215FCE4; return 0x82157C08;
		/* 8215FCE0h case   18:*/		return 0x8215FCE4;
	}
	return 0x8215FCE4;
} // Block from 8215FC98h-8215FCE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215FCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FCE4);
		  /* 8215FCE4h */ case    0:  		/* mr R4, R29 */
		/* 8215FCE4h case    0:*/		regs.R4 = regs.R29;
		/* 8215FCE4h case    0:*/		return 0x8215FCE8;
		  /* 8215FCE8h */ case    1:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215FCE8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FCE8h case    1:*/		return 0x8215FCEC;
		  /* 8215FCECh */ case    2:  		/* bl 716572 */
		/* 8215FCECh case    2:*/		regs.LR = 0x8215FCF0; return 0x8220EC08;
		/* 8215FCECh case    2:*/		return 0x8215FCF0;
		  /* 8215FCF0h */ case    3:  		/* or. R30, R3, R3 */
		/* 8215FCF0h case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215FCF0h case    3:*/		return 0x8215FCF4;
		  /* 8215FCF4h */ case    4:  		/* bc 12, CR0_EQ, 212 */
		/* 8215FCF4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8215FDC8;  }
		/* 8215FCF4h case    4:*/		return 0x8215FCF8;
		  /* 8215FCF8h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 8215FCF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8215FCF8h case    5:*/		return 0x8215FCFC;
		  /* 8215FCFCh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8215FCFCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215FCFCh case    6:*/		return 0x8215FD00;
		  /* 8215FD00h */ case    7:  		/* bc 12, CR6_GT, 32 */
		/* 8215FD00h case    7:*/		if ( regs.CR[6].gt ) { return 0x8215FD20;  }
		/* 8215FD00h case    7:*/		return 0x8215FD04;
		  /* 8215FD04h */ case    8:  		/* lis R11, -32252 */
		/* 8215FD04h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FD04h case    8:*/		return 0x8215FD08;
		  /* 8215FD08h */ case    9:  		/* mr R6, R27 */
		/* 8215FD08h case    9:*/		regs.R6 = regs.R27;
		/* 8215FD08h case    9:*/		return 0x8215FD0C;
		  /* 8215FD0Ch */ case   10:  		/* addi R5, R11, -18668 */
		/* 8215FD0Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB714);
		/* 8215FD0Ch case   10:*/		return 0x8215FD10;
		  /* 8215FD10h */ case   11:  		/* mr R4, R28 */
		/* 8215FD10h case   11:*/		regs.R4 = regs.R28;
		/* 8215FD10h case   11:*/		return 0x8215FD14;
		  /* 8215FD14h */ case   12:  		/* li R7, 589 */
		/* 8215FD14h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x24D);
		/* 8215FD14h case   12:*/		return 0x8215FD18;
		  /* 8215FD18h */ case   13:  		/* li R3, 0 */
		/* 8215FD18h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FD18h case   13:*/		return 0x8215FD1C;
		  /* 8215FD1Ch */ case   14:  		/* bl -33044 */
		/* 8215FD1Ch case   14:*/		regs.LR = 0x8215FD20; return 0x82157C08;
		/* 8215FD1Ch case   14:*/		return 0x8215FD20;
	}
	return 0x8215FD20;
} // Block from 8215FCE4h-8215FD20h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215FD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FD20);
		  /* 8215FD20h */ case    0:  		/* lwz R11, <#[R30 + 16]> */
		/* 8215FD20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8215FD20h case    0:*/		return 0x8215FD24;
		  /* 8215FD24h */ case    1:  		/* addic. R11, R11, -1 */
		/* 8215FD24h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215FD24h case    1:*/		return 0x8215FD28;
		  /* 8215FD28h */ case    2:  		/* stw R11, <#[R30 + 16]> */
		/* 8215FD28h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8215FD28h case    2:*/		return 0x8215FD2C;
		  /* 8215FD2Ch */ case    3:  		/* bc 4, CR0_EQ, 132 */
		/* 8215FD2Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8215FDB0;  }
		/* 8215FD2Ch case    3:*/		return 0x8215FD30;
		  /* 8215FD30h */ case    4:  		/* mr R4, R29 */
		/* 8215FD30h case    4:*/		regs.R4 = regs.R29;
		/* 8215FD30h case    4:*/		return 0x8215FD34;
		  /* 8215FD34h */ case    5:  		/* lwz R3, <#[R31 + 20]> */
		/* 8215FD34h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8215FD34h case    5:*/		return 0x8215FD38;
		  /* 8215FD38h */ case    6:  		/* bl 716720 */
		/* 8215FD38h case    6:*/		regs.LR = 0x8215FD3C; return 0x8220ECE8;
		/* 8215FD38h case    6:*/		return 0x8215FD3C;
		  /* 8215FD3Ch */ case    7:  		/* lis R11, -32252 */
		/* 8215FD3Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FD3Ch case    7:*/		return 0x8215FD40;
		  /* 8215FD40h */ case    8:  		/* or. R30, R3, R3 */
		/* 8215FD40h case    8:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215FD40h case    8:*/		return 0x8215FD44;
		  /* 8215FD44h */ case    9:  		/* addi R29, R11, -18796 */
		/* 8215FD44h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFB694);
		/* 8215FD44h case    9:*/		return 0x8215FD48;
		  /* 8215FD48h */ case   10:  		/* bc 4, CR0_EQ, 28 */
		/* 8215FD48h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8215FD64;  }
		/* 8215FD48h case   10:*/		return 0x8215FD4C;
		  /* 8215FD4Ch */ case   11:  		/* mr R6, R27 */
		/* 8215FD4Ch case   11:*/		regs.R6 = regs.R27;
		/* 8215FD4Ch case   11:*/		return 0x8215FD50;
		  /* 8215FD50h */ case   12:  		/* mr R5, R29 */
		/* 8215FD50h case   12:*/		regs.R5 = regs.R29;
		/* 8215FD50h case   12:*/		return 0x8215FD54;
		  /* 8215FD54h */ case   13:  		/* mr R4, R28 */
		/* 8215FD54h case   13:*/		regs.R4 = regs.R28;
		/* 8215FD54h case   13:*/		return 0x8215FD58;
		  /* 8215FD58h */ case   14:  		/* li R7, 600 */
		/* 8215FD58h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x258);
		/* 8215FD58h case   14:*/		return 0x8215FD5C;
		  /* 8215FD5Ch */ case   15:  		/* li R3, 0 */
		/* 8215FD5Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FD5Ch case   15:*/		return 0x8215FD60;
		  /* 8215FD60h */ case   16:  		/* bl -33112 */
		/* 8215FD60h case   16:*/		regs.LR = 0x8215FD64; return 0x82157C08;
		/* 8215FD60h case   16:*/		return 0x8215FD64;
	}
	return 0x8215FD64;
} // Block from 8215FD20h-8215FD64h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215FD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FD64);
		  /* 8215FD64h */ case    0:  		/* lwz R5, <#[R30 + 8]> */
		/* 8215FD64h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 8215FD64h case    0:*/		return 0x8215FD68;
		  /* 8215FD68h */ case    1:  		/* lwz R4, <#[R30 + 4]> */
		/* 8215FD68h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 8215FD68h case    1:*/		return 0x8215FD6C;
		  /* 8215FD6Ch */ case    2:  		/* lwz R3, <#[R31 + 24]> */
		/* 8215FD6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8215FD6Ch case    2:*/		return 0x8215FD70;
		  /* 8215FD70h */ case    3:  		/* bl 717696 */
		/* 8215FD70h case    3:*/		regs.LR = 0x8215FD74; return 0x8220F0F0;
		/* 8215FD70h case    3:*/		return 0x8215FD74;
		  /* 8215FD74h */ case    4:  		/* or. R30, R3, R3 */
		/* 8215FD74h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8215FD74h case    4:*/		return 0x8215FD78;
		  /* 8215FD78h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 8215FD78h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215FD94;  }
		/* 8215FD78h case    5:*/		return 0x8215FD7C;
		  /* 8215FD7Ch */ case    6:  		/* mr R6, R27 */
		/* 8215FD7Ch case    6:*/		regs.R6 = regs.R27;
		/* 8215FD7Ch case    6:*/		return 0x8215FD80;
		  /* 8215FD80h */ case    7:  		/* mr R5, R29 */
		/* 8215FD80h case    7:*/		regs.R5 = regs.R29;
		/* 8215FD80h case    7:*/		return 0x8215FD84;
		  /* 8215FD84h */ case    8:  		/* mr R4, R28 */
		/* 8215FD84h case    8:*/		regs.R4 = regs.R28;
		/* 8215FD84h case    8:*/		return 0x8215FD88;
		  /* 8215FD88h */ case    9:  		/* li R7, 608 */
		/* 8215FD88h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x260);
		/* 8215FD88h case    9:*/		return 0x8215FD8C;
		  /* 8215FD8Ch */ case   10:  		/* li R3, 0 */
		/* 8215FD8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FD8Ch case   10:*/		return 0x8215FD90;
		  /* 8215FD90h */ case   11:  		/* bl -33160 */
		/* 8215FD90h case   11:*/		regs.LR = 0x8215FD94; return 0x82157C08;
		/* 8215FD90h case   11:*/		return 0x8215FD94;
	}
	return 0x8215FD94;
} // Block from 8215FD64h-8215FD94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215FD94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FD94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FD94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FD94);
		  /* 8215FD94h */ case    0:  		/* mr R4, R30 */
		/* 8215FD94h case    0:*/		regs.R4 = regs.R30;
		/* 8215FD94h case    0:*/		return 0x8215FD98;
		  /* 8215FD98h */ case    1:  		/* mr R3, R31 */
		/* 8215FD98h case    1:*/		regs.R3 = regs.R31;
		/* 8215FD98h case    1:*/		return 0x8215FD9C;
		  /* 8215FD9Ch */ case    2:  		/* bl -932 */
		/* 8215FD9Ch case    2:*/		regs.LR = 0x8215FDA0; return 0x8215F9F8;
		/* 8215FD9Ch case    2:*/		return 0x8215FDA0;
		  /* 8215FDA0h */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8215FDA0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215FDA0h case    3:*/		return 0x8215FDA4;
		  /* 8215FDA4h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 8215FDA4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8215FDC0;  }
		/* 8215FDA4h case    4:*/		return 0x8215FDA8;
		  /* 8215FDA8h */ case    5:  		/* li R11, 1 */
		/* 8215FDA8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215FDA8h case    5:*/		return 0x8215FDAC;
		  /* 8215FDACh */ case    6:  		/* b 16 */
		/* 8215FDACh case    6:*/		return 0x8215FDBC;
		/* 8215FDACh case    6:*/		return 0x8215FDB0;
	}
	return 0x8215FDB0;
} // Block from 8215FD94h-8215FDB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDB0);
		  /* 8215FDB0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8215FDB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8215FDB0h case    0:*/		return 0x8215FDB4;
		  /* 8215FDB4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8215FDB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8215FDC0;  }
		/* 8215FDB4h case    1:*/		return 0x8215FDB8;
		  /* 8215FDB8h */ case    2:  		/* li R11, 0 */
		/* 8215FDB8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215FDB8h case    2:*/		return 0x8215FDBC;
	}
	return 0x8215FDBC;
} // Block from 8215FDB0h-8215FDBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDBC);
		  /* 8215FDBCh */ case    0:  		/* stw R11, <#[R26]> */
		/* 8215FDBCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8215FDBCh case    0:*/		return 0x8215FDC0;
	}
	return 0x8215FDC0;
} // Block from 8215FDBCh-8215FDC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDC0);
		  /* 8215FDC0h */ case    0:  		/* li R3, 0 */
		/* 8215FDC0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FDC0h case    0:*/		return 0x8215FDC4;
		  /* 8215FDC4h */ case    1:  		/* b 8 */
		/* 8215FDC4h case    1:*/		return 0x8215FDCC;
		/* 8215FDC4h case    1:*/		return 0x8215FDC8;
	}
	return 0x8215FDC8;
} // Block from 8215FDC0h-8215FDC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDC8);
		  /* 8215FDC8h */ case    0:  		/* li R3, 19 */
		/* 8215FDC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8215FDC8h case    0:*/		return 0x8215FDCC;
	}
	return 0x8215FDCC;
} // Block from 8215FDC8h-8215FDCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDCC);
		  /* 8215FDCCh */ case    0:  		/* addi R1, R1, 144 */
		/* 8215FDCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8215FDCCh case    0:*/		return 0x8215FDD0;
		  /* 8215FDD0h */ case    1:  		/* b -846640 */
		/* 8215FDD0h case    1:*/		return 0x820912A0;
		/* 8215FDD0h case    1:*/		return 0x8215FDD4;
		  /* 8215FDD4h */ case    2:  		/* nop */
		/* 8215FDD4h case    2:*/		cpu::op::nop();
		/* 8215FDD4h case    2:*/		return 0x8215FDD8;
	}
	return 0x8215FDD8;
} // Block from 8215FDCCh-8215FDD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215FDD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FDD8);
		  /* 8215FDD8h */ case    0:  		/* mfspr R12, LR */
		/* 8215FDD8h case    0:*/		regs.R12 = regs.LR;
		/* 8215FDD8h case    0:*/		return 0x8215FDDC;
		  /* 8215FDDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215FDDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FDDCh case    1:*/		return 0x8215FDE0;
		  /* 8215FDE0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215FDE0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FDE0h case    2:*/		return 0x8215FDE4;
		  /* 8215FDE4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215FDE4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FDE4h case    3:*/		return 0x8215FDE8;
		  /* 8215FDE8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215FDE8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215FDE8h case    4:*/		return 0x8215FDEC;
		  /* 8215FDECh */ case    5:  		/* mr R31, R3 */
		/* 8215FDECh case    5:*/		regs.R31 = regs.R3;
		/* 8215FDECh case    5:*/		return 0x8215FDF0;
		  /* 8215FDF0h */ case    6:  		/* mr R30, R4 */
		/* 8215FDF0h case    6:*/		regs.R30 = regs.R4;
		/* 8215FDF0h case    6:*/		return 0x8215FDF4;
		  /* 8215FDF4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215FDF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FDF4h case    7:*/		return 0x8215FDF8;
		  /* 8215FDF8h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8215FDF8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215FE1C;  }
		/* 8215FDF8h case    8:*/		return 0x8215FDFC;
		  /* 8215FDFCh */ case    9:  		/* lis R11, -32252 */
		/* 8215FDFCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FDFCh case    9:*/		return 0x8215FE00;
		  /* 8215FE00h */ case   10:  		/* lis R10, -32252 */
		/* 8215FE00h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FE00h case   10:*/		return 0x8215FE04;
		  /* 8215FE04h */ case   11:  		/* lis R9, -32253 */
		/* 8215FE04h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215FE04h case   11:*/		return 0x8215FE08;
		  /* 8215FE08h */ case   12:  		/* addi R6, R11, -18768 */
		/* 8215FE08h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB6B0);
		/* 8215FE08h case   12:*/		return 0x8215FE0C;
		  /* 8215FE0Ch */ case   13:  		/* addi R5, R10, -18788 */
		/* 8215FE0Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB69C);
		/* 8215FE0Ch case   13:*/		return 0x8215FE10;
		  /* 8215FE10h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8215FE10h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215FE10h case   14:*/		return 0x8215FE14;
		  /* 8215FE14h */ case   15:  		/* li R7, 662 */
		/* 8215FE14h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x296);
		/* 8215FE14h case   15:*/		return 0x8215FE18;
		  /* 8215FE18h */ case   16:  		/* bl -33296 */
		/* 8215FE18h case   16:*/		regs.LR = 0x8215FE1C; return 0x82157C08;
		/* 8215FE18h case   16:*/		return 0x8215FE1C;
	}
	return 0x8215FE1C;
} // Block from 8215FDD8h-8215FE1Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE1C);
		  /* 8215FE1Ch */ case    0:  		/* mr R4, R30 */
		/* 8215FE1Ch case    0:*/		regs.R4 = regs.R30;
		/* 8215FE1Ch case    0:*/		return 0x8215FE20;
		  /* 8215FE20h */ case    1:  		/* mr R3, R31 */
		/* 8215FE20h case    1:*/		regs.R3 = regs.R31;
		/* 8215FE20h case    1:*/		return 0x8215FE24;
		  /* 8215FE24h */ case    2:  		/* bl -796 */
		/* 8215FE24h case    2:*/		regs.LR = 0x8215FE28; return 0x8215FB08;
		/* 8215FE24h case    2:*/		return 0x8215FE28;
		  /* 8215FE28h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215FE28h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215FE28h case    3:*/		return 0x8215FE2C;
		  /* 8215FE2Ch */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8215FE2Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8215FE38;  }
		/* 8215FE2Ch case    4:*/		return 0x8215FE30;
		  /* 8215FE30h */ case    5:  		/* lwz R3, <#[R3 + 4]> */
		/* 8215FE30h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8215FE30h case    5:*/		return 0x8215FE34;
		  /* 8215FE34h */ case    6:  		/* b 8 */
		/* 8215FE34h case    6:*/		return 0x8215FE3C;
		/* 8215FE34h case    6:*/		return 0x8215FE38;
	}
	return 0x8215FE38;
} // Block from 8215FE1Ch-8215FE38h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE38);
		  /* 8215FE38h */ case    0:  		/* li R3, 0 */
		/* 8215FE38h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FE38h case    0:*/		return 0x8215FE3C;
	}
	return 0x8215FE3C;
} // Block from 8215FE38h-8215FE3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE3C);
		  /* 8215FE3Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8215FE3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215FE3Ch case    0:*/		return 0x8215FE40;
	}
	return 0x8215FE40;
} // Block from 8215FE3Ch-8215FE40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE40h
// Function '?SSMDeviceRelease@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE40);
		  /* 8215FE40h */ case    0:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215FE40h case    0:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FE40h case    0:*/		return 0x8215FE44;
		  /* 8215FE44h */ case    1:  		/* mtspr LR, R12 */
		/* 8215FE44h case    1:*/		regs.LR = regs.R12;
		/* 8215FE44h case    1:*/		return 0x8215FE48;
		  /* 8215FE48h */ case    2:  		/* ld R30, <#[R1 - 24]> */
		/* 8215FE48h case    2:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FE48h case    2:*/		return 0x8215FE4C;
		  /* 8215FE4Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8215FE4Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FE4Ch case    3:*/		return 0x8215FE50;
		  /* 8215FE50h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8215FE50h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215FE50h case    4:*/		return 0x8215FE54;
	}
	return 0x8215FE54;
} // Block from 8215FE40h-8215FE54h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE54);
		  /* 8215FE54h */ case    0:  		/* nop */
		/* 8215FE54h case    0:*/		cpu::op::nop();
		/* 8215FE54h case    0:*/		return 0x8215FE58;
	}
	return 0x8215FE58;
} // Block from 8215FE54h-8215FE58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FE58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FE58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FE58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FE58);
		  /* 8215FE58h */ case    0:  		/* mfspr R12, LR */
		/* 8215FE58h case    0:*/		regs.R12 = regs.LR;
		/* 8215FE58h case    0:*/		return 0x8215FE5C;
		  /* 8215FE5Ch */ case    1:  		/* bl -846856 */
		/* 8215FE5Ch case    1:*/		regs.LR = 0x8215FE60; return 0x82091254;
		/* 8215FE5Ch case    1:*/		return 0x8215FE60;
		  /* 8215FE60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8215FE60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8215FE60h case    2:*/		return 0x8215FE64;
		  /* 8215FE64h */ case    3:  		/* lis R11, -32253 */
		/* 8215FE64h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215FE64h case    3:*/		return 0x8215FE68;
		  /* 8215FE68h */ case    4:  		/* lis R10, -32252 */
		/* 8215FE68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FE68h case    4:*/		return 0x8215FE6C;
		  /* 8215FE6Ch */ case    5:  		/* mr R31, R3 */
		/* 8215FE6Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215FE6Ch case    5:*/		return 0x8215FE70;
		  /* 8215FE70h */ case    6:  		/* mr R28, R4 */
		/* 8215FE70h case    6:*/		regs.R28 = regs.R4;
		/* 8215FE70h case    6:*/		return 0x8215FE74;
		  /* 8215FE74h */ case    7:  		/* mr R27, R5 */
		/* 8215FE74h case    7:*/		regs.R27 = regs.R5;
		/* 8215FE74h case    7:*/		return 0x8215FE78;
		  /* 8215FE78h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215FE78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FE78h case    8:*/		return 0x8215FE7C;
		  /* 8215FE7Ch */ case    9:  		/* addi R30, R11, 27460 */
		/* 8215FE7Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8215FE7Ch case    9:*/		return 0x8215FE80;
		  /* 8215FE80h */ case   10:  		/* addi R29, R10, -18768 */
		/* 8215FE80h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFB6B0);
		/* 8215FE80h case   10:*/		return 0x8215FE84;
		  /* 8215FE84h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FE84h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8215FEA4;  }
		/* 8215FE84h case   11:*/		return 0x8215FE88;
		  /* 8215FE88h */ case   12:  		/* lis R11, -32252 */
		/* 8215FE88h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FE88h case   12:*/		return 0x8215FE8C;
		  /* 8215FE8Ch */ case   13:  		/* mr R6, R29 */
		/* 8215FE8Ch case   13:*/		regs.R6 = regs.R29;
		/* 8215FE8Ch case   13:*/		return 0x8215FE90;
		  /* 8215FE90h */ case   14:  		/* addi R5, R11, -18788 */
		/* 8215FE90h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8215FE90h case   14:*/		return 0x8215FE94;
		  /* 8215FE94h */ case   15:  		/* mr R4, R30 */
		/* 8215FE94h case   15:*/		regs.R4 = regs.R30;
		/* 8215FE94h case   15:*/		return 0x8215FE98;
		  /* 8215FE98h */ case   16:  		/* li R7, 747 */
		/* 8215FE98h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2EB);
		/* 8215FE98h case   16:*/		return 0x8215FE9C;
		  /* 8215FE9Ch */ case   17:  		/* li R3, 0 */
		/* 8215FE9Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FE9Ch case   17:*/		return 0x8215FEA0;
		  /* 8215FEA0h */ case   18:  		/* bl -33432 */
		/* 8215FEA0h case   18:*/		regs.LR = 0x8215FEA4; return 0x82157C08;
		/* 8215FEA0h case   18:*/		return 0x8215FEA4;
	}
	return 0x8215FEA4;
} // Block from 8215FE58h-8215FEA4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215FEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FEA4);
		  /* 8215FEA4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8215FEA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215FEA4h case    0:*/		return 0x8215FEA8;
		  /* 8215FEA8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FEA8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215FEC8;  }
		/* 8215FEA8h case    1:*/		return 0x8215FEAC;
		  /* 8215FEACh */ case    2:  		/* lis R11, -32252 */
		/* 8215FEACh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FEACh case    2:*/		return 0x8215FEB0;
		  /* 8215FEB0h */ case    3:  		/* mr R6, R29 */
		/* 8215FEB0h case    3:*/		regs.R6 = regs.R29;
		/* 8215FEB0h case    3:*/		return 0x8215FEB4;
		  /* 8215FEB4h */ case    4:  		/* addi R5, R11, -22036 */
		/* 8215FEB4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFA9EC);
		/* 8215FEB4h case    4:*/		return 0x8215FEB8;
		  /* 8215FEB8h */ case    5:  		/* mr R4, R30 */
		/* 8215FEB8h case    5:*/		regs.R4 = regs.R30;
		/* 8215FEB8h case    5:*/		return 0x8215FEBC;
		  /* 8215FEBCh */ case    6:  		/* li R7, 748 */
		/* 8215FEBCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2EC);
		/* 8215FEBCh case    6:*/		return 0x8215FEC0;
		  /* 8215FEC0h */ case    7:  		/* li R3, 0 */
		/* 8215FEC0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FEC0h case    7:*/		return 0x8215FEC4;
		  /* 8215FEC4h */ case    8:  		/* bl -33468 */
		/* 8215FEC4h case    8:*/		regs.LR = 0x8215FEC8; return 0x82157C08;
		/* 8215FEC4h case    8:*/		return 0x8215FEC8;
	}
	return 0x8215FEC8;
} // Block from 8215FEA4h-8215FEC8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215FEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FEC8);
		  /* 8215FEC8h */ case    0:  		/* mr R4, R28 */
		/* 8215FEC8h case    0:*/		regs.R4 = regs.R28;
		/* 8215FEC8h case    0:*/		return 0x8215FECC;
		  /* 8215FECCh */ case    1:  		/* mr R3, R31 */
		/* 8215FECCh case    1:*/		regs.R3 = regs.R31;
		/* 8215FECCh case    1:*/		return 0x8215FED0;
		  /* 8215FED0h */ case    2:  		/* bl -968 */
		/* 8215FED0h case    2:*/		regs.LR = 0x8215FED4; return 0x8215FB08;
		/* 8215FED0h case    2:*/		return 0x8215FED4;
		  /* 8215FED4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215FED4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215FED4h case    3:*/		return 0x8215FED8;
		  /* 8215FED8h */ case    4:  		/* bc 4, CR0_EQ, 36 */
		/* 8215FED8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8215FEFC;  }
		/* 8215FED8h case    4:*/		return 0x8215FEDC;
		  /* 8215FEDCh */ case    5:  		/* lis R11, -32252 */
		/* 8215FEDCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FEDCh case    5:*/		return 0x8215FEE0;
		  /* 8215FEE0h */ case    6:  		/* mr R6, R29 */
		/* 8215FEE0h case    6:*/		regs.R6 = regs.R29;
		/* 8215FEE0h case    6:*/		return 0x8215FEE4;
		  /* 8215FEE4h */ case    7:  		/* addi R5, R11, -18796 */
		/* 8215FEE4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB694);
		/* 8215FEE4h case    7:*/		return 0x8215FEE8;
		  /* 8215FEE8h */ case    8:  		/* mr R4, R30 */
		/* 8215FEE8h case    8:*/		regs.R4 = regs.R30;
		/* 8215FEE8h case    8:*/		return 0x8215FEEC;
		  /* 8215FEECh */ case    9:  		/* li R7, 756 */
		/* 8215FEECh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2F4);
		/* 8215FEECh case    9:*/		return 0x8215FEF0;
		  /* 8215FEF0h */ case   10:  		/* bl -33512 */
		/* 8215FEF0h case   10:*/		regs.LR = 0x8215FEF4; return 0x82157C08;
		/* 8215FEF0h case   10:*/		return 0x8215FEF4;
		  /* 8215FEF4h */ case   11:  		/* li R3, 19 */
		/* 8215FEF4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 8215FEF4h case   11:*/		return 0x8215FEF8;
		  /* 8215FEF8h */ case   12:  		/* b 56 */
		/* 8215FEF8h case   12:*/		return 0x8215FF30;
		/* 8215FEF8h case   12:*/		return 0x8215FEFC;
	}
	return 0x8215FEFC;
} // Block from 8215FEC8h-8215FEFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215FEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FEFC);
		  /* 8215FEFCh */ case    0:  		/* mr R4, R27 */
		/* 8215FEFCh case    0:*/		regs.R4 = regs.R27;
		/* 8215FEFCh case    0:*/		return 0x8215FF00;
		  /* 8215FF00h */ case    1:  		/* lwz R3, <#[R3 + 12]> */
		/* 8215FF00h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8215FF00h case    1:*/		return 0x8215FF04;
		  /* 8215FF04h */ case    2:  		/* bl -13652 */
		/* 8215FF04h case    2:*/		regs.LR = 0x8215FF08; return 0x8215C9B0;
		/* 8215FF04h case    2:*/		return 0x8215FF08;
		  /* 8215FF08h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215FF08h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215FF08h case    3:*/		return 0x8215FF0C;
		  /* 8215FF0Ch */ case    4:  		/* li R3, 0 */
		/* 8215FF0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FF0Ch case    4:*/		return 0x8215FF10;
		  /* 8215FF10h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8215FF10h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8215FF30;  }
		/* 8215FF10h case    5:*/		return 0x8215FF14;
		  /* 8215FF14h */ case    6:  		/* lis R11, -32252 */
		/* 8215FF14h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FF14h case    6:*/		return 0x8215FF18;
		  /* 8215FF18h */ case    7:  		/* mr R6, R29 */
		/* 8215FF18h case    7:*/		regs.R6 = regs.R29;
		/* 8215FF18h case    7:*/		return 0x8215FF1C;
		  /* 8215FF1Ch */ case    8:  		/* addi R5, R11, -18644 */
		/* 8215FF1Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB72C);
		/* 8215FF1Ch case    8:*/		return 0x8215FF20;
		  /* 8215FF20h */ case    9:  		/* mr R4, R30 */
		/* 8215FF20h case    9:*/		regs.R4 = regs.R30;
		/* 8215FF20h case    9:*/		return 0x8215FF24;
		  /* 8215FF24h */ case   10:  		/* li R7, 766 */
		/* 8215FF24h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x2FE);
		/* 8215FF24h case   10:*/		return 0x8215FF28;
		  /* 8215FF28h */ case   11:  		/* bl -33568 */
		/* 8215FF28h case   11:*/		regs.LR = 0x8215FF2C; return 0x82157C08;
		/* 8215FF28h case   11:*/		return 0x8215FF2C;
		  /* 8215FF2Ch */ case   12:  		/* li R3, 16 */
		/* 8215FF2Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 8215FF2Ch case   12:*/		return 0x8215FF30;
	}
	return 0x8215FF30;
} // Block from 8215FEFCh-8215FF30h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215FF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FF30);
		  /* 8215FF30h */ case    0:  		/* addi R1, R1, 128 */
		/* 8215FF30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215FF30h case    0:*/		return 0x8215FF34;
		  /* 8215FF34h */ case    1:  		/* b -846992 */
		/* 8215FF34h case    1:*/		return 0x820912A4;
		/* 8215FF34h case    1:*/		return 0x8215FF38;
	}
	return 0x8215FF38;
} // Block from 8215FF30h-8215FF38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215FF38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FF38);
		  /* 8215FF38h */ case    0:  		/* mfspr R12, LR */
		/* 8215FF38h case    0:*/		regs.R12 = regs.LR;
		/* 8215FF38h case    0:*/		return 0x8215FF3C;
		  /* 8215FF3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215FF3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FF3Ch case    1:*/		return 0x8215FF40;
		  /* 8215FF40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8215FF40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FF40h case    2:*/		return 0x8215FF44;
		  /* 8215FF44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215FF44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FF44h case    3:*/		return 0x8215FF48;
		  /* 8215FF48h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215FF48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215FF48h case    4:*/		return 0x8215FF4C;
		  /* 8215FF4Ch */ case    5:  		/* mr R31, R3 */
		/* 8215FF4Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215FF4Ch case    5:*/		return 0x8215FF50;
		  /* 8215FF50h */ case    6:  		/* mr R30, R4 */
		/* 8215FF50h case    6:*/		regs.R30 = regs.R4;
		/* 8215FF50h case    6:*/		return 0x8215FF54;
		  /* 8215FF54h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215FF54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FF54h case    7:*/		return 0x8215FF58;
		  /* 8215FF58h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 8215FF58h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215FF7C;  }
		/* 8215FF58h case    8:*/		return 0x8215FF5C;
		  /* 8215FF5Ch */ case    9:  		/* lis R11, -32252 */
		/* 8215FF5Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FF5Ch case    9:*/		return 0x8215FF60;
		  /* 8215FF60h */ case   10:  		/* lis R10, -32252 */
		/* 8215FF60h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FF60h case   10:*/		return 0x8215FF64;
		  /* 8215FF64h */ case   11:  		/* lis R9, -32253 */
		/* 8215FF64h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215FF64h case   11:*/		return 0x8215FF68;
		  /* 8215FF68h */ case   12:  		/* addi R6, R11, -18768 */
		/* 8215FF68h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB6B0);
		/* 8215FF68h case   12:*/		return 0x8215FF6C;
		  /* 8215FF6Ch */ case   13:  		/* addi R5, R10, -18788 */
		/* 8215FF6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB69C);
		/* 8215FF6Ch case   13:*/		return 0x8215FF70;
		  /* 8215FF70h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8215FF70h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8215FF70h case   14:*/		return 0x8215FF74;
		  /* 8215FF74h */ case   15:  		/* li R7, 798 */
		/* 8215FF74h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x31E);
		/* 8215FF74h case   15:*/		return 0x8215FF78;
		  /* 8215FF78h */ case   16:  		/* bl -33648 */
		/* 8215FF78h case   16:*/		regs.LR = 0x8215FF7C; return 0x82157C08;
		/* 8215FF78h case   16:*/		return 0x8215FF7C;
	}
	return 0x8215FF7C;
} // Block from 8215FF38h-8215FF7Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8215FF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FF7C);
		  /* 8215FF7Ch */ case    0:  		/* mr R4, R30 */
		/* 8215FF7Ch case    0:*/		regs.R4 = regs.R30;
		/* 8215FF7Ch case    0:*/		return 0x8215FF80;
		  /* 8215FF80h */ case    1:  		/* mr R3, R31 */
		/* 8215FF80h case    1:*/		regs.R3 = regs.R31;
		/* 8215FF80h case    1:*/		return 0x8215FF84;
		  /* 8215FF84h */ case    2:  		/* bl -1148 */
		/* 8215FF84h case    2:*/		regs.LR = 0x8215FF88; return 0x8215FB08;
		/* 8215FF84h case    2:*/		return 0x8215FF88;
		  /* 8215FF88h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215FF88h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215FF88h case    3:*/		return 0x8215FF8C;
		  /* 8215FF8Ch */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8215FF8Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8215FF98;  }
		/* 8215FF8Ch case    4:*/		return 0x8215FF90;
		  /* 8215FF90h */ case    5:  		/* lwz R3, <#[R3 + 12]> */
		/* 8215FF90h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8215FF90h case    5:*/		return 0x8215FF94;
		  /* 8215FF94h */ case    6:  		/* b 8 */
		/* 8215FF94h case    6:*/		return 0x8215FF9C;
		/* 8215FF94h case    6:*/		return 0x8215FF98;
	}
	return 0x8215FF98;
} // Block from 8215FF7Ch-8215FF98h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215FF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FF98);
		  /* 8215FF98h */ case    0:  		/* li R3, 0 */
		/* 8215FF98h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FF98h case    0:*/		return 0x8215FF9C;
	}
	return 0x8215FF9C;
} // Block from 8215FF98h-8215FF9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FF9C);
		  /* 8215FF9Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8215FF9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8215FF9Ch case    0:*/		return 0x8215FFA0;
		  /* 8215FFA0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215FFA0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215FFA0h case    1:*/		return 0x8215FFA4;
		  /* 8215FFA4h */ case    2:  		/* mtspr LR, R12 */
		/* 8215FFA4h case    2:*/		regs.LR = regs.R12;
		/* 8215FFA4h case    2:*/		return 0x8215FFA8;
		  /* 8215FFA8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8215FFA8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215FFA8h case    3:*/		return 0x8215FFAC;
		  /* 8215FFACh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215FFACh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215FFACh case    4:*/		return 0x8215FFB0;
		  /* 8215FFB0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215FFB0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215FFB0h case    5:*/		return 0x8215FFB4;
	}
	return 0x8215FFB4;
} // Block from 8215FF9Ch-8215FFB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215FFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FFB4);
		  /* 8215FFB4h */ case    0:  		/* nop */
		/* 8215FFB4h case    0:*/		cpu::op::nop();
		/* 8215FFB4h case    0:*/		return 0x8215FFB8;
	}
	return 0x8215FFB8;
} // Block from 8215FFB4h-8215FFB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215FFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215FFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215FFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215FFB8);
		  /* 8215FFB8h */ case    0:  		/* mfspr R12, LR */
		/* 8215FFB8h case    0:*/		regs.R12 = regs.LR;
		/* 8215FFB8h case    0:*/		return 0x8215FFBC;
		  /* 8215FFBCh */ case    1:  		/* bl -847212 */
		/* 8215FFBCh case    1:*/		regs.LR = 0x8215FFC0; return 0x82091250;
		/* 8215FFBCh case    1:*/		return 0x8215FFC0;
		  /* 8215FFC0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8215FFC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8215FFC0h case    2:*/		return 0x8215FFC4;
		  /* 8215FFC4h */ case    3:  		/* lis R11, -32253 */
		/* 8215FFC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215FFC4h case    3:*/		return 0x8215FFC8;
		  /* 8215FFC8h */ case    4:  		/* lis R10, -32252 */
		/* 8215FFC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8215FFC8h case    4:*/		return 0x8215FFCC;
		  /* 8215FFCCh */ case    5:  		/* mr R31, R3 */
		/* 8215FFCCh case    5:*/		regs.R31 = regs.R3;
		/* 8215FFCCh case    5:*/		return 0x8215FFD0;
		  /* 8215FFD0h */ case    6:  		/* mr R26, R4 */
		/* 8215FFD0h case    6:*/		regs.R26 = regs.R4;
		/* 8215FFD0h case    6:*/		return 0x8215FFD4;
		  /* 8215FFD4h */ case    7:  		/* mr R29, R5 */
		/* 8215FFD4h case    7:*/		regs.R29 = regs.R5;
		/* 8215FFD4h case    7:*/		return 0x8215FFD8;
		  /* 8215FFD8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8215FFD8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215FFD8h case    8:*/		return 0x8215FFDC;
		  /* 8215FFDCh */ case    9:  		/* addi R28, R11, 27460 */
		/* 8215FFDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8215FFDCh case    9:*/		return 0x8215FFE0;
		  /* 8215FFE0h */ case   10:  		/* addi R27, R10, -18768 */
		/* 8215FFE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFB6B0);
		/* 8215FFE0h case   10:*/		return 0x8215FFE4;
		  /* 8215FFE4h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8215FFE4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82160004;  }
		/* 8215FFE4h case   11:*/		return 0x8215FFE8;
		  /* 8215FFE8h */ case   12:  		/* lis R11, -32252 */
		/* 8215FFE8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8215FFE8h case   12:*/		return 0x8215FFEC;
		  /* 8215FFECh */ case   13:  		/* mr R6, R27 */
		/* 8215FFECh case   13:*/		regs.R6 = regs.R27;
		/* 8215FFECh case   13:*/		return 0x8215FFF0;
		  /* 8215FFF0h */ case   14:  		/* addi R5, R11, -18788 */
		/* 8215FFF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 8215FFF0h case   14:*/		return 0x8215FFF4;
		  /* 8215FFF4h */ case   15:  		/* mr R4, R28 */
		/* 8215FFF4h case   15:*/		regs.R4 = regs.R28;
		/* 8215FFF4h case   15:*/		return 0x8215FFF8;
		  /* 8215FFF8h */ case   16:  		/* li R7, 113 */
		/* 8215FFF8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x71);
		/* 8215FFF8h case   16:*/		return 0x8215FFFC;
		  /* 8215FFFCh */ case   17:  		/* li R3, 0 */
		/* 8215FFFCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215FFFCh case   17:*/		return 0x82160000;
		  /* 82160000h */ case   18:  		/* bl -33784 */
		/* 82160000h case   18:*/		regs.LR = 0x82160004; return 0x82157C08;
		/* 82160000h case   18:*/		return 0x82160004;
	}
	return 0x82160004;
} // Block from 8215FFB8h-82160004h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82160004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160004);
		  /* 82160004h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 82160004h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82160004h case    0:*/		return 0x82160008;
		  /* 82160008h */ case    1:  		/* bl 702696 */
		/* 82160008h case    1:*/		regs.LR = 0x8216000C; return 0x8220B8F0;
		/* 82160008h case    1:*/		return 0x8216000C;
		  /* 8216000Ch */ case    2:  		/* or. R30, R3, R3 */
		/* 8216000Ch case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8216000Ch case    2:*/		return 0x82160010;
		  /* 82160010h */ case    3:  		/* bc 4, CR0_EQ, 40 */
		/* 82160010h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82160038;  }
		/* 82160010h case    3:*/		return 0x82160014;
		  /* 82160014h */ case    4:  		/* lis R11, -32252 */
		/* 82160014h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160014h case    4:*/		return 0x82160018;
		  /* 82160018h */ case    5:  		/* mr R6, R27 */
		/* 82160018h case    5:*/		regs.R6 = regs.R27;
		/* 82160018h case    5:*/		return 0x8216001C;
		  /* 8216001Ch */ case    6:  		/* addi R5, R11, -18588 */
		/* 8216001Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB764);
		/* 8216001Ch case    6:*/		return 0x82160020;
	}
	return 0x82160020;
} // Block from 82160004h-82160020h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82160020h
// Function '?GetDevice@XGRAPHICS@@YAPAXPAU_SSM_OBJINFO@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160020);
		  /* 82160020h */ case    0:  		/* mr R4, R28 */
		/* 82160020h case    0:*/		regs.R4 = regs.R28;
		/* 82160020h case    0:*/		return 0x82160024;
		  /* 82160024h */ case    1:  		/* li R7, 121 */
		/* 82160024h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x79);
		/* 82160024h case    1:*/		return 0x82160028;
	}
	return 0x82160028;
} // Block from 82160020h-82160028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82160028h
// Function '?SSMObjCreate@XGRAPHICS@@YIPAXPAXPAU_SSM_SSMOBJECT2CLIENT_INTERFACE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160028);
		  /* 82160028h */ case    0:  		/* li R3, 0 */
		/* 82160028h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160028h case    0:*/		return 0x8216002C;
		  /* 8216002Ch */ case    1:  		/* bl -33828 */
		/* 8216002Ch case    1:*/		regs.LR = 0x82160030; return 0x82157C08;
		/* 8216002Ch case    1:*/		return 0x82160030;
		  /* 82160030h */ case    2:  		/* li R3, 0 */
		/* 82160030h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160030h case    2:*/		return 0x82160034;
		  /* 82160034h */ case    3:  		/* b 180 */
		/* 82160034h case    3:*/		return 0x821600E8;
		/* 82160034h case    3:*/		return 0x82160038;
	}
	return 0x82160038;
} // Block from 82160028h-82160038h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82160038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160038);
		  /* 82160038h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 82160038h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82160038h case    0:*/		return 0x8216003C;
		  /* 8216003Ch */ case    1:  		/* li R10, 1 */
		/* 8216003Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8216003Ch case    1:*/		return 0x82160040;
		  /* 82160040h */ case    2:  		/* rlwinm R9, R29, 30, 2, 31 */
		/* 82160040h case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R29);
		/* 82160040h case    2:*/		return 0x82160044;
		  /* 82160044h */ case    3:  		/* mr R4, R29 */
		/* 82160044h case    3:*/		regs.R4 = regs.R29;
		/* 82160044h case    3:*/		return 0x82160048;
		  /* 82160048h */ case    4:  		/* stw R11, <#[R30]> */
		/* 82160048h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82160048h case    4:*/		return 0x8216004C;
		  /* 8216004Ch */ case    5:  		/* lwz R11, <#[R31 + 16]> */
		/* 8216004Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8216004Ch case    5:*/		return 0x82160050;
		  /* 82160050h */ case    6:  		/* addi R11, R11, 1 */
		/* 82160050h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82160050h case    6:*/		return 0x82160054;
		  /* 82160054h */ case    7:  		/* stw R11, <#[R31 + 16]> */
		/* 82160054h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82160054h case    7:*/		return 0x82160058;
		  /* 82160058h */ case    8:  		/* stw R10, <#[R30 + 16]> */
		/* 82160058h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82160058h case    8:*/		return 0x8216005C;
		  /* 8216005Ch */ case    9:  		/* stw R9, <#[R30 + 8]> */
		/* 8216005Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 8216005Ch case    9:*/		return 0x82160060;
		  /* 82160060h */ case   10:  		/* lwz R3, <#[R31 + 4]> */
		/* 82160060h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82160060h case   10:*/		return 0x82160064;
		  /* 82160064h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 82160064h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82160064h case   11:*/		return 0x82160068;
		  /* 82160068h */ case   12:  		/* mtspr CTR, R11 */
		/* 82160068h case   12:*/		regs.CTR = regs.R11;
		/* 82160068h case   12:*/		return 0x8216006C;
		  /* 8216006Ch */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 8216006Ch case   13:*/		if ( 1 ) { regs.LR = 0x82160070; return (uint32)regs.CTR; }
		/* 8216006Ch case   13:*/		return 0x82160070;
		  /* 82160070h */ case   14:  		/* stw R3, <#[R30 + 4]> */
		/* 82160070h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 82160070h case   14:*/		return 0x82160074;
		  /* 82160074h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 82160074h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82160074h case   15:*/		return 0x82160078;
		  /* 82160078h */ case   16:  		/* bc 4, CR0_EQ, 48 */
		/* 82160078h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821600A8;  }
		/* 82160078h case   16:*/		return 0x8216007C;
		  /* 8216007Ch */ case   17:  		/* lis R11, -32252 */
		/* 8216007Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8216007Ch case   17:*/		return 0x82160080;
		  /* 82160080h */ case   18:  		/* li R7, 138 */
		/* 82160080h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x8A);
		/* 82160080h case   18:*/		return 0x82160084;
		  /* 82160084h */ case   19:  		/* addi R5, R11, -18608 */
		/* 82160084h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB750);
		/* 82160084h case   19:*/		return 0x82160088;
		  /* 82160088h */ case   20:  		/* mr R4, R28 */
		/* 82160088h case   20:*/		regs.R4 = regs.R28;
		/* 82160088h case   20:*/		return 0x8216008C;
		  /* 8216008Ch */ case   21:  		/* mr R6, R27 */
		/* 8216008Ch case   21:*/		regs.R6 = regs.R27;
		/* 8216008Ch case   21:*/		return 0x82160090;
		  /* 82160090h */ case   22:  		/* li R3, 0 */
		/* 82160090h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160090h case   22:*/		return 0x82160094;
		  /* 82160094h */ case   23:  		/* bl -33932 */
		/* 82160094h case   23:*/		regs.LR = 0x82160098; return 0x82157C08;
		/* 82160094h case   23:*/		return 0x82160098;
		  /* 82160098h */ case   24:  		/* mr R4, R30 */
		/* 82160098h case   24:*/		regs.R4 = regs.R30;
		/* 82160098h case   24:*/		return 0x8216009C;
		  /* 8216009Ch */ case   25:  		/* mr R3, R31 */
		/* 8216009Ch case   25:*/		regs.R3 = regs.R31;
		/* 8216009Ch case   25:*/		return 0x821600A0;
		  /* 821600A0h */ case   26:  		/* bl -1704 */
		/* 821600A0h case   26:*/		regs.LR = 0x821600A4; return 0x8215F9F8;
		/* 821600A0h case   26:*/		return 0x821600A4;
		  /* 821600A4h */ case   27:  		/* b -116 */
		/* 821600A4h case   27:*/		return 0x82160030;
		/* 821600A4h case   27:*/		return 0x821600A8;
	}
	return 0x821600A8;
} // Block from 82160038h-821600A8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821600A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821600A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821600A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821600A8);
		  /* 821600A8h */ case    0:  		/* mr R5, R29 */
		/* 821600A8h case    0:*/		regs.R5 = regs.R29;
		/* 821600A8h case    0:*/		return 0x821600AC;
		  /* 821600ACh */ case    1:  		/* mr R4, R26 */
		/* 821600ACh case    1:*/		regs.R4 = regs.R26;
		/* 821600ACh case    1:*/		return 0x821600B0;
		  /* 821600B0h */ case    2:  		/* bl -845568 */
		/* 821600B0h case    2:*/		regs.LR = 0x821600B4; return 0x820919B0;
		/* 821600B0h case    2:*/		return 0x821600B4;
		  /* 821600B4h */ case    3:  		/* li R6, 3 */
		/* 821600B4h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821600B4h case    3:*/		return 0x821600B8;
		  /* 821600B8h */ case    4:  		/* lwz R5, <#[R31 + 12]> */
		/* 821600B8h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 821600B8h case    4:*/		return 0x821600BC;
		  /* 821600BCh */ case    5:  		/* lwz R4, <#[R31 + 8]> */
		/* 821600BCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821600BCh case    5:*/		return 0x821600C0;
		  /* 821600C0h */ case    6:  		/* lwz R3, <#[R31 + 4]> */
		/* 821600C0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821600C0h case    6:*/		return 0x821600C4;
		  /* 821600C4h */ case    7:  		/* bl -12692 */
		/* 821600C4h case    7:*/		regs.LR = 0x821600C8; return 0x8215CF30;
		/* 821600C4h case    7:*/		return 0x821600C8;
		  /* 821600C8h */ case    8:  		/* stw R3, <#[R30 + 12]> */
		/* 821600C8h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 821600C8h case    8:*/		return 0x821600CC;
		  /* 821600CCh */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 821600CCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821600CCh case    9:*/		return 0x821600D0;
		  /* 821600D0h */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 821600D0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821600E4;  }
		/* 821600D0h case   10:*/		return 0x821600D4;
		  /* 821600D4h */ case   11:  		/* lis R11, -32252 */
		/* 821600D4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821600D4h case   11:*/		return 0x821600D8;
		  /* 821600D8h */ case   12:  		/* li R7, 155 */
		/* 821600D8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x9B);
		/* 821600D8h case   12:*/		return 0x821600DC;
		  /* 821600DCh */ case   13:  		/* addi R5, R11, -18628 */
		/* 821600DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB73C);
		/* 821600DCh case   13:*/		return 0x821600E0;
		  /* 821600E0h */ case   14:  		/* b -88 */
		/* 821600E0h case   14:*/		return 0x82160088;
		/* 821600E0h case   14:*/		return 0x821600E4;
	}
	return 0x821600E4;
} // Block from 821600A8h-821600E4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821600E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821600E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821600E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821600E4);
		  /* 821600E4h */ case    0:  		/* mr R3, R30 */
		/* 821600E4h case    0:*/		regs.R3 = regs.R30;
		/* 821600E4h case    0:*/		return 0x821600E8;
	}
	return 0x821600E8;
} // Block from 821600E4h-821600E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821600E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821600E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821600E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821600E8);
		  /* 821600E8h */ case    0:  		/* addi R1, R1, 144 */
		/* 821600E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821600E8h case    0:*/		return 0x821600EC;
		  /* 821600ECh */ case    1:  		/* b -847436 */
		/* 821600ECh case    1:*/		return 0x820912A0;
		/* 821600ECh case    1:*/		return 0x821600F0;
	}
	return 0x821600F0;
} // Block from 821600E8h-821600F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821600F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821600F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821600F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821600F0);
		  /* 821600F0h */ case    0:  		/* mfspr R12, LR */
		/* 821600F0h case    0:*/		regs.R12 = regs.LR;
		/* 821600F0h case    0:*/		return 0x821600F4;
		  /* 821600F4h */ case    1:  		/* bl -847532 */
		/* 821600F4h case    1:*/		regs.LR = 0x821600F8; return 0x82091248;
		/* 821600F4h case    1:*/		return 0x821600F8;
		  /* 821600F8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821600F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821600F8h case    2:*/		return 0x821600FC;
		  /* 821600FCh */ case    3:  		/* lis R11, -32253 */
		/* 821600FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821600FCh case    3:*/		return 0x82160100;
		  /* 82160100h */ case    4:  		/* lis R10, -32252 */
		/* 82160100h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82160100h case    4:*/		return 0x82160104;
		  /* 82160104h */ case    5:  		/* mr R29, R3 */
		/* 82160104h case    5:*/		regs.R29 = regs.R3;
		/* 82160104h case    5:*/		return 0x82160108;
		  /* 82160108h */ case    6:  		/* mr R30, R4 */
		/* 82160108h case    6:*/		regs.R30 = regs.R4;
		/* 82160108h case    6:*/		return 0x8216010C;
		  /* 8216010Ch */ case    7:  		/* mr R28, R5 */
		/* 8216010Ch case    7:*/		regs.R28 = regs.R5;
		/* 8216010Ch case    7:*/		return 0x82160110;
		  /* 82160110h */ case    8:  		/* mr R25, R6 */
		/* 82160110h case    8:*/		regs.R25 = regs.R6;
		/* 82160110h case    8:*/		return 0x82160114;
		  /* 82160114h */ case    9:  		/* mr R24, R7 */
		/* 82160114h case    9:*/		regs.R24 = regs.R7;
		/* 82160114h case    9:*/		return 0x82160118;
		  /* 82160118h */ case   10:  		/* cmplwi CR6, R4, 0 */
		/* 82160118h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82160118h case   10:*/		return 0x8216011C;
		  /* 8216011Ch */ case   11:  		/* addi R27, R11, 27460 */
		/* 8216011Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8216011Ch case   11:*/		return 0x82160120;
		  /* 82160120h */ case   12:  		/* addi R26, R10, -18768 */
		/* 82160120h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB6B0);
		/* 82160120h case   12:*/		return 0x82160124;
		  /* 82160124h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 82160124h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82160144;  }
		/* 82160124h case   13:*/		return 0x82160128;
		  /* 82160128h */ case   14:  		/* lis R11, -32252 */
		/* 82160128h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160128h case   14:*/		return 0x8216012C;
		  /* 8216012Ch */ case   15:  		/* mr R6, R26 */
		/* 8216012Ch case   15:*/		regs.R6 = regs.R26;
		/* 8216012Ch case   15:*/		return 0x82160130;
		  /* 82160130h */ case   16:  		/* addi R5, R11, -21620 */
		/* 82160130h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 82160130h case   16:*/		return 0x82160134;
		  /* 82160134h */ case   17:  		/* mr R4, R27 */
		/* 82160134h case   17:*/		regs.R4 = regs.R27;
		/* 82160134h case   17:*/		return 0x82160138;
		  /* 82160138h */ case   18:  		/* li R7, 298 */
		/* 82160138h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x12A);
		/* 82160138h case   18:*/		return 0x8216013C;
		  /* 8216013Ch */ case   19:  		/* li R3, 0 */
		/* 8216013Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8216013Ch case   19:*/		return 0x82160140;
		  /* 82160140h */ case   20:  		/* bl -34104 */
		/* 82160140h case   20:*/		regs.LR = 0x82160144; return 0x82157C08;
		/* 82160140h case   20:*/		return 0x82160144;
	}
	return 0x82160144;
} // Block from 821600F0h-82160144h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82160144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160144);
		  /* 82160144h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82160144h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82160144h case    0:*/		return 0x82160148;
		  /* 82160148h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82160148h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82160168;  }
		/* 82160148h case    1:*/		return 0x8216014C;
		  /* 8216014Ch */ case    2:  		/* lis R11, -32252 */
		/* 8216014Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8216014Ch case    2:*/		return 0x82160150;
		  /* 82160150h */ case    3:  		/* mr R6, R26 */
		/* 82160150h case    3:*/		regs.R6 = regs.R26;
		/* 82160150h case    3:*/		return 0x82160154;
		  /* 82160154h */ case    4:  		/* addi R5, R11, -21632 */
		/* 82160154h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 82160154h case    4:*/		return 0x82160158;
		  /* 82160158h */ case    5:  		/* mr R4, R27 */
		/* 82160158h case    5:*/		regs.R4 = regs.R27;
		/* 82160158h case    5:*/		return 0x8216015C;
		  /* 8216015Ch */ case    6:  		/* li R7, 299 */
		/* 8216015Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x12B);
		/* 8216015Ch case    6:*/		return 0x82160160;
		  /* 82160160h */ case    7:  		/* li R3, 0 */
		/* 82160160h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160160h case    7:*/		return 0x82160164;
		  /* 82160164h */ case    8:  		/* bl -34140 */
		/* 82160164h case    8:*/		regs.LR = 0x82160168; return 0x82157C08;
		/* 82160164h case    8:*/		return 0x82160168;
	}
	return 0x82160168;
} // Block from 82160144h-82160168h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82160168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160168);
		  /* 82160168h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82160168h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82160168h case    0:*/		return 0x8216016C;
		  /* 8216016Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8216016Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8216018C;  }
		/* 8216016Ch case    1:*/		return 0x82160170;
		  /* 82160170h */ case    2:  		/* lis R11, -32252 */
		/* 82160170h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160170h case    2:*/		return 0x82160174;
		  /* 82160174h */ case    3:  		/* mr R6, R26 */
		/* 82160174h case    3:*/		regs.R6 = regs.R26;
		/* 82160174h case    3:*/		return 0x82160178;
		  /* 82160178h */ case    4:  		/* addi R5, R11, -21120 */
		/* 82160178h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD80);
		/* 82160178h case    4:*/		return 0x8216017C;
		  /* 8216017Ch */ case    5:  		/* mr R4, R27 */
		/* 8216017Ch case    5:*/		regs.R4 = regs.R27;
		/* 8216017Ch case    5:*/		return 0x82160180;
		  /* 82160180h */ case    6:  		/* li R7, 300 */
		/* 82160180h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x12C);
		/* 82160180h case    6:*/		return 0x82160184;
		  /* 82160184h */ case    7:  		/* li R3, 0 */
		/* 82160184h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160184h case    7:*/		return 0x82160188;
		  /* 82160188h */ case    8:  		/* bl -34176 */
		/* 82160188h case    8:*/		regs.LR = 0x8216018C; return 0x82157C08;
		/* 82160188h case    8:*/		return 0x8216018C;
	}
	return 0x8216018C;
} // Block from 82160168h-8216018Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8216018Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8216018C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8216018C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8216018C);
		  /* 8216018Ch */ case    0:  		/* li R4, 28 */
		/* 8216018Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8216018Ch case    0:*/		return 0x82160190;
		  /* 82160190h */ case    1:  		/* mtspr CTR, R30 */
		/* 82160190h case    1:*/		regs.CTR = regs.R30;
		/* 82160190h case    1:*/		return 0x82160194;
		  /* 82160194h */ case    2:  		/* mr R3, R29 */
		/* 82160194h case    2:*/		regs.R3 = regs.R29;
		/* 82160194h case    2:*/		return 0x82160198;
		  /* 82160198h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82160198h case    3:*/		if ( 1 ) { regs.LR = 0x8216019C; return (uint32)regs.CTR; }
		/* 82160198h case    3:*/		return 0x8216019C;
		  /* 8216019Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 8216019Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8216019Ch case    4:*/		return 0x821601A0;
		  /* 821601A0h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821601A0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821601C8;  }
		/* 821601A0h case    5:*/		return 0x821601A4;
		  /* 821601A4h */ case    6:  		/* lis R11, -32252 */
		/* 821601A4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821601A4h case    6:*/		return 0x821601A8;
		  /* 821601A8h */ case    7:  		/* mr R6, R26 */
		/* 821601A8h case    7:*/		regs.R6 = regs.R26;
		/* 821601A8h case    7:*/		return 0x821601AC;
		  /* 821601ACh */ case    8:  		/* addi R5, R11, -18512 */
		/* 821601ACh case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB7B0);
		/* 821601ACh case    8:*/		return 0x821601B0;
		  /* 821601B0h */ case    9:  		/* mr R4, R27 */
		/* 821601B0h case    9:*/		regs.R4 = regs.R27;
		/* 821601B0h case    9:*/		return 0x821601B4;
		  /* 821601B4h */ case   10:  		/* li R7, 308 */
		/* 821601B4h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x134);
		/* 821601B4h case   10:*/		return 0x821601B8;
		  /* 821601B8h */ case   11:  		/* li R3, 0 */
		/* 821601B8h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821601B8h case   11:*/		return 0x821601BC;
		  /* 821601BCh */ case   12:  		/* bl -34228 */
		/* 821601BCh case   12:*/		regs.LR = 0x821601C0; return 0x82157C08;
		/* 821601BCh case   12:*/		return 0x821601C0;
		  /* 821601C0h */ case   13:  		/* li R3, 0 */
		/* 821601C0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821601C0h case   13:*/		return 0x821601C4;
		  /* 821601C4h */ case   14:  		/* b 208 */
		/* 821601C4h case   14:*/		return 0x82160294;
		/* 821601C4h case   14:*/		return 0x821601C8;
	}
	return 0x821601C8;
} // Block from 8216018Ch-821601C8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821601C8h
// Function '?RegisterASObj@XGRAPHICS@@YAXPAU_SSM_OBJINFO@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821601C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821601C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821601C8);
		  /* 821601C8h */ case    0:  		/* stw R29, <#[R31 + 4]> */
		/* 821601C8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821601C8h case    0:*/		return 0x821601CC;
		  /* 821601CCh */ case    1:  		/* mr R7, R29 */
		/* 821601CCh case    1:*/		regs.R7 = regs.R29;
		/* 821601CCh case    1:*/		return 0x821601D0;
		  /* 821601D0h */ case    2:  		/* stw R30, <#[R31 + 8]> */
		/* 821601D0h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821601D0h case    2:*/		return 0x821601D4;
		  /* 821601D4h */ case    3:  		/* mr R6, R28 */
		/* 821601D4h case    3:*/		regs.R6 = regs.R28;
		/* 821601D4h case    3:*/		return 0x821601D8;
		  /* 821601D8h */ case    4:  		/* stw R28, <#[R31 + 12]> */
		/* 821601D8h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 821601D8h case    4:*/		return 0x821601DC;
		  /* 821601DCh */ case    5:  		/* mr R5, R30 */
		/* 821601DCh case    5:*/		regs.R5 = regs.R30;
		/* 821601DCh case    5:*/		return 0x821601E0;
		  /* 821601E0h */ case    6:  		/* li R4, 20 */
		/* 821601E0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821601E0h case    6:*/		return 0x821601E4;
		  /* 821601E4h */ case    7:  		/* mr R3, R24 */
		/* 821601E4h case    7:*/		regs.R3 = regs.R24;
		/* 821601E4h case    7:*/		return 0x821601E8;
	}
	return 0x821601E8;
} // Block from 821601C8h-821601E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821601E8h
// Function '?UnRegisterASObj@XGRAPHICS@@YAXPAU_SSM_OBJINFO@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821601E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821601E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821601E8);
		  /* 821601E8h */ case    0:  		/* bl 701928 */
		/* 821601E8h case    0:*/		regs.LR = 0x821601EC; return 0x8220B7D0;
		/* 821601E8h case    0:*/		return 0x821601EC;
		  /* 821601ECh */ case    1:  		/* stw R3, <#[R31]> */
		/* 821601ECh case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821601ECh case    1:*/		return 0x821601F0;
		  /* 821601F0h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821601F0h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821601F0h case    2:*/		return 0x821601F4;
		  /* 821601F4h */ case    3:  		/* bc 4, CR0_EQ, 44 */
		/* 821601F4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82160220;  }
		/* 821601F4h case    3:*/		return 0x821601F8;
		  /* 821601F8h */ case    4:  		/* lis R11, -32252 */
		/* 821601F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821601F8h case    4:*/		return 0x821601FC;
		  /* 821601FCh */ case    5:  		/* li R7, 326 */
		/* 821601FCh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x146);
		/* 821601FCh case    5:*/		return 0x82160200;
		  /* 82160200h */ case    6:  		/* addi R5, R11, -18540 */
		/* 82160200h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB794);
		/* 82160200h case    6:*/		return 0x82160204;
		  /* 82160204h */ case    7:  		/* mr R6, R26 */
		/* 82160204h case    7:*/		regs.R6 = regs.R26;
		/* 82160204h case    7:*/		return 0x82160208;
		  /* 82160208h */ case    8:  		/* mr R4, R27 */
		/* 82160208h case    8:*/		regs.R4 = regs.R27;
		/* 82160208h case    8:*/		return 0x8216020C;
		  /* 8216020Ch */ case    9:  		/* li R3, 0 */
		/* 8216020Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8216020Ch case    9:*/		return 0x82160210;
		  /* 82160210h */ case   10:  		/* bl -34312 */
		/* 82160210h case   10:*/		regs.LR = 0x82160214; return 0x82157C08;
		/* 82160210h case   10:*/		return 0x82160214;
		  /* 82160214h */ case   11:  		/* mr R3, R31 */
		/* 82160214h case   11:*/		regs.R3 = regs.R31;
		/* 82160214h case   11:*/		return 0x82160218;
		  /* 82160218h */ case   12:  		/* bl -1704 */
		/* 82160218h case   12:*/		regs.LR = 0x8216021C; return 0x8215FB70;
		/* 82160218h case   12:*/		return 0x8216021C;
		  /* 8216021Ch */ case   13:  		/* b -92 */
		/* 8216021Ch case   13:*/		return 0x821601C0;
		/* 8216021Ch case   13:*/		return 0x82160220;
	}
	return 0x82160220;
} // Block from 821601E8h-82160220h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82160220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160220);
		  /* 82160220h */ case    0:  		/* li R7, 100 */
		/* 82160220h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 82160220h case    0:*/		return 0x82160224;
		  /* 82160224h */ case    1:  		/* mr R6, R25 */
		/* 82160224h case    1:*/		regs.R6 = regs.R25;
		/* 82160224h case    1:*/		return 0x82160228;
		  /* 82160228h */ case    2:  		/* mr R5, R28 */
		/* 82160228h case    2:*/		regs.R5 = regs.R28;
		/* 82160228h case    2:*/		return 0x8216022C;
		  /* 8216022Ch */ case    3:  		/* mr R4, R30 */
		/* 8216022Ch case    3:*/		regs.R4 = regs.R30;
		/* 8216022Ch case    3:*/		return 0x82160230;
		  /* 82160230h */ case    4:  		/* mr R3, R29 */
		/* 82160230h case    4:*/		regs.R3 = regs.R29;
		/* 82160230h case    4:*/		return 0x82160234;
		  /* 82160234h */ case    5:  		/* bl 714652 */
		/* 82160234h case    5:*/		regs.LR = 0x82160238; return 0x8220E9D0;
		/* 82160234h case    5:*/		return 0x82160238;
		  /* 82160238h */ case    6:  		/* stw R3, <#[R31 + 20]> */
		/* 82160238h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82160238h case    6:*/		return 0x8216023C;
		  /* 8216023Ch */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8216023Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8216023Ch case    7:*/		return 0x82160240;
		  /* 82160240h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 82160240h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82160254;  }
		/* 82160240h case    8:*/		return 0x82160244;
		  /* 82160244h */ case    9:  		/* lis R11, -32252 */
		/* 82160244h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160244h case    9:*/		return 0x82160248;
		  /* 82160248h */ case   10:  		/* li R7, 339 */
		/* 82160248h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x153);
		/* 82160248h case   10:*/		return 0x8216024C;
		  /* 8216024Ch */ case   11:  		/* addi R5, R11, -18560 */
		/* 8216024Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB780);
		/* 8216024Ch case   11:*/		return 0x82160250;
		  /* 82160250h */ case   12:  		/* b -76 */
		/* 82160250h case   12:*/		return 0x82160204;
		/* 82160250h case   12:*/		return 0x82160254;
	}
	return 0x82160254;
} // Block from 82160220h-82160254h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82160254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160254);
		  /* 82160254h */ case    0:  		/* li R7, 100 */
		/* 82160254h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x64);
		/* 82160254h case    0:*/		return 0x82160258;
		  /* 82160258h */ case    1:  		/* mr R6, R25 */
		/* 82160258h case    1:*/		regs.R6 = regs.R25;
		/* 82160258h case    1:*/		return 0x8216025C;
		  /* 8216025Ch */ case    2:  		/* mr R5, R28 */
		/* 8216025Ch case    2:*/		regs.R5 = regs.R28;
		/* 8216025Ch case    2:*/		return 0x82160260;
		  /* 82160260h */ case    3:  		/* mr R4, R30 */
		/* 82160260h case    3:*/		regs.R4 = regs.R30;
		/* 82160260h case    3:*/		return 0x82160264;
		  /* 82160264h */ case    4:  		/* mr R3, R29 */
		/* 82160264h case    4:*/		regs.R3 = regs.R29;
		/* 82160264h case    4:*/		return 0x82160268;
		  /* 82160268h */ case    5:  		/* bl 715552 */
		/* 82160268h case    5:*/		regs.LR = 0x8216026C; return 0x8220ED88;
		/* 82160268h case    5:*/		return 0x8216026C;
		  /* 8216026Ch */ case    6:  		/* stw R3, <#[R31 + 24]> */
		/* 8216026Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8216026Ch case    6:*/		return 0x82160270;
		  /* 82160270h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 82160270h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82160270h case    7:*/		return 0x82160274;
		  /* 82160274h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 82160274h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82160288;  }
		/* 82160274h case    8:*/		return 0x82160278;
		  /* 82160278h */ case    9:  		/* lis R11, -32252 */
		/* 82160278h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160278h case    9:*/		return 0x8216027C;
		  /* 8216027Ch */ case   10:  		/* li R7, 352 */
		/* 8216027Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x160);
		/* 8216027Ch case   10:*/		return 0x82160280;
		  /* 82160280h */ case   11:  		/* addi R5, R11, -18576 */
		/* 82160280h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB770);
		/* 82160280h case   11:*/		return 0x82160284;
		  /* 82160284h */ case   12:  		/* b -128 */
		/* 82160284h case   12:*/		return 0x82160204;
		/* 82160284h case   12:*/		return 0x82160288;
	}
	return 0x82160288;
} // Block from 82160254h-82160288h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82160288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160288);
		  /* 82160288h */ case    0:  		/* li R11, 1 */
		/* 82160288h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82160288h case    0:*/		return 0x8216028C;
		  /* 8216028Ch */ case    1:  		/* mr R3, R31 */
		/* 8216028Ch case    1:*/		regs.R3 = regs.R31;
		/* 8216028Ch case    1:*/		return 0x82160290;
		  /* 82160290h */ case    2:  		/* stw R11, <#[R31 + 16]> */
		/* 82160290h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82160290h case    2:*/		return 0x82160294;
	}
	return 0x82160294;
} // Block from 82160288h-82160294h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82160294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160294);
		  /* 82160294h */ case    0:  		/* addi R1, R1, 160 */
		/* 82160294h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82160294h case    0:*/		return 0x82160298;
		  /* 82160298h */ case    1:  		/* b -847872 */
		/* 82160298h case    1:*/		return 0x82091298;
		/* 82160298h case    1:*/		return 0x8216029C;
		  /* 8216029Ch */ case    2:  		/* nop */
		/* 8216029Ch case    2:*/		cpu::op::nop();
		/* 8216029Ch case    2:*/		return 0x821602A0;
	}
	return 0x821602A0;
} // Block from 82160294h-821602A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821602A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821602A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821602A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821602A0);
		  /* 821602A0h */ case    0:  		/* mfspr R12, LR */
		/* 821602A0h case    0:*/		regs.R12 = regs.LR;
		/* 821602A0h case    0:*/		return 0x821602A4;
		  /* 821602A4h */ case    1:  		/* bl -847960 */
		/* 821602A4h case    1:*/		regs.LR = 0x821602A8; return 0x8209124C;
		/* 821602A4h case    1:*/		return 0x821602A8;
		  /* 821602A8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821602A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821602A8h case    2:*/		return 0x821602AC;
		  /* 821602ACh */ case    3:  		/* lis R11, -32253 */
		/* 821602ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821602ACh case    3:*/		return 0x821602B0;
		  /* 821602B0h */ case    4:  		/* lis R10, -32252 */
		/* 821602B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821602B0h case    4:*/		return 0x821602B4;
		  /* 821602B4h */ case    5:  		/* mr R31, R3 */
		/* 821602B4h case    5:*/		regs.R31 = regs.R3;
		/* 821602B4h case    5:*/		return 0x821602B8;
	}
	return 0x821602B8;
} // Block from 821602A0h-821602B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821602B8h
// Function '?UnRegisterAndReleaseAllASObjects@XGRAPHICS@@YAXPAU_SSM_OBJINFO@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821602B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821602B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821602B8);
		  /* 821602B8h */ case    0:  		/* mr R29, R4 */
		/* 821602B8h case    0:*/		regs.R29 = regs.R4;
		/* 821602B8h case    0:*/		return 0x821602BC;
		  /* 821602BCh */ case    1:  		/* mr R30, R5 */
		/* 821602BCh case    1:*/		regs.R30 = regs.R5;
		/* 821602BCh case    1:*/		return 0x821602C0;
		  /* 821602C0h */ case    2:  		/* mr R25, R6 */
		/* 821602C0h case    2:*/		regs.R25 = regs.R6;
		/* 821602C0h case    2:*/		return 0x821602C4;
		  /* 821602C4h */ case    3:  		/* rlwinm R28, R5, 30, 2, 31 */
		/* 821602C4h case    3:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R28,regs.R5);
		/* 821602C4h case    3:*/		return 0x821602C8;
		  /* 821602C8h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 821602C8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821602C8h case    4:*/		return 0x821602CC;
		  /* 821602CCh */ case    5:  		/* addi R27, R11, 27460 */
		/* 821602CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 821602CCh case    5:*/		return 0x821602D0;
		  /* 821602D0h */ case    6:  		/* addi R26, R10, -18768 */
		/* 821602D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFB6B0);
		/* 821602D0h case    6:*/		return 0x821602D4;
		  /* 821602D4h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 821602D4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821602F4;  }
		/* 821602D4h case    7:*/		return 0x821602D8;
		  /* 821602D8h */ case    8:  		/* lis R11, -32252 */
		/* 821602D8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821602D8h case    8:*/		return 0x821602DC;
		  /* 821602DCh */ case    9:  		/* mr R6, R26 */
		/* 821602DCh case    9:*/		regs.R6 = regs.R26;
		/* 821602DCh case    9:*/		return 0x821602E0;
		  /* 821602E0h */ case   10:  		/* addi R5, R11, -18788 */
		/* 821602E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB69C);
		/* 821602E0h case   10:*/		return 0x821602E4;
		  /* 821602E4h */ case   11:  		/* mr R4, R27 */
		/* 821602E4h case   11:*/		regs.R4 = regs.R27;
		/* 821602E4h case   11:*/		return 0x821602E8;
		  /* 821602E8h */ case   12:  		/* li R7, 493 */
		/* 821602E8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x1ED);
		/* 821602E8h case   12:*/		return 0x821602EC;
		  /* 821602ECh */ case   13:  		/* li R3, 0 */
		/* 821602ECh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821602ECh case   13:*/		return 0x821602F0;
		  /* 821602F0h */ case   14:  		/* bl -34536 */
		/* 821602F0h case   14:*/		regs.LR = 0x821602F4; return 0x82157C08;
		/* 821602F0h case   14:*/		return 0x821602F4;
	}
	return 0x821602F4;
} // Block from 821602B8h-821602F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821602F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821602F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821602F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821602F4);
		  /* 821602F4h */ case    0:  		/* mr R5, R28 */
		/* 821602F4h case    0:*/		regs.R5 = regs.R28;
		/* 821602F4h case    0:*/		return 0x821602F8;
		  /* 821602F8h */ case    1:  		/* lwz R3, <#[R31 + 24]> */
		/* 821602F8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 821602F8h case    1:*/		return 0x821602FC;
		  /* 821602FCh */ case    2:  		/* mr R4, R29 */
		/* 821602FCh case    2:*/		regs.R4 = regs.R29;
		/* 821602FCh case    2:*/		return 0x82160300;
		  /* 82160300h */ case    3:  		/* bl 716024 */
		/* 82160300h case    3:*/		regs.LR = 0x82160304; return 0x8220EFF8;
		/* 82160300h case    3:*/		return 0x82160304;
		  /* 82160304h */ case    4:  		/* or. R11, R3, R3 */
		/* 82160304h case    4:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 82160304h case    4:*/		return 0x82160308;
		  /* 82160308h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 82160308h case    5:*/		if ( regs.CR[0].eq ) { return 0x82160324;  }
		/* 82160308h case    5:*/		return 0x8216030C;
		  /* 8216030Ch */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 8216030Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8216030Ch case    6:*/		return 0x82160310;
		  /* 82160310h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82160310h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82160310h case    7:*/		return 0x82160314;
		  /* 82160314h */ case    8:  		/* addi R10, R10, 1 */
		/* 82160314h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82160314h case    8:*/		return 0x82160318;
		  /* 82160318h */ case    9:  		/* stw R10, <#[R11 + 16]> */
		/* 82160318h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82160318h case    9:*/		return 0x8216031C;
		  /* 8216031Ch */ case   10:  		/* stw R9, <#[R25]> */
		/* 8216031Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 8216031Ch case   10:*/		return 0x82160320;
		  /* 82160320h */ case   11:  		/* b 148 */
		/* 82160320h case   11:*/		return 0x821603B4;
		/* 82160320h case   11:*/		return 0x82160324;
	}
	return 0x82160324;
} // Block from 821602F4h-82160324h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82160324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160324);
		  /* 82160324h */ case    0:  		/* mr R5, R30 */
		/* 82160324h case    0:*/		regs.R5 = regs.R30;
		/* 82160324h case    0:*/		return 0x82160328;
		  /* 82160328h */ case    1:  		/* mr R4, R29 */
		/* 82160328h case    1:*/		regs.R4 = regs.R29;
		/* 82160328h case    1:*/		return 0x8216032C;
		  /* 8216032Ch */ case    2:  		/* mr R3, R31 */
		/* 8216032Ch case    2:*/		regs.R3 = regs.R31;
		/* 8216032Ch case    2:*/		return 0x82160330;
		  /* 82160330h */ case    3:  		/* bl -888 */
		/* 82160330h case    3:*/		regs.LR = 0x82160334; return 0x8215FFB8;
		/* 82160330h case    3:*/		return 0x82160334;
		  /* 82160334h */ case    4:  		/* or. R30, R3, R3 */
		/* 82160334h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82160334h case    4:*/		return 0x82160338;
		  /* 82160338h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82160338h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82160360;  }
		/* 82160338h case    5:*/		return 0x8216033C;
		  /* 8216033Ch */ case    6:  		/* lis R11, -32252 */
		/* 8216033Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8216033Ch case    6:*/		return 0x82160340;
		  /* 82160340h */ case    7:  		/* mr R6, R26 */
		/* 82160340h case    7:*/		regs.R6 = regs.R26;
		/* 82160340h case    7:*/		return 0x82160344;
		  /* 82160344h */ case    8:  		/* addi R5, R11, -18588 */
		/* 82160344h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB764);
		/* 82160344h case    8:*/		return 0x82160348;
		  /* 82160348h */ case    9:  		/* mr R4, R27 */
		/* 82160348h case    9:*/		regs.R4 = regs.R27;
		/* 82160348h case    9:*/		return 0x8216034C;
		  /* 8216034Ch */ case   10:  		/* li R7, 521 */
		/* 8216034Ch case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x209);
		/* 8216034Ch case   10:*/		return 0x82160350;
		  /* 82160350h */ case   11:  		/* li R3, 0 */
		/* 82160350h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160350h case   11:*/		return 0x82160354;
		  /* 82160354h */ case   12:  		/* bl -34636 */
		/* 82160354h case   12:*/		regs.LR = 0x82160358; return 0x82157C08;
		/* 82160354h case   12:*/		return 0x82160358;
		  /* 82160358h */ case   13:  		/* li R3, 16 */
		/* 82160358h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 82160358h case   13:*/		return 0x8216035C;
		  /* 8216035Ch */ case   14:  		/* b 92 */
		/* 8216035Ch case   14:*/		return 0x821603B8;
		/* 8216035Ch case   14:*/		return 0x82160360;
	}
	return 0x82160360;
} // Block from 82160324h-82160360h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82160360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160360);
		  /* 82160360h */ case    0:  		/* mr R5, R30 */
		/* 82160360h case    0:*/		regs.R5 = regs.R30;
		/* 82160360h case    0:*/		return 0x82160364;
		  /* 82160364h */ case    1:  		/* lwz R4, <#[R30]> */
		/* 82160364h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82160364h case    1:*/		return 0x82160368;
		  /* 82160368h */ case    2:  		/* lwz R3, <#[R31 + 20]> */
		/* 82160368h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82160368h case    2:*/		return 0x8216036C;
		  /* 8216036Ch */ case    3:  		/* bl 714740 */
		/* 8216036Ch case    3:*/		regs.LR = 0x82160370; return 0x8220EB60;
		/* 8216036Ch case    3:*/		return 0x82160370;
	}
	return 0x82160370;
} // Block from 82160360h-82160370h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82160370h
// Function '?SSMObjRelease@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160370);
		  /* 82160370h */ case    0:  		/* mr R6, R30 */
		/* 82160370h case    0:*/		regs.R6 = regs.R30;
		/* 82160370h case    0:*/		return 0x82160374;
		  /* 82160374h */ case    1:  		/* lwz R5, <#[R30 + 8]> */
		/* 82160374h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		/* 82160374h case    1:*/		return 0x82160378;
		  /* 82160378h */ case    2:  		/* lwz R4, <#[R30 + 4]> */
		/* 82160378h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 82160378h case    2:*/		return 0x8216037C;
		  /* 8216037Ch */ case    3:  		/* lwz R3, <#[R31 + 24]> */
		/* 8216037Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 8216037Ch case    3:*/		return 0x82160380;
		  /* 82160380h */ case    4:  		/* bl 715704 */
		/* 82160380h case    4:*/		regs.LR = 0x82160384; return 0x8220EF38;
		/* 82160380h case    4:*/		return 0x82160384;
		  /* 82160384h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82160384h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82160384h case    5:*/		return 0x82160388;
		  /* 82160388h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82160388h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82160388h case    6:*/		return 0x8216038C;
		  /* 8216038Ch */ case    7:  		/* bc 12, CR6_GT, 32 */
		/* 8216038Ch case    7:*/		if ( regs.CR[6].gt ) { return 0x821603AC;  }
		/* 8216038Ch case    7:*/		return 0x82160390;
		  /* 82160390h */ case    8:  		/* lis R11, -32252 */
		/* 82160390h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160390h case    8:*/		return 0x82160394;
		  /* 82160394h */ case    9:  		/* mr R6, R26 */
		/* 82160394h case    9:*/		regs.R6 = regs.R26;
		/* 82160394h case    9:*/		return 0x82160398;
		  /* 82160398h */ case   10:  		/* addi R5, R11, -18504 */
		/* 82160398h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB7B8);
		/* 82160398h case   10:*/		return 0x8216039C;
		  /* 8216039Ch */ case   11:  		/* mr R4, R27 */
		/* 8216039Ch case   11:*/		regs.R4 = regs.R27;
		/* 8216039Ch case   11:*/		return 0x821603A0;
		  /* 821603A0h */ case   12:  		/* li R7, 535 */
		/* 821603A0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x217);
		/* 821603A0h case   12:*/		return 0x821603A4;
		  /* 821603A4h */ case   13:  		/* li R3, 0 */
		/* 821603A4h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821603A4h case   13:*/		return 0x821603A8;
		  /* 821603A8h */ case   14:  		/* bl -34720 */
		/* 821603A8h case   14:*/		regs.LR = 0x821603AC; return 0x82157C08;
		/* 821603A8h case   14:*/		return 0x821603AC;
	}
	return 0x821603AC;
} // Block from 82160370h-821603ACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821603ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821603AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821603AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821603AC);
		  /* 821603ACh */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821603ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821603ACh case    0:*/		return 0x821603B0;
		  /* 821603B0h */ case    1:  		/* stw R11, <#[R25]> */
		/* 821603B0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821603B0h case    1:*/		return 0x821603B4;
	}
	return 0x821603B4;
} // Block from 821603ACh-821603B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821603B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821603B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821603B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821603B4);
		  /* 821603B4h */ case    0:  		/* li R3, 0 */
		/* 821603B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821603B4h case    0:*/		return 0x821603B8;
	}
	return 0x821603B8;
} // Block from 821603B4h-821603B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821603B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821603B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821603B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821603B8);
		  /* 821603B8h */ case    0:  		/* addi R1, R1, 144 */
		/* 821603B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821603B8h case    0:*/		return 0x821603BC;
		  /* 821603BCh */ case    1:  		/* b -848160 */
		/* 821603BCh case    1:*/		return 0x8209129C;
		/* 821603BCh case    1:*/		return 0x821603C0;
	}
	return 0x821603C0;
} // Block from 821603B8h-821603C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821603C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821603C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821603C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821603C0);
		  /* 821603C0h */ case    0:  		/* mfspr R12, LR */
		/* 821603C0h case    0:*/		regs.R12 = regs.LR;
		/* 821603C0h case    0:*/		return 0x821603C4;
		  /* 821603C4h */ case    1:  		/* bl -848248 */
		/* 821603C4h case    1:*/		regs.LR = 0x821603C8; return 0x8209124C;
		/* 821603C4h case    1:*/		return 0x821603C8;
		  /* 821603C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821603C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821603C8h case    2:*/		return 0x821603CC;
		  /* 821603CCh */ case    3:  		/* lis R11, -32253 */
		/* 821603CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821603CCh case    3:*/		return 0x821603D0;
		  /* 821603D0h */ case    4:  		/* lis R10, -32252 */
		/* 821603D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821603D0h case    4:*/		return 0x821603D4;
		  /* 821603D4h */ case    5:  		/* mr R31, R3 */
		/* 821603D4h case    5:*/		regs.R31 = regs.R3;
		/* 821603D4h case    5:*/		return 0x821603D8;
		  /* 821603D8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821603D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821603D8h case    6:*/		return 0x821603DC;
		  /* 821603DCh */ case    7:  		/* addi R30, R11, 27460 */
		/* 821603DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 821603DCh case    7:*/		return 0x821603E0;
		  /* 821603E0h */ case    8:  		/* addi R29, R10, -18440 */
		/* 821603E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFB7F8);
		/* 821603E0h case    8:*/		return 0x821603E4;
		  /* 821603E4h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 821603E4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82160404;  }
		/* 821603E4h case    9:*/		return 0x821603E8;
		  /* 821603E8h */ case   10:  		/* lis R11, -32252 */
		/* 821603E8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821603E8h case   10:*/		return 0x821603EC;
		  /* 821603ECh */ case   11:  		/* mr R6, R29 */
		/* 821603ECh case   11:*/		regs.R6 = regs.R29;
		/* 821603ECh case   11:*/		return 0x821603F0;
		  /* 821603F0h */ case   12:  		/* addi R5, R11, -18460 */
		/* 821603F0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB7E4);
		/* 821603F0h case   12:*/		return 0x821603F4;
		  /* 821603F4h */ case   13:  		/* mr R4, R30 */
		/* 821603F4h case   13:*/		regs.R4 = regs.R30;
		/* 821603F4h case   13:*/		return 0x821603F8;
		  /* 821603F8h */ case   14:  		/* li R7, 267 */
		/* 821603F8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x10B);
		/* 821603F8h case   14:*/		return 0x821603FC;
		  /* 821603FCh */ case   15:  		/* li R3, 0 */
		/* 821603FCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821603FCh case   15:*/		return 0x82160400;
		  /* 82160400h */ case   16:  		/* bl -34808 */
		/* 82160400h case   16:*/		regs.LR = 0x82160404; return 0x82157C08;
		/* 82160400h case   16:*/		return 0x82160404;
	}
	return 0x82160404;
} // Block from 821603C0h-82160404h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82160404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160404);
		  /* 82160404h */ case    0:  		/* li R4, 1 */
		/* 82160404h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82160404h case    0:*/		return 0x82160408;
		  /* 82160408h */ case    1:  		/* lwz R3, <#[R31 + 28]> */
		/* 82160408h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 82160408h case    1:*/		return 0x8216040C;
		  /* 8216040Ch */ case    2:  		/* bl 695676 */
		/* 8216040Ch case    2:*/		regs.LR = 0x82160410; return 0x8220A188;
		/* 8216040Ch case    2:*/		return 0x82160410;
	}
	return 0x82160410;
} // Block from 82160404h-82160410h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82160410h
// Function '?DestroySSItem@XGRAPHICS@@YAXPAU_SS_SHADER_STORE@1@PAU_SS_SHADER_STORE_ITEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160410);
		  /* 82160410h */ case    0:  		/* mr R28, R3 */
		/* 82160410h case    0:*/		regs.R28 = regs.R3;
		/* 82160410h case    0:*/		return 0x82160414;
		  /* 82160414h */ case    1:  		/* lwz R3, <#[R31 + 40]> */
		/* 82160414h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82160414h case    1:*/		return 0x82160418;
		  /* 82160418h */ case    2:  		/* bl 705328 */
		/* 82160418h case    2:*/		regs.LR = 0x8216041C; return 0x8220C748;
		/* 82160418h case    2:*/		return 0x8216041C;
		  /* 8216041Ch */ case    3:  		/* lwz R3, <#[R31 + 44]> */
		/* 8216041Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8216041Ch case    3:*/		return 0x82160420;
		  /* 82160420h */ case    4:  		/* bl 705320 */
		/* 82160420h case    4:*/		regs.LR = 0x82160424; return 0x8220C748;
		/* 82160420h case    4:*/		return 0x82160424;
		  /* 82160424h */ case    5:  		/* lis R11, -32252 */
		/* 82160424h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160424h case    5:*/		return 0x82160428;
		  /* 82160428h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 82160428h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82160428h case    6:*/		return 0x8216042C;
		  /* 8216042Ch */ case    7:  		/* addi R28, R11, -18480 */
		/* 8216042Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFB7D0);
		/* 8216042Ch case    7:*/		return 0x82160430;
		  /* 82160430h */ case    8:  		/* bc 4, CR6_EQ, 48 */
		/* 82160430h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82160460;  }
		/* 82160430h case    8:*/		return 0x82160434;
		  /* 82160434h */ case    9:  		/* lwz R27, <#[R31 + 32]> */
		/* 82160434h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000020) );
		/* 82160434h case    9:*/		return 0x82160438;
		  /* 82160438h */ case   10:  		/* li R4, 1 */
		/* 82160438h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82160438h case   10:*/		return 0x8216043C;
		  /* 8216043Ch */ case   11:  		/* mr R3, R27 */
		/* 8216043Ch case   11:*/		regs.R3 = regs.R27;
		/* 8216043Ch case   11:*/		return 0x82160440;
		  /* 82160440h */ case   12:  		/* lwz R26, <#[R27 + 1436]> */
		/* 82160440h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x0000059C) );
		/* 82160440h case   12:*/		return 0x82160444;
		  /* 82160444h */ case   13:  		/* lwz R25, <#[R27 + 1444]> */
		/* 82160444h case   13:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R27 + 0x000005A4) );
		/* 82160444h case   13:*/		return 0x82160448;
		  /* 82160448h */ case   14:  		/* bl 772224 */
		/* 82160448h case   14:*/		regs.LR = 0x8216044C; return 0x8221CCC8;
		/* 82160448h case   14:*/		return 0x8216044C;
		  /* 8216044Ch */ case   15:  		/* mr R4, R27 */
		/* 8216044Ch case   15:*/		regs.R4 = regs.R27;
		/* 8216044Ch case   15:*/		return 0x82160450;
		  /* 82160450h */ case   16:  		/* mtspr CTR, R26 */
		/* 82160450h case   16:*/		regs.CTR = regs.R26;
		/* 82160450h case   16:*/		return 0x82160454;
		  /* 82160454h */ case   17:  		/* mr R3, R25 */
		/* 82160454h case   17:*/		regs.R3 = regs.R25;
		/* 82160454h case   17:*/		return 0x82160458;
		  /* 82160458h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82160458h case   18:*/		if ( 1 ) { regs.LR = 0x8216045C; return (uint32)regs.CTR; }
		/* 82160458h case   18:*/		return 0x8216045C;
		  /* 8216045Ch */ case   19:  		/* b 52 */
		/* 8216045Ch case   19:*/		return 0x82160490;
		/* 8216045Ch case   19:*/		return 0x82160460;
	}
	return 0x82160460;
} // Block from 82160410h-82160460h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82160460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160460);
		  /* 82160460h */ case    0:  		/* lwz R3, <#[R31 + 24]> */
		/* 82160460h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 82160460h case    0:*/		return 0x82160464;
		  /* 82160464h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82160464h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82160464h case    1:*/		return 0x82160468;
		  /* 82160468h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 82160468h case    2:*/		if ( regs.CR[6].eq ) { return 0x82160490;  }
		/* 82160468h case    2:*/		return 0x8216046C;
		  /* 8216046Ch */ case    3:  		/* bl 698124 */
		/* 8216046Ch case    3:*/		regs.LR = 0x82160470; return 0x8220AB78;
		/* 8216046Ch case    3:*/		return 0x82160470;
		  /* 82160470h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82160470h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82160470h case    4:*/		return 0x82160474;
		  /* 82160474h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 82160474h case    5:*/		if ( regs.CR[0].eq ) { return 0x82160490;  }
		/* 82160474h case    5:*/		return 0x82160478;
		  /* 82160478h */ case    6:  		/* mr R6, R29 */
		/* 82160478h case    6:*/		regs.R6 = regs.R29;
		/* 82160478h case    6:*/		return 0x8216047C;
		  /* 8216047Ch */ case    7:  		/* mr R5, R28 */
		/* 8216047Ch case    7:*/		regs.R5 = regs.R28;
		/* 8216047Ch case    7:*/		return 0x82160480;
		  /* 82160480h */ case    8:  		/* mr R4, R30 */
		/* 82160480h case    8:*/		regs.R4 = regs.R30;
		/* 82160480h case    8:*/		return 0x82160484;
		  /* 82160484h */ case    9:  		/* li R7, 293 */
		/* 82160484h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x125);
		/* 82160484h case    9:*/		return 0x82160488;
		  /* 82160488h */ case   10:  		/* li R3, 0 */
		/* 82160488h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160488h case   10:*/		return 0x8216048C;
		  /* 8216048Ch */ case   11:  		/* bl -34948 */
		/* 8216048Ch case   11:*/		regs.LR = 0x82160490; return 0x82157C08;
		/* 8216048Ch case   11:*/		return 0x82160490;
	}
	return 0x82160490;
} // Block from 82160460h-82160490h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82160490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160490);
		  /* 82160490h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82160490h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82160490h case    0:*/		return 0x82160494;
		  /* 82160494h */ case    1:  		/* mr R4, R31 */
		/* 82160494h case    1:*/		regs.R4 = regs.R31;
		/* 82160494h case    1:*/		return 0x82160498;
		  /* 82160498h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 82160498h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82160498h case    2:*/		return 0x8216049C;
		  /* 8216049Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8216049Ch case    3:*/		regs.CTR = regs.R11;
		/* 8216049Ch case    3:*/		return 0x821604A0;
		  /* 821604A0h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 821604A0h case    4:*/		if ( 1 ) { regs.LR = 0x821604A4; return (uint32)regs.CTR; }
		/* 821604A0h case    4:*/		return 0x821604A4;
		  /* 821604A4h */ case    5:  		/* or. R31, R3, R3 */
		/* 821604A4h case    5:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821604A4h case    5:*/		return 0x821604A8;
		  /* 821604A8h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 821604A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821604C4;  }
		/* 821604A8h case    6:*/		return 0x821604AC;
		  /* 821604ACh */ case    7:  		/* mr R6, R29 */
		/* 821604ACh case    7:*/		regs.R6 = regs.R29;
		/* 821604ACh case    7:*/		return 0x821604B0;
		  /* 821604B0h */ case    8:  		/* mr R5, R28 */
		/* 821604B0h case    8:*/		regs.R5 = regs.R28;
		/* 821604B0h case    8:*/		return 0x821604B4;
		  /* 821604B4h */ case    9:  		/* mr R4, R30 */
		/* 821604B4h case    9:*/		regs.R4 = regs.R30;
		/* 821604B4h case    9:*/		return 0x821604B8;
		  /* 821604B8h */ case   10:  		/* li R7, 300 */
		/* 821604B8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x12C);
		/* 821604B8h case   10:*/		return 0x821604BC;
		  /* 821604BCh */ case   11:  		/* li R3, 0 */
		/* 821604BCh case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821604BCh case   11:*/		return 0x821604C0;
		  /* 821604C0h */ case   12:  		/* bl -35000 */
		/* 821604C0h case   12:*/		regs.LR = 0x821604C4; return 0x82157C08;
		/* 821604C0h case   12:*/		return 0x821604C4;
	}
	return 0x821604C4;
} // Block from 82160490h-821604C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821604C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821604C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821604C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821604C4);
		  /* 821604C4h */ case    0:  		/* mr R3, R31 */
		/* 821604C4h case    0:*/		regs.R3 = regs.R31;
		/* 821604C4h case    0:*/		return 0x821604C8;
		  /* 821604C8h */ case    1:  		/* addi R1, R1, 144 */
		/* 821604C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821604C8h case    1:*/		return 0x821604CC;
		  /* 821604CCh */ case    2:  		/* b -848432 */
		/* 821604CCh case    2:*/		return 0x8209129C;
		/* 821604CCh case    2:*/		return 0x821604D0;
	}
	return 0x821604D0;
} // Block from 821604C4h-821604D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821604D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821604D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821604D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821604D0);
		  /* 821604D0h */ case    0:  		/* mfspr R12, LR */
		/* 821604D0h case    0:*/		regs.R12 = regs.LR;
		/* 821604D0h case    0:*/		return 0x821604D4;
		  /* 821604D4h */ case    1:  		/* bl -848528 */
		/* 821604D4h case    1:*/		regs.LR = 0x821604D8; return 0x82091244;
		/* 821604D4h case    1:*/		return 0x821604D8;
		  /* 821604D8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821604D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821604D8h case    2:*/		return 0x821604DC;
		  /* 821604DCh */ case    3:  		/* mr R29, R4 */
		/* 821604DCh case    3:*/		regs.R29 = regs.R4;
		/* 821604DCh case    3:*/		return 0x821604E0;
		  /* 821604E0h */ case    4:  		/* lwz R27, <#[R3 + 32]> */
		/* 821604E0h case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000020) );
		/* 821604E0h case    4:*/		return 0x821604E4;
		  /* 821604E4h */ case    5:  		/* li R4, 1 */
		/* 821604E4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821604E4h case    5:*/		return 0x821604E8;
		  /* 821604E8h */ case    6:  		/* lwz R28, <#[R3 + 16]> */
		/* 821604E8h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000010) );
		/* 821604E8h case    6:*/		return 0x821604EC;
		  /* 821604ECh */ case    7:  		/* mr R31, R3 */
		/* 821604ECh case    7:*/		regs.R31 = regs.R3;
		/* 821604ECh case    7:*/		return 0x821604F0;
		  /* 821604F0h */ case    8:  		/* lwz R3, <#[R3 + 28]> */
		/* 821604F0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000001C) );
		/* 821604F0h case    8:*/		return 0x821604F4;
		  /* 821604F4h */ case    9:  		/* mr R30, R5 */
		/* 821604F4h case    9:*/		regs.R30 = regs.R5;
		/* 821604F4h case    9:*/		return 0x821604F8;
		  /* 821604F8h */ case   10:  		/* bl 695440 */
		/* 821604F8h case   10:*/		regs.LR = 0x821604FC; return 0x8220A188;
		/* 821604F8h case   10:*/		return 0x821604FC;
		  /* 821604FCh */ case   11:  		/* mr R23, R3 */
		/* 821604FCh case   11:*/		regs.R23 = regs.R3;
		/* 821604FCh case   11:*/		return 0x82160500;
		  /* 82160500h */ case   12:  		/* li R4, 0 */
		/* 82160500h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82160500h case   12:*/		return 0x82160504;
		  /* 82160504h */ case   13:  		/* mr R3, R29 */
		/* 82160504h case   13:*/		regs.R3 = regs.R29;
		/* 82160504h case   13:*/		return 0x82160508;
		  /* 82160508h */ case   14:  		/* bl -12280 */
		/* 82160508h case   14:*/		regs.LR = 0x8216050C; return 0x8215D510;
		/* 82160508h case   14:*/		return 0x8216050C;
		  /* 8216050Ch */ case   15:  		/* mr R26, R3 */
		/* 8216050Ch case   15:*/		regs.R26 = regs.R3;
		/* 8216050Ch case   15:*/		return 0x82160510;
		  /* 82160510h */ case   16:  		/* mr R3, R28 */
		/* 82160510h case   16:*/		regs.R3 = regs.R28;
		/* 82160510h case   16:*/		return 0x82160514;
		  /* 82160514h */ case   17:  		/* mr R4, R26 */
		/* 82160514h case   17:*/		regs.R4 = regs.R26;
		/* 82160514h case   17:*/		return 0x82160518;
		  /* 82160518h */ case   18:  		/* bl -1856 */
		/* 82160518h case   18:*/		regs.LR = 0x8216051C; return 0x8215FDD8;
		/* 82160518h case   18:*/		return 0x8216051C;
		  /* 8216051Ch */ case   19:  		/* or. R24, R3, R3 */
		/* 8216051Ch case   19:*/		cpu::op::or<1>(regs,&regs.R24,regs.R3,regs.R3);
		/* 8216051Ch case   19:*/		return 0x82160520;
	}
	return 0x82160520;
} // Block from 821604D0h-82160520h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82160520h
// Function '?RetrieveSSItem@XGRAPHICS@@YAPAU_SS_SHADER_STORE_ITEM@1@PAU_SS_SHADER_STORE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160520);
		  /* 82160520h */ case    0:  		/* bc 4, CR0_EQ, 48 */
		/* 82160520h case    0:*/		if ( !regs.CR[0].eq ) { return 0x82160550;  }
		/* 82160520h case    0:*/		return 0x82160524;
		  /* 82160524h */ case    1:  		/* lis R10, -32252 */
		/* 82160524h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82160524h case    1:*/		return 0x82160528;
		  /* 82160528h */ case    2:  		/* li R7, 350 */
		/* 82160528h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x15E);
		/* 82160528h case    2:*/		return 0x8216052C;
		  /* 8216052Ch */ case    3:  		/* addi R5, R10, -18212 */
		/* 8216052Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB8DC);
		/* 8216052Ch case    3:*/		return 0x82160530;
		  /* 82160530h */ case    4:  		/* lis R9, -32253 */
		/* 82160530h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82160530h case    4:*/		return 0x82160534;
		  /* 82160534h */ case    5:  		/* lis R11, -32252 */
		/* 82160534h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160534h case    5:*/		return 0x82160538;
		  /* 82160538h */ case    6:  		/* addi R4, R9, 27460 */
		/* 82160538h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82160538h case    6:*/		return 0x8216053C;
		  /* 8216053Ch */ case    7:  		/* addi R6, R11, -18440 */
		/* 8216053Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7F8);
		/* 8216053Ch case    7:*/		return 0x82160540;
		  /* 82160540h */ case    8:  		/* li R3, 0 */
		/* 82160540h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160540h case    8:*/		return 0x82160544;
		  /* 82160544h */ case    9:  		/* bl -35132 */
		/* 82160544h case    9:*/		regs.LR = 0x82160548; return 0x82157C08;
		/* 82160544h case    9:*/		return 0x82160548;
		  /* 82160548h */ case   10:  		/* li R3, 19 */
		/* 82160548h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 82160548h case   10:*/		return 0x8216054C;
		  /* 8216054Ch */ case   11:  		/* b 580 */
		/* 8216054Ch case   11:*/		return 0x82160790;
		/* 8216054Ch case   11:*/		return 0x82160550;
	}
	return 0x82160550;
} // Block from 82160520h-82160550h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82160550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160550);
		  /* 82160550h */ case    0:  		/* li R4, 1 */
		/* 82160550h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82160550h case    0:*/		return 0x82160554;
		  /* 82160554h */ case    1:  		/* mr R3, R29 */
		/* 82160554h case    1:*/		regs.R3 = regs.R29;
		/* 82160554h case    1:*/		return 0x82160558;
		  /* 82160558h */ case    2:  		/* bl -12360 */
		/* 82160558h case    2:*/		regs.LR = 0x8216055C; return 0x8215D510;
		/* 82160558h case    2:*/		return 0x8216055C;
		  /* 8216055Ch */ case    3:  		/* mr R25, R3 */
		/* 8216055Ch case    3:*/		regs.R25 = regs.R3;
		/* 8216055Ch case    3:*/		return 0x82160560;
		  /* 82160560h */ case    4:  		/* mr R3, R28 */
		/* 82160560h case    4:*/		regs.R3 = regs.R28;
		/* 82160560h case    4:*/		return 0x82160564;
		  /* 82160564h */ case    5:  		/* mr R4, R25 */
		/* 82160564h case    5:*/		regs.R4 = regs.R25;
		/* 82160564h case    5:*/		return 0x82160568;
		  /* 82160568h */ case    6:  		/* bl -1936 */
		/* 82160568h case    6:*/		regs.LR = 0x8216056C; return 0x8215FDD8;
		/* 82160568h case    6:*/		return 0x8216056C;
		  /* 8216056Ch */ case    7:  		/* or. R28, R3, R3 */
		/* 8216056Ch case    7:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8216056Ch case    7:*/		return 0x82160570;
		  /* 82160570h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 82160570h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82160584;  }
		/* 82160570h case    8:*/		return 0x82160574;
		  /* 82160574h */ case    9:  		/* lis R10, -32252 */
		/* 82160574h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82160574h case    9:*/		return 0x82160578;
		  /* 82160578h */ case   10:  		/* li R7, 359 */
		/* 82160578h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x167);
		/* 82160578h case   10:*/		return 0x8216057C;
		  /* 8216057Ch */ case   11:  		/* addi R5, R10, -18228 */
		/* 8216057Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB8CC);
		/* 8216057Ch case   11:*/		return 0x82160580;
		  /* 82160580h */ case   12:  		/* b -80 */
		/* 82160580h case   12:*/		return 0x82160530;
		/* 82160580h case   12:*/		return 0x82160584;
	}
	return 0x82160584;
} // Block from 82160550h-82160584h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82160584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160584);
		  /* 82160584h */ case    0:  		/* li R4, 0 */
		/* 82160584h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82160584h case    0:*/		return 0x82160588;
	}
	return 0x82160588;
} // Block from 82160584h-82160588h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82160588h
// Function '?SS_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SS_SHADER_STORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160588);
		  /* 82160588h */ case    0:  		/* lwz R3, <#[R31 + 12]> */
		/* 82160588h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82160588h case    0:*/		return 0x8216058C;
		  /* 8216058Ch */ case    1:  		/* bl 710220 */
		/* 8216058Ch case    1:*/		regs.LR = 0x82160590; return 0x8220DBD8;
		/* 8216058Ch case    1:*/		return 0x82160590;
		  /* 82160590h */ case    2:  		/* stw R3, <#[R30]> */
		/* 82160590h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160590h case    2:*/		return 0x82160594;
		  /* 82160594h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82160594h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82160594h case    3:*/		return 0x82160598;
		  /* 82160598h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 82160598h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821605C4;  }
		/* 82160598h case    4:*/		return 0x8216059C;
		  /* 8216059Ch */ case    5:  		/* lis R11, -32252 */
		/* 8216059Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8216059Ch case    5:*/		return 0x821605A0;
		  /* 821605A0h */ case    6:  		/* lis R10, -32252 */
		/* 821605A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821605A0h case    6:*/		return 0x821605A4;
		  /* 821605A4h */ case    7:  		/* lis R9, -32253 */
		/* 821605A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821605A4h case    7:*/		return 0x821605A8;
		  /* 821605A8h */ case    8:  		/* addi R6, R11, -18440 */
		/* 821605A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7F8);
		/* 821605A8h case    8:*/		return 0x821605AC;
		  /* 821605ACh */ case    9:  		/* addi R5, R10, -18276 */
		/* 821605ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB89C);
		/* 821605ACh case    9:*/		return 0x821605B0;
		  /* 821605B0h */ case   10:  		/* addi R4, R9, 27460 */
		/* 821605B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 821605B0h case   10:*/		return 0x821605B4;
		  /* 821605B4h */ case   11:  		/* li R7, 370 */
		/* 821605B4h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x172);
		/* 821605B4h case   11:*/		return 0x821605B8;
		  /* 821605B8h */ case   12:  		/* bl -35248 */
		/* 821605B8h case   12:*/		regs.LR = 0x821605BC; return 0x82157C08;
		/* 821605B8h case   12:*/		return 0x821605BC;
		  /* 821605BCh */ case   13:  		/* li R3, 16 */
		/* 821605BCh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 821605BCh case   13:*/		return 0x821605C0;
		  /* 821605C0h */ case   14:  		/* b 464 */
		/* 821605C0h case   14:*/		return 0x82160790;
		/* 821605C0h case   14:*/		return 0x821605C4;
	}
	return 0x821605C4;
} // Block from 82160588h-821605C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821605C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821605C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821605C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821605C4);
		  /* 821605C4h */ case    0:  		/* bl 783892 */
		/* 821605C4h case    0:*/		regs.LR = 0x821605C8; return 0x8221FBD8;
		/* 821605C4h case    0:*/		return 0x821605C8;
		  /* 821605C8h */ case    1:  		/* mr R4, R26 */
		/* 821605C8h case    1:*/		regs.R4 = regs.R26;
		/* 821605C8h case    1:*/		return 0x821605CC;
		  /* 821605CCh */ case    2:  		/* bl -12324 */
		/* 821605CCh case    2:*/		regs.LR = 0x821605D0; return 0x8215D5A8;
		/* 821605CCh case    2:*/		return 0x821605D0;
		  /* 821605D0h */ case    3:  		/* lwz R3, <#[R30]> */
		/* 821605D0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821605D0h case    3:*/		return 0x821605D4;
		  /* 821605D4h */ case    4:  		/* bl 783788 */
		/* 821605D4h case    4:*/		regs.LR = 0x821605D8; return 0x8221FB80;
		/* 821605D4h case    4:*/		return 0x821605D8;
		  /* 821605D8h */ case    5:  		/* mr R4, R25 */
		/* 821605D8h case    5:*/		regs.R4 = regs.R25;
		/* 821605D8h case    5:*/		return 0x821605DC;
		  /* 821605DCh */ case    6:  		/* bl -12340 */
		/* 821605DCh case    6:*/		regs.LR = 0x821605E0; return 0x8215D5A8;
		/* 821605DCh case    6:*/		return 0x821605E0;
		  /* 821605E0h */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 821605E0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821605E0h case    7:*/		return 0x821605E4;
		  /* 821605E4h */ case    8:  		/* bc 4, CR6_EQ, 300 */
		/* 821605E4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82160710;  }
		/* 821605E4h case    8:*/		return 0x821605E8;
		  /* 821605E8h */ case    9:  		/* mr R4, R29 */
		/* 821605E8h case    9:*/		regs.R4 = regs.R29;
		/* 821605E8h case    9:*/		return 0x821605EC;
		  /* 821605ECh */ case   10:  		/* lwz R5, <#[R30]> */
		/* 821605ECh case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 821605ECh case   10:*/		return 0x821605F0;
		  /* 821605F0h */ case   11:  		/* lwz R3, <#[R31 + 20]> */
		/* 821605F0h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 821605F0h case   11:*/		return 0x821605F4;
		  /* 821605F4h */ case   12:  		/* bl 709036 */
		/* 821605F4h case   12:*/		regs.LR = 0x821605F8; return 0x8220D7A0;
		/* 821605F4h case   12:*/		return 0x821605F8;
		  /* 821605F8h */ case   13:  		/* cmplwi CR0, R3, 0 */
		/* 821605F8h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821605F8h case   13:*/		return 0x821605FC;
		  /* 821605FCh */ case   14:  		/* bc 4, CR0_EQ, 388 */
		/* 821605FCh case   14:*/		if ( !regs.CR[0].eq ) { return 0x82160780;  }
		/* 821605FCh case   14:*/		return 0x82160600;
		  /* 82160600h */ case   15:  		/* mr R4, R29 */
		/* 82160600h case   15:*/		regs.R4 = regs.R29;
		/* 82160600h case   15:*/		return 0x82160604;
		  /* 82160604h */ case   16:  		/* lwz R5, <#[R30]> */
		/* 82160604h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 82160604h case   16:*/		return 0x82160608;
		  /* 82160608h */ case   17:  		/* lwz R3, <#[R31 + 20]> */
		/* 82160608h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82160608h case   17:*/		return 0x8216060C;
		  /* 8216060Ch */ case   18:  		/* bl 709412 */
		/* 8216060Ch case   18:*/		regs.LR = 0x82160610; return 0x8220D930;
		/* 8216060Ch case   18:*/		return 0x82160610;
		  /* 82160610h */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 82160610h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82160610h case   19:*/		return 0x82160614;
		  /* 82160614h */ case   20:  		/* bc 4, CR0_EQ, 196 */
		/* 82160614h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821606D8;  }
		/* 82160614h case   20:*/		return 0x82160618;
		  /* 82160618h */ case   21:  		/* lwz R3, <#[R31 + 40]> */
		/* 82160618h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82160618h case   21:*/		return 0x8216061C;
		  /* 8216061Ch */ case   22:  		/* bl -7652 */
		/* 8216061Ch case   22:*/		regs.LR = 0x82160620; return 0x8215E838;
		/* 8216061Ch case   22:*/		return 0x82160620;
		  /* 82160620h */ case   23:  		/* lwz R3, <#[R31 + 44]> */
		/* 82160620h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82160620h case   23:*/		return 0x82160624;
		  /* 82160624h */ case   24:  		/* bl -7660 */
		/* 82160624h case   24:*/		regs.LR = 0x82160628; return 0x8215E838;
		/* 82160624h case   24:*/		return 0x82160628;
		  /* 82160628h */ case   25:  		/* lwz R3, <#[R30]> */
		/* 82160628h case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160628h case   25:*/		return 0x8216062C;
		  /* 8216062Ch */ case   26:  		/* lwz R23, <#[R31 + 40]> */
		/* 8216062Ch case   26:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x00000028) );
		/* 8216062Ch case   26:*/		return 0x82160630;
		  /* 82160630h */ case   27:  		/* bl 783784 */
		/* 82160630h case   27:*/		regs.LR = 0x82160634; return 0x8221FBD8;
		/* 82160630h case   27:*/		return 0x82160634;
		  /* 82160634h */ case   28:  		/* mr R4, R23 */
		/* 82160634h case   28:*/		regs.R4 = regs.R23;
		/* 82160634h case   28:*/		return 0x82160638;
		  /* 82160638h */ case   29:  		/* bl -12248 */
		/* 82160638h case   29:*/		regs.LR = 0x8216063C; return 0x8215D660;
		/* 82160638h case   29:*/		return 0x8216063C;
		  /* 8216063Ch */ case   30:  		/* lwz R3, <#[R30]> */
		/* 8216063Ch case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8216063Ch case   30:*/		return 0x82160640;
		  /* 82160640h */ case   31:  		/* lwz R23, <#[R31 + 44]> */
		/* 82160640h case   31:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x0000002C) );
		/* 82160640h case   31:*/		return 0x82160644;
		  /* 82160644h */ case   32:  		/* bl 783676 */
		/* 82160644h case   32:*/		regs.LR = 0x82160648; return 0x8221FB80;
		/* 82160644h case   32:*/		return 0x82160648;
		  /* 82160648h */ case   33:  		/* mr R4, R23 */
		/* 82160648h case   33:*/		regs.R4 = regs.R23;
		/* 82160648h case   33:*/		return 0x8216064C;
		  /* 8216064Ch */ case   34:  		/* bl -12268 */
		/* 8216064Ch case   34:*/		regs.LR = 0x82160650; return 0x8215D660;
		/* 8216064Ch case   34:*/		return 0x82160650;
		  /* 82160650h */ case   35:  		/* lis R11, -32252 */
		/* 82160650h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160650h case   35:*/		return 0x82160654;
		  /* 82160654h */ case   36:  		/* mr R5, R25 */
		/* 82160654h case   36:*/		regs.R5 = regs.R25;
		/* 82160654h case   36:*/		return 0x82160658;
		  /* 82160658h */ case   37:  		/* addi R4, R11, -18304 */
		/* 82160658h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFB880);
		/* 82160658h case   37:*/		return 0x8216065C;
		  /* 8216065Ch */ case   38:  		/* mr R3, R27 */
		/* 8216065Ch case   38:*/		regs.R3 = regs.R27;
		/* 8216065Ch case   38:*/		return 0x82160660;
		  /* 82160660h */ case   39:  		/* bl 773472 */
		/* 82160660h case   39:*/		regs.LR = 0x82160664; return 0x8221D3C0;
		/* 82160660h case   39:*/		return 0x82160664;
		  /* 82160664h */ case   40:  		/* lis R11, -32252 */
		/* 82160664h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160664h case   40:*/		return 0x82160668;
		  /* 82160668h */ case   41:  		/* mr R5, R26 */
		/* 82160668h case   41:*/		regs.R5 = regs.R26;
		/* 82160668h case   41:*/		return 0x8216066C;
		  /* 8216066Ch */ case   42:  		/* addi R4, R11, -18332 */
		/* 8216066Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFB864);
		/* 8216066Ch case   42:*/		return 0x82160670;
		  /* 82160670h */ case   43:  		/* mr R3, R27 */
		/* 82160670h case   43:*/		regs.R3 = regs.R27;
		/* 82160670h case   43:*/		return 0x82160674;
		  /* 82160674h */ case   44:  		/* bl 773452 */
		/* 82160674h case   44:*/		regs.LR = 0x82160678; return 0x8221D3C0;
		/* 82160674h case   44:*/		return 0x82160678;
		  /* 82160678h */ case   45:  		/* lwz R3, <#[R30]> */
		/* 82160678h case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160678h case   45:*/		return 0x8216067C;
		  /* 8216067Ch */ case   46:  		/* bl 783620 */
		/* 8216067Ch case   46:*/		regs.LR = 0x82160680; return 0x8221FB80;
		/* 8216067Ch case   46:*/		return 0x82160680;
		  /* 82160680h */ case   47:  		/* mr R26, R3 */
		/* 82160680h case   47:*/		regs.R26 = regs.R3;
		/* 82160680h case   47:*/		return 0x82160684;
		  /* 82160684h */ case   48:  		/* lwz R3, <#[R30]> */
		/* 82160684h case   48:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160684h case   48:*/		return 0x82160688;
		  /* 82160688h */ case   49:  		/* bl 783696 */
		/* 82160688h case   49:*/		regs.LR = 0x8216068C; return 0x8221FBD8;
		/* 82160688h case   49:*/		return 0x8216068C;
		  /* 8216068Ch */ case   50:  		/* mr R4, R3 */
		/* 8216068Ch case   50:*/		regs.R4 = regs.R3;
		/* 8216068Ch case   50:*/		return 0x82160690;
		  /* 82160690h */ case   51:  		/* mr R3, R27 */
		/* 82160690h case   51:*/		regs.R3 = regs.R27;
		/* 82160690h case   51:*/		return 0x82160694;
		  /* 82160694h */ case   52:  		/* mr R5, R26 */
		/* 82160694h case   52:*/		regs.R5 = regs.R26;
		/* 82160694h case   52:*/		return 0x82160698;
		  /* 82160698h */ case   53:  		/* mr R6, R24 */
		/* 82160698h case   53:*/		regs.R6 = regs.R24;
		/* 82160698h case   53:*/		return 0x8216069C;
		  /* 8216069Ch */ case   54:  		/* mr R7, R28 */
		/* 8216069Ch case   54:*/		regs.R7 = regs.R28;
		/* 8216069Ch case   54:*/		return 0x821606A0;
		  /* 821606A0h */ case   55:  		/* mr R8, R29 */
		/* 821606A0h case   55:*/		regs.R8 = regs.R29;
		/* 821606A0h case   55:*/		return 0x821606A4;
		  /* 821606A4h */ case   56:  		/* bl 775348 */
		/* 821606A4h case   56:*/		regs.LR = 0x821606A8; return 0x8221DB58;
		/* 821606A4h case   56:*/		return 0x821606A8;
		  /* 821606A8h */ case   57:  		/* cmpwi CR0, R3, 0 */
		/* 821606A8h case   57:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821606A8h case   57:*/		return 0x821606AC;
		  /* 821606ACh */ case   58:  		/* bc 4, CR0_EQ, 228 */
		/* 821606ACh case   58:*/		if ( !regs.CR[0].eq ) { return 0x82160790;  }
		/* 821606ACh case   58:*/		return 0x821606B0;
	}
	return 0x821606B0;
} // Block from 821605C4h-821606B0h (59 instructions)

//////////////////////////////////////////////////////
// Block at 821606B0h
// Function '?SS_ReleaseIL@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SS_SHADER_STORE@1@IPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821606B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821606B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821606B0);
		  /* 821606B0h */ case    0:  		/* lwz R3, <#[R30]> */
		/* 821606B0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606B0h case    0:*/		return 0x821606B4;
		  /* 821606B4h */ case    1:  		/* bl 783652 */
		/* 821606B4h case    1:*/		regs.LR = 0x821606B8; return 0x8221FBD8;
		/* 821606B4h case    1:*/		return 0x821606B8;
		  /* 821606B8h */ case    2:  		/* bl -9272 */
		/* 821606B8h case    2:*/		regs.LR = 0x821606BC; return 0x8215E280;
		/* 821606B8h case    2:*/		return 0x821606BC;
		  /* 821606BCh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821606BCh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821606BCh case    3:*/		return 0x821606C0;
		  /* 821606C0h */ case    4:  		/* bc 4, CR0_EQ, 208 */
		/* 821606C0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82160790;  }
		/* 821606C0h case    4:*/		return 0x821606C4;
		  /* 821606C4h */ case    5:  		/* lwz R3, <#[R30]> */
		/* 821606C4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606C4h case    5:*/		return 0x821606C8;
		  /* 821606C8h */ case    6:  		/* bl 783544 */
		/* 821606C8h case    6:*/		regs.LR = 0x821606CC; return 0x8221FB80;
		/* 821606C8h case    6:*/		return 0x821606CC;
		  /* 821606CCh */ case    7:  		/* bl -9292 */
		/* 821606CCh case    7:*/		regs.LR = 0x821606D0; return 0x8215E280;
		/* 821606CCh case    7:*/		return 0x821606D0;
		  /* 821606D0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 821606D0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821606D0h case    8:*/		return 0x821606D4;
		  /* 821606D4h */ case    9:  		/* bc 4, CR0_EQ, 188 */
		/* 821606D4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82160790;  }
		/* 821606D4h case    9:*/		return 0x821606D8;
	}
	return 0x821606D8;
} // Block from 821606B0h-821606D8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821606D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821606D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821606D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821606D8);
		  /* 821606D8h */ case    0:  		/* lwz R3, <#[R30]> */
		/* 821606D8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606D8h case    0:*/		return 0x821606DC;
		  /* 821606DCh */ case    1:  		/* bl 786876 */
		/* 821606DCh case    1:*/		regs.LR = 0x821606E0; return 0x82220898;
		/* 821606DCh case    1:*/		return 0x821606E0;
		  /* 821606E0h */ case    2:  		/* lwz R3, <#[R30]> */
		/* 821606E0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606E0h case    2:*/		return 0x821606E4;
		  /* 821606E4h */ case    3:  		/* bl 787004 */
		/* 821606E4h case    3:*/		regs.LR = 0x821606E8; return 0x82220920;
		/* 821606E4h case    3:*/		return 0x821606E8;
		  /* 821606E8h */ case    4:  		/* lwz R3, <#[R30]> */
		/* 821606E8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606E8h case    4:*/		return 0x821606EC;
		  /* 821606ECh */ case    5:  		/* bl 783596 */
		/* 821606ECh case    5:*/		regs.LR = 0x821606F0; return 0x8221FBD8;
		/* 821606ECh case    5:*/		return 0x821606F0;
		  /* 821606F0h */ case    6:  		/* mr R28, R3 */
		/* 821606F0h case    6:*/		regs.R28 = regs.R3;
		/* 821606F0h case    6:*/		return 0x821606F4;
		  /* 821606F4h */ case    7:  		/* lwz R3, <#[R30]> */
		/* 821606F4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821606F4h case    7:*/		return 0x821606F8;
		  /* 821606F8h */ case    8:  		/* bl 783496 */
		/* 821606F8h case    8:*/		regs.LR = 0x821606FC; return 0x8221FB80;
		/* 821606F8h case    8:*/		return 0x821606FC;
		  /* 821606FCh */ case    9:  		/* mr R4, R3 */
		/* 821606FCh case    9:*/		regs.R4 = regs.R3;
		/* 821606FCh case    9:*/		return 0x82160700;
		  /* 82160700h */ case   10:  		/* mr R5, R28 */
		/* 82160700h case   10:*/		regs.R5 = regs.R28;
		/* 82160700h case   10:*/		return 0x82160704;
		  /* 82160704h */ case   11:  		/* lwz R3, <#[R31 + 20]> */
		/* 82160704h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82160704h case   11:*/		return 0x82160708;
		  /* 82160708h */ case   12:  		/* bl 707128 */
		/* 82160708h case   12:*/		regs.LR = 0x8216070C; return 0x8220D140;
		/* 82160708h case   12:*/		return 0x8216070C;
		  /* 8216070Ch */ case   13:  		/* b 116 */
		/* 8216070Ch case   13:*/		return 0x82160780;
		/* 8216070Ch case   13:*/		return 0x82160710;
	}
	return 0x82160710;
} // Block from 821606D8h-82160710h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82160710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160710);
		  /* 82160710h */ case    0:  		/* lwz R3, <#[R31 + 40]> */
		/* 82160710h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82160710h case    0:*/		return 0x82160714;
		  /* 82160714h */ case    1:  		/* bl -7900 */
		/* 82160714h case    1:*/		regs.LR = 0x82160718; return 0x8215E838;
		/* 82160714h case    1:*/		return 0x82160718;
		  /* 82160718h */ case    2:  		/* lwz R3, <#[R31 + 44]> */
		/* 82160718h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82160718h case    2:*/		return 0x8216071C;
		  /* 8216071Ch */ case    3:  		/* bl -7908 */
		/* 8216071Ch case    3:*/		regs.LR = 0x82160720; return 0x8215E838;
		/* 8216071Ch case    3:*/		return 0x82160720;
		  /* 82160720h */ case    4:  		/* lwz R3, <#[R30]> */
		/* 82160720h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160720h case    4:*/		return 0x82160724;
		  /* 82160724h */ case    5:  		/* lwz R28, <#[R31 + 40]> */
		/* 82160724h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000028) );
		/* 82160724h case    5:*/		return 0x82160728;
		  /* 82160728h */ case    6:  		/* bl 783536 */
		/* 82160728h case    6:*/		regs.LR = 0x8216072C; return 0x8221FBD8;
		/* 82160728h case    6:*/		return 0x8216072C;
		  /* 8216072Ch */ case    7:  		/* mr R4, R28 */
		/* 8216072Ch case    7:*/		regs.R4 = regs.R28;
		/* 8216072Ch case    7:*/		return 0x82160730;
		  /* 82160730h */ case    8:  		/* bl -12496 */
		/* 82160730h case    8:*/		regs.LR = 0x82160734; return 0x8215D660;
		/* 82160730h case    8:*/		return 0x82160734;
		  /* 82160734h */ case    9:  		/* lwz R3, <#[R30]> */
		/* 82160734h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160734h case    9:*/		return 0x82160738;
		  /* 82160738h */ case   10:  		/* lwz R28, <#[R31 + 44]> */
		/* 82160738h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000002C) );
		/* 82160738h case   10:*/		return 0x8216073C;
		  /* 8216073Ch */ case   11:  		/* bl 783428 */
		/* 8216073Ch case   11:*/		regs.LR = 0x82160740; return 0x8221FB80;
		/* 8216073Ch case   11:*/		return 0x82160740;
		  /* 82160740h */ case   12:  		/* mr R4, R28 */
		/* 82160740h case   12:*/		regs.R4 = regs.R28;
		/* 82160740h case   12:*/		return 0x82160744;
		  /* 82160744h */ case   13:  		/* bl -12516 */
		/* 82160744h case   13:*/		regs.LR = 0x82160748; return 0x8215D660;
		/* 82160744h case   13:*/		return 0x82160748;
		  /* 82160748h */ case   14:  		/* mr R4, R29 */
		/* 82160748h case   14:*/		regs.R4 = regs.R29;
		/* 82160748h case   14:*/		return 0x8216074C;
		  /* 8216074Ch */ case   15:  		/* lwz R5, <#[R30]> */
		/* 8216074Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 8216074Ch case   15:*/		return 0x82160750;
		  /* 82160750h */ case   16:  		/* lwz R3, <#[R31 + 24]> */
		/* 82160750h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 82160750h case   16:*/		return 0x82160754;
		  /* 82160754h */ case   17:  		/* bl 767988 */
		/* 82160754h case   17:*/		regs.LR = 0x82160758; return 0x8221BF48;
		/* 82160754h case   17:*/		return 0x82160758;
		  /* 82160758h */ case   18:  		/* lwz R3, <#[R30]> */
		/* 82160758h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160758h case   18:*/		return 0x8216075C;
		  /* 8216075Ch */ case   19:  		/* bl 783484 */
		/* 8216075Ch case   19:*/		regs.LR = 0x82160760; return 0x8221FBD8;
		/* 8216075Ch case   19:*/		return 0x82160760;
		  /* 82160760h */ case   20:  		/* bl -9440 */
		/* 82160760h case   20:*/		regs.LR = 0x82160764; return 0x8215E280;
		/* 82160760h case   20:*/		return 0x82160764;
		  /* 82160764h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 82160764h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82160764h case   21:*/		return 0x82160768;
		  /* 82160768h */ case   22:  		/* bc 4, CR0_EQ, 40 */
		/* 82160768h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82160790;  }
		/* 82160768h case   22:*/		return 0x8216076C;
		  /* 8216076Ch */ case   23:  		/* lwz R3, <#[R30]> */
		/* 8216076Ch case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8216076Ch case   23:*/		return 0x82160770;
		  /* 82160770h */ case   24:  		/* bl 783376 */
		/* 82160770h case   24:*/		regs.LR = 0x82160774; return 0x8221FB80;
		/* 82160770h case   24:*/		return 0x82160774;
		  /* 82160774h */ case   25:  		/* bl -9460 */
		/* 82160774h case   25:*/		regs.LR = 0x82160778; return 0x8215E280;
		/* 82160774h case   25:*/		return 0x82160778;
		  /* 82160778h */ case   26:  		/* cmpwi CR0, R3, 0 */
		/* 82160778h case   26:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82160778h case   26:*/		return 0x8216077C;
		  /* 8216077Ch */ case   27:  		/* bc 4, CR0_EQ, 20 */
		/* 8216077Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x82160790;  }
		/* 8216077Ch case   27:*/		return 0x82160780;
	}
	return 0x82160780;
} // Block from 82160710h-82160780h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82160780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160780);
		  /* 82160780h */ case    0:  		/* mr R4, R29 */
		/* 82160780h case    0:*/		regs.R4 = regs.R29;
		/* 82160780h case    0:*/		return 0x82160784;
		  /* 82160784h */ case    1:  		/* lwz R3, <#[R30]> */
		/* 82160784h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82160784h case    1:*/		return 0x82160788;
		  /* 82160788h */ case    2:  		/* bl 779392 */
		/* 82160788h case    2:*/		regs.LR = 0x8216078C; return 0x8221EC08;
		/* 82160788h case    2:*/		return 0x8216078C;
		  /* 8216078Ch */ case    3:  		/* li R3, 0 */
		/* 8216078Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8216078Ch case    3:*/		return 0x82160790;
	}
	return 0x82160790;
} // Block from 82160780h-82160790h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82160790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160790);
		  /* 82160790h */ case    0:  		/* addi R1, R1, 160 */
		/* 82160790h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82160790h case    0:*/		return 0x82160794;
		  /* 82160794h */ case    1:  		/* b -849152 */
		/* 82160794h case    1:*/		return 0x82091294;
		/* 82160794h case    1:*/		return 0x82160798;
	}
	return 0x82160798;
} // Block from 82160790h-82160798h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82160798h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160798);
		  /* 82160798h */ case    0:  		/* mfspr R12, LR */
		/* 82160798h case    0:*/		regs.R12 = regs.LR;
		/* 82160798h case    0:*/		return 0x8216079C;
		  /* 8216079Ch */ case    1:  		/* bl -849232 */
		/* 8216079Ch case    1:*/		regs.LR = 0x821607A0; return 0x8209124C;
		/* 8216079Ch case    1:*/		return 0x821607A0;
		  /* 821607A0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821607A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821607A0h case    2:*/		return 0x821607A4;
		  /* 821607A4h */ case    3:  		/* mr R29, R4 */
		/* 821607A4h case    3:*/		regs.R29 = regs.R4;
		/* 821607A4h case    3:*/		return 0x821607A8;
		  /* 821607A8h */ case    4:  		/* li R4, 0 */
		/* 821607A8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821607A8h case    4:*/		return 0x821607AC;
		  /* 821607ACh */ case    5:  		/* mr R31, R3 */
		/* 821607ACh case    5:*/		regs.R31 = regs.R3;
		/* 821607ACh case    5:*/		return 0x821607B0;
		  /* 821607B0h */ case    6:  		/* lwz R3, <#[R3 + 12]> */
		/* 821607B0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 821607B0h case    6:*/		return 0x821607B4;
		  /* 821607B4h */ case    7:  		/* mr R28, R5 */
		/* 821607B4h case    7:*/		regs.R28 = regs.R5;
		/* 821607B4h case    7:*/		return 0x821607B8;
		  /* 821607B8h */ case    8:  		/* mr R27, R6 */
		/* 821607B8h case    8:*/		regs.R27 = regs.R6;
		/* 821607B8h case    8:*/		return 0x821607BC;
		  /* 821607BCh */ case    9:  		/* mr R25, R7 */
		/* 821607BCh case    9:*/		regs.R25 = regs.R7;
		/* 821607BCh case    9:*/		return 0x821607C0;
		  /* 821607C0h */ case   10:  		/* mr R26, R8 */
		/* 821607C0h case   10:*/		regs.R26 = regs.R8;
		/* 821607C0h case   10:*/		return 0x821607C4;
		  /* 821607C4h */ case   11:  		/* bl 709652 */
		/* 821607C4h case   11:*/		regs.LR = 0x821607C8; return 0x8220DBD8;
		/* 821607C4h case   11:*/		return 0x821607C8;
		  /* 821607C8h */ case   12:  		/* or. R30, R3, R3 */
		/* 821607C8h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821607C8h case   12:*/		return 0x821607CC;
		  /* 821607CCh */ case   13:  		/* bc 4, CR0_EQ, 48 */
		/* 821607CCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x821607FC;  }
		/* 821607CCh case   13:*/		return 0x821607D0;
		  /* 821607D0h */ case   14:  		/* lis R11, -32252 */
		/* 821607D0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821607D0h case   14:*/		return 0x821607D4;
		  /* 821607D4h */ case   15:  		/* lis R10, -32252 */
		/* 821607D4h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821607D4h case   15:*/		return 0x821607D8;
		  /* 821607D8h */ case   16:  		/* lis R9, -32253 */
		/* 821607D8h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821607D8h case   16:*/		return 0x821607DC;
		  /* 821607DCh */ case   17:  		/* addi R6, R11, -18440 */
		/* 821607DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7F8);
		/* 821607DCh case   17:*/		return 0x821607E0;
		  /* 821607E0h */ case   18:  		/* addi R5, R10, -18276 */
		/* 821607E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB89C);
		/* 821607E0h case   18:*/		return 0x821607E4;
		  /* 821607E4h */ case   19:  		/* addi R4, R9, 27460 */
		/* 821607E4h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 821607E4h case   19:*/		return 0x821607E8;
		  /* 821607E8h */ case   20:  		/* li R7, 489 */
		/* 821607E8h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x1E9);
		/* 821607E8h case   20:*/		return 0x821607EC;
		  /* 821607ECh */ case   21:  		/* li R3, 0 */
		/* 821607ECh case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821607ECh case   21:*/		return 0x821607F0;
	}
	return 0x821607F0;
} // Block from 82160798h-821607F0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821607F0h
// Function '?SS_RetrieveIL@XGRAPHICS@@YAPBXPAU_SS_SHADER_STORE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821607F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821607F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821607F0);
		  /* 821607F0h */ case    0:  		/* bl -35816 */
		/* 821607F0h case    0:*/		regs.LR = 0x821607F4; return 0x82157C08;
		/* 821607F0h case    0:*/		return 0x821607F4;
		  /* 821607F4h */ case    1:  		/* li R3, 16 */
		/* 821607F4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 821607F4h case    1:*/		return 0x821607F8;
		  /* 821607F8h */ case    2:  		/* b 140 */
		/* 821607F8h case    2:*/		return 0x82160884;
		/* 821607F8h case    2:*/		return 0x821607FC;
	}
	return 0x821607FC;
} // Block from 821607F0h-821607FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821607FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821607FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821607FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821607FC);
		  /* 821607FCh */ case    0:  		/* rlwinm R27, R27, 0, 24, 31 */
		/* 821607FCh case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R27,regs.R27);
		/* 821607FCh case    0:*/		return 0x82160800;
		  /* 82160800h */ case    1:  		/* mr R5, R28 */
		/* 82160800h case    1:*/		regs.R5 = regs.R28;
		/* 82160800h case    1:*/		return 0x82160804;
		  /* 82160804h */ case    2:  		/* addic R11, R27, -1 */
		/* 82160804h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82160804h case    2:*/		return 0x82160808;
		  /* 82160808h */ case    3:  		/* mr R3, R29 */
		/* 82160808h case    3:*/		regs.R3 = regs.R29;
		/* 82160808h case    3:*/		return 0x8216080C;
		  /* 8216080Ch */ case    4:  		/* subfe R4, R11, R27 */
		/* 8216080Ch case    4:*/		cpu::op::subfe<0>(regs,&regs.R4,regs.R11,regs.R27);
		/* 8216080Ch case    4:*/		return 0x82160810;
		  /* 82160810h */ case    5:  		/* bl -81208 */
		/* 82160810h case    5:*/		regs.LR = 0x82160814; return 0x8214CAD8;
		/* 82160810h case    5:*/		return 0x82160814;
		  /* 82160814h */ case    6:  		/* lwz R3, <#[R31 + 40]> */
		/* 82160814h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 82160814h case    6:*/		return 0x82160818;
		  /* 82160818h */ case    7:  		/* bl -8160 */
		/* 82160818h case    7:*/		regs.LR = 0x8216081C; return 0x8215E838;
		/* 82160818h case    7:*/		return 0x8216081C;
		  /* 8216081Ch */ case    8:  		/* lwz R3, <#[R31 + 44]> */
		/* 8216081Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8216081Ch case    8:*/		return 0x82160820;
		  /* 82160820h */ case    9:  		/* bl -8168 */
		/* 82160820h case    9:*/		regs.LR = 0x82160824; return 0x8215E838;
		/* 82160820h case    9:*/		return 0x82160824;
		  /* 82160824h */ case   10:  		/* mr R3, R30 */
		/* 82160824h case   10:*/		regs.R3 = regs.R30;
		/* 82160824h case   10:*/		return 0x82160828;
		  /* 82160828h */ case   11:  		/* lwz R28, <#[R31 + 40]> */
		/* 82160828h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000028) );
		/* 82160828h case   11:*/		return 0x8216082C;
		  /* 8216082Ch */ case   12:  		/* bl 783276 */
		/* 8216082Ch case   12:*/		regs.LR = 0x82160830; return 0x8221FBD8;
		/* 8216082Ch case   12:*/		return 0x82160830;
		  /* 82160830h */ case   13:  		/* mr R4, R28 */
		/* 82160830h case   13:*/		regs.R4 = regs.R28;
		/* 82160830h case   13:*/		return 0x82160834;
		  /* 82160834h */ case   14:  		/* bl -12756 */
		/* 82160834h case   14:*/		regs.LR = 0x82160838; return 0x8215D660;
		/* 82160834h case   14:*/		return 0x82160838;
		  /* 82160838h */ case   15:  		/* mr R3, R30 */
		/* 82160838h case   15:*/		regs.R3 = regs.R30;
		/* 82160838h case   15:*/		return 0x8216083C;
		  /* 8216083Ch */ case   16:  		/* lwz R28, <#[R31 + 44]> */
		/* 8216083Ch case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000002C) );
		/* 8216083Ch case   16:*/		return 0x82160840;
		  /* 82160840h */ case   17:  		/* bl 783168 */
		/* 82160840h case   17:*/		regs.LR = 0x82160844; return 0x8221FB80;
		/* 82160840h case   17:*/		return 0x82160844;
		  /* 82160844h */ case   18:  		/* mr R4, R28 */
		/* 82160844h case   18:*/		regs.R4 = regs.R28;
		/* 82160844h case   18:*/		return 0x82160848;
		  /* 82160848h */ case   19:  		/* bl -12776 */
		/* 82160848h case   19:*/		regs.LR = 0x8216084C; return 0x8215D660;
		/* 82160848h case   19:*/		return 0x8216084C;
		  /* 8216084Ch */ case   20:  		/* mr R6, R26 */
		/* 8216084Ch case   20:*/		regs.R6 = regs.R26;
		/* 8216084Ch case   20:*/		return 0x82160850;
		  /* 82160850h */ case   21:  		/* mr R5, R30 */
		/* 82160850h case   21:*/		regs.R5 = regs.R30;
		/* 82160850h case   21:*/		return 0x82160854;
		  /* 82160854h */ case   22:  		/* lwz R3, <#[R31 + 24]> */
		/* 82160854h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000018) );
		/* 82160854h case   22:*/		return 0x82160858;
		  /* 82160858h */ case   23:  		/* mr R4, R29 */
		/* 82160858h case   23:*/		regs.R4 = regs.R29;
		/* 82160858h case   23:*/		return 0x8216085C;
		  /* 8216085Ch */ case   24:  		/* bl 768356 */
		/* 8216085Ch case   24:*/		regs.LR = 0x82160860; return 0x8221C1C0;
		/* 8216085Ch case   24:*/		return 0x82160860;
		  /* 82160860h */ case   25:  		/* cmplwi CR6, R27, 0 */
		/* 82160860h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82160860h case   25:*/		return 0x82160864;
		  /* 82160864h */ case   26:  		/* mr R3, R30 */
		/* 82160864h case   26:*/		regs.R3 = regs.R30;
		/* 82160864h case   26:*/		return 0x82160868;
		  /* 82160868h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 82160868h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82160874;  }
		/* 82160868h case   27:*/		return 0x8216086C;
		  /* 8216086Ch */ case   28:  		/* bl 783212 */
		/* 8216086Ch case   28:*/		regs.LR = 0x82160870; return 0x8221FBD8;
		/* 8216086Ch case   28:*/		return 0x82160870;
	}
	return 0x82160870;
} // Block from 821607FCh-82160870h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82160870h
// Function '?SS_StoreCS@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_SS_SHADER_STORE@1@IPAU_CS_COMPILED_SHADER@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160870);
		  /* 82160870h */ case    0:  		/* b 8 */
		/* 82160870h case    0:*/		return 0x82160878;
		/* 82160870h case    0:*/		return 0x82160874;
	}
	return 0x82160874;
} // Block from 82160870h-82160874h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82160874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160874);
		  /* 82160874h */ case    0:  		/* bl 783116 */
		/* 82160874h case    0:*/		regs.LR = 0x82160878; return 0x8221FB80;
		/* 82160874h case    0:*/		return 0x82160878;
	}
	return 0x82160878;
} // Block from 82160874h-82160878h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82160878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160878);
		  /* 82160878h */ case    0:  		/* stw R3, <#[R25]> */
		/* 82160878h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 82160878h case    0:*/		return 0x8216087C;
		  /* 8216087Ch */ case    1:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 8216087Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 8216087Ch case    1:*/		return 0x82160880;
		  /* 82160880h */ case    2:  		/* bl -9728 */
		/* 82160880h case    2:*/		regs.LR = 0x82160884; return 0x8215E280;
		/* 82160880h case    2:*/		return 0x82160884;
	}
	return 0x82160884;
} // Block from 82160878h-82160884h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82160884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160884);
		  /* 82160884h */ case    0:  		/* addi R1, R1, 144 */
		/* 82160884h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82160884h case    0:*/		return 0x82160888;
		  /* 82160888h */ case    1:  		/* b -849388 */
		/* 82160888h case    1:*/		return 0x8209129C;
		/* 82160888h case    1:*/		return 0x8216088C;
		  /* 8216088Ch */ case    2:  		/* nop */
		/* 8216088Ch case    2:*/		cpu::op::nop();
		/* 8216088Ch case    2:*/		return 0x82160890;
	}
	return 0x82160890;
} // Block from 82160884h-82160890h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82160890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160890);
		  /* 82160890h */ case    0:  		/* mfspr R12, LR */
		/* 82160890h case    0:*/		regs.R12 = regs.LR;
		/* 82160890h case    0:*/		return 0x82160894;
		  /* 82160894h */ case    1:  		/* bl -849480 */
		/* 82160894h case    1:*/		regs.LR = 0x82160898; return 0x8209124C;
		/* 82160894h case    1:*/		return 0x82160898;
		  /* 82160898h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82160898h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82160898h case    2:*/		return 0x8216089C;
		  /* 8216089Ch */ case    3:  		/* mr R31, R3 */
		/* 8216089Ch case    3:*/		regs.R31 = regs.R3;
		/* 8216089Ch case    3:*/		return 0x821608A0;
		  /* 821608A0h */ case    4:  		/* lwz R28, <#[R3 + 32]> */
		/* 821608A0h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000020) );
		/* 821608A0h case    4:*/		return 0x821608A4;
		  /* 821608A4h */ case    5:  		/* mr R27, R4 */
		/* 821608A4h case    5:*/		regs.R27 = regs.R4;
		/* 821608A4h case    5:*/		return 0x821608A8;
		  /* 821608A8h */ case    6:  		/* li R4, 1 */
		/* 821608A8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821608A8h case    6:*/		return 0x821608AC;
		  /* 821608ACh */ case    7:  		/* mr R3, R27 */
		/* 821608ACh case    7:*/		regs.R3 = regs.R27;
		/* 821608ACh case    7:*/		return 0x821608B0;
		  /* 821608B0h */ case    8:  		/* mr R25, R5 */
		/* 821608B0h case    8:*/		regs.R25 = regs.R5;
		/* 821608B0h case    8:*/		return 0x821608B4;
		  /* 821608B4h */ case    9:  		/* lwz R30, <#[R31 + 16]> */
		/* 821608B4h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821608B4h case    9:*/		return 0x821608B8;
		  /* 821608B8h */ case   10:  		/* bl -13224 */
		/* 821608B8h case   10:*/		regs.LR = 0x821608BC; return 0x8215D510;
		/* 821608B8h case   10:*/		return 0x821608BC;
		  /* 821608BCh */ case   11:  		/* mr R29, R3 */
		/* 821608BCh case   11:*/		regs.R29 = regs.R3;
		/* 821608BCh case   11:*/		return 0x821608C0;
		  /* 821608C0h */ case   12:  		/* mr R3, R30 */
		/* 821608C0h case   12:*/		regs.R3 = regs.R30;
		/* 821608C0h case   12:*/		return 0x821608C4;
		  /* 821608C4h */ case   13:  		/* mr R4, R29 */
		/* 821608C4h case   13:*/		regs.R4 = regs.R29;
		/* 821608C4h case   13:*/		return 0x821608C8;
		  /* 821608C8h */ case   14:  		/* bl -2800 */
		/* 821608C8h case   14:*/		regs.LR = 0x821608CC; return 0x8215FDD8;
		/* 821608C8h case   14:*/		return 0x821608CC;
		  /* 821608CCh */ case   15:  		/* or. R26, R3, R3 */
		/* 821608CCh case   15:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 821608CCh case   15:*/		return 0x821608D0;
		  /* 821608D0h */ case   16:  		/* bc 4, CR0_EQ, 48 */
		/* 821608D0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82160900;  }
		/* 821608D0h case   16:*/		return 0x821608D4;
		  /* 821608D4h */ case   17:  		/* lis R11, -32252 */
		/* 821608D4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821608D4h case   17:*/		return 0x821608D8;
		  /* 821608D8h */ case   18:  		/* lis R10, -32252 */
		/* 821608D8h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821608D8h case   18:*/		return 0x821608DC;
		  /* 821608DCh */ case   19:  		/* lis R9, -32253 */
		/* 821608DCh case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821608DCh case   19:*/		return 0x821608E0;
		  /* 821608E0h */ case   20:  		/* addi R6, R11, -18440 */
		/* 821608E0h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7F8);
		/* 821608E0h case   20:*/		return 0x821608E4;
		  /* 821608E4h */ case   21:  		/* addi R5, R10, -18228 */
		/* 821608E4h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB8CC);
		/* 821608E4h case   21:*/		return 0x821608E8;
		  /* 821608E8h */ case   22:  		/* addi R4, R9, 27460 */
		/* 821608E8h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 821608E8h case   22:*/		return 0x821608EC;
		  /* 821608ECh */ case   23:  		/* li R7, 562 */
		/* 821608ECh case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x232);
		/* 821608ECh case   23:*/		return 0x821608F0;
		  /* 821608F0h */ case   24:  		/* li R3, 0 */
		/* 821608F0h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821608F0h case   24:*/		return 0x821608F4;
		  /* 821608F4h */ case   25:  		/* bl -36076 */
		/* 821608F4h case   25:*/		regs.LR = 0x821608F8; return 0x82157C08;
		/* 821608F4h case   25:*/		return 0x821608F8;
		  /* 821608F8h */ case   26:  		/* li R3, 19 */
		/* 821608F8h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 821608F8h case   26:*/		return 0x821608FC;
		  /* 821608FCh */ case   27:  		/* b 184 */
		/* 821608FCh case   27:*/		return 0x821609B4;
		/* 821608FCh case   27:*/		return 0x82160900;
	}
	return 0x82160900;
} // Block from 82160890h-82160900h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82160900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160900);
		  /* 82160900h */ case    0:  		/* li R4, 2 */
		/* 82160900h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82160900h case    0:*/		return 0x82160904;
		  /* 82160904h */ case    1:  		/* lwz R3, <#[R31 + 12]> */
		/* 82160904h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82160904h case    1:*/		return 0x82160908;
		  /* 82160908h */ case    2:  		/* bl 709328 */
		/* 82160908h case    2:*/		regs.LR = 0x8216090C; return 0x8220DBD8;
		/* 82160908h case    2:*/		return 0x8216090C;
		  /* 8216090Ch */ case    3:  		/* stw R3, <#[R25]> */
		/* 8216090Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 8216090Ch case    3:*/		return 0x82160910;
		  /* 82160910h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 82160910h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82160910h case    4:*/		return 0x82160914;
		  /* 82160914h */ case    5:  		/* bc 4, CR0_EQ, 44 */
		/* 82160914h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82160940;  }
		/* 82160914h case    5:*/		return 0x82160918;
		  /* 82160918h */ case    6:  		/* lis R11, -32252 */
		/* 82160918h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160918h case    6:*/		return 0x8216091C;
		  /* 8216091Ch */ case    7:  		/* lis R10, -32252 */
		/* 8216091Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8216091Ch case    7:*/		return 0x82160920;
		  /* 82160920h */ case    8:  		/* lis R9, -32253 */
		/* 82160920h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82160920h case    8:*/		return 0x82160924;
		  /* 82160924h */ case    9:  		/* addi R6, R11, -18440 */
		/* 82160924h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFB7F8);
		/* 82160924h case    9:*/		return 0x82160928;
		  /* 82160928h */ case   10:  		/* addi R5, R10, -18276 */
		/* 82160928h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFB89C);
		/* 82160928h case   10:*/		return 0x8216092C;
		  /* 8216092Ch */ case   11:  		/* addi R4, R9, 27460 */
		/* 8216092Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8216092Ch case   11:*/		return 0x82160930;
		  /* 82160930h */ case   12:  		/* li R7, 573 */
		/* 82160930h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x23D);
		/* 82160930h case   12:*/		return 0x82160934;
		  /* 82160934h */ case   13:  		/* bl -36140 */
		/* 82160934h case   13:*/		regs.LR = 0x82160938; return 0x82157C08;
		/* 82160934h case   13:*/		return 0x82160938;
		  /* 82160938h */ case   14:  		/* li R3, 16 */
		/* 82160938h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x10);
		/* 82160938h case   14:*/		return 0x8216093C;
		  /* 8216093Ch */ case   15:  		/* b 120 */
		/* 8216093Ch case   15:*/		return 0x821609B4;
		/* 8216093Ch case   15:*/		return 0x82160940;
	}
	return 0x82160940;
} // Block from 82160900h-82160940h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82160940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160940);
		  /* 82160940h */ case    0:  		/* bl 782912 */
		/* 82160940h case    0:*/		regs.LR = 0x82160944; return 0x8221FB80;
		/* 82160940h case    0:*/		return 0x82160944;
		  /* 82160944h */ case    1:  		/* mr R4, R29 */
		/* 82160944h case    1:*/		regs.R4 = regs.R29;
		/* 82160944h case    1:*/		return 0x82160948;
		  /* 82160948h */ case    2:  		/* mr R30, R3 */
		/* 82160948h case    2:*/		regs.R30 = regs.R3;
		/* 82160948h case    2:*/		return 0x8216094C;
		  /* 8216094Ch */ case    3:  		/* bl -13220 */
		/* 8216094Ch case    3:*/		regs.LR = 0x82160950; return 0x8215D5A8;
		/* 8216094Ch case    3:*/		return 0x82160950;
	}
	return 0x82160950;
} // Block from 82160940h-82160950h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82160950h
// Function '?SS_RetrieveCS@XGRAPHICS@@YAPAU_OBJECT_LIST@1@PAU_SS_SHADER_STORE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160950);
		  /* 82160950h */ case    0:  		/* lwz R3, <#[R31 + 44]> */
		/* 82160950h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82160950h case    0:*/		return 0x82160954;
		  /* 82160954h */ case    1:  		/* bl -8476 */
		/* 82160954h case    1:*/		regs.LR = 0x82160958; return 0x8215E838;
		/* 82160954h case    1:*/		return 0x82160958;
		  /* 82160958h */ case    2:  		/* mr R3, R30 */
		/* 82160958h case    2:*/		regs.R3 = regs.R30;
		/* 82160958h case    2:*/		return 0x8216095C;
		  /* 8216095Ch */ case    3:  		/* lwz R4, <#[R31 + 44]> */
		/* 8216095Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 8216095Ch case    3:*/		return 0x82160960;
		  /* 82160960h */ case    4:  		/* bl -13056 */
		/* 82160960h case    4:*/		regs.LR = 0x82160964; return 0x8215D660;
		/* 82160960h case    4:*/		return 0x82160964;
		  /* 82160964h */ case    5:  		/* lis R11, -32252 */
		/* 82160964h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160964h case    5:*/		return 0x82160968;
		  /* 82160968h */ case    6:  		/* mr R5, R29 */
		/* 82160968h case    6:*/		regs.R5 = regs.R29;
		/* 82160968h case    6:*/		return 0x8216096C;
		  /* 8216096Ch */ case    7:  		/* addi R4, R11, -18304 */
		/* 8216096Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFB880);
		/* 8216096Ch case    7:*/		return 0x82160970;
		  /* 82160970h */ case    8:  		/* mr R3, R28 */
		/* 82160970h case    8:*/		regs.R3 = regs.R28;
		/* 82160970h case    8:*/		return 0x82160974;
		  /* 82160974h */ case    9:  		/* bl 772684 */
		/* 82160974h case    9:*/		regs.LR = 0x82160978; return 0x8221D3C0;
		/* 82160974h case    9:*/		return 0x82160978;
		  /* 82160978h */ case   10:  		/* mr R6, R27 */
		/* 82160978h case   10:*/		regs.R6 = regs.R27;
		/* 82160978h case   10:*/		return 0x8216097C;
		  /* 8216097Ch */ case   11:  		/* mr R5, R26 */
		/* 8216097Ch case   11:*/		regs.R5 = regs.R26;
		/* 8216097Ch case   11:*/		return 0x82160980;
		  /* 82160980h */ case   12:  		/* mr R4, R30 */
		/* 82160980h case   12:*/		regs.R4 = regs.R30;
		/* 82160980h case   12:*/		return 0x82160984;
		  /* 82160984h */ case   13:  		/* mr R3, R28 */
		/* 82160984h case   13:*/		regs.R3 = regs.R28;
		/* 82160984h case   13:*/		return 0x82160988;
		  /* 82160988h */ case   14:  		/* bl 776096 */
		/* 82160988h case   14:*/		regs.LR = 0x8216098C; return 0x8221E128;
		/* 82160988h case   14:*/		return 0x8216098C;
		  /* 8216098Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8216098Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8216098Ch case   15:*/		return 0x82160990;
		  /* 82160990h */ case   16:  		/* bc 4, CR0_EQ, 36 */
		/* 82160990h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821609B4;  }
		/* 82160990h case   16:*/		return 0x82160994;
		  /* 82160994h */ case   17:  		/* mr R3, R30 */
		/* 82160994h case   17:*/		regs.R3 = regs.R30;
		/* 82160994h case   17:*/		return 0x82160998;
		  /* 82160998h */ case   18:  		/* bl -10008 */
		/* 82160998h case   18:*/		regs.LR = 0x8216099C; return 0x8215E280;
		/* 82160998h case   18:*/		return 0x8216099C;
		  /* 8216099Ch */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 8216099Ch case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8216099Ch case   19:*/		return 0x821609A0;
		  /* 821609A0h */ case   20:  		/* bc 4, CR0_EQ, 20 */
		/* 821609A0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821609B4;  }
		/* 821609A0h case   20:*/		return 0x821609A4;
		  /* 821609A4h */ case   21:  		/* mr R4, R27 */
		/* 821609A4h case   21:*/		regs.R4 = regs.R27;
		/* 821609A4h case   21:*/		return 0x821609A8;
		  /* 821609A8h */ case   22:  		/* lwz R3, <#[R25]> */
		/* 821609A8h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 821609A8h case   22:*/		return 0x821609AC;
		  /* 821609ACh */ case   23:  		/* bl 778844 */
		/* 821609ACh case   23:*/		regs.LR = 0x821609B0; return 0x8221EC08;
		/* 821609ACh case   23:*/		return 0x821609B0;
		  /* 821609B0h */ case   24:  		/* li R3, 0 */
		/* 821609B0h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821609B0h case   24:*/		return 0x821609B4;
	}
	return 0x821609B4;
} // Block from 82160950h-821609B4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821609B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821609B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821609B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821609B4);
		  /* 821609B4h */ case    0:  		/* addi R1, R1, 144 */
		/* 821609B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821609B4h case    0:*/		return 0x821609B8;
		  /* 821609B8h */ case    1:  		/* b -849692 */
		/* 821609B8h case    1:*/		return 0x8209129C;
		/* 821609B8h case    1:*/		return 0x821609BC;
		  /* 821609BCh */ case    2:  		/* nop */
		/* 821609BCh case    2:*/		cpu::op::nop();
		/* 821609BCh case    2:*/		return 0x821609C0;
	}
	return 0x821609C0;
} // Block from 821609B4h-821609C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821609C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821609C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821609C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821609C0);
		  /* 821609C0h */ case    0:  		/* mfspr R12, LR */
		/* 821609C0h case    0:*/		regs.R12 = regs.LR;
		/* 821609C0h case    0:*/		return 0x821609C4;
		  /* 821609C4h */ case    1:  		/* bl -849792 */
		/* 821609C4h case    1:*/		regs.LR = 0x821609C8; return 0x82091244;
		/* 821609C4h case    1:*/		return 0x821609C8;
		  /* 821609C8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821609C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821609C8h case    2:*/		return 0x821609CC;
		  /* 821609CCh */ case    3:  		/* lis R11, -32253 */
		/* 821609CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821609CCh case    3:*/		return 0x821609D0;
	}
	return 0x821609D0;
} // Block from 821609C0h-821609D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821609D0h
// Function '?CreateSSItem@XGRAPHICS@@YAPAU_SS_SHADER_STORE_ITEM@1@PAU_SS_SHADER_STORE@1@PAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821609D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821609D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821609D0);
		  /* 821609D0h */ case    0:  		/* lis R10, -32252 */
		/* 821609D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821609D0h case    0:*/		return 0x821609D4;
		  /* 821609D4h */ case    1:  		/* mr R31, R3 */
		/* 821609D4h case    1:*/		regs.R31 = regs.R3;
		/* 821609D4h case    1:*/		return 0x821609D8;
		  /* 821609D8h */ case    2:  		/* mr R28, R4 */
		/* 821609D8h case    2:*/		regs.R28 = regs.R4;
		/* 821609D8h case    2:*/		return 0x821609DC;
		  /* 821609DCh */ case    3:  		/* mr R26, R5 */
		/* 821609DCh case    3:*/		regs.R26 = regs.R5;
		/* 821609DCh case    3:*/		return 0x821609E0;
		  /* 821609E0h */ case    4:  		/* mr R27, R6 */
		/* 821609E0h case    4:*/		regs.R27 = regs.R6;
		/* 821609E0h case    4:*/		return 0x821609E4;
		  /* 821609E4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 821609E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821609E4h case    5:*/		return 0x821609E8;
		  /* 821609E8h */ case    6:  		/* addi R24, R11, 27460 */
		/* 821609E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 821609E8h case    6:*/		return 0x821609EC;
		  /* 821609ECh */ case    7:  		/* addi R23, R10, -18440 */
		/* 821609ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFB7F8);
		/* 821609ECh case    7:*/		return 0x821609F0;
		  /* 821609F0h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 821609F0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82160A10;  }
		/* 821609F0h case    8:*/		return 0x821609F4;
		  /* 821609F4h */ case    9:  		/* lis R11, -32252 */
		/* 821609F4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821609F4h case    9:*/		return 0x821609F8;
		  /* 821609F8h */ case   10:  		/* mr R6, R23 */
		/* 821609F8h case   10:*/		regs.R6 = regs.R23;
		/* 821609F8h case   10:*/		return 0x821609FC;
		  /* 821609FCh */ case   11:  		/* addi R5, R11, -18460 */
		/* 821609FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB7E4);
		/* 821609FCh case   11:*/		return 0x82160A00;
		  /* 82160A00h */ case   12:  		/* mr R4, R24 */
		/* 82160A00h case   12:*/		regs.R4 = regs.R24;
		/* 82160A00h case   12:*/		return 0x82160A04;
		  /* 82160A04h */ case   13:  		/* li R7, 642 */
		/* 82160A04h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x282);
		/* 82160A04h case   13:*/		return 0x82160A08;
		  /* 82160A08h */ case   14:  		/* li R3, 0 */
		/* 82160A08h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160A08h case   14:*/		return 0x82160A0C;
		  /* 82160A0Ch */ case   15:  		/* bl -36356 */
		/* 82160A0Ch case   15:*/		regs.LR = 0x82160A10; return 0x82157C08;
		/* 82160A0Ch case   15:*/		return 0x82160A10;
	}
	return 0x82160A10;
} // Block from 821609D0h-82160A10h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82160A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160A10);
		  /* 82160A10h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82160A10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82160A10h case    0:*/		return 0x82160A14;
		  /* 82160A14h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82160A14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82160A34;  }
		/* 82160A14h case    1:*/		return 0x82160A18;
		  /* 82160A18h */ case    2:  		/* lis R11, -32252 */
		/* 82160A18h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160A18h case    2:*/		return 0x82160A1C;
		  /* 82160A1Ch */ case    3:  		/* mr R6, R23 */
		/* 82160A1Ch case    3:*/		regs.R6 = regs.R23;
		/* 82160A1Ch case    3:*/		return 0x82160A20;
		  /* 82160A20h */ case    4:  		/* addi R5, R11, -18196 */
		/* 82160A20h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB8EC);
		/* 82160A20h case    4:*/		return 0x82160A24;
		  /* 82160A24h */ case    5:  		/* mr R4, R24 */
		/* 82160A24h case    5:*/		regs.R4 = regs.R24;
		/* 82160A24h case    5:*/		return 0x82160A28;
		  /* 82160A28h */ case    6:  		/* li R7, 643 */
		/* 82160A28h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x283);
		/* 82160A28h case    6:*/		return 0x82160A2C;
		  /* 82160A2Ch */ case    7:  		/* li R3, 0 */
		/* 82160A2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160A2Ch case    7:*/		return 0x82160A30;
		  /* 82160A30h */ case    8:  		/* bl -36392 */
		/* 82160A30h case    8:*/		regs.LR = 0x82160A34; return 0x82157C08;
		/* 82160A30h case    8:*/		return 0x82160A34;
	}
	return 0x82160A34;
} // Block from 82160A10h-82160A34h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82160A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82160A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82160A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82160A34);
		  /* 82160A34h */ case    0:  		/* mr R4, R28 */
		/* 82160A34h case    0:*/		regs.R4 = regs.R28;
		/* 82160A34h case    0:*/		return 0x82160A38;
		  /* 82160A38h */ case    1:  		/* lwz R3, <#[R31 + 16]> */
		/* 82160A38h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82160A38h case    1:*/		return 0x82160A3C;
		  /* 82160A3Ch */ case    2:  		/* lwz R30, <#[R31 + 32]> */
		/* 82160A3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000020) );
		/* 82160A3Ch case    2:*/		return 0x82160A40;
		  /* 82160A40h */ case    3:  		/* li R25, 0 */
		/* 82160A40h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82160A40h case    3:*/		return 0x82160A44;
		  /* 82160A44h */ case    4:  		/* bl -3180 */
		/* 82160A44h case    4:*/		regs.LR = 0x82160A48; return 0x8215FDD8;
		/* 82160A44h case    4:*/		return 0x82160A48;
		  /* 82160A48h */ case    5:  		/* or. R29, R3, R3 */
		/* 82160A48h case    5:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82160A48h case    5:*/		return 0x82160A4C;
		  /* 82160A4Ch */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 82160A4Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x82160A74;  }
		/* 82160A4Ch case    6:*/		return 0x82160A50;
		  /* 82160A50h */ case    7:  		/* lis R11, -32252 */
		/* 82160A50h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82160A50h case    7:*/		return 0x82160A54;
		  /* 82160A54h */ case    8:  		/* mr R6, R23 */
		/* 82160A54h case    8:*/		regs.R6 = regs.R23;
		/* 82160A54h case    8:*/		return 0x82160A58;
		  /* 82160A58h */ case    9:  		/* addi R5, R11, -18148 */
		/* 82160A58h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB91C);
		/* 82160A58h case    9:*/		return 0x82160A5C;
		  /* 82160A5Ch */ case   10:  		/* mr R4, R24 */
		/* 82160A5Ch case   10:*/		regs.R4 = regs.R24;
		/* 82160A5Ch case   10:*/		return 0x82160A60;
		  /* 82160A60h */ case   11:  		/* li R7, 656 */
		/* 82160A60h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x290);
		/* 82160A60h case   11:*/		return 0x82160A64;
		  /* 82160A64h */ case   12:  		/* li R3, 0 */
		/* 82160A64h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82160A64h case   12:*/		return 0x82160A68;
		  /* 82160A68h */ case   13:  		/* bl -36448 */
		/* 82160A68h case   13:*/		regs.LR = 0x82160A6C; return 0x82157C08;
		/* 82160A68h case   13:*/		return 0x82160A6C;
		  /* 82160A6Ch */ case   14:  		/* li R3, 19 */
		/* 82160A6Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x13);
		/* 82160A6Ch case   14:*/		return 0x82160A70;
		  /* 82160A70h */ case   15:  		/* b 128 */
		/* 82160A70h case   15:*/		return 0x82160AF0;
		/* 82160A70h case   15:*/		return 0x82160A74;
	}
	return 0x82160A74;
} // Block from 82160A34h-82160A74h (16 instructions)

