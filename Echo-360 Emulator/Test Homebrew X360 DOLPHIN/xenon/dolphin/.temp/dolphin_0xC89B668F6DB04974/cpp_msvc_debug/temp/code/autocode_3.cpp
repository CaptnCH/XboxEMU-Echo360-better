#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82075580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075580);
		  /* 82075580h */ case    0:  		/* addi R1, R1, 112 */
		/* 82075580h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82075580h case    0:*/		return 0x82075584;
		  /* 82075584h */ case    1:  		/* b 113960 */
		/* 82075584h case    1:*/		return 0x820912AC;
		/* 82075584h case    1:*/		return 0x82075588;
	}
	return 0x82075588;
} // Block from 82075580h-82075588h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82075588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075588);
		  /* 82075588h */ case    0:  		/* lis R4, -23936 */
		/* 82075588h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA280);
		/* 82075588h case    0:*/		return 0x8207558C;
		  /* 8207558Ch */ case    1:  		/* li R3, 480 */
		/* 8207558Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1E0);
		/* 8207558Ch case    1:*/		return 0x82075590;
		  /* 82075590h */ case    2:  		/* bl 76912 */
		/* 82075590h case    2:*/		regs.LR = 0x82075594; return 0x82088200;
		/* 82075590h case    2:*/		return 0x82075594;
		  /* 82075594h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82075594h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82075594h case    3:*/		return 0x82075598;
		  /* 82075598h */ case    4:  		/* stw R3, <#[R31 + 4]> */
		/* 82075598h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82075598h case    4:*/		return 0x8207559C;
		  /* 8207559Ch */ case    5:  		/* bc 4, CR0_EQ, -68 */
		/* 8207559Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x82075558;  }
		/* 8207559Ch case    5:*/		return 0x820755A0;
		  /* 820755A0h */ case    6:  		/* lis R4, 9344 */
		/* 820755A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 820755A0h case    6:*/		return 0x820755A4;
		  /* 820755A4h */ case    7:  		/* mr R3, R31 */
		/* 820755A4h case    7:*/		regs.R3 = regs.R31;
		/* 820755A4h case    7:*/		return 0x820755A8;
		  /* 820755A8h */ case    8:  		/* bl 77200 */
		/* 820755A8h case    8:*/		regs.LR = 0x820755AC; return 0x82088338;
		/* 820755A8h case    8:*/		return 0x820755AC;
		  /* 820755ACh */ case    9:  		/* b -104 */
		/* 820755ACh case    9:*/		return 0x82075544;
		/* 820755ACh case    9:*/		return 0x820755B0;
	}
	return 0x820755B0;
} // Block from 82075588h-820755B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820755B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820755B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820755B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820755B0);
		  /* 820755B0h */ case    0:  		/* mfspr R12, LR */
		/* 820755B0h case    0:*/		regs.R12 = regs.LR;
		/* 820755B0h case    0:*/		return 0x820755B4;
		  /* 820755B4h */ case    1:  		/* bl 113800 */
		/* 820755B4h case    1:*/		regs.LR = 0x820755B8; return 0x8209123C;
		/* 820755B4h case    1:*/		return 0x820755B8;
		  /* 820755B8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820755B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820755B8h case    2:*/		return 0x820755BC;
		  /* 820755BCh */ case    3:  		/* mr R30, R4 */
		/* 820755BCh case    3:*/		regs.R30 = regs.R4;
		/* 820755BCh case    3:*/		return 0x820755C0;
		  /* 820755C0h */ case    4:  		/* li R4, 120 */
		/* 820755C0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x78);
		/* 820755C0h case    4:*/		return 0x820755C4;
		  /* 820755C4h */ case    5:  		/* mr R31, R3 */
		/* 820755C4h case    5:*/		regs.R31 = regs.R3;
		/* 820755C4h case    5:*/		return 0x820755C8;
		  /* 820755C8h */ case    6:  		/* bl -4744 */
		/* 820755C8h case    6:*/		regs.LR = 0x820755CC; return 0x82074340;
		/* 820755C8h case    6:*/		return 0x820755CC;
		  /* 820755CCh */ case    7:  		/* li R11, 486 */
		/* 820755CCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1E6);
		/* 820755CCh case    7:*/		return 0x820755D0;
		  /* 820755D0h */ case    8:  		/* lbz R10, <#[R30 + 3]> */
		/* 820755D0h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000003) );
		/* 820755D0h case    8:*/		return 0x820755D4;
		  /* 820755D4h */ case    9:  		/* li R9, 917 */
		/* 820755D4h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x395);
		/* 820755D4h case    9:*/		return 0x820755D8;
		  /* 820755D8h */ case   10:  		/* stwu R11, <#[R3 + 4]> */
		/* 820755D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820755D8h case   10:*/		return 0x820755DC;
		  /* 820755DCh */ case   11:  		/* li R7, 918 */
		/* 820755DCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x396);
		/* 820755DCh case   11:*/		return 0x820755E0;
		  /* 820755E0h */ case   12:  		/* rlwinm R8, R10, 0, 0, 23 */
		/* 820755E0h case   12:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R10);
		/* 820755E0h case   12:*/		return 0x820755E4;
		  /* 820755E4h */ case   13:  		/* li R11, 3528 */
		/* 820755E4h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0xDC8);
		/* 820755E4h case   13:*/		return 0x820755E8;
	}
	return 0x820755E8;
} // Block from 820755B0h-820755E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820755E8h
// Function 'D3DDevice_BlockUntilIdle'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820755E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820755E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820755E8);
		  /* 820755E8h */ case    0:  		/* li R6, 3529 */
		/* 820755E8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xDC9);
		/* 820755E8h case    0:*/		return 0x820755EC;
		  /* 820755ECh */ case    1:  		/* li R5, 3530 */
		/* 820755ECh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xDCA);
		/* 820755ECh case    1:*/		return 0x820755F0;
		  /* 820755F0h */ case    2:  		/* stwu R10, <#[R3 + 4]> */
		/* 820755F0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820755F0h case    2:*/		return 0x820755F4;
		  /* 820755F4h */ case    3:  		/* li R4, 3531 */
		/* 820755F4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDCB);
		/* 820755F4h case    3:*/		return 0x820755F8;
		  /* 820755F8h */ case    4:  		/* lbz R27, <#[R30 + 7]> */
		/* 820755F8h case    4:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000007) );
		/* 820755F8h case    4:*/		return 0x820755FC;
		  /* 820755FCh */ case    5:  		/* li R29, 3144 */
		/* 820755FCh case    5:*/		cpu::op::li<0>(regs,&regs.R29,0xC48);
		/* 820755FCh case    5:*/		return 0x82075600;
		  /* 82075600h */ case    6:  		/* li R28, 3145 */
		/* 82075600h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0xC49);
		/* 82075600h case    6:*/		return 0x82075604;
		  /* 82075604h */ case    7:  		/* or R8, R27, R8 */
		/* 82075604h case    7:*/		cpu::op::or<0>(regs,&regs.R8,regs.R27,regs.R8);
		/* 82075604h case    7:*/		return 0x82075608;
		  /* 82075608h */ case    8:  		/* li R10, 3146 */
		/* 82075608h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0xC4A);
		/* 82075608h case    8:*/		return 0x8207560C;
		  /* 8207560Ch */ case    9:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207560Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207560Ch case    9:*/		return 0x82075610;
		  /* 82075610h */ case   10:  		/* rlwinm R25, R8, 0, 0, 23 */
		/* 82075610h case   10:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R25,regs.R8);
		/* 82075610h case   10:*/		return 0x82075614;
		  /* 82075614h */ case   11:  		/* li R26, 3147 */
		/* 82075614h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0xC4B);
		/* 82075614h case   11:*/		return 0x82075618;
		  /* 82075618h */ case   12:  		/* li R27, 3656 */
		/* 82075618h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0xE48);
		/* 82075618h case   12:*/		return 0x8207561C;
		  /* 8207561Ch */ case   13:  		/* li R24, 3659 */
		/* 8207561Ch case   13:*/		cpu::op::li<0>(regs,&regs.R24,0xE4B);
		/* 8207561Ch case   13:*/		return 0x82075620;
		  /* 82075620h */ case   14:  		/* li R9, 3662 */
		/* 82075620h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0xE4E);
		/* 82075620h case   14:*/		return 0x82075624;
		  /* 82075624h */ case   15:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075624h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075624h case   15:*/		return 0x82075628;
		  /* 82075628h */ case   16:  		/* li R23, 3665 */
		/* 82075628h case   16:*/		cpu::op::li<0>(regs,&regs.R23,0xE51);
		/* 82075628h case   16:*/		return 0x8207562C;
		  /* 8207562Ch */ case   17:  		/* lbz R8, <#[R30 + 11]> */
		/* 8207562Ch case   17:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000000B) );
		/* 8207562Ch case   17:*/		return 0x82075630;
		  /* 82075630h */ case   18:  		/* li R22, 3208 */
		/* 82075630h case   18:*/		cpu::op::li<0>(regs,&regs.R22,0xC88);
		/* 82075630h case   18:*/		return 0x82075634;
		  /* 82075634h */ case   19:  		/* or R8, R8, R25 */
		/* 82075634h case   19:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R25);
		/* 82075634h case   19:*/		return 0x82075638;
		  /* 82075638h */ case   20:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075638h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075638h case   20:*/		return 0x8207563C;
		  /* 8207563Ch */ case   21:  		/* rlwinm R25, R8, 0, 0, 23 */
		/* 8207563Ch case   21:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R25,regs.R8);
		/* 8207563Ch case   21:*/		return 0x82075640;
		  /* 82075640h */ case   22:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075640h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075640h case   22:*/		return 0x82075644;
		  /* 82075644h */ case   23:  		/* lbz R8, <#[R30 + 15]> */
		/* 82075644h case   23:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000000F) );
		/* 82075644h case   23:*/		return 0x82075648;
		  /* 82075648h */ case   24:  		/* or R8, R8, R25 */
		/* 82075648h case   24:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R25);
		/* 82075648h case   24:*/		return 0x8207564C;
		  /* 8207564Ch */ case   25:  		/* li R25, 4100 */
		/* 8207564Ch case   25:*/		cpu::op::li<0>(regs,&regs.R25,0x1004);
		/* 8207564Ch case   25:*/		return 0x82075650;
		  /* 82075650h */ case   26:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075650h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075650h case   26:*/		return 0x82075654;
		  /* 82075654h */ case   27:  		/* rlwinm R7, R8, 0, 0, 23 */
		/* 82075654h case   27:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R8);
		/* 82075654h case   27:*/		return 0x82075658;
		  /* 82075658h */ case   28:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075658h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075658h case   28:*/		return 0x8207565C;
		  /* 8207565Ch */ case   29:  		/* lbz R11, <#[R30 + 19]> */
		/* 8207565Ch case   29:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000013) );
		/* 8207565Ch case   29:*/		return 0x82075660;
		  /* 82075660h */ case   30:  		/* or R11, R11, R7 */
		/* 82075660h case   30:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82075660h case   30:*/		return 0x82075664;
		  /* 82075664h */ case   31:  		/* li R7, 3209 */
		/* 82075664h case   31:*/		cpu::op::li<0>(regs,&regs.R7,0xC89);
		/* 82075664h case   31:*/		return 0x82075668;
	}
	return 0x82075668;
} // Block from 820755E8h-82075668h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82075668h
// Function 'D3DDevice_IsFencePending'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075668);
		  /* 82075668h */ case    0:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075668h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075668h case    0:*/		return 0x8207566C;
		  /* 8207566Ch */ case    1:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 8207566Ch case    1:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 8207566Ch case    1:*/		return 0x82075670;
		  /* 82075670h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075670h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075670h case    2:*/		return 0x82075674;
		  /* 82075674h */ case    3:  		/* lbz R11, <#[R30 + 23]> */
		/* 82075674h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000017) );
		/* 82075674h case    3:*/		return 0x82075678;
		  /* 82075678h */ case    4:  		/* or R11, R11, R8 */
		/* 82075678h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075678h case    4:*/		return 0x8207567C;
		  /* 8207567Ch */ case    5:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207567Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207567Ch case    5:*/		return 0x82075680;
		  /* 82075680h */ case    6:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075680h case    6:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075680h case    6:*/		return 0x82075684;
		  /* 82075684h */ case    7:  		/* li R5, 3224 */
		/* 82075684h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xC98);
		/* 82075684h case    7:*/		return 0x82075688;
		  /* 82075688h */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075688h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075688h case    8:*/		return 0x8207568C;
		  /* 8207568Ch */ case    9:  		/* lbz R11, <#[R30 + 27]> */
		/* 8207568Ch case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001B) );
		/* 8207568Ch case    9:*/		return 0x82075690;
		  /* 82075690h */ case   10:  		/* or R11, R11, R8 */
		/* 82075690h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075690h case   10:*/		return 0x82075694;
		  /* 82075694h */ case   11:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075694h case   11:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075694h case   11:*/		return 0x82075698;
		  /* 82075698h */ case   12:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075698h case   12:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075698h case   12:*/		return 0x8207569C;
		  /* 8207569Ch */ case   13:  		/* li R4, 3225 */
		/* 8207569Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xC99);
		/* 8207569Ch case   13:*/		return 0x820756A0;
		  /* 820756A0h */ case   14:  		/* stwu R11, <#[R3 + 4]> */
		/* 820756A0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756A0h case   14:*/		return 0x820756A4;
		  /* 820756A4h */ case   15:  		/* lbz R11, <#[R30 + 31]> */
		/* 820756A4h case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001F) );
		/* 820756A4h case   15:*/		return 0x820756A8;
		  /* 820756A8h */ case   16:  		/* or R11, R11, R8 */
		/* 820756A8h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820756A8h case   16:*/		return 0x820756AC;
		  /* 820756ACh */ case   17:  		/* stwu R29, <#[R3 + 4]> */
		/* 820756ACh case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756ACh case   17:*/		return 0x820756B0;
		  /* 820756B0h */ case   18:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 820756B0h case   18:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 820756B0h case   18:*/		return 0x820756B4;
		  /* 820756B4h */ case   19:  		/* li R29, 3226 */
		/* 820756B4h case   19:*/		cpu::op::li<0>(regs,&regs.R29,0xC9A);
		/* 820756B4h case   19:*/		return 0x820756B8;
		  /* 820756B8h */ case   20:  		/* stwu R11, <#[R3 + 4]> */
		/* 820756B8h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756B8h case   20:*/		return 0x820756BC;
		  /* 820756BCh */ case   21:  		/* lbz R11, <#[R30 + 35]> */
		/* 820756BCh case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000023) );
		/* 820756BCh case   21:*/		return 0x820756C0;
		  /* 820756C0h */ case   22:  		/* or R11, R11, R8 */
		/* 820756C0h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820756C0h case   22:*/		return 0x820756C4;
		  /* 820756C4h */ case   23:  		/* stwu R28, <#[R3 + 4]> */
		/* 820756C4h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756C4h case   23:*/		return 0x820756C8;
		  /* 820756C8h */ case   24:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 820756C8h case   24:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 820756C8h case   24:*/		return 0x820756CC;
		  /* 820756CCh */ case   25:  		/* li R28, 3227 */
		/* 820756CCh case   25:*/		cpu::op::li<0>(regs,&regs.R28,0xC9B);
		/* 820756CCh case   25:*/		return 0x820756D0;
		  /* 820756D0h */ case   26:  		/* stwu R11, <#[R3 + 4]> */
		/* 820756D0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756D0h case   26:*/		return 0x820756D4;
		  /* 820756D4h */ case   27:  		/* lbz R11, <#[R30 + 39]> */
		/* 820756D4h case   27:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000027) );
		/* 820756D4h case   27:*/		return 0x820756D8;
		  /* 820756D8h */ case   28:  		/* or R11, R11, R8 */
		/* 820756D8h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820756D8h case   28:*/		return 0x820756DC;
		  /* 820756DCh */ case   29:  		/* li R8, 3210 */
		/* 820756DCh case   29:*/		cpu::op::li<0>(regs,&regs.R8,0xC8A);
		/* 820756DCh case   29:*/		return 0x820756E0;
		  /* 820756E0h */ case   30:  		/* stwu R10, <#[R3 + 4]> */
		/* 820756E0h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756E0h case   30:*/		return 0x820756E4;
		  /* 820756E4h */ case   31:  		/* rlwinm R6, R11, 0, 0, 23 */
		/* 820756E4h case   31:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R6,regs.R11);
		/* 820756E4h case   31:*/		return 0x820756E8;
		  /* 820756E8h */ case   32:  		/* li R10, 3211 */
		/* 820756E8h case   32:*/		cpu::op::li<0>(regs,&regs.R10,0xC8B);
		/* 820756E8h case   32:*/		return 0x820756EC;
		  /* 820756ECh */ case   33:  		/* stwu R11, <#[R3 + 4]> */
		/* 820756ECh case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756ECh case   33:*/		return 0x820756F0;
		  /* 820756F0h */ case   34:  		/* lbz R11, <#[R30 + 43]> */
		/* 820756F0h case   34:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002B) );
		/* 820756F0h case   34:*/		return 0x820756F4;
		  /* 820756F4h */ case   35:  		/* or R11, R11, R6 */
		/* 820756F4h case   35:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 820756F4h case   35:*/		return 0x820756F8;
	}
	return 0x820756F8;
} // Block from 82075668h-820756F8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 820756F8h
// Function 'D3DDevice_SetRingBufferParameters'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820756F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820756F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820756F8);
		  /* 820756F8h */ case    0:  		/* rlwinm R6, R11, 0, 0, 23 */
		/* 820756F8h case    0:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R6,regs.R11);
		/* 820756F8h case    0:*/		return 0x820756FC;
		  /* 820756FCh */ case    1:  		/* stwu R26, <#[R3 + 4]> */
		/* 820756FCh case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820756FCh case    1:*/		return 0x82075700;
		  /* 82075700h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075700h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075700h case    2:*/		return 0x82075704;
		  /* 82075704h */ case    3:  		/* li R26, 3677 */
		/* 82075704h case    3:*/		cpu::op::li<0>(regs,&regs.R26,0xE5D);
		/* 82075704h case    3:*/		return 0x82075708;
		  /* 82075708h */ case    4:  		/* lbz R11, <#[R30 + 47]> */
		/* 82075708h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002F) );
		/* 82075708h case    4:*/		return 0x8207570C;
		  /* 8207570Ch */ case    5:  		/* or R11, R11, R6 */
		/* 8207570Ch case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8207570Ch case    5:*/		return 0x82075710;
		  /* 82075710h */ case    6:  		/* stwu R27, <#[R3 + 4]> */
		/* 82075710h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075710h case    6:*/		return 0x82075714;
		  /* 82075714h */ case    7:  		/* rlwinm R6, R11, 0, 0, 23 */
		/* 82075714h case    7:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R6,regs.R11);
		/* 82075714h case    7:*/		return 0x82075718;
		  /* 82075718h */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075718h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075718h case    8:*/		return 0x8207571C;
		  /* 8207571Ch */ case    9:  		/* lbz R11, <#[R30 + 51]> */
		/* 8207571Ch case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000033) );
		/* 8207571Ch case    9:*/		return 0x82075720;
		  /* 82075720h */ case   10:  		/* or R11, R11, R6 */
		/* 82075720h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82075720h case   10:*/		return 0x82075724;
		  /* 82075724h */ case   11:  		/* stwu R24, <#[R3 + 4]> */
		/* 82075724h case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075724h case   11:*/		return 0x82075728;
		  /* 82075728h */ case   12:  		/* rlwinm R6, R11, 0, 0, 23 */
		/* 82075728h case   12:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R6,regs.R11);
		/* 82075728h case   12:*/		return 0x8207572C;
		  /* 8207572Ch */ case   13:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207572Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207572Ch case   13:*/		return 0x82075730;
		  /* 82075730h */ case   14:  		/* lbz R11, <#[R30 + 55]> */
		/* 82075730h case   14:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000037) );
		/* 82075730h case   14:*/		return 0x82075734;
		  /* 82075734h */ case   15:  		/* or R11, R11, R6 */
		/* 82075734h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82075734h case   15:*/		return 0x82075738;
		  /* 82075738h */ case   16:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075738h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075738h case   16:*/		return 0x8207573C;
		  /* 8207573Ch */ case   17:  		/* rlwinm R6, R11, 0, 0, 23 */
		/* 8207573Ch case   17:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R6,regs.R11);
		/* 8207573Ch case   17:*/		return 0x82075740;
		  /* 82075740h */ case   18:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075740h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075740h case   18:*/		return 0x82075744;
		  /* 82075744h */ case   19:  		/* lbz R11, <#[R30 + 59]> */
		/* 82075744h case   19:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003B) );
		/* 82075744h case   19:*/		return 0x82075748;
		  /* 82075748h */ case   20:  		/* or R11, R11, R6 */
		/* 82075748h case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82075748h case   20:*/		return 0x8207574C;
		  /* 8207574Ch */ case   21:  		/* li R6, 3668 */
		/* 8207574Ch case   21:*/		cpu::op::li<0>(regs,&regs.R6,0xE54);
		/* 8207574Ch case   21:*/		return 0x82075750;
		  /* 82075750h */ case   22:  		/* stwu R23, <#[R3 + 4]> */
		/* 82075750h case   22:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075750h case   22:*/		return 0x82075754;
		  /* 82075754h */ case   23:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 82075754h case   23:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 82075754h case   23:*/		return 0x82075758;
		  /* 82075758h */ case   24:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075758h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075758h case   24:*/		return 0x8207575C;
		  /* 8207575Ch */ case   25:  		/* lbz R11, <#[R30 + 63]> */
		/* 8207575Ch case   25:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003F) );
		/* 8207575Ch case   25:*/		return 0x82075760;
		  /* 82075760h */ case   26:  		/* or R11, R11, R9 */
		/* 82075760h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82075760h case   26:*/		return 0x82075764;
		  /* 82075764h */ case   27:  		/* stwu R22, <#[R3 + 4]> */
		/* 82075764h case   27:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075764h case   27:*/		return 0x82075768;
		  /* 82075768h */ case   28:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 82075768h case   28:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 82075768h case   28:*/		return 0x8207576C;
		  /* 8207576Ch */ case   29:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207576Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207576Ch case   29:*/		return 0x82075770;
		  /* 82075770h */ case   30:  		/* lbz R11, <#[R30 + 67]> */
		/* 82075770h case   30:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000043) );
		/* 82075770h case   30:*/		return 0x82075774;
		  /* 82075774h */ case   31:  		/* or R11, R11, R9 */
		/* 82075774h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82075774h case   31:*/		return 0x82075778;
		  /* 82075778h */ case   32:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075778h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075778h case   32:*/		return 0x8207577C;
		  /* 8207577Ch */ case   33:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 8207577Ch case   33:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 8207577Ch case   33:*/		return 0x82075780;
		  /* 82075780h */ case   34:  		/* li R7, 3592 */
		/* 82075780h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0xE08);
		/* 82075780h case   34:*/		return 0x82075784;
		  /* 82075784h */ case   35:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075784h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075784h case   35:*/		return 0x82075788;
		  /* 82075788h */ case   36:  		/* lbz R11, <#[R30 + 71]> */
		/* 82075788h case   36:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000047) );
		/* 82075788h case   36:*/		return 0x8207578C;
		  /* 8207578Ch */ case   37:  		/* or R11, R11, R9 */
		/* 8207578Ch case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207578Ch case   37:*/		return 0x82075790;
		  /* 82075790h */ case   38:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075790h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075790h case   38:*/		return 0x82075794;
		  /* 82075794h */ case   39:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 82075794h case   39:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 82075794h case   39:*/		return 0x82075798;
		  /* 82075798h */ case   40:  		/* li R8, 3589 */
		/* 82075798h case   40:*/		cpu::op::li<0>(regs,&regs.R8,0xE05);
		/* 82075798h case   40:*/		return 0x8207579C;
		  /* 8207579Ch */ case   41:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207579Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207579Ch case   41:*/		return 0x820757A0;
		  /* 820757A0h */ case   42:  		/* lbz R11, <#[R30 + 75]> */
		/* 820757A0h case   42:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004B) );
		/* 820757A0h case   42:*/		return 0x820757A4;
		  /* 820757A4h */ case   43:  		/* or R11, R11, R9 */
		/* 820757A4h case   43:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820757A4h case   43:*/		return 0x820757A8;
		  /* 820757A8h */ case   44:  		/* stwu R10, <#[R3 + 4]> */
		/* 820757A8h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757A8h case   44:*/		return 0x820757AC;
		  /* 820757ACh */ case   45:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 820757ACh case   45:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 820757ACh case   45:*/		return 0x820757B0;
		  /* 820757B0h */ case   46:  		/* stwu R11, <#[R3 + 4]> */
		/* 820757B0h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757B0h case   46:*/		return 0x820757B4;
		  /* 820757B4h */ case   47:  		/* lbz R11, <#[R30 + 79]> */
		/* 820757B4h case   47:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004F) );
		/* 820757B4h case   47:*/		return 0x820757B8;
		  /* 820757B8h */ case   48:  		/* or R11, R11, R9 */
		/* 820757B8h case   48:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820757B8h case   48:*/		return 0x820757BC;
		  /* 820757BCh */ case   49:  		/* li R9, 4103 */
		/* 820757BCh case   49:*/		cpu::op::li<0>(regs,&regs.R9,0x1007);
		/* 820757BCh case   49:*/		return 0x820757C0;
		  /* 820757C0h */ case   50:  		/* stwu R5, <#[R3 + 4]> */
		/* 820757C0h case   50:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757C0h case   50:*/		return 0x820757C4;
		  /* 820757C4h */ case   51:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 820757C4h case   51:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 820757C4h case   51:*/		return 0x820757C8;
		  /* 820757C8h */ case   52:  		/* li R5, 3671 */
		/* 820757C8h case   52:*/		cpu::op::li<0>(regs,&regs.R5,0xE57);
		/* 820757C8h case   52:*/		return 0x820757CC;
		  /* 820757CCh */ case   53:  		/* stwu R11, <#[R3 + 4]> */
		/* 820757CCh case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757CCh case   53:*/		return 0x820757D0;
		  /* 820757D0h */ case   54:  		/* li R11, 3674 */
		/* 820757D0h case   54:*/		cpu::op::li<0>(regs,&regs.R11,0xE5A);
		/* 820757D0h case   54:*/		return 0x820757D4;
		  /* 820757D4h */ case   55:  		/* lbz R27, <#[R30 + 83]> */
		/* 820757D4h case   55:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000053) );
		/* 820757D4h case   55:*/		return 0x820757D8;
		  /* 820757D8h */ case   56:  		/* or R10, R27, R10 */
		/* 820757D8h case   56:*/		cpu::op::or<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 820757D8h case   56:*/		return 0x820757DC;
		  /* 820757DCh */ case   57:  		/* li R27, 3680 */
		/* 820757DCh case   57:*/		cpu::op::li<0>(regs,&regs.R27,0xE60);
		/* 820757DCh case   57:*/		return 0x820757E0;
		  /* 820757E0h */ case   58:  		/* stwu R4, <#[R3 + 4]> */
		/* 820757E0h case   58:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757E0h case   58:*/		return 0x820757E4;
		  /* 820757E4h */ case   59:  		/* rlwinm R24, R10, 0, 0, 23 */
		/* 820757E4h case   59:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R24,regs.R10);
		/* 820757E4h case   59:*/		return 0x820757E8;
		  /* 820757E8h */ case   60:  		/* stwu R10, <#[R3 + 4]> */
		/* 820757E8h case   60:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757E8h case   60:*/		return 0x820757EC;
		  /* 820757ECh */ case   61:  		/* lbz R10, <#[R30 + 87]> */
		/* 820757ECh case   61:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000057) );
		/* 820757ECh case   61:*/		return 0x820757F0;
		  /* 820757F0h */ case   62:  		/* or R10, R10, R24 */
		/* 820757F0h case   62:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R24);
		/* 820757F0h case   62:*/		return 0x820757F4;
		  /* 820757F4h */ case   63:  		/* stwu R29, <#[R3 + 4]> */
		/* 820757F4h case   63:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757F4h case   63:*/		return 0x820757F8;
		  /* 820757F8h */ case   64:  		/* rlwinm R4, R10, 0, 0, 23 */
		/* 820757F8h case   64:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R4,regs.R10);
		/* 820757F8h case   64:*/		return 0x820757FC;
		  /* 820757FCh */ case   65:  		/* stwu R10, <#[R3 + 4]> */
		/* 820757FCh case   65:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820757FCh case   65:*/		return 0x82075800;
		  /* 82075800h */ case   66:  		/* lbz R10, <#[R30 + 91]> */
		/* 82075800h case   66:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000005B) );
		/* 82075800h case   66:*/		return 0x82075804;
		  /* 82075804h */ case   67:  		/* or R10, R10, R4 */
		/* 82075804h case   67:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82075804h case   67:*/		return 0x82075808;
		  /* 82075808h */ case   68:  		/* stwu R28, <#[R3 + 4]> */
		/* 82075808h case   68:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075808h case   68:*/		return 0x8207580C;
		  /* 8207580Ch */ case   69:  		/* rlwinm R4, R10, 0, 0, 23 */
		/* 8207580Ch case   69:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R4,regs.R10);
		/* 8207580Ch case   69:*/		return 0x82075810;
		  /* 82075810h */ case   70:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075810h case   70:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075810h case   70:*/		return 0x82075814;
		  /* 82075814h */ case   71:  		/* lbz R10, <#[R30 + 95]> */
		/* 82075814h case   71:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000005F) );
		/* 82075814h case   71:*/		return 0x82075818;
		  /* 82075818h */ case   72:  		/* or R10, R10, R4 */
		/* 82075818h case   72:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82075818h case   72:*/		return 0x8207581C;
		  /* 8207581Ch */ case   73:  		/* stwu R25, <#[R3 + 4]> */
		/* 8207581Ch case   73:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207581Ch case   73:*/		return 0x82075820;
		  /* 82075820h */ case   74:  		/* rlwinm R4, R10, 0, 0, 23 */
		/* 82075820h case   74:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R4,regs.R10);
		/* 82075820h case   74:*/		return 0x82075824;
		  /* 82075824h */ case   75:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075824h case   75:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075824h case   75:*/		return 0x82075828;
		  /* 82075828h */ case   76:  		/* lbz R10, <#[R30 + 99]> */
		/* 82075828h case   76:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000063) );
		/* 82075828h case   76:*/		return 0x8207582C;
		  /* 8207582Ch */ case   77:  		/* or R10, R10, R4 */
		/* 8207582Ch case   77:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 8207582Ch case   77:*/		return 0x82075830;
		  /* 82075830h */ case   78:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075830h case   78:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075830h case   78:*/		return 0x82075834;
		  /* 82075834h */ case   79:  		/* rlwinm R4, R10, 0, 0, 23 */
		/* 82075834h case   79:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R4,regs.R10);
		/* 82075834h case   79:*/		return 0x82075838;
		  /* 82075838h */ case   80:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075838h case   80:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075838h case   80:*/		return 0x8207583C;
		  /* 8207583Ch */ case   81:  		/* lbz R10, <#[R30 + 103]> */
		/* 8207583Ch case   81:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000067) );
		/* 8207583Ch case   81:*/		return 0x82075840;
		  /* 82075840h */ case   82:  		/* or R10, R10, R4 */
		/* 82075840h case   82:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82075840h case   82:*/		return 0x82075844;
		  /* 82075844h */ case   83:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075844h case   83:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075844h case   83:*/		return 0x82075848;
		  /* 82075848h */ case   84:  		/* rlwinm R9, R10, 0, 0, 23 */
		/* 82075848h case   84:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R10);
		/* 82075848h case   84:*/		return 0x8207584C;
		  /* 8207584Ch */ case   85:  		/* li R8, 3686 */
		/* 8207584Ch case   85:*/		cpu::op::li<0>(regs,&regs.R8,0xE66);
		/* 8207584Ch case   85:*/		return 0x82075850;
		  /* 82075850h */ case   86:  		/* li R4, 3698 */
		/* 82075850h case   86:*/		cpu::op::li<0>(regs,&regs.R4,0xE72);
		/* 82075850h case   86:*/		return 0x82075854;
		  /* 82075854h */ case   87:  		/* li R29, 3701 */
		/* 82075854h case   87:*/		cpu::op::li<0>(regs,&regs.R29,0xE75);
		/* 82075854h case   87:*/		return 0x82075858;
		  /* 82075858h */ case   88:  		/* li R28, 3704 */
		/* 82075858h case   88:*/		cpu::op::li<0>(regs,&regs.R28,0xE78);
		/* 82075858h case   88:*/		return 0x8207585C;
		  /* 8207585Ch */ case   89:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207585Ch case   89:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207585Ch case   89:*/		return 0x82075860;
		  /* 82075860h */ case   90:  		/* lbz R10, <#[R30 + 107]> */
		/* 82075860h case   90:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006B) );
		/* 82075860h case   90:*/		return 0x82075864;
		  /* 82075864h */ case   91:  		/* or R10, R10, R9 */
		/* 82075864h case   91:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82075864h case   91:*/		return 0x82075868;
		  /* 82075868h */ case   92:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075868h case   92:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075868h case   92:*/		return 0x8207586C;
		  /* 8207586Ch */ case   93:  		/* rlwinm R9, R10, 0, 0, 23 */
		/* 8207586Ch case   93:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R10);
		/* 8207586Ch case   93:*/		return 0x82075870;
		  /* 82075870h */ case   94:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075870h case   94:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075870h case   94:*/		return 0x82075874;
		  /* 82075874h */ case   95:  		/* lbz R10, <#[R30 + 111]> */
		/* 82075874h case   95:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000006F) );
		/* 82075874h case   95:*/		return 0x82075878;
		  /* 82075878h */ case   96:  		/* or R10, R10, R9 */
		/* 82075878h case   96:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82075878h case   96:*/		return 0x8207587C;
		  /* 8207587Ch */ case   97:  		/* stwu R6, <#[R3 + 4]> */
		/* 8207587Ch case   97:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207587Ch case   97:*/		return 0x82075880;
		  /* 82075880h */ case   98:  		/* rlwinm R9, R10, 0, 0, 23 */
		/* 82075880h case   98:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R10);
		/* 82075880h case   98:*/		return 0x82075884;
		  /* 82075884h */ case   99:  		/* li R6, 3692 */
		/* 82075884h case   99:*/		cpu::op::li<0>(regs,&regs.R6,0xE6C);
		/* 82075884h case   99:*/		return 0x82075888;
		  /* 82075888h */ case  100:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075888h case  100:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075888h case  100:*/		return 0x8207588C;
		  /* 8207588Ch */ case  101:  		/* lbz R10, <#[R30 + 115]> */
		/* 8207588Ch case  101:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000073) );
		/* 8207588Ch case  101:*/		return 0x82075890;
		  /* 82075890h */ case  102:  		/* or R10, R10, R9 */
		/* 82075890h case  102:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82075890h case  102:*/		return 0x82075894;
		  /* 82075894h */ case  103:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075894h case  103:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075894h case  103:*/		return 0x82075898;
		  /* 82075898h */ case  104:  		/* rlwinm R9, R10, 0, 0, 23 */
		/* 82075898h case  104:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R10);
		/* 82075898h case  104:*/		return 0x8207589C;
		  /* 8207589Ch */ case  105:  		/* li R5, 3695 */
		/* 8207589Ch case  105:*/		cpu::op::li<0>(regs,&regs.R5,0xE6F);
		/* 8207589Ch case  105:*/		return 0x820758A0;
		  /* 820758A0h */ case  106:  		/* stwu R10, <#[R3 + 4]> */
		/* 820758A0h case  106:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758A0h case  106:*/		return 0x820758A4;
		  /* 820758A4h */ case  107:  		/* lbz R10, <#[R30 + 119]> */
		/* 820758A4h case  107:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000077) );
		/* 820758A4h case  107:*/		return 0x820758A8;
		  /* 820758A8h */ case  108:  		/* or R10, R10, R9 */
		/* 820758A8h case  108:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820758A8h case  108:*/		return 0x820758AC;
		  /* 820758ACh */ case  109:  		/* stwu R11, <#[R3 + 4]> */
		/* 820758ACh case  109:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758ACh case  109:*/		return 0x820758B0;
		  /* 820758B0h */ case  110:  		/* rlwinm R9, R10, 0, 0, 23 */
		/* 820758B0h case  110:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R10);
		/* 820758B0h case  110:*/		return 0x820758B4;
		  /* 820758B4h */ case  111:  		/* li R11, 3683 */
		/* 820758B4h case  111:*/		cpu::op::li<0>(regs,&regs.R11,0xE63);
		/* 820758B4h case  111:*/		return 0x820758B8;
		  /* 820758B8h */ case  112:  		/* stwu R10, <#[R3 + 4]> */
		/* 820758B8h case  112:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758B8h case  112:*/		return 0x820758BC;
		  /* 820758BCh */ case  113:  		/* lbz R10, <#[R30 + 123]> */
		/* 820758BCh case  113:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000007B) );
		/* 820758BCh case  113:*/		return 0x820758C0;
		  /* 820758C0h */ case  114:  		/* or R10, R10, R9 */
		/* 820758C0h case  114:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820758C0h case  114:*/		return 0x820758C4;
		  /* 820758C4h */ case  115:  		/* li R9, 3689 */
		/* 820758C4h case  115:*/		cpu::op::li<0>(regs,&regs.R9,0xE69);
		/* 820758C4h case  115:*/		return 0x820758C8;
		  /* 820758C8h */ case  116:  		/* stwu R26, <#[R3 + 4]> */
		/* 820758C8h case  116:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758C8h case  116:*/		return 0x820758CC;
		  /* 820758CCh */ case  117:  		/* rlwinm R7, R10, 0, 0, 23 */
		/* 820758CCh case  117:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R10);
		/* 820758CCh case  117:*/		return 0x820758D0;
		  /* 820758D0h */ case  118:  		/* stwu R10, <#[R3 + 4]> */
		/* 820758D0h case  118:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758D0h case  118:*/		return 0x820758D4;
		  /* 820758D4h */ case  119:  		/* lbz R10, <#[R30 + 127]> */
		/* 820758D4h case  119:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000007F) );
		/* 820758D4h case  119:*/		return 0x820758D8;
		  /* 820758D8h */ case  120:  		/* or R10, R10, R7 */
		/* 820758D8h case  120:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 820758D8h case  120:*/		return 0x820758DC;
		  /* 820758DCh */ case  121:  		/* stwu R27, <#[R3 + 4]> */
		/* 820758DCh case  121:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758DCh case  121:*/		return 0x820758E0;
		  /* 820758E0h */ case  122:  		/* rlwinm R7, R10, 0, 0, 23 */
		/* 820758E0h case  122:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R10);
		/* 820758E0h case  122:*/		return 0x820758E4;
		  /* 820758E4h */ case  123:  		/* stwu R10, <#[R3 + 4]> */
		/* 820758E4h case  123:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758E4h case  123:*/		return 0x820758E8;
		  /* 820758E8h */ case  124:  		/* lbz R10, <#[R30 + 131]> */
		/* 820758E8h case  124:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000083) );
		/* 820758E8h case  124:*/		return 0x820758EC;
		  /* 820758ECh */ case  125:  		/* or R10, R10, R7 */
		/* 820758ECh case  125:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 820758ECh case  125:*/		return 0x820758F0;
		  /* 820758F0h */ case  126:  		/* stwu R11, <#[R3 + 4]> */
		/* 820758F0h case  126:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758F0h case  126:*/		return 0x820758F4;
		  /* 820758F4h */ case  127:  		/* rlwinm R7, R10, 0, 0, 23 */
		/* 820758F4h case  127:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R10);
		/* 820758F4h case  127:*/		return 0x820758F8;
		  /* 820758F8h */ case  128:  		/* stwu R10, <#[R3 + 4]> */
		/* 820758F8h case  128:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820758F8h case  128:*/		return 0x820758FC;
		  /* 820758FCh */ case  129:  		/* lbz R11, <#[R30 + 135]> */
		/* 820758FCh case  129:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000087) );
		/* 820758FCh case  129:*/		return 0x82075900;
		  /* 82075900h */ case  130:  		/* or R11, R11, R7 */
		/* 82075900h case  130:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82075900h case  130:*/		return 0x82075904;
		  /* 82075904h */ case  131:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075904h case  131:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075904h case  131:*/		return 0x82075908;
		  /* 82075908h */ case  132:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075908h case  132:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075908h case  132:*/		return 0x8207590C;
		  /* 8207590Ch */ case  133:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207590Ch case  133:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207590Ch case  133:*/		return 0x82075910;
		  /* 82075910h */ case  134:  		/* lbz R11, <#[R30 + 139]> */
		/* 82075910h case  134:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000008B) );
		/* 82075910h case  134:*/		return 0x82075914;
		  /* 82075914h */ case  135:  		/* or R11, R11, R10 */
		/* 82075914h case  135:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075914h case  135:*/		return 0x82075918;
		  /* 82075918h */ case  136:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075918h case  136:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075918h case  136:*/		return 0x8207591C;
		  /* 8207591Ch */ case  137:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 8207591Ch case  137:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 8207591Ch case  137:*/		return 0x82075920;
		  /* 82075920h */ case  138:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075920h case  138:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075920h case  138:*/		return 0x82075924;
		  /* 82075924h */ case  139:  		/* lbz R11, <#[R30 + 143]> */
		/* 82075924h case  139:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000008F) );
		/* 82075924h case  139:*/		return 0x82075928;
		  /* 82075928h */ case  140:  		/* or R11, R11, R10 */
		/* 82075928h case  140:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075928h case  140:*/		return 0x8207592C;
		  /* 8207592Ch */ case  141:  		/* stwu R6, <#[R3 + 4]> */
		/* 8207592Ch case  141:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207592Ch case  141:*/		return 0x82075930;
		  /* 82075930h */ case  142:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075930h case  142:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075930h case  142:*/		return 0x82075934;
		  /* 82075934h */ case  143:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075934h case  143:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075934h case  143:*/		return 0x82075938;
		  /* 82075938h */ case  144:  		/* lbz R11, <#[R30 + 147]> */
		/* 82075938h case  144:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000093) );
		/* 82075938h case  144:*/		return 0x8207593C;
		  /* 8207593Ch */ case  145:  		/* or R11, R11, R10 */
		/* 8207593Ch case  145:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207593Ch case  145:*/		return 0x82075940;
		  /* 82075940h */ case  146:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075940h case  146:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075940h case  146:*/		return 0x82075944;
		  /* 82075944h */ case  147:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075944h case  147:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075944h case  147:*/		return 0x82075948;
		  /* 82075948h */ case  148:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075948h case  148:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075948h case  148:*/		return 0x8207594C;
		  /* 8207594Ch */ case  149:  		/* lbz R11, <#[R30 + 151]> */
		/* 8207594Ch case  149:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000097) );
		/* 8207594Ch case  149:*/		return 0x82075950;
		  /* 82075950h */ case  150:  		/* or R11, R11, R10 */
		/* 82075950h case  150:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075950h case  150:*/		return 0x82075954;
		  /* 82075954h */ case  151:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075954h case  151:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075954h case  151:*/		return 0x82075958;
		  /* 82075958h */ case  152:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075958h case  152:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075958h case  152:*/		return 0x8207595C;
		  /* 8207595Ch */ case  153:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207595Ch case  153:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207595Ch case  153:*/		return 0x82075960;
		  /* 82075960h */ case  154:  		/* lbz R11, <#[R30 + 155]> */
		/* 82075960h case  154:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009B) );
		/* 82075960h case  154:*/		return 0x82075964;
		  /* 82075964h */ case  155:  		/* or R11, R11, R10 */
		/* 82075964h case  155:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075964h case  155:*/		return 0x82075968;
		  /* 82075968h */ case  156:  		/* stwu R29, <#[R3 + 4]> */
		/* 82075968h case  156:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075968h case  156:*/		return 0x8207596C;
		  /* 8207596Ch */ case  157:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 8207596Ch case  157:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 8207596Ch case  157:*/		return 0x82075970;
		  /* 82075970h */ case  158:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075970h case  158:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075970h case  158:*/		return 0x82075974;
		  /* 82075974h */ case  159:  		/* lbz R11, <#[R30 + 159]> */
		/* 82075974h case  159:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009F) );
		/* 82075974h case  159:*/		return 0x82075978;
		  /* 82075978h */ case  160:  		/* or R11, R11, R10 */
		/* 82075978h case  160:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075978h case  160:*/		return 0x8207597C;
		  /* 8207597Ch */ case  161:  		/* stwu R28, <#[R3 + 4]> */
		/* 8207597Ch case  161:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207597Ch case  161:*/		return 0x82075980;
		  /* 82075980h */ case  162:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075980h case  162:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075980h case  162:*/		return 0x82075984;
		  /* 82075984h */ case  163:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075984h case  163:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075984h case  163:*/		return 0x82075988;
		  /* 82075988h */ case  164:  		/* li R9, 3707 */
		/* 82075988h case  164:*/		cpu::op::li<0>(regs,&regs.R9,0xE7B);
		/* 82075988h case  164:*/		return 0x8207598C;
		  /* 8207598Ch */ case  165:  		/* lbz R11, <#[R30 + 163]> */
		/* 8207598Ch case  165:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000A3) );
		/* 8207598Ch case  165:*/		return 0x82075990;
		  /* 82075990h */ case  166:  		/* li R8, 3618 */
		/* 82075990h case  166:*/		cpu::op::li<0>(regs,&regs.R8,0xE22);
		/* 82075990h case  166:*/		return 0x82075994;
		  /* 82075994h */ case  167:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075994h case  167:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075994h case  167:*/		return 0x82075998;
		  /* 82075998h */ case  168:  		/* or R11, R11, R10 */
		/* 82075998h case  168:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075998h case  168:*/		return 0x8207599C;
		  /* 8207599Ch */ case  169:  		/* li R10, 3615 */
		/* 8207599Ch case  169:*/		cpu::op::li<0>(regs,&regs.R10,0xE1F);
		/* 8207599Ch case  169:*/		return 0x820759A0;
		  /* 820759A0h */ case  170:  		/* rlwinm R9, R11, 0, 0, 23 */
		/* 820759A0h case  170:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R9,regs.R11);
		/* 820759A0h case  170:*/		return 0x820759A4;
		  /* 820759A4h */ case  171:  		/* li R7, 3624 */
		/* 820759A4h case  171:*/		cpu::op::li<0>(regs,&regs.R7,0xE28);
		/* 820759A4h case  171:*/		return 0x820759A8;
		  /* 820759A8h */ case  172:  		/* li R6, 3627 */
		/* 820759A8h case  172:*/		cpu::op::li<0>(regs,&regs.R6,0xE2B);
		/* 820759A8h case  172:*/		return 0x820759AC;
		  /* 820759ACh */ case  173:  		/* stwu R11, <#[R3 + 4]> */
		/* 820759ACh case  173:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820759ACh case  173:*/		return 0x820759B0;
		  /* 820759B0h */ case  174:  		/* li R5, 3633 */
		/* 820759B0h case  174:*/		cpu::op::li<0>(regs,&regs.R5,0xE31);
		/* 820759B0h case  174:*/		return 0x820759B4;
		  /* 820759B4h */ case  175:  		/* lbz R4, <#[R30 + 167]> */
		/* 820759B4h case  175:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R30 + 0x000000A7) );
		/* 820759B4h case  175:*/		return 0x820759B8;
		  /* 820759B8h */ case  176:  		/* li R11, 3636 */
		/* 820759B8h case  176:*/		cpu::op::li<0>(regs,&regs.R11,0xE34);
		/* 820759B8h case  176:*/		return 0x820759BC;
		  /* 820759BCh */ case  177:  		/* li R29, 3642 */
		/* 820759BCh case  177:*/		cpu::op::li<0>(regs,&regs.R29,0xE3A);
		/* 820759BCh case  177:*/		return 0x820759C0;
		  /* 820759C0h */ case  178:  		/* or R9, R4, R9 */
		/* 820759C0h case  178:*/		cpu::op::or<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 820759C0h case  178:*/		return 0x820759C4;
		  /* 820759C4h */ case  179:  		/* li R4, 3645 */
		/* 820759C4h case  179:*/		cpu::op::li<0>(regs,&regs.R4,0xE3D);
		/* 820759C4h case  179:*/		return 0x820759C8;
		  /* 820759C8h */ case  180:  		/* stwu R10, <#[R3 + 4]> */
		/* 820759C8h case  180:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820759C8h case  180:*/		return 0x820759CC;
		  /* 820759CCh */ case  181:  		/* rlwinm R28, R9, 0, 0, 23 */
		/* 820759CCh case  181:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R28,regs.R9);
		/* 820759CCh case  181:*/		return 0x820759D0;
		  /* 820759D0h */ case  182:  		/* li R27, 3540 */
		/* 820759D0h case  182:*/		cpu::op::li<0>(regs,&regs.R27,0xDD4);
		/* 820759D0h case  182:*/		return 0x820759D4;
		  /* 820759D4h */ case  183:  		/* li R10, 3844 */
		/* 820759D4h case  183:*/		cpu::op::li<0>(regs,&regs.R10,0xF04);
		/* 820759D4h case  183:*/		return 0x820759D8;
		  /* 820759D8h */ case  184:  		/* li R26, 3845 */
		/* 820759D8h case  184:*/		cpu::op::li<0>(regs,&regs.R26,0xF05);
		/* 820759D8h case  184:*/		return 0x820759DC;
		  /* 820759DCh */ case  185:  		/* li R25, 3846 */
		/* 820759DCh case  185:*/		cpu::op::li<0>(regs,&regs.R25,0xF06);
		/* 820759DCh case  185:*/		return 0x820759E0;
		  /* 820759E0h */ case  186:  		/* stwu R9, <#[R3 + 4]> */
		/* 820759E0h case  186:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820759E0h case  186:*/		return 0x820759E4;
		  /* 820759E4h */ case  187:  		/* li R24, 3847 */
		/* 820759E4h case  187:*/		cpu::op::li<0>(regs,&regs.R24,0xF07);
		/* 820759E4h case  187:*/		return 0x820759E8;
		  /* 820759E8h */ case  188:  		/* lbz R21, <#[R30 + 171]> */
		/* 820759E8h case  188:*/		cpu::mem::load8z( regs, &regs.R21, (uint32)(regs.R30 + 0x000000AB) );
		/* 820759E8h case  188:*/		return 0x820759EC;
		  /* 820759ECh */ case  189:  		/* li R23, 2069 */
		/* 820759ECh case  189:*/		cpu::op::li<0>(regs,&regs.R23,0x815);
		/* 820759ECh case  189:*/		return 0x820759F0;
		  /* 820759F0h */ case  190:  		/* li R22, 2133 */
		/* 820759F0h case  190:*/		cpu::op::li<0>(regs,&regs.R22,0x855);
		/* 820759F0h case  190:*/		return 0x820759F4;
		  /* 820759F4h */ case  191:  		/* or R28, R21, R28 */
		/* 820759F4h case  191:*/		cpu::op::or<0>(regs,&regs.R28,regs.R21,regs.R28);
		/* 820759F4h case  191:*/		return 0x820759F8;
		  /* 820759F8h */ case  192:  		/* li R9, 2584 */
		/* 820759F8h case  192:*/		cpu::op::li<0>(regs,&regs.R9,0xA18);
		/* 820759F8h case  192:*/		return 0x820759FC;
		  /* 820759FCh */ case  193:  		/* stwu R8, <#[R3 + 4]> */
		/* 820759FCh case  193:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820759FCh case  193:*/		return 0x82075A00;
		  /* 82075A00h */ case  194:  		/* rlwinm R21, R28, 0, 0, 23 */
		/* 82075A00h case  194:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R21,regs.R28);
		/* 82075A00h case  194:*/		return 0x82075A04;
		  /* 82075A04h */ case  195:  		/* stwu R28, <#[R3 + 4]> */
		/* 82075A04h case  195:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A04h case  195:*/		return 0x82075A08;
		  /* 82075A08h */ case  196:  		/* lbz R8, <#[R30 + 175]> */
		/* 82075A08h case  196:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x000000AF) );
		/* 82075A08h case  196:*/		return 0x82075A0C;
		  /* 82075A0Ch */ case  197:  		/* or R8, R8, R21 */
		/* 82075A0Ch case  197:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R21);
		/* 82075A0Ch case  197:*/		return 0x82075A10;
		  /* 82075A10h */ case  198:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075A10h case  198:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A10h case  198:*/		return 0x82075A14;
		  /* 82075A14h */ case  199:  		/* rlwinm R28, R8, 0, 0, 23 */
		/* 82075A14h case  199:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R28,regs.R8);
		/* 82075A14h case  199:*/		return 0x82075A18;
		  /* 82075A18h */ case  200:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075A18h case  200:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A18h case  200:*/		return 0x82075A1C;
		  /* 82075A1Ch */ case  201:  		/* lbz R8, <#[R30 + 179]> */
		/* 82075A1Ch case  201:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x000000B3) );
		/* 82075A1Ch case  201:*/		return 0x82075A20;
		  /* 82075A20h */ case  202:  		/* or R8, R8, R28 */
		/* 82075A20h case  202:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R28);
		/* 82075A20h case  202:*/		return 0x82075A24;
		  /* 82075A24h */ case  203:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075A24h case  203:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A24h case  203:*/		return 0x82075A28;
		  /* 82075A28h */ case  204:  		/* rlwinm R7, R8, 0, 0, 23 */
		/* 82075A28h case  204:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R8);
		/* 82075A28h case  204:*/		return 0x82075A2C;
		  /* 82075A2Ch */ case  205:  		/* li R6, 2590 */
		/* 82075A2Ch case  205:*/		cpu::op::li<0>(regs,&regs.R6,0xA1E);
		/* 82075A2Ch case  205:*/		return 0x82075A30;
		  /* 82075A30h */ case  206:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075A30h case  206:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A30h case  206:*/		return 0x82075A34;
		  /* 82075A34h */ case  207:  		/* lbz R8, <#[R30 + 183]> */
		/* 82075A34h case  207:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x000000B7) );
		/* 82075A34h case  207:*/		return 0x82075A38;
		  /* 82075A38h */ case  208:  		/* or R8, R8, R7 */
		/* 82075A38h case  208:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 82075A38h case  208:*/		return 0x82075A3C;
		  /* 82075A3Ch */ case  209:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075A3Ch case  209:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A3Ch case  209:*/		return 0x82075A40;
		  /* 82075A40h */ case  210:  		/* rlwinm R7, R8, 0, 0, 23 */
		/* 82075A40h case  210:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R8);
		/* 82075A40h case  210:*/		return 0x82075A44;
		  /* 82075A44h */ case  211:  		/* li R5, 72 */
		/* 82075A44h case  211:*/		cpu::op::li<0>(regs,&regs.R5,0x48);
		/* 82075A44h case  211:*/		return 0x82075A48;
		  /* 82075A48h */ case  212:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075A48h case  212:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A48h case  212:*/		return 0x82075A4C;
		  /* 82075A4Ch */ case  213:  		/* lbz R8, <#[R30 + 187]> */
		/* 82075A4Ch case  213:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R30 + 0x000000BB) );
		/* 82075A4Ch case  213:*/		return 0x82075A50;
		  /* 82075A50h */ case  214:  		/* or R8, R8, R7 */
		/* 82075A50h case  214:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 82075A50h case  214:*/		return 0x82075A54;
		  /* 82075A54h */ case  215:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075A54h case  215:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A54h case  215:*/		return 0x82075A58;
		  /* 82075A58h */ case  216:  		/* rlwinm R7, R8, 0, 0, 23 */
		/* 82075A58h case  216:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R7,regs.R8);
		/* 82075A58h case  216:*/		return 0x82075A5C;
		  /* 82075A5Ch */ case  217:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075A5Ch case  217:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A5Ch case  217:*/		return 0x82075A60;
		  /* 82075A60h */ case  218:  		/* lbz R11, <#[R30 + 191]> */
		/* 82075A60h case  218:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000BF) );
		/* 82075A60h case  218:*/		return 0x82075A64;
		  /* 82075A64h */ case  219:  		/* or R11, R11, R7 */
		/* 82075A64h case  219:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82075A64h case  219:*/		return 0x82075A68;
		  /* 82075A68h */ case  220:  		/* li R7, 2587 */
		/* 82075A68h case  220:*/		cpu::op::li<0>(regs,&regs.R7,0xA1B);
		/* 82075A68h case  220:*/		return 0x82075A6C;
		  /* 82075A6Ch */ case  221:  		/* stwu R29, <#[R3 + 4]> */
		/* 82075A6Ch case  221:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A6Ch case  221:*/		return 0x82075A70;
		  /* 82075A70h */ case  222:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075A70h case  222:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075A70h case  222:*/		return 0x82075A74;
		  /* 82075A74h */ case  223:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075A74h case  223:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A74h case  223:*/		return 0x82075A78;
		  /* 82075A78h */ case  224:  		/* lbz R11, <#[R30 + 195]> */
		/* 82075A78h case  224:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C3) );
		/* 82075A78h case  224:*/		return 0x82075A7C;
		  /* 82075A7Ch */ case  225:  		/* or R11, R11, R8 */
		/* 82075A7Ch case  225:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075A7Ch case  225:*/		return 0x82075A80;
		  /* 82075A80h */ case  226:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075A80h case  226:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A80h case  226:*/		return 0x82075A84;
		  /* 82075A84h */ case  227:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075A84h case  227:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075A84h case  227:*/		return 0x82075A88;
		  /* 82075A88h */ case  228:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075A88h case  228:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A88h case  228:*/		return 0x82075A8C;
		  /* 82075A8Ch */ case  229:  		/* lbz R11, <#[R30 + 199]> */
		/* 82075A8Ch case  229:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000C7) );
		/* 82075A8Ch case  229:*/		return 0x82075A90;
		  /* 82075A90h */ case  230:  		/* or R11, R11, R8 */
		/* 82075A90h case  230:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075A90h case  230:*/		return 0x82075A94;
		  /* 82075A94h */ case  231:  		/* stwu R27, <#[R3 + 4]> */
		/* 82075A94h case  231:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A94h case  231:*/		return 0x82075A98;
		  /* 82075A98h */ case  232:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075A98h case  232:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075A98h case  232:*/		return 0x82075A9C;
		  /* 82075A9Ch */ case  233:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075A9Ch case  233:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075A9Ch case  233:*/		return 0x82075AA0;
		  /* 82075AA0h */ case  234:  		/* lbz R11, <#[R30 + 203]> */
		/* 82075AA0h case  234:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000CB) );
		/* 82075AA0h case  234:*/		return 0x82075AA4;
		  /* 82075AA4h */ case  235:  		/* or R11, R11, R8 */
		/* 82075AA4h case  235:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075AA4h case  235:*/		return 0x82075AA8;
		  /* 82075AA8h */ case  236:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075AA8h case  236:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AA8h case  236:*/		return 0x82075AAC;
		  /* 82075AACh */ case  237:  		/* rlwinm R8, R11, 0, 0, 23 */
		/* 82075AACh case  237:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R8,regs.R11);
		/* 82075AACh case  237:*/		return 0x82075AB0;
		  /* 82075AB0h */ case  238:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075AB0h case  238:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AB0h case  238:*/		return 0x82075AB4;
		  /* 82075AB4h */ case  239:  		/* lbz R11, <#[R30 + 207]> */
		/* 82075AB4h case  239:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000CF) );
		/* 82075AB4h case  239:*/		return 0x82075AB8;
		  /* 82075AB8h */ case  240:  		/* or R11, R11, R8 */
		/* 82075AB8h case  240:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82075AB8h case  240:*/		return 0x82075ABC;
		  /* 82075ABCh */ case  241:  		/* stwu R26, <#[R3 + 4]> */
		/* 82075ABCh case  241:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075ABCh case  241:*/		return 0x82075AC0;
		  /* 82075AC0h */ case  242:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075AC0h case  242:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075AC0h case  242:*/		return 0x82075AC4;
		  /* 82075AC4h */ case  243:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075AC4h case  243:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AC4h case  243:*/		return 0x82075AC8;
		  /* 82075AC8h */ case  244:  		/* lbz R11, <#[R30 + 211]> */
		/* 82075AC8h case  244:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000D3) );
		/* 82075AC8h case  244:*/		return 0x82075ACC;
		  /* 82075ACCh */ case  245:  		/* stwu R25, <#[R3 + 4]> */
		/* 82075ACCh case  245:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075ACCh case  245:*/		return 0x82075AD0;
		  /* 82075AD0h */ case  246:  		/* or R11, R11, R10 */
		/* 82075AD0h case  246:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075AD0h case  246:*/		return 0x82075AD4;
		  /* 82075AD4h */ case  247:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075AD4h case  247:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075AD4h case  247:*/		return 0x82075AD8;
		  /* 82075AD8h */ case  248:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075AD8h case  248:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AD8h case  248:*/		return 0x82075ADC;
		  /* 82075ADCh */ case  249:  		/* lbz R11, <#[R30 + 215]> */
		/* 82075ADCh case  249:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000D7) );
		/* 82075ADCh case  249:*/		return 0x82075AE0;
		  /* 82075AE0h */ case  250:  		/* or R11, R11, R10 */
		/* 82075AE0h case  250:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075AE0h case  250:*/		return 0x82075AE4;
		  /* 82075AE4h */ case  251:  		/* stwu R24, <#[R3 + 4]> */
		/* 82075AE4h case  251:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AE4h case  251:*/		return 0x82075AE8;
		  /* 82075AE8h */ case  252:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075AE8h case  252:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075AE8h case  252:*/		return 0x82075AEC;
		  /* 82075AECh */ case  253:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075AECh case  253:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AECh case  253:*/		return 0x82075AF0;
	}
	return 0x82075AF0;
} // Block from 820756F8h-82075AF0h (254 instructions)

//////////////////////////////////////////////////////
// Block at 82075AF0h
// Function '?Gamma_sRGB@D3D@@YAMMH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075AF0);
		  /* 82075AF0h */ case    0:  		/* lbz R11, <#[R30 + 219]> */
		/* 82075AF0h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000DB) );
		/* 82075AF0h case    0:*/		return 0x82075AF4;
		  /* 82075AF4h */ case    1:  		/* or R11, R11, R10 */
		/* 82075AF4h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075AF4h case    1:*/		return 0x82075AF8;
		  /* 82075AF8h */ case    2:  		/* stwu R23, <#[R3 + 4]> */
		/* 82075AF8h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075AF8h case    2:*/		return 0x82075AFC;
		  /* 82075AFCh */ case    3:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075AFCh case    3:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075AFCh case    3:*/		return 0x82075B00;
		  /* 82075B00h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B00h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B00h case    4:*/		return 0x82075B04;
		  /* 82075B04h */ case    5:  		/* lbz R11, <#[R30 + 223]> */
		/* 82075B04h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000DF) );
		/* 82075B04h case    5:*/		return 0x82075B08;
		  /* 82075B08h */ case    6:  		/* or R11, R11, R10 */
		/* 82075B08h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075B08h case    6:*/		return 0x82075B0C;
		  /* 82075B0Ch */ case    7:  		/* stwu R22, <#[R3 + 4]> */
		/* 82075B0Ch case    7:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B0Ch case    7:*/		return 0x82075B10;
		  /* 82075B10h */ case    8:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075B10h case    8:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075B10h case    8:*/		return 0x82075B14;
		  /* 82075B14h */ case    9:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B14h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B14h case    9:*/		return 0x82075B18;
		  /* 82075B18h */ case   10:  		/* lbz R11, <#[R30 + 227]> */
		/* 82075B18h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E3) );
		/* 82075B18h case   10:*/		return 0x82075B1C;
		  /* 82075B1Ch */ case   11:  		/* or R11, R11, R10 */
		/* 82075B1Ch case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075B1Ch case   11:*/		return 0x82075B20;
		  /* 82075B20h */ case   12:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075B20h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B20h case   12:*/		return 0x82075B24;
		  /* 82075B24h */ case   13:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075B24h case   13:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075B24h case   13:*/		return 0x82075B28;
		  /* 82075B28h */ case   14:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B28h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B28h case   14:*/		return 0x82075B2C;
		  /* 82075B2Ch */ case   15:  		/* lbz R11, <#[R30 + 231]> */
		/* 82075B2Ch case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000E7) );
		/* 82075B2Ch case   15:*/		return 0x82075B30;
		  /* 82075B30h */ case   16:  		/* or R11, R11, R10 */
		/* 82075B30h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075B30h case   16:*/		return 0x82075B34;
		  /* 82075B34h */ case   17:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075B34h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B34h case   17:*/		return 0x82075B38;
		  /* 82075B38h */ case   18:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075B38h case   18:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075B38h case   18:*/		return 0x82075B3C;
		  /* 82075B3Ch */ case   19:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B3Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B3Ch case   19:*/		return 0x82075B40;
		  /* 82075B40h */ case   20:  		/* lbz R11, <#[R30 + 235]> */
		/* 82075B40h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000EB) );
		/* 82075B40h case   20:*/		return 0x82075B44;
		  /* 82075B44h */ case   21:  		/* or R11, R11, R10 */
		/* 82075B44h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075B44h case   21:*/		return 0x82075B48;
		  /* 82075B48h */ case   22:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075B48h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B48h case   22:*/		return 0x82075B4C;
		  /* 82075B4Ch */ case   23:  		/* rlwinm R10, R11, 0, 0, 23 */
		/* 82075B4Ch case   23:*/		cpu::op::rlwinm<0,0,0,23>(regs,&regs.R10,regs.R11);
		/* 82075B4Ch case   23:*/		return 0x82075B50;
		  /* 82075B50h */ case   24:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B50h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B50h case   24:*/		return 0x82075B54;
		  /* 82075B54h */ case   25:  		/* lbz R11, <#[R30 + 239]> */
		/* 82075B54h case   25:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x000000EF) );
		/* 82075B54h case   25:*/		return 0x82075B58;
		  /* 82075B58h */ case   26:  		/* or R11, R11, R10 */
		/* 82075B58h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82075B58h case   26:*/		return 0x82075B5C;
		  /* 82075B5Ch */ case   27:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075B5Ch case   27:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B5Ch case   27:*/		return 0x82075B60;
		  /* 82075B60h */ case   28:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B60h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B60h case   28:*/		return 0x82075B64;
		  /* 82075B64h */ case   29:  		/* lwz R11, <#[R31 + 56]> */
		/* 82075B64h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82075B64h case   29:*/		return 0x82075B68;
		  /* 82075B68h */ case   30:  		/* cmplw CR6, R3, R11 */
		/* 82075B68h case   30:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82075B68h case   30:*/		return 0x82075B6C;
		  /* 82075B6Ch */ case   31:  		/* stw R3, <#[R31 + 48]> */
		/* 82075B6Ch case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82075B6Ch case   31:*/		return 0x82075B70;
		  /* 82075B70h */ case   32:  		/* bc 4, CR6_GT, 12 */
		/* 82075B70h case   32:*/		if ( !regs.CR[6].gt ) { return 0x82075B7C;  }
		/* 82075B70h case   32:*/		return 0x82075B74;
		  /* 82075B74h */ case   33:  		/* mr R3, R31 */
		/* 82075B74h case   33:*/		regs.R3 = regs.R31;
		/* 82075B74h case   33:*/		return 0x82075B78;
		  /* 82075B78h */ case   34:  		/* bl -6768 */
		/* 82075B78h case   34:*/		regs.LR = 0x82075B7C; return 0x82074108;
		/* 82075B78h case   34:*/		return 0x82075B7C;
	}
	return 0x82075B7C;
} // Block from 82075AF0h-82075B7Ch (35 instructions)

//////////////////////////////////////////////////////
// Block at 82075B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075B7C);
		  /* 82075B7Ch */ case    0:  		/* li R11, 501 */
		/* 82075B7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1F5);
		/* 82075B7Ch case    0:*/		return 0x82075B80;
		  /* 82075B80h */ case    1:  		/* li R10, 0 */
		/* 82075B80h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82075B80h case    1:*/		return 0x82075B84;
		  /* 82075B84h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B84h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B84h case    2:*/		return 0x82075B88;
		  /* 82075B88h */ case    3:  		/* li R11, 8697 */
		/* 82075B88h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x21F9);
		/* 82075B88h case    3:*/		return 0x82075B8C;
		  /* 82075B8Ch */ case    4:  		/* li R9, 23 */
		/* 82075B8Ch case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x17);
		/* 82075B8Ch case    4:*/		return 0x82075B90;
	}
	return 0x82075B90;
} // Block from 82075B7Ch-82075B90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82075B90h
// Function '?GetCurrentGammaTable@D3D@@YAPAGH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075B90);
		  /* 82075B90h */ case    0:  		/* li R8, 501 */
		/* 82075B90h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1F5);
		/* 82075B90h case    0:*/		return 0x82075B94;
		  /* 82075B94h */ case    1:  		/* li R7, 1 */
		/* 82075B94h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82075B94h case    1:*/		return 0x82075B98;
		  /* 82075B98h */ case    2:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075B98h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B98h case    2:*/		return 0x82075B9C;
		  /* 82075B9Ch */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075B9Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075B9Ch case    3:*/		return 0x82075BA0;
		  /* 82075BA0h */ case    4:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075BA0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075BA0h case    4:*/		return 0x82075BA4;
		  /* 82075BA4h */ case    5:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075BA4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075BA4h case    5:*/		return 0x82075BA8;
		  /* 82075BA8h */ case    6:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075BA8h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075BA8h case    6:*/		return 0x82075BAC;
		  /* 82075BACh */ case    7:  		/* stw R3, <#[R31 + 48]> */
		/* 82075BACh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82075BACh case    7:*/		return 0x82075BB0;
		  /* 82075BB0h */ case    8:  		/* addi R1, R1, 176 */
		/* 82075BB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82075BB0h case    8:*/		return 0x82075BB4;
		  /* 82075BB4h */ case    9:  		/* b 112344 */
		/* 82075BB4h case    9:*/		return 0x8209128C;
		/* 82075BB4h case    9:*/		return 0x82075BB8;
		  /* 82075BB8h */ case   10:  		/* lwz R3, <#[R3 + 12]> */
		/* 82075BB8h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 82075BB8h case   10:*/		return 0x82075BBC;
		  /* 82075BBCh */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 82075BBCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82075BBCh case   11:*/		return 0x82075BC0;
		  /* 82075BC0h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 82075BC0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82075BC8;  }
		/* 82075BC0h case   12:*/		return 0x82075BC4;
		  /* 82075BC4h */ case   13:  		/* bclr 20, CR0_LT */
		/* 82075BC4h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82075BC4h case   13:*/		return 0x82075BC8;
	}
	return 0x82075BC8;
} // Block from 82075B90h-82075BC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82075BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075BC8);
		  /* 82075BC8h */ case    0:  		/* b -6528 */
		/* 82075BC8h case    0:*/		return 0x82074248;
		/* 82075BC8h case    0:*/		return 0x82075BCC;
		  /* 82075BCCh */ case    1:  		/* nop */
		/* 82075BCCh case    1:*/		cpu::op::nop();
		/* 82075BCCh case    1:*/		return 0x82075BD0;
	}
	return 0x82075BD0;
} // Block from 82075BC8h-82075BD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82075BD0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075BD0);
		  /* 82075BD0h */ case    0:  		/* mfspr R12, LR */
		/* 82075BD0h case    0:*/		regs.R12 = regs.LR;
		/* 82075BD0h case    0:*/		return 0x82075BD4;
		  /* 82075BD4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82075BD4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82075BD4h case    1:*/		return 0x82075BD8;
		  /* 82075BD8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82075BD8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82075BD8h case    2:*/		return 0x82075BDC;
		  /* 82075BDCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82075BDCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82075BDCh case    3:*/		return 0x82075BE0;
		  /* 82075BE0h */ case    4:  		/* mr R31, R3 */
		/* 82075BE0h case    4:*/		regs.R31 = regs.R3;
		/* 82075BE0h case    4:*/		return 0x82075BE4;
		  /* 82075BE4h */ case    5:  		/* lwz R3, <#[R3 + 44]> */
		/* 82075BE4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000002C) );
		/* 82075BE4h case    5:*/		return 0x82075BE8;
		  /* 82075BE8h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82075BE8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82075BE8h case    6:*/		return 0x82075BEC;
		  /* 82075BECh */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82075BECh case    7:*/		if ( regs.CR[6].eq ) { return 0x82075C00;  }
		/* 82075BECh case    7:*/		return 0x82075BF0;
		  /* 82075BF0h */ case    8:  		/* lis R4, -20096 */
		/* 82075BF0h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 82075BF0h case    8:*/		return 0x82075BF4;
		  /* 82075BF4h */ case    9:  		/* bl 75588 */
		/* 82075BF4h case    9:*/		regs.LR = 0x82075BF8; return 0x82088338;
		/* 82075BF4h case    9:*/		return 0x82075BF8;
		  /* 82075BF8h */ case   10:  		/* li R11, 0 */
		/* 82075BF8h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82075BF8h case   10:*/		return 0x82075BFC;
		  /* 82075BFCh */ case   11:  		/* stw R11, <#[R31 + 44]> */
		/* 82075BFCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82075BFCh case   11:*/		return 0x82075C00;
	}
	return 0x82075C00;
} // Block from 82075BD0h-82075C00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82075C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C00);
		  /* 82075C00h */ case    0:  		/* addi R1, R1, 96 */
		/* 82075C00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82075C00h case    0:*/		return 0x82075C04;
		  /* 82075C04h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82075C04h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82075C04h case    1:*/		return 0x82075C08;
		  /* 82075C08h */ case    2:  		/* mtspr LR, R12 */
		/* 82075C08h case    2:*/		regs.LR = regs.R12;
		/* 82075C08h case    2:*/		return 0x82075C0C;
		  /* 82075C0Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82075C0Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82075C0Ch case    3:*/		return 0x82075C10;
		  /* 82075C10h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82075C10h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82075C10h case    4:*/		return 0x82075C14;
	}
	return 0x82075C14;
} // Block from 82075C00h-82075C14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82075C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C14);
		  /* 82075C14h */ case    0:  		/* nop */
		/* 82075C14h case    0:*/		cpu::op::nop();
		/* 82075C14h case    0:*/		return 0x82075C18;
	}
	return 0x82075C18;
} // Block from 82075C14h-82075C18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82075C18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C18);
		  /* 82075C18h */ case    0:  		/* mfspr R12, LR */
		/* 82075C18h case    0:*/		regs.R12 = regs.LR;
		/* 82075C18h case    0:*/		return 0x82075C1C;
		  /* 82075C1Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82075C1Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82075C1Ch case    1:*/		return 0x82075C20;
		  /* 82075C20h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82075C20h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82075C20h case    2:*/		return 0x82075C24;
		  /* 82075C24h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82075C24h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82075C24h case    3:*/		return 0x82075C28;
		  /* 82075C28h */ case    4:  		/* mr R31, R3 */
		/* 82075C28h case    4:*/		regs.R31 = regs.R3;
		/* 82075C28h case    4:*/		return 0x82075C2C;
		  /* 82075C2Ch */ case    5:  		/* lwz R3, <#[R3 + 40]> */
		/* 82075C2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000028) );
		/* 82075C2Ch case    5:*/		return 0x82075C30;
		  /* 82075C30h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82075C30h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82075C30h case    6:*/		return 0x82075C34;
		  /* 82075C34h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 82075C34h case    7:*/		if ( regs.CR[6].eq ) { return 0x82075C48;  }
		/* 82075C34h case    7:*/		return 0x82075C38;
		  /* 82075C38h */ case    8:  		/* lis R4, -20096 */
		/* 82075C38h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 82075C38h case    8:*/		return 0x82075C3C;
		  /* 82075C3Ch */ case    9:  		/* bl 75516 */
		/* 82075C3Ch case    9:*/		regs.LR = 0x82075C40; return 0x82088338;
		/* 82075C3Ch case    9:*/		return 0x82075C40;
		  /* 82075C40h */ case   10:  		/* li R11, 0 */
		/* 82075C40h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82075C40h case   10:*/		return 0x82075C44;
		  /* 82075C44h */ case   11:  		/* stw R11, <#[R31 + 40]> */
		/* 82075C44h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82075C44h case   11:*/		return 0x82075C48;
	}
	return 0x82075C48;
} // Block from 82075C18h-82075C48h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82075C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C48);
		  /* 82075C48h */ case    0:  		/* addi R1, R1, 96 */
		/* 82075C48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82075C48h case    0:*/		return 0x82075C4C;
		  /* 82075C4Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82075C4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82075C4Ch case    1:*/		return 0x82075C50;
		  /* 82075C50h */ case    2:  		/* mtspr LR, R12 */
		/* 82075C50h case    2:*/		regs.LR = regs.R12;
		/* 82075C50h case    2:*/		return 0x82075C54;
		  /* 82075C54h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82075C54h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82075C54h case    3:*/		return 0x82075C58;
		  /* 82075C58h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82075C58h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82075C58h case    4:*/		return 0x82075C5C;
	}
	return 0x82075C5C;
} // Block from 82075C48h-82075C5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82075C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C5C);
		  /* 82075C5Ch */ case    0:  		/* nop */
		/* 82075C5Ch case    0:*/		cpu::op::nop();
		/* 82075C5Ch case    0:*/		return 0x82075C60;
	}
	return 0x82075C60;
} // Block from 82075C5Ch-82075C60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82075C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C60);
		  /* 82075C60h */ case    0:  		/* mfspr R12, LR */
		/* 82075C60h case    0:*/		regs.R12 = regs.LR;
		/* 82075C60h case    0:*/		return 0x82075C64;
		  /* 82075C64h */ case    1:  		/* bl 112088 */
		/* 82075C64h case    1:*/		regs.LR = 0x82075C68; return 0x8209123C;
		/* 82075C64h case    1:*/		return 0x82075C68;
		  /* 82075C68h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82075C68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82075C68h case    2:*/		return 0x82075C6C;
		  /* 82075C6Ch */ case    3:  		/* mr R30, R3 */
		/* 82075C6Ch case    3:*/		regs.R30 = regs.R3;
		/* 82075C6Ch case    3:*/		return 0x82075C70;
		  /* 82075C70h */ case    4:  		/* lwz R3, <#[R4 + 12]> */
		/* 82075C70h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x0000000C) );
		/* 82075C70h case    4:*/		return 0x82075C74;
		  /* 82075C74h */ case    5:  		/* mr R29, R4 */
		/* 82075C74h case    5:*/		regs.R29 = regs.R4;
		/* 82075C74h case    5:*/		return 0x82075C78;
		  /* 82075C78h */ case    6:  		/* mr R31, R5 */
		/* 82075C78h case    6:*/		regs.R31 = regs.R5;
		/* 82075C78h case    6:*/		return 0x82075C7C;
		  /* 82075C7Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82075C7Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82075C7Ch case    7:*/		return 0x82075C80;
		  /* 82075C80h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 82075C80h case    8:*/		if ( regs.CR[6].eq ) { return 0x82075C88;  }
		/* 82075C80h case    8:*/		return 0x82075C84;
		  /* 82075C84h */ case    9:  		/* bl -11916 */
		/* 82075C84h case    9:*/		regs.LR = 0x82075C88; return 0x82072DF8;
		/* 82075C84h case    9:*/		return 0x82075C88;
	}
	return 0x82075C88;
} // Block from 82075C60h-82075C88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82075C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075C88);
		  /* 82075C88h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82075C88h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82075C88h case    0:*/		return 0x82075C8C;
		  /* 82075C8Ch */ case    1:  		/* rlwinm R28, R31, 31, 31, 31 */
		/* 82075C8Ch case    1:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R28,regs.R31);
		/* 82075C8Ch case    1:*/		return 0x82075C90;
		  /* 82075C90h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82075C90h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82075CA0;  }
		/* 82075C90h case    2:*/		return 0x82075C94;
		  /* 82075C94h */ case    3:  		/* lbz R11, <#[R30 + 11072]> */
		/* 82075C94h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00002B40) );
		/* 82075C94h case    3:*/		return 0x82075C98;
		  /* 82075C98h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 24 */
		/* 82075C98h case    4:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R11,regs.R11);
		/* 82075C98h case    4:*/		return 0x82075C9C;
		  /* 82075C9Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82075C9Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82075CA8;  }
		/* 82075C9Ch case    5:*/		return 0x82075CA0;
	}
	return 0x82075CA0;
} // Block from 82075C88h-82075CA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82075CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075CA0);
		  /* 82075CA0h */ case    0:  		/* mr R3, R30 */
		/* 82075CA0h case    0:*/		regs.R3 = regs.R30;
		/* 82075CA0h case    0:*/		return 0x82075CA4;
		  /* 82075CA4h */ case    1:  		/* bl 29284 */
		/* 82075CA4h case    1:*/		regs.LR = 0x82075CA8; return 0x8207CF08;
		/* 82075CA4h case    1:*/		return 0x82075CA8;
	}
	return 0x82075CA8;
} // Block from 82075CA0h-82075CA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82075CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075CA8);
		  /* 82075CA8h */ case    0:  		/* rlwinm. R11, R31, 0, 29, 29 */
		/* 82075CA8h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R31);
		/* 82075CA8h case    0:*/		return 0x82075CAC;
		  /* 82075CACh */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 82075CACh case    1:*/		if ( regs.CR[0].eq ) { return 0x82075CE0;  }
		/* 82075CACh case    1:*/		return 0x82075CB0;
		  /* 82075CB0h */ case    2:  		/* lwz R11, <#[R30 + 56]> */
		/* 82075CB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82075CB0h case    2:*/		return 0x82075CB4;
		  /* 82075CB4h */ case    3:  		/* lwz R3, <#[R30 + 48]> */
		/* 82075CB4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 82075CB4h case    3:*/		return 0x82075CB8;
		  /* 82075CB8h */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 82075CB8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82075CB8h case    4:*/		return 0x82075CBC;
		  /* 82075CBCh */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 82075CBCh case    5:*/		if ( !regs.CR[6].gt ) { return 0x82075CC8;  }
		/* 82075CBCh case    5:*/		return 0x82075CC0;
		  /* 82075CC0h */ case    6:  		/* mr R3, R30 */
		/* 82075CC0h case    6:*/		regs.R3 = regs.R30;
		/* 82075CC0h case    6:*/		return 0x82075CC4;
		  /* 82075CC4h */ case    7:  		/* bl -7100 */
		/* 82075CC4h case    7:*/		regs.LR = 0x82075CC8; return 0x82074108;
		/* 82075CC4h case    7:*/		return 0x82075CC8;
	}
	return 0x82075CC8;
} // Block from 82075CA8h-82075CC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82075CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075CC8);
		  /* 82075CC8h */ case    0:  		/* lis R11, -16384 */
		/* 82075CC8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82075CC8h case    0:*/		return 0x82075CCC;
		  /* 82075CCCh */ case    1:  		/* li R10, 0 */
		/* 82075CCCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82075CCCh case    1:*/		return 0x82075CD0;
		  /* 82075CD0h */ case    2:  		/* ori R11, R11, 9728 */
		/* 82075CD0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2600);
		/* 82075CD0h case    2:*/		return 0x82075CD4;
		  /* 82075CD4h */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 82075CD4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075CD4h case    3:*/		return 0x82075CD8;
		  /* 82075CD8h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 82075CD8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075CD8h case    4:*/		return 0x82075CDC;
		  /* 82075CDCh */ case    5:  		/* stw R3, <#[R30 + 48]> */
		/* 82075CDCh case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 82075CDCh case    5:*/		return 0x82075CE0;
	}
	return 0x82075CE0;
} // Block from 82075CC8h-82075CE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82075CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075CE0);
		  /* 82075CE0h */ case    0:  		/* li R4, 360 */
		/* 82075CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x168);
		/* 82075CE0h case    0:*/		return 0x82075CE4;
		  /* 82075CE4h */ case    1:  		/* lwz R31, <#[R29 + 4]> */
		/* 82075CE4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 82075CE4h case    1:*/		return 0x82075CE8;
		  /* 82075CE8h */ case    2:  		/* mr R3, R30 */
		/* 82075CE8h case    2:*/		regs.R3 = regs.R30;
		/* 82075CE8h case    2:*/		return 0x82075CEC;
		  /* 82075CECh */ case    3:  		/* bl -6572 */
		/* 82075CECh case    3:*/		regs.LR = 0x82075CF0; return 0x82074340;
		/* 82075CECh case    3:*/		return 0x82075CF0;
		  /* 82075CF0h */ case    4:  		/* oris R5, R28, 49153 */
		/* 82075CF0h case    4:*/		cpu::op::oris<0>(regs,&regs.R5,regs.R28,0xC001);
		/* 82075CF0h case    4:*/		return 0x82075CF4;
		  /* 82075CF4h */ case    5:  		/* addi R11, R31, 4 */
		/* 82075CF4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82075CF4h case    5:*/		return 0x82075CF8;
		  /* 82075CF8h */ case    6:  		/* ori R5, R5, 15872 */
		/* 82075CF8h case    6:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3E00);
		/* 82075CF8h case    6:*/		return 0x82075CFC;
		  /* 82075CFCh */ case    7:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075CFCh case    7:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075CFCh case    7:*/		return 0x82075D00;
		  /* 82075D00h */ case    8:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075D00h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D00h case    8:*/		return 0x82075D04;
		  /* 82075D04h */ case    9:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075D04h case    9:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075D04h case    9:*/		return 0x82075D08;
		  /* 82075D08h */ case   10:  		/* addi R10, R10, 512 */
		/* 82075D08h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82075D08h case   10:*/		return 0x82075D0C;
		  /* 82075D0Ch */ case   11:  		/* li R8, 487 */
		/* 82075D0Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x1E7);
		/* 82075D0Ch case   11:*/		return 0x82075D10;
		  /* 82075D10h */ case   12:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82075D10h case   12:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82075D10h case   12:*/		return 0x82075D14;
		  /* 82075D14h */ case   13:  		/* rlwinm R9, R31, 12, 20, 31 */
		/* 82075D14h case   13:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R31);
		/* 82075D14h case   13:*/		return 0x82075D18;
		  /* 82075D18h */ case   14:  		/* add R11, R10, R11 */
		/* 82075D18h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82075D18h case   14:*/		return 0x82075D1C;
		  /* 82075D1Ch */ case   15:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075D1Ch case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D1Ch case   15:*/		return 0x82075D20;
		  /* 82075D20h */ case   16:  		/* addi R9, R9, 512 */
		/* 82075D20h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82075D20h case   16:*/		return 0x82075D24;
		  /* 82075D24h */ case   17:  		/* ori R8, R11, 2 */
		/* 82075D24h case   17:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2);
		/* 82075D24h case   17:*/		return 0x82075D28;
		  /* 82075D28h */ case   18:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075D28h case   18:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075D28h case   18:*/		return 0x82075D2C;
		  /* 82075D2Ch */ case   19:  		/* li R7, 488 */
		/* 82075D2Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x1E8);
		/* 82075D2Ch case   19:*/		return 0x82075D30;
		  /* 82075D30h */ case   20:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075D30h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D30h case   20:*/		return 0x82075D34;
		  /* 82075D34h */ case   21:  		/* rlwinm R10, R31, 0, 3, 31 */
		/* 82075D34h case   21:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R31);
		/* 82075D34h case   21:*/		return 0x82075D38;
		  /* 82075D38h */ case   22:  		/* addi R11, R31, 12 */
		/* 82075D38h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xC);
		/* 82075D38h case   22:*/		return 0x82075D3C;
		  /* 82075D3Ch */ case   23:  		/* add R9, R9, R10 */
		/* 82075D3Ch case   23:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82075D3Ch case   23:*/		return 0x82075D40;
		  /* 82075D40h */ case   24:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075D40h case   24:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075D40h case   24:*/		return 0x82075D44;
		  /* 82075D44h */ case   25:  		/* ori R8, R9, 2 */
		/* 82075D44h case   25:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R9,0x2);
		/* 82075D44h case   25:*/		return 0x82075D48;
		  /* 82075D48h */ case   26:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075D48h case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D48h case   26:*/		return 0x82075D4C;
		  /* 82075D4Ch */ case   27:  		/* addi R9, R10, 512 */
		/* 82075D4Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075D4Ch case   27:*/		return 0x82075D50;
		  /* 82075D50h */ case   28:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075D50h case   28:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075D50h case   28:*/		return 0x82075D54;
		  /* 82075D54h */ case   29:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075D54h case   29:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075D54h case   29:*/		return 0x82075D58;
		  /* 82075D58h */ case   30:  		/* li R6, 919 */
		/* 82075D58h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x397);
		/* 82075D58h case   30:*/		return 0x82075D5C;
		  /* 82075D5Ch */ case   31:  		/* add R10, R9, R10 */
		/* 82075D5Ch case   31:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82075D5Ch case   31:*/		return 0x82075D60;
		  /* 82075D60h */ case   32:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075D60h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D60h case   32:*/		return 0x82075D64;
		  /* 82075D64h */ case   33:  		/* addi R11, R31, 8 */
		/* 82075D64h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 82075D64h case   33:*/		return 0x82075D68;
		  /* 82075D68h */ case   34:  		/* ori R4, R10, 2 */
		/* 82075D68h case   34:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 82075D68h case   34:*/		return 0x82075D6C;
		  /* 82075D6Ch */ case   35:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075D6Ch case   35:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075D6Ch case   35:*/		return 0x82075D70;
		  /* 82075D70h */ case   36:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075D70h case   36:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075D70h case   36:*/		return 0x82075D74;
		  /* 82075D74h */ case   37:  		/* addi R10, R10, 512 */
		/* 82075D74h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82075D74h case   37:*/		return 0x82075D78;
		  /* 82075D78h */ case   38:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075D78h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D78h case   38:*/		return 0x82075D7C;
		  /* 82075D7Ch */ case   39:  		/* li R28, 920 */
		/* 82075D7Ch case   39:*/		cpu::op::li<0>(regs,&regs.R28,0x398);
		/* 82075D7Ch case   39:*/		return 0x82075D80;
		  /* 82075D80h */ case   40:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82075D80h case   40:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82075D80h case   40:*/		return 0x82075D84;
		  /* 82075D84h */ case   41:  		/* li R27, 921 */
		/* 82075D84h case   41:*/		cpu::op::li<0>(regs,&regs.R27,0x399);
		/* 82075D84h case   41:*/		return 0x82075D88;
		  /* 82075D88h */ case   42:  		/* add R10, R10, R11 */
		/* 82075D88h case   42:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82075D88h case   42:*/		return 0x82075D8C;
		  /* 82075D8Ch */ case   43:  		/* addi R11, R31, 20 */
		/* 82075D8Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x14);
		/* 82075D8Ch case   43:*/		return 0x82075D90;
		  /* 82075D90h */ case   44:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075D90h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075D90h case   44:*/		return 0x82075D94;
		  /* 82075D94h */ case   45:  		/* ori R7, R10, 2 */
		/* 82075D94h case   45:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82075D94h case   45:*/		return 0x82075D98;
		  /* 82075D98h */ case   46:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075D98h case   46:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075D98h case   46:*/		return 0x82075D9C;
		  /* 82075D9Ch */ case   47:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075D9Ch case   47:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075D9Ch case   47:*/		return 0x82075DA0;
		  /* 82075DA0h */ case   48:  		/* addi R10, R10, 512 */
		/* 82075DA0h case   48:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82075DA0h case   48:*/		return 0x82075DA4;
		  /* 82075DA4h */ case   49:  		/* li R26, 922 */
		/* 82075DA4h case   49:*/		cpu::op::li<0>(regs,&regs.R26,0x39A);
		/* 82075DA4h case   49:*/		return 0x82075DA8;
		  /* 82075DA8h */ case   50:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075DA8h case   50:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DA8h case   50:*/		return 0x82075DAC;
		  /* 82075DACh */ case   51:  		/* rlwinm R9, R10, 0, 19, 19 */
		/* 82075DACh case   51:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R10);
		/* 82075DACh case   51:*/		return 0x82075DB0;
		  /* 82075DB0h */ case   52:  		/* addi R10, R31, 16 */
		/* 82075DB0h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x10);
		/* 82075DB0h case   52:*/		return 0x82075DB4;
		  /* 82075DB4h */ case   53:  		/* add R11, R9, R11 */
		/* 82075DB4h case   53:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82075DB4h case   53:*/		return 0x82075DB8;
		  /* 82075DB8h */ case   54:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82075DB8h case   54:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82075DB8h case   54:*/		return 0x82075DBC;
		  /* 82075DBCh */ case   55:  		/* ori R9, R11, 2 */
		/* 82075DBCh case   55:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x2);
		/* 82075DBCh case   55:*/		return 0x82075DC0;
		  /* 82075DC0h */ case   56:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075DC0h case   56:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DC0h case   56:*/		return 0x82075DC4;
		  /* 82075DC4h */ case   57:  		/* addi R8, R8, 512 */
		/* 82075DC4h case   57:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82075DC4h case   57:*/		return 0x82075DC8;
		  /* 82075DC8h */ case   58:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82075DC8h case   58:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82075DC8h case   58:*/		return 0x82075DCC;
		  /* 82075DCCh */ case   59:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82075DCCh case   59:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82075DCCh case   59:*/		return 0x82075DD0;
		  /* 82075DD0h */ case   60:  		/* add R10, R10, R11 */
		/* 82075DD0h case   60:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82075DD0h case   60:*/		return 0x82075DD4;
		  /* 82075DD4h */ case   61:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075DD4h case   61:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DD4h case   61:*/		return 0x82075DD8;
		  /* 82075DD8h */ case   62:  		/* addi R11, R31, 28 */
		/* 82075DD8h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1C);
		/* 82075DD8h case   62:*/		return 0x82075DDC;
		  /* 82075DDCh */ case   63:  		/* ori R8, R10, 2 */
		/* 82075DDCh case   63:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82075DDCh case   63:*/		return 0x82075DE0;
		  /* 82075DE0h */ case   64:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075DE0h case   64:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075DE0h case   64:*/		return 0x82075DE4;
		  /* 82075DE4h */ case   65:  		/* stwu R28, <#[R3 + 4]> */
		/* 82075DE4h case   65:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DE4h case   65:*/		return 0x82075DE8;
		  /* 82075DE8h */ case   66:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075DE8h case   66:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DE8h case   66:*/		return 0x82075DEC;
		  /* 82075DECh */ case   67:  		/* li R7, 3532 */
		/* 82075DECh case   67:*/		cpu::op::li<0>(regs,&regs.R7,0xDCC);
		/* 82075DECh case   67:*/		return 0x82075DF0;
	}
	return 0x82075DF0;
} // Block from 82075CE0h-82075DF0h (68 instructions)

//////////////////////////////////////////////////////
// Block at 82075DF0h
// Function '?GammaRampCorrected@D3D@@YAXPAU_D3DGAMMARAMP@@PBU2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075DF0);
		  /* 82075DF0h */ case    0:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075DF0h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DF0h case    0:*/		return 0x82075DF4;
		  /* 82075DF4h */ case    1:  		/* stwu R27, <#[R3 + 4]> */
		/* 82075DF4h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DF4h case    1:*/		return 0x82075DF8;
		  /* 82075DF8h */ case    2:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075DF8h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075DF8h case    2:*/		return 0x82075DFC;
		  /* 82075DFCh */ case    3:  		/* addi R9, R10, 512 */
		/* 82075DFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075DFCh case    3:*/		return 0x82075E00;
		  /* 82075E00h */ case    4:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075E00h case    4:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075E00h case    4:*/		return 0x82075E04;
		  /* 82075E04h */ case    5:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075E04h case    5:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075E04h case    5:*/		return 0x82075E08;
		  /* 82075E08h */ case    6:  		/* addi R11, R31, 24 */
		/* 82075E08h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x18);
		/* 82075E08h case    6:*/		return 0x82075E0C;
		  /* 82075E0Ch */ case    7:  		/* add R10, R9, R10 */
		/* 82075E0Ch case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82075E0Ch case    7:*/		return 0x82075E10;
		  /* 82075E10h */ case    8:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075E10h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E10h case    8:*/		return 0x82075E14;
		  /* 82075E14h */ case    9:  		/* ori R6, R10, 2 */
		/* 82075E14h case    9:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 82075E14h case    9:*/		return 0x82075E18;
		  /* 82075E18h */ case   10:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075E18h case   10:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075E18h case   10:*/		return 0x82075E1C;
		  /* 82075E1Ch */ case   11:  		/* stwu R26, <#[R3 + 4]> */
		/* 82075E1Ch case   11:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E1Ch case   11:*/		return 0x82075E20;
		  /* 82075E20h */ case   12:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075E20h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E20h case   12:*/		return 0x82075E24;
		  /* 82075E24h */ case   13:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075E24h case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E24h case   13:*/		return 0x82075E28;
		  /* 82075E28h */ case   14:  		/* addi R9, R10, 512 */
		/* 82075E28h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075E28h case   14:*/		return 0x82075E2C;
		  /* 82075E2Ch */ case   15:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075E2Ch case   15:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075E2Ch case   15:*/		return 0x82075E30;
		  /* 82075E30h */ case   16:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075E30h case   16:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075E30h case   16:*/		return 0x82075E34;
		  /* 82075E34h */ case   17:  		/* li R4, 3533 */
		/* 82075E34h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0xDCD);
		/* 82075E34h case   17:*/		return 0x82075E38;
		  /* 82075E38h */ case   18:  		/* addi R11, R31, 36 */
		/* 82075E38h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x24);
		/* 82075E38h case   18:*/		return 0x82075E3C;
		  /* 82075E3Ch */ case   19:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075E3Ch case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E3Ch case   19:*/		return 0x82075E40;
		  /* 82075E40h */ case   20:  		/* add R9, R9, R10 */
		/* 82075E40h case   20:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82075E40h case   20:*/		return 0x82075E44;
		  /* 82075E44h */ case   21:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075E44h case   21:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075E44h case   21:*/		return 0x82075E48;
		  /* 82075E48h */ case   22:  		/* ori R28, R9, 2 */
		/* 82075E48h case   22:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82075E48h case   22:*/		return 0x82075E4C;
		  /* 82075E4Ch */ case   23:  		/* addi R10, R10, 512 */
		/* 82075E4Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82075E4Ch case   23:*/		return 0x82075E50;
		  /* 82075E50h */ case   24:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075E50h case   24:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075E50h case   24:*/		return 0x82075E54;
		  /* 82075E54h */ case   25:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075E54h case   25:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E54h case   25:*/		return 0x82075E58;
		  /* 82075E58h */ case   26:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82075E58h case   26:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82075E58h case   26:*/		return 0x82075E5C;
		  /* 82075E5Ch */ case   27:  		/* li R27, 3534 */
		/* 82075E5Ch case   27:*/		cpu::op::li<0>(regs,&regs.R27,0xDCE);
		/* 82075E5Ch case   27:*/		return 0x82075E60;
		  /* 82075E60h */ case   28:  		/* add R11, R10, R11 */
		/* 82075E60h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82075E60h case   28:*/		return 0x82075E64;
		  /* 82075E64h */ case   29:  		/* li R7, 3535 */
		/* 82075E64h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0xDCF);
		/* 82075E64h case   29:*/		return 0x82075E68;
		  /* 82075E68h */ case   30:  		/* ori R26, R11, 2 */
		/* 82075E68h case   30:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R11,0x2);
		/* 82075E68h case   30:*/		return 0x82075E6C;
		  /* 82075E6Ch */ case   31:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075E6Ch case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E6Ch case   31:*/		return 0x82075E70;
		  /* 82075E70h */ case   32:  		/* addi R11, R31, 32 */
		/* 82075E70h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x20);
		/* 82075E70h case   32:*/		return 0x82075E74;
		  /* 82075E74h */ case   33:  		/* li R25, 3536 */
		/* 82075E74h case   33:*/		cpu::op::li<0>(regs,&regs.R25,0xDD0);
		/* 82075E74h case   33:*/		return 0x82075E78;
		  /* 82075E78h */ case   34:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075E78h case   34:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075E78h case   34:*/		return 0x82075E7C;
		  /* 82075E7Ch */ case   35:  		/* li R6, 3537 */
		/* 82075E7Ch case   35:*/		cpu::op::li<0>(regs,&regs.R6,0xDD1);
		/* 82075E7Ch case   35:*/		return 0x82075E80;
		  /* 82075E80h */ case   36:  		/* addi R9, R10, 512 */
		/* 82075E80h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075E80h case   36:*/		return 0x82075E84;
		  /* 82075E84h */ case   37:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075E84h case   37:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E84h case   37:*/		return 0x82075E88;
	}
	return 0x82075E88;
} // Block from 82075DF0h-82075E88h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82075E88h
// Function '?GammaPWLCorrected@D3D@@YAXPAU_D3DPWLGAMMA@@PBU2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075E88);
		  /* 82075E88h */ case    0:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075E88h case    0:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075E88h case    0:*/		return 0x82075E8C;
		  /* 82075E8Ch */ case    1:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075E8Ch case    1:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075E8Ch case    1:*/		return 0x82075E90;
		  /* 82075E90h */ case    2:  		/* addi R11, R31, 44 */
		/* 82075E90h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2C);
		/* 82075E90h case    2:*/		return 0x82075E94;
		  /* 82075E94h */ case    3:  		/* add R10, R9, R10 */
		/* 82075E94h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82075E94h case    3:*/		return 0x82075E98;
		  /* 82075E98h */ case    4:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82075E98h case    4:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82075E98h case    4:*/		return 0x82075E9C;
		  /* 82075E9Ch */ case    5:  		/* stwu R28, <#[R3 + 4]> */
		/* 82075E9Ch case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075E9Ch case    5:*/		return 0x82075EA0;
		  /* 82075EA0h */ case    6:  		/* ori R24, R10, 2 */
		/* 82075EA0h case    6:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R10,0x2);
		/* 82075EA0h case    6:*/		return 0x82075EA4;
		  /* 82075EA4h */ case    7:  		/* addi R10, R31, 40 */
		/* 82075EA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x28);
		/* 82075EA4h case    7:*/		return 0x82075EA8;
		  /* 82075EA8h */ case    8:  		/* addi R9, R9, 512 */
		/* 82075EA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82075EA8h case    8:*/		return 0x82075EAC;
		  /* 82075EACh */ case    9:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82075EACh case    9:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82075EACh case    9:*/		return 0x82075EB0;
		  /* 82075EB0h */ case   10:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075EB0h case   10:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075EB0h case   10:*/		return 0x82075EB4;
		  /* 82075EB4h */ case   11:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075EB4h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075EB4h case   11:*/		return 0x82075EB8;
		  /* 82075EB8h */ case   12:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075EB8h case   12:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075EB8h case   12:*/		return 0x82075EBC;
		  /* 82075EBCh */ case   13:  		/* addi R8, R8, 512 */
		/* 82075EBCh case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82075EBCh case   13:*/		return 0x82075EC0;
		  /* 82075EC0h */ case   14:  		/* add R9, R9, R11 */
		/* 82075EC0h case   14:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82075EC0h case   14:*/		return 0x82075EC4;
		  /* 82075EC4h */ case   15:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82075EC4h case   15:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82075EC4h case   15:*/		return 0x82075EC8;
		  /* 82075EC8h */ case   16:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82075EC8h case   16:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82075EC8h case   16:*/		return 0x82075ECC;
		  /* 82075ECCh */ case   17:  		/* stwu R27, <#[R3 + 4]> */
		/* 82075ECCh case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075ECCh case   17:*/		return 0x82075ED0;
		  /* 82075ED0h */ case   18:  		/* ori R9, R9, 2 */
		/* 82075ED0h case   18:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82075ED0h case   18:*/		return 0x82075ED4;
		  /* 82075ED4h */ case   19:  		/* add R10, R10, R11 */
		/* 82075ED4h case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82075ED4h case   19:*/		return 0x82075ED8;
		  /* 82075ED8h */ case   20:  		/* addi R11, R31, 52 */
		/* 82075ED8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x34);
		/* 82075ED8h case   20:*/		return 0x82075EDC;
		  /* 82075EDCh */ case   21:  		/* ori R8, R10, 2 */
		/* 82075EDCh case   21:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82075EDCh case   21:*/		return 0x82075EE0;
		  /* 82075EE0h */ case   22:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075EE0h case   22:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075EE0h case   22:*/		return 0x82075EE4;
		  /* 82075EE4h */ case   23:  		/* stwu R26, <#[R3 + 4]> */
		/* 82075EE4h case   23:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075EE4h case   23:*/		return 0x82075EE8;
		  /* 82075EE8h */ case   24:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075EE8h case   24:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075EE8h case   24:*/		return 0x82075EEC;
		  /* 82075EECh */ case   25:  		/* addi R10, R10, 512 */
		/* 82075EECh case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82075EECh case   25:*/		return 0x82075EF0;
		  /* 82075EF0h */ case   26:  		/* li R4, 3538 */
		/* 82075EF0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0xDD2);
		/* 82075EF0h case   26:*/		return 0x82075EF4;
		  /* 82075EF4h */ case   27:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82075EF4h case   27:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82075EF4h case   27:*/		return 0x82075EF8;
		  /* 82075EF8h */ case   28:  		/* li R28, 3539 */
		/* 82075EF8h case   28:*/		cpu::op::li<0>(regs,&regs.R28,0xDD3);
		/* 82075EF8h case   28:*/		return 0x82075EFC;
		  /* 82075EFCh */ case   29:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075EFCh case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075EFCh case   29:*/		return 0x82075F00;
		  /* 82075F00h */ case   30:  		/* add R10, R10, R11 */
		/* 82075F00h case   30:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82075F00h case   30:*/		return 0x82075F04;
		  /* 82075F04h */ case   31:  		/* addi R11, R31, 48 */
		/* 82075F04h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x30);
		/* 82075F04h case   31:*/		return 0x82075F08;
		  /* 82075F08h */ case   32:  		/* ori R27, R10, 2 */
		/* 82075F08h case   32:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R10,0x2);
		/* 82075F08h case   32:*/		return 0x82075F0C;
		  /* 82075F0Ch */ case   33:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075F0Ch case   33:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075F0Ch case   33:*/		return 0x82075F10;
		  /* 82075F10h */ case   34:  		/* li R26, 3148 */
		/* 82075F10h case   34:*/		cpu::op::li<0>(regs,&regs.R26,0xC4C);
		/* 82075F10h case   34:*/		return 0x82075F14;
		  /* 82075F14h */ case   35:  		/* stwu R7, <#[R3 + 4]> */
		/* 82075F14h case   35:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F14h case   35:*/		return 0x82075F18;
		  /* 82075F18h */ case   36:  		/* stwu R24, <#[R3 + 4]> */
		/* 82075F18h case   36:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F18h case   36:*/		return 0x82075F1C;
		  /* 82075F1Ch */ case   37:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075F1Ch case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F1Ch case   37:*/		return 0x82075F20;
		  /* 82075F20h */ case   38:  		/* stwu R25, <#[R3 + 4]> */
		/* 82075F20h case   38:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F20h case   38:*/		return 0x82075F24;
		  /* 82075F24h */ case   39:  		/* stwu R9, <#[R3 + 4]> */
		/* 82075F24h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F24h case   39:*/		return 0x82075F28;
		  /* 82075F28h */ case   40:  		/* addi R9, R10, 512 */
		/* 82075F28h case   40:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075F28h case   40:*/		return 0x82075F2C;
		  /* 82075F2Ch */ case   41:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075F2Ch case   41:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075F2Ch case   41:*/		return 0x82075F30;
		  /* 82075F30h */ case   42:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075F30h case   42:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075F30h case   42:*/		return 0x82075F34;
		  /* 82075F34h */ case   43:  		/* addi R11, R31, 60 */
		/* 82075F34h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3C);
		/* 82075F34h case   43:*/		return 0x82075F38;
		  /* 82075F38h */ case   44:  		/* add R9, R9, R10 */
		/* 82075F38h case   44:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82075F38h case   44:*/		return 0x82075F3C;
		  /* 82075F3Ch */ case   45:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075F3Ch case   45:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075F3Ch case   45:*/		return 0x82075F40;
		  /* 82075F40h */ case   46:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075F40h case   46:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F40h case   46:*/		return 0x82075F44;
		  /* 82075F44h */ case   47:  		/* ori R25, R9, 2 */
		/* 82075F44h case   47:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R9,0x2);
		/* 82075F44h case   47:*/		return 0x82075F48;
		  /* 82075F48h */ case   48:  		/* addi R9, R10, 512 */
		/* 82075F48h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82075F48h case   48:*/		return 0x82075F4C;
		  /* 82075F4Ch */ case   49:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82075F4Ch case   49:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82075F4Ch case   49:*/		return 0x82075F50;
		  /* 82075F50h */ case   50:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82075F50h case   50:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82075F50h case   50:*/		return 0x82075F54;
		  /* 82075F54h */ case   51:  		/* stwu R6, <#[R3 + 4]> */
		/* 82075F54h case   51:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F54h case   51:*/		return 0x82075F58;
		  /* 82075F58h */ case   52:  		/* addi R11, R31, 56 */
		/* 82075F58h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x38);
		/* 82075F58h case   52:*/		return 0x82075F5C;
		  /* 82075F5Ch */ case   53:  		/* add R10, R9, R10 */
		/* 82075F5Ch case   53:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82075F5Ch case   53:*/		return 0x82075F60;
		  /* 82075F60h */ case   54:  		/* ori R24, R10, 2 */
		/* 82075F60h case   54:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R10,0x2);
		/* 82075F60h case   54:*/		return 0x82075F64;
		  /* 82075F64h */ case   55:  		/* stwu R8, <#[R3 + 4]> */
		/* 82075F64h case   55:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F64h case   55:*/		return 0x82075F68;
		  /* 82075F68h */ case   56:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075F68h case   56:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F68h case   56:*/		return 0x82075F6C;
		  /* 82075F6Ch */ case   57:  		/* addi R10, R31, 68 */
		/* 82075F6Ch case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x44);
		/* 82075F6Ch case   57:*/		return 0x82075F70;
		  /* 82075F70h */ case   58:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82075F70h case   58:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82075F70h case   58:*/		return 0x82075F74;
		  /* 82075F74h */ case   59:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82075F74h case   59:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82075F74h case   59:*/		return 0x82075F78;
		  /* 82075F78h */ case   60:  		/* addi R9, R31, 64 */
		/* 82075F78h case   60:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x40);
		/* 82075F78h case   60:*/		return 0x82075F7C;
		  /* 82075F7Ch */ case   61:  		/* addi R8, R8, 512 */
		/* 82075F7Ch case   61:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82075F7Ch case   61:*/		return 0x82075F80;
		  /* 82075F80h */ case   62:  		/* stwu R4, <#[R3 + 4]> */
		/* 82075F80h case   62:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F80h case   62:*/		return 0x82075F84;
		  /* 82075F84h */ case   63:  		/* addi R7, R7, 512 */
		/* 82075F84h case   63:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 82075F84h case   63:*/		return 0x82075F88;
		  /* 82075F88h */ case   64:  		/* rlwinm R6, R9, 12, 20, 31 */
		/* 82075F88h case   64:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R6,regs.R9);
		/* 82075F88h case   64:*/		return 0x82075F8C;
		  /* 82075F8Ch */ case   65:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82075F8Ch case   65:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82075F8Ch case   65:*/		return 0x82075F90;
		  /* 82075F90h */ case   66:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82075F90h case   66:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82075F90h case   66:*/		return 0x82075F94;
		  /* 82075F94h */ case   67:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 82075F94h case   67:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 82075F94h case   67:*/		return 0x82075F98;
		  /* 82075F98h */ case   68:  		/* stwu R27, <#[R3 + 4]> */
		/* 82075F98h case   68:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075F98h case   68:*/		return 0x82075F9C;
		  /* 82075F9Ch */ case   69:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 82075F9Ch case   69:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 82075F9Ch case   69:*/		return 0x82075FA0;
		  /* 82075FA0h */ case   70:  		/* addi R6, R6, 512 */
		/* 82075FA0h case   70:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x200);
		/* 82075FA0h case   70:*/		return 0x82075FA4;
		  /* 82075FA4h */ case   71:  		/* add R7, R7, R10 */
		/* 82075FA4h case   71:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 82075FA4h case   71:*/		return 0x82075FA8;
		  /* 82075FA8h */ case   72:  		/* add R8, R8, R11 */
		/* 82075FA8h case   72:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 82075FA8h case   72:*/		return 0x82075FAC;
		  /* 82075FACh */ case   73:  		/* rlwinm R11, R9, 0, 3, 31 */
		/* 82075FACh case   73:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R9);
		/* 82075FACh case   73:*/		return 0x82075FB0;
		  /* 82075FB0h */ case   74:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075FB0h case   74:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FB0h case   74:*/		return 0x82075FB4;
		  /* 82075FB4h */ case   75:  		/* rlwinm R10, R6, 0, 19, 19 */
		/* 82075FB4h case   75:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R6);
		/* 82075FB4h case   75:*/		return 0x82075FB8;
		  /* 82075FB8h */ case   76:  		/* li R9, 3149 */
		/* 82075FB8h case   76:*/		cpu::op::li<0>(regs,&regs.R9,0xC4D);
		/* 82075FB8h case   76:*/		return 0x82075FBC;
		  /* 82075FBCh */ case   77:  		/* add R10, R10, R11 */
		/* 82075FBCh case   77:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82075FBCh case   77:*/		return 0x82075FC0;
		  /* 82075FC0h */ case   78:  		/* addi R11, R31, 76 */
		/* 82075FC0h case   78:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4C);
		/* 82075FC0h case   78:*/		return 0x82075FC4;
		  /* 82075FC4h */ case   79:  		/* ori R8, R8, 2 */
		/* 82075FC4h case   79:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2);
		/* 82075FC4h case   79:*/		return 0x82075FC8;
	}
	return 0x82075FC8;
} // Block from 82075E88h-82075FC8h (80 instructions)

//////////////////////////////////////////////////////
// Block at 82075FC8h
// Function '?SetRawGammaRamp@D3D@@YAXPAVCDevice@1@PBU_D3DGAMMARAMP@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82075FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82075FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82075FC8);
		  /* 82075FC8h */ case    0:  		/* stwu R28, <#[R3 + 4]> */
		/* 82075FC8h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FC8h case    0:*/		return 0x82075FCC;
		  /* 82075FCCh */ case    1:  		/* ori R28, R10, 2 */
		/* 82075FCCh case    1:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 82075FCCh case    1:*/		return 0x82075FD0;
		  /* 82075FD0h */ case    2:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82075FD0h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82075FD0h case    2:*/		return 0x82075FD4;
		  /* 82075FD4h */ case    3:  		/* li R6, 3150 */
		/* 82075FD4h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xC4E);
		/* 82075FD4h case    3:*/		return 0x82075FD8;
		  /* 82075FD8h */ case    4:  		/* ori R7, R7, 2 */
		/* 82075FD8h case    4:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2);
		/* 82075FD8h case    4:*/		return 0x82075FDC;
		  /* 82075FDCh */ case    5:  		/* li R4, 3151 */
		/* 82075FDCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0xC4F);
		/* 82075FDCh case    5:*/		return 0x82075FE0;
		  /* 82075FE0h */ case    6:  		/* stwu R25, <#[R3 + 4]> */
		/* 82075FE0h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FE0h case    6:*/		return 0x82075FE4;
		  /* 82075FE4h */ case    7:  		/* li R27, 3152 */
		/* 82075FE4h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0xC50);
		/* 82075FE4h case    7:*/		return 0x82075FE8;
		  /* 82075FE8h */ case    8:  		/* li R23, 3155 */
		/* 82075FE8h case    8:*/		cpu::op::li<0>(regs,&regs.R23,0xC53);
		/* 82075FE8h case    8:*/		return 0x82075FEC;
		  /* 82075FECh */ case    9:  		/* stwu R5, <#[R3 + 4]> */
		/* 82075FECh case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FECh case    9:*/		return 0x82075FF0;
		  /* 82075FF0h */ case   10:  		/* stwu R26, <#[R3 + 4]> */
		/* 82075FF0h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FF0h case   10:*/		return 0x82075FF4;
		  /* 82075FF4h */ case   11:  		/* li R26, 3153 */
		/* 82075FF4h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0xC51);
		/* 82075FF4h case   11:*/		return 0x82075FF8;
		  /* 82075FF8h */ case   12:  		/* stwu R24, <#[R3 + 4]> */
		/* 82075FF8h case   12:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82075FF8h case   12:*/		return 0x82075FFC;
		  /* 82075FFCh */ case   13:  		/* li R24, 3154 */
		/* 82075FFCh case   13:*/		cpu::op::li<0>(regs,&regs.R24,0xC52);
		/* 82075FFCh case   13:*/		return 0x82076000;
		  /* 82076000h */ case   14:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076000h case   14:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076000h case   14:*/		return 0x82076004;
		  /* 82076004h */ case   15:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076004h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076004h case   15:*/		return 0x82076008;
		  /* 82076008h */ case   16:  		/* addi R9, R10, 512 */
		/* 82076008h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076008h case   16:*/		return 0x8207600C;
		  /* 8207600Ch */ case   17:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207600Ch case   17:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207600Ch case   17:*/		return 0x82076010;
		  /* 82076010h */ case   18:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076010h case   18:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076010h case   18:*/		return 0x82076014;
		  /* 82076014h */ case   19:  		/* addi R11, R31, 72 */
		/* 82076014h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x48);
		/* 82076014h case   19:*/		return 0x82076018;
		  /* 82076018h */ case   20:  		/* add R10, R9, R10 */
		/* 82076018h case   20:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076018h case   20:*/		return 0x8207601C;
		  /* 8207601Ch */ case   21:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207601Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207601Ch case   21:*/		return 0x82076020;
		  /* 82076020h */ case   22:  		/* ori R25, R10, 2 */
		/* 82076020h case   22:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 82076020h case   22:*/		return 0x82076024;
		  /* 82076024h */ case   23:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076024h case   23:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076024h case   23:*/		return 0x82076028;
		  /* 82076028h */ case   24:  		/* addi R9, R10, 512 */
		/* 82076028h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076028h case   24:*/		return 0x8207602C;
		  /* 8207602Ch */ case   25:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207602Ch case   25:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207602Ch case   25:*/		return 0x82076030;
		  /* 82076030h */ case   26:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076030h case   26:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076030h case   26:*/		return 0x82076034;
		  /* 82076034h */ case   27:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076034h case   27:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076034h case   27:*/		return 0x82076038;
		  /* 82076038h */ case   28:  		/* addi R11, R31, 84 */
		/* 82076038h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x54);
		/* 82076038h case   28:*/		return 0x8207603C;
		  /* 8207603Ch */ case   29:  		/* add R9, R9, R10 */
		/* 8207603Ch case   29:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207603Ch case   29:*/		return 0x82076040;
		  /* 82076040h */ case   30:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076040h case   30:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076040h case   30:*/		return 0x82076044;
		  /* 82076044h */ case   31:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076044h case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076044h case   31:*/		return 0x82076048;
		  /* 82076048h */ case   32:  		/* ori R6, R9, 2 */
		/* 82076048h case   32:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 82076048h case   32:*/		return 0x8207604C;
		  /* 8207604Ch */ case   33:  		/* addi R9, R10, 512 */
		/* 8207604Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8207604Ch case   33:*/		return 0x82076050;
		  /* 82076050h */ case   34:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076050h case   34:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076050h case   34:*/		return 0x82076054;
		  /* 82076054h */ case   35:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076054h case   35:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076054h case   35:*/		return 0x82076058;
		  /* 82076058h */ case   36:  		/* addi R11, R31, 80 */
		/* 82076058h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x50);
		/* 82076058h case   36:*/		return 0x8207605C;
		  /* 8207605Ch */ case   37:  		/* add R10, R9, R10 */
		/* 8207605Ch case   37:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8207605Ch case   37:*/		return 0x82076060;
		  /* 82076060h */ case   38:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076060h case   38:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076060h case   38:*/		return 0x82076064;
		  /* 82076064h */ case   39:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82076064h case   39:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82076064h case   39:*/		return 0x82076068;
		  /* 82076068h */ case   40:  		/* ori R7, R10, 2 */
		/* 82076068h case   40:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82076068h case   40:*/		return 0x8207606C;
		  /* 8207606Ch */ case   41:  		/* addi R10, R9, 512 */
		/* 8207606Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x200);
		/* 8207606Ch case   41:*/		return 0x82076070;
		  /* 82076070h */ case   42:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076070h case   42:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076070h case   42:*/		return 0x82076074;
		  /* 82076074h */ case   43:  		/* rlwinm R9, R10, 0, 19, 19 */
		/* 82076074h case   43:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R10);
		/* 82076074h case   43:*/		return 0x82076078;
		  /* 82076078h */ case   44:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076078h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076078h case   44:*/		return 0x8207607C;
		  /* 8207607Ch */ case   45:  		/* addi R10, R31, 92 */
		/* 8207607Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x5C);
		/* 8207607Ch case   45:*/		return 0x82076080;
		  /* 82076080h */ case   46:  		/* add R11, R9, R11 */
		/* 82076080h case   46:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82076080h case   46:*/		return 0x82076084;
		  /* 82076084h */ case   47:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82076084h case   47:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82076084h case   47:*/		return 0x82076088;
		  /* 82076088h */ case   48:  		/* ori R9, R11, 2 */
		/* 82076088h case   48:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x2);
		/* 82076088h case   48:*/		return 0x8207608C;
		  /* 8207608Ch */ case   49:  		/* addi R8, R8, 512 */
		/* 8207608Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 8207608Ch case   49:*/		return 0x82076090;
		  /* 82076090h */ case   50:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076090h case   50:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076090h case   50:*/		return 0x82076094;
		  /* 82076094h */ case   51:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82076094h case   51:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82076094h case   51:*/		return 0x82076098;
		  /* 82076098h */ case   52:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82076098h case   52:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82076098h case   52:*/		return 0x8207609C;
		  /* 8207609Ch */ case   53:  		/* li R8, 3658 */
		/* 8207609Ch case   53:*/		cpu::op::li<0>(regs,&regs.R8,0xE4A);
		/* 8207609Ch case   53:*/		return 0x820760A0;
		  /* 820760A0h */ case   54:  		/* add R10, R10, R11 */
		/* 820760A0h case   54:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820760A0h case   54:*/		return 0x820760A4;
		  /* 820760A4h */ case   55:  		/* li R4, 3657 */
		/* 820760A4h case   55:*/		cpu::op::li<0>(regs,&regs.R4,0xE49);
		/* 820760A4h case   55:*/		return 0x820760A8;
		  /* 820760A8h */ case   56:  		/* addi R11, R31, 88 */
		/* 820760A8h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x58);
		/* 820760A8h case   56:*/		return 0x820760AC;
		  /* 820760ACh */ case   57:  		/* stwu R28, <#[R3 + 4]> */
		/* 820760ACh case   57:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760ACh case   57:*/		return 0x820760B0;
		  /* 820760B0h */ case   58:  		/* ori R28, R10, 2 */
		/* 820760B0h case   58:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 820760B0h case   58:*/		return 0x820760B4;
		  /* 820760B4h */ case   59:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820760B4h case   59:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820760B4h case   59:*/		return 0x820760B8;
	}
	return 0x820760B8;
} // Block from 82075FC8h-820760B8h (60 instructions)

//////////////////////////////////////////////////////
// Block at 820760B8h
// Function '?SetRawPWLGamma@D3D@@YAXPAVCDevice@1@PBU_D3DPWLGAMMA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820760B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820760B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820760B8);
		  /* 820760B8h */ case    0:  		/* addi R10, R10, 512 */
		/* 820760B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820760B8h case    0:*/		return 0x820760BC;
		  /* 820760BCh */ case    1:  		/* stwu R5, <#[R3 + 4]> */
		/* 820760BCh case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760BCh case    1:*/		return 0x820760C0;
		  /* 820760C0h */ case    2:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820760C0h case    2:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820760C0h case    2:*/		return 0x820760C4;
		  /* 820760C4h */ case    3:  		/* stwu R27, <#[R3 + 4]> */
		/* 820760C4h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760C4h case    3:*/		return 0x820760C8;
		  /* 820760C8h */ case    4:  		/* li R27, 3664 */
		/* 820760C8h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0xE50);
		/* 820760C8h case    4:*/		return 0x820760CC;
		  /* 820760CCh */ case    5:  		/* stwu R25, <#[R3 + 4]> */
		/* 820760CCh case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760CCh case    5:*/		return 0x820760D0;
		  /* 820760D0h */ case    6:  		/* stwu R5, <#[R3 + 4]> */
		/* 820760D0h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760D0h case    6:*/		return 0x820760D4;
		  /* 820760D4h */ case    7:  		/* stwu R26, <#[R3 + 4]> */
		/* 820760D4h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760D4h case    7:*/		return 0x820760D8;
		  /* 820760D8h */ case    8:  		/* li R26, 3663 */
		/* 820760D8h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0xE4F);
		/* 820760D8h case    8:*/		return 0x820760DC;
		  /* 820760DCh */ case    9:  		/* stwu R6, <#[R3 + 4]> */
		/* 820760DCh case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760DCh case    9:*/		return 0x820760E0;
		  /* 820760E0h */ case   10:  		/* stwu R5, <#[R3 + 4]> */
		/* 820760E0h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760E0h case   10:*/		return 0x820760E4;
		  /* 820760E4h */ case   11:  		/* stwu R24, <#[R3 + 4]> */
		/* 820760E4h case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760E4h case   11:*/		return 0x820760E8;
		  /* 820760E8h */ case   12:  		/* li R24, 3667 */
		/* 820760E8h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0xE53);
		/* 820760E8h case   12:*/		return 0x820760EC;
		  /* 820760ECh */ case   13:  		/* stwu R7, <#[R3 + 4]> */
		/* 820760ECh case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760ECh case   13:*/		return 0x820760F0;
		  /* 820760F0h */ case   14:  		/* li R7, 3661 */
		/* 820760F0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xE4D);
		/* 820760F0h case   14:*/		return 0x820760F4;
		  /* 820760F4h */ case   15:  		/* stwu R5, <#[R3 + 4]> */
		/* 820760F4h case   15:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760F4h case   15:*/		return 0x820760F8;
		  /* 820760F8h */ case   16:  		/* stwu R23, <#[R3 + 4]> */
		/* 820760F8h case   16:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760F8h case   16:*/		return 0x820760FC;
		  /* 820760FCh */ case   17:  		/* stwu R9, <#[R3 + 4]> */
		/* 820760FCh case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820760FCh case   17:*/		return 0x82076100;
		  /* 82076100h */ case   18:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 82076100h case   18:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 82076100h case   18:*/		return 0x82076104;
		  /* 82076104h */ case   19:  		/* addi R11, R31, 100 */
		/* 82076104h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x64);
		/* 82076104h case   19:*/		return 0x82076108;
		  /* 82076108h */ case   20:  		/* add R10, R10, R9 */
		/* 82076108h case   20:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82076108h case   20:*/		return 0x8207610C;
		  /* 8207610Ch */ case   21:  		/* ori R6, R10, 2 */
		/* 8207610Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 8207610Ch case   21:*/		return 0x82076110;
		  /* 82076110h */ case   22:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076110h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076110h case   22:*/		return 0x82076114;
		  /* 82076114h */ case   23:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076114h case   23:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076114h case   23:*/		return 0x82076118;
		  /* 82076118h */ case   24:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076118h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076118h case   24:*/		return 0x8207611C;
		  /* 8207611Ch */ case   25:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 8207611Ch case   25:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 8207611Ch case   25:*/		return 0x82076120;
		  /* 82076120h */ case   26:  		/* addi R11, R31, 96 */
		/* 82076120h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x60);
		/* 82076120h case   26:*/		return 0x82076124;
		  /* 82076124h */ case   27:  		/* addi R9, R8, 512 */
		/* 82076124h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 82076124h case   27:*/		return 0x82076128;
		  /* 82076128h */ case   28:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076128h case   28:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076128h case   28:*/		return 0x8207612C;
		  /* 8207612Ch */ case   29:  		/* stwu R28, <#[R3 + 4]> */
		/* 8207612Ch case   29:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207612Ch case   29:*/		return 0x82076130;
		  /* 82076130h */ case   30:  		/* li R28, 3660 */
		/* 82076130h case   30:*/		cpu::op::li<0>(regs,&regs.R28,0xE4C);
		/* 82076130h case   30:*/		return 0x82076134;
		  /* 82076134h */ case   31:  		/* add R10, R9, R10 */
		/* 82076134h case   31:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076134h case   31:*/		return 0x82076138;
		  /* 82076138h */ case   32:  		/* ori R8, R10, 2 */
		/* 82076138h case   32:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076138h case   32:*/		return 0x8207613C;
		  /* 8207613Ch */ case   33:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207613Ch case   33:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207613Ch case   33:*/		return 0x82076140;
		  /* 82076140h */ case   34:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076140h case   34:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076140h case   34:*/		return 0x82076144;
		  /* 82076144h */ case   35:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076144h case   35:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076144h case   35:*/		return 0x82076148;
		  /* 82076148h */ case   36:  		/* addi R10, R10, 512 */
		/* 82076148h case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076148h case   36:*/		return 0x8207614C;
		  /* 8207614Ch */ case   37:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 8207614Ch case   37:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 8207614Ch case   37:*/		return 0x82076150;
		  /* 82076150h */ case   38:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076150h case   38:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076150h case   38:*/		return 0x82076154;
		  /* 82076154h */ case   39:  		/* add R10, R10, R11 */
		/* 82076154h case   39:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076154h case   39:*/		return 0x82076158;
		  /* 82076158h */ case   40:  		/* addi R11, R31, 108 */
		/* 82076158h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x6C);
		/* 82076158h case   40:*/		return 0x8207615C;
		  /* 8207615Ch */ case   41:  		/* ori R4, R10, 2 */
		/* 8207615Ch case   41:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 8207615Ch case   41:*/		return 0x82076160;
		  /* 82076160h */ case   42:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076160h case   42:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076160h case   42:*/		return 0x82076164;
		  /* 82076164h */ case   43:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076164h case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076164h case   43:*/		return 0x82076168;
		  /* 82076168h */ case   44:  		/* addi R9, R10, 512 */
		/* 82076168h case   44:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076168h case   44:*/		return 0x8207616C;
		  /* 8207616Ch */ case   45:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207616Ch case   45:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207616Ch case   45:*/		return 0x82076170;
		  /* 82076170h */ case   46:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076170h case   46:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076170h case   46:*/		return 0x82076174;
		  /* 82076174h */ case   47:  		/* addi R11, R31, 104 */
		/* 82076174h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x68);
		/* 82076174h case   47:*/		return 0x82076178;
		  /* 82076178h */ case   48:  		/* add R9, R9, R10 */
		/* 82076178h case   48:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076178h case   48:*/		return 0x8207617C;
		  /* 8207617Ch */ case   49:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207617Ch case   49:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207617Ch case   49:*/		return 0x82076180;
		  /* 82076180h */ case   50:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076180h case   50:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076180h case   50:*/		return 0x82076184;
		  /* 82076184h */ case   51:  		/* ori R6, R9, 2 */
		/* 82076184h case   51:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 82076184h case   51:*/		return 0x82076188;
		  /* 82076188h */ case   52:  		/* addi R9, R10, 512 */
		/* 82076188h case   52:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076188h case   52:*/		return 0x8207618C;
		  /* 8207618Ch */ case   53:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207618Ch case   53:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207618Ch case   53:*/		return 0x82076190;
		  /* 82076190h */ case   54:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076190h case   54:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076190h case   54:*/		return 0x82076194;
		  /* 82076194h */ case   55:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076194h case   55:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076194h case   55:*/		return 0x82076198;
		  /* 82076198h */ case   56:  		/* addi R11, R31, 116 */
		/* 82076198h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x74);
		/* 82076198h case   56:*/		return 0x8207619C;
		  /* 8207619Ch */ case   57:  		/* add R10, R9, R10 */
		/* 8207619Ch case   57:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8207619Ch case   57:*/		return 0x820761A0;
		  /* 820761A0h */ case   58:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 820761A0h case   58:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 820761A0h case   58:*/		return 0x820761A4;
		  /* 820761A4h */ case   59:  		/* ori R25, R10, 2 */
		/* 820761A4h case   59:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 820761A4h case   59:*/		return 0x820761A8;
		  /* 820761A8h */ case   60:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820761A8h case   60:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820761A8h case   60:*/		return 0x820761AC;
		  /* 820761ACh */ case   61:  		/* stwu R8, <#[R3 + 4]> */
		/* 820761ACh case   61:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761ACh case   61:*/		return 0x820761B0;
		  /* 820761B0h */ case   62:  		/* addi R11, R10, 512 */
		/* 820761B0h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x200);
		/* 820761B0h case   62:*/		return 0x820761B4;
		  /* 820761B4h */ case   63:  		/* rlwinm R10, R11, 0, 19, 19 */
		/* 820761B4h case   63:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R11);
		/* 820761B4h case   63:*/		return 0x820761B8;
		  /* 820761B8h */ case   64:  		/* addi R11, R31, 112 */
		/* 820761B8h case   64:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x70);
		/* 820761B8h case   64:*/		return 0x820761BC;
		  /* 820761BCh */ case   65:  		/* stwu R5, <#[R3 + 4]> */
		/* 820761BCh case   65:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761BCh case   65:*/		return 0x820761C0;
		  /* 820761C0h */ case   66:  		/* add R10, R10, R9 */
		/* 820761C0h case   66:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820761C0h case   66:*/		return 0x820761C4;
		  /* 820761C4h */ case   67:  		/* ori R9, R10, 2 */
		/* 820761C4h case   67:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 820761C4h case   67:*/		return 0x820761C8;
		  /* 820761C8h */ case   68:  		/* stwu R28, <#[R3 + 4]> */
		/* 820761C8h case   68:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761C8h case   68:*/		return 0x820761CC;
		  /* 820761CCh */ case   69:  		/* stwu R4, <#[R3 + 4]> */
		/* 820761CCh case   69:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761CCh case   69:*/		return 0x820761D0;
		  /* 820761D0h */ case   70:  		/* stwu R5, <#[R3 + 4]> */
		/* 820761D0h case   70:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761D0h case   70:*/		return 0x820761D4;
		  /* 820761D4h */ case   71:  		/* stwu R27, <#[R3 + 4]> */
		/* 820761D4h case   71:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761D4h case   71:*/		return 0x820761D8;
		  /* 820761D8h */ case   72:  		/* stwu R6, <#[R3 + 4]> */
		/* 820761D8h case   72:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761D8h case   72:*/		return 0x820761DC;
		  /* 820761DCh */ case   73:  		/* stwu R5, <#[R3 + 4]> */
		/* 820761DCh case   73:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761DCh case   73:*/		return 0x820761E0;
		  /* 820761E0h */ case   74:  		/* stwu R26, <#[R3 + 4]> */
		/* 820761E0h case   74:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761E0h case   74:*/		return 0x820761E4;
		  /* 820761E4h */ case   75:  		/* stwu R25, <#[R3 + 4]> */
		/* 820761E4h case   75:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761E4h case   75:*/		return 0x820761E8;
	}
	return 0x820761E8;
} // Block from 820760B8h-820761E8h (76 instructions)

//////////////////////////////////////////////////////
// Block at 820761E8h
// Function '?SetPending_Split@D3D@@YAPAKPAVCDevice@1@PIAKK1KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820761E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820761E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820761E8);
		  /* 820761E8h */ case    0:  		/* stwu R5, <#[R3 + 4]> */
		/* 820761E8h case    0:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761E8h case    0:*/		return 0x820761EC;
		  /* 820761ECh */ case    1:  		/* stwu R24, <#[R3 + 4]> */
		/* 820761ECh case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761ECh case    1:*/		return 0x820761F0;
		  /* 820761F0h */ case    2:  		/* stwu R9, <#[R3 + 4]> */
		/* 820761F0h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820761F0h case    2:*/		return 0x820761F4;
		  /* 820761F4h */ case    3:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820761F4h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820761F4h case    3:*/		return 0x820761F8;
		  /* 820761F8h */ case    4:  		/* li R8, 3666 */
		/* 820761F8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0xE52);
		/* 820761F8h case    4:*/		return 0x820761FC;
		  /* 820761FCh */ case    5:  		/* addi R9, R10, 512 */
		/* 820761FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 820761FCh case    5:*/		return 0x82076200;
		  /* 82076200h */ case    6:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076200h case    6:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076200h case    6:*/		return 0x82076204;
		  /* 82076204h */ case    7:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076204h case    7:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076204h case    7:*/		return 0x82076208;
		  /* 82076208h */ case    8:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076208h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076208h case    8:*/		return 0x8207620C;
		  /* 8207620Ch */ case    9:  		/* addi R11, R31, 124 */
		/* 8207620Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x7C);
		/* 8207620Ch case    9:*/		return 0x82076210;
		  /* 82076210h */ case   10:  		/* add R9, R9, R10 */
		/* 82076210h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076210h case   10:*/		return 0x82076214;
		  /* 82076214h */ case   11:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076214h case   11:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076214h case   11:*/		return 0x82076218;
		  /* 82076218h */ case   12:  		/* ori R7, R9, 2 */
		/* 82076218h case   12:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R9,0x2);
		/* 82076218h case   12:*/		return 0x8207621C;
		  /* 8207621Ch */ case   13:  		/* addi R9, R10, 512 */
		/* 8207621Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8207621Ch case   13:*/		return 0x82076220;
		  /* 82076220h */ case   14:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076220h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076220h case   14:*/		return 0x82076224;
		  /* 82076224h */ case   15:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076224h case   15:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076224h case   15:*/		return 0x82076228;
		  /* 82076228h */ case   16:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076228h case   16:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076228h case   16:*/		return 0x8207622C;
		  /* 8207622Ch */ case   17:  		/* li R6, 3212 */
		/* 8207622Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0xC8C);
		/* 8207622Ch case   17:*/		return 0x82076230;
		  /* 82076230h */ case   18:  		/* add R10, R9, R10 */
		/* 82076230h case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076230h case   18:*/		return 0x82076234;
		  /* 82076234h */ case   19:  		/* addi R11, R31, 120 */
		/* 82076234h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x78);
		/* 82076234h case   19:*/		return 0x82076238;
		  /* 82076238h */ case   20:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076238h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076238h case   20:*/		return 0x8207623C;
		  /* 8207623Ch */ case   21:  		/* ori R8, R10, 2 */
		/* 8207623Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 8207623Ch case   21:*/		return 0x82076240;
		  /* 82076240h */ case   22:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076240h case   22:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076240h case   22:*/		return 0x82076244;
		  /* 82076244h */ case   23:  		/* li R4, 3213 */
		/* 82076244h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0xC8D);
		/* 82076244h case   23:*/		return 0x82076248;
		  /* 82076248h */ case   24:  		/* addi R9, R10, 512 */
		/* 82076248h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076248h case   24:*/		return 0x8207624C;
		  /* 8207624Ch */ case   25:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207624Ch case   25:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207624Ch case   25:*/		return 0x82076250;
		  /* 82076250h */ case   26:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076250h case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076250h case   26:*/		return 0x82076254;
		  /* 82076254h */ case   27:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076254h case   27:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076254h case   27:*/		return 0x82076258;
		  /* 82076258h */ case   28:  		/* addi R11, R31, 132 */
		/* 82076258h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x84);
		/* 82076258h case   28:*/		return 0x8207625C;
		  /* 8207625Ch */ case   29:  		/* add R10, R9, R10 */
		/* 8207625Ch case   29:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8207625Ch case   29:*/		return 0x82076260;
		  /* 82076260h */ case   30:  		/* li R28, 3214 */
		/* 82076260h case   30:*/		cpu::op::li<0>(regs,&regs.R28,0xC8E);
		/* 82076260h case   30:*/		return 0x82076264;
		  /* 82076264h */ case   31:  		/* ori R7, R10, 2 */
		/* 82076264h case   31:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82076264h case   31:*/		return 0x82076268;
		  /* 82076268h */ case   32:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076268h case   32:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076268h case   32:*/		return 0x8207626C;
		  /* 8207626Ch */ case   33:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207626Ch case   33:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207626Ch case   33:*/		return 0x82076270;
		  /* 82076270h */ case   34:  		/* li R27, 3215 */
		/* 82076270h case   34:*/		cpu::op::li<0>(regs,&regs.R27,0xC8F);
		/* 82076270h case   34:*/		return 0x82076274;
		  /* 82076274h */ case   35:  		/* addi R9, R10, 512 */
		/* 82076274h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076274h case   35:*/		return 0x82076278;
		  /* 82076278h */ case   36:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076278h case   36:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076278h case   36:*/		return 0x8207627C;
		  /* 8207627Ch */ case   37:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 8207627Ch case   37:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 8207627Ch case   37:*/		return 0x82076280;
		  /* 82076280h */ case   38:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076280h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076280h case   38:*/		return 0x82076284;
		  /* 82076284h */ case   39:  		/* addi R11, R31, 128 */
		/* 82076284h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x80);
		/* 82076284h case   39:*/		return 0x82076288;
		  /* 82076288h */ case   40:  		/* add R10, R9, R10 */
		/* 82076288h case   40:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076288h case   40:*/		return 0x8207628C;
		  /* 8207628Ch */ case   41:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 8207628Ch case   41:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 8207628Ch case   41:*/		return 0x82076290;
		  /* 82076290h */ case   42:  		/* ori R6, R10, 2 */
		/* 82076290h case   42:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 82076290h case   42:*/		return 0x82076294;
		  /* 82076294h */ case   43:  		/* addi R9, R9, 512 */
		/* 82076294h case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82076294h case   43:*/		return 0x82076298;
		  /* 82076298h */ case   44:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076298h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076298h case   44:*/		return 0x8207629C;
		  /* 8207629Ch */ case   45:  		/* addi R10, R31, 140 */
		/* 8207629Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x8C);
		/* 8207629Ch case   45:*/		return 0x820762A0;
	}
	return 0x820762A0;
} // Block from 820761E8h-820762A0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820762A0h
// Function '?SetPending_HiZEnable@D3D@@YA_KPAVCDevice@1@_K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820762A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820762A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820762A0);
		  /* 820762A0h */ case    0:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820762A0h case    0:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820762A0h case    0:*/		return 0x820762A4;
		  /* 820762A4h */ case    1:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 820762A4h case    1:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 820762A4h case    1:*/		return 0x820762A8;
		  /* 820762A8h */ case    2:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 820762A8h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 820762A8h case    2:*/		return 0x820762AC;
		  /* 820762ACh */ case    3:  		/* add R11, R9, R11 */
		/* 820762ACh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820762ACh case    3:*/		return 0x820762B0;
		  /* 820762B0h */ case    4:  		/* stwu R4, <#[R3 + 4]> */
		/* 820762B0h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820762B0h case    4:*/		return 0x820762B4;
		  /* 820762B4h */ case    5:  		/* addi R9, R8, 512 */
		/* 820762B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 820762B4h case    5:*/		return 0x820762B8;
		  /* 820762B8h */ case    6:  		/* ori R8, R11, 2 */
		/* 820762B8h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2);
		/* 820762B8h case    6:*/		return 0x820762BC;
		  /* 820762BCh */ case    7:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 820762BCh case    7:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 820762BCh case    7:*/		return 0x820762C0;
		  /* 820762C0h */ case    8:  		/* rlwinm R10, R9, 0, 19, 19 */
		/* 820762C0h case    8:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R9);
		/* 820762C0h case    8:*/		return 0x820762C4;
		  /* 820762C4h */ case    9:  		/* li R26, 3216 */
		/* 820762C4h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0xC90);
		/* 820762C4h case    9:*/		return 0x820762C8;
		  /* 820762C8h */ case   10:  		/* stwu R7, <#[R3 + 4]> */
		/* 820762C8h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820762C8h case   10:*/		return 0x820762CC;
		  /* 820762CCh */ case   11:  		/* add R10, R10, R11 */
		/* 820762CCh case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820762CCh case   11:*/		return 0x820762D0;
		  /* 820762D0h */ case   12:  		/* addi R11, R31, 136 */
		/* 820762D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x88);
		/* 820762D0h case   12:*/		return 0x820762D4;
		  /* 820762D4h */ case   13:  		/* ori R9, R10, 2 */
		/* 820762D4h case   13:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 820762D4h case   13:*/		return 0x820762D8;
		  /* 820762D8h */ case   14:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820762D8h case   14:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820762D8h case   14:*/		return 0x820762DC;
		  /* 820762DCh */ case   15:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820762DCh case   15:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820762DCh case   15:*/		return 0x820762E0;
		  /* 820762E0h */ case   16:  		/* stwu R5, <#[R3 + 4]> */
		/* 820762E0h case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820762E0h case   16:*/		return 0x820762E4;
		  /* 820762E4h */ case   17:  		/* addi R10, R10, 512 */
		/* 820762E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820762E4h case   17:*/		return 0x820762E8;
		  /* 820762E8h */ case   18:  		/* li R7, 3217 */
		/* 820762E8h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0xC91);
		/* 820762E8h case   18:*/		return 0x820762EC;
		  /* 820762ECh */ case   19:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820762ECh case   19:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820762ECh case   19:*/		return 0x820762F0;
		  /* 820762F0h */ case   20:  		/* add R10, R10, R11 */
		/* 820762F0h case   20:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820762F0h case   20:*/		return 0x820762F4;
		  /* 820762F4h */ case   21:  		/* stwu R28, <#[R3 + 4]> */
		/* 820762F4h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820762F4h case   21:*/		return 0x820762F8;
		  /* 820762F8h */ case   22:  		/* addi R11, R31, 148 */
		/* 820762F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x94);
		/* 820762F8h case   22:*/		return 0x820762FC;
		  /* 820762FCh */ case   23:  		/* ori R4, R10, 2 */
		/* 820762FCh case   23:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 820762FCh case   23:*/		return 0x82076300;
		  /* 82076300h */ case   24:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076300h case   24:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076300h case   24:*/		return 0x82076304;
		  /* 82076304h */ case   25:  		/* li R28, 3219 */
		/* 82076304h case   25:*/		cpu::op::li<0>(regs,&regs.R28,0xC93);
		/* 82076304h case   25:*/		return 0x82076308;
		  /* 82076308h */ case   26:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076308h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076308h case   26:*/		return 0x8207630C;
		  /* 8207630Ch */ case   27:  		/* li R6, 3218 */
		/* 8207630Ch case   27:*/		cpu::op::li<0>(regs,&regs.R6,0xC92);
		/* 8207630Ch case   27:*/		return 0x82076310;
		  /* 82076310h */ case   28:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076310h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076310h case   28:*/		return 0x82076314;
		  /* 82076314h */ case   29:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076314h case   29:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076314h case   29:*/		return 0x82076318;
		  /* 82076318h */ case   30:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076318h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076318h case   30:*/		return 0x8207631C;
		  /* 8207631Ch */ case   31:  		/* addi R8, R10, 512 */
		/* 8207631Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x200);
		/* 8207631Ch case   31:*/		return 0x82076320;
		  /* 82076320h */ case   32:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076320h case   32:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076320h case   32:*/		return 0x82076324;
		  /* 82076324h */ case   33:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076324h case   33:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076324h case   33:*/		return 0x82076328;
		  /* 82076328h */ case   34:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076328h case   34:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076328h case   34:*/		return 0x8207632C;
		  /* 8207632Ch */ case   35:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207632Ch case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207632Ch case   35:*/		return 0x82076330;
		  /* 82076330h */ case   36:  		/* rlwinm R9, R8, 0, 19, 19 */
		/* 82076330h case   36:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R8);
		/* 82076330h case   36:*/		return 0x82076334;
		  /* 82076334h */ case   37:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076334h case   37:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076334h case   37:*/		return 0x82076338;
		  /* 82076338h */ case   38:  		/* add R9, R9, R10 */
		/* 82076338h case   38:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076338h case   38:*/		return 0x8207633C;
		  /* 8207633Ch */ case   39:  		/* addi R11, R31, 144 */
		/* 8207633Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x90);
		/* 8207633Ch case   39:*/		return 0x82076340;
		  /* 82076340h */ case   40:  		/* ori R27, R9, 2 */
		/* 82076340h case   40:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R9,0x2);
		/* 82076340h case   40:*/		return 0x82076344;
		  /* 82076344h */ case   41:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076344h case   41:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076344h case   41:*/		return 0x82076348;
		  /* 82076348h */ case   42:  		/* li R25, 3228 */
		/* 82076348h case   42:*/		cpu::op::li<0>(regs,&regs.R25,0xC9C);
		/* 82076348h case   42:*/		return 0x8207634C;
		  /* 8207634Ch */ case   43:  		/* stwu R7, <#[R3 + 4]> */
		/* 8207634Ch case   43:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207634Ch case   43:*/		return 0x82076350;
		  /* 82076350h */ case   44:  		/* addi R9, R10, 512 */
		/* 82076350h case   44:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076350h case   44:*/		return 0x82076354;
		  /* 82076354h */ case   45:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076354h case   45:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076354h case   45:*/		return 0x82076358;
		  /* 82076358h */ case   46:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076358h case   46:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076358h case   46:*/		return 0x8207635C;
		  /* 8207635Ch */ case   47:  		/* addi R11, R31, 156 */
		/* 8207635Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x9C);
		/* 8207635Ch case   47:*/		return 0x82076360;
		  /* 82076360h */ case   48:  		/* add R10, R9, R10 */
		/* 82076360h case   48:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076360h case   48:*/		return 0x82076364;
		  /* 82076364h */ case   49:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076364h case   49:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076364h case   49:*/		return 0x82076368;
		  /* 82076368h */ case   50:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076368h case   50:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076368h case   50:*/		return 0x8207636C;
		  /* 8207636Ch */ case   51:  		/* ori R26, R10, 2 */
		/* 8207636Ch case   51:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R10,0x2);
		/* 8207636Ch case   51:*/		return 0x82076370;
		  /* 82076370h */ case   52:  		/* addi R10, R31, 152 */
		/* 82076370h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x98);
		/* 82076370h case   52:*/		return 0x82076374;
		  /* 82076374h */ case   53:  		/* addi R8, R8, 512 */
		/* 82076374h case   53:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076374h case   53:*/		return 0x82076378;
		  /* 82076378h */ case   54:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82076378h case   54:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82076378h case   54:*/		return 0x8207637C;
		  /* 8207637Ch */ case   55:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207637Ch case   55:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207637Ch case   55:*/		return 0x82076380;
		  /* 82076380h */ case   56:  		/* addi R9, R31, 164 */
		/* 82076380h case   56:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xA4);
		/* 82076380h case   56:*/		return 0x82076384;
		  /* 82076384h */ case   57:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076384h case   57:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076384h case   57:*/		return 0x82076388;
		  /* 82076388h */ case   58:  		/* addi R4, R7, 512 */
		/* 82076388h case   58:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R7,0x200);
		/* 82076388h case   58:*/		return 0x8207638C;
		  /* 8207638Ch */ case   59:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 8207638Ch case   59:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 8207638Ch case   59:*/		return 0x82076390;
		  /* 82076390h */ case   60:  		/* rlwinm R7, R9, 12, 20, 31 */
		/* 82076390h case   60:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R9);
		/* 82076390h case   60:*/		return 0x82076394;
		  /* 82076394h */ case   61:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076394h case   61:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076394h case   61:*/		return 0x82076398;
		  /* 82076398h */ case   62:  		/* add R24, R8, R11 */
		/* 82076398h case   62:*/		cpu::op::add<0>(regs,&regs.R24,regs.R8,regs.R11);
		/* 82076398h case   62:*/		return 0x8207639C;
		  /* 8207639Ch */ case   63:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 8207639Ch case   63:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 8207639Ch case   63:*/		return 0x820763A0;
		  /* 820763A0h */ case   64:  		/* rlwinm R8, R4, 0, 19, 19 */
		/* 820763A0h case   64:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R4);
		/* 820763A0h case   64:*/		return 0x820763A4;
		  /* 820763A4h */ case   65:  		/* addi R7, R7, 512 */
		/* 820763A4h case   65:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 820763A4h case   65:*/		return 0x820763A8;
		  /* 820763A8h */ case   66:  		/* rlwinm R10, R9, 0, 3, 31 */
		/* 820763A8h case   66:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R9);
		/* 820763A8h case   66:*/		return 0x820763AC;
		  /* 820763ACh */ case   67:  		/* stwu R27, <#[R3 + 4]> */
		/* 820763ACh case   67:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763ACh case   67:*/		return 0x820763B0;
		  /* 820763B0h */ case   68:  		/* add R11, R8, R11 */
		/* 820763B0h case   68:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 820763B0h case   68:*/		return 0x820763B4;
		  /* 820763B4h */ case   69:  		/* rlwinm R9, R7, 0, 19, 19 */
		/* 820763B4h case   69:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R7);
		/* 820763B4h case   69:*/		return 0x820763B8;
		  /* 820763B8h */ case   70:  		/* ori R4, R24, 2 */
		/* 820763B8h case   70:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R24,0x2);
		/* 820763B8h case   70:*/		return 0x820763BC;
		  /* 820763BCh */ case   71:  		/* add R10, R9, R10 */
		/* 820763BCh case   71:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820763BCh case   71:*/		return 0x820763C0;
		  /* 820763C0h */ case   72:  		/* ori R7, R11, 2 */
		/* 820763C0h case   72:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R11,0x2);
		/* 820763C0h case   72:*/		return 0x820763C4;
		  /* 820763C4h */ case   73:  		/* stwu R5, <#[R3 + 4]> */
		/* 820763C4h case   73:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763C4h case   73:*/		return 0x820763C8;
		  /* 820763C8h */ case   74:  		/* addi R11, R31, 160 */
		/* 820763C8h case   74:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xA0);
		/* 820763C8h case   74:*/		return 0x820763CC;
		  /* 820763CCh */ case   75:  		/* li R8, 3229 */
		/* 820763CCh case   75:*/		cpu::op::li<0>(regs,&regs.R8,0xC9D);
		/* 820763CCh case   75:*/		return 0x820763D0;
		  /* 820763D0h */ case   76:  		/* li R6, 3230 */
		/* 820763D0h case   76:*/		cpu::op::li<0>(regs,&regs.R6,0xC9E);
		/* 820763D0h case   76:*/		return 0x820763D4;
		  /* 820763D4h */ case   77:  		/* li R27, 3232 */
		/* 820763D4h case   77:*/		cpu::op::li<0>(regs,&regs.R27,0xCA0);
		/* 820763D4h case   77:*/		return 0x820763D8;
		  /* 820763D8h */ case   78:  		/* li R24, 3234 */
		/* 820763D8h case   78:*/		cpu::op::li<0>(regs,&regs.R24,0xCA2);
		/* 820763D8h case   78:*/		return 0x820763DC;
		  /* 820763DCh */ case   79:  		/* stwu R28, <#[R3 + 4]> */
		/* 820763DCh case   79:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763DCh case   79:*/		return 0x820763E0;
		  /* 820763E0h */ case   80:  		/* li R28, 3231 */
		/* 820763E0h case   80:*/		cpu::op::li<0>(regs,&regs.R28,0xC9F);
		/* 820763E0h case   80:*/		return 0x820763E4;
		  /* 820763E4h */ case   81:  		/* stwu R26, <#[R3 + 4]> */
		/* 820763E4h case   81:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763E4h case   81:*/		return 0x820763E8;
		  /* 820763E8h */ case   82:  		/* stwu R5, <#[R3 + 4]> */
		/* 820763E8h case   82:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763E8h case   82:*/		return 0x820763EC;
		  /* 820763ECh */ case   83:  		/* stwu R25, <#[R3 + 4]> */
		/* 820763ECh case   83:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763ECh case   83:*/		return 0x820763F0;
		  /* 820763F0h */ case   84:  		/* li R25, 3233 */
		/* 820763F0h case   84:*/		cpu::op::li<0>(regs,&regs.R25,0xCA1);
		/* 820763F0h case   84:*/		return 0x820763F4;
		  /* 820763F4h */ case   85:  		/* stwu R4, <#[R3 + 4]> */
		/* 820763F4h case   85:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820763F4h case   85:*/		return 0x820763F8;
		  /* 820763F8h */ case   86:  		/* ori R4, R10, 2 */
		/* 820763F8h case   86:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 820763F8h case   86:*/		return 0x820763FC;
		  /* 820763FCh */ case   87:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820763FCh case   87:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820763FCh case   87:*/		return 0x82076400;
		  /* 82076400h */ case   88:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076400h case   88:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076400h case   88:*/		return 0x82076404;
		  /* 82076404h */ case   89:  		/* addi R10, R10, 512 */
		/* 82076404h case   89:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076404h case   89:*/		return 0x82076408;
		  /* 82076408h */ case   90:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076408h case   90:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076408h case   90:*/		return 0x8207640C;
		  /* 8207640Ch */ case   91:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207640Ch case   91:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207640Ch case   91:*/		return 0x82076410;
		  /* 82076410h */ case   92:  		/* add R11, R10, R11 */
		/* 82076410h case   92:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82076410h case   92:*/		return 0x82076414;
		  /* 82076414h */ case   93:  		/* ori R26, R11, 2 */
		/* 82076414h case   93:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R11,0x2);
		/* 82076414h case   93:*/		return 0x82076418;
		  /* 82076418h */ case   94:  		/* addi R11, R31, 172 */
		/* 82076418h case   94:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xAC);
		/* 82076418h case   94:*/		return 0x8207641C;
		  /* 8207641Ch */ case   95:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207641Ch case   95:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207641Ch case   95:*/		return 0x82076420;
		  /* 82076420h */ case   96:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076420h case   96:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076420h case   96:*/		return 0x82076424;
		  /* 82076424h */ case   97:  		/* addi R9, R10, 512 */
		/* 82076424h case   97:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076424h case   97:*/		return 0x82076428;
		  /* 82076428h */ case   98:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076428h case   98:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076428h case   98:*/		return 0x8207642C;
		  /* 8207642Ch */ case   99:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207642Ch case   99:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207642Ch case   99:*/		return 0x82076430;
		  /* 82076430h */ case  100:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076430h case  100:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076430h case  100:*/		return 0x82076434;
		  /* 82076434h */ case  101:  		/* addi R11, R31, 168 */
		/* 82076434h case  101:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xA8);
		/* 82076434h case  101:*/		return 0x82076438;
		  /* 82076438h */ case  102:  		/* add R9, R9, R10 */
		/* 82076438h case  102:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076438h case  102:*/		return 0x8207643C;
		  /* 8207643Ch */ case  103:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207643Ch case  103:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207643Ch case  103:*/		return 0x82076440;
		  /* 82076440h */ case  104:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076440h case  104:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076440h case  104:*/		return 0x82076444;
		  /* 82076444h */ case  105:  		/* rlwinm R8, R11, 0, 3, 31 */
		/* 82076444h case  105:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R8,regs.R11);
		/* 82076444h case  105:*/		return 0x82076448;
		  /* 82076448h */ case  106:  		/* addi R10, R10, 512 */
		/* 82076448h case  106:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076448h case  106:*/		return 0x8207644C;
		  /* 8207644Ch */ case  107:  		/* addi R11, R31, 180 */
		/* 8207644Ch case  107:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xB4);
		/* 8207644Ch case  107:*/		return 0x82076450;
		  /* 82076450h */ case  108:  		/* rlwinm R7, R10, 0, 19, 19 */
		/* 82076450h case  108:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R10);
		/* 82076450h case  108:*/		return 0x82076454;
		  /* 82076454h */ case  109:  		/* addi R10, R31, 176 */
		/* 82076454h case  109:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xB0);
		/* 82076454h case  109:*/		return 0x82076458;
		  /* 82076458h */ case  110:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076458h case  110:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076458h case  110:*/		return 0x8207645C;
		  /* 8207645Ch */ case  111:  		/* add R8, R7, R8 */
		/* 8207645Ch case  111:*/		cpu::op::add<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8207645Ch case  111:*/		return 0x82076460;
		  /* 82076460h */ case  112:  		/* ori R23, R9, 2 */
		/* 82076460h case  112:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R9,0x2);
		/* 82076460h case  112:*/		return 0x82076464;
		  /* 82076464h */ case  113:  		/* ori R22, R8, 2 */
		/* 82076464h case  113:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R8,0x2);
		/* 82076464h case  113:*/		return 0x82076468;
		  /* 82076468h */ case  114:  		/* addi R9, R31, 188 */
		/* 82076468h case  114:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xBC);
		/* 82076468h case  114:*/		return 0x8207646C;
		  /* 8207646Ch */ case  115:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 8207646Ch case  115:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 8207646Ch case  115:*/		return 0x82076470;
		  /* 82076470h */ case  116:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82076470h case  116:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82076470h case  116:*/		return 0x82076474;
		  /* 82076474h */ case  117:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076474h case  117:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076474h case  117:*/		return 0x82076478;
		  /* 82076478h */ case  118:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076478h case  118:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076478h case  118:*/		return 0x8207647C;
		  /* 8207647Ch */ case  119:  		/* addi R8, R8, 512 */
		/* 8207647Ch case  119:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 8207647Ch case  119:*/		return 0x82076480;
		  /* 82076480h */ case  120:  		/* addi R7, R7, 512 */
		/* 82076480h case  120:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 82076480h case  120:*/		return 0x82076484;
		  /* 82076484h */ case  121:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076484h case  121:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076484h case  121:*/		return 0x82076488;
		  /* 82076488h */ case  122:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 82076488h case  122:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 82076488h case  122:*/		return 0x8207648C;
		  /* 8207648Ch */ case  123:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 8207648Ch case  123:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 8207648Ch case  123:*/		return 0x82076490;
		  /* 82076490h */ case  124:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076490h case  124:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076490h case  124:*/		return 0x82076494;
		  /* 82076494h */ case  125:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 82076494h case  125:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 82076494h case  125:*/		return 0x82076498;
	}
	return 0x82076498;
} // Block from 820762A0h-82076498h (126 instructions)

//////////////////////////////////////////////////////
// Block at 82076498h
// Function '?SetPending_Predicated@D3D@@YA_KPAVCDevice@1@_KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82076498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82076498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82076498);
		  /* 82076498h */ case    0:  		/* add R11, R8, R11 */
		/* 82076498h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82076498h case    0:*/		return 0x8207649C;
		  /* 8207649Ch */ case    1:  		/* add R10, R7, R10 */
		/* 8207649Ch case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 8207649Ch case    1:*/		return 0x820764A0;
		  /* 820764A0h */ case    2:  		/* ori R7, R11, 2 */
		/* 820764A0h case    2:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R11,0x2);
		/* 820764A0h case    2:*/		return 0x820764A4;
		  /* 820764A4h */ case    3:  		/* rlwinm R6, R9, 12, 20, 31 */
		/* 820764A4h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R6,regs.R9);
		/* 820764A4h case    3:*/		return 0x820764A8;
		  /* 820764A8h */ case    4:  		/* stwu R26, <#[R3 + 4]> */
		/* 820764A8h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820764A8h case    4:*/		return 0x820764AC;
		  /* 820764ACh */ case    5:  		/* rlwinm R9, R9, 0, 3, 31 */
		/* 820764ACh case    5:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R9);
		/* 820764ACh case    5:*/		return 0x820764B0;
		  /* 820764B0h */ case    6:  		/* addi R6, R6, 512 */
		/* 820764B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x200);
		/* 820764B0h case    6:*/		return 0x820764B4;
		  /* 820764B4h */ case    7:  		/* addi R11, R31, 184 */
		/* 820764B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xB8);
		/* 820764B4h case    7:*/		return 0x820764B8;
		  /* 820764B8h */ case    8:  		/* rlwinm R6, R6, 0, 19, 19 */
		/* 820764B8h case    8:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R6,regs.R6);
		/* 820764B8h case    8:*/		return 0x820764BC;
		  /* 820764BCh */ case    9:  		/* ori R28, R10, 2 */
		/* 820764BCh case    9:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 820764BCh case    9:*/		return 0x820764C0;
		  /* 820764C0h */ case   10:  		/* stwu R5, <#[R3 + 4]> */
		/* 820764C0h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820764C0h case   10:*/		return 0x820764C4;
		  /* 820764C4h */ case   11:  		/* add R9, R6, R9 */
		/* 820764C4h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 820764C4h case   11:*/		return 0x820764C8;
		  /* 820764C8h */ case   12:  		/* li R6, 3235 */
		/* 820764C8h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0xCA3);
		/* 820764C8h case   12:*/		return 0x820764CC;
		  /* 820764CCh */ case   13:  		/* ori R26, R9, 2 */
		/* 820764CCh case   13:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R9,0x2);
		/* 820764CCh case   13:*/		return 0x820764D0;
		  /* 820764D0h */ case   14:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 820764D0h case   14:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 820764D0h case   14:*/		return 0x820764D4;
		  /* 820764D4h */ case   15:  		/* addi R10, R31, 196 */
		/* 820764D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xC4);
		/* 820764D4h case   15:*/		return 0x820764D8;
		  /* 820764D8h */ case   16:  		/* stwu R27, <#[R3 + 4]> */
		/* 820764D8h case   16:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820764D8h case   16:*/		return 0x820764DC;
		  /* 820764DCh */ case   17:  		/* addi R9, R9, 512 */
		/* 820764DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 820764DCh case   17:*/		return 0x820764E0;
		  /* 820764E0h */ case   18:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820764E0h case   18:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820764E0h case   18:*/		return 0x820764E4;
		  /* 820764E4h */ case   19:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 820764E4h case   19:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 820764E4h case   19:*/		return 0x820764E8;
		  /* 820764E8h */ case   20:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 820764E8h case   20:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 820764E8h case   20:*/		return 0x820764EC;
		  /* 820764ECh */ case   21:  		/* add R11, R9, R11 */
		/* 820764ECh case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820764ECh case   21:*/		return 0x820764F0;
		  /* 820764F0h */ case   22:  		/* stwu R23, <#[R3 + 4]> */
		/* 820764F0h case   22:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820764F0h case   22:*/		return 0x820764F4;
		  /* 820764F4h */ case   23:  		/* li R4, 4102 */
		/* 820764F4h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1006);
		/* 820764F4h case   23:*/		return 0x820764F8;
		  /* 820764F8h */ case   24:  		/* addi R9, R8, 512 */
		/* 820764F8h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 820764F8h case   24:*/		return 0x820764FC;
		  /* 820764FCh */ case   25:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 820764FCh case   25:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 820764FCh case   25:*/		return 0x82076500;
		  /* 82076500h */ case   26:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076500h case   26:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076500h case   26:*/		return 0x82076504;
		  /* 82076504h */ case   27:  		/* ori R8, R11, 2 */
		/* 82076504h case   27:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2);
		/* 82076504h case   27:*/		return 0x82076508;
		  /* 82076508h */ case   28:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076508h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076508h case   28:*/		return 0x8207650C;
		  /* 8207650Ch */ case   29:  		/* addi R11, R31, 192 */
		/* 8207650Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xC0);
		/* 8207650Ch case   29:*/		return 0x82076510;
		  /* 82076510h */ case   30:  		/* add R9, R9, R10 */
		/* 82076510h case   30:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076510h case   30:*/		return 0x82076514;
		  /* 82076514h */ case   31:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076514h case   31:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076514h case   31:*/		return 0x82076518;
		  /* 82076518h */ case   32:  		/* ori R27, R9, 2 */
		/* 82076518h case   32:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R9,0x2);
		/* 82076518h case   32:*/		return 0x8207651C;
		  /* 8207651Ch */ case   33:  		/* addi R9, R10, 512 */
		/* 8207651Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8207651Ch case   33:*/		return 0x82076520;
		  /* 82076520h */ case   34:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076520h case   34:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076520h case   34:*/		return 0x82076524;
		  /* 82076524h */ case   35:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076524h case   35:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076524h case   35:*/		return 0x82076528;
		  /* 82076528h */ case   36:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076528h case   36:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076528h case   36:*/		return 0x8207652C;
		  /* 8207652Ch */ case   37:  		/* addi R11, R31, 204 */
		/* 8207652Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xCC);
		/* 8207652Ch case   37:*/		return 0x82076530;
		  /* 82076530h */ case   38:  		/* add R9, R9, R10 */
		/* 82076530h case   38:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076530h case   38:*/		return 0x82076534;
		  /* 82076534h */ case   39:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076534h case   39:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076534h case   39:*/		return 0x82076538;
		  /* 82076538h */ case   40:  		/* stwu R22, <#[R3 + 4]> */
		/* 82076538h case   40:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076538h case   40:*/		return 0x8207653C;
		  /* 8207653Ch */ case   41:  		/* li R21, 4101 */
		/* 8207653Ch case   41:*/		cpu::op::li<0>(regs,&regs.R21,0x1005);
		/* 8207653Ch case   41:*/		return 0x82076540;
		  /* 82076540h */ case   42:  		/* li R25, 3591 */
		/* 82076540h case   42:*/		cpu::op::li<0>(regs,&regs.R25,0xE07);
		/* 82076540h case   42:*/		return 0x82076544;
		  /* 82076544h */ case   43:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076544h case   43:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076544h case   43:*/		return 0x82076548;
		  /* 82076548h */ case   44:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076548h case   44:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076548h case   44:*/		return 0x8207654C;
		  /* 8207654Ch */ case   45:  		/* stwu R7, <#[R3 + 4]> */
		/* 8207654Ch case   45:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207654Ch case   45:*/		return 0x82076550;
		  /* 82076550h */ case   46:  		/* li R7, 4105 */
		/* 82076550h case   46:*/		cpu::op::li<0>(regs,&regs.R7,0x1009);
		/* 82076550h case   46:*/		return 0x82076554;
		  /* 82076554h */ case   47:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076554h case   47:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076554h case   47:*/		return 0x82076558;
		  /* 82076558h */ case   48:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076558h case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076558h case   48:*/		return 0x8207655C;
		  /* 8207655Ch */ case   49:  		/* li R6, 4104 */
		/* 8207655Ch case   49:*/		cpu::op::li<0>(regs,&regs.R6,0x1008);
		/* 8207655Ch case   49:*/		return 0x82076560;
		  /* 82076560h */ case   50:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076560h case   50:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076560h case   50:*/		return 0x82076564;
		  /* 82076564h */ case   51:  		/* ori R28, R9, 2 */
		/* 82076564h case   51:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82076564h case   51:*/		return 0x82076568;
		  /* 82076568h */ case   52:  		/* addi R9, R10, 512 */
		/* 82076568h case   52:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076568h case   52:*/		return 0x8207656C;
		  /* 8207656Ch */ case   53:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207656Ch case   53:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207656Ch case   53:*/		return 0x82076570;
		  /* 82076570h */ case   54:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076570h case   54:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076570h case   54:*/		return 0x82076574;
		  /* 82076574h */ case   55:  		/* addi R11, R31, 200 */
		/* 82076574h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xC8);
		/* 82076574h case   55:*/		return 0x82076578;
		  /* 82076578h */ case   56:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076578h case   56:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076578h case   56:*/		return 0x8207657C;
		  /* 8207657Ch */ case   57:  		/* add R9, R9, R10 */
		/* 8207657Ch case   57:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207657Ch case   57:*/		return 0x82076580;
		  /* 82076580h */ case   58:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076580h case   58:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076580h case   58:*/		return 0x82076584;
		  /* 82076584h */ case   59:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076584h case   59:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076584h case   59:*/		return 0x82076588;
		  /* 82076588h */ case   60:  		/* addi R10, R10, 512 */
		/* 82076588h case   60:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076588h case   60:*/		return 0x8207658C;
		  /* 8207658Ch */ case   61:  		/* ori R9, R9, 2 */
		/* 8207658Ch case   61:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 8207658Ch case   61:*/		return 0x82076590;
		  /* 82076590h */ case   62:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076590h case   62:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076590h case   62:*/		return 0x82076594;
		  /* 82076594h */ case   63:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076594h case   63:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076594h case   63:*/		return 0x82076598;
		  /* 82076598h */ case   64:  		/* li R4, 3590 */
		/* 82076598h case   64:*/		cpu::op::li<0>(regs,&regs.R4,0xE06);
		/* 82076598h case   64:*/		return 0x8207659C;
		  /* 8207659Ch */ case   65:  		/* add R11, R10, R11 */
		/* 8207659Ch case   65:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207659Ch case   65:*/		return 0x820765A0;
		  /* 820765A0h */ case   66:  		/* ori R24, R11, 2 */
		/* 820765A0h case   66:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R11,0x2);
		/* 820765A0h case   66:*/		return 0x820765A4;
		  /* 820765A4h */ case   67:  		/* stwu R26, <#[R3 + 4]> */
		/* 820765A4h case   67:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765A4h case   67:*/		return 0x820765A8;
		  /* 820765A8h */ case   68:  		/* stwu R5, <#[R3 + 4]> */
		/* 820765A8h case   68:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765A8h case   68:*/		return 0x820765AC;
		  /* 820765ACh */ case   69:  		/* stwu R21, <#[R3 + 4]> */
		/* 820765ACh case   69:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765ACh case   69:*/		return 0x820765B0;
		  /* 820765B0h */ case   70:  		/* stwu R8, <#[R3 + 4]> */
		/* 820765B0h case   70:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765B0h case   70:*/		return 0x820765B4;
		  /* 820765B4h */ case   71:  		/* stwu R5, <#[R3 + 4]> */
		/* 820765B4h case   71:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765B4h case   71:*/		return 0x820765B8;
		  /* 820765B8h */ case   72:  		/* stwu R7, <#[R3 + 4]> */
		/* 820765B8h case   72:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765B8h case   72:*/		return 0x820765BC;
		  /* 820765BCh */ case   73:  		/* stwu R27, <#[R3 + 4]> */
		/* 820765BCh case   73:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765BCh case   73:*/		return 0x820765C0;
		  /* 820765C0h */ case   74:  		/* addi R11, R31, 212 */
		/* 820765C0h case   74:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xD4);
		/* 820765C0h case   74:*/		return 0x820765C4;
		  /* 820765C4h */ case   75:  		/* li R7, 3594 */
		/* 820765C4h case   75:*/		cpu::op::li<0>(regs,&regs.R7,0xE0A);
		/* 820765C4h case   75:*/		return 0x820765C8;
		  /* 820765C8h */ case   76:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820765C8h case   76:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820765C8h case   76:*/		return 0x820765CC;
		  /* 820765CCh */ case   77:  		/* li R27, 3673 */
		/* 820765CCh case   77:*/		cpu::op::li<0>(regs,&regs.R27,0xE59);
		/* 820765CCh case   77:*/		return 0x820765D0;
		  /* 820765D0h */ case   78:  		/* addi R10, R10, 512 */
		/* 820765D0h case   78:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820765D0h case   78:*/		return 0x820765D4;
		  /* 820765D4h */ case   79:  		/* stwu R5, <#[R3 + 4]> */
		/* 820765D4h case   79:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765D4h case   79:*/		return 0x820765D8;
		  /* 820765D8h */ case   80:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820765D8h case   80:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820765D8h case   80:*/		return 0x820765DC;
		  /* 820765DCh */ case   81:  		/* stwu R6, <#[R3 + 4]> */
		/* 820765DCh case   81:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765DCh case   81:*/		return 0x820765E0;
		  /* 820765E0h */ case   82:  		/* li R6, 3593 */
		/* 820765E0h case   82:*/		cpu::op::li<0>(regs,&regs.R6,0xE09);
		/* 820765E0h case   82:*/		return 0x820765E4;
		  /* 820765E4h */ case   83:  		/* stwu R28, <#[R3 + 4]> */
		/* 820765E4h case   83:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765E4h case   83:*/		return 0x820765E8;
		  /* 820765E8h */ case   84:  		/* li R28, 3669 */
		/* 820765E8h case   84:*/		cpu::op::li<0>(regs,&regs.R28,0xE55);
		/* 820765E8h case   84:*/		return 0x820765EC;
		  /* 820765ECh */ case   85:  		/* stwu R5, <#[R3 + 4]> */
		/* 820765ECh case   85:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765ECh case   85:*/		return 0x820765F0;
		  /* 820765F0h */ case   86:  		/* stwu R25, <#[R3 + 4]> */
		/* 820765F0h case   86:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765F0h case   86:*/		return 0x820765F4;
		  /* 820765F4h */ case   87:  		/* li R25, 3672 */
		/* 820765F4h case   87:*/		cpu::op::li<0>(regs,&regs.R25,0xE58);
		/* 820765F4h case   87:*/		return 0x820765F8;
		  /* 820765F8h */ case   88:  		/* stwu R9, <#[R3 + 4]> */
		/* 820765F8h case   88:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820765F8h case   88:*/		return 0x820765FC;
		  /* 820765FCh */ case   89:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 820765FCh case   89:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 820765FCh case   89:*/		return 0x82076600;
		  /* 82076600h */ case   90:  		/* addi R11, R31, 208 */
		/* 82076600h case   90:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xD0);
		/* 82076600h case   90:*/		return 0x82076604;
		  /* 82076604h */ case   91:  		/* add R10, R10, R9 */
		/* 82076604h case   91:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82076604h case   91:*/		return 0x82076608;
		  /* 82076608h */ case   92:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076608h case   92:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076608h case   92:*/		return 0x8207660C;
		  /* 8207660Ch */ case   93:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207660Ch case   93:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207660Ch case   93:*/		return 0x82076610;
		  /* 82076610h */ case   94:  		/* addi R9, R8, 512 */
		/* 82076610h case   94:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 82076610h case   94:*/		return 0x82076614;
		  /* 82076614h */ case   95:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076614h case   95:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076614h case   95:*/		return 0x82076618;
		  /* 82076618h */ case   96:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076618h case   96:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076618h case   96:*/		return 0x8207661C;
		  /* 8207661Ch */ case   97:  		/* ori R4, R10, 2 */
		/* 8207661Ch case   97:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 8207661Ch case   97:*/		return 0x82076620;
		  /* 82076620h */ case   98:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076620h case   98:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076620h case   98:*/		return 0x82076624;
		  /* 82076624h */ case   99:  		/* addi R11, R31, 220 */
		/* 82076624h case   99:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xDC);
		/* 82076624h case   99:*/		return 0x82076628;
		  /* 82076628h */ case  100:  		/* add R10, R9, R10 */
		/* 82076628h case  100:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076628h case  100:*/		return 0x8207662C;
		  /* 8207662Ch */ case  101:  		/* stwu R24, <#[R3 + 4]> */
		/* 8207662Ch case  101:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207662Ch case  101:*/		return 0x82076630;
		  /* 82076630h */ case  102:  		/* ori R8, R10, 2 */
		/* 82076630h case  102:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076630h case  102:*/		return 0x82076634;
		  /* 82076634h */ case  103:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076634h case  103:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076634h case  103:*/		return 0x82076638;
		  /* 82076638h */ case  104:  		/* addi R9, R10, 512 */
		/* 82076638h case  104:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076638h case  104:*/		return 0x8207663C;
		  /* 8207663Ch */ case  105:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207663Ch case  105:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207663Ch case  105:*/		return 0x82076640;
		  /* 82076640h */ case  106:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076640h case  106:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076640h case  106:*/		return 0x82076644;
		  /* 82076644h */ case  107:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076644h case  107:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076644h case  107:*/		return 0x82076648;
		  /* 82076648h */ case  108:  		/* addi R11, R31, 216 */
		/* 82076648h case  108:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xD8);
		/* 82076648h case  108:*/		return 0x8207664C;
		  /* 8207664Ch */ case  109:  		/* add R9, R9, R10 */
		/* 8207664Ch case  109:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207664Ch case  109:*/		return 0x82076650;
		  /* 82076650h */ case  110:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076650h case  110:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076650h case  110:*/		return 0x82076654;
		  /* 82076654h */ case  111:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076654h case  111:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076654h case  111:*/		return 0x82076658;
		  /* 82076658h */ case  112:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076658h case  112:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076658h case  112:*/		return 0x8207665C;
		  /* 8207665Ch */ case  113:  		/* li R7, 3670 */
		/* 8207665Ch case  113:*/		cpu::op::li<0>(regs,&regs.R7,0xE56);
		/* 8207665Ch case  113:*/		return 0x82076660;
		  /* 82076660h */ case  114:  		/* addi R10, R10, 512 */
		/* 82076660h case  114:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076660h case  114:*/		return 0x82076664;
		  /* 82076664h */ case  115:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076664h case  115:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076664h case  115:*/		return 0x82076668;
		  /* 82076668h */ case  116:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076668h case  116:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076668h case  116:*/		return 0x8207666C;
		  /* 8207666Ch */ case  117:  		/* ori R4, R9, 2 */
		/* 8207666Ch case  117:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R9,0x2);
		/* 8207666Ch case  117:*/		return 0x82076670;
		  /* 82076670h */ case  118:  		/* add R11, R10, R11 */
		/* 82076670h case  118:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82076670h case  118:*/		return 0x82076674;
		  /* 82076674h */ case  119:  		/* ori R26, R11, 2 */
		/* 82076674h case  119:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R11,0x2);
		/* 82076674h case  119:*/		return 0x82076678;
		  /* 82076678h */ case  120:  		/* addi R11, R31, 228 */
		/* 82076678h case  120:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xE4);
		/* 82076678h case  120:*/		return 0x8207667C;
		  /* 8207667Ch */ case  121:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207667Ch case  121:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207667Ch case  121:*/		return 0x82076680;
		  /* 82076680h */ case  122:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076680h case  122:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076680h case  122:*/		return 0x82076684;
		  /* 82076684h */ case  123:  		/* addi R9, R10, 512 */
		/* 82076684h case  123:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076684h case  123:*/		return 0x82076688;
		  /* 82076688h */ case  124:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076688h case  124:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076688h case  124:*/		return 0x8207668C;
		  /* 8207668Ch */ case  125:  		/* stwu R6, <#[R3 + 4]> */
		/* 8207668Ch case  125:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207668Ch case  125:*/		return 0x82076690;
		  /* 82076690h */ case  126:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076690h case  126:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076690h case  126:*/		return 0x82076694;
		  /* 82076694h */ case  127:  		/* addi R11, R31, 224 */
		/* 82076694h case  127:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xE0);
		/* 82076694h case  127:*/		return 0x82076698;
		  /* 82076698h */ case  128:  		/* add R9, R9, R10 */
		/* 82076698h case  128:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076698h case  128:*/		return 0x8207669C;
		  /* 8207669Ch */ case  129:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207669Ch case  129:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207669Ch case  129:*/		return 0x820766A0;
		  /* 820766A0h */ case  130:  		/* ori R9, R9, 2 */
		/* 820766A0h case  130:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 820766A0h case  130:*/		return 0x820766A4;
		  /* 820766A4h */ case  131:  		/* stwu R8, <#[R3 + 4]> */
		/* 820766A4h case  131:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766A4h case  131:*/		return 0x820766A8;
		  /* 820766A8h */ case  132:  		/* addi R10, R10, 512 */
		/* 820766A8h case  132:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820766A8h case  132:*/		return 0x820766AC;
		  /* 820766ACh */ case  133:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820766ACh case  133:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820766ACh case  133:*/		return 0x820766B0;
		  /* 820766B0h */ case  134:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820766B0h case  134:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820766B0h case  134:*/		return 0x820766B4;
		  /* 820766B4h */ case  135:  		/* li R8, 3676 */
		/* 820766B4h case  135:*/		cpu::op::li<0>(regs,&regs.R8,0xE5C);
		/* 820766B4h case  135:*/		return 0x820766B8;
		  /* 820766B8h */ case  136:  		/* add R10, R10, R11 */
		/* 820766B8h case  136:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820766B8h case  136:*/		return 0x820766BC;
		  /* 820766BCh */ case  137:  		/* stwu R5, <#[R3 + 4]> */
		/* 820766BCh case  137:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766BCh case  137:*/		return 0x820766C0;
		  /* 820766C0h */ case  138:  		/* addi R11, R31, 236 */
		/* 820766C0h case  138:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xEC);
		/* 820766C0h case  138:*/		return 0x820766C4;
		  /* 820766C4h */ case  139:  		/* stwu R7, <#[R3 + 4]> */
		/* 820766C4h case  139:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766C4h case  139:*/		return 0x820766C8;
		  /* 820766C8h */ case  140:  		/* stwu R4, <#[R3 + 4]> */
		/* 820766C8h case  140:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766C8h case  140:*/		return 0x820766CC;
		  /* 820766CCh */ case  141:  		/* stwu R5, <#[R3 + 4]> */
		/* 820766CCh case  141:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766CCh case  141:*/		return 0x820766D0;
		  /* 820766D0h */ case  142:  		/* stwu R28, <#[R3 + 4]> */
		/* 820766D0h case  142:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766D0h case  142:*/		return 0x820766D4;
		  /* 820766D4h */ case  143:  		/* stwu R26, <#[R3 + 4]> */
		/* 820766D4h case  143:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766D4h case  143:*/		return 0x820766D8;
		  /* 820766D8h */ case  144:  		/* stwu R5, <#[R3 + 4]> */
		/* 820766D8h case  144:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766D8h case  144:*/		return 0x820766DC;
		  /* 820766DCh */ case  145:  		/* stwu R27, <#[R3 + 4]> */
		/* 820766DCh case  145:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766DCh case  145:*/		return 0x820766E0;
		  /* 820766E0h */ case  146:  		/* stwu R9, <#[R3 + 4]> */
		/* 820766E0h case  146:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766E0h case  146:*/		return 0x820766E4;
		  /* 820766E4h */ case  147:  		/* ori R9, R10, 2 */
		/* 820766E4h case  147:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 820766E4h case  147:*/		return 0x820766E8;
		  /* 820766E8h */ case  148:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820766E8h case  148:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820766E8h case  148:*/		return 0x820766EC;
		  /* 820766ECh */ case  149:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820766ECh case  149:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820766ECh case  149:*/		return 0x820766F0;
		  /* 820766F0h */ case  150:  		/* addi R10, R10, 512 */
		/* 820766F0h case  150:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820766F0h case  150:*/		return 0x820766F4;
		  /* 820766F4h */ case  151:  		/* stwu R5, <#[R3 + 4]> */
		/* 820766F4h case  151:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766F4h case  151:*/		return 0x820766F8;
		  /* 820766F8h */ case  152:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820766F8h case  152:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820766F8h case  152:*/		return 0x820766FC;
		  /* 820766FCh */ case  153:  		/* stwu R25, <#[R3 + 4]> */
		/* 820766FCh case  153:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820766FCh case  153:*/		return 0x82076700;
		  /* 82076700h */ case  154:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076700h case  154:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076700h case  154:*/		return 0x82076704;
		  /* 82076704h */ case  155:  		/* add R10, R10, R11 */
		/* 82076704h case  155:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076704h case  155:*/		return 0x82076708;
		  /* 82076708h */ case  156:  		/* addi R11, R31, 232 */
		/* 82076708h case  156:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xE8);
		/* 82076708h case  156:*/		return 0x8207670C;
		  /* 8207670Ch */ case  157:  		/* ori R6, R10, 2 */
		/* 8207670Ch case  157:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 8207670Ch case  157:*/		return 0x82076710;
		  /* 82076710h */ case  158:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076710h case  158:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076710h case  158:*/		return 0x82076714;
		  /* 82076714h */ case  159:  		/* li R7, 3675 */
		/* 82076714h case  159:*/		cpu::op::li<0>(regs,&regs.R7,0xE5B);
		/* 82076714h case  159:*/		return 0x82076718;
		  /* 82076718h */ case  160:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076718h case  160:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076718h case  160:*/		return 0x8207671C;
		  /* 8207671Ch */ case  161:  		/* addi R9, R10, 512 */
		/* 8207671Ch case  161:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8207671Ch case  161:*/		return 0x82076720;
		  /* 82076720h */ case  162:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076720h case  162:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076720h case  162:*/		return 0x82076724;
		  /* 82076724h */ case  163:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076724h case  163:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076724h case  163:*/		return 0x82076728;
		  /* 82076728h */ case  164:  		/* addi R11, R31, 244 */
		/* 82076728h case  164:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xF4);
		/* 82076728h case  164:*/		return 0x8207672C;
		  /* 8207672Ch */ case  165:  		/* add R9, R9, R10 */
		/* 8207672Ch case  165:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207672Ch case  165:*/		return 0x82076730;
		  /* 82076730h */ case  166:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076730h case  166:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076730h case  166:*/		return 0x82076734;
		  /* 82076734h */ case  167:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076734h case  167:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076734h case  167:*/		return 0x82076738;
		  /* 82076738h */ case  168:  		/* ori R28, R9, 2 */
		/* 82076738h case  168:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82076738h case  168:*/		return 0x8207673C;
		  /* 8207673Ch */ case  169:  		/* addi R9, R10, 512 */
		/* 8207673Ch case  169:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8207673Ch case  169:*/		return 0x82076740;
		  /* 82076740h */ case  170:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076740h case  170:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076740h case  170:*/		return 0x82076744;
		  /* 82076744h */ case  171:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076744h case  171:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076744h case  171:*/		return 0x82076748;
		  /* 82076748h */ case  172:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076748h case  172:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076748h case  172:*/		return 0x8207674C;
		  /* 8207674Ch */ case  173:  		/* li R4, 3679 */
		/* 8207674Ch case  173:*/		cpu::op::li<0>(regs,&regs.R4,0xE5F);
		/* 8207674Ch case  173:*/		return 0x82076750;
		  /* 82076750h */ case  174:  		/* add R10, R9, R10 */
		/* 82076750h case  174:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076750h case  174:*/		return 0x82076754;
		  /* 82076754h */ case  175:  		/* addi R11, R31, 240 */
		/* 82076754h case  175:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xF0);
		/* 82076754h case  175:*/		return 0x82076758;
		  /* 82076758h */ case  176:  		/* ori R27, R10, 2 */
		/* 82076758h case  176:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R10,0x2);
		/* 82076758h case  176:*/		return 0x8207675C;
		  /* 8207675Ch */ case  177:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207675Ch case  177:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207675Ch case  177:*/		return 0x82076760;
		  /* 82076760h */ case  178:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076760h case  178:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076760h case  178:*/		return 0x82076764;
		  /* 82076764h */ case  179:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076764h case  179:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076764h case  179:*/		return 0x82076768;
		  /* 82076768h */ case  180:  		/* addi R10, R10, 512 */
		/* 82076768h case  180:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076768h case  180:*/		return 0x8207676C;
		  /* 8207676Ch */ case  181:  		/* li R6, 3678 */
		/* 8207676Ch case  181:*/		cpu::op::li<0>(regs,&regs.R6,0xE5E);
		/* 8207676Ch case  181:*/		return 0x82076770;
		  /* 82076770h */ case  182:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076770h case  182:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076770h case  182:*/		return 0x82076774;
		  /* 82076774h */ case  183:  		/* li R26, 3682 */
		/* 82076774h case  183:*/		cpu::op::li<0>(regs,&regs.R26,0xE62);
		/* 82076774h case  183:*/		return 0x82076778;
		  /* 82076778h */ case  184:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076778h case  184:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076778h case  184:*/		return 0x8207677C;
		  /* 8207677Ch */ case  185:  		/* add R10, R10, R11 */
		/* 8207677Ch case  185:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8207677Ch case  185:*/		return 0x82076780;
		  /* 82076780h */ case  186:  		/* addi R11, R31, 252 */
		/* 82076780h case  186:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFC);
		/* 82076780h case  186:*/		return 0x82076784;
		  /* 82076784h */ case  187:  		/* ori R25, R10, 2 */
		/* 82076784h case  187:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 82076784h case  187:*/		return 0x82076788;
		  /* 82076788h */ case  188:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82076788h case  188:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82076788h case  188:*/		return 0x8207678C;
		  /* 8207678Ch */ case  189:  		/* addi R10, R31, 248 */
		/* 8207678Ch case  189:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xF8);
		/* 8207678Ch case  189:*/		return 0x82076790;
		  /* 82076790h */ case  190:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076790h case  190:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076790h case  190:*/		return 0x82076794;
		  /* 82076794h */ case  191:  		/* addi R9, R9, 512 */
		/* 82076794h case  191:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82076794h case  191:*/		return 0x82076798;
		  /* 82076798h */ case  192:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076798h case  192:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076798h case  192:*/		return 0x8207679C;
		  /* 8207679Ch */ case  193:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 8207679Ch case  193:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 8207679Ch case  193:*/		return 0x820767A0;
		  /* 820767A0h */ case  194:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 820767A0h case  194:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 820767A0h case  194:*/		return 0x820767A4;
		  /* 820767A4h */ case  195:  		/* add R11, R9, R11 */
		/* 820767A4h case  195:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820767A4h case  195:*/		return 0x820767A8;
		  /* 820767A8h */ case  196:  		/* stwu R5, <#[R3 + 4]> */
		/* 820767A8h case  196:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767A8h case  196:*/		return 0x820767AC;
		  /* 820767ACh */ case  197:  		/* addi R9, R8, 512 */
		/* 820767ACh case  197:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 820767ACh case  197:*/		return 0x820767B0;
		  /* 820767B0h */ case  198:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 820767B0h case  198:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 820767B0h case  198:*/		return 0x820767B4;
		  /* 820767B4h */ case  199:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 820767B4h case  199:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 820767B4h case  199:*/		return 0x820767B8;
		  /* 820767B8h */ case  200:  		/* ori R8, R11, 2 */
		/* 820767B8h case  200:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2);
		/* 820767B8h case  200:*/		return 0x820767BC;
		  /* 820767BCh */ case  201:  		/* addi R11, R31, 260 */
		/* 820767BCh case  201:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x104);
		/* 820767BCh case  201:*/		return 0x820767C0;
		  /* 820767C0h */ case  202:  		/* stwu R4, <#[R3 + 4]> */
		/* 820767C0h case  202:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767C0h case  202:*/		return 0x820767C4;
		  /* 820767C4h */ case  203:  		/* add R9, R9, R10 */
		/* 820767C4h case  203:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 820767C4h case  203:*/		return 0x820767C8;
		  /* 820767C8h */ case  204:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820767C8h case  204:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820767C8h case  204:*/		return 0x820767CC;
		  /* 820767CCh */ case  205:  		/* li R7, 3681 */
		/* 820767CCh case  205:*/		cpu::op::li<0>(regs,&regs.R7,0xE61);
		/* 820767CCh case  205:*/		return 0x820767D0;
		  /* 820767D0h */ case  206:  		/* li R4, 3685 */
		/* 820767D0h case  206:*/		cpu::op::li<0>(regs,&regs.R4,0xE65);
		/* 820767D0h case  206:*/		return 0x820767D4;
		  /* 820767D4h */ case  207:  		/* stwu R27, <#[R3 + 4]> */
		/* 820767D4h case  207:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767D4h case  207:*/		return 0x820767D8;
		  /* 820767D8h */ case  208:  		/* li R27, 3684 */
		/* 820767D8h case  208:*/		cpu::op::li<0>(regs,&regs.R27,0xE64);
		/* 820767D8h case  208:*/		return 0x820767DC;
		  /* 820767DCh */ case  209:  		/* stwu R5, <#[R3 + 4]> */
		/* 820767DCh case  209:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767DCh case  209:*/		return 0x820767E0;
		  /* 820767E0h */ case  210:  		/* stwu R6, <#[R3 + 4]> */
		/* 820767E0h case  210:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767E0h case  210:*/		return 0x820767E4;
		  /* 820767E4h */ case  211:  		/* ori R6, R9, 2 */
		/* 820767E4h case  211:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 820767E4h case  211:*/		return 0x820767E8;
		  /* 820767E8h */ case  212:  		/* addi R9, R10, 512 */
		/* 820767E8h case  212:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 820767E8h case  212:*/		return 0x820767EC;
		  /* 820767ECh */ case  213:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 820767ECh case  213:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 820767ECh case  213:*/		return 0x820767F0;
		  /* 820767F0h */ case  214:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 820767F0h case  214:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 820767F0h case  214:*/		return 0x820767F4;
		  /* 820767F4h */ case  215:  		/* addi R11, R31, 256 */
		/* 820767F4h case  215:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x100);
		/* 820767F4h case  215:*/		return 0x820767F8;
		  /* 820767F8h */ case  216:  		/* stwu R25, <#[R3 + 4]> */
		/* 820767F8h case  216:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820767F8h case  216:*/		return 0x820767FC;
		  /* 820767FCh */ case  217:  		/* add R9, R9, R10 */
		/* 820767FCh case  217:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 820767FCh case  217:*/		return 0x82076800;
		  /* 82076800h */ case  218:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076800h case  218:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076800h case  218:*/		return 0x82076804;
		  /* 82076804h */ case  219:  		/* ori R28, R9, 2 */
		/* 82076804h case  219:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82076804h case  219:*/		return 0x82076808;
		  /* 82076808h */ case  220:  		/* addi R9, R10, 512 */
		/* 82076808h case  220:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076808h case  220:*/		return 0x8207680C;
		  /* 8207680Ch */ case  221:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207680Ch case  221:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207680Ch case  221:*/		return 0x82076810;
		  /* 82076810h */ case  222:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076810h case  222:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076810h case  222:*/		return 0x82076814;
		  /* 82076814h */ case  223:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076814h case  223:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076814h case  223:*/		return 0x82076818;
		  /* 82076818h */ case  224:  		/* addi R11, R31, 268 */
		/* 82076818h case  224:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x10C);
		/* 82076818h case  224:*/		return 0x8207681C;
		  /* 8207681Ch */ case  225:  		/* add R9, R9, R10 */
		/* 8207681Ch case  225:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207681Ch case  225:*/		return 0x82076820;
		  /* 82076820h */ case  226:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076820h case  226:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076820h case  226:*/		return 0x82076824;
		  /* 82076824h */ case  227:  		/* li R25, 3688 */
		/* 82076824h case  227:*/		cpu::op::li<0>(regs,&regs.R25,0xE68);
		/* 82076824h case  227:*/		return 0x82076828;
	}
	return 0x82076828;
} // Block from 82076498h-82076828h (228 instructions)

//////////////////////////////////////////////////////
// Block at 82076828h
// Function '?SetPending_RenderStates@D3D@@YAXPAVCDevice@1@_KKPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82076828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82076828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82076828);
		  /* 82076828h */ case    0:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076828h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076828h case    0:*/		return 0x8207682C;
		  /* 8207682Ch */ case    1:  		/* ori R26, R9, 2 */
		/* 8207682Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R9,0x2);
		/* 8207682Ch case    1:*/		return 0x82076830;
		  /* 82076830h */ case    2:  		/* addi R9, R10, 512 */
		/* 82076830h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076830h case    2:*/		return 0x82076834;
		  /* 82076834h */ case    3:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076834h case    3:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076834h case    3:*/		return 0x82076838;
		  /* 82076838h */ case    4:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076838h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076838h case    4:*/		return 0x8207683C;
		  /* 8207683Ch */ case    5:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207683Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207683Ch case    5:*/		return 0x82076840;
		  /* 82076840h */ case    6:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076840h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076840h case    6:*/		return 0x82076844;
		  /* 82076844h */ case    7:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076844h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076844h case    7:*/		return 0x82076848;
		  /* 82076848h */ case    8:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076848h case    8:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076848h case    8:*/		return 0x8207684C;
		  /* 8207684Ch */ case    9:  		/* addi R11, R31, 264 */
		/* 8207684Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x108);
		/* 8207684Ch case    9:*/		return 0x82076850;
		  /* 82076850h */ case   10:  		/* add R9, R9, R10 */
		/* 82076850h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076850h case   10:*/		return 0x82076854;
		  /* 82076854h */ case   11:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076854h case   11:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076854h case   11:*/		return 0x82076858;
		  /* 82076858h */ case   12:  		/* addi R10, R31, 276 */
		/* 82076858h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x114);
		/* 82076858h case   12:*/		return 0x8207685C;
		  /* 8207685Ch */ case   13:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207685Ch case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207685Ch case   13:*/		return 0x82076860;
		  /* 82076860h */ case   14:  		/* ori R24, R9, 2 */
		/* 82076860h case   14:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R9,0x2);
		/* 82076860h case   14:*/		return 0x82076864;
		  /* 82076864h */ case   15:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82076864h case   15:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82076864h case   15:*/		return 0x82076868;
		  /* 82076868h */ case   16:  		/* addi R8, R8, 512 */
		/* 82076868h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076868h case   16:*/		return 0x8207686C;
		  /* 8207686Ch */ case   17:  		/* addi R9, R31, 272 */
		/* 8207686Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x110);
		/* 8207686Ch case   17:*/		return 0x82076870;
		  /* 82076870h */ case   18:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 82076870h case   18:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 82076870h case   18:*/		return 0x82076874;
		  /* 82076874h */ case   19:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076874h case   19:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076874h case   19:*/		return 0x82076878;
		  /* 82076878h */ case   20:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076878h case   20:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076878h case   20:*/		return 0x8207687C;
		  /* 8207687Ch */ case   21:  		/* addi R7, R7, 512 */
		/* 8207687Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 8207687Ch case   21:*/		return 0x82076880;
		  /* 82076880h */ case   22:  		/* rlwinm R6, R9, 12, 20, 31 */
		/* 82076880h case   22:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R6,regs.R9);
		/* 82076880h case   22:*/		return 0x82076884;
		  /* 82076884h */ case   23:  		/* add R11, R8, R11 */
		/* 82076884h case   23:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82076884h case   23:*/		return 0x82076888;
		  /* 82076888h */ case   24:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82076888h case   24:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82076888h case   24:*/		return 0x8207688C;
		  /* 8207688Ch */ case   25:  		/* stwu R28, <#[R3 + 4]> */
		/* 8207688Ch case   25:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207688Ch case   25:*/		return 0x82076890;
		  /* 82076890h */ case   26:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 82076890h case   26:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 82076890h case   26:*/		return 0x82076894;
		  /* 82076894h */ case   27:  		/* addi R8, R6, 512 */
		/* 82076894h case   27:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R6,0x200);
		/* 82076894h case   27:*/		return 0x82076898;
		  /* 82076898h */ case   28:  		/* add R7, R7, R10 */
		/* 82076898h case   28:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 82076898h case   28:*/		return 0x8207689C;
		  /* 8207689Ch */ case   29:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 8207689Ch case   29:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 8207689Ch case   29:*/		return 0x820768A0;
		  /* 820768A0h */ case   30:  		/* rlwinm R10, R9, 0, 3, 31 */
		/* 820768A0h case   30:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R9);
		/* 820768A0h case   30:*/		return 0x820768A4;
		  /* 820768A4h */ case   31:  		/* stwu R5, <#[R3 + 4]> */
		/* 820768A4h case   31:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768A4h case   31:*/		return 0x820768A8;
		  /* 820768A8h */ case   32:  		/* li R23, 3687 */
		/* 820768A8h case   32:*/		cpu::op::li<0>(regs,&regs.R23,0xE67);
		/* 820768A8h case   32:*/		return 0x820768AC;
		  /* 820768ACh */ case   33:  		/* add R10, R8, R10 */
		/* 820768ACh case   33:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 820768ACh case   33:*/		return 0x820768B0;
		  /* 820768B0h */ case   34:  		/* ori R9, R11, 2 */
		/* 820768B0h case   34:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x2);
		/* 820768B0h case   34:*/		return 0x820768B4;
		  /* 820768B4h */ case   35:  		/* addi R11, R31, 284 */
		/* 820768B4h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x11C);
		/* 820768B4h case   35:*/		return 0x820768B8;
		  /* 820768B8h */ case   36:  		/* ori R28, R10, 2 */
		/* 820768B8h case   36:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 820768B8h case   36:*/		return 0x820768BC;
		  /* 820768BCh */ case   37:  		/* stwu R27, <#[R3 + 4]> */
		/* 820768BCh case   37:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768BCh case   37:*/		return 0x820768C0;
		  /* 820768C0h */ case   38:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820768C0h case   38:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820768C0h case   38:*/		return 0x820768C4;
		  /* 820768C4h */ case   39:  		/* li R6, 3691 */
		/* 820768C4h case   39:*/		cpu::op::li<0>(regs,&regs.R6,0xE6B);
		/* 820768C4h case   39:*/		return 0x820768C8;
		  /* 820768C8h */ case   40:  		/* ori R7, R7, 2 */
		/* 820768C8h case   40:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2);
		/* 820768C8h case   40:*/		return 0x820768CC;
		  /* 820768CCh */ case   41:  		/* li R4, 3690 */
		/* 820768CCh case   41:*/		cpu::op::li<0>(regs,&regs.R4,0xE6A);
		/* 820768CCh case   41:*/		return 0x820768D0;
		  /* 820768D0h */ case   42:  		/* li R27, 3694 */
		/* 820768D0h case   42:*/		cpu::op::li<0>(regs,&regs.R27,0xE6E);
		/* 820768D0h case   42:*/		return 0x820768D4;
		  /* 820768D4h */ case   43:  		/* stwu R26, <#[R3 + 4]> */
		/* 820768D4h case   43:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768D4h case   43:*/		return 0x820768D8;
		  /* 820768D8h */ case   44:  		/* stwu R5, <#[R3 + 4]> */
		/* 820768D8h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768D8h case   44:*/		return 0x820768DC;
		  /* 820768DCh */ case   45:  		/* stwu R25, <#[R3 + 4]> */
		/* 820768DCh case   45:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768DCh case   45:*/		return 0x820768E0;
		  /* 820768E0h */ case   46:  		/* li R25, 3693 */
		/* 820768E0h case   46:*/		cpu::op::li<0>(regs,&regs.R25,0xE6D);
		/* 820768E0h case   46:*/		return 0x820768E4;
		  /* 820768E4h */ case   47:  		/* stwu R24, <#[R3 + 4]> */
		/* 820768E4h case   47:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768E4h case   47:*/		return 0x820768E8;
	}
	return 0x820768E8;
} // Block from 82076828h-820768E8h (48 instructions)

//////////////////////////////////////////////////////
// Block at 820768E8h
// Function '?SetPending_ClipPlanes@D3D@@YAXPAVCDevice@1@_K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820768E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820768E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820768E8);
		  /* 820768E8h */ case    0:  		/* li R24, 3697 */
		/* 820768E8h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0xE71);
		/* 820768E8h case    0:*/		return 0x820768EC;
		  /* 820768ECh */ case    1:  		/* stwu R5, <#[R3 + 4]> */
		/* 820768ECh case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768ECh case    1:*/		return 0x820768F0;
		  /* 820768F0h */ case    2:  		/* stwu R23, <#[R3 + 4]> */
		/* 820768F0h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768F0h case    2:*/		return 0x820768F4;
		  /* 820768F4h */ case    3:  		/* stwu R9, <#[R3 + 4]> */
		/* 820768F4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820768F4h case    3:*/		return 0x820768F8;
		  /* 820768F8h */ case    4:  		/* addi R9, R10, 512 */
		/* 820768F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 820768F8h case    4:*/		return 0x820768FC;
		  /* 820768FCh */ case    5:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 820768FCh case    5:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 820768FCh case    5:*/		return 0x82076900;
		  /* 82076900h */ case    6:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076900h case    6:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076900h case    6:*/		return 0x82076904;
		  /* 82076904h */ case    7:  		/* addi R11, R31, 280 */
		/* 82076904h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x118);
		/* 82076904h case    7:*/		return 0x82076908;
		  /* 82076908h */ case    8:  		/* add R10, R9, R10 */
		/* 82076908h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076908h case    8:*/		return 0x8207690C;
		  /* 8207690Ch */ case    9:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207690Ch case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207690Ch case    9:*/		return 0x82076910;
		  /* 82076910h */ case   10:  		/* addi R9, R31, 296 */
		/* 82076910h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x128);
		/* 82076910h case   10:*/		return 0x82076914;
		  /* 82076914h */ case   11:  		/* ori R26, R10, 2 */
		/* 82076914h case   11:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R10,0x2);
		/* 82076914h case   11:*/		return 0x82076918;
		  /* 82076918h */ case   12:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076918h case   12:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076918h case   12:*/		return 0x8207691C;
		  /* 8207691Ch */ case   13:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8207691Ch case   13:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8207691Ch case   13:*/		return 0x82076920;
		  /* 82076920h */ case   14:  		/* addi R10, R10, 512 */
		/* 82076920h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076920h case   14:*/		return 0x82076924;
		  /* 82076924h */ case   15:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076924h case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076924h case   15:*/		return 0x82076928;
		  /* 82076928h */ case   16:  		/* rlwinm R6, R9, 12, 20, 31 */
		/* 82076928h case   16:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R6,regs.R9);
		/* 82076928h case   16:*/		return 0x8207692C;
		  /* 8207692Ch */ case   17:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 8207692Ch case   17:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 8207692Ch case   17:*/		return 0x82076930;
		  /* 82076930h */ case   18:  		/* addi R6, R6, 512 */
		/* 82076930h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x200);
		/* 82076930h case   18:*/		return 0x82076934;
		  /* 82076934h */ case   19:  		/* add R10, R10, R11 */
		/* 82076934h case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076934h case   19:*/		return 0x82076938;
		  /* 82076938h */ case   20:  		/* addi R11, R31, 292 */
		/* 82076938h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x124);
		/* 82076938h case   20:*/		return 0x8207693C;
		  /* 8207693Ch */ case   21:  		/* ori R23, R10, 2 */
		/* 8207693Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R10,0x2);
		/* 8207693Ch case   21:*/		return 0x82076940;
		  /* 82076940h */ case   22:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076940h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076940h case   22:*/		return 0x82076944;
		  /* 82076944h */ case   23:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076944h case   23:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076944h case   23:*/		return 0x82076948;
		  /* 82076948h */ case   24:  		/* rlwinm R8, R11, 0, 3, 31 */
		/* 82076948h case   24:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R8,regs.R11);
		/* 82076948h case   24:*/		return 0x8207694C;
		  /* 8207694Ch */ case   25:  		/* addi R10, R10, 512 */
		/* 8207694Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 8207694Ch case   25:*/		return 0x82076950;
		  /* 82076950h */ case   26:  		/* addi R11, R31, 288 */
		/* 82076950h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x120);
		/* 82076950h case   26:*/		return 0x82076954;
		  /* 82076954h */ case   27:  		/* rlwinm R7, R10, 0, 19, 19 */
		/* 82076954h case   27:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R10);
		/* 82076954h case   27:*/		return 0x82076958;
		  /* 82076958h */ case   28:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076958h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076958h case   28:*/		return 0x8207695C;
		  /* 8207695Ch */ case   29:  		/* addi R10, R31, 300 */
		/* 8207695Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x12C);
		/* 8207695Ch case   29:*/		return 0x82076960;
		  /* 82076960h */ case   30:  		/* add R8, R7, R8 */
		/* 82076960h case   30:*/		cpu::op::add<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 82076960h case   30:*/		return 0x82076964;
		  /* 82076964h */ case   31:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82076964h case   31:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82076964h case   31:*/		return 0x82076968;
		  /* 82076968h */ case   32:  		/* ori R22, R8, 2 */
		/* 82076968h case   32:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R8,0x2);
		/* 82076968h case   32:*/		return 0x8207696C;
		  /* 8207696Ch */ case   33:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 8207696Ch case   33:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 8207696Ch case   33:*/		return 0x82076970;
		  /* 82076970h */ case   34:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076970h case   34:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076970h case   34:*/		return 0x82076974;
		  /* 82076974h */ case   35:  		/* addi R7, R7, 512 */
		/* 82076974h case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 82076974h case   35:*/		return 0x82076978;
		  /* 82076978h */ case   36:  		/* addi R8, R8, 512 */
		/* 82076978h case   36:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076978h case   36:*/		return 0x8207697C;
		  /* 8207697Ch */ case   37:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8207697Ch case   37:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8207697Ch case   37:*/		return 0x82076980;
		  /* 82076980h */ case   38:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 82076980h case   38:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 82076980h case   38:*/		return 0x82076984;
		  /* 82076984h */ case   39:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076984h case   39:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076984h case   39:*/		return 0x82076988;
		  /* 82076988h */ case   40:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076988h case   40:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076988h case   40:*/		return 0x8207698C;
		  /* 8207698Ch */ case   41:  		/* add R11, R8, R11 */
		/* 8207698Ch case   41:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8207698Ch case   41:*/		return 0x82076990;
		  /* 82076990h */ case   42:  		/* li R8, 3696 */
		/* 82076990h case   42:*/		cpu::op::li<0>(regs,&regs.R8,0xE70);
		/* 82076990h case   42:*/		return 0x82076994;
		  /* 82076994h */ case   43:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82076994h case   43:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82076994h case   43:*/		return 0x82076998;
		  /* 82076998h */ case   44:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 82076998h case   44:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 82076998h case   44:*/		return 0x8207699C;
		  /* 8207699Ch */ case   45:  		/* rlwinm R9, R9, 0, 3, 31 */
		/* 8207699Ch case   45:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R9);
		/* 8207699Ch case   45:*/		return 0x820769A0;
		  /* 820769A0h */ case   46:  		/* stwu R27, <#[R3 + 4]> */
		/* 820769A0h case   46:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820769A0h case   46:*/		return 0x820769A4;
		  /* 820769A4h */ case   47:  		/* add R10, R7, R10 */
		/* 820769A4h case   47:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 820769A4h case   47:*/		return 0x820769A8;
		  /* 820769A8h */ case   48:  		/* ori R7, R11, 2 */
		/* 820769A8h case   48:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R11,0x2);
		/* 820769A8h case   48:*/		return 0x820769AC;
		  /* 820769ACh */ case   49:  		/* rlwinm R6, R6, 0, 19, 19 */
		/* 820769ACh case   49:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R6,regs.R6);
		/* 820769ACh case   49:*/		return 0x820769B0;
		  /* 820769B0h */ case   50:  		/* ori R4, R10, 2 */
		/* 820769B0h case   50:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 820769B0h case   50:*/		return 0x820769B4;
		  /* 820769B4h */ case   51:  		/* add R9, R6, R9 */
		/* 820769B4h case   51:*/		cpu::op::add<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 820769B4h case   51:*/		return 0x820769B8;
		  /* 820769B8h */ case   52:  		/* stwu R26, <#[R3 + 4]> */
		/* 820769B8h case   52:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820769B8h case   52:*/		return 0x820769BC;
		  /* 820769BCh */ case   53:  		/* li R6, 3700 */
		/* 820769BCh case   53:*/		cpu::op::li<0>(regs,&regs.R6,0xE74);
		/* 820769BCh case   53:*/		return 0x820769C0;
		  /* 820769C0h */ case   54:  		/* li R28, 3699 */
		/* 820769C0h case   54:*/		cpu::op::li<0>(regs,&regs.R28,0xE73);
		/* 820769C0h case   54:*/		return 0x820769C4;
		  /* 820769C4h */ case   55:  		/* ori R27, R9, 2 */
		/* 820769C4h case   55:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R9,0x2);
		/* 820769C4h case   55:*/		return 0x820769C8;
		  /* 820769C8h */ case   56:  		/* addi R11, R31, 308 */
		/* 820769C8h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x134);
		/* 820769C8h case   56:*/		return 0x820769CC;
		  /* 820769CCh */ case   57:  		/* li R26, 3703 */
		/* 820769CCh case   57:*/		cpu::op::li<0>(regs,&regs.R26,0xE77);
		/* 820769CCh case   57:*/		return 0x820769D0;
		  /* 820769D0h */ case   58:  		/* stwu R5, <#[R3 + 4]> */
		/* 820769D0h case   58:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820769D0h case   58:*/		return 0x820769D4;
		  /* 820769D4h */ case   59:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820769D4h case   59:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820769D4h case   59:*/		return 0x820769D8;
		  /* 820769D8h */ case   60:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 820769D8h case   60:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 820769D8h case   60:*/		return 0x820769DC;
		  /* 820769DCh */ case   61:  		/* addi R10, R10, 512 */
		/* 820769DCh case   61:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820769DCh case   61:*/		return 0x820769E0;
		  /* 820769E0h */ case   62:  		/* addi R11, R31, 304 */
		/* 820769E0h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x130);
		/* 820769E0h case   62:*/		return 0x820769E4;
		  /* 820769E4h */ case   63:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820769E4h case   63:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820769E4h case   63:*/		return 0x820769E8;
		  /* 820769E8h */ case   64:  		/* stwu R25, <#[R3 + 4]> */
		/* 820769E8h case   64:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820769E8h case   64:*/		return 0x820769EC;
		  /* 820769ECh */ case   65:  		/* add R10, R10, R9 */
		/* 820769ECh case   65:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820769ECh case   65:*/		return 0x820769F0;
		  /* 820769F0h */ case   66:  		/* ori R25, R10, 2 */
		/* 820769F0h case   66:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 820769F0h case   66:*/		return 0x820769F4;
		  /* 820769F4h */ case   67:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 820769F4h case   67:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 820769F4h case   67:*/		return 0x820769F8;
		  /* 820769F8h */ case   68:  		/* stwu R23, <#[R3 + 4]> */
		/* 820769F8h case   68:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820769F8h case   68:*/		return 0x820769FC;
		  /* 820769FCh */ case   69:  		/* li R23, 3709 */
		/* 820769FCh case   69:*/		cpu::op::li<0>(regs,&regs.R23,0xE7D);
		/* 820769FCh case   69:*/		return 0x82076A00;
		  /* 82076A00h */ case   70:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076A00h case   70:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A00h case   70:*/		return 0x82076A04;
		  /* 82076A04h */ case   71:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076A04h case   71:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A04h case   71:*/		return 0x82076A08;
		  /* 82076A08h */ case   72:  		/* li R24, 3705 */
		/* 82076A08h case   72:*/		cpu::op::li<0>(regs,&regs.R24,0xE79);
		/* 82076A08h case   72:*/		return 0x82076A0C;
		  /* 82076A0Ch */ case   73:  		/* stwu R22, <#[R3 + 4]> */
		/* 82076A0Ch case   73:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A0Ch case   73:*/		return 0x82076A10;
		  /* 82076A10h */ case   74:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076A10h case   74:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A10h case   74:*/		return 0x82076A14;
		  /* 82076A14h */ case   75:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076A14h case   75:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A14h case   75:*/		return 0x82076A18;
		  /* 82076A18h */ case   76:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076A18h case   76:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076A18h case   76:*/		return 0x82076A1C;
		  /* 82076A1Ch */ case   77:  		/* addi R11, R31, 316 */
		/* 82076A1Ch case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x13C);
		/* 82076A1Ch case   77:*/		return 0x82076A20;
		  /* 82076A20h */ case   78:  		/* addi R9, R8, 512 */
		/* 82076A20h case   78:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 82076A20h case   78:*/		return 0x82076A24;
		  /* 82076A24h */ case   79:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076A24h case   79:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076A24h case   79:*/		return 0x82076A28;
		  /* 82076A28h */ case   80:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076A28h case   80:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A28h case   80:*/		return 0x82076A2C;
		  /* 82076A2Ch */ case   81:  		/* li R7, 3702 */
		/* 82076A2Ch case   81:*/		cpu::op::li<0>(regs,&regs.R7,0xE76);
		/* 82076A2Ch case   81:*/		return 0x82076A30;
		  /* 82076A30h */ case   82:  		/* add R10, R9, R10 */
		/* 82076A30h case   82:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076A30h case   82:*/		return 0x82076A34;
		  /* 82076A34h */ case   83:  		/* ori R8, R10, 2 */
		/* 82076A34h case   83:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076A34h case   83:*/		return 0x82076A38;
		  /* 82076A38h */ case   84:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076A38h case   84:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076A38h case   84:*/		return 0x82076A3C;
		  /* 82076A3Ch */ case   85:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076A3Ch case   85:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A3Ch case   85:*/		return 0x82076A40;
		  /* 82076A40h */ case   86:  		/* addi R9, R10, 512 */
		/* 82076A40h case   86:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076A40h case   86:*/		return 0x82076A44;
		  /* 82076A44h */ case   87:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076A44h case   87:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076A44h case   87:*/		return 0x82076A48;
		  /* 82076A48h */ case   88:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076A48h case   88:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076A48h case   88:*/		return 0x82076A4C;
		  /* 82076A4Ch */ case   89:  		/* addi R11, R31, 312 */
		/* 82076A4Ch case   89:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x138);
		/* 82076A4Ch case   89:*/		return 0x82076A50;
		  /* 82076A50h */ case   90:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076A50h case   90:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A50h case   90:*/		return 0x82076A54;
		  /* 82076A54h */ case   91:  		/* li R6, 3706 */
		/* 82076A54h case   91:*/		cpu::op::li<0>(regs,&regs.R6,0xE7A);
		/* 82076A54h case   91:*/		return 0x82076A58;
		  /* 82076A58h */ case   92:  		/* add R9, R9, R10 */
		/* 82076A58h case   92:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076A58h case   92:*/		return 0x82076A5C;
		  /* 82076A5Ch */ case   93:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076A5Ch case   93:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076A5Ch case   93:*/		return 0x82076A60;
		  /* 82076A60h */ case   94:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076A60h case   94:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076A60h case   94:*/		return 0x82076A64;
		  /* 82076A64h */ case   95:  		/* addi R10, R10, 512 */
		/* 82076A64h case   95:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076A64h case   95:*/		return 0x82076A68;
	}
	return 0x82076A68;
} // Block from 820768E8h-82076A68h (96 instructions)

//////////////////////////////////////////////////////
// Block at 82076A68h
// Function '?SetPending_FetchConstants@D3D@@YAXPAVCDevice@1@_K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82076A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82076A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82076A68);
		  /* 82076A68h */ case    0:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076A68h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A68h case    0:*/		return 0x82076A6C;
		  /* 82076A6Ch */ case    1:  		/* ori R4, R9, 2 */
		/* 82076A6Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R9,0x2);
		/* 82076A6Ch case    1:*/		return 0x82076A70;
		  /* 82076A70h */ case    2:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076A70h case    2:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076A70h case    2:*/		return 0x82076A74;
		  /* 82076A74h */ case    3:  		/* add R11, R10, R11 */
		/* 82076A74h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82076A74h case    3:*/		return 0x82076A78;
		  /* 82076A78h */ case    4:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076A78h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A78h case    4:*/		return 0x82076A7C;
		  /* 82076A7Ch */ case    5:  		/* ori R22, R11, 2 */
		/* 82076A7Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R11,0x2);
		/* 82076A7Ch case    5:*/		return 0x82076A80;
		  /* 82076A80h */ case    6:  		/* addi R11, R31, 324 */
		/* 82076A80h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x144);
		/* 82076A80h case    6:*/		return 0x82076A84;
		  /* 82076A84h */ case    7:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076A84h case    7:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076A84h case    7:*/		return 0x82076A88;
		  /* 82076A88h */ case    8:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076A88h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A88h case    8:*/		return 0x82076A8C;
		  /* 82076A8Ch */ case    9:  		/* addi R10, R10, 512 */
		/* 82076A8Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076A8Ch case    9:*/		return 0x82076A90;
		  /* 82076A90h */ case   10:  		/* rlwinm R9, R10, 0, 19, 19 */
		/* 82076A90h case   10:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R10);
		/* 82076A90h case   10:*/		return 0x82076A94;
		  /* 82076A94h */ case   11:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076A94h case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A94h case   11:*/		return 0x82076A98;
		  /* 82076A98h */ case   12:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076A98h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A98h case   12:*/		return 0x82076A9C;
		  /* 82076A9Ch */ case   13:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076A9Ch case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076A9Ch case   13:*/		return 0x82076AA0;
		  /* 82076AA0h */ case   14:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076AA0h case   14:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AA0h case   14:*/		return 0x82076AA4;
		  /* 82076AA4h */ case   15:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076AA4h case   15:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AA4h case   15:*/		return 0x82076AA8;
		  /* 82076AA8h */ case   16:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076AA8h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AA8h case   16:*/		return 0x82076AAC;
		  /* 82076AACh */ case   17:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076AACh case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AACh case   17:*/		return 0x82076AB0;
		  /* 82076AB0h */ case   18:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076AB0h case   18:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AB0h case   18:*/		return 0x82076AB4;
		  /* 82076AB4h */ case   19:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076AB4h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AB4h case   19:*/		return 0x82076AB8;
		  /* 82076AB8h */ case   20:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076AB8h case   20:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AB8h case   20:*/		return 0x82076ABC;
		  /* 82076ABCh */ case   21:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076ABCh case   21:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076ABCh case   21:*/		return 0x82076AC0;
		  /* 82076AC0h */ case   22:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076AC0h case   22:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AC0h case   22:*/		return 0x82076AC4;
		  /* 82076AC4h */ case   23:  		/* stwu R22, <#[R3 + 4]> */
		/* 82076AC4h case   23:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AC4h case   23:*/		return 0x82076AC8;
		  /* 82076AC8h */ case   24:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076AC8h case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AC8h case   24:*/		return 0x82076ACC;
		  /* 82076ACCh */ case   25:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076ACCh case   25:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076ACCh case   25:*/		return 0x82076AD0;
		  /* 82076AD0h */ case   26:  		/* stwu R23, <#[R3 + 4]> */
		/* 82076AD0h case   26:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AD0h case   26:*/		return 0x82076AD4;
		  /* 82076AD4h */ case   27:  		/* addi R11, R31, 320 */
		/* 82076AD4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x140);
		/* 82076AD4h case   27:*/		return 0x82076AD8;
		  /* 82076AD8h */ case   28:  		/* add R9, R9, R10 */
		/* 82076AD8h case   28:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076AD8h case   28:*/		return 0x82076ADC;
		  /* 82076ADCh */ case   29:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076ADCh case   29:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076ADCh case   29:*/		return 0x82076AE0;
		  /* 82076AE0h */ case   30:  		/* ori R9, R9, 2 */
		/* 82076AE0h case   30:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82076AE0h case   30:*/		return 0x82076AE4;
		  /* 82076AE4h */ case   31:  		/* addi R8, R10, 512 */
		/* 82076AE4h case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x200);
		/* 82076AE4h case   31:*/		return 0x82076AE8;
		  /* 82076AE8h */ case   32:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076AE8h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076AE8h case   32:*/		return 0x82076AEC;
		  /* 82076AECh */ case   33:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076AECh case   33:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076AECh case   33:*/		return 0x82076AF0;
		  /* 82076AF0h */ case   34:  		/* rlwinm R9, R8, 0, 19, 19 */
		/* 82076AF0h case   34:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R8);
		/* 82076AF0h case   34:*/		return 0x82076AF4;
		  /* 82076AF4h */ case   35:  		/* li R7, 3708 */
		/* 82076AF4h case   35:*/		cpu::op::li<0>(regs,&regs.R7,0xE7C);
		/* 82076AF4h case   35:*/		return 0x82076AF8;
		  /* 82076AF8h */ case   36:  		/* add R9, R9, R10 */
		/* 82076AF8h case   36:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076AF8h case   36:*/		return 0x82076AFC;
		  /* 82076AFCh */ case   37:  		/* addi R11, R31, 332 */
		/* 82076AFCh case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x14C);
		/* 82076AFCh case   37:*/		return 0x82076B00;
		  /* 82076B00h */ case   38:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076B00h case   38:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B00h case   38:*/		return 0x82076B04;
		  /* 82076B04h */ case   39:  		/* ori R8, R9, 2 */
		/* 82076B04h case   39:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R9,0x2);
		/* 82076B04h case   39:*/		return 0x82076B08;
		  /* 82076B08h */ case   40:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076B08h case   40:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076B08h case   40:*/		return 0x82076B0C;
		  /* 82076B0Ch */ case   41:  		/* li R6, 3617 */
		/* 82076B0Ch case   41:*/		cpu::op::li<0>(regs,&regs.R6,0xE21);
		/* 82076B0Ch case   41:*/		return 0x82076B10;
		  /* 82076B10h */ case   42:  		/* addi R9, R10, 512 */
		/* 82076B10h case   42:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076B10h case   42:*/		return 0x82076B14;
		  /* 82076B14h */ case   43:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076B14h case   43:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076B14h case   43:*/		return 0x82076B18;
		  /* 82076B18h */ case   44:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076B18h case   44:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B18h case   44:*/		return 0x82076B1C;
		  /* 82076B1Ch */ case   45:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076B1Ch case   45:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076B1Ch case   45:*/		return 0x82076B20;
		  /* 82076B20h */ case   46:  		/* addi R11, R31, 328 */
		/* 82076B20h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x148);
		/* 82076B20h case   46:*/		return 0x82076B24;
		  /* 82076B24h */ case   47:  		/* add R9, R9, R10 */
		/* 82076B24h case   47:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076B24h case   47:*/		return 0x82076B28;
		  /* 82076B28h */ case   48:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076B28h case   48:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076B28h case   48:*/		return 0x82076B2C;
		  /* 82076B2Ch */ case   49:  		/* ori R7, R9, 2 */
		/* 82076B2Ch case   49:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R9,0x2);
		/* 82076B2Ch case   49:*/		return 0x82076B30;
		  /* 82076B30h */ case   50:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076B30h case   50:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B30h case   50:*/		return 0x82076B34;
		  /* 82076B34h */ case   51:  		/* addi R9, R10, 512 */
		/* 82076B34h case   51:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076B34h case   51:*/		return 0x82076B38;
		  /* 82076B38h */ case   52:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076B38h case   52:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076B38h case   52:*/		return 0x82076B3C;
		  /* 82076B3Ch */ case   53:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076B3Ch case   53:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076B3Ch case   53:*/		return 0x82076B40;
		  /* 82076B40h */ case   54:  		/* li R4, 3616 */
		/* 82076B40h case   54:*/		cpu::op::li<0>(regs,&regs.R4,0xE20);
		/* 82076B40h case   54:*/		return 0x82076B44;
		  /* 82076B44h */ case   55:  		/* add R9, R9, R10 */
		/* 82076B44h case   55:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076B44h case   55:*/		return 0x82076B48;
		  /* 82076B48h */ case   56:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076B48h case   56:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B48h case   56:*/		return 0x82076B4C;
		  /* 82076B4Ch */ case   57:  		/* addi R11, R31, 340 */
		/* 82076B4Ch case   57:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x154);
		/* 82076B4Ch case   57:*/		return 0x82076B50;
		  /* 82076B50h */ case   58:  		/* ori R28, R9, 2 */
		/* 82076B50h case   58:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82076B50h case   58:*/		return 0x82076B54;
		  /* 82076B54h */ case   59:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076B54h case   59:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076B54h case   59:*/		return 0x82076B58;
		  /* 82076B58h */ case   60:  		/* li R27, 3620 */
		/* 82076B58h case   60:*/		cpu::op::li<0>(regs,&regs.R27,0xE24);
		/* 82076B58h case   60:*/		return 0x82076B5C;
		  /* 82076B5Ch */ case   61:  		/* addi R9, R10, 512 */
		/* 82076B5Ch case   61:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076B5Ch case   61:*/		return 0x82076B60;
		  /* 82076B60h */ case   62:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076B60h case   62:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B60h case   62:*/		return 0x82076B64;
		  /* 82076B64h */ case   63:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076B64h case   63:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076B64h case   63:*/		return 0x82076B68;
		  /* 82076B68h */ case   64:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076B68h case   64:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076B68h case   64:*/		return 0x82076B6C;
		  /* 82076B6Ch */ case   65:  		/* addi R11, R31, 336 */
		/* 82076B6Ch case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x150);
		/* 82076B6Ch case   65:*/		return 0x82076B70;
		  /* 82076B70h */ case   66:  		/* add R9, R9, R10 */
		/* 82076B70h case   66:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076B70h case   66:*/		return 0x82076B74;
		  /* 82076B74h */ case   67:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076B74h case   67:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076B74h case   67:*/		return 0x82076B78;
		  /* 82076B78h */ case   68:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076B78h case   68:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B78h case   68:*/		return 0x82076B7C;
		  /* 82076B7Ch */ case   69:  		/* ori R6, R9, 2 */
		/* 82076B7Ch case   69:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 82076B7Ch case   69:*/		return 0x82076B80;
		  /* 82076B80h */ case   70:  		/* addi R10, R10, 512 */
		/* 82076B80h case   70:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076B80h case   70:*/		return 0x82076B84;
		  /* 82076B84h */ case   71:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076B84h case   71:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076B84h case   71:*/		return 0x82076B88;
		  /* 82076B88h */ case   72:  		/* rlwinm R9, R10, 0, 19, 19 */
		/* 82076B88h case   72:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R10);
		/* 82076B88h case   72:*/		return 0x82076B8C;
		  /* 82076B8Ch */ case   73:  		/* addi R10, R31, 348 */
		/* 82076B8Ch case   73:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x15C);
		/* 82076B8Ch case   73:*/		return 0x82076B90;
		  /* 82076B90h */ case   74:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076B90h case   74:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076B90h case   74:*/		return 0x82076B94;
		  /* 82076B94h */ case   75:  		/* li R26, 3619 */
		/* 82076B94h case   75:*/		cpu::op::li<0>(regs,&regs.R26,0xE23);
		/* 82076B94h case   75:*/		return 0x82076B98;
		  /* 82076B98h */ case   76:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82076B98h case   76:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82076B98h case   76:*/		return 0x82076B9C;
		  /* 82076B9Ch */ case   77:  		/* add R11, R9, R11 */
		/* 82076B9Ch case   77:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82076B9Ch case   77:*/		return 0x82076BA0;
		  /* 82076BA0h */ case   78:  		/* addi R8, R8, 512 */
		/* 82076BA0h case   78:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076BA0h case   78:*/		return 0x82076BA4;
		  /* 82076BA4h */ case   79:  		/* ori R9, R11, 2 */
		/* 82076BA4h case   79:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x2);
		/* 82076BA4h case   79:*/		return 0x82076BA8;
		  /* 82076BA8h */ case   80:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076BA8h case   80:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BA8h case   80:*/		return 0x82076BAC;
		  /* 82076BACh */ case   81:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82076BACh case   81:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82076BACh case   81:*/		return 0x82076BB0;
		  /* 82076BB0h */ case   82:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82076BB0h case   82:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82076BB0h case   82:*/		return 0x82076BB4;
		  /* 82076BB4h */ case   83:  		/* li R7, 3626 */
		/* 82076BB4h case   83:*/		cpu::op::li<0>(regs,&regs.R7,0xE2A);
		/* 82076BB4h case   83:*/		return 0x82076BB8;
		  /* 82076BB8h */ case   84:  		/* add R10, R10, R11 */
		/* 82076BB8h case   84:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076BB8h case   84:*/		return 0x82076BBC;
		  /* 82076BBCh */ case   85:  		/* addi R11, R31, 344 */
		/* 82076BBCh case   85:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x158);
		/* 82076BBCh case   85:*/		return 0x82076BC0;
	}
	return 0x82076BC0;
} // Block from 82076A68h-82076BC0h (86 instructions)

//////////////////////////////////////////////////////
// Block at 82076BC0h
// Function '?SetPending_AluConstants@D3D@@YAXPAVCDevice@1@_KKPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82076BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82076BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82076BC0);
		  /* 82076BC0h */ case    0:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076BC0h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BC0h case    0:*/		return 0x82076BC4;
		  /* 82076BC4h */ case    1:  		/* ori R8, R10, 2 */
		/* 82076BC4h case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076BC4h case    1:*/		return 0x82076BC8;
		  /* 82076BC8h */ case    2:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076BC8h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076BC8h case    2:*/		return 0x82076BCC;
		  /* 82076BCCh */ case    3:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076BCCh case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BCCh case    3:*/		return 0x82076BD0;
		  /* 82076BD0h */ case    4:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076BD0h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BD0h case    4:*/		return 0x82076BD4;
		  /* 82076BD4h */ case    5:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076BD4h case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BD4h case    5:*/		return 0x82076BD8;
		  /* 82076BD8h */ case    6:  		/* li R6, 3625 */
		/* 82076BD8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0xE29);
		/* 82076BD8h case    6:*/		return 0x82076BDC;
		  /* 82076BDCh */ case    7:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076BDCh case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BDCh case    7:*/		return 0x82076BE0;
		  /* 82076BE0h */ case    8:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076BE0h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BE0h case    8:*/		return 0x82076BE4;
		  /* 82076BE4h */ case    9:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076BE4h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BE4h case    9:*/		return 0x82076BE8;
		  /* 82076BE8h */ case   10:  		/* addi R9, R10, 512 */
		/* 82076BE8h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076BE8h case   10:*/		return 0x82076BEC;
		  /* 82076BECh */ case   11:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076BECh case   11:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076BECh case   11:*/		return 0x82076BF0;
		  /* 82076BF0h */ case   12:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076BF0h case   12:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076BF0h case   12:*/		return 0x82076BF4;
		  /* 82076BF4h */ case   13:  		/* addi R11, R31, 356 */
		/* 82076BF4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x164);
		/* 82076BF4h case   13:*/		return 0x82076BF8;
		  /* 82076BF8h */ case   14:  		/* add R10, R9, R10 */
		/* 82076BF8h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076BF8h case   14:*/		return 0x82076BFC;
		  /* 82076BFCh */ case   15:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076BFCh case   15:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076BFCh case   15:*/		return 0x82076C00;
		  /* 82076C00h */ case   16:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076C00h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C00h case   16:*/		return 0x82076C04;
		  /* 82076C04h */ case   17:  		/* ori R7, R10, 2 */
		/* 82076C04h case   17:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82076C04h case   17:*/		return 0x82076C08;
		  /* 82076C08h */ case   18:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076C08h case   18:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076C08h case   18:*/		return 0x82076C0C;
		  /* 82076C0Ch */ case   19:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076C0Ch case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C0Ch case   19:*/		return 0x82076C10;
		  /* 82076C10h */ case   20:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076C10h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C10h case   20:*/		return 0x82076C14;
		  /* 82076C14h */ case   21:  		/* addi R9, R10, 512 */
		/* 82076C14h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076C14h case   21:*/		return 0x82076C18;
		  /* 82076C18h */ case   22:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076C18h case   22:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076C18h case   22:*/		return 0x82076C1C;
		  /* 82076C1Ch */ case   23:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076C1Ch case   23:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076C1Ch case   23:*/		return 0x82076C20;
		  /* 82076C20h */ case   24:  		/* li R4, 3629 */
		/* 82076C20h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0xE2D);
		/* 82076C20h case   24:*/		return 0x82076C24;
		  /* 82076C24h */ case   25:  		/* addi R11, R31, 352 */
		/* 82076C24h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x160);
		/* 82076C24h case   25:*/		return 0x82076C28;
		  /* 82076C28h */ case   26:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076C28h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C28h case   26:*/		return 0x82076C2C;
		  /* 82076C2Ch */ case   27:  		/* add R9, R9, R10 */
		/* 82076C2Ch case   27:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076C2Ch case   27:*/		return 0x82076C30;
		  /* 82076C30h */ case   28:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076C30h case   28:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076C30h case   28:*/		return 0x82076C34;
		  /* 82076C34h */ case   29:  		/* ori R28, R9, 2 */
		/* 82076C34h case   29:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 82076C34h case   29:*/		return 0x82076C38;
		  /* 82076C38h */ case   30:  		/* addi R10, R10, 512 */
		/* 82076C38h case   30:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076C38h case   30:*/		return 0x82076C3C;
		  /* 82076C3Ch */ case   31:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076C3Ch case   31:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076C3Ch case   31:*/		return 0x82076C40;
		  /* 82076C40h */ case   32:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076C40h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C40h case   32:*/		return 0x82076C44;
		  /* 82076C44h */ case   33:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076C44h case   33:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076C44h case   33:*/		return 0x82076C48;
		  /* 82076C48h */ case   34:  		/* li R27, 3628 */
		/* 82076C48h case   34:*/		cpu::op::li<0>(regs,&regs.R27,0xE2C);
		/* 82076C48h case   34:*/		return 0x82076C4C;
		  /* 82076C4Ch */ case   35:  		/* add R11, R10, R11 */
		/* 82076C4Ch case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82076C4Ch case   35:*/		return 0x82076C50;
		  /* 82076C50h */ case   36:  		/* li R6, 3635 */
		/* 82076C50h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0xE33);
		/* 82076C50h case   36:*/		return 0x82076C54;
		  /* 82076C54h */ case   37:  		/* ori R26, R11, 2 */
		/* 82076C54h case   37:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R11,0x2);
		/* 82076C54h case   37:*/		return 0x82076C58;
		  /* 82076C58h */ case   38:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076C58h case   38:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C58h case   38:*/		return 0x82076C5C;
		  /* 82076C5Ch */ case   39:  		/* addi R11, R31, 364 */
		/* 82076C5Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x16C);
		/* 82076C5Ch case   39:*/		return 0x82076C60;
		  /* 82076C60h */ case   40:  		/* li R25, 3634 */
		/* 82076C60h case   40:*/		cpu::op::li<0>(regs,&regs.R25,0xE32);
		/* 82076C60h case   40:*/		return 0x82076C64;
		  /* 82076C64h */ case   41:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076C64h case   41:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076C64h case   41:*/		return 0x82076C68;
		  /* 82076C68h */ case   42:  		/* li R7, 3638 */
		/* 82076C68h case   42:*/		cpu::op::li<0>(regs,&regs.R7,0xE36);
		/* 82076C68h case   42:*/		return 0x82076C6C;
		  /* 82076C6Ch */ case   43:  		/* addi R9, R10, 512 */
		/* 82076C6Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076C6Ch case   43:*/		return 0x82076C70;
		  /* 82076C70h */ case   44:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076C70h case   44:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C70h case   44:*/		return 0x82076C74;
		  /* 82076C74h */ case   45:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076C74h case   45:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076C74h case   45:*/		return 0x82076C78;
		  /* 82076C78h */ case   46:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076C78h case   46:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076C78h case   46:*/		return 0x82076C7C;
		  /* 82076C7Ch */ case   47:  		/* addi R11, R31, 360 */
		/* 82076C7Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x168);
		/* 82076C7Ch case   47:*/		return 0x82076C80;
		  /* 82076C80h */ case   48:  		/* add R10, R9, R10 */
		/* 82076C80h case   48:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076C80h case   48:*/		return 0x82076C84;
		  /* 82076C84h */ case   49:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82076C84h case   49:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82076C84h case   49:*/		return 0x82076C88;
		  /* 82076C88h */ case   50:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076C88h case   50:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076C88h case   50:*/		return 0x82076C8C;
		  /* 82076C8Ch */ case   51:  		/* ori R24, R10, 2 */
		/* 82076C8Ch case   51:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R10,0x2);
		/* 82076C8Ch case   51:*/		return 0x82076C90;
		  /* 82076C90h */ case   52:  		/* addi R10, R31, 372 */
		/* 82076C90h case   52:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x174);
		/* 82076C90h case   52:*/		return 0x82076C94;
		  /* 82076C94h */ case   53:  		/* addi R9, R9, 512 */
		/* 82076C94h case   53:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82076C94h case   53:*/		return 0x82076C98;
		  /* 82076C98h */ case   54:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82076C98h case   54:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82076C98h case   54:*/		return 0x82076C9C;
		  /* 82076C9Ch */ case   55:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076C9Ch case   55:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076C9Ch case   55:*/		return 0x82076CA0;
		  /* 82076CA0h */ case   56:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076CA0h case   56:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076CA0h case   56:*/		return 0x82076CA4;
		  /* 82076CA4h */ case   57:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076CA4h case   57:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076CA4h case   57:*/		return 0x82076CA8;
		  /* 82076CA8h */ case   58:  		/* addi R8, R8, 512 */
		/* 82076CA8h case   58:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076CA8h case   58:*/		return 0x82076CAC;
		  /* 82076CACh */ case   59:  		/* add R9, R9, R11 */
		/* 82076CACh case   59:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82076CACh case   59:*/		return 0x82076CB0;
		  /* 82076CB0h */ case   60:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82076CB0h case   60:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82076CB0h case   60:*/		return 0x82076CB4;
		  /* 82076CB4h */ case   61:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82076CB4h case   61:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82076CB4h case   61:*/		return 0x82076CB8;
		  /* 82076CB8h */ case   62:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076CB8h case   62:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076CB8h case   62:*/		return 0x82076CBC;
		  /* 82076CBCh */ case   63:  		/* ori R9, R9, 2 */
		/* 82076CBCh case   63:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82076CBCh case   63:*/		return 0x82076CC0;
		  /* 82076CC0h */ case   64:  		/* add R10, R10, R11 */
		/* 82076CC0h case   64:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076CC0h case   64:*/		return 0x82076CC4;
		  /* 82076CC4h */ case   65:  		/* addi R11, R31, 368 */
		/* 82076CC4h case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x170);
		/* 82076CC4h case   65:*/		return 0x82076CC8;
		  /* 82076CC8h */ case   66:  		/* ori R8, R10, 2 */
		/* 82076CC8h case   66:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076CC8h case   66:*/		return 0x82076CCC;
		  /* 82076CCCh */ case   67:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076CCCh case   67:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076CCCh case   67:*/		return 0x82076CD0;
		  /* 82076CD0h */ case   68:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076CD0h case   68:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076CD0h case   68:*/		return 0x82076CD4;
		  /* 82076CD4h */ case   69:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076CD4h case   69:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076CD4h case   69:*/		return 0x82076CD8;
		  /* 82076CD8h */ case   70:  		/* addi R10, R10, 512 */
		/* 82076CD8h case   70:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076CD8h case   70:*/		return 0x82076CDC;
		  /* 82076CDCh */ case   71:  		/* li R4, 3637 */
		/* 82076CDCh case   71:*/		cpu::op::li<0>(regs,&regs.R4,0xE35);
		/* 82076CDCh case   71:*/		return 0x82076CE0;
		  /* 82076CE0h */ case   72:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076CE0h case   72:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076CE0h case   72:*/		return 0x82076CE4;
		  /* 82076CE4h */ case   73:  		/* li R28, 3644 */
		/* 82076CE4h case   73:*/		cpu::op::li<0>(regs,&regs.R28,0xE3C);
		/* 82076CE4h case   73:*/		return 0x82076CE8;
		  /* 82076CE8h */ case   74:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076CE8h case   74:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076CE8h case   74:*/		return 0x82076CEC;
		  /* 82076CECh */ case   75:  		/* add R10, R10, R11 */
		/* 82076CECh case   75:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076CECh case   75:*/		return 0x82076CF0;
		  /* 82076CF0h */ case   76:  		/* addi R11, R31, 380 */
		/* 82076CF0h case   76:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x17C);
		/* 82076CF0h case   76:*/		return 0x82076CF4;
		  /* 82076CF4h */ case   77:  		/* ori R27, R10, 2 */
		/* 82076CF4h case   77:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R10,0x2);
		/* 82076CF4h case   77:*/		return 0x82076CF8;
		  /* 82076CF8h */ case   78:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076CF8h case   78:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076CF8h case   78:*/		return 0x82076CFC;
		  /* 82076CFCh */ case   79:  		/* li R26, 3643 */
		/* 82076CFCh case   79:*/		cpu::op::li<0>(regs,&regs.R26,0xE3B);
		/* 82076CFCh case   79:*/		return 0x82076D00;
		  /* 82076D00h */ case   80:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076D00h case   80:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D00h case   80:*/		return 0x82076D04;
		  /* 82076D04h */ case   81:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076D04h case   81:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D04h case   81:*/		return 0x82076D08;
		  /* 82076D08h */ case   82:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076D08h case   82:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D08h case   82:*/		return 0x82076D0C;
		  /* 82076D0Ch */ case   83:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076D0Ch case   83:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D0Ch case   83:*/		return 0x82076D10;
	}
	return 0x82076D10;
} // Block from 82076BC0h-82076D10h (84 instructions)

//////////////////////////////////////////////////////
// Block at 82076D10h
// Function '?PatchVertexShaderToMatchVertexDeclaration@D3D@@YAXPAVCVertexShader@1@PAKPBVCVertexDeclaration@1@PBEK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82076D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82076D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82076D10);
		  /* 82076D10h */ case    0:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076D10h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D10h case    0:*/		return 0x82076D14;
		  /* 82076D14h */ case    1:  		/* addi R9, R10, 512 */
		/* 82076D14h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076D14h case    1:*/		return 0x82076D18;
		  /* 82076D18h */ case    2:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076D18h case    2:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076D18h case    2:*/		return 0x82076D1C;
		  /* 82076D1Ch */ case    3:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076D1Ch case    3:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076D1Ch case    3:*/		return 0x82076D20;
		  /* 82076D20h */ case    4:  		/* addi R11, R31, 376 */
		/* 82076D20h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x178);
		/* 82076D20h case    4:*/		return 0x82076D24;
		  /* 82076D24h */ case    5:  		/* add R9, R9, R10 */
		/* 82076D24h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076D24h case    5:*/		return 0x82076D28;
		  /* 82076D28h */ case    6:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076D28h case    6:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076D28h case    6:*/		return 0x82076D2C;
		  /* 82076D2Ch */ case    7:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076D2Ch case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D2Ch case    7:*/		return 0x82076D30;
		  /* 82076D30h */ case    8:  		/* ori R25, R9, 2 */
		/* 82076D30h case    8:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R9,0x2);
		/* 82076D30h case    8:*/		return 0x82076D34;
		  /* 82076D34h */ case    9:  		/* addi R9, R10, 512 */
		/* 82076D34h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076D34h case    9:*/		return 0x82076D38;
		  /* 82076D38h */ case   10:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076D38h case   10:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076D38h case   10:*/		return 0x82076D3C;
		  /* 82076D3Ch */ case   11:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076D3Ch case   11:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076D3Ch case   11:*/		return 0x82076D40;
		  /* 82076D40h */ case   12:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076D40h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D40h case   12:*/		return 0x82076D44;
		  /* 82076D44h */ case   13:  		/* addi R11, R31, 388 */
		/* 82076D44h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x184);
		/* 82076D44h case   13:*/		return 0x82076D48;
		  /* 82076D48h */ case   14:  		/* add R10, R9, R10 */
		/* 82076D48h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076D48h case   14:*/		return 0x82076D4C;
		  /* 82076D4Ch */ case   15:  		/* ori R24, R10, 2 */
		/* 82076D4Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R10,0x2);
		/* 82076D4Ch case   15:*/		return 0x82076D50;
		  /* 82076D50h */ case   16:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076D50h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D50h case   16:*/		return 0x82076D54;
		  /* 82076D54h */ case   17:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076D54h case   17:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D54h case   17:*/		return 0x82076D58;
		  /* 82076D58h */ case   18:  		/* addi R10, R31, 384 */
		/* 82076D58h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x180);
		/* 82076D58h case   18:*/		return 0x82076D5C;
		  /* 82076D5Ch */ case   19:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076D5Ch case   19:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076D5Ch case   19:*/		return 0x82076D60;
		  /* 82076D60h */ case   20:  		/* rlwinm R7, R10, 12, 20, 31 */
		/* 82076D60h case   20:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R10);
		/* 82076D60h case   20:*/		return 0x82076D64;
		  /* 82076D64h */ case   21:  		/* addi R9, R31, 396 */
		/* 82076D64h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x18C);
		/* 82076D64h case   21:*/		return 0x82076D68;
		  /* 82076D68h */ case   22:  		/* addi R8, R8, 512 */
		/* 82076D68h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076D68h case   22:*/		return 0x82076D6C;
		  /* 82076D6Ch */ case   23:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076D6Ch case   23:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D6Ch case   23:*/		return 0x82076D70;
		  /* 82076D70h */ case   24:  		/* addi R7, R7, 512 */
		/* 82076D70h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x200);
		/* 82076D70h case   24:*/		return 0x82076D74;
		  /* 82076D74h */ case   25:  		/* rlwinm R6, R9, 12, 20, 31 */
		/* 82076D74h case   25:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R6,regs.R9);
		/* 82076D74h case   25:*/		return 0x82076D78;
		  /* 82076D78h */ case   26:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82076D78h case   26:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82076D78h case   26:*/		return 0x82076D7C;
		  /* 82076D7Ch */ case   27:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076D7Ch case   27:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076D7Ch case   27:*/		return 0x82076D80;
		  /* 82076D80h */ case   28:  		/* rlwinm R8, R8, 0, 19, 19 */
		/* 82076D80h case   28:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R8,regs.R8);
		/* 82076D80h case   28:*/		return 0x82076D84;
		  /* 82076D84h */ case   29:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076D84h case   29:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D84h case   29:*/		return 0x82076D88;
		  /* 82076D88h */ case   30:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 82076D88h case   30:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 82076D88h case   30:*/		return 0x82076D8C;
		  /* 82076D8Ch */ case   31:  		/* addi R6, R6, 512 */
		/* 82076D8Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x200);
		/* 82076D8Ch case   31:*/		return 0x82076D90;
		  /* 82076D90h */ case   32:  		/* add R7, R7, R10 */
		/* 82076D90h case   32:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 82076D90h case   32:*/		return 0x82076D94;
		  /* 82076D94h */ case   33:  		/* add R8, R8, R11 */
		/* 82076D94h case   33:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 82076D94h case   33:*/		return 0x82076D98;
		  /* 82076D98h */ case   34:  		/* rlwinm R11, R9, 0, 3, 31 */
		/* 82076D98h case   34:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R9);
		/* 82076D98h case   34:*/		return 0x82076D9C;
		  /* 82076D9Ch */ case   35:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076D9Ch case   35:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076D9Ch case   35:*/		return 0x82076DA0;
		  /* 82076DA0h */ case   36:  		/* rlwinm R10, R6, 0, 19, 19 */
		/* 82076DA0h case   36:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R6);
		/* 82076DA0h case   36:*/		return 0x82076DA4;
		  /* 82076DA4h */ case   37:  		/* li R9, 3647 */
		/* 82076DA4h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0xE3F);
		/* 82076DA4h case   37:*/		return 0x82076DA8;
		  /* 82076DA8h */ case   38:  		/* add R10, R10, R11 */
		/* 82076DA8h case   38:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076DA8h case   38:*/		return 0x82076DAC;
		  /* 82076DACh */ case   39:  		/* addi R11, R31, 392 */
		/* 82076DACh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x188);
		/* 82076DACh case   39:*/		return 0x82076DB0;
		  /* 82076DB0h */ case   40:  		/* ori R8, R8, 2 */
		/* 82076DB0h case   40:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2);
		/* 82076DB0h case   40:*/		return 0x82076DB4;
		  /* 82076DB4h */ case   41:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076DB4h case   41:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DB4h case   41:*/		return 0x82076DB8;
		  /* 82076DB8h */ case   42:  		/* ori R28, R10, 2 */
		/* 82076DB8h case   42:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 82076DB8h case   42:*/		return 0x82076DBC;
		  /* 82076DBCh */ case   43:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076DBCh case   43:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076DBCh case   43:*/		return 0x82076DC0;
		  /* 82076DC0h */ case   44:  		/* li R6, 3646 */
		/* 82076DC0h case   44:*/		cpu::op::li<0>(regs,&regs.R6,0xE3E);
		/* 82076DC0h case   44:*/		return 0x82076DC4;
		  /* 82076DC4h */ case   45:  		/* ori R7, R7, 2 */
		/* 82076DC4h case   45:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x2);
		/* 82076DC4h case   45:*/		return 0x82076DC8;
		  /* 82076DC8h */ case   46:  		/* li R4, 3544 */
		/* 82076DC8h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0xDD8);
		/* 82076DC8h case   46:*/		return 0x82076DCC;
		  /* 82076DCCh */ case   47:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076DCCh case   47:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DCCh case   47:*/		return 0x82076DD0;
		  /* 82076DD0h */ case   48:  		/* li R27, 3545 */
		/* 82076DD0h case   48:*/		cpu::op::li<0>(regs,&regs.R27,0xDD9);
		/* 82076DD0h case   48:*/		return 0x82076DD4;
		  /* 82076DD4h */ case   49:  		/* li R23, 3850 */
		/* 82076DD4h case   49:*/		cpu::op::li<0>(regs,&regs.R23,0xF0A);
		/* 82076DD4h case   49:*/		return 0x82076DD8;
		  /* 82076DD8h */ case   50:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076DD8h case   50:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DD8h case   50:*/		return 0x82076DDC;
		  /* 82076DDCh */ case   51:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076DDCh case   51:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DDCh case   51:*/		return 0x82076DE0;
		  /* 82076DE0h */ case   52:  		/* li R26, 3848 */
		/* 82076DE0h case   52:*/		cpu::op::li<0>(regs,&regs.R26,0xF08);
		/* 82076DE0h case   52:*/		return 0x82076DE4;
		  /* 82076DE4h */ case   53:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076DE4h case   53:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DE4h case   53:*/		return 0x82076DE8;
		  /* 82076DE8h */ case   54:  		/* li R24, 3849 */
		/* 82076DE8h case   54:*/		cpu::op::li<0>(regs,&regs.R24,0xF09);
		/* 82076DE8h case   54:*/		return 0x82076DEC;
		  /* 82076DECh */ case   55:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076DECh case   55:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DECh case   55:*/		return 0x82076DF0;
		  /* 82076DF0h */ case   56:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076DF0h case   56:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076DF0h case   56:*/		return 0x82076DF4;
		  /* 82076DF4h */ case   57:  		/* addi R9, R10, 512 */
		/* 82076DF4h case   57:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076DF4h case   57:*/		return 0x82076DF8;
		  /* 82076DF8h */ case   58:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076DF8h case   58:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076DF8h case   58:*/		return 0x82076DFC;
		  /* 82076DFCh */ case   59:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076DFCh case   59:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076DFCh case   59:*/		return 0x82076E00;
		  /* 82076E00h */ case   60:  		/* addi R11, R31, 404 */
		/* 82076E00h case   60:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x194);
		/* 82076E00h case   60:*/		return 0x82076E04;
		  /* 82076E04h */ case   61:  		/* add R10, R9, R10 */
		/* 82076E04h case   61:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076E04h case   61:*/		return 0x82076E08;
		  /* 82076E08h */ case   62:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076E08h case   62:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E08h case   62:*/		return 0x82076E0C;
		  /* 82076E0Ch */ case   63:  		/* ori R25, R10, 2 */
		/* 82076E0Ch case   63:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 82076E0Ch case   63:*/		return 0x82076E10;
		  /* 82076E10h */ case   64:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076E10h case   64:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076E10h case   64:*/		return 0x82076E14;
		  /* 82076E14h */ case   65:  		/* addi R9, R10, 512 */
		/* 82076E14h case   65:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076E14h case   65:*/		return 0x82076E18;
		  /* 82076E18h */ case   66:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076E18h case   66:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E18h case   66:*/		return 0x82076E1C;
		  /* 82076E1Ch */ case   67:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076E1Ch case   67:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076E1Ch case   67:*/		return 0x82076E20;
		  /* 82076E20h */ case   68:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076E20h case   68:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076E20h case   68:*/		return 0x82076E24;
		  /* 82076E24h */ case   69:  		/* addi R11, R31, 400 */
		/* 82076E24h case   69:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x190);
		/* 82076E24h case   69:*/		return 0x82076E28;
		  /* 82076E28h */ case   70:  		/* add R9, R9, R10 */
		/* 82076E28h case   70:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076E28h case   70:*/		return 0x82076E2C;
		  /* 82076E2Ch */ case   71:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076E2Ch case   71:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076E2Ch case   71:*/		return 0x82076E30;
		  /* 82076E30h */ case   72:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076E30h case   72:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E30h case   72:*/		return 0x82076E34;
		  /* 82076E34h */ case   73:  		/* ori R6, R9, 2 */
		/* 82076E34h case   73:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 82076E34h case   73:*/		return 0x82076E38;
		  /* 82076E38h */ case   74:  		/* addi R9, R10, 512 */
		/* 82076E38h case   74:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076E38h case   74:*/		return 0x82076E3C;
		  /* 82076E3Ch */ case   75:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076E3Ch case   75:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076E3Ch case   75:*/		return 0x82076E40;
		  /* 82076E40h */ case   76:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076E40h case   76:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076E40h case   76:*/		return 0x82076E44;
		  /* 82076E44h */ case   77:  		/* addi R11, R31, 412 */
		/* 82076E44h case   77:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x19C);
		/* 82076E44h case   77:*/		return 0x82076E48;
		  /* 82076E48h */ case   78:  		/* add R10, R9, R10 */
		/* 82076E48h case   78:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076E48h case   78:*/		return 0x82076E4C;
		  /* 82076E4Ch */ case   79:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076E4Ch case   79:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E4Ch case   79:*/		return 0x82076E50;
		  /* 82076E50h */ case   80:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82076E50h case   80:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82076E50h case   80:*/		return 0x82076E54;
		  /* 82076E54h */ case   81:  		/* ori R7, R10, 2 */
		/* 82076E54h case   81:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82076E54h case   81:*/		return 0x82076E58;
		  /* 82076E58h */ case   82:  		/* addi R10, R9, 512 */
		/* 82076E58h case   82:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x200);
		/* 82076E58h case   82:*/		return 0x82076E5C;
		  /* 82076E5Ch */ case   83:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076E5Ch case   83:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076E5Ch case   83:*/		return 0x82076E60;
		  /* 82076E60h */ case   84:  		/* rlwinm R9, R10, 0, 19, 19 */
		/* 82076E60h case   84:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R10);
		/* 82076E60h case   84:*/		return 0x82076E64;
		  /* 82076E64h */ case   85:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076E64h case   85:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E64h case   85:*/		return 0x82076E68;
		  /* 82076E68h */ case   86:  		/* addi R10, R31, 408 */
		/* 82076E68h case   86:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x198);
		/* 82076E68h case   86:*/		return 0x82076E6C;
		  /* 82076E6Ch */ case   87:  		/* add R11, R9, R11 */
		/* 82076E6Ch case   87:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82076E6Ch case   87:*/		return 0x82076E70;
		  /* 82076E70h */ case   88:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82076E70h case   88:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82076E70h case   88:*/		return 0x82076E74;
		  /* 82076E74h */ case   89:  		/* ori R9, R11, 2 */
		/* 82076E74h case   89:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x2);
		/* 82076E74h case   89:*/		return 0x82076E78;
		  /* 82076E78h */ case   90:  		/* addi R8, R8, 512 */
		/* 82076E78h case   90:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x200);
		/* 82076E78h case   90:*/		return 0x82076E7C;
		  /* 82076E7Ch */ case   91:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076E7Ch case   91:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E7Ch case   91:*/		return 0x82076E80;
		  /* 82076E80h */ case   92:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 82076E80h case   92:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 82076E80h case   92:*/		return 0x82076E84;
		  /* 82076E84h */ case   93:  		/* rlwinm R10, R8, 0, 19, 19 */
		/* 82076E84h case   93:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R8);
		/* 82076E84h case   93:*/		return 0x82076E88;
		  /* 82076E88h */ case   94:  		/* li R8, 3851 */
		/* 82076E88h case   94:*/		cpu::op::li<0>(regs,&regs.R8,0xF0B);
		/* 82076E88h case   94:*/		return 0x82076E8C;
		  /* 82076E8Ch */ case   95:  		/* add R10, R10, R11 */
		/* 82076E8Ch case   95:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076E8Ch case   95:*/		return 0x82076E90;
		  /* 82076E90h */ case   96:  		/* li R4, 3852 */
		/* 82076E90h case   96:*/		cpu::op::li<0>(regs,&regs.R4,0xF0C);
		/* 82076E90h case   96:*/		return 0x82076E94;
		  /* 82076E94h */ case   97:  		/* addi R11, R31, 420 */
		/* 82076E94h case   97:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1A4);
		/* 82076E94h case   97:*/		return 0x82076E98;
		  /* 82076E98h */ case   98:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076E98h case   98:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076E98h case   98:*/		return 0x82076E9C;
		  /* 82076E9Ch */ case   99:  		/* ori R28, R10, 2 */
		/* 82076E9Ch case   99:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R10,0x2);
		/* 82076E9Ch case   99:*/		return 0x82076EA0;
		  /* 82076EA0h */ case  100:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076EA0h case  100:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076EA0h case  100:*/		return 0x82076EA4;
		  /* 82076EA4h */ case  101:  		/* addi R10, R10, 512 */
		/* 82076EA4h case  101:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076EA4h case  101:*/		return 0x82076EA8;
		  /* 82076EA8h */ case  102:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076EA8h case  102:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EA8h case  102:*/		return 0x82076EAC;
		  /* 82076EACh */ case  103:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076EACh case  103:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076EACh case  103:*/		return 0x82076EB0;
		  /* 82076EB0h */ case  104:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076EB0h case  104:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EB0h case  104:*/		return 0x82076EB4;
		  /* 82076EB4h */ case  105:  		/* li R27, 3855 */
		/* 82076EB4h case  105:*/		cpu::op::li<0>(regs,&regs.R27,0xF0F);
		/* 82076EB4h case  105:*/		return 0x82076EB8;
		  /* 82076EB8h */ case  106:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076EB8h case  106:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EB8h case  106:*/		return 0x82076EBC;
		  /* 82076EBCh */ case  107:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076EBCh case  107:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EBCh case  107:*/		return 0x82076EC0;
		  /* 82076EC0h */ case  108:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076EC0h case  108:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EC0h case  108:*/		return 0x82076EC4;
		  /* 82076EC4h */ case  109:  		/* li R26, 2071 */
		/* 82076EC4h case  109:*/		cpu::op::li<0>(regs,&regs.R26,0x817);
		/* 82076EC4h case  109:*/		return 0x82076EC8;
		  /* 82076EC8h */ case  110:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076EC8h case  110:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EC8h case  110:*/		return 0x82076ECC;
		  /* 82076ECCh */ case  111:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076ECCh case  111:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076ECCh case  111:*/		return 0x82076ED0;
		  /* 82076ED0h */ case  112:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076ED0h case  112:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076ED0h case  112:*/		return 0x82076ED4;
		  /* 82076ED4h */ case  113:  		/* li R24, 2070 */
		/* 82076ED4h case  113:*/		cpu::op::li<0>(regs,&regs.R24,0x816);
		/* 82076ED4h case  113:*/		return 0x82076ED8;
		  /* 82076ED8h */ case  114:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076ED8h case  114:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076ED8h case  114:*/		return 0x82076EDC;
		  /* 82076EDCh */ case  115:  		/* li R7, 3853 */
		/* 82076EDCh case  115:*/		cpu::op::li<0>(regs,&regs.R7,0xF0D);
		/* 82076EDCh case  115:*/		return 0x82076EE0;
		  /* 82076EE0h */ case  116:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076EE0h case  116:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EE0h case  116:*/		return 0x82076EE4;
		  /* 82076EE4h */ case  117:  		/* stwu R23, <#[R3 + 4]> */
		/* 82076EE4h case  117:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EE4h case  117:*/		return 0x82076EE8;
		  /* 82076EE8h */ case  118:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076EE8h case  118:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EE8h case  118:*/		return 0x82076EEC;
		  /* 82076EECh */ case  119:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 82076EECh case  119:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 82076EECh case  119:*/		return 0x82076EF0;
		  /* 82076EF0h */ case  120:  		/* addi R11, R31, 416 */
		/* 82076EF0h case  120:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1A0);
		/* 82076EF0h case  120:*/		return 0x82076EF4;
		  /* 82076EF4h */ case  121:  		/* add R10, R10, R9 */
		/* 82076EF4h case  121:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82076EF4h case  121:*/		return 0x82076EF8;
		  /* 82076EF8h */ case  122:  		/* ori R6, R10, 2 */
		/* 82076EF8h case  122:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 82076EF8h case  122:*/		return 0x82076EFC;
		  /* 82076EFCh */ case  123:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076EFCh case  123:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076EFCh case  123:*/		return 0x82076F00;
		  /* 82076F00h */ case  124:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076F00h case  124:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076F00h case  124:*/		return 0x82076F04;
		  /* 82076F04h */ case  125:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076F04h case  125:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F04h case  125:*/		return 0x82076F08;
		  /* 82076F08h */ case  126:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 82076F08h case  126:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 82076F08h case  126:*/		return 0x82076F0C;
		  /* 82076F0Ch */ case  127:  		/* addi R11, R31, 428 */
		/* 82076F0Ch case  127:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1AC);
		/* 82076F0Ch case  127:*/		return 0x82076F10;
		  /* 82076F10h */ case  128:  		/* addi R9, R8, 512 */
		/* 82076F10h case  128:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 82076F10h case  128:*/		return 0x82076F14;
		  /* 82076F14h */ case  129:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076F14h case  129:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076F14h case  129:*/		return 0x82076F18;
		  /* 82076F18h */ case  130:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076F18h case  130:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F18h case  130:*/		return 0x82076F1C;
		  /* 82076F1Ch */ case  131:  		/* li R28, 3854 */
		/* 82076F1Ch case  131:*/		cpu::op::li<0>(regs,&regs.R28,0xF0E);
		/* 82076F1Ch case  131:*/		return 0x82076F20;
		  /* 82076F20h */ case  132:  		/* add R10, R9, R10 */
		/* 82076F20h case  132:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076F20h case  132:*/		return 0x82076F24;
		  /* 82076F24h */ case  133:  		/* ori R8, R10, 2 */
		/* 82076F24h case  133:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82076F24h case  133:*/		return 0x82076F28;
		  /* 82076F28h */ case  134:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076F28h case  134:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076F28h case  134:*/		return 0x82076F2C;
		  /* 82076F2Ch */ case  135:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076F2Ch case  135:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F2Ch case  135:*/		return 0x82076F30;
		  /* 82076F30h */ case  136:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82076F30h case  136:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82076F30h case  136:*/		return 0x82076F34;
		  /* 82076F34h */ case  137:  		/* addi R10, R10, 512 */
		/* 82076F34h case  137:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82076F34h case  137:*/		return 0x82076F38;
		  /* 82076F38h */ case  138:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82076F38h case  138:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82076F38h case  138:*/		return 0x82076F3C;
		  /* 82076F3Ch */ case  139:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076F3Ch case  139:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F3Ch case  139:*/		return 0x82076F40;
		  /* 82076F40h */ case  140:  		/* add R10, R10, R11 */
		/* 82076F40h case  140:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82076F40h case  140:*/		return 0x82076F44;
		  /* 82076F44h */ case  141:  		/* addi R11, R31, 424 */
		/* 82076F44h case  141:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1A8);
		/* 82076F44h case  141:*/		return 0x82076F48;
		  /* 82076F48h */ case  142:  		/* ori R4, R10, 2 */
		/* 82076F48h case  142:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R10,0x2);
		/* 82076F48h case  142:*/		return 0x82076F4C;
		  /* 82076F4Ch */ case  143:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076F4Ch case  143:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076F4Ch case  143:*/		return 0x82076F50;
		  /* 82076F50h */ case  144:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076F50h case  144:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F50h case  144:*/		return 0x82076F54;
		  /* 82076F54h */ case  145:  		/* addi R9, R10, 512 */
		/* 82076F54h case  145:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076F54h case  145:*/		return 0x82076F58;
		  /* 82076F58h */ case  146:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076F58h case  146:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076F58h case  146:*/		return 0x82076F5C;
		  /* 82076F5Ch */ case  147:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076F5Ch case  147:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076F5Ch case  147:*/		return 0x82076F60;
		  /* 82076F60h */ case  148:  		/* addi R11, R31, 436 */
		/* 82076F60h case  148:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1B4);
		/* 82076F60h case  148:*/		return 0x82076F64;
		  /* 82076F64h */ case  149:  		/* add R9, R9, R10 */
		/* 82076F64h case  149:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076F64h case  149:*/		return 0x82076F68;
		  /* 82076F68h */ case  150:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076F68h case  150:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F68h case  150:*/		return 0x82076F6C;
		  /* 82076F6Ch */ case  151:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076F6Ch case  151:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076F6Ch case  151:*/		return 0x82076F70;
		  /* 82076F70h */ case  152:  		/* ori R6, R9, 2 */
		/* 82076F70h case  152:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x2);
		/* 82076F70h case  152:*/		return 0x82076F74;
		  /* 82076F74h */ case  153:  		/* addi R9, R10, 512 */
		/* 82076F74h case  153:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076F74h case  153:*/		return 0x82076F78;
		  /* 82076F78h */ case  154:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076F78h case  154:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076F78h case  154:*/		return 0x82076F7C;
		  /* 82076F7Ch */ case  155:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076F7Ch case  155:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076F7Ch case  155:*/		return 0x82076F80;
		  /* 82076F80h */ case  156:  		/* stwu R7, <#[R3 + 4]> */
		/* 82076F80h case  156:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F80h case  156:*/		return 0x82076F84;
		  /* 82076F84h */ case  157:  		/* addi R11, R31, 432 */
		/* 82076F84h case  157:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1B0);
		/* 82076F84h case  157:*/		return 0x82076F88;
		  /* 82076F88h */ case  158:  		/* add R10, R9, R10 */
		/* 82076F88h case  158:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82076F88h case  158:*/		return 0x82076F8C;
		  /* 82076F8Ch */ case  159:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 82076F8Ch case  159:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 82076F8Ch case  159:*/		return 0x82076F90;
		  /* 82076F90h */ case  160:  		/* ori R25, R10, 2 */
		/* 82076F90h case  160:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R10,0x2);
		/* 82076F90h case  160:*/		return 0x82076F94;
		  /* 82076F94h */ case  161:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076F94h case  161:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076F94h case  161:*/		return 0x82076F98;
		  /* 82076F98h */ case  162:  		/* stwu R8, <#[R3 + 4]> */
		/* 82076F98h case  162:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076F98h case  162:*/		return 0x82076F9C;
		  /* 82076F9Ch */ case  163:  		/* addi R11, R10, 512 */
		/* 82076F9Ch case  163:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x200);
		/* 82076F9Ch case  163:*/		return 0x82076FA0;
		  /* 82076FA0h */ case  164:  		/* rlwinm R10, R11, 0, 19, 19 */
		/* 82076FA0h case  164:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R11);
		/* 82076FA0h case  164:*/		return 0x82076FA4;
		  /* 82076FA4h */ case  165:  		/* addi R11, R31, 444 */
		/* 82076FA4h case  165:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1BC);
		/* 82076FA4h case  165:*/		return 0x82076FA8;
		  /* 82076FA8h */ case  166:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076FA8h case  166:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FA8h case  166:*/		return 0x82076FAC;
		  /* 82076FACh */ case  167:  		/* add R10, R10, R9 */
		/* 82076FACh case  167:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82076FACh case  167:*/		return 0x82076FB0;
		  /* 82076FB0h */ case  168:  		/* ori R9, R10, 2 */
		/* 82076FB0h case  168:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 82076FB0h case  168:*/		return 0x82076FB4;
		  /* 82076FB4h */ case  169:  		/* stwu R28, <#[R3 + 4]> */
		/* 82076FB4h case  169:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FB4h case  169:*/		return 0x82076FB8;
		  /* 82076FB8h */ case  170:  		/* stwu R4, <#[R3 + 4]> */
		/* 82076FB8h case  170:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FB8h case  170:*/		return 0x82076FBC;
		  /* 82076FBCh */ case  171:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076FBCh case  171:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FBCh case  171:*/		return 0x82076FC0;
		  /* 82076FC0h */ case  172:  		/* stwu R27, <#[R3 + 4]> */
		/* 82076FC0h case  172:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FC0h case  172:*/		return 0x82076FC4;
		  /* 82076FC4h */ case  173:  		/* stwu R6, <#[R3 + 4]> */
		/* 82076FC4h case  173:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FC4h case  173:*/		return 0x82076FC8;
		  /* 82076FC8h */ case  174:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076FC8h case  174:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FC8h case  174:*/		return 0x82076FCC;
		  /* 82076FCCh */ case  175:  		/* stwu R26, <#[R3 + 4]> */
		/* 82076FCCh case  175:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FCCh case  175:*/		return 0x82076FD0;
		  /* 82076FD0h */ case  176:  		/* stwu R25, <#[R3 + 4]> */
		/* 82076FD0h case  176:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FD0h case  176:*/		return 0x82076FD4;
		  /* 82076FD4h */ case  177:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076FD4h case  177:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FD4h case  177:*/		return 0x82076FD8;
		  /* 82076FD8h */ case  178:  		/* stwu R24, <#[R3 + 4]> */
		/* 82076FD8h case  178:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FD8h case  178:*/		return 0x82076FDC;
		  /* 82076FDCh */ case  179:  		/* stwu R9, <#[R3 + 4]> */
		/* 82076FDCh case  179:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FDCh case  179:*/		return 0x82076FE0;
		  /* 82076FE0h */ case  180:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82076FE0h case  180:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82076FE0h case  180:*/		return 0x82076FE4;
		  /* 82076FE4h */ case  181:  		/* li R8, 2135 */
		/* 82076FE4h case  181:*/		cpu::op::li<0>(regs,&regs.R8,0x857);
		/* 82076FE4h case  181:*/		return 0x82076FE8;
		  /* 82076FE8h */ case  182:  		/* addi R9, R10, 512 */
		/* 82076FE8h case  182:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82076FE8h case  182:*/		return 0x82076FEC;
		  /* 82076FECh */ case  183:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82076FECh case  183:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82076FECh case  183:*/		return 0x82076FF0;
		  /* 82076FF0h */ case  184:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82076FF0h case  184:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82076FF0h case  184:*/		return 0x82076FF4;
		  /* 82076FF4h */ case  185:  		/* stwu R5, <#[R3 + 4]> */
		/* 82076FF4h case  185:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82076FF4h case  185:*/		return 0x82076FF8;
		  /* 82076FF8h */ case  186:  		/* addi R11, R31, 440 */
		/* 82076FF8h case  186:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1B8);
		/* 82076FF8h case  186:*/		return 0x82076FFC;
		  /* 82076FFCh */ case  187:  		/* add R9, R9, R10 */
		/* 82076FFCh case  187:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82076FFCh case  187:*/		return 0x82077000;
		  /* 82077000h */ case  188:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82077000h case  188:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82077000h case  188:*/		return 0x82077004;
		  /* 82077004h */ case  189:  		/* ori R7, R9, 2 */
		/* 82077004h case  189:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R9,0x2);
		/* 82077004h case  189:*/		return 0x82077008;
		  /* 82077008h */ case  190:  		/* addi R9, R10, 512 */
		/* 82077008h case  190:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82077008h case  190:*/		return 0x8207700C;
		  /* 8207700Ch */ case  191:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207700Ch case  191:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207700Ch case  191:*/		return 0x82077010;
		  /* 82077010h */ case  192:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82077010h case  192:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82077010h case  192:*/		return 0x82077014;
		  /* 82077014h */ case  193:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82077014h case  193:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82077014h case  193:*/		return 0x82077018;
		  /* 82077018h */ case  194:  		/* li R6, 2134 */
		/* 82077018h case  194:*/		cpu::op::li<0>(regs,&regs.R6,0x856);
		/* 82077018h case  194:*/		return 0x8207701C;
		  /* 8207701Ch */ case  195:  		/* add R10, R9, R10 */
		/* 8207701Ch case  195:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8207701Ch case  195:*/		return 0x82077020;
		  /* 82077020h */ case  196:  		/* addi R11, R31, 452 */
		/* 82077020h case  196:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1C4);
		/* 82077020h case  196:*/		return 0x82077024;
		  /* 82077024h */ case  197:  		/* stwu R7, <#[R3 + 4]> */
		/* 82077024h case  197:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077024h case  197:*/		return 0x82077028;
		  /* 82077028h */ case  198:  		/* ori R8, R10, 2 */
		/* 82077028h case  198:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x2);
		/* 82077028h case  198:*/		return 0x8207702C;
		  /* 8207702Ch */ case  199:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 8207702Ch case  199:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 8207702Ch case  199:*/		return 0x82077030;
		  /* 82077030h */ case  200:  		/* li R4, 2586 */
		/* 82077030h case  200:*/		cpu::op::li<0>(regs,&regs.R4,0xA1A);
		/* 82077030h case  200:*/		return 0x82077034;
		  /* 82077034h */ case  201:  		/* addi R9, R10, 512 */
		/* 82077034h case  201:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82077034h case  201:*/		return 0x82077038;
		  /* 82077038h */ case  202:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82077038h case  202:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82077038h case  202:*/		return 0x8207703C;
		  /* 8207703Ch */ case  203:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207703Ch case  203:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207703Ch case  203:*/		return 0x82077040;
		  /* 82077040h */ case  204:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82077040h case  204:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82077040h case  204:*/		return 0x82077044;
		  /* 82077044h */ case  205:  		/* addi R11, R31, 448 */
		/* 82077044h case  205:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1C0);
		/* 82077044h case  205:*/		return 0x82077048;
		  /* 82077048h */ case  206:  		/* add R10, R9, R10 */
		/* 82077048h case  206:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82077048h case  206:*/		return 0x8207704C;
		  /* 8207704Ch */ case  207:  		/* li R28, 2585 */
		/* 8207704Ch case  207:*/		cpu::op::li<0>(regs,&regs.R28,0xA19);
		/* 8207704Ch case  207:*/		return 0x82077050;
		  /* 82077050h */ case  208:  		/* ori R7, R10, 2 */
		/* 82077050h case  208:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x2);
		/* 82077050h case  208:*/		return 0x82077054;
		  /* 82077054h */ case  209:  		/* stwu R6, <#[R3 + 4]> */
		/* 82077054h case  209:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077054h case  209:*/		return 0x82077058;
		  /* 82077058h */ case  210:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82077058h case  210:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82077058h case  210:*/		return 0x8207705C;
		  /* 8207705Ch */ case  211:  		/* li R27, 2589 */
		/* 8207705Ch case  211:*/		cpu::op::li<0>(regs,&regs.R27,0xA1D);
		/* 8207705Ch case  211:*/		return 0x82077060;
		  /* 82077060h */ case  212:  		/* addi R9, R10, 512 */
		/* 82077060h case  212:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82077060h case  212:*/		return 0x82077064;
		  /* 82077064h */ case  213:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82077064h case  213:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82077064h case  213:*/		return 0x82077068;
		  /* 82077068h */ case  214:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82077068h case  214:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82077068h case  214:*/		return 0x8207706C;
		  /* 8207706Ch */ case  215:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207706Ch case  215:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207706Ch case  215:*/		return 0x82077070;
		  /* 82077070h */ case  216:  		/* addi R11, R31, 460 */
		/* 82077070h case  216:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1CC);
		/* 82077070h case  216:*/		return 0x82077074;
		  /* 82077074h */ case  217:  		/* add R10, R9, R10 */
		/* 82077074h case  217:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82077074h case  217:*/		return 0x82077078;
		  /* 82077078h */ case  218:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82077078h case  218:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82077078h case  218:*/		return 0x8207707C;
		  /* 8207707Ch */ case  219:  		/* ori R6, R10, 2 */
		/* 8207707Ch case  219:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 8207707Ch case  219:*/		return 0x82077080;
		  /* 82077080h */ case  220:  		/* addi R9, R9, 512 */
		/* 82077080h case  220:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82077080h case  220:*/		return 0x82077084;
		  /* 82077084h */ case  221:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077084h case  221:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077084h case  221:*/		return 0x82077088;
		  /* 82077088h */ case  222:  		/* addi R10, R31, 456 */
		/* 82077088h case  222:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x1C8);
		/* 82077088h case  222:*/		return 0x8207708C;
		  /* 8207708Ch */ case  223:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8207708Ch case  223:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8207708Ch case  223:*/		return 0x82077090;
		  /* 82077090h */ case  224:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82077090h case  224:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82077090h case  224:*/		return 0x82077094;
		  /* 82077094h */ case  225:  		/* rlwinm R8, R10, 12, 20, 31 */
		/* 82077094h case  225:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R10);
		/* 82077094h case  225:*/		return 0x82077098;
		  /* 82077098h */ case  226:  		/* add R11, R9, R11 */
		/* 82077098h case  226:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82077098h case  226:*/		return 0x8207709C;
		  /* 8207709Ch */ case  227:  		/* stwu R4, <#[R3 + 4]> */
		/* 8207709Ch case  227:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207709Ch case  227:*/		return 0x820770A0;
		  /* 820770A0h */ case  228:  		/* addi R9, R8, 512 */
		/* 820770A0h case  228:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x200);
		/* 820770A0h case  228:*/		return 0x820770A4;
		  /* 820770A4h */ case  229:  		/* ori R8, R11, 2 */
		/* 820770A4h case  229:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2);
		/* 820770A4h case  229:*/		return 0x820770A8;
		  /* 820770A8h */ case  230:  		/* rlwinm R11, R10, 0, 3, 31 */
		/* 820770A8h case  230:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R10);
		/* 820770A8h case  230:*/		return 0x820770AC;
		  /* 820770ACh */ case  231:  		/* rlwinm R10, R9, 0, 19, 19 */
		/* 820770ACh case  231:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R9);
		/* 820770ACh case  231:*/		return 0x820770B0;
		  /* 820770B0h */ case  232:  		/* li R26, 2588 */
		/* 820770B0h case  232:*/		cpu::op::li<0>(regs,&regs.R26,0xA1C);
		/* 820770B0h case  232:*/		return 0x820770B4;
		  /* 820770B4h */ case  233:  		/* stwu R7, <#[R3 + 4]> */
		/* 820770B4h case  233:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820770B4h case  233:*/		return 0x820770B8;
		  /* 820770B8h */ case  234:  		/* add R10, R10, R11 */
		/* 820770B8h case  234:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820770B8h case  234:*/		return 0x820770BC;
		  /* 820770BCh */ case  235:  		/* addi R11, R31, 468 */
		/* 820770BCh case  235:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1D4);
		/* 820770BCh case  235:*/		return 0x820770C0;
		  /* 820770C0h */ case  236:  		/* ori R9, R10, 2 */
		/* 820770C0h case  236:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 820770C0h case  236:*/		return 0x820770C4;
		  /* 820770C4h */ case  237:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820770C4h case  237:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820770C4h case  237:*/		return 0x820770C8;
		  /* 820770C8h */ case  238:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820770C8h case  238:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820770C8h case  238:*/		return 0x820770CC;
		  /* 820770CCh */ case  239:  		/* stwu R5, <#[R3 + 4]> */
		/* 820770CCh case  239:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820770CCh case  239:*/		return 0x820770D0;
		  /* 820770D0h */ case  240:  		/* addi R10, R10, 512 */
		/* 820770D0h case  240:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 820770D0h case  240:*/		return 0x820770D4;
		  /* 820770D4h */ case  241:  		/* li R7, 2591 */
		/* 820770D4h case  241:*/		cpu::op::li<0>(regs,&regs.R7,0xA1F);
		/* 820770D4h case  241:*/		return 0x820770D8;
		  /* 820770D8h */ case  242:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820770D8h case  242:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820770D8h case  242:*/		return 0x820770DC;
		  /* 820770DCh */ case  243:  		/* li R4, 74 */
		/* 820770DCh case  243:*/		cpu::op::li<0>(regs,&regs.R4,0x4A);
		/* 820770DCh case  243:*/		return 0x820770E0;
		  /* 820770E0h */ case  244:  		/* add R10, R10, R11 */
		/* 820770E0h case  244:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820770E0h case  244:*/		return 0x820770E4;
		  /* 820770E4h */ case  245:  		/* stwu R28, <#[R3 + 4]> */
		/* 820770E4h case  245:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820770E4h case  245:*/		return 0x820770E8;
		  /* 820770E8h */ case  246:  		/* addi R11, R31, 464 */
		/* 820770E8h case  246:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1D0);
		/* 820770E8h case  246:*/		return 0x820770EC;
		  /* 820770ECh */ case  247:  		/* stwu R6, <#[R3 + 4]> */
		/* 820770ECh case  247:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820770ECh case  247:*/		return 0x820770F0;
		  /* 820770F0h */ case  248:  		/* ori R6, R10, 2 */
		/* 820770F0h case  248:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x2);
		/* 820770F0h case  248:*/		return 0x820770F4;
		  /* 820770F4h */ case  249:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 820770F4h case  249:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 820770F4h case  249:*/		return 0x820770F8;
		  /* 820770F8h */ case  250:  		/* addi R28, R10, 512 */
		/* 820770F8h case  250:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x200);
		/* 820770F8h case  250:*/		return 0x820770FC;
		  /* 820770FCh */ case  251:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 820770FCh case  251:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 820770FCh case  251:*/		return 0x82077100;
		  /* 82077100h */ case  252:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077100h case  252:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077100h case  252:*/		return 0x82077104;
		  /* 82077104h */ case  253:  		/* stwu R27, <#[R3 + 4]> */
		/* 82077104h case  253:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077104h case  253:*/		return 0x82077108;
		  /* 82077108h */ case  254:  		/* stwu R8, <#[R3 + 4]> */
		/* 82077108h case  254:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077108h case  254:*/		return 0x8207710C;
		  /* 8207710Ch */ case  255:  		/* li R8, 2592 */
		/* 8207710Ch case  255:*/		cpu::op::li<0>(regs,&regs.R8,0xA20);
		/* 8207710Ch case  255:*/		return 0x82077110;
		  /* 82077110h */ case  256:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077110h case  256:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077110h case  256:*/		return 0x82077114;
		  /* 82077114h */ case  257:  		/* stwu R26, <#[R3 + 4]> */
		/* 82077114h case  257:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077114h case  257:*/		return 0x82077118;
		  /* 82077118h */ case  258:  		/* stwu R9, <#[R3 + 4]> */
		/* 82077118h case  258:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077118h case  258:*/		return 0x8207711C;
		  /* 8207711Ch */ case  259:  		/* rlwinm R9, R28, 0, 19, 19 */
		/* 8207711Ch case  259:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R28);
		/* 8207711Ch case  259:*/		return 0x82077120;
		  /* 82077120h */ case  260:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077120h case  260:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077120h case  260:*/		return 0x82077124;
		  /* 82077124h */ case  261:  		/* add R9, R9, R10 */
		/* 82077124h case  261:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82077124h case  261:*/		return 0x82077128;
		  /* 82077128h */ case  262:  		/* addi R11, R31, 476 */
		/* 82077128h case  262:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1DC);
		/* 82077128h case  262:*/		return 0x8207712C;
		  /* 8207712Ch */ case  263:  		/* ori R28, R9, 2 */
		/* 8207712Ch case  263:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x2);
		/* 8207712Ch case  263:*/		return 0x82077130;
		  /* 82077130h */ case  264:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82077130h case  264:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82077130h case  264:*/		return 0x82077134;
		  /* 82077134h */ case  265:  		/* stwu R8, <#[R3 + 4]> */
		/* 82077134h case  265:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077134h case  265:*/		return 0x82077138;
		  /* 82077138h */ case  266:  		/* addi R9, R10, 512 */
		/* 82077138h case  266:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 82077138h case  266:*/		return 0x8207713C;
		  /* 8207713Ch */ case  267:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207713Ch case  267:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207713Ch case  267:*/		return 0x82077140;
		  /* 82077140h */ case  268:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82077140h case  268:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82077140h case  268:*/		return 0x82077144;
		  /* 82077144h */ case  269:  		/* addi R11, R31, 472 */
		/* 82077144h case  269:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1D8);
		/* 82077144h case  269:*/		return 0x82077148;
		  /* 82077148h */ case  270:  		/* add R10, R9, R10 */
		/* 82077148h case  270:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82077148h case  270:*/		return 0x8207714C;
		  /* 8207714Ch */ case  271:  		/* stwu R6, <#[R3 + 4]> */
		/* 8207714Ch case  271:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207714Ch case  271:*/		return 0x82077150;
		  /* 82077150h */ case  272:  		/* li R8, 73 */
		/* 82077150h case  272:*/		cpu::op::li<0>(regs,&regs.R8,0x49);
		/* 82077150h case  272:*/		return 0x82077154;
		  /* 82077154h */ case  273:  		/* ori R9, R10, 2 */
		/* 82077154h case  273:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x2);
		/* 82077154h case  273:*/		return 0x82077158;
		  /* 82077158h */ case  274:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82077158h case  274:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82077158h case  274:*/		return 0x8207715C;
		  /* 8207715Ch */ case  275:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8207715Ch case  275:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8207715Ch case  275:*/		return 0x82077160;
		  /* 82077160h */ case  276:  		/* addi R10, R10, 512 */
		/* 82077160h case  276:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82077160h case  276:*/		return 0x82077164;
		  /* 82077164h */ case  277:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077164h case  277:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077164h case  277:*/		return 0x82077168;
		  /* 82077168h */ case  278:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82077168h case  278:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82077168h case  278:*/		return 0x8207716C;
		  /* 8207716Ch */ case  279:  		/* add R11, R10, R11 */
		/* 8207716Ch case  279:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207716Ch case  279:*/		return 0x82077170;
		  /* 82077170h */ case  280:  		/* stwu R7, <#[R3 + 4]> */
		/* 82077170h case  280:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077170h case  280:*/		return 0x82077174;
		  /* 82077174h */ case  281:  		/* ori R11, R11, 2 */
		/* 82077174h case  281:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82077174h case  281:*/		return 0x82077178;
		  /* 82077178h */ case  282:  		/* stwu R28, <#[R3 + 4]> */
		/* 82077178h case  282:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077178h case  282:*/		return 0x8207717C;
		  /* 8207717Ch */ case  283:  		/* stwu R5, <#[R3 + 4]> */
		/* 8207717Ch case  283:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207717Ch case  283:*/		return 0x82077180;
		  /* 82077180h */ case  284:  		/* stwu R4, <#[R3 + 4]> */
		/* 82077180h case  284:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077180h case  284:*/		return 0x82077184;
		  /* 82077184h */ case  285:  		/* stwu R9, <#[R3 + 4]> */
		/* 82077184h case  285:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077184h case  285:*/		return 0x82077188;
		  /* 82077188h */ case  286:  		/* stwu R5, <#[R3 + 4]> */
		/* 82077188h case  286:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077188h case  286:*/		return 0x8207718C;
		  /* 8207718Ch */ case  287:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207718Ch case  287:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207718Ch case  287:*/		return 0x82077190;
		  /* 82077190h */ case  288:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077190h case  288:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077190h case  288:*/		return 0x82077194;
		  /* 82077194h */ case  289:  		/* lwz R11, <#[R30 + 11036]> */
		/* 82077194h case  289:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00002B1C) );
		/* 82077194h case  289:*/		return 0x82077198;
		  /* 82077198h */ case  290:  		/* stw R3, <#[R30 + 48]> */
		/* 82077198h case  290:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 82077198h case  290:*/		return 0x8207719C;
		  /* 8207719Ch */ case  291:  		/* stw R11, <#[R29 + 12]> */
		/* 8207719Ch case  291:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8207719Ch case  291:*/		return 0x820771A0;
		  /* 820771A0h */ case  292:  		/* addi R1, R1, 176 */
		/* 820771A0h case  292:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820771A0h case  292:*/		return 0x820771A4;
		  /* 820771A4h */ case  293:  		/* b 106728 */
		/* 820771A4h case  293:*/		return 0x8209128C;
		/* 820771A4h case  293:*/		return 0x820771A8;
	}
	return 0x820771A8;
} // Block from 82076D10h-820771A8h (294 instructions)

//////////////////////////////////////////////////////
// Block at 820771A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820771A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820771A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820771A8);
		  /* 820771A8h */ case    0:  		/* mfspr R12, LR */
		/* 820771A8h case    0:*/		regs.R12 = regs.LR;
		/* 820771A8h case    0:*/		return 0x820771AC;
		  /* 820771ACh */ case    1:  		/* bl 106672 */
		/* 820771ACh case    1:*/		regs.LR = 0x820771B0; return 0x8209125C;
		/* 820771ACh case    1:*/		return 0x820771B0;
		  /* 820771B0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820771B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820771B0h case    2:*/		return 0x820771B4;
		  /* 820771B4h */ case    3:  		/* mr R31, R3 */
		/* 820771B4h case    3:*/		regs.R31 = regs.R3;
		/* 820771B4h case    3:*/		return 0x820771B8;
		  /* 820771B8h */ case    4:  		/* lwz R3, <#[R3 + 12]> */
		/* 820771B8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 820771B8h case    4:*/		return 0x820771BC;
		  /* 820771BCh */ case    5:  		/* mr R29, R4 */
		/* 820771BCh case    5:*/		regs.R29 = regs.R4;
		/* 820771BCh case    5:*/		return 0x820771C0;
		  /* 820771C0h */ case    6:  		/* mr R30, R6 */
		/* 820771C0h case    6:*/		regs.R30 = regs.R6;
		/* 820771C0h case    6:*/		return 0x820771C4;
		  /* 820771C4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 820771C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820771C4h case    7:*/		return 0x820771C8;
		  /* 820771C8h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 820771C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x820771D0;  }
		/* 820771C8h case    8:*/		return 0x820771CC;
		  /* 820771CCh */ case    9:  		/* bl -17364 */
		/* 820771CCh case    9:*/		regs.LR = 0x820771D0; return 0x82072DF8;
		/* 820771CCh case    9:*/		return 0x820771D0;
	}
	return 0x820771D0;
} // Block from 820771A8h-820771D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820771D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820771D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820771D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820771D0);
		  /* 820771D0h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 820771D0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 820771D0h case    0:*/		return 0x820771D4;
		  /* 820771D4h */ case    1:  		/* li R5, 480 */
		/* 820771D4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1E0);
		/* 820771D4h case    1:*/		return 0x820771D8;
		  /* 820771D8h */ case    2:  		/* mr R3, R29 */
		/* 820771D8h case    2:*/		regs.R3 = regs.R29;
		/* 820771D8h case    2:*/		return 0x820771DC;
		  /* 820771DCh */ case    3:  		/* mr R4, R31 */
		/* 820771DCh case    3:*/		regs.R4 = regs.R31;
		/* 820771DCh case    3:*/		return 0x820771E0;
		  /* 820771E0h */ case    4:  		/* bl 108496 */
		/* 820771E0h case    4:*/		regs.LR = 0x820771E4; return 0x820919B0;
		/* 820771E0h case    4:*/		return 0x820771E4;
		  /* 820771E4h */ case    5:  		/* addi R4, R31, 480 */
		/* 820771E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1E0);
		/* 820771E4h case    5:*/		return 0x820771E8;
		  /* 820771E8h */ case    6:  		/* li R5, 0 */
		/* 820771E8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820771E8h case    6:*/		return 0x820771EC;
		  /* 820771ECh */ case    7:  		/* mr R3, R31 */
		/* 820771ECh case    7:*/		regs.R3 = regs.R31;
		/* 820771ECh case    7:*/		return 0x820771F0;
		  /* 820771F0h */ case    8:  		/* bl 57304 */
		/* 820771F0h case    8:*/		regs.LR = 0x820771F4; return 0x820851C8;
		/* 820771F0h case    8:*/		return 0x820771F4;
		  /* 820771F4h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 820771F4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820771F4h case    9:*/		return 0x820771F8;
		  /* 820771F8h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 820771F8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82077208;  }
		/* 820771F8h case   10:*/		return 0x820771FC;
		  /* 820771FCh */ case   11:  		/* lis R11, 10922 */
		/* 820771FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0x2AAA);
		/* 820771FCh case   11:*/		return 0x82077200;
		  /* 82077200h */ case   12:  		/* ori R11, R11, 43690 */
		/* 82077200h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xAAAA);
		/* 82077200h case   12:*/		return 0x82077204;
		  /* 82077204h */ case   13:  		/* stw R11, <#[R30]> */
		/* 82077204h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82077204h case   13:*/		return 0x82077208;
	}
	return 0x82077208;
} // Block from 820771D0h-82077208h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82077208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077208);
		  /* 82077208h */ case    0:  		/* li R3, 0 */
		/* 82077208h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82077208h case    0:*/		return 0x8207720C;
		  /* 8207720Ch */ case    1:  		/* addi R1, R1, 112 */
		/* 8207720Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207720Ch case    1:*/		return 0x82077210;
		  /* 82077210h */ case    2:  		/* b 106652 */
		/* 82077210h case    2:*/		return 0x820912AC;
		/* 82077210h case    2:*/		return 0x82077214;
		  /* 82077214h */ case    3:  		/* nop */
		/* 82077214h case    3:*/		cpu::op::nop();
		/* 82077214h case    3:*/		return 0x82077218;
		  /* 82077218h */ case    4:  		/* lwz R10, <#[R4]> */
		/* 82077218h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82077218h case    4:*/		return 0x8207721C;
		  /* 8207721Ch */ case    5:  		/* addi R7, R3, 32 */
		/* 8207721Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R3,0x20);
		/* 8207721Ch case    5:*/		return 0x82077220;
		  /* 82077220h */ case    6:  		/* addi R6, R3, 800 */
		/* 82077220h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R3,0x320);
		/* 82077220h case    6:*/		return 0x82077224;
		  /* 82077224h */ case    7:  		/* rlwinm R11, R10, 29, 3, 29 */
		/* 82077224h case    7:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R10);
		/* 82077224h case    7:*/		return 0x82077228;
		  /* 82077228h */ case    8:  		/* add R11, R11, R7 */
		/* 82077228h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82077228h case    8:*/		return 0x8207722C;
		  /* 8207722Ch */ case    9:  		/* cmplw CR6, R11, R6 */
		/* 8207722Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 8207722Ch case    9:*/		return 0x82077230;
		  /* 82077230h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82077230h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8207723C;  }
		/* 82077230h case   10:*/		return 0x82077234;
		  /* 82077234h */ case   11:  		/* li R3, 0 */
		/* 82077234h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82077234h case   11:*/		return 0x82077238;
		  /* 82077238h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82077238h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077238h case   12:*/		return 0x8207723C;
	}
	return 0x8207723C;
} // Block from 82077208h-8207723Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207723Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207723C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207723C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207723C);
		  /* 8207723Ch */ case    0:  		/* rlwinm R8, R10, 0, 27, 31 */
		/* 8207723Ch case    0:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R10);
		/* 8207723Ch case    0:*/		return 0x82077240;
		  /* 82077240h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 82077240h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82077240h case    1:*/		return 0x82077244;
		  /* 82077244h */ case    2:  		/* li R9, -1 */
		/* 82077244h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 82077244h case    2:*/		return 0x82077248;
		  /* 82077248h */ case    3:  		/* srw R8, R9, R8 */
		/* 82077248h case    3:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 82077248h case    3:*/		return 0x8207724C;
		  /* 8207724Ch */ case    4:  		/* andc R8, R8, R10 */
		/* 8207724Ch case    4:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 8207724Ch case    4:*/		return 0x82077250;
		  /* 82077250h */ case    5:  		/* cntlzw R8, R8 */
		/* 82077250h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 82077250h case    5:*/		return 0x82077254;
		  /* 82077254h */ case    6:  		/* cmplwi CR6, R8, 32 */
		/* 82077254h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000020);
		/* 82077254h case    6:*/		return 0x82077258;
		  /* 82077258h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 82077258h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82077278;  }
		/* 82077258h case    7:*/		return 0x8207725C;
		  /* 8207725Ch */ case    8:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8207725Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207725Ch case    8:*/		return 0x82077260;
		  /* 82077260h */ case    9:  		/* cmpwi CR6, R10, -1 */
		/* 82077260h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82077260h case    9:*/		return 0x82077264;
		  /* 82077264h */ case   10:  		/* bc 12, CR6_EQ, -8 */
		/* 82077264h case   10:*/		if ( regs.CR[6].eq ) { return 0x8207725C;  }
		/* 82077264h case   10:*/		return 0x82077268;
		  /* 82077268h */ case   11:  		/* cmplw CR6, R11, R6 */
		/* 82077268h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 82077268h case   11:*/		return 0x8207726C;
		  /* 8207726Ch */ case   12:  		/* bc 12, CR6_EQ, -56 */
		/* 8207726Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82077234;  }
		/* 8207726Ch case   12:*/		return 0x82077270;
		  /* 82077270h */ case   13:  		/* nor R8, R10, R10 */
		/* 82077270h case   13:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R10,regs.R10);
		/* 82077270h case   13:*/		return 0x82077274;
		  /* 82077274h */ case   14:  		/* cntlzw R8, R8 */
		/* 82077274h case   14:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 82077274h case   14:*/		return 0x82077278;
	}
	return 0x82077278;
} // Block from 8207723Ch-82077278h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82077278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077278);
		  /* 82077278h */ case    0:  		/* mr R5, R9 */
		/* 82077278h case    0:*/		regs.R5 = regs.R9;
		/* 82077278h case    0:*/		return 0x8207727C;
		  /* 8207727Ch */ case    1:  		/* mr R9, R11 */
		/* 8207727Ch case    1:*/		regs.R9 = regs.R11;
		/* 8207727Ch case    1:*/		return 0x82077280;
		  /* 82077280h */ case    2:  		/* srw R5, R5, R8 */
		/* 82077280h case    2:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R5,regs.R8);
		/* 82077280h case    2:*/		return 0x82077284;
		  /* 82077284h */ case    3:  		/* and R10, R5, R10 */
		/* 82077284h case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 82077284h case    3:*/		return 0x82077288;
		  /* 82077288h */ case    4:  		/* cntlzw R10, R10 */
		/* 82077288h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 82077288h case    4:*/		return 0x8207728C;
		  /* 8207728Ch */ case    5:  		/* cmplwi CR6, R10, 32 */
		/* 8207728Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000020);
		/* 8207728Ch case    5:*/		return 0x82077290;
		  /* 82077290h */ case    6:  		/* bc 4, CR6_EQ, 48 */
		/* 82077290h case    6:*/		if ( !regs.CR[6].eq ) { return 0x820772C0;  }
		/* 82077290h case    6:*/		return 0x82077294;
		  /* 82077294h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82077294h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82077294h case    7:*/		return 0x82077298;
		  /* 82077298h */ case    8:  		/* addi R9, R11, 4 */
		/* 82077298h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82077298h case    8:*/		return 0x8207729C;
		  /* 8207729Ch */ case    9:  		/* b 8 */
		/* 8207729Ch case    9:*/		return 0x820772A4;
		/* 8207729Ch case    9:*/		return 0x820772A0;
		  /* 820772A0h */ case   10:  		/* lwzu R10, <#[R9 + 4]> */
		/* 820772A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 820772A0h case   10:*/		return 0x820772A4;
	}
	return 0x820772A4;
} // Block from 82077278h-820772A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820772A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820772A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820772A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820772A4);
		  /* 820772A4h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 820772A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820772A4h case    0:*/		return 0x820772A8;
		  /* 820772A8h */ case    1:  		/* bc 12, CR6_EQ, -8 */
		/* 820772A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820772A0;  }
		/* 820772A8h case    1:*/		return 0x820772AC;
		  /* 820772ACh */ case    2:  		/* cmplw CR6, R9, R6 */
		/* 820772ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 820772ACh case    2:*/		return 0x820772B0;
		  /* 820772B0h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 820772B0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820772BC;  }
		/* 820772B0h case    3:*/		return 0x820772B4;
		  /* 820772B4h */ case    4:  		/* li R10, 0 */
		/* 820772B4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820772B4h case    4:*/		return 0x820772B8;
		  /* 820772B8h */ case    5:  		/* b 8 */
		/* 820772B8h case    5:*/		return 0x820772C0;
		/* 820772B8h case    5:*/		return 0x820772BC;
	}
	return 0x820772BC;
} // Block from 820772A4h-820772BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820772BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820772BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820772BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820772BC);
		  /* 820772BCh */ case    0:  		/* cntlzw R10, R10 */
		/* 820772BCh case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 820772BCh case    0:*/		return 0x820772C0;
	}
	return 0x820772C0;
} // Block from 820772BCh-820772C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820772C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820772C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820772C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820772C0);
		  /* 820772C0h */ case    0:  		/* subf R11, R7, R11 */
		/* 820772C0h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 820772C0h case    0:*/		return 0x820772C4;
		  /* 820772C4h */ case    1:  		/* subf R9, R7, R9 */
		/* 820772C4h case    1:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 820772C4h case    1:*/		return 0x820772C8;
		  /* 820772C8h */ case    2:  		/* srawi R11, R11, 2 */
		/* 820772C8h case    2:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 820772C8h case    2:*/		return 0x820772CC;
		  /* 820772CCh */ case    3:  		/* srawi R9, R9, 2 */
		/* 820772CCh case    3:*/		cpu::op::srawi<0,2>(regs,&regs.R9,regs.R9);
		/* 820772CCh case    3:*/		return 0x820772D0;
		  /* 820772D0h */ case    4:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 820772D0h case    4:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 820772D0h case    4:*/		return 0x820772D4;
		  /* 820772D4h */ case    5:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 820772D4h case    5:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 820772D4h case    5:*/		return 0x820772D8;
		  /* 820772D8h */ case    6:  		/* add R11, R11, R8 */
		/* 820772D8h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820772D8h case    6:*/		return 0x820772DC;
		  /* 820772DCh */ case    7:  		/* subf R9, R11, R9 */
		/* 820772DCh case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 820772DCh case    7:*/		return 0x820772E0;
		  /* 820772E0h */ case    8:  		/* stw R11, <#[R4]> */
		/* 820772E0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 820772E0h case    8:*/		return 0x820772E4;
		  /* 820772E4h */ case    9:  		/* add R3, R9, R10 */
		/* 820772E4h case    9:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R10);
		/* 820772E4h case    9:*/		return 0x820772E8;
		  /* 820772E8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820772E8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820772E8h case   10:*/		return 0x820772EC;
	}
	return 0x820772EC;
} // Block from 820772C0h-820772ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820772ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820772EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820772EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820772EC);
		  /* 820772ECh */ case    0:  		/* nop */
		/* 820772ECh case    0:*/		cpu::op::nop();
		/* 820772ECh case    0:*/		return 0x820772F0;
	}
	return 0x820772F0;
} // Block from 820772ECh-820772F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820772F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820772F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820772F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820772F0);
		  /* 820772F0h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 820772F0h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820772F0h case    0:*/		return 0x820772F4;
		  /* 820772F4h */ case    1:  		/* rlwinm R7, R5, 27, 5, 31 */
		/* 820772F4h case    1:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R7,regs.R5);
		/* 820772F4h case    1:*/		return 0x820772F8;
		  /* 820772F8h */ case    2:  		/* rlwinm R11, R4, 27, 5, 31 */
		/* 820772F8h case    2:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R4);
		/* 820772F8h case    2:*/		return 0x820772FC;
		  /* 820772FCh */ case    3:  		/* addi R10, R7, 8 */
		/* 820772FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0x8);
		/* 820772FCh case    3:*/		return 0x82077300;
		  /* 82077300h */ case    4:  		/* addi R9, R11, 8 */
		/* 82077300h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x8);
		/* 82077300h case    4:*/		return 0x82077304;
		  /* 82077304h */ case    5:  		/* mr R31, R5 */
		/* 82077304h case    5:*/		regs.R31 = regs.R5;
		/* 82077304h case    5:*/		return 0x82077308;
		  /* 82077308h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82077308h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82077308h case    6:*/		return 0x8207730C;
		  /* 8207730Ch */ case    7:  		/* rlwinm R5, R9, 2, 0, 29 */
		/* 8207730Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R9);
		/* 8207730Ch case    7:*/		return 0x82077310;
		  /* 82077310h */ case    8:  		/* add R9, R10, R3 */
		/* 82077310h case    8:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R3);
		/* 82077310h case    8:*/		return 0x82077314;
		  /* 82077314h */ case    9:  		/* rlwinm R8, R4, 0, 27, 31 */
		/* 82077314h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R4);
		/* 82077314h case    9:*/		return 0x82077318;
		  /* 82077318h */ case   10:  		/* rlwinm R4, R31, 0, 27, 31 */
		/* 82077318h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R31);
		/* 82077318h case   10:*/		return 0x8207731C;
		  /* 8207731Ch */ case   11:  		/* add R10, R5, R3 */
		/* 8207731Ch case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R5,regs.R3);
		/* 8207731Ch case   11:*/		return 0x82077320;
		  /* 82077320h */ case   12:  		/* cmpwi CR6, R6, 0 */
		/* 82077320h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82077320h case   12:*/		return 0x82077324;
		  /* 82077324h */ case   13:  		/* bc 12, CR6_EQ, 128 */
		/* 82077324h case   13:*/		if ( regs.CR[6].eq ) { return 0x820773A4;  }
		/* 82077324h case   13:*/		return 0x82077328;
		  /* 82077328h */ case   14:  		/* cmplw CR6, R11, R7 */
		/* 82077328h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 82077328h case   14:*/		return 0x8207732C;
		  /* 8207732Ch */ case   15:  		/* li R11, -1 */
		/* 8207732Ch case   15:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207732Ch case   15:*/		return 0x82077330;
		  /* 82077330h */ case   16:  		/* bc 4, CR6_EQ, 28 */
		/* 82077330h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8207734C;  }
		/* 82077330h case   16:*/		return 0x82077334;
		  /* 82077334h */ case   17:  		/* srw R7, R11, R4 */
		/* 82077334h case   17:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R4);
		/* 82077334h case   17:*/		return 0x82077338;
	}
	return 0x82077338;
} // Block from 820772F0h-82077338h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82077338h
// Function '?VertexShaderStubOutput@D3D@@YAXPBU_UCODE_R500VSUCODE@@PATGPUSHADER_INSTRUCTION@@PBT_UCODE_VSOUTPUTDECLARATION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077338);
		  /* 82077338h */ case    0:  		/* lwz R9, <#[R10]> */
		/* 82077338h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82077338h case    0:*/		return 0x8207733C;
		  /* 8207733Ch */ case    1:  		/* srw R11, R11, R8 */
		/* 8207733Ch case    1:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8207733Ch case    1:*/		return 0x82077340;
		  /* 82077340h */ case    2:  		/* andc R11, R11, R7 */
		/* 82077340h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82077340h case    2:*/		return 0x82077344;
		  /* 82077344h */ case    3:  		/* or R11, R11, R9 */
		/* 82077344h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82077344h case    3:*/		return 0x82077348;
		  /* 82077348h */ case    4:  		/* b 216 */
		/* 82077348h case    4:*/		return 0x82077420;
		/* 82077348h case    4:*/		return 0x8207734C;
	}
	return 0x8207734C;
} // Block from 82077338h-8207734Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207734Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207734C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207734C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207734C);
		  /* 8207734Ch */ case    0:  		/* lwz R7, <#[R10]> */
		/* 8207734Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8207734Ch case    0:*/		return 0x82077350;
		  /* 82077350h */ case    1:  		/* srw R8, R11, R8 */
		/* 82077350h case    1:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 82077350h case    1:*/		return 0x82077354;
		  /* 82077354h */ case    2:  		/* or R8, R8, R7 */
		/* 82077354h case    2:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 82077354h case    2:*/		return 0x82077358;
		  /* 82077358h */ case    3:  		/* stw R8, <#[R10]> */
		/* 82077358h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82077358h case    3:*/		return 0x8207735C;
		  /* 8207735Ch */ case    4:  		/* addi R10, R10, 4 */
		/* 8207735Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8207735Ch case    4:*/		return 0x82077360;
		  /* 82077360h */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 82077360h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82077360h case    5:*/		return 0x82077364;
		  /* 82077364h */ case    6:  		/* bc 4, CR6_LT, 48 */
		/* 82077364h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82077394;  }
		/* 82077364h case    6:*/		return 0x82077368;
		  /* 82077368h */ case    7:  		/* subf R9, R10, R9 */
		/* 82077368h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 82077368h case    7:*/		return 0x8207736C;
		  /* 8207736Ch */ case    8:  		/* addi R8, R10, -4 */
		/* 8207736Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFC);
		/* 8207736Ch case    8:*/		return 0x82077370;
		  /* 82077370h */ case    9:  		/* addi R9, R9, -1 */
		/* 82077370h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82077370h case    9:*/		return 0x82077374;
		  /* 82077374h */ case   10:  		/* rlwinm R9, R9, 30, 2, 31 */
		/* 82077374h case   10:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R9);
		/* 82077374h case   10:*/		return 0x82077378;
		  /* 82077378h */ case   11:  		/* addic. R9, R9, 1 */
		/* 82077378h case   11:*/		cpu::op::addic<1>(regs,&regs.R9,regs.R9,0x1);
		/* 82077378h case   11:*/		return 0x8207737C;
		  /* 8207737Ch */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 8207737Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x8207738C;  }
		/* 8207737Ch case   12:*/		return 0x82077380;
		  /* 82077380h */ case   13:  		/* mtspr CTR, R9 */
		/* 82077380h case   13:*/		regs.CTR = regs.R9;
		/* 82077380h case   13:*/		return 0x82077384;
		  /* 82077384h */ case   14:  		/* stwu R11, <#[R8 + 4]> */
		/* 82077384h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 82077384h case   14:*/		return 0x82077388;
		  /* 82077388h */ case   15:  		/* bc 16, CR0_LT, -4 */
		/* 82077388h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82077384;  }
		/* 82077388h case   15:*/		return 0x8207738C;
	}
	return 0x8207738C;
} // Block from 8207734Ch-8207738Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207738Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207738C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207738C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207738C);
		  /* 8207738Ch */ case    0:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8207738Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8207738Ch case    0:*/		return 0x82077390;
		  /* 82077390h */ case    1:  		/* add R10, R9, R10 */
		/* 82077390h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82077390h case    1:*/		return 0x82077394;
	}
	return 0x82077394;
} // Block from 8207738Ch-82077394h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077394);
		  /* 82077394h */ case    0:  		/* lwz R9, <#[R10]> */
		/* 82077394h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82077394h case    0:*/		return 0x82077398;
		  /* 82077398h */ case    1:  		/* srw R11, R11, R4 */
		/* 82077398h case    1:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82077398h case    1:*/		return 0x8207739C;
		  /* 8207739Ch */ case    2:  		/* orc R11, R9, R11 */
		/* 8207739Ch case    2:*/		cpu::op::orc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207739Ch case    2:*/		return 0x820773A0;
		  /* 820773A0h */ case    3:  		/* b 128 */
		/* 820773A0h case    3:*/		return 0x82077420;
		/* 820773A0h case    3:*/		return 0x820773A4;
	}
	return 0x820773A4;
} // Block from 82077394h-820773A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820773A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820773A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820773A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820773A4);
		  /* 820773A4h */ case    0:  		/* cmplw CR6, R11, R7 */
		/* 820773A4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 820773A4h case    0:*/		return 0x820773A8;
		  /* 820773A8h */ case    1:  		/* li R11, -1 */
		/* 820773A8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820773A8h case    1:*/		return 0x820773AC;
		  /* 820773ACh */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 820773ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x820773C8;  }
		/* 820773ACh case    2:*/		return 0x820773B0;
		  /* 820773B0h */ case    3:  		/* srw R7, R11, R4 */
		/* 820773B0h case    3:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R4);
		/* 820773B0h case    3:*/		return 0x820773B4;
		  /* 820773B4h */ case    4:  		/* lwz R9, <#[R10]> */
		/* 820773B4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 820773B4h case    4:*/		return 0x820773B8;
		  /* 820773B8h */ case    5:  		/* srw R11, R11, R8 */
		/* 820773B8h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820773B8h case    5:*/		return 0x820773BC;
		  /* 820773BCh */ case    6:  		/* andc R11, R11, R7 */
		/* 820773BCh case    6:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 820773BCh case    6:*/		return 0x820773C0;
		  /* 820773C0h */ case    7:  		/* andc R11, R9, R11 */
		/* 820773C0h case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820773C0h case    7:*/		return 0x820773C4;
		  /* 820773C4h */ case    8:  		/* b 92 */
		/* 820773C4h case    8:*/		return 0x82077420;
		/* 820773C4h case    8:*/		return 0x820773C8;
	}
	return 0x820773C8;
} // Block from 820773A4h-820773C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820773C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820773C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820773C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820773C8);
		  /* 820773C8h */ case    0:  		/* lwz R7, <#[R10]> */
		/* 820773C8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 820773C8h case    0:*/		return 0x820773CC;
		  /* 820773CCh */ case    1:  		/* srw R8, R11, R8 */
		/* 820773CCh case    1:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 820773CCh case    1:*/		return 0x820773D0;
		  /* 820773D0h */ case    2:  		/* andc R8, R7, R8 */
		/* 820773D0h case    2:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820773D0h case    2:*/		return 0x820773D4;
		  /* 820773D4h */ case    3:  		/* stw R8, <#[R10]> */
		/* 820773D4h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820773D4h case    3:*/		return 0x820773D8;
		  /* 820773D8h */ case    4:  		/* addi R10, R10, 4 */
		/* 820773D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820773D8h case    4:*/		return 0x820773DC;
		  /* 820773DCh */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 820773DCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 820773DCh case    5:*/		return 0x820773E0;
		  /* 820773E0h */ case    6:  		/* bc 4, CR6_LT, 52 */
		/* 820773E0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82077414;  }
		/* 820773E0h case    6:*/		return 0x820773E4;
		  /* 820773E4h */ case    7:  		/* subf R9, R10, R9 */
		/* 820773E4h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 820773E4h case    7:*/		return 0x820773E8;
		  /* 820773E8h */ case    8:  		/* addi R8, R10, -4 */
		/* 820773E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFC);
		/* 820773E8h case    8:*/		return 0x820773EC;
		  /* 820773ECh */ case    9:  		/* addi R9, R9, -1 */
		/* 820773ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 820773ECh case    9:*/		return 0x820773F0;
		  /* 820773F0h */ case   10:  		/* li R7, 0 */
		/* 820773F0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820773F0h case   10:*/		return 0x820773F4;
		  /* 820773F4h */ case   11:  		/* rlwinm R9, R9, 30, 2, 31 */
		/* 820773F4h case   11:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R9);
		/* 820773F4h case   11:*/		return 0x820773F8;
		  /* 820773F8h */ case   12:  		/* addic. R9, R9, 1 */
		/* 820773F8h case   12:*/		cpu::op::addic<1>(regs,&regs.R9,regs.R9,0x1);
		/* 820773F8h case   12:*/		return 0x820773FC;
		  /* 820773FCh */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 820773FCh case   13:*/		if ( regs.CR[0].eq ) { return 0x8207740C;  }
		/* 820773FCh case   13:*/		return 0x82077400;
		  /* 82077400h */ case   14:  		/* mtspr CTR, R9 */
		/* 82077400h case   14:*/		regs.CTR = regs.R9;
		/* 82077400h case   14:*/		return 0x82077404;
		  /* 82077404h */ case   15:  		/* stwu R7, <#[R8 + 4]> */
		/* 82077404h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 82077404h case   15:*/		return 0x82077408;
	}
	return 0x82077408;
} // Block from 820773C8h-82077408h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82077408h
// Function '?VertexShaderRedirectOutput@D3D@@YAXPBU_UCODE_R500VSUCODE@@PATGPUSHADER_INSTRUCTION@@PBT_UCODE_VSOUTPUTDECLARATION@@PBT_UCODE_PSINPUTDECLARATION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077408);
		  /* 82077408h */ case    0:  		/* bc 16, CR0_LT, -4 */
		/* 82077408h case    0:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82077404;  }
		/* 82077408h case    0:*/		return 0x8207740C;
	}
	return 0x8207740C;
} // Block from 82077408h-8207740Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207740Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207740C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207740C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207740C);
		  /* 8207740Ch */ case    0:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8207740Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8207740Ch case    0:*/		return 0x82077410;
		  /* 82077410h */ case    1:  		/* add R10, R9, R10 */
		/* 82077410h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82077410h case    1:*/		return 0x82077414;
	}
	return 0x82077414;
} // Block from 8207740Ch-82077414h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077414);
		  /* 82077414h */ case    0:  		/* lwz R9, <#[R10]> */
		/* 82077414h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82077414h case    0:*/		return 0x82077418;
		  /* 82077418h */ case    1:  		/* srw R11, R11, R4 */
		/* 82077418h case    1:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82077418h case    1:*/		return 0x8207741C;
		  /* 8207741Ch */ case    2:  		/* and R11, R11, R9 */
		/* 8207741Ch case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207741Ch case    2:*/		return 0x82077420;
	}
	return 0x82077420;
} // Block from 82077414h-82077420h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82077420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077420);
		  /* 82077420h */ case    0:  		/* stw R11, <#[R10]> */
		/* 82077420h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82077420h case    0:*/		return 0x82077424;
		  /* 82077424h */ case    1:  		/* ld R31, <#[R1 - 8]> */
		/* 82077424h case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077424h case    1:*/		return 0x82077428;
		  /* 82077428h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82077428h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077428h case    2:*/		return 0x8207742C;
	}
	return 0x8207742C;
} // Block from 82077420h-8207742Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207742Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207742C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207742C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207742C);
		  /* 8207742Ch */ case    0:  		/* nop */
		/* 8207742Ch case    0:*/		cpu::op::nop();
		/* 8207742Ch case    0:*/		return 0x82077430;
	}
	return 0x82077430;
} // Block from 8207742Ch-82077430h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077430h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077430);
		  /* 82077430h */ case    0:  		/* mfspr R12, LR */
		/* 82077430h case    0:*/		regs.R12 = regs.LR;
		/* 82077430h case    0:*/		return 0x82077434;
		  /* 82077434h */ case    1:  		/* bl 106024 */
		/* 82077434h case    1:*/		regs.LR = 0x82077438; return 0x8209125C;
		/* 82077434h case    1:*/		return 0x82077438;
		  /* 82077438h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077438h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077438h case    2:*/		return 0x8207743C;
		  /* 8207743Ch */ case    3:  		/* lis R11, -32215 */
		/* 8207743Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8207743Ch case    3:*/		return 0x82077440;
		  /* 82077440h */ case    4:  		/* mr R30, R3 */
		/* 82077440h case    4:*/		regs.R30 = regs.R3;
		/* 82077440h case    4:*/		return 0x82077444;
		  /* 82077444h */ case    5:  		/* mr R31, R4 */
		/* 82077444h case    5:*/		regs.R31 = regs.R4;
		/* 82077444h case    5:*/		return 0x82077448;
		  /* 82077448h */ case    6:  		/* lwz R3, <#[R11 - 32688]> */
		/* 82077448h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFF8050) );
		/* 82077448h case    6:*/		return 0x8207744C;
		  /* 8207744Ch */ case    7:  		/* mr R29, R3 */
		/* 8207744Ch case    7:*/		regs.R29 = regs.R3;
		/* 8207744Ch case    7:*/		return 0x82077450;
		  /* 82077450h */ case    8:  		/* bl 2055144 */
		/* 82077450h case    8:*/		regs.LR = 0x82077454; return 0x8226D038;
		/* 82077450h case    8:*/		return 0x82077454;
		  /* 82077454h */ case    9:  		/* lwz R11, <#[R29 + 28]> */
		/* 82077454h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82077454h case    9:*/		return 0x82077458;
		  /* 82077458h */ case   10:  		/* add R5, R30, R31 */
		/* 82077458h case   10:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R31);
		/* 82077458h case   10:*/		return 0x8207745C;
		  /* 8207745Ch */ case   11:  		/* mr R3, R29 */
		/* 8207745Ch case   11:*/		regs.R3 = regs.R29;
		/* 8207745Ch case   11:*/		return 0x82077460;
		  /* 82077460h */ case   12:  		/* add R11, R31, R11 */
		/* 82077460h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 82077460h case   12:*/		return 0x82077464;
		  /* 82077464h */ case   13:  		/* li R6, 0 */
		/* 82077464h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82077464h case   13:*/		return 0x82077468;
		  /* 82077468h */ case   14:  		/* stw R11, <#[R29 + 28]> */
		/* 82077468h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82077468h case   14:*/		return 0x8207746C;
		  /* 8207746Ch */ case   15:  		/* mr R4, R30 */
		/* 8207746Ch case   15:*/		regs.R4 = regs.R30;
		/* 8207746Ch case   15:*/		return 0x82077470;
		  /* 82077470h */ case   16:  		/* bl -384 */
		/* 82077470h case   16:*/		regs.LR = 0x82077474; return 0x820772F0;
		/* 82077470h case   16:*/		return 0x82077474;
		  /* 82077474h */ case   17:  		/* bl 2055092 */
		/* 82077474h case   17:*/		regs.LR = 0x82077478; return 0x8226D028;
		/* 82077474h case   17:*/		return 0x82077478;
		  /* 82077478h */ case   18:  		/* addi R1, R1, 112 */
		/* 82077478h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077478h case   18:*/		return 0x8207747C;
		  /* 8207747Ch */ case   19:  		/* b 106032 */
		/* 8207747Ch case   19:*/		return 0x820912AC;
		/* 8207747Ch case   19:*/		return 0x82077480;
	}
	return 0x82077480;
} // Block from 82077430h-82077480h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82077480h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077480);
		  /* 82077480h */ case    0:  		/* mfspr R12, LR */
		/* 82077480h case    0:*/		regs.R12 = regs.LR;
		/* 82077480h case    0:*/		return 0x82077484;
		  /* 82077484h */ case    1:  		/* bl 105928 */
		/* 82077484h case    1:*/		regs.LR = 0x82077488; return 0x8209124C;
		/* 82077484h case    1:*/		return 0x82077488;
		  /* 82077488h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82077488h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82077488h case    2:*/		return 0x8207748C;
		  /* 8207748Ch */ case    3:  		/* lis R11, -32215 */
		/* 8207748Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8207748Ch case    3:*/		return 0x82077490;
		  /* 82077490h */ case    4:  		/* li R27, -1 */
		/* 82077490h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 82077490h case    4:*/		return 0x82077494;
		  /* 82077494h */ case    5:  		/* mr R28, R3 */
		/* 82077494h case    5:*/		regs.R28 = regs.R3;
		/* 82077494h case    5:*/		return 0x82077498;
		  /* 82077498h */ case    6:  		/* mr R25, R4 */
		/* 82077498h case    6:*/		regs.R25 = regs.R4;
		/* 82077498h case    6:*/		return 0x8207749C;
		  /* 8207749Ch */ case    7:  		/* li R29, 0 */
		/* 8207749Ch case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8207749Ch case    7:*/		return 0x820774A0;
		  /* 820774A0h */ case    8:  		/* lwz R31, <#[R11 - 32688]> */
		/* 820774A0h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0xFFFF8050) );
		/* 820774A0h case    8:*/		return 0x820774A4;
		  /* 820774A4h */ case    9:  		/* mr R26, R27 */
		/* 820774A4h case    9:*/		regs.R26 = regs.R27;
		/* 820774A4h case    9:*/		return 0x820774A8;
		  /* 820774A8h */ case   10:  		/* addi R30, R11, -32688 */
		/* 820774A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF8050);
		/* 820774A8h case   10:*/		return 0x820774AC;
		  /* 820774ACh */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 820774ACh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 820774ACh case   11:*/		return 0x820774B0;
		  /* 820774B0h */ case   12:  		/* bc 4, CR0_EQ, 136 */
		/* 820774B0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82077538;  }
		/* 820774B0h case   12:*/		return 0x820774B4;
		  /* 820774B4h */ case   13:  		/* lis R4, 25728 */
		/* 820774B4h case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 820774B4h case   13:*/		return 0x820774B8;
		  /* 820774B8h */ case   14:  		/* li R3, 804 */
		/* 820774B8h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x324);
		/* 820774B8h case   14:*/		return 0x820774BC;
		  /* 820774BCh */ case   15:  		/* bl 68932 */
		/* 820774BCh case   15:*/		regs.LR = 0x820774C0; return 0x82088200;
		/* 820774BCh case   15:*/		return 0x820774C0;
	}
	return 0x820774C0;
} // Block from 82077480h-820774C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820774C0h
// Function '?PatchVertexShaderToMatchPixelShader@D3D@@YAXPAUPIXPatchVertexShaderToMatchPixelShaderData@@PBU_UCODE_R500VSUCODE@@PATGPUSHADER_INSTRUCTION@@PATGPU_PROGRAMCONTROL@@PAU_UCODE_R500PSUCODE@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820774C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820774C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820774C0);
		  /* 820774C0h */ case    0:  		/* or. R31, R3, R3 */
		/* 820774C0h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 820774C0h case    0:*/		return 0x820774C4;
		  /* 820774C4h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 820774C4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x820774D0;  }
		/* 820774C4h case    1:*/		return 0x820774C8;
		  /* 820774C8h */ case    2:  		/* li R3, 0 */
		/* 820774C8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820774C8h case    2:*/		return 0x820774CC;
		  /* 820774CCh */ case    3:  		/* b 284 */
		/* 820774CCh case    3:*/		return 0x820775E8;
		/* 820774CCh case    3:*/		return 0x820774D0;
	}
	return 0x820774D0;
} // Block from 820774C0h-820774D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820774D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820774D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820774D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820774D0);
		  /* 820774D0h */ case    0:  		/* mr R3, R31 */
		/* 820774D0h case    0:*/		regs.R3 = regs.R31;
		/* 820774D0h case    0:*/		return 0x820774D4;
		  /* 820774D4h */ case    1:  		/* bl 2055060 */
		/* 820774D4h case    1:*/		regs.LR = 0x820774D8; return 0x8226D068;
		/* 820774D4h case    1:*/		return 0x820774D8;
		  /* 820774D8h */ case    2:  		/* lis R11, 21845 */
		/* 820774D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x5555);
		/* 820774D8h case    2:*/		return 0x820774DC;
		  /* 820774DCh */ case    3:  		/* li R8, 6144 */
		/* 820774DCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1800);
		/* 820774DCh case    3:*/		return 0x820774E0;
		  /* 820774E0h */ case    4:  		/* ori R11, R11, 21845 */
		/* 820774E0h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5555);
		/* 820774E0h case    4:*/		return 0x820774E4;
		  /* 820774E4h */ case    5:  		/* stw R8, <#[R31 + 28]> */
		/* 820774E4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 820774E4h case    5:*/		return 0x820774E8;
		  /* 820774E8h */ case    6:  		/* mr R8, R30 */
		/* 820774E8h case    6:*/		regs.R8 = regs.R30;
		/* 820774E8h case    6:*/		return 0x820774EC;
		  /* 820774ECh */ case    7:  		/* stw R11, <#[R31 + 800]> */
		/* 820774ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000320) );
		/* 820774ECh case    7:*/		return 0x820774F0;
		  /* 820774F0h */ case    8:  		/* mfmsr R9, MSR */
		/* 820774F0h case    8:*/		regs.R9 = regs.MSR;
		/* 820774F0h case    8:*/		return 0x820774F4;
		  /* 820774F4h */ case    9:  		/* mtmsrd MSR, R13 */
		/* 820774F4h case    9:*/		regs.MSR = regs.R13;
		/* 820774F4h case    9:*/		return 0x820774F8;
		  /* 820774F8h */ case   10:  		/* lwarx R10, <#[R8]> */
		/* 820774F8h case   10:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 820774F8h case   10:*/		return 0x820774FC;
		  /* 820774FCh */ case   11:  		/* cmpw CR6, R10, R29 */
		/* 820774FCh case   11:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R29);
		/* 820774FCh case   11:*/		return 0x82077500;
		  /* 82077500h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 82077500h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82077514;  }
		/* 82077500h case   12:*/		return 0x82077504;
		  /* 82077504h */ case   13:  		/* stwcx. R31, <#[R8]> */
		/* 82077504h case   13:*/		cpu::mem::stwcx( regs, regs.R31, (uint32)(regs.R8 + 0x00000000) );
		/* 82077504h case   13:*/		return 0x82077508;
		  /* 82077508h */ case   14:  		/* mtmsrd MSR, R9 */
		/* 82077508h case   14:*/		regs.MSR = regs.R9;
		/* 82077508h case   14:*/		return 0x8207750C;
		  /* 8207750Ch */ case   15:  		/* bc 4, CR0_EQ, -28 */
		/* 8207750Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x820774F0;  }
		/* 8207750Ch case   15:*/		return 0x82077510;
		  /* 82077510h */ case   16:  		/* b 12 */
		/* 82077510h case   16:*/		return 0x8207751C;
		/* 82077510h case   16:*/		return 0x82077514;
	}
	return 0x82077514;
} // Block from 820774D0h-82077514h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82077514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077514);
		  /* 82077514h */ case    0:  		/* stwcx. R10, <#[R8]> */
		/* 82077514h case    0:*/		cpu::mem::stwcx( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82077514h case    0:*/		return 0x82077518;
		  /* 82077518h */ case    1:  		/* mtmsrd MSR, R9 */
		/* 82077518h case    1:*/		regs.MSR = regs.R9;
		/* 82077518h case    1:*/		return 0x8207751C;
	}
	return 0x8207751C;
} // Block from 82077514h-8207751Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207751Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207751C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207751C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207751C);
		  /* 8207751Ch */ case    0:  		/* mr R11, R10 */
		/* 8207751Ch case    0:*/		regs.R11 = regs.R10;
		/* 8207751Ch case    0:*/		return 0x82077520;
		  /* 82077520h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82077520h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82077520h case    1:*/		return 0x82077524;
		  /* 82077524h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82077524h case    2:*/		if ( regs.CR[6].eq ) { return 0x82077538;  }
		/* 82077524h case    2:*/		return 0x82077528;
		  /* 82077528h */ case    3:  		/* lis R4, 25728 */
		/* 82077528h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 82077528h case    3:*/		return 0x8207752C;
		  /* 8207752Ch */ case    4:  		/* mr R3, R31 */
		/* 8207752Ch case    4:*/		regs.R3 = regs.R31;
		/* 8207752Ch case    4:*/		return 0x82077530;
		  /* 82077530h */ case    5:  		/* bl 69128 */
		/* 82077530h case    5:*/		regs.LR = 0x82077534; return 0x82088338;
		/* 82077530h case    5:*/		return 0x82077534;
		  /* 82077534h */ case    6:  		/* lwz R31, <#[R30]> */
		/* 82077534h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 82077534h case    6:*/		return 0x82077538;
	}
	return 0x82077538;
} // Block from 8207751Ch-82077538h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82077538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077538);
		  /* 82077538h */ case    0:  		/* mr R3, R31 */
		/* 82077538h case    0:*/		regs.R3 = regs.R31;
		/* 82077538h case    0:*/		return 0x8207753C;
		  /* 8207753Ch */ case    1:  		/* bl 2054908 */
		/* 8207753Ch case    1:*/		regs.LR = 0x82077540; return 0x8226D038;
		/* 8207753Ch case    1:*/		return 0x82077540;
		  /* 82077540h */ case    2:  		/* lwz R11, <#[R31 + 28]> */
		/* 82077540h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82077540h case    2:*/		return 0x82077544;
		  /* 82077544h */ case    3:  		/* cmplw CR6, R28, R11 */
		/* 82077544h case    3:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82077544h case    3:*/		return 0x82077548;
		  /* 82077548h */ case    4:  		/* bc 12, CR6_GT, 136 */
		/* 82077548h case    4:*/		if ( regs.CR[6].gt ) { return 0x820775D0;  }
		/* 82077548h case    4:*/		return 0x8207754C;
		  /* 8207754Ch */ case    5:  		/* stw R29, <#[R1 + 80]> */
		/* 8207754Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 8207754Ch case    5:*/		return 0x82077550;
		  /* 82077550h */ case    6:  		/* addi R4, R1, 80 */
		/* 82077550h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82077550h case    6:*/		return 0x82077554;
		  /* 82077554h */ case    7:  		/* mr R3, R31 */
		/* 82077554h case    7:*/		regs.R3 = regs.R31;
		/* 82077554h case    7:*/		return 0x82077558;
		  /* 82077558h */ case    8:  		/* mr R30, R29 */
		/* 82077558h case    8:*/		regs.R30 = regs.R29;
		/* 82077558h case    8:*/		return 0x8207755C;
		  /* 8207755Ch */ case    9:  		/* mr R29, R27 */
		/* 8207755Ch case    9:*/		regs.R29 = regs.R27;
		/* 8207755Ch case    9:*/		return 0x82077560;
		  /* 82077560h */ case   10:  		/* bl -840 */
		/* 82077560h case   10:*/		regs.LR = 0x82077564; return 0x82077218;
		/* 82077560h case   10:*/		return 0x82077564;
		  /* 82077564h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82077564h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82077564h case   11:*/		return 0x82077568;
		  /* 82077568h */ case   12:  		/* bc 12, CR0_EQ, 104 */
		/* 82077568h case   12:*/		if ( regs.CR[0].eq ) { return 0x820775D0;  }
		/* 82077568h case   12:*/		return 0x8207756C;
		  /* 8207756Ch */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207756Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207756Ch case   13:*/		return 0x82077570;
		  /* 82077570h */ case   14:  		/* cmplw CR6, R3, R28 */
		/* 82077570h case   14:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 82077570h case   14:*/		return 0x82077574;
		  /* 82077574h */ case   15:  		/* bc 12, CR6_LT, 20 */
		/* 82077574h case   15:*/		if ( regs.CR[6].lt ) { return 0x82077588;  }
		/* 82077574h case   15:*/		return 0x82077578;
		  /* 82077578h */ case   16:  		/* cmplw CR6, R3, R29 */
		/* 82077578h case   16:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 82077578h case   16:*/		return 0x8207757C;
		  /* 8207757Ch */ case   17:  		/* bc 4, CR6_LT, 12 */
		/* 8207757Ch case   17:*/		if ( !regs.CR[6].lt ) { return 0x82077588;  }
		/* 8207757Ch case   17:*/		return 0x82077580;
		  /* 82077580h */ case   18:  		/* mr R30, R11 */
		/* 82077580h case   18:*/		regs.R30 = regs.R11;
		/* 82077580h case   18:*/		return 0x82077584;
		  /* 82077584h */ case   19:  		/* mr R29, R3 */
		/* 82077584h case   19:*/		regs.R29 = regs.R3;
		/* 82077584h case   19:*/		return 0x82077588;
	}
	return 0x82077588;
} // Block from 82077538h-82077588h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82077588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077588);
		  /* 82077588h */ case    0:  		/* add R11, R3, R11 */
		/* 82077588h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 82077588h case    0:*/		return 0x8207758C;
		  /* 8207758Ch */ case    1:  		/* addi R4, R1, 80 */
		/* 8207758Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207758Ch case    1:*/		return 0x82077590;
		  /* 82077590h */ case    2:  		/* stw R11, <#[R1 + 80]> */
		/* 82077590h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82077590h case    2:*/		return 0x82077594;
		  /* 82077594h */ case    3:  		/* mr R3, R31 */
		/* 82077594h case    3:*/		regs.R3 = regs.R31;
		/* 82077594h case    3:*/		return 0x82077598;
		  /* 82077598h */ case    4:  		/* bl -896 */
		/* 82077598h case    4:*/		regs.LR = 0x8207759C; return 0x82077218;
		/* 82077598h case    4:*/		return 0x8207759C;
		  /* 8207759Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8207759Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207759Ch case    5:*/		return 0x820775A0;
		  /* 820775A0h */ case    6:  		/* bc 4, CR0_EQ, -52 */
		/* 820775A0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8207756C;  }
		/* 820775A0h case    6:*/		return 0x820775A4;
		  /* 820775A4h */ case    7:  		/* cmpwi CR6, R29, -1 */
		/* 820775A4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 820775A4h case    7:*/		return 0x820775A8;
		  /* 820775A8h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 820775A8h case    8:*/		if ( regs.CR[6].eq ) { return 0x820775D0;  }
		/* 820775A8h case    8:*/		return 0x820775AC;
		  /* 820775ACh */ case    9:  		/* lwz R11, <#[R31 + 28]> */
		/* 820775ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820775ACh case    9:*/		return 0x820775B0;
		  /* 820775B0h */ case   10:  		/* li R6, 1 */
		/* 820775B0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820775B0h case   10:*/		return 0x820775B4;
		  /* 820775B4h */ case   11:  		/* add R5, R30, R28 */
		/* 820775B4h case   11:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R28);
		/* 820775B4h case   11:*/		return 0x820775B8;
		  /* 820775B8h */ case   12:  		/* subf R11, R28, R11 */
		/* 820775B8h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 820775B8h case   12:*/		return 0x820775BC;
		  /* 820775BCh */ case   13:  		/* mr R4, R30 */
		/* 820775BCh case   13:*/		regs.R4 = regs.R30;
		/* 820775BCh case   13:*/		return 0x820775C0;
		  /* 820775C0h */ case   14:  		/* stw R11, <#[R31 + 28]> */
		/* 820775C0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820775C0h case   14:*/		return 0x820775C4;
		  /* 820775C4h */ case   15:  		/* mr R3, R31 */
		/* 820775C4h case   15:*/		regs.R3 = regs.R31;
		/* 820775C4h case   15:*/		return 0x820775C8;
		  /* 820775C8h */ case   16:  		/* bl -728 */
		/* 820775C8h case   16:*/		regs.LR = 0x820775CC; return 0x820772F0;
		/* 820775C8h case   16:*/		return 0x820775CC;
		  /* 820775CCh */ case   17:  		/* mr R26, R30 */
		/* 820775CCh case   17:*/		regs.R26 = regs.R30;
		/* 820775CCh case   17:*/		return 0x820775D0;
	}
	return 0x820775D0;
} // Block from 82077588h-820775D0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820775D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820775D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820775D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820775D0);
		  /* 820775D0h */ case    0:  		/* mr R3, R31 */
		/* 820775D0h case    0:*/		regs.R3 = regs.R31;
		/* 820775D0h case    0:*/		return 0x820775D4;
		  /* 820775D4h */ case    1:  		/* bl 2054740 */
		/* 820775D4h case    1:*/		regs.LR = 0x820775D8; return 0x8226D028;
		/* 820775D4h case    1:*/		return 0x820775D8;
		  /* 820775D8h */ case    2:  		/* subf R11, R26, R27 */
		/* 820775D8h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R26,regs.R27);
		/* 820775D8h case    2:*/		return 0x820775DC;
		  /* 820775DCh */ case    3:  		/* stw R26, <#[R25]> */
		/* 820775DCh case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 820775DCh case    3:*/		return 0x820775E0;
		  /* 820775E0h */ case    4:  		/* addic R10, R11, -1 */
		/* 820775E0h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820775E0h case    4:*/		return 0x820775E4;
		  /* 820775E4h */ case    5:  		/* subfe R3, R10, R11 */
		/* 820775E4h case    5:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 820775E4h case    5:*/		return 0x820775E8;
	}
	return 0x820775E8;
} // Block from 820775D0h-820775E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820775E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820775E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820775E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820775E8);
		  /* 820775E8h */ case    0:  		/* addi R1, R1, 160 */
		/* 820775E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820775E8h case    0:*/		return 0x820775EC;
		  /* 820775ECh */ case    1:  		/* b 105648 */
		/* 820775ECh case    1:*/		return 0x8209129C;
		/* 820775ECh case    1:*/		return 0x820775F0;
	}
	return 0x820775F0;
} // Block from 820775E8h-820775F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820775F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820775F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820775F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820775F0);
		  /* 820775F0h */ case    0:  		/* mfspr R12, LR */
		/* 820775F0h case    0:*/		regs.R12 = regs.LR;
		/* 820775F0h case    0:*/		return 0x820775F4;
		  /* 820775F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820775F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820775F4h case    1:*/		return 0x820775F8;
		  /* 820775F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820775F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820775F8h case    2:*/		return 0x820775FC;
		  /* 820775FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820775FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820775FCh case    3:*/		return 0x82077600;
	}
	return 0x82077600;
} // Block from 820775F0h-82077600h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82077600h
// Function '?IncrementalShaderPatchAndLoad@D3D@@YAXPAVCDevice@1@HPAVCVertexShader@1@PATGPU_PROGRAMCONTROL@@PAVCVertexDeclaration@1@PAU_UCODE_R500VSUCODE@@PAU_UCODE_R500PSUCODE@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077600);
		  /* 82077600h */ case    0:  		/* mr R31, R3 */
		/* 82077600h case    0:*/		regs.R31 = regs.R3;
		/* 82077600h case    0:*/		return 0x82077604;
		  /* 82077604h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82077604h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82077604h case    1:*/		return 0x82077608;
		  /* 82077608h */ case    2:  		/* li R9, 0 */
		/* 82077608h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82077608h case    2:*/		return 0x8207760C;
		  /* 8207760Ch */ case    3:  		/* bc 4, CR6_EQ, 236 */
		/* 8207760Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x820776F8;  }
		/* 8207760Ch case    3:*/		return 0x82077610;
		  /* 82077610h */ case    4:  		/* lbz R10, <#[R3 + 11068]> */
		/* 82077610h case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R3 + 0x00002B3C) );
		/* 82077610h case    4:*/		return 0x82077614;
		  /* 82077614h */ case    5:  		/* stw R9, <#[R3 + 13092]> */
		/* 82077614h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00003324) );
		/* 82077614h case    5:*/		return 0x82077618;
		  /* 82077618h */ case    6:  		/* rlwinm. R11, R10, 0, 28, 28 */
		/* 82077618h case    6:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R10);
		/* 82077618h case    6:*/		return 0x8207761C;
		  /* 8207761Ch */ case    7:  		/* bc 4, CR0_EQ, 196 */
		/* 8207761Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x820776E0;  }
		/* 8207761Ch case    7:*/		return 0x82077620;
		  /* 82077620h */ case    8:  		/* rlwinm. R11, R10, 0, 29, 29 */
		/* 82077620h case    8:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R10);
		/* 82077620h case    8:*/		return 0x82077624;
		  /* 82077624h */ case    9:  		/* bc 4, CR0_EQ, 188 */
		/* 82077624h case    9:*/		if ( !regs.CR[0].eq ) { return 0x820776E0;  }
		/* 82077624h case    9:*/		return 0x82077628;
		  /* 82077628h */ case   10:  		/* lbz R11, <#[R3 + 12563]> */
		/* 82077628h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00003113) );
		/* 82077628h case   10:*/		return 0x8207762C;
		  /* 8207762Ch */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 8207762Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8207762Ch case   11:*/		return 0x82077630;
		  /* 82077630h */ case   12:  		/* bc 4, CR0_EQ, 176 */
		/* 82077630h case   12:*/		if ( !regs.CR[0].eq ) { return 0x820776E0;  }
		/* 82077630h case   12:*/		return 0x82077634;
		  /* 82077634h */ case   13:  		/* rlwinm. R11, R10, 0, 27, 27 */
		/* 82077634h case   13:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R10);
		/* 82077634h case   13:*/		return 0x82077638;
		  /* 82077638h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 82077638h case   14:*/		if ( regs.CR[0].eq ) { return 0x82077644;  }
		/* 82077638h case   14:*/		return 0x8207763C;
		  /* 8207763Ch */ case   15:  		/* li R11, 1 */
		/* 8207763Ch case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207763Ch case   15:*/		return 0x82077640;
		  /* 82077640h */ case   16:  		/* b 148 */
		/* 82077640h case   16:*/		return 0x820776D4;
		/* 82077640h case   16:*/		return 0x82077644;
	}
	return 0x82077644;
} // Block from 82077600h-82077644h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82077644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077644);
		  /* 82077644h */ case    0:  		/* rlwinm. R11, R10, 0, 26, 26 */
		/* 82077644h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R10);
		/* 82077644h case    0:*/		return 0x82077648;
		  /* 82077648h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 82077648h case    1:*/		if ( regs.CR[0].eq ) { return 0x820776CC;  }
		/* 82077648h case    1:*/		return 0x8207764C;
		  /* 8207764Ch */ case    2:  		/* lwz R11, <#[R31 + 12816]> */
		/* 8207764Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003210) );
		/* 8207764Ch case    2:*/		return 0x82077650;
		  /* 82077650h */ case    3:  		/* lwz R8, <#[R31 + 13104]> */
		/* 82077650h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00003330) );
		/* 82077650h case    3:*/		return 0x82077654;
		  /* 82077654h */ case    4:  		/* cmplw CR6, R8, R11 */
		/* 82077654h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82077654h case    4:*/		return 0x82077658;
		  /* 82077658h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82077658h case    5:*/		if ( regs.CR[6].eq ) { return 0x82077664;  }
		/* 82077658h case    5:*/		return 0x8207765C;
		  /* 8207765Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8207765Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207765Ch case    6:*/		return 0x82077660;
		  /* 82077660h */ case    7:  		/* bc 4, CR6_EQ, 108 */
		/* 82077660h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820776CC;  }
		/* 82077660h case    7:*/		return 0x82077664;
	}
	return 0x82077664;
} // Block from 82077644h-82077664h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82077664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077664);
		  /* 82077664h */ case    0:  		/* lwz R11, <#[R31 + 12820]> */
		/* 82077664h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003214) );
		/* 82077664h case    0:*/		return 0x82077668;
		  /* 82077668h */ case    1:  		/* lwz R8, <#[R31 + 13108]> */
		/* 82077668h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00003334) );
		/* 82077668h case    1:*/		return 0x8207766C;
		  /* 8207766Ch */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 8207766Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8207766Ch case    2:*/		return 0x82077670;
		  /* 82077670h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82077670h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207767C;  }
		/* 82077670h case    3:*/		return 0x82077674;
		  /* 82077674h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82077674h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82077674h case    4:*/		return 0x82077678;
		  /* 82077678h */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 82077678h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820776CC;  }
		/* 82077678h case    5:*/		return 0x8207767C;
	}
	return 0x8207767C;
} // Block from 82077664h-8207767Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207767Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207767C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207767C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207767C);
		  /* 8207767Ch */ case    0:  		/* lwz R11, <#[R31 + 12824]> */
		/* 8207767Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003218) );
		/* 8207767Ch case    0:*/		return 0x82077680;
		  /* 82077680h */ case    1:  		/* lwz R8, <#[R31 + 13112]> */
		/* 82077680h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00003338) );
		/* 82077680h case    1:*/		return 0x82077684;
		  /* 82077684h */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 82077684h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 82077684h case    2:*/		return 0x82077688;
		  /* 82077688h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82077688h case    3:*/		if ( regs.CR[6].eq ) { return 0x82077694;  }
		/* 82077688h case    3:*/		return 0x8207768C;
		  /* 8207768Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8207768Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207768Ch case    4:*/		return 0x82077690;
		  /* 82077690h */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 82077690h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820776CC;  }
		/* 82077690h case    5:*/		return 0x82077694;
	}
	return 0x82077694;
} // Block from 8207767Ch-82077694h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82077694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077694);
		  /* 82077694h */ case    0:  		/* lwz R11, <#[R31 + 12828]> */
		/* 82077694h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000321C) );
		/* 82077694h case    0:*/		return 0x82077698;
		  /* 82077698h */ case    1:  		/* lwz R8, <#[R31 + 13116]> */
		/* 82077698h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000333C) );
		/* 82077698h case    1:*/		return 0x8207769C;
		  /* 8207769Ch */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 8207769Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8207769Ch case    2:*/		return 0x820776A0;
		  /* 820776A0h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 820776A0h case    3:*/		if ( regs.CR[6].eq ) { return 0x820776AC;  }
		/* 820776A0h case    3:*/		return 0x820776A4;
		  /* 820776A4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820776A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820776A4h case    4:*/		return 0x820776A8;
		  /* 820776A8h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 820776A8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820776CC;  }
		/* 820776A8h case    5:*/		return 0x820776AC;
	}
	return 0x820776AC;
} // Block from 82077694h-820776ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820776ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776AC);
		  /* 820776ACh */ case    0:  		/* lwz R11, <#[R31 + 12832]> */
		/* 820776ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003220) );
		/* 820776ACh case    0:*/		return 0x820776B0;
		  /* 820776B0h */ case    1:  		/* lwz R8, <#[R31 + 13120]> */
		/* 820776B0h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00003340) );
		/* 820776B0h case    1:*/		return 0x820776B4;
		  /* 820776B4h */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 820776B4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 820776B4h case    2:*/		return 0x820776B8;
		  /* 820776B8h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 820776B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x820776C4;  }
		/* 820776B8h case    3:*/		return 0x820776BC;
		  /* 820776BCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820776BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820776BCh case    4:*/		return 0x820776C0;
		  /* 820776C0h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 820776C0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820776CC;  }
		/* 820776C0h case    5:*/		return 0x820776C4;
	}
	return 0x820776C4;
} // Block from 820776ACh-820776C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820776C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776C4);
		  /* 820776C4h */ case    0:  		/* li R11, 1 */
		/* 820776C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820776C4h case    0:*/		return 0x820776C8;
		  /* 820776C8h */ case    1:  		/* b 8 */
		/* 820776C8h case    1:*/		return 0x820776D0;
		/* 820776C8h case    1:*/		return 0x820776CC;
	}
	return 0x820776CC;
} // Block from 820776C4h-820776CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820776CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776CC);
		  /* 820776CCh */ case    0:  		/* mr R11, R9 */
		/* 820776CCh case    0:*/		regs.R11 = regs.R9;
		/* 820776CCh case    0:*/		return 0x820776D0;
	}
	return 0x820776D0;
} // Block from 820776CCh-820776D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820776D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776D0);
		  /* 820776D0h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 820776D0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 820776D0h case    0:*/		return 0x820776D4;
	}
	return 0x820776D4;
} // Block from 820776D0h-820776D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820776D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776D4);
		  /* 820776D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 820776D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 820776D4h case    0:*/		return 0x820776D8;
		  /* 820776D8h */ case    1:  		/* li R11, 1 */
		/* 820776D8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820776D8h case    1:*/		return 0x820776DC;
		  /* 820776DCh */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 820776DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x820776E4;  }
		/* 820776DCh case    2:*/		return 0x820776E0;
	}
	return 0x820776E0;
} // Block from 820776D4h-820776E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820776E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776E0);
		  /* 820776E0h */ case    0:  		/* mr R11, R9 */
		/* 820776E0h case    0:*/		regs.R11 = regs.R9;
		/* 820776E0h case    0:*/		return 0x820776E4;
	}
	return 0x820776E4;
} // Block from 820776E0h-820776E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820776E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776E4);
		  /* 820776E4h */ case    0:  		/* rlwimi R10, R11, 0, 31, 31 */
		/* 820776E4h case    0:*/		cpu::op::rlwimi<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 820776E4h case    0:*/		return 0x820776E8;
		  /* 820776E8h */ case    1:  		/* li R11, -1 */
		/* 820776E8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820776E8h case    1:*/		return 0x820776EC;
		  /* 820776ECh */ case    2:  		/* stb R10, <#[R31 + 11068]> */
		/* 820776ECh case    2:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B3C) );
		/* 820776ECh case    2:*/		return 0x820776F0;
		  /* 820776F0h */ case    3:  		/* stw R11, <#[R31 + 13084]> */
		/* 820776F0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000331C) );
		/* 820776F0h case    3:*/		return 0x820776F4;
		  /* 820776F4h */ case    4:  		/* b 28 */
		/* 820776F4h case    4:*/		return 0x82077710;
		/* 820776F4h case    4:*/		return 0x820776F8;
	}
	return 0x820776F8;
} // Block from 820776E4h-820776F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820776F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820776F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820776F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820776F8);
		  /* 820776F8h */ case    0:  		/* lbz R11, <#[R31 + 11068]> */
		/* 820776F8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 820776F8h case    0:*/		return 0x820776FC;
		  /* 820776FCh */ case    1:  		/* li R10, 1 */
		/* 820776FCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 820776FCh case    1:*/		return 0x82077700;
		  /* 82077700h */ case    2:  		/* stw R4, <#[R31 + 13084]> */
		/* 82077700h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000331C) );
		/* 82077700h case    2:*/		return 0x82077704;
		  /* 82077704h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82077704h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82077704h case    3:*/		return 0x82077708;
		  /* 82077708h */ case    4:  		/* stw R10, <#[R31 + 13092]> */
		/* 82077708h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00003324) );
		/* 82077708h case    4:*/		return 0x8207770C;
		  /* 8207770Ch */ case    5:  		/* stb R11, <#[R31 + 11068]> */
		/* 8207770Ch case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207770Ch case    5:*/		return 0x82077710;
	}
	return 0x82077710;
} // Block from 820776F8h-82077710h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82077710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077710);
		  /* 82077710h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82077710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82077710h case    0:*/		return 0x82077714;
		  /* 82077714h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 82077714h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82077714h case    1:*/		return 0x82077718;
		  /* 82077718h */ case    2:  		/* stw R9, <#[R31 + 13088]> */
		/* 82077718h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00003320) );
		/* 82077718h case    2:*/		return 0x8207771C;
		  /* 8207771Ch */ case    3:  		/* stw R4, <#[R31 + 11060]> */
		/* 8207771Ch case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00002B34) );
		/* 8207771Ch case    3:*/		return 0x82077720;
		  /* 82077720h */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 82077720h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077720h case    4:*/		return 0x82077724;
		  /* 82077724h */ case    5:  		/* stw R9, <#[R31 + 11064]> */
		/* 82077724h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002B38) );
		/* 82077724h case    5:*/		return 0x82077728;
		  /* 82077728h */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 82077728h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82077734;  }
		/* 82077728h case    6:*/		return 0x8207772C;
		  /* 8207772Ch */ case    7:  		/* mr R3, R31 */
		/* 8207772Ch case    7:*/		regs.R3 = regs.R31;
		/* 8207772Ch case    7:*/		return 0x82077730;
		  /* 82077730h */ case    8:  		/* bl -13864 */
		/* 82077730h case    8:*/		regs.LR = 0x82077734; return 0x82074108;
		/* 82077730h case    8:*/		return 0x82077734;
	}
	return 0x82077734;
} // Block from 82077710h-82077734h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82077734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077734);
		  /* 82077734h */ case    0:  		/* lis R11, -16384 */
		/* 82077734h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82077734h case    0:*/		return 0x82077738;
		  /* 82077738h */ case    1:  		/* ori R11, R11, 24576 */
		/* 82077738h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6000);
		/* 82077738h case    1:*/		return 0x8207773C;
		  /* 8207773Ch */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207773Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207773Ch case    2:*/		return 0x82077740;
		  /* 82077740h */ case    3:  		/* lwz R11, <#[R31 + 13084]> */
		/* 82077740h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000331C) );
		/* 82077740h case    3:*/		return 0x82077744;
		  /* 82077744h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077744h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077744h case    4:*/		return 0x82077748;
		  /* 82077748h */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 82077748h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82077748h case    5:*/		return 0x8207774C;
		  /* 8207774Ch */ case    6:  		/* addi R1, R1, 96 */
		/* 8207774Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207774Ch case    6:*/		return 0x82077750;
		  /* 82077750h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077750h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077750h case    7:*/		return 0x82077754;
		  /* 82077754h */ case    8:  		/* mtspr LR, R12 */
		/* 82077754h case    8:*/		regs.LR = regs.R12;
		/* 82077754h case    8:*/		return 0x82077758;
		  /* 82077758h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82077758h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077758h case    9:*/		return 0x8207775C;
		  /* 8207775Ch */ case   10:  		/* bclr 20, CR0_LT */
		/* 8207775Ch case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207775Ch case   10:*/		return 0x82077760;
	}
	return 0x82077760;
} // Block from 82077734h-82077760h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82077760h
// Function '?SetLiteralShaderConstants@D3D@@YAXPAVCDevice@1@PAU_UCODE_HEADER@@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077760);
		  /* 82077760h */ case    0:  		/* li R9, 128 */
		/* 82077760h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x80);
		/* 82077760h case    0:*/		return 0x82077764;
		  /* 82077764h */ case    1:  		/* addi R11, R4, 1022 */
		/* 82077764h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x3FE);
		/* 82077764h case    1:*/		return 0x82077768;
		  /* 82077768h */ case    2:  		/* addi R10, R3, 2 */
		/* 82077768h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x2);
		/* 82077768h case    2:*/		return 0x8207776C;
		  /* 8207776Ch */ case    3:  		/* subf R7, R3, R4 */
		/* 8207776Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R3,regs.R4);
		/* 8207776Ch case    3:*/		return 0x82077770;
		  /* 82077770h */ case    4:  		/* mtspr CTR, R9 */
		/* 82077770h case    4:*/		regs.CTR = regs.R9;
		/* 82077770h case    4:*/		return 0x82077774;
		  /* 82077774h */ case    5:  		/* lhz R9, <#[R11 - 1022]> */
		/* 82077774h case    5:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFC02) );
		/* 82077774h case    5:*/		return 0x82077778;
		  /* 82077778h */ case    6:  		/* sth R9, <#[R10 - 2]> */
		/* 82077778h case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0xFFFFFFFE) );
		/* 82077778h case    6:*/		return 0x8207777C;
		  /* 8207777Ch */ case    7:  		/* lhzx R8, <#[R7 + R10]> */
		/* 8207777Ch case    7:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 8207777Ch case    7:*/		return 0x82077780;
		  /* 82077780h */ case    8:  		/* lhz R9, <#[R11 - 1022]> */
		/* 82077780h case    8:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFC02) );
		/* 82077780h case    8:*/		return 0x82077784;
		  /* 82077784h */ case    9:  		/* add R9, R8, R9 */
		/* 82077784h case    9:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82077784h case    9:*/		return 0x82077788;
		  /* 82077788h */ case   10:  		/* sth R9, <#[R10]> */
		/* 82077788h case   10:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82077788h case   10:*/		return 0x8207778C;
		  /* 8207778Ch */ case   11:  		/* lhz R9, <#[R11 - 510]> */
		/* 8207778Ch case   11:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFE02) );
		/* 8207778Ch case   11:*/		return 0x82077790;
		  /* 82077790h */ case   12:  		/* sth R9, <#[R10 + 510]> */
		/* 82077790h case   12:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x000001FE) );
		/* 82077790h case   12:*/		return 0x82077794;
		  /* 82077794h */ case   13:  		/* lhz R8, <#[R11 - 510]> */
		/* 82077794h case   13:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFE02) );
		/* 82077794h case   13:*/		return 0x82077798;
		  /* 82077798h */ case   14:  		/* lhz R9, <#[R11 - 508]> */
		/* 82077798h case   14:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFE04) );
		/* 82077798h case   14:*/		return 0x8207779C;
		  /* 8207779Ch */ case   15:  		/* add R9, R8, R9 */
		/* 8207779Ch case   15:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8207779Ch case   15:*/		return 0x820777A0;
		  /* 820777A0h */ case   16:  		/* sth R9, <#[R10 + 512]> */
		/* 820777A0h case   16:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000200) );
		/* 820777A0h case   16:*/		return 0x820777A4;
		  /* 820777A4h */ case   17:  		/* lhz R9, <#[R11 + 2]> */
		/* 820777A4h case   17:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 820777A4h case   17:*/		return 0x820777A8;
		  /* 820777A8h */ case   18:  		/* sth R9, <#[R10 + 1022]> */
		/* 820777A8h case   18:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x000003FE) );
		/* 820777A8h case   18:*/		return 0x820777AC;
		  /* 820777ACh */ case   19:  		/* lhz R8, <#[R11 + 2]> */
		/* 820777ACh case   19:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 820777ACh case   19:*/		return 0x820777B0;
		  /* 820777B0h */ case   20:  		/* lhzu R9, <#[R11 + 4]> */
		/* 820777B0h case   20:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820777B0h case   20:*/		return 0x820777B4;
		  /* 820777B4h */ case   21:  		/* add R9, R8, R9 */
		/* 820777B4h case   21:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 820777B4h case   21:*/		return 0x820777B8;
		  /* 820777B8h */ case   22:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 820777B8h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 820777B8h case   22:*/		return 0x820777BC;
		  /* 820777BCh */ case   23:  		/* sth R9, <#[R10 + 1024]> */
		/* 820777BCh case   23:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000400) );
		/* 820777BCh case   23:*/		return 0x820777C0;
		  /* 820777C0h */ case   24:  		/* addi R10, R10, 4 */
		/* 820777C0h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 820777C0h case   24:*/		return 0x820777C4;
		  /* 820777C4h */ case   25:  		/* bc 16, CR0_LT, -80 */
		/* 820777C4h case   25:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82077774;  }
		/* 820777C4h case   25:*/		return 0x820777C8;
		  /* 820777C8h */ case   26:  		/* bclr 20, CR0_LT */
		/* 820777C8h case   26:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820777C8h case   26:*/		return 0x820777CC;
	}
	return 0x820777CC;
} // Block from 82077760h-820777CCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820777CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820777CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820777CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820777CC);
		  /* 820777CCh */ case    0:  		/* nop */
		/* 820777CCh case    0:*/		cpu::op::nop();
		/* 820777CCh case    0:*/		return 0x820777D0;
	}
	return 0x820777D0;
} // Block from 820777CCh-820777D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820777D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820777D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820777D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820777D0);
		  /* 820777D0h */ case    0:  		/* mfspr R12, LR */
		/* 820777D0h case    0:*/		regs.R12 = regs.LR;
		/* 820777D0h case    0:*/		return 0x820777D4;
		  /* 820777D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820777D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820777D4h case    1:*/		return 0x820777D8;
		  /* 820777D8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820777D8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820777D8h case    2:*/		return 0x820777DC;
		  /* 820777DCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820777DCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820777DCh case    3:*/		return 0x820777E0;
		  /* 820777E0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820777E0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820777E0h case    4:*/		return 0x820777E4;
		  /* 820777E4h */ case    5:  		/* addi R30, R3, 22216 */
		/* 820777E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x56C8);
		/* 820777E4h case    5:*/		return 0x820777E8;
		  /* 820777E8h */ case    6:  		/* mr R31, R3 */
		/* 820777E8h case    6:*/		regs.R31 = regs.R3;
		/* 820777E8h case    6:*/		return 0x820777EC;
		  /* 820777ECh */ case    7:  		/* mr R3, R30 */
		/* 820777ECh case    7:*/		regs.R3 = regs.R30;
		/* 820777ECh case    7:*/		return 0x820777F0;
		  /* 820777F0h */ case    8:  		/* li R5, 1536 */
		/* 820777F0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 820777F0h case    8:*/		return 0x820777F4;
		  /* 820777F4h */ case    9:  		/* li R4, 0 */
		/* 820777F4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820777F4h case    9:*/		return 0x820777F8;
		  /* 820777F8h */ case   10:  		/* bl 105288 */
		/* 820777F8h case   10:*/		regs.LR = 0x820777FC; return 0x82091340;
		/* 820777F8h case   10:*/		return 0x820777FC;
		  /* 820777FCh */ case   11:  		/* li R11, 1 */
		/* 820777FCh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820777FCh case   11:*/		return 0x82077800;
		  /* 82077800h */ case   12:  		/* mr R4, R30 */
		/* 82077800h case   12:*/		regs.R4 = regs.R30;
		/* 82077800h case   12:*/		return 0x82077804;
		  /* 82077804h */ case   13:  		/* stw R11, <#[R31 + 23752]> */
		/* 82077804h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005CC8) );
		/* 82077804h case   13:*/		return 0x82077808;
		  /* 82077808h */ case   14:  		/* mr R3, R31 */
		/* 82077808h case   14:*/		regs.R3 = regs.R31;
		/* 82077808h case   14:*/		return 0x8207780C;
		  /* 8207780Ch */ case   15:  		/* bl -10132 */
		/* 8207780Ch case   15:*/		regs.LR = 0x82077810; return 0x82075078;
		/* 8207780Ch case   15:*/		return 0x82077810;
	}
	return 0x82077810;
} // Block from 820777D0h-82077810h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82077810h
// Function '?DirectShaderPatch@D3D@@YAHPAVCDevice@1@PAVCVertexShader@1@PAVCVertexDeclaration@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077810);
		  /* 82077810h */ case    0:  		/* addi R1, R1, 112 */
		/* 82077810h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077810h case    0:*/		return 0x82077814;
		  /* 82077814h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077814h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077814h case    1:*/		return 0x82077818;
		  /* 82077818h */ case    2:  		/* mtspr LR, R12 */
		/* 82077818h case    2:*/		regs.LR = regs.R12;
		/* 82077818h case    2:*/		return 0x8207781C;
		  /* 8207781Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207781Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207781Ch case    3:*/		return 0x82077820;
		  /* 82077820h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82077820h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077820h case    4:*/		return 0x82077824;
		  /* 82077824h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82077824h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077824h case    5:*/		return 0x82077828;
	}
	return 0x82077828;
} // Block from 82077810h-82077828h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82077828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077828);
		  /* 82077828h */ case    0:  		/* mfspr R12, LR */
		/* 82077828h case    0:*/		regs.R12 = regs.LR;
		/* 82077828h case    0:*/		return 0x8207782C;
		  /* 8207782Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207782Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207782Ch case    1:*/		return 0x82077830;
		  /* 82077830h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82077830h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82077830h case    2:*/		return 0x82077834;
		  /* 82077834h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82077834h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077834h case    3:*/		return 0x82077838;
		  /* 82077838h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077838h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077838h case    4:*/		return 0x8207783C;
		  /* 8207783Ch */ case    5:  		/* mr R31, R3 */
		/* 8207783Ch case    5:*/		regs.R31 = regs.R3;
		/* 8207783Ch case    5:*/		return 0x82077840;
		  /* 82077840h */ case    6:  		/* li R5, 56 */
		/* 82077840h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 82077840h case    6:*/		return 0x82077844;
		  /* 82077844h */ case    7:  		/* li R4, 0 */
		/* 82077844h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82077844h case    7:*/		return 0x82077848;
		  /* 82077848h */ case    8:  		/* addi R3, R3, 22160 */
		/* 82077848h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x5690);
		/* 82077848h case    8:*/		return 0x8207784C;
		  /* 8207784Ch */ case    9:  		/* bl 105204 */
		/* 8207784Ch case    9:*/		regs.LR = 0x82077850; return 0x82091340;
		/* 8207784Ch case    9:*/		return 0x82077850;
		  /* 82077850h */ case   10:  		/* li R5, 1536 */
		/* 82077850h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 82077850h case   10:*/		return 0x82077854;
		  /* 82077854h */ case   11:  		/* li R4, 0 */
		/* 82077854h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82077854h case   11:*/		return 0x82077858;
		  /* 82077858h */ case   12:  		/* addi R3, R31, 22216 */
		/* 82077858h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x56C8);
		/* 82077858h case   12:*/		return 0x8207785C;
		  /* 8207785Ch */ case   13:  		/* bl 105188 */
		/* 8207785Ch case   13:*/		regs.LR = 0x82077860; return 0x82091340;
		/* 8207785Ch case   13:*/		return 0x82077860;
		  /* 82077860h */ case   14:  		/* lis R11, 10280 */
		/* 82077860h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0x2828);
		/* 82077860h case   14:*/		return 0x82077864;
		  /* 82077864h */ case   15:  		/* ori R30, R11, 262 */
		/* 82077864h case   15:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0x106);
		/* 82077864h case   15:*/		return 0x82077868;
		  /* 82077868h */ case   16:  		/* lwz R11, <#[R31 + 22088]> */
		/* 82077868h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005648) );
		/* 82077868h case   16:*/		return 0x8207786C;
		  /* 8207786Ch */ case   17:  		/* cmpw CR6, R11, R30 */
		/* 8207786Ch case   17:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 8207786Ch case   17:*/		return 0x82077870;
		  /* 82077870h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 82077870h case   18:*/		if ( regs.CR[6].eq ) { return 0x82077890;  }
		/* 82077870h case   18:*/		return 0x82077874;
		  /* 82077874h */ case   19:  		/* mr R3, R31 */
		/* 82077874h case   19:*/		regs.R3 = regs.R31;
		/* 82077874h case   19:*/		return 0x82077878;
		  /* 82077878h */ case   20:  		/* bl -168 */
		/* 82077878h case   20:*/		regs.LR = 0x8207787C; return 0x820777D0;
		/* 82077878h case   20:*/		return 0x8207787C;
		  /* 8207787Ch */ case   21:  		/* mr R4, R30 */
		/* 8207787Ch case   21:*/		regs.R4 = regs.R30;
		/* 8207787Ch case   21:*/		return 0x82077880;
		  /* 82077880h */ case   22:  		/* mr R3, R31 */
		/* 82077880h case   22:*/		regs.R3 = regs.R31;
		/* 82077880h case   22:*/		return 0x82077884;
		  /* 82077884h */ case   23:  		/* bl -38540 */
		/* 82077884h case   23:*/		regs.LR = 0x82077888; return 0x8206E1F8;
		/* 82077884h case   23:*/		return 0x82077888;
		  /* 82077888h */ case   24:  		/* mr R3, R31 */
		/* 82077888h case   24:*/		regs.R3 = regs.R31;
		/* 82077888h case   24:*/		return 0x8207788C;
		  /* 8207788Ch */ case   25:  		/* bl -14212 */
		/* 8207788Ch case   25:*/		regs.LR = 0x82077890; return 0x82074108;
		/* 8207788Ch case   25:*/		return 0x82077890;
	}
	return 0x82077890;
} // Block from 82077828h-82077890h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82077890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077890);
		  /* 82077890h */ case    0:  		/* li R3, 0 */
		/* 82077890h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82077890h case    0:*/		return 0x82077894;
		  /* 82077894h */ case    1:  		/* addi R1, R1, 112 */
		/* 82077894h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077894h case    1:*/		return 0x82077898;
		  /* 82077898h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077898h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077898h case    2:*/		return 0x8207789C;
		  /* 8207789Ch */ case    3:  		/* mtspr LR, R12 */
		/* 8207789Ch case    3:*/		regs.LR = regs.R12;
		/* 8207789Ch case    3:*/		return 0x820778A0;
		  /* 820778A0h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 820778A0h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820778A0h case    4:*/		return 0x820778A4;
		  /* 820778A4h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 820778A4h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820778A4h case    5:*/		return 0x820778A8;
		  /* 820778A8h */ case    6:  		/* bclr 20, CR0_LT */
		/* 820778A8h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820778A8h case    6:*/		return 0x820778AC;
	}
	return 0x820778AC;
} // Block from 82077890h-820778ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 820778ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820778AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820778AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820778AC);
		  /* 820778ACh */ case    0:  		/* nop */
		/* 820778ACh case    0:*/		cpu::op::nop();
		/* 820778ACh case    0:*/		return 0x820778B0;
	}
	return 0x820778B0;
} // Block from 820778ACh-820778B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820778B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820778B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820778B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820778B0);
		  /* 820778B0h */ case    0:  		/* mfspr R12, LR */
		/* 820778B0h case    0:*/		regs.R12 = regs.LR;
		/* 820778B0h case    0:*/		return 0x820778B4;
		  /* 820778B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820778B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820778B4h case    1:*/		return 0x820778B8;
		  /* 820778B8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820778B8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820778B8h case    2:*/		return 0x820778BC;
		  /* 820778BCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820778BCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820778BCh case    3:*/		return 0x820778C0;
		  /* 820778C0h */ case    4:  		/* lwz R4, <#[R3 + 22088]> */
		/* 820778C0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00005648) );
		/* 820778C0h case    4:*/		return 0x820778C4;
		  /* 820778C4h */ case    5:  		/* mr R31, R3 */
		/* 820778C4h case    5:*/		regs.R31 = regs.R3;
		/* 820778C4h case    5:*/		return 0x820778C8;
		  /* 820778C8h */ case    6:  		/* bl -38608 */
		/* 820778C8h case    6:*/		regs.LR = 0x820778CC; return 0x8206E1F8;
		/* 820778C8h case    6:*/		return 0x820778CC;
		  /* 820778CCh */ case    7:  		/* mr R3, R31 */
		/* 820778CCh case    7:*/		regs.R3 = regs.R31;
		/* 820778CCh case    7:*/		return 0x820778D0;
		  /* 820778D0h */ case    8:  		/* li R7, 1 */
		/* 820778D0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820778D0h case    8:*/		return 0x820778D4;
		  /* 820778D4h */ case    9:  		/* lwz R6, <#[R31 + 22104]> */
		/* 820778D4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00005658) );
		/* 820778D4h case    9:*/		return 0x820778D8;
		  /* 820778D8h */ case   10:  		/* lwz R5, <#[R31 + 22096]> */
		/* 820778D8h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00005650) );
		/* 820778D8h case   10:*/		return 0x820778DC;
		  /* 820778DCh */ case   11:  		/* lwz R4, <#[R31 + 22092]> */
		/* 820778DCh case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000564C) );
		/* 820778DCh case   11:*/		return 0x820778E0;
		  /* 820778E0h */ case   12:  		/* bl 20496 */
		/* 820778E0h case   12:*/		regs.LR = 0x820778E4; return 0x8207C8F0;
		/* 820778E0h case   12:*/		return 0x820778E4;
		  /* 820778E4h */ case   13:  		/* mr R3, R31 */
		/* 820778E4h case   13:*/		regs.R3 = regs.R31;
		/* 820778E4h case   13:*/		return 0x820778E8;
		  /* 820778E8h */ case   14:  		/* lwz R5, <#[R31 + 22108]> */
		/* 820778E8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000565C) );
		/* 820778E8h case   14:*/		return 0x820778EC;
		  /* 820778ECh */ case   15:  		/* li R6, 1 */
		/* 820778ECh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820778ECh case   15:*/		return 0x820778F0;
		  /* 820778F0h */ case   16:  		/* lwz R4, <#[R31 + 22088]> */
		/* 820778F0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00005648) );
		/* 820778F0h case   16:*/		return 0x820778F4;
		  /* 820778F4h */ case   17:  		/* bl -39508 */
		/* 820778F4h case   17:*/		regs.LR = 0x820778F8; return 0x8206DEA0;
		/* 820778F4h case   17:*/		return 0x820778F8;
		  /* 820778F8h */ case   18:  		/* mr R3, R31 */
		/* 820778F8h case   18:*/		regs.R3 = regs.R31;
		/* 820778F8h case   18:*/		return 0x820778FC;
		  /* 820778FCh */ case   19:  		/* bl -14324 */
		/* 820778FCh case   19:*/		regs.LR = 0x82077900; return 0x82074108;
		/* 820778FCh case   19:*/		return 0x82077900;
		  /* 82077900h */ case   20:  		/* addi R1, R1, 96 */
		/* 82077900h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82077900h case   20:*/		return 0x82077904;
		  /* 82077904h */ case   21:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077904h case   21:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077904h case   21:*/		return 0x82077908;
		  /* 82077908h */ case   22:  		/* mtspr LR, R12 */
		/* 82077908h case   22:*/		regs.LR = regs.R12;
		/* 82077908h case   22:*/		return 0x8207790C;
		  /* 8207790Ch */ case   23:  		/* ld R31, <#[R1 - 16]> */
		/* 8207790Ch case   23:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207790Ch case   23:*/		return 0x82077910;
		  /* 82077910h */ case   24:  		/* bclr 20, CR0_LT */
		/* 82077910h case   24:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077910h case   24:*/		return 0x82077914;
	}
	return 0x82077914;
} // Block from 820778B0h-82077914h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82077914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077914);
		  /* 82077914h */ case    0:  		/* nop */
		/* 82077914h case    0:*/		cpu::op::nop();
		/* 82077914h case    0:*/		return 0x82077918;
		  /* 82077918h */ case    1:  		/* lis R11, 10280 */
		/* 82077918h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x2828);
		/* 82077918h case    1:*/		return 0x8207791C;
		  /* 8207791Ch */ case    2:  		/* lwz R10, <#[R3 + 22088]> */
		/* 8207791Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00005648) );
		/* 8207791Ch case    2:*/		return 0x82077920;
		  /* 82077920h */ case    3:  		/* lwz R8, <#[R3 + 22092]> */
		/* 82077920h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000564C) );
		/* 82077920h case    3:*/		return 0x82077924;
		  /* 82077924h */ case    4:  		/* lis R9, 21 */
		/* 82077924h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0x15);
		/* 82077924h case    4:*/		return 0x82077928;
		  /* 82077928h */ case    5:  		/* ori R11, R11, 310 */
		/* 82077928h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x136);
		/* 82077928h case    5:*/		return 0x8207792C;
		  /* 8207792Ch */ case    6:  		/* lwz R7, <#[R3 + 22096]> */
		/* 8207792Ch case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00005650) );
		/* 8207792Ch case    6:*/		return 0x82077930;
		  /* 82077930h */ case    7:  		/* ori R6, R9, 6144 */
		/* 82077930h case    7:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R9,0x1800);
		/* 82077930h case    7:*/		return 0x82077934;
		  /* 82077934h */ case    8:  		/* lwz R9, <#[R4]> */
		/* 82077934h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82077934h case    8:*/		return 0x82077938;
		  /* 82077938h */ case    9:  		/* subf R11, R10, R11 */
		/* 82077938h case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82077938h case    9:*/		return 0x8207793C;
		  /* 8207793Ch */ case   10:  		/* mullw R8, R7, R8 */
		/* 8207793Ch case   10:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8207793Ch case   10:*/		return 0x82077940;
		  /* 82077940h */ case   11:  		/* cntlzw R11, R11 */
		/* 82077940h case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82077940h case   11:*/		return 0x82077944;
		  /* 82077944h */ case   12:  		/* cmplw CR6, R8, R6 */
		/* 82077944h case   12:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82077944h case   12:*/		return 0x82077948;
		  /* 82077948h */ case   13:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82077948h case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82077948h case   13:*/		return 0x8207794C;
		  /* 8207794Ch */ case   14:  		/* bc 4, CR6_GT, 12 */
		/* 8207794Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x82077958;  }
		/* 8207794Ch case   14:*/		return 0x82077950;
	}
	return 0x82077950;
} // Block from 82077914h-82077950h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82077950h
// Function '?SetPending_Shaders@D3D@@YA_KPAVCDevice@1@_K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077950);
		  /* 82077950h */ case    0:  		/* li R10, 2 */
		/* 82077950h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82077950h case    0:*/		return 0x82077954;
		  /* 82077954h */ case    1:  		/* b 24 */
		/* 82077954h case    1:*/		return 0x8207796C;
		/* 82077954h case    1:*/		return 0x82077958;
	}
	return 0x82077958;
} // Block from 82077950h-82077958h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077958);
		  /* 82077958h */ case    0:  		/* lis R10, 7 */
		/* 82077958h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7);
		/* 82077958h case    0:*/		return 0x8207795C;
		  /* 8207795Ch */ case    1:  		/* ori R10, R10, 59648 */
		/* 8207795Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE900);
		/* 8207795Ch case    1:*/		return 0x82077960;
		  /* 82077960h */ case    2:  		/* subfc R10, R8, R10 */
		/* 82077960h case    2:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82077960h case    2:*/		return 0x82077964;
		  /* 82077964h */ case    3:  		/* subfe R10, R10, R10 */
		/* 82077964h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82077964h case    3:*/		return 0x82077968;
		  /* 82077968h */ case    4:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 82077968h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82077968h case    4:*/		return 0x8207796C;
	}
	return 0x8207796C;
} // Block from 82077958h-8207796Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207796Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207796C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207796C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207796C);
		  /* 8207796Ch */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 8207796Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8207796Ch case    0:*/		return 0x82077970;
		  /* 82077970h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82077970h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820779A8;  }
		/* 82077970h case    1:*/		return 0x82077974;
		  /* 82077974h */ case    2:  		/* addic R9, R11, -1 */
		/* 82077974h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82077974h case    2:*/		return 0x82077978;
		  /* 82077978h */ case    3:  		/* lis R7, -32256 */
		/* 82077978h case    3:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82077978h case    3:*/		return 0x8207797C;
		  /* 8207797Ch */ case    4:  		/* subfe R11, R9, R11 */
		/* 8207797Ch case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207797Ch case    4:*/		return 0x82077980;
		  /* 82077980h */ case    5:  		/* addi R9, R7, 8324 */
		/* 82077980h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x2084);
		/* 82077980h case    5:*/		return 0x82077984;
		  /* 82077984h */ case    6:  		/* mulli R11, R11, 3 */
		/* 82077984h case    6:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82077984h case    6:*/		return 0x82077988;
		  /* 82077988h */ case    7:  		/* add R11, R11, R10 */
		/* 82077988h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82077988h case    7:*/		return 0x8207798C;
		  /* 8207798Ch */ case    8:  		/* lis R10, -32256 */
		/* 8207798Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207798Ch case    8:*/		return 0x82077990;
		  /* 82077990h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82077990h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82077990h case    9:*/		return 0x82077994;
		  /* 82077994h */ case   10:  		/* lis R7, -32256 */
		/* 82077994h case   10:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82077994h case   10:*/		return 0x82077998;
		  /* 82077998h */ case   11:  		/* lfs FR0, <#[R10 + 8320]> */
		/* 82077998h case   11:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00002080) );
		/* 82077998h case   11:*/		return 0x8207799C;
		  /* 8207799Ch */ case   12:  		/* lfsx FR12, <#[R11 + R9]> */
		/* 8207799Ch case   12:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207799Ch case   12:*/		return 0x820779A0;
		  /* 820779A0h */ case   13:  		/* lfs FR13, <#[R7 + 8316]> */
		/* 820779A0h case   13:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R7 + 0x0000207C) );
		/* 820779A0h case   13:*/		return 0x820779A4;
		  /* 820779A4h */ case   14:  		/* b 64 */
		/* 820779A4h case   14:*/		return 0x820779E4;
		/* 820779A4h case   14:*/		return 0x820779A8;
	}
	return 0x820779A8;
} // Block from 8207796Ch-820779A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820779A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820779A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820779A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820779A8);
		  /* 820779A8h */ case    0:  		/* cmplwi CR6, R9, 1 */
		/* 820779A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 820779A8h case    0:*/		return 0x820779AC;
		  /* 820779ACh */ case    1:  		/* bclr 4, CR6_EQ */
		/* 820779ACh case    1:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 820779ACh case    1:*/		return 0x820779B0;
	}
	return 0x820779B0;
} // Block from 820779A8h-820779B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820779B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820779B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820779B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820779B0);
		  /* 820779B0h */ case    0:  		/* addic R9, R11, -1 */
		/* 820779B0h case    0:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 820779B0h case    0:*/		return 0x820779B4;
		  /* 820779B4h */ case    1:  		/* lis R7, -32256 */
		/* 820779B4h case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820779B4h case    1:*/		return 0x820779B8;
		  /* 820779B8h */ case    2:  		/* subfe R11, R9, R11 */
		/* 820779B8h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820779B8h case    2:*/		return 0x820779BC;
		  /* 820779BCh */ case    3:  		/* addi R9, R7, 8324 */
		/* 820779BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x2084);
		/* 820779BCh case    3:*/		return 0x820779C0;
		  /* 820779C0h */ case    4:  		/* mulli R11, R11, 3 */
		/* 820779C0h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 820779C0h case    4:*/		return 0x820779C4;
		  /* 820779C4h */ case    5:  		/* add R11, R11, R10 */
		/* 820779C4h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820779C4h case    5:*/		return 0x820779C8;
		  /* 820779C8h */ case    6:  		/* addi R10, R9, 24 */
		/* 820779C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x18);
		/* 820779C8h case    6:*/		return 0x820779CC;
		  /* 820779CCh */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820779CCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820779CCh case    7:*/		return 0x820779D0;
		  /* 820779D0h */ case    8:  		/* lis R9, -32256 */
		/* 820779D0h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820779D0h case    8:*/		return 0x820779D4;
		  /* 820779D4h */ case    9:  		/* lis R7, -32256 */
		/* 820779D4h case    9:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820779D4h case    9:*/		return 0x820779D8;
		  /* 820779D8h */ case   10:  		/* lfsx FR12, <#[R11 + R10]> */
		/* 820779D8h case   10:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820779D8h case   10:*/		return 0x820779DC;
		  /* 820779DCh */ case   11:  		/* lfs FR13, <#[R9 + 8316]> */
		/* 820779DCh case   11:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x0000207C) );
		/* 820779DCh case   11:*/		return 0x820779E0;
		  /* 820779E0h */ case   12:  		/* lfs FR0, <#[R7 + 8312]> */
		/* 820779E0h case   12:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R7 + 0x00002078) );
		/* 820779E0h case   12:*/		return 0x820779E4;
	}
	return 0x820779E4;
} // Block from 820779B0h-820779E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820779E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820779E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820779E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820779E4);
		  /* 820779E4h */ case    0:  		/* rldicl R11, R8, 0, 32 */
		/* 820779E4h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R8);
		/* 820779E4h case    0:*/		return 0x820779E8;
		  /* 820779E8h */ case    1:  		/* fmuls FR13, FR12, FR13 */
		/* 820779E8h case    1:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR12,regs.FR13);
		/* 820779E8h case    1:*/		return 0x820779EC;
		  /* 820779ECh */ case    2:  		/* lis R10, -32256 */
		/* 820779ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820779ECh case    2:*/		return 0x820779F0;
		  /* 820779F0h */ case    3:  		/* std R11, <#[R1 - 16]> */
		/* 820779F0h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820779F0h case    3:*/		return 0x820779F4;
		  /* 820779F4h */ case    4:  		/* lfd FR12, <#[R1 - 16]> */
		/* 820779F4h case    4:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820779F4h case    4:*/		return 0x820779F8;
		  /* 820779F8h */ case    5:  		/* fcfid FR12, FR12 */
		/* 820779F8h case    5:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 820779F8h case    5:*/		return 0x820779FC;
		  /* 820779FCh */ case    6:  		/* lis R11, -32256 */
		/* 820779FCh case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820779FCh case    6:*/		return 0x82077A00;
		  /* 82077A00h */ case    7:  		/* frsp FR10, FR12 */
		/* 82077A00h case    7:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR12);
		/* 82077A00h case    7:*/		return 0x82077A04;
		  /* 82077A04h */ case    8:  		/* lfs FR11, <#[R11 + 8304]> */
		/* 82077A04h case    8:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R11 + 0x00002070) );
		/* 82077A04h case    8:*/		return 0x82077A08;
		  /* 82077A08h */ case    9:  		/* lis R11, -32256 */
		/* 82077A08h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82077A08h case    9:*/		return 0x82077A0C;
		  /* 82077A0Ch */ case   10:  		/* lfs FR12, <#[R10 + 8308]> */
		/* 82077A0Ch case   10:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00002074) );
		/* 82077A0Ch case   10:*/		return 0x82077A10;
		  /* 82077A10h */ case   11:  		/* fmuls FR12, FR0, FR12 */
		/* 82077A10h case   11:*/		cpu::op::fmuls<0>(regs,&regs.FR12,regs.FR0,regs.FR12);
		/* 82077A10h case   11:*/		return 0x82077A14;
		  /* 82077A14h */ case   12:  		/* li R10, 12 */
		/* 82077A14h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0xC);
		/* 82077A14h case   12:*/		return 0x82077A18;
		  /* 82077A18h */ case   13:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 82077A18h case   13:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 82077A18h case   13:*/		return 0x82077A1C;
		  /* 82077A1Ch */ case   14:  		/* stfs FR0, <#[R4 + 8]> */
		/* 82077A1Ch case   14:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R4 + 0x00000008) );
		/* 82077A1Ch case   14:*/		return 0x82077A20;
		  /* 82077A20h */ case   15:  		/* fmuls FR0, FR10, FR11 */
		/* 82077A20h case   15:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR10,regs.FR11);
		/* 82077A20h case   15:*/		return 0x82077A24;
		  /* 82077A24h */ case   16:  		/* fctidz FR12, FR12 */
		/* 82077A24h case   16:*/		cpu::op::fctidz<0>(regs,&regs.FR12,regs.FR12);
		/* 82077A24h case   16:*/		return 0x82077A28;
		  /* 82077A28h */ case   17:  		/* stfiwx FR12, <#[R4 + R10]> */
		/* 82077A28h case   17:*/		cpu::mem::store32( regs, regs.FR12, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 82077A28h case   17:*/		return 0x82077A2C;
		  /* 82077A2Ch */ case   18:  		/* fmuls FR0, FR0, FR13 */
		/* 82077A2Ch case   18:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82077A2Ch case   18:*/		return 0x82077A30;
		  /* 82077A30h */ case   19:  		/* stfs FR0, <#[R4 + 4]> */
		/* 82077A30h case   19:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R4 + 0x00000004) );
		/* 82077A30h case   19:*/		return 0x82077A34;
		  /* 82077A34h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82077A34h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077A34h case   20:*/		return 0x82077A38;
	}
	return 0x82077A38;
} // Block from 820779E4h-82077A38h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82077A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077A38);
		  /* 82077A38h */ case    0:  		/* lbz R11, <#[R3 + 11071]> */
		/* 82077A38h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00002B3F) );
		/* 82077A38h case    0:*/		return 0x82077A3C;
		  /* 82077A3Ch */ case    1:  		/* ori R11, R11, 4 */
		/* 82077A3Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82077A3Ch case    1:*/		return 0x82077A40;
		  /* 82077A40h */ case    2:  		/* stb R11, <#[R3 + 11071]> */
		/* 82077A40h case    2:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00002B3F) );
		/* 82077A40h case    2:*/		return 0x82077A44;
		  /* 82077A44h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82077A44h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077A44h case    3:*/		return 0x82077A48;
	}
	return 0x82077A48;
} // Block from 82077A38h-82077A48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82077A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077A48);
		  /* 82077A48h */ case    0:  		/* mfspr R12, LR */
		/* 82077A48h case    0:*/		regs.R12 = regs.LR;
		/* 82077A48h case    0:*/		return 0x82077A4C;
		  /* 82077A4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077A4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077A4Ch case    1:*/		return 0x82077A50;
		  /* 82077A50h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82077A50h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077A50h case    2:*/		return 0x82077A54;
		  /* 82077A54h */ case    3:  		/* stfd FR31, <#[R1 - 24]> */
		/* 82077A54h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82077A54h case    3:*/		return 0x82077A58;
		  /* 82077A58h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077A58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077A58h case    4:*/		return 0x82077A5C;
		  /* 82077A5Ch */ case    5:  		/* lis R11, 32767 */
		/* 82077A5Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FFF);
		/* 82077A5Ch case    5:*/		return 0x82077A60;
		  /* 82077A60h */ case    6:  		/* mr R31, R4 */
		/* 82077A60h case    6:*/		regs.R31 = regs.R4;
		/* 82077A60h case    6:*/		return 0x82077A64;
		  /* 82077A64h */ case    7:  		/* ori R11, R11, 65535 */
		/* 82077A64h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 82077A64h case    7:*/		return 0x82077A68;
		  /* 82077A68h */ case    8:  		/* cmpldi CR6, R4, 0 */
		/* 82077A68h case    8:*/		cpu::op::cmpldi<6>(regs,regs.R4,0x00000000);
		/* 82077A68h case    8:*/		return 0x82077A6C;
		  /* 82077A6Ch */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 82077A6Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82077A6Ch case    9:*/		return 0x82077A70;
		  /* 82077A70h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82077A70h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82077A7C;  }
		/* 82077A70h case   10:*/		return 0x82077A74;
		  /* 82077A74h */ case   11:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82077A74h case   11:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82077A74h case   11:*/		return 0x82077A78;
		  /* 82077A78h */ case   12:  		/* b 36 */
		/* 82077A78h case   12:*/		return 0x82077A9C;
		/* 82077A78h case   12:*/		return 0x82077A7C;
	}
	return 0x82077A7C;
} // Block from 82077A48h-82077A7Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82077A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077A7C);
		  /* 82077A7Ch */ case    0:  		/* bl 110628 */
		/* 82077A7Ch case    0:*/		regs.LR = 0x82077A80; return 0x82092AA0;
		/* 82077A7Ch case    0:*/		return 0x82077A80;
		  /* 82077A80h */ case    1:  		/* lis R11, -32256 */
		/* 82077A80h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82077A80h case    1:*/		return 0x82077A84;
		  /* 82077A84h */ case    2:  		/* mr R3, R31 */
		/* 82077A84h case    2:*/		regs.R3 = regs.R31;
		/* 82077A84h case    2:*/		return 0x82077A88;
		  /* 82077A88h */ case    3:  		/* lfd FR0, <#[R11 + 8376]> */
		/* 82077A88h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000020B8) );
		/* 82077A88h case    3:*/		return 0x82077A8C;
		  /* 82077A8Ch */ case    4:  		/* fmul FR31, FR1, FR0 */
		/* 82077A8Ch case    4:*/		cpu::op::fmul<0>(regs,&regs.FR31,regs.FR1,regs.FR0);
		/* 82077A8Ch case    4:*/		return 0x82077A90;
		  /* 82077A90h */ case    5:  		/* bl 110608 */
		/* 82077A90h case    5:*/		regs.LR = 0x82077A94; return 0x82092AA0;
		/* 82077A90h case    5:*/		return 0x82077A94;
		  /* 82077A94h */ case    6:  		/* fdiv FR0, FR31, FR1 */
		/* 82077A94h case    6:*/		cpu::op::fdiv<0>(regs,&regs.FR0,regs.FR31,regs.FR1);
		/* 82077A94h case    6:*/		return 0x82077A98;
		  /* 82077A98h */ case    7:  		/* frsp FR1, FR0 */
		/* 82077A98h case    7:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 82077A98h case    7:*/		return 0x82077A9C;
	}
	return 0x82077A9C;
} // Block from 82077A7Ch-82077A9Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82077A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077A9C);
		  /* 82077A9Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82077A9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077A9Ch case    0:*/		return 0x82077AA0;
		  /* 82077AA0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077AA0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077AA0h case    1:*/		return 0x82077AA4;
		  /* 82077AA4h */ case    2:  		/* mtspr LR, R12 */
		/* 82077AA4h case    2:*/		regs.LR = regs.R12;
		/* 82077AA4h case    2:*/		return 0x82077AA8;
		  /* 82077AA8h */ case    3:  		/* lfd FR31, <#[R1 - 24]> */
		/* 82077AA8h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82077AA8h case    3:*/		return 0x82077AAC;
		  /* 82077AACh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82077AACh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077AACh case    4:*/		return 0x82077AB0;
		  /* 82077AB0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82077AB0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077AB0h case    5:*/		return 0x82077AB4;
	}
	return 0x82077AB4;
} // Block from 82077A9Ch-82077AB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82077AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077AB4);
		  /* 82077AB4h */ case    0:  		/* nop */
		/* 82077AB4h case    0:*/		cpu::op::nop();
		/* 82077AB4h case    0:*/		return 0x82077AB8;
		  /* 82077AB8h */ case    1:  		/* cmpdi CR6, R3, 0 */
		/* 82077AB8h case    1:*/		cpu::op::cmpdi<6>(regs,regs.R3,0x00000000);
		/* 82077AB8h case    1:*/		return 0x82077ABC;
		  /* 82077ABCh */ case    2:  		/* bc 4, CR6_LT, 12 */
		/* 82077ABCh case    2:*/		if ( !regs.CR[6].lt ) { return 0x82077AC8;  }
		/* 82077ABCh case    2:*/		return 0x82077AC0;
		  /* 82077AC0h */ case    3:  		/* li R3, 0 */
		/* 82077AC0h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82077AC0h case    3:*/		return 0x82077AC4;
		  /* 82077AC4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82077AC4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077AC4h case    4:*/		return 0x82077AC8;
	}
	return 0x82077AC8;
} // Block from 82077AB4h-82077AC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82077AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077AC8);
		  /* 82077AC8h */ case    0:  		/* cmpdi CR6, R4, 0 */
		/* 82077AC8h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R4,0x00000000);
		/* 82077AC8h case    0:*/		return 0x82077ACC;
		  /* 82077ACCh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82077ACCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82077ADC;  }
		/* 82077ACCh case    1:*/		return 0x82077AD0;
		  /* 82077AD0h */ case    2:  		/* lis R3, 0 */
		/* 82077AD0h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 82077AD0h case    2:*/		return 0x82077AD4;
		  /* 82077AD4h */ case    3:  		/* ori R3, R3, 65535 */
		/* 82077AD4h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xFFFF);
		/* 82077AD4h case    3:*/		return 0x82077AD8;
		  /* 82077AD8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82077AD8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077AD8h case    4:*/		return 0x82077ADC;
	}
	return 0x82077ADC;
} // Block from 82077AC8h-82077ADCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82077ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077ADC);
		  /* 82077ADCh */ case    0:  		/* cmpd CR6, R3, R4 */
		/* 82077ADCh case    0:*/		cpu::op::cmpd<6>(regs,regs.R3,regs.R4);
		/* 82077ADCh case    0:*/		return 0x82077AE0;
		  /* 82077AE0h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 82077AE0h case    1:*/		if ( regs.CR[6].lt ) { return 0x82077AF0;  }
		/* 82077AE0h case    1:*/		return 0x82077AE4;
		  /* 82077AE4h */ case    2:  		/* lis R3, 0 */
		/* 82077AE4h case    2:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 82077AE4h case    2:*/		return 0x82077AE8;
		  /* 82077AE8h */ case    3:  		/* ori R3, R3, 65534 */
		/* 82077AE8h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xFFFE);
		/* 82077AE8h case    3:*/		return 0x82077AEC;
		  /* 82077AECh */ case    4:  		/* bclr 20, CR0_LT */
		/* 82077AECh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077AECh case    4:*/		return 0x82077AF0;
	}
	return 0x82077AF0;
} // Block from 82077ADCh-82077AF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82077AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077AF0);
		  /* 82077AF0h */ case    0:  		/* lis R11, 0 */
		/* 82077AF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x0);
		/* 82077AF0h case    0:*/		return 0x82077AF4;
		  /* 82077AF4h */ case    1:  		/* tdi 6, R4, 0 */
		/* 82077AF4h case    1:*/		cpu::op::td<6>(regs, 0x82077AF4, regs.R4, 0x00000000);
		/* 82077AF4h case    1:*/		return 0x82077AF8;
		  /* 82077AF8h */ case    2:  		/* ori R11, R11, 65534 */
		/* 82077AF8h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFE);
		/* 82077AF8h case    2:*/		return 0x82077AFC;
		  /* 82077AFCh */ case    3:  		/* mulld R10, R3, R11 */
		/* 82077AFCh case    3:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R3,regs.R11);
		/* 82077AFCh case    3:*/		return 0x82077B00;
		  /* 82077B00h */ case    4:  		/* rldicl R11, R10, 1, 0 */
		/* 82077B00h case    4:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R11,regs.R10);
		/* 82077B00h case    4:*/		return 0x82077B04;
		  /* 82077B04h */ case    5:  		/* divd R10, R10, R4 */
		/* 82077B04h case    5:*/		cpu::op::divd<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 82077B04h case    5:*/		return 0x82077B08;
		  /* 82077B08h */ case    6:  		/* addi R11, R11, -1 */
		/* 82077B08h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82077B08h case    6:*/		return 0x82077B0C;
		  /* 82077B0Ch */ case    7:  		/* rlwinm R3, R10, 0, 0, 31 */
		/* 82077B0Ch case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R10);
		/* 82077B0Ch case    7:*/		return 0x82077B10;
		  /* 82077B10h */ case    8:  		/* andc R11, R4, R11 */
		/* 82077B10h case    8:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82077B10h case    8:*/		return 0x82077B14;
		  /* 82077B14h */ case    9:  		/* tdi 5, R11, -1 */
		/* 82077B14h case    9:*/		cpu::op::td<5>(regs, 0x82077B14, regs.R11, 0xFFFFFFFF);
		/* 82077B14h case    9:*/		return 0x82077B18;
		  /* 82077B18h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82077B18h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077B18h case   10:*/		return 0x82077B1C;
	}
	return 0x82077B1C;
} // Block from 82077AF0h-82077B1Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82077B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077B1C);
		  /* 82077B1Ch */ case    0:  		/* nop */
		/* 82077B1Ch case    0:*/		cpu::op::nop();
		/* 82077B1Ch case    0:*/		return 0x82077B20;
	}
	return 0x82077B20;
} // Block from 82077B1Ch-82077B20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077B20);
		  /* 82077B20h */ case    0:  		/* mfspr R12, LR */
		/* 82077B20h case    0:*/		regs.R12 = regs.LR;
		/* 82077B20h case    0:*/		return 0x82077B24;
		  /* 82077B24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077B24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077B24h case    1:*/		return 0x82077B28;
		  /* 82077B28h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82077B28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82077B28h case    2:*/		return 0x82077B2C;
		  /* 82077B2Ch */ case    3:  		/* mr R10, R3 */
		/* 82077B2Ch case    3:*/		regs.R10 = regs.R3;
		/* 82077B2Ch case    3:*/		return 0x82077B30;
		  /* 82077B30h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 82077B30h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82077B30h case    4:*/		return 0x82077B34;
		  /* 82077B34h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82077B34h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82077B44;  }
		/* 82077B34h case    5:*/		return 0x82077B38;
		  /* 82077B38h */ case    6:  		/* lis R3, -32038 */
		/* 82077B38h case    6:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF82DA);
		/* 82077B38h case    6:*/		return 0x82077B3C;
		  /* 82077B3Ch */ case    7:  		/* ori R3, R3, 23 */
		/* 82077B3Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x17);
		/* 82077B3Ch case    7:*/		return 0x82077B40;
		  /* 82077B40h */ case    8:  		/* b 112 */
		/* 82077B40h case    8:*/		return 0x82077BB0;
		/* 82077B40h case    8:*/		return 0x82077B44;
	}
	return 0x82077B44;
} // Block from 82077B20h-82077B44h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82077B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077B44);
		  /* 82077B44h */ case    0:  		/* lbz R11, <#[R10 + 4]> */
		/* 82077B44h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82077B44h case    0:*/		return 0x82077B48;
		  /* 82077B48h */ case    1:  		/* cmplwi CR6, R11, 107 */
		/* 82077B48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006B);
		/* 82077B48h case    1:*/		return 0x82077B4C;
		  /* 82077B4Ch */ case    2:  		/* bc 12, CR6_GT, 68 */
		/* 82077B4Ch case    2:*/		if ( regs.CR[6].gt ) { return 0x82077B90;  }
		/* 82077B4Ch case    2:*/		return 0x82077B50;
		  /* 82077B50h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82077B50h case    3:*/		if ( regs.CR[6].eq ) { return 0x82077B7C;  }
		/* 82077B50h case    3:*/		return 0x82077B54;
		  /* 82077B54h */ case    4:  		/* cmplwi CR6, R11, 97 */
		/* 82077B54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000061);
		/* 82077B54h case    4:*/		return 0x82077B58;
		  /* 82077B58h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 82077B58h case    5:*/		if ( regs.CR[6].eq ) { return 0x82077B7C;  }
		/* 82077B58h case    5:*/		return 0x82077B5C;
		  /* 82077B5Ch */ case    6:  		/* cmplwi CR6, R11, 98 */
		/* 82077B5Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000062);
		/* 82077B5Ch case    6:*/		return 0x82077B60;
		  /* 82077B60h */ case    7:  		/* bc 4, CR6_GT, 76 */
		/* 82077B60h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82077BAC;  }
		/* 82077B60h case    7:*/		return 0x82077B64;
		  /* 82077B64h */ case    8:  		/* cmplwi CR6, R11, 100 */
		/* 82077B64h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000064);
		/* 82077B64h case    8:*/		return 0x82077B68;
		  /* 82077B68h */ case    9:  		/* bc 4, CR6_GT, 20 */
		/* 82077B68h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82077B7C;  }
		/* 82077B68h case    9:*/		return 0x82077B6C;
		  /* 82077B6Ch */ case   10:  		/* cmplwi CR6, R11, 101 */
		/* 82077B6Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000065);
		/* 82077B6Ch case   10:*/		return 0x82077B70;
		  /* 82077B70h */ case   11:  		/* bc 4, CR6_GT, 60 */
		/* 82077B70h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82077BAC;  }
		/* 82077B70h case   11:*/		return 0x82077B74;
		  /* 82077B74h */ case   12:  		/* cmplwi CR6, R11, 103 */
		/* 82077B74h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000067);
		/* 82077B74h case   12:*/		return 0x82077B78;
		  /* 82077B78h */ case   13:  		/* bc 12, CR6_GT, 52 */
		/* 82077B78h case   13:*/		if ( regs.CR[6].gt ) { return 0x82077BAC;  }
		/* 82077B78h case   13:*/		return 0x82077B7C;
	}
	return 0x82077B7C;
} // Block from 82077B44h-82077B7Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82077B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077B7C);
		  /* 82077B7Ch */ case    0:  		/* lis R11, -32256 */
		/* 82077B7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82077B7Ch case    0:*/		return 0x82077B80;
		  /* 82077B80h */ case    1:  		/* mr R3, R4 */
		/* 82077B80h case    1:*/		regs.R3 = regs.R4;
		/* 82077B80h case    1:*/		return 0x82077B84;
		  /* 82077B84h */ case    2:  		/* addi R4, R11, 8384 */
		/* 82077B84h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x20C0);
		/* 82077B84h case    2:*/		return 0x82077B88;
		  /* 82077B88h */ case    3:  		/* bl 2053264 */
		/* 82077B88h case    3:*/		regs.LR = 0x82077B8C; return 0x8226D018;
		/* 82077B88h case    3:*/		return 0x82077B8C;
		  /* 82077B8Ch */ case    4:  		/* b 32 */
		/* 82077B8Ch case    4:*/		return 0x82077BAC;
		/* 82077B8Ch case    4:*/		return 0x82077B90;
	}
	return 0x82077B90;
} // Block from 82077B7Ch-82077B90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82077B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077B90);
		  /* 82077B90h */ case    0:  		/* cmplwi CR6, R11, 109 */
		/* 82077B90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 82077B90h case    0:*/		return 0x82077B94;
		  /* 82077B94h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82077B94h case    1:*/		if ( regs.CR[6].eq ) { return 0x82077BA4;  }
		/* 82077B94h case    1:*/		return 0x82077B98;
		  /* 82077B98h */ case    2:  		/* cmplwi CR6, R11, 116 */
		/* 82077B98h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000074);
		/* 82077B98h case    2:*/		return 0x82077B9C;
		  /* 82077B9Ch */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82077B9Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82077BAC;  }
		/* 82077B9Ch case    3:*/		return 0x82077BA0;
		  /* 82077BA0h */ case    4:  		/* b -36 */
		/* 82077BA0h case    4:*/		return 0x82077B7C;
		/* 82077BA0h case    4:*/		return 0x82077BA4;
	}
	return 0x82077BA4;
} // Block from 82077B90h-82077BA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82077BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077BA4);
		  /* 82077BA4h */ case    0:  		/* mr R3, R10 */
		/* 82077BA4h case    0:*/		regs.R3 = regs.R10;
		/* 82077BA4h case    0:*/		return 0x82077BA8;
		  /* 82077BA8h */ case    1:  		/* bl 31704 */
		/* 82077BA8h case    1:*/		regs.LR = 0x82077BAC; return 0x8207F780;
		/* 82077BA8h case    1:*/		return 0x82077BAC;
	}
	return 0x82077BAC;
} // Block from 82077BA4h-82077BACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077BAC);
		  /* 82077BACh */ case    0:  		/* lis R3, 730 */
		/* 82077BACh case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0x2DA);
		/* 82077BACh case    0:*/		return 0x82077BB0;
	}
	return 0x82077BB0;
} // Block from 82077BACh-82077BB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077BB0);
		  /* 82077BB0h */ case    0:  		/* addi R1, R1, 96 */
		/* 82077BB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82077BB0h case    0:*/		return 0x82077BB4;
		  /* 82077BB4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077BB4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077BB4h case    1:*/		return 0x82077BB8;
		  /* 82077BB8h */ case    2:  		/* mtspr LR, R12 */
		/* 82077BB8h case    2:*/		regs.LR = regs.R12;
		/* 82077BB8h case    2:*/		return 0x82077BBC;
		  /* 82077BBCh */ case    3:  		/* bclr 20, CR0_LT */
		/* 82077BBCh case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077BBCh case    3:*/		return 0x82077BC0;
	}
	return 0x82077BC0;
} // Block from 82077BB0h-82077BC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82077BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077BC0);
		  /* 82077BC0h */ case    0:  		/* mfspr R12, LR */
		/* 82077BC0h case    0:*/		regs.R12 = regs.LR;
		/* 82077BC0h case    0:*/		return 0x82077BC4;
		  /* 82077BC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077BC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077BC4h case    1:*/		return 0x82077BC8;
		  /* 82077BC8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82077BC8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077BC8h case    2:*/		return 0x82077BCC;
		  /* 82077BCCh */ case    3:  		/* stwu R1, <#[R1 - 352]> */
		/* 82077BCCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 82077BCCh case    3:*/		return 0x82077BD0;
		  /* 82077BD0h */ case    4:  		/* mr R31, R3 */
		/* 82077BD0h case    4:*/		regs.R31 = regs.R3;
		/* 82077BD0h case    4:*/		return 0x82077BD4;
		  /* 82077BD4h */ case    5:  		/* li R11, 0 */
		/* 82077BD4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82077BD4h case    5:*/		return 0x82077BD8;
		  /* 82077BD8h */ case    6:  		/* li R5, 255 */
		/* 82077BD8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xFF);
		/* 82077BD8h case    6:*/		return 0x82077BDC;
		  /* 82077BDCh */ case    7:  		/* li R4, 0 */
		/* 82077BDCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82077BDCh case    7:*/		return 0x82077BE0;
		  /* 82077BE0h */ case    8:  		/* stb R11, <#[R1 + 80]> */
		/* 82077BE0h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82077BE0h case    8:*/		return 0x82077BE4;
		  /* 82077BE4h */ case    9:  		/* addi R3, R1, 81 */
		/* 82077BE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x51);
		/* 82077BE4h case    9:*/		return 0x82077BE8;
		  /* 82077BE8h */ case   10:  		/* bl 104280 */
		/* 82077BE8h case   10:*/		regs.LR = 0x82077BEC; return 0x82091340;
		/* 82077BE8h case   10:*/		return 0x82077BEC;
		  /* 82077BECh */ case   11:  		/* li R5, 256 */
		/* 82077BECh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 82077BECh case   11:*/		return 0x82077BF0;
		  /* 82077BF0h */ case   12:  		/* mr R4, R31 */
		/* 82077BF0h case   12:*/		regs.R4 = regs.R31;
		/* 82077BF0h case   12:*/		return 0x82077BF4;
		  /* 82077BF4h */ case   13:  		/* addi R3, R1, 80 */
		/* 82077BF4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82077BF4h case   13:*/		return 0x82077BF8;
		  /* 82077BF8h */ case   14:  		/* bl 110288 */
		/* 82077BF8h case   14:*/		regs.LR = 0x82077BFC; return 0x82092AC8;
		/* 82077BF8h case   14:*/		return 0x82077BFC;
		  /* 82077BFCh */ case   15:  		/* lis R11, -32256 */
		/* 82077BFCh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82077BFCh case   15:*/		return 0x82077C00;
		  /* 82077C00h */ case   16:  		/* lwz R11, <#[R11 + 1140]> */
		/* 82077C00h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 82077C00h case   16:*/		return 0x82077C04;
		  /* 82077C04h */ case   17:  		/* lwz R11, <#[R11]> */
		/* 82077C04h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82077C04h case   17:*/		return 0x82077C08;
		  /* 82077C08h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82077C08h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82077C08h case   18:*/		return 0x82077C0C;
		  /* 82077C0Ch */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 82077C0Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82077C28;  }
		/* 82077C0Ch case   19:*/		return 0x82077C10;
		  /* 82077C10h */ case   20:  		/* lwz R11, <#[R11 + 24]> */
		/* 82077C10h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82077C10h case   20:*/		return 0x82077C14;
		  /* 82077C14h */ case   21:  		/* addi R4, R1, 80 */
		/* 82077C14h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82077C14h case   21:*/		return 0x82077C18;
		  /* 82077C18h */ case   22:  		/* li R3, 84 */
		/* 82077C18h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x54);
		/* 82077C18h case   22:*/		return 0x82077C1C;
		  /* 82077C1Ch */ case   23:  		/* mtspr CTR, R11 */
		/* 82077C1Ch case   23:*/		regs.CTR = regs.R11;
		/* 82077C1Ch case   23:*/		return 0x82077C20;
		  /* 82077C20h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 82077C20h case   24:*/		if ( 1 ) { regs.LR = 0x82077C24; return (uint32)regs.CTR; }
		/* 82077C20h case   24:*/		return 0x82077C24;
		  /* 82077C24h */ case   25:  		/* b 8 */
		/* 82077C24h case   25:*/		return 0x82077C2C;
		/* 82077C24h case   25:*/		return 0x82077C28;
	}
	return 0x82077C28;
} // Block from 82077BC0h-82077C28h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82077C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077C28);
		  /* 82077C28h */ case    0:  		/* li R3, 0 */
		/* 82077C28h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82077C28h case    0:*/		return 0x82077C2C;
	}
	return 0x82077C2C;
} // Block from 82077C28h-82077C2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077C2C);
		  /* 82077C2Ch */ case    0:  		/* addic R11, R3, -1 */
		/* 82077C2Ch case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 82077C2Ch case    0:*/		return 0x82077C30;
		  /* 82077C30h */ case    1:  		/* lis R10, -32768 */
		/* 82077C30h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82077C30h case    1:*/		return 0x82077C34;
		  /* 82077C34h */ case    2:  		/* subfe R11, R11, R11 */
		/* 82077C34h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82077C34h case    2:*/		return 0x82077C38;
		  /* 82077C38h */ case    3:  		/* ori R10, R10, 16389 */
		/* 82077C38h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 82077C38h case    3:*/		return 0x82077C3C;
		  /* 82077C3Ch */ case    4:  		/* and R3, R11, R10 */
		/* 82077C3Ch case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82077C3Ch case    4:*/		return 0x82077C40;
		  /* 82077C40h */ case    5:  		/* addi R1, R1, 352 */
		/* 82077C40h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 82077C40h case    5:*/		return 0x82077C44;
		  /* 82077C44h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077C44h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077C44h case    6:*/		return 0x82077C48;
		  /* 82077C48h */ case    7:  		/* mtspr LR, R12 */
		/* 82077C48h case    7:*/		regs.LR = regs.R12;
		/* 82077C48h case    7:*/		return 0x82077C4C;
		  /* 82077C4Ch */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 82077C4Ch case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077C4Ch case    8:*/		return 0x82077C50;
		  /* 82077C50h */ case    9:  		/* bclr 20, CR0_LT */
		/* 82077C50h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077C50h case    9:*/		return 0x82077C54;
	}
	return 0x82077C54;
} // Block from 82077C2Ch-82077C54h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82077C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077C54);
		  /* 82077C54h */ case    0:  		/* nop */
		/* 82077C54h case    0:*/		cpu::op::nop();
		/* 82077C54h case    0:*/		return 0x82077C58;
	}
	return 0x82077C58;
} // Block from 82077C54h-82077C58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077C58);
		  /* 82077C58h */ case    0:  		/* mfspr R12, LR */
		/* 82077C58h case    0:*/		regs.R12 = regs.LR;
		/* 82077C58h case    0:*/		return 0x82077C5C;
		  /* 82077C5Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077C5Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077C5Ch case    1:*/		return 0x82077C60;
		  /* 82077C60h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82077C60h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077C60h case    2:*/		return 0x82077C64;
		  /* 82077C64h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82077C64h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82077C64h case    3:*/		return 0x82077C68;
		  /* 82077C68h */ case    4:  		/* lwz R11, <#[R3 + 56]> */
		/* 82077C68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82077C68h case    4:*/		return 0x82077C6C;
		  /* 82077C6Ch */ case    5:  		/* mr R31, R3 */
		/* 82077C6Ch case    5:*/		regs.R31 = regs.R3;
		/* 82077C6Ch case    5:*/		return 0x82077C70;
		  /* 82077C70h */ case    6:  		/* lwz R3, <#[R3 + 48]> */
		/* 82077C70h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 82077C70h case    6:*/		return 0x82077C74;
		  /* 82077C74h */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 82077C74h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077C74h case    7:*/		return 0x82077C78;
		  /* 82077C78h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 82077C78h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82077C84;  }
		/* 82077C78h case    8:*/		return 0x82077C7C;
		  /* 82077C7Ch */ case    9:  		/* mr R3, R31 */
		/* 82077C7Ch case    9:*/		regs.R3 = regs.R31;
		/* 82077C7Ch case    9:*/		return 0x82077C80;
		  /* 82077C80h */ case   10:  		/* bl -15224 */
		/* 82077C80h case   10:*/		regs.LR = 0x82077C84; return 0x82074108;
		/* 82077C80h case   10:*/		return 0x82077C84;
	}
	return 0x82077C84;
} // Block from 82077C58h-82077C84h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82077C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077C84);
		  /* 82077C84h */ case    0:  		/* lis R11, -16384 */
		/* 82077C84h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82077C84h case    0:*/		return 0x82077C88;
		  /* 82077C88h */ case    1:  		/* li R10, 768 */
		/* 82077C88h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x300);
		/* 82077C88h case    1:*/		return 0x82077C8C;
		  /* 82077C8Ch */ case    2:  		/* ori R11, R11, 15104 */
		/* 82077C8Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3B00);
		/* 82077C8Ch case    2:*/		return 0x82077C90;
		  /* 82077C90h */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077C90h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077C90h case    3:*/		return 0x82077C94;
		  /* 82077C94h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 82077C94h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077C94h case    4:*/		return 0x82077C98;
		  /* 82077C98h */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 82077C98h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82077C98h case    5:*/		return 0x82077C9C;
		  /* 82077C9Ch */ case    6:  		/* addi R1, R1, 96 */
		/* 82077C9Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82077C9Ch case    6:*/		return 0x82077CA0;
		  /* 82077CA0h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077CA0h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077CA0h case    7:*/		return 0x82077CA4;
		  /* 82077CA4h */ case    8:  		/* mtspr LR, R12 */
		/* 82077CA4h case    8:*/		regs.LR = regs.R12;
		/* 82077CA4h case    8:*/		return 0x82077CA8;
		  /* 82077CA8h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82077CA8h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077CA8h case    9:*/		return 0x82077CAC;
		  /* 82077CACh */ case   10:  		/* bclr 20, CR0_LT */
		/* 82077CACh case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077CACh case   10:*/		return 0x82077CB0;
	}
	return 0x82077CB0;
} // Block from 82077C84h-82077CB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82077CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077CB0);
		  /* 82077CB0h */ case    0:  		/* mfspr R12, LR */
		/* 82077CB0h case    0:*/		regs.R12 = regs.LR;
		/* 82077CB0h case    0:*/		return 0x82077CB4;
		  /* 82077CB4h */ case    1:  		/* bl 103840 */
		/* 82077CB4h case    1:*/		regs.LR = 0x82077CB8; return 0x82091254;
		/* 82077CB4h case    1:*/		return 0x82077CB8;
		  /* 82077CB8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82077CB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82077CB8h case    2:*/		return 0x82077CBC;
		  /* 82077CBCh */ case    3:  		/* mr R28, R4 */
		/* 82077CBCh case    3:*/		regs.R28 = regs.R4;
		/* 82077CBCh case    3:*/		return 0x82077CC0;
		  /* 82077CC0h */ case    4:  		/* addi R4, R5, 3 */
		/* 82077CC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0x3);
		/* 82077CC0h case    4:*/		return 0x82077CC4;
		  /* 82077CC4h */ case    5:  		/* mr R29, R3 */
		/* 82077CC4h case    5:*/		regs.R29 = regs.R3;
		/* 82077CC4h case    5:*/		return 0x82077CC8;
		  /* 82077CC8h */ case    6:  		/* mr R31, R5 */
		/* 82077CC8h case    6:*/		regs.R31 = regs.R5;
		/* 82077CC8h case    6:*/		return 0x82077CCC;
		  /* 82077CCCh */ case    7:  		/* mr R27, R6 */
		/* 82077CCCh case    7:*/		regs.R27 = regs.R6;
		/* 82077CCCh case    7:*/		return 0x82077CD0;
		  /* 82077CD0h */ case    8:  		/* bl -14736 */
		/* 82077CD0h case    8:*/		regs.LR = 0x82077CD4; return 0x82074340;
		/* 82077CD0h case    8:*/		return 0x82077CD4;
		  /* 82077CD4h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82077CD4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82077CD4h case    9:*/		return 0x82077CD8;
		  /* 82077CD8h */ case   10:  		/* bc 12, CR0_EQ, 76 */
		/* 82077CD8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82077D24;  }
		/* 82077CD8h case   10:*/		return 0x82077CDC;
		  /* 82077CDCh */ case   11:  		/* addi R11, R31, 2 */
		/* 82077CDCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2);
		/* 82077CDCh case   11:*/		return 0x82077CE0;
		  /* 82077CE0h */ case   12:  		/* lis R10, -16384 */
		/* 82077CE0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82077CE0h case   12:*/		return 0x82077CE4;
		  /* 82077CE4h */ case   13:  		/* addi R11, R11, -1 */
		/* 82077CE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82077CE4h case   13:*/		return 0x82077CE8;
		  /* 82077CE8h */ case   14:  		/* ori R10, R10, 11008 */
		/* 82077CE8h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2B00);
		/* 82077CE8h case   14:*/		return 0x82077CEC;
		  /* 82077CECh */ case   15:  		/* rlwinm R9, R31, 0, 18, 31 */
		/* 82077CECh case   15:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R9,regs.R31);
		/* 82077CECh case   15:*/		return 0x82077CF0;
		  /* 82077CF0h */ case   16:  		/* rlwimi R10, R11, 16, 2, 15 */
		/* 82077CF0h case   16:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R10,regs.R11);
		/* 82077CF0h case   16:*/		return 0x82077CF4;
		  /* 82077CF4h */ case   17:  		/* rlwinm R30, R31, 2, 0, 29 */
		/* 82077CF4h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R31);
		/* 82077CF4h case   17:*/		return 0x82077CF8;
		  /* 82077CF8h */ case   18:  		/* stwu R10, <#[R3 + 4]> */
		/* 82077CF8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077CF8h case   18:*/		return 0x82077CFC;
		  /* 82077CFCh */ case   19:  		/* mr R4, R28 */
		/* 82077CFCh case   19:*/		regs.R4 = regs.R28;
		/* 82077CFCh case   19:*/		return 0x82077D00;
		  /* 82077D00h */ case   20:  		/* mr R5, R30 */
		/* 82077D00h case   20:*/		regs.R5 = regs.R30;
		/* 82077D00h case   20:*/		return 0x82077D04;
		  /* 82077D04h */ case   21:  		/* stwu R27, <#[R3 + 4]> */
		/* 82077D04h case   21:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077D04h case   21:*/		return 0x82077D08;
		  /* 82077D08h */ case   22:  		/* mr R31, R3 */
		/* 82077D08h case   22:*/		regs.R31 = regs.R3;
		/* 82077D08h case   22:*/		return 0x82077D0C;
		  /* 82077D0Ch */ case   23:  		/* stwu R9, <#[R31 + 4]> */
		/* 82077D0Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82077D0Ch case   23:*/		return 0x82077D10;
		  /* 82077D10h */ case   24:  		/* addi R3, R31, 4 */
		/* 82077D10h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82077D10h case   24:*/		return 0x82077D14;
		  /* 82077D14h */ case   25:  		/* bl 105628 */
		/* 82077D14h case   25:*/		regs.LR = 0x82077D18; return 0x820919B0;
		/* 82077D14h case   25:*/		return 0x82077D18;
		  /* 82077D18h */ case   26:  		/* add R11, R30, R31 */
		/* 82077D18h case   26:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R31);
		/* 82077D18h case   26:*/		return 0x82077D1C;
		  /* 82077D1Ch */ case   27:  		/* li R3, 1 */
		/* 82077D1Ch case   27:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82077D1Ch case   27:*/		return 0x82077D20;
		  /* 82077D20h */ case   28:  		/* stw R11, <#[R29 + 48]> */
		/* 82077D20h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 82077D20h case   28:*/		return 0x82077D24;
	}
	return 0x82077D24;
} // Block from 82077CB0h-82077D24h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82077D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077D24);
		  /* 82077D24h */ case    0:  		/* addi R1, R1, 128 */
		/* 82077D24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82077D24h case    0:*/		return 0x82077D28;
		  /* 82077D28h */ case    1:  		/* b 103804 */
		/* 82077D28h case    1:*/		return 0x820912A4;
		/* 82077D28h case    1:*/		return 0x82077D2C;
		  /* 82077D2Ch */ case    2:  		/* nop */
		/* 82077D2Ch case    2:*/		cpu::op::nop();
		/* 82077D2Ch case    2:*/		return 0x82077D30;
	}
	return 0x82077D30;
} // Block from 82077D24h-82077D30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82077D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077D30);
		  /* 82077D30h */ case    0:  		/* mfspr R12, LR */
		/* 82077D30h case    0:*/		regs.R12 = regs.LR;
		/* 82077D30h case    0:*/		return 0x82077D34;
		  /* 82077D34h */ case    1:  		/* bl 103704 */
		/* 82077D34h case    1:*/		regs.LR = 0x82077D38; return 0x8209124C;
		/* 82077D34h case    1:*/		return 0x82077D38;
		  /* 82077D38h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82077D38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82077D38h case    2:*/		return 0x82077D3C;
		  /* 82077D3Ch */ case    3:  		/* add R11, R4, R6 */
		/* 82077D3Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R4,regs.R6);
		/* 82077D3Ch case    3:*/		return 0x82077D40;
		  /* 82077D40h */ case    4:  		/* rlwinm R31, R4, 0, 0, 29 */
		/* 82077D40h case    4:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R31,regs.R4);
		/* 82077D40h case    4:*/		return 0x82077D44;
		  /* 82077D44h */ case    5:  		/* addi R11, R11, 3 */
		/* 82077D44h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82077D44h case    5:*/		return 0x82077D48;
		  /* 82077D48h */ case    6:  		/* subf R10, R31, R4 */
		/* 82077D48h case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R31,regs.R4);
		/* 82077D48h case    6:*/		return 0x82077D4C;
		  /* 82077D4Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 82077D4Ch case    7:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 82077D4Ch case    7:*/		return 0x82077D50;
		  /* 82077D50h */ case    8:  		/* rlwinm R9, R6, 2, 0, 29 */
		/* 82077D50h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 82077D50h case    8:*/		return 0x82077D54;
		  /* 82077D54h */ case    9:  		/* subf R11, R31, R11 */
		/* 82077D54h case    9:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 82077D54h case    9:*/		return 0x82077D58;
		  /* 82077D58h */ case   10:  		/* rlwinm R28, R10, 2, 0, 29 */
		/* 82077D58h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R10);
		/* 82077D58h case   10:*/		return 0x82077D5C;
		  /* 82077D5Ch */ case   11:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 82077D5Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 82077D5Ch case   11:*/		return 0x82077D60;
		  /* 82077D60h */ case   12:  		/* mr R25, R3 */
		/* 82077D60h case   12:*/		regs.R25 = regs.R3;
		/* 82077D60h case   12:*/		return 0x82077D64;
		  /* 82077D64h */ case   13:  		/* subf R11, R9, R30 */
		/* 82077D64h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R30);
		/* 82077D64h case   13:*/		return 0x82077D68;
		  /* 82077D68h */ case   14:  		/* addi R4, R30, 1 */
		/* 82077D68h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x1);
		/* 82077D68h case   14:*/		return 0x82077D6C;
		  /* 82077D6Ch */ case   15:  		/* mr R26, R5 */
		/* 82077D6Ch case   15:*/		regs.R26 = regs.R5;
		/* 82077D6Ch case   15:*/		return 0x82077D70;
		  /* 82077D70h */ case   16:  		/* mr R29, R6 */
		/* 82077D70h case   16:*/		regs.R29 = regs.R6;
		/* 82077D70h case   16:*/		return 0x82077D74;
		  /* 82077D74h */ case   17:  		/* subf R27, R28, R11 */
		/* 82077D74h case   17:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R28,regs.R11);
		/* 82077D74h case   17:*/		return 0x82077D78;
		  /* 82077D78h */ case   18:  		/* bl -14904 */
		/* 82077D78h case   18:*/		regs.LR = 0x82077D7C; return 0x82074340;
		/* 82077D78h case   18:*/		return 0x82077D7C;
		  /* 82077D7Ch */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 82077D7Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82077D7Ch case   19:*/		return 0x82077D80;
		  /* 82077D80h */ case   20:  		/* bc 12, CR0_EQ, 128 */
		/* 82077D80h case   20:*/		if ( regs.CR[0].eq ) { return 0x82077E00;  }
		/* 82077D80h case   20:*/		return 0x82077D84;
		  /* 82077D84h */ case   21:  		/* addi R11, R31, 4096 */
		/* 82077D84h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x1000);
		/* 82077D84h case   21:*/		return 0x82077D88;
		  /* 82077D88h */ case   22:  		/* addi R10, R30, -1 */
		/* 82077D88h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 82077D88h case   22:*/		return 0x82077D8C;
		  /* 82077D8Ch */ case   23:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82077D8Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82077D8Ch case   23:*/		return 0x82077D90;
		  /* 82077D90h */ case   24:  		/* rlwinm R10, R10, 16, 0, 15 */
		/* 82077D90h case   24:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R10);
		/* 82077D90h case   24:*/		return 0x82077D94;
		  /* 82077D94h */ case   25:  		/* cmplwi CR6, R28, 0 */
		/* 82077D94h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82077D94h case   25:*/		return 0x82077D98;
		  /* 82077D98h */ case   26:  		/* or R11, R11, R10 */
		/* 82077D98h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82077D98h case   26:*/		return 0x82077D9C;
		  /* 82077D9Ch */ case   27:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077D9Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077D9Ch case   27:*/		return 0x82077DA0;
		  /* 82077DA0h */ case   28:  		/* mr R31, R3 */
		/* 82077DA0h case   28:*/		regs.R31 = regs.R3;
		/* 82077DA0h case   28:*/		return 0x82077DA4;
		  /* 82077DA4h */ case   29:  		/* bc 12, CR6_EQ, 28 */
		/* 82077DA4h case   29:*/		if ( regs.CR[6].eq ) { return 0x82077DC0;  }
		/* 82077DA4h case   29:*/		return 0x82077DA8;
		  /* 82077DA8h */ case   30:  		/* rlwinm R30, R28, 2, 0, 29 */
		/* 82077DA8h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R28);
		/* 82077DA8h case   30:*/		return 0x82077DAC;
		  /* 82077DACh */ case   31:  		/* li R4, 0 */
		/* 82077DACh case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82077DACh case   31:*/		return 0x82077DB0;
		  /* 82077DB0h */ case   32:  		/* mr R5, R30 */
		/* 82077DB0h case   32:*/		regs.R5 = regs.R30;
		/* 82077DB0h case   32:*/		return 0x82077DB4;
		  /* 82077DB4h */ case   33:  		/* addi R3, R3, 4 */
		/* 82077DB4h case   33:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82077DB4h case   33:*/		return 0x82077DB8;
		  /* 82077DB8h */ case   34:  		/* bl 103816 */
		/* 82077DB8h case   34:*/		regs.LR = 0x82077DBC; return 0x82091340;
		/* 82077DB8h case   34:*/		return 0x82077DBC;
		  /* 82077DBCh */ case   35:  		/* add R31, R30, R31 */
		/* 82077DBCh case   35:*/		cpu::op::add<0>(regs,&regs.R31,regs.R30,regs.R31);
		/* 82077DBCh case   35:*/		return 0x82077DC0;
	}
	return 0x82077DC0;
} // Block from 82077D30h-82077DC0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82077DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077DC0);
		  /* 82077DC0h */ case    0:  		/* rlwinm R30, R29, 4, 0, 27 */
		/* 82077DC0h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R30,regs.R29);
		/* 82077DC0h case    0:*/		return 0x82077DC4;
		  /* 82077DC4h */ case    1:  		/* mr R4, R26 */
		/* 82077DC4h case    1:*/		regs.R4 = regs.R26;
		/* 82077DC4h case    1:*/		return 0x82077DC8;
		  /* 82077DC8h */ case    2:  		/* mr R5, R30 */
		/* 82077DC8h case    2:*/		regs.R5 = regs.R30;
		/* 82077DC8h case    2:*/		return 0x82077DCC;
		  /* 82077DCCh */ case    3:  		/* addi R3, R31, 4 */
		/* 82077DCCh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82077DCCh case    3:*/		return 0x82077DD0;
		  /* 82077DD0h */ case    4:  		/* bl 105440 */
		/* 82077DD0h case    4:*/		regs.LR = 0x82077DD4; return 0x820919B0;
		/* 82077DD0h case    4:*/		return 0x82077DD4;
		  /* 82077DD4h */ case    5:  		/* add R31, R30, R31 */
		/* 82077DD4h case    5:*/		cpu::op::add<0>(regs,&regs.R31,regs.R30,regs.R31);
		/* 82077DD4h case    5:*/		return 0x82077DD8;
		  /* 82077DD8h */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 82077DD8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82077DD8h case    6:*/		return 0x82077DDC;
		  /* 82077DDCh */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 82077DDCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82077DF8;  }
		/* 82077DDCh case    7:*/		return 0x82077DE0;
		  /* 82077DE0h */ case    8:  		/* rlwinm R30, R27, 2, 0, 29 */
		/* 82077DE0h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R27);
		/* 82077DE0h case    8:*/		return 0x82077DE4;
		  /* 82077DE4h */ case    9:  		/* li R4, 0 */
		/* 82077DE4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82077DE4h case    9:*/		return 0x82077DE8;
		  /* 82077DE8h */ case   10:  		/* mr R5, R30 */
		/* 82077DE8h case   10:*/		regs.R5 = regs.R30;
		/* 82077DE8h case   10:*/		return 0x82077DEC;
		  /* 82077DECh */ case   11:  		/* addi R3, R31, 4 */
		/* 82077DECh case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82077DECh case   11:*/		return 0x82077DF0;
		  /* 82077DF0h */ case   12:  		/* bl 103760 */
		/* 82077DF0h case   12:*/		regs.LR = 0x82077DF4; return 0x82091340;
		/* 82077DF0h case   12:*/		return 0x82077DF4;
		  /* 82077DF4h */ case   13:  		/* add R31, R30, R31 */
		/* 82077DF4h case   13:*/		cpu::op::add<0>(regs,&regs.R31,regs.R30,regs.R31);
		/* 82077DF4h case   13:*/		return 0x82077DF8;
	}
	return 0x82077DF8;
} // Block from 82077DC0h-82077DF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82077DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077DF8);
		  /* 82077DF8h */ case    0:  		/* stw R31, <#[R25 + 48]> */
		/* 82077DF8h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000030) );
		/* 82077DF8h case    0:*/		return 0x82077DFC;
		  /* 82077DFCh */ case    1:  		/* li R3, 1 */
		/* 82077DFCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82077DFCh case    1:*/		return 0x82077E00;
	}
	return 0x82077E00;
} // Block from 82077DF8h-82077E00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077E00);
		  /* 82077E00h */ case    0:  		/* addi R1, R1, 144 */
		/* 82077E00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82077E00h case    0:*/		return 0x82077E04;
		  /* 82077E04h */ case    1:  		/* b 103576 */
		/* 82077E04h case    1:*/		return 0x8209129C;
		/* 82077E04h case    1:*/		return 0x82077E08;
	}
	return 0x82077E08;
} // Block from 82077E00h-82077E08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82077E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077E08);
		  /* 82077E08h */ case    0:  		/* mfspr R12, LR */
		/* 82077E08h case    0:*/		regs.R12 = regs.LR;
		/* 82077E08h case    0:*/		return 0x82077E0C;
		  /* 82077E0Ch */ case    1:  		/* bl 103504 */
		/* 82077E0Ch case    1:*/		regs.LR = 0x82077E10; return 0x8209125C;
		/* 82077E0Ch case    1:*/		return 0x82077E10;
		  /* 82077E10h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077E10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077E10h case    2:*/		return 0x82077E14;
		  /* 82077E14h */ case    3:  		/* lwz R11, <#[R3 + 56]> */
		/* 82077E14h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82077E14h case    3:*/		return 0x82077E18;
		  /* 82077E18h */ case    4:  		/* mr R30, R3 */
		/* 82077E18h case    4:*/		regs.R30 = regs.R3;
		/* 82077E18h case    4:*/		return 0x82077E1C;
		  /* 82077E1Ch */ case    5:  		/* lwz R3, <#[R3 + 48]> */
		/* 82077E1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 82077E1Ch case    5:*/		return 0x82077E20;
		  /* 82077E20h */ case    6:  		/* mr R29, R4 */
		/* 82077E20h case    6:*/		regs.R29 = regs.R4;
		/* 82077E20h case    6:*/		return 0x82077E24;
		  /* 82077E24h */ case    7:  		/* mr R31, R5 */
		/* 82077E24h case    7:*/		regs.R31 = regs.R5;
		/* 82077E24h case    7:*/		return 0x82077E28;
		  /* 82077E28h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 82077E28h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077E28h case    8:*/		return 0x82077E2C;
		  /* 82077E2Ch */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 82077E2Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x82077E38;  }
		/* 82077E2Ch case    9:*/		return 0x82077E30;
		  /* 82077E30h */ case   10:  		/* mr R3, R30 */
		/* 82077E30h case   10:*/		regs.R3 = regs.R30;
		/* 82077E30h case   10:*/		return 0x82077E34;
		  /* 82077E34h */ case   11:  		/* bl -15660 */
		/* 82077E34h case   11:*/		regs.LR = 0x82077E38; return 0x82074108;
		/* 82077E34h case   11:*/		return 0x82077E38;
	}
	return 0x82077E38;
} // Block from 82077E08h-82077E38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82077E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077E38);
		  /* 82077E38h */ case    0:  		/* lwz R11, <#[R30 + 13092]> */
		/* 82077E38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00003324) );
		/* 82077E38h case    0:*/		return 0x82077E3C;
		  /* 82077E3Ch */ case    1:  		/* addi R10, R29, 3072 */
		/* 82077E3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xC00);
		/* 82077E3Ch case    1:*/		return 0x82077E40;
		  /* 82077E40h */ case    2:  		/* oris R11, R11, 49158 */
		/* 82077E40h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC006);
		/* 82077E40h case    2:*/		return 0x82077E44;
		  /* 82077E44h */ case    3:  		/* mulli R10, R10, 6 */
		/* 82077E44h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x6);
		/* 82077E44h case    3:*/		return 0x82077E48;
		  /* 82077E48h */ case    4:  		/* ori R11, R11, 22016 */
		/* 82077E48h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5600);
		/* 82077E48h case    4:*/		return 0x82077E4C;
		  /* 82077E4Ch */ case    5:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E4Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E4Ch case    5:*/		return 0x82077E50;
		  /* 82077E50h */ case    6:  		/* stwu R10, <#[R3 + 4]> */
		/* 82077E50h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E50h case    6:*/		return 0x82077E54;
		  /* 82077E54h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 82077E54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82077E54h case    7:*/		return 0x82077E58;
		  /* 82077E58h */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E58h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E58h case    8:*/		return 0x82077E5C;
		  /* 82077E5Ch */ case    9:  		/* lwz R9, <#[R31 + 4]> */
		/* 82077E5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82077E5Ch case    9:*/		return 0x82077E60;
		  /* 82077E60h */ case   10:  		/* rlwinm R11, R9, 12, 20, 31 */
		/* 82077E60h case   10:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R9);
		/* 82077E60h case   10:*/		return 0x82077E64;
		  /* 82077E64h */ case   11:  		/* rlwinm R10, R9, 0, 3, 19 */
		/* 82077E64h case   11:*/		cpu::op::rlwinm<0,0,3,19>(regs,&regs.R10,regs.R9);
		/* 82077E64h case   11:*/		return 0x82077E68;
		  /* 82077E68h */ case   12:  		/* addi R11, R11, 512 */
		/* 82077E68h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82077E68h case   12:*/		return 0x82077E6C;
		  /* 82077E6Ch */ case   13:  		/* rlwinm R9, R9, 0, 20, 31 */
		/* 82077E6Ch case   13:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R9,regs.R9);
		/* 82077E6Ch case   13:*/		return 0x82077E70;
		  /* 82077E70h */ case   14:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82077E70h case   14:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82077E70h case   14:*/		return 0x82077E74;
		  /* 82077E74h */ case   15:  		/* add R11, R11, R10 */
		/* 82077E74h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82077E74h case   15:*/		return 0x82077E78;
		  /* 82077E78h */ case   16:  		/* or R11, R11, R9 */
		/* 82077E78h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82077E78h case   16:*/		return 0x82077E7C;
		  /* 82077E7Ch */ case   17:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E7Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E7Ch case   17:*/		return 0x82077E80;
		  /* 82077E80h */ case   18:  		/* lwz R11, <#[R31 + 8]> */
		/* 82077E80h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82077E80h case   18:*/		return 0x82077E84;
		  /* 82077E84h */ case   19:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E84h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E84h case   19:*/		return 0x82077E88;
		  /* 82077E88h */ case   20:  		/* lwz R11, <#[R31 + 12]> */
		/* 82077E88h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82077E88h case   20:*/		return 0x82077E8C;
		  /* 82077E8Ch */ case   21:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E8Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E8Ch case   21:*/		return 0x82077E90;
		  /* 82077E90h */ case   22:  		/* lwz R11, <#[R31 + 16]> */
		/* 82077E90h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82077E90h case   22:*/		return 0x82077E94;
		  /* 82077E94h */ case   23:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077E94h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077E94h case   23:*/		return 0x82077E98;
		  /* 82077E98h */ case   24:  		/* lwz R9, <#[R31 + 20]> */
		/* 82077E98h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000014) );
		/* 82077E98h case   24:*/		return 0x82077E9C;
		  /* 82077E9Ch */ case   25:  		/* rlwinm R11, R9, 12, 20, 31 */
		/* 82077E9Ch case   25:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R9);
		/* 82077E9Ch case   25:*/		return 0x82077EA0;
		  /* 82077EA0h */ case   26:  		/* rlwinm R10, R9, 0, 3, 19 */
		/* 82077EA0h case   26:*/		cpu::op::rlwinm<0,0,3,19>(regs,&regs.R10,regs.R9);
		/* 82077EA0h case   26:*/		return 0x82077EA4;
		  /* 82077EA4h */ case   27:  		/* addi R11, R11, 512 */
		/* 82077EA4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82077EA4h case   27:*/		return 0x82077EA8;
		  /* 82077EA8h */ case   28:  		/* rlwinm R9, R9, 0, 20, 31 */
		/* 82077EA8h case   28:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R9,regs.R9);
		/* 82077EA8h case   28:*/		return 0x82077EAC;
		  /* 82077EACh */ case   29:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82077EACh case   29:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82077EACh case   29:*/		return 0x82077EB0;
		  /* 82077EB0h */ case   30:  		/* add R11, R11, R10 */
		/* 82077EB0h case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82077EB0h case   30:*/		return 0x82077EB4;
		  /* 82077EB4h */ case   31:  		/* or R11, R11, R9 */
		/* 82077EB4h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82077EB4h case   31:*/		return 0x82077EB8;
		  /* 82077EB8h */ case   32:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077EB8h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077EB8h case   32:*/		return 0x82077EBC;
		  /* 82077EBCh */ case   33:  		/* stw R3, <#[R30 + 48]> */
		/* 82077EBCh case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 82077EBCh case   33:*/		return 0x82077EC0;
		  /* 82077EC0h */ case   34:  		/* addi R1, R1, 112 */
		/* 82077EC0h case   34:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077EC0h case   34:*/		return 0x82077EC4;
		  /* 82077EC4h */ case   35:  		/* b 103400 */
		/* 82077EC4h case   35:*/		return 0x820912AC;
		/* 82077EC4h case   35:*/		return 0x82077EC8;
	}
	return 0x82077EC8;
} // Block from 82077E38h-82077EC8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82077EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077EC8);
		  /* 82077EC8h */ case    0:  		/* mfspr R12, LR */
		/* 82077EC8h case    0:*/		regs.R12 = regs.LR;
		/* 82077EC8h case    0:*/		return 0x82077ECC;
		  /* 82077ECCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077ECCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077ECCh case    1:*/		return 0x82077ED0;
		  /* 82077ED0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82077ED0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077ED0h case    2:*/		return 0x82077ED4;
		  /* 82077ED4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82077ED4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82077ED4h case    3:*/		return 0x82077ED8;
		  /* 82077ED8h */ case    4:  		/* lwz R11, <#[R3 + 56]> */
		/* 82077ED8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82077ED8h case    4:*/		return 0x82077EDC;
		  /* 82077EDCh */ case    5:  		/* mr R31, R3 */
		/* 82077EDCh case    5:*/		regs.R31 = regs.R3;
		/* 82077EDCh case    5:*/		return 0x82077EE0;
		  /* 82077EE0h */ case    6:  		/* lwz R3, <#[R3 + 48]> */
		/* 82077EE0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 82077EE0h case    6:*/		return 0x82077EE4;
		  /* 82077EE4h */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 82077EE4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077EE4h case    7:*/		return 0x82077EE8;
		  /* 82077EE8h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 82077EE8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82077EF4;  }
		/* 82077EE8h case    8:*/		return 0x82077EEC;
		  /* 82077EECh */ case    9:  		/* mr R3, R31 */
		/* 82077EECh case    9:*/		regs.R3 = regs.R31;
		/* 82077EECh case    9:*/		return 0x82077EF0;
		  /* 82077EF0h */ case   10:  		/* bl -15848 */
		/* 82077EF0h case   10:*/		regs.LR = 0x82077EF4; return 0x82074108;
		/* 82077EF0h case   10:*/		return 0x82077EF4;
	}
	return 0x82077EF4;
} // Block from 82077EC8h-82077EF4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82077EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077EF4);
		  /* 82077EF4h */ case    0:  		/* lis R11, 2 */
		/* 82077EF4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82077EF4h case    0:*/		return 0x82077EF8;
		  /* 82077EF8h */ case    1:  		/* li R10, 0 */
		/* 82077EF8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82077EF8h case    1:*/		return 0x82077EFC;
		  /* 82077EFCh */ case    2:  		/* ori R11, R11, 20480 */
		/* 82077EFCh case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5000);
		/* 82077EFCh case    2:*/		return 0x82077F00;
		  /* 82077F00h */ case    3:  		/* li R9, 0 */
		/* 82077F00h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82077F00h case    3:*/		return 0x82077F04;
		  /* 82077F04h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077F04h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F04h case    4:*/		return 0x82077F08;
		  /* 82077F08h */ case    5:  		/* li R11, 0 */
		/* 82077F08h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82077F08h case    5:*/		return 0x82077F0C;
		  /* 82077F0Ch */ case    6:  		/* stwu R10, <#[R3 + 4]> */
		/* 82077F0Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F0Ch case    6:*/		return 0x82077F10;
		  /* 82077F10h */ case    7:  		/* stwu R9, <#[R3 + 4]> */
		/* 82077F10h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F10h case    7:*/		return 0x82077F14;
		  /* 82077F14h */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077F14h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F14h case    8:*/		return 0x82077F18;
		  /* 82077F18h */ case    9:  		/* stw R3, <#[R31 + 48]> */
		/* 82077F18h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82077F18h case    9:*/		return 0x82077F1C;
		  /* 82077F1Ch */ case   10:  		/* addi R1, R1, 96 */
		/* 82077F1Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82077F1Ch case   10:*/		return 0x82077F20;
		  /* 82077F20h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077F20h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077F20h case   11:*/		return 0x82077F24;
		  /* 82077F24h */ case   12:  		/* mtspr LR, R12 */
		/* 82077F24h case   12:*/		regs.LR = regs.R12;
		/* 82077F24h case   12:*/		return 0x82077F28;
		  /* 82077F28h */ case   13:  		/* ld R31, <#[R1 - 16]> */
		/* 82077F28h case   13:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077F28h case   13:*/		return 0x82077F2C;
		  /* 82077F2Ch */ case   14:  		/* bclr 20, CR0_LT */
		/* 82077F2Ch case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077F2Ch case   14:*/		return 0x82077F30;
	}
	return 0x82077F30;
} // Block from 82077EF4h-82077F30h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82077F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077F30);
		  /* 82077F30h */ case    0:  		/* mfspr R12, LR */
		/* 82077F30h case    0:*/		regs.R12 = regs.LR;
		/* 82077F30h case    0:*/		return 0x82077F34;
		  /* 82077F34h */ case    1:  		/* bl 103208 */
		/* 82077F34h case    1:*/		regs.LR = 0x82077F38; return 0x8209125C;
		/* 82077F34h case    1:*/		return 0x82077F38;
		  /* 82077F38h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077F38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077F38h case    2:*/		return 0x82077F3C;
		  /* 82077F3Ch */ case    3:  		/* lwz R11, <#[R3 + 56]> */
		/* 82077F3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 82077F3Ch case    3:*/		return 0x82077F40;
		  /* 82077F40h */ case    4:  		/* mr R31, R3 */
		/* 82077F40h case    4:*/		regs.R31 = regs.R3;
		/* 82077F40h case    4:*/		return 0x82077F44;
		  /* 82077F44h */ case    5:  		/* lwz R3, <#[R3 + 48]> */
		/* 82077F44h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 82077F44h case    5:*/		return 0x82077F48;
		  /* 82077F48h */ case    6:  		/* mr R30, R4 */
		/* 82077F48h case    6:*/		regs.R30 = regs.R4;
		/* 82077F48h case    6:*/		return 0x82077F4C;
		  /* 82077F4Ch */ case    7:  		/* mr R29, R5 */
		/* 82077F4Ch case    7:*/		regs.R29 = regs.R5;
		/* 82077F4Ch case    7:*/		return 0x82077F50;
		  /* 82077F50h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 82077F50h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077F50h case    8:*/		return 0x82077F54;
		  /* 82077F54h */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 82077F54h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82077F60;  }
		/* 82077F54h case    9:*/		return 0x82077F58;
		  /* 82077F58h */ case   10:  		/* mr R3, R31 */
		/* 82077F58h case   10:*/		regs.R3 = regs.R31;
		/* 82077F58h case   10:*/		return 0x82077F5C;
		  /* 82077F5Ch */ case   11:  		/* bl -15956 */
		/* 82077F5Ch case   11:*/		regs.LR = 0x82077F60; return 0x82074108;
		/* 82077F5Ch case   11:*/		return 0x82077F60;
	}
	return 0x82077F60;
} // Block from 82077F30h-82077F60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82077F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077F60);
		  /* 82077F60h */ case    0:  		/* lis R11, -16384 */
		/* 82077F60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82077F60h case    0:*/		return 0x82077F64;
		  /* 82077F64h */ case    1:  		/* rlwinm R10, R29, 16, 0, 15 */
		/* 82077F64h case    1:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R29);
		/* 82077F64h case    1:*/		return 0x82077F68;
		  /* 82077F68h */ case    2:  		/* ori R11, R11, 13824 */
		/* 82077F68h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3600);
		/* 82077F68h case    2:*/		return 0x82077F6C;
		  /* 82077F6Ch */ case    3:  		/* or R10, R10, R30 */
		/* 82077F6Ch case    3:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 82077F6Ch case    3:*/		return 0x82077F70;
		  /* 82077F70h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077F70h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F70h case    4:*/		return 0x82077F74;
		  /* 82077F74h */ case    5:  		/* ori R11, R10, 128 */
		/* 82077F74h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x80);
		/* 82077F74h case    5:*/		return 0x82077F78;
		  /* 82077F78h */ case    6:  		/* stwu R11, <#[R3 + 4]> */
		/* 82077F78h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82077F78h case    6:*/		return 0x82077F7C;
		  /* 82077F7Ch */ case    7:  		/* stw R3, <#[R31 + 48]> */
		/* 82077F7Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82077F7Ch case    7:*/		return 0x82077F80;
		  /* 82077F80h */ case    8:  		/* addi R1, R1, 112 */
		/* 82077F80h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077F80h case    8:*/		return 0x82077F84;
		  /* 82077F84h */ case    9:  		/* b 103208 */
		/* 82077F84h case    9:*/		return 0x820912AC;
		/* 82077F84h case    9:*/		return 0x82077F88;
	}
	return 0x82077F88;
} // Block from 82077F60h-82077F88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82077F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077F88);
		  /* 82077F88h */ case    0:  		/* mfspr R12, LR */
		/* 82077F88h case    0:*/		regs.R12 = regs.LR;
		/* 82077F88h case    0:*/		return 0x82077F8C;
		  /* 82077F8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82077F8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077F8Ch case    1:*/		return 0x82077F90;
		  /* 82077F90h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82077F90h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077F90h case    2:*/		return 0x82077F94;
		  /* 82077F94h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 82077F94h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82077F94h case    3:*/		return 0x82077F98;
		  /* 82077F98h */ case    4:  		/* mr R31, R3 */
		/* 82077F98h case    4:*/		regs.R31 = regs.R3;
		/* 82077F98h case    4:*/		return 0x82077F9C;
		  /* 82077F9Ch */ case    5:  		/* addi R3, R1, 80 */
		/* 82077F9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82077F9Ch case    5:*/		return 0x82077FA0;
		  /* 82077FA0h */ case    6:  		/* bl 64016 */
		/* 82077FA0h case    6:*/		regs.LR = 0x82077FA4; return 0x820879B0;
		/* 82077FA0h case    6:*/		return 0x82077FA4;
		  /* 82077FA4h */ case    7:  		/* ld R11, <#[R1 + 80]> */
		/* 82077FA4h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82077FA4h case    7:*/		return 0x82077FA8;
		  /* 82077FA8h */ case    8:  		/* lwz R10, <#[R31 + 22084]> */
		/* 82077FA8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005644) );
		/* 82077FA8h case    8:*/		return 0x82077FAC;
		  /* 82077FACh */ case    9:  		/* sradi R11, R11, 10 */
		/* 82077FACh case    9:*/		cpu::op::sradi<0,10>(regs,&regs.R11,regs.R11);
		/* 82077FACh case    9:*/		return 0x82077FB0;
		  /* 82077FB0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82077FB0h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82077FB0h case   10:*/		return 0x82077FB4;
		  /* 82077FB4h */ case   11:  		/* subf R3, R10, R11 */
		/* 82077FB4h case   11:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82077FB4h case   11:*/		return 0x82077FB8;
		  /* 82077FB8h */ case   12:  		/* addi R1, R1, 112 */
		/* 82077FB8h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82077FB8h case   12:*/		return 0x82077FBC;
		  /* 82077FBCh */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 82077FBCh case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82077FBCh case   13:*/		return 0x82077FC0;
		  /* 82077FC0h */ case   14:  		/* mtspr LR, R12 */
		/* 82077FC0h case   14:*/		regs.LR = regs.R12;
		/* 82077FC0h case   14:*/		return 0x82077FC4;
		  /* 82077FC4h */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 82077FC4h case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82077FC4h case   15:*/		return 0x82077FC8;
		  /* 82077FC8h */ case   16:  		/* bclr 20, CR0_LT */
		/* 82077FC8h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82077FC8h case   16:*/		return 0x82077FCC;
	}
	return 0x82077FCC;
} // Block from 82077F88h-82077FCCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82077FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077FCC);
		  /* 82077FCCh */ case    0:  		/* nop */
		/* 82077FCCh case    0:*/		cpu::op::nop();
		/* 82077FCCh case    0:*/		return 0x82077FD0;
	}
	return 0x82077FD0;
} // Block from 82077FCCh-82077FD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82077FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077FD0);
		  /* 82077FD0h */ case    0:  		/* mfspr R12, LR */
		/* 82077FD0h case    0:*/		regs.R12 = regs.LR;
		/* 82077FD0h case    0:*/		return 0x82077FD4;
		  /* 82077FD4h */ case    1:  		/* bl 103036 */
		/* 82077FD4h case    1:*/		regs.LR = 0x82077FD8; return 0x82091250;
		/* 82077FD4h case    1:*/		return 0x82077FD8;
		  /* 82077FD8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82077FD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82077FD8h case    2:*/		return 0x82077FDC;
		  /* 82077FDCh */ case    3:  		/* mr R31, R3 */
		/* 82077FDCh case    3:*/		regs.R31 = regs.R3;
		/* 82077FDCh case    3:*/		return 0x82077FE0;
		  /* 82077FE0h */ case    4:  		/* lwz R3, <#[R3 + 48]> */
		/* 82077FE0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 82077FE0h case    4:*/		return 0x82077FE4;
		  /* 82077FE4h */ case    5:  		/* lwz R11, <#[R31 + 56]> */
		/* 82077FE4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82077FE4h case    5:*/		return 0x82077FE8;
		  /* 82077FE8h */ case    6:  		/* cmplw CR6, R3, R11 */
		/* 82077FE8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82077FE8h case    6:*/		return 0x82077FEC;
		  /* 82077FECh */ case    7:  		/* bc 4, CR6_GT, 12 */
		/* 82077FECh case    7:*/		if ( !regs.CR[6].gt ) { return 0x82077FF8;  }
		/* 82077FECh case    7:*/		return 0x82077FF0;
		  /* 82077FF0h */ case    8:  		/* mr R3, R31 */
		/* 82077FF0h case    8:*/		regs.R3 = regs.R31;
		/* 82077FF0h case    8:*/		return 0x82077FF4;
		  /* 82077FF4h */ case    9:  		/* bl -16108 */
		/* 82077FF4h case    9:*/		regs.LR = 0x82077FF8; return 0x82074108;
		/* 82077FF4h case    9:*/		return 0x82077FF8;
	}
	return 0x82077FF8;
} // Block from 82077FD0h-82077FF8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82077FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82077FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82077FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82077FF8);
		  /* 82077FF8h */ case    0:  		/* lis R11, 2 */
		/* 82077FF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82077FF8h case    0:*/		return 0x82077FFC;
		  /* 82077FFCh */ case    1:  		/* lis R10, 0 */
		/* 82077FFCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 82077FFCh case    1:*/		return 0x82078000;
		  /* 82078000h */ case    2:  		/* ori R11, R11, 8448 */
		/* 82078000h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2100);
		/* 82078000h case    2:*/		return 0x82078004;
		  /* 82078004h */ case    3:  		/* ori R30, R10, 65535 */
		/* 82078004h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R10,0xFFFF);
		/* 82078004h case    3:*/		return 0x82078008;
		  /* 82078008h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82078008h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078008h case    4:*/		return 0x8207800C;
		  /* 8207800Ch */ case    5:  		/* li R11, 0 */
		/* 8207800Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207800Ch case    5:*/		return 0x82078010;
		  /* 82078010h */ case    6:  		/* li R9, 0 */
		/* 82078010h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82078010h case    6:*/		return 0x82078014;
		  /* 82078014h */ case    7:  		/* li R8, 8851 */
		/* 82078014h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x2293);
		/* 82078014h case    7:*/		return 0x82078018;
		  /* 82078018h */ case    8:  		/* li R7, 0 */
		/* 82078018h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82078018h case    8:*/		return 0x8207801C;
		  /* 8207801Ch */ case    9:  		/* lis R6, 2 */
		/* 8207801Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R6,0x2);
		/* 8207801Ch case    9:*/		return 0x82078020;
		  /* 82078020h */ case   10:  		/* stwu R30, <#[R3 + 4]> */
		/* 82078020h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078020h case   10:*/		return 0x82078024;
		  /* 82078024h */ case   11:  		/* mr R10, R30 */
		/* 82078024h case   11:*/		regs.R10 = regs.R30;
		/* 82078024h case   11:*/		return 0x82078028;
		  /* 82078028h */ case   12:  		/* ori R6, R6, 8708 */
		/* 82078028h case   12:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x2204);
		/* 82078028h case   12:*/		return 0x8207802C;
		  /* 8207802Ch */ case   13:  		/* lis R10, 1 */
		/* 8207802Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 8207802Ch case   13:*/		return 0x82078030;
		  /* 82078030h */ case   14:  		/* lis R5, 1 */
		/* 82078030h case   14:*/		cpu::op::lis<0>(regs,&regs.R5,0x1);
		/* 82078030h case   14:*/		return 0x82078034;
		  /* 82078034h */ case   15:  		/* li R4, 768 */
		/* 82078034h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x300);
		/* 82078034h case   15:*/		return 0x82078038;
		  /* 82078038h */ case   16:  		/* stwu R11, <#[R3 + 4]> */
		/* 82078038h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078038h case   16:*/		return 0x8207803C;
		  /* 8207803Ch */ case   17:  		/* li R29, 8978 */
		/* 8207803Ch case   17:*/		cpu::op::li<0>(regs,&regs.R29,0x2312);
		/* 8207803Ch case   17:*/		return 0x82078040;
		  /* 82078040h */ case   18:  		/* li R11, 8205 */
		/* 82078040h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x200D);
		/* 82078040h case   18:*/		return 0x82078044;
		  /* 82078044h */ case   19:  		/* li R27, 0 */
		/* 82078044h case   19:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82078044h case   19:*/		return 0x82078048;
		  /* 82078048h */ case   20:  		/* mr R28, R30 */
		/* 82078048h case   20:*/		regs.R28 = regs.R30;
		/* 82078048h case   20:*/		return 0x8207804C;
		  /* 8207804Ch */ case   21:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207804Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207804Ch case   21:*/		return 0x82078050;
		  /* 82078050h */ case   22:  		/* stwu R8, <#[R3 + 4]> */
		/* 82078050h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078050h case   22:*/		return 0x82078054;
		  /* 82078054h */ case   23:  		/* stwu R7, <#[R3 + 4]> */
		/* 82078054h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078054h case   23:*/		return 0x82078058;
		  /* 82078058h */ case   24:  		/* stwu R6, <#[R3 + 4]> */
		/* 82078058h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078058h case   24:*/		return 0x8207805C;
		  /* 8207805Ch */ case   25:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207805Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207805Ch case   25:*/		return 0x82078060;
		  /* 82078060h */ case   26:  		/* stwu R5, <#[R3 + 4]> */
		/* 82078060h case   26:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078060h case   26:*/		return 0x82078064;
		  /* 82078064h */ case   27:  		/* stwu R4, <#[R3 + 4]> */
		/* 82078064h case   27:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078064h case   27:*/		return 0x82078068;
		  /* 82078068h */ case   28:  		/* stwu R29, <#[R3 + 4]> */
		/* 82078068h case   28:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078068h case   28:*/		return 0x8207806C;
		  /* 8207806Ch */ case   29:  		/* stwu R30, <#[R3 + 4]> */
		/* 8207806Ch case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207806Ch case   29:*/		return 0x82078070;
		  /* 82078070h */ case   30:  		/* stwu R11, <#[R3 + 4]> */
		/* 82078070h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078070h case   30:*/		return 0x82078074;
		  /* 82078074h */ case   31:  		/* mr R11, R3 */
		/* 82078074h case   31:*/		regs.R11 = regs.R3;
		/* 82078074h case   31:*/		return 0x82078078;
		  /* 82078078h */ case   32:  		/* stwu R27, <#[R11 + 4]> */
		/* 82078078h case   32:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82078078h case   32:*/		return 0x8207807C;
		  /* 8207807Ch */ case   33:  		/* lwz R10, <#[R31 + 56]> */
		/* 8207807Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8207807Ch case   33:*/		return 0x82078080;
		  /* 82078080h */ case   34:  		/* mr R3, R11 */
		/* 82078080h case   34:*/		regs.R3 = regs.R11;
		/* 82078080h case   34:*/		return 0x82078084;
		  /* 82078084h */ case   35:  		/* cmplw CR6, R11, R10 */
		/* 82078084h case   35:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82078084h case   35:*/		return 0x82078088;
		  /* 82078088h */ case   36:  		/* stw R11, <#[R31 + 48]> */
		/* 82078088h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82078088h case   36:*/		return 0x8207808C;
		  /* 8207808Ch */ case   37:  		/* bc 4, CR6_GT, 12 */
		/* 8207808Ch case   37:*/		if ( !regs.CR[6].gt ) { return 0x82078098;  }
		/* 8207808Ch case   37:*/		return 0x82078090;
		  /* 82078090h */ case   38:  		/* mr R3, R31 */
		/* 82078090h case   38:*/		regs.R3 = regs.R31;
		/* 82078090h case   38:*/		return 0x82078094;
		  /* 82078094h */ case   39:  		/* bl -16268 */
		/* 82078094h case   39:*/		regs.LR = 0x82078098; return 0x82074108;
		/* 82078094h case   39:*/		return 0x82078098;
	}
	return 0x82078098;
} // Block from 82077FF8h-82078098h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82078098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078098);
		  /* 82078098h */ case    0:  		/* li R11, 8452 */
		/* 82078098h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2104);
		/* 82078098h case    0:*/		return 0x8207809C;
		  /* 8207809Ch */ case    1:  		/* li R10, 0 */
		/* 8207809Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207809Ch case    1:*/		return 0x820780A0;
		  /* 820780A0h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 820780A0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780A0h case    2:*/		return 0x820780A4;
		  /* 820780A4h */ case    3:  		/* li R11, 8706 */
		/* 820780A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x2202);
		/* 820780A4h case    3:*/		return 0x820780A8;
		  /* 820780A8h */ case    4:  		/* li R9, 8705 */
		/* 820780A8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x2201);
		/* 820780A8h case    4:*/		return 0x820780AC;
		  /* 820780ACh */ case    5:  		/* lis R8, 1 */
		/* 820780ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x1);
		/* 820780ACh case    5:*/		return 0x820780B0;
		  /* 820780B0h */ case    6:  		/* li R7, 8962 */
		/* 820780B0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2302);
		/* 820780B0h case    6:*/		return 0x820780B4;
		  /* 820780B4h */ case    7:  		/* ori R8, R8, 1 */
		/* 820780B4h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820780B4h case    7:*/		return 0x820780B8;
		  /* 820780B8h */ case    8:  		/* stwu R30, <#[R3 + 4]> */
		/* 820780B8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780B8h case    8:*/		return 0x820780BC;
		  /* 820780BCh */ case    9:  		/* li R6, 1 */
		/* 820780BCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820780BCh case    9:*/		return 0x820780C0;
		  /* 820780C0h */ case   10:  		/* li R5, 8704 */
		/* 820780C0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2200);
		/* 820780C0h case   10:*/		return 0x820780C4;
		  /* 820780C4h */ case   11:  		/* li R4, 0 */
		/* 820780C4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820780C4h case   11:*/		return 0x820780C8;
		  /* 820780C8h */ case   12:  		/* li R30, 8712 */
		/* 820780C8h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x2208);
		/* 820780C8h case   12:*/		return 0x820780CC;
		  /* 820780CCh */ case   13:  		/* li R29, 4 */
		/* 820780CCh case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x4);
		/* 820780CCh case   13:*/		return 0x820780D0;
		  /* 820780D0h */ case   14:  		/* stwu R11, <#[R3 + 4]> */
		/* 820780D0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780D0h case   14:*/		return 0x820780D4;
		  /* 820780D4h */ case   15:  		/* li R28, 8707 */
		/* 820780D4h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x2203);
		/* 820780D4h case   15:*/		return 0x820780D8;
		  /* 820780D8h */ case   16:  		/* li R11, 0 */
		/* 820780D8h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820780D8h case   16:*/		return 0x820780DC;
		  /* 820780DCh */ case   17:  		/* li R27, 8578 */
		/* 820780DCh case   17:*/		cpu::op::li<0>(regs,&regs.R27,0x2182);
		/* 820780DCh case   17:*/		return 0x820780E0;
		  /* 820780E0h */ case   18:  		/* li R26, -1 */
		/* 820780E0h case   18:*/		cpu::op::li<0>(regs,&regs.R26,0xFFFFFFFF);
		/* 820780E0h case   18:*/		return 0x820780E4;
		  /* 820780E4h */ case   19:  		/* stwu R10, <#[R3 + 4]> */
		/* 820780E4h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780E4h case   19:*/		return 0x820780E8;
		  /* 820780E8h */ case   20:  		/* stwu R9, <#[R3 + 4]> */
		/* 820780E8h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780E8h case   20:*/		return 0x820780EC;
		  /* 820780ECh */ case   21:  		/* stwu R8, <#[R3 + 4]> */
		/* 820780ECh case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780ECh case   21:*/		return 0x820780F0;
		  /* 820780F0h */ case   22:  		/* stwu R7, <#[R3 + 4]> */
		/* 820780F0h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780F0h case   22:*/		return 0x820780F4;
		  /* 820780F4h */ case   23:  		/* stwu R6, <#[R3 + 4]> */
		/* 820780F4h case   23:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780F4h case   23:*/		return 0x820780F8;
		  /* 820780F8h */ case   24:  		/* stwu R5, <#[R3 + 4]> */
		/* 820780F8h case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780F8h case   24:*/		return 0x820780FC;
		  /* 820780FCh */ case   25:  		/* stwu R4, <#[R3 + 4]> */
		/* 820780FCh case   25:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820780FCh case   25:*/		return 0x82078100;
		  /* 82078100h */ case   26:  		/* stwu R30, <#[R3 + 4]> */
		/* 82078100h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078100h case   26:*/		return 0x82078104;
		  /* 82078104h */ case   27:  		/* stwu R29, <#[R3 + 4]> */
		/* 82078104h case   27:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078104h case   27:*/		return 0x82078108;
		  /* 82078108h */ case   28:  		/* stwu R28, <#[R3 + 4]> */
		/* 82078108h case   28:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078108h case   28:*/		return 0x8207810C;
		  /* 8207810Ch */ case   29:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207810Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207810Ch case   29:*/		return 0x82078110;
		  /* 82078110h */ case   30:  		/* stwu R27, <#[R3 + 4]> */
		/* 82078110h case   30:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078110h case   30:*/		return 0x82078114;
		  /* 82078114h */ case   31:  		/* stwu R26, <#[R3 + 4]> */
		/* 82078114h case   31:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82078114h case   31:*/		return 0x82078118;
		  /* 82078118h */ case   32:  		/* stw R3, <#[R31 + 48]> */
		/* 82078118h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82078118h case   32:*/		return 0x8207811C;
		  /* 8207811Ch */ case   33:  		/* addi R1, R1, 144 */
		/* 8207811Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8207811Ch case   33:*/		return 0x82078120;
		  /* 82078120h */ case   34:  		/* b 102784 */
		/* 82078120h case   34:*/		return 0x820912A0;
		/* 82078120h case   34:*/		return 0x82078124;
		  /* 82078124h */ case   35:  		/* nop */
		/* 82078124h case   35:*/		cpu::op::nop();
		/* 82078124h case   35:*/		return 0x82078128;
	}
	return 0x82078128;
} // Block from 82078098h-82078128h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82078128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078128);
		  /* 82078128h */ case    0:  		/* mfspr R12, LR */
		/* 82078128h case    0:*/		regs.R12 = regs.LR;
		/* 82078128h case    0:*/		return 0x8207812C;
		  /* 8207812Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207812Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207812Ch case    1:*/		return 0x82078130;
		  /* 82078130h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82078130h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078130h case    2:*/		return 0x82078134;
		  /* 82078134h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82078134h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078134h case    3:*/		return 0x82078138;
		  /* 82078138h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 82078138h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82078138h case    4:*/		return 0x8207813C;
		  /* 8207813Ch */ case    5:  		/* mr R30, R3 */
		/* 8207813Ch case    5:*/		regs.R30 = regs.R3;
		/* 8207813Ch case    5:*/		return 0x82078140;
		  /* 82078140h */ case    6:  		/* bl 2051512 */
		/* 82078140h case    6:*/		regs.LR = 0x82078144; return 0x8226CEF8;
		/* 82078140h case    6:*/		return 0x82078144;
		  /* 82078144h */ case    7:  		/* cmpwi CR6, R3, 2 */
		/* 82078144h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82078144h case    7:*/		return 0x82078148;
		  /* 82078148h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 82078148h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82078158;  }
		/* 82078148h case    8:*/		return 0x8207814C;
		  /* 8207814Ch */ case    9:  		/* lis R11, -32256 */
		/* 8207814Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207814Ch case    9:*/		return 0x82078150;
		  /* 82078150h */ case   10:  		/* lwz R11, <#[R11 + 1452]> */
		/* 82078150h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 82078150h case   10:*/		return 0x82078154;
		  /* 82078154h */ case   11:  		/* b 12 */
		/* 82078154h case   11:*/		return 0x82078160;
		/* 82078154h case   11:*/		return 0x82078158;
	}
	return 0x82078158;
} // Block from 82078128h-82078158h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82078158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078158);
		  /* 82078158h */ case    0:  		/* lis R11, -32256 */
		/* 82078158h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82078158h case    0:*/		return 0x8207815C;
		  /* 8207815Ch */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207815Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207815Ch case    1:*/		return 0x82078160;
	}
	return 0x82078160;
} // Block from 82078158h-82078160h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82078160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078160);
		  /* 82078160h */ case    0:  		/* lwz R31, <#[R11]> */
		/* 82078160h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82078160h case    0:*/		return 0x82078164;
		  /* 82078164h */ case    1:  		/* addi R3, R1, 80 */
		/* 82078164h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82078164h case    1:*/		return 0x82078168;
		  /* 82078168h */ case    2:  		/* stw R30, <#[R1 + 88]> */
		/* 82078168h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000058) );
		/* 82078168h case    2:*/		return 0x8207816C;
		  /* 8207816Ch */ case    3:  		/* bl 63556 */
		/* 8207816Ch case    3:*/		regs.LR = 0x82078170; return 0x820879B0;
		/* 8207816Ch case    3:*/		return 0x82078170;
		  /* 82078170h */ case    4:  		/* lis R11, -32256 */
		/* 82078170h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82078170h case    4:*/		return 0x82078174;
		  /* 82078174h */ case    5:  		/* ld R10, <#[R1 + 80]> */
		/* 82078174h case    5:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82078174h case    5:*/		return 0x82078178;
		  /* 82078178h */ case    6:  		/* sradi R10, R10, 10 */
		/* 82078178h case    6:*/		cpu::op::sradi<0,10>(regs,&regs.R10,regs.R10);
		/* 82078178h case    6:*/		return 0x8207817C;
		  /* 8207817Ch */ case    7:  		/* stw R10, <#[R1 + 92]> */
		/* 8207817Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207817Ch case    7:*/		return 0x82078180;
		  /* 82078180h */ case    8:  		/* lwz R11, <#[R11 + 1140]> */
		/* 82078180h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 82078180h case    8:*/		return 0x82078184;
		  /* 82078184h */ case    9:  		/* lwz R10, <#[R31 + 22084]> */
		/* 82078184h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005644) );
		/* 82078184h case    9:*/		return 0x82078188;
		  /* 82078188h */ case   10:  		/* stw R10, <#[R1 + 96]> */
		/* 82078188h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82078188h case   10:*/		return 0x8207818C;
		  /* 8207818Ch */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8207818Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207818Ch case   11:*/		return 0x82078190;
		  /* 82078190h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82078190h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078190h case   12:*/		return 0x82078194;
		  /* 82078194h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 82078194h case   13:*/		if ( regs.CR[6].eq ) { return 0x820781AC;  }
		/* 82078194h case   13:*/		return 0x82078198;
		  /* 82078198h */ case   14:  		/* lwz R11, <#[R11 + 24]> */
		/* 82078198h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82078198h case   14:*/		return 0x8207819C;
		  /* 8207819Ch */ case   15:  		/* addi R4, R1, 88 */
		/* 8207819Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8207819Ch case   15:*/		return 0x820781A0;
		  /* 820781A0h */ case   16:  		/* li R3, 93 */
		/* 820781A0h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x5D);
		/* 820781A0h case   16:*/		return 0x820781A4;
		  /* 820781A4h */ case   17:  		/* mtspr CTR, R11 */
		/* 820781A4h case   17:*/		regs.CTR = regs.R11;
		/* 820781A4h case   17:*/		return 0x820781A8;
		  /* 820781A8h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 820781A8h case   18:*/		if ( 1 ) { regs.LR = 0x820781AC; return (uint32)regs.CTR; }
		/* 820781A8h case   18:*/		return 0x820781AC;
	}
	return 0x820781AC;
} // Block from 82078160h-820781ACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 820781ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820781AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820781AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820781AC);
		  /* 820781ACh */ case    0:  		/* addi R1, R1, 128 */
		/* 820781ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820781ACh case    0:*/		return 0x820781B0;
		  /* 820781B0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820781B0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820781B0h case    1:*/		return 0x820781B4;
		  /* 820781B4h */ case    2:  		/* mtspr LR, R12 */
		/* 820781B4h case    2:*/		regs.LR = regs.R12;
		/* 820781B4h case    2:*/		return 0x820781B8;
		  /* 820781B8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820781B8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820781B8h case    3:*/		return 0x820781BC;
		  /* 820781BCh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820781BCh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820781BCh case    4:*/		return 0x820781C0;
		  /* 820781C0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820781C0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820781C0h case    5:*/		return 0x820781C4;
	}
	return 0x820781C4;
} // Block from 820781ACh-820781C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820781C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820781C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820781C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820781C4);
		  /* 820781C4h */ case    0:  		/* nop */
		/* 820781C4h case    0:*/		cpu::op::nop();
		/* 820781C4h case    0:*/		return 0x820781C8;
	}
	return 0x820781C8;
} // Block from 820781C4h-820781C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820781C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820781C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820781C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820781C8);
		  /* 820781C8h */ case    0:  		/* mfspr R12, LR */
		/* 820781C8h case    0:*/		regs.R12 = regs.LR;
		/* 820781C8h case    0:*/		return 0x820781CC;
		  /* 820781CCh */ case    1:  		/* bl 102544 */
		/* 820781CCh case    1:*/		regs.LR = 0x820781D0; return 0x8209125C;
		/* 820781CCh case    1:*/		return 0x820781D0;
		  /* 820781D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820781D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820781D0h case    2:*/		return 0x820781D4;
		  /* 820781D4h */ case    3:  		/* lwz R11, <#[R3 + 22068]> */
		/* 820781D4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005634) );
		/* 820781D4h case    3:*/		return 0x820781D8;
		  /* 820781D8h */ case    4:  		/* mr R31, R3 */
		/* 820781D8h case    4:*/		regs.R31 = regs.R3;
		/* 820781D8h case    4:*/		return 0x820781DC;
		  /* 820781DCh */ case    5:  		/* lwz R10, <#[R3 + 16968]> */
		/* 820781DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00004248) );
		/* 820781DCh case    5:*/		return 0x820781E0;
		  /* 820781E0h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 820781E0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820781E0h case    6:*/		return 0x820781E4;
		  /* 820781E4h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 820781E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x820781F0;  }
		/* 820781E4h case    7:*/		return 0x820781E8;
		  /* 820781E8h */ case    8:  		/* li R3, 1 */
		/* 820781E8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820781E8h case    8:*/		return 0x820781EC;
		  /* 820781ECh */ case    9:  		/* b 48 */
		/* 820781ECh case    9:*/		return 0x8207821C;
		/* 820781ECh case    9:*/		return 0x820781F0;
	}
	return 0x820781F0;
} // Block from 820781C8h-820781F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820781F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820781F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820781F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820781F0);
		  /* 820781F0h */ case    0:  		/* bl 2051336 */
		/* 820781F0h case    0:*/		regs.LR = 0x820781F4; return 0x8226CEF8;
		/* 820781F0h case    0:*/		return 0x820781F4;
		  /* 820781F4h */ case    1:  		/* cmpwi CR6, R3, 2 */
		/* 820781F4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 820781F4h case    1:*/		return 0x820781F8;
		  /* 820781F8h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 820781F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82078218;  }
		/* 820781F8h case    2:*/		return 0x820781FC;
		  /* 820781FCh */ case    3:  		/* lwz R11, <#[R31 + 22056]> */
		/* 820781FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005628) );
		/* 820781FCh case    3:*/		return 0x82078200;
		  /* 82078200h */ case    4:  		/* cmplwi CR6, R11, 2 */
		/* 82078200h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82078200h case    4:*/		return 0x82078204;
		  /* 82078204h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82078204h case    5:*/		if ( regs.CR[6].eq ) { return 0x82078224;  }
		/* 82078204h case    5:*/		return 0x82078208;
		  /* 82078208h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82078208h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078208h case    6:*/		return 0x8207820C;
		  /* 8207820Ch */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 8207820Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82078218;  }
		/* 8207820Ch case    7:*/		return 0x82078210;
		  /* 82078210h */ case    8:  		/* li R11, 1 */
		/* 82078210h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82078210h case    8:*/		return 0x82078214;
		  /* 82078214h */ case    9:  		/* stw R11, <#[R31 + 22056]> */
		/* 82078214h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005628) );
		/* 82078214h case    9:*/		return 0x82078218;
	}
	return 0x82078218;
} // Block from 820781F0h-82078218h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82078218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078218);
		  /* 82078218h */ case    0:  		/* li R3, 0 */
		/* 82078218h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82078218h case    0:*/		return 0x8207821C;
	}
	return 0x8207821C;
} // Block from 82078218h-8207821Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207821Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207821C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207821C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207821C);
		  /* 8207821Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8207821Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207821Ch case    0:*/		return 0x82078220;
		  /* 82078220h */ case    1:  		/* b 102540 */
		/* 82078220h case    1:*/		return 0x820912AC;
		/* 82078220h case    1:*/		return 0x82078224;
	}
	return 0x82078224;
} // Block from 8207821Ch-82078224h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82078224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078224);
		  /* 82078224h */ case    0:  		/* lwz R10, <#[R31 + 22064]> */
		/* 82078224h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005630) );
		/* 82078224h case    0:*/		return 0x82078228;
		  /* 82078228h */ case    1:  		/* lwz R11, <#[R31 + 22060]> */
		/* 82078228h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000562C) );
		/* 82078228h case    1:*/		return 0x8207822C;
		  /* 8207822Ch */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8207822Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207822Ch case    2:*/		return 0x82078230;
		  /* 82078230h */ case    3:  		/* bc 12, CR6_EQ, -24 */
		/* 82078230h case    3:*/		if ( regs.CR[6].eq ) { return 0x82078218;  }
		/* 82078230h case    3:*/		return 0x82078234;
		  /* 82078234h */ case    4:  		/* lwz R10, <#[R31 + 22048]> */
		/* 82078234h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005620) );
		/* 82078234h case    4:*/		return 0x82078238;
		  /* 82078238h */ case    5:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82078238h case    5:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82078238h case    5:*/		return 0x8207823C;
		  /* 8207823Ch */ case    6:  		/* add R3, R11, R10 */
		/* 8207823Ch case    6:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8207823Ch case    6:*/		return 0x82078240;
		  /* 82078240h */ case    7:  		/* bl -9864 */
		/* 82078240h case    7:*/		regs.LR = 0x82078244; return 0x82075BB8;
		/* 82078240h case    7:*/		return 0x82078244;
		  /* 82078244h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82078244h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078244h case    8:*/		return 0x82078248;
		  /* 82078248h */ case    9:  		/* bc 4, CR0_EQ, -48 */
		/* 82078248h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82078218;  }
		/* 82078248h case    9:*/		return 0x8207824C;
		  /* 8207824Ch */ case   10:  		/* lis R29, -32215 */
		/* 8207824Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8229);
		/* 8207824Ch case   10:*/		return 0x82078250;
		  /* 82078250h */ case   11:  		/* li R5, 480 */
		/* 82078250h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1E0);
		/* 82078250h case   11:*/		return 0x82078254;
		  /* 82078254h */ case   12:  		/* addi R30, R29, -32596 */
		/* 82078254h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0xFFFF80AC);
		/* 82078254h case   12:*/		return 0x82078258;
		  /* 82078258h */ case   13:  		/* addi R3, R30, 4 */
		/* 82078258h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x4);
		/* 82078258h case   13:*/		return 0x8207825C;
		  /* 8207825Ch */ case   14:  		/* addi R4, R30, 484 */
		/* 8207825Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x1E4);
		/* 8207825Ch case   14:*/		return 0x82078260;
		  /* 82078260h */ case   15:  		/* bl 104272 */
		/* 82078260h case   15:*/		regs.LR = 0x82078264; return 0x820919B0;
		/* 82078260h case   15:*/		return 0x82078264;
		  /* 82078264h */ case   16:  		/* lwz R11, <#[R29 - 32596]> */
		/* 82078264h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFF80AC) );
		/* 82078264h case   16:*/		return 0x82078268;
		  /* 82078268h */ case   17:  		/* lwz R10, <#[R31 + 22048]> */
		/* 82078268h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005620) );
		/* 82078268h case   17:*/		return 0x8207826C;
		  /* 8207826Ch */ case   18:  		/* addi R4, R30, 484 */
		/* 8207826Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x1E4);
		/* 8207826Ch case   18:*/		return 0x82078270;
		  /* 82078270h */ case   19:  		/* li R6, 0 */
		/* 82078270h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82078270h case   19:*/		return 0x82078274;
		  /* 82078274h */ case   20:  		/* li R5, 0 */
		/* 82078274h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82078274h case   20:*/		return 0x82078278;
		  /* 82078278h */ case   21:  		/* stw R11, <#[R30 - 4]> */
		/* 82078278h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82078278h case   21:*/		return 0x8207827C;
		  /* 8207827Ch */ case   22:  		/* lwz R11, <#[R31 + 22060]> */
		/* 8207827Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000562C) );
		/* 8207827Ch case   22:*/		return 0x82078280;
		  /* 82078280h */ case   23:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82078280h case   23:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82078280h case   23:*/		return 0x82078284;
		  /* 82078284h */ case   24:  		/* add R3, R11, R10 */
		/* 82078284h case   24:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82078284h case   24:*/		return 0x82078288;
		  /* 82078288h */ case   25:  		/* bl -4320 */
		/* 82078288h case   25:*/		regs.LR = 0x8207828C; return 0x820771A8;
		/* 82078288h case   25:*/		return 0x8207828C;
		  /* 8207828Ch */ case   26:  		/* lwz R11, <#[R31 + 22060]> */
		/* 8207828Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000562C) );
		/* 8207828Ch case   26:*/		return 0x82078290;
		  /* 82078290h */ case   27:  		/* lwz R10, <#[R31 + 22052]> */
		/* 82078290h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005624) );
		/* 82078290h case   27:*/		return 0x82078294;
		  /* 82078294h */ case   28:  		/* rlwinm R9, R11, 3, 0, 28 */
		/* 82078294h case   28:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R11);
		/* 82078294h case   28:*/		return 0x82078298;
		  /* 82078298h */ case   29:  		/* cmplwi CR6, R11, 3 */
		/* 82078298h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82078298h case   29:*/		return 0x8207829C;
		  /* 8207829Ch */ case   30:  		/* add R10, R10, R9 */
		/* 8207829Ch case   30:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8207829Ch case   30:*/		return 0x820782A0;
		  /* 820782A0h */ case   31:  		/* lwz R9, <#[R10 + 4]> */
		/* 820782A0h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820782A0h case   31:*/		return 0x820782A4;
		  /* 820782A4h */ case   32:  		/* lwz R10, <#[R10]> */
		/* 820782A4h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 820782A4h case   32:*/		return 0x820782A8;
		  /* 820782A8h */ case   33:  		/* subf R10, R10, R9 */
		/* 820782A8h case   33:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820782A8h case   33:*/		return 0x820782AC;
		  /* 820782ACh */ case   34:  		/* stw R10, <#[R29 - 32596]> */
		/* 820782ACh case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0xFFFF80AC) );
		/* 820782ACh case   34:*/		return 0x820782B0;
		  /* 820782B0h */ case   35:  		/* bc 4, CR6_EQ, 12 */
		/* 820782B0h case   35:*/		if ( !regs.CR[6].eq ) { return 0x820782BC;  }
		/* 820782B0h case   35:*/		return 0x820782B4;
		  /* 820782B4h */ case   36:  		/* li R11, 0 */
		/* 820782B4h case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820782B4h case   36:*/		return 0x820782B8;
		  /* 820782B8h */ case   37:  		/* b 8 */
		/* 820782B8h case   37:*/		return 0x820782C0;
		/* 820782B8h case   37:*/		return 0x820782BC;
	}
	return 0x820782BC;
} // Block from 82078224h-820782BCh (38 instructions)

//////////////////////////////////////////////////////
// Block at 820782BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820782BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820782BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820782BC);
		  /* 820782BCh */ case    0:  		/* addi R11, R11, 1 */
		/* 820782BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820782BCh case    0:*/		return 0x820782C0;
	}
	return 0x820782C0;
} // Block from 820782BCh-820782C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820782C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820782C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820782C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820782C0);
		  /* 820782C0h */ case    0:  		/* lwz R10, <#[R31 + 16968]> */
		/* 820782C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00004248) );
		/* 820782C0h case    0:*/		return 0x820782C4;
		  /* 820782C4h */ case    1:  		/* li R3, 1 */
		/* 820782C4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820782C4h case    1:*/		return 0x820782C8;
		  /* 820782C8h */ case    2:  		/* stw R11, <#[R31 + 22060]> */
		/* 820782C8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000562C) );
		/* 820782C8h case    2:*/		return 0x820782CC;
		  /* 820782CCh */ case    3:  		/* stw R10, <#[R31 + 22068]> */
		/* 820782CCh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005634) );
		/* 820782CCh case    3:*/		return 0x820782D0;
	}
	return 0x820782D0;
} // Block from 820782C0h-820782D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820782D0h
// Function '??1CBlocker@D3D@@QAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820782D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820782D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820782D0);
		  /* 820782D0h */ case    0:  		/* b -180 */
		/* 820782D0h case    0:*/		return 0x8207821C;
		/* 820782D0h case    0:*/		return 0x820782D4;
		  /* 820782D4h */ case    1:  		/* nop */
		/* 820782D4h case    1:*/		cpu::op::nop();
		/* 820782D4h case    1:*/		return 0x820782D8;
	}
	return 0x820782D8;
} // Block from 820782D0h-820782D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820782D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820782D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820782D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820782D8);
		  /* 820782D8h */ case    0:  		/* mfspr R12, LR */
		/* 820782D8h case    0:*/		regs.R12 = regs.LR;
		/* 820782D8h case    0:*/		return 0x820782DC;
		  /* 820782DCh */ case    1:  		/* bl 102264 */
		/* 820782DCh case    1:*/		regs.LR = 0x820782E0; return 0x82091254;
		/* 820782DCh case    1:*/		return 0x820782E0;
		  /* 820782E0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 820782E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 820782E0h case    2:*/		return 0x820782E4;
		  /* 820782E4h */ case    3:  		/* lwz R8, <#[R3 + 21992]> */
		/* 820782E4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x000055E8) );
		/* 820782E4h case    3:*/		return 0x820782E8;
		  /* 820782E8h */ case    4:  		/* li R10, 8 */
		/* 820782E8h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 820782E8h case    4:*/		return 0x820782EC;
		  /* 820782ECh */ case    5:  		/* addi R11, R1, 96 */
		/* 820782ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 820782ECh case    5:*/		return 0x820782F0;
		  /* 820782F0h */ case    6:  		/* lwz R7, <#[R3 + 21988]> */
		/* 820782F0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x000055E4) );
		/* 820782F0h case    6:*/		return 0x820782F4;
		  /* 820782F4h */ case    7:  		/* rldicr R6, R8, 32, 63 */
		/* 820782F4h case    7:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R6,regs.R8);
		/* 820782F4h case    7:*/		return 0x820782F8;
		  /* 820782F8h */ case    8:  		/* addi R8, R11, -8 */
		/* 820782F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFF8);
		/* 820782F8h case    8:*/		return 0x820782FC;
		  /* 820782FCh */ case    9:  		/* or R11, R6, R7 */
		/* 820782FCh case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R6,regs.R7);
		/* 820782FCh case    9:*/		return 0x82078300;
		  /* 82078300h */ case   10:  		/* mr R9, R3 */
		/* 82078300h case   10:*/		regs.R9 = regs.R3;
		/* 82078300h case   10:*/		return 0x82078304;
		  /* 82078304h */ case   11:  		/* mtspr CTR, R10 */
		/* 82078304h case   11:*/		regs.CTR = regs.R10;
		/* 82078304h case   11:*/		return 0x82078308;
		  /* 82078308h */ case   12:  		/* li R7, 0 */
		/* 82078308h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82078308h case   12:*/		return 0x8207830C;
		  /* 8207830Ch */ case   13:  		/* stdu R7, <#[R8 + 8]> */
		/* 8207830Ch case   13:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R8 + 0x00000008) );
		regs.R8 = (uint32)(regs.R8 + 0x00000008);
		/* 8207830Ch case   13:*/		return 0x82078310;
		  /* 82078310h */ case   14:  		/* bc 16, CR0_LT, -4 */
		/* 82078310h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207830C;  }
		/* 82078310h case   14:*/		return 0x82078314;
		  /* 82078314h */ case   15:  		/* lwz R10, <#[R1 + 136]> */
		/* 82078314h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 82078314h case   15:*/		return 0x82078318;
		  /* 82078318h */ case   16:  		/* sradi R7, R11, 32 */
		/* 82078318h case   16:*/		cpu::op::sradi<0,32>(regs,&regs.R7,regs.R11);
		/* 82078318h case   16:*/		return 0x8207831C;
		  /* 8207831Ch */ case   17:  		/* mr R5, R11 */
		/* 8207831Ch case   17:*/		regs.R5 = regs.R11;
		/* 8207831Ch case   17:*/		return 0x82078320;
		  /* 82078320h */ case   18:  		/* lwz R11, <#[R9 + 22032]> */
		/* 82078320h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00005610) );
		/* 82078320h case   18:*/		return 0x82078324;
		  /* 82078324h */ case   19:  		/* ori R6, R10, 65535 */
		/* 82078324h case   19:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0xFFFF);
		/* 82078324h case   19:*/		return 0x82078328;
		  /* 82078328h */ case   20:  		/* lwz R4, <#[R9 + 21984]> */
		/* 82078328h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x000055E0) );
		/* 82078328h case   20:*/		return 0x8207832C;
		  /* 8207832Ch */ case   21:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 8207832Ch case   21:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 8207832Ch case   21:*/		return 0x82078330;
		  /* 82078330h */ case   22:  		/* lwz R3, <#[R9 + 16968]> */
		/* 82078330h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x00004248) );
		/* 82078330h case   22:*/		return 0x82078334;
		  /* 82078334h */ case   23:  		/* lwz R31, <#[R9 + 22024]> */
		/* 82078334h case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R9 + 0x00005608) );
		/* 82078334h case   23:*/		return 0x82078338;
		  /* 82078338h */ case   24:  		/* lfs FR0, <#[R9 + 22000]> */
		/* 82078338h case   24:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + 0x000055F0) );
		/* 82078338h case   24:*/		return 0x8207833C;
		  /* 8207833Ch */ case   25:  		/* addi R10, R10, 16 */
		/* 8207833Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8207833Ch case   25:*/		return 0x82078340;
		  /* 82078340h */ case   26:  		/* lwz R30, <#[R9 + 22028]> */
		/* 82078340h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R9 + 0x0000560C) );
		/* 82078340h case   26:*/		return 0x82078344;
		  /* 82078344h */ case   27:  		/* lwz R29, <#[R9 + 23760]> */
		/* 82078344h case   27:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + 0x00005CD0) );
		/* 82078344h case   27:*/		return 0x82078348;
		  /* 82078348h */ case   28:  		/* lfs FR13, <#[R9 + 21996]> */
		/* 82078348h case   28:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x000055EC) );
		/* 82078348h case   28:*/		return 0x8207834C;
		  /* 8207834Ch */ case   29:  		/* rlwinm R27, R10, 2, 0, 29 */
		/* 8207834Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R10);
		/* 8207834Ch case   29:*/		return 0x82078350;
		  /* 82078350h */ case   30:  		/* lwz R28, <#[R9 + 11024]> */
		/* 82078350h case   30:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R9 + 0x00002B10) );
		/* 82078350h case   30:*/		return 0x82078354;
		  /* 82078354h */ case   31:  		/* addi R10, R11, 1 */
		/* 82078354h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 82078354h case   31:*/		return 0x82078358;
		  /* 82078358h */ case   32:  		/* stw R7, <#[R1 + 100]> */
		/* 82078358h case   32:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000064) );
		/* 82078358h case   32:*/		return 0x8207835C;
		  /* 8207835Ch */ case   33:  		/* stfs FR0, <#[R1 + 112]> */
		/* 8207835Ch case   33:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 8207835Ch case   33:*/		return 0x82078360;
		  /* 82078360h */ case   34:  		/* stw R6, <#[R1 + 136]> */
		/* 82078360h case   34:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000088) );
		/* 82078360h case   34:*/		return 0x82078364;
		  /* 82078364h */ case   35:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82078364h case   35:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82078364h case   35:*/		return 0x82078368;
		  /* 82078368h */ case   36:  		/* stfs FR13, <#[R1 + 116]> */
		/* 82078368h case   36:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000074) );
		/* 82078368h case   36:*/		return 0x8207836C;
		  /* 8207836Ch */ case   37:  		/* stw R4, <#[R1 + 108]> */
		/* 8207836Ch case   37:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207836Ch case   37:*/		return 0x82078370;
		  /* 82078370h */ case   38:  		/* addi R8, R11, -1 */
		/* 82078370h case   38:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 82078370h case   38:*/		return 0x82078374;
		  /* 82078374h */ case   39:  		/* addi R10, R10, 16 */
		/* 82078374h case   39:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82078374h case   39:*/		return 0x82078378;
		  /* 82078378h */ case   40:  		/* stw R3, <#[R1 + 120]> */
		/* 82078378h case   40:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000078) );
		/* 82078378h case   40:*/		return 0x8207837C;
		  /* 8207837Ch */ case   41:  		/* stw R31, <#[R1 + 124]> */
		/* 8207837Ch case   41:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207837Ch case   41:*/		return 0x82078380;
		  /* 82078380h */ case   42:  		/* rlwinm R8, R8, 0, 29, 31 */
		/* 82078380h case   42:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R8);
		/* 82078380h case   42:*/		return 0x82078384;
		  /* 82078384h */ case   43:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82078384h case   43:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82078384h case   43:*/		return 0x82078388;
		  /* 82078388h */ case   44:  		/* stw R30, <#[R1 + 128]> */
		/* 82078388h case   44:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000080) );
		/* 82078388h case   44:*/		return 0x8207838C;
		  /* 8207838Ch */ case   45:  		/* stw R5, <#[R1 + 104]> */
		/* 8207838Ch case   45:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000068) );
		/* 8207838Ch case   45:*/		return 0x82078390;
		  /* 82078390h */ case   46:  		/* addi R8, R8, 16 */
		/* 82078390h case   46:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x10);
		/* 82078390h case   46:*/		return 0x82078394;
		  /* 82078394h */ case   47:  		/* stw R29, <#[R1 + 132]> */
		/* 82078394h case   47:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000084) );
		/* 82078394h case   47:*/		return 0x82078398;
	}
	return 0x82078398;
} // Block from 820782D8h-82078398h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82078398h
// Function '?Check@CBlocker@D3D@@QAAHXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078398);
		  /* 82078398h */ case    0:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82078398h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82078398h case    0:*/		return 0x8207839C;
		  /* 8207839Ch */ case    1:  		/* lwbrx R7, <#[R27 + R28]> */
		/* 8207839Ch case    1:*/		cpu::mem::lwbrx( regs, &regs.R7, (uint32)(regs.R27 + regs.R28 + 0x00000000) );
		/* 8207839Ch case    1:*/		return 0x820783A0;
		  /* 820783A0h */ case    2:  		/* lwbrx R10, <#[R10 + R28]> */
		/* 820783A0h case    2:*/		cpu::mem::lwbrx( regs, &regs.R10, (uint32)(regs.R10 + regs.R28 + 0x00000000) );
		/* 820783A0h case    2:*/		return 0x820783A4;
		  /* 820783A4h */ case    3:  		/* lwbrx R5, <#[R8 + R28]> */
		/* 820783A4h case    3:*/		cpu::mem::lwbrx( regs, &regs.R5, (uint32)(regs.R8 + regs.R28 + 0x00000000) );
		/* 820783A4h case    3:*/		return 0x820783A8;
		  /* 820783A8h */ case    4:  		/* mr R8, R7 */
		/* 820783A8h case    4:*/		regs.R8 = regs.R7;
		/* 820783A8h case    4:*/		return 0x820783AC;
		  /* 820783ACh */ case    5:  		/* mr R7, R5 */
		/* 820783ACh case    5:*/		regs.R7 = regs.R5;
		/* 820783ACh case    5:*/		return 0x820783B0;
		  /* 820783B0h */ case    6:  		/* cmpldi CR6, R10, 0 */
		/* 820783B0h case    6:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820783B0h case    6:*/		return 0x820783B4;
		  /* 820783B4h */ case    7:  		/* bc 12, CR6_EQ, 80 */
		/* 820783B4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82078404;  }
		/* 820783B4h case    7:*/		return 0x820783B8;
		  /* 820783B8h */ case    8:  		/* addi R11, R11, 2 */
		/* 820783B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 820783B8h case    8:*/		return 0x820783BC;
		  /* 820783BCh */ case    9:  		/* cmpldi CR6, R8, 0 */
		/* 820783BCh case    9:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 820783BCh case    9:*/		return 0x820783C0;
		  /* 820783C0h */ case   10:  		/* stw R11, <#[R9 + 22032]> */
		/* 820783C0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00005610) );
		/* 820783C0h case   10:*/		return 0x820783C4;
		  /* 820783C4h */ case   11:  		/* bc 12, CR6_EQ, 64 */
		/* 820783C4h case   11:*/		if ( regs.CR[6].eq ) { return 0x82078404;  }
		/* 820783C4h case   11:*/		return 0x820783C8;
		  /* 820783C8h */ case   12:  		/* cmpldi CR6, R5, 0 */
		/* 820783C8h case   12:*/		cpu::op::cmpldi<6>(regs,regs.R5,0x00000000);
		/* 820783C8h case   12:*/		return 0x820783CC;
		  /* 820783CCh */ case   13:  		/* bc 12, CR6_EQ, 56 */
		/* 820783CCh case   13:*/		if ( regs.CR[6].eq ) { return 0x82078404;  }
		/* 820783CCh case   13:*/		return 0x820783D0;
		  /* 820783D0h */ case   14:  		/* li R11, 1 */
		/* 820783D0h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820783D0h case   14:*/		return 0x820783D4;
		  /* 820783D4h */ case   15:  		/* cmpld CR6, R8, R5 */
		/* 820783D4h case   15:*/		cpu::op::cmpld<6>(regs,regs.R8,regs.R5);
		/* 820783D4h case   15:*/		return 0x820783D8;
		  /* 820783D8h */ case   16:  		/* rldicr R11, R11, 32, 63 */
		/* 820783D8h case   16:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R11,regs.R11);
		/* 820783D8h case   16:*/		return 0x820783DC;
		  /* 820783DCh */ case   17:  		/* bc 12, CR6_GT, 8 */
		/* 820783DCh case   17:*/		if ( regs.CR[6].gt ) { return 0x820783E4;  }
		/* 820783DCh case   17:*/		return 0x820783E0;
		  /* 820783E0h */ case   18:  		/* add R8, R8, R11 */
		/* 820783E0h case   18:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 820783E0h case   18:*/		return 0x820783E4;
	}
	return 0x820783E4;
} // Block from 82078398h-820783E4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820783E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820783E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820783E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820783E4);
		  /* 820783E4h */ case    0:  		/* cmpld CR6, R10, R8 */
		/* 820783E4h case    0:*/		cpu::op::cmpld<6>(regs,regs.R10,regs.R8);
		/* 820783E4h case    0:*/		return 0x820783E8;
		  /* 820783E8h */ case    1:  		/* bc 12, CR6_GT, 8 */
		/* 820783E8h case    1:*/		if ( regs.CR[6].gt ) { return 0x820783F0;  }
		/* 820783E8h case    1:*/		return 0x820783EC;
		  /* 820783ECh */ case    2:  		/* add R10, R10, R11 */
		/* 820783ECh case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 820783ECh case    2:*/		return 0x820783F0;
	}
	return 0x820783F0;
} // Block from 820783E4h-820783F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820783F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820783F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820783F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820783F0);
		  /* 820783F0h */ case    0:  		/* subf R4, R7, R10 */
		/* 820783F0h case    0:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R7,regs.R10);
		/* 820783F0h case    0:*/		return 0x820783F4;
		  /* 820783F4h */ case    1:  		/* subf R3, R8, R10 */
		/* 820783F4h case    1:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R8,regs.R10);
		/* 820783F4h case    1:*/		return 0x820783F8;
		  /* 820783F8h */ case    2:  		/* bl -2368 */
		/* 820783F8h case    2:*/		regs.LR = 0x820783FC; return 0x82077AB8;
		/* 820783F8h case    2:*/		return 0x820783FC;
		  /* 820783FCh */ case    3:  		/* rlwimi R3, R6, 0, 0, 15 */
		/* 820783FCh case    3:*/		cpu::op::rlwimi<0,0,0,15>(regs,&regs.R3,regs.R6);
		/* 820783FCh case    3:*/		return 0x82078400;
		  /* 82078400h */ case    4:  		/* stw R3, <#[R1 + 136]> */
		/* 82078400h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000088) );
		/* 82078400h case    4:*/		return 0x82078404;
	}
	return 0x82078404;
} // Block from 820783F0h-82078404h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82078404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078404);
		  /* 82078404h */ case    0:  		/* mr R3, R9 */
		/* 82078404h case    0:*/		regs.R3 = regs.R9;
		/* 82078404h case    0:*/		return 0x82078408;
		  /* 82078408h */ case    1:  		/* bl -576 */
		/* 82078408h case    1:*/		regs.LR = 0x8207840C; return 0x820781C8;
		/* 82078408h case    1:*/		return 0x8207840C;
		  /* 8207840Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8207840Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207840Ch case    2:*/		return 0x82078410;
		  /* 82078410h */ case    3:  		/* bc 12, CR0_EQ, 724 */
		/* 82078410h case    3:*/		if ( regs.CR[0].eq ) { return 0x820786E4;  }
		/* 82078410h case    3:*/		return 0x82078414;
		  /* 82078414h */ case    4:  		/* lis R11, -32215 */
		/* 82078414h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078414h case    4:*/		return 0x82078418;
		  /* 82078418h */ case    5:  		/* li R10, 0 */
		/* 82078418h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82078418h case    5:*/		return 0x8207841C;
		  /* 8207841Ch */ case    6:  		/* addi R9, R11, -32596 */
		/* 8207841Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFF80AC);
		/* 8207841Ch case    6:*/		return 0x82078420;
		  /* 82078420h */ case    7:  		/* stw R10, <#[R1 + 80]> */
		/* 82078420h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82078420h case    7:*/		return 0x82078424;
		  /* 82078424h */ case    8:  		/* lwz R11, <#[R11 - 32596]> */
		/* 82078424h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF80AC) );
		/* 82078424h case    8:*/		return 0x82078428;
		  /* 82078428h */ case    9:  		/* ld R10, <#[R9 + 4]> */
		/* 82078428h case    9:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 82078428h case    9:*/		return 0x8207842C;
		  /* 8207842Ch */ case   10:  		/* ld R8, <#[R9 + 484]> */
		/* 8207842Ch case   10:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R9 + 0x000001E4) );
		/* 8207842Ch case   10:*/		return 0x82078430;
		  /* 82078430h */ case   11:  		/* ld R7, <#[R9 + 12]> */
		/* 82078430h case   11:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 82078430h case   11:*/		return 0x82078434;
		  /* 82078434h */ case   12:  		/* ld R6, <#[R9 + 492]> */
		/* 82078434h case   12:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + 0x000001EC) );
		/* 82078434h case   12:*/		return 0x82078438;
		  /* 82078438h */ case   13:  		/* subf R8, R10, R8 */
		/* 82078438h case   13:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 82078438h case   13:*/		return 0x8207843C;
		  /* 8207843Ch */ case   14:  		/* stw R11, <#[R1 + 84]> */
		/* 8207843Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207843Ch case   14:*/		return 0x82078440;
		  /* 82078440h */ case   15:  		/* subf R7, R7, R6 */
		/* 82078440h case   15:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82078440h case   15:*/		return 0x82078444;
		  /* 82078444h */ case   16:  		/* ld R11, <#[R1 + 80]> */
		/* 82078444h case   16:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82078444h case   16:*/		return 0x82078448;
		  /* 82078448h */ case   17:  		/* mr R4, R8 */
		/* 82078448h case   17:*/		regs.R4 = regs.R8;
		/* 82078448h case   17:*/		return 0x8207844C;
		  /* 8207844Ch */ case   18:  		/* subf R3, R11, R7 */
		/* 8207844Ch case   18:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R7);
		/* 8207844Ch case   18:*/		return 0x82078450;
		  /* 82078450h */ case   19:  		/* bl -2456 */
		/* 82078450h case   19:*/		regs.LR = 0x82078454; return 0x82077AB8;
		/* 82078450h case   19:*/		return 0x82078454;
		  /* 82078454h */ case   20:  		/* lwz R11, <#[R1 + 136]> */
		/* 82078454h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82078454h case   20:*/		return 0x82078458;
		  /* 82078458h */ case   21:  		/* rlwimi R11, R3, 16, 0, 15 */
		/* 82078458h case   21:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R3);
		/* 82078458h case   21:*/		return 0x8207845C;
		  /* 8207845Ch */ case   22:  		/* mr R3, R7 */
		/* 8207845Ch case   22:*/		regs.R3 = regs.R7;
		/* 8207845Ch case   22:*/		return 0x82078460;
		  /* 82078460h */ case   23:  		/* stw R11, <#[R1 + 136]> */
		/* 82078460h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82078460h case   23:*/		return 0x82078464;
		  /* 82078464h */ case   24:  		/* bl -2476 */
		/* 82078464h case   24:*/		regs.LR = 0x82078468; return 0x82077AB8;
		/* 82078464h case   24:*/		return 0x82078468;
		  /* 82078468h */ case   25:  		/* ld R11, <#[R9 + 124]> */
		/* 82078468h case   25:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R9 + 0x0000007C) );
		/* 82078468h case   25:*/		return 0x8207846C;
		  /* 8207846Ch */ case   26:  		/* ld R10, <#[R9 + 604]> */
		/* 8207846Ch case   26:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x0000025C) );
		/* 8207846Ch case   26:*/		return 0x82078470;
	}
	return 0x82078470;
} // Block from 82078404h-82078470h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82078470h
// Function '?InitializeAsyncResources@D3D@@YAHPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078470);
		  /* 82078470h */ case    0:  		/* mr R30, R3 */
		/* 82078470h case    0:*/		regs.R30 = regs.R3;
		/* 82078470h case    0:*/		return 0x82078474;
		  /* 82078474h */ case    1:  		/* ld R7, <#[R9 + 132]> */
		/* 82078474h case    1:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x00000084) );
		/* 82078474h case    1:*/		return 0x82078478;
		  /* 82078478h */ case    2:  		/* ld R6, <#[R9 + 612]> */
		/* 82078478h case    2:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + 0x00000264) );
		/* 82078478h case    2:*/		return 0x8207847C;
		  /* 8207847Ch */ case    3:  		/* subf R29, R11, R10 */
		/* 8207847Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8207847Ch case    3:*/		return 0x82078480;
		  /* 82078480h */ case    4:  		/* mr R4, R29 */
		/* 82078480h case    4:*/		regs.R4 = regs.R29;
		/* 82078480h case    4:*/		return 0x82078484;
		  /* 82078484h */ case    5:  		/* subf R3, R7, R6 */
		/* 82078484h case    5:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R7,regs.R6);
		/* 82078484h case    5:*/		return 0x82078488;
		  /* 82078488h */ case    6:  		/* bl -2512 */
		/* 82078488h case    6:*/		regs.LR = 0x8207848C; return 0x82077AB8;
		/* 82078488h case    6:*/		return 0x8207848C;
		  /* 8207848Ch */ case    7:  		/* ld R5, <#[R9 + 620]> */
		/* 8207848Ch case    7:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R9 + 0x0000026C) );
		/* 8207848Ch case    7:*/		return 0x82078490;
		  /* 82078490h */ case    8:  		/* ld R31, <#[R9 + 140]> */
		/* 82078490h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R9 + 0x0000008C) );
		/* 82078490h case    8:*/		return 0x82078494;
		  /* 82078494h */ case    9:  		/* rlwimi R30, R3, 16, 0, 15 */
		/* 82078494h case    9:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R30,regs.R3);
		/* 82078494h case    9:*/		return 0x82078498;
		  /* 82078498h */ case   10:  		/* subf R11, R5, R29 */
		/* 82078498h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R29);
		/* 82078498h case   10:*/		return 0x8207849C;
		  /* 8207849Ch */ case   11:  		/* stw R30, <#[R1 + 140]> */
		/* 8207849Ch case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207849Ch case   11:*/		return 0x820784A0;
		  /* 820784A0h */ case   12:  		/* subf R11, R6, R11 */
		/* 820784A0h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 820784A0h case   12:*/		return 0x820784A4;
		  /* 820784A4h */ case   13:  		/* add R11, R11, R31 */
		/* 820784A4h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 820784A4h case   13:*/		return 0x820784A8;
		  /* 820784A8h */ case   14:  		/* add R3, R11, R7 */
		/* 820784A8h case   14:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R7);
		/* 820784A8h case   14:*/		return 0x820784AC;
		  /* 820784ACh */ case   15:  		/* bl -2548 */
		/* 820784ACh case   15:*/		regs.LR = 0x820784B0; return 0x82077AB8;
		/* 820784ACh case   15:*/		return 0x820784B0;
		  /* 820784B0h */ case   16:  		/* mr R6, R3 */
		/* 820784B0h case   16:*/		regs.R6 = regs.R3;
		/* 820784B0h case   16:*/		return 0x820784B4;
		  /* 820784B4h */ case   17:  		/* subf R3, R31, R5 */
		/* 820784B4h case   17:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R31,regs.R5);
		/* 820784B4h case   17:*/		return 0x820784B8;
		  /* 820784B8h */ case   18:  		/* bl -2560 */
		/* 820784B8h case   18:*/		regs.LR = 0x820784BC; return 0x82077AB8;
		/* 820784B8h case   18:*/		return 0x820784BC;
		  /* 820784BCh */ case   19:  		/* ld R11, <#[R9 + 444]> */
		/* 820784BCh case   19:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R9 + 0x000001BC) );
		/* 820784BCh case   19:*/		return 0x820784C0;
		  /* 820784C0h */ case   20:  		/* ld R10, <#[R9 + 924]> */
		/* 820784C0h case   20:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x0000039C) );
		/* 820784C0h case   20:*/		return 0x820784C4;
		  /* 820784C4h */ case   21:  		/* rlwimi R6, R3, 16, 0, 15 */
		/* 820784C4h case   21:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R6,regs.R3);
		/* 820784C4h case   21:*/		return 0x820784C8;
		  /* 820784C8h */ case   22:  		/* ld R7, <#[R9 + 436]> */
		/* 820784C8h case   22:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x000001B4) );
		/* 820784C8h case   22:*/		return 0x820784CC;
		  /* 820784CCh */ case   23:  		/* lis R5, 0 */
		/* 820784CCh case   23:*/		cpu::op::lis<0>(regs,&regs.R5,0x0);
		/* 820784CCh case   23:*/		return 0x820784D0;
		  /* 820784D0h */ case   24:  		/* subf R10, R11, R10 */
		/* 820784D0h case   24:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 820784D0h case   24:*/		return 0x820784D4;
		  /* 820784D4h */ case   25:  		/* ld R11, <#[R9 + 916]> */
		/* 820784D4h case   25:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R9 + 0x00000394) );
		/* 820784D4h case   25:*/		return 0x820784D8;
		  /* 820784D8h */ case   26:  		/* lis R3, 0 */
		/* 820784D8h case   26:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 820784D8h case   26:*/		return 0x820784DC;
		  /* 820784DCh */ case   27:  		/* stw R6, <#[R1 + 144]> */
		/* 820784DCh case   27:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000090) );
		/* 820784DCh case   27:*/		return 0x820784E0;
		  /* 820784E0h */ case   28:  		/* subf R10, R7, R10 */
		/* 820784E0h case   28:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 820784E0h case   28:*/		return 0x820784E4;
		  /* 820784E4h */ case   29:  		/* ori R4, R5, 65535 */
		/* 820784E4h case   29:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R5,0xFFFF);
		/* 820784E4h case   29:*/		return 0x820784E8;
		  /* 820784E8h */ case   30:  		/* add R11, R10, R11 */
		/* 820784E8h case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820784E8h case   30:*/		return 0x820784EC;
		  /* 820784ECh */ case   31:  		/* ori R5, R3, 43689 */
		/* 820784ECh case   31:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R3,0xAAA9);
		/* 820784ECh case   31:*/		return 0x820784F0;
		  /* 820784F0h */ case   32:  		/* cmpdi CR6, R11, 0 */
		/* 820784F0h case   32:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 820784F0h case   32:*/		return 0x820784F4;
		  /* 820784F4h */ case   33:  		/* bc 4, CR6_LT, 12 */
		/* 820784F4h case   33:*/		if ( !regs.CR[6].lt ) { return 0x82078500;  }
		/* 820784F4h case   33:*/		return 0x820784F8;
		  /* 820784F8h */ case   34:  		/* li R11, 0 */
		/* 820784F8h case   34:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820784F8h case   34:*/		return 0x820784FC;
		  /* 820784FCh */ case   35:  		/* b 52 */
		/* 820784FCh case   35:*/		return 0x82078530;
		/* 820784FCh case   35:*/		return 0x82078500;
	}
	return 0x82078500;
} // Block from 82078470h-82078500h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82078500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078500);
		  /* 82078500h */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 82078500h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 82078500h case    0:*/		return 0x82078504;
		  /* 82078504h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82078504h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82078510;  }
		/* 82078504h case    1:*/		return 0x82078508;
		  /* 82078508h */ case    2:  		/* mr R11, R4 */
		/* 82078508h case    2:*/		regs.R11 = regs.R4;
		/* 82078508h case    2:*/		return 0x8207850C;
		  /* 8207850Ch */ case    3:  		/* b 36 */
		/* 8207850Ch case    3:*/		return 0x82078530;
		/* 8207850Ch case    3:*/		return 0x82078510;
	}
	return 0x82078510;
} // Block from 82078500h-82078510h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82078510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078510);
		  /* 82078510h */ case    0:  		/* mulld R10, R11, R5 */
		/* 82078510h case    0:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R11,regs.R5);
		/* 82078510h case    0:*/		return 0x82078514;
		  /* 82078514h */ case    1:  		/* rldicl R11, R10, 1, 0 */
		/* 82078514h case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R11,regs.R10);
		/* 82078514h case    1:*/		return 0x82078518;
		  /* 82078518h */ case    2:  		/* divd R10, R10, R8 */
		/* 82078518h case    2:*/		cpu::op::divd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82078518h case    2:*/		return 0x8207851C;
		  /* 8207851Ch */ case    3:  		/* addi R7, R11, -1 */
		/* 8207851Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 8207851Ch case    3:*/		return 0x82078520;
		  /* 82078520h */ case    4:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82078520h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82078520h case    4:*/		return 0x82078524;
		  /* 82078524h */ case    5:  		/* andc R10, R8, R7 */
		/* 82078524h case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R7);
		/* 82078524h case    5:*/		return 0x82078528;
		  /* 82078528h */ case    6:  		/* tdi 6, R8, 0 */
		/* 82078528h case    6:*/		cpu::op::td<6>(regs, 0x82078528, regs.R8, 0x00000000);
		/* 82078528h case    6:*/		return 0x8207852C;
		  /* 8207852Ch */ case    7:  		/* tdi 5, R10, -1 */
		/* 8207852Ch case    7:*/		cpu::op::td<5>(regs, 0x8207852C, regs.R10, 0xFFFFFFFF);
		/* 8207852Ch case    7:*/		return 0x82078530;
	}
	return 0x82078530;
} // Block from 82078510h-82078530h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82078530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078530);
		  /* 82078530h */ case    0:  		/* ld R10, <#[R9 + 452]> */
		/* 82078530h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x000001C4) );
		/* 82078530h case    0:*/		return 0x82078534;
		  /* 82078534h */ case    1:  		/* ld R7, <#[R9 + 932]> */
		/* 82078534h case    1:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x000003A4) );
		/* 82078534h case    1:*/		return 0x82078538;
		  /* 82078538h */ case    2:  		/* lwz R6, <#[R1 + 148]> */
		/* 82078538h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 82078538h case    2:*/		return 0x8207853C;
		  /* 8207853Ch */ case    3:  		/* subf R10, R10, R7 */
		/* 8207853Ch case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8207853Ch case    3:*/		return 0x82078540;
		  /* 82078540h */ case    4:  		/* rlwimi R11, R6, 0, 0, 15 */
		/* 82078540h case    4:*/		cpu::op::rlwimi<0,0,0,15>(regs,&regs.R11,regs.R6);
		/* 82078540h case    4:*/		return 0x82078544;
		  /* 82078544h */ case    5:  		/* cmpdi CR6, R10, 0 */
		/* 82078544h case    5:*/		cpu::op::cmpdi<6>(regs,regs.R10,0x00000000);
		/* 82078544h case    5:*/		return 0x82078548;
		  /* 82078548h */ case    6:  		/* bc 4, CR6_LT, 12 */
		/* 82078548h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82078554;  }
		/* 82078548h case    6:*/		return 0x8207854C;
		  /* 8207854Ch */ case    7:  		/* li R10, 0 */
		/* 8207854Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207854Ch case    7:*/		return 0x82078550;
		  /* 82078550h */ case    8:  		/* b 52 */
		/* 82078550h case    8:*/		return 0x82078584;
		/* 82078550h case    8:*/		return 0x82078554;
	}
	return 0x82078554;
} // Block from 82078530h-82078554h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82078554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078554);
		  /* 82078554h */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 82078554h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 82078554h case    0:*/		return 0x82078558;
		  /* 82078558h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82078558h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82078564;  }
		/* 82078558h case    1:*/		return 0x8207855C;
		  /* 8207855Ch */ case    2:  		/* mr R10, R4 */
		/* 8207855Ch case    2:*/		regs.R10 = regs.R4;
		/* 8207855Ch case    2:*/		return 0x82078560;
		  /* 82078560h */ case    3:  		/* b 36 */
		/* 82078560h case    3:*/		return 0x82078584;
		/* 82078560h case    3:*/		return 0x82078564;
	}
	return 0x82078564;
} // Block from 82078554h-82078564h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82078564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078564);
		  /* 82078564h */ case    0:  		/* mulld R7, R10, R5 */
		/* 82078564h case    0:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R10,regs.R5);
		/* 82078564h case    0:*/		return 0x82078568;
		  /* 82078568h */ case    1:  		/* rldicl R10, R7, 1, 0 */
		/* 82078568h case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R10,regs.R7);
		/* 82078568h case    1:*/		return 0x8207856C;
		  /* 8207856Ch */ case    2:  		/* divd R7, R7, R8 */
		/* 8207856Ch case    2:*/		cpu::op::divd<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 8207856Ch case    2:*/		return 0x82078570;
		  /* 82078570h */ case    3:  		/* addi R6, R10, -1 */
		/* 82078570h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFFF);
		/* 82078570h case    3:*/		return 0x82078574;
		  /* 82078574h */ case    4:  		/* rlwinm R10, R7, 0, 0, 31 */
		/* 82078574h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R7);
		/* 82078574h case    4:*/		return 0x82078578;
		  /* 82078578h */ case    5:  		/* andc R7, R8, R6 */
		/* 82078578h case    5:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R8,regs.R6);
		/* 82078578h case    5:*/		return 0x8207857C;
		  /* 8207857Ch */ case    6:  		/* tdi 6, R8, 0 */
		/* 8207857Ch case    6:*/		cpu::op::td<6>(regs, 0x8207857C, regs.R8, 0x00000000);
		/* 8207857Ch case    6:*/		return 0x82078580;
		  /* 82078580h */ case    7:  		/* tdi 5, R7, -1 */
		/* 82078580h case    7:*/		cpu::op::td<5>(regs, 0x82078580, regs.R7, 0xFFFFFFFF);
		/* 82078580h case    7:*/		return 0x82078584;
	}
	return 0x82078584;
} // Block from 82078564h-82078584h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82078584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078584);
		  /* 82078584h */ case    0:  		/* ld R7, <#[R9 + 236]> */
		/* 82078584h case    0:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x000000EC) );
		/* 82078584h case    0:*/		return 0x82078588;
		  /* 82078588h */ case    1:  		/* rlwimi R11, R10, 16, 0, 15 */
		/* 82078588h case    1:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R10);
		/* 82078588h case    1:*/		return 0x8207858C;
		  /* 8207858Ch */ case    2:  		/* ld R6, <#[R9 + 716]> */
		/* 8207858Ch case    2:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + 0x000002CC) );
		/* 8207858Ch case    2:*/		return 0x82078590;
		  /* 82078590h */ case    3:  		/* stw R11, <#[R1 + 148]> */
		/* 82078590h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82078590h case    3:*/		return 0x82078594;
		  /* 82078594h */ case    4:  		/* subf R10, R7, R6 */
		/* 82078594h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R7,regs.R6);
		/* 82078594h case    4:*/		return 0x82078598;
		  /* 82078598h */ case    5:  		/* cmpdi CR6, R10, 0 */
		/* 82078598h case    5:*/		cpu::op::cmpdi<6>(regs,regs.R10,0x00000000);
		/* 82078598h case    5:*/		return 0x8207859C;
		  /* 8207859Ch */ case    6:  		/* bc 4, CR6_LT, 12 */
		/* 8207859Ch case    6:*/		if ( !regs.CR[6].lt ) { return 0x820785A8;  }
		/* 8207859Ch case    6:*/		return 0x820785A0;
		  /* 820785A0h */ case    7:  		/* li R11, 0 */
		/* 820785A0h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820785A0h case    7:*/		return 0x820785A4;
		  /* 820785A4h */ case    8:  		/* b 52 */
		/* 820785A4h case    8:*/		return 0x820785D8;
		/* 820785A4h case    8:*/		return 0x820785A8;
	}
	return 0x820785A8;
} // Block from 82078584h-820785A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820785A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820785A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820785A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820785A8);
		  /* 820785A8h */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 820785A8h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 820785A8h case    0:*/		return 0x820785AC;
		  /* 820785ACh */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820785ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x820785B8;  }
		/* 820785ACh case    1:*/		return 0x820785B0;
		  /* 820785B0h */ case    2:  		/* mr R11, R4 */
		/* 820785B0h case    2:*/		regs.R11 = regs.R4;
		/* 820785B0h case    2:*/		return 0x820785B4;
		  /* 820785B4h */ case    3:  		/* b 36 */
		/* 820785B4h case    3:*/		return 0x820785D8;
		/* 820785B4h case    3:*/		return 0x820785B8;
	}
	return 0x820785B8;
} // Block from 820785A8h-820785B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820785B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820785B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820785B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820785B8);
		  /* 820785B8h */ case    0:  		/* mulld R10, R10, R5 */
		/* 820785B8h case    0:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 820785B8h case    0:*/		return 0x820785BC;
		  /* 820785BCh */ case    1:  		/* rldicl R11, R10, 1, 0 */
		/* 820785BCh case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R11,regs.R10);
		/* 820785BCh case    1:*/		return 0x820785C0;
		  /* 820785C0h */ case    2:  		/* divd R10, R10, R8 */
		/* 820785C0h case    2:*/		cpu::op::divd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 820785C0h case    2:*/		return 0x820785C4;
		  /* 820785C4h */ case    3:  		/* addi R7, R11, -1 */
		/* 820785C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 820785C4h case    3:*/		return 0x820785C8;
		  /* 820785C8h */ case    4:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 820785C8h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 820785C8h case    4:*/		return 0x820785CC;
		  /* 820785CCh */ case    5:  		/* andc R10, R8, R7 */
		/* 820785CCh case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R7);
		/* 820785CCh case    5:*/		return 0x820785D0;
		  /* 820785D0h */ case    6:  		/* tdi 6, R8, 0 */
		/* 820785D0h case    6:*/		cpu::op::td<6>(regs, 0x820785D0, regs.R8, 0x00000000);
		/* 820785D0h case    6:*/		return 0x820785D4;
		  /* 820785D4h */ case    7:  		/* tdi 5, R10, -1 */
		/* 820785D4h case    7:*/		cpu::op::td<5>(regs, 0x820785D4, regs.R10, 0xFFFFFFFF);
		/* 820785D4h case    7:*/		return 0x820785D8;
	}
	return 0x820785D8;
} // Block from 820785B8h-820785D8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820785D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820785D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820785D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820785D8);
		  /* 820785D8h */ case    0:  		/* ld R10, <#[R9 + 92]> */
		/* 820785D8h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x0000005C) );
		/* 820785D8h case    0:*/		return 0x820785DC;
		  /* 820785DCh */ case    1:  		/* ld R7, <#[R9 + 572]> */
		/* 820785DCh case    1:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x0000023C) );
		/* 820785DCh case    1:*/		return 0x820785E0;
		  /* 820785E0h */ case    2:  		/* lwz R6, <#[R1 + 152]> */
		/* 820785E0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000098) );
		/* 820785E0h case    2:*/		return 0x820785E4;
		  /* 820785E4h */ case    3:  		/* subf R10, R10, R7 */
		/* 820785E4h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 820785E4h case    3:*/		return 0x820785E8;
	}
	return 0x820785E8;
} // Block from 820785D8h-820785E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820785E8h
// Function '?InitializeAsyncCommandBuffers@D3D@@YAHPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820785E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820785E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820785E8);
		  /* 820785E8h */ case    0:  		/* rlwimi R11, R6, 0, 0, 15 */
		/* 820785E8h case    0:*/		cpu::op::rlwimi<0,0,0,15>(regs,&regs.R11,regs.R6);
		/* 820785E8h case    0:*/		return 0x820785EC;
		  /* 820785ECh */ case    1:  		/* cmpdi CR6, R10, 0 */
		/* 820785ECh case    1:*/		cpu::op::cmpdi<6>(regs,regs.R10,0x00000000);
		/* 820785ECh case    1:*/		return 0x820785F0;
		  /* 820785F0h */ case    2:  		/* bc 4, CR6_LT, 12 */
		/* 820785F0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x820785FC;  }
		/* 820785F0h case    2:*/		return 0x820785F4;
		  /* 820785F4h */ case    3:  		/* li R10, 0 */
		/* 820785F4h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820785F4h case    3:*/		return 0x820785F8;
		  /* 820785F8h */ case    4:  		/* b 52 */
		/* 820785F8h case    4:*/		return 0x8207862C;
		/* 820785F8h case    4:*/		return 0x820785FC;
	}
	return 0x820785FC;
} // Block from 820785E8h-820785FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820785FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820785FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820785FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820785FC);
		  /* 820785FCh */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 820785FCh case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 820785FCh case    0:*/		return 0x82078600;
		  /* 82078600h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82078600h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207860C;  }
		/* 82078600h case    1:*/		return 0x82078604;
		  /* 82078604h */ case    2:  		/* mr R10, R4 */
		/* 82078604h case    2:*/		regs.R10 = regs.R4;
		/* 82078604h case    2:*/		return 0x82078608;
		  /* 82078608h */ case    3:  		/* b 36 */
		/* 82078608h case    3:*/		return 0x8207862C;
		/* 82078608h case    3:*/		return 0x8207860C;
	}
	return 0x8207860C;
} // Block from 820785FCh-8207860Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207860Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207860C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207860C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207860C);
		  /* 8207860Ch */ case    0:  		/* mulld R7, R10, R5 */
		/* 8207860Ch case    0:*/		cpu::op::mulld<0>(regs,&regs.R7,regs.R10,regs.R5);
		/* 8207860Ch case    0:*/		return 0x82078610;
		  /* 82078610h */ case    1:  		/* rldicl R10, R7, 1, 0 */
		/* 82078610h case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R10,regs.R7);
		/* 82078610h case    1:*/		return 0x82078614;
		  /* 82078614h */ case    2:  		/* divd R7, R7, R8 */
		/* 82078614h case    2:*/		cpu::op::divd<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 82078614h case    2:*/		return 0x82078618;
		  /* 82078618h */ case    3:  		/* addi R6, R10, -1 */
		/* 82078618h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFFF);
		/* 82078618h case    3:*/		return 0x8207861C;
		  /* 8207861Ch */ case    4:  		/* rlwinm R10, R7, 0, 0, 31 */
		/* 8207861Ch case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R7);
		/* 8207861Ch case    4:*/		return 0x82078620;
		  /* 82078620h */ case    5:  		/* andc R7, R8, R6 */
		/* 82078620h case    5:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R8,regs.R6);
		/* 82078620h case    5:*/		return 0x82078624;
		  /* 82078624h */ case    6:  		/* tdi 6, R8, 0 */
		/* 82078624h case    6:*/		cpu::op::td<6>(regs, 0x82078624, regs.R8, 0x00000000);
		/* 82078624h case    6:*/		return 0x82078628;
		  /* 82078628h */ case    7:  		/* tdi 5, R7, -1 */
		/* 82078628h case    7:*/		cpu::op::td<5>(regs, 0x82078628, regs.R7, 0xFFFFFFFF);
		/* 82078628h case    7:*/		return 0x8207862C;
	}
	return 0x8207862C;
} // Block from 8207860Ch-8207862Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207862Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207862C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207862C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207862C);
		  /* 8207862Ch */ case    0:  		/* ld R7, <#[R9 + 460]> */
		/* 8207862Ch case    0:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R9 + 0x000001CC) );
		/* 8207862Ch case    0:*/		return 0x82078630;
		  /* 82078630h */ case    1:  		/* rlwimi R11, R10, 16, 0, 15 */
		/* 82078630h case    1:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R10);
		/* 82078630h case    1:*/		return 0x82078634;
		  /* 82078634h */ case    2:  		/* ld R6, <#[R9 + 940]> */
		/* 82078634h case    2:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R9 + 0x000003AC) );
		/* 82078634h case    2:*/		return 0x82078638;
		  /* 82078638h */ case    3:  		/* stw R11, <#[R1 + 152]> */
		/* 82078638h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82078638h case    3:*/		return 0x8207863C;
		  /* 8207863Ch */ case    4:  		/* subf R10, R7, R6 */
		/* 8207863Ch case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R7,regs.R6);
		/* 8207863Ch case    4:*/		return 0x82078640;
		  /* 82078640h */ case    5:  		/* rldicr R11, R10, 1, 62 */
		/* 82078640h case    5:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R11,regs.R10);
		/* 82078640h case    5:*/		return 0x82078644;
		  /* 82078644h */ case    6:  		/* cmpdi CR6, R11, 0 */
		/* 82078644h case    6:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 82078644h case    6:*/		return 0x82078648;
		  /* 82078648h */ case    7:  		/* bc 4, CR6_LT, 12 */
		/* 82078648h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82078654;  }
		/* 82078648h case    7:*/		return 0x8207864C;
		  /* 8207864Ch */ case    8:  		/* li R11, 0 */
		/* 8207864Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207864Ch case    8:*/		return 0x82078650;
		  /* 82078650h */ case    9:  		/* b 52 */
		/* 82078650h case    9:*/		return 0x82078684;
		/* 82078650h case    9:*/		return 0x82078654;
	}
	return 0x82078654;
} // Block from 8207862Ch-82078654h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82078654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078654);
		  /* 82078654h */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 82078654h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 82078654h case    0:*/		return 0x82078658;
		  /* 82078658h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82078658h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82078664;  }
		/* 82078658h case    1:*/		return 0x8207865C;
		  /* 8207865Ch */ case    2:  		/* mr R11, R4 */
		/* 8207865Ch case    2:*/		regs.R11 = regs.R4;
		/* 8207865Ch case    2:*/		return 0x82078660;
		  /* 82078660h */ case    3:  		/* b 36 */
		/* 82078660h case    3:*/		return 0x82078684;
		/* 82078660h case    3:*/		return 0x82078664;
	}
	return 0x82078664;
} // Block from 82078654h-82078664h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82078664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078664);
		  /* 82078664h */ case    0:  		/* mulld R10, R11, R5 */
		/* 82078664h case    0:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R11,regs.R5);
		/* 82078664h case    0:*/		return 0x82078668;
		  /* 82078668h */ case    1:  		/* rldicl R11, R10, 1, 0 */
		/* 82078668h case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R11,regs.R10);
		/* 82078668h case    1:*/		return 0x8207866C;
		  /* 8207866Ch */ case    2:  		/* divd R10, R10, R8 */
		/* 8207866Ch case    2:*/		cpu::op::divd<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8207866Ch case    2:*/		return 0x82078670;
		  /* 82078670h */ case    3:  		/* addi R7, R11, -1 */
		/* 82078670h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 82078670h case    3:*/		return 0x82078674;
		  /* 82078674h */ case    4:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82078674h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82078674h case    4:*/		return 0x82078678;
		  /* 82078678h */ case    5:  		/* andc R10, R8, R7 */
		/* 82078678h case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R8,regs.R7);
		/* 82078678h case    5:*/		return 0x8207867C;
		  /* 8207867Ch */ case    6:  		/* tdi 6, R8, 0 */
		/* 8207867Ch case    6:*/		cpu::op::td<6>(regs, 0x8207867C, regs.R8, 0x00000000);
		/* 8207867Ch case    6:*/		return 0x82078680;
		  /* 82078680h */ case    7:  		/* tdi 5, R10, -1 */
		/* 82078680h case    7:*/		cpu::op::td<5>(regs, 0x82078680, regs.R10, 0xFFFFFFFF);
		/* 82078680h case    7:*/		return 0x82078684;
	}
	return 0x82078684;
} // Block from 82078664h-82078684h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82078684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078684);
		  /* 82078684h */ case    0:  		/* ld R10, <#[R9 + 468]> */
		/* 82078684h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R9 + 0x000001D4) );
		/* 82078684h case    0:*/		return 0x82078688;
		  /* 82078688h */ case    1:  		/* ld R9, <#[R9 + 948]> */
		/* 82078688h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R9 + 0x000003B4) );
		/* 82078688h case    1:*/		return 0x8207868C;
		  /* 8207868Ch */ case    2:  		/* lwz R7, <#[R1 + 156]> */
		/* 8207868Ch case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000009C) );
		/* 8207868Ch case    2:*/		return 0x82078690;
		  /* 82078690h */ case    3:  		/* subf R10, R10, R9 */
		/* 82078690h case    3:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82078690h case    3:*/		return 0x82078694;
		  /* 82078694h */ case    4:  		/* rlwimi R11, R7, 0, 0, 15 */
		/* 82078694h case    4:*/		cpu::op::rlwimi<0,0,0,15>(regs,&regs.R11,regs.R7);
		/* 82078694h case    4:*/		return 0x82078698;
		  /* 82078698h */ case    5:  		/* rldicr R10, R10, 1, 62 */
		/* 82078698h case    5:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R10,regs.R10);
		/* 82078698h case    5:*/		return 0x8207869C;
		  /* 8207869Ch */ case    6:  		/* cmpdi CR6, R10, 0 */
		/* 8207869Ch case    6:*/		cpu::op::cmpdi<6>(regs,regs.R10,0x00000000);
		/* 8207869Ch case    6:*/		return 0x820786A0;
		  /* 820786A0h */ case    7:  		/* bc 4, CR6_LT, 12 */
		/* 820786A0h case    7:*/		if ( !regs.CR[6].lt ) { return 0x820786AC;  }
		/* 820786A0h case    7:*/		return 0x820786A4;
		  /* 820786A4h */ case    8:  		/* li R10, 0 */
		/* 820786A4h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820786A4h case    8:*/		return 0x820786A8;
		  /* 820786A8h */ case    9:  		/* b 52 */
		/* 820786A8h case    9:*/		return 0x820786DC;
		/* 820786A8h case    9:*/		return 0x820786AC;
	}
	return 0x820786AC;
} // Block from 82078684h-820786ACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820786ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820786AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820786AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820786AC);
		  /* 820786ACh */ case    0:  		/* cmpdi CR6, R8, 0 */
		/* 820786ACh case    0:*/		cpu::op::cmpdi<6>(regs,regs.R8,0x00000000);
		/* 820786ACh case    0:*/		return 0x820786B0;
		  /* 820786B0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820786B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820786BC;  }
		/* 820786B0h case    1:*/		return 0x820786B4;
		  /* 820786B4h */ case    2:  		/* mr R10, R4 */
		/* 820786B4h case    2:*/		regs.R10 = regs.R4;
		/* 820786B4h case    2:*/		return 0x820786B8;
		  /* 820786B8h */ case    3:  		/* b 36 */
		/* 820786B8h case    3:*/		return 0x820786DC;
		/* 820786B8h case    3:*/		return 0x820786BC;
	}
	return 0x820786BC;
} // Block from 820786ACh-820786BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820786BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820786BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820786BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820786BC);
		  /* 820786BCh */ case    0:  		/* mulld R9, R10, R5 */
		/* 820786BCh case    0:*/		cpu::op::mulld<0>(regs,&regs.R9,regs.R10,regs.R5);
		/* 820786BCh case    0:*/		return 0x820786C0;
		  /* 820786C0h */ case    1:  		/* rldicl R10, R9, 1, 0 */
		/* 820786C0h case    1:*/		cpu::op::rldicl<0,1,0>(regs,&regs.R10,regs.R9);
		/* 820786C0h case    1:*/		return 0x820786C4;
		  /* 820786C4h */ case    2:  		/* divd R9, R9, R8 */
		/* 820786C4h case    2:*/		cpu::op::divd<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820786C4h case    2:*/		return 0x820786C8;
		  /* 820786C8h */ case    3:  		/* addi R7, R10, -1 */
		/* 820786C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFFF);
		/* 820786C8h case    3:*/		return 0x820786CC;
		  /* 820786CCh */ case    4:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 820786CCh case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 820786CCh case    4:*/		return 0x820786D0;
		  /* 820786D0h */ case    5:  		/* andc R9, R8, R7 */
		/* 820786D0h case    5:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R8,regs.R7);
		/* 820786D0h case    5:*/		return 0x820786D4;
		  /* 820786D4h */ case    6:  		/* tdi 6, R8, 0 */
		/* 820786D4h case    6:*/		cpu::op::td<6>(regs, 0x820786D4, regs.R8, 0x00000000);
		/* 820786D4h case    6:*/		return 0x820786D8;
		  /* 820786D8h */ case    7:  		/* tdi 5, R9, -1 */
		/* 820786D8h case    7:*/		cpu::op::td<5>(regs, 0x820786D8, regs.R9, 0xFFFFFFFF);
		/* 820786D8h case    7:*/		return 0x820786DC;
	}
	return 0x820786DC;
} // Block from 820786BCh-820786DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 820786DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820786DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820786DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820786DC);
		  /* 820786DCh */ case    0:  		/* rlwimi R11, R10, 16, 0, 15 */
		/* 820786DCh case    0:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R10);
		/* 820786DCh case    0:*/		return 0x820786E0;
		  /* 820786E0h */ case    1:  		/* b 36 */
		/* 820786E0h case    1:*/		return 0x82078704;
		/* 820786E0h case    1:*/		return 0x820786E4;
	}
	return 0x820786E4;
} // Block from 820786DCh-820786E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820786E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820786E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820786E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820786E4);
		  /* 820786E4h */ case    0:  		/* lwz R10, <#[R1 + 136]> */
		/* 820786E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820786E4h case    0:*/		return 0x820786E8;
	}
	return 0x820786E8;
} // Block from 820786E4h-820786E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820786E8h
// Function '?WaitUntilIdleOrFlushCaches@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820786E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820786E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820786E8);
		  /* 820786E8h */ case    0:  		/* li R11, -1 */
		/* 820786E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820786E8h case    0:*/		return 0x820786EC;
		  /* 820786ECh */ case    1:  		/* oris R10, R10, 65535 */
		/* 820786ECh case    1:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 820786ECh case    1:*/		return 0x820786F0;
		  /* 820786F0h */ case    2:  		/* stw R11, <#[R1 + 140]> */
		/* 820786F0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 820786F0h case    2:*/		return 0x820786F4;
		  /* 820786F4h */ case    3:  		/* stw R11, <#[R1 + 144]> */
		/* 820786F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 820786F4h case    3:*/		return 0x820786F8;
		  /* 820786F8h */ case    4:  		/* stw R10, <#[R1 + 136]> */
		/* 820786F8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 820786F8h case    4:*/		return 0x820786FC;
		  /* 820786FCh */ case    5:  		/* stw R11, <#[R1 + 148]> */
		/* 820786FCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820786FCh case    5:*/		return 0x82078700;
		  /* 82078700h */ case    6:  		/* stw R11, <#[R1 + 152]> */
		/* 82078700h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82078700h case    6:*/		return 0x82078704;
	}
	return 0x82078704;
} // Block from 820786E8h-82078704h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82078704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078704);
		  /* 82078704h */ case    0:  		/* stw R11, <#[R1 + 156]> */
		/* 82078704h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 82078704h case    0:*/		return 0x82078708;
		  /* 82078708h */ case    1:  		/* lis R3, 17459 */
		/* 82078708h case    1:*/		cpu::op::lis<0>(regs,&regs.R3,0x4433);
		/* 82078708h case    1:*/		return 0x8207870C;
		  /* 8207870Ch */ case    2:  		/* li R5, 64 */
		/* 8207870Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 8207870Ch case    2:*/		return 0x82078710;
		  /* 82078710h */ case    3:  		/* addi R4, R1, 96 */
		/* 82078710h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82078710h case    3:*/		return 0x82078714;
		  /* 82078714h */ case    4:  		/* ori R3, R3, 25703 */
		/* 82078714h case    4:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x6467);
		/* 82078714h case    4:*/		return 0x82078718;
		  /* 82078718h */ case    5:  		/* bl 64912 */
		/* 82078718h case    5:*/		regs.LR = 0x8207871C; return 0x820884A8;
		/* 82078718h case    5:*/		return 0x8207871C;
		  /* 8207871Ch */ case    6:  		/* addi R1, R1, 208 */
		/* 8207871Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8207871Ch case    6:*/		return 0x82078720;
		  /* 82078720h */ case    7:  		/* b 101252 */
		/* 82078720h case    7:*/		return 0x820912A4;
		/* 82078720h case    7:*/		return 0x82078724;
		  /* 82078724h */ case    8:  		/* nop */
		/* 82078724h case    8:*/		cpu::op::nop();
		/* 82078724h case    8:*/		return 0x82078728;
	}
	return 0x82078728;
} // Block from 82078704h-82078728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82078728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078728);
		  /* 82078728h */ case    0:  		/* mfspr R12, LR */
		/* 82078728h case    0:*/		regs.R12 = regs.LR;
		/* 82078728h case    0:*/		return 0x8207872C;
		  /* 8207872Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207872Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207872Ch case    1:*/		return 0x82078730;
		  /* 82078730h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82078730h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078730h case    2:*/		return 0x82078734;
		  /* 82078734h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82078734h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078734h case    3:*/		return 0x82078738;
		  /* 82078738h */ case    4:  		/* stfd FR30, <#[R1 - 40]> */
		/* 82078738h case    4:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFD8) );
		/* 82078738h case    4:*/		return 0x8207873C;
		  /* 8207873Ch */ case    5:  		/* stfd FR31, <#[R1 - 32]> */
		/* 8207873Ch case    5:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207873Ch case    5:*/		return 0x82078740;
		  /* 82078740h */ case    6:  		/* stwu R1, <#[R1 - 144]> */
		/* 82078740h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82078740h case    6:*/		return 0x82078744;
		  /* 82078744h */ case    7:  		/* lis R11, 32767 */
		/* 82078744h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FFF);
		/* 82078744h case    7:*/		return 0x82078748;
		  /* 82078748h */ case    8:  		/* mr R31, R4 */
		/* 82078748h case    8:*/		regs.R31 = regs.R4;
		/* 82078748h case    8:*/		return 0x8207874C;
		  /* 8207874Ch */ case    9:  		/* ori R11, R11, 65535 */
		/* 8207874Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8207874Ch case    9:*/		return 0x82078750;
		  /* 82078750h */ case   10:  		/* cmplwi CR6, R4, 18 */
		/* 82078750h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000012);
		/* 82078750h case   10:*/		return 0x82078754;
		  /* 82078754h */ case   11:  		/* stw R11, <#[R1 + 80]> */
		/* 82078754h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82078754h case   11:*/		return 0x82078758;
		  /* 82078758h */ case   12:  		/* bc 12, CR6_GT, 1164 */
		/* 82078758h case   12:*/		if ( regs.CR[6].gt ) { return 0x82078BE4;  }
		/* 82078758h case   12:*/		return 0x8207875C;
		  /* 8207875Ch */ case   13:  		/* lis R12, -32256 */
		/* 8207875Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8200);
		/* 8207875Ch case   13:*/		return 0x82078760;
		  /* 82078760h */ case   14:  		/* rlwinm R0, R31, 1, 0, 30 */
		/* 82078760h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R31);
		/* 82078760h case   14:*/		return 0x82078764;
		  /* 82078764h */ case   15:  		/* addi R12, R12, 8264 */
		/* 82078764h case   15:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x2048);
		/* 82078764h case   15:*/		return 0x82078768;
		  /* 82078768h */ case   16:  		/* lhzx R0, <#[R12 + R0]> */
		/* 82078768h case   16:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 82078768h case   16:*/		return 0x8207876C;
		  /* 8207876Ch */ case   17:  		/* lis R12, -32248 */
		/* 8207876Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8208);
		/* 8207876Ch case   17:*/		return 0x82078770;
		  /* 82078770h */ case   18:  		/* addi R12, R12, -30844 */
		/* 82078770h case   18:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF8784);
		/* 82078770h case   18:*/		return 0x82078774;
		  /* 82078774h */ case   19:  		/* ori R0, R0, 0 */
		/* 82078774h case   19:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82078774h case   19:*/		return 0x82078778;
		  /* 82078778h */ case   20:  		/* add R12, R12, R0 */
		/* 82078778h case   20:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82078778h case   20:*/		return 0x8207877C;
		  /* 8207877Ch */ case   21:  		/* mtspr CTR, R12 */
		/* 8207877Ch case   21:*/		regs.CTR = regs.R12;
		/* 8207877Ch case   21:*/		return 0x82078780;
		  /* 82078780h */ case   22:  		/* bcctr 20, CR0_LT */
		/* 82078780h case   22:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82078780h case   22:*/		return 0x82078784;
		  /* 82078784h */ case   23:  		/* lwz R11, <#[R3 + 21984]> */
		/* 82078784h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000055E0) );
		/* 82078784h case   23:*/		return 0x82078788;
		  /* 82078788h */ case   24:  		/* lfs FR0, <#[R3 + 22000]> */
		/* 82078788h case   24:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R3 + 0x000055F0) );
		/* 82078788h case   24:*/		return 0x8207878C;
		  /* 8207878Ch */ case   25:  		/* std R11, <#[R1 + 88]> */
		/* 8207878Ch case   25:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207878Ch case   25:*/		return 0x82078790;
		  /* 82078790h */ case   26:  		/* lfd FR13, <#[R1 + 88]> */
		/* 82078790h case   26:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 82078790h case   26:*/		return 0x82078794;
		  /* 82078794h */ case   27:  		/* fcfid FR13, FR13 */
		/* 82078794h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82078794h case   27:*/		return 0x82078798;
	}
	return 0x82078798;
} // Block from 82078728h-82078798h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82078798h
// Function 'Direct3D_CreateDevice'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078798);
		  /* 82078798h */ case    0:  		/* frsp FR13, FR13 */
		/* 82078798h case    0:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82078798h case    0:*/		return 0x8207879C;
		  /* 8207879Ch */ case    1:  		/* fmuls FR1, FR13, FR0 */
		/* 8207879Ch case    1:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR13,regs.FR0);
		/* 8207879Ch case    1:*/		return 0x820787A0;
		  /* 820787A0h */ case    2:  		/* b 1096 */
		/* 820787A0h case    2:*/		return 0x82078BE8;
		/* 820787A0h case    2:*/		return 0x820787A4;
		  /* 820787A4h */ case    3:  		/* lwz R11, <#[R3 + 21984]> */
		/* 820787A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000055E0) );
		/* 820787A4h case    3:*/		return 0x820787A8;
		  /* 820787A8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 820787A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820787A8h case    4:*/		return 0x820787AC;
		  /* 820787ACh */ case    5:  		/* bc 12, CR6_EQ, 1080 */
		/* 820787ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 820787ACh case    5:*/		return 0x820787B0;
		  /* 820787B0h */ case    6:  		/* rldicl R11, R11, 0, 32 */
		/* 820787B0h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 820787B0h case    6:*/		return 0x820787B4;
		  /* 820787B4h */ case    7:  		/* lfs FR0, <#[R3 + 21996]> */
		/* 820787B4h case    7:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R3 + 0x000055EC) );
		/* 820787B4h case    7:*/		return 0x820787B8;
		  /* 820787B8h */ case    8:  		/* std R11, <#[R1 + 88]> */
		/* 820787B8h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 820787B8h case    8:*/		return 0x820787BC;
		  /* 820787BCh */ case    9:  		/* lfd FR13, <#[R1 + 88]> */
		/* 820787BCh case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 820787BCh case    9:*/		return 0x820787C0;
		  /* 820787C0h */ case   10:  		/* fcfid FR13, FR13 */
		/* 820787C0h case   10:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 820787C0h case   10:*/		return 0x820787C4;
		  /* 820787C4h */ case   11:  		/* frsp FR13, FR13 */
		/* 820787C4h case   11:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 820787C4h case   11:*/		return 0x820787C8;
		  /* 820787C8h */ case   12:  		/* fdivs FR1, FR0, FR13 */
		/* 820787C8h case   12:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR0,regs.FR13);
		/* 820787C8h case   12:*/		return 0x820787CC;
		  /* 820787CCh */ case   13:  		/* b 1052 */
		/* 820787CCh case   13:*/		return 0x82078BE8;
		/* 820787CCh case   13:*/		return 0x820787D0;
		  /* 820787D0h */ case   14:  		/* lwz R11, <#[R3 + 16968]> */
		/* 820787D0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00004248) );
		/* 820787D0h case   14:*/		return 0x820787D4;
		  /* 820787D4h */ case   15:  		/* std R11, <#[R1 + 88]> */
		/* 820787D4h case   15:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 820787D4h case   15:*/		return 0x820787D8;
		  /* 820787D8h */ case   16:  		/* lfd FR0, <#[R1 + 88]> */
		/* 820787D8h case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 820787D8h case   16:*/		return 0x820787DC;
		  /* 820787DCh */ case   17:  		/* fcfid FR0, FR0 */
		/* 820787DCh case   17:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820787DCh case   17:*/		return 0x820787E0;
		  /* 820787E0h */ case   18:  		/* frsp FR1, FR0 */
		/* 820787E0h case   18:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 820787E0h case   18:*/		return 0x820787E4;
		  /* 820787E4h */ case   19:  		/* b 1028 */
		/* 820787E4h case   19:*/		return 0x82078BE8;
		/* 820787E4h case   19:*/		return 0x820787E8;
		  /* 820787E8h */ case   20:  		/* lwz R11, <#[R3 + 22024]> */
		/* 820787E8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005608) );
		/* 820787E8h case   20:*/		return 0x820787EC;
		  /* 820787ECh */ case   21:  		/* lwz R9, <#[R3 + 21984]> */
		/* 820787ECh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x000055E0) );
		/* 820787ECh case   21:*/		return 0x820787F0;
		  /* 820787F0h */ case   22:  		/* std R11, <#[R1 + 88]> */
		/* 820787F0h case   22:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 820787F0h case   22:*/		return 0x820787F4;
		  /* 820787F4h */ case   23:  		/* lfd FR13, <#[R1 + 88]> */
		/* 820787F4h case   23:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 820787F4h case   23:*/		return 0x820787F8;
		  /* 820787F8h */ case   24:  		/* std R9, <#[R1 + 88]> */
		/* 820787F8h case   24:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 820787F8h case   24:*/		return 0x820787FC;
		  /* 820787FCh */ case   25:  		/* lfd FR0, <#[R1 + 88]> */
		/* 820787FCh case   25:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 820787FCh case   25:*/		return 0x82078800;
		  /* 82078800h */ case   26:  		/* fcfid FR13, FR13 */
		/* 82078800h case   26:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82078800h case   26:*/		return 0x82078804;
		  /* 82078804h */ case   27:  		/* fcfid FR11, FR0 */
		/* 82078804h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR0);
		/* 82078804h case   27:*/		return 0x82078808;
		  /* 82078808h */ case   28:  		/* frsp FR11, FR11 */
		/* 82078808h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 82078808h case   28:*/		return 0x8207880C;
		  /* 8207880Ch */ case   29:  		/* frsp FR13, FR13 */
		/* 8207880Ch case   29:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207880Ch case   29:*/		return 0x82078810;
		  /* 82078810h */ case   30:  		/* fdivs FR13, FR13, FR11 */
		/* 82078810h case   30:*/		cpu::op::fdivs<0>(regs,&regs.FR13,regs.FR13,regs.FR11);
		/* 82078810h case   30:*/		return 0x82078814;
		  /* 82078814h */ case   31:  		/* lis R8, -32256 */
		/* 82078814h case   31:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82078814h case   31:*/		return 0x82078818;
		  /* 82078818h */ case   32:  		/* lfs FR12, <#[R8 + 1816]> */
		/* 82078818h case   32:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000718) );
		/* 82078818h case   32:*/		return 0x8207881C;
		  /* 8207881Ch */ case   33:  		/* lis R10, -32256 */
		/* 8207881Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207881Ch case   33:*/		return 0x82078820;
		  /* 82078820h */ case   34:  		/* lfs FR0, <#[R10 + 8372]> */
		/* 82078820h case   34:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x000020B4) );
		/* 82078820h case   34:*/		return 0x82078824;
		  /* 82078824h */ case   35:  		/* fmuls FR13, FR13, FR0 */
		/* 82078824h case   35:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 82078824h case   35:*/		return 0x82078828;
		  /* 82078828h */ case   36:  		/* fcmpu CR6, FR13, FR12 */
		/* 82078828h case   36:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR12);
		/* 82078828h case   36:*/		return 0x8207882C;
		  /* 8207882Ch */ case   37:  		/* bc 4, CR6_LT, 12 */
		/* 8207882Ch case   37:*/		if ( !regs.CR[6].lt ) { return 0x82078838;  }
		/* 8207882Ch case   37:*/		return 0x82078830;
		  /* 82078830h */ case   38:  		/* fmr FR0, FR12 */
		/* 82078830h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 82078830h case   38:*/		return 0x82078834;
		  /* 82078834h */ case   39:  		/* b 16 */
		/* 82078834h case   39:*/		return 0x82078844;
		/* 82078834h case   39:*/		return 0x82078838;
	}
	return 0x82078838;
} // Block from 82078798h-82078838h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82078838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078838);
		  /* 82078838h */ case    0:  		/* fcmpu CR6, FR13, FR0 */
		/* 82078838h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82078838h case    0:*/		return 0x8207883C;
		  /* 8207883Ch */ case    1:  		/* bc 12, CR6_GT, 8 */
		/* 8207883Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x82078844;  }
		/* 8207883Ch case    1:*/		return 0x82078840;
		  /* 82078840h */ case    2:  		/* fmr FR0, FR13 */
		/* 82078840h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR13);
		/* 82078840h case    2:*/		return 0x82078844;
	}
	return 0x82078844;
} // Block from 82078838h-82078844h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82078844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078844);
		  /* 82078844h */ case    0:  		/* fmr FR1, FR0 */
		/* 82078844h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 82078844h case    0:*/		return 0x82078848;
		  /* 82078848h */ case    1:  		/* b 928 */
		/* 82078848h case    1:*/		return 0x82078BE8;
		/* 82078848h case    1:*/		return 0x8207884C;
		  /* 8207884Ch */ case    2:  		/* lwz R11, <#[R3 + 21984]> */
		/* 8207884Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000055E0) );
		/* 8207884Ch case    2:*/		return 0x82078850;
		  /* 82078850h */ case    3:  		/* lwz R9, <#[R3 + 22028]> */
		/* 82078850h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000560C) );
		/* 82078850h case    3:*/		return 0x82078854;
		  /* 82078854h */ case    4:  		/* std R11, <#[R1 + 88]> */
		/* 82078854h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82078854h case    4:*/		return 0x82078858;
		  /* 82078858h */ case    5:  		/* lfd FR13, <#[R1 + 88]> */
		/* 82078858h case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 82078858h case    5:*/		return 0x8207885C;
		  /* 8207885Ch */ case    6:  		/* std R9, <#[R1 + 88]> */
		/* 8207885Ch case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207885Ch case    6:*/		return 0x82078860;
		  /* 82078860h */ case    7:  		/* fcfid FR13, FR13 */
		/* 82078860h case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82078860h case    7:*/		return 0x82078864;
		  /* 82078864h */ case    8:  		/* frsp FR13, FR13 */
		/* 82078864h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82078864h case    8:*/		return 0x82078868;
		  /* 82078868h */ case    9:  		/* lfd FR0, <#[R1 + 88]> */
		/* 82078868h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 82078868h case    9:*/		return 0x8207886C;
		  /* 8207886Ch */ case   10:  		/* fcfid FR11, FR0 */
		/* 8207886Ch case   10:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR0);
		/* 8207886Ch case   10:*/		return 0x82078870;
		  /* 82078870h */ case   11:  		/* frsp FR11, FR11 */
		/* 82078870h case   11:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 82078870h case   11:*/		return 0x82078874;
		  /* 82078874h */ case   12:  		/* fdivs FR13, FR11, FR13 */
		/* 82078874h case   12:*/		cpu::op::fdivs<0>(regs,&regs.FR13,regs.FR11,regs.FR13);
		/* 82078874h case   12:*/		return 0x82078878;
		  /* 82078878h */ case   13:  		/* b -100 */
		/* 82078878h case   13:*/		return 0x82078814;
		/* 82078878h case   13:*/		return 0x8207887C;
		  /* 8207887Ch */ case   14:  		/* lwz R11, <#[R3 + 21984]> */
		/* 8207887Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000055E0) );
		/* 8207887Ch case   14:*/		return 0x82078880;
		  /* 82078880h */ case   15:  		/* lwz R9, <#[R3 + 22028]> */
		/* 82078880h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000560C) );
		/* 82078880h case   15:*/		return 0x82078884;
		  /* 82078884h */ case   16:  		/* mr R6, R11 */
		/* 82078884h case   16:*/		regs.R6 = regs.R11;
		/* 82078884h case   16:*/		return 0x82078888;
		  /* 82078888h */ case   17:  		/* lwz R7, <#[R3 + 22024]> */
		/* 82078888h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00005608) );
		/* 82078888h case   17:*/		return 0x8207888C;
		  /* 8207888Ch */ case   18:  		/* subf R11, R9, R11 */
		/* 8207888Ch case   18:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207888Ch case   18:*/		return 0x82078890;
		  /* 82078890h */ case   19:  		/* std R6, <#[R1 + 88]> */
		/* 82078890h case   19:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 82078890h case   19:*/		return 0x82078894;
		  /* 82078894h */ case   20:  		/* lfd FR0, <#[R1 + 88]> */
		/* 82078894h case   20:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 82078894h case   20:*/		return 0x82078898;
		  /* 82078898h */ case   21:  		/* fcfid FR0, FR0 */
		/* 82078898h case   21:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82078898h case   21:*/		return 0x8207889C;
		  /* 8207889Ch */ case   22:  		/* subf R11, R7, R11 */
		/* 8207889Ch case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8207889Ch case   22:*/		return 0x820788A0;
		  /* 820788A0h */ case   23:  		/* rldicl R11, R11, 0, 32 */
		/* 820788A0h case   23:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 820788A0h case   23:*/		return 0x820788A4;
		  /* 820788A4h */ case   24:  		/* frsp FR13, FR0 */
		/* 820788A4h case   24:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR0);
		/* 820788A4h case   24:*/		return 0x820788A8;
		  /* 820788A8h */ case   25:  		/* std R11, <#[R1 + 88]> */
		/* 820788A8h case   25:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 820788A8h case   25:*/		return 0x820788AC;
		  /* 820788ACh */ case   26:  		/* lfd FR12, <#[R1 + 88]> */
		/* 820788ACh case   26:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000058) );
		/* 820788ACh case   26:*/		return 0x820788B0;
		  /* 820788B0h */ case   27:  		/* fcfid FR11, FR12 */
		/* 820788B0h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR12);
		/* 820788B0h case   27:*/		return 0x820788B4;
		  /* 820788B4h */ case   28:  		/* b -68 */
		/* 820788B4h case   28:*/		return 0x82078870;
		/* 820788B4h case   28:*/		return 0x820788B8;
		  /* 820788B8h */ case   29:  		/* lwz R11, <#[R3 + 22032]> */
		/* 820788B8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005610) );
		/* 820788B8h case   29:*/		return 0x820788BC;
		  /* 820788BCh */ case   30:  		/* lwz R8, <#[R3 + 11024]> */
		/* 820788BCh case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00002B10) );
		/* 820788BCh case   30:*/		return 0x820788C0;
	}
	return 0x820788C0;
} // Block from 82078844h-820788C0h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820788C0h
// Function 'D3DDevice_UnsetAll'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820788C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820788C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820788C0);
		  /* 820788C0h */ case    0:  		/* addi R10, R11, 1 */
		/* 820788C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 820788C0h case    0:*/		return 0x820788C4;
		  /* 820788C4h */ case    1:  		/* addi R7, R11, -1 */
		/* 820788C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 820788C4h case    1:*/		return 0x820788C8;
		  /* 820788C8h */ case    2:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 820788C8h case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 820788C8h case    2:*/		return 0x820788CC;
		  /* 820788CCh */ case    3:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 820788CCh case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 820788CCh case    3:*/		return 0x820788D0;
		  /* 820788D0h */ case    4:  		/* addi R6, R10, 16 */
		/* 820788D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x10);
		/* 820788D0h case    4:*/		return 0x820788D4;
		  /* 820788D4h */ case    5:  		/* rlwinm R10, R7, 0, 29, 31 */
		/* 820788D4h case    5:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R7);
		/* 820788D4h case    5:*/		return 0x820788D8;
		  /* 820788D8h */ case    6:  		/* rlwinm R7, R6, 2, 0, 29 */
		/* 820788D8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R6);
		/* 820788D8h case    6:*/		return 0x820788DC;
		  /* 820788DCh */ case    7:  		/* addi R10, R10, 16 */
		/* 820788DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 820788DCh case    7:*/		return 0x820788E0;
		  /* 820788E0h */ case    8:  		/* addi R9, R9, 16 */
		/* 820788E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x10);
		/* 820788E0h case    8:*/		return 0x820788E4;
		  /* 820788E4h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820788E4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820788E4h case    9:*/		return 0x820788E8;
		  /* 820788E8h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 820788E8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 820788E8h case   10:*/		return 0x820788EC;
		  /* 820788ECh */ case   11:  		/* lwbrx R31, <#[R7 + R8]> */
		/* 820788ECh case   11:*/		cpu::mem::lwbrx( regs, &regs.R31, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 820788ECh case   11:*/		return 0x820788F0;
		  /* 820788F0h */ case   12:  		/* cmpldi CR6, R31, 0 */
		/* 820788F0h case   12:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 820788F0h case   12:*/		return 0x820788F4;
		  /* 820788F4h */ case   13:  		/* lwbrx R30, <#[R10 + R8]> */
		/* 820788F4h case   13:*/		cpu::mem::lwbrx( regs, &regs.R30, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 820788F4h case   13:*/		return 0x820788F8;
		  /* 820788F8h */ case   14:  		/* lwbrx R10, <#[R9 + R8]> */
		/* 820788F8h case   14:*/		cpu::mem::lwbrx( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 820788F8h case   14:*/		return 0x820788FC;
		  /* 820788FCh */ case   15:  		/* bc 12, CR6_EQ, 744 */
		/* 820788FCh case   15:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 820788FCh case   15:*/		return 0x82078900;
		  /* 82078900h */ case   16:  		/* addi R11, R11, 2 */
		/* 82078900h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82078900h case   16:*/		return 0x82078904;
		  /* 82078904h */ case   17:  		/* cmpldi CR6, R10, 0 */
		/* 82078904h case   17:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82078904h case   17:*/		return 0x82078908;
		  /* 82078908h */ case   18:  		/* stw R11, <#[R3 + 22032]> */
		/* 82078908h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00005610) );
		/* 82078908h case   18:*/		return 0x8207890C;
		  /* 8207890Ch */ case   19:  		/* bc 12, CR6_EQ, 728 */
		/* 8207890Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 8207890Ch case   19:*/		return 0x82078910;
		  /* 82078910h */ case   20:  		/* cmpldi CR6, R30, 0 */
		/* 82078910h case   20:*/		cpu::op::cmpldi<6>(regs,regs.R30,0x00000000);
		/* 82078910h case   20:*/		return 0x82078914;
		  /* 82078914h */ case   21:  		/* bc 12, CR6_EQ, 720 */
		/* 82078914h case   21:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 82078914h case   21:*/		return 0x82078918;
		  /* 82078918h */ case   22:  		/* li R11, 1 */
		/* 82078918h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82078918h case   22:*/		return 0x8207891C;
		  /* 8207891Ch */ case   23:  		/* cmpld CR6, R10, R30 */
		/* 8207891Ch case   23:*/		cpu::op::cmpld<6>(regs,regs.R10,regs.R30);
		/* 8207891Ch case   23:*/		return 0x82078920;
		  /* 82078920h */ case   24:  		/* rldicr R11, R11, 32, 63 */
		/* 82078920h case   24:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R11,regs.R11);
		/* 82078920h case   24:*/		return 0x82078924;
		  /* 82078924h */ case   25:  		/* bc 12, CR6_GT, 8 */
		/* 82078924h case   25:*/		if ( regs.CR[6].gt ) { return 0x8207892C;  }
		/* 82078924h case   25:*/		return 0x82078928;
		  /* 82078928h */ case   26:  		/* add R10, R10, R11 */
		/* 82078928h case   26:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82078928h case   26:*/		return 0x8207892C;
	}
	return 0x8207892C;
} // Block from 820788C0h-8207892Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8207892Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207892C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207892C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207892C);
		  /* 8207892Ch */ case    0:  		/* cmpld CR6, R31, R10 */
		/* 8207892Ch case    0:*/		cpu::op::cmpld<6>(regs,regs.R31,regs.R10);
		/* 8207892Ch case    0:*/		return 0x82078930;
		  /* 82078930h */ case    1:  		/* bc 12, CR6_GT, 8 */
		/* 82078930h case    1:*/		if ( regs.CR[6].gt ) { return 0x82078938;  }
		/* 82078930h case    1:*/		return 0x82078934;
		  /* 82078934h */ case    2:  		/* add R31, R31, R11 */
		/* 82078934h case    2:*/		cpu::op::add<0>(regs,&regs.R31,regs.R31,regs.R11);
		/* 82078934h case    2:*/		return 0x82078938;
	}
	return 0x82078938;
} // Block from 8207892Ch-82078938h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82078938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078938);
		  /* 82078938h */ case    0:  		/* subf R3, R10, R31 */
		/* 82078938h case    0:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R10,regs.R31);
		/* 82078938h case    0:*/		return 0x8207893C;
		  /* 8207893Ch */ case    1:  		/* bl 106852 */
		/* 8207893Ch case    1:*/		regs.LR = 0x82078940; return 0x82092AA0;
		/* 8207893Ch case    1:*/		return 0x82078940;
		  /* 82078940h */ case    2:  		/* subf R3, R30, R31 */
		/* 82078940h case    2:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R30,regs.R31);
		/* 82078940h case    2:*/		return 0x82078944;
		  /* 82078944h */ case    3:  		/* b 212 */
		/* 82078944h case    3:*/		return 0x82078A18;
		/* 82078944h case    3:*/		return 0x82078948;
		  /* 82078948h */ case    4:  		/* lwz R11, <#[R3 + 23760]> */
		/* 82078948h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005CD0) );
		/* 82078948h case    4:*/		return 0x8207894C;
		  /* 8207894Ch */ case    5:  		/* std R11, <#[R1 + 88]> */
		/* 8207894Ch case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207894Ch case    5:*/		return 0x82078950;
		  /* 82078950h */ case    6:  		/* lfd FR0, <#[R1 + 88]> */
		/* 82078950h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 82078950h case    6:*/		return 0x82078954;
		  /* 82078954h */ case    7:  		/* b -376 */
		/* 82078954h case    7:*/		return 0x820787DC;
		/* 82078954h case    7:*/		return 0x82078958;
		  /* 82078958h */ case    8:  		/* bl -1936 */
		/* 82078958h case    8:*/		regs.LR = 0x8207895C; return 0x820781C8;
		/* 82078958h case    8:*/		return 0x8207895C;
		  /* 8207895Ch */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8207895Ch case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207895Ch case    9:*/		return 0x82078960;
		  /* 82078960h */ case   10:  		/* bc 12, CR0_EQ, 644 */
		/* 82078960h case   10:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078960h case   10:*/		return 0x82078964;
		  /* 82078964h */ case   11:  		/* lis R11, -32215 */
		/* 82078964h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078964h case   11:*/		return 0x82078968;
		  /* 82078968h */ case   12:  		/* li R10, 0 */
		/* 82078968h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82078968h case   12:*/		return 0x8207896C;
		  /* 8207896Ch */ case   13:  		/* addi R7, R11, -32596 */
		/* 8207896Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFF80AC);
		/* 8207896Ch case   13:*/		return 0x82078970;
		  /* 82078970h */ case   14:  		/* stw R10, <#[R1 + 88]> */
		/* 82078970h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82078970h case   14:*/		return 0x82078974;
		  /* 82078974h */ case   15:  		/* cmpwi CR6, R31, 7 */
		/* 82078974h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000007);
		/* 82078974h case   15:*/		return 0x82078978;
		  /* 82078978h */ case   16:  		/* lwz R9, <#[R11 - 32596]> */
		/* 82078978h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFF80AC) );
		/* 82078978h case   16:*/		return 0x8207897C;
		  /* 8207897Ch */ case   17:  		/* ld R11, <#[R7 + 4]> */
		/* 8207897Ch case   17:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 8207897Ch case   17:*/		return 0x82078980;
		  /* 82078980h */ case   18:  		/* ld R10, <#[R7 + 484]> */
		/* 82078980h case   18:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R7 + 0x000001E4) );
		/* 82078980h case   18:*/		return 0x82078984;
		  /* 82078984h */ case   19:  		/* ld R8, <#[R7 + 12]> */
		/* 82078984h case   19:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R7 + 0x0000000C) );
		/* 82078984h case   19:*/		return 0x82078988;
		  /* 82078988h */ case   20:  		/* ld R7, <#[R7 + 492]> */
		/* 82078988h case   20:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + 0x000001EC) );
		/* 82078988h case   20:*/		return 0x8207898C;
		  /* 8207898Ch */ case   21:  		/* subf R31, R11, R10 */
		/* 8207898Ch case   21:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8207898Ch case   21:*/		return 0x82078990;
		  /* 82078990h */ case   22:  		/* stw R9, <#[R1 + 92]> */
		/* 82078990h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 82078990h case   22:*/		return 0x82078994;
		  /* 82078994h */ case   23:  		/* subf R3, R8, R7 */
		/* 82078994h case   23:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R8,regs.R7);
		/* 82078994h case   23:*/		return 0x82078998;
		  /* 82078998h */ case   24:  		/* bc 4, CR6_EQ, 12 */
		/* 82078998h case   24:*/		if ( !regs.CR[6].eq ) { return 0x820789A4;  }
		/* 82078998h case   24:*/		return 0x8207899C;
		  /* 8207899Ch */ case   25:  		/* ld R11, <#[R1 + 88]> */
		/* 8207899Ch case   25:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207899Ch case   25:*/		return 0x820789A0;
		  /* 820789A0h */ case   26:  		/* subf R3, R11, R3 */
		/* 820789A0h case   26:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 820789A0h case   26:*/		return 0x820789A4;
	}
	return 0x820789A4;
} // Block from 82078938h-820789A4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 820789A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820789A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820789A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820789A4);
		  /* 820789A4h */ case    0:  		/* cmpldi CR6, R3, 0 */
		/* 820789A4h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R3,0x00000000);
		/* 820789A4h case    0:*/		return 0x820789A8;
		  /* 820789A8h */ case    1:  		/* bc 12, CR6_EQ, 572 */
		/* 820789A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 820789A8h case    1:*/		return 0x820789AC;
		  /* 820789ACh */ case    2:  		/* bl 106740 */
		/* 820789ACh case    2:*/		regs.LR = 0x820789B0; return 0x82092AA0;
		/* 820789ACh case    2:*/		return 0x820789B0;
		  /* 820789B0h */ case    3:  		/* mr R3, R31 */
		/* 820789B0h case    3:*/		regs.R3 = regs.R31;
		/* 820789B0h case    3:*/		return 0x820789B4;
		  /* 820789B4h */ case    4:  		/* fmr FR31, FR1 */
		/* 820789B4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 820789B4h case    4:*/		return 0x820789B8;
		  /* 820789B8h */ case    5:  		/* bl 106728 */
		/* 820789B8h case    5:*/		regs.LR = 0x820789BC; return 0x82092AA0;
		/* 820789B8h case    5:*/		return 0x820789BC;
		  /* 820789BCh */ case    6:  		/* fdiv FR11, FR31, FR1 */
		/* 820789BCh case    6:*/		cpu::op::fdiv<0>(regs,&regs.FR11,regs.FR31,regs.FR1);
		/* 820789BCh case    6:*/		return 0x820789C0;
		  /* 820789C0h */ case    7:  		/* lis R11, -32256 */
		/* 820789C0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820789C0h case    7:*/		return 0x820789C4;
		  /* 820789C4h */ case    8:  		/* lis R9, -32256 */
		/* 820789C4h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820789C4h case    8:*/		return 0x820789C8;
		  /* 820789C8h */ case    9:  		/* lfs FR13, <#[R11 + 1792]> */
		/* 820789C8h case    9:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000700) );
		/* 820789C8h case    9:*/		return 0x820789CC;
		  /* 820789CCh */ case   10:  		/* lfs FR12, <#[R9 + 1816]> */
		/* 820789CCh case   10:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00000718) );
		/* 820789CCh case   10:*/		return 0x820789D0;
		  /* 820789D0h */ case   11:  		/* frsp FR11, FR11 */
		/* 820789D0h case   11:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 820789D0h case   11:*/		return 0x820789D4;
		  /* 820789D4h */ case   12:  		/* fsubs FR13, FR13, FR11 */
		/* 820789D4h case   12:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR13,regs.FR11);
		/* 820789D4h case   12:*/		return 0x820789D8;
		  /* 820789D8h */ case   13:  		/* b -444 */
		/* 820789D8h case   13:*/		return 0x8207881C;
		/* 820789D8h case   13:*/		return 0x820789DC;
		  /* 820789DCh */ case   14:  		/* bl -2068 */
		/* 820789DCh case   14:*/		regs.LR = 0x820789E0; return 0x820781C8;
		/* 820789DCh case   14:*/		return 0x820789E0;
		  /* 820789E0h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 820789E0h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820789E0h case   15:*/		return 0x820789E4;
		  /* 820789E4h */ case   16:  		/* bc 12, CR0_EQ, 512 */
		/* 820789E4h case   16:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 820789E4h case   16:*/		return 0x820789E8;
		  /* 820789E8h */ case   17:  		/* lis R11, -32215 */
		/* 820789E8h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 820789E8h case   17:*/		return 0x820789EC;
		  /* 820789ECh */ case   18:  		/* addi R11, R11, -32596 */
		/* 820789ECh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF80AC);
		/* 820789ECh case   18:*/		return 0x820789F0;
		  /* 820789F0h */ case   19:  		/* ld R10, <#[R11 + 124]> */
		/* 820789F0h case   19:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x0000007C) );
		/* 820789F0h case   19:*/		return 0x820789F4;
		  /* 820789F4h */ case   20:  		/* ld R9, <#[R11 + 604]> */
		/* 820789F4h case   20:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + 0x0000025C) );
		/* 820789F4h case   20:*/		return 0x820789F8;
		  /* 820789F8h */ case   21:  		/* subf R31, R10, R9 */
		/* 820789F8h case   21:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R10,regs.R9);
		/* 820789F8h case   21:*/		return 0x820789FC;
		  /* 820789FCh */ case   22:  		/* cmpldi CR6, R31, 0 */
		/* 820789FCh case   22:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 820789FCh case   22:*/		return 0x82078A00;
		  /* 82078A00h */ case   23:  		/* bc 12, CR6_EQ, 484 */
		/* 82078A00h case   23:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 82078A00h case   23:*/		return 0x82078A04;
		  /* 82078A04h */ case   24:  		/* ld R10, <#[R11 + 132]> */
		/* 82078A04h case   24:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000084) );
		/* 82078A04h case   24:*/		return 0x82078A08;
		  /* 82078A08h */ case   25:  		/* ld R11, <#[R11 + 612]> */
		/* 82078A08h case   25:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000264) );
		/* 82078A08h case   25:*/		return 0x82078A0C;
		  /* 82078A0Ch */ case   26:  		/* subf R3, R10, R11 */
		/* 82078A0Ch case   26:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82078A0Ch case   26:*/		return 0x82078A10;
		  /* 82078A10h */ case   27:  		/* bl 106640 */
		/* 82078A10h case   27:*/		regs.LR = 0x82078A14; return 0x82092AA0;
		/* 82078A10h case   27:*/		return 0x82078A14;
		  /* 82078A14h */ case   28:  		/* mr R3, R31 */
		/* 82078A14h case   28:*/		regs.R3 = regs.R31;
		/* 82078A14h case   28:*/		return 0x82078A18;
	}
	return 0x82078A18;
} // Block from 820789A4h-82078A18h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82078A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078A18);
		  /* 82078A18h */ case    0:  		/* fmr FR31, FR1 */
		/* 82078A18h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82078A18h case    0:*/		return 0x82078A1C;
		  /* 82078A1Ch */ case    1:  		/* bl 106628 */
		/* 82078A1Ch case    1:*/		regs.LR = 0x82078A20; return 0x82092AA0;
		/* 82078A1Ch case    1:*/		return 0x82078A20;
		  /* 82078A20h */ case    2:  		/* fdiv FR13, FR31, FR1 */
		/* 82078A20h case    2:*/		cpu::op::fdiv<0>(regs,&regs.FR13,regs.FR31,regs.FR1);
		/* 82078A20h case    2:*/		return 0x82078A24;
		  /* 82078A24h */ case    3:  		/* lis R10, -32256 */
		/* 82078A24h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82078A24h case    3:*/		return 0x82078A28;
		  /* 82078A28h */ case    4:  		/* frsp FR13, FR13 */
		/* 82078A28h case    4:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82078A28h case    4:*/		return 0x82078A2C;
		  /* 82078A2Ch */ case    5:  		/* lis R11, -32256 */
		/* 82078A2Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82078A2Ch case    5:*/		return 0x82078A30;
		  /* 82078A30h */ case    6:  		/* lfs FR12, <#[R10 + 1816]> */
		/* 82078A30h case    6:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000718) );
		/* 82078A30h case    6:*/		return 0x82078A34;
		  /* 82078A34h */ case    7:  		/* lfs FR0, <#[R11 + 8372]> */
		/* 82078A34h case    7:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000020B4) );
		/* 82078A34h case    7:*/		return 0x82078A38;
		  /* 82078A38h */ case    8:  		/* b -532 */
		/* 82078A38h case    8:*/		return 0x82078824;
		/* 82078A38h case    8:*/		return 0x82078A3C;
		  /* 82078A3Ch */ case    9:  		/* bl -2164 */
		/* 82078A3Ch case    9:*/		regs.LR = 0x82078A40; return 0x820781C8;
		/* 82078A3Ch case    9:*/		return 0x82078A40;
	}
	return 0x82078A40;
} // Block from 82078A18h-82078A40h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82078A40h
// Function '?SetTileAndDepthClear@D3D@@YAXPAVCDevice@1@PBU_D3DRESOLVE_PARAMETERSEX@@MK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078A40);
		  /* 82078A40h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82078A40h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078A40h case    0:*/		return 0x82078A44;
		  /* 82078A44h */ case    1:  		/* bc 12, CR0_EQ, 416 */
		/* 82078A44h case    1:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078A44h case    1:*/		return 0x82078A48;
		  /* 82078A48h */ case    2:  		/* lis R11, -32215 */
		/* 82078A48h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078A48h case    2:*/		return 0x82078A4C;
		  /* 82078A4Ch */ case    3:  		/* addi R31, R11, -32596 */
		/* 82078A4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF80AC);
		/* 82078A4Ch case    3:*/		return 0x82078A50;
		  /* 82078A50h */ case    4:  		/* ld R11, <#[R31 + 124]> */
		/* 82078A50h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82078A50h case    4:*/		return 0x82078A54;
		  /* 82078A54h */ case    5:  		/* ld R10, <#[R31 + 604]> */
		/* 82078A54h case    5:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x0000025C) );
		/* 82078A54h case    5:*/		return 0x82078A58;
		  /* 82078A58h */ case    6:  		/* subf R3, R11, R10 */
		/* 82078A58h case    6:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82078A58h case    6:*/		return 0x82078A5C;
		  /* 82078A5Ch */ case    7:  		/* cmpldi CR6, R3, 0 */
		/* 82078A5Ch case    7:*/		cpu::op::cmpldi<6>(regs,regs.R3,0x00000000);
		/* 82078A5Ch case    7:*/		return 0x82078A60;
		  /* 82078A60h */ case    8:  		/* bc 12, CR6_EQ, 388 */
		/* 82078A60h case    8:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 82078A60h case    8:*/		return 0x82078A64;
		  /* 82078A64h */ case    9:  		/* bl 106556 */
		/* 82078A64h case    9:*/		regs.LR = 0x82078A68; return 0x82092AA0;
		/* 82078A64h case    9:*/		return 0x82078A68;
		  /* 82078A68h */ case   10:  		/* ld R11, <#[R31 + 132]> */
		/* 82078A68h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 82078A68h case   10:*/		return 0x82078A6C;
		  /* 82078A6Ch */ case   11:  		/* ld R10, <#[R31 + 612]> */
		/* 82078A6Ch case   11:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x00000264) );
		/* 82078A6Ch case   11:*/		return 0x82078A70;
		  /* 82078A70h */ case   12:  		/* fmr FR31, FR1 */
		/* 82078A70h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82078A70h case   12:*/		return 0x82078A74;
		  /* 82078A74h */ case   13:  		/* subf R3, R11, R10 */
		/* 82078A74h case   13:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82078A74h case   13:*/		return 0x82078A78;
		  /* 82078A78h */ case   14:  		/* bl 106536 */
		/* 82078A78h case   14:*/		regs.LR = 0x82078A7C; return 0x82092AA0;
		/* 82078A78h case   14:*/		return 0x82078A7C;
		  /* 82078A7Ch */ case   15:  		/* ld R11, <#[R31 + 140]> */
		/* 82078A7Ch case   15:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x0000008C) );
		/* 82078A7Ch case   15:*/		return 0x82078A80;
		  /* 82078A80h */ case   16:  		/* ld R10, <#[R31 + 620]> */
		/* 82078A80h case   16:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x0000026C) );
		/* 82078A80h case   16:*/		return 0x82078A84;
		  /* 82078A84h */ case   17:  		/* fsub FR30, FR31, FR1 */
		/* 82078A84h case   17:*/		cpu::op::fsub<0>(regs,&regs.FR30,regs.FR31,regs.FR1);
		/* 82078A84h case   17:*/		return 0x82078A88;
		  /* 82078A88h */ case   18:  		/* subf R3, R11, R10 */
		/* 82078A88h case   18:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82078A88h case   18:*/		return 0x82078A8C;
		  /* 82078A8Ch */ case   19:  		/* bl 106516 */
		/* 82078A8Ch case   19:*/		regs.LR = 0x82078A90; return 0x82092AA0;
		/* 82078A8Ch case   19:*/		return 0x82078A90;
		  /* 82078A90h */ case   20:  		/* fsub FR13, FR30, FR1 */
		/* 82078A90h case   20:*/		cpu::op::fsub<0>(regs,&regs.FR13,regs.FR30,regs.FR1);
		/* 82078A90h case   20:*/		return 0x82078A94;
		  /* 82078A94h */ case   21:  		/* fdiv FR13, FR13, FR31 */
		/* 82078A94h case   21:*/		cpu::op::fdiv<0>(regs,&regs.FR13,regs.FR13,regs.FR31);
		/* 82078A94h case   21:*/		return 0x82078A98;
		  /* 82078A98h */ case   22:  		/* b -116 */
		/* 82078A98h case   22:*/		return 0x82078A24;
		/* 82078A98h case   22:*/		return 0x82078A9C;
		  /* 82078A9Ch */ case   23:  		/* bl -2260 */
		/* 82078A9Ch case   23:*/		regs.LR = 0x82078AA0; return 0x820781C8;
		/* 82078A9Ch case   23:*/		return 0x82078AA0;
		  /* 82078AA0h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 82078AA0h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078AA0h case   24:*/		return 0x82078AA4;
		  /* 82078AA4h */ case   25:  		/* bc 12, CR0_EQ, 320 */
		/* 82078AA4h case   25:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078AA4h case   25:*/		return 0x82078AA8;
		  /* 82078AA8h */ case   26:  		/* lis R11, -32215 */
		/* 82078AA8h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078AA8h case   26:*/		return 0x82078AAC;
		  /* 82078AACh */ case   27:  		/* addi R11, R11, -32596 */
		/* 82078AACh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF80AC);
		/* 82078AACh case   27:*/		return 0x82078AB0;
		  /* 82078AB0h */ case   28:  		/* ld R10, <#[R11 + 124]> */
		/* 82078AB0h case   28:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x0000007C) );
		/* 82078AB0h case   28:*/		return 0x82078AB4;
		  /* 82078AB4h */ case   29:  		/* ld R9, <#[R11 + 604]> */
		/* 82078AB4h case   29:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + 0x0000025C) );
		/* 82078AB4h case   29:*/		return 0x82078AB8;
		  /* 82078AB8h */ case   30:  		/* subf R31, R10, R9 */
		/* 82078AB8h case   30:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R10,regs.R9);
		/* 82078AB8h case   30:*/		return 0x82078ABC;
		  /* 82078ABCh */ case   31:  		/* cmpldi CR6, R31, 0 */
		/* 82078ABCh case   31:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 82078ABCh case   31:*/		return 0x82078AC0;
		  /* 82078AC0h */ case   32:  		/* bc 12, CR6_EQ, 292 */
		/* 82078AC0h case   32:*/		if ( regs.CR[6].eq ) { return 0x82078BE4;  }
		/* 82078AC0h case   32:*/		return 0x82078AC4;
		  /* 82078AC4h */ case   33:  		/* ld R10, <#[R11 + 140]> */
		/* 82078AC4h case   33:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x0000008C) );
		/* 82078AC4h case   33:*/		return 0x82078AC8;
		  /* 82078AC8h */ case   34:  		/* ld R11, <#[R11 + 620]> */
		/* 82078AC8h case   34:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x0000026C) );
		/* 82078AC8h case   34:*/		return 0x82078ACC;
		  /* 82078ACCh */ case   35:  		/* b -192 */
		/* 82078ACCh case   35:*/		return 0x82078A0C;
		/* 82078ACCh case   35:*/		return 0x82078AD0;
		  /* 82078AD0h */ case   36:  		/* bl -2312 */
		/* 82078AD0h case   36:*/		regs.LR = 0x82078AD4; return 0x820781C8;
		/* 82078AD0h case   36:*/		return 0x82078AD4;
		  /* 82078AD4h */ case   37:  		/* cmpwi CR0, R3, 0 */
		/* 82078AD4h case   37:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078AD4h case   37:*/		return 0x82078AD8;
		  /* 82078AD8h */ case   38:  		/* bc 12, CR0_EQ, 268 */
		/* 82078AD8h case   38:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078AD8h case   38:*/		return 0x82078ADC;
		  /* 82078ADCh */ case   39:  		/* lis R11, -32215 */
		/* 82078ADCh case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078ADCh case   39:*/		return 0x82078AE0;
		  /* 82078AE0h */ case   40:  		/* addi R8, R11, -32596 */
		/* 82078AE0h case   40:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078AE0h case   40:*/		return 0x82078AE4;
		  /* 82078AE4h */ case   41:  		/* ld R11, <#[R8 + 444]> */
		/* 82078AE4h case   41:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x000001BC) );
		/* 82078AE4h case   41:*/		return 0x82078AE8;
		  /* 82078AE8h */ case   42:  		/* ld R10, <#[R8 + 924]> */
		/* 82078AE8h case   42:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x0000039C) );
		/* 82078AE8h case   42:*/		return 0x82078AEC;
		  /* 82078AECh */ case   43:  		/* ld R9, <#[R8 + 436]> */
		/* 82078AECh case   43:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x000001B4) );
		/* 82078AECh case   43:*/		return 0x82078AF0;
		  /* 82078AF0h */ case   44:  		/* subf R7, R11, R10 */
		/* 82078AF0h case   44:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 82078AF0h case   44:*/		return 0x82078AF4;
		  /* 82078AF4h */ case   45:  		/* ld R11, <#[R8 + 4]> */
		/* 82078AF4h case   45:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82078AF4h case   45:*/		return 0x82078AF8;
		  /* 82078AF8h */ case   46:  		/* ld R10, <#[R8 + 484]> */
		/* 82078AF8h case   46:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000001E4) );
		/* 82078AF8h case   46:*/		return 0x82078AFC;
		  /* 82078AFCh */ case   47:  		/* ld R8, <#[R8 + 916]> */
		/* 82078AFCh case   47:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + 0x00000394) );
		/* 82078AFCh case   47:*/		return 0x82078B00;
		  /* 82078B00h */ case   48:  		/* subf R9, R9, R7 */
		/* 82078B00h case   48:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 82078B00h case   48:*/		return 0x82078B04;
		  /* 82078B04h */ case   49:  		/* add R3, R9, R8 */
		/* 82078B04h case   49:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R8);
		/* 82078B04h case   49:*/		return 0x82078B08;
		  /* 82078B08h */ case   50:  		/* subf R4, R11, R10 */
		/* 82078B08h case   50:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 82078B08h case   50:*/		return 0x82078B0C;
		  /* 82078B0Ch */ case   51:  		/* bl -4292 */
		/* 82078B0Ch case   51:*/		regs.LR = 0x82078B10; return 0x82077A48;
		/* 82078B0Ch case   51:*/		return 0x82078B10;
		  /* 82078B10h */ case   52:  		/* b 216 */
		/* 82078B10h case   52:*/		return 0x82078BE8;
		/* 82078B10h case   52:*/		return 0x82078B14;
		  /* 82078B14h */ case   53:  		/* bl -2380 */
		/* 82078B14h case   53:*/		regs.LR = 0x82078B18; return 0x820781C8;
		/* 82078B14h case   53:*/		return 0x82078B18;
		  /* 82078B18h */ case   54:  		/* cmpwi CR0, R3, 0 */
		/* 82078B18h case   54:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078B18h case   54:*/		return 0x82078B1C;
		  /* 82078B1Ch */ case   55:  		/* bc 12, CR0_EQ, 200 */
		/* 82078B1Ch case   55:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078B1Ch case   55:*/		return 0x82078B20;
		  /* 82078B20h */ case   56:  		/* lis R11, -32215 */
		/* 82078B20h case   56:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078B20h case   56:*/		return 0x82078B24;
		  /* 82078B24h */ case   57:  		/* addi R8, R11, -32596 */
		/* 82078B24h case   57:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078B24h case   57:*/		return 0x82078B28;
	}
	return 0x82078B28;
} // Block from 82078A40h-82078B28h (58 instructions)

//////////////////////////////////////////////////////
// Block at 82078B28h
// Function '?ComputeClearColor@D3D@@YAKKKU__vector4@@PAK1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078B28);
		  /* 82078B28h */ case    0:  		/* ld R11, <#[R8 + 4]> */
		/* 82078B28h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82078B28h case    0:*/		return 0x82078B2C;
		  /* 82078B2Ch */ case    1:  		/* ld R10, <#[R8 + 484]> */
		/* 82078B2Ch case    1:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000001E4) );
		/* 82078B2Ch case    1:*/		return 0x82078B30;
		  /* 82078B30h */ case    2:  		/* ld R9, <#[R8 + 452]> */
		/* 82078B30h case    2:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x000001C4) );
		/* 82078B30h case    2:*/		return 0x82078B34;
		  /* 82078B34h */ case    3:  		/* ld R8, <#[R8 + 932]> */
		/* 82078B34h case    3:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + 0x000003A4) );
		/* 82078B34h case    3:*/		return 0x82078B38;
		  /* 82078B38h */ case    4:  		/* subf R3, R9, R8 */
		/* 82078B38h case    4:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R9,regs.R8);
		/* 82078B38h case    4:*/		return 0x82078B3C;
		  /* 82078B3Ch */ case    5:  		/* b -52 */
		/* 82078B3Ch case    5:*/		return 0x82078B08;
		/* 82078B3Ch case    5:*/		return 0x82078B40;
		  /* 82078B40h */ case    6:  		/* bl -2424 */
		/* 82078B40h case    6:*/		regs.LR = 0x82078B44; return 0x820781C8;
		/* 82078B40h case    6:*/		return 0x82078B44;
		  /* 82078B44h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82078B44h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078B44h case    7:*/		return 0x82078B48;
		  /* 82078B48h */ case    8:  		/* bc 12, CR0_EQ, 156 */
		/* 82078B48h case    8:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078B48h case    8:*/		return 0x82078B4C;
		  /* 82078B4Ch */ case    9:  		/* lis R11, -32215 */
		/* 82078B4Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078B4Ch case    9:*/		return 0x82078B50;
		  /* 82078B50h */ case   10:  		/* addi R8, R11, -32596 */
		/* 82078B50h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078B50h case   10:*/		return 0x82078B54;
		  /* 82078B54h */ case   11:  		/* ld R11, <#[R8 + 4]> */
		/* 82078B54h case   11:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82078B54h case   11:*/		return 0x82078B58;
		  /* 82078B58h */ case   12:  		/* ld R10, <#[R8 + 484]> */
		/* 82078B58h case   12:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000001E4) );
		/* 82078B58h case   12:*/		return 0x82078B5C;
		  /* 82078B5Ch */ case   13:  		/* ld R9, <#[R8 + 236]> */
		/* 82078B5Ch case   13:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x000000EC) );
		/* 82078B5Ch case   13:*/		return 0x82078B60;
		  /* 82078B60h */ case   14:  		/* ld R8, <#[R8 + 716]> */
		/* 82078B60h case   14:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + 0x000002CC) );
		/* 82078B60h case   14:*/		return 0x82078B64;
		  /* 82078B64h */ case   15:  		/* b -44 */
		/* 82078B64h case   15:*/		return 0x82078B38;
		/* 82078B64h case   15:*/		return 0x82078B68;
		  /* 82078B68h */ case   16:  		/* bl -2464 */
		/* 82078B68h case   16:*/		regs.LR = 0x82078B6C; return 0x820781C8;
		/* 82078B68h case   16:*/		return 0x82078B6C;
		  /* 82078B6Ch */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 82078B6Ch case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078B6Ch case   17:*/		return 0x82078B70;
		  /* 82078B70h */ case   18:  		/* bc 12, CR0_EQ, 116 */
		/* 82078B70h case   18:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078B70h case   18:*/		return 0x82078B74;
		  /* 82078B74h */ case   19:  		/* lis R11, -32215 */
		/* 82078B74h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078B74h case   19:*/		return 0x82078B78;
		  /* 82078B78h */ case   20:  		/* addi R8, R11, -32596 */
		/* 82078B78h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078B78h case   20:*/		return 0x82078B7C;
		  /* 82078B7Ch */ case   21:  		/* ld R11, <#[R8 + 4]> */
		/* 82078B7Ch case   21:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82078B7Ch case   21:*/		return 0x82078B80;
		  /* 82078B80h */ case   22:  		/* ld R10, <#[R8 + 484]> */
		/* 82078B80h case   22:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000001E4) );
		/* 82078B80h case   22:*/		return 0x82078B84;
		  /* 82078B84h */ case   23:  		/* ld R9, <#[R8 + 92]> */
		/* 82078B84h case   23:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x0000005C) );
		/* 82078B84h case   23:*/		return 0x82078B88;
		  /* 82078B88h */ case   24:  		/* ld R8, <#[R8 + 572]> */
		/* 82078B88h case   24:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + 0x0000023C) );
		/* 82078B88h case   24:*/		return 0x82078B8C;
		  /* 82078B8Ch */ case   25:  		/* b -84 */
		/* 82078B8Ch case   25:*/		return 0x82078B38;
		/* 82078B8Ch case   25:*/		return 0x82078B90;
		  /* 82078B90h */ case   26:  		/* bl -2504 */
		/* 82078B90h case   26:*/		regs.LR = 0x82078B94; return 0x820781C8;
		/* 82078B90h case   26:*/		return 0x82078B94;
		  /* 82078B94h */ case   27:  		/* cmpwi CR0, R3, 0 */
		/* 82078B94h case   27:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078B94h case   27:*/		return 0x82078B98;
		  /* 82078B98h */ case   28:  		/* bc 12, CR0_EQ, 76 */
		/* 82078B98h case   28:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078B98h case   28:*/		return 0x82078B9C;
		  /* 82078B9Ch */ case   29:  		/* lis R11, -32215 */
		/* 82078B9Ch case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078B9Ch case   29:*/		return 0x82078BA0;
		  /* 82078BA0h */ case   30:  		/* addi R8, R11, -32596 */
		/* 82078BA0h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078BA0h case   30:*/		return 0x82078BA4;
		  /* 82078BA4h */ case   31:  		/* ld R11, <#[R8 + 460]> */
		/* 82078BA4h case   31:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x000001CC) );
		/* 82078BA4h case   31:*/		return 0x82078BA8;
		  /* 82078BA8h */ case   32:  		/* ld R10, <#[R8 + 940]> */
		/* 82078BA8h case   32:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000003AC) );
		/* 82078BA8h case   32:*/		return 0x82078BAC;
		  /* 82078BACh */ case   33:  		/* ld R9, <#[R8 + 4]> */
		/* 82078BACh case   33:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 82078BACh case   33:*/		return 0x82078BB0;
		  /* 82078BB0h */ case   34:  		/* subf R11, R11, R10 */
		/* 82078BB0h case   34:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82078BB0h case   34:*/		return 0x82078BB4;
		  /* 82078BB4h */ case   35:  		/* ld R8, <#[R8 + 484]> */
		/* 82078BB4h case   35:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R8 + 0x000001E4) );
		/* 82078BB4h case   35:*/		return 0x82078BB8;
		  /* 82078BB8h */ case   36:  		/* rldicr R3, R11, 1, 62 */
		/* 82078BB8h case   36:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R3,regs.R11);
		/* 82078BB8h case   36:*/		return 0x82078BBC;
		  /* 82078BBCh */ case   37:  		/* subf R4, R9, R8 */
		/* 82078BBCh case   37:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R9,regs.R8);
		/* 82078BBCh case   37:*/		return 0x82078BC0;
		  /* 82078BC0h */ case   38:  		/* b -180 */
		/* 82078BC0h case   38:*/		return 0x82078B0C;
		/* 82078BC0h case   38:*/		return 0x82078BC4;
		  /* 82078BC4h */ case   39:  		/* bl -2556 */
		/* 82078BC4h case   39:*/		regs.LR = 0x82078BC8; return 0x820781C8;
		/* 82078BC4h case   39:*/		return 0x82078BC8;
		  /* 82078BC8h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 82078BC8h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82078BC8h case   40:*/		return 0x82078BCC;
		  /* 82078BCCh */ case   41:  		/* bc 12, CR0_EQ, 24 */
		/* 82078BCCh case   41:*/		if ( regs.CR[0].eq ) { return 0x82078BE4;  }
		/* 82078BCCh case   41:*/		return 0x82078BD0;
		  /* 82078BD0h */ case   42:  		/* lis R11, -32215 */
		/* 82078BD0h case   42:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82078BD0h case   42:*/		return 0x82078BD4;
		  /* 82078BD4h */ case   43:  		/* addi R8, R11, -32596 */
		/* 82078BD4h case   43:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFF80AC);
		/* 82078BD4h case   43:*/		return 0x82078BD8;
		  /* 82078BD8h */ case   44:  		/* ld R11, <#[R8 + 468]> */
		/* 82078BD8h case   44:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R8 + 0x000001D4) );
		/* 82078BD8h case   44:*/		return 0x82078BDC;
		  /* 82078BDCh */ case   45:  		/* ld R10, <#[R8 + 948]> */
		/* 82078BDCh case   45:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R8 + 0x000003B4) );
		/* 82078BDCh case   45:*/		return 0x82078BE0;
		  /* 82078BE0h */ case   46:  		/* b -52 */
		/* 82078BE0h case   46:*/		return 0x82078BAC;
		/* 82078BE0h case   46:*/		return 0x82078BE4;
	}
	return 0x82078BE4;
} // Block from 82078B28h-82078BE4h (47 instructions)

//////////////////////////////////////////////////////
// Block at 82078BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078BE4);
		  /* 82078BE4h */ case    0:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82078BE4h case    0:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82078BE4h case    0:*/		return 0x82078BE8;
	}
	return 0x82078BE8;
} // Block from 82078BE4h-82078BE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82078BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078BE8);
		  /* 82078BE8h */ case    0:  		/* addi R1, R1, 144 */
		/* 82078BE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82078BE8h case    0:*/		return 0x82078BEC;
		  /* 82078BECh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82078BECh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82078BECh case    1:*/		return 0x82078BF0;
		  /* 82078BF0h */ case    2:  		/* mtspr LR, R12 */
		/* 82078BF0h case    2:*/		regs.LR = regs.R12;
		/* 82078BF0h case    2:*/		return 0x82078BF4;
		  /* 82078BF4h */ case    3:  		/* lfd FR30, <#[R1 - 40]> */
		/* 82078BF4h case    3:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFD8) );
		/* 82078BF4h case    3:*/		return 0x82078BF8;
		  /* 82078BF8h */ case    4:  		/* lfd FR31, <#[R1 - 32]> */
		/* 82078BF8h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 82078BF8h case    4:*/		return 0x82078BFC;
		  /* 82078BFCh */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 82078BFCh case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078BFCh case    5:*/		return 0x82078C00;
		  /* 82078C00h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82078C00h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078C00h case    6:*/		return 0x82078C04;
		  /* 82078C04h */ case    7:  		/* bclr 20, CR0_LT */
		/* 82078C04h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82078C04h case    7:*/		return 0x82078C08;
	}
	return 0x82078C08;
} // Block from 82078BE8h-82078C08h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82078C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078C08);
		  /* 82078C08h */ case    0:  		/* b -18512 */
		/* 82078C08h case    0:*/		return 0x820743B8;
		/* 82078C08h case    0:*/		return 0x82078C0C;
		  /* 82078C0Ch */ case    1:  		/* nop */
		/* 82078C0Ch case    1:*/		cpu::op::nop();
		/* 82078C0Ch case    1:*/		return 0x82078C10;
	}
	return 0x82078C10;
} // Block from 82078C08h-82078C10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82078C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078C10);
		  /* 82078C10h */ case    0:  		/* mfspr R12, LR */
		/* 82078C10h case    0:*/		regs.R12 = regs.LR;
		/* 82078C10h case    0:*/		return 0x82078C14;
		  /* 82078C14h */ case    1:  		/* bl 99904 */
		/* 82078C14h case    1:*/		regs.LR = 0x82078C18; return 0x82091254;
		/* 82078C14h case    1:*/		return 0x82078C18;
		  /* 82078C18h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82078C18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82078C18h case    2:*/		return 0x82078C1C;
		  /* 82078C1Ch */ case    3:  		/* lis R11, -32256 */
		/* 82078C1Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82078C1Ch case    3:*/		return 0x82078C20;
		  /* 82078C20h */ case    4:  		/* lwz R11, <#[R11 + 1456]> */
		/* 82078C20h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 82078C20h case    4:*/		return 0x82078C24;
		  /* 82078C24h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82078C24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82078C24h case    5:*/		return 0x82078C28;
		  /* 82078C28h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 82078C28h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82078C28h case    6:*/		return 0x82078C2C;
		  /* 82078C2Ch */ case    7:  		/* bc 12, CR6_EQ, 440 */
		/* 82078C2Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078C2Ch case    7:*/		return 0x82078C30;
		  /* 82078C30h */ case    8:  		/* rlwinm R31, R10, 0, 0, 31 */
		/* 82078C30h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R31,regs.R10);
		/* 82078C30h case    8:*/		return 0x82078C34;
		  /* 82078C34h */ case    9:  		/* lwz R11, <#[R31 + 60]> */
		/* 82078C34h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 82078C34h case    9:*/		return 0x82078C38;
		  /* 82078C38h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82078C38h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078C38h case   10:*/		return 0x82078C3C;
		  /* 82078C3Ch */ case   11:  		/* bc 12, CR6_EQ, 424 */
		/* 82078C3Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078C3Ch case   11:*/		return 0x82078C40;
		  /* 82078C40h */ case   12:  		/* ld R11, <#[R31 + 11008]> */
		/* 82078C40h case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B00) );
		/* 82078C40h case   12:*/		return 0x82078C44;
		  /* 82078C44h */ case   13:  		/* cmpldi CR6, R11, 0 */
		/* 82078C44h case   13:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82078C44h case   13:*/		return 0x82078C48;
		  /* 82078C48h */ case   14:  		/* bc 12, CR6_EQ, 412 */
		/* 82078C48h case   14:*/		if ( regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078C48h case   14:*/		return 0x82078C4C;
		  /* 82078C4Ch */ case   15:  		/* cmplwi CR6, R3, 224 */
		/* 82078C4Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000000E0);
		/* 82078C4Ch case   15:*/		return 0x82078C50;
		  /* 82078C50h */ case   16:  		/* bc 12, CR6_GT, 168 */
		/* 82078C50h case   16:*/		if ( regs.CR[6].gt ) { return 0x82078CF8;  }
		/* 82078C50h case   16:*/		return 0x82078C54;
		  /* 82078C54h */ case   17:  		/* bc 12, CR6_EQ, 344 */
		/* 82078C54h case   17:*/		if ( regs.CR[6].eq ) { return 0x82078DAC;  }
		/* 82078C54h case   17:*/		return 0x82078C58;
		  /* 82078C58h */ case   18:  		/* cmplwi CR6, R3, 1 */
		/* 82078C58h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 82078C58h case   18:*/		return 0x82078C5C;
		  /* 82078C5Ch */ case   19:  		/* bc 12, CR6_LT, 136 */
		/* 82078C5Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x82078CE4;  }
		/* 82078C5Ch case   19:*/		return 0x82078C60;
		  /* 82078C60h */ case   20:  		/* bc 12, CR6_EQ, 132 */
		/* 82078C60h case   20:*/		if ( regs.CR[6].eq ) { return 0x82078CE4;  }
		/* 82078C60h case   20:*/		return 0x82078C64;
		  /* 82078C64h */ case   21:  		/* cmplwi CR6, R3, 16 */
		/* 82078C64h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000010);
		/* 82078C64h case   21:*/		return 0x82078C68;
		  /* 82078C68h */ case   22:  		/* bc 12, CR6_EQ, 80 */
		/* 82078C68h case   22:*/		if ( regs.CR[6].eq ) { return 0x82078CB8;  }
		/* 82078C68h case   22:*/		return 0x82078C6C;
		  /* 82078C6Ch */ case   23:  		/* cmplwi CR6, R3, 17 */
		/* 82078C6Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000011);
		/* 82078C6Ch case   23:*/		return 0x82078C70;
		  /* 82078C70h */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 82078C70h case   24:*/		if ( regs.CR[6].eq ) { return 0x82078C84;  }
		/* 82078C70h case   24:*/		return 0x82078C74;
		  /* 82078C74h */ case   25:  		/* cmplwi CR6, R3, 34 */
		/* 82078C74h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000022);
		/* 82078C74h case   25:*/		return 0x82078C78;
		  /* 82078C78h */ case   26:  		/* bc 4, CR6_EQ, 364 */
		/* 82078C78h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078C78h case   26:*/		return 0x82078C7C;
		  /* 82078C7Ch */ case   27:  		/* stw R4, <#[R31 + 23768]> */
		/* 82078C7Ch case   27:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00005CD8) );
		/* 82078C7Ch case   27:*/		return 0x82078C80;
		  /* 82078C80h */ case   28:  		/* b 356 */
		/* 82078C80h case   28:*/		return 0x82078DE4;
		/* 82078C80h case   28:*/		return 0x82078C84;
	}
	return 0x82078C84;
} // Block from 82078C10h-82078C84h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82078C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078C84);
		  /* 82078C84h */ case    0:  		/* lis R9, -32215 */
		/* 82078C84h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8229);
		/* 82078C84h case    0:*/		return 0x82078C88;
		  /* 82078C88h */ case    1:  		/* li R10, 1 */
		/* 82078C88h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82078C88h case    1:*/		return 0x82078C8C;
		  /* 82078C8Ch */ case    2:  		/* cmplwi CR6, R4, 6 */
		/* 82078C8Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000006);
		/* 82078C8Ch case    2:*/		return 0x82078C90;
		  /* 82078C90h */ case    3:  		/* slw R8, R10, R4 */
		/* 82078C90h case    3:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R10,regs.R4);
		/* 82078C90h case    3:*/		return 0x82078C94;
		  /* 82078C94h */ case    4:  		/* lwz R11, <#[R9 - 31592]> */
		/* 82078C94h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0xFFFF8498) );
		/* 82078C94h case    4:*/		return 0x82078C98;
		  /* 82078C98h */ case    5:  		/* or R11, R8, R11 */
		/* 82078C98h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82078C98h case    5:*/		return 0x82078C9C;
		  /* 82078C9Ch */ case    6:  		/* stw R11, <#[R9 - 31592]> */
		/* 82078C9Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFF8498) );
		/* 82078C9Ch case    6:*/		return 0x82078CA0;
		  /* 82078CA0h */ case    7:  		/* bc 4, CR6_EQ, 324 */
		/* 82078CA0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078CA0h case    7:*/		return 0x82078CA4;
		  /* 82078CA4h */ case    8:  		/* li R11, 0 */
		/* 82078CA4h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82078CA4h case    8:*/		return 0x82078CA8;
		  /* 82078CA8h */ case    9:  		/* stw R10, <#[R31 + 22040]> */
		/* 82078CA8h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005618) );
		/* 82078CA8h case    9:*/		return 0x82078CAC;
		  /* 82078CACh */ case   10:  		/* stw R11, <#[R31 + 22032]> */
		/* 82078CACh case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005610) );
		/* 82078CACh case   10:*/		return 0x82078CB0;
		  /* 82078CB0h */ case   11:  		/* stw R11, <#[R31 + 22036]> */
		/* 82078CB0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005614) );
		/* 82078CB0h case   11:*/		return 0x82078CB4;
		  /* 82078CB4h */ case   12:  		/* b 304 */
		/* 82078CB4h case   12:*/		return 0x82078DE4;
		/* 82078CB4h case   12:*/		return 0x82078CB8;
	}
	return 0x82078CB8;
} // Block from 82078C84h-82078CB8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82078CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078CB8);
		  /* 82078CB8h */ case    0:  		/* lis R10, -32215 */
		/* 82078CB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82078CB8h case    0:*/		return 0x82078CBC;
		  /* 82078CBCh */ case    1:  		/* li R11, 1 */
		/* 82078CBCh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82078CBCh case    1:*/		return 0x82078CC0;
		  /* 82078CC0h */ case    2:  		/* cmplwi CR6, R4, 6 */
		/* 82078CC0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000006);
		/* 82078CC0h case    2:*/		return 0x82078CC4;
		  /* 82078CC4h */ case    3:  		/* slw R9, R11, R4 */
		/* 82078CC4h case    3:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R4);
		/* 82078CC4h case    3:*/		return 0x82078CC8;
		  /* 82078CC8h */ case    4:  		/* lwz R11, <#[R10 - 31592]> */
		/* 82078CC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFF8498) );
		/* 82078CC8h case    4:*/		return 0x82078CCC;
		  /* 82078CCCh */ case    5:  		/* andc R11, R11, R9 */
		/* 82078CCCh case    5:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82078CCCh case    5:*/		return 0x82078CD0;
		  /* 82078CD0h */ case    6:  		/* stw R11, <#[R10 - 31592]> */
		/* 82078CD0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF8498) );
		/* 82078CD0h case    6:*/		return 0x82078CD4;
		  /* 82078CD4h */ case    7:  		/* bc 4, CR6_EQ, 272 */
		/* 82078CD4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078CD4h case    7:*/		return 0x82078CD8;
		  /* 82078CD8h */ case    8:  		/* li R11, 0 */
		/* 82078CD8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82078CD8h case    8:*/		return 0x82078CDC;
		  /* 82078CDCh */ case    9:  		/* stw R11, <#[R31 + 22040]> */
		/* 82078CDCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005618) );
		/* 82078CDCh case    9:*/		return 0x82078CE0;
		  /* 82078CE0h */ case   10:  		/* b 260 */
		/* 82078CE0h case   10:*/		return 0x82078DE4;
		/* 82078CE0h case   10:*/		return 0x82078CE4;
	}
	return 0x82078CE4;
} // Block from 82078CB8h-82078CE4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82078CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078CE4);
		  /* 82078CE4h */ case    0:  		/* lis R10, -32215 */
		/* 82078CE4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82078CE4h case    0:*/		return 0x82078CE8;
		  /* 82078CE8h */ case    1:  		/* li R11, 0 */
		/* 82078CE8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82078CE8h case    1:*/		return 0x82078CEC;
		  /* 82078CECh */ case    2:  		/* stw R11, <#[R31 + 22040]> */
		/* 82078CECh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005618) );
		/* 82078CECh case    2:*/		return 0x82078CF0;
		  /* 82078CF0h */ case    3:  		/* stw R11, <#[R10 - 31592]> */
		/* 82078CF0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF8498) );
		/* 82078CF0h case    3:*/		return 0x82078CF4;
		  /* 82078CF4h */ case    4:  		/* b 240 */
		/* 82078CF4h case    4:*/		return 0x82078DE4;
		/* 82078CF4h case    4:*/		return 0x82078CF8;
	}
	return 0x82078CF8;
} // Block from 82078CE4h-82078CF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82078CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078CF8);
		  /* 82078CF8h */ case    0:  		/* cmplwi CR6, R3, 225 */
		/* 82078CF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000000E1);
		/* 82078CF8h case    0:*/		return 0x82078CFC;
		  /* 82078CFCh */ case    1:  		/* bc 12, CR6_EQ, 176 */
		/* 82078CFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82078DAC;  }
		/* 82078CFCh case    1:*/		return 0x82078D00;
		  /* 82078D00h */ case    2:  		/* cmplwi CR6, R3, 226 */
		/* 82078D00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000000E2);
		/* 82078D00h case    2:*/		return 0x82078D04;
		  /* 82078D04h */ case    3:  		/* bc 12, CR6_EQ, 168 */
		/* 82078D04h case    3:*/		if ( regs.CR[6].eq ) { return 0x82078DAC;  }
		/* 82078D04h case    3:*/		return 0x82078D08;
		  /* 82078D08h */ case    4:  		/* cmplwi CR6, R3, 227 */
		/* 82078D08h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000000E3);
		/* 82078D08h case    4:*/		return 0x82078D0C;
		  /* 82078D0Ch */ case    5:  		/* bc 12, CR6_EQ, 148 */
		/* 82078D0Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82078DA0;  }
		/* 82078D0Ch case    5:*/		return 0x82078D10;
		  /* 82078D10h */ case    6:  		/* cmplwi CR6, R3, 255 */
		/* 82078D10h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000000FF);
		/* 82078D10h case    6:*/		return 0x82078D14;
		  /* 82078D14h */ case    7:  		/* bc 4, CR6_EQ, 208 */
		/* 82078D14h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078D14h case    7:*/		return 0x82078D18;
		  /* 82078D18h */ case    8:  		/* lis R28, -32215 */
		/* 82078D18h case    8:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8229);
		/* 82078D18h case    8:*/		return 0x82078D1C;
		  /* 82078D1Ch */ case    9:  		/* lwz R11, <#[R28 - 31592]> */
		/* 82078D1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0xFFFF8498) );
		/* 82078D1Ch case    9:*/		return 0x82078D20;
		  /* 82078D20h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82078D20h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82078D20h case   10:*/		return 0x82078D24;
		  /* 82078D24h */ case   11:  		/* bc 12, CR0_EQ, 52 */
		/* 82078D24h case   11:*/		if ( regs.CR[0].eq ) { return 0x82078D58;  }
		/* 82078D24h case   11:*/		return 0x82078D28;
		  /* 82078D28h */ case   12:  		/* lwz R11, <#[R31 + 21984]> */
		/* 82078D28h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055E0) );
		/* 82078D28h case   12:*/		return 0x82078D2C;
		  /* 82078D2Ch */ case   13:  		/* lfs FR13, <#[R31 + 22000]> */
		/* 82078D2Ch case   13:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R31 + 0x000055F0) );
		/* 82078D2Ch case   13:*/		return 0x82078D30;
		  /* 82078D30h */ case   14:  		/* lis R10, -32256 */
		/* 82078D30h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82078D30h case   14:*/		return 0x82078D34;
		  /* 82078D34h */ case   15:  		/* lis R3, 2 */
		/* 82078D34h case   15:*/		cpu::op::lis<0>(regs,&regs.R3,0x2);
		/* 82078D34h case   15:*/		return 0x82078D38;
		  /* 82078D38h */ case   16:  		/* std R11, <#[R1 + 80]> */
		/* 82078D38h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82078D38h case   16:*/		return 0x82078D3C;
		  /* 82078D3Ch */ case   17:  		/* lfd FR0, <#[R1 + 80]> */
		/* 82078D3Ch case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82078D3Ch case   17:*/		return 0x82078D40;
		  /* 82078D40h */ case   18:  		/* fcfid FR0, FR0 */
		/* 82078D40h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82078D40h case   18:*/		return 0x82078D44;
		  /* 82078D44h */ case   19:  		/* frsp FR12, FR0 */
		/* 82078D44h case   19:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR0);
		/* 82078D44h case   19:*/		return 0x82078D48;
		  /* 82078D48h */ case   20:  		/* lfs FR0, <#[R10 + 8392]> */
		/* 82078D48h case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x000020C8) );
		/* 82078D48h case   20:*/		return 0x82078D4C;
		  /* 82078D4Ch */ case   21:  		/* fmuls FR13, FR12, FR13 */
		/* 82078D4Ch case   21:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR12,regs.FR13);
		/* 82078D4Ch case   21:*/		return 0x82078D50;
		  /* 82078D50h */ case   22:  		/* fmuls FR1, FR13, FR0 */
		/* 82078D50h case   22:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR13,regs.FR0);
		/* 82078D50h case   22:*/		return 0x82078D54;
		  /* 82078D54h */ case   23:  		/* bl 63212 */
		/* 82078D54h case   23:*/		regs.LR = 0x82078D58; return 0x82088440;
		/* 82078D54h case   23:*/		return 0x82078D58;
	}
	return 0x82078D58;
} // Block from 82078CF8h-82078D58h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82078D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078D58);
		  /* 82078D58h */ case    0:  		/* lis R11, -32217 */
		/* 82078D58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82078D58h case    0:*/		return 0x82078D5C;
		  /* 82078D5Ch */ case    1:  		/* li R29, 17 */
		/* 82078D5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x11);
		/* 82078D5Ch case    1:*/		return 0x82078D60;
		  /* 82078D60h */ case    2:  		/* addi R11, R11, 1688 */
		/* 82078D60h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x698);
		/* 82078D60h case    2:*/		return 0x82078D64;
		  /* 82078D64h */ case    3:  		/* addi R30, R11, 8 */
		/* 82078D64h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 82078D64h case    3:*/		return 0x82078D68;
		  /* 82078D68h */ case    4:  		/* lwz R11, <#[R30 - 8]> */
		/* 82078D68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82078D68h case    4:*/		return 0x82078D6C;
		  /* 82078D6Ch */ case    5:  		/* lwz R10, <#[R28 - 31592]> */
		/* 82078D6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0xFFFF8498) );
		/* 82078D6Ch case    5:*/		return 0x82078D70;
		  /* 82078D70h */ case    6:  		/* and. R11, R11, R10 */
		/* 82078D70h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82078D70h case    6:*/		return 0x82078D74;
		  /* 82078D74h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82078D74h case    7:*/		if ( regs.CR[0].eq ) { return 0x82078D90;  }
		/* 82078D74h case    7:*/		return 0x82078D78;
		  /* 82078D78h */ case    8:  		/* mr R3, R31 */
		/* 82078D78h case    8:*/		regs.R3 = regs.R31;
		/* 82078D78h case    8:*/		return 0x82078D7C;
		  /* 82078D7Ch */ case    9:  		/* lwz R4, <#[R30]> */
		/* 82078D7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82078D7Ch case    9:*/		return 0x82078D80;
		  /* 82078D80h */ case   10:  		/* lwz R27, <#[R30 - 4]> */
		/* 82078D80h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82078D80h case   10:*/		return 0x82078D84;
		  /* 82078D84h */ case   11:  		/* bl -1628 */
		/* 82078D84h case   11:*/		regs.LR = 0x82078D88; return 0x82078728;
		/* 82078D84h case   11:*/		return 0x82078D88;
		  /* 82078D88h */ case   12:  		/* mr R3, R27 */
		/* 82078D88h case   12:*/		regs.R3 = regs.R27;
		/* 82078D88h case   12:*/		return 0x82078D8C;
		  /* 82078D8Ch */ case   13:  		/* bl 63156 */
		/* 82078D8Ch case   13:*/		regs.LR = 0x82078D90; return 0x82088440;
		/* 82078D8Ch case   13:*/		return 0x82078D90;
	}
	return 0x82078D90;
} // Block from 82078D58h-82078D90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82078D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078D90);
		  /* 82078D90h */ case    0:  		/* addic. R29, R29, -1 */
		/* 82078D90h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82078D90h case    0:*/		return 0x82078D94;
		  /* 82078D94h */ case    1:  		/* addi R30, R30, 12 */
		/* 82078D94h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xC);
		/* 82078D94h case    1:*/		return 0x82078D98;
		  /* 82078D98h */ case    2:  		/* bc 4, CR0_EQ, -48 */
		/* 82078D98h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82078D68;  }
		/* 82078D98h case    2:*/		return 0x82078D9C;
		  /* 82078D9Ch */ case    3:  		/* b 72 */
		/* 82078D9Ch case    3:*/		return 0x82078DE4;
		/* 82078D9Ch case    3:*/		return 0x82078DA0;
	}
	return 0x82078DA0;
} // Block from 82078D90h-82078DA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82078DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078DA0);
		  /* 82078DA0h */ case    0:  		/* mr R3, R31 */
		/* 82078DA0h case    0:*/		regs.R3 = regs.R31;
		/* 82078DA0h case    0:*/		return 0x82078DA4;
		  /* 82078DA4h */ case    1:  		/* bl -5260 */
		/* 82078DA4h case    1:*/		regs.LR = 0x82078DA8; return 0x82077918;
		/* 82078DA4h case    1:*/		return 0x82078DA8;
		  /* 82078DA8h */ case    2:  		/* b 60 */
		/* 82078DA8h case    2:*/		return 0x82078DE4;
		/* 82078DA8h case    2:*/		return 0x82078DAC;
	}
	return 0x82078DAC;
} // Block from 82078DA0h-82078DACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82078DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078DAC);
		  /* 82078DACh */ case    0:  		/* lwz R11, <#[R31 + 21940]> */
		/* 82078DACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055B4) );
		/* 82078DACh case    0:*/		return 0x82078DB0;
		  /* 82078DB0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82078DB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078DB0h case    1:*/		return 0x82078DB4;
		  /* 82078DB4h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 82078DB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078DB4h case    2:*/		return 0x82078DB8;
		  /* 82078DB8h */ case    3:  		/* bl 62944 */
		/* 82078DB8h case    3:*/		regs.LR = 0x82078DBC; return 0x82088398;
		/* 82078DB8h case    3:*/		return 0x82078DBC;
		  /* 82078DBCh */ case    4:  		/* lwz R11, <#[R31 + 11016]> */
		/* 82078DBCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B08) );
		/* 82078DBCh case    4:*/		return 0x82078DC0;
		  /* 82078DC0h */ case    5:  		/* cmplw CR6, R11, R3 */
		/* 82078DC0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 82078DC0h case    5:*/		return 0x82078DC4;
		  /* 82078DC4h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 82078DC4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82078DE4;  }
		/* 82078DC4h case    6:*/		return 0x82078DC8;
		  /* 82078DC8h */ case    7:  		/* lwz R11, <#[R31 + 56]> */
		/* 82078DC8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82078DC8h case    7:*/		return 0x82078DCC;
		  /* 82078DCCh */ case    8:  		/* lwz R3, <#[R31 + 48]> */
		/* 82078DCCh case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82078DCCh case    8:*/		return 0x82078DD0;
		  /* 82078DD0h */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 82078DD0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82078DD0h case    9:*/		return 0x82078DD4;
		  /* 82078DD4h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 82078DD4h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82078DE0;  }
		/* 82078DD4h case   10:*/		return 0x82078DD8;
		  /* 82078DD8h */ case   11:  		/* mr R3, R31 */
		/* 82078DD8h case   11:*/		regs.R3 = regs.R31;
		/* 82078DD8h case   11:*/		return 0x82078DDC;
		  /* 82078DDCh */ case   12:  		/* bl -19668 */
		/* 82078DDCh case   12:*/		regs.LR = 0x82078DE0; return 0x82074108;
		/* 82078DDCh case   12:*/		return 0x82078DE0;
	}
	return 0x82078DE0;
} // Block from 82078DACh-82078DE0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82078DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078DE0);
		  /* 82078DE0h */ case    0:  		/* stw R3, <#[R31 + 48]> */
		/* 82078DE0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82078DE0h case    0:*/		return 0x82078DE4;
	}
	return 0x82078DE4;
} // Block from 82078DE0h-82078DE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82078DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078DE4);
		  /* 82078DE4h */ case    0:  		/* addi R1, R1, 144 */
		/* 82078DE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82078DE4h case    0:*/		return 0x82078DE8;
		  /* 82078DE8h */ case    1:  		/* b 99516 */
		/* 82078DE8h case    1:*/		return 0x820912A4;
		/* 82078DE8h case    1:*/		return 0x82078DEC;
		  /* 82078DECh */ case    2:  		/* nop */
		/* 82078DECh case    2:*/		cpu::op::nop();
		/* 82078DECh case    2:*/		return 0x82078DF0;
	}
	return 0x82078DF0;
} // Block from 82078DE4h-82078DF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82078DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078DF0);
		  /* 82078DF0h */ case    0:  		/* mfspr R12, LR */
		/* 82078DF0h case    0:*/		regs.R12 = regs.LR;
		/* 82078DF0h case    0:*/		return 0x82078DF4;
		  /* 82078DF4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82078DF4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82078DF4h case    1:*/		return 0x82078DF8;
		  /* 82078DF8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82078DF8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078DF8h case    2:*/		return 0x82078DFC;
		  /* 82078DFCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82078DFCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078DFCh case    3:*/		return 0x82078E00;
		  /* 82078E00h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82078E00h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82078E00h case    4:*/		return 0x82078E04;
		  /* 82078E04h */ case    5:  		/* lis R11, -32256 */
		/* 82078E04h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82078E04h case    5:*/		return 0x82078E08;
		  /* 82078E08h */ case    6:  		/* mr R30, R3 */
		/* 82078E08h case    6:*/		regs.R30 = regs.R3;
		/* 82078E08h case    6:*/		return 0x82078E0C;
		  /* 82078E0Ch */ case    7:  		/* lis R31, -32256 */
		/* 82078E0Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8200);
		/* 82078E0Ch case    7:*/		return 0x82078E10;
		  /* 82078E10h */ case    8:  		/* lwz R11, <#[R11 + 1144]> */
		/* 82078E10h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000478) );
		/* 82078E10h case    8:*/		return 0x82078E14;
		  /* 82078E14h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 82078E14h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82078E14h case    9:*/		return 0x82078E18;
		  /* 82078E18h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 82078E18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82078E18h case   10:*/		return 0x82078E1C;
		  /* 82078E1Ch */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 82078E1Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82078E3C;  }
		/* 82078E1Ch case   11:*/		return 0x82078E20;
		  /* 82078E20h */ case   12:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82078E20h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82078E20h case   12:*/		return 0x82078E24;
		  /* 82078E24h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82078E24h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078E24h case   13:*/		return 0x82078E28;
		  /* 82078E28h */ case   14:  		/* bc 12, CR6_EQ, 60 */
		/* 82078E28h case   14:*/		if ( regs.CR[6].eq ) { return 0x82078E64;  }
		/* 82078E28h case   14:*/		return 0x82078E2C;
		  /* 82078E2Ch */ case   15:  		/* lwz R11, <#[R11]> */
		/* 82078E2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82078E2Ch case   15:*/		return 0x82078E30;
		  /* 82078E30h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82078E30h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078E30h case   16:*/		return 0x82078E34;
		  /* 82078E34h */ case   17:  		/* bc 12, CR6_EQ, 48 */
		/* 82078E34h case   17:*/		if ( regs.CR[6].eq ) { return 0x82078E64;  }
		/* 82078E34h case   17:*/		return 0x82078E38;
		  /* 82078E38h */ case   18:  		/* b 24 */
		/* 82078E38h case   18:*/		return 0x82078E50;
		/* 82078E38h case   18:*/		return 0x82078E3C;
	}
	return 0x82078E3C;
} // Block from 82078DF0h-82078E3Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82078E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078E3C);
		  /* 82078E3Ch */ case    0:  		/* lwz R11, <#[R31 + 1140]> */
		/* 82078E3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000474) );
		/* 82078E3Ch case    0:*/		return 0x82078E40;
		  /* 82078E40h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 82078E40h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82078E40h case    1:*/		return 0x82078E44;
		  /* 82078E44h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82078E44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078E44h case    2:*/		return 0x82078E48;
		  /* 82078E48h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82078E48h case    3:*/		if ( regs.CR[6].eq ) { return 0x82078E64;  }
		/* 82078E48h case    3:*/		return 0x82078E4C;
		  /* 82078E4Ch */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 82078E4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82078E4Ch case    4:*/		return 0x82078E50;
	}
	return 0x82078E50;
} // Block from 82078E3Ch-82078E50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82078E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078E50);
		  /* 82078E50h */ case    0:  		/* lis R10, -32249 */
		/* 82078E50h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8207);
		/* 82078E50h case    0:*/		return 0x82078E54;
		  /* 82078E54h */ case    1:  		/* mtspr CTR, R11 */
		/* 82078E54h case    1:*/		regs.CTR = regs.R11;
		/* 82078E54h case    1:*/		return 0x82078E58;
		  /* 82078E58h */ case    2:  		/* li R3, 28 */
		/* 82078E58h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 82078E58h case    2:*/		return 0x82078E5C;
		  /* 82078E5Ch */ case    3:  		/* addi R4, R10, 31520 */
		/* 82078E5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x7B20);
		/* 82078E5Ch case    3:*/		return 0x82078E60;
		  /* 82078E60h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82078E60h case    4:*/		if ( 1 ) { regs.LR = 0x82078E64; return (uint32)regs.CTR; }
		/* 82078E60h case    4:*/		return 0x82078E64;
	}
	return 0x82078E64;
} // Block from 82078E50h-82078E64h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82078E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078E64);
		  /* 82078E64h */ case    0:  		/* lis R11, -32249 */
		/* 82078E64h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8207);
		/* 82078E64h case    0:*/		return 0x82078E68;
		  /* 82078E68h */ case    1:  		/* lwz R10, <#[R31 + 1140]> */
		/* 82078E68h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000474) );
		/* 82078E68h case    1:*/		return 0x82078E6C;
		  /* 82078E6Ch */ case    2:  		/* stw R30, <#[R1 + 84]> */
		/* 82078E6Ch case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82078E6Ch case    2:*/		return 0x82078E70;
		  /* 82078E70h */ case    3:  		/* addi R11, R11, 31288 */
		/* 82078E70h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x7A38);
		/* 82078E70h case    3:*/		return 0x82078E74;
		  /* 82078E74h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 82078E74h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82078E74h case    4:*/		return 0x82078E78;
		  /* 82078E78h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 82078E78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82078E78h case    5:*/		return 0x82078E7C;
		  /* 82078E7Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82078E7Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078E7Ch case    6:*/		return 0x82078E80;
		  /* 82078E80h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 82078E80h case    7:*/		if ( regs.CR[6].eq ) { return 0x82078E98;  }
		/* 82078E80h case    7:*/		return 0x82078E84;
		  /* 82078E84h */ case    8:  		/* lwz R11, <#[R11 + 24]> */
		/* 82078E84h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82078E84h case    8:*/		return 0x82078E88;
		  /* 82078E88h */ case    9:  		/* addi R4, R1, 80 */
		/* 82078E88h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82078E88h case    9:*/		return 0x82078E8C;
		  /* 82078E8Ch */ case   10:  		/* li R3, 66 */
		/* 82078E8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x42);
		/* 82078E8Ch case   10:*/		return 0x82078E90;
		  /* 82078E90h */ case   11:  		/* mtspr CTR, R11 */
		/* 82078E90h case   11:*/		regs.CTR = regs.R11;
		/* 82078E90h case   11:*/		return 0x82078E94;
		  /* 82078E94h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82078E94h case   12:*/		if ( 1 ) { regs.LR = 0x82078E98; return (uint32)regs.CTR; }
		/* 82078E94h case   12:*/		return 0x82078E98;
	}
	return 0x82078E98;
} // Block from 82078E64h-82078E98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82078E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078E98);
		  /* 82078E98h */ case    0:  		/* lwz R11, <#[R31 + 1140]> */
		/* 82078E98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000474) );
		/* 82078E98h case    0:*/		return 0x82078E9C;
		  /* 82078E9Ch */ case    1:  		/* lwz R11, <#[R11]> */
		/* 82078E9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82078E9Ch case    1:*/		return 0x82078EA0;
		  /* 82078EA0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82078EA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078EA0h case    2:*/		return 0x82078EA4;
		  /* 82078EA4h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82078EA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82078EC0;  }
		/* 82078EA4h case    3:*/		return 0x82078EA8;
		  /* 82078EA8h */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 82078EA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82078EA8h case    4:*/		return 0x82078EAC;
		  /* 82078EACh */ case    5:  		/* lis R10, -32248 */
		/* 82078EACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 82078EACh case    5:*/		return 0x82078EB0;
		  /* 82078EB0h */ case    6:  		/* li R3, 89 */
		/* 82078EB0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x59);
		/* 82078EB0h case    6:*/		return 0x82078EB4;
		  /* 82078EB4h */ case    7:  		/* addi R4, R10, -29680 */
		/* 82078EB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8C10);
		/* 82078EB4h case    7:*/		return 0x82078EB8;
		  /* 82078EB8h */ case    8:  		/* mtspr CTR, R11 */
		/* 82078EB8h case    8:*/		regs.CTR = regs.R11;
		/* 82078EB8h case    8:*/		return 0x82078EBC;
		  /* 82078EBCh */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82078EBCh case    9:*/		if ( 1 ) { regs.LR = 0x82078EC0; return (uint32)regs.CTR; }
		/* 82078EBCh case    9:*/		return 0x82078EC0;
	}
	return 0x82078EC0;
} // Block from 82078E98h-82078EC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82078EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078EC0);
		  /* 82078EC0h */ case    0:  		/* li R11, 0 */
		/* 82078EC0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82078EC0h case    0:*/		return 0x82078EC4;
		  /* 82078EC4h */ case    1:  		/* li R10, 1 */
		/* 82078EC4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82078EC4h case    1:*/		return 0x82078EC8;
		  /* 82078EC8h */ case    2:  		/* stw R11, <#[R30 + 22032]> */
		/* 82078EC8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00005610) );
		/* 82078EC8h case    2:*/		return 0x82078ECC;
		  /* 82078ECCh */ case    3:  		/* stw R11, <#[R30 + 22036]> */
		/* 82078ECCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00005614) );
		/* 82078ECCh case    3:*/		return 0x82078ED0;
		  /* 82078ED0h */ case    4:  		/* stw R10, <#[R30 + 22040]> */
		/* 82078ED0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00005618) );
		/* 82078ED0h case    4:*/		return 0x82078ED4;
		  /* 82078ED4h */ case    5:  		/* addi R1, R1, 112 */
		/* 82078ED4h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82078ED4h case    5:*/		return 0x82078ED8;
		  /* 82078ED8h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82078ED8h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82078ED8h case    6:*/		return 0x82078EDC;
		  /* 82078EDCh */ case    7:  		/* mtspr LR, R12 */
		/* 82078EDCh case    7:*/		regs.LR = regs.R12;
		/* 82078EDCh case    7:*/		return 0x82078EE0;
		  /* 82078EE0h */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 82078EE0h case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078EE0h case    8:*/		return 0x82078EE4;
		  /* 82078EE4h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82078EE4h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078EE4h case    9:*/		return 0x82078EE8;
		  /* 82078EE8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82078EE8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82078EE8h case   10:*/		return 0x82078EEC;
	}
	return 0x82078EEC;
} // Block from 82078EC0h-82078EECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82078EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078EEC);
		  /* 82078EECh */ case    0:  		/* nop */
		/* 82078EECh case    0:*/		cpu::op::nop();
		/* 82078EECh case    0:*/		return 0x82078EF0;
	}
	return 0x82078EF0;
} // Block from 82078EECh-82078EF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82078EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078EF0);
		  /* 82078EF0h */ case    0:  		/* mfspr R12, LR */
		/* 82078EF0h case    0:*/		regs.R12 = regs.LR;
		/* 82078EF0h case    0:*/		return 0x82078EF4;
		  /* 82078EF4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82078EF4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82078EF4h case    1:*/		return 0x82078EF8;
		  /* 82078EF8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82078EF8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078EF8h case    2:*/		return 0x82078EFC;
		  /* 82078EFCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82078EFCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078EFCh case    3:*/		return 0x82078F00;
		  /* 82078F00h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82078F00h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82078F00h case    4:*/		return 0x82078F04;
		  /* 82078F04h */ case    5:  		/* lis R31, -32256 */
		/* 82078F04h case    5:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8200);
		/* 82078F04h case    5:*/		return 0x82078F08;
		  /* 82078F08h */ case    6:  		/* mr R30, R3 */
		/* 82078F08h case    6:*/		regs.R30 = regs.R3;
		/* 82078F08h case    6:*/		return 0x82078F0C;
		  /* 82078F0Ch */ case    7:  		/* lwz R11, <#[R31 + 1140]> */
		/* 82078F0Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000474) );
		/* 82078F0Ch case    7:*/		return 0x82078F10;
		  /* 82078F10h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 82078F10h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82078F10h case    8:*/		return 0x82078F14;
		  /* 82078F14h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 82078F14h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82078F14h case    9:*/		return 0x82078F18;
		  /* 82078F18h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 82078F18h case   10:*/		if ( regs.CR[6].eq ) { return 0x82078F34;  }
		/* 82078F18h case   10:*/		return 0x82078F1C;
		  /* 82078F1Ch */ case   11:  		/* lwz R11, <#[R10 + 24]> */
		/* 82078F1Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82078F1Ch case   11:*/		return 0x82078F20;
		  /* 82078F20h */ case   12:  		/* li R4, 0 */
		/* 82078F20h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82078F20h case   12:*/		return 0x82078F24;
		  /* 82078F24h */ case   13:  		/* li R3, 28 */
		/* 82078F24h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x1C);
		/* 82078F24h case   13:*/		return 0x82078F28;
		  /* 82078F28h */ case   14:  		/* mtspr CTR, R11 */
		/* 82078F28h case   14:*/		regs.CTR = regs.R11;
		/* 82078F28h case   14:*/		return 0x82078F2C;
		  /* 82078F2Ch */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82078F2Ch case   15:*/		if ( 1 ) { regs.LR = 0x82078F30; return (uint32)regs.CTR; }
		/* 82078F2Ch case   15:*/		return 0x82078F30;
		  /* 82078F30h */ case   16:  		/* lwz R11, <#[R31 + 1140]> */
		/* 82078F30h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000474) );
		/* 82078F30h case   16:*/		return 0x82078F34;
	}
	return 0x82078F34;
} // Block from 82078EF0h-82078F34h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82078F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078F34);
		  /* 82078F34h */ case    0:  		/* lis R10, -32249 */
		/* 82078F34h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8207);
		/* 82078F34h case    0:*/		return 0x82078F38;
		  /* 82078F38h */ case    1:  		/* stw R30, <#[R1 + 84]> */
		/* 82078F38h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82078F38h case    1:*/		return 0x82078F3C;
		  /* 82078F3Ch */ case    2:  		/* addi R10, R10, 31288 */
		/* 82078F3Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7A38);
		/* 82078F3Ch case    2:*/		return 0x82078F40;
		  /* 82078F40h */ case    3:  		/* stw R10, <#[R1 + 80]> */
		/* 82078F40h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82078F40h case    3:*/		return 0x82078F44;
		  /* 82078F44h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82078F44h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82078F44h case    4:*/		return 0x82078F48;
		  /* 82078F48h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 82078F48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82078F48h case    5:*/		return 0x82078F4C;
		  /* 82078F4Ch */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82078F4Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82078F68;  }
		/* 82078F4Ch case    6:*/		return 0x82078F50;
		  /* 82078F50h */ case    7:  		/* lwz R11, <#[R10 + 24]> */
		/* 82078F50h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 82078F50h case    7:*/		return 0x82078F54;
		  /* 82078F54h */ case    8:  		/* addi R4, R1, 80 */
		/* 82078F54h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82078F54h case    8:*/		return 0x82078F58;
		  /* 82078F58h */ case    9:  		/* li R3, 65 */
		/* 82078F58h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x41);
		/* 82078F58h case    9:*/		return 0x82078F5C;
		  /* 82078F5Ch */ case   10:  		/* mtspr CTR, R11 */
		/* 82078F5Ch case   10:*/		regs.CTR = regs.R11;
		/* 82078F5Ch case   10:*/		return 0x82078F60;
		  /* 82078F60h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82078F60h case   11:*/		if ( 1 ) { regs.LR = 0x82078F64; return (uint32)regs.CTR; }
		/* 82078F60h case   11:*/		return 0x82078F64;
		  /* 82078F64h */ case   12:  		/* lwz R11, <#[R31 + 1140]> */
		/* 82078F64h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000474) );
		/* 82078F64h case   12:*/		return 0x82078F68;
	}
	return 0x82078F68;
} // Block from 82078F34h-82078F68h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82078F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078F68);
		  /* 82078F68h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82078F68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82078F68h case    0:*/		return 0x82078F6C;
		  /* 82078F6Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82078F6Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078F6Ch case    1:*/		return 0x82078F70;
		  /* 82078F70h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82078F70h case    2:*/		if ( regs.CR[6].eq ) { return 0x82078F8C;  }
		/* 82078F70h case    2:*/		return 0x82078F74;
		  /* 82078F74h */ case    3:  		/* lwz R11, <#[R11 + 24]> */
		/* 82078F74h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82078F74h case    3:*/		return 0x82078F78;
		  /* 82078F78h */ case    4:  		/* lis R10, -32248 */
		/* 82078F78h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 82078F78h case    4:*/		return 0x82078F7C;
		  /* 82078F7Ch */ case    5:  		/* li R3, 90 */
		/* 82078F7Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x5A);
		/* 82078F7Ch case    5:*/		return 0x82078F80;
		  /* 82078F80h */ case    6:  		/* addi R4, R10, -29680 */
		/* 82078F80h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFF8C10);
		/* 82078F80h case    6:*/		return 0x82078F84;
		  /* 82078F84h */ case    7:  		/* mtspr CTR, R11 */
		/* 82078F84h case    7:*/		regs.CTR = regs.R11;
		/* 82078F84h case    7:*/		return 0x82078F88;
		  /* 82078F88h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82078F88h case    8:*/		if ( 1 ) { regs.LR = 0x82078F8C; return (uint32)regs.CTR; }
		/* 82078F88h case    8:*/		return 0x82078F8C;
	}
	return 0x82078F8C;
} // Block from 82078F68h-82078F8Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82078F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078F8C);
		  /* 82078F8Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82078F8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82078F8Ch case    0:*/		return 0x82078F90;
		  /* 82078F90h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82078F90h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82078F90h case    1:*/		return 0x82078F94;
		  /* 82078F94h */ case    2:  		/* mtspr LR, R12 */
		/* 82078F94h case    2:*/		regs.LR = regs.R12;
		/* 82078F94h case    2:*/		return 0x82078F98;
		  /* 82078F98h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82078F98h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82078F98h case    3:*/		return 0x82078F9C;
		  /* 82078F9Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82078F9Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82078F9Ch case    4:*/		return 0x82078FA0;
		  /* 82078FA0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82078FA0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82078FA0h case    5:*/		return 0x82078FA4;
	}
	return 0x82078FA4;
} // Block from 82078F8Ch-82078FA4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82078FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078FA4);
		  /* 82078FA4h */ case    0:  		/* nop */
		/* 82078FA4h case    0:*/		cpu::op::nop();
		/* 82078FA4h case    0:*/		return 0x82078FA8;
	}
	return 0x82078FA8;
} // Block from 82078FA4h-82078FA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82078FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078FA8);
		  /* 82078FA8h */ case    0:  		/* mfspr R12, LR */
		/* 82078FA8h case    0:*/		regs.R12 = regs.LR;
		/* 82078FA8h case    0:*/		return 0x82078FAC;
		  /* 82078FACh */ case    1:  		/* bl 98992 */
		/* 82078FACh case    1:*/		regs.LR = 0x82078FB0; return 0x8209125C;
		/* 82078FACh case    1:*/		return 0x82078FB0;
		  /* 82078FB0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82078FB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82078FB0h case    2:*/		return 0x82078FB4;
		  /* 82078FB4h */ case    3:  		/* lwz R11, <#[R3 + 22044]> */
		/* 82078FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000561C) );
		/* 82078FB4h case    3:*/		return 0x82078FB8;
		  /* 82078FB8h */ case    4:  		/* mr R29, R3 */
		/* 82078FB8h case    4:*/		regs.R29 = regs.R3;
		/* 82078FB8h case    4:*/		return 0x82078FBC;
		  /* 82078FBCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82078FBCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078FBCh case    5:*/		return 0x82078FC0;
		  /* 82078FC0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 82078FC0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82078FE4;  }
		/* 82078FC0h case    6:*/		return 0x82078FC4;
		  /* 82078FC4h */ case    7:  		/* lis R4, -23680 */
		/* 82078FC4h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA380);
		/* 82078FC4h case    7:*/		return 0x82078FC8;
		  /* 82078FC8h */ case    8:  		/* li R3, 1952 */
		/* 82078FC8h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x7A0);
		/* 82078FC8h case    8:*/		return 0x82078FCC;
		  /* 82078FCCh */ case    9:  		/* bl 62004 */
		/* 82078FCCh case    9:*/		regs.LR = 0x82078FD0; return 0x82088200;
		/* 82078FCCh case    9:*/		return 0x82078FD0;
		  /* 82078FD0h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 82078FD0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82078FD0h case   10:*/		return 0x82078FD4;
		  /* 82078FD4h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 82078FD4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82078FE0;  }
		/* 82078FD4h case   11:*/		return 0x82078FD8;
		  /* 82078FD8h */ case   12:  		/* li R3, 0 */
		/* 82078FD8h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82078FD8h case   12:*/		return 0x82078FDC;
		  /* 82078FDCh */ case   13:  		/* b 100 */
		/* 82078FDCh case   13:*/		return 0x82079040;
		/* 82078FDCh case   13:*/		return 0x82078FE0;
	}
	return 0x82078FE0;
} // Block from 82078FA8h-82078FE0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82078FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078FE0);
		  /* 82078FE0h */ case    0:  		/* stw R3, <#[R29 + 22044]> */
		/* 82078FE0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000561C) );
		/* 82078FE0h case    0:*/		return 0x82078FE4;
	}
	return 0x82078FE4;
} // Block from 82078FE0h-82078FE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82078FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82078FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82078FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82078FE4);
		  /* 82078FE4h */ case    0:  		/* lwz R11, <#[R29 + 22048]> */
		/* 82078FE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00005620) );
		/* 82078FE4h case    0:*/		return 0x82078FE8;
		  /* 82078FE8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82078FE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82078FE8h case    1:*/		return 0x82078FEC;
		  /* 82078FECh */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82078FECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82079008;  }
		/* 82078FECh case    2:*/		return 0x82078FF0;
		  /* 82078FF0h */ case    3:  		/* lis R4, 9344 */
		/* 82078FF0h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 82078FF0h case    3:*/		return 0x82078FF4;
		  /* 82078FF4h */ case    4:  		/* li R3, 64 */
		/* 82078FF4h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x40);
		/* 82078FF4h case    4:*/		return 0x82078FF8;
		  /* 82078FF8h */ case    5:  		/* bl 61960 */
		/* 82078FF8h case    5:*/		regs.LR = 0x82078FFC; return 0x82088200;
		/* 82078FF8h case    5:*/		return 0x82078FFC;
		  /* 82078FFCh */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 82078FFCh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82078FFCh case    6:*/		return 0x82079000;
		  /* 82079000h */ case    7:  		/* bc 12, CR0_EQ, -40 */
		/* 82079000h case    7:*/		if ( regs.CR[0].eq ) { return 0x82078FD8;  }
		/* 82079000h case    7:*/		return 0x82079004;
		  /* 82079004h */ case    8:  		/* stw R3, <#[R29 + 22048]> */
		/* 82079004h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005620) );
		/* 82079004h case    8:*/		return 0x82079008;
	}
	return 0x82079008;
} // Block from 82078FE4h-82079008h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82079008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079008);
		  /* 82079008h */ case    0:  		/* li R30, 0 */
		/* 82079008h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82079008h case    0:*/		return 0x8207900C;
		  /* 8207900Ch */ case    1:  		/* li R31, 0 */
		/* 8207900Ch case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8207900Ch case    1:*/		return 0x82079010;
		  /* 82079010h */ case    2:  		/* lwz R10, <#[R29 + 22048]> */
		/* 82079010h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005620) );
		/* 82079010h case    2:*/		return 0x82079014;
		  /* 82079014h */ case    3:  		/* li R4, 1 */
		/* 82079014h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82079014h case    3:*/		return 0x82079018;
		  /* 82079018h */ case    4:  		/* lwz R11, <#[R29 + 22044]> */
		/* 82079018h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000561C) );
		/* 82079018h case    4:*/		return 0x8207901C;
		  /* 8207901Ch */ case    5:  		/* mr R3, R29 */
		/* 8207901Ch case    5:*/		regs.R3 = regs.R29;
		/* 8207901Ch case    5:*/		return 0x82079020;
		  /* 82079020h */ case    6:  		/* add R6, R10, R31 */
		/* 82079020h case    6:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R31);
		/* 82079020h case    6:*/		return 0x82079024;
		  /* 82079024h */ case    7:  		/* add R5, R30, R11 */
		/* 82079024h case    7:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R11);
		/* 82079024h case    7:*/		return 0x82079028;
	}
	return 0x82079028;
} // Block from 82079008h-82079028h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82079028h
// Function 'D3DDevice_ResolveEx'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079028);
		  /* 82079028h */ case    0:  		/* bl -15128 */
		/* 82079028h case    0:*/		regs.LR = 0x8207902C; return 0x82075510;
		/* 82079028h case    0:*/		return 0x8207902C;
		  /* 8207902Ch */ case    1:  		/* addi R31, R31, 16 */
		/* 8207902Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8207902Ch case    1:*/		return 0x82079030;
		  /* 82079030h */ case    2:  		/* addi R30, R30, 480 */
		/* 82079030h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1E0);
		/* 82079030h case    2:*/		return 0x82079034;
		  /* 82079034h */ case    3:  		/* cmpwi CR6, R31, 64 */
		/* 82079034h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000040);
		/* 82079034h case    3:*/		return 0x82079038;
		  /* 82079038h */ case    4:  		/* bc 12, CR6_LT, -40 */
		/* 82079038h case    4:*/		if ( regs.CR[6].lt ) { return 0x82079010;  }
		/* 82079038h case    4:*/		return 0x8207903C;
		  /* 8207903Ch */ case    5:  		/* li R3, 1 */
		/* 8207903Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207903Ch case    5:*/		return 0x82079040;
	}
	return 0x82079040;
} // Block from 82079028h-82079040h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82079040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079040);
		  /* 82079040h */ case    0:  		/* addi R1, R1, 112 */
		/* 82079040h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82079040h case    0:*/		return 0x82079044;
		  /* 82079044h */ case    1:  		/* b 98920 */
		/* 82079044h case    1:*/		return 0x820912AC;
		/* 82079044h case    1:*/		return 0x82079048;
	}
	return 0x82079048;
} // Block from 82079040h-82079048h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82079048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079048);
		  /* 82079048h */ case    0:  		/* mfspr R12, LR */
		/* 82079048h case    0:*/		regs.R12 = regs.LR;
		/* 82079048h case    0:*/		return 0x8207904C;
		  /* 8207904Ch */ case    1:  		/* bl 98792 */
		/* 8207904Ch case    1:*/		regs.LR = 0x82079050; return 0x82091234;
		/* 8207904Ch case    1:*/		return 0x82079050;
		  /* 82079050h */ case    2:  		/* stfd FR31, <#[R1 - 120]> */
		/* 82079050h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 82079050h case    2:*/		return 0x82079054;
		  /* 82079054h */ case    3:  		/* stwu R1, <#[R1 - 896]> */
		/* 82079054h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFC80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFC80);
		/* 82079054h case    3:*/		return 0x82079058;
		  /* 82079058h */ case    4:  		/* addi R9, R1, 244 */
		/* 82079058h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF4);
		/* 82079058h case    4:*/		return 0x8207905C;
		  /* 8207905Ch */ case    5:  		/* li R11, 6 */
		/* 8207905Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8207905Ch case    5:*/		return 0x82079060;
		  /* 82079060h */ case    6:  		/* li R30, 0 */
		/* 82079060h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82079060h case    6:*/		return 0x82079064;
		  /* 82079064h */ case    7:  		/* mr R26, R8 */
		/* 82079064h case    7:*/		regs.R26 = regs.R8;
		/* 82079064h case    7:*/		return 0x82079068;
		  /* 82079068h */ case    8:  		/* stw R30, <#[R1 + 240]> */
		/* 82079068h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000F0) );
		/* 82079068h case    8:*/		return 0x8207906C;
		  /* 8207906Ch */ case    9:  		/* addi R10, R1, 720 */
		/* 8207906Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x2D0);
		/* 8207906Ch case    9:*/		return 0x82079070;
		  /* 82079070h */ case   10:  		/* addi R8, R7, 7 */
		/* 82079070h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x7);
		/* 82079070h case   10:*/		return 0x82079074;
		  /* 82079074h */ case   11:  		/* stw R30, <#[R9]> */
		/* 82079074h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + 0x00000000) );
		/* 82079074h case   11:*/		return 0x82079078;
		  /* 82079078h */ case   12:  		/* mr R27, R7 */
		/* 82079078h case   12:*/		regs.R27 = regs.R7;
		/* 82079078h case   12:*/		return 0x8207907C;
		  /* 8207907Ch */ case   13:  		/* stw R30, <#[R9 + 4]> */
		/* 8207907Ch case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + 0x00000004) );
		/* 8207907Ch case   13:*/		return 0x82079080;
		  /* 82079080h */ case   14:  		/* addi R7, R26, 7 */
		/* 82079080h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R26,0x7);
		/* 82079080h case   14:*/		return 0x82079084;
		  /* 82079084h */ case   15:  		/* mtspr CTR, R11 */
		/* 82079084h case   15:*/		regs.CTR = regs.R11;
		/* 82079084h case   15:*/		return 0x82079088;
		  /* 82079088h */ case   16:  		/* stw R30, <#[R9 + 8]> */
		/* 82079088h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + 0x00000008) );
		/* 82079088h case   16:*/		return 0x8207908C;
		  /* 8207908Ch */ case   17:  		/* addi R11, R10, -8 */
		/* 8207908Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFF8);
		/* 8207908Ch case   17:*/		return 0x82079090;
		  /* 82079090h */ case   18:  		/* mr R31, R3 */
		/* 82079090h case   18:*/		regs.R31 = regs.R3;
		/* 82079090h case   18:*/		return 0x82079094;
		  /* 82079094h */ case   19:  		/* mr R25, R4 */
		/* 82079094h case   19:*/		regs.R25 = regs.R4;
		/* 82079094h case   19:*/		return 0x82079098;
		  /* 82079098h */ case   20:  		/* mr R23, R5 */
		/* 82079098h case   20:*/		regs.R23 = regs.R5;
		/* 82079098h case   20:*/		return 0x8207909C;
		  /* 8207909Ch */ case   21:  		/* mr R24, R6 */
		/* 8207909Ch case   21:*/		regs.R24 = regs.R6;
		/* 8207909Ch case   21:*/		return 0x820790A0;
		  /* 820790A0h */ case   22:  		/* rlwinm R22, R8, 0, 0, 28 */
		/* 820790A0h case   22:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R22,regs.R8);
		/* 820790A0h case   22:*/		return 0x820790A4;
		  /* 820790A4h */ case   23:  		/* rlwinm R21, R7, 0, 0, 28 */
		/* 820790A4h case   23:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R21,regs.R7);
		/* 820790A4h case   23:*/		return 0x820790A8;
		  /* 820790A8h */ case   24:  		/* mr R10, R30 */
		/* 820790A8h case   24:*/		regs.R10 = regs.R30;
		/* 820790A8h case   24:*/		return 0x820790AC;
		  /* 820790ACh */ case   25:  		/* stdu R10, <#[R11 + 8]> */
		/* 820790ACh case   25:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 820790ACh case   25:*/		return 0x820790B0;
		  /* 820790B0h */ case   26:  		/* bc 16, CR0_LT, -4 */
		/* 820790B0h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820790AC;  }
		/* 820790B0h case   26:*/		return 0x820790B4;
		  /* 820790B4h */ case   27:  		/* lis R5, 10280 */
		/* 820790B4h case   27:*/		cpu::op::lis<0>(regs,&regs.R5,0x2828);
		/* 820790B4h case   27:*/		return 0x820790B8;
		  /* 820790B8h */ case   28:  		/* addi R10, R1, 228 */
		/* 820790B8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE4);
		/* 820790B8h case   28:*/		return 0x820790BC;
		  /* 820790BCh */ case   29:  		/* addi R9, R1, 224 */
		/* 820790BCh case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 820790BCh case   29:*/		return 0x820790C0;
		  /* 820790C0h */ case   30:  		/* addi R8, R1, 720 */
		/* 820790C0h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x2D0);
		/* 820790C0h case   30:*/		return 0x820790C4;
		  /* 820790C4h */ case   31:  		/* addi R7, R1, 240 */
		/* 820790C4h case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF0);
		/* 820790C4h case   31:*/		return 0x820790C8;
		  /* 820790C8h */ case   32:  		/* li R6, 0 */
		/* 820790C8h case   32:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820790C8h case   32:*/		return 0x820790CC;
		  /* 820790CCh */ case   33:  		/* ori R5, R5, 262 */
		/* 820790CCh case   33:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x106);
		/* 820790CCh case   33:*/		return 0x820790D0;
		  /* 820790D0h */ case   34:  		/* mr R4, R21 */
		/* 820790D0h case   34:*/		regs.R4 = regs.R21;
		/* 820790D0h case   34:*/		return 0x820790D4;
		  /* 820790D4h */ case   35:  		/* mr R3, R22 */
		/* 820790D4h case   35:*/		regs.R3 = regs.R22;
		/* 820790D4h case   35:*/		return 0x820790D8;
		  /* 820790D8h */ case   36:  		/* bl -75336 */
		/* 820790D8h case   36:*/		regs.LR = 0x820790DC; return 0x82066A90;
		/* 820790D8h case   36:*/		return 0x820790DC;
		  /* 820790DCh */ case   37:  		/* mr R3, R31 */
		/* 820790DCh case   37:*/		regs.R3 = regs.R31;
		/* 820790DCh case   37:*/		return 0x820790E0;
		  /* 820790E0h */ case   38:  		/* bl -84120 */
		/* 820790E0h case   38:*/		regs.LR = 0x820790E4; return 0x82064848;
		/* 820790E0h case   38:*/		return 0x820790E4;
		  /* 820790E4h */ case   39:  		/* mr R20, R3 */
		/* 820790E4h case   39:*/		regs.R20 = regs.R3;
		/* 820790E4h case   39:*/		return 0x820790E8;
		  /* 820790E8h */ case   40:  		/* li R4, 0 */
		/* 820790E8h case   40:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820790E8h case   40:*/		return 0x820790EC;
		  /* 820790ECh */ case   41:  		/* mr R3, R31 */
		/* 820790ECh case   41:*/		regs.R3 = regs.R31;
		/* 820790ECh case   41:*/		return 0x820790F0;
		  /* 820790F0h */ case   42:  		/* bl -81576 */
		/* 820790F0h case   42:*/		regs.LR = 0x820790F4; return 0x82065248;
		/* 820790F0h case   42:*/		return 0x820790F4;
		  /* 820790F4h */ case   43:  		/* addi R11, R1, 640 */
		/* 820790F4h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x280);
		/* 820790F4h case   43:*/		return 0x820790F8;
		  /* 820790F8h */ case   44:  		/* mr R29, R30 */
		/* 820790F8h case   44:*/		regs.R29 = regs.R30;
		/* 820790F8h case   44:*/		return 0x820790FC;
		  /* 820790FCh */ case   45:  		/* addi R28, R11, -4 */
		/* 820790FCh case   45:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 820790FCh case   45:*/		return 0x82079100;
		  /* 82079100h */ case   46:  		/* mr R4, R29 */
		/* 82079100h case   46:*/		regs.R4 = regs.R29;
		/* 82079100h case   46:*/		return 0x82079104;
		  /* 82079104h */ case   47:  		/* mr R3, R31 */
		/* 82079104h case   47:*/		regs.R3 = regs.R31;
		/* 82079104h case   47:*/		return 0x82079108;
		  /* 82079108h */ case   48:  		/* bl -84232 */
		/* 82079108h case   48:*/		regs.LR = 0x8207910C; return 0x82064800;
		/* 82079108h case   48:*/		return 0x8207910C;
		  /* 8207910Ch */ case   49:  		/* stwu R3, <#[R28 + 4]> */
		/* 8207910Ch case   49:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 8207910Ch case   49:*/		return 0x82079110;
		  /* 82079110h */ case   50:  		/* addi R5, R1, 720 */
		/* 82079110h case   50:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2D0);
		/* 82079110h case   50:*/		return 0x82079114;
		  /* 82079114h */ case   51:  		/* mr R4, R29 */
		/* 82079114h case   51:*/		regs.R4 = regs.R29;
		/* 82079114h case   51:*/		return 0x82079118;
		  /* 82079118h */ case   52:  		/* mr R3, R31 */
		/* 82079118h case   52:*/		regs.R3 = regs.R31;
		/* 82079118h case   52:*/		return 0x8207911C;
		  /* 8207911Ch */ case   53:  		/* bl -82532 */
		/* 8207911Ch case   53:*/		regs.LR = 0x82079120; return 0x82064EB8;
		/* 8207911Ch case   53:*/		return 0x82079120;
		  /* 82079120h */ case   54:  		/* addi R29, R29, 1 */
		/* 82079120h case   54:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82079120h case   54:*/		return 0x82079124;
		  /* 82079124h */ case   55:  		/* cmplwi CR6, R29, 4 */
		/* 82079124h case   55:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82079124h case   55:*/		return 0x82079128;
		  /* 82079128h */ case   56:  		/* bc 12, CR6_LT, -40 */
		/* 82079128h case   56:*/		if ( regs.CR[6].lt ) { return 0x82079100;  }
		/* 82079128h case   56:*/		return 0x8207912C;
		  /* 8207912Ch */ case   57:  		/* mr R3, R31 */
		/* 8207912Ch case   57:*/		regs.R3 = regs.R31;
		/* 8207912Ch case   57:*/		return 0x82079130;
		  /* 82079130h */ case   58:  		/* bl -88304 */
		/* 82079130h case   58:*/		regs.LR = 0x82079134; return 0x82063840;
		/* 82079130h case   58:*/		return 0x82079134;
		  /* 82079134h */ case   59:  		/* mr R19, R3 */
		/* 82079134h case   59:*/		regs.R19 = regs.R3;
		/* 82079134h case   59:*/		return 0x82079138;
		  /* 82079138h */ case   60:  		/* li R4, 1 */
		/* 82079138h case   60:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82079138h case   60:*/		return 0x8207913C;
		  /* 8207913Ch */ case   61:  		/* mr R3, R31 */
		/* 8207913Ch case   61:*/		regs.R3 = regs.R31;
		/* 8207913Ch case   61:*/		return 0x82079140;
		  /* 82079140h */ case   62:  		/* bl -88360 */
		/* 82079140h case   62:*/		regs.LR = 0x82079144; return 0x82063818;
		/* 82079140h case   62:*/		return 0x82079144;
		  /* 82079144h */ case   63:  		/* ld R4, <#[R31 + 16]> */
		/* 82079144h case   63:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82079144h case   63:*/		return 0x82079148;
		  /* 82079148h */ case   64:  		/* cmpldi CR6, R4, 0 */
		/* 82079148h case   64:*/		cpu::op::cmpldi<6>(regs,regs.R4,0x00000000);
		/* 82079148h case   64:*/		return 0x8207914C;
		  /* 8207914Ch */ case   65:  		/* bc 12, CR6_EQ, 280 */
		/* 8207914Ch case   65:*/		if ( regs.CR[6].eq ) { return 0x82079264;  }
		/* 8207914Ch case   65:*/		return 0x82079150;
		  /* 82079150h */ case   66:  		/* ld R11, <#[R31 + 40]> */
		/* 82079150h case   66:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82079150h case   66:*/		return 0x82079154;
		  /* 82079154h */ case   67:  		/* and R11, R11, R4 */
		/* 82079154h case   67:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82079154h case   67:*/		return 0x82079158;
		  /* 82079158h */ case   68:  		/* cmpldi CR6, R11, 0 */
		/* 82079158h case   68:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82079158h case   68:*/		return 0x8207915C;
		  /* 8207915Ch */ case   69:  		/* bc 12, CR6_EQ, 20 */
		/* 8207915Ch case   69:*/		if ( regs.CR[6].eq ) { return 0x82079170;  }
		/* 8207915Ch case   69:*/		return 0x82079160;
		  /* 82079160h */ case   70:  		/* mr R3, R31 */
		/* 82079160h case   70:*/		regs.R3 = regs.R31;
		/* 82079160h case   70:*/		return 0x82079164;
		  /* 82079164h */ case   71:  		/* lwz R5, <#[R31 + 10560]> */
		/* 82079164h case   71:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00002940) );
		/* 82079164h case   71:*/		return 0x82079168;
		  /* 82079168h */ case   72:  		/* bl 41504 */
		/* 82079168h case   72:*/		regs.LR = 0x8207916C; return 0x82083388;
		/* 82079168h case   72:*/		return 0x8207916C;
		  /* 8207916Ch */ case   73:  		/* std R3, <#[R31 + 16]> */
		/* 8207916Ch case   73:*/		cpu::mem::store64( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8207916Ch case   73:*/		return 0x82079170;
	}
	return 0x82079170;
} // Block from 82079048h-82079170h (74 instructions)

//////////////////////////////////////////////////////
// Block at 82079170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079170);
		  /* 82079170h */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82079170h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82079170h case    0:*/		return 0x82079174;
		  /* 82079174h */ case    1:  		/* rldicl R10, R11, 0, 52 */
		/* 82079174h case    1:*/		cpu::op::rldicl<0,0,52>(regs,&regs.R10,regs.R11);
		/* 82079174h case    1:*/		return 0x82079178;
		  /* 82079178h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 82079178h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82079178h case    2:*/		return 0x8207917C;
		  /* 8207917Ch */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 8207917Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820791A0;  }
		/* 8207917Ch case    3:*/		return 0x82079180;
		  /* 82079180h */ case    4:  		/* addi R6, R31, 10548 */
		/* 82079180h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2934);
		/* 82079180h case    4:*/		return 0x82079184;
		  /* 82079184h */ case    5:  		/* li R5, 8704 */
		/* 82079184h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2200);
		/* 82079184h case    5:*/		return 0x82079188;
		  /* 82079188h */ case    6:  		/* rldicr R4, R11, 52, 11 */
		/* 82079188h case    6:*/		cpu::op::rldicr<0,52,11>(regs,&regs.R4,regs.R11);
		/* 82079188h case    6:*/		return 0x8207918C;
		  /* 8207918Ch */ case    7:  		/* mr R3, R31 */
		/* 8207918Ch case    7:*/		regs.R3 = regs.R31;
		/* 8207918Ch case    7:*/		return 0x82079190;
		  /* 82079190h */ case    8:  		/* bl 42376 */
		/* 82079190h case    8:*/		regs.LR = 0x82079194; return 0x82083718;
		/* 82079190h case    8:*/		return 0x82079194;
		  /* 82079194h */ case    9:  		/* ld R11, <#[R31 + 16]> */
		/* 82079194h case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82079194h case    9:*/		return 0x82079198;
		  /* 82079198h */ case   10:  		/* rldicr R11, R11, 0, 51 */
		/* 82079198h case   10:*/		cpu::op::rldicr<0,0,51>(regs,&regs.R11,regs.R11);
		/* 82079198h case   10:*/		return 0x8207919C;
		  /* 8207919Ch */ case   11:  		/* std R11, <#[R31 + 16]> */
		/* 8207919Ch case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8207919Ch case   11:*/		return 0x820791A0;
	}
	return 0x820791A0;
} // Block from 82079170h-820791A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820791A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820791A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820791A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820791A0);
		  /* 820791A0h */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 820791A0h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820791A0h case    0:*/		return 0x820791A4;
		  /* 820791A4h */ case    1:  		/* rlwinm R10, R11, 0, 15, 19 */
		/* 820791A4h case    1:*/		cpu::op::rlwinm<0,0,15,19>(regs,&regs.R10,regs.R11);
		/* 820791A4h case    1:*/		return 0x820791A8;
		  /* 820791A8h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 820791A8h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820791A8h case    2:*/		return 0x820791AC;
		  /* 820791ACh */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 820791ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x820791D8;  }
		/* 820791ACh case    3:*/		return 0x820791B0;
		  /* 820791B0h */ case    4:  		/* addi R6, R31, 10528 */
		/* 820791B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2920);
		/* 820791B0h case    4:*/		return 0x820791B4;
		  /* 820791B4h */ case    5:  		/* li R5, 8576 */
		/* 820791B4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2180);
		/* 820791B4h case    5:*/		return 0x820791B8;
		  /* 820791B8h */ case    6:  		/* rldicr R4, R11, 47, 4 */
		/* 820791B8h case    6:*/		cpu::op::rldicr<0,47,4>(regs,&regs.R4,regs.R11);
		/* 820791B8h case    6:*/		return 0x820791BC;
		  /* 820791BCh */ case    7:  		/* mr R3, R31 */
		/* 820791BCh case    7:*/		regs.R3 = regs.R31;
		/* 820791BCh case    7:*/		return 0x820791C0;
		  /* 820791C0h */ case    8:  		/* bl 42328 */
		/* 820791C0h case    8:*/		regs.LR = 0x820791C4; return 0x82083718;
		/* 820791C0h case    8:*/		return 0x820791C4;
		  /* 820791C4h */ case    9:  		/* lis R12, -2 */
		/* 820791C4h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 820791C4h case    9:*/		return 0x820791C8;
		  /* 820791C8h */ case   10:  		/* ld R11, <#[R31 + 16]> */
		/* 820791C8h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820791C8h case   10:*/		return 0x820791CC;
		  /* 820791CCh */ case   11:  		/* ori R12, R12, 4095 */
		/* 820791CCh case   11:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFF);
		/* 820791CCh case   11:*/		return 0x820791D0;
		  /* 820791D0h */ case   12:  		/* and R11, R11, R12 */
		/* 820791D0h case   12:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 820791D0h case   12:*/		return 0x820791D4;
		  /* 820791D4h */ case   13:  		/* std R11, <#[R31 + 16]> */
		/* 820791D4h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820791D4h case   13:*/		return 0x820791D8;
	}
	return 0x820791D8;
} // Block from 820791A0h-820791D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820791D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820791D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820791D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820791D8);
		  /* 820791D8h */ case    0:  		/* lis R12, 0 */
		/* 820791D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x0);
		/* 820791D8h case    0:*/		return 0x820791DC;
		  /* 820791DCh */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 820791DCh case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820791DCh case    1:*/		return 0x820791E0;
		  /* 820791E0h */ case    2:  		/* ori R12, R12, 65535 */
		/* 820791E0h case    2:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 820791E0h case    2:*/		return 0x820791E4;
		  /* 820791E4h */ case    3:  		/* rldicr R12, R12, 42, 21 */
		/* 820791E4h case    3:*/		cpu::op::rldicr<0,42,21>(regs,&regs.R12,regs.R12);
		/* 820791E4h case    3:*/		return 0x820791E8;
		  /* 820791E8h */ case    4:  		/* and R10, R11, R12 */
		/* 820791E8h case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 820791E8h case    4:*/		return 0x820791EC;
		  /* 820791ECh */ case    5:  		/* cmpldi CR6, R10, 0 */
		/* 820791ECh case    5:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820791ECh case    5:*/		return 0x820791F0;
		  /* 820791F0h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 820791F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82079220;  }
		/* 820791F0h case    6:*/		return 0x820791F4;
		  /* 820791F4h */ case    7:  		/* addi R6, R31, 10368 */
		/* 820791F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2880);
		/* 820791F4h case    7:*/		return 0x820791F8;
		  /* 820791F8h */ case    8:  		/* li R5, 8192 */
		/* 820791F8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 820791F8h case    8:*/		return 0x820791FC;
		  /* 820791FCh */ case    9:  		/* rldicr R4, R11, 6, 15 */
		/* 820791FCh case    9:*/		cpu::op::rldicr<0,6,15>(regs,&regs.R4,regs.R11);
		/* 820791FCh case    9:*/		return 0x82079200;
		  /* 82079200h */ case   10:  		/* mr R3, R31 */
		/* 82079200h case   10:*/		regs.R3 = regs.R31;
		/* 82079200h case   10:*/		return 0x82079204;
		  /* 82079204h */ case   11:  		/* bl 42260 */
		/* 82079204h case   11:*/		regs.LR = 0x82079208; return 0x82083718;
		/* 82079204h case   11:*/		return 0x82079208;
		  /* 82079208h */ case   12:  		/* lis R12, -1 */
		/* 82079208h case   12:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 82079208h case   12:*/		return 0x8207920C;
		  /* 8207920Ch */ case   13:  		/* ld R11, <#[R31 + 16]> */
		/* 8207920Ch case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8207920Ch case   13:*/		return 0x82079210;
		  /* 82079210h */ case   14:  		/* ori R12, R12, 0 */
		/* 82079210h case   14:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82079210h case   14:*/		return 0x82079214;
		  /* 82079214h */ case   15:  		/* rldicr R12, R12, 42, 63 */
		/* 82079214h case   15:*/		cpu::op::rldicr<0,42,63>(regs,&regs.R12,regs.R12);
		/* 82079214h case   15:*/		return 0x82079218;
		  /* 82079218h */ case   16:  		/* and R11, R11, R12 */
		/* 82079218h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82079218h case   16:*/		return 0x8207921C;
		  /* 8207921Ch */ case   17:  		/* std R11, <#[R31 + 16]> */
		/* 8207921Ch case   17:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8207921Ch case   17:*/		return 0x82079220;
	}
	return 0x82079220;
} // Block from 820791D8h-82079220h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82079220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079220);
		  /* 82079220h */ case    0:  		/* lis R12, -32 */
		/* 82079220h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 82079220h case    0:*/		return 0x82079224;
		  /* 82079224h */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 82079224h case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82079224h case    1:*/		return 0x82079228;
		  /* 82079228h */ case    2:  		/* rldicl R12, R12, 0, 22 */
		/* 82079228h case    2:*/		cpu::op::rldicl<0,0,22>(regs,&regs.R12,regs.R12);
		/* 82079228h case    2:*/		return 0x8207922C;
		  /* 8207922Ch */ case    3:  		/* and R10, R11, R12 */
		/* 8207922Ch case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 8207922Ch case    3:*/		return 0x82079230;
		  /* 82079230h */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 82079230h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82079230h case    4:*/		return 0x82079234;
		  /* 82079234h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 82079234h case    5:*/		if ( regs.CR[6].eq ) { return 0x82079264;  }
		/* 82079234h case    5:*/		return 0x82079238;
		  /* 82079238h */ case    6:  		/* addi R6, R31, 10444 */
		/* 82079238h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x28CC);
		/* 82079238h case    6:*/		return 0x8207923C;
		  /* 8207923Ch */ case    7:  		/* li R5, 8448 */
		/* 8207923Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2100);
		/* 8207923Ch case    7:*/		return 0x82079240;
		  /* 82079240h */ case    8:  		/* rldicr R4, R11, 22, 20 */
		/* 82079240h case    8:*/		cpu::op::rldicr<0,22,20>(regs,&regs.R4,regs.R11);
		/* 82079240h case    8:*/		return 0x82079244;
		  /* 82079244h */ case    9:  		/* mr R3, R31 */
		/* 82079244h case    9:*/		regs.R3 = regs.R31;
		/* 82079244h case    9:*/		return 0x82079248;
		  /* 82079248h */ case   10:  		/* bl 42192 */
		/* 82079248h case   10:*/		regs.LR = 0x8207924C; return 0x82083718;
		/* 82079248h case   10:*/		return 0x8207924C;
		  /* 8207924Ch */ case   11:  		/* lis R12, -32 */
		/* 8207924Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 8207924Ch case   11:*/		return 0x82079250;
		  /* 82079250h */ case   12:  		/* ld R11, <#[R31 + 16]> */
		/* 82079250h case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82079250h case   12:*/		return 0x82079254;
		  /* 82079254h */ case   13:  		/* ori R12, R12, 0 */
		/* 82079254h case   13:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82079254h case   13:*/		return 0x82079258;
		  /* 82079258h */ case   14:  		/* rldicr R12, R12, 21, 63 */
		/* 82079258h case   14:*/		cpu::op::rldicr<0,21,63>(regs,&regs.R12,regs.R12);
		/* 82079258h case   14:*/		return 0x8207925C;
		  /* 8207925Ch */ case   15:  		/* and R11, R11, R12 */
		/* 8207925Ch case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 8207925Ch case   15:*/		return 0x82079260;
		  /* 82079260h */ case   16:  		/* std R11, <#[R31 + 16]> */
		/* 82079260h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82079260h case   16:*/		return 0x82079264;
	}
	return 0x82079264;
} // Block from 82079220h-82079264h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82079264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079264);
		  /* 82079264h */ case    0:  		/* ld R11, <#[R31 + 24]> */
		/* 82079264h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82079264h case    0:*/		return 0x82079268;
		  /* 82079268h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82079268h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82079268h case    1:*/		return 0x8207926C;
		  /* 8207926Ch */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 8207926Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820792B4;  }
		/* 8207926Ch case    2:*/		return 0x82079270;
		  /* 82079270h */ case    3:  		/* lis R12, 31 */
		/* 82079270h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0x1F);
		/* 82079270h case    3:*/		return 0x82079274;
		  /* 82079274h */ case    4:  		/* ori R12, R12, 65535 */
		/* 82079274h case    4:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82079274h case    4:*/		return 0x82079278;
		  /* 82079278h */ case    5:  		/* rldicr R12, R12, 34, 29 */
		/* 82079278h case    5:*/		cpu::op::rldicr<0,34,29>(regs,&regs.R12,regs.R12);
		/* 82079278h case    5:*/		return 0x8207927C;
		  /* 8207927Ch */ case    6:  		/* and R10, R11, R12 */
		/* 8207927Ch case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 8207927Ch case    6:*/		return 0x82079280;
		  /* 82079280h */ case    7:  		/* cmpldi CR6, R10, 0 */
		/* 82079280h case    7:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82079280h case    7:*/		return 0x82079284;
		  /* 82079284h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 82079284h case    8:*/		if ( regs.CR[6].eq ) { return 0x820792B4;  }
		/* 82079284h case    8:*/		return 0x82079288;
		  /* 82079288h */ case    9:  		/* addi R6, R31, 10596 */
		/* 82079288h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2964);
		/* 82079288h case    9:*/		return 0x8207928C;
		  /* 8207928Ch */ case   10:  		/* li R5, 8832 */
		/* 8207928Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2280);
		/* 8207928Ch case   10:*/		return 0x82079290;
		  /* 82079290h */ case   11:  		/* rldicr R4, R11, 9, 20 */
		/* 82079290h case   11:*/		cpu::op::rldicr<0,9,20>(regs,&regs.R4,regs.R11);
		/* 82079290h case   11:*/		return 0x82079294;
		  /* 82079294h */ case   12:  		/* mr R3, R31 */
		/* 82079294h case   12:*/		regs.R3 = regs.R31;
		/* 82079294h case   12:*/		return 0x82079298;
		  /* 82079298h */ case   13:  		/* bl 42112 */
		/* 82079298h case   13:*/		regs.LR = 0x8207929C; return 0x82083718;
		/* 82079298h case   13:*/		return 0x8207929C;
		  /* 8207929Ch */ case   14:  		/* lis R12, -32 */
		/* 8207929Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 8207929Ch case   14:*/		return 0x820792A0;
		  /* 820792A0h */ case   15:  		/* ld R11, <#[R31 + 24]> */
		/* 820792A0h case   15:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820792A0h case   15:*/		return 0x820792A4;
		  /* 820792A4h */ case   16:  		/* ori R12, R12, 0 */
		/* 820792A4h case   16:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 820792A4h case   16:*/		return 0x820792A8;
		  /* 820792A8h */ case   17:  		/* rldicr R12, R12, 34, 63 */
		/* 820792A8h case   17:*/		cpu::op::rldicr<0,34,63>(regs,&regs.R12,regs.R12);
		/* 820792A8h case   17:*/		return 0x820792AC;
		  /* 820792ACh */ case   18:  		/* and R11, R11, R12 */
		/* 820792ACh case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 820792ACh case   18:*/		return 0x820792B0;
		  /* 820792B0h */ case   19:  		/* std R11, <#[R31 + 24]> */
		/* 820792B0h case   19:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820792B0h case   19:*/		return 0x820792B4;
	}
	return 0x820792B4;
} // Block from 82079264h-820792B4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820792B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820792B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820792B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820792B4);
		  /* 820792B4h */ case    0:  		/* ld R11, <#[R31 + 32]> */
		/* 820792B4h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820792B4h case    0:*/		return 0x820792B8;
		  /* 820792B8h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 820792B8h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 820792B8h case    1:*/		return 0x820792BC;
		  /* 820792BCh */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 820792BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x820792EC;  }
		/* 820792BCh case    2:*/		return 0x820792C0;
		  /* 820792C0h */ case    3:  		/* rldicl R10, R11, 0, 26 */
		/* 820792C0h case    3:*/		cpu::op::rldicl<0,0,26>(regs,&regs.R10,regs.R11);
		/* 820792C0h case    3:*/		return 0x820792C4;
		  /* 820792C4h */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 820792C4h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820792C4h case    4:*/		return 0x820792C8;
		  /* 820792C8h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 820792C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x820792EC;  }
		/* 820792C8h case    5:*/		return 0x820792CC;
		  /* 820792CCh */ case    6:  		/* addi R6, R31, 10680 */
		/* 820792CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x29B8);
		/* 820792CCh case    6:*/		return 0x820792D0;
		  /* 820792D0h */ case    7:  		/* li R5, 8960 */
		/* 820792D0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2300);
		/* 820792D0h case    7:*/		return 0x820792D4;
		  /* 820792D4h */ case    8:  		/* rldicr R4, R11, 26, 37 */
		/* 820792D4h case    8:*/		cpu::op::rldicr<0,26,37>(regs,&regs.R4,regs.R11);
		/* 820792D4h case    8:*/		return 0x820792D8;
		  /* 820792D8h */ case    9:  		/* mr R3, R31 */
		/* 820792D8h case    9:*/		regs.R3 = regs.R31;
		/* 820792D8h case    9:*/		return 0x820792DC;
		  /* 820792DCh */ case   10:  		/* bl 42044 */
		/* 820792DCh case   10:*/		regs.LR = 0x820792E0; return 0x82083718;
		/* 820792DCh case   10:*/		return 0x820792E0;
		  /* 820792E0h */ case   11:  		/* ld R11, <#[R31 + 32]> */
		/* 820792E0h case   11:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820792E0h case   11:*/		return 0x820792E4;
		  /* 820792E4h */ case   12:  		/* rldicr R11, R11, 0, 25 */
		/* 820792E4h case   12:*/		cpu::op::rldicr<0,0,25>(regs,&regs.R11,regs.R11);
		/* 820792E4h case   12:*/		return 0x820792E8;
		  /* 820792E8h */ case   13:  		/* std R11, <#[R31 + 32]> */
		/* 820792E8h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820792E8h case   13:*/		return 0x820792EC;
	}
	return 0x820792EC;
} // Block from 820792B4h-820792ECh (14 instructions)

//////////////////////////////////////////////////////
// Block at 820792ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820792EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820792EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820792EC);
		  /* 820792ECh */ case    0:  		/* mr R3, R31 */
		/* 820792ECh case    0:*/		regs.R3 = regs.R31;
		/* 820792ECh case    0:*/		return 0x820792F0;
		  /* 820792F0h */ case    1:  		/* bl -5784 */
		/* 820792F0h case    1:*/		regs.LR = 0x820792F4; return 0x82077C58;
		/* 820792F0h case    1:*/		return 0x820792F4;
		  /* 820792F4h */ case    2:  		/* lis R11, -32256 */
		/* 820792F4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820792F4h case    2:*/		return 0x820792F8;
		  /* 820792F8h */ case    3:  		/* li R6, 0 */
		/* 820792F8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820792F8h case    3:*/		return 0x820792FC;
		  /* 820792FCh */ case    4:  		/* addi R29, R11, 4744 */
		/* 820792FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1288);
		/* 820792FCh case    4:*/		return 0x82079300;
		  /* 82079300h */ case    5:  		/* li R5, 24 */
		/* 82079300h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 82079300h case    5:*/		return 0x82079304;
		  /* 82079304h */ case    6:  		/* addi R4, R29, 64 */
		/* 82079304h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x40);
		/* 82079304h case    6:*/		return 0x82079308;
		  /* 82079308h */ case    7:  		/* mr R3, R31 */
		/* 82079308h case    7:*/		regs.R3 = regs.R31;
		/* 82079308h case    7:*/		return 0x8207930C;
		  /* 8207930Ch */ case    8:  		/* bl -5724 */
		/* 8207930Ch case    8:*/		regs.LR = 0x82079310; return 0x82077CB0;
		/* 8207930Ch case    8:*/		return 0x82079310;
		  /* 82079310h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82079310h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82079310h case    9:*/		return 0x82079314;
		  /* 82079314h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 82079314h case   10:*/		if ( regs.CR[0].eq ) { return 0x8207932C;  }
		/* 82079314h case   10:*/		return 0x82079318;
		  /* 82079318h */ case   11:  		/* mr R5, R29 */
		/* 82079318h case   11:*/		regs.R5 = regs.R29;
		/* 82079318h case   11:*/		return 0x8207931C;
		  /* 8207931Ch */ case   12:  		/* li R6, 4 */
		/* 8207931Ch case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8207931Ch case   12:*/		return 0x82079320;
		  /* 82079320h */ case   13:  		/* li R4, 252 */
		/* 82079320h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xFC);
		/* 82079320h case   13:*/		return 0x82079324;
		  /* 82079324h */ case   14:  		/* mr R3, R31 */
		/* 82079324h case   14:*/		regs.R3 = regs.R31;
		/* 82079324h case   14:*/		return 0x82079328;
		  /* 82079328h */ case   15:  		/* bl -5624 */
		/* 82079328h case   15:*/		regs.LR = 0x8207932C; return 0x82077D30;
		/* 82079328h case   15:*/		return 0x8207932C;
	}
	return 0x8207932C;
} // Block from 820792ECh-8207932Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207932Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207932C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207932C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207932C);
		  /* 8207932Ch */ case    0:  		/* addi R4, R29, 352 */
		/* 8207932Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x160);
		/* 8207932Ch case    0:*/		return 0x82079330;
		  /* 82079330h */ case    1:  		/* li R6, 1 */
		/* 82079330h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079330h case    1:*/		return 0x82079334;
		  /* 82079334h */ case    2:  		/* li R5, 429 */
		/* 82079334h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1AD);
		/* 82079334h case    2:*/		return 0x82079338;
		  /* 82079338h */ case    3:  		/* mr R3, R31 */
		/* 82079338h case    3:*/		regs.R3 = regs.R31;
		/* 82079338h case    3:*/		return 0x8207933C;
		  /* 8207933Ch */ case    4:  		/* bl -5772 */
		/* 8207933Ch case    4:*/		regs.LR = 0x82079340; return 0x82077CB0;
		/* 8207933Ch case    4:*/		return 0x82079340;
		  /* 82079340h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82079340h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82079340h case    5:*/		return 0x82079344;
		  /* 82079344h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 82079344h case    6:*/		if ( regs.CR[0].eq ) { return 0x8207935C;  }
		/* 82079344h case    6:*/		return 0x82079348;
		  /* 82079348h */ case    7:  		/* addi R5, R29, 160 */
		/* 82079348h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0xA0);
		/* 82079348h case    7:*/		return 0x8207934C;
		  /* 8207934Ch */ case    8:  		/* li R6, 12 */
		/* 8207934Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xC);
		/* 8207934Ch case    8:*/		return 0x82079350;
		  /* 82079350h */ case    9:  		/* li R4, 500 */
		/* 82079350h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1F4);
		/* 82079350h case    9:*/		return 0x82079354;
		  /* 82079354h */ case   10:  		/* mr R3, R31 */
		/* 82079354h case   10:*/		regs.R3 = regs.R31;
		/* 82079354h case   10:*/		return 0x82079358;
		  /* 82079358h */ case   11:  		/* bl -5672 */
		/* 82079358h case   11:*/		regs.LR = 0x8207935C; return 0x82077D30;
		/* 82079358h case   11:*/		return 0x8207935C;
	}
	return 0x8207935C;
} // Block from 8207932Ch-8207935Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207935Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207935C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207935C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207935C);
		  /* 8207935Ch */ case    0:  		/* lwz R10, <#[R31 + 56]> */
		/* 8207935Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8207935Ch case    0:*/		return 0x82079360;
		  /* 82079360h */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 82079360h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82079360h case    1:*/		return 0x82079364;
		  /* 82079364h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82079364h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82079364h case    2:*/		return 0x82079368;
		  /* 82079368h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 82079368h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82079378;  }
		/* 82079368h case    3:*/		return 0x8207936C;
		  /* 8207936Ch */ case    4:  		/* mr R3, R31 */
		/* 8207936Ch case    4:*/		regs.R3 = regs.R31;
		/* 8207936Ch case    4:*/		return 0x82079370;
		  /* 82079370h */ case    5:  		/* bl -21096 */
		/* 82079370h case    5:*/		regs.LR = 0x82079374; return 0x82074108;
		/* 82079370h case    5:*/		return 0x82079374;
		  /* 82079374h */ case    6:  		/* mr R11, R3 */
		/* 82079374h case    6:*/		regs.R11 = regs.R3;
		/* 82079374h case    6:*/		return 0x82079378;
	}
	return 0x82079378;
} // Block from 8207935Ch-82079378h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82079378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079378);
		  /* 82079378h */ case    0:  		/* lis R10, 1 */
		/* 82079378h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82079378h case    0:*/		return 0x8207937C;
		  /* 8207937Ch */ case    1:  		/* lis R9, 4096 */
		/* 8207937Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 8207937Ch case    1:*/		return 0x82079380;
		  /* 82079380h */ case    2:  		/* ori R10, R10, 8576 */
		/* 82079380h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 82079380h case    2:*/		return 0x82079384;
		  /* 82079384h */ case    3:  		/* ori R9, R9, 2048 */
		/* 82079384h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x800);
		/* 82079384h case    3:*/		return 0x82079388;
		  /* 82079388h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82079388h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079388h case    4:*/		return 0x8207938C;
		  /* 8207938Ch */ case    5:  		/* li R10, 4 */
		/* 8207938Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8207938Ch case    5:*/		return 0x82079390;
		  /* 82079390h */ case    6:  		/* mr R3, R31 */
		/* 82079390h case    6:*/		regs.R3 = regs.R31;
		/* 82079390h case    6:*/		return 0x82079394;
		  /* 82079394h */ case    7:  		/* stwu R9, <#[R11 + 4]> */
		/* 82079394h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079394h case    7:*/		return 0x82079398;
		  /* 82079398h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 82079398h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079398h case    8:*/		return 0x8207939C;
		  /* 8207939Ch */ case    9:  		/* stw R11, <#[R31 + 48]> */
		/* 8207939Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207939Ch case    9:*/		return 0x820793A0;
		  /* 820793A0h */ case   10:  		/* bl -5072 */
		/* 820793A0h case   10:*/		regs.LR = 0x820793A4; return 0x82077FD0;
		/* 820793A0h case   10:*/		return 0x820793A4;
		  /* 820793A4h */ case   11:  		/* rldicl R11, R27, 0, 32 */
		/* 820793A4h case   11:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R27);
		/* 820793A4h case   11:*/		return 0x820793A8;
		  /* 820793A8h */ case   12:  		/* rldicl R10, R26, 0, 32 */
		/* 820793A8h case   12:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R26);
		/* 820793A8h case   12:*/		return 0x820793AC;
		  /* 820793ACh */ case   13:  		/* std R11, <#[R1 + 128]> */
		/* 820793ACh case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820793ACh case   13:*/		return 0x820793B0;
		  /* 820793B0h */ case   14:  		/* lfd FR0, <#[R1 + 128]> */
		/* 820793B0h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 820793B0h case   14:*/		return 0x820793B4;
		  /* 820793B4h */ case   15:  		/* rlwinm R11, R25, 31, 1, 31 */
		/* 820793B4h case   15:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R25);
		/* 820793B4h case   15:*/		return 0x820793B8;
		  /* 820793B8h */ case   16:  		/* std R10, <#[R1 + 128]> */
		/* 820793B8h case   16:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 820793B8h case   16:*/		return 0x820793BC;
		  /* 820793BCh */ case   17:  		/* lfd FR13, <#[R1 + 128]> */
		/* 820793BCh case   17:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000080) );
		/* 820793BCh case   17:*/		return 0x820793C0;
		  /* 820793C0h */ case   18:  		/* lis R10, -32256 */
		/* 820793C0h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820793C0h case   18:*/		return 0x820793C4;
		  /* 820793C4h */ case   19:  		/* std R11, <#[R1 + 128]> */
		/* 820793C4h case   19:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 820793C4h case   19:*/		return 0x820793C8;
		  /* 820793C8h */ case   20:  		/* lfd FR12, <#[R1 + 128]> */
		/* 820793C8h case   20:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000080) );
		/* 820793C8h case   20:*/		return 0x820793CC;
		  /* 820793CCh */ case   21:  		/* addi R11, R1, 324 */
		/* 820793CCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x144);
		/* 820793CCh case   21:*/		return 0x820793D0;
		  /* 820793D0h */ case   22:  		/* fcfid FR9, FR0 */
		/* 820793D0h case   22:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR0);
		/* 820793D0h case   22:*/		return 0x820793D4;
		  /* 820793D4h */ case   23:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 820793D4h case   23:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 820793D4h case   23:*/		return 0x820793D8;
		  /* 820793D8h */ case   24:  		/* lis R5, -32256 */
		/* 820793D8h case   24:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 820793D8h case   24:*/		return 0x820793DC;
		  /* 820793DCh */ case   25:  		/* fcfid FR8, FR13 */
		/* 820793DCh case   25:*/		cpu::op::fcfid<0>(regs,&regs.FR8,regs.FR13);
		/* 820793DCh case   25:*/		return 0x820793E0;
		  /* 820793E0h */ case   26:  		/* stfs FR31, <#[R1 + 320]> */
		/* 820793E0h case   26:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000140) );
		/* 820793E0h case   26:*/		return 0x820793E4;
		  /* 820793E4h */ case   27:  		/* fcfid FR12, FR12 */
		/* 820793E4h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 820793E4h case   27:*/		return 0x820793E8;
		  /* 820793E8h */ case   28:  		/* stw R30, <#[R11]> */
		/* 820793E8h case   28:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 820793E8h case   28:*/		return 0x820793EC;
		  /* 820793ECh */ case   29:  		/* stw R30, <#[R11 + 4]> */
		/* 820793ECh case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 820793ECh case   29:*/		return 0x820793F0;
		  /* 820793F0h */ case   30:  		/* lis R9, -32256 */
		/* 820793F0h case   30:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820793F0h case   30:*/		return 0x820793F4;
		  /* 820793F4h */ case   31:  		/* stw R30, <#[R11 + 8]> */
		/* 820793F4h case   31:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 820793F4h case   31:*/		return 0x820793F8;
		  /* 820793F8h */ case   32:  		/* lis R11, -32256 */
		/* 820793F8h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820793F8h case   32:*/		return 0x820793FC;
		  /* 820793FCh */ case   33:  		/* lis R8, -32256 */
		/* 820793FCh case   33:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820793FCh case   33:*/		return 0x82079400;
		  /* 82079400h */ case   34:  		/* lis R7, -32256 */
		/* 82079400h case   34:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82079400h case   34:*/		return 0x82079404;
		  /* 82079404h */ case   35:  		/* lfs FR13, <#[R5 + 8444]> */
		/* 82079404h case   35:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R5 + 0x000020FC) );
		/* 82079404h case   35:*/		return 0x82079408;
		  /* 82079408h */ case   36:  		/* lis R10, -32256 */
		/* 82079408h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82079408h case   36:*/		return 0x8207940C;
		  /* 8207940Ch */ case   37:  		/* stfs FR13, <#[R1 + 384]> */
		/* 8207940Ch case   37:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000180) );
		/* 8207940Ch case   37:*/		return 0x82079410;
		  /* 82079410h */ case   38:  		/* lis R6, -32256 */
		/* 82079410h case   38:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 82079410h case   38:*/		return 0x82079414;
		  /* 82079414h */ case   39:  		/* stfs FR13, <#[R1 + 388]> */
		/* 82079414h case   39:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000184) );
		/* 82079414h case   39:*/		return 0x82079418;
		  /* 82079418h */ case   40:  		/* lis R4, -32256 */
		/* 82079418h case   40:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8200);
		/* 82079418h case   40:*/		return 0x8207941C;
		  /* 8207941Ch */ case   41:  		/* frsp FR6, FR9 */
		/* 8207941Ch case   41:*/		cpu::op::frsp<0>(regs,&regs.FR6,regs.FR9);
		/* 8207941Ch case   41:*/		return 0x82079420;
		  /* 82079420h */ case   42:  		/* lfs FR0, <#[R9 + 1792]> */
		/* 82079420h case   42:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000700) );
		/* 82079420h case   42:*/		return 0x82079424;
		  /* 82079424h */ case   43:  		/* frsp FR4, FR8 */
		/* 82079424h case   43:*/		cpu::op::frsp<0>(regs,&regs.FR4,regs.FR8);
		/* 82079424h case   43:*/		return 0x82079428;
		  /* 82079428h */ case   44:  		/* lfs FR11, <#[R8 + 8440]> */
		/* 82079428h case   44:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R8 + 0x000020F8) );
		/* 82079428h case   44:*/		return 0x8207942C;
		  /* 8207942Ch */ case   45:  		/* frsp FR7, FR12 */
		/* 8207942Ch case   45:*/		cpu::op::frsp<0>(regs,&regs.FR7,regs.FR12);
		/* 8207942Ch case   45:*/		return 0x82079430;
		  /* 82079430h */ case   46:  		/* lfs FR10, <#[R7 + 8436]> */
		/* 82079430h case   46:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R7 + 0x000020F4) );
		/* 82079430h case   46:*/		return 0x82079434;
		  /* 82079434h */ case   47:  		/* lfs FR9, <#[R10 + 2976]> */
		/* 82079434h case   47:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R10 + 0x00000BA0) );
		/* 82079434h case   47:*/		return 0x82079438;
		  /* 82079438h */ case   48:  		/* lfs FR12, <#[R4 + 8432]> */
		/* 82079438h case   48:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R4 + 0x000020F0) );
		/* 82079438h case   48:*/		return 0x8207943C;
		  /* 8207943Ch */ case   49:  		/* lfs FR8, <#[R6 + 2980]> */
		/* 8207943Ch case   49:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R6 + 0x00000BA4) );
		/* 8207943Ch case   49:*/		return 0x82079440;
		  /* 82079440h */ case   50:  		/* lfs FR13, <#[R11 + 2660]> */
		/* 82079440h case   50:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000A64) );
		/* 82079440h case   50:*/		return 0x82079444;
		  /* 82079444h */ case   51:  		/* lis R11, -32256 */
		/* 82079444h case   51:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82079444h case   51:*/		return 0x82079448;
		  /* 82079448h */ case   52:  		/* stfs FR31, <#[R1 + 160]> */
		/* 82079448h case   52:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000A0) );
		/* 82079448h case   52:*/		return 0x8207944C;
		  /* 8207944Ch */ case   53:  		/* stfs FR31, <#[R1 + 164]> */
		/* 8207944Ch case   53:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000A4) );
		/* 8207944Ch case   53:*/		return 0x82079450;
		  /* 82079450h */ case   54:  		/* stfs FR31, <#[R1 + 168]> */
		/* 82079450h case   54:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000A8) );
		/* 82079450h case   54:*/		return 0x82079454;
		  /* 82079454h */ case   55:  		/* stfs FR0, <#[R1 + 172]> */
		/* 82079454h case   55:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000AC) );
		/* 82079454h case   55:*/		return 0x82079458;
		  /* 82079458h */ case   56:  		/* stfs FR31, <#[R1 + 184]> */
		/* 82079458h case   56:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000B8) );
		/* 82079458h case   56:*/		return 0x8207945C;
		  /* 8207945Ch */ case   57:  		/* stfs FR0, <#[R1 + 188]> */
		/* 8207945Ch case   57:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000BC) );
		/* 8207945Ch case   57:*/		return 0x82079460;
		  /* 82079460h */ case   58:  		/* stfs FR31, <#[R1 + 192]> */
		/* 82079460h case   58:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000C0) );
		/* 82079460h case   58:*/		return 0x82079464;
		  /* 82079464h */ case   59:  		/* stfs FR31, <#[R1 + 196]> */
		/* 82079464h case   59:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000C4) );
		/* 82079464h case   59:*/		return 0x82079468;
		  /* 82079468h */ case   60:  		/* stfs FR31, <#[R1 + 200]> */
		/* 82079468h case   60:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000C8) );
		/* 82079468h case   60:*/		return 0x8207946C;
		  /* 8207946Ch */ case   61:  		/* stfs FR0, <#[R1 + 204]> */
		/* 8207946Ch case   61:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000CC) );
		/* 8207946Ch case   61:*/		return 0x82079470;
		  /* 82079470h */ case   62:  		/* stfs FR31, <#[R1 + 216]> */
		/* 82079470h case   62:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000000D8) );
		/* 82079470h case   62:*/		return 0x82079474;
		  /* 82079474h */ case   63:  		/* stfs FR0, <#[R1 + 220]> */
		/* 82079474h case   63:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000DC) );
		/* 82079474h case   63:*/		return 0x82079478;
		  /* 82079478h */ case   64:  		/* stfs FR31, <#[R1 + 336]> */
		/* 82079478h case   64:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000150) );
		/* 82079478h case   64:*/		return 0x8207947C;
		  /* 8207947Ch */ case   65:  		/* stfs FR11, <#[R1 + 344]> */
		/* 8207947Ch case   65:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000158) );
		/* 8207947Ch case   65:*/		return 0x82079480;
		  /* 82079480h */ case   66:  		/* stfs FR10, <#[R1 + 348]> */
		/* 82079480h case   66:*/		cpu::mem::store32f( regs, regs.FR10, (uint32)(regs.R1 + 0x0000015C) );
		/* 82079480h case   66:*/		return 0x82079484;
		  /* 82079484h */ case   67:  		/* stfs FR31, <#[R1 + 352]> */
		/* 82079484h case   67:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000160) );
		/* 82079484h case   67:*/		return 0x82079488;
		  /* 82079488h */ case   68:  		/* stfs FR31, <#[R1 + 356]> */
		/* 82079488h case   68:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000164) );
		/* 82079488h case   68:*/		return 0x8207948C;
		  /* 8207948Ch */ case   69:  		/* stfs FR9, <#[R1 + 360]> */
		/* 8207948Ch case   69:*/		cpu::mem::store32f( regs, regs.FR9, (uint32)(regs.R1 + 0x00000168) );
		/* 8207948Ch case   69:*/		return 0x82079490;
		  /* 82079490h */ case   70:  		/* stfs FR8, <#[R1 + 364]> */
		/* 82079490h case   70:*/		cpu::mem::store32f( regs, regs.FR8, (uint32)(regs.R1 + 0x0000016C) );
		/* 82079490h case   70:*/		return 0x82079494;
		  /* 82079494h */ case   71:  		/* stfs FR31, <#[R1 + 368]> */
		/* 82079494h case   71:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000170) );
		/* 82079494h case   71:*/		return 0x82079498;
		  /* 82079498h */ case   72:  		/* stfs FR31, <#[R1 + 372]> */
		/* 82079498h case   72:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000174) );
		/* 82079498h case   72:*/		return 0x8207949C;
		  /* 8207949Ch */ case   73:  		/* stfs FR12, <#[R1 + 392]> */
		/* 8207949Ch case   73:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000188) );
		/* 8207949Ch case   73:*/		return 0x820794A0;
		  /* 820794A0h */ case   74:  		/* stfs FR7, <#[R1 + 340]> */
		/* 820794A0h case   74:*/		cpu::mem::store32f( regs, regs.FR7, (uint32)(regs.R1 + 0x00000154) );
		/* 820794A0h case   74:*/		return 0x820794A4;
		  /* 820794A4h */ case   75:  		/* stfs FR12, <#[R1 + 396]> */
		/* 820794A4h case   75:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x0000018C) );
		/* 820794A4h case   75:*/		return 0x820794A8;
		  /* 820794A8h */ case   76:  		/* stfs FR31, <#[R1 + 400]> */
		/* 820794A8h case   76:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000190) );
		/* 820794A8h case   76:*/		return 0x820794AC;
		  /* 820794ACh */ case   77:  		/* stfs FR31, <#[R1 + 404]> */
		/* 820794ACh case   77:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000194) );
		/* 820794ACh case   77:*/		return 0x820794B0;
		  /* 820794B0h */ case   78:  		/* stfs FR31, <#[R1 + 416]> */
		/* 820794B0h case   78:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000001A0) );
		/* 820794B0h case   78:*/		return 0x820794B4;
		  /* 820794B4h */ case   79:  		/* stfs FR31, <#[R1 + 420]> */
		/* 820794B4h case   79:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000001A4) );
		/* 820794B4h case   79:*/		return 0x820794B8;
		  /* 820794B8h */ case   80:  		/* lis R10, -32256 */
		/* 820794B8h case   80:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820794B8h case   80:*/		return 0x820794BC;
		  /* 820794BCh */ case   81:  		/* fmuls FR3, FR6, FR13 */
		/* 820794BCh case   81:*/		cpu::op::fmuls<0>(regs,&regs.FR3,regs.FR6,regs.FR13);
		/* 820794BCh case   81:*/		return 0x820794C0;
		  /* 820794C0h */ case   82:  		/* lis R9, -32256 */
		/* 820794C0h case   82:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820794C0h case   82:*/		return 0x820794C4;
		  /* 820794C4h */ case   83:  		/* lfs FR13, <#[R11 + 1820]> */
		/* 820794C4h case   83:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x0000071C) );
		/* 820794C4h case   83:*/		return 0x820794C8;
		  /* 820794C8h */ case   84:  		/* lis R8, -32256 */
		/* 820794C8h case   84:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820794C8h case   84:*/		return 0x820794CC;
		  /* 820794CCh */ case   85:  		/* fmsubs FR2, FR6, FR13, FR0 */
		/* 820794CCh case   85:*/		cpu::op::fmsubs<0>(regs,&regs.FR2,regs.FR6,regs.FR13,regs.FR0);
		/* 820794CCh case   85:*/		return 0x820794D0;
		  /* 820794D0h */ case   86:  		/* lis R7, -32256 */
		/* 820794D0h case   86:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820794D0h case   86:*/		return 0x820794D4;
		  /* 820794D4h */ case   87:  		/* stfs FR6, <#[R1 + 176]> */
		/* 820794D4h case   87:*/		cpu::mem::store32f( regs, regs.FR6, (uint32)(regs.R1 + 0x000000B0) );
		/* 820794D4h case   87:*/		return 0x820794D8;
		  /* 820794D8h */ case   88:  		/* lis R6, -32256 */
		/* 820794D8h case   88:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 820794D8h case   88:*/		return 0x820794DC;
		  /* 820794DCh */ case   89:  		/* stfs FR6, <#[R1 + 208]> */
		/* 820794DCh case   89:*/		cpu::mem::store32f( regs, regs.FR6, (uint32)(regs.R1 + 0x000000D0) );
		/* 820794DCh case   89:*/		return 0x820794E0;
		  /* 820794E0h */ case   90:  		/* lfs FR12, <#[R10 + 8428]> */
		/* 820794E0h case   90:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x000020EC) );
		/* 820794E0h case   90:*/		return 0x820794E4;
		  /* 820794E4h */ case   91:  		/* lis R11, -32256 */
		/* 820794E4h case   91:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820794E4h case   91:*/		return 0x820794E8;
		  /* 820794E8h */ case   92:  		/* lfs FR11, <#[R9 + 8424]> */
		/* 820794E8h case   92:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R9 + 0x000020E8) );
		/* 820794E8h case   92:*/		return 0x820794EC;
		  /* 820794ECh */ case   93:  		/* lis R10, -32256 */
		/* 820794ECh case   93:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820794ECh case   93:*/		return 0x820794F0;
		  /* 820794F0h */ case   94:  		/* lis R9, -32256 */
		/* 820794F0h case   94:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820794F0h case   94:*/		return 0x820794F4;
		  /* 820794F4h */ case   95:  		/* lfs FR10, <#[R8 + 8420]> */
		/* 820794F4h case   95:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R8 + 0x000020E4) );
		/* 820794F4h case   95:*/		return 0x820794F8;
		  /* 820794F8h */ case   96:  		/* lis R29, -32256 */
		/* 820794F8h case   96:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8200);
		/* 820794F8h case   96:*/		return 0x820794FC;
		  /* 820794FCh */ case   97:  		/* lfs FR9, <#[R7 + 8416]> */
		/* 820794FCh case   97:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R7 + 0x000020E0) );
		/* 820794FCh case   97:*/		return 0x82079500;
		  /* 82079500h */ case   98:  		/* li R5, 160 */
		/* 82079500h case   98:*/		cpu::op::li<0>(regs,&regs.R5,0xA0);
		/* 82079500h case   98:*/		return 0x82079504;
		  /* 82079504h */ case   99:  		/* lfs FR8, <#[R6 + 8412]> */
		/* 82079504h case   99:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R6 + 0x000020DC) );
		/* 82079504h case   99:*/		return 0x82079508;
		  /* 82079508h */ case  100:  		/* li R4, 0 */
		/* 82079508h case  100:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079508h case  100:*/		return 0x8207950C;
		  /* 8207950Ch */ case  101:  		/* lfs FR7, <#[R11 + 8408]> */
		/* 8207950Ch case  101:*/		cpu::mem::load32f( regs, &regs.FR7, (uint32)(regs.R11 + 0x000020D8) );
		/* 8207950Ch case  101:*/		return 0x82079510;
		  /* 82079510h */ case  102:  		/* addi R3, R1, 480 */
		/* 82079510h case  102:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1E0);
		/* 82079510h case  102:*/		return 0x82079514;
		  /* 82079514h */ case  103:  		/* lfs FR13, <#[R10 + 8404]> */
		/* 82079514h case  103:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x000020D4) );
		/* 82079514h case  103:*/		return 0x82079518;
		  /* 82079518h */ case  104:  		/* lfs FR5, <#[R9 + 8400]> */
		/* 82079518h case  104:*/		cpu::mem::load32f( regs, &regs.FR5, (uint32)(regs.R9 + 0x000020D0) );
		/* 82079518h case  104:*/		return 0x8207951C;
		  /* 8207951Ch */ case  105:  		/* fdivs FR1, FR0, FR3 */
		/* 8207951Ch case  105:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR0,regs.FR3);
		/* 8207951Ch case  105:*/		return 0x82079520;
		  /* 82079520h */ case  106:  		/* lfs FR6, <#[R29 + 8396]> */
		/* 82079520h case  106:*/		cpu::mem::load32f( regs, &regs.FR6, (uint32)(regs.R29 + 0x000020CC) );
		/* 82079520h case  106:*/		return 0x82079524;
		  /* 82079524h */ case  107:  		/* stfs FR4, <#[R1 + 180]> */
		/* 82079524h case  107:*/		cpu::mem::store32f( regs, regs.FR4, (uint32)(regs.R1 + 0x000000B4) );
		/* 82079524h case  107:*/		return 0x82079528;
		  /* 82079528h */ case  108:  		/* stfs FR4, <#[R1 + 212]> */
		/* 82079528h case  108:*/		cpu::mem::store32f( regs, regs.FR4, (uint32)(regs.R1 + 0x000000D4) );
		/* 82079528h case  108:*/		return 0x8207952C;
		  /* 8207952Ch */ case  109:  		/* stfs FR3, <#[R1 + 408]> */
		/* 8207952Ch case  109:*/		cpu::mem::store32f( regs, regs.FR3, (uint32)(regs.R1 + 0x00000198) );
		/* 8207952Ch case  109:*/		return 0x82079530;
		  /* 82079530h */ case  110:  		/* stfs FR1, <#[R1 + 412]> */
		/* 82079530h case  110:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x0000019C) );
		/* 82079530h case  110:*/		return 0x82079534;
		  /* 82079534h */ case  111:  		/* stfs FR2, <#[R1 + 376]> */
		/* 82079534h case  111:*/		cpu::mem::store32f( regs, regs.FR2, (uint32)(regs.R1 + 0x00000178) );
		/* 82079534h case  111:*/		return 0x82079538;
		  /* 82079538h */ case  112:  		/* stfs FR2, <#[R1 + 380]> */
		/* 82079538h case  112:*/		cpu::mem::store32f( regs, regs.FR2, (uint32)(regs.R1 + 0x0000017C) );
		/* 82079538h case  112:*/		return 0x8207953C;
		  /* 8207953Ch */ case  113:  		/* stfs FR31, <#[R1 + 424]> */
		/* 8207953Ch case  113:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000001A8) );
		/* 8207953Ch case  113:*/		return 0x82079540;
		  /* 82079540h */ case  114:  		/* stfs FR31, <#[R1 + 428]> */
		/* 82079540h case  114:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x000001AC) );
		/* 82079540h case  114:*/		return 0x82079544;
		  /* 82079544h */ case  115:  		/* stfs FR0, <#[R1 + 432]> */
		/* 82079544h case  115:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000001B0) );
		/* 82079544h case  115:*/		return 0x82079548;
		  /* 82079548h */ case  116:  		/* stfs FR12, <#[R1 + 436]> */
		/* 82079548h case  116:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x000001B4) );
		/* 82079548h case  116:*/		return 0x8207954C;
		  /* 8207954Ch */ case  117:  		/* stfs FR11, <#[R1 + 440]> */
		/* 8207954Ch case  117:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x000001B8) );
		/* 8207954Ch case  117:*/		return 0x82079550;
		  /* 82079550h */ case  118:  		/* stfs FR10, <#[R1 + 444]> */
		/* 82079550h case  118:*/		cpu::mem::store32f( regs, regs.FR10, (uint32)(regs.R1 + 0x000001BC) );
		/* 82079550h case  118:*/		return 0x82079554;
		  /* 82079554h */ case  119:  		/* stfs FR0, <#[R1 + 448]> */
		/* 82079554h case  119:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000001C0) );
		/* 82079554h case  119:*/		return 0x82079558;
		  /* 82079558h */ case  120:  		/* stfs FR9, <#[R1 + 452]> */
		/* 82079558h case  120:*/		cpu::mem::store32f( regs, regs.FR9, (uint32)(regs.R1 + 0x000001C4) );
		/* 82079558h case  120:*/		return 0x8207955C;
		  /* 8207955Ch */ case  121:  		/* stfs FR8, <#[R1 + 456]> */
		/* 8207955Ch case  121:*/		cpu::mem::store32f( regs, regs.FR8, (uint32)(regs.R1 + 0x000001C8) );
		/* 8207955Ch case  121:*/		return 0x82079560;
		  /* 82079560h */ case  122:  		/* stfs FR7, <#[R1 + 460]> */
		/* 82079560h case  122:*/		cpu::mem::store32f( regs, regs.FR7, (uint32)(regs.R1 + 0x000001CC) );
		/* 82079560h case  122:*/		return 0x82079564;
		  /* 82079564h */ case  123:  		/* stfs FR0, <#[R1 + 464]> */
		/* 82079564h case  123:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000001D0) );
		/* 82079564h case  123:*/		return 0x82079568;
		  /* 82079568h */ case  124:  		/* stfs FR6, <#[R1 + 468]> */
		/* 82079568h case  124:*/		cpu::mem::store32f( regs, regs.FR6, (uint32)(regs.R1 + 0x000001D4) );
		/* 82079568h case  124:*/		return 0x8207956C;
		  /* 8207956Ch */ case  125:  		/* stfs FR13, <#[R1 + 472]> */
		/* 8207956Ch case  125:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x000001D8) );
		/* 8207956Ch case  125:*/		return 0x82079570;
		  /* 82079570h */ case  126:  		/* stfs FR5, <#[R1 + 476]> */
		/* 82079570h case  126:*/		cpu::mem::store32f( regs, regs.FR5, (uint32)(regs.R1 + 0x000001DC) );
		/* 82079570h case  126:*/		return 0x82079574;
		  /* 82079574h */ case  127:  		/* bl 97740 */
		/* 82079574h case  127:*/		regs.LR = 0x82079578; return 0x82091340;
		/* 82079574h case  127:*/		return 0x82079578;
		  /* 82079578h */ case  128:  		/* mr R29, R30 */
		/* 82079578h case  128:*/		regs.R29 = regs.R30;
		/* 82079578h case  128:*/		return 0x8207957C;
		  /* 8207957Ch */ case  129:  		/* cmplwi CR6, R24, 0 */
		/* 8207957Ch case  129:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8207957Ch case  129:*/		return 0x82079580;
		  /* 82079580h */ case  130:  		/* bc 12, CR6_EQ, 216 */
		/* 82079580h case  130:*/		if ( regs.CR[6].eq ) { return 0x82079658;  }
		/* 82079580h case  130:*/		return 0x82079584;
		  /* 82079584h */ case  131:  		/* addi R27, R23, -4 */
		/* 82079584h case  131:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R23,0xFFFFFFFC);
		/* 82079584h case  131:*/		return 0x82079588;
		  /* 82079588h */ case  132:  		/* addi R28, R1, 468 */
		/* 82079588h case  132:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x1D4);
		/* 82079588h case  132:*/		return 0x8207958C;
		  /* 8207958Ch */ case  133:  		/* rldicl R11, R29, 0, 32 */
		/* 8207958Ch case  133:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R29);
		/* 8207958Ch case  133:*/		return 0x82079590;
		  /* 82079590h */ case  134:  		/* stfs FR31, <#[R28 + 12]> */
		/* 82079590h case  134:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R28 + 0x0000000C) );
		/* 82079590h case  134:*/		return 0x82079594;
		  /* 82079594h */ case  135:  		/* li R10, 6 */
		/* 82079594h case  135:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 82079594h case  135:*/		return 0x82079598;
		  /* 82079598h */ case  136:  		/* std R11, <#[R1 + 128]> */
		/* 82079598h case  136:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 82079598h case  136:*/		return 0x8207959C;
		  /* 8207959Ch */ case  137:  		/* lfd FR0, <#[R1 + 128]> */
		/* 8207959Ch case  137:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207959Ch case  137:*/		return 0x820795A0;
		  /* 820795A0h */ case  138:  		/* fcfid FR0, FR0 */
		/* 820795A0h case  138:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 820795A0h case  138:*/		return 0x820795A4;
		  /* 820795A4h */ case  139:  		/* addi R11, R1, 248 */
		/* 820795A4h case  139:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF8);
		/* 820795A4h case  139:*/		return 0x820795A8;
		  /* 820795A8h */ case  140:  		/* frsp FR0, FR0 */
		/* 820795A8h case  140:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 820795A8h case  140:*/		return 0x820795AC;
		  /* 820795ACh */ case  141:  		/* mtspr CTR, R10 */
		/* 820795ACh case  141:*/		regs.CTR = regs.R10;
		/* 820795ACh case  141:*/		return 0x820795B0;
		  /* 820795B0h */ case  142:  		/* stfsu FR0, <#[R28 + 16]> */
		/* 820795B0h case  142:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R28 + 0x00000010) );
		regs.R28 = (uint32)(regs.R28 + 0x00000010);
		/* 820795B0h case  142:*/		return 0x820795B4;
		  /* 820795B4h */ case  143:  		/* mr R10, R30 */
		/* 820795B4h case  143:*/		regs.R10 = regs.R30;
		/* 820795B4h case  143:*/		return 0x820795B8;
		  /* 820795B8h */ case  144:  		/* stdu R10, <#[R11 + 8]> */
		/* 820795B8h case  144:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 820795B8h case  144:*/		return 0x820795BC;
		  /* 820795BCh */ case  145:  		/* bc 16, CR0_LT, -4 */
		/* 820795BCh case  145:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820795B8;  }
		/* 820795BCh case  145:*/		return 0x820795C0;
		  /* 820795C0h */ case  146:  		/* stw R10, <#[R11 + 8]> */
		/* 820795C0h case  146:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820795C0h case  146:*/		return 0x820795C4;
		  /* 820795C4h */ case  147:  		/* addi R11, R1, 136 */
		/* 820795C4h case  147:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 820795C4h case  147:*/		return 0x820795C8;
		  /* 820795C8h */ case  148:  		/* addi R9, R1, 140 */
		/* 820795C8h case  148:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x8C);
		/* 820795C8h case  148:*/		return 0x820795CC;
		  /* 820795CCh */ case  149:  		/* stw R30, <#[R1 + 100]> */
		/* 820795CCh case  149:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 820795CCh case  149:*/		return 0x820795D0;
		  /* 820795D0h */ case  150:  		/* stw R11, <#[R1 + 116]> */
		/* 820795D0h case  150:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820795D0h case  150:*/		return 0x820795D4;
		  /* 820795D4h */ case  151:  		/* addi R11, R1, 256 */
		/* 820795D4h case  151:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x100);
		/* 820795D4h case  151:*/		return 0x820795D8;
		  /* 820795D8h */ case  152:  		/* stw R9, <#[R1 + 124]> */
		/* 820795D8h case  152:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 820795D8h case  152:*/		return 0x820795DC;
		  /* 820795DCh */ case  153:  		/* lis R9, 2048 */
		/* 820795DCh case  153:*/		cpu::op::lis<0>(regs,&regs.R9,0x800);
		/* 820795DCh case  153:*/		return 0x820795E0;
		  /* 820795E0h */ case  154:  		/* stw R11, <#[R1 + 108]> */
		/* 820795E0h case  154:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 820795E0h case  154:*/		return 0x820795E4;
		  /* 820795E4h */ case  155:  		/* li R10, 2 */
		/* 820795E4h case  155:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820795E4h case  155:*/		return 0x820795E8;
		  /* 820795E8h */ case  156:  		/* ori R9, R9, 74 */
		/* 820795E8h case  156:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4A);
		/* 820795E8h case  156:*/		return 0x820795EC;
		  /* 820795ECh */ case  157:  		/* stw R30, <#[R1 + 92]> */
		/* 820795ECh case  157:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 820795ECh case  157:*/		return 0x820795F0;
		  /* 820795F0h */ case  158:  		/* li R8, 0 */
		/* 820795F0h case  158:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820795F0h case  158:*/		return 0x820795F4;
		  /* 820795F4h */ case  159:  		/* stw R30, <#[R1 + 84]> */
		/* 820795F4h case  159:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 820795F4h case  159:*/		return 0x820795F8;
		  /* 820795F8h */ case  160:  		/* li R7, 1 */
		/* 820795F8h case  160:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 820795F8h case  160:*/		return 0x820795FC;
		  /* 820795FCh */ case  161:  		/* li R6, 1 */
		/* 820795FCh case  161:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 820795FCh case  161:*/		return 0x82079600;
		  /* 82079600h */ case  162:  		/* li R5, 4 */
		/* 82079600h case  162:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82079600h case  162:*/		return 0x82079604;
		  /* 82079604h */ case  163:  		/* li R4, 2048 */
		/* 82079604h case  163:*/		cpu::op::li<0>(regs,&regs.R4,0x800);
		/* 82079604h case  163:*/		return 0x82079608;
		  /* 82079608h */ case  164:  		/* li R3, 3 */
		/* 82079608h case  164:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82079608h case  164:*/		return 0x8207960C;
		  /* 8207960Ch */ case  165:  		/* bl -77428 */
		/* 8207960Ch case  165:*/		regs.LR = 0x82079610; return 0x82066798;
		/* 8207960Ch case  165:*/		return 0x82079610;
		  /* 82079610h */ case  166:  		/* lwz R9, <#[R1 + 284]> */
		/* 82079610h case  166:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000011C) );
		/* 82079610h case  166:*/		return 0x82079614;
		  /* 82079614h */ case  167:  		/* li R10, 73 */
		/* 82079614h case  167:*/		cpu::op::li<0>(regs,&regs.R10,0x49);
		/* 82079614h case  167:*/		return 0x82079618;
		  /* 82079618h */ case  168:  		/* lwz R8, <#[R1 + 296]> */
		/* 82079618h case  168:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000128) );
		/* 82079618h case  168:*/		return 0x8207961C;
		  /* 8207961Ch */ case  169:  		/* lwz R7, <#[R1 + 288]> */
		/* 8207961Ch case  169:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000120) );
		/* 8207961Ch case  169:*/		return 0x82079620;
		  /* 82079620h */ case  170:  		/* addi R5, R1, 284 */
		/* 82079620h case  170:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x11C);
		/* 82079620h case  170:*/		return 0x82079624;
		  /* 82079624h */ case  171:  		/* lwzu R11, <#[R27 + 4]> */
		/* 82079624h case  171:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 82079624h case  171:*/		return 0x82079628;
		  /* 82079628h */ case  172:  		/* rlwimi R9, R10, 11, 13, 21 */
		/* 82079628h case  172:*/		cpu::op::rlwimi<0,11,13,21>(regs,&regs.R9,regs.R10);
		/* 82079628h case  172:*/		return 0x8207962C;
		  /* 8207962Ch */ case  173:  		/* rlwinm R10, R8, 0, 13, 8 */
		/* 8207962Ch case  173:*/		cpu::op::rlwinm<0,0,13,8>(regs,&regs.R10,regs.R8);
		/* 8207962Ch case  173:*/		return 0x82079630;
		  /* 82079630h */ case  174:  		/* stw R9, <#[R1 + 284]> */
		/* 82079630h case  174:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000011C) );
		/* 82079630h case  174:*/		return 0x82079634;
		  /* 82079634h */ case  175:  		/* rlwimi R11, R7, 0, 20, 31 */
		/* 82079634h case  175:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R7);
		/* 82079634h case  175:*/		return 0x82079638;
		  /* 82079638h */ case  176:  		/* stw R10, <#[R1 + 296]> */
		/* 82079638h case  176:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000128) );
		/* 82079638h case  176:*/		return 0x8207963C;
		  /* 8207963Ch */ case  177:  		/* mr R4, R29 */
		/* 8207963Ch case  177:*/		regs.R4 = regs.R29;
		/* 8207963Ch case  177:*/		return 0x82079640;
		  /* 82079640h */ case  178:  		/* stw R11, <#[R1 + 288]> */
		/* 82079640h case  178:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 82079640h case  178:*/		return 0x82079644;
		  /* 82079644h */ case  179:  		/* mr R3, R31 */
		/* 82079644h case  179:*/		regs.R3 = regs.R31;
		/* 82079644h case  179:*/		return 0x82079648;
		  /* 82079648h */ case  180:  		/* bl -6208 */
		/* 82079648h case  180:*/		regs.LR = 0x8207964C; return 0x82077E08;
		/* 82079648h case  180:*/		return 0x8207964C;
		  /* 8207964Ch */ case  181:  		/* addi R29, R29, 1 */
		/* 8207964Ch case  181:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8207964Ch case  181:*/		return 0x82079650;
		  /* 82079650h */ case  182:  		/* cmplw CR6, R29, R24 */
		/* 82079650h case  182:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R24);
		/* 82079650h case  182:*/		return 0x82079654;
		  /* 82079654h */ case  183:  		/* bc 12, CR6_LT, -200 */
		/* 82079654h case  183:*/		if ( regs.CR[6].lt ) { return 0x8207958C;  }
		/* 82079654h case  183:*/		return 0x82079658;
	}
	return 0x82079658;
} // Block from 82079378h-82079658h (184 instructions)

//////////////////////////////////////////////////////
// Block at 82079658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079658);
		  /* 82079658h */ case    0:  		/* mr R3, R31 */
		/* 82079658h case    0:*/		regs.R3 = regs.R31;
		/* 82079658h case    0:*/		return 0x8207965C;
		  /* 8207965Ch */ case    1:  		/* bl -6036 */
		/* 8207965Ch case    1:*/		regs.LR = 0x82079660; return 0x82077EC8;
		/* 8207965Ch case    1:*/		return 0x82079660;
		  /* 82079660h */ case    2:  		/* li R6, 4 */
		/* 82079660h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82079660h case    2:*/		return 0x82079664;
		  /* 82079664h */ case    3:  		/* addi R5, R1, 160 */
		/* 82079664h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 82079664h case    3:*/		return 0x82079668;
		  /* 82079668h */ case    4:  		/* li R4, 0 */
		/* 82079668h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079668h case    4:*/		return 0x8207966C;
		  /* 8207966Ch */ case    5:  		/* mr R3, R31 */
		/* 8207966Ch case    5:*/		regs.R3 = regs.R31;
		/* 8207966Ch case    5:*/		return 0x82079670;
		  /* 82079670h */ case    6:  		/* bl -6464 */
		/* 82079670h case    6:*/		regs.LR = 0x82079674; return 0x82077D30;
		/* 82079670h case    6:*/		return 0x82079674;
		  /* 82079674h */ case    7:  		/* li R6, 20 */
		/* 82079674h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x14);
		/* 82079674h case    7:*/		return 0x82079678;
		  /* 82079678h */ case    8:  		/* addi R5, R1, 320 */
		/* 82079678h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x140);
		/* 82079678h case    8:*/		return 0x8207967C;
		  /* 8207967Ch */ case    9:  		/* li R4, 256 */
		/* 8207967Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 8207967Ch case    9:*/		return 0x82079680;
		  /* 82079680h */ case   10:  		/* mr R3, R31 */
		/* 82079680h case   10:*/		regs.R3 = regs.R31;
		/* 82079680h case   10:*/		return 0x82079684;
		  /* 82079684h */ case   11:  		/* bl -6484 */
		/* 82079684h case   11:*/		regs.LR = 0x82079688; return 0x82077D30;
		/* 82079684h case   11:*/		return 0x82079688;
		  /* 82079688h */ case   12:  		/* lbz R11, <#[R31 + 11072]> */
		/* 82079688h case   12:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 82079688h case   12:*/		return 0x8207968C;
		  /* 8207968Ch */ case   13:  		/* rlwinm. R10, R11, 0, 0, 24 */
		/* 8207968Ch case   13:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R10,regs.R11);
		/* 8207968Ch case   13:*/		return 0x82079690;
		  /* 82079690h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 82079690h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8207969C;  }
		/* 82079690h case   14:*/		return 0x82079694;
		  /* 82079694h */ case   15:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82079694h case   15:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82079694h case   15:*/		return 0x82079698;
		  /* 82079698h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 82079698h case   16:*/		if ( regs.CR[0].eq ) { return 0x820796A4;  }
		/* 82079698h case   16:*/		return 0x8207969C;
	}
	return 0x8207969C;
} // Block from 82079658h-8207969Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207969Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207969C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207969C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207969C);
		  /* 8207969Ch */ case    0:  		/* mr R3, R31 */
		/* 8207969Ch case    0:*/		regs.R3 = regs.R31;
		/* 8207969Ch case    0:*/		return 0x820796A0;
		  /* 820796A0h */ case    1:  		/* bl 14440 */
		/* 820796A0h case    1:*/		regs.LR = 0x820796A4; return 0x8207CF08;
		/* 820796A0h case    1:*/		return 0x820796A4;
	}
	return 0x820796A4;
} // Block from 8207969Ch-820796A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820796A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820796A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820796A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820796A4);
		  /* 820796A4h */ case    0:  		/* li R5, 3 */
		/* 820796A4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 820796A4h case    0:*/		return 0x820796A8;
		  /* 820796A8h */ case    1:  		/* li R4, 8 */
		/* 820796A8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 820796A8h case    1:*/		return 0x820796AC;
		  /* 820796ACh */ case    2:  		/* mr R3, R31 */
		/* 820796ACh case    2:*/		regs.R3 = regs.R31;
		/* 820796ACh case    2:*/		return 0x820796B0;
		  /* 820796B0h */ case    3:  		/* bl -6016 */
		/* 820796B0h case    3:*/		regs.LR = 0x820796B4; return 0x82077F30;
		/* 820796B0h case    3:*/		return 0x820796B4;
		  /* 820796B4h */ case    4:  		/* li R9, 6 */
		/* 820796B4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820796B4h case    4:*/		return 0x820796B8;
		  /* 820796B8h */ case    5:  		/* addi R11, R1, 648 */
		/* 820796B8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x288);
		/* 820796B8h case    5:*/		return 0x820796BC;
		  /* 820796BCh */ case    6:  		/* mr R10, R30 */
		/* 820796BCh case    6:*/		regs.R10 = regs.R30;
		/* 820796BCh case    6:*/		return 0x820796C0;
		  /* 820796C0h */ case    7:  		/* mtspr CTR, R9 */
		/* 820796C0h case    7:*/		regs.CTR = regs.R9;
		/* 820796C0h case    7:*/		return 0x820796C4;
		  /* 820796C4h */ case    8:  		/* stdu R10, <#[R11 + 8]> */
		/* 820796C4h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 820796C4h case    8:*/		return 0x820796C8;
		  /* 820796C8h */ case    9:  		/* bc 16, CR0_LT, -4 */
		/* 820796C8h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820796C4;  }
		/* 820796C8h case    9:*/		return 0x820796CC;
		  /* 820796CCh */ case   10:  		/* addi R8, R1, 136 */
		/* 820796CCh case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x88);
		/* 820796CCh case   10:*/		return 0x820796D0;
		  /* 820796D0h */ case   11:  		/* stw R30, <#[R1 + 92]> */
		/* 820796D0h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 820796D0h case   11:*/		return 0x820796D4;
		  /* 820796D4h */ case   12:  		/* stw R30, <#[R1 + 84]> */
		/* 820796D4h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 820796D4h case   12:*/		return 0x820796D8;
		  /* 820796D8h */ case   13:  		/* addi R7, R1, 656 */
		/* 820796D8h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x290);
		/* 820796D8h case   13:*/		return 0x820796DC;
		  /* 820796DCh */ case   14:  		/* stw R8, <#[R1 + 116]> */
		/* 820796DCh case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 820796DCh case   14:*/		return 0x820796E0;
		  /* 820796E0h */ case   15:  		/* lis R9, 10280 */
		/* 820796E0h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0x2828);
		/* 820796E0h case   15:*/		return 0x820796E4;
		  /* 820796E4h */ case   16:  		/* stw R10, <#[R11 + 8]> */
		/* 820796E4h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 820796E4h case   16:*/		return 0x820796E8;
		  /* 820796E8h */ case   17:  		/* addi R11, R1, 140 */
		/* 820796E8h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x8C);
		/* 820796E8h case   17:*/		return 0x820796EC;
		  /* 820796ECh */ case   18:  		/* stw R7, <#[R1 + 108]> */
		/* 820796ECh case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 820796ECh case   18:*/		return 0x820796F0;
		  /* 820796F0h */ case   19:  		/* li R10, 2 */
		/* 820796F0h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 820796F0h case   19:*/		return 0x820796F4;
		  /* 820796F4h */ case   20:  		/* ori R9, R9, 262 */
		/* 820796F4h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x106);
		/* 820796F4h case   20:*/		return 0x820796F8;
		  /* 820796F8h */ case   21:  		/* lwz R5, <#[R31 + 22096]> */
		/* 820796F8h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00005650) );
		/* 820796F8h case   21:*/		return 0x820796FC;
		  /* 820796FCh */ case   22:  		/* li R8, 0 */
		/* 820796FCh case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820796FCh case   22:*/		return 0x82079700;
		  /* 82079700h */ case   23:  		/* lwz R4, <#[R31 + 22092]> */
		/* 82079700h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000564C) );
		/* 82079700h case   23:*/		return 0x82079704;
		  /* 82079704h */ case   24:  		/* li R7, 1 */
		/* 82079704h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82079704h case   24:*/		return 0x82079708;
		  /* 82079708h */ case   25:  		/* stw R11, <#[R1 + 124]> */
		/* 82079708h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82079708h case   25:*/		return 0x8207970C;
		  /* 8207970Ch */ case   26:  		/* li R6, 1 */
		/* 8207970Ch case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8207970Ch case   26:*/		return 0x82079710;
		  /* 82079710h */ case   27:  		/* stw R30, <#[R1 + 100]> */
		/* 82079710h case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82079710h case   27:*/		return 0x82079714;
		  /* 82079714h */ case   28:  		/* li R3, 3 */
		/* 82079714h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82079714h case   28:*/		return 0x82079718;
		  /* 82079718h */ case   29:  		/* bl -77696 */
		/* 82079718h case   29:*/		regs.LR = 0x8207971C; return 0x82066798;
		/* 82079718h case   29:*/		return 0x8207971C;
		  /* 8207971Ch */ case   30:  		/* lwz R11, <#[R31 + 22100]> */
		/* 8207971Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005654) );
		/* 8207971Ch case   30:*/		return 0x82079720;
		  /* 82079720h */ case   31:  		/* lis R10, 8192 */
		/* 82079720h case   31:*/		cpu::op::lis<0>(regs,&regs.R10,0x2000);
		/* 82079720h case   31:*/		return 0x82079724;
		  /* 82079724h */ case   32:  		/* cmplw CR6, R11, R10 */
		/* 82079724h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82079724h case   32:*/		return 0x82079728;
		  /* 82079728h */ case   33:  		/* bc 4, CR6_LT, 12 */
		/* 82079728h case   33:*/		if ( !regs.CR[6].lt ) { return 0x82079734;  }
		/* 82079728h case   33:*/		return 0x8207972C;
		  /* 8207972Ch */ case   34:  		/* addis R11, R11, -16384 */
		/* 8207972Ch case   34:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFC000);
		/* 8207972Ch case   34:*/		return 0x82079730;
		  /* 82079730h */ case   35:  		/* b 8 */
		/* 82079730h case   35:*/		return 0x82079738;
		/* 82079730h case   35:*/		return 0x82079734;
	}
	return 0x82079734;
} // Block from 820796A4h-82079734h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82079734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079734);
		  /* 82079734h */ case    0:  		/* addis R11, R11, -16640 */
		/* 82079734h case    0:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFBF00);
		/* 82079734h case    0:*/		return 0x82079738;
	}
	return 0x82079738;
} // Block from 82079734h-82079738h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82079738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079738);
		  /* 82079738h */ case    0:  		/* lwz R8, <#[R1 + 688]> */
		/* 82079738h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000002B0) );
		/* 82079738h case    0:*/		return 0x8207973C;
		  /* 8207973Ch */ case    1:  		/* li R10, 0 */
		/* 8207973Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207973Ch case    1:*/		return 0x82079740;
		  /* 82079740h */ case    2:  		/* stw R30, <#[R1 + 92]> */
		/* 82079740h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82079740h case    2:*/		return 0x82079744;
		  /* 82079744h */ case    3:  		/* li R9, 0 */
		/* 82079744h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82079744h case    3:*/		return 0x82079748;
		  /* 82079748h */ case    4:  		/* rlwimi R11, R8, 0, 20, 31 */
		/* 82079748h case    4:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R8);
		/* 82079748h case    4:*/		return 0x8207974C;
		  /* 8207974Ch */ case    5:  		/* stw R30, <#[R1 + 100]> */
		/* 8207974Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8207974Ch case    5:*/		return 0x82079750;
		  /* 82079750h */ case    6:  		/* stw R21, <#[R1 + 156]> */
		/* 82079750h case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000009C) );
		/* 82079750h case    6:*/		return 0x82079754;
		  /* 82079754h */ case    7:  		/* li R8, 0 */
		/* 82079754h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82079754h case    7:*/		return 0x82079758;
		  /* 82079758h */ case    8:  		/* stw R30, <#[R1 + 148]> */
		/* 82079758h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000094) );
		/* 82079758h case    8:*/		return 0x8207975C;
		  /* 8207975Ch */ case    9:  		/* li R7, 0 */
		/* 8207975Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207975Ch case    9:*/		return 0x82079760;
		  /* 82079760h */ case   10:  		/* stw R11, <#[R1 + 688]> */
		/* 82079760h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002B0) );
		/* 82079760h case   10:*/		return 0x82079764;
		  /* 82079764h */ case   11:  		/* addi R6, R1, 656 */
		/* 82079764h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x290);
		/* 82079764h case   11:*/		return 0x82079768;
		  /* 82079768h */ case   12:  		/* addi R5, R1, 144 */
		/* 82079768h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x90);
		/* 82079768h case   12:*/		return 0x8207976C;
		  /* 8207976Ch */ case   13:  		/* stw R22, <#[R1 + 152]> */
		/* 8207976Ch case   13:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000098) );
		/* 8207976Ch case   13:*/		return 0x82079770;
		  /* 82079770h */ case   14:  		/* li R4, 0 */
		/* 82079770h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079770h case   14:*/		return 0x82079774;
		  /* 82079774h */ case   15:  		/* stw R30, <#[R1 + 144]> */
		/* 82079774h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 82079774h case   15:*/		return 0x82079778;
		  /* 82079778h */ case   16:  		/* mr R3, R31 */
		/* 82079778h case   16:*/		regs.R3 = regs.R31;
		/* 82079778h case   16:*/		return 0x8207977C;
		  /* 8207977Ch */ case   17:  		/* fmr FR1, FR31 */
		/* 8207977Ch case   17:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207977Ch case   17:*/		return 0x82079780;
		  /* 82079780h */ case   18:  		/* bl 39176 */
		/* 82079780h case   18:*/		regs.LR = 0x82079784; return 0x82083088;
		/* 82079780h case   18:*/		return 0x82079784;
		  /* 82079784h */ case   19:  		/* mr R4, R20 */
		/* 82079784h case   19:*/		regs.R4 = regs.R20;
		/* 82079784h case   19:*/		return 0x82079788;
		  /* 82079788h */ case   20:  		/* mr R3, R31 */
		/* 82079788h case   20:*/		regs.R3 = regs.R31;
		/* 82079788h case   20:*/		return 0x8207978C;
		  /* 8207978Ch */ case   21:  		/* bl -83268 */
		/* 8207978Ch case   21:*/		regs.LR = 0x82079790; return 0x82065248;
		/* 8207978Ch case   21:*/		return 0x82079790;
		  /* 82079790h */ case   22:  		/* cmplwi CR6, R20, 0 */
		/* 82079790h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82079790h case   22:*/		return 0x82079794;
		  /* 82079794h */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 82079794h case   23:*/		if ( regs.CR[6].eq ) { return 0x820797A0;  }
		/* 82079794h case   23:*/		return 0x82079798;
		  /* 82079798h */ case   24:  		/* mr R3, R20 */
		/* 82079798h case   24:*/		regs.R3 = regs.R20;
		/* 82079798h case   24:*/		return 0x8207979C;
		  /* 8207979Ch */ case   25:  		/* bl -30292 */
		/* 8207979Ch case   25:*/		regs.LR = 0x820797A0; return 0x82072148;
		/* 8207979Ch case   25:*/		return 0x820797A0;
	}
	return 0x820797A0;
} // Block from 82079738h-820797A0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820797A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820797A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820797A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820797A0);
		  /* 820797A0h */ case    0:  		/* addi R28, R1, 640 */
		/* 820797A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x280);
		/* 820797A0h case    0:*/		return 0x820797A4;
		  /* 820797A4h */ case    1:  		/* lwz R29, <#[R28]> */
		/* 820797A4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 820797A4h case    1:*/		return 0x820797A8;
		  /* 820797A8h */ case    2:  		/* mr R4, R30 */
		/* 820797A8h case    2:*/		regs.R4 = regs.R30;
		/* 820797A8h case    2:*/		return 0x820797AC;
		  /* 820797ACh */ case    3:  		/* mr R3, R31 */
		/* 820797ACh case    3:*/		regs.R3 = regs.R31;
		/* 820797ACh case    3:*/		return 0x820797B0;
		  /* 820797B0h */ case    4:  		/* mr R5, R29 */
		/* 820797B0h case    4:*/		regs.R5 = regs.R29;
		/* 820797B0h case    4:*/		return 0x820797B4;
		  /* 820797B4h */ case    5:  		/* bl -84220 */
		/* 820797B4h case    5:*/		regs.LR = 0x820797B8; return 0x82064EB8;
		/* 820797B4h case    5:*/		return 0x820797B8;
		  /* 820797B8h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 820797B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820797B8h case    6:*/		return 0x820797BC;
		  /* 820797BCh */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 820797BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x820797C8;  }
		/* 820797BCh case    7:*/		return 0x820797C0;
		  /* 820797C0h */ case    8:  		/* mr R3, R29 */
		/* 820797C0h case    8:*/		regs.R3 = regs.R29;
		/* 820797C0h case    8:*/		return 0x820797C4;
		  /* 820797C4h */ case    9:  		/* bl -30332 */
		/* 820797C4h case    9:*/		regs.LR = 0x820797C8; return 0x82072148;
		/* 820797C4h case    9:*/		return 0x820797C8;
	}
	return 0x820797C8;
} // Block from 820797A0h-820797C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820797C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820797C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820797C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820797C8);
		  /* 820797C8h */ case    0:  		/* addi R30, R30, 1 */
		/* 820797C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 820797C8h case    0:*/		return 0x820797CC;
		  /* 820797CCh */ case    1:  		/* addi R28, R28, 4 */
		/* 820797CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 820797CCh case    1:*/		return 0x820797D0;
		  /* 820797D0h */ case    2:  		/* cmplwi CR6, R30, 4 */
		/* 820797D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 820797D0h case    2:*/		return 0x820797D4;
		  /* 820797D4h */ case    3:  		/* bc 12, CR6_LT, -48 */
		/* 820797D4h case    3:*/		if ( regs.CR[6].lt ) { return 0x820797A4;  }
		/* 820797D4h case    3:*/		return 0x820797D8;
		  /* 820797D8h */ case    4:  		/* mr R4, R19 */
		/* 820797D8h case    4:*/		regs.R4 = regs.R19;
		/* 820797D8h case    4:*/		return 0x820797DC;
		  /* 820797DCh */ case    5:  		/* mr R3, R31 */
		/* 820797DCh case    5:*/		regs.R3 = regs.R31;
		/* 820797DCh case    5:*/		return 0x820797E0;
		  /* 820797E0h */ case    6:  		/* bl -90056 */
		/* 820797E0h case    6:*/		regs.LR = 0x820797E4; return 0x82063818;
		/* 820797E0h case    6:*/		return 0x820797E4;
		  /* 820797E4h */ case    7:  		/* mr R3, R31 */
		/* 820797E4h case    7:*/		regs.R3 = regs.R31;
		/* 820797E4h case    7:*/		return 0x820797E8;
		  /* 820797E8h */ case    8:  		/* bl -21552 */
		/* 820797E8h case    8:*/		regs.LR = 0x820797EC; return 0x820743B8;
		/* 820797E8h case    8:*/		return 0x820797EC;
		  /* 820797ECh */ case    9:  		/* li R3, 1 */
		/* 820797ECh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820797ECh case    9:*/		return 0x820797F0;
		  /* 820797F0h */ case   10:  		/* addi R1, R1, 896 */
		/* 820797F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x380);
		/* 820797F0h case   10:*/		return 0x820797F4;
		  /* 820797F4h */ case   11:  		/* lfd FR31, <#[R1 - 120]> */
		/* 820797F4h case   11:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 820797F4h case   11:*/		return 0x820797F8;
		  /* 820797F8h */ case   12:  		/* b 96908 */
		/* 820797F8h case   12:*/		return 0x82091284;
		/* 820797F8h case   12:*/		return 0x820797FC;
		  /* 820797FCh */ case   13:  		/* nop */
		/* 820797FCh case   13:*/		cpu::op::nop();
		/* 820797FCh case   13:*/		return 0x82079800;
	}
	return 0x82079800;
} // Block from 820797C8h-82079800h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82079800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079800);
		  /* 82079800h */ case    0:  		/* mfspr R12, LR */
		/* 82079800h case    0:*/		regs.R12 = regs.LR;
		/* 82079800h case    0:*/		return 0x82079804;
		  /* 82079804h */ case    1:  		/* bl 96824 */
		/* 82079804h case    1:*/		regs.LR = 0x82079808; return 0x8209123C;
		/* 82079804h case    1:*/		return 0x82079808;
		  /* 82079808h */ case    2:  		/* addi R12, R1, -96 */
		/* 82079808h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFA0);
		/* 82079808h case    2:*/		return 0x8207980C;
		  /* 8207980Ch */ case    3:  		/* bl 97292 */
		/* 8207980Ch case    3:*/		regs.LR = 0x82079810; return 0x82091418;
		/* 8207980Ch case    3:*/		return 0x82079810;
		  /* 82079810h */ case    4:  		/* stwu R1, <#[R1 - 544]> */
		/* 82079810h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDE0);
		/* 82079810h case    4:*/		return 0x82079814;
		  /* 82079814h */ case    5:  		/* li R11, 6 */
		/* 82079814h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82079814h case    5:*/		return 0x82079818;
		  /* 82079818h */ case    6:  		/* mr R27, R10 */
		/* 82079818h case    6:*/		regs.R27 = regs.R10;
		/* 82079818h case    6:*/		return 0x8207981C;
		  /* 8207981Ch */ case    7:  		/* li R30, 0 */
		/* 8207981Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207981Ch case    7:*/		return 0x82079820;
		  /* 82079820h */ case    8:  		/* addi R10, R1, 344 */
		/* 82079820h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x158);
		/* 82079820h case    8:*/		return 0x82079824;
		  /* 82079824h */ case    9:  		/* mr R28, R9 */
		/* 82079824h case    9:*/		regs.R28 = regs.R9;
		/* 82079824h case    9:*/		return 0x82079828;
		  /* 82079828h */ case   10:  		/* mr R31, R3 */
		/* 82079828h case   10:*/		regs.R31 = regs.R3;
		/* 82079828h case   10:*/		return 0x8207982C;
		  /* 8207982Ch */ case   11:  		/* mtspr CTR, R11 */
		/* 8207982Ch case   11:*/		regs.CTR = regs.R11;
		/* 8207982Ch case   11:*/		return 0x82079830;
		  /* 82079830h */ case   12:  		/* mr R23, R4 */
		/* 82079830h case   12:*/		regs.R23 = regs.R4;
		/* 82079830h case   12:*/		return 0x82079834;
		  /* 82079834h */ case   13:  		/* mr R25, R5 */
		/* 82079834h case   13:*/		regs.R25 = regs.R5;
		/* 82079834h case   13:*/		return 0x82079838;
		  /* 82079838h */ case   14:  		/* mr R24, R6 */
		/* 82079838h case   14:*/		regs.R24 = regs.R6;
		/* 82079838h case   14:*/		return 0x8207983C;
		  /* 8207983Ch */ case   15:  		/* mr R21, R7 */
		/* 8207983Ch case   15:*/		regs.R21 = regs.R7;
		/* 8207983Ch case   15:*/		return 0x82079840;
		  /* 82079840h */ case   16:  		/* mr R26, R8 */
		/* 82079840h case   16:*/		regs.R26 = regs.R8;
		/* 82079840h case   16:*/		return 0x82079844;
		  /* 82079844h */ case   17:  		/* mr R9, R30 */
		/* 82079844h case   17:*/		regs.R9 = regs.R30;
		/* 82079844h case   17:*/		return 0x82079848;
		  /* 82079848h */ case   18:  		/* stdu R9, <#[R10 + 8]> */
		/* 82079848h case   18:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82079848h case   18:*/		return 0x8207984C;
		  /* 8207984Ch */ case   19:  		/* bc 16, CR0_LT, -4 */
		/* 8207984Ch case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82079848;  }
		/* 8207984Ch case   19:*/		return 0x82079850;
		  /* 82079850h */ case   20:  		/* stw R9, <#[R10 + 8]> */
		/* 82079850h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 82079850h case   20:*/		return 0x82079854;
		  /* 82079854h */ case   21:  		/* addi R8, R1, 144 */
		/* 82079854h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x90);
		/* 82079854h case   21:*/		return 0x82079858;
		  /* 82079858h */ case   22:  		/* addi R7, R1, 352 */
		/* 82079858h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x160);
		/* 82079858h case   22:*/		return 0x8207985C;
		  /* 8207985Ch */ case   23:  		/* stw R30, <#[R1 + 100]> */
		/* 8207985Ch case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8207985Ch case   23:*/		return 0x82079860;
		  /* 82079860h */ case   24:  		/* lis R9, 2048 */
		/* 82079860h case   24:*/		cpu::op::lis<0>(regs,&regs.R9,0x800);
		/* 82079860h case   24:*/		return 0x82079864;
		  /* 82079864h */ case   25:  		/* stw R8, <#[R1 + 116]> */
		/* 82079864h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 82079864h case   25:*/		return 0x82079868;
		  /* 82079868h */ case   26:  		/* addi R11, R1, 148 */
		/* 82079868h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x94);
		/* 82079868h case   26:*/		return 0x8207986C;
		  /* 8207986Ch */ case   27:  		/* stw R7, <#[R1 + 108]> */
		/* 8207986Ch case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207986Ch case   27:*/		return 0x82079870;
		  /* 82079870h */ case   28:  		/* li R10, 2 */
		/* 82079870h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82079870h case   28:*/		return 0x82079874;
		  /* 82079874h */ case   29:  		/* stw R30, <#[R1 + 92]> */
		/* 82079874h case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82079874h case   29:*/		return 0x82079878;
		  /* 82079878h */ case   30:  		/* ori R9, R9, 74 */
		/* 82079878h case   30:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4A);
		/* 82079878h case   30:*/		return 0x8207987C;
		  /* 8207987Ch */ case   31:  		/* stw R11, <#[R1 + 124]> */
		/* 8207987Ch case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207987Ch case   31:*/		return 0x82079880;
		  /* 82079880h */ case   32:  		/* li R8, 0 */
		/* 82079880h case   32:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82079880h case   32:*/		return 0x82079884;
		  /* 82079884h */ case   33:  		/* stw R30, <#[R1 + 84]> */
		/* 82079884h case   33:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 82079884h case   33:*/		return 0x82079888;
		  /* 82079888h */ case   34:  		/* li R7, 1 */
		/* 82079888h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82079888h case   34:*/		return 0x8207988C;
		  /* 8207988Ch */ case   35:  		/* li R6, 1 */
		/* 8207988Ch case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8207988Ch case   35:*/		return 0x82079890;
		  /* 82079890h */ case   36:  		/* li R5, 4 */
		/* 82079890h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82079890h case   36:*/		return 0x82079894;
		  /* 82079894h */ case   37:  		/* li R4, 2048 */
		/* 82079894h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x800);
		/* 82079894h case   37:*/		return 0x82079898;
		  /* 82079898h */ case   38:  		/* li R3, 3 */
		/* 82079898h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82079898h case   38:*/		return 0x8207989C;
		  /* 8207989Ch */ case   39:  		/* bl -78084 */
		/* 8207989Ch case   39:*/		regs.LR = 0x820798A0; return 0x82066798;
		/* 8207989Ch case   39:*/		return 0x820798A0;
		  /* 820798A0h */ case   40:  		/* lwz R11, <#[R1 + 384]> */
		/* 820798A0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000180) );
		/* 820798A0h case   40:*/		return 0x820798A4;
		  /* 820798A4h */ case   41:  		/* lwz R10, <#[R25]> */
		/* 820798A4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 820798A4h case   41:*/		return 0x820798A8;
		  /* 820798A8h */ case   42:  		/* li R6, 16 */
		/* 820798A8h case   42:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 820798A8h case   42:*/		return 0x820798AC;
		  /* 820798ACh */ case   43:  		/* lwz R9, <#[R1 + 400]> */
		/* 820798ACh case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000190) );
		/* 820798ACh case   43:*/		return 0x820798B0;
		  /* 820798B0h */ case   44:  		/* li R5, 112 */
		/* 820798B0h case   44:*/		cpu::op::li<0>(regs,&regs.R5,0x70);
		/* 820798B0h case   44:*/		return 0x820798B4;
		  /* 820798B4h */ case   45:  		/* rlwimi R11, R10, 0, 0, 19 */
		/* 820798B4h case   45:*/		cpu::op::rlwimi<0,0,0,19>(regs,&regs.R11,regs.R10);
		/* 820798B4h case   45:*/		return 0x820798B8;
		  /* 820798B8h */ case   46:  		/* rlwinm R10, R9, 0, 20, 31 */
		/* 820798B8h case   46:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R10,regs.R9);
		/* 820798B8h case   46:*/		return 0x820798BC;
		  /* 820798BCh */ case   47:  		/* stw R10, <#[R1 + 400]> */
		/* 820798BCh case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000190) );
		/* 820798BCh case   47:*/		return 0x820798C0;
		  /* 820798C0h */ case   48:  		/* li R4, 0 */
		/* 820798C0h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820798C0h case   48:*/		return 0x820798C4;
		  /* 820798C4h */ case   49:  		/* stw R11, <#[R1 + 384]> */
		/* 820798C4h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000180) );
		/* 820798C4h case   49:*/		return 0x820798C8;
		  /* 820798C8h */ case   50:  		/* mr R3, R31 */
		/* 820798C8h case   50:*/		regs.R3 = regs.R31;
		/* 820798C8h case   50:*/		return 0x820798CC;
		  /* 820798CCh */ case   51:  		/* bl -66820 */
		/* 820798CCh case   51:*/		regs.LR = 0x820798D0; return 0x820693C8;
		/* 820798CCh case   51:*/		return 0x820798D0;
		  /* 820798D0h */ case   52:  		/* li R6, 0 */
		/* 820798D0h case   52:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820798D0h case   52:*/		return 0x820798D4;
		  /* 820798D4h */ case   53:  		/* addi R5, R1, 352 */
		/* 820798D4h case   53:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x160);
		/* 820798D4h case   53:*/		return 0x820798D8;
		  /* 820798D8h */ case   54:  		/* li R4, 0 */
		/* 820798D8h case   54:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820798D8h case   54:*/		return 0x820798DC;
		  /* 820798DCh */ case   55:  		/* mr R3, R31 */
		/* 820798DCh case   55:*/		regs.R3 = regs.R31;
		/* 820798DCh case   55:*/		return 0x820798E0;
		  /* 820798E0h */ case   56:  		/* bl -32160 */
		/* 820798E0h case   56:*/		regs.LR = 0x820798E4; return 0x82071B40;
		/* 820798E0h case   56:*/		return 0x820798E4;
		  /* 820798E4h */ case   57:  		/* mr R3, R31 */
		/* 820798E4h case   57:*/		regs.R3 = regs.R31;
		/* 820798E4h case   57:*/		return 0x820798E8;
		  /* 820798E8h */ case   58:  		/* bl -7312 */
		/* 820798E8h case   58:*/		regs.LR = 0x820798EC; return 0x82077C58;
		/* 820798E8h case   58:*/		return 0x820798EC;
		  /* 820798ECh */ case   59:  		/* lis R11, -32256 */
		/* 820798ECh case   59:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820798ECh case   59:*/		return 0x820798F0;
		  /* 820798F0h */ case   60:  		/* li R6, 0 */
		/* 820798F0h case   60:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820798F0h case   60:*/		return 0x820798F4;
		  /* 820798F4h */ case   61:  		/* addi R29, R11, 6812 */
		/* 820798F4h case   61:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1A9C);
		/* 820798F4h case   61:*/		return 0x820798F8;
		  /* 820798F8h */ case   62:  		/* li R5, 306 */
		/* 820798F8h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x132);
		/* 820798F8h case   62:*/		return 0x820798FC;
		  /* 820798FCh */ case   63:  		/* addi R4, R29, 228 */
		/* 820798FCh case   63:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0xE4);
		/* 820798FCh case   63:*/		return 0x82079900;
		  /* 82079900h */ case   64:  		/* mr R3, R31 */
		/* 82079900h case   64:*/		regs.R3 = regs.R31;
		/* 82079900h case   64:*/		return 0x82079904;
		  /* 82079904h */ case   65:  		/* bl -7252 */
		/* 82079904h case   65:*/		regs.LR = 0x82079908; return 0x82077CB0;
		/* 82079904h case   65:*/		return 0x82079908;
		  /* 82079908h */ case   66:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82079908h case   66:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82079908h case   66:*/		return 0x8207990C;
		  /* 8207990Ch */ case   67:  		/* bc 12, CR0_EQ, 24 */
		/* 8207990Ch case   67:*/		if ( regs.CR[0].eq ) { return 0x82079924;  }
		/* 8207990Ch case   67:*/		return 0x82079910;
		  /* 82079910h */ case   68:  		/* addi R5, R29, 36 */
		/* 82079910h case   68:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x24);
		/* 82079910h case   68:*/		return 0x82079914;
		  /* 82079914h */ case   69:  		/* li R6, 12 */
		/* 82079914h case   69:*/		cpu::op::li<0>(regs,&regs.R6,0xC);
		/* 82079914h case   69:*/		return 0x82079918;
		  /* 82079918h */ case   70:  		/* li R4, 244 */
		/* 82079918h case   70:*/		cpu::op::li<0>(regs,&regs.R4,0xF4);
		/* 82079918h case   70:*/		return 0x8207991C;
		  /* 8207991Ch */ case   71:  		/* mr R3, R31 */
		/* 8207991Ch case   71:*/		regs.R3 = regs.R31;
		/* 8207991Ch case   71:*/		return 0x82079920;
		  /* 82079920h */ case   72:  		/* bl -7152 */
		/* 82079920h case   72:*/		regs.LR = 0x82079924; return 0x82077D30;
		/* 82079920h case   72:*/		return 0x82079924;
	}
	return 0x82079924;
} // Block from 82079800h-82079924h (73 instructions)

//////////////////////////////////////////////////////
// Block at 82079924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079924);
		  /* 82079924h */ case    0:  		/* mr R4, R29 */
		/* 82079924h case    0:*/		regs.R4 = regs.R29;
		/* 82079924h case    0:*/		return 0x82079928;
		  /* 82079928h */ case    1:  		/* li R6, 1 */
		/* 82079928h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079928h case    1:*/		return 0x8207992C;
		  /* 8207992Ch */ case    2:  		/* li R5, 9 */
		/* 8207992Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8207992Ch case    2:*/		return 0x82079930;
		  /* 82079930h */ case    3:  		/* mr R3, R31 */
		/* 82079930h case    3:*/		regs.R3 = regs.R31;
		/* 82079930h case    3:*/		return 0x82079934;
		  /* 82079934h */ case    4:  		/* bl -7300 */
		/* 82079934h case    4:*/		regs.LR = 0x82079938; return 0x82077CB0;
		/* 82079934h case    4:*/		return 0x82079938;
		  /* 82079938h */ case    5:  		/* lwz R11, <#[R31 + 48]> */
		/* 82079938h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82079938h case    5:*/		return 0x8207993C;
		  /* 8207993Ch */ case    6:  		/* lwz R10, <#[R31 + 56]> */
		/* 8207993Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8207993Ch case    6:*/		return 0x82079940;
		  /* 82079940h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 82079940h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82079940h case    7:*/		return 0x82079944;
		  /* 82079944h */ case    8:  		/* bc 4, CR6_GT, 16 */
		/* 82079944h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82079954;  }
		/* 82079944h case    8:*/		return 0x82079948;
		  /* 82079948h */ case    9:  		/* mr R3, R31 */
		/* 82079948h case    9:*/		regs.R3 = regs.R31;
		/* 82079948h case    9:*/		return 0x8207994C;
		  /* 8207994Ch */ case   10:  		/* bl -22596 */
		/* 8207994Ch case   10:*/		regs.LR = 0x82079950; return 0x82074108;
		/* 8207994Ch case   10:*/		return 0x82079950;
		  /* 82079950h */ case   11:  		/* mr R11, R3 */
		/* 82079950h case   11:*/		regs.R11 = regs.R3;
		/* 82079950h case   11:*/		return 0x82079954;
	}
	return 0x82079954;
} // Block from 82079924h-82079954h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82079954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079954);
		  /* 82079954h */ case    0:  		/* lis R10, 1 */
		/* 82079954h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82079954h case    0:*/		return 0x82079958;
		  /* 82079958h */ case    1:  		/* lis R9, 5888 */
		/* 82079958h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x1700);
		/* 82079958h case    1:*/		return 0x8207995C;
		  /* 8207995Ch */ case    2:  		/* ori R10, R10, 8576 */
		/* 8207995Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 8207995Ch case    2:*/		return 0x82079960;
		  /* 82079960h */ case    3:  		/* ori R9, R9, 15 */
		/* 82079960h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xF);
		/* 82079960h case    3:*/		return 0x82079964;
		  /* 82079964h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82079964h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079964h case    4:*/		return 0x82079968;
		  /* 82079968h */ case    5:  		/* mr R3, R31 */
		/* 82079968h case    5:*/		regs.R3 = regs.R31;
		/* 82079968h case    5:*/		return 0x8207996C;
		  /* 8207996Ch */ case    6:  		/* mr R10, R30 */
		/* 8207996Ch case    6:*/		regs.R10 = regs.R30;
		/* 8207996Ch case    6:*/		return 0x82079970;
		  /* 82079970h */ case    7:  		/* stwu R9, <#[R11 + 4]> */
		/* 82079970h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079970h case    7:*/		return 0x82079974;
		  /* 82079974h */ case    8:  		/* stwu R30, <#[R11 + 4]> */
		/* 82079974h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82079974h case    8:*/		return 0x82079978;
		  /* 82079978h */ case    9:  		/* stw R11, <#[R31 + 48]> */
		/* 82079978h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82079978h case    9:*/		return 0x8207997C;
		  /* 8207997Ch */ case   10:  		/* bl -6572 */
		/* 8207997Ch case   10:*/		regs.LR = 0x82079980; return 0x82077FD0;
		/* 8207997Ch case   10:*/		return 0x82079980;
		  /* 82079980h */ case   11:  		/* addi R5, R26, 28 */
		/* 82079980h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R26,0x1C);
		/* 82079980h case   11:*/		return 0x82079984;
		  /* 82079984h */ case   12:  		/* li R4, 0 */
		/* 82079984h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079984h case   12:*/		return 0x82079988;
		  /* 82079988h */ case   13:  		/* mr R3, R31 */
		/* 82079988h case   13:*/		regs.R3 = regs.R31;
		/* 82079988h case   13:*/		return 0x8207998C;
		  /* 8207998Ch */ case   14:  		/* bl -7044 */
		/* 8207998Ch case   14:*/		regs.LR = 0x82079990; return 0x82077E08;
		/* 8207998Ch case   14:*/		return 0x82079990;
		  /* 82079990h */ case   15:  		/* mr R3, R31 */
		/* 82079990h case   15:*/		regs.R3 = regs.R31;
		/* 82079990h case   15:*/		return 0x82079994;
		  /* 82079994h */ case   16:  		/* bl -6860 */
		/* 82079994h case   16:*/		regs.LR = 0x82079998; return 0x82077EC8;
		/* 82079994h case   16:*/		return 0x82079998;
		  /* 82079998h */ case   17:  		/* lwz R22, <#[R1 + 636]> */
		/* 82079998h case   17:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x0000027C) );
		/* 82079998h case   17:*/		return 0x8207999C;
		  /* 8207999Ch */ case   18:  		/* lwz R11, <#[R1 + 628]> */
		/* 8207999Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000274) );
		/* 8207999Ch case   18:*/		return 0x820799A0;
		  /* 820799A0h */ case   19:  		/* lis R10, -32256 */
		/* 820799A0h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820799A0h case   19:*/		return 0x820799A4;
		  /* 820799A4h */ case   20:  		/* mr R9, R22 */
		/* 820799A4h case   20:*/		regs.R9 = regs.R22;
		/* 820799A4h case   20:*/		return 0x820799A8;
		  /* 820799A8h */ case   21:  		/* lfs FR9, <#[R28 + 4]> */
		/* 820799A8h case   21:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R28 + 0x00000004) );
		/* 820799A8h case   21:*/		return 0x820799AC;
		  /* 820799ACh */ case   22:  		/* lis R9, -32256 */
		/* 820799ACh case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820799ACh case   22:*/		return 0x820799B0;
		  /* 820799B0h */ case   23:  		/* lfs FR4, <#[R28]> */
		/* 820799B0h case   23:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R28 + 0x00000000) );
		/* 820799B0h case   23:*/		return 0x820799B4;
		  /* 820799B4h */ case   24:  		/* addi R8, R1, 164 */
		/* 820799B4h case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA4);
		/* 820799B4h case   24:*/		return 0x820799B8;
		  /* 820799B8h */ case   25:  		/* std R22, <#[R1 + 128]> */
		/* 820799B8h case   25:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R1 + 0x00000080) );
		/* 820799B8h case   25:*/		return 0x820799BC;
		  /* 820799BCh */ case   26:  		/* lfd FR0, <#[R1 + 128]> */
		/* 820799BCh case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 820799BCh case   26:*/		return 0x820799C0;
		  /* 820799C0h */ case   27:  		/* lfs FR6, <#[R11]> */
		/* 820799C0h case   27:*/		cpu::mem::load32f( regs, &regs.FR6, (uint32)(regs.R11 + 0x00000000) );
		/* 820799C0h case   27:*/		return 0x820799C4;
		  /* 820799C4h */ case   28:  		/* fcfid FR10, FR0 */
		/* 820799C4h case   28:*/		cpu::op::fcfid<0>(regs,&regs.FR10,regs.FR0);
		/* 820799C4h case   28:*/		return 0x820799C8;
		  /* 820799C8h */ case   29:  		/* lfs FR13, <#[R9 + 8444]> */
		/* 820799C8h case   29:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x000020FC) );
		/* 820799C8h case   29:*/		return 0x820799CC;
		  /* 820799CCh */ case   30:  		/* lis R7, -32256 */
		/* 820799CCh case   30:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 820799CCh case   30:*/		return 0x820799D0;
		  /* 820799D0h */ case   31:  		/* lfs FR0, <#[R10 + 1816]> */
		/* 820799D0h case   31:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000718) );
		/* 820799D0h case   31:*/		return 0x820799D4;
		  /* 820799D4h */ case   32:  		/* fmuls FR5, FR6, FR13 */
		/* 820799D4h case   32:*/		cpu::op::fmuls<0>(regs,&regs.FR5,regs.FR6,regs.FR13);
		/* 820799D4h case   32:*/		return 0x820799D8;
		  /* 820799D8h */ case   33:  		/* stfs FR0, <#[R1 + 160]> */
		/* 820799D8h case   33:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000A0) );
		/* 820799D8h case   33:*/		return 0x820799DC;
		  /* 820799DCh */ case   34:  		/* stw R30, <#[R8]> */
		/* 820799DCh case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + 0x00000000) );
		/* 820799DCh case   34:*/		return 0x820799E0;
		  /* 820799E0h */ case   35:  		/* stw R30, <#[R8 + 4]> */
		/* 820799E0h case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + 0x00000004) );
		/* 820799E0h case   35:*/		return 0x820799E4;
		  /* 820799E4h */ case   36:  		/* lis R10, -32256 */
		/* 820799E4h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820799E4h case   36:*/		return 0x820799E8;
		  /* 820799E8h */ case   37:  		/* stw R30, <#[R8 + 8]> */
		/* 820799E8h case   37:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R8 + 0x00000008) );
		/* 820799E8h case   37:*/		return 0x820799EC;
		  /* 820799ECh */ case   38:  		/* lis R6, -32256 */
		/* 820799ECh case   38:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 820799ECh case   38:*/		return 0x820799F0;
		  /* 820799F0h */ case   39:  		/* lis R5, -32256 */
		/* 820799F0h case   39:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 820799F0h case   39:*/		return 0x820799F4;
		  /* 820799F4h */ case   40:  		/* lfs FR12, <#[R11 + 4]> */
		/* 820799F4h case   40:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00000004) );
		/* 820799F4h case   40:*/		return 0x820799F8;
		  /* 820799F8h */ case   41:  		/* lis R4, -32256 */
		/* 820799F8h case   41:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8200);
		/* 820799F8h case   41:*/		return 0x820799FC;
		  /* 820799FCh */ case   42:  		/* lis R8, -32256 */
		/* 820799FCh case   42:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820799FCh case   42:*/		return 0x82079A00;
		  /* 82079A00h */ case   43:  		/* fdivs FR1, FR9, FR12 */
		/* 82079A00h case   43:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR9,regs.FR12);
		/* 82079A00h case   43:*/		return 0x82079A04;
		  /* 82079A04h */ case   44:  		/* lis R9, -32256 */
		/* 82079A04h case   44:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82079A04h case   44:*/		return 0x82079A08;
		  /* 82079A08h */ case   45:  		/* stfs FR0, <#[R1 + 176]> */
		/* 82079A08h case   45:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 82079A08h case   45:*/		return 0x82079A0C;
		  /* 82079A0Ch */ case   46:  		/* stfs FR0, <#[R1 + 180]> */
		/* 82079A0Ch case   46:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B4) );
		/* 82079A0Ch case   46:*/		return 0x82079A10;
		  /* 82079A10h */ case   47:  		/* fmuls FR3, FR12, FR13 */
		/* 82079A10h case   47:*/		cpu::op::fmuls<0>(regs,&regs.FR3,regs.FR12,regs.FR13);
		/* 82079A10h case   47:*/		return 0x82079A14;
		  /* 82079A14h */ case   48:  		/* stfs FR0, <#[R1 + 184]> */
		/* 82079A14h case   48:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B8) );
		/* 82079A14h case   48:*/		return 0x82079A18;
		  /* 82079A18h */ case   49:  		/* frsp FR31, FR10 */
		/* 82079A18h case   49:*/		cpu::op::frsp<0>(regs,&regs.FR31,regs.FR10);
		/* 82079A18h case   49:*/		return 0x82079A1C;
		  /* 82079A1Ch */ case   50:  		/* stfs FR0, <#[R1 + 188]> */
		/* 82079A1Ch case   50:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000BC) );
		/* 82079A1Ch case   50:*/		return 0x82079A20;
		  /* 82079A20h */ case   51:  		/* fdivs FR2, FR4, FR6 */
		/* 82079A20h case   51:*/		cpu::op::fdivs<0>(regs,&regs.FR2,regs.FR4,regs.FR6);
		/* 82079A20h case   51:*/		return 0x82079A24;
		  /* 82079A24h */ case   52:  		/* stfs FR0, <#[R1 + 284]> */
		/* 82079A24h case   52:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000011C) );
		/* 82079A24h case   52:*/		return 0x82079A28;
		  /* 82079A28h */ case   53:  		/* lfs FR11, <#[R6 + 8432]> */
		/* 82079A28h case   53:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R6 + 0x000020F0) );
		/* 82079A28h case   53:*/		return 0x82079A2C;
		  /* 82079A2Ch */ case   54:  		/* lfs FR12, <#[R4 + 8476]> */
		/* 82079A2Ch case   54:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R4 + 0x0000211C) );
		/* 82079A2Ch case   54:*/		return 0x82079A30;
		  /* 82079A30h */ case   55:  		/* lfs FR10, <#[R7 + 2976]> */
		/* 82079A30h case   55:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R7 + 0x00000BA0) );
		/* 82079A30h case   55:*/		return 0x82079A34;
		  /* 82079A34h */ case   56:  		/* lis R7, -32256 */
		/* 82079A34h case   56:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82079A34h case   56:*/		return 0x82079A38;
		  /* 82079A38h */ case   57:  		/* lfs FR9, <#[R10 + 2980]> */
		/* 82079A38h case   57:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R10 + 0x00000BA4) );
		/* 82079A38h case   57:*/		return 0x82079A3C;
		  /* 82079A3Ch */ case   58:  		/* lfs FR8, <#[R5 + 8480]> */
		/* 82079A3Ch case   58:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R5 + 0x00002120) );
		/* 82079A3Ch case   58:*/		return 0x82079A40;
		  /* 82079A40h */ case   59:  		/* lfs FR30, <#[R27]> */
		/* 82079A40h case   59:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R27 + 0x00000000) );
		/* 82079A40h case   59:*/		return 0x82079A44;
		  /* 82079A44h */ case   60:  		/* lfs FR29, <#[R27 + 4]> */
		/* 82079A44h case   60:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R27 + 0x00000004) );
		/* 82079A44h case   60:*/		return 0x82079A48;
		  /* 82079A48h */ case   61:  		/* lfs FR28, <#[R11 + 4]> */
		/* 82079A48h case   61:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000004) );
		/* 82079A48h case   61:*/		return 0x82079A4C;
		  /* 82079A4Ch */ case   62:  		/* lfs FR7, <#[R8 + 8472]> */
		/* 82079A4Ch case   62:*/		cpu::mem::load32f( regs, &regs.FR7, (uint32)(regs.R8 + 0x00002118) );
		/* 82079A4Ch case   62:*/		return 0x82079A50;
		  /* 82079A50h */ case   63:  		/* lfs FR0, <#[R9 + 8468]> */
		/* 82079A50h case   63:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002114) );
		/* 82079A50h case   63:*/		return 0x82079A54;
		  /* 82079A54h */ case   64:  		/* stfs FR6, <#[R1 + 208]> */
		/* 82079A54h case   64:*/		cpu::mem::store32f( regs, regs.FR6, (uint32)(regs.R1 + 0x000000D0) );
		/* 82079A54h case   64:*/		return 0x82079A58;
		  /* 82079A58h */ case   65:  		/* fdivs FR6, FR4, FR5 */
		/* 82079A58h case   65:*/		cpu::op::fdivs<0>(regs,&regs.FR6,regs.FR4,regs.FR5);
		/* 82079A58h case   65:*/		return 0x82079A5C;
		  /* 82079A5Ch */ case   66:  		/* stfs FR10, <#[R1 + 200]> */
		/* 82079A5Ch case   66:*/		cpu::mem::store32f( regs, regs.FR10, (uint32)(regs.R1 + 0x000000C8) );
		/* 82079A5Ch case   66:*/		return 0x82079A60;
		  /* 82079A60h */ case   67:  		/* stfs FR9, <#[R1 + 204]> */
		/* 82079A60h case   67:*/		cpu::mem::store32f( regs, regs.FR9, (uint32)(regs.R1 + 0x000000CC) );
		/* 82079A60h case   67:*/		return 0x82079A64;
		  /* 82079A64h */ case   68:  		/* stfs FR13, <#[R1 + 224]> */
		/* 82079A64h case   68:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x000000E0) );
		/* 82079A64h case   68:*/		return 0x82079A68;
		  /* 82079A68h */ case   69:  		/* stfs FR13, <#[R1 + 228]> */
		/* 82079A68h case   69:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x000000E4) );
		/* 82079A68h case   69:*/		return 0x82079A6C;
		  /* 82079A6Ch */ case   70:  		/* stfs FR11, <#[R1 + 232]> */
		/* 82079A6Ch case   70:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x000000E8) );
		/* 82079A6Ch case   70:*/		return 0x82079A70;
		  /* 82079A70h */ case   71:  		/* stfs FR11, <#[R1 + 236]> */
		/* 82079A70h case   71:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x000000EC) );
		/* 82079A70h case   71:*/		return 0x82079A74;
		  /* 82079A74h */ case   72:  		/* stfs FR8, <#[R1 + 272]> */
		/* 82079A74h case   72:*/		cpu::mem::store32f( regs, regs.FR8, (uint32)(regs.R1 + 0x00000110) );
		/* 82079A74h case   72:*/		return 0x82079A78;
		  /* 82079A78h */ case   73:  		/* stfs FR12, <#[R1 + 276]> */
		/* 82079A78h case   73:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000114) );
		/* 82079A78h case   73:*/		return 0x82079A7C;
		  /* 82079A7Ch */ case   74:  		/* stfs FR30, <#[R1 + 192]> */
		/* 82079A7Ch case   74:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x000000C0) );
		/* 82079A7Ch case   74:*/		return 0x82079A80;
		  /* 82079A80h */ case   75:  		/* stfs FR29, <#[R1 + 196]> */
		/* 82079A80h case   75:*/		cpu::mem::store32f( regs, regs.FR29, (uint32)(regs.R1 + 0x000000C4) );
		/* 82079A80h case   75:*/		return 0x82079A84;
		  /* 82079A84h */ case   76:  		/* stfs FR28, <#[R1 + 212]> */
		/* 82079A84h case   76:*/		cpu::mem::store32f( regs, regs.FR28, (uint32)(regs.R1 + 0x000000D4) );
		/* 82079A84h case   76:*/		return 0x82079A88;
		  /* 82079A88h */ case   77:  		/* stfs FR7, <#[R1 + 280]> */
		/* 82079A88h case   77:*/		cpu::mem::store32f( regs, regs.FR7, (uint32)(regs.R1 + 0x00000118) );
		/* 82079A88h case   77:*/		return 0x82079A8C;
		  /* 82079A8Ch */ case   78:  		/* stfs FR12, <#[R1 + 288]> */
		/* 82079A8Ch case   78:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000120) );
		/* 82079A8Ch case   78:*/		return 0x82079A90;
		  /* 82079A90h */ case   79:  		/* stfs FR0, <#[R1 + 292]> */
		/* 82079A90h case   79:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000124) );
		/* 82079A90h case   79:*/		return 0x82079A94;
		  /* 82079A94h */ case   80:  		/* lfs FR0, <#[R7 + 1792]> */
		/* 82079A94h case   80:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R7 + 0x00000700) );
		/* 82079A94h case   80:*/		return 0x82079A98;
		  /* 82079A98h */ case   81:  		/* lis R11, -32256 */
		/* 82079A98h case   81:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82079A98h case   81:*/		return 0x82079A9C;
		  /* 82079A9Ch */ case   82:  		/* fdivs FR4, FR0, FR31 */
		/* 82079A9Ch case   82:*/		cpu::op::fdivs<0>(regs,&regs.FR4,regs.FR0,regs.FR31);
		/* 82079A9Ch case   82:*/		return 0x82079AA0;
		  /* 82079AA0h */ case   83:  		/* lis R10, -32256 */
		/* 82079AA0h case   83:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82079AA0h case   83:*/		return 0x82079AA4;
		  /* 82079AA4h */ case   84:  		/* lis R9, -32256 */
		/* 82079AA4h case   84:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82079AA4h case   84:*/		return 0x82079AA8;
		  /* 82079AA8h */ case   85:  		/* fsubs FR2, FR2, FR0 */
		/* 82079AA8h case   85:*/		cpu::op::fsubs<0>(regs,&regs.FR2,regs.FR2,regs.FR0);
		/* 82079AA8h case   85:*/		return 0x82079AAC;
		  /* 82079AACh */ case   86:  		/* lis R8, -32256 */
		/* 82079AACh case   86:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82079AACh case   86:*/		return 0x82079AB0;
		  /* 82079AB0h */ case   87:  		/* fsubs FR1, FR1, FR0 */
		/* 82079AB0h case   87:*/		cpu::op::fsubs<0>(regs,&regs.FR1,regs.FR1,regs.FR0);
		/* 82079AB0h case   87:*/		return 0x82079AB4;
		  /* 82079AB4h */ case   88:  		/* lis R7, -32256 */
		/* 82079AB4h case   88:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82079AB4h case   88:*/		return 0x82079AB8;
		  /* 82079AB8h */ case   89:  		/* fdivs FR30, FR0, FR6 */
		/* 82079AB8h case   89:*/		cpu::op::fdivs<0>(regs,&regs.FR30,regs.FR0,regs.FR6);
		/* 82079AB8h case   89:*/		return 0x82079ABC;
		  /* 82079ABCh */ case   90:  		/* lis R5, -32256 */
		/* 82079ABCh case   90:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 82079ABCh case   90:*/		return 0x82079AC0;
		  /* 82079AC0h */ case   91:  		/* lfs FR10, <#[R11 + 8464]> */
		/* 82079AC0h case   91:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R11 + 0x00002110) );
		/* 82079AC0h case   91:*/		return 0x82079AC4;
		  /* 82079AC4h */ case   92:  		/* addi R11, R1, 320 */
		/* 82079AC4h case   92:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x140);
		/* 82079AC4h case   92:*/		return 0x82079AC8;
		  /* 82079AC8h */ case   93:  		/* lfs FR9, <#[R10 + 8460]> */
		/* 82079AC8h case   93:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R10 + 0x0000210C) );
		/* 82079AC8h case   93:*/		return 0x82079ACC;
		  /* 82079ACCh */ case   94:  		/* lfs FR11, <#[R9 + 8456]> */
		/* 82079ACCh case   94:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R9 + 0x00002108) );
		/* 82079ACCh case   94:*/		return 0x82079AD0;
		  /* 82079AD0h */ case   95:  		/* fmuls FR10, FR31, FR10 */
		/* 82079AD0h case   95:*/		cpu::op::fmuls<0>(regs,&regs.FR10,regs.FR31,regs.FR10);
		/* 82079AD0h case   95:*/		return 0x82079AD4;
		  /* 82079AD4h */ case   96:  		/* lfs FR13, <#[R8 + 1820]> */
		/* 82079AD4h case   96:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x0000071C) );
		/* 82079AD4h case   96:*/		return 0x82079AD8;
		  /* 82079AD8h */ case   97:  		/* li R6, 8 */
		/* 82079AD8h case   97:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 82079AD8h case   97:*/		return 0x82079ADC;
		  /* 82079ADCh */ case   98:  		/* lfs FR8, <#[R7 + 8452]> */
		/* 82079ADCh case   98:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R7 + 0x00002104) );
		/* 82079ADCh case   98:*/		return 0x82079AE0;
		  /* 82079AE0h */ case   99:  		/* li R4, 4 */
		/* 82079AE0h case   99:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 82079AE0h case   99:*/		return 0x82079AE4;
		  /* 82079AE4h */ case  100:  		/* lfs FR7, <#[R5 + 8448]> */
		/* 82079AE4h case  100:*/		cpu::mem::load32f( regs, &regs.FR7, (uint32)(regs.R5 + 0x00002100) );
		/* 82079AE4h case  100:*/		return 0x82079AE8;
		  /* 82079AE8h */ case  101:  		/* addi R5, R1, 224 */
		/* 82079AE8h case  101:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 82079AE8h case  101:*/		return 0x82079AEC;
		  /* 82079AECh */ case  102:  		/* fmuls FR9, FR4, FR9 */
		/* 82079AECh case  102:*/		cpu::op::fmuls<0>(regs,&regs.FR9,regs.FR4,regs.FR9);
		/* 82079AECh case  102:*/		return 0x82079AF0;
		  /* 82079AF0h */ case  103:  		/* stfs FR11, <#[R1 + 296]> */
		/* 82079AF0h case  103:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000128) );
		/* 82079AF0h case  103:*/		return 0x82079AF4;
		  /* 82079AF4h */ case  104:  		/* stfs FR5, <#[R1 + 240]> */
		/* 82079AF4h case  104:*/		cpu::mem::store32f( regs, regs.FR5, (uint32)(regs.R1 + 0x000000F0) );
		/* 82079AF4h case  104:*/		return 0x82079AF8;
		  /* 82079AF8h */ case  105:  		/* fadds FR11, FR2, FR0 */
		/* 82079AF8h case  105:*/		cpu::op::fadds<0>(regs,&regs.FR11,regs.FR2,regs.FR0);
		/* 82079AF8h case  105:*/		return 0x82079AFC;
		  /* 82079AFCh */ case  106:  		/* stfs FR13, <#[R1 + 300]> */
		/* 82079AFCh case  106:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x0000012C) );
		/* 82079AFCh case  106:*/		return 0x82079B00;
		  /* 82079B00h */ case  107:  		/* fadds FR0, FR1, FR0 */
		/* 82079B00h case  107:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 82079B00h case  107:*/		return 0x82079B04;
		  /* 82079B04h */ case  108:  		/* stfs FR3, <#[R1 + 244]> */
		/* 82079B04h case  108:*/		cpu::mem::store32f( regs, regs.FR3, (uint32)(regs.R1 + 0x000000F4) );
		/* 82079B04h case  108:*/		return 0x82079B08;
		  /* 82079B08h */ case  109:  		/* mr R3, R31 */
		/* 82079B08h case  109:*/		regs.R3 = regs.R31;
		/* 82079B08h case  109:*/		return 0x82079B0C;
		  /* 82079B0Ch */ case  110:  		/* stfs FR31, <#[R1 + 256]> */
		/* 82079B0Ch case  110:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000100) );
		/* 82079B0Ch case  110:*/		return 0x82079B10;
		  /* 82079B10h */ case  111:  		/* mr R27, R30 */
		/* 82079B10h case  111:*/		regs.R27 = regs.R30;
		/* 82079B10h case  111:*/		return 0x82079B14;
		  /* 82079B14h */ case  112:  		/* stfs FR10, <#[R1 + 268]> */
		/* 82079B14h case  112:*/		cpu::mem::store32f( regs, regs.FR10, (uint32)(regs.R1 + 0x0000010C) );
		/* 82079B14h case  112:*/		return 0x82079B18;
		  /* 82079B18h */ case  113:  		/* stfs FR6, <#[R1 + 248]> */
		/* 82079B18h case  113:*/		cpu::mem::store32f( regs, regs.FR6, (uint32)(regs.R1 + 0x000000F8) );
		/* 82079B18h case  113:*/		return 0x82079B1C;
		  /* 82079B1Ch */ case  114:  		/* stfs FR2, <#[R1 + 216]> */
		/* 82079B1Ch case  114:*/		cpu::mem::store32f( regs, regs.FR2, (uint32)(regs.R1 + 0x000000D8) );
		/* 82079B1Ch case  114:*/		return 0x82079B20;
		  /* 82079B20h */ case  115:  		/* stfs FR30, <#[R1 + 252]> */
		/* 82079B20h case  115:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x000000FC) );
		/* 82079B20h case  115:*/		return 0x82079B24;
		  /* 82079B24h */ case  116:  		/* stfs FR4, <#[R1 + 260]> */
		/* 82079B24h case  116:*/		cpu::mem::store32f( regs, regs.FR4, (uint32)(regs.R1 + 0x00000104) );
		/* 82079B24h case  116:*/		return 0x82079B28;
		  /* 82079B28h */ case  117:  		/* stfs FR1, <#[R1 + 220]> */
		/* 82079B28h case  117:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x000000DC) );
		/* 82079B28h case  117:*/		return 0x82079B2C;
		  /* 82079B2Ch */ case  118:  		/* stfs FR9, <#[R1 + 264]> */
		/* 82079B2Ch case  118:*/		cpu::mem::store32f( regs, regs.FR9, (uint32)(regs.R1 + 0x00000108) );
		/* 82079B2Ch case  118:*/		return 0x82079B30;
		  /* 82079B30h */ case  119:  		/* fctidz FR11, FR11 */
		/* 82079B30h case  119:*/		cpu::op::fctidz<0>(regs,&regs.FR11,regs.FR11);
		/* 82079B30h case  119:*/		return 0x82079B34;
		  /* 82079B34h */ case  120:  		/* stfs FR8, <#[R1 + 304]> */
		/* 82079B34h case  120:*/		cpu::mem::store32f( regs, regs.FR8, (uint32)(regs.R1 + 0x00000130) );
		/* 82079B34h case  120:*/		return 0x82079B38;
		  /* 82079B38h */ case  121:  		/* fctidz FR0, FR0 */
		/* 82079B38h case  121:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82079B38h case  121:*/		return 0x82079B3C;
		  /* 82079B3Ch */ case  122:  		/* stfs FR7, <#[R1 + 308]> */
		/* 82079B3Ch case  122:*/		cpu::mem::store32f( regs, regs.FR7, (uint32)(regs.R1 + 0x00000134) );
		/* 82079B3Ch case  122:*/		return 0x82079B40;
		  /* 82079B40h */ case  123:  		/* stfs FR12, <#[R1 + 312]> */
		/* 82079B40h case  123:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000138) );
		/* 82079B40h case  123:*/		return 0x82079B44;
		  /* 82079B44h */ case  124:  		/* stfs FR13, <#[R1 + 316]> */
		/* 82079B44h case  124:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x0000013C) );
		/* 82079B44h case  124:*/		return 0x82079B48;
		  /* 82079B48h */ case  125:  		/* std R30, <#[R11]> */
		/* 82079B48h case  125:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82079B48h case  125:*/		return 0x82079B4C;
		  /* 82079B4Ch */ case  126:  		/* std R30, <#[R11 + 8]> */
		/* 82079B4Ch case  126:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 82079B4Ch case  126:*/		return 0x82079B50;
		  /* 82079B50h */ case  127:  		/* stfd FR11, <#[R1 + 136]> */
		/* 82079B50h case  127:*/		cpu::mem::store64f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000088) );
		/* 82079B50h case  127:*/		return 0x82079B54;
		  /* 82079B54h */ case  128:  		/* std R30, <#[R11 + 16]> */
		/* 82079B54h case  128:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 82079B54h case  128:*/		return 0x82079B58;
		  /* 82079B58h */ case  129:  		/* stfd FR0, <#[R1 + 128]> */
		/* 82079B58h case  129:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 82079B58h case  129:*/		return 0x82079B5C;
		  /* 82079B5Ch */ case  130:  		/* std R30, <#[R11 + 24]> */
		/* 82079B5Ch case  130:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 82079B5Ch case  130:*/		return 0x82079B60;
		  /* 82079B60h */ case  131:  		/* lwz R11, <#[R1 + 132]> */
		/* 82079B60h case  131:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82079B60h case  131:*/		return 0x82079B64;
		  /* 82079B64h */ case  132:  		/* lwz R10, <#[R1 + 140]> */
		/* 82079B64h case  132:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 82079B64h case  132:*/		return 0x82079B68;
		  /* 82079B68h */ case  133:  		/* mullw R28, R11, R10 */
		/* 82079B68h case  133:*/		cpu::op::mullw<0>(regs,&regs.R28,regs.R11,regs.R10);
		/* 82079B68h case  133:*/		return 0x82079B6C;
		  /* 82079B6Ch */ case  134:  		/* bl -7740 */
		/* 82079B6Ch case  134:*/		regs.LR = 0x82079B70; return 0x82077D30;
		/* 82079B6Ch case  134:*/		return 0x82079B70;
		  /* 82079B70h */ case  135:  		/* mr R11, R30 */
		/* 82079B70h case  135:*/		regs.R11 = regs.R30;
		/* 82079B70h case  135:*/		return 0x82079B74;
		  /* 82079B74h */ case  136:  		/* cmplwi CR6, R24, 0 */
		/* 82079B74h case  136:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82079B74h case  136:*/		return 0x82079B78;
		  /* 82079B78h */ case  137:  		/* bc 12, CR6_EQ, 232 */
		/* 82079B78h case  137:*/		if ( regs.CR[6].eq ) { return 0x82079C60;  }
		/* 82079B78h case  137:*/		return 0x82079B7C;
		  /* 82079B7Ch */ case  138:  		/* lwz R10, <#[R25]> */
		/* 82079B7Ch case  138:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 82079B7Ch case  138:*/		return 0x82079B80;
		  /* 82079B80h */ case  139:  		/* addi R26, R11, 1 */
		/* 82079B80h case  139:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1);
		/* 82079B80h case  139:*/		return 0x82079B84;
		  /* 82079B84h */ case  140:  		/* mr R9, R21 */
		/* 82079B84h case  140:*/		regs.R9 = regs.R21;
		/* 82079B84h case  140:*/		return 0x82079B88;
		  /* 82079B88h */ case  141:  		/* add R11, R10, R23 */
		/* 82079B88h case  141:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R23);
		/* 82079B88h case  141:*/		return 0x82079B8C;
		  /* 82079B8Ch */ case  142:  		/* cmplw CR6, R26, R24 */
		/* 82079B8Ch case  142:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 82079B8Ch case  142:*/		return 0x82079B90;
		  /* 82079B90h */ case  143:  		/* bc 12, CR6_EQ, 8 */
		/* 82079B90h case  143:*/		if ( regs.CR[6].eq ) { return 0x82079B98;  }
		/* 82079B90h case  143:*/		return 0x82079B94;
		  /* 82079B94h */ case  144:  		/* li R9, 16384 */
		/* 82079B94h case  144:*/		cpu::op::li<0>(regs,&regs.R9,0x4000);
		/* 82079B94h case  144:*/		return 0x82079B98;
	}
	return 0x82079B98;
} // Block from 82079954h-82079B98h (145 instructions)

//////////////////////////////////////////////////////
// Block at 82079B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079B98);
		  /* 82079B98h */ case    0:  		/* subf R9, R11, R9 */
		/* 82079B98h case    0:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82079B98h case    0:*/		return 0x82079B9C;
		  /* 82079B9Ch */ case    1:  		/* add R9, R9, R10 */
		/* 82079B9Ch case    1:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82079B9Ch case    1:*/		return 0x82079BA0;
		  /* 82079BA0h */ case    2:  		/* addi R10, R9, 255 */
		/* 82079BA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0xFF);
		/* 82079BA0h case    2:*/		return 0x82079BA4;
		  /* 82079BA4h */ case    3:  		/* rlwinm R10, R10, 24, 8, 31 */
		/* 82079BA4h case    3:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R10,regs.R10);
		/* 82079BA4h case    3:*/		return 0x82079BA8;
		  /* 82079BA8h */ case    4:  		/* mulli R29, R10, 42 */
		/* 82079BA8h case    4:*/		cpu::op::mulli<0>(regs,&regs.R29,regs.R10,0x2A);
		/* 82079BA8h case    4:*/		return 0x82079BAC;
		  /* 82079BACh */ case    5:  		/* cmplw CR6, R28, R29 */
		/* 82079BACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R29);
		/* 82079BACh case    5:*/		return 0x82079BB0;
		  /* 82079BB0h */ case    6:  		/* bc 4, CR6_LT, 8 */
		/* 82079BB0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82079BB8;  }
		/* 82079BB0h case    6:*/		return 0x82079BB4;
		  /* 82079BB4h */ case    7:  		/* mr R29, R28 */
		/* 82079BB4h case    7:*/		regs.R29 = regs.R28;
		/* 82079BB4h case    7:*/		return 0x82079BB8;
	}
	return 0x82079BB8;
} // Block from 82079B98h-82079BB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82079BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079BB8);
		  /* 82079BB8h */ case    0:  		/* rldicl R7, R27, 0, 32 */
		/* 82079BB8h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R27);
		/* 82079BB8h case    0:*/		return 0x82079BBC;
		  /* 82079BBCh */ case    1:  		/* lwz R8, <#[R1 + 168]> */
		/* 82079BBCh case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 82079BBCh case    1:*/		return 0x82079BC0;
		  /* 82079BC0h */ case    2:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82079BC0h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82079BC0h case    2:*/		return 0x82079BC4;
		  /* 82079BC4h */ case    3:  		/* std R7, <#[R1 + 136]> */
		/* 82079BC4h case    3:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 82079BC4h case    3:*/		return 0x82079BC8;
		  /* 82079BC8h */ case    4:  		/* rlwinm R11, R11, 0, 3, 29 */
		/* 82079BC8h case    4:*/		cpu::op::rlwinm<0,0,3,29>(regs,&regs.R11,regs.R11);
		/* 82079BC8h case    4:*/		return 0x82079BCC;
		  /* 82079BCCh */ case    5:  		/* addi R10, R10, 512 */
		/* 82079BCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82079BCCh case    5:*/		return 0x82079BD0;
		  /* 82079BD0h */ case    6:  		/* rlwinm R9, R9, 31, 1, 31 */
		/* 82079BD0h case    6:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R9,regs.R9);
		/* 82079BD0h case    6:*/		return 0x82079BD4;
		  /* 82079BD4h */ case    7:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82079BD4h case    7:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82079BD4h case    7:*/		return 0x82079BD8;
		  /* 82079BD8h */ case    8:  		/* addi R9, R9, -1 */
		/* 82079BD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82079BD8h case    8:*/		return 0x82079BDC;
		  /* 82079BDCh */ case    9:  		/* add R11, R10, R11 */
		/* 82079BDCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82079BDCh case    9:*/		return 0x82079BE0;
		  /* 82079BE0h */ case   10:  		/* andi. R10, R8, 49400 */
		/* 82079BE0h case   10:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R8,0xC0F8);
		/* 82079BE0h case   10:*/		return 0x82079BE4;
		  /* 82079BE4h */ case   11:  		/* lfd FR0, <#[R1 + 136]> */
		/* 82079BE4h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000088) );
		/* 82079BE4h case   11:*/		return 0x82079BE8;
		  /* 82079BE8h */ case   12:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82079BE8h case   12:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82079BE8h case   12:*/		return 0x82079BEC;
		  /* 82079BECh */ case   13:  		/* fcfid FR0, FR0 */
		/* 82079BECh case   13:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 82079BECh case   13:*/		return 0x82079BF0;
		  /* 82079BF0h */ case   14:  		/* rlwinm R9, R9, 0, 9, 31 */
		/* 82079BF0h case   14:*/		cpu::op::rlwinm<0,0,9,31>(regs,&regs.R9,regs.R9);
		/* 82079BF0h case   14:*/		return 0x82079BF4;
		  /* 82079BF4h */ case   15:  		/* oris R11, R11, 16384 */
		/* 82079BF4h case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82079BF4h case   15:*/		return 0x82079BF8;
		  /* 82079BF8h */ case   16:  		/* oris R10, R10, 19200 */
		/* 82079BF8h case   16:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4B00);
		/* 82079BF8h case   16:*/		return 0x82079BFC;
		  /* 82079BFCh */ case   17:  		/* stw R11, <#[R1 + 160]> */
		/* 82079BFCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82079BFCh case   17:*/		return 0x82079C00;
		  /* 82079C00h */ case   18:  		/* lis R8, 19200 */
		/* 82079C00h case   18:*/		cpu::op::lis<0>(regs,&regs.R8,0x4B00);
		/* 82079C00h case   18:*/		return 0x82079C04;
		  /* 82079C04h */ case   19:  		/* ori R10, R10, 2561 */
		/* 82079C04h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xA01);
		/* 82079C04h case   19:*/		return 0x82079C08;
		  /* 82079C08h */ case   20:  		/* oris R11, R9, 19200 */
		/* 82079C08h case   20:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R9,0x4B00);
		/* 82079C08h case   20:*/		return 0x82079C0C;
		  /* 82079C0Ch */ case   21:  		/* stw R8, <#[R1 + 164]> */
		/* 82079C0Ch case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A4) );
		/* 82079C0Ch case   21:*/		return 0x82079C10;
		  /* 82079C10h */ case   22:  		/* stw R10, <#[R1 + 168]> */
		/* 82079C10h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 82079C10h case   22:*/		return 0x82079C14;
		  /* 82079C14h */ case   23:  		/* li R6, 4 */
		/* 82079C14h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82079C14h case   23:*/		return 0x82079C18;
		  /* 82079C18h */ case   24:  		/* stw R11, <#[R1 + 172]> */
		/* 82079C18h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 82079C18h case   24:*/		return 0x82079C1C;
		  /* 82079C1Ch */ case   25:  		/* addi R5, R1, 160 */
		/* 82079C1Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 82079C1Ch case   25:*/		return 0x82079C20;
		  /* 82079C20h */ case   26:  		/* li R4, 0 */
		/* 82079C20h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079C20h case   26:*/		return 0x82079C24;
		  /* 82079C24h */ case   27:  		/* mr R3, R31 */
		/* 82079C24h case   27:*/		regs.R3 = regs.R31;
		/* 82079C24h case   27:*/		return 0x82079C28;
		  /* 82079C28h */ case   28:  		/* frsp FR0, FR0 */
		/* 82079C28h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 82079C28h case   28:*/		return 0x82079C2C;
		  /* 82079C2Ch */ case   29:  		/* stfs FR0, <#[R1 + 176]> */
		/* 82079C2Ch case   29:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 82079C2Ch case   29:*/		return 0x82079C30;
		  /* 82079C30h */ case   30:  		/* bl -7936 */
		/* 82079C30h case   30:*/		regs.LR = 0x82079C34; return 0x82077D30;
		/* 82079C30h case   30:*/		return 0x82079C34;
		  /* 82079C34h */ case   31:  		/* mullw R5, R29, R22 */
		/* 82079C34h case   31:*/		cpu::op::mullw<0>(regs,&regs.R5,regs.R29,regs.R22);
		/* 82079C34h case   31:*/		return 0x82079C38;
		  /* 82079C38h */ case   32:  		/* li R4, 1 */
		/* 82079C38h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82079C38h case   32:*/		return 0x82079C3C;
		  /* 82079C3Ch */ case   33:  		/* mr R3, R31 */
		/* 82079C3Ch case   33:*/		regs.R3 = regs.R31;
		/* 82079C3Ch case   33:*/		return 0x82079C40;
		  /* 82079C40h */ case   34:  		/* bl -7440 */
		/* 82079C40h case   34:*/		regs.LR = 0x82079C44; return 0x82077F30;
		/* 82079C40h case   34:*/		return 0x82079C44;
		  /* 82079C44h */ case   35:  		/* subf R28, R29, R28 */
		/* 82079C44h case   35:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R29,regs.R28);
		/* 82079C44h case   35:*/		return 0x82079C48;
		  /* 82079C48h */ case   36:  		/* add R27, R29, R27 */
		/* 82079C48h case   36:*/		cpu::op::add<0>(regs,&regs.R27,regs.R29,regs.R27);
		/* 82079C48h case   36:*/		return 0x82079C4C;
		  /* 82079C4Ch */ case   37:  		/* mr R23, R30 */
		/* 82079C4Ch case   37:*/		regs.R23 = regs.R30;
		/* 82079C4Ch case   37:*/		return 0x82079C50;
		  /* 82079C50h */ case   38:  		/* mr R11, R26 */
		/* 82079C50h case   38:*/		regs.R11 = regs.R26;
		/* 82079C50h case   38:*/		return 0x82079C54;
		  /* 82079C54h */ case   39:  		/* addi R25, R25, 4 */
		/* 82079C54h case   39:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82079C54h case   39:*/		return 0x82079C58;
		  /* 82079C58h */ case   40:  		/* cmplw CR6, R26, R24 */
		/* 82079C58h case   40:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 82079C58h case   40:*/		return 0x82079C5C;
		  /* 82079C5Ch */ case   41:  		/* bc 12, CR6_LT, -224 */
		/* 82079C5Ch case   41:*/		if ( regs.CR[6].lt ) { return 0x82079B7C;  }
		/* 82079C5Ch case   41:*/		return 0x82079C60;
	}
	return 0x82079C60;
} // Block from 82079BB8h-82079C60h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82079C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079C60);
		  /* 82079C60h */ case    0:  		/* li R6, 0 */
		/* 82079C60h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82079C60h case    0:*/		return 0x82079C64;
		  /* 82079C64h */ case    1:  		/* addi R5, R1, 352 */
		/* 82079C64h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x160);
		/* 82079C64h case    1:*/		return 0x82079C68;
		  /* 82079C68h */ case    2:  		/* li R4, 0 */
		/* 82079C68h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079C68h case    2:*/		return 0x82079C6C;
		  /* 82079C6Ch */ case    3:  		/* mr R3, R31 */
		/* 82079C6Ch case    3:*/		regs.R3 = regs.R31;
		/* 82079C6Ch case    3:*/		return 0x82079C70;
		  /* 82079C70h */ case    4:  		/* bl -32824 */
		/* 82079C70h case    4:*/		regs.LR = 0x82079C74; return 0x82071C38;
		/* 82079C70h case    4:*/		return 0x82079C74;
		  /* 82079C74h */ case    5:  		/* li R6, 64 */
		/* 82079C74h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 82079C74h case    5:*/		return 0x82079C78;
		  /* 82079C78h */ case    6:  		/* li R5, 64 */
		/* 82079C78h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 82079C78h case    6:*/		return 0x82079C7C;
		  /* 82079C7Ch */ case    7:  		/* li R4, 0 */
		/* 82079C7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079C7Ch case    7:*/		return 0x82079C80;
		  /* 82079C80h */ case    8:  		/* mr R3, R31 */
		/* 82079C80h case    8:*/		regs.R3 = regs.R31;
		/* 82079C80h case    8:*/		return 0x82079C84;
		  /* 82079C84h */ case    9:  		/* bl -67772 */
		/* 82079C84h case    9:*/		regs.LR = 0x82079C88; return 0x820693C8;
		/* 82079C84h case    9:*/		return 0x82079C88;
		  /* 82079C88h */ case   10:  		/* addi R1, R1, 544 */
		/* 82079C88h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x220);
		/* 82079C88h case   10:*/		return 0x82079C8C;
		  /* 82079C8Ch */ case   11:  		/* addi R12, R1, -96 */
		/* 82079C8Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFA0);
		/* 82079C8Ch case   11:*/		return 0x82079C90;
		  /* 82079C90h */ case   12:  		/* bl 96212 */
		/* 82079C90h case   12:*/		regs.LR = 0x82079C94; return 0x82091464;
		/* 82079C90h case   12:*/		return 0x82079C94;
		  /* 82079C94h */ case   13:  		/* b 95736 */
		/* 82079C94h case   13:*/		return 0x8209128C;
		/* 82079C94h case   13:*/		return 0x82079C98;
	}
	return 0x82079C98;
} // Block from 82079C60h-82079C98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82079C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079C98);
		  /* 82079C98h */ case    0:  		/* mfspr R12, LR */
		/* 82079C98h case    0:*/		regs.R12 = regs.LR;
		/* 82079C98h case    0:*/		return 0x82079C9C;
		  /* 82079C9Ch */ case    1:  		/* bl 95644 */
		/* 82079C9Ch case    1:*/		regs.LR = 0x82079CA0; return 0x82091238;
		/* 82079C9Ch case    1:*/		return 0x82079CA0;
		  /* 82079CA0h */ case    2:  		/* stwu R1, <#[R1 - 3376]> */
		/* 82079CA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF2D0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF2D0);
		/* 82079CA0h case    2:*/		return 0x82079CA4;
		  /* 82079CA4h */ case    3:  		/* lwz R11, <#[R3 + 23756]> */
		/* 82079CA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005CCC) );
		/* 82079CA4h case    3:*/		return 0x82079CA8;
		  /* 82079CA8h */ case    4:  		/* mr R31, R3 */
		/* 82079CA8h case    4:*/		regs.R31 = regs.R3;
		/* 82079CA8h case    4:*/		return 0x82079CAC;
		  /* 82079CACh */ case    5:  		/* mr R25, R5 */
		/* 82079CACh case    5:*/		regs.R25 = regs.R5;
		/* 82079CACh case    5:*/		return 0x82079CB0;
		  /* 82079CB0h */ case    6:  		/* addi R11, R11, 1 */
		/* 82079CB0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82079CB0h case    6:*/		return 0x82079CB4;
		  /* 82079CB4h */ case    7:  		/* mr R23, R6 */
		/* 82079CB4h case    7:*/		regs.R23 = regs.R6;
		/* 82079CB4h case    7:*/		return 0x82079CB8;
		  /* 82079CB8h */ case    8:  		/* mr R20, R8 */
		/* 82079CB8h case    8:*/		regs.R20 = regs.R8;
		/* 82079CB8h case    8:*/		return 0x82079CBC;
		  /* 82079CBCh */ case    9:  		/* stw R11, <#[R3 + 23756]> */
		/* 82079CBCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00005CCC) );
		/* 82079CBCh case    9:*/		return 0x82079CC0;
		  /* 82079CC0h */ case   10:  		/* mr R22, R9 */
		/* 82079CC0h case   10:*/		regs.R22 = regs.R9;
		/* 82079CC0h case   10:*/		return 0x82079CC4;
		  /* 82079CC4h */ case   11:  		/* li R21, 0 */
		/* 82079CC4h case   11:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82079CC4h case   11:*/		return 0x82079CC8;
		  /* 82079CC8h */ case   12:  		/* rlwinm. R10, R4, 0, 31, 31 */
		/* 82079CC8h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R4);
		/* 82079CC8h case   12:*/		return 0x82079CCC;
		  /* 82079CCCh */ case   13:  		/* bc 12, CR0_EQ, 20 */
		/* 82079CCCh case   13:*/		if ( regs.CR[0].eq ) { return 0x82079CE0;  }
		/* 82079CCCh case   13:*/		return 0x82079CD0;
		  /* 82079CD0h */ case   14:  		/* bl -9472 */
		/* 82079CD0h case   14:*/		regs.LR = 0x82079CD4; return 0x820777D0;
		/* 82079CD0h case   14:*/		return 0x82079CD4;
		  /* 82079CD4h */ case   15:  		/* mr R3, R31 */
		/* 82079CD4h case   15:*/		regs.R3 = regs.R31;
		/* 82079CD4h case   15:*/		return 0x82079CD8;
		  /* 82079CD8h */ case   16:  		/* bl -23504 */
		/* 82079CD8h case   16:*/		regs.LR = 0x82079CDC; return 0x82074108;
		/* 82079CD8h case   16:*/		return 0x82079CDC;
		  /* 82079CDCh */ case   17:  		/* b 752 */
		/* 82079CDCh case   17:*/		return 0x82079FCC;
		/* 82079CDCh case   17:*/		return 0x82079CE0;
	}
	return 0x82079CE0;
} // Block from 82079C98h-82079CE0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82079CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079CE0);
		  /* 82079CE0h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 82079CE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82079CE0h case    0:*/		return 0x82079CE4;
		  /* 82079CE4h */ case    1:  		/* add R11, R11, R7 */
		/* 82079CE4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82079CE4h case    1:*/		return 0x82079CE8;
		  /* 82079CE8h */ case    2:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82079CE8h case    2:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82079CE8h case    2:*/		return 0x82079CEC;
		  /* 82079CECh */ case    3:  		/* rlwinm R9, R11, 0, 3, 31 */
		/* 82079CECh case    3:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R11);
		/* 82079CECh case    3:*/		return 0x82079CF0;
		  /* 82079CF0h */ case    4:  		/* addi R11, R10, 512 */
		/* 82079CF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x200);
		/* 82079CF0h case    4:*/		return 0x82079CF4;
		  /* 82079CF4h */ case    5:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82079CF4h case    5:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82079CF4h case    5:*/		return 0x82079CF8;
		  /* 82079CF8h */ case    6:  		/* add R11, R11, R9 */
		/* 82079CF8h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82079CF8h case    6:*/		return 0x82079CFC;
		  /* 82079CFCh */ case    7:  		/* addis R30, R11, -16384 */
		/* 82079CFCh case    7:*/		cpu::op::addis<0>(regs,&regs.R30,regs.R11,0xFFFFC000);
		/* 82079CFCh case    7:*/		return 0x82079D00;
		  /* 82079D00h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 82079D00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82079D00h case    8:*/		return 0x82079D04;
		  /* 82079D04h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82079D04h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82079D04h case    9:*/		return 0x82079D08;
		  /* 82079D08h */ case   10:  		/* bc 4, CR6_EQ, 688 */
		/* 82079D08h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82079FB8;  }
		/* 82079D08h case   10:*/		return 0x82079D0C;
		  /* 82079D0Ch */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 82079D0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82079D0Ch case   11:*/		return 0x82079D10;
		  /* 82079D10h */ case   12:  		/* cmplwi CR6, R11, 2 */
		/* 82079D10h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82079D10h case   12:*/		return 0x82079D14;
		  /* 82079D14h */ case   13:  		/* bc 12, CR6_GT, 676 */
		/* 82079D14h case   13:*/		if ( regs.CR[6].gt ) { return 0x82079FB8;  }
		/* 82079D14h case   13:*/		return 0x82079D18;
		  /* 82079D18h */ case   14:  		/* lwz R26, <#[R31 + 22092]> */
		/* 82079D18h case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x0000564C) );
		/* 82079D18h case   14:*/		return 0x82079D1C;
		  /* 82079D1Ch */ case   15:  		/* lwz R28, <#[R30 + 16]> */
		/* 82079D1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000010) );
		/* 82079D1Ch case   15:*/		return 0x82079D20;
		  /* 82079D20h */ case   16:  		/* cmplw CR6, R28, R26 */
		/* 82079D20h case   16:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 82079D20h case   16:*/		return 0x82079D24;
		  /* 82079D24h */ case   17:  		/* bc 12, CR6_GT, 652 */
		/* 82079D24h case   17:*/		if ( regs.CR[6].gt ) { return 0x82079FB0;  }
		/* 82079D24h case   17:*/		return 0x82079D28;
		  /* 82079D28h */ case   18:  		/* lwz R27, <#[R31 + 22096]> */
		/* 82079D28h case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00005650) );
		/* 82079D28h case   18:*/		return 0x82079D2C;
		  /* 82079D2Ch */ case   19:  		/* lwz R29, <#[R30 + 20]> */
		/* 82079D2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000014) );
		/* 82079D2Ch case   19:*/		return 0x82079D30;
		  /* 82079D30h */ case   20:  		/* cmplw CR6, R29, R27 */
		/* 82079D30h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 82079D30h case   20:*/		return 0x82079D34;
		  /* 82079D34h */ case   21:  		/* bc 12, CR6_GT, 636 */
		/* 82079D34h case   21:*/		if ( regs.CR[6].gt ) { return 0x82079FB0;  }
		/* 82079D34h case   21:*/		return 0x82079D38;
		  /* 82079D38h */ case   22:  		/* addi R24, R7, 4096 */
		/* 82079D38h case   22:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R7,0x1000);
		/* 82079D38h case   22:*/		return 0x82079D3C;
		  /* 82079D3Ch */ case   23:  		/* cmplwi CR6, R24, 16384 */
		/* 82079D3Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00004000);
		/* 82079D3Ch case   23:*/		return 0x82079D40;
		  /* 82079D40h */ case   24:  		/* bc 12, CR6_LT, 16 */
		/* 82079D40h case   24:*/		if ( regs.CR[6].lt ) { return 0x82079D50;  }
		/* 82079D40h case   24:*/		return 0x82079D44;
		  /* 82079D44h */ case   25:  		/* mr R24, R21 */
		/* 82079D44h case   25:*/		regs.R24 = regs.R21;
		/* 82079D44h case   25:*/		return 0x82079D48;
		  /* 82079D48h */ case   26:  		/* addi R25, R25, 4 */
		/* 82079D48h case   26:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82079D48h case   26:*/		return 0x82079D4C;
		  /* 82079D4Ch */ case   27:  		/* addi R23, R23, -1 */
		/* 82079D4Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 82079D4Ch case   27:*/		return 0x82079D50;
	}
	return 0x82079D50;
} // Block from 82079CE0h-82079D50h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82079D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079D50);
		  /* 82079D50h */ case    0:  		/* li R5, 52 */
		/* 82079D50h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x34);
		/* 82079D50h case    0:*/		return 0x82079D54;
		  /* 82079D54h */ case    1:  		/* stw R21, <#[R1 + 96]> */
		/* 82079D54h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000060) );
		/* 82079D54h case    1:*/		return 0x82079D58;
		  /* 82079D58h */ case    2:  		/* li R4, 0 */
		/* 82079D58h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82079D58h case    2:*/		return 0x82079D5C;
		  /* 82079D5Ch */ case    3:  		/* addi R3, R1, 100 */
		/* 82079D5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x64);
		/* 82079D5Ch case    3:*/		return 0x82079D60;
		  /* 82079D60h */ case    4:  		/* bl 95712 */
		/* 82079D60h case    4:*/		regs.LR = 0x82079D64; return 0x82091340;
		/* 82079D60h case    4:*/		return 0x82079D64;
		  /* 82079D64h */ case    5:  		/* lwz R11, <#[R31 + 22116]> */
		/* 82079D64h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005664) );
		/* 82079D64h case    5:*/		return 0x82079D68;
		  /* 82079D68h */ case    6:  		/* lwz R10, <#[R31 + 22112]> */
		/* 82079D68h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005660) );
		/* 82079D68h case    6:*/		return 0x82079D6C;
		  /* 82079D6Ch */ case    7:  		/* lfs FR0, <#[R30 + 24]> */
		/* 82079D6Ch case    7:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000018) );
		/* 82079D6Ch case    7:*/		return 0x82079D70;
		  /* 82079D70h */ case    8:  		/* lfs FR13, <#[R30 + 28]> */
		/* 82079D70h case    8:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R30 + 0x0000001C) );
		/* 82079D70h case    8:*/		return 0x82079D74;
		  /* 82079D74h */ case    9:  		/* addi R3, R31, 22160 */
		/* 82079D74h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x5690);
		/* 82079D74h case    9:*/		return 0x82079D78;
		  /* 82079D78h */ case   10:  		/* stw R28, <#[R1 + 104]> */
		/* 82079D78h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000068) );
		/* 82079D78h case   10:*/		return 0x82079D7C;
		  /* 82079D7Ch */ case   11:  		/* stw R29, <#[R1 + 108]> */
		/* 82079D7Ch case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000006C) );
		/* 82079D7Ch case   11:*/		return 0x82079D80;
		  /* 82079D80h */ case   12:  		/* std R11, <#[R1 + 80]> */
		/* 82079D80h case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82079D80h case   12:*/		return 0x82079D84;
		  /* 82079D84h */ case   13:  		/* lfd FR12, <#[R1 + 80]> */
		/* 82079D84h case   13:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000050) );
		/* 82079D84h case   13:*/		return 0x82079D88;
		  /* 82079D88h */ case   14:  		/* std R10, <#[R1 + 80]> */
		/* 82079D88h case   14:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82079D88h case   14:*/		return 0x82079D8C;
		  /* 82079D8Ch */ case   15:  		/* lfd FR11, <#[R1 + 80]> */
		/* 82079D8Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x00000050) );
		/* 82079D8Ch case   15:*/		return 0x82079D90;
		  /* 82079D90h */ case   16:  		/* fcfid FR11, FR11 */
		/* 82079D90h case   16:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 82079D90h case   16:*/		return 0x82079D94;
		  /* 82079D94h */ case   17:  		/* addi R11, R1, 96 */
		/* 82079D94h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82079D94h case   17:*/		return 0x82079D98;
		  /* 82079D98h */ case   18:  		/* fcfid FR12, FR12 */
		/* 82079D98h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 82079D98h case   18:*/		return 0x82079D9C;
		  /* 82079D9Ch */ case   19:  		/* mr R10, R3 */
		/* 82079D9Ch case   19:*/		regs.R10 = regs.R3;
		/* 82079D9Ch case   19:*/		return 0x82079DA0;
		  /* 82079DA0h */ case   20:  		/* addi R9, R11, 56 */
		/* 82079DA0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x38);
		/* 82079DA0h case   20:*/		return 0x82079DA4;
		  /* 82079DA4h */ case   21:  		/* frsp FR11, FR11 */
		/* 82079DA4h case   21:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 82079DA4h case   21:*/		return 0x82079DA8;
		  /* 82079DA8h */ case   22:  		/* frsp FR12, FR12 */
		/* 82079DA8h case   22:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 82079DA8h case   22:*/		return 0x82079DAC;
		  /* 82079DACh */ case   23:  		/* fmuls FR0, FR11, FR0 */
		/* 82079DACh case   23:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR11,regs.FR0);
		/* 82079DACh case   23:*/		return 0x82079DB0;
		  /* 82079DB0h */ case   24:  		/* fctidz FR0, FR0 */
		/* 82079DB0h case   24:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82079DB0h case   24:*/		return 0x82079DB4;
		  /* 82079DB4h */ case   25:  		/* stfd FR0, <#[R1 + 80]> */
		/* 82079DB4h case   25:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82079DB4h case   25:*/		return 0x82079DB8;
		  /* 82079DB8h */ case   26:  		/* fmuls FR0, FR12, FR13 */
		/* 82079DB8h case   26:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR12,regs.FR13);
		/* 82079DB8h case   26:*/		return 0x82079DBC;
		  /* 82079DBCh */ case   27:  		/* lwz R8, <#[R1 + 84]> */
		/* 82079DBCh case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 82079DBCh case   27:*/		return 0x82079DC0;
		  /* 82079DC0h */ case   28:  		/* rlwinm R8, R8, 31, 1, 31 */
		/* 82079DC0h case   28:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R8,regs.R8);
		/* 82079DC0h case   28:*/		return 0x82079DC4;
		  /* 82079DC4h */ case   29:  		/* fctidz FR0, FR0 */
		/* 82079DC4h case   29:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82079DC4h case   29:*/		return 0x82079DC8;
		  /* 82079DC8h */ case   30:  		/* stfd FR0, <#[R1 + 80]> */
		/* 82079DC8h case   30:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82079DC8h case   30:*/		return 0x82079DCC;
		  /* 82079DCCh */ case   31:  		/* lwz R7, <#[R1 + 84]> */
		/* 82079DCCh case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 82079DCCh case   31:*/		return 0x82079DD0;
		  /* 82079DD0h */ case   32:  		/* rlwinm R7, R7, 31, 1, 31 */
		/* 82079DD0h case   32:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R7,regs.R7);
		/* 82079DD0h case   32:*/		return 0x82079DD4;
		  /* 82079DD4h */ case   33:  		/* stw R7, <#[R1 + 116]> */
		/* 82079DD4h case   33:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000074) );
		/* 82079DD4h case   33:*/		return 0x82079DD8;
		  /* 82079DD8h */ case   34:  		/* stw R8, <#[R1 + 112]> */
		/* 82079DD8h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 82079DD8h case   34:*/		return 0x82079DDC;
		  /* 82079DDCh */ case   35:  		/* lbz R8, <#[R11]> */
		/* 82079DDCh case   35:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82079DDCh case   35:*/		return 0x82079DE0;
		  /* 82079DE0h */ case   36:  		/* lbz R7, <#[R10]> */
		/* 82079DE0h case   36:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 82079DE0h case   36:*/		return 0x82079DE4;
		  /* 82079DE4h */ case   37:  		/* subf. R8, R7, R8 */
		/* 82079DE4h case   37:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 82079DE4h case   37:*/		return 0x82079DE8;
		  /* 82079DE8h */ case   38:  		/* bc 4, CR0_EQ, 20 */
		/* 82079DE8h case   38:*/		if ( !regs.CR[0].eq ) { return 0x82079DFC;  }
		/* 82079DE8h case   38:*/		return 0x82079DEC;
		  /* 82079DECh */ case   39:  		/* addi R11, R11, 1 */
		/* 82079DECh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82079DECh case   39:*/		return 0x82079DF0;
		  /* 82079DF0h */ case   40:  		/* addi R10, R10, 1 */
		/* 82079DF0h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82079DF0h case   40:*/		return 0x82079DF4;
		  /* 82079DF4h */ case   41:  		/* cmpw CR6, R11, R9 */
		/* 82079DF4h case   41:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 82079DF4h case   41:*/		return 0x82079DF8;
		  /* 82079DF8h */ case   42:  		/* bc 4, CR6_EQ, -28 */
		/* 82079DF8h case   42:*/		if ( !regs.CR[6].eq ) { return 0x82079DDC;  }
		/* 82079DF8h case   42:*/		return 0x82079DFC;
	}
	return 0x82079DFC;
} // Block from 82079D50h-82079DFCh (43 instructions)

//////////////////////////////////////////////////////
// Block at 82079DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079DFC);
		  /* 82079DFCh */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 82079DFCh case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 82079DFCh case    0:*/		return 0x82079E00;
		  /* 82079E00h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82079E00h case    1:*/		if ( regs.CR[0].eq ) { return 0x82079E28;  }
		/* 82079E00h case    1:*/		return 0x82079E04;
		  /* 82079E04h */ case    2:  		/* addi R4, R1, 96 */
		/* 82079E04h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82079E04h case    2:*/		return 0x82079E08;
		  /* 82079E08h */ case    3:  		/* li R5, 56 */
		/* 82079E08h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 82079E08h case    3:*/		return 0x82079E0C;
		  /* 82079E0Ch */ case    4:  		/* bl 97188 */
		/* 82079E0Ch case    4:*/		regs.LR = 0x82079E10; return 0x820919B0;
		/* 82079E0Ch case    4:*/		return 0x82079E10;
		  /* 82079E10h */ case    5:  		/* li R7, 1 */
		/* 82079E10h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82079E10h case    5:*/		return 0x82079E14;
		  /* 82079E14h */ case    6:  		/* addi R6, R1, 96 */
		/* 82079E14h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 82079E14h case    6:*/		return 0x82079E18;
		  /* 82079E18h */ case    7:  		/* mr R5, R27 */
		/* 82079E18h case    7:*/		regs.R5 = regs.R27;
		/* 82079E18h case    7:*/		return 0x82079E1C;
		  /* 82079E1Ch */ case    8:  		/* mr R4, R26 */
		/* 82079E1Ch case    8:*/		regs.R4 = regs.R26;
		/* 82079E1Ch case    8:*/		return 0x82079E20;
		  /* 82079E20h */ case    9:  		/* mr R3, R31 */
		/* 82079E20h case    9:*/		regs.R3 = regs.R31;
		/* 82079E20h case    9:*/		return 0x82079E24;
		  /* 82079E24h */ case   10:  		/* bl 10956 */
		/* 82079E24h case   10:*/		regs.LR = 0x82079E28; return 0x8207C8F0;
		/* 82079E24h case   10:*/		return 0x82079E28;
	}
	return 0x82079E28;
} // Block from 82079DFCh-82079E28h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82079E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079E28);
		  /* 82079E28h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 82079E28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82079E28h case    0:*/		return 0x82079E2C;
		  /* 82079E2Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82079E2Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82079E2Ch case    1:*/		return 0x82079E30;
		  /* 82079E30h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82079E30h case    2:*/		if ( regs.CR[0].eq ) { return 0x82079E40;  }
		/* 82079E30h case    2:*/		return 0x82079E34;
		  /* 82079E34h */ case    3:  		/* li R6, 1 */
		/* 82079E34h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079E34h case    3:*/		return 0x82079E38;
		  /* 82079E38h */ case    4:  		/* addi R29, R30, 36 */
		/* 82079E38h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x24);
		/* 82079E38h case    4:*/		return 0x82079E3C;
		  /* 82079E3Ch */ case    5:  		/* b 44 */
		/* 82079E3Ch case    5:*/		return 0x82079E68;
		/* 82079E3Ch case    5:*/		return 0x82079E40;
	}
	return 0x82079E40;
} // Block from 82079E28h-82079E40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82079E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079E40);
		  /* 82079E40h */ case    0:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82079E40h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82079E40h case    0:*/		return 0x82079E44;
		  /* 82079E44h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 82079E44h case    1:*/		if ( regs.CR[0].eq ) { return 0x82079E60;  }
		/* 82079E44h case    1:*/		return 0x82079E48;
		  /* 82079E48h */ case    2:  		/* addi R4, R30, 36 */
		/* 82079E48h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x24);
		/* 82079E48h case    2:*/		return 0x82079E4C;
		  /* 82079E4Ch */ case    3:  		/* addi R3, R1, 1728 */
		/* 82079E4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x6C0);
		/* 82079E4Ch case    3:*/		return 0x82079E50;
		  /* 82079E50h */ case    4:  		/* li R6, 1 */
		/* 82079E50h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079E50h case    4:*/		return 0x82079E54;
		  /* 82079E54h */ case    5:  		/* addi R29, R1, 1728 */
		/* 82079E54h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x6C0);
		/* 82079E54h case    5:*/		return 0x82079E58;
		  /* 82079E58h */ case    6:  		/* bl -9976 */
		/* 82079E58h case    6:*/		regs.LR = 0x82079E5C; return 0x82077760;
		/* 82079E58h case    6:*/		return 0x82079E5C;
		  /* 82079E5Ch */ case    7:  		/* b 12 */
		/* 82079E5Ch case    7:*/		return 0x82079E68;
		/* 82079E5Ch case    7:*/		return 0x82079E60;
	}
	return 0x82079E60;
} // Block from 82079E40h-82079E60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82079E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079E60);
		  /* 82079E60h */ case    0:  		/* mr R6, R21 */
		/* 82079E60h case    0:*/		regs.R6 = regs.R21;
		/* 82079E60h case    0:*/		return 0x82079E64;
		  /* 82079E64h */ case    1:  		/* mr R29, R21 */
		/* 82079E64h case    1:*/		regs.R29 = regs.R21;
		/* 82079E64h case    1:*/		return 0x82079E68;
	}
	return 0x82079E68;
} // Block from 82079E60h-82079E68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82079E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079E68);
		  /* 82079E68h */ case    0:  		/* lwz R11, <#[R31 + 23752]> */
		/* 82079E68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005CC8) );
		/* 82079E68h case    0:*/		return 0x82079E6C;
		  /* 82079E6Ch */ case    1:  		/* cmpw CR6, R6, R11 */
		/* 82079E6Ch case    1:*/		cpu::op::cmpw<6>(regs,regs.R6,regs.R11);
		/* 82079E6Ch case    1:*/		return 0x82079E70;
		  /* 82079E70h */ case    2:  		/* bc 4, CR6_EQ, 64 */
		/* 82079E70h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82079EB0;  }
		/* 82079E70h case    2:*/		return 0x82079E74;
		  /* 82079E74h */ case    3:  		/* cmpwi CR6, R6, 0 */
		/* 82079E74h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82079E74h case    3:*/		return 0x82079E78;
		  /* 82079E78h */ case    4:  		/* bc 12, CR6_EQ, 116 */
		/* 82079E78h case    4:*/		if ( regs.CR[6].eq ) { return 0x82079EEC;  }
		/* 82079E78h case    4:*/		return 0x82079E7C;
		  /* 82079E7Ch */ case    5:  		/* addi R10, R31, 22216 */
		/* 82079E7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x56C8);
		/* 82079E7Ch case    5:*/		return 0x82079E80;
		  /* 82079E80h */ case    6:  		/* mr R11, R29 */
		/* 82079E80h case    6:*/		regs.R11 = regs.R29;
		/* 82079E80h case    6:*/		return 0x82079E84;
		  /* 82079E84h */ case    7:  		/* addi R8, R29, 1536 */
		/* 82079E84h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x600);
		/* 82079E84h case    7:*/		return 0x82079E88;
		  /* 82079E88h */ case    8:  		/* lbz R9, <#[R11]> */
		/* 82079E88h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82079E88h case    8:*/		return 0x82079E8C;
		  /* 82079E8Ch */ case    9:  		/* lbz R7, <#[R10]> */
		/* 82079E8Ch case    9:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 82079E8Ch case    9:*/		return 0x82079E90;
		  /* 82079E90h */ case   10:  		/* subf. R9, R7, R9 */
		/* 82079E90h case   10:*/		cpu::op::subf<1>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82079E90h case   10:*/		return 0x82079E94;
		  /* 82079E94h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 82079E94h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82079EA8;  }
		/* 82079E94h case   11:*/		return 0x82079E98;
		  /* 82079E98h */ case   12:  		/* addi R11, R11, 1 */
		/* 82079E98h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82079E98h case   12:*/		return 0x82079E9C;
		  /* 82079E9Ch */ case   13:  		/* addi R10, R10, 1 */
		/* 82079E9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82079E9Ch case   13:*/		return 0x82079EA0;
		  /* 82079EA0h */ case   14:  		/* cmpw CR6, R11, R8 */
		/* 82079EA0h case   14:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 82079EA0h case   14:*/		return 0x82079EA4;
		  /* 82079EA4h */ case   15:  		/* bc 4, CR6_EQ, -28 */
		/* 82079EA4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82079E88;  }
		/* 82079EA4h case   15:*/		return 0x82079EA8;
	}
	return 0x82079EA8;
} // Block from 82079E68h-82079EA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82079EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079EA8);
		  /* 82079EA8h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 82079EA8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 82079EA8h case    0:*/		return 0x82079EAC;
		  /* 82079EACh */ case    1:  		/* bc 12, CR0_EQ, 64 */
		/* 82079EACh case    1:*/		if ( regs.CR[0].eq ) { return 0x82079EEC;  }
		/* 82079EACh case    1:*/		return 0x82079EB0;
	}
	return 0x82079EB0;
} // Block from 82079EA8h-82079EB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82079EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079EB0);
		  /* 82079EB0h */ case    0:  		/* stw R6, <#[R31 + 23752]> */
		/* 82079EB0h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00005CC8) );
		/* 82079EB0h case    0:*/		return 0x82079EB4;
		  /* 82079EB4h */ case    1:  		/* cmpwi CR6, R6, 0 */
		/* 82079EB4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82079EB4h case    1:*/		return 0x82079EB8;
	}
	return 0x82079EB8;
} // Block from 82079EB0h-82079EB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82079EB8h
// Function '?MarkBits@D3D@@YAXPAUEdram@1@KKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079EB8);
		  /* 82079EB8h */ case    0:  		/* bc 12, CR6_EQ, 28 */
		/* 82079EB8h case    0:*/		if ( regs.CR[6].eq ) { return 0x82079ED4;  }
		/* 82079EB8h case    0:*/		return 0x82079EBC;
		  /* 82079EBCh */ case    1:  		/* addi R3, R31, 22216 */
		/* 82079EBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x56C8);
		/* 82079EBCh case    1:*/		return 0x82079EC0;
		  /* 82079EC0h */ case    2:  		/* li R5, 1536 */
		/* 82079EC0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 82079EC0h case    2:*/		return 0x82079EC4;
		  /* 82079EC4h */ case    3:  		/* mr R4, R29 */
		/* 82079EC4h case    3:*/		regs.R4 = regs.R29;
		/* 82079EC4h case    3:*/		return 0x82079EC8;
		  /* 82079EC8h */ case    4:  		/* bl 97000 */
		/* 82079EC8h case    4:*/		regs.LR = 0x82079ECC; return 0x820919B0;
		/* 82079EC8h case    4:*/		return 0x82079ECC;
		  /* 82079ECCh */ case    5:  		/* mr R5, R29 */
		/* 82079ECCh case    5:*/		regs.R5 = regs.R29;
		/* 82079ECCh case    5:*/		return 0x82079ED0;
		  /* 82079ED0h */ case    6:  		/* b 8 */
		/* 82079ED0h case    6:*/		return 0x82079ED8;
		/* 82079ED0h case    6:*/		return 0x82079ED4;
	}
	return 0x82079ED4;
} // Block from 82079EB8h-82079ED4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82079ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079ED4);
		  /* 82079ED4h */ case    0:  		/* mr R5, R21 */
		/* 82079ED4h case    0:*/		regs.R5 = regs.R21;
		/* 82079ED4h case    0:*/		return 0x82079ED8;
	}
	return 0x82079ED8;
} // Block from 82079ED4h-82079ED8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82079ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079ED8);
		  /* 82079ED8h */ case    0:  		/* lis R4, 10280 */
		/* 82079ED8h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2828);
		/* 82079ED8h case    0:*/		return 0x82079EDC;
		  /* 82079EDCh */ case    1:  		/* li R6, 1 */
		/* 82079EDCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079EDCh case    1:*/		return 0x82079EE0;
		  /* 82079EE0h */ case    2:  		/* ori R4, R4, 262 */
		/* 82079EE0h case    2:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x106);
		/* 82079EE0h case    2:*/		return 0x82079EE4;
		  /* 82079EE4h */ case    3:  		/* mr R3, R31 */
		/* 82079EE4h case    3:*/		regs.R3 = regs.R31;
		/* 82079EE4h case    3:*/		return 0x82079EE8;
		  /* 82079EE8h */ case    4:  		/* bl -49224 */
		/* 82079EE8h case    4:*/		regs.LR = 0x82079EEC; return 0x8206DEA0;
		/* 82079EE8h case    4:*/		return 0x82079EEC;
	}
	return 0x82079EEC;
} // Block from 82079ED8h-82079EECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82079EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079EEC);
		  /* 82079EECh */ case    0:  		/* lwz R11, <#[R31 + 21944]> */
		/* 82079EECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055B8) );
		/* 82079EECh case    0:*/		return 0x82079EF0;
		  /* 82079EF0h */ case    1:  		/* mr R6, R23 */
		/* 82079EF0h case    1:*/		regs.R6 = regs.R23;
		/* 82079EF0h case    1:*/		return 0x82079EF4;
		  /* 82079EF4h */ case    2:  		/* mr R5, R25 */
		/* 82079EF4h case    2:*/		regs.R5 = regs.R25;
		/* 82079EF4h case    2:*/		return 0x82079EF8;
		  /* 82079EF8h */ case    3:  		/* rlwinm R10, R11, 0, 1, 31 */
		/* 82079EF8h case    3:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R10,regs.R11);
		/* 82079EF8h case    3:*/		return 0x82079EFC;
		  /* 82079EFCh */ case    4:  		/* mr R4, R24 */
		/* 82079EFCh case    4:*/		regs.R4 = regs.R24;
		/* 82079EFCh case    4:*/		return 0x82079F00;
		  /* 82079F00h */ case    5:  		/* stw R10, <#[R31 + 21944]> */
		/* 82079F00h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000055B8) );
		/* 82079F00h case    5:*/		return 0x82079F04;
		  /* 82079F04h */ case    6:  		/* mr R3, R31 */
		/* 82079F04h case    6:*/		regs.R3 = regs.R31;
		/* 82079F04h case    6:*/		return 0x82079F08;
		  /* 82079F08h */ case    7:  		/* lwz R8, <#[R30 + 20]> */
		/* 82079F08h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82079F08h case    7:*/		return 0x82079F0C;
		  /* 82079F0Ch */ case    8:  		/* srawi R29, R11, 31 */
		/* 82079F0Ch case    8:*/		cpu::op::srawi<0,31>(regs,&regs.R29,regs.R11);
		/* 82079F0Ch case    8:*/		return 0x82079F10;
		  /* 82079F10h */ case    9:  		/* lwz R7, <#[R30 + 16]> */
		/* 82079F10h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000010) );
		/* 82079F10h case    9:*/		return 0x82079F14;
		  /* 82079F14h */ case   10:  		/* bl -3788 */
		/* 82079F14h case   10:*/		regs.LR = 0x82079F18; return 0x82079048;
		/* 82079F14h case   10:*/		return 0x82079F18;
		  /* 82079F18h */ case   11:  		/* lwz R11, <#[R31 + 21944]> */
		/* 82079F18h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055B8) );
		/* 82079F18h case   11:*/		return 0x82079F1C;
		  /* 82079F1Ch */ case   12:  		/* rlwimi R11, R29, 31, 0, 0 */
		/* 82079F1Ch case   12:*/		cpu::op::rlwimi<0,31,0,0>(regs,&regs.R11,regs.R29);
		/* 82079F1Ch case   12:*/		return 0x82079F20;
		  /* 82079F20h */ case   13:  		/* mr R10, R21 */
		/* 82079F20h case   13:*/		regs.R10 = regs.R21;
		/* 82079F20h case   13:*/		return 0x82079F24;
		  /* 82079F24h */ case   14:  		/* stw R11, <#[R31 + 21944]> */
		/* 82079F24h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055B8) );
		/* 82079F24h case   14:*/		return 0x82079F28;
		  /* 82079F28h */ case   15:  		/* lwz R11, <#[R30 + 12]> */
		/* 82079F28h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82079F28h case   15:*/		return 0x82079F2C;
		  /* 82079F2Ch */ case   16:  		/* rlwinm. R9, R11, 0, 30, 31 */
		/* 82079F2Ch case   16:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R11);
		/* 82079F2Ch case   16:*/		return 0x82079F30;
		  /* 82079F30h */ case   17:  		/* bc 12, CR0_EQ, 8 */
		/* 82079F30h case   17:*/		if ( regs.CR[0].eq ) { return 0x82079F38;  }
		/* 82079F30h case   17:*/		return 0x82079F34;
		  /* 82079F34h */ case   18:  		/* li R10, 1 */
		/* 82079F34h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82079F34h case   18:*/		return 0x82079F38;
	}
	return 0x82079F38;
} // Block from 82079EECh-82079F38h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82079F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079F38);
		  /* 82079F38h */ case    0:  		/* lwz R9, <#[R31 + 22100]> */
		/* 82079F38h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005654) );
		/* 82079F38h case    0:*/		return 0x82079F3C;
		  /* 82079F3Ch */ case    1:  		/* li R6, 1 */
		/* 82079F3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82079F3Ch case    1:*/		return 0x82079F40;
		  /* 82079F40h */ case    2:  		/* lwz R7, <#[R30 + 16]> */
		/* 82079F40h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000010) );
		/* 82079F40h case    2:*/		return 0x82079F44;
		  /* 82079F44h */ case    3:  		/* lfs FR0, <#[R30 + 32]> */
		/* 82079F44h case    3:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R30 + 0x00000020) );
		/* 82079F44h case    3:*/		return 0x82079F48;
		  /* 82079F48h */ case    4:  		/* lwz R5, <#[R30 + 20]> */
		/* 82079F48h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000014) );
		/* 82079F48h case    4:*/		return 0x82079F4C;
		  /* 82079F4Ch */ case    5:  		/* rlwinm R9, R9, 12, 0, 19 */
		/* 82079F4Ch case    5:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R9,regs.R9);
		/* 82079F4Ch case    5:*/		return 0x82079F50;
		  /* 82079F50h */ case    6:  		/* stfs FR0, <#[R1 + 180]> */
		/* 82079F50h case    6:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B4) );
		/* 82079F50h case    6:*/		return 0x82079F54;
		  /* 82079F54h */ case    7:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 82079F54h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 82079F54h case    7:*/		return 0x82079F58;
		  /* 82079F58h */ case    8:  		/* stw R6, <#[R1 + 160]> */
		/* 82079F58h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000000A0) );
		/* 82079F58h case    8:*/		return 0x82079F5C;
		  /* 82079F5Ch */ case    9:  		/* stw R10, <#[R1 + 164]> */
		/* 82079F5Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 82079F5Ch case    9:*/		return 0x82079F60;
		  /* 82079F60h */ case   10:  		/* stw R9, <#[R1 + 176]> */
		/* 82079F60h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B0) );
		/* 82079F60h case   10:*/		return 0x82079F64;
		  /* 82079F64h */ case   11:  		/* stw R7, <#[R1 + 168]> */
		/* 82079F64h case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000A8) );
		/* 82079F64h case   11:*/		return 0x82079F68;
		  /* 82079F68h */ case   12:  		/* stw R5, <#[R1 + 172]> */
		/* 82079F68h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000000AC) );
		/* 82079F68h case   12:*/		return 0x82079F6C;
		  /* 82079F6Ch */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 82079F6Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x82079F78;  }
		/* 82079F6Ch case   13:*/		return 0x82079F70;
		  /* 82079F70h */ case   14:  		/* addi R4, R30, 36 */
		/* 82079F70h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x24);
		/* 82079F70h case   14:*/		return 0x82079F74;
		  /* 82079F74h */ case   15:  		/* b 16 */
		/* 82079F74h case   15:*/		return 0x82079F84;
		/* 82079F74h case   15:*/		return 0x82079F78;
	}
	return 0x82079F78;
} // Block from 82079F38h-82079F78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82079F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079F78);
		  /* 82079F78h */ case    0:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82079F78h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82079F78h case    0:*/		return 0x82079F7C;
		  /* 82079F7Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82079F7Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82079F90;  }
		/* 82079F7Ch case    1:*/		return 0x82079F80;
		  /* 82079F80h */ case    2:  		/* addi R4, R1, 1728 */
		/* 82079F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x6C0);
		/* 82079F80h case    2:*/		return 0x82079F84;
	}
	return 0x82079F84;
} // Block from 82079F78h-82079F84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82079F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079F84);
		  /* 82079F84h */ case    0:  		/* li R5, 1536 */
		/* 82079F84h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 82079F84h case    0:*/		return 0x82079F88;
		  /* 82079F88h */ case    1:  		/* addi R3, R1, 184 */
		/* 82079F88h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB8);
		/* 82079F88h case    1:*/		return 0x82079F8C;
		  /* 82079F8Ch */ case    2:  		/* bl 96804 */
		/* 82079F8Ch case    2:*/		regs.LR = 0x82079F90; return 0x820919B0;
		/* 82079F8Ch case    2:*/		return 0x82079F90;
	}
	return 0x82079F90;
} // Block from 82079F84h-82079F90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82079F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079F90);
		  /* 82079F90h */ case    0:  		/* cmplwi CR6, R22, 1560 */
		/* 82079F90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000618);
		/* 82079F90h case    0:*/		return 0x82079F94;
		  /* 82079F94h */ case    1:  		/* li R5, 1560 */
		/* 82079F94h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x618);
		/* 82079F94h case    1:*/		return 0x82079F98;
		  /* 82079F98h */ case    2:  		/* bc 12, CR6_GT, 8 */
		/* 82079F98h case    2:*/		if ( regs.CR[6].gt ) { return 0x82079FA0;  }
		/* 82079F98h case    2:*/		return 0x82079F9C;
		  /* 82079F9Ch */ case    3:  		/* mr R5, R22 */
		/* 82079F9Ch case    3:*/		regs.R5 = regs.R22;
		/* 82079F9Ch case    3:*/		return 0x82079FA0;
	}
	return 0x82079FA0;
} // Block from 82079F90h-82079FA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82079FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FA0);
		  /* 82079FA0h */ case    0:  		/* addi R4, R1, 160 */
		/* 82079FA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 82079FA0h case    0:*/		return 0x82079FA4;
		  /* 82079FA4h */ case    1:  		/* mr R3, R20 */
		/* 82079FA4h case    1:*/		regs.R3 = regs.R20;
		/* 82079FA4h case    1:*/		return 0x82079FA8;
		  /* 82079FA8h */ case    2:  		/* bl 96776 */
		/* 82079FA8h case    2:*/		regs.LR = 0x82079FAC; return 0x820919B0;
		/* 82079FA8h case    2:*/		return 0x82079FAC;
		  /* 82079FACh */ case    3:  		/* b 16 */
		/* 82079FACh case    3:*/		return 0x82079FBC;
		/* 82079FACh case    3:*/		return 0x82079FB0;
	}
	return 0x82079FB0;
} // Block from 82079FA0h-82079FB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82079FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FB0);
		  /* 82079FB0h */ case    0:  		/* li R21, 7 */
		/* 82079FB0h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x7);
		/* 82079FB0h case    0:*/		return 0x82079FB4;
		  /* 82079FB4h */ case    1:  		/* b 8 */
		/* 82079FB4h case    1:*/		return 0x82079FBC;
		/* 82079FB4h case    1:*/		return 0x82079FB8;
	}
	return 0x82079FB8;
} // Block from 82079FB0h-82079FB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82079FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FB8);
		  /* 82079FB8h */ case    0:  		/* li R21, 6 */
		/* 82079FB8h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x6);
		/* 82079FB8h case    0:*/		return 0x82079FBC;
	}
	return 0x82079FBC;
} // Block from 82079FB8h-82079FBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82079FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FBC);
		  /* 82079FBCh */ case    0:  		/* li R5, 0 */
		/* 82079FBCh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82079FBCh case    0:*/		return 0x82079FC0;
		  /* 82079FC0h */ case    1:  		/* addi R4, R30, 1572 */
		/* 82079FC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x624);
		/* 82079FC0h case    1:*/		return 0x82079FC4;
		  /* 82079FC4h */ case    2:  		/* mr R3, R30 */
		/* 82079FC4h case    2:*/		regs.R3 = regs.R30;
		/* 82079FC4h case    2:*/		return 0x82079FC8;
		  /* 82079FC8h */ case    3:  		/* bl 45568 */
		/* 82079FC8h case    3:*/		regs.LR = 0x82079FCC; return 0x820851C8;
		/* 82079FC8h case    3:*/		return 0x82079FCC;
	}
	return 0x82079FCC;
} // Block from 82079FBCh-82079FCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82079FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FCC);
		  /* 82079FCCh */ case    0:  		/* lwz R11, <#[R31 + 23756]> */
		/* 82079FCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005CCC) );
		/* 82079FCCh case    0:*/		return 0x82079FD0;
		  /* 82079FD0h */ case    1:  		/* mr R3, R21 */
		/* 82079FD0h case    1:*/		regs.R3 = regs.R21;
		/* 82079FD0h case    1:*/		return 0x82079FD4;
		  /* 82079FD4h */ case    2:  		/* addi R11, R11, -1 */
		/* 82079FD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82079FD4h case    2:*/		return 0x82079FD8;
		  /* 82079FD8h */ case    3:  		/* stw R11, <#[R31 + 23756]> */
		/* 82079FD8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005CCC) );
		/* 82079FD8h case    3:*/		return 0x82079FDC;
		  /* 82079FDCh */ case    4:  		/* addi R1, R1, 3376 */
		/* 82079FDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD30);
		/* 82079FDCh case    4:*/		return 0x82079FE0;
		  /* 82079FE0h */ case    5:  		/* b 94888 */
		/* 82079FE0h case    5:*/		return 0x82091288;
		/* 82079FE0h case    5:*/		return 0x82079FE4;
		  /* 82079FE4h */ case    6:  		/* nop */
		/* 82079FE4h case    6:*/		cpu::op::nop();
		/* 82079FE4h case    6:*/		return 0x82079FE8;
	}
	return 0x82079FE8;
} // Block from 82079FCCh-82079FE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82079FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FE8);
		  /* 82079FE8h */ case    0:  		/* mfspr R12, LR */
		/* 82079FE8h case    0:*/		regs.R12 = regs.LR;
		/* 82079FE8h case    0:*/		return 0x82079FEC;
		  /* 82079FECh */ case    1:  		/* bl 94780 */
		/* 82079FECh case    1:*/		regs.LR = 0x82079FF0; return 0x82091228;
		/* 82079FECh case    1:*/		return 0x82079FF0;
		  /* 82079FF0h */ case    2:  		/* stfd FR29, <#[R1 - 160]> */
		/* 82079FF0h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82079FF0h case    2:*/		return 0x82079FF4;
		  /* 82079FF4h */ case    3:  		/* stfd FR30, <#[R1 - 152]> */
		/* 82079FF4h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 82079FF4h case    3:*/		return 0x82079FF8;
	}
	return 0x82079FF8;
} // Block from 82079FE8h-82079FF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82079FF8h
// Function '?AllocateEdramMemory@D3D@@YAHKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82079FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82079FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82079FF8);
		  /* 82079FF8h */ case    0:  		/* stfd FR31, <#[R1 - 144]> */
		/* 82079FF8h case    0:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 82079FF8h case    0:*/		return 0x82079FFC;
		  /* 82079FFCh */ case    1:  		/* stwu R1, <#[R1 - 1312]> */
		/* 82079FFCh case    1:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFAE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFAE0);
		/* 82079FFCh case    1:*/		return 0x8207A000;
		  /* 8207A000h */ case    2:  		/* mr R23, R3 */
		/* 8207A000h case    2:*/		regs.R23 = regs.R3;
		/* 8207A000h case    2:*/		return 0x8207A004;
		  /* 8207A004h */ case    3:  		/* mr R31, R4 */
		/* 8207A004h case    3:*/		regs.R31 = regs.R4;
		/* 8207A004h case    3:*/		return 0x8207A008;
		  /* 8207A008h */ case    4:  		/* mr R16, R5 */
		/* 8207A008h case    4:*/		regs.R16 = regs.R5;
		/* 8207A008h case    4:*/		return 0x8207A00C;
		  /* 8207A00Ch */ case    5:  		/* li R18, 0 */
		/* 8207A00Ch case    5:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8207A00Ch case    5:*/		return 0x8207A010;
		  /* 8207A010h */ case    6:  		/* li R5, 24 */
		/* 8207A010h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8207A010h case    6:*/		return 0x8207A014;
		  /* 8207A014h */ case    7:  		/* li R4, 0 */
		/* 8207A014h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207A014h case    7:*/		return 0x8207A018;
		  /* 8207A018h */ case    8:  		/* stw R18, <#[R1 + 160]> */
		/* 8207A018h case    8:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000A0) );
		/* 8207A018h case    8:*/		return 0x8207A01C;
		  /* 8207A01Ch */ case    9:  		/* addi R3, R1, 164 */
		/* 8207A01Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA4);
		/* 8207A01Ch case    9:*/		return 0x8207A020;
		  /* 8207A020h */ case   10:  		/* mr R30, R6 */
		/* 8207A020h case   10:*/		regs.R30 = regs.R6;
		/* 8207A020h case   10:*/		return 0x8207A024;
		  /* 8207A024h */ case   11:  		/* mr R29, R7 */
		/* 8207A024h case   11:*/		regs.R29 = regs.R7;
		/* 8207A024h case   11:*/		return 0x8207A028;
		  /* 8207A028h */ case   12:  		/* mr R28, R8 */
		/* 8207A028h case   12:*/		regs.R28 = regs.R8;
		/* 8207A028h case   12:*/		return 0x8207A02C;
		  /* 8207A02Ch */ case   13:  		/* mr R17, R9 */
		/* 8207A02Ch case   13:*/		regs.R17 = regs.R9;
		/* 8207A02Ch case   13:*/		return 0x8207A030;
		  /* 8207A030h */ case   14:  		/* bl 94992 */
		/* 8207A030h case   14:*/		regs.LR = 0x8207A034; return 0x82091340;
		/* 8207A030h case   14:*/		return 0x8207A034;
		  /* 8207A034h */ case   15:  		/* li R11, 6 */
		/* 8207A034h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8207A034h case   15:*/		return 0x8207A038;
		  /* 8207A038h */ case   16:  		/* addi R10, R1, 216 */
		/* 8207A038h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD8);
		/* 8207A038h case   16:*/		return 0x8207A03C;
		  /* 8207A03Ch */ case   17:  		/* mr R9, R18 */
		/* 8207A03Ch case   17:*/		regs.R9 = regs.R18;
		/* 8207A03Ch case   17:*/		return 0x8207A040;
		  /* 8207A040h */ case   18:  		/* mtspr CTR, R11 */
		/* 8207A040h case   18:*/		regs.CTR = regs.R11;
		/* 8207A040h case   18:*/		return 0x8207A044;
		  /* 8207A044h */ case   19:  		/* stdu R9, <#[R10 + 8]> */
		/* 8207A044h case   19:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8207A044h case   19:*/		return 0x8207A048;
		  /* 8207A048h */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 8207A048h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207A044;  }
		/* 8207A048h case   20:*/		return 0x8207A04C;
		  /* 8207A04Ch */ case   21:  		/* stw R9, <#[R10 + 8]> */
		/* 8207A04Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8207A04Ch case   21:*/		return 0x8207A050;
		  /* 8207A050h */ case   22:  		/* addi R9, R1, 200 */
		/* 8207A050h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xC8);
		/* 8207A050h case   22:*/		return 0x8207A054;
		  /* 8207A054h */ case   23:  		/* addi R8, R1, 224 */
		/* 8207A054h case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 8207A054h case   23:*/		return 0x8207A058;
		  /* 8207A058h */ case   24:  		/* stw R18, <#[R1 + 100]> */
		/* 8207A058h case   24:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000064) );
		/* 8207A058h case   24:*/		return 0x8207A05C;
		  /* 8207A05Ch */ case   25:  		/* addi R11, R1, 204 */
		/* 8207A05Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xCC);
		/* 8207A05Ch case   25:*/		return 0x8207A060;
		  /* 8207A060h */ case   26:  		/* stw R9, <#[R1 + 116]> */
		/* 8207A060h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 8207A060h case   26:*/		return 0x8207A064;
		  /* 8207A064h */ case   27:  		/* stw R8, <#[R1 + 108]> */
		/* 8207A064h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207A064h case   27:*/		return 0x8207A068;
		  /* 8207A068h */ case   28:  		/* li R10, 2 */
		/* 8207A068h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8207A068h case   28:*/		return 0x8207A06C;
		  /* 8207A06Ch */ case   29:  		/* mr R9, R16 */
		/* 8207A06Ch case   29:*/		regs.R9 = regs.R16;
		/* 8207A06Ch case   29:*/		return 0x8207A070;
		  /* 8207A070h */ case   30:  		/* stw R11, <#[R1 + 124]> */
		/* 8207A070h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207A070h case   30:*/		return 0x8207A074;
		  /* 8207A074h */ case   31:  		/* li R8, 0 */
		/* 8207A074h case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8207A074h case   31:*/		return 0x8207A078;
		  /* 8207A078h */ case   32:  		/* stw R18, <#[R1 + 92]> */
		/* 8207A078h case   32:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207A078h case   32:*/		return 0x8207A07C;
		  /* 8207A07Ch */ case   33:  		/* li R7, 1 */
		/* 8207A07Ch case   33:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8207A07Ch case   33:*/		return 0x8207A080;
		  /* 8207A080h */ case   34:  		/* stw R18, <#[R1 + 84]> */
		/* 8207A080h case   34:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000054) );
		/* 8207A080h case   34:*/		return 0x8207A084;
		  /* 8207A084h */ case   35:  		/* li R6, 1 */
		/* 8207A084h case   35:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8207A084h case   35:*/		return 0x8207A088;
		  /* 8207A088h */ case   36:  		/* mr R5, R29 */
		/* 8207A088h case   36:*/		regs.R5 = regs.R29;
		/* 8207A088h case   36:*/		return 0x8207A08C;
		  /* 8207A08Ch */ case   37:  		/* mr R4, R30 */
		/* 8207A08Ch case   37:*/		regs.R4 = regs.R30;
		/* 8207A08Ch case   37:*/		return 0x8207A090;
		  /* 8207A090h */ case   38:  		/* li R3, 3 */
		/* 8207A090h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8207A090h case   38:*/		return 0x8207A094;
		  /* 8207A094h */ case   39:  		/* bl -80124 */
		/* 8207A094h case   39:*/		regs.LR = 0x8207A098; return 0x82066798;
		/* 8207A094h case   39:*/		return 0x8207A098;
		  /* 8207A098h */ case   40:  		/* lis R9, 8192 */
		/* 8207A098h case   40:*/		cpu::op::lis<0>(regs,&regs.R9,0x2000);
		/* 8207A098h case   40:*/		return 0x8207A09C;
		  /* 8207A09Ch */ case   41:  		/* lwz R8, <#[R1 + 264]> */
		/* 8207A09Ch case   41:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000108) );
		/* 8207A09Ch case   41:*/		return 0x8207A0A0;
		  /* 8207A0A0h */ case   42:  		/* li R11, 9 */
		/* 8207A0A0h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8207A0A0h case   42:*/		return 0x8207A0A4;
		  /* 8207A0A4h */ case   43:  		/* cmplw CR6, R31, R9 */
		/* 8207A0A4h case   43:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 8207A0A4h case   43:*/		return 0x8207A0A8;
		  /* 8207A0A8h */ case   44:  		/* li R10, 1 */
		/* 8207A0A8h case   44:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207A0A8h case   44:*/		return 0x8207A0AC;
		  /* 8207A0ACh */ case   45:  		/* rlwimi R8, R10, 21, 9, 10 */
		/* 8207A0ACh case   45:*/		cpu::op::rlwimi<0,21,9,10>(regs,&regs.R8,regs.R10);
		/* 8207A0ACh case   45:*/		return 0x8207A0B0;
		  /* 8207A0B0h */ case   46:  		/* lwz R9, <#[R1 + 252]> */
		/* 8207A0B0h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000FC) );
		/* 8207A0B0h case   46:*/		return 0x8207A0B4;
		  /* 8207A0B4h */ case   47:  		/* stw R8, <#[R1 + 264]> */
		/* 8207A0B4h case   47:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000108) );
		/* 8207A0B4h case   47:*/		return 0x8207A0B8;
		  /* 8207A0B8h */ case   48:  		/* rlwimi R9, R11, 11, 16, 21 */
		/* 8207A0B8h case   48:*/		cpu::op::rlwimi<0,11,16,21>(regs,&regs.R9,regs.R11);
		/* 8207A0B8h case   48:*/		return 0x8207A0BC;
		  /* 8207A0BCh */ case   49:  		/* addis R11, R31, -16384 */
		/* 8207A0BCh case   49:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R31,0xFFFFC000);
		/* 8207A0BCh case   49:*/		return 0x8207A0C0;
		  /* 8207A0C0h */ case   50:  		/* stw R9, <#[R1 + 252]> */
		/* 8207A0C0h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000FC) );
		/* 8207A0C0h case   50:*/		return 0x8207A0C4;
		  /* 8207A0C4h */ case   51:  		/* bc 12, CR6_LT, 8 */
		/* 8207A0C4h case   51:*/		if ( regs.CR[6].lt ) { return 0x8207A0CC;  }
		/* 8207A0C4h case   51:*/		return 0x8207A0C8;
		  /* 8207A0C8h */ case   52:  		/* addis R11, R31, -16640 */
		/* 8207A0C8h case   52:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R31,0xFFFFBF00);
		/* 8207A0C8h case   52:*/		return 0x8207A0CC;
	}
	return 0x8207A0CC;
} // Block from 82079FF8h-8207A0CCh (53 instructions)

//////////////////////////////////////////////////////
// Block at 8207A0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A0CC);
		  /* 8207A0CCh */ case    0:  		/* lwz R10, <#[R1 + 256]> */
		/* 8207A0CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000100) );
		/* 8207A0CCh case    0:*/		return 0x8207A0D0;
		  /* 8207A0D0h */ case    1:  		/* rlwimi R11, R10, 0, 20, 31 */
		/* 8207A0D0h case    1:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R10);
		/* 8207A0D0h case    1:*/		return 0x8207A0D4;
		  /* 8207A0D4h */ case    2:  		/* rlwinm R10, R11, 0, 26, 31 */
		/* 8207A0D4h case    2:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R10,regs.R11);
		/* 8207A0D4h case    2:*/		return 0x8207A0D8;
		  /* 8207A0D8h */ case    3:  		/* stw R11, <#[R1 + 256]> */
		/* 8207A0D8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 8207A0D8h case    3:*/		return 0x8207A0DC;
		  /* 8207A0DCh */ case    4:  		/* cmplwi CR6, R10, 7 */
		/* 8207A0DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 8207A0DCh case    4:*/		return 0x8207A0E0;
		  /* 8207A0E0h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8207A0E0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207A0F0;  }
		/* 8207A0E0h case    5:*/		return 0x8207A0E4;
		  /* 8207A0E4h */ case    6:  		/* li R10, 27 */
		/* 8207A0E4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1B);
		/* 8207A0E4h case    6:*/		return 0x8207A0E8;
		  /* 8207A0E8h */ case    7:  		/* rlwimi R11, R10, 1, 26, 31 */
		/* 8207A0E8h case    7:*/		cpu::op::rlwimi<0,1,26,31>(regs,&regs.R11,regs.R10);
		/* 8207A0E8h case    7:*/		return 0x8207A0EC;
		  /* 8207A0ECh */ case    8:  		/* stw R11, <#[R1 + 256]> */
		/* 8207A0ECh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 8207A0ECh case    8:*/		return 0x8207A0F0;
	}
	return 0x8207A0F0;
} // Block from 8207A0CCh-8207A0F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207A0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A0F0);
		  /* 8207A0F0h */ case    0:  		/* addi R3, R1, 288 */
		/* 8207A0F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 8207A0F0h case    0:*/		return 0x8207A0F4;
		  /* 8207A0F4h */ case    1:  		/* li R5, 56 */
		/* 8207A0F4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 8207A0F4h case    1:*/		return 0x8207A0F8;
		  /* 8207A0F8h */ case    2:  		/* mr R4, R28 */
		/* 8207A0F8h case    2:*/		regs.R4 = regs.R28;
		/* 8207A0F8h case    2:*/		return 0x8207A0FC;
		  /* 8207A0FCh */ case    3:  		/* bl 96436 */
		/* 8207A0FCh case    3:*/		regs.LR = 0x8207A100; return 0x820919B0;
		/* 8207A0FCh case    3:*/		return 0x8207A100;
		  /* 8207A100h */ case    4:  		/* lwz R19, <#[R1 + 304]> */
		/* 8207A100h case    4:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000130) );
		/* 8207A100h case    4:*/		return 0x8207A104;
		  /* 8207A104h */ case    5:  		/* cmplwi CR6, R19, 0 */
		/* 8207A104h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 8207A104h case    5:*/		return 0x8207A108;
		  /* 8207A108h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8207A108h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8207A110;  }
		/* 8207A108h case    6:*/		return 0x8207A10C;
		  /* 8207A10Ch */ case    7:  		/* lwz R19, <#[R23 + 22112]> */
		/* 8207A10Ch case    7:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R23 + 0x00005660) );
		/* 8207A10Ch case    7:*/		return 0x8207A110;
	}
	return 0x8207A110;
} // Block from 8207A0F0h-8207A110h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207A110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A110);
		  /* 8207A110h */ case    0:  		/* lwz R20, <#[R1 + 308]> */
		/* 8207A110h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000134) );
		/* 8207A110h case    0:*/		return 0x8207A114;
		  /* 8207A114h */ case    1:  		/* cmplwi CR6, R20, 0 */
		/* 8207A114h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8207A114h case    1:*/		return 0x8207A118;
		  /* 8207A118h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8207A118h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207A120;  }
		/* 8207A118h case    2:*/		return 0x8207A11C;
		  /* 8207A11Ch */ case    3:  		/* lwz R20, <#[R23 + 22116]> */
		/* 8207A11Ch case    3:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R23 + 0x00005664) );
		/* 8207A11Ch case    3:*/		return 0x8207A120;
	}
	return 0x8207A120;
} // Block from 8207A110h-8207A120h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207A120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A120);
		  /* 8207A120h */ case    0:  		/* lwz R24, <#[R1 + 296]> */
		/* 8207A120h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000128) );
		/* 8207A120h case    0:*/		return 0x8207A124;
		  /* 8207A124h */ case    1:  		/* lwz R25, <#[R1 + 288]> */
		/* 8207A124h case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000120) );
		/* 8207A124h case    1:*/		return 0x8207A128;
		  /* 8207A128h */ case    2:  		/* cmpw CR6, R24, R25 */
		/* 8207A128h case    2:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R25);
		/* 8207A128h case    2:*/		return 0x8207A12C;
		  /* 8207A12Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207A12Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207A138;  }
		/* 8207A12Ch case    3:*/		return 0x8207A130;
		  /* 8207A130h */ case    4:  		/* mr R25, R18 */
		/* 8207A130h case    4:*/		regs.R25 = regs.R18;
		/* 8207A130h case    4:*/		return 0x8207A134;
		  /* 8207A134h */ case    5:  		/* mr R24, R30 */
		/* 8207A134h case    5:*/		regs.R24 = regs.R30;
		/* 8207A134h case    5:*/		return 0x8207A138;
	}
	return 0x8207A138;
} // Block from 8207A120h-8207A138h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207A138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A138);
		  /* 8207A138h */ case    0:  		/* lwz R26, <#[R1 + 300]> */
		/* 8207A138h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x0000012C) );
		/* 8207A138h case    0:*/		return 0x8207A13C;
		  /* 8207A13Ch */ case    1:  		/* lwz R27, <#[R1 + 292]> */
		/* 8207A13Ch case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000124) );
		/* 8207A13Ch case    1:*/		return 0x8207A140;
		  /* 8207A140h */ case    2:  		/* cmpw CR6, R26, R27 */
		/* 8207A140h case    2:*/		cpu::op::cmpw<6>(regs,regs.R26,regs.R27);
		/* 8207A140h case    2:*/		return 0x8207A144;
		  /* 8207A144h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207A144h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207A150;  }
		/* 8207A144h case    3:*/		return 0x8207A148;
		  /* 8207A148h */ case    4:  		/* mr R27, R18 */
		/* 8207A148h case    4:*/		regs.R27 = regs.R18;
		/* 8207A148h case    4:*/		return 0x8207A14C;
		  /* 8207A14Ch */ case    5:  		/* mr R26, R29 */
		/* 8207A14Ch case    5:*/		regs.R26 = regs.R29;
		/* 8207A14Ch case    5:*/		return 0x8207A150;
	}
	return 0x8207A150;
} // Block from 8207A138h-8207A150h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207A150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A150);
		  /* 8207A150h */ case    0:  		/* lwz R11, <#[R23 + 22112]> */
		/* 8207A150h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00005660) );
		/* 8207A150h case    0:*/		return 0x8207A154;
		  /* 8207A154h */ case    1:  		/* rldicl R10, R20, 0, 32 */
		/* 8207A154h case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R20);
		/* 8207A154h case    1:*/		return 0x8207A158;
		  /* 8207A158h */ case    2:  		/* lwz R9, <#[R23 + 22116]> */
		/* 8207A158h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00005664) );
		/* 8207A158h case    2:*/		return 0x8207A15C;
		  /* 8207A15Ch */ case    3:  		/* rldicl R8, R19, 0, 32 */
		/* 8207A15Ch case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R19);
		/* 8207A15Ch case    3:*/		return 0x8207A160;
		  /* 8207A160h */ case    4:  		/* std R10, <#[R1 + 128]> */
		/* 8207A160h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A160h case    4:*/		return 0x8207A164;
		  /* 8207A164h */ case    5:  		/* lfd FR0, <#[R1 + 128]> */
		/* 8207A164h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A164h case    5:*/		return 0x8207A168;
		  /* 8207A168h */ case    6:  		/* fcfid FR9, FR0 */
		/* 8207A168h case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR0);
		/* 8207A168h case    6:*/		return 0x8207A16C;
		  /* 8207A16Ch */ case    7:  		/* mr R10, R9 */
		/* 8207A16Ch case    7:*/		regs.R10 = regs.R9;
		/* 8207A16Ch case    7:*/		return 0x8207A170;
		  /* 8207A170h */ case    8:  		/* std R11, <#[R1 + 128]> */
		/* 8207A170h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A170h case    8:*/		return 0x8207A174;
		  /* 8207A174h */ case    9:  		/* lfd FR13, <#[R1 + 128]> */
		/* 8207A174h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A174h case    9:*/		return 0x8207A178;
		  /* 8207A178h */ case   10:  		/* std R8, <#[R1 + 128]> */
		/* 8207A178h case   10:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A178h case   10:*/		return 0x8207A17C;
		  /* 8207A17Ch */ case   11:  		/* lfd FR12, <#[R1 + 128]> */
		/* 8207A17Ch case   11:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A17Ch case   11:*/		return 0x8207A180;
		  /* 8207A180h */ case   12:  		/* std R9, <#[R1 + 128]> */
		/* 8207A180h case   12:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A180h case   12:*/		return 0x8207A184;
		  /* 8207A184h */ case   13:  		/* fcfid FR13, FR13 */
		/* 8207A184h case   13:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A184h case   13:*/		return 0x8207A188;
		  /* 8207A188h */ case   14:  		/* fcfid FR12, FR12 */
		/* 8207A188h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207A188h case   14:*/		return 0x8207A18C;
		  /* 8207A18Ch */ case   15:  		/* lfd FR11, <#[R1 + 128]> */
		/* 8207A18Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A18Ch case   15:*/		return 0x8207A190;
		  /* 8207A190h */ case   16:  		/* frsp FR13, FR13 */
		/* 8207A190h case   16:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A190h case   16:*/		return 0x8207A194;
		  /* 8207A194h */ case   17:  		/* lis R11, -32256 */
		/* 8207A194h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207A194h case   17:*/		return 0x8207A198;
		  /* 8207A198h */ case   18:  		/* fcfid FR11, FR11 */
		/* 8207A198h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 8207A198h case   18:*/		return 0x8207A19C;
		  /* 8207A19Ch */ case   19:  		/* lis R10, -32256 */
		/* 8207A19Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207A19Ch case   19:*/		return 0x8207A1A0;
		  /* 8207A1A0h */ case   20:  		/* frsp FR9, FR9 */
		/* 8207A1A0h case   20:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR9);
		/* 8207A1A0h case   20:*/		return 0x8207A1A4;
		  /* 8207A1A4h */ case   21:  		/* lfs FR0, <#[R10 + 1792]> */
		/* 8207A1A4h case   21:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000700) );
		/* 8207A1A4h case   21:*/		return 0x8207A1A8;
		  /* 8207A1A8h */ case   22:  		/* frsp FR10, FR12 */
		/* 8207A1A8h case   22:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR12);
		/* 8207A1A8h case   22:*/		return 0x8207A1AC;
		  /* 8207A1ACh */ case   23:  		/* lfs FR12, <#[R11 + 8540]> */
		/* 8207A1ACh case   23:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + 0x0000215C) );
		/* 8207A1ACh case   23:*/		return 0x8207A1B0;
		  /* 8207A1B0h */ case   24:  		/* frsp FR11, FR11 */
		/* 8207A1B0h case   24:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 8207A1B0h case   24:*/		return 0x8207A1B4;
		  /* 8207A1B4h */ case   25:  		/* fdivs FR13, FR10, FR13 */
		/* 8207A1B4h case   25:*/		cpu::op::fdivs<0>(regs,&regs.FR13,regs.FR10,regs.FR13);
		/* 8207A1B4h case   25:*/		return 0x8207A1B8;
		  /* 8207A1B8h */ case   26:  		/* fdivs FR11, FR9, FR11 */
		/* 8207A1B8h case   26:*/		cpu::op::fdivs<0>(regs,&regs.FR11,regs.FR9,regs.FR11);
		/* 8207A1B8h case   26:*/		return 0x8207A1BC;
		  /* 8207A1BCh */ case   27:  		/* fsubs FR13, FR12, FR13 */
		/* 8207A1BCh case   27:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR12,regs.FR13);
		/* 8207A1BCh case   27:*/		return 0x8207A1C0;
		  /* 8207A1C0h */ case   28:  		/* fcmpu CR6, FR13, FR0 */
		/* 8207A1C0h case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8207A1C0h case   28:*/		return 0x8207A1C4;
		  /* 8207A1C4h */ case   29:  		/* bc 4, CR6_LT, 12 */
		/* 8207A1C4h case   29:*/		if ( !regs.CR[6].lt ) { return 0x8207A1D0;  }
		/* 8207A1C4h case   29:*/		return 0x8207A1C8;
		  /* 8207A1C8h */ case   30:  		/* fmr FR10, FR13 */
		/* 8207A1C8h case   30:*/		cpu::op::fmr<0>(regs,&regs.FR10,regs.FR13);
		/* 8207A1C8h case   30:*/		return 0x8207A1CC;
		  /* 8207A1CCh */ case   31:  		/* b 8 */
		/* 8207A1CCh case   31:*/		return 0x8207A1D4;
		/* 8207A1CCh case   31:*/		return 0x8207A1D0;
	}
	return 0x8207A1D0;
} // Block from 8207A150h-8207A1D0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8207A1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A1D0);
		  /* 8207A1D0h */ case    0:  		/* fmr FR10, FR0 */
		/* 8207A1D0h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR10,regs.FR0);
		/* 8207A1D0h case    0:*/		return 0x8207A1D4;
	}
	return 0x8207A1D4;
} // Block from 8207A1D0h-8207A1D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A1D4);
		  /* 8207A1D4h */ case    0:  		/* fsubs FR13, FR12, FR11 */
		/* 8207A1D4h case    0:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR12,regs.FR11);
		/* 8207A1D4h case    0:*/		return 0x8207A1D8;
		  /* 8207A1D8h */ case    1:  		/* fcmpu CR6, FR13, FR0 */
		/* 8207A1D8h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8207A1D8h case    1:*/		return 0x8207A1DC;
		  /* 8207A1DCh */ case    2:  		/* bc 4, CR6_LT, 12 */
		/* 8207A1DCh case    2:*/		if ( !regs.CR[6].lt ) { return 0x8207A1E8;  }
		/* 8207A1DCh case    2:*/		return 0x8207A1E0;
		  /* 8207A1E0h */ case    3:  		/* fmr FR31, FR13 */
		/* 8207A1E0h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR13);
		/* 8207A1E0h case    3:*/		return 0x8207A1E4;
		  /* 8207A1E4h */ case    4:  		/* b 8 */
		/* 8207A1E4h case    4:*/		return 0x8207A1EC;
		/* 8207A1E4h case    4:*/		return 0x8207A1E8;
	}
	return 0x8207A1E8;
} // Block from 8207A1D4h-8207A1E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207A1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A1E8);
		  /* 8207A1E8h */ case    0:  		/* fmr FR31, FR0 */
		/* 8207A1E8h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR0);
		/* 8207A1E8h case    0:*/		return 0x8207A1EC;
	}
	return 0x8207A1EC;
} // Block from 8207A1E8h-8207A1ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A1EC);
		  /* 8207A1ECh */ case    0:  		/* subf R31, R25, R24 */
		/* 8207A1ECh case    0:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R25,regs.R24);
		/* 8207A1ECh case    0:*/		return 0x8207A1F0;
		  /* 8207A1F0h */ case    1:  		/* subf R28, R27, R26 */
		/* 8207A1F0h case    1:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R27,regs.R26);
		/* 8207A1F0h case    1:*/		return 0x8207A1F4;
		  /* 8207A1F4h */ case    2:  		/* extsw R11, R31 */
		/* 8207A1F4h case    2:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R31);
		/* 8207A1F4h case    2:*/		return 0x8207A1F8;
	}
	return 0x8207A1F8;
} // Block from 8207A1ECh-8207A1F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207A1F8h
// Function '?FlushCachedMemory@D3D@@YAXPAX0H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A1F8);
		  /* 8207A1F8h */ case    0:  		/* std R11, <#[R1 + 128]> */
		/* 8207A1F8h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A1F8h case    0:*/		return 0x8207A1FC;
		  /* 8207A1FCh */ case    1:  		/* lfd FR0, <#[R1 + 128]> */
		/* 8207A1FCh case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A1FCh case    1:*/		return 0x8207A200;
		  /* 8207A200h */ case    2:  		/* fcfid FR0, FR0 */
		/* 8207A200h case    2:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A200h case    2:*/		return 0x8207A204;
		  /* 8207A204h */ case    3:  		/* frsp FR0, FR0 */
		/* 8207A204h case    3:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A204h case    3:*/		return 0x8207A208;
		  /* 8207A208h */ case    4:  		/* fmuls FR1, FR0, FR10 */
		/* 8207A208h case    4:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR10);
		/* 8207A208h case    4:*/		return 0x8207A20C;
		  /* 8207A20Ch */ case    5:  		/* bl 100636 */
		/* 8207A20Ch case    5:*/		regs.LR = 0x8207A210; return 0x82092B28;
		/* 8207A20Ch case    5:*/		return 0x8207A210;
		  /* 8207A210h */ case    6:  		/* extsw R11, R28 */
		/* 8207A210h case    6:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R28);
		/* 8207A210h case    6:*/		return 0x8207A214;
		  /* 8207A214h */ case    7:  		/* frsp FR0, FR1 */
		/* 8207A214h case    7:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 8207A214h case    7:*/		return 0x8207A218;
		  /* 8207A218h */ case    8:  		/* std R11, <#[R1 + 128]> */
		/* 8207A218h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A218h case    8:*/		return 0x8207A21C;
		  /* 8207A21Ch */ case    9:  		/* fctiwz FR0, FR0 */
		/* 8207A21Ch case    9:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A21Ch case    9:*/		return 0x8207A220;
		  /* 8207A220h */ case   10:  		/* lfd FR13, <#[R1 + 128]> */
		/* 8207A220h case   10:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A220h case   10:*/		return 0x8207A224;
		  /* 8207A224h */ case   11:  		/* fcfid FR13, FR13 */
		/* 8207A224h case   11:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A224h case   11:*/		return 0x8207A228;
		  /* 8207A228h */ case   12:  		/* stfd FR0, <#[R1 + 128]> */
		/* 8207A228h case   12:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A228h case   12:*/		return 0x8207A22C;
		  /* 8207A22Ch */ case   13:  		/* frsp FR13, FR13 */
		/* 8207A22Ch case   13:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A22Ch case   13:*/		return 0x8207A230;
		  /* 8207A230h */ case   14:  		/* lwz R30, <#[R1 + 132]> */
		/* 8207A230h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000084) );
		/* 8207A230h case   14:*/		return 0x8207A234;
		  /* 8207A234h */ case   15:  		/* fmuls FR1, FR13, FR31 */
		/* 8207A234h case   15:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR13,regs.FR31);
		/* 8207A234h case   15:*/		return 0x8207A238;
		  /* 8207A238h */ case   16:  		/* bl 100592 */
		/* 8207A238h case   16:*/		regs.LR = 0x8207A23C; return 0x82092B28;
		/* 8207A238h case   16:*/		return 0x8207A23C;
		  /* 8207A23Ch */ case   17:  		/* frsp FR0, FR1 */
		/* 8207A23Ch case   17:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 8207A23Ch case   17:*/		return 0x8207A240;
		  /* 8207A240h */ case   18:  		/* lwz R11, <#[R23 + 21948]> */
		/* 8207A240h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x000055BC) );
		/* 8207A240h case   18:*/		return 0x8207A244;
		  /* 8207A244h */ case   19:  		/* subfic R10, R11, 0 */
		/* 8207A244h case   19:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R11,0x0);
		/* 8207A244h case   19:*/		return 0x8207A248;
		  /* 8207A248h */ case   20:  		/* subfe R10, R10, R10 */
		/* 8207A248h case   20:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8207A248h case   20:*/		return 0x8207A24C;
		  /* 8207A24Ch */ case   21:  		/* subfic R9, R11, 0 */
		/* 8207A24Ch case   21:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R11,0x0);
		/* 8207A24Ch case   21:*/		return 0x8207A250;
		  /* 8207A250h */ case   22:  		/* rlwinm R11, R10, 0, 28, 31 */
		/* 8207A250h case   22:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R10);
		/* 8207A250h case   22:*/		return 0x8207A254;
		  /* 8207A254h */ case   23:  		/* subfe R10, R9, R9 */
		/* 8207A254h case   23:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R9,regs.R9);
		/* 8207A254h case   23:*/		return 0x8207A258;
		  /* 8207A258h */ case   24:  		/* addi R11, R11, 35 */
		/* 8207A258h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x23);
		/* 8207A258h case   24:*/		return 0x8207A25C;
		  /* 8207A25Ch */ case   25:  		/* fctiwz FR0, FR0 */
		/* 8207A25Ch case   25:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A25Ch case   25:*/		return 0x8207A260;
		  /* 8207A260h */ case   26:  		/* stfd FR0, <#[R1 + 128]> */
		/* 8207A260h case   26:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A260h case   26:*/		return 0x8207A264;
		  /* 8207A264h */ case   27:  		/* andi. R9, R10, 9 */
		/* 8207A264h case   27:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R10,0x9);
		/* 8207A264h case   27:*/		return 0x8207A268;
		  /* 8207A268h */ case   28:  		/* add R10, R11, R30 */
		/* 8207A268h case   28:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8207A268h case   28:*/		return 0x8207A26C;
		  /* 8207A26Ch */ case   29:  		/* addi R8, R9, 19 */
		/* 8207A26Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x13);
		/* 8207A26Ch case   29:*/		return 0x8207A270;
		  /* 8207A270h */ case   30:  		/* addi R9, R10, -1 */
		/* 8207A270h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 8207A270h case   30:*/		return 0x8207A274;
		  /* 8207A274h */ case   31:  		/* twi 6, R11, 0 */
		/* 8207A274h case   31:*/		cpu::op::tw<6>(regs, 0x8207A274, regs.R11, 0x00000000);
		/* 8207A274h case   31:*/		return 0x8207A278;
		  /* 8207A278h */ case   32:  		/* lwz R7, <#[R1 + 132]> */
		/* 8207A278h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000084) );
		/* 8207A278h case   32:*/		return 0x8207A27C;
		  /* 8207A27Ch */ case   33:  		/* divw R10, R9, R11 */
		/* 8207A27Ch case   33:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 8207A27Ch case   33:*/		return 0x8207A280;
		  /* 8207A280h */ case   34:  		/* rlwinm R9, R9, 1, 0, 31 */
		/* 8207A280h case   34:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R9,regs.R9);
		/* 8207A280h case   34:*/		return 0x8207A284;
		  /* 8207A284h */ case   35:  		/* addi R10, R10, 3 */
		/* 8207A284h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8207A284h case   35:*/		return 0x8207A288;
		  /* 8207A288h */ case   36:  		/* addi R9, R9, -1 */
		/* 8207A288h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207A288h case   36:*/		return 0x8207A28C;
		  /* 8207A28Ch */ case   37:  		/* rlwinm R10, R10, 0, 0, 29 */
		/* 8207A28Ch case   37:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R10);
		/* 8207A28Ch case   37:*/		return 0x8207A290;
		  /* 8207A290h */ case   38:  		/* andc R11, R11, R9 */
		/* 8207A290h case   38:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207A290h case   38:*/		return 0x8207A294;
		  /* 8207A294h */ case   39:  		/* cmpwi CR6, R10, 24 */
		/* 8207A294h case   39:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000018);
		/* 8207A294h case   39:*/		return 0x8207A298;
		  /* 8207A298h */ case   40:  		/* twi 5, R11, -1 */
		/* 8207A298h case   40:*/		cpu::op::tw<5>(regs, 0x8207A298, regs.R11, 0xFFFFFFFF);
		/* 8207A298h case   40:*/		return 0x8207A29C;
		  /* 8207A29Ch */ case   41:  		/* bc 12, CR6_GT, 8 */
		/* 8207A29Ch case   41:*/		if ( regs.CR[6].gt ) { return 0x8207A2A4;  }
		/* 8207A29Ch case   41:*/		return 0x8207A2A0;
	}
	return 0x8207A2A0;
} // Block from 8207A1F8h-8207A2A0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8207A2A0h
// Function '?D3DDevice_InsertYieldPoint@@YAJPAUD3DDevice@@KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A2A0);
		  /* 8207A2A0h */ case    0:  		/* li R10, 24 */
		/* 8207A2A0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x18);
		/* 8207A2A0h case    0:*/		return 0x8207A2A4;
	}
	return 0x8207A2A4;
} // Block from 8207A2A0h-8207A2A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A2A4);
		  /* 8207A2A4h */ case    0:  		/* add R11, R8, R7 */
		/* 8207A2A4h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R7);
		/* 8207A2A4h case    0:*/		return 0x8207A2A8;
		  /* 8207A2A8h */ case    1:  		/* twi 6, R8, 0 */
		/* 8207A2A8h case    1:*/		cpu::op::tw<6>(regs, 0x8207A2A8, regs.R8, 0x00000000);
		/* 8207A2A8h case    1:*/		return 0x8207A2AC;
		  /* 8207A2ACh */ case    2:  		/* addi R9, R11, -1 */
		/* 8207A2ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8207A2ACh case    2:*/		return 0x8207A2B0;
		  /* 8207A2B0h */ case    3:  		/* divw R11, R9, R8 */
		/* 8207A2B0h case    3:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 8207A2B0h case    3:*/		return 0x8207A2B4;
		  /* 8207A2B4h */ case    4:  		/* rlwinm R9, R9, 1, 0, 31 */
		/* 8207A2B4h case    4:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R9,regs.R9);
		/* 8207A2B4h case    4:*/		return 0x8207A2B8;
		  /* 8207A2B8h */ case    5:  		/* addi R11, R11, 3 */
		/* 8207A2B8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8207A2B8h case    5:*/		return 0x8207A2BC;
		  /* 8207A2BCh */ case    6:  		/* addi R9, R9, -1 */
		/* 8207A2BCh case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207A2BCh case    6:*/		return 0x8207A2C0;
		  /* 8207A2C0h */ case    7:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 8207A2C0h case    7:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 8207A2C0h case    7:*/		return 0x8207A2C4;
		  /* 8207A2C4h */ case    8:  		/* andc R9, R8, R9 */
		/* 8207A2C4h case    8:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8207A2C4h case    8:*/		return 0x8207A2C8;
		  /* 8207A2C8h */ case    9:  		/* cmpwi CR6, R11, 24 */
		/* 8207A2C8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8207A2C8h case    9:*/		return 0x8207A2CC;
		  /* 8207A2CCh */ case   10:  		/* twi 5, R9, -1 */
		/* 8207A2CCh case   10:*/		cpu::op::tw<5>(regs, 0x8207A2CC, regs.R9, 0xFFFFFFFF);
		/* 8207A2CCh case   10:*/		return 0x8207A2D0;
		  /* 8207A2D0h */ case   11:  		/* bc 12, CR6_GT, 8 */
		/* 8207A2D0h case   11:*/		if ( regs.CR[6].gt ) { return 0x8207A2D8;  }
		/* 8207A2D0h case   11:*/		return 0x8207A2D4;
		  /* 8207A2D4h */ case   12:  		/* li R11, 24 */
		/* 8207A2D4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x18);
		/* 8207A2D4h case   12:*/		return 0x8207A2D8;
	}
	return 0x8207A2D8;
} // Block from 8207A2A4h-8207A2D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207A2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A2D8);
		  /* 8207A2D8h */ case    0:  		/* add R8, R11, R7 */
		/* 8207A2D8h case    0:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R7);
		/* 8207A2D8h case    0:*/		return 0x8207A2DC;
		  /* 8207A2DCh */ case    1:  		/* add R9, R10, R30 */
		/* 8207A2DCh case    1:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R30);
		/* 8207A2DCh case    1:*/		return 0x8207A2E0;
		  /* 8207A2E0h */ case    2:  		/* addi R6, R8, -1 */
		/* 8207A2E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0xFFFFFFFF);
		/* 8207A2E0h case    2:*/		return 0x8207A2E4;
		  /* 8207A2E4h */ case    3:  		/* addi R7, R9, -1 */
		/* 8207A2E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0xFFFFFFFF);
		/* 8207A2E4h case    3:*/		return 0x8207A2E8;
		  /* 8207A2E8h */ case    4:  		/* rlwinm R8, R6, 1, 0, 31 */
		/* 8207A2E8h case    4:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R8,regs.R6);
		/* 8207A2E8h case    4:*/		return 0x8207A2EC;
		  /* 8207A2ECh */ case    5:  		/* rlwinm R9, R7, 1, 0, 31 */
		/* 8207A2ECh case    5:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R9,regs.R7);
		/* 8207A2ECh case    5:*/		return 0x8207A2F0;
		  /* 8207A2F0h */ case    6:  		/* srawi R5, R10, 2 */
		/* 8207A2F0h case    6:*/		cpu::op::srawi<0,2>(regs,&regs.R5,regs.R10);
		/* 8207A2F0h case    6:*/		return 0x8207A2F4;
		  /* 8207A2F4h */ case    7:  		/* divw R7, R7, R10 */
		/* 8207A2F4h case    7:*/		cpu::op::divw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 8207A2F4h case    7:*/		return 0x8207A2F8;
		  /* 8207A2F8h */ case    8:  		/* addi R9, R9, -1 */
		/* 8207A2F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207A2F8h case    8:*/		return 0x8207A2FC;
		  /* 8207A2FCh */ case    9:  		/* addi R8, R8, -1 */
		/* 8207A2FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8207A2FCh case    9:*/		return 0x8207A300;
		  /* 8207A300h */ case   10:  		/* addze R22, R5 */
		/* 8207A300h case   10:*/		cpu::op::addze<0>(regs,&regs.R22,regs.R5);
		/* 8207A300h case   10:*/		return 0x8207A304;
		  /* 8207A304h */ case   11:  		/* mullw R30, R7, R10 */
		/* 8207A304h case   11:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R7,regs.R10);
		/* 8207A304h case   11:*/		return 0x8207A308;
		  /* 8207A308h */ case   12:  		/* srawi R5, R11, 2 */
		/* 8207A308h case   12:*/		cpu::op::srawi<0,2>(regs,&regs.R5,regs.R11);
		/* 8207A308h case   12:*/		return 0x8207A30C;
		  /* 8207A30Ch */ case   13:  		/* andc R9, R10, R9 */
		/* 8207A30Ch case   13:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 8207A30Ch case   13:*/		return 0x8207A310;
		  /* 8207A310h */ case   14:  		/* divw R7, R6, R11 */
		/* 8207A310h case   14:*/		cpu::op::divw<0>(regs,&regs.R7,regs.R6,regs.R11);
		/* 8207A310h case   14:*/		return 0x8207A314;
		  /* 8207A314h */ case   15:  		/* andc R8, R11, R8 */
		/* 8207A314h case   15:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 8207A314h case   15:*/		return 0x8207A318;
		  /* 8207A318h */ case   16:  		/* twi 6, R10, 0 */
		/* 8207A318h case   16:*/		cpu::op::tw<6>(regs, 0x8207A318, regs.R10, 0x00000000);
		/* 8207A318h case   16:*/		return 0x8207A31C;
		  /* 8207A31Ch */ case   17:  		/* twi 6, R11, 0 */
		/* 8207A31Ch case   17:*/		cpu::op::tw<6>(regs, 0x8207A31C, regs.R11, 0x00000000);
		/* 8207A31Ch case   17:*/		return 0x8207A320;
		  /* 8207A320h */ case   18:  		/* addze R21, R5 */
		/* 8207A320h case   18:*/		cpu::op::addze<0>(regs,&regs.R21,regs.R5);
		/* 8207A320h case   18:*/		return 0x8207A324;
		  /* 8207A324h */ case   19:  		/* twi 5, R9, -1 */
		/* 8207A324h case   19:*/		cpu::op::tw<5>(regs, 0x8207A324, regs.R9, 0xFFFFFFFF);
		/* 8207A324h case   19:*/		return 0x8207A328;
		  /* 8207A328h */ case   20:  		/* twi 5, R8, -1 */
		/* 8207A328h case   20:*/		cpu::op::tw<5>(regs, 0x8207A328, regs.R8, 0xFFFFFFFF);
		/* 8207A328h case   20:*/		return 0x8207A32C;
		  /* 8207A32Ch */ case   21:  		/* mullw R29, R7, R11 */
		/* 8207A32Ch case   21:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R7,regs.R11);
		/* 8207A32Ch case   21:*/		return 0x8207A330;
		  /* 8207A330h */ case   22:  		/* cmpw CR6, R30, R31 */
		/* 8207A330h case   22:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R31);
		/* 8207A330h case   22:*/		return 0x8207A334;
		  /* 8207A334h */ case   23:  		/* bc 4, CR6_GT, 32 */
		/* 8207A334h case   23:*/		if ( !regs.CR[6].gt ) { return 0x8207A354;  }
		/* 8207A334h case   23:*/		return 0x8207A338;
		  /* 8207A338h */ case   24:  		/* rlwinm R9, R31, 1, 0, 31 */
		/* 8207A338h case   24:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R9,regs.R31);
		/* 8207A338h case   24:*/		return 0x8207A33C;
		  /* 8207A33Ch */ case   25:  		/* divw R8, R31, R10 */
		/* 8207A33Ch case   25:*/		cpu::op::divw<0>(regs,&regs.R8,regs.R31,regs.R10);
		/* 8207A33Ch case   25:*/		return 0x8207A340;
		  /* 8207A340h */ case   26:  		/* addi R9, R9, -1 */
		/* 8207A340h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207A340h case   26:*/		return 0x8207A344;
		  /* 8207A344h */ case   27:  		/* twi 6, R10, 0 */
		/* 8207A344h case   27:*/		cpu::op::tw<6>(regs, 0x8207A344, regs.R10, 0x00000000);
		/* 8207A344h case   27:*/		return 0x8207A348;
		  /* 8207A348h */ case   28:  		/* mullw R30, R8, R10 */
		/* 8207A348h case   28:*/		cpu::op::mullw<0>(regs,&regs.R30,regs.R8,regs.R10);
		/* 8207A348h case   28:*/		return 0x8207A34C;
		  /* 8207A34Ch */ case   29:  		/* andc R10, R10, R9 */
		/* 8207A34Ch case   29:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8207A34Ch case   29:*/		return 0x8207A350;
		  /* 8207A350h */ case   30:  		/* twi 5, R10, -1 */
		/* 8207A350h case   30:*/		cpu::op::tw<5>(regs, 0x8207A350, regs.R10, 0xFFFFFFFF);
		/* 8207A350h case   30:*/		return 0x8207A354;
	}
	return 0x8207A354;
} // Block from 8207A2D8h-8207A354h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207A354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A354);
		  /* 8207A354h */ case    0:  		/* cmpw CR6, R29, R28 */
		/* 8207A354h case    0:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R28);
		/* 8207A354h case    0:*/		return 0x8207A358;
		  /* 8207A358h */ case    1:  		/* bc 4, CR6_GT, 32 */
		/* 8207A358h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207A378;  }
		/* 8207A358h case    1:*/		return 0x8207A35C;
		  /* 8207A35Ch */ case    2:  		/* rlwinm R10, R28, 1, 0, 31 */
		/* 8207A35Ch case    2:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R10,regs.R28);
		/* 8207A35Ch case    2:*/		return 0x8207A360;
		  /* 8207A360h */ case    3:  		/* divw R9, R28, R11 */
		/* 8207A360h case    3:*/		cpu::op::divw<0>(regs,&regs.R9,regs.R28,regs.R11);
		/* 8207A360h case    3:*/		return 0x8207A364;
		  /* 8207A364h */ case    4:  		/* addi R10, R10, -1 */
		/* 8207A364h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207A364h case    4:*/		return 0x8207A368;
		  /* 8207A368h */ case    5:  		/* twi 6, R11, 0 */
		/* 8207A368h case    5:*/		cpu::op::tw<6>(regs, 0x8207A368, regs.R11, 0x00000000);
		/* 8207A368h case    5:*/		return 0x8207A36C;
		  /* 8207A36Ch */ case    6:  		/* mullw R29, R9, R11 */
		/* 8207A36Ch case    6:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R9,regs.R11);
		/* 8207A36Ch case    6:*/		return 0x8207A370;
		  /* 8207A370h */ case    7:  		/* andc R11, R11, R10 */
		/* 8207A370h case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207A370h case    7:*/		return 0x8207A374;
		  /* 8207A374h */ case    8:  		/* twi 5, R11, -1 */
		/* 8207A374h case    8:*/		cpu::op::tw<5>(regs, 0x8207A374, regs.R11, 0xFFFFFFFF);
		/* 8207A374h case    8:*/		return 0x8207A378;
	}
	return 0x8207A378;
} // Block from 8207A354h-8207A378h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207A378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A378);
		  /* 8207A378h */ case    0:  		/* lwz R10, <#[R23 + 22112]> */
		/* 8207A378h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00005660) );
		/* 8207A378h case    0:*/		return 0x8207A37C;
		  /* 8207A37Ch */ case    1:  		/* mullw R11, R30, R19 */
		/* 8207A37Ch case    1:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R30,regs.R19);
		/* 8207A37Ch case    1:*/		return 0x8207A380;
		  /* 8207A380h */ case    2:  		/* lwz R9, <#[R23 + 22116]> */
		/* 8207A380h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00005664) );
		/* 8207A380h case    2:*/		return 0x8207A384;
		  /* 8207A384h */ case    3:  		/* lwz R8, <#[R23 + 22124]> */
		/* 8207A384h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x0000566C) );
		/* 8207A384h case    3:*/		return 0x8207A388;
		  /* 8207A388h */ case    4:  		/* std R10, <#[R1 + 128]> */
		/* 8207A388h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A388h case    4:*/		return 0x8207A38C;
		  /* 8207A38Ch */ case    5:  		/* std R9, <#[R1 + 136]> */
		/* 8207A38Ch case    5:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A38Ch case    5:*/		return 0x8207A390;
		  /* 8207A390h */ case    6:  		/* divwu R11, R11, R31 */
		/* 8207A390h case    6:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8207A390h case    6:*/		return 0x8207A394;
		  /* 8207A394h */ case    7:  		/* mullw R10, R29, R20 */
		/* 8207A394h case    7:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R29,regs.R20);
		/* 8207A394h case    7:*/		return 0x8207A398;
		  /* 8207A398h */ case    8:  		/* rldicl R11, R11, 0, 32 */
		/* 8207A398h case    8:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207A398h case    8:*/		return 0x8207A39C;
		  /* 8207A39Ch */ case    9:  		/* twi 6, R31, 0 */
		/* 8207A39Ch case    9:*/		cpu::op::tw<6>(regs, 0x8207A39C, regs.R31, 0x00000000);
		/* 8207A39Ch case    9:*/		return 0x8207A3A0;
		  /* 8207A3A0h */ case   10:  		/* twi 6, R28, 0 */
		/* 8207A3A0h case   10:*/		cpu::op::tw<6>(regs, 0x8207A3A0, regs.R28, 0x00000000);
		/* 8207A3A0h case   10:*/		return 0x8207A3A4;
		  /* 8207A3A4h */ case   11:  		/* cmpwi CR6, R8, 0 */
		/* 8207A3A4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8207A3A4h case   11:*/		return 0x8207A3A8;
		  /* 8207A3A8h */ case   12:  		/* lfd FR0, <#[R1 + 128]> */
		/* 8207A3A8h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A3A8h case   12:*/		return 0x8207A3AC;
		  /* 8207A3ACh */ case   13:  		/* std R11, <#[R1 + 128]> */
		/* 8207A3ACh case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A3ACh case   13:*/		return 0x8207A3B0;
		  /* 8207A3B0h */ case   14:  		/* mr R11, R9 */
		/* 8207A3B0h case   14:*/		regs.R11 = regs.R9;
		/* 8207A3B0h case   14:*/		return 0x8207A3B4;
		  /* 8207A3B4h */ case   15:  		/* lfd FR11, <#[R1 + 136]> */
		/* 8207A3B4h case   15:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A3B4h case   15:*/		return 0x8207A3B8;
		  /* 8207A3B8h */ case   16:  		/* divwu R11, R10, R28 */
		/* 8207A3B8h case   16:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R10,regs.R28);
		/* 8207A3B8h case   16:*/		return 0x8207A3BC;
		  /* 8207A3BCh */ case   17:  		/* fcfid FR11, FR11 */
		/* 8207A3BCh case   17:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 8207A3BCh case   17:*/		return 0x8207A3C0;
		  /* 8207A3C0h */ case   18:  		/* fcfid FR0, FR0 */
		/* 8207A3C0h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A3C0h case   18:*/		return 0x8207A3C4;
		  /* 8207A3C4h */ case   19:  		/* add R10, R25, R24 */
		/* 8207A3C4h case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R25,regs.R24);
		/* 8207A3C4h case   19:*/		return 0x8207A3C8;
		  /* 8207A3C8h */ case   20:  		/* rldicl R11, R11, 0, 32 */
		/* 8207A3C8h case   20:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207A3C8h case   20:*/		return 0x8207A3CC;
		  /* 8207A3CCh */ case   21:  		/* srawi R10, R10, 1 */
		/* 8207A3CCh case   21:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R10);
		/* 8207A3CCh case   21:*/		return 0x8207A3D0;
		  /* 8207A3D0h */ case   22:  		/* add R9, R27, R26 */
		/* 8207A3D0h case   22:*/		cpu::op::add<0>(regs,&regs.R9,regs.R27,regs.R26);
		/* 8207A3D0h case   22:*/		return 0x8207A3D4;
		  /* 8207A3D4h */ case   23:  		/* frsp FR11, FR11 */
		/* 8207A3D4h case   23:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 8207A3D4h case   23:*/		return 0x8207A3D8;
		  /* 8207A3D8h */ case   24:  		/* frsp FR0, FR0 */
		/* 8207A3D8h case   24:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A3D8h case   24:*/		return 0x8207A3DC;
		  /* 8207A3DCh */ case   25:  		/* lfd FR13, <#[R1 + 128]> */
		/* 8207A3DCh case   25:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A3DCh case   25:*/		return 0x8207A3E0;
		  /* 8207A3E0h */ case   26:  		/* std R11, <#[R1 + 128]> */
		/* 8207A3E0h case   26:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A3E0h case   26:*/		return 0x8207A3E4;
		  /* 8207A3E4h */ case   27:  		/* lfd FR12, <#[R1 + 128]> */
		/* 8207A3E4h case   27:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A3E4h case   27:*/		return 0x8207A3E8;
		  /* 8207A3E8h */ case   28:  		/* fcfid FR12, FR12 */
		/* 8207A3E8h case   28:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207A3E8h case   28:*/		return 0x8207A3EC;
		  /* 8207A3ECh */ case   29:  		/* fcfid FR13, FR13 */
		/* 8207A3ECh case   29:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A3ECh case   29:*/		return 0x8207A3F0;
		  /* 8207A3F0h */ case   30:  		/* addze R11, R10 */
		/* 8207A3F0h case   30:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R10);
		/* 8207A3F0h case   30:*/		return 0x8207A3F4;
		  /* 8207A3F4h */ case   31:  		/* srawi R10, R30, 1 */
		/* 8207A3F4h case   31:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R30);
		/* 8207A3F4h case   31:*/		return 0x8207A3F8;
		  /* 8207A3F8h */ case   32:  		/* frsp FR12, FR12 */
		/* 8207A3F8h case   32:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 8207A3F8h case   32:*/		return 0x8207A3FC;
		  /* 8207A3FCh */ case   33:  		/* addze R10, R10 */
		/* 8207A3FCh case   33:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8207A3FCh case   33:*/		return 0x8207A400;
		  /* 8207A400h */ case   34:  		/* srawi R9, R9, 1 */
		/* 8207A400h case   34:*/		cpu::op::srawi<0,1>(regs,&regs.R9,regs.R9);
		/* 8207A400h case   34:*/		return 0x8207A404;
		  /* 8207A404h */ case   35:  		/* subf R20, R10, R11 */
		/* 8207A404h case   35:*/		cpu::op::subf<0>(regs,&regs.R20,regs.R10,regs.R11);
		/* 8207A404h case   35:*/		return 0x8207A408;
		  /* 8207A408h */ case   36:  		/* addze R11, R9 */
		/* 8207A408h case   36:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R9);
		/* 8207A408h case   36:*/		return 0x8207A40C;
		  /* 8207A40Ch */ case   37:  		/* srawi R10, R29, 1 */
		/* 8207A40Ch case   37:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R29);
		/* 8207A40Ch case   37:*/		return 0x8207A410;
	}
	return 0x8207A410;
} // Block from 8207A378h-8207A410h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8207A410h
// Function '?LowPriReportGpuDoneWithYield@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A410);
		  /* 8207A410h */ case    0:  		/* addze R10, R10 */
		/* 8207A410h case    0:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8207A410h case    0:*/		return 0x8207A414;
		  /* 8207A414h */ case    1:  		/* frsp FR13, FR13 */
		/* 8207A414h case    1:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A414h case    1:*/		return 0x8207A418;
		  /* 8207A418h */ case    2:  		/* subf R19, R10, R11 */
		/* 8207A418h case    2:*/		cpu::op::subf<0>(regs,&regs.R19,regs.R10,regs.R11);
		/* 8207A418h case    2:*/		return 0x8207A41C;
		  /* 8207A41Ch */ case    3:  		/* fdivs FR30, FR12, FR11 */
		/* 8207A41Ch case    3:*/		cpu::op::fdivs<0>(regs,&regs.FR30,regs.FR12,regs.FR11);
		/* 8207A41Ch case    3:*/		return 0x8207A420;
		  /* 8207A420h */ case    4:  		/* fdivs FR31, FR13, FR0 */
		/* 8207A420h case    4:*/		cpu::op::fdivs<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 8207A420h case    4:*/		return 0x8207A424;
		  /* 8207A424h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8207A424h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207A43C;  }
		/* 8207A424h case    5:*/		return 0x8207A428;
		  /* 8207A428h */ case    6:  		/* lis R11, -32256 */
		/* 8207A428h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207A428h case    6:*/		return 0x8207A42C;
		  /* 8207A42Ch */ case    7:  		/* lis R10, -32256 */
		/* 8207A42Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207A42Ch case    7:*/		return 0x8207A430;
		  /* 8207A430h */ case    8:  		/* lfs FR0, <#[R11 + 2976]> */
		/* 8207A430h case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000BA0) );
		/* 8207A430h case    8:*/		return 0x8207A434;
		  /* 8207A434h */ case    9:  		/* lfs FR13, <#[R10 + 8536]> */
		/* 8207A434h case    9:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00002158) );
		/* 8207A434h case    9:*/		return 0x8207A438;
		  /* 8207A438h */ case   10:  		/* b 20 */
		/* 8207A438h case   10:*/		return 0x8207A44C;
		/* 8207A438h case   10:*/		return 0x8207A43C;
	}
	return 0x8207A43C;
} // Block from 8207A410h-8207A43Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207A43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A43C);
		  /* 8207A43Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207A43Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207A43Ch case    0:*/		return 0x8207A440;
		  /* 8207A440h */ case    1:  		/* lis R10, -32256 */
		/* 8207A440h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207A440h case    1:*/		return 0x8207A444;
		  /* 8207A444h */ case    2:  		/* lfs FR0, <#[R11 + 8444]> */
		/* 8207A444h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000020FC) );
		/* 8207A444h case    2:*/		return 0x8207A448;
		  /* 8207A448h */ case    3:  		/* lfs FR13, <#[R10 + 8532]> */
		/* 8207A448h case    3:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00002154) );
		/* 8207A448h case    3:*/		return 0x8207A44C;
	}
	return 0x8207A44C;
} // Block from 8207A43Ch-8207A44Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207A44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A44C);
		  /* 8207A44Ch */ case    0:  		/* divw R8, R30, R22 */
		/* 8207A44Ch case    0:*/		cpu::op::divw<0>(regs,&regs.R8,regs.R30,regs.R22);
		/* 8207A44Ch case    0:*/		return 0x8207A450;
		  /* 8207A450h */ case    1:  		/* fmuls FR13, FR30, FR13 */
		/* 8207A450h case    1:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR30,regs.FR13);
		/* 8207A450h case    1:*/		return 0x8207A454;
		  /* 8207A454h */ case    2:  		/* divw R7, R29, R21 */
		/* 8207A454h case    2:*/		cpu::op::divw<0>(regs,&regs.R7,regs.R29,regs.R21);
		/* 8207A454h case    2:*/		return 0x8207A458;
		  /* 8207A458h */ case    3:  		/* fmuls FR0, FR31, FR0 */
		/* 8207A458h case    3:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR31,regs.FR0);
		/* 8207A458h case    3:*/		return 0x8207A45C;
		  /* 8207A45Ch */ case    4:  		/* li R11, 42 */
		/* 8207A45Ch case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x2A);
		/* 8207A45Ch case    4:*/		return 0x8207A460;
		  /* 8207A460h */ case    5:  		/* mullw R6, R7, R8 */
		/* 8207A460h case    5:*/		cpu::op::mullw<0>(regs,&regs.R6,regs.R7,regs.R8);
		/* 8207A460h case    5:*/		return 0x8207A464;
		  /* 8207A464h */ case    6:  		/* fdivs FR29, FR0, FR13 */
		/* 8207A464h case    6:*/		cpu::op::fdivs<0>(regs,&regs.FR29,regs.FR0,regs.FR13);
		/* 8207A464h case    6:*/		return 0x8207A468;
		  /* 8207A468h */ case    7:  		/* divwu R11, R6, R11 */
		/* 8207A468h case    7:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 8207A468h case    7:*/		return 0x8207A46C;
		  /* 8207A46Ch */ case    8:  		/* rlwinm R10, R30, 1, 0, 31 */
		/* 8207A46Ch case    8:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R10,regs.R30);
		/* 8207A46Ch case    8:*/		return 0x8207A470;
		  /* 8207A470h */ case    9:  		/* addi R11, R11, 1024 */
		/* 8207A470h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x400);
		/* 8207A470h case    9:*/		return 0x8207A474;
		  /* 8207A474h */ case   10:  		/* rlwinm R9, R29, 1, 0, 31 */
		/* 8207A474h case   10:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R9,regs.R29);
		/* 8207A474h case   10:*/		return 0x8207A478;
		  /* 8207A478h */ case   11:  		/* addi R5, R10, -1 */
		/* 8207A478h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFFFF);
		/* 8207A478h case   11:*/		return 0x8207A47C;
		  /* 8207A47Ch */ case   12:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8207A47Ch case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8207A47Ch case   12:*/		return 0x8207A480;
		  /* 8207A480h */ case   13:  		/* mulli R11, R6, 6 */
		/* 8207A480h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R6,0x6);
		/* 8207A480h case   13:*/		return 0x8207A484;
		  /* 8207A484h */ case   14:  		/* addi R9, R9, -1 */
		/* 8207A484h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207A484h case   14:*/		return 0x8207A488;
		  /* 8207A488h */ case   15:  		/* andc R6, R22, R5 */
		/* 8207A488h case   15:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R22,regs.R5);
		/* 8207A488h case   15:*/		return 0x8207A48C;
		  /* 8207A48Ch */ case   16:  		/* andc R9, R21, R9 */
		/* 8207A48Ch case   16:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 8207A48Ch case   16:*/		return 0x8207A490;
		  /* 8207A490h */ case   17:  		/* add R31, R10, R11 */
		/* 8207A490h case   17:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 8207A490h case   17:*/		return 0x8207A494;
		  /* 8207A494h */ case   18:  		/* twi 6, R22, 0 */
		/* 8207A494h case   18:*/		cpu::op::tw<6>(regs, 0x8207A494, regs.R22, 0x00000000);
		/* 8207A494h case   18:*/		return 0x8207A498;
		  /* 8207A498h */ case   19:  		/* twi 6, R21, 0 */
		/* 8207A498h case   19:*/		cpu::op::tw<6>(regs, 0x8207A498, regs.R21, 0x00000000);
		/* 8207A498h case   19:*/		return 0x8207A49C;
		  /* 8207A49Ch */ case   20:  		/* twi 5, R6, -1 */
		/* 8207A49Ch case   20:*/		cpu::op::tw<5>(regs, 0x8207A49C, regs.R6, 0xFFFFFFFF);
		/* 8207A49Ch case   20:*/		return 0x8207A4A0;
		  /* 8207A4A0h */ case   21:  		/* twi 5, R9, -1 */
		/* 8207A4A0h case   21:*/		cpu::op::tw<5>(regs, 0x8207A4A0, regs.R9, 0xFFFFFFFF);
		/* 8207A4A0h case   21:*/		return 0x8207A4A4;
		  /* 8207A4A4h */ case   22:  		/* rlwinm R26, R8, 1, 0, 30 */
		/* 8207A4A4h case   22:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R26,regs.R8);
		/* 8207A4A4h case   22:*/		return 0x8207A4A8;
		  /* 8207A4A8h */ case   23:  		/* rlwinm R25, R7, 1, 0, 30 */
		/* 8207A4A8h case   23:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R25,regs.R7);
		/* 8207A4A8h case   23:*/		return 0x8207A4AC;
		  /* 8207A4ACh */ case   24:  		/* cmplwi CR6, R31, 16384 */
		/* 8207A4ACh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00004000);
		/* 8207A4ACh case   24:*/		return 0x8207A4B0;
		  /* 8207A4B0h */ case   25:  		/* bc 12, CR6_GT, 8 */
		/* 8207A4B0h case   25:*/		if ( regs.CR[6].gt ) { return 0x8207A4B8;  }
		/* 8207A4B0h case   25:*/		return 0x8207A4B4;
		  /* 8207A4B4h */ case   26:  		/* li R31, 16384 */
		/* 8207A4B4h case   26:*/		cpu::op::li<0>(regs,&regs.R31,0x4000);
		/* 8207A4B4h case   26:*/		return 0x8207A4B8;
	}
	return 0x8207A4B8;
} // Block from 8207A44Ch-8207A4B8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8207A4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A4B8);
		  /* 8207A4B8h */ case    0:  		/* stw R31, <#[R1 + 164]> */
		/* 8207A4B8h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000A4) );
		/* 8207A4B8h case    0:*/		return 0x8207A4BC;
		  /* 8207A4BCh */ case    1:  		/* lis R11, -32256 */
		/* 8207A4BCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207A4BCh case    1:*/		return 0x8207A4C0;
		  /* 8207A4C0h */ case    2:  		/* addi R8, R1, 352 */
		/* 8207A4C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x160);
		/* 8207A4C0h case    2:*/		return 0x8207A4C4;
		  /* 8207A4C4h */ case    3:  		/* stw R18, <#[R1 + 160]> */
		/* 8207A4C4h case    3:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000A0) );
		/* 8207A4C4h case    3:*/		return 0x8207A4C8;
		  /* 8207A4C8h */ case    4:  		/* li R10, 4096 */
		/* 8207A4C8h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1000);
		/* 8207A4C8h case    4:*/		return 0x8207A4CC;
		  /* 8207A4CCh */ case    5:  		/* stw R8, <#[R1 + 176]> */
		/* 8207A4CCh case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000B0) );
		/* 8207A4CCh case    5:*/		return 0x8207A4D0;
		  /* 8207A4D0h */ case    6:  		/* stw R10, <#[R1 + 168]> */
		/* 8207A4D0h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 8207A4D0h case    6:*/		return 0x8207A4D4;
		  /* 8207A4D4h */ case    7:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8207A4D4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8207A4D4h case    7:*/		return 0x8207A4D8;
		  /* 8207A4D8h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 8207A4D8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207A4D8h case    8:*/		return 0x8207A4DC;
		  /* 8207A4DCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8207A4DCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A4DCh case    9:*/		return 0x8207A4E0;
		  /* 8207A4E0h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 8207A4E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8207A500;  }
		/* 8207A4E0h case   10:*/		return 0x8207A4E4;
		  /* 8207A4E4h */ case   11:  		/* lwz R11, <#[R11 + 24]> */
		/* 8207A4E4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8207A4E4h case   11:*/		return 0x8207A4E8;
		  /* 8207A4E8h */ case   12:  		/* addi R4, R1, 160 */
		/* 8207A4E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xA0);
		/* 8207A4E8h case   12:*/		return 0x8207A4EC;
		  /* 8207A4ECh */ case   13:  		/* li R3, 92 */
		/* 8207A4ECh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x5C);
		/* 8207A4ECh case   13:*/		return 0x8207A4F0;
		  /* 8207A4F0h */ case   14:  		/* mtspr CTR, R11 */
		/* 8207A4F0h case   14:*/		regs.CTR = regs.R11;
		/* 8207A4F0h case   14:*/		return 0x8207A4F4;
		  /* 8207A4F4h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8207A4F4h case   15:*/		if ( 1 ) { regs.LR = 0x8207A4F8; return (uint32)regs.CTR; }
		/* 8207A4F4h case   15:*/		return 0x8207A4F8;
		  /* 8207A4F8h */ case   16:  		/* lwz R8, <#[R1 + 176]> */
		/* 8207A4F8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B0) );
		/* 8207A4F8h case   16:*/		return 0x8207A4FC;
		  /* 8207A4FCh */ case   17:  		/* b 8 */
		/* 8207A4FCh case   17:*/		return 0x8207A504;
		/* 8207A4FCh case   17:*/		return 0x8207A500;
	}
	return 0x8207A500;
} // Block from 8207A4B8h-8207A500h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207A500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A500);
		  /* 8207A500h */ case    0:  		/* mr R3, R18 */
		/* 8207A500h case    0:*/		regs.R3 = regs.R18;
		/* 8207A500h case    0:*/		return 0x8207A504;
	}
	return 0x8207A504;
} // Block from 8207A500h-8207A504h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A504);
		  /* 8207A504h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8207A504h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207A504h case    0:*/		return 0x8207A508;
	}
	return 0x8207A508;
} // Block from 8207A504h-8207A508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A508h
// Function '?LowPriDoneInterruptCallback@D3D@@YAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A508);
		  /* 8207A508h */ case    0:  		/* bc 12, CR6_EQ, 476 */
		/* 8207A508h case    0:*/		if ( regs.CR[6].eq ) { return 0x8207A6E4;  }
		/* 8207A508h case    0:*/		return 0x8207A50C;
		  /* 8207A50Ch */ case    1:  		/* lwz R11, <#[R1 + 172]> */
		/* 8207A50Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 8207A50Ch case    1:*/		return 0x8207A510;
		  /* 8207A510h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 8207A510h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8207A510h case    2:*/		return 0x8207A514;
		  /* 8207A514h */ case    3:  		/* lwz R28, <#[R1 + 180]> */
		/* 8207A514h case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000000B4) );
		/* 8207A514h case    3:*/		return 0x8207A518;
		  /* 8207A518h */ case    4:  		/* add R10, R11, R31 */
		/* 8207A518h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R31);
		/* 8207A518h case    4:*/		return 0x8207A51C;
		  /* 8207A51Ch */ case    5:  		/* mr R27, R11 */
		/* 8207A51Ch case    5:*/		regs.R27 = regs.R11;
		/* 8207A51Ch case    5:*/		return 0x8207A520;
		  /* 8207A520h */ case    6:  		/* addi R10, R10, -1 */
		/* 8207A520h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207A520h case    6:*/		return 0x8207A524;
		  /* 8207A524h */ case    7:  		/* mr R31, R8 */
		/* 8207A524h case    7:*/		regs.R31 = regs.R8;
		/* 8207A524h case    7:*/		return 0x8207A528;
		  /* 8207A528h */ case    8:  		/* rlwinm R9, R10, 0, 18, 31 */
		/* 8207A528h case    8:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R9,regs.R10);
		/* 8207A528h case    8:*/		return 0x8207A52C;
		  /* 8207A52Ch */ case    9:  		/* mr R10, R18 */
		/* 8207A52Ch case    9:*/		regs.R10 = regs.R18;
		/* 8207A52Ch case    9:*/		return 0x8207A530;
		  /* 8207A530h */ case   10:  		/* addi R24, R9, 1 */
		/* 8207A530h case   10:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x1);
		/* 8207A530h case   10:*/		return 0x8207A534;
		  /* 8207A534h */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 8207A534h case   11:*/		if ( regs.CR[6].eq ) { return 0x8207A550;  }
		/* 8207A534h case   11:*/		return 0x8207A538;
		  /* 8207A538h */ case   12:  		/* lis R10, 10280 */
		/* 8207A538h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x2828);
		/* 8207A538h case   12:*/		return 0x8207A53C;
		  /* 8207A53Ch */ case   13:  		/* ori R10, R10, 310 */
		/* 8207A53Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x136);
		/* 8207A53Ch case   13:*/		return 0x8207A540;
		  /* 8207A540h */ case   14:  		/* subf R10, R16, R10 */
		/* 8207A540h case   14:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R16,regs.R10);
		/* 8207A540h case   14:*/		return 0x8207A544;
		  /* 8207A544h */ case   15:  		/* cntlzw R10, R10 */
		/* 8207A544h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8207A544h case   15:*/		return 0x8207A548;
		  /* 8207A548h */ case   16:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 8207A548h case   16:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8207A548h case   16:*/		return 0x8207A54C;
		  /* 8207A54Ch */ case   17:  		/* addi R10, R10, 1 */
		/* 8207A54Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8207A54Ch case   17:*/		return 0x8207A550;
	}
	return 0x8207A550;
} // Block from 8207A508h-8207A550h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207A550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A550);
		  /* 8207A550h */ case    0:  		/* lwz R9, <#[R8]> */
		/* 8207A550h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8207A550h case    0:*/		return 0x8207A554;
		  /* 8207A554h */ case    1:  		/* lis R8, 20585 */
		/* 8207A554h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0x5069);
		/* 8207A554h case    1:*/		return 0x8207A558;
		  /* 8207A558h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 8207A558h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8207A558h case    2:*/		return 0x8207A55C;
		  /* 8207A55Ch */ case    3:  		/* add R11, R9, R11 */
		/* 8207A55Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207A55Ch case    3:*/		return 0x8207A560;
		  /* 8207A560h */ case    4:  		/* ori R9, R8, 30806 */
		/* 8207A560h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R8,0x7856);
		/* 8207A560h case    4:*/		return 0x8207A564;
		  /* 8207A564h */ case    5:  		/* stw R9, <#[R11]> */
		/* 8207A564h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8207A564h case    5:*/		return 0x8207A568;
		  /* 8207A568h */ case    6:  		/* stw R18, <#[R11 + 4]> */
		/* 8207A568h case    6:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000004) );
		/* 8207A568h case    6:*/		return 0x8207A56C;
		  /* 8207A56Ch */ case    7:  		/* lwz R9, <#[R23 + 21948]> */
		/* 8207A56Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x000055BC) );
		/* 8207A56Ch case    7:*/		return 0x8207A570;
		  /* 8207A570h */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 8207A570h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8207A570h case    8:*/		return 0x8207A574;
		  /* 8207A574h */ case    9:  		/* stw R10, <#[R11 + 12]> */
		/* 8207A574h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207A574h case    9:*/		return 0x8207A578;
		  /* 8207A578h */ case   10:  		/* stw R26, <#[R11 + 16]> */
		/* 8207A578h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000010) );
		/* 8207A578h case   10:*/		return 0x8207A57C;
		  /* 8207A57Ch */ case   11:  		/* stw R25, <#[R11 + 20]> */
		/* 8207A57Ch case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000014) );
		/* 8207A57Ch case   11:*/		return 0x8207A580;
		  /* 8207A580h */ case   12:  		/* stfs FR31, <#[R11 + 24]> */
		/* 8207A580h case   12:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R11 + 0x00000018) );
		/* 8207A580h case   12:*/		return 0x8207A584;
		  /* 8207A584h */ case   13:  		/* stfs FR30, <#[R11 + 28]> */
		/* 8207A584h case   13:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R11 + 0x0000001C) );
		/* 8207A584h case   13:*/		return 0x8207A588;
		  /* 8207A588h */ case   14:  		/* stfs FR29, <#[R11 + 32]> */
		/* 8207A588h case   14:*/		cpu::mem::store32f( regs, regs.FR29, (uint32)(regs.R11 + 0x00000020) );
		/* 8207A588h case   14:*/		return 0x8207A58C;
		  /* 8207A58Ch */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 8207A58Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8207A5A0;  }
		/* 8207A58Ch case   15:*/		return 0x8207A590;
		  /* 8207A590h */ case   16:  		/* addi R3, R11, 36 */
		/* 8207A590h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x24);
		/* 8207A590h case   16:*/		return 0x8207A594;
		  /* 8207A594h */ case   17:  		/* li R5, 1536 */
		/* 8207A594h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 8207A594h case   17:*/		return 0x8207A598;
		  /* 8207A598h */ case   18:  		/* mr R4, R17 */
		/* 8207A598h case   18:*/		regs.R4 = regs.R17;
		/* 8207A598h case   18:*/		return 0x8207A59C;
		  /* 8207A59Ch */ case   19:  		/* bl 95252 */
		/* 8207A59Ch case   19:*/		regs.LR = 0x8207A5A0; return 0x820919B0;
		/* 8207A59Ch case   19:*/		return 0x8207A5A0;
	}
	return 0x8207A5A0;
} // Block from 8207A550h-8207A5A0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207A5A0h
// Function '?LowPriSetGprAllocation@D3D@@YAXPAVCXpsGlobal@1@PAVCDevice@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A5A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A5A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A5A0);
		  /* 8207A5A0h */ case    0:  		/* addi R4, R27, 4096 */
		/* 8207A5A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R27,0x1000);
		/* 8207A5A0h case    0:*/		return 0x8207A5A4;
		  /* 8207A5A4h */ case    1:  		/* cmplwi CR6, R4, 16384 */
		/* 8207A5A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00004000);
		/* 8207A5A4h case    1:*/		return 0x8207A5A8;
		  /* 8207A5A8h */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 8207A5A8h case    2:*/		if ( regs.CR[6].lt ) { return 0x8207A5B8;  }
		/* 8207A5A8h case    2:*/		return 0x8207A5AC;
		  /* 8207A5ACh */ case    3:  		/* mr R4, R18 */
		/* 8207A5ACh case    3:*/		regs.R4 = regs.R18;
		/* 8207A5ACh case    3:*/		return 0x8207A5B0;
		  /* 8207A5B0h */ case    4:  		/* addi R31, R31, 4 */
		/* 8207A5B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8207A5B0h case    4:*/		return 0x8207A5B4;
		  /* 8207A5B4h */ case    5:  		/* addi R28, R28, -1 */
		/* 8207A5B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8207A5B4h case    5:*/		return 0x8207A5B8;
	}
	return 0x8207A5B8;
} // Block from 8207A5A0h-8207A5B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207A5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A5B8);
		  /* 8207A5B8h */ case    0:  		/* extsw R11, R30 */
		/* 8207A5B8h case    0:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R30);
		/* 8207A5B8h case    0:*/		return 0x8207A5BC;
		  /* 8207A5BCh */ case    1:  		/* extsw R10, R29 */
		/* 8207A5BCh case    1:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R29);
		/* 8207A5BCh case    1:*/		return 0x8207A5C0;
		  /* 8207A5C0h */ case    2:  		/* extsw R9, R20 */
		/* 8207A5C0h case    2:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R20);
		/* 8207A5C0h case    2:*/		return 0x8207A5C4;
		  /* 8207A5C4h */ case    3:  		/* std R11, <#[R1 + 136]> */
		/* 8207A5C4h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A5C4h case    3:*/		return 0x8207A5C8;
		  /* 8207A5C8h */ case    4:  		/* std R10, <#[R1 + 192]> */
		/* 8207A5C8h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 8207A5C8h case    4:*/		return 0x8207A5CC;
		  /* 8207A5CCh */ case    5:  		/* lfd FR11, <#[R1 + 192]> */
		/* 8207A5CCh case    5:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x000000C0) );
		/* 8207A5CCh case    5:*/		return 0x8207A5D0;
		  /* 8207A5D0h */ case    6:  		/* extsw R11, R21 */
		/* 8207A5D0h case    6:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R21);
		/* 8207A5D0h case    6:*/		return 0x8207A5D4;
		  /* 8207A5D4h */ case    7:  		/* std R9, <#[R1 + 216]> */
		/* 8207A5D4h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x000000D8) );
		/* 8207A5D4h case    7:*/		return 0x8207A5D8;
		  /* 8207A5D8h */ case    8:  		/* lfd FR10, <#[R1 + 216]> */
		/* 8207A5D8h case    8:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R1 + 0x000000D8) );
		/* 8207A5D8h case    8:*/		return 0x8207A5DC;
		  /* 8207A5DCh */ case    9:  		/* extsw R10, R19 */
		/* 8207A5DCh case    9:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R19);
		/* 8207A5DCh case    9:*/		return 0x8207A5E0;
		  /* 8207A5E0h */ case   10:  		/* std R11, <#[R1 + 208]> */
		/* 8207A5E0h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 8207A5E0h case   10:*/		return 0x8207A5E4;
		  /* 8207A5E4h */ case   11:  		/* lfd FR9, <#[R1 + 208]> */
		/* 8207A5E4h case   11:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R1 + 0x000000D0) );
		/* 8207A5E4h case   11:*/		return 0x8207A5E8;
		  /* 8207A5E8h */ case   12:  		/* extsw R11, R22 */
		/* 8207A5E8h case   12:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R22);
		/* 8207A5E8h case   12:*/		return 0x8207A5EC;
		  /* 8207A5ECh */ case   13:  		/* std R10, <#[R1 + 144]> */
		/* 8207A5ECh case   13:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 8207A5ECh case   13:*/		return 0x8207A5F0;
		  /* 8207A5F0h */ case   14:  		/* lfd FR13, <#[R1 + 136]> */
		/* 8207A5F0h case   14:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A5F0h case   14:*/		return 0x8207A5F4;
		  /* 8207A5F4h */ case   15:  		/* fcfid FR13, FR13 */
		/* 8207A5F4h case   15:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207A5F4h case   15:*/		return 0x8207A5F8;
		  /* 8207A5F8h */ case   16:  		/* std R11, <#[R1 + 128]> */
		/* 8207A5F8h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A5F8h case   16:*/		return 0x8207A5FC;
		  /* 8207A5FCh */ case   17:  		/* lfd FR12, <#[R1 + 144]> */
		/* 8207A5FCh case   17:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000090) );
		/* 8207A5FCh case   17:*/		return 0x8207A600;
		  /* 8207A600h */ case   18:  		/* fcfid FR12, FR12 */
		/* 8207A600h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207A600h case   18:*/		return 0x8207A604;
		  /* 8207A604h */ case   19:  		/* lis R10, 21 */
		/* 8207A604h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x15);
		/* 8207A604h case   19:*/		return 0x8207A608;
		  /* 8207A608h */ case   20:  		/* fcfid FR11, FR11 */
		/* 8207A608h case   20:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 8207A608h case   20:*/		return 0x8207A60C;
		  /* 8207A60Ch */ case   21:  		/* mullw R11, R29, R30 */
		/* 8207A60Ch case   21:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 8207A60Ch case   21:*/		return 0x8207A610;
		  /* 8207A610h */ case   22:  		/* fcfid FR10, FR10 */
		/* 8207A610h case   22:*/		cpu::op::fcfid<0>(regs,&regs.FR10,regs.FR10);
		/* 8207A610h case   22:*/		return 0x8207A614;
		  /* 8207A614h */ case   23:  		/* fcfid FR9, FR9 */
		/* 8207A614h case   23:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR9);
		/* 8207A614h case   23:*/		return 0x8207A618;
		  /* 8207A618h */ case   24:  		/* ori R10, R10, 6144 */
		/* 8207A618h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1800);
		/* 8207A618h case   24:*/		return 0x8207A61C;
		  /* 8207A61Ch */ case   25:  		/* cmpw CR6, R11, R10 */
		/* 8207A61Ch case   25:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8207A61Ch case   25:*/		return 0x8207A620;
		  /* 8207A620h */ case   26:  		/* lfd FR0, <#[R1 + 128]> */
		/* 8207A620h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A620h case   26:*/		return 0x8207A624;
		  /* 8207A624h */ case   27:  		/* fcfid FR0, FR0 */
		/* 8207A624h case   27:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A624h case   27:*/		return 0x8207A628;
		  /* 8207A628h */ case   28:  		/* frsp FR0, FR0 */
		/* 8207A628h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207A628h case   28:*/		return 0x8207A62C;
		  /* 8207A62Ch */ case   29:  		/* stfs FR0, <#[R1 + 144]> */
		/* 8207A62Ch case   29:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000090) );
		/* 8207A62Ch case   29:*/		return 0x8207A630;
		  /* 8207A630h */ case   30:  		/* frsp FR0, FR13 */
		/* 8207A630h case   30:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR13);
		/* 8207A630h case   30:*/		return 0x8207A634;
		  /* 8207A634h */ case   31:  		/* stfs FR0, <#[R1 + 128]> */
		/* 8207A634h case   31:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A634h case   31:*/		return 0x8207A638;
		  /* 8207A638h */ case   32:  		/* frsp FR0, FR12 */
		/* 8207A638h case   32:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR12);
		/* 8207A638h case   32:*/		return 0x8207A63C;
		  /* 8207A63Ch */ case   33:  		/* stfs FR0, <#[R1 + 140]> */
		/* 8207A63Ch case   33:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207A63Ch case   33:*/		return 0x8207A640;
		  /* 8207A640h */ case   34:  		/* frsp FR0, FR11 */
		/* 8207A640h case   34:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR11);
		/* 8207A640h case   34:*/		return 0x8207A644;
		  /* 8207A644h */ case   35:  		/* stfs FR0, <#[R1 + 132]> */
		/* 8207A644h case   35:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000084) );
		/* 8207A644h case   35:*/		return 0x8207A648;
		  /* 8207A648h */ case   36:  		/* frsp FR0, FR10 */
		/* 8207A648h case   36:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR10);
		/* 8207A648h case   36:*/		return 0x8207A64C;
		  /* 8207A64Ch */ case   37:  		/* stfs FR0, <#[R1 + 136]> */
		/* 8207A64Ch case   37:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A64Ch case   37:*/		return 0x8207A650;
		  /* 8207A650h */ case   38:  		/* frsp FR0, FR9 */
		/* 8207A650h case   38:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR9);
		/* 8207A650h case   38:*/		return 0x8207A654;
		  /* 8207A654h */ case   39:  		/* stfs FR0, <#[R1 + 148]> */
		/* 8207A654h case   39:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000094) );
		/* 8207A654h case   39:*/		return 0x8207A658;
		  /* 8207A658h */ case   40:  		/* bc 4, CR6_GT, 12 */
		/* 8207A658h case   40:*/		if ( !regs.CR[6].gt ) { return 0x8207A664;  }
		/* 8207A658h case   40:*/		return 0x8207A65C;
		  /* 8207A65Ch */ case   41:  		/* li R7, 2 */
		/* 8207A65Ch case   41:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8207A65Ch case   41:*/		return 0x8207A660;
		  /* 8207A660h */ case   42:  		/* b 32 */
		/* 8207A660h case   42:*/		return 0x8207A680;
		/* 8207A660h case   42:*/		return 0x8207A664;
	}
	return 0x8207A664;
} // Block from 8207A5B8h-8207A664h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8207A664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A664);
		  /* 8207A664h */ case    0:  		/* lis R10, 7 */
		/* 8207A664h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7);
		/* 8207A664h case    0:*/		return 0x8207A668;
		  /* 8207A668h */ case    1:  		/* ori R10, R10, 59648 */
		/* 8207A668h case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE900);
		/* 8207A668h case    1:*/		return 0x8207A66C;
		  /* 8207A66Ch */ case    2:  		/* subfc R9, R11, R10 */
		/* 8207A66Ch case    2:*/		cpu::op::subfc<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8207A66Ch case    2:*/		return 0x8207A670;
		  /* 8207A670h */ case    3:  		/* eqv R11, R11, R10 */
		/* 8207A670h case    3:*/		cpu::op::eqv<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207A670h case    3:*/		return 0x8207A674;
		  /* 8207A674h */ case    4:  		/* rlwinm R11, R11, 1, 31, 31 */
		/* 8207A674h case    4:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R11);
		/* 8207A674h case    4:*/		return 0x8207A678;
		  /* 8207A678h */ case    5:  		/* addze R11, R11 */
		/* 8207A678h case    5:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8207A678h case    5:*/		return 0x8207A67C;
		  /* 8207A67Ch */ case    6:  		/* rlwinm R7, R11, 0, 31, 31 */
		/* 8207A67Ch case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R11);
		/* 8207A67Ch case    6:*/		return 0x8207A680;
	}
	return 0x8207A680;
} // Block from 8207A664h-8207A680h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207A680h
// Function '?LowPriPrbWriteTimestamp@D3D@@YAXPAVCDevice@1@PCK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A680);
		  /* 8207A680h */ case    0:  		/* lwz R11, <#[R1 + 256]> */
		/* 8207A680h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 8207A680h case    0:*/		return 0x8207A684;
		  /* 8207A684h */ case    1:  		/* addi R10, R1, 144 */
		/* 8207A684h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8207A684h case    1:*/		return 0x8207A688;
		  /* 8207A688h */ case    2:  		/* lwz R9, <#[R23 + 21948]> */
		/* 8207A688h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x000055BC) );
		/* 8207A688h case    2:*/		return 0x8207A68C;
		  /* 8207A68Ch */ case    3:  		/* lis R6, -32256 */
		/* 8207A68Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 8207A68Ch case    3:*/		return 0x8207A690;
		  /* 8207A690h */ case    4:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8207A690h case    4:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8207A690h case    4:*/		return 0x8207A694;
		  /* 8207A694h */ case    5:  		/* stw R10, <#[R1 + 84]> */
		/* 8207A694h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8207A694h case    5:*/		return 0x8207A698;
		  /* 8207A698h */ case    6:  		/* rlwinm R8, R9, 1, 0, 30 */
		/* 8207A698h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R9);
		/* 8207A698h case    6:*/		return 0x8207A69C;
		  /* 8207A69Ch */ case    7:  		/* addi R11, R11, -54 */
		/* 8207A69Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFCA);
		/* 8207A69Ch case    7:*/		return 0x8207A6A0;
		  /* 8207A6A0h */ case    8:  		/* addi R30, R6, 8484 */
		/* 8207A6A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R6,0x2124);
		/* 8207A6A0h case    8:*/		return 0x8207A6A4;
		  /* 8207A6A4h */ case    9:  		/* cntlzw R11, R11 */
		/* 8207A6A4h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8207A6A4h case    9:*/		return 0x8207A6A8;
		  /* 8207A6A8h */ case   10:  		/* addi R10, R1, 136 */
		/* 8207A6A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x88);
		/* 8207A6A8h case   10:*/		return 0x8207A6AC;
		  /* 8207A6ACh */ case   11:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8207A6ACh case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8207A6ACh case   11:*/		return 0x8207A6B0;
		  /* 8207A6B0h */ case   12:  		/* addi R9, R1, 128 */
		/* 8207A6B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 8207A6B0h case   12:*/		return 0x8207A6B4;
		  /* 8207A6B4h */ case   13:  		/* add R11, R11, R8 */
		/* 8207A6B4h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8207A6B4h case   13:*/		return 0x8207A6B8;
		  /* 8207A6B8h */ case   14:  		/* addi R8, R1, 224 */
		/* 8207A6B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 8207A6B8h case   14:*/		return 0x8207A6BC;
		  /* 8207A6BCh */ case   15:  		/* mulli R11, R11, 3 */
		/* 8207A6BCh case   15:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8207A6BCh case   15:*/		return 0x8207A6C0;
		  /* 8207A6C0h */ case   16:  		/* add R11, R11, R7 */
		/* 8207A6C0h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8207A6C0h case   16:*/		return 0x8207A6C4;
		  /* 8207A6C4h */ case   17:  		/* mr R7, R24 */
		/* 8207A6C4h case   17:*/		regs.R7 = regs.R24;
		/* 8207A6C4h case   17:*/		return 0x8207A6C8;
		  /* 8207A6C8h */ case   18:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207A6C8h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207A6C8h case   18:*/		return 0x8207A6CC;
		  /* 8207A6CCh */ case   19:  		/* mr R6, R28 */
		/* 8207A6CCh case   19:*/		regs.R6 = regs.R28;
		/* 8207A6CCh case   19:*/		return 0x8207A6D0;
		  /* 8207A6D0h */ case   20:  		/* mr R5, R31 */
		/* 8207A6D0h case   20:*/		regs.R5 = regs.R31;
		/* 8207A6D0h case   20:*/		return 0x8207A6D4;
		  /* 8207A6D4h */ case   21:  		/* mr R3, R23 */
		/* 8207A6D4h case   21:*/		regs.R3 = regs.R23;
		/* 8207A6D4h case   21:*/		return 0x8207A6D8;
		  /* 8207A6D8h */ case   22:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8207A6D8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8207A6D8h case   22:*/		return 0x8207A6DC;
		  /* 8207A6DCh */ case   23:  		/* stw R11, <#[R1 + 92]> */
		/* 8207A6DCh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207A6DCh case   23:*/		return 0x8207A6E0;
		  /* 8207A6E0h */ case   24:  		/* bl -3808 */
		/* 8207A6E0h case   24:*/		regs.LR = 0x8207A6E4; return 0x82079800;
		/* 8207A6E0h case   24:*/		return 0x8207A6E4;
	}
	return 0x8207A6E4;
} // Block from 8207A680h-8207A6E4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207A6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A6E4);
		  /* 8207A6E4h */ case    0:  		/* lwz R3, <#[R1 + 184]> */
		/* 8207A6E4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 8207A6E4h case    0:*/		return 0x8207A6E8;
	}
	return 0x8207A6E8;
} // Block from 8207A6E4h-8207A6E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A6E8h
// Function '?ExecuteLowPriCommandBuffer@D3D@@YAXPAVCXpsGlobal@1@PAVCDevice@1@KPAULowPrioritySubmission@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A6E8);
		  /* 8207A6E8h */ case    0:  		/* addi R1, R1, 1312 */
		/* 8207A6E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x520);
		/* 8207A6E8h case    0:*/		return 0x8207A6EC;
		  /* 8207A6ECh */ case    1:  		/* lfd FR29, <#[R1 - 160]> */
		/* 8207A6ECh case    1:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8207A6ECh case    1:*/		return 0x8207A6F0;
		  /* 8207A6F0h */ case    2:  		/* lfd FR30, <#[R1 - 152]> */
		/* 8207A6F0h case    2:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 8207A6F0h case    2:*/		return 0x8207A6F4;
		  /* 8207A6F4h */ case    3:  		/* lfd FR31, <#[R1 - 144]> */
		/* 8207A6F4h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 8207A6F4h case    3:*/		return 0x8207A6F8;
		  /* 8207A6F8h */ case    4:  		/* b 93056 */
		/* 8207A6F8h case    4:*/		return 0x82091278;
		/* 8207A6F8h case    4:*/		return 0x8207A6FC;
		  /* 8207A6FCh */ case    5:  		/* nop */
		/* 8207A6FCh case    5:*/		cpu::op::nop();
		/* 8207A6FCh case    5:*/		return 0x8207A700;
	}
	return 0x8207A700;
} // Block from 8207A6E8h-8207A700h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207A700h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A700);
		  /* 8207A700h */ case    0:  		/* mfspr R12, LR */
		/* 8207A700h case    0:*/		regs.R12 = regs.LR;
		/* 8207A700h case    0:*/		return 0x8207A704;
		  /* 8207A704h */ case    1:  		/* bl 92996 */
		/* 8207A704h case    1:*/		regs.LR = 0x8207A708; return 0x82091248;
		/* 8207A704h case    1:*/		return 0x8207A708;
		  /* 8207A708h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8207A708h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8207A708h case    2:*/		return 0x8207A70C;
		  /* 8207A70Ch */ case    3:  		/* lwz R25, <#[R1 + 276]> */
		/* 8207A70Ch case    3:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000114) );
		/* 8207A70Ch case    3:*/		return 0x8207A710;
		  /* 8207A710h */ case    4:  		/* mr R31, R3 */
		/* 8207A710h case    4:*/		regs.R31 = regs.R3;
		/* 8207A710h case    4:*/		return 0x8207A714;
		  /* 8207A714h */ case    5:  		/* mr R24, R5 */
		/* 8207A714h case    5:*/		regs.R24 = regs.R5;
		/* 8207A714h case    5:*/		return 0x8207A718;
		  /* 8207A718h */ case    6:  		/* stw R7, <#[R3 + 22088]> */
		/* 8207A718h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00005648) );
		/* 8207A718h case    6:*/		return 0x8207A71C;
		  /* 8207A71Ch */ case    7:  		/* mr R30, R6 */
		/* 8207A71Ch case    7:*/		regs.R30 = regs.R6;
		/* 8207A71Ch case    7:*/		return 0x8207A720;
		  /* 8207A720h */ case    8:  		/* stw R8, <#[R3 + 22092]> */
		/* 8207A720h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x0000564C) );
		/* 8207A720h case    8:*/		return 0x8207A724;
		  /* 8207A724h */ case    9:  		/* mr R29, R7 */
		/* 8207A724h case    9:*/		regs.R29 = regs.R7;
		/* 8207A724h case    9:*/		return 0x8207A728;
		  /* 8207A728h */ case   10:  		/* stw R9, <#[R3 + 22096]> */
		/* 8207A728h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00005650) );
		/* 8207A728h case   10:*/		return 0x8207A72C;
		  /* 8207A72Ch */ case   11:  		/* mr R28, R8 */
		/* 8207A72Ch case   11:*/		regs.R28 = regs.R8;
		/* 8207A72Ch case   11:*/		return 0x8207A730;
		  /* 8207A730h */ case   12:  		/* stw R6, <#[R3 + 22100]> */
		/* 8207A730h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00005654) );
		/* 8207A730h case   12:*/		return 0x8207A734;
		  /* 8207A734h */ case   13:  		/* mr R27, R9 */
		/* 8207A734h case   13:*/		regs.R27 = regs.R9;
		/* 8207A734h case   13:*/		return 0x8207A738;
		  /* 8207A738h */ case   14:  		/* stw R10, <#[R3 + 22104]> */
		/* 8207A738h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00005658) );
		/* 8207A738h case   14:*/		return 0x8207A73C;
		  /* 8207A73Ch */ case   15:  		/* mr R26, R10 */
		/* 8207A73Ch case   15:*/		regs.R26 = regs.R10;
		/* 8207A73Ch case   15:*/		return 0x8207A740;
		  /* 8207A740h */ case   16:  		/* stw R25, <#[R3 + 22108]> */
		/* 8207A740h case   16:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x0000565C) );
		/* 8207A740h case   16:*/		return 0x8207A744;
		  /* 8207A744h */ case   17:  		/* rlwinm. R11, R4, 0, 28, 28 */
		/* 8207A744h case   17:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R4);
		/* 8207A744h case   17:*/		return 0x8207A748;
		  /* 8207A748h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 8207A748h case   18:*/		if ( regs.CR[0].eq ) { return 0x8207A754;  }
		/* 8207A748h case   18:*/		return 0x8207A74C;
		  /* 8207A74Ch */ case   19:  		/* addi R3, R3, 22112 */
		/* 8207A74Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x5660);
		/* 8207A74Ch case   19:*/		return 0x8207A750;
		  /* 8207A750h */ case   20:  		/* bl 2042168 */
		/* 8207A750h case   20:*/		regs.LR = 0x8207A754; return 0x8226D088;
		/* 8207A750h case   20:*/		return 0x8207A754;
	}
	return 0x8207A754;
} // Block from 8207A700h-8207A754h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207A754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A754);
		  /* 8207A754h */ case    0:  		/* lwz R11, <#[R31 + 21944]> */
		/* 8207A754h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055B8) );
		/* 8207A754h case    0:*/		return 0x8207A758;
		  /* 8207A758h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8207A758h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8207A758h case    1:*/		return 0x8207A75C;
		  /* 8207A75Ch */ case    2:  		/* bc 12, CR0_EQ, 200 */
		/* 8207A75Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8207A824;  }
		/* 8207A75Ch case    2:*/		return 0x8207A760;
		  /* 8207A760h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 8207A760h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8207A760h case    3:*/		return 0x8207A764;
		  /* 8207A764h */ case    4:  		/* bc 4, CR6_EQ, 56 */
		/* 8207A764h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8207A79C;  }
		/* 8207A764h case    4:*/		return 0x8207A768;
		  /* 8207A768h */ case    5:  		/* lbz R11, <#[R31 + 11069]> */
		/* 8207A768h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3D) );
		/* 8207A768h case    5:*/		return 0x8207A76C;
		  /* 8207A76Ch */ case    6:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 8207A76Ch case    6:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 8207A76Ch case    6:*/		return 0x8207A770;
		  /* 8207A770h */ case    7:  		/* bc 4, CR0_EQ, 44 */
		/* 8207A770h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8207A79C;  }
		/* 8207A770h case    7:*/		return 0x8207A774;
		  /* 8207A774h */ case    8:  		/* mr R9, R25 */
		/* 8207A774h case    8:*/		regs.R9 = regs.R25;
		/* 8207A774h case    8:*/		return 0x8207A778;
		  /* 8207A778h */ case    9:  		/* mr R8, R26 */
		/* 8207A778h case    9:*/		regs.R8 = regs.R26;
		/* 8207A778h case    9:*/		return 0x8207A77C;
		  /* 8207A77Ch */ case   10:  		/* mr R7, R27 */
		/* 8207A77Ch case   10:*/		regs.R7 = regs.R27;
		/* 8207A77Ch case   10:*/		return 0x8207A780;
		  /* 8207A780h */ case   11:  		/* mr R6, R28 */
		/* 8207A780h case   11:*/		regs.R6 = regs.R28;
		/* 8207A780h case   11:*/		return 0x8207A784;
		  /* 8207A784h */ case   12:  		/* mr R5, R29 */
		/* 8207A784h case   12:*/		regs.R5 = regs.R29;
		/* 8207A784h case   12:*/		return 0x8207A788;
		  /* 8207A788h */ case   13:  		/* mr R4, R30 */
		/* 8207A788h case   13:*/		regs.R4 = regs.R30;
		/* 8207A788h case   13:*/		return 0x8207A78C;
		  /* 8207A78Ch */ case   14:  		/* mr R3, R31 */
		/* 8207A78Ch case   14:*/		regs.R3 = regs.R31;
		/* 8207A78Ch case   14:*/		return 0x8207A790;
		  /* 8207A790h */ case   15:  		/* bl -1960 */
		/* 8207A790h case   15:*/		regs.LR = 0x8207A794; return 0x82079FE8;
		/* 8207A790h case   15:*/		return 0x8207A794;
		  /* 8207A794h */ case   16:  		/* mr R30, R3 */
		/* 8207A794h case   16:*/		regs.R30 = regs.R3;
		/* 8207A794h case   16:*/		return 0x8207A798;
		  /* 8207A798h */ case   17:  		/* b 84 */
		/* 8207A798h case   17:*/		return 0x8207A7EC;
		/* 8207A798h case   17:*/		return 0x8207A79C;
	}
	return 0x8207A79C;
} // Block from 8207A754h-8207A79Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207A79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A79C);
		  /* 8207A79Ch */ case    0:  		/* li R5, 24 */
		/* 8207A79Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 8207A79Ch case    0:*/		return 0x8207A7A0;
		  /* 8207A7A0h */ case    1:  		/* li R4, 0 */
		/* 8207A7A0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207A7A0h case    1:*/		return 0x8207A7A4;
		  /* 8207A7A4h */ case    2:  		/* addi R3, R1, 84 */
		/* 8207A7A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 8207A7A4h case    2:*/		return 0x8207A7A8;
		  /* 8207A7A8h */ case    3:  		/* bl 93080 */
		/* 8207A7A8h case    3:*/		regs.LR = 0x8207A7AC; return 0x82091340;
		/* 8207A7A8h case    3:*/		return 0x8207A7AC;
		  /* 8207A7ACh */ case    4:  		/* cntlzw R11, R24 */
		/* 8207A7ACh case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R24);
		/* 8207A7ACh case    4:*/		return 0x8207A7B0;
		  /* 8207A7B0h */ case    5:  		/* lis R9, -32256 */
		/* 8207A7B0h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207A7B0h case    5:*/		return 0x8207A7B4;
		  /* 8207A7B4h */ case    6:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8207A7B4h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8207A7B4h case    6:*/		return 0x8207A7B8;
		  /* 8207A7B8h */ case    7:  		/* xori R10, R11, 1 */
		/* 8207A7B8h case    7:*/		cpu::op::xori<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8207A7B8h case    7:*/		return 0x8207A7BC;
		  /* 8207A7BCh */ case    8:  		/* lwz R11, <#[R9 + 1140]> */
		/* 8207A7BCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000474) );
		/* 8207A7BCh case    8:*/		return 0x8207A7C0;
		  /* 8207A7C0h */ case    9:  		/* addi R10, R10, 4 */
		/* 8207A7C0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8207A7C0h case    9:*/		return 0x8207A7C4;
		  /* 8207A7C4h */ case   10:  		/* stw R10, <#[R1 + 80]> */
		/* 8207A7C4h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207A7C4h case   10:*/		return 0x8207A7C8;
		  /* 8207A7C8h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8207A7C8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207A7C8h case   11:*/		return 0x8207A7CC;
		  /* 8207A7CCh */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8207A7CCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A7CCh case   12:*/		return 0x8207A7D0;
		  /* 8207A7D0h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 8207A7D0h case   13:*/		if ( regs.CR[6].eq ) { return 0x8207A7E8;  }
		/* 8207A7D0h case   13:*/		return 0x8207A7D4;
		  /* 8207A7D4h */ case   14:  		/* lwz R11, <#[R11 + 24]> */
		/* 8207A7D4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8207A7D4h case   14:*/		return 0x8207A7D8;
	}
	return 0x8207A7D8;
} // Block from 8207A79Ch-8207A7D8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207A7D8h
// Function '?ExecutePendingSave@D3D@@YAXPAVCXpsGlobal@1@PAVCDevice@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A7D8);
		  /* 8207A7D8h */ case    0:  		/* addi R4, R1, 80 */
		/* 8207A7D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207A7D8h case    0:*/		return 0x8207A7DC;
		  /* 8207A7DCh */ case    1:  		/* li R3, 92 */
		/* 8207A7DCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x5C);
		/* 8207A7DCh case    1:*/		return 0x8207A7E0;
		  /* 8207A7E0h */ case    2:  		/* mtspr CTR, R11 */
		/* 8207A7E0h case    2:*/		regs.CTR = regs.R11;
		/* 8207A7E0h case    2:*/		return 0x8207A7E4;
		  /* 8207A7E4h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8207A7E4h case    3:*/		if ( 1 ) { regs.LR = 0x8207A7E8; return (uint32)regs.CTR; }
		/* 8207A7E4h case    3:*/		return 0x8207A7E8;
	}
	return 0x8207A7E8;
} // Block from 8207A7D8h-8207A7E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207A7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A7E8);
		  /* 8207A7E8h */ case    0:  		/* lwz R30, <#[R1 + 104]> */
		/* 8207A7E8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000068) );
		/* 8207A7E8h case    0:*/		return 0x8207A7EC;
	}
	return 0x8207A7EC;
} // Block from 8207A7E8h-8207A7ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A7EC);
		  /* 8207A7ECh */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8207A7ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8207A7ECh case    0:*/		return 0x8207A7F0;
		  /* 8207A7F0h */ case    1:  		/* lwz R4, <#[R31 + 48]> */
		/* 8207A7F0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 8207A7F0h case    1:*/		return 0x8207A7F4;
		  /* 8207A7F4h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 8207A7F4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8207A7F4h case    2:*/		return 0x8207A7F8;
		  /* 8207A7F8h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 8207A7F8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207A808;  }
		/* 8207A7F8h case    3:*/		return 0x8207A7FC;
		  /* 8207A7FCh */ case    4:  		/* mr R3, R31 */
		/* 8207A7FCh case    4:*/		regs.R3 = regs.R31;
		/* 8207A7FCh case    4:*/		return 0x8207A800;
		  /* 8207A800h */ case    5:  		/* bl -26360 */
		/* 8207A800h case    5:*/		regs.LR = 0x8207A804; return 0x82074108;
		/* 8207A800h case    5:*/		return 0x8207A804;
		  /* 8207A804h */ case    6:  		/* mr R4, R3 */
		/* 8207A804h case    6:*/		regs.R4 = regs.R3;
		/* 8207A804h case    6:*/		return 0x8207A808;
	}
	return 0x8207A808;
} // Block from 8207A7ECh-8207A808h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207A808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A808);
		  /* 8207A808h */ case    0:  		/* lis R11, -32248 */
		/* 8207A808h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8208);
		/* 8207A808h case    0:*/		return 0x8207A80C;
		  /* 8207A80Ch */ case    1:  		/* mr R7, R30 */
		/* 8207A80Ch case    1:*/		regs.R7 = regs.R30;
		/* 8207A80Ch case    1:*/		return 0x8207A810;
		  /* 8207A810h */ case    2:  		/* addi R6, R11, -32472 */
		/* 8207A810h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF8128);
		/* 8207A810h case    2:*/		return 0x8207A814;
		  /* 8207A814h */ case    3:  		/* li R5, 0 */
		/* 8207A814h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207A814h case    3:*/		return 0x8207A818;
		  /* 8207A818h */ case    4:  		/* mr R3, R31 */
		/* 8207A818h case    4:*/		regs.R3 = regs.R31;
		/* 8207A818h case    4:*/		return 0x8207A81C;
		  /* 8207A81Ch */ case    5:  		/* bl -28772 */
		/* 8207A81Ch case    5:*/		regs.LR = 0x8207A820; return 0x820737B8;
		/* 8207A81Ch case    5:*/		return 0x8207A820;
		  /* 8207A820h */ case    6:  		/* stw R3, <#[R31 + 48]> */
		/* 8207A820h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8207A820h case    6:*/		return 0x8207A824;
	}
	return 0x8207A824;
} // Block from 8207A808h-8207A824h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207A824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A824);
		  /* 8207A824h */ case    0:  		/* addi R1, R1, 192 */
		/* 8207A824h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8207A824h case    0:*/		return 0x8207A828;
		  /* 8207A828h */ case    1:  		/* b 92784 */
		/* 8207A828h case    1:*/		return 0x82091298;
		/* 8207A828h case    1:*/		return 0x8207A82C;
		  /* 8207A82Ch */ case    2:  		/* nop */
		/* 8207A82Ch case    2:*/		cpu::op::nop();
		/* 8207A82Ch case    2:*/		return 0x8207A830;
	}
	return 0x8207A830;
} // Block from 8207A824h-8207A830h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207A830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A830);
		  /* 8207A830h */ case    0:  		/* mfspr R12, LR */
		/* 8207A830h case    0:*/		regs.R12 = regs.LR;
		/* 8207A830h case    0:*/		return 0x8207A834;
		  /* 8207A834h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207A834h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207A834h case    1:*/		return 0x8207A838;
		  /* 8207A838h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207A838h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207A838h case    2:*/		return 0x8207A83C;
		  /* 8207A83Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207A83Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207A83Ch case    3:*/		return 0x8207A840;
		  /* 8207A840h */ case    4:  		/* stwu R1, <#[R1 - 176]> */
		/* 8207A840h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8207A840h case    4:*/		return 0x8207A844;
		  /* 8207A844h */ case    5:  		/* mr R31, R3 */
		/* 8207A844h case    5:*/		regs.R31 = regs.R3;
		/* 8207A844h case    5:*/		return 0x8207A848;
		  /* 8207A848h */ case    6:  		/* bl 56704 */
		/* 8207A848h case    6:*/		regs.LR = 0x8207A84C; return 0x820885C8;
		/* 8207A848h case    6:*/		return 0x8207A84C;
		  /* 8207A84Ch */ case    7:  		/* rlwinm. R11, R3, 0, 26, 26 */
		/* 8207A84Ch case    7:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R3);
		/* 8207A84Ch case    7:*/		return 0x8207A850;
		  /* 8207A850h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 8207A850h case    8:*/		if ( regs.CR[0].eq ) { return 0x8207A85C;  }
		/* 8207A850h case    8:*/		return 0x8207A854;
		  /* 8207A854h */ case    9:  		/* mr R3, R31 */
		/* 8207A854h case    9:*/		regs.R3 = regs.R31;
		/* 8207A854h case    9:*/		return 0x8207A858;
		  /* 8207A858h */ case   10:  		/* bl -9600 */
		/* 8207A858h case   10:*/		regs.LR = 0x8207A85C; return 0x820782D8;
		/* 8207A858h case   10:*/		return 0x8207A85C;
	}
	return 0x8207A85C;
} // Block from 8207A830h-8207A85Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207A85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A85C);
		  /* 8207A85Ch */ case    0:  		/* li R5, 60 */
		/* 8207A85Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x3C);
		/* 8207A85Ch case    0:*/		return 0x8207A860;
		  /* 8207A860h */ case    1:  		/* li R4, 0 */
		/* 8207A860h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207A860h case    1:*/		return 0x8207A864;
		  /* 8207A864h */ case    2:  		/* addi R3, R1, 84 */
		/* 8207A864h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 8207A864h case    2:*/		return 0x8207A868;
		  /* 8207A868h */ case    3:  		/* bl 92888 */
		/* 8207A868h case    3:*/		regs.LR = 0x8207A86C; return 0x82091340;
		/* 8207A868h case    3:*/		return 0x8207A86C;
		  /* 8207A86Ch */ case    4:  		/* lbz R11, <#[R31 + 11072]> */
		/* 8207A86Ch case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207A86Ch case    4:*/		return 0x8207A870;
		  /* 8207A870h */ case    5:  		/* lis R30, -32256 */
		/* 8207A870h case    5:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8200);
		/* 8207A870h case    5:*/		return 0x8207A874;
		  /* 8207A874h */ case    6:  		/* lwz R9, <#[R31 + 16968]> */
		/* 8207A874h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00004248) );
		/* 8207A874h case    6:*/		return 0x8207A878;
		  /* 8207A878h */ case    7:  		/* ori R11, R11, 32 */
		/* 8207A878h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8207A878h case    7:*/		return 0x8207A87C;
		  /* 8207A87Ch */ case    8:  		/* stw R31, <#[R1 + 108]> */
		/* 8207A87Ch case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207A87Ch case    8:*/		return 0x8207A880;
		  /* 8207A880h */ case    9:  		/* lis R8, -32248 */
		/* 8207A880h case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8208);
		/* 8207A880h case    9:*/		return 0x8207A884;
		  /* 8207A884h */ case   10:  		/* stb R11, <#[R31 + 11072]> */
		/* 8207A884h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207A884h case   10:*/		return 0x8207A888;
		  /* 8207A888h */ case   11:  		/* lis R11, -32249 */
		/* 8207A888h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8207);
		/* 8207A888h case   11:*/		return 0x8207A88C;
		  /* 8207A88Ch */ case   12:  		/* addi R8, R8, -29688 */
		/* 8207A88Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFF8C08);
		/* 8207A88Ch case   12:*/		return 0x8207A890;
		  /* 8207A890h */ case   13:  		/* lwz R10, <#[R30 + 1140]> */
		/* 8207A890h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000474) );
		/* 8207A890h case   13:*/		return 0x8207A894;
		  /* 8207A894h */ case   14:  		/* addi R11, R11, 32648 */
		/* 8207A894h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x7F88);
		/* 8207A894h case   14:*/		return 0x8207A898;
		  /* 8207A898h */ case   15:  		/* stw R9, <#[R1 + 80]> */
		/* 8207A898h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207A898h case   15:*/		return 0x8207A89C;
		  /* 8207A89Ch */ case   16:  		/* li R9, 21119 */
		/* 8207A89Ch case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x527F);
		/* 8207A89Ch case   16:*/		return 0x8207A8A0;
		  /* 8207A8A0h */ case   17:  		/* lis R7, -32249 */
		/* 8207A8A0h case   17:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8207);
		/* 8207A8A0h case   17:*/		return 0x8207A8A4;
		  /* 8207A8A4h */ case   18:  		/* stw R8, <#[R1 + 104]> */
		/* 8207A8A4h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000068) );
		/* 8207A8A4h case   18:*/		return 0x8207A8A8;
	}
	return 0x8207A8A8;
} // Block from 8207A85Ch-8207A8A8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207A8A8h
// Function '?ExecuteLowPriSubmission@D3D@@YAXPAVCXpsGlobal@1@PAVCDevice@1@KPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A8A8);
		  /* 8207A8A8h */ case    0:  		/* stw R9, <#[R1 + 84]> */
		/* 8207A8A8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8207A8A8h case    0:*/		return 0x8207A8AC;
		  /* 8207A8ACh */ case    1:  		/* li R9, 1 */
		/* 8207A8ACh case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8207A8ACh case    1:*/		return 0x8207A8B0;
		  /* 8207A8B0h */ case    2:  		/* lis R6, -32249 */
		/* 8207A8B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8207);
		/* 8207A8B0h case    2:*/		return 0x8207A8B4;
		  /* 8207A8B4h */ case    3:  		/* stw R11, <#[R1 + 136]> */
		/* 8207A8B4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 8207A8B4h case    3:*/		return 0x8207A8B8;
		  /* 8207A8B8h */ case    4:  		/* lis R5, -32248 */
		/* 8207A8B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8208);
		/* 8207A8B8h case    4:*/		return 0x8207A8BC;
		  /* 8207A8BCh */ case    5:  		/* stw R9, <#[R1 + 88]> */
		/* 8207A8BCh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207A8BCh case    5:*/		return 0x8207A8C0;
		  /* 8207A8C0h */ case    6:  		/* li R4, 4 */
		/* 8207A8C0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8207A8C0h case    6:*/		return 0x8207A8C4;
		  /* 8207A8C4h */ case    7:  		/* addi R11, R5, -25448 */
		/* 8207A8C4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xFFFF9C98);
		/* 8207A8C4h case    7:*/		return 0x8207A8C8;
		  /* 8207A8C8h */ case    8:  		/* addi R8, R7, 30760 */
		/* 8207A8C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R7,0x7828);
		/* 8207A8C8h case    8:*/		return 0x8207A8CC;
		  /* 8207A8CCh */ case    9:  		/* stw R4, <#[R1 + 92]> */
		/* 8207A8CCh case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207A8CCh case    9:*/		return 0x8207A8D0;
		  /* 8207A8D0h */ case   10:  		/* addi R9, R6, 30896 */
		/* 8207A8D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0x78B0);
		/* 8207A8D0h case   10:*/		return 0x8207A8D4;
		  /* 8207A8D4h */ case   11:  		/* stw R11, <#[R1 + 140]> */
		/* 8207A8D4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207A8D4h case   11:*/		return 0x8207A8D8;
		  /* 8207A8D8h */ case   12:  		/* stw R8, <#[R1 + 128]> */
		/* 8207A8D8h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 8207A8D8h case   12:*/		return 0x8207A8DC;
		  /* 8207A8DCh */ case   13:  		/* stw R9, <#[R1 + 132]> */
		/* 8207A8DCh case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8207A8DCh case   13:*/		return 0x8207A8E0;
		  /* 8207A8E0h */ case   14:  		/* lwz R11, <#[R10]> */
		/* 8207A8E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8207A8E0h case   14:*/		return 0x8207A8E4;
		  /* 8207A8E4h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8207A8E4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A8E4h case   15:*/		return 0x8207A8E8;
		  /* 8207A8E8h */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 8207A8E8h case   16:*/		if ( regs.CR[6].eq ) { return 0x8207A908;  }
		/* 8207A8E8h case   16:*/		return 0x8207A8EC;
		  /* 8207A8ECh */ case   17:  		/* lwz R11, <#[R11 + 24]> */
		/* 8207A8ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8207A8ECh case   17:*/		return 0x8207A8F0;
		  /* 8207A8F0h */ case   18:  		/* addi R4, R1, 80 */
		/* 8207A8F0h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207A8F0h case   18:*/		return 0x8207A8F4;
		  /* 8207A8F4h */ case   19:  		/* li R3, 82 */
		/* 8207A8F4h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x52);
		/* 8207A8F4h case   19:*/		return 0x8207A8F8;
		  /* 8207A8F8h */ case   20:  		/* mtspr CTR, R11 */
		/* 8207A8F8h case   20:*/		regs.CTR = regs.R11;
		/* 8207A8F8h case   20:*/		return 0x8207A8FC;
		  /* 8207A8FCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 8207A8FCh case   21:*/		if ( 1 ) { regs.LR = 0x8207A900; return (uint32)regs.CTR; }
		/* 8207A8FCh case   21:*/		return 0x8207A900;
		  /* 8207A900h */ case   22:  		/* lwz R10, <#[R30 + 1140]> */
		/* 8207A900h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000474) );
		/* 8207A900h case   22:*/		return 0x8207A904;
		  /* 8207A904h */ case   23:  		/* b 8 */
		/* 8207A904h case   23:*/		return 0x8207A90C;
		/* 8207A904h case   23:*/		return 0x8207A908;
	}
	return 0x8207A908;
} // Block from 8207A8A8h-8207A908h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207A908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A908);
		  /* 8207A908h */ case    0:  		/* li R3, 0 */
		/* 8207A908h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207A908h case    0:*/		return 0x8207A90C;
	}
	return 0x8207A90C;
} // Block from 8207A908h-8207A90Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A90C);
		  /* 8207A90Ch */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 8207A90Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207A90Ch case    0:*/		return 0x8207A910;
		  /* 8207A910h */ case    1:  		/* bc 4, CR6_EQ, 84 */
		/* 8207A910h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207A964;  }
		/* 8207A910h case    1:*/		return 0x8207A914;
		  /* 8207A914h */ case    2:  		/* lis R11, -32256 */
		/* 8207A914h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207A914h case    2:*/		return 0x8207A918;
		  /* 8207A918h */ case    3:  		/* lwz R11, <#[R11 + 1144]> */
		/* 8207A918h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000478) );
		/* 8207A918h case    3:*/		return 0x8207A91C;
		  /* 8207A91Ch */ case    4:  		/* lwz R9, <#[R11]> */
		/* 8207A91Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8207A91Ch case    4:*/		return 0x8207A920;
		  /* 8207A920h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 8207A920h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8207A920h case    5:*/		return 0x8207A924;
		  /* 8207A924h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 8207A924h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207A944;  }
		/* 8207A924h case    6:*/		return 0x8207A928;
		  /* 8207A928h */ case    7:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 8207A928h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 8207A928h case    7:*/		return 0x8207A92C;
		  /* 8207A92Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8207A92Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A92Ch case    8:*/		return 0x8207A930;
		  /* 8207A930h */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 8207A930h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207A964;  }
		/* 8207A930h case    9:*/		return 0x8207A934;
		  /* 8207A934h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 8207A934h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207A934h case   10:*/		return 0x8207A938;
		  /* 8207A938h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8207A938h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A938h case   11:*/		return 0x8207A93C;
		  /* 8207A93Ch */ case   12:  		/* bc 12, CR6_EQ, 40 */
		/* 8207A93Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8207A964;  }
		/* 8207A93Ch case   12:*/		return 0x8207A940;
		  /* 8207A940h */ case   13:  		/* b 20 */
		/* 8207A940h case   13:*/		return 0x8207A954;
		/* 8207A940h case   13:*/		return 0x8207A944;
	}
	return 0x8207A944;
} // Block from 8207A90Ch-8207A944h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207A944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A944);
		  /* 8207A944h */ case    0:  		/* lwz R11, <#[R10]> */
		/* 8207A944h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8207A944h case    0:*/		return 0x8207A948;
		  /* 8207A948h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8207A948h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207A948h case    1:*/		return 0x8207A94C;
		  /* 8207A94Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8207A94Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8207A964;  }
		/* 8207A94Ch case    2:*/		return 0x8207A950;
		  /* 8207A950h */ case    3:  		/* lwz R11, <#[R11 + 24]> */
		/* 8207A950h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8207A950h case    3:*/		return 0x8207A954;
	}
	return 0x8207A954;
} // Block from 8207A944h-8207A954h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207A954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A954);
		  /* 8207A954h */ case    0:  		/* li R3, 46 */
		/* 8207A954h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2E);
		/* 8207A954h case    0:*/		return 0x8207A958;
		  /* 8207A958h */ case    1:  		/* lwz R4, <#[R31 + 16968]> */
		/* 8207A958h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00004248) );
		/* 8207A958h case    1:*/		return 0x8207A95C;
		  /* 8207A95Ch */ case    2:  		/* mtspr CTR, R11 */
		/* 8207A95Ch case    2:*/		regs.CTR = regs.R11;
		/* 8207A95Ch case    2:*/		return 0x8207A960;
		  /* 8207A960h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8207A960h case    3:*/		if ( 1 ) { regs.LR = 0x8207A964; return (uint32)regs.CTR; }
		/* 8207A960h case    3:*/		return 0x8207A964;
	}
	return 0x8207A964;
} // Block from 8207A954h-8207A964h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207A964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A964);
		  /* 8207A964h */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 8207A964h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8207A964h case    0:*/		return 0x8207A968;
		  /* 8207A968h */ case    1:  		/* lbz R10, <#[R31 + 11072]> */
		/* 8207A968h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207A968h case    1:*/		return 0x8207A96C;
		  /* 8207A96Ch */ case    2:  		/* lwz R9, <#[R31 + 21944]> */
		/* 8207A96Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000055B8) );
		/* 8207A96Ch case    2:*/		return 0x8207A970;
		  /* 8207A970h */ case    3:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 8207A970h case    3:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 8207A970h case    3:*/		return 0x8207A974;
		  /* 8207A974h */ case    4:  		/* lwz R8, <#[R1 + 124]> */
		/* 8207A974h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207A974h case    4:*/		return 0x8207A978;
		  /* 8207A978h */ case    5:  		/* andi. R10, R10, 223 */
		/* 8207A978h case    5:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R10,0xDF);
		/* 8207A978h case    5:*/		return 0x8207A97C;
		  /* 8207A97Ch */ case    6:  		/* rlwimi R9, R11, 30, 1, 1 */
		/* 8207A97Ch case    6:*/		cpu::op::rlwimi<0,30,1,1>(regs,&regs.R9,regs.R11);
		/* 8207A97Ch case    6:*/		return 0x8207A980;
		  /* 8207A980h */ case    7:  		/* stb R10, <#[R31 + 11072]> */
		/* 8207A980h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207A980h case    7:*/		return 0x8207A984;
		  /* 8207A984h */ case    8:  		/* stw R8, <#[R31 + 21948]> */
		/* 8207A984h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000055BC) );
		/* 8207A984h case    8:*/		return 0x8207A988;
		  /* 8207A988h */ case    9:  		/* stw R9, <#[R31 + 21944]> */
		/* 8207A988h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000055B8) );
		/* 8207A988h case    9:*/		return 0x8207A98C;
		  /* 8207A98Ch */ case   10:  		/* addi R1, R1, 176 */
		/* 8207A98Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8207A98Ch case   10:*/		return 0x8207A990;
		  /* 8207A990h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207A990h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207A990h case   11:*/		return 0x8207A994;
		  /* 8207A994h */ case   12:  		/* mtspr LR, R12 */
		/* 8207A994h case   12:*/		regs.LR = regs.R12;
		/* 8207A994h case   12:*/		return 0x8207A998;
		  /* 8207A998h */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 8207A998h case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207A998h case   13:*/		return 0x8207A99C;
		  /* 8207A99Ch */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 8207A99Ch case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207A99Ch case   14:*/		return 0x8207A9A0;
		  /* 8207A9A0h */ case   15:  		/* bclr 20, CR0_LT */
		/* 8207A9A0h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207A9A0h case   15:*/		return 0x8207A9A4;
	}
	return 0x8207A9A4;
} // Block from 8207A964h-8207A9A4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207A9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A9A4);
		  /* 8207A9A4h */ case    0:  		/* nop */
		/* 8207A9A4h case    0:*/		cpu::op::nop();
		/* 8207A9A4h case    0:*/		return 0x8207A9A8;
	}
	return 0x8207A9A8;
} // Block from 8207A9A4h-8207A9A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207A9A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A9A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A9A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A9A8);
		  /* 8207A9A8h */ case    0:  		/* mfspr R12, LR */
		/* 8207A9A8h case    0:*/		regs.R12 = regs.LR;
		/* 8207A9A8h case    0:*/		return 0x8207A9AC;
		  /* 8207A9ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207A9ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207A9ACh case    1:*/		return 0x8207A9B0;
		  /* 8207A9B0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207A9B0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207A9B0h case    2:*/		return 0x8207A9B4;
		  /* 8207A9B4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207A9B4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207A9B4h case    3:*/		return 0x8207A9B8;
		  /* 8207A9B8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207A9B8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207A9B8h case    4:*/		return 0x8207A9BC;
		  /* 8207A9BCh */ case    5:  		/* lwz R11, <#[R3 + 56]> */
		/* 8207A9BCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8207A9BCh case    5:*/		return 0x8207A9C0;
		  /* 8207A9C0h */ case    6:  		/* mr R31, R3 */
		/* 8207A9C0h case    6:*/		regs.R31 = regs.R3;
		/* 8207A9C0h case    6:*/		return 0x8207A9C4;
		  /* 8207A9C4h */ case    7:  		/* lwz R3, <#[R3 + 48]> */
		/* 8207A9C4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 8207A9C4h case    7:*/		return 0x8207A9C8;
		  /* 8207A9C8h */ case    8:  		/* mr R30, R4 */
		/* 8207A9C8h case    8:*/		regs.R30 = regs.R4;
		/* 8207A9C8h case    8:*/		return 0x8207A9CC;
		  /* 8207A9CCh */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 8207A9CCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207A9CCh case    9:*/		return 0x8207A9D0;
		  /* 8207A9D0h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 8207A9D0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8207A9DC;  }
		/* 8207A9D0h case   10:*/		return 0x8207A9D4;
		  /* 8207A9D4h */ case   11:  		/* mr R3, R31 */
		/* 8207A9D4h case   11:*/		regs.R3 = regs.R31;
		/* 8207A9D4h case   11:*/		return 0x8207A9D8;
		  /* 8207A9D8h */ case   12:  		/* bl -26832 */
		/* 8207A9D8h case   12:*/		regs.LR = 0x8207A9DC; return 0x82074108;
		/* 8207A9D8h case   12:*/		return 0x8207A9DC;
	}
	return 0x8207A9DC;
} // Block from 8207A9A8h-8207A9DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207A9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207A9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207A9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207A9DC);
		  /* 8207A9DCh */ case    0:  		/* lis R11, -16382 */
		/* 8207A9DCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC002);
		/* 8207A9DCh case    0:*/		return 0x8207A9E0;
		  /* 8207A9E0h */ case    1:  		/* lis R10, -32768 */
		/* 8207A9E0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8207A9E0h case    1:*/		return 0x8207A9E4;
		  /* 8207A9E4h */ case    2:  		/* ori R9, R11, 22528 */
		/* 8207A9E4h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x5800);
		/* 8207A9E4h case    2:*/		return 0x8207A9E8;
		  /* 8207A9E8h */ case    3:  		/* rlwinm R11, R30, 12, 20, 31 */
		/* 8207A9E8h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R30);
		/* 8207A9E8h case    3:*/		return 0x8207A9EC;
		  /* 8207A9ECh */ case    4:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207A9ECh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207A9ECh case    4:*/		return 0x8207A9F0;
		  /* 8207A9F0h */ case    5:  		/* ori R9, R10, 3 */
		/* 8207A9F0h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x3);
		/* 8207A9F0h case    5:*/		return 0x8207A9F4;
		  /* 8207A9F4h */ case    6:  		/* addi R11, R11, 512 */
		/* 8207A9F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8207A9F4h case    6:*/		return 0x8207A9F8;
		  /* 8207A9F8h */ case    7:  		/* rlwinm R10, R30, 0, 3, 31 */
		/* 8207A9F8h case    7:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R30);
		/* 8207A9F8h case    7:*/		return 0x8207A9FC;
		  /* 8207A9FCh */ case    8:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207A9FCh case    8:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207A9FCh case    8:*/		return 0x8207AA00;
		  /* 8207AA00h */ case    9:  		/* lis R8, -8531 */
		/* 8207AA00h case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFDEAD);
		/* 8207AA00h case    9:*/		return 0x8207AA04;
		  /* 8207AA04h */ case   10:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207AA04h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AA04h case   10:*/		return 0x8207AA08;
		  /* 8207AA08h */ case   11:  		/* add R11, R11, R10 */
		/* 8207AA08h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207AA08h case   11:*/		return 0x8207AA0C;
		  /* 8207AA0Ch */ case   12:  		/* ori R10, R8, 48879 */
		/* 8207AA0Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R8,0xBEEF);
		/* 8207AA0Ch case   12:*/		return 0x8207AA10;
		  /* 8207AA10h */ case   13:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207AA10h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AA10h case   13:*/		return 0x8207AA14;
		  /* 8207AA14h */ case   14:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207AA14h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AA14h case   14:*/		return 0x8207AA18;
		  /* 8207AA18h */ case   15:  		/* stw R3, <#[R31 + 48]> */
		/* 8207AA18h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8207AA18h case   15:*/		return 0x8207AA1C;
		  /* 8207AA1Ch */ case   16:  		/* addi R1, R1, 112 */
		/* 8207AA1Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207AA1Ch case   16:*/		return 0x8207AA20;
		  /* 8207AA20h */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207AA20h case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207AA20h case   17:*/		return 0x8207AA24;
		  /* 8207AA24h */ case   18:  		/* mtspr LR, R12 */
		/* 8207AA24h case   18:*/		regs.LR = regs.R12;
		/* 8207AA24h case   18:*/		return 0x8207AA28;
		  /* 8207AA28h */ case   19:  		/* ld R30, <#[R1 - 24]> */
		/* 8207AA28h case   19:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207AA28h case   19:*/		return 0x8207AA2C;
		  /* 8207AA2Ch */ case   20:  		/* ld R31, <#[R1 - 16]> */
		/* 8207AA2Ch case   20:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207AA2Ch case   20:*/		return 0x8207AA30;
		  /* 8207AA30h */ case   21:  		/* bclr 20, CR0_LT */
		/* 8207AA30h case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207AA30h case   21:*/		return 0x8207AA34;
	}
	return 0x8207AA34;
} // Block from 8207A9DCh-8207AA34h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8207AA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AA34);
		  /* 8207AA34h */ case    0:  		/* nop */
		/* 8207AA34h case    0:*/		cpu::op::nop();
		/* 8207AA34h case    0:*/		return 0x8207AA38;
	}
	return 0x8207AA38;
} // Block from 8207AA34h-8207AA38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207AA38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AA38);
		  /* 8207AA38h */ case    0:  		/* mfspr R12, LR */
		/* 8207AA38h case    0:*/		regs.R12 = regs.LR;
		/* 8207AA38h case    0:*/		return 0x8207AA3C;
		  /* 8207AA3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207AA3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207AA3Ch case    1:*/		return 0x8207AA40;
		  /* 8207AA40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207AA40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207AA40h case    2:*/		return 0x8207AA44;
		  /* 8207AA44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207AA44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207AA44h case    3:*/		return 0x8207AA48;
		  /* 8207AA48h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207AA48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207AA48h case    4:*/		return 0x8207AA4C;
		  /* 8207AA4Ch */ case    5:  		/* lwz R11, <#[R3 + 22056]> */
		/* 8207AA4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005628) );
		/* 8207AA4Ch case    5:*/		return 0x8207AA50;
		  /* 8207AA50h */ case    6:  		/* mr R31, R3 */
		/* 8207AA50h case    6:*/		regs.R31 = regs.R3;
		/* 8207AA50h case    6:*/		return 0x8207AA54;
		  /* 8207AA54h */ case    7:  		/* cmplwi CR6, R11, 2 */
		/* 8207AA54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8207AA54h case    7:*/		return 0x8207AA58;
		  /* 8207AA58h */ case    8:  		/* bc 4, CR6_EQ, 160 */
		/* 8207AA58h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8207AAF8;  }
		/* 8207AA58h case    8:*/		return 0x8207AA5C;
		  /* 8207AA5Ch */ case    9:  		/* lwz R11, <#[R3 + 22064]> */
		/* 8207AA5Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005630) );
		/* 8207AA5Ch case    9:*/		return 0x8207AA60;
		  /* 8207AA60h */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 8207AA60h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8207AA60h case   10:*/		return 0x8207AA64;
		  /* 8207AA64h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 8207AA64h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8207AA70;  }
		/* 8207AA64h case   11:*/		return 0x8207AA68;
		  /* 8207AA68h */ case   12:  		/* li R11, 0 */
		/* 8207AA68h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207AA68h case   12:*/		return 0x8207AA6C;
		  /* 8207AA6Ch */ case   13:  		/* b 8 */
		/* 8207AA6Ch case   13:*/		return 0x8207AA74;
		/* 8207AA6Ch case   13:*/		return 0x8207AA70;
	}
	return 0x8207AA70;
} // Block from 8207AA38h-8207AA70h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207AA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AA70);
		  /* 8207AA70h */ case    0:  		/* addi R11, R11, 1 */
		/* 8207AA70h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207AA70h case    0:*/		return 0x8207AA74;
	}
	return 0x8207AA74;
} // Block from 8207AA70h-8207AA74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207AA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AA74);
		  /* 8207AA74h */ case    0:  		/* lwz R10, <#[R31 + 22060]> */
		/* 8207AA74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000562C) );
		/* 8207AA74h case    0:*/		return 0x8207AA78;
		  /* 8207AA78h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8207AA78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207AA78h case    1:*/		return 0x8207AA7C;
		  /* 8207AA7Ch */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 8207AA7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8207AAF8;  }
		/* 8207AA7Ch case    2:*/		return 0x8207AA80;
		  /* 8207AA80h */ case    3:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 8207AA80h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 8207AA80h case    3:*/		return 0x8207AA84;
		  /* 8207AA84h */ case    4:  		/* cmpwi CR6, R4, 0 */
		/* 8207AA84h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 8207AA84h case    4:*/		return 0x8207AA88;
		  /* 8207AA88h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8207AA88h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207AA90;  }
		/* 8207AA88h case    5:*/		return 0x8207AA8C;
		  /* 8207AA8Ch */ case    6:  		/* addi R30, R30, 1 */
		/* 8207AA8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207AA8Ch case    6:*/		return 0x8207AA90;
	}
	return 0x8207AA90;
} // Block from 8207AA74h-8207AA90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207AA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AA90);
		  /* 8207AA90h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8207AA90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8207AA90h case    0:*/		return 0x8207AA94;
		  /* 8207AA94h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8207AA94h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8207AA94h case    1:*/		return 0x8207AA98;
		  /* 8207AA98h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 8207AA98h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207AA98h case    2:*/		return 0x8207AA9C;
		  /* 8207AA9Ch */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 8207AA9Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207AAA8;  }
		/* 8207AA9Ch case    3:*/		return 0x8207AAA0;
		  /* 8207AAA0h */ case    4:  		/* mr R3, R31 */
		/* 8207AAA0h case    4:*/		regs.R3 = regs.R31;
		/* 8207AAA0h case    4:*/		return 0x8207AAA4;
		  /* 8207AAA4h */ case    5:  		/* bl -27036 */
		/* 8207AAA4h case    5:*/		regs.LR = 0x8207AAA8; return 0x82074108;
		/* 8207AAA4h case    5:*/		return 0x8207AAA8;
	}
	return 0x8207AAA8;
} // Block from 8207AA90h-8207AAA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207AAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AAA8);
		  /* 8207AAA8h */ case    0:  		/* lis R11, -16382 */
		/* 8207AAA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC002);
		/* 8207AAA8h case    0:*/		return 0x8207AAAC;
		  /* 8207AAACh */ case    1:  		/* lis R10, -32768 */
		/* 8207AAACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8207AAACh case    1:*/		return 0x8207AAB0;
		  /* 8207AAB0h */ case    2:  		/* ori R11, R11, 22528 */
		/* 8207AAB0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5800);
		/* 8207AAB0h case    2:*/		return 0x8207AAB4;
		  /* 8207AAB4h */ case    3:  		/* ori R10, R10, 3 */
		/* 8207AAB4h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8207AAB4h case    3:*/		return 0x8207AAB8;
		  /* 8207AAB8h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207AAB8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AAB8h case    4:*/		return 0x8207AABC;
		  /* 8207AABCh */ case    5:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 8207AABCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 8207AABCh case    5:*/		return 0x8207AAC0;
		  /* 8207AAC0h */ case    6:  		/* lis R9, -8531 */
		/* 8207AAC0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFDEAD);
		/* 8207AAC0h case    6:*/		return 0x8207AAC4;
		  /* 8207AAC4h */ case    7:  		/* ori R8, R9, 48879 */
		/* 8207AAC4h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R9,0xBEEF);
		/* 8207AAC4h case    7:*/		return 0x8207AAC8;
		  /* 8207AAC8h */ case    8:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207AAC8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AAC8h case    8:*/		return 0x8207AACC;
		  /* 8207AACCh */ case    9:  		/* lwz R10, <#[R31 + 22052]> */
		/* 8207AACCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005624) );
		/* 8207AACCh case    9:*/		return 0x8207AAD0;
		  /* 8207AAD0h */ case   10:  		/* add R11, R10, R11 */
		/* 8207AAD0h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207AAD0h case   10:*/		return 0x8207AAD4;
		  /* 8207AAD4h */ case   11:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 8207AAD4h case   11:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 8207AAD4h case   11:*/		return 0x8207AAD8;
		  /* 8207AAD8h */ case   12:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 8207AAD8h case   12:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 8207AAD8h case   12:*/		return 0x8207AADC;
		  /* 8207AADCh */ case   13:  		/* addi R11, R9, 512 */
		/* 8207AADCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x200);
		/* 8207AADCh case   13:*/		return 0x8207AAE0;
		  /* 8207AAE0h */ case   14:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207AAE0h case   14:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207AAE0h case   14:*/		return 0x8207AAE4;
		  /* 8207AAE4h */ case   15:  		/* add R11, R11, R10 */
		/* 8207AAE4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207AAE4h case   15:*/		return 0x8207AAE8;
		  /* 8207AAE8h */ case   16:  		/* ori R11, R11, 2 */
		/* 8207AAE8h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8207AAE8h case   16:*/		return 0x8207AAEC;
		  /* 8207AAECh */ case   17:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207AAECh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AAECh case   17:*/		return 0x8207AAF0;
		  /* 8207AAF0h */ case   18:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207AAF0h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207AAF0h case   18:*/		return 0x8207AAF4;
		  /* 8207AAF4h */ case   19:  		/* stw R3, <#[R31 + 48]> */
		/* 8207AAF4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8207AAF4h case   19:*/		return 0x8207AAF8;
	}
	return 0x8207AAF8;
} // Block from 8207AAA8h-8207AAF8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207AAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AAF8);
		  /* 8207AAF8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207AAF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207AAF8h case    0:*/		return 0x8207AAFC;
		  /* 8207AAFCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207AAFCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207AAFCh case    1:*/		return 0x8207AB00;
		  /* 8207AB00h */ case    2:  		/* mtspr LR, R12 */
		/* 8207AB00h case    2:*/		regs.LR = regs.R12;
		/* 8207AB00h case    2:*/		return 0x8207AB04;
		  /* 8207AB04h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207AB04h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207AB04h case    3:*/		return 0x8207AB08;
		  /* 8207AB08h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207AB08h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207AB08h case    4:*/		return 0x8207AB0C;
		  /* 8207AB0Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207AB0Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207AB0Ch case    5:*/		return 0x8207AB10;
	}
	return 0x8207AB10;
} // Block from 8207AAF8h-8207AB10h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207AB10h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AB10);
		  /* 8207AB10h */ case    0:  		/* mfspr R12, LR */
		/* 8207AB10h case    0:*/		regs.R12 = regs.LR;
		/* 8207AB10h case    0:*/		return 0x8207AB14;
		  /* 8207AB14h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207AB14h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207AB14h case    1:*/		return 0x8207AB18;
		  /* 8207AB18h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207AB18h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207AB18h case    2:*/		return 0x8207AB1C;
		  /* 8207AB1Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207AB1Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207AB1Ch case    3:*/		return 0x8207AB20;
		  /* 8207AB20h */ case    4:  		/* stwu R1, <#[R1 - 368]> */
		/* 8207AB20h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 8207AB20h case    4:*/		return 0x8207AB24;
		  /* 8207AB24h */ case    5:  		/* lwz R10, <#[R3 + 17128]> */
		/* 8207AB24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000042E8) );
		/* 8207AB24h case    5:*/		return 0x8207AB28;
		  /* 8207AB28h */ case    6:  		/* mr R31, R3 */
		/* 8207AB28h case    6:*/		regs.R31 = regs.R3;
		/* 8207AB28h case    6:*/		return 0x8207AB2C;
		  /* 8207AB2Ch */ case    7:  		/* li R30, 0 */
		/* 8207AB2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207AB2Ch case    7:*/		return 0x8207AB30;
		  /* 8207AB30h */ case    8:  		/* rlwinm. R11, R10, 0, 21, 21 */
		/* 8207AB30h case    8:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R10);
		/* 8207AB30h case    8:*/		return 0x8207AB34;
		  /* 8207AB34h */ case    9:  		/* bc 12, CR0_EQ, 364 */
		/* 8207AB34h case    9:*/		if ( regs.CR[0].eq ) { return 0x8207ACA0;  }
		/* 8207AB34h case    9:*/		return 0x8207AB38;
		  /* 8207AB38h */ case   10:  		/* lis R11, -32256 */
		/* 8207AB38h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207AB38h case   10:*/		return 0x8207AB3C;
		  /* 8207AB3Ch */ case   11:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8207AB3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8207AB3Ch case   11:*/		return 0x8207AB40;
		  /* 8207AB40h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8207AB40h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207AB40h case   12:*/		return 0x8207AB44;
		  /* 8207AB44h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8207AB44h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207AB44h case   13:*/		return 0x8207AB48;
		  /* 8207AB48h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 8207AB48h case   14:*/		if ( regs.CR[6].eq ) { return 0x8207AB54;  }
		/* 8207AB48h case   14:*/		return 0x8207AB4C;
		  /* 8207AB4Ch */ case   15:  		/* lwz R11, <#[R11 + 32]> */
		/* 8207AB4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8207AB4Ch case   15:*/		return 0x8207AB50;
		  /* 8207AB50h */ case   16:  		/* b 8 */
		/* 8207AB50h case   16:*/		return 0x8207AB58;
		/* 8207AB50h case   16:*/		return 0x8207AB54;
	}
	return 0x8207AB54;
} // Block from 8207AB10h-8207AB54h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207AB54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AB54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AB54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AB54);
		  /* 8207AB54h */ case    0:  		/* mr R11, R30 */
		/* 8207AB54h case    0:*/		regs.R11 = regs.R30;
		/* 8207AB54h case    0:*/		return 0x8207AB58;
	}
	return 0x8207AB58;
} // Block from 8207AB54h-8207AB58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207AB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AB58);
		  /* 8207AB58h */ case    0:  		/* lwz R11, <#[R11 + 16]> */
		/* 8207AB58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8207AB58h case    0:*/		return 0x8207AB5C;
		  /* 8207AB5Ch */ case    1:  		/* mtspr CTR, R11 */
		/* 8207AB5Ch case    1:*/		regs.CTR = regs.R11;
		/* 8207AB5Ch case    1:*/		return 0x8207AB60;
		  /* 8207AB60h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 8207AB60h case    2:*/		if ( 1 ) { regs.LR = 0x8207AB64; return (uint32)regs.CTR; }
		/* 8207AB60h case    2:*/		return 0x8207AB64;
		  /* 8207AB64h */ case    3:  		/* stw R3, <#[R31 + 17132]> */
		/* 8207AB64h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000042EC) );
		/* 8207AB64h case    3:*/		return 0x8207AB68;
		  /* 8207AB68h */ case    4:  		/* stw R30, <#[R31 + 17128]> */
		/* 8207AB68h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000042E8) );
		/* 8207AB68h case    4:*/		return 0x8207AB6C;
		  /* 8207AB6Ch */ case    5:  		/* lwz R11, <#[R31 + 21992]> */
		/* 8207AB6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055E8) );
		/* 8207AB6Ch case    5:*/		return 0x8207AB70;
		  /* 8207AB70h */ case    6:  		/* lwz R10, <#[R31 + 21988]> */
		/* 8207AB70h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000055E4) );
		/* 8207AB70h case    6:*/		return 0x8207AB74;
		  /* 8207AB74h */ case    7:  		/* stw R11, <#[R1 + 80]> */
		/* 8207AB74h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207AB74h case    7:*/		return 0x8207AB78;
		  /* 8207AB78h */ case    8:  		/* stw R10, <#[R1 + 84]> */
		/* 8207AB78h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8207AB78h case    8:*/		return 0x8207AB7C;
		  /* 8207AB7Ch */ case    9:  		/* mftb R11, 12, 8 */
		/* 8207AB7Ch case    9:*/		cpu::op::mftb<0>(regs,&regs.R11,0xC,0x8);
		/* 8207AB7Ch case    9:*/		return 0x8207AB80;
		  /* 8207AB80h */ case   10:  		/* ld R10, <#[R1 + 80]> */
		/* 8207AB80h case   10:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207AB80h case   10:*/		return 0x8207AB84;
		  /* 8207AB84h */ case   11:  		/* std R11, <#[R1 + 80]> */
		/* 8207AB84h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207AB84h case   11:*/		return 0x8207AB88;
	}
	return 0x8207AB88;
} // Block from 8207AB58h-8207AB88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207AB88h
// Function '?HandleRequiredLowPriWork@D3D@@YAXPAVCXpsGlobal@1@PAVCDevice@1@PAUQueueRecord_YieldPointParams@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AB88);
		  /* 8207AB88h */ case    0:  		/* cmpdi CR6, R10, 0 */
		/* 8207AB88h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R10,0x00000000);
		/* 8207AB88h case    0:*/		return 0x8207AB8C;
		  /* 8207AB8Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8207AB8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8207ABA0;  }
		/* 8207AB8Ch case    1:*/		return 0x8207AB90;
		  /* 8207AB90h */ case    2:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8207AB90h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8207AB90h case    2:*/		return 0x8207AB94;
		  /* 8207AB94h */ case    3:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8207AB94h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8207AB94h case    3:*/		return 0x8207AB98;
		  /* 8207AB98h */ case    4:  		/* subf R11, R10, R11 */
		/* 8207AB98h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207AB98h case    4:*/		return 0x8207AB9C;
		  /* 8207AB9Ch */ case    5:  		/* stw R11, <#[R31 + 21984]> */
		/* 8207AB9Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055E0) );
		/* 8207AB9Ch case    5:*/		return 0x8207ABA0;
	}
	return 0x8207ABA0;
} // Block from 8207AB88h-8207ABA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207ABA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ABA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ABA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ABA0);
		  /* 8207ABA0h */ case    0:  		/* ld R8, <#[R31 + 22008]> */
		/* 8207ABA0h case    0:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R31 + 0x000055F8) );
		/* 8207ABA0h case    0:*/		return 0x8207ABA4;
		  /* 8207ABA4h */ case    1:  		/* ld R10, <#[R31 + 22016]> */
		/* 8207ABA4h case    1:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x00005600) );
		/* 8207ABA4h case    1:*/		return 0x8207ABA8;
		  /* 8207ABA8h */ case    2:  		/* lwz R9, <#[R1 + 80]> */
		/* 8207ABA8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207ABA8h case    2:*/		return 0x8207ABAC;
		  /* 8207ABACh */ case    3:  		/* lwz R7, <#[R1 + 84]> */
		/* 8207ABACh case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 8207ABACh case    3:*/		return 0x8207ABB0;
		  /* 8207ABB0h */ case    4:  		/* lwz R11, <#[R31 + 22056]> */
		/* 8207ABB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005628) );
		/* 8207ABB0h case    4:*/		return 0x8207ABB4;
		  /* 8207ABB4h */ case    5:  		/* stw R8, <#[R31 + 22024]> */
		/* 8207ABB4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00005608) );
		/* 8207ABB4h case    5:*/		return 0x8207ABB8;
		  /* 8207ABB8h */ case    6:  		/* std R30, <#[R31 + 22008]> */
		/* 8207ABB8h case    6:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R31 + 0x000055F8) );
		/* 8207ABB8h case    6:*/		return 0x8207ABBC;
		  /* 8207ABBCh */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 8207ABBCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8207ABBCh case    7:*/		return 0x8207ABC0;
		  /* 8207ABC0h */ case    8:  		/* stw R9, <#[R31 + 21992]> */
		/* 8207ABC0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000055E8) );
		/* 8207ABC0h case    8:*/		return 0x8207ABC4;
		  /* 8207ABC4h */ case    9:  		/* stw R7, <#[R31 + 21988]> */
		/* 8207ABC4h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x000055E4) );
		/* 8207ABC4h case    9:*/		return 0x8207ABC8;
		  /* 8207ABC8h */ case   10:  		/* stw R10, <#[R31 + 22028]> */
		/* 8207ABC8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000560C) );
		/* 8207ABC8h case   10:*/		return 0x8207ABCC;
		  /* 8207ABCCh */ case   11:  		/* std R30, <#[R31 + 22016]> */
		/* 8207ABCCh case   11:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R31 + 0x00005600) );
		/* 8207ABCCh case   11:*/		return 0x8207ABD0;
		  /* 8207ABD0h */ case   12:  		/* bc 4, CR6_EQ, 316 */
		/* 8207ABD0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8207AD0C;  }
		/* 8207ABD0h case   12:*/		return 0x8207ABD4;
		  /* 8207ABD4h */ case   13:  		/* mr R3, R31 */
		/* 8207ABD4h case   13:*/		regs.R3 = regs.R31;
		/* 8207ABD4h case   13:*/		return 0x8207ABD8;
		  /* 8207ABD8h */ case   14:  		/* bl -7216 */
		/* 8207ABD8h case   14:*/		regs.LR = 0x8207ABDC; return 0x82078FA8;
		/* 8207ABD8h case   14:*/		return 0x8207ABDC;
		  /* 8207ABDCh */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8207ABDCh case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8207ABDCh case   15:*/		return 0x8207ABE0;
		  /* 8207ABE0h */ case   16:  		/* bc 12, CR0_EQ, 292 */
		/* 8207ABE0h case   16:*/		if ( regs.CR[0].eq ) { return 0x8207AD04;  }
		/* 8207ABE0h case   16:*/		return 0x8207ABE4;
		  /* 8207ABE4h */ case   17:  		/* li R5, 240 */
		/* 8207ABE4h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0xF0);
		/* 8207ABE4h case   17:*/		return 0x8207ABE8;
		  /* 8207ABE8h */ case   18:  		/* li R4, 0 */
		/* 8207ABE8h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207ABE8h case   18:*/		return 0x8207ABEC;
		  /* 8207ABECh */ case   19:  		/* addi R3, R1, 96 */
		/* 8207ABECh case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8207ABECh case   19:*/		return 0x8207ABF0;
		  /* 8207ABF0h */ case   20:  		/* bl 91984 */
		/* 8207ABF0h case   20:*/		regs.LR = 0x8207ABF4; return 0x82091340;
		/* 8207ABF0h case   20:*/		return 0x8207ABF4;
		  /* 8207ABF4h */ case   21:  		/* li R11, 19 */
		/* 8207ABF4h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x13);
		/* 8207ABF4h case   21:*/		return 0x8207ABF8;
		  /* 8207ABF8h */ case   22:  		/* li R9, 8 */
		/* 8207ABF8h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 8207ABF8h case   22:*/		return 0x8207ABFC;
		  /* 8207ABFCh */ case   23:  		/* lbz R10, <#[R31 + 11070]> */
		/* 8207ABFCh case   23:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207ABFCh case   23:*/		return 0x8207AC00;
		  /* 8207AC00h */ case   24:  		/* stw R11, <#[R1 + 312]> */
		/* 8207AC00h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000138) );
		/* 8207AC00h case   24:*/		return 0x8207AC04;
		  /* 8207AC04h */ case   25:  		/* li R8, 13 */
		/* 8207AC04h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0xD);
		/* 8207AC04h case   25:*/		return 0x8207AC08;
		  /* 8207AC08h */ case   26:  		/* stw R11, <#[R1 + 316]> */
		/* 8207AC08h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 8207AC08h case   26:*/		return 0x8207AC0C;
		  /* 8207AC0Ch */ case   27:  		/* li R11, 1 */
		/* 8207AC0Ch case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207AC0Ch case   27:*/		return 0x8207AC10;
		  /* 8207AC10h */ case   28:  		/* stw R9, <#[R1 + 156]> */
		/* 8207AC10h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000009C) );
		/* 8207AC10h case   28:*/		return 0x8207AC14;
		  /* 8207AC14h */ case   29:  		/* li R9, 37 */
		/* 8207AC14h case   29:*/		cpu::op::li<0>(regs,&regs.R9,0x25);
		/* 8207AC14h case   29:*/		return 0x8207AC18;
		  /* 8207AC18h */ case   30:  		/* stw R8, <#[R1 + 160]> */
		/* 8207AC18h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 8207AC18h case   30:*/		return 0x8207AC1C;
		  /* 8207AC1Ch */ case   31:  		/* li R8, 6 */
		/* 8207AC1Ch case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 8207AC1Ch case   31:*/		return 0x8207AC20;
		  /* 8207AC20h */ case   32:  		/* stw R11, <#[R1 + 100]> */
		/* 8207AC20h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8207AC20h case   32:*/		return 0x8207AC24;
		  /* 8207AC24h */ case   33:  		/* li R11, 25 */
		/* 8207AC24h case   33:*/		cpu::op::li<0>(regs,&regs.R11,0x19);
		/* 8207AC24h case   33:*/		return 0x8207AC28;
		  /* 8207AC28h */ case   34:  		/* stw R9, <#[R1 + 164]> */
		/* 8207AC28h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000A4) );
		/* 8207AC28h case   34:*/		return 0x8207AC2C;
		  /* 8207AC2Ch */ case   35:  		/* li R9, 26 */
		/* 8207AC2Ch case   35:*/		cpu::op::li<0>(regs,&regs.R9,0x1A);
		/* 8207AC2Ch case   35:*/		return 0x8207AC30;
		  /* 8207AC30h */ case   36:  		/* stw R8, <#[R1 + 320]> */
		/* 8207AC30h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000140) );
		/* 8207AC30h case   36:*/		return 0x8207AC34;
		  /* 8207AC34h */ case   37:  		/* li R8, 200 */
		/* 8207AC34h case   37:*/		cpu::op::li<0>(regs,&regs.R8,0xC8);
		/* 8207AC34h case   37:*/		return 0x8207AC38;
		  /* 8207AC38h */ case   38:  		/* stw R11, <#[R1 + 324]> */
		/* 8207AC38h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000144) );
		/* 8207AC38h case   38:*/		return 0x8207AC3C;
		  /* 8207AC3Ch */ case   39:  		/* li R11, 30 */
		/* 8207AC3Ch case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x1E);
		/* 8207AC3Ch case   39:*/		return 0x8207AC40;
		  /* 8207AC40h */ case   40:  		/* stw R30, <#[R1 + 96]> */
		/* 8207AC40h case   40:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 8207AC40h case   40:*/		return 0x8207AC44;
		  /* 8207AC44h */ case   41:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8207AC44h case   41:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8207AC44h case   41:*/		return 0x8207AC48;
		  /* 8207AC48h */ case   42:  		/* stw R9, <#[R1 + 328]> */
		/* 8207AC48h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000148) );
		/* 8207AC48h case   42:*/		return 0x8207AC4C;
		  /* 8207AC4Ch */ case   43:  		/* stw R8, <#[R1 + 212]> */
		/* 8207AC4Ch case   43:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000D4) );
		/* 8207AC4Ch case   43:*/		return 0x8207AC50;
		  /* 8207AC50h */ case   44:  		/* stw R11, <#[R1 + 140]> */
		/* 8207AC50h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207AC50h case   44:*/		return 0x8207AC54;
		  /* 8207AC54h */ case   45:  		/* bc 4, CR0_EQ, 16 */
		/* 8207AC54h case   45:*/		if ( !regs.CR[0].eq ) { return 0x8207AC64;  }
		/* 8207AC54h case   45:*/		return 0x8207AC58;
		  /* 8207AC58h */ case   46:  		/* li R4, 1 */
		/* 8207AC58h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207AC58h case   46:*/		return 0x8207AC5C;
		  /* 8207AC5Ch */ case   47:  		/* mr R3, R31 */
		/* 8207AC5Ch case   47:*/		regs.R3 = regs.R31;
		/* 8207AC5Ch case   47:*/		return 0x8207AC60;
		  /* 8207AC60h */ case   48:  		/* bl -22584 */
		/* 8207AC60h case   48:*/		regs.LR = 0x8207AC64; return 0x82075428;
		/* 8207AC60h case   48:*/		return 0x8207AC64;
	}
	return 0x8207AC64;
} // Block from 8207ABA0h-8207AC64h (49 instructions)

//////////////////////////////////////////////////////
// Block at 8207AC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AC64);
		  /* 8207AC64h */ case    0:  		/* li R5, 0 */
		/* 8207AC64h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207AC64h case    0:*/		return 0x8207AC68;
		  /* 8207AC68h */ case    1:  		/* addi R4, R1, 96 */
		/* 8207AC68h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8207AC68h case    1:*/		return 0x8207AC6C;
		  /* 8207AC6Ch */ case    2:  		/* mr R3, R31 */
		/* 8207AC6Ch case    2:*/		regs.R3 = regs.R31;
		/* 8207AC6Ch case    2:*/		return 0x8207AC70;
		  /* 8207AC70h */ case    3:  		/* bl -22208 */
		/* 8207AC70h case    3:*/		regs.LR = 0x8207AC74; return 0x820755B0;
		/* 8207AC70h case    3:*/		return 0x8207AC74;
		  /* 8207AC74h */ case    4:  		/* lwz R11, <#[R31 + 22052]> */
		/* 8207AC74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005624) );
		/* 8207AC74h case    4:*/		return 0x8207AC78;
		  /* 8207AC78h */ case    5:  		/* stw R30, <#[R31 + 22060]> */
		/* 8207AC78h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000562C) );
		/* 8207AC78h case    5:*/		return 0x8207AC7C;
		  /* 8207AC7Ch */ case    6:  		/* stw R30, <#[R31 + 22064]> */
		/* 8207AC7Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005630) );
		/* 8207AC7Ch case    6:*/		return 0x8207AC80;
		  /* 8207AC80h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8207AC80h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207AC80h case    7:*/		return 0x8207AC84;
		  /* 8207AC84h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 8207AC84h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8207AC94;  }
		/* 8207AC84h case    8:*/		return 0x8207AC88;
		  /* 8207AC88h */ case    9:  		/* lwz R11, <#[R31 + 22044]> */
		/* 8207AC88h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000561C) );
		/* 8207AC88h case    9:*/		return 0x8207AC8C;
		  /* 8207AC8Ch */ case   10:  		/* addi R11, R11, 1920 */
		/* 8207AC8Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x780);
		/* 8207AC8Ch case   10:*/		return 0x8207AC90;
		  /* 8207AC90h */ case   11:  		/* stw R11, <#[R31 + 22052]> */
		/* 8207AC90h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005624) );
		/* 8207AC90h case   11:*/		return 0x8207AC94;
	}
	return 0x8207AC94;
} // Block from 8207AC64h-8207AC94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207AC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AC94);
		  /* 8207AC94h */ case    0:  		/* li R11, 2 */
		/* 8207AC94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8207AC94h case    0:*/		return 0x8207AC98;
		  /* 8207AC98h */ case    1:  		/* stw R11, <#[R31 + 22056]> */
		/* 8207AC98h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005628) );
		/* 8207AC98h case    1:*/		return 0x8207AC9C;
		  /* 8207AC9Ch */ case    2:  		/* b 200 */
		/* 8207AC9Ch case    2:*/		return 0x8207AD64;
		/* 8207AC9Ch case    2:*/		return 0x8207ACA0;
	}
	return 0x8207ACA0;
} // Block from 8207AC94h-8207ACA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207ACA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ACA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ACA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ACA0);
		  /* 8207ACA0h */ case    0:  		/* rlwinm. R11, R10, 0, 23, 23 */
		/* 8207ACA0h case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R10);
		/* 8207ACA0h case    0:*/		return 0x8207ACA4;
		  /* 8207ACA4h */ case    1:  		/* bc 12, CR0_EQ, -312 */
		/* 8207ACA4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8207AB6C;  }
		/* 8207ACA4h case    1:*/		return 0x8207ACA8;
		  /* 8207ACA8h */ case    2:  		/* lis R11, -32256 */
		/* 8207ACA8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207ACA8h case    2:*/		return 0x8207ACAC;
		  /* 8207ACACh */ case    3:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8207ACACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8207ACACh case    3:*/		return 0x8207ACB0;
		  /* 8207ACB0h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 8207ACB0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207ACB0h case    4:*/		return 0x8207ACB4;
		  /* 8207ACB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8207ACB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207ACB4h case    5:*/		return 0x8207ACB8;
		  /* 8207ACB8h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8207ACB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207ACC4;  }
		/* 8207ACB8h case    6:*/		return 0x8207ACBC;
		  /* 8207ACBCh */ case    7:  		/* lwz R11, <#[R11 + 32]> */
		/* 8207ACBCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8207ACBCh case    7:*/		return 0x8207ACC0;
		  /* 8207ACC0h */ case    8:  		/* b 8 */
		/* 8207ACC0h case    8:*/		return 0x8207ACC8;
		/* 8207ACC0h case    8:*/		return 0x8207ACC4;
	}
	return 0x8207ACC4;
} // Block from 8207ACA0h-8207ACC4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207ACC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ACC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ACC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ACC4);
		  /* 8207ACC4h */ case    0:  		/* mr R11, R30 */
		/* 8207ACC4h case    0:*/		regs.R11 = regs.R30;
		/* 8207ACC4h case    0:*/		return 0x8207ACC8;
	}
	return 0x8207ACC8;
} // Block from 8207ACC4h-8207ACC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207ACC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ACC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ACC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ACC8);
		  /* 8207ACC8h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 8207ACC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207ACC8h case    0:*/		return 0x8207ACCC;
		  /* 8207ACCCh */ case    1:  		/* lis R9, -32256 */
		/* 8207ACCCh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207ACCCh case    1:*/		return 0x8207ACD0;
		  /* 8207ACD0h */ case    2:  		/* rlwinm R4, R10, 20, 4, 11 */
		/* 8207ACD0h case    2:*/		cpu::op::rlwinm<0,20,4,11>(regs,&regs.R4,regs.R10);
		/* 8207ACD0h case    2:*/		return 0x8207ACD4;
		  /* 8207ACD4h */ case    3:  		/* addi R3, R9, 8544 */
		/* 8207ACD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R9,0x2160);
		/* 8207ACD4h case    3:*/		return 0x8207ACD8;
		  /* 8207ACD8h */ case    4:  		/* mtspr CTR, R11 */
		/* 8207ACD8h case    4:*/		regs.CTR = regs.R11;
		/* 8207ACD8h case    4:*/		return 0x8207ACDC;
		  /* 8207ACDCh */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8207ACDCh case    5:*/		if ( 1 ) { regs.LR = 0x8207ACE0; return (uint32)regs.CTR; }
		/* 8207ACDCh case    5:*/		return 0x8207ACE0;
		  /* 8207ACE0h */ case    6:  		/* stw R3, <#[R31 + 17132]> */
		/* 8207ACE0h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000042EC) );
		/* 8207ACE0h case    6:*/		return 0x8207ACE4;
		  /* 8207ACE4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8207ACE4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207ACE4h case    7:*/		return 0x8207ACE8;
	}
	return 0x8207ACE8;
} // Block from 8207ACC8h-8207ACE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207ACE8h
// Function '?HandleLowPriWork@D3D@@YAPAKPAVCXpsGlobal@1@PAUQueueRecord_YieldPointParams@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ACE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ACE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ACE8);
		  /* 8207ACE8h */ case    0:  		/* bc 12, CR0_LT, -384 */
		/* 8207ACE8h case    0:*/		if ( regs.CR[0].lt ) { return 0x8207AB68;  }
		/* 8207ACE8h case    0:*/		return 0x8207ACEC;
		  /* 8207ACECh */ case    1:  		/* lwz R11, <#[R31 + 17128]> */
		/* 8207ACECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000042E8) );
		/* 8207ACECh case    1:*/		return 0x8207ACF0;
		  /* 8207ACF0h */ case    2:  		/* li R10, 1 */
		/* 8207ACF0h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207ACF0h case    2:*/		return 0x8207ACF4;
		  /* 8207ACF4h */ case    3:  		/* rlwimi R11, R10, 10, 23, 23 */
		/* 8207ACF4h case    3:*/		cpu::op::rlwimi<0,10,23,23>(regs,&regs.R11,regs.R10);
		/* 8207ACF4h case    3:*/		return 0x8207ACF8;
		  /* 8207ACF8h */ case    4:  		/* rlwimi R11, R10, 10, 21, 21 */
		/* 8207ACF8h case    4:*/		cpu::op::rlwimi<0,10,21,21>(regs,&regs.R11,regs.R10);
		/* 8207ACF8h case    4:*/		return 0x8207ACFC;
		  /* 8207ACFCh */ case    5:  		/* stw R11, <#[R31 + 17128]> */
		/* 8207ACFCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000042E8) );
		/* 8207ACFCh case    5:*/		return 0x8207AD00;
		  /* 8207AD00h */ case    6:  		/* b -404 */
		/* 8207AD00h case    6:*/		return 0x8207AB6C;
		/* 8207AD00h case    6:*/		return 0x8207AD04;
	}
	return 0x8207AD04;
} // Block from 8207ACE8h-8207AD04h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD04);
		  /* 8207AD04h */ case    0:  		/* stw R30, <#[R31 + 22056]> */
		/* 8207AD04h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005628) );
		/* 8207AD04h case    0:*/		return 0x8207AD08;
		  /* 8207AD08h */ case    1:  		/* b 92 */
		/* 8207AD08h case    1:*/		return 0x8207AD64;
		/* 8207AD08h case    1:*/		return 0x8207AD0C;
	}
	return 0x8207AD0C;
} // Block from 8207AD04h-8207AD0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD0C);
		  /* 8207AD0Ch */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 8207AD0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8207AD0Ch case    0:*/		return 0x8207AD10;
		  /* 8207AD10h */ case    1:  		/* bc 4, CR6_EQ, 84 */
		/* 8207AD10h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207AD64;  }
		/* 8207AD10h case    1:*/		return 0x8207AD14;
		  /* 8207AD14h */ case    2:  		/* lbz R11, <#[R31 + 11070]> */
		/* 8207AD14h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207AD14h case    2:*/		return 0x8207AD18;
		  /* 8207AD18h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8207AD18h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8207AD18h case    3:*/		return 0x8207AD1C;
		  /* 8207AD1Ch */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 8207AD1Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8207AD2C;  }
		/* 8207AD1Ch case    4:*/		return 0x8207AD20;
		  /* 8207AD20h */ case    5:  		/* li R4, 1 */
		/* 8207AD20h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207AD20h case    5:*/		return 0x8207AD24;
		  /* 8207AD24h */ case    6:  		/* mr R3, R31 */
		/* 8207AD24h case    6:*/		regs.R3 = regs.R31;
		/* 8207AD24h case    6:*/		return 0x8207AD28;
		  /* 8207AD28h */ case    7:  		/* bl -22784 */
		/* 8207AD28h case    7:*/		regs.LR = 0x8207AD2C; return 0x82075428;
		/* 8207AD28h case    7:*/		return 0x8207AD2C;
	}
	return 0x8207AD2C;
} // Block from 8207AD0Ch-8207AD2Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD2C);
		  /* 8207AD2Ch */ case    0:  		/* lwz R11, <#[R31 + 22064]> */
		/* 8207AD2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005630) );
		/* 8207AD2Ch case    0:*/		return 0x8207AD30;
		  /* 8207AD30h */ case    1:  		/* cmplwi CR6, R11, 3 */
		/* 8207AD30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8207AD30h case    1:*/		return 0x8207AD34;
		  /* 8207AD34h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8207AD34h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207AD3C;  }
		/* 8207AD34h case    2:*/		return 0x8207AD38;
		  /* 8207AD38h */ case    3:  		/* addi R30, R11, 1 */
		/* 8207AD38h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 8207AD38h case    3:*/		return 0x8207AD3C;
	}
	return 0x8207AD3C;
} // Block from 8207AD2Ch-8207AD3Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD3C);
		  /* 8207AD3Ch */ case    0:  		/* lwz R11, <#[R31 + 22060]> */
		/* 8207AD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000562C) );
		/* 8207AD3Ch case    0:*/		return 0x8207AD40;
		  /* 8207AD40h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8207AD40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8207AD40h case    1:*/		return 0x8207AD44;
		  /* 8207AD44h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8207AD44h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207AD64;  }
		/* 8207AD44h case    2:*/		return 0x8207AD48;
		  /* 8207AD48h */ case    3:  		/* lwz R10, <#[R31 + 22048]> */
		/* 8207AD48h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005620) );
		/* 8207AD48h case    3:*/		return 0x8207AD4C;
		  /* 8207AD4Ch */ case    4:  		/* rlwinm R11, R30, 4, 0, 27 */
		/* 8207AD4Ch case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R30);
		/* 8207AD4Ch case    4:*/		return 0x8207AD50;
		  /* 8207AD50h */ case    5:  		/* li R5, 0 */
		/* 8207AD50h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207AD50h case    5:*/		return 0x8207AD54;
		  /* 8207AD54h */ case    6:  		/* add R4, R10, R11 */
		/* 8207AD54h case    6:*/		cpu::op::add<0>(regs,&regs.R4,regs.R10,regs.R11);
		/* 8207AD54h case    6:*/		return 0x8207AD58;
		  /* 8207AD58h */ case    7:  		/* mr R3, R31 */
		/* 8207AD58h case    7:*/		regs.R3 = regs.R31;
		/* 8207AD58h case    7:*/		return 0x8207AD5C;
		  /* 8207AD5Ch */ case    8:  		/* bl -20732 */
		/* 8207AD5Ch case    8:*/		regs.LR = 0x8207AD60; return 0x82075C60;
		/* 8207AD5Ch case    8:*/		return 0x8207AD60;
		  /* 8207AD60h */ case    9:  		/* stw R30, <#[R31 + 22064]> */
		/* 8207AD60h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005630) );
		/* 8207AD60h case    9:*/		return 0x8207AD64;
	}
	return 0x8207AD64;
} // Block from 8207AD3Ch-8207AD64h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD64);
		  /* 8207AD64h */ case    0:  		/* mr R3, R31 */
		/* 8207AD64h case    0:*/		regs.R3 = regs.R31;
		/* 8207AD64h case    0:*/		return 0x8207AD68;
		  /* 8207AD68h */ case    1:  		/* bl -1336 */
		/* 8207AD68h case    1:*/		regs.LR = 0x8207AD6C; return 0x8207A830;
		/* 8207AD68h case    1:*/		return 0x8207AD6C;
		  /* 8207AD6Ch */ case    2:  		/* lis R11, -32256 */
		/* 8207AD6Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207AD6Ch case    2:*/		return 0x8207AD70;
		  /* 8207AD70h */ case    3:  		/* lwz R11, <#[R11 + 1144]> */
		/* 8207AD70h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000478) );
		/* 8207AD70h case    3:*/		return 0x8207AD74;
		  /* 8207AD74h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 8207AD74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207AD74h case    4:*/		return 0x8207AD78;
		  /* 8207AD78h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8207AD78h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207AD78h case    5:*/		return 0x8207AD7C;
		  /* 8207AD7Ch */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 8207AD7Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8207AD98;  }
		/* 8207AD7Ch case    6:*/		return 0x8207AD80;
		  /* 8207AD80h */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8207AD80h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8207AD80h case    7:*/		return 0x8207AD84;
		  /* 8207AD84h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8207AD84h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207AD84h case    8:*/		return 0x8207AD88;
		  /* 8207AD88h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8207AD88h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207AD98;  }
		/* 8207AD88h case    9:*/		return 0x8207AD8C;
		  /* 8207AD8Ch */ case   10:  		/* li R3, 0 */
		/* 8207AD8Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207AD8Ch case   10:*/		return 0x8207AD90;
		  /* 8207AD90h */ case   11:  		/* mtspr CTR, R11 */
		/* 8207AD90h case   11:*/		regs.CTR = regs.R11;
		/* 8207AD90h case   11:*/		return 0x8207AD94;
		  /* 8207AD94h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 8207AD94h case   12:*/		if ( 1 ) { regs.LR = 0x8207AD98; return (uint32)regs.CTR; }
		/* 8207AD94h case   12:*/		return 0x8207AD98;
	}
	return 0x8207AD98;
} // Block from 8207AD64h-8207AD98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207AD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AD98);
		  /* 8207AD98h */ case    0:  		/* addi R1, R1, 368 */
		/* 8207AD98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 8207AD98h case    0:*/		return 0x8207AD9C;
		  /* 8207AD9Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207AD9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207AD9Ch case    1:*/		return 0x8207ADA0;
		  /* 8207ADA0h */ case    2:  		/* mtspr LR, R12 */
		/* 8207ADA0h case    2:*/		regs.LR = regs.R12;
		/* 8207ADA0h case    2:*/		return 0x8207ADA4;
		  /* 8207ADA4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207ADA4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207ADA4h case    3:*/		return 0x8207ADA8;
		  /* 8207ADA8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207ADA8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207ADA8h case    4:*/		return 0x8207ADAC;
		  /* 8207ADACh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207ADACh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207ADACh case    5:*/		return 0x8207ADB0;
	}
	return 0x8207ADB0;
} // Block from 8207AD98h-8207ADB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207ADB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ADB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ADB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ADB0);
		  /* 8207ADB0h */ case    0:  		/* mfspr R12, LR */
		/* 8207ADB0h case    0:*/		regs.R12 = regs.LR;
		/* 8207ADB0h case    0:*/		return 0x8207ADB4;
		  /* 8207ADB4h */ case    1:  		/* bl 91292 */
		/* 8207ADB4h case    1:*/		regs.LR = 0x8207ADB8; return 0x82091250;
		/* 8207ADB4h case    1:*/		return 0x8207ADB8;
		  /* 8207ADB8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8207ADB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8207ADB8h case    2:*/		return 0x8207ADBC;
		  /* 8207ADBCh */ case    3:  		/* mr R27, R7 */
		/* 8207ADBCh case    3:*/		regs.R27 = regs.R7;
		/* 8207ADBCh case    3:*/		return 0x8207ADC0;
		  /* 8207ADC0h */ case    4:  		/* lwz R9, <#[R6 + 4]> */
		/* 8207ADC0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 8207ADC0h case    4:*/		return 0x8207ADC4;
		  /* 8207ADC4h */ case    5:  		/* lwz R11, <#[R6]> */
		/* 8207ADC4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8207ADC4h case    5:*/		return 0x8207ADC8;
		  /* 8207ADC8h */ case    6:  		/* addi R10, R1, 80 */
		/* 8207ADC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8207ADC8h case    6:*/		return 0x8207ADCC;
		  /* 8207ADCCh */ case    7:  		/* lwz R8, <#[R6 + 8]> */
		/* 8207ADCCh case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000008) );
		/* 8207ADCCh case    7:*/		return 0x8207ADD0;
		  /* 8207ADD0h */ case    8:  		/* mr R26, R3 */
		/* 8207ADD0h case    8:*/		regs.R26 = regs.R3;
		/* 8207ADD0h case    8:*/		return 0x8207ADD4;
		  /* 8207ADD4h */ case    9:  		/* lwz R7, <#[R6 + 12]> */
		/* 8207ADD4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + 0x0000000C) );
		/* 8207ADD4h case    9:*/		return 0x8207ADD8;
		  /* 8207ADD8h */ case   10:  		/* mr R31, R6 */
		/* 8207ADD8h case   10:*/		regs.R31 = regs.R6;
		/* 8207ADD8h case   10:*/		return 0x8207ADDC;
		  /* 8207ADDCh */ case   11:  		/* stw R11, <#[R10]> */
		/* 8207ADDCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8207ADDCh case   11:*/		return 0x8207ADE0;
		  /* 8207ADE0h */ case   12:  		/* stw R9, <#[R10 + 4]> */
		/* 8207ADE0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 8207ADE0h case   12:*/		return 0x8207ADE4;
		  /* 8207ADE4h */ case   13:  		/* stw R8, <#[R10 + 8]> */
		/* 8207ADE4h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8207ADE4h case   13:*/		return 0x8207ADE8;
		  /* 8207ADE8h */ case   14:  		/* stw R7, <#[R10 + 12]> */
		/* 8207ADE8h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8207ADE8h case   14:*/		return 0x8207ADEC;
		  /* 8207ADECh */ case   15:  		/* lwz R10, <#[R1 + 80]> */
		/* 8207ADECh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207ADECh case   15:*/		return 0x8207ADF0;
		  /* 8207ADF0h */ case   16:  		/* cmpwi CR6, R10, 0 */
		/* 8207ADF0h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8207ADF0h case   16:*/		return 0x8207ADF4;
		  /* 8207ADF4h */ case   17:  		/* lwz R9, <#[R1 + 84]> */
		/* 8207ADF4h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8207ADF4h case   17:*/		return 0x8207ADF8;
		  /* 8207ADF8h */ case   18:  		/* bc 4, CR6_EQ, 44 */
		/* 8207ADF8h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8207AE24;  }
		/* 8207ADF8h case   18:*/		return 0x8207ADFC;
		  /* 8207ADFCh */ case   19:  		/* lwz R11, <#[R1 + 88]> */
		/* 8207ADFCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207ADFCh case   19:*/		return 0x8207AE00;
		  /* 8207AE00h */ case   20:  		/* cmpwi CR6, R11, 0 */
		/* 8207AE00h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207AE00h case   20:*/		return 0x8207AE04;
		  /* 8207AE04h */ case   21:  		/* bc 4, CR6_EQ, 32 */
		/* 8207AE04h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8207AE24;  }
		/* 8207AE04h case   21:*/		return 0x8207AE08;
		  /* 8207AE08h */ case   22:  		/* cmpwi CR6, R9, 0 */
		/* 8207AE08h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8207AE08h case   22:*/		return 0x8207AE0C;
		  /* 8207AE0Ch */ case   23:  		/* bc 4, CR6_EQ, 24 */
		/* 8207AE0Ch case   23:*/		if ( !regs.CR[6].eq ) { return 0x8207AE24;  }
		/* 8207AE0Ch case   23:*/		return 0x8207AE10;
		  /* 8207AE10h */ case   24:  		/* lwz R11, <#[R1 + 92]> */
		/* 8207AE10h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207AE10h case   24:*/		return 0x8207AE14;
		  /* 8207AE14h */ case   25:  		/* cmpwi CR6, R11, 0 */
		/* 8207AE14h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207AE14h case   25:*/		return 0x8207AE18;
		  /* 8207AE18h */ case   26:  		/* bc 4, CR6_EQ, 12 */
		/* 8207AE18h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8207AE24;  }
		/* 8207AE18h case   26:*/		return 0x8207AE1C;
		  /* 8207AE1Ch */ case   27:  		/* stw R4, <#[R1 + 88]> */
		/* 8207AE1Ch case   27:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8207AE1Ch case   27:*/		return 0x8207AE20;
		  /* 8207AE20h */ case   28:  		/* stw R5, <#[R1 + 92]> */
		/* 8207AE20h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207AE20h case   28:*/		return 0x8207AE24;
	}
	return 0x8207AE24;
} // Block from 8207ADB0h-8207AE24h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8207AE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AE24);
		  /* 8207AE24h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8207AE24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8207AE24h case    0:*/		return 0x8207AE28;
		  /* 8207AE28h */ case    1:  		/* lwz R8, <#[R1 + 88]> */
		/* 8207AE28h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8207AE28h case    1:*/		return 0x8207AE2C;
		  /* 8207AE2Ch */ case    2:  		/* lwz R7, <#[R1 + 92]> */
		/* 8207AE2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207AE2Ch case    2:*/		return 0x8207AE30;
		  /* 8207AE30h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8207AE30h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207AE30h case    3:*/		return 0x8207AE34;
		  /* 8207AE34h */ case    4:  		/* subf R10, R10, R8 */
		/* 8207AE34h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8207AE34h case    4:*/		return 0x8207AE38;
		  /* 8207AE38h */ case    5:  		/* subf R29, R9, R7 */
		/* 8207AE38h case    5:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R9,regs.R7);
		/* 8207AE38h case    5:*/		return 0x8207AE3C;
		  /* 8207AE3Ch */ case    6:  		/* mr R28, R11 */
		/* 8207AE3Ch case    6:*/		regs.R28 = regs.R11;
		/* 8207AE3Ch case    6:*/		return 0x8207AE40;
		  /* 8207AE40h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8207AE40h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207AE48;  }
		/* 8207AE40h case    7:*/		return 0x8207AE44;
		  /* 8207AE44h */ case    8:  		/* lwz R28, <#[R26 + 21952]> */
		/* 8207AE44h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x000055C0) );
		/* 8207AE44h case    8:*/		return 0x8207AE48;
	}
	return 0x8207AE48;
} // Block from 8207AE24h-8207AE48h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207AE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AE48);
		  /* 8207AE48h */ case    0:  		/* lwz R30, <#[R31 + 20]> */
		/* 8207AE48h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000014) );
		/* 8207AE48h case    0:*/		return 0x8207AE4C;
		  /* 8207AE4Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8207AE4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8207AE4Ch case    1:*/		return 0x8207AE50;
		  /* 8207AE50h */ case    2:  		/* bc 4, CR6_EQ, 64 */
		/* 8207AE50h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207AE90;  }
		/* 8207AE50h case    2:*/		return 0x8207AE54;
		  /* 8207AE54h */ case    3:  		/* lwz R11, <#[R26 + 13992]> */
		/* 8207AE54h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000036A8) );
		/* 8207AE54h case    3:*/		return 0x8207AE58;
		  /* 8207AE58h */ case    4:  		/* mullw R9, R28, R29 */
		/* 8207AE58h case    4:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R28,regs.R29);
		/* 8207AE58h case    4:*/		return 0x8207AE5C;
		  /* 8207AE5Ch */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8207AE5Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8207AE5Ch case    5:*/		return 0x8207AE60;
		  /* 8207AE60h */ case    6:  		/* divwu R30, R9, R10 */
		/* 8207AE60h case    6:*/		cpu::op::divwu<0>(regs,&regs.R30,regs.R9,regs.R10);
		/* 8207AE60h case    6:*/		return 0x8207AE64;
		  /* 8207AE64h */ case    7:  		/* twi 6, R10, 0 */
		/* 8207AE64h case    7:*/		cpu::op::tw<6>(regs, 0x8207AE64, regs.R10, 0x00000000);
		/* 8207AE64h case    7:*/		return 0x8207AE68;
		  /* 8207AE68h */ case    8:  		/* bc 4, CR0_EQ, 36 */
		/* 8207AE68h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8207AE8C;  }
		/* 8207AE68h case    8:*/		return 0x8207AE6C;
		  /* 8207AE6Ch */ case    9:  		/* bl 2040364 */
		/* 8207AE6Ch case    9:*/		regs.LR = 0x8207AE70; return 0x8226D098;
		/* 8207AE6Ch case    9:*/		return 0x8207AE70;
		  /* 8207AE70h */ case   10:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 8207AE70h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 8207AE70h case   10:*/		return 0x8207AE74;
		  /* 8207AE74h */ case   11:  		/* bc 4, CR0_EQ, 24 */
		/* 8207AE74h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8207AE8C;  }
		/* 8207AE74h case   11:*/		return 0x8207AE78;
		  /* 8207AE78h */ case   12:  		/* cmplw CR6, R30, R29 */
		/* 8207AE78h case   12:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8207AE78h case   12:*/		return 0x8207AE7C;
		  /* 8207AE7Ch */ case   13:  		/* bc 12, CR6_GT, 16 */
		/* 8207AE7Ch case   13:*/		if ( regs.CR[6].gt ) { return 0x8207AE8C;  }
		/* 8207AE7Ch case   13:*/		return 0x8207AE80;
		  /* 8207AE80h */ case   14:  		/* lwz R11, <#[R26 + 21956]> */
		/* 8207AE80h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000055C4) );
		/* 8207AE80h case   14:*/		return 0x8207AE84;
		  /* 8207AE84h */ case   15:  		/* cmplw CR6, R30, R11 */
		/* 8207AE84h case   15:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8207AE84h case   15:*/		return 0x8207AE88;
		  /* 8207AE88h */ case   16:  		/* bc 4, CR6_GT, 8 */
		/* 8207AE88h case   16:*/		if ( !regs.CR[6].gt ) { return 0x8207AE90;  }
		/* 8207AE88h case   16:*/		return 0x8207AE8C;
	}
	return 0x8207AE8C;
} // Block from 8207AE48h-8207AE8Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207AE8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AE8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AE8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AE8C);
		  /* 8207AE8Ch */ case    0:  		/* lwz R30, <#[R26 + 21956]> */
		/* 8207AE8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x000055C4) );
		/* 8207AE8Ch case    0:*/		return 0x8207AE90;
	}
	return 0x8207AE90;
} // Block from 8207AE8Ch-8207AE90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207AE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AE90);
		  /* 8207AE90h */ case    0:  		/* li R5, 56 */
		/* 8207AE90h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 8207AE90h case    0:*/		return 0x8207AE94;
		  /* 8207AE94h */ case    1:  		/* mr R4, R31 */
		/* 8207AE94h case    1:*/		regs.R4 = regs.R31;
		/* 8207AE94h case    1:*/		return 0x8207AE98;
		  /* 8207AE98h */ case    2:  		/* mr R3, R27 */
		/* 8207AE98h case    2:*/		regs.R3 = regs.R27;
		/* 8207AE98h case    2:*/		return 0x8207AE9C;
		  /* 8207AE9Ch */ case    3:  		/* bl 92948 */
		/* 8207AE9Ch case    3:*/		regs.LR = 0x8207AEA0; return 0x820919B0;
		/* 8207AE9Ch case    3:*/		return 0x8207AEA0;
		  /* 8207AEA0h */ case    4:  		/* addi R11, R1, 80 */
		/* 8207AEA0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8207AEA0h case    4:*/		return 0x8207AEA4;
		  /* 8207AEA4h */ case    5:  		/* stw R28, <#[R27 + 16]> */
		/* 8207AEA4h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R27 + 0x00000010) );
		/* 8207AEA4h case    5:*/		return 0x8207AEA8;
		  /* 8207AEA8h */ case    6:  		/* stw R30, <#[R27 + 20]> */
		/* 8207AEA8h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000014) );
		/* 8207AEA8h case    6:*/		return 0x8207AEAC;
		  /* 8207AEACh */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8207AEACh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207AEACh case    7:*/		return 0x8207AEB0;
		  /* 8207AEB0h */ case    8:  		/* lwz R9, <#[R11 + 4]> */
		/* 8207AEB0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8207AEB0h case    8:*/		return 0x8207AEB4;
		  /* 8207AEB4h */ case    9:  		/* lwz R8, <#[R11 + 8]> */
		/* 8207AEB4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8207AEB4h case    9:*/		return 0x8207AEB8;
		  /* 8207AEB8h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 8207AEB8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207AEB8h case   10:*/		return 0x8207AEBC;
		  /* 8207AEBCh */ case   11:  		/* stw R10, <#[R27]> */
		/* 8207AEBCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8207AEBCh case   11:*/		return 0x8207AEC0;
		  /* 8207AEC0h */ case   12:  		/* stw R9, <#[R27 + 4]> */
		/* 8207AEC0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R27 + 0x00000004) );
		/* 8207AEC0h case   12:*/		return 0x8207AEC4;
		  /* 8207AEC4h */ case   13:  		/* stw R8, <#[R27 + 8]> */
		/* 8207AEC4h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R27 + 0x00000008) );
		/* 8207AEC4h case   13:*/		return 0x8207AEC8;
		  /* 8207AEC8h */ case   14:  		/* stw R11, <#[R27 + 12]> */
		/* 8207AEC8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 8207AEC8h case   14:*/		return 0x8207AECC;
		  /* 8207AECCh */ case   15:  		/* addi R1, R1, 160 */
		/* 8207AECCh case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8207AECCh case   15:*/		return 0x8207AED0;
		  /* 8207AED0h */ case   16:  		/* b 91088 */
		/* 8207AED0h case   16:*/		return 0x820912A0;
		/* 8207AED0h case   16:*/		return 0x8207AED4;
		  /* 8207AED4h */ case   17:  		/* nop */
		/* 8207AED4h case   17:*/		cpu::op::nop();
		/* 8207AED4h case   17:*/		return 0x8207AED8;
		  /* 8207AED8h */ case   18:  		/* lwz R10, <#[R4]> */
		/* 8207AED8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 8207AED8h case   18:*/		return 0x8207AEDC;
		  /* 8207AEDCh */ case   19:  		/* li R11, 0 */
		/* 8207AEDCh case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207AEDCh case   19:*/		return 0x8207AEE0;
		  /* 8207AEE0h */ case   20:  		/* stw R10, <#[R5]> */
		/* 8207AEE0h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 8207AEE0h case   20:*/		return 0x8207AEE4;
		  /* 8207AEE4h */ case   21:  		/* lwz R10, <#[R4 + 4]> */
		/* 8207AEE4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 8207AEE4h case   21:*/		return 0x8207AEE8;
		  /* 8207AEE8h */ case   22:  		/* stw R10, <#[R5 + 4]> */
		/* 8207AEE8h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 8207AEE8h case   22:*/		return 0x8207AEEC;
		  /* 8207AEECh */ case   23:  		/* lwz R10, <#[R4 + 8]> */
		/* 8207AEECh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8207AEECh case   23:*/		return 0x8207AEF0;
		  /* 8207AEF0h */ case   24:  		/* stw R10, <#[R5 + 8]> */
		/* 8207AEF0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 8207AEF0h case   24:*/		return 0x8207AEF4;
		  /* 8207AEF4h */ case   25:  		/* lwz R10, <#[R4 + 12]> */
		/* 8207AEF4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 8207AEF4h case   25:*/		return 0x8207AEF8;
		  /* 8207AEF8h */ case   26:  		/* stw R10, <#[R5 + 12]> */
		/* 8207AEF8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x0000000C) );
		/* 8207AEF8h case   26:*/		return 0x8207AEFC;
		  /* 8207AEFCh */ case   27:  		/* lwz R10, <#[R4 + 16]> */
		/* 8207AEFCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8207AEFCh case   27:*/		return 0x8207AF00;
		  /* 8207AF00h */ case   28:  		/* stw R10, <#[R5 + 16]> */
		/* 8207AF00h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000010) );
		/* 8207AF00h case   28:*/		return 0x8207AF04;
		  /* 8207AF04h */ case   29:  		/* lwz R10, <#[R4 + 20]> */
		/* 8207AF04h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000014) );
		/* 8207AF04h case   29:*/		return 0x8207AF08;
		  /* 8207AF08h */ case   30:  		/* stw R10, <#[R5 + 20]> */
		/* 8207AF08h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000014) );
		/* 8207AF08h case   30:*/		return 0x8207AF0C;
		  /* 8207AF0Ch */ case   31:  		/* lwz R10, <#[R4 + 24]> */
		/* 8207AF0Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000018) );
		/* 8207AF0Ch case   31:*/		return 0x8207AF10;
		  /* 8207AF10h */ case   32:  		/* cmplwi CR6, R10, 0 */
		/* 8207AF10h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8207AF10h case   32:*/		return 0x8207AF14;
		  /* 8207AF14h */ case   33:  		/* bc 4, CR6_EQ, 16 */
		/* 8207AF14h case   33:*/		if ( !regs.CR[6].eq ) { return 0x8207AF24;  }
		/* 8207AF14h case   33:*/		return 0x8207AF18;
		  /* 8207AF18h */ case   34:  		/* stw R11, <#[R5 + 24]> */
		/* 8207AF18h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000018) );
		/* 8207AF18h case   34:*/		return 0x8207AF1C;
		  /* 8207AF1Ch */ case   35:  		/* stw R11, <#[R5 + 40]> */
		/* 8207AF1Ch case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000028) );
		/* 8207AF1Ch case   35:*/		return 0x8207AF20;
		  /* 8207AF20h */ case   36:  		/* b 16 */
		/* 8207AF20h case   36:*/		return 0x8207AF30;
		/* 8207AF20h case   36:*/		return 0x8207AF24;
	}
	return 0x8207AF24;
} // Block from 8207AE90h-8207AF24h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8207AF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AF24);
		  /* 8207AF24h */ case    0:  		/* li R10, 3 */
		/* 8207AF24h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8207AF24h case    0:*/		return 0x8207AF28;
		  /* 8207AF28h */ case    1:  		/* stw R10, <#[R5 + 24]> */
		/* 8207AF28h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000018) );
		/* 8207AF28h case    1:*/		return 0x8207AF2C;
		  /* 8207AF2Ch */ case    2:  		/* stw R10, <#[R5 + 40]> */
		/* 8207AF2Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000028) );
		/* 8207AF2Ch case    2:*/		return 0x8207AF30;
	}
	return 0x8207AF30;
} // Block from 8207AF24h-8207AF30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207AF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AF30);
		  /* 8207AF30h */ case    0:  		/* stw R11, <#[R5 + 28]> */
		/* 8207AF30h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 8207AF30h case    0:*/		return 0x8207AF34;
		  /* 8207AF34h */ case    1:  		/* stw R11, <#[R5 + 32]> */
		/* 8207AF34h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000020) );
		/* 8207AF34h case    1:*/		return 0x8207AF38;
		  /* 8207AF38h */ case    2:  		/* stw R11, <#[R5 + 36]> */
		/* 8207AF38h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000024) );
		/* 8207AF38h case    2:*/		return 0x8207AF3C;
		  /* 8207AF3Ch */ case    3:  		/* stw R11, <#[R5 + 44]> */
		/* 8207AF3Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x0000002C) );
		/* 8207AF3Ch case    3:*/		return 0x8207AF40;
		  /* 8207AF40h */ case    4:  		/* stw R11, <#[R5 + 48]> */
		/* 8207AF40h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 8207AF40h case    4:*/		return 0x8207AF44;
		  /* 8207AF44h */ case    5:  		/* stw R11, <#[R5 + 52]> */
		/* 8207AF44h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000034) );
		/* 8207AF44h case    5:*/		return 0x8207AF48;
		  /* 8207AF48h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207AF48h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207AF48h case    6:*/		return 0x8207AF4C;
	}
	return 0x8207AF4C;
} // Block from 8207AF30h-8207AF4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207AF4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AF4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AF4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AF4C);
		  /* 8207AF4Ch */ case    0:  		/* nop */
		/* 8207AF4Ch case    0:*/		cpu::op::nop();
		/* 8207AF4Ch case    0:*/		return 0x8207AF50;
	}
	return 0x8207AF50;
} // Block from 8207AF4Ch-8207AF50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207AF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207AF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207AF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207AF50);
		  /* 8207AF50h */ case    0:  		/* mfspr R12, LR */
		/* 8207AF50h case    0:*/		regs.R12 = regs.LR;
		/* 8207AF50h case    0:*/		return 0x8207AF54;
		  /* 8207AF54h */ case    1:  		/* bl 90888 */
		/* 8207AF54h case    1:*/		regs.LR = 0x8207AF58; return 0x8209125C;
		/* 8207AF54h case    1:*/		return 0x8207AF58;
		  /* 8207AF58h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8207AF58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8207AF58h case    2:*/		return 0x8207AF5C;
		  /* 8207AF5Ch */ case    3:  		/* li R8, 0 */
		/* 8207AF5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8207AF5Ch case    3:*/		return 0x8207AF60;
		  /* 8207AF60h */ case    4:  		/* addi R7, R1, 80 */
		/* 8207AF60h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8207AF60h case    4:*/		return 0x8207AF64;
		  /* 8207AF64h */ case    5:  		/* mr R31, R3 */
		/* 8207AF64h case    5:*/		regs.R31 = regs.R3;
		/* 8207AF64h case    5:*/		return 0x8207AF68;
		  /* 8207AF68h */ case    6:  		/* mr R30, R4 */
		/* 8207AF68h case    6:*/		regs.R30 = regs.R4;
		/* 8207AF68h case    6:*/		return 0x8207AF6C;
		  /* 8207AF6Ch */ case    7:  		/* mr R29, R5 */
		/* 8207AF6Ch case    7:*/		regs.R29 = regs.R5;
		/* 8207AF6Ch case    7:*/		return 0x8207AF70;
		  /* 8207AF70h */ case    8:  		/* bl -448 */
		/* 8207AF70h case    8:*/		regs.LR = 0x8207AF74; return 0x8207ADB0;
		/* 8207AF70h case    8:*/		return 0x8207AF74;
		  /* 8207AF74h */ case    9:  		/* lwz R11, <#[R31 + 21952]> */
		/* 8207AF74h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055C0) );
		/* 8207AF74h case    9:*/		return 0x8207AF78;
		  /* 8207AF78h */ case   10:  		/* addi R3, R1, 152 */
		/* 8207AF78h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x98);
		/* 8207AF78h case   10:*/		return 0x8207AF7C;
		  /* 8207AF7Ch */ case   11:  		/* lwz R10, <#[R31 + 21956]> */
		/* 8207AF7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000055C4) );
		/* 8207AF7Ch case   11:*/		return 0x8207AF80;
		  /* 8207AF80h */ case   12:  		/* addi R4, R1, 80 */
		/* 8207AF80h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207AF80h case   12:*/		return 0x8207AF84;
		  /* 8207AF84h */ case   13:  		/* li R5, 56 */
		/* 8207AF84h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 8207AF84h case   13:*/		return 0x8207AF88;
		  /* 8207AF88h */ case   14:  		/* sth R30, <#[R1 + 144]> */
		/* 8207AF88h case   14:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 8207AF88h case   14:*/		return 0x8207AF8C;
		  /* 8207AF8Ch */ case   15:  		/* sth R29, <#[R1 + 146]> */
		/* 8207AF8Ch case   15:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R1 + 0x00000092) );
		/* 8207AF8Ch case   15:*/		return 0x8207AF90;
		  /* 8207AF90h */ case   16:  		/* sth R11, <#[R1 + 148]> */
		/* 8207AF90h case   16:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 8207AF90h case   16:*/		return 0x8207AF94;
		  /* 8207AF94h */ case   17:  		/* sth R10, <#[R1 + 150]> */
		/* 8207AF94h case   17:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R1 + 0x00000096) );
		/* 8207AF94h case   17:*/		return 0x8207AF98;
		  /* 8207AF98h */ case   18:  		/* bl 92696 */
		/* 8207AF98h case   18:*/		regs.LR = 0x8207AF9C; return 0x820919B0;
		/* 8207AF98h case   18:*/		return 0x8207AF9C;
		  /* 8207AF9Ch */ case   19:  		/* addi R4, R1, 144 */
		/* 8207AF9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 8207AF9Ch case   19:*/		return 0x8207AFA0;
		  /* 8207AFA0h */ case   20:  		/* li R3, 1 */
		/* 8207AFA0h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207AFA0h case   20:*/		return 0x8207AFA4;
		  /* 8207AFA4h */ case   21:  		/* bl 2040068 */
		/* 8207AFA4h case   21:*/		regs.LR = 0x8207AFA8; return 0x8226D0A8;
		/* 8207AFA4h case   21:*/		return 0x8207AFA8;
		  /* 8207AFA8h */ case   22:  		/* addi R1, R1, 240 */
		/* 8207AFA8h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8207AFA8h case   22:*/		return 0x8207AFAC;
		  /* 8207AFACh */ case   23:  		/* b 90880 */
		/* 8207AFACh case   23:*/		return 0x820912AC;
		/* 8207AFACh case   23:*/		return 0x8207AFB0;
		  /* 8207AFB0h */ case   24:  		/* vrfim VR61, VR1 */
		/* 8207AFB0h case   24:*/		cpu::op::vrfim<0>(regs,&regs.VR61,regs.VR1);
		/* 8207AFB0h case   24:*/		return 0x8207AFB4;
		  /* 8207AFB4h */ case   25:  		/* lis R11, -32256 */
		/* 8207AFB4h case   25:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207AFB4h case   25:*/		return 0x8207AFB8;
		  /* 8207AFB8h */ case   26:  		/* lis R10, -32256 */
		/* 8207AFB8h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207AFB8h case   26:*/		return 0x8207AFBC;
		  /* 8207AFBCh */ case   27:  		/* addi R11, R11, 8592 */
		/* 8207AFBCh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2190);
		/* 8207AFBCh case   27:*/		return 0x8207AFC0;
		  /* 8207AFC0h */ case   28:  		/* addi R10, R10, 8576 */
		/* 8207AFC0h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 8207AFC0h case   28:*/		return 0x8207AFC4;
		  /* 8207AFC4h */ case   29:  		/* lvx VR63, <#[R11]> */
		/* 8207AFC4h case   29:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 8207AFC4h case   29:*/		return 0x8207AFC8;
		  /* 8207AFC8h */ case   30:  		/* lvx VR62, <#[R10]> */
		/* 8207AFC8h case   30:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 8207AFC8h case   30:*/		return 0x8207AFCC;
		  /* 8207AFCCh */ case   31:  		/* vspltw VR12, VR63, 0 */
		/* 8207AFCCh case   31:*/		cpu::op::vspltw<0,0>(regs,&regs.VR12,regs.VR63);
		/* 8207AFCCh case   31:*/		return 0x8207AFD0;
		  /* 8207AFD0h */ case   32:  		/* vspltw VR8, VR63, 1 */
		/* 8207AFD0h case   32:*/		cpu::op::vspltw<0,1>(regs,&regs.VR8,regs.VR63);
		/* 8207AFD0h case   32:*/		return 0x8207AFD4;
		  /* 8207AFD4h */ case   33:  		/* vspltw VR7, VR62, 0 */
		/* 8207AFD4h case   33:*/		cpu::op::vspltw<0,0>(regs,&regs.VR7,regs.VR62);
		/* 8207AFD4h case   33:*/		return 0x8207AFD8;
		  /* 8207AFD8h */ case   34:  		/* vsubfp VR0, VR1, VR61 */
		/* 8207AFD8h case   34:*/		cpu::op::vsubfp<0>(regs,&regs.VR0,regs.VR1,regs.VR61);
		/* 8207AFD8h case   34:*/		return 0x8207AFDC;
		  /* 8207AFDCh */ case   35:  		/* vspltw VR6, VR62, 1 */
		/* 8207AFDCh case   35:*/		cpu::op::vspltw<0,1>(regs,&regs.VR6,regs.VR62);
		/* 8207AFDCh case   35:*/		return 0x8207AFE0;
		  /* 8207AFE0h */ case   36:  		/* vspltw VR5, VR63, 2 */
		/* 8207AFE0h case   36:*/		cpu::op::vspltw<0,2>(regs,&regs.VR5,regs.VR63);
		/* 8207AFE0h case   36:*/		return 0x8207AFE4;
		  /* 8207AFE4h */ case   37:  		/* vexptefp VR61, VR61 */
		/* 8207AFE4h case   37:*/		cpu::op::vexptefp<0>(regs,&regs.VR61,regs.VR61);
		/* 8207AFE4h case   37:*/		return 0x8207AFE8;
		  /* 8207AFE8h */ case   38:  		/* vspltw VR9, VR62, 2 */
		/* 8207AFE8h case   38:*/		cpu::op::vspltw<0,2>(regs,&regs.VR9,regs.VR62);
		/* 8207AFE8h case   38:*/		return 0x8207AFEC;
		  /* 8207AFECh */ case   39:  		/* vspltw VR10, VR63, 3 */
		/* 8207AFECh case   39:*/		cpu::op::vspltw<0,3>(regs,&regs.VR10,regs.VR63);
		/* 8207AFECh case   39:*/		return 0x8207AFF0;
		  /* 8207AFF0h */ case   40:  		/* vspltw VR11, VR62, 3 */
		/* 8207AFF0h case   40:*/		cpu::op::vspltw<0,3>(regs,&regs.VR11,regs.VR62);
		/* 8207AFF0h case   40:*/		return 0x8207AFF4;
		  /* 8207AFF4h */ case   41:  		/* vmaddfp VR8, VR0, VR8, VR12 */
		/* 8207AFF4h case   41:*/		cpu::op::vmaddfp<0>(regs,&regs.VR8,regs.VR0,regs.VR8,regs.VR12);
		/* 8207AFF4h case   41:*/		return 0x8207AFF8;
		  /* 8207AFF8h */ case   42:  		/* vmulfp128 VR13, VR0, VR0 */
		/* 8207AFF8h case   42:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR0,regs.VR0);
		/* 8207AFF8h case   42:*/		return 0x8207AFFC;
		  /* 8207AFFCh */ case   43:  		/* vmaddfp VR7, VR0, VR6, VR7 */
		/* 8207AFFCh case   43:*/		cpu::op::vmaddfp<0>(regs,&regs.VR7,regs.VR0,regs.VR6,regs.VR7);
		/* 8207AFFCh case   43:*/		return 0x8207B000;
		  /* 8207B000h */ case   44:  		/* vmulfp128 VR0, VR0, VR13 */
		/* 8207B000h case   44:*/		cpu::op::vmulfp128<0>(regs,&regs.VR0,regs.VR0,regs.VR13);
		/* 8207B000h case   44:*/		return 0x8207B004;
		  /* 8207B004h */ case   45:  		/* vmaddfp VR8, VR13, VR5, VR8 */
		/* 8207B004h case   45:*/		cpu::op::vmaddfp<0>(regs,&regs.VR8,regs.VR13,regs.VR5,regs.VR8);
		/* 8207B004h case   45:*/		return 0x8207B008;
		  /* 8207B008h */ case   46:  		/* vmaddfp VR9, VR13, VR9, VR7 */
		/* 8207B008h case   46:*/		cpu::op::vmaddfp<0>(regs,&regs.VR9,regs.VR13,regs.VR9,regs.VR7);
		/* 8207B008h case   46:*/		return 0x8207B00C;
		  /* 8207B00Ch */ case   47:  		/* vmulfp128 VR13, VR13, VR13 */
		/* 8207B00Ch case   47:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR13,regs.VR13);
		/* 8207B00Ch case   47:*/		return 0x8207B010;
		  /* 8207B010h */ case   48:  		/* vmaddfp VR10, VR0, VR10, VR8 */
		/* 8207B010h case   48:*/		cpu::op::vmaddfp<0>(regs,&regs.VR10,regs.VR0,regs.VR10,regs.VR8);
		/* 8207B010h case   48:*/		return 0x8207B014;
		  /* 8207B014h */ case   49:  		/* vmaddfp VR0, VR0, VR11, VR9 */
		/* 8207B014h case   49:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR11,regs.VR9);
		/* 8207B014h case   49:*/		return 0x8207B018;
		  /* 8207B018h */ case   50:  		/* vmaddfp VR0, VR13, VR0, VR10 */
		/* 8207B018h case   50:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR13,regs.VR0,regs.VR10);
		/* 8207B018h case   50:*/		return 0x8207B01C;
		  /* 8207B01Ch */ case   51:  		/* mr VR63, VR0 */
		/* 8207B01Ch case   51:*/		regs.VR63 = regs.VR0;
		/* 8207B01Ch case   51:*/		return 0x8207B020;
		  /* 8207B020h */ case   52:  		/* vrefp VR0, VR63 */
		/* 8207B020h case   52:*/		cpu::op::vrefp<0>(regs,&regs.VR0,regs.VR63);
		/* 8207B020h case   52:*/		return 0x8207B024;
		  /* 8207B024h */ case   53:  		/* mr VR9, VR63 */
		/* 8207B024h case   53:*/		regs.VR9 = regs.VR63;
		/* 8207B024h case   53:*/		return 0x8207B028;
		  /* 8207B028h */ case   54:  		/* mr VR10, VR63 */
		/* 8207B028h case   54:*/		regs.VR10 = regs.VR63;
		/* 8207B028h case   54:*/		return 0x8207B02C;
		  /* 8207B02Ch */ case   55:  		/* vnmsubfp VR8, VR9, VR0, VR12 */
		/* 8207B02Ch case   55:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR8,regs.VR9,regs.VR0,regs.VR12);
		/* 8207B02Ch case   55:*/		return 0x8207B030;
		  /* 8207B030h */ case   56:  		/* mr VR13, VR0 */
		/* 8207B030h case   56:*/		regs.VR13 = regs.VR0;
		/* 8207B030h case   56:*/		return 0x8207B034;
		  /* 8207B034h */ case   57:  		/* vmaddfp VR0, VR0, VR8, VR0 */
		/* 8207B034h case   57:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR8,regs.VR0);
		/* 8207B034h case   57:*/		return 0x8207B038;
		  /* 8207B038h */ case   58:  		/* vnmsubfp VR12, VR10, VR0, VR12 */
		/* 8207B038h case   58:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR12,regs.VR10,regs.VR0,regs.VR12);
		/* 8207B038h case   58:*/		return 0x8207B03C;
		  /* 8207B03Ch */ case   59:  		/* vcmpeqfp VR9, VR0, VR0 */
		/* 8207B03Ch case   59:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR9,regs.VR0,regs.VR0);
		/* 8207B03Ch case   59:*/		return 0x8207B040;
		  /* 8207B040h */ case   60:  		/* vmaddfp VR0, VR0, VR12, VR0 */
		/* 8207B040h case   60:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR12,regs.VR0);
		/* 8207B040h case   60:*/		return 0x8207B044;
		  /* 8207B044h */ case   61:  		/* vsel VR12, VR13, VR0, VR9 */
		/* 8207B044h case   61:*/		cpu::op::vsel<0>(regs,&regs.VR12,regs.VR13,regs.VR0,regs.VR9);
		/* 8207B044h case   61:*/		return 0x8207B048;
		  /* 8207B048h */ case   62:  		/* vmulfp128 VR1, VR61, VR12 */
		/* 8207B048h case   62:*/		cpu::op::vmulfp128<0>(regs,&regs.VR1,regs.VR61,regs.VR12);
		/* 8207B048h case   62:*/		return 0x8207B04C;
		  /* 8207B04Ch */ case   63:  		/* bclr 20, CR0_LT */
		/* 8207B04Ch case   63:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207B04Ch case   63:*/		return 0x8207B050;
	}
	return 0x8207B050;
} // Block from 8207AF50h-8207B050h (64 instructions)

//////////////////////////////////////////////////////
// Block at 8207B050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B050);
		  /* 8207B050h */ case    0:  		/* lis R11, -32256 */
		/* 8207B050h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B050h case    0:*/		return 0x8207B054;
		  /* 8207B054h */ case    1:  		/* lis R10, -32256 */
		/* 8207B054h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B054h case    1:*/		return 0x8207B058;
		  /* 8207B058h */ case    2:  		/* lis R8, -32256 */
		/* 8207B058h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207B058h case    2:*/		return 0x8207B05C;
		  /* 8207B05Ch */ case    3:  		/* addi R7, R1, -16 */
		/* 8207B05Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xFFFFFFF0);
		/* 8207B05Ch case    3:*/		return 0x8207B060;
		  /* 8207B060h */ case    4:  		/* lis R9, -32256 */
		/* 8207B060h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B060h case    4:*/		return 0x8207B064;
		  /* 8207B064h */ case    5:  		/* lfs FR0, <#[R11 + 1804]> */
		/* 8207B064h case    5:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000070C) );
		/* 8207B064h case    5:*/		return 0x8207B068;
		  /* 8207B068h */ case    6:  		/* lis R11, -32256 */
		/* 8207B068h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B068h case    6:*/		return 0x8207B06C;
		  /* 8207B06Ch */ case    7:  		/* fadds FR10, FR1, FR0 */
		/* 8207B06Ch case    7:*/		cpu::op::fadds<0>(regs,&regs.FR10,regs.FR1,regs.FR0);
		/* 8207B06Ch case    7:*/		return 0x8207B070;
		  /* 8207B070h */ case    8:  		/* lfs FR12, <#[R10 + 1800]> */
		/* 8207B070h case    8:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00000708) );
		/* 8207B070h case    8:*/		return 0x8207B074;
		  /* 8207B074h */ case    9:  		/* addi R10, R1, -16 */
		/* 8207B074h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xFFFFFFF0);
		/* 8207B074h case    9:*/		return 0x8207B078;
		  /* 8207B078h */ case   10:  		/* lfs FR13, <#[R8 + 1792]> */
		/* 8207B078h case   10:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000700) );
		/* 8207B078h case   10:*/		return 0x8207B07C;
		  /* 8207B07Ch */ case   11:  		/* stfs FR13, <#[R1 - 16]> */
		/* 8207B07Ch case   11:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B07Ch case   11:*/		return 0x8207B080;
		  /* 8207B080h */ case   12:  		/* addi R11, R11, 1680 */
		/* 8207B080h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x690);
		/* 8207B080h case   12:*/		return 0x8207B084;
		  /* 8207B084h */ case   13:  		/* lfs FR11, <#[R9 + 1796]> */
		/* 8207B084h case   13:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R9 + 0x00000704) );
		/* 8207B084h case   13:*/		return 0x8207B088;
		  /* 8207B088h */ case   14:  		/* lis R8, -32256 */
		/* 8207B088h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207B088h case   14:*/		return 0x8207B08C;
		  /* 8207B08Ch */ case   15:  		/* addi R6, R1, -16 */
		/* 8207B08Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xFFFFFFF0);
		/* 8207B08Ch case   15:*/		return 0x8207B090;
		  /* 8207B090h */ case   16:  		/* lis R9, -32256 */
		/* 8207B090h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B090h case   16:*/		return 0x8207B094;
		  /* 8207B094h */ case   17:  		/* lvx VR62, <#[R11]> */
		/* 8207B094h case   17:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B094h case   17:*/		return 0x8207B098;
		  /* 8207B098h */ case   18:  		/* addi R11, R8, 1712 */
		/* 8207B098h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x6B0);
		/* 8207B098h case   18:*/		return 0x8207B09C;
		  /* 8207B09Ch */ case   19:  		/* addi R8, R1, -16 */
		/* 8207B09Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFFF0);
		/* 8207B09Ch case   19:*/		return 0x8207B0A0;
		  /* 8207B0A0h */ case   20:  		/* addi R9, R9, 1696 */
		/* 8207B0A0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x6A0);
		/* 8207B0A0h case   20:*/		return 0x8207B0A4;
		  /* 8207B0A4h */ case   21:  		/* fabs FR13, FR10 */
		/* 8207B0A4h case   21:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR10);
		/* 8207B0A4h case   21:*/		return 0x8207B0A8;
		  /* 8207B0A8h */ case   22:  		/* lvx VR60, <#[R11]> */
		/* 8207B0A8h case   22:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B0A8h case   22:*/		return 0x8207B0AC;
		  /* 8207B0ACh */ case   23:  		/* lvx VR61, <#[R9]> */
		/* 8207B0ACh case   23:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + 0x00000000) );
		/* 8207B0ACh case   23:*/		return 0x8207B0B0;
		  /* 8207B0B0h */ case   24:  		/* fmuls FR12, FR13, FR12 */
		/* 8207B0B0h case   24:*/		cpu::op::fmuls<0>(regs,&regs.FR12,regs.FR13,regs.FR12);
		/* 8207B0B0h case   24:*/		return 0x8207B0B4;
		  /* 8207B0B4h */ case   25:  		/* fctidz FR12, FR12 */
		/* 8207B0B4h case   25:*/		cpu::op::fctidz<0>(regs,&regs.FR12,regs.FR12);
		/* 8207B0B4h case   25:*/		return 0x8207B0B8;
		  /* 8207B0B8h */ case   26:  		/* fcfid FR12, FR12 */
		/* 8207B0B8h case   26:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207B0B8h case   26:*/		return 0x8207B0BC;
		  /* 8207B0BCh */ case   27:  		/* frsp FR12, FR12 */
		/* 8207B0BCh case   27:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 8207B0BCh case   27:*/		return 0x8207B0C0;
		  /* 8207B0C0h */ case   28:  		/* fnmsubs FR13, FR12, FR11, FR13 */
		/* 8207B0C0h case   28:*/		cpu::op::fnmsubs<0>(regs,&regs.FR13,regs.FR12,regs.FR11,regs.FR13);
		/* 8207B0C0h case   28:*/		return 0x8207B0C4;
		  /* 8207B0C4h */ case   29:  		/* fsubs FR0, FR13, FR0 */
		/* 8207B0C4h case   29:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207B0C4h case   29:*/		return 0x8207B0C8;
		  /* 8207B0C8h */ case   30:  		/* fneg FR13, FR0 */
		/* 8207B0C8h case   30:*/		cpu::op::fneg<0>(regs,&regs.FR13,regs.FR0);
		/* 8207B0C8h case   30:*/		return 0x8207B0CC;
		  /* 8207B0CCh */ case   31:  		/* fsel FR0, FR10, FR0, FR13 */
		/* 8207B0CCh case   31:*/		cpu::op::fsel<0>(regs,&regs.FR0,regs.FR10,regs.FR0,regs.FR13);
		/* 8207B0CCh case   31:*/		return 0x8207B0D0;
		  /* 8207B0D0h */ case   32:  		/* stfs FR0, <#[R1 - 12]> */
		/* 8207B0D0h case   32:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF4) );
		/* 8207B0D0h case   32:*/		return 0x8207B0D4;
		  /* 8207B0D4h */ case   33:  		/* fmuls FR13, FR0, FR0 */
		/* 8207B0D4h case   33:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR0,regs.FR0);
		/* 8207B0D4h case   33:*/		return 0x8207B0D8;
		  /* 8207B0D8h */ case   34:  		/* stfs FR13, <#[R1 - 8]> */
		/* 8207B0D8h case   34:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B0D8h case   34:*/		return 0x8207B0DC;
		  /* 8207B0DCh */ case   35:  		/* fmuls FR0, FR13, FR0 */
		/* 8207B0DCh case   35:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207B0DCh case   35:*/		return 0x8207B0E0;
		  /* 8207B0E0h */ case   36:  		/* stfs FR0, <#[R1 - 4]> */
		/* 8207B0E0h case   36:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFFC) );
		/* 8207B0E0h case   36:*/		return 0x8207B0E4;
		  /* 8207B0E4h */ case   37:  		/* lvx VR63, <#[R7]> */
		/* 8207B0E4h case   37:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R7 + 0x00000000) );
		/* 8207B0E4h case   37:*/		return 0x8207B0E8;
		  /* 8207B0E8h */ case   38:  		/* vmulfp128 VR59, VR63, VR63 */
		/* 8207B0E8h case   38:*/		cpu::op::vmulfp128<0>(regs,&regs.VR59,regs.VR63,regs.VR63);
		/* 8207B0E8h case   38:*/		return 0x8207B0EC;
		  /* 8207B0ECh */ case   39:  		/* vspltw VR63, VR63, 1 */
		/* 8207B0ECh case   39:*/		cpu::op::vspltw<0,1>(regs,&regs.VR63,regs.VR63);
		/* 8207B0ECh case   39:*/		return 0x8207B0F0;
		  /* 8207B0F0h */ case   40:  		/* vmulfp128 VR59, VR59, VR63 */
		/* 8207B0F0h case   40:*/		cpu::op::vmulfp128<0>(regs,&regs.VR59,regs.VR59,regs.VR63);
		/* 8207B0F0h case   40:*/		return 0x8207B0F4;
		  /* 8207B0F4h */ case   41:  		/* vspltw VR58, VR59, 3 */
		/* 8207B0F4h case   41:*/		cpu::op::vspltw<0,3>(regs,&regs.VR58,regs.VR59);
		/* 8207B0F4h case   41:*/		return 0x8207B0F8;
		  /* 8207B0F8h */ case   42:  		/* vdot4fp VR62, VR59, VR62 */
		/* 8207B0F8h case   42:*/		cpu::op::vdot4fp<0>(regs,&regs.VR62,regs.VR59,regs.VR62);
		/* 8207B0F8h case   42:*/		return 0x8207B0FC;
		  /* 8207B0FCh */ case   43:  		/* vmulfp128 VR63, VR58, VR63 */
		/* 8207B0FCh case   43:*/		cpu::op::vmulfp128<0>(regs,&regs.VR63,regs.VR58,regs.VR63);
		/* 8207B0FCh case   43:*/		return 0x8207B100;
		  /* 8207B100h */ case   44:  		/* stvx VR62, <#[R10]> */
		/* 8207B100h case   44:*/		cpu::mem::stvx( regs, regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 8207B100h case   44:*/		return 0x8207B104;
		  /* 8207B104h */ case   45:  		/* lfs FR0, <#[R1 - 16]> */
		/* 8207B104h case   45:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B104h case   45:*/		return 0x8207B108;
		  /* 8207B108h */ case   46:  		/* vmulfp128 VR62, VR59, VR63 */
		/* 8207B108h case   46:*/		cpu::op::vmulfp128<0>(regs,&regs.VR62,regs.VR59,regs.VR63);
		/* 8207B108h case   46:*/		return 0x8207B10C;
		  /* 8207B10Ch */ case   47:  		/* vmulfp128 VR63, VR62, VR63 */
		/* 8207B10Ch case   47:*/		cpu::op::vmulfp128<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207B10Ch case   47:*/		return 0x8207B110;
		  /* 8207B110h */ case   48:  		/* vdot4fp VR62, VR62, VR61 */
		/* 8207B110h case   48:*/		cpu::op::vdot4fp<0>(regs,&regs.VR62,regs.VR62,regs.VR61);
		/* 8207B110h case   48:*/		return 0x8207B114;
		  /* 8207B114h */ case   49:  		/* stvx VR62, <#[R8]> */
		/* 8207B114h case   49:*/		cpu::mem::stvx( regs, regs.VR62, (uint32)(regs.R8 + 0x00000000) );
		/* 8207B114h case   49:*/		return 0x8207B118;
		  /* 8207B118h */ case   50:  		/* lfs FR13, <#[R1 - 16]> */
		/* 8207B118h case   50:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B118h case   50:*/		return 0x8207B11C;
		  /* 8207B11Ch */ case   51:  		/* vdot4fp VR63, VR63, VR60 */
		/* 8207B11Ch case   51:*/		cpu::op::vdot4fp<0>(regs,&regs.VR63,regs.VR63,regs.VR60);
		/* 8207B11Ch case   51:*/		return 0x8207B120;
		  /* 8207B120h */ case   52:  		/* stvx VR63, <#[R6]> */
		/* 8207B120h case   52:*/		cpu::mem::stvx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207B120h case   52:*/		return 0x8207B124;
		  /* 8207B124h */ case   53:  		/* lfs FR12, <#[R1 - 16]> */
		/* 8207B124h case   53:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B124h case   53:*/		return 0x8207B128;
		  /* 8207B128h */ case   54:  		/* fadds FR13, FR12, FR13 */
		/* 8207B128h case   54:*/		cpu::op::fadds<0>(regs,&regs.FR13,regs.FR12,regs.FR13);
		/* 8207B128h case   54:*/		return 0x8207B12C;
		  /* 8207B12Ch */ case   55:  		/* fadds FR1, FR13, FR0 */
		/* 8207B12Ch case   55:*/		cpu::op::fadds<0>(regs,&regs.FR1,regs.FR13,regs.FR0);
		/* 8207B12Ch case   55:*/		return 0x8207B130;
		  /* 8207B130h */ case   56:  		/* bclr 20, CR0_LT */
		/* 8207B130h case   56:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207B130h case   56:*/		return 0x8207B134;
	}
	return 0x8207B134;
} // Block from 8207B050h-8207B134h (57 instructions)

//////////////////////////////////////////////////////
// Block at 8207B134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B134);
		  /* 8207B134h */ case    0:  		/* nop */
		/* 8207B134h case    0:*/		cpu::op::nop();
		/* 8207B134h case    0:*/		return 0x8207B138;
		  /* 8207B138h */ case    1:  		/* lis R10, -32256 */
		/* 8207B138h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B138h case    1:*/		return 0x8207B13C;
		  /* 8207B13Ch */ case    2:  		/* stfs FR1, <#[R1 - 32]> */
		/* 8207B13Ch case    2:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207B13Ch case    2:*/		return 0x8207B140;
		  /* 8207B140h */ case    3:  		/* lis R11, -32256 */
		/* 8207B140h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B140h case    3:*/		return 0x8207B144;
		  /* 8207B144h */ case    4:  		/* stfs FR2, <#[R1 - 16]> */
		/* 8207B144h case    4:*/		cpu::mem::store32f( regs, regs.FR2, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B144h case    4:*/		return 0x8207B148;
		  /* 8207B148h */ case    5:  		/* addi R10, R10, 8608 */
		/* 8207B148h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x21A0);
		/* 8207B148h case    5:*/		return 0x8207B14C;
		  /* 8207B14Ch */ case    6:  		/* vspltisw VR59, 0 */
		/* 8207B14Ch case    6:*/		cpu::op::vspltisw<0,0>(regs,&regs.VR59);
		/* 8207B14Ch case    6:*/		return 0x8207B150;
		  /* 8207B150h */ case    7:  		/* lis R8, -32256 */
		/* 8207B150h case    7:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207B150h case    7:*/		return 0x8207B154;
		  /* 8207B154h */ case    8:  		/* vspltisw VR60, 31 */
		/* 8207B154h case    8:*/		cpu::op::vspltisw<0,31>(regs,&regs.VR60);
		/* 8207B154h case    8:*/		return 0x8207B158;
		  /* 8207B158h */ case    9:  		/* addi R9, R1, -32 */
		/* 8207B158h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xFFFFFFE0);
		/* 8207B158h case    9:*/		return 0x8207B15C;
		  /* 8207B15Ch */ case   10:  		/* vspltisw VR58, 23 */
		/* 8207B15Ch case   10:*/		cpu::op::vspltisw<0,23>(regs,&regs.VR58);
		/* 8207B15Ch case   10:*/		return 0x8207B160;
		  /* 8207B160h */ case   11:  		/* vspltisw VR55, 1 */
		/* 8207B160h case   11:*/		cpu::op::vspltisw<0,1>(regs,&regs.VR55);
		/* 8207B160h case   11:*/		return 0x8207B164;
		  /* 8207B164h */ case   12:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 8207B164h case   12:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 8207B164h case   12:*/		return 0x8207B168;
		  /* 8207B168h */ case   13:  		/* addi R11, R8, 8624 */
		/* 8207B168h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x21B0);
		/* 8207B168h case   13:*/		return 0x8207B16C;
		  /* 8207B16Ch */ case   14:  		/* lvx VR62, <#[R10]> */
		/* 8207B16Ch case   14:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 8207B16Ch case   14:*/		return 0x8207B170;
	}
	return 0x8207B170;
} // Block from 8207B134h-8207B170h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207B170h
// Function '?XMScalarSin@@YAMM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B170);
		  /* 8207B170h */ case    0:  		/* vupkd3d128 VR63, VR59, 1 */
		/* 8207B170h case    0:*/		cpu::op::vupkd3d128<0,1>(regs,&regs.VR63,regs.VR59);
		/* 8207B170h case    0:*/		return 0x8207B174;
		  /* 8207B174h */ case    1:  		/* lis R10, -32256 */
		/* 8207B174h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B174h case    1:*/		return 0x8207B178;
		  /* 8207B178h */ case    2:  		/* vslw VR57, VR60, VR60 */
		/* 8207B178h case    2:*/		cpu::op::vslw<0>(regs,&regs.VR57,regs.VR60,regs.VR60);
		/* 8207B178h case    2:*/		return 0x8207B17C;
		  /* 8207B17Ch */ case    3:  		/* addi R8, R1, -16 */
		/* 8207B17Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xFFFFFFF0);
		/* 8207B17Ch case    3:*/		return 0x8207B180;
		  /* 8207B180h */ case    4:  		/* vspltw VR30, VR62, 1 */
		/* 8207B180h case    4:*/		cpu::op::vspltw<0,1>(regs,&regs.VR30,regs.VR62);
		/* 8207B180h case    4:*/		return 0x8207B184;
		  /* 8207B184h */ case    5:  		/* addi R10, R10, 8576 */
		/* 8207B184h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 8207B184h case    5:*/		return 0x8207B188;
		  /* 8207B188h */ case    6:  		/* vspltw VR31, VR62, 0 */
		/* 8207B188h case    6:*/		cpu::op::vspltw<0,0>(regs,&regs.VR31,regs.VR62);
		/* 8207B188h case    6:*/		return 0x8207B18C;
		  /* 8207B18Ch */ case    7:  		/* vspltw VR56, VR63, 3 */
		/* 8207B18Ch case    7:*/		cpu::op::vspltw<0,3>(regs,&regs.VR56,regs.VR63);
		/* 8207B18Ch case    7:*/		return 0x8207B190;
		  /* 8207B190h */ case    8:  		/* lvx VR63, <#[R11]> */
		/* 8207B190h case    8:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B190h case    8:*/		return 0x8207B194;
		  /* 8207B194h */ case    9:  		/* vspltw VR28, VR62, 2 */
		/* 8207B194h case    9:*/		cpu::op::vspltw<0,2>(regs,&regs.VR28,regs.VR62);
		/* 8207B194h case    9:*/		return 0x8207B198;
		  /* 8207B198h */ case   10:  		/* stfs FR0, <#[R1 - 28]> */
		/* 8207B198h case   10:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFE4) );
		/* 8207B198h case   10:*/		return 0x8207B19C;
		  /* 8207B19Ch */ case   11:  		/* vspltw VR2, VR63, 0 */
		/* 8207B19Ch case   11:*/		cpu::op::vspltw<0,0>(regs,&regs.VR2,regs.VR63);
		/* 8207B19Ch case   11:*/		return 0x8207B1A0;
		  /* 8207B1A0h */ case   12:  		/* stfs FR0, <#[R1 - 24]> */
		/* 8207B1A0h case   12:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207B1A0h case   12:*/		return 0x8207B1A4;
		  /* 8207B1A4h */ case   13:  		/* vspltw VR1, VR63, 1 */
		/* 8207B1A4h case   13:*/		cpu::op::vspltw<0,1>(regs,&regs.VR1,regs.VR63);
		/* 8207B1A4h case   13:*/		return 0x8207B1A8;
		  /* 8207B1A8h */ case   14:  		/* stfs FR0, <#[R1 - 20]> */
		/* 8207B1A8h case   14:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFEC) );
		/* 8207B1A8h case   14:*/		return 0x8207B1AC;
		  /* 8207B1ACh */ case   15:  		/* vspltw VR29, VR63, 2 */
		/* 8207B1ACh case   15:*/		cpu::op::vspltw<0,2>(regs,&regs.VR29,regs.VR63);
		/* 8207B1ACh case   15:*/		return 0x8207B1B0;
		  /* 8207B1B0h */ case   16:  		/* stfs FR0, <#[R1 - 12]> */
		/* 8207B1B0h case   16:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF4) );
		/* 8207B1B0h case   16:*/		return 0x8207B1B4;
		  /* 8207B1B4h */ case   17:  		/* vspltw VR27, VR63, 3 */
		/* 8207B1B4h case   17:*/		cpu::op::vspltw<0,3>(regs,&regs.VR27,regs.VR63);
		/* 8207B1B4h case   17:*/		return 0x8207B1B8;
		  /* 8207B1B8h */ case   18:  		/* lvx VR63, <#[R10]> */
		/* 8207B1B8h case   18:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R10 + 0x00000000) );
		/* 8207B1B8h case   18:*/		return 0x8207B1BC;
		  /* 8207B1BCh */ case   19:  		/* vspltw VR26, VR62, 3 */
		/* 8207B1BCh case   19:*/		cpu::op::vspltw<0,3>(regs,&regs.VR26,regs.VR62);
		/* 8207B1BCh case   19:*/		return 0x8207B1C0;
		  /* 8207B1C0h */ case   20:  		/* stfs FR0, <#[R1 - 8]> */
		/* 8207B1C0h case   20:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B1C0h case   20:*/		return 0x8207B1C4;
		  /* 8207B1C4h */ case   21:  		/* vspltw VR5, VR63, 0 */
		/* 8207B1C4h case   21:*/		cpu::op::vspltw<0,0>(regs,&regs.VR5,regs.VR63);
		/* 8207B1C4h case   21:*/		return 0x8207B1C8;
		  /* 8207B1C8h */ case   22:  		/* stfs FR0, <#[R1 - 4]> */
		/* 8207B1C8h case   22:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0xFFFFFFFC) );
		/* 8207B1C8h case   22:*/		return 0x8207B1CC;
		  /* 8207B1CCh */ case   23:  		/* vspltw VR6, VR63, 1 */
		/* 8207B1CCh case   23:*/		cpu::op::vspltw<0,1>(regs,&regs.VR6,regs.VR63);
		/* 8207B1CCh case   23:*/		return 0x8207B1D0;
		  /* 8207B1D0h */ case   24:  		/* mr VR13, VR56 */
		/* 8207B1D0h case   24:*/		regs.VR13 = regs.VR56;
		/* 8207B1D0h case   24:*/		return 0x8207B1D4;
		  /* 8207B1D4h */ case   25:  		/* vspltw VR8, VR63, 2 */
		/* 8207B1D4h case   25:*/		cpu::op::vspltw<0,2>(regs,&regs.VR8,regs.VR63);
		/* 8207B1D4h case   25:*/		return 0x8207B1D8;
		  /* 8207B1D8h */ case   26:  		/* lvx VR62, <#[R9]> */
		/* 8207B1D8h case   26:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R9 + 0x00000000) );
		/* 8207B1D8h case   26:*/		return 0x8207B1DC;
		  /* 8207B1DCh */ case   27:  		/* vspltw VR11, VR63, 3 */
		/* 8207B1DCh case   27:*/		cpu::op::vspltw<0,3>(regs,&regs.VR11,regs.VR63);
		/* 8207B1DCh case   27:*/		return 0x8207B1E0;
		  /* 8207B1E0h */ case   28:  		/* lvx VR63, <#[R8]> */
		/* 8207B1E0h case   28:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R8 + 0x00000000) );
		/* 8207B1E0h case   28:*/		return 0x8207B1E4;
		  /* 8207B1E4h */ case   29:  		/* vandc VR61, VR62, VR57 */
		/* 8207B1E4h case   29:*/		cpu::op::vandc<0>(regs,&regs.VR61,regs.VR62,regs.VR57);
		/* 8207B1E4h case   29:*/		return 0x8207B1E8;
		  /* 8207B1E8h */ case   30:  		/* lis R11, -32256 */
		/* 8207B1E8h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B1E8h case   30:*/		return 0x8207B1EC;
		  /* 8207B1ECh */ case   31:  		/* mr VR0, VR61 */
		/* 8207B1ECh case   31:*/		regs.VR0 = regs.VR61;
		/* 8207B1ECh case   31:*/		return 0x8207B1F0;
		  /* 8207B1F0h */ case   32:  		/* vlogefp VR53, VR61 */
		/* 8207B1F0h case   32:*/		cpu::op::vlogefp<0>(regs,&regs.VR53,regs.VR61);
		/* 8207B1F0h case   32:*/		return 0x8207B1F4;
		  /* 8207B1F4h */ case   33:  		/* vslw VR3, VR60, VR58 */
		/* 8207B1F4h case   33:*/		cpu::op::vslw<0>(regs,&regs.VR3,regs.VR60,regs.VR58);
		/* 8207B1F4h case   33:*/		return 0x8207B1F8;
		  /* 8207B1F8h */ case   34:  		/* addi R11, R11, 8592 */
		/* 8207B1F8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2190);
		/* 8207B1F8h case   34:*/		return 0x8207B1FC;
		  /* 8207B1FCh */ case   35:  		/* vcfpsxws VR54, VR63, 0 */
		/* 8207B1FCh case   35:*/		cpu::op::vcfpsxws<0,0>(regs,&regs.VR54,regs.VR63);
		/* 8207B1FCh case   35:*/		return 0x8207B200;
		  /* 8207B200h */ case   36:  		/* vcmpeqfp VR9, VR63, VR59 */
		/* 8207B200h case   36:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR9,regs.VR63,regs.VR59);
		/* 8207B200h case   36:*/		return 0x8207B204;
		  /* 8207B204h */ case   37:  		/* vsel VR3, VR0, VR13, VR3 */
		/* 8207B204h case   37:*/		cpu::op::vsel<0>(regs,&regs.VR3,regs.VR0,regs.VR13,regs.VR3);
		/* 8207B204h case   37:*/		return 0x8207B208;
		  /* 8207B208h */ case   38:  		/* lvx VR61, <#[R11]> */
		/* 8207B208h case   38:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B208h case   38:*/		return 0x8207B20C;
		  /* 8207B20Ch */ case   39:  		/* vspltw VR12, VR61, 0 */
		/* 8207B20Ch case   39:*/		cpu::op::vspltw<0,0>(regs,&regs.VR12,regs.VR61);
		/* 8207B20Ch case   39:*/		return 0x8207B210;
		  /* 8207B210h */ case   40:  		/* vsubfp VR0, VR3, VR56 */
		/* 8207B210h case   40:*/		cpu::op::vsubfp<0>(regs,&regs.VR0,regs.VR3,regs.VR56);
		/* 8207B210h case   40:*/		return 0x8207B214;
		  /* 8207B214h */ case   41:  		/* vspltw VR4, VR61, 1 */
		/* 8207B214h case   41:*/		cpu::op::vspltw<0,1>(regs,&regs.VR4,regs.VR61);
		/* 8207B214h case   41:*/		return 0x8207B218;
		  /* 8207B218h */ case   42:  		/* vspltw VR7, VR61, 2 */
		/* 8207B218h case   42:*/		cpu::op::vspltw<0,2>(regs,&regs.VR7,regs.VR61);
		/* 8207B218h case   42:*/		return 0x8207B21C;
		  /* 8207B21Ch */ case   43:  		/* vspltw VR10, VR61, 3 */
		/* 8207B21Ch case   43:*/		cpu::op::vspltw<0,3>(regs,&regs.VR10,regs.VR61);
		/* 8207B21Ch case   43:*/		return 0x8207B220;
		  /* 8207B220h */ case   44:  		/* vrfim VR61, VR53 */
		/* 8207B220h case   44:*/		cpu::op::vrfim<0>(regs,&regs.VR61,regs.VR53);
		/* 8207B220h case   44:*/		return 0x8207B224;
		  /* 8207B224h */ case   45:  		/* vand VR54, VR54, VR55 */
		/* 8207B224h case   45:*/		cpu::op::vand<0>(regs,&regs.VR54,regs.VR54,regs.VR55);
		/* 8207B224h case   45:*/		return 0x8207B228;
		  /* 8207B228h */ case   46:  		/* vmulfp128 VR13, VR0, VR0 */
		/* 8207B228h case   46:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR0,regs.VR0);
		/* 8207B228h case   46:*/		return 0x8207B22C;
		  /* 8207B22Ch */ case   47:  		/* vmaddfp VR1, VR0, VR1, VR2 */
		/* 8207B22Ch case   47:*/		cpu::op::vmaddfp<0>(regs,&regs.VR1,regs.VR0,regs.VR1,regs.VR2);
		/* 8207B22Ch case   47:*/		return 0x8207B230;
		  /* 8207B230h */ case   48:  		/* vmaddfp VR31, VR0, VR30, VR31 */
		/* 8207B230h case   48:*/		cpu::op::vmaddfp<0>(regs,&regs.VR31,regs.VR0,regs.VR30,regs.VR31);
		/* 8207B230h case   48:*/		return 0x8207B234;
		  /* 8207B234h */ case   49:  		/* vmulfp128 VR2, VR0, VR63 */
		/* 8207B234h case   49:*/		cpu::op::vmulfp128<0>(regs,&regs.VR2,regs.VR0,regs.VR63);
		/* 8207B234h case   49:*/		return 0x8207B238;
		  /* 8207B238h */ case   50:  		/* vmulfp128 VR3, VR61, VR63 */
		/* 8207B238h case   50:*/		cpu::op::vmulfp128<0>(regs,&regs.VR3,regs.VR61,regs.VR63);
		/* 8207B238h case   50:*/		return 0x8207B23C;
		  /* 8207B23Ch */ case   51:  		/* vmulfp128 VR0, VR0, VR13 */
		/* 8207B23Ch case   51:*/		cpu::op::vmulfp128<0>(regs,&regs.VR0,regs.VR0,regs.VR13);
		/* 8207B23Ch case   51:*/		return 0x8207B240;
		  /* 8207B240h */ case   52:  		/* vmaddfp VR1, VR13, VR29, VR1 */
		/* 8207B240h case   52:*/		cpu::op::vmaddfp<0>(regs,&regs.VR1,regs.VR13,regs.VR29,regs.VR1);
		/* 8207B240h case   52:*/		return 0x8207B244;
		  /* 8207B244h */ case   53:  		/* vmaddfp VR31, VR13, VR28, VR31 */
		/* 8207B244h case   53:*/		cpu::op::vmaddfp<0>(regs,&regs.VR31,regs.VR13,regs.VR28,regs.VR31);
		/* 8207B244h case   53:*/		return 0x8207B248;
		  /* 8207B248h */ case   54:  		/* vmulfp128 VR30, VR13, VR13 */
		/* 8207B248h case   54:*/		cpu::op::vmulfp128<0>(regs,&regs.VR30,regs.VR13,regs.VR13);
		/* 8207B248h case   54:*/		return 0x8207B24C;
		  /* 8207B24Ch */ case   55:  		/* vmaddfp VR13, VR0, VR27, VR1 */
		/* 8207B24Ch case   55:*/		cpu::op::vmaddfp<0>(regs,&regs.VR13,regs.VR0,regs.VR27,regs.VR1);
		/* 8207B24Ch case   55:*/		return 0x8207B250;
	}
	return 0x8207B250;
} // Block from 8207B170h-8207B250h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8207B250h
// Function '?_pow@D3D@@YAMMM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B250);
		  /* 8207B250h */ case    0:  		/* vmaddfp VR0, VR0, VR26, VR31 */
		/* 8207B250h case    0:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR26,regs.VR31);
		/* 8207B250h case    0:*/		return 0x8207B254;
		  /* 8207B254h */ case    1:  		/* vmaddfp VR0, VR30, VR0, VR13 */
		/* 8207B254h case    1:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR30,regs.VR0,regs.VR13);
		/* 8207B254h case    1:*/		return 0x8207B258;
		  /* 8207B258h */ case    2:  		/* vmaddfp VR0, VR2, VR0, VR3 */
		/* 8207B258h case    2:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR2,regs.VR0,regs.VR3);
		/* 8207B258h case    2:*/		return 0x8207B25C;
		  /* 8207B25Ch */ case    3:  		/* vrfim VR61, VR0 */
		/* 8207B25Ch case    3:*/		cpu::op::vrfim<0>(regs,&regs.VR61,regs.VR0);
		/* 8207B25Ch case    3:*/		return 0x8207B260;
		  /* 8207B260h */ case    4:  		/* vsubfp VR0, VR0, VR61 */
		/* 8207B260h case    4:*/		cpu::op::vsubfp<0>(regs,&regs.VR0,regs.VR0,regs.VR61);
		/* 8207B260h case    4:*/		return 0x8207B264;
		  /* 8207B264h */ case    5:  		/* vexptefp VR61, VR61 */
		/* 8207B264h case    5:*/		cpu::op::vexptefp<0>(regs,&regs.VR61,regs.VR61);
		/* 8207B264h case    5:*/		return 0x8207B268;
		  /* 8207B268h */ case    6:  		/* vmulfp128 VR13, VR0, VR0 */
		/* 8207B268h case    6:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR0,regs.VR0);
		/* 8207B268h case    6:*/		return 0x8207B26C;
		  /* 8207B26Ch */ case    7:  		/* vmaddfp VR4, VR0, VR4, VR12 */
		/* 8207B26Ch case    7:*/		cpu::op::vmaddfp<0>(regs,&regs.VR4,regs.VR0,regs.VR4,regs.VR12);
		/* 8207B26Ch case    7:*/		return 0x8207B270;
		  /* 8207B270h */ case    8:  		/* vmaddfp VR6, VR0, VR6, VR5 */
		/* 8207B270h case    8:*/		cpu::op::vmaddfp<0>(regs,&regs.VR6,regs.VR0,regs.VR6,regs.VR5);
		/* 8207B270h case    8:*/		return 0x8207B274;
		  /* 8207B274h */ case    9:  		/* vmulfp128 VR0, VR0, VR13 */
		/* 8207B274h case    9:*/		cpu::op::vmulfp128<0>(regs,&regs.VR0,regs.VR0,regs.VR13);
		/* 8207B274h case    9:*/		return 0x8207B278;
		  /* 8207B278h */ case   10:  		/* vmaddfp VR7, VR13, VR7, VR4 */
		/* 8207B278h case   10:*/		cpu::op::vmaddfp<0>(regs,&regs.VR7,regs.VR13,regs.VR7,regs.VR4);
		/* 8207B278h case   10:*/		return 0x8207B27C;
		  /* 8207B27Ch */ case   11:  		/* vmaddfp VR8, VR13, VR8, VR6 */
		/* 8207B27Ch case   11:*/		cpu::op::vmaddfp<0>(regs,&regs.VR8,regs.VR13,regs.VR8,regs.VR6);
		/* 8207B27Ch case   11:*/		return 0x8207B280;
		  /* 8207B280h */ case   12:  		/* vslw VR54, VR54, VR60 */
		/* 8207B280h case   12:*/		cpu::op::vslw<0>(regs,&regs.VR54,regs.VR54,regs.VR60);
		/* 8207B280h case   12:*/		return 0x8207B284;
		  /* 8207B284h */ case   13:  		/* vand VR57, VR62, VR57 */
		/* 8207B284h case   13:*/		cpu::op::vand<0>(regs,&regs.VR57,regs.VR62,regs.VR57);
		/* 8207B284h case   13:*/		return 0x8207B288;
		  /* 8207B288h */ case   14:  		/* vmaddfp VR7, VR0, VR10, VR7 */
		/* 8207B288h case   14:*/		cpu::op::vmaddfp<0>(regs,&regs.VR7,regs.VR0,regs.VR10,regs.VR7);
		/* 8207B288h case   14:*/		return 0x8207B28C;
		  /* 8207B28Ch */ case   15:  		/* vmulfp128 VR13, VR13, VR13 */
		/* 8207B28Ch case   15:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR13,regs.VR13);
		/* 8207B28Ch case   15:*/		return 0x8207B290;
		  /* 8207B290h */ case   16:  		/* vslw VR60, VR60, VR58 */
		/* 8207B290h case   16:*/		cpu::op::vslw<0>(regs,&regs.VR60,regs.VR60,regs.VR58);
		/* 8207B290h case   16:*/		return 0x8207B294;
		  /* 8207B294h */ case   17:  		/* vcmpeqfp VR58, VR62, VR59 */
		/* 8207B294h case   17:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR58,regs.VR62,regs.VR59);
		/* 8207B294h case   17:*/		return 0x8207B298;
		  /* 8207B298h */ case   18:  		/* addi R11, R1, -16 */
		/* 8207B298h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xFFFFFFF0);
		/* 8207B298h case   18:*/		return 0x8207B29C;
		  /* 8207B29Ch */ case   19:  		/* vcmpgtfp VR53, VR59, VR63 */
		/* 8207B29Ch case   19:*/		cpu::op::vcmpgtfp<0>(regs,&regs.VR53,regs.VR59,regs.VR63);
		/* 8207B29Ch case   19:*/		return 0x8207B2A0;
		  /* 8207B2A0h */ case   20:  		/* vand VR57, VR57, VR54 */
		/* 8207B2A0h case   20:*/		cpu::op::vand<0>(regs,&regs.VR57,regs.VR57,regs.VR54);
		/* 8207B2A0h case   20:*/		return 0x8207B2A4;
		  /* 8207B2A4h */ case   21:  		/* vrfiz VR54, VR63 */
		/* 8207B2A4h case   21:*/		cpu::op::vrfiz<0>(regs,&regs.VR54,regs.VR63);
		/* 8207B2A4h case   21:*/		return 0x8207B2A8;
		  /* 8207B2A8h */ case   22:  		/* vcmpgtfp VR62, VR59, VR62 */
		/* 8207B2A8h case   22:*/		cpu::op::vcmpgtfp<0>(regs,&regs.VR62,regs.VR59,regs.VR62);
		/* 8207B2A8h case   22:*/		return 0x8207B2AC;
		  /* 8207B2ACh */ case   23:  		/* vsrw VR10, VR60, VR55 */
		/* 8207B2ACh case   23:*/		cpu::op::vsrw<0>(regs,&regs.VR10,regs.VR60,regs.VR55);
		/* 8207B2ACh case   23:*/		return 0x8207B2B0;
		  /* 8207B2B0h */ case   24:  		/* vmaddfp VR8, VR0, VR11, VR8 */
		/* 8207B2B0h case   24:*/		cpu::op::vmaddfp<0>(regs,&regs.VR8,regs.VR0,regs.VR11,regs.VR8);
		/* 8207B2B0h case   24:*/		return 0x8207B2B4;
		  /* 8207B2B4h */ case   25:  		/* vor VR11, VR59, VR57 */
		/* 8207B2B4h case   25:*/		cpu::op::vor<0>(regs,&regs.VR11,regs.VR59,regs.VR57);
		/* 8207B2B4h case   25:*/		return 0x8207B2B8;
		  /* 8207B2B8h */ case   26:  		/* mr VR0, VR56 */
		/* 8207B2B8h case   26:*/		regs.VR0 = regs.VR56;
		/* 8207B2B8h case   26:*/		return 0x8207B2BC;
		  /* 8207B2BCh */ case   27:  		/* vor VR60, VR58, VR9 */
		/* 8207B2BCh case   27:*/		cpu::op::vor<0>(regs,&regs.VR60,regs.VR58,regs.VR9);
		/* 8207B2BCh case   27:*/		return 0x8207B2C0;
		  /* 8207B2C0h */ case   28:  		/* vcmpeqfp VR63, VR63, VR54 */
		/* 8207B2C0h case   28:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR63,regs.VR63,regs.VR54);
		/* 8207B2C0h case   28:*/		return 0x8207B2C4;
		  /* 8207B2C4h */ case   29:  		/* vmaddfp VR7, VR13, VR8, VR7 */
		/* 8207B2C4h case   29:*/		cpu::op::vmaddfp<0>(regs,&regs.VR7,regs.VR13,regs.VR8,regs.VR7);
		/* 8207B2C4h case   29:*/		return 0x8207B2C8;
		  /* 8207B2C8h */ case   30:  		/* vandc VR13, VR58, VR53 */
		/* 8207B2C8h case   30:*/		cpu::op::vandc<0>(regs,&regs.VR13,regs.VR58,regs.VR53);
		/* 8207B2C8h case   30:*/		return 0x8207B2CC;
		  /* 8207B2CCh */ case   31:  		/* vsel VR13, VR10, VR11, VR13 */
		/* 8207B2CCh case   31:*/		cpu::op::vsel<0>(regs,&regs.VR13,regs.VR10,regs.VR11,regs.VR13);
		/* 8207B2CCh case   31:*/		return 0x8207B2D0;
		  /* 8207B2D0h */ case   32:  		/* vandc VR63, VR62, VR63 */
		/* 8207B2D0h case   32:*/		cpu::op::vandc<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207B2D0h case   32:*/		return 0x8207B2D4;
		  /* 8207B2D4h */ case   33:  		/* vsel VR8, VR13, VR0, VR9 */
		/* 8207B2D4h case   33:*/		cpu::op::vsel<0>(regs,&regs.VR8,regs.VR13,regs.VR0,regs.VR9);
		/* 8207B2D4h case   33:*/		return 0x8207B2D8;
		  /* 8207B2D8h */ case   34:  		/* mr VR62, VR7 */
		/* 8207B2D8h case   34:*/		regs.VR62 = regs.VR7;
		/* 8207B2D8h case   34:*/		return 0x8207B2DC;
		  /* 8207B2DCh */ case   35:  		/* vor VR7, VR63, VR60 */
		/* 8207B2DCh case   35:*/		cpu::op::vor<0>(regs,&regs.VR7,regs.VR63,regs.VR60);
		/* 8207B2DCh case   35:*/		return 0x8207B2E0;
		  /* 8207B2E0h */ case   36:  		/* vrefp VR0, VR62 */
		/* 8207B2E0h case   36:*/		cpu::op::vrefp<0>(regs,&regs.VR0,regs.VR62);
		/* 8207B2E0h case   36:*/		return 0x8207B2E4;
		  /* 8207B2E4h */ case   37:  		/* mr VR9, VR62 */
		/* 8207B2E4h case   37:*/		regs.VR9 = regs.VR62;
		/* 8207B2E4h case   37:*/		return 0x8207B2E8;
		  /* 8207B2E8h */ case   38:  		/* mr VR10, VR62 */
		/* 8207B2E8h case   38:*/		regs.VR10 = regs.VR62;
		/* 8207B2E8h case   38:*/		return 0x8207B2EC;
		  /* 8207B2ECh */ case   39:  		/* vnmsubfp VR6, VR9, VR0, VR12 */
		/* 8207B2ECh case   39:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR6,regs.VR9,regs.VR0,regs.VR12);
		/* 8207B2ECh case   39:*/		return 0x8207B2F0;
		  /* 8207B2F0h */ case   40:  		/* mr VR13, VR0 */
		/* 8207B2F0h case   40:*/		regs.VR13 = regs.VR0;
		/* 8207B2F0h case   40:*/		return 0x8207B2F4;
		  /* 8207B2F4h */ case   41:  		/* vmaddfp VR0, VR0, VR6, VR0 */
		/* 8207B2F4h case   41:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR6,regs.VR0);
		/* 8207B2F4h case   41:*/		return 0x8207B2F8;
		  /* 8207B2F8h */ case   42:  		/* vnmsubfp VR12, VR10, VR0, VR12 */
		/* 8207B2F8h case   42:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR12,regs.VR10,regs.VR0,regs.VR12);
		/* 8207B2F8h case   42:*/		return 0x8207B2FC;
		  /* 8207B2FCh */ case   43:  		/* vcmpeqfp VR9, VR0, VR0 */
		/* 8207B2FCh case   43:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR9,regs.VR0,regs.VR0);
		/* 8207B2FCh case   43:*/		return 0x8207B300;
		  /* 8207B300h */ case   44:  		/* vmaddfp VR0, VR0, VR12, VR0 */
		/* 8207B300h case   44:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR12,regs.VR0);
		/* 8207B300h case   44:*/		return 0x8207B304;
		  /* 8207B304h */ case   45:  		/* vsel VR12, VR13, VR0, VR9 */
		/* 8207B304h case   45:*/		cpu::op::vsel<0>(regs,&regs.VR12,regs.VR13,regs.VR0,regs.VR9);
		/* 8207B304h case   45:*/		return 0x8207B308;
		  /* 8207B308h */ case   46:  		/* vmulfp128 VR63, VR61, VR12 */
		/* 8207B308h case   46:*/		cpu::op::vmulfp128<0>(regs,&regs.VR63,regs.VR61,regs.VR12);
		/* 8207B308h case   46:*/		return 0x8207B30C;
		  /* 8207B30Ch */ case   47:  		/* vor VR0, VR63, VR57 */
		/* 8207B30Ch case   47:*/		cpu::op::vor<0>(regs,&regs.VR0,regs.VR63,regs.VR57);
		/* 8207B30Ch case   47:*/		return 0x8207B310;
		  /* 8207B310h */ case   48:  		/* vsel VR13, VR0, VR8, VR7 */
		/* 8207B310h case   48:*/		cpu::op::vsel<0>(regs,&regs.VR13,regs.VR0,regs.VR8,regs.VR7);
		/* 8207B310h case   48:*/		return 0x8207B314;
		  /* 8207B314h */ case   49:  		/* stvx VR13, <#[R11]> */
		/* 8207B314h case   49:*/		cpu::mem::stvx( regs, regs.VR13, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B314h case   49:*/		return 0x8207B318;
		  /* 8207B318h */ case   50:  		/* lfs FR1, <#[R1 - 16]> */
		/* 8207B318h case   50:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B318h case   50:*/		return 0x8207B31C;
		  /* 8207B31Ch */ case   51:  		/* bclr 20, CR0_LT */
		/* 8207B31Ch case   51:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207B31Ch case   51:*/		return 0x8207B320;
	}
	return 0x8207B320;
} // Block from 8207B250h-8207B320h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8207B320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B320);
		  /* 8207B320h */ case    0:  		/* mfspr R12, LR */
		/* 8207B320h case    0:*/		regs.R12 = regs.LR;
		/* 8207B320h case    0:*/		return 0x8207B324;
		  /* 8207B324h */ case    1:  		/* bl 89900 */
		/* 8207B324h case    1:*/		regs.LR = 0x8207B328; return 0x82091250;
		/* 8207B324h case    1:*/		return 0x8207B328;
		  /* 8207B328h */ case    2:  		/* stwu R1, <#[R1 - 928]> */
		/* 8207B328h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFC60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFC60);
		/* 8207B328h case    2:*/		return 0x8207B32C;
		  /* 8207B32Ch */ case    3:  		/* li R27, 0 */
		/* 8207B32Ch case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8207B32Ch case    3:*/		return 0x8207B330;
		  /* 8207B330h */ case    4:  		/* mullw. R9, R5, R6 */
		/* 8207B330h case    4:*/		cpu::op::mullw<1>(regs,&regs.R9,regs.R5,regs.R6);
		/* 8207B330h case    4:*/		return 0x8207B334;
		  /* 8207B334h */ case    5:  		/* mr R10, R27 */
		/* 8207B334h case    5:*/		regs.R10 = regs.R27;
		/* 8207B334h case    5:*/		return 0x8207B338;
		  /* 8207B338h */ case    6:  		/* bc 4, CR0_GT, 40 */
		/* 8207B338h case    6:*/		if ( !regs.CR[0].gt ) { return 0x8207B360;  }
		/* 8207B338h case    6:*/		return 0x8207B33C;
		  /* 8207B33Ch */ case    7:  		/* addi R8, R1, 224 */
		/* 8207B33Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE0);
		/* 8207B33Ch case    7:*/		return 0x8207B340;
		  /* 8207B340h */ case    8:  		/* addi R11, R1, 224 */
		/* 8207B340h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 8207B340h case    8:*/		return 0x8207B344;
		  /* 8207B344h */ case    9:  		/* subf R8, R8, R3 */
		/* 8207B344h case    9:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R3);
		/* 8207B344h case    9:*/		return 0x8207B348;
		  /* 8207B348h */ case   10:  		/* addi R10, R10, 1 */
		/* 8207B348h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8207B348h case   10:*/		return 0x8207B34C;
		  /* 8207B34Ch */ case   11:  		/* lfsx FR0, <#[R8 + R11]> */
		/* 8207B34Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8207B34Ch case   11:*/		return 0x8207B350;
		  /* 8207B350h */ case   12:  		/* stfs FR0, <#[R11]> */
		/* 8207B350h case   12:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B350h case   12:*/		return 0x8207B354;
		  /* 8207B354h */ case   13:  		/* addi R11, R11, 4 */
		/* 8207B354h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B354h case   13:*/		return 0x8207B358;
		  /* 8207B358h */ case   14:  		/* cmpw CR6, R10, R9 */
		/* 8207B358h case   14:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 8207B358h case   14:*/		return 0x8207B35C;
		  /* 8207B35Ch */ case   15:  		/* bc 12, CR6_LT, -20 */
		/* 8207B35Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x8207B348;  }
		/* 8207B35Ch case   15:*/		return 0x8207B360;
	}
	return 0x8207B360;
} // Block from 8207B320h-8207B360h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207B360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B360);
		  /* 8207B360h */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 8207B360h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B360h case    0:*/		return 0x8207B364;
		  /* 8207B364h */ case    1:  		/* bc 4, CR6_GT, 32 */
		/* 8207B364h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207B384;  }
		/* 8207B364h case    1:*/		return 0x8207B368;
		  /* 8207B368h */ case    2:  		/* addi R11, R1, 28 */
		/* 8207B368h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x1C);
		/* 8207B368h case    2:*/		return 0x8207B36C;
		  /* 8207B36Ch */ case    3:  		/* li R10, -1 */
		/* 8207B36Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8207B36Ch case    3:*/		return 0x8207B370;
		  /* 8207B370h */ case    4:  		/* cmplwi CR0, R5, 0 */
		/* 8207B370h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000000);
		/* 8207B370h case    4:*/		return 0x8207B374;
		  /* 8207B374h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 8207B374h case    5:*/		if ( regs.CR[0].eq ) { return 0x8207B384;  }
		/* 8207B374h case    5:*/		return 0x8207B378;
		  /* 8207B378h */ case    6:  		/* mtspr CTR, R5 */
		/* 8207B378h case    6:*/		regs.CTR = regs.R5;
		/* 8207B378h case    6:*/		return 0x8207B37C;
		  /* 8207B37Ch */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 8207B37Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207B37Ch case    7:*/		return 0x8207B380;
		  /* 8207B380h */ case    8:  		/* bc 16, CR0_LT, -4 */
		/* 8207B380h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B37C;  }
		/* 8207B380h case    8:*/		return 0x8207B384;
	}
	return 0x8207B384;
} // Block from 8207B360h-8207B384h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207B384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B384);
		  /* 8207B384h */ case    0:  		/* srawi R11, R5, 1 */
		/* 8207B384h case    0:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R5);
		/* 8207B384h case    0:*/		return 0x8207B388;
		  /* 8207B388h */ case    1:  		/* addi R10, R5, -1 */
		/* 8207B388h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xFFFFFFFF);
		/* 8207B388h case    1:*/		return 0x8207B38C;
		  /* 8207B38Ch */ case    2:  		/* addze R11, R11 */
		/* 8207B38Ch case    2:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8207B38Ch case    2:*/		return 0x8207B390;
		  /* 8207B390h */ case    3:  		/* srawi R10, R10, 1 */
		/* 8207B390h case    3:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R10);
		/* 8207B390h case    3:*/		return 0x8207B394;
		  /* 8207B394h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207B394h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207B394h case    4:*/		return 0x8207B398;
		  /* 8207B398h */ case    5:  		/* addze R10, R10 */
		/* 8207B398h case    5:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8207B398h case    5:*/		return 0x8207B39C;
		  /* 8207B39Ch */ case    6:  		/* addi R9, R1, 32 */
		/* 8207B39Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x20);
		/* 8207B39Ch case    6:*/		return 0x8207B3A0;
		  /* 8207B3A0h */ case    7:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8207B3A0h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8207B3A0h case    7:*/		return 0x8207B3A4;
		  /* 8207B3A4h */ case    8:  		/* addi R8, R1, 32 */
		/* 8207B3A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x20);
		/* 8207B3A4h case    8:*/		return 0x8207B3A8;
		  /* 8207B3A8h */ case    9:  		/* li R29, 1 */
		/* 8207B3A8h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8207B3A8h case    9:*/		return 0x8207B3AC;
		  /* 8207B3ACh */ case   10:  		/* cmpwi CR6, R5, 2 */
		/* 8207B3ACh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000002);
		/* 8207B3ACh case   10:*/		return 0x8207B3B0;
		  /* 8207B3B0h */ case   11:  		/* stwx R27, <#[R11 + R9]> */
		/* 8207B3B0h case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207B3B0h case   11:*/		return 0x8207B3B4;
		  /* 8207B3B4h */ case   12:  		/* stwx R27, <#[R10 + R8]> */
		/* 8207B3B4h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8207B3B4h case   12:*/		return 0x8207B3B8;
		  /* 8207B3B8h */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 8207B3B8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8207B3EC;  }
		/* 8207B3B8h case   13:*/		return 0x8207B3BC;
		  /* 8207B3BCh */ case   14:  		/* addi R11, R5, 2 */
		/* 8207B3BCh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x2);
		/* 8207B3BCh case   14:*/		return 0x8207B3C0;
		  /* 8207B3C0h */ case   15:  		/* addi R10, R5, -3 */
		/* 8207B3C0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xFFFFFFFD);
		/* 8207B3C0h case   15:*/		return 0x8207B3C4;
		  /* 8207B3C4h */ case   16:  		/* srawi R11, R11, 1 */
		/* 8207B3C4h case   16:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R11);
		/* 8207B3C4h case   16:*/		return 0x8207B3C8;
		  /* 8207B3C8h */ case   17:  		/* addi R9, R1, 32 */
		/* 8207B3C8h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x20);
		/* 8207B3C8h case   17:*/		return 0x8207B3CC;
		  /* 8207B3CCh */ case   18:  		/* addze R11, R11 */
		/* 8207B3CCh case   18:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8207B3CCh case   18:*/		return 0x8207B3D0;
		  /* 8207B3D0h */ case   19:  		/* srawi R10, R10, 1 */
		/* 8207B3D0h case   19:*/		cpu::op::srawi<0,1>(regs,&regs.R10,regs.R10);
		/* 8207B3D0h case   19:*/		return 0x8207B3D4;
		  /* 8207B3D4h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207B3D4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207B3D4h case   20:*/		return 0x8207B3D8;
		  /* 8207B3D8h */ case   21:  		/* addze R10, R10 */
		/* 8207B3D8h case   21:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8207B3D8h case   21:*/		return 0x8207B3DC;
		  /* 8207B3DCh */ case   22:  		/* addi R8, R1, 32 */
		/* 8207B3DCh case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x20);
		/* 8207B3DCh case   22:*/		return 0x8207B3E0;
		  /* 8207B3E0h */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8207B3E0h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8207B3E0h case   23:*/		return 0x8207B3E4;
		  /* 8207B3E4h */ case   24:  		/* stwx R29, <#[R11 + R9]> */
		/* 8207B3E4h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207B3E4h case   24:*/		return 0x8207B3E8;
		  /* 8207B3E8h */ case   25:  		/* stwx R29, <#[R10 + R8]> */
		/* 8207B3E8h case   25:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8207B3E8h case   25:*/		return 0x8207B3EC;
	}
	return 0x8207B3EC;
} // Block from 8207B384h-8207B3ECh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207B3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B3EC);
		  /* 8207B3ECh */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 8207B3ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B3ECh case    0:*/		return 0x8207B3F0;
		  /* 8207B3F0h */ case    1:  		/* bc 4, CR6_GT, 40 */
		/* 8207B3F0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207B418;  }
		/* 8207B3F0h case    1:*/		return 0x8207B3F4;
		  /* 8207B3F4h */ case    2:  		/* addi R11, R1, 32 */
		/* 8207B3F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x20);
		/* 8207B3F4h case    2:*/		return 0x8207B3F8;
		  /* 8207B3F8h */ case    3:  		/* mtspr CTR, R5 */
		/* 8207B3F8h case    3:*/		regs.CTR = regs.R5;
		/* 8207B3F8h case    3:*/		return 0x8207B3FC;
		  /* 8207B3FCh */ case    4:  		/* lwz R10, <#[R11]> */
		/* 8207B3FCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B3FCh case    4:*/		return 0x8207B400;
		  /* 8207B400h */ case    5:  		/* cmpwi CR6, R10, -1 */
		/* 8207B400h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8207B400h case    5:*/		return 0x8207B404;
		  /* 8207B404h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8207B404h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8207B410;  }
		/* 8207B404h case    6:*/		return 0x8207B408;
		  /* 8207B408h */ case    7:  		/* li R10, 2 */
		/* 8207B408h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8207B408h case    7:*/		return 0x8207B40C;
		  /* 8207B40Ch */ case    8:  		/* stw R10, <#[R11]> */
		/* 8207B40Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207B40Ch case    8:*/		return 0x8207B410;
	}
	return 0x8207B410;
} // Block from 8207B3ECh-8207B410h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207B410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B410);
		  /* 8207B410h */ case    0:  		/* addi R11, R11, 4 */
		/* 8207B410h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B410h case    0:*/		return 0x8207B414;
		  /* 8207B414h */ case    1:  		/* bc 16, CR0_LT, -24 */
		/* 8207B414h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B3FC;  }
		/* 8207B414h case    1:*/		return 0x8207B418;
	}
	return 0x8207B418;
} // Block from 8207B410h-8207B418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207B418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B418);
		  /* 8207B418h */ case    0:  		/* cmpwi CR6, R6, 0 */
		/* 8207B418h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 8207B418h case    0:*/		return 0x8207B41C;
		  /* 8207B41Ch */ case    1:  		/* bc 4, CR6_GT, 848 */
		/* 8207B41Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207B76C;  }
		/* 8207B41Ch case    1:*/		return 0x8207B420;
		  /* 8207B420h */ case    2:  		/* addi R11, R1, 224 */
		/* 8207B420h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 8207B420h case    2:*/		return 0x8207B424;
		  /* 8207B424h */ case    3:  		/* lis R10, -32256 */
		/* 8207B424h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B424h case    3:*/		return 0x8207B428;
		  /* 8207B428h */ case    4:  		/* subf R30, R4, R11 */
		/* 8207B428h case    4:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R4,regs.R11);
		/* 8207B428h case    4:*/		return 0x8207B42C;
		  /* 8207B42Ch */ case    5:  		/* lis R11, -32256 */
		/* 8207B42Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B42Ch case    5:*/		return 0x8207B430;
		  /* 8207B430h */ case    6:  		/* lis R9, -32256 */
		/* 8207B430h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B430h case    6:*/		return 0x8207B434;
		  /* 8207B434h */ case    7:  		/* mr R3, R4 */
		/* 8207B434h case    7:*/		regs.R3 = regs.R4;
		/* 8207B434h case    7:*/		return 0x8207B438;
	}
	return 0x8207B438;
} // Block from 8207B418h-8207B438h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207B438h
// Function '?coef_f2c@D3D@@YAXPAMPAIHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B438);
		  /* 8207B438h */ case    0:  		/* lfd FR10, <#[R10 + 4736]> */
		/* 8207B438h case    0:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R10 + 0x00001280) );
		/* 8207B438h case    0:*/		return 0x8207B43C;
		  /* 8207B43Ch */ case    1:  		/* mr R28, R6 */
		/* 8207B43Ch case    1:*/		regs.R28 = regs.R6;
		/* 8207B43Ch case    1:*/		return 0x8207B440;
		  /* 8207B440h */ case    2:  		/* li R31, 4 */
		/* 8207B440h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x4);
		/* 8207B440h case    2:*/		return 0x8207B444;
		  /* 8207B444h */ case    3:  		/* lfs FR12, <#[R11 + 8392]> */
		/* 8207B444h case    3:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + 0x000020C8) );
		/* 8207B444h case    3:*/		return 0x8207B448;
		  /* 8207B448h */ case    4:  		/* lfs FR11, <#[R9 + 1816]> */
		/* 8207B448h case    4:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R9 + 0x00000718) );
		/* 8207B448h case    4:*/		return 0x8207B44C;
		  /* 8207B44Ch */ case    5:  		/* li R7, 512 */
		/* 8207B44Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x200);
		/* 8207B44Ch case    5:*/		return 0x8207B450;
		  /* 8207B450h */ case    6:  		/* cmpwi CR6, R5, 0 */
		/* 8207B450h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B450h case    6:*/		return 0x8207B454;
		  /* 8207B454h */ case    7:  		/* bc 4, CR6_GT, 196 */
		/* 8207B454h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8207B518;  }
		/* 8207B454h case    7:*/		return 0x8207B458;
		  /* 8207B458h */ case    8:  		/* rlwinm R11, R6, 2, 0, 29 */
		/* 8207B458h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R6);
		/* 8207B458h case    8:*/		return 0x8207B45C;
		  /* 8207B45Ch */ case    9:  		/* mtspr CTR, R5 */
		/* 8207B45Ch case    9:*/		regs.CTR = regs.R5;
		/* 8207B45Ch case    9:*/		return 0x8207B460;
		  /* 8207B460h */ case   10:  		/* addi R10, R1, 176 */
		/* 8207B460h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8207B460h case   10:*/		return 0x8207B464;
		  /* 8207B464h */ case   11:  		/* subf R9, R11, R30 */
		/* 8207B464h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R30);
		/* 8207B464h case   11:*/		return 0x8207B468;
		  /* 8207B468h */ case   12:  		/* addi R8, R10, -4 */
		/* 8207B468h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFC);
		/* 8207B468h case   12:*/		return 0x8207B46C;
		  /* 8207B46Ch */ case   13:  		/* add R10, R9, R3 */
		/* 8207B46Ch case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R3);
		/* 8207B46Ch case   13:*/		return 0x8207B470;
		  /* 8207B470h */ case   14:  		/* lfsux FR0, <#[R10 + R11]> */
		/* 8207B470h case   14:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		regs.R10 = (uint32)(regs.R10 + regs.R11 + 0x00000000);
		/* 8207B470h case   14:*/		return 0x8207B474;
		  /* 8207B474h */ case   15:  		/* stfsu FR0, <#[R8 + 4]> */
		/* 8207B474h case   15:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 8207B474h case   15:*/		return 0x8207B478;
		  /* 8207B478h */ case   16:  		/* bc 16, CR0_LT, -8 */
		/* 8207B478h case   16:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B470;  }
		/* 8207B478h case   16:*/		return 0x8207B47C;
		  /* 8207B47Ch */ case   17:  		/* mr R11, R27 */
		/* 8207B47Ch case   17:*/		regs.R11 = regs.R27;
		/* 8207B47Ch case   17:*/		return 0x8207B480;
		  /* 8207B480h */ case   18:  		/* mtspr CTR, R5 */
		/* 8207B480h case   18:*/		regs.CTR = regs.R5;
		/* 8207B480h case   18:*/		return 0x8207B484;
		  /* 8207B484h */ case   19:  		/* addi R10, R1, 176 */
		/* 8207B484h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8207B484h case   19:*/		return 0x8207B488;
		  /* 8207B488h */ case   20:  		/* lfsx FR0, <#[R11 + R10]> */
		/* 8207B488h case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B488h case   20:*/		return 0x8207B48C;
		  /* 8207B48Ch */ case   21:  		/* addi R10, R1, 32 */
		/* 8207B48Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x20);
		/* 8207B48Ch case   21:*/		return 0x8207B490;
		  /* 8207B490h */ case   22:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207B490h case   22:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207B490h case   22:*/		return 0x8207B494;
		  /* 8207B494h */ case   23:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B494h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B494h case   23:*/		return 0x8207B498;
		  /* 8207B498h */ case   24:  		/* addi R9, R10, 7 */
		/* 8207B498h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x7);
		/* 8207B498h case   24:*/		return 0x8207B49C;
		  /* 8207B49Ch */ case   25:  		/* slw R9, R29, R9 */
		/* 8207B49Ch case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R9);
		/* 8207B49Ch case   25:*/		return 0x8207B4A0;
		  /* 8207B4A0h */ case   26:  		/* extsw R9, R9 */
		/* 8207B4A0h case   26:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R9);
		/* 8207B4A0h case   26:*/		return 0x8207B4A4;
		  /* 8207B4A4h */ case   27:  		/* bc 4, CR6_GT, 44 */
		/* 8207B4A4h case   27:*/		if ( !regs.CR[6].gt ) { return 0x8207B4D0;  }
		/* 8207B4A4h case   27:*/		return 0x8207B4A8;
		  /* 8207B4A8h */ case   28:  		/* std R9, <#[R1 + 112]> */
		/* 8207B4A8h case   28:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 8207B4A8h case   28:*/		return 0x8207B4AC;
		  /* 8207B4ACh */ case   29:  		/* lfd FR13, <#[R1 + 112]> */
		/* 8207B4ACh case   29:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000070) );
		/* 8207B4ACh case   29:*/		return 0x8207B4B0;
		  /* 8207B4B0h */ case   30:  		/* fcfid FR13, FR13 */
		/* 8207B4B0h case   30:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207B4B0h case   30:*/		return 0x8207B4B4;
		  /* 8207B4B4h */ case   31:  		/* frsp FR13, FR13 */
		/* 8207B4B4h case   31:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207B4B4h case   31:*/		return 0x8207B4B8;
		  /* 8207B4B8h */ case   32:  		/* fmuls FR0, FR13, FR0 */
		/* 8207B4B8h case   32:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207B4B8h case   32:*/		return 0x8207B4BC;
		  /* 8207B4BCh */ case   33:  		/* fadd FR0, FR0, FR10 */
		/* 8207B4BCh case   33:*/		cpu::op::fadd<0>(regs,&regs.FR0,regs.FR0,regs.FR10);
		/* 8207B4BCh case   33:*/		return 0x8207B4C0;
		  /* 8207B4C0h */ case   34:  		/* fctiwz FR0, FR0 */
		/* 8207B4C0h case   34:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207B4C0h case   34:*/		return 0x8207B4C4;
		  /* 8207B4C4h */ case   35:  		/* stfd FR0, <#[R1 + 16]> */
		/* 8207B4C4h case   35:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000010) );
		/* 8207B4C4h case   35:*/		return 0x8207B4C8;
		  /* 8207B4C8h */ case   36:  		/* lwz R9, <#[R1 + 20]> */
		/* 8207B4C8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000014) );
		/* 8207B4C8h case   36:*/		return 0x8207B4CC;
		  /* 8207B4CCh */ case   37:  		/* b 40 */
		/* 8207B4CCh case   37:*/		return 0x8207B4F4;
		/* 8207B4CCh case   37:*/		return 0x8207B4D0;
	}
	return 0x8207B4D0;
} // Block from 8207B438h-8207B4D0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8207B4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B4D0);
		  /* 8207B4D0h */ case    0:  		/* std R9, <#[R1 + 88]> */
		/* 8207B4D0h case    0:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207B4D0h case    0:*/		return 0x8207B4D4;
		  /* 8207B4D4h */ case    1:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207B4D4h case    1:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207B4D4h case    1:*/		return 0x8207B4D8;
		  /* 8207B4D8h */ case    2:  		/* fcfid FR13, FR13 */
		/* 8207B4D8h case    2:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207B4D8h case    2:*/		return 0x8207B4DC;
		  /* 8207B4DCh */ case    3:  		/* frsp FR13, FR13 */
		/* 8207B4DCh case    3:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207B4DCh case    3:*/		return 0x8207B4E0;
		  /* 8207B4E0h */ case    4:  		/* fmuls FR0, FR13, FR0 */
		/* 8207B4E0h case    4:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207B4E0h case    4:*/		return 0x8207B4E4;
		  /* 8207B4E4h */ case    5:  		/* fsub FR0, FR0, FR10 */
		/* 8207B4E4h case    5:*/		cpu::op::fsub<0>(regs,&regs.FR0,regs.FR0,regs.FR10);
		/* 8207B4E4h case    5:*/		return 0x8207B4E8;
		  /* 8207B4E8h */ case    6:  		/* fctiwz FR0, FR0 */
		/* 8207B4E8h case    6:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207B4E8h case    6:*/		return 0x8207B4EC;
		  /* 8207B4ECh */ case    7:  		/* stfd FR0, <#[R1 + 16]> */
		/* 8207B4ECh case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000010) );
		/* 8207B4ECh case    7:*/		return 0x8207B4F0;
		  /* 8207B4F0h */ case    8:  		/* lwz R9, <#[R1 + 20]> */
		/* 8207B4F0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000014) );
		/* 8207B4F0h case    8:*/		return 0x8207B4F4;
	}
	return 0x8207B4F4;
} // Block from 8207B4D0h-8207B4F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207B4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B4F4);
		  /* 8207B4F4h */ case    0:  		/* addi R8, R1, 128 */
		/* 8207B4F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 8207B4F4h case    0:*/		return 0x8207B4F8;
		  /* 8207B4F8h */ case    1:  		/* subfic R10, R10, 2 */
		/* 8207B4F8h case    1:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8207B4F8h case    1:*/		return 0x8207B4FC;
		  /* 8207B4FCh */ case    2:  		/* slw R10, R9, R10 */
		/* 8207B4FCh case    2:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8207B4FCh case    2:*/		return 0x8207B500;
		  /* 8207B500h */ case    3:  		/* stwx R9, <#[R11 + R8]> */
		/* 8207B500h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8207B500h case    3:*/		return 0x8207B504;
		  /* 8207B504h */ case    4:  		/* subf R7, R10, R7 */
		/* 8207B504h case    4:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R10,regs.R7);
		/* 8207B504h case    4:*/		return 0x8207B508;
		  /* 8207B508h */ case    5:  		/* addi R11, R11, 4 */
		/* 8207B508h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B508h case    5:*/		return 0x8207B50C;
		  /* 8207B50Ch */ case    6:  		/* bc 16, CR0_LT, -136 */
		/* 8207B50Ch case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B484;  }
		/* 8207B50Ch case    6:*/		return 0x8207B510;
		  /* 8207B510h */ case    7:  		/* cmpwi CR6, R7, 0 */
		/* 8207B510h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8207B510h case    7:*/		return 0x8207B514;
		  /* 8207B514h */ case    8:  		/* bc 4, CR6_GT, 244 */
		/* 8207B514h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8207B608;  }
		/* 8207B514h case    8:*/		return 0x8207B518;
	}
	return 0x8207B518;
} // Block from 8207B4F4h-8207B518h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207B518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B518);
		  /* 8207B518h */ case    0:  		/* mr R8, R27 */
		/* 8207B518h case    0:*/		regs.R8 = regs.R27;
		/* 8207B518h case    0:*/		return 0x8207B51C;
		  /* 8207B51Ch */ case    1:  		/* fmr FR13, FR12 */
		/* 8207B51Ch case    1:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR12);
		/* 8207B51Ch case    1:*/		return 0x8207B520;
		  /* 8207B520h */ case    2:  		/* mr R9, R27 */
		/* 8207B520h case    2:*/		regs.R9 = regs.R27;
		/* 8207B520h case    2:*/		return 0x8207B524;
		  /* 8207B524h */ case    3:  		/* cmpwi CR6, R5, 0 */
		/* 8207B524h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B524h case    3:*/		return 0x8207B528;
		  /* 8207B528h */ case    4:  		/* bc 4, CR6_GT, 180 */
		/* 8207B528h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207B5DC;  }
		/* 8207B528h case    4:*/		return 0x8207B52C;
		  /* 8207B52Ch */ case    5:  		/* mr R11, R27 */
		/* 8207B52Ch case    5:*/		regs.R11 = regs.R27;
		/* 8207B52Ch case    5:*/		return 0x8207B530;
		  /* 8207B530h */ case    6:  		/* mtspr CTR, R5 */
		/* 8207B530h case    6:*/		regs.CTR = regs.R5;
		/* 8207B530h case    6:*/		return 0x8207B534;
		  /* 8207B534h */ case    7:  		/* addi R10, R1, 176 */
		/* 8207B534h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8207B534h case    7:*/		return 0x8207B538;
		  /* 8207B538h */ case    8:  		/* lfsx FR0, <#[R11 + R10]> */
		/* 8207B538h case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B538h case    8:*/		return 0x8207B53C;
		  /* 8207B53Ch */ case    9:  		/* fabs FR9, FR0 */
		/* 8207B53Ch case    9:*/		cpu::op::fabs<0>(regs,&regs.FR9,regs.FR0);
		/* 8207B53Ch case    9:*/		return 0x8207B540;
		  /* 8207B540h */ case   10:  		/* fcmpu CR6, FR9, FR11 */
		/* 8207B540h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR9,regs.FR11);
		/* 8207B540h case   10:*/		return 0x8207B544;
		  /* 8207B544h */ case   11:  		/* bc 4, CR6_GT, 84 */
		/* 8207B544h case   11:*/		if ( !regs.CR[6].gt ) { return 0x8207B598;  }
		/* 8207B544h case   11:*/		return 0x8207B548;
		  /* 8207B548h */ case   12:  		/* addi R4, R1, 128 */
		/* 8207B548h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8207B548h case   12:*/		return 0x8207B54C;
		  /* 8207B54Ch */ case   13:  		/* addi R10, R1, 32 */
		/* 8207B54Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x20);
		/* 8207B54Ch case   13:*/		return 0x8207B550;
		  /* 8207B550h */ case   14:  		/* lwax R4, <#[R11 + R4]> */
		/* 8207B550h case   14:*/		cpu::mem::load32a( regs, &regs.R4, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8207B550h case   14:*/		return 0x8207B554;
		  /* 8207B554h */ case   15:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B554h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B554h case   15:*/		return 0x8207B558;
		  /* 8207B558h */ case   16:  		/* std R4, <#[R1 + 104]> */
		/* 8207B558h case   16:*/		cpu::mem::store64( regs, regs.R4, (uint32)(regs.R1 + 0x00000068) );
		/* 8207B558h case   16:*/		return 0x8207B55C;
		  /* 8207B55Ch */ case   17:  		/* addi R10, R10, 7 */
		/* 8207B55Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7);
		/* 8207B55Ch case   17:*/		return 0x8207B560;
		  /* 8207B560h */ case   18:  		/* slw R10, R29, R10 */
		/* 8207B560h case   18:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 8207B560h case   18:*/		return 0x8207B564;
		  /* 8207B564h */ case   19:  		/* extsw R10, R10 */
		/* 8207B564h case   19:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R10);
		/* 8207B564h case   19:*/		return 0x8207B568;
		  /* 8207B568h */ case   20:  		/* lfd FR9, <#[R1 + 104]> */
		/* 8207B568h case   20:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R1 + 0x00000068) );
		/* 8207B568h case   20:*/		return 0x8207B56C;
		  /* 8207B56Ch */ case   21:  		/* std R10, <#[R1 + 96]> */
		/* 8207B56Ch case   21:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8207B56Ch case   21:*/		return 0x8207B570;
		  /* 8207B570h */ case   22:  		/* lfd FR8, <#[R1 + 96]> */
		/* 8207B570h case   22:*/		cpu::mem::load64f( regs, &regs.FR8, (uint32)(regs.R1 + 0x00000060) );
		/* 8207B570h case   22:*/		return 0x8207B574;
		  /* 8207B574h */ case   23:  		/* fcfid FR8, FR8 */
		/* 8207B574h case   23:*/		cpu::op::fcfid<0>(regs,&regs.FR8,regs.FR8);
		/* 8207B574h case   23:*/		return 0x8207B578;
		  /* 8207B578h */ case   24:  		/* fcfid FR9, FR9 */
		/* 8207B578h case   24:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR9);
		/* 8207B578h case   24:*/		return 0x8207B57C;
		  /* 8207B57Ch */ case   25:  		/* frsp FR8, FR8 */
		/* 8207B57Ch case   25:*/		cpu::op::frsp<0>(regs,&regs.FR8,regs.FR8);
		/* 8207B57Ch case   25:*/		return 0x8207B580;
		  /* 8207B580h */ case   26:  		/* frsp FR9, FR9 */
		/* 8207B580h case   26:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR9);
		/* 8207B580h case   26:*/		return 0x8207B584;
		  /* 8207B584h */ case   27:  		/* fmuls FR0, FR8, FR0 */
		/* 8207B584h case   27:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR8,regs.FR0);
		/* 8207B584h case   27:*/		return 0x8207B588;
		  /* 8207B588h */ case   28:  		/* fsubs FR9, FR9, FR0 */
		/* 8207B588h case   28:*/		cpu::op::fsubs<0>(regs,&regs.FR9,regs.FR9,regs.FR0);
		/* 8207B588h case   28:*/		return 0x8207B58C;
		  /* 8207B58Ch */ case   29:  		/* fdivs FR0, FR9, FR0 */
		/* 8207B58Ch case   29:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR9,regs.FR0);
		/* 8207B58Ch case   29:*/		return 0x8207B590;
		  /* 8207B590h */ case   30:  		/* fabs FR0, FR0 */
		/* 8207B590h case   30:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR0);
		/* 8207B590h case   30:*/		return 0x8207B594;
		  /* 8207B594h */ case   31:  		/* b 8 */
		/* 8207B594h case   31:*/		return 0x8207B59C;
		/* 8207B594h case   31:*/		return 0x8207B598;
	}
	return 0x8207B598;
} // Block from 8207B518h-8207B598h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8207B598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B598);
		  /* 8207B598h */ case    0:  		/* fmr FR0, FR12 */
		/* 8207B598h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8207B598h case    0:*/		return 0x8207B59C;
	}
	return 0x8207B59C;
} // Block from 8207B598h-8207B59Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207B59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B59C);
		  /* 8207B59Ch */ case    0:  		/* addi R10, R1, 128 */
		/* 8207B59Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8207B59Ch case    0:*/		return 0x8207B5A0;
		  /* 8207B5A0h */ case    1:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B5A0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B5A0h case    1:*/		return 0x8207B5A4;
		  /* 8207B5A4h */ case    2:  		/* cmpwi CR6, R10, 255 */
		/* 8207B5A4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x000000FF);
		/* 8207B5A4h case    2:*/		return 0x8207B5A8;
		  /* 8207B5A8h */ case    3:  		/* bc 4, CR6_LT, 40 */
		/* 8207B5A8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8207B5D0;  }
		/* 8207B5A8h case    3:*/		return 0x8207B5AC;
		  /* 8207B5ACh */ case    4:  		/* addi R10, R1, 32 */
		/* 8207B5ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x20);
		/* 8207B5ACh case    4:*/		return 0x8207B5B0;
		  /* 8207B5B0h */ case    5:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B5B0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B5B0h case    5:*/		return 0x8207B5B4;
		  /* 8207B5B4h */ case    6:  		/* sraw R10, R31, R10 */
		/* 8207B5B4h case    6:*/		cpu::op::sraw<0>(regs,&regs.R10,regs.R31,regs.R10);
		/* 8207B5B4h case    6:*/		return 0x8207B5B8;
		  /* 8207B5B8h */ case    7:  		/* cmpw CR6, R7, R10 */
		/* 8207B5B8h case    7:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R10);
		/* 8207B5B8h case    7:*/		return 0x8207B5BC;
		  /* 8207B5BCh */ case    8:  		/* bc 12, CR6_LT, 20 */
		/* 8207B5BCh case    8:*/		if ( regs.CR[6].lt ) { return 0x8207B5D0;  }
		/* 8207B5BCh case    8:*/		return 0x8207B5C0;
		  /* 8207B5C0h */ case    9:  		/* fcmpu CR6, FR0, FR13 */
		/* 8207B5C0h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8207B5C0h case    9:*/		return 0x8207B5C4;
		  /* 8207B5C4h */ case   10:  		/* bc 4, CR6_LT, 12 */
		/* 8207B5C4h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8207B5D0;  }
		/* 8207B5C4h case   10:*/		return 0x8207B5C8;
		  /* 8207B5C8h */ case   11:  		/* fmr FR13, FR0 */
		/* 8207B5C8h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 8207B5C8h case   11:*/		return 0x8207B5CC;
		  /* 8207B5CCh */ case   12:  		/* mr R8, R9 */
		/* 8207B5CCh case   12:*/		regs.R8 = regs.R9;
		/* 8207B5CCh case   12:*/		return 0x8207B5D0;
	}
	return 0x8207B5D0;
} // Block from 8207B59Ch-8207B5D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207B5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B5D0);
		  /* 8207B5D0h */ case    0:  		/* addi R9, R9, 1 */
		/* 8207B5D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8207B5D0h case    0:*/		return 0x8207B5D4;
		  /* 8207B5D4h */ case    1:  		/* addi R11, R11, 4 */
		/* 8207B5D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B5D4h case    1:*/		return 0x8207B5D8;
		  /* 8207B5D8h */ case    2:  		/* bc 16, CR0_LT, -164 */
		/* 8207B5D8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B534;  }
		/* 8207B5D8h case    2:*/		return 0x8207B5DC;
	}
	return 0x8207B5DC;
} // Block from 8207B5D0h-8207B5DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207B5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B5DC);
		  /* 8207B5DCh */ case    0:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 8207B5DCh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 8207B5DCh case    0:*/		return 0x8207B5E0;
		  /* 8207B5E0h */ case    1:  		/* addi R9, R1, 32 */
		/* 8207B5E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x20);
		/* 8207B5E0h case    1:*/		return 0x8207B5E4;
		  /* 8207B5E4h */ case    2:  		/* addi R10, R1, 128 */
		/* 8207B5E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8207B5E4h case    2:*/		return 0x8207B5E8;
		  /* 8207B5E8h */ case    3:  		/* lwzx R8, <#[R11 + R9]> */
		/* 8207B5E8h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207B5E8h case    3:*/		return 0x8207B5EC;
		  /* 8207B5ECh */ case    4:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8207B5ECh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B5ECh case    4:*/		return 0x8207B5F0;
		  /* 8207B5F0h */ case    5:  		/* sraw R8, R31, R8 */
		/* 8207B5F0h case    5:*/		cpu::op::sraw<0>(regs,&regs.R8,regs.R31,regs.R8);
		/* 8207B5F0h case    5:*/		return 0x8207B5F4;
		  /* 8207B5F4h */ case    6:  		/* addi R9, R9, 1 */
		/* 8207B5F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8207B5F4h case    6:*/		return 0x8207B5F8;
		  /* 8207B5F8h */ case    7:  		/* subf. R7, R8, R7 */
		/* 8207B5F8h case    7:*/		cpu::op::subf<1>(regs,&regs.R7,regs.R8,regs.R7);
		/* 8207B5F8h case    7:*/		return 0x8207B5FC;
		  /* 8207B5FCh */ case    8:  		/* stwx R9, <#[R11 + R10]> */
		/* 8207B5FCh case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B5FCh case    8:*/		return 0x8207B600;
		  /* 8207B600h */ case    9:  		/* bc 12, CR0_GT, -232 */
		/* 8207B600h case    9:*/		if ( regs.CR[0].gt ) { return 0x8207B518;  }
		/* 8207B600h case    9:*/		return 0x8207B604;
		  /* 8207B604h */ case   10:  		/* cmpwi CR6, R7, 0 */
		/* 8207B604h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8207B604h case   10:*/		return 0x8207B608;
	}
	return 0x8207B608;
} // Block from 8207B5DCh-8207B608h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207B608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B608);
		  /* 8207B608h */ case    0:  		/* bc 4, CR6_LT, 284 */
		/* 8207B608h case    0:*/		if ( !regs.CR[6].lt ) { return 0x8207B724;  }
		/* 8207B608h case    0:*/		return 0x8207B60C;
		  /* 8207B60Ch */ case    1:  		/* mr R8, R27 */
		/* 8207B60Ch case    1:*/		regs.R8 = regs.R27;
		/* 8207B60Ch case    1:*/		return 0x8207B610;
		  /* 8207B610h */ case    2:  		/* fmr FR13, FR12 */
		/* 8207B610h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR12);
		/* 8207B610h case    2:*/		return 0x8207B614;
		  /* 8207B614h */ case    3:  		/* mr R4, R27 */
		/* 8207B614h case    3:*/		regs.R4 = regs.R27;
		/* 8207B614h case    3:*/		return 0x8207B618;
		  /* 8207B618h */ case    4:  		/* cmpwi CR6, R5, 0 */
		/* 8207B618h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B618h case    4:*/		return 0x8207B61C;
		  /* 8207B61Ch */ case    5:  		/* bc 4, CR6_GT, 224 */
		/* 8207B61Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x8207B6FC;  }
		/* 8207B61Ch case    5:*/		return 0x8207B620;
		  /* 8207B620h */ case    6:  		/* mr R11, R27 */
		/* 8207B620h case    6:*/		regs.R11 = regs.R27;
		/* 8207B620h case    6:*/		return 0x8207B624;
		  /* 8207B624h */ case    7:  		/* mtspr CTR, R5 */
		/* 8207B624h case    7:*/		regs.CTR = regs.R5;
		/* 8207B624h case    7:*/		return 0x8207B628;
		  /* 8207B628h */ case    8:  		/* addi R10, R1, 176 */
		/* 8207B628h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 8207B628h case    8:*/		return 0x8207B62C;
		  /* 8207B62Ch */ case    9:  		/* lfsx FR0, <#[R11 + R10]> */
		/* 8207B62Ch case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B62Ch case    9:*/		return 0x8207B630;
		  /* 8207B630h */ case   10:  		/* fabs FR9, FR0 */
		/* 8207B630h case   10:*/		cpu::op::fabs<0>(regs,&regs.FR9,regs.FR0);
		/* 8207B630h case   10:*/		return 0x8207B634;
		  /* 8207B634h */ case   11:  		/* fcmpu CR6, FR9, FR11 */
		/* 8207B634h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR9,regs.FR11);
		/* 8207B634h case   11:*/		return 0x8207B638;
		  /* 8207B638h */ case   12:  		/* bc 4, CR6_GT, 92 */
		/* 8207B638h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8207B694;  }
		/* 8207B638h case   12:*/		return 0x8207B63C;
		  /* 8207B63Ch */ case   13:  		/* addi R10, R1, 128 */
		/* 8207B63Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8207B63Ch case   13:*/		return 0x8207B640;
		  /* 8207B640h */ case   14:  		/* addi R26, R1, 32 */
		/* 8207B640h case   14:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R1,0x20);
		/* 8207B640h case   14:*/		return 0x8207B644;
		  /* 8207B644h */ case   15:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8207B644h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B644h case   15:*/		return 0x8207B648;
		  /* 8207B648h */ case   16:  		/* lwzx R10, <#[R11 + R26]> */
		/* 8207B648h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8207B648h case   16:*/		return 0x8207B64C;
		  /* 8207B64Ch */ case   17:  		/* addi R9, R9, -1 */
		/* 8207B64Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8207B64Ch case   17:*/		return 0x8207B650;
		  /* 8207B650h */ case   18:  		/* addi R10, R10, 7 */
		/* 8207B650h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7);
		/* 8207B650h case   18:*/		return 0x8207B654;
		  /* 8207B654h */ case   19:  		/* extsw R9, R9 */
		/* 8207B654h case   19:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R9);
		/* 8207B654h case   19:*/		return 0x8207B658;
		  /* 8207B658h */ case   20:  		/* std R9, <#[R1 + 80]> */
		/* 8207B658h case   20:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B658h case   20:*/		return 0x8207B65C;
		  /* 8207B65Ch */ case   21:  		/* slw R10, R29, R10 */
		/* 8207B65Ch case   21:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 8207B65Ch case   21:*/		return 0x8207B660;
		  /* 8207B660h */ case   22:  		/* extsw R10, R10 */
		/* 8207B660h case   22:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R10);
		/* 8207B660h case   22:*/		return 0x8207B664;
		  /* 8207B664h */ case   23:  		/* std R10, <#[R1 + 72]> */
		/* 8207B664h case   23:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8207B664h case   23:*/		return 0x8207B668;
		  /* 8207B668h */ case   24:  		/* lfd FR9, <#[R1 + 72]> */
		/* 8207B668h case   24:*/		cpu::mem::load64f( regs, &regs.FR9, (uint32)(regs.R1 + 0x00000048) );
		/* 8207B668h case   24:*/		return 0x8207B66C;
		  /* 8207B66Ch */ case   25:  		/* fcfid FR9, FR9 */
		/* 8207B66Ch case   25:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR9);
		/* 8207B66Ch case   25:*/		return 0x8207B670;
		  /* 8207B670h */ case   26:  		/* lfd FR8, <#[R1 + 80]> */
		/* 8207B670h case   26:*/		cpu::mem::load64f( regs, &regs.FR8, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B670h case   26:*/		return 0x8207B674;
		  /* 8207B674h */ case   27:  		/* frsp FR9, FR9 */
		/* 8207B674h case   27:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR9);
		/* 8207B674h case   27:*/		return 0x8207B678;
		  /* 8207B678h */ case   28:  		/* fcfid FR8, FR8 */
		/* 8207B678h case   28:*/		cpu::op::fcfid<0>(regs,&regs.FR8,regs.FR8);
		/* 8207B678h case   28:*/		return 0x8207B67C;
		  /* 8207B67Ch */ case   29:  		/* fmuls FR0, FR9, FR0 */
		/* 8207B67Ch case   29:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR9,regs.FR0);
		/* 8207B67Ch case   29:*/		return 0x8207B680;
		  /* 8207B680h */ case   30:  		/* frsp FR9, FR8 */
		/* 8207B680h case   30:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR8);
		/* 8207B680h case   30:*/		return 0x8207B684;
		  /* 8207B684h */ case   31:  		/* fsubs FR9, FR9, FR0 */
		/* 8207B684h case   31:*/		cpu::op::fsubs<0>(regs,&regs.FR9,regs.FR9,regs.FR0);
		/* 8207B684h case   31:*/		return 0x8207B688;
		  /* 8207B688h */ case   32:  		/* fdivs FR0, FR9, FR0 */
		/* 8207B688h case   32:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR9,regs.FR0);
		/* 8207B688h case   32:*/		return 0x8207B68C;
		  /* 8207B68Ch */ case   33:  		/* fabs FR0, FR0 */
		/* 8207B68Ch case   33:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR0);
		/* 8207B68Ch case   33:*/		return 0x8207B690;
		  /* 8207B690h */ case   34:  		/* b 8 */
		/* 8207B690h case   34:*/		return 0x8207B698;
		/* 8207B690h case   34:*/		return 0x8207B694;
	}
	return 0x8207B694;
} // Block from 8207B608h-8207B694h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8207B694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B694);
		  /* 8207B694h */ case    0:  		/* fmr FR0, FR12 */
		/* 8207B694h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 8207B694h case    0:*/		return 0x8207B698;
	}
	return 0x8207B698;
} // Block from 8207B694h-8207B698h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207B698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B698);
		  /* 8207B698h */ case    0:  		/* addi R10, R1, 32 */
		/* 8207B698h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x20);
		/* 8207B698h case    0:*/		return 0x8207B69C;
		  /* 8207B69Ch */ case    1:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B69Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B69Ch case    1:*/		return 0x8207B6A0;
		  /* 8207B6A0h */ case    2:  		/* sraw R9, R31, R10 */
		/* 8207B6A0h case    2:*/		cpu::op::sraw<0>(regs,&regs.R9,regs.R31,regs.R10);
		/* 8207B6A0h case    2:*/		return 0x8207B6A4;
		  /* 8207B6A4h */ case    3:  		/* neg R9, R9 */
		/* 8207B6A4h case    3:*/		cpu::op::neg<0>(regs,&regs.R9,regs.R9);
		/* 8207B6A4h case    3:*/		return 0x8207B6A8;
		  /* 8207B6A8h */ case    4:  		/* cmpw CR6, R7, R9 */
		/* 8207B6A8h case    4:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R9);
		/* 8207B6A8h case    4:*/		return 0x8207B6AC;
		  /* 8207B6ACh */ case    5:  		/* bc 12, CR6_GT, 68 */
		/* 8207B6ACh case    5:*/		if ( regs.CR[6].gt ) { return 0x8207B6F0;  }
		/* 8207B6ACh case    5:*/		return 0x8207B6B0;
		  /* 8207B6B0h */ case    6:  		/* cmpwi CR6, R10, 0 */
		/* 8207B6B0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8207B6B0h case    6:*/		return 0x8207B6B4;
		  /* 8207B6B4h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 8207B6B4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207B6CC;  }
		/* 8207B6B4h case    7:*/		return 0x8207B6B8;
		  /* 8207B6B8h */ case    8:  		/* addi R9, R1, 128 */
		/* 8207B6B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 8207B6B8h case    8:*/		return 0x8207B6BC;
		  /* 8207B6BCh */ case    9:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8207B6BCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207B6BCh case    9:*/		return 0x8207B6C0;
		  /* 8207B6C0h */ case   10:  		/* cmpwi CR6, R9, 0 */
		/* 8207B6C0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8207B6C0h case   10:*/		return 0x8207B6C4;
		  /* 8207B6C4h */ case   11:  		/* bc 12, CR6_GT, 28 */
		/* 8207B6C4h case   11:*/		if ( regs.CR[6].gt ) { return 0x8207B6E0;  }
		/* 8207B6C4h case   11:*/		return 0x8207B6C8;
		  /* 8207B6C8h */ case   12:  		/* cmpwi CR6, R10, 0 */
		/* 8207B6C8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8207B6C8h case   12:*/		return 0x8207B6CC;
	}
	return 0x8207B6CC;
} // Block from 8207B698h-8207B6CCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207B6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B6CC);
		  /* 8207B6CCh */ case    0:  		/* bc 4, CR6_GT, 36 */
		/* 8207B6CCh case    0:*/		if ( !regs.CR[6].gt ) { return 0x8207B6F0;  }
		/* 8207B6CCh case    0:*/		return 0x8207B6D0;
		  /* 8207B6D0h */ case    1:  		/* addi R10, R1, 128 */
		/* 8207B6D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8207B6D0h case    1:*/		return 0x8207B6D4;
		  /* 8207B6D4h */ case    2:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8207B6D4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B6D4h case    2:*/		return 0x8207B6D8;
		  /* 8207B6D8h */ case    3:  		/* cmpwi CR6, R10, -256 */
		/* 8207B6D8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFF00);
		/* 8207B6D8h case    3:*/		return 0x8207B6DC;
		  /* 8207B6DCh */ case    4:  		/* bc 4, CR6_GT, 20 */
		/* 8207B6DCh case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207B6F0;  }
		/* 8207B6DCh case    4:*/		return 0x8207B6E0;
	}
	return 0x8207B6E0;
} // Block from 8207B6CCh-8207B6E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207B6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B6E0);
		  /* 8207B6E0h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 8207B6E0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 8207B6E0h case    0:*/		return 0x8207B6E4;
		  /* 8207B6E4h */ case    1:  		/* bc 4, CR6_LT, 12 */
		/* 8207B6E4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8207B6F0;  }
		/* 8207B6E4h case    1:*/		return 0x8207B6E8;
		  /* 8207B6E8h */ case    2:  		/* fmr FR13, FR0 */
		/* 8207B6E8h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 8207B6E8h case    2:*/		return 0x8207B6EC;
		  /* 8207B6ECh */ case    3:  		/* mr R8, R4 */
		/* 8207B6ECh case    3:*/		regs.R8 = regs.R4;
		/* 8207B6ECh case    3:*/		return 0x8207B6F0;
	}
	return 0x8207B6F0;
} // Block from 8207B6E0h-8207B6F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207B6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B6F0);
		  /* 8207B6F0h */ case    0:  		/* addi R4, R4, 1 */
		/* 8207B6F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8207B6F0h case    0:*/		return 0x8207B6F4;
		  /* 8207B6F4h */ case    1:  		/* addi R11, R11, 4 */
		/* 8207B6F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B6F4h case    1:*/		return 0x8207B6F8;
		  /* 8207B6F8h */ case    2:  		/* bc 16, CR0_LT, -208 */
		/* 8207B6F8h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B628;  }
		/* 8207B6F8h case    2:*/		return 0x8207B6FC;
	}
	return 0x8207B6FC;
} // Block from 8207B6F0h-8207B6FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207B6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B6FC);
		  /* 8207B6FCh */ case    0:  		/* rlwinm R11, R8, 2, 0, 29 */
		/* 8207B6FCh case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 8207B6FCh case    0:*/		return 0x8207B700;
		  /* 8207B700h */ case    1:  		/* addi R10, R1, 128 */
		/* 8207B700h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8207B700h case    1:*/		return 0x8207B704;
		  /* 8207B704h */ case    2:  		/* addi R9, R1, 32 */
		/* 8207B704h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x20);
		/* 8207B704h case    2:*/		return 0x8207B708;
		  /* 8207B708h */ case    3:  		/* lwzx R8, <#[R11 + R10]> */
		/* 8207B708h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B708h case    3:*/		return 0x8207B70C;
		  /* 8207B70Ch */ case    4:  		/* lwzx R9, <#[R11 + R9]> */
		/* 8207B70Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207B70Ch case    4:*/		return 0x8207B710;
		  /* 8207B710h */ case    5:  		/* addi R8, R8, -1 */
		/* 8207B710h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8207B710h case    5:*/		return 0x8207B714;
		  /* 8207B714h */ case    6:  		/* sraw R9, R31, R9 */
		/* 8207B714h case    6:*/		cpu::op::sraw<0>(regs,&regs.R9,regs.R31,regs.R9);
		/* 8207B714h case    6:*/		return 0x8207B718;
		  /* 8207B718h */ case    7:  		/* add. R7, R9, R7 */
		/* 8207B718h case    7:*/		cpu::op::add<1>(regs,&regs.R7,regs.R9,regs.R7);
		/* 8207B718h case    7:*/		return 0x8207B71C;
		  /* 8207B71Ch */ case    8:  		/* stwx R8, <#[R11 + R10]> */
		/* 8207B71Ch case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207B71Ch case    8:*/		return 0x8207B720;
		  /* 8207B720h */ case    9:  		/* bc 12, CR0_LT, -276 */
		/* 8207B720h case    9:*/		if ( regs.CR[0].lt ) { return 0x8207B60C;  }
		/* 8207B720h case    9:*/		return 0x8207B724;
	}
	return 0x8207B724;
} // Block from 8207B6FCh-8207B724h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207B724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B724);
		  /* 8207B724h */ case    0:  		/* cmpwi CR6, R5, 0 */
		/* 8207B724h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207B724h case    0:*/		return 0x8207B728;
		  /* 8207B728h */ case    1:  		/* bc 4, CR6_GT, 56 */
		/* 8207B728h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207B760;  }
		/* 8207B728h case    1:*/		return 0x8207B72C;
		  /* 8207B72Ch */ case    2:  		/* rlwinm R10, R6, 2, 0, 29 */
		/* 8207B72Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R6);
		/* 8207B72Ch case    2:*/		return 0x8207B730;
		  /* 8207B730h */ case    3:  		/* mtspr CTR, R5 */
		/* 8207B730h case    3:*/		regs.CTR = regs.R5;
		/* 8207B730h case    3:*/		return 0x8207B734;
		  /* 8207B734h */ case    4:  		/* mr R11, R27 */
		/* 8207B734h case    4:*/		regs.R11 = regs.R27;
		/* 8207B734h case    4:*/		return 0x8207B738;
		  /* 8207B738h */ case    5:  		/* subf R9, R10, R3 */
		/* 8207B738h case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R3);
		/* 8207B738h case    5:*/		return 0x8207B73C;
		  /* 8207B73Ch */ case    6:  		/* addi R8, R1, 32 */
		/* 8207B73Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x20);
		/* 8207B73Ch case    6:*/		return 0x8207B740;
		  /* 8207B740h */ case    7:  		/* addi R7, R1, 128 */
		/* 8207B740h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 8207B740h case    7:*/		return 0x8207B744;
		  /* 8207B744h */ case    8:  		/* lwzx R8, <#[R11 + R8]> */
		/* 8207B744h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8207B744h case    8:*/		return 0x8207B748;
		  /* 8207B748h */ case    9:  		/* lwzx R7, <#[R11 + R7]> */
		/* 8207B748h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8207B748h case    9:*/		return 0x8207B74C;
		  /* 8207B74Ch */ case   10:  		/* addi R11, R11, 4 */
		/* 8207B74Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207B74Ch case   10:*/		return 0x8207B750;
		  /* 8207B750h */ case   11:  		/* subfic R8, R8, 2 */
		/* 8207B750h case   11:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x2);
		/* 8207B750h case   11:*/		return 0x8207B754;
		  /* 8207B754h */ case   12:  		/* slw R8, R7, R8 */
		/* 8207B754h case   12:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8207B754h case   12:*/		return 0x8207B758;
		  /* 8207B758h */ case   13:  		/* stwux R8, <#[R9 + R10]> */
		/* 8207B758h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		regs.R9 = (uint32)(regs.R9 + regs.R10 + 0x00000000);
		/* 8207B758h case   13:*/		return 0x8207B75C;
		  /* 8207B75Ch */ case   14:  		/* bc 16, CR0_LT, -32 */
		/* 8207B75Ch case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207B73C;  }
		/* 8207B75Ch case   14:*/		return 0x8207B760;
	}
	return 0x8207B760;
} // Block from 8207B724h-8207B760h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207B760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B760);
		  /* 8207B760h */ case    0:  		/* addic. R28, R28, -1 */
		/* 8207B760h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8207B760h case    0:*/		return 0x8207B764;
		  /* 8207B764h */ case    1:  		/* addi R3, R3, 4 */
		/* 8207B764h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 8207B764h case    1:*/		return 0x8207B768;
		  /* 8207B768h */ case    2:  		/* bc 4, CR0_EQ, -796 */
		/* 8207B768h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8207B44C;  }
		/* 8207B768h case    2:*/		return 0x8207B76C;
	}
	return 0x8207B76C;
} // Block from 8207B760h-8207B76Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207B76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B76C);
		  /* 8207B76Ch */ case    0:  		/* addi R1, R1, 928 */
		/* 8207B76Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x3A0);
		/* 8207B76Ch case    0:*/		return 0x8207B770;
		  /* 8207B770h */ case    1:  		/* b 88880 */
		/* 8207B770h case    1:*/		return 0x820912A0;
		/* 8207B770h case    1:*/		return 0x8207B774;
		  /* 8207B774h */ case    2:  		/* nop */
		/* 8207B774h case    2:*/		cpu::op::nop();
		/* 8207B774h case    2:*/		return 0x8207B778;
	}
	return 0x8207B778;
} // Block from 8207B76Ch-8207B778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207B778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B778);
		  /* 8207B778h */ case    0:  		/* mfspr R12, LR */
		/* 8207B778h case    0:*/		regs.R12 = regs.LR;
		/* 8207B778h case    0:*/		return 0x8207B77C;
		  /* 8207B77Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207B77Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B77Ch case    1:*/		return 0x8207B780;
		  /* 8207B780h */ case    2:  		/* stfd FR29, <#[R1 - 32]> */
		/* 8207B780h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207B780h case    2:*/		return 0x8207B784;
		  /* 8207B784h */ case    3:  		/* stfd FR30, <#[R1 - 24]> */
		/* 8207B784h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207B784h case    3:*/		return 0x8207B788;
		  /* 8207B788h */ case    4:  		/* stfd FR31, <#[R1 - 16]> */
		/* 8207B788h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B788h case    4:*/		return 0x8207B78C;
		  /* 8207B78Ch */ case    5:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207B78Ch case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207B78Ch case    5:*/		return 0x8207B790;
		  /* 8207B790h */ case    6:  		/* fabs FR30, FR1 */
		/* 8207B790h case    6:*/		cpu::op::fabs<0>(regs,&regs.FR30,regs.FR1);
		/* 8207B790h case    6:*/		return 0x8207B794;
		  /* 8207B794h */ case    7:  		/* lis R11, -32256 */
		/* 8207B794h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B794h case    7:*/		return 0x8207B798;
		  /* 8207B798h */ case    8:  		/* lfs FR0, <#[R11 + 8704]> */
		/* 8207B798h case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002200) );
		/* 8207B798h case    8:*/		return 0x8207B79C;
		  /* 8207B79Ch */ case    9:  		/* fcmpu CR6, FR30, FR0 */
		/* 8207B79Ch case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR30,regs.FR0);
		/* 8207B79Ch case    9:*/		return 0x8207B7A0;
		  /* 8207B7A0h */ case   10:  		/* bc 4, CR6_LT, 104 */
		/* 8207B7A0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8207B808;  }
		/* 8207B7A0h case   10:*/		return 0x8207B7A4;
		  /* 8207B7A4h */ case   11:  		/* lis R11, -32256 */
		/* 8207B7A4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B7A4h case   11:*/		return 0x8207B7A8;
		  /* 8207B7A8h */ case   12:  		/* lis R10, -32256 */
		/* 8207B7A8h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B7A8h case   12:*/		return 0x8207B7AC;
		  /* 8207B7ACh */ case   13:  		/* lis R9, -32256 */
		/* 8207B7ACh case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B7ACh case   13:*/		return 0x8207B7B0;
		  /* 8207B7B0h */ case   14:  		/* lis R8, -32256 */
		/* 8207B7B0h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207B7B0h case   14:*/		return 0x8207B7B4;
		  /* 8207B7B4h */ case   15:  		/* lis R7, -32256 */
		/* 8207B7B4h case   15:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207B7B4h case   15:*/		return 0x8207B7B8;
		  /* 8207B7B8h */ case   16:  		/* lfs FR0, <#[R11 + 8700]> */
		/* 8207B7B8h case   16:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000021FC) );
		/* 8207B7B8h case   16:*/		return 0x8207B7BC;
		  /* 8207B7BCh */ case   17:  		/* lis R11, -32256 */
		/* 8207B7BCh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B7BCh case   17:*/		return 0x8207B7C0;
		  /* 8207B7C0h */ case   18:  		/* fmuls FR7, FR1, FR0 */
		/* 8207B7C0h case   18:*/		cpu::op::fmuls<0>(regs,&regs.FR7,regs.FR1,regs.FR0);
		/* 8207B7C0h case   18:*/		return 0x8207B7C4;
		  /* 8207B7C4h */ case   19:  		/* lfs FR0, <#[R10 + 8696]> */
		/* 8207B7C4h case   19:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x000021F8) );
		/* 8207B7C4h case   19:*/		return 0x8207B7C8;
		  /* 8207B7C8h */ case   20:  		/* lfs FR13, <#[R9 + 8692]> */
		/* 8207B7C8h case   20:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x000021F4) );
		/* 8207B7C8h case   20:*/		return 0x8207B7CC;
		  /* 8207B7CCh */ case   21:  		/* lis R10, -32256 */
		/* 8207B7CCh case   21:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B7CCh case   21:*/		return 0x8207B7D0;
		  /* 8207B7D0h */ case   22:  		/* lfs FR12, <#[R8 + 8688]> */
		/* 8207B7D0h case   22:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R8 + 0x000021F0) );
		/* 8207B7D0h case   22:*/		return 0x8207B7D4;
		  /* 8207B7D4h */ case   23:  		/* lis R9, -32256 */
		/* 8207B7D4h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B7D4h case   23:*/		return 0x8207B7D8;
		  /* 8207B7D8h */ case   24:  		/* lfs FR11, <#[R7 + 8684]> */
		/* 8207B7D8h case   24:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R7 + 0x000021EC) );
		/* 8207B7D8h case   24:*/		return 0x8207B7DC;
		  /* 8207B7DCh */ case   25:  		/* lfs FR10, <#[R11 + 8680]> */
		/* 8207B7DCh case   25:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R11 + 0x000021E8) );
		/* 8207B7DCh case   25:*/		return 0x8207B7E0;
		  /* 8207B7E0h */ case   26:  		/* lfs FR9, <#[R10 + 8676]> */
		/* 8207B7E0h case   26:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R10 + 0x000021E4) );
		/* 8207B7E0h case   26:*/		return 0x8207B7E4;
		  /* 8207B7E4h */ case   27:  		/* lfs FR8, <#[R9 + 1792]> */
		/* 8207B7E4h case   27:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R9 + 0x00000700) );
		/* 8207B7E4h case   27:*/		return 0x8207B7E8;
		  /* 8207B7E8h */ case   28:  		/* fmuls FR7, FR7, FR7 */
		/* 8207B7E8h case   28:*/		cpu::op::fmuls<0>(regs,&regs.FR7,regs.FR7,regs.FR7);
		/* 8207B7E8h case   28:*/		return 0x8207B7EC;
		  /* 8207B7ECh */ case   29:  		/* fmadds FR0, FR7, FR0, FR13 */
		/* 8207B7ECh case   29:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR7,regs.FR0,regs.FR13);
		/* 8207B7ECh case   29:*/		return 0x8207B7F0;
		  /* 8207B7F0h */ case   30:  		/* fmadds FR0, FR0, FR7, FR12 */
		/* 8207B7F0h case   30:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR7,regs.FR12);
		/* 8207B7F0h case   30:*/		return 0x8207B7F4;
		  /* 8207B7F4h */ case   31:  		/* fmadds FR0, FR0, FR7, FR11 */
		/* 8207B7F4h case   31:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR7,regs.FR11);
		/* 8207B7F4h case   31:*/		return 0x8207B7F8;
		  /* 8207B7F8h */ case   32:  		/* fmadds FR0, FR0, FR7, FR10 */
		/* 8207B7F8h case   32:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR7,regs.FR10);
		/* 8207B7F8h case   32:*/		return 0x8207B7FC;
		  /* 8207B7FCh */ case   33:  		/* fmadds FR0, FR0, FR7, FR9 */
		/* 8207B7FCh case   33:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR7,regs.FR9);
		/* 8207B7FCh case   33:*/		return 0x8207B800;
		  /* 8207B800h */ case   34:  		/* fmadds FR1, FR0, FR7, FR8 */
		/* 8207B800h case   34:*/		cpu::op::fmadds<0>(regs,&regs.FR1,regs.FR0,regs.FR7,regs.FR8);
		/* 8207B800h case   34:*/		return 0x8207B804;
		  /* 8207B804h */ case   35:  		/* b 256 */
		/* 8207B804h case   35:*/		return 0x8207B904;
		/* 8207B804h case   35:*/		return 0x8207B808;
	}
	return 0x8207B808;
} // Block from 8207B778h-8207B808h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8207B808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B808);
		  /* 8207B808h */ case    0:  		/* lis R11, -32256 */
		/* 8207B808h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B808h case    0:*/		return 0x8207B80C;
		  /* 8207B80Ch */ case    1:  		/* stfs FR30, <#[R1 + 80]> */
		/* 8207B80Ch case    1:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B80Ch case    1:*/		return 0x8207B810;
		  /* 8207B810h */ case    2:  		/* addi R10, R1, 80 */
		/* 8207B810h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8207B810h case    2:*/		return 0x8207B814;
		  /* 8207B814h */ case    3:  		/* fdivs FR29, FR0, FR30 */
		/* 8207B814h case    3:*/		cpu::op::fdivs<0>(regs,&regs.FR29,regs.FR0,regs.FR30);
		/* 8207B814h case    3:*/		return 0x8207B818;
		  /* 8207B818h */ case    4:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 8207B818h case    4:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 8207B818h case    4:*/		return 0x8207B81C;
		  /* 8207B81Ch */ case    5:  		/* stfs FR31, <#[R1 + 84]> */
		/* 8207B81Ch case    5:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000054) );
		/* 8207B81Ch case    5:*/		return 0x8207B820;
		  /* 8207B820h */ case    6:  		/* stfs FR31, <#[R1 + 88]> */
		/* 8207B820h case    6:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000058) );
		/* 8207B820h case    6:*/		return 0x8207B824;
		  /* 8207B824h */ case    7:  		/* stfs FR31, <#[R1 + 92]> */
		/* 8207B824h case    7:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207B824h case    7:*/		return 0x8207B828;
		  /* 8207B828h */ case    8:  		/* lvx VR1, <#[R10]> */
		/* 8207B828h case    8:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R10 + 0x00000000) );
		/* 8207B828h case    8:*/		return 0x8207B82C;
		  /* 8207B82Ch */ case    9:  		/* bl -2172 */
		/* 8207B82Ch case    9:*/		regs.LR = 0x8207B830; return 0x8207AFB0;
		/* 8207B82Ch case    9:*/		return 0x8207B830;
		  /* 8207B830h */ case   10:  		/* addi R9, R1, 80 */
		/* 8207B830h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8207B830h case   10:*/		return 0x8207B834;
		  /* 8207B834h */ case   11:  		/* vspltisw VR63, 1 */
		/* 8207B834h case   11:*/		cpu::op::vspltisw<0,1>(regs,&regs.VR63);
		/* 8207B834h case   11:*/		return 0x8207B838;
		  /* 8207B838h */ case   12:  		/* stfs FR30, <#[R1 + 80]> */
		/* 8207B838h case   12:*/		cpu::mem::store32f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B838h case   12:*/		return 0x8207B83C;
		  /* 8207B83Ch */ case   13:  		/* lis R11, -32256 */
		/* 8207B83Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B83Ch case   13:*/		return 0x8207B840;
		  /* 8207B840h */ case   14:  		/* stfs FR31, <#[R1 + 84]> */
		/* 8207B840h case   14:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000054) );
		/* 8207B840h case   14:*/		return 0x8207B844;
		  /* 8207B844h */ case   15:  		/* lis R10, -32256 */
		/* 8207B844h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B844h case   15:*/		return 0x8207B848;
		  /* 8207B848h */ case   16:  		/* stfs FR31, <#[R1 + 88]> */
		/* 8207B848h case   16:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000058) );
		/* 8207B848h case   16:*/		return 0x8207B84C;
		  /* 8207B84Ch */ case   17:  		/* lis R8, -32256 */
		/* 8207B84Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207B84Ch case   17:*/		return 0x8207B850;
		  /* 8207B850h */ case   18:  		/* stfs FR31, <#[R1 + 92]> */
		/* 8207B850h case   18:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207B850h case   18:*/		return 0x8207B854;
		  /* 8207B854h */ case   19:  		/* vcsxwfp VR11, VR63, 1 */
		/* 8207B854h case   19:*/		cpu::op::vcsxwfp<0,1>(regs,&regs.VR11,regs.VR63);
		/* 8207B854h case   19:*/		return 0x8207B858;
		  /* 8207B858h */ case   20:  		/* lvx VR63, <#[R9]> */
		/* 8207B858h case   20:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R9 + 0x00000000) );
		/* 8207B858h case   20:*/		return 0x8207B85C;
		  /* 8207B85Ch */ case   21:  		/* vrsqrtefp VR0, VR63 */
		/* 8207B85Ch case   21:*/		cpu::op::vrsqrtefp<0>(regs,&regs.VR0,regs.VR63);
		/* 8207B85Ch case   21:*/		return 0x8207B860;
		  /* 8207B860h */ case   22:  		/* lfs FR0, <#[R11 + 8672]> */
		/* 8207B860h case   22:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000021E0) );
		/* 8207B860h case   22:*/		return 0x8207B864;
		  /* 8207B864h */ case   23:  		/* vmulfp128 VR12, VR0, VR0 */
		/* 8207B864h case   23:*/		cpu::op::vmulfp128<0>(regs,&regs.VR12,regs.VR0,regs.VR0);
		/* 8207B864h case   23:*/		return 0x8207B868;
		  /* 8207B868h */ case   24:  		/* lfs FR13, <#[R10 + 8668]> */
		/* 8207B868h case   24:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x000021DC) );
		/* 8207B868h case   24:*/		return 0x8207B86C;
		  /* 8207B86Ch */ case   25:  		/* vmulfp128 VR13, VR63, VR11 */
		/* 8207B86Ch case   25:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR63,regs.VR11);
		/* 8207B86Ch case   25:*/		return 0x8207B870;
		  /* 8207B870h */ case   26:  		/* fmsubs FR13, FR29, FR0, FR13 */
		/* 8207B870h case   26:*/		cpu::op::fmsubs<0>(regs,&regs.FR13,regs.FR29,regs.FR0,regs.FR13);
		/* 8207B870h case   26:*/		return 0x8207B874;
		  /* 8207B874h */ case   27:  		/* lfs FR0, <#[R8 + 8664]> */
		/* 8207B874h case   27:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R8 + 0x000021D8) );
		/* 8207B874h case   27:*/		return 0x8207B878;
	}
	return 0x8207B878;
} // Block from 8207B808h-8207B878h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8207B878h
// Function '?Bessi0@D3D@@YAMM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B878);
		  /* 8207B878h */ case    0:  		/* lis R11, -32256 */
		/* 8207B878h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B878h case    0:*/		return 0x8207B87C;
		  /* 8207B87Ch */ case    1:  		/* vcmpeqfp VR62, VR0, VR0 */
		/* 8207B87Ch case    1:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR62,regs.VR0,regs.VR0);
		/* 8207B87Ch case    1:*/		return 0x8207B880;
		  /* 8207B880h */ case    2:  		/* lis R10, -32256 */
		/* 8207B880h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B880h case    2:*/		return 0x8207B884;
		  /* 8207B884h */ case    3:  		/* mr VR10, VR63 */
		/* 8207B884h case    3:*/		regs.VR10 = regs.VR63;
		/* 8207B884h case    3:*/		return 0x8207B888;
		  /* 8207B888h */ case    4:  		/* addi R8, R1, 80 */
		/* 8207B888h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8207B888h case    4:*/		return 0x8207B88C;
		  /* 8207B88Ch */ case    5:  		/* addi R7, R1, 80 */
		/* 8207B88Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8207B88Ch case    5:*/		return 0x8207B890;
		  /* 8207B890h */ case    6:  		/* lis R9, -32256 */
		/* 8207B890h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207B890h case    6:*/		return 0x8207B894;
		  /* 8207B894h */ case    7:  		/* lfs FR12, <#[R10 + 8656]> */
		/* 8207B894h case    7:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x000021D0) );
		/* 8207B894h case    7:*/		return 0x8207B898;
		  /* 8207B898h */ case    8:  		/* lis R10, -32256 */
		/* 8207B898h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B898h case    8:*/		return 0x8207B89C;
		  /* 8207B89Ch */ case    9:  		/* stvx VR1, <#[R8]> */
		/* 8207B89Ch case    9:*/		cpu::mem::stvx( regs, regs.VR1, (uint32)(regs.R8 + 0x00000000) );
		/* 8207B89Ch case    9:*/		return 0x8207B8A0;
		  /* 8207B8A0h */ case   10:  		/* lfs FR8, <#[R1 + 80]> */
		/* 8207B8A0h case   10:*/		cpu::mem::load32f( regs, &regs.FR8, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B8A0h case   10:*/		return 0x8207B8A4;
		  /* 8207B8A4h */ case   11:  		/* fmadds FR0, FR13, FR29, FR0 */
		/* 8207B8A4h case   11:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR13,regs.FR29,regs.FR0);
		/* 8207B8A4h case   11:*/		return 0x8207B8A8;
		  /* 8207B8A8h */ case   12:  		/* lfs FR13, <#[R11 + 8660]> */
		/* 8207B8A8h case   12:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x000021D4) );
		/* 8207B8A8h case   12:*/		return 0x8207B8AC;
		  /* 8207B8ACh */ case   13:  		/* vnmsubfp VR11, VR13, VR12, VR11 */
		/* 8207B8ACh case   13:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR11,regs.VR13,regs.VR12,regs.VR11);
		/* 8207B8ACh case   13:*/		return 0x8207B8B0;
		  /* 8207B8B0h */ case   14:  		/* lis R11, -32256 */
		/* 8207B8B0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B8B0h case   14:*/		return 0x8207B8B4;
		  /* 8207B8B4h */ case   15:  		/* lfs FR10, <#[R10 + 8648]> */
		/* 8207B8B4h case   15:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R10 + 0x000021C8) );
		/* 8207B8B4h case   15:*/		return 0x8207B8B8;
		  /* 8207B8B8h */ case   16:  		/* lfs FR9, <#[R9 + 8652]> */
		/* 8207B8B8h case   16:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R9 + 0x000021CC) );
		/* 8207B8B8h case   16:*/		return 0x8207B8BC;
		  /* 8207B8BCh */ case   17:  		/* lfs FR11, <#[R11 + 8644]> */
		/* 8207B8BCh case   17:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R11 + 0x000021C4) );
		/* 8207B8BCh case   17:*/		return 0x8207B8C0;
		  /* 8207B8C0h */ case   18:  		/* lis R11, -32256 */
		/* 8207B8C0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B8C0h case   18:*/		return 0x8207B8C4;
		  /* 8207B8C4h */ case   19:  		/* fmsubs FR13, FR0, FR29, FR13 */
		/* 8207B8C4h case   19:*/		cpu::op::fmsubs<0>(regs,&regs.FR13,regs.FR0,regs.FR29,regs.FR13);
		/* 8207B8C4h case   19:*/		return 0x8207B8C8;
		  /* 8207B8C8h */ case   20:  		/* lfs FR0, <#[R11 + 8640]> */
		/* 8207B8C8h case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000021C0) );
		/* 8207B8C8h case   20:*/		return 0x8207B8CC;
		  /* 8207B8CCh */ case   21:  		/* vmaddfp VR0, VR0, VR11, VR0 */
		/* 8207B8CCh case   21:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR11,regs.VR0);
		/* 8207B8CCh case   21:*/		return 0x8207B8D0;
		  /* 8207B8D0h */ case   22:  		/* vcmpeqfp VR61, VR11, VR11 */
		/* 8207B8D0h case   22:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR61,regs.VR11,regs.VR11);
		/* 8207B8D0h case   22:*/		return 0x8207B8D4;
		  /* 8207B8D4h */ case   23:  		/* fmadds FR13, FR13, FR29, FR12 */
		/* 8207B8D4h case   23:*/		cpu::op::fmadds<0>(regs,&regs.FR13,regs.FR13,regs.FR29,regs.FR12);
		/* 8207B8D4h case   23:*/		return 0x8207B8D8;
		  /* 8207B8D8h */ case   24:  		/* vmulfp128 VR0, VR63, VR0 */
		/* 8207B8D8h case   24:*/		cpu::op::vmulfp128<0>(regs,&regs.VR0,regs.VR63,regs.VR0);
		/* 8207B8D8h case   24:*/		return 0x8207B8DC;
		  /* 8207B8DCh */ case   25:  		/* vxor VR13, VR61, VR62 */
		/* 8207B8DCh case   25:*/		cpu::op::vxor<0>(regs,&regs.VR13,regs.VR61,regs.VR62);
		/* 8207B8DCh case   25:*/		return 0x8207B8E0;
		  /* 8207B8E0h */ case   26:  		/* fmsubs FR13, FR13, FR29, FR11 */
		/* 8207B8E0h case   26:*/		cpu::op::fmsubs<0>(regs,&regs.FR13,regs.FR13,regs.FR29,regs.FR11);
		/* 8207B8E0h case   26:*/		return 0x8207B8E4;
		  /* 8207B8E4h */ case   27:  		/* vsel VR13, VR0, VR10, VR13 */
		/* 8207B8E4h case   27:*/		cpu::op::vsel<0>(regs,&regs.VR13,regs.VR0,regs.VR10,regs.VR13);
		/* 8207B8E4h case   27:*/		return 0x8207B8E8;
		  /* 8207B8E8h */ case   28:  		/* stvx VR13, <#[R7]> */
		/* 8207B8E8h case   28:*/		cpu::mem::stvx( regs, regs.VR13, (uint32)(regs.R7 + 0x00000000) );
		/* 8207B8E8h case   28:*/		return 0x8207B8EC;
		  /* 8207B8ECh */ case   29:  		/* fmadds FR13, FR13, FR29, FR10 */
		/* 8207B8ECh case   29:*/		cpu::op::fmadds<0>(regs,&regs.FR13,regs.FR13,regs.FR29,regs.FR10);
		/* 8207B8ECh case   29:*/		return 0x8207B8F0;
		  /* 8207B8F0h */ case   30:  		/* lfs FR12, <#[R1 + 80]> */
		/* 8207B8F0h case   30:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B8F0h case   30:*/		return 0x8207B8F4;
		  /* 8207B8F4h */ case   31:  		/* fdivs FR12, FR8, FR12 */
		/* 8207B8F4h case   31:*/		cpu::op::fdivs<0>(regs,&regs.FR12,regs.FR8,regs.FR12);
		/* 8207B8F4h case   31:*/		return 0x8207B8F8;
		  /* 8207B8F8h */ case   32:  		/* fmadds FR13, FR13, FR29, FR9 */
		/* 8207B8F8h case   32:*/		cpu::op::fmadds<0>(regs,&regs.FR13,regs.FR13,regs.FR29,regs.FR9);
		/* 8207B8F8h case   32:*/		return 0x8207B8FC;
		  /* 8207B8FCh */ case   33:  		/* fmadds FR0, FR13, FR29, FR0 */
		/* 8207B8FCh case   33:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR13,regs.FR29,regs.FR0);
		/* 8207B8FCh case   33:*/		return 0x8207B900;
		  /* 8207B900h */ case   34:  		/* fmuls FR1, FR0, FR12 */
		/* 8207B900h case   34:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR12);
		/* 8207B900h case   34:*/		return 0x8207B904;
	}
	return 0x8207B904;
} // Block from 8207B878h-8207B904h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8207B904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B904);
		  /* 8207B904h */ case    0:  		/* addi R1, R1, 128 */
		/* 8207B904h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207B904h case    0:*/		return 0x8207B908;
		  /* 8207B908h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207B908h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B908h case    1:*/		return 0x8207B90C;
		  /* 8207B90Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8207B90Ch case    2:*/		regs.LR = regs.R12;
		/* 8207B90Ch case    2:*/		return 0x8207B910;
		  /* 8207B910h */ case    3:  		/* lfd FR29, <#[R1 - 32]> */
		/* 8207B910h case    3:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207B910h case    3:*/		return 0x8207B914;
		  /* 8207B914h */ case    4:  		/* lfd FR30, <#[R1 - 24]> */
		/* 8207B914h case    4:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207B914h case    4:*/		return 0x8207B918;
		  /* 8207B918h */ case    5:  		/* lfd FR31, <#[R1 - 16]> */
		/* 8207B918h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B918h case    5:*/		return 0x8207B91C;
		  /* 8207B91Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207B91Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207B91Ch case    6:*/		return 0x8207B920;
	}
	return 0x8207B920;
} // Block from 8207B904h-8207B920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207B920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B920);
		  /* 8207B920h */ case    0:  		/* mfspr R12, LR */
		/* 8207B920h case    0:*/		regs.R12 = regs.LR;
		/* 8207B920h case    0:*/		return 0x8207B924;
		  /* 8207B924h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207B924h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B924h case    1:*/		return 0x8207B928;
		  /* 8207B928h */ case    2:  		/* stfd FR30, <#[R1 - 24]> */
		/* 8207B928h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207B928h case    2:*/		return 0x8207B92C;
		  /* 8207B92Ch */ case    3:  		/* stfd FR31, <#[R1 - 16]> */
		/* 8207B92Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B92Ch case    3:*/		return 0x8207B930;
		  /* 8207B930h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207B930h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207B930h case    4:*/		return 0x8207B934;
		  /* 8207B934h */ case    5:  		/* fsubs FR0, FR1, FR2 */
		/* 8207B934h case    5:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR1,regs.FR2);
		/* 8207B934h case    5:*/		return 0x8207B938;
		  /* 8207B938h */ case    6:  		/* lis R11, -32256 */
		/* 8207B938h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B938h case    6:*/		return 0x8207B93C;
		  /* 8207B93Ch */ case    7:  		/* lis R10, -32256 */
		/* 8207B93Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207B93Ch case    7:*/		return 0x8207B940;
		  /* 8207B940h */ case    8:  		/* vspltisw VR63, 1 */
		/* 8207B940h case    8:*/		cpu::op::vspltisw<0,1>(regs,&regs.VR63);
		/* 8207B940h case    8:*/		return 0x8207B944;
		  /* 8207B944h */ case    9:  		/* addi R9, R1, 80 */
		/* 8207B944h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8207B944h case    9:*/		return 0x8207B948;
		  /* 8207B948h */ case   10:  		/* fmr FR31, FR3 */
		/* 8207B948h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR3);
		/* 8207B948h case   10:*/		return 0x8207B94C;
		  /* 8207B94Ch */ case   11:  		/* addi R8, R1, 80 */
		/* 8207B94Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8207B94Ch case   11:*/		return 0x8207B950;
		  /* 8207B950h */ case   12:  		/* lfs FR13, <#[R11 + 1792]> */
		/* 8207B950h case   12:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000700) );
		/* 8207B950h case   12:*/		return 0x8207B954;
		  /* 8207B954h */ case   13:  		/* vcsxwfp VR11, VR63, 1 */
		/* 8207B954h case   13:*/		cpu::op::vcsxwfp<0,1>(regs,&regs.VR11,regs.VR63);
		/* 8207B954h case   13:*/		return 0x8207B958;
		  /* 8207B958h */ case   14:  		/* fdivs FR12, FR0, FR2 */
		/* 8207B958h case   14:*/		cpu::op::fdivs<0>(regs,&regs.FR12,regs.FR0,regs.FR2);
		/* 8207B958h case   14:*/		return 0x8207B95C;
		  /* 8207B95Ch */ case   15:  		/* lfs FR0, <#[R10 + 1816]> */
		/* 8207B95Ch case   15:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000718) );
		/* 8207B95Ch case   15:*/		return 0x8207B960;
		  /* 8207B960h */ case   16:  		/* stfs FR0, <#[R1 + 84]> */
		/* 8207B960h case   16:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000054) );
		/* 8207B960h case   16:*/		return 0x8207B964;
		  /* 8207B964h */ case   17:  		/* stfs FR0, <#[R1 + 88]> */
		/* 8207B964h case   17:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207B964h case   17:*/		return 0x8207B968;
		  /* 8207B968h */ case   18:  		/* stfs FR0, <#[R1 + 92]> */
		/* 8207B968h case   18:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207B968h case   18:*/		return 0x8207B96C;
		  /* 8207B96Ch */ case   19:  		/* fnmsubs FR0, FR12, FR12, FR13 */
		/* 8207B96Ch case   19:*/		cpu::op::fnmsubs<0>(regs,&regs.FR0,regs.FR12,regs.FR12,regs.FR13);
		/* 8207B96Ch case   19:*/		return 0x8207B970;
		  /* 8207B970h */ case   20:  		/* stfs FR0, <#[R1 + 80]> */
		/* 8207B970h case   20:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B970h case   20:*/		return 0x8207B974;
		  /* 8207B974h */ case   21:  		/* lvx VR63, <#[R9]> */
		/* 8207B974h case   21:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R9 + 0x00000000) );
		/* 8207B974h case   21:*/		return 0x8207B978;
		  /* 8207B978h */ case   22:  		/* vrsqrtefp VR0, VR63 */
		/* 8207B978h case   22:*/		cpu::op::vrsqrtefp<0>(regs,&regs.VR0,regs.VR63);
		/* 8207B978h case   22:*/		return 0x8207B97C;
		  /* 8207B97Ch */ case   23:  		/* vmulfp128 VR12, VR0, VR0 */
		/* 8207B97Ch case   23:*/		cpu::op::vmulfp128<0>(regs,&regs.VR12,regs.VR0,regs.VR0);
		/* 8207B97Ch case   23:*/		return 0x8207B980;
		  /* 8207B980h */ case   24:  		/* mr VR10, VR63 */
		/* 8207B980h case   24:*/		regs.VR10 = regs.VR63;
		/* 8207B980h case   24:*/		return 0x8207B984;
		  /* 8207B984h */ case   25:  		/* vmulfp128 VR13, VR63, VR11 */
		/* 8207B984h case   25:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR63,regs.VR11);
		/* 8207B984h case   25:*/		return 0x8207B988;
		  /* 8207B988h */ case   26:  		/* vcmpeqfp VR62, VR0, VR0 */
		/* 8207B988h case   26:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR62,regs.VR0,regs.VR0);
		/* 8207B988h case   26:*/		return 0x8207B98C;
		  /* 8207B98Ch */ case   27:  		/* vnmsubfp VR11, VR13, VR12, VR11 */
		/* 8207B98Ch case   27:*/		cpu::op::vnmsubfp<0>(regs,&regs.VR11,regs.VR13,regs.VR12,regs.VR11);
		/* 8207B98Ch case   27:*/		return 0x8207B990;
		  /* 8207B990h */ case   28:  		/* vmaddfp VR0, VR0, VR11, VR0 */
		/* 8207B990h case   28:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR0,regs.VR11,regs.VR0);
		/* 8207B990h case   28:*/		return 0x8207B994;
		  /* 8207B994h */ case   29:  		/* vcmpeqfp VR61, VR11, VR11 */
		/* 8207B994h case   29:*/		cpu::op::vcmpeqfp<0>(regs,&regs.VR61,regs.VR11,regs.VR11);
		/* 8207B994h case   29:*/		return 0x8207B998;
		  /* 8207B998h */ case   30:  		/* vmulfp128 VR0, VR63, VR0 */
		/* 8207B998h case   30:*/		cpu::op::vmulfp128<0>(regs,&regs.VR0,regs.VR63,regs.VR0);
		/* 8207B998h case   30:*/		return 0x8207B99C;
		  /* 8207B99Ch */ case   31:  		/* vxor VR13, VR61, VR62 */
		/* 8207B99Ch case   31:*/		cpu::op::vxor<0>(regs,&regs.VR13,regs.VR61,regs.VR62);
		/* 8207B99Ch case   31:*/		return 0x8207B9A0;
		  /* 8207B9A0h */ case   32:  		/* vsel VR13, VR0, VR10, VR13 */
		/* 8207B9A0h case   32:*/		cpu::op::vsel<0>(regs,&regs.VR13,regs.VR0,regs.VR10,regs.VR13);
		/* 8207B9A0h case   32:*/		return 0x8207B9A4;
		  /* 8207B9A4h */ case   33:  		/* stvx VR13, <#[R8]> */
		/* 8207B9A4h case   33:*/		cpu::mem::stvx( regs, regs.VR13, (uint32)(regs.R8 + 0x00000000) );
		/* 8207B9A4h case   33:*/		return 0x8207B9A8;
		  /* 8207B9A8h */ case   34:  		/* lfs FR0, <#[R1 + 80]> */
		/* 8207B9A8h case   34:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207B9A8h case   34:*/		return 0x8207B9AC;
		  /* 8207B9ACh */ case   35:  		/* fmuls FR1, FR0, FR3 */
		/* 8207B9ACh case   35:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR3);
		/* 8207B9ACh case   35:*/		return 0x8207B9B0;
		  /* 8207B9B0h */ case   36:  		/* bl -568 */
		/* 8207B9B0h case   36:*/		regs.LR = 0x8207B9B4; return 0x8207B778;
		/* 8207B9B0h case   36:*/		return 0x8207B9B4;
		  /* 8207B9B4h */ case   37:  		/* fmr FR30, FR1 */
		/* 8207B9B4h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 8207B9B4h case   37:*/		return 0x8207B9B8;
		  /* 8207B9B8h */ case   38:  		/* fmr FR1, FR31 */
		/* 8207B9B8h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207B9B8h case   38:*/		return 0x8207B9BC;
		  /* 8207B9BCh */ case   39:  		/* bl -580 */
		/* 8207B9BCh case   39:*/		regs.LR = 0x8207B9C0; return 0x8207B778;
		/* 8207B9BCh case   39:*/		return 0x8207B9C0;
		  /* 8207B9C0h */ case   40:  		/* fdivs FR1, FR30, FR1 */
		/* 8207B9C0h case   40:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR30,regs.FR1);
		/* 8207B9C0h case   40:*/		return 0x8207B9C4;
		  /* 8207B9C4h */ case   41:  		/* addi R1, R1, 128 */
		/* 8207B9C4h case   41:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207B9C4h case   41:*/		return 0x8207B9C8;
		  /* 8207B9C8h */ case   42:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207B9C8h case   42:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B9C8h case   42:*/		return 0x8207B9CC;
		  /* 8207B9CCh */ case   43:  		/* mtspr LR, R12 */
		/* 8207B9CCh case   43:*/		regs.LR = regs.R12;
		/* 8207B9CCh case   43:*/		return 0x8207B9D0;
		  /* 8207B9D0h */ case   44:  		/* lfd FR30, <#[R1 - 24]> */
		/* 8207B9D0h case   44:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207B9D0h case   44:*/		return 0x8207B9D4;
		  /* 8207B9D4h */ case   45:  		/* lfd FR31, <#[R1 - 16]> */
		/* 8207B9D4h case   45:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B9D4h case   45:*/		return 0x8207B9D8;
		  /* 8207B9D8h */ case   46:  		/* bclr 20, CR0_LT */
		/* 8207B9D8h case   46:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207B9D8h case   46:*/		return 0x8207B9DC;
	}
	return 0x8207B9DC;
} // Block from 8207B920h-8207B9DCh (47 instructions)

//////////////////////////////////////////////////////
// Block at 8207B9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B9DC);
		  /* 8207B9DCh */ case    0:  		/* nop */
		/* 8207B9DCh case    0:*/		cpu::op::nop();
		/* 8207B9DCh case    0:*/		return 0x8207B9E0;
	}
	return 0x8207B9E0;
} // Block from 8207B9DCh-8207B9E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207B9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207B9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207B9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207B9E0);
		  /* 8207B9E0h */ case    0:  		/* mfspr R12, LR */
		/* 8207B9E0h case    0:*/		regs.R12 = regs.LR;
		/* 8207B9E0h case    0:*/		return 0x8207B9E4;
		  /* 8207B9E4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207B9E4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207B9E4h case    1:*/		return 0x8207B9E8;
		  /* 8207B9E8h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 8207B9E8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207B9E8h case    2:*/		return 0x8207B9EC;
		  /* 8207B9ECh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207B9ECh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207B9ECh case    3:*/		return 0x8207B9F0;
		  /* 8207B9F0h */ case    4:  		/* lis R11, -32256 */
		/* 8207B9F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207B9F0h case    4:*/		return 0x8207B9F4;
		  /* 8207B9F4h */ case    5:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 8207B9F4h case    5:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 8207B9F4h case    5:*/		return 0x8207B9F8;
		  /* 8207B9F8h */ case    6:  		/* fcmpu CR6, FR1, FR0 */
		/* 8207B9F8h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8207B9F8h case    6:*/		return 0x8207B9FC;
		  /* 8207B9FCh */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8207B9FCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207BA0C;  }
		/* 8207B9FCh case    7:*/		return 0x8207BA00;
		  /* 8207BA00h */ case    8:  		/* lis R11, -32256 */
		/* 8207BA00h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA00h case    8:*/		return 0x8207BA04;
		  /* 8207BA04h */ case    9:  		/* lfs FR1, <#[R11 + 1792]> */
		/* 8207BA04h case    9:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000700) );
		/* 8207BA04h case    9:*/		return 0x8207BA08;
		  /* 8207BA08h */ case   10:  		/* b 28 */
		/* 8207BA08h case   10:*/		return 0x8207BA24;
		/* 8207BA08h case   10:*/		return 0x8207BA0C;
	}
	return 0x8207BA0C;
} // Block from 8207B9E0h-8207BA0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207BA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BA0C);
		  /* 8207BA0Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207BA0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA0Ch case    0:*/		return 0x8207BA10;
		  /* 8207BA10h */ case    1:  		/* lfs FR0, <#[R11 + 1804]> */
		/* 8207BA10h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000070C) );
		/* 8207BA10h case    1:*/		return 0x8207BA14;
		  /* 8207BA14h */ case    2:  		/* fmuls FR31, FR1, FR0 */
		/* 8207BA14h case    2:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR1,regs.FR0);
		/* 8207BA14h case    2:*/		return 0x8207BA18;
		  /* 8207BA18h */ case    3:  		/* fmr FR1, FR31 */
		/* 8207BA18h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BA18h case    3:*/		return 0x8207BA1C;
		  /* 8207BA1Ch */ case    4:  		/* bl -2508 */
		/* 8207BA1Ch case    4:*/		regs.LR = 0x8207BA20; return 0x8207B050;
		/* 8207BA1Ch case    4:*/		return 0x8207BA20;
		  /* 8207BA20h */ case    5:  		/* fdivs FR1, FR1, FR31 */
		/* 8207BA20h case    5:*/		cpu::op::fdivs<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 8207BA20h case    5:*/		return 0x8207BA24;
	}
	return 0x8207BA24;
} // Block from 8207BA0Ch-8207BA24h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207BA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BA24);
		  /* 8207BA24h */ case    0:  		/* addi R1, R1, 96 */
		/* 8207BA24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207BA24h case    0:*/		return 0x8207BA28;
		  /* 8207BA28h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207BA28h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207BA28h case    1:*/		return 0x8207BA2C;
		  /* 8207BA2Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8207BA2Ch case    2:*/		regs.LR = regs.R12;
		/* 8207BA2Ch case    2:*/		return 0x8207BA30;
		  /* 8207BA30h */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 8207BA30h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207BA30h case    3:*/		return 0x8207BA34;
		  /* 8207BA34h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207BA34h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207BA34h case    4:*/		return 0x8207BA38;
	}
	return 0x8207BA38;
} // Block from 8207BA24h-8207BA38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207BA38h
// Function '?mitchell@D3D@@YAMM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BA38);
		  /* 8207BA38h */ case    0:  		/* mfspr R12, LR */
		/* 8207BA38h case    0:*/		regs.R12 = regs.LR;
		/* 8207BA38h case    0:*/		return 0x8207BA3C;
		  /* 8207BA3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207BA3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207BA3Ch case    1:*/		return 0x8207BA40;
		  /* 8207BA40h */ case    2:  		/* stfd FR29, <#[R1 - 32]> */
		/* 8207BA40h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207BA40h case    2:*/		return 0x8207BA44;
		  /* 8207BA44h */ case    3:  		/* stfd FR30, <#[R1 - 24]> */
		/* 8207BA44h case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207BA44h case    3:*/		return 0x8207BA48;
		  /* 8207BA48h */ case    4:  		/* stfd FR31, <#[R1 - 16]> */
		/* 8207BA48h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207BA48h case    4:*/		return 0x8207BA4C;
		  /* 8207BA4Ch */ case    5:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207BA4Ch case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207BA4Ch case    5:*/		return 0x8207BA50;
		  /* 8207BA50h */ case    6:  		/* fabs FR13, FR1 */
		/* 8207BA50h case    6:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR1);
		/* 8207BA50h case    6:*/		return 0x8207BA54;
		  /* 8207BA54h */ case    7:  		/* lis R11, -32256 */
		/* 8207BA54h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA54h case    7:*/		return 0x8207BA58;
		  /* 8207BA58h */ case    8:  		/* fmr FR31, FR1 */
		/* 8207BA58h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8207BA58h case    8:*/		return 0x8207BA5C;
		  /* 8207BA5Ch */ case    9:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 8207BA5Ch case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 8207BA5Ch case    9:*/		return 0x8207BA60;
		  /* 8207BA60h */ case   10:  		/* fcmpu CR6, FR13, FR0 */
		/* 8207BA60h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8207BA60h case   10:*/		return 0x8207BA64;
		  /* 8207BA64h */ case   11:  		/* bc 4, CR6_LT, 80 */
		/* 8207BA64h case   11:*/		if ( !regs.CR[6].lt ) { return 0x8207BAB4;  }
		/* 8207BA64h case   11:*/		return 0x8207BA68;
		  /* 8207BA68h */ case   12:  		/* lis R11, -32256 */
		/* 8207BA68h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA68h case   12:*/		return 0x8207BA6C;
		  /* 8207BA6Ch */ case   13:  		/* fabs FR1, FR1 */
		/* 8207BA6Ch case   13:*/		cpu::op::fabs<0>(regs,&regs.FR1,regs.FR1);
		/* 8207BA6Ch case   13:*/		return 0x8207BA70;
		  /* 8207BA70h */ case   14:  		/* lfs FR2, <#[R11 + 8532]> */
		/* 8207BA70h case   14:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00002154) );
		/* 8207BA70h case   14:*/		return 0x8207BA74;
		  /* 8207BA74h */ case   15:  		/* bl -2364 */
		/* 8207BA74h case   15:*/		regs.LR = 0x8207BA78; return 0x8207B138;
		/* 8207BA74h case   15:*/		return 0x8207BA78;
		  /* 8207BA78h */ case   16:  		/* lis R11, -32256 */
		/* 8207BA78h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA78h case   16:*/		return 0x8207BA7C;
		  /* 8207BA7Ch */ case   17:  		/* fmr FR30, FR1 */
		/* 8207BA7Ch case   17:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 8207BA7Ch case   17:*/		return 0x8207BA80;
		  /* 8207BA80h */ case   18:  		/* fmr FR1, FR31 */
		/* 8207BA80h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BA80h case   18:*/		return 0x8207BA84;
		  /* 8207BA84h */ case   19:  		/* lfs FR2, <#[R11 + 2752]> */
		/* 8207BA84h case   19:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207BA84h case   19:*/		return 0x8207BA88;
		  /* 8207BA88h */ case   20:  		/* bl -2384 */
		/* 8207BA88h case   20:*/		regs.LR = 0x8207BA8C; return 0x8207B138;
		/* 8207BA88h case   20:*/		return 0x8207BA8C;
		  /* 8207BA8Ch */ case   21:  		/* lis R11, -32256 */
		/* 8207BA8Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BA8Ch case   21:*/		return 0x8207BA90;
		  /* 8207BA90h */ case   22:  		/* lis R10, -32256 */
		/* 8207BA90h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207BA90h case   22:*/		return 0x8207BA94;
		  /* 8207BA94h */ case   23:  		/* lis R9, -32256 */
		/* 8207BA94h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207BA94h case   23:*/		return 0x8207BA98;
		  /* 8207BA98h */ case   24:  		/* lfs FR0, <#[R11 + 8716]> */
		/* 8207BA98h case   24:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000220C) );
		/* 8207BA98h case   24:*/		return 0x8207BA9C;
		  /* 8207BA9Ch */ case   25:  		/* fmuls FR12, FR1, FR0 */
		/* 8207BA9Ch case   25:*/		cpu::op::fmuls<0>(regs,&regs.FR12,regs.FR1,regs.FR0);
		/* 8207BA9Ch case   25:*/		return 0x8207BAA0;
		  /* 8207BAA0h */ case   26:  		/* lfs FR0, <#[R10 + 8712]> */
		/* 8207BAA0h case   26:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00002208) );
		/* 8207BAA0h case   26:*/		return 0x8207BAA4;
		  /* 8207BAA4h */ case   27:  		/* lfs FR13, <#[R9 + 8708]> */
		/* 8207BAA4h case   27:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00002204) );
		/* 8207BAA4h case   27:*/		return 0x8207BAA8;
		  /* 8207BAA8h */ case   28:  		/* fmsubs FR0, FR30, FR0, FR12 */
		/* 8207BAA8h case   28:*/		cpu::op::fmsubs<0>(regs,&regs.FR0,regs.FR30,regs.FR0,regs.FR12);
		/* 8207BAA8h case   28:*/		return 0x8207BAAC;
		  /* 8207BAACh */ case   29:  		/* fadds FR1, FR0, FR13 */
		/* 8207BAACh case   29:*/		cpu::op::fadds<0>(regs,&regs.FR1,regs.FR0,regs.FR13);
		/* 8207BAACh case   29:*/		return 0x8207BAB0;
		  /* 8207BAB0h */ case   30:  		/* b 112 */
		/* 8207BAB0h case   30:*/		return 0x8207BB20;
		/* 8207BAB0h case   30:*/		return 0x8207BAB4;
	}
	return 0x8207BAB4;
} // Block from 8207BA38h-8207BAB4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207BAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BAB4);
		  /* 8207BAB4h */ case    0:  		/* fabs FR0, FR31 */
		/* 8207BAB4h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR31);
		/* 8207BAB4h case    0:*/		return 0x8207BAB8;
		  /* 8207BAB8h */ case    1:  		/* lis R11, -32256 */
		/* 8207BAB8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BAB8h case    1:*/		return 0x8207BABC;
		  /* 8207BABCh */ case    2:  		/* lfs FR30, <#[R11 + 2752]> */
		/* 8207BABCh case    2:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207BABCh case    2:*/		return 0x8207BAC0;
		  /* 8207BAC0h */ case    3:  		/* fcmpu CR6, FR0, FR30 */
		/* 8207BAC0h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR30);
		/* 8207BAC0h case    3:*/		return 0x8207BAC4;
		  /* 8207BAC4h */ case    4:  		/* bc 4, CR6_LT, 84 */
		/* 8207BAC4h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8207BB18;  }
		/* 8207BAC4h case    4:*/		return 0x8207BAC8;
		  /* 8207BAC8h */ case    5:  		/* fmr FR2, FR30 */
		/* 8207BAC8h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 8207BAC8h case    5:*/		return 0x8207BACC;
		  /* 8207BACCh */ case    6:  		/* fmr FR1, FR31 */
		/* 8207BACCh case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BACCh case    6:*/		return 0x8207BAD0;
		  /* 8207BAD0h */ case    7:  		/* bl -2456 */
		/* 8207BAD0h case    7:*/		regs.LR = 0x8207BAD4; return 0x8207B138;
		/* 8207BAD0h case    7:*/		return 0x8207BAD4;
		  /* 8207BAD4h */ case    8:  		/* lis R11, -32256 */
		/* 8207BAD4h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BAD4h case    8:*/		return 0x8207BAD8;
		  /* 8207BAD8h */ case    9:  		/* fmr FR29, FR1 */
		/* 8207BAD8h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR1);
		/* 8207BAD8h case    9:*/		return 0x8207BADC;
		  /* 8207BADCh */ case   10:  		/* fabs FR1, FR31 */
		/* 8207BADCh case   10:*/		cpu::op::fabs<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BADCh case   10:*/		return 0x8207BAE0;
		  /* 8207BAE0h */ case   11:  		/* lfs FR2, <#[R11 + 8532]> */
		/* 8207BAE0h case   11:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00002154) );
		/* 8207BAE0h case   11:*/		return 0x8207BAE4;
		  /* 8207BAE4h */ case   12:  		/* bl -2476 */
		/* 8207BAE4h case   12:*/		regs.LR = 0x8207BAE8; return 0x8207B138;
		/* 8207BAE4h case   12:*/		return 0x8207BAE8;
		  /* 8207BAE8h */ case   13:  		/* fmuls FR11, FR1, FR30 */
		/* 8207BAE8h case   13:*/		cpu::op::fmuls<0>(regs,&regs.FR11,regs.FR1,regs.FR30);
		/* 8207BAE8h case   13:*/		return 0x8207BAEC;
		  /* 8207BAECh */ case   14:  		/* lis R11, -32256 */
		/* 8207BAECh case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BAECh case   14:*/		return 0x8207BAF0;
		  /* 8207BAF0h */ case   15:  		/* fabs FR10, FR31 */
		/* 8207BAF0h case   15:*/		cpu::op::fabs<0>(regs,&regs.FR10,regs.FR31);
		/* 8207BAF0h case   15:*/		return 0x8207BAF4;
		  /* 8207BAF4h */ case   16:  		/* lis R10, -32256 */
		/* 8207BAF4h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207BAF4h case   16:*/		return 0x8207BAF8;
		  /* 8207BAF8h */ case   17:  		/* lis R9, -32256 */
		/* 8207BAF8h case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207BAF8h case   17:*/		return 0x8207BAFC;
		  /* 8207BAFCh */ case   18:  		/* lfs FR0, <#[R11 + 8716]> */
		/* 8207BAFCh case   18:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x0000220C) );
		/* 8207BAFCh case   18:*/		return 0x8207BB00;
		  /* 8207BB00h */ case   19:  		/* lfs FR13, <#[R10 + 2756]> */
		/* 8207BB00h case   19:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000AC4) );
		/* 8207BB00h case   19:*/		return 0x8207BB04;
		  /* 8207BB04h */ case   20:  		/* lfs FR12, <#[R9 + 2736]> */
		/* 8207BB04h case   20:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00000AB0) );
		/* 8207BB04h case   20:*/		return 0x8207BB08;
		  /* 8207BB08h */ case   21:  		/* fmsubs FR0, FR29, FR0, FR11 */
		/* 8207BB08h case   21:*/		cpu::op::fmsubs<0>(regs,&regs.FR0,regs.FR29,regs.FR0,regs.FR11);
		/* 8207BB08h case   21:*/		return 0x8207BB0C;
		  /* 8207BB0Ch */ case   22:  		/* fnmsubs FR0, FR10, FR13, FR0 */
		/* 8207BB0Ch case   22:*/		cpu::op::fnmsubs<0>(regs,&regs.FR0,regs.FR10,regs.FR13,regs.FR0);
		/* 8207BB0Ch case   22:*/		return 0x8207BB10;
		  /* 8207BB10h */ case   23:  		/* fadds FR1, FR0, FR12 */
		/* 8207BB10h case   23:*/		cpu::op::fadds<0>(regs,&regs.FR1,regs.FR0,regs.FR12);
		/* 8207BB10h case   23:*/		return 0x8207BB14;
		  /* 8207BB14h */ case   24:  		/* b 12 */
		/* 8207BB14h case   24:*/		return 0x8207BB20;
		/* 8207BB14h case   24:*/		return 0x8207BB18;
	}
	return 0x8207BB18;
} // Block from 8207BAB4h-8207BB18h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207BB18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BB18);
		  /* 8207BB18h */ case    0:  		/* lis R11, -32256 */
		/* 8207BB18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BB18h case    0:*/		return 0x8207BB1C;
		  /* 8207BB1Ch */ case    1:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 8207BB1Ch case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 8207BB1Ch case    1:*/		return 0x8207BB20;
	}
	return 0x8207BB20;
} // Block from 8207BB18h-8207BB20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207BB20h
// Function '?GenerateFilterCoefficients@D3D@@YAXW4_D3DFILTER_TYPE@@KKHMMPAM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BB20);
		  /* 8207BB20h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207BB20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207BB20h case    0:*/		return 0x8207BB24;
		  /* 8207BB24h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207BB24h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207BB24h case    1:*/		return 0x8207BB28;
		  /* 8207BB28h */ case    2:  		/* mtspr LR, R12 */
		/* 8207BB28h case    2:*/		regs.LR = regs.R12;
		/* 8207BB28h case    2:*/		return 0x8207BB2C;
		  /* 8207BB2Ch */ case    3:  		/* lfd FR29, <#[R1 - 32]> */
		/* 8207BB2Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207BB2Ch case    3:*/		return 0x8207BB30;
		  /* 8207BB30h */ case    4:  		/* lfd FR30, <#[R1 - 24]> */
		/* 8207BB30h case    4:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207BB30h case    4:*/		return 0x8207BB34;
		  /* 8207BB34h */ case    5:  		/* lfd FR31, <#[R1 - 16]> */
		/* 8207BB34h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207BB34h case    5:*/		return 0x8207BB38;
		  /* 8207BB38h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207BB38h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207BB38h case    6:*/		return 0x8207BB3C;
	}
	return 0x8207BB3C;
} // Block from 8207BB20h-8207BB3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207BB3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BB3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BB3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BB3C);
		  /* 8207BB3Ch */ case    0:  		/* nop */
		/* 8207BB3Ch case    0:*/		cpu::op::nop();
		/* 8207BB3Ch case    0:*/		return 0x8207BB40;
	}
	return 0x8207BB40;
} // Block from 8207BB3Ch-8207BB40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207BB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BB40);
		  /* 8207BB40h */ case    0:  		/* mfspr R12, LR */
		/* 8207BB40h case    0:*/		regs.R12 = regs.LR;
		/* 8207BB40h case    0:*/		return 0x8207BB44;
		  /* 8207BB44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207BB44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207BB44h case    1:*/		return 0x8207BB48;
		  /* 8207BB48h */ case    2:  		/* stfd FR29, <#[R1 - 32]> */
		/* 8207BB48h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207BB48h case    2:*/		return 0x8207BB4C;
		  /* 8207BB4Ch */ case    3:  		/* stfd FR30, <#[R1 - 24]> */
		/* 8207BB4Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207BB4Ch case    3:*/		return 0x8207BB50;
		  /* 8207BB50h */ case    4:  		/* stfd FR31, <#[R1 - 16]> */
		/* 8207BB50h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207BB50h case    4:*/		return 0x8207BB54;
		  /* 8207BB54h */ case    5:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207BB54h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207BB54h case    5:*/		return 0x8207BB58;
		  /* 8207BB58h */ case    6:  		/* fabs FR13, FR1 */
		/* 8207BB58h case    6:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR1);
		/* 8207BB58h case    6:*/		return 0x8207BB5C;
		  /* 8207BB5Ch */ case    7:  		/* lis R11, -32256 */
		/* 8207BB5Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BB5Ch case    7:*/		return 0x8207BB60;
		  /* 8207BB60h */ case    8:  		/* fmr FR31, FR1 */
		/* 8207BB60h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8207BB60h case    8:*/		return 0x8207BB64;
		  /* 8207BB64h */ case    9:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 8207BB64h case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 8207BB64h case    9:*/		return 0x8207BB68;
		  /* 8207BB68h */ case   10:  		/* fcmpu CR6, FR13, FR0 */
		/* 8207BB68h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8207BB68h case   10:*/		return 0x8207BB6C;
		  /* 8207BB6Ch */ case   11:  		/* bc 4, CR6_LT, 80 */
		/* 8207BB6Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x8207BBBC;  }
		/* 8207BB6Ch case   11:*/		return 0x8207BB70;
		  /* 8207BB70h */ case   12:  		/* lis R11, -32256 */
		/* 8207BB70h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BB70h case   12:*/		return 0x8207BB74;
		  /* 8207BB74h */ case   13:  		/* fabs FR1, FR1 */
		/* 8207BB74h case   13:*/		cpu::op::fabs<0>(regs,&regs.FR1,regs.FR1);
		/* 8207BB74h case   13:*/		return 0x8207BB78;
		  /* 8207BB78h */ case   14:  		/* lfs FR2, <#[R11 + 8532]> */
		/* 8207BB78h case   14:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00002154) );
		/* 8207BB78h case   14:*/		return 0x8207BB7C;
		  /* 8207BB7Ch */ case   15:  		/* bl -2628 */
		/* 8207BB7Ch case   15:*/		regs.LR = 0x8207BB80; return 0x8207B138;
		/* 8207BB7Ch case   15:*/		return 0x8207BB80;
		  /* 8207BB80h */ case   16:  		/* lis R11, -32256 */
		/* 8207BB80h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BB80h case   16:*/		return 0x8207BB84;
		  /* 8207BB84h */ case   17:  		/* fmr FR30, FR1 */
		/* 8207BB84h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 8207BB84h case   17:*/		return 0x8207BB88;
		  /* 8207BB88h */ case   18:  		/* fmr FR1, FR31 */
		/* 8207BB88h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BB88h case   18:*/		return 0x8207BB8C;
		  /* 8207BB8Ch */ case   19:  		/* lfs FR2, <#[R11 + 2752]> */
		/* 8207BB8Ch case   19:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207BB8Ch case   19:*/		return 0x8207BB90;
		  /* 8207BB90h */ case   20:  		/* bl -2648 */
		/* 8207BB90h case   20:*/		regs.LR = 0x8207BB94; return 0x8207B138;
		/* 8207BB90h case   20:*/		return 0x8207BB94;
		  /* 8207BB94h */ case   21:  		/* lis R11, -32256 */
		/* 8207BB94h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BB94h case   21:*/		return 0x8207BB98;
		  /* 8207BB98h */ case   22:  		/* lis R10, -32256 */
		/* 8207BB98h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207BB98h case   22:*/		return 0x8207BB9C;
		  /* 8207BB9Ch */ case   23:  		/* lis R9, -32256 */
		/* 8207BB9Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207BB9Ch case   23:*/		return 0x8207BBA0;
		  /* 8207BBA0h */ case   24:  		/* lfs FR0, <#[R11 + 8728]> */
		/* 8207BBA0h case   24:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002218) );
		/* 8207BBA0h case   24:*/		return 0x8207BBA4;
		  /* 8207BBA4h */ case   25:  		/* fmuls FR12, FR1, FR0 */
		/* 8207BBA4h case   25:*/		cpu::op::fmuls<0>(regs,&regs.FR12,regs.FR1,regs.FR0);
		/* 8207BBA4h case   25:*/		return 0x8207BBA8;
		  /* 8207BBA8h */ case   26:  		/* lfs FR0, <#[R10 + 8536]> */
		/* 8207BBA8h case   26:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00002158) );
		/* 8207BBA8h case   26:*/		return 0x8207BBAC;
		  /* 8207BBACh */ case   27:  		/* lfs FR13, <#[R9 + 8724]> */
		/* 8207BBACh case   27:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x00002214) );
		/* 8207BBACh case   27:*/		return 0x8207BBB0;
		  /* 8207BBB0h */ case   28:  		/* fmsubs FR0, FR30, FR0, FR12 */
		/* 8207BBB0h case   28:*/		cpu::op::fmsubs<0>(regs,&regs.FR0,regs.FR30,regs.FR0,regs.FR12);
		/* 8207BBB0h case   28:*/		return 0x8207BBB4;
		  /* 8207BBB4h */ case   29:  		/* fadds FR1, FR0, FR13 */
		/* 8207BBB4h case   29:*/		cpu::op::fadds<0>(regs,&regs.FR1,regs.FR0,regs.FR13);
		/* 8207BBB4h case   29:*/		return 0x8207BBB8;
		  /* 8207BBB8h */ case   30:  		/* b 112 */
		/* 8207BBB8h case   30:*/		return 0x8207BC28;
		/* 8207BBB8h case   30:*/		return 0x8207BBBC;
	}
	return 0x8207BBBC;
} // Block from 8207BB40h-8207BBBCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207BBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BBBC);
		  /* 8207BBBCh */ case    0:  		/* fabs FR0, FR31 */
		/* 8207BBBCh case    0:*/		cpu::op::fabs<0>(regs,&regs.FR0,regs.FR31);
		/* 8207BBBCh case    0:*/		return 0x8207BBC0;
		  /* 8207BBC0h */ case    1:  		/* lis R11, -32256 */
		/* 8207BBC0h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BBC0h case    1:*/		return 0x8207BBC4;
		  /* 8207BBC4h */ case    2:  		/* lfs FR2, <#[R11 + 2752]> */
		/* 8207BBC4h case    2:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207BBC4h case    2:*/		return 0x8207BBC8;
		  /* 8207BBC8h */ case    3:  		/* fcmpu CR6, FR0, FR2 */
		/* 8207BBC8h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR2);
		/* 8207BBC8h case    3:*/		return 0x8207BBCC;
		  /* 8207BBCCh */ case    4:  		/* bc 4, CR6_LT, 84 */
		/* 8207BBCCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x8207BC20;  }
		/* 8207BBCCh case    4:*/		return 0x8207BBD0;
		  /* 8207BBD0h */ case    5:  		/* fmr FR1, FR31 */
		/* 8207BBD0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BBD0h case    5:*/		return 0x8207BBD4;
		  /* 8207BBD4h */ case    6:  		/* bl -2716 */
		/* 8207BBD4h case    6:*/		regs.LR = 0x8207BBD8; return 0x8207B138;
		/* 8207BBD4h case    6:*/		return 0x8207BBD8;
		  /* 8207BBD8h */ case    7:  		/* lis R11, -32256 */
		/* 8207BBD8h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BBD8h case    7:*/		return 0x8207BBDC;
		  /* 8207BBDCh */ case    8:  		/* fmr FR29, FR1 */
		/* 8207BBDCh case    8:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR1);
		/* 8207BBDCh case    8:*/		return 0x8207BBE0;
		  /* 8207BBE0h */ case    9:  		/* fabs FR1, FR31 */
		/* 8207BBE0h case    9:*/		cpu::op::fabs<0>(regs,&regs.FR1,regs.FR31);
		/* 8207BBE0h case    9:*/		return 0x8207BBE4;
		  /* 8207BBE4h */ case   10:  		/* lfs FR30, <#[R11 + 8532]> */
		/* 8207BBE4h case   10:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00002154) );
		/* 8207BBE4h case   10:*/		return 0x8207BBE8;
		  /* 8207BBE8h */ case   11:  		/* fmr FR2, FR30 */
		/* 8207BBE8h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 8207BBE8h case   11:*/		return 0x8207BBEC;
		  /* 8207BBECh */ case   12:  		/* bl -2740 */
		/* 8207BBECh case   12:*/		regs.LR = 0x8207BBF0; return 0x8207B138;
		/* 8207BBECh case   12:*/		return 0x8207BBF0;
		  /* 8207BBF0h */ case   13:  		/* fmuls FR11, FR1, FR30 */
		/* 8207BBF0h case   13:*/		cpu::op::fmuls<0>(regs,&regs.FR11,regs.FR1,regs.FR30);
		/* 8207BBF0h case   13:*/		return 0x8207BBF4;
		  /* 8207BBF4h */ case   14:  		/* lis R11, -32256 */
		/* 8207BBF4h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BBF4h case   14:*/		return 0x8207BBF8;
		  /* 8207BBF8h */ case   15:  		/* fabs FR10, FR31 */
		/* 8207BBF8h case   15:*/		cpu::op::fabs<0>(regs,&regs.FR10,regs.FR31);
		/* 8207BBF8h case   15:*/		return 0x8207BBFC;
		  /* 8207BBFCh */ case   16:  		/* lis R10, -32256 */
		/* 8207BBFCh case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207BBFCh case   16:*/		return 0x8207BC00;
		  /* 8207BC00h */ case   17:  		/* lis R9, -32256 */
		/* 8207BC00h case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207BC00h case   17:*/		return 0x8207BC04;
		  /* 8207BC04h */ case   18:  		/* lfs FR0, <#[R11 + 8728]> */
		/* 8207BC04h case   18:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002218) );
		/* 8207BC04h case   18:*/		return 0x8207BC08;
		  /* 8207BC08h */ case   19:  		/* lfs FR13, <#[R10 + 8720]> */
		/* 8207BC08h case   19:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00002210) );
		/* 8207BC08h case   19:*/		return 0x8207BC0C;
		  /* 8207BC0Ch */ case   20:  		/* lfs FR12, <#[R9 + 8716]> */
		/* 8207BC0Ch case   20:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x0000220C) );
		/* 8207BC0Ch case   20:*/		return 0x8207BC10;
		  /* 8207BC10h */ case   21:  		/* fmsubs FR0, FR29, FR0, FR11 */
		/* 8207BC10h case   21:*/		cpu::op::fmsubs<0>(regs,&regs.FR0,regs.FR29,regs.FR0,regs.FR11);
		/* 8207BC10h case   21:*/		return 0x8207BC14;
		  /* 8207BC14h */ case   22:  		/* fnmsubs FR0, FR10, FR13, FR0 */
		/* 8207BC14h case   22:*/		cpu::op::fnmsubs<0>(regs,&regs.FR0,regs.FR10,regs.FR13,regs.FR0);
		/* 8207BC14h case   22:*/		return 0x8207BC18;
		  /* 8207BC18h */ case   23:  		/* fadds FR1, FR0, FR12 */
		/* 8207BC18h case   23:*/		cpu::op::fadds<0>(regs,&regs.FR1,regs.FR0,regs.FR12);
		/* 8207BC18h case   23:*/		return 0x8207BC1C;
		  /* 8207BC1Ch */ case   24:  		/* b 12 */
		/* 8207BC1Ch case   24:*/		return 0x8207BC28;
		/* 8207BC1Ch case   24:*/		return 0x8207BC20;
	}
	return 0x8207BC20;
} // Block from 8207BBBCh-8207BC20h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC20);
		  /* 8207BC20h */ case    0:  		/* lis R11, -32256 */
		/* 8207BC20h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BC20h case    0:*/		return 0x8207BC24;
		  /* 8207BC24h */ case    1:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 8207BC24h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 8207BC24h case    1:*/		return 0x8207BC28;
	}
	return 0x8207BC28;
} // Block from 8207BC20h-8207BC28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC28);
		  /* 8207BC28h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207BC28h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207BC28h case    0:*/		return 0x8207BC2C;
		  /* 8207BC2Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207BC2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207BC2Ch case    1:*/		return 0x8207BC30;
		  /* 8207BC30h */ case    2:  		/* mtspr LR, R12 */
		/* 8207BC30h case    2:*/		regs.LR = regs.R12;
		/* 8207BC30h case    2:*/		return 0x8207BC34;
		  /* 8207BC34h */ case    3:  		/* lfd FR29, <#[R1 - 32]> */
		/* 8207BC34h case    3:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 8207BC34h case    3:*/		return 0x8207BC38;
		  /* 8207BC38h */ case    4:  		/* lfd FR30, <#[R1 - 24]> */
		/* 8207BC38h case    4:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207BC38h case    4:*/		return 0x8207BC3C;
		  /* 8207BC3Ch */ case    5:  		/* lfd FR31, <#[R1 - 16]> */
		/* 8207BC3Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207BC3Ch case    5:*/		return 0x8207BC40;
		  /* 8207BC40h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207BC40h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207BC40h case    6:*/		return 0x8207BC44;
	}
	return 0x8207BC44;
} // Block from 8207BC28h-8207BC44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC44);
		  /* 8207BC44h */ case    0:  		/* nop */
		/* 8207BC44h case    0:*/		cpu::op::nop();
		/* 8207BC44h case    0:*/		return 0x8207BC48;
	}
	return 0x8207BC48;
} // Block from 8207BC44h-8207BC48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC48);
		  /* 8207BC48h */ case    0:  		/* mfspr R12, LR */
		/* 8207BC48h case    0:*/		regs.R12 = regs.LR;
		/* 8207BC48h case    0:*/		return 0x8207BC4C;
		  /* 8207BC4Ch */ case    1:  		/* bl 87552 */
		/* 8207BC4Ch case    1:*/		regs.LR = 0x8207BC50; return 0x8209124C;
		/* 8207BC4Ch case    1:*/		return 0x8207BC50;
		  /* 8207BC50h */ case    2:  		/* addi R12, R1, -64 */
		/* 8207BC50h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFC0);
		/* 8207BC50h case    2:*/		return 0x8207BC54;
		  /* 8207BC54h */ case    3:  		/* bl 87984 */
		/* 8207BC54h case    3:*/		regs.LR = 0x8207BC58; return 0x82091404;
		/* 8207BC54h case    3:*/		return 0x8207BC58;
		  /* 8207BC58h */ case    4:  		/* stwu R1, <#[R1 - 240]> */
		/* 8207BC58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8207BC58h case    4:*/		return 0x8207BC5C;
		  /* 8207BC5Ch */ case    5:  		/* lis R11, -32256 */
		/* 8207BC5Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BC5Ch case    5:*/		return 0x8207BC60;
		  /* 8207BC60h */ case    6:  		/* fmr FR27, FR1 */
		/* 8207BC60h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR27,regs.FR1);
		/* 8207BC60h case    6:*/		return 0x8207BC64;
		  /* 8207BC64h */ case    7:  		/* lis R10, -32256 */
		/* 8207BC64h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207BC64h case    7:*/		return 0x8207BC68;
		  /* 8207BC68h */ case    8:  		/* fmr FR29, FR2 */
		/* 8207BC68h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR2);
		/* 8207BC68h case    8:*/		return 0x8207BC6C;
		  /* 8207BC6Ch */ case    9:  		/* mr R27, R4 */
		/* 8207BC6Ch case    9:*/		regs.R27 = regs.R4;
		/* 8207BC6Ch case    9:*/		return 0x8207BC70;
		  /* 8207BC70h */ case   10:  		/* mr R26, R5 */
		/* 8207BC70h case   10:*/		regs.R26 = regs.R5;
		/* 8207BC70h case   10:*/		return 0x8207BC74;
		  /* 8207BC74h */ case   11:  		/* mr R25, R6 */
		/* 8207BC74h case   11:*/		regs.R25 = regs.R6;
		/* 8207BC74h case   11:*/		return 0x8207BC78;
		  /* 8207BC78h */ case   12:  		/* lfs FR25, <#[R11 + 1816]> */
		/* 8207BC78h case   12:*/		cpu::mem::load32f( regs, &regs.FR25, (uint32)(regs.R11 + 0x00000718) );
		/* 8207BC78h case   12:*/		return 0x8207BC7C;
		  /* 8207BC7Ch */ case   13:  		/* mr R28, R9 */
		/* 8207BC7Ch case   13:*/		regs.R28 = regs.R9;
		/* 8207BC7Ch case   13:*/		return 0x8207BC80;
		  /* 8207BC80h */ case   14:  		/* lfs FR0, <#[R10 + 1820]> */
		/* 8207BC80h case   14:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x0000071C) );
		/* 8207BC80h case   14:*/		return 0x8207BC84;
		  /* 8207BC84h */ case   15:  		/* mullw R31, R4, R5 */
		/* 8207BC84h case   15:*/		cpu::op::mullw<0>(regs,&regs.R31,regs.R4,regs.R5);
		/* 8207BC84h case   15:*/		return 0x8207BC88;
		  /* 8207BC88h */ case   16:  		/* cmpwi CR6, R6, 0 */
		/* 8207BC88h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 8207BC88h case   16:*/		return 0x8207BC8C;
		  /* 8207BC8Ch */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 8207BC8Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8207BC98;  }
		/* 8207BC8Ch case   17:*/		return 0x8207BC90;
		  /* 8207BC90h */ case   18:  		/* fmr FR30, FR25 */
		/* 8207BC90h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR25);
		/* 8207BC90h case   18:*/		return 0x8207BC94;
		  /* 8207BC94h */ case   19:  		/* b 8 */
		/* 8207BC94h case   19:*/		return 0x8207BC9C;
		/* 8207BC94h case   19:*/		return 0x8207BC98;
	}
	return 0x8207BC98;
} // Block from 8207BC48h-8207BC98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC98);
		  /* 8207BC98h */ case    0:  		/* fmr FR30, FR0 */
		/* 8207BC98h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR0);
		/* 8207BC98h case    0:*/		return 0x8207BC9C;
	}
	return 0x8207BC9C;
} // Block from 8207BC98h-8207BC9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207BC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BC9C);
		  /* 8207BC9Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207BC9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BC9Ch case    0:*/		return 0x8207BCA0;
		  /* 8207BCA0h */ case    1:  		/* cmpwi CR6, R3, 1 */
		/* 8207BCA0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8207BCA0h case    1:*/		return 0x8207BCA4;
		  /* 8207BCA4h */ case    2:  		/* lfs FR26, <#[R11 + 1792]> */
		/* 8207BCA4h case    2:*/		cpu::mem::load32f( regs, &regs.FR26, (uint32)(regs.R11 + 0x00000700) );
		/* 8207BCA4h case    2:*/		return 0x8207BCA8;
		  /* 8207BCA8h */ case    3:  		/* bc 12, CR6_EQ, 768 */
		/* 8207BCA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207BFA8;  }
		/* 8207BCA8h case    3:*/		return 0x8207BCAC;
		  /* 8207BCACh */ case    4:  		/* cmpwi CR6, R3, 2 */
		/* 8207BCACh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207BCACh case    4:*/		return 0x8207BCB0;
		  /* 8207BCB0h */ case    5:  		/* bc 12, CR6_EQ, 636 */
		/* 8207BCB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207BF2C;  }
		/* 8207BCB0h case    5:*/		return 0x8207BCB4;
		  /* 8207BCB4h */ case    6:  		/* cmpwi CR6, R3, 3 */
		/* 8207BCB4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8207BCB4h case    6:*/		return 0x8207BCB8;
		  /* 8207BCB8h */ case    7:  		/* bc 12, CR6_EQ, 504 */
		/* 8207BCB8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8207BEB0;  }
		/* 8207BCB8h case    7:*/		return 0x8207BCBC;
		  /* 8207BCBCh */ case    8:  		/* cmpwi CR6, R3, 4 */
		/* 8207BCBCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8207BCBCh case    8:*/		return 0x8207BCC0;
		  /* 8207BCC0h */ case    9:  		/* bc 12, CR6_EQ, 400 */
		/* 8207BCC0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207BE50;  }
		/* 8207BCC0h case    9:*/		return 0x8207BCC4;
		  /* 8207BCC4h */ case   10:  		/* cmpwi CR6, R3, 5 */
		/* 8207BCC4h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 8207BCC4h case   10:*/		return 0x8207BCC8;
		  /* 8207BCC8h */ case   11:  		/* bc 12, CR6_EQ, 272 */
		/* 8207BCC8h case   11:*/		if ( regs.CR[6].eq ) { return 0x8207BDD8;  }
		/* 8207BCC8h case   11:*/		return 0x8207BCCC;
		  /* 8207BCCCh */ case   12:  		/* cmpwi CR6, R3, 6 */
		/* 8207BCCCh case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000006);
		/* 8207BCCCh case   12:*/		return 0x8207BCD0;
		  /* 8207BCD0h */ case   13:  		/* bc 12, CR6_EQ, 104 */
		/* 8207BCD0h case   13:*/		if ( regs.CR[6].eq ) { return 0x8207BD38;  }
		/* 8207BCD0h case   13:*/		return 0x8207BCD4;
		  /* 8207BCD4h */ case   14:  		/* cmpwi CR6, R3, 7 */
		/* 8207BCD4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 8207BCD4h case   14:*/		return 0x8207BCD8;
		  /* 8207BCD8h */ case   15:  		/* bc 4, CR6_EQ, 96 */
		/* 8207BCD8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8207BD38;  }
		/* 8207BCD8h case   15:*/		return 0x8207BCDC;
		  /* 8207BCDCh */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 8207BCDCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BCDCh case   16:*/		return 0x8207BCE0;
		  /* 8207BCE0h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 8207BCE0h case   17:*/		if ( regs.CR[6].eq ) { return 0x8207BD00;  }
		/* 8207BCE0h case   17:*/		return 0x8207BCE4;
		  /* 8207BCE4h */ case   18:  		/* addi R11, R28, -4 */
		/* 8207BCE4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFC);
		/* 8207BCE4h case   18:*/		return 0x8207BCE8;
		  /* 8207BCE8h */ case   19:  		/* li R10, 0 */
		/* 8207BCE8h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207BCE8h case   19:*/		return 0x8207BCEC;
		  /* 8207BCECh */ case   20:  		/* cmplwi CR0, R31, 0 */
		/* 8207BCECh case   20:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8207BCECh case   20:*/		return 0x8207BCF0;
		  /* 8207BCF0h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 8207BCF0h case   21:*/		if ( regs.CR[0].eq ) { return 0x8207BD00;  }
		/* 8207BCF0h case   21:*/		return 0x8207BCF4;
		  /* 8207BCF4h */ case   22:  		/* mtspr CTR, R31 */
		/* 8207BCF4h case   22:*/		regs.CTR = regs.R31;
		/* 8207BCF4h case   22:*/		return 0x8207BCF8;
		  /* 8207BCF8h */ case   23:  		/* stwu R10, <#[R11 + 4]> */
		/* 8207BCF8h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207BCF8h case   23:*/		return 0x8207BCFC;
		  /* 8207BCFCh */ case   24:  		/* bc 16, CR0_LT, -4 */
		/* 8207BCFCh case   24:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207BCF8;  }
		/* 8207BCFCh case   24:*/		return 0x8207BD00;
	}
	return 0x8207BD00;
} // Block from 8207BC9Ch-8207BD00h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207BD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BD00);
		  /* 8207BD00h */ case    0:  		/* subf R11, R27, R31 */
		/* 8207BD00h case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R31);
		/* 8207BD00h case    0:*/		return 0x8207BD04;
		  /* 8207BD04h */ case    1:  		/* add R10, R31, R27 */
		/* 8207BD04h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R31,regs.R27);
		/* 8207BD04h case    1:*/		return 0x8207BD08;
		  /* 8207BD08h */ case    2:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 8207BD08h case    2:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 8207BD08h case    2:*/		return 0x8207BD0C;
		  /* 8207BD0Ch */ case    3:  		/* rlwinm R9, R10, 31, 1, 31 */
		/* 8207BD0Ch case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R9,regs.R10);
		/* 8207BD0Ch case    3:*/		return 0x8207BD10;
		  /* 8207BD10h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 8207BD10h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8207BD10h case    4:*/		return 0x8207BD14;
		  /* 8207BD14h */ case    5:  		/* bc 4, CR6_LT, 752 */
		/* 8207BD14h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8207C004;  }
		/* 8207BD14h case    5:*/		return 0x8207BD18;
		  /* 8207BD18h */ case    6:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8207BD18h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8207BD18h case    6:*/		return 0x8207BD1C;
		  /* 8207BD1Ch */ case    7:  		/* add R10, R10, R28 */
		/* 8207BD1Ch case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 8207BD1Ch case    7:*/		return 0x8207BD20;
		  /* 8207BD20h */ case    8:  		/* addi R10, R10, -4 */
		/* 8207BD20h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8207BD20h case    8:*/		return 0x8207BD24;
		  /* 8207BD24h */ case    9:  		/* addi R11, R11, 1 */
		/* 8207BD24h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207BD24h case    9:*/		return 0x8207BD28;
		  /* 8207BD28h */ case   10:  		/* stfsu FR26, <#[R10 + 4]> */
		/* 8207BD28h case   10:*/		cpu::mem::store32f( regs, regs.FR26, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8207BD28h case   10:*/		return 0x8207BD2C;
		  /* 8207BD2Ch */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 8207BD2Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8207BD2Ch case   11:*/		return 0x8207BD30;
		  /* 8207BD30h */ case   12:  		/* bc 12, CR6_LT, -12 */
		/* 8207BD30h case   12:*/		if ( regs.CR[6].lt ) { return 0x8207BD24;  }
		/* 8207BD30h case   12:*/		return 0x8207BD34;
		  /* 8207BD34h */ case   13:  		/* b 720 */
		/* 8207BD34h case   13:*/		return 0x8207C004;
		/* 8207BD34h case   13:*/		return 0x8207BD38;
	}
	return 0x8207BD38;
} // Block from 8207BD00h-8207BD38h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207BD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BD38);
		  /* 8207BD38h */ case    0:  		/* li R11, 0 */
		/* 8207BD38h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207BD38h case    0:*/		return 0x8207BD3C;
		  /* 8207BD3Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8207BD3Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BD3Ch case    1:*/		return 0x8207BD40;
		  /* 8207BD40h */ case    2:  		/* bc 12, CR6_EQ, 708 */
		/* 8207BD40h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BD40h case    2:*/		return 0x8207BD44;
		  /* 8207BD44h */ case    3:  		/* rlwinm R10, R31, 31, 1, 31 */
		/* 8207BD44h case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R31);
		/* 8207BD44h case    3:*/		return 0x8207BD48;
		  /* 8207BD48h */ case    4:  		/* mtspr CTR, R31 */
		/* 8207BD48h case    4:*/		regs.CTR = regs.R31;
		/* 8207BD48h case    4:*/		return 0x8207BD4C;
		  /* 8207BD4Ch */ case    5:  		/* mr R8, R28 */
		/* 8207BD4Ch case    5:*/		regs.R8 = regs.R28;
		/* 8207BD4Ch case    5:*/		return 0x8207BD50;
		  /* 8207BD50h */ case    6:  		/* subf R9, R27, R10 */
		/* 8207BD50h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R10);
		/* 8207BD50h case    6:*/		return 0x8207BD54;
		  /* 8207BD54h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 8207BD54h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8207BD54h case    7:*/		return 0x8207BD58;
		  /* 8207BD58h */ case    8:  		/* bc 12, CR6_LT, 48 */
		/* 8207BD58h case    8:*/		if ( regs.CR[6].lt ) { return 0x8207BD88;  }
		/* 8207BD58h case    8:*/		return 0x8207BD5C;
		  /* 8207BD5Ch */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 8207BD5Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207BD5Ch case    9:*/		return 0x8207BD60;
		  /* 8207BD60h */ case   10:  		/* bc 4, CR6_LT, 40 */
		/* 8207BD60h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8207BD88;  }
		/* 8207BD60h case   10:*/		return 0x8207BD64;
		  /* 8207BD64h */ case   11:  		/* subf R9, R10, R11 */
		/* 8207BD64h case   11:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 8207BD64h case   11:*/		return 0x8207BD68;
		  /* 8207BD68h */ case   12:  		/* add R9, R9, R27 */
		/* 8207BD68h case   12:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 8207BD68h case   12:*/		return 0x8207BD6C;
		  /* 8207BD6Ch */ case   13:  		/* rldicl R9, R9, 0, 32 */
		/* 8207BD6Ch case   13:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 8207BD6Ch case   13:*/		return 0x8207BD70;
		  /* 8207BD70h */ case   14:  		/* std R9, <#[R1 + 80]> */
		/* 8207BD70h case   14:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207BD70h case   14:*/		return 0x8207BD74;
		  /* 8207BD74h */ case   15:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207BD74h case   15:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207BD74h case   15:*/		return 0x8207BD78;
		  /* 8207BD78h */ case   16:  		/* fcfid FR0, FR0 */
		/* 8207BD78h case   16:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BD78h case   16:*/		return 0x8207BD7C;
		  /* 8207BD7Ch */ case   17:  		/* frsp FR0, FR0 */
		/* 8207BD7Ch case   17:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BD7Ch case   17:*/		return 0x8207BD80;
		  /* 8207BD80h */ case   18:  		/* fadds FR0, FR0, FR30 */
		/* 8207BD80h case   18:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BD80h case   18:*/		return 0x8207BD84;
		  /* 8207BD84h */ case   19:  		/* b 56 */
		/* 8207BD84h case   19:*/		return 0x8207BDBC;
		/* 8207BD84h case   19:*/		return 0x8207BD88;
	}
	return 0x8207BD88;
} // Block from 8207BD38h-8207BD88h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207BD88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BD88);
		  /* 8207BD88h */ case    0:  		/* add R9, R10, R27 */
		/* 8207BD88h case    0:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R27);
		/* 8207BD88h case    0:*/		return 0x8207BD8C;
		  /* 8207BD8Ch */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 8207BD8Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8207BD8Ch case    1:*/		return 0x8207BD90;
		  /* 8207BD90h */ case    2:  		/* bc 4, CR6_LT, 52 */
		/* 8207BD90h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8207BDC4;  }
		/* 8207BD90h case    2:*/		return 0x8207BD94;
		  /* 8207BD94h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8207BD94h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207BD94h case    3:*/		return 0x8207BD98;
		  /* 8207BD98h */ case    4:  		/* bc 12, CR6_LT, 44 */
		/* 8207BD98h case    4:*/		if ( regs.CR[6].lt ) { return 0x8207BDC4;  }
		/* 8207BD98h case    4:*/		return 0x8207BD9C;
		  /* 8207BD9Ch */ case    5:  		/* subf R9, R11, R10 */
		/* 8207BD9Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 8207BD9Ch case    5:*/		return 0x8207BDA0;
		  /* 8207BDA0h */ case    6:  		/* add R9, R9, R27 */
		/* 8207BDA0h case    6:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R27);
		/* 8207BDA0h case    6:*/		return 0x8207BDA4;
		  /* 8207BDA4h */ case    7:  		/* rldicl R9, R9, 0, 32 */
		/* 8207BDA4h case    7:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 8207BDA4h case    7:*/		return 0x8207BDA8;
		  /* 8207BDA8h */ case    8:  		/* std R9, <#[R1 + 88]> */
		/* 8207BDA8h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BDA8h case    8:*/		return 0x8207BDAC;
		  /* 8207BDACh */ case    9:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BDACh case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BDACh case    9:*/		return 0x8207BDB0;
		  /* 8207BDB0h */ case   10:  		/* fcfid FR0, FR0 */
		/* 8207BDB0h case   10:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BDB0h case   10:*/		return 0x8207BDB4;
		  /* 8207BDB4h */ case   11:  		/* frsp FR0, FR0 */
		/* 8207BDB4h case   11:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BDB4h case   11:*/		return 0x8207BDB8;
		  /* 8207BDB8h */ case   12:  		/* fsubs FR0, FR0, FR30 */
		/* 8207BDB8h case   12:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BDB8h case   12:*/		return 0x8207BDBC;
	}
	return 0x8207BDBC;
} // Block from 8207BD88h-8207BDBCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207BDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BDBC);
		  /* 8207BDBCh */ case    0:  		/* stfs FR0, <#[R8]> */
		/* 8207BDBCh case    0:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R8 + 0x00000000) );
		/* 8207BDBCh case    0:*/		return 0x8207BDC0;
		  /* 8207BDC0h */ case    1:  		/* b 8 */
		/* 8207BDC0h case    1:*/		return 0x8207BDC8;
		/* 8207BDC0h case    1:*/		return 0x8207BDC4;
	}
	return 0x8207BDC4;
} // Block from 8207BDBCh-8207BDC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207BDC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BDC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BDC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BDC4);
		  /* 8207BDC4h */ case    0:  		/* stfs FR25, <#[R8]> */
		/* 8207BDC4h case    0:*/		cpu::mem::store32f( regs, regs.FR25, (uint32)(regs.R8 + 0x00000000) );
		/* 8207BDC4h case    0:*/		return 0x8207BDC8;
	}
	return 0x8207BDC8;
} // Block from 8207BDC4h-8207BDC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207BDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BDC8);
		  /* 8207BDC8h */ case    0:  		/* addi R11, R11, 1 */
		/* 8207BDC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207BDC8h case    0:*/		return 0x8207BDCC;
		  /* 8207BDCCh */ case    1:  		/* addi R8, R8, 4 */
		/* 8207BDCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8207BDCCh case    1:*/		return 0x8207BDD0;
		  /* 8207BDD0h */ case    2:  		/* bc 16, CR0_LT, -128 */
		/* 8207BDD0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207BD50;  }
		/* 8207BDD0h case    2:*/		return 0x8207BDD4;
		  /* 8207BDD4h */ case    3:  		/* b 560 */
		/* 8207BDD4h case    3:*/		return 0x8207C004;
		/* 8207BDD4h case    3:*/		return 0x8207BDD8;
	}
	return 0x8207BDD8;
} // Block from 8207BDC8h-8207BDD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207BDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BDD8);
		  /* 8207BDD8h */ case    0:  		/* li R30, 0 */
		/* 8207BDD8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207BDD8h case    0:*/		return 0x8207BDDC;
		  /* 8207BDDCh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8207BDDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BDDCh case    1:*/		return 0x8207BDE0;
		  /* 8207BDE0h */ case    2:  		/* bc 12, CR6_EQ, 548 */
		/* 8207BDE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BDE0h case    2:*/		return 0x8207BDE4;
		  /* 8207BDE4h */ case    3:  		/* rldicl R11, R31, 0, 32 */
		/* 8207BDE4h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R31);
		/* 8207BDE4h case    3:*/		return 0x8207BDE8;
		  /* 8207BDE8h */ case    4:  		/* fdivs FR31, FR26, FR29 */
		/* 8207BDE8h case    4:*/		cpu::op::fdivs<0>(regs,&regs.FR31,regs.FR26,regs.FR29);
		/* 8207BDE8h case    4:*/		return 0x8207BDEC;
		  /* 8207BDECh */ case    5:  		/* addi R29, R28, -4 */
		/* 8207BDECh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0xFFFFFFFC);
		/* 8207BDECh case    5:*/		return 0x8207BDF0;
		  /* 8207BDF0h */ case    6:  		/* std R11, <#[R1 + 88]> */
		/* 8207BDF0h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BDF0h case    6:*/		return 0x8207BDF4;
		  /* 8207BDF4h */ case    7:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207BDF4h case    7:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BDF4h case    7:*/		return 0x8207BDF8;
		  /* 8207BDF8h */ case    8:  		/* fcfid FR13, FR13 */
		/* 8207BDF8h case    8:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BDF8h case    8:*/		return 0x8207BDFC;
		  /* 8207BDFCh */ case    9:  		/* frsp FR13, FR13 */
		/* 8207BDFCh case    9:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BDFCh case    9:*/		return 0x8207BE00;
		  /* 8207BE00h */ case   10:  		/* fmuls FR29, FR13, FR0 */
		/* 8207BE00h case   10:*/		cpu::op::fmuls<0>(regs,&regs.FR29,regs.FR13,regs.FR0);
		/* 8207BE00h case   10:*/		return 0x8207BE04;
		  /* 8207BE04h */ case   11:  		/* rldicl R11, R30, 0, 32 */
		/* 8207BE04h case   11:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 8207BE04h case   11:*/		return 0x8207BE08;
		  /* 8207BE08h */ case   12:  		/* std R11, <#[R1 + 88]> */
		/* 8207BE08h case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE08h case   12:*/		return 0x8207BE0C;
		  /* 8207BE0Ch */ case   13:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BE0Ch case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE0Ch case   13:*/		return 0x8207BE10;
		  /* 8207BE10h */ case   14:  		/* fcfid FR0, FR0 */
		/* 8207BE10h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BE10h case   14:*/		return 0x8207BE14;
		  /* 8207BE14h */ case   15:  		/* frsp FR0, FR0 */
		/* 8207BE14h case   15:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BE14h case   15:*/		return 0x8207BE18;
		  /* 8207BE18h */ case   16:  		/* fsubs FR0, FR0, FR29 */
		/* 8207BE18h case   16:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR0,regs.FR29);
		/* 8207BE18h case   16:*/		return 0x8207BE1C;
		  /* 8207BE1Ch */ case   17:  		/* fadds FR0, FR0, FR30 */
		/* 8207BE1Ch case   17:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BE1Ch case   17:*/		return 0x8207BE20;
		  /* 8207BE20h */ case   18:  		/* fmuls FR28, FR0, FR27 */
		/* 8207BE20h case   18:*/		cpu::op::fmuls<0>(regs,&regs.FR28,regs.FR0,regs.FR27);
		/* 8207BE20h case   18:*/		return 0x8207BE24;
		  /* 8207BE24h */ case   19:  		/* fmuls FR1, FR31, FR28 */
		/* 8207BE24h case   19:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR31,regs.FR28);
		/* 8207BE24h case   19:*/		return 0x8207BE28;
		  /* 8207BE28h */ case   20:  		/* bl -1096 */
		/* 8207BE28h case   20:*/		regs.LR = 0x8207BE2C; return 0x8207B9E0;
		/* 8207BE28h case   20:*/		return 0x8207BE2C;
		  /* 8207BE2Ch */ case   21:  		/* fmr FR24, FR1 */
		/* 8207BE2Ch case   21:*/		cpu::op::fmr<0>(regs,&regs.FR24,regs.FR1);
		/* 8207BE2Ch case   21:*/		return 0x8207BE30;
		  /* 8207BE30h */ case   22:  		/* fmr FR1, FR28 */
		/* 8207BE30h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 8207BE30h case   22:*/		return 0x8207BE34;
		  /* 8207BE34h */ case   23:  		/* bl -1108 */
		/* 8207BE34h case   23:*/		regs.LR = 0x8207BE38; return 0x8207B9E0;
		/* 8207BE34h case   23:*/		return 0x8207BE38;
		  /* 8207BE38h */ case   24:  		/* addi R30, R30, 1 */
		/* 8207BE38h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207BE38h case   24:*/		return 0x8207BE3C;
		  /* 8207BE3Ch */ case   25:  		/* fmuls FR0, FR24, FR1 */
		/* 8207BE3Ch case   25:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR24,regs.FR1);
		/* 8207BE3Ch case   25:*/		return 0x8207BE40;
		  /* 8207BE40h */ case   26:  		/* stfsu FR0, <#[R29 + 4]> */
		/* 8207BE40h case   26:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8207BE40h case   26:*/		return 0x8207BE44;
		  /* 8207BE44h */ case   27:  		/* cmplw CR6, R30, R31 */
		/* 8207BE44h case   27:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8207BE44h case   27:*/		return 0x8207BE48;
		  /* 8207BE48h */ case   28:  		/* bc 12, CR6_LT, -68 */
		/* 8207BE48h case   28:*/		if ( regs.CR[6].lt ) { return 0x8207BE04;  }
		/* 8207BE48h case   28:*/		return 0x8207BE4C;
		  /* 8207BE4Ch */ case   29:  		/* b 440 */
		/* 8207BE4Ch case   29:*/		return 0x8207C004;
		/* 8207BE4Ch case   29:*/		return 0x8207BE50;
	}
	return 0x8207BE50;
} // Block from 8207BDD8h-8207BE50h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8207BE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BE50);
		  /* 8207BE50h */ case    0:  		/* li R30, 0 */
		/* 8207BE50h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207BE50h case    0:*/		return 0x8207BE54;
		  /* 8207BE54h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8207BE54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BE54h case    1:*/		return 0x8207BE58;
		  /* 8207BE58h */ case    2:  		/* bc 12, CR6_EQ, 428 */
		/* 8207BE58h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BE58h case    2:*/		return 0x8207BE5C;
		  /* 8207BE5Ch */ case    3:  		/* rldicl R11, R31, 0, 32 */
		/* 8207BE5Ch case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R31);
		/* 8207BE5Ch case    3:*/		return 0x8207BE60;
		  /* 8207BE60h */ case    4:  		/* addi R29, R28, -4 */
		/* 8207BE60h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0xFFFFFFFC);
		/* 8207BE60h case    4:*/		return 0x8207BE64;
		  /* 8207BE64h */ case    5:  		/* std R11, <#[R1 + 88]> */
		/* 8207BE64h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE64h case    5:*/		return 0x8207BE68;
		  /* 8207BE68h */ case    6:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207BE68h case    6:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE68h case    6:*/		return 0x8207BE6C;
		  /* 8207BE6Ch */ case    7:  		/* fcfid FR13, FR13 */
		/* 8207BE6Ch case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BE6Ch case    7:*/		return 0x8207BE70;
		  /* 8207BE70h */ case    8:  		/* frsp FR13, FR13 */
		/* 8207BE70h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BE70h case    8:*/		return 0x8207BE74;
		  /* 8207BE74h */ case    9:  		/* fmuls FR31, FR13, FR0 */
		/* 8207BE74h case    9:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 8207BE74h case    9:*/		return 0x8207BE78;
		  /* 8207BE78h */ case   10:  		/* rldicl R11, R30, 0, 32 */
		/* 8207BE78h case   10:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 8207BE78h case   10:*/		return 0x8207BE7C;
		  /* 8207BE7Ch */ case   11:  		/* std R11, <#[R1 + 88]> */
		/* 8207BE7Ch case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE7Ch case   11:*/		return 0x8207BE80;
		  /* 8207BE80h */ case   12:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BE80h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BE80h case   12:*/		return 0x8207BE84;
		  /* 8207BE84h */ case   13:  		/* fcfid FR0, FR0 */
		/* 8207BE84h case   13:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BE84h case   13:*/		return 0x8207BE88;
		  /* 8207BE88h */ case   14:  		/* frsp FR0, FR0 */
		/* 8207BE88h case   14:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BE88h case   14:*/		return 0x8207BE8C;
		  /* 8207BE8Ch */ case   15:  		/* fsubs FR0, FR0, FR31 */
		/* 8207BE8Ch case   15:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 8207BE8Ch case   15:*/		return 0x8207BE90;
		  /* 8207BE90h */ case   16:  		/* fadds FR0, FR0, FR30 */
		/* 8207BE90h case   16:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BE90h case   16:*/		return 0x8207BE94;
		  /* 8207BE94h */ case   17:  		/* fmuls FR1, FR0, FR27 */
		/* 8207BE94h case   17:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR27);
		/* 8207BE94h case   17:*/		return 0x8207BE98;
		  /* 8207BE98h */ case   18:  		/* bl -1120 */
		/* 8207BE98h case   18:*/		regs.LR = 0x8207BE9C; return 0x8207BA38;
		/* 8207BE98h case   18:*/		return 0x8207BE9C;
		  /* 8207BE9Ch */ case   19:  		/* addi R30, R30, 1 */
		/* 8207BE9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207BE9Ch case   19:*/		return 0x8207BEA0;
		  /* 8207BEA0h */ case   20:  		/* stfsu FR1, <#[R29 + 4]> */
		/* 8207BEA0h case   20:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8207BEA0h case   20:*/		return 0x8207BEA4;
		  /* 8207BEA4h */ case   21:  		/* cmplw CR6, R30, R31 */
		/* 8207BEA4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8207BEA4h case   21:*/		return 0x8207BEA8;
		  /* 8207BEA8h */ case   22:  		/* bc 12, CR6_LT, -48 */
		/* 8207BEA8h case   22:*/		if ( regs.CR[6].lt ) { return 0x8207BE78;  }
		/* 8207BEA8h case   22:*/		return 0x8207BEAC;
		  /* 8207BEACh */ case   23:  		/* b 344 */
		/* 8207BEACh case   23:*/		return 0x8207C004;
		/* 8207BEACh case   23:*/		return 0x8207BEB0;
	}
	return 0x8207BEB0;
} // Block from 8207BE50h-8207BEB0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207BEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BEB0);
		  /* 8207BEB0h */ case    0:  		/* li R30, 0 */
		/* 8207BEB0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207BEB0h case    0:*/		return 0x8207BEB4;
		  /* 8207BEB4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8207BEB4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BEB4h case    1:*/		return 0x8207BEB8;
		  /* 8207BEB8h */ case    2:  		/* bc 12, CR6_EQ, 332 */
		/* 8207BEB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BEB8h case    2:*/		return 0x8207BEBC;
		  /* 8207BEBCh */ case    3:  		/* rldicl R11, R31, 0, 32 */
		/* 8207BEBCh case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R31);
		/* 8207BEBCh case    3:*/		return 0x8207BEC0;
		  /* 8207BEC0h */ case    4:  		/* fdivs FR31, FR26, FR29 */
		/* 8207BEC0h case    4:*/		cpu::op::fdivs<0>(regs,&regs.FR31,regs.FR26,regs.FR29);
		/* 8207BEC0h case    4:*/		return 0x8207BEC4;
		  /* 8207BEC4h */ case    5:  		/* addi R29, R28, -4 */
		/* 8207BEC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0xFFFFFFFC);
		/* 8207BEC4h case    5:*/		return 0x8207BEC8;
		  /* 8207BEC8h */ case    6:  		/* std R11, <#[R1 + 88]> */
		/* 8207BEC8h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BEC8h case    6:*/		return 0x8207BECC;
		  /* 8207BECCh */ case    7:  		/* lis R11, -32256 */
		/* 8207BECCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207BECCh case    7:*/		return 0x8207BED0;
		  /* 8207BED0h */ case    8:  		/* lfs FR28, <#[R11 + 2752]> */
		/* 8207BED0h case    8:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207BED0h case    8:*/		return 0x8207BED4;
		  /* 8207BED4h */ case    9:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207BED4h case    9:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BED4h case    9:*/		return 0x8207BED8;
		  /* 8207BED8h */ case   10:  		/* fcfid FR13, FR13 */
		/* 8207BED8h case   10:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BED8h case   10:*/		return 0x8207BEDC;
		  /* 8207BEDCh */ case   11:  		/* frsp FR13, FR13 */
		/* 8207BEDCh case   11:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BEDCh case   11:*/		return 0x8207BEE0;
		  /* 8207BEE0h */ case   12:  		/* fmuls FR29, FR13, FR0 */
		/* 8207BEE0h case   12:*/		cpu::op::fmuls<0>(regs,&regs.FR29,regs.FR13,regs.FR0);
		/* 8207BEE0h case   12:*/		return 0x8207BEE4;
		  /* 8207BEE4h */ case   13:  		/* rldicl R11, R30, 0, 32 */
		/* 8207BEE4h case   13:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 8207BEE4h case   13:*/		return 0x8207BEE8;
		  /* 8207BEE8h */ case   14:  		/* fmr FR1, FR28 */
		/* 8207BEE8h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 8207BEE8h case   14:*/		return 0x8207BEEC;
		  /* 8207BEECh */ case   15:  		/* std R11, <#[R1 + 88]> */
		/* 8207BEECh case   15:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BEECh case   15:*/		return 0x8207BEF0;
		  /* 8207BEF0h */ case   16:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BEF0h case   16:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BEF0h case   16:*/		return 0x8207BEF4;
		  /* 8207BEF4h */ case   17:  		/* fcfid FR0, FR0 */
		/* 8207BEF4h case   17:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BEF4h case   17:*/		return 0x8207BEF8;
		  /* 8207BEF8h */ case   18:  		/* frsp FR0, FR0 */
		/* 8207BEF8h case   18:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BEF8h case   18:*/		return 0x8207BEFC;
		  /* 8207BEFCh */ case   19:  		/* fsubs FR0, FR0, FR29 */
		/* 8207BEFCh case   19:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR0,regs.FR29);
		/* 8207BEFCh case   19:*/		return 0x8207BF00;
		  /* 8207BF00h */ case   20:  		/* fadds FR0, FR0, FR30 */
		/* 8207BF00h case   20:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BF00h case   20:*/		return 0x8207BF04;
		  /* 8207BF04h */ case   21:  		/* fmuls FR0, FR0, FR31 */
		/* 8207BF04h case   21:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 8207BF04h case   21:*/		return 0x8207BF08;
		  /* 8207BF08h */ case   22:  		/* fmuls FR0, FR0, FR27 */
		/* 8207BF08h case   22:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR27);
		/* 8207BF08h case   22:*/		return 0x8207BF0C;
		  /* 8207BF0Ch */ case   23:  		/* fmuls FR0, FR0, FR0 */
		/* 8207BF0Ch case   23:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR0);
		/* 8207BF0Ch case   23:*/		return 0x8207BF10;
		  /* 8207BF10h */ case   24:  		/* fneg FR2, FR0 */
		/* 8207BF10h case   24:*/		cpu::op::fneg<0>(regs,&regs.FR2,regs.FR0);
		/* 8207BF10h case   24:*/		return 0x8207BF14;
		  /* 8207BF14h */ case   25:  		/* bl -3548 */
		/* 8207BF14h case   25:*/		regs.LR = 0x8207BF18; return 0x8207B138;
		/* 8207BF14h case   25:*/		return 0x8207BF18;
		  /* 8207BF18h */ case   26:  		/* addi R30, R30, 1 */
		/* 8207BF18h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207BF18h case   26:*/		return 0x8207BF1C;
		  /* 8207BF1Ch */ case   27:  		/* stfsu FR1, <#[R29 + 4]> */
		/* 8207BF1Ch case   27:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8207BF1Ch case   27:*/		return 0x8207BF20;
		  /* 8207BF20h */ case   28:  		/* cmplw CR6, R30, R31 */
		/* 8207BF20h case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8207BF20h case   28:*/		return 0x8207BF24;
		  /* 8207BF24h */ case   29:  		/* bc 12, CR6_LT, -64 */
		/* 8207BF24h case   29:*/		if ( regs.CR[6].lt ) { return 0x8207BEE4;  }
		/* 8207BF24h case   29:*/		return 0x8207BF28;
		  /* 8207BF28h */ case   30:  		/* b 220 */
		/* 8207BF28h case   30:*/		return 0x8207C004;
		/* 8207BF28h case   30:*/		return 0x8207BF2C;
	}
	return 0x8207BF2C;
} // Block from 8207BEB0h-8207BF2Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207BF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BF2C);
		  /* 8207BF2Ch */ case    0:  		/* rldicl R11, R31, 0, 32 */
		/* 8207BF2Ch case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R31);
		/* 8207BF2Ch case    0:*/		return 0x8207BF30;
		  /* 8207BF30h */ case    1:  		/* li R30, 0 */
		/* 8207BF30h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207BF30h case    1:*/		return 0x8207BF34;
		  /* 8207BF34h */ case    2:  		/* std R11, <#[R1 + 88]> */
		/* 8207BF34h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BF34h case    2:*/		return 0x8207BF38;
		  /* 8207BF38h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8207BF38h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BF38h case    3:*/		return 0x8207BF3C;
		  /* 8207BF3Ch */ case    4:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207BF3Ch case    4:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BF3Ch case    4:*/		return 0x8207BF40;
		  /* 8207BF40h */ case    5:  		/* fcfid FR13, FR13 */
		/* 8207BF40h case    5:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BF40h case    5:*/		return 0x8207BF44;
		  /* 8207BF44h */ case    6:  		/* frsp FR13, FR13 */
		/* 8207BF44h case    6:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BF44h case    6:*/		return 0x8207BF48;
		  /* 8207BF48h */ case    7:  		/* fmuls FR31, FR13, FR0 */
		/* 8207BF48h case    7:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 8207BF48h case    7:*/		return 0x8207BF4C;
		  /* 8207BF4Ch */ case    8:  		/* fsubs FR28, FR31, FR30 */
		/* 8207BF4Ch case    8:*/		cpu::op::fsubs<0>(regs,&regs.FR28,regs.FR31,regs.FR30);
		/* 8207BF4Ch case    8:*/		return 0x8207BF50;
		  /* 8207BF50h */ case    9:  		/* bc 12, CR6_EQ, 180 */
		/* 8207BF50h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BF50h case    9:*/		return 0x8207BF54;
		  /* 8207BF54h */ case   10:  		/* addi R29, R28, -4 */
		/* 8207BF54h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0xFFFFFFFC);
		/* 8207BF54h case   10:*/		return 0x8207BF58;
		  /* 8207BF58h */ case   11:  		/* rldicl R11, R30, 0, 32 */
		/* 8207BF58h case   11:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 8207BF58h case   11:*/		return 0x8207BF5C;
		  /* 8207BF5Ch */ case   12:  		/* std R11, <#[R1 + 88]> */
		/* 8207BF5Ch case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BF5Ch case   12:*/		return 0x8207BF60;
		  /* 8207BF60h */ case   13:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BF60h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BF60h case   13:*/		return 0x8207BF64;
		  /* 8207BF64h */ case   14:  		/* fcfid FR0, FR0 */
		/* 8207BF64h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BF64h case   14:*/		return 0x8207BF68;
		  /* 8207BF68h */ case   15:  		/* frsp FR24, FR0 */
		/* 8207BF68h case   15:*/		cpu::op::frsp<0>(regs,&regs.FR24,regs.FR0);
		/* 8207BF68h case   15:*/		return 0x8207BF6C;
		  /* 8207BF6Ch */ case   16:  		/* fsubs FR0, FR24, FR31 */
		/* 8207BF6Ch case   16:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR24,regs.FR31);
		/* 8207BF6Ch case   16:*/		return 0x8207BF70;
		  /* 8207BF70h */ case   17:  		/* fadds FR0, FR0, FR30 */
		/* 8207BF70h case   17:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BF70h case   17:*/		return 0x8207BF74;
		  /* 8207BF74h */ case   18:  		/* fmuls FR1, FR0, FR27 */
		/* 8207BF74h case   18:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR27);
		/* 8207BF74h case   18:*/		return 0x8207BF78;
		  /* 8207BF78h */ case   19:  		/* bl -1432 */
		/* 8207BF78h case   19:*/		regs.LR = 0x8207BF7C; return 0x8207B9E0;
		/* 8207BF78h case   19:*/		return 0x8207BF7C;
		  /* 8207BF7Ch */ case   20:  		/* fmr FR23, FR1 */
		/* 8207BF7Ch case   20:*/		cpu::op::fmr<0>(regs,&regs.FR23,regs.FR1);
		/* 8207BF7Ch case   20:*/		return 0x8207BF80;
		  /* 8207BF80h */ case   21:  		/* fmr FR3, FR29 */
		/* 8207BF80h case   21:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 8207BF80h case   21:*/		return 0x8207BF84;
		  /* 8207BF84h */ case   22:  		/* fmr FR2, FR28 */
		/* 8207BF84h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR28);
		/* 8207BF84h case   22:*/		return 0x8207BF88;
		  /* 8207BF88h */ case   23:  		/* fmr FR1, FR24 */
		/* 8207BF88h case   23:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR24);
		/* 8207BF88h case   23:*/		return 0x8207BF8C;
		  /* 8207BF8Ch */ case   24:  		/* bl -1644 */
		/* 8207BF8Ch case   24:*/		regs.LR = 0x8207BF90; return 0x8207B920;
		/* 8207BF8Ch case   24:*/		return 0x8207BF90;
		  /* 8207BF90h */ case   25:  		/* addi R30, R30, 1 */
		/* 8207BF90h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207BF90h case   25:*/		return 0x8207BF94;
		  /* 8207BF94h */ case   26:  		/* fmuls FR0, FR23, FR1 */
		/* 8207BF94h case   26:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR23,regs.FR1);
		/* 8207BF94h case   26:*/		return 0x8207BF98;
		  /* 8207BF98h */ case   27:  		/* stfsu FR0, <#[R29 + 4]> */
		/* 8207BF98h case   27:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8207BF98h case   27:*/		return 0x8207BF9C;
		  /* 8207BF9Ch */ case   28:  		/* cmplw CR6, R30, R31 */
		/* 8207BF9Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8207BF9Ch case   28:*/		return 0x8207BFA0;
		  /* 8207BFA0h */ case   29:  		/* bc 12, CR6_LT, -72 */
		/* 8207BFA0h case   29:*/		if ( regs.CR[6].lt ) { return 0x8207BF58;  }
		/* 8207BFA0h case   29:*/		return 0x8207BFA4;
		  /* 8207BFA4h */ case   30:  		/* b 96 */
		/* 8207BFA4h case   30:*/		return 0x8207C004;
		/* 8207BFA4h case   30:*/		return 0x8207BFA8;
	}
	return 0x8207BFA8;
} // Block from 8207BF2Ch-8207BFA8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207BFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207BFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207BFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207BFA8);
		  /* 8207BFA8h */ case    0:  		/* li R30, 0 */
		/* 8207BFA8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207BFA8h case    0:*/		return 0x8207BFAC;
		  /* 8207BFACh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8207BFACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207BFACh case    1:*/		return 0x8207BFB0;
		  /* 8207BFB0h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8207BFB0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207C004;  }
		/* 8207BFB0h case    2:*/		return 0x8207BFB4;
		  /* 8207BFB4h */ case    3:  		/* rldicl R11, R31, 0, 32 */
		/* 8207BFB4h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R31);
		/* 8207BFB4h case    3:*/		return 0x8207BFB8;
		  /* 8207BFB8h */ case    4:  		/* addi R29, R28, -4 */
		/* 8207BFB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0xFFFFFFFC);
		/* 8207BFB8h case    4:*/		return 0x8207BFBC;
		  /* 8207BFBCh */ case    5:  		/* std R11, <#[R1 + 88]> */
		/* 8207BFBCh case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BFBCh case    5:*/		return 0x8207BFC0;
		  /* 8207BFC0h */ case    6:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207BFC0h case    6:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BFC0h case    6:*/		return 0x8207BFC4;
		  /* 8207BFC4h */ case    7:  		/* fcfid FR13, FR13 */
		/* 8207BFC4h case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BFC4h case    7:*/		return 0x8207BFC8;
		  /* 8207BFC8h */ case    8:  		/* frsp FR13, FR13 */
		/* 8207BFC8h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207BFC8h case    8:*/		return 0x8207BFCC;
		  /* 8207BFCCh */ case    9:  		/* fmuls FR31, FR13, FR0 */
		/* 8207BFCCh case    9:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 8207BFCCh case    9:*/		return 0x8207BFD0;
		  /* 8207BFD0h */ case   10:  		/* rldicl R11, R30, 0, 32 */
		/* 8207BFD0h case   10:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 8207BFD0h case   10:*/		return 0x8207BFD4;
		  /* 8207BFD4h */ case   11:  		/* std R11, <#[R1 + 88]> */
		/* 8207BFD4h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BFD4h case   11:*/		return 0x8207BFD8;
		  /* 8207BFD8h */ case   12:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207BFD8h case   12:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207BFD8h case   12:*/		return 0x8207BFDC;
		  /* 8207BFDCh */ case   13:  		/* fcfid FR0, FR0 */
		/* 8207BFDCh case   13:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BFDCh case   13:*/		return 0x8207BFE0;
		  /* 8207BFE0h */ case   14:  		/* frsp FR0, FR0 */
		/* 8207BFE0h case   14:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207BFE0h case   14:*/		return 0x8207BFE4;
		  /* 8207BFE4h */ case   15:  		/* fsubs FR0, FR0, FR31 */
		/* 8207BFE4h case   15:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 8207BFE4h case   15:*/		return 0x8207BFE8;
		  /* 8207BFE8h */ case   16:  		/* fadds FR0, FR0, FR30 */
		/* 8207BFE8h case   16:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR30);
		/* 8207BFE8h case   16:*/		return 0x8207BFEC;
		  /* 8207BFECh */ case   17:  		/* fmuls FR1, FR0, FR27 */
		/* 8207BFECh case   17:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR0,regs.FR27);
		/* 8207BFECh case   17:*/		return 0x8207BFF0;
		  /* 8207BFF0h */ case   18:  		/* bl -1200 */
		/* 8207BFF0h case   18:*/		regs.LR = 0x8207BFF4; return 0x8207BB40;
		/* 8207BFF0h case   18:*/		return 0x8207BFF4;
		  /* 8207BFF4h */ case   19:  		/* addi R30, R30, 1 */
		/* 8207BFF4h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207BFF4h case   19:*/		return 0x8207BFF8;
		  /* 8207BFF8h */ case   20:  		/* stfsu FR1, <#[R29 + 4]> */
		/* 8207BFF8h case   20:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8207BFF8h case   20:*/		return 0x8207BFFC;
		  /* 8207BFFCh */ case   21:  		/* cmplw CR6, R30, R31 */
		/* 8207BFFCh case   21:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8207BFFCh case   21:*/		return 0x8207C000;
		  /* 8207C000h */ case   22:  		/* bc 12, CR6_LT, -48 */
		/* 8207C000h case   22:*/		if ( regs.CR[6].lt ) { return 0x8207BFD0;  }
		/* 8207C000h case   22:*/		return 0x8207C004;
	}
	return 0x8207C004;
} // Block from 8207BFA8h-8207C004h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8207C004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C004);
		  /* 8207C004h */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 8207C004h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 8207C004h case    0:*/		return 0x8207C008;
		  /* 8207C008h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8207C008h case    1:*/		if ( regs.CR[6].eq ) { return 0x8207C010;  }
		/* 8207C008h case    1:*/		return 0x8207C00C;
		  /* 8207C00Ch */ case    2:  		/* stfs FR25, <#[R28]> */
		/* 8207C00Ch case    2:*/		cpu::mem::store32f( regs, regs.FR25, (uint32)(regs.R28 + 0x00000000) );
		/* 8207C00Ch case    2:*/		return 0x8207C010;
	}
	return 0x8207C010;
} // Block from 8207C004h-8207C010h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C010);
		  /* 8207C010h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8207C010h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8207C010h case    0:*/		return 0x8207C014;
		  /* 8207C014h */ case    1:  		/* bc 12, CR6_EQ, 92 */
		/* 8207C014h case    1:*/		if ( regs.CR[6].eq ) { return 0x8207C070;  }
		/* 8207C014h case    1:*/		return 0x8207C018;
		  /* 8207C018h */ case    2:  		/* mr R11, R28 */
		/* 8207C018h case    2:*/		regs.R11 = regs.R28;
		/* 8207C018h case    2:*/		return 0x8207C01C;
		  /* 8207C01Ch */ case    3:  		/* mr R8, R27 */
		/* 8207C01Ch case    3:*/		regs.R8 = regs.R27;
		/* 8207C01Ch case    3:*/		return 0x8207C020;
		  /* 8207C020h */ case    4:  		/* fmr FR0, FR25 */
		/* 8207C020h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR25);
		/* 8207C020h case    4:*/		return 0x8207C024;
		  /* 8207C024h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8207C024h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8207C024h case    5:*/		return 0x8207C028;
		  /* 8207C028h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 8207C028h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207C064;  }
		/* 8207C028h case    6:*/		return 0x8207C02C;
		  /* 8207C02Ch */ case    7:  		/* rlwinm R9, R27, 2, 0, 29 */
		/* 8207C02Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R27);
		/* 8207C02Ch case    7:*/		return 0x8207C030;
		  /* 8207C030h */ case    8:  		/* mtspr CTR, R26 */
		/* 8207C030h case    8:*/		regs.CTR = regs.R26;
		/* 8207C030h case    8:*/		return 0x8207C034;
		  /* 8207C034h */ case    9:  		/* subf R10, R9, R11 */
		/* 8207C034h case    9:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 8207C034h case    9:*/		return 0x8207C038;
		  /* 8207C038h */ case   10:  		/* lfsux FR13, <#[R10 + R9]> */
		/* 8207C038h case   10:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		regs.R10 = (uint32)(regs.R10 + regs.R9 + 0x00000000);
		/* 8207C038h case   10:*/		return 0x8207C03C;
		  /* 8207C03Ch */ case   11:  		/* fadds FR0, FR13, FR0 */
		/* 8207C03Ch case   11:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207C03Ch case   11:*/		return 0x8207C040;
		  /* 8207C040h */ case   12:  		/* bc 16, CR0_LT, -8 */
		/* 8207C040h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207C038;  }
		/* 8207C040h case   12:*/		return 0x8207C044;
		  /* 8207C044h */ case   13:  		/* fdivs FR0, FR26, FR0 */
		/* 8207C044h case   13:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR26,regs.FR0);
		/* 8207C044h case   13:*/		return 0x8207C048;
		  /* 8207C048h */ case   14:  		/* mr R10, R11 */
		/* 8207C048h case   14:*/		regs.R10 = regs.R11;
		/* 8207C048h case   14:*/		return 0x8207C04C;
		  /* 8207C04Ch */ case   15:  		/* mtspr CTR, R26 */
		/* 8207C04Ch case   15:*/		regs.CTR = regs.R26;
		/* 8207C04Ch case   15:*/		return 0x8207C050;
		  /* 8207C050h */ case   16:  		/* lfs FR13, <#[R10]> */
		/* 8207C050h case   16:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8207C050h case   16:*/		return 0x8207C054;
		  /* 8207C054h */ case   17:  		/* fmuls FR13, FR0, FR13 */
		/* 8207C054h case   17:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR0,regs.FR13);
		/* 8207C054h case   17:*/		return 0x8207C058;
		  /* 8207C058h */ case   18:  		/* stfs FR13, <#[R10]> */
		/* 8207C058h case   18:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R10 + 0x00000000) );
		/* 8207C058h case   18:*/		return 0x8207C05C;
		  /* 8207C05Ch */ case   19:  		/* add R10, R10, R9 */
		/* 8207C05Ch case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8207C05Ch case   19:*/		return 0x8207C060;
		  /* 8207C060h */ case   20:  		/* bc 16, CR0_LT, -16 */
		/* 8207C060h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207C050;  }
		/* 8207C060h case   20:*/		return 0x8207C064;
	}
	return 0x8207C064;
} // Block from 8207C010h-8207C064h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207C064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C064);
		  /* 8207C064h */ case    0:  		/* addic. R8, R8, -1 */
		/* 8207C064h case    0:*/		cpu::op::addic<1>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8207C064h case    0:*/		return 0x8207C068;
		  /* 8207C068h */ case    1:  		/* addi R11, R11, 4 */
		/* 8207C068h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207C068h case    1:*/		return 0x8207C06C;
		  /* 8207C06Ch */ case    2:  		/* bc 4, CR0_EQ, -76 */
		/* 8207C06Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8207C020;  }
		/* 8207C06Ch case    2:*/		return 0x8207C070;
	}
	return 0x8207C070;
} // Block from 8207C064h-8207C070h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C070h
// Function '?BuildFilter@D3D@@YAXPAU_FILTER@@HW4_D3DFILTER_TYPE@@PBU_D3DFILTER_PARAMETERS@@MIH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C070);
		  /* 8207C070h */ case    0:  		/* addi R1, R1, 240 */
		/* 8207C070h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8207C070h case    0:*/		return 0x8207C074;
		  /* 8207C074h */ case    1:  		/* addi R12, R1, -64 */
		/* 8207C074h case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFC0);
		/* 8207C074h case    1:*/		return 0x8207C078;
		  /* 8207C078h */ case    2:  		/* bl 87000 */
		/* 8207C078h case    2:*/		regs.LR = 0x8207C07C; return 0x82091450;
		/* 8207C078h case    2:*/		return 0x8207C07C;
		  /* 8207C07Ch */ case    3:  		/* b 86560 */
		/* 8207C07Ch case    3:*/		return 0x8209129C;
		/* 8207C07Ch case    3:*/		return 0x8207C080;
	}
	return 0x8207C080;
} // Block from 8207C070h-8207C080h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C080);
		  /* 8207C080h */ case    0:  		/* mfspr R12, LR */
		/* 8207C080h case    0:*/		regs.R12 = regs.LR;
		/* 8207C080h case    0:*/		return 0x8207C084;
		  /* 8207C084h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207C084h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207C084h case    1:*/		return 0x8207C088;
		  /* 8207C088h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207C088h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207C088h case    2:*/		return 0x8207C08C;
		  /* 8207C08Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207C08Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207C08Ch case    3:*/		return 0x8207C090;
		  /* 8207C090h */ case    4:  		/* stwu R1, <#[R1 - 784]> */
		/* 8207C090h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCF0);
		/* 8207C090h case    4:*/		return 0x8207C094;
		  /* 8207C094h */ case    5:  		/* mr R31, R3 */
		/* 8207C094h case    5:*/		regs.R31 = regs.R3;
		/* 8207C094h case    5:*/		return 0x8207C098;
		  /* 8207C098h */ case    6:  		/* mr R30, R8 */
		/* 8207C098h case    6:*/		regs.R30 = regs.R8;
		/* 8207C098h case    6:*/		return 0x8207C09C;
		  /* 8207C09Ch */ case    7:  		/* li R10, 1 */
		/* 8207C09Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207C09Ch case    7:*/		return 0x8207C0A0;
		  /* 8207C0A0h */ case    8:  		/* li R11, 0 */
		/* 8207C0A0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207C0A0h case    8:*/		return 0x8207C0A4;
		  /* 8207C0A4h */ case    9:  		/* cmplwi CR6, R6, 0 */
		/* 8207C0A4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8207C0A4h case    9:*/		return 0x8207C0A8;
		  /* 8207C0A8h */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 8207C0A8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8207C0BC;  }
		/* 8207C0A8h case   10:*/		return 0x8207C0AC;
		  /* 8207C0ACh */ case   11:  		/* addi R8, R1, 88 */
		/* 8207C0ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 8207C0ACh case   11:*/		return 0x8207C0B0;
		  /* 8207C0B0h */ case   12:  		/* addi R6, R1, 88 */
		/* 8207C0B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 8207C0B0h case   12:*/		return 0x8207C0B4;
		  /* 8207C0B4h */ case   13:  		/* std R11, <#[R8]> */
		/* 8207C0B4h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8207C0B4h case   13:*/		return 0x8207C0B8;
		  /* 8207C0B8h */ case   14:  		/* stw R11, <#[R8 + 8]> */
		/* 8207C0B8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000008) );
		/* 8207C0B8h case   14:*/		return 0x8207C0BC;
	}
	return 0x8207C0BC;
} // Block from 8207C080h-8207C0BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207C0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C0BC);
		  /* 8207C0BCh */ case    0:  		/* lis R8, -32256 */
		/* 8207C0BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C0BCh case    0:*/		return 0x8207C0C0;
		  /* 8207C0C0h */ case    1:  		/* lfs FR0, <#[R6]> */
		/* 8207C0C0h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000000) );
		/* 8207C0C0h case    1:*/		return 0x8207C0C4;
		  /* 8207C0C4h */ case    2:  		/* lfs FR9, <#[R8 + 8792]> */
		/* 8207C0C4h case    2:*/		cpu::mem::load32f( regs, &regs.FR9, (uint32)(regs.R8 + 0x00002258) );
		/* 8207C0C4h case    2:*/		return 0x8207C0C8;
		  /* 8207C0C8h */ case    3:  		/* fcmpu CR6, FR0, FR9 */
		/* 8207C0C8h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR9);
		/* 8207C0C8h case    3:*/		return 0x8207C0CC;
		  /* 8207C0CCh */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 8207C0CCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x8207C0D4;  }
		/* 8207C0CCh case    4:*/		return 0x8207C0D0;
		  /* 8207C0D0h */ case    5:  		/* fmr FR0, FR9 */
		/* 8207C0D0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR9);
		/* 8207C0D0h case    5:*/		return 0x8207C0D4;
	}
	return 0x8207C0D4;
} // Block from 8207C0BCh-8207C0D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C0D4);
		  /* 8207C0D4h */ case    0:  		/* lis R8, -32256 */
		/* 8207C0D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C0D4h case    0:*/		return 0x8207C0D8;
		  /* 8207C0D8h */ case    1:  		/* lfs FR11, <#[R8 + 1792]> */
		/* 8207C0D8h case    1:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R8 + 0x00000700) );
		/* 8207C0D8h case    1:*/		return 0x8207C0DC;
		  /* 8207C0DCh */ case    2:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C0DCh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C0DCh case    2:*/		return 0x8207C0E0;
		  /* 8207C0E0h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 8207C0E0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207C0E8;  }
		/* 8207C0E0h case    3:*/		return 0x8207C0E4;
		  /* 8207C0E4h */ case    4:  		/* fmr FR0, FR11 */
		/* 8207C0E4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C0E4h case    4:*/		return 0x8207C0E8;
	}
	return 0x8207C0E8;
} // Block from 8207C0D4h-8207C0E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207C0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C0E8);
		  /* 8207C0E8h */ case    0:  		/* lis R8, -32256 */
		/* 8207C0E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C0E8h case    0:*/		return 0x8207C0EC;
		  /* 8207C0ECh */ case    1:  		/* lis R7, -32256 */
		/* 8207C0ECh case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207C0ECh case    1:*/		return 0x8207C0F0;
		  /* 8207C0F0h */ case    2:  		/* cmpwi CR6, R9, 0 */
		/* 8207C0F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8207C0F0h case    2:*/		return 0x8207C0F4;
		  /* 8207C0F4h */ case    3:  		/* lfs FR12, <#[R8 + 8788]> */
		/* 8207C0F4h case    3:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00002254) );
		/* 8207C0F4h case    3:*/		return 0x8207C0F8;
		  /* 8207C0F8h */ case    4:  		/* lfs FR13, <#[R7 + 8784]> */
		/* 8207C0F8h case    4:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R7 + 0x00002250) );
		/* 8207C0F8h case    4:*/		return 0x8207C0FC;
		  /* 8207C0FCh */ case    5:  		/* fnmsubs FR13, FR0, FR12, FR13 */
		/* 8207C0FCh case    5:*/		cpu::op::fnmsubs<0>(regs,&regs.FR13,regs.FR0,regs.FR12,regs.FR13);
		/* 8207C0FCh case    5:*/		return 0x8207C100;
		  /* 8207C100h */ case    6:  		/* fmadds FR10, FR13, FR0, FR11 */
		/* 8207C100h case    6:*/		cpu::op::fmadds<0>(regs,&regs.FR10,regs.FR13,regs.FR0,regs.FR11);
		/* 8207C100h case    6:*/		return 0x8207C104;
		  /* 8207C104h */ case    7:  		/* bc 12, CR6_EQ, 160 */
		/* 8207C104h case    7:*/		if ( regs.CR[6].eq ) { return 0x8207C1A4;  }
		/* 8207C104h case    7:*/		return 0x8207C108;
		  /* 8207C108h */ case    8:  		/* cmpwi CR6, R4, 0 */
		/* 8207C108h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 8207C108h case    8:*/		return 0x8207C10C;
		  /* 8207C10Ch */ case    9:  		/* bc 12, CR6_EQ, 152 */
		/* 8207C10Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8207C1A4;  }
		/* 8207C10Ch case    9:*/		return 0x8207C110;
		  /* 8207C110h */ case   10:  		/* lfs FR0, <#[R6 + 4]> */
		/* 8207C110h case   10:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000004) );
		/* 8207C110h case   10:*/		return 0x8207C114;
		  /* 8207C114h */ case   11:  		/* fcmpu CR6, FR0, FR9 */
		/* 8207C114h case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR9);
		/* 8207C114h case   11:*/		return 0x8207C118;
		  /* 8207C118h */ case   12:  		/* bc 4, CR6_LT, 8 */
		/* 8207C118h case   12:*/		if ( !regs.CR[6].lt ) { return 0x8207C120;  }
		/* 8207C118h case   12:*/		return 0x8207C11C;
		  /* 8207C11Ch */ case   13:  		/* fmr FR0, FR9 */
		/* 8207C11Ch case   13:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR9);
		/* 8207C11Ch case   13:*/		return 0x8207C120;
	}
	return 0x8207C120;
} // Block from 8207C0E8h-8207C120h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207C120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C120);
		  /* 8207C120h */ case    0:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C120h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C120h case    0:*/		return 0x8207C124;
		  /* 8207C124h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8207C124h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207C12C;  }
		/* 8207C124h case    1:*/		return 0x8207C128;
		  /* 8207C128h */ case    2:  		/* fmr FR0, FR11 */
		/* 8207C128h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C128h case    2:*/		return 0x8207C12C;
	}
	return 0x8207C12C;
} // Block from 8207C120h-8207C12Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C12C);
		  /* 8207C12Ch */ case    0:  		/* lis R9, -32256 */
		/* 8207C12Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C12Ch case    0:*/		return 0x8207C130;
		  /* 8207C130h */ case    1:  		/* lis R8, -32256 */
		/* 8207C130h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C130h case    1:*/		return 0x8207C134;
		  /* 8207C134h */ case    2:  		/* lis R7, -32256 */
		/* 8207C134h case    2:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207C134h case    2:*/		return 0x8207C138;
		  /* 8207C138h */ case    3:  		/* lfs FR13, <#[R9 + 8780]> */
		/* 8207C138h case    3:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R9 + 0x0000224C) );
		/* 8207C138h case    3:*/		return 0x8207C13C;
		  /* 8207C13Ch */ case    4:  		/* fmadds FR8, FR0, FR12, FR13 */
		/* 8207C13Ch case    4:*/		cpu::op::fmadds<0>(regs,&regs.FR8,regs.FR0,regs.FR12,regs.FR13);
		/* 8207C13Ch case    4:*/		return 0x8207C140;
		  /* 8207C140h */ case    5:  		/* lfs FR13, <#[R8 + 8776]> */
		/* 8207C140h case    5:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00002248) );
		/* 8207C140h case    5:*/		return 0x8207C144;
		  /* 8207C144h */ case    6:  		/* lfd FR12, <#[R7 + 8768]> */
		/* 8207C144h case    6:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R7 + 0x00002240) );
		/* 8207C144h case    6:*/		return 0x8207C148;
		  /* 8207C148h */ case    7:  		/* fcmpu CR6, FR1, FR12 */
		/* 8207C148h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR12);
		/* 8207C148h case    7:*/		return 0x8207C14C;
		  /* 8207C14Ch */ case    8:  		/* fnmsubs FR13, FR8, FR0, FR13 */
		/* 8207C14Ch case    8:*/		cpu::op::fnmsubs<0>(regs,&regs.FR13,regs.FR8,regs.FR0,regs.FR13);
		/* 8207C14Ch case    8:*/		return 0x8207C150;
		  /* 8207C150h */ case    9:  		/* bc 4, CR6_GT, 20 */
		/* 8207C150h case    9:*/		if ( !regs.CR[6].gt ) { return 0x8207C164;  }
		/* 8207C150h case    9:*/		return 0x8207C154;
		  /* 8207C154h */ case   10:  		/* lis R9, -32256 */
		/* 8207C154h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C154h case   10:*/		return 0x8207C158;
		  /* 8207C158h */ case   11:  		/* lfd FR0, <#[R9 + 8760]> */
		/* 8207C158h case   11:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002238) );
		/* 8207C158h case   11:*/		return 0x8207C15C;
		  /* 8207C15Ch */ case   12:  		/* fcmpu CR6, FR1, FR0 */
		/* 8207C15Ch case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8207C15Ch case   12:*/		return 0x8207C160;
		  /* 8207C160h */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 8207C160h case   13:*/		if ( regs.CR[6].lt ) { return 0x8207C168;  }
		/* 8207C160h case   13:*/		return 0x8207C164;
	}
	return 0x8207C164;
} // Block from 8207C12Ch-8207C164h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207C164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C164);
		  /* 8207C164h */ case    0:  		/* mr R10, R11 */
		/* 8207C164h case    0:*/		regs.R10 = regs.R11;
		/* 8207C164h case    0:*/		return 0x8207C168;
	}
	return 0x8207C168;
} // Block from 8207C164h-8207C168h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C168);
		  /* 8207C168h */ case    0:  		/* fcmpu CR6, FR10, FR11 */
		/* 8207C168h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR10,regs.FR11);
		/* 8207C168h case    0:*/		return 0x8207C16C;
		  /* 8207C16Ch */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8207C16Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x8207C174;  }
		/* 8207C16Ch case    1:*/		return 0x8207C170;
		  /* 8207C170h */ case    2:  		/* mr R10, R11 */
		/* 8207C170h case    2:*/		regs.R10 = regs.R11;
		/* 8207C170h case    2:*/		return 0x8207C174;
	}
	return 0x8207C174;
} // Block from 8207C168h-8207C174h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C174);
		  /* 8207C174h */ case    0:  		/* fcmpu CR6, FR13, FR11 */
		/* 8207C174h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR11);
		/* 8207C174h case    0:*/		return 0x8207C178;
		  /* 8207C178h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8207C178h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8207C180;  }
		/* 8207C178h case    1:*/		return 0x8207C17C;
		  /* 8207C17Ch */ case    2:  		/* mr R10, R11 */
		/* 8207C17Ch case    2:*/		regs.R10 = regs.R11;
		/* 8207C17Ch case    2:*/		return 0x8207C180;
	}
	return 0x8207C180;
} // Block from 8207C174h-8207C180h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C180);
		  /* 8207C180h */ case    0:  		/* lis R11, -32256 */
		/* 8207C180h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C180h case    0:*/		return 0x8207C184;
		  /* 8207C184h */ case    1:  		/* lfs FR0, <#[R11 + 2752]> */
		/* 8207C184h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000AC0) );
		/* 8207C184h case    1:*/		return 0x8207C188;
		  /* 8207C188h */ case    2:  		/* fdivs FR0, FR0, FR1 */
		/* 8207C188h case    2:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR0,regs.FR1);
		/* 8207C188h case    2:*/		return 0x8207C18C;
		  /* 8207C18Ch */ case    3:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C18Ch case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C18Ch case    3:*/		return 0x8207C190;
		  /* 8207C190h */ case    4:  		/* bc 12, CR6_LT, 8 */
		/* 8207C190h case    4:*/		if ( regs.CR[6].lt ) { return 0x8207C198;  }
		/* 8207C190h case    4:*/		return 0x8207C194;
		  /* 8207C194h */ case    5:  		/* fmr FR0, FR11 */
		/* 8207C194h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C194h case    5:*/		return 0x8207C198;
	}
	return 0x8207C198;
} // Block from 8207C180h-8207C198h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C198);
		  /* 8207C198h */ case    0:  		/* fmuls FR13, FR0, FR13 */
		/* 8207C198h case    0:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR0,regs.FR13);
		/* 8207C198h case    0:*/		return 0x8207C19C;
		  /* 8207C19Ch */ case    1:  		/* fmuls FR13, FR13, FR10 */
		/* 8207C19Ch case    1:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR13,regs.FR10);
		/* 8207C19Ch case    1:*/		return 0x8207C1A0;
		  /* 8207C1A0h */ case    2:  		/* b 72 */
		/* 8207C1A0h case    2:*/		return 0x8207C1E8;
		/* 8207C1A0h case    2:*/		return 0x8207C1A4;
	}
	return 0x8207C1A4;
} // Block from 8207C198h-8207C1A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1A4);
		  /* 8207C1A4h */ case    0:  		/* lis R9, -32256 */
		/* 8207C1A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C1A4h case    0:*/		return 0x8207C1A8;
		  /* 8207C1A8h */ case    1:  		/* lfd FR0, <#[R9 + 8752]> */
		/* 8207C1A8h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002230) );
		/* 8207C1A8h case    1:*/		return 0x8207C1AC;
		  /* 8207C1ACh */ case    2:  		/* fcmpu CR6, FR1, FR0 */
		/* 8207C1ACh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8207C1ACh case    2:*/		return 0x8207C1B0;
		  /* 8207C1B0h */ case    3:  		/* bc 4, CR6_GT, 20 */
		/* 8207C1B0h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207C1C4;  }
		/* 8207C1B0h case    3:*/		return 0x8207C1B4;
		  /* 8207C1B4h */ case    4:  		/* lis R9, -32256 */
		/* 8207C1B4h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C1B4h case    4:*/		return 0x8207C1B8;
		  /* 8207C1B8h */ case    5:  		/* lfd FR0, <#[R9 + 8744]> */
		/* 8207C1B8h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002228) );
		/* 8207C1B8h case    5:*/		return 0x8207C1BC;
		  /* 8207C1BCh */ case    6:  		/* fcmpu CR6, FR1, FR0 */
		/* 8207C1BCh case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 8207C1BCh case    6:*/		return 0x8207C1C0;
		  /* 8207C1C0h */ case    7:  		/* bc 12, CR6_LT, 8 */
		/* 8207C1C0h case    7:*/		if ( regs.CR[6].lt ) { return 0x8207C1C8;  }
		/* 8207C1C0h case    7:*/		return 0x8207C1C4;
	}
	return 0x8207C1C4;
} // Block from 8207C1A4h-8207C1C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1C4);
		  /* 8207C1C4h */ case    0:  		/* mr R10, R11 */
		/* 8207C1C4h case    0:*/		regs.R10 = regs.R11;
		/* 8207C1C4h case    0:*/		return 0x8207C1C8;
	}
	return 0x8207C1C8;
} // Block from 8207C1C4h-8207C1C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1C8);
		  /* 8207C1C8h */ case    0:  		/* fcmpu CR6, FR10, FR11 */
		/* 8207C1C8h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR10,regs.FR11);
		/* 8207C1C8h case    0:*/		return 0x8207C1CC;
		  /* 8207C1CCh */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 8207C1CCh case    1:*/		if ( !regs.CR[6].lt ) { return 0x8207C1D4;  }
		/* 8207C1CCh case    1:*/		return 0x8207C1D0;
		  /* 8207C1D0h */ case    2:  		/* mr R10, R11 */
		/* 8207C1D0h case    2:*/		regs.R10 = regs.R11;
		/* 8207C1D0h case    2:*/		return 0x8207C1D4;
	}
	return 0x8207C1D4;
} // Block from 8207C1C8h-8207C1D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1D4);
		  /* 8207C1D4h */ case    0:  		/* fdivs FR0, FR11, FR1 */
		/* 8207C1D4h case    0:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR11,regs.FR1);
		/* 8207C1D4h case    0:*/		return 0x8207C1D8;
		  /* 8207C1D8h */ case    1:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C1D8h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C1D8h case    1:*/		return 0x8207C1DC;
		  /* 8207C1DCh */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 8207C1DCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8207C1E4;  }
		/* 8207C1DCh case    2:*/		return 0x8207C1E0;
		  /* 8207C1E0h */ case    3:  		/* fmr FR0, FR11 */
		/* 8207C1E0h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C1E0h case    3:*/		return 0x8207C1E4;
	}
	return 0x8207C1E4;
} // Block from 8207C1D4h-8207C1E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1E4);
		  /* 8207C1E4h */ case    0:  		/* fmuls FR13, FR0, FR10 */
		/* 8207C1E4h case    0:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR0,regs.FR10);
		/* 8207C1E4h case    0:*/		return 0x8207C1E8;
	}
	return 0x8207C1E8;
} // Block from 8207C1E4h-8207C1E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C1E8);
		  /* 8207C1E8h */ case    0:  		/* lis R11, -32256 */
		/* 8207C1E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C1E8h case    0:*/		return 0x8207C1EC;
		  /* 8207C1ECh */ case    1:  		/* lis R9, -32256 */
		/* 8207C1ECh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C1ECh case    1:*/		return 0x8207C1F0;
		  /* 8207C1F0h */ case    2:  		/* lis R8, -32256 */
		/* 8207C1F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C1F0h case    2:*/		return 0x8207C1F4;
		  /* 8207C1F4h */ case    3:  		/* lfs FR0, <#[R11 + 2980]> */
		/* 8207C1F4h case    3:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000BA4) );
		/* 8207C1F4h case    3:*/		return 0x8207C1F8;
		  /* 8207C1F8h */ case    4:  		/* lis R11, 31 */
		/* 8207C1F8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x1F);
		/* 8207C1F8h case    4:*/		return 0x8207C1FC;
		  /* 8207C1FCh */ case    5:  		/* fmuls FR0, FR13, FR0 */
		/* 8207C1FCh case    5:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207C1FCh case    5:*/		return 0x8207C200;
		  /* 8207C200h */ case    6:  		/* stfs FR0, <#[R31 + 4]> */
		/* 8207C200h case    6:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R31 + 0x00000004) );
		/* 8207C200h case    6:*/		return 0x8207C204;
		  /* 8207C204h */ case    7:  		/* lfs FR0, <#[R9 + 8740]> */
		/* 8207C204h case    7:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00002224) );
		/* 8207C204h case    7:*/		return 0x8207C208;
		  /* 8207C208h */ case    8:  		/* ori R11, R11, 65535 */
		/* 8207C208h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8207C208h case    8:*/		return 0x8207C20C;
		  /* 8207C20Ch */ case    9:  		/* lfs FR10, <#[R8 + 1820]> */
		/* 8207C20Ch case    9:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R8 + 0x0000071C) );
		/* 8207C20Ch case    9:*/		return 0x8207C210;
		  /* 8207C210h */ case   10:  		/* fmadds FR0, FR1, FR0, FR10 */
		/* 8207C210h case   10:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR1,regs.FR0,regs.FR10);
		/* 8207C210h case   10:*/		return 0x8207C214;
		  /* 8207C214h */ case   11:  		/* fctidz FR0, FR0 */
		/* 8207C214h case   11:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C214h case   11:*/		return 0x8207C218;
		  /* 8207C218h */ case   12:  		/* stfd FR0, <#[R1 + 80]> */
		/* 8207C218h case   12:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C218h case   12:*/		return 0x8207C21C;
		  /* 8207C21Ch */ case   13:  		/* lwz R9, <#[R1 + 84]> */
		/* 8207C21Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8207C21Ch case   13:*/		return 0x8207C220;
		  /* 8207C220h */ case   14:  		/* cmplw CR6, R9, R11 */
		/* 8207C220h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207C220h case   14:*/		return 0x8207C224;
		  /* 8207C224h */ case   15:  		/* stw R9, <#[R31 + 648]> */
		/* 8207C224h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000288) );
		/* 8207C224h case   15:*/		return 0x8207C228;
		  /* 8207C228h */ case   16:  		/* bc 4, CR6_GT, 8 */
		/* 8207C228h case   16:*/		if ( !regs.CR[6].gt ) { return 0x8207C230;  }
		/* 8207C228h case   16:*/		return 0x8207C22C;
		  /* 8207C22Ch */ case   17:  		/* stw R11, <#[R31 + 648]> */
		/* 8207C22Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000288) );
		/* 8207C22Ch case   17:*/		return 0x8207C230;
	}
	return 0x8207C230;
} // Block from 8207C1E8h-8207C230h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207C230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C230);
		  /* 8207C230h */ case    0:  		/* lfs FR1, <#[R31 + 4]> */
		/* 8207C230h case    0:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000004) );
		/* 8207C230h case    0:*/		return 0x8207C234;
		  /* 8207C234h */ case    1:  		/* stw R30, <#[R31]> */
		/* 8207C234h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8207C234h case    1:*/		return 0x8207C238;
		  /* 8207C238h */ case    2:  		/* cmpwi CR6, R5, 2 */
		/* 8207C238h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000002);
		/* 8207C238h case    2:*/		return 0x8207C23C;
		  /* 8207C23Ch */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 8207C23Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207C27C;  }
		/* 8207C23Ch case    3:*/		return 0x8207C240;
		  /* 8207C240h */ case    4:  		/* lfs FR0, <#[R6 + 8]> */
		/* 8207C240h case    4:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000008) );
		/* 8207C240h case    4:*/		return 0x8207C244;
		  /* 8207C244h */ case    5:  		/* fcmpu CR6, FR0, FR9 */
		/* 8207C244h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR9);
		/* 8207C244h case    5:*/		return 0x8207C248;
		  /* 8207C248h */ case    6:  		/* bc 4, CR6_LT, 8 */
		/* 8207C248h case    6:*/		if ( !regs.CR[6].lt ) { return 0x8207C250;  }
		/* 8207C248h case    6:*/		return 0x8207C24C;
		  /* 8207C24Ch */ case    7:  		/* fmr FR0, FR9 */
		/* 8207C24Ch case    7:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR9);
		/* 8207C24Ch case    7:*/		return 0x8207C250;
	}
	return 0x8207C250;
} // Block from 8207C230h-8207C250h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207C250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C250);
		  /* 8207C250h */ case    0:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C250h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C250h case    0:*/		return 0x8207C254;
		  /* 8207C254h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8207C254h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207C25C;  }
		/* 8207C254h case    1:*/		return 0x8207C258;
		  /* 8207C258h */ case    2:  		/* fmr FR0, FR11 */
		/* 8207C258h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C258h case    2:*/		return 0x8207C25C;
	}
	return 0x8207C25C;
} // Block from 8207C250h-8207C25Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C25C);
		  /* 8207C25Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207C25Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C25Ch case    0:*/		return 0x8207C260;
		  /* 8207C260h */ case    1:  		/* lis R9, -32256 */
		/* 8207C260h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C260h case    1:*/		return 0x8207C264;
		  /* 8207C264h */ case    2:  		/* lis R8, -32256 */
		/* 8207C264h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C264h case    2:*/		return 0x8207C268;
		  /* 8207C268h */ case    3:  		/* lfs FR13, <#[R11 + 8532]> */
		/* 8207C268h case    3:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00002154) );
		/* 8207C268h case    3:*/		return 0x8207C26C;
		  /* 8207C26Ch */ case    4:  		/* lfs FR12, <#[R9 + 2964]> */
		/* 8207C26Ch case    4:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00000B94) );
		/* 8207C26Ch case    4:*/		return 0x8207C270;
		  /* 8207C270h */ case    5:  		/* fmadds FR12, FR0, FR13, FR12 */
		/* 8207C270h case    5:*/		cpu::op::fmadds<0>(regs,&regs.FR12,regs.FR0,regs.FR13,regs.FR12);
		/* 8207C270h case    5:*/		return 0x8207C274;
		  /* 8207C274h */ case    6:  		/* lfs FR13, <#[R8 + 8708]> */
		/* 8207C274h case    6:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00002204) );
		/* 8207C274h case    6:*/		return 0x8207C278;
		  /* 8207C278h */ case    7:  		/* b 132 */
		/* 8207C278h case    7:*/		return 0x8207C2FC;
		/* 8207C278h case    7:*/		return 0x8207C27C;
	}
	return 0x8207C27C;
} // Block from 8207C25Ch-8207C27Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207C27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C27C);
		  /* 8207C27Ch */ case    0:  		/* cmpwi CR6, R5, 3 */
		/* 8207C27Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000003);
		/* 8207C27Ch case    0:*/		return 0x8207C280;
		  /* 8207C280h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 8207C280h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207C2BC;  }
		/* 8207C280h case    1:*/		return 0x8207C284;
		  /* 8207C284h */ case    2:  		/* lfs FR0, <#[R6 + 8]> */
		/* 8207C284h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000008) );
		/* 8207C284h case    2:*/		return 0x8207C288;
		  /* 8207C288h */ case    3:  		/* fcmpu CR6, FR0, FR9 */
		/* 8207C288h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR9);
		/* 8207C288h case    3:*/		return 0x8207C28C;
		  /* 8207C28Ch */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 8207C28Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x8207C294;  }
		/* 8207C28Ch case    4:*/		return 0x8207C290;
		  /* 8207C290h */ case    5:  		/* fmr FR0, FR9 */
		/* 8207C290h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR9);
		/* 8207C290h case    5:*/		return 0x8207C294;
	}
	return 0x8207C294;
} // Block from 8207C27Ch-8207C294h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C294);
		  /* 8207C294h */ case    0:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C294h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C294h case    0:*/		return 0x8207C298;
		  /* 8207C298h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8207C298h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207C2A0;  }
		/* 8207C298h case    1:*/		return 0x8207C29C;
		  /* 8207C29Ch */ case    2:  		/* fmr FR0, FR11 */
		/* 8207C29Ch case    2:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C29Ch case    2:*/		return 0x8207C2A0;
	}
	return 0x8207C2A0;
} // Block from 8207C294h-8207C2A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2A0);
		  /* 8207C2A0h */ case    0:  		/* lis R11, -32256 */
		/* 8207C2A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C2A0h case    0:*/		return 0x8207C2A4;
		  /* 8207C2A4h */ case    1:  		/* lis R9, -32256 */
		/* 8207C2A4h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C2A4h case    1:*/		return 0x8207C2A8;
		  /* 8207C2A8h */ case    2:  		/* lfs FR13, <#[R11 + 2724]> */
		/* 8207C2A8h case    2:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000AA4) );
		/* 8207C2A8h case    2:*/		return 0x8207C2AC;
		  /* 8207C2ACh */ case    3:  		/* lfs FR12, <#[R9 + 8736]> */
		/* 8207C2ACh case    3:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00002220) );
		/* 8207C2ACh case    3:*/		return 0x8207C2B0;
		  /* 8207C2B0h */ case    4:  		/* fmadds FR13, FR0, FR13, FR12 */
		/* 8207C2B0h case    4:*/		cpu::op::fmadds<0>(regs,&regs.FR13,regs.FR0,regs.FR13,regs.FR12);
		/* 8207C2B0h case    4:*/		return 0x8207C2B4;
		  /* 8207C2B4h */ case    5:  		/* fmadds FR2, FR13, FR0, FR10 */
		/* 8207C2B4h case    5:*/		cpu::op::fmadds<0>(regs,&regs.FR2,regs.FR13,regs.FR0,regs.FR10);
		/* 8207C2B4h case    5:*/		return 0x8207C2B8;
		  /* 8207C2B8h */ case    6:  		/* b 84 */
		/* 8207C2B8h case    6:*/		return 0x8207C30C;
		/* 8207C2B8h case    6:*/		return 0x8207C2BC;
	}
	return 0x8207C2BC;
} // Block from 8207C2A0h-8207C2BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2BC);
		  /* 8207C2BCh */ case    0:  		/* cmpwi CR6, R5, 5 */
		/* 8207C2BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000005);
		/* 8207C2BCh case    0:*/		return 0x8207C2C0;
		  /* 8207C2C0h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 8207C2C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207C304;  }
		/* 8207C2C0h case    1:*/		return 0x8207C2C4;
		  /* 8207C2C4h */ case    2:  		/* lfs FR0, <#[R6 + 8]> */
		/* 8207C2C4h case    2:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R6 + 0x00000008) );
		/* 8207C2C4h case    2:*/		return 0x8207C2C8;
		  /* 8207C2C8h */ case    3:  		/* fcmpu CR6, FR0, FR9 */
		/* 8207C2C8h case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR9);
		/* 8207C2C8h case    3:*/		return 0x8207C2CC;
		  /* 8207C2CCh */ case    4:  		/* bc 4, CR6_LT, 8 */
		/* 8207C2CCh case    4:*/		if ( !regs.CR[6].lt ) { return 0x8207C2D4;  }
		/* 8207C2CCh case    4:*/		return 0x8207C2D0;
		  /* 8207C2D0h */ case    5:  		/* fmr FR0, FR9 */
		/* 8207C2D0h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR9);
		/* 8207C2D0h case    5:*/		return 0x8207C2D4;
	}
	return 0x8207C2D4;
} // Block from 8207C2BCh-8207C2D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2D4);
		  /* 8207C2D4h */ case    0:  		/* fcmpu CR6, FR0, FR11 */
		/* 8207C2D4h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR11);
		/* 8207C2D4h case    0:*/		return 0x8207C2D8;
		  /* 8207C2D8h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 8207C2D8h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8207C2E0;  }
		/* 8207C2D8h case    1:*/		return 0x8207C2DC;
		  /* 8207C2DCh */ case    2:  		/* fmr FR0, FR11 */
		/* 8207C2DCh case    2:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR11);
		/* 8207C2DCh case    2:*/		return 0x8207C2E0;
	}
	return 0x8207C2E0;
} // Block from 8207C2D4h-8207C2E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2E0);
		  /* 8207C2E0h */ case    0:  		/* lis R11, -32256 */
		/* 8207C2E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C2E0h case    0:*/		return 0x8207C2E4;
		  /* 8207C2E4h */ case    1:  		/* lis R9, -32256 */
		/* 8207C2E4h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207C2E4h case    1:*/		return 0x8207C2E8;
		  /* 8207C2E8h */ case    2:  		/* lis R8, -32256 */
		/* 8207C2E8h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C2E8h case    2:*/		return 0x8207C2EC;
		  /* 8207C2ECh */ case    3:  		/* lfs FR13, <#[R11 + 8732]> */
		/* 8207C2ECh case    3:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x0000221C) );
		/* 8207C2ECh case    3:*/		return 0x8207C2F0;
	}
	return 0x8207C2F0;
} // Block from 8207C2E0h-8207C2F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2F0h
// Function '?InternalScalerSetup@D3D@@YAHPAVCDevice@1@KKKKKAAW4_D3DFILTER_TYPE@@PBU_D3DFILTER_PARAMETERS@@12PAU_HARDWARE_SCALER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2F0);
		  /* 8207C2F0h */ case    0:  		/* lfs FR12, <#[R9 + 4672]> */
		/* 8207C2F0h case    0:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R9 + 0x00001240) );
		/* 8207C2F0h case    0:*/		return 0x8207C2F4;
		  /* 8207C2F4h */ case    1:  		/* fmadds FR12, FR0, FR13, FR12 */
		/* 8207C2F4h case    1:*/		cpu::op::fmadds<0>(regs,&regs.FR12,regs.FR0,regs.FR13,regs.FR12);
		/* 8207C2F4h case    1:*/		return 0x8207C2F8;
		  /* 8207C2F8h */ case    2:  		/* lfs FR13, <#[R8 + 8444]> */
		/* 8207C2F8h case    2:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x000020FC) );
		/* 8207C2F8h case    2:*/		return 0x8207C2FC;
	}
	return 0x8207C2FC;
} // Block from 8207C2F0h-8207C2FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C2FC);
		  /* 8207C2FCh */ case    0:  		/* fmadds FR2, FR12, FR0, FR13 */
		/* 8207C2FCh case    0:*/		cpu::op::fmadds<0>(regs,&regs.FR2,regs.FR12,regs.FR0,regs.FR13);
		/* 8207C2FCh case    0:*/		return 0x8207C300;
		  /* 8207C300h */ case    1:  		/* b 12 */
		/* 8207C300h case    1:*/		return 0x8207C30C;
		/* 8207C300h case    1:*/		return 0x8207C304;
	}
	return 0x8207C304;
} // Block from 8207C2FCh-8207C304h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207C304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C304);
		  /* 8207C304h */ case    0:  		/* lis R11, -32256 */
		/* 8207C304h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C304h case    0:*/		return 0x8207C308;
		  /* 8207C308h */ case    1:  		/* lfs FR2, <#[R11 + 1816]> */
		/* 8207C308h case    1:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R11 + 0x00000718) );
		/* 8207C308h case    1:*/		return 0x8207C30C;
	}
	return 0x8207C30C;
} // Block from 8207C304h-8207C30Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207C30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C30C);
		  /* 8207C30Ch */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 8207C30Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8207C30Ch case    0:*/		return 0x8207C310;
		  /* 8207C310h */ case    1:  		/* li R3, 7 */
		/* 8207C310h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x7);
		/* 8207C310h case    1:*/		return 0x8207C314;
		  /* 8207C314h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8207C314h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207C31C;  }
		/* 8207C314h case    2:*/		return 0x8207C318;
		  /* 8207C318h */ case    3:  		/* mr R3, R5 */
		/* 8207C318h case    3:*/		regs.R3 = regs.R5;
		/* 8207C318h case    3:*/		return 0x8207C31C;
	}
	return 0x8207C31C;
} // Block from 8207C30Ch-8207C31Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C31C);
		  /* 8207C31Ch */ case    0:  		/* addi R9, R1, 112 */
		/* 8207C31Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8207C31Ch case    0:*/		return 0x8207C320;
		  /* 8207C320h */ case    1:  		/* li R6, 1 */
		/* 8207C320h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8207C320h case    1:*/		return 0x8207C324;
		  /* 8207C324h */ case    2:  		/* mr R5, R30 */
		/* 8207C324h case    2:*/		regs.R5 = regs.R30;
		/* 8207C324h case    2:*/		return 0x8207C328;
		  /* 8207C328h */ case    3:  		/* li R4, 16 */
		/* 8207C328h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 8207C328h case    3:*/		return 0x8207C32C;
		  /* 8207C32Ch */ case    4:  		/* bl -1764 */
		/* 8207C32Ch case    4:*/		regs.LR = 0x8207C330; return 0x8207BC48;
		/* 8207C32Ch case    4:*/		return 0x8207C330;
		  /* 8207C330h */ case    5:  		/* li R6, 16 */
		/* 8207C330h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 8207C330h case    5:*/		return 0x8207C334;
		  /* 8207C334h */ case    6:  		/* mr R5, R30 */
		/* 8207C334h case    6:*/		regs.R5 = regs.R30;
		/* 8207C334h case    6:*/		return 0x8207C338;
		  /* 8207C338h */ case    7:  		/* addi R4, R31, 8 */
		/* 8207C338h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x8);
		/* 8207C338h case    7:*/		return 0x8207C33C;
		  /* 8207C33Ch */ case    8:  		/* addi R3, R1, 112 */
		/* 8207C33Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8207C33Ch case    8:*/		return 0x8207C340;
		  /* 8207C340h */ case    9:  		/* bl -4128 */
		/* 8207C340h case    9:*/		regs.LR = 0x8207C344; return 0x8207B320;
		/* 8207C340h case    9:*/		return 0x8207C344;
		  /* 8207C344h */ case   10:  		/* addi R1, R1, 784 */
		/* 8207C344h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x310);
		/* 8207C344h case   10:*/		return 0x8207C348;
		  /* 8207C348h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207C348h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207C348h case   11:*/		return 0x8207C34C;
		  /* 8207C34Ch */ case   12:  		/* mtspr LR, R12 */
		/* 8207C34Ch case   12:*/		regs.LR = regs.R12;
		/* 8207C34Ch case   12:*/		return 0x8207C350;
		  /* 8207C350h */ case   13:  		/* ld R30, <#[R1 - 24]> */
		/* 8207C350h case   13:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207C350h case   13:*/		return 0x8207C354;
		  /* 8207C354h */ case   14:  		/* ld R31, <#[R1 - 16]> */
		/* 8207C354h case   14:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207C354h case   14:*/		return 0x8207C358;
		  /* 8207C358h */ case   15:  		/* bclr 20, CR0_LT */
		/* 8207C358h case   15:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207C358h case   15:*/		return 0x8207C35C;
	}
	return 0x8207C35C;
} // Block from 8207C31Ch-8207C35Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207C35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C35C);
		  /* 8207C35Ch */ case    0:  		/* nop */
		/* 8207C35Ch case    0:*/		cpu::op::nop();
		/* 8207C35Ch case    0:*/		return 0x8207C360;
	}
	return 0x8207C360;
} // Block from 8207C35Ch-8207C360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C360);
		  /* 8207C360h */ case    0:  		/* mfspr R12, LR */
		/* 8207C360h case    0:*/		regs.R12 = regs.LR;
		/* 8207C360h case    0:*/		return 0x8207C364;
		  /* 8207C364h */ case    1:  		/* bl 85692 */
		/* 8207C364h case    1:*/		regs.LR = 0x8207C368; return 0x82091220;
		/* 8207C364h case    1:*/		return 0x8207C368;
		  /* 8207C368h */ case    2:  		/* stfd FR29, <#[R1 - 176]> */
		/* 8207C368h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 8207C368h case    2:*/		return 0x8207C36C;
		  /* 8207C36Ch */ case    3:  		/* stfd FR30, <#[R1 - 168]> */
		/* 8207C36Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8207C36Ch case    3:*/		return 0x8207C370;
		  /* 8207C370h */ case    4:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8207C370h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8207C370h case    4:*/		return 0x8207C374;
		  /* 8207C374h */ case    5:  		/* stwu R1, <#[R1 - 320]> */
		/* 8207C374h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 8207C374h case    5:*/		return 0x8207C378;
		  /* 8207C378h */ case    6:  		/* mr R25, R3 */
		/* 8207C378h case    6:*/		regs.R25 = regs.R3;
		/* 8207C378h case    6:*/		return 0x8207C37C;
		  /* 8207C37Ch */ case    7:  		/* stw R10, <#[R1 + 396]> */
		/* 8207C37Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000018C) );
		/* 8207C37Ch case    7:*/		return 0x8207C380;
		  /* 8207C380h */ case    8:  		/* addi R3, R1, 96 */
		/* 8207C380h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8207C380h case    8:*/		return 0x8207C384;
		  /* 8207C384h */ case    9:  		/* mr R31, R4 */
		/* 8207C384h case    9:*/		regs.R31 = regs.R4;
		/* 8207C384h case    9:*/		return 0x8207C388;
		  /* 8207C388h */ case   10:  		/* mr R30, R5 */
		/* 8207C388h case   10:*/		regs.R30 = regs.R5;
		/* 8207C388h case   10:*/		return 0x8207C38C;
		  /* 8207C38Ch */ case   11:  		/* mr R27, R6 */
		/* 8207C38Ch case   11:*/		regs.R27 = regs.R6;
		/* 8207C38Ch case   11:*/		return 0x8207C390;
		  /* 8207C390h */ case   12:  		/* mr R26, R7 */
		/* 8207C390h case   12:*/		regs.R26 = regs.R7;
		/* 8207C390h case   12:*/		return 0x8207C394;
		  /* 8207C394h */ case   13:  		/* mr R19, R8 */
		/* 8207C394h case   13:*/		regs.R19 = regs.R8;
		/* 8207C394h case   13:*/		return 0x8207C398;
		  /* 8207C398h */ case   14:  		/* mr R14, R9 */
		/* 8207C398h case   14:*/		regs.R14 = regs.R9;
		/* 8207C398h case   14:*/		return 0x8207C39C;
		  /* 8207C39Ch */ case   15:  		/* bl 2034924 */
		/* 8207C39Ch case   15:*/		regs.LR = 0x8207C3A0; return 0x8226D088;
		/* 8207C39Ch case   15:*/		return 0x8207C3A0;
		  /* 8207C3A0h */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 8207C3A0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8207C3A0h case   16:*/		return 0x8207C3A4;
		  /* 8207C3A4h */ case   17:  		/* lwz R29, <#[R1 + 104]> */
		/* 8207C3A4h case   17:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 8207C3A4h case   17:*/		return 0x8207C3A8;
		  /* 8207C3A8h */ case   18:  		/* cntlzw R11, R29 */
		/* 8207C3A8h case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R29);
		/* 8207C3A8h case   18:*/		return 0x8207C3AC;
		  /* 8207C3ACh */ case   19:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8207C3ACh case   19:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8207C3ACh case   19:*/		return 0x8207C3B0;
		  /* 8207C3B0h */ case   20:  		/* xori R11, R11, 1 */
		/* 8207C3B0h case   20:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207C3B0h case   20:*/		return 0x8207C3B4;
		  /* 8207C3B4h */ case   21:  		/* addi R9, R11, 1 */
		/* 8207C3B4h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8207C3B4h case   21:*/		return 0x8207C3B8;
		  /* 8207C3B8h */ case   22:  		/* bc 4, CR6_EQ, 16 */
		/* 8207C3B8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8207C3C8;  }
		/* 8207C3B8h case   22:*/		return 0x8207C3BC;
		  /* 8207C3BCh */ case   23:  		/* cmplwi CR6, R30, 0 */
		/* 8207C3BCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8207C3BCh case   23:*/		return 0x8207C3C0;
		  /* 8207C3C0h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 8207C3C0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8207C3C8;  }
		/* 8207C3C0h case   24:*/		return 0x8207C3C4;
		  /* 8207C3C4h */ case   25:  		/* mr R30, R19 */
		/* 8207C3C4h case   25:*/		regs.R30 = regs.R19;
		/* 8207C3C4h case   25:*/		return 0x8207C3C8;
	}
	return 0x8207C3C8;
} // Block from 8207C360h-8207C3C8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207C3C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C3C8);
		  /* 8207C3C8h */ case    0:  		/* lwz R20, <#[R1 + 404]> */
		/* 8207C3C8h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000194) );
		/* 8207C3C8h case    0:*/		return 0x8207C3CC;
		  /* 8207C3CCh */ case    1:  		/* rlwinm R23, R27, 16, 16, 31 */
		/* 8207C3CCh case    1:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R23,regs.R27);
		/* 8207C3CCh case    1:*/		return 0x8207C3D0;
		  /* 8207C3D0h */ case    2:  		/* lwz R17, <#[R25 + 21960]> */
		/* 8207C3D0h case    2:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R25 + 0x000055C8) );
		/* 8207C3D0h case    2:*/		return 0x8207C3D4;
		  /* 8207C3D4h */ case    3:  		/* rlwinm R18, R31, 16, 16, 31 */
		/* 8207C3D4h case    3:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R18,regs.R31);
		/* 8207C3D4h case    3:*/		return 0x8207C3D8;
		  /* 8207C3D8h */ case    4:  		/* lwz R15, <#[R25 + 21956]> */
		/* 8207C3D8h case    4:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R25 + 0x000055C4) );
		/* 8207C3D8h case    4:*/		return 0x8207C3DC;
		  /* 8207C3DCh */ case    5:  		/* rlwinm R16, R31, 0, 16, 31 */
		/* 8207C3DCh case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R16,regs.R31);
		/* 8207C3DCh case    5:*/		return 0x8207C3E0;
		  /* 8207C3E0h */ case    6:  		/* rlwinm R28, R30, 16, 16, 31 */
		/* 8207C3E0h case    6:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R28,regs.R30);
		/* 8207C3E0h case    6:*/		return 0x8207C3E4;
		  /* 8207C3E4h */ case    7:  		/* rlwinm R24, R30, 0, 16, 31 */
		/* 8207C3E4h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R24,regs.R30);
		/* 8207C3E4h case    7:*/		return 0x8207C3E8;
		  /* 8207C3E8h */ case    8:  		/* lwz R11, <#[R20]> */
		/* 8207C3E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8207C3E8h case    8:*/		return 0x8207C3EC;
		  /* 8207C3ECh */ case    9:  		/* rlwinm R27, R27, 0, 16, 31 */
		/* 8207C3ECh case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R27,regs.R27);
		/* 8207C3ECh case    9:*/		return 0x8207C3F0;
		  /* 8207C3F0h */ case   10:  		/* rlwinm R22, R26, 16, 16, 31 */
		/* 8207C3F0h case   10:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R22,regs.R26);
		/* 8207C3F0h case   10:*/		return 0x8207C3F4;
		  /* 8207C3F4h */ case   11:  		/* rlwinm R21, R26, 0, 16, 31 */
		/* 8207C3F4h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R21,regs.R26);
		/* 8207C3F4h case   11:*/		return 0x8207C3F8;
		  /* 8207C3F8h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 8207C3F8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207C3F8h case   12:*/		return 0x8207C3FC;
		  /* 8207C3FCh */ case   13:  		/* bc 4, CR6_EQ, 40 */
		/* 8207C3FCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x8207C424;  }
		/* 8207C3FCh case   13:*/		return 0x8207C400;
		  /* 8207C400h */ case   14:  		/* cmplw CR6, R28, R22 */
		/* 8207C400h case   14:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R22);
		/* 8207C400h case   14:*/		return 0x8207C404;
		  /* 8207C404h */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 8207C404h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8207C410;  }
		/* 8207C404h case   15:*/		return 0x8207C408;
		  /* 8207C408h */ case   16:  		/* li R11, 7 */
		/* 8207C408h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 8207C408h case   16:*/		return 0x8207C40C;
		  /* 8207C40Ch */ case   17:  		/* b 20 */
		/* 8207C40Ch case   17:*/		return 0x8207C420;
		/* 8207C40Ch case   17:*/		return 0x8207C410;
	}
	return 0x8207C410;
} // Block from 8207C3C8h-8207C410h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207C410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C410);
		  /* 8207C410h */ case    0:  		/* subfc R11, R22, R28 */
		/* 8207C410h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R22,regs.R28);
		/* 8207C410h case    0:*/		return 0x8207C414;
		  /* 8207C414h */ case    1:  		/* subfe R11, R11, R11 */
		/* 8207C414h case    1:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8207C414h case    1:*/		return 0x8207C418;
		  /* 8207C418h */ case    2:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 8207C418h case    2:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 8207C418h case    2:*/		return 0x8207C41C;
		  /* 8207C41Ch */ case    3:  		/* addi R11, R11, 5 */
		/* 8207C41Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 8207C41Ch case    3:*/		return 0x8207C420;
	}
	return 0x8207C420;
} // Block from 8207C410h-8207C420h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C420);
		  /* 8207C420h */ case    0:  		/* stw R11, <#[R20]> */
		/* 8207C420h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8207C420h case    0:*/		return 0x8207C424;
	}
	return 0x8207C424;
} // Block from 8207C420h-8207C424h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C424);
		  /* 8207C424h */ case    0:  		/* lwz R11, <#[R14]> */
		/* 8207C424h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8207C424h case    0:*/		return 0x8207C428;
		  /* 8207C428h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8207C428h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207C428h case    1:*/		return 0x8207C42C;
		  /* 8207C42Ch */ case    2:  		/* bc 4, CR6_EQ, 60 */
		/* 8207C42Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207C468;  }
		/* 8207C42Ch case    2:*/		return 0x8207C430;
		  /* 8207C430h */ case    3:  		/* divwu R11, R21, R9 */
		/* 8207C430h case    3:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R21,regs.R9);
		/* 8207C430h case    3:*/		return 0x8207C434;
		  /* 8207C434h */ case    4:  		/* twi 6, R9, 0 */
		/* 8207C434h case    4:*/		cpu::op::tw<6>(regs, 0x8207C434, regs.R9, 0x00000000);
		/* 8207C434h case    4:*/		return 0x8207C438;
		  /* 8207C438h */ case    5:  		/* cmplw CR6, R24, R11 */
		/* 8207C438h case    5:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 8207C438h case    5:*/		return 0x8207C43C;
		  /* 8207C43Ch */ case    6:  		/* bc 4, CR6_EQ, 24 */
		/* 8207C43Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8207C454;  }
		/* 8207C43Ch case    6:*/		return 0x8207C440;
		  /* 8207C440h */ case    7:  		/* subfic R11, R29, 0 */
		/* 8207C440h case    7:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R29,0x0);
		/* 8207C440h case    7:*/		return 0x8207C444;
		  /* 8207C444h */ case    8:  		/* subfe R11, R11, R11 */
		/* 8207C444h case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8207C444h case    8:*/		return 0x8207C448;
		  /* 8207C448h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8207C448h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8207C448h case    9:*/		return 0x8207C44C;
		  /* 8207C44Ch */ case   10:  		/* addi R11, R11, 7 */
		/* 8207C44Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x7);
		/* 8207C44Ch case   10:*/		return 0x8207C450;
		  /* 8207C450h */ case   11:  		/* b 20 */
		/* 8207C450h case   11:*/		return 0x8207C464;
		/* 8207C450h case   11:*/		return 0x8207C454;
	}
	return 0x8207C454;
} // Block from 8207C424h-8207C454h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207C454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C454);
		  /* 8207C454h */ case    0:  		/* subfc R11, R11, R24 */
		/* 8207C454h case    0:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 8207C454h case    0:*/		return 0x8207C458;
		  /* 8207C458h */ case    1:  		/* subfe R11, R11, R11 */
		/* 8207C458h case    1:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8207C458h case    1:*/		return 0x8207C45C;
		  /* 8207C45Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 8207C45Ch case    2:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 8207C45Ch case    2:*/		return 0x8207C460;
		  /* 8207C460h */ case    3:  		/* addi R11, R11, 5 */
		/* 8207C460h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 8207C460h case    3:*/		return 0x8207C464;
	}
	return 0x8207C464;
} // Block from 8207C454h-8207C464h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C464);
		  /* 8207C464h */ case    0:  		/* stw R11, <#[R14]> */
		/* 8207C464h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8207C464h case    0:*/		return 0x8207C468;
	}
	return 0x8207C468;
} // Block from 8207C464h-8207C468h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207C468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C468);
		  /* 8207C468h */ case    0:  		/* rldicl R11, R22, 0, 32 */
		/* 8207C468h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R22);
		/* 8207C468h case    0:*/		return 0x8207C46C;
		  /* 8207C46Ch */ case    1:  		/* rldicl R10, R28, 0, 32 */
		/* 8207C46Ch case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R28);
		/* 8207C46Ch case    1:*/		return 0x8207C470;
		  /* 8207C470h */ case    2:  		/* std R11, <#[R1 + 80]> */
		/* 8207C470h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C470h case    2:*/		return 0x8207C474;
		  /* 8207C474h */ case    3:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207C474h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C474h case    3:*/		return 0x8207C478;
		  /* 8207C478h */ case    4:  		/* std R10, <#[R1 + 80]> */
		/* 8207C478h case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C478h case    4:*/		return 0x8207C47C;
		  /* 8207C47Ch */ case    5:  		/* lfd FR13, <#[R1 + 80]> */
		/* 8207C47Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C47Ch case    5:*/		return 0x8207C480;
		  /* 8207C480h */ case    6:  		/* fcfid FR0, FR0 */
		/* 8207C480h case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C480h case    6:*/		return 0x8207C484;
		  /* 8207C484h */ case    7:  		/* lis R11, -32256 */
		/* 8207C484h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C484h case    7:*/		return 0x8207C488;
		  /* 8207C488h */ case    8:  		/* fcfid FR13, FR13 */
		/* 8207C488h case    8:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C488h case    8:*/		return 0x8207C48C;
		  /* 8207C48Ch */ case    9:  		/* lis R10, -32256 */
		/* 8207C48Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207C48Ch case    9:*/		return 0x8207C490;
		  /* 8207C490h */ case   10:  		/* frsp FR0, FR0 */
		/* 8207C490h case   10:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C490h case   10:*/		return 0x8207C494;
		  /* 8207C494h */ case   11:  		/* lfs FR11, <#[R11 + 8444]> */
		/* 8207C494h case   11:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R11 + 0x000020FC) );
		/* 8207C494h case   11:*/		return 0x8207C498;
		  /* 8207C498h */ case   12:  		/* lfd FR10, <#[R10 + 8824]> */
		/* 8207C498h case   12:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R10 + 0x00002278) );
		/* 8207C498h case   12:*/		return 0x8207C49C;
		  /* 8207C49Ch */ case   13:  		/* frsp FR13, FR13 */
		/* 8207C49Ch case   13:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C49Ch case   13:*/		return 0x8207C4A0;
		  /* 8207C4A0h */ case   14:  		/* fdivs FR29, FR13, FR0 */
		/* 8207C4A0h case   14:*/		cpu::op::fdivs<0>(regs,&regs.FR29,regs.FR13,regs.FR0);
		/* 8207C4A0h case   14:*/		return 0x8207C4A4;
		  /* 8207C4A4h */ case   15:  		/* fcmpu CR6, FR29, FR11 */
		/* 8207C4A4h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR11);
		/* 8207C4A4h case   15:*/		return 0x8207C4A8;
		  /* 8207C4A8h */ case   16:  		/* bc 12, CR6_LT, 16 */
		/* 8207C4A8h case   16:*/		if ( regs.CR[6].lt ) { return 0x8207C4B8;  }
		/* 8207C4A8h case   16:*/		return 0x8207C4AC;
		  /* 8207C4ACh */ case   17:  		/* fcmpu CR6, FR29, FR10 */
		/* 8207C4ACh case   17:*/		cpu::op::fcmpu<6>(regs,regs.FR29,regs.FR10);
		/* 8207C4ACh case   17:*/		return 0x8207C4B0;
		  /* 8207C4B0h */ case   18:  		/* bc 12, CR6_GT, 8 */
		/* 8207C4B0h case   18:*/		if ( regs.CR[6].gt ) { return 0x8207C4B8;  }
		/* 8207C4B0h case   18:*/		return 0x8207C4B4;
		  /* 8207C4B4h */ case   19:  		/* fmr FR29, FR11 */
		/* 8207C4B4h case   19:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR11);
		/* 8207C4B4h case   19:*/		return 0x8207C4B8;
	}
	return 0x8207C4B8;
} // Block from 8207C468h-8207C4B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207C4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C4B8);
		  /* 8207C4B8h */ case    0:  		/* rldicl R11, R24, 0, 32 */
		/* 8207C4B8h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R24);
		/* 8207C4B8h case    0:*/		return 0x8207C4BC;
		  /* 8207C4BCh */ case    1:  		/* lwz R10, <#[R25 + 13992]> */
		/* 8207C4BCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x000036A8) );
		/* 8207C4BCh case    1:*/		return 0x8207C4C0;
		  /* 8207C4C0h */ case    2:  		/* rldicl R8, R21, 0, 32 */
		/* 8207C4C0h case    2:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R21);
		/* 8207C4C0h case    2:*/		return 0x8207C4C4;
		  /* 8207C4C4h */ case    3:  		/* std R11, <#[R1 + 80]> */
		/* 8207C4C4h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4C4h case    3:*/		return 0x8207C4C8;
		  /* 8207C4C8h */ case    4:  		/* rldicl R11, R9, 0, 32 */
		/* 8207C4C8h case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R9);
		/* 8207C4C8h case    4:*/		return 0x8207C4CC;
		  /* 8207C4CCh */ case    5:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 8207C4CCh case    5:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 8207C4CCh case    5:*/		return 0x8207C4D0;
		  /* 8207C4D0h */ case    6:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207C4D0h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4D0h case    6:*/		return 0x8207C4D4;
		  /* 8207C4D4h */ case    7:  		/* std R8, <#[R1 + 80]> */
		/* 8207C4D4h case    7:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4D4h case    7:*/		return 0x8207C4D8;
		  /* 8207C4D8h */ case    8:  		/* lfd FR13, <#[R1 + 80]> */
		/* 8207C4D8h case    8:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4D8h case    8:*/		return 0x8207C4DC;
		  /* 8207C4DCh */ case    9:  		/* std R11, <#[R1 + 80]> */
		/* 8207C4DCh case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4DCh case    9:*/		return 0x8207C4E0;
		  /* 8207C4E0h */ case   10:  		/* lfd FR12, <#[R1 + 80]> */
		/* 8207C4E0h case   10:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C4E0h case   10:*/		return 0x8207C4E4;
		  /* 8207C4E4h */ case   11:  		/* fcfid FR0, FR0 */
		/* 8207C4E4h case   11:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C4E4h case   11:*/		return 0x8207C4E8;
		  /* 8207C4E8h */ case   12:  		/* fcfid FR13, FR13 */
		/* 8207C4E8h case   12:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C4E8h case   12:*/		return 0x8207C4EC;
		  /* 8207C4ECh */ case   13:  		/* lis R8, -32256 */
		/* 8207C4ECh case   13:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C4ECh case   13:*/		return 0x8207C4F0;
		  /* 8207C4F0h */ case   14:  		/* fcfid FR12, FR12 */
		/* 8207C4F0h case   14:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207C4F0h case   14:*/		return 0x8207C4F4;
		  /* 8207C4F4h */ case   15:  		/* lis R11, -32256 */
		/* 8207C4F4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C4F4h case   15:*/		return 0x8207C4F8;
		  /* 8207C4F8h */ case   16:  		/* frsp FR0, FR0 */
		/* 8207C4F8h case   16:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C4F8h case   16:*/		return 0x8207C4FC;
		  /* 8207C4FCh */ case   17:  		/* frsp FR13, FR13 */
		/* 8207C4FCh case   17:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C4FCh case   17:*/		return 0x8207C500;
		  /* 8207C500h */ case   18:  		/* lfs FR30, <#[R11 + 1820]> */
		/* 8207C500h case   18:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x0000071C) );
		/* 8207C500h case   18:*/		return 0x8207C504;
		  /* 8207C504h */ case   19:  		/* frsp FR9, FR12 */
		/* 8207C504h case   19:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR12);
		/* 8207C504h case   19:*/		return 0x8207C508;
		  /* 8207C508h */ case   20:  		/* lfs FR12, <#[R8 + 2752]> */
		/* 8207C508h case   20:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000AC0) );
		/* 8207C508h case   20:*/		return 0x8207C50C;
		  /* 8207C50Ch */ case   21:  		/* fmuls FR9, FR9, FR0 */
		/* 8207C50Ch case   21:*/		cpu::op::fmuls<0>(regs,&regs.FR9,regs.FR9,regs.FR0);
		/* 8207C50Ch case   21:*/		return 0x8207C510;
		  /* 8207C510h */ case   22:  		/* fdivs FR31, FR9, FR13 */
		/* 8207C510h case   22:*/		cpu::op::fdivs<0>(regs,&regs.FR31,regs.FR9,regs.FR13);
		/* 8207C510h case   22:*/		return 0x8207C514;
		  /* 8207C514h */ case   23:  		/* bc 12, CR0_EQ, 80 */
		/* 8207C514h case   23:*/		if ( regs.CR[0].eq ) { return 0x8207C564;  }
		/* 8207C514h case   23:*/		return 0x8207C518;
		  /* 8207C518h */ case   24:  		/* lis R11, -32256 */
		/* 8207C518h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C518h case   24:*/		return 0x8207C51C;
		  /* 8207C51Ch */ case   25:  		/* lis R10, -32256 */
		/* 8207C51Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207C51Ch case   25:*/		return 0x8207C520;
		  /* 8207C520h */ case   26:  		/* lfs FR13, <#[R11 + 4016]> */
		/* 8207C520h case   26:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00000FB0) );
		/* 8207C520h case   26:*/		return 0x8207C524;
		  /* 8207C524h */ case   27:  		/* fmadds FR13, FR0, FR13, FR30 */
		/* 8207C524h case   27:*/		cpu::op::fmadds<0>(regs,&regs.FR13,regs.FR0,regs.FR13,regs.FR30);
		/* 8207C524h case   27:*/		return 0x8207C528;
		  /* 8207C528h */ case   28:  		/* lfs FR0, <#[R10 + 8816]> */
		/* 8207C528h case   28:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00002270) );
		/* 8207C528h case   28:*/		return 0x8207C52C;
		  /* 8207C52Ch */ case   29:  		/* fmuls FR13, FR13, FR12 */
		/* 8207C52Ch case   29:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR13,regs.FR12);
		/* 8207C52Ch case   29:*/		return 0x8207C530;
		  /* 8207C530h */ case   30:  		/* fctidz FR13, FR13 */
		/* 8207C530h case   30:*/		cpu::op::fctidz<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C530h case   30:*/		return 0x8207C534;
		  /* 8207C534h */ case   31:  		/* stfd FR13, <#[R1 + 80]> */
		/* 8207C534h case   31:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C534h case   31:*/		return 0x8207C538;
		  /* 8207C538h */ case   32:  		/* lwz R11, <#[R1 + 84]> */
		/* 8207C538h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207C538h case   32:*/		return 0x8207C53C;
		  /* 8207C53Ch */ case   33:  		/* subf R10, R11, R24 */
		/* 8207C53Ch case   33:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R24);
		/* 8207C53Ch case   33:*/		return 0x8207C540;
		  /* 8207C540h */ case   34:  		/* rlwinm R10, R10, 31, 1, 31 */
		/* 8207C540h case   34:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R10);
		/* 8207C540h case   34:*/		return 0x8207C544;
		  /* 8207C544h */ case   35:  		/* add R11, R10, R11 */
		/* 8207C544h case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207C544h case   35:*/		return 0x8207C548;
		  /* 8207C548h */ case   36:  		/* mullw R11, R11, R9 */
		/* 8207C548h case   36:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207C548h case   36:*/		return 0x8207C54C;
		  /* 8207C54Ch */ case   37:  		/* rldicl R11, R11, 0, 32 */
		/* 8207C54Ch case   37:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207C54Ch case   37:*/		return 0x8207C550;
		  /* 8207C550h */ case   38:  		/* std R11, <#[R1 + 80]> */
		/* 8207C550h case   38:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C550h case   38:*/		return 0x8207C554;
		  /* 8207C554h */ case   39:  		/* lfd FR13, <#[R1 + 80]> */
		/* 8207C554h case   39:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C554h case   39:*/		return 0x8207C558;
		  /* 8207C558h */ case   40:  		/* fcfid FR13, FR13 */
		/* 8207C558h case   40:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C558h case   40:*/		return 0x8207C55C;
		  /* 8207C55Ch */ case   41:  		/* frsp FR13, FR13 */
		/* 8207C55Ch case   41:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C55Ch case   41:*/		return 0x8207C560;
		  /* 8207C560h */ case   42:  		/* fmuls FR31, FR13, FR0 */
		/* 8207C560h case   42:*/		cpu::op::fmuls<0>(regs,&regs.FR31,regs.FR13,regs.FR0);
		/* 8207C560h case   42:*/		return 0x8207C564;
	}
	return 0x8207C564;
} // Block from 8207C4B8h-8207C564h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8207C564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C564);
		  /* 8207C564h */ case    0:  		/* fcmpu CR6, FR31, FR11 */
		/* 8207C564h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR11);
		/* 8207C564h case    0:*/		return 0x8207C568;
		  /* 8207C568h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 8207C568h case    1:*/		if ( regs.CR[6].lt ) { return 0x8207C57C;  }
		/* 8207C568h case    1:*/		return 0x8207C56C;
		  /* 8207C56Ch */ case    2:  		/* fcmpu CR6, FR31, FR10 */
		/* 8207C56Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR10);
		/* 8207C56Ch case    2:*/		return 0x8207C570;
		  /* 8207C570h */ case    3:  		/* bc 12, CR6_GT, 12 */
		/* 8207C570h case    3:*/		if ( regs.CR[6].gt ) { return 0x8207C57C;  }
		/* 8207C570h case    3:*/		return 0x8207C574;
		  /* 8207C574h */ case    4:  		/* fmr FR31, FR11 */
		/* 8207C574h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR11);
		/* 8207C574h case    4:*/		return 0x8207C578;
		  /* 8207C578h */ case    5:  		/* b 72 */
		/* 8207C578h case    5:*/		return 0x8207C5C0;
		/* 8207C578h case    5:*/		return 0x8207C57C;
	}
	return 0x8207C57C;
} // Block from 8207C564h-8207C57Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C57C);
		  /* 8207C57Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207C57Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C57Ch case    0:*/		return 0x8207C580;
		  /* 8207C580h */ case    1:  		/* lfs FR13, <#[R11 + 8532]> */
		/* 8207C580h case    1:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00002154) );
		/* 8207C580h case    1:*/		return 0x8207C584;
		  /* 8207C584h */ case    2:  		/* fcmpu CR6, FR31, FR13 */
		/* 8207C584h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR13);
		/* 8207C584h case    2:*/		return 0x8207C588;
		  /* 8207C588h */ case    3:  		/* bc 12, CR6_LT, 28 */
		/* 8207C588h case    3:*/		if ( regs.CR[6].lt ) { return 0x8207C5A4;  }
		/* 8207C588h case    3:*/		return 0x8207C58C;
		  /* 8207C58Ch */ case    4:  		/* lis R11, -32256 */
		/* 8207C58Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C58Ch case    4:*/		return 0x8207C590;
		  /* 8207C590h */ case    5:  		/* lfd FR0, <#[R11 + 8808]> */
		/* 8207C590h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002268) );
		/* 8207C590h case    5:*/		return 0x8207C594;
		  /* 8207C594h */ case    6:  		/* fcmpu CR6, FR31, FR0 */
		/* 8207C594h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 8207C594h case    6:*/		return 0x8207C598;
		  /* 8207C598h */ case    7:  		/* bc 12, CR6_GT, 12 */
		/* 8207C598h case    7:*/		if ( regs.CR[6].gt ) { return 0x8207C5A4;  }
		/* 8207C598h case    7:*/		return 0x8207C59C;
		  /* 8207C59Ch */ case    8:  		/* fmr FR31, FR13 */
		/* 8207C59Ch case    8:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR13);
		/* 8207C59Ch case    8:*/		return 0x8207C5A0;
		  /* 8207C5A0h */ case    9:  		/* b 32 */
		/* 8207C5A0h case    9:*/		return 0x8207C5C0;
		/* 8207C5A0h case    9:*/		return 0x8207C5A4;
	}
	return 0x8207C5A4;
} // Block from 8207C57Ch-8207C5A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207C5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C5A4);
		  /* 8207C5A4h */ case    0:  		/* fcmpu CR6, FR31, FR12 */
		/* 8207C5A4h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR12);
		/* 8207C5A4h case    0:*/		return 0x8207C5A8;
		  /* 8207C5A8h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 8207C5A8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8207C5C0;  }
		/* 8207C5A8h case    1:*/		return 0x8207C5AC;
		  /* 8207C5ACh */ case    2:  		/* lis R11, -32256 */
		/* 8207C5ACh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C5ACh case    2:*/		return 0x8207C5B0;
		  /* 8207C5B0h */ case    3:  		/* lfd FR0, <#[R11 + 8760]> */
		/* 8207C5B0h case    3:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00002238) );
		/* 8207C5B0h case    3:*/		return 0x8207C5B4;
		  /* 8207C5B4h */ case    4:  		/* fcmpu CR6, FR31, FR0 */
		/* 8207C5B4h case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 8207C5B4h case    4:*/		return 0x8207C5B8;
		  /* 8207C5B8h */ case    5:  		/* bc 12, CR6_GT, 8 */
		/* 8207C5B8h case    5:*/		if ( regs.CR[6].gt ) { return 0x8207C5C0;  }
		/* 8207C5B8h case    5:*/		return 0x8207C5BC;
		  /* 8207C5BCh */ case    6:  		/* fmr FR31, FR12 */
		/* 8207C5BCh case    6:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR12);
		/* 8207C5BCh case    6:*/		return 0x8207C5C0;
	}
	return 0x8207C5C0;
} // Block from 8207C5A4h-8207C5C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207C5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C5C0);
		  /* 8207C5C0h */ case    0:  		/* lis R11, -32256 */
		/* 8207C5C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C5C0h case    0:*/		return 0x8207C5C4;
		  /* 8207C5C4h */ case    1:  		/* lwz R9, <#[R1 + 124]> */
		/* 8207C5C4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207C5C4h case    1:*/		return 0x8207C5C8;
		  /* 8207C5C8h */ case    2:  		/* twi 6, R9, 0 */
		/* 8207C5C8h case    2:*/		cpu::op::tw<6>(regs, 0x8207C5C8, regs.R9, 0x00000000);
		/* 8207C5C8h case    2:*/		return 0x8207C5CC;
		  /* 8207C5CCh */ case    3:  		/* lwz R11, <#[R11 + 1164]> */
		/* 8207C5CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000048C) );
		/* 8207C5CCh case    3:*/		return 0x8207C5D0;
		  /* 8207C5D0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 8207C5D0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207C5D0h case    4:*/		return 0x8207C5D4;
		  /* 8207C5D4h */ case    5:  		/* divwu R11, R10, R9 */
		/* 8207C5D4h case    5:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 8207C5D4h case    5:*/		return 0x8207C5D8;
		  /* 8207C5D8h */ case    6:  		/* rlwinm R26, R11, 1, 0, 30 */
		/* 8207C5D8h case    6:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R26,regs.R11);
		/* 8207C5D8h case    6:*/		return 0x8207C5DC;
		  /* 8207C5DCh */ case    7:  		/* cmplwi CR6, R26, 10 */
		/* 8207C5DCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x0000000A);
		/* 8207C5DCh case    7:*/		return 0x8207C5E0;
		  /* 8207C5E0h */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 8207C5E0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8207C5E8;  }
		/* 8207C5E0h case    8:*/		return 0x8207C5E4;
		  /* 8207C5E4h */ case    9:  		/* li R26, 10 */
		/* 8207C5E4h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0xA);
		/* 8207C5E4h case    9:*/		return 0x8207C5E8;
	}
	return 0x8207C5E8;
} // Block from 8207C5C0h-8207C5E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207C5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C5E8);
		  /* 8207C5E8h */ case    0:  		/* li R11, 7680 */
		/* 8207C5E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1E00);
		/* 8207C5E8h case    0:*/		return 0x8207C5EC;
		  /* 8207C5ECh */ case    1:  		/* twi 6, R28, 0 */
		/* 8207C5ECh case    1:*/		cpu::op::tw<6>(regs, 0x8207C5EC, regs.R28, 0x00000000);
		/* 8207C5ECh case    1:*/		return 0x8207C5F0;
		  /* 8207C5F0h */ case    2:  		/* divwu R11, R11, R28 */
		/* 8207C5F0h case    2:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8207C5F0h case    2:*/		return 0x8207C5F4;
		  /* 8207C5F4h */ case    3:  		/* addi R30, R11, -1 */
		/* 8207C5F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFF);
		/* 8207C5F4h case    3:*/		return 0x8207C5F8;
		  /* 8207C5F8h */ case    4:  		/* li R11, 6 */
		/* 8207C5F8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8207C5F8h case    4:*/		return 0x8207C5FC;
		  /* 8207C5FCh */ case    5:  		/* cmplwi CR6, R30, 6 */
		/* 8207C5FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 8207C5FCh case    5:*/		return 0x8207C600;
		  /* 8207C600h */ case    6:  		/* bc 12, CR6_GT, 8 */
		/* 8207C600h case    6:*/		if ( regs.CR[6].gt ) { return 0x8207C608;  }
		/* 8207C600h case    6:*/		return 0x8207C604;
		  /* 8207C604h */ case    7:  		/* mr R11, R30 */
		/* 8207C604h case    7:*/		regs.R11 = regs.R30;
		/* 8207C604h case    7:*/		return 0x8207C608;
	}
	return 0x8207C608;
} // Block from 8207C5E8h-8207C608h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207C608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C608);
		  /* 8207C608h */ case    0:  		/* rldicl R10, R10, 0, 32 */
		/* 8207C608h case    0:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8207C608h case    0:*/		return 0x8207C60C;
		  /* 8207C60Ch */ case    1:  		/* rldicl R9, R9, 0, 32 */
		/* 8207C60Ch case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 8207C60Ch case    1:*/		return 0x8207C610;
		  /* 8207C610h */ case    2:  		/* std R10, <#[R1 + 88]> */
		/* 8207C610h case    2:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C610h case    2:*/		return 0x8207C614;
		  /* 8207C614h */ case    3:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207C614h case    3:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C614h case    3:*/		return 0x8207C618;
		  /* 8207C618h */ case    4:  		/* std R9, <#[R1 + 80]> */
		/* 8207C618h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C618h case    4:*/		return 0x8207C61C;
		  /* 8207C61Ch */ case    5:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207C61Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C61Ch case    5:*/		return 0x8207C620;
		  /* 8207C620h */ case    6:  		/* fcfid FR0, FR0 */
		/* 8207C620h case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C620h case    6:*/		return 0x8207C624;
		  /* 8207C624h */ case    7:  		/* fcfid FR13, FR13 */
		/* 8207C624h case    7:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C624h case    7:*/		return 0x8207C628;
		  /* 8207C628h */ case    8:  		/* frsp FR12, FR0 */
		/* 8207C628h case    8:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR0);
		/* 8207C628h case    8:*/		return 0x8207C62C;
		  /* 8207C62Ch */ case    9:  		/* frsp FR0, FR13 */
		/* 8207C62Ch case    9:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR13);
		/* 8207C62Ch case    9:*/		return 0x8207C630;
		  /* 8207C630h */ case   10:  		/* fmuls FR13, FR12, FR29 */
		/* 8207C630h case   10:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR12,regs.FR29);
		/* 8207C630h case   10:*/		return 0x8207C634;
		  /* 8207C634h */ case   11:  		/* fdivs FR12, FR0, FR13 */
		/* 8207C634h case   11:*/		cpu::op::fdivs<0>(regs,&regs.FR12,regs.FR0,regs.FR13);
		/* 8207C634h case   11:*/		return 0x8207C638;
		  /* 8207C638h */ case   12:  		/* fctidz FR12, FR12 */
		/* 8207C638h case   12:*/		cpu::op::fctidz<0>(regs,&regs.FR12,regs.FR12);
		/* 8207C638h case   12:*/		return 0x8207C63C;
		  /* 8207C63Ch */ case   13:  		/* stfd FR12, <#[R1 + 88]> */
		/* 8207C63Ch case   13:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C63Ch case   13:*/		return 0x8207C640;
		  /* 8207C640h */ case   14:  		/* lwz R10, <#[R1 + 92]> */
		/* 8207C640h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C640h case   14:*/		return 0x8207C644;
		  /* 8207C644h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 8207C644h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207C644h case   15:*/		return 0x8207C648;
		  /* 8207C648h */ case   16:  		/* bc 4, CR6_LT, 20 */
		/* 8207C648h case   16:*/		if ( !regs.CR[6].lt ) { return 0x8207C65C;  }
		/* 8207C648h case   16:*/		return 0x8207C64C;
		  /* 8207C64Ch */ case   17:  		/* cmplwi CR6, R30, 6 */
		/* 8207C64Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000006);
		/* 8207C64Ch case   17:*/		return 0x8207C650;
		  /* 8207C650h */ case   18:  		/* bc 4, CR6_GT, 28 */
		/* 8207C650h case   18:*/		if ( !regs.CR[6].gt ) { return 0x8207C66C;  }
		/* 8207C650h case   18:*/		return 0x8207C654;
		  /* 8207C654h */ case   19:  		/* li R30, 6 */
		/* 8207C654h case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 8207C654h case   19:*/		return 0x8207C658;
		  /* 8207C658h */ case   20:  		/* b 20 */
		/* 8207C658h case   20:*/		return 0x8207C66C;
		/* 8207C658h case   20:*/		return 0x8207C65C;
	}
	return 0x8207C65C;
} // Block from 8207C608h-8207C65Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207C65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C65C);
		  /* 8207C65Ch */ case    0:  		/* fdivs FR0, FR0, FR13 */
		/* 8207C65Ch case    0:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8207C65Ch case    0:*/		return 0x8207C660;
		  /* 8207C660h */ case    1:  		/* fctidz FR0, FR0 */
		/* 8207C660h case    1:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C660h case    1:*/		return 0x8207C664;
		  /* 8207C664h */ case    2:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8207C664h case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C664h case    2:*/		return 0x8207C668;
		  /* 8207C668h */ case    3:  		/* lwz R30, <#[R1 + 92]> */
		/* 8207C668h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C668h case    3:*/		return 0x8207C66C;
	}
	return 0x8207C66C;
} // Block from 8207C65Ch-8207C66Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207C66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C66C);
		  /* 8207C66Ch */ case    0:  		/* lwz R31, <#[R1 + 420]> */
		/* 8207C66Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000001A4) );
		/* 8207C66Ch case    0:*/		return 0x8207C670;
		  /* 8207C670h */ case    1:  		/* li R5, 1408 */
		/* 8207C670h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x580);
		/* 8207C670h case    1:*/		return 0x8207C674;
		  /* 8207C674h */ case    2:  		/* li R4, 0 */
		/* 8207C674h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207C674h case    2:*/		return 0x8207C678;
		  /* 8207C678h */ case    3:  		/* mr R3, R31 */
		/* 8207C678h case    3:*/		regs.R3 = regs.R31;
		/* 8207C678h case    3:*/		return 0x8207C67C;
		  /* 8207C67Ch */ case    4:  		/* bl 85188 */
		/* 8207C67Ch case    4:*/		regs.LR = 0x8207C680; return 0x82091340;
		/* 8207C67Ch case    4:*/		return 0x8207C680;
		  /* 8207C680h */ case    5:  		/* mr R8, R30 */
		/* 8207C680h case    5:*/		regs.R8 = regs.R30;
		/* 8207C680h case    5:*/		return 0x8207C684;
		  /* 8207C684h */ case    6:  		/* li R9, 1 */
		/* 8207C684h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8207C684h case    6:*/		return 0x8207C688;
		  /* 8207C688h */ case    7:  		/* lwz R5, <#[R14]> */
		/* 8207C688h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x00000000) );
		/* 8207C688h case    7:*/		return 0x8207C68C;
		  /* 8207C68Ch */ case    8:  		/* mr R4, R29 */
		/* 8207C68Ch case    8:*/		regs.R4 = regs.R29;
		/* 8207C68Ch case    8:*/		return 0x8207C690;
		  /* 8207C690h */ case    9:  		/* lwz R6, <#[R1 + 396]> */
		/* 8207C690h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000018C) );
		/* 8207C690h case    9:*/		return 0x8207C694;
		  /* 8207C694h */ case   10:  		/* mr R3, R31 */
		/* 8207C694h case   10:*/		regs.R3 = regs.R31;
		/* 8207C694h case   10:*/		return 0x8207C698;
		  /* 8207C698h */ case   11:  		/* fmr FR1, FR31 */
		/* 8207C698h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8207C698h case   11:*/		return 0x8207C69C;
		  /* 8207C69Ch */ case   12:  		/* addi R30, R31, 652 */
		/* 8207C69Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x28C);
		/* 8207C69Ch case   12:*/		return 0x8207C6A0;
		  /* 8207C6A0h */ case   13:  		/* bl -1568 */
		/* 8207C6A0h case   13:*/		regs.LR = 0x8207C6A4; return 0x8207C080;
		/* 8207C6A0h case   13:*/		return 0x8207C6A4;
		  /* 8207C6A4h */ case   14:  		/* li R9, 0 */
		/* 8207C6A4h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8207C6A4h case   14:*/		return 0x8207C6A8;
		  /* 8207C6A8h */ case   15:  		/* mr R8, R26 */
		/* 8207C6A8h case   15:*/		regs.R8 = regs.R26;
		/* 8207C6A8h case   15:*/		return 0x8207C6AC;
		  /* 8207C6ACh */ case   16:  		/* lwz R5, <#[R20]> */
		/* 8207C6ACh case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000000) );
		/* 8207C6ACh case   16:*/		return 0x8207C6B0;
		  /* 8207C6B0h */ case   17:  		/* mr R4, R29 */
		/* 8207C6B0h case   17:*/		regs.R4 = regs.R29;
		/* 8207C6B0h case   17:*/		return 0x8207C6B4;
		  /* 8207C6B4h */ case   18:  		/* lwz R6, <#[R1 + 412]> */
		/* 8207C6B4h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000019C) );
		/* 8207C6B4h case   18:*/		return 0x8207C6B8;
		  /* 8207C6B8h */ case   19:  		/* mr R3, R30 */
		/* 8207C6B8h case   19:*/		regs.R3 = regs.R30;
		/* 8207C6B8h case   19:*/		return 0x8207C6BC;
		  /* 8207C6BCh */ case   20:  		/* fmr FR1, FR29 */
		/* 8207C6BCh case   20:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 8207C6BCh case   20:*/		return 0x8207C6C0;
		  /* 8207C6C0h */ case   21:  		/* bl -1600 */
		/* 8207C6C0h case   21:*/		regs.LR = 0x8207C6C4; return 0x8207C080;
		/* 8207C6C0h case   21:*/		return 0x8207C6C4;
		  /* 8207C6C4h */ case   22:  		/* li R11, 0 */
		/* 8207C6C4h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207C6C4h case   22:*/		return 0x8207C6C8;
		  /* 8207C6C8h */ case   23:  		/* li R10, 1 */
		/* 8207C6C8h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207C6C8h case   23:*/		return 0x8207C6CC;
		  /* 8207C6CCh */ case   24:  		/* stw R11, <#[R31 + 1348]> */
		/* 8207C6CCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000544) );
		/* 8207C6CCh case   24:*/		return 0x8207C6D0;
		  /* 8207C6D0h */ case   25:  		/* addi R9, R28, 3 */
		/* 8207C6D0h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x3);
		/* 8207C6D0h case   25:*/		return 0x8207C6D4;
		  /* 8207C6D4h */ case   26:  		/* stw R10, <#[R31 + 1360]> */
		/* 8207C6D4h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000550) );
		/* 8207C6D4h case   26:*/		return 0x8207C6D8;
		  /* 8207C6D8h */ case   27:  		/* rlwinm R8, R19, 0, 16, 31 */
		/* 8207C6D8h case   27:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R19);
		/* 8207C6D8h case   27:*/		return 0x8207C6DC;
		  /* 8207C6DCh */ case   28:  		/* rlwinm R10, R9, 30, 2, 31 */
		/* 8207C6DCh case   28:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R9);
		/* 8207C6DCh case   28:*/		return 0x8207C6E0;
		  /* 8207C6E0h */ case   29:  		/* rlwinm R5, R28, 16, 4, 15 */
		/* 8207C6E0h case   29:*/		cpu::op::rlwinm<0,16,4,15>(regs,&regs.R5,regs.R28);
		/* 8207C6E0h case   29:*/		return 0x8207C6E4;
		  /* 8207C6E4h */ case   30:  		/* rlwinm R4, R24, 0, 20, 31 */
		/* 8207C6E4h case   30:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R4,regs.R24);
		/* 8207C6E4h case   30:*/		return 0x8207C6E8;
		  /* 8207C6E8h */ case   31:  		/* rlwinm R30, R16, 0, 20, 31 */
		/* 8207C6E8h case   31:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R30,regs.R16);
		/* 8207C6E8h case   31:*/		return 0x8207C6EC;
		  /* 8207C6ECh */ case   32:  		/* rlwinm R3, R18, 16, 4, 15 */
		/* 8207C6ECh case   32:*/		cpu::op::rlwinm<0,16,4,15>(regs,&regs.R3,regs.R18);
		/* 8207C6ECh case   32:*/		return 0x8207C6F0;
		  /* 8207C6F0h */ case   33:  		/* addi R8, R8, 1 */
		/* 8207C6F0h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8207C6F0h case   33:*/		return 0x8207C6F4;
		  /* 8207C6F4h */ case   34:  		/* addi R10, R10, -1 */
		/* 8207C6F4h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207C6F4h case   34:*/		return 0x8207C6F8;
		  /* 8207C6F8h */ case   35:  		/* or R5, R5, R4 */
		/* 8207C6F8h case   35:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R4);
		/* 8207C6F8h case   35:*/		return 0x8207C6FC;
		  /* 8207C6FCh */ case   36:  		/* or R3, R3, R30 */
		/* 8207C6FCh case   36:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R30);
		/* 8207C6FCh case   36:*/		return 0x8207C700;
		  /* 8207C700h */ case   37:  		/* rlwinm R30, R8, 0, 0, 30 */
		/* 8207C700h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R30,regs.R8);
		/* 8207C700h case   37:*/		return 0x8207C704;
		  /* 8207C704h */ case   38:  		/* rlwinm R4, R10, 0, 22, 31 */
		/* 8207C704h case   38:*/		cpu::op::rlwinm<0,0,22,31>(regs,&regs.R4,regs.R10);
		/* 8207C704h case   38:*/		return 0x8207C708;
		  /* 8207C708h */ case   39:  		/* rlwinm R9, R19, 16, 16, 31 */
		/* 8207C708h case   39:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R9,regs.R19);
		/* 8207C708h case   39:*/		return 0x8207C70C;
		  /* 8207C70Ch */ case   40:  		/* subf R7, R21, R15 */
		/* 8207C70Ch case   40:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R21,regs.R15);
		/* 8207C70Ch case   40:*/		return 0x8207C710;
		  /* 8207C710h */ case   41:  		/* subf R6, R22, R17 */
		/* 8207C710h case   41:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R22,regs.R17);
		/* 8207C710h case   41:*/		return 0x8207C714;
		  /* 8207C714h */ case   42:  		/* subf R7, R27, R7 */
		/* 8207C714h case   42:*/		cpu::op::subf<0>(regs,&regs.R7,regs.R27,regs.R7);
		/* 8207C714h case   42:*/		return 0x8207C718;
		  /* 8207C718h */ case   43:  		/* addi R9, R9, 31 */
		/* 8207C718h case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1F);
		/* 8207C718h case   43:*/		return 0x8207C71C;
		  /* 8207C71Ch */ case   44:  		/* lwz R10, <#[R31]> */
		/* 8207C71Ch case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8207C71Ch case   44:*/		return 0x8207C720;
		  /* 8207C720h */ case   45:  		/* subf R6, R23, R6 */
		/* 8207C720h case   45:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R23,regs.R6);
		/* 8207C720h case   45:*/		return 0x8207C724;
		  /* 8207C724h */ case   46:  		/* rlwinm R28, R9, 0, 0, 26 */
		/* 8207C724h case   46:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R28,regs.R9);
		/* 8207C724h case   46:*/		return 0x8207C728;
		  /* 8207C728h */ case   47:  		/* lwz R9, <#[R31 + 648]> */
		/* 8207C728h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000288) );
		/* 8207C728h case   47:*/		return 0x8207C72C;
		  /* 8207C72Ch */ case   48:  		/* addi R26, R10, -1 */
		/* 8207C72Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFFFFF);
		/* 8207C72Ch case   48:*/		return 0x8207C730;
		  /* 8207C730h */ case   49:  		/* lwz R8, <#[R31 + 652]> */
		/* 8207C730h case   49:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000028C) );
		/* 8207C730h case   49:*/		return 0x8207C734;
		  /* 8207C734h */ case   50:  		/* rlwinm R7, R7, 0, 20, 31 */
		/* 8207C734h case   50:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R7,regs.R7);
		/* 8207C734h case   50:*/		return 0x8207C738;
		  /* 8207C738h */ case   51:  		/* stw R5, <#[R31 + 1356]> */
		/* 8207C738h case   51:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x0000054C) );
		/* 8207C738h case   51:*/		return 0x8207C73C;
		  /* 8207C73Ch */ case   52:  		/* rlwinm R27, R27, 0, 20, 31 */
		/* 8207C73Ch case   52:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R27,regs.R27);
		/* 8207C73Ch case   52:*/		return 0x8207C740;
		  /* 8207C740h */ case   53:  		/* addi R8, R8, -1 */
		/* 8207C740h case   53:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8207C740h case   53:*/		return 0x8207C744;
		  /* 8207C744h */ case   54:  		/* stw R4, <#[R31 + 1404]> */
		/* 8207C744h case   54:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000057C) );
		/* 8207C744h case   54:*/		return 0x8207C748;
		  /* 8207C748h */ case   55:  		/* rlwinm R5, R23, 0, 20, 31 */
		/* 8207C748h case   55:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R5,regs.R23);
		/* 8207C748h case   55:*/		return 0x8207C74C;
		  /* 8207C74Ch */ case   56:  		/* stw R3, <#[R31 + 1352]> */
		/* 8207C74Ch case   56:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000548) );
		/* 8207C74Ch case   56:*/		return 0x8207C750;
		  /* 8207C750h */ case   57:  		/* rlwimi R26, R8, 8, 20, 23 */
		/* 8207C750h case   57:*/		cpu::op::rlwimi<0,8,20,23>(regs,&regs.R26,regs.R8);
		/* 8207C750h case   57:*/		return 0x8207C754;
		  /* 8207C754h */ case   58:  		/* stw R11, <#[R31 + 1332]> */
		/* 8207C754h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000534) );
		/* 8207C754h case   58:*/		return 0x8207C758;
		  /* 8207C758h */ case   59:  		/* rlwinm R6, R6, 0, 20, 31 */
		/* 8207C758h case   59:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R6,regs.R6);
		/* 8207C758h case   59:*/		return 0x8207C75C;
		  /* 8207C75Ch */ case   60:  		/* stw R11, <#[R31 + 1336]> */
		/* 8207C75Ch case   60:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000538) );
		/* 8207C75Ch case   60:*/		return 0x8207C760;
		  /* 8207C760h */ case   61:  		/* andi. R8, R26, 3847 */
		/* 8207C760h case   61:*/		cpu::op::andi<1>(regs,&regs.R8,regs.R26,0xF07);
		/* 8207C760h case   61:*/		return 0x8207C764;
		  /* 8207C764h */ case   62:  		/* stw R28, <#[R31 + 1340]> */
		/* 8207C764h case   62:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000053C) );
		/* 8207C764h case   62:*/		return 0x8207C768;
		  /* 8207C768h */ case   63:  		/* stw R8, <#[R31 + 1364]> */
		/* 8207C768h case   63:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000554) );
		/* 8207C768h case   63:*/		return 0x8207C76C;
		  /* 8207C76Ch */ case   64:  		/* cntlzw R4, R29 */
		/* 8207C76Ch case   64:*/		cpu::op::cntlzw<0>(regs,&regs.R4,regs.R29);
		/* 8207C76Ch case   64:*/		return 0x8207C770;
		  /* 8207C770h */ case   65:  		/* stw R30, <#[R31 + 1344]> */
		/* 8207C770h case   65:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000540) );
		/* 8207C770h case   65:*/		return 0x8207C774;
		  /* 8207C774h */ case   66:  		/* lis R3, 256 */
		/* 8207C774h case   66:*/		cpu::op::lis<0>(regs,&regs.R3,0x100);
		/* 8207C774h case   66:*/		return 0x8207C778;
		  /* 8207C778h */ case   67:  		/* stw R28, <#[R31 + 1320]> */
		/* 8207C778h case   67:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000528) );
		/* 8207C778h case   67:*/		return 0x8207C77C;
		  /* 8207C77Ch */ case   68:  		/* rlwinm R8, R4, 27, 31, 31 */
		/* 8207C77Ch case   68:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R4);
		/* 8207C77Ch case   68:*/		return 0x8207C780;
		  /* 8207C780h */ case   69:  		/* stw R27, <#[R31 + 1304]> */
		/* 8207C780h case   69:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000518) );
		/* 8207C780h case   69:*/		return 0x8207C784;
		  /* 8207C784h */ case   70:  		/* stw R7, <#[R31 + 1308]> */
		/* 8207C784h case   70:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x0000051C) );
		/* 8207C784h case   70:*/		return 0x8207C788;
		  /* 8207C788h */ case   71:  		/* addi R8, R8, 4 */
		/* 8207C788h case   71:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 8207C788h case   71:*/		return 0x8207C78C;
		  /* 8207C78Ch */ case   72:  		/* stw R5, <#[R31 + 1312]> */
		/* 8207C78Ch case   72:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000520) );
		/* 8207C78Ch case   72:*/		return 0x8207C790;
		  /* 8207C790h */ case   73:  		/* stw R6, <#[R31 + 1316]> */
		/* 8207C790h case   73:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000524) );
		/* 8207C790h case   73:*/		return 0x8207C794;
		  /* 8207C794h */ case   74:  		/* slw R8, R9, R8 */
		/* 8207C794h case   74:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 8207C794h case   74:*/		return 0x8207C798;
		  /* 8207C798h */ case   75:  		/* rlwinm R8, R8, 0, 6, 31 */
		/* 8207C798h case   75:*/		cpu::op::rlwinm<0,0,6,31>(regs,&regs.R8,regs.R8);
		/* 8207C798h case   75:*/		return 0x8207C79C;
		  /* 8207C79Ch */ case   76:  		/* lwz R7, <#[R31 + 1300]> */
		/* 8207C79Ch case   76:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000514) );
		/* 8207C79Ch case   76:*/		return 0x8207C7A0;
		  /* 8207C7A0h */ case   77:  		/* stw R8, <#[R31 + 1392]> */
		/* 8207C7A0h case   77:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000570) );
		/* 8207C7A0h case   77:*/		return 0x8207C7A4;
		  /* 8207C7A4h */ case   78:  		/* rlwinm R8, R7, 5, 6, 26 */
		/* 8207C7A4h case   78:*/		cpu::op::rlwinm<0,5,6,26>(regs,&regs.R8,regs.R7);
		/* 8207C7A4h case   78:*/		return 0x8207C7A8;
		  /* 8207C7A8h */ case   79:  		/* stw R3, <#[R31 + 1388]> */
		/* 8207C7A8h case   79:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000056C) );
		/* 8207C7A8h case   79:*/		return 0x8207C7AC;
		  /* 8207C7ACh */ case   80:  		/* stw R8, <#[R31 + 1376]> */
		/* 8207C7ACh case   80:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000560) );
		/* 8207C7ACh case   80:*/		return 0x8207C7B0;
		  /* 8207C7B0h */ case   81:  		/* stw R11, <#[R31 + 1372]> */
		/* 8207C7B0h case   81:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000055C) );
		/* 8207C7B0h case   81:*/		return 0x8207C7B4;
		  /* 8207C7B4h */ case   82:  		/* lis R11, -32256 */
		/* 8207C7B4h case   82:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C7B4h case   82:*/		return 0x8207C7B8;
		  /* 8207C7B8h */ case   83:  		/* lwz R8, <#[R31 + 1300]> */
		/* 8207C7B8h case   83:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000514) );
		/* 8207C7B8h case   83:*/		return 0x8207C7BC;
		  /* 8207C7BCh */ case   84:  		/* cmpwi CR6, R29, 0 */
		/* 8207C7BCh case   84:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8207C7BCh case   84:*/		return 0x8207C7C0;
		  /* 8207C7C0h */ case   85:  		/* std R8, <#[R1 + 88]> */
		/* 8207C7C0h case   85:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C7C0h case   85:*/		return 0x8207C7C4;
		  /* 8207C7C4h */ case   86:  		/* rldicl R10, R10, 0, 32 */
		/* 8207C7C4h case   86:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R10);
		/* 8207C7C4h case   86:*/		return 0x8207C7C8;
		  /* 8207C7C8h */ case   87:  		/* lwz R8, <#[R31 + 652]> */
		/* 8207C7C8h case   87:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000028C) );
		/* 8207C7C8h case   87:*/		return 0x8207C7CC;
		  /* 8207C7CCh */ case   88:  		/* lfd FR0, <#[R1 + 88]> */
		/* 8207C7CCh case   88:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C7CCh case   88:*/		return 0x8207C7D0;
		  /* 8207C7D0h */ case   89:  		/* fcfid FR11, FR0 */
		/* 8207C7D0h case   89:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR0);
		/* 8207C7D0h case   89:*/		return 0x8207C7D4;
		  /* 8207C7D4h */ case   90:  		/* lfs FR12, <#[R11 + 8804]> */
		/* 8207C7D4h case   90:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + 0x00002264) );
		/* 8207C7D4h case   90:*/		return 0x8207C7D8;
		  /* 8207C7D8h */ case   91:  		/* lis R11, -32256 */
		/* 8207C7D8h case   91:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C7D8h case   91:*/		return 0x8207C7DC;
		  /* 8207C7DCh */ case   92:  		/* std R8, <#[R1 + 88]> */
		/* 8207C7DCh case   92:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C7DCh case   92:*/		return 0x8207C7E0;
		  /* 8207C7E0h */ case   93:  		/* lis R8, -32256 */
		/* 8207C7E0h case   93:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207C7E0h case   93:*/		return 0x8207C7E4;
		  /* 8207C7E4h */ case   94:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 8207C7E4h case   94:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 8207C7E4h case   94:*/		return 0x8207C7E8;
		  /* 8207C7E8h */ case   95:  		/* frsp FR11, FR11 */
		/* 8207C7E8h case   95:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 8207C7E8h case   95:*/		return 0x8207C7EC;
		  /* 8207C7ECh */ case   96:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207C7ECh case   96:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C7ECh case   96:*/		return 0x8207C7F0;
		  /* 8207C7F0h */ case   97:  		/* fcfid FR13, FR13 */
		/* 8207C7F0h case   97:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207C7F0h case   97:*/		return 0x8207C7F4;
		  /* 8207C7F4h */ case   98:  		/* frsp FR10, FR13 */
		/* 8207C7F4h case   98:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR13);
		/* 8207C7F4h case   98:*/		return 0x8207C7F8;
		  /* 8207C7F8h */ case   99:  		/* lfs FR13, <#[R8 + 8460]> */
		/* 8207C7F8h case   99:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x0000210C) );
		/* 8207C7F8h case   99:*/		return 0x8207C7FC;
		  /* 8207C7FCh */ case  100:  		/* fmadds FR11, FR11, FR12, FR10 */
		/* 8207C7FCh case  100:*/		cpu::op::fmadds<0>(regs,&regs.FR11,regs.FR11,regs.FR12,regs.FR10);
		/* 8207C7FCh case  100:*/		return 0x8207C800;
		  /* 8207C800h */ case  101:  		/* fadds FR11, FR11, FR0 */
		/* 8207C800h case  101:*/		cpu::op::fadds<0>(regs,&regs.FR11,regs.FR11,regs.FR0);
		/* 8207C800h case  101:*/		return 0x8207C804;
		  /* 8207C804h */ case  102:  		/* fmadds FR11, FR11, FR13, FR30 */
		/* 8207C804h case  102:*/		cpu::op::fmadds<0>(regs,&regs.FR11,regs.FR11,regs.FR13,regs.FR30);
		/* 8207C804h case  102:*/		return 0x8207C808;
		  /* 8207C808h */ case  103:  		/* fctidz FR11, FR11 */
		/* 8207C808h case  103:*/		cpu::op::fctidz<0>(regs,&regs.FR11,regs.FR11);
		/* 8207C808h case  103:*/		return 0x8207C80C;
		  /* 8207C80Ch */ case  104:  		/* stfd FR11, <#[R1 + 88]> */
		/* 8207C80Ch case  104:*/		cpu::mem::store64f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C80Ch case  104:*/		return 0x8207C810;
		  /* 8207C810h */ case  105:  		/* lwz R11, <#[R1 + 92]> */
		/* 8207C810h case  105:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C810h case  105:*/		return 0x8207C814;
		  /* 8207C814h */ case  106:  		/* rlwinm R11, R11, 9, 12, 22 */
		/* 8207C814h case  106:*/		cpu::op::rlwinm<0,9,12,22>(regs,&regs.R11,regs.R11);
		/* 8207C814h case  106:*/		return 0x8207C818;
		  /* 8207C818h */ case  107:  		/* stw R11, <#[R31 + 1380]> */
		/* 8207C818h case  107:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000564) );
		/* 8207C818h case  107:*/		return 0x8207C81C;
		  /* 8207C81Ch */ case  108:  		/* rldicl R11, R9, 0, 32 */
		/* 8207C81Ch case  108:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R9);
		/* 8207C81Ch case  108:*/		return 0x8207C820;
		  /* 8207C820h */ case  109:  		/* bc 12, CR6_EQ, 120 */
		/* 8207C820h case  109:*/		if ( regs.CR[6].eq ) { return 0x8207C898;  }
		/* 8207C820h case  109:*/		return 0x8207C824;
		  /* 8207C824h */ case  110:  		/* std R10, <#[R1 + 88]> */
		/* 8207C824h case  110:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C824h case  110:*/		return 0x8207C828;
		  /* 8207C828h */ case  111:  		/* lis R10, -32256 */
		/* 8207C828h case  111:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207C828h case  111:*/		return 0x8207C82C;
		  /* 8207C82Ch */ case  112:  		/* std R11, <#[R1 + 80]> */
		/* 8207C82Ch case  112:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C82Ch case  112:*/		return 0x8207C830;
		  /* 8207C830h */ case  113:  		/* lis R11, -32256 */
		/* 8207C830h case  113:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207C830h case  113:*/		return 0x8207C834;
		  /* 8207C834h */ case  114:  		/* lfd FR12, <#[R1 + 88]> */
		/* 8207C834h case  114:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C834h case  114:*/		return 0x8207C838;
		  /* 8207C838h */ case  115:  		/* lfd FR11, <#[R1 + 80]> */
		/* 8207C838h case  115:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C838h case  115:*/		return 0x8207C83C;
		  /* 8207C83Ch */ case  116:  		/* fcfid FR12, FR12 */
		/* 8207C83Ch case  116:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 8207C83Ch case  116:*/		return 0x8207C840;
		  /* 8207C840h */ case  117:  		/* fcfid FR9, FR11 */
		/* 8207C840h case  117:*/		cpu::op::fcfid<0>(regs,&regs.FR9,regs.FR11);
		/* 8207C840h case  117:*/		return 0x8207C844;
		  /* 8207C844h */ case  118:  		/* lfs FR11, <#[R10 + 8800]> */
		/* 8207C844h case  118:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R10 + 0x00002260) );
		/* 8207C844h case  118:*/		return 0x8207C848;
		  /* 8207C848h */ case  119:  		/* frsp FR10, FR12 */
		/* 8207C848h case  119:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR12);
		/* 8207C848h case  119:*/		return 0x8207C84C;
		  /* 8207C84Ch */ case  120:  		/* lfs FR12, <#[R11 + 8796]> */
		/* 8207C84Ch case  120:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R11 + 0x0000225C) );
		/* 8207C84Ch case  120:*/		return 0x8207C850;
		  /* 8207C850h */ case  121:  		/* frsp FR9, FR9 */
		/* 8207C850h case  121:*/		cpu::op::frsp<0>(regs,&regs.FR9,regs.FR9);
		/* 8207C850h case  121:*/		return 0x8207C854;
		  /* 8207C854h */ case  122:  		/* fmadds FR12, FR9, FR12, FR10 */
		/* 8207C854h case  122:*/		cpu::op::fmadds<0>(regs,&regs.FR12,regs.FR9,regs.FR12,regs.FR10);
		/* 8207C854h case  122:*/		return 0x8207C858;
	}
	return 0x8207C858;
} // Block from 8207C66Ch-8207C858h (123 instructions)

//////////////////////////////////////////////////////
// Block at 8207C858h
// Function '?InitializeDefaultScalerParameters@D3D@@YAXPAVCDevice@1@KKPBU_D3DPRIVATE_SCALER_PARAMETERS@@PAU3@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C858);
		  /* 8207C858h */ case    0:  		/* fmadds FR11, FR9, FR11, FR10 */
		/* 8207C858h case    0:*/		cpu::op::fmadds<0>(regs,&regs.FR11,regs.FR9,regs.FR11,regs.FR10);
		/* 8207C858h case    0:*/		return 0x8207C85C;
		  /* 8207C85Ch */ case    1:  		/* fadds FR12, FR12, FR0 */
		/* 8207C85Ch case    1:*/		cpu::op::fadds<0>(regs,&regs.FR12,regs.FR12,regs.FR0);
		/* 8207C85Ch case    1:*/		return 0x8207C860;
		  /* 8207C860h */ case    2:  		/* fadds FR0, FR11, FR0 */
		/* 8207C860h case    2:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR11,regs.FR0);
		/* 8207C860h case    2:*/		return 0x8207C864;
		  /* 8207C864h */ case    3:  		/* fmadds FR12, FR12, FR13, FR30 */
		/* 8207C864h case    3:*/		cpu::op::fmadds<0>(regs,&regs.FR12,regs.FR12,regs.FR13,regs.FR30);
		/* 8207C864h case    3:*/		return 0x8207C868;
		  /* 8207C868h */ case    4:  		/* fmadds FR0, FR0, FR13, FR30 */
		/* 8207C868h case    4:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR30);
		/* 8207C868h case    4:*/		return 0x8207C86C;
		  /* 8207C86Ch */ case    5:  		/* fctidz FR13, FR12 */
		/* 8207C86Ch case    5:*/		cpu::op::fctidz<0>(regs,&regs.FR13,regs.FR12);
		/* 8207C86Ch case    5:*/		return 0x8207C870;
		  /* 8207C870h */ case    6:  		/* stfd FR13, <#[R1 + 88]> */
		/* 8207C870h case    6:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C870h case    6:*/		return 0x8207C874;
		  /* 8207C874h */ case    7:  		/* lwz R11, <#[R1 + 92]> */
		/* 8207C874h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C874h case    7:*/		return 0x8207C878;
		  /* 8207C878h */ case    8:  		/* fctidz FR0, FR0 */
		/* 8207C878h case    8:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C878h case    8:*/		return 0x8207C87C;
		  /* 8207C87Ch */ case    9:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8207C87Ch case    9:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C87Ch case    9:*/		return 0x8207C880;
		  /* 8207C880h */ case   10:  		/* lwz R10, <#[R1 + 92]> */
		/* 8207C880h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C880h case   10:*/		return 0x8207C884;
		  /* 8207C884h */ case   11:  		/* rlwinm R11, R11, 9, 13, 22 */
		/* 8207C884h case   11:*/		cpu::op::rlwinm<0,9,13,22>(regs,&regs.R11,regs.R11);
		/* 8207C884h case   11:*/		return 0x8207C888;
		  /* 8207C888h */ case   12:  		/* rlwinm R10, R10, 9, 13, 22 */
		/* 8207C888h case   12:*/		cpu::op::rlwinm<0,9,13,22>(regs,&regs.R10,regs.R10);
		/* 8207C888h case   12:*/		return 0x8207C88C;
		  /* 8207C88Ch */ case   13:  		/* stw R11, <#[R31 + 1400]> */
		/* 8207C88Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000578) );
		/* 8207C88Ch case   13:*/		return 0x8207C890;
		  /* 8207C890h */ case   14:  		/* stw R10, <#[R31 + 1396]> */
		/* 8207C890h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000574) );
		/* 8207C890h case   14:*/		return 0x8207C894;
		  /* 8207C894h */ case   15:  		/* b 68 */
		/* 8207C894h case   15:*/		return 0x8207C8D8;
		/* 8207C894h case   15:*/		return 0x8207C898;
	}
	return 0x8207C898;
} // Block from 8207C858h-8207C898h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207C898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C898);
		  /* 8207C898h */ case    0:  		/* std R11, <#[R1 + 88]> */
		/* 8207C898h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C898h case    0:*/		return 0x8207C89C;
		  /* 8207C89Ch */ case    1:  		/* std R10, <#[R1 + 80]> */
		/* 8207C89Ch case    1:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C89Ch case    1:*/		return 0x8207C8A0;
		  /* 8207C8A0h */ case    2:  		/* lfd FR11, <#[R1 + 88]> */
		/* 8207C8A0h case    2:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C8A0h case    2:*/		return 0x8207C8A4;
		  /* 8207C8A4h */ case    3:  		/* lfd FR10, <#[R1 + 80]> */
		/* 8207C8A4h case    3:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207C8A4h case    3:*/		return 0x8207C8A8;
		  /* 8207C8A8h */ case    4:  		/* fcfid FR11, FR11 */
		/* 8207C8A8h case    4:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 8207C8A8h case    4:*/		return 0x8207C8AC;
		  /* 8207C8ACh */ case    5:  		/* fcfid FR10, FR10 */
		/* 8207C8ACh case    5:*/		cpu::op::fcfid<0>(regs,&regs.FR10,regs.FR10);
		/* 8207C8ACh case    5:*/		return 0x8207C8B0;
		  /* 8207C8B0h */ case    6:  		/* frsp FR11, FR11 */
		/* 8207C8B0h case    6:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 8207C8B0h case    6:*/		return 0x8207C8B4;
		  /* 8207C8B4h */ case    7:  		/* frsp FR10, FR10 */
		/* 8207C8B4h case    7:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR10);
		/* 8207C8B4h case    7:*/		return 0x8207C8B8;
		  /* 8207C8B8h */ case    8:  		/* fmadds FR12, FR11, FR12, FR10 */
		/* 8207C8B8h case    8:*/		cpu::op::fmadds<0>(regs,&regs.FR12,regs.FR11,regs.FR12,regs.FR10);
		/* 8207C8B8h case    8:*/		return 0x8207C8BC;
		  /* 8207C8BCh */ case    9:  		/* fadds FR0, FR12, FR0 */
		/* 8207C8BCh case    9:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR12,regs.FR0);
		/* 8207C8BCh case    9:*/		return 0x8207C8C0;
		  /* 8207C8C0h */ case   10:  		/* fmadds FR0, FR0, FR13, FR30 */
		/* 8207C8C0h case   10:*/		cpu::op::fmadds<0>(regs,&regs.FR0,regs.FR0,regs.FR13,regs.FR30);
		/* 8207C8C0h case   10:*/		return 0x8207C8C4;
		  /* 8207C8C4h */ case   11:  		/* fctidz FR0, FR0 */
		/* 8207C8C4h case   11:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207C8C4h case   11:*/		return 0x8207C8C8;
		  /* 8207C8C8h */ case   12:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8207C8C8h case   12:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8207C8C8h case   12:*/		return 0x8207C8CC;
		  /* 8207C8CCh */ case   13:  		/* lwz R11, <#[R1 + 92]> */
		/* 8207C8CCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C8CCh case   13:*/		return 0x8207C8D0;
		  /* 8207C8D0h */ case   14:  		/* rlwinm R11, R11, 9, 13, 22 */
		/* 8207C8D0h case   14:*/		cpu::op::rlwinm<0,9,13,22>(regs,&regs.R11,regs.R11);
		/* 8207C8D0h case   14:*/		return 0x8207C8D4;
		  /* 8207C8D4h */ case   15:  		/* stw R11, <#[R31 + 1396]> */
		/* 8207C8D4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000574) );
		/* 8207C8D4h case   15:*/		return 0x8207C8D8;
	}
	return 0x8207C8D8;
} // Block from 8207C898h-8207C8D8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207C8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C8D8);
		  /* 8207C8D8h */ case    0:  		/* li R3, 1 */
		/* 8207C8D8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207C8D8h case    0:*/		return 0x8207C8DC;
		  /* 8207C8DCh */ case    1:  		/* addi R1, R1, 320 */
		/* 8207C8DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 8207C8DCh case    1:*/		return 0x8207C8E0;
		  /* 8207C8E0h */ case    2:  		/* lfd FR29, <#[R1 - 176]> */
		/* 8207C8E0h case    2:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF50) );
		/* 8207C8E0h case    2:*/		return 0x8207C8E4;
		  /* 8207C8E4h */ case    3:  		/* lfd FR30, <#[R1 - 168]> */
		/* 8207C8E4h case    3:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8207C8E4h case    3:*/		return 0x8207C8E8;
		  /* 8207C8E8h */ case    4:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8207C8E8h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8207C8E8h case    4:*/		return 0x8207C8EC;
		  /* 8207C8ECh */ case    5:  		/* b 84356 */
		/* 8207C8ECh case    5:*/		return 0x82091270;
		/* 8207C8ECh case    5:*/		return 0x8207C8F0;
	}
	return 0x8207C8F0;
} // Block from 8207C8D8h-8207C8F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207C8F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C8F0);
		  /* 8207C8F0h */ case    0:  		/* mfspr R12, LR */
		/* 8207C8F0h case    0:*/		regs.R12 = regs.LR;
		/* 8207C8F0h case    0:*/		return 0x8207C8F4;
		  /* 8207C8F4h */ case    1:  		/* bl 84312 */
		/* 8207C8F4h case    1:*/		regs.LR = 0x8207C8F8; return 0x8209124C;
		/* 8207C8F4h case    1:*/		return 0x8207C8F8;
		  /* 8207C8F8h */ case    2:  		/* stwu R1, <#[R1 - 2464]> */
		/* 8207C8F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF660) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF660);
		/* 8207C8F8h case    2:*/		return 0x8207C8FC;
		  /* 8207C8FCh */ case    3:  		/* mr R8, R7 */
		/* 8207C8FCh case    3:*/		regs.R8 = regs.R7;
		/* 8207C8FCh case    3:*/		return 0x8207C900;
		  /* 8207C900h */ case    4:  		/* addi R7, R1, 128 */
		/* 8207C900h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 8207C900h case    4:*/		return 0x8207C904;
		  /* 8207C904h */ case    5:  		/* mr R31, R3 */
		/* 8207C904h case    5:*/		regs.R31 = regs.R3;
		/* 8207C904h case    5:*/		return 0x8207C908;
		  /* 8207C908h */ case    6:  		/* mr R29, R4 */
		/* 8207C908h case    6:*/		regs.R29 = regs.R4;
		/* 8207C908h case    6:*/		return 0x8207C90C;
		  /* 8207C90Ch */ case    7:  		/* mr R30, R5 */
		/* 8207C90Ch case    7:*/		regs.R30 = regs.R5;
		/* 8207C90Ch case    7:*/		return 0x8207C910;
		  /* 8207C910h */ case    8:  		/* bl -7008 */
		/* 8207C910h case    8:*/		regs.LR = 0x8207C914; return 0x8207ADB0;
		/* 8207C910h case    8:*/		return 0x8207C914;
		  /* 8207C914h */ case    9:  		/* lwz R9, <#[R1 + 128]> */
		/* 8207C914h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000080) );
		/* 8207C914h case    9:*/		return 0x8207C918;
		  /* 8207C918h */ case   10:  		/* lwz R11, <#[R31 + 21960]> */
		/* 8207C918h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000055C8) );
		/* 8207C918h case   10:*/		return 0x8207C91C;
		  /* 8207C91Ch */ case   11:  		/* lwz R4, <#[R1 + 132]> */
		/* 8207C91Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000084) );
		/* 8207C91Ch case   11:*/		return 0x8207C920;
		  /* 8207C920h */ case   12:  		/* mr R7, R9 */
		/* 8207C920h case   12:*/		regs.R7 = regs.R9;
		/* 8207C920h case   12:*/		return 0x8207C924;
		  /* 8207C924h */ case   13:  		/* lwz R8, <#[R31 + 21952]> */
		/* 8207C924h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000055C0) );
		/* 8207C924h case   13:*/		return 0x8207C928;
		  /* 8207C928h */ case   14:  		/* lwz R6, <#[R1 + 136]> */
		/* 8207C928h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000088) );
		/* 8207C928h case   14:*/		return 0x8207C92C;
		  /* 8207C92Ch */ case   15:  		/* lwz R5, <#[R1 + 140]> */
		/* 8207C92Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207C92Ch case   15:*/		return 0x8207C930;
		  /* 8207C930h */ case   16:  		/* cmplw CR6, R11, R8 */
		/* 8207C930h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8207C930h case   16:*/		return 0x8207C934;
		  /* 8207C934h */ case   17:  		/* lwz R10, <#[R1 + 144]> */
		/* 8207C934h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 8207C934h case   17:*/		return 0x8207C938;
		  /* 8207C938h */ case   18:  		/* subf R9, R9, R6 */
		/* 8207C938h case   18:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 8207C938h case   18:*/		return 0x8207C93C;
		  /* 8207C93Ch */ case   19:  		/* subf R5, R4, R5 */
		/* 8207C93Ch case   19:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R4,regs.R5);
		/* 8207C93Ch case   19:*/		return 0x8207C940;
		  /* 8207C940h */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 8207C940h case   20:*/		if ( regs.CR[6].eq ) { return 0x8207C974;  }
		/* 8207C940h case   20:*/		return 0x8207C944;
		  /* 8207C944h */ case   21:  		/* cmplw CR6, R10, R11 */
		/* 8207C944h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8207C944h case   21:*/		return 0x8207C948;
		  /* 8207C948h */ case   22:  		/* bc 12, CR6_LT, 16 */
		/* 8207C948h case   22:*/		if ( regs.CR[6].lt ) { return 0x8207C958;  }
		/* 8207C948h case   22:*/		return 0x8207C94C;
		  /* 8207C94Ch */ case   23:  		/* cmplw CR6, R10, R8 */
		/* 8207C94Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8207C94Ch case   23:*/		return 0x8207C950;
		  /* 8207C950h */ case   24:  		/* bc 12, CR6_GT, 8 */
		/* 8207C950h case   24:*/		if ( regs.CR[6].gt ) { return 0x8207C958;  }
		/* 8207C950h case   24:*/		return 0x8207C954;
		  /* 8207C954h */ case   25:  		/* mr R10, R11 */
		/* 8207C954h case   25:*/		regs.R10 = regs.R11;
		/* 8207C954h case   25:*/		return 0x8207C958;
	}
	return 0x8207C958;
} // Block from 8207C8F0h-8207C958h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207C958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C958);
		  /* 8207C958h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 8207C958h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207C958h case    0:*/		return 0x8207C95C;
		  /* 8207C95Ch */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 8207C95Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8207C974;  }
		/* 8207C95Ch case    1:*/		return 0x8207C960;
		  /* 8207C960h */ case    2:  		/* cmplw CR6, R9, R8 */
		/* 8207C960h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8207C960h case    2:*/		return 0x8207C964;
		  /* 8207C964h */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 8207C964h case    3:*/		if ( regs.CR[6].gt ) { return 0x8207C974;  }
		/* 8207C964h case    3:*/		return 0x8207C968;
		  /* 8207C968h */ case    4:  		/* subf R8, R10, R8 */
		/* 8207C968h case    4:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 8207C968h case    4:*/		return 0x8207C96C;
		  /* 8207C96Ch */ case    5:  		/* mr R9, R11 */
		/* 8207C96Ch case    5:*/		regs.R9 = regs.R11;
		/* 8207C96Ch case    5:*/		return 0x8207C970;
		  /* 8207C970h */ case    6:  		/* rlwinm R7, R8, 31, 1, 31 */
		/* 8207C970h case    6:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R7,regs.R8);
		/* 8207C970h case    6:*/		return 0x8207C974;
	}
	return 0x8207C974;
} // Block from 8207C958h-8207C974h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207C974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C974);
		  /* 8207C974h */ case    0:  		/* lwz R8, <#[R1 + 152]> */
		/* 8207C974h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000098) );
		/* 8207C974h case    0:*/		return 0x8207C978;
		  /* 8207C978h */ case    1:  		/* subf R11, R10, R11 */
		/* 8207C978h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207C978h case    1:*/		return 0x8207C97C;
		  /* 8207C97Ch */ case    2:  		/* lwz R6, <#[R31 + 21956]> */
		/* 8207C97Ch case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x000055C4) );
		/* 8207C97Ch case    2:*/		return 0x8207C980;
	}
	return 0x8207C980;
} // Block from 8207C974h-8207C980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207C980h
// Function '?SetupScaler@D3D@@YAXPAVCDevice@1@KKPBU_D3DPRIVATE_SCALER_PARAMETERS@@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207C980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207C980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207C980);
		  /* 8207C980h */ case    0:  		/* rlwimi R30, R29, 16, 0, 15 */
		/* 8207C980h case    0:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R30,regs.R29);
		/* 8207C980h case    0:*/		return 0x8207C984;
		  /* 8207C984h */ case    1:  		/* rlwinm R11, R11, 31, 1, 31 */
		/* 8207C984h case    1:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R11);
		/* 8207C984h case    1:*/		return 0x8207C988;
		  /* 8207C988h */ case    2:  		/* lwz R3, <#[R1 + 168]> */
		/* 8207C988h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000A8) );
		/* 8207C988h case    2:*/		return 0x8207C98C;
		  /* 8207C98Ch */ case    3:  		/* rlwinm R28, R10, 16, 0, 15 */
		/* 8207C98Ch case    3:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R28,regs.R10);
		/* 8207C98Ch case    3:*/		return 0x8207C990;
		  /* 8207C990h */ case    4:  		/* rlwimi R5, R9, 16, 0, 15 */
		/* 8207C990h case    4:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R5,regs.R9);
		/* 8207C990h case    4:*/		return 0x8207C994;
		  /* 8207C994h */ case    5:  		/* stw R8, <#[R1 + 116]> */
		/* 8207C994h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 8207C994h case    5:*/		return 0x8207C998;
		  /* 8207C998h */ case    6:  		/* addi R10, R1, 172 */
		/* 8207C998h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xAC);
		/* 8207C998h case    6:*/		return 0x8207C99C;
		  /* 8207C99Ch */ case    7:  		/* lwz R8, <#[R1 + 148]> */
		/* 8207C99Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 8207C99Ch case    7:*/		return 0x8207C9A0;
		  /* 8207C9A0h */ case    8:  		/* addi R9, R1, 112 */
		/* 8207C9A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8207C9A0h case    8:*/		return 0x8207C9A4;
		  /* 8207C9A4h */ case    9:  		/* stw R3, <#[R1 + 112]> */
		/* 8207C9A4h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000070) );
		/* 8207C9A4h case    9:*/		return 0x8207C9A8;
		  /* 8207C9A8h */ case   10:  		/* rlwimi R4, R7, 16, 0, 15 */
		/* 8207C9A8h case   10:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R4,regs.R7);
		/* 8207C9A8h case   10:*/		return 0x8207C9AC;
		  /* 8207C9ACh */ case   11:  		/* subf R6, R8, R6 */
		/* 8207C9ACh case   11:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 8207C9ACh case   11:*/		return 0x8207C9B0;
		  /* 8207C9B0h */ case   12:  		/* stw R10, <#[R1 + 92]> */
		/* 8207C9B0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207C9B0h case   12:*/		return 0x8207C9B4;
		  /* 8207C9B4h */ case   13:  		/* rlwinm R29, R8, 0, 16, 31 */
		/* 8207C9B4h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R8);
		/* 8207C9B4h case   13:*/		return 0x8207C9B8;
		  /* 8207C9B8h */ case   14:  		/* stw R9, <#[R1 + 84]> */
		/* 8207C9B8h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8207C9B8h case   14:*/		return 0x8207C9BC;
		  /* 8207C9BCh */ case   15:  		/* rlwinm R8, R6, 31, 1, 31 */
		/* 8207C9BCh case   15:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R8,regs.R6);
		/* 8207C9BCh case   15:*/		return 0x8207C9C0;
		  /* 8207C9C0h */ case   16:  		/* addi R10, R1, 156 */
		/* 8207C9C0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x9C);
		/* 8207C9C0h case   16:*/		return 0x8207C9C4;
		  /* 8207C9C4h */ case   17:  		/* rlwimi R8, R11, 16, 0, 15 */
		/* 8207C9C4h case   17:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R8,regs.R11);
		/* 8207C9C4h case   17:*/		return 0x8207C9C8;
		  /* 8207C9C8h */ case   18:  		/* addi R11, R1, 992 */
		/* 8207C9C8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x3E0);
		/* 8207C9C8h case   18:*/		return 0x8207C9CC;
		  /* 8207C9CCh */ case   19:  		/* mr R26, R8 */
		/* 8207C9CCh case   19:*/		regs.R26 = regs.R8;
		/* 8207C9CCh case   19:*/		return 0x8207C9D0;
		  /* 8207C9D0h */ case   20:  		/* mr R8, R30 */
		/* 8207C9D0h case   20:*/		regs.R8 = regs.R30;
		/* 8207C9D0h case   20:*/		return 0x8207C9D4;
		  /* 8207C9D4h */ case   21:  		/* stw R11, <#[R1 + 100]> */
		/* 8207C9D4h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8207C9D4h case   21:*/		return 0x8207C9D8;
		  /* 8207C9D8h */ case   22:  		/* mr R6, R26 */
		/* 8207C9D8h case   22:*/		regs.R6 = regs.R26;
		/* 8207C9D8h case   22:*/		return 0x8207C9DC;
		  /* 8207C9DCh */ case   23:  		/* addi R9, R1, 116 */
		/* 8207C9DCh case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x74);
		/* 8207C9DCh case   23:*/		return 0x8207C9E0;
		  /* 8207C9E0h */ case   24:  		/* or R7, R29, R28 */
		/* 8207C9E0h case   24:*/		cpu::op::or<0>(regs,&regs.R7,regs.R29,regs.R28);
		/* 8207C9E0h case   24:*/		return 0x8207C9E4;
		  /* 8207C9E4h */ case   25:  		/* mr R3, R31 */
		/* 8207C9E4h case   25:*/		regs.R3 = regs.R31;
		/* 8207C9E4h case   25:*/		return 0x8207C9E8;
		  /* 8207C9E8h */ case   26:  		/* mr R27, R30 */
		/* 8207C9E8h case   26:*/		regs.R27 = regs.R30;
		/* 8207C9E8h case   26:*/		return 0x8207C9EC;
		  /* 8207C9ECh */ case   27:  		/* bl -1676 */
		/* 8207C9ECh case   27:*/		regs.LR = 0x8207C9F0; return 0x8207C360;
		/* 8207C9ECh case   27:*/		return 0x8207C9F0;
		  /* 8207C9F0h */ case   28:  		/* lis R5, -32768 */
		/* 8207C9F0h case   28:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8000);
		/* 8207C9F0h case   28:*/		return 0x8207C9F4;
		  /* 8207C9F4h */ case   29:  		/* li R4, 800 */
		/* 8207C9F4h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x320);
		/* 8207C9F4h case   29:*/		return 0x8207C9F8;
		  /* 8207C9F8h */ case   30:  		/* addi R3, R1, 192 */
		/* 8207C9F8h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8207C9F8h case   30:*/		return 0x8207C9FC;
		  /* 8207C9FCh */ case   31:  		/* bl 2033356 */
		/* 8207C9FCh case   31:*/		regs.LR = 0x8207CA00; return 0x8226D0C8;
		/* 8207C9FCh case   31:*/		return 0x8207CA00;
		  /* 8207CA00h */ case   32:  		/* li R4, 220 */
		/* 8207CA00h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0xDC);
		/* 8207CA00h case   32:*/		return 0x8207CA04;
		  /* 8207CA04h */ case   33:  		/* mr R3, R31 */
		/* 8207CA04h case   33:*/		regs.R3 = regs.R31;
		/* 8207CA04h case   33:*/		return 0x8207CA08;
		  /* 8207CA08h */ case   34:  		/* bl -34504 */
		/* 8207CA08h case   34:*/		regs.LR = 0x8207CA0C; return 0x82074340;
		/* 8207CA08h case   34:*/		return 0x8207CA0C;
		  /* 8207CA0Ch */ case   35:  		/* lwz R9, <#[R1 + 132]> */
		/* 8207CA0Ch case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8207CA0Ch case   35:*/		return 0x8207CA10;
		  /* 8207CA10h */ case   36:  		/* lwz R11, <#[R1 + 128]> */
		/* 8207CA10h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8207CA10h case   36:*/		return 0x8207CA14;
		  /* 8207CA14h */ case   37:  		/* li R7, 200 */
		/* 8207CA14h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0xC8);
		/* 8207CA14h case   37:*/		return 0x8207CA18;
		  /* 8207CA18h */ case   38:  		/* lwz R10, <#[R1 + 136]> */
		/* 8207CA18h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 8207CA18h case   38:*/		return 0x8207CA1C;
		  /* 8207CA1Ch */ case   39:  		/* mr R25, R9 */
		/* 8207CA1Ch case   39:*/		regs.R25 = regs.R9;
		/* 8207CA1Ch case   39:*/		return 0x8207CA20;
		  /* 8207CA20h */ case   40:  		/* lwz R8, <#[R1 + 140]> */
		/* 8207CA20h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000008C) );
		/* 8207CA20h case   40:*/		return 0x8207CA24;
		  /* 8207CA24h */ case   41:  		/* mr R30, R3 */
		/* 8207CA24h case   41:*/		regs.R30 = regs.R3;
		/* 8207CA24h case   41:*/		return 0x8207CA28;
		  /* 8207CA28h */ case   42:  		/* subf R6, R11, R10 */
		/* 8207CA28h case   42:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 8207CA28h case   42:*/		return 0x8207CA2C;
		  /* 8207CA2Ch */ case   43:  		/* stw R7, <#[R1 + 108]> */
		/* 8207CA2Ch case   43:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207CA2Ch case   43:*/		return 0x8207CA30;
		  /* 8207CA30h */ case   44:  		/* subf R4, R9, R8 */
		/* 8207CA30h case   44:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R9,regs.R8);
		/* 8207CA30h case   44:*/		return 0x8207CA34;
		  /* 8207CA34h */ case   45:  		/* lwz R10, <#[R1 + 112]> */
		/* 8207CA34h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8207CA34h case   45:*/		return 0x8207CA38;
		  /* 8207CA38h */ case   46:  		/* addi R7, R1, 992 */
		/* 8207CA38h case   46:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x3E0);
		/* 8207CA38h case   46:*/		return 0x8207CA3C;
		  /* 8207CA3Ch */ case   47:  		/* lwz R8, <#[R1 + 116]> */
		/* 8207CA3Ch case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000074) );
		/* 8207CA3Ch case   47:*/		return 0x8207CA40;
		  /* 8207CA40h */ case   48:  		/* rlwimi R4, R6, 16, 0, 15 */
		/* 8207CA40h case   48:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R4,regs.R6);
		/* 8207CA40h case   48:*/		return 0x8207CA44;
		  /* 8207CA44h */ case   49:  		/* addi R6, R1, 172 */
		/* 8207CA44h case   49:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xAC);
		/* 8207CA44h case   49:*/		return 0x8207CA48;
		  /* 8207CA48h */ case   50:  		/* stw R7, <#[R1 + 92]> */
		/* 8207CA48h case   50:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207CA48h case   50:*/		return 0x8207CA4C;
		  /* 8207CA4Ch */ case   51:  		/* rlwimi R25, R11, 16, 0, 15 */
		/* 8207CA4Ch case   51:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R25,regs.R11);
		/* 8207CA4Ch case   51:*/		return 0x8207CA50;
		  /* 8207CA50h */ case   52:  		/* addi R11, R1, 192 */
		/* 8207CA50h case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xC0);
		/* 8207CA50h case   52:*/		return 0x8207CA54;
		  /* 8207CA54h */ case   53:  		/* stw R6, <#[R1 + 84]> */
		/* 8207CA54h case   53:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8207CA54h case   53:*/		return 0x8207CA58;
		  /* 8207CA58h */ case   54:  		/* addi R9, R1, 156 */
		/* 8207CA58h case   54:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x9C);
		/* 8207CA58h case   54:*/		return 0x8207CA5C;
		  /* 8207CA5Ch */ case   55:  		/* mr R7, R27 */
		/* 8207CA5Ch case   55:*/		regs.R7 = regs.R27;
		/* 8207CA5Ch case   55:*/		return 0x8207CA60;
		  /* 8207CA60h */ case   56:  		/* stw R11, <#[R1 + 100]> */
		/* 8207CA60h case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8207CA60h case   56:*/		return 0x8207CA64;
		  /* 8207CA64h */ case   57:  		/* or R6, R29, R28 */
		/* 8207CA64h case   57:*/		cpu::op::or<0>(regs,&regs.R6,regs.R29,regs.R28);
		/* 8207CA64h case   57:*/		return 0x8207CA68;
		  /* 8207CA68h */ case   58:  		/* mr R5, R26 */
		/* 8207CA68h case   58:*/		regs.R5 = regs.R26;
		/* 8207CA68h case   58:*/		return 0x8207CA6C;
		  /* 8207CA6Ch */ case   59:  		/* mr R3, R25 */
		/* 8207CA6Ch case   59:*/		regs.R3 = regs.R25;
		/* 8207CA6Ch case   59:*/		return 0x8207CA70;
		  /* 8207CA70h */ case   60:  		/* bl 2033224 */
		/* 8207CA70h case   60:*/		regs.LR = 0x8207CA74; return 0x8226D0B8;
		/* 8207CA70h case   60:*/		return 0x8207CA74;
		  /* 8207CA74h */ case   61:  		/* rlwinm R29, R3, 2, 0, 29 */
		/* 8207CA74h case   61:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R3);
		/* 8207CA74h case   61:*/		return 0x8207CA78;
		  /* 8207CA78h */ case   62:  		/* addi R4, R1, 192 */
		/* 8207CA78h case   62:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 8207CA78h case   62:*/		return 0x8207CA7C;
		  /* 8207CA7Ch */ case   63:  		/* mr R5, R29 */
		/* 8207CA7Ch case   63:*/		regs.R5 = regs.R29;
		/* 8207CA7Ch case   63:*/		return 0x8207CA80;
		  /* 8207CA80h */ case   64:  		/* addi R3, R30, 4 */
		/* 8207CA80h case   64:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x4);
		/* 8207CA80h case   64:*/		return 0x8207CA84;
		  /* 8207CA84h */ case   65:  		/* bl 85804 */
		/* 8207CA84h case   65:*/		regs.LR = 0x8207CA88; return 0x820919B0;
		/* 8207CA84h case   65:*/		return 0x8207CA88;
		  /* 8207CA88h */ case   66:  		/* add R11, R29, R30 */
		/* 8207CA88h case   66:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R30);
		/* 8207CA88h case   66:*/		return 0x8207CA8C;
		  /* 8207CA8Ch */ case   67:  		/* mr R3, R31 */
		/* 8207CA8Ch case   67:*/		regs.R3 = regs.R31;
		/* 8207CA8Ch case   67:*/		return 0x8207CA90;
		  /* 8207CA90h */ case   68:  		/* stw R11, <#[R31 + 48]> */
		/* 8207CA90h case   68:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207CA90h case   68:*/		return 0x8207CA94;
		  /* 8207CA94h */ case   69:  		/* bl -35212 */
		/* 8207CA94h case   69:*/		regs.LR = 0x8207CA98; return 0x82074108;
		/* 8207CA94h case   69:*/		return 0x8207CA98;
		  /* 8207CA98h */ case   70:  		/* addi R1, R1, 2464 */
		/* 8207CA98h case   70:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x9A0);
		/* 8207CA98h case   70:*/		return 0x8207CA9C;
		  /* 8207CA9Ch */ case   71:  		/* b 83968 */
		/* 8207CA9Ch case   71:*/		return 0x8209129C;
		/* 8207CA9Ch case   71:*/		return 0x8207CAA0;
	}
	return 0x8207CAA0;
} // Block from 8207C980h-8207CAA0h (72 instructions)

//////////////////////////////////////////////////////
// Block at 8207CAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CAA0);
		  /* 8207CAA0h */ case    0:  		/* mfspr R12, LR */
		/* 8207CAA0h case    0:*/		regs.R12 = regs.LR;
		/* 8207CAA0h case    0:*/		return 0x8207CAA4;
		  /* 8207CAA4h */ case    1:  		/* bl 83892 */
		/* 8207CAA4h case    1:*/		regs.LR = 0x8207CAA8; return 0x82091258;
		/* 8207CAA4h case    1:*/		return 0x8207CAA8;
		  /* 8207CAA8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207CAA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207CAA8h case    2:*/		return 0x8207CAAC;
		  /* 8207CAACh */ case    3:  		/* lwz R11, <#[R3 + 15232]> */
		/* 8207CAACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00003B80) );
		/* 8207CAACh case    3:*/		return 0x8207CAB0;
		  /* 8207CAB0h */ case    4:  		/* mr R31, R3 */
		/* 8207CAB0h case    4:*/		regs.R31 = regs.R3;
		/* 8207CAB0h case    4:*/		return 0x8207CAB4;
		  /* 8207CAB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8207CAB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207CAB4h case    5:*/		return 0x8207CAB8;
		  /* 8207CAB8h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 8207CAB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207CAE0;  }
		/* 8207CAB8h case    6:*/		return 0x8207CABC;
		  /* 8207CABCh */ case    7:  		/* lwz R10, <#[R11 + 40]> */
		/* 8207CABCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8207CABCh case    7:*/		return 0x8207CAC0;
		  /* 8207CAC0h */ case    8:  		/* lwz R8, <#[R11 + 36]> */
		/* 8207CAC0h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000024) );
		/* 8207CAC0h case    8:*/		return 0x8207CAC4;
		  /* 8207CAC4h */ case    9:  		/* rlwinm R11, R10, 2, 30, 30 */
		/* 8207CAC4h case    9:*/		cpu::op::rlwinm<0,2,30,30>(regs,&regs.R11,regs.R10);
		/* 8207CAC4h case    9:*/		return 0x8207CAC8;
		  /* 8207CAC8h */ case   10:  		/* rlwinm R9, R8, 0, 19, 31 */
		/* 8207CAC8h case   10:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R9,regs.R8);
		/* 8207CAC8h case   10:*/		return 0x8207CACC;
		  /* 8207CACCh */ case   11:  		/* addi R11, R11, 1 */
		/* 8207CACCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207CACCh case   11:*/		return 0x8207CAD0;
		  /* 8207CAD0h */ case   12:  		/* rlwinm R10, R8, 19, 19, 31 */
		/* 8207CAD0h case   12:*/		cpu::op::rlwinm<0,19,19,31>(regs,&regs.R10,regs.R8);
		/* 8207CAD0h case   12:*/		return 0x8207CAD4;
		  /* 8207CAD4h */ case   13:  		/* add R29, R9, R11 */
		/* 8207CAD4h case   13:*/		cpu::op::add<0>(regs,&regs.R29,regs.R9,regs.R11);
		/* 8207CAD4h case   13:*/		return 0x8207CAD8;
		  /* 8207CAD8h */ case   14:  		/* add R28, R10, R11 */
		/* 8207CAD8h case   14:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 8207CAD8h case   14:*/		return 0x8207CADC;
		  /* 8207CADCh */ case   15:  		/* b 12 */
		/* 8207CADCh case   15:*/		return 0x8207CAE8;
		/* 8207CADCh case   15:*/		return 0x8207CAE0;
	}
	return 0x8207CAE0;
} // Block from 8207CAA0h-8207CAE0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207CAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CAE0);
		  /* 8207CAE0h */ case    0:  		/* lwz R29, <#[R31 + 13948]> */
		/* 8207CAE0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000367C) );
		/* 8207CAE0h case    0:*/		return 0x8207CAE4;
		  /* 8207CAE4h */ case    1:  		/* lwz R28, <#[R31 + 13952]> */
		/* 8207CAE4h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00003680) );
		/* 8207CAE4h case    1:*/		return 0x8207CAE8;
	}
	return 0x8207CAE8;
} // Block from 8207CAE0h-8207CAE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207CAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CAE8);
		  /* 8207CAE8h */ case    0:  		/* addi R30, R31, 14128 */
		/* 8207CAE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x3730);
		/* 8207CAE8h case    0:*/		return 0x8207CAEC;
		  /* 8207CAECh */ case    1:  		/* li R5, 56 */
		/* 8207CAECh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 8207CAECh case    1:*/		return 0x8207CAF0;
		  /* 8207CAF0h */ case    2:  		/* mr R3, R30 */
		/* 8207CAF0h case    2:*/		regs.R3 = regs.R30;
		/* 8207CAF0h case    2:*/		return 0x8207CAF4;
		  /* 8207CAF4h */ case    3:  		/* bl 85692 */
		/* 8207CAF4h case    3:*/		regs.LR = 0x8207CAF8; return 0x820919B0;
		/* 8207CAF4h case    3:*/		return 0x8207CAF8;
		  /* 8207CAF8h */ case    4:  		/* lbz R11, <#[R31 + 11070]> */
		/* 8207CAF8h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207CAF8h case    4:*/		return 0x8207CAFC;
		  /* 8207CAFCh */ case    5:  		/* mr R6, R30 */
		/* 8207CAFCh case    5:*/		regs.R6 = regs.R30;
		/* 8207CAFCh case    5:*/		return 0x8207CB00;
		  /* 8207CB00h */ case    6:  		/* ori R11, R11, 16 */
		/* 8207CB00h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8207CB00h case    6:*/		return 0x8207CB04;
		  /* 8207CB04h */ case    7:  		/* mr R5, R28 */
		/* 8207CB04h case    7:*/		regs.R5 = regs.R28;
		/* 8207CB04h case    7:*/		return 0x8207CB08;
		  /* 8207CB08h */ case    8:  		/* stb R11, <#[R31 + 11070]> */
		/* 8207CB08h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207CB08h case    8:*/		return 0x8207CB0C;
		  /* 8207CB0Ch */ case    9:  		/* mr R4, R29 */
		/* 8207CB0Ch case    9:*/		regs.R4 = regs.R29;
		/* 8207CB0Ch case    9:*/		return 0x8207CB10;
		  /* 8207CB10h */ case   10:  		/* mr R3, R31 */
		/* 8207CB10h case   10:*/		regs.R3 = regs.R31;
		/* 8207CB10h case   10:*/		return 0x8207CB14;
		  /* 8207CB14h */ case   11:  		/* bl -7108 */
		/* 8207CB14h case   11:*/		regs.LR = 0x8207CB18; return 0x8207AF50;
		/* 8207CB14h case   11:*/		return 0x8207CB18;
		  /* 8207CB18h */ case   12:  		/* addi R1, R1, 128 */
		/* 8207CB18h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207CB18h case   12:*/		return 0x8207CB1C;
		  /* 8207CB1Ch */ case   13:  		/* b 83852 */
		/* 8207CB1Ch case   13:*/		return 0x820912A8;
		/* 8207CB1Ch case   13:*/		return 0x8207CB20;
	}
	return 0x8207CB20;
} // Block from 8207CAE8h-8207CB20h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB20h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB20);
		  /* 8207CB20h */ case    0:  		/* mfspr R12, LR */
		/* 8207CB20h case    0:*/		regs.R12 = regs.LR;
		/* 8207CB20h case    0:*/		return 0x8207CB24;
		  /* 8207CB24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CB24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CB24h case    1:*/		return 0x8207CB28;
		  /* 8207CB28h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8207CB28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8207CB28h case    2:*/		return 0x8207CB2C;
		  /* 8207CB2Ch */ case    3:  		/* addi R5, R1, 80 */
		/* 8207CB2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8207CB2Ch case    3:*/		return 0x8207CB30;
	}
	return 0x8207CB30;
} // Block from 8207CB20h-8207CB30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB30h
// Function 'D3DDevice_SetScalerParameters'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB30);
		  /* 8207CB30h */ case    0:  		/* mr R9, R3 */
		/* 8207CB30h case    0:*/		regs.R9 = regs.R3;
		/* 8207CB30h case    0:*/		return 0x8207CB34;
		  /* 8207CB34h */ case    1:  		/* bl -7260 */
		/* 8207CB34h case    1:*/		regs.LR = 0x8207CB38; return 0x8207AED8;
		/* 8207CB34h case    1:*/		return 0x8207CB38;
		  /* 8207CB38h */ case    2:  		/* addi R4, R1, 80 */
		/* 8207CB38h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207CB38h case    2:*/		return 0x8207CB3C;
		  /* 8207CB3Ch */ case    3:  		/* bl -156 */
		/* 8207CB3Ch case    3:*/		regs.LR = 0x8207CB40; return 0x8207CAA0;
		/* 8207CB3Ch case    3:*/		return 0x8207CB40;
		  /* 8207CB40h */ case    4:  		/* addi R1, R1, 144 */
		/* 8207CB40h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8207CB40h case    4:*/		return 0x8207CB44;
		  /* 8207CB44h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CB44h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CB44h case    5:*/		return 0x8207CB48;
		  /* 8207CB48h */ case    6:  		/* mtspr LR, R12 */
		/* 8207CB48h case    6:*/		regs.LR = regs.R12;
		/* 8207CB48h case    6:*/		return 0x8207CB4C;
		  /* 8207CB4Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207CB4Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CB4Ch case    7:*/		return 0x8207CB50;
	}
	return 0x8207CB50;
} // Block from 8207CB30h-8207CB50h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB50h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB50);
		  /* 8207CB50h */ case    0:  		/* lwz R11, <#[R3 + 13916]> */
		/* 8207CB50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000365C) );
		/* 8207CB50h case    0:*/		return 0x8207CB54;
		  /* 8207CB54h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8207CB54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207CB54h case    1:*/		return 0x8207CB58;
		  /* 8207CB58h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 8207CB58h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8207CB58h case    2:*/		return 0x8207CB5C;
	}
	return 0x8207CB5C;
} // Block from 8207CB50h-8207CB5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB5C);
		  /* 8207CB5Ch */ case    0:  		/* mtspr CTR, R11 */
		/* 8207CB5Ch case    0:*/		regs.CTR = regs.R11;
		/* 8207CB5Ch case    0:*/		return 0x8207CB60;
		  /* 8207CB60h */ case    1:  		/* bcctr 20, CR0_LT */
		/* 8207CB60h case    1:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8207CB60h case    1:*/		return 0x8207CB64;
		  /* 8207CB64h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8207CB64h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CB64h case    2:*/		return 0x8207CB68;
	}
	return 0x8207CB68;
} // Block from 8207CB5Ch-8207CB68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB68h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB68);
		  /* 8207CB68h */ case    0:  		/* stw R4, <#[R3]> */
		/* 8207CB68h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 8207CB68h case    0:*/		return 0x8207CB6C;
		  /* 8207CB6Ch */ case    1:  		/* stw R5, <#[R3 + 4]> */
		/* 8207CB6Ch case    1:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		/* 8207CB6Ch case    1:*/		return 0x8207CB70;
		  /* 8207CB70h */ case    2:  		/* lwz R11, <#[R13 + 256]> */
		/* 8207CB70h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000100) );
		/* 8207CB70h case    2:*/		return 0x8207CB74;
		  /* 8207CB74h */ case    3:  		/* lwz R10, <#[R4 + 11024]> */
		/* 8207CB74h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00002B10) );
		/* 8207CB74h case    3:*/		return 0x8207CB78;
		  /* 8207CB78h */ case    4:  		/* lwz R11, <#[R11 + 88]> */
		/* 8207CB78h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000058) );
		/* 8207CB78h case    4:*/		return 0x8207CB7C;
		  /* 8207CB7Ch */ case    5:  		/* lwz R10, <#[R10]> */
		/* 8207CB7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8207CB7Ch case    5:*/		return 0x8207CB80;
		  /* 8207CB80h */ case    6:  		/* stw R10, <#[R3 + 8]> */
		/* 8207CB80h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8207CB80h case    6:*/		return 0x8207CB84;
		  /* 8207CB84h */ case    7:  		/* stw R11, <#[R3 + 12]> */
		/* 8207CB84h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8207CB84h case    7:*/		return 0x8207CB88;
		  /* 8207CB88h */ case    8:  		/* stw R11, <#[R3 + 16]> */
		/* 8207CB88h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8207CB88h case    8:*/		return 0x8207CB8C;
		  /* 8207CB8Ch */ case    9:  		/* mftb R11, 12, 8 */
		/* 8207CB8Ch case    9:*/		cpu::op::mftb<0>(regs,&regs.R11,0xC,0x8);
		/* 8207CB8Ch case    9:*/		return 0x8207CB90;
		  /* 8207CB90h */ case   10:  		/* stw R11, <#[R3 + 20]> */
		/* 8207CB90h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8207CB90h case   10:*/		return 0x8207CB94;
		  /* 8207CB94h */ case   11:  		/* bclr 20, CR0_LT */
		/* 8207CB94h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CB94h case   11:*/		return 0x8207CB98;
	}
	return 0x8207CB98;
} // Block from 8207CB68h-8207CB98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207CB98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CB98);
		  /* 8207CB98h */ case    0:  		/* mfspr R12, LR */
		/* 8207CB98h case    0:*/		regs.R12 = regs.LR;
		/* 8207CB98h case    0:*/		return 0x8207CB9C;
		  /* 8207CB9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CB9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CB9Ch case    1:*/		return 0x8207CBA0;
		  /* 8207CBA0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207CBA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207CBA0h case    2:*/		return 0x8207CBA4;
		  /* 8207CBA4h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8207CBA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8207CBA4h case    3:*/		return 0x8207CBA8;
		  /* 8207CBA8h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8207CBA8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207CBA8h case    4:*/		return 0x8207CBAC;
		  /* 8207CBACh */ case    5:  		/* bc 12, CR6_EQ, 160 */
		/* 8207CBACh case    5:*/		if ( regs.CR[6].eq ) { return 0x8207CC4C;  }
		/* 8207CBACh case    5:*/		return 0x8207CBB0;
		  /* 8207CBB0h */ case    6:  		/* mftb R11, 12, 8 */
		/* 8207CBB0h case    6:*/		cpu::op::mftb<0>(regs,&regs.R11,0xC,0x8);
		/* 8207CBB0h case    6:*/		return 0x8207CBB4;
		  /* 8207CBB4h */ case    7:  		/* lwz R10, <#[R13 + 256]> */
		/* 8207CBB4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R13 + 0x00000100) );
		/* 8207CBB4h case    7:*/		return 0x8207CBB8;
		  /* 8207CBB8h */ case    8:  		/* lwz R8, <#[R3 + 16]> */
		/* 8207CBB8h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000010) );
		/* 8207CBB8h case    8:*/		return 0x8207CBBC;
		  /* 8207CBBCh */ case    9:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8207CBBCh case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8207CBBCh case    9:*/		return 0x8207CBC0;
		  /* 8207CBC0h */ case   10:  		/* lwz R9, <#[R3 + 20]> */
		/* 8207CBC0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 8207CBC0h case   10:*/		return 0x8207CBC4;
		  /* 8207CBC4h */ case   11:  		/* lwz R7, <#[R3 + 4]> */
		/* 8207CBC4h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000004) );
		/* 8207CBC4h case   11:*/		return 0x8207CBC8;
		  /* 8207CBC8h */ case   12:  		/* subf R11, R9, R11 */
		/* 8207CBC8h case   12:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207CBC8h case   12:*/		return 0x8207CBCC;
		  /* 8207CBCCh */ case   13:  		/* lwz R10, <#[R10 + 88]> */
		/* 8207CBCCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000058) );
		/* 8207CBCCh case   13:*/		return 0x8207CBD0;
		  /* 8207CBD0h */ case   14:  		/* cmpwi CR6, R7, 3 */
		/* 8207CBD0h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000003);
		/* 8207CBD0h case   14:*/		return 0x8207CBD4;
		  /* 8207CBD4h */ case   15:  		/* subf R6, R8, R10 */
		/* 8207CBD4h case   15:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R8,regs.R10);
		/* 8207CBD4h case   15:*/		return 0x8207CBD8;
		  /* 8207CBD8h */ case   16:  		/* lwz R10, <#[R3]> */
		/* 8207CBD8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8207CBD8h case   16:*/		return 0x8207CBDC;
		  /* 8207CBDCh */ case   17:  		/* bc 4, CR6_EQ, 24 */
		/* 8207CBDCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x8207CBF4;  }
		/* 8207CBDCh case   17:*/		return 0x8207CBE0;
		  /* 8207CBE0h */ case   18:  		/* ld R9, <#[R10 + 22016]> */
		/* 8207CBE0h case   18:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + 0x00005600) );
		/* 8207CBE0h case   18:*/		return 0x8207CBE4;
		  /* 8207CBE4h */ case   19:  		/* rldicl R8, R11, 0, 32 */
		/* 8207CBE4h case   19:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R11);
		/* 8207CBE4h case   19:*/		return 0x8207CBE8;
		  /* 8207CBE8h */ case   20:  		/* add R9, R8, R9 */
		/* 8207CBE8h case   20:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8207CBE8h case   20:*/		return 0x8207CBEC;
		  /* 8207CBECh */ case   21:  		/* std R9, <#[R10 + 22016]> */
		/* 8207CBECh case   21:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00005600) );
		/* 8207CBECh case   21:*/		return 0x8207CBF0;
		  /* 8207CBF0h */ case   22:  		/* b 20 */
		/* 8207CBF0h case   22:*/		return 0x8207CC04;
		/* 8207CBF0h case   22:*/		return 0x8207CBF4;
	}
	return 0x8207CBF4;
} // Block from 8207CB98h-8207CBF4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8207CBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CBF4);
		  /* 8207CBF4h */ case    0:  		/* ld R8, <#[R10 + 22008]> */
		/* 8207CBF4h case    0:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + 0x000055F8) );
		/* 8207CBF4h case    0:*/		return 0x8207CBF8;
		  /* 8207CBF8h */ case    1:  		/* rldicl R9, R11, 0, 32 */
		/* 8207CBF8h case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R11);
		/* 8207CBF8h case    1:*/		return 0x8207CBFC;
		  /* 8207CBFCh */ case    2:  		/* add R9, R9, R8 */
		/* 8207CBFCh case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8207CBFCh case    2:*/		return 0x8207CC00;
		  /* 8207CC00h */ case    3:  		/* std R9, <#[R10 + 22008]> */
		/* 8207CC00h case    3:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x000055F8) );
		/* 8207CC00h case    3:*/		return 0x8207CC04;
	}
	return 0x8207CC04;
} // Block from 8207CBF4h-8207CC04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC04);
		  /* 8207CC04h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 8207CC04h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8207CC04h case    0:*/		return 0x8207CC08;
		  /* 8207CC08h */ case    1:  		/* lwz R9, <#[R10 + 13836]> */
		/* 8207CC08h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000360C) );
		/* 8207CC08h case    1:*/		return 0x8207CC0C;
		  /* 8207CC0Ch */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 8207CC0Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8207CC0Ch case    2:*/		return 0x8207CC10;
		  /* 8207CC10h */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 8207CC10h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207CC4C;  }
		/* 8207CC10h case    3:*/		return 0x8207CC14;
		  /* 8207CC14h */ case    4:  		/* rldicl R11, R11, 0, 32 */
		/* 8207CC14h case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207CC14h case    4:*/		return 0x8207CC18;
		  /* 8207CC18h */ case    5:  		/* lfs FR13, <#[R10 + 22000]> */
		/* 8207CC18h case    5:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x000055F0) );
		/* 8207CC18h case    5:*/		return 0x8207CC1C;
		  /* 8207CC1Ch */ case    6:  		/* lis R10, -32256 */
		/* 8207CC1Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207CC1Ch case    6:*/		return 0x8207CC20;
		  /* 8207CC20h */ case    7:  		/* lwz R4, <#[R3 + 4]> */
		/* 8207CC20h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8207CC20h case    7:*/		return 0x8207CC24;
		  /* 8207CC24h */ case    8:  		/* std R11, <#[R1 + 80]> */
		/* 8207CC24h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207CC24h case    8:*/		return 0x8207CC28;
		  /* 8207CC28h */ case    9:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207CC28h case    9:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207CC28h case    9:*/		return 0x8207CC2C;
		  /* 8207CC2Ch */ case   10:  		/* fcfid FR0, FR0 */
		/* 8207CC2Ch case   10:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207CC2Ch case   10:*/		return 0x8207CC30;
		  /* 8207CC30h */ case   11:  		/* li R3, 0 */
		/* 8207CC30h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207CC30h case   11:*/		return 0x8207CC34;
		  /* 8207CC34h */ case   12:  		/* frsp FR12, FR0 */
		/* 8207CC34h case   12:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR0);
		/* 8207CC34h case   12:*/		return 0x8207CC38;
		  /* 8207CC38h */ case   13:  		/* lfs FR0, <#[R10 + 8392]> */
		/* 8207CC38h case   13:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x000020C8) );
		/* 8207CC38h case   13:*/		return 0x8207CC3C;
		  /* 8207CC3Ch */ case   14:  		/* mtspr CTR, R9 */
		/* 8207CC3Ch case   14:*/		regs.CTR = regs.R9;
		/* 8207CC3Ch case   14:*/		return 0x8207CC40;
		  /* 8207CC40h */ case   15:  		/* fmuls FR13, FR13, FR12 */
		/* 8207CC40h case   15:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR13,regs.FR12);
		/* 8207CC40h case   15:*/		return 0x8207CC44;
		  /* 8207CC44h */ case   16:  		/* fmuls FR1, FR13, FR0 */
		/* 8207CC44h case   16:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR13,regs.FR0);
		/* 8207CC44h case   16:*/		return 0x8207CC48;
		  /* 8207CC48h */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 8207CC48h case   17:*/		if ( 1 ) { regs.LR = 0x8207CC4C; return (uint32)regs.CTR; }
		/* 8207CC48h case   17:*/		return 0x8207CC4C;
	}
	return 0x8207CC4C;
} // Block from 8207CC04h-8207CC4Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC4C);
		  /* 8207CC4Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8207CC4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207CC4Ch case    0:*/		return 0x8207CC50;
		  /* 8207CC50h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CC50h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CC50h case    1:*/		return 0x8207CC54;
		  /* 8207CC54h */ case    2:  		/* mtspr LR, R12 */
		/* 8207CC54h case    2:*/		regs.LR = regs.R12;
		/* 8207CC54h case    2:*/		return 0x8207CC58;
		  /* 8207CC58h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8207CC58h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CC58h case    3:*/		return 0x8207CC5C;
	}
	return 0x8207CC5C;
} // Block from 8207CC4Ch-8207CC5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC5C);
		  /* 8207CC5Ch */ case    0:  		/* nop */
		/* 8207CC5Ch case    0:*/		cpu::op::nop();
		/* 8207CC5Ch case    0:*/		return 0x8207CC60;
	}
	return 0x8207CC60;
} // Block from 8207CC5Ch-8207CC60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC60h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC60);
		  /* 8207CC60h */ case    0:  		/* mfspr R12, LR */
		/* 8207CC60h case    0:*/		regs.R12 = regs.LR;
		/* 8207CC60h case    0:*/		return 0x8207CC64;
		  /* 8207CC64h */ case    1:  		/* bl 83448 */
		/* 8207CC64h case    1:*/		regs.LR = 0x8207CC68; return 0x8209125C;
		/* 8207CC64h case    1:*/		return 0x8207CC68;
	}
	return 0x8207CC68;
} // Block from 8207CC60h-8207CC68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC68h
// Function '?XBMHandleConnect@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC68);
		  /* 8207CC68h */ case    0:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207CC68h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207CC68h case    0:*/		return 0x8207CC6C;
		  /* 8207CC6Ch */ case    1:  		/* lwz R29, <#[R3]> */
		/* 8207CC6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8207CC6Ch case    1:*/		return 0x8207CC70;
		  /* 8207CC70h */ case    2:  		/* mr R31, R3 */
		/* 8207CC70h case    2:*/		regs.R31 = regs.R3;
		/* 8207CC70h case    2:*/		return 0x8207CC74;
		  /* 8207CC74h */ case    3:  		/* nop */
		/* 8207CC74h case    3:*/		cpu::op::nop();
		/* 8207CC74h case    3:*/		return 0x8207CC78;
		  /* 8207CC78h */ case    4:  		/* li R11, 4 */
		/* 8207CC78h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8207CC78h case    4:*/		return 0x8207CC7C;
		  /* 8207CC7Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8207CC7Ch case    5:*/		regs.CTR = regs.R11;
		/* 8207CC7Ch case    5:*/		return 0x8207CC80;
	}
	return 0x8207CC80;
} // Block from 8207CC68h-8207CC80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC80h
// Function '?XBMHandleDisconnect@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC80);
		  /* 8207CC80h */ case    0:  		/* nop */
		/* 8207CC80h case    0:*/		cpu::op::nop();
		/* 8207CC80h case    0:*/		return 0x8207CC84;
		  /* 8207CC84h */ case    1:  		/* nop */
		/* 8207CC84h case    1:*/		cpu::op::nop();
		/* 8207CC84h case    1:*/		return 0x8207CC88;
		  /* 8207CC88h */ case    2:  		/* nop */
		/* 8207CC88h case    2:*/		cpu::op::nop();
		/* 8207CC88h case    2:*/		return 0x8207CC8C;
		  /* 8207CC8Ch */ case    3:  		/* nop */
		/* 8207CC8Ch case    3:*/		cpu::op::nop();
		/* 8207CC8Ch case    3:*/		return 0x8207CC90;
		  /* 8207CC90h */ case    4:  		/* nop */
		/* 8207CC90h case    4:*/		cpu::op::nop();
		/* 8207CC90h case    4:*/		return 0x8207CC94;
		  /* 8207CC94h */ case    5:  		/* nop */
		/* 8207CC94h case    5:*/		cpu::op::nop();
		/* 8207CC94h case    5:*/		return 0x8207CC98;
	}
	return 0x8207CC98;
} // Block from 8207CC80h-8207CC98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207CC98h
// Function '?XBMHandleVersionCheck@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CC98);
		  /* 8207CC98h */ case    0:  		/* nop */
		/* 8207CC98h case    0:*/		cpu::op::nop();
		/* 8207CC98h case    0:*/		return 0x8207CC9C;
		  /* 8207CC9Ch */ case    1:  		/* nop */
		/* 8207CC9Ch case    1:*/		cpu::op::nop();
		/* 8207CC9Ch case    1:*/		return 0x8207CCA0;
		  /* 8207CCA0h */ case    2:  		/* bc 16, CR0_LT, -32 */
		/* 8207CCA0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207CC80;  }
		/* 8207CCA0h case    2:*/		return 0x8207CCA4;
		  /* 8207CCA4h */ case    3:  		/* nop */
		/* 8207CCA4h case    3:*/		cpu::op::nop();
		/* 8207CCA4h case    3:*/		return 0x8207CCA8;
		  /* 8207CCA8h */ case    4:  		/* lbz R11, <#[R29 + 11069]> */
		/* 8207CCA8h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002B3D) );
		/* 8207CCA8h case    4:*/		return 0x8207CCAC;
		  /* 8207CCACh */ case    5:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 8207CCACh case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 8207CCACh case    5:*/		return 0x8207CCB0;
		  /* 8207CCB0h */ case    6:  		/* bc 4, CR0_EQ, 132 */
		/* 8207CCB0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8207CD34;  }
		/* 8207CCB0h case    6:*/		return 0x8207CCB4;
		  /* 8207CCB4h */ case    7:  		/* lwz R11, <#[R29 + 11024]> */
		/* 8207CCB4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002B10) );
		/* 8207CCB4h case    7:*/		return 0x8207CCB8;
		  /* 8207CCB8h */ case    8:  		/* lwz R10, <#[R13 + 256]> */
		/* 8207CCB8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R13 + 0x00000100) );
		/* 8207CCB8h case    8:*/		return 0x8207CCBC;
		  /* 8207CCBCh */ case    9:  		/* lwz R9, <#[R31 + 8]> */
		/* 8207CCBCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8207CCBCh case    9:*/		return 0x8207CCC0;
		  /* 8207CCC0h */ case   10:  		/* lwz R8, <#[R11]> */
		/* 8207CCC0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8207CCC0h case   10:*/		return 0x8207CCC4;
		  /* 8207CCC4h */ case   11:  		/* lwz R30, <#[R10 + 88]> */
		/* 8207CCC4h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000058) );
		/* 8207CCC4h case   11:*/		return 0x8207CCC8;
		  /* 8207CCC8h */ case   12:  		/* cmplw CR6, R9, R8 */
		/* 8207CCC8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8207CCC8h case   12:*/		return 0x8207CCCC;
		  /* 8207CCCCh */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8207CCCCh case   13:*/		if ( regs.CR[6].eq ) { return 0x8207CCDC;  }
		/* 8207CCCCh case   13:*/		return 0x8207CCD0;
	}
	return 0x8207CCD0;
} // Block from 8207CC98h-8207CCD0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207CCD0h
// Function '?XBMHandleLimitCaptureSize@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CCD0);
		  /* 8207CCD0h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8207CCD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207CCD0h case    0:*/		return 0x8207CCD4;
		  /* 8207CCD4h */ case    1:  		/* stw R30, <#[R31 + 12]> */
		/* 8207CCD4h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8207CCD4h case    1:*/		return 0x8207CCD8;
		  /* 8207CCD8h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8207CCD8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8207CCD8h case    2:*/		return 0x8207CCDC;
	}
	return 0x8207CCDC;
} // Block from 8207CCD0h-8207CCDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207CCDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CCDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CCDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CCDC);
		  /* 8207CCDCh */ case    0:  		/* bl 46780 */
		/* 8207CCDCh case    0:*/		regs.LR = 0x8207CCE0; return 0x82088398;
		/* 8207CCDCh case    0:*/		return 0x8207CCE0;
		  /* 8207CCE0h */ case    1:  		/* lwz R11, <#[R29 + 11016]> */
		/* 8207CCE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002B08) );
		/* 8207CCE0h case    1:*/		return 0x8207CCE4;
		  /* 8207CCE4h */ case    2:  		/* cmplw CR6, R11, R3 */
		/* 8207CCE4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 8207CCE4h case    2:*/		return 0x8207CCE8;
		  /* 8207CCE8h */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 8207CCE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207CCFC;  }
		/* 8207CCE8h case    3:*/		return 0x8207CCEC;
		  /* 8207CCECh */ case    4:  		/* lwz R11, <#[R29 + 11148]> */
		/* 8207CCECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002B8C) );
		/* 8207CCECh case    4:*/		return 0x8207CCF0;
		  /* 8207CCF0h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 8207CCF0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207CCF0h case    5:*/		return 0x8207CCF4;
		  /* 8207CCF4h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 8207CCF4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207CCFC;  }
		/* 8207CCF4h case    6:*/		return 0x8207CCF8;
		  /* 8207CCF8h */ case    7:  		/* stw R30, <#[R31 + 12]> */
		/* 8207CCF8h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8207CCF8h case    7:*/		return 0x8207CCFC;
	}
	return 0x8207CCFC;
} // Block from 8207CCDCh-8207CCFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207CCFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CCFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CCFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CCFC);
		  /* 8207CCFCh */ case    0:  		/* lis R11, -32217 */
		/* 8207CCFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207CCFCh case    0:*/		return 0x8207CD00;
		  /* 8207CD00h */ case    1:  		/* lwz R10, <#[R31 + 12]> */
		/* 8207CD00h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8207CD00h case    1:*/		return 0x8207CD04;
		  /* 8207CD04h */ case    2:  		/* subf R10, R10, R30 */
		/* 8207CD04h case    2:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 8207CD04h case    2:*/		return 0x8207CD08;
		  /* 8207CD08h */ case    3:  		/* lwz R11, <#[R11 + 1892]> */
		/* 8207CD08h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000764) );
		/* 8207CD08h case    3:*/		return 0x8207CD0C;
		  /* 8207CD0Ch */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 8207CD0Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8207CD0Ch case    4:*/		return 0x8207CD10;
		  /* 8207CD10h */ case    5:  		/* bc 4, CR6_LT, 12 */
		/* 8207CD10h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8207CD1C;  }
		/* 8207CD10h case    5:*/		return 0x8207CD14;
		  /* 8207CD14h */ case    6:  		/* li R3, 1 */
		/* 8207CD14h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207CD14h case    6:*/		return 0x8207CD18;
		  /* 8207CD18h */ case    7:  		/* b 32 */
		/* 8207CD18h case    7:*/		return 0x8207CD38;
		/* 8207CD18h case    7:*/		return 0x8207CD1C;
	}
	return 0x8207CD1C;
} // Block from 8207CCFCh-8207CD1Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD1C);
		  /* 8207CD1Ch */ case    0:  		/* mr R3, R29 */
		/* 8207CD1Ch case    0:*/		regs.R3 = regs.R29;
		/* 8207CD1Ch case    0:*/		return 0x8207CD20;
		  /* 8207CD20h */ case    1:  		/* bl 43984 */
		/* 8207CD20h case    1:*/		regs.LR = 0x8207CD24; return 0x820878F0;
		/* 8207CD20h case    1:*/		return 0x8207CD24;
		  /* 8207CD24h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8207CD24h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207CD24h case    2:*/		return 0x8207CD28;
	}
	return 0x8207CD28;
} // Block from 8207CD1Ch-8207CD28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD28h
// Function '?XBMHandleBeginCaptureFileCreation@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD28);
		  /* 8207CD28h */ case    0:  		/* bc 4, CR0_EQ, 12 */
		/* 8207CD28h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8207CD34;  }
		/* 8207CD28h case    0:*/		return 0x8207CD2C;
		  /* 8207CD2Ch */ case    1:  		/* stw R30, <#[R31 + 12]> */
		/* 8207CD2Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8207CD2Ch case    1:*/		return 0x8207CD30;
		  /* 8207CD30h */ case    2:  		/* b -28 */
		/* 8207CD30h case    2:*/		return 0x8207CD14;
		/* 8207CD30h case    2:*/		return 0x8207CD34;
	}
	return 0x8207CD34;
} // Block from 8207CD28h-8207CD34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD34);
		  /* 8207CD34h */ case    0:  		/* li R3, 0 */
		/* 8207CD34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207CD34h case    0:*/		return 0x8207CD38;
	}
	return 0x8207CD38;
} // Block from 8207CD34h-8207CD38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD38);
		  /* 8207CD38h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207CD38h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207CD38h case    0:*/		return 0x8207CD3C;
		  /* 8207CD3Ch */ case    1:  		/* b 83312 */
		/* 8207CD3Ch case    1:*/		return 0x820912AC;
		/* 8207CD3Ch case    1:*/		return 0x8207CD40;
	}
	return 0x8207CD40;
} // Block from 8207CD38h-8207CD40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD40);
		  /* 8207CD40h */ case    0:  		/* mfspr R12, LR */
		/* 8207CD40h case    0:*/		regs.R12 = regs.LR;
		/* 8207CD40h case    0:*/		return 0x8207CD44;
		  /* 8207CD44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CD44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CD44h case    1:*/		return 0x8207CD48;
		  /* 8207CD48h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207CD48h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CD48h case    2:*/		return 0x8207CD4C;
		  /* 8207CD4Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207CD4Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207CD4Ch case    3:*/		return 0x8207CD50;
		  /* 8207CD50h */ case    4:  		/* lis R4, -20096 */
		/* 8207CD50h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207CD50h case    4:*/		return 0x8207CD54;
		  /* 8207CD54h */ case    5:  		/* mr R31, R3 */
		/* 8207CD54h case    5:*/		regs.R31 = regs.R3;
		/* 8207CD54h case    5:*/		return 0x8207CD58;
		  /* 8207CD58h */ case    6:  		/* lwz R3, <#[R3 + 24400]> */
		/* 8207CD58h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00005F50) );
		/* 8207CD58h case    6:*/		return 0x8207CD5C;
		  /* 8207CD5Ch */ case    7:  		/* bl 46556 */
		/* 8207CD5Ch case    7:*/		regs.LR = 0x8207CD60; return 0x82088338;
		/* 8207CD5Ch case    7:*/		return 0x8207CD60;
		  /* 8207CD60h */ case    8:  		/* lis R4, 9344 */
		/* 8207CD60h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207CD60h case    8:*/		return 0x8207CD64;
		  /* 8207CD64h */ case    9:  		/* lwz R3, <#[R31 + 24408]> */
		/* 8207CD64h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00005F58) );
		/* 8207CD64h case    9:*/		return 0x8207CD68;
		  /* 8207CD68h */ case   10:  		/* bl 46544 */
		/* 8207CD68h case   10:*/		regs.LR = 0x8207CD6C; return 0x82088338;
		/* 8207CD68h case   10:*/		return 0x8207CD6C;
		  /* 8207CD6Ch */ case   11:  		/* li R11, 0 */
		/* 8207CD6Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207CD6Ch case   11:*/		return 0x8207CD70;
	}
	return 0x8207CD70;
} // Block from 8207CD40h-8207CD70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD70h
// Function '?XBMHandleBeginCapture@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD70);
		  /* 8207CD70h */ case    0:  		/* stw R11, <#[R31 + 24400]> */
		/* 8207CD70h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207CD70h case    0:*/		return 0x8207CD74;
		  /* 8207CD74h */ case    1:  		/* stw R11, <#[R31 + 24408]> */
		/* 8207CD74h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F58) );
		/* 8207CD74h case    1:*/		return 0x8207CD78;
		  /* 8207CD78h */ case    2:  		/* std R11, <#[R31 + 24416]> */
		/* 8207CD78h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00005F60) );
		/* 8207CD78h case    2:*/		return 0x8207CD7C;
		  /* 8207CD7Ch */ case    3:  		/* addi R1, R1, 96 */
		/* 8207CD7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207CD7Ch case    3:*/		return 0x8207CD80;
		  /* 8207CD80h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CD80h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CD80h case    4:*/		return 0x8207CD84;
		  /* 8207CD84h */ case    5:  		/* mtspr LR, R12 */
		/* 8207CD84h case    5:*/		regs.LR = regs.R12;
		/* 8207CD84h case    5:*/		return 0x8207CD88;
	}
	return 0x8207CD88;
} // Block from 8207CD70h-8207CD88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD88h
// Function '?XBMHandleEndCapture@D3D@@YAHPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD88);
		  /* 8207CD88h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 8207CD88h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CD88h case    0:*/		return 0x8207CD8C;
		  /* 8207CD8Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8207CD8Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CD8Ch case    1:*/		return 0x8207CD90;
	}
	return 0x8207CD90;
} // Block from 8207CD88h-8207CD90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207CD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CD90);
		  /* 8207CD90h */ case    0:  		/* mfspr R12, LR */
		/* 8207CD90h case    0:*/		regs.R12 = regs.LR;
		/* 8207CD90h case    0:*/		return 0x8207CD94;
		  /* 8207CD94h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CD94h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CD94h case    1:*/		return 0x8207CD98;
		  /* 8207CD98h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207CD98h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CD98h case    2:*/		return 0x8207CD9C;
		  /* 8207CD9Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207CD9Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207CD9Ch case    3:*/		return 0x8207CDA0;
	}
	return 0x8207CDA0;
} // Block from 8207CD90h-8207CDA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207CDA0h
// Function '?XBMProcessCommand@D3D@@YAJPBDPADKPAU_DM_CMDCONT@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CDA0);
		  /* 8207CDA0h */ case    0:  		/* mr R31, R3 */
		/* 8207CDA0h case    0:*/		regs.R31 = regs.R3;
		/* 8207CDA0h case    0:*/		return 0x8207CDA4;
		  /* 8207CDA4h */ case    1:  		/* lis R4, -19072 */
		/* 8207CDA4h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 8207CDA4h case    1:*/		return 0x8207CDA8;
		  /* 8207CDA8h */ case    2:  		/* li R3, 8192 */
		/* 8207CDA8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x2000);
		/* 8207CDA8h case    2:*/		return 0x8207CDAC;
		  /* 8207CDACh */ case    3:  		/* bl 46164 */
		/* 8207CDACh case    3:*/		regs.LR = 0x8207CDB0; return 0x82088200;
		/* 8207CDACh case    3:*/		return 0x8207CDB0;
		  /* 8207CDB0h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8207CDB0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207CDB0h case    4:*/		return 0x8207CDB4;
		  /* 8207CDB4h */ case    5:  		/* stw R3, <#[R31 + 24424]> */
		/* 8207CDB4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F68) );
		/* 8207CDB4h case    5:*/		return 0x8207CDB8;
		  /* 8207CDB8h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 8207CDB8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8207CDC4;  }
		/* 8207CDB8h case    6:*/		return 0x8207CDBC;
		  /* 8207CDBCh */ case    7:  		/* li R3, 0 */
		/* 8207CDBCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207CDBCh case    7:*/		return 0x8207CDC0;
		  /* 8207CDC0h */ case    8:  		/* b 188 */
		/* 8207CDC0h case    8:*/		return 0x8207CE7C;
		/* 8207CDC0h case    8:*/		return 0x8207CDC4;
	}
	return 0x8207CDC4;
} // Block from 8207CDA0h-8207CDC4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207CDC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CDC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CDC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CDC4);
		  /* 8207CDC4h */ case    0:  		/* lis R4, 25728 */
		/* 8207CDC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 8207CDC4h case    0:*/		return 0x8207CDC8;
		  /* 8207CDC8h */ case    1:  		/* li R3, 1260 */
		/* 8207CDC8h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x4EC);
		/* 8207CDC8h case    1:*/		return 0x8207CDCC;
		  /* 8207CDCCh */ case    2:  		/* bl 46132 */
		/* 8207CDCCh case    2:*/		regs.LR = 0x8207CDD0; return 0x82088200;
		/* 8207CDCCh case    2:*/		return 0x8207CDD0;
		  /* 8207CDD0h */ case    3:  		/* stw R3, <#[R31 + 24432]> */
		/* 8207CDD0h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F70) );
		/* 8207CDD0h case    3:*/		return 0x8207CDD4;
		  /* 8207CDD4h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8207CDD4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207CDD4h case    4:*/		return 0x8207CDD8;
		  /* 8207CDD8h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8207CDD8h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8207CDF8;  }
		/* 8207CDD8h case    5:*/		return 0x8207CDDC;
		  /* 8207CDDCh */ case    6:  		/* lis R4, -20096 */
		/* 8207CDDCh case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207CDDCh case    6:*/		return 0x8207CDE0;
		  /* 8207CDE0h */ case    7:  		/* lwz R3, <#[R31 + 24424]> */
		/* 8207CDE0h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00005F68) );
		/* 8207CDE0h case    7:*/		return 0x8207CDE4;
		  /* 8207CDE4h */ case    8:  		/* bl 46420 */
		/* 8207CDE4h case    8:*/		regs.LR = 0x8207CDE8; return 0x82088338;
		/* 8207CDE4h case    8:*/		return 0x8207CDE8;
		  /* 8207CDE8h */ case    9:  		/* li R11, 0 */
		/* 8207CDE8h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207CDE8h case    9:*/		return 0x8207CDEC;
		  /* 8207CDECh */ case   10:  		/* li R3, 0 */
		/* 8207CDECh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207CDECh case   10:*/		return 0x8207CDF0;
		  /* 8207CDF0h */ case   11:  		/* stw R11, <#[R31 + 24424]> */
		/* 8207CDF0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F68) );
		/* 8207CDF0h case   11:*/		return 0x8207CDF4;
		  /* 8207CDF4h */ case   12:  		/* b 136 */
		/* 8207CDF4h case   12:*/		return 0x8207CE7C;
		/* 8207CDF4h case   12:*/		return 0x8207CDF8;
	}
	return 0x8207CDF8;
} // Block from 8207CDC4h-8207CDF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207CDF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CDF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CDF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CDF8);
		  /* 8207CDF8h */ case    0:  		/* li R10, 63 */
		/* 8207CDF8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3F);
		/* 8207CDF8h case    0:*/		return 0x8207CDFC;
		  /* 8207CDFCh */ case    1:  		/* li R11, 0 */
		/* 8207CDFCh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207CDFCh case    1:*/		return 0x8207CE00;
		  /* 8207CE00h */ case    2:  		/* mtspr CTR, R10 */
		/* 8207CE00h case    2:*/		regs.CTR = regs.R10;
		/* 8207CE00h case    2:*/		return 0x8207CE04;
		  /* 8207CE04h */ case    3:  		/* lwz R10, <#[R31 + 24424]> */
		/* 8207CE04h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005F68) );
		/* 8207CE04h case    3:*/		return 0x8207CE08;
		  /* 8207CE08h */ case    4:  		/* lis R9, -32768 */
		/* 8207CE08h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8000);
		/* 8207CE08h case    4:*/		return 0x8207CE0C;
		  /* 8207CE0Ch */ case    5:  		/* lis R8, 2989 */
		/* 8207CE0Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0xBAD);
		/* 8207CE0Ch case    5:*/		return 0x8207CE10;
		  /* 8207CE10h */ case    6:  		/* ori R8, R8, 53261 */
		/* 8207CE10h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xD00D);
		/* 8207CE10h case    6:*/		return 0x8207CE14;
		  /* 8207CE14h */ case    7:  		/* stwx R9, <#[R11 + R10]> */
		/* 8207CE14h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207CE14h case    7:*/		return 0x8207CE18;
		  /* 8207CE18h */ case    8:  		/* lwz R10, <#[R31 + 24424]> */
		/* 8207CE18h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005F68) );
		/* 8207CE18h case    8:*/		return 0x8207CE1C;
		  /* 8207CE1Ch */ case    9:  		/* add R10, R11, R10 */
		/* 8207CE1Ch case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8207CE1Ch case    9:*/		return 0x8207CE20;
		  /* 8207CE20h */ case   10:  		/* addi R11, R11, 128 */
		/* 8207CE20h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8207CE20h case   10:*/		return 0x8207CE24;
		  /* 8207CE24h */ case   11:  		/* stw R8, <#[R10 + 4]> */
		/* 8207CE24h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 8207CE24h case   11:*/		return 0x8207CE28;
		  /* 8207CE28h */ case   12:  		/* bc 16, CR0_LT, -36 */
		/* 8207CE28h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207CE04;  }
		/* 8207CE28h case   12:*/		return 0x8207CE2C;
		  /* 8207CE2Ch */ case   13:  		/* lis R4, -19072 */
		/* 8207CE2Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 8207CE2Ch case   13:*/		return 0x8207CE30;
		  /* 8207CE30h */ case   14:  		/* li R3, 256 */
		/* 8207CE30h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x100);
		/* 8207CE30h case   14:*/		return 0x8207CE34;
		  /* 8207CE34h */ case   15:  		/* bl 46028 */
		/* 8207CE34h case   15:*/		regs.LR = 0x8207CE38; return 0x82088200;
		/* 8207CE34h case   15:*/		return 0x8207CE38;
		  /* 8207CE38h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 8207CE38h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207CE38h case   16:*/		return 0x8207CE3C;
		  /* 8207CE3Ch */ case   17:  		/* stw R3, <#[R31 + 24448]> */
		/* 8207CE3Ch case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F80) );
		/* 8207CE3Ch case   17:*/		return 0x8207CE40;
		  /* 8207CE40h */ case   18:  		/* bc 12, CR0_EQ, -132 */
		/* 8207CE40h case   18:*/		if ( regs.CR[0].eq ) { return 0x8207CDBC;  }
		/* 8207CE40h case   18:*/		return 0x8207CE44;
		  /* 8207CE44h */ case   19:  		/* lis R4, 25728 */
		/* 8207CE44h case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 8207CE44h case   19:*/		return 0x8207CE48;
		  /* 8207CE48h */ case   20:  		/* li R3, 256 */
		/* 8207CE48h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x100);
		/* 8207CE48h case   20:*/		return 0x8207CE4C;
		  /* 8207CE4Ch */ case   21:  		/* bl 46004 */
		/* 8207CE4Ch case   21:*/		regs.LR = 0x8207CE50; return 0x82088200;
		/* 8207CE4Ch case   21:*/		return 0x8207CE50;
		  /* 8207CE50h */ case   22:  		/* stw R3, <#[R31 + 24452]> */
		/* 8207CE50h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F84) );
		/* 8207CE50h case   22:*/		return 0x8207CE54;
		  /* 8207CE54h */ case   23:  		/* cmplwi CR0, R3, 0 */
		/* 8207CE54h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207CE54h case   23:*/		return 0x8207CE58;
		  /* 8207CE58h */ case   24:  		/* bc 4, CR0_EQ, 32 */
		/* 8207CE58h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8207CE78;  }
		/* 8207CE58h case   24:*/		return 0x8207CE5C;
		  /* 8207CE5Ch */ case   25:  		/* lis R4, -20096 */
		/* 8207CE5Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207CE5Ch case   25:*/		return 0x8207CE60;
		  /* 8207CE60h */ case   26:  		/* lwz R3, <#[R31 + 24448]> */
		/* 8207CE60h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00005F80) );
		/* 8207CE60h case   26:*/		return 0x8207CE64;
		  /* 8207CE64h */ case   27:  		/* bl 46292 */
		/* 8207CE64h case   27:*/		regs.LR = 0x8207CE68; return 0x82088338;
		/* 8207CE64h case   27:*/		return 0x8207CE68;
		  /* 8207CE68h */ case   28:  		/* li R11, 0 */
		/* 8207CE68h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207CE68h case   28:*/		return 0x8207CE6C;
		  /* 8207CE6Ch */ case   29:  		/* li R3, 0 */
		/* 8207CE6Ch case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207CE6Ch case   29:*/		return 0x8207CE70;
		  /* 8207CE70h */ case   30:  		/* stw R11, <#[R31 + 24448]> */
		/* 8207CE70h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F80) );
		/* 8207CE70h case   30:*/		return 0x8207CE74;
		  /* 8207CE74h */ case   31:  		/* b 8 */
		/* 8207CE74h case   31:*/		return 0x8207CE7C;
		/* 8207CE74h case   31:*/		return 0x8207CE78;
	}
	return 0x8207CE78;
} // Block from 8207CDF8h-8207CE78h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8207CE78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CE78);
		  /* 8207CE78h */ case    0:  		/* li R3, 1 */
		/* 8207CE78h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207CE78h case    0:*/		return 0x8207CE7C;
	}
	return 0x8207CE7C;
} // Block from 8207CE78h-8207CE7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207CE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CE7C);
		  /* 8207CE7Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8207CE7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207CE7Ch case    0:*/		return 0x8207CE80;
		  /* 8207CE80h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CE80h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CE80h case    1:*/		return 0x8207CE84;
		  /* 8207CE84h */ case    2:  		/* mtspr LR, R12 */
		/* 8207CE84h case    2:*/		regs.LR = regs.R12;
		/* 8207CE84h case    2:*/		return 0x8207CE88;
		  /* 8207CE88h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8207CE88h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CE88h case    3:*/		return 0x8207CE8C;
		  /* 8207CE8Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207CE8Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CE8Ch case    4:*/		return 0x8207CE90;
	}
	return 0x8207CE90;
} // Block from 8207CE7Ch-8207CE90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207CE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CE90);
		  /* 8207CE90h */ case    0:  		/* mfspr R12, LR */
		/* 8207CE90h case    0:*/		regs.R12 = regs.LR;
		/* 8207CE90h case    0:*/		return 0x8207CE94;
		  /* 8207CE94h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CE94h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CE94h case    1:*/		return 0x8207CE98;
		  /* 8207CE98h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207CE98h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207CE98h case    2:*/		return 0x8207CE9C;
		  /* 8207CE9Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207CE9Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CE9Ch case    3:*/		return 0x8207CEA0;
		  /* 8207CEA0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207CEA0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207CEA0h case    4:*/		return 0x8207CEA4;
		  /* 8207CEA4h */ case    5:  		/* lis R4, -20096 */
		/* 8207CEA4h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207CEA4h case    5:*/		return 0x8207CEA8;
		  /* 8207CEA8h */ case    6:  		/* mr R30, R3 */
		/* 8207CEA8h case    6:*/		regs.R30 = regs.R3;
		/* 8207CEA8h case    6:*/		return 0x8207CEAC;
		  /* 8207CEACh */ case    7:  		/* lwz R3, <#[R3 + 24424]> */
		/* 8207CEACh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00005F68) );
		/* 8207CEACh case    7:*/		return 0x8207CEB0;
		  /* 8207CEB0h */ case    8:  		/* bl 46216 */
		/* 8207CEB0h case    8:*/		regs.LR = 0x8207CEB4; return 0x82088338;
		/* 8207CEB0h case    8:*/		return 0x8207CEB4;
		  /* 8207CEB4h */ case    9:  		/* li R31, 0 */
		/* 8207CEB4h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8207CEB4h case    9:*/		return 0x8207CEB8;
		  /* 8207CEB8h */ case   10:  		/* lis R4, 9344 */
		/* 8207CEB8h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207CEB8h case   10:*/		return 0x8207CEBC;
		  /* 8207CEBCh */ case   11:  		/* lwz R3, <#[R30 + 24432]> */
		/* 8207CEBCh case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00005F70) );
		/* 8207CEBCh case   11:*/		return 0x8207CEC0;
		  /* 8207CEC0h */ case   12:  		/* stw R31, <#[R30 + 24424]> */
		/* 8207CEC0h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00005F68) );
		/* 8207CEC0h case   12:*/		return 0x8207CEC4;
		  /* 8207CEC4h */ case   13:  		/* bl 46196 */
		/* 8207CEC4h case   13:*/		regs.LR = 0x8207CEC8; return 0x82088338;
		/* 8207CEC4h case   13:*/		return 0x8207CEC8;
		  /* 8207CEC8h */ case   14:  		/* stw R31, <#[R30 + 24432]> */
		/* 8207CEC8h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00005F70) );
		/* 8207CEC8h case   14:*/		return 0x8207CECC;
		  /* 8207CECCh */ case   15:  		/* lis R4, -20096 */
		/* 8207CECCh case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207CECCh case   15:*/		return 0x8207CED0;
		  /* 8207CED0h */ case   16:  		/* lwz R3, <#[R30 + 24448]> */
		/* 8207CED0h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00005F80) );
		/* 8207CED0h case   16:*/		return 0x8207CED4;
		  /* 8207CED4h */ case   17:  		/* bl 46180 */
		/* 8207CED4h case   17:*/		regs.LR = 0x8207CED8; return 0x82088338;
		/* 8207CED4h case   17:*/		return 0x8207CED8;
		  /* 8207CED8h */ case   18:  		/* stw R31, <#[R30 + 24448]> */
		/* 8207CED8h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00005F80) );
		/* 8207CED8h case   18:*/		return 0x8207CEDC;
		  /* 8207CEDCh */ case   19:  		/* lis R4, 9344 */
		/* 8207CEDCh case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207CEDCh case   19:*/		return 0x8207CEE0;
		  /* 8207CEE0h */ case   20:  		/* lwz R3, <#[R30 + 24452]> */
		/* 8207CEE0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00005F84) );
		/* 8207CEE0h case   20:*/		return 0x8207CEE4;
		  /* 8207CEE4h */ case   21:  		/* bl 46164 */
		/* 8207CEE4h case   21:*/		regs.LR = 0x8207CEE8; return 0x82088338;
		/* 8207CEE4h case   21:*/		return 0x8207CEE8;
		  /* 8207CEE8h */ case   22:  		/* stw R31, <#[R30 + 24452]> */
		/* 8207CEE8h case   22:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00005F84) );
		/* 8207CEE8h case   22:*/		return 0x8207CEEC;
		  /* 8207CEECh */ case   23:  		/* addi R1, R1, 112 */
		/* 8207CEECh case   23:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207CEECh case   23:*/		return 0x8207CEF0;
		  /* 8207CEF0h */ case   24:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CEF0h case   24:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CEF0h case   24:*/		return 0x8207CEF4;
		  /* 8207CEF4h */ case   25:  		/* mtspr LR, R12 */
		/* 8207CEF4h case   25:*/		regs.LR = regs.R12;
		/* 8207CEF4h case   25:*/		return 0x8207CEF8;
		  /* 8207CEF8h */ case   26:  		/* ld R30, <#[R1 - 24]> */
		/* 8207CEF8h case   26:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207CEF8h case   26:*/		return 0x8207CEFC;
		  /* 8207CEFCh */ case   27:  		/* ld R31, <#[R1 - 16]> */
		/* 8207CEFCh case   27:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CEFCh case   27:*/		return 0x8207CF00;
		  /* 8207CF00h */ case   28:  		/* bclr 20, CR0_LT */
		/* 8207CF00h case   28:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CF00h case   28:*/		return 0x8207CF04;
	}
	return 0x8207CF04;
} // Block from 8207CE90h-8207CF04h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8207CF04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CF04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CF04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CF04);
		  /* 8207CF04h */ case    0:  		/* nop */
		/* 8207CF04h case    0:*/		cpu::op::nop();
		/* 8207CF04h case    0:*/		return 0x8207CF08;
	}
	return 0x8207CF08;
} // Block from 8207CF04h-8207CF08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207CF08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CF08);
		  /* 8207CF08h */ case    0:  		/* mfspr R12, LR */
		/* 8207CF08h case    0:*/		regs.R12 = regs.LR;
		/* 8207CF08h case    0:*/		return 0x8207CF0C;
		  /* 8207CF0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CF0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CF0Ch case    1:*/		return 0x8207CF10;
		  /* 8207CF10h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207CF10h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CF10h case    2:*/		return 0x8207CF14;
		  /* 8207CF14h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207CF14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207CF14h case    3:*/		return 0x8207CF18;
		  /* 8207CF18h */ case    4:  		/* lwz R11, <#[R3 + 56]> */
		/* 8207CF18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8207CF18h case    4:*/		return 0x8207CF1C;
		  /* 8207CF1Ch */ case    5:  		/* mr R31, R3 */
		/* 8207CF1Ch case    5:*/		regs.R31 = regs.R3;
		/* 8207CF1Ch case    5:*/		return 0x8207CF20;
		  /* 8207CF20h */ case    6:  		/* lwz R3, <#[R3 + 48]> */
		/* 8207CF20h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 8207CF20h case    6:*/		return 0x8207CF24;
		  /* 8207CF24h */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 8207CF24h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207CF24h case    7:*/		return 0x8207CF28;
		  /* 8207CF28h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 8207CF28h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8207CF34;  }
		/* 8207CF28h case    8:*/		return 0x8207CF2C;
		  /* 8207CF2Ch */ case    9:  		/* mr R3, R31 */
		/* 8207CF2Ch case    9:*/		regs.R3 = regs.R31;
		/* 8207CF2Ch case    9:*/		return 0x8207CF30;
		  /* 8207CF30h */ case   10:  		/* bl -36392 */
		/* 8207CF30h case   10:*/		regs.LR = 0x8207CF34; return 0x82074108;
		/* 8207CF30h case   10:*/		return 0x8207CF34;
	}
	return 0x8207CF34;
} // Block from 8207CF08h-8207CF34h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207CF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CF34);
		  /* 8207CF34h */ case    0:  		/* lbz R11, <#[R31 + 11072]> */
		/* 8207CF34h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207CF34h case    0:*/		return 0x8207CF38;
		  /* 8207CF38h */ case    1:  		/* lis R10, 2 */
		/* 8207CF38h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2);
		/* 8207CF38h case    1:*/		return 0x8207CF3C;
		  /* 8207CF3Ch */ case    2:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 8207CF3Ch case    2:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 8207CF3Ch case    2:*/		return 0x8207CF40;
		  /* 8207CF40h */ case    3:  		/* li R11, 1480 */
		/* 8207CF40h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x5C8);
		/* 8207CF40h case    3:*/		return 0x8207CF44;
		  /* 8207CF44h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207CF44h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207CF44h case    4:*/		return 0x8207CF48;
		  /* 8207CF48h */ case    5:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207CF48h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207CF48h case    5:*/		return 0x8207CF4C;
		  /* 8207CF4Ch */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 8207CF4Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8207CF78;  }
		/* 8207CF4Ch case    6:*/		return 0x8207CF50;
		  /* 8207CF50h */ case    7:  		/* li R11, 3584 */
		/* 8207CF50h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0xE00);
		/* 8207CF50h case    7:*/		return 0x8207CF54;
		  /* 8207CF54h */ case    8:  		/* li R9, 1 */
		/* 8207CF54h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8207CF54h case    8:*/		return 0x8207CF58;
		  /* 8207CF58h */ case    9:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207CF58h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207CF58h case    9:*/		return 0x8207CF5C;
		  /* 8207CF5Ch */ case   10:  		/* li R8, 3648 */
		/* 8207CF5Ch case   10:*/		cpu::op::li<0>(regs,&regs.R8,0xE40);
		/* 8207CF5Ch case   10:*/		return 0x8207CF60;
		  /* 8207CF60h */ case   11:  		/* li R7, 1 */
		/* 8207CF60h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8207CF60h case   11:*/		return 0x8207CF64;
		  /* 8207CF64h */ case   12:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207CF64h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207CF64h case   12:*/		return 0x8207CF68;
		  /* 8207CF68h */ case   13:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207CF68h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207CF68h case   13:*/		return 0x8207CF6C;
		  /* 8207CF6Ch */ case   14:  		/* mr R11, R3 */
		/* 8207CF6Ch case   14:*/		regs.R11 = regs.R3;
		/* 8207CF6Ch case   14:*/		return 0x8207CF70;
		  /* 8207CF70h */ case   15:  		/* stwu R7, <#[R11 + 4]> */
		/* 8207CF70h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207CF70h case   15:*/		return 0x8207CF74;
		  /* 8207CF74h */ case   16:  		/* b 8 */
		/* 8207CF74h case   16:*/		return 0x8207CF7C;
		/* 8207CF74h case   16:*/		return 0x8207CF78;
	}
	return 0x8207CF78;
} // Block from 8207CF34h-8207CF78h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207CF78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CF78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CF78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CF78);
		  /* 8207CF78h */ case    0:  		/* mr R11, R3 */
		/* 8207CF78h case    0:*/		regs.R11 = regs.R3;
		/* 8207CF78h case    0:*/		return 0x8207CF7C;
	}
	return 0x8207CF7C;
} // Block from 8207CF78h-8207CF7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207CF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CF7C);
		  /* 8207CF7Ch */ case    0:  		/* lbz R10, <#[R31 + 11072]> */
		/* 8207CF7Ch case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207CF7Ch case    0:*/		return 0x8207CF80;
		  /* 8207CF80h */ case    1:  		/* lbz R9, <#[R31 + 11071]> */
		/* 8207CF80h case    1:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B3F) );
		/* 8207CF80h case    1:*/		return 0x8207CF84;
		  /* 8207CF84h */ case    2:  		/* stw R11, <#[R31 + 48]> */
		/* 8207CF84h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207CF84h case    2:*/		return 0x8207CF88;
		  /* 8207CF88h */ case    3:  		/* rlwinm R10, R10, 0, 26, 31 */
		/* 8207CF88h case    3:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R10,regs.R10);
		/* 8207CF88h case    3:*/		return 0x8207CF8C;
		  /* 8207CF8Ch */ case    4:  		/* rlwinm R11, R9, 0, 0, 29 */
		/* 8207CF8Ch case    4:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R9);
		/* 8207CF8Ch case    4:*/		return 0x8207CF90;
		  /* 8207CF90h */ case    5:  		/* stb R10, <#[R31 + 11072]> */
		/* 8207CF90h case    5:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207CF90h case    5:*/		return 0x8207CF94;
		  /* 8207CF94h */ case    6:  		/* stb R11, <#[R31 + 11071]> */
		/* 8207CF94h case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 8207CF94h case    6:*/		return 0x8207CF98;
		  /* 8207CF98h */ case    7:  		/* ld R11, <#[R31 + 32]> */
		/* 8207CF98h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8207CF98h case    7:*/		return 0x8207CF9C;
		  /* 8207CF9Ch */ case    8:  		/* rldicl R11, R11, 0, 2 */
		/* 8207CF9Ch case    8:*/		cpu::op::rldicl<0,0,2>(regs,&regs.R11,regs.R11);
		/* 8207CF9Ch case    8:*/		return 0x8207CFA0;
		  /* 8207CFA0h */ case    9:  		/* std R11, <#[R31 + 32]> */
		/* 8207CFA0h case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8207CFA0h case    9:*/		return 0x8207CFA4;
		  /* 8207CFA4h */ case   10:  		/* addi R1, R1, 96 */
		/* 8207CFA4h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207CFA4h case   10:*/		return 0x8207CFA8;
		  /* 8207CFA8h */ case   11:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207CFA8h case   11:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CFA8h case   11:*/		return 0x8207CFAC;
		  /* 8207CFACh */ case   12:  		/* mtspr LR, R12 */
		/* 8207CFACh case   12:*/		regs.LR = regs.R12;
		/* 8207CFACh case   12:*/		return 0x8207CFB0;
		  /* 8207CFB0h */ case   13:  		/* ld R31, <#[R1 - 16]> */
		/* 8207CFB0h case   13:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CFB0h case   13:*/		return 0x8207CFB4;
		  /* 8207CFB4h */ case   14:  		/* bclr 20, CR0_LT */
		/* 8207CFB4h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207CFB4h case   14:*/		return 0x8207CFB8;
	}
	return 0x8207CFB8;
} // Block from 8207CF7Ch-8207CFB8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207CFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207CFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207CFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207CFB8);
		  /* 8207CFB8h */ case    0:  		/* mfspr R12, LR */
		/* 8207CFB8h case    0:*/		regs.R12 = regs.LR;
		/* 8207CFB8h case    0:*/		return 0x8207CFBC;
		  /* 8207CFBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207CFBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207CFBCh case    1:*/		return 0x8207CFC0;
		  /* 8207CFC0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207CFC0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207CFC0h case    2:*/		return 0x8207CFC4;
		  /* 8207CFC4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207CFC4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207CFC4h case    3:*/		return 0x8207CFC8;
		  /* 8207CFC8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207CFC8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207CFC8h case    4:*/		return 0x8207CFCC;
		  /* 8207CFCCh */ case    5:  		/* mr R31, R3 */
		/* 8207CFCCh case    5:*/		regs.R31 = regs.R3;
		/* 8207CFCCh case    5:*/		return 0x8207CFD0;
		  /* 8207CFD0h */ case    6:  		/* addi R11, R3, 60 */
		/* 8207CFD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x3C);
		/* 8207CFD0h case    6:*/		return 0x8207CFD4;
		  /* 8207CFD4h */ case    7:  		/* mfmsr R9, MSR */
		/* 8207CFD4h case    7:*/		regs.R9 = regs.MSR;
		/* 8207CFD4h case    7:*/		return 0x8207CFD8;
		  /* 8207CFD8h */ case    8:  		/* mtmsrd MSR, R13 */
		/* 8207CFD8h case    8:*/		regs.MSR = regs.R13;
		/* 8207CFD8h case    8:*/		return 0x8207CFDC;
		  /* 8207CFDCh */ case    9:  		/* lwarx R10, <#[R11]> */
		/* 8207CFDCh case    9:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207CFDCh case    9:*/		return 0x8207CFE0;
		  /* 8207CFE0h */ case   10:  		/* addi R10, R10, -1 */
		/* 8207CFE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207CFE0h case   10:*/		return 0x8207CFE4;
		  /* 8207CFE4h */ case   11:  		/* stwcx. R10, <#[R11]> */
		/* 8207CFE4h case   11:*/		cpu::mem::stwcx( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207CFE4h case   11:*/		return 0x8207CFE8;
		  /* 8207CFE8h */ case   12:  		/* mtmsrd MSR, R9 */
		/* 8207CFE8h case   12:*/		regs.MSR = regs.R9;
		/* 8207CFE8h case   12:*/		return 0x8207CFEC;
		  /* 8207CFECh */ case   13:  		/* bc 4, CR0_EQ, -24 */
		/* 8207CFECh case   13:*/		if ( !regs.CR[0].eq ) { return 0x8207CFD4;  }
		/* 8207CFECh case   13:*/		return 0x8207CFF0;
		  /* 8207CFF0h */ case   14:  		/* mr R30, R10 */
		/* 8207CFF0h case   14:*/		regs.R30 = regs.R10;
		/* 8207CFF0h case   14:*/		return 0x8207CFF4;
		  /* 8207CFF4h */ case   15:  		/* cmpwi CR6, R10, 0 */
		/* 8207CFF4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8207CFF4h case   15:*/		return 0x8207CFF8;
		  /* 8207CFF8h */ case   16:  		/* bc 4, CR6_EQ, 40 */
		/* 8207CFF8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8207D020;  }
		/* 8207CFF8h case   16:*/		return 0x8207CFFC;
		  /* 8207CFFCh */ case   17:  		/* lbz R11, <#[R31 + 11072]> */
		/* 8207CFFCh case   17:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207CFFCh case   17:*/		return 0x8207D000;
		  /* 8207D000h */ case   18:  		/* ori R11, R11, 16 */
		/* 8207D000h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8207D000h case   18:*/		return 0x8207D004;
		  /* 8207D004h */ case   19:  		/* stb R11, <#[R31 + 11072]> */
		/* 8207D004h case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207D004h case   19:*/		return 0x8207D008;
		  /* 8207D008h */ case   20:  		/* bl 45968 */
		/* 8207D008h case   20:*/		regs.LR = 0x8207D00C; return 0x82088398;
		/* 8207D008h case   20:*/		return 0x8207D00C;
		  /* 8207D00Ch */ case   21:  		/* mr R3, R31 */
		/* 8207D00Ch case   21:*/		regs.R3 = regs.R31;
		/* 8207D00Ch case   21:*/		return 0x8207D010;
		  /* 8207D010h */ case   22:  		/* bl 7992 */
		/* 8207D010h case   22:*/		regs.LR = 0x8207D014; return 0x8207EF48;
		/* 8207D010h case   22:*/		return 0x8207D014;
		  /* 8207D014h */ case   23:  		/* lis R4, 9344 */
		/* 8207D014h case   23:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207D014h case   23:*/		return 0x8207D018;
		  /* 8207D018h */ case   24:  		/* lwz R3, <#[R31 - 4]> */
		/* 8207D018h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8207D018h case   24:*/		return 0x8207D01C;
		  /* 8207D01Ch */ case   25:  		/* bl 45852 */
		/* 8207D01Ch case   25:*/		regs.LR = 0x8207D020; return 0x82088338;
		/* 8207D01Ch case   25:*/		return 0x8207D020;
	}
	return 0x8207D020;
} // Block from 8207CFB8h-8207D020h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207D020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D020);
		  /* 8207D020h */ case    0:  		/* mr R3, R30 */
		/* 8207D020h case    0:*/		regs.R3 = regs.R30;
		/* 8207D020h case    0:*/		return 0x8207D024;
		  /* 8207D024h */ case    1:  		/* addi R1, R1, 112 */
		/* 8207D024h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207D024h case    1:*/		return 0x8207D028;
		  /* 8207D028h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D028h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D028h case    2:*/		return 0x8207D02C;
		  /* 8207D02Ch */ case    3:  		/* mtspr LR, R12 */
		/* 8207D02Ch case    3:*/		regs.LR = regs.R12;
		/* 8207D02Ch case    3:*/		return 0x8207D030;
		  /* 8207D030h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8207D030h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D030h case    4:*/		return 0x8207D034;
		  /* 8207D034h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8207D034h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D034h case    5:*/		return 0x8207D038;
		  /* 8207D038h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207D038h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D038h case    6:*/		return 0x8207D03C;
	}
	return 0x8207D03C;
} // Block from 8207D020h-8207D03Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207D03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D03C);
		  /* 8207D03Ch */ case    0:  		/* nop */
		/* 8207D03Ch case    0:*/		cpu::op::nop();
		/* 8207D03Ch case    0:*/		return 0x8207D040;
	}
	return 0x8207D040;
} // Block from 8207D03Ch-8207D040h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207D040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D040);
		  /* 8207D040h */ case    0:  		/* mfspr R12, LR */
		/* 8207D040h case    0:*/		regs.R12 = regs.LR;
		/* 8207D040h case    0:*/		return 0x8207D044;
		  /* 8207D044h */ case    1:  		/* bl 82456 */
		/* 8207D044h case    1:*/		regs.LR = 0x8207D048; return 0x8209125C;
		/* 8207D044h case    1:*/		return 0x8207D048;
		  /* 8207D048h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207D048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207D048h case    2:*/		return 0x8207D04C;
		  /* 8207D04Ch */ case    3:  		/* mr R31, R3 */
		/* 8207D04Ch case    3:*/		regs.R31 = regs.R3;
		/* 8207D04Ch case    3:*/		return 0x8207D050;
		  /* 8207D050h */ case    4:  		/* li R30, 0 */
		/* 8207D050h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207D050h case    4:*/		return 0x8207D054;
		  /* 8207D054h */ case    5:  		/* addi R29, R3, 12816 */
		/* 8207D054h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x3210);
		/* 8207D054h case    5:*/		return 0x8207D058;
	}
	return 0x8207D058;
} // Block from 8207D040h-8207D058h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207D058h
// Function '?XBMDestroyContext@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D058);
		  /* 8207D058h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8207D058h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8207D058h case    0:*/		return 0x8207D05C;
		  /* 8207D05Ch */ case    1:  		/* lwz R10, <#[R31 + 15236]> */
		/* 8207D05Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003B84) );
		/* 8207D05Ch case    1:*/		return 0x8207D060;
		  /* 8207D060h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8207D060h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207D060h case    2:*/		return 0x8207D064;
		  /* 8207D064h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 8207D064h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207D078;  }
		/* 8207D064h case    3:*/		return 0x8207D068;
		  /* 8207D068h */ case    4:  		/* li R5, 0 */
		/* 8207D068h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207D068h case    4:*/		return 0x8207D06C;
		  /* 8207D06Ch */ case    5:  		/* mr R4, R30 */
		/* 8207D06Ch case    5:*/		regs.R4 = regs.R30;
		/* 8207D06Ch case    5:*/		return 0x8207D070;
		  /* 8207D070h */ case    6:  		/* mr R3, R31 */
		/* 8207D070h case    6:*/		regs.R3 = regs.R31;
		/* 8207D070h case    6:*/		return 0x8207D074;
		  /* 8207D074h */ case    7:  		/* bl -98748 */
		/* 8207D074h case    7:*/		regs.LR = 0x8207D078; return 0x82064EB8;
		/* 8207D074h case    7:*/		return 0x8207D078;
	}
	return 0x8207D078;
} // Block from 8207D058h-8207D078h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207D078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D078);
		  /* 8207D078h */ case    0:  		/* addi R30, R30, 1 */
		/* 8207D078h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207D078h case    0:*/		return 0x8207D07C;
		  /* 8207D07Ch */ case    1:  		/* addi R29, R29, 4 */
		/* 8207D07Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8207D07Ch case    1:*/		return 0x8207D080;
		  /* 8207D080h */ case    2:  		/* cmplwi CR6, R30, 4 */
		/* 8207D080h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 8207D080h case    2:*/		return 0x8207D084;
		  /* 8207D084h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 8207D084h case    3:*/		if ( regs.CR[6].lt ) { return 0x8207D058;  }
		/* 8207D084h case    3:*/		return 0x8207D088;
		  /* 8207D088h */ case    4:  		/* lwz R11, <#[R31 + 12832]> */
		/* 8207D088h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003220) );
		/* 8207D088h case    4:*/		return 0x8207D08C;
		  /* 8207D08Ch */ case    5:  		/* lwz R10, <#[R31 + 15228]> */
		/* 8207D08Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003B7C) );
		/* 8207D08Ch case    5:*/		return 0x8207D090;
		  /* 8207D090h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8207D090h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207D090h case    6:*/		return 0x8207D094;
		  /* 8207D094h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 8207D094h case    7:*/		if ( regs.CR[6].eq ) { return 0x8207D0A4;  }
		/* 8207D094h case    7:*/		return 0x8207D098;
		  /* 8207D098h */ case    8:  		/* li R4, 0 */
		/* 8207D098h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D098h case    8:*/		return 0x8207D09C;
		  /* 8207D09Ch */ case    9:  		/* mr R3, R31 */
		/* 8207D09Ch case    9:*/		regs.R3 = regs.R31;
		/* 8207D09Ch case    9:*/		return 0x8207D0A0;
		  /* 8207D0A0h */ case   10:  		/* bl -97880 */
		/* 8207D0A0h case   10:*/		regs.LR = 0x8207D0A4; return 0x82065248;
		/* 8207D0A0h case   10:*/		return 0x8207D0A4;
	}
	return 0x8207D0A4;
} // Block from 8207D078h-8207D0A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207D0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D0A4);
		  /* 8207D0A4h */ case    0:  		/* li R4, 0 */
		/* 8207D0A4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D0A4h case    0:*/		return 0x8207D0A8;
		  /* 8207D0A8h */ case    1:  		/* mr R3, R31 */
		/* 8207D0A8h case    1:*/		regs.R3 = regs.R31;
		/* 8207D0A8h case    1:*/		return 0x8207D0AC;
		  /* 8207D0ACh */ case    2:  		/* bl -82116 */
		/* 8207D0ACh case    2:*/		regs.LR = 0x8207D0B0; return 0x82068FE8;
		/* 8207D0ACh case    2:*/		return 0x8207D0B0;
		  /* 8207D0B0h */ case    3:  		/* li R4, 0 */
		/* 8207D0B0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D0B0h case    3:*/		return 0x8207D0B4;
		  /* 8207D0B4h */ case    4:  		/* mr R3, R31 */
		/* 8207D0B4h case    4:*/		regs.R3 = regs.R31;
		/* 8207D0B4h case    4:*/		return 0x8207D0B8;
		  /* 8207D0B8h */ case    5:  		/* bl -82648 */
		/* 8207D0B8h case    5:*/		regs.LR = 0x8207D0BC; return 0x82068DE0;
		/* 8207D0B8h case    5:*/		return 0x8207D0BC;
		  /* 8207D0BCh */ case    6:  		/* li R4, 0 */
		/* 8207D0BCh case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D0BCh case    6:*/		return 0x8207D0C0;
		  /* 8207D0C0h */ case    7:  		/* mr R3, R31 */
		/* 8207D0C0h case    7:*/		regs.R3 = regs.R31;
		/* 8207D0C0h case    7:*/		return 0x8207D0C4;
		  /* 8207D0C4h */ case    8:  		/* bl -81604 */
		/* 8207D0C4h case    8:*/		regs.LR = 0x8207D0C8; return 0x82069200;
		/* 8207D0C4h case    8:*/		return 0x8207D0C8;
		  /* 8207D0C8h */ case    9:  		/* li R4, 0 */
		/* 8207D0C8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D0C8h case    9:*/		return 0x8207D0CC;
		  /* 8207D0CCh */ case   10:  		/* mr R3, R31 */
		/* 8207D0CCh case   10:*/		regs.R3 = regs.R31;
		/* 8207D0CCh case   10:*/		return 0x8207D0D0;
		  /* 8207D0D0h */ case   11:  		/* bl -100704 */
		/* 8207D0D0h case   11:*/		regs.LR = 0x8207D0D4; return 0x82064770;
		/* 8207D0D0h case   11:*/		return 0x8207D0D4;
		  /* 8207D0D4h */ case   12:  		/* li R11, 1 */
		/* 8207D0D4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207D0D4h case   12:*/		return 0x8207D0D8;
		  /* 8207D0D8h */ case   13:  		/* li R30, 0 */
		/* 8207D0D8h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207D0D8h case   13:*/		return 0x8207D0DC;
		  /* 8207D0DCh */ case   14:  		/* rldicr R29, R11, 63, 63 */
		/* 8207D0DCh case   14:*/		cpu::op::rldicr<0,63,63>(regs,&regs.R29,regs.R11);
		/* 8207D0DCh case   14:*/		return 0x8207D0E0;
		  /* 8207D0E0h */ case   15:  		/* subfic R11, R30, 95 */
		/* 8207D0E0h case   15:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R30,0x5F);
		/* 8207D0E0h case   15:*/		return 0x8207D0E4;
		  /* 8207D0E4h */ case   16:  		/* li R7, 4 */
		/* 8207D0E4h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 8207D0E4h case   16:*/		return 0x8207D0E8;
		  /* 8207D0E8h */ case   17:  		/* mulli R11, R11, 21846 */
		/* 8207D0E8h case   17:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x5556);
		/* 8207D0E8h case   17:*/		return 0x8207D0EC;
		  /* 8207D0ECh */ case   18:  		/* rlwinm R11, R11, 16, 16, 31 */
		/* 8207D0ECh case   18:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R11,regs.R11);
		/* 8207D0ECh case   18:*/		return 0x8207D0F0;
		  /* 8207D0F0h */ case   19:  		/* li R6, 0 */
		/* 8207D0F0h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207D0F0h case   19:*/		return 0x8207D0F4;
		  /* 8207D0F4h */ case   20:  		/* addi R11, R11, 32 */
		/* 8207D0F4h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8207D0F4h case   20:*/		return 0x8207D0F8;
		  /* 8207D0F8h */ case   21:  		/* li R5, 0 */
		/* 8207D0F8h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207D0F8h case   21:*/		return 0x8207D0FC;
		  /* 8207D0FCh */ case   22:  		/* rldicl R11, R11, 0, 32 */
		/* 8207D0FCh case   22:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207D0FCh case   22:*/		return 0x8207D100;
		  /* 8207D100h */ case   23:  		/* mr R4, R30 */
		/* 8207D100h case   23:*/		regs.R4 = regs.R30;
		/* 8207D100h case   23:*/		return 0x8207D104;
		  /* 8207D104h */ case   24:  		/* srd R8, R29, R11 */
		/* 8207D104h case   24:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R29,regs.R11);
		/* 8207D104h case   24:*/		return 0x8207D108;
		  /* 8207D108h */ case   25:  		/* mr R3, R31 */
		/* 8207D108h case   25:*/		regs.R3 = regs.R31;
		/* 8207D108h case   25:*/		return 0x8207D10C;
		  /* 8207D10Ch */ case   26:  		/* bl -101052 */
		/* 8207D10Ch case   26:*/		regs.LR = 0x8207D110; return 0x82064650;
		/* 8207D10Ch case   26:*/		return 0x8207D110;
		  /* 8207D110h */ case   27:  		/* addi R30, R30, 1 */
		/* 8207D110h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207D110h case   27:*/		return 0x8207D114;
		  /* 8207D114h */ case   28:  		/* cmplwi CR6, R30, 16 */
		/* 8207D114h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 8207D114h case   28:*/		return 0x8207D118;
		  /* 8207D118h */ case   29:  		/* bc 12, CR6_LT, -56 */
		/* 8207D118h case   29:*/		if ( regs.CR[6].lt ) { return 0x8207D0E0;  }
		/* 8207D118h case   29:*/		return 0x8207D11C;
		  /* 8207D11Ch */ case   30:  		/* li R30, 0 */
		/* 8207D11Ch case   30:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207D11Ch case   30:*/		return 0x8207D120;
		  /* 8207D120h */ case   31:  		/* addi R11, R30, 32 */
		/* 8207D120h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x20);
		/* 8207D120h case   31:*/		return 0x8207D124;
		  /* 8207D124h */ case   32:  		/* li R5, 0 */
		/* 8207D124h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207D124h case   32:*/		return 0x8207D128;
		  /* 8207D128h */ case   33:  		/* rldicl R11, R11, 0, 32 */
		/* 8207D128h case   33:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207D128h case   33:*/		return 0x8207D12C;
		  /* 8207D12Ch */ case   34:  		/* mr R4, R30 */
		/* 8207D12Ch case   34:*/		regs.R4 = regs.R30;
		/* 8207D12Ch case   34:*/		return 0x8207D130;
		  /* 8207D130h */ case   35:  		/* srd R6, R29, R11 */
		/* 8207D130h case   35:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R29,regs.R11);
		/* 8207D130h case   35:*/		return 0x8207D134;
		  /* 8207D134h */ case   36:  		/* mr R3, R31 */
		/* 8207D134h case   36:*/		regs.R3 = regs.R31;
		/* 8207D134h case   36:*/		return 0x8207D138;
		  /* 8207D138h */ case   37:  		/* bl -90568 */
		/* 8207D138h case   37:*/		regs.LR = 0x8207D13C; return 0x82066F70;
		/* 8207D138h case   37:*/		return 0x8207D13C;
		  /* 8207D13Ch */ case   38:  		/* addi R30, R30, 1 */
		/* 8207D13Ch case   38:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207D13Ch case   38:*/		return 0x8207D140;
		  /* 8207D140h */ case   39:  		/* cmplwi CR6, R30, 26 */
		/* 8207D140h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000001A);
		/* 8207D140h case   39:*/		return 0x8207D144;
		  /* 8207D144h */ case   40:  		/* bc 12, CR6_LT, -36 */
		/* 8207D144h case   40:*/		if ( regs.CR[6].lt ) { return 0x8207D120;  }
		/* 8207D144h case   40:*/		return 0x8207D148;
		  /* 8207D148h */ case   41:  		/* addi R1, R1, 112 */
		/* 8207D148h case   41:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207D148h case   41:*/		return 0x8207D14C;
		  /* 8207D14Ch */ case   42:  		/* b 82272 */
		/* 8207D14Ch case   42:*/		return 0x820912AC;
		/* 8207D14Ch case   42:*/		return 0x8207D150;
	}
	return 0x8207D150;
} // Block from 8207D0A4h-8207D150h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8207D150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D150);
		  /* 8207D150h */ case    0:  		/* mfspr R12, LR */
		/* 8207D150h case    0:*/		regs.R12 = regs.LR;
		/* 8207D150h case    0:*/		return 0x8207D154;
		  /* 8207D154h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207D154h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D154h case    1:*/		return 0x8207D158;
		  /* 8207D158h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207D158h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D158h case    2:*/		return 0x8207D15C;
		  /* 8207D15Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207D15Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207D15Ch case    3:*/		return 0x8207D160;
	}
	return 0x8207D160;
} // Block from 8207D150h-8207D160h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207D160h
// Function '?XBMCreateContext@D3D@@YAJPAVCDevice@1@PAUD3DBaseTexture@@PBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D160);
		  /* 8207D160h */ case    0:  		/* mr R31, R4 */
		/* 8207D160h case    0:*/		regs.R31 = regs.R4;
		/* 8207D160h case    0:*/		return 0x8207D164;
		  /* 8207D164h */ case    1:  		/* lis R4, 9344 */
		/* 8207D164h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207D164h case    1:*/		return 0x8207D168;
		  /* 8207D168h */ case    2:  		/* add R3, R3, R31 */
		/* 8207D168h case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R31);
		/* 8207D168h case    2:*/		return 0x8207D16C;
		  /* 8207D16Ch */ case    3:  		/* bl 45204 */
		/* 8207D16Ch case    3:*/		regs.LR = 0x8207D170; return 0x82088200;
		/* 8207D16Ch case    3:*/		return 0x8207D170;
		  /* 8207D170h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8207D170h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207D170h case    4:*/		return 0x8207D174;
		  /* 8207D174h */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 8207D174h case    5:*/		if ( regs.CR[0].eq ) { return 0x8207D190;  }
		/* 8207D174h case    5:*/		return 0x8207D178;
		  /* 8207D178h */ case    6:  		/* add R11, R3, R31 */
		/* 8207D178h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R31);
		/* 8207D178h case    6:*/		return 0x8207D17C;
		  /* 8207D17Ch */ case    7:  		/* addi R10, R31, -1 */
		/* 8207D17Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFFF);
		/* 8207D17Ch case    7:*/		return 0x8207D180;
		  /* 8207D180h */ case    8:  		/* addi R11, R11, 3 */
		/* 8207D180h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x3);
		/* 8207D180h case    8:*/		return 0x8207D184;
		  /* 8207D184h */ case    9:  		/* andc R11, R11, R10 */
		/* 8207D184h case    9:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207D184h case    9:*/		return 0x8207D188;
		  /* 8207D188h */ case   10:  		/* stw R3, <#[R11 - 4]> */
		/* 8207D188h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8207D188h case   10:*/		return 0x8207D18C;
		  /* 8207D18Ch */ case   11:  		/* mr R3, R11 */
		/* 8207D18Ch case   11:*/		regs.R3 = regs.R11;
		/* 8207D18Ch case   11:*/		return 0x8207D190;
	}
	return 0x8207D190;
} // Block from 8207D160h-8207D190h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207D190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D190);
		  /* 8207D190h */ case    0:  		/* addi R1, R1, 96 */
		/* 8207D190h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207D190h case    0:*/		return 0x8207D194;
		  /* 8207D194h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D194h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D194h case    1:*/		return 0x8207D198;
		  /* 8207D198h */ case    2:  		/* mtspr LR, R12 */
		/* 8207D198h case    2:*/		regs.LR = regs.R12;
		/* 8207D198h case    2:*/		return 0x8207D19C;
		  /* 8207D19Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8207D19Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D19Ch case    3:*/		return 0x8207D1A0;
		  /* 8207D1A0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207D1A0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D1A0h case    4:*/		return 0x8207D1A4;
	}
	return 0x8207D1A4;
} // Block from 8207D190h-8207D1A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207D1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D1A4);
		  /* 8207D1A4h */ case    0:  		/* nop */
		/* 8207D1A4h case    0:*/		cpu::op::nop();
		/* 8207D1A4h case    0:*/		return 0x8207D1A8;
	}
	return 0x8207D1A8;
} // Block from 8207D1A4h-8207D1A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207D1A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D1A8);
		  /* 8207D1A8h */ case    0:  		/* mfspr R12, LR */
		/* 8207D1A8h case    0:*/		regs.R12 = regs.LR;
		/* 8207D1A8h case    0:*/		return 0x8207D1AC;
		  /* 8207D1ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207D1ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D1ACh case    1:*/		return 0x8207D1B0;
		  /* 8207D1B0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207D1B0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D1B0h case    2:*/		return 0x8207D1B4;
		  /* 8207D1B4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207D1B4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D1B4h case    3:*/		return 0x8207D1B8;
		  /* 8207D1B8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207D1B8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207D1B8h case    4:*/		return 0x8207D1BC;
		  /* 8207D1BCh */ case    5:  		/* mr R30, R3 */
		/* 8207D1BCh case    5:*/		regs.R30 = regs.R3;
		/* 8207D1BCh case    5:*/		return 0x8207D1C0;
		  /* 8207D1C0h */ case    6:  		/* bl -112 */
		/* 8207D1C0h case    6:*/		regs.LR = 0x8207D1C4; return 0x8207D150;
		/* 8207D1C0h case    6:*/		return 0x8207D1C4;
		  /* 8207D1C4h */ case    7:  		/* or. R31, R3, R3 */
		/* 8207D1C4h case    7:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8207D1C4h case    7:*/		return 0x8207D1C8;
		  /* 8207D1C8h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8207D1C8h case    8:*/		if ( regs.CR[0].eq ) { return 0x8207D1DC;  }
		/* 8207D1C8h case    8:*/		return 0x8207D1CC;
		  /* 8207D1CCh */ case    9:  		/* mr R5, R30 */
		/* 8207D1CCh case    9:*/		regs.R5 = regs.R30;
		/* 8207D1CCh case    9:*/		return 0x8207D1D0;
		  /* 8207D1D0h */ case   10:  		/* li R4, 0 */
		/* 8207D1D0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207D1D0h case   10:*/		return 0x8207D1D4;
		  /* 8207D1D4h */ case   11:  		/* mr R3, R31 */
		/* 8207D1D4h case   11:*/		regs.R3 = regs.R31;
		/* 8207D1D4h case   11:*/		return 0x8207D1D8;
		  /* 8207D1D8h */ case   12:  		/* bl 82280 */
		/* 8207D1D8h case   12:*/		regs.LR = 0x8207D1DC; return 0x82091340;
		/* 8207D1D8h case   12:*/		return 0x8207D1DC;
	}
	return 0x8207D1DC;
} // Block from 8207D1A8h-8207D1DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207D1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D1DC);
		  /* 8207D1DCh */ case    0:  		/* mr R3, R31 */
		/* 8207D1DCh case    0:*/		regs.R3 = regs.R31;
		/* 8207D1DCh case    0:*/		return 0x8207D1E0;
		  /* 8207D1E0h */ case    1:  		/* addi R1, R1, 112 */
		/* 8207D1E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207D1E0h case    1:*/		return 0x8207D1E4;
		  /* 8207D1E4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D1E4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D1E4h case    2:*/		return 0x8207D1E8;
		  /* 8207D1E8h */ case    3:  		/* mtspr LR, R12 */
		/* 8207D1E8h case    3:*/		regs.LR = regs.R12;
		/* 8207D1E8h case    3:*/		return 0x8207D1EC;
		  /* 8207D1ECh */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8207D1ECh case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D1ECh case    4:*/		return 0x8207D1F0;
		  /* 8207D1F0h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8207D1F0h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D1F0h case    5:*/		return 0x8207D1F4;
		  /* 8207D1F4h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207D1F4h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D1F4h case    6:*/		return 0x8207D1F8;
	}
	return 0x8207D1F8;
} // Block from 8207D1DCh-8207D1F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207D1F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D1F8);
		  /* 8207D1F8h */ case    0:  		/* mfspr R12, LR */
		/* 8207D1F8h case    0:*/		regs.R12 = regs.LR;
		/* 8207D1F8h case    0:*/		return 0x8207D1FC;
		  /* 8207D1FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207D1FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D1FCh case    1:*/		return 0x8207D200;
		  /* 8207D200h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207D200h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D200h case    2:*/		return 0x8207D204;
		  /* 8207D204h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207D204h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D204h case    3:*/		return 0x8207D208;
		  /* 8207D208h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207D208h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207D208h case    4:*/		return 0x8207D20C;
		  /* 8207D20Ch */ case    5:  		/* mr R31, R3 */
		/* 8207D20Ch case    5:*/		regs.R31 = regs.R3;
		/* 8207D20Ch case    5:*/		return 0x8207D210;
		  /* 8207D210h */ case    6:  		/* lis R4, -19072 */
		/* 8207D210h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 8207D210h case    6:*/		return 0x8207D214;
		  /* 8207D214h */ case    7:  		/* li R3, 4096 */
		/* 8207D214h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1000);
		/* 8207D214h case    7:*/		return 0x8207D218;
		  /* 8207D218h */ case    8:  		/* bl 45032 */
		/* 8207D218h case    8:*/		regs.LR = 0x8207D21C; return 0x82088200;
		/* 8207D218h case    8:*/		return 0x8207D21C;
		  /* 8207D21Ch */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8207D21Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207D21Ch case    9:*/		return 0x8207D220;
		  /* 8207D220h */ case   10:  		/* stw R3, <#[R31 + 24400]> */
		/* 8207D220h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D220h case   10:*/		return 0x8207D224;
		  /* 8207D224h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 8207D224h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8207D230;  }
		/* 8207D224h case   11:*/		return 0x8207D228;
		  /* 8207D228h */ case   12:  		/* li R3, 0 */
		/* 8207D228h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207D228h case   12:*/		return 0x8207D22C;
		  /* 8207D22Ch */ case   13:  		/* b 300 */
		/* 8207D22Ch case   13:*/		return 0x8207D358;
		/* 8207D22Ch case   13:*/		return 0x8207D230;
	}
	return 0x8207D230;
} // Block from 8207D1F8h-8207D230h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207D230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D230);
		  /* 8207D230h */ case    0:  		/* lis R4, 25728 */
		/* 8207D230h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 8207D230h case    0:*/		return 0x8207D234;
		  /* 8207D234h */ case    1:  		/* li R3, 512 */
		/* 8207D234h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x200);
		/* 8207D234h case    1:*/		return 0x8207D238;
		  /* 8207D238h */ case    2:  		/* bl 45000 */
		/* 8207D238h case    2:*/		regs.LR = 0x8207D23C; return 0x82088200;
		/* 8207D238h case    2:*/		return 0x8207D23C;
		  /* 8207D23Ch */ case    3:  		/* stw R3, <#[R31 + 24408]> */
		/* 8207D23Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00005F58) );
		/* 8207D23Ch case    3:*/		return 0x8207D240;
		  /* 8207D240h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 8207D240h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207D240h case    4:*/		return 0x8207D244;
		  /* 8207D244h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 8207D244h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8207D264;  }
		/* 8207D244h case    5:*/		return 0x8207D248;
		  /* 8207D248h */ case    6:  		/* lis R4, -20096 */
		/* 8207D248h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207D248h case    6:*/		return 0x8207D24C;
		  /* 8207D24Ch */ case    7:  		/* lwz R3, <#[R31 + 24400]> */
		/* 8207D24Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D24Ch case    7:*/		return 0x8207D250;
		  /* 8207D250h */ case    8:  		/* bl 45288 */
		/* 8207D250h case    8:*/		regs.LR = 0x8207D254; return 0x82088338;
		/* 8207D250h case    8:*/		return 0x8207D254;
		  /* 8207D254h */ case    9:  		/* li R11, 0 */
		/* 8207D254h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207D254h case    9:*/		return 0x8207D258;
		  /* 8207D258h */ case   10:  		/* li R3, 0 */
		/* 8207D258h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207D258h case   10:*/		return 0x8207D25C;
		  /* 8207D25Ch */ case   11:  		/* stw R11, <#[R31 + 24400]> */
		/* 8207D25Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D25Ch case   11:*/		return 0x8207D260;
		  /* 8207D260h */ case   12:  		/* b 248 */
		/* 8207D260h case   12:*/		return 0x8207D358;
		/* 8207D260h case   12:*/		return 0x8207D264;
	}
	return 0x8207D264;
} // Block from 8207D230h-8207D264h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207D264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D264);
		  /* 8207D264h */ case    0:  		/* lwz R11, <#[R31 + 24400]> */
		/* 8207D264h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D264h case    0:*/		return 0x8207D268;
		  /* 8207D268h */ case    1:  		/* lis R10, -16384 */
		/* 8207D268h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8207D268h case    1:*/		return 0x8207D26C;
		  /* 8207D26Ch */ case    2:  		/* li R9, 768 */
		/* 8207D26Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x300);
		/* 8207D26Ch case    2:*/		return 0x8207D270;
		  /* 8207D270h */ case    3:  		/* addi R11, R11, 28 */
		/* 8207D270h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 8207D270h case    3:*/		return 0x8207D274;
		  /* 8207D274h */ case    4:  		/* ori R10, R10, 15104 */
		/* 8207D274h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3B00);
		/* 8207D274h case    4:*/		return 0x8207D278;
		  /* 8207D278h */ case    5:  		/* lis R8, -16359 */
		/* 8207D278h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC019);
		/* 8207D278h case    5:*/		return 0x8207D27C;
		  /* 8207D27Ch */ case    6:  		/* li R7, 0 */
		/* 8207D27Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207D27Ch case    6:*/		return 0x8207D280;
		  /* 8207D280h */ case    7:  		/* ori R8, R8, 11008 */
		/* 8207D280h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2B00);
		/* 8207D280h case    7:*/		return 0x8207D284;
		  /* 8207D284h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 8207D284h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D284h case    8:*/		return 0x8207D288;
		  /* 8207D288h */ case    9:  		/* li R10, 24 */
		/* 8207D288h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x18);
		/* 8207D288h case    9:*/		return 0x8207D28C;
		  /* 8207D28Ch */ case   10:  		/* lis R6, -32256 */
		/* 8207D28Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 8207D28Ch case   10:*/		return 0x8207D290;
		  /* 8207D290h */ case   11:  		/* li R5, 96 */
		/* 8207D290h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x60);
		/* 8207D290h case   11:*/		return 0x8207D294;
		  /* 8207D294h */ case   12:  		/* addi R4, R6, 8832 */
		/* 8207D294h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R6,0x2280);
		/* 8207D294h case   12:*/		return 0x8207D298;
		  /* 8207D298h */ case   13:  		/* stwu R9, <#[R11 + 4]> */
		/* 8207D298h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D298h case   13:*/		return 0x8207D29C;
		  /* 8207D29Ch */ case   14:  		/* stwu R8, <#[R11 + 4]> */
		/* 8207D29Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D29Ch case   14:*/		return 0x8207D2A0;
		  /* 8207D2A0h */ case   15:  		/* stwu R7, <#[R11 + 4]> */
		/* 8207D2A0h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D2A0h case   15:*/		return 0x8207D2A4;
		  /* 8207D2A4h */ case   16:  		/* mr R30, R11 */
		/* 8207D2A4h case   16:*/		regs.R30 = regs.R11;
		/* 8207D2A4h case   16:*/		return 0x8207D2A8;
		  /* 8207D2A8h */ case   17:  		/* stwu R10, <#[R30 + 4]> */
		/* 8207D2A8h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8207D2A8h case   17:*/		return 0x8207D2AC;
		  /* 8207D2ACh */ case   18:  		/* addi R3, R30, 4 */
		/* 8207D2ACh case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x4);
		/* 8207D2ACh case   18:*/		return 0x8207D2B0;
		  /* 8207D2B0h */ case   19:  		/* bl 83712 */
		/* 8207D2B0h case   19:*/		regs.LR = 0x8207D2B4; return 0x820919B0;
		/* 8207D2B0h case   19:*/		return 0x8207D2B4;
		  /* 8207D2B4h */ case   20:  		/* addi R11, R30, 96 */
		/* 8207D2B4h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x60);
		/* 8207D2B4h case   20:*/		return 0x8207D2B8;
		  /* 8207D2B8h */ case   21:  		/* li R10, 8709 */
		/* 8207D2B8h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x2205);
		/* 8207D2B8h case   21:*/		return 0x8207D2BC;
		  /* 8207D2BCh */ case   22:  		/* lis R9, 1 */
		/* 8207D2BCh case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0x1);
		/* 8207D2BCh case   22:*/		return 0x8207D2C0;
		  /* 8207D2C0h */ case   23:  		/* li R8, 1 */
		/* 8207D2C0h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8207D2C0h case   23:*/		return 0x8207D2C4;
		  /* 8207D2C4h */ case   24:  		/* ori R9, R9, 8576 */
		/* 8207D2C4h case   24:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2180);
		/* 8207D2C4h case   24:*/		return 0x8207D2C8;
		  /* 8207D2C8h */ case   25:  		/* stwu R10, <#[R11 + 4]> */
		/* 8207D2C8h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D2C8h case   25:*/		return 0x8207D2CC;
		  /* 8207D2CCh */ case   26:  		/* li R10, 15 */
		/* 8207D2CCh case   26:*/		cpu::op::li<0>(regs,&regs.R10,0xF);
		/* 8207D2CCh case   26:*/		return 0x8207D2D0;
		  /* 8207D2D0h */ case   27:  		/* li R7, 0 */
		/* 8207D2D0h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207D2D0h case   27:*/		return 0x8207D2D4;
		  /* 8207D2D4h */ case   28:  		/* mtspr CTR, R10 */
		/* 8207D2D4h case   28:*/		regs.CTR = regs.R10;
		/* 8207D2D4h case   28:*/		return 0x8207D2D8;
		  /* 8207D2D8h */ case   29:  		/* lwz R10, <#[R31 + 10568]> */
		/* 8207D2D8h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002948) );
		/* 8207D2D8h case   29:*/		return 0x8207D2DC;
		  /* 8207D2DCh */ case   30:  		/* rlwinm R10, R10, 0, 29, 20 */
		/* 8207D2DCh case   30:*/		cpu::op::rlwinm<0,0,29,20>(regs,&regs.R10,regs.R10);
		/* 8207D2DCh case   30:*/		return 0x8207D2E0;
		  /* 8207D2E0h */ case   31:  		/* stwu R10, <#[R11 + 4]> */
		/* 8207D2E0h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D2E0h case   31:*/		return 0x8207D2E4;
		  /* 8207D2E4h */ case   32:  		/* stwu R9, <#[R11 + 4]> */
		/* 8207D2E4h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D2E4h case   32:*/		return 0x8207D2E8;
		  /* 8207D2E8h */ case   33:  		/* stwu R8, <#[R11 + 4]> */
		/* 8207D2E8h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8207D2E8h case   33:*/		return 0x8207D2EC;
		  /* 8207D2ECh */ case   34:  		/* mr R9, R11 */
		/* 8207D2ECh case   34:*/		regs.R9 = regs.R11;
		/* 8207D2ECh case   34:*/		return 0x8207D2F0;
		  /* 8207D2F0h */ case   35:  		/* stwu R7, <#[R9 + 4]> */
		/* 8207D2F0h case   35:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D2F0h case   35:*/		return 0x8207D2F4;
		  /* 8207D2F4h */ case   36:  		/* lwz R10, <#[R31 + 24400]> */
		/* 8207D2F4h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D2F4h case   36:*/		return 0x8207D2F8;
		  /* 8207D2F8h */ case   37:  		/* rlwinm R11, R10, 12, 20, 31 */
		/* 8207D2F8h case   37:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R10);
		/* 8207D2F8h case   37:*/		return 0x8207D2FC;
		  /* 8207D2FCh */ case   38:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 8207D2FCh case   38:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 8207D2FCh case   38:*/		return 0x8207D300;
		  /* 8207D300h */ case   39:  		/* addi R11, R11, 512 */
		/* 8207D300h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8207D300h case   39:*/		return 0x8207D304;
		  /* 8207D304h */ case   40:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207D304h case   40:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207D304h case   40:*/		return 0x8207D308;
		  /* 8207D308h */ case   41:  		/* add R11, R11, R10 */
		/* 8207D308h case   41:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207D308h case   41:*/		return 0x8207D30C;
		  /* 8207D30Ch */ case   42:  		/* lis R10, -16381 */
		/* 8207D30Ch case   42:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC003);
		/* 8207D30Ch case   42:*/		return 0x8207D310;
		  /* 8207D310h */ case   43:  		/* li R8, 0 */
		/* 8207D310h case   43:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8207D310h case   43:*/		return 0x8207D314;
		  /* 8207D314h */ case   44:  		/* ori R10, R10, 8705 */
		/* 8207D314h case   44:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2201);
		/* 8207D314h case   44:*/		return 0x8207D318;
		  /* 8207D318h */ case   45:  		/* lis R7, 3 */
		/* 8207D318h case   45:*/		cpu::op::lis<0>(regs,&regs.R7,0x3);
		/* 8207D318h case   45:*/		return 0x8207D31C;
		  /* 8207D31Ch */ case   46:  		/* stwu R10, <#[R9 + 4]> */
		/* 8207D31Ch case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D31Ch case   46:*/		return 0x8207D320;
		  /* 8207D320h */ case   47:  		/* lis R10, 16384 */
		/* 8207D320h case   47:*/		cpu::op::lis<0>(regs,&regs.R10,0x4000);
		/* 8207D320h case   47:*/		return 0x8207D324;
		  /* 8207D324h */ case   48:  		/* ori R7, R7, 4 */
		/* 8207D324h case   48:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x4);
		/* 8207D324h case   48:*/		return 0x8207D328;
		  /* 8207D328h */ case   49:  		/* ori R10, R10, 3 */
		/* 8207D328h case   49:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8207D328h case   49:*/		return 0x8207D32C;
		  /* 8207D32Ch */ case   50:  		/* stwu R8, <#[R9 + 4]> */
		/* 8207D32Ch case   50:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D32Ch case   50:*/		return 0x8207D330;
		  /* 8207D330h */ case   51:  		/* stwu R7, <#[R9 + 4]> */
		/* 8207D330h case   51:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D330h case   51:*/		return 0x8207D334;
		  /* 8207D334h */ case   52:  		/* stwu R11, <#[R9 + 4]> */
		/* 8207D334h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D334h case   52:*/		return 0x8207D338;
		  /* 8207D338h */ case   53:  		/* stwu R10, <#[R9 + 4]> */
		/* 8207D338h case   53:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8207D338h case   53:*/		return 0x8207D33C;
		  /* 8207D33Ch */ case   54:  		/* bc 16, CR0_LT, -48 */
		/* 8207D33Ch case   54:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207D30C;  }
		/* 8207D33Ch case   54:*/		return 0x8207D340;
		  /* 8207D340h */ case   55:  		/* lwz R11, <#[R31 + 24400]> */
		/* 8207D340h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005F50) );
		/* 8207D340h case   55:*/		return 0x8207D344;
		  /* 8207D344h */ case   56:  		/* li R3, 1 */
		/* 8207D344h case   56:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207D344h case   56:*/		return 0x8207D348;
		  /* 8207D348h */ case   57:  		/* subf R11, R11, R9 */
		/* 8207D348h case   57:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207D348h case   57:*/		return 0x8207D34C;
		  /* 8207D34Ch */ case   58:  		/* addi R11, R11, -28 */
		/* 8207D34Ch case   58:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFE4);
		/* 8207D34Ch case   58:*/		return 0x8207D350;
		  /* 8207D350h */ case   59:  		/* srawi R11, R11, 2 */
		/* 8207D350h case   59:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 8207D350h case   59:*/		return 0x8207D354;
		  /* 8207D354h */ case   60:  		/* stw R11, <#[R31 + 24404]> */
		/* 8207D354h case   60:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F54) );
		/* 8207D354h case   60:*/		return 0x8207D358;
	}
	return 0x8207D358;
} // Block from 8207D264h-8207D358h (61 instructions)

//////////////////////////////////////////////////////
// Block at 8207D358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D358);
		  /* 8207D358h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207D358h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207D358h case    0:*/		return 0x8207D35C;
		  /* 8207D35Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D35Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D35Ch case    1:*/		return 0x8207D360;
		  /* 8207D360h */ case    2:  		/* mtspr LR, R12 */
		/* 8207D360h case    2:*/		regs.LR = regs.R12;
		/* 8207D360h case    2:*/		return 0x8207D364;
		  /* 8207D364h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207D364h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D364h case    3:*/		return 0x8207D368;
		  /* 8207D368h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207D368h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D368h case    4:*/		return 0x8207D36C;
		  /* 8207D36Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207D36Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D36Ch case    5:*/		return 0x8207D370;
	}
	return 0x8207D370;
} // Block from 8207D358h-8207D370h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207D370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D370);
		  /* 8207D370h */ case    0:  		/* mfspr R12, LR */
		/* 8207D370h case    0:*/		regs.R12 = regs.LR;
		/* 8207D370h case    0:*/		return 0x8207D374;
		  /* 8207D374h */ case    1:  		/* bl 81632 */
		/* 8207D374h case    1:*/		regs.LR = 0x8207D378; return 0x82091254;
		/* 8207D374h case    1:*/		return 0x8207D378;
		  /* 8207D378h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207D378h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207D378h case    2:*/		return 0x8207D37C;
		  /* 8207D37Ch */ case    3:  		/* li R11, 0 */
		/* 8207D37Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207D37Ch case    3:*/		return 0x8207D380;
		  /* 8207D380h */ case    4:  		/* mr R29, R4 */
		/* 8207D380h case    4:*/		regs.R29 = regs.R4;
		/* 8207D380h case    4:*/		return 0x8207D384;
		  /* 8207D384h */ case    5:  		/* stw R11, <#[R8]> */
		/* 8207D384h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8207D384h case    5:*/		return 0x8207D388;
		  /* 8207D388h */ case    6:  		/* li R4, 128 */
		/* 8207D388h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 8207D388h case    6:*/		return 0x8207D38C;
		  /* 8207D38Ch */ case    7:  		/* li R3, 24704 */
		/* 8207D38Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x6080);
		/* 8207D38Ch case    7:*/		return 0x8207D390;
		  /* 8207D390h */ case    8:  		/* mr R30, R6 */
		/* 8207D390h case    8:*/		regs.R30 = regs.R6;
		/* 8207D390h case    8:*/		return 0x8207D394;
		  /* 8207D394h */ case    9:  		/* mr R28, R7 */
		/* 8207D394h case    9:*/		regs.R28 = regs.R7;
		/* 8207D394h case    9:*/		return 0x8207D398;
		  /* 8207D398h */ case   10:  		/* mr R27, R8 */
		/* 8207D398h case   10:*/		regs.R27 = regs.R8;
		/* 8207D398h case   10:*/		return 0x8207D39C;
		  /* 8207D39Ch */ case   11:  		/* bl -500 */
		/* 8207D39Ch case   11:*/		regs.LR = 0x8207D3A0; return 0x8207D1A8;
		/* 8207D39Ch case   11:*/		return 0x8207D3A0;
		  /* 8207D3A0h */ case   12:  		/* or. R31, R3, R3 */
		/* 8207D3A0h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8207D3A0h case   12:*/		return 0x8207D3A4;
		  /* 8207D3A4h */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8207D3A4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8207D3B4;  }
		/* 8207D3A4h case   13:*/		return 0x8207D3A8;
		  /* 8207D3A8h */ case   14:  		/* lis R3, -32761 */
		/* 8207D3A8h case   14:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8207D3A8h case   14:*/		return 0x8207D3AC;
		  /* 8207D3ACh */ case   15:  		/* ori R3, R3, 14 */
		/* 8207D3ACh case   15:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8207D3ACh case   15:*/		return 0x8207D3B0;
		  /* 8207D3B0h */ case   16:  		/* b 140 */
		/* 8207D3B0h case   16:*/		return 0x8207D43C;
		/* 8207D3B0h case   16:*/		return 0x8207D3B4;
	}
	return 0x8207D3B4;
} // Block from 8207D370h-8207D3B4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207D3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D3B4);
		  /* 8207D3B4h */ case    0:  		/* mr R3, R31 */
		/* 8207D3B4h case    0:*/		regs.R3 = regs.R31;
		/* 8207D3B4h case    0:*/		return 0x8207D3B8;
		  /* 8207D3B8h */ case    1:  		/* bl 6736 */
		/* 8207D3B8h case    1:*/		regs.LR = 0x8207D3BC; return 0x8207EE08;
		/* 8207D3B8h case    1:*/		return 0x8207D3BC;
		  /* 8207D3BCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 8207D3BCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207D3BCh case    2:*/		return 0x8207D3C0;
		  /* 8207D3C0h */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 8207D3C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8207D3D4;  }
		/* 8207D3C0h case    3:*/		return 0x8207D3C4;
		  /* 8207D3C4h */ case    4:  		/* lis R4, 9344 */
		/* 8207D3C4h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207D3C4h case    4:*/		return 0x8207D3C8;
		  /* 8207D3C8h */ case    5:  		/* lwz R3, <#[R31 - 4]> */
		/* 8207D3C8h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8207D3C8h case    5:*/		return 0x8207D3CC;
		  /* 8207D3CCh */ case    6:  		/* bl 44908 */
		/* 8207D3CCh case    6:*/		regs.LR = 0x8207D3D0; return 0x82088338;
		/* 8207D3CCh case    6:*/		return 0x8207D3D0;
		  /* 8207D3D0h */ case    7:  		/* b -40 */
		/* 8207D3D0h case    7:*/		return 0x8207D3A8;
		/* 8207D3D0h case    7:*/		return 0x8207D3D4;
	}
	return 0x8207D3D4;
} // Block from 8207D3B4h-8207D3D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207D3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D3D4);
		  /* 8207D3D4h */ case    0:  		/* cmpwi CR6, R29, 2 */
		/* 8207D3D4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000002);
		/* 8207D3D4h case    0:*/		return 0x8207D3D8;
		  /* 8207D3D8h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 8207D3D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207D40C;  }
		/* 8207D3D8h case    1:*/		return 0x8207D3DC;
		  /* 8207D3DCh */ case    2:  		/* lbz R11, <#[R31 + 11068]> */
		/* 8207D3DCh case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207D3DCh case    2:*/		return 0x8207D3E0;
		  /* 8207D3E0h */ case    3:  		/* mr R3, R31 */
		/* 8207D3E0h case    3:*/		regs.R3 = regs.R31;
		/* 8207D3E0h case    3:*/		return 0x8207D3E4;
		  /* 8207D3E4h */ case    4:  		/* ori R11, R11, 128 */
		/* 8207D3E4h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8207D3E4h case    4:*/		return 0x8207D3E8;
		  /* 8207D3E8h */ case    5:  		/* stb R11, <#[R31 + 11068]> */
		/* 8207D3E8h case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207D3E8h case    5:*/		return 0x8207D3EC;
		  /* 8207D3ECh */ case    6:  		/* bl -44276 */
		/* 8207D3ECh case    6:*/		regs.LR = 0x8207D3F0; return 0x820726F8;
		/* 8207D3ECh case    6:*/		return 0x8207D3F0;
		  /* 8207D3F0h */ case    7:  		/* mr R3, R31 */
		/* 8207D3F0h case    7:*/		regs.R3 = regs.R31;
		/* 8207D3F0h case    7:*/		return 0x8207D3F4;
		  /* 8207D3F4h */ case    8:  		/* bl 6788 */
		/* 8207D3F4h case    8:*/		regs.LR = 0x8207D3F8; return 0x8207EE78;
		/* 8207D3F4h case    8:*/		return 0x8207D3F8;
		  /* 8207D3F8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8207D3F8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207D3F8h case    9:*/		return 0x8207D3FC;
		  /* 8207D3FCh */ case   10:  		/* bc 4, CR0_EQ, 56 */
		/* 8207D3FCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x8207D434;  }
		/* 8207D3FCh case   10:*/		return 0x8207D400;
		  /* 8207D400h */ case   11:  		/* mr R3, R31 */
		/* 8207D400h case   11:*/		regs.R3 = regs.R31;
		/* 8207D400h case   11:*/		return 0x8207D404;
		  /* 8207D404h */ case   12:  		/* bl -1100 */
		/* 8207D404h case   12:*/		regs.LR = 0x8207D408; return 0x8207CFB8;
		/* 8207D404h case   12:*/		return 0x8207D408;
		  /* 8207D408h */ case   13:  		/* b -96 */
		/* 8207D408h case   13:*/		return 0x8207D3A8;
		/* 8207D408h case   13:*/		return 0x8207D40C;
	}
	return 0x8207D40C;
} // Block from 8207D3D4h-8207D40Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207D40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D40C);
		  /* 8207D40Ch */ case    0:  		/* rlwinm. R11, R30, 0, 23, 23 */
		/* 8207D40Ch case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R30);
		/* 8207D40Ch case    0:*/		return 0x8207D410;
		  /* 8207D410h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8207D410h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8207D420;  }
		/* 8207D410h case    1:*/		return 0x8207D414;
		  /* 8207D414h */ case    2:  		/* rlwinm. R11, R30, 0, 2, 7 */
		/* 8207D414h case    2:*/		cpu::op::rlwinm<1,0,2,7>(regs,&regs.R11,regs.R30);
		/* 8207D414h case    2:*/		return 0x8207D418;
		  /* 8207D418h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 8207D418h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8207D420;  }
		/* 8207D418h case    3:*/		return 0x8207D41C;
		  /* 8207D41Ch */ case    4:  		/* oris R30, R30, 3072 */
		/* 8207D41Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R30,0xC00);
		/* 8207D41Ch case    4:*/		return 0x8207D420;
	}
	return 0x8207D420;
} // Block from 8207D40Ch-8207D420h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207D420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D420);
		  /* 8207D420h */ case    0:  		/* stw R30, <#[R31 + 24392]> */
		/* 8207D420h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005F48) );
		/* 8207D420h case    0:*/		return 0x8207D424;
		  /* 8207D424h */ case    1:  		/* mr R4, R28 */
		/* 8207D424h case    1:*/		regs.R4 = regs.R28;
		/* 8207D424h case    1:*/		return 0x8207D428;
		  /* 8207D428h */ case    2:  		/* mr R3, R31 */
		/* 8207D428h case    2:*/		regs.R3 = regs.R31;
		/* 8207D428h case    2:*/		return 0x8207D42C;
		  /* 8207D42Ch */ case    3:  		/* bl 8052 */
		/* 8207D42Ch case    3:*/		regs.LR = 0x8207D430; return 0x8207F3A0;
		/* 8207D42Ch case    3:*/		return 0x8207D430;
		  /* 8207D430h */ case    4:  		/* b -56 */
		/* 8207D430h case    4:*/		return 0x8207D3F8;
		/* 8207D430h case    4:*/		return 0x8207D434;
	}
	return 0x8207D434;
} // Block from 8207D420h-8207D434h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207D434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D434);
		  /* 8207D434h */ case    0:  		/* stw R31, <#[R27]> */
		/* 8207D434h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 8207D434h case    0:*/		return 0x8207D438;
		  /* 8207D438h */ case    1:  		/* li R3, 0 */
		/* 8207D438h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207D438h case    1:*/		return 0x8207D43C;
	}
	return 0x8207D43C;
} // Block from 8207D434h-8207D43Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207D43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D43C);
		  /* 8207D43Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8207D43Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207D43Ch case    0:*/		return 0x8207D440;
		  /* 8207D440h */ case    1:  		/* b 81508 */
		/* 8207D440h case    1:*/		return 0x820912A4;
		/* 8207D440h case    1:*/		return 0x8207D444;
		  /* 8207D444h */ case    2:  		/* nop */
		/* 8207D444h case    2:*/		cpu::op::nop();
		/* 8207D444h case    2:*/		return 0x8207D448;
	}
	return 0x8207D448;
} // Block from 8207D43Ch-8207D448h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207D448h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D448);
		  /* 8207D448h */ case    0:  		/* mfspr R12, LR */
		/* 8207D448h case    0:*/		regs.R12 = regs.LR;
		/* 8207D448h case    0:*/		return 0x8207D44C;
		  /* 8207D44Ch */ case    1:  		/* bl 81420 */
		/* 8207D44Ch case    1:*/		regs.LR = 0x8207D450; return 0x82091258;
		/* 8207D44Ch case    1:*/		return 0x8207D450;
		  /* 8207D450h */ case    2:  		/* stwu R1, <#[R1 - 2192]> */
		/* 8207D450h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF770) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF770);
		/* 8207D450h case    2:*/		return 0x8207D454;
		  /* 8207D454h */ case    3:  		/* mr R31, R3 */
		/* 8207D454h case    3:*/		regs.R31 = regs.R3;
		/* 8207D454h case    3:*/		return 0x8207D458;
		  /* 8207D458h */ case    4:  		/* mr R30, R4 */
		/* 8207D458h case    4:*/		regs.R30 = regs.R4;
		/* 8207D458h case    4:*/		return 0x8207D45C;
		  /* 8207D45Ch */ case    5:  		/* mr R29, R5 */
		/* 8207D45Ch case    5:*/		regs.R29 = regs.R5;
		/* 8207D45Ch case    5:*/		return 0x8207D460;
		  /* 8207D460h */ case    6:  		/* bl 2030760 */
		/* 8207D460h case    6:*/		regs.LR = 0x8207D464; return 0x8226D108;
		/* 8207D460h case    6:*/		return 0x8207D464;
		  /* 8207D464h */ case    7:  		/* lis R28, -32256 */
		/* 8207D464h case    7:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8200);
		/* 8207D464h case    7:*/		return 0x8207D468;
		  /* 8207D468h */ case    8:  		/* lwz R3, <#[R28 + 1188]> */
		/* 8207D468h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000004A4) );
		/* 8207D468h case    8:*/		return 0x8207D46C;
		  /* 8207D46Ch */ case    9:  		/* bl 2030540 */
		/* 8207D46Ch case    9:*/		regs.LR = 0x8207D470; return 0x8226D038;
		/* 8207D46Ch case    9:*/		return 0x8207D470;
		  /* 8207D470h */ case   10:  		/* cmpwi CR6, R29, 0 */
		/* 8207D470h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8207D470h case   10:*/		return 0x8207D474;
		  /* 8207D474h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8207D474h case   11:*/		if ( regs.CR[6].eq ) { return 0x8207D480;  }
		/* 8207D474h case   11:*/		return 0x8207D478;
		  /* 8207D478h */ case   12:  		/* li R3, 0 */
		/* 8207D478h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207D478h case   12:*/		return 0x8207D47C;
		  /* 8207D47Ch */ case   13:  		/* bl 2030716 */
		/* 8207D47Ch case   13:*/		regs.LR = 0x8207D480; return 0x8226D0F8;
		/* 8207D47Ch case   13:*/		return 0x8207D480;
	}
	return 0x8207D480;
} // Block from 8207D448h-8207D480h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207D480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D480);
		  /* 8207D480h */ case    0:  		/* li R11, 0 */
		/* 8207D480h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207D480h case    0:*/		return 0x8207D484;
		  /* 8207D484h */ case    1:  		/* li R8, 2048 */
		/* 8207D484h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x800);
		/* 8207D484h case    1:*/		return 0x8207D488;
		  /* 8207D488h */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 8207D488h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D488h case    2:*/		return 0x8207D48C;
		  /* 8207D48Ch */ case    3:  		/* addi R7, R1, 96 */
		/* 8207D48Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8207D48Ch case    3:*/		return 0x8207D490;
		  /* 8207D490h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 8207D490h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D490h case    4:*/		return 0x8207D494;
		  /* 8207D494h */ case    5:  		/* addi R6, R1, 84 */
		/* 8207D494h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8207D494h case    5:*/		return 0x8207D498;
		  /* 8207D498h */ case    6:  		/* li R5, 4096 */
		/* 8207D498h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x1000);
		/* 8207D498h case    6:*/		return 0x8207D49C;
		  /* 8207D49Ch */ case    7:  		/* addi R4, R1, 80 */
		/* 8207D49Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D49Ch case    7:*/		return 0x8207D4A0;
		  /* 8207D4A0h */ case    8:  		/* mr R3, R30 */
		/* 8207D4A0h case    8:*/		regs.R3 = regs.R30;
		/* 8207D4A0h case    8:*/		return 0x8207D4A4;
		  /* 8207D4A4h */ case    9:  		/* bl 2030660 */
		/* 8207D4A4h case    9:*/		regs.LR = 0x8207D4A8; return 0x8226D0E8;
		/* 8207D4A4h case    9:*/		return 0x8207D4A8;
		  /* 8207D4A8h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8207D4A8h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207D4A8h case   10:*/		return 0x8207D4AC;
		  /* 8207D4ACh */ case   11:  		/* bc 12, CR0_EQ, 104 */
		/* 8207D4ACh case   11:*/		if ( regs.CR[0].eq ) { return 0x8207D514;  }
		/* 8207D4ACh case   11:*/		return 0x8207D4B0;
		  /* 8207D4B0h */ case   12:  		/* cmpwi CR6, R29, 0 */
		/* 8207D4B0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8207D4B0h case   12:*/		return 0x8207D4B4;
		  /* 8207D4B4h */ case   13:  		/* bc 4, CR6_EQ, 12 */
		/* 8207D4B4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8207D4C0;  }
		/* 8207D4B4h case   13:*/		return 0x8207D4B8;
		  /* 8207D4B8h */ case   14:  		/* mr R3, R31 */
		/* 8207D4B8h case   14:*/		regs.R3 = regs.R31;
		/* 8207D4B8h case   14:*/		return 0x8207D4BC;
		  /* 8207D4BCh */ case   15:  		/* bl -37124 */
		/* 8207D4BCh case   15:*/		regs.LR = 0x8207D4C0; return 0x820743B8;
		/* 8207D4BCh case   15:*/		return 0x8207D4C0;
	}
	return 0x8207D4C0;
} // Block from 8207D480h-8207D4C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207D4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D4C0);
		  /* 8207D4C0h */ case    0:  		/* li R4, 4096 */
		/* 8207D4C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1000);
		/* 8207D4C0h case    0:*/		return 0x8207D4C4;
		  /* 8207D4C4h */ case    1:  		/* mr R3, R31 */
		/* 8207D4C4h case    1:*/		regs.R3 = regs.R31;
		/* 8207D4C4h case    1:*/		return 0x8207D4C8;
		  /* 8207D4C8h */ case    2:  		/* bl -37256 */
		/* 8207D4C8h case    2:*/		regs.LR = 0x8207D4CC; return 0x82074340;
		/* 8207D4C8h case    2:*/		return 0x8207D4CC;
		  /* 8207D4CCh */ case    3:  		/* addi R11, R3, 4 */
		/* 8207D4CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 8207D4CCh case    3:*/		return 0x8207D4D0;
		  /* 8207D4D0h */ case    4:  		/* li R8, 2048 */
		/* 8207D4D0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x800);
		/* 8207D4D0h case    4:*/		return 0x8207D4D4;
		  /* 8207D4D4h */ case    5:  		/* stw R11, <#[R1 + 80]> */
		/* 8207D4D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D4D4h case    5:*/		return 0x8207D4D8;
		  /* 8207D4D8h */ case    6:  		/* addi R7, R1, 96 */
		/* 8207D4D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8207D4D8h case    6:*/		return 0x8207D4DC;
		  /* 8207D4DCh */ case    7:  		/* addi R6, R1, 84 */
		/* 8207D4DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 8207D4DCh case    7:*/		return 0x8207D4E0;
		  /* 8207D4E0h */ case    8:  		/* li R5, 4096 */
		/* 8207D4E0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1000);
		/* 8207D4E0h case    8:*/		return 0x8207D4E4;
		  /* 8207D4E4h */ case    9:  		/* addi R4, R1, 80 */
		/* 8207D4E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D4E4h case    9:*/		return 0x8207D4E8;
		  /* 8207D4E8h */ case   10:  		/* mr R3, R30 */
		/* 8207D4E8h case   10:*/		regs.R3 = regs.R30;
		/* 8207D4E8h case   10:*/		return 0x8207D4EC;
		  /* 8207D4ECh */ case   11:  		/* bl 2030588 */
		/* 8207D4ECh case   11:*/		regs.LR = 0x8207D4F0; return 0x8226D0E8;
		/* 8207D4ECh case   11:*/		return 0x8207D4F0;
		  /* 8207D4F0h */ case   12:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207D4F0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D4F0h case   12:*/		return 0x8207D4F4;
		  /* 8207D4F4h */ case   13:  		/* mr R29, R3 */
		/* 8207D4F4h case   13:*/		regs.R29 = regs.R3;
		/* 8207D4F4h case   13:*/		return 0x8207D4F8;
		  /* 8207D4F8h */ case   14:  		/* addi R11, R11, -4 */
		/* 8207D4F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8207D4F8h case   14:*/		return 0x8207D4FC;
		  /* 8207D4FCh */ case   15:  		/* mr R3, R31 */
		/* 8207D4FCh case   15:*/		regs.R3 = regs.R31;
		/* 8207D4FCh case   15:*/		return 0x8207D500;
		  /* 8207D500h */ case   16:  		/* stw R11, <#[R1 + 80]> */
		/* 8207D500h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D500h case   16:*/		return 0x8207D504;
		  /* 8207D504h */ case   17:  		/* stw R11, <#[R31 + 48]> */
		/* 8207D504h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207D504h case   17:*/		return 0x8207D508;
		  /* 8207D508h */ case   18:  		/* bl -37200 */
		/* 8207D508h case   18:*/		regs.LR = 0x8207D50C; return 0x820743B8;
		/* 8207D508h case   18:*/		return 0x8207D50C;
		  /* 8207D50Ch */ case   19:  		/* cmpwi CR6, R29, 0 */
		/* 8207D50Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8207D50Ch case   19:*/		return 0x8207D510;
		  /* 8207D510h */ case   20:  		/* bc 4, CR6_EQ, -80 */
		/* 8207D510h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8207D4C0;  }
		/* 8207D510h case   20:*/		return 0x8207D514;
	}
	return 0x8207D514;
} // Block from 8207D4C0h-8207D514h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207D514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D514);
		  /* 8207D514h */ case    0:  		/* lwz R3, <#[R28 + 1188]> */
		/* 8207D514h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000004A4) );
		/* 8207D514h case    0:*/		return 0x8207D518;
		  /* 8207D518h */ case    1:  		/* bl 2030352 */
		/* 8207D518h case    1:*/		regs.LR = 0x8207D51C; return 0x8226D028;
		/* 8207D518h case    1:*/		return 0x8207D51C;
		  /* 8207D51Ch */ case    2:  		/* bl 2030524 */
		/* 8207D51Ch case    2:*/		regs.LR = 0x8207D520; return 0x8226D0D8;
		/* 8207D51Ch case    2:*/		return 0x8207D520;
		  /* 8207D520h */ case    3:  		/* li R3, 1 */
		/* 8207D520h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207D520h case    3:*/		return 0x8207D524;
		  /* 8207D524h */ case    4:  		/* addi R1, R1, 2192 */
		/* 8207D524h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x890);
		/* 8207D524h case    4:*/		return 0x8207D528;
		  /* 8207D528h */ case    5:  		/* b 81280 */
		/* 8207D528h case    5:*/		return 0x820912A8;
		/* 8207D528h case    5:*/		return 0x8207D52C;
		  /* 8207D52Ch */ case    6:  		/* nop */
		/* 8207D52Ch case    6:*/		cpu::op::nop();
		/* 8207D52Ch case    6:*/		return 0x8207D530;
	}
	return 0x8207D530;
} // Block from 8207D514h-8207D530h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207D530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D530);
		  /* 8207D530h */ case    0:  		/* mfspr R12, LR */
		/* 8207D530h case    0:*/		regs.R12 = regs.LR;
		/* 8207D530h case    0:*/		return 0x8207D534;
		  /* 8207D534h */ case    1:  		/* bl 81184 */
		/* 8207D534h case    1:*/		regs.LR = 0x8207D538; return 0x82091254;
		/* 8207D534h case    1:*/		return 0x8207D538;
		  /* 8207D538h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8207D538h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8207D538h case    2:*/		return 0x8207D53C;
		  /* 8207D53Ch */ case    3:  		/* mr R29, R3 */
		/* 8207D53Ch case    3:*/		regs.R29 = regs.R3;
		/* 8207D53Ch case    3:*/		return 0x8207D540;
		  /* 8207D540h */ case    4:  		/* mr R31, R4 */
		/* 8207D540h case    4:*/		regs.R31 = regs.R4;
		/* 8207D540h case    4:*/		return 0x8207D544;
		  /* 8207D544h */ case    5:  		/* mr R30, R5 */
		/* 8207D544h case    5:*/		regs.R30 = regs.R5;
		/* 8207D544h case    5:*/		return 0x8207D548;
		  /* 8207D548h */ case    6:  		/* cmplwi CR6, R5, 16 */
		/* 8207D548h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 8207D548h case    6:*/		return 0x8207D54C;
		  /* 8207D54Ch */ case    7:  		/* bc 12, CR6_LT, 184 */
		/* 8207D54Ch case    7:*/		if ( regs.CR[6].lt ) { return 0x8207D604;  }
		/* 8207D54Ch case    7:*/		return 0x8207D550;
		  /* 8207D550h */ case    8:  		/* cmplwi CR6, R5, 112 */
		/* 8207D550h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000070);
		/* 8207D550h case    8:*/		return 0x8207D554;
		  /* 8207D554h */ case    9:  		/* bc 12, CR6_GT, 176 */
		/* 8207D554h case    9:*/		if ( regs.CR[6].gt ) { return 0x8207D604;  }
		/* 8207D554h case    9:*/		return 0x8207D558;
		  /* 8207D558h */ case   10:  		/* addi R11, R5, 1775 */
		/* 8207D558h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x6EF);
		/* 8207D558h case   10:*/		return 0x8207D55C;
		  /* 8207D55Ch */ case   11:  		/* lwz R6, <#[R4 + 14192]> */
		/* 8207D55Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00003770) );
		/* 8207D55Ch case   11:*/		return 0x8207D560;
		  /* 8207D560h */ case   12:  		/* rlwinm R10, R5, 3, 0, 28 */
		/* 8207D560h case   12:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R5);
		/* 8207D560h case   12:*/		return 0x8207D564;
		  /* 8207D564h */ case   13:  		/* lwz R8, <#[R4 + 14188]> */
		/* 8207D564h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x0000376C) );
		/* 8207D564h case   13:*/		return 0x8207D568;
		  /* 8207D568h */ case   14:  		/* rlwinm R9, R11, 3, 0, 28 */
		/* 8207D568h case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R11);
		/* 8207D568h case   14:*/		return 0x8207D56C;
		  /* 8207D56Ch */ case   15:  		/* lwz R7, <#[R4 + 15220]> */
		/* 8207D56Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + 0x00003B74) );
		/* 8207D56Ch case   15:*/		return 0x8207D570;
		  /* 8207D570h */ case   16:  		/* add R10, R10, R4 */
		/* 8207D570h case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R4);
		/* 8207D570h case   16:*/		return 0x8207D574;
		  /* 8207D574h */ case   17:  		/* lwz R5, <#[R4 + 15224]> */
		/* 8207D574h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x00003B78) );
		/* 8207D574h case   17:*/		return 0x8207D578;
		  /* 8207D578h */ case   18:  		/* lwz R4, <#[R3 + 392]> */
		/* 8207D578h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000188) );
		/* 8207D578h case   18:*/		return 0x8207D57C;
		  /* 8207D57Ch */ case   19:  		/* lis R11, -16383 */
		/* 8207D57Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC001);
		/* 8207D57Ch case   19:*/		return 0x8207D580;
		  /* 8207D580h */ case   20:  		/* lis R3, 1 */
		/* 8207D580h case   20:*/		cpu::op::lis<0>(regs,&regs.R3,0x1);
		/* 8207D580h case   20:*/		return 0x8207D584;
		  /* 8207D584h */ case   21:  		/* stw R6, <#[R1 + 92]> */
		/* 8207D584h case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207D584h case   21:*/		return 0x8207D588;
		  /* 8207D588h */ case   22:  		/* lis R28, 1 */
		/* 8207D588h case   22:*/		cpu::op::lis<0>(regs,&regs.R28,0x1);
		/* 8207D588h case   22:*/		return 0x8207D58C;
		  /* 8207D58Ch */ case   23:  		/* lwzx R27, <#[R9 + R31]> */
		/* 8207D58Ch case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 8207D58Ch case   23:*/		return 0x8207D590;
		  /* 8207D590h */ case   24:  		/* ori R11, R11, 16128 */
		/* 8207D590h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3F00);
		/* 8207D590h case   24:*/		return 0x8207D594;
		  /* 8207D594h */ case   25:  		/* lwz R10, <#[R10 + 14196]> */
		/* 8207D594h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00003774) );
		/* 8207D594h case   25:*/		return 0x8207D598;
		  /* 8207D598h */ case   26:  		/* li R9, 1406 */
		/* 8207D598h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x57E);
		/* 8207D598h case   26:*/		return 0x8207D59C;
		  /* 8207D59Ch */ case   27:  		/* ori R3, R3, 25 */
		/* 8207D59Ch case   27:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x19);
		/* 8207D59Ch case   27:*/		return 0x8207D5A0;
		  /* 8207D5A0h */ case   28:  		/* stw R5, <#[R1 + 116]> */
		/* 8207D5A0h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 8207D5A0h case   28:*/		return 0x8207D5A4;
		  /* 8207D5A4h */ case   29:  		/* rlwinm R8, R8, 0, 8, 31 */
		/* 8207D5A4h case   29:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R8,regs.R8);
		/* 8207D5A4h case   29:*/		return 0x8207D5A8;
		  /* 8207D5A8h */ case   30:  		/* stw R9, <#[R1 + 80]> */
		/* 8207D5A8h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D5A8h case   30:*/		return 0x8207D5AC;
		  /* 8207D5ACh */ case   31:  		/* rlwinm R10, R10, 0, 8, 31 */
		/* 8207D5ACh case   31:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R10,regs.R10);
		/* 8207D5ACh case   31:*/		return 0x8207D5B0;
		  /* 8207D5B0h */ case   32:  		/* stw R3, <#[R1 + 84]> */
		/* 8207D5B0h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D5B0h case   32:*/		return 0x8207D5B4;
		  /* 8207D5B4h */ case   33:  		/* rlwinm R7, R7, 0, 8, 31 */
		/* 8207D5B4h case   33:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R7,regs.R7);
		/* 8207D5B4h case   33:*/		return 0x8207D5B8;
		  /* 8207D5B8h */ case   34:  		/* stw R11, <#[R1 + 88]> */
		/* 8207D5B8h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207D5B8h case   34:*/		return 0x8207D5BC;
		  /* 8207D5BCh */ case   35:  		/* ori R6, R28, 26 */
		/* 8207D5BCh case   35:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R28,0x1A);
		/* 8207D5BCh case   35:*/		return 0x8207D5C0;
		  /* 8207D5C0h */ case   36:  		/* stw R8, <#[R1 + 96]> */
		/* 8207D5C0h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 8207D5C0h case   36:*/		return 0x8207D5C4;
		  /* 8207D5C4h */ case   37:  		/* cmplw CR6, R30, R4 */
		/* 8207D5C4h case   37:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R4);
		/* 8207D5C4h case   37:*/		return 0x8207D5C8;
		  /* 8207D5C8h */ case   38:  		/* stw R27, <#[R1 + 104]> */
		/* 8207D5C8h case   38:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000068) );
		/* 8207D5C8h case   38:*/		return 0x8207D5CC;
		  /* 8207D5CCh */ case   39:  		/* stw R11, <#[R1 + 100]> */
		/* 8207D5CCh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8207D5CCh case   39:*/		return 0x8207D5D0;
		  /* 8207D5D0h */ case   40:  		/* stw R10, <#[R1 + 108]> */
		/* 8207D5D0h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207D5D0h case   40:*/		return 0x8207D5D4;
		  /* 8207D5D4h */ case   41:  		/* stw R11, <#[R1 + 112]> */
		/* 8207D5D4h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8207D5D4h case   41:*/		return 0x8207D5D8;
		  /* 8207D5D8h */ case   42:  		/* stw R7, <#[R1 + 120]> */
		/* 8207D5D8h case   42:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 8207D5D8h case   42:*/		return 0x8207D5DC;
		  /* 8207D5DCh */ case   43:  		/* stw R9, <#[R1 + 124]> */
		/* 8207D5DCh case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207D5DCh case   43:*/		return 0x8207D5E0;
		  /* 8207D5E0h */ case   44:  		/* stw R6, <#[R1 + 128]> */
		/* 8207D5E0h case   44:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 8207D5E0h case   44:*/		return 0x8207D5E4;
		  /* 8207D5E4h */ case   45:  		/* bc 12, CR6_EQ, 32 */
		/* 8207D5E4h case   45:*/		if ( regs.CR[6].eq ) { return 0x8207D604;  }
		/* 8207D5E4h case   45:*/		return 0x8207D5E8;
		  /* 8207D5E8h */ case   46:  		/* li R5, 13 */
		/* 8207D5E8h case   46:*/		cpu::op::li<0>(regs,&regs.R5,0xD);
		/* 8207D5E8h case   46:*/		return 0x8207D5EC;
		  /* 8207D5ECh */ case   47:  		/* addi R4, R1, 80 */
		/* 8207D5ECh case   47:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D5ECh case   47:*/		return 0x8207D5F0;
		  /* 8207D5F0h */ case   48:  		/* mr R3, R31 */
		/* 8207D5F0h case   48:*/		regs.R3 = regs.R31;
		/* 8207D5F0h case   48:*/		return 0x8207D5F4;
		  /* 8207D5F4h */ case   49:  		/* bl -44428 */
		/* 8207D5F4h case   49:*/		regs.LR = 0x8207D5F8; return 0x82072868;
		/* 8207D5F4h case   49:*/		return 0x8207D5F8;
		  /* 8207D5F8h */ case   50:  		/* li R11, 0 */
		/* 8207D5F8h case   50:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207D5F8h case   50:*/		return 0x8207D5FC;
		  /* 8207D5FCh */ case   51:  		/* stw R30, <#[R29 + 392]> */
		/* 8207D5FCh case   51:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000188) );
		/* 8207D5FCh case   51:*/		return 0x8207D600;
		  /* 8207D600h */ case   52:  		/* stw R11, <#[R31 + 11504]> */
		/* 8207D600h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002CF0) );
		/* 8207D600h case   52:*/		return 0x8207D604;
	}
	return 0x8207D604;
} // Block from 8207D530h-8207D604h (53 instructions)

//////////////////////////////////////////////////////
// Block at 8207D604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D604);
		  /* 8207D604h */ case    0:  		/* addi R1, R1, 192 */
		/* 8207D604h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8207D604h case    0:*/		return 0x8207D608;
		  /* 8207D608h */ case    1:  		/* b 81052 */
		/* 8207D608h case    1:*/		return 0x820912A4;
		/* 8207D608h case    1:*/		return 0x8207D60C;
		  /* 8207D60Ch */ case    2:  		/* nop */
		/* 8207D60Ch case    2:*/		cpu::op::nop();
		/* 8207D60Ch case    2:*/		return 0x8207D610;
	}
	return 0x8207D610;
} // Block from 8207D604h-8207D610h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207D610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D610);
		  /* 8207D610h */ case    0:  		/* mfspr R12, LR */
		/* 8207D610h case    0:*/		regs.R12 = regs.LR;
		/* 8207D610h case    0:*/		return 0x8207D614;
		  /* 8207D614h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207D614h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D614h case    1:*/		return 0x8207D618;
		  /* 8207D618h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207D618h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D618h case    2:*/		return 0x8207D61C;
		  /* 8207D61Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207D61Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D61Ch case    3:*/		return 0x8207D620;
		  /* 8207D620h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207D620h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207D620h case    4:*/		return 0x8207D624;
		  /* 8207D624h */ case    5:  		/* li R10, 1406 */
		/* 8207D624h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x57E);
		/* 8207D624h case    5:*/		return 0x8207D628;
		  /* 8207D628h */ case    6:  		/* lis R11, 1 */
		/* 8207D628h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 8207D628h case    6:*/		return 0x8207D62C;
		  /* 8207D62Ch */ case    7:  		/* stw R10, <#[R1 + 80]> */
		/* 8207D62Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D62Ch case    7:*/		return 0x8207D630;
		  /* 8207D630h */ case    8:  		/* li R9, 1403 */
		/* 8207D630h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x57B);
		/* 8207D630h case    8:*/		return 0x8207D634;
		  /* 8207D634h */ case    9:  		/* ori R11, R11, 78 */
		/* 8207D634h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4E);
		/* 8207D634h case    9:*/		return 0x8207D638;
		  /* 8207D638h */ case   10:  		/* li R10, 0 */
		/* 8207D638h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207D638h case   10:*/		return 0x8207D63C;
		  /* 8207D63Ch */ case   11:  		/* stw R9, <#[R1 + 88]> */
		/* 8207D63Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207D63Ch case   11:*/		return 0x8207D640;
		  /* 8207D640h */ case   12:  		/* stw R11, <#[R1 + 84]> */
		/* 8207D640h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D640h case   12:*/		return 0x8207D644;
		  /* 8207D644h */ case   13:  		/* mr R31, R4 */
		/* 8207D644h case   13:*/		regs.R31 = regs.R4;
		/* 8207D644h case   13:*/		return 0x8207D648;
		  /* 8207D648h */ case   14:  		/* stw R10, <#[R1 + 92]> */
		/* 8207D648h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207D648h case   14:*/		return 0x8207D64C;
		  /* 8207D64Ch */ case   15:  		/* mr R30, R5 */
		/* 8207D64Ch case   15:*/		regs.R30 = regs.R5;
		/* 8207D64Ch case   15:*/		return 0x8207D650;
		  /* 8207D650h */ case   16:  		/* li R5, 4 */
		/* 8207D650h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8207D650h case   16:*/		return 0x8207D654;
		  /* 8207D654h */ case   17:  		/* addi R4, R1, 80 */
		/* 8207D654h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D654h case   17:*/		return 0x8207D658;
		  /* 8207D658h */ case   18:  		/* mr R3, R31 */
		/* 8207D658h case   18:*/		regs.R3 = regs.R31;
		/* 8207D658h case   18:*/		return 0x8207D65C;
		  /* 8207D65Ch */ case   19:  		/* bl -44532 */
		/* 8207D65Ch case   19:*/		regs.LR = 0x8207D660; return 0x82072868;
		/* 8207D65Ch case   19:*/		return 0x8207D660;
		  /* 8207D660h */ case   20:  		/* mulli R11, R30, 36 */
		/* 8207D660h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x24);
		/* 8207D660h case   20:*/		return 0x8207D664;
		  /* 8207D664h */ case   21:  		/* add R11, R11, R31 */
		/* 8207D664h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8207D664h case   21:*/		return 0x8207D668;
		  /* 8207D668h */ case   22:  		/* lwz R10, <#[R11 + 24488]> */
		/* 8207D668h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00005FA8) );
		/* 8207D668h case   22:*/		return 0x8207D66C;
		  /* 8207D66Ch */ case   23:  		/* stw R10, <#[R11 + 24484]> */
		/* 8207D66Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00005FA4) );
		/* 8207D66Ch case   23:*/		return 0x8207D670;
		  /* 8207D670h */ case   24:  		/* addi R1, R1, 128 */
		/* 8207D670h case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207D670h case   24:*/		return 0x8207D674;
		  /* 8207D674h */ case   25:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D674h case   25:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D674h case   25:*/		return 0x8207D678;
		  /* 8207D678h */ case   26:  		/* mtspr LR, R12 */
		/* 8207D678h case   26:*/		regs.LR = regs.R12;
		/* 8207D678h case   26:*/		return 0x8207D67C;
		  /* 8207D67Ch */ case   27:  		/* ld R30, <#[R1 - 24]> */
		/* 8207D67Ch case   27:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207D67Ch case   27:*/		return 0x8207D680;
		  /* 8207D680h */ case   28:  		/* ld R31, <#[R1 - 16]> */
		/* 8207D680h case   28:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D680h case   28:*/		return 0x8207D684;
		  /* 8207D684h */ case   29:  		/* bclr 20, CR0_LT */
		/* 8207D684h case   29:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D684h case   29:*/		return 0x8207D688;
	}
	return 0x8207D688;
} // Block from 8207D610h-8207D688h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8207D688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D688);
		  /* 8207D688h */ case    0:  		/* mfspr R12, LR */
		/* 8207D688h case    0:*/		regs.R12 = regs.LR;
		/* 8207D688h case    0:*/		return 0x8207D68C;
		  /* 8207D68Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207D68Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D68Ch case    1:*/		return 0x8207D690;
		  /* 8207D690h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207D690h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207D690h case    2:*/		return 0x8207D694;
		  /* 8207D694h */ case    3:  		/* rlwinm R11, R4, 12, 20, 31 */
		/* 8207D694h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R4);
		/* 8207D694h case    3:*/		return 0x8207D698;
		  /* 8207D698h */ case    4:  		/* stw R5, <#[R1 + 84]> */
		/* 8207D698h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D698h case    4:*/		return 0x8207D69C;
		  /* 8207D69Ch */ case    5:  		/* rlwinm R10, R4, 0, 3, 31 */
		/* 8207D69Ch case    5:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R4);
		/* 8207D69Ch case    5:*/		return 0x8207D6A0;
		  /* 8207D6A0h */ case    6:  		/* addi R11, R11, 512 */
		/* 8207D6A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8207D6A0h case    6:*/		return 0x8207D6A4;
		  /* 8207D6A4h */ case    7:  		/* lis R9, -16383 */
		/* 8207D6A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC001);
		/* 8207D6A4h case    7:*/		return 0x8207D6A8;
		  /* 8207D6A8h */ case    8:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207D6A8h case    8:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207D6A8h case    8:*/		return 0x8207D6AC;
		  /* 8207D6ACh */ case    9:  		/* ori R9, R9, 15872 */
		/* 8207D6ACh case    9:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3E00);
		/* 8207D6ACh case    9:*/		return 0x8207D6B0;
		  /* 8207D6B0h */ case   10:  		/* add R11, R11, R10 */
		/* 8207D6B0h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207D6B0h case   10:*/		return 0x8207D6B4;
		  /* 8207D6B4h */ case   11:  		/* stw R9, <#[R1 + 80]> */
		/* 8207D6B4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D6B4h case   11:*/		return 0x8207D6B8;
		  /* 8207D6B8h */ case   12:  		/* li R5, 3 */
		/* 8207D6B8h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8207D6B8h case   12:*/		return 0x8207D6BC;
		  /* 8207D6BCh */ case   13:  		/* ori R11, R11, 2 */
		/* 8207D6BCh case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8207D6BCh case   13:*/		return 0x8207D6C0;
		  /* 8207D6C0h */ case   14:  		/* addi R4, R1, 80 */
		/* 8207D6C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D6C0h case   14:*/		return 0x8207D6C4;
		  /* 8207D6C4h */ case   15:  		/* stw R11, <#[R1 + 88]> */
		/* 8207D6C4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207D6C4h case   15:*/		return 0x8207D6C8;
		  /* 8207D6C8h */ case   16:  		/* bl -44640 */
		/* 8207D6C8h case   16:*/		regs.LR = 0x8207D6CC; return 0x82072868;
		/* 8207D6C8h case   16:*/		return 0x8207D6CC;
		  /* 8207D6CCh */ case   17:  		/* addi R1, R1, 112 */
		/* 8207D6CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207D6CCh case   17:*/		return 0x8207D6D0;
		  /* 8207D6D0h */ case   18:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207D6D0h case   18:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207D6D0h case   18:*/		return 0x8207D6D4;
		  /* 8207D6D4h */ case   19:  		/* mtspr LR, R12 */
		/* 8207D6D4h case   19:*/		regs.LR = regs.R12;
		/* 8207D6D4h case   19:*/		return 0x8207D6D8;
		  /* 8207D6D8h */ case   20:  		/* bclr 20, CR0_LT */
		/* 8207D6D8h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D6D8h case   20:*/		return 0x8207D6DC;
	}
	return 0x8207D6DC;
} // Block from 8207D688h-8207D6DCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207D6DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D6DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D6DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D6DC);
		  /* 8207D6DCh */ case    0:  		/* nop */
		/* 8207D6DCh case    0:*/		cpu::op::nop();
		/* 8207D6DCh case    0:*/		return 0x8207D6E0;
		  /* 8207D6E0h */ case    1:  		/* addi R11, R3, 56 */
		/* 8207D6E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x38);
		/* 8207D6E0h case    1:*/		return 0x8207D6E4;
		  /* 8207D6E4h */ case    2:  		/* ld R10, <#[R11]> */
		/* 8207D6E4h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D6E4h case    2:*/		return 0x8207D6E8;
		  /* 8207D6E8h */ case    3:  		/* mr R6, R10 */
		/* 8207D6E8h case    3:*/		regs.R6 = regs.R10;
		/* 8207D6E8h case    3:*/		return 0x8207D6EC;
		  /* 8207D6ECh */ case    4:  		/* std R10, <#[R1 - 16]> */
		/* 8207D6ECh case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D6ECh case    4:*/		return 0x8207D6F0;
		  /* 8207D6F0h */ case    5:  		/* lwz R10, <#[R1 - 16]> */
		/* 8207D6F0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D6F0h case    5:*/		return 0x8207D6F4;
		  /* 8207D6F4h */ case    6:  		/* addi R9, R10, 1 */
		/* 8207D6F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 8207D6F4h case    6:*/		return 0x8207D6F8;
		  /* 8207D6F8h */ case    7:  		/* stw R9, <#[R1 - 16]> */
		/* 8207D6F8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D6F8h case    7:*/		return 0x8207D6FC;
		  /* 8207D6FCh */ case    8:  		/* ld R10, <#[R1 - 16]> */
		/* 8207D6FCh case    8:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D6FCh case    8:*/		return 0x8207D700;
		  /* 8207D700h */ case    9:  		/* mfmsr R7, MSR */
		/* 8207D700h case    9:*/		regs.R7 = regs.MSR;
		/* 8207D700h case    9:*/		return 0x8207D704;
		  /* 8207D704h */ case   10:  		/* mtmsrd MSR, R13 */
		/* 8207D704h case   10:*/		regs.MSR = regs.R13;
		/* 8207D704h case   10:*/		return 0x8207D708;
		  /* 8207D708h */ case   11:  		/* ldarx R8, <#[R11]> */
		/* 8207D708h case   11:*/		cpu::mem::ldarx( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D708h case   11:*/		return 0x8207D70C;
		  /* 8207D70Ch */ case   12:  		/* cmpd CR6, R8, R6 */
		/* 8207D70Ch case   12:*/		cpu::op::cmpd<6>(regs,regs.R8,regs.R6);
		/* 8207D70Ch case   12:*/		return 0x8207D710;
		  /* 8207D710h */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 8207D710h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8207D724;  }
		/* 8207D710h case   13:*/		return 0x8207D714;
		  /* 8207D714h */ case   14:  		/* stdcx. R10, <#[R11]> */
		/* 8207D714h case   14:*/		cpu::mem::stdcx( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D714h case   14:*/		return 0x8207D718;
		  /* 8207D718h */ case   15:  		/* mtmsrd MSR, R7 */
		/* 8207D718h case   15:*/		regs.MSR = regs.R7;
		/* 8207D718h case   15:*/		return 0x8207D71C;
		  /* 8207D71Ch */ case   16:  		/* bc 4, CR0_EQ, -28 */
		/* 8207D71Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x8207D700;  }
		/* 8207D71Ch case   16:*/		return 0x8207D720;
		  /* 8207D720h */ case   17:  		/* b 12 */
		/* 8207D720h case   17:*/		return 0x8207D72C;
		/* 8207D720h case   17:*/		return 0x8207D724;
	}
	return 0x8207D724;
} // Block from 8207D6DCh-8207D724h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207D724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D724);
		  /* 8207D724h */ case    0:  		/* stdcx. R8, <#[R11]> */
		/* 8207D724h case    0:*/		cpu::mem::stdcx( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D724h case    0:*/		return 0x8207D728;
		  /* 8207D728h */ case    1:  		/* mtmsrd MSR, R7 */
		/* 8207D728h case    1:*/		regs.MSR = regs.R7;
		/* 8207D728h case    1:*/		return 0x8207D72C;
	}
	return 0x8207D72C;
} // Block from 8207D724h-8207D72Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207D72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D72C);
		  /* 8207D72Ch */ case    0:  		/* mr R10, R8 */
		/* 8207D72Ch case    0:*/		regs.R10 = regs.R8;
		/* 8207D72Ch case    0:*/		return 0x8207D730;
		  /* 8207D730h */ case    1:  		/* cmpd CR6, R8, R6 */
		/* 8207D730h case    1:*/		cpu::op::cmpd<6>(regs,regs.R8,regs.R6);
		/* 8207D730h case    1:*/		return 0x8207D734;
		  /* 8207D734h */ case    2:  		/* bc 4, CR6_EQ, -80 */
		/* 8207D734h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207D6E4;  }
		/* 8207D734h case    2:*/		return 0x8207D738;
		  /* 8207D738h */ case    3:  		/* lwz R11, <#[R1 - 12]> */
		/* 8207D738h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFFF4) );
		/* 8207D738h case    3:*/		return 0x8207D73C;
		  /* 8207D73Ch */ case    4:  		/* subf R11, R9, R11 */
		/* 8207D73Ch case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8207D73Ch case    4:*/		return 0x8207D740;
		  /* 8207D740h */ case    5:  		/* cntlzw R11, R11 */
		/* 8207D740h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8207D740h case    5:*/		return 0x8207D744;
		  /* 8207D744h */ case    6:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8207D744h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8207D744h case    6:*/		return 0x8207D748;
		  /* 8207D748h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207D748h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D748h case    7:*/		return 0x8207D74C;
	}
	return 0x8207D74C;
} // Block from 8207D72Ch-8207D74Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207D74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D74C);
		  /* 8207D74Ch */ case    0:  		/* nop */
		/* 8207D74Ch case    0:*/		cpu::op::nop();
		/* 8207D74Ch case    0:*/		return 0x8207D750;
		  /* 8207D750h */ case    1:  		/* addi R11, R3, 56 */
		/* 8207D750h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x38);
		/* 8207D750h case    1:*/		return 0x8207D754;
		  /* 8207D754h */ case    2:  		/* ld R10, <#[R11]> */
		/* 8207D754h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D754h case    2:*/		return 0x8207D758;
		  /* 8207D758h */ case    3:  		/* mr R7, R10 */
		/* 8207D758h case    3:*/		regs.R7 = regs.R10;
		/* 8207D758h case    3:*/		return 0x8207D75C;
		  /* 8207D75Ch */ case    4:  		/* std R10, <#[R1 - 16]> */
		/* 8207D75Ch case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D75Ch case    4:*/		return 0x8207D760;
		  /* 8207D760h */ case    5:  		/* stw R4, <#[R1 - 12]> */
		/* 8207D760h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0xFFFFFFF4) );
		/* 8207D760h case    5:*/		return 0x8207D764;
		  /* 8207D764h */ case    6:  		/* ld R10, <#[R1 - 16]> */
		/* 8207D764h case    6:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D764h case    6:*/		return 0x8207D768;
		  /* 8207D768h */ case    7:  		/* mfmsr R8, MSR */
		/* 8207D768h case    7:*/		regs.R8 = regs.MSR;
		/* 8207D768h case    7:*/		return 0x8207D76C;
		  /* 8207D76Ch */ case    8:  		/* mtmsrd MSR, R13 */
		/* 8207D76Ch case    8:*/		regs.MSR = regs.R13;
		/* 8207D76Ch case    8:*/		return 0x8207D770;
		  /* 8207D770h */ case    9:  		/* ldarx R9, <#[R11]> */
		/* 8207D770h case    9:*/		cpu::mem::ldarx( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D770h case    9:*/		return 0x8207D774;
		  /* 8207D774h */ case   10:  		/* cmpd CR6, R9, R7 */
		/* 8207D774h case   10:*/		cpu::op::cmpd<6>(regs,regs.R9,regs.R7);
		/* 8207D774h case   10:*/		return 0x8207D778;
		  /* 8207D778h */ case   11:  		/* bc 4, CR6_EQ, 20 */
		/* 8207D778h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8207D78C;  }
		/* 8207D778h case   11:*/		return 0x8207D77C;
		  /* 8207D77Ch */ case   12:  		/* stdcx. R10, <#[R11]> */
		/* 8207D77Ch case   12:*/		cpu::mem::stdcx( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D77Ch case   12:*/		return 0x8207D780;
		  /* 8207D780h */ case   13:  		/* mtmsrd MSR, R8 */
		/* 8207D780h case   13:*/		regs.MSR = regs.R8;
		/* 8207D780h case   13:*/		return 0x8207D784;
		  /* 8207D784h */ case   14:  		/* bc 4, CR0_EQ, -28 */
		/* 8207D784h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8207D768;  }
		/* 8207D784h case   14:*/		return 0x8207D788;
		  /* 8207D788h */ case   15:  		/* b 12 */
		/* 8207D788h case   15:*/		return 0x8207D794;
		/* 8207D788h case   15:*/		return 0x8207D78C;
	}
	return 0x8207D78C;
} // Block from 8207D74Ch-8207D78Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207D78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D78C);
		  /* 8207D78Ch */ case    0:  		/* stdcx. R9, <#[R11]> */
		/* 8207D78Ch case    0:*/		cpu::mem::stdcx( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D78Ch case    0:*/		return 0x8207D790;
		  /* 8207D790h */ case    1:  		/* mtmsrd MSR, R8 */
		/* 8207D790h case    1:*/		regs.MSR = regs.R8;
		/* 8207D790h case    1:*/		return 0x8207D794;
	}
	return 0x8207D794;
} // Block from 8207D78Ch-8207D794h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207D794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D794);
		  /* 8207D794h */ case    0:  		/* mr R10, R9 */
		/* 8207D794h case    0:*/		regs.R10 = regs.R9;
		/* 8207D794h case    0:*/		return 0x8207D798;
		  /* 8207D798h */ case    1:  		/* cmpd CR6, R9, R7 */
		/* 8207D798h case    1:*/		cpu::op::cmpd<6>(regs,regs.R9,regs.R7);
		/* 8207D798h case    1:*/		return 0x8207D79C;
		  /* 8207D79Ch */ case    2:  		/* bc 4, CR6_EQ, -72 */
		/* 8207D79Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207D754;  }
		/* 8207D79Ch case    2:*/		return 0x8207D7A0;
		  /* 8207D7A0h */ case    3:  		/* lwz R11, <#[R1 - 16]> */
		/* 8207D7A0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207D7A0h case    3:*/		return 0x8207D7A4;
		  /* 8207D7A4h */ case    4:  		/* subf R11, R11, R4 */
		/* 8207D7A4h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 8207D7A4h case    4:*/		return 0x8207D7A8;
		  /* 8207D7A8h */ case    5:  		/* cntlzw R11, R11 */
		/* 8207D7A8h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8207D7A8h case    5:*/		return 0x8207D7AC;
		  /* 8207D7ACh */ case    6:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8207D7ACh case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8207D7ACh case    6:*/		return 0x8207D7B0;
		  /* 8207D7B0h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207D7B0h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207D7B0h case    7:*/		return 0x8207D7B4;
	}
	return 0x8207D7B4;
} // Block from 8207D794h-8207D7B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207D7B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D7B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D7B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D7B4);
		  /* 8207D7B4h */ case    0:  		/* nop */
		/* 8207D7B4h case    0:*/		cpu::op::nop();
		/* 8207D7B4h case    0:*/		return 0x8207D7B8;
	}
	return 0x8207D7B8;
} // Block from 8207D7B4h-8207D7B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207D7B8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D7B8);
		  /* 8207D7B8h */ case    0:  		/* mfspr R12, LR */
		/* 8207D7B8h case    0:*/		regs.R12 = regs.LR;
		/* 8207D7B8h case    0:*/		return 0x8207D7BC;
		  /* 8207D7BCh */ case    1:  		/* bl 80544 */
		/* 8207D7BCh case    1:*/		regs.LR = 0x8207D7C0; return 0x8209125C;
		/* 8207D7BCh case    1:*/		return 0x8207D7C0;
		  /* 8207D7C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207D7C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207D7C0h case    2:*/		return 0x8207D7C4;
		  /* 8207D7C4h */ case    3:  		/* lwz R11, <#[R3 + 56]> */
		/* 8207D7C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8207D7C4h case    3:*/		return 0x8207D7C8;
		  /* 8207D7C8h */ case    4:  		/* mr R31, R3 */
		/* 8207D7C8h case    4:*/		regs.R31 = regs.R3;
		/* 8207D7C8h case    4:*/		return 0x8207D7CC;
		  /* 8207D7CCh */ case    5:  		/* lwz R3, <#[R3 + 48]> */
		/* 8207D7CCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 8207D7CCh case    5:*/		return 0x8207D7D0;
		  /* 8207D7D0h */ case    6:  		/* mr R30, R4 */
		/* 8207D7D0h case    6:*/		regs.R30 = regs.R4;
		/* 8207D7D0h case    6:*/		return 0x8207D7D4;
		  /* 8207D7D4h */ case    7:  		/* mr R29, R5 */
		/* 8207D7D4h case    7:*/		regs.R29 = regs.R5;
		/* 8207D7D4h case    7:*/		return 0x8207D7D8;
		  /* 8207D7D8h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 8207D7D8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207D7D8h case    8:*/		return 0x8207D7DC;
		  /* 8207D7DCh */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 8207D7DCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x8207D7E8;  }
		/* 8207D7DCh case    9:*/		return 0x8207D7E0;
		  /* 8207D7E0h */ case   10:  		/* mr R3, R31 */
		/* 8207D7E0h case   10:*/		regs.R3 = regs.R31;
		/* 8207D7E0h case   10:*/		return 0x8207D7E4;
		  /* 8207D7E4h */ case   11:  		/* bl -38620 */
		/* 8207D7E4h case   11:*/		regs.LR = 0x8207D7E8; return 0x82074108;
		/* 8207D7E4h case   11:*/		return 0x8207D7E8;
	}
	return 0x8207D7E8;
} // Block from 8207D7B8h-8207D7E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207D7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D7E8);
		  /* 8207D7E8h */ case    0:  		/* lis R10, -16384 */
		/* 8207D7E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8207D7E8h case    0:*/		return 0x8207D7EC;
		  /* 8207D7ECh */ case    1:  		/* li R11, -1 */
		/* 8207D7ECh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207D7ECh case    1:*/		return 0x8207D7F0;
		  /* 8207D7F0h */ case    2:  		/* ori R10, R10, 24576 */
		/* 8207D7F0h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6000);
		/* 8207D7F0h case    2:*/		return 0x8207D7F4;
		  /* 8207D7F4h */ case    3:  		/* lis R8, -16384 */
		/* 8207D7F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC000);
		/* 8207D7F4h case    3:*/		return 0x8207D7F8;
		  /* 8207D7F8h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207D7F8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D7F8h case    4:*/		return 0x8207D7FC;
		  /* 8207D7FCh */ case    5:  		/* lis R10, -16384 */
		/* 8207D7FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8207D7FCh case    5:*/		return 0x8207D800;
		  /* 8207D800h */ case    6:  		/* ori R8, R8, 24832 */
		/* 8207D800h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x6100);
		/* 8207D800h case    6:*/		return 0x8207D804;
		  /* 8207D804h */ case    7:  		/* ori R10, R10, 25088 */
		/* 8207D804h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6200);
		/* 8207D804h case    7:*/		return 0x8207D808;
		  /* 8207D808h */ case    8:  		/* li R7, 0 */
		/* 8207D808h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207D808h case    8:*/		return 0x8207D80C;
		  /* 8207D80Ch */ case    9:  		/* mr R9, R11 */
		/* 8207D80Ch case    9:*/		regs.R9 = regs.R11;
		/* 8207D80Ch case    9:*/		return 0x8207D810;
		  /* 8207D810h */ case   10:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207D810h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D810h case   10:*/		return 0x8207D814;
		  /* 8207D814h */ case   11:  		/* lis R9, -16384 */
		/* 8207D814h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 8207D814h case   11:*/		return 0x8207D818;
		  /* 8207D818h */ case   12:  		/* li R6, 0 */
		/* 8207D818h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207D818h case   12:*/		return 0x8207D81C;
		  /* 8207D81Ch */ case   13:  		/* ori R9, R9, 25344 */
		/* 8207D81Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x6300);
		/* 8207D81Ch case   13:*/		return 0x8207D820;
		  /* 8207D820h */ case   14:  		/* stwu R10, <#[R3 + 4]> */
		/* 8207D820h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D820h case   14:*/		return 0x8207D824;
		  /* 8207D824h */ case   15:  		/* stwu R11, <#[R3 + 4]> */
		/* 8207D824h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D824h case   15:*/		return 0x8207D828;
		  /* 8207D828h */ case   16:  		/* stwu R8, <#[R3 + 4]> */
		/* 8207D828h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D828h case   16:*/		return 0x8207D82C;
		  /* 8207D82Ch */ case   17:  		/* stwu R7, <#[R3 + 4]> */
		/* 8207D82Ch case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D82Ch case   17:*/		return 0x8207D830;
		  /* 8207D830h */ case   18:  		/* stwu R9, <#[R3 + 4]> */
		/* 8207D830h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D830h case   18:*/		return 0x8207D834;
		  /* 8207D834h */ case   19:  		/* stwu R6, <#[R3 + 4]> */
		/* 8207D834h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8207D834h case   19:*/		return 0x8207D838;
		  /* 8207D838h */ case   20:  		/* lwz R11, <#[R31 + 15332]> */
		/* 8207D838h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003BE4) );
		/* 8207D838h case   20:*/		return 0x8207D83C;
		  /* 8207D83Ch */ case   21:  		/* addi R11, R11, -4 */
		/* 8207D83Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8207D83Ch case   21:*/		return 0x8207D840;
		  /* 8207D840h */ case   22:  		/* stw R3, <#[R31 + 48]> */
		/* 8207D840h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8207D840h case   22:*/		return 0x8207D844;
		  /* 8207D844h */ case   23:  		/* cmplw CR6, R3, R11 */
		/* 8207D844h case   23:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207D844h case   23:*/		return 0x8207D848;
		  /* 8207D848h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 8207D848h case   24:*/		if ( regs.CR[6].eq ) { return 0x8207D854;  }
		/* 8207D848h case   24:*/		return 0x8207D84C;
		  /* 8207D84Ch */ case   25:  		/* mr R3, R31 */
		/* 8207D84Ch case   25:*/		regs.R3 = regs.R31;
		/* 8207D84Ch case   25:*/		return 0x8207D850;
		  /* 8207D850h */ case   26:  		/* bl -38728 */
		/* 8207D850h case   26:*/		regs.LR = 0x8207D854; return 0x82074108;
		/* 8207D850h case   26:*/		return 0x8207D854;
	}
	return 0x8207D854;
} // Block from 8207D7E8h-8207D854h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8207D854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D854);
		  /* 8207D854h */ case    0:  		/* mr R3, R31 */
		/* 8207D854h case    0:*/		regs.R3 = regs.R31;
		/* 8207D854h case    0:*/		return 0x8207D858;
		  /* 8207D858h */ case    1:  		/* bl -34024 */
		/* 8207D858h case    1:*/		regs.LR = 0x8207D85C; return 0x82075370;
		/* 8207D858h case    1:*/		return 0x8207D85C;
		  /* 8207D85Ch */ case    2:  		/* addi R11, R31, 24592 */
		/* 8207D85Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x6010);
		/* 8207D85Ch case    2:*/		return 0x8207D860;
		  /* 8207D860h */ case    3:  		/* mfmsr R8, MSR */
		/* 8207D860h case    3:*/		regs.R8 = regs.MSR;
		/* 8207D860h case    3:*/		return 0x8207D864;
		  /* 8207D864h */ case    4:  		/* mtmsrd MSR, R13 */
		/* 8207D864h case    4:*/		regs.MSR = regs.R13;
		/* 8207D864h case    4:*/		return 0x8207D868;
		  /* 8207D868h */ case    5:  		/* lwarx R10, <#[R11]> */
		/* 8207D868h case    5:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D868h case    5:*/		return 0x8207D86C;
		  /* 8207D86Ch */ case    6:  		/* add R9, R3, R10 */
		/* 8207D86Ch case    6:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R10);
		/* 8207D86Ch case    6:*/		return 0x8207D870;
		  /* 8207D870h */ case    7:  		/* stwcx. R9, <#[R11]> */
		/* 8207D870h case    7:*/		cpu::mem::stwcx( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8207D870h case    7:*/		return 0x8207D874;
		  /* 8207D874h */ case    8:  		/* mtmsrd MSR, R8 */
		/* 8207D874h case    8:*/		regs.MSR = regs.R8;
		/* 8207D874h case    8:*/		return 0x8207D878;
		  /* 8207D878h */ case    9:  		/* bc 4, CR0_EQ, -24 */
		/* 8207D878h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8207D860;  }
		/* 8207D878h case    9:*/		return 0x8207D87C;
		  /* 8207D87Ch */ case   10:  		/* lwz R11, <#[R31 + 24492]> */
		/* 8207D87Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005FAC) );
		/* 8207D87Ch case   10:*/		return 0x8207D880;
		  /* 8207D880h */ case   11:  		/* rlwinm R10, R30, 0, 25, 31 */
		/* 8207D880h case   11:*/		cpu::op::rlwinm<0,0,25,31>(regs,&regs.R10,regs.R30);
		/* 8207D880h case   11:*/		return 0x8207D884;
		  /* 8207D884h */ case   12:  		/* lwz R9, <#[R1 + 84]> */
		/* 8207D884h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D884h case   12:*/		return 0x8207D888;
		  /* 8207D888h */ case   13:  		/* rlwinm R8, R29, 0, 31, 31 */
		/* 8207D888h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R29);
		/* 8207D888h case   13:*/		return 0x8207D88C;
		  /* 8207D88Ch */ case   14:  		/* rlwinm R11, R11, 16, 0, 14 */
		/* 8207D88Ch case   14:*/		cpu::op::rlwinm<0,16,0,14>(regs,&regs.R11,regs.R11);
		/* 8207D88Ch case   14:*/		return 0x8207D890;
		  /* 8207D890h */ case   15:  		/* lbz R7, <#[R31 + 11072]> */
		/* 8207D890h case   15:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207D890h case   15:*/		return 0x8207D894;
		  /* 8207D894h */ case   16:  		/* andi. R9, R9, 2049 */
		/* 8207D894h case   16:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R9,0x801);
		/* 8207D894h case   16:*/		return 0x8207D898;
		  /* 8207D898h */ case   17:  		/* or R11, R11, R10 */
		/* 8207D898h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207D898h case   17:*/		return 0x8207D89C;
		  /* 8207D89Ch */ case   18:  		/* ori R10, R7, 8 */
		/* 8207D89Ch case   18:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R7,0x8);
		/* 8207D89Ch case   18:*/		return 0x8207D8A0;
	}
	return 0x8207D8A0;
} // Block from 8207D854h-8207D8A0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207D8A0h
// Function '?XBMAdvanceCaptureFile@D3D@@YAXPAUXBMContext@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D8A0);
		  /* 8207D8A0h */ case    0:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8207D8A0h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8207D8A0h case    0:*/		return 0x8207D8A4;
		  /* 8207D8A4h */ case    1:  		/* lis R7, -28672 */
		/* 8207D8A4h case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF9000);
		/* 8207D8A4h case    1:*/		return 0x8207D8A8;
		  /* 8207D8A8h */ case    2:  		/* stb R10, <#[R31 + 11072]> */
		/* 8207D8A8h case    2:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 8207D8A8h case    2:*/		return 0x8207D8AC;
		  /* 8207D8ACh */ case    3:  		/* ori R11, R11, 4608 */
		/* 8207D8ACh case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1200);
		/* 8207D8ACh case    3:*/		return 0x8207D8B0;
		  /* 8207D8B0h */ case    4:  		/* stw R7, <#[R1 + 80]> */
		/* 8207D8B0h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8207D8B0h case    4:*/		return 0x8207D8B4;
		  /* 8207D8B4h */ case    5:  		/* cmplwi CR0, R8, 0 */
		/* 8207D8B4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 8207D8B4h case    5:*/		return 0x8207D8B8;
		  /* 8207D8B8h */ case    6:  		/* or R11, R11, R9 */
		/* 8207D8B8h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8207D8B8h case    6:*/		return 0x8207D8BC;
		  /* 8207D8BCh */ case    7:  		/* stw R11, <#[R1 + 84]> */
		/* 8207D8BCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D8BCh case    7:*/		return 0x8207D8C0;
		  /* 8207D8C0h */ case    8:  		/* bc 12, CR0_EQ, 32 */
		/* 8207D8C0h case    8:*/		if ( regs.CR[0].eq ) { return 0x8207D8E0;  }
		/* 8207D8C0h case    8:*/		return 0x8207D8C4;
		  /* 8207D8C4h */ case    9:  		/* lwz R10, <#[R31 + 16952]> */
		/* 8207D8C4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00004238) );
		/* 8207D8C4h case    9:*/		return 0x8207D8C8;
		  /* 8207D8C8h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8207D8C8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8207D8C8h case   10:*/		return 0x8207D8CC;
		  /* 8207D8CCh */ case   11:  		/* bc 4, CR6_GT, 20 */
		/* 8207D8CCh case   11:*/		if ( !regs.CR[6].gt ) { return 0x8207D8E0;  }
		/* 8207D8CCh case   11:*/		return 0x8207D8D0;
		  /* 8207D8D0h */ case   12:  		/* lwz R10, <#[R31 + 16968]> */
		/* 8207D8D0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00004248) );
		/* 8207D8D0h case   12:*/		return 0x8207D8D4;
		  /* 8207D8D4h */ case   13:  		/* ori R11, R11, 2048 */
		/* 8207D8D4h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8207D8D4h case   13:*/		return 0x8207D8D8;
		  /* 8207D8D8h */ case   14:  		/* stw R11, <#[R1 + 84]> */
		/* 8207D8D8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207D8D8h case   14:*/		return 0x8207D8DC;
		  /* 8207D8DCh */ case   15:  		/* stw R10, <#[R1 + 88]> */
		/* 8207D8DCh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8207D8DCh case   15:*/		return 0x8207D8E0;
	}
	return 0x8207D8E0;
} // Block from 8207D8A0h-8207D8E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207D8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D8E0);
		  /* 8207D8E0h */ case    0:  		/* li R8, 1 */
		/* 8207D8E0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8207D8E0h case    0:*/		return 0x8207D8E4;
		  /* 8207D8E4h */ case    1:  		/* li R7, 1 */
		/* 8207D8E4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8207D8E4h case    1:*/		return 0x8207D8E8;
		  /* 8207D8E8h */ case    2:  		/* li R6, 4 */
		/* 8207D8E8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8207D8E8h case    2:*/		return 0x8207D8EC;
		  /* 8207D8ECh */ case    3:  		/* li R5, 1 */
		/* 8207D8ECh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8207D8ECh case    3:*/		return 0x8207D8F0;
		  /* 8207D8F0h */ case    4:  		/* addi R4, R1, 80 */
		/* 8207D8F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207D8F0h case    4:*/		return 0x8207D8F4;
		  /* 8207D8F4h */ case    5:  		/* mr R3, R31 */
		/* 8207D8F4h case    5:*/		regs.R3 = regs.R31;
		/* 8207D8F4h case    5:*/		return 0x8207D8F8;
		  /* 8207D8F8h */ case    6:  		/* bl -39336 */
		/* 8207D8F8h case    6:*/		regs.LR = 0x8207D8FC; return 0x82073F50;
		/* 8207D8F8h case    6:*/		return 0x8207D8FC;
		  /* 8207D8FCh */ case    7:  		/* li R3, 0 */
		/* 8207D8FCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207D8FCh case    7:*/		return 0x8207D900;
		  /* 8207D900h */ case    8:  		/* addi R1, R1, 128 */
		/* 8207D900h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207D900h case    8:*/		return 0x8207D904;
		  /* 8207D904h */ case    9:  		/* b 80296 */
		/* 8207D904h case    9:*/		return 0x820912AC;
		/* 8207D904h case    9:*/		return 0x8207D908;
	}
	return 0x8207D908;
} // Block from 8207D8E0h-8207D908h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207D908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D908);
		  /* 8207D908h */ case    0:  		/* mfspr R12, LR */
		/* 8207D908h case    0:*/		regs.R12 = regs.LR;
		/* 8207D908h case    0:*/		return 0x8207D90C;
		  /* 8207D90Ch */ case    1:  		/* bl 80188 */
		/* 8207D90Ch case    1:*/		regs.LR = 0x8207D910; return 0x82091248;
		/* 8207D90Ch case    1:*/		return 0x8207D910;
		  /* 8207D910h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8207D910h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8207D910h case    2:*/		return 0x8207D914;
		  /* 8207D914h */ case    3:  		/* mr R29, R3 */
		/* 8207D914h case    3:*/		regs.R29 = regs.R3;
		/* 8207D914h case    3:*/		return 0x8207D918;
		  /* 8207D918h */ case    4:  		/* mr R26, R4 */
		/* 8207D918h case    4:*/		regs.R26 = regs.R4;
		/* 8207D918h case    4:*/		return 0x8207D91C;
		  /* 8207D91Ch */ case    5:  		/* mr R25, R5 */
		/* 8207D91Ch case    5:*/		regs.R25 = regs.R5;
		/* 8207D91Ch case    5:*/		return 0x8207D920;
		  /* 8207D920h */ case    6:  		/* mr R24, R6 */
		/* 8207D920h case    6:*/		regs.R24 = regs.R6;
		/* 8207D920h case    6:*/		return 0x8207D924;
		  /* 8207D924h */ case    7:  		/* cmplwi CR6, R5, 0 */
		/* 8207D924h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8207D924h case    7:*/		return 0x8207D928;
		  /* 8207D928h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 8207D928h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8207D930;  }
		/* 8207D928h case    8:*/		return 0x8207D92C;
		  /* 8207D92Ch */ case    9:  		/* li R25, 1024 */
		/* 8207D92Ch case    9:*/		cpu::op::li<0>(regs,&regs.R25,0x400);
		/* 8207D92Ch case    9:*/		return 0x8207D930;
	}
	return 0x8207D930;
} // Block from 8207D908h-8207D930h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207D930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D930);
		  /* 8207D930h */ case    0:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207D930h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207D930h case    0:*/		return 0x8207D934;
		  /* 8207D934h */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 8207D934h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 8207D934h case    1:*/		return 0x8207D938;
		  /* 8207D938h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8207D938h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207D954;  }
		/* 8207D938h case    2:*/		return 0x8207D93C;
		  /* 8207D93Ch */ case    3:  		/* cmplwi CR6, R26, 0 */
		/* 8207D93Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8207D93Ch case    3:*/		return 0x8207D940;
		  /* 8207D940h */ case    4:  		/* bc 12, CR6_EQ, 224 */
		/* 8207D940h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207DA20;  }
		/* 8207D940h case    4:*/		return 0x8207D944;
		  /* 8207D944h */ case    5:  		/* lwz R11, <#[R29 + 24492]> */
		/* 8207D944h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00005FAC) );
		/* 8207D944h case    5:*/		return 0x8207D948;
		  /* 8207D948h */ case    6:  		/* addi R10, R25, -1 */
		/* 8207D948h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0xFFFFFFFF);
		/* 8207D948h case    6:*/		return 0x8207D94C;
		  /* 8207D94Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8207D94Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207D94Ch case    7:*/		return 0x8207D950;
		  /* 8207D950h */ case    8:  		/* bc 12, CR6_EQ, 208 */
		/* 8207D950h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207DA20;  }
		/* 8207D950h case    8:*/		return 0x8207D954;
	}
	return 0x8207D954;
} // Block from 8207D930h-8207D954h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207D954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D954);
		  /* 8207D954h */ case    0:  		/* lwz R11, <#[R29 + 24592]> */
		/* 8207D954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006010) );
		/* 8207D954h case    0:*/		return 0x8207D958;
	}
	return 0x8207D958;
} // Block from 8207D954h-8207D958h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207D958h
// Function '?XBMBeginCapture@D3D@@YAHPAVCDevice@1@PAUD3DBaseTexture@@PBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D958);
		  /* 8207D958h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 8207D958h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207D958h case    0:*/		return 0x8207D95C;
		  /* 8207D95Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8207D95Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8207D968;  }
		/* 8207D95Ch case    1:*/		return 0x8207D960;
		  /* 8207D960h */ case    2:  		/* mr R3, R29 */
		/* 8207D960h case    2:*/		regs.R3 = regs.R29;
		/* 8207D960h case    2:*/		return 0x8207D964;
		  /* 8207D964h */ case    3:  		/* bl -38316 */
		/* 8207D964h case    3:*/		regs.LR = 0x8207D968; return 0x820743B8;
		/* 8207D964h case    3:*/		return 0x8207D968;
	}
	return 0x8207D968;
} // Block from 8207D958h-8207D968h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207D968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D968);
		  /* 8207D968h */ case    0:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207D968h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207D968h case    0:*/		return 0x8207D96C;
		  /* 8207D96Ch */ case    1:  		/* li R31, 0 */
		/* 8207D96Ch case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8207D96Ch case    1:*/		return 0x8207D970;
		  /* 8207D970h */ case    2:  		/* mr R28, R31 */
		/* 8207D970h case    2:*/		regs.R28 = regs.R31;
		/* 8207D970h case    2:*/		return 0x8207D974;
		  /* 8207D974h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8207D974h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207D974h case    3:*/		return 0x8207D978;
		  /* 8207D978h */ case    4:  		/* bc 4, CR6_GT, 64 */
		/* 8207D978h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207D9B8;  }
		/* 8207D978h case    4:*/		return 0x8207D97C;
		  /* 8207D97Ch */ case    5:  		/* addi R30, R29, 24464 */
		/* 8207D97Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x5F90);
		/* 8207D97Ch case    5:*/		return 0x8207D980;
		  /* 8207D980h */ case    6:  		/* lis R4, 9344 */
		/* 8207D980h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207D980h case    6:*/		return 0x8207D984;
		  /* 8207D984h */ case    7:  		/* lwz R3, <#[R30 + 12]> */
		/* 8207D984h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207D984h case    7:*/		return 0x8207D988;
		  /* 8207D988h */ case    8:  		/* bl 43440 */
		/* 8207D988h case    8:*/		regs.LR = 0x8207D98C; return 0x82088338;
		/* 8207D988h case    8:*/		return 0x8207D98C;
		  /* 8207D98Ch */ case    9:  		/* stw R31, <#[R30 + 20]> */
		/* 8207D98Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 8207D98Ch case    9:*/		return 0x8207D990;
		  /* 8207D990h */ case   10:  		/* stw R31, <#[R30 + 12]> */
		/* 8207D990h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207D990h case   10:*/		return 0x8207D994;
		  /* 8207D994h */ case   11:  		/* addi R28, R28, 1 */
		/* 8207D994h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8207D994h case   11:*/		return 0x8207D998;
		  /* 8207D998h */ case   12:  		/* stw R31, <#[R30 + 24]> */
		/* 8207D998h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000018) );
		/* 8207D998h case   12:*/		return 0x8207D99C;
		  /* 8207D99Ch */ case   13:  		/* stw R31, <#[R30 + 16]> */
		/* 8207D99Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 8207D99Ch case   13:*/		return 0x8207D9A0;
		  /* 8207D9A0h */ case   14:  		/* stw R31, <#[R30 + 28]> */
		/* 8207D9A0h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8207D9A0h case   14:*/		return 0x8207D9A4;
		  /* 8207D9A4h */ case   15:  		/* stw R31, <#[R30 + 32]> */
		/* 8207D9A4h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000020) );
		/* 8207D9A4h case   15:*/		return 0x8207D9A8;
		  /* 8207D9A8h */ case   16:  		/* stwu R31, <#[R30 + 36]> */
		/* 8207D9A8h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000024) );
		regs.R30 = (uint32)(regs.R30 + 0x00000024);
		/* 8207D9A8h case   16:*/		return 0x8207D9AC;
		  /* 8207D9ACh */ case   17:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207D9ACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207D9ACh case   17:*/		return 0x8207D9B0;
		  /* 8207D9B0h */ case   18:  		/* cmplw CR6, R28, R11 */
		/* 8207D9B0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8207D9B0h case   18:*/		return 0x8207D9B4;
		  /* 8207D9B4h */ case   19:  		/* bc 12, CR6_LT, -52 */
		/* 8207D9B4h case   19:*/		if ( regs.CR[6].lt ) { return 0x8207D980;  }
		/* 8207D9B4h case   19:*/		return 0x8207D9B8;
	}
	return 0x8207D9B8;
} // Block from 8207D968h-8207D9B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207D9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207D9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207D9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207D9B8);
		  /* 8207D9B8h */ case    0:  		/* stw R26, <#[R29 + 24584]> */
		/* 8207D9B8h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R29 + 0x00006008) );
		/* 8207D9B8h case    0:*/		return 0x8207D9BC;
		  /* 8207D9BCh */ case    1:  		/* mr R27, R31 */
		/* 8207D9BCh case    1:*/		regs.R27 = regs.R31;
		/* 8207D9BCh case    1:*/		return 0x8207D9C0;
		  /* 8207D9C0h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8207D9C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8207D9C0h case    2:*/		return 0x8207D9C4;
		  /* 8207D9C4h */ case    3:  		/* stw R24, <#[R29 + 24588]> */
		/* 8207D9C4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R29 + 0x0000600C) );
		/* 8207D9C4h case    3:*/		return 0x8207D9C8;
		  /* 8207D9C8h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 8207D9C8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207DA20;  }
		/* 8207D9C8h case    4:*/		return 0x8207D9CC;
		  /* 8207D9CCh */ case    5:  		/* mulli R26, R25, 28 */
		/* 8207D9CCh case    5:*/		cpu::op::mulli<0>(regs,&regs.R26,regs.R25,0x1C);
		/* 8207D9CCh case    5:*/		return 0x8207D9D0;
		  /* 8207D9D0h */ case    6:  		/* li R28, 2 */
		/* 8207D9D0h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 8207D9D0h case    6:*/		return 0x8207D9D4;
		  /* 8207D9D4h */ case    7:  		/* addi R30, R29, 24460 */
		/* 8207D9D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x5F8C);
		/* 8207D9D4h case    7:*/		return 0x8207D9D8;
		  /* 8207D9D8h */ case    8:  		/* lis R4, 25728 */
		/* 8207D9D8h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0x6480);
		/* 8207D9D8h case    8:*/		return 0x8207D9DC;
		  /* 8207D9DCh */ case    9:  		/* mr R3, R26 */
		/* 8207D9DCh case    9:*/		regs.R3 = regs.R26;
		/* 8207D9DCh case    9:*/		return 0x8207D9E0;
		  /* 8207D9E0h */ case   10:  		/* bl 43040 */
		/* 8207D9E0h case   10:*/		regs.LR = 0x8207D9E4; return 0x82088200;
		/* 8207D9E0h case   10:*/		return 0x8207D9E4;
		  /* 8207D9E4h */ case   11:  		/* stw R3, <#[R30 + 16]> */
		/* 8207D9E4h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 8207D9E4h case   11:*/		return 0x8207D9E8;
		  /* 8207D9E8h */ case   12:  		/* cmplwi CR0, R3, 0 */
		/* 8207D9E8h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207D9E8h case   12:*/		return 0x8207D9EC;
		  /* 8207D9ECh */ case   13:  		/* bc 12, CR0_EQ, 64 */
		/* 8207D9ECh case   13:*/		if ( regs.CR[0].eq ) { return 0x8207DA2C;  }
		/* 8207D9ECh case   13:*/		return 0x8207D9F0;
		  /* 8207D9F0h */ case   14:  		/* addi R11, R25, -1 */
		/* 8207D9F0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 8207D9F0h case   14:*/		return 0x8207D9F4;
		  /* 8207D9F4h */ case   15:  		/* stw R31, <#[R30 + 20]> */
		/* 8207D9F4h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 8207D9F4h case   15:*/		return 0x8207D9F8;
		  /* 8207D9F8h */ case   16:  		/* stw R31, <#[R30 + 24]> */
		/* 8207D9F8h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000018) );
		/* 8207D9F8h case   16:*/		return 0x8207D9FC;
		  /* 8207D9FCh */ case   17:  		/* addi R27, R27, 1 */
		/* 8207D9FCh case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8207D9FCh case   17:*/		return 0x8207DA00;
		  /* 8207DA00h */ case   18:  		/* stw R31, <#[R30 + 28]> */
		/* 8207DA00h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8207DA00h case   18:*/		return 0x8207DA04;
		  /* 8207DA04h */ case   19:  		/* stw R11, <#[R30 + 32]> */
		/* 8207DA04h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8207DA04h case   19:*/		return 0x8207DA08;
		  /* 8207DA08h */ case   20:  		/* stw R31, <#[R30 + 40]> */
		/* 8207DA08h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000028) );
		/* 8207DA08h case   20:*/		return 0x8207DA0C;
		  /* 8207DA0Ch */ case   21:  		/* stwu R28, <#[R30 + 36]> */
		/* 8207DA0Ch case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000024) );
		regs.R30 = (uint32)(regs.R30 + 0x00000024);
		/* 8207DA0Ch case   21:*/		return 0x8207DA10;
		  /* 8207DA10h */ case   22:  		/* addi R28, R28, 2 */
		/* 8207DA10h case   22:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 8207DA10h case   22:*/		return 0x8207DA14;
		  /* 8207DA14h */ case   23:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207DA14h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207DA14h case   23:*/		return 0x8207DA18;
		  /* 8207DA18h */ case   24:  		/* cmplw CR6, R27, R11 */
		/* 8207DA18h case   24:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8207DA18h case   24:*/		return 0x8207DA1C;
		  /* 8207DA1Ch */ case   25:  		/* bc 12, CR6_LT, -68 */
		/* 8207DA1Ch case   25:*/		if ( regs.CR[6].lt ) { return 0x8207D9D8;  }
		/* 8207DA1Ch case   25:*/		return 0x8207DA20;
	}
	return 0x8207DA20;
} // Block from 8207D9B8h-8207DA20h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207DA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DA20);
		  /* 8207DA20h */ case    0:  		/* li R3, 0 */
		/* 8207DA20h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207DA20h case    0:*/		return 0x8207DA24;
		  /* 8207DA24h */ case    1:  		/* addi R1, R1, 160 */
		/* 8207DA24h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8207DA24h case    1:*/		return 0x8207DA28;
		  /* 8207DA28h */ case    2:  		/* b 79984 */
		/* 8207DA28h case    2:*/		return 0x82091298;
		/* 8207DA28h case    2:*/		return 0x8207DA2C;
	}
	return 0x8207DA2C;
} // Block from 8207DA20h-8207DA2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207DA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DA2C);
		  /* 8207DA2Ch */ case    0:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207DA2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207DA2Ch case    0:*/		return 0x8207DA30;
		  /* 8207DA30h */ case    1:  		/* mr R28, R31 */
		/* 8207DA30h case    1:*/		regs.R28 = regs.R31;
		/* 8207DA30h case    1:*/		return 0x8207DA34;
		  /* 8207DA34h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8207DA34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207DA34h case    2:*/		return 0x8207DA38;
		  /* 8207DA38h */ case    3:  		/* bc 4, CR6_GT, 64 */
		/* 8207DA38h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207DA78;  }
		/* 8207DA38h case    3:*/		return 0x8207DA3C;
		  /* 8207DA3Ch */ case    4:  		/* addi R30, R29, 24464 */
		/* 8207DA3Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x5F90);
		/* 8207DA3Ch case    4:*/		return 0x8207DA40;
		  /* 8207DA40h */ case    5:  		/* lis R4, 9344 */
		/* 8207DA40h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207DA40h case    5:*/		return 0x8207DA44;
		  /* 8207DA44h */ case    6:  		/* lwz R3, <#[R30 + 12]> */
		/* 8207DA44h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DA44h case    6:*/		return 0x8207DA48;
		  /* 8207DA48h */ case    7:  		/* bl 43248 */
		/* 8207DA48h case    7:*/		regs.LR = 0x8207DA4C; return 0x82088338;
		/* 8207DA48h case    7:*/		return 0x8207DA4C;
		  /* 8207DA4Ch */ case    8:  		/* stw R31, <#[R30 + 20]> */
		/* 8207DA4Ch case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000014) );
		/* 8207DA4Ch case    8:*/		return 0x8207DA50;
		  /* 8207DA50h */ case    9:  		/* stw R31, <#[R30 + 12]> */
		/* 8207DA50h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DA50h case    9:*/		return 0x8207DA54;
		  /* 8207DA54h */ case   10:  		/* addi R28, R28, 1 */
		/* 8207DA54h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8207DA54h case   10:*/		return 0x8207DA58;
		  /* 8207DA58h */ case   11:  		/* stw R31, <#[R30 + 24]> */
		/* 8207DA58h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000018) );
		/* 8207DA58h case   11:*/		return 0x8207DA5C;
		  /* 8207DA5Ch */ case   12:  		/* stw R31, <#[R30 + 16]> */
		/* 8207DA5Ch case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 8207DA5Ch case   12:*/		return 0x8207DA60;
		  /* 8207DA60h */ case   13:  		/* stw R31, <#[R30 + 28]> */
		/* 8207DA60h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8207DA60h case   13:*/		return 0x8207DA64;
		  /* 8207DA64h */ case   14:  		/* stw R31, <#[R30 + 32]> */
		/* 8207DA64h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000020) );
		/* 8207DA64h case   14:*/		return 0x8207DA68;
		  /* 8207DA68h */ case   15:  		/* stwu R31, <#[R30 + 36]> */
		/* 8207DA68h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000024) );
		regs.R30 = (uint32)(regs.R30 + 0x00000024);
		/* 8207DA68h case   15:*/		return 0x8207DA6C;
		  /* 8207DA6Ch */ case   16:  		/* lwz R11, <#[R29 + 24584]> */
		/* 8207DA6Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00006008) );
		/* 8207DA6Ch case   16:*/		return 0x8207DA70;
		  /* 8207DA70h */ case   17:  		/* cmplw CR6, R28, R11 */
		/* 8207DA70h case   17:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8207DA70h case   17:*/		return 0x8207DA74;
		  /* 8207DA74h */ case   18:  		/* bc 12, CR6_LT, -52 */
		/* 8207DA74h case   18:*/		if ( regs.CR[6].lt ) { return 0x8207DA40;  }
		/* 8207DA74h case   18:*/		return 0x8207DA78;
	}
	return 0x8207DA78;
} // Block from 8207DA2Ch-8207DA78h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207DA78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DA78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DA78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DA78);
		  /* 8207DA78h */ case    0:  		/* lis R3, -32761 */
		/* 8207DA78h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8207DA78h case    0:*/		return 0x8207DA7C;
		  /* 8207DA7Ch */ case    1:  		/* stw R31, <#[R29 + 24584]> */
		/* 8207DA7Ch case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00006008) );
		/* 8207DA7Ch case    1:*/		return 0x8207DA80;
		  /* 8207DA80h */ case    2:  		/* stw R31, <#[R29 + 24588]> */
		/* 8207DA80h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x0000600C) );
		/* 8207DA80h case    2:*/		return 0x8207DA84;
		  /* 8207DA84h */ case    3:  		/* ori R3, R3, 14 */
		/* 8207DA84h case    3:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8207DA84h case    3:*/		return 0x8207DA88;
		  /* 8207DA88h */ case    4:  		/* b -100 */
		/* 8207DA88h case    4:*/		return 0x8207DA24;
		/* 8207DA88h case    4:*/		return 0x8207DA8C;
		  /* 8207DA8Ch */ case    5:  		/* nop */
		/* 8207DA8Ch case    5:*/		cpu::op::nop();
		/* 8207DA8Ch case    5:*/		return 0x8207DA90;
		  /* 8207DA90h */ case    6:  		/* lis R10, 32712 */
		/* 8207DA90h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x7FC8);
		/* 8207DA90h case    6:*/		return 0x8207DA94;
		  /* 8207DA94h */ case    7:  		/* addi R11, R3, 11512 */
		/* 8207DA94h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x2CF8);
		/* 8207DA94h case    7:*/		return 0x8207DA98;
		  /* 8207DA98h */ case    8:  		/* lwz R9, <#[R10 + 4396]> */
		/* 8207DA98h case    8:*/		regs.IO->MEM_READ( 0x8207DA98, (uint32)(regs.R10 + 0x0000112C), 4, &regs.R9 );
		/* 8207DA98h case    8:*/		return 0x8207DA9C;
		  /* 8207DA9Ch */ case    9:  		/* stw R9, <#[R3 + 11520]> */
		/* 8207DA9Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00002D00) );
		/* 8207DA9Ch case    9:*/		return 0x8207DAA0;
		  /* 8207DAA0h */ case   10:  		/* mftb R9, 12, 8 */
		/* 8207DAA0h case   10:*/		cpu::op::mftb<0>(regs,&regs.R9,0xC,0x8);
		/* 8207DAA0h case   10:*/		return 0x8207DAA4;
		  /* 8207DAA4h */ case   11:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 8207DAA4h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 8207DAA4h case   11:*/		return 0x8207DAA8;
		  /* 8207DAA8h */ case   12:  		/* lwz R8, <#[R3 + 11524]> */
		/* 8207DAA8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00002D04) );
		/* 8207DAA8h case   12:*/		return 0x8207DAAC;
		  /* 8207DAACh */ case   13:  		/* lwz R7, <#[R3 + 11520]> */
		/* 8207DAACh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00002D00) );
		/* 8207DAACh case   13:*/		return 0x8207DAB0;
		  /* 8207DAB0h */ case   14:  		/* stw R9, <#[R3 + 11516]> */
		/* 8207DAB0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00002CFC) );
		/* 8207DAB0h case   14:*/		return 0x8207DAB4;
		  /* 8207DAB4h */ case   15:  		/* lwz R6, <#[R3 + 11024]> */
		/* 8207DAB4h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DAB4h case   15:*/		return 0x8207DAB8;
		  /* 8207DAB8h */ case   16:  		/* lwz R5, <#[R3 + 11548]> */
		/* 8207DAB8h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00002D1C) );
		/* 8207DAB8h case   16:*/		return 0x8207DABC;
		  /* 8207DABCh */ case   17:  		/* cmpwi CR6, R5, 0 */
		/* 8207DABCh case   17:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207DABCh case   17:*/		return 0x8207DAC0;
		  /* 8207DAC0h */ case   18:  		/* lwz R6, <#[R6 + 112]> */
		/* 8207DAC0h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000070) );
		/* 8207DAC0h case   18:*/		return 0x8207DAC4;
		  /* 8207DAC4h */ case   19:  		/* subf R8, R8, R6 */
		/* 8207DAC4h case   19:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 8207DAC4h case   19:*/		return 0x8207DAC8;
		  /* 8207DAC8h */ case   20:  		/* stw R8, <#[R3 + 11528]> */
		/* 8207DAC8h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00002D08) );
		/* 8207DAC8h case   20:*/		return 0x8207DACC;
		  /* 8207DACCh */ case   21:  		/* lwz R8, <#[R3 + 11024]> */
		/* 8207DACCh case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DACCh case   21:*/		return 0x8207DAD0;
		  /* 8207DAD0h */ case   22:  		/* lwz R8, <#[R8 + 112]> */
		/* 8207DAD0h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000070) );
		/* 8207DAD0h case   22:*/		return 0x8207DAD4;
		  /* 8207DAD4h */ case   23:  		/* subf R8, R8, R7 */
		/* 8207DAD4h case   23:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8207DAD4h case   23:*/		return 0x8207DAD8;
		  /* 8207DAD8h */ case   24:  		/* stw R8, <#[R3 + 11532]> */
		/* 8207DAD8h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00002D0C) );
		/* 8207DAD8h case   24:*/		return 0x8207DADC;
		  /* 8207DADCh */ case   25:  		/* lwz R8, <#[R3 + 16964]> */
		/* 8207DADCh case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00004244) );
		/* 8207DADCh case   25:*/		return 0x8207DAE0;
		  /* 8207DAE0h */ case   26:  		/* subf R9, R8, R9 */
		/* 8207DAE0h case   26:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8207DAE0h case   26:*/		return 0x8207DAE4;
		  /* 8207DAE4h */ case   27:  		/* mulli R9, R9, 10 */
		/* 8207DAE4h case   27:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0xA);
		/* 8207DAE4h case   27:*/		return 0x8207DAE8;
		  /* 8207DAE8h */ case   28:  		/* stw R7, <#[R3 + 11524]> */
		/* 8207DAE8h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00002D04) );
		/* 8207DAE8h case   28:*/		return 0x8207DAEC;
		  /* 8207DAECh */ case   29:  		/* stw R8, <#[R3 + 11512]> */
		/* 8207DAECh case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00002CF8) );
		/* 8207DAECh case   29:*/		return 0x8207DAF0;
		  /* 8207DAF0h */ case   30:  		/* stw R9, <#[R3 + 11536]> */
		/* 8207DAF0h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00002D10) );
		/* 8207DAF0h case   30:*/		return 0x8207DAF4;
		  /* 8207DAF4h */ case   31:  		/* lwz R9, <#[R3 + 11024]> */
		/* 8207DAF4h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DAF4h case   31:*/		return 0x8207DAF8;
		  /* 8207DAF8h */ case   32:  		/* lwz R8, <#[R9 + 116]> */
		/* 8207DAF8h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000074) );
		/* 8207DAF8h case   32:*/		return 0x8207DAFC;
		  /* 8207DAFCh */ case   33:  		/* lwz R9, <#[R9 + 112]> */
		/* 8207DAFCh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000070) );
		/* 8207DAFCh case   33:*/		return 0x8207DB00;
		  /* 8207DB00h */ case   34:  		/* subf R9, R9, R8 */
		/* 8207DB00h case   34:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8207DB00h case   34:*/		return 0x8207DB04;
		  /* 8207DB04h */ case   35:  		/* stw R9, <#[R3 + 11560]> */
		/* 8207DB04h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00002D28) );
		/* 8207DB04h case   35:*/		return 0x8207DB08;
		  /* 8207DB08h */ case   36:  		/* bc 12, CR6_EQ, 92 */
		/* 8207DB08h case   36:*/		if ( regs.CR[6].eq ) { return 0x8207DB64;  }
		/* 8207DB08h case   36:*/		return 0x8207DB0C;
		  /* 8207DB0Ch */ case   37:  		/* lbz R9, <#[R3 + 11070]> */
		/* 8207DB0Ch case   37:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R3 + 0x00002B3E) );
		/* 8207DB0Ch case   37:*/		return 0x8207DB10;
		  /* 8207DB10h */ case   38:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8207DB10h case   38:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8207DB10h case   38:*/		return 0x8207DB14;
		  /* 8207DB14h */ case   39:  		/* bc 12, CR0_EQ, 80 */
		/* 8207DB14h case   39:*/		if ( regs.CR[0].eq ) { return 0x8207DB64;  }
		/* 8207DB14h case   39:*/		return 0x8207DB18;
		  /* 8207DB18h */ case   40:  		/* lwz R9, <#[R3 + 11024]> */
		/* 8207DB18h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DB18h case   40:*/		return 0x8207DB1C;
		  /* 8207DB1Ch */ case   41:  		/* lwz R10, <#[R10 + 3676]> */
		/* 8207DB1Ch case   41:*/		regs.IO->MEM_READ( 0x8207DB1C, (uint32)(regs.R10 + 0x00000E5C), 4, &regs.R10 );
		/* 8207DB1Ch case   41:*/		return 0x8207DB20;
		  /* 8207DB20h */ case   42:  		/* lwz R8, <#[R11 + 40]> */
		/* 8207DB20h case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 8207DB20h case   42:*/		return 0x8207DB24;
		  /* 8207DB24h */ case   43:  		/* cmpwi CR6, R8, 0 */
		/* 8207DB24h case   43:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 8207DB24h case   43:*/		return 0x8207DB28;
		  /* 8207DB28h */ case   44:  		/* lwz R9, <#[R9 + 120]> */
		/* 8207DB28h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000078) );
		/* 8207DB28h case   44:*/		return 0x8207DB2C;
		  /* 8207DB2Ch */ case   45:  		/* subf R9, R9, R10 */
		/* 8207DB2Ch case   45:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8207DB2Ch case   45:*/		return 0x8207DB30;
		  /* 8207DB30h */ case   46:  		/* stw R9, <#[R11 + 28]> */
		/* 8207DB30h case   46:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 8207DB30h case   46:*/		return 0x8207DB34;
		  /* 8207DB34h */ case   47:  		/* bc 12, CR6_EQ, 24 */
		/* 8207DB34h case   47:*/		if ( regs.CR[6].eq ) { return 0x8207DB4C;  }
		/* 8207DB34h case   47:*/		return 0x8207DB38;
		  /* 8207DB38h */ case   48:  		/* lwz R9, <#[R3 + 11024]> */
		/* 8207DB38h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DB38h case   48:*/		return 0x8207DB3C;
		  /* 8207DB3Ch */ case   49:  		/* lwz R8, <#[R11 + 44]> */
		/* 8207DB3Ch case   49:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000002C) );
		/* 8207DB3Ch case   49:*/		return 0x8207DB40;
		  /* 8207DB40h */ case   50:  		/* lwz R9, <#[R9 + 120]> */
		/* 8207DB40h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000078) );
		/* 8207DB40h case   50:*/		return 0x8207DB44;
		  /* 8207DB44h */ case   51:  		/* subf R9, R8, R9 */
		/* 8207DB44h case   51:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8207DB44h case   51:*/		return 0x8207DB48;
		  /* 8207DB48h */ case   52:  		/* b 8 */
		/* 8207DB48h case   52:*/		return 0x8207DB50;
		/* 8207DB48h case   52:*/		return 0x8207DB4C;
	}
	return 0x8207DB4C;
} // Block from 8207DA78h-8207DB4Ch (53 instructions)

//////////////////////////////////////////////////////
// Block at 8207DB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DB4C);
		  /* 8207DB4Ch */ case    0:  		/* li R9, 0 */
		/* 8207DB4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8207DB4Ch case    0:*/		return 0x8207DB50;
	}
	return 0x8207DB50;
} // Block from 8207DB4Ch-8207DB50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207DB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DB50);
		  /* 8207DB50h */ case    0:  		/* stw R9, <#[R11 + 32]> */
		/* 8207DB50h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 8207DB50h case    0:*/		return 0x8207DB54;
		  /* 8207DB54h */ case    1:  		/* li R9, 1 */
		/* 8207DB54h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8207DB54h case    1:*/		return 0x8207DB58;
		  /* 8207DB58h */ case    2:  		/* stw R10, <#[R11 + 44]> */
		/* 8207DB58h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 8207DB58h case    2:*/		return 0x8207DB5C;
		  /* 8207DB5Ch */ case    3:  		/* stw R9, <#[R11 + 40]> */
		/* 8207DB5Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 8207DB5Ch case    3:*/		return 0x8207DB60;
		  /* 8207DB60h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207DB60h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207DB60h case    4:*/		return 0x8207DB64;
	}
	return 0x8207DB64;
} // Block from 8207DB50h-8207DB64h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207DB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DB64);
		  /* 8207DB64h */ case    0:  		/* li R10, 0 */
		/* 8207DB64h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207DB64h case    0:*/		return 0x8207DB68;
		  /* 8207DB68h */ case    1:  		/* stw R10, <#[R11 + 32]> */
		/* 8207DB68h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 8207DB68h case    1:*/		return 0x8207DB6C;
		  /* 8207DB6Ch */ case    2:  		/* stw R10, <#[R11 + 28]> */
		/* 8207DB6Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000001C) );
		/* 8207DB6Ch case    2:*/		return 0x8207DB70;
		  /* 8207DB70h */ case    3:  		/* stw R10, <#[R11 + 40]> */
		/* 8207DB70h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8207DB70h case    3:*/		return 0x8207DB74;
		  /* 8207DB74h */ case    4:  		/* lwz R11, <#[R3 + 11024]> */
		/* 8207DB74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00002B10) );
		/* 8207DB74h case    4:*/		return 0x8207DB78;
		  /* 8207DB78h */ case    5:  		/* lwz R10, <#[R11 + 120]> */
		/* 8207DB78h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000078) );
		/* 8207DB78h case    5:*/		return 0x8207DB7C;
		  /* 8207DB7Ch */ case    6:  		/* stw R10, <#[R11 + 124]> */
		/* 8207DB7Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000007C) );
		/* 8207DB7Ch case    6:*/		return 0x8207DB80;
		  /* 8207DB80h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207DB80h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207DB80h case    7:*/		return 0x8207DB84;
	}
	return 0x8207DB84;
} // Block from 8207DB64h-8207DB84h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207DB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DB84);
		  /* 8207DB84h */ case    0:  		/* nop */
		/* 8207DB84h case    0:*/		cpu::op::nop();
		/* 8207DB84h case    0:*/		return 0x8207DB88;
	}
	return 0x8207DB88;
} // Block from 8207DB84h-8207DB88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207DB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DB88);
		  /* 8207DB88h */ case    0:  		/* mfspr R12, LR */
		/* 8207DB88h case    0:*/		regs.R12 = regs.LR;
		/* 8207DB88h case    0:*/		return 0x8207DB8C;
		  /* 8207DB8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207DB8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207DB8Ch case    1:*/		return 0x8207DB90;
		  /* 8207DB90h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207DB90h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207DB90h case    2:*/		return 0x8207DB94;
		  /* 8207DB94h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207DB94h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207DB94h case    3:*/		return 0x8207DB98;
		  /* 8207DB98h */ case    4:  		/* mr R31, R3 */
		/* 8207DB98h case    4:*/		regs.R31 = regs.R3;
		/* 8207DB98h case    4:*/		return 0x8207DB9C;
		  /* 8207DB9Ch */ case    5:  		/* addi R3, R3, 11512 */
		/* 8207DB9Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x2CF8);
		/* 8207DB9Ch case    5:*/		return 0x8207DBA0;
		  /* 8207DBA0h */ case    6:  		/* bl -1216 */
		/* 8207DBA0h case    6:*/		regs.LR = 0x8207DBA4; return 0x8207D6E0;
		/* 8207DBA0h case    6:*/		return 0x8207DBA4;
		  /* 8207DBA4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8207DBA4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207DBA4h case    7:*/		return 0x8207DBA8;
		  /* 8207DBA8h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 8207DBA8h case    8:*/		if ( regs.CR[0].eq ) { return 0x8207DBB4;  }
		/* 8207DBA8h case    8:*/		return 0x8207DBAC;
		  /* 8207DBACh */ case    9:  		/* mr R3, R31 */
		/* 8207DBACh case    9:*/		regs.R3 = regs.R31;
		/* 8207DBACh case    9:*/		return 0x8207DBB0;
		  /* 8207DBB0h */ case   10:  		/* bl -288 */
		/* 8207DBB0h case   10:*/		regs.LR = 0x8207DBB4; return 0x8207DA90;
		/* 8207DBB0h case   10:*/		return 0x8207DBB4;
	}
	return 0x8207DBB4;
} // Block from 8207DB88h-8207DBB4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207DBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DBB4);
		  /* 8207DBB4h */ case    0:  		/* li R5, 0 */
		/* 8207DBB4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207DBB4h case    0:*/		return 0x8207DBB8;
		  /* 8207DBB8h */ case    1:  		/* li R4, 1 */
		/* 8207DBB8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207DBB8h case    1:*/		return 0x8207DBBC;
		  /* 8207DBBCh */ case    2:  		/* addi R3, R31, 24460 */
		/* 8207DBBCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x5F8C);
		/* 8207DBBCh case    2:*/		return 0x8207DBC0;
		  /* 8207DBC0h */ case    3:  		/* bl 2028376 */
		/* 8207DBC0h case    3:*/		regs.LR = 0x8207DBC4; return 0x8226CF18;
		/* 8207DBC0h case    3:*/		return 0x8207DBC4;
		  /* 8207DBC4h */ case    4:  		/* addi R1, R1, 96 */
		/* 8207DBC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207DBC4h case    4:*/		return 0x8207DBC8;
		  /* 8207DBC8h */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207DBC8h case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207DBC8h case    5:*/		return 0x8207DBCC;
		  /* 8207DBCCh */ case    6:  		/* mtspr LR, R12 */
		/* 8207DBCCh case    6:*/		regs.LR = regs.R12;
		/* 8207DBCCh case    6:*/		return 0x8207DBD0;
		  /* 8207DBD0h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 8207DBD0h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207DBD0h case    7:*/		return 0x8207DBD4;
		  /* 8207DBD4h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8207DBD4h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207DBD4h case    8:*/		return 0x8207DBD8;
	}
	return 0x8207DBD8;
} // Block from 8207DBB4h-8207DBD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207DBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DBD8);
		  /* 8207DBD8h */ case    0:  		/* mulli R11, R4, 36 */
		/* 8207DBD8h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R4,0x24);
		/* 8207DBD8h case    0:*/		return 0x8207DBDC;
		  /* 8207DBDCh */ case    1:  		/* add R11, R11, R3 */
		/* 8207DBDCh case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8207DBDCh case    1:*/		return 0x8207DBE0;
		  /* 8207DBE0h */ case    2:  		/* addi R11, R11, 24476 */
		/* 8207DBE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5F9C);
		/* 8207DBE0h case    2:*/		return 0x8207DBE4;
		  /* 8207DBE4h */ case    3:  		/* lwz R9, <#[R11 + 4]> */
		/* 8207DBE4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8207DBE4h case    3:*/		return 0x8207DBE8;
		  /* 8207DBE8h */ case    4:  		/* lwz R10, <#[R11 + 12]> */
		/* 8207DBE8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207DBE8h case    4:*/		return 0x8207DBEC;
		  /* 8207DBECh */ case    5:  		/* cmplw CR6, R10, R9 */
		/* 8207DBECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8207DBECh case    5:*/		return 0x8207DBF0;
		  /* 8207DBF0h */ case    6:  		/* bc 12, CR6_EQ, 80 */
		/* 8207DBF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207DC40;  }
		/* 8207DBF0h case    6:*/		return 0x8207DBF4;
		  /* 8207DBF4h */ case    7:  		/* lwz R8, <#[R11 + 16]> */
		/* 8207DBF4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 8207DBF4h case    7:*/		return 0x8207DBF8;
		  /* 8207DBF8h */ case    8:  		/* lwz R7, <#[R11]> */
		/* 8207DBF8h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8207DBF8h case    8:*/		return 0x8207DBFC;
		  /* 8207DBFCh */ case    9:  		/* and R9, R8, R10 */
		/* 8207DBFCh case    9:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 8207DBFCh case    9:*/		return 0x8207DC00;
		  /* 8207DC00h */ case   10:  		/* mulli R9, R9, 28 */
		/* 8207DC00h case   10:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x1C);
		/* 8207DC00h case   10:*/		return 0x8207DC04;
		  /* 8207DC04h */ case   11:  		/* add R9, R9, R7 */
		/* 8207DC04h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8207DC04h case   11:*/		return 0x8207DC08;
		  /* 8207DC08h */ case   12:  		/* lwz R9, <#[R9 + 24]> */
		/* 8207DC08h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000018) );
		/* 8207DC08h case   12:*/		return 0x8207DC0C;
		  /* 8207DC0Ch */ case   13:  		/* rlwinm. R9, R9, 0, 1, 1 */
		/* 8207DC0Ch case   13:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R9);
		/* 8207DC0Ch case   13:*/		return 0x8207DC10;
		  /* 8207DC10h */ case   14:  		/* bc 12, CR0_EQ, 48 */
		/* 8207DC10h case   14:*/		if ( regs.CR[0].eq ) { return 0x8207DC40;  }
		/* 8207DC10h case   14:*/		return 0x8207DC14;
		  /* 8207DC14h */ case   15:  		/* lwz R9, <#[R11 + 8]> */
		/* 8207DC14h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8207DC14h case   15:*/		return 0x8207DC18;
		  /* 8207DC18h */ case   16:  		/* addi R10, R10, 1 */
		/* 8207DC18h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8207DC18h case   16:*/		return 0x8207DC1C;
		  /* 8207DC1Ch */ case   17:  		/* addi R9, R9, 1 */
		/* 8207DC1Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8207DC1Ch case   17:*/		return 0x8207DC20;
		  /* 8207DC20h */ case   18:  		/* stw R10, <#[R11 + 12]> */
		/* 8207DC20h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207DC20h case   18:*/		return 0x8207DC24;
		  /* 8207DC24h */ case   19:  		/* cmplw CR6, R9, R10 */
		/* 8207DC24h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8207DC24h case   19:*/		return 0x8207DC28;
		  /* 8207DC28h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 8207DC28h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8207DC30;  }
		/* 8207DC28h case   20:*/		return 0x8207DC2C;
		  /* 8207DC2Ch */ case   21:  		/* stw R10, <#[R11 + 8]> */
		/* 8207DC2Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8207DC2Ch case   21:*/		return 0x8207DC30;
	}
	return 0x8207DC30;
} // Block from 8207DBD8h-8207DC30h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8207DC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DC30);
		  /* 8207DC30h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 8207DC30h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8207DC30h case    0:*/		return 0x8207DC34;
		  /* 8207DC34h */ case    1:  		/* lwz R6, <#[R11 + 12]> */
		/* 8207DC34h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 8207DC34h case    1:*/		return 0x8207DC38;
		  /* 8207DC38h */ case    2:  		/* cmplw CR6, R6, R9 */
		/* 8207DC38h case    2:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R9);
		/* 8207DC38h case    2:*/		return 0x8207DC3C;
		  /* 8207DC3Ch */ case    3:  		/* bc 4, CR6_EQ, -64 */
		/* 8207DC3Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207DBFC;  }
		/* 8207DC3Ch case    3:*/		return 0x8207DC40;
	}
	return 0x8207DC40;
} // Block from 8207DC30h-8207DC40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207DC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DC40);
		  /* 8207DC40h */ case    0:  		/* li R3, 0 */
		/* 8207DC40h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207DC40h case    0:*/		return 0x8207DC44;
		  /* 8207DC44h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8207DC44h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207DC44h case    1:*/		return 0x8207DC48;
	}
	return 0x8207DC48;
} // Block from 8207DC40h-8207DC48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207DC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DC48);
		  /* 8207DC48h */ case    0:  		/* mfspr R12, LR */
		/* 8207DC48h case    0:*/		regs.R12 = regs.LR;
		/* 8207DC48h case    0:*/		return 0x8207DC4C;
		  /* 8207DC4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207DC4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207DC4Ch case    1:*/		return 0x8207DC50;
		  /* 8207DC50h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207DC50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207DC50h case    2:*/		return 0x8207DC54;
		  /* 8207DC54h */ case    3:  		/* rlwinm R11, R4, 12, 20, 31 */
		/* 8207DC54h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R4);
		/* 8207DC54h case    3:*/		return 0x8207DC58;
		  /* 8207DC58h */ case    4:  		/* rlwinm R10, R4, 0, 3, 31 */
		/* 8207DC58h case    4:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R4);
		/* 8207DC58h case    4:*/		return 0x8207DC5C;
		  /* 8207DC5Ch */ case    5:  		/* addi R11, R11, 512 */
		/* 8207DC5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8207DC5Ch case    5:*/		return 0x8207DC60;
		  /* 8207DC60h */ case    6:  		/* lis R9, -16382 */
		/* 8207DC60h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC002);
		/* 8207DC60h case    6:*/		return 0x8207DC64;
		  /* 8207DC64h */ case    7:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207DC64h case    7:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207DC64h case    7:*/		return 0x8207DC68;
		  /* 8207DC68h */ case    8:  		/* lis R8, -32768 */
		/* 8207DC68h case    8:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8000);
		/* 8207DC68h case    8:*/		return 0x8207DC6C;
		  /* 8207DC6Ch */ case    9:  		/* add R11, R11, R10 */
		/* 8207DC6Ch case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207DC6Ch case    9:*/		return 0x8207DC70;
		  /* 8207DC70h */ case   10:  		/* lis R10, -8531 */
		/* 8207DC70h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFDEAD);
		/* 8207DC70h case   10:*/		return 0x8207DC74;
		  /* 8207DC74h */ case   11:  		/* ori R9, R9, 22528 */
		/* 8207DC74h case   11:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x5800);
		/* 8207DC74h case   11:*/		return 0x8207DC78;
		  /* 8207DC78h */ case   12:  		/* ori R8, R8, 3 */
		/* 8207DC78h case   12:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x3);
		/* 8207DC78h case   12:*/		return 0x8207DC7C;
		  /* 8207DC7Ch */ case   13:  		/* ori R10, R10, 48879 */
		/* 8207DC7Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xBEEF);
		/* 8207DC7Ch case   13:*/		return 0x8207DC80;
		  /* 8207DC80h */ case   14:  		/* stw R9, <#[R1 + 80]> */
		/* 8207DC80h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207DC80h case   14:*/		return 0x8207DC84;
		  /* 8207DC84h */ case   15:  		/* ori R11, R11, 2 */
		/* 8207DC84h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8207DC84h case   15:*/		return 0x8207DC88;
		  /* 8207DC88h */ case   16:  		/* stw R8, <#[R1 + 84]> */
		/* 8207DC88h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 8207DC88h case   16:*/		return 0x8207DC8C;
		  /* 8207DC8Ch */ case   17:  		/* stw R10, <#[R1 + 92]> */
		/* 8207DC8Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207DC8Ch case   17:*/		return 0x8207DC90;
		  /* 8207DC90h */ case   18:  		/* li R5, 4 */
		/* 8207DC90h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8207DC90h case   18:*/		return 0x8207DC94;
		  /* 8207DC94h */ case   19:  		/* stw R11, <#[R1 + 88]> */
		/* 8207DC94h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207DC94h case   19:*/		return 0x8207DC98;
		  /* 8207DC98h */ case   20:  		/* addi R4, R1, 80 */
		/* 8207DC98h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207DC98h case   20:*/		return 0x8207DC9C;
		  /* 8207DC9Ch */ case   21:  		/* bl -46132 */
		/* 8207DC9Ch case   21:*/		regs.LR = 0x8207DCA0; return 0x82072868;
		/* 8207DC9Ch case   21:*/		return 0x8207DCA0;
		  /* 8207DCA0h */ case   22:  		/* addi R1, R1, 112 */
		/* 8207DCA0h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207DCA0h case   22:*/		return 0x8207DCA4;
		  /* 8207DCA4h */ case   23:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207DCA4h case   23:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207DCA4h case   23:*/		return 0x8207DCA8;
		  /* 8207DCA8h */ case   24:  		/* mtspr LR, R12 */
		/* 8207DCA8h case   24:*/		regs.LR = regs.R12;
		/* 8207DCA8h case   24:*/		return 0x8207DCAC;
		  /* 8207DCACh */ case   25:  		/* bclr 20, CR0_LT */
		/* 8207DCACh case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207DCACh case   25:*/		return 0x8207DCB0;
	}
	return 0x8207DCB0;
} // Block from 8207DC48h-8207DCB0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8207DCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DCB0);
		  /* 8207DCB0h */ case    0:  		/* mfspr R12, LR */
		/* 8207DCB0h case    0:*/		regs.R12 = regs.LR;
		/* 8207DCB0h case    0:*/		return 0x8207DCB4;
		  /* 8207DCB4h */ case    1:  		/* bl 79264 */
		/* 8207DCB4h case    1:*/		regs.LR = 0x8207DCB8; return 0x82091254;
		/* 8207DCB4h case    1:*/		return 0x8207DCB8;
		  /* 8207DCB8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8207DCB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8207DCB8h case    2:*/		return 0x8207DCBC;
		  /* 8207DCBCh */ case    3:  		/* lwz R11, <#[R6 + 16]> */
		/* 8207DCBCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 8207DCBCh case    3:*/		return 0x8207DCC0;
		  /* 8207DCC0h */ case    4:  		/* mr R27, R5 */
		/* 8207DCC0h case    4:*/		regs.R27 = regs.R5;
		/* 8207DCC0h case    4:*/		return 0x8207DCC4;
		  /* 8207DCC4h */ case    5:  		/* mr R28, R3 */
		/* 8207DCC4h case    5:*/		regs.R28 = regs.R3;
		/* 8207DCC4h case    5:*/		return 0x8207DCC8;
	}
	return 0x8207DCC8;
} // Block from 8207DCB0h-8207DCC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207DCC8h
// Function '?XBMEndCapture@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DCC8);
		  /* 8207DCC8h */ case    0:  		/* rlwinm R5, R11, 9, 25, 31 */
		/* 8207DCC8h case    0:*/		cpu::op::rlwinm<0,9,25,31>(regs,&regs.R5,regs.R11);
		/* 8207DCC8h case    0:*/		return 0x8207DCCC;
		  /* 8207DCCCh */ case    1:  		/* mr R31, R4 */
		/* 8207DCCCh case    1:*/		regs.R31 = regs.R4;
		/* 8207DCCCh case    1:*/		return 0x8207DCD0;
		  /* 8207DCD0h */ case    2:  		/* mr R30, R6 */
		/* 8207DCD0h case    2:*/		regs.R30 = regs.R6;
		/* 8207DCD0h case    2:*/		return 0x8207DCD4;
		  /* 8207DCD4h */ case    3:  		/* cmplwi CR6, R5, 16 */
		/* 8207DCD4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 8207DCD4h case    3:*/		return 0x8207DCD8;
		  /* 8207DCD8h */ case    4:  		/* bc 12, CR6_LT, 16 */
		/* 8207DCD8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8207DCE8;  }
		/* 8207DCD8h case    4:*/		return 0x8207DCDC;
		  /* 8207DCDCh */ case    5:  		/* cmplwi CR6, R5, 126 */
		/* 8207DCDCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x0000007E);
		/* 8207DCDCh case    5:*/		return 0x8207DCE0;
		  /* 8207DCE0h */ case    6:  		/* bc 12, CR6_GT, 8 */
		/* 8207DCE0h case    6:*/		if ( regs.CR[6].gt ) { return 0x8207DCE8;  }
		/* 8207DCE0h case    6:*/		return 0x8207DCE4;
		  /* 8207DCE4h */ case    7:  		/* bl -1972 */
		/* 8207DCE4h case    7:*/		regs.LR = 0x8207DCE8; return 0x8207D530;
		/* 8207DCE4h case    7:*/		return 0x8207DCE8;
	}
	return 0x8207DCE8;
} // Block from 8207DCC8h-8207DCE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207DCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DCE8);
		  /* 8207DCE8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8207DCE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8207DCE8h case    0:*/		return 0x8207DCEC;
		  /* 8207DCECh */ case    1:  		/* lis R10, -16384 */
		/* 8207DCECh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8207DCECh case    1:*/		return 0x8207DCF0;
		  /* 8207DCF0h */ case    2:  		/* lwz R9, <#[R30 + 4]> */
		/* 8207DCF0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8207DCF0h case    2:*/		return 0x8207DCF4;
		  /* 8207DCF4h */ case    3:  		/* li R8, 1403 */
		/* 8207DCF4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x57B);
		/* 8207DCF4h case    3:*/		return 0x8207DCF8;
		  /* 8207DCF8h */ case    4:  		/* ori R10, R10, 25344 */
		/* 8207DCF8h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6300);
		/* 8207DCF8h case    4:*/		return 0x8207DCFC;
		  /* 8207DCFCh */ case    5:  		/* stw R8, <#[R1 + 80]> */
		/* 8207DCFCh case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8207DCFCh case    5:*/		return 0x8207DD00;
		  /* 8207DD00h */ case    6:  		/* li R5, 4 */
		/* 8207DD00h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8207DD00h case    6:*/		return 0x8207DD04;
		  /* 8207DD04h */ case    7:  		/* stw R10, <#[R1 + 88]> */
		/* 8207DD04h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8207DD04h case    7:*/		return 0x8207DD08;
		  /* 8207DD08h */ case    8:  		/* addi R4, R1, 80 */
		/* 8207DD08h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207DD08h case    8:*/		return 0x8207DD0C;
		  /* 8207DD0Ch */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 8207DD0Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207DD0Ch case    9:*/		return 0x8207DD10;
		  /* 8207DD10h */ case   10:  		/* mr R3, R31 */
		/* 8207DD10h case   10:*/		regs.R3 = regs.R31;
		/* 8207DD10h case   10:*/		return 0x8207DD14;
		  /* 8207DD14h */ case   11:  		/* stw R9, <#[R1 + 92]> */
		/* 8207DD14h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207DD14h case   11:*/		return 0x8207DD18;
		  /* 8207DD18h */ case   12:  		/* bl -46256 */
		/* 8207DD18h case   12:*/		regs.LR = 0x8207DD1C; return 0x82072868;
		/* 8207DD18h case   12:*/		return 0x8207DD1C;
		  /* 8207DD1Ch */ case   13:  		/* lwz R4, <#[R30 + 12]> */
		/* 8207DD1Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DD1Ch case   13:*/		return 0x8207DD20;
		  /* 8207DD20h */ case   14:  		/* cmplwi CR6, R4, 0 */
		/* 8207DD20h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8207DD20h case   14:*/		return 0x8207DD24;
		  /* 8207DD24h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 8207DD24h case   15:*/		if ( regs.CR[6].eq ) { return 0x8207DD30;  }
		/* 8207DD24h case   15:*/		return 0x8207DD28;
		  /* 8207DD28h */ case   16:  		/* mr R3, R31 */
		/* 8207DD28h case   16:*/		regs.R3 = regs.R31;
		/* 8207DD28h case   16:*/		return 0x8207DD2C;
		  /* 8207DD2Ch */ case   17:  		/* bl -228 */
		/* 8207DD2Ch case   17:*/		regs.LR = 0x8207DD30; return 0x8207DC48;
		/* 8207DD2Ch case   17:*/		return 0x8207DD30;
	}
	return 0x8207DD30;
} // Block from 8207DCE8h-8207DD30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207DD30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DD30);
		  /* 8207DD30h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8207DD30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8207DD30h case    0:*/		return 0x8207DD34;
		  /* 8207DD34h */ case    1:  		/* li R10, 0 */
		/* 8207DD34h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207DD34h case    1:*/		return 0x8207DD38;
		  /* 8207DD38h */ case    2:  		/* lwz R29, <#[R11 + 116]> */
		/* 8207DD38h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000074) );
		/* 8207DD38h case    2:*/		return 0x8207DD3C;
		  /* 8207DD3Ch */ case    3:  		/* stw R10, <#[R31 + 11504]> */
		/* 8207DD3Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002CF0) );
		/* 8207DD3Ch case    3:*/		return 0x8207DD40;
		  /* 8207DD40h */ case    4:  		/* addi R4, R29, 8 */
		/* 8207DD40h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x8);
		/* 8207DD40h case    4:*/		return 0x8207DD44;
		  /* 8207DD44h */ case    5:  		/* lwz R5, <#[R29 + 4]> */
		/* 8207DD44h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000004) );
		/* 8207DD44h case    5:*/		return 0x8207DD48;
		  /* 8207DD48h */ case    6:  		/* mr R3, R31 */
		/* 8207DD48h case    6:*/		regs.R3 = regs.R31;
		/* 8207DD48h case    6:*/		return 0x8207DD4C;
		  /* 8207DD4Ch */ case    7:  		/* bl -43956 */
		/* 8207DD4Ch case    7:*/		regs.LR = 0x8207DD50; return 0x82073198;
		/* 8207DD4Ch case    7:*/		return 0x8207DD50;
		  /* 8207DD50h */ case    8:  		/* lwz R29, <#[R29]> */
		/* 8207DD50h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000000) );
		/* 8207DD50h case    8:*/		return 0x8207DD54;
		  /* 8207DD54h */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 8207DD54h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8207DD54h case    9:*/		return 0x8207DD58;
		  /* 8207DD58h */ case   10:  		/* bc 4, CR6_EQ, -24 */
		/* 8207DD58h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8207DD40;  }
		/* 8207DD58h case   10:*/		return 0x8207DD5C;
		  /* 8207DD5Ch */ case   11:  		/* lwz R11, <#[R30 + 12]> */
		/* 8207DD5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DD5Ch case   11:*/		return 0x8207DD60;
		  /* 8207DD60h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8207DD60h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207DD60h case   12:*/		return 0x8207DD64;
		  /* 8207DD64h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 8207DD64h case   13:*/		if ( regs.CR[6].eq ) { return 0x8207DD7C;  }
		/* 8207DD64h case   13:*/		return 0x8207DD68;
		  /* 8207DD68h */ case   14:  		/* addi R4, R11, 4 */
		/* 8207DD68h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4);
		/* 8207DD68h case   14:*/		return 0x8207DD6C;
		  /* 8207DD6Ch */ case   15:  		/* mr R3, R31 */
		/* 8207DD6Ch case   15:*/		regs.R3 = regs.R31;
		/* 8207DD6Ch case   15:*/		return 0x8207DD70;
		  /* 8207DD70h */ case   16:  		/* bl -296 */
		/* 8207DD70h case   16:*/		regs.LR = 0x8207DD74; return 0x8207DC48;
		/* 8207DD70h case   16:*/		return 0x8207DD74;
		  /* 8207DD74h */ case   17:  		/* li R11, 1 */
		/* 8207DD74h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207DD74h case   17:*/		return 0x8207DD78;
		  /* 8207DD78h */ case   18:  		/* stw R11, <#[R31 + 11504]> */
		/* 8207DD78h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002CF0) );
		/* 8207DD78h case   18:*/		return 0x8207DD7C;
	}
	return 0x8207DD7C;
} // Block from 8207DD30h-8207DD7Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207DD7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DD7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DD7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DD7C);
		  /* 8207DD7Ch */ case    0:  		/* addi R11, R27, 100 */
		/* 8207DD7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x64);
		/* 8207DD7Ch case    0:*/		return 0x8207DD80;
		  /* 8207DD80h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207DD80h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207DD80h case    1:*/		return 0x8207DD84;
		  /* 8207DD84h */ case    2:  		/* lwzx R10, <#[R11 + R28]> */
		/* 8207DD84h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8207DD84h case    2:*/		return 0x8207DD88;
		  /* 8207DD88h */ case    3:  		/* addi R10, R10, 1 */
		/* 8207DD88h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8207DD88h case    3:*/		return 0x8207DD8C;
		  /* 8207DD8Ch */ case    4:  		/* stwx R10, <#[R11 + R28]> */
		/* 8207DD8Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8207DD8Ch case    4:*/		return 0x8207DD90;
		  /* 8207DD90h */ case    5:  		/* stw R27, <#[R28 + 396]> */
		/* 8207DD90h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R28 + 0x0000018C) );
		/* 8207DD90h case    5:*/		return 0x8207DD94;
		  /* 8207DD94h */ case    6:  		/* addi R1, R1, 144 */
		/* 8207DD94h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8207DD94h case    6:*/		return 0x8207DD98;
		  /* 8207DD98h */ case    7:  		/* b 79116 */
		/* 8207DD98h case    7:*/		return 0x820912A4;
		/* 8207DD98h case    7:*/		return 0x8207DD9C;
		  /* 8207DD9Ch */ case    8:  		/* nop */
		/* 8207DD9Ch case    8:*/		cpu::op::nop();
		/* 8207DD9Ch case    8:*/		return 0x8207DDA0;
	}
	return 0x8207DDA0;
} // Block from 8207DD7Ch-8207DDA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207DDA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DDA0);
		  /* 8207DDA0h */ case    0:  		/* mfspr R12, LR */
		/* 8207DDA0h case    0:*/		regs.R12 = regs.LR;
		/* 8207DDA0h case    0:*/		return 0x8207DDA4;
		  /* 8207DDA4h */ case    1:  		/* bl 79020 */
		/* 8207DDA4h case    1:*/		regs.LR = 0x8207DDA8; return 0x82091250;
		/* 8207DDA4h case    1:*/		return 0x8207DDA8;
		  /* 8207DDA8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8207DDA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8207DDA8h case    2:*/		return 0x8207DDAC;
		  /* 8207DDACh */ case    3:  		/* lwz R29, <#[R3 + 416]> */
		/* 8207DDACh case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x000001A0) );
		/* 8207DDACh case    3:*/		return 0x8207DDB0;
		  /* 8207DDB0h */ case    4:  		/* mr R31, R3 */
		/* 8207DDB0h case    4:*/		regs.R31 = regs.R3;
		/* 8207DDB0h case    4:*/		return 0x8207DDB4;
		  /* 8207DDB4h */ case    5:  		/* mr R26, R4 */
		/* 8207DDB4h case    5:*/		regs.R26 = regs.R4;
		/* 8207DDB4h case    5:*/		return 0x8207DDB8;
		  /* 8207DDB8h */ case    6:  		/* cmplw CR6, R29, R5 */
		/* 8207DDB8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R5);
		/* 8207DDB8h case    6:*/		return 0x8207DDBC;
		  /* 8207DDBCh */ case    7:  		/* bc 12, CR6_EQ, 88 */
		/* 8207DDBCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8207DE14;  }
		/* 8207DDBCh case    7:*/		return 0x8207DDC0;
		  /* 8207DDC0h */ case    8:  		/* mulli R11, R29, 36 */
		/* 8207DDC0h case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R29,0x24);
		/* 8207DDC0h case    8:*/		return 0x8207DDC4;
		  /* 8207DDC4h */ case    9:  		/* lwz R28, <#[R3 + 420]> */
		/* 8207DDC4h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x000001A4) );
		/* 8207DDC4h case    9:*/		return 0x8207DDC8;
		  /* 8207DDC8h */ case   10:  		/* add R11, R11, R4 */
		/* 8207DDC8h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 8207DDC8h case   10:*/		return 0x8207DDCC;
		  /* 8207DDCCh */ case   11:  		/* addi R27, R11, 24476 */
		/* 8207DDCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x5F9C);
		/* 8207DDCCh case   11:*/		return 0x8207DDD0;
		  /* 8207DDD0h */ case   12:  		/* lwz R11, <#[R27 + 16]> */
		/* 8207DDD0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8207DDD0h case   12:*/		return 0x8207DDD4;
		  /* 8207DDD4h */ case   13:  		/* lwz R10, <#[R27]> */
		/* 8207DDD4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8207DDD4h case   13:*/		return 0x8207DDD8;
		  /* 8207DDD8h */ case   14:  		/* and R11, R11, R28 */
		/* 8207DDD8h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8207DDD8h case   14:*/		return 0x8207DDDC;
		  /* 8207DDDCh */ case   15:  		/* mulli R11, R11, 28 */
		/* 8207DDDCh case   15:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 8207DDDCh case   15:*/		return 0x8207DDE0;
		  /* 8207DDE0h */ case   16:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8207DDE0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207DDE0h case   16:*/		return 0x8207DDE4;
		  /* 8207DDE4h */ case   17:  		/* add R30, R11, R10 */
		/* 8207DDE4h case   17:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8207DDE4h case   17:*/		return 0x8207DDE8;
		  /* 8207DDE8h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 8207DDE8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8207DDE8h case   18:*/		return 0x8207DDEC;
		  /* 8207DDECh */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 8207DDECh case   19:*/		if ( regs.CR[6].eq ) { return 0x8207DE04;  }
		/* 8207DDECh case   19:*/		return 0x8207DDF0;
		  /* 8207DDF0h */ case   20:  		/* mr R6, R30 */
		/* 8207DDF0h case   20:*/		regs.R6 = regs.R30;
		/* 8207DDF0h case   20:*/		return 0x8207DDF4;
		  /* 8207DDF4h */ case   21:  		/* mr R5, R29 */
		/* 8207DDF4h case   21:*/		regs.R5 = regs.R29;
		/* 8207DDF4h case   21:*/		return 0x8207DDF8;
		  /* 8207DDF8h */ case   22:  		/* mr R4, R26 */
		/* 8207DDF8h case   22:*/		regs.R4 = regs.R26;
		/* 8207DDF8h case   22:*/		return 0x8207DDFC;
		  /* 8207DDFCh */ case   23:  		/* mr R3, R31 */
		/* 8207DDFCh case   23:*/		regs.R3 = regs.R31;
		/* 8207DDFCh case   23:*/		return 0x8207DE00;
		  /* 8207DE00h */ case   24:  		/* bl -336 */
		/* 8207DE00h case   24:*/		regs.LR = 0x8207DE04; return 0x8207DCB0;
		/* 8207DE00h case   24:*/		return 0x8207DE04;
	}
	return 0x8207DE04;
} // Block from 8207DDA0h-8207DE04h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207DE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DE04);
		  /* 8207DE04h */ case    0:  		/* lwz R11, <#[R30 + 24]> */
		/* 8207DE04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 8207DE04h case    0:*/		return 0x8207DE08;
		  /* 8207DE08h */ case    1:  		/* addi R28, R28, 1 */
		/* 8207DE08h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8207DE08h case    1:*/		return 0x8207DE0C;
		  /* 8207DE0Ch */ case    2:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8207DE0Ch case    2:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8207DE0Ch case    2:*/		return 0x8207DE10;
		  /* 8207DE10h */ case    3:  		/* bc 12, CR0_EQ, -64 */
		/* 8207DE10h case    3:*/		if ( regs.CR[0].eq ) { return 0x8207DDD0;  }
		/* 8207DE10h case    3:*/		return 0x8207DE14;
	}
	return 0x8207DE14;
} // Block from 8207DE04h-8207DE14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207DE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DE14);
		  /* 8207DE14h */ case    0:  		/* li R11, -1 */
		/* 8207DE14h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207DE14h case    0:*/		return 0x8207DE18;
		  /* 8207DE18h */ case    1:  		/* li R10, 0 */
		/* 8207DE18h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207DE18h case    1:*/		return 0x8207DE1C;
		  /* 8207DE1Ch */ case    2:  		/* stw R11, <#[R31 + 420]> */
		/* 8207DE1Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001A4) );
		/* 8207DE1Ch case    2:*/		return 0x8207DE20;
		  /* 8207DE20h */ case    3:  		/* mr R5, R29 */
		/* 8207DE20h case    3:*/		regs.R5 = regs.R29;
		/* 8207DE20h case    3:*/		return 0x8207DE24;
		  /* 8207DE24h */ case    4:  		/* stw R11, <#[R31 + 416]> */
		/* 8207DE24h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000001A0) );
		/* 8207DE24h case    4:*/		return 0x8207DE28;
		  /* 8207DE28h */ case    5:  		/* mr R4, R26 */
		/* 8207DE28h case    5:*/		regs.R4 = regs.R26;
		/* 8207DE28h case    5:*/		return 0x8207DE2C;
		  /* 8207DE2Ch */ case    6:  		/* stw R10, <#[R31 + 412]> */
		/* 8207DE2Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000019C) );
		/* 8207DE2Ch case    6:*/		return 0x8207DE30;
		  /* 8207DE30h */ case    7:  		/* mr R3, R31 */
		/* 8207DE30h case    7:*/		regs.R3 = regs.R31;
		/* 8207DE30h case    7:*/		return 0x8207DE34;
		  /* 8207DE34h */ case    8:  		/* bl -2084 */
		/* 8207DE34h case    8:*/		regs.LR = 0x8207DE38; return 0x8207D610;
		/* 8207DE34h case    8:*/		return 0x8207DE38;
		  /* 8207DE38h */ case    9:  		/* addi R1, R1, 144 */
		/* 8207DE38h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8207DE38h case    9:*/		return 0x8207DE3C;
		  /* 8207DE3Ch */ case   10:  		/* b 78948 */
		/* 8207DE3Ch case   10:*/		return 0x820912A0;
		/* 8207DE3Ch case   10:*/		return 0x8207DE40;
	}
	return 0x8207DE40;
} // Block from 8207DE14h-8207DE40h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207DE40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DE40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DE40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DE40);
		  /* 8207DE40h */ case    0:  		/* mfspr R12, LR */
		/* 8207DE40h case    0:*/		regs.R12 = regs.LR;
		/* 8207DE40h case    0:*/		return 0x8207DE44;
		  /* 8207DE44h */ case    1:  		/* bl 78836 */
		/* 8207DE44h case    1:*/		regs.LR = 0x8207DE48; return 0x82091238;
		/* 8207DE44h case    1:*/		return 0x8207DE48;
		  /* 8207DE48h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 8207DE48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 8207DE48h case    2:*/		return 0x8207DE4C;
		  /* 8207DE4Ch */ case    3:  		/* mr R29, R3 */
		/* 8207DE4Ch case    3:*/		regs.R29 = regs.R3;
		/* 8207DE4Ch case    3:*/		return 0x8207DE50;
		  /* 8207DE50h */ case    4:  		/* mr R31, R4 */
		/* 8207DE50h case    4:*/		regs.R31 = regs.R4;
		/* 8207DE50h case    4:*/		return 0x8207DE54;
		  /* 8207DE54h */ case    5:  		/* mr R27, R5 */
		/* 8207DE54h case    5:*/		regs.R27 = regs.R5;
		/* 8207DE54h case    5:*/		return 0x8207DE58;
		  /* 8207DE58h */ case    6:  		/* mr R21, R6 */
		/* 8207DE58h case    6:*/		regs.R21 = regs.R6;
		/* 8207DE58h case    6:*/		return 0x8207DE5C;
		  /* 8207DE5Ch */ case    7:  		/* li R26, 0 */
		/* 8207DE5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8207DE5Ch case    7:*/		return 0x8207DE60;
		  /* 8207DE60h */ case    8:  		/* cmplwi CR6, R6, 0 */
		/* 8207DE60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8207DE60h case    8:*/		return 0x8207DE64;
		  /* 8207DE64h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8207DE64h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207DE6C;  }
		/* 8207DE64h case    9:*/		return 0x8207DE68;
		  /* 8207DE68h */ case   10:  		/* stw R26, <#[R6]> */
		/* 8207DE68h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R6 + 0x00000000) );
		/* 8207DE68h case   10:*/		return 0x8207DE6C;
	}
	return 0x8207DE6C;
} // Block from 8207DE40h-8207DE6Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207DE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DE6C);
		  /* 8207DE6Ch */ case    0:  		/* lwz R11, <#[R29 + 412]> */
		/* 8207DE6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000019C) );
		/* 8207DE6Ch case    0:*/		return 0x8207DE70;
		  /* 8207DE70h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8207DE70h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207DE70h case    1:*/		return 0x8207DE74;
		  /* 8207DE74h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8207DE74h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207DE88;  }
		/* 8207DE74h case    2:*/		return 0x8207DE78;
		  /* 8207DE78h */ case    3:  		/* mr R5, R27 */
		/* 8207DE78h case    3:*/		regs.R5 = regs.R27;
		/* 8207DE78h case    3:*/		return 0x8207DE7C;
		  /* 8207DE7Ch */ case    4:  		/* mr R4, R31 */
		/* 8207DE7Ch case    4:*/		regs.R4 = regs.R31;
		/* 8207DE7Ch case    4:*/		return 0x8207DE80;
		  /* 8207DE80h */ case    5:  		/* mr R3, R29 */
		/* 8207DE80h case    5:*/		regs.R3 = regs.R29;
		/* 8207DE80h case    5:*/		return 0x8207DE84;
		  /* 8207DE84h */ case    6:  		/* bl -228 */
		/* 8207DE84h case    6:*/		regs.LR = 0x8207DE88; return 0x8207DDA0;
		/* 8207DE84h case    6:*/		return 0x8207DE88;
	}
	return 0x8207DE88;
} // Block from 8207DE6Ch-8207DE88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207DE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DE88);
		  /* 8207DE88h */ case    0:  		/* mulli R11, R27, 36 */
		/* 8207DE88h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R27,0x24);
		/* 8207DE88h case    0:*/		return 0x8207DE8C;
		  /* 8207DE8Ch */ case    1:  		/* lis R10, 1 */
		/* 8207DE8Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 8207DE8Ch case    1:*/		return 0x8207DE90;
		  /* 8207DE90h */ case    2:  		/* add R11, R11, R31 */
		/* 8207DE90h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8207DE90h case    2:*/		return 0x8207DE94;
		  /* 8207DE94h */ case    3:  		/* lis R9, 1 */
		/* 8207DE94h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x1);
		/* 8207DE94h case    3:*/		return 0x8207DE98;
		  /* 8207DE98h */ case    4:  		/* ori R10, R10, 34174 */
		/* 8207DE98h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x857E);
		/* 8207DE98h case    4:*/		return 0x8207DE9C;
		  /* 8207DE9Ch */ case    5:  		/* ori R9, R9, 77 */
		/* 8207DE9Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4D);
		/* 8207DE9Ch case    5:*/		return 0x8207DEA0;
		  /* 8207DEA0h */ case    6:  		/* stw R9, <#[R1 + 100]> */
		/* 8207DEA0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 8207DEA0h case    6:*/		return 0x8207DEA4;
		  /* 8207DEA4h */ case    7:  		/* addi R30, R11, 24476 */
		/* 8207DEA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x5F9C);
		/* 8207DEA4h case    7:*/		return 0x8207DEA8;
		  /* 8207DEA8h */ case    8:  		/* stw R10, <#[R1 + 96]> */
		/* 8207DEA8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8207DEA8h case    8:*/		return 0x8207DEAC;
		  /* 8207DEACh */ case    9:  		/* lwz R10, <#[R11 + 24476]> */
		/* 8207DEACh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00005F9C) );
		/* 8207DEACh case    9:*/		return 0x8207DEB0;
		  /* 8207DEB0h */ case   10:  		/* li R25, 1 */
		/* 8207DEB0h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8207DEB0h case   10:*/		return 0x8207DEB4;
		  /* 8207DEB4h */ case   11:  		/* lwz R11, <#[R11 + 24488]> */
		/* 8207DEB4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00005FA8) );
		/* 8207DEB4h case   11:*/		return 0x8207DEB8;
		  /* 8207DEB8h */ case   12:  		/* li R9, 1480 */
		/* 8207DEB8h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x5C8);
		/* 8207DEB8h case   12:*/		return 0x8207DEBC;
		  /* 8207DEBCh */ case   13:  		/* lis R8, 2 */
		/* 8207DEBCh case   13:*/		cpu::op::lis<0>(regs,&regs.R8,0x2);
		/* 8207DEBCh case   13:*/		return 0x8207DEC0;
		  /* 8207DEC0h */ case   14:  		/* addi R11, R11, 1 */
		/* 8207DEC0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207DEC0h case   14:*/		return 0x8207DEC4;
		  /* 8207DEC4h */ case   15:  		/* lwz R7, <#[R30 + 16]> */
		/* 8207DEC4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000010) );
		/* 8207DEC4h case   15:*/		return 0x8207DEC8;
		  /* 8207DEC8h */ case   16:  		/* li R6, 3584 */
		/* 8207DEC8h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0xE00);
		/* 8207DEC8h case   16:*/		return 0x8207DECC;
		  /* 8207DECCh */ case   17:  		/* li R24, 3648 */
		/* 8207DECCh case   17:*/		cpu::op::li<0>(regs,&regs.R24,0xE40);
		/* 8207DECCh case   17:*/		return 0x8207DED0;
		  /* 8207DED0h */ case   18:  		/* and R11, R11, R7 */
		/* 8207DED0h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8207DED0h case   18:*/		return 0x8207DED4;
		  /* 8207DED4h */ case   19:  		/* li R5, 9 */
		/* 8207DED4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8207DED4h case   19:*/		return 0x8207DED8;
		  /* 8207DED8h */ case   20:  		/* mulli R11, R11, 28 */
		/* 8207DED8h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1C);
		/* 8207DED8h case   20:*/		return 0x8207DEDC;
		  /* 8207DEDCh */ case   21:  		/* add R28, R11, R10 */
		/* 8207DEDCh case   21:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R10);
		/* 8207DEDCh case   21:*/		return 0x8207DEE0;
		  /* 8207DEE0h */ case   22:  		/* addi R4, R1, 96 */
		/* 8207DEE0h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8207DEE0h case   22:*/		return 0x8207DEE4;
		  /* 8207DEE4h */ case   23:  		/* mr R3, R31 */
		/* 8207DEE4h case   23:*/		regs.R3 = regs.R31;
		/* 8207DEE4h case   23:*/		return 0x8207DEE8;
		  /* 8207DEE8h */ case   24:  		/* mr R23, R26 */
		/* 8207DEE8h case   24:*/		regs.R23 = regs.R26;
		/* 8207DEE8h case   24:*/		return 0x8207DEEC;
		  /* 8207DEECh */ case   25:  		/* lwz R11, <#[R28 + 20]> */
		/* 8207DEECh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8207DEECh case   25:*/		return 0x8207DEF0;
		  /* 8207DEF0h */ case   26:  		/* stw R9, <#[R1 + 108]> */
		/* 8207DEF0h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207DEF0h case   26:*/		return 0x8207DEF4;
		  /* 8207DEF4h */ case   27:  		/* stw R8, <#[R1 + 112]> */
		/* 8207DEF4h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 8207DEF4h case   27:*/		return 0x8207DEF8;
		  /* 8207DEF8h */ case   28:  		/* stw R6, <#[R1 + 116]> */
		/* 8207DEF8h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000074) );
		/* 8207DEF8h case   28:*/		return 0x8207DEFC;
		  /* 8207DEFCh */ case   29:  		/* stw R25, <#[R1 + 120]> */
		/* 8207DEFCh case   29:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000078) );
		/* 8207DEFCh case   29:*/		return 0x8207DF00;
		  /* 8207DF00h */ case   30:  		/* stw R11, <#[R1 + 104]> */
		/* 8207DF00h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8207DF00h case   30:*/		return 0x8207DF04;
		  /* 8207DF04h */ case   31:  		/* stw R24, <#[R1 + 124]> */
		/* 8207DF04h case   31:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207DF04h case   31:*/		return 0x8207DF08;
		  /* 8207DF08h */ case   32:  		/* stw R25, <#[R1 + 128]> */
		/* 8207DF08h case   32:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000080) );
		/* 8207DF08h case   32:*/		return 0x8207DF0C;
		  /* 8207DF0Ch */ case   33:  		/* bl -46756 */
		/* 8207DF0Ch case   33:*/		regs.LR = 0x8207DF10; return 0x82072868;
		/* 8207DF0Ch case   33:*/		return 0x8207DF10;
		  /* 8207DF10h */ case   34:  		/* lwz R11, <#[R29 + 396]> */
		/* 8207DF10h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000018C) );
		/* 8207DF10h case   34:*/		return 0x8207DF14;
		  /* 8207DF14h */ case   35:  		/* subf R11, R27, R11 */
		/* 8207DF14h case   35:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8207DF14h case   35:*/		return 0x8207DF18;
		  /* 8207DF18h */ case   36:  		/* addic R10, R11, -1 */
		/* 8207DF18h case   36:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8207DF18h case   36:*/		return 0x8207DF1C;
		  /* 8207DF1Ch */ case   37:  		/* subfe. R24, R10, R11 */
		/* 8207DF1Ch case   37:*/		cpu::op::subfe<1>(regs,&regs.R24,regs.R10,regs.R11);
		/* 8207DF1Ch case   37:*/		return 0x8207DF20;
		  /* 8207DF20h */ case   38:  		/* bc 12, CR0_EQ, 12 */
		/* 8207DF20h case   38:*/		if ( regs.CR[0].eq ) { return 0x8207DF2C;  }
		/* 8207DF20h case   38:*/		return 0x8207DF24;
		  /* 8207DF24h */ case   39:  		/* lwz R11, <#[R28 + 20]> */
		/* 8207DF24h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8207DF24h case   39:*/		return 0x8207DF28;
		  /* 8207DF28h */ case   40:  		/* stw R11, <#[R30 + 28]> */
		/* 8207DF28h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8207DF28h case   40:*/		return 0x8207DF2C;
	}
	return 0x8207DF2C;
} // Block from 8207DE88h-8207DF2Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8207DF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DF2C);
		  /* 8207DF2Ch */ case    0:  		/* mr R22, R26 */
		/* 8207DF2Ch case    0:*/		regs.R22 = regs.R26;
		/* 8207DF2Ch case    0:*/		return 0x8207DF30;
		  /* 8207DF30h */ case    1:  		/* lwz R11, <#[R30 + 12]> */
		/* 8207DF30h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DF30h case    1:*/		return 0x8207DF34;
		  /* 8207DF34h */ case    2:  		/* lwz R9, <#[R30 + 16]> */
		/* 8207DF34h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000010) );
		/* 8207DF34h case    2:*/		return 0x8207DF38;
		  /* 8207DF38h */ case    3:  		/* addi R11, R11, 1 */
		/* 8207DF38h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207DF38h case    3:*/		return 0x8207DF3C;
		  /* 8207DF3Ch */ case    4:  		/* lwz R10, <#[R30]> */
		/* 8207DF3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8207DF3Ch case    4:*/		return 0x8207DF40;
		  /* 8207DF40h */ case    5:  		/* and R9, R11, R9 */
		/* 8207DF40h case    5:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 8207DF40h case    5:*/		return 0x8207DF44;
		  /* 8207DF44h */ case    6:  		/* stw R11, <#[R30 + 12]> */
		/* 8207DF44h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DF44h case    6:*/		return 0x8207DF48;
		  /* 8207DF48h */ case    7:  		/* mulli R11, R9, 28 */
		/* 8207DF48h case    7:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0x1C);
		/* 8207DF48h case    7:*/		return 0x8207DF4C;
		  /* 8207DF4Ch */ case    8:  		/* add R28, R11, R10 */
		/* 8207DF4Ch case    8:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R10);
		/* 8207DF4Ch case    8:*/		return 0x8207DF50;
		  /* 8207DF50h */ case    9:  		/* lwz R11, <#[R28 + 16]> */
		/* 8207DF50h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 8207DF50h case    9:*/		return 0x8207DF54;
		  /* 8207DF54h */ case   10:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8207DF54h case   10:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8207DF54h case   10:*/		return 0x8207DF58;
		  /* 8207DF58h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8207DF58h case   11:*/		if ( regs.CR[0].eq ) { return 0x8207DF60;  }
		/* 8207DF58h case   11:*/		return 0x8207DF5C;
		  /* 8207DF5Ch */ case   12:  		/* stw R25, <#[R29 + 428]> */
		/* 8207DF5Ch case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R29 + 0x000001AC) );
		/* 8207DF5Ch case   12:*/		return 0x8207DF60;
	}
	return 0x8207DF60;
} // Block from 8207DF2Ch-8207DF60h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207DF60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DF60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DF60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DF60);
		  /* 8207DF60h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 8207DF60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 8207DF60h case    0:*/		return 0x8207DF64;
		  /* 8207DF64h */ case    1:  		/* bc 4, CR6_EQ, 348 */
		/* 8207DF64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207E0C0;  }
		/* 8207DF64h case    1:*/		return 0x8207DF68;
		  /* 8207DF68h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 8207DF68h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8207DF68h case    2:*/		return 0x8207DF6C;
		  /* 8207DF6Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8207DF6Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207DF6Ch case    3:*/		return 0x8207DF70;
		  /* 8207DF70h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 8207DF70h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207DFC0;  }
		/* 8207DF70h case    4:*/		return 0x8207DF74;
		  /* 8207DF74h */ case    5:  		/* lwz R11, <#[R28 + 16]> */
		/* 8207DF74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 8207DF74h case    5:*/		return 0x8207DF78;
		  /* 8207DF78h */ case    6:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8207DF78h case    6:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8207DF78h case    6:*/		return 0x8207DF7C;
		  /* 8207DF7Ch */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8207DF7Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8207DF98;  }
		/* 8207DF7Ch case    7:*/		return 0x8207DF80;
		  /* 8207DF80h */ case    8:  		/* lwz R11, <#[R30 + 12]> */
		/* 8207DF80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8207DF80h case    8:*/		return 0x8207DF84;
		  /* 8207DF84h */ case    9:  		/* mr R22, R25 */
		/* 8207DF84h case    9:*/		regs.R22 = regs.R25;
		/* 8207DF84h case    9:*/		return 0x8207DF88;
		  /* 8207DF88h */ case   10:  		/* stw R27, <#[R29 + 416]> */
		/* 8207DF88h case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x000001A0) );
		/* 8207DF88h case   10:*/		return 0x8207DF8C;
		  /* 8207DF8Ch */ case   11:  		/* stw R25, <#[R29 + 412]> */
		/* 8207DF8Ch case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R29 + 0x0000019C) );
		/* 8207DF8Ch case   11:*/		return 0x8207DF90;
		  /* 8207DF90h */ case   12:  		/* stw R11, <#[R29 + 420]> */
		/* 8207DF90h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000001A4) );
		/* 8207DF90h case   12:*/		return 0x8207DF94;
		  /* 8207DF94h */ case   13:  		/* b 300 */
		/* 8207DF94h case   13:*/		return 0x8207E0C0;
		/* 8207DF94h case   13:*/		return 0x8207DF98;
	}
	return 0x8207DF98;
} // Block from 8207DF60h-8207DF98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207DF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DF98);
		  /* 8207DF98h */ case    0:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8207DF98h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8207DF98h case    0:*/		return 0x8207DF9C;
		  /* 8207DF9Ch */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8207DF9Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8207DFA8;  }
		/* 8207DF9Ch case    1:*/		return 0x8207DFA0;
		  /* 8207DFA0h */ case    2:  		/* cmpwi CR6, R24, 0 */
		/* 8207DFA0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8207DFA0h case    2:*/		return 0x8207DFA4;
		  /* 8207DFA4h */ case    3:  		/* bc 12, CR6_EQ, 284 */
		/* 8207DFA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E0C0;  }
		/* 8207DFA4h case    3:*/		return 0x8207DFA8;
	}
	return 0x8207DFA8;
} // Block from 8207DF98h-8207DFA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207DFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DFA8);
		  /* 8207DFA8h */ case    0:  		/* mr R6, R28 */
		/* 8207DFA8h case    0:*/		regs.R6 = regs.R28;
		/* 8207DFA8h case    0:*/		return 0x8207DFAC;
		  /* 8207DFACh */ case    1:  		/* mr R5, R27 */
		/* 8207DFACh case    1:*/		regs.R5 = regs.R27;
		/* 8207DFACh case    1:*/		return 0x8207DFB0;
		  /* 8207DFB0h */ case    2:  		/* mr R4, R31 */
		/* 8207DFB0h case    2:*/		regs.R4 = regs.R31;
		/* 8207DFB0h case    2:*/		return 0x8207DFB4;
		  /* 8207DFB4h */ case    3:  		/* mr R3, R29 */
		/* 8207DFB4h case    3:*/		regs.R3 = regs.R29;
		/* 8207DFB4h case    3:*/		return 0x8207DFB8;
		  /* 8207DFB8h */ case    4:  		/* bl -776 */
		/* 8207DFB8h case    4:*/		regs.LR = 0x8207DFBC; return 0x8207DCB0;
		/* 8207DFB8h case    4:*/		return 0x8207DFBC;
		  /* 8207DFBCh */ case    5:  		/* addi R23, R23, 1 */
		/* 8207DFBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8207DFBCh case    5:*/		return 0x8207DFC0;
	}
	return 0x8207DFC0;
} // Block from 8207DFA8h-8207DFC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207DFC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207DFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207DFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207DFC0);
		  /* 8207DFC0h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 8207DFC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8207DFC0h case    0:*/		return 0x8207DFC4;
		  /* 8207DFC4h */ case    1:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8207DFC4h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8207DFC4h case    1:*/		return 0x8207DFC8;
		  /* 8207DFC8h */ case    2:  		/* bc 12, CR0_EQ, 248 */
		/* 8207DFC8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8207E0C0;  }
		/* 8207DFC8h case    2:*/		return 0x8207DFCC;
		  /* 8207DFCCh */ case    3:  		/* lwz R10, <#[R28 + 20]> */
		/* 8207DFCCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8207DFCCh case    3:*/		return 0x8207DFD0;
		  /* 8207DFD0h */ case    4:  		/* addi R11, R27, 25 */
		/* 8207DFD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x19);
		/* 8207DFD0h case    4:*/		return 0x8207DFD4;
		  /* 8207DFD4h */ case    5:  		/* li R8, 1403 */
		/* 8207DFD4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x57B);
		/* 8207DFD4h case    5:*/		return 0x8207DFD8;
		  /* 8207DFD8h */ case    6:  		/* stw R26, <#[R1 + 148]> */
		/* 8207DFD8h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000094) );
		/* 8207DFD8h case    6:*/		return 0x8207DFDC;
		  /* 8207DFDCh */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207DFDCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207DFDCh case    7:*/		return 0x8207DFE0;
		  /* 8207DFE0h */ case    8:  		/* stw R8, <#[R1 + 144]> */
		/* 8207DFE0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000090) );
		/* 8207DFE0h case    8:*/		return 0x8207DFE4;
		  /* 8207DFE4h */ case    9:  		/* lis R7, -16383 */
		/* 8207DFE4h case    9:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFC001);
		/* 8207DFE4h case    9:*/		return 0x8207DFE8;
		  /* 8207DFE8h */ case   10:  		/* lis R6, -16382 */
		/* 8207DFE8h case   10:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFC002);
		/* 8207DFE8h case   10:*/		return 0x8207DFEC;
		  /* 8207DFECh */ case   11:  		/* stw R10, <#[R30 + 24]> */
		/* 8207DFECh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 8207DFECh case   11:*/		return 0x8207DFF0;
		  /* 8207DFF0h */ case   12:  		/* lis R5, -32768 */
		/* 8207DFF0h case   12:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8000);
		/* 8207DFF0h case   12:*/		return 0x8207DFF4;
		  /* 8207DFF4h */ case   13:  		/* lwz R9, <#[R28 + 20]> */
		/* 8207DFF4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000014) );
		/* 8207DFF4h case   13:*/		return 0x8207DFF8;
		  /* 8207DFF8h */ case   14:  		/* lis R4, -8531 */
		/* 8207DFF8h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFDEAD);
		/* 8207DFF8h case   14:*/		return 0x8207DFFC;
		  /* 8207DFFCh */ case   15:  		/* lwz R10, <#[R31 + 11024]> */
		/* 8207DFFCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207DFFCh case   15:*/		return 0x8207E000;
		  /* 8207E000h */ case   16:  		/* add R11, R11, R10 */
		/* 8207E000h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207E000h case   16:*/		return 0x8207E004;
		  /* 8207E004h */ case   17:  		/* addi R10, R10, 116 */
		/* 8207E004h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x74);
		/* 8207E004h case   17:*/		return 0x8207E008;
		  /* 8207E008h */ case   18:  		/* stw R9, <#[R1 + 160]> */
		/* 8207E008h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000A0) );
		/* 8207E008h case   18:*/		return 0x8207E00C;
		  /* 8207E00Ch */ case   19:  		/* rlwinm R8, R11, 12, 20, 31 */
		/* 8207E00Ch case   19:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R8,regs.R11);
		/* 8207E00Ch case   19:*/		return 0x8207E010;
		  /* 8207E010h */ case   20:  		/* rlwinm R9, R10, 12, 20, 31 */
		/* 8207E010h case   20:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R10);
		/* 8207E010h case   20:*/		return 0x8207E014;
		  /* 8207E014h */ case   21:  		/* addi R3, R8, 512 */
		/* 8207E014h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0x200);
		/* 8207E014h case   21:*/		return 0x8207E018;
		  /* 8207E018h */ case   22:  		/* addi R20, R9, 512 */
		/* 8207E018h case   22:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R9,0x200);
		/* 8207E018h case   22:*/		return 0x8207E01C;
		  /* 8207E01Ch */ case   23:  		/* rlwinm R8, R11, 0, 3, 31 */
		/* 8207E01Ch case   23:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R8,regs.R11);
		/* 8207E01Ch case   23:*/		return 0x8207E020;
		  /* 8207E020h */ case   24:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 8207E020h case   24:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 8207E020h case   24:*/		return 0x8207E024;
		  /* 8207E024h */ case   25:  		/* rlwinm R11, R20, 0, 19, 19 */
		/* 8207E024h case   25:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R20);
		/* 8207E024h case   25:*/		return 0x8207E028;
		  /* 8207E028h */ case   26:  		/* rlwinm R9, R3, 0, 19, 19 */
		/* 8207E028h case   26:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R3);
		/* 8207E028h case   26:*/		return 0x8207E02C;
		  /* 8207E02Ch */ case   27:  		/* add R11, R11, R10 */
		/* 8207E02Ch case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207E02Ch case   27:*/		return 0x8207E030;
		  /* 8207E030h */ case   28:  		/* ori R10, R7, 15616 */
		/* 8207E030h case   28:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R7,0x3D00);
		/* 8207E030h case   28:*/		return 0x8207E034;
		  /* 8207E034h */ case   29:  		/* add R9, R9, R8 */
		/* 8207E034h case   29:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8207E034h case   29:*/		return 0x8207E038;
		  /* 8207E038h */ case   30:  		/* stw R10, <#[R1 + 152]> */
		/* 8207E038h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 8207E038h case   30:*/		return 0x8207E03C;
		  /* 8207E03Ch */ case   31:  		/* ori R7, R5, 3 */
		/* 8207E03Ch case   31:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R5,0x3);
		/* 8207E03Ch case   31:*/		return 0x8207E040;
		  /* 8207E040h */ case   32:  		/* ori R10, R4, 48879 */
		/* 8207E040h case   32:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R4,0xBEEF);
		/* 8207E040h case   32:*/		return 0x8207E044;
		  /* 8207E044h */ case   33:  		/* ori R8, R6, 22528 */
		/* 8207E044h case   33:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R6,0x5800);
		/* 8207E044h case   33:*/		return 0x8207E048;
		  /* 8207E048h */ case   34:  		/* stw R7, <#[R1 + 168]> */
		/* 8207E048h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000A8) );
		/* 8207E048h case   34:*/		return 0x8207E04C;
		  /* 8207E04Ch */ case   35:  		/* ori R9, R9, 2 */
		/* 8207E04Ch case   35:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 8207E04Ch case   35:*/		return 0x8207E050;
		  /* 8207E050h */ case   36:  		/* stw R10, <#[R1 + 176]> */
		/* 8207E050h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 8207E050h case   36:*/		return 0x8207E054;
		  /* 8207E054h */ case   37:  		/* ori R11, R11, 2 */
		/* 8207E054h case   37:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8207E054h case   37:*/		return 0x8207E058;
		  /* 8207E058h */ case   38:  		/* stw R8, <#[R1 + 164]> */
		/* 8207E058h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A4) );
		/* 8207E058h case   38:*/		return 0x8207E05C;
		  /* 8207E05Ch */ case   39:  		/* stw R9, <#[R1 + 156]> */
		/* 8207E05Ch case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000009C) );
		/* 8207E05Ch case   39:*/		return 0x8207E060;
		  /* 8207E060h */ case   40:  		/* li R5, 9 */
		/* 8207E060h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8207E060h case   40:*/		return 0x8207E064;
		  /* 8207E064h */ case   41:  		/* stw R11, <#[R1 + 172]> */
		/* 8207E064h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000AC) );
		/* 8207E064h case   41:*/		return 0x8207E068;
		  /* 8207E068h */ case   42:  		/* addi R4, R1, 144 */
		/* 8207E068h case   42:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 8207E068h case   42:*/		return 0x8207E06C;
		  /* 8207E06Ch */ case   43:  		/* mr R3, R31 */
		/* 8207E06Ch case   43:*/		regs.R3 = regs.R31;
		/* 8207E06Ch case   43:*/		return 0x8207E070;
		  /* 8207E070h */ case   44:  		/* bl -47112 */
		/* 8207E070h case   44:*/		regs.LR = 0x8207E074; return 0x82072868;
		/* 8207E070h case   44:*/		return 0x8207E074;
		  /* 8207E074h */ case   45:  		/* lwz R10, <#[R29 + 48]> */
		/* 8207E074h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000030) );
		/* 8207E074h case   45:*/		return 0x8207E078;
		  /* 8207E078h */ case   46:  		/* lwz R9, <#[R29 + 52]> */
		/* 8207E078h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000034) );
		/* 8207E078h case   46:*/		return 0x8207E07C;
		  /* 8207E07Ch */ case   47:  		/* li R5, 1 */
		/* 8207E07Ch case   47:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8207E07Ch case   47:*/		return 0x8207E080;
		  /* 8207E080h */ case   48:  		/* rlwinm R11, R10, 12, 20, 31 */
		/* 8207E080h case   48:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R10);
		/* 8207E080h case   48:*/		return 0x8207E084;
		  /* 8207E084h */ case   49:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 8207E084h case   49:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 8207E084h case   49:*/		return 0x8207E088;
		  /* 8207E088h */ case   50:  		/* addi R11, R11, 512 */
		/* 8207E088h case   50:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8207E088h case   50:*/		return 0x8207E08C;
		  /* 8207E08Ch */ case   51:  		/* rlwinm R9, R9, 0, 8, 31 */
		/* 8207E08Ch case   51:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R9,regs.R9);
		/* 8207E08Ch case   51:*/		return 0x8207E090;
		  /* 8207E090h */ case   52:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8207E090h case   52:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8207E090h case   52:*/		return 0x8207E094;
		  /* 8207E094h */ case   53:  		/* oris R9, R9, 33024 */
		/* 8207E094h case   53:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x8100);
		/* 8207E094h case   53:*/		return 0x8207E098;
		  /* 8207E098h */ case   54:  		/* add R11, R11, R10 */
		/* 8207E098h case   54:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207E098h case   54:*/		return 0x8207E09C;
		  /* 8207E09Ch */ case   55:  		/* stw R9, <#[R1 + 80]> */
		/* 8207E09Ch case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8207E09Ch case   55:*/		return 0x8207E0A0;
		  /* 8207E0A0h */ case   56:  		/* addi R4, R1, 80 */
		/* 8207E0A0h case   56:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207E0A0h case   56:*/		return 0x8207E0A4;
		  /* 8207E0A4h */ case   57:  		/* stw R11, <#[R1 + 84]> */
		/* 8207E0A4h case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207E0A4h case   57:*/		return 0x8207E0A8;
		  /* 8207E0A8h */ case   58:  		/* mr R3, R31 */
		/* 8207E0A8h case   58:*/		regs.R3 = regs.R31;
		/* 8207E0A8h case   58:*/		return 0x8207E0AC;
		  /* 8207E0ACh */ case   59:  		/* bl -44820 */
		/* 8207E0ACh case   59:*/		regs.LR = 0x8207E0B0; return 0x82073198;
		/* 8207E0ACh case   59:*/		return 0x8207E0B0;
		  /* 8207E0B0h */ case   60:  		/* lwz R11, <#[R31 + 11564]> */
		/* 8207E0B0h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002D2C) );
		/* 8207E0B0h case   60:*/		return 0x8207E0B4;
		  /* 8207E0B4h */ case   61:  		/* stw R26, <#[R31 + 11504]> */
		/* 8207E0B4h case   61:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00002CF0) );
		/* 8207E0B4h case   61:*/		return 0x8207E0B8;
		  /* 8207E0B8h */ case   62:  		/* addi R11, R11, 1 */
		/* 8207E0B8h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207E0B8h case   62:*/		return 0x8207E0BC;
		  /* 8207E0BCh */ case   63:  		/* stw R11, <#[R31 + 11564]> */
		/* 8207E0BCh case   63:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002D2C) );
		/* 8207E0BCh case   63:*/		return 0x8207E0C0;
	}
	return 0x8207E0C0;
} // Block from 8207DFC0h-8207E0C0h (64 instructions)

//////////////////////////////////////////////////////
// Block at 8207E0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E0C0);
		  /* 8207E0C0h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 8207E0C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8207E0C0h case    0:*/		return 0x8207E0C4;
		  /* 8207E0C4h */ case    1:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8207E0C4h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8207E0C4h case    1:*/		return 0x8207E0C8;
		  /* 8207E0C8h */ case    2:  		/* bc 12, CR0_EQ, -408 */
		/* 8207E0C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8207DF30;  }
		/* 8207E0C8h case    2:*/		return 0x8207E0CC;
		  /* 8207E0CCh */ case    3:  		/* cmpwi CR6, R22, 0 */
		/* 8207E0CCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 8207E0CCh case    3:*/		return 0x8207E0D0;
		  /* 8207E0D0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8207E0D0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8207E0E4;  }
		/* 8207E0D0h case    4:*/		return 0x8207E0D4;
		  /* 8207E0D4h */ case    5:  		/* mr R5, R27 */
		/* 8207E0D4h case    5:*/		regs.R5 = regs.R27;
		/* 8207E0D4h case    5:*/		return 0x8207E0D8;
		  /* 8207E0D8h */ case    6:  		/* mr R4, R31 */
		/* 8207E0D8h case    6:*/		regs.R4 = regs.R31;
		/* 8207E0D8h case    6:*/		return 0x8207E0DC;
		  /* 8207E0DCh */ case    7:  		/* mr R3, R29 */
		/* 8207E0DCh case    7:*/		regs.R3 = regs.R29;
		/* 8207E0DCh case    7:*/		return 0x8207E0E0;
		  /* 8207E0E0h */ case    8:  		/* bl -2768 */
		/* 8207E0E0h case    8:*/		regs.LR = 0x8207E0E4; return 0x8207D610;
		/* 8207E0E0h case    8:*/		return 0x8207E0E4;
	}
	return 0x8207E0E4;
} // Block from 8207E0C0h-8207E0E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207E0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E0E4);
		  /* 8207E0E4h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8207E0E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8207E0E4h case    0:*/		return 0x8207E0E8;
		  /* 8207E0E8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8207E0E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8207E0F0;  }
		/* 8207E0E8h case    1:*/		return 0x8207E0EC;
		  /* 8207E0ECh */ case    2:  		/* stw R23, <#[R21]> */
		/* 8207E0ECh case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R21 + 0x00000000) );
		/* 8207E0ECh case    2:*/		return 0x8207E0F0;
	}
	return 0x8207E0F0;
} // Block from 8207E0E4h-8207E0F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207E0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E0F0);
		  /* 8207E0F0h */ case    0:  		/* addi R1, R1, 288 */
		/* 8207E0F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 8207E0F0h case    0:*/		return 0x8207E0F4;
		  /* 8207E0F4h */ case    1:  		/* b 78228 */
		/* 8207E0F4h case    1:*/		return 0x82091288;
		/* 8207E0F4h case    1:*/		return 0x8207E0F8;
	}
	return 0x8207E0F8;
} // Block from 8207E0F0h-8207E0F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E0F8);
		  /* 8207E0F8h */ case    0:  		/* mfspr R12, LR */
		/* 8207E0F8h case    0:*/		regs.R12 = regs.LR;
		/* 8207E0F8h case    0:*/		return 0x8207E0FC;
		  /* 8207E0FCh */ case    1:  		/* bl 78148 */
		/* 8207E0FCh case    1:*/		regs.LR = 0x8207E100; return 0x82091240;
		/* 8207E0FCh case    1:*/		return 0x8207E100;
		  /* 8207E100h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8207E100h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8207E100h case    2:*/		return 0x8207E104;
		  /* 8207E104h */ case    3:  		/* mr R25, R3 */
		/* 8207E104h case    3:*/		regs.R25 = regs.R3;
		/* 8207E104h case    3:*/		return 0x8207E108;
		  /* 8207E108h */ case    4:  		/* mr R26, R4 */
		/* 8207E108h case    4:*/		regs.R26 = regs.R4;
		/* 8207E108h case    4:*/		return 0x8207E10C;
		  /* 8207E10Ch */ case    5:  		/* mr R22, R5 */
		/* 8207E10Ch case    5:*/		regs.R22 = regs.R5;
		/* 8207E10Ch case    5:*/		return 0x8207E110;
	}
	return 0x8207E110;
} // Block from 8207E0F8h-8207E110h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E110h
// Function '?XBMCaptureFrame@D3D@@YAXPAVCDevice@1@PAUD3DBaseTexture@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E110);
		  /* 8207E110h */ case    0:  		/* addi R24, R3, 400 */
		/* 8207E110h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x190);
		/* 8207E110h case    0:*/		return 0x8207E114;
		  /* 8207E114h */ case    1:  		/* addi R23, R4, 24488 */
		/* 8207E114h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R4,0x5FA8);
		/* 8207E114h case    1:*/		return 0x8207E118;
		  /* 8207E118h */ case    2:  		/* li R27, 0 */
		/* 8207E118h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8207E118h case    2:*/		return 0x8207E11C;
		  /* 8207E11Ch */ case    3:  		/* li R28, 0 */
		/* 8207E11Ch case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8207E11Ch case    3:*/		return 0x8207E120;
		  /* 8207E120h */ case    4:  		/* li R31, 0 */
		/* 8207E120h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8207E120h case    4:*/		return 0x8207E124;
		  /* 8207E124h */ case    5:  		/* mr R29, R24 */
		/* 8207E124h case    5:*/		regs.R29 = regs.R24;
		/* 8207E124h case    5:*/		return 0x8207E128;
		  /* 8207E128h */ case    6:  		/* mr R30, R23 */
		/* 8207E128h case    6:*/		regs.R30 = regs.R23;
		/* 8207E128h case    6:*/		return 0x8207E12C;
		  /* 8207E12Ch */ case    7:  		/* lwz R11, <#[R25 + 428]> */
		/* 8207E12Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x000001AC) );
		/* 8207E12Ch case    7:*/		return 0x8207E130;
		  /* 8207E130h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8207E130h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207E130h case    8:*/		return 0x8207E134;
		  /* 8207E134h */ case    9:  		/* bc 4, CR6_EQ, 28 */
		/* 8207E134h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8207E150;  }
		/* 8207E134h case    9:*/		return 0x8207E138;
		  /* 8207E138h */ case   10:  		/* mr R4, R31 */
		/* 8207E138h case   10:*/		regs.R4 = regs.R31;
		/* 8207E138h case   10:*/		return 0x8207E13C;
		  /* 8207E13Ch */ case   11:  		/* mr R3, R26 */
		/* 8207E13Ch case   11:*/		regs.R3 = regs.R26;
		/* 8207E13Ch case   11:*/		return 0x8207E140;
		  /* 8207E140h */ case   12:  		/* bl -1384 */
		/* 8207E140h case   12:*/		regs.LR = 0x8207E144; return 0x8207DBD8;
		/* 8207E140h case   12:*/		return 0x8207E144;
		  /* 8207E144h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8207E144h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8207E144h case   13:*/		return 0x8207E148;
		  /* 8207E148h */ case   14:  		/* li R11, 0 */
		/* 8207E148h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E148h case   14:*/		return 0x8207E14C;
		  /* 8207E14Ch */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 8207E14Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x8207E154;  }
		/* 8207E14Ch case   15:*/		return 0x8207E150;
	}
	return 0x8207E150;
} // Block from 8207E110h-8207E150h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207E150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E150);
		  /* 8207E150h */ case    0:  		/* li R11, 1 */
		/* 8207E150h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E150h case    0:*/		return 0x8207E154;
	}
	return 0x8207E154;
} // Block from 8207E150h-8207E154h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E154);
		  /* 8207E154h */ case    0:  		/* rlwinm R9, R11, 0, 24, 31 */
		/* 8207E154h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R11);
		/* 8207E154h case    0:*/		return 0x8207E158;
		  /* 8207E158h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 8207E158h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8207E158h case    1:*/		return 0x8207E15C;
		  /* 8207E15Ch */ case    2:  		/* lwz R11, <#[R30 - 8]> */
		/* 8207E15Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 8207E15Ch case    2:*/		return 0x8207E160;
		  /* 8207E160h */ case    3:  		/* subf. R11, R10, R11 */
		/* 8207E160h case    3:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207E160h case    3:*/		return 0x8207E164;
		  /* 8207E164h */ case    4:  		/* bc 12, CR0_EQ, 96 */
		/* 8207E164h case    4:*/		if ( regs.CR[0].eq ) { return 0x8207E1C4;  }
		/* 8207E164h case    4:*/		return 0x8207E168;
		  /* 8207E168h */ case    5:  		/* lwz R10, <#[R22 + 4]> */
		/* 8207E168h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 8207E168h case    5:*/		return 0x8207E16C;
		  /* 8207E16Ch */ case    6:  		/* rlwinm R8, R10, 14, 18, 31 */
		/* 8207E16Ch case    6:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R8,regs.R10);
		/* 8207E16Ch case    6:*/		return 0x8207E170;
		  /* 8207E170h */ case    7:  		/* cmplw CR6, R11, R8 */
		/* 8207E170h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8207E170h case    7:*/		return 0x8207E174;
		  /* 8207E174h */ case    8:  		/* bc 12, CR6_GT, 20 */
		/* 8207E174h case    8:*/		if ( regs.CR[6].gt ) { return 0x8207E188;  }
		/* 8207E174h case    8:*/		return 0x8207E178;
		  /* 8207E178h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 8207E178h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8207E178h case    9:*/		return 0x8207E17C;
		  /* 8207E17Ch */ case   10:  		/* rlwinm R10, R10, 20, 26, 31 */
		/* 8207E17Ch case   10:*/		cpu::op::rlwinm<0,20,26,31>(regs,&regs.R10,regs.R10);
		/* 8207E17Ch case   10:*/		return 0x8207E180;
		  /* 8207E180h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 8207E180h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207E180h case   11:*/		return 0x8207E184;
		  /* 8207E184h */ case   12:  		/* bc 4, CR6_LT, 64 */
		/* 8207E184h case   12:*/		if ( !regs.CR[6].lt ) { return 0x8207E1C4;  }
		/* 8207E184h case   12:*/		return 0x8207E188;
	}
	return 0x8207E188;
} // Block from 8207E154h-8207E188h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207E188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E188);
		  /* 8207E188h */ case    0:  		/* rlwinm. R10, R9, 0, 24, 31 */
		/* 8207E188h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R9);
		/* 8207E188h case    0:*/		return 0x8207E18C;
		  /* 8207E18Ch */ case    1:  		/* li R11, 1 */
		/* 8207E18Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E18Ch case    1:*/		return 0x8207E190;
		  /* 8207E190h */ case    2:  		/* bc 4, CR0_EQ, 56 */
		/* 8207E190h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8207E1C8;  }
		/* 8207E190h case    2:*/		return 0x8207E194;
		  /* 8207E194h */ case    3:  		/* li R11, 0 */
		/* 8207E194h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E194h case    3:*/		return 0x8207E198;
		  /* 8207E198h */ case    4:  		/* addi R6, R1, 80 */
		/* 8207E198h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8207E198h case    4:*/		return 0x8207E19C;
		  /* 8207E19Ch */ case    5:  		/* mr R5, R31 */
		/* 8207E19Ch case    5:*/		regs.R5 = regs.R31;
		/* 8207E19Ch case    5:*/		return 0x8207E1A0;
		  /* 8207E1A0h */ case    6:  		/* stw R11, <#[R1 + 80]> */
		/* 8207E1A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207E1A0h case    6:*/		return 0x8207E1A4;
		  /* 8207E1A4h */ case    7:  		/* mr R4, R26 */
		/* 8207E1A4h case    7:*/		regs.R4 = regs.R26;
		/* 8207E1A4h case    7:*/		return 0x8207E1A8;
		  /* 8207E1A8h */ case    8:  		/* mr R3, R25 */
		/* 8207E1A8h case    8:*/		regs.R3 = regs.R25;
		/* 8207E1A8h case    8:*/		return 0x8207E1AC;
		  /* 8207E1ACh */ case    9:  		/* bl -876 */
		/* 8207E1ACh case    9:*/		regs.LR = 0x8207E1B0; return 0x8207DE40;
		/* 8207E1ACh case    9:*/		return 0x8207E1B0;
		  /* 8207E1B0h */ case   10:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207E1B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207E1B0h case   10:*/		return 0x8207E1B4;
		  /* 8207E1B4h */ case   11:  		/* addic R10, R11, -1 */
		/* 8207E1B4h case   11:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8207E1B4h case   11:*/		return 0x8207E1B8;
		  /* 8207E1B8h */ case   12:  		/* subfe R11, R10, R11 */
		/* 8207E1B8h case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207E1B8h case   12:*/		return 0x8207E1BC;
		  /* 8207E1BCh */ case   13:  		/* or R28, R11, R28 */
		/* 8207E1BCh case   13:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 8207E1BCh case   13:*/		return 0x8207E1C0;
		  /* 8207E1C0h */ case   14:  		/* b -148 */
		/* 8207E1C0h case   14:*/		return 0x8207E12C;
		/* 8207E1C0h case   14:*/		return 0x8207E1C4;
	}
	return 0x8207E1C4;
} // Block from 8207E188h-8207E1C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207E1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E1C4);
		  /* 8207E1C4h */ case    0:  		/* li R11, 0 */
		/* 8207E1C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E1C4h case    0:*/		return 0x8207E1C8;
	}
	return 0x8207E1C8;
} // Block from 8207E1C4h-8207E1C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E1C8);
		  /* 8207E1C8h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8207E1C8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8207E1C8h case    0:*/		return 0x8207E1CC;
		  /* 8207E1CCh */ case    1:  		/* rlwinm R10, R27, 0, 24, 31 */
		/* 8207E1CCh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R27);
		/* 8207E1CCh case    1:*/		return 0x8207E1D0;
		  /* 8207E1D0h */ case    2:  		/* addi R31, R31, 1 */
		/* 8207E1D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8207E1D0h case    2:*/		return 0x8207E1D4;
		  /* 8207E1D4h */ case    3:  		/* or R27, R11, R10 */
		/* 8207E1D4h case    3:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 8207E1D4h case    3:*/		return 0x8207E1D8;
		  /* 8207E1D8h */ case    4:  		/* addi R30, R30, 36 */
		/* 8207E1D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x24);
		/* 8207E1D8h case    4:*/		return 0x8207E1DC;
		  /* 8207E1DCh */ case    5:  		/* addi R29, R29, 4 */
		/* 8207E1DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8207E1DCh case    5:*/		return 0x8207E1E0;
		  /* 8207E1E0h */ case    6:  		/* cmplwi CR6, R31, 3 */
		/* 8207E1E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000003);
		/* 8207E1E0h case    6:*/		return 0x8207E1E4;
		  /* 8207E1E4h */ case    7:  		/* bc 12, CR6_LT, -184 */
		/* 8207E1E4h case    7:*/		if ( regs.CR[6].lt ) { return 0x8207E12C;  }
		/* 8207E1E4h case    7:*/		return 0x8207E1E8;
		  /* 8207E1E8h */ case    8:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 8207E1E8h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 8207E1E8h case    8:*/		return 0x8207E1EC;
		  /* 8207E1ECh */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 8207E1ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x8207E1F8;  }
		/* 8207E1ECh case    9:*/		return 0x8207E1F0;
		  /* 8207E1F0h */ case   10:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8207E1F0h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8207E1F0h case   10:*/		return 0x8207E1F4;
		  /* 8207E1F4h */ case   11:  		/* bc 4, CR0_EQ, -220 */
		/* 8207E1F4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8207E118;  }
		/* 8207E1F4h case   11:*/		return 0x8207E1F8;
	}
	return 0x8207E1F8;
} // Block from 8207E1C8h-8207E1F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207E1F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E1F8);
		  /* 8207E1F8h */ case    0:  		/* addi R1, R1, 176 */
		/* 8207E1F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8207E1F8h case    0:*/		return 0x8207E1FC;
		  /* 8207E1FCh */ case    1:  		/* b 77972 */
		/* 8207E1FCh case    1:*/		return 0x82091290;
		/* 8207E1FCh case    1:*/		return 0x8207E200;
	}
	return 0x8207E200;
} // Block from 8207E1F8h-8207E200h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E200);
		  /* 8207E200h */ case    0:  		/* mfspr R12, LR */
		/* 8207E200h case    0:*/		regs.R12 = regs.LR;
		/* 8207E200h case    0:*/		return 0x8207E204;
		  /* 8207E204h */ case    1:  		/* bl 77876 */
		/* 8207E204h case    1:*/		regs.LR = 0x8207E208; return 0x82091238;
		/* 8207E204h case    1:*/		return 0x8207E208;
		  /* 8207E208h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8207E208h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8207E208h case    2:*/		return 0x8207E20C;
		  /* 8207E20Ch */ case    3:  		/* mr R30, R3 */
		/* 8207E20Ch case    3:*/		regs.R30 = regs.R3;
		/* 8207E20Ch case    3:*/		return 0x8207E210;
		  /* 8207E210h */ case    4:  		/* mr R20, R4 */
		/* 8207E210h case    4:*/		regs.R20 = regs.R4;
		/* 8207E210h case    4:*/		return 0x8207E214;
		  /* 8207E214h */ case    5:  		/* bl 2026724 */
		/* 8207E214h case    5:*/		regs.LR = 0x8207E218; return 0x8226CEF8;
		/* 8207E214h case    5:*/		return 0x8207E218;
		  /* 8207E218h */ case    6:  		/* cmpwi CR6, R3, 2 */
		/* 8207E218h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207E218h case    6:*/		return 0x8207E21C;
		  /* 8207E21Ch */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8207E21Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207E22C;  }
		/* 8207E21Ch case    7:*/		return 0x8207E220;
		  /* 8207E220h */ case    8:  		/* lis R11, -32256 */
		/* 8207E220h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207E220h case    8:*/		return 0x8207E224;
		  /* 8207E224h */ case    9:  		/* lwz R11, <#[R11 + 1452]> */
		/* 8207E224h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 8207E224h case    9:*/		return 0x8207E228;
		  /* 8207E228h */ case   10:  		/* b 12 */
		/* 8207E228h case   10:*/		return 0x8207E234;
		/* 8207E228h case   10:*/		return 0x8207E22C;
	}
	return 0x8207E22C;
} // Block from 8207E200h-8207E22Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207E22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E22C);
		  /* 8207E22Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207E22Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207E22Ch case    0:*/		return 0x8207E230;
		  /* 8207E230h */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207E230h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207E230h case    1:*/		return 0x8207E234;
	}
	return 0x8207E234;
} // Block from 8207E22Ch-8207E234h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E234);
		  /* 8207E234h */ case    0:  		/* lwz R31, <#[R11]> */
		/* 8207E234h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8207E234h case    0:*/		return 0x8207E238;
		  /* 8207E238h */ case    1:  		/* li R28, 0 */
		/* 8207E238h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8207E238h case    1:*/		return 0x8207E23C;
		  /* 8207E23Ch */ case    2:  		/* mr R11, R28 */
		/* 8207E23Ch case    2:*/		regs.R11 = regs.R28;
		/* 8207E23Ch case    2:*/		return 0x8207E240;
		  /* 8207E240h */ case    3:  		/* lwz R10, <#[R31 + 24584]> */
		/* 8207E240h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00006008) );
		/* 8207E240h case    3:*/		return 0x8207E244;
		  /* 8207E244h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8207E244h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8207E244h case    4:*/		return 0x8207E248;
		  /* 8207E248h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 8207E248h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207E258;  }
		/* 8207E248h case    5:*/		return 0x8207E24C;
		  /* 8207E24Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 8207E24Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207E24Ch case    6:*/		return 0x8207E250;
		  /* 8207E250h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8207E250h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8207E250h case    7:*/		return 0x8207E254;
		  /* 8207E254h */ case    8:  		/* bc 12, CR6_LT, -8 */
		/* 8207E254h case    8:*/		if ( regs.CR[6].lt ) { return 0x8207E24C;  }
		/* 8207E254h case    8:*/		return 0x8207E258;
	}
	return 0x8207E258;
} // Block from 8207E234h-8207E258h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207E258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E258);
		  /* 8207E258h */ case    0:  		/* li R27, -1 */
		/* 8207E258h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 8207E258h case    0:*/		return 0x8207E25C;
		  /* 8207E25Ch */ case    1:  		/* stw R28, <#[R30 + 412]> */
		/* 8207E25Ch case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x0000019C) );
		/* 8207E25Ch case    1:*/		return 0x8207E260;
		  /* 8207E260h */ case    2:  		/* li R23, 1 */
		/* 8207E260h case    2:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8207E260h case    2:*/		return 0x8207E264;
		  /* 8207E264h */ case    3:  		/* stw R27, <#[R30 + 396]> */
		/* 8207E264h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x0000018C) );
		/* 8207E264h case    3:*/		return 0x8207E268;
		  /* 8207E268h */ case    4:  		/* stw R27, <#[R30 + 416]> */
		/* 8207E268h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x000001A0) );
		/* 8207E268h case    4:*/		return 0x8207E26C;
		  /* 8207E26Ch */ case    5:  		/* stw R27, <#[R30 + 420]> */
		/* 8207E26Ch case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x000001A4) );
		/* 8207E26Ch case    5:*/		return 0x8207E270;
		  /* 8207E270h */ case    6:  		/* lwz R11, <#[R20 + 4]> */
		/* 8207E270h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 8207E270h case    6:*/		return 0x8207E274;
		  /* 8207E274h */ case    7:  		/* rlwinm. R24, R11, 21, 31, 31 */
		/* 8207E274h case    7:*/		cpu::op::rlwinm<1,21,31,31>(regs,&regs.R24,regs.R11);
		/* 8207E274h case    7:*/		return 0x8207E278;
		  /* 8207E278h */ case    8:  		/* stw R28, <#[R30 + 392]> */
		/* 8207E278h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000188) );
		/* 8207E278h case    8:*/		return 0x8207E27C;
		  /* 8207E27Ch */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 8207E27Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8207E288;  }
		/* 8207E27Ch case    9:*/		return 0x8207E280;
		  /* 8207E280h */ case   10:  		/* li R11, 64 */
		/* 8207E280h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 8207E280h case   10:*/		return 0x8207E284;
		  /* 8207E284h */ case   11:  		/* stw R11, <#[R30 + 392]> */
		/* 8207E284h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000188) );
		/* 8207E284h case   11:*/		return 0x8207E288;
	}
	return 0x8207E288;
} // Block from 8207E258h-8207E288h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207E288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E288);
		  /* 8207E288h */ case    0:  		/* lwz R22, <#[R30 + 392]> */
		/* 8207E288h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R30 + 0x00000188) );
		/* 8207E288h case    0:*/		return 0x8207E28C;
		  /* 8207E28Ch */ case    1:  		/* mr R3, R31 */
		/* 8207E28Ch case    1:*/		regs.R3 = regs.R31;
		/* 8207E28Ch case    1:*/		return 0x8207E290;
		  /* 8207E290h */ case    2:  		/* std R28, <#[R30 + 400]> */
		/* 8207E290h case    2:*/		cpu::mem::store64( regs, regs.R28, (uint32)(regs.R30 + 0x00000190) );
		/* 8207E290h case    2:*/		return 0x8207E294;
		  /* 8207E294h */ case    3:  		/* stw R28, <#[R30 + 408]> */
		/* 8207E294h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000198) );
		/* 8207E294h case    3:*/		return 0x8207E298;
		  /* 8207E298h */ case    4:  		/* addi R21, R30, 400 */
		/* 8207E298h case    4:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R30,0x190);
		/* 8207E298h case    4:*/		return 0x8207E29C;
		  /* 8207E29Ch */ case    5:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E29Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E29Ch case    5:*/		return 0x8207E2A0;
		  /* 8207E2A0h */ case    6:  		/* addi R4, R11, 112 */
		/* 8207E2A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x70);
		/* 8207E2A0h case    6:*/		return 0x8207E2A4;
		  /* 8207E2A4h */ case    7:  		/* bl -1628 */
		/* 8207E2A4h case    7:*/		regs.LR = 0x8207E2A8; return 0x8207DC48;
		/* 8207E2A4h case    7:*/		return 0x8207E2A8;
		  /* 8207E2A8h */ case    8:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E2A8h case    8:*/		return 0x8207E2AC;
		  /* 8207E2ACh */ case    9:  		/* mr R3, R31 */
		/* 8207E2ACh case    9:*/		regs.R3 = regs.R31;
		/* 8207E2ACh case    9:*/		return 0x8207E2B0;
		  /* 8207E2B0h */ case   10:  		/* addi R4, R11, 116 */
		/* 8207E2B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x74);
		/* 8207E2B0h case   10:*/		return 0x8207E2B4;
		  /* 8207E2B4h */ case   11:  		/* bl -1644 */
		/* 8207E2B4h case   11:*/		regs.LR = 0x8207E2B8; return 0x8207DC48;
		/* 8207E2B4h case   11:*/		return 0x8207E2B8;
		  /* 8207E2B8h */ case   12:  		/* lbz R11, <#[R31 + 11070]> */
		/* 8207E2B8h case   12:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207E2B8h case   12:*/		return 0x8207E2BC;
		  /* 8207E2BCh */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8207E2BCh case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8207E2BCh case   13:*/		return 0x8207E2C0;
		  /* 8207E2C0h */ case   14:  		/* bc 12, CR0_EQ, 36 */
		/* 8207E2C0h case   14:*/		if ( regs.CR[0].eq ) { return 0x8207E2E4;  }
		/* 8207E2C0h case   14:*/		return 0x8207E2C4;
		  /* 8207E2C4h */ case   15:  		/* li R11, 1 */
		/* 8207E2C4h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E2C4h case   15:*/		return 0x8207E2C8;
		  /* 8207E2C8h */ case   16:  		/* li R5, 919 */
		/* 8207E2C8h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x397);
		/* 8207E2C8h case   16:*/		return 0x8207E2CC;
		  /* 8207E2CCh */ case   17:  		/* stw R11, <#[R30 + 468]> */
		/* 8207E2CCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000001D4) );
		/* 8207E2CCh case   17:*/		return 0x8207E2D0;
		  /* 8207E2D0h */ case   18:  		/* mr R3, R31 */
		/* 8207E2D0h case   18:*/		regs.R3 = regs.R31;
		/* 8207E2D0h case   18:*/		return 0x8207E2D4;
		  /* 8207E2D4h */ case   19:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E2D4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E2D4h case   19:*/		return 0x8207E2D8;
		  /* 8207E2D8h */ case   20:  		/* addi R4, R11, 120 */
		/* 8207E2D8h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78);
		/* 8207E2D8h case   20:*/		return 0x8207E2DC;
		  /* 8207E2DCh */ case   21:  		/* bl -3156 */
		/* 8207E2DCh case   21:*/		regs.LR = 0x8207E2E0; return 0x8207D688;
		/* 8207E2DCh case   21:*/		return 0x8207E2E0;
		  /* 8207E2E0h */ case   22:  		/* b 16 */
		/* 8207E2E0h case   22:*/		return 0x8207E2F0;
		/* 8207E2E0h case   22:*/		return 0x8207E2E4;
	}
	return 0x8207E2E4;
} // Block from 8207E288h-8207E2E4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8207E2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E2E4);
		  /* 8207E2E4h */ case    0:  		/* stw R28, <#[R30 + 468]> */
		/* 8207E2E4h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000001D4) );
		/* 8207E2E4h case    0:*/		return 0x8207E2E8;
		  /* 8207E2E8h */ case    1:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E2E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E2E8h case    1:*/		return 0x8207E2EC;
		  /* 8207E2ECh */ case    2:  		/* stw R28, <#[R11 + 120]> */
		/* 8207E2ECh case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000078) );
		/* 8207E2ECh case    2:*/		return 0x8207E2F0;
	}
	return 0x8207E2F0;
} // Block from 8207E2E4h-8207E2F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207E2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E2F0);
		  /* 8207E2F0h */ case    0:  		/* mr R3, R31 */
		/* 8207E2F0h case    0:*/		regs.R3 = regs.R31;
		/* 8207E2F0h case    0:*/		return 0x8207E2F4;
		  /* 8207E2F4h */ case    1:  		/* lwz R4, <#[R31 + 11088]> */
		/* 8207E2F4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00002B50) );
		/* 8207E2F4h case    1:*/		return 0x8207E2F8;
		  /* 8207E2F8h */ case    2:  		/* bl -47480 */
		/* 8207E2F8h case    2:*/		regs.LR = 0x8207E2FC; return 0x82072980;
		/* 8207E2F8h case    2:*/		return 0x8207E2FC;
		  /* 8207E2FCh */ case    3:  		/* mr R5, R20 */
		/* 8207E2FCh case    3:*/		regs.R5 = regs.R20;
		/* 8207E2FCh case    3:*/		return 0x8207E300;
		  /* 8207E300h */ case    4:  		/* mr R4, R31 */
		/* 8207E300h case    4:*/		regs.R4 = regs.R31;
		/* 8207E300h case    4:*/		return 0x8207E304;
		  /* 8207E304h */ case    5:  		/* mr R3, R30 */
		/* 8207E304h case    5:*/		regs.R3 = regs.R30;
		/* 8207E304h case    5:*/		return 0x8207E308;
		  /* 8207E308h */ case    6:  		/* bl -528 */
		/* 8207E308h case    6:*/		regs.LR = 0x8207E30C; return 0x8207E0F8;
		/* 8207E308h case    6:*/		return 0x8207E30C;
		  /* 8207E30Ch */ case    7:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E30Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E30Ch case    7:*/		return 0x8207E310;
		  /* 8207E310h */ case    8:  		/* mr R25, R28 */
		/* 8207E310h case    8:*/		regs.R25 = regs.R28;
		/* 8207E310h case    8:*/		return 0x8207E314;
		  /* 8207E314h */ case    9:  		/* mr R26, R28 */
		/* 8207E314h case    9:*/		regs.R26 = regs.R28;
		/* 8207E314h case    9:*/		return 0x8207E318;
		  /* 8207E318h */ case   10:  		/* lwz R11, <#[R11 + 100]> */
		/* 8207E318h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000064) );
		/* 8207E318h case   10:*/		return 0x8207E31C;
		  /* 8207E31Ch */ case   11:  		/* bl 41692 */
		/* 8207E31Ch case   11:*/		regs.LR = 0x8207E320; return 0x820885F8;
		/* 8207E31Ch case   11:*/		return 0x8207E320;
		  /* 8207E320h */ case   12:  		/* lwz R11, <#[R31 + 16976]> */
		/* 8207E320h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00004250) );
		/* 8207E320h case   12:*/		return 0x8207E324;
		  /* 8207E324h */ case   13:  		/* lwz R10, <#[R20 + 8]> */
		/* 8207E324h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 8207E324h case   13:*/		return 0x8207E328;
		  /* 8207E328h */ case   14:  		/* subfc R11, R10, R11 */
		/* 8207E328h case   14:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8207E328h case   14:*/		return 0x8207E32C;
		  /* 8207E32Ch */ case   15:  		/* subfe R11, R11, R11 */
		/* 8207E32Ch case   15:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8207E32Ch case   15:*/		return 0x8207E330;
		  /* 8207E330h */ case   16:  		/* and R24, R11, R24 */
		/* 8207E330h case   16:*/		cpu::op::and<0>(regs,&regs.R24,regs.R11,regs.R24);
		/* 8207E330h case   16:*/		return 0x8207E334;
		  /* 8207E334h */ case   17:  		/* cmpwi CR6, R24, 0 */
		/* 8207E334h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8207E334h case   17:*/		return 0x8207E338;
		  /* 8207E338h */ case   18:  		/* bc 4, CR6_EQ, 12 */
		/* 8207E338h case   18:*/		if ( !regs.CR[6].eq ) { return 0x8207E344;  }
		/* 8207E338h case   18:*/		return 0x8207E33C;
		  /* 8207E33Ch */ case   19:  		/* cmpwi CR6, R23, 0 */
		/* 8207E33Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 8207E33Ch case   19:*/		return 0x8207E340;
		  /* 8207E340h */ case   20:  		/* bc 12, CR6_EQ, 312 */
		/* 8207E340h case   20:*/		if ( regs.CR[6].eq ) { return 0x8207E478;  }
		/* 8207E340h case   20:*/		return 0x8207E344;
	}
	return 0x8207E344;
} // Block from 8207E2F0h-8207E344h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8207E344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E344);
		  /* 8207E344h */ case    0:  		/* lwz R7, <#[R31 + 24584]> */
		/* 8207E344h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00006008) );
		/* 8207E344h case    0:*/		return 0x8207E348;
		  /* 8207E348h */ case    1:  		/* mr R23, R28 */
		/* 8207E348h case    1:*/		regs.R23 = regs.R28;
		/* 8207E348h case    1:*/		return 0x8207E34C;
		  /* 8207E34Ch */ case    2:  		/* mr R8, R28 */
		/* 8207E34Ch case    2:*/		regs.R8 = regs.R28;
		/* 8207E34Ch case    2:*/		return 0x8207E350;
		  /* 8207E350h */ case    3:  		/* mr R10, R28 */
		/* 8207E350h case    3:*/		regs.R10 = regs.R28;
		/* 8207E350h case    3:*/		return 0x8207E354;
		  /* 8207E354h */ case    4:  		/* cmplwi CR6, R7, 0 */
		/* 8207E354h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8207E354h case    4:*/		return 0x8207E358;
		  /* 8207E358h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 8207E358h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207E38C;  }
		/* 8207E358h case    5:*/		return 0x8207E35C;
		  /* 8207E35Ch */ case    6:  		/* lwz R5, <#[R31 + 11024]> */
		/* 8207E35Ch case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E35Ch case    6:*/		return 0x8207E360;
		  /* 8207E360h */ case    7:  		/* li R11, 100 */
		/* 8207E360h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8207E360h case    7:*/		return 0x8207E364;
		  /* 8207E364h */ case    8:  		/* addi R9, R31, 24464 */
		/* 8207E364h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x5F90);
		/* 8207E364h case    8:*/		return 0x8207E368;
		  /* 8207E368h */ case    9:  		/* lwzx R4, <#[R11 + R5]> */
		/* 8207E368h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 8207E368h case    9:*/		return 0x8207E36C;
		  /* 8207E36Ch */ case   10:  		/* addi R10, R10, 1 */
		/* 8207E36Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8207E36Ch case   10:*/		return 0x8207E370;
		  /* 8207E370h */ case   11:  		/* lwzu R6, <#[R9 + 36]> */
		/* 8207E370h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000024) );
		regs.R9 = (uint32)(regs.R9 + 0x00000024);
		/* 8207E370h case   11:*/		return 0x8207E374;
		  /* 8207E374h */ case   12:  		/* addi R11, R11, 4 */
		/* 8207E374h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207E374h case   12:*/		return 0x8207E378;
		  /* 8207E378h */ case   13:  		/* cmplw CR6, R10, R7 */
		/* 8207E378h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8207E378h case   13:*/		return 0x8207E37C;
		  /* 8207E37Ch */ case   14:  		/* subf R6, R4, R6 */
		/* 8207E37Ch case   14:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R4,regs.R6);
		/* 8207E37Ch case   14:*/		return 0x8207E380;
		  /* 8207E380h */ case   15:  		/* rlwinm R6, R6, 29, 3, 31 */
		/* 8207E380h case   15:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R6,regs.R6);
		/* 8207E380h case   15:*/		return 0x8207E384;
		  /* 8207E384h */ case   16:  		/* add R8, R6, R8 */
		/* 8207E384h case   16:*/		cpu::op::add<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 8207E384h case   16:*/		return 0x8207E388;
		  /* 8207E388h */ case   17:  		/* bc 12, CR6_LT, -32 */
		/* 8207E388h case   17:*/		if ( regs.CR[6].lt ) { return 0x8207E368;  }
		/* 8207E388h case   17:*/		return 0x8207E38C;
	}
	return 0x8207E38C;
} // Block from 8207E344h-8207E38Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207E38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E38C);
		  /* 8207E38Ch */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 8207E38Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 8207E38Ch case    0:*/		return 0x8207E390;
		  /* 8207E390h */ case    1:  		/* rlwinm R11, R11, 24, 29, 31 */
		/* 8207E390h case    1:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R11,regs.R11);
		/* 8207E390h case    1:*/		return 0x8207E394;
		  /* 8207E394h */ case    2:  		/* cmplw CR6, R8, R11 */
		/* 8207E394h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8207E394h case    2:*/		return 0x8207E398;
		  /* 8207E398h */ case    3:  		/* bc 4, CR6_LT, 116 */
		/* 8207E398h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8207E40C;  }
		/* 8207E398h case    3:*/		return 0x8207E39C;
		  /* 8207E39Ch */ case    4:  		/* mr R5, R28 */
		/* 8207E39Ch case    4:*/		regs.R5 = regs.R28;
		/* 8207E39Ch case    4:*/		return 0x8207E3A0;
		  /* 8207E3A0h */ case    5:  		/* cmplwi CR6, R7, 0 */
		/* 8207E3A0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8207E3A0h case    5:*/		return 0x8207E3A4;
		  /* 8207E3A4h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 8207E3A4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207E40C;  }
		/* 8207E3A4h case    6:*/		return 0x8207E3A8;
		  /* 8207E3A8h */ case    7:  		/* addi R29, R31, 24488 */
		/* 8207E3A8h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x5FA8);
		/* 8207E3A8h case    7:*/		return 0x8207E3AC;
		  /* 8207E3ACh */ case    8:  		/* lwz R11, <#[R30 + 428]> */
		/* 8207E3ACh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000001AC) );
		/* 8207E3ACh case    8:*/		return 0x8207E3B0;
		  /* 8207E3B0h */ case    9:  		/* cmpwi CR6, R11, 0 */
		/* 8207E3B0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207E3B0h case    9:*/		return 0x8207E3B4;
		  /* 8207E3B4h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 8207E3B4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8207E3D0;  }
		/* 8207E3B4h case   10:*/		return 0x8207E3B8;
		  /* 8207E3B8h */ case   11:  		/* mr R4, R5 */
		/* 8207E3B8h case   11:*/		regs.R4 = regs.R5;
		/* 8207E3B8h case   11:*/		return 0x8207E3BC;
		  /* 8207E3BCh */ case   12:  		/* mr R3, R31 */
		/* 8207E3BCh case   12:*/		regs.R3 = regs.R31;
		/* 8207E3BCh case   12:*/		return 0x8207E3C0;
		  /* 8207E3C0h */ case   13:  		/* bl -2024 */
		/* 8207E3C0h case   13:*/		regs.LR = 0x8207E3C4; return 0x8207DBD8;
		/* 8207E3C0h case   13:*/		return 0x8207E3C4;
		  /* 8207E3C4h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8207E3C4h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8207E3C4h case   14:*/		return 0x8207E3C8;
		  /* 8207E3C8h */ case   15:  		/* mr R11, R28 */
		/* 8207E3C8h case   15:*/		regs.R11 = regs.R28;
		/* 8207E3C8h case   15:*/		return 0x8207E3CC;
		  /* 8207E3CCh */ case   16:  		/* bc 12, CR0_EQ, 8 */
		/* 8207E3CCh case   16:*/		if ( regs.CR[0].eq ) { return 0x8207E3D4;  }
		/* 8207E3CCh case   16:*/		return 0x8207E3D0;
	}
	return 0x8207E3D0;
} // Block from 8207E38Ch-8207E3D0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207E3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E3D0);
		  /* 8207E3D0h */ case    0:  		/* li R11, 1 */
		/* 8207E3D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E3D0h case    0:*/		return 0x8207E3D4;
	}
	return 0x8207E3D4;
} // Block from 8207E3D0h-8207E3D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E3D4);
		  /* 8207E3D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8207E3D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8207E3D4h case    0:*/		return 0x8207E3D8;
		  /* 8207E3D8h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 8207E3D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8207E3EC;  }
		/* 8207E3D8h case    1:*/		return 0x8207E3DC;
		  /* 8207E3DCh */ case    2:  		/* lwz R11, <#[R29]> */
		/* 8207E3DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8207E3DCh case    2:*/		return 0x8207E3E0;
		  /* 8207E3E0h */ case    3:  		/* lwz R10, <#[R29 - 8]> */
		/* 8207E3E0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFF8) );
		/* 8207E3E0h case    3:*/		return 0x8207E3E4;
		  /* 8207E3E4h */ case    4:  		/* subf. R11, R11, R10 */
		/* 8207E3E4h case    4:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207E3E4h case    4:*/		return 0x8207E3E8;
		  /* 8207E3E8h */ case    5:  		/* bc 12, CR0_GT, 28 */
		/* 8207E3E8h case    5:*/		if ( regs.CR[0].gt ) { return 0x8207E404;  }
		/* 8207E3E8h case    5:*/		return 0x8207E3EC;
	}
	return 0x8207E3EC;
} // Block from 8207E3D4h-8207E3ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E3EC);
		  /* 8207E3ECh */ case    0:  		/* lwz R11, <#[R31 + 24584]> */
		/* 8207E3ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00006008) );
		/* 8207E3ECh case    0:*/		return 0x8207E3F0;
		  /* 8207E3F0h */ case    1:  		/* addi R5, R5, 1 */
		/* 8207E3F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 8207E3F0h case    1:*/		return 0x8207E3F4;
		  /* 8207E3F4h */ case    2:  		/* addi R29, R29, 36 */
		/* 8207E3F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x24);
		/* 8207E3F4h case    2:*/		return 0x8207E3F8;
		  /* 8207E3F8h */ case    3:  		/* cmplw CR6, R5, R11 */
		/* 8207E3F8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 8207E3F8h case    3:*/		return 0x8207E3FC;
		  /* 8207E3FCh */ case    4:  		/* bc 12, CR6_LT, -80 */
		/* 8207E3FCh case    4:*/		if ( regs.CR[6].lt ) { return 0x8207E3AC;  }
		/* 8207E3FCh case    4:*/		return 0x8207E400;
		  /* 8207E400h */ case    5:  		/* b 12 */
		/* 8207E400h case    5:*/		return 0x8207E40C;
		/* 8207E400h case    5:*/		return 0x8207E404;
	}
	return 0x8207E404;
} // Block from 8207E3ECh-8207E404h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E404);
		  /* 8207E404h */ case    0:  		/* cmpwi CR6, R5, -1 */
		/* 8207E404h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R5,0xFFFFFFFF);
		/* 8207E404h case    0:*/		return 0x8207E408;
		  /* 8207E408h */ case    1:  		/* bc 4, CR6_EQ, 76 */
		/* 8207E408h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207E454;  }
		/* 8207E408h case    1:*/		return 0x8207E40C;
	}
	return 0x8207E40C;
} // Block from 8207E404h-8207E40Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E40C);
		  /* 8207E40Ch */ case    0:  		/* addi R3, R1, 88 */
		/* 8207E40Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 8207E40Ch case    0:*/		return 0x8207E410;
		  /* 8207E410h */ case    1:  		/* bl 38304 */
		/* 8207E410h case    1:*/		regs.LR = 0x8207E414; return 0x820879B0;
		/* 8207E410h case    1:*/		return 0x8207E414;
		  /* 8207E414h */ case    2:  		/* addi R29, R31, 24460 */
		/* 8207E414h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x5F8C);
		/* 8207E414h case    2:*/		return 0x8207E418;
		  /* 8207E418h */ case    3:  		/* li R7, 0 */
		/* 8207E418h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207E418h case    3:*/		return 0x8207E41C;
		  /* 8207E41Ch */ case    4:  		/* mr R3, R29 */
		/* 8207E41Ch case    4:*/		regs.R3 = regs.R29;
		/* 8207E41Ch case    4:*/		return 0x8207E420;
		  /* 8207E420h */ case    5:  		/* li R6, 0 */
		/* 8207E420h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207E420h case    5:*/		return 0x8207E424;
		  /* 8207E424h */ case    6:  		/* li R5, 1 */
		/* 8207E424h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8207E424h case    6:*/		return 0x8207E428;
		  /* 8207E428h */ case    7:  		/* li R4, 3 */
		/* 8207E428h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8207E428h case    7:*/		return 0x8207E42C;
		  /* 8207E42Ch */ case    8:  		/* bl 2026748 */
		/* 8207E42Ch case    8:*/		regs.LR = 0x8207E430; return 0x8226D128;
		/* 8207E42Ch case    8:*/		return 0x8207E430;
		  /* 8207E430h */ case    9:  		/* mr R3, R29 */
		/* 8207E430h case    9:*/		regs.R3 = regs.R29;
		/* 8207E430h case    9:*/		return 0x8207E434;
		  /* 8207E434h */ case   10:  		/* bl 2026724 */
		/* 8207E434h case   10:*/		regs.LR = 0x8207E438; return 0x8226D118;
		/* 8207E434h case   10:*/		return 0x8207E438;
		  /* 8207E438h */ case   11:  		/* addi R3, R1, 96 */
		/* 8207E438h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8207E438h case   11:*/		return 0x8207E43C;
		  /* 8207E43Ch */ case   12:  		/* bl 38260 */
		/* 8207E43Ch case   12:*/		regs.LR = 0x8207E440; return 0x820879B0;
		/* 8207E43Ch case   12:*/		return 0x8207E440;
		  /* 8207E440h */ case   13:  		/* ld R11, <#[R1 + 88]> */
		/* 8207E440h case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8207E440h case   13:*/		return 0x8207E444;
		  /* 8207E444h */ case   14:  		/* ld R10, <#[R1 + 96]> */
		/* 8207E444h case   14:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8207E444h case   14:*/		return 0x8207E448;
		  /* 8207E448h */ case   15:  		/* subf R11, R11, R10 */
		/* 8207E448h case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207E448h case   15:*/		return 0x8207E44C;
		  /* 8207E44Ch */ case   16:  		/* add R25, R11, R25 */
		/* 8207E44Ch case   16:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 8207E44Ch case   16:*/		return 0x8207E450;
		  /* 8207E450h */ case   17:  		/* b 32 */
		/* 8207E450h case   17:*/		return 0x8207E470;
		/* 8207E450h case   17:*/		return 0x8207E454;
	}
	return 0x8207E454;
} // Block from 8207E40Ch-8207E454h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207E454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E454);
		  /* 8207E454h */ case    0:  		/* addi R6, R1, 80 */
		/* 8207E454h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8207E454h case    0:*/		return 0x8207E458;
		  /* 8207E458h */ case    1:  		/* stw R28, <#[R1 + 80]> */
		/* 8207E458h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 8207E458h case    1:*/		return 0x8207E45C;
		  /* 8207E45Ch */ case    2:  		/* mr R4, R31 */
		/* 8207E45Ch case    2:*/		regs.R4 = regs.R31;
		/* 8207E45Ch case    2:*/		return 0x8207E460;
		  /* 8207E460h */ case    3:  		/* mr R3, R30 */
		/* 8207E460h case    3:*/		regs.R3 = regs.R30;
		/* 8207E460h case    3:*/		return 0x8207E464;
		  /* 8207E464h */ case    4:  		/* bl -1572 */
		/* 8207E464h case    4:*/		regs.LR = 0x8207E468; return 0x8207DE40;
		/* 8207E464h case    4:*/		return 0x8207E468;
		  /* 8207E468h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207E468h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207E468h case    5:*/		return 0x8207E46C;
		  /* 8207E46Ch */ case    6:  		/* add R26, R11, R26 */
		/* 8207E46Ch case    6:*/		cpu::op::add<0>(regs,&regs.R26,regs.R11,regs.R26);
		/* 8207E46Ch case    6:*/		return 0x8207E470;
	}
	return 0x8207E470;
} // Block from 8207E454h-8207E470h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207E470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E470);
		  /* 8207E470h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 8207E470h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8207E470h case    0:*/		return 0x8207E474;
		  /* 8207E474h */ case    1:  		/* bc 4, CR6_EQ, -340 */
		/* 8207E474h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207E320;  }
		/* 8207E474h case    1:*/		return 0x8207E478;
	}
	return 0x8207E478;
} // Block from 8207E470h-8207E478h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E478);
		  /* 8207E478h */ case    0:  		/* lwz R11, <#[R30 + 412]> */
		/* 8207E478h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000019C) );
		/* 8207E478h case    0:*/		return 0x8207E47C;
		  /* 8207E47Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8207E47Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207E47Ch case    1:*/		return 0x8207E480;
		  /* 8207E480h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8207E480h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207E494;  }
		/* 8207E480h case    2:*/		return 0x8207E484;
		  /* 8207E484h */ case    3:  		/* mr R5, R27 */
		/* 8207E484h case    3:*/		regs.R5 = regs.R27;
		/* 8207E484h case    3:*/		return 0x8207E488;
		  /* 8207E488h */ case    4:  		/* mr R4, R31 */
		/* 8207E488h case    4:*/		regs.R4 = regs.R31;
		/* 8207E488h case    4:*/		return 0x8207E48C;
		  /* 8207E48Ch */ case    5:  		/* mr R3, R30 */
		/* 8207E48Ch case    5:*/		regs.R3 = regs.R30;
		/* 8207E48Ch case    5:*/		return 0x8207E490;
		  /* 8207E490h */ case    6:  		/* bl -1776 */
		/* 8207E490h case    6:*/		regs.LR = 0x8207E494; return 0x8207DDA0;
		/* 8207E490h case    6:*/		return 0x8207E494;
	}
	return 0x8207E494;
} // Block from 8207E478h-8207E494h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207E494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E494);
		  /* 8207E494h */ case    0:  		/* addi R3, R30, 432 */
		/* 8207E494h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x1B0);
		/* 8207E494h case    0:*/		return 0x8207E498;
		  /* 8207E498h */ case    1:  		/* lwz R4, <#[R30 + 484]> */
		/* 8207E498h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x000001E4) );
		/* 8207E498h case    1:*/		return 0x8207E49C;
		  /* 8207E49Ch */ case    2:  		/* bl -3404 */
		/* 8207E49Ch case    2:*/		regs.LR = 0x8207E4A0; return 0x8207D750;
		/* 8207E49Ch case    2:*/		return 0x8207E4A0;
		  /* 8207E4A0h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8207E4A0h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207E4A0h case    3:*/		return 0x8207E4A4;
		  /* 8207E4A4h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8207E4A4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8207E4B0;  }
		/* 8207E4A4h case    4:*/		return 0x8207E4A8;
		  /* 8207E4A8h */ case    5:  		/* mr R3, R31 */
		/* 8207E4A8h case    5:*/		regs.R3 = regs.R31;
		/* 8207E4A8h case    5:*/		return 0x8207E4AC;
		  /* 8207E4ACh */ case    6:  		/* bl -2588 */
		/* 8207E4ACh case    6:*/		regs.LR = 0x8207E4B0; return 0x8207DA90;
		/* 8207E4ACh case    6:*/		return 0x8207E4B0;
	}
	return 0x8207E4B0;
} // Block from 8207E494h-8207E4B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207E4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E4B0);
		  /* 8207E4B0h */ case    0:  		/* stw R28, <#[R30 + 428]> */
		/* 8207E4B0h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000001AC) );
		/* 8207E4B0h case    0:*/		return 0x8207E4B4;
		  /* 8207E4B4h */ case    1:  		/* lwz R11, <#[R20 + 4]> */
		/* 8207E4B4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 8207E4B4h case    1:*/		return 0x8207E4B8;
		  /* 8207E4B8h */ case    2:  		/* rlwinm R5, R11, 31, 25, 31 */
		/* 8207E4B8h case    2:*/		cpu::op::rlwinm<0,31,25,31>(regs,&regs.R5,regs.R11);
		/* 8207E4B8h case    2:*/		return 0x8207E4BC;
		  /* 8207E4BCh */ case    3:  		/* cmplwi CR6, R5, 16 */
		/* 8207E4BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 8207E4BCh case    3:*/		return 0x8207E4C0;
		  /* 8207E4C0h */ case    4:  		/* bc 12, CR6_LT, 20 */
		/* 8207E4C0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8207E4D4;  }
		/* 8207E4C0h case    4:*/		return 0x8207E4C4;
		  /* 8207E4C4h */ case    5:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8207E4C4h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8207E4C4h case    5:*/		return 0x8207E4C8;
		  /* 8207E4C8h */ case    6:  		/* rlwinm R11, R11, 0, 24, 30 */
		/* 8207E4C8h case    6:*/		cpu::op::rlwinm<0,0,24,30>(regs,&regs.R11,regs.R11);
		/* 8207E4C8h case    6:*/		return 0x8207E4CC;
		  /* 8207E4CCh */ case    7:  		/* cmplwi CR6, R11, 224 */
		/* 8207E4CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000E0);
		/* 8207E4CCh case    7:*/		return 0x8207E4D0;
		  /* 8207E4D0h */ case    8:  		/* bc 4, CR6_GT, 28 */
		/* 8207E4D0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8207E4EC;  }
		/* 8207E4D0h case    8:*/		return 0x8207E4D4;
	}
	return 0x8207E4D4;
} // Block from 8207E4B0h-8207E4D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207E4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E4D4);
		  /* 8207E4D4h */ case    0:  		/* mr R5, R22 */
		/* 8207E4D4h case    0:*/		regs.R5 = regs.R22;
		/* 8207E4D4h case    0:*/		return 0x8207E4D8;
		  /* 8207E4D8h */ case    1:  		/* cmplwi CR6, R22, 16 */
		/* 8207E4D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000010);
		/* 8207E4D8h case    1:*/		return 0x8207E4DC;
		  /* 8207E4DCh */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 8207E4DCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8207E4E8;  }
		/* 8207E4DCh case    2:*/		return 0x8207E4E0;
		  /* 8207E4E0h */ case    3:  		/* cmplwi CR6, R22, 112 */
		/* 8207E4E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000070);
		/* 8207E4E0h case    3:*/		return 0x8207E4E4;
		  /* 8207E4E4h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 8207E4E4h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207E4EC;  }
		/* 8207E4E4h case    4:*/		return 0x8207E4E8;
	}
	return 0x8207E4E8;
} // Block from 8207E4D4h-8207E4E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207E4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E4E8);
		  /* 8207E4E8h */ case    0:  		/* li R5, 64 */
		/* 8207E4E8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 8207E4E8h case    0:*/		return 0x8207E4EC;
	}
	return 0x8207E4EC;
} // Block from 8207E4E8h-8207E4ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E4ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E4EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E4EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E4EC);
		  /* 8207E4ECh */ case    0:  		/* mr R4, R31 */
		/* 8207E4ECh case    0:*/		regs.R4 = regs.R31;
		/* 8207E4ECh case    0:*/		return 0x8207E4F0;
		  /* 8207E4F0h */ case    1:  		/* mr R3, R30 */
		/* 8207E4F0h case    1:*/		regs.R3 = regs.R30;
		/* 8207E4F0h case    1:*/		return 0x8207E4F4;
		  /* 8207E4F4h */ case    2:  		/* bl -4036 */
		/* 8207E4F4h case    2:*/		regs.LR = 0x8207E4F8; return 0x8207D530;
		/* 8207E4F4h case    2:*/		return 0x8207E4F8;
		  /* 8207E4F8h */ case    3:  		/* lwz R11, <#[R30 + 424]> */
		/* 8207E4F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x000001A8) );
		/* 8207E4F8h case    3:*/		return 0x8207E4FC;
		  /* 8207E4FCh */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8207E4FCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207E4FCh case    4:*/		return 0x8207E500;
		  /* 8207E500h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8207E500h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207E514;  }
		/* 8207E500h case    5:*/		return 0x8207E504;
		  /* 8207E504h */ case    6:  		/* mr R3, R31 */
		/* 8207E504h case    6:*/		regs.R3 = regs.R31;
		/* 8207E504h case    6:*/		return 0x8207E508;
		  /* 8207E508h */ case    7:  		/* lwz R4, <#[R31 + 11088]> */
		/* 8207E508h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00002B50) );
		/* 8207E508h case    7:*/		return 0x8207E50C;
		  /* 8207E50Ch */ case    8:  		/* bl -48012 */
		/* 8207E50Ch case    8:*/		regs.LR = 0x8207E510; return 0x82072980;
		/* 8207E50Ch case    8:*/		return 0x8207E510;
		  /* 8207E510h */ case    9:  		/* stw R28, <#[R30 + 424]> */
		/* 8207E510h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x000001A8) );
		/* 8207E510h case    9:*/		return 0x8207E514;
	}
	return 0x8207E514;
} // Block from 8207E4ECh-8207E514h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207E514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E514);
		  /* 8207E514h */ case    0:  		/* lwz R11, <#[R31 + 24584]> */
		/* 8207E514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00006008) );
		/* 8207E514h case    0:*/		return 0x8207E518;
		  /* 8207E518h */ case    1:  		/* mr R9, R28 */
		/* 8207E518h case    1:*/		regs.R9 = regs.R28;
		/* 8207E518h case    1:*/		return 0x8207E51C;
		  /* 8207E51Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8207E51Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E51Ch case    2:*/		return 0x8207E520;
		  /* 8207E520h */ case    3:  		/* bc 4, CR6_GT, 56 */
		/* 8207E520h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8207E558;  }
		/* 8207E520h case    3:*/		return 0x8207E524;
		  /* 8207E524h */ case    4:  		/* addi R11, R31, 24508 */
		/* 8207E524h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x5FBC);
		/* 8207E524h case    4:*/		return 0x8207E528;
		  /* 8207E528h */ case    5:  		/* mr R10, R21 */
		/* 8207E528h case    5:*/		regs.R10 = regs.R21;
		/* 8207E528h case    5:*/		return 0x8207E52C;
		  /* 8207E52Ch */ case    6:  		/* lwz R8, <#[R10]> */
		/* 8207E52Ch case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8207E52Ch case    6:*/		return 0x8207E530;
		  /* 8207E530h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 8207E530h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8207E530h case    7:*/		return 0x8207E534;
		  /* 8207E534h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E534h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207E540;  }
		/* 8207E534h case    8:*/		return 0x8207E538;
		  /* 8207E538h */ case    9:  		/* lwz R8, <#[R11 - 8]> */
		/* 8207E538h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 8207E538h case    9:*/		return 0x8207E53C;
		  /* 8207E53Ch */ case   10:  		/* stw R8, <#[R11]> */
		/* 8207E53Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8207E53Ch case   10:*/		return 0x8207E540;
	}
	return 0x8207E540;
} // Block from 8207E514h-8207E540h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207E540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E540);
		  /* 8207E540h */ case    0:  		/* lwz R8, <#[R31 + 24584]> */
		/* 8207E540h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00006008) );
		/* 8207E540h case    0:*/		return 0x8207E544;
		  /* 8207E544h */ case    1:  		/* addi R9, R9, 1 */
		/* 8207E544h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8207E544h case    1:*/		return 0x8207E548;
		  /* 8207E548h */ case    2:  		/* addi R10, R10, 4 */
		/* 8207E548h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8207E548h case    2:*/		return 0x8207E54C;
		  /* 8207E54Ch */ case    3:  		/* addi R11, R11, 36 */
		/* 8207E54Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8207E54Ch case    3:*/		return 0x8207E550;
		  /* 8207E550h */ case    4:  		/* cmplw CR6, R9, R8 */
		/* 8207E550h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 8207E550h case    4:*/		return 0x8207E554;
		  /* 8207E554h */ case    5:  		/* bc 12, CR6_LT, -40 */
		/* 8207E554h case    5:*/		if ( regs.CR[6].lt ) { return 0x8207E52C;  }
		/* 8207E554h case    5:*/		return 0x8207E558;
	}
	return 0x8207E558;
} // Block from 8207E540h-8207E558h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E558);
		  /* 8207E558h */ case    0:  		/* lwz R11, <#[R31 + 11024]> */
		/* 8207E558h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207E558h case    0:*/		return 0x8207E55C;
		  /* 8207E55Ch */ case    1:  		/* lwz R11, <#[R11 + 100]> */
		/* 8207E55Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000064) );
		/* 8207E55Ch case    1:*/		return 0x8207E560;
		  /* 8207E560h */ case    2:  		/* lwsync */
		/* 8207E560h case    2:*/		cpu::op::lwsync<0>(regs);
		/* 8207E560h case    2:*/		return 0x8207E564;
		  /* 8207E564h */ case    3:  		/* addi R11, R31, 24592 */
		/* 8207E564h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x6010);
		/* 8207E564h case    3:*/		return 0x8207E568;
		  /* 8207E568h */ case    4:  		/* mfmsr R9, MSR */
		/* 8207E568h case    4:*/		regs.R9 = regs.MSR;
		/* 8207E568h case    4:*/		return 0x8207E56C;
		  /* 8207E56Ch */ case    5:  		/* mtmsrd MSR, R13 */
		/* 8207E56Ch case    5:*/		regs.MSR = regs.R13;
		/* 8207E56Ch case    5:*/		return 0x8207E570;
		  /* 8207E570h */ case    6:  		/* lwarx R10, <#[R11]> */
		/* 8207E570h case    6:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207E570h case    6:*/		return 0x8207E574;
		  /* 8207E574h */ case    7:  		/* addi R10, R10, -1 */
		/* 8207E574h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207E574h case    7:*/		return 0x8207E578;
		  /* 8207E578h */ case    8:  		/* stwcx. R10, <#[R11]> */
		/* 8207E578h case    8:*/		cpu::mem::stwcx( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207E578h case    8:*/		return 0x8207E57C;
		  /* 8207E57Ch */ case    9:  		/* mtmsrd MSR, R9 */
		/* 8207E57Ch case    9:*/		regs.MSR = regs.R9;
		/* 8207E57Ch case    9:*/		return 0x8207E580;
		  /* 8207E580h */ case   10:  		/* bc 4, CR0_EQ, -24 */
		/* 8207E580h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8207E568;  }
		/* 8207E580h case   10:*/		return 0x8207E584;
		  /* 8207E584h */ case   11:  		/* addi R3, R20, 16 */
		/* 8207E584h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R20,0x10);
		/* 8207E584h case   11:*/		return 0x8207E588;
		  /* 8207E588h */ case   12:  		/* addi R1, R1, 208 */
		/* 8207E588h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8207E588h case   12:*/		return 0x8207E58C;
		  /* 8207E58Ch */ case   13:  		/* b 77052 */
		/* 8207E58Ch case   13:*/		return 0x82091288;
		/* 8207E58Ch case   13:*/		return 0x8207E590;
		  /* 8207E590h */ case   14:  		/* lwz R11, <#[R3 + 24400]> */
		/* 8207E590h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F50) );
		/* 8207E590h case   14:*/		return 0x8207E594;
		  /* 8207E594h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8207E594h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E594h case   15:*/		return 0x8207E598;
		  /* 8207E598h */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 8207E598h case   16:*/		if ( regs.CR[6].eq ) { return 0x8207E5B4;  }
		/* 8207E598h case   16:*/		return 0x8207E59C;
		  /* 8207E59Ch */ case   17:  		/* li R11, 1 */
		/* 8207E59Ch case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E59Ch case   17:*/		return 0x8207E5A0;
		  /* 8207E5A0h */ case   18:  		/* stw R11, <#[R3 + 24396]> */
		/* 8207E5A0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00005F4C) );
		/* 8207E5A0h case   18:*/		return 0x8207E5A4;
		  /* 8207E5A4h */ case   19:  		/* lwsync */
		/* 8207E5A4h case   19:*/		cpu::op::lwsync<0>(regs);
		/* 8207E5A4h case   19:*/		return 0x8207E5A8;
		  /* 8207E5A8h */ case   20:  		/* lwz R10, <#[R3 + 24400]> */
		/* 8207E5A8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00005F50) );
		/* 8207E5A8h case   20:*/		return 0x8207E5AC;
		  /* 8207E5ACh */ case   21:  		/* li R11, -1 */
		/* 8207E5ACh case   21:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207E5ACh case   21:*/		return 0x8207E5B0;
		  /* 8207E5B0h */ case   22:  		/* std R11, <#[R10 + 544]> */
		/* 8207E5B0h case   22:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000220) );
		/* 8207E5B0h case   22:*/		return 0x8207E5B4;
	}
	return 0x8207E5B4;
} // Block from 8207E558h-8207E5B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8207E5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E5B4);
		  /* 8207E5B4h */ case    0:  		/* lwz R11, <#[R3 + 24424]> */
		/* 8207E5B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F68) );
		/* 8207E5B4h case    0:*/		return 0x8207E5B8;
		  /* 8207E5B8h */ case    1:  		/* li R8, -1 */
		/* 8207E5B8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 8207E5B8h case    1:*/		return 0x8207E5BC;
		  /* 8207E5BCh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8207E5BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E5BCh case    2:*/		return 0x8207E5C0;
		  /* 8207E5C0h */ case    3:  		/* bc 12, CR6_EQ, 112 */
		/* 8207E5C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E630;  }
		/* 8207E5C0h case    3:*/		return 0x8207E5C4;
		  /* 8207E5C4h */ case    4:  		/* li R9, 63 */
		/* 8207E5C4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x3F);
		/* 8207E5C4h case    4:*/		return 0x8207E5C8;
		  /* 8207E5C8h */ case    5:  		/* li R10, 0 */
		/* 8207E5C8h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207E5C8h case    5:*/		return 0x8207E5CC;
		  /* 8207E5CCh */ case    6:  		/* li R11, 0 */
		/* 8207E5CCh case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E5CCh case    6:*/		return 0x8207E5D0;
		  /* 8207E5D0h */ case    7:  		/* mtspr CTR, R9 */
		/* 8207E5D0h case    7:*/		regs.CTR = regs.R9;
		/* 8207E5D0h case    7:*/		return 0x8207E5D4;
		  /* 8207E5D4h */ case    8:  		/* lwz R9, <#[R3 + 24432]> */
		/* 8207E5D4h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00005F70) );
		/* 8207E5D4h case    8:*/		return 0x8207E5D8;
		  /* 8207E5D8h */ case    9:  		/* lis R7, 3 */
		/* 8207E5D8h case    9:*/		cpu::op::lis<0>(regs,&regs.R7,0x3);
		/* 8207E5D8h case    9:*/		return 0x8207E5DC;
		  /* 8207E5DCh */ case   10:  		/* lwz R6, <#[R3 + 24424]> */
		/* 8207E5DCh case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R3 + 0x00005F68) );
		/* 8207E5DCh case   10:*/		return 0x8207E5E0;
		  /* 8207E5E0h */ case   11:  		/* add R9, R9, R11 */
		/* 8207E5E0h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8207E5E0h case   11:*/		return 0x8207E5E4;
		  /* 8207E5E4h */ case   12:  		/* addi R11, R11, 20 */
		/* 8207E5E4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x14);
		/* 8207E5E4h case   12:*/		return 0x8207E5E8;
		  /* 8207E5E8h */ case   13:  		/* lwz R9, <#[R9 + 4]> */
		/* 8207E5E8h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8207E5E8h case   13:*/		return 0x8207E5EC;
		  /* 8207E5ECh */ case   14:  		/* mullw R9, R9, R7 */
		/* 8207E5ECh case   14:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8207E5ECh case   14:*/		return 0x8207E5F0;
		  /* 8207E5F0h */ case   15:  		/* addis R9, R9, 1 */
		/* 8207E5F0h case   15:*/		cpu::op::addis<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8207E5F0h case   15:*/		return 0x8207E5F4;
		  /* 8207E5F4h */ case   16:  		/* oris R9, R9, 49152 */
		/* 8207E5F4h case   16:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xC000);
		/* 8207E5F4h case   16:*/		return 0x8207E5F8;
		  /* 8207E5F8h */ case   17:  		/* ori R9, R9, 4096 */
		/* 8207E5F8h case   17:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1000);
		/* 8207E5F8h case   17:*/		return 0x8207E5FC;
		  /* 8207E5FCh */ case   18:  		/* stwx R9, <#[R10 + R6]> */
		/* 8207E5FCh case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8207E5FCh case   18:*/		return 0x8207E600;
		  /* 8207E600h */ case   19:  		/* addi R10, R10, 128 */
		/* 8207E600h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x80);
		/* 8207E600h case   19:*/		return 0x8207E604;
		  /* 8207E604h */ case   20:  		/* bc 16, CR0_LT, -48 */
		/* 8207E604h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207E5D4;  }
		/* 8207E604h case   20:*/		return 0x8207E608;
		  /* 8207E608h */ case   21:  		/* sync */
		/* 8207E608h case   21:*/		cpu::op::sync<0>(regs);
		/* 8207E608h case   21:*/		return 0x8207E60C;
		  /* 8207E60Ch */ case   22:  		/* li R10, 63 */
		/* 8207E60Ch case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x3F);
		/* 8207E60Ch case   22:*/		return 0x8207E610;
		  /* 8207E610h */ case   23:  		/* li R11, 0 */
		/* 8207E610h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E610h case   23:*/		return 0x8207E614;
		  /* 8207E614h */ case   24:  		/* mtspr CTR, R10 */
		/* 8207E614h case   24:*/		regs.CTR = regs.R10;
		/* 8207E614h case   24:*/		return 0x8207E618;
		  /* 8207E618h */ case   25:  		/* lwz R10, <#[R3 + 24424]> */
		/* 8207E618h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00005F68) );
		/* 8207E618h case   25:*/		return 0x8207E61C;
		  /* 8207E61Ch */ case   26:  		/* add R10, R11, R10 */
		/* 8207E61Ch case   26:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8207E61Ch case   26:*/		return 0x8207E620;
		  /* 8207E620h */ case   27:  		/* addi R11, R11, 128 */
		/* 8207E620h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8207E620h case   27:*/		return 0x8207E624;
		  /* 8207E624h */ case   28:  		/* stw R8, <#[R10 + 108]> */
		/* 8207E624h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x0000006C) );
		/* 8207E624h case   28:*/		return 0x8207E628;
		  /* 8207E628h */ case   29:  		/* bc 16, CR0_LT, -16 */
		/* 8207E628h case   29:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207E618;  }
		/* 8207E628h case   29:*/		return 0x8207E62C;
		  /* 8207E62Ch */ case   30:  		/* sync */
		/* 8207E62Ch case   30:*/		cpu::op::sync<0>(regs);
		/* 8207E62Ch case   30:*/		return 0x8207E630;
	}
	return 0x8207E630;
} // Block from 8207E5B4h-8207E630h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8207E630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E630);
		  /* 8207E630h */ case    0:  		/* ld R11, <#[R3 + 24440]> */
		/* 8207E630h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F78) );
		/* 8207E630h case    0:*/		return 0x8207E634;
		  /* 8207E634h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 8207E634h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 8207E634h case    1:*/		return 0x8207E638;
		  /* 8207E638h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 8207E638h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8207E638h case    2:*/		return 0x8207E63C;
	}
	return 0x8207E63C;
} // Block from 8207E630h-8207E63Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207E63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E63C);
		  /* 8207E63Ch */ case    0:  		/* sync */
		/* 8207E63Ch case    0:*/		cpu::op::sync<0>(regs);
		/* 8207E63Ch case    0:*/		return 0x8207E640;
		  /* 8207E640h */ case    1:  		/* li R10, 64 */
		/* 8207E640h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 8207E640h case    1:*/		return 0x8207E644;
		  /* 8207E644h */ case    2:  		/* li R11, 0 */
		/* 8207E644h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207E644h case    2:*/		return 0x8207E648;
		  /* 8207E648h */ case    3:  		/* mtspr CTR, R10 */
		/* 8207E648h case    3:*/		regs.CTR = regs.R10;
		/* 8207E648h case    3:*/		return 0x8207E64C;
		  /* 8207E64Ch */ case    4:  		/* lwz R10, <#[R3 + 24448]> */
		/* 8207E64Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00005F80) );
		/* 8207E64Ch case    4:*/		return 0x8207E650;
		  /* 8207E650h */ case    5:  		/* stwx R8, <#[R11 + R10]> */
		/* 8207E650h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207E650h case    5:*/		return 0x8207E654;
		  /* 8207E654h */ case    6:  		/* addi R11, R11, 4 */
		/* 8207E654h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207E654h case    6:*/		return 0x8207E658;
		  /* 8207E658h */ case    7:  		/* bc 16, CR0_LT, -12 */
		/* 8207E658h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207E64C;  }
		/* 8207E658h case    7:*/		return 0x8207E65C;
		  /* 8207E65Ch */ case    8:  		/* sync */
		/* 8207E65Ch case    8:*/		cpu::op::sync<0>(regs);
		/* 8207E65Ch case    8:*/		return 0x8207E660;
		  /* 8207E660h */ case    9:  		/* bclr 20, CR0_LT */
		/* 8207E660h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207E660h case    9:*/		return 0x8207E664;
	}
	return 0x8207E664;
} // Block from 8207E63Ch-8207E664h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207E664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E664);
		  /* 8207E664h */ case    0:  		/* nop */
		/* 8207E664h case    0:*/		cpu::op::nop();
		/* 8207E664h case    0:*/		return 0x8207E668;
	}
	return 0x8207E668;
} // Block from 8207E664h-8207E668h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E668);
		  /* 8207E668h */ case    0:  		/* mfspr R12, LR */
		/* 8207E668h case    0:*/		regs.R12 = regs.LR;
		/* 8207E668h case    0:*/		return 0x8207E66C;
		  /* 8207E66Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207E66Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207E66Ch case    1:*/		return 0x8207E670;
		  /* 8207E670h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207E670h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207E670h case    2:*/		return 0x8207E674;
		  /* 8207E674h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207E674h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207E674h case    3:*/		return 0x8207E678;
		  /* 8207E678h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207E678h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207E678h case    4:*/		return 0x8207E67C;
		  /* 8207E67Ch */ case    5:  		/* lis R11, -32256 */
		/* 8207E67Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207E67Ch case    5:*/		return 0x8207E680;
		  /* 8207E680h */ case    6:  		/* mr R30, R3 */
		/* 8207E680h case    6:*/		regs.R30 = regs.R3;
		/* 8207E680h case    6:*/		return 0x8207E684;
		  /* 8207E684h */ case    7:  		/* addi R3, R11, 9592 */
		/* 8207E684h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x2578);
		/* 8207E684h case    7:*/		return 0x8207E688;
		  /* 8207E688h */ case    8:  		/* bl 41000 */
		/* 8207E688h case    8:*/		regs.LR = 0x8207E68C; return 0x820886B0;
		/* 8207E688h case    8:*/		return 0x8207E68C;
		  /* 8207E68Ch */ case    9:  		/* mr R31, R3 */
		/* 8207E68Ch case    9:*/		regs.R31 = regs.R3;
		/* 8207E68Ch case    9:*/		return 0x8207E690;
		  /* 8207E690h */ case   10:  		/* cmpwi CR6, R3, -1 */
		/* 8207E690h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8207E690h case   10:*/		return 0x8207E694;
		  /* 8207E694h */ case   11:  		/* bc 12, CR6_EQ, 60 */
		/* 8207E694h case   11:*/		if ( regs.CR[6].eq ) { return 0x8207E6D0;  }
		/* 8207E694h case   11:*/		return 0x8207E698;
		  /* 8207E698h */ case   12:  		/* li R4, 873 */
		/* 8207E698h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x369);
		/* 8207E698h case   12:*/		return 0x8207E69C;
		  /* 8207E69Ch */ case   13:  		/* bl 40868 */
		/* 8207E69Ch case   13:*/		regs.LR = 0x8207E6A0; return 0x82088640;
		/* 8207E69Ch case   13:*/		return 0x8207E6A0;
		  /* 8207E6A0h */ case   14:  		/* or. R11, R3, R3 */
		/* 8207E6A0h case   14:*/		cpu::op::or<1>(regs,&regs.R11,regs.R3,regs.R3);
		/* 8207E6A0h case   14:*/		return 0x8207E6A4;
		  /* 8207E6A4h */ case   15:  		/* bc 12, CR0_EQ, 36 */
		/* 8207E6A4h case   15:*/		if ( regs.CR[0].eq ) { return 0x8207E6C8;  }
		/* 8207E6A4h case   15:*/		return 0x8207E6A8;
		  /* 8207E6A8h */ case   16:  		/* mr R3, R30 */
		/* 8207E6A8h case   16:*/		regs.R3 = regs.R30;
		/* 8207E6A8h case   16:*/		return 0x8207E6AC;
		  /* 8207E6ACh */ case   17:  		/* mtspr CTR, R11 */
		/* 8207E6ACh case   17:*/		regs.CTR = regs.R11;
		/* 8207E6ACh case   17:*/		return 0x8207E6B0;
		  /* 8207E6B0h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8207E6B0h case   18:*/		if ( 1 ) { regs.LR = 0x8207E6B4; return (uint32)regs.CTR; }
		/* 8207E6B0h case   18:*/		return 0x8207E6B4;
		  /* 8207E6B4h */ case   19:  		/* mr R30, R3 */
		/* 8207E6B4h case   19:*/		regs.R30 = regs.R3;
		/* 8207E6B4h case   19:*/		return 0x8207E6B8;
		  /* 8207E6B8h */ case   20:  		/* mr R3, R31 */
		/* 8207E6B8h case   20:*/		regs.R3 = regs.R31;
		/* 8207E6B8h case   20:*/		return 0x8207E6BC;
		  /* 8207E6BCh */ case   21:  		/* bl 40780 */
		/* 8207E6BCh case   21:*/		regs.LR = 0x8207E6C0; return 0x82088608;
		/* 8207E6BCh case   21:*/		return 0x8207E6C0;
		  /* 8207E6C0h */ case   22:  		/* mr R3, R30 */
		/* 8207E6C0h case   22:*/		regs.R3 = regs.R30;
		/* 8207E6C0h case   22:*/		return 0x8207E6C4;
		  /* 8207E6C4h */ case   23:  		/* b 20 */
		/* 8207E6C4h case   23:*/		return 0x8207E6D8;
		/* 8207E6C4h case   23:*/		return 0x8207E6C8;
	}
	return 0x8207E6C8;
} // Block from 8207E668h-8207E6C8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207E6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E6C8);
		  /* 8207E6C8h */ case    0:  		/* mr R3, R31 */
		/* 8207E6C8h case    0:*/		regs.R3 = regs.R31;
		/* 8207E6C8h case    0:*/		return 0x8207E6CC;
		  /* 8207E6CCh */ case    1:  		/* bl 40764 */
		/* 8207E6CCh case    1:*/		regs.LR = 0x8207E6D0; return 0x82088608;
		/* 8207E6CCh case    1:*/		return 0x8207E6D0;
	}
	return 0x8207E6D0;
} // Block from 8207E6C8h-8207E6D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E6D0);
		  /* 8207E6D0h */ case    0:  		/* cntlzw R11, R30 */
		/* 8207E6D0h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R30);
		/* 8207E6D0h case    0:*/		return 0x8207E6D4;
		  /* 8207E6D4h */ case    1:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8207E6D4h case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8207E6D4h case    1:*/		return 0x8207E6D8;
	}
	return 0x8207E6D8;
} // Block from 8207E6D0h-8207E6D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E6D8);
		  /* 8207E6D8h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207E6D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207E6D8h case    0:*/		return 0x8207E6DC;
		  /* 8207E6DCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207E6DCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207E6DCh case    1:*/		return 0x8207E6E0;
		  /* 8207E6E0h */ case    2:  		/* mtspr LR, R12 */
		/* 8207E6E0h case    2:*/		regs.LR = regs.R12;
		/* 8207E6E0h case    2:*/		return 0x8207E6E4;
		  /* 8207E6E4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207E6E4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207E6E4h case    3:*/		return 0x8207E6E8;
		  /* 8207E6E8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207E6E8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207E6E8h case    4:*/		return 0x8207E6EC;
		  /* 8207E6ECh */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207E6ECh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207E6ECh case    5:*/		return 0x8207E6F0;
	}
	return 0x8207E6F0;
} // Block from 8207E6D8h-8207E6F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E6F0);
		  /* 8207E6F0h */ case    0:  		/* lis R11, 32712 */
		/* 8207E6F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FC8);
		/* 8207E6F0h case    0:*/		return 0x8207E6F4;
		  /* 8207E6F4h */ case    1:  		/* li R10, 7 */
		/* 8207E6F4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 8207E6F4h case    1:*/		return 0x8207E6F8;
		  /* 8207E6F8h */ case    2:  		/* stw R10, <#[R11 + 12820]> */
		/* 8207E6F8h case    2:*/		regs.IO->MEM_WRITE( 0x8207E6F8, (uint32)(regs.R11 + 0x00003214), 4, &regs.R10 );
		/* 8207E6F8h case    2:*/		return 0x8207E6FC;
		  /* 8207E6FCh */ case    3:  		/* eieio */
		/* 8207E6FCh case    3:*/		cpu::op::eieio<0>(regs);
		/* 8207E6FCh case    3:*/		return 0x8207E700;
		  /* 8207E700h */ case    4:  		/* li R10, 2048 */
		/* 8207E700h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x800);
		/* 8207E700h case    4:*/		return 0x8207E704;
		  /* 8207E704h */ case    5:  		/* stw R10, <#[R11 + 13320]> */
		/* 8207E704h case    5:*/		regs.IO->MEM_WRITE( 0x8207E704, (uint32)(regs.R11 + 0x00003408), 4, &regs.R10 );
		/* 8207E704h case    5:*/		return 0x8207E708;
		  /* 8207E708h */ case    6:  		/* eieio */
		/* 8207E708h case    6:*/		cpu::op::eieio<0>(regs);
		/* 8207E708h case    6:*/		return 0x8207E70C;
		  /* 8207E70Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207E70Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207E70Ch case    7:*/		return 0x8207E710;
	}
	return 0x8207E710;
} // Block from 8207E6F0h-8207E710h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207E710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E710);
		  /* 8207E710h */ case    0:  		/* mfspr R12, LR */
		/* 8207E710h case    0:*/		regs.R12 = regs.LR;
		/* 8207E710h case    0:*/		return 0x8207E714;
		  /* 8207E714h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207E714h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207E714h case    1:*/		return 0x8207E718;
		  /* 8207E718h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207E718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207E718h case    2:*/		return 0x8207E71C;
		  /* 8207E71Ch */ case    3:  		/* li R4, 0 */
		/* 8207E71Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207E71Ch case    3:*/		return 0x8207E720;
		  /* 8207E720h */ case    4:  		/* bl 2026008 */
		/* 8207E720h case    4:*/		regs.LR = 0x8207E724; return 0x8226D138;
		/* 8207E720h case    4:*/		return 0x8207E724;
		  /* 8207E724h */ case    5:  		/* lis R11, -32256 */
		/* 8207E724h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207E724h case    5:*/		return 0x8207E728;
		  /* 8207E728h */ case    6:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207E728h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207E728h case    6:*/		return 0x8207E72C;
		  /* 8207E72Ch */ case    7:  		/* lwz R3, <#[R11]> */
		/* 8207E72Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8207E72Ch case    7:*/		return 0x8207E730;
		  /* 8207E730h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8207E730h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207E730h case    8:*/		return 0x8207E734;
		  /* 8207E734h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8207E734h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207E73C;  }
		/* 8207E734h case    9:*/		return 0x8207E738;
		  /* 8207E738h */ case   10:  		/* bl -424 */
		/* 8207E738h case   10:*/		regs.LR = 0x8207E73C; return 0x8207E590;
		/* 8207E738h case   10:*/		return 0x8207E73C;
	}
	return 0x8207E73C;
} // Block from 8207E710h-8207E73Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207E73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E73C);
		  /* 8207E73Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8207E73Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207E73Ch case    0:*/		return 0x8207E740;
		  /* 8207E740h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207E740h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207E740h case    1:*/		return 0x8207E744;
		  /* 8207E744h */ case    2:  		/* mtspr LR, R12 */
		/* 8207E744h case    2:*/		regs.LR = regs.R12;
		/* 8207E744h case    2:*/		return 0x8207E748;
		  /* 8207E748h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8207E748h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207E748h case    3:*/		return 0x8207E74C;
	}
	return 0x8207E74C;
} // Block from 8207E73Ch-8207E74Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207E74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E74C);
		  /* 8207E74Ch */ case    0:  		/* nop */
		/* 8207E74Ch case    0:*/		cpu::op::nop();
		/* 8207E74Ch case    0:*/		return 0x8207E750;
	}
	return 0x8207E750;
} // Block from 8207E74Ch-8207E750h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E750);
		  /* 8207E750h */ case    0:  		/* mfspr R12, LR */
		/* 8207E750h case    0:*/		regs.R12 = regs.LR;
		/* 8207E750h case    0:*/		return 0x8207E754;
		  /* 8207E754h */ case    1:  		/* bl 76528 */
		/* 8207E754h case    1:*/		regs.LR = 0x8207E758; return 0x82091244;
		/* 8207E754h case    1:*/		return 0x8207E758;
		  /* 8207E758h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8207E758h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8207E758h case    2:*/		return 0x8207E75C;
		  /* 8207E75Ch */ case    3:  		/* lis R11, -32217 */
		/* 8207E75Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207E75Ch case    3:*/		return 0x8207E760;
		  /* 8207E760h */ case    4:  		/* lwz R25, <#[R3 + 14000]> */
		/* 8207E760h case    4:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x000036B0) );
		/* 8207E760h case    4:*/		return 0x8207E764;
		  /* 8207E764h */ case    5:  		/* li R23, 0 */
		/* 8207E764h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8207E764h case    5:*/		return 0x8207E768;
		  /* 8207E768h */ case    6:  		/* lwz R24, <#[R3 + 24392]> */
		/* 8207E768h case    6:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x00005F48) );
		/* 8207E768h case    6:*/		return 0x8207E76C;
		  /* 8207E76Ch */ case    7:  		/* mr R31, R3 */
		/* 8207E76Ch case    7:*/		regs.R31 = regs.R3;
		/* 8207E76Ch case    7:*/		return 0x8207E770;
		  /* 8207E770h */ case    8:  		/* addi R29, R11, 112 */
		/* 8207E770h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x70);
		/* 8207E770h case    8:*/		return 0x8207E774;
		  /* 8207E774h */ case    9:  		/* mr R30, R23 */
		/* 8207E774h case    9:*/		regs.R30 = regs.R23;
		/* 8207E774h case    9:*/		return 0x8207E778;
		  /* 8207E778h */ case   10:  		/* rlwinm R11, R30, 30, 2, 31 */
		/* 8207E778h case   10:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R30);
		/* 8207E778h case   10:*/		return 0x8207E77C;
		  /* 8207E77Ch */ case   11:  		/* lwz R10, <#[R29 + 4]> */
		/* 8207E77Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 8207E77Ch case   11:*/		return 0x8207E780;
		  /* 8207E780h */ case   12:  		/* add R9, R30, R31 */
		/* 8207E780h case   12:*/		cpu::op::add<0>(regs,&regs.R9,regs.R30,regs.R31);
		/* 8207E780h case   12:*/		return 0x8207E784;
		  /* 8207E784h */ case   13:  		/* addi R8, R11, 16 */
		/* 8207E784h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x10);
		/* 8207E784h case   13:*/		return 0x8207E788;
		  /* 8207E788h */ case   14:  		/* addi R11, R11, 137 */
		/* 8207E788h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x89);
		/* 8207E788h case   14:*/		return 0x8207E78C;
		  /* 8207E78Ch */ case   15:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8207E78Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8207E78Ch case   15:*/		return 0x8207E790;
		  /* 8207E790h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207E790h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207E790h case   16:*/		return 0x8207E794;
		  /* 8207E794h */ case   17:  		/* mr R3, R31 */
		/* 8207E794h case   17:*/		regs.R3 = regs.R31;
		/* 8207E794h case   17:*/		return 0x8207E798;
		  /* 8207E798h */ case   18:  		/* stwx R10, <#[R8 + R31]> */
		/* 8207E798h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 8207E798h case   18:*/		return 0x8207E79C;
		  /* 8207E79Ch */ case   19:  		/* lwz R10, <#[R29]> */
		/* 8207E79Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8207E79Ch case   19:*/		return 0x8207E7A0;
		  /* 8207E7A0h */ case   20:  		/* stwx R10, <#[R11 + R31]> */
		/* 8207E7A0h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8207E7A0h case   20:*/		return 0x8207E7A4;
		  /* 8207E7A4h */ case   21:  		/* lwz R4, <#[R29 + 8]> */
		/* 8207E7A4h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000008) );
		/* 8207E7A4h case   21:*/		return 0x8207E7A8;
		  /* 8207E7A8h */ case   22:  		/* lwz R11, <#[R9 + 64]> */
		/* 8207E7A8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000040) );
		/* 8207E7A8h case   22:*/		return 0x8207E7AC;
		  /* 8207E7ACh */ case   23:  		/* mtspr CTR, R11 */
		/* 8207E7ACh case   23:*/		regs.CTR = regs.R11;
		/* 8207E7ACh case   23:*/		return 0x8207E7B0;
		  /* 8207E7B0h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 8207E7B0h case   24:*/		if ( 1 ) { regs.LR = 0x8207E7B4; return (uint32)regs.CTR; }
		/* 8207E7B0h case   24:*/		return 0x8207E7B4;
		  /* 8207E7B4h */ case   25:  		/* addi R30, R30, 4 */
		/* 8207E7B4h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8207E7B4h case   25:*/		return 0x8207E7B8;
		  /* 8207E7B8h */ case   26:  		/* addi R29, R29, 12 */
		/* 8207E7B8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xC);
		/* 8207E7B8h case   26:*/		return 0x8207E7BC;
		  /* 8207E7BCh */ case   27:  		/* cmplwi CR6, R30, 404 */
		/* 8207E7BCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000194);
		/* 8207E7BCh case   27:*/		return 0x8207E7C0;
		  /* 8207E7C0h */ case   28:  		/* bc 12, CR6_LT, -72 */
		/* 8207E7C0h case   28:*/		if ( regs.CR[6].lt ) { return 0x8207E778;  }
		/* 8207E7C0h case   28:*/		return 0x8207E7C4;
		  /* 8207E7C4h */ case   29:  		/* lis R11, -32217 */
		/* 8207E7C4h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207E7C4h case   29:*/		return 0x8207E7C8;
		  /* 8207E7C8h */ case   30:  		/* mr R28, R23 */
		/* 8207E7C8h case   30:*/		regs.R28 = regs.R23;
		/* 8207E7C8h case   30:*/		return 0x8207E7CC;
		  /* 8207E7CCh */ case   31:  		/* addi R27, R31, 1152 */
		/* 8207E7CCh case   31:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x480);
		/* 8207E7CCh case   31:*/		return 0x8207E7D0;
		  /* 8207E7D0h */ case   32:  		/* addi R26, R11, 1328 */
		/* 8207E7D0h case   32:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x530);
		/* 8207E7D0h case   32:*/		return 0x8207E7D4;
		  /* 8207E7D4h */ case   33:  		/* mr R30, R23 */
		/* 8207E7D4h case   33:*/		regs.R30 = regs.R23;
		/* 8207E7D4h case   33:*/		return 0x8207E7D8;
		  /* 8207E7D8h */ case   34:  		/* addi R29, R26, 8 */
		/* 8207E7D8h case   34:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R26,0x8);
		/* 8207E7D8h case   34:*/		return 0x8207E7DC;
		  /* 8207E7DCh */ case   35:  		/* rlwinm R11, R30, 30, 2, 31 */
		/* 8207E7DCh case   35:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R30);
		/* 8207E7DCh case   35:*/		return 0x8207E7E0;
		  /* 8207E7E0h */ case   36:  		/* lwz R10, <#[R29 - 4]> */
		/* 8207E7E0h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFFC) );
		/* 8207E7E0h case   36:*/		return 0x8207E7E4;
		  /* 8207E7E4h */ case   37:  		/* add R9, R30, R31 */
		/* 8207E7E4h case   37:*/		cpu::op::add<0>(regs,&regs.R9,regs.R30,regs.R31);
		/* 8207E7E4h case   37:*/		return 0x8207E7E8;
		  /* 8207E7E8h */ case   38:  		/* addi R8, R11, 117 */
		/* 8207E7E8h case   38:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x75);
		/* 8207E7E8h case   38:*/		return 0x8207E7EC;
		  /* 8207E7ECh */ case   39:  		/* addi R11, R11, 238 */
		/* 8207E7ECh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xEE);
		/* 8207E7ECh case   39:*/		return 0x8207E7F0;
		  /* 8207E7F0h */ case   40:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 8207E7F0h case   40:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 8207E7F0h case   40:*/		return 0x8207E7F4;
		  /* 8207E7F4h */ case   41:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207E7F4h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207E7F4h case   41:*/		return 0x8207E7F8;
		  /* 8207E7F8h */ case   42:  		/* mr R4, R28 */
		/* 8207E7F8h case   42:*/		regs.R4 = regs.R28;
		/* 8207E7F8h case   42:*/		return 0x8207E7FC;
		  /* 8207E7FCh */ case   43:  		/* mr R3, R31 */
		/* 8207E7FCh case   43:*/		regs.R3 = regs.R31;
		/* 8207E7FCh case   43:*/		return 0x8207E800;
		  /* 8207E800h */ case   44:  		/* stwx R10, <#[R8 + R31]> */
		/* 8207E800h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 8207E800h case   44:*/		return 0x8207E804;
		  /* 8207E804h */ case   45:  		/* lwz R10, <#[R29 - 8]> */
		/* 8207E804h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0xFFFFFFF8) );
		/* 8207E804h case   45:*/		return 0x8207E808;
		  /* 8207E808h */ case   46:  		/* stwx R10, <#[R11 + R31]> */
		/* 8207E808h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8207E808h case   46:*/		return 0x8207E80C;
		  /* 8207E80Ch */ case   47:  		/* lwz R5, <#[R29]> */
		/* 8207E80Ch case   47:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000000) );
		/* 8207E80Ch case   47:*/		return 0x8207E810;
		  /* 8207E810h */ case   48:  		/* lwz R11, <#[R9 + 468]> */
		/* 8207E810h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x000001D4) );
		/* 8207E810h case   48:*/		return 0x8207E814;
		  /* 8207E814h */ case   49:  		/* mtspr CTR, R11 */
		/* 8207E814h case   49:*/		regs.CTR = regs.R11;
		/* 8207E814h case   49:*/		return 0x8207E818;
		  /* 8207E818h */ case   50:  		/* bcctrl 20, CR0_LT */
		/* 8207E818h case   50:*/		if ( 1 ) { regs.LR = 0x8207E81C; return (uint32)regs.CTR; }
		/* 8207E818h case   50:*/		return 0x8207E81C;
		  /* 8207E81Ch */ case   51:  		/* addi R30, R30, 4 */
		/* 8207E81Ch case   51:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8207E81Ch case   51:*/		return 0x8207E820;
		  /* 8207E820h */ case   52:  		/* addi R29, R29, 12 */
		/* 8207E820h case   52:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xC);
		/* 8207E820h case   52:*/		return 0x8207E824;
		  /* 8207E824h */ case   53:  		/* cmplwi CR6, R30, 80 */
		/* 8207E824h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000050);
		/* 8207E824h case   53:*/		return 0x8207E828;
		  /* 8207E828h */ case   54:  		/* bc 12, CR6_LT, -76 */
		/* 8207E828h case   54:*/		if ( regs.CR[6].lt ) { return 0x8207E7DC;  }
		/* 8207E828h case   54:*/		return 0x8207E82C;
		  /* 8207E82Ch */ case   55:  		/* addi R11, R28, 32 */
		/* 8207E82Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x20);
		/* 8207E82Ch case   55:*/		return 0x8207E830;
		  /* 8207E830h */ case   56:  		/* li R10, 1 */
		/* 8207E830h case   56:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207E830h case   56:*/		return 0x8207E834;
		  /* 8207E834h */ case   57:  		/* rldicl R11, R11, 0, 32 */
		/* 8207E834h case   57:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8207E834h case   57:*/		return 0x8207E838;
		  /* 8207E838h */ case   58:  		/* rldicr R10, R10, 63, 63 */
		/* 8207E838h case   58:*/		cpu::op::rldicr<0,63,63>(regs,&regs.R10,regs.R10);
		/* 8207E838h case   58:*/		return 0x8207E83C;
		  /* 8207E83Ch */ case   59:  		/* li R5, 0 */
		/* 8207E83Ch case   59:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207E83Ch case   59:*/		return 0x8207E840;
		  /* 8207E840h */ case   60:  		/* srd R6, R10, R11 */
		/* 8207E840h case   60:*/		cpu::op::srd<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 8207E840h case   60:*/		return 0x8207E844;
		  /* 8207E844h */ case   61:  		/* mr R4, R28 */
		/* 8207E844h case   61:*/		regs.R4 = regs.R28;
		/* 8207E844h case   61:*/		return 0x8207E848;
		  /* 8207E848h */ case   62:  		/* mr R3, R31 */
		/* 8207E848h case   62:*/		regs.R3 = regs.R31;
		/* 8207E848h case   62:*/		return 0x8207E84C;
		  /* 8207E84Ch */ case   63:  		/* bl -96476 */
		/* 8207E84Ch case   63:*/		regs.LR = 0x8207E850; return 0x82066F70;
		/* 8207E84Ch case   63:*/		return 0x8207E850;
		  /* 8207E850h */ case   64:  		/* addi R28, R28, 1 */
		/* 8207E850h case   64:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8207E850h case   64:*/		return 0x8207E854;
		  /* 8207E854h */ case   65:  		/* addi R27, R27, 24 */
		/* 8207E854h case   65:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x18);
		/* 8207E854h case   65:*/		return 0x8207E858;
		  /* 8207E858h */ case   66:  		/* cmplwi CR6, R28, 26 */
		/* 8207E858h case   66:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000001A);
		/* 8207E858h case   66:*/		return 0x8207E85C;
		  /* 8207E85Ch */ case   67:  		/* bc 12, CR6_LT, -136 */
		/* 8207E85Ch case   67:*/		if ( regs.CR[6].lt ) { return 0x8207E7D4;  }
		/* 8207E85Ch case   67:*/		return 0x8207E860;
		  /* 8207E860h */ case   68:  		/* li R11, 5 */
		/* 8207E860h case   68:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8207E860h case   68:*/		return 0x8207E864;
		  /* 8207E864h */ case   69:  		/* li R10, 1 */
		/* 8207E864h case   69:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207E864h case   69:*/		return 0x8207E868;
		  /* 8207E868h */ case   70:  		/* stw R11, <#[R31 + 12568]> */
		/* 8207E868h case   70:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00003118) );
		/* 8207E868h case   70:*/		return 0x8207E86C;
		  /* 8207E86Ch */ case   71:  		/* li R4, 2 */
		/* 8207E86Ch case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8207E86Ch case   71:*/		return 0x8207E870;
		  /* 8207E870h */ case   72:  		/* stw R10, <#[R31 + 12572]> */
		/* 8207E870h case   72:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000311C) );
		/* 8207E870h case   72:*/		return 0x8207E874;
		  /* 8207E874h */ case   73:  		/* mr R3, R31 */
		/* 8207E874h case   73:*/		regs.R3 = regs.R31;
		/* 8207E874h case   73:*/		return 0x8207E878;
		  /* 8207E878h */ case   74:  		/* bl -38080 */
		/* 8207E878h case   74:*/		regs.LR = 0x8207E87C; return 0x820753B8;
		/* 8207E878h case   74:*/		return 0x8207E87C;
		  /* 8207E87Ch */ case   75:  		/* li R4, 2 */
		/* 8207E87Ch case   75:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8207E87Ch case   75:*/		return 0x8207E880;
		  /* 8207E880h */ case   76:  		/* mr R3, R31 */
		/* 8207E880h case   76:*/		regs.R3 = regs.R31;
		/* 8207E880h case   76:*/		return 0x8207E884;
		  /* 8207E884h */ case   77:  		/* bl -81100 */
		/* 8207E884h case   77:*/		regs.LR = 0x8207E888; return 0x8206ABB8;
		/* 8207E884h case   77:*/		return 0x8207E888;
		  /* 8207E888h */ case   78:  		/* mr R4, R25 */
		/* 8207E888h case   78:*/		regs.R4 = regs.R25;
		/* 8207E888h case   78:*/		return 0x8207E88C;
		  /* 8207E88Ch */ case   79:  		/* mr R3, R31 */
		/* 8207E88Ch case   79:*/		regs.R3 = regs.R31;
		/* 8207E88Ch case   79:*/		return 0x8207E890;
		  /* 8207E890h */ case   80:  		/* bl -109968 */
		/* 8207E890h case   80:*/		regs.LR = 0x8207E894; return 0x82063B00;
		/* 8207E890h case   80:*/		return 0x8207E894;
		  /* 8207E894h */ case   81:  		/* rlwinm R4, R24, 0, 31, 31 */
		/* 8207E894h case   81:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R4,regs.R24);
		/* 8207E894h case   81:*/		return 0x8207E898;
		  /* 8207E898h */ case   82:  		/* mr R3, R31 */
		/* 8207E898h case   82:*/		regs.R3 = regs.R31;
		/* 8207E898h case   82:*/		return 0x8207E89C;
		  /* 8207E89Ch */ case   83:  		/* bl -114452 */
		/* 8207E89Ch case   83:*/		regs.LR = 0x8207E8A0; return 0x82062988;
		/* 8207E89Ch case   83:*/		return 0x8207E8A0;
		  /* 8207E8A0h */ case   84:  		/* lbz R10, <#[R31 + 11068]> */
		/* 8207E8A0h case   84:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207E8A0h case   84:*/		return 0x8207E8A4;
		  /* 8207E8A4h */ case   85:  		/* stw R23, <#[R31 + 13092]> */
		/* 8207E8A4h case   85:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00003324) );
		/* 8207E8A4h case   85:*/		return 0x8207E8A8;
		  /* 8207E8A8h */ case   86:  		/* rlwinm. R11, R10, 0, 28, 28 */
		/* 8207E8A8h case   86:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R10);
		/* 8207E8A8h case   86:*/		return 0x8207E8AC;
		  /* 8207E8ACh */ case   87:  		/* bc 4, CR0_EQ, 196 */
		/* 8207E8ACh case   87:*/		if ( !regs.CR[0].eq ) { return 0x8207E970;  }
		/* 8207E8ACh case   87:*/		return 0x8207E8B0;
		  /* 8207E8B0h */ case   88:  		/* rlwinm. R11, R10, 0, 29, 29 */
		/* 8207E8B0h case   88:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R10);
		/* 8207E8B0h case   88:*/		return 0x8207E8B4;
		  /* 8207E8B4h */ case   89:  		/* bc 4, CR0_EQ, 188 */
		/* 8207E8B4h case   89:*/		if ( !regs.CR[0].eq ) { return 0x8207E970;  }
		/* 8207E8B4h case   89:*/		return 0x8207E8B8;
		  /* 8207E8B8h */ case   90:  		/* lbz R11, <#[R31 + 12563]> */
		/* 8207E8B8h case   90:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003113) );
		/* 8207E8B8h case   90:*/		return 0x8207E8BC;
		  /* 8207E8BCh */ case   91:  		/* cmplwi CR0, R11, 0 */
		/* 8207E8BCh case   91:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8207E8BCh case   91:*/		return 0x8207E8C0;
		  /* 8207E8C0h */ case   92:  		/* bc 4, CR0_EQ, 176 */
		/* 8207E8C0h case   92:*/		if ( !regs.CR[0].eq ) { return 0x8207E970;  }
		/* 8207E8C0h case   92:*/		return 0x8207E8C4;
		  /* 8207E8C4h */ case   93:  		/* rlwinm. R11, R10, 0, 27, 27 */
		/* 8207E8C4h case   93:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R10);
		/* 8207E8C4h case   93:*/		return 0x8207E8C8;
		  /* 8207E8C8h */ case   94:  		/* bc 12, CR0_EQ, 12 */
		/* 8207E8C8h case   94:*/		if ( regs.CR[0].eq ) { return 0x8207E8D4;  }
		/* 8207E8C8h case   94:*/		return 0x8207E8CC;
		  /* 8207E8CCh */ case   95:  		/* li R11, 1 */
		/* 8207E8CCh case   95:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E8CCh case   95:*/		return 0x8207E8D0;
		  /* 8207E8D0h */ case   96:  		/* b 148 */
		/* 8207E8D0h case   96:*/		return 0x8207E964;
		/* 8207E8D0h case   96:*/		return 0x8207E8D4;
	}
	return 0x8207E8D4;
} // Block from 8207E750h-8207E8D4h (97 instructions)

//////////////////////////////////////////////////////
// Block at 8207E8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E8D4);
		  /* 8207E8D4h */ case    0:  		/* rlwinm. R11, R10, 0, 26, 26 */
		/* 8207E8D4h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R10);
		/* 8207E8D4h case    0:*/		return 0x8207E8D8;
		  /* 8207E8D8h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 8207E8D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8207E95C;  }
		/* 8207E8D8h case    1:*/		return 0x8207E8DC;
		  /* 8207E8DCh */ case    2:  		/* lwz R11, <#[R31 + 12816]> */
		/* 8207E8DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003210) );
		/* 8207E8DCh case    2:*/		return 0x8207E8E0;
		  /* 8207E8E0h */ case    3:  		/* lwz R9, <#[R31 + 13104]> */
		/* 8207E8E0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003330) );
		/* 8207E8E0h case    3:*/		return 0x8207E8E4;
		  /* 8207E8E4h */ case    4:  		/* cmplw CR6, R9, R11 */
		/* 8207E8E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207E8E4h case    4:*/		return 0x8207E8E8;
		  /* 8207E8E8h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E8E8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8207E8F4;  }
		/* 8207E8E8h case    5:*/		return 0x8207E8EC;
		  /* 8207E8ECh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8207E8ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E8ECh case    6:*/		return 0x8207E8F0;
		  /* 8207E8F0h */ case    7:  		/* bc 4, CR6_EQ, 108 */
		/* 8207E8F0h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207E95C;  }
		/* 8207E8F0h case    7:*/		return 0x8207E8F4;
	}
	return 0x8207E8F4;
} // Block from 8207E8D4h-8207E8F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207E8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E8F4);
		  /* 8207E8F4h */ case    0:  		/* lwz R11, <#[R31 + 12820]> */
		/* 8207E8F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003214) );
		/* 8207E8F4h case    0:*/		return 0x8207E8F8;
		  /* 8207E8F8h */ case    1:  		/* lwz R9, <#[R31 + 13108]> */
		/* 8207E8F8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003334) );
		/* 8207E8F8h case    1:*/		return 0x8207E8FC;
		  /* 8207E8FCh */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 8207E8FCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207E8FCh case    2:*/		return 0x8207E900;
		  /* 8207E900h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E900h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E90C;  }
		/* 8207E900h case    3:*/		return 0x8207E904;
		  /* 8207E904h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8207E904h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E904h case    4:*/		return 0x8207E908;
		  /* 8207E908h */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 8207E908h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207E95C;  }
		/* 8207E908h case    5:*/		return 0x8207E90C;
	}
	return 0x8207E90C;
} // Block from 8207E8F4h-8207E90Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E90Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E90C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E90C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E90C);
		  /* 8207E90Ch */ case    0:  		/* lwz R11, <#[R31 + 12824]> */
		/* 8207E90Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003218) );
		/* 8207E90Ch case    0:*/		return 0x8207E910;
		  /* 8207E910h */ case    1:  		/* lwz R9, <#[R31 + 13112]> */
		/* 8207E910h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003338) );
		/* 8207E910h case    1:*/		return 0x8207E914;
		  /* 8207E914h */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 8207E914h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207E914h case    2:*/		return 0x8207E918;
		  /* 8207E918h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E918h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E924;  }
		/* 8207E918h case    3:*/		return 0x8207E91C;
		  /* 8207E91Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8207E91Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E91Ch case    4:*/		return 0x8207E920;
		  /* 8207E920h */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 8207E920h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207E95C;  }
		/* 8207E920h case    5:*/		return 0x8207E924;
	}
	return 0x8207E924;
} // Block from 8207E90Ch-8207E924h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E924);
		  /* 8207E924h */ case    0:  		/* lwz R11, <#[R31 + 12828]> */
		/* 8207E924h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000321C) );
		/* 8207E924h case    0:*/		return 0x8207E928;
		  /* 8207E928h */ case    1:  		/* lwz R9, <#[R31 + 13116]> */
		/* 8207E928h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000333C) );
		/* 8207E928h case    1:*/		return 0x8207E92C;
		  /* 8207E92Ch */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 8207E92Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207E92Ch case    2:*/		return 0x8207E930;
		  /* 8207E930h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E930h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E93C;  }
		/* 8207E930h case    3:*/		return 0x8207E934;
		  /* 8207E934h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8207E934h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E934h case    4:*/		return 0x8207E938;
		  /* 8207E938h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8207E938h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207E95C;  }
		/* 8207E938h case    5:*/		return 0x8207E93C;
	}
	return 0x8207E93C;
} // Block from 8207E924h-8207E93Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E93C);
		  /* 8207E93Ch */ case    0:  		/* lwz R11, <#[R31 + 12832]> */
		/* 8207E93Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003220) );
		/* 8207E93Ch case    0:*/		return 0x8207E940;
		  /* 8207E940h */ case    1:  		/* lwz R9, <#[R31 + 13120]> */
		/* 8207E940h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003340) );
		/* 8207E940h case    1:*/		return 0x8207E944;
		  /* 8207E944h */ case    2:  		/* cmplw CR6, R9, R11 */
		/* 8207E944h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8207E944h case    2:*/		return 0x8207E948;
		  /* 8207E948h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E948h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207E954;  }
		/* 8207E948h case    3:*/		return 0x8207E94C;
		  /* 8207E94Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8207E94Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E94Ch case    4:*/		return 0x8207E950;
		  /* 8207E950h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8207E950h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8207E95C;  }
		/* 8207E950h case    5:*/		return 0x8207E954;
	}
	return 0x8207E954;
} // Block from 8207E93Ch-8207E954h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207E954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E954);
		  /* 8207E954h */ case    0:  		/* li R11, 1 */
		/* 8207E954h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E954h case    0:*/		return 0x8207E958;
		  /* 8207E958h */ case    1:  		/* b 8 */
		/* 8207E958h case    1:*/		return 0x8207E960;
		/* 8207E958h case    1:*/		return 0x8207E95C;
	}
	return 0x8207E95C;
} // Block from 8207E954h-8207E95Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E95C);
		  /* 8207E95Ch */ case    0:  		/* mr R11, R23 */
		/* 8207E95Ch case    0:*/		regs.R11 = regs.R23;
		/* 8207E95Ch case    0:*/		return 0x8207E960;
	}
	return 0x8207E960;
} // Block from 8207E95Ch-8207E960h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E960);
		  /* 8207E960h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8207E960h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8207E960h case    0:*/		return 0x8207E964;
	}
	return 0x8207E964;
} // Block from 8207E960h-8207E964h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E964);
		  /* 8207E964h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8207E964h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8207E964h case    0:*/		return 0x8207E968;
		  /* 8207E968h */ case    1:  		/* li R11, 1 */
		/* 8207E968h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207E968h case    1:*/		return 0x8207E96C;
		  /* 8207E96Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8207E96Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8207E974;  }
		/* 8207E96Ch case    2:*/		return 0x8207E970;
	}
	return 0x8207E970;
} // Block from 8207E964h-8207E970h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207E970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E970);
		  /* 8207E970h */ case    0:  		/* mr R11, R23 */
		/* 8207E970h case    0:*/		regs.R11 = regs.R23;
		/* 8207E970h case    0:*/		return 0x8207E974;
	}
	return 0x8207E974;
} // Block from 8207E970h-8207E974h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207E974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E974);
		  /* 8207E974h */ case    0:  		/* rlwimi R11, R10, 0, 24, 30 */
		/* 8207E974h case    0:*/		cpu::op::rlwimi<0,0,24,30>(regs,&regs.R11,regs.R10);
		/* 8207E974h case    0:*/		return 0x8207E978;
		  /* 8207E978h */ case    1:  		/* stw R23, <#[R31 + 13088]> */
		/* 8207E978h case    1:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00003320) );
		/* 8207E978h case    1:*/		return 0x8207E97C;
		  /* 8207E97Ch */ case    2:  		/* li R10, -1 */
		/* 8207E97Ch case    2:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8207E97Ch case    2:*/		return 0x8207E980;
		  /* 8207E980h */ case    3:  		/* stw R23, <#[R31 + 11060]> */
		/* 8207E980h case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00002B34) );
		/* 8207E980h case    3:*/		return 0x8207E984;
		  /* 8207E984h */ case    4:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8207E984h case    4:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8207E984h case    4:*/		return 0x8207E988;
		  /* 8207E988h */ case    5:  		/* stw R23, <#[R31 + 11064]> */
		/* 8207E988h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00002B38) );
		/* 8207E988h case    5:*/		return 0x8207E98C;
		  /* 8207E98Ch */ case    6:  		/* stw R10, <#[R31 + 13084]> */
		/* 8207E98Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000331C) );
		/* 8207E98Ch case    6:*/		return 0x8207E990;
		  /* 8207E990h */ case    7:  		/* rlwinm. R10, R11, 0, 24, 24 */
		/* 8207E990h case    7:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R10,regs.R11);
		/* 8207E990h case    7:*/		return 0x8207E994;
		  /* 8207E994h */ case    8:  		/* stb R11, <#[R31 + 11068]> */
		/* 8207E994h case    8:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207E994h case    8:*/		return 0x8207E998;
		  /* 8207E998h */ case    9:  		/* bc 4, CR0_EQ, 24 */
		/* 8207E998h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8207E9B0;  }
		/* 8207E998h case    9:*/		return 0x8207E99C;
		  /* 8207E99Ch */ case   10:  		/* li R6, 0 */
		/* 8207E99Ch case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207E99Ch case   10:*/		return 0x8207E9A0;
		  /* 8207E9A0h */ case   11:  		/* li R5, 0 */
		/* 8207E9A0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207E9A0h case   11:*/		return 0x8207E9A4;
		  /* 8207E9A4h */ case   12:  		/* li R4, 0 */
		/* 8207E9A4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207E9A4h case   12:*/		return 0x8207E9A8;
		  /* 8207E9A8h */ case   13:  		/* mr R3, R31 */
		/* 8207E9A8h case   13:*/		regs.R3 = regs.R31;
		/* 8207E9A8h case   13:*/		return 0x8207E9AC;
		  /* 8207E9ACh */ case   14:  		/* bl -87524 */
		/* 8207E9ACh case   14:*/		regs.LR = 0x8207E9B0; return 0x820693C8;
		/* 8207E9ACh case   14:*/		return 0x8207E9B0;
	}
	return 0x8207E9B0;
} // Block from 8207E974h-8207E9B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207E9B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E9B0);
		  /* 8207E9B0h */ case    0:  		/* addi R1, R1, 160 */
		/* 8207E9B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8207E9B0h case    0:*/		return 0x8207E9B4;
		  /* 8207E9B4h */ case    1:  		/* b 76000 */
		/* 8207E9B4h case    1:*/		return 0x82091294;
		/* 8207E9B4h case    1:*/		return 0x8207E9B8;
	}
	return 0x8207E9B8;
} // Block from 8207E9B0h-8207E9B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207E9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E9B8);
		  /* 8207E9B8h */ case    0:  		/* mfspr R12, LR */
		/* 8207E9B8h case    0:*/		regs.R12 = regs.LR;
		/* 8207E9B8h case    0:*/		return 0x8207E9BC;
		  /* 8207E9BCh */ case    1:  		/* bl 75936 */
		/* 8207E9BCh case    1:*/		regs.LR = 0x8207E9C0; return 0x8209125C;
		/* 8207E9BCh case    1:*/		return 0x8207E9C0;
		  /* 8207E9C0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207E9C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207E9C0h case    2:*/		return 0x8207E9C4;
		  /* 8207E9C4h */ case    3:  		/* mr R31, R3 */
		/* 8207E9C4h case    3:*/		regs.R31 = regs.R3;
		/* 8207E9C4h case    3:*/		return 0x8207E9C8;
		  /* 8207E9C8h */ case    4:  		/* bl 2024752 */
		/* 8207E9C8h case    4:*/		regs.LR = 0x8207E9CC; return 0x8226CEF8;
		/* 8207E9C8h case    4:*/		return 0x8207E9CC;
		  /* 8207E9CCh */ case    5:  		/* cmpwi CR6, R3, 2 */
		/* 8207E9CCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207E9CCh case    5:*/		return 0x8207E9D0;
		  /* 8207E9D0h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8207E9D0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207E9DC;  }
		/* 8207E9D0h case    6:*/		return 0x8207E9D4;
		  /* 8207E9D4h */ case    7:  		/* mr R3, R31 */
		/* 8207E9D4h case    7:*/		regs.R3 = regs.R31;
		/* 8207E9D4h case    7:*/		return 0x8207E9D8;
		  /* 8207E9D8h */ case    8:  		/* bl 6584 */
		/* 8207E9D8h case    8:*/		regs.LR = 0x8207E9DC; return 0x82080390;
		/* 8207E9D8h case    8:*/		return 0x8207E9DC;
	}
	return 0x8207E9DC;
} // Block from 8207E9B8h-8207E9DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207E9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207E9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207E9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207E9DC);
		  /* 8207E9DCh */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 8207E9DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207E9DCh case    0:*/		return 0x8207E9E0;
		  /* 8207E9E0h */ case    1:  		/* li R29, 0 */
		/* 8207E9E0h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8207E9E0h case    1:*/		return 0x8207E9E4;
		  /* 8207E9E4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8207E9E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207E9E4h case    2:*/		return 0x8207E9E8;
		  /* 8207E9E8h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 8207E9E8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8207EA20;  }
		/* 8207E9E8h case    3:*/		return 0x8207E9EC;
		  /* 8207E9ECh */ case    4:  		/* li R4, 0 */
		/* 8207E9ECh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207E9ECh case    4:*/		return 0x8207E9F0;
		  /* 8207E9F0h */ case    5:  		/* mr R3, R31 */
		/* 8207E9F0h case    5:*/		regs.R3 = regs.R31;
		/* 8207E9F0h case    5:*/		return 0x8207E9F4;
		  /* 8207E9F4h */ case    6:  		/* bl -104364 */
		/* 8207E9F4h case    6:*/		regs.LR = 0x8207E9F8; return 0x82065248;
		/* 8207E9F4h case    6:*/		return 0x8207E9F8;
		  /* 8207E9F8h */ case    7:  		/* mr R30, R29 */
		/* 8207E9F8h case    7:*/		regs.R30 = regs.R29;
		/* 8207E9F8h case    7:*/		return 0x8207E9FC;
		  /* 8207E9FCh */ case    8:  		/* li R5, 0 */
		/* 8207E9FCh case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207E9FCh case    8:*/		return 0x8207EA00;
		  /* 8207EA00h */ case    9:  		/* mr R4, R30 */
		/* 8207EA00h case    9:*/		regs.R4 = regs.R30;
		/* 8207EA00h case    9:*/		return 0x8207EA04;
		  /* 8207EA04h */ case   10:  		/* mr R3, R31 */
		/* 8207EA04h case   10:*/		regs.R3 = regs.R31;
		/* 8207EA04h case   10:*/		return 0x8207EA08;
		  /* 8207EA08h */ case   11:  		/* bl -105296 */
		/* 8207EA08h case   11:*/		regs.LR = 0x8207EA0C; return 0x82064EB8;
		/* 8207EA08h case   11:*/		return 0x8207EA0C;
		  /* 8207EA0Ch */ case   12:  		/* addi R30, R30, 1 */
		/* 8207EA0Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8207EA0Ch case   12:*/		return 0x8207EA10;
	}
	return 0x8207EA10;
} // Block from 8207E9DCh-8207EA10h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA10h
// Function '?XBMProcessSwap@D3D@@YAXPAVCDevice@1@PAUD3DBaseTexture@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA10);
		  /* 8207EA10h */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 8207EA10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 8207EA10h case    0:*/		return 0x8207EA14;
		  /* 8207EA14h */ case    1:  		/* bc 12, CR6_LT, -24 */
		/* 8207EA14h case    1:*/		if ( regs.CR[6].lt ) { return 0x8207E9FC;  }
		/* 8207EA14h case    1:*/		return 0x8207EA18;
		  /* 8207EA18h */ case    2:  		/* mr R3, R31 */
		/* 8207EA18h case    2:*/		regs.R3 = regs.R31;
		/* 8207EA18h case    2:*/		return 0x8207EA1C;
		  /* 8207EA1Ch */ case    3:  		/* bl -42596 */
		/* 8207EA1Ch case    3:*/		regs.LR = 0x8207EA20; return 0x820743B8;
		/* 8207EA1Ch case    3:*/		return 0x8207EA20;
	}
	return 0x8207EA20;
} // Block from 8207EA10h-8207EA20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA20);
		  /* 8207EA20h */ case    0:  		/* lwz R3, <#[R31 + 15232]> */
		/* 8207EA20h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00003B80) );
		/* 8207EA20h case    0:*/		return 0x8207EA24;
		  /* 8207EA24h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207EA24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EA24h case    1:*/		return 0x8207EA28;
		  /* 8207EA28h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EA28h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207EA34;  }
		/* 8207EA28h case    2:*/		return 0x8207EA2C;
		  /* 8207EA2Ch */ case    3:  		/* bl -51428 */
		/* 8207EA2Ch case    3:*/		regs.LR = 0x8207EA30; return 0x82072148;
		/* 8207EA2Ch case    3:*/		return 0x8207EA30;
		  /* 8207EA30h */ case    4:  		/* stw R29, <#[R31 + 15232]> */
		/* 8207EA30h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00003B80) );
		/* 8207EA30h case    4:*/		return 0x8207EA34;
	}
	return 0x8207EA34;
} // Block from 8207EA20h-8207EA34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA34);
		  /* 8207EA34h */ case    0:  		/* lwz R3, <#[R31 + 15236]> */
		/* 8207EA34h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00003B84) );
		/* 8207EA34h case    0:*/		return 0x8207EA38;
		  /* 8207EA38h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207EA38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EA38h case    1:*/		return 0x8207EA3C;
		  /* 8207EA3Ch */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EA3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8207EA48;  }
		/* 8207EA3Ch case    2:*/		return 0x8207EA40;
		  /* 8207EA40h */ case    3:  		/* bl -51448 */
		/* 8207EA40h case    3:*/		regs.LR = 0x8207EA44; return 0x82072148;
		/* 8207EA40h case    3:*/		return 0x8207EA44;
		  /* 8207EA44h */ case    4:  		/* stw R29, <#[R31 + 15236]> */
		/* 8207EA44h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00003B84) );
		/* 8207EA44h case    4:*/		return 0x8207EA48;
	}
	return 0x8207EA48;
} // Block from 8207EA34h-8207EA48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA48);
		  /* 8207EA48h */ case    0:  		/* lwz R3, <#[R31 + 15228]> */
		/* 8207EA48h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00003B7C) );
		/* 8207EA48h case    0:*/		return 0x8207EA4C;
		  /* 8207EA4Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207EA4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EA4Ch case    1:*/		return 0x8207EA50;
		  /* 8207EA50h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EA50h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207EA5C;  }
		/* 8207EA50h case    2:*/		return 0x8207EA54;
		  /* 8207EA54h */ case    3:  		/* bl -51468 */
		/* 8207EA54h case    3:*/		regs.LR = 0x8207EA58; return 0x82072148;
		/* 8207EA54h case    3:*/		return 0x8207EA58;
		  /* 8207EA58h */ case    4:  		/* stw R29, <#[R31 + 15228]> */
		/* 8207EA58h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00003B7C) );
		/* 8207EA58h case    4:*/		return 0x8207EA5C;
	}
	return 0x8207EA5C;
} // Block from 8207EA48h-8207EA5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA5C);
		  /* 8207EA5Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8207EA5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207EA5Ch case    0:*/		return 0x8207EA60;
		  /* 8207EA60h */ case    1:  		/* b 75852 */
		/* 8207EA60h case    1:*/		return 0x820912AC;
		/* 8207EA60h case    1:*/		return 0x8207EA64;
		  /* 8207EA64h */ case    2:  		/* nop */
		/* 8207EA64h case    2:*/		cpu::op::nop();
		/* 8207EA64h case    2:*/		return 0x8207EA68;
	}
	return 0x8207EA68;
} // Block from 8207EA5Ch-8207EA68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207EA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EA68);
		  /* 8207EA68h */ case    0:  		/* mfspr R12, LR */
		/* 8207EA68h case    0:*/		regs.R12 = regs.LR;
		/* 8207EA68h case    0:*/		return 0x8207EA6C;
		  /* 8207EA6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EA6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EA6Ch case    1:*/		return 0x8207EA70;
		  /* 8207EA70h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207EA70h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EA70h case    2:*/		return 0x8207EA74;
		  /* 8207EA74h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207EA74h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207EA74h case    3:*/		return 0x8207EA78;
		  /* 8207EA78h */ case    4:  		/* mr R31, R3 */
		/* 8207EA78h case    4:*/		regs.R31 = regs.R3;
		/* 8207EA78h case    4:*/		return 0x8207EA7C;
		  /* 8207EA7Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8207EA7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EA7Ch case    5:*/		return 0x8207EA80;
		  /* 8207EA80h */ case    6:  		/* bc 12, CR6_EQ, 44 */
		/* 8207EA80h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207EAAC;  }
		/* 8207EA80h case    6:*/		return 0x8207EA84;
		  /* 8207EA84h */ case    7:  		/* lwz R3, <#[R3 + 12]> */
		/* 8207EA84h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 8207EA84h case    7:*/		return 0x8207EA88;
		  /* 8207EA88h */ case    8:  		/* bl -32 */
		/* 8207EA88h case    8:*/		regs.LR = 0x8207EA8C; return 0x8207EA68;
		/* 8207EA88h case    8:*/		return 0x8207EA8C;
		  /* 8207EA8Ch */ case    9:  		/* li R11, 0 */
		/* 8207EA8Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207EA8Ch case    9:*/		return 0x8207EA90;
		  /* 8207EA90h */ case   10:  		/* lwz R3, <#[R31 + 8]> */
		/* 8207EA90h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8207EA90h case   10:*/		return 0x8207EA94;
		  /* 8207EA94h */ case   11:  		/* lis R4, -20096 */
		/* 8207EA94h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207EA94h case   11:*/		return 0x8207EA98;
		  /* 8207EA98h */ case   12:  		/* stw R11, <#[R31 + 12]> */
		/* 8207EA98h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8207EA98h case   12:*/		return 0x8207EA9C;
		  /* 8207EA9Ch */ case   13:  		/* bl 39068 */
		/* 8207EA9Ch case   13:*/		regs.LR = 0x8207EAA0; return 0x82088338;
		/* 8207EA9Ch case   13:*/		return 0x8207EAA0;
		  /* 8207EAA0h */ case   14:  		/* lis R4, 9344 */
		/* 8207EAA0h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207EAA0h case   14:*/		return 0x8207EAA4;
		  /* 8207EAA4h */ case   15:  		/* mr R3, R31 */
		/* 8207EAA4h case   15:*/		regs.R3 = regs.R31;
		/* 8207EAA4h case   15:*/		return 0x8207EAA8;
		  /* 8207EAA8h */ case   16:  		/* bl 39056 */
		/* 8207EAA8h case   16:*/		regs.LR = 0x8207EAAC; return 0x82088338;
		/* 8207EAA8h case   16:*/		return 0x8207EAAC;
	}
	return 0x8207EAAC;
} // Block from 8207EA68h-8207EAACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8207EAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EAAC);
		  /* 8207EAACh */ case    0:  		/* addi R1, R1, 96 */
		/* 8207EAACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207EAACh case    0:*/		return 0x8207EAB0;
		  /* 8207EAB0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EAB0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EAB0h case    1:*/		return 0x8207EAB4;
		  /* 8207EAB4h */ case    2:  		/* mtspr LR, R12 */
		/* 8207EAB4h case    2:*/		regs.LR = regs.R12;
		/* 8207EAB4h case    2:*/		return 0x8207EAB8;
		  /* 8207EAB8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EAB8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EAB8h case    3:*/		return 0x8207EABC;
		  /* 8207EABCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207EABCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EABCh case    4:*/		return 0x8207EAC0;
	}
	return 0x8207EAC0;
} // Block from 8207EAACh-8207EAC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EAC0);
		  /* 8207EAC0h */ case    0:  		/* mfspr R12, LR */
		/* 8207EAC0h case    0:*/		regs.R12 = regs.LR;
		/* 8207EAC0h case    0:*/		return 0x8207EAC4;
		  /* 8207EAC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EAC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EAC4h case    1:*/		return 0x8207EAC8;
		  /* 8207EAC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207EAC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EAC8h case    2:*/		return 0x8207EACC;
		  /* 8207EACCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207EACCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EACCh case    3:*/		return 0x8207EAD0;
		  /* 8207EAD0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207EAD0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207EAD0h case    4:*/		return 0x8207EAD4;
		  /* 8207EAD4h */ case    5:  		/* lwz R11, <#[R3 + 24596]> */
		/* 8207EAD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00006014) );
		/* 8207EAD4h case    5:*/		return 0x8207EAD8;
		  /* 8207EAD8h */ case    6:  		/* mr R30, R3 */
		/* 8207EAD8h case    6:*/		regs.R30 = regs.R3;
		/* 8207EAD8h case    6:*/		return 0x8207EADC;
		  /* 8207EADCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8207EADCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207EADCh case    7:*/		return 0x8207EAE0;
		  /* 8207EAE0h */ case    8:  		/* bc 4, CR6_EQ, 56 */
		/* 8207EAE0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8207EB18;  }
		/* 8207EAE0h case    8:*/		return 0x8207EAE4;
		  /* 8207EAE4h */ case    9:  		/* lis R11, 52 */
		/* 8207EAE4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x34);
		/* 8207EAE4h case    9:*/		return 0x8207EAE8;
		  /* 8207EAE8h */ case   10:  		/* lis R4, -17280 */
		/* 8207EAE8h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFBC80);
		/* 8207EAE8h case   10:*/		return 0x8207EAEC;
		  /* 8207EAECh */ case   11:  		/* ori R31, R11, 20480 */
		/* 8207EAECh case   11:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R11,0x5000);
		/* 8207EAECh case   11:*/		return 0x8207EAF0;
	}
	return 0x8207EAF0;
} // Block from 8207EAC0h-8207EAF0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207EAF0h
// Function '?InitializeApiState@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EAF0);
		  /* 8207EAF0h */ case    0:  		/* mr R3, R31 */
		/* 8207EAF0h case    0:*/		regs.R3 = regs.R31;
		/* 8207EAF0h case    0:*/		return 0x8207EAF4;
		  /* 8207EAF4h */ case    1:  		/* bl 38668 */
		/* 8207EAF4h case    1:*/		regs.LR = 0x8207EAF8; return 0x82088200;
		/* 8207EAF4h case    1:*/		return 0x8207EAF8;
		  /* 8207EAF8h */ case    2:  		/* stw R3, <#[R30 + 24596]> */
		/* 8207EAF8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00006014) );
		/* 8207EAF8h case    2:*/		return 0x8207EAFC;
		  /* 8207EAFCh */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8207EAFCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207EAFCh case    3:*/		return 0x8207EB00;
		  /* 8207EB00h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 8207EB00h case    4:*/		if ( regs.CR[0].eq ) { return 0x8207EB1C;  }
		/* 8207EB00h case    4:*/		return 0x8207EB04;
		  /* 8207EB04h */ case    5:  		/* stw R3, <#[R1 + 80]> */
		/* 8207EB04h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8207EB04h case    5:*/		return 0x8207EB08;
		  /* 8207EB08h */ case    6:  		/* addi R4, R1, 80 */
		/* 8207EB08h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207EB08h case    6:*/		return 0x8207EB0C;
		  /* 8207EB0Ch */ case    7:  		/* stw R31, <#[R1 + 84]> */
		/* 8207EB0Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8207EB0Ch case    7:*/		return 0x8207EB10;
		  /* 8207EB10h */ case    8:  		/* li R3, 9 */
		/* 8207EB10h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x9);
		/* 8207EB10h case    8:*/		return 0x8207EB14;
		  /* 8207EB14h */ case    9:  		/* bl 2024852 */
		/* 8207EB14h case    9:*/		regs.LR = 0x8207EB18; return 0x8226D0A8;
		/* 8207EB14h case    9:*/		return 0x8207EB18;
	}
	return 0x8207EB18;
} // Block from 8207EAF0h-8207EB18h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB18);
		  /* 8207EB18h */ case    0:  		/* li R3, 1 */
		/* 8207EB18h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207EB18h case    0:*/		return 0x8207EB1C;
	}
	return 0x8207EB1C;
} // Block from 8207EB18h-8207EB1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB1C);
		  /* 8207EB1Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8207EB1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207EB1Ch case    0:*/		return 0x8207EB20;
		  /* 8207EB20h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EB20h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EB20h case    1:*/		return 0x8207EB24;
		  /* 8207EB24h */ case    2:  		/* mtspr LR, R12 */
		/* 8207EB24h case    2:*/		regs.LR = regs.R12;
		/* 8207EB24h case    2:*/		return 0x8207EB28;
		  /* 8207EB28h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207EB28h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EB28h case    3:*/		return 0x8207EB2C;
		  /* 8207EB2Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EB2Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EB2Ch case    4:*/		return 0x8207EB30;
		  /* 8207EB30h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207EB30h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EB30h case    5:*/		return 0x8207EB34;
	}
	return 0x8207EB34;
} // Block from 8207EB1Ch-8207EB34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB34);
		  /* 8207EB34h */ case    0:  		/* nop */
		/* 8207EB34h case    0:*/		cpu::op::nop();
		/* 8207EB34h case    0:*/		return 0x8207EB38;
	}
	return 0x8207EB38;
} // Block from 8207EB34h-8207EB38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB38);
		  /* 8207EB38h */ case    0:  		/* mfspr R12, LR */
		/* 8207EB38h case    0:*/		regs.R12 = regs.LR;
		/* 8207EB38h case    0:*/		return 0x8207EB3C;
		  /* 8207EB3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EB3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EB3Ch case    1:*/		return 0x8207EB40;
		  /* 8207EB40h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207EB40h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EB40h case    2:*/		return 0x8207EB44;
		  /* 8207EB44h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207EB44h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EB44h case    3:*/		return 0x8207EB48;
		  /* 8207EB48h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207EB48h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207EB48h case    4:*/		return 0x8207EB4C;
		  /* 8207EB4Ch */ case    5:  		/* lwz R11, <#[R3 + 24596]> */
		/* 8207EB4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00006014) );
		/* 8207EB4Ch case    5:*/		return 0x8207EB50;
		  /* 8207EB50h */ case    6:  		/* mr R31, R3 */
		/* 8207EB50h case    6:*/		regs.R31 = regs.R3;
		/* 8207EB50h case    6:*/		return 0x8207EB54;
		  /* 8207EB54h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8207EB54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207EB54h case    7:*/		return 0x8207EB58;
		  /* 8207EB58h */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 8207EB58h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207EB84;  }
		/* 8207EB58h case    8:*/		return 0x8207EB5C;
		  /* 8207EB5Ch */ case    9:  		/* li R30, 0 */
		/* 8207EB5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207EB5Ch case    9:*/		return 0x8207EB60;
		  /* 8207EB60h */ case   10:  		/* addi R4, R1, 80 */
		/* 8207EB60h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8207EB60h case   10:*/		return 0x8207EB64;
		  /* 8207EB64h */ case   11:  		/* stw R30, <#[R1 + 84]> */
		/* 8207EB64h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8207EB64h case   11:*/		return 0x8207EB68;
		  /* 8207EB68h */ case   12:  		/* li R3, 9 */
		/* 8207EB68h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x9);
		/* 8207EB68h case   12:*/		return 0x8207EB6C;
		  /* 8207EB6Ch */ case   13:  		/* stw R30, <#[R1 + 80]> */
		/* 8207EB6Ch case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 8207EB6Ch case   13:*/		return 0x8207EB70;
		  /* 8207EB70h */ case   14:  		/* bl 2024760 */
		/* 8207EB70h case   14:*/		regs.LR = 0x8207EB74; return 0x8226D0A8;
		/* 8207EB70h case   14:*/		return 0x8207EB74;
		  /* 8207EB74h */ case   15:  		/* lis R4, -20096 */
		/* 8207EB74h case   15:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207EB74h case   15:*/		return 0x8207EB78;
		  /* 8207EB78h */ case   16:  		/* lwz R3, <#[R31 + 24596]> */
		/* 8207EB78h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00006014) );
		/* 8207EB78h case   16:*/		return 0x8207EB7C;
		  /* 8207EB7Ch */ case   17:  		/* bl 38844 */
		/* 8207EB7Ch case   17:*/		regs.LR = 0x8207EB80; return 0x82088338;
		/* 8207EB7Ch case   17:*/		return 0x8207EB80;
		  /* 8207EB80h */ case   18:  		/* stw R30, <#[R31 + 24596]> */
		/* 8207EB80h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00006014) );
		/* 8207EB80h case   18:*/		return 0x8207EB84;
	}
	return 0x8207EB84;
} // Block from 8207EB38h-8207EB84h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB84);
		  /* 8207EB84h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207EB84h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207EB84h case    0:*/		return 0x8207EB88;
		  /* 8207EB88h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EB88h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EB88h case    1:*/		return 0x8207EB8C;
		  /* 8207EB8Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8207EB8Ch case    2:*/		regs.LR = regs.R12;
		/* 8207EB8Ch case    2:*/		return 0x8207EB90;
		  /* 8207EB90h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207EB90h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EB90h case    3:*/		return 0x8207EB94;
		  /* 8207EB94h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EB94h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EB94h case    4:*/		return 0x8207EB98;
		  /* 8207EB98h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207EB98h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EB98h case    5:*/		return 0x8207EB9C;
	}
	return 0x8207EB9C;
} // Block from 8207EB84h-8207EB9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207EB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EB9C);
		  /* 8207EB9Ch */ case    0:  		/* nop */
		/* 8207EB9Ch case    0:*/		cpu::op::nop();
		/* 8207EB9Ch case    0:*/		return 0x8207EBA0;
	}
	return 0x8207EBA0;
} // Block from 8207EB9Ch-8207EBA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EBA0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EBA0);
		  /* 8207EBA0h */ case    0:  		/* mfspr R12, LR */
		/* 8207EBA0h case    0:*/		regs.R12 = regs.LR;
		/* 8207EBA0h case    0:*/		return 0x8207EBA4;
		  /* 8207EBA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EBA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EBA4h case    1:*/		return 0x8207EBA8;
		  /* 8207EBA8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207EBA8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EBA8h case    2:*/		return 0x8207EBAC;
		  /* 8207EBACh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207EBACh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EBACh case    3:*/		return 0x8207EBB0;
		  /* 8207EBB0h */ case    4:  		/* stwu R1, <#[R1 - 240]> */
		/* 8207EBB0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8207EBB0h case    4:*/		return 0x8207EBB4;
		  /* 8207EBB4h */ case    5:  		/* mr R30, R3 */
		/* 8207EBB4h case    5:*/		regs.R30 = regs.R3;
		/* 8207EBB4h case    5:*/		return 0x8207EBB8;
		  /* 8207EBB8h */ case    6:  		/* cmpwi CR6, R5, 0 */
		/* 8207EBB8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8207EBB8h case    6:*/		return 0x8207EBBC;
		  /* 8207EBBCh */ case    7:  		/* bc 12, CR6_EQ, 300 */
		/* 8207EBBCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8207ECE8;  }
		/* 8207EBBCh case    7:*/		return 0x8207EBC0;
		  /* 8207EBC0h */ case    8:  		/* lwz R11, <#[R4 + 64]> */
		/* 8207EBC0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000040) );
		/* 8207EBC0h case    8:*/		return 0x8207EBC4;
		  /* 8207EBC4h */ case    9:  		/* li R10, 0 */
		/* 8207EBC4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8207EBC4h case    9:*/		return 0x8207EBC8;
		  /* 8207EBC8h */ case   10:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8207EBC8h case   10:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8207EBC8h case   10:*/		return 0x8207EBCC;
		  /* 8207EBCCh */ case   11:  		/* cmplwi CR6, R11, 7 */
		/* 8207EBCCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 8207EBCCh case   11:*/		return 0x8207EBD0;
		  /* 8207EBD0h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EBD0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8207EBDC;  }
		/* 8207EBD0h case   12:*/		return 0x8207EBD4;
		  /* 8207EBD4h */ case   13:  		/* cmplwi CR6, R11, 54 */
		/* 8207EBD4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000036);
		/* 8207EBD4h case   13:*/		return 0x8207EBD8;
		  /* 8207EBD8h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 8207EBD8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8207EBE0;  }
		/* 8207EBD8h case   14:*/		return 0x8207EBDC;
	}
	return 0x8207EBDC;
} // Block from 8207EBA0h-8207EBDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207EBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EBDC);
		  /* 8207EBDCh */ case    0:  		/* lis R10, 2048 */
		/* 8207EBDCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x800);
		/* 8207EBDCh case    0:*/		return 0x8207EBE0;
	}
	return 0x8207EBE0;
} // Block from 8207EBDCh-8207EBE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EBE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EBE0);
		  /* 8207EBE0h */ case    0:  		/* lwz R11, <#[R4 + 68]> */
		/* 8207EBE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000044) );
		/* 8207EBE0h case    0:*/		return 0x8207EBE4;
		  /* 8207EBE4h */ case    1:  		/* lis R9, 16384 */
		/* 8207EBE4h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x4000);
		/* 8207EBE4h case    1:*/		return 0x8207EBE8;
		  /* 8207EBE8h */ case    2:  		/* lwz R8, <#[R4]> */
		/* 8207EBE8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 8207EBE8h case    2:*/		return 0x8207EBEC;
		  /* 8207EBECh */ case    3:  		/* rlwimi R9, R11, 28, 2, 3 */
		/* 8207EBECh case    3:*/		cpu::op::rlwimi<0,28,2,3>(regs,&regs.R9,regs.R11);
		/* 8207EBECh case    3:*/		return 0x8207EBF0;
		  /* 8207EBF0h */ case    4:  		/* cmplwi CR6, R8, 720 */
		/* 8207EBF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x000002D0);
		/* 8207EBF0h case    4:*/		return 0x8207EBF4;
		  /* 8207EBF4h */ case    5:  		/* or R31, R9, R10 */
		/* 8207EBF4h case    5:*/		cpu::op::or<0>(regs,&regs.R31,regs.R9,regs.R10);
		/* 8207EBF4h case    5:*/		return 0x8207EBF8;
		  /* 8207EBF8h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 8207EBF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8207EC14;  }
		/* 8207EBF8h case    6:*/		return 0x8207EBFC;
		  /* 8207EBFCh */ case    7:  		/* lwz R11, <#[R4 + 4]> */
		/* 8207EBFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8207EBFCh case    7:*/		return 0x8207EC00;
		  /* 8207EC00h */ case    8:  		/* cmplwi CR6, R11, 480 */
		/* 8207EC00h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000001E0);
		/* 8207EC00h case    8:*/		return 0x8207EC04;
		  /* 8207EC04h */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EC04h case    9:*/		if ( regs.CR[6].eq ) { return 0x8207EC10;  }
		/* 8207EC04h case    9:*/		return 0x8207EC08;
		  /* 8207EC08h */ case   10:  		/* cmplwi CR6, R11, 576 */
		/* 8207EC08h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000240);
		/* 8207EC08h case   10:*/		return 0x8207EC0C;
		  /* 8207EC0Ch */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 8207EC0Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8207EC14;  }
		/* 8207EC0Ch case   11:*/		return 0x8207EC10;
	}
	return 0x8207EC10;
} // Block from 8207EBE0h-8207EC10h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC10);
		  /* 8207EC10h */ case    0:  		/* ori R31, R31, 2 */
		/* 8207EC10h case    0:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x2);
		/* 8207EC10h case    0:*/		return 0x8207EC14;
	}
	return 0x8207EC14;
} // Block from 8207EC10h-8207EC14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC14);
		  /* 8207EC14h */ case    0:  		/* lwz R11, <#[R4 + 44]> */
		/* 8207EC14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 8207EC14h case    0:*/		return 0x8207EC18;
		  /* 8207EC18h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 27 */
		/* 8207EC18h case    1:*/		cpu::op::rlwinm<1,0,26,27>(regs,&regs.R11,regs.R11);
		/* 8207EC18h case    1:*/		return 0x8207EC1C;
		  /* 8207EC1Ch */ case    2:  		/* bc 12, CR0_EQ, 88 */
		/* 8207EC1Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8207EC74;  }
		/* 8207EC1Ch case    2:*/		return 0x8207EC20;
		  /* 8207EC20h */ case    3:  		/* cmplwi CR6, R11, 32 */
		/* 8207EC20h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 8207EC20h case    3:*/		return 0x8207EC24;
		  /* 8207EC24h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 8207EC24h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207EC50;  }
		/* 8207EC24h case    4:*/		return 0x8207EC28;
		  /* 8207EC28h */ case    5:  		/* cmplwi CR6, R11, 48 */
		/* 8207EC28h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000030);
		/* 8207EC28h case    5:*/		return 0x8207EC2C;
		  /* 8207EC2Ch */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8207EC2Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8207EC3C;  }
		/* 8207EC2Ch case    6:*/		return 0x8207EC30;
		  /* 8207EC30h */ case    7:  		/* lis R11, -32256 */
		/* 8207EC30h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207EC30h case    7:*/		return 0x8207EC34;
		  /* 8207EC34h */ case    8:  		/* lfs FR1, <#[R11 + 9612]> */
		/* 8207EC34h case    8:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x0000258C) );
		/* 8207EC34h case    8:*/		return 0x8207EC38;
		  /* 8207EC38h */ case    9:  		/* b 32 */
		/* 8207EC38h case    9:*/		return 0x8207EC58;
		/* 8207EC38h case    9:*/		return 0x8207EC3C;
	}
	return 0x8207EC3C;
} // Block from 8207EC14h-8207EC3Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC3C);
		  /* 8207EC3Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207EC3Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207EC3Ch case    0:*/		return 0x8207EC40;
		  /* 8207EC40h */ case    1:  		/* li R3, 1920 */
		/* 8207EC40h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x780);
		/* 8207EC40h case    1:*/		return 0x8207EC44;
		  /* 8207EC44h */ case    2:  		/* li R4, 2205 */
		/* 8207EC44h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x89D);
		/* 8207EC44h case    2:*/		return 0x8207EC48;
		  /* 8207EC48h */ case    3:  		/* lfs FR1, <#[R11 + 8720]> */
		/* 8207EC48h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002210) );
		/* 8207EC48h case    3:*/		return 0x8207EC4C;
		  /* 8207EC4Ch */ case    4:  		/* b 20 */
		/* 8207EC4Ch case    4:*/		return 0x8207EC60;
		/* 8207EC4Ch case    4:*/		return 0x8207EC50;
	}
	return 0x8207EC50;
} // Block from 8207EC3Ch-8207EC50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC50);
		  /* 8207EC50h */ case    0:  		/* lis R11, -32256 */
		/* 8207EC50h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207EC50h case    0:*/		return 0x8207EC54;
		  /* 8207EC54h */ case    1:  		/* lfs FR1, <#[R11 + 9608]> */
		/* 8207EC54h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002588) );
		/* 8207EC54h case    1:*/		return 0x8207EC58;
	}
	return 0x8207EC58;
} // Block from 8207EC50h-8207EC58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC58);
		  /* 8207EC58h */ case    0:  		/* li R4, 1470 */
		/* 8207EC58h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x5BE);
		/* 8207EC58h case    0:*/		return 0x8207EC5C;
		  /* 8207EC5Ch */ case    1:  		/* li R3, 1280 */
		/* 8207EC5Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x500);
		/* 8207EC5Ch case    1:*/		return 0x8207EC60;
	}
	return 0x8207EC60;
} // Block from 8207EC58h-8207EC60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC60);
		  /* 8207EC60h */ case    0:  		/* li R7, 0 */
		/* 8207EC60h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207EC60h case    0:*/		return 0x8207EC64;
		  /* 8207EC64h */ case    1:  		/* li R6, 2 */
		/* 8207EC64h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8207EC64h case    1:*/		return 0x8207EC68;
		  /* 8207EC68h */ case    2:  		/* bl 2024720 */
		/* 8207EC68h case    2:*/		regs.LR = 0x8207EC6C; return 0x8226D178;
		/* 8207EC68h case    2:*/		return 0x8207EC6C;
		  /* 8207EC6Ch */ case    3:  		/* li R3, 3 */
		/* 8207EC6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8207EC6Ch case    3:*/		return 0x8207EC70;
		  /* 8207EC70h */ case    4:  		/* b 108 */
		/* 8207EC70h case    4:*/		return 0x8207ECDC;
		/* 8207EC70h case    4:*/		return 0x8207EC74;
	}
	return 0x8207EC74;
} // Block from 8207EC60h-8207EC74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207EC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EC74);
		  /* 8207EC74h */ case    0:  		/* li R11, 6 */
		/* 8207EC74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8207EC74h case    0:*/		return 0x8207EC78;
		  /* 8207EC78h */ case    1:  		/* addi R10, R1, 72 */
		/* 8207EC78h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x48);
		/* 8207EC78h case    1:*/		return 0x8207EC7C;
		  /* 8207EC7Ch */ case    2:  		/* li R9, 0 */
		/* 8207EC7Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8207EC7Ch case    2:*/		return 0x8207EC80;
		  /* 8207EC80h */ case    3:  		/* mtspr CTR, R11 */
		/* 8207EC80h case    3:*/		regs.CTR = regs.R11;
		/* 8207EC80h case    3:*/		return 0x8207EC84;
		  /* 8207EC84h */ case    4:  		/* stdu R9, <#[R10 + 8]> */
		/* 8207EC84h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8207EC84h case    4:*/		return 0x8207EC88;
		  /* 8207EC88h */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 8207EC88h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207EC84;  }
		/* 8207EC88h case    5:*/		return 0x8207EC8C;
		  /* 8207EC8Ch */ case    6:  		/* addi R3, R1, 80 */
		/* 8207EC8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8207EC8Ch case    6:*/		return 0x8207EC90;
		  /* 8207EC90h */ case    7:  		/* bl 2024440 */
		/* 8207EC90h case    7:*/		regs.LR = 0x8207EC94; return 0x8226D088;
		/* 8207EC90h case    7:*/		return 0x8207EC94;
		  /* 8207EC94h */ case    8:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207EC94h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207EC94h case    8:*/		return 0x8207EC98;
		  /* 8207EC98h */ case    9:  		/* lwz R10, <#[R1 + 84]> */
		/* 8207EC98h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8207EC98h case    9:*/		return 0x8207EC9C;
		  /* 8207EC9Ch */ case   10:  		/* cmplwi CR6, R11, 1280 */
		/* 8207EC9Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000500);
		/* 8207EC9Ch case   10:*/		return 0x8207ECA0;
		  /* 8207ECA0h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 8207ECA0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8207ECAC;  }
		/* 8207ECA0h case   11:*/		return 0x8207ECA4;
		  /* 8207ECA4h */ case   12:  		/* cmplwi CR6, R10, 1470 */
		/* 8207ECA4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x000005BE);
		/* 8207ECA4h case   12:*/		return 0x8207ECA8;
		  /* 8207ECA8h */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 8207ECA8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8207ECBC;  }
		/* 8207ECA8h case   13:*/		return 0x8207ECAC;
	}
	return 0x8207ECAC;
} // Block from 8207EC74h-8207ECACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207ECACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ECAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ECAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ECAC);
		  /* 8207ECACh */ case    0:  		/* cmplwi CR6, R11, 1920 */
		/* 8207ECACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000780);
		/* 8207ECACh case    0:*/		return 0x8207ECB0;
		  /* 8207ECB0h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 8207ECB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207ECE0;  }
		/* 8207ECB0h case    1:*/		return 0x8207ECB4;
		  /* 8207ECB4h */ case    2:  		/* cmplwi CR6, R10, 2205 */
		/* 8207ECB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000089D);
		/* 8207ECB4h case    2:*/		return 0x8207ECB8;
		  /* 8207ECB8h */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 8207ECB8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207ECE0;  }
		/* 8207ECB8h case    3:*/		return 0x8207ECBC;
	}
	return 0x8207ECBC;
} // Block from 8207ECACh-8207ECBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207ECBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ECBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ECBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ECBC);
		  /* 8207ECBCh */ case    0:  		/* lis R11, -32256 */
		/* 8207ECBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207ECBCh case    0:*/		return 0x8207ECC0;
		  /* 8207ECC0h */ case    1:  		/* li R7, 0 */
		/* 8207ECC0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207ECC0h case    1:*/		return 0x8207ECC4;
		  /* 8207ECC4h */ case    2:  		/* li R6, 0 */
		/* 8207ECC4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207ECC4h case    2:*/		return 0x8207ECC8;
		  /* 8207ECC8h */ case    3:  		/* li R4, 0 */
		/* 8207ECC8h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207ECC8h case    3:*/		return 0x8207ECCC;
		  /* 8207ECCCh */ case    4:  		/* li R3, 0 */
		/* 8207ECCCh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207ECCCh case    4:*/		return 0x8207ECD0;
		  /* 8207ECD0h */ case    5:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 8207ECD0h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 8207ECD0h case    5:*/		return 0x8207ECD4;
		  /* 8207ECD4h */ case    6:  		/* bl 2024612 */
		/* 8207ECD4h case    6:*/		regs.LR = 0x8207ECD8; return 0x8226D178;
		/* 8207ECD4h case    6:*/		return 0x8207ECD8;
		  /* 8207ECD8h */ case    7:  		/* li R3, 0 */
		/* 8207ECD8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207ECD8h case    7:*/		return 0x8207ECDC;
	}
	return 0x8207ECDC;
} // Block from 8207ECBCh-8207ECDCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207ECDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ECDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ECDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ECDC);
		  /* 8207ECDCh */ case    0:  		/* bl -1652 */
		/* 8207ECDCh case    0:*/		regs.LR = 0x8207ECE0; return 0x8207E668;
		/* 8207ECDCh case    0:*/		return 0x8207ECE0;
	}
	return 0x8207ECE0;
} // Block from 8207ECDCh-8207ECE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207ECE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ECE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ECE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ECE0);
		  /* 8207ECE0h */ case    0:  		/* mr R3, R31 */
		/* 8207ECE0h case    0:*/		regs.R3 = regs.R31;
		/* 8207ECE0h case    0:*/		return 0x8207ECE4;
		  /* 8207ECE4h */ case    1:  		/* bl 2024580 */
		/* 8207ECE4h case    1:*/		regs.LR = 0x8207ECE8; return 0x8226D168;
		/* 8207ECE4h case    1:*/		return 0x8207ECE8;
	}
	return 0x8207ECE8;
} // Block from 8207ECE0h-8207ECE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207ECE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ECE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ECE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ECE8);
		  /* 8207ECE8h */ case    0:  		/* addi R3, R1, 128 */
		/* 8207ECE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8207ECE8h case    0:*/		return 0x8207ECEC;
		  /* 8207ECECh */ case    1:  		/* bl 2024556 */
		/* 8207ECECh case    1:*/		regs.LR = 0x8207ECF0; return 0x8226D158;
		/* 8207ECECh case    1:*/		return 0x8207ECF0;
		  /* 8207ECF0h */ case    2:  		/* lhz R11, <#[R1 + 200]> */
		/* 8207ECF0h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 8207ECF0h case    2:*/		return 0x8207ECF4;
		  /* 8207ECF4h */ case    3:  		/* lhz R10, <#[R1 + 202]> */
		/* 8207ECF4h case    3:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000CA) );
		/* 8207ECF4h case    3:*/		return 0x8207ECF8;
		  /* 8207ECF8h */ case    4:  		/* lhz R9, <#[R1 + 214]> */
		/* 8207ECF8h case    4:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000D6) );
		/* 8207ECF8h case    4:*/		return 0x8207ECFC;
		  /* 8207ECFCh */ case    5:  		/* stw R11, <#[R30 + 21952]> */
		/* 8207ECFCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000055C0) );
		/* 8207ECFCh case    5:*/		return 0x8207ED00;
		  /* 8207ED00h */ case    6:  		/* stw R10, <#[R30 + 21956]> */
		/* 8207ED00h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x000055C4) );
		/* 8207ED00h case    6:*/		return 0x8207ED04;
		  /* 8207ED04h */ case    7:  		/* stw R9, <#[R30 + 21960]> */
		/* 8207ED04h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x000055C8) );
		/* 8207ED04h case    7:*/		return 0x8207ED08;
		  /* 8207ED08h */ case    8:  		/* addi R1, R1, 240 */
		/* 8207ED08h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8207ED08h case    8:*/		return 0x8207ED0C;
		  /* 8207ED0Ch */ case    9:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207ED0Ch case    9:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207ED0Ch case    9:*/		return 0x8207ED10;
		  /* 8207ED10h */ case   10:  		/* mtspr LR, R12 */
		/* 8207ED10h case   10:*/		regs.LR = regs.R12;
		/* 8207ED10h case   10:*/		return 0x8207ED14;
		  /* 8207ED14h */ case   11:  		/* ld R30, <#[R1 - 24]> */
		/* 8207ED14h case   11:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207ED14h case   11:*/		return 0x8207ED18;
		  /* 8207ED18h */ case   12:  		/* ld R31, <#[R1 - 16]> */
		/* 8207ED18h case   12:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207ED18h case   12:*/		return 0x8207ED1C;
		  /* 8207ED1Ch */ case   13:  		/* bclr 20, CR0_LT */
		/* 8207ED1Ch case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207ED1Ch case   13:*/		return 0x8207ED20;
	}
	return 0x8207ED20;
} // Block from 8207ECE8h-8207ED20h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207ED20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ED20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ED20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ED20);
		  /* 8207ED20h */ case    0:  		/* mfspr R12, LR */
		/* 8207ED20h case    0:*/		regs.R12 = regs.LR;
		/* 8207ED20h case    0:*/		return 0x8207ED24;
		  /* 8207ED24h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207ED24h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207ED24h case    1:*/		return 0x8207ED28;
		  /* 8207ED28h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207ED28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207ED28h case    2:*/		return 0x8207ED2C;
		  /* 8207ED2Ch */ case    3:  		/* li R4, 0 */
		/* 8207ED2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207ED2Ch case    3:*/		return 0x8207ED30;
		  /* 8207ED30h */ case    4:  		/* bl 2024456 */
		/* 8207ED30h case    4:*/		regs.LR = 0x8207ED34; return 0x8226D138;
		/* 8207ED30h case    4:*/		return 0x8207ED34;
		  /* 8207ED34h */ case    5:  		/* bl 2023876 */
		/* 8207ED34h case    5:*/		regs.LR = 0x8207ED38; return 0x8226CEF8;
		/* 8207ED34h case    5:*/		return 0x8207ED38;
		  /* 8207ED38h */ case    6:  		/* cmpwi CR6, R3, 2 */
		/* 8207ED38h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207ED38h case    6:*/		return 0x8207ED3C;
		  /* 8207ED3Ch */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 8207ED3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8207ED58;  }
		/* 8207ED3Ch case    7:*/		return 0x8207ED40;
		  /* 8207ED40h */ case    8:  		/* lis R11, -32256 */
		/* 8207ED40h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207ED40h case    8:*/		return 0x8207ED44;
		  /* 8207ED44h */ case    9:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207ED44h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207ED44h case    9:*/		return 0x8207ED48;
		  /* 8207ED48h */ case   10:  		/* lwz R3, <#[R11]> */
		/* 8207ED48h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8207ED48h case   10:*/		return 0x8207ED4C;
		  /* 8207ED4Ch */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 8207ED4Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207ED4Ch case   11:*/		return 0x8207ED50;
		  /* 8207ED50h */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 8207ED50h case   12:*/		if ( regs.CR[6].eq ) { return 0x8207ED58;  }
		/* 8207ED50h case   12:*/		return 0x8207ED54;
		  /* 8207ED54h */ case   13:  		/* bl -540 */
		/* 8207ED54h case   13:*/		regs.LR = 0x8207ED58; return 0x8207EB38;
		/* 8207ED54h case   13:*/		return 0x8207ED58;
	}
	return 0x8207ED58;
} // Block from 8207ED20h-8207ED58h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207ED58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ED58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ED58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ED58);
		  /* 8207ED58h */ case    0:  		/* bl 2024496 */
		/* 8207ED58h case    0:*/		regs.LR = 0x8207ED5C; return 0x8226D188;
		/* 8207ED58h case    0:*/		return 0x8207ED5C;
		  /* 8207ED5Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 8207ED5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207ED5Ch case    1:*/		return 0x8207ED60;
		  /* 8207ED60h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207ED60h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207ED60h case    2:*/		return 0x8207ED64;
		  /* 8207ED64h */ case    3:  		/* mtspr LR, R12 */
		/* 8207ED64h case    3:*/		regs.LR = regs.R12;
		/* 8207ED64h case    3:*/		return 0x8207ED68;
		  /* 8207ED68h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207ED68h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207ED68h case    4:*/		return 0x8207ED6C;
	}
	return 0x8207ED6C;
} // Block from 8207ED58h-8207ED6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207ED6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ED6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ED6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ED6C);
		  /* 8207ED6Ch */ case    0:  		/* nop */
		/* 8207ED6Ch case    0:*/		cpu::op::nop();
		/* 8207ED6Ch case    0:*/		return 0x8207ED70;
	}
	return 0x8207ED70;
} // Block from 8207ED6Ch-8207ED70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207ED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207ED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207ED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207ED70);
		  /* 8207ED70h */ case    0:  		/* mfspr R12, LR */
		/* 8207ED70h case    0:*/		regs.R12 = regs.LR;
		/* 8207ED70h case    0:*/		return 0x8207ED74;
		  /* 8207ED74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207ED74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207ED74h case    1:*/		return 0x8207ED78;
		  /* 8207ED78h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207ED78h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207ED78h case    2:*/		return 0x8207ED7C;
		  /* 8207ED7Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207ED7Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207ED7Ch case    3:*/		return 0x8207ED80;
		  /* 8207ED80h */ case    4:  		/* lis R11, -32256 */
		/* 8207ED80h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207ED80h case    4:*/		return 0x8207ED84;
		  /* 8207ED84h */ case    5:  		/* lis R10, -32255 */
		/* 8207ED84h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8207ED84h case    5:*/		return 0x8207ED88;
		  /* 8207ED88h */ case    6:  		/* lis R9, -32248 */
		/* 8207ED88h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8208);
		/* 8207ED88h case    6:*/		return 0x8207ED8C;
		  /* 8207ED8Ch */ case    7:  		/* mr R31, R3 */
		/* 8207ED8Ch case    7:*/		regs.R31 = regs.R3;
		/* 8207ED8Ch case    7:*/		return 0x8207ED90;
		  /* 8207ED90h */ case    8:  		/* addi R7, R11, 23904 */
		/* 8207ED90h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x5D60);
		/* 8207ED90h case    8:*/		return 0x8207ED94;
		  /* 8207ED94h */ case    9:  		/* addi R6, R10, -32416 */
		/* 8207ED94h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFF8160);
		/* 8207ED94h case    9:*/		return 0x8207ED98;
		  /* 8207ED98h */ case   10:  		/* li R5, 0 */
		/* 8207ED98h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207ED98h case   10:*/		return 0x8207ED9C;
		  /* 8207ED9Ch */ case   11:  		/* addi R4, R9, -6416 */
		/* 8207ED9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFE6F0);
		/* 8207ED9Ch case   11:*/		return 0x8207EDA0;
		  /* 8207EDA0h */ case   12:  		/* lis R3, 21119 */
		/* 8207EDA0h case   12:*/		cpu::op::lis<0>(regs,&regs.R3,0x527F);
		/* 8207EDA0h case   12:*/		return 0x8207EDA4;
		  /* 8207EDA4h */ case   13:  		/* bl 2024452 */
		/* 8207EDA4h case   13:*/		regs.LR = 0x8207EDA8; return 0x8226D1A8;
		/* 8207EDA4h case   13:*/		return 0x8207EDA8;
		  /* 8207EDA8h */ case   14:  		/* bl 2023760 */
		/* 8207EDA8h case   14:*/		regs.LR = 0x8207EDAC; return 0x8226CEF8;
		/* 8207EDA8h case   14:*/		return 0x8207EDAC;
		  /* 8207EDACh */ case   15:  		/* cmpwi CR6, R3, 2 */
		/* 8207EDACh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207EDACh case   15:*/		return 0x8207EDB0;
		  /* 8207EDB0h */ case   16:  		/* bc 12, CR6_EQ, 36 */
		/* 8207EDB0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8207EDD4;  }
		/* 8207EDB0h case   16:*/		return 0x8207EDB4;
		  /* 8207EDB4h */ case   17:  		/* lis R11, -32217 */
		/* 8207EDB4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207EDB4h case   17:*/		return 0x8207EDB8;
		  /* 8207EDB8h */ case   18:  		/* li R4, 1 */
		/* 8207EDB8h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207EDB8h case   18:*/		return 0x8207EDBC;
		  /* 8207EDBCh */ case   19:  		/* addi R3, R11, 5880 */
		/* 8207EDBCh case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x16F8);
		/* 8207EDBCh case   19:*/		return 0x8207EDC0;
		  /* 8207EDC0h */ case   20:  		/* bl 2024312 */
		/* 8207EDC0h case   20:*/		regs.LR = 0x8207EDC4; return 0x8226D138;
		/* 8207EDC0h case   20:*/		return 0x8207EDC4;
		  /* 8207EDC4h */ case   21:  		/* lis R11, -32217 */
		/* 8207EDC4h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207EDC4h case   21:*/		return 0x8207EDC8;
		  /* 8207EDC8h */ case   22:  		/* li R4, 1 */
		/* 8207EDC8h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207EDC8h case   22:*/		return 0x8207EDCC;
		  /* 8207EDCCh */ case   23:  		/* addi R3, R11, 5896 */
		/* 8207EDCCh case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1708);
		/* 8207EDCCh case   23:*/		return 0x8207EDD0;
	}
	return 0x8207EDD0;
} // Block from 8207ED70h-8207EDD0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207EDD0h
// Function '?InitializePresentationParameters@D3D@@YAHPAVCDevice@1@PBU_D3DPRESENT_PARAMETERS_@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EDD0);
		  /* 8207EDD0h */ case    0:  		/* bl 2024296 */
		/* 8207EDD0h case    0:*/		regs.LR = 0x8207EDD4; return 0x8226D138;
		/* 8207EDD0h case    0:*/		return 0x8207EDD4;
	}
	return 0x8207EDD4;
} // Block from 8207EDD0h-8207EDD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EDD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EDD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EDD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EDD4);
		  /* 8207EDD4h */ case    0:  		/* li R11, 0 */
		/* 8207EDD4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207EDD4h case    0:*/		return 0x8207EDD8;
		  /* 8207EDD8h */ case    1:  		/* lis R10, -32249 */
		/* 8207EDD8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8207);
		/* 8207EDD8h case    1:*/		return 0x8207EDDC;
		  /* 8207EDDCh */ case    2:  		/* stw R11, <#[R31 + 17120]> */
		/* 8207EDDCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000042E0) );
		/* 8207EDDCh case    2:*/		return 0x8207EDE0;
		  /* 8207EDE0h */ case    3:  		/* mr R4, R31 */
		/* 8207EDE0h case    3:*/		regs.R4 = regs.R31;
		/* 8207EDE0h case    3:*/		return 0x8207EDE4;
		  /* 8207EDE4h */ case    4:  		/* addi R3, R10, 10848 */
		/* 8207EDE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0x2A60);
		/* 8207EDE4h case    4:*/		return 0x8207EDE8;
		  /* 8207EDE8h */ case    5:  		/* bl 2024368 */
		/* 8207EDE8h case    5:*/		regs.LR = 0x8207EDEC; return 0x8226D198;
		/* 8207EDE8h case    5:*/		return 0x8207EDEC;
		  /* 8207EDECh */ case    6:  		/* li R3, 1 */
		/* 8207EDECh case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207EDECh case    6:*/		return 0x8207EDF0;
		  /* 8207EDF0h */ case    7:  		/* addi R1, R1, 96 */
		/* 8207EDF0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207EDF0h case    7:*/		return 0x8207EDF4;
		  /* 8207EDF4h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EDF4h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EDF4h case    8:*/		return 0x8207EDF8;
		  /* 8207EDF8h */ case    9:  		/* mtspr LR, R12 */
		/* 8207EDF8h case    9:*/		regs.LR = regs.R12;
		/* 8207EDF8h case    9:*/		return 0x8207EDFC;
		  /* 8207EDFCh */ case   10:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EDFCh case   10:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EDFCh case   10:*/		return 0x8207EE00;
		  /* 8207EE00h */ case   11:  		/* bclr 20, CR0_LT */
		/* 8207EE00h case   11:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EE00h case   11:*/		return 0x8207EE04;
	}
	return 0x8207EE04;
} // Block from 8207EDD4h-8207EE04h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207EE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EE04);
		  /* 8207EE04h */ case    0:  		/* nop */
		/* 8207EE04h case    0:*/		cpu::op::nop();
		/* 8207EE04h case    0:*/		return 0x8207EE08;
	}
	return 0x8207EE08;
} // Block from 8207EE04h-8207EE08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EE08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EE08);
		  /* 8207EE08h */ case    0:  		/* mfspr R12, LR */
		/* 8207EE08h case    0:*/		regs.R12 = regs.LR;
		/* 8207EE08h case    0:*/		return 0x8207EE0C;
		  /* 8207EE0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EE0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EE0Ch case    1:*/		return 0x8207EE10;
		  /* 8207EE10h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207EE10h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EE10h case    2:*/		return 0x8207EE14;
		  /* 8207EE14h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207EE14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207EE14h case    3:*/		return 0x8207EE18;
		  /* 8207EE18h */ case    4:  		/* lis R11, -32217 */
		/* 8207EE18h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207EE18h case    4:*/		return 0x8207EE1C;
		  /* 8207EE1Ch */ case    5:  		/* li R10, 1 */
		/* 8207EE1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8207EE1Ch case    5:*/		return 0x8207EE20;
		  /* 8207EE20h */ case    6:  		/* mr R31, R3 */
		/* 8207EE20h case    6:*/		regs.R31 = regs.R3;
		/* 8207EE20h case    6:*/		return 0x8207EE24;
		  /* 8207EE24h */ case    7:  		/* stw R10, <#[R3 + 60]> */
		/* 8207EE24h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 8207EE24h case    7:*/		return 0x8207EE28;
		  /* 8207EE28h */ case    8:  		/* ld R11, <#[R11 + 1672]> */
		/* 8207EE28h case    8:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000688) );
		/* 8207EE28h case    8:*/		return 0x8207EE2C;
		  /* 8207EE2Ch */ case    9:  		/* std R11, <#[R3 + 11008]> */
		/* 8207EE2Ch case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00002B00) );
		/* 8207EE2Ch case    9:*/		return 0x8207EE30;
		  /* 8207EE30h */ case   10:  		/* bl 38248 */
		/* 8207EE30h case   10:*/		regs.LR = 0x8207EE34; return 0x82088398;
		/* 8207EE30h case   10:*/		return 0x8207EE34;
		  /* 8207EE34h */ case   11:  		/* stw R3, <#[R31 + 11016]> */
		/* 8207EE34h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00002B08) );
		/* 8207EE34h case   11:*/		return 0x8207EE38;
		  /* 8207EE38h */ case   12:  		/* bl 2023616 */
		/* 8207EE38h case   12:*/		regs.LR = 0x8207EE3C; return 0x8226CEF8;
		/* 8207EE38h case   12:*/		return 0x8207EE3C;
		  /* 8207EE3Ch */ case   13:  		/* addi R11, R3, -2 */
		/* 8207EE3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFE);
		/* 8207EE3Ch case   13:*/		return 0x8207EE40;
		  /* 8207EE40h */ case   14:  		/* lis R4, -19072 */
		/* 8207EE40h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 8207EE40h case   14:*/		return 0x8207EE44;
		  /* 8207EE44h */ case   15:  		/* cntlzw R11, R11 */
		/* 8207EE44h case   15:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8207EE44h case   15:*/		return 0x8207EE48;
		  /* 8207EE48h */ case   16:  		/* li R3, 4800 */
		/* 8207EE48h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x12C0);
		/* 8207EE48h case   16:*/		return 0x8207EE4C;
		  /* 8207EE4Ch */ case   17:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8207EE4Ch case   17:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8207EE4Ch case   17:*/		return 0x8207EE50;
		  /* 8207EE50h */ case   18:  		/* stw R11, <#[R31 + 11020]> */
		/* 8207EE50h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002B0C) );
		/* 8207EE50h case   18:*/		return 0x8207EE54;
		  /* 8207EE54h */ case   19:  		/* bl 37804 */
		/* 8207EE54h case   19:*/		regs.LR = 0x8207EE58; return 0x82088200;
		/* 8207EE54h case   19:*/		return 0x8207EE58;
		  /* 8207EE58h */ case   20:  		/* addic R11, R3, -1 */
		/* 8207EE58h case   20:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 8207EE58h case   20:*/		return 0x8207EE5C;
		  /* 8207EE5Ch */ case   21:  		/* stw R3, <#[R31 + 17136]> */
		/* 8207EE5Ch case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000042F0) );
		/* 8207EE5Ch case   21:*/		return 0x8207EE60;
		  /* 8207EE60h */ case   22:  		/* subfe R3, R11, R3 */
		/* 8207EE60h case   22:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 8207EE60h case   22:*/		return 0x8207EE64;
		  /* 8207EE64h */ case   23:  		/* addi R1, R1, 96 */
		/* 8207EE64h case   23:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207EE64h case   23:*/		return 0x8207EE68;
		  /* 8207EE68h */ case   24:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EE68h case   24:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EE68h case   24:*/		return 0x8207EE6C;
		  /* 8207EE6Ch */ case   25:  		/* mtspr LR, R12 */
		/* 8207EE6Ch case   25:*/		regs.LR = regs.R12;
		/* 8207EE6Ch case   25:*/		return 0x8207EE70;
		  /* 8207EE70h */ case   26:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EE70h case   26:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EE70h case   26:*/		return 0x8207EE74;
		  /* 8207EE74h */ case   27:  		/* bclr 20, CR0_LT */
		/* 8207EE74h case   27:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EE74h case   27:*/		return 0x8207EE78;
	}
	return 0x8207EE78;
} // Block from 8207EE08h-8207EE78h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8207EE78h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EE78);
		  /* 8207EE78h */ case    0:  		/* mfspr R12, LR */
		/* 8207EE78h case    0:*/		regs.R12 = regs.LR;
		/* 8207EE78h case    0:*/		return 0x8207EE7C;
		  /* 8207EE7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EE7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EE7Ch case    1:*/		return 0x8207EE80;
		  /* 8207EE80h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207EE80h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EE80h case    2:*/		return 0x8207EE84;
		  /* 8207EE84h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207EE84h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207EE84h case    3:*/		return 0x8207EE88;
		  /* 8207EE88h */ case    4:  		/* mr R31, R3 */
		/* 8207EE88h case    4:*/		regs.R31 = regs.R3;
		/* 8207EE88h case    4:*/		return 0x8207EE8C;
		  /* 8207EE8Ch */ case    5:  		/* bl -51092 */
		/* 8207EE8Ch case    5:*/		regs.LR = 0x8207EE90; return 0x820726F8;
		/* 8207EE8Ch case    5:*/		return 0x8207EE90;
		  /* 8207EE90h */ case    6:  		/* li R11, -1 */
		/* 8207EE90h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207EE90h case    6:*/		return 0x8207EE94;
		  /* 8207EE94h */ case    7:  		/* mr R3, R31 */
		/* 8207EE94h case    7:*/		regs.R3 = regs.R31;
		/* 8207EE94h case    7:*/		return 0x8207EE98;
		  /* 8207EE98h */ case    8:  		/* stw R11, <#[R31 + 21968]> */
		/* 8207EE98h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055D0) );
		/* 8207EE98h case    8:*/		return 0x8207EE9C;
		  /* 8207EE9Ch */ case    9:  		/* stw R11, <#[R31 + 21972]> */
		/* 8207EE9Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055D4) );
		/* 8207EE9Ch case    9:*/		return 0x8207EEA0;
		  /* 8207EEA0h */ case   10:  		/* stw R11, <#[R31 + 15340]> */
		/* 8207EEA0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00003BEC) );
		/* 8207EEA0h case   10:*/		return 0x8207EEA4;
		  /* 8207EEA4h */ case   11:  		/* bl 31012 */
		/* 8207EEA4h case   11:*/		regs.LR = 0x8207EEA8; return 0x820867C8;
		/* 8207EEA4h case   11:*/		return 0x8207EEA8;
		  /* 8207EEA8h */ case   12:  		/* mr R3, R31 */
		/* 8207EEA8h case   12:*/		regs.R3 = regs.R31;
		/* 8207EEA8h case   12:*/		return 0x8207EEAC;
		  /* 8207EEACh */ case   13:  		/* bl -1884 */
		/* 8207EEACh case   13:*/		regs.LR = 0x8207EEB0; return 0x8207E750;
		/* 8207EEACh case   13:*/		return 0x8207EEB0;
		  /* 8207EEB0h */ case   14:  		/* li R3, 1 */
		/* 8207EEB0h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207EEB0h case   14:*/		return 0x8207EEB4;
		  /* 8207EEB4h */ case   15:  		/* addi R1, R1, 96 */
		/* 8207EEB4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207EEB4h case   15:*/		return 0x8207EEB8;
		  /* 8207EEB8h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EEB8h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EEB8h case   16:*/		return 0x8207EEBC;
		  /* 8207EEBCh */ case   17:  		/* mtspr LR, R12 */
		/* 8207EEBCh case   17:*/		regs.LR = regs.R12;
		/* 8207EEBCh case   17:*/		return 0x8207EEC0;
		  /* 8207EEC0h */ case   18:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EEC0h case   18:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EEC0h case   18:*/		return 0x8207EEC4;
		  /* 8207EEC4h */ case   19:  		/* bclr 20, CR0_LT */
		/* 8207EEC4h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EEC4h case   19:*/		return 0x8207EEC8;
	}
	return 0x8207EEC8;
} // Block from 8207EE78h-8207EEC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8207EEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EEC8);
		  /* 8207EEC8h */ case    0:  		/* mfspr R12, LR */
		/* 8207EEC8h case    0:*/		regs.R12 = regs.LR;
		/* 8207EEC8h case    0:*/		return 0x8207EECC;
		  /* 8207EECCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EECCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EECCh case    1:*/		return 0x8207EED0;
		  /* 8207EED0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207EED0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EED0h case    2:*/		return 0x8207EED4;
		  /* 8207EED4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207EED4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EED4h case    3:*/		return 0x8207EED8;
		  /* 8207EED8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207EED8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207EED8h case    4:*/		return 0x8207EEDC;
		  /* 8207EEDCh */ case    5:  		/* lwz R11, <#[R3 + 48]> */
		/* 8207EEDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 8207EEDCh case    5:*/		return 0x8207EEE0;
		  /* 8207EEE0h */ case    6:  		/* mr R31, R3 */
		/* 8207EEE0h case    6:*/		regs.R31 = regs.R3;
		/* 8207EEE0h case    6:*/		return 0x8207EEE4;
		  /* 8207EEE4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8207EEE4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207EEE4h case    7:*/		return 0x8207EEE8;
		  /* 8207EEE8h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 8207EEE8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207EEF0;  }
		/* 8207EEE8h case    8:*/		return 0x8207EEEC;
		  /* 8207EEECh */ case    9:  		/* bl -43828 */
		/* 8207EEECh case    9:*/		regs.LR = 0x8207EEF0; return 0x820743B8;
		/* 8207EEECh case    9:*/		return 0x8207EEF0;
	}
	return 0x8207EEF0;
} // Block from 8207EEC8h-8207EEF0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207EEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EEF0);
		  /* 8207EEF0h */ case    0:  		/* lwz R3, <#[R31 + 22048]> */
		/* 8207EEF0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00005620) );
		/* 8207EEF0h case    0:*/		return 0x8207EEF4;
		  /* 8207EEF4h */ case    1:  		/* li R30, 0 */
		/* 8207EEF4h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207EEF4h case    1:*/		return 0x8207EEF8;
		  /* 8207EEF8h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8207EEF8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EEF8h case    2:*/		return 0x8207EEFC;
		  /* 8207EEFCh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8207EEFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8207EF0C;  }
		/* 8207EEFCh case    3:*/		return 0x8207EF00;
		  /* 8207EF00h */ case    4:  		/* lis R4, 9344 */
		/* 8207EF00h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207EF00h case    4:*/		return 0x8207EF04;
		  /* 8207EF04h */ case    5:  		/* bl 37940 */
		/* 8207EF04h case    5:*/		regs.LR = 0x8207EF08; return 0x82088338;
		/* 8207EF04h case    5:*/		return 0x8207EF08;
		  /* 8207EF08h */ case    6:  		/* stw R30, <#[R31 + 22048]> */
		/* 8207EF08h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005620) );
		/* 8207EF08h case    6:*/		return 0x8207EF0C;
	}
	return 0x8207EF0C;
} // Block from 8207EEF0h-8207EF0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207EF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EF0C);
		  /* 8207EF0Ch */ case    0:  		/* lwz R3, <#[R31 + 22044]> */
		/* 8207EF0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000561C) );
		/* 8207EF0Ch case    0:*/		return 0x8207EF10;
		  /* 8207EF10h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207EF10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207EF10h case    1:*/		return 0x8207EF14;
		  /* 8207EF14h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8207EF14h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207EF28;  }
		/* 8207EF14h case    2:*/		return 0x8207EF18;
		  /* 8207EF18h */ case    3:  		/* lis R4, -20096 */
		/* 8207EF18h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207EF18h case    3:*/		return 0x8207EF1C;
		  /* 8207EF1Ch */ case    4:  		/* bl 37916 */
		/* 8207EF1Ch case    4:*/		regs.LR = 0x8207EF20; return 0x82088338;
		/* 8207EF1Ch case    4:*/		return 0x8207EF20;
		  /* 8207EF20h */ case    5:  		/* stw R30, <#[R31 + 22044]> */
		/* 8207EF20h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000561C) );
		/* 8207EF20h case    5:*/		return 0x8207EF24;
		  /* 8207EF24h */ case    6:  		/* stw R30, <#[R31 + 22052]> */
		/* 8207EF24h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005624) );
		/* 8207EF24h case    6:*/		return 0x8207EF28;
	}
	return 0x8207EF28;
} // Block from 8207EF0Ch-8207EF28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207EF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EF28);
		  /* 8207EF28h */ case    0:  		/* stw R30, <#[R31 + 22056]> */
		/* 8207EF28h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005628) );
		/* 8207EF28h case    0:*/		return 0x8207EF2C;
		  /* 8207EF2Ch */ case    1:  		/* addi R1, R1, 112 */
		/* 8207EF2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207EF2Ch case    1:*/		return 0x8207EF30;
		  /* 8207EF30h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207EF30h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EF30h case    2:*/		return 0x8207EF34;
		  /* 8207EF34h */ case    3:  		/* mtspr LR, R12 */
		/* 8207EF34h case    3:*/		regs.LR = regs.R12;
		/* 8207EF34h case    3:*/		return 0x8207EF38;
		  /* 8207EF38h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8207EF38h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EF38h case    4:*/		return 0x8207EF3C;
		  /* 8207EF3Ch */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8207EF3Ch case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EF3Ch case    5:*/		return 0x8207EF40;
		  /* 8207EF40h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8207EF40h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207EF40h case    6:*/		return 0x8207EF44;
	}
	return 0x8207EF44;
} // Block from 8207EF28h-8207EF44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207EF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EF44);
		  /* 8207EF44h */ case    0:  		/* nop */
		/* 8207EF44h case    0:*/		cpu::op::nop();
		/* 8207EF44h case    0:*/		return 0x8207EF48;
	}
	return 0x8207EF48;
} // Block from 8207EF44h-8207EF48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207EF48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EF48);
		  /* 8207EF48h */ case    0:  		/* mfspr R12, LR */
		/* 8207EF48h case    0:*/		regs.R12 = regs.LR;
		/* 8207EF48h case    0:*/		return 0x8207EF4C;
		  /* 8207EF4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207EF4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207EF4Ch case    1:*/		return 0x8207EF50;
		  /* 8207EF50h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207EF50h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207EF50h case    2:*/		return 0x8207EF54;
		  /* 8207EF54h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207EF54h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207EF54h case    3:*/		return 0x8207EF58;
		  /* 8207EF58h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207EF58h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207EF58h case    4:*/		return 0x8207EF5C;
		  /* 8207EF5Ch */ case    5:  		/* lwz R11, <#[R3 + 48]> */
		/* 8207EF5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 8207EF5Ch case    5:*/		return 0x8207EF60;
		  /* 8207EF60h */ case    6:  		/* mr R31, R3 */
		/* 8207EF60h case    6:*/		regs.R31 = regs.R3;
		/* 8207EF60h case    6:*/		return 0x8207EF64;
		  /* 8207EF64h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 8207EF64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207EF64h case    7:*/		return 0x8207EF68;
		  /* 8207EF68h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 8207EF68h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207EF70;  }
		/* 8207EF68h case    8:*/		return 0x8207EF6C;
		  /* 8207EF6Ch */ case    9:  		/* bl -7980 */
		/* 8207EF6Ch case    9:*/		regs.LR = 0x8207EF70; return 0x8207D040;
		/* 8207EF6Ch case    9:*/		return 0x8207EF70;
	}
	return 0x8207EF70;
} // Block from 8207EF48h-8207EF70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207EF70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EF70);
		  /* 8207EF70h */ case    0:  		/* lbz R11, <#[R31 + 11068]> */
		/* 8207EF70h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 8207EF70h case    0:*/		return 0x8207EF74;
		  /* 8207EF74h */ case    1:  		/* rlwinm. R11, R11, 0, 0, 24 */
		/* 8207EF74h case    1:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R11,regs.R11);
		/* 8207EF74h case    1:*/		return 0x8207EF78;
		  /* 8207EF78h */ case    2:  		/* bc 4, CR0_EQ, 364 */
		/* 8207EF78h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8207F0E4;  }
		/* 8207EF78h case    2:*/		return 0x8207EF7C;
		  /* 8207EF7Ch */ case    3:  		/* li R6, 0 */
		/* 8207EF7Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207EF7Ch case    3:*/		return 0x8207EF80;
		  /* 8207EF80h */ case    4:  		/* li R5, 0 */
		/* 8207EF80h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8207EF80h case    4:*/		return 0x8207EF84;
		  /* 8207EF84h */ case    5:  		/* li R4, 0 */
		/* 8207EF84h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207EF84h case    5:*/		return 0x8207EF88;
		  /* 8207EF88h */ case    6:  		/* mr R3, R31 */
		/* 8207EF88h case    6:*/		regs.R3 = regs.R31;
		/* 8207EF88h case    6:*/		return 0x8207EF8C;
		  /* 8207EF8Ch */ case    7:  		/* bl -5764 */
		/* 8207EF8Ch case    7:*/		regs.LR = 0x8207EF90; return 0x8207D908;
		/* 8207EF8Ch case    7:*/		return 0x8207EF90;
		  /* 8207EF90h */ case    8:  		/* mr R3, R31 */
		/* 8207EF90h case    8:*/		regs.R3 = regs.R31;
		/* 8207EF90h case    8:*/		return 0x8207EF94;
		  /* 8207EF94h */ case    9:  		/* bl -2564 */
		/* 8207EF94h case    9:*/		regs.LR = 0x8207EF98; return 0x8207E590;
		/* 8207EF94h case    9:*/		return 0x8207EF98;
		  /* 8207EF98h */ case   10:  		/* lwz R11, <#[R31 + 48]> */
		/* 8207EF98h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8207EF98h case   10:*/		return 0x8207EF9C;
		  /* 8207EF9Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8207EF9Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207EF9Ch case   11:*/		return 0x8207EFA0;
		  /* 8207EFA0h */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 8207EFA0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8207EFA8;  }
		/* 8207EFA0h case   12:*/		return 0x8207EFA4;
		  /* 8207EFA4h */ case   13:  		/* bl -44012 */
		/* 8207EFA4h case   13:*/		regs.LR = 0x8207EFA8; return 0x820743B8;
		/* 8207EFA4h case   13:*/		return 0x8207EFA8;
	}
	return 0x8207EFA8;
} // Block from 8207EF70h-8207EFA8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207EFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EFA8);
		  /* 8207EFA8h */ case    0:  		/* mr R3, R31 */
		/* 8207EFA8h case    0:*/		regs.R3 = regs.R31;
		/* 8207EFA8h case    0:*/		return 0x8207EFAC;
		  /* 8207EFACh */ case    1:  		/* bl -228 */
		/* 8207EFACh case    1:*/		regs.LR = 0x8207EFB0; return 0x8207EEC8;
		/* 8207EFACh case    1:*/		return 0x8207EFB0;
		  /* 8207EFB0h */ case    2:  		/* bl 2023240 */
		/* 8207EFB0h case    2:*/		regs.LR = 0x8207EFB4; return 0x8226CEF8;
		/* 8207EFB0h case    2:*/		return 0x8207EFB4;
		  /* 8207EFB4h */ case    3:  		/* cmpwi CR6, R3, 2 */
		/* 8207EFB4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207EFB4h case    3:*/		return 0x8207EFB8;
		  /* 8207EFB8h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8207EFB8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207EFC4;  }
		/* 8207EFB8h case    4:*/		return 0x8207EFBC;
		  /* 8207EFBCh */ case    5:  		/* mr R3, R31 */
		/* 8207EFBCh case    5:*/		regs.R3 = regs.R31;
		/* 8207EFBCh case    5:*/		return 0x8207EFC0;
		  /* 8207EFC0h */ case    6:  		/* bl 6128 */
		/* 8207EFC0h case    6:*/		regs.LR = 0x8207EFC4; return 0x820807B0;
		/* 8207EFC0h case    6:*/		return 0x8207EFC4;
	}
	return 0x8207EFC4;
} // Block from 8207EFA8h-8207EFC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207EFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EFC4);
		  /* 8207EFC4h */ case    0:  		/* mr R3, R31 */
		/* 8207EFC4h case    0:*/		regs.R3 = regs.R31;
		/* 8207EFC4h case    0:*/		return 0x8207EFC8;
		  /* 8207EFC8h */ case    1:  		/* bl -24792 */
		/* 8207EFC8h case    1:*/		regs.LR = 0x8207EFCC; return 0x82078EF0;
		/* 8207EFC8h case    1:*/		return 0x8207EFCC;
		  /* 8207EFCCh */ case    2:  		/* li R3, 0 */
		/* 8207EFCCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207EFCCh case    2:*/		return 0x8207EFD0;
		  /* 8207EFD0h */ case    3:  		/* bl 2023480 */
		/* 8207EFD0h case    3:*/		regs.LR = 0x8207EFD4; return 0x8226D008;
		/* 8207EFD0h case    3:*/		return 0x8207EFD4;
		  /* 8207EFD4h */ case    4:  		/* bl 2023204 */
		/* 8207EFD4h case    4:*/		regs.LR = 0x8207EFD8; return 0x8226CEF8;
		/* 8207EFD4h case    4:*/		return 0x8207EFD8;
		  /* 8207EFD8h */ case    5:  		/* cmpwi CR6, R3, 2 */
		/* 8207EFD8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207EFD8h case    5:*/		return 0x8207EFDC;
		  /* 8207EFDCh */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8207EFDCh case    6:*/		if ( regs.CR[6].eq ) { return 0x8207EFF0;  }
		/* 8207EFDCh case    6:*/		return 0x8207EFE0;
		  /* 8207EFE0h */ case    7:  		/* mr R3, R31 */
		/* 8207EFE0h case    7:*/		regs.R3 = regs.R31;
		/* 8207EFE0h case    7:*/		return 0x8207EFE4;
		  /* 8207EFE4h */ case    8:  		/* bl -1196 */
		/* 8207EFE4h case    8:*/		regs.LR = 0x8207EFE8; return 0x8207EB38;
		/* 8207EFE4h case    8:*/		return 0x8207EFE8;
		  /* 8207EFE8h */ case    9:  		/* li R3, 0 */
		/* 8207EFE8h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207EFE8h case    9:*/		return 0x8207EFEC;
		  /* 8207EFECh */ case   10:  		/* bl -2436 */
		/* 8207EFECh case   10:*/		regs.LR = 0x8207EFF0; return 0x8207E668;
		/* 8207EFECh case   10:*/		return 0x8207EFF0;
	}
	return 0x8207EFF0;
} // Block from 8207EFC4h-8207EFF0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207EFF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207EFF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207EFF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207EFF0);
		  /* 8207EFF0h */ case    0:  		/* mr R3, R31 */
		/* 8207EFF0h case    0:*/		regs.R3 = regs.R31;
		/* 8207EFF0h case    0:*/		return 0x8207EFF4;
		  /* 8207EFF4h */ case    1:  		/* bl -1596 */
		/* 8207EFF4h case    1:*/		regs.LR = 0x8207EFF8; return 0x8207E9B8;
		/* 8207EFF4h case    1:*/		return 0x8207EFF8;
		  /* 8207EFF8h */ case    2:  		/* mr R3, R31 */
		/* 8207EFF8h case    2:*/		regs.R3 = regs.R31;
		/* 8207EFF8h case    2:*/		return 0x8207EFFC;
		  /* 8207EFFCh */ case    3:  		/* bl -8892 */
		/* 8207EFFCh case    3:*/		regs.LR = 0x8207F000; return 0x8207CD40;
		/* 8207EFFCh case    3:*/		return 0x8207F000;
		  /* 8207F000h */ case    4:  		/* mr R3, R31 */
		/* 8207F000h case    4:*/		regs.R3 = regs.R31;
		/* 8207F000h case    4:*/		return 0x8207F004;
		  /* 8207F004h */ case    5:  		/* bl -8564 */
		/* 8207F004h case    5:*/		regs.LR = 0x8207F008; return 0x8207CE90;
		/* 8207F004h case    5:*/		return 0x8207F008;
		  /* 8207F008h */ case    6:  		/* mr R3, R31 */
		/* 8207F008h case    6:*/		regs.R3 = regs.R31;
		/* 8207F008h case    6:*/		return 0x8207F00C;
		  /* 8207F00Ch */ case    7:  		/* bl 26404 */
		/* 8207F00Ch case    7:*/		regs.LR = 0x8207F010; return 0x82085730;
		/* 8207F00Ch case    7:*/		return 0x8207F010;
		  /* 8207F010h */ case    8:  		/* mr R3, R31 */
		/* 8207F010h case    8:*/		regs.R3 = regs.R31;
		/* 8207F010h case    8:*/		return 0x8207F014;
		  /* 8207F014h */ case    9:  		/* bl -91628 */
		/* 8207F014h case    9:*/		regs.LR = 0x8207F018; return 0x82068A28;
		/* 8207F014h case    9:*/		return 0x8207F018;
		  /* 8207F018h */ case   10:  		/* lis R11, -32256 */
		/* 8207F018h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F018h case   10:*/		return 0x8207F01C;
		  /* 8207F01Ch */ case   11:  		/* li R30, 0 */
		/* 8207F01Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207F01Ch case   11:*/		return 0x8207F020;
		  /* 8207F020h */ case   12:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8207F020h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8207F020h case   12:*/		return 0x8207F024;
		  /* 8207F024h */ case   13:  		/* lwz R11, <#[R11]> */
		/* 8207F024h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F024h case   13:*/		return 0x8207F028;
		  /* 8207F028h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8207F028h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207F028h case   14:*/		return 0x8207F02C;
		  /* 8207F02Ch */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 8207F02Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8207F038;  }
		/* 8207F02Ch case   15:*/		return 0x8207F030;
		  /* 8207F030h */ case   16:  		/* lwz R11, <#[R11 + 32]> */
		/* 8207F030h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8207F030h case   16:*/		return 0x8207F034;
		  /* 8207F034h */ case   17:  		/* b 8 */
		/* 8207F034h case   17:*/		return 0x8207F03C;
		/* 8207F034h case   17:*/		return 0x8207F038;
	}
	return 0x8207F038;
} // Block from 8207EFF0h-8207F038h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207F038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F038);
		  /* 8207F038h */ case    0:  		/* mr R11, R30 */
		/* 8207F038h case    0:*/		regs.R11 = regs.R30;
		/* 8207F038h case    0:*/		return 0x8207F03C;
	}
	return 0x8207F03C;
} // Block from 8207F038h-8207F03Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F03Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F03C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F03C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F03C);
		  /* 8207F03Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8207F03Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207F03Ch case    0:*/		return 0x8207F040;
		  /* 8207F040h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8207F040h case    1:*/		if ( regs.CR[6].eq ) { return 0x8207F060;  }
		/* 8207F040h case    1:*/		return 0x8207F044;
		  /* 8207F044h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8207F044h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F044h case    2:*/		return 0x8207F048;
		  /* 8207F048h */ case    3:  		/* cmplwi CR6, R10, 8 */
		/* 8207F048h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 8207F048h case    3:*/		return 0x8207F04C;
		  /* 8207F04Ch */ case    4:  		/* bc 4, CR6_GT, 12 */
		/* 8207F04Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207F058;  }
		/* 8207F04Ch case    4:*/		return 0x8207F050;
		  /* 8207F050h */ case    5:  		/* stw R30, <#[R11 + 4]> */
		/* 8207F050h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8207F050h case    5:*/		return 0x8207F054;
		  /* 8207F054h */ case    6:  		/* stw R30, <#[R11 + 8]> */
		/* 8207F054h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8207F054h case    6:*/		return 0x8207F058;
	}
	return 0x8207F058;
} // Block from 8207F03Ch-8207F058h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207F058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F058);
		  /* 8207F058h */ case    0:  		/* stw R30, <#[R11 + 24]> */
		/* 8207F058h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 8207F058h case    0:*/		return 0x8207F05C;
		  /* 8207F05Ch */ case    1:  		/* stw R30, <#[R11 + 28]> */
		/* 8207F05Ch case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000001C) );
		/* 8207F05Ch case    1:*/		return 0x8207F060;
	}
	return 0x8207F060;
} // Block from 8207F058h-8207F060h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207F060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F060);
		  /* 8207F060h */ case    0:  		/* li R4, 0 */
		/* 8207F060h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F060h case    0:*/		return 0x8207F064;
		  /* 8207F064h */ case    1:  		/* li R3, 0 */
		/* 8207F064h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207F064h case    1:*/		return 0x8207F068;
		  /* 8207F068h */ case    2:  		/* bl 2023728 */
		/* 8207F068h case    2:*/		regs.LR = 0x8207F06C; return 0x8226D198;
		/* 8207F068h case    2:*/		return 0x8207F06C;
		  /* 8207F06Ch */ case    3:  		/* li R4, 0 */
		/* 8207F06Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F06Ch case    3:*/		return 0x8207F070;
		  /* 8207F070h */ case    4:  		/* mr R3, R31 */
		/* 8207F070h case    4:*/		regs.R3 = regs.R31;
		/* 8207F070h case    4:*/		return 0x8207F074;
		  /* 8207F074h */ case    5:  		/* bl -44100 */
		/* 8207F074h case    5:*/		regs.LR = 0x8207F078; return 0x82074430;
		/* 8207F074h case    5:*/		return 0x8207F078;
		  /* 8207F078h */ case    6:  		/* lis R4, -20096 */
		/* 8207F078h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207F078h case    6:*/		return 0x8207F07C;
		  /* 8207F07Ch */ case    7:  		/* lwz R3, <#[R31 + 11028]> */
		/* 8207F07Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00002B14) );
		/* 8207F07Ch case    7:*/		return 0x8207F080;
		  /* 8207F080h */ case    8:  		/* bl 37560 */
		/* 8207F080h case    8:*/		regs.LR = 0x8207F084; return 0x82088338;
		/* 8207F080h case    8:*/		return 0x8207F084;
		  /* 8207F084h */ case    9:  		/* lis R4, -20096 */
		/* 8207F084h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207F084h case    9:*/		return 0x8207F088;
		  /* 8207F088h */ case   10:  		/* lwz R3, <#[R31 + 11024]> */
		/* 8207F088h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207F088h case   10:*/		return 0x8207F08C;
		  /* 8207F08Ch */ case   11:  		/* bl 37548 */
		/* 8207F08Ch case   11:*/		regs.LR = 0x8207F090; return 0x82088338;
		/* 8207F08Ch case   11:*/		return 0x8207F090;
		  /* 8207F090h */ case   12:  		/* stw R30, <#[R31 + 11028]> */
		/* 8207F090h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00002B14) );
		/* 8207F090h case   12:*/		return 0x8207F094;
		  /* 8207F094h */ case   13:  		/* stw R30, <#[R31 + 11024]> */
		/* 8207F094h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207F094h case   13:*/		return 0x8207F098;
		  /* 8207F098h */ case   14:  		/* bl 2023008 */
		/* 8207F098h case   14:*/		regs.LR = 0x8207F09C; return 0x8226CEF8;
		/* 8207F098h case   14:*/		return 0x8207F09C;
		  /* 8207F09Ch */ case   15:  		/* cmpwi CR6, R3, 2 */
		/* 8207F09Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207F09Ch case   15:*/		return 0x8207F0A0;
		  /* 8207F0A0h */ case   16:  		/* bc 12, CR6_EQ, 52 */
		/* 8207F0A0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8207F0D4;  }
		/* 8207F0A0h case   16:*/		return 0x8207F0A4;
		  /* 8207F0A4h */ case   17:  		/* lis R11, -32256 */
		/* 8207F0A4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F0A4h case   17:*/		return 0x8207F0A8;
		  /* 8207F0A8h */ case   18:  		/* lis R10, -32217 */
		/* 8207F0A8h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8207F0A8h case   18:*/		return 0x8207F0AC;
		  /* 8207F0ACh */ case   19:  		/* li R4, 0 */
		/* 8207F0ACh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F0ACh case   19:*/		return 0x8207F0B0;
		  /* 8207F0B0h */ case   20:  		/* addi R3, R10, 5880 */
		/* 8207F0B0h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R10,0x16F8);
		/* 8207F0B0h case   20:*/		return 0x8207F0B4;
		  /* 8207F0B4h */ case   21:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207F0B4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207F0B4h case   21:*/		return 0x8207F0B8;
		  /* 8207F0B8h */ case   22:  		/* stw R30, <#[R11]> */
		/* 8207F0B8h case   22:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F0B8h case   22:*/		return 0x8207F0BC;
		  /* 8207F0BCh */ case   23:  		/* bl 2023548 */
		/* 8207F0BCh case   23:*/		regs.LR = 0x8207F0C0; return 0x8226D138;
		/* 8207F0BCh case   23:*/		return 0x8207F0C0;
		  /* 8207F0C0h */ case   24:  		/* lis R11, -32217 */
		/* 8207F0C0h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8207F0C0h case   24:*/		return 0x8207F0C4;
		  /* 8207F0C4h */ case   25:  		/* li R4, 0 */
		/* 8207F0C4h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F0C4h case   25:*/		return 0x8207F0C8;
		  /* 8207F0C8h */ case   26:  		/* addi R3, R11, 5896 */
		/* 8207F0C8h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1708);
		/* 8207F0C8h case   26:*/		return 0x8207F0CC;
		  /* 8207F0CCh */ case   27:  		/* bl 2023532 */
		/* 8207F0CCh case   27:*/		regs.LR = 0x8207F0D0; return 0x8226D138;
		/* 8207F0CCh case   27:*/		return 0x8207F0D0;
		  /* 8207F0D0h */ case   28:  		/* b 16 */
		/* 8207F0D0h case   28:*/		return 0x8207F0E0;
		/* 8207F0D0h case   28:*/		return 0x8207F0D4;
	}
	return 0x8207F0D4;
} // Block from 8207F060h-8207F0D4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8207F0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F0D4);
		  /* 8207F0D4h */ case    0:  		/* lis R11, -32256 */
		/* 8207F0D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F0D4h case    0:*/		return 0x8207F0D8;
		  /* 8207F0D8h */ case    1:  		/* lwz R11, <#[R11 + 1452]> */
		/* 8207F0D8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 8207F0D8h case    1:*/		return 0x8207F0DC;
		  /* 8207F0DCh */ case    2:  		/* stw R30, <#[R11]> */
		/* 8207F0DCh case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F0DCh case    2:*/		return 0x8207F0E0;
	}
	return 0x8207F0E0;
} // Block from 8207F0D4h-8207F0E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207F0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F0E0);
		  /* 8207F0E0h */ case    0:  		/* bl 2023592 */
		/* 8207F0E0h case    0:*/		regs.LR = 0x8207F0E4; return 0x8226D188;
		/* 8207F0E0h case    0:*/		return 0x8207F0E4;
	}
	return 0x8207F0E4;
} // Block from 8207F0E0h-8207F0E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F0E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F0E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F0E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F0E4);
		  /* 8207F0E4h */ case    0:  		/* lwz R3, <#[R31 + 17136]> */
		/* 8207F0E4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000042F0) );
		/* 8207F0E4h case    0:*/		return 0x8207F0E8;
		  /* 8207F0E8h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207F0E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207F0E8h case    1:*/		return 0x8207F0EC;
		  /* 8207F0ECh */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8207F0ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x8207F0F8;  }
		/* 8207F0ECh case    2:*/		return 0x8207F0F0;
		  /* 8207F0F0h */ case    3:  		/* lis R4, -20096 */
		/* 8207F0F0h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207F0F0h case    3:*/		return 0x8207F0F4;
		  /* 8207F0F4h */ case    4:  		/* bl 37444 */
		/* 8207F0F4h case    4:*/		regs.LR = 0x8207F0F8; return 0x82088338;
		/* 8207F0F4h case    4:*/		return 0x8207F0F8;
	}
	return 0x8207F0F8;
} // Block from 8207F0E4h-8207F0F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F0F8h
// Function '?UninitializePresentationParameters@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F0F8);
		  /* 8207F0F8h */ case    0:  		/* lwz R3, <#[R31 + 21980]> */
		/* 8207F0F8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000055DC) );
		/* 8207F0F8h case    0:*/		return 0x8207F0FC;
		  /* 8207F0FCh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207F0FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207F0FCh case    1:*/		return 0x8207F100;
		  /* 8207F100h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8207F100h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207F108;  }
		/* 8207F100h case    2:*/		return 0x8207F104;
		  /* 8207F104h */ case    3:  		/* bl -1692 */
		/* 8207F104h case    3:*/		regs.LR = 0x8207F108; return 0x8207EA68;
		/* 8207F104h case    3:*/		return 0x8207F108;
	}
	return 0x8207F108;
} // Block from 8207F0F8h-8207F108h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207F108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F108);
		  /* 8207F108h */ case    0:  		/* addi R1, R1, 112 */
		/* 8207F108h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207F108h case    0:*/		return 0x8207F10C;
		  /* 8207F10Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207F10Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F10Ch case    1:*/		return 0x8207F110;
		  /* 8207F110h */ case    2:  		/* mtspr LR, R12 */
		/* 8207F110h case    2:*/		regs.LR = regs.R12;
		/* 8207F110h case    2:*/		return 0x8207F114;
		  /* 8207F114h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8207F114h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207F114h case    3:*/		return 0x8207F118;
		  /* 8207F118h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8207F118h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207F118h case    4:*/		return 0x8207F11C;
		  /* 8207F11Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207F11Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F11Ch case    5:*/		return 0x8207F120;
	}
	return 0x8207F120;
} // Block from 8207F108h-8207F120h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F120);
		  /* 8207F120h */ case    0:  		/* mfspr R12, LR */
		/* 8207F120h case    0:*/		regs.R12 = regs.LR;
		/* 8207F120h case    0:*/		return 0x8207F124;
		  /* 8207F124h */ case    1:  		/* bl 74012 */
		/* 8207F124h case    1:*/		regs.LR = 0x8207F128; return 0x82091240;
		/* 8207F124h case    1:*/		return 0x8207F128;
		  /* 8207F128h */ case    2:  		/* stwu R1, <#[R1 - 1760]> */
		/* 8207F128h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF920) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF920);
		/* 8207F128h case    2:*/		return 0x8207F12C;
		  /* 8207F12Ch */ case    3:  		/* lwz R30, <#[R4 + 64]> */
		/* 8207F12Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000040) );
		/* 8207F12Ch case    3:*/		return 0x8207F130;
		  /* 8207F130h */ case    4:  		/* mr R29, R3 */
		/* 8207F130h case    4:*/		regs.R29 = regs.R3;
		/* 8207F130h case    4:*/		return 0x8207F134;
		  /* 8207F134h */ case    5:  		/* lwz R28, <#[R4]> */
		/* 8207F134h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000000) );
		/* 8207F134h case    5:*/		return 0x8207F138;
		  /* 8207F138h */ case    6:  		/* mr R31, R4 */
		/* 8207F138h case    6:*/		regs.R31 = regs.R4;
		/* 8207F138h case    6:*/		return 0x8207F13C;
		  /* 8207F13Ch */ case    7:  		/* lwz R27, <#[R4 + 4]> */
		/* 8207F13Ch case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R4 + 0x00000004) );
		/* 8207F13Ch case    7:*/		return 0x8207F140;
		  /* 8207F140h */ case    8:  		/* cmpwi CR6, R30, 0 */
		/* 8207F140h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8207F140h case    8:*/		return 0x8207F144;
		  /* 8207F144h */ case    9:  		/* lwz R25, <#[R4 + 16]> */
		/* 8207F144h case    9:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R4 + 0x00000010) );
		/* 8207F144h case    9:*/		return 0x8207F148;
		  /* 8207F148h */ case   10:  		/* lwz R22, <#[R4 + 40]> */
		/* 8207F148h case   10:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R4 + 0x00000028) );
		/* 8207F148h case   10:*/		return 0x8207F14C;
		  /* 8207F14Ch */ case   11:  		/* lwz R26, <#[R4 + 8]> */
		/* 8207F14Ch case   11:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R4 + 0x00000008) );
		/* 8207F14Ch case   11:*/		return 0x8207F150;
		  /* 8207F150h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 8207F150h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8207F15C;  }
		/* 8207F150h case   12:*/		return 0x8207F154;
		  /* 8207F154h */ case   13:  		/* rlwinm R11, R26, 0, 26, 31 */
		/* 8207F154h case   13:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R26);
		/* 8207F154h case   13:*/		return 0x8207F158;
		  /* 8207F158h */ case   14:  		/* b 20 */
		/* 8207F158h case   14:*/		return 0x8207F16C;
		/* 8207F158h case   14:*/		return 0x8207F15C;
	}
	return 0x8207F15C;
} // Block from 8207F120h-8207F15Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207F15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F15C);
		  /* 8207F15Ch */ case    0:  		/* lis R11, 10280 */
		/* 8207F15Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2828);
		/* 8207F15Ch case    0:*/		return 0x8207F160;
		  /* 8207F160h */ case    1:  		/* ori R11, R11, 390 */
		/* 8207F160h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x186);
		/* 8207F160h case    1:*/		return 0x8207F164;
		  /* 8207F164h */ case    2:  		/* cmpw CR6, R30, R11 */
		/* 8207F164h case    2:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8207F164h case    2:*/		return 0x8207F168;
		  /* 8207F168h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207F168h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207F174;  }
		/* 8207F168h case    3:*/		return 0x8207F16C;
	}
	return 0x8207F16C;
} // Block from 8207F15Ch-8207F16Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207F16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F16C);
		  /* 8207F16Ch */ case    0:  		/* lis R30, 10280 */
		/* 8207F16Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0x2828);
		/* 8207F16Ch case    0:*/		return 0x8207F170;
		  /* 8207F170h */ case    1:  		/* b 24 */
		/* 8207F170h case    1:*/		return 0x8207F188;
		/* 8207F170h case    1:*/		return 0x8207F174;
	}
	return 0x8207F174;
} // Block from 8207F16Ch-8207F174h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207F174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F174);
		  /* 8207F174h */ case    0:  		/* lis R11, 6184 */
		/* 8207F174h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1828);
		/* 8207F174h case    0:*/		return 0x8207F178;
		  /* 8207F178h */ case    1:  		/* ori R11, R11, 390 */
		/* 8207F178h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x186);
		/* 8207F178h case    1:*/		return 0x8207F17C;
		  /* 8207F17Ch */ case    2:  		/* cmpw CR6, R30, R11 */
		/* 8207F17Ch case    2:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8207F17Ch case    2:*/		return 0x8207F180;
		  /* 8207F180h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 8207F180h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207F190;  }
		/* 8207F180h case    3:*/		return 0x8207F184;
		  /* 8207F184h */ case    4:  		/* lis R30, 6184 */
		/* 8207F184h case    4:*/		cpu::op::lis<0>(regs,&regs.R30,0x1828);
		/* 8207F184h case    4:*/		return 0x8207F188;
	}
	return 0x8207F188;
} // Block from 8207F174h-8207F188h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F188);
		  /* 8207F188h */ case    0:  		/* ori R30, R30, 262 */
		/* 8207F188h case    0:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x106);
		/* 8207F188h case    0:*/		return 0x8207F18C;
		  /* 8207F18Ch */ case    1:  		/* b 52 */
		/* 8207F18Ch case    1:*/		return 0x8207F1C0;
		/* 8207F18Ch case    1:*/		return 0x8207F190;
	}
	return 0x8207F190;
} // Block from 8207F188h-8207F190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207F190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F190);
		  /* 8207F190h */ case    0:  		/* lis R11, 10280 */
		/* 8207F190h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2828);
		/* 8207F190h case    0:*/		return 0x8207F194;
		  /* 8207F194h */ case    1:  		/* ori R11, R11, 438 */
		/* 8207F194h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1B6);
		/* 8207F194h case    1:*/		return 0x8207F198;
		  /* 8207F198h */ case    2:  		/* cmpw CR6, R30, R11 */
		/* 8207F198h case    2:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8207F198h case    2:*/		return 0x8207F19C;
		  /* 8207F19Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207F19Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207F1A8;  }
		/* 8207F19Ch case    3:*/		return 0x8207F1A0;
		  /* 8207F1A0h */ case    4:  		/* lis R30, 10280 */
		/* 8207F1A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R30,0x2828);
		/* 8207F1A0h case    4:*/		return 0x8207F1A4;
		  /* 8207F1A4h */ case    5:  		/* b 24 */
		/* 8207F1A4h case    5:*/		return 0x8207F1BC;
		/* 8207F1A4h case    5:*/		return 0x8207F1A8;
	}
	return 0x8207F1A8;
} // Block from 8207F190h-8207F1A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F1A8h
// Function '?DeleteQueryBlock@D3D@@YAXPAUCQueryBlock@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F1A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F1A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F1A8);
		  /* 8207F1A8h */ case    0:  		/* lis R11, 6184 */
		/* 8207F1A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1828);
		/* 8207F1A8h case    0:*/		return 0x8207F1AC;
		  /* 8207F1ACh */ case    1:  		/* ori R11, R11, 438 */
		/* 8207F1ACh case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1B6);
		/* 8207F1ACh case    1:*/		return 0x8207F1B0;
		  /* 8207F1B0h */ case    2:  		/* cmpw CR6, R30, R11 */
		/* 8207F1B0h case    2:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8207F1B0h case    2:*/		return 0x8207F1B4;
		  /* 8207F1B4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207F1B4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207F1C0;  }
		/* 8207F1B4h case    3:*/		return 0x8207F1B8;
		  /* 8207F1B8h */ case    4:  		/* lis R30, 6184 */
		/* 8207F1B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R30,0x1828);
		/* 8207F1B8h case    4:*/		return 0x8207F1BC;
	}
	return 0x8207F1BC;
} // Block from 8207F1A8h-8207F1BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F1BC);
		  /* 8207F1BCh */ case    0:  		/* ori R30, R30, 310 */
		/* 8207F1BCh case    0:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x136);
		/* 8207F1BCh case    0:*/		return 0x8207F1C0;
	}
	return 0x8207F1C0;
} // Block from 8207F1BCh-8207F1C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F1C0);
		  /* 8207F1C0h */ case    0:  		/* rlwinm R23, R30, 0, 26, 31 */
		/* 8207F1C0h case    0:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R23,regs.R30);
		/* 8207F1C0h case    0:*/		return 0x8207F1C4;
		  /* 8207F1C4h */ case    1:  		/* mr R24, R23 */
		/* 8207F1C4h case    1:*/		regs.R24 = regs.R23;
		/* 8207F1C4h case    1:*/		return 0x8207F1C8;
		  /* 8207F1C8h */ case    2:  		/* cmplwi CR6, R23, 50 */
		/* 8207F1C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000032);
		/* 8207F1C8h case    2:*/		return 0x8207F1CC;
		  /* 8207F1CCh */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8207F1CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8207F1D8;  }
		/* 8207F1CCh case    3:*/		return 0x8207F1D0;
		  /* 8207F1D0h */ case    4:  		/* li R24, 6 */
		/* 8207F1D0h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x6);
		/* 8207F1D0h case    4:*/		return 0x8207F1D4;
		  /* 8207F1D4h */ case    5:  		/* b 16 */
		/* 8207F1D4h case    5:*/		return 0x8207F1E4;
		/* 8207F1D4h case    5:*/		return 0x8207F1D8;
	}
	return 0x8207F1D8;
} // Block from 8207F1C0h-8207F1D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F1D8);
		  /* 8207F1D8h */ case    0:  		/* cmplwi CR6, R24, 7 */
		/* 8207F1D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000007);
		/* 8207F1D8h case    0:*/		return 0x8207F1DC;
		  /* 8207F1DCh */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8207F1DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207F1E4;  }
		/* 8207F1DCh case    1:*/		return 0x8207F1E0;
		  /* 8207F1E0h */ case    2:  		/* li R24, 54 */
		/* 8207F1E0h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x36);
		/* 8207F1E0h case    2:*/		return 0x8207F1E4;
	}
	return 0x8207F1E4;
} // Block from 8207F1D8h-8207F1E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207F1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F1E4);
		  /* 8207F1E4h */ case    0:  		/* addi R3, R1, 80 */
		/* 8207F1E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8207F1E4h case    0:*/		return 0x8207F1E8;
		  /* 8207F1E8h */ case    1:  		/* bl 2023072 */
		/* 8207F1E8h case    1:*/		regs.LR = 0x8207F1EC; return 0x8226D088;
		/* 8207F1E8h case    1:*/		return 0x8207F1EC;
		  /* 8207F1ECh */ case    2:  		/* lis R10, -32256 */
		/* 8207F1ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207F1ECh case    2:*/		return 0x8207F1F0;
		  /* 8207F1F0h */ case    3:  		/* lfs FR13, <#[R1 + 100]> */
		/* 8207F1F0h case    3:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000064) );
		/* 8207F1F0h case    3:*/		return 0x8207F1F4;
		  /* 8207F1F4h */ case    4:  		/* lwz R11, <#[R1 + 80]> */
		/* 8207F1F4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207F1F4h case    4:*/		return 0x8207F1F8;
		  /* 8207F1F8h */ case    5:  		/* li R9, 21964 */
		/* 8207F1F8h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x55CC);
		/* 8207F1F8h case    5:*/		return 0x8207F1FC;
		  /* 8207F1FCh */ case    6:  		/* lfs FR0, <#[R10 + 1820]> */
		/* 8207F1FCh case    6:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x0000071C) );
		/* 8207F1FCh case    6:*/		return 0x8207F200;
	}
	return 0x8207F200;
} // Block from 8207F1E4h-8207F200h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207F200h
// Function '?SetAllSignals@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F200);
		  /* 8207F200h */ case    0:  		/* fadds FR0, FR13, FR0 */
		/* 8207F200h case    0:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR13,regs.FR0);
		/* 8207F200h case    0:*/		return 0x8207F204;
		  /* 8207F204h */ case    1:  		/* stw R11, <#[R29 + 21952]> */
		/* 8207F204h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000055C0) );
		/* 8207F204h case    1:*/		return 0x8207F208;
		  /* 8207F208h */ case    2:  		/* stw R11, <#[R29 + 21960]> */
		/* 8207F208h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000055C8) );
		/* 8207F208h case    2:*/		return 0x8207F20C;
		  /* 8207F20Ch */ case    3:  		/* fctidz FR0, FR0 */
		/* 8207F20Ch case    3:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8207F20Ch case    3:*/		return 0x8207F210;
		  /* 8207F210h */ case    4:  		/* stfiwx FR0, <#[R29 + R9]> */
		/* 8207F210h case    4:*/		cpu::mem::store32( regs, regs.FR0, (uint32)(regs.R29 + regs.R9 + 0x00000000) );
		/* 8207F210h case    4:*/		return 0x8207F214;
		  /* 8207F214h */ case    5:  		/* lwz R11, <#[R1 + 84]> */
		/* 8207F214h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207F214h case    5:*/		return 0x8207F218;
		  /* 8207F218h */ case    6:  		/* stw R11, <#[R29 + 21956]> */
		/* 8207F218h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000055C4) );
		/* 8207F218h case    6:*/		return 0x8207F21C;
		  /* 8207F21Ch */ case    7:  		/* lwz R11, <#[R31 + 60]> */
		/* 8207F21Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 8207F21Ch case    7:*/		return 0x8207F220;
		  /* 8207F220h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8207F220h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207F220h case    8:*/		return 0x8207F224;
		  /* 8207F224h */ case    9:  		/* bc 4, CR6_EQ, 60 */
		/* 8207F224h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8207F260;  }
		/* 8207F224h case    9:*/		return 0x8207F228;
		  /* 8207F228h */ case   10:  		/* li R10, 3 */
		/* 8207F228h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8207F228h case   10:*/		return 0x8207F22C;
		  /* 8207F22Ch */ case   11:  		/* li R9, 0 */
		/* 8207F22Ch case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8207F22Ch case   11:*/		return 0x8207F230;
		  /* 8207F230h */ case   12:  		/* mr R8, R30 */
		/* 8207F230h case   12:*/		regs.R8 = regs.R30;
		/* 8207F230h case   12:*/		return 0x8207F234;
		  /* 8207F234h */ case   13:  		/* li R7, 0 */
		/* 8207F234h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207F234h case   13:*/		return 0x8207F238;
		  /* 8207F238h */ case   14:  		/* li R6, 1 */
		/* 8207F238h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8207F238h case   14:*/		return 0x8207F23C;
		  /* 8207F23Ch */ case   15:  		/* li R5, 1 */
		/* 8207F23Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8207F23Ch case   15:*/		return 0x8207F240;
		  /* 8207F240h */ case   16:  		/* mr R4, R27 */
		/* 8207F240h case   16:*/		regs.R4 = regs.R27;
		/* 8207F240h case   16:*/		return 0x8207F244;
		  /* 8207F244h */ case   17:  		/* mr R3, R28 */
		/* 8207F244h case   17:*/		regs.R3 = regs.R28;
		/* 8207F244h case   17:*/		return 0x8207F248;
		  /* 8207F248h */ case   18:  		/* bl -99632 */
		/* 8207F248h case   18:*/		regs.LR = 0x8207F24C; return 0x82066D18;
		/* 8207F248h case   18:*/		return 0x8207F24C;
		  /* 8207F24Ch */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 8207F24Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207F24Ch case   19:*/		return 0x8207F250;
		  /* 8207F250h */ case   20:  		/* bc 4, CR0_EQ, 12 */
		/* 8207F250h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8207F25C;  }
		/* 8207F250h case   20:*/		return 0x8207F254;
		  /* 8207F254h */ case   21:  		/* li R3, 0 */
		/* 8207F254h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207F254h case   21:*/		return 0x8207F258;
		  /* 8207F258h */ case   22:  		/* b 316 */
		/* 8207F258h case   22:*/		return 0x8207F394;
		/* 8207F258h case   22:*/		return 0x8207F25C;
	}
	return 0x8207F25C;
} // Block from 8207F200h-8207F25Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8207F25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F25C);
		  /* 8207F25Ch */ case    0:  		/* stw R3, <#[R29 + 15232]> */
		/* 8207F25Ch case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00003B80) );
		/* 8207F25Ch case    0:*/		return 0x8207F260;
	}
	return 0x8207F260;
} // Block from 8207F25Ch-8207F260h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F260);
		  /* 8207F260h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 8207F260h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8207F260h case    0:*/		return 0x8207F264;
		  /* 8207F264h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8207F264h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207F264h case    1:*/		return 0x8207F268;
		  /* 8207F268h */ case    2:  		/* bc 4, CR6_EQ, 52 */
		/* 8207F268h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8207F29C;  }
		/* 8207F268h case    2:*/		return 0x8207F26C;
		  /* 8207F26Ch */ case    3:  		/* li R7, 0 */
		/* 8207F26Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207F26Ch case    3:*/		return 0x8207F270;
		  /* 8207F270h */ case    4:  		/* mr R6, R25 */
		/* 8207F270h case    4:*/		regs.R6 = regs.R25;
		/* 8207F270h case    4:*/		return 0x8207F274;
		  /* 8207F274h */ case    5:  		/* mr R5, R26 */
		/* 8207F274h case    5:*/		regs.R5 = regs.R26;
		/* 8207F274h case    5:*/		return 0x8207F278;
		  /* 8207F278h */ case    6:  		/* mr R4, R27 */
		/* 8207F278h case    6:*/		regs.R4 = regs.R27;
		/* 8207F278h case    6:*/		return 0x8207F27C;
		  /* 8207F27Ch */ case    7:  		/* mr R3, R28 */
		/* 8207F27Ch case    7:*/		regs.R3 = regs.R28;
		/* 8207F27Ch case    7:*/		return 0x8207F280;
		  /* 8207F280h */ case    8:  		/* bl -99400 */
		/* 8207F280h case    8:*/		regs.LR = 0x8207F284; return 0x82066E38;
		/* 8207F280h case    8:*/		return 0x8207F284;
		  /* 8207F284h */ case    9:  		/* or. R5, R3, R3 */
		/* 8207F284h case    9:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 8207F284h case    9:*/		return 0x8207F288;
		  /* 8207F288h */ case   10:  		/* bc 12, CR0_EQ, -52 */
		/* 8207F288h case   10:*/		if ( regs.CR[0].eq ) { return 0x8207F254;  }
		/* 8207F288h case   10:*/		return 0x8207F28C;
		  /* 8207F28Ch */ case   11:  		/* stw R5, <#[R29 + 15236]> */
		/* 8207F28Ch case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R29 + 0x00003B84) );
		/* 8207F28Ch case   11:*/		return 0x8207F290;
		  /* 8207F290h */ case   12:  		/* li R4, 0 */
		/* 8207F290h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F290h case   12:*/		return 0x8207F294;
		  /* 8207F294h */ case   13:  		/* mr R3, R29 */
		/* 8207F294h case   13:*/		regs.R3 = regs.R29;
		/* 8207F294h case   13:*/		return 0x8207F298;
		  /* 8207F298h */ case   14:  		/* bl -107488 */
		/* 8207F298h case   14:*/		regs.LR = 0x8207F29C; return 0x82064EB8;
		/* 8207F298h case   14:*/		return 0x8207F29C;
	}
	return 0x8207F29C;
} // Block from 8207F260h-8207F29Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207F29Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F29C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F29C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F29C);
		  /* 8207F29Ch */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 8207F29Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8207F29Ch case    0:*/		return 0x8207F2A0;
		  /* 8207F2A0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8207F2A0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207F2A0h case    1:*/		return 0x8207F2A4;
		  /* 8207F2A4h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 8207F2A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207F2D4;  }
		/* 8207F2A4h case    2:*/		return 0x8207F2A8;
		  /* 8207F2A8h */ case    3:  		/* li R7, 0 */
		/* 8207F2A8h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8207F2A8h case    3:*/		return 0x8207F2AC;
		  /* 8207F2ACh */ case    4:  		/* mr R6, R25 */
		/* 8207F2ACh case    4:*/		regs.R6 = regs.R25;
		/* 8207F2ACh case    4:*/		return 0x8207F2B0;
		  /* 8207F2B0h */ case    5:  		/* mr R5, R22 */
		/* 8207F2B0h case    5:*/		regs.R5 = regs.R22;
		/* 8207F2B0h case    5:*/		return 0x8207F2B4;
		  /* 8207F2B4h */ case    6:  		/* mr R4, R27 */
		/* 8207F2B4h case    6:*/		regs.R4 = regs.R27;
		/* 8207F2B4h case    6:*/		return 0x8207F2B8;
		  /* 8207F2B8h */ case    7:  		/* mr R3, R28 */
		/* 8207F2B8h case    7:*/		regs.R3 = regs.R28;
		/* 8207F2B8h case    7:*/		return 0x8207F2BC;
		  /* 8207F2BCh */ case    8:  		/* bl -99460 */
		/* 8207F2BCh case    8:*/		regs.LR = 0x8207F2C0; return 0x82066E38;
		/* 8207F2BCh case    8:*/		return 0x8207F2C0;
		  /* 8207F2C0h */ case    9:  		/* or. R4, R3, R3 */
		/* 8207F2C0h case    9:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8207F2C0h case    9:*/		return 0x8207F2C4;
		  /* 8207F2C4h */ case   10:  		/* bc 12, CR0_EQ, -112 */
		/* 8207F2C4h case   10:*/		if ( regs.CR[0].eq ) { return 0x8207F254;  }
		/* 8207F2C4h case   10:*/		return 0x8207F2C8;
		  /* 8207F2C8h */ case   11:  		/* stw R4, <#[R29 + 15228]> */
		/* 8207F2C8h case   11:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R29 + 0x00003B7C) );
		/* 8207F2C8h case   11:*/		return 0x8207F2CC;
		  /* 8207F2CCh */ case   12:  		/* mr R3, R29 */
		/* 8207F2CCh case   12:*/		regs.R3 = regs.R29;
		/* 8207F2CCh case   12:*/		return 0x8207F2D0;
		  /* 8207F2D0h */ case   13:  		/* bl -106632 */
		/* 8207F2D0h case   13:*/		regs.LR = 0x8207F2D4; return 0x82065248;
		/* 8207F2D0h case   13:*/		return 0x8207F2D4;
	}
	return 0x8207F2D4;
} // Block from 8207F29Ch-8207F2D4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207F2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F2D4);
		  /* 8207F2D4h */ case    0:  		/* addi R3, R29, 13948 */
		/* 8207F2D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x367C);
		/* 8207F2D4h case    0:*/		return 0x8207F2D8;
	}
	return 0x8207F2D8;
} // Block from 8207F2D4h-8207F2D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F2D8h
// Function '?Set3DVideoFormat@D3D@@YAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F2D8);
		  /* 8207F2D8h */ case    0:  		/* li R5, 124 */
		/* 8207F2D8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x7C);
		/* 8207F2D8h case    0:*/		return 0x8207F2DC;
		  /* 8207F2DCh */ case    1:  		/* mr R4, R31 */
		/* 8207F2DCh case    1:*/		regs.R4 = regs.R31;
		/* 8207F2DCh case    1:*/		return 0x8207F2E0;
		  /* 8207F2E0h */ case    2:  		/* bl 75472 */
		/* 8207F2E0h case    2:*/		regs.LR = 0x8207F2E4; return 0x820919B0;
		/* 8207F2E0h case    2:*/		return 0x8207F2E4;
		  /* 8207F2E4h */ case    3:  		/* rlwinm R11, R30, 0, 2, 13 */
		/* 8207F2E4h case    3:*/		cpu::op::rlwinm<0,0,2,13>(regs,&regs.R11,regs.R30);
		/* 8207F2E4h case    3:*/		return 0x8207F2E8;
		  /* 8207F2E8h */ case    4:  		/* lis R10, 9360 */
		/* 8207F2E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x2490);
		/* 8207F2E8h case    4:*/		return 0x8207F2EC;
		  /* 8207F2ECh */ case    5:  		/* cmpw CR6, R11, R10 */
		/* 8207F2ECh case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8207F2ECh case    5:*/		return 0x8207F2F0;
		  /* 8207F2F0h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8207F2F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207F300;  }
		/* 8207F2F0h case    6:*/		return 0x8207F2F4;
		  /* 8207F2F4h */ case    7:  		/* oris R11, R23, 10280 */
		/* 8207F2F4h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R23,0x2828);
		/* 8207F2F4h case    7:*/		return 0x8207F2F8;
		  /* 8207F2F8h */ case    8:  		/* ori R11, R11, 256 */
		/* 8207F2F8h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8207F2F8h case    8:*/		return 0x8207F2FC;
		  /* 8207F2FCh */ case    9:  		/* stw R11, <#[R29 + 14012]> */
		/* 8207F2FCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000036BC) );
		/* 8207F2FCh case    9:*/		return 0x8207F300;
	}
	return 0x8207F300;
} // Block from 8207F2D8h-8207F300h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207F300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F300);
		  /* 8207F300h */ case    0:  		/* addi R4, R31, 96 */
		/* 8207F300h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x60);
		/* 8207F300h case    0:*/		return 0x8207F304;
		  /* 8207F304h */ case    1:  		/* mr R3, R29 */
		/* 8207F304h case    1:*/		regs.R3 = regs.R29;
		/* 8207F304h case    1:*/		return 0x8207F308;
		  /* 8207F308h */ case    2:  		/* bl -10216 */
		/* 8207F308h case    2:*/		regs.LR = 0x8207F30C; return 0x8207CB20;
		/* 8207F308h case    2:*/		return 0x8207F30C;
		  /* 8207F30Ch */ case    3:  		/* cmplwi CR6, R24, 7 */
		/* 8207F30Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000007);
		/* 8207F30Ch case    3:*/		return 0x8207F310;
		  /* 8207F310h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 8207F310h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207F33C;  }
		/* 8207F310h case    4:*/		return 0x8207F314;
		  /* 8207F314h */ case    5:  		/* cmplwi CR6, R24, 54 */
		/* 8207F314h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000036);
		/* 8207F314h case    5:*/		return 0x8207F318;
		  /* 8207F318h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 8207F318h case    6:*/		if ( regs.CR[6].eq ) { return 0x8207F33C;  }
		/* 8207F318h case    6:*/		return 0x8207F31C;
		  /* 8207F31Ch */ case    7:  		/* li R4, 0 */
		/* 8207F31Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F31Ch case    7:*/		return 0x8207F320;
		  /* 8207F320h */ case    8:  		/* addi R3, R1, 128 */
		/* 8207F320h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8207F320h case    8:*/		return 0x8207F324;
		  /* 8207F324h */ case    9:  		/* bl -41100 */
		/* 8207F324h case    9:*/		regs.LR = 0x8207F328; return 0x82075298;
		/* 8207F324h case    9:*/		return 0x8207F328;
		  /* 8207F328h */ case   10:  		/* addi R5, R1, 128 */
		/* 8207F328h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8207F328h case   10:*/		return 0x8207F32C;
		  /* 8207F32Ch */ case   11:  		/* li R4, 0 */
		/* 8207F32Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F32Ch case   11:*/		return 0x8207F330;
		  /* 8207F330h */ case   12:  		/* mr R3, R29 */
		/* 8207F330h case   12:*/		regs.R3 = regs.R29;
		/* 8207F330h case   12:*/		return 0x8207F334;
		  /* 8207F334h */ case   13:  		/* bl -109228 */
		/* 8207F334h case   13:*/		regs.LR = 0x8207F338; return 0x82064888;
		/* 8207F334h case   13:*/		return 0x8207F338;
		  /* 8207F338h */ case   14:  		/* b 32 */
		/* 8207F338h case   14:*/		return 0x8207F358;
		/* 8207F338h case   14:*/		return 0x8207F33C;
	}
	return 0x8207F33C;
} // Block from 8207F300h-8207F33Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207F33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F33C);
		  /* 8207F33Ch */ case    0:  		/* li R4, 0 */
		/* 8207F33Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F33Ch case    0:*/		return 0x8207F340;
		  /* 8207F340h */ case    1:  		/* addi R3, R1, 128 */
		/* 8207F340h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8207F340h case    1:*/		return 0x8207F344;
		  /* 8207F344h */ case    2:  		/* bl -41060 */
		/* 8207F344h case    2:*/		regs.LR = 0x8207F348; return 0x820752E0;
		/* 8207F344h case    2:*/		return 0x8207F348;
		  /* 8207F348h */ case    3:  		/* addi R5, R1, 128 */
		/* 8207F348h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8207F348h case    3:*/		return 0x8207F34C;
		  /* 8207F34Ch */ case    4:  		/* li R4, 0 */
		/* 8207F34Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F34Ch case    4:*/		return 0x8207F350;
	}
	return 0x8207F350;
} // Block from 8207F33Ch-8207F350h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F350h
// Function '?VideoModeInitialize@D3D@@YAXPAVCDevice@1@PBU_D3DPRESENT_PARAMETERS_@@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F350);
		  /* 8207F350h */ case    0:  		/* mr R3, R29 */
		/* 8207F350h case    0:*/		regs.R3 = regs.R29;
		/* 8207F350h case    0:*/		return 0x8207F354;
		  /* 8207F354h */ case    1:  		/* bl -109052 */
		/* 8207F354h case    1:*/		regs.LR = 0x8207F358; return 0x82064958;
		/* 8207F354h case    1:*/		return 0x8207F358;
	}
	return 0x8207F358;
} // Block from 8207F350h-8207F358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207F358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F358);
		  /* 8207F358h */ case    0:  		/* li R11, -1 */
		/* 8207F358h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207F358h case    0:*/		return 0x8207F35C;
		  /* 8207F35Ch */ case    1:  		/* stw R11, <#[R29 + 17116]> */
		/* 8207F35Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000042DC) );
		/* 8207F35Ch case    1:*/		return 0x8207F360;
		  /* 8207F360h */ case    2:  		/* bl 2022296 */
		/* 8207F360h case    2:*/		regs.LR = 0x8207F364; return 0x8226CEF8;
		/* 8207F360h case    2:*/		return 0x8207F364;
		  /* 8207F364h */ case    3:  		/* cmpwi CR6, R3, 2 */
		/* 8207F364h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207F364h case    3:*/		return 0x8207F368;
		  /* 8207F368h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 8207F368h case    4:*/		if ( regs.CR[6].eq ) { return 0x8207F390;  }
		/* 8207F368h case    4:*/		return 0x8207F36C;
		  /* 8207F36Ch */ case    5:  		/* lwz R11, <#[R31 + 44]> */
		/* 8207F36Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8207F36Ch case    5:*/		return 0x8207F370;
		  /* 8207F370h */ case    6:  		/* mr R3, R29 */
		/* 8207F370h case    6:*/		regs.R3 = regs.R29;
		/* 8207F370h case    6:*/		return 0x8207F374;
		  /* 8207F374h */ case    7:  		/* rlwinm. R11, R11, 0, 26, 27 */
		/* 8207F374h case    7:*/		cpu::op::rlwinm<1,0,26,27>(regs,&regs.R11,regs.R11);
		/* 8207F374h case    7:*/		return 0x8207F378;
		  /* 8207F378h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8207F378h case    8:*/		if ( regs.CR[0].eq ) { return 0x8207F38C;  }
		/* 8207F378h case    8:*/		return 0x8207F37C;
		  /* 8207F37Ch */ case    9:  		/* bl -2236 */
		/* 8207F37Ch case    9:*/		regs.LR = 0x8207F380; return 0x8207EAC0;
		/* 8207F37Ch case    9:*/		return 0x8207F380;
		  /* 8207F380h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8207F380h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F380h case   10:*/		return 0x8207F384;
		  /* 8207F384h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 8207F384h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8207F390;  }
		/* 8207F384h case   11:*/		return 0x8207F388;
		  /* 8207F388h */ case   12:  		/* b -308 */
		/* 8207F388h case   12:*/		return 0x8207F254;
		/* 8207F388h case   12:*/		return 0x8207F38C;
	}
	return 0x8207F38C;
} // Block from 8207F358h-8207F38Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207F38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F38C);
		  /* 8207F38Ch */ case    0:  		/* bl -2132 */
		/* 8207F38Ch case    0:*/		regs.LR = 0x8207F390; return 0x8207EB38;
		/* 8207F38Ch case    0:*/		return 0x8207F390;
	}
	return 0x8207F390;
} // Block from 8207F38Ch-8207F390h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F390);
		  /* 8207F390h */ case    0:  		/* li R3, 1 */
		/* 8207F390h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F390h case    0:*/		return 0x8207F394;
	}
	return 0x8207F394;
} // Block from 8207F390h-8207F394h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F394);
		  /* 8207F394h */ case    0:  		/* addi R1, R1, 1760 */
		/* 8207F394h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x6E0);
		/* 8207F394h case    0:*/		return 0x8207F398;
		  /* 8207F398h */ case    1:  		/* b 73464 */
		/* 8207F398h case    1:*/		return 0x82091290;
		/* 8207F398h case    1:*/		return 0x8207F39C;
		  /* 8207F39Ch */ case    2:  		/* nop */
		/* 8207F39Ch case    2:*/		cpu::op::nop();
		/* 8207F39Ch case    2:*/		return 0x8207F3A0;
	}
	return 0x8207F3A0;
} // Block from 8207F394h-8207F3A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207F3A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F3A0);
		  /* 8207F3A0h */ case    0:  		/* mfspr R12, LR */
		/* 8207F3A0h case    0:*/		regs.R12 = regs.LR;
		/* 8207F3A0h case    0:*/		return 0x8207F3A4;
		  /* 8207F3A4h */ case    1:  		/* bl 73400 */
		/* 8207F3A4h case    1:*/		regs.LR = 0x8207F3A8; return 0x8209125C;
		/* 8207F3A4h case    1:*/		return 0x8207F3A8;
		  /* 8207F3A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207F3A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207F3A8h case    2:*/		return 0x8207F3AC;
		  /* 8207F3ACh */ case    3:  		/* mr R31, R3 */
		/* 8207F3ACh case    3:*/		regs.R31 = regs.R3;
		/* 8207F3ACh case    3:*/		return 0x8207F3B0;
		  /* 8207F3B0h */ case    4:  		/* addi R3, R3, 15348 */
		/* 8207F3B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x3BF4);
		/* 8207F3B0h case    4:*/		return 0x8207F3B4;
		  /* 8207F3B4h */ case    5:  		/* mr R29, R4 */
		/* 8207F3B4h case    5:*/		regs.R29 = regs.R4;
		/* 8207F3B4h case    5:*/		return 0x8207F3B8;
		  /* 8207F3B8h */ case    6:  		/* bl 2022576 */
		/* 8207F3B8h case    6:*/		regs.LR = 0x8207F3BC; return 0x8226D068;
		/* 8207F3B8h case    6:*/		return 0x8207F3BC;
		  /* 8207F3BCh */ case    7:  		/* addi R3, R31, 15376 */
		/* 8207F3BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x3C10);
		/* 8207F3BCh case    7:*/		return 0x8207F3C0;
		  /* 8207F3C0h */ case    8:  		/* bl 2022568 */
		/* 8207F3C0h case    8:*/		regs.LR = 0x8207F3C4; return 0x8226D068;
		/* 8207F3C0h case    8:*/		return 0x8207F3C4;
		  /* 8207F3C4h */ case    9:  		/* addi R11, R31, 24460 */
		/* 8207F3C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x5F8C);
		/* 8207F3C4h case    9:*/		return 0x8207F3C8;
		  /* 8207F3C8h */ case   10:  		/* li R30, 0 */
		/* 8207F3C8h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207F3C8h case   10:*/		return 0x8207F3CC;
		  /* 8207F3CCh */ case   11:  		/* addi R11, R11, 8 */
		/* 8207F3CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8207F3CCh case   11:*/		return 0x8207F3D0;
		  /* 8207F3D0h */ case   12:  		/* stb R30, <#[R31 + 24460]> */
		/* 8207F3D0h case   12:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R31 + 0x00005F8C) );
		/* 8207F3D0h case   12:*/		return 0x8207F3D4;
		  /* 8207F3D4h */ case   13:  		/* mr R3, R31 */
		/* 8207F3D4h case   13:*/		regs.R3 = regs.R31;
		/* 8207F3D4h case   13:*/		return 0x8207F3D8;
		  /* 8207F3D8h */ case   14:  		/* stw R30, <#[R31 + 24464]> */
		/* 8207F3D8h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00005F90) );
		/* 8207F3D8h case   14:*/		return 0x8207F3DC;
		  /* 8207F3DCh */ case   15:  		/* stw R11, <#[R31 + 24468]> */
		/* 8207F3DCh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F94) );
		/* 8207F3DCh case   15:*/		return 0x8207F3E0;
		  /* 8207F3E0h */ case   16:  		/* stw R11, <#[R31 + 24472]> */
		/* 8207F3E0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005F98) );
		/* 8207F3E0h case   16:*/		return 0x8207F3E4;
		  /* 8207F3E4h */ case   17:  		/* lbz R11, <#[R31 + 11070]> */
		/* 8207F3E4h case   17:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207F3E4h case   17:*/		return 0x8207F3E8;
		  /* 8207F3E8h */ case   18:  		/* ori R11, R11, 4 */
		/* 8207F3E8h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8207F3E8h case   18:*/		return 0x8207F3EC;
		  /* 8207F3ECh */ case   19:  		/* stb R11, <#[R31 + 11070]> */
		/* 8207F3ECh case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8207F3ECh case   19:*/		return 0x8207F3F0;
		  /* 8207F3F0h */ case   20:  		/* bl -1664 */
		/* 8207F3F0h case   20:*/		regs.LR = 0x8207F3F4; return 0x8207ED70;
		/* 8207F3F0h case   20:*/		return 0x8207F3F4;
		  /* 8207F3F4h */ case   21:  		/* cmpwi CR0, R3, 0 */
		/* 8207F3F4h case   21:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F3F4h case   21:*/		return 0x8207F3F8;
		  /* 8207F3F8h */ case   22:  		/* bc 4, CR0_EQ, 12 */
		/* 8207F3F8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8207F404;  }
		/* 8207F3F8h case   22:*/		return 0x8207F3FC;
		  /* 8207F3FCh */ case   23:  		/* li R3, 0 */
		/* 8207F3FCh case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207F3FCh case   23:*/		return 0x8207F400;
		  /* 8207F400h */ case   24:  		/* b 532 */
		/* 8207F400h case   24:*/		return 0x8207F614;
		/* 8207F400h case   24:*/		return 0x8207F404;
	}
	return 0x8207F404;
} // Block from 8207F3A0h-8207F404h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8207F404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F404);
		  /* 8207F404h */ case    0:  		/* bl 2022132 */
		/* 8207F404h case    0:*/		regs.LR = 0x8207F408; return 0x8226CEF8;
		/* 8207F404h case    0:*/		return 0x8207F408;
		  /* 8207F408h */ case    1:  		/* cmpwi CR6, R3, 2 */
		/* 8207F408h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207F408h case    1:*/		return 0x8207F40C;
		  /* 8207F40Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8207F40Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8207F41C;  }
		/* 8207F40Ch case    2:*/		return 0x8207F410;
		  /* 8207F410h */ case    3:  		/* lis R11, -32256 */
		/* 8207F410h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F410h case    3:*/		return 0x8207F414;
		  /* 8207F414h */ case    4:  		/* lwz R11, <#[R11 + 1456]> */
		/* 8207F414h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 8207F414h case    4:*/		return 0x8207F418;
		  /* 8207F418h */ case    5:  		/* b 12 */
		/* 8207F418h case    5:*/		return 0x8207F424;
		/* 8207F418h case    5:*/		return 0x8207F41C;
	}
	return 0x8207F41C;
} // Block from 8207F404h-8207F41Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F41C);
		  /* 8207F41Ch */ case    0:  		/* lis R11, -32256 */
		/* 8207F41Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F41Ch case    0:*/		return 0x8207F420;
		  /* 8207F420h */ case    1:  		/* lwz R11, <#[R11 + 1452]> */
		/* 8207F420h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 8207F420h case    1:*/		return 0x8207F424;
	}
	return 0x8207F424;
} // Block from 8207F41Ch-8207F424h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207F424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F424);
		  /* 8207F424h */ case    0:  		/* stw R31, <#[R11]> */
		/* 8207F424h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F424h case    0:*/		return 0x8207F428;
		  /* 8207F428h */ case    1:  		/* lis R4, -23168 */
		/* 8207F428h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA580);
		/* 8207F428h case    1:*/		return 0x8207F42C;
		  /* 8207F42Ch */ case    2:  		/* li R3, 128 */
		/* 8207F42Ch case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x80);
		/* 8207F42Ch case    2:*/		return 0x8207F430;
		  /* 8207F430h */ case    3:  		/* bl 36304 */
		/* 8207F430h case    3:*/		regs.LR = 0x8207F434; return 0x82088200;
		/* 8207F430h case    3:*/		return 0x8207F434;
		  /* 8207F434h */ case    4:  		/* stw R3, <#[R31 + 11024]> */
		/* 8207F434h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00002B10) );
		/* 8207F434h case    4:*/		return 0x8207F438;
		  /* 8207F438h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8207F438h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207F438h case    5:*/		return 0x8207F43C;
		  /* 8207F43Ch */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 8207F43Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x8207F44C;  }
		/* 8207F43Ch case    6:*/		return 0x8207F440;
		  /* 8207F440h */ case    7:  		/* lis R3, -32761 */
		/* 8207F440h case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8207F440h case    7:*/		return 0x8207F444;
		  /* 8207F444h */ case    8:  		/* ori R3, R3, 14 */
		/* 8207F444h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8207F444h case    8:*/		return 0x8207F448;
		  /* 8207F448h */ case    9:  		/* b 460 */
		/* 8207F448h case    9:*/		return 0x8207F614;
		/* 8207F448h case    9:*/		return 0x8207F44C;
	}
	return 0x8207F44C;
} // Block from 8207F424h-8207F44Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207F44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F44C);
		  /* 8207F44Ch */ case    0:  		/* li R5, 128 */
		/* 8207F44Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 8207F44Ch case    0:*/		return 0x8207F450;
		  /* 8207F450h */ case    1:  		/* li R4, 0 */
		/* 8207F450h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F450h case    1:*/		return 0x8207F454;
		  /* 8207F454h */ case    2:  		/* bl 73452 */
		/* 8207F454h case    2:*/		regs.LR = 0x8207F458; return 0x82091340;
		/* 8207F454h case    2:*/		return 0x8207F458;
		  /* 8207F458h */ case    3:  		/* lis R4, -27264 */
		/* 8207F458h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF9580);
		/* 8207F458h case    3:*/		return 0x8207F45C;
		  /* 8207F45Ch */ case    4:  		/* li R3, 32 */
		/* 8207F45Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x20);
		/* 8207F45Ch case    4:*/		return 0x8207F460;
		  /* 8207F460h */ case    5:  		/* bl 36256 */
		/* 8207F460h case    5:*/		regs.LR = 0x8207F464; return 0x82088200;
		/* 8207F460h case    5:*/		return 0x8207F464;
		  /* 8207F464h */ case    6:  		/* stw R3, <#[R31 + 11028]> */
		/* 8207F464h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00002B14) );
		/* 8207F464h case    6:*/		return 0x8207F468;
		  /* 8207F468h */ case    7:  		/* cmplwi CR0, R3, 0 */
		/* 8207F468h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207F468h case    7:*/		return 0x8207F46C;
		  /* 8207F46Ch */ case    8:  		/* bc 12, CR0_EQ, -44 */
		/* 8207F46Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8207F440;  }
		/* 8207F46Ch case    8:*/		return 0x8207F470;
		  /* 8207F470h */ case    9:  		/* li R5, 32 */
		/* 8207F470h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8207F470h case    9:*/		return 0x8207F474;
		  /* 8207F474h */ case   10:  		/* li R4, 0 */
		/* 8207F474h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F474h case   10:*/		return 0x8207F478;
		  /* 8207F478h */ case   11:  		/* bl 73416 */
		/* 8207F478h case   11:*/		regs.LR = 0x8207F47C; return 0x82091340;
		/* 8207F478h case   11:*/		return 0x8207F47C;
		  /* 8207F47Ch */ case   12:  		/* sth R30, <#[R1 + 80]> */
		/* 8207F47Ch case   12:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 8207F47Ch case   12:*/		return 0x8207F480;
		  /* 8207F480h */ case   13:  		/* addi R7, R1, 80 */
		/* 8207F480h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8207F480h case   13:*/		return 0x8207F484;
		  /* 8207F484h */ case   14:  		/* li R6, 4 */
		/* 8207F484h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8207F484h case   14:*/		return 0x8207F488;
		  /* 8207F488h */ case   15:  		/* addi R5, R31, 17124 */
		/* 8207F488h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x42E4);
		/* 8207F488h case   15:*/		return 0x8207F48C;
		  /* 8207F48Ch */ case   16:  		/* li R4, 10 */
		/* 8207F48Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 8207F48Ch case   16:*/		return 0x8207F490;
		  /* 8207F490h */ case   17:  		/* li R3, 3 */
		/* 8207F490h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8207F490h case   17:*/		return 0x8207F494;
		  /* 8207F494h */ case   18:  		/* bl 2022580 */
		/* 8207F494h case   18:*/		regs.LR = 0x8207F498; return 0x8226D148;
		/* 8207F494h case   18:*/		return 0x8207F498;
		  /* 8207F498h */ case   19:  		/* cmpwi CR0, R3, 0 */
		/* 8207F498h case   19:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F498h case   19:*/		return 0x8207F49C;
		  /* 8207F49Ch */ case   20:  		/* bc 12, CR0_LT, -160 */
		/* 8207F49Ch case   20:*/		if ( regs.CR[0].lt ) { return 0x8207F3FC;  }
		/* 8207F49Ch case   20:*/		return 0x8207F4A0;
		  /* 8207F4A0h */ case   21:  		/* addi R4, R29, 72 */
		/* 8207F4A0h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x48);
		/* 8207F4A0h case   21:*/		return 0x8207F4A4;
		  /* 8207F4A4h */ case   22:  		/* mr R3, R31 */
		/* 8207F4A4h case   22:*/		regs.R3 = regs.R31;
		/* 8207F4A4h case   22:*/		return 0x8207F4A8;
		  /* 8207F4A8h */ case   23:  		/* bl -45176 */
		/* 8207F4A8h case   23:*/		regs.LR = 0x8207F4AC; return 0x82074430;
		/* 8207F4A8h case   23:*/		return 0x8207F4AC;
		  /* 8207F4ACh */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8207F4ACh case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F4ACh case   24:*/		return 0x8207F4B0;
		  /* 8207F4B0h */ case   25:  		/* bc 4, CR0_EQ, -180 */
		/* 8207F4B0h case   25:*/		if ( !regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F4B0h case   25:*/		return 0x8207F4B4;
		  /* 8207F4B4h */ case   26:  		/* mr R3, R31 */
		/* 8207F4B4h case   26:*/		regs.R3 = regs.R31;
		/* 8207F4B4h case   26:*/		return 0x8207F4B8;
		  /* 8207F4B8h */ case   27:  		/* bl -8896 */
		/* 8207F4B8h case   27:*/		regs.LR = 0x8207F4BC; return 0x8207D1F8;
		/* 8207F4B8h case   27:*/		return 0x8207F4BC;
		  /* 8207F4BCh */ case   28:  		/* cmpwi CR0, R3, 0 */
		/* 8207F4BCh case   28:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F4BCh case   28:*/		return 0x8207F4C0;
		  /* 8207F4C0h */ case   29:  		/* bc 12, CR0_EQ, -196 */
		/* 8207F4C0h case   29:*/		if ( regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F4C0h case   29:*/		return 0x8207F4C4;
		  /* 8207F4C4h */ case   30:  		/* mr R3, R31 */
		/* 8207F4C4h case   30:*/		regs.R3 = regs.R31;
		/* 8207F4C4h case   30:*/		return 0x8207F4C8;
		  /* 8207F4C8h */ case   31:  		/* bl -10040 */
		/* 8207F4C8h case   31:*/		regs.LR = 0x8207F4CC; return 0x8207CD90;
		/* 8207F4C8h case   31:*/		return 0x8207F4CC;
		  /* 8207F4CCh */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 8207F4CCh case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F4CCh case   32:*/		return 0x8207F4D0;
		  /* 8207F4D0h */ case   33:  		/* bc 12, CR0_EQ, -212 */
		/* 8207F4D0h case   33:*/		if ( regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F4D0h case   33:*/		return 0x8207F4D4;
		  /* 8207F4D4h */ case   34:  		/* mr R3, R31 */
		/* 8207F4D4h case   34:*/		regs.R3 = regs.R31;
		/* 8207F4D4h case   34:*/		return 0x8207F4D8;
		  /* 8207F4D8h */ case   35:  		/* bl 28920 */
		/* 8207F4D8h case   35:*/		regs.LR = 0x8207F4DC; return 0x820865D0;
		/* 8207F4D8h case   35:*/		return 0x8207F4DC;
		  /* 8207F4DCh */ case   36:  		/* cmpwi CR0, R3, 0 */
		/* 8207F4DCh case   36:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F4DCh case   36:*/		return 0x8207F4E0;
		  /* 8207F4E0h */ case   37:  		/* bc 12, CR0_EQ, -228 */
		/* 8207F4E0h case   37:*/		if ( regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F4E0h case   37:*/		return 0x8207F4E4;
		  /* 8207F4E4h */ case   38:  		/* mr R3, R31 */
		/* 8207F4E4h case   38:*/		regs.R3 = regs.R31;
		/* 8207F4E4h case   38:*/		return 0x8207F4E8;
		  /* 8207F4E8h */ case   39:  		/* bl -85304 */
		/* 8207F4E8h case   39:*/		regs.LR = 0x8207F4EC; return 0x8206A7B0;
		/* 8207F4E8h case   39:*/		return 0x8207F4EC;
		  /* 8207F4ECh */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 8207F4ECh case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F4ECh case   40:*/		return 0x8207F4F0;
		  /* 8207F4F0h */ case   41:  		/* bc 12, CR0_EQ, -244 */
		/* 8207F4F0h case   41:*/		if ( regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F4F0h case   41:*/		return 0x8207F4F4;
		  /* 8207F4F4h */ case   42:  		/* li R11, -1 */
		/* 8207F4F4h case   42:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8207F4F4h case   42:*/		return 0x8207F4F8;
		  /* 8207F4F8h */ case   43:  		/* mr R3, R31 */
		/* 8207F4F8h case   43:*/		regs.R3 = regs.R31;
		/* 8207F4F8h case   43:*/		return 0x8207F4FC;
		  /* 8207F4FCh */ case   44:  		/* stw R11, <#[R31 + 21968]> */
		/* 8207F4FCh case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055D0) );
		/* 8207F4FCh case   44:*/		return 0x8207F500;
		  /* 8207F500h */ case   45:  		/* stw R11, <#[R31 + 21972]> */
		/* 8207F500h case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000055D4) );
		/* 8207F500h case   45:*/		return 0x8207F504;
		  /* 8207F504h */ case   46:  		/* bl 29380 */
		/* 8207F504h case   46:*/		regs.LR = 0x8207F508; return 0x820867C8;
		/* 8207F504h case   46:*/		return 0x8207F508;
	}
	return 0x8207F508;
} // Block from 8207F44Ch-8207F508h (47 instructions)

//////////////////////////////////////////////////////
// Block at 8207F508h
// Function '?DriverCleanup@D3D@@YAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F508);
		  /* 8207F508h */ case    0:  		/* mr R4, R29 */
		/* 8207F508h case    0:*/		regs.R4 = regs.R29;
		/* 8207F508h case    0:*/		return 0x8207F50C;
		  /* 8207F50Ch */ case    1:  		/* mr R3, R31 */
		/* 8207F50Ch case    1:*/		regs.R3 = regs.R31;
		/* 8207F50Ch case    1:*/		return 0x8207F510;
		  /* 8207F510h */ case    2:  		/* bl -1008 */
		/* 8207F510h case    2:*/		regs.LR = 0x8207F514; return 0x8207F120;
		/* 8207F510h case    2:*/		return 0x8207F514;
		  /* 8207F514h */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 8207F514h case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F514h case    3:*/		return 0x8207F518;
		  /* 8207F518h */ case    4:  		/* bc 12, CR0_EQ, -284 */
		/* 8207F518h case    4:*/		if ( regs.CR[0].eq ) { return 0x8207F3FC;  }
		/* 8207F518h case    4:*/		return 0x8207F51C;
		  /* 8207F51Ch */ case    5:  		/* mr R3, R31 */
		/* 8207F51Ch case    5:*/		regs.R3 = regs.R31;
		/* 8207F51Ch case    5:*/		return 0x8207F520;
		  /* 8207F520h */ case    6:  		/* bl -3536 */
		/* 8207F520h case    6:*/		regs.LR = 0x8207F524; return 0x8207E750;
		/* 8207F520h case    6:*/		return 0x8207F524;
		  /* 8207F524h */ case    7:  		/* stw R30, <#[R31 + 13916]> */
		/* 8207F524h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000365C) );
		/* 8207F524h case    7:*/		return 0x8207F528;
	}
	return 0x8207F528;
} // Block from 8207F508h-8207F528h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207F528h
// Function '?D3DHangAvoidanceNotification@D3D@@YAXPAU_EX_TITLE_TERMINATE_REGISTRATION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F528);
		  /* 8207F528h */ case    0:  		/* lis R4, -20096 */
		/* 8207F528h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207F528h case    0:*/		return 0x8207F52C;
		  /* 8207F52Ch */ case    1:  		/* li R3, 0 */
		/* 8207F52Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8207F52Ch case    1:*/		return 0x8207F530;
		  /* 8207F530h */ case    2:  		/* bl 36360 */
		/* 8207F530h case    2:*/		regs.LR = 0x8207F534; return 0x82088338;
		/* 8207F530h case    2:*/		return 0x8207F534;
		  /* 8207F534h */ case    3:  		/* lis R11, -32256 */
		/* 8207F534h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F534h case    3:*/		return 0x8207F538;
		  /* 8207F538h */ case    4:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8207F538h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8207F538h case    4:*/		return 0x8207F53C;
		  /* 8207F53Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8207F53Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F53Ch case    5:*/		return 0x8207F540;
		  /* 8207F540h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8207F540h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207F540h case    6:*/		return 0x8207F544;
		  /* 8207F544h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 8207F544h case    7:*/		if ( regs.CR[6].eq ) { return 0x8207F550;  }
		/* 8207F544h case    7:*/		return 0x8207F548;
		  /* 8207F548h */ case    8:  		/* lwz R11, <#[R11 + 32]> */
		/* 8207F548h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8207F548h case    8:*/		return 0x8207F54C;
		  /* 8207F54Ch */ case    9:  		/* b 8 */
		/* 8207F54Ch case    9:*/		return 0x8207F554;
		/* 8207F54Ch case    9:*/		return 0x8207F550;
	}
	return 0x8207F550;
} // Block from 8207F528h-8207F550h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8207F550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F550);
		  /* 8207F550h */ case    0:  		/* mr R11, R30 */
		/* 8207F550h case    0:*/		regs.R11 = regs.R30;
		/* 8207F550h case    0:*/		return 0x8207F554;
	}
	return 0x8207F554;
} // Block from 8207F550h-8207F554h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F554);
		  /* 8207F554h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8207F554h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8207F554h case    0:*/		return 0x8207F558;
		  /* 8207F558h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 8207F558h case    1:*/		if ( regs.CR[6].eq ) { return 0x8207F588;  }
		/* 8207F558h case    1:*/		return 0x8207F55C;
		  /* 8207F55Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8207F55Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F55Ch case    2:*/		return 0x8207F560;
		  /* 8207F560h */ case    3:  		/* cmplwi CR6, R10, 8 */
		/* 8207F560h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 8207F560h case    3:*/		return 0x8207F564;
		  /* 8207F564h */ case    4:  		/* bc 4, CR6_GT, 20 */
		/* 8207F564h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8207F578;  }
		/* 8207F564h case    4:*/		return 0x8207F568;
	}
	return 0x8207F568;
} // Block from 8207F554h-8207F568h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F568h
// Function '?D3DTerminateNotification@D3D@@YAXPAU_EX_TITLE_TERMINATE_REGISTRATION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F568);
		  /* 8207F568h */ case    0:  		/* addi R10, R31, 17128 */
		/* 8207F568h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x42E8);
		/* 8207F568h case    0:*/		return 0x8207F56C;
		  /* 8207F56Ch */ case    1:  		/* addi R9, R31, 17132 */
		/* 8207F56Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x42EC);
		/* 8207F56Ch case    1:*/		return 0x8207F570;
		  /* 8207F570h */ case    2:  		/* stw R10, <#[R11 + 4]> */
		/* 8207F570h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8207F570h case    2:*/		return 0x8207F574;
		  /* 8207F574h */ case    3:  		/* stw R9, <#[R11 + 8]> */
		/* 8207F574h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8207F574h case    3:*/		return 0x8207F578;
	}
	return 0x8207F578;
} // Block from 8207F568h-8207F578h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207F578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F578);
		  /* 8207F578h */ case    0:  		/* addi R10, R31, 16968 */
		/* 8207F578h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4248);
		/* 8207F578h case    0:*/		return 0x8207F57C;
		  /* 8207F57Ch */ case    1:  		/* addi R9, R31, 21984 */
		/* 8207F57Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x55E0);
		/* 8207F57Ch case    1:*/		return 0x8207F580;
		  /* 8207F580h */ case    2:  		/* stw R10, <#[R11 + 24]> */
		/* 8207F580h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8207F580h case    2:*/		return 0x8207F584;
		  /* 8207F584h */ case    3:  		/* stw R9, <#[R11 + 28]> */
		/* 8207F584h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 8207F584h case    3:*/		return 0x8207F588;
	}
	return 0x8207F588;
} // Block from 8207F578h-8207F588h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207F588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F588);
		  /* 8207F588h */ case    0:  		/* mr R3, R31 */
		/* 8207F588h case    0:*/		regs.R3 = regs.R31;
		/* 8207F588h case    0:*/		return 0x8207F58C;
		  /* 8207F58Ch */ case    1:  		/* bl -46212 */
		/* 8207F58Ch case    1:*/		regs.LR = 0x8207F590; return 0x82074108;
		/* 8207F58Ch case    1:*/		return 0x8207F590;
		  /* 8207F590h */ case    2:  		/* addi R3, R1, 88 */
		/* 8207F590h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 8207F590h case    2:*/		return 0x8207F594;
		  /* 8207F594h */ case    3:  		/* bl 33852 */
		/* 8207F594h case    3:*/		regs.LR = 0x8207F598; return 0x820879D0;
		/* 8207F594h case    3:*/		return 0x8207F598;
		  /* 8207F598h */ case    4:  		/* lfd FR13, <#[R1 + 88]> */
		/* 8207F598h case    4:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8207F598h case    4:*/		return 0x8207F59C;
		  /* 8207F59Ch */ case    5:  		/* fcfid FR13, FR13 */
		/* 8207F59Ch case    5:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 8207F59Ch case    5:*/		return 0x8207F5A0;
		  /* 8207F5A0h */ case    6:  		/* lis R11, -32256 */
		/* 8207F5A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F5A0h case    6:*/		return 0x8207F5A4;
		  /* 8207F5A4h */ case    7:  		/* mr R3, R31 */
		/* 8207F5A4h case    7:*/		regs.R3 = regs.R31;
		/* 8207F5A4h case    7:*/		return 0x8207F5A8;
		  /* 8207F5A8h */ case    8:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 8207F5A8h case    8:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 8207F5A8h case    8:*/		return 0x8207F5AC;
		  /* 8207F5ACh */ case    9:  		/* frsp FR13, FR13 */
		/* 8207F5ACh case    9:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8207F5ACh case    9:*/		return 0x8207F5B0;
		  /* 8207F5B0h */ case   10:  		/* stfs FR13, <#[R31 + 21996]> */
		/* 8207F5B0h case   10:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R31 + 0x000055EC) );
		/* 8207F5B0h case   10:*/		return 0x8207F5B4;
		  /* 8207F5B4h */ case   11:  		/* fdivs FR0, FR0, FR13 */
		/* 8207F5B4h case   11:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8207F5B4h case   11:*/		return 0x8207F5B8;
		  /* 8207F5B8h */ case   12:  		/* stfs FR0, <#[R31 + 22000]> */
		/* 8207F5B8h case   12:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R31 + 0x000055F0) );
		/* 8207F5B8h case   12:*/		return 0x8207F5BC;
		  /* 8207F5BCh */ case   13:  		/* bl -26572 */
		/* 8207F5BCh case   13:*/		regs.LR = 0x8207F5C0; return 0x82078DF0;
		/* 8207F5BCh case   13:*/		return 0x8207F5C0;
		  /* 8207F5C0h */ case   14:  		/* li R5, 1 */
		/* 8207F5C0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8207F5C0h case   14:*/		return 0x8207F5C4;
		  /* 8207F5C4h */ case   15:  		/* li R4, 1 */
		/* 8207F5C4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8207F5C4h case   15:*/		return 0x8207F5C8;
		  /* 8207F5C8h */ case   16:  		/* mr R3, R31 */
		/* 8207F5C8h case   16:*/		regs.R3 = regs.R31;
		/* 8207F5C8h case   16:*/		return 0x8207F5CC;
		  /* 8207F5CCh */ case   17:  		/* bl -8580 */
		/* 8207F5CCh case   17:*/		regs.LR = 0x8207F5D0; return 0x8207D448;
		/* 8207F5CCh case   17:*/		return 0x8207F5D0;
		  /* 8207F5D0h */ case   18:  		/* li R4, 0 */
		/* 8207F5D0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F5D0h case   18:*/		return 0x8207F5D4;
		  /* 8207F5D4h */ case   19:  		/* mr R3, R31 */
		/* 8207F5D4h case   19:*/		regs.R3 = regs.R31;
		/* 8207F5D4h case   19:*/		return 0x8207F5D8;
		  /* 8207F5D8h */ case   20:  		/* bl -109488 */
		/* 8207F5D8h case   20:*/		regs.LR = 0x8207F5DC; return 0x82064A28;
		/* 8207F5D8h case   20:*/		return 0x8207F5DC;
		  /* 8207F5DCh */ case   21:  		/* lis R30, -32216 */
		/* 8207F5DCh case   21:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8228);
		/* 8207F5DCh case   21:*/		return 0x8207F5E0;
		  /* 8207F5E0h */ case   22:  		/* lwz R11, <#[R30 + 28736]> */
		/* 8207F5E0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00007040) );
		/* 8207F5E0h case   22:*/		return 0x8207F5E4;
		  /* 8207F5E4h */ case   23:  		/* cmpwi CR6, R11, 0 */
		/* 8207F5E4h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8207F5E4h case   23:*/		return 0x8207F5E8;
		  /* 8207F5E8h */ case   24:  		/* bc 4, CR6_EQ, 20 */
		/* 8207F5E8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8207F5FC;  }
		/* 8207F5E8h case   24:*/		return 0x8207F5EC;
		  /* 8207F5ECh */ case   25:  		/* bl 2022348 */
		/* 8207F5ECh case   25:*/		regs.LR = 0x8207F5F0; return 0x8226D1B8;
		/* 8207F5ECh case   25:*/		return 0x8207F5F0;
		  /* 8207F5F0h */ case   26:  		/* cntlzw R11, R3 */
		/* 8207F5F0h case   26:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R3);
		/* 8207F5F0h case   26:*/		return 0x8207F5F4;
		  /* 8207F5F4h */ case   27:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8207F5F4h case   27:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8207F5F4h case   27:*/		return 0x8207F5F8;
	}
	return 0x8207F5F8;
} // Block from 8207F588h-8207F5F8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8207F5F8h
// Function '?InitializeHardwareDevice@D3D@@YAHPAVCDevice@1@PBU_D3DPRESENT_PARAMETERS_@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F5F8);
		  /* 8207F5F8h */ case    0:  		/* stw R11, <#[R30 + 28736]> */
		/* 8207F5F8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00007040) );
		/* 8207F5F8h case    0:*/		return 0x8207F5FC;
	}
	return 0x8207F5FC;
} // Block from 8207F5F8h-8207F5FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F5FC);
		  /* 8207F5FCh */ case    0:  		/* bl 2021628 */
		/* 8207F5FCh case    0:*/		regs.LR = 0x8207F600; return 0x8226CEF8;
		/* 8207F5FCh case    0:*/		return 0x8207F600;
		  /* 8207F600h */ case    1:  		/* cmpwi CR6, R3, 2 */
		/* 8207F600h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8207F600h case    1:*/		return 0x8207F604;
		  /* 8207F604h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8207F604h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207F610;  }
		/* 8207F604h case    2:*/		return 0x8207F608;
		  /* 8207F608h */ case    3:  		/* mr R3, R31 */
		/* 8207F608h case    3:*/		regs.R3 = regs.R31;
		/* 8207F608h case    3:*/		return 0x8207F60C;
		  /* 8207F60Ch */ case    4:  		/* bl 332 */
		/* 8207F60Ch case    4:*/		regs.LR = 0x8207F610; return 0x8207F758;
		/* 8207F60Ch case    4:*/		return 0x8207F610;
	}
	return 0x8207F610;
} // Block from 8207F5FCh-8207F610h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F610);
		  /* 8207F610h */ case    0:  		/* li R3, 1 */
		/* 8207F610h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F610h case    0:*/		return 0x8207F614;
	}
	return 0x8207F614;
} // Block from 8207F610h-8207F614h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F614);
		  /* 8207F614h */ case    0:  		/* addi R1, R1, 128 */
		/* 8207F614h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207F614h case    0:*/		return 0x8207F618;
		  /* 8207F618h */ case    1:  		/* b 72852 */
		/* 8207F618h case    1:*/		return 0x820912AC;
		/* 8207F618h case    1:*/		return 0x8207F61C;
		  /* 8207F61Ch */ case    2:  		/* nop */
		/* 8207F61Ch case    2:*/		cpu::op::nop();
		/* 8207F61Ch case    2:*/		return 0x8207F620;
		  /* 8207F620h */ case    3:  		/* lis R10, -32215 */
		/* 8207F620h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 8207F620h case    3:*/		return 0x8207F624;
		  /* 8207F624h */ case    4:  		/* li R11, 1 */
		/* 8207F624h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207F624h case    4:*/		return 0x8207F628;
		  /* 8207F628h */ case    5:  		/* li R3, 1 */
		/* 8207F628h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F628h case    5:*/		return 0x8207F62C;
		  /* 8207F62Ch */ case    6:  		/* stb R11, <#[R10 - 31321]> */
		/* 8207F62Ch case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF85A7) );
		/* 8207F62Ch case    6:*/		return 0x8207F630;
		  /* 8207F630h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207F630h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F630h case    7:*/		return 0x8207F634;
	}
	return 0x8207F634;
} // Block from 8207F614h-8207F634h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207F634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F634);
		  /* 8207F634h */ case    0:  		/* nop */
		/* 8207F634h case    0:*/		cpu::op::nop();
		/* 8207F634h case    0:*/		return 0x8207F638;
		  /* 8207F638h */ case    1:  		/* lis R10, -32215 */
		/* 8207F638h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 8207F638h case    1:*/		return 0x8207F63C;
		  /* 8207F63Ch */ case    2:  		/* li R11, 0 */
		/* 8207F63Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8207F63Ch case    2:*/		return 0x8207F640;
		  /* 8207F640h */ case    3:  		/* li R3, 1 */
		/* 8207F640h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F640h case    3:*/		return 0x8207F644;
		  /* 8207F644h */ case    4:  		/* stb R11, <#[R10 - 31321]> */
		/* 8207F644h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF85A7) );
		/* 8207F644h case    4:*/		return 0x8207F648;
		  /* 8207F648h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207F648h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F648h case    5:*/		return 0x8207F64C;
	}
	return 0x8207F64C;
} // Block from 8207F634h-8207F64Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F64C);
		  /* 8207F64Ch */ case    0:  		/* nop */
		/* 8207F64Ch case    0:*/		cpu::op::nop();
		/* 8207F64Ch case    0:*/		return 0x8207F650;
	}
	return 0x8207F650;
} // Block from 8207F64Ch-8207F650h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F650);
		  /* 8207F650h */ case    0:  		/* mfspr R12, LR */
		/* 8207F650h case    0:*/		regs.R12 = regs.LR;
		/* 8207F650h case    0:*/		return 0x8207F654;
		  /* 8207F654h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207F654h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F654h case    1:*/		return 0x8207F658;
		  /* 8207F658h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207F658h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207F658h case    2:*/		return 0x8207F65C;
		  /* 8207F65Ch */ case    3:  		/* bl 79116 */
		/* 8207F65Ch case    3:*/		regs.LR = 0x8207F660; return 0x82092B68;
		/* 8207F65Ch case    3:*/		return 0x8207F660;
		  /* 8207F660h */ case    4:  		/* lis R11, 1 */
		/* 8207F660h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 8207F660h case    4:*/		return 0x8207F664;
		  /* 8207F664h */ case    5:  		/* ori R11, R11, 1 */
		/* 8207F664h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207F664h case    5:*/		return 0x8207F668;
		  /* 8207F668h */ case    6:  		/* subf R11, R3, R11 */
		/* 8207F668h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8207F668h case    6:*/		return 0x8207F66C;
		  /* 8207F66Ch */ case    7:  		/* cntlzw R11, R11 */
		/* 8207F66Ch case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8207F66Ch case    7:*/		return 0x8207F670;
		  /* 8207F670h */ case    8:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8207F670h case    8:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8207F670h case    8:*/		return 0x8207F674;
		  /* 8207F674h */ case    9:  		/* addi R1, R1, 96 */
		/* 8207F674h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207F674h case    9:*/		return 0x8207F678;
		  /* 8207F678h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207F678h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F678h case   10:*/		return 0x8207F67C;
		  /* 8207F67Ch */ case   11:  		/* mtspr LR, R12 */
		/* 8207F67Ch case   11:*/		regs.LR = regs.R12;
		/* 8207F67Ch case   11:*/		return 0x8207F680;
		  /* 8207F680h */ case   12:  		/* bclr 20, CR0_LT */
		/* 8207F680h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F680h case   12:*/		return 0x8207F684;
	}
	return 0x8207F684;
} // Block from 8207F650h-8207F684h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207F684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F684);
		  /* 8207F684h */ case    0:  		/* nop */
		/* 8207F684h case    0:*/		cpu::op::nop();
		/* 8207F684h case    0:*/		return 0x8207F688;
	}
	return 0x8207F688;
} // Block from 8207F684h-8207F688h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F688);
		  /* 8207F688h */ case    0:  		/* mfspr R12, LR */
		/* 8207F688h case    0:*/		regs.R12 = regs.LR;
		/* 8207F688h case    0:*/		return 0x8207F68C;
		  /* 8207F68Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207F68Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F68Ch case    1:*/		return 0x8207F690;
		  /* 8207F690h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207F690h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207F690h case    2:*/		return 0x8207F694;
		  /* 8207F694h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207F694h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207F694h case    3:*/		return 0x8207F698;
		  /* 8207F698h */ case    4:  		/* mr R31, R3 */
		/* 8207F698h case    4:*/		regs.R31 = regs.R3;
		/* 8207F698h case    4:*/		return 0x8207F69C;
		  /* 8207F69Ch */ case    5:  		/* bl 79052 */
		/* 8207F69Ch case    5:*/		regs.LR = 0x8207F6A0; return 0x82092B68;
		/* 8207F69Ch case    5:*/		return 0x8207F6A0;
		  /* 8207F6A0h */ case    6:  		/* lis R11, 2 */
		/* 8207F6A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 8207F6A0h case    6:*/		return 0x8207F6A4;
		  /* 8207F6A4h */ case    7:  		/* ori R11, R11, 32728 */
		/* 8207F6A4h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x7FD8);
		/* 8207F6A4h case    7:*/		return 0x8207F6A8;
		  /* 8207F6A8h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 8207F6A8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8207F6A8h case    8:*/		return 0x8207F6AC;
		  /* 8207F6ACh */ case    9:  		/* bc 4, CR6_LT, 16 */
		/* 8207F6ACh case    9:*/		if ( !regs.CR[6].lt ) { return 0x8207F6BC;  }
		/* 8207F6ACh case    9:*/		return 0x8207F6B0;
		  /* 8207F6B0h */ case   10:  		/* mr R3, R31 */
		/* 8207F6B0h case   10:*/		regs.R3 = regs.R31;
		/* 8207F6B0h case   10:*/		return 0x8207F6B4;
		  /* 8207F6B4h */ case   11:  		/* bl 79028 */
		/* 8207F6B4h case   11:*/		regs.LR = 0x8207F6B8; return 0x82092B68;
		/* 8207F6B4h case   11:*/		return 0x8207F6B8;
		  /* 8207F6B8h */ case   12:  		/* extsw R11, R3 */
		/* 8207F6B8h case   12:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R3);
		/* 8207F6B8h case   12:*/		return 0x8207F6BC;
	}
	return 0x8207F6BC;
} // Block from 8207F688h-8207F6BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8207F6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F6BC);
		  /* 8207F6BCh */ case    0:  		/* lis R10, -32217 */
		/* 8207F6BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8207F6BCh case    0:*/		return 0x8207F6C0;
		  /* 8207F6C0h */ case    1:  		/* li R3, 1 */
		/* 8207F6C0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F6C0h case    1:*/		return 0x8207F6C4;
		  /* 8207F6C4h */ case    2:  		/* stw R11, <#[R10 + 5916]> */
		/* 8207F6C4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000171C) );
		/* 8207F6C4h case    2:*/		return 0x8207F6C8;
		  /* 8207F6C8h */ case    3:  		/* addi R1, R1, 96 */
		/* 8207F6C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207F6C8h case    3:*/		return 0x8207F6CC;
		  /* 8207F6CCh */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207F6CCh case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F6CCh case    4:*/		return 0x8207F6D0;
		  /* 8207F6D0h */ case    5:  		/* mtspr LR, R12 */
		/* 8207F6D0h case    5:*/		regs.LR = regs.R12;
		/* 8207F6D0h case    5:*/		return 0x8207F6D4;
		  /* 8207F6D4h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 8207F6D4h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207F6D4h case    6:*/		return 0x8207F6D8;
		  /* 8207F6D8h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8207F6D8h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F6D8h case    7:*/		return 0x8207F6DC;
	}
	return 0x8207F6DC;
} // Block from 8207F6BCh-8207F6DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8207F6DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F6DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F6DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F6DC);
		  /* 8207F6DCh */ case    0:  		/* nop */
		/* 8207F6DCh case    0:*/		cpu::op::nop();
		/* 8207F6DCh case    0:*/		return 0x8207F6E0;
	}
	return 0x8207F6E0;
} // Block from 8207F6DCh-8207F6E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F6E0);
		  /* 8207F6E0h */ case    0:  		/* mfspr R12, LR */
		/* 8207F6E0h case    0:*/		regs.R12 = regs.LR;
		/* 8207F6E0h case    0:*/		return 0x8207F6E4;
		  /* 8207F6E4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207F6E4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F6E4h case    1:*/		return 0x8207F6E8;
		  /* 8207F6E8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8207F6E8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207F6E8h case    2:*/		return 0x8207F6EC;
		  /* 8207F6ECh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8207F6ECh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8207F6ECh case    3:*/		return 0x8207F6F0;
		  /* 8207F6F0h */ case    4:  		/* lis R11, -32215 */
		/* 8207F6F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8207F6F0h case    4:*/		return 0x8207F6F4;
		  /* 8207F6F4h */ case    5:  		/* mr R4, R3 */
		/* 8207F6F4h case    5:*/		regs.R4 = regs.R3;
		/* 8207F6F4h case    5:*/		return 0x8207F6F8;
		  /* 8207F6F8h */ case    6:  		/* addi R31, R11, -31584 */
		/* 8207F6F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF84A0);
		/* 8207F6F8h case    6:*/		return 0x8207F6FC;
		  /* 8207F6FCh */ case    7:  		/* li R5, 260 */
		/* 8207F6FCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 8207F6FCh case    7:*/		return 0x8207F700;
		  /* 8207F700h */ case    8:  		/* mr R3, R31 */
		/* 8207F700h case    8:*/		regs.R3 = regs.R31;
		/* 8207F700h case    8:*/		return 0x8207F704;
		  /* 8207F704h */ case    9:  		/* bl 78788 */
		/* 8207F704h case    9:*/		regs.LR = 0x8207F708; return 0x82092AC8;
		/* 8207F704h case    9:*/		return 0x8207F708;
		  /* 8207F708h */ case   10:  		/* li R11, 1 */
		/* 8207F708h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207F708h case   10:*/		return 0x8207F70C;
		  /* 8207F70Ch */ case   11:  		/* li R3, 1 */
		/* 8207F70Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F70Ch case   11:*/		return 0x8207F710;
		  /* 8207F710h */ case   12:  		/* stb R11, <#[R31 + 262]> */
		/* 8207F710h case   12:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000106) );
		/* 8207F710h case   12:*/		return 0x8207F714;
		  /* 8207F714h */ case   13:  		/* addi R1, R1, 96 */
		/* 8207F714h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8207F714h case   13:*/		return 0x8207F718;
		  /* 8207F718h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207F718h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207F718h case   14:*/		return 0x8207F71C;
		  /* 8207F71Ch */ case   15:  		/* mtspr LR, R12 */
		/* 8207F71Ch case   15:*/		regs.LR = regs.R12;
		/* 8207F71Ch case   15:*/		return 0x8207F720;
		  /* 8207F720h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 8207F720h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207F720h case   16:*/		return 0x8207F724;
		  /* 8207F724h */ case   17:  		/* bclr 20, CR0_LT */
		/* 8207F724h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F724h case   17:*/		return 0x8207F728;
	}
	return 0x8207F728;
} // Block from 8207F6E0h-8207F728h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8207F728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F728);
		  /* 8207F728h */ case    0:  		/* lis R10, -32215 */
		/* 8207F728h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 8207F728h case    0:*/		return 0x8207F72C;
		  /* 8207F72Ch */ case    1:  		/* li R11, 1 */
		/* 8207F72Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207F72Ch case    1:*/		return 0x8207F730;
		  /* 8207F730h */ case    2:  		/* li R3, 1 */
		/* 8207F730h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F730h case    2:*/		return 0x8207F734;
		  /* 8207F734h */ case    3:  		/* stb R11, <#[R10 - 31323]> */
		/* 8207F734h case    3:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF85A5) );
		/* 8207F734h case    3:*/		return 0x8207F738;
		  /* 8207F738h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8207F738h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F738h case    4:*/		return 0x8207F73C;
	}
	return 0x8207F73C;
} // Block from 8207F728h-8207F73Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8207F73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F73C);
		  /* 8207F73Ch */ case    0:  		/* nop */
		/* 8207F73Ch case    0:*/		cpu::op::nop();
		/* 8207F73Ch case    0:*/		return 0x8207F740;
		  /* 8207F740h */ case    1:  		/* lis R10, -32215 */
		/* 8207F740h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 8207F740h case    1:*/		return 0x8207F744;
		  /* 8207F744h */ case    2:  		/* li R11, 1 */
		/* 8207F744h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8207F744h case    2:*/		return 0x8207F748;
		  /* 8207F748h */ case    3:  		/* li R3, 1 */
		/* 8207F748h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F748h case    3:*/		return 0x8207F74C;
		  /* 8207F74Ch */ case    4:  		/* stb R11, <#[R10 - 31324]> */
		/* 8207F74Ch case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF85A4) );
		/* 8207F74Ch case    4:*/		return 0x8207F750;
		  /* 8207F750h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8207F750h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F750h case    5:*/		return 0x8207F754;
	}
	return 0x8207F754;
} // Block from 8207F73Ch-8207F754h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8207F754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F754);
		  /* 8207F754h */ case    0:  		/* nop */
		/* 8207F754h case    0:*/		cpu::op::nop();
		/* 8207F754h case    0:*/		return 0x8207F758;
	}
	return 0x8207F758;
} // Block from 8207F754h-8207F758h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F758h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F758);
		  /* 8207F758h */ case    0:  		/* li R11, 41 */
		/* 8207F758h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x29);
		/* 8207F758h case    0:*/		return 0x8207F75C;
		  /* 8207F75Ch */ case    1:  		/* addi R10, R3, 23792 */
		/* 8207F75Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x5CF0);
		/* 8207F75Ch case    1:*/		return 0x8207F760;
		  /* 8207F760h */ case    2:  		/* li R9, -1 */
		/* 8207F760h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8207F760h case    2:*/		return 0x8207F764;
		  /* 8207F764h */ case    3:  		/* addi R10, R10, -4 */
		/* 8207F764h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8207F764h case    3:*/		return 0x8207F768;
		  /* 8207F768h */ case    4:  		/* mtspr CTR, R11 */
		/* 8207F768h case    4:*/		regs.CTR = regs.R11;
		/* 8207F768h case    4:*/		return 0x8207F76C;
		  /* 8207F76Ch */ case    5:  		/* stwu R9, <#[R10 + 4]> */
		/* 8207F76Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8207F76Ch case    5:*/		return 0x8207F770;
		  /* 8207F770h */ case    6:  		/* bc 16, CR0_LT, -4 */
		/* 8207F770h case    6:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207F76C;  }
		/* 8207F770h case    6:*/		return 0x8207F774;
		  /* 8207F774h */ case    7:  		/* li R3, 1 */
		/* 8207F774h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8207F774h case    7:*/		return 0x8207F778;
		  /* 8207F778h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8207F778h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207F778h case    8:*/		return 0x8207F77C;
	}
	return 0x8207F77C;
} // Block from 8207F758h-8207F77Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207F77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F77C);
		  /* 8207F77Ch */ case    0:  		/* nop */
		/* 8207F77Ch case    0:*/		cpu::op::nop();
		/* 8207F77Ch case    0:*/		return 0x8207F780;
	}
	return 0x8207F780;
} // Block from 8207F77Ch-8207F780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8207F780h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F780);
		  /* 8207F780h */ case    0:  		/* mfspr R12, LR */
		/* 8207F780h case    0:*/		regs.R12 = regs.LR;
		/* 8207F780h case    0:*/		return 0x8207F784;
		  /* 8207F784h */ case    1:  		/* bl 72392 */
		/* 8207F784h case    1:*/		regs.LR = 0x8207F788; return 0x8209124C;
		/* 8207F784h case    1:*/		return 0x8207F788;
		  /* 8207F788h */ case    2:  		/* stwu R1, <#[R1 - 688]> */
		/* 8207F788h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD50);
		/* 8207F788h case    2:*/		return 0x8207F78C;
		  /* 8207F78Ch */ case    3:  		/* lis R10, -32256 */
		/* 8207F78Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207F78Ch case    3:*/		return 0x8207F790;
		  /* 8207F790h */ case    4:  		/* mr R11, R3 */
		/* 8207F790h case    4:*/		regs.R11 = regs.R3;
		/* 8207F790h case    4:*/		return 0x8207F794;
		  /* 8207F794h */ case    5:  		/* addi R9, R10, 16592 */
		/* 8207F794h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x40D0);
		/* 8207F794h case    5:*/		return 0x8207F798;
		  /* 8207F798h */ case    6:  		/* addi R29, R11, 6 */
		/* 8207F798h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6);
		/* 8207F798h case    6:*/		return 0x8207F79C;
		  /* 8207F79Ch */ case    7:  		/* mr R26, R4 */
		/* 8207F79Ch case    7:*/		regs.R26 = regs.R4;
		/* 8207F79Ch case    7:*/		return 0x8207F7A0;
		  /* 8207F7A0h */ case    8:  		/* lwz R10, <#[R10 + 16592]> */
		/* 8207F7A0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x000040D0) );
		/* 8207F7A0h case    8:*/		return 0x8207F7A4;
		  /* 8207F7A4h */ case    9:  		/* mr R25, R5 */
		/* 8207F7A4h case    9:*/		regs.R25 = regs.R5;
		/* 8207F7A4h case    9:*/		return 0x8207F7A8;
		  /* 8207F7A8h */ case   10:  		/* lis R27, -32038 */
		/* 8207F7A8h case   10:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF82DA);
		/* 8207F7A8h case   10:*/		return 0x8207F7AC;
		  /* 8207F7ACh */ case   11:  		/* lwz R11, <#[R9 + 4]> */
		/* 8207F7ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 8207F7ACh case   11:*/		return 0x8207F7B0;
		  /* 8207F7B0h */ case   12:  		/* li R5, 54 */
		/* 8207F7B0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x36);
		/* 8207F7B0h case   12:*/		return 0x8207F7B4;
		  /* 8207F7B4h */ case   13:  		/* lhz R9, <#[R9 + 8]> */
		/* 8207F7B4h case   13:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8207F7B4h case   13:*/		return 0x8207F7B8;
		  /* 8207F7B8h */ case   14:  		/* li R4, 0 */
		/* 8207F7B8h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F7B8h case   14:*/		return 0x8207F7BC;
		  /* 8207F7BCh */ case   15:  		/* addi R3, R1, 90 */
		/* 8207F7BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5A);
		/* 8207F7BCh case   15:*/		return 0x8207F7C0;
		  /* 8207F7C0h */ case   16:  		/* ori R27, R27, 7 */
		/* 8207F7C0h case   16:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x7);
		/* 8207F7C0h case   16:*/		return 0x8207F7C4;
		  /* 8207F7C4h */ case   17:  		/* stw R10, <#[R1 + 80]> */
		/* 8207F7C4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8207F7C4h case   17:*/		return 0x8207F7C8;
		  /* 8207F7C8h */ case   18:  		/* stw R11, <#[R1 + 84]> */
		/* 8207F7C8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8207F7C8h case   18:*/		return 0x8207F7CC;
		  /* 8207F7CCh */ case   19:  		/* sth R9, <#[R1 + 88]> */
		/* 8207F7CCh case   19:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8207F7CCh case   19:*/		return 0x8207F7D0;
		  /* 8207F7D0h */ case   20:  		/* bl 72560 */
		/* 8207F7D0h case   20:*/		regs.LR = 0x8207F7D4; return 0x82091340;
		/* 8207F7D0h case   20:*/		return 0x8207F7D4;
		  /* 8207F7D4h */ case   21:  		/* lis R11, -32256 */
		/* 8207F7D4h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F7D4h case   21:*/		return 0x8207F7D8;
		  /* 8207F7D8h */ case   22:  		/* lis R10, -32248 */
		/* 8207F7D8h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F7D8h case   22:*/		return 0x8207F7DC;
		  /* 8207F7DCh */ case   23:  		/* addi R9, R11, 16576 */
		/* 8207F7DCh case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x40C0);
		/* 8207F7DCh case   23:*/		return 0x8207F7E0;
		  /* 8207F7E0h */ case   24:  		/* addi R10, R10, -2528 */
		/* 8207F7E0h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF620);
		/* 8207F7E0h case   24:*/		return 0x8207F7E4;
		  /* 8207F7E4h */ case   25:  		/* li R5, 51 */
		/* 8207F7E4h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 8207F7E4h case   25:*/		return 0x8207F7E8;
		  /* 8207F7E8h */ case   26:  		/* stw R10, <#[R1 + 144]> */
		/* 8207F7E8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 8207F7E8h case   26:*/		return 0x8207F7EC;
		  /* 8207F7ECh */ case   27:  		/* li R4, 0 */
		/* 8207F7ECh case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F7ECh case   27:*/		return 0x8207F7F0;
		  /* 8207F7F0h */ case   28:  		/* lwz R11, <#[R11 + 16576]> */
		/* 8207F7F0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000040C0) );
		/* 8207F7F0h case   28:*/		return 0x8207F7F4;
		  /* 8207F7F4h */ case   29:  		/* addi R3, R1, 161 */
		/* 8207F7F4h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA1);
		/* 8207F7F4h case   29:*/		return 0x8207F7F8;
		  /* 8207F7F8h */ case   30:  		/* lwz R10, <#[R9 + 4]> */
		/* 8207F7F8h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8207F7F8h case   30:*/		return 0x8207F7FC;
		  /* 8207F7FCh */ case   31:  		/* lwz R8, <#[R9 + 8]> */
		/* 8207F7FCh case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 8207F7FCh case   31:*/		return 0x8207F800;
		  /* 8207F800h */ case   32:  		/* lbz R9, <#[R9 + 12]> */
		/* 8207F800h case   32:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 8207F800h case   32:*/		return 0x8207F804;
		  /* 8207F804h */ case   33:  		/* stw R11, <#[R1 + 148]> */
		/* 8207F804h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 8207F804h case   33:*/		return 0x8207F808;
		  /* 8207F808h */ case   34:  		/* stw R10, <#[R1 + 152]> */
		/* 8207F808h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 8207F808h case   34:*/		return 0x8207F80C;
		  /* 8207F80Ch */ case   35:  		/* stw R8, <#[R1 + 156]> */
		/* 8207F80Ch case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000009C) );
		/* 8207F80Ch case   35:*/		return 0x8207F810;
		  /* 8207F810h */ case   36:  		/* stb R9, <#[R1 + 160]> */
		/* 8207F810h case   36:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x000000A0) );
		/* 8207F810h case   36:*/		return 0x8207F814;
		  /* 8207F814h */ case   37:  		/* bl 72492 */
		/* 8207F814h case   37:*/		regs.LR = 0x8207F818; return 0x82091340;
		/* 8207F814h case   37:*/		return 0x8207F818;
		  /* 8207F818h */ case   38:  		/* lis R11, -32256 */
		/* 8207F818h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F818h case   38:*/		return 0x8207F81C;
		  /* 8207F81Ch */ case   39:  		/* lis R10, -32248 */
		/* 8207F81Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F81Ch case   39:*/		return 0x8207F820;
		  /* 8207F820h */ case   40:  		/* addi R9, R11, 16564 */
		/* 8207F820h case   40:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x40B4);
		/* 8207F820h case   40:*/		return 0x8207F824;
		  /* 8207F824h */ case   41:  		/* addi R10, R10, -2504 */
		/* 8207F824h case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF638);
		/* 8207F824h case   41:*/		return 0x8207F828;
		  /* 8207F828h */ case   42:  		/* li R5, 54 */
		/* 8207F828h case   42:*/		cpu::op::li<0>(regs,&regs.R5,0x36);
		/* 8207F828h case   42:*/		return 0x8207F82C;
		  /* 8207F82Ch */ case   43:  		/* stw R10, <#[R1 + 212]> */
		/* 8207F82Ch case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D4) );
		/* 8207F82Ch case   43:*/		return 0x8207F830;
		  /* 8207F830h */ case   44:  		/* li R4, 0 */
		/* 8207F830h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F830h case   44:*/		return 0x8207F834;
		  /* 8207F834h */ case   45:  		/* lwz R11, <#[R11 + 16564]> */
		/* 8207F834h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000040B4) );
		/* 8207F834h case   45:*/		return 0x8207F838;
		  /* 8207F838h */ case   46:  		/* addi R3, R1, 226 */
		/* 8207F838h case   46:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE2);
		/* 8207F838h case   46:*/		return 0x8207F83C;
		  /* 8207F83Ch */ case   47:  		/* lwz R10, <#[R9 + 4]> */
		/* 8207F83Ch case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8207F83Ch case   47:*/		return 0x8207F840;
		  /* 8207F840h */ case   48:  		/* lhz R9, <#[R9 + 8]> */
		/* 8207F840h case   48:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8207F840h case   48:*/		return 0x8207F844;
		  /* 8207F844h */ case   49:  		/* stw R11, <#[R1 + 216]> */
		/* 8207F844h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D8) );
		/* 8207F844h case   49:*/		return 0x8207F848;
		  /* 8207F848h */ case   50:  		/* stw R10, <#[R1 + 220]> */
		/* 8207F848h case   50:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000DC) );
		/* 8207F848h case   50:*/		return 0x8207F84C;
		  /* 8207F84Ch */ case   51:  		/* sth R9, <#[R1 + 224]> */
		/* 8207F84Ch case   51:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R1 + 0x000000E0) );
		/* 8207F84Ch case   51:*/		return 0x8207F850;
		  /* 8207F850h */ case   52:  		/* bl 72432 */
		/* 8207F850h case   52:*/		regs.LR = 0x8207F854; return 0x82091340;
		/* 8207F850h case   52:*/		return 0x8207F854;
		  /* 8207F854h */ case   53:  		/* lis R9, -32248 */
		/* 8207F854h case   53:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8208);
		/* 8207F854h case   53:*/		return 0x8207F858;
		  /* 8207F858h */ case   54:  		/* lis R10, -32256 */
		/* 8207F858h case   54:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8207F858h case   54:*/		return 0x8207F85C;
		  /* 8207F85Ch */ case   55:  		/* li R11, 19 */
		/* 8207F85Ch case   55:*/		cpu::op::li<0>(regs,&regs.R11,0x13);
		/* 8207F85Ch case   55:*/		return 0x8207F860;
		  /* 8207F860h */ case   56:  		/* addi R8, R9, -2480 */
		/* 8207F860h case   56:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0xFFFFF650);
		/* 8207F860h case   56:*/		return 0x8207F864;
		  /* 8207F864h */ case   57:  		/* addi R10, R10, 16544 */
		/* 8207F864h case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x40A0);
		/* 8207F864h case   57:*/		return 0x8207F868;
		  /* 8207F868h */ case   58:  		/* addi R9, R1, 283 */
		/* 8207F868h case   58:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x11B);
		/* 8207F868h case   58:*/		return 0x8207F86C;
		  /* 8207F86Ch */ case   59:  		/* stw R8, <#[R1 + 280]> */
		/* 8207F86Ch case   59:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000118) );
		/* 8207F86Ch case   59:*/		return 0x8207F870;
		  /* 8207F870h */ case   60:  		/* addi R10, R10, -1 */
		/* 8207F870h case   60:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8207F870h case   60:*/		return 0x8207F874;
		  /* 8207F874h */ case   61:  		/* mtspr CTR, R11 */
		/* 8207F874h case   61:*/		regs.CTR = regs.R11;
		/* 8207F874h case   61:*/		return 0x8207F878;
		  /* 8207F878h */ case   62:  		/* lbzu R11, <#[R10 + 1]> */
		/* 8207F878h case   62:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 8207F878h case   62:*/		return 0x8207F87C;
		  /* 8207F87Ch */ case   63:  		/* stbu R11, <#[R9 + 1]> */
		/* 8207F87Ch case   63:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R9 + 0x00000001) );
		regs.R9 = (uint32)(regs.R9 + 0x00000001);
		/* 8207F87Ch case   63:*/		return 0x8207F880;
		  /* 8207F880h */ case   64:  		/* bc 16, CR0_LT, -8 */
		/* 8207F880h case   64:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207F878;  }
		/* 8207F880h case   64:*/		return 0x8207F884;
		  /* 8207F884h */ case   65:  		/* li R5, 45 */
		/* 8207F884h case   65:*/		cpu::op::li<0>(regs,&regs.R5,0x2D);
		/* 8207F884h case   65:*/		return 0x8207F888;
		  /* 8207F888h */ case   66:  		/* li R4, 0 */
		/* 8207F888h case   66:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F888h case   66:*/		return 0x8207F88C;
		  /* 8207F88Ch */ case   67:  		/* addi R3, R1, 303 */
		/* 8207F88Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x12F);
		/* 8207F88Ch case   67:*/		return 0x8207F890;
		  /* 8207F890h */ case   68:  		/* bl 72368 */
		/* 8207F890h case   68:*/		regs.LR = 0x8207F894; return 0x82091340;
		/* 8207F890h case   68:*/		return 0x8207F894;
		  /* 8207F894h */ case   69:  		/* lis R11, -32256 */
		/* 8207F894h case   69:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F894h case   69:*/		return 0x8207F898;
		  /* 8207F898h */ case   70:  		/* lis R10, -32248 */
		/* 8207F898h case   70:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F898h case   70:*/		return 0x8207F89C;
		  /* 8207F89Ch */ case   71:  		/* addi R4, R11, 16516 */
		/* 8207F89Ch case   71:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4084);
		/* 8207F89Ch case   71:*/		return 0x8207F8A0;
		  /* 8207F8A0h */ case   72:  		/* addi R11, R10, -2424 */
		/* 8207F8A0h case   72:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFF688);
		/* 8207F8A0h case   72:*/		return 0x8207F8A4;
		  /* 8207F8A4h */ case   73:  		/* addi R3, R1, 352 */
		/* 8207F8A4h case   73:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x160);
		/* 8207F8A4h case   73:*/		return 0x8207F8A8;
		  /* 8207F8A8h */ case   74:  		/* li R5, 27 */
		/* 8207F8A8h case   74:*/		cpu::op::li<0>(regs,&regs.R5,0x1B);
		/* 8207F8A8h case   74:*/		return 0x8207F8AC;
		  /* 8207F8ACh */ case   75:  		/* stw R11, <#[R1 + 348]> */
		/* 8207F8ACh case   75:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000015C) );
		/* 8207F8ACh case   75:*/		return 0x8207F8B0;
		  /* 8207F8B0h */ case   76:  		/* bl 73984 */
		/* 8207F8B0h case   76:*/		regs.LR = 0x8207F8B4; return 0x820919B0;
		/* 8207F8B0h case   76:*/		return 0x8207F8B4;
		  /* 8207F8B4h */ case   77:  		/* li R5, 37 */
		/* 8207F8B4h case   77:*/		cpu::op::li<0>(regs,&regs.R5,0x25);
		/* 8207F8B4h case   77:*/		return 0x8207F8B8;
		  /* 8207F8B8h */ case   78:  		/* li R4, 0 */
		/* 8207F8B8h case   78:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F8B8h case   78:*/		return 0x8207F8BC;
		  /* 8207F8BCh */ case   79:  		/* addi R3, R1, 379 */
		/* 8207F8BCh case   79:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x17B);
		/* 8207F8BCh case   79:*/		return 0x8207F8C0;
		  /* 8207F8C0h */ case   80:  		/* bl 72320 */
		/* 8207F8C0h case   80:*/		regs.LR = 0x8207F8C4; return 0x82091340;
		/* 8207F8C0h case   80:*/		return 0x8207F8C4;
		  /* 8207F8C4h */ case   81:  		/* lis R11, -32256 */
		/* 8207F8C4h case   81:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F8C4h case   81:*/		return 0x8207F8C8;
		  /* 8207F8C8h */ case   82:  		/* lis R10, -32248 */
		/* 8207F8C8h case   82:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F8C8h case   82:*/		return 0x8207F8CC;
		  /* 8207F8CCh */ case   83:  		/* addi R4, R11, 16488 */
		/* 8207F8CCh case   83:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4068);
		/* 8207F8CCh case   83:*/		return 0x8207F8D0;
		  /* 8207F8D0h */ case   84:  		/* addi R11, R10, -2336 */
		/* 8207F8D0h case   84:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFF6E0);
		/* 8207F8D0h case   84:*/		return 0x8207F8D4;
		  /* 8207F8D4h */ case   85:  		/* addi R3, R1, 420 */
		/* 8207F8D4h case   85:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1A4);
		/* 8207F8D4h case   85:*/		return 0x8207F8D8;
		  /* 8207F8D8h */ case   86:  		/* li R5, 25 */
		/* 8207F8D8h case   86:*/		cpu::op::li<0>(regs,&regs.R5,0x19);
		/* 8207F8D8h case   86:*/		return 0x8207F8DC;
		  /* 8207F8DCh */ case   87:  		/* stw R11, <#[R1 + 416]> */
		/* 8207F8DCh case   87:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001A0) );
		/* 8207F8DCh case   87:*/		return 0x8207F8E0;
		  /* 8207F8E0h */ case   88:  		/* bl 73936 */
		/* 8207F8E0h case   88:*/		regs.LR = 0x8207F8E4; return 0x820919B0;
		/* 8207F8E0h case   88:*/		return 0x8207F8E4;
		  /* 8207F8E4h */ case   89:  		/* li R5, 39 */
		/* 8207F8E4h case   89:*/		cpu::op::li<0>(regs,&regs.R5,0x27);
		/* 8207F8E4h case   89:*/		return 0x8207F8E8;
		  /* 8207F8E8h */ case   90:  		/* li R4, 0 */
		/* 8207F8E8h case   90:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F8E8h case   90:*/		return 0x8207F8EC;
		  /* 8207F8ECh */ case   91:  		/* addi R3, R1, 445 */
		/* 8207F8ECh case   91:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1BD);
		/* 8207F8ECh case   91:*/		return 0x8207F8F0;
		  /* 8207F8F0h */ case   92:  		/* bl 72272 */
		/* 8207F8F0h case   92:*/		regs.LR = 0x8207F8F4; return 0x82091340;
		/* 8207F8F0h case   92:*/		return 0x8207F8F4;
		  /* 8207F8F4h */ case   93:  		/* lis R11, -32256 */
		/* 8207F8F4h case   93:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F8F4h case   93:*/		return 0x8207F8F8;
	}
	return 0x8207F8F8;
} // Block from 8207F780h-8207F8F8h (94 instructions)

//////////////////////////////////////////////////////
// Block at 8207F8F8h
// Function '?UninitializeDevice@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207F8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207F8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207F8F8);
		  /* 8207F8F8h */ case    0:  		/* lis R10, -32248 */
		/* 8207F8F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F8F8h case    0:*/		return 0x8207F8FC;
		  /* 8207F8FCh */ case    1:  		/* addi R9, R11, 16472 */
		/* 8207F8FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4058);
		/* 8207F8FCh case    1:*/		return 0x8207F900;
		  /* 8207F900h */ case    2:  		/* addi R10, R10, -2240 */
		/* 8207F900h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF740);
		/* 8207F900h case    2:*/		return 0x8207F904;
		  /* 8207F904h */ case    3:  		/* li R5, 49 */
		/* 8207F904h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x31);
		/* 8207F904h case    3:*/		return 0x8207F908;
		  /* 8207F908h */ case    4:  		/* stw R10, <#[R1 + 484]> */
		/* 8207F908h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000001E4) );
		/* 8207F908h case    4:*/		return 0x8207F90C;
		  /* 8207F90Ch */ case    5:  		/* li R4, 0 */
		/* 8207F90Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F90Ch case    5:*/		return 0x8207F910;
		  /* 8207F910h */ case    6:  		/* lwz R11, <#[R11 + 16472]> */
		/* 8207F910h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00004058) );
		/* 8207F910h case    6:*/		return 0x8207F914;
		  /* 8207F914h */ case    7:  		/* addi R3, R1, 503 */
		/* 8207F914h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1F7);
		/* 8207F914h case    7:*/		return 0x8207F918;
		  /* 8207F918h */ case    8:  		/* lwz R10, <#[R9 + 4]> */
		/* 8207F918h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8207F918h case    8:*/		return 0x8207F91C;
		  /* 8207F91Ch */ case    9:  		/* lwz R8, <#[R9 + 8]> */
		/* 8207F91Ch case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 8207F91Ch case    9:*/		return 0x8207F920;
		  /* 8207F920h */ case   10:  		/* lhz R7, <#[R9 + 12]> */
		/* 8207F920h case   10:*/		cpu::mem::load16z( regs, &regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 8207F920h case   10:*/		return 0x8207F924;
		  /* 8207F924h */ case   11:  		/* lbz R9, <#[R9 + 14]> */
		/* 8207F924h case   11:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000E) );
		/* 8207F924h case   11:*/		return 0x8207F928;
		  /* 8207F928h */ case   12:  		/* stw R11, <#[R1 + 488]> */
		/* 8207F928h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001E8) );
		/* 8207F928h case   12:*/		return 0x8207F92C;
		  /* 8207F92Ch */ case   13:  		/* stw R10, <#[R1 + 492]> */
		/* 8207F92Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000001EC) );
		/* 8207F92Ch case   13:*/		return 0x8207F930;
		  /* 8207F930h */ case   14:  		/* stw R8, <#[R1 + 496]> */
		/* 8207F930h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000001F0) );
		/* 8207F930h case   14:*/		return 0x8207F934;
		  /* 8207F934h */ case   15:  		/* sth R7, <#[R1 + 500]> */
		/* 8207F934h case   15:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R1 + 0x000001F4) );
		/* 8207F934h case   15:*/		return 0x8207F938;
		  /* 8207F938h */ case   16:  		/* stb R9, <#[R1 + 502]> */
		/* 8207F938h case   16:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x000001F6) );
		/* 8207F938h case   16:*/		return 0x8207F93C;
		  /* 8207F93Ch */ case   17:  		/* bl 72196 */
		/* 8207F93Ch case   17:*/		regs.LR = 0x8207F940; return 0x82091340;
		/* 8207F93Ch case   17:*/		return 0x8207F940;
		  /* 8207F940h */ case   18:  		/* lis R11, -32256 */
		/* 8207F940h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F940h case   18:*/		return 0x8207F944;
		  /* 8207F944h */ case   19:  		/* lis R10, -32248 */
		/* 8207F944h case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 8207F944h case   19:*/		return 0x8207F948;
		  /* 8207F948h */ case   20:  		/* addi R9, R11, 16456 */
		/* 8207F948h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4048);
		/* 8207F948h case   20:*/		return 0x8207F94C;
		  /* 8207F94Ch */ case   21:  		/* addi R10, R10, -2264 */
		/* 8207F94Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF728);
		/* 8207F94Ch case   21:*/		return 0x8207F950;
		  /* 8207F950h */ case   22:  		/* li R5, 51 */
		/* 8207F950h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 8207F950h case   22:*/		return 0x8207F954;
		  /* 8207F954h */ case   23:  		/* stw R10, <#[R1 + 552]> */
		/* 8207F954h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000228) );
		/* 8207F954h case   23:*/		return 0x8207F958;
		  /* 8207F958h */ case   24:  		/* li R4, 0 */
		/* 8207F958h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207F958h case   24:*/		return 0x8207F95C;
		  /* 8207F95Ch */ case   25:  		/* lwz R11, <#[R11 + 16456]> */
		/* 8207F95Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00004048) );
		/* 8207F95Ch case   25:*/		return 0x8207F960;
		  /* 8207F960h */ case   26:  		/* addi R3, R1, 569 */
		/* 8207F960h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x239);
		/* 8207F960h case   26:*/		return 0x8207F964;
		  /* 8207F964h */ case   27:  		/* lwz R10, <#[R9 + 4]> */
		/* 8207F964h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8207F964h case   27:*/		return 0x8207F968;
		  /* 8207F968h */ case   28:  		/* lwz R8, <#[R9 + 8]> */
		/* 8207F968h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 8207F968h case   28:*/		return 0x8207F96C;
		  /* 8207F96Ch */ case   29:  		/* lbz R9, <#[R9 + 12]> */
		/* 8207F96Ch case   29:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 8207F96Ch case   29:*/		return 0x8207F970;
		  /* 8207F970h */ case   30:  		/* stw R11, <#[R1 + 556]> */
		/* 8207F970h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000022C) );
		/* 8207F970h case   30:*/		return 0x8207F974;
		  /* 8207F974h */ case   31:  		/* stw R10, <#[R1 + 560]> */
		/* 8207F974h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000230) );
		/* 8207F974h case   31:*/		return 0x8207F978;
		  /* 8207F978h */ case   32:  		/* stw R8, <#[R1 + 564]> */
		/* 8207F978h case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000234) );
		/* 8207F978h case   32:*/		return 0x8207F97C;
		  /* 8207F97Ch */ case   33:  		/* stb R9, <#[R1 + 568]> */
		/* 8207F97Ch case   33:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R1 + 0x00000238) );
		/* 8207F97Ch case   33:*/		return 0x8207F980;
		  /* 8207F980h */ case   34:  		/* bl 72128 */
		/* 8207F980h case   34:*/		regs.LR = 0x8207F984; return 0x82091340;
		/* 8207F980h case   34:*/		return 0x8207F984;
		  /* 8207F984h */ case   35:  		/* lis R11, -32248 */
		/* 8207F984h case   35:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8208);
		/* 8207F984h case   35:*/		return 0x8207F988;
		  /* 8207F988h */ case   36:  		/* li R28, 0 */
		/* 8207F988h case   36:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8207F988h case   36:*/		return 0x8207F98C;
		  /* 8207F98Ch */ case   37:  		/* addi R11, R11, -2240 */
		/* 8207F98Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFF740);
		/* 8207F98Ch case   37:*/		return 0x8207F990;
		  /* 8207F990h */ case   38:  		/* addi R31, R1, 80 */
		/* 8207F990h case   38:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x50);
		/* 8207F990h case   38:*/		return 0x8207F994;
		  /* 8207F994h */ case   39:  		/* stw R11, <#[R1 + 620]> */
		/* 8207F994h case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000026C) );
		/* 8207F994h case   39:*/		return 0x8207F998;
		  /* 8207F998h */ case   40:  		/* mr R11, R31 */
		/* 8207F998h case   40:*/		regs.R11 = regs.R31;
		/* 8207F998h case   40:*/		return 0x8207F99C;
		  /* 8207F99Ch */ case   41:  		/* lbz R10, <#[R11]> */
		/* 8207F99Ch case   41:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8207F99Ch case   41:*/		return 0x8207F9A0;
		  /* 8207F9A0h */ case   42:  		/* addi R11, R11, 1 */
		/* 8207F9A0h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207F9A0h case   42:*/		return 0x8207F9A4;
		  /* 8207F9A4h */ case   43:  		/* cmplwi CR6, R10, 0 */
		/* 8207F9A4h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8207F9A4h case   43:*/		return 0x8207F9A8;
		  /* 8207F9A8h */ case   44:  		/* bc 4, CR6_EQ, -12 */
		/* 8207F9A8h case   44:*/		if ( !regs.CR[6].eq ) { return 0x8207F99C;  }
		/* 8207F9A8h case   44:*/		return 0x8207F9AC;
		  /* 8207F9ACh */ case   45:  		/* subf R11, R31, R11 */
		/* 8207F9ACh case   45:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 8207F9ACh case   45:*/		return 0x8207F9B0;
		  /* 8207F9B0h */ case   46:  		/* mr R4, R31 */
		/* 8207F9B0h case   46:*/		regs.R4 = regs.R31;
		/* 8207F9B0h case   46:*/		return 0x8207F9B4;
		  /* 8207F9B4h */ case   47:  		/* addi R11, R11, -1 */
		/* 8207F9B4h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8207F9B4h case   47:*/		return 0x8207F9B8;
		  /* 8207F9B8h */ case   48:  		/* mr R3, R29 */
		/* 8207F9B8h case   48:*/		regs.R3 = regs.R29;
		/* 8207F9B8h case   48:*/		return 0x8207F9BC;
		  /* 8207F9BCh */ case   49:  		/* rlwinm R30, R11, 0, 0, 31 */
		/* 8207F9BCh case   49:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R30,regs.R11);
		/* 8207F9BCh case   49:*/		return 0x8207F9C0;
		  /* 8207F9C0h */ case   50:  		/* mr R5, R30 */
		/* 8207F9C0h case   50:*/		regs.R5 = regs.R30;
		/* 8207F9C0h case   50:*/		return 0x8207F9C4;
		  /* 8207F9C4h */ case   51:  		/* bl 76204 */
		/* 8207F9C4h case   51:*/		regs.LR = 0x8207F9C8; return 0x82092370;
		/* 8207F9C4h case   51:*/		return 0x8207F9C8;
		  /* 8207F9C8h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 8207F9C8h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207F9C8h case   52:*/		return 0x8207F9CC;
		  /* 8207F9CCh */ case   53:  		/* bc 12, CR0_EQ, 52 */
		/* 8207F9CCh case   53:*/		if ( regs.CR[0].eq ) { return 0x8207FA00;  }
		/* 8207F9CCh case   53:*/		return 0x8207F9D0;
		  /* 8207F9D0h */ case   54:  		/* addi R28, R28, 1 */
		/* 8207F9D0h case   54:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8207F9D0h case   54:*/		return 0x8207F9D4;
		  /* 8207F9D4h */ case   55:  		/* addi R31, R31, 68 */
		/* 8207F9D4h case   55:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x44);
		/* 8207F9D4h case   55:*/		return 0x8207F9D8;
		  /* 8207F9D8h */ case   56:  		/* cmplwi CR6, R28, 8 */
		/* 8207F9D8h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000008);
		/* 8207F9D8h case   56:*/		return 0x8207F9DC;
		  /* 8207F9DCh */ case   57:  		/* bc 12, CR6_LT, -68 */
		/* 8207F9DCh case   57:*/		if ( regs.CR[6].lt ) { return 0x8207F998;  }
		/* 8207F9DCh case   57:*/		return 0x8207F9E0;
		  /* 8207F9E0h */ case   58:  		/* lis R11, -32256 */
		/* 8207F9E0h case   58:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207F9E0h case   58:*/		return 0x8207F9E4;
		  /* 8207F9E4h */ case   59:  		/* addi R4, R11, 8384 */
		/* 8207F9E4h case   59:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x20C0);
		/* 8207F9E4h case   59:*/		return 0x8207F9E8;
		  /* 8207F9E8h */ case   60:  		/* mr R5, R25 */
		/* 8207F9E8h case   60:*/		regs.R5 = regs.R25;
		/* 8207F9E8h case   60:*/		return 0x8207F9EC;
		  /* 8207F9ECh */ case   61:  		/* mr R3, R26 */
		/* 8207F9ECh case   61:*/		regs.R3 = regs.R26;
		/* 8207F9ECh case   61:*/		return 0x8207F9F0;
		  /* 8207F9F0h */ case   62:  		/* bl 78040 */
		/* 8207F9F0h case   62:*/		regs.LR = 0x8207F9F4; return 0x82092AC8;
		/* 8207F9F0h case   62:*/		return 0x8207F9F4;
		  /* 8207F9F4h */ case   63:  		/* mr R3, R27 */
		/* 8207F9F4h case   63:*/		regs.R3 = regs.R27;
		/* 8207F9F4h case   63:*/		return 0x8207F9F8;
		  /* 8207F9F8h */ case   64:  		/* addi R1, R1, 688 */
		/* 8207F9F8h case   64:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2B0);
		/* 8207F9F8h case   64:*/		return 0x8207F9FC;
		  /* 8207F9FCh */ case   65:  		/* b 71840 */
		/* 8207F9FCh case   65:*/		return 0x8209129C;
		/* 8207F9FCh case   65:*/		return 0x8207FA00;
	}
	return 0x8207FA00;
} // Block from 8207F8F8h-8207FA00h (66 instructions)

//////////////////////////////////////////////////////
// Block at 8207FA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FA00);
		  /* 8207FA00h */ case    0:  		/* mulli R10, R28, 68 */
		/* 8207FA00h case    0:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R28,0x44);
		/* 8207FA00h case    0:*/		return 0x8207FA04;
		  /* 8207FA04h */ case    1:  		/* addi R9, R1, 144 */
		/* 8207FA04h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 8207FA04h case    1:*/		return 0x8207FA08;
		  /* 8207FA08h */ case    2:  		/* add R11, R30, R29 */
		/* 8207FA08h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R29);
		/* 8207FA08h case    2:*/		return 0x8207FA0C;
		  /* 8207FA0Ch */ case    3:  		/* addi R3, R11, 1 */
		/* 8207FA0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1);
		/* 8207FA0Ch case    3:*/		return 0x8207FA10;
		  /* 8207FA10h */ case    4:  		/* lwzx R11, <#[R10 + R9]> */
		/* 8207FA10h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8207FA10h case    4:*/		return 0x8207FA14;
		  /* 8207FA14h */ case    5:  		/* mtspr CTR, R11 */
		/* 8207FA14h case    5:*/		regs.CTR = regs.R11;
		/* 8207FA14h case    5:*/		return 0x8207FA18;
		  /* 8207FA18h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8207FA18h case    6:*/		if ( 1 ) { regs.LR = 0x8207FA1C; return (uint32)regs.CTR; }
		/* 8207FA18h case    6:*/		return 0x8207FA1C;
		  /* 8207FA1Ch */ case    7:  		/* lis R27, 730 */
		/* 8207FA1Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R27,0x2DA);
		/* 8207FA1Ch case    7:*/		return 0x8207FA20;
		  /* 8207FA20h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8207FA20h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8207FA20h case    8:*/		return 0x8207FA24;
		  /* 8207FA24h */ case    9:  		/* bc 12, CR0_EQ, -68 */
		/* 8207FA24h case    9:*/		if ( regs.CR[0].eq ) { return 0x8207F9E0;  }
		/* 8207FA24h case    9:*/		return 0x8207FA28;
		  /* 8207FA28h */ case   10:  		/* lis R11, -32256 */
		/* 8207FA28h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207FA28h case   10:*/		return 0x8207FA2C;
		  /* 8207FA2Ch */ case   11:  		/* addi R4, R11, 16448 */
		/* 8207FA2Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4040);
		/* 8207FA2Ch case   11:*/		return 0x8207FA30;
		  /* 8207FA30h */ case   12:  		/* b -72 */
		/* 8207FA30h case   12:*/		return 0x8207F9E8;
		/* 8207FA30h case   12:*/		return 0x8207FA34;
		  /* 8207FA34h */ case   13:  		/* nop */
		/* 8207FA34h case   13:*/		cpu::op::nop();
		/* 8207FA34h case   13:*/		return 0x8207FA38;
	}
	return 0x8207FA38;
} // Block from 8207FA00h-8207FA38h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8207FA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FA38);
		  /* 8207FA38h */ case    0:  		/* mfspr R12, LR */
		/* 8207FA38h case    0:*/		regs.R12 = regs.LR;
		/* 8207FA38h case    0:*/		return 0x8207FA3C;
		  /* 8207FA3Ch */ case    1:  		/* bl 71704 */
		/* 8207FA3Ch case    1:*/		regs.LR = 0x8207FA40; return 0x82091254;
		/* 8207FA3Ch case    1:*/		return 0x8207FA40;
		  /* 8207FA40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8207FA40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8207FA40h case    2:*/		return 0x8207FA44;
		  /* 8207FA44h */ case    3:  		/* mr R29, R4 */
		/* 8207FA44h case    3:*/		regs.R29 = regs.R4;
		/* 8207FA44h case    3:*/		return 0x8207FA48;
		  /* 8207FA48h */ case    4:  		/* mr R31, R3 */
		/* 8207FA48h case    4:*/		regs.R31 = regs.R3;
		/* 8207FA48h case    4:*/		return 0x8207FA4C;
		  /* 8207FA4Ch */ case    5:  		/* mr R28, R5 */
		/* 8207FA4Ch case    5:*/		regs.R28 = regs.R5;
		/* 8207FA4Ch case    5:*/		return 0x8207FA50;
		  /* 8207FA50h */ case    6:  		/* mr R27, R6 */
		/* 8207FA50h case    6:*/		regs.R27 = regs.R6;
		/* 8207FA50h case    6:*/		return 0x8207FA54;
		  /* 8207FA54h */ case    7:  		/* mr R4, R3 */
		/* 8207FA54h case    7:*/		regs.R4 = regs.R3;
		/* 8207FA54h case    7:*/		return 0x8207FA58;
		  /* 8207FA58h */ case    8:  		/* li R8, 4096 */
		/* 8207FA58h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1000);
		/* 8207FA58h case    8:*/		return 0x8207FA5C;
		  /* 8207FA5Ch */ case    9:  		/* li R7, -1 */
		/* 8207FA5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 8207FA5Ch case    9:*/		return 0x8207FA60;
		  /* 8207FA60h */ case   10:  		/* li R6, 0 */
		/* 8207FA60h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8207FA60h case   10:*/		return 0x8207FA64;
		  /* 8207FA64h */ case   11:  		/* li R5, 1028 */
		/* 8207FA64h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x404);
		/* 8207FA64h case   11:*/		return 0x8207FA68;
		  /* 8207FA68h */ case   12:  		/* li R3, 2 */
		/* 8207FA68h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8207FA68h case   12:*/		return 0x8207FA6C;
		  /* 8207FA6Ch */ case   13:  		/* li R30, 0 */
		/* 8207FA6Ch case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8207FA6Ch case   13:*/		return 0x8207FA70;
		  /* 8207FA70h */ case   14:  		/* bl 2021208 */
		/* 8207FA70h case   14:*/		regs.LR = 0x8207FA74; return 0x8226D1C8;
		/* 8207FA70h case   14:*/		return 0x8207FA74;
		  /* 8207FA74h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8207FA74h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207FA74h case   15:*/		return 0x8207FA78;
		  /* 8207FA78h */ case   16:  		/* bc 4, CR0_EQ, 48 */
		/* 8207FA78h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8207FAA8;  }
		/* 8207FA78h case   16:*/		return 0x8207FA7C;
		  /* 8207FA7Ch */ case   17:  		/* lis R4, -18048 */
		/* 8207FA7Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB980);
		/* 8207FA7Ch case   17:*/		return 0x8207FA80;
		  /* 8207FA80h */ case   18:  		/* mr R3, R31 */
		/* 8207FA80h case   18:*/		regs.R3 = regs.R31;
		/* 8207FA80h case   18:*/		return 0x8207FA84;
		  /* 8207FA84h */ case   19:  		/* bl 34684 */
		/* 8207FA84h case   19:*/		regs.LR = 0x8207FA88; return 0x82088200;
		/* 8207FA84h case   19:*/		return 0x8207FA88;
		  /* 8207FA88h */ case   20:  		/* cmplwi CR0, R3, 0 */
		/* 8207FA88h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8207FA88h case   20:*/		return 0x8207FA8C;
		  /* 8207FA8Ch */ case   21:  		/* bc 12, CR0_EQ, 12 */
		/* 8207FA8Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x8207FA98;  }
		/* 8207FA8Ch case   21:*/		return 0x8207FA90;
		  /* 8207FA90h */ case   22:  		/* li R30, 1 */
		/* 8207FA90h case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8207FA90h case   22:*/		return 0x8207FA94;
		  /* 8207FA94h */ case   23:  		/* b 20 */
		/* 8207FA94h case   23:*/		return 0x8207FAA8;
		/* 8207FA94h case   23:*/		return 0x8207FA98;
	}
	return 0x8207FA98;
} // Block from 8207FA38h-8207FA98h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207FA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FA98);
		  /* 8207FA98h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8207FA98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8207FA98h case    0:*/		return 0x8207FA9C;
		  /* 8207FA9Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8207FA9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8207FAA8;  }
		/* 8207FA9Ch case    1:*/		return 0x8207FAA0;
		  /* 8207FAA0h */ case    2:  		/* mr R3, R29 */
		/* 8207FAA0h case    2:*/		regs.R3 = regs.R29;
		/* 8207FAA0h case    2:*/		return 0x8207FAA4;
		  /* 8207FAA4h */ case    3:  		/* li R30, 2 */
		/* 8207FAA4h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 8207FAA4h case    3:*/		return 0x8207FAA8;
	}
	return 0x8207FAA8;
} // Block from 8207FA98h-8207FAA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207FAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FAA8);
		  /* 8207FAA8h */ case    0:  		/* stw R3, <#[R28]> */
		/* 8207FAA8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 8207FAA8h case    0:*/		return 0x8207FAAC;
		  /* 8207FAACh */ case    1:  		/* stw R30, <#[R27]> */
		/* 8207FAACh case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 8207FAACh case    1:*/		return 0x8207FAB0;
		  /* 8207FAB0h */ case    2:  		/* addi R1, R1, 128 */
		/* 8207FAB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8207FAB0h case    2:*/		return 0x8207FAB4;
		  /* 8207FAB4h */ case    3:  		/* b 71664 */
		/* 8207FAB4h case    3:*/		return 0x820912A4;
		/* 8207FAB4h case    3:*/		return 0x8207FAB8;
	}
	return 0x8207FAB8;
} // Block from 8207FAA8h-8207FAB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8207FAB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FAB8);
		  /* 8207FAB8h */ case    0:  		/* mfspr R12, LR */
		/* 8207FAB8h case    0:*/		regs.R12 = regs.LR;
		/* 8207FAB8h case    0:*/		return 0x8207FABC;
		  /* 8207FABCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8207FABCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207FABCh case    1:*/		return 0x8207FAC0;
		  /* 8207FAC0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8207FAC0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207FAC0h case    2:*/		return 0x8207FAC4;
		  /* 8207FAC4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8207FAC4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207FAC4h case    3:*/		return 0x8207FAC8;
		  /* 8207FAC8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8207FAC8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8207FAC8h case    4:*/		return 0x8207FACC;
		  /* 8207FACCh */ case    5:  		/* addi R31, R3, 23772 */
		/* 8207FACCh case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x5CDC);
		/* 8207FACCh case    5:*/		return 0x8207FAD0;
		  /* 8207FAD0h */ case    6:  		/* lwz R3, <#[R3 + 24364]> */
		/* 8207FAD0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00005F2C) );
		/* 8207FAD0h case    6:*/		return 0x8207FAD4;
		  /* 8207FAD4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8207FAD4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207FAD4h case    7:*/		return 0x8207FAD8;
		  /* 8207FAD8h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8207FAD8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8207FB00;  }
		/* 8207FAD8h case    8:*/		return 0x8207FADC;
		  /* 8207FADCh */ case    9:  		/* lwz R11, <#[R31 + 612]> */
		/* 8207FADCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 8207FADCh case    9:*/		return 0x8207FAE0;
		  /* 8207FAE0h */ case   10:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 8207FAE0h case   10:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 8207FAE0h case   10:*/		return 0x8207FAE4;
		  /* 8207FAE4h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 8207FAE4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8207FAF8;  }
		/* 8207FAE4h case   11:*/		return 0x8207FAE8;
		  /* 8207FAE8h */ case   12:  		/* mr R4, R3 */
		/* 8207FAE8h case   12:*/		regs.R4 = regs.R3;
		/* 8207FAE8h case   12:*/		return 0x8207FAEC;
		  /* 8207FAECh */ case   13:  		/* li R3, 2 */
		/* 8207FAECh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8207FAECh case   13:*/		return 0x8207FAF0;
		  /* 8207FAF0h */ case   14:  		/* bl 2020456 */
		/* 8207FAF0h case   14:*/		regs.LR = 0x8207FAF4; return 0x8226CF58;
		/* 8207FAF0h case   14:*/		return 0x8207FAF4;
		  /* 8207FAF4h */ case   15:  		/* b 12 */
		/* 8207FAF4h case   15:*/		return 0x8207FB00;
		/* 8207FAF4h case   15:*/		return 0x8207FAF8;
	}
	return 0x8207FAF8;
} // Block from 8207FAB8h-8207FAF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8207FAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FAF8);
		  /* 8207FAF8h */ case    0:  		/* lis R4, 9344 */
		/* 8207FAF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 8207FAF8h case    0:*/		return 0x8207FAFC;
		  /* 8207FAFCh */ case    1:  		/* bl 34876 */
		/* 8207FAFCh case    1:*/		regs.LR = 0x8207FB00; return 0x82088338;
		/* 8207FAFCh case    1:*/		return 0x8207FB00;
	}
	return 0x8207FB00;
} // Block from 8207FAF8h-8207FB00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207FB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FB00);
		  /* 8207FB00h */ case    0:  		/* lwz R3, <#[R31]> */
		/* 8207FB00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8207FB00h case    0:*/		return 0x8207FB04;
		  /* 8207FB04h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207FB04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207FB04h case    1:*/		return 0x8207FB08;
		  /* 8207FB08h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 8207FB08h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207FB38;  }
		/* 8207FB08h case    2:*/		return 0x8207FB0C;
		  /* 8207FB0Ch */ case    3:  		/* lwz R11, <#[R31 + 612]> */
		/* 8207FB0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 8207FB0Ch case    3:*/		return 0x8207FB10;
		  /* 8207FB10h */ case    4:  		/* srawi R11, R11, 30 */
		/* 8207FB10h case    4:*/		cpu::op::srawi<0,30>(regs,&regs.R11,regs.R11);
		/* 8207FB10h case    4:*/		return 0x8207FB14;
		  /* 8207FB14h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 8207FB14h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8207FB14h case    5:*/		return 0x8207FB18;
		  /* 8207FB18h */ case    6:  		/* bc 12, CR6_LT, 20 */
		/* 8207FB18h case    6:*/		if ( regs.CR[6].lt ) { return 0x8207FB2C;  }
		/* 8207FB18h case    6:*/		return 0x8207FB1C;
		  /* 8207FB1Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8207FB1Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8207FB38;  }
		/* 8207FB1Ch case    7:*/		return 0x8207FB20;
		  /* 8207FB20h */ case    8:  		/* lis R4, -20096 */
		/* 8207FB20h case    8:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207FB20h case    8:*/		return 0x8207FB24;
		  /* 8207FB24h */ case    9:  		/* bl 34836 */
		/* 8207FB24h case    9:*/		regs.LR = 0x8207FB28; return 0x82088338;
		/* 8207FB24h case    9:*/		return 0x8207FB28;
		  /* 8207FB28h */ case   10:  		/* b 16 */
		/* 8207FB28h case   10:*/		return 0x8207FB38;
		/* 8207FB28h case   10:*/		return 0x8207FB2C;
	}
	return 0x8207FB2C;
} // Block from 8207FB00h-8207FB2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8207FB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FB2C);
		  /* 8207FB2Ch */ case    0:  		/* mr R4, R3 */
		/* 8207FB2Ch case    0:*/		regs.R4 = regs.R3;
		/* 8207FB2Ch case    0:*/		return 0x8207FB30;
		  /* 8207FB30h */ case    1:  		/* li R3, 2 */
		/* 8207FB30h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8207FB30h case    1:*/		return 0x8207FB34;
		  /* 8207FB34h */ case    2:  		/* bl 2020388 */
		/* 8207FB34h case    2:*/		regs.LR = 0x8207FB38; return 0x8226CF58;
		/* 8207FB34h case    2:*/		return 0x8207FB38;
	}
	return 0x8207FB38;
} // Block from 8207FB2Ch-8207FB38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207FB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FB38);
		  /* 8207FB38h */ case    0:  		/* lwz R3, <#[R31 + 4]> */
		/* 8207FB38h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8207FB38h case    0:*/		return 0x8207FB3C;
		  /* 8207FB3Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8207FB3Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8207FB3Ch case    1:*/		return 0x8207FB40;
		  /* 8207FB40h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8207FB40h case    2:*/		if ( regs.CR[6].eq ) { return 0x8207FB74;  }
		/* 8207FB40h case    2:*/		return 0x8207FB44;
		  /* 8207FB44h */ case    3:  		/* lwz R11, <#[R31 + 612]> */
		/* 8207FB44h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 8207FB44h case    3:*/		return 0x8207FB48;
		  /* 8207FB48h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8207FB48h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8207FB48h case    4:*/		return 0x8207FB4C;
		  /* 8207FB4Ch */ case    5:  		/* srawi R11, R11, 30 */
		/* 8207FB4Ch case    5:*/		cpu::op::srawi<0,30>(regs,&regs.R11,regs.R11);
		/* 8207FB4Ch case    5:*/		return 0x8207FB50;
		  /* 8207FB50h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 8207FB50h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8207FB50h case    6:*/		return 0x8207FB54;
		  /* 8207FB54h */ case    7:  		/* bc 12, CR6_LT, 20 */
		/* 8207FB54h case    7:*/		if ( regs.CR[6].lt ) { return 0x8207FB68;  }
		/* 8207FB54h case    7:*/		return 0x8207FB58;
		  /* 8207FB58h */ case    8:  		/* bc 4, CR6_EQ, 28 */
		/* 8207FB58h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8207FB74;  }
		/* 8207FB58h case    8:*/		return 0x8207FB5C;
		  /* 8207FB5Ch */ case    9:  		/* lis R4, -20096 */
		/* 8207FB5Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 8207FB5Ch case    9:*/		return 0x8207FB60;
		  /* 8207FB60h */ case   10:  		/* bl 34776 */
		/* 8207FB60h case   10:*/		regs.LR = 0x8207FB64; return 0x82088338;
		/* 8207FB60h case   10:*/		return 0x8207FB64;
		  /* 8207FB64h */ case   11:  		/* b 16 */
		/* 8207FB64h case   11:*/		return 0x8207FB74;
		/* 8207FB64h case   11:*/		return 0x8207FB68;
	}
	return 0x8207FB68;
} // Block from 8207FB38h-8207FB68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8207FB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FB68);
		  /* 8207FB68h */ case    0:  		/* mr R4, R3 */
		/* 8207FB68h case    0:*/		regs.R4 = regs.R3;
		/* 8207FB68h case    0:*/		return 0x8207FB6C;
		  /* 8207FB6Ch */ case    1:  		/* li R3, 2 */
		/* 8207FB6Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8207FB6Ch case    1:*/		return 0x8207FB70;
		  /* 8207FB70h */ case    2:  		/* bl 2020328 */
		/* 8207FB70h case    2:*/		regs.LR = 0x8207FB74; return 0x8226CF58;
		/* 8207FB70h case    2:*/		return 0x8207FB74;
	}
	return 0x8207FB74;
} // Block from 8207FB68h-8207FB74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8207FB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FB74);
		  /* 8207FB74h */ case    0:  		/* li R5, 620 */
		/* 8207FB74h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x26C);
		/* 8207FB74h case    0:*/		return 0x8207FB78;
		  /* 8207FB78h */ case    1:  		/* lwz R30, <#[R31 + 616]> */
		/* 8207FB78h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000268) );
		/* 8207FB78h case    1:*/		return 0x8207FB7C;
		  /* 8207FB7Ch */ case    2:  		/* li R4, 0 */
		/* 8207FB7Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8207FB7Ch case    2:*/		return 0x8207FB80;
		  /* 8207FB80h */ case    3:  		/* mr R3, R31 */
		/* 8207FB80h case    3:*/		regs.R3 = regs.R31;
		/* 8207FB80h case    3:*/		return 0x8207FB84;
		  /* 8207FB84h */ case    4:  		/* bl 71612 */
		/* 8207FB84h case    4:*/		regs.LR = 0x8207FB88; return 0x82091340;
		/* 8207FB84h case    4:*/		return 0x8207FB88;
		  /* 8207FB88h */ case    5:  		/* li R11, 41 */
		/* 8207FB88h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x29);
		/* 8207FB88h case    5:*/		return 0x8207FB8C;
		  /* 8207FB8Ch */ case    6:  		/* addi R10, R31, 20 */
		/* 8207FB8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x14);
		/* 8207FB8Ch case    6:*/		return 0x8207FB90;
		  /* 8207FB90h */ case    7:  		/* stw R30, <#[R31 + 616]> */
		/* 8207FB90h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000268) );
		/* 8207FB90h case    7:*/		return 0x8207FB94;
		  /* 8207FB94h */ case    8:  		/* li R9, -1 */
		/* 8207FB94h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8207FB94h case    8:*/		return 0x8207FB98;
		  /* 8207FB98h */ case    9:  		/* addi R10, R10, -4 */
		/* 8207FB98h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 8207FB98h case    9:*/		return 0x8207FB9C;
		  /* 8207FB9Ch */ case   10:  		/* mtspr CTR, R11 */
		/* 8207FB9Ch case   10:*/		regs.CTR = regs.R11;
		/* 8207FB9Ch case   10:*/		return 0x8207FBA0;
		  /* 8207FBA0h */ case   11:  		/* stwu R9, <#[R10 + 4]> */
		/* 8207FBA0h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8207FBA0h case   11:*/		return 0x8207FBA4;
		  /* 8207FBA4h */ case   12:  		/* bc 16, CR0_LT, -4 */
		/* 8207FBA4h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8207FBA0;  }
		/* 8207FBA4h case   12:*/		return 0x8207FBA8;
		  /* 8207FBA8h */ case   13:  		/* addi R1, R1, 112 */
		/* 8207FBA8h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8207FBA8h case   13:*/		return 0x8207FBAC;
		  /* 8207FBACh */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 8207FBACh case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8207FBACh case   14:*/		return 0x8207FBB0;
		  /* 8207FBB0h */ case   15:  		/* mtspr LR, R12 */
		/* 8207FBB0h case   15:*/		regs.LR = regs.R12;
		/* 8207FBB0h case   15:*/		return 0x8207FBB4;
		  /* 8207FBB4h */ case   16:  		/* ld R30, <#[R1 - 24]> */
		/* 8207FBB4h case   16:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8207FBB4h case   16:*/		return 0x8207FBB8;
		  /* 8207FBB8h */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 8207FBB8h case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8207FBB8h case   17:*/		return 0x8207FBBC;
		  /* 8207FBBCh */ case   18:  		/* bclr 20, CR0_LT */
		/* 8207FBBCh case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8207FBBCh case   18:*/		return 0x8207FBC0;
	}
	return 0x8207FBC0;
} // Block from 8207FB74h-8207FBC0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8207FBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FBC0);
		  /* 8207FBC0h */ case    0:  		/* mfspr R12, LR */
		/* 8207FBC0h case    0:*/		regs.R12 = regs.LR;
		/* 8207FBC0h case    0:*/		return 0x8207FBC4;
		  /* 8207FBC4h */ case    1:  		/* bl 71272 */
		/* 8207FBC4h case    1:*/		regs.LR = 0x8207FBC8; return 0x8209122C;
		/* 8207FBC4h case    1:*/		return 0x8207FBC8;
		  /* 8207FBC8h */ case    2:  		/* stwu R1, <#[R1 - 528]> */
		/* 8207FBC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDF0);
		/* 8207FBC8h case    2:*/		return 0x8207FBCC;
		  /* 8207FBCCh */ case    3:  		/* lwz R11, <#[R3 + 24376]> */
		/* 8207FBCCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F38) );
		/* 8207FBCCh case    3:*/		return 0x8207FBD0;
		  /* 8207FBD0h */ case    4:  		/* addi R31, R3, 23772 */
		/* 8207FBD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x5CDC);
		/* 8207FBD0h case    4:*/		return 0x8207FBD4;
		  /* 8207FBD4h */ case    5:  		/* stw R5, <#[R1 + 564]> */
		/* 8207FBD4h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000234) );
		/* 8207FBD4h case    5:*/		return 0x8207FBD8;
		  /* 8207FBD8h */ case    6:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8207FBD8h case    6:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8207FBD8h case    6:*/		return 0x8207FBDC;
		  /* 8207FBDCh */ case    7:  		/* addi R10, R31, 372 */
		/* 8207FBDCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x174);
		/* 8207FBDCh case    7:*/		return 0x8207FBE0;
		  /* 8207FBE0h */ case    8:  		/* stw R11, <#[R3 + 24376]> */
		/* 8207FBE0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00005F38) );
		/* 8207FBE0h case    8:*/		return 0x8207FBE4;
		  /* 8207FBE4h */ case    9:  		/* srawi. R7, R11, 29 */
		/* 8207FBE4h case    9:*/		cpu::op::srawi<1,29>(regs,&regs.R7,regs.R11);
		/* 8207FBE4h case    9:*/		return 0x8207FBE8;
		  /* 8207FBE8h */ case   10:  		/* lwz R6, <#[R4 + 36]> */
		/* 8207FBE8h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R4 + 0x00000024) );
		/* 8207FBE8h case   10:*/		return 0x8207FBEC;
		  /* 8207FBECh */ case   11:  		/* addi R9, R31, 368 */
		/* 8207FBECh case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x170);
		/* 8207FBECh case   11:*/		return 0x8207FBF0;
		  /* 8207FBF0h */ case   12:  		/* lwz R11, <#[R4 + 40]> */
		/* 8207FBF0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000028) );
		/* 8207FBF0h case   12:*/		return 0x8207FBF4;
		  /* 8207FBF4h */ case   13:  		/* rlwinm R11, R11, 2, 30, 30 */
		/* 8207FBF4h case   13:*/		cpu::op::rlwinm<0,2,30,30>(regs,&regs.R11,regs.R11);
		/* 8207FBF4h case   13:*/		return 0x8207FBF8;
		  /* 8207FBF8h */ case   14:  		/* rlwinm R8, R6, 0, 19, 31 */
		/* 8207FBF8h case   14:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R6);
		/* 8207FBF8h case   14:*/		return 0x8207FBFC;
		  /* 8207FBFCh */ case   15:  		/* addi R11, R11, 1 */
		/* 8207FBFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8207FBFCh case   15:*/		return 0x8207FC00;
		  /* 8207FC00h */ case   16:  		/* rlwinm R6, R6, 19, 19, 31 */
		/* 8207FC00h case   16:*/		cpu::op::rlwinm<0,19,19,31>(regs,&regs.R6,regs.R6);
		/* 8207FC00h case   16:*/		return 0x8207FC04;
		  /* 8207FC04h */ case   17:  		/* add R8, R8, R11 */
		/* 8207FC04h case   17:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 8207FC04h case   17:*/		return 0x8207FC08;
		  /* 8207FC08h */ case   18:  		/* add R11, R6, R11 */
		/* 8207FC08h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 8207FC08h case   18:*/		return 0x8207FC0C;
		  /* 8207FC0Ch */ case   19:  		/* addi R6, R8, 31 */
		/* 8207FC0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x1F);
		/* 8207FC0Ch case   19:*/		return 0x8207FC10;
		  /* 8207FC10h */ case   20:  		/* sth R8, <#[R3 + 24140]> */
		/* 8207FC10h case   20:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R3 + 0x00005E4C) );
		/* 8207FC10h case   20:*/		return 0x8207FC14;
		  /* 8207FC14h */ case   21:  		/* addi R5, R11, 31 */
		/* 8207FC14h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1F);
		/* 8207FC14h case   21:*/		return 0x8207FC18;
		  /* 8207FC18h */ case   22:  		/* sth R11, <#[R3 + 24142]> */
		/* 8207FC18h case   22:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R3 + 0x00005E4E) );
		/* 8207FC18h case   22:*/		return 0x8207FC1C;
		  /* 8207FC1Ch */ case   23:  		/* rlwinm R6, R6, 0, 16, 26 */
		/* 8207FC1Ch case   23:*/		cpu::op::rlwinm<0,0,16,26>(regs,&regs.R6,regs.R6);
		/* 8207FC1Ch case   23:*/		return 0x8207FC20;
		  /* 8207FC20h */ case   24:  		/* rlwinm R8, R5, 0, 16, 26 */
		/* 8207FC20h case   24:*/		cpu::op::rlwinm<0,0,16,26>(regs,&regs.R8,regs.R5);
		/* 8207FC20h case   24:*/		return 0x8207FC24;
		  /* 8207FC24h */ case   25:  		/* sth R6, <#[R3 + 24144]> */
		/* 8207FC24h case   25:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R3 + 0x00005E50) );
		/* 8207FC24h case   25:*/		return 0x8207FC28;
		  /* 8207FC28h */ case   26:  		/* sth R8, <#[R3 + 24146]> */
		/* 8207FC28h case   26:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R3 + 0x00005E52) );
		/* 8207FC28h case   26:*/		return 0x8207FC2C;
		  /* 8207FC2Ch */ case   27:  		/* bc 4, CR0_EQ, 392 */
		/* 8207FC2Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x8207FDB4;  }
		/* 8207FC2Ch case   27:*/		return 0x8207FC30;
		  /* 8207FC30h */ case   28:  		/* lhz R11, <#[R10]> */
		/* 8207FC30h case   28:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8207FC30h case   28:*/		return 0x8207FC34;
		  /* 8207FC34h */ case   29:  		/* lis R9, -32256 */
		/* 8207FC34h case   29:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207FC34h case   29:*/		return 0x8207FC38;
		  /* 8207FC38h */ case   30:  		/* lis R8, -32256 */
		/* 8207FC38h case   30:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FC38h case   30:*/		return 0x8207FC3C;
		  /* 8207FC3Ch */ case   31:  		/* extsw R11, R11 */
		/* 8207FC3Ch case   31:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 8207FC3Ch case   31:*/		return 0x8207FC40;
		  /* 8207FC40h */ case   32:  		/* lis R7, -32256 */
		/* 8207FC40h case   32:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FC40h case   32:*/		return 0x8207FC44;
		  /* 8207FC44h */ case   33:  		/* std R11, <#[R1 + 80]> */
		/* 8207FC44h case   33:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207FC44h case   33:*/		return 0x8207FC48;
		  /* 8207FC48h */ case   34:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207FC48h case   34:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207FC48h case   34:*/		return 0x8207FC4C;
		  /* 8207FC4Ch */ case   35:  		/* fcfid FR0, FR0 */
		/* 8207FC4Ch case   35:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207FC4Ch case   35:*/		return 0x8207FC50;
		  /* 8207FC50h */ case   36:  		/* lis R6, -32256 */
		/* 8207FC50h case   36:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 8207FC50h case   36:*/		return 0x8207FC54;
		  /* 8207FC54h */ case   37:  		/* frsp FR10, FR0 */
		/* 8207FC54h case   37:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR0);
		/* 8207FC54h case   37:*/		return 0x8207FC58;
		  /* 8207FC58h */ case   38:  		/* lis R5, -32256 */
		/* 8207FC58h case   38:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 8207FC58h case   38:*/		return 0x8207FC5C;
		  /* 8207FC5Ch */ case   39:  		/* addi R4, R1, 96 */
		/* 8207FC5Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8207FC5Ch case   39:*/		return 0x8207FC60;
		  /* 8207FC60h */ case   40:  		/* lfs FR0, <#[R9 + 1792]> */
		/* 8207FC60h case   40:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + 0x00000700) );
		/* 8207FC60h case   40:*/		return 0x8207FC64;
		  /* 8207FC64h */ case   41:  		/* lfs FR13, <#[R8 + 2988]> */
		/* 8207FC64h case   41:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R8 + 0x00000BAC) );
		/* 8207FC64h case   41:*/		return 0x8207FC68;
		  /* 8207FC68h */ case   42:  		/* addi R8, R31, 408 */
		/* 8207FC68h case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x198);
		/* 8207FC68h case   42:*/		return 0x8207FC6C;
		  /* 8207FC6Ch */ case   43:  		/* lfs FR12, <#[R7 + 2980]> */
		/* 8207FC6Ch case   43:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R7 + 0x00000BA4) );
		/* 8207FC6Ch case   43:*/		return 0x8207FC70;
		  /* 8207FC70h */ case   44:  		/* lis R9, -32256 */
		/* 8207FC70h case   44:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207FC70h case   44:*/		return 0x8207FC74;
		  /* 8207FC74h */ case   45:  		/* stfs FR0, <#[R1 + 100]> */
		/* 8207FC74h case   45:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000064) );
		/* 8207FC74h case   45:*/		return 0x8207FC78;
		  /* 8207FC78h */ case   46:  		/* li R11, 16 */
		/* 8207FC78h case   46:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8207FC78h case   46:*/		return 0x8207FC7C;
		  /* 8207FC7Ch */ case   47:  		/* stfs FR12, <#[R1 + 108]> */
		/* 8207FC7Ch case   47:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207FC7Ch case   47:*/		return 0x8207FC80;
		  /* 8207FC80h */ case   48:  		/* addi R9, R9, 16400 */
		/* 8207FC80h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4010);
		/* 8207FC80h case   48:*/		return 0x8207FC84;
		  /* 8207FC84h */ case   49:  		/* stfs FR13, <#[R1 + 104]> */
		/* 8207FC84h case   49:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 8207FC84h case   49:*/		return 0x8207FC88;
		  /* 8207FC88h */ case   50:  		/* li R29, 32 */
		/* 8207FC88h case   50:*/		cpu::op::li<0>(regs,&regs.R29,0x20);
		/* 8207FC88h case   50:*/		return 0x8207FC8C;
		  /* 8207FC8Ch */ case   51:  		/* lfs FR12, <#[R6 + 2752]> */
		/* 8207FC8Ch case   51:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R6 + 0x00000AC0) );
		/* 8207FC8Ch case   51:*/		return 0x8207FC90;
		  /* 8207FC90h */ case   52:  		/* addi R6, R31, 424 */
		/* 8207FC90h case   52:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x1A8);
		/* 8207FC90h case   52:*/		return 0x8207FC94;
		  /* 8207FC94h */ case   53:  		/* lfs FR11, <#[R5 + 2728]> */
		/* 8207FC94h case   53:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R5 + 0x00000AA8) );
		/* 8207FC94h case   53:*/		return 0x8207FC98;
		  /* 8207FC98h */ case   54:  		/* addi R7, R9, 16 */
		/* 8207FC98h case   54:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0x10);
		/* 8207FC98h case   54:*/		return 0x8207FC9C;
		  /* 8207FC9Ch */ case   55:  		/* stfs FR12, <#[R1 + 88]> */
		/* 8207FC9Ch case   55:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000058) );
		/* 8207FC9Ch case   55:*/		return 0x8207FCA0;
	}
	return 0x8207FCA0;
} // Block from 8207FBC0h-8207FCA0h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8207FCA0h
// Function '?PM4LoadShaderConstantsImmediate@D3D@@YA_NPAVCDevice@1@KPBKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FCA0);
		  /* 8207FCA0h */ case    0:  		/* addi R5, R31, 440 */
		/* 8207FCA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1B8);
		/* 8207FCA0h case    0:*/		return 0x8207FCA4;
		  /* 8207FCA4h */ case    1:  		/* fdivs FR0, FR0, FR10 */
		/* 8207FCA4h case    1:*/		cpu::op::fdivs<0>(regs,&regs.FR0,regs.FR0,regs.FR10);
		/* 8207FCA4h case    1:*/		return 0x8207FCA8;
		  /* 8207FCA8h */ case    2:  		/* stfs FR0, <#[R1 + 96]> */
		/* 8207FCA8h case    2:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 8207FCA8h case    2:*/		return 0x8207FCAC;
		  /* 8207FCACh */ case    3:  		/* fmuls FR13, FR10, FR13 */
		/* 8207FCACh case    3:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR10,regs.FR13);
		/* 8207FCACh case    3:*/		return 0x8207FCB0;
		  /* 8207FCB0h */ case    4:  		/* lvx VR63, <#[R4]> */
		/* 8207FCB0h case    4:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FCB0h case    4:*/		return 0x8207FCB4;
		  /* 8207FCB4h */ case    5:  		/* stfs FR11, <#[R1 + 92]> */
		/* 8207FCB4h case    5:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8207FCB4h case    5:*/		return 0x8207FCB8;
		  /* 8207FCB8h */ case    6:  		/* addi R28, R9, 32 */
		/* 8207FCB8h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x20);
		/* 8207FCB8h case    6:*/		return 0x8207FCBC;
		  /* 8207FCBCh */ case    7:  		/* stfs FR13, <#[R1 + 80]> */
		/* 8207FCBCh case    7:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 8207FCBCh case    7:*/		return 0x8207FCC0;
		  /* 8207FCC0h */ case    8:  		/* lis R3, -32256 */
		/* 8207FCC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8200);
		/* 8207FCC0h case    8:*/		return 0x8207FCC4;
		  /* 8207FCC4h */ case    9:  		/* stfs FR0, <#[R1 + 84]> */
		/* 8207FCC4h case    9:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000054) );
		/* 8207FCC4h case    9:*/		return 0x8207FCC8;
		  /* 8207FCC8h */ case   10:  		/* addi R4, R31, 456 */
		/* 8207FCC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1C8);
		/* 8207FCC8h case   10:*/		return 0x8207FCCC;
		  /* 8207FCCCh */ case   11:  		/* stvlx VR63, <#[R8]> */
		/* 8207FCCCh case   11:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R8 + 0x00000000) );
		/* 8207FCCCh case   11:*/		return 0x8207FCD0;
		  /* 8207FCD0h */ case   12:  		/* addi R27, R3, 16768 */
		/* 8207FCD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4180);
		/* 8207FCD0h case   12:*/		return 0x8207FCD4;
		  /* 8207FCD4h */ case   13:  		/* stvrx VR63, <#[R8 + R11]> */
		/* 8207FCD4h case   13:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8207FCD4h case   13:*/		return 0x8207FCD8;
		  /* 8207FCD8h */ case   14:  		/* lis R8, -32256 */
		/* 8207FCD8h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FCD8h case   14:*/		return 0x8207FCDC;
		  /* 8207FCDCh */ case   15:  		/* lvlx VR62, <#[R9]> */
		/* 8207FCDCh case   15:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R9 + 0x00000000) );
		/* 8207FCDCh case   15:*/		return 0x8207FCE0;
		  /* 8207FCE0h */ case   16:  		/* addi R3, R31, 472 */
		/* 8207FCE0h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1D8);
		/* 8207FCE0h case   16:*/		return 0x8207FCE4;
		  /* 8207FCE4h */ case   17:  		/* lvrx VR63, <#[R11 + R9]> */
		/* 8207FCE4h case   17:*/		cpu::mem::lvrx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207FCE4h case   17:*/		return 0x8207FCE8;
		  /* 8207FCE8h */ case   18:  		/* vor VR63, VR62, VR63 */
		/* 8207FCE8h case   18:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207FCE8h case   18:*/		return 0x8207FCEC;
		  /* 8207FCECh */ case   19:  		/* stvlx VR63, <#[R6]> */
		/* 8207FCECh case   19:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FCECh case   19:*/		return 0x8207FCF0;
		  /* 8207FCF0h */ case   20:  		/* addi R26, R8, 16752 */
		/* 8207FCF0h case   20:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0x4170);
		/* 8207FCF0h case   20:*/		return 0x8207FCF4;
		  /* 8207FCF4h */ case   21:  		/* stvrx VR63, <#[R6 + R11]> */
		/* 8207FCF4h case   21:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8207FCF4h case   21:*/		return 0x8207FCF8;
		  /* 8207FCF8h */ case   22:  		/* addi R6, R1, 80 */
		/* 8207FCF8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8207FCF8h case   22:*/		return 0x8207FCFC;
		  /* 8207FCFCh */ case   23:  		/* lvrx VR62, <#[R11 + R7]> */
		/* 8207FCFCh case   23:*/		cpu::mem::lvrx( regs, &regs.VR62, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8207FCFCh case   23:*/		return 0x8207FD00;
		  /* 8207FD00h */ case   24:  		/* lis R8, -32256 */
		/* 8207FD00h case   24:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FD00h case   24:*/		return 0x8207FD04;
		  /* 8207FD04h */ case   25:  		/* lvlx VR63, <#[R9 + R11]> */
		/* 8207FD04h case   25:*/		cpu::mem::lvlx( regs, &regs.VR63, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8207FD04h case   25:*/		return 0x8207FD08;
		  /* 8207FD08h */ case   26:  		/* vor VR63, VR63, VR62 */
		/* 8207FD08h case   26:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR63,regs.VR62);
		/* 8207FD08h case   26:*/		return 0x8207FD0C;
		  /* 8207FD0Ch */ case   27:  		/* stvlx VR63, <#[R5]> */
		/* 8207FD0Ch case   27:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R5 + 0x00000000) );
		/* 8207FD0Ch case   27:*/		return 0x8207FD10;
		  /* 8207FD10h */ case   28:  		/* addi R30, R31, 488 */
		/* 8207FD10h case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x1E8);
		/* 8207FD10h case   28:*/		return 0x8207FD14;
		  /* 8207FD14h */ case   29:  		/* stvrx VR63, <#[R5 + R11]> */
		/* 8207FD14h case   29:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8207FD14h case   29:*/		return 0x8207FD18;
		  /* 8207FD18h */ case   30:  		/* addi R5, R8, 16736 */
		/* 8207FD18h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0x4160);
		/* 8207FD18h case   30:*/		return 0x8207FD1C;
		  /* 8207FD1Ch */ case   31:  		/* lvlx VR63, <#[R9 + R29]> */
		/* 8207FD1Ch case   31:*/		cpu::mem::lvlx( regs, &regs.VR63, (uint32)(regs.R9 + regs.R29 + 0x00000000) );
		/* 8207FD1Ch case   31:*/		return 0x8207FD20;
		  /* 8207FD20h */ case   32:  		/* addi R29, R31, 504 */
		/* 8207FD20h case   32:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x1F8);
		/* 8207FD20h case   32:*/		return 0x8207FD24;
		  /* 8207FD24h */ case   33:  		/* lvrx VR62, <#[R11 + R28]> */
		/* 8207FD24h case   33:*/		cpu::mem::lvrx( regs, &regs.VR62, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8207FD24h case   33:*/		return 0x8207FD28;
		  /* 8207FD28h */ case   34:  		/* vor VR63, VR63, VR62 */
		/* 8207FD28h case   34:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR63,regs.VR62);
		/* 8207FD28h case   34:*/		return 0x8207FD2C;
		  /* 8207FD2Ch */ case   35:  		/* stvlx VR63, <#[R4]> */
		/* 8207FD2Ch case   35:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FD2Ch case   35:*/		return 0x8207FD30;
		  /* 8207FD30h */ case   36:  		/* lis R28, -32256 */
		/* 8207FD30h case   36:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8200);
		/* 8207FD30h case   36:*/		return 0x8207FD34;
		  /* 8207FD34h */ case   37:  		/* stvrx VR63, <#[R4 + R11]> */
		/* 8207FD34h case   37:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8207FD34h case   37:*/		return 0x8207FD38;
		  /* 8207FD38h */ case   38:  		/* li R8, 12 */
		/* 8207FD38h case   38:*/		cpu::op::li<0>(regs,&regs.R8,0xC);
		/* 8207FD38h case   38:*/		return 0x8207FD3C;
		  /* 8207FD3Ch */ case   39:  		/* lvx VR63, <#[R27]> */
		/* 8207FD3Ch case   39:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R27 + 0x00000000) );
		/* 8207FD3Ch case   39:*/		return 0x8207FD40;
		  /* 8207FD40h */ case   40:  		/* li R7, 48 */
		/* 8207FD40h case   40:*/		cpu::op::li<0>(regs,&regs.R7,0x30);
		/* 8207FD40h case   40:*/		return 0x8207FD44;
		  /* 8207FD44h */ case   41:  		/* stvlx VR63, <#[R3]> */
		/* 8207FD44h case   41:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R3 + 0x00000000) );
		/* 8207FD44h case   41:*/		return 0x8207FD48;
		  /* 8207FD48h */ case   42:  		/* addi R9, R31, 520 */
		/* 8207FD48h case   42:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x208);
		/* 8207FD48h case   42:*/		return 0x8207FD4C;
		  /* 8207FD4Ch */ case   43:  		/* stvrx VR63, <#[R3 + R11]> */
		/* 8207FD4Ch case   43:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8207FD4Ch case   43:*/		return 0x8207FD50;
		  /* 8207FD50h */ case   44:  		/* addi R4, R28, 16720 */
		/* 8207FD50h case   44:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x4150);
		/* 8207FD50h case   44:*/		return 0x8207FD54;
		  /* 8207FD54h */ case   45:  		/* lvx VR63, <#[R26]> */
		/* 8207FD54h case   45:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R26 + 0x00000000) );
		/* 8207FD54h case   45:*/		return 0x8207FD58;
		  /* 8207FD58h */ case   46:  		/* lis R3, -32256 */
		/* 8207FD58h case   46:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8200);
		/* 8207FD58h case   46:*/		return 0x8207FD5C;
		  /* 8207FD5Ch */ case   47:  		/* stvlx VR63, <#[R30]> */
		/* 8207FD5Ch case   47:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R30 + 0x00000000) );
		/* 8207FD5Ch case   47:*/		return 0x8207FD60;
		  /* 8207FD60h */ case   48:  		/* stvrx VR63, <#[R30 + R11]> */
		/* 8207FD60h case   48:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8207FD60h case   48:*/		return 0x8207FD64;
		  /* 8207FD64h */ case   49:  		/* lvx VR63, <#[R6]> */
		/* 8207FD64h case   49:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FD64h case   49:*/		return 0x8207FD68;
		  /* 8207FD68h */ case   50:  		/* lvx VR62, <#[R5]> */
		/* 8207FD68h case   50:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R5 + 0x00000000) );
		/* 8207FD68h case   50:*/		return 0x8207FD6C;
		  /* 8207FD6Ch */ case   51:  		/* stvlx VR62, <#[R29]> */
		/* 8207FD6Ch case   51:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R29 + 0x00000000) );
		/* 8207FD6Ch case   51:*/		return 0x8207FD70;
		  /* 8207FD70h */ case   52:  		/* stvrx VR62, <#[R29 + R11]> */
		/* 8207FD70h case   52:*/		cpu::mem::stvrx( regs, regs.VR62, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 8207FD70h case   52:*/		return 0x8207FD74;
		  /* 8207FD74h */ case   53:  		/* addi R6, R31, 536 */
		/* 8207FD74h case   53:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x218);
		/* 8207FD74h case   53:*/		return 0x8207FD78;
	}
	return 0x8207FD78;
} // Block from 8207FCA0h-8207FD78h (54 instructions)

//////////////////////////////////////////////////////
// Block at 8207FD78h
// Function '?PM4SetTextureFetchConstant@D3D@@YAXPAVCDevice@1@KABTGPUTEXTURE_FETCH_CONSTANT@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FD78);
		  /* 8207FD78h */ case    0:  		/* lvx VR62, <#[R4]> */
		/* 8207FD78h case    0:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FD78h case    0:*/		return 0x8207FD7C;
		  /* 8207FD7Ch */ case    1:  		/* addi R4, R3, 16704 */
		/* 8207FD7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x4140);
		/* 8207FD7Ch case    1:*/		return 0x8207FD80;
		  /* 8207FD80h */ case    2:  		/* stvlx VR62, <#[R9]> */
		/* 8207FD80h case    2:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R9 + 0x00000000) );
		/* 8207FD80h case    2:*/		return 0x8207FD84;
		  /* 8207FD84h */ case    3:  		/* stvrx VR62, <#[R9 + R11]> */
		/* 8207FD84h case    3:*/		cpu::mem::stvrx( regs, regs.VR62, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8207FD84h case    3:*/		return 0x8207FD88;
		  /* 8207FD88h */ case    4:  		/* addi R5, R31, 552 */
		/* 8207FD88h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x228);
		/* 8207FD88h case    4:*/		return 0x8207FD8C;
		  /* 8207FD8Ch */ case    5:  		/* stvlx VR63, <#[R6]> */
		/* 8207FD8Ch case    5:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FD8Ch case    5:*/		return 0x8207FD90;
		  /* 8207FD90h */ case    6:  		/* stvrx VR63, <#[R6 + R11]> */
		/* 8207FD90h case    6:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8207FD90h case    6:*/		return 0x8207FD94;
		  /* 8207FD94h */ case    7:  		/* lvx VR63, <#[R4]> */
		/* 8207FD94h case    7:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FD94h case    7:*/		return 0x8207FD98;
		  /* 8207FD98h */ case    8:  		/* stvlx VR63, <#[R5]> */
		/* 8207FD98h case    8:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R5 + 0x00000000) );
		/* 8207FD98h case    8:*/		return 0x8207FD9C;
		  /* 8207FD9Ch */ case    9:  		/* stvrx VR63, <#[R5 + R11]> */
		/* 8207FD9Ch case    9:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8207FD9Ch case    9:*/		return 0x8207FDA0;
		  /* 8207FDA0h */ case   10:  		/* lhz R11, <#[R10 + 2]> */
		/* 8207FDA0h case   10:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000002) );
		/* 8207FDA0h case   10:*/		return 0x8207FDA4;
		  /* 8207FDA4h */ case   11:  		/* lhz R10, <#[R10]> */
		/* 8207FDA4h case   11:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8207FDA4h case   11:*/		return 0x8207FDA8;
		  /* 8207FDA8h */ case   12:  		/* mullw R11, R11, R10 */
		/* 8207FDA8h case   12:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207FDA8h case   12:*/		return 0x8207FDAC;
		  /* 8207FDACh */ case   13:  		/* rlwinm R11, R11, 27, 5, 26 */
		/* 8207FDACh case   13:*/		cpu::op::rlwinm<0,27,5,26>(regs,&regs.R11,regs.R11);
		/* 8207FDACh case   13:*/		return 0x8207FDB0;
		  /* 8207FDB0h */ case   14:  		/* b 404 */
		/* 8207FDB0h case   14:*/		return 0x8207FF44;
		/* 8207FDB0h case   14:*/		return 0x8207FDB4;
	}
	return 0x8207FDB4;
} // Block from 8207FD78h-8207FDB4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8207FDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FDB4);
		  /* 8207FDB4h */ case    0:  		/* cmpwi CR6, R7, 1 */
		/* 8207FDB4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000001);
		/* 8207FDB4h case    0:*/		return 0x8207FDB8;
		  /* 8207FDB8h */ case    1:  		/* bc 4, CR6_EQ, 404 */
		/* 8207FDB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8207FF4C;  }
		/* 8207FDB8h case    1:*/		return 0x8207FDBC;
		  /* 8207FDBCh */ case    2:  		/* lhz R11, <#[R10]> */
		/* 8207FDBCh case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8207FDBCh case    2:*/		return 0x8207FDC0;
		  /* 8207FDC0h */ case    3:  		/* addi R29, R1, 96 */
		/* 8207FDC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x60);
		/* 8207FDC0h case    3:*/		return 0x8207FDC4;
		  /* 8207FDC4h */ case    4:  		/* lis R9, -32256 */
		/* 8207FDC4h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8207FDC4h case    4:*/		return 0x8207FDC8;
		  /* 8207FDC8h */ case    5:  		/* extsw R11, R11 */
		/* 8207FDC8h case    5:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R11);
		/* 8207FDC8h case    5:*/		return 0x8207FDCC;
		  /* 8207FDCCh */ case    6:  		/* lis R8, -32256 */
		/* 8207FDCCh case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FDCCh case    6:*/		return 0x8207FDD0;
		  /* 8207FDD0h */ case    7:  		/* std R11, <#[R1 + 80]> */
		/* 8207FDD0h case    7:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8207FDD0h case    7:*/		return 0x8207FDD4;
		  /* 8207FDD4h */ case    8:  		/* lis R11, -32256 */
		/* 8207FDD4h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8207FDD4h case    8:*/		return 0x8207FDD8;
		  /* 8207FDD8h */ case    9:  		/* lis R4, -32256 */
		/* 8207FDD8h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8200);
		/* 8207FDD8h case    9:*/		return 0x8207FDDC;
		  /* 8207FDDCh */ case   10:  		/* lfs FR10, <#[R9 + 2980]> */
		/* 8207FDDCh case   10:*/		cpu::mem::load32f( regs, &regs.FR10, (uint32)(regs.R9 + 0x00000BA4) );
		/* 8207FDDCh case   10:*/		return 0x8207FDE0;
		  /* 8207FDE0h */ case   11:  		/* lis R7, -32256 */
		/* 8207FDE0h case   11:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FDE0h case   11:*/		return 0x8207FDE4;
		  /* 8207FDE4h */ case   12:  		/* addi R24, R1, 112 */
		/* 8207FDE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R1,0x70);
		/* 8207FDE4h case   12:*/		return 0x8207FDE8;
		  /* 8207FDE8h */ case   13:  		/* lfs FR12, <#[R8 + 1792]> */
		/* 8207FDE8h case   13:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R8 + 0x00000700) );
		/* 8207FDE8h case   13:*/		return 0x8207FDEC;
		  /* 8207FDECh */ case   14:  		/* addi R6, R31, 408 */
		/* 8207FDECh case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x198);
		/* 8207FDECh case   14:*/		return 0x8207FDF0;
		  /* 8207FDF0h */ case   15:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 8207FDF0h case   15:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 8207FDF0h case   15:*/		return 0x8207FDF4;
		  /* 8207FDF4h */ case   16:  		/* lis R9, -32217 */
		/* 8207FDF4h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8207FDF4h case   16:*/		return 0x8207FDF8;
		  /* 8207FDF8h */ case   17:  		/* stfs FR0, <#[R1 + 108]> */
		/* 8207FDF8h case   17:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000006C) );
		/* 8207FDF8h case   17:*/		return 0x8207FDFC;
		  /* 8207FDFCh */ case   18:  		/* li R11, 16 */
		/* 8207FDFCh case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8207FDFCh case   18:*/		return 0x8207FE00;
		  /* 8207FE00h */ case   19:  		/* stfs FR0, <#[R1 + 116]> */
		/* 8207FE00h case   19:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000074) );
		/* 8207FE00h case   19:*/		return 0x8207FE04;
		  /* 8207FE04h */ case   20:  		/* addi R9, R9, 5992 */
		/* 8207FE04h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1768);
		/* 8207FE04h case   20:*/		return 0x8207FE08;
		  /* 8207FE08h */ case   21:  		/* stfs FR0, <#[R1 + 124]> */
		/* 8207FE08h case   21:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000007C) );
		/* 8207FE08h case   21:*/		return 0x8207FE0C;
		  /* 8207FE0Ch */ case   22:  		/* addi R5, R31, 424 */
		/* 8207FE0Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1A8);
		/* 8207FE0Ch case   22:*/		return 0x8207FE10;
		  /* 8207FE10h */ case   23:  		/* lfd FR0, <#[R1 + 80]> */
		/* 8207FE10h case   23:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 8207FE10h case   23:*/		return 0x8207FE14;
		  /* 8207FE14h */ case   24:  		/* fcfid FR0, FR0 */
		/* 8207FE14h case   24:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 8207FE14h case   24:*/		return 0x8207FE18;
		  /* 8207FE18h */ case   25:  		/* frsp FR0, FR0 */
		/* 8207FE18h case   25:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 8207FE18h case   25:*/		return 0x8207FE1C;
		  /* 8207FE1Ch */ case   26:  		/* lfs FR11, <#[R4 + 2728]> */
		/* 8207FE1Ch case   26:*/		cpu::mem::load32f( regs, &regs.FR11, (uint32)(regs.R4 + 0x00000AA8) );
		/* 8207FE1Ch case   26:*/		return 0x8207FE20;
		  /* 8207FE20h */ case   27:  		/* stfs FR11, <#[R1 + 120]> */
		/* 8207FE20h case   27:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000078) );
		/* 8207FE20h case   27:*/		return 0x8207FE24;
		  /* 8207FE24h */ case   28:  		/* addi R28, R9, 16 */
		/* 8207FE24h case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x10);
		/* 8207FE24h case   28:*/		return 0x8207FE28;
		  /* 8207FE28h */ case   29:  		/* lfs FR13, <#[R7 + 1820]> */
		/* 8207FE28h case   29:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R7 + 0x0000071C) );
		/* 8207FE28h case   29:*/		return 0x8207FE2C;
		  /* 8207FE2Ch */ case   30:  		/* addi R4, R31, 440 */
		/* 8207FE2Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1B8);
		/* 8207FE2Ch case   30:*/		return 0x8207FE30;
		  /* 8207FE30h */ case   31:  		/* stfs FR13, <#[R1 + 104]> */
		/* 8207FE30h case   31:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 8207FE30h case   31:*/		return 0x8207FE34;
		  /* 8207FE34h */ case   32:  		/* addi R27, R9, 32 */
		/* 8207FE34h case   32:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x20);
		/* 8207FE34h case   32:*/		return 0x8207FE38;
	}
	return 0x8207FE38;
} // Block from 8207FDB4h-8207FE38h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8207FE38h
// Function '?PixEnableVideoPlayback@D3D@@YAKPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FE38);
		  /* 8207FE38h */ case    0:  		/* li R26, 32 */
		/* 8207FE38h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x20);
		/* 8207FE38h case    0:*/		return 0x8207FE3C;
		  /* 8207FE3Ch */ case    1:  		/* lis R8, -32256 */
		/* 8207FE3Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FE3Ch case    1:*/		return 0x8207FE40;
		  /* 8207FE40h */ case    2:  		/* addi R3, R31, 456 */
		/* 8207FE40h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1C8);
		/* 8207FE40h case    2:*/		return 0x8207FE44;
		  /* 8207FE44h */ case    3:  		/* addi R25, R8, 16768 */
		/* 8207FE44h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R8,0x4180);
		/* 8207FE44h case    3:*/		return 0x8207FE48;
		  /* 8207FE48h */ case    4:  		/* addi R30, R31, 472 */
		/* 8207FE48h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x1D8);
		/* 8207FE48h case    4:*/		return 0x8207FE4C;
		  /* 8207FE4Ch */ case    5:  		/* lis R8, -32256 */
		/* 8207FE4Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FE4Ch case    5:*/		return 0x8207FE50;
		  /* 8207FE50h */ case    6:  		/* fmuls FR0, FR0, FR10 */
		/* 8207FE50h case    6:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR10);
		/* 8207FE50h case    6:*/		return 0x8207FE54;
		  /* 8207FE54h */ case    7:  		/* lis R22, -32256 */
		/* 8207FE54h case    7:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFF8200);
		/* 8207FE54h case    7:*/		return 0x8207FE58;
		  /* 8207FE58h */ case    8:  		/* addi R23, R8, 16752 */
		/* 8207FE58h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R8,0x4170);
		/* 8207FE58h case    8:*/		return 0x8207FE5C;
		  /* 8207FE5Ch */ case    9:  		/* lis R8, -32256 */
		/* 8207FE5Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FE5Ch case    9:*/		return 0x8207FE60;
		  /* 8207FE60h */ case   10:  		/* li R7, 12 */
		/* 8207FE60h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 8207FE60h case   10:*/		return 0x8207FE64;
		  /* 8207FE64h */ case   11:  		/* addi R21, R8, 16736 */
		/* 8207FE64h case   11:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R8,0x4160);
		/* 8207FE64h case   11:*/		return 0x8207FE68;
		  /* 8207FE68h */ case   12:  		/* li R8, 3 */
		/* 8207FE68h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8207FE68h case   12:*/		return 0x8207FE6C;
		  /* 8207FE6Ch */ case   13:  		/* addi R22, R22, 16720 */
		/* 8207FE6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4150);
		/* 8207FE6Ch case   13:*/		return 0x8207FE70;
		  /* 8207FE70h */ case   14:  		/* lis R20, -32256 */
		/* 8207FE70h case   14:*/		cpu::op::lis<0>(regs,&regs.R20,0xFFFF8200);
		/* 8207FE70h case   14:*/		return 0x8207FE74;
		  /* 8207FE74h */ case   15:  		/* fdivs FR11, FR12, FR0 */
		/* 8207FE74h case   15:*/		cpu::op::fdivs<0>(regs,&regs.FR11,regs.FR12,regs.FR0);
		/* 8207FE74h case   15:*/		return 0x8207FE78;
		  /* 8207FE78h */ case   16:  		/* stfs FR11, <#[R1 + 96]> */
		/* 8207FE78h case   16:*/		cpu::mem::store32f( regs, regs.FR11, (uint32)(regs.R1 + 0x00000060) );
		/* 8207FE78h case   16:*/		return 0x8207FE7C;
		  /* 8207FE7Ch */ case   17:  		/* fdivs FR12, FR12, FR0 */
		/* 8207FE7Ch case   17:*/		cpu::op::fdivs<0>(regs,&regs.FR12,regs.FR12,regs.FR0);
		/* 8207FE7Ch case   17:*/		return 0x8207FE80;
		  /* 8207FE80h */ case   18:  		/* stfs FR12, <#[R1 + 100]> */
		/* 8207FE80h case   18:*/		cpu::mem::store32f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000064) );
		/* 8207FE80h case   18:*/		return 0x8207FE84;
		  /* 8207FE84h */ case   19:  		/* fmuls FR0, FR0, FR13 */
		/* 8207FE84h case   19:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 8207FE84h case   19:*/		return 0x8207FE88;
		  /* 8207FE88h */ case   20:  		/* lvx VR63, <#[R29]> */
		/* 8207FE88h case   20:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R29 + 0x00000000) );
		/* 8207FE88h case   20:*/		return 0x8207FE8C;
		  /* 8207FE8Ch */ case   21:  		/* stfs FR0, <#[R1 + 112]> */
		/* 8207FE8Ch case   21:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000070) );
		/* 8207FE8Ch case   21:*/		return 0x8207FE90;
		  /* 8207FE90h */ case   22:  		/* stvlx VR63, <#[R6]> */
		/* 8207FE90h case   22:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FE90h case   22:*/		return 0x8207FE94;
		  /* 8207FE94h */ case   23:  		/* stvrx VR63, <#[R6 + R11]> */
		/* 8207FE94h case   23:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8207FE94h case   23:*/		return 0x8207FE98;
		  /* 8207FE98h */ case   24:  		/* addi R6, R31, 520 */
		/* 8207FE98h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x208);
		/* 8207FE98h case   24:*/		return 0x8207FE9C;
		  /* 8207FE9Ch */ case   25:  		/* lvrx VR62, <#[R11 + R9]> */
		/* 8207FE9Ch case   25:*/		cpu::mem::lvrx( regs, &regs.VR62, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8207FE9Ch case   25:*/		return 0x8207FEA0;
		  /* 8207FEA0h */ case   26:  		/* lvlx VR63, <#[R9]> */
		/* 8207FEA0h case   26:*/		cpu::mem::lvlx( regs, &regs.VR63, (uint32)(regs.R9 + 0x00000000) );
		/* 8207FEA0h case   26:*/		return 0x8207FEA4;
		  /* 8207FEA4h */ case   27:  		/* vor VR63, VR63, VR62 */
		/* 8207FEA4h case   27:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR63,regs.VR62);
		/* 8207FEA4h case   27:*/		return 0x8207FEA8;
		  /* 8207FEA8h */ case   28:  		/* stvlx VR63, <#[R5]> */
		/* 8207FEA8h case   28:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R5 + 0x00000000) );
		/* 8207FEA8h case   28:*/		return 0x8207FEAC;
		  /* 8207FEACh */ case   29:  		/* stvrx VR63, <#[R5 + R11]> */
		/* 8207FEACh case   29:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8207FEACh case   29:*/		return 0x8207FEB0;
		  /* 8207FEB0h */ case   30:  		/* lvlx VR62, <#[R9 + R11]> */
		/* 8207FEB0h case   30:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8207FEB0h case   30:*/		return 0x8207FEB4;
		  /* 8207FEB4h */ case   31:  		/* lvrx VR63, <#[R11 + R28]> */
		/* 8207FEB4h case   31:*/		cpu::mem::lvrx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8207FEB4h case   31:*/		return 0x8207FEB8;
		  /* 8207FEB8h */ case   32:  		/* vor VR63, VR62, VR63 */
		/* 8207FEB8h case   32:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207FEB8h case   32:*/		return 0x8207FEBC;
		  /* 8207FEBCh */ case   33:  		/* stvlx VR63, <#[R4]> */
		/* 8207FEBCh case   33:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FEBCh case   33:*/		return 0x8207FEC0;
		  /* 8207FEC0h */ case   34:  		/* stvrx VR63, <#[R4 + R11]> */
		/* 8207FEC0h case   34:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8207FEC0h case   34:*/		return 0x8207FEC4;
		  /* 8207FEC4h */ case   35:  		/* lvlx VR62, <#[R9 + R26]> */
		/* 8207FEC4h case   35:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R9 + regs.R26 + 0x00000000) );
		/* 8207FEC4h case   35:*/		return 0x8207FEC8;
	}
	return 0x8207FEC8;
} // Block from 8207FE38h-8207FEC8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8207FEC8h
// Function '?PixDisableVideoPlayback@D3D@@YAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FEC8);
		  /* 8207FEC8h */ case    0:  		/* addi R9, R31, 488 */
		/* 8207FEC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x1E8);
		/* 8207FEC8h case    0:*/		return 0x8207FECC;
		  /* 8207FECCh */ case    1:  		/* lvrx VR63, <#[R11 + R27]> */
		/* 8207FECCh case    1:*/		cpu::mem::lvrx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8207FECCh case    1:*/		return 0x8207FED0;
		  /* 8207FED0h */ case    2:  		/* vor VR63, VR62, VR63 */
		/* 8207FED0h case    2:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207FED0h case    2:*/		return 0x8207FED4;
		  /* 8207FED4h */ case    3:  		/* stvlx VR63, <#[R3]> */
		/* 8207FED4h case    3:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R3 + 0x00000000) );
		/* 8207FED4h case    3:*/		return 0x8207FED8;
		  /* 8207FED8h */ case    4:  		/* stvrx VR63, <#[R3 + R11]> */
		/* 8207FED8h case    4:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8207FED8h case    4:*/		return 0x8207FEDC;
		  /* 8207FEDCh */ case    5:  		/* lvx VR63, <#[R25]> */
		/* 8207FEDCh case    5:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R25 + 0x00000000) );
		/* 8207FEDCh case    5:*/		return 0x8207FEE0;
		  /* 8207FEE0h */ case    6:  		/* stvlx VR63, <#[R30]> */
		/* 8207FEE0h case    6:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R30 + 0x00000000) );
		/* 8207FEE0h case    6:*/		return 0x8207FEE4;
		  /* 8207FEE4h */ case    7:  		/* stvrx VR63, <#[R30 + R11]> */
		/* 8207FEE4h case    7:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8207FEE4h case    7:*/		return 0x8207FEE8;
		  /* 8207FEE8h */ case    8:  		/* lvx VR63, <#[R24]> */
		/* 8207FEE8h case    8:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R24 + 0x00000000) );
		/* 8207FEE8h case    8:*/		return 0x8207FEEC;
		  /* 8207FEECh */ case    9:  		/* lvx VR62, <#[R23]> */
		/* 8207FEECh case    9:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R23 + 0x00000000) );
		/* 8207FEECh case    9:*/		return 0x8207FEF0;
		  /* 8207FEF0h */ case   10:  		/* stvlx VR62, <#[R9]> */
		/* 8207FEF0h case   10:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R9 + 0x00000000) );
		/* 8207FEF0h case   10:*/		return 0x8207FEF4;
		  /* 8207FEF4h */ case   11:  		/* stvrx VR62, <#[R9 + R11]> */
		/* 8207FEF4h case   11:*/		cpu::mem::stvrx( regs, regs.VR62, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8207FEF4h case   11:*/		return 0x8207FEF8;
		  /* 8207FEF8h */ case   12:  		/* addi R9, R31, 504 */
		/* 8207FEF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x1F8);
		/* 8207FEF8h case   12:*/		return 0x8207FEFC;
		  /* 8207FEFCh */ case   13:  		/* lvx VR62, <#[R21]> */
		/* 8207FEFCh case   13:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R21 + 0x00000000) );
		/* 8207FEFCh case   13:*/		return 0x8207FF00;
		  /* 8207FF00h */ case   14:  		/* stvlx VR62, <#[R9]> */
		/* 8207FF00h case   14:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R9 + 0x00000000) );
		/* 8207FF00h case   14:*/		return 0x8207FF04;
		  /* 8207FF04h */ case   15:  		/* addi R5, R31, 536 */
		/* 8207FF04h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x218);
		/* 8207FF04h case   15:*/		return 0x8207FF08;
		  /* 8207FF08h */ case   16:  		/* stvrx VR62, <#[R9 + R11]> */
		/* 8207FF08h case   16:*/		cpu::mem::stvrx( regs, regs.VR62, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8207FF08h case   16:*/		return 0x8207FF0C;
		  /* 8207FF0Ch */ case   17:  		/* addi R3, R20, 16704 */
		/* 8207FF0Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R20,0x4140);
		/* 8207FF0Ch case   17:*/		return 0x8207FF10;
		  /* 8207FF10h */ case   18:  		/* addi R4, R31, 552 */
		/* 8207FF10h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x228);
		/* 8207FF10h case   18:*/		return 0x8207FF14;
		  /* 8207FF14h */ case   19:  		/* lvx VR62, <#[R22]> */
		/* 8207FF14h case   19:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R22 + 0x00000000) );
		/* 8207FF14h case   19:*/		return 0x8207FF18;
		  /* 8207FF18h */ case   20:  		/* stvlx VR62, <#[R6]> */
		/* 8207FF18h case   20:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FF18h case   20:*/		return 0x8207FF1C;
		  /* 8207FF1Ch */ case   21:  		/* stvrx VR62, <#[R6 + R11]> */
		/* 8207FF1Ch case   21:*/		cpu::mem::stvrx( regs, regs.VR62, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8207FF1Ch case   21:*/		return 0x8207FF20;
		  /* 8207FF20h */ case   22:  		/* stvlx VR63, <#[R5]> */
		/* 8207FF20h case   22:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R5 + 0x00000000) );
		/* 8207FF20h case   22:*/		return 0x8207FF24;
		  /* 8207FF24h */ case   23:  		/* stvrx VR63, <#[R5 + R11]> */
		/* 8207FF24h case   23:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8207FF24h case   23:*/		return 0x8207FF28;
	}
	return 0x8207FF28;
} // Block from 8207FEC8h-8207FF28h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8207FF28h
// Function '?PixTimeSinceVBlank@D3D@@YAKPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FF28);
		  /* 8207FF28h */ case    0:  		/* lvx VR63, <#[R3]> */
		/* 8207FF28h case    0:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R3 + 0x00000000) );
		/* 8207FF28h case    0:*/		return 0x8207FF2C;
		  /* 8207FF2Ch */ case    1:  		/* stvlx VR63, <#[R4]> */
		/* 8207FF2Ch case    1:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8207FF2Ch case    1:*/		return 0x8207FF30;
		  /* 8207FF30h */ case    2:  		/* stvrx VR63, <#[R4 + R11]> */
		/* 8207FF30h case    2:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 8207FF30h case    2:*/		return 0x8207FF34;
		  /* 8207FF34h */ case    3:  		/* lhz R11, <#[R10 + 2]> */
		/* 8207FF34h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000002) );
		/* 8207FF34h case    3:*/		return 0x8207FF38;
		  /* 8207FF38h */ case    4:  		/* lhz R10, <#[R10]> */
		/* 8207FF38h case    4:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8207FF38h case    4:*/		return 0x8207FF3C;
		  /* 8207FF3Ch */ case    5:  		/* mullw R11, R11, R10 */
		/* 8207FF3Ch case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8207FF3Ch case    5:*/		return 0x8207FF40;
		  /* 8207FF40h */ case    6:  		/* rlwinm R11, R11, 23, 9, 30 */
		/* 8207FF40h case    6:*/		cpu::op::rlwinm<0,23,9,30>(regs,&regs.R11,regs.R11);
		/* 8207FF40h case    6:*/		return 0x8207FF44;
	}
	return 0x8207FF44;
} // Block from 8207FF28h-8207FF44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8207FF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FF44);
		  /* 8207FF44h */ case    0:  		/* stw R11, <#[R31 + 376]> */
		/* 8207FF44h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000178) );
		/* 8207FF44h case    0:*/		return 0x8207FF48;
		  /* 8207FF48h */ case    1:  		/* b 340 */
		/* 8207FF48h case    1:*/		return 0x8208009C;
		/* 8207FF48h case    1:*/		return 0x8207FF4C;
	}
	return 0x8207FF4C;
} // Block from 8207FF44h-8207FF4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8207FF4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FF4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FF4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FF4C);
		  /* 8207FF4Ch */ case    0:  		/* cmpwi CR6, R7, 2 */
		/* 8207FF4Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000002);
		/* 8207FF4Ch case    0:*/		return 0x8207FF50;
		  /* 8207FF50h */ case    1:  		/* bc 4, CR6_EQ, 324 */
		/* 8207FF50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82080094;  }
		/* 8207FF50h case    1:*/		return 0x8207FF54;
		  /* 8207FF54h */ case    2:  		/* lis R10, -32217 */
		/* 8207FF54h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8207FF54h case    2:*/		return 0x8207FF58;
		  /* 8207FF58h */ case    3:  		/* li R11, 16 */
		/* 8207FF58h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8207FF58h case    3:*/		return 0x8207FF5C;
		  /* 8207FF5Ch */ case    4:  		/* addi R10, R10, 6088 */
		/* 8207FF5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x17C8);
		/* 8207FF5Ch case    4:*/		return 0x8207FF60;
		  /* 8207FF60h */ case    5:  		/* addi R8, R31, 424 */
		/* 8207FF60h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x1A8);
		/* 8207FF60h case    5:*/		return 0x8207FF64;
		  /* 8207FF64h */ case    6:  		/* addi R4, R10, 16 */
		/* 8207FF64h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x10);
		/* 8207FF64h case    6:*/		return 0x8207FF68;
		  /* 8207FF68h */ case    7:  		/* addi R6, R31, 440 */
		/* 8207FF68h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x1B8);
		/* 8207FF68h case    7:*/		return 0x8207FF6C;
		  /* 8207FF6Ch */ case    8:  		/* addi R27, R10, 32 */
		/* 8207FF6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x20);
		/* 8207FF6Ch case    8:*/		return 0x8207FF70;
	}
	return 0x8207FF70;
} // Block from 8207FF4Ch-8207FF70h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8207FF70h
// Function '?CodecSetState@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8207FF70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8207FF70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8207FF70);
		  /* 8207FF70h */ case    0:  		/* lvrx VR63, <#[R11 + R10]> */
		/* 8207FF70h case    0:*/		cpu::mem::lvrx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8207FF70h case    0:*/		return 0x8207FF74;
		  /* 8207FF74h */ case    1:  		/* li R26, 32 */
		/* 8207FF74h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x20);
		/* 8207FF74h case    1:*/		return 0x8207FF78;
		  /* 8207FF78h */ case    2:  		/* lvlx VR62, <#[R10]> */
		/* 8207FF78h case    2:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 8207FF78h case    2:*/		return 0x8207FF7C;
		  /* 8207FF7Ch */ case    3:  		/* lis R7, -32256 */
		/* 8207FF7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FF7Ch case    3:*/		return 0x8207FF80;
		  /* 8207FF80h */ case    4:  		/* vor VR63, VR62, VR63 */
		/* 8207FF80h case    4:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 8207FF80h case    4:*/		return 0x8207FF84;
		  /* 8207FF84h */ case    5:  		/* addi R5, R31, 456 */
		/* 8207FF84h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x1C8);
		/* 8207FF84h case    5:*/		return 0x8207FF88;
		  /* 8207FF88h */ case    6:  		/* addi R25, R7, 16768 */
		/* 8207FF88h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0x4180);
		/* 8207FF88h case    6:*/		return 0x8207FF8C;
		  /* 8207FF8Ch */ case    7:  		/* lis R7, -32256 */
		/* 8207FF8Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FF8Ch case    7:*/		return 0x8207FF90;
		  /* 8207FF90h */ case    8:  		/* addi R3, R31, 472 */
		/* 8207FF90h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x1D8);
		/* 8207FF90h case    8:*/		return 0x8207FF94;
		  /* 8207FF94h */ case    9:  		/* stvlx VR63, <#[R8]> */
		/* 8207FF94h case    9:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R8 + 0x00000000) );
		/* 8207FF94h case    9:*/		return 0x8207FF98;
		  /* 8207FF98h */ case   10:  		/* addi R24, R7, 16688 */
		/* 8207FF98h case   10:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R7,0x4130);
		/* 8207FF98h case   10:*/		return 0x8207FF9C;
		  /* 8207FF9Ch */ case   11:  		/* stvrx VR63, <#[R8 + R11]> */
		/* 8207FF9Ch case   11:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8207FF9Ch case   11:*/		return 0x8207FFA0;
		  /* 8207FFA0h */ case   12:  		/* lis R29, -32256 */
		/* 8207FFA0h case   12:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8200);
		/* 8207FFA0h case   12:*/		return 0x8207FFA4;
		  /* 8207FFA4h */ case   13:  		/* lvrx VR62, <#[R11 + R4]> */
		/* 8207FFA4h case   13:*/		cpu::mem::lvrx( regs, &regs.VR62, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8207FFA4h case   13:*/		return 0x8207FFA8;
		  /* 8207FFA8h */ case   14:  		/* addi R30, R31, 488 */
		/* 8207FFA8h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x1E8);
		/* 8207FFA8h case   14:*/		return 0x8207FFAC;
		  /* 8207FFACh */ case   15:  		/* addi R23, R29, 16672 */
		/* 8207FFACh case   15:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R29,0x4120);
		/* 8207FFACh case   15:*/		return 0x8207FFB0;
		  /* 8207FFB0h */ case   16:  		/* addi R29, R31, 504 */
		/* 8207FFB0h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x1F8);
		/* 8207FFB0h case   16:*/		return 0x8207FFB4;
		  /* 8207FFB4h */ case   17:  		/* lis R8, -32256 */
		/* 8207FFB4h case   17:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FFB4h case   17:*/		return 0x8207FFB8;
		  /* 8207FFB8h */ case   18:  		/* lis R7, -32256 */
		/* 8207FFB8h case   18:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FFB8h case   18:*/		return 0x8207FFBC;
		  /* 8207FFBCh */ case   19:  		/* addi R22, R8, 16656 */
		/* 8207FFBCh case   19:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R8,0x4110);
		/* 8207FFBCh case   19:*/		return 0x8207FFC0;
		  /* 8207FFC0h */ case   20:  		/* addi R28, R31, 520 */
		/* 8207FFC0h case   20:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x208);
		/* 8207FFC0h case   20:*/		return 0x8207FFC4;
		  /* 8207FFC4h */ case   21:  		/* addi R21, R7, 16640 */
		/* 8207FFC4h case   21:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R7,0x4100);
		/* 8207FFC4h case   21:*/		return 0x8207FFC8;
		  /* 8207FFC8h */ case   22:  		/* lis R8, -32256 */
		/* 8207FFC8h case   22:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 8207FFC8h case   22:*/		return 0x8207FFCC;
		  /* 8207FFCCh */ case   23:  		/* mr R19, R11 */
		/* 8207FFCCh case   23:*/		regs.R19 = regs.R11;
		/* 8207FFCCh case   23:*/		return 0x8207FFD0;
		  /* 8207FFD0h */ case   24:  		/* mr R20, R11 */
		/* 8207FFD0h case   24:*/		regs.R20 = regs.R11;
		/* 8207FFD0h case   24:*/		return 0x8207FFD4;
		  /* 8207FFD4h */ case   25:  		/* addi R18, R8, 16624 */
		/* 8207FFD4h case   25:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R8,0x40F0);
		/* 8207FFD4h case   25:*/		return 0x8207FFD8;
		  /* 8207FFD8h */ case   26:  		/* lis R7, -32256 */
		/* 8207FFD8h case   26:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 8207FFD8h case   26:*/		return 0x8207FFDC;
		  /* 8207FFDCh */ case   27:  		/* li R8, 3 */
		/* 8207FFDCh case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8207FFDCh case   27:*/		return 0x8207FFE0;
		  /* 8207FFE0h */ case   28:  		/* addi R17, R7, 16608 */
		/* 8207FFE0h case   28:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R7,0x40E0);
		/* 8207FFE0h case   28:*/		return 0x8207FFE4;
		  /* 8207FFE4h */ case   29:  		/* li R7, 6 */
		/* 8207FFE4h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x6);
		/* 8207FFE4h case   29:*/		return 0x8207FFE8;
		  /* 8207FFE8h */ case   30:  		/* lvlx VR63, <#[R10 + R11]> */
		/* 8207FFE8h case   30:*/		cpu::mem::lvlx( regs, &regs.VR63, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8207FFE8h case   30:*/		return 0x8207FFEC;
		  /* 8207FFECh */ case   31:  		/* vor VR63, VR63, VR62 */
		/* 8207FFECh case   31:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR63,regs.VR62);
		/* 8207FFECh case   31:*/		return 0x8207FFF0;
		  /* 8207FFF0h */ case   32:  		/* stvlx VR63, <#[R6]> */
		/* 8207FFF0h case   32:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 8207FFF0h case   32:*/		return 0x8207FFF4;
		  /* 8207FFF4h */ case   33:  		/* stvrx VR63, <#[R6 + R11]> */
		/* 8207FFF4h case   33:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8207FFF4h case   33:*/		return 0x8207FFF8;
		  /* 8207FFF8h */ case   34:  		/* lvrx VR63, <#[R11 + R27]> */
		/* 8207FFF8h case   34:*/		cpu::mem::lvrx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 8207FFF8h case   34:*/		return 0x8207FFFC;
		  /* 8207FFFCh */ case   35:  		/* lvlx VR62, <#[R10 + R26]> */
		/* 8207FFFCh case   35:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 8207FFFCh case   35:*/		return 0x82080000;
		  /* 82080000h */ case   36:  		/* vor VR63, VR62, VR63 */
		/* 82080000h case   36:*/		cpu::op::vor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 82080000h case   36:*/		return 0x82080004;
		  /* 82080004h */ case   37:  		/* stvlx VR63, <#[R5]> */
		/* 82080004h case   37:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R5 + 0x00000000) );
		/* 82080004h case   37:*/		return 0x82080008;
		  /* 82080008h */ case   38:  		/* addi R10, R31, 552 */
		/* 82080008h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x228);
		/* 82080008h case   38:*/		return 0x8208000C;
		  /* 8208000Ch */ case   39:  		/* stvrx VR63, <#[R5 + R11]> */
		/* 8208000Ch case   39:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 8208000Ch case   39:*/		return 0x82080010;
		  /* 82080010h */ case   40:  		/* lvx VR63, <#[R25]> */
		/* 82080010h case   40:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R25 + 0x00000000) );
		/* 82080010h case   40:*/		return 0x82080014;
		  /* 82080014h */ case   41:  		/* stvlx VR63, <#[R3]> */
		/* 82080014h case   41:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R3 + 0x00000000) );
		/* 82080014h case   41:*/		return 0x82080018;
		  /* 82080018h */ case   42:  		/* stvrx VR63, <#[R3 + R11]> */
		/* 82080018h case   42:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82080018h case   42:*/		return 0x8208001C;
		  /* 8208001Ch */ case   43:  		/* lvx VR63, <#[R24]> */
		/* 8208001Ch case   43:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R24 + 0x00000000) );
		/* 8208001Ch case   43:*/		return 0x82080020;
		  /* 82080020h */ case   44:  		/* stvlx VR63, <#[R30]> */
		/* 82080020h case   44:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R30 + 0x00000000) );
		/* 82080020h case   44:*/		return 0x82080024;
		  /* 82080024h */ case   45:  		/* stvrx VR63, <#[R30 + R11]> */
		/* 82080024h case   45:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82080024h case   45:*/		return 0x82080028;
		  /* 82080028h */ case   46:  		/* lvx VR63, <#[R23]> */
		/* 82080028h case   46:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R23 + 0x00000000) );
		/* 82080028h case   46:*/		return 0x8208002C;
		  /* 8208002Ch */ case   47:  		/* stvlx VR63, <#[R29]> */
		/* 8208002Ch case   47:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R29 + 0x00000000) );
		/* 8208002Ch case   47:*/		return 0x82080030;
		  /* 82080030h */ case   48:  		/* stvrx VR63, <#[R29 + R11]> */
		/* 82080030h case   48:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R29 + regs.R11 + 0x00000000) );
		/* 82080030h case   48:*/		return 0x82080034;
		  /* 82080034h */ case   49:  		/* lvx VR63, <#[R22]> */
		/* 82080034h case   49:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R22 + 0x00000000) );
		/* 82080034h case   49:*/		return 0x82080038;
		  /* 82080038h */ case   50:  		/* stvlx VR63, <#[R28]> */
		/* 82080038h case   50:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R28 + 0x00000000) );
		/* 82080038h case   50:*/		return 0x8208003C;
		  /* 8208003Ch */ case   51:  		/* stvrx VR63, <#[R28 + R11]> */
		/* 8208003Ch case   51:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8208003Ch case   51:*/		return 0x82080040;
		  /* 82080040h */ case   52:  		/* lvx VR63, <#[R21]> */
		/* 82080040h case   52:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R21 + 0x00000000) );
		/* 82080040h case   52:*/		return 0x82080044;
		  /* 82080044h */ case   53:  		/* stvlx VR63, <#[R10]> */
		/* 82080044h case   53:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R10 + 0x00000000) );
		/* 82080044h case   53:*/		return 0x82080048;
		  /* 82080048h */ case   54:  		/* stvrx VR63, <#[R10 + R11]> */
		/* 82080048h case   54:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82080048h case   54:*/		return 0x8208004C;
		  /* 8208004Ch */ case   55:  		/* addi R11, R31, 408 */
		/* 8208004Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x198);
		/* 8208004Ch case   55:*/		return 0x82080050;
		  /* 82080050h */ case   56:  		/* lvx VR63, <#[R18]> */
		/* 82080050h case   56:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R18 + 0x00000000) );
		/* 82080050h case   56:*/		return 0x82080054;
		  /* 82080054h */ case   57:  		/* li R10, 48 */
		/* 82080054h case   57:*/		cpu::op::li<0>(regs,&regs.R10,0x30);
		/* 82080054h case   57:*/		return 0x82080058;
		  /* 82080058h */ case   58:  		/* stvlx VR63, <#[R11]> */
		/* 82080058h case   58:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 82080058h case   58:*/		return 0x8208005C;
		  /* 8208005Ch */ case   59:  		/* stvrx VR63, <#[R11 + R19]> */
		/* 8208005Ch case   59:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 8208005Ch case   59:*/		return 0x82080060;
		  /* 82080060h */ case   60:  		/* addi R11, R31, 536 */
		/* 82080060h case   60:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x218);
		/* 82080060h case   60:*/		return 0x82080064;
		  /* 82080064h */ case   61:  		/* lvx VR63, <#[R17]> */
		/* 82080064h case   61:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R17 + 0x00000000) );
		/* 82080064h case   61:*/		return 0x82080068;
		  /* 82080068h */ case   62:  		/* stvlx VR63, <#[R11]> */
		/* 82080068h case   62:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 82080068h case   62:*/		return 0x8208006C;
		  /* 8208006Ch */ case   63:  		/* stvrx VR63, <#[R11 + R19]> */
		/* 8208006Ch case   63:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 8208006Ch case   63:*/		return 0x82080070;
		  /* 82080070h */ case   64:  		/* lhz R11, <#[R9]> */
		/* 82080070h case   64:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82080070h case   64:*/		return 0x82080074;
		  /* 82080074h */ case   65:  		/* addi R6, R11, -80 */
		/* 82080074h case   65:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFB0);
		/* 82080074h case   65:*/		return 0x82080078;
		  /* 82080078h */ case   66:  		/* lhz R11, <#[R9 + 2]> */
		/* 82080078h case   66:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000002) );
		/* 82080078h case   66:*/		return 0x8208007C;
		  /* 8208007Ch */ case   67:  		/* addi R11, R11, -48 */
		/* 8208007Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD0);
		/* 8208007Ch case   67:*/		return 0x82080080;
		  /* 82080080h */ case   68:  		/* divwu R9, R6, R10 */
		/* 82080080h case   68:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R6,regs.R10);
		/* 82080080h case   68:*/		return 0x82080084;
		  /* 82080084h */ case   69:  		/* divwu R11, R11, R10 */
		/* 82080084h case   69:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82080084h case   69:*/		return 0x82080088;
		  /* 82080088h */ case   70:  		/* mullw R11, R11, R9 */
		/* 82080088h case   70:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82080088h case   70:*/		return 0x8208008C;
		  /* 8208008Ch */ case   71:  		/* rlwinm R11, R11, 6, 0, 25 */
		/* 8208008Ch case   71:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R11,regs.R11);
		/* 8208008Ch case   71:*/		return 0x82080090;
		  /* 82080090h */ case   72:  		/* b -332 */
		/* 82080090h case   72:*/		return 0x8207FF44;
		/* 82080090h case   72:*/		return 0x82080094;
	}
	return 0x82080094;
} // Block from 8207FF70h-82080094h (73 instructions)

