#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821C0B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0B9C);
		  /* 821C0B9Ch */ case    0:  		/* stw R11, <#[R31 + 16]> */
		/* 821C0B9Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821C0B9Ch case    0:*/		return 0x821C0BA0;
	}
	return 0x821C0BA0;
} // Block from 821C0B9Ch-821C0BA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BA0);
		  /* 821C0BA0h */ case    0:  		/* stw R31, <#[R27 + 12]> */
		/* 821C0BA0h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C0BA0h case    0:*/		return 0x821C0BA4;
		  /* 821C0BA4h */ case    1:  		/* mr R5, R29 */
		/* 821C0BA4h case    1:*/		regs.R5 = regs.R29;
		/* 821C0BA4h case    1:*/		return 0x821C0BA8;
		  /* 821C0BA8h */ case    2:  		/* mr R4, R28 */
		/* 821C0BA8h case    2:*/		regs.R4 = regs.R28;
		/* 821C0BA8h case    2:*/		return 0x821C0BAC;
		  /* 821C0BACh */ case    3:  		/* mr R3, R22 */
		/* 821C0BACh case    3:*/		regs.R3 = regs.R22;
		/* 821C0BACh case    3:*/		return 0x821C0BB0;
		  /* 821C0BB0h */ case    4:  		/* bl -295584 */
		/* 821C0BB0h case    4:*/		regs.LR = 0x821C0BB4; return 0x82178910;
		/* 821C0BB0h case    4:*/		return 0x821C0BB4;
	}
	return 0x821C0BB4;
} // Block from 821C0BA0h-821C0BB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BB4);
		  /* 821C0BB4h */ case    0:  		/* mr R3, R29 */
		/* 821C0BB4h case    0:*/		regs.R3 = regs.R29;
		/* 821C0BB4h case    0:*/		return 0x821C0BB8;
		  /* 821C0BB8h */ case    1:  		/* lwz R4, <#[R26 + 12]> */
		/* 821C0BB8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C0BB8h case    1:*/		return 0x821C0BBC;
		  /* 821C0BBCh */ case    2:  		/* bl 176556 */
		/* 821C0BBCh case    2:*/		regs.LR = 0x821C0BC0; return 0x821EBD68;
		/* 821C0BBCh case    2:*/		return 0x821C0BC0;
		  /* 821C0BC0h */ case    3:  		/* or. R26, R3, R3 */
		/* 821C0BC0h case    3:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 821C0BC0h case    3:*/		return 0x821C0BC4;
		  /* 821C0BC4h */ case    4:  		/* bc 4, CR0_EQ, -356 */
		/* 821C0BC4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C0A60;  }
		/* 821C0BC4h case    4:*/		return 0x821C0BC8;
	}
	return 0x821C0BC8;
} // Block from 821C0BB4h-821C0BC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BC8);
		  /* 821C0BC8h */ case    0:  		/* stw R25, <#[R20]> */
		/* 821C0BC8h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R20 + 0x00000000) );
		/* 821C0BC8h case    0:*/		return 0x821C0BCC;
		  /* 821C0BCCh */ case    1:  		/* li R3, 0 */
		/* 821C0BCCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C0BCCh case    1:*/		return 0x821C0BD0;
		  /* 821C0BD0h */ case    2:  		/* addi R1, R1, 256 */
		/* 821C0BD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821C0BD0h case    2:*/		return 0x821C0BD4;
		  /* 821C0BD4h */ case    3:  		/* b -1243468 */
		/* 821C0BD4h case    3:*/		return 0x82091288;
		/* 821C0BD4h case    3:*/		return 0x821C0BD8;
	}
	return 0x821C0BD8;
} // Block from 821C0BC8h-821C0BD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BD8);
		  /* 821C0BD8h */ case    0:  		/* li R3, 3544 */
		/* 821C0BD8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xDD8);
		/* 821C0BD8h case    0:*/		return 0x821C0BDC;
		  /* 821C0BDCh */ case    1:  		/* b -12 */
		/* 821C0BDCh case    1:*/		return 0x821C0BD0;
		/* 821C0BDCh case    1:*/		return 0x821C0BE0;
	}
	return 0x821C0BE0;
} // Block from 821C0BD8h-821C0BE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BE0);
		  /* 821C0BE0h */ case    0:  		/* li R4, 4800 */
		/* 821C0BE0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C0BE0h case    0:*/		return 0x821C0BE4;
		  /* 821C0BE4h */ case    1:  		/* mr R3, R29 */
		/* 821C0BE4h case    1:*/		regs.R3 = regs.R29;
		/* 821C0BE4h case    1:*/		return 0x821C0BE8;
		  /* 821C0BE8h */ case    2:  		/* bl -454016 */
		/* 821C0BE8h case    2:*/		regs.LR = 0x821C0BEC; return 0x82151E68;
		/* 821C0BE8h case    2:*/		return 0x821C0BEC;
		  /* 821C0BECh */ case    3:  		/* nop */
		/* 821C0BECh case    3:*/		cpu::op::nop();
		/* 821C0BECh case    3:*/		return 0x821C0BF0;
	}
	return 0x821C0BF0;
} // Block from 821C0BE0h-821C0BF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C0BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0BF0);
		  /* 821C0BF0h */ case    0:  		/* mfspr R12, LR */
		/* 821C0BF0h case    0:*/		regs.R12 = regs.LR;
		/* 821C0BF0h case    0:*/		return 0x821C0BF4;
		  /* 821C0BF4h */ case    1:  		/* bl -1243556 */
		/* 821C0BF4h case    1:*/		regs.LR = 0x821C0BF8; return 0x82091250;
		/* 821C0BF4h case    1:*/		return 0x821C0BF8;
		  /* 821C0BF8h */ case    2:  		/* addi R12, R1, -56 */
		/* 821C0BF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFC8);
		/* 821C0BF8h case    2:*/		return 0x821C0BFC;
		  /* 821C0BFCh */ case    3:  		/* bl -1243108 */
		/* 821C0BFCh case    3:*/		regs.LR = 0x821C0C00; return 0x82091418;
		/* 821C0BFCh case    3:*/		return 0x821C0C00;
		  /* 821C0C00h */ case    4:  		/* stwu R1, <#[R1 - 192]> */
		/* 821C0C00h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821C0C00h case    4:*/		return 0x821C0C04;
		  /* 821C0C04h */ case    5:  		/* lwz R29, <#[R5 + 20]> */
		/* 821C0C04h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R5 + 0x00000014) );
		/* 821C0C04h case    5:*/		return 0x821C0C08;
		  /* 821C0C08h */ case    6:  		/* mr R27, R3 */
		/* 821C0C08h case    6:*/		regs.R27 = regs.R3;
		/* 821C0C08h case    6:*/		return 0x821C0C0C;
		  /* 821C0C0Ch */ case    7:  		/* mr R26, R4 */
		/* 821C0C0Ch case    7:*/		regs.R26 = regs.R4;
		/* 821C0C0Ch case    7:*/		return 0x821C0C10;
		  /* 821C0C10h */ case    8:  		/* mr R30, R5 */
		/* 821C0C10h case    8:*/		regs.R30 = regs.R5;
		/* 821C0C10h case    8:*/		return 0x821C0C14;
		  /* 821C0C14h */ case    9:  		/* li R31, 0 */
		/* 821C0C14h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821C0C14h case    9:*/		return 0x821C0C18;
		  /* 821C0C18h */ case   10:  		/* lwz R11, <#[R29 + 4]> */
		/* 821C0C18h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821C0C18h case   10:*/		return 0x821C0C1C;
		  /* 821C0C1Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821C0C1Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C0C1Ch case   11:*/		return 0x821C0C20;
		  /* 821C0C20h */ case   12:  		/* bc 4, CR6_GT, 232 */
		/* 821C0C20h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821C0D08;  }
		/* 821C0C20h case   12:*/		return 0x821C0C24;
		  /* 821C0C24h */ case   13:  		/* lis R11, -32256 */
		/* 821C0C24h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C0C24h case   13:*/		return 0x821C0C28;
		  /* 821C0C28h */ case   14:  		/* lis R10, -32255 */
		/* 821C0C28h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821C0C28h case   14:*/		return 0x821C0C2C;
		  /* 821C0C2Ch */ case   15:  		/* lis R9, -32252 */
		/* 821C0C2Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821C0C2Ch case   15:*/		return 0x821C0C30;
		  /* 821C0C30h */ case   16:  		/* lis R8, -32252 */
		/* 821C0C30h case   16:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 821C0C30h case   16:*/		return 0x821C0C34;
		  /* 821C0C34h */ case   17:  		/* lfd FR31, <#[R11 + 4736]> */
		/* 821C0C34h case   17:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00001280) );
		/* 821C0C34h case   17:*/		return 0x821C0C38;
		  /* 821C0C38h */ case   18:  		/* lfd FR28, <#[R10 - 24504]> */
		/* 821C0C38h case   18:*/		cpu::mem::load64f( regs, &regs.FR28, (uint32)(regs.R10 + 0xFFFFA048) );
		/* 821C0C38h case   18:*/		return 0x821C0C3C;
		  /* 821C0C3Ch */ case   19:  		/* lfd FR29, <#[R9 - 16288]> */
		/* 821C0C3Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R9 + 0xFFFFC060) );
		/* 821C0C3Ch case   19:*/		return 0x821C0C40;
		  /* 821C0C40h */ case   20:  		/* lfd FR30, <#[R8 - 16296]> */
		/* 821C0C40h case   20:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R8 + 0xFFFFC058) );
		/* 821C0C40h case   20:*/		return 0x821C0C44;
		  /* 821C0C44h */ case   21:  		/* addi R11, R31, 2 */
		/* 821C0C44h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2);
		/* 821C0C44h case   21:*/		return 0x821C0C48;
		  /* 821C0C48h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C0C48h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C0C48h case   22:*/		return 0x821C0C4C;
		  /* 821C0C4Ch */ case   23:  		/* lwzx R28, <#[R11 + R29]> */
		/* 821C0C4Ch case   23:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821C0C4Ch case   23:*/		return 0x821C0C50;
		  /* 821C0C50h */ case   24:  		/* lwz R3, <#[R28 + 12]> */
		/* 821C0C50h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C0C50h case   24:*/		return 0x821C0C54;
		  /* 821C0C54h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C0C54h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0C54h case   25:*/		return 0x821C0C58;
		  /* 821C0C58h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C0C58h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C0C58h case   26:*/		return 0x821C0C5C;
		  /* 821C0C5Ch */ case   27:  		/* cmplwi CR6, R11, 16000 */
		/* 821C0C5Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821C0C5Ch case   27:*/		return 0x821C0C60;
		  /* 821C0C60h */ case   28:  		/* bc 4, CR6_EQ, 188 */
		/* 821C0C60h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821C0D1C;  }
		/* 821C0C60h case   28:*/		return 0x821C0C64;
		  /* 821C0C64h */ case   29:  		/* lwz R11, <#[R28]> */
		/* 821C0C64h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C0C64h case   29:*/		return 0x821C0C68;
		  /* 821C0C68h */ case   30:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821C0C68h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821C0C68h case   30:*/		return 0x821C0C6C;
		  /* 821C0C6Ch */ case   31:  		/* rlwinm R4, R11, 27, 30, 31 */
		/* 821C0C6Ch case   31:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R4,regs.R11);
		/* 821C0C6Ch case   31:*/		return 0x821C0C70;
		  /* 821C0C70h */ case   32:  		/* bl 395824 */
		/* 821C0C70h case   32:*/		regs.LR = 0x821C0C74; return 0x822216A0;
		/* 821C0C70h case   32:*/		return 0x821C0C74;
		  /* 821C0C74h */ case   33:  		/* fcmpu CR6, FR1, FR30 */
		/* 821C0C74h case   33:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR30);
		/* 821C0C74h case   33:*/		return 0x821C0C78;
		  /* 821C0C78h */ case   34:  		/* bc 12, CR6_LT, 200 */
		/* 821C0C78h case   34:*/		if ( regs.CR[6].lt ) { return 0x821C0D40;  }
		/* 821C0C78h case   34:*/		return 0x821C0C7C;
		  /* 821C0C7Ch */ case   35:  		/* fcmpu CR6, FR1, FR29 */
		/* 821C0C7Ch case   35:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR29);
		/* 821C0C7Ch case   35:*/		return 0x821C0C80;
		  /* 821C0C80h */ case   36:  		/* bc 12, CR6_GT, 192 */
		/* 821C0C80h case   36:*/		if ( regs.CR[6].gt ) { return 0x821C0D40;  }
		/* 821C0C80h case   36:*/		return 0x821C0C84;
		  /* 821C0C84h */ case   37:  		/* fmul FR0, FR1, FR28 */
		/* 821C0C84h case   37:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR1,regs.FR28);
		/* 821C0C84h case   37:*/		return 0x821C0C88;
		  /* 821C0C88h */ case   38:  		/* fctiwz FR0, FR0 */
		/* 821C0C88h case   38:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821C0C88h case   38:*/		return 0x821C0C8C;
		  /* 821C0C8Ch */ case   39:  		/* stfd FR0, <#[R1 + 80]> */
		/* 821C0C8Ch case   39:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821C0C8Ch case   39:*/		return 0x821C0C90;
		  /* 821C0C90h */ case   40:  		/* lwz R11, <#[R1 + 84]> */
		/* 821C0C90h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821C0C90h case   40:*/		return 0x821C0C94;
		  /* 821C0C94h */ case   41:  		/* extsw R10, R11 */
		/* 821C0C94h case   41:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R11);
		/* 821C0C94h case   41:*/		return 0x821C0C98;
		  /* 821C0C98h */ case   42:  		/* std R10, <#[R1 + 88]> */
		/* 821C0C98h case   42:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821C0C98h case   42:*/		return 0x821C0C9C;
		  /* 821C0C9Ch */ case   43:  		/* lfd FR0, <#[R1 + 88]> */
		/* 821C0C9Ch case   43:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821C0C9Ch case   43:*/		return 0x821C0CA0;
		  /* 821C0CA0h */ case   44:  		/* fcfid FR0, FR0 */
		/* 821C0CA0h case   44:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C0CA0h case   44:*/		return 0x821C0CA4;
		  /* 821C0CA4h */ case   45:  		/* fmul FR0, FR0, FR31 */
		/* 821C0CA4h case   45:*/		cpu::op::fmul<0>(regs,&regs.FR0,regs.FR0,regs.FR31);
		/* 821C0CA4h case   45:*/		return 0x821C0CA8;
		  /* 821C0CA8h */ case   46:  		/* fcmpu CR6, FR0, FR1 */
		/* 821C0CA8h case   46:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821C0CA8h case   46:*/		return 0x821C0CAC;
		  /* 821C0CACh */ case   47:  		/* bc 4, CR6_EQ, 120 */
		/* 821C0CACh case   47:*/		if ( !regs.CR[6].eq ) { return 0x821C0D24;  }
		/* 821C0CACh case   47:*/		return 0x821C0CB0;
		  /* 821C0CB0h */ case   48:  		/* cmplwi CR6, R31, 1 */
		/* 821C0CB0h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821C0CB0h case   48:*/		return 0x821C0CB4;
		  /* 821C0CB4h */ case   49:  		/* bc 12, CR6_LT, 40 */
		/* 821C0CB4h case   49:*/		if ( regs.CR[6].lt ) { return 0x821C0CDC;  }
		/* 821C0CB4h case   49:*/		return 0x821C0CB8;
		  /* 821C0CB8h */ case   50:  		/* bc 12, CR6_EQ, 24 */
		/* 821C0CB8h case   50:*/		if ( regs.CR[6].eq ) { return 0x821C0CD0;  }
		/* 821C0CB8h case   50:*/		return 0x821C0CBC;
		  /* 821C0CBCh */ case   51:  		/* cmplwi CR6, R31, 3 */
		/* 821C0CBCh case   51:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000003);
		/* 821C0CBCh case   51:*/		return 0x821C0CC0;
		  /* 821C0CC0h */ case   52:  		/* bc 4, CR6_LT, 116 */
		/* 821C0CC0h case   52:*/		if ( !regs.CR[6].lt ) { return 0x821C0D34;  }
		/* 821C0CC0h case   52:*/		return 0x821C0CC4;
		  /* 821C0CC4h */ case   53:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C0CC4h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C0CC4h case   53:*/		return 0x821C0CC8;
		  /* 821C0CC8h */ case   54:  		/* rlwimi R10, R11, 26, 1, 5 */
		/* 821C0CC8h case   54:*/		cpu::op::rlwimi<0,26,1,5>(regs,&regs.R10,regs.R11);
		/* 821C0CC8h case   54:*/		return 0x821C0CCC;
		  /* 821C0CCCh */ case   55:  		/* b 24 */
		/* 821C0CCCh case   55:*/		return 0x821C0CE4;
		/* 821C0CCCh case   55:*/		return 0x821C0CD0;
	}
	return 0x821C0CD0;
} // Block from 821C0BF0h-821C0CD0h (56 instructions)

//////////////////////////////////////////////////////
// Block at 821C0CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0CD0);
		  /* 821C0CD0h */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C0CD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C0CD0h case    0:*/		return 0x821C0CD4;
		  /* 821C0CD4h */ case    1:  		/* rlwimi R10, R11, 21, 6, 10 */
		/* 821C0CD4h case    1:*/		cpu::op::rlwimi<0,21,6,10>(regs,&regs.R10,regs.R11);
		/* 821C0CD4h case    1:*/		return 0x821C0CD8;
		  /* 821C0CD8h */ case    2:  		/* b 12 */
		/* 821C0CD8h case    2:*/		return 0x821C0CE4;
		/* 821C0CD8h case    2:*/		return 0x821C0CDC;
	}
	return 0x821C0CDC;
} // Block from 821C0CD0h-821C0CDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C0CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0CDC);
		  /* 821C0CDCh */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C0CDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C0CDCh case    0:*/		return 0x821C0CE0;
		  /* 821C0CE0h */ case    1:  		/* rlwimi R10, R11, 16, 11, 15 */
		/* 821C0CE0h case    1:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R10,regs.R11);
		/* 821C0CE0h case    1:*/		return 0x821C0CE4;
	}
	return 0x821C0CE4;
} // Block from 821C0CDCh-821C0CE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C0CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0CE4);
		  /* 821C0CE4h */ case    0:  		/* stw R10, <#[R30 + 8]> */
		/* 821C0CE4h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C0CE4h case    0:*/		return 0x821C0CE8;
		  /* 821C0CE8h */ case    1:  		/* mr R5, R27 */
		/* 821C0CE8h case    1:*/		regs.R5 = regs.R27;
		/* 821C0CE8h case    1:*/		return 0x821C0CEC;
		  /* 821C0CECh */ case    2:  		/* mr R4, R28 */
		/* 821C0CECh case    2:*/		regs.R4 = regs.R28;
		/* 821C0CECh case    2:*/		return 0x821C0CF0;
		  /* 821C0CF0h */ case    3:  		/* mr R3, R26 */
		/* 821C0CF0h case    3:*/		regs.R3 = regs.R26;
		/* 821C0CF0h case    3:*/		return 0x821C0CF4;
		  /* 821C0CF4h */ case    4:  		/* bl -295908 */
		/* 821C0CF4h case    4:*/		regs.LR = 0x821C0CF8; return 0x82178910;
		/* 821C0CF4h case    4:*/		return 0x821C0CF8;
		  /* 821C0CF8h */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 821C0CF8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821C0CF8h case    5:*/		return 0x821C0CFC;
		  /* 821C0CFCh */ case    6:  		/* addi R31, R31, 1 */
		/* 821C0CFCh case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821C0CFCh case    6:*/		return 0x821C0D00;
		  /* 821C0D00h */ case    7:  		/* cmplw CR6, R31, R11 */
		/* 821C0D00h case    7:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821C0D00h case    7:*/		return 0x821C0D04;
		  /* 821C0D04h */ case    8:  		/* bc 12, CR6_LT, -192 */
		/* 821C0D04h case    8:*/		if ( regs.CR[6].lt ) { return 0x821C0C44;  }
		/* 821C0D04h case    8:*/		return 0x821C0D08;
	}
	return 0x821C0D08;
} // Block from 821C0CE4h-821C0D08h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D08);
		  /* 821C0D08h */ case    0:  		/* li R3, 0 */
		/* 821C0D08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C0D08h case    0:*/		return 0x821C0D0C;
		  /* 821C0D0Ch */ case    1:  		/* addi R1, R1, 192 */
		/* 821C0D0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821C0D0Ch case    1:*/		return 0x821C0D10;
		  /* 821C0D10h */ case    2:  		/* addi R12, R1, -56 */
		/* 821C0D10h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFC8);
		/* 821C0D10h case    2:*/		return 0x821C0D14;
		  /* 821C0D14h */ case    3:  		/* bl -1243312 */
		/* 821C0D14h case    3:*/		regs.LR = 0x821C0D18; return 0x82091464;
		/* 821C0D14h case    3:*/		return 0x821C0D18;
		  /* 821C0D18h */ case    4:  		/* b -1243768 */
		/* 821C0D18h case    4:*/		return 0x820912A0;
		/* 821C0D18h case    4:*/		return 0x821C0D1C;
	}
	return 0x821C0D1C;
} // Block from 821C0D08h-821C0D1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D1C);
		  /* 821C0D1Ch */ case    0:  		/* li R3, 3620 */
		/* 821C0D1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xE24);
		/* 821C0D1Ch case    0:*/		return 0x821C0D20;
		  /* 821C0D20h */ case    1:  		/* b -20 */
		/* 821C0D20h case    1:*/		return 0x821C0D0C;
		/* 821C0D20h case    1:*/		return 0x821C0D24;
	}
	return 0x821C0D24;
} // Block from 821C0D1Ch-821C0D24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D24);
		  /* 821C0D24h */ case    0:  		/* stfd FR1, <#[R27 + 624]> */
		/* 821C0D24h case    0:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R27 + 0x00000270) );
		/* 821C0D24h case    0:*/		return 0x821C0D28;
		  /* 821C0D28h */ case    1:  		/* li R3, 3622 */
		/* 821C0D28h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0xE26);
		/* 821C0D28h case    1:*/		return 0x821C0D2C;
		  /* 821C0D2Ch */ case    2:  		/* stfd FR31, <#[R27 + 632]> */
		/* 821C0D2Ch case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R27 + 0x00000278) );
		/* 821C0D2Ch case    2:*/		return 0x821C0D30;
		  /* 821C0D30h */ case    3:  		/* b -36 */
		/* 821C0D30h case    3:*/		return 0x821C0D0C;
		/* 821C0D30h case    3:*/		return 0x821C0D34;
	}
	return 0x821C0D34;
} // Block from 821C0D24h-821C0D34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D34);
		  /* 821C0D34h */ case    0:  		/* li R4, 4800 */
		/* 821C0D34h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C0D34h case    0:*/		return 0x821C0D38;
		  /* 821C0D38h */ case    1:  		/* mr R3, R27 */
		/* 821C0D38h case    1:*/		regs.R3 = regs.R27;
		/* 821C0D38h case    1:*/		return 0x821C0D3C;
		  /* 821C0D3Ch */ case    2:  		/* bl -454356 */
		/* 821C0D3Ch case    2:*/		regs.LR = 0x821C0D40; return 0x82151E68;
		/* 821C0D3Ch case    2:*/		return 0x821C0D40;
	}
	return 0x821C0D40;
} // Block from 821C0D34h-821C0D40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D40);
		  /* 821C0D40h */ case    0:  		/* stfd FR1, <#[R27 + 624]> */
		/* 821C0D40h case    0:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R27 + 0x00000270) );
		/* 821C0D40h case    0:*/		return 0x821C0D44;
		  /* 821C0D44h */ case    1:  		/* li R3, 3621 */
		/* 821C0D44h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0xE25);
		/* 821C0D44h case    1:*/		return 0x821C0D48;
		  /* 821C0D48h */ case    2:  		/* stfd FR30, <#[R27 + 632]> */
		/* 821C0D48h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R27 + 0x00000278) );
		/* 821C0D48h case    2:*/		return 0x821C0D4C;
		  /* 821C0D4Ch */ case    3:  		/* stfd FR29, <#[R27 + 640]> */
		/* 821C0D4Ch case    3:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R27 + 0x00000280) );
		/* 821C0D4Ch case    3:*/		return 0x821C0D50;
		  /* 821C0D50h */ case    4:  		/* b -68 */
		/* 821C0D50h case    4:*/		return 0x821C0D0C;
		/* 821C0D50h case    4:*/		return 0x821C0D54;
		  /* 821C0D54h */ case    5:  		/* nop */
		/* 821C0D54h case    5:*/		cpu::op::nop();
		/* 821C0D54h case    5:*/		return 0x821C0D58;
		  /* 821C0D58h */ case    6:  		/* lwz R10, <#[R4 + 4]> */
		/* 821C0D58h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821C0D58h case    6:*/		return 0x821C0D5C;
		  /* 821C0D5Ch */ case    7:  		/* addi R9, R4, 4 */
		/* 821C0D5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x4);
		/* 821C0D5Ch case    7:*/		return 0x821C0D60;
		  /* 821C0D60h */ case    8:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821C0D60h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821C0D60h case    8:*/		return 0x821C0D64;
		  /* 821C0D64h */ case    9:  		/* bclr 4, CR0_EQ */
		/* 821C0D64h case    9:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 821C0D64h case    9:*/		return 0x821C0D68;
	}
	return 0x821C0D68;
} // Block from 821C0D40h-821C0D68h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D68);
		  /* 821C0D68h */ case    0:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C0D68h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C0D68h case    0:*/		return 0x821C0D6C;
		  /* 821C0D6Ch */ case    1:  		/* lwz R8, <#[R4]> */
		/* 821C0D6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 821C0D6Ch case    1:*/		return 0x821C0D70;
		  /* 821C0D70h */ case    2:  		/* rlwinm R7, R10, 0, 0, 30 */
		/* 821C0D70h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R10);
		/* 821C0D70h case    2:*/		return 0x821C0D74;
		  /* 821C0D74h */ case    3:  		/* rlwinm R10, R8, 0, 0, 30 */
		/* 821C0D74h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R8);
		/* 821C0D74h case    3:*/		return 0x821C0D78;
	}
	return 0x821C0D78;
} // Block from 821C0D68h-821C0D78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C0D78h
// Function '?CanShiftOperands@Compiler@D3DXShader@@AAA_NPAVInstruction@2@W4Component@2@I01I0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0D78);
		  /* 821C0D78h */ case    0:  		/* addi R8, R11, 4 */
		/* 821C0D78h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821C0D78h case    0:*/		return 0x821C0D7C;
		  /* 821C0D7Ch */ case    1:  		/* addi R10, R10, -4 */
		/* 821C0D7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821C0D7Ch case    1:*/		return 0x821C0D80;
		  /* 821C0D80h */ case    2:  		/* lwz R6, <#[R11 + 4]> */
		/* 821C0D80h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C0D80h case    2:*/		return 0x821C0D84;
		  /* 821C0D84h */ case    3:  		/* ori R5, R4, 1 */
		/* 821C0D84h case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R4,0x1);
		/* 821C0D84h case    3:*/		return 0x821C0D88;
		  /* 821C0D88h */ case    4:  		/* stw R8, <#[R7]> */
		/* 821C0D88h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821C0D88h case    4:*/		return 0x821C0D8C;
		  /* 821C0D8Ch */ case    5:  		/* addi R8, R10, 4 */
		/* 821C0D8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821C0D8Ch case    5:*/		return 0x821C0D90;
		  /* 821C0D90h */ case    6:  		/* rlwinm R3, R6, 0, 0, 30 */
		/* 821C0D90h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R3,regs.R6);
		/* 821C0D90h case    6:*/		return 0x821C0D94;
		  /* 821C0D94h */ case    7:  		/* stw R7, <#[R11 + 4]> */
		/* 821C0D94h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C0D94h case    7:*/		return 0x821C0D98;
		  /* 821C0D98h */ case    8:  		/* ori R11, R9, 1 */
		/* 821C0D98h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R9,0x1);
		/* 821C0D98h case    8:*/		return 0x821C0D9C;
		  /* 821C0D9Ch */ case    9:  		/* stw R6, <#[R10 + 4]> */
		/* 821C0D9Ch case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821C0D9Ch case    9:*/		return 0x821C0DA0;
		  /* 821C0DA0h */ case   10:  		/* stw R8, <#[R3]> */
		/* 821C0DA0h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821C0DA0h case   10:*/		return 0x821C0DA4;
		  /* 821C0DA4h */ case   11:  		/* stw R5, <#[R9]> */
		/* 821C0DA4h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 821C0DA4h case   11:*/		return 0x821C0DA8;
		  /* 821C0DA8h */ case   12:  		/* stw R11, <#[R4]> */
		/* 821C0DA8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821C0DA8h case   12:*/		return 0x821C0DAC;
		  /* 821C0DACh */ case   13:  		/* bclr 20, CR0_LT */
		/* 821C0DACh case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C0DACh case   13:*/		return 0x821C0DB0;
	}
	return 0x821C0DB0;
} // Block from 821C0D78h-821C0DB0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C0DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0DB0);
		  /* 821C0DB0h */ case    0:  		/* lwz R9, <#[R3 + 8]> */
		/* 821C0DB0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0DB0h case    0:*/		return 0x821C0DB4;
		  /* 821C0DB4h */ case    1:  		/* mr R11, R3 */
		/* 821C0DB4h case    1:*/		regs.R11 = regs.R3;
		/* 821C0DB4h case    1:*/		return 0x821C0DB8;
		  /* 821C0DB8h */ case    2:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C0DB8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C0DB8h case    2:*/		return 0x821C0DBC;
		  /* 821C0DBCh */ case    3:  		/* mulli R8, R9, 12 */
		/* 821C0DBCh case    3:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R9,0xC);
		/* 821C0DBCh case    3:*/		return 0x821C0DC0;
		  /* 821C0DC0h */ case    4:  		/* addi R9, R9, 1 */
		/* 821C0DC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C0DC0h case    4:*/		return 0x821C0DC4;
		  /* 821C0DC4h */ case    5:  		/* add R8, R8, R10 */
		/* 821C0DC4h case    5:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 821C0DC4h case    5:*/		return 0x821C0DC8;
		  /* 821C0DC8h */ case    6:  		/* stw R9, <#[R3 + 8]> */
		/* 821C0DC8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0DC8h case    6:*/		return 0x821C0DCC;
		  /* 821C0DCCh */ case    7:  		/* lwz R7, <#[R10 + 8]> */
		/* 821C0DCCh case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821C0DCCh case    7:*/		return 0x821C0DD0;
		  /* 821C0DD0h */ case    8:  		/* addi R3, R8, 16 */
		/* 821C0DD0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0x10);
		/* 821C0DD0h case    8:*/		return 0x821C0DD4;
		  /* 821C0DD4h */ case    9:  		/* cmplw CR6, R9, R7 */
		/* 821C0DD4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821C0DD4h case    9:*/		return 0x821C0DD8;
		  /* 821C0DD8h */ case   10:  		/* bclr 4, CR6_EQ */
		/* 821C0DD8h case   10:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 821C0DD8h case   10:*/		return 0x821C0DDC;
	}
	return 0x821C0DDC;
} // Block from 821C0DB0h-821C0DDCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C0DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0DDC);
		  /* 821C0DDCh */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821C0DDCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821C0DDCh case    0:*/		return 0x821C0DE0;
		  /* 821C0DE0h */ case    1:  		/* li R9, 0 */
		/* 821C0DE0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C0DE0h case    1:*/		return 0x821C0DE4;
		  /* 821C0DE4h */ case    2:  		/* lwz R10, <#[R10 + 4]> */
		/* 821C0DE4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821C0DE4h case    2:*/		return 0x821C0DE8;
		  /* 821C0DE8h */ case    3:  		/* stw R9, <#[R11 + 8]> */
		/* 821C0DE8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C0DE8h case    3:*/		return 0x821C0DEC;
		  /* 821C0DECh */ case    4:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821C0DECh case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821C0DECh case    4:*/		return 0x821C0DF0;
		  /* 821C0DF0h */ case    5:  		/* addic R9, R9, -1 */
		/* 821C0DF0h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821C0DF0h case    5:*/		return 0x821C0DF4;
		  /* 821C0DF4h */ case    6:  		/* subfe R9, R9, R9 */
		/* 821C0DF4h case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821C0DF4h case    6:*/		return 0x821C0DF8;
		  /* 821C0DF8h */ case    7:  		/* and R10, R9, R10 */
		/* 821C0DF8h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C0DF8h case    7:*/		return 0x821C0DFC;
		  /* 821C0DFCh */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 821C0DFCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C0DFCh case    8:*/		return 0x821C0E00;
		  /* 821C0E00h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821C0E00h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C0E00h case    9:*/		return 0x821C0E04;
	}
	return 0x821C0E04;
} // Block from 821C0DDCh-821C0E04h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E04);
		  /* 821C0E04h */ case    0:  		/* nop */
		/* 821C0E04h case    0:*/		cpu::op::nop();
		/* 821C0E04h case    0:*/		return 0x821C0E08;
	}
	return 0x821C0E08;
} // Block from 821C0E04h-821C0E08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E08);
		  /* 821C0E08h */ case    0:  		/* lwz R9, <#[R3 + 8]> */
		/* 821C0E08h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0E08h case    0:*/		return 0x821C0E0C;
		  /* 821C0E0Ch */ case    1:  		/* mr R11, R3 */
		/* 821C0E0Ch case    1:*/		regs.R11 = regs.R3;
		/* 821C0E0Ch case    1:*/		return 0x821C0E10;
		  /* 821C0E10h */ case    2:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C0E10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C0E10h case    2:*/		return 0x821C0E14;
		  /* 821C0E14h */ case    3:  		/* addi R8, R9, 4 */
		/* 821C0E14h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x4);
		/* 821C0E14h case    3:*/		return 0x821C0E18;
		  /* 821C0E18h */ case    4:  		/* addi R9, R9, 1 */
		/* 821C0E18h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C0E18h case    4:*/		return 0x821C0E1C;
		  /* 821C0E1Ch */ case    5:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821C0E1Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821C0E1Ch case    5:*/		return 0x821C0E20;
		  /* 821C0E20h */ case    6:  		/* stw R9, <#[R3 + 8]> */
		/* 821C0E20h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0E20h case    6:*/		return 0x821C0E24;
		  /* 821C0E24h */ case    7:  		/* lwz R7, <#[R10 + 8]> */
		/* 821C0E24h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821C0E24h case    7:*/		return 0x821C0E28;
		  /* 821C0E28h */ case    8:  		/* add R3, R8, R10 */
		/* 821C0E28h case    8:*/		cpu::op::add<0>(regs,&regs.R3,regs.R8,regs.R10);
		/* 821C0E28h case    8:*/		return 0x821C0E2C;
		  /* 821C0E2Ch */ case    9:  		/* cmplw CR6, R9, R7 */
		/* 821C0E2Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821C0E2Ch case    9:*/		return 0x821C0E30;
		  /* 821C0E30h */ case   10:  		/* bclr 4, CR6_EQ */
		/* 821C0E30h case   10:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 821C0E30h case   10:*/		return 0x821C0E34;
	}
	return 0x821C0E34;
} // Block from 821C0E08h-821C0E34h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E34);
		  /* 821C0E34h */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821C0E34h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821C0E34h case    0:*/		return 0x821C0E38;
		  /* 821C0E38h */ case    1:  		/* li R9, 0 */
		/* 821C0E38h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C0E38h case    1:*/		return 0x821C0E3C;
		  /* 821C0E3Ch */ case    2:  		/* lwz R10, <#[R10 + 4]> */
		/* 821C0E3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821C0E3Ch case    2:*/		return 0x821C0E40;
		  /* 821C0E40h */ case    3:  		/* stw R9, <#[R11 + 8]> */
		/* 821C0E40h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C0E40h case    3:*/		return 0x821C0E44;
		  /* 821C0E44h */ case    4:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821C0E44h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821C0E44h case    4:*/		return 0x821C0E48;
		  /* 821C0E48h */ case    5:  		/* addic R9, R9, -1 */
		/* 821C0E48h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821C0E48h case    5:*/		return 0x821C0E4C;
		  /* 821C0E4Ch */ case    6:  		/* subfe R9, R9, R9 */
		/* 821C0E4Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821C0E4Ch case    6:*/		return 0x821C0E50;
		  /* 821C0E50h */ case    7:  		/* and R10, R9, R10 */
		/* 821C0E50h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C0E50h case    7:*/		return 0x821C0E54;
		  /* 821C0E54h */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 821C0E54h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C0E54h case    8:*/		return 0x821C0E58;
		  /* 821C0E58h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821C0E58h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C0E58h case    9:*/		return 0x821C0E5C;
	}
	return 0x821C0E5C;
} // Block from 821C0E34h-821C0E5Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E5C);
		  /* 821C0E5Ch */ case    0:  		/* nop */
		/* 821C0E5Ch case    0:*/		cpu::op::nop();
		/* 821C0E5Ch case    0:*/		return 0x821C0E60;
	}
	return 0x821C0E60;
} // Block from 821C0E5Ch-821C0E60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E60h
// Function '?CheckArrayLimitInLoop@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAULoop@2@PAUInductionVariable@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E60);
		  /* 821C0E60h */ case    0:  		/* lwz R9, <#[R3 + 8]> */
		/* 821C0E60h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0E60h case    0:*/		return 0x821C0E64;
		  /* 821C0E64h */ case    1:  		/* mr R11, R3 */
		/* 821C0E64h case    1:*/		regs.R11 = regs.R3;
		/* 821C0E64h case    1:*/		return 0x821C0E68;
		  /* 821C0E68h */ case    2:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C0E68h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C0E68h case    2:*/		return 0x821C0E6C;
		  /* 821C0E6Ch */ case    3:  		/* addi R8, R9, 2 */
		/* 821C0E6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x2);
		/* 821C0E6Ch case    3:*/		return 0x821C0E70;
		  /* 821C0E70h */ case    4:  		/* addi R9, R9, 1 */
		/* 821C0E70h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C0E70h case    4:*/		return 0x821C0E74;
		  /* 821C0E74h */ case    5:  		/* rlwinm R8, R8, 3, 0, 28 */
		/* 821C0E74h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R8,regs.R8);
		/* 821C0E74h case    5:*/		return 0x821C0E78;
		  /* 821C0E78h */ case    6:  		/* stw R9, <#[R3 + 8]> */
		/* 821C0E78h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C0E78h case    6:*/		return 0x821C0E7C;
		  /* 821C0E7Ch */ case    7:  		/* lwz R7, <#[R10 + 8]> */
		/* 821C0E7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821C0E7Ch case    7:*/		return 0x821C0E80;
		  /* 821C0E80h */ case    8:  		/* add R3, R8, R10 */
		/* 821C0E80h case    8:*/		cpu::op::add<0>(regs,&regs.R3,regs.R8,regs.R10);
		/* 821C0E80h case    8:*/		return 0x821C0E84;
		  /* 821C0E84h */ case    9:  		/* cmplw CR6, R9, R7 */
		/* 821C0E84h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821C0E84h case    9:*/		return 0x821C0E88;
		  /* 821C0E88h */ case   10:  		/* bclr 4, CR6_EQ */
		/* 821C0E88h case   10:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 821C0E88h case   10:*/		return 0x821C0E8C;
	}
	return 0x821C0E8C;
} // Block from 821C0E60h-821C0E8Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C0E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0E8C);
		  /* 821C0E8Ch */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821C0E8Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821C0E8Ch case    0:*/		return 0x821C0E90;
		  /* 821C0E90h */ case    1:  		/* li R9, 0 */
		/* 821C0E90h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C0E90h case    1:*/		return 0x821C0E94;
		  /* 821C0E94h */ case    2:  		/* lwz R10, <#[R10 + 4]> */
		/* 821C0E94h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821C0E94h case    2:*/		return 0x821C0E98;
		  /* 821C0E98h */ case    3:  		/* stw R9, <#[R11 + 8]> */
		/* 821C0E98h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C0E98h case    3:*/		return 0x821C0E9C;
		  /* 821C0E9Ch */ case    4:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821C0E9Ch case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821C0E9Ch case    4:*/		return 0x821C0EA0;
		  /* 821C0EA0h */ case    5:  		/* addic R9, R9, -1 */
		/* 821C0EA0h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821C0EA0h case    5:*/		return 0x821C0EA4;
		  /* 821C0EA4h */ case    6:  		/* subfe R9, R9, R9 */
		/* 821C0EA4h case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821C0EA4h case    6:*/		return 0x821C0EA8;
		  /* 821C0EA8h */ case    7:  		/* and R10, R9, R10 */
		/* 821C0EA8h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C0EA8h case    7:*/		return 0x821C0EAC;
		  /* 821C0EACh */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 821C0EACh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C0EACh case    8:*/		return 0x821C0EB0;
		  /* 821C0EB0h */ case    9:  		/* bclr 20, CR0_LT */
		/* 821C0EB0h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C0EB0h case    9:*/		return 0x821C0EB4;
	}
	return 0x821C0EB4;
} // Block from 821C0E8Ch-821C0EB4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C0EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0EB4);
		  /* 821C0EB4h */ case    0:  		/* nop */
		/* 821C0EB4h case    0:*/		cpu::op::nop();
		/* 821C0EB4h case    0:*/		return 0x821C0EB8;
	}
	return 0x821C0EB8;
} // Block from 821C0EB4h-821C0EB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C0EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0EB8);
		  /* 821C0EB8h */ case    0:  		/* mfspr R12, LR */
		/* 821C0EB8h case    0:*/		regs.R12 = regs.LR;
		/* 821C0EB8h case    0:*/		return 0x821C0EBC;
		  /* 821C0EBCh */ case    1:  		/* bl -1244272 */
		/* 821C0EBCh case    1:*/		regs.LR = 0x821C0EC0; return 0x8209124C;
		/* 821C0EBCh case    1:*/		return 0x821C0EC0;
		  /* 821C0EC0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C0EC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C0EC0h case    2:*/		return 0x821C0EC4;
		  /* 821C0EC4h */ case    3:  		/* addi R11, R4, 23 */
		/* 821C0EC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x17);
		/* 821C0EC4h case    3:*/		return 0x821C0EC8;
		  /* 821C0EC8h */ case    4:  		/* mr R26, R3 */
		/* 821C0EC8h case    4:*/		regs.R26 = regs.R3;
		/* 821C0EC8h case    4:*/		return 0x821C0ECC;
		  /* 821C0ECCh */ case    5:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 821C0ECCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 821C0ECCh case    5:*/		return 0x821C0ED0;
		  /* 821C0ED0h */ case    6:  		/* mr R31, R4 */
		/* 821C0ED0h case    6:*/		regs.R31 = regs.R4;
		/* 821C0ED0h case    6:*/		return 0x821C0ED4;
		  /* 821C0ED4h */ case    7:  		/* mr R25, R6 */
		/* 821C0ED4h case    7:*/		regs.R25 = regs.R6;
		/* 821C0ED4h case    7:*/		return 0x821C0ED8;
		  /* 821C0ED8h */ case    8:  		/* lwzx R29, <#[R28 + R5]> */
		/* 821C0ED8h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + regs.R5 + 0x00000000) );
		/* 821C0ED8h case    8:*/		return 0x821C0EDC;
		  /* 821C0EDCh */ case    9:  		/* cmplwi CR6, R29, 0 */
		/* 821C0EDCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C0EDCh case    9:*/		return 0x821C0EE0;
		  /* 821C0EE0h */ case   10:  		/* bc 12, CR6_EQ, 76 */
		/* 821C0EE0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C0F2C;  }
		/* 821C0EE0h case   10:*/		return 0x821C0EE4;
		  /* 821C0EE4h */ case   11:  		/* lwzx R27, <#[R28 + R3]> */
		/* 821C0EE4h case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + regs.R3 + 0x00000000) );
		/* 821C0EE4h case   11:*/		return 0x821C0EE8;
		  /* 821C0EE8h */ case   12:  		/* cmplwi CR6, R27, 0 */
		/* 821C0EE8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C0EE8h case   12:*/		return 0x821C0EEC;
		  /* 821C0EECh */ case   13:  		/* bc 12, CR6_EQ, 60 */
		/* 821C0EECh case   13:*/		if ( regs.CR[6].eq ) { return 0x821C0F28;  }
		/* 821C0EECh case   13:*/		return 0x821C0EF0;
		  /* 821C0EF0h */ case   14:  		/* mr R3, R29 */
		/* 821C0EF0h case   14:*/		regs.R3 = regs.R29;
		/* 821C0EF0h case   14:*/		return 0x821C0EF4;
		  /* 821C0EF4h */ case   15:  		/* mr R30, R29 */
		/* 821C0EF4h case   15:*/		regs.R30 = regs.R29;
		/* 821C0EF4h case   15:*/		return 0x821C0EF8;
		  /* 821C0EF8h */ case   16:  		/* b 12 */
		/* 821C0EF8h case   16:*/		return 0x821C0F04;
		/* 821C0EF8h case   16:*/		return 0x821C0EFC;
		  /* 821C0EFCh */ case   17:  		/* lwz R30, <#[R3 + 12]> */
		/* 821C0EFCh case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C0EFCh case   17:*/		return 0x821C0F00;
		  /* 821C0F00h */ case   18:  		/* mr R3, R30 */
		/* 821C0F00h case   18:*/		regs.R3 = regs.R30;
		/* 821C0F00h case   18:*/		return 0x821C0F04;
	}
	return 0x821C0F04;
} // Block from 821C0EB8h-821C0F04h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C0F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0F04);
		  /* 821C0F04h */ case    0:  		/* mr R4, R31 */
		/* 821C0F04h case    0:*/		regs.R4 = regs.R31;
		/* 821C0F04h case    0:*/		return 0x821C0F08;
		  /* 821C0F08h */ case    1:  		/* bl -297968 */
		/* 821C0F08h case    1:*/		regs.LR = 0x821C0F0C; return 0x82178318;
		/* 821C0F08h case    1:*/		return 0x821C0F0C;
		  /* 821C0F0Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821C0F0Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821C0F0Ch case    2:*/		return 0x821C0F10;
		  /* 821C0F10h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821C0F10h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C0EFC;  }
		/* 821C0F10h case    3:*/		return 0x821C0F14;
		  /* 821C0F14h */ case    4:  		/* mr R6, R25 */
		/* 821C0F14h case    4:*/		regs.R6 = regs.R25;
		/* 821C0F14h case    4:*/		return 0x821C0F18;
		  /* 821C0F18h */ case    5:  		/* mr R5, R27 */
		/* 821C0F18h case    5:*/		regs.R5 = regs.R27;
		/* 821C0F18h case    5:*/		return 0x821C0F1C;
		  /* 821C0F1Ch */ case    6:  		/* mr R4, R31 */
		/* 821C0F1Ch case    6:*/		regs.R4 = regs.R31;
		/* 821C0F1Ch case    6:*/		return 0x821C0F20;
		  /* 821C0F20h */ case    7:  		/* mr R3, R30 */
		/* 821C0F20h case    7:*/		regs.R3 = regs.R30;
		/* 821C0F20h case    7:*/		return 0x821C0F24;
		  /* 821C0F24h */ case    8:  		/* bl -296364 */
		/* 821C0F24h case    8:*/		regs.LR = 0x821C0F28; return 0x82178978;
		/* 821C0F24h case    8:*/		return 0x821C0F28;
	}
	return 0x821C0F28;
} // Block from 821C0F04h-821C0F28h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C0F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0F28);
		  /* 821C0F28h */ case    0:  		/* stwx R29, <#[R28 + R26]> */
		/* 821C0F28h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R28 + regs.R26 + 0x00000000) );
		/* 821C0F28h case    0:*/		return 0x821C0F2C;
	}
	return 0x821C0F2C;
} // Block from 821C0F28h-821C0F2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C0F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0F2C);
		  /* 821C0F2Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 821C0F2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C0F2Ch case    0:*/		return 0x821C0F30;
		  /* 821C0F30h */ case    1:  		/* b -1244308 */
		/* 821C0F30h case    1:*/		return 0x8209129C;
		/* 821C0F30h case    1:*/		return 0x821C0F34;
		  /* 821C0F34h */ case    2:  		/* nop */
		/* 821C0F34h case    2:*/		cpu::op::nop();
		/* 821C0F34h case    2:*/		return 0x821C0F38;
	}
	return 0x821C0F38;
} // Block from 821C0F2Ch-821C0F38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C0F38h
// Function '?FindArrayLoadInstructions@Compiler@D3DXShader@@AAAXPAVInstruction@2@0PAUInductionVariable@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0F38);
		  /* 821C0F38h */ case    0:  		/* mfspr R12, LR */
		/* 821C0F38h case    0:*/		regs.R12 = regs.LR;
		/* 821C0F38h case    0:*/		return 0x821C0F3C;
		  /* 821C0F3Ch */ case    1:  		/* bl -1244392 */
		/* 821C0F3Ch case    1:*/		regs.LR = 0x821C0F40; return 0x82091254;
		/* 821C0F3Ch case    1:*/		return 0x821C0F40;
		  /* 821C0F40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C0F40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C0F40h case    2:*/		return 0x821C0F44;
		  /* 821C0F44h */ case    3:  		/* mr R29, R5 */
		/* 821C0F44h case    3:*/		regs.R29 = regs.R5;
		/* 821C0F44h case    3:*/		return 0x821C0F48;
		  /* 821C0F48h */ case    4:  		/* mr R27, R6 */
		/* 821C0F48h case    4:*/		regs.R27 = regs.R6;
		/* 821C0F48h case    4:*/		return 0x821C0F4C;
		  /* 821C0F4Ch */ case    5:  		/* li R8, 4 */
		/* 821C0F4Ch case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C0F4Ch case    5:*/		return 0x821C0F50;
		  /* 821C0F50h */ case    6:  		/* li R7, 2 */
		/* 821C0F50h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C0F50h case    6:*/		return 0x821C0F54;
		  /* 821C0F54h */ case    7:  		/* li R6, 1 */
		/* 821C0F54h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C0F54h case    7:*/		return 0x821C0F58;
		  /* 821C0F58h */ case    8:  		/* li R5, 0 */
		/* 821C0F58h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C0F58h case    8:*/		return 0x821C0F5C;
		  /* 821C0F5Ch */ case    9:  		/* mr R28, R3 */
		/* 821C0F5Ch case    9:*/		regs.R28 = regs.R3;
		/* 821C0F5Ch case    9:*/		return 0x821C0F60;
		  /* 821C0F60h */ case   10:  		/* mr R30, R4 */
		/* 821C0F60h case   10:*/		regs.R30 = regs.R4;
		/* 821C0F60h case   10:*/		return 0x821C0F64;
		  /* 821C0F64h */ case   11:  		/* bl 408116 */
		/* 821C0F64h case   11:*/		regs.LR = 0x821C0F68; return 0x82224998;
		/* 821C0F64h case   11:*/		return 0x821C0F68;
		  /* 821C0F68h */ case   12:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C0F68h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C0F68h case   12:*/		return 0x821C0F6C;
		  /* 821C0F6Ch */ case   13:  		/* mr R31, R3 */
		/* 821C0F6Ch case   13:*/		regs.R31 = regs.R3;
		/* 821C0F6Ch case   13:*/		return 0x821C0F70;
		  /* 821C0F70h */ case   14:  		/* mr R4, R29 */
		/* 821C0F70h case   14:*/		regs.R4 = regs.R29;
		/* 821C0F70h case   14:*/		return 0x821C0F74;
		  /* 821C0F74h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C0F74h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C0F74h case   15:*/		return 0x821C0F78;
		  /* 821C0F78h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821C0F78h case   16:*/		if ( regs.CR[6].eq ) { return 0x821C0F8C;  }
		/* 821C0F78h case   16:*/		return 0x821C0F7C;
		  /* 821C0F7Ch */ case   17:  		/* mr R3, R28 */
		/* 821C0F7Ch case   17:*/		regs.R3 = regs.R28;
		/* 821C0F7Ch case   17:*/		return 0x821C0F80;
		  /* 821C0F80h */ case   18:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C0F80h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C0F80h case   18:*/		return 0x821C0F84;
		  /* 821C0F84h */ case   19:  		/* bl -327316 */
		/* 821C0F84h case   19:*/		regs.LR = 0x821C0F88; return 0x821710F0;
		/* 821C0F84h case   19:*/		return 0x821C0F88;
		  /* 821C0F88h */ case   20:  		/* mr R4, R3 */
		/* 821C0F88h case   20:*/		regs.R4 = regs.R3;
		/* 821C0F88h case   20:*/		return 0x821C0F8C;
	}
	return 0x821C0F8C;
} // Block from 821C0F38h-821C0F8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C0F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0F8C);
		  /* 821C0F8Ch */ case    0:  		/* mr R3, R31 */
		/* 821C0F8Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C0F8Ch case    0:*/		return 0x821C0F90;
		  /* 821C0F90h */ case    1:  		/* bl -298440 */
		/* 821C0F90h case    1:*/		regs.LR = 0x821C0F94; return 0x821781C8;
		/* 821C0F90h case    1:*/		return 0x821C0F94;
		  /* 821C0F94h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C0F94h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C0F94h case    2:*/		return 0x821C0F98;
		  /* 821C0F98h */ case    3:  		/* lwz R11, <#[R27 + 16]> */
		/* 821C0F98h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821C0F98h case    3:*/		return 0x821C0F9C;
		  /* 821C0F9Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C0F9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C0F9Ch case    4:*/		return 0x821C0FA0;
		  /* 821C0FA0h */ case    5:  		/* mr R4, R27 */
		/* 821C0FA0h case    5:*/		regs.R4 = regs.R27;
		/* 821C0FA0h case    5:*/		return 0x821C0FA4;
		  /* 821C0FA4h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C0FA4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C0FB8;  }
		/* 821C0FA4h case    6:*/		return 0x821C0FA8;
		  /* 821C0FA8h */ case    7:  		/* mr R3, R28 */
		/* 821C0FA8h case    7:*/		regs.R3 = regs.R28;
		/* 821C0FA8h case    7:*/		return 0x821C0FAC;
		  /* 821C0FACh */ case    8:  		/* lwz R5, <#[R27 + 12]> */
		/* 821C0FACh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C0FACh case    8:*/		return 0x821C0FB0;
		  /* 821C0FB0h */ case    9:  		/* bl -327360 */
		/* 821C0FB0h case    9:*/		regs.LR = 0x821C0FB4; return 0x821710F0;
		/* 821C0FB0h case    9:*/		return 0x821C0FB4;
		  /* 821C0FB4h */ case   10:  		/* mr R4, R3 */
		/* 821C0FB4h case   10:*/		regs.R4 = regs.R3;
		/* 821C0FB4h case   10:*/		return 0x821C0FB8;
	}
	return 0x821C0FB8;
} // Block from 821C0F8Ch-821C0FB8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C0FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C0FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C0FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C0FB8);
		  /* 821C0FB8h */ case    0:  		/* mr R3, R31 */
		/* 821C0FB8h case    0:*/		regs.R3 = regs.R31;
		/* 821C0FB8h case    0:*/		return 0x821C0FBC;
		  /* 821C0FBCh */ case    1:  		/* bl -298484 */
		/* 821C0FBCh case    1:*/		regs.LR = 0x821C0FC0; return 0x821781C8;
		/* 821C0FBCh case    1:*/		return 0x821C0FC0;
		  /* 821C0FC0h */ case    2:  		/* lwz R9, <#[R31 + 44]> */
		/* 821C0FC0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C0FC0h case    2:*/		return 0x821C0FC4;
		  /* 821C0FC4h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C0FC4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C0FC4h case    3:*/		return 0x821C0FC8;
		  /* 821C0FC8h */ case    4:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C0FC8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C0FC8h case    4:*/		return 0x821C0FCC;
		  /* 821C0FCCh */ case    5:  		/* lwz R8, <#[R31 + 8]> */
		/* 821C0FCCh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C0FCCh case    5:*/		return 0x821C0FD0;
		  /* 821C0FD0h */ case    6:  		/* addi R10, R30, 24 */
		/* 821C0FD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x18);
		/* 821C0FD0h case    6:*/		return 0x821C0FD4;
		  /* 821C0FD4h */ case    7:  		/* addi R11, R11, 36 */
		/* 821C0FD4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C0FD4h case    7:*/		return 0x821C0FD8;
		  /* 821C0FD8h */ case    8:  		/* addi R10, R10, -36 */
		/* 821C0FD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821C0FD8h case    8:*/		return 0x821C0FDC;
		  /* 821C0FDCh */ case    9:  		/* lwz R9, <#[R9]> */
		/* 821C0FDCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821C0FDCh case    9:*/		return 0x821C0FE0;
		  /* 821C0FE0h */ case   10:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821C0FE0h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821C0FE0h case   10:*/		return 0x821C0FE4;
		  /* 821C0FE4h */ case   11:  		/* rlwimi R8, R9, 14, 15, 17 */
		/* 821C0FE4h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R8,regs.R9);
		/* 821C0FE4h case   11:*/		return 0x821C0FE8;
		  /* 821C0FE8h */ case   12:  		/* addi R9, R11, -36 */
		/* 821C0FE8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821C0FE8h case   12:*/		return 0x821C0FEC;
		  /* 821C0FECh */ case   13:  		/* stw R8, <#[R31 + 8]> */
		/* 821C0FECh case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C0FECh case   13:*/		return 0x821C0FF0;
		  /* 821C0FF0h */ case   14:  		/* ori R8, R10, 1 */
		/* 821C0FF0h case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C0FF0h case   14:*/		return 0x821C0FF4;
		  /* 821C0FF4h */ case   15:  		/* lwz R7, <#[R30 + 24]> */
		/* 821C0FF4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000018) );
		/* 821C0FF4h case   15:*/		return 0x821C0FF8;
		  /* 821C0FF8h */ case   16:  		/* addi R10, R11, 4 */
		/* 821C0FF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C0FF8h case   16:*/		return 0x821C0FFC;
		  /* 821C0FFCh */ case   17:  		/* stw R7, <#[R11]> */
		/* 821C0FFCh case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C0FFCh case   17:*/		return 0x821C1000;
		  /* 821C1000h */ case   18:  		/* mr R3, R31 */
		/* 821C1000h case   18:*/		regs.R3 = regs.R31;
		/* 821C1000h case   18:*/		return 0x821C1004;
		  /* 821C1004h */ case   19:  		/* lwz R7, <#[R30 + 24]> */
		/* 821C1004h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000018) );
		/* 821C1004h case   19:*/		return 0x821C1008;
		  /* 821C1008h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C1008h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C1008h case   20:*/		return 0x821C100C;
		  /* 821C100Ch */ case   21:  		/* stw R9, <#[R7]> */
		/* 821C100Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821C100Ch case   21:*/		return 0x821C1010;
		  /* 821C1010h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 821C1010h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C1010h case   22:*/		return 0x821C1014;
		  /* 821C1014h */ case   23:  		/* stw R10, <#[R30 + 24]> */
		/* 821C1014h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 821C1014h case   23:*/		return 0x821C1018;
		  /* 821C1018h */ case   24:  		/* addi R1, R1, 128 */
		/* 821C1018h case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1018h case   24:*/		return 0x821C101C;
		  /* 821C101Ch */ case   25:  		/* b -1244536 */
		/* 821C101Ch case   25:*/		return 0x820912A4;
		/* 821C101Ch case   25:*/		return 0x821C1020;
	}
	return 0x821C1020;
} // Block from 821C0FB8h-821C1020h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C1020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1020);
		  /* 821C1020h */ case    0:  		/* mfspr R12, LR */
		/* 821C1020h case    0:*/		regs.R12 = regs.LR;
		/* 821C1020h case    0:*/		return 0x821C1024;
		  /* 821C1024h */ case    1:  		/* bl -1244624 */
		/* 821C1024h case    1:*/		regs.LR = 0x821C1028; return 0x82091254;
		/* 821C1024h case    1:*/		return 0x821C1028;
		  /* 821C1028h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1028h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1028h case    2:*/		return 0x821C102C;
		  /* 821C102Ch */ case    3:  		/* mr R29, R5 */
		/* 821C102Ch case    3:*/		regs.R29 = regs.R5;
		/* 821C102Ch case    3:*/		return 0x821C1030;
		  /* 821C1030h */ case    4:  		/* mr R30, R6 */
		/* 821C1030h case    4:*/		regs.R30 = regs.R6;
		/* 821C1030h case    4:*/		return 0x821C1034;
		  /* 821C1034h */ case    5:  		/* mr R27, R7 */
		/* 821C1034h case    5:*/		regs.R27 = regs.R7;
		/* 821C1034h case    5:*/		return 0x821C1038;
		  /* 821C1038h */ case    6:  		/* li R8, 4 */
		/* 821C1038h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1038h case    6:*/		return 0x821C103C;
		  /* 821C103Ch */ case    7:  		/* li R7, 2 */
		/* 821C103Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C103Ch case    7:*/		return 0x821C1040;
		  /* 821C1040h */ case    8:  		/* li R6, 1 */
		/* 821C1040h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C1040h case    8:*/		return 0x821C1044;
		  /* 821C1044h */ case    9:  		/* li R5, 0 */
		/* 821C1044h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1044h case    9:*/		return 0x821C1048;
		  /* 821C1048h */ case   10:  		/* mr R28, R3 */
		/* 821C1048h case   10:*/		regs.R28 = regs.R3;
		/* 821C1048h case   10:*/		return 0x821C104C;
		  /* 821C104Ch */ case   11:  		/* bl 407884 */
		/* 821C104Ch case   11:*/		regs.LR = 0x821C1050; return 0x82224998;
		/* 821C104Ch case   11:*/		return 0x821C1050;
		  /* 821C1050h */ case   12:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1050h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1050h case   12:*/		return 0x821C1054;
		  /* 821C1054h */ case   13:  		/* mr R31, R3 */
		/* 821C1054h case   13:*/		regs.R31 = regs.R3;
		/* 821C1054h case   13:*/		return 0x821C1058;
		  /* 821C1058h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821C1058h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1058h case   14:*/		return 0x821C105C;
		  /* 821C105Ch */ case   15:  		/* mr R4, R30 */
		/* 821C105Ch case   15:*/		regs.R4 = regs.R30;
		/* 821C105Ch case   15:*/		return 0x821C1060;
		  /* 821C1060h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1060h case   16:*/		if ( regs.CR[6].eq ) { return 0x821C1074;  }
		/* 821C1060h case   16:*/		return 0x821C1064;
		  /* 821C1064h */ case   17:  		/* mr R3, R28 */
		/* 821C1064h case   17:*/		regs.R3 = regs.R28;
		/* 821C1064h case   17:*/		return 0x821C1068;
		  /* 821C1068h */ case   18:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1068h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1068h case   18:*/		return 0x821C106C;
		  /* 821C106Ch */ case   19:  		/* bl -327548 */
		/* 821C106Ch case   19:*/		regs.LR = 0x821C1070; return 0x821710F0;
		/* 821C106Ch case   19:*/		return 0x821C1070;
		  /* 821C1070h */ case   20:  		/* mr R4, R3 */
		/* 821C1070h case   20:*/		regs.R4 = regs.R3;
		/* 821C1070h case   20:*/		return 0x821C1074;
	}
	return 0x821C1074;
} // Block from 821C1020h-821C1074h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C1074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1074);
		  /* 821C1074h */ case    0:  		/* mr R3, R31 */
		/* 821C1074h case    0:*/		regs.R3 = regs.R31;
		/* 821C1074h case    0:*/		return 0x821C1078;
		  /* 821C1078h */ case    1:  		/* bl -298672 */
		/* 821C1078h case    1:*/		regs.LR = 0x821C107C; return 0x821781C8;
		/* 821C1078h case    1:*/		return 0x821C107C;
		  /* 821C107Ch */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C107Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C107Ch case    2:*/		return 0x821C1080;
		  /* 821C1080h */ case    3:  		/* lwz R11, <#[R27 + 16]> */
		/* 821C1080h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821C1080h case    3:*/		return 0x821C1084;
		  /* 821C1084h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C1084h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1084h case    4:*/		return 0x821C1088;
		  /* 821C1088h */ case    5:  		/* mr R4, R27 */
		/* 821C1088h case    5:*/		regs.R4 = regs.R27;
		/* 821C1088h case    5:*/		return 0x821C108C;
		  /* 821C108Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C108Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C10A0;  }
		/* 821C108Ch case    6:*/		return 0x821C1090;
		  /* 821C1090h */ case    7:  		/* mr R3, R28 */
		/* 821C1090h case    7:*/		regs.R3 = regs.R28;
		/* 821C1090h case    7:*/		return 0x821C1094;
		  /* 821C1094h */ case    8:  		/* lwz R5, <#[R27 + 12]> */
		/* 821C1094h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C1094h case    8:*/		return 0x821C1098;
		  /* 821C1098h */ case    9:  		/* bl -327592 */
		/* 821C1098h case    9:*/		regs.LR = 0x821C109C; return 0x821710F0;
		/* 821C1098h case    9:*/		return 0x821C109C;
		  /* 821C109Ch */ case   10:  		/* mr R4, R3 */
		/* 821C109Ch case   10:*/		regs.R4 = regs.R3;
		/* 821C109Ch case   10:*/		return 0x821C10A0;
	}
	return 0x821C10A0;
} // Block from 821C1074h-821C10A0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C10A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C10A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C10A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C10A0);
		  /* 821C10A0h */ case    0:  		/* mr R3, R31 */
		/* 821C10A0h case    0:*/		regs.R3 = regs.R31;
		/* 821C10A0h case    0:*/		return 0x821C10A4;
		  /* 821C10A4h */ case    1:  		/* bl -298716 */
		/* 821C10A4h case    1:*/		regs.LR = 0x821C10A8; return 0x821781C8;
		/* 821C10A4h case    1:*/		return 0x821C10A8;
		  /* 821C10A8h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C10A8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C10A8h case    2:*/		return 0x821C10AC;
		  /* 821C10ACh */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C10ACh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C10ACh case    3:*/		return 0x821C10B0;
		  /* 821C10B0h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821C10B0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C10B0h case    4:*/		return 0x821C10B4;
		  /* 821C10B4h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C10B4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C10B4h case    5:*/		return 0x821C10B8;
		  /* 821C10B8h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 821C10B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C10B8h case    6:*/		return 0x821C10BC;
		  /* 821C10BCh */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C10BCh case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C10BCh case    7:*/		return 0x821C10C0;
		  /* 821C10C0h */ case    8:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C10C0h case    8:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C10C0h case    8:*/		return 0x821C10C4;
		  /* 821C10C4h */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 821C10C4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C10C4h case    9:*/		return 0x821C10C8;
		  /* 821C10C8h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 821C10C8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C1100;  }
		/* 821C10C8h case   10:*/		return 0x821C10CC;
		  /* 821C10CCh */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C10CCh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C10CCh case   11:*/		return 0x821C10D0;
		  /* 821C10D0h */ case   12:  		/* lwz R9, <#[R29]> */
		/* 821C10D0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821C10D0h case   12:*/		return 0x821C10D4;
		  /* 821C10D4h */ case   13:  		/* addi R10, R29, -36 */
		/* 821C10D4h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFDC);
		/* 821C10D4h case   13:*/		return 0x821C10D8;
		  /* 821C10D8h */ case   14:  		/* addi R11, R11, 36 */
		/* 821C10D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C10D8h case   14:*/		return 0x821C10DC;
		  /* 821C10DCh */ case   15:  		/* ori R8, R10, 1 */
		/* 821C10DCh case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C10DCh case   15:*/		return 0x821C10E0;
		  /* 821C10E0h */ case   16:  		/* addi R7, R11, -36 */
		/* 821C10E0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821C10E0h case   16:*/		return 0x821C10E4;
		  /* 821C10E4h */ case   17:  		/* addi R10, R11, 4 */
		/* 821C10E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C10E4h case   17:*/		return 0x821C10E8;
		  /* 821C10E8h */ case   18:  		/* stw R9, <#[R11]> */
		/* 821C10E8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C10E8h case   18:*/		return 0x821C10EC;
		  /* 821C10ECh */ case   19:  		/* lwz R9, <#[R29]> */
		/* 821C10ECh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821C10ECh case   19:*/		return 0x821C10F0;
		  /* 821C10F0h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821C10F0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821C10F0h case   20:*/		return 0x821C10F4;
		  /* 821C10F4h */ case   21:  		/* stw R7, <#[R9]> */
		/* 821C10F4h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C10F4h case   21:*/		return 0x821C10F8;
		  /* 821C10F8h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 821C10F8h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C10F8h case   22:*/		return 0x821C10FC;
		  /* 821C10FCh */ case   23:  		/* stw R10, <#[R29]> */
		/* 821C10FCh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C10FCh case   23:*/		return 0x821C1100;
	}
	return 0x821C1100;
} // Block from 821C10A0h-821C1100h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C1100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1100);
		  /* 821C1100h */ case    0:  		/* mr R3, R31 */
		/* 821C1100h case    0:*/		regs.R3 = regs.R31;
		/* 821C1100h case    0:*/		return 0x821C1104;
		  /* 821C1104h */ case    1:  		/* addi R1, R1, 128 */
		/* 821C1104h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1104h case    1:*/		return 0x821C1108;
		  /* 821C1108h */ case    2:  		/* b -1244772 */
		/* 821C1108h case    2:*/		return 0x820912A4;
		/* 821C1108h case    2:*/		return 0x821C110C;
		  /* 821C110Ch */ case    3:  		/* nop */
		/* 821C110Ch case    3:*/		cpu::op::nop();
		/* 821C110Ch case    3:*/		return 0x821C1110;
	}
	return 0x821C1110;
} // Block from 821C1100h-821C1110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C1110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1110);
		  /* 821C1110h */ case    0:  		/* mfspr R12, LR */
		/* 821C1110h case    0:*/		regs.R12 = regs.LR;
		/* 821C1110h case    0:*/		return 0x821C1114;
		  /* 821C1114h */ case    1:  		/* bl -1244868 */
		/* 821C1114h case    1:*/		regs.LR = 0x821C1118; return 0x82091250;
		/* 821C1114h case    1:*/		return 0x821C1118;
		  /* 821C1118h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C1118h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C1118h case    2:*/		return 0x821C111C;
		  /* 821C111Ch */ case    3:  		/* mr R26, R4 */
		/* 821C111Ch case    3:*/		regs.R26 = regs.R4;
		/* 821C111Ch case    3:*/		return 0x821C1120;
		  /* 821C1120h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1120h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1120h case    4:*/		return 0x821C1124;
		  /* 821C1124h */ case    5:  		/* mr R27, R5 */
		/* 821C1124h case    5:*/		regs.R27 = regs.R5;
		/* 821C1124h case    5:*/		return 0x821C1128;
		  /* 821C1128h */ case    6:  		/* mr R30, R6 */
		/* 821C1128h case    6:*/		regs.R30 = regs.R6;
		/* 821C1128h case    6:*/		return 0x821C112C;
		  /* 821C112Ch */ case    7:  		/* mr R28, R7 */
		/* 821C112Ch case    7:*/		regs.R28 = regs.R7;
		/* 821C112Ch case    7:*/		return 0x821C1130;
		  /* 821C1130h */ case    8:  		/* li R8, 4 */
		/* 821C1130h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1130h case    8:*/		return 0x821C1134;
		  /* 821C1134h */ case    9:  		/* li R7, 2 */
		/* 821C1134h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C1134h case    9:*/		return 0x821C1138;
		  /* 821C1138h */ case   10:  		/* li R6, 2 */
		/* 821C1138h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C1138h case   10:*/		return 0x821C113C;
		  /* 821C113Ch */ case   11:  		/* li R5, 0 */
		/* 821C113Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C113Ch case   11:*/		return 0x821C1140;
		  /* 821C1140h */ case   12:  		/* mr R29, R3 */
		/* 821C1140h case   12:*/		regs.R29 = regs.R3;
		/* 821C1140h case   12:*/		return 0x821C1144;
		  /* 821C1144h */ case   13:  		/* bl 407636 */
		/* 821C1144h case   13:*/		regs.LR = 0x821C1148; return 0x82224998;
		/* 821C1144h case   13:*/		return 0x821C1148;
		  /* 821C1148h */ case   14:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1148h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1148h case   14:*/		return 0x821C114C;
		  /* 821C114Ch */ case   15:  		/* mr R31, R3 */
		/* 821C114Ch case   15:*/		regs.R31 = regs.R3;
		/* 821C114Ch case   15:*/		return 0x821C1150;
		  /* 821C1150h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C1150h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1150h case   16:*/		return 0x821C1154;
		  /* 821C1154h */ case   17:  		/* mr R4, R30 */
		/* 821C1154h case   17:*/		regs.R4 = regs.R30;
		/* 821C1154h case   17:*/		return 0x821C1158;
		  /* 821C1158h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1158h case   18:*/		if ( regs.CR[6].eq ) { return 0x821C116C;  }
		/* 821C1158h case   18:*/		return 0x821C115C;
		  /* 821C115Ch */ case   19:  		/* mr R3, R29 */
		/* 821C115Ch case   19:*/		regs.R3 = regs.R29;
		/* 821C115Ch case   19:*/		return 0x821C1160;
		  /* 821C1160h */ case   20:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1160h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1160h case   20:*/		return 0x821C1164;
		  /* 821C1164h */ case   21:  		/* bl -327796 */
		/* 821C1164h case   21:*/		regs.LR = 0x821C1168; return 0x821710F0;
		/* 821C1164h case   21:*/		return 0x821C1168;
		  /* 821C1168h */ case   22:  		/* mr R4, R3 */
		/* 821C1168h case   22:*/		regs.R4 = regs.R3;
		/* 821C1168h case   22:*/		return 0x821C116C;
	}
	return 0x821C116C;
} // Block from 821C1110h-821C116Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C116Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C116C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C116C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C116C);
		  /* 821C116Ch */ case    0:  		/* mr R3, R31 */
		/* 821C116Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C116Ch case    0:*/		return 0x821C1170;
		  /* 821C1170h */ case    1:  		/* bl -298920 */
		/* 821C1170h case    1:*/		regs.LR = 0x821C1174; return 0x821781C8;
		/* 821C1170h case    1:*/		return 0x821C1174;
		  /* 821C1174h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1174h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1174h case    2:*/		return 0x821C1178;
		  /* 821C1178h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C1178h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C1178h case    3:*/		return 0x821C117C;
		  /* 821C117Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C117Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C117Ch case    4:*/		return 0x821C1180;
		  /* 821C1180h */ case    5:  		/* mr R4, R28 */
		/* 821C1180h case    5:*/		regs.R4 = regs.R28;
		/* 821C1180h case    5:*/		return 0x821C1184;
		  /* 821C1184h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1184h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1198;  }
		/* 821C1184h case    6:*/		return 0x821C1188;
		  /* 821C1188h */ case    7:  		/* mr R3, R29 */
		/* 821C1188h case    7:*/		regs.R3 = regs.R29;
		/* 821C1188h case    7:*/		return 0x821C118C;
		  /* 821C118Ch */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C118Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C118Ch case    8:*/		return 0x821C1190;
		  /* 821C1190h */ case    9:  		/* bl -327840 */
		/* 821C1190h case    9:*/		regs.LR = 0x821C1194; return 0x821710F0;
		/* 821C1190h case    9:*/		return 0x821C1194;
		  /* 821C1194h */ case   10:  		/* mr R4, R3 */
		/* 821C1194h case   10:*/		regs.R4 = regs.R3;
		/* 821C1194h case   10:*/		return 0x821C1198;
	}
	return 0x821C1198;
} // Block from 821C116Ch-821C1198h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1198);
		  /* 821C1198h */ case    0:  		/* mr R3, R31 */
		/* 821C1198h case    0:*/		regs.R3 = regs.R31;
		/* 821C1198h case    0:*/		return 0x821C119C;
		  /* 821C119Ch */ case    1:  		/* bl -298964 */
		/* 821C119Ch case    1:*/		regs.LR = 0x821C11A0; return 0x821781C8;
		/* 821C119Ch case    1:*/		return 0x821C11A0;
		  /* 821C11A0h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C11A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C11A0h case    2:*/		return 0x821C11A4;
		  /* 821C11A4h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C11A4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C11A4h case    3:*/		return 0x821C11A8;
		  /* 821C11A8h */ case    4:  		/* mr R6, R27 */
		/* 821C11A8h case    4:*/		regs.R6 = regs.R27;
		/* 821C11A8h case    4:*/		return 0x821C11AC;
		  /* 821C11ACh */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C11ACh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C11ACh case    5:*/		return 0x821C11B0;
		  /* 821C11B0h */ case    6:  		/* mr R5, R26 */
		/* 821C11B0h case    6:*/		regs.R5 = regs.R26;
		/* 821C11B0h case    6:*/		return 0x821C11B4;
		  /* 821C11B4h */ case    7:  		/* mr R4, R31 */
		/* 821C11B4h case    7:*/		regs.R4 = regs.R31;
		/* 821C11B4h case    7:*/		return 0x821C11B8;
		  /* 821C11B8h */ case    8:  		/* mr R3, R29 */
		/* 821C11B8h case    8:*/		regs.R3 = regs.R29;
		/* 821C11B8h case    8:*/		return 0x821C11BC;
		  /* 821C11BCh */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C11BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C11BCh case    9:*/		return 0x821C11C0;
		  /* 821C11C0h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C11C0h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C11C0h case   10:*/		return 0x821C11C4;
		  /* 821C11C4h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C11C4h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C11C4h case   11:*/		return 0x821C11C8;
		  /* 821C11C8h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C11C8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C11C8h case   12:*/		return 0x821C11CC;
		  /* 821C11CCh */ case   13:  		/* bl -344868 */
		/* 821C11CCh case   13:*/		regs.LR = 0x821C11D0; return 0x8216CEA8;
		/* 821C11CCh case   13:*/		return 0x821C11D0;
		  /* 821C11D0h */ case   14:  		/* mr R3, R31 */
		/* 821C11D0h case   14:*/		regs.R3 = regs.R31;
		/* 821C11D0h case   14:*/		return 0x821C11D4;
		  /* 821C11D4h */ case   15:  		/* addi R1, R1, 144 */
		/* 821C11D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C11D4h case   15:*/		return 0x821C11D8;
		  /* 821C11D8h */ case   16:  		/* b -1244984 */
		/* 821C11D8h case   16:*/		return 0x820912A0;
		/* 821C11D8h case   16:*/		return 0x821C11DC;
		  /* 821C11DCh */ case   17:  		/* nop */
		/* 821C11DCh case   17:*/		cpu::op::nop();
		/* 821C11DCh case   17:*/		return 0x821C11E0;
	}
	return 0x821C11E0;
} // Block from 821C1198h-821C11E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C11E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C11E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C11E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C11E0);
		  /* 821C11E0h */ case    0:  		/* mfspr R12, LR */
		/* 821C11E0h case    0:*/		regs.R12 = regs.LR;
		/* 821C11E0h case    0:*/		return 0x821C11E4;
		  /* 821C11E4h */ case    1:  		/* bl -1245072 */
		/* 821C11E4h case    1:*/		regs.LR = 0x821C11E8; return 0x82091254;
		/* 821C11E4h case    1:*/		return 0x821C11E8;
		  /* 821C11E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C11E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C11E8h case    2:*/		return 0x821C11EC;
		  /* 821C11ECh */ case    3:  		/* mr R29, R5 */
		/* 821C11ECh case    3:*/		regs.R29 = regs.R5;
		/* 821C11ECh case    3:*/		return 0x821C11F0;
		  /* 821C11F0h */ case    4:  		/* mr R30, R6 */
		/* 821C11F0h case    4:*/		regs.R30 = regs.R6;
		/* 821C11F0h case    4:*/		return 0x821C11F4;
		  /* 821C11F4h */ case    5:  		/* mr R27, R7 */
		/* 821C11F4h case    5:*/		regs.R27 = regs.R7;
		/* 821C11F4h case    5:*/		return 0x821C11F8;
		  /* 821C11F8h */ case    6:  		/* li R8, 4 */
		/* 821C11F8h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C11F8h case    6:*/		return 0x821C11FC;
		  /* 821C11FCh */ case    7:  		/* li R7, 2 */
		/* 821C11FCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C11FCh case    7:*/		return 0x821C1200;
		  /* 821C1200h */ case    8:  		/* li R6, 6 */
		/* 821C1200h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x6);
		/* 821C1200h case    8:*/		return 0x821C1204;
		  /* 821C1204h */ case    9:  		/* li R5, 0 */
		/* 821C1204h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1204h case    9:*/		return 0x821C1208;
		  /* 821C1208h */ case   10:  		/* mr R28, R3 */
		/* 821C1208h case   10:*/		regs.R28 = regs.R3;
		/* 821C1208h case   10:*/		return 0x821C120C;
		  /* 821C120Ch */ case   11:  		/* bl 407436 */
		/* 821C120Ch case   11:*/		regs.LR = 0x821C1210; return 0x82224998;
		/* 821C120Ch case   11:*/		return 0x821C1210;
		  /* 821C1210h */ case   12:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1210h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1210h case   12:*/		return 0x821C1214;
		  /* 821C1214h */ case   13:  		/* mr R31, R3 */
		/* 821C1214h case   13:*/		regs.R31 = regs.R3;
		/* 821C1214h case   13:*/		return 0x821C1218;
		  /* 821C1218h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821C1218h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1218h case   14:*/		return 0x821C121C;
		  /* 821C121Ch */ case   15:  		/* mr R4, R30 */
		/* 821C121Ch case   15:*/		regs.R4 = regs.R30;
		/* 821C121Ch case   15:*/		return 0x821C1220;
		  /* 821C1220h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1220h case   16:*/		if ( regs.CR[6].eq ) { return 0x821C1234;  }
		/* 821C1220h case   16:*/		return 0x821C1224;
		  /* 821C1224h */ case   17:  		/* mr R3, R28 */
		/* 821C1224h case   17:*/		regs.R3 = regs.R28;
		/* 821C1224h case   17:*/		return 0x821C1228;
		  /* 821C1228h */ case   18:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1228h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1228h case   18:*/		return 0x821C122C;
		  /* 821C122Ch */ case   19:  		/* bl -327996 */
		/* 821C122Ch case   19:*/		regs.LR = 0x821C1230; return 0x821710F0;
		/* 821C122Ch case   19:*/		return 0x821C1230;
		  /* 821C1230h */ case   20:  		/* mr R4, R3 */
		/* 821C1230h case   20:*/		regs.R4 = regs.R3;
		/* 821C1230h case   20:*/		return 0x821C1234;
	}
	return 0x821C1234;
} // Block from 821C11E0h-821C1234h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C1234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1234);
		  /* 821C1234h */ case    0:  		/* mr R3, R31 */
		/* 821C1234h case    0:*/		regs.R3 = regs.R31;
		/* 821C1234h case    0:*/		return 0x821C1238;
		  /* 821C1238h */ case    1:  		/* bl -299120 */
		/* 821C1238h case    1:*/		regs.LR = 0x821C123C; return 0x821781C8;
		/* 821C1238h case    1:*/		return 0x821C123C;
		  /* 821C123Ch */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C123Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C123Ch case    2:*/		return 0x821C1240;
		  /* 821C1240h */ case    3:  		/* lwz R11, <#[R27 + 16]> */
		/* 821C1240h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821C1240h case    3:*/		return 0x821C1244;
		  /* 821C1244h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C1244h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1244h case    4:*/		return 0x821C1248;
		  /* 821C1248h */ case    5:  		/* mr R4, R27 */
		/* 821C1248h case    5:*/		regs.R4 = regs.R27;
		/* 821C1248h case    5:*/		return 0x821C124C;
		  /* 821C124Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C124Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1260;  }
		/* 821C124Ch case    6:*/		return 0x821C1250;
		  /* 821C1250h */ case    7:  		/* mr R3, R28 */
		/* 821C1250h case    7:*/		regs.R3 = regs.R28;
		/* 821C1250h case    7:*/		return 0x821C1254;
		  /* 821C1254h */ case    8:  		/* lwz R5, <#[R27 + 12]> */
		/* 821C1254h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C1254h case    8:*/		return 0x821C1258;
		  /* 821C1258h */ case    9:  		/* bl -328040 */
		/* 821C1258h case    9:*/		regs.LR = 0x821C125C; return 0x821710F0;
		/* 821C1258h case    9:*/		return 0x821C125C;
		  /* 821C125Ch */ case   10:  		/* mr R4, R3 */
		/* 821C125Ch case   10:*/		regs.R4 = regs.R3;
		/* 821C125Ch case   10:*/		return 0x821C1260;
	}
	return 0x821C1260;
} // Block from 821C1234h-821C1260h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1260);
		  /* 821C1260h */ case    0:  		/* mr R3, R31 */
		/* 821C1260h case    0:*/		regs.R3 = regs.R31;
		/* 821C1260h case    0:*/		return 0x821C1264;
		  /* 821C1264h */ case    1:  		/* bl -299164 */
		/* 821C1264h case    1:*/		regs.LR = 0x821C1268; return 0x821781C8;
		/* 821C1264h case    1:*/		return 0x821C1268;
		  /* 821C1268h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C1268h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1268h case    2:*/		return 0x821C126C;
		  /* 821C126Ch */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C126Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C126Ch case    3:*/		return 0x821C1270;
		  /* 821C1270h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821C1270h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C1270h case    4:*/		return 0x821C1274;
		  /* 821C1274h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C1274h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1274h case    5:*/		return 0x821C1278;
		  /* 821C1278h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 821C1278h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1278h case    6:*/		return 0x821C127C;
		  /* 821C127Ch */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C127Ch case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C127Ch case    7:*/		return 0x821C1280;
	}
	return 0x821C1280;
} // Block from 821C1260h-821C1280h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C1280h
// Function '?ResolveUAsmOptions@Compiler@D3DXShader@@AAA?AW4ErrorCode@2@PAVInstruction@2@PAUUnresolvedUAsmOptions@2@PAPAVCNodeList@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1280);
		  /* 821C1280h */ case    0:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1280h case    0:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1280h case    0:*/		return 0x821C1284;
		  /* 821C1284h */ case    1:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1284h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1284h case    1:*/		return 0x821C1288;
		  /* 821C1288h */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 821C1288h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C12C0;  }
		/* 821C1288h case    2:*/		return 0x821C128C;
		  /* 821C128Ch */ case    3:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C128Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C128Ch case    3:*/		return 0x821C1290;
		  /* 821C1290h */ case    4:  		/* lwz R9, <#[R29]> */
		/* 821C1290h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821C1290h case    4:*/		return 0x821C1294;
		  /* 821C1294h */ case    5:  		/* addi R10, R29, -36 */
		/* 821C1294h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFDC);
		/* 821C1294h case    5:*/		return 0x821C1298;
		  /* 821C1298h */ case    6:  		/* addi R11, R11, 36 */
		/* 821C1298h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C1298h case    6:*/		return 0x821C129C;
		  /* 821C129Ch */ case    7:  		/* ori R8, R10, 1 */
		/* 821C129Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C129Ch case    7:*/		return 0x821C12A0;
		  /* 821C12A0h */ case    8:  		/* addi R7, R11, -36 */
		/* 821C12A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821C12A0h case    8:*/		return 0x821C12A4;
		  /* 821C12A4h */ case    9:  		/* addi R10, R11, 4 */
		/* 821C12A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C12A4h case    9:*/		return 0x821C12A8;
		  /* 821C12A8h */ case   10:  		/* stw R9, <#[R11]> */
		/* 821C12A8h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C12A8h case   10:*/		return 0x821C12AC;
		  /* 821C12ACh */ case   11:  		/* lwz R9, <#[R29]> */
		/* 821C12ACh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821C12ACh case   11:*/		return 0x821C12B0;
		  /* 821C12B0h */ case   12:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821C12B0h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821C12B0h case   12:*/		return 0x821C12B4;
		  /* 821C12B4h */ case   13:  		/* stw R7, <#[R9]> */
		/* 821C12B4h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C12B4h case   13:*/		return 0x821C12B8;
		  /* 821C12B8h */ case   14:  		/* stw R8, <#[R11 + 4]> */
		/* 821C12B8h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C12B8h case   14:*/		return 0x821C12BC;
		  /* 821C12BCh */ case   15:  		/* stw R10, <#[R29]> */
		/* 821C12BCh case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C12BCh case   15:*/		return 0x821C12C0;
	}
	return 0x821C12C0;
} // Block from 821C1280h-821C12C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C12C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C12C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C12C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C12C0);
		  /* 821C12C0h */ case    0:  		/* mr R3, R31 */
		/* 821C12C0h case    0:*/		regs.R3 = regs.R31;
		/* 821C12C0h case    0:*/		return 0x821C12C4;
		  /* 821C12C4h */ case    1:  		/* addi R1, R1, 128 */
		/* 821C12C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C12C4h case    1:*/		return 0x821C12C8;
		  /* 821C12C8h */ case    2:  		/* b -1245220 */
		/* 821C12C8h case    2:*/		return 0x820912A4;
		/* 821C12C8h case    2:*/		return 0x821C12CC;
		  /* 821C12CCh */ case    3:  		/* nop */
		/* 821C12CCh case    3:*/		cpu::op::nop();
		/* 821C12CCh case    3:*/		return 0x821C12D0;
	}
	return 0x821C12D0;
} // Block from 821C12C0h-821C12D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C12D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C12D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C12D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C12D0);
		  /* 821C12D0h */ case    0:  		/* mfspr R12, LR */
		/* 821C12D0h case    0:*/		regs.R12 = regs.LR;
		/* 821C12D0h case    0:*/		return 0x821C12D4;
		  /* 821C12D4h */ case    1:  		/* bl -1245312 */
		/* 821C12D4h case    1:*/		regs.LR = 0x821C12D8; return 0x82091254;
		/* 821C12D4h case    1:*/		return 0x821C12D8;
		  /* 821C12D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C12D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C12D8h case    2:*/		return 0x821C12DC;
		  /* 821C12DCh */ case    3:  		/* mr R27, R4 */
		/* 821C12DCh case    3:*/		regs.R27 = regs.R4;
		/* 821C12DCh case    3:*/		return 0x821C12E0;
		  /* 821C12E0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C12E0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C12E0h case    4:*/		return 0x821C12E4;
		  /* 821C12E4h */ case    5:  		/* mr R28, R5 */
		/* 821C12E4h case    5:*/		regs.R28 = regs.R5;
		/* 821C12E4h case    5:*/		return 0x821C12E8;
		  /* 821C12E8h */ case    6:  		/* mr R30, R6 */
		/* 821C12E8h case    6:*/		regs.R30 = regs.R6;
		/* 821C12E8h case    6:*/		return 0x821C12EC;
		  /* 821C12ECh */ case    7:  		/* li R8, 4 */
		/* 821C12ECh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C12ECh case    7:*/		return 0x821C12F0;
		  /* 821C12F0h */ case    8:  		/* li R7, 1 */
		/* 821C12F0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C12F0h case    8:*/		return 0x821C12F4;
		  /* 821C12F4h */ case    9:  		/* li R6, 9 */
		/* 821C12F4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x9);
		/* 821C12F4h case    9:*/		return 0x821C12F8;
		  /* 821C12F8h */ case   10:  		/* li R5, 0 */
		/* 821C12F8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C12F8h case   10:*/		return 0x821C12FC;
		  /* 821C12FCh */ case   11:  		/* mr R29, R3 */
		/* 821C12FCh case   11:*/		regs.R29 = regs.R3;
		/* 821C12FCh case   11:*/		return 0x821C1300;
		  /* 821C1300h */ case   12:  		/* bl 407192 */
		/* 821C1300h case   12:*/		regs.LR = 0x821C1304; return 0x82224998;
		/* 821C1300h case   12:*/		return 0x821C1304;
		  /* 821C1304h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1304h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1304h case   13:*/		return 0x821C1308;
		  /* 821C1308h */ case   14:  		/* mr R31, R3 */
		/* 821C1308h case   14:*/		regs.R31 = regs.R3;
		/* 821C1308h case   14:*/		return 0x821C130C;
		  /* 821C130Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C130Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C130Ch case   15:*/		return 0x821C1310;
		  /* 821C1310h */ case   16:  		/* mr R4, R30 */
		/* 821C1310h case   16:*/		regs.R4 = regs.R30;
		/* 821C1310h case   16:*/		return 0x821C1314;
		  /* 821C1314h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1314h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1328;  }
		/* 821C1314h case   17:*/		return 0x821C1318;
		  /* 821C1318h */ case   18:  		/* mr R3, R29 */
		/* 821C1318h case   18:*/		regs.R3 = regs.R29;
		/* 821C1318h case   18:*/		return 0x821C131C;
		  /* 821C131Ch */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C131Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C131Ch case   19:*/		return 0x821C1320;
		  /* 821C1320h */ case   20:  		/* bl -328240 */
		/* 821C1320h case   20:*/		regs.LR = 0x821C1324; return 0x821710F0;
		/* 821C1320h case   20:*/		return 0x821C1324;
		  /* 821C1324h */ case   21:  		/* mr R4, R3 */
		/* 821C1324h case   21:*/		regs.R4 = regs.R3;
		/* 821C1324h case   21:*/		return 0x821C1328;
	}
	return 0x821C1328;
} // Block from 821C12D0h-821C1328h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1328);
		  /* 821C1328h */ case    0:  		/* mr R3, R31 */
		/* 821C1328h case    0:*/		regs.R3 = regs.R31;
		/* 821C1328h case    0:*/		return 0x821C132C;
		  /* 821C132Ch */ case    1:  		/* bl -299364 */
		/* 821C132Ch case    1:*/		regs.LR = 0x821C1330; return 0x821781C8;
		/* 821C132Ch case    1:*/		return 0x821C1330;
		  /* 821C1330h */ case    2:  		/* mr R11, R3 */
		/* 821C1330h case    2:*/		regs.R11 = regs.R3;
		/* 821C1330h case    2:*/		return 0x821C1334;
		  /* 821C1334h */ case    3:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1334h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1334h case    3:*/		return 0x821C1338;
		  /* 821C1338h */ case    4:  		/* mr R6, R28 */
		/* 821C1338h case    4:*/		regs.R6 = regs.R28;
		/* 821C1338h case    4:*/		return 0x821C133C;
		  /* 821C133Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C133Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C133Ch case    5:*/		return 0x821C1340;
		  /* 821C1340h */ case    6:  		/* mr R5, R27 */
		/* 821C1340h case    6:*/		regs.R5 = regs.R27;
		/* 821C1340h case    6:*/		return 0x821C1344;
		  /* 821C1344h */ case    7:  		/* mr R4, R31 */
		/* 821C1344h case    7:*/		regs.R4 = regs.R31;
		/* 821C1344h case    7:*/		return 0x821C1348;
		  /* 821C1348h */ case    8:  		/* mr R3, R29 */
		/* 821C1348h case    8:*/		regs.R3 = regs.R29;
		/* 821C1348h case    8:*/		return 0x821C134C;
		  /* 821C134Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C134Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C134Ch case    9:*/		return 0x821C1350;
		  /* 821C1350h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1350h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1350h case   10:*/		return 0x821C1354;
		  /* 821C1354h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1354h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1354h case   11:*/		return 0x821C1358;
		  /* 821C1358h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1358h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1358h case   12:*/		return 0x821C135C;
		  /* 821C135Ch */ case   13:  		/* bl -345268 */
		/* 821C135Ch case   13:*/		regs.LR = 0x821C1360; return 0x8216CEA8;
		/* 821C135Ch case   13:*/		return 0x821C1360;
		  /* 821C1360h */ case   14:  		/* mr R3, R31 */
		/* 821C1360h case   14:*/		regs.R3 = regs.R31;
		/* 821C1360h case   14:*/		return 0x821C1364;
		  /* 821C1364h */ case   15:  		/* addi R1, R1, 128 */
		/* 821C1364h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1364h case   15:*/		return 0x821C1368;
		  /* 821C1368h */ case   16:  		/* b -1245380 */
		/* 821C1368h case   16:*/		return 0x820912A4;
		/* 821C1368h case   16:*/		return 0x821C136C;
		  /* 821C136Ch */ case   17:  		/* nop */
		/* 821C136Ch case   17:*/		cpu::op::nop();
		/* 821C136Ch case   17:*/		return 0x821C1370;
	}
	return 0x821C1370;
} // Block from 821C1328h-821C1370h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1370);
		  /* 821C1370h */ case    0:  		/* mfspr R12, LR */
		/* 821C1370h case    0:*/		regs.R12 = regs.LR;
		/* 821C1370h case    0:*/		return 0x821C1374;
		  /* 821C1374h */ case    1:  		/* bl -1245472 */
		/* 821C1374h case    1:*/		regs.LR = 0x821C1378; return 0x82091254;
		/* 821C1374h case    1:*/		return 0x821C1378;
		  /* 821C1378h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1378h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1378h case    2:*/		return 0x821C137C;
		  /* 821C137Ch */ case    3:  		/* mr R27, R4 */
		/* 821C137Ch case    3:*/		regs.R27 = regs.R4;
		/* 821C137Ch case    3:*/		return 0x821C1380;
		  /* 821C1380h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1380h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1380h case    4:*/		return 0x821C1384;
		  /* 821C1384h */ case    5:  		/* mr R28, R5 */
		/* 821C1384h case    5:*/		regs.R28 = regs.R5;
		/* 821C1384h case    5:*/		return 0x821C1388;
		  /* 821C1388h */ case    6:  		/* mr R30, R6 */
		/* 821C1388h case    6:*/		regs.R30 = regs.R6;
		/* 821C1388h case    6:*/		return 0x821C138C;
		  /* 821C138Ch */ case    7:  		/* li R8, 4 */
		/* 821C138Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C138Ch case    7:*/		return 0x821C1390;
		  /* 821C1390h */ case    8:  		/* li R7, 1 */
		/* 821C1390h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1390h case    8:*/		return 0x821C1394;
		  /* 821C1394h */ case    9:  		/* li R6, 10 */
		/* 821C1394h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 821C1394h case    9:*/		return 0x821C1398;
		  /* 821C1398h */ case   10:  		/* li R5, 0 */
		/* 821C1398h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1398h case   10:*/		return 0x821C139C;
		  /* 821C139Ch */ case   11:  		/* mr R29, R3 */
		/* 821C139Ch case   11:*/		regs.R29 = regs.R3;
		/* 821C139Ch case   11:*/		return 0x821C13A0;
		  /* 821C13A0h */ case   12:  		/* bl 407032 */
		/* 821C13A0h case   12:*/		regs.LR = 0x821C13A4; return 0x82224998;
		/* 821C13A0h case   12:*/		return 0x821C13A4;
		  /* 821C13A4h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C13A4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C13A4h case   13:*/		return 0x821C13A8;
		  /* 821C13A8h */ case   14:  		/* mr R31, R3 */
		/* 821C13A8h case   14:*/		regs.R31 = regs.R3;
		/* 821C13A8h case   14:*/		return 0x821C13AC;
		  /* 821C13ACh */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C13ACh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C13ACh case   15:*/		return 0x821C13B0;
		  /* 821C13B0h */ case   16:  		/* mr R4, R30 */
		/* 821C13B0h case   16:*/		regs.R4 = regs.R30;
		/* 821C13B0h case   16:*/		return 0x821C13B4;
		  /* 821C13B4h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C13B4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C13C8;  }
		/* 821C13B4h case   17:*/		return 0x821C13B8;
		  /* 821C13B8h */ case   18:  		/* mr R3, R29 */
		/* 821C13B8h case   18:*/		regs.R3 = regs.R29;
		/* 821C13B8h case   18:*/		return 0x821C13BC;
		  /* 821C13BCh */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C13BCh case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C13BCh case   19:*/		return 0x821C13C0;
		  /* 821C13C0h */ case   20:  		/* bl -328400 */
		/* 821C13C0h case   20:*/		regs.LR = 0x821C13C4; return 0x821710F0;
		/* 821C13C0h case   20:*/		return 0x821C13C4;
		  /* 821C13C4h */ case   21:  		/* mr R4, R3 */
		/* 821C13C4h case   21:*/		regs.R4 = regs.R3;
		/* 821C13C4h case   21:*/		return 0x821C13C8;
	}
	return 0x821C13C8;
} // Block from 821C1370h-821C13C8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C13C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C13C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C13C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C13C8);
		  /* 821C13C8h */ case    0:  		/* mr R3, R31 */
		/* 821C13C8h case    0:*/		regs.R3 = regs.R31;
		/* 821C13C8h case    0:*/		return 0x821C13CC;
		  /* 821C13CCh */ case    1:  		/* bl -299524 */
		/* 821C13CCh case    1:*/		regs.LR = 0x821C13D0; return 0x821781C8;
		/* 821C13CCh case    1:*/		return 0x821C13D0;
		  /* 821C13D0h */ case    2:  		/* mr R11, R3 */
		/* 821C13D0h case    2:*/		regs.R11 = regs.R3;
		/* 821C13D0h case    2:*/		return 0x821C13D4;
		  /* 821C13D4h */ case    3:  		/* stw R3, <#[R31 + 44]> */
		/* 821C13D4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C13D4h case    3:*/		return 0x821C13D8;
		  /* 821C13D8h */ case    4:  		/* mr R6, R28 */
		/* 821C13D8h case    4:*/		regs.R6 = regs.R28;
		/* 821C13D8h case    4:*/		return 0x821C13DC;
		  /* 821C13DCh */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C13DCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C13DCh case    5:*/		return 0x821C13E0;
		  /* 821C13E0h */ case    6:  		/* mr R5, R27 */
		/* 821C13E0h case    6:*/		regs.R5 = regs.R27;
		/* 821C13E0h case    6:*/		return 0x821C13E4;
		  /* 821C13E4h */ case    7:  		/* mr R4, R31 */
		/* 821C13E4h case    7:*/		regs.R4 = regs.R31;
		/* 821C13E4h case    7:*/		return 0x821C13E8;
		  /* 821C13E8h */ case    8:  		/* mr R3, R29 */
		/* 821C13E8h case    8:*/		regs.R3 = regs.R29;
		/* 821C13E8h case    8:*/		return 0x821C13EC;
		  /* 821C13ECh */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C13ECh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C13ECh case    9:*/		return 0x821C13F0;
		  /* 821C13F0h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C13F0h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C13F0h case   10:*/		return 0x821C13F4;
		  /* 821C13F4h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C13F4h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C13F4h case   11:*/		return 0x821C13F8;
		  /* 821C13F8h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C13F8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C13F8h case   12:*/		return 0x821C13FC;
		  /* 821C13FCh */ case   13:  		/* bl -345428 */
		/* 821C13FCh case   13:*/		regs.LR = 0x821C1400; return 0x8216CEA8;
		/* 821C13FCh case   13:*/		return 0x821C1400;
		  /* 821C1400h */ case   14:  		/* mr R3, R31 */
		/* 821C1400h case   14:*/		regs.R3 = regs.R31;
		/* 821C1400h case   14:*/		return 0x821C1404;
		  /* 821C1404h */ case   15:  		/* addi R1, R1, 128 */
		/* 821C1404h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1404h case   15:*/		return 0x821C1408;
		  /* 821C1408h */ case   16:  		/* b -1245540 */
		/* 821C1408h case   16:*/		return 0x820912A4;
		/* 821C1408h case   16:*/		return 0x821C140C;
		  /* 821C140Ch */ case   17:  		/* nop */
		/* 821C140Ch case   17:*/		cpu::op::nop();
		/* 821C140Ch case   17:*/		return 0x821C1410;
	}
	return 0x821C1410;
} // Block from 821C13C8h-821C1410h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1410);
		  /* 821C1410h */ case    0:  		/* mfspr R12, LR */
		/* 821C1410h case    0:*/		regs.R12 = regs.LR;
		/* 821C1410h case    0:*/		return 0x821C1414;
		  /* 821C1414h */ case    1:  		/* bl -1245632 */
		/* 821C1414h case    1:*/		regs.LR = 0x821C1418; return 0x82091254;
		/* 821C1414h case    1:*/		return 0x821C1418;
		  /* 821C1418h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1418h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1418h case    2:*/		return 0x821C141C;
		  /* 821C141Ch */ case    3:  		/* mr R27, R4 */
		/* 821C141Ch case    3:*/		regs.R27 = regs.R4;
		/* 821C141Ch case    3:*/		return 0x821C1420;
		  /* 821C1420h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1420h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1420h case    4:*/		return 0x821C1424;
		  /* 821C1424h */ case    5:  		/* mr R28, R5 */
		/* 821C1424h case    5:*/		regs.R28 = regs.R5;
		/* 821C1424h case    5:*/		return 0x821C1428;
		  /* 821C1428h */ case    6:  		/* mr R30, R6 */
		/* 821C1428h case    6:*/		regs.R30 = regs.R6;
		/* 821C1428h case    6:*/		return 0x821C142C;
		  /* 821C142Ch */ case    7:  		/* li R8, 4 */
		/* 821C142Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C142Ch case    7:*/		return 0x821C1430;
		  /* 821C1430h */ case    8:  		/* li R7, 1 */
		/* 821C1430h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1430h case    8:*/		return 0x821C1434;
		  /* 821C1434h */ case    9:  		/* li R6, 11 */
		/* 821C1434h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xB);
		/* 821C1434h case    9:*/		return 0x821C1438;
		  /* 821C1438h */ case   10:  		/* li R5, 0 */
		/* 821C1438h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1438h case   10:*/		return 0x821C143C;
		  /* 821C143Ch */ case   11:  		/* mr R29, R3 */
		/* 821C143Ch case   11:*/		regs.R29 = regs.R3;
		/* 821C143Ch case   11:*/		return 0x821C1440;
		  /* 821C1440h */ case   12:  		/* bl 406872 */
		/* 821C1440h case   12:*/		regs.LR = 0x821C1444; return 0x82224998;
		/* 821C1440h case   12:*/		return 0x821C1444;
		  /* 821C1444h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1444h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1444h case   13:*/		return 0x821C1448;
		  /* 821C1448h */ case   14:  		/* mr R31, R3 */
		/* 821C1448h case   14:*/		regs.R31 = regs.R3;
		/* 821C1448h case   14:*/		return 0x821C144C;
		  /* 821C144Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C144Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C144Ch case   15:*/		return 0x821C1450;
		  /* 821C1450h */ case   16:  		/* mr R4, R30 */
		/* 821C1450h case   16:*/		regs.R4 = regs.R30;
		/* 821C1450h case   16:*/		return 0x821C1454;
		  /* 821C1454h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1454h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1468;  }
		/* 821C1454h case   17:*/		return 0x821C1458;
		  /* 821C1458h */ case   18:  		/* mr R3, R29 */
		/* 821C1458h case   18:*/		regs.R3 = regs.R29;
		/* 821C1458h case   18:*/		return 0x821C145C;
		  /* 821C145Ch */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C145Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C145Ch case   19:*/		return 0x821C1460;
	}
	return 0x821C1460;
} // Block from 821C1410h-821C1460h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C1460h
// Function '?ResolveInternalTextureUAsmOptions@Compiler@D3DXShader@@AAA?AW4ErrorCode@2@PAVInstruction@2@PAUInstruction_TFETCH@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1460);
		  /* 821C1460h */ case    0:  		/* bl -328560 */
		/* 821C1460h case    0:*/		regs.LR = 0x821C1464; return 0x821710F0;
		/* 821C1460h case    0:*/		return 0x821C1464;
		  /* 821C1464h */ case    1:  		/* mr R4, R3 */
		/* 821C1464h case    1:*/		regs.R4 = regs.R3;
		/* 821C1464h case    1:*/		return 0x821C1468;
	}
	return 0x821C1468;
} // Block from 821C1460h-821C1468h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C1468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1468);
		  /* 821C1468h */ case    0:  		/* mr R3, R31 */
		/* 821C1468h case    0:*/		regs.R3 = regs.R31;
		/* 821C1468h case    0:*/		return 0x821C146C;
		  /* 821C146Ch */ case    1:  		/* bl -299684 */
		/* 821C146Ch case    1:*/		regs.LR = 0x821C1470; return 0x821781C8;
		/* 821C146Ch case    1:*/		return 0x821C1470;
		  /* 821C1470h */ case    2:  		/* mr R11, R3 */
		/* 821C1470h case    2:*/		regs.R11 = regs.R3;
		/* 821C1470h case    2:*/		return 0x821C1474;
		  /* 821C1474h */ case    3:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1474h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1474h case    3:*/		return 0x821C1478;
		  /* 821C1478h */ case    4:  		/* mr R6, R28 */
		/* 821C1478h case    4:*/		regs.R6 = regs.R28;
		/* 821C1478h case    4:*/		return 0x821C147C;
		  /* 821C147Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C147Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C147Ch case    5:*/		return 0x821C1480;
		  /* 821C1480h */ case    6:  		/* mr R5, R27 */
		/* 821C1480h case    6:*/		regs.R5 = regs.R27;
		/* 821C1480h case    6:*/		return 0x821C1484;
		  /* 821C1484h */ case    7:  		/* mr R4, R31 */
		/* 821C1484h case    7:*/		regs.R4 = regs.R31;
		/* 821C1484h case    7:*/		return 0x821C1488;
		  /* 821C1488h */ case    8:  		/* mr R3, R29 */
		/* 821C1488h case    8:*/		regs.R3 = regs.R29;
		/* 821C1488h case    8:*/		return 0x821C148C;
		  /* 821C148Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C148Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C148Ch case    9:*/		return 0x821C1490;
		  /* 821C1490h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1490h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1490h case   10:*/		return 0x821C1494;
		  /* 821C1494h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1494h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1494h case   11:*/		return 0x821C1498;
		  /* 821C1498h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1498h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1498h case   12:*/		return 0x821C149C;
		  /* 821C149Ch */ case   13:  		/* bl -345588 */
		/* 821C149Ch case   13:*/		regs.LR = 0x821C14A0; return 0x8216CEA8;
		/* 821C149Ch case   13:*/		return 0x821C14A0;
		  /* 821C14A0h */ case   14:  		/* mr R3, R31 */
		/* 821C14A0h case   14:*/		regs.R3 = regs.R31;
		/* 821C14A0h case   14:*/		return 0x821C14A4;
		  /* 821C14A4h */ case   15:  		/* addi R1, R1, 128 */
		/* 821C14A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C14A4h case   15:*/		return 0x821C14A8;
		  /* 821C14A8h */ case   16:  		/* b -1245700 */
		/* 821C14A8h case   16:*/		return 0x820912A4;
		/* 821C14A8h case   16:*/		return 0x821C14AC;
		  /* 821C14ACh */ case   17:  		/* nop */
		/* 821C14ACh case   17:*/		cpu::op::nop();
		/* 821C14ACh case   17:*/		return 0x821C14B0;
	}
	return 0x821C14B0;
} // Block from 821C1468h-821C14B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C14B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C14B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C14B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C14B0);
		  /* 821C14B0h */ case    0:  		/* mfspr R12, LR */
		/* 821C14B0h case    0:*/		regs.R12 = regs.LR;
		/* 821C14B0h case    0:*/		return 0x821C14B4;
		  /* 821C14B4h */ case    1:  		/* bl -1245796 */
		/* 821C14B4h case    1:*/		regs.LR = 0x821C14B8; return 0x82091250;
		/* 821C14B4h case    1:*/		return 0x821C14B8;
		  /* 821C14B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C14B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C14B8h case    2:*/		return 0x821C14BC;
		  /* 821C14BCh */ case    3:  		/* mr R30, R5 */
		/* 821C14BCh case    3:*/		regs.R30 = regs.R5;
		/* 821C14BCh case    3:*/		return 0x821C14C0;
		  /* 821C14C0h */ case    4:  		/* mr R28, R6 */
		/* 821C14C0h case    4:*/		regs.R28 = regs.R6;
		/* 821C14C0h case    4:*/		return 0x821C14C4;
		  /* 821C14C4h */ case    5:  		/* mr R26, R7 */
		/* 821C14C4h case    5:*/		regs.R26 = regs.R7;
		/* 821C14C4h case    5:*/		return 0x821C14C8;
		  /* 821C14C8h */ case    6:  		/* li R8, 4 */
		/* 821C14C8h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C14C8h case    6:*/		return 0x821C14CC;
		  /* 821C14CCh */ case    7:  		/* li R7, 3 */
		/* 821C14CCh case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C14CCh case    7:*/		return 0x821C14D0;
		  /* 821C14D0h */ case    8:  		/* li R6, 14 */
		/* 821C14D0h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 821C14D0h case    8:*/		return 0x821C14D4;
		  /* 821C14D4h */ case    9:  		/* li R5, 0 */
		/* 821C14D4h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C14D4h case    9:*/		return 0x821C14D8;
		  /* 821C14D8h */ case   10:  		/* mr R27, R3 */
		/* 821C14D8h case   10:*/		regs.R27 = regs.R3;
		/* 821C14D8h case   10:*/		return 0x821C14DC;
		  /* 821C14DCh */ case   11:  		/* mr R29, R4 */
		/* 821C14DCh case   11:*/		regs.R29 = regs.R4;
		/* 821C14DCh case   11:*/		return 0x821C14E0;
		  /* 821C14E0h */ case   12:  		/* bl 406712 */
		/* 821C14E0h case   12:*/		regs.LR = 0x821C14E4; return 0x82224998;
		/* 821C14E0h case   12:*/		return 0x821C14E4;
		  /* 821C14E4h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C14E4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C14E4h case   13:*/		return 0x821C14E8;
		  /* 821C14E8h */ case   14:  		/* mr R31, R3 */
		/* 821C14E8h case   14:*/		regs.R31 = regs.R3;
		/* 821C14E8h case   14:*/		return 0x821C14EC;
		  /* 821C14ECh */ case   15:  		/* mr R4, R30 */
		/* 821C14ECh case   15:*/		regs.R4 = regs.R30;
		/* 821C14ECh case   15:*/		return 0x821C14F0;
		  /* 821C14F0h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C14F0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C14F0h case   16:*/		return 0x821C14F4;
		  /* 821C14F4h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C14F4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1508;  }
		/* 821C14F4h case   17:*/		return 0x821C14F8;
		  /* 821C14F8h */ case   18:  		/* mr R3, R27 */
		/* 821C14F8h case   18:*/		regs.R3 = regs.R27;
		/* 821C14F8h case   18:*/		return 0x821C14FC;
		  /* 821C14FCh */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C14FCh case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C14FCh case   19:*/		return 0x821C1500;
		  /* 821C1500h */ case   20:  		/* bl -328720 */
		/* 821C1500h case   20:*/		regs.LR = 0x821C1504; return 0x821710F0;
		/* 821C1500h case   20:*/		return 0x821C1504;
		  /* 821C1504h */ case   21:  		/* mr R4, R3 */
		/* 821C1504h case   21:*/		regs.R4 = regs.R3;
		/* 821C1504h case   21:*/		return 0x821C1508;
	}
	return 0x821C1508;
} // Block from 821C14B0h-821C1508h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1508);
		  /* 821C1508h */ case    0:  		/* mr R3, R31 */
		/* 821C1508h case    0:*/		regs.R3 = regs.R31;
		/* 821C1508h case    0:*/		return 0x821C150C;
		  /* 821C150Ch */ case    1:  		/* bl -299844 */
		/* 821C150Ch case    1:*/		regs.LR = 0x821C1510; return 0x821781C8;
		/* 821C150Ch case    1:*/		return 0x821C1510;
		  /* 821C1510h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1510h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1510h case    2:*/		return 0x821C1514;
		  /* 821C1514h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C1514h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C1514h case    3:*/		return 0x821C1518;
		  /* 821C1518h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C1518h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1518h case    4:*/		return 0x821C151C;
		  /* 821C151Ch */ case    5:  		/* mr R4, R28 */
		/* 821C151Ch case    5:*/		regs.R4 = regs.R28;
		/* 821C151Ch case    5:*/		return 0x821C1520;
		  /* 821C1520h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1520h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1534;  }
		/* 821C1520h case    6:*/		return 0x821C1524;
		  /* 821C1524h */ case    7:  		/* mr R3, R27 */
		/* 821C1524h case    7:*/		regs.R3 = regs.R27;
		/* 821C1524h case    7:*/		return 0x821C1528;
		  /* 821C1528h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C1528h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C1528h case    8:*/		return 0x821C152C;
		  /* 821C152Ch */ case    9:  		/* bl -328764 */
		/* 821C152Ch case    9:*/		regs.LR = 0x821C1530; return 0x821710F0;
		/* 821C152Ch case    9:*/		return 0x821C1530;
		  /* 821C1530h */ case   10:  		/* mr R4, R3 */
		/* 821C1530h case   10:*/		regs.R4 = regs.R3;
		/* 821C1530h case   10:*/		return 0x821C1534;
	}
	return 0x821C1534;
} // Block from 821C1508h-821C1534h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1534);
		  /* 821C1534h */ case    0:  		/* mr R3, R31 */
		/* 821C1534h case    0:*/		regs.R3 = regs.R31;
		/* 821C1534h case    0:*/		return 0x821C1538;
		  /* 821C1538h */ case    1:  		/* bl -299888 */
		/* 821C1538h case    1:*/		regs.LR = 0x821C153C; return 0x821781C8;
		/* 821C1538h case    1:*/		return 0x821C153C;
		  /* 821C153Ch */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C153Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C153Ch case    2:*/		return 0x821C1540;
		  /* 821C1540h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 821C1540h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 821C1540h case    3:*/		return 0x821C1544;
		  /* 821C1544h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C1544h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1544h case    4:*/		return 0x821C1548;
		  /* 821C1548h */ case    5:  		/* mr R4, R26 */
		/* 821C1548h case    5:*/		regs.R4 = regs.R26;
		/* 821C1548h case    5:*/		return 0x821C154C;
		  /* 821C154Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C154Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1560;  }
		/* 821C154Ch case    6:*/		return 0x821C1550;
		  /* 821C1550h */ case    7:  		/* mr R3, R27 */
		/* 821C1550h case    7:*/		regs.R3 = regs.R27;
		/* 821C1550h case    7:*/		return 0x821C1554;
		  /* 821C1554h */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 821C1554h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C1554h case    8:*/		return 0x821C1558;
		  /* 821C1558h */ case    9:  		/* bl -328808 */
		/* 821C1558h case    9:*/		regs.LR = 0x821C155C; return 0x821710F0;
		/* 821C1558h case    9:*/		return 0x821C155C;
		  /* 821C155Ch */ case   10:  		/* mr R4, R3 */
		/* 821C155Ch case   10:*/		regs.R4 = regs.R3;
		/* 821C155Ch case   10:*/		return 0x821C1560;
	}
	return 0x821C1560;
} // Block from 821C1534h-821C1560h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1560);
		  /* 821C1560h */ case    0:  		/* mr R3, R31 */
		/* 821C1560h case    0:*/		regs.R3 = regs.R31;
		/* 821C1560h case    0:*/		return 0x821C1564;
		  /* 821C1564h */ case    1:  		/* bl -299932 */
		/* 821C1564h case    1:*/		regs.LR = 0x821C1568; return 0x821781C8;
		/* 821C1564h case    1:*/		return 0x821C1568;
		  /* 821C1568h */ case    2:  		/* lwz R9, <#[R31 + 44]> */
		/* 821C1568h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1568h case    2:*/		return 0x821C156C;
		  /* 821C156Ch */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 821C156Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C156Ch case    3:*/		return 0x821C1570;
		  /* 821C1570h */ case    4:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C1570h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C1570h case    4:*/		return 0x821C1574;
		  /* 821C1574h */ case    5:  		/* lwz R8, <#[R31 + 8]> */
		/* 821C1574h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1574h case    5:*/		return 0x821C1578;
		  /* 821C1578h */ case    6:  		/* addi R10, R29, 24 */
		/* 821C1578h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x18);
		/* 821C1578h case    6:*/		return 0x821C157C;
		  /* 821C157Ch */ case    7:  		/* addi R11, R11, 36 */
		/* 821C157Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C157Ch case    7:*/		return 0x821C1580;
		  /* 821C1580h */ case    8:  		/* addi R10, R10, -36 */
		/* 821C1580h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821C1580h case    8:*/		return 0x821C1584;
		  /* 821C1584h */ case    9:  		/* lwz R9, <#[R9]> */
		/* 821C1584h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821C1584h case    9:*/		return 0x821C1588;
		  /* 821C1588h */ case   10:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821C1588h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821C1588h case   10:*/		return 0x821C158C;
		  /* 821C158Ch */ case   11:  		/* rlwimi R8, R9, 14, 15, 17 */
		/* 821C158Ch case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R8,regs.R9);
		/* 821C158Ch case   11:*/		return 0x821C1590;
		  /* 821C1590h */ case   12:  		/* addi R9, R11, -36 */
		/* 821C1590h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821C1590h case   12:*/		return 0x821C1594;
		  /* 821C1594h */ case   13:  		/* stw R8, <#[R31 + 8]> */
		/* 821C1594h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1594h case   13:*/		return 0x821C1598;
		  /* 821C1598h */ case   14:  		/* ori R8, R10, 1 */
		/* 821C1598h case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C1598h case   14:*/		return 0x821C159C;
		  /* 821C159Ch */ case   15:  		/* lwz R7, <#[R29 + 24]> */
		/* 821C159Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000018) );
		/* 821C159Ch case   15:*/		return 0x821C15A0;
		  /* 821C15A0h */ case   16:  		/* addi R10, R11, 4 */
		/* 821C15A0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C15A0h case   16:*/		return 0x821C15A4;
		  /* 821C15A4h */ case   17:  		/* stw R7, <#[R11]> */
		/* 821C15A4h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C15A4h case   17:*/		return 0x821C15A8;
		  /* 821C15A8h */ case   18:  		/* mr R3, R31 */
		/* 821C15A8h case   18:*/		regs.R3 = regs.R31;
		/* 821C15A8h case   18:*/		return 0x821C15AC;
		  /* 821C15ACh */ case   19:  		/* lwz R7, <#[R29 + 24]> */
		/* 821C15ACh case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000018) );
		/* 821C15ACh case   19:*/		return 0x821C15B0;
		  /* 821C15B0h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C15B0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C15B0h case   20:*/		return 0x821C15B4;
		  /* 821C15B4h */ case   21:  		/* stw R9, <#[R7]> */
		/* 821C15B4h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821C15B4h case   21:*/		return 0x821C15B8;
		  /* 821C15B8h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 821C15B8h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C15B8h case   22:*/		return 0x821C15BC;
		  /* 821C15BCh */ case   23:  		/* stw R10, <#[R29 + 24]> */
		/* 821C15BCh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 821C15BCh case   23:*/		return 0x821C15C0;
		  /* 821C15C0h */ case   24:  		/* addi R1, R1, 144 */
		/* 821C15C0h case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C15C0h case   24:*/		return 0x821C15C4;
		  /* 821C15C4h */ case   25:  		/* b -1245988 */
		/* 821C15C4h case   25:*/		return 0x820912A0;
		/* 821C15C4h case   25:*/		return 0x821C15C8;
	}
	return 0x821C15C8;
} // Block from 821C1560h-821C15C8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C15C8h
// Function '?InsertNext@?$DoubleLinkList@VBlock@D3DXShader@@$0A@@D3DXShader@@SAXPAVBlock@2@PAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C15C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C15C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C15C8);
		  /* 821C15C8h */ case    0:  		/* mfspr R12, LR */
		/* 821C15C8h case    0:*/		regs.R12 = regs.LR;
		/* 821C15C8h case    0:*/		return 0x821C15CC;
		  /* 821C15CCh */ case    1:  		/* bl -1246076 */
		/* 821C15CCh case    1:*/		regs.LR = 0x821C15D0; return 0x82091250;
		/* 821C15CCh case    1:*/		return 0x821C15D0;
		  /* 821C15D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C15D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C15D0h case    2:*/		return 0x821C15D4;
		  /* 821C15D4h */ case    3:  		/* mr R30, R5 */
		/* 821C15D4h case    3:*/		regs.R30 = regs.R5;
		/* 821C15D4h case    3:*/		return 0x821C15D8;
		  /* 821C15D8h */ case    4:  		/* mr R28, R6 */
		/* 821C15D8h case    4:*/		regs.R28 = regs.R6;
		/* 821C15D8h case    4:*/		return 0x821C15DC;
		  /* 821C15DCh */ case    5:  		/* mr R26, R7 */
		/* 821C15DCh case    5:*/		regs.R26 = regs.R7;
		/* 821C15DCh case    5:*/		return 0x821C15E0;
		  /* 821C15E0h */ case    6:  		/* li R8, 4 */
		/* 821C15E0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C15E0h case    6:*/		return 0x821C15E4;
		  /* 821C15E4h */ case    7:  		/* li R7, 3 */
		/* 821C15E4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C15E4h case    7:*/		return 0x821C15E8;
		  /* 821C15E8h */ case    8:  		/* li R6, 15 */
		/* 821C15E8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 821C15E8h case    8:*/		return 0x821C15EC;
		  /* 821C15ECh */ case    9:  		/* li R5, 0 */
		/* 821C15ECh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C15ECh case    9:*/		return 0x821C15F0;
		  /* 821C15F0h */ case   10:  		/* mr R27, R3 */
		/* 821C15F0h case   10:*/		regs.R27 = regs.R3;
		/* 821C15F0h case   10:*/		return 0x821C15F4;
		  /* 821C15F4h */ case   11:  		/* mr R29, R4 */
		/* 821C15F4h case   11:*/		regs.R29 = regs.R4;
		/* 821C15F4h case   11:*/		return 0x821C15F8;
		  /* 821C15F8h */ case   12:  		/* bl 406432 */
		/* 821C15F8h case   12:*/		regs.LR = 0x821C15FC; return 0x82224998;
		/* 821C15F8h case   12:*/		return 0x821C15FC;
		  /* 821C15FCh */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C15FCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C15FCh case   13:*/		return 0x821C1600;
		  /* 821C1600h */ case   14:  		/* mr R31, R3 */
		/* 821C1600h case   14:*/		regs.R31 = regs.R3;
		/* 821C1600h case   14:*/		return 0x821C1604;
		  /* 821C1604h */ case   15:  		/* mr R4, R30 */
		/* 821C1604h case   15:*/		regs.R4 = regs.R30;
		/* 821C1604h case   15:*/		return 0x821C1608;
		  /* 821C1608h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C1608h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1608h case   16:*/		return 0x821C160C;
		  /* 821C160Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C160Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1620;  }
		/* 821C160Ch case   17:*/		return 0x821C1610;
		  /* 821C1610h */ case   18:  		/* mr R3, R27 */
		/* 821C1610h case   18:*/		regs.R3 = regs.R27;
		/* 821C1610h case   18:*/		return 0x821C1614;
		  /* 821C1614h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1614h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1614h case   19:*/		return 0x821C1618;
		  /* 821C1618h */ case   20:  		/* bl -329000 */
		/* 821C1618h case   20:*/		regs.LR = 0x821C161C; return 0x821710F0;
		/* 821C1618h case   20:*/		return 0x821C161C;
		  /* 821C161Ch */ case   21:  		/* mr R4, R3 */
		/* 821C161Ch case   21:*/		regs.R4 = regs.R3;
		/* 821C161Ch case   21:*/		return 0x821C1620;
	}
	return 0x821C1620;
} // Block from 821C15C8h-821C1620h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1620h
// Function '?GetNext@?$ArrayListEnumerator@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAUProductTerm@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1620);
		  /* 821C1620h */ case    0:  		/* mr R3, R31 */
		/* 821C1620h case    0:*/		regs.R3 = regs.R31;
		/* 821C1620h case    0:*/		return 0x821C1624;
		  /* 821C1624h */ case    1:  		/* bl -300124 */
		/* 821C1624h case    1:*/		regs.LR = 0x821C1628; return 0x821781C8;
		/* 821C1624h case    1:*/		return 0x821C1628;
		  /* 821C1628h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1628h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1628h case    2:*/		return 0x821C162C;
		  /* 821C162Ch */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C162Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C162Ch case    3:*/		return 0x821C1630;
		  /* 821C1630h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C1630h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1630h case    4:*/		return 0x821C1634;
		  /* 821C1634h */ case    5:  		/* mr R4, R28 */
		/* 821C1634h case    5:*/		regs.R4 = regs.R28;
		/* 821C1634h case    5:*/		return 0x821C1638;
		  /* 821C1638h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1638h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C164C;  }
		/* 821C1638h case    6:*/		return 0x821C163C;
		  /* 821C163Ch */ case    7:  		/* mr R3, R27 */
		/* 821C163Ch case    7:*/		regs.R3 = regs.R27;
		/* 821C163Ch case    7:*/		return 0x821C1640;
		  /* 821C1640h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C1640h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C1640h case    8:*/		return 0x821C1644;
		  /* 821C1644h */ case    9:  		/* bl -329044 */
		/* 821C1644h case    9:*/		regs.LR = 0x821C1648; return 0x821710F0;
		/* 821C1644h case    9:*/		return 0x821C1648;
		  /* 821C1648h */ case   10:  		/* mr R4, R3 */
		/* 821C1648h case   10:*/		regs.R4 = regs.R3;
		/* 821C1648h case   10:*/		return 0x821C164C;
	}
	return 0x821C164C;
} // Block from 821C1620h-821C164Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C164Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C164C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C164C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C164C);
		  /* 821C164Ch */ case    0:  		/* mr R3, R31 */
		/* 821C164Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C164Ch case    0:*/		return 0x821C1650;
		  /* 821C1650h */ case    1:  		/* bl -300168 */
		/* 821C1650h case    1:*/		regs.LR = 0x821C1654; return 0x821781C8;
		/* 821C1650h case    1:*/		return 0x821C1654;
		  /* 821C1654h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C1654h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C1654h case    2:*/		return 0x821C1658;
		  /* 821C1658h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 821C1658h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 821C1658h case    3:*/		return 0x821C165C;
		  /* 821C165Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C165Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C165Ch case    4:*/		return 0x821C1660;
		  /* 821C1660h */ case    5:  		/* mr R4, R26 */
		/* 821C1660h case    5:*/		regs.R4 = regs.R26;
		/* 821C1660h case    5:*/		return 0x821C1664;
		  /* 821C1664h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1664h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1678;  }
		/* 821C1664h case    6:*/		return 0x821C1668;
		  /* 821C1668h */ case    7:  		/* mr R3, R27 */
		/* 821C1668h case    7:*/		regs.R3 = regs.R27;
		/* 821C1668h case    7:*/		return 0x821C166C;
		  /* 821C166Ch */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 821C166Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C166Ch case    8:*/		return 0x821C1670;
		  /* 821C1670h */ case    9:  		/* bl -329088 */
		/* 821C1670h case    9:*/		regs.LR = 0x821C1674; return 0x821710F0;
		/* 821C1670h case    9:*/		return 0x821C1674;
		  /* 821C1674h */ case   10:  		/* mr R4, R3 */
		/* 821C1674h case   10:*/		regs.R4 = regs.R3;
		/* 821C1674h case   10:*/		return 0x821C1678;
	}
	return 0x821C1678;
} // Block from 821C164Ch-821C1678h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1678h
// Function '?GetNext@?$ArrayListEnumerator@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAPAVInstruction@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1678);
		  /* 821C1678h */ case    0:  		/* mr R3, R31 */
		/* 821C1678h case    0:*/		regs.R3 = regs.R31;
		/* 821C1678h case    0:*/		return 0x821C167C;
		  /* 821C167Ch */ case    1:  		/* bl -300212 */
		/* 821C167Ch case    1:*/		regs.LR = 0x821C1680; return 0x821781C8;
		/* 821C167Ch case    1:*/		return 0x821C1680;
		  /* 821C1680h */ case    2:  		/* lwz R9, <#[R31 + 44]> */
		/* 821C1680h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1680h case    2:*/		return 0x821C1684;
		  /* 821C1684h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 821C1684h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C1684h case    3:*/		return 0x821C1688;
		  /* 821C1688h */ case    4:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C1688h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C1688h case    4:*/		return 0x821C168C;
		  /* 821C168Ch */ case    5:  		/* lwz R8, <#[R31 + 8]> */
		/* 821C168Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C168Ch case    5:*/		return 0x821C1690;
		  /* 821C1690h */ case    6:  		/* addi R10, R29, 24 */
		/* 821C1690h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x18);
		/* 821C1690h case    6:*/		return 0x821C1694;
		  /* 821C1694h */ case    7:  		/* addi R11, R11, 36 */
		/* 821C1694h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C1694h case    7:*/		return 0x821C1698;
		  /* 821C1698h */ case    8:  		/* addi R10, R10, -36 */
		/* 821C1698h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821C1698h case    8:*/		return 0x821C169C;
		  /* 821C169Ch */ case    9:  		/* lwz R9, <#[R9]> */
		/* 821C169Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821C169Ch case    9:*/		return 0x821C16A0;
		  /* 821C16A0h */ case   10:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821C16A0h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821C16A0h case   10:*/		return 0x821C16A4;
		  /* 821C16A4h */ case   11:  		/* rlwimi R8, R9, 14, 15, 17 */
		/* 821C16A4h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R8,regs.R9);
		/* 821C16A4h case   11:*/		return 0x821C16A8;
		  /* 821C16A8h */ case   12:  		/* addi R9, R11, -36 */
		/* 821C16A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821C16A8h case   12:*/		return 0x821C16AC;
		  /* 821C16ACh */ case   13:  		/* stw R8, <#[R31 + 8]> */
		/* 821C16ACh case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C16ACh case   13:*/		return 0x821C16B0;
		  /* 821C16B0h */ case   14:  		/* ori R8, R10, 1 */
		/* 821C16B0h case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C16B0h case   14:*/		return 0x821C16B4;
		  /* 821C16B4h */ case   15:  		/* lwz R7, <#[R29 + 24]> */
		/* 821C16B4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000018) );
		/* 821C16B4h case   15:*/		return 0x821C16B8;
		  /* 821C16B8h */ case   16:  		/* addi R10, R11, 4 */
		/* 821C16B8h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C16B8h case   16:*/		return 0x821C16BC;
		  /* 821C16BCh */ case   17:  		/* stw R7, <#[R11]> */
		/* 821C16BCh case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C16BCh case   17:*/		return 0x821C16C0;
		  /* 821C16C0h */ case   18:  		/* mr R3, R31 */
		/* 821C16C0h case   18:*/		regs.R3 = regs.R31;
		/* 821C16C0h case   18:*/		return 0x821C16C4;
		  /* 821C16C4h */ case   19:  		/* lwz R7, <#[R29 + 24]> */
		/* 821C16C4h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R29 + 0x00000018) );
		/* 821C16C4h case   19:*/		return 0x821C16C8;
		  /* 821C16C8h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C16C8h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C16C8h case   20:*/		return 0x821C16CC;
		  /* 821C16CCh */ case   21:  		/* stw R9, <#[R7]> */
		/* 821C16CCh case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821C16CCh case   21:*/		return 0x821C16D0;
	}
	return 0x821C16D0;
} // Block from 821C1678h-821C16D0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C16D0h
// Function '?AddToTail@?$DoubleLinkList@UArrayListEntry@?$ArrayList@UAttributeState@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$0A@@D3DXShader@@QAAXPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C16D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C16D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C16D0);
		  /* 821C16D0h */ case    0:  		/* stw R8, <#[R11 + 4]> */
		/* 821C16D0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C16D0h case    0:*/		return 0x821C16D4;
		  /* 821C16D4h */ case    1:  		/* stw R10, <#[R29 + 24]> */
		/* 821C16D4h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 821C16D4h case    1:*/		return 0x821C16D8;
		  /* 821C16D8h */ case    2:  		/* addi R1, R1, 144 */
		/* 821C16D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C16D8h case    2:*/		return 0x821C16DC;
		  /* 821C16DCh */ case    3:  		/* b -1246268 */
		/* 821C16DCh case    3:*/		return 0x820912A0;
		/* 821C16DCh case    3:*/		return 0x821C16E0;
	}
	return 0x821C16E0;
} // Block from 821C16D0h-821C16E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C16E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C16E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C16E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C16E0);
		  /* 821C16E0h */ case    0:  		/* mfspr R12, LR */
		/* 821C16E0h case    0:*/		regs.R12 = regs.LR;
		/* 821C16E0h case    0:*/		return 0x821C16E4;
		  /* 821C16E4h */ case    1:  		/* bl -1246356 */
		/* 821C16E4h case    1:*/		regs.LR = 0x821C16E8; return 0x82091250;
		/* 821C16E4h case    1:*/		return 0x821C16E8;
		  /* 821C16E8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C16E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C16E8h case    2:*/		return 0x821C16EC;
		  /* 821C16ECh */ case    3:  		/* mr R26, R4 */
		/* 821C16ECh case    3:*/		regs.R26 = regs.R4;
		/* 821C16ECh case    3:*/		return 0x821C16F0;
		  /* 821C16F0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C16F0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C16F0h case    4:*/		return 0x821C16F4;
		  /* 821C16F4h */ case    5:  		/* mr R27, R5 */
		/* 821C16F4h case    5:*/		regs.R27 = regs.R5;
		/* 821C16F4h case    5:*/		return 0x821C16F8;
		  /* 821C16F8h */ case    6:  		/* mr R30, R6 */
		/* 821C16F8h case    6:*/		regs.R30 = regs.R6;
		/* 821C16F8h case    6:*/		return 0x821C16FC;
		  /* 821C16FCh */ case    7:  		/* mr R28, R7 */
		/* 821C16FCh case    7:*/		regs.R28 = regs.R7;
		/* 821C16FCh case    7:*/		return 0x821C1700;
		  /* 821C1700h */ case    8:  		/* li R8, 4 */
		/* 821C1700h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1700h case    8:*/		return 0x821C1704;
		  /* 821C1704h */ case    9:  		/* li R7, 2 */
		/* 821C1704h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C1704h case    9:*/		return 0x821C1708;
		  /* 821C1708h */ case   10:  		/* li R6, 25 */
		/* 821C1708h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x19);
		/* 821C1708h case   10:*/		return 0x821C170C;
		  /* 821C170Ch */ case   11:  		/* li R5, 0 */
		/* 821C170Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C170Ch case   11:*/		return 0x821C1710;
		  /* 821C1710h */ case   12:  		/* mr R29, R3 */
		/* 821C1710h case   12:*/		regs.R29 = regs.R3;
		/* 821C1710h case   12:*/		return 0x821C1714;
		  /* 821C1714h */ case   13:  		/* bl 406148 */
		/* 821C1714h case   13:*/		regs.LR = 0x821C1718; return 0x82224998;
		/* 821C1714h case   13:*/		return 0x821C1718;
		  /* 821C1718h */ case   14:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1718h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1718h case   14:*/		return 0x821C171C;
		  /* 821C171Ch */ case   15:  		/* mr R31, R3 */
		/* 821C171Ch case   15:*/		regs.R31 = regs.R3;
		/* 821C171Ch case   15:*/		return 0x821C1720;
		  /* 821C1720h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C1720h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1720h case   16:*/		return 0x821C1724;
		  /* 821C1724h */ case   17:  		/* mr R4, R30 */
		/* 821C1724h case   17:*/		regs.R4 = regs.R30;
		/* 821C1724h case   17:*/		return 0x821C1728;
		  /* 821C1728h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1728h case   18:*/		if ( regs.CR[6].eq ) { return 0x821C173C;  }
		/* 821C1728h case   18:*/		return 0x821C172C;
		  /* 821C172Ch */ case   19:  		/* mr R3, R29 */
		/* 821C172Ch case   19:*/		regs.R3 = regs.R29;
		/* 821C172Ch case   19:*/		return 0x821C1730;
	}
	return 0x821C1730;
} // Block from 821C16E0h-821C1730h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C1730h
// Function '?MoveSideEffects@Block@D3DXShader@@QAAXW4SideEffect@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1730);
		  /* 821C1730h */ case    0:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1730h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1730h case    0:*/		return 0x821C1734;
		  /* 821C1734h */ case    1:  		/* bl -329284 */
		/* 821C1734h case    1:*/		regs.LR = 0x821C1738; return 0x821710F0;
		/* 821C1734h case    1:*/		return 0x821C1738;
		  /* 821C1738h */ case    2:  		/* mr R4, R3 */
		/* 821C1738h case    2:*/		regs.R4 = regs.R3;
		/* 821C1738h case    2:*/		return 0x821C173C;
	}
	return 0x821C173C;
} // Block from 821C1730h-821C173Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C173Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C173C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C173C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C173C);
		  /* 821C173Ch */ case    0:  		/* mr R3, R31 */
		/* 821C173Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C173Ch case    0:*/		return 0x821C1740;
		  /* 821C1740h */ case    1:  		/* bl -300408 */
		/* 821C1740h case    1:*/		regs.LR = 0x821C1744; return 0x821781C8;
		/* 821C1740h case    1:*/		return 0x821C1744;
		  /* 821C1744h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1744h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1744h case    2:*/		return 0x821C1748;
		  /* 821C1748h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C1748h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C1748h case    3:*/		return 0x821C174C;
		  /* 821C174Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C174Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C174Ch case    4:*/		return 0x821C1750;
		  /* 821C1750h */ case    5:  		/* mr R4, R28 */
		/* 821C1750h case    5:*/		regs.R4 = regs.R28;
		/* 821C1750h case    5:*/		return 0x821C1754;
		  /* 821C1754h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1754h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C1768;  }
		/* 821C1754h case    6:*/		return 0x821C1758;
		  /* 821C1758h */ case    7:  		/* mr R3, R29 */
		/* 821C1758h case    7:*/		regs.R3 = regs.R29;
		/* 821C1758h case    7:*/		return 0x821C175C;
		  /* 821C175Ch */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C175Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C175Ch case    8:*/		return 0x821C1760;
		  /* 821C1760h */ case    9:  		/* bl -329328 */
		/* 821C1760h case    9:*/		regs.LR = 0x821C1764; return 0x821710F0;
		/* 821C1760h case    9:*/		return 0x821C1764;
		  /* 821C1764h */ case   10:  		/* mr R4, R3 */
		/* 821C1764h case   10:*/		regs.R4 = regs.R3;
		/* 821C1764h case   10:*/		return 0x821C1768;
	}
	return 0x821C1768;
} // Block from 821C173Ch-821C1768h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C1768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1768);
		  /* 821C1768h */ case    0:  		/* mr R3, R31 */
		/* 821C1768h case    0:*/		regs.R3 = regs.R31;
		/* 821C1768h case    0:*/		return 0x821C176C;
		  /* 821C176Ch */ case    1:  		/* bl -300452 */
		/* 821C176Ch case    1:*/		regs.LR = 0x821C1770; return 0x821781C8;
		/* 821C176Ch case    1:*/		return 0x821C1770;
		  /* 821C1770h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C1770h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1770h case    2:*/		return 0x821C1774;
		  /* 821C1774h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C1774h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C1774h case    3:*/		return 0x821C1778;
		  /* 821C1778h */ case    4:  		/* mr R6, R27 */
		/* 821C1778h case    4:*/		regs.R6 = regs.R27;
		/* 821C1778h case    4:*/		return 0x821C177C;
		  /* 821C177Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C177Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C177Ch case    5:*/		return 0x821C1780;
		  /* 821C1780h */ case    6:  		/* mr R5, R26 */
		/* 821C1780h case    6:*/		regs.R5 = regs.R26;
		/* 821C1780h case    6:*/		return 0x821C1784;
		  /* 821C1784h */ case    7:  		/* mr R4, R31 */
		/* 821C1784h case    7:*/		regs.R4 = regs.R31;
		/* 821C1784h case    7:*/		return 0x821C1788;
		  /* 821C1788h */ case    8:  		/* mr R3, R29 */
		/* 821C1788h case    8:*/		regs.R3 = regs.R29;
		/* 821C1788h case    8:*/		return 0x821C178C;
		  /* 821C178Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C178Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C178Ch case    9:*/		return 0x821C1790;
		  /* 821C1790h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1790h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1790h case   10:*/		return 0x821C1794;
		  /* 821C1794h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1794h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1794h case   11:*/		return 0x821C1798;
		  /* 821C1798h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1798h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1798h case   12:*/		return 0x821C179C;
		  /* 821C179Ch */ case   13:  		/* bl -346356 */
		/* 821C179Ch case   13:*/		regs.LR = 0x821C17A0; return 0x8216CEA8;
		/* 821C179Ch case   13:*/		return 0x821C17A0;
		  /* 821C17A0h */ case   14:  		/* mr R3, R31 */
		/* 821C17A0h case   14:*/		regs.R3 = regs.R31;
		/* 821C17A0h case   14:*/		return 0x821C17A4;
		  /* 821C17A4h */ case   15:  		/* addi R1, R1, 144 */
		/* 821C17A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C17A4h case   15:*/		return 0x821C17A8;
		  /* 821C17A8h */ case   16:  		/* b -1246472 */
		/* 821C17A8h case   16:*/		return 0x820912A0;
		/* 821C17A8h case   16:*/		return 0x821C17AC;
		  /* 821C17ACh */ case   17:  		/* nop */
		/* 821C17ACh case   17:*/		cpu::op::nop();
		/* 821C17ACh case   17:*/		return 0x821C17B0;
	}
	return 0x821C17B0;
} // Block from 821C1768h-821C17B0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C17B0h
// Function '?MakeInstr_V_ADD@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAVDependency@2@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C17B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C17B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C17B0);
		  /* 821C17B0h */ case    0:  		/* mfspr R12, LR */
		/* 821C17B0h case    0:*/		regs.R12 = regs.LR;
		/* 821C17B0h case    0:*/		return 0x821C17B4;
		  /* 821C17B4h */ case    1:  		/* bl -1246560 */
		/* 821C17B4h case    1:*/		regs.LR = 0x821C17B8; return 0x82091254;
		/* 821C17B4h case    1:*/		return 0x821C17B8;
		  /* 821C17B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C17B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C17B8h case    2:*/		return 0x821C17BC;
		  /* 821C17BCh */ case    3:  		/* mr R27, R4 */
		/* 821C17BCh case    3:*/		regs.R27 = regs.R4;
		/* 821C17BCh case    3:*/		return 0x821C17C0;
		  /* 821C17C0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C17C0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C17C0h case    4:*/		return 0x821C17C4;
		  /* 821C17C4h */ case    5:  		/* mr R28, R5 */
		/* 821C17C4h case    5:*/		regs.R28 = regs.R5;
		/* 821C17C4h case    5:*/		return 0x821C17C8;
		  /* 821C17C8h */ case    6:  		/* mr R30, R6 */
		/* 821C17C8h case    6:*/		regs.R30 = regs.R6;
		/* 821C17C8h case    6:*/		return 0x821C17CC;
		  /* 821C17CCh */ case    7:  		/* li R8, 1 */
		/* 821C17CCh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C17CCh case    7:*/		return 0x821C17D0;
		  /* 821C17D0h */ case    8:  		/* li R7, 1 */
		/* 821C17D0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C17D0h case    8:*/		return 0x821C17D4;
		  /* 821C17D4h */ case    9:  		/* li R6, 48 */
		/* 821C17D4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x30);
		/* 821C17D4h case    9:*/		return 0x821C17D8;
		  /* 821C17D8h */ case   10:  		/* li R5, 0 */
		/* 821C17D8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C17D8h case   10:*/		return 0x821C17DC;
		  /* 821C17DCh */ case   11:  		/* mr R29, R3 */
		/* 821C17DCh case   11:*/		regs.R29 = regs.R3;
		/* 821C17DCh case   11:*/		return 0x821C17E0;
		  /* 821C17E0h */ case   12:  		/* bl 405944 */
		/* 821C17E0h case   12:*/		regs.LR = 0x821C17E4; return 0x82224998;
		/* 821C17E0h case   12:*/		return 0x821C17E4;
		  /* 821C17E4h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C17E4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C17E4h case   13:*/		return 0x821C17E8;
		  /* 821C17E8h */ case   14:  		/* mr R31, R3 */
		/* 821C17E8h case   14:*/		regs.R31 = regs.R3;
		/* 821C17E8h case   14:*/		return 0x821C17EC;
		  /* 821C17ECh */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C17ECh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C17ECh case   15:*/		return 0x821C17F0;
		  /* 821C17F0h */ case   16:  		/* mr R4, R30 */
		/* 821C17F0h case   16:*/		regs.R4 = regs.R30;
		/* 821C17F0h case   16:*/		return 0x821C17F4;
		  /* 821C17F4h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C17F4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1808;  }
		/* 821C17F4h case   17:*/		return 0x821C17F8;
		  /* 821C17F8h */ case   18:  		/* mr R3, R29 */
		/* 821C17F8h case   18:*/		regs.R3 = regs.R29;
		/* 821C17F8h case   18:*/		return 0x821C17FC;
		  /* 821C17FCh */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C17FCh case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C17FCh case   19:*/		return 0x821C1800;
		  /* 821C1800h */ case   20:  		/* bl -329488 */
		/* 821C1800h case   20:*/		regs.LR = 0x821C1804; return 0x821710F0;
		/* 821C1800h case   20:*/		return 0x821C1804;
		  /* 821C1804h */ case   21:  		/* mr R4, R3 */
		/* 821C1804h case   21:*/		regs.R4 = regs.R3;
		/* 821C1804h case   21:*/		return 0x821C1808;
	}
	return 0x821C1808;
} // Block from 821C17B0h-821C1808h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1808);
		  /* 821C1808h */ case    0:  		/* mr R3, R31 */
		/* 821C1808h case    0:*/		regs.R3 = regs.R31;
		/* 821C1808h case    0:*/		return 0x821C180C;
		  /* 821C180Ch */ case    1:  		/* bl -300612 */
		/* 821C180Ch case    1:*/		regs.LR = 0x821C1810; return 0x821781C8;
		/* 821C180Ch case    1:*/		return 0x821C1810;
		  /* 821C1810h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1810h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1810h case    2:*/		return 0x821C1814;
		  /* 821C1814h */ case    3:  		/* mr R6, R28 */
		/* 821C1814h case    3:*/		regs.R6 = regs.R28;
		/* 821C1814h case    3:*/		return 0x821C1818;
		  /* 821C1818h */ case    4:  		/* mr R5, R27 */
		/* 821C1818h case    4:*/		regs.R5 = regs.R27;
		/* 821C1818h case    4:*/		return 0x821C181C;
		  /* 821C181Ch */ case    5:  		/* mr R4, R31 */
		/* 821C181Ch case    5:*/		regs.R4 = regs.R31;
		/* 821C181Ch case    5:*/		return 0x821C1820;
		  /* 821C1820h */ case    6:  		/* mr R3, R29 */
		/* 821C1820h case    6:*/		regs.R3 = regs.R29;
		/* 821C1820h case    6:*/		return 0x821C1824;
		  /* 821C1824h */ case    7:  		/* bl -346492 */
		/* 821C1824h case    7:*/		regs.LR = 0x821C1828; return 0x8216CEA8;
		/* 821C1824h case    7:*/		return 0x821C1828;
		  /* 821C1828h */ case    8:  		/* mr R3, R31 */
		/* 821C1828h case    8:*/		regs.R3 = regs.R31;
		/* 821C1828h case    8:*/		return 0x821C182C;
		  /* 821C182Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 821C182Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C182Ch case    9:*/		return 0x821C1830;
		  /* 821C1830h */ case   10:  		/* b -1246604 */
		/* 821C1830h case   10:*/		return 0x820912A4;
		/* 821C1830h case   10:*/		return 0x821C1834;
		  /* 821C1834h */ case   11:  		/* nop */
		/* 821C1834h case   11:*/		cpu::op::nop();
		/* 821C1834h case   11:*/		return 0x821C1838;
	}
	return 0x821C1838;
} // Block from 821C1808h-821C1838h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1838);
		  /* 821C1838h */ case    0:  		/* mfspr R12, LR */
		/* 821C1838h case    0:*/		regs.R12 = regs.LR;
		/* 821C1838h case    0:*/		return 0x821C183C;
		  /* 821C183Ch */ case    1:  		/* bl -1246696 */
		/* 821C183Ch case    1:*/		regs.LR = 0x821C1840; return 0x82091254;
		/* 821C183Ch case    1:*/		return 0x821C1840;
		  /* 821C1840h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1840h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1840h case    2:*/		return 0x821C1844;
		  /* 821C1844h */ case    3:  		/* mr R27, R4 */
		/* 821C1844h case    3:*/		regs.R27 = regs.R4;
		/* 821C1844h case    3:*/		return 0x821C1848;
		  /* 821C1848h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1848h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1848h case    4:*/		return 0x821C184C;
		  /* 821C184Ch */ case    5:  		/* mr R28, R5 */
		/* 821C184Ch case    5:*/		regs.R28 = regs.R5;
		/* 821C184Ch case    5:*/		return 0x821C1850;
		  /* 821C1850h */ case    6:  		/* mr R30, R6 */
		/* 821C1850h case    6:*/		regs.R30 = regs.R6;
		/* 821C1850h case    6:*/		return 0x821C1854;
		  /* 821C1854h */ case    7:  		/* li R8, 1 */
		/* 821C1854h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1854h case    7:*/		return 0x821C1858;
		  /* 821C1858h */ case    8:  		/* li R7, 1 */
		/* 821C1858h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1858h case    8:*/		return 0x821C185C;
		  /* 821C185Ch */ case    9:  		/* li R6, 51 */
		/* 821C185Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x33);
		/* 821C185Ch case    9:*/		return 0x821C1860;
		  /* 821C1860h */ case   10:  		/* li R5, 0 */
		/* 821C1860h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1860h case   10:*/		return 0x821C1864;
		  /* 821C1864h */ case   11:  		/* mr R29, R3 */
		/* 821C1864h case   11:*/		regs.R29 = regs.R3;
		/* 821C1864h case   11:*/		return 0x821C1868;
		  /* 821C1868h */ case   12:  		/* bl 405808 */
		/* 821C1868h case   12:*/		regs.LR = 0x821C186C; return 0x82224998;
		/* 821C1868h case   12:*/		return 0x821C186C;
		  /* 821C186Ch */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C186Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C186Ch case   13:*/		return 0x821C1870;
		  /* 821C1870h */ case   14:  		/* mr R31, R3 */
		/* 821C1870h case   14:*/		regs.R31 = regs.R3;
		/* 821C1870h case   14:*/		return 0x821C1874;
		  /* 821C1874h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1874h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1874h case   15:*/		return 0x821C1878;
		  /* 821C1878h */ case   16:  		/* mr R4, R30 */
		/* 821C1878h case   16:*/		regs.R4 = regs.R30;
		/* 821C1878h case   16:*/		return 0x821C187C;
		  /* 821C187Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C187Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1890;  }
		/* 821C187Ch case   17:*/		return 0x821C1880;
		  /* 821C1880h */ case   18:  		/* mr R3, R29 */
		/* 821C1880h case   18:*/		regs.R3 = regs.R29;
		/* 821C1880h case   18:*/		return 0x821C1884;
		  /* 821C1884h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1884h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1884h case   19:*/		return 0x821C1888;
		  /* 821C1888h */ case   20:  		/* bl -329624 */
		/* 821C1888h case   20:*/		regs.LR = 0x821C188C; return 0x821710F0;
		/* 821C1888h case   20:*/		return 0x821C188C;
		  /* 821C188Ch */ case   21:  		/* mr R4, R3 */
		/* 821C188Ch case   21:*/		regs.R4 = regs.R3;
		/* 821C188Ch case   21:*/		return 0x821C1890;
	}
	return 0x821C1890;
} // Block from 821C1838h-821C1890h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1890);
		  /* 821C1890h */ case    0:  		/* mr R3, R31 */
		/* 821C1890h case    0:*/		regs.R3 = regs.R31;
		/* 821C1890h case    0:*/		return 0x821C1894;
		  /* 821C1894h */ case    1:  		/* bl -300748 */
		/* 821C1894h case    1:*/		regs.LR = 0x821C1898; return 0x821781C8;
		/* 821C1894h case    1:*/		return 0x821C1898;
	}
	return 0x821C1898;
} // Block from 821C1890h-821C1898h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C1898h
// Function '?MakeInstr_V_ADD@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1898);
		  /* 821C1898h */ case    0:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1898h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1898h case    0:*/		return 0x821C189C;
		  /* 821C189Ch */ case    1:  		/* mr R6, R28 */
		/* 821C189Ch case    1:*/		regs.R6 = regs.R28;
		/* 821C189Ch case    1:*/		return 0x821C18A0;
		  /* 821C18A0h */ case    2:  		/* mr R5, R27 */
		/* 821C18A0h case    2:*/		regs.R5 = regs.R27;
		/* 821C18A0h case    2:*/		return 0x821C18A4;
		  /* 821C18A4h */ case    3:  		/* mr R4, R31 */
		/* 821C18A4h case    3:*/		regs.R4 = regs.R31;
		/* 821C18A4h case    3:*/		return 0x821C18A8;
		  /* 821C18A8h */ case    4:  		/* mr R3, R29 */
		/* 821C18A8h case    4:*/		regs.R3 = regs.R29;
		/* 821C18A8h case    4:*/		return 0x821C18AC;
		  /* 821C18ACh */ case    5:  		/* bl -346628 */
		/* 821C18ACh case    5:*/		regs.LR = 0x821C18B0; return 0x8216CEA8;
		/* 821C18ACh case    5:*/		return 0x821C18B0;
		  /* 821C18B0h */ case    6:  		/* mr R3, R31 */
		/* 821C18B0h case    6:*/		regs.R3 = regs.R31;
		/* 821C18B0h case    6:*/		return 0x821C18B4;
		  /* 821C18B4h */ case    7:  		/* addi R1, R1, 128 */
		/* 821C18B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C18B4h case    7:*/		return 0x821C18B8;
		  /* 821C18B8h */ case    8:  		/* b -1246740 */
		/* 821C18B8h case    8:*/		return 0x820912A4;
		/* 821C18B8h case    8:*/		return 0x821C18BC;
		  /* 821C18BCh */ case    9:  		/* nop */
		/* 821C18BCh case    9:*/		cpu::op::nop();
		/* 821C18BCh case    9:*/		return 0x821C18C0;
	}
	return 0x821C18C0;
} // Block from 821C1898h-821C18C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C18C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C18C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C18C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C18C0);
		  /* 821C18C0h */ case    0:  		/* mfspr R12, LR */
		/* 821C18C0h case    0:*/		regs.R12 = regs.LR;
		/* 821C18C0h case    0:*/		return 0x821C18C4;
		  /* 821C18C4h */ case    1:  		/* bl -1246832 */
		/* 821C18C4h case    1:*/		regs.LR = 0x821C18C8; return 0x82091254;
		/* 821C18C4h case    1:*/		return 0x821C18C8;
		  /* 821C18C8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C18C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C18C8h case    2:*/		return 0x821C18CC;
		  /* 821C18CCh */ case    3:  		/* mr R27, R4 */
		/* 821C18CCh case    3:*/		regs.R27 = regs.R4;
		/* 821C18CCh case    3:*/		return 0x821C18D0;
		  /* 821C18D0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C18D0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C18D0h case    4:*/		return 0x821C18D4;
		  /* 821C18D4h */ case    5:  		/* mr R28, R5 */
		/* 821C18D4h case    5:*/		regs.R28 = regs.R5;
		/* 821C18D4h case    5:*/		return 0x821C18D8;
		  /* 821C18D8h */ case    6:  		/* mr R30, R6 */
		/* 821C18D8h case    6:*/		regs.R30 = regs.R6;
		/* 821C18D8h case    6:*/		return 0x821C18DC;
		  /* 821C18DCh */ case    7:  		/* li R8, 1 */
		/* 821C18DCh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C18DCh case    7:*/		return 0x821C18E0;
		  /* 821C18E0h */ case    8:  		/* li R7, 1 */
		/* 821C18E0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C18E0h case    8:*/		return 0x821C18E4;
		  /* 821C18E4h */ case    9:  		/* li R6, 54 */
		/* 821C18E4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x36);
		/* 821C18E4h case    9:*/		return 0x821C18E8;
		  /* 821C18E8h */ case   10:  		/* li R5, 0 */
		/* 821C18E8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C18E8h case   10:*/		return 0x821C18EC;
		  /* 821C18ECh */ case   11:  		/* mr R29, R3 */
		/* 821C18ECh case   11:*/		regs.R29 = regs.R3;
		/* 821C18ECh case   11:*/		return 0x821C18F0;
		  /* 821C18F0h */ case   12:  		/* bl 405672 */
		/* 821C18F0h case   12:*/		regs.LR = 0x821C18F4; return 0x82224998;
		/* 821C18F0h case   12:*/		return 0x821C18F4;
		  /* 821C18F4h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C18F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C18F4h case   13:*/		return 0x821C18F8;
		  /* 821C18F8h */ case   14:  		/* mr R31, R3 */
		/* 821C18F8h case   14:*/		regs.R31 = regs.R3;
		/* 821C18F8h case   14:*/		return 0x821C18FC;
		  /* 821C18FCh */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C18FCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C18FCh case   15:*/		return 0x821C1900;
		  /* 821C1900h */ case   16:  		/* mr R4, R30 */
		/* 821C1900h case   16:*/		regs.R4 = regs.R30;
		/* 821C1900h case   16:*/		return 0x821C1904;
		  /* 821C1904h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1904h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1918;  }
		/* 821C1904h case   17:*/		return 0x821C1908;
		  /* 821C1908h */ case   18:  		/* mr R3, R29 */
		/* 821C1908h case   18:*/		regs.R3 = regs.R29;
		/* 821C1908h case   18:*/		return 0x821C190C;
		  /* 821C190Ch */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C190Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C190Ch case   19:*/		return 0x821C1910;
		  /* 821C1910h */ case   20:  		/* bl -329760 */
		/* 821C1910h case   20:*/		regs.LR = 0x821C1914; return 0x821710F0;
		/* 821C1910h case   20:*/		return 0x821C1914;
		  /* 821C1914h */ case   21:  		/* mr R4, R3 */
		/* 821C1914h case   21:*/		regs.R4 = regs.R3;
		/* 821C1914h case   21:*/		return 0x821C1918;
	}
	return 0x821C1918;
} // Block from 821C18C0h-821C1918h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1918);
		  /* 821C1918h */ case    0:  		/* mr R3, R31 */
		/* 821C1918h case    0:*/		regs.R3 = regs.R31;
		/* 821C1918h case    0:*/		return 0x821C191C;
		  /* 821C191Ch */ case    1:  		/* bl -300884 */
		/* 821C191Ch case    1:*/		regs.LR = 0x821C1920; return 0x821781C8;
		/* 821C191Ch case    1:*/		return 0x821C1920;
		  /* 821C1920h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1920h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1920h case    2:*/		return 0x821C1924;
		  /* 821C1924h */ case    3:  		/* mr R6, R28 */
		/* 821C1924h case    3:*/		regs.R6 = regs.R28;
		/* 821C1924h case    3:*/		return 0x821C1928;
		  /* 821C1928h */ case    4:  		/* mr R5, R27 */
		/* 821C1928h case    4:*/		regs.R5 = regs.R27;
		/* 821C1928h case    4:*/		return 0x821C192C;
		  /* 821C192Ch */ case    5:  		/* mr R4, R31 */
		/* 821C192Ch case    5:*/		regs.R4 = regs.R31;
		/* 821C192Ch case    5:*/		return 0x821C1930;
		  /* 821C1930h */ case    6:  		/* mr R3, R29 */
		/* 821C1930h case    6:*/		regs.R3 = regs.R29;
		/* 821C1930h case    6:*/		return 0x821C1934;
		  /* 821C1934h */ case    7:  		/* bl -346764 */
		/* 821C1934h case    7:*/		regs.LR = 0x821C1938; return 0x8216CEA8;
		/* 821C1934h case    7:*/		return 0x821C1938;
		  /* 821C1938h */ case    8:  		/* mr R3, R31 */
		/* 821C1938h case    8:*/		regs.R3 = regs.R31;
		/* 821C1938h case    8:*/		return 0x821C193C;
		  /* 821C193Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 821C193Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C193Ch case    9:*/		return 0x821C1940;
		  /* 821C1940h */ case   10:  		/* b -1246876 */
		/* 821C1940h case   10:*/		return 0x820912A4;
		/* 821C1940h case   10:*/		return 0x821C1944;
		  /* 821C1944h */ case   11:  		/* nop */
		/* 821C1944h case   11:*/		cpu::op::nop();
		/* 821C1944h case   11:*/		return 0x821C1948;
	}
	return 0x821C1948;
} // Block from 821C1918h-821C1948h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1948);
		  /* 821C1948h */ case    0:  		/* mfspr R12, LR */
		/* 821C1948h case    0:*/		regs.R12 = regs.LR;
		/* 821C1948h case    0:*/		return 0x821C194C;
		  /* 821C194Ch */ case    1:  		/* bl -1246968 */
		/* 821C194Ch case    1:*/		regs.LR = 0x821C1950; return 0x82091254;
		/* 821C194Ch case    1:*/		return 0x821C1950;
		  /* 821C1950h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1950h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1950h case    2:*/		return 0x821C1954;
		  /* 821C1954h */ case    3:  		/* mr R27, R4 */
		/* 821C1954h case    3:*/		regs.R27 = regs.R4;
		/* 821C1954h case    3:*/		return 0x821C1958;
		  /* 821C1958h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1958h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1958h case    4:*/		return 0x821C195C;
		  /* 821C195Ch */ case    5:  		/* mr R28, R5 */
		/* 821C195Ch case    5:*/		regs.R28 = regs.R5;
		/* 821C195Ch case    5:*/		return 0x821C1960;
		  /* 821C1960h */ case    6:  		/* mr R30, R6 */
		/* 821C1960h case    6:*/		regs.R30 = regs.R6;
		/* 821C1960h case    6:*/		return 0x821C1964;
		  /* 821C1964h */ case    7:  		/* li R8, 1 */
		/* 821C1964h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1964h case    7:*/		return 0x821C1968;
		  /* 821C1968h */ case    8:  		/* li R7, 1 */
		/* 821C1968h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1968h case    8:*/		return 0x821C196C;
		  /* 821C196Ch */ case    9:  		/* li R6, 55 */
		/* 821C196Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x37);
		/* 821C196Ch case    9:*/		return 0x821C1970;
		  /* 821C1970h */ case   10:  		/* li R5, 0 */
		/* 821C1970h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1970h case   10:*/		return 0x821C1974;
		  /* 821C1974h */ case   11:  		/* mr R29, R3 */
		/* 821C1974h case   11:*/		regs.R29 = regs.R3;
		/* 821C1974h case   11:*/		return 0x821C1978;
		  /* 821C1978h */ case   12:  		/* bl 405536 */
		/* 821C1978h case   12:*/		regs.LR = 0x821C197C; return 0x82224998;
		/* 821C1978h case   12:*/		return 0x821C197C;
		  /* 821C197Ch */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C197Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C197Ch case   13:*/		return 0x821C1980;
		  /* 821C1980h */ case   14:  		/* mr R31, R3 */
		/* 821C1980h case   14:*/		regs.R31 = regs.R3;
		/* 821C1980h case   14:*/		return 0x821C1984;
		  /* 821C1984h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1984h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1984h case   15:*/		return 0x821C1988;
	}
	return 0x821C1988;
} // Block from 821C1948h-821C1988h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C1988h
// Function '?MakeInstr_V_MUL@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1988);
		  /* 821C1988h */ case    0:  		/* mr R4, R30 */
		/* 821C1988h case    0:*/		regs.R4 = regs.R30;
		/* 821C1988h case    0:*/		return 0x821C198C;
		  /* 821C198Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821C198Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821C19A0;  }
		/* 821C198Ch case    1:*/		return 0x821C1990;
		  /* 821C1990h */ case    2:  		/* mr R3, R29 */
		/* 821C1990h case    2:*/		regs.R3 = regs.R29;
		/* 821C1990h case    2:*/		return 0x821C1994;
		  /* 821C1994h */ case    3:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1994h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1994h case    3:*/		return 0x821C1998;
		  /* 821C1998h */ case    4:  		/* bl -329896 */
		/* 821C1998h case    4:*/		regs.LR = 0x821C199C; return 0x821710F0;
		/* 821C1998h case    4:*/		return 0x821C199C;
		  /* 821C199Ch */ case    5:  		/* mr R4, R3 */
		/* 821C199Ch case    5:*/		regs.R4 = regs.R3;
		/* 821C199Ch case    5:*/		return 0x821C19A0;
	}
	return 0x821C19A0;
} // Block from 821C1988h-821C19A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C19A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C19A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C19A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C19A0);
		  /* 821C19A0h */ case    0:  		/* mr R3, R31 */
		/* 821C19A0h case    0:*/		regs.R3 = regs.R31;
		/* 821C19A0h case    0:*/		return 0x821C19A4;
		  /* 821C19A4h */ case    1:  		/* bl -301020 */
		/* 821C19A4h case    1:*/		regs.LR = 0x821C19A8; return 0x821781C8;
		/* 821C19A4h case    1:*/		return 0x821C19A8;
		  /* 821C19A8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C19A8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C19A8h case    2:*/		return 0x821C19AC;
		  /* 821C19ACh */ case    3:  		/* mr R6, R28 */
		/* 821C19ACh case    3:*/		regs.R6 = regs.R28;
		/* 821C19ACh case    3:*/		return 0x821C19B0;
		  /* 821C19B0h */ case    4:  		/* mr R5, R27 */
		/* 821C19B0h case    4:*/		regs.R5 = regs.R27;
		/* 821C19B0h case    4:*/		return 0x821C19B4;
		  /* 821C19B4h */ case    5:  		/* mr R4, R31 */
		/* 821C19B4h case    5:*/		regs.R4 = regs.R31;
		/* 821C19B4h case    5:*/		return 0x821C19B8;
		  /* 821C19B8h */ case    6:  		/* mr R3, R29 */
		/* 821C19B8h case    6:*/		regs.R3 = regs.R29;
		/* 821C19B8h case    6:*/		return 0x821C19BC;
		  /* 821C19BCh */ case    7:  		/* bl -346900 */
		/* 821C19BCh case    7:*/		regs.LR = 0x821C19C0; return 0x8216CEA8;
		/* 821C19BCh case    7:*/		return 0x821C19C0;
		  /* 821C19C0h */ case    8:  		/* mr R3, R31 */
		/* 821C19C0h case    8:*/		regs.R3 = regs.R31;
		/* 821C19C0h case    8:*/		return 0x821C19C4;
		  /* 821C19C4h */ case    9:  		/* addi R1, R1, 128 */
		/* 821C19C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C19C4h case    9:*/		return 0x821C19C8;
		  /* 821C19C8h */ case   10:  		/* b -1247012 */
		/* 821C19C8h case   10:*/		return 0x820912A4;
		/* 821C19C8h case   10:*/		return 0x821C19CC;
		  /* 821C19CCh */ case   11:  		/* nop */
		/* 821C19CCh case   11:*/		cpu::op::nop();
		/* 821C19CCh case   11:*/		return 0x821C19D0;
	}
	return 0x821C19D0;
} // Block from 821C19A0h-821C19D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C19D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C19D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C19D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C19D0);
		  /* 821C19D0h */ case    0:  		/* mfspr R12, LR */
		/* 821C19D0h case    0:*/		regs.R12 = regs.LR;
		/* 821C19D0h case    0:*/		return 0x821C19D4;
		  /* 821C19D4h */ case    1:  		/* bl -1247104 */
		/* 821C19D4h case    1:*/		regs.LR = 0x821C19D8; return 0x82091254;
		/* 821C19D4h case    1:*/		return 0x821C19D8;
		  /* 821C19D8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C19D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C19D8h case    2:*/		return 0x821C19DC;
		  /* 821C19DCh */ case    3:  		/* mr R27, R4 */
		/* 821C19DCh case    3:*/		regs.R27 = regs.R4;
		/* 821C19DCh case    3:*/		return 0x821C19E0;
		  /* 821C19E0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C19E0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C19E0h case    4:*/		return 0x821C19E4;
		  /* 821C19E4h */ case    5:  		/* mr R28, R5 */
		/* 821C19E4h case    5:*/		regs.R28 = regs.R5;
		/* 821C19E4h case    5:*/		return 0x821C19E8;
		  /* 821C19E8h */ case    6:  		/* mr R30, R6 */
		/* 821C19E8h case    6:*/		regs.R30 = regs.R6;
		/* 821C19E8h case    6:*/		return 0x821C19EC;
		  /* 821C19ECh */ case    7:  		/* li R8, 1 */
		/* 821C19ECh case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C19ECh case    7:*/		return 0x821C19F0;
		  /* 821C19F0h */ case    8:  		/* li R7, 1 */
		/* 821C19F0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C19F0h case    8:*/		return 0x821C19F4;
		  /* 821C19F4h */ case    9:  		/* li R6, 59 */
		/* 821C19F4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x3B);
		/* 821C19F4h case    9:*/		return 0x821C19F8;
		  /* 821C19F8h */ case   10:  		/* li R5, 0 */
		/* 821C19F8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C19F8h case   10:*/		return 0x821C19FC;
		  /* 821C19FCh */ case   11:  		/* mr R29, R3 */
		/* 821C19FCh case   11:*/		regs.R29 = regs.R3;
		/* 821C19FCh case   11:*/		return 0x821C1A00;
		  /* 821C1A00h */ case   12:  		/* bl 405400 */
		/* 821C1A00h case   12:*/		regs.LR = 0x821C1A04; return 0x82224998;
		/* 821C1A00h case   12:*/		return 0x821C1A04;
		  /* 821C1A04h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1A04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1A04h case   13:*/		return 0x821C1A08;
		  /* 821C1A08h */ case   14:  		/* mr R31, R3 */
		/* 821C1A08h case   14:*/		regs.R31 = regs.R3;
		/* 821C1A08h case   14:*/		return 0x821C1A0C;
		  /* 821C1A0Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1A0Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1A0Ch case   15:*/		return 0x821C1A10;
		  /* 821C1A10h */ case   16:  		/* mr R4, R30 */
		/* 821C1A10h case   16:*/		regs.R4 = regs.R30;
		/* 821C1A10h case   16:*/		return 0x821C1A14;
		  /* 821C1A14h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1A14h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1A28;  }
		/* 821C1A14h case   17:*/		return 0x821C1A18;
		  /* 821C1A18h */ case   18:  		/* mr R3, R29 */
		/* 821C1A18h case   18:*/		regs.R3 = regs.R29;
		/* 821C1A18h case   18:*/		return 0x821C1A1C;
		  /* 821C1A1Ch */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1A1Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1A1Ch case   19:*/		return 0x821C1A20;
		  /* 821C1A20h */ case   20:  		/* bl -330032 */
		/* 821C1A20h case   20:*/		regs.LR = 0x821C1A24; return 0x821710F0;
		/* 821C1A20h case   20:*/		return 0x821C1A24;
		  /* 821C1A24h */ case   21:  		/* mr R4, R3 */
		/* 821C1A24h case   21:*/		regs.R4 = regs.R3;
		/* 821C1A24h case   21:*/		return 0x821C1A28;
	}
	return 0x821C1A28;
} // Block from 821C19D0h-821C1A28h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1A28);
		  /* 821C1A28h */ case    0:  		/* mr R3, R31 */
		/* 821C1A28h case    0:*/		regs.R3 = regs.R31;
		/* 821C1A28h case    0:*/		return 0x821C1A2C;
		  /* 821C1A2Ch */ case    1:  		/* bl -301156 */
		/* 821C1A2Ch case    1:*/		regs.LR = 0x821C1A30; return 0x821781C8;
		/* 821C1A2Ch case    1:*/		return 0x821C1A30;
		  /* 821C1A30h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1A30h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1A30h case    2:*/		return 0x821C1A34;
		  /* 821C1A34h */ case    3:  		/* mr R6, R28 */
		/* 821C1A34h case    3:*/		regs.R6 = regs.R28;
		/* 821C1A34h case    3:*/		return 0x821C1A38;
		  /* 821C1A38h */ case    4:  		/* mr R5, R27 */
		/* 821C1A38h case    4:*/		regs.R5 = regs.R27;
		/* 821C1A38h case    4:*/		return 0x821C1A3C;
		  /* 821C1A3Ch */ case    5:  		/* mr R4, R31 */
		/* 821C1A3Ch case    5:*/		regs.R4 = regs.R31;
		/* 821C1A3Ch case    5:*/		return 0x821C1A40;
		  /* 821C1A40h */ case    6:  		/* mr R3, R29 */
		/* 821C1A40h case    6:*/		regs.R3 = regs.R29;
		/* 821C1A40h case    6:*/		return 0x821C1A44;
		  /* 821C1A44h */ case    7:  		/* bl -347036 */
		/* 821C1A44h case    7:*/		regs.LR = 0x821C1A48; return 0x8216CEA8;
		/* 821C1A44h case    7:*/		return 0x821C1A48;
		  /* 821C1A48h */ case    8:  		/* mr R3, R31 */
		/* 821C1A48h case    8:*/		regs.R3 = regs.R31;
		/* 821C1A48h case    8:*/		return 0x821C1A4C;
		  /* 821C1A4Ch */ case    9:  		/* addi R1, R1, 128 */
		/* 821C1A4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1A4Ch case    9:*/		return 0x821C1A50;
		  /* 821C1A50h */ case   10:  		/* b -1247148 */
		/* 821C1A50h case   10:*/		return 0x820912A4;
		/* 821C1A50h case   10:*/		return 0x821C1A54;
		  /* 821C1A54h */ case   11:  		/* nop */
		/* 821C1A54h case   11:*/		cpu::op::nop();
		/* 821C1A54h case   11:*/		return 0x821C1A58;
	}
	return 0x821C1A58;
} // Block from 821C1A28h-821C1A58h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1A58h
// Function '?MakeInstr_V_SETGT@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1A58);
		  /* 821C1A58h */ case    0:  		/* mfspr R12, LR */
		/* 821C1A58h case    0:*/		regs.R12 = regs.LR;
		/* 821C1A58h case    0:*/		return 0x821C1A5C;
		  /* 821C1A5Ch */ case    1:  		/* bl -1247240 */
		/* 821C1A5Ch case    1:*/		regs.LR = 0x821C1A60; return 0x82091254;
		/* 821C1A5Ch case    1:*/		return 0x821C1A60;
		  /* 821C1A60h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1A60h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1A60h case    2:*/		return 0x821C1A64;
		  /* 821C1A64h */ case    3:  		/* mr R27, R4 */
		/* 821C1A64h case    3:*/		regs.R27 = regs.R4;
		/* 821C1A64h case    3:*/		return 0x821C1A68;
		  /* 821C1A68h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1A68h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1A68h case    4:*/		return 0x821C1A6C;
		  /* 821C1A6Ch */ case    5:  		/* mr R28, R5 */
		/* 821C1A6Ch case    5:*/		regs.R28 = regs.R5;
		/* 821C1A6Ch case    5:*/		return 0x821C1A70;
		  /* 821C1A70h */ case    6:  		/* mr R30, R6 */
		/* 821C1A70h case    6:*/		regs.R30 = regs.R6;
		/* 821C1A70h case    6:*/		return 0x821C1A74;
		  /* 821C1A74h */ case    7:  		/* li R8, 1 */
		/* 821C1A74h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1A74h case    7:*/		return 0x821C1A78;
		  /* 821C1A78h */ case    8:  		/* li R7, 1 */
		/* 821C1A78h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1A78h case    8:*/		return 0x821C1A7C;
		  /* 821C1A7Ch */ case    9:  		/* li R6, 60 */
		/* 821C1A7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x3C);
		/* 821C1A7Ch case    9:*/		return 0x821C1A80;
		  /* 821C1A80h */ case   10:  		/* li R5, 0 */
		/* 821C1A80h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1A80h case   10:*/		return 0x821C1A84;
		  /* 821C1A84h */ case   11:  		/* mr R29, R3 */
		/* 821C1A84h case   11:*/		regs.R29 = regs.R3;
		/* 821C1A84h case   11:*/		return 0x821C1A88;
		  /* 821C1A88h */ case   12:  		/* bl 405264 */
		/* 821C1A88h case   12:*/		regs.LR = 0x821C1A8C; return 0x82224998;
		/* 821C1A88h case   12:*/		return 0x821C1A8C;
		  /* 821C1A8Ch */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1A8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1A8Ch case   13:*/		return 0x821C1A90;
		  /* 821C1A90h */ case   14:  		/* mr R31, R3 */
		/* 821C1A90h case   14:*/		regs.R31 = regs.R3;
		/* 821C1A90h case   14:*/		return 0x821C1A94;
		  /* 821C1A94h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1A94h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1A94h case   15:*/		return 0x821C1A98;
		  /* 821C1A98h */ case   16:  		/* mr R4, R30 */
		/* 821C1A98h case   16:*/		regs.R4 = regs.R30;
		/* 821C1A98h case   16:*/		return 0x821C1A9C;
		  /* 821C1A9Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1A9Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1AB0;  }
		/* 821C1A9Ch case   17:*/		return 0x821C1AA0;
		  /* 821C1AA0h */ case   18:  		/* mr R3, R29 */
		/* 821C1AA0h case   18:*/		regs.R3 = regs.R29;
		/* 821C1AA0h case   18:*/		return 0x821C1AA4;
		  /* 821C1AA4h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1AA4h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1AA4h case   19:*/		return 0x821C1AA8;
		  /* 821C1AA8h */ case   20:  		/* bl -330168 */
		/* 821C1AA8h case   20:*/		regs.LR = 0x821C1AAC; return 0x821710F0;
		/* 821C1AA8h case   20:*/		return 0x821C1AAC;
		  /* 821C1AACh */ case   21:  		/* mr R4, R3 */
		/* 821C1AACh case   21:*/		regs.R4 = regs.R3;
		/* 821C1AACh case   21:*/		return 0x821C1AB0;
	}
	return 0x821C1AB0;
} // Block from 821C1A58h-821C1AB0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1AB0);
		  /* 821C1AB0h */ case    0:  		/* mr R3, R31 */
		/* 821C1AB0h case    0:*/		regs.R3 = regs.R31;
		/* 821C1AB0h case    0:*/		return 0x821C1AB4;
		  /* 821C1AB4h */ case    1:  		/* bl -301292 */
		/* 821C1AB4h case    1:*/		regs.LR = 0x821C1AB8; return 0x821781C8;
		/* 821C1AB4h case    1:*/		return 0x821C1AB8;
		  /* 821C1AB8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1AB8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1AB8h case    2:*/		return 0x821C1ABC;
		  /* 821C1ABCh */ case    3:  		/* mr R6, R28 */
		/* 821C1ABCh case    3:*/		regs.R6 = regs.R28;
		/* 821C1ABCh case    3:*/		return 0x821C1AC0;
		  /* 821C1AC0h */ case    4:  		/* mr R5, R27 */
		/* 821C1AC0h case    4:*/		regs.R5 = regs.R27;
		/* 821C1AC0h case    4:*/		return 0x821C1AC4;
		  /* 821C1AC4h */ case    5:  		/* mr R4, R31 */
		/* 821C1AC4h case    5:*/		regs.R4 = regs.R31;
		/* 821C1AC4h case    5:*/		return 0x821C1AC8;
		  /* 821C1AC8h */ case    6:  		/* mr R3, R29 */
		/* 821C1AC8h case    6:*/		regs.R3 = regs.R29;
		/* 821C1AC8h case    6:*/		return 0x821C1ACC;
		  /* 821C1ACCh */ case    7:  		/* bl -347172 */
		/* 821C1ACCh case    7:*/		regs.LR = 0x821C1AD0; return 0x8216CEA8;
		/* 821C1ACCh case    7:*/		return 0x821C1AD0;
		  /* 821C1AD0h */ case    8:  		/* mr R3, R31 */
		/* 821C1AD0h case    8:*/		regs.R3 = regs.R31;
		/* 821C1AD0h case    8:*/		return 0x821C1AD4;
		  /* 821C1AD4h */ case    9:  		/* addi R1, R1, 128 */
		/* 821C1AD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1AD4h case    9:*/		return 0x821C1AD8;
		  /* 821C1AD8h */ case   10:  		/* b -1247284 */
		/* 821C1AD8h case   10:*/		return 0x820912A4;
		/* 821C1AD8h case   10:*/		return 0x821C1ADC;
		  /* 821C1ADCh */ case   11:  		/* nop */
		/* 821C1ADCh case   11:*/		cpu::op::nop();
		/* 821C1ADCh case   11:*/		return 0x821C1AE0;
	}
	return 0x821C1AE0;
} // Block from 821C1AB0h-821C1AE0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1AE0);
		  /* 821C1AE0h */ case    0:  		/* mfspr R12, LR */
		/* 821C1AE0h case    0:*/		regs.R12 = regs.LR;
		/* 821C1AE0h case    0:*/		return 0x821C1AE4;
		  /* 821C1AE4h */ case    1:  		/* bl -1247372 */
		/* 821C1AE4h case    1:*/		regs.LR = 0x821C1AE8; return 0x82091258;
		/* 821C1AE4h case    1:*/		return 0x821C1AE8;
		  /* 821C1AE8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1AE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1AE8h case    2:*/		return 0x821C1AEC;
		  /* 821C1AECh */ case    3:  		/* mr R31, R5 */
		/* 821C1AECh case    3:*/		regs.R31 = regs.R5;
		/* 821C1AECh case    3:*/		return 0x821C1AF0;
		  /* 821C1AF0h */ case    4:  		/* mr R30, R6 */
		/* 821C1AF0h case    4:*/		regs.R30 = regs.R6;
		/* 821C1AF0h case    4:*/		return 0x821C1AF4;
		  /* 821C1AF4h */ case    5:  		/* li R8, 1 */
		/* 821C1AF4h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1AF4h case    5:*/		return 0x821C1AF8;
		  /* 821C1AF8h */ case    6:  		/* li R7, 1 */
		/* 821C1AF8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1AF8h case    6:*/		return 0x821C1AFC;
		  /* 821C1AFCh */ case    7:  		/* li R6, 60 */
		/* 821C1AFCh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x3C);
		/* 821C1AFCh case    7:*/		return 0x821C1B00;
		  /* 821C1B00h */ case    8:  		/* li R5, 0 */
		/* 821C1B00h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1B00h case    8:*/		return 0x821C1B04;
		  /* 821C1B04h */ case    9:  		/* mr R29, R3 */
		/* 821C1B04h case    9:*/		regs.R29 = regs.R3;
		/* 821C1B04h case    9:*/		return 0x821C1B08;
		  /* 821C1B08h */ case   10:  		/* bl 405136 */
		/* 821C1B08h case   10:*/		regs.LR = 0x821C1B0C; return 0x82224998;
		/* 821C1B08h case   10:*/		return 0x821C1B0C;
		  /* 821C1B0Ch */ case   11:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1B0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1B0Ch case   11:*/		return 0x821C1B10;
		  /* 821C1B10h */ case   12:  		/* mr R28, R3 */
		/* 821C1B10h case   12:*/		regs.R28 = regs.R3;
		/* 821C1B10h case   12:*/		return 0x821C1B14;
		  /* 821C1B14h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821C1B14h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1B14h case   13:*/		return 0x821C1B18;
		  /* 821C1B18h */ case   14:  		/* mr R4, R30 */
		/* 821C1B18h case   14:*/		regs.R4 = regs.R30;
		/* 821C1B18h case   14:*/		return 0x821C1B1C;
		  /* 821C1B1Ch */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1B1Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821C1B30;  }
		/* 821C1B1Ch case   15:*/		return 0x821C1B20;
		  /* 821C1B20h */ case   16:  		/* mr R3, R29 */
		/* 821C1B20h case   16:*/		regs.R3 = regs.R29;
		/* 821C1B20h case   16:*/		return 0x821C1B24;
		  /* 821C1B24h */ case   17:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1B24h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1B24h case   17:*/		return 0x821C1B28;
		  /* 821C1B28h */ case   18:  		/* bl -330296 */
		/* 821C1B28h case   18:*/		regs.LR = 0x821C1B2C; return 0x821710F0;
		/* 821C1B28h case   18:*/		return 0x821C1B2C;
		  /* 821C1B2Ch */ case   19:  		/* mr R4, R3 */
		/* 821C1B2Ch case   19:*/		regs.R4 = regs.R3;
		/* 821C1B2Ch case   19:*/		return 0x821C1B30;
	}
	return 0x821C1B30;
} // Block from 821C1AE0h-821C1B30h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C1B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1B30);
		  /* 821C1B30h */ case    0:  		/* mr R3, R28 */
		/* 821C1B30h case    0:*/		regs.R3 = regs.R28;
		/* 821C1B30h case    0:*/		return 0x821C1B34;
		  /* 821C1B34h */ case    1:  		/* bl -301420 */
		/* 821C1B34h case    1:*/		regs.LR = 0x821C1B38; return 0x821781C8;
		/* 821C1B34h case    1:*/		return 0x821C1B38;
		  /* 821C1B38h */ case    2:  		/* stw R3, <#[R28 + 44]> */
		/* 821C1B38h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821C1B38h case    2:*/		return 0x821C1B3C;
		  /* 821C1B3Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821C1B3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C1B3Ch case    3:*/		return 0x821C1B40;
		  /* 821C1B40h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 821C1B40h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C1B78;  }
		/* 821C1B40h case    4:*/		return 0x821C1B44;
		  /* 821C1B44h */ case    5:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821C1B44h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821C1B44h case    5:*/		return 0x821C1B48;
	}
	return 0x821C1B48;
} // Block from 821C1B30h-821C1B48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C1B48h
// Function '?MakeInstr_V_FRACT@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1B48);
		  /* 821C1B48h */ case    0:  		/* lwz R9, <#[R31]> */
		/* 821C1B48h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1B48h case    0:*/		return 0x821C1B4C;
		  /* 821C1B4Ch */ case    1:  		/* addi R10, R31, -36 */
		/* 821C1B4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFDC);
		/* 821C1B4Ch case    1:*/		return 0x821C1B50;
		  /* 821C1B50h */ case    2:  		/* addi R11, R11, 36 */
		/* 821C1B50h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C1B50h case    2:*/		return 0x821C1B54;
		  /* 821C1B54h */ case    3:  		/* ori R8, R10, 1 */
		/* 821C1B54h case    3:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C1B54h case    3:*/		return 0x821C1B58;
		  /* 821C1B58h */ case    4:  		/* addi R7, R11, -36 */
		/* 821C1B58h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821C1B58h case    4:*/		return 0x821C1B5C;
		  /* 821C1B5Ch */ case    5:  		/* addi R10, R11, 4 */
		/* 821C1B5Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C1B5Ch case    5:*/		return 0x821C1B60;
		  /* 821C1B60h */ case    6:  		/* stw R9, <#[R11]> */
		/* 821C1B60h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1B60h case    6:*/		return 0x821C1B64;
		  /* 821C1B64h */ case    7:  		/* lwz R9, <#[R31]> */
		/* 821C1B64h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1B64h case    7:*/		return 0x821C1B68;
		  /* 821C1B68h */ case    8:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821C1B68h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821C1B68h case    8:*/		return 0x821C1B6C;
		  /* 821C1B6Ch */ case    9:  		/* stw R7, <#[R9]> */
		/* 821C1B6Ch case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C1B6Ch case    9:*/		return 0x821C1B70;
		  /* 821C1B70h */ case   10:  		/* stw R8, <#[R11 + 4]> */
		/* 821C1B70h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C1B70h case   10:*/		return 0x821C1B74;
		  /* 821C1B74h */ case   11:  		/* stw R10, <#[R31]> */
		/* 821C1B74h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1B74h case   11:*/		return 0x821C1B78;
	}
	return 0x821C1B78;
} // Block from 821C1B48h-821C1B78h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1B78);
		  /* 821C1B78h */ case    0:  		/* mr R3, R28 */
		/* 821C1B78h case    0:*/		regs.R3 = regs.R28;
		/* 821C1B78h case    0:*/		return 0x821C1B7C;
		  /* 821C1B7Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 821C1B7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1B7Ch case    1:*/		return 0x821C1B80;
		  /* 821C1B80h */ case    2:  		/* b -1247448 */
		/* 821C1B80h case    2:*/		return 0x820912A8;
		/* 821C1B80h case    2:*/		return 0x821C1B84;
		  /* 821C1B84h */ case    3:  		/* nop */
		/* 821C1B84h case    3:*/		cpu::op::nop();
		/* 821C1B84h case    3:*/		return 0x821C1B88;
	}
	return 0x821C1B88;
} // Block from 821C1B78h-821C1B88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C1B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1B88);
		  /* 821C1B88h */ case    0:  		/* mfspr R12, LR */
		/* 821C1B88h case    0:*/		regs.R12 = regs.LR;
		/* 821C1B88h case    0:*/		return 0x821C1B8C;
		  /* 821C1B8Ch */ case    1:  		/* bl -1247544 */
		/* 821C1B8Ch case    1:*/		regs.LR = 0x821C1B90; return 0x82091254;
		/* 821C1B8Ch case    1:*/		return 0x821C1B90;
		  /* 821C1B90h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1B90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1B90h case    2:*/		return 0x821C1B94;
		  /* 821C1B94h */ case    3:  		/* mr R27, R4 */
		/* 821C1B94h case    3:*/		regs.R27 = regs.R4;
		/* 821C1B94h case    3:*/		return 0x821C1B98;
		  /* 821C1B98h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1B98h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1B98h case    4:*/		return 0x821C1B9C;
		  /* 821C1B9Ch */ case    5:  		/* mr R28, R5 */
		/* 821C1B9Ch case    5:*/		regs.R28 = regs.R5;
		/* 821C1B9Ch case    5:*/		return 0x821C1BA0;
		  /* 821C1BA0h */ case    6:  		/* mr R30, R6 */
		/* 821C1BA0h case    6:*/		regs.R30 = regs.R6;
		/* 821C1BA0h case    6:*/		return 0x821C1BA4;
		  /* 821C1BA4h */ case    7:  		/* li R8, 1 */
		/* 821C1BA4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1BA4h case    7:*/		return 0x821C1BA8;
		  /* 821C1BA8h */ case    8:  		/* li R7, 1 */
		/* 821C1BA8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1BA8h case    8:*/		return 0x821C1BAC;
		  /* 821C1BACh */ case    9:  		/* li R6, 61 */
		/* 821C1BACh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x3D);
		/* 821C1BACh case    9:*/		return 0x821C1BB0;
		  /* 821C1BB0h */ case   10:  		/* li R5, 0 */
		/* 821C1BB0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1BB0h case   10:*/		return 0x821C1BB4;
		  /* 821C1BB4h */ case   11:  		/* mr R29, R3 */
		/* 821C1BB4h case   11:*/		regs.R29 = regs.R3;
		/* 821C1BB4h case   11:*/		return 0x821C1BB8;
		  /* 821C1BB8h */ case   12:  		/* bl 404960 */
		/* 821C1BB8h case   12:*/		regs.LR = 0x821C1BBC; return 0x82224998;
		/* 821C1BB8h case   12:*/		return 0x821C1BBC;
		  /* 821C1BBCh */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1BBCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1BBCh case   13:*/		return 0x821C1BC0;
		  /* 821C1BC0h */ case   14:  		/* mr R31, R3 */
		/* 821C1BC0h case   14:*/		regs.R31 = regs.R3;
		/* 821C1BC0h case   14:*/		return 0x821C1BC4;
		  /* 821C1BC4h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1BC4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1BC4h case   15:*/		return 0x821C1BC8;
		  /* 821C1BC8h */ case   16:  		/* mr R4, R30 */
		/* 821C1BC8h case   16:*/		regs.R4 = regs.R30;
		/* 821C1BC8h case   16:*/		return 0x821C1BCC;
		  /* 821C1BCCh */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1BCCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1BE0;  }
		/* 821C1BCCh case   17:*/		return 0x821C1BD0;
		  /* 821C1BD0h */ case   18:  		/* mr R3, R29 */
		/* 821C1BD0h case   18:*/		regs.R3 = regs.R29;
		/* 821C1BD0h case   18:*/		return 0x821C1BD4;
		  /* 821C1BD4h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1BD4h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1BD4h case   19:*/		return 0x821C1BD8;
		  /* 821C1BD8h */ case   20:  		/* bl -330472 */
		/* 821C1BD8h case   20:*/		regs.LR = 0x821C1BDC; return 0x821710F0;
		/* 821C1BD8h case   20:*/		return 0x821C1BDC;
		  /* 821C1BDCh */ case   21:  		/* mr R4, R3 */
		/* 821C1BDCh case   21:*/		regs.R4 = regs.R3;
		/* 821C1BDCh case   21:*/		return 0x821C1BE0;
	}
	return 0x821C1BE0;
} // Block from 821C1B88h-821C1BE0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1BE0);
		  /* 821C1BE0h */ case    0:  		/* mr R3, R31 */
		/* 821C1BE0h case    0:*/		regs.R3 = regs.R31;
		/* 821C1BE0h case    0:*/		return 0x821C1BE4;
		  /* 821C1BE4h */ case    1:  		/* bl -301596 */
		/* 821C1BE4h case    1:*/		regs.LR = 0x821C1BE8; return 0x821781C8;
		/* 821C1BE4h case    1:*/		return 0x821C1BE8;
	}
	return 0x821C1BE8;
} // Block from 821C1BE0h-821C1BE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C1BE8h
// Function '?MakeInstr_V_TRUNC@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1BE8);
		  /* 821C1BE8h */ case    0:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1BE8h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1BE8h case    0:*/		return 0x821C1BEC;
		  /* 821C1BECh */ case    1:  		/* mr R6, R28 */
		/* 821C1BECh case    1:*/		regs.R6 = regs.R28;
		/* 821C1BECh case    1:*/		return 0x821C1BF0;
		  /* 821C1BF0h */ case    2:  		/* mr R5, R27 */
		/* 821C1BF0h case    2:*/		regs.R5 = regs.R27;
		/* 821C1BF0h case    2:*/		return 0x821C1BF4;
		  /* 821C1BF4h */ case    3:  		/* mr R4, R31 */
		/* 821C1BF4h case    3:*/		regs.R4 = regs.R31;
		/* 821C1BF4h case    3:*/		return 0x821C1BF8;
		  /* 821C1BF8h */ case    4:  		/* mr R3, R29 */
		/* 821C1BF8h case    4:*/		regs.R3 = regs.R29;
		/* 821C1BF8h case    4:*/		return 0x821C1BFC;
		  /* 821C1BFCh */ case    5:  		/* bl -347476 */
		/* 821C1BFCh case    5:*/		regs.LR = 0x821C1C00; return 0x8216CEA8;
		/* 821C1BFCh case    5:*/		return 0x821C1C00;
		  /* 821C1C00h */ case    6:  		/* mr R3, R31 */
		/* 821C1C00h case    6:*/		regs.R3 = regs.R31;
		/* 821C1C00h case    6:*/		return 0x821C1C04;
		  /* 821C1C04h */ case    7:  		/* addi R1, R1, 128 */
		/* 821C1C04h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1C04h case    7:*/		return 0x821C1C08;
		  /* 821C1C08h */ case    8:  		/* b -1247588 */
		/* 821C1C08h case    8:*/		return 0x820912A4;
		/* 821C1C08h case    8:*/		return 0x821C1C0C;
		  /* 821C1C0Ch */ case    9:  		/* nop */
		/* 821C1C0Ch case    9:*/		cpu::op::nop();
		/* 821C1C0Ch case    9:*/		return 0x821C1C10;
	}
	return 0x821C1C10;
} // Block from 821C1BE8h-821C1C10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C1C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1C10);
		  /* 821C1C10h */ case    0:  		/* mfspr R12, LR */
		/* 821C1C10h case    0:*/		regs.R12 = regs.LR;
		/* 821C1C10h case    0:*/		return 0x821C1C14;
		  /* 821C1C14h */ case    1:  		/* bl -1247680 */
		/* 821C1C14h case    1:*/		regs.LR = 0x821C1C18; return 0x82091254;
		/* 821C1C14h case    1:*/		return 0x821C1C18;
		  /* 821C1C18h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1C18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1C18h case    2:*/		return 0x821C1C1C;
		  /* 821C1C1Ch */ case    3:  		/* mr R27, R4 */
		/* 821C1C1Ch case    3:*/		regs.R27 = regs.R4;
		/* 821C1C1Ch case    3:*/		return 0x821C1C20;
		  /* 821C1C20h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1C20h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1C20h case    4:*/		return 0x821C1C24;
		  /* 821C1C24h */ case    5:  		/* mr R28, R5 */
		/* 821C1C24h case    5:*/		regs.R28 = regs.R5;
		/* 821C1C24h case    5:*/		return 0x821C1C28;
		  /* 821C1C28h */ case    6:  		/* mr R30, R6 */
		/* 821C1C28h case    6:*/		regs.R30 = regs.R6;
		/* 821C1C28h case    6:*/		return 0x821C1C2C;
		  /* 821C1C2Ch */ case    7:  		/* li R8, 1 */
		/* 821C1C2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1C2Ch case    7:*/		return 0x821C1C30;
		  /* 821C1C30h */ case    8:  		/* li R7, 1 */
		/* 821C1C30h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1C30h case    8:*/		return 0x821C1C34;
		  /* 821C1C34h */ case    9:  		/* li R6, 62 */
		/* 821C1C34h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x3E);
		/* 821C1C34h case    9:*/		return 0x821C1C38;
		  /* 821C1C38h */ case   10:  		/* li R5, 0 */
		/* 821C1C38h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1C38h case   10:*/		return 0x821C1C3C;
		  /* 821C1C3Ch */ case   11:  		/* mr R29, R3 */
		/* 821C1C3Ch case   11:*/		regs.R29 = regs.R3;
		/* 821C1C3Ch case   11:*/		return 0x821C1C40;
		  /* 821C1C40h */ case   12:  		/* bl 404824 */
		/* 821C1C40h case   12:*/		regs.LR = 0x821C1C44; return 0x82224998;
		/* 821C1C40h case   12:*/		return 0x821C1C44;
		  /* 821C1C44h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1C44h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1C44h case   13:*/		return 0x821C1C48;
		  /* 821C1C48h */ case   14:  		/* mr R31, R3 */
		/* 821C1C48h case   14:*/		regs.R31 = regs.R3;
		/* 821C1C48h case   14:*/		return 0x821C1C4C;
		  /* 821C1C4Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1C4Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1C4Ch case   15:*/		return 0x821C1C50;
		  /* 821C1C50h */ case   16:  		/* mr R4, R30 */
		/* 821C1C50h case   16:*/		regs.R4 = regs.R30;
		/* 821C1C50h case   16:*/		return 0x821C1C54;
		  /* 821C1C54h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1C54h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1C68;  }
		/* 821C1C54h case   17:*/		return 0x821C1C58;
		  /* 821C1C58h */ case   18:  		/* mr R3, R29 */
		/* 821C1C58h case   18:*/		regs.R3 = regs.R29;
		/* 821C1C58h case   18:*/		return 0x821C1C5C;
		  /* 821C1C5Ch */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1C5Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1C5Ch case   19:*/		return 0x821C1C60;
		  /* 821C1C60h */ case   20:  		/* bl -330608 */
		/* 821C1C60h case   20:*/		regs.LR = 0x821C1C64; return 0x821710F0;
		/* 821C1C60h case   20:*/		return 0x821C1C64;
		  /* 821C1C64h */ case   21:  		/* mr R4, R3 */
		/* 821C1C64h case   21:*/		regs.R4 = regs.R3;
		/* 821C1C64h case   21:*/		return 0x821C1C68;
	}
	return 0x821C1C68;
} // Block from 821C1C10h-821C1C68h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1C68);
		  /* 821C1C68h */ case    0:  		/* mr R3, R31 */
		/* 821C1C68h case    0:*/		regs.R3 = regs.R31;
		/* 821C1C68h case    0:*/		return 0x821C1C6C;
		  /* 821C1C6Ch */ case    1:  		/* bl -301732 */
		/* 821C1C6Ch case    1:*/		regs.LR = 0x821C1C70; return 0x821781C8;
		/* 821C1C6Ch case    1:*/		return 0x821C1C70;
		  /* 821C1C70h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1C70h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1C70h case    2:*/		return 0x821C1C74;
		  /* 821C1C74h */ case    3:  		/* mr R6, R28 */
		/* 821C1C74h case    3:*/		regs.R6 = regs.R28;
		/* 821C1C74h case    3:*/		return 0x821C1C78;
		  /* 821C1C78h */ case    4:  		/* mr R5, R27 */
		/* 821C1C78h case    4:*/		regs.R5 = regs.R27;
		/* 821C1C78h case    4:*/		return 0x821C1C7C;
		  /* 821C1C7Ch */ case    5:  		/* mr R4, R31 */
		/* 821C1C7Ch case    5:*/		regs.R4 = regs.R31;
		/* 821C1C7Ch case    5:*/		return 0x821C1C80;
		  /* 821C1C80h */ case    6:  		/* mr R3, R29 */
		/* 821C1C80h case    6:*/		regs.R3 = regs.R29;
		/* 821C1C80h case    6:*/		return 0x821C1C84;
		  /* 821C1C84h */ case    7:  		/* bl -347612 */
		/* 821C1C84h case    7:*/		regs.LR = 0x821C1C88; return 0x8216CEA8;
		/* 821C1C84h case    7:*/		return 0x821C1C88;
	}
	return 0x821C1C88;
} // Block from 821C1C68h-821C1C88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C1C88h
// Function '?MakeInstr_V_FLOOR@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1C88);
		  /* 821C1C88h */ case    0:  		/* mr R3, R31 */
		/* 821C1C88h case    0:*/		regs.R3 = regs.R31;
		/* 821C1C88h case    0:*/		return 0x821C1C8C;
		  /* 821C1C8Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 821C1C8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1C8Ch case    1:*/		return 0x821C1C90;
		  /* 821C1C90h */ case    2:  		/* b -1247724 */
		/* 821C1C90h case    2:*/		return 0x820912A4;
		/* 821C1C90h case    2:*/		return 0x821C1C94;
		  /* 821C1C94h */ case    3:  		/* nop */
		/* 821C1C94h case    3:*/		cpu::op::nop();
		/* 821C1C94h case    3:*/		return 0x821C1C98;
	}
	return 0x821C1C98;
} // Block from 821C1C88h-821C1C98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C1C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1C98);
		  /* 821C1C98h */ case    0:  		/* mfspr R12, LR */
		/* 821C1C98h case    0:*/		regs.R12 = regs.LR;
		/* 821C1C98h case    0:*/		return 0x821C1C9C;
		  /* 821C1C9Ch */ case    1:  		/* bl -1247816 */
		/* 821C1C9Ch case    1:*/		regs.LR = 0x821C1CA0; return 0x82091254;
		/* 821C1C9Ch case    1:*/		return 0x821C1CA0;
		  /* 821C1CA0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1CA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1CA0h case    2:*/		return 0x821C1CA4;
		  /* 821C1CA4h */ case    3:  		/* mr R27, R4 */
		/* 821C1CA4h case    3:*/		regs.R27 = regs.R4;
		/* 821C1CA4h case    3:*/		return 0x821C1CA8;
		  /* 821C1CA8h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1CA8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1CA8h case    4:*/		return 0x821C1CAC;
		  /* 821C1CACh */ case    5:  		/* mr R28, R5 */
		/* 821C1CACh case    5:*/		regs.R28 = regs.R5;
		/* 821C1CACh case    5:*/		return 0x821C1CB0;
		  /* 821C1CB0h */ case    6:  		/* mr R30, R6 */
		/* 821C1CB0h case    6:*/		regs.R30 = regs.R6;
		/* 821C1CB0h case    6:*/		return 0x821C1CB4;
		  /* 821C1CB4h */ case    7:  		/* li R8, 1 */
		/* 821C1CB4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C1CB4h case    7:*/		return 0x821C1CB8;
		  /* 821C1CB8h */ case    8:  		/* li R7, 1 */
		/* 821C1CB8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1CB8h case    8:*/		return 0x821C1CBC;
		  /* 821C1CBCh */ case    9:  		/* li R6, 72 */
		/* 821C1CBCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x48);
		/* 821C1CBCh case    9:*/		return 0x821C1CC0;
		  /* 821C1CC0h */ case   10:  		/* li R5, 0 */
		/* 821C1CC0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1CC0h case   10:*/		return 0x821C1CC4;
		  /* 821C1CC4h */ case   11:  		/* mr R29, R3 */
		/* 821C1CC4h case   11:*/		regs.R29 = regs.R3;
		/* 821C1CC4h case   11:*/		return 0x821C1CC8;
		  /* 821C1CC8h */ case   12:  		/* bl 404688 */
		/* 821C1CC8h case   12:*/		regs.LR = 0x821C1CCC; return 0x82224998;
		/* 821C1CC8h case   12:*/		return 0x821C1CCC;
		  /* 821C1CCCh */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1CCCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1CCCh case   13:*/		return 0x821C1CD0;
		  /* 821C1CD0h */ case   14:  		/* mr R31, R3 */
		/* 821C1CD0h case   14:*/		regs.R31 = regs.R3;
		/* 821C1CD0h case   14:*/		return 0x821C1CD4;
		  /* 821C1CD4h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821C1CD4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1CD4h case   15:*/		return 0x821C1CD8;
		  /* 821C1CD8h */ case   16:  		/* mr R4, R30 */
		/* 821C1CD8h case   16:*/		regs.R4 = regs.R30;
		/* 821C1CD8h case   16:*/		return 0x821C1CDC;
		  /* 821C1CDCh */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1CDCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821C1CF0;  }
		/* 821C1CDCh case   17:*/		return 0x821C1CE0;
		  /* 821C1CE0h */ case   18:  		/* mr R3, R29 */
		/* 821C1CE0h case   18:*/		regs.R3 = regs.R29;
		/* 821C1CE0h case   18:*/		return 0x821C1CE4;
		  /* 821C1CE4h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1CE4h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1CE4h case   19:*/		return 0x821C1CE8;
		  /* 821C1CE8h */ case   20:  		/* bl -330744 */
		/* 821C1CE8h case   20:*/		regs.LR = 0x821C1CEC; return 0x821710F0;
		/* 821C1CE8h case   20:*/		return 0x821C1CEC;
		  /* 821C1CECh */ case   21:  		/* mr R4, R3 */
		/* 821C1CECh case   21:*/		regs.R4 = regs.R3;
		/* 821C1CECh case   21:*/		return 0x821C1CF0;
	}
	return 0x821C1CF0;
} // Block from 821C1C98h-821C1CF0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C1CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1CF0);
		  /* 821C1CF0h */ case    0:  		/* mr R3, R31 */
		/* 821C1CF0h case    0:*/		regs.R3 = regs.R31;
		/* 821C1CF0h case    0:*/		return 0x821C1CF4;
		  /* 821C1CF4h */ case    1:  		/* bl -301868 */
		/* 821C1CF4h case    1:*/		regs.LR = 0x821C1CF8; return 0x821781C8;
		/* 821C1CF4h case    1:*/		return 0x821C1CF8;
		  /* 821C1CF8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1CF8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1CF8h case    2:*/		return 0x821C1CFC;
		  /* 821C1CFCh */ case    3:  		/* mr R6, R28 */
		/* 821C1CFCh case    3:*/		regs.R6 = regs.R28;
		/* 821C1CFCh case    3:*/		return 0x821C1D00;
		  /* 821C1D00h */ case    4:  		/* mr R5, R27 */
		/* 821C1D00h case    4:*/		regs.R5 = regs.R27;
		/* 821C1D00h case    4:*/		return 0x821C1D04;
		  /* 821C1D04h */ case    5:  		/* mr R4, R31 */
		/* 821C1D04h case    5:*/		regs.R4 = regs.R31;
		/* 821C1D04h case    5:*/		return 0x821C1D08;
		  /* 821C1D08h */ case    6:  		/* mr R3, R29 */
		/* 821C1D08h case    6:*/		regs.R3 = regs.R29;
		/* 821C1D08h case    6:*/		return 0x821C1D0C;
		  /* 821C1D0Ch */ case    7:  		/* bl -347748 */
		/* 821C1D0Ch case    7:*/		regs.LR = 0x821C1D10; return 0x8216CEA8;
		/* 821C1D0Ch case    7:*/		return 0x821C1D10;
		  /* 821C1D10h */ case    8:  		/* mr R3, R31 */
		/* 821C1D10h case    8:*/		regs.R3 = regs.R31;
		/* 821C1D10h case    8:*/		return 0x821C1D14;
		  /* 821C1D14h */ case    9:  		/* addi R1, R1, 128 */
		/* 821C1D14h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1D14h case    9:*/		return 0x821C1D18;
		  /* 821C1D18h */ case   10:  		/* b -1247860 */
		/* 821C1D18h case   10:*/		return 0x820912A4;
		/* 821C1D18h case   10:*/		return 0x821C1D1C;
		  /* 821C1D1Ch */ case   11:  		/* nop */
		/* 821C1D1Ch case   11:*/		cpu::op::nop();
		/* 821C1D1Ch case   11:*/		return 0x821C1D20;
	}
	return 0x821C1D20;
} // Block from 821C1CF0h-821C1D20h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C1D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1D20);
		  /* 821C1D20h */ case    0:  		/* mfspr R12, LR */
		/* 821C1D20h case    0:*/		regs.R12 = regs.LR;
		/* 821C1D20h case    0:*/		return 0x821C1D24;
		  /* 821C1D24h */ case    1:  		/* bl -1247948 */
		/* 821C1D24h case    1:*/		regs.LR = 0x821C1D28; return 0x82091258;
		/* 821C1D24h case    1:*/		return 0x821C1D28;
	}
	return 0x821C1D28;
} // Block from 821C1D20h-821C1D28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C1D28h
// Function '?MakeInstr_V_CNDGE@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAVDependency@2@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1D28);
		  /* 821C1D28h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C1D28h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C1D28h case    0:*/		return 0x821C1D2C;
		  /* 821C1D2Ch */ case    1:  		/* mr R31, R5 */
		/* 821C1D2Ch case    1:*/		regs.R31 = regs.R5;
		/* 821C1D2Ch case    1:*/		return 0x821C1D30;
		  /* 821C1D30h */ case    2:  		/* mr R30, R6 */
		/* 821C1D30h case    2:*/		regs.R30 = regs.R6;
		/* 821C1D30h case    2:*/		return 0x821C1D34;
		  /* 821C1D34h */ case    3:  		/* li R8, 0 */
		/* 821C1D34h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C1D34h case    3:*/		return 0x821C1D38;
		  /* 821C1D38h */ case    4:  		/* li R7, 1 */
		/* 821C1D38h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C1D38h case    4:*/		return 0x821C1D3C;
		  /* 821C1D3Ch */ case    5:  		/* li R6, 90 */
		/* 821C1D3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x5A);
		/* 821C1D3Ch case    5:*/		return 0x821C1D40;
		  /* 821C1D40h */ case    6:  		/* li R5, 0 */
		/* 821C1D40h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1D40h case    6:*/		return 0x821C1D44;
		  /* 821C1D44h */ case    7:  		/* mr R29, R3 */
		/* 821C1D44h case    7:*/		regs.R29 = regs.R3;
		/* 821C1D44h case    7:*/		return 0x821C1D48;
		  /* 821C1D48h */ case    8:  		/* bl 404560 */
		/* 821C1D48h case    8:*/		regs.LR = 0x821C1D4C; return 0x82224998;
		/* 821C1D48h case    8:*/		return 0x821C1D4C;
		  /* 821C1D4Ch */ case    9:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C1D4Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C1D4Ch case    9:*/		return 0x821C1D50;
		  /* 821C1D50h */ case   10:  		/* mr R28, R3 */
		/* 821C1D50h case   10:*/		regs.R28 = regs.R3;
		/* 821C1D50h case   10:*/		return 0x821C1D54;
		  /* 821C1D54h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821C1D54h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1D54h case   11:*/		return 0x821C1D58;
		  /* 821C1D58h */ case   12:  		/* mr R4, R30 */
		/* 821C1D58h case   12:*/		regs.R4 = regs.R30;
		/* 821C1D58h case   12:*/		return 0x821C1D5C;
		  /* 821C1D5Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1D5Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821C1D70;  }
		/* 821C1D5Ch case   13:*/		return 0x821C1D60;
		  /* 821C1D60h */ case   14:  		/* mr R3, R29 */
		/* 821C1D60h case   14:*/		regs.R3 = regs.R29;
		/* 821C1D60h case   14:*/		return 0x821C1D64;
		  /* 821C1D64h */ case   15:  		/* lwz R5, <#[R30 + 12]> */
		/* 821C1D64h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C1D64h case   15:*/		return 0x821C1D68;
		  /* 821C1D68h */ case   16:  		/* bl -330872 */
		/* 821C1D68h case   16:*/		regs.LR = 0x821C1D6C; return 0x821710F0;
		/* 821C1D68h case   16:*/		return 0x821C1D6C;
		  /* 821C1D6Ch */ case   17:  		/* mr R4, R3 */
		/* 821C1D6Ch case   17:*/		regs.R4 = regs.R3;
		/* 821C1D6Ch case   17:*/		return 0x821C1D70;
	}
	return 0x821C1D70;
} // Block from 821C1D28h-821C1D70h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1D70);
		  /* 821C1D70h */ case    0:  		/* mr R3, R28 */
		/* 821C1D70h case    0:*/		regs.R3 = regs.R28;
		/* 821C1D70h case    0:*/		return 0x821C1D74;
		  /* 821C1D74h */ case    1:  		/* bl -301996 */
		/* 821C1D74h case    1:*/		regs.LR = 0x821C1D78; return 0x821781C8;
		/* 821C1D74h case    1:*/		return 0x821C1D78;
		  /* 821C1D78h */ case    2:  		/* stw R3, <#[R28 + 44]> */
		/* 821C1D78h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821C1D78h case    2:*/		return 0x821C1D7C;
		  /* 821C1D7Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821C1D7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C1D7Ch case    3:*/		return 0x821C1D80;
		  /* 821C1D80h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 821C1D80h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C1DB8;  }
		/* 821C1D80h case    4:*/		return 0x821C1D84;
		  /* 821C1D84h */ case    5:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821C1D84h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821C1D84h case    5:*/		return 0x821C1D88;
		  /* 821C1D88h */ case    6:  		/* lwz R9, <#[R31]> */
		/* 821C1D88h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1D88h case    6:*/		return 0x821C1D8C;
		  /* 821C1D8Ch */ case    7:  		/* addi R10, R31, -36 */
		/* 821C1D8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFDC);
		/* 821C1D8Ch case    7:*/		return 0x821C1D90;
		  /* 821C1D90h */ case    8:  		/* addi R11, R11, 36 */
		/* 821C1D90h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C1D90h case    8:*/		return 0x821C1D94;
		  /* 821C1D94h */ case    9:  		/* ori R8, R10, 1 */
		/* 821C1D94h case    9:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C1D94h case    9:*/		return 0x821C1D98;
		  /* 821C1D98h */ case   10:  		/* addi R7, R11, -36 */
		/* 821C1D98h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821C1D98h case   10:*/		return 0x821C1D9C;
		  /* 821C1D9Ch */ case   11:  		/* addi R10, R11, 4 */
		/* 821C1D9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C1D9Ch case   11:*/		return 0x821C1DA0;
		  /* 821C1DA0h */ case   12:  		/* stw R9, <#[R11]> */
		/* 821C1DA0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1DA0h case   12:*/		return 0x821C1DA4;
		  /* 821C1DA4h */ case   13:  		/* lwz R9, <#[R31]> */
		/* 821C1DA4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1DA4h case   13:*/		return 0x821C1DA8;
		  /* 821C1DA8h */ case   14:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821C1DA8h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821C1DA8h case   14:*/		return 0x821C1DAC;
		  /* 821C1DACh */ case   15:  		/* stw R7, <#[R9]> */
		/* 821C1DACh case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C1DACh case   15:*/		return 0x821C1DB0;
		  /* 821C1DB0h */ case   16:  		/* stw R8, <#[R11 + 4]> */
		/* 821C1DB0h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C1DB0h case   16:*/		return 0x821C1DB4;
		  /* 821C1DB4h */ case   17:  		/* stw R10, <#[R31]> */
		/* 821C1DB4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821C1DB4h case   17:*/		return 0x821C1DB8;
	}
	return 0x821C1DB8;
} // Block from 821C1D70h-821C1DB8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1DB8);
		  /* 821C1DB8h */ case    0:  		/* mr R3, R28 */
		/* 821C1DB8h case    0:*/		regs.R3 = regs.R28;
		/* 821C1DB8h case    0:*/		return 0x821C1DBC;
		  /* 821C1DBCh */ case    1:  		/* addi R1, R1, 128 */
		/* 821C1DBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C1DBCh case    1:*/		return 0x821C1DC0;
		  /* 821C1DC0h */ case    2:  		/* b -1248024 */
		/* 821C1DC0h case    2:*/		return 0x820912A8;
		/* 821C1DC0h case    2:*/		return 0x821C1DC4;
		  /* 821C1DC4h */ case    3:  		/* nop */
		/* 821C1DC4h case    3:*/		cpu::op::nop();
		/* 821C1DC4h case    3:*/		return 0x821C1DC8;
	}
	return 0x821C1DC8;
} // Block from 821C1DB8h-821C1DC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C1DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1DC8);
		  /* 821C1DC8h */ case    0:  		/* mfspr R12, LR */
		/* 821C1DC8h case    0:*/		regs.R12 = regs.LR;
		/* 821C1DC8h case    0:*/		return 0x821C1DCC;
		  /* 821C1DCCh */ case    1:  		/* bl -1248124 */
		/* 821C1DCCh case    1:*/		regs.LR = 0x821C1DD0; return 0x82091250;
		/* 821C1DCCh case    1:*/		return 0x821C1DD0;
		  /* 821C1DD0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C1DD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C1DD0h case    2:*/		return 0x821C1DD4;
		  /* 821C1DD4h */ case    3:  		/* mr R27, R4 */
		/* 821C1DD4h case    3:*/		regs.R27 = regs.R4;
		/* 821C1DD4h case    3:*/		return 0x821C1DD8;
		  /* 821C1DD8h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1DD8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1DD8h case    4:*/		return 0x821C1DDC;
		  /* 821C1DDCh */ case    5:  		/* mr R28, R5 */
		/* 821C1DDCh case    5:*/		regs.R28 = regs.R5;
		/* 821C1DDCh case    5:*/		return 0x821C1DE0;
		  /* 821C1DE0h */ case    6:  		/* mr R26, R6 */
		/* 821C1DE0h case    6:*/		regs.R26 = regs.R6;
		/* 821C1DE0h case    6:*/		return 0x821C1DE4;
		  /* 821C1DE4h */ case    7:  		/* mr R29, R7 */
		/* 821C1DE4h case    7:*/		regs.R29 = regs.R7;
		/* 821C1DE4h case    7:*/		return 0x821C1DE8;
		  /* 821C1DE8h */ case    8:  		/* li R8, 4 */
		/* 821C1DE8h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1DE8h case    8:*/		return 0x821C1DEC;
		  /* 821C1DECh */ case    9:  		/* li R7, 2 */
		/* 821C1DECh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C1DECh case    9:*/		return 0x821C1DF0;
		  /* 821C1DF0h */ case   10:  		/* li R6, 1 */
		/* 821C1DF0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C1DF0h case   10:*/		return 0x821C1DF4;
		  /* 821C1DF4h */ case   11:  		/* li R5, 0 */
		/* 821C1DF4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1DF4h case   11:*/		return 0x821C1DF8;
		  /* 821C1DF8h */ case   12:  		/* mr R30, R3 */
		/* 821C1DF8h case   12:*/		regs.R30 = regs.R3;
		/* 821C1DF8h case   12:*/		return 0x821C1DFC;
		  /* 821C1DFCh */ case   13:  		/* bl 404380 */
		/* 821C1DFCh case   13:*/		regs.LR = 0x821C1E00; return 0x82224998;
		/* 821C1DFCh case   13:*/		return 0x821C1E00;
		  /* 821C1E00h */ case   14:  		/* mr R31, R3 */
		/* 821C1E00h case   14:*/		regs.R31 = regs.R3;
		/* 821C1E00h case   14:*/		return 0x821C1E04;
		  /* 821C1E04h */ case   15:  		/* mr R4, R26 */
		/* 821C1E04h case   15:*/		regs.R4 = regs.R26;
		/* 821C1E04h case   15:*/		return 0x821C1E08;
		  /* 821C1E08h */ case   16:  		/* mr R3, R30 */
		/* 821C1E08h case   16:*/		regs.R3 = regs.R30;
		/* 821C1E08h case   16:*/		return 0x821C1E0C;
		  /* 821C1E0Ch */ case   17:  		/* bl -302604 */
		/* 821C1E0Ch case   17:*/		regs.LR = 0x821C1E10; return 0x82178000;
		/* 821C1E0Ch case   17:*/		return 0x821C1E10;
		  /* 821C1E10h */ case   18:  		/* mr R4, R3 */
		/* 821C1E10h case   18:*/		regs.R4 = regs.R3;
		/* 821C1E10h case   18:*/		return 0x821C1E14;
		  /* 821C1E14h */ case   19:  		/* mr R3, R31 */
		/* 821C1E14h case   19:*/		regs.R3 = regs.R31;
		/* 821C1E14h case   19:*/		return 0x821C1E18;
		  /* 821C1E18h */ case   20:  		/* bl -302160 */
		/* 821C1E18h case   20:*/		regs.LR = 0x821C1E1C; return 0x821781C8;
		/* 821C1E18h case   20:*/		return 0x821C1E1C;
		  /* 821C1E1Ch */ case   21:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1E1Ch case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1E1Ch case   21:*/		return 0x821C1E20;
		  /* 821C1E20h */ case   22:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C1E20h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C1E20h case   22:*/		return 0x821C1E24;
		  /* 821C1E24h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821C1E24h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1E24h case   23:*/		return 0x821C1E28;
		  /* 821C1E28h */ case   24:  		/* mr R4, R29 */
		/* 821C1E28h case   24:*/		regs.R4 = regs.R29;
		/* 821C1E28h case   24:*/		return 0x821C1E2C;
		  /* 821C1E2Ch */ case   25:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1E2Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x821C1E40;  }
		/* 821C1E2Ch case   25:*/		return 0x821C1E30;
		  /* 821C1E30h */ case   26:  		/* mr R3, R30 */
		/* 821C1E30h case   26:*/		regs.R3 = regs.R30;
		/* 821C1E30h case   26:*/		return 0x821C1E34;
		  /* 821C1E34h */ case   27:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C1E34h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C1E34h case   27:*/		return 0x821C1E38;
		  /* 821C1E38h */ case   28:  		/* bl -331080 */
		/* 821C1E38h case   28:*/		regs.LR = 0x821C1E3C; return 0x821710F0;
		/* 821C1E38h case   28:*/		return 0x821C1E3C;
		  /* 821C1E3Ch */ case   29:  		/* mr R4, R3 */
		/* 821C1E3Ch case   29:*/		regs.R4 = regs.R3;
		/* 821C1E3Ch case   29:*/		return 0x821C1E40;
	}
	return 0x821C1E40;
} // Block from 821C1DC8h-821C1E40h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821C1E40h
// Function '?MakeInstr_V_CNDGT@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAVDependency@2@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1E40);
		  /* 821C1E40h */ case    0:  		/* mr R3, R31 */
		/* 821C1E40h case    0:*/		regs.R3 = regs.R31;
		/* 821C1E40h case    0:*/		return 0x821C1E44;
		  /* 821C1E44h */ case    1:  		/* bl -302204 */
		/* 821C1E44h case    1:*/		regs.LR = 0x821C1E48; return 0x821781C8;
		/* 821C1E44h case    1:*/		return 0x821C1E48;
		  /* 821C1E48h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C1E48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1E48h case    2:*/		return 0x821C1E4C;
		  /* 821C1E4Ch */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C1E4Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C1E4Ch case    3:*/		return 0x821C1E50;
		  /* 821C1E50h */ case    4:  		/* mr R6, R28 */
		/* 821C1E50h case    4:*/		regs.R6 = regs.R28;
		/* 821C1E50h case    4:*/		return 0x821C1E54;
		  /* 821C1E54h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C1E54h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1E54h case    5:*/		return 0x821C1E58;
		  /* 821C1E58h */ case    6:  		/* mr R5, R27 */
		/* 821C1E58h case    6:*/		regs.R5 = regs.R27;
		/* 821C1E58h case    6:*/		return 0x821C1E5C;
		  /* 821C1E5Ch */ case    7:  		/* mr R4, R31 */
		/* 821C1E5Ch case    7:*/		regs.R4 = regs.R31;
		/* 821C1E5Ch case    7:*/		return 0x821C1E60;
		  /* 821C1E60h */ case    8:  		/* mr R3, R30 */
		/* 821C1E60h case    8:*/		regs.R3 = regs.R30;
		/* 821C1E60h case    8:*/		return 0x821C1E64;
		  /* 821C1E64h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C1E64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1E64h case    9:*/		return 0x821C1E68;
		  /* 821C1E68h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1E68h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1E68h case   10:*/		return 0x821C1E6C;
		  /* 821C1E6Ch */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1E6Ch case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1E6Ch case   11:*/		return 0x821C1E70;
		  /* 821C1E70h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1E70h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1E70h case   12:*/		return 0x821C1E74;
		  /* 821C1E74h */ case   13:  		/* bl -348108 */
		/* 821C1E74h case   13:*/		regs.LR = 0x821C1E78; return 0x8216CEA8;
		/* 821C1E74h case   13:*/		return 0x821C1E78;
		  /* 821C1E78h */ case   14:  		/* mr R3, R31 */
		/* 821C1E78h case   14:*/		regs.R3 = regs.R31;
		/* 821C1E78h case   14:*/		return 0x821C1E7C;
		  /* 821C1E7Ch */ case   15:  		/* addi R1, R1, 144 */
		/* 821C1E7Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C1E7Ch case   15:*/		return 0x821C1E80;
		  /* 821C1E80h */ case   16:  		/* b -1248224 */
		/* 821C1E80h case   16:*/		return 0x820912A0;
		/* 821C1E80h case   16:*/		return 0x821C1E84;
		  /* 821C1E84h */ case   17:  		/* nop */
		/* 821C1E84h case   17:*/		cpu::op::nop();
		/* 821C1E84h case   17:*/		return 0x821C1E88;
	}
	return 0x821C1E88;
} // Block from 821C1E40h-821C1E88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1E88);
		  /* 821C1E88h */ case    0:  		/* mfspr R12, LR */
		/* 821C1E88h case    0:*/		regs.R12 = regs.LR;
		/* 821C1E88h case    0:*/		return 0x821C1E8C;
		  /* 821C1E8Ch */ case    1:  		/* bl -1248316 */
		/* 821C1E8Ch case    1:*/		regs.LR = 0x821C1E90; return 0x82091250;
		/* 821C1E8Ch case    1:*/		return 0x821C1E90;
		  /* 821C1E90h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C1E90h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C1E90h case    2:*/		return 0x821C1E94;
		  /* 821C1E94h */ case    3:  		/* mr R27, R4 */
		/* 821C1E94h case    3:*/		regs.R27 = regs.R4;
		/* 821C1E94h case    3:*/		return 0x821C1E98;
		  /* 821C1E98h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1E98h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1E98h case    4:*/		return 0x821C1E9C;
		  /* 821C1E9Ch */ case    5:  		/* mr R28, R5 */
		/* 821C1E9Ch case    5:*/		regs.R28 = regs.R5;
		/* 821C1E9Ch case    5:*/		return 0x821C1EA0;
		  /* 821C1EA0h */ case    6:  		/* mr R26, R6 */
		/* 821C1EA0h case    6:*/		regs.R26 = regs.R6;
		/* 821C1EA0h case    6:*/		return 0x821C1EA4;
		  /* 821C1EA4h */ case    7:  		/* mr R29, R7 */
		/* 821C1EA4h case    7:*/		regs.R29 = regs.R7;
		/* 821C1EA4h case    7:*/		return 0x821C1EA8;
		  /* 821C1EA8h */ case    8:  		/* li R8, 4 */
		/* 821C1EA8h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1EA8h case    8:*/		return 0x821C1EAC;
		  /* 821C1EACh */ case    9:  		/* li R7, 2 */
		/* 821C1EACh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C1EACh case    9:*/		return 0x821C1EB0;
		  /* 821C1EB0h */ case   10:  		/* li R6, 2 */
		/* 821C1EB0h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C1EB0h case   10:*/		return 0x821C1EB4;
		  /* 821C1EB4h */ case   11:  		/* li R5, 0 */
		/* 821C1EB4h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1EB4h case   11:*/		return 0x821C1EB8;
		  /* 821C1EB8h */ case   12:  		/* mr R30, R3 */
		/* 821C1EB8h case   12:*/		regs.R30 = regs.R3;
		/* 821C1EB8h case   12:*/		return 0x821C1EBC;
		  /* 821C1EBCh */ case   13:  		/* bl 404188 */
		/* 821C1EBCh case   13:*/		regs.LR = 0x821C1EC0; return 0x82224998;
		/* 821C1EBCh case   13:*/		return 0x821C1EC0;
		  /* 821C1EC0h */ case   14:  		/* mr R31, R3 */
		/* 821C1EC0h case   14:*/		regs.R31 = regs.R3;
		/* 821C1EC0h case   14:*/		return 0x821C1EC4;
		  /* 821C1EC4h */ case   15:  		/* mr R4, R26 */
		/* 821C1EC4h case   15:*/		regs.R4 = regs.R26;
		/* 821C1EC4h case   15:*/		return 0x821C1EC8;
		  /* 821C1EC8h */ case   16:  		/* mr R3, R30 */
		/* 821C1EC8h case   16:*/		regs.R3 = regs.R30;
		/* 821C1EC8h case   16:*/		return 0x821C1ECC;
		  /* 821C1ECCh */ case   17:  		/* bl -302796 */
		/* 821C1ECCh case   17:*/		regs.LR = 0x821C1ED0; return 0x82178000;
		/* 821C1ECCh case   17:*/		return 0x821C1ED0;
		  /* 821C1ED0h */ case   18:  		/* mr R4, R3 */
		/* 821C1ED0h case   18:*/		regs.R4 = regs.R3;
		/* 821C1ED0h case   18:*/		return 0x821C1ED4;
		  /* 821C1ED4h */ case   19:  		/* mr R3, R31 */
		/* 821C1ED4h case   19:*/		regs.R3 = regs.R31;
		/* 821C1ED4h case   19:*/		return 0x821C1ED8;
		  /* 821C1ED8h */ case   20:  		/* bl -302352 */
		/* 821C1ED8h case   20:*/		regs.LR = 0x821C1EDC; return 0x821781C8;
		/* 821C1ED8h case   20:*/		return 0x821C1EDC;
		  /* 821C1EDCh */ case   21:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1EDCh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1EDCh case   21:*/		return 0x821C1EE0;
		  /* 821C1EE0h */ case   22:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C1EE0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C1EE0h case   22:*/		return 0x821C1EE4;
		  /* 821C1EE4h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821C1EE4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1EE4h case   23:*/		return 0x821C1EE8;
		  /* 821C1EE8h */ case   24:  		/* mr R4, R29 */
		/* 821C1EE8h case   24:*/		regs.R4 = regs.R29;
		/* 821C1EE8h case   24:*/		return 0x821C1EEC;
		  /* 821C1EECh */ case   25:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1EECh case   25:*/		if ( regs.CR[6].eq ) { return 0x821C1F00;  }
		/* 821C1EECh case   25:*/		return 0x821C1EF0;
		  /* 821C1EF0h */ case   26:  		/* mr R3, R30 */
		/* 821C1EF0h case   26:*/		regs.R3 = regs.R30;
		/* 821C1EF0h case   26:*/		return 0x821C1EF4;
		  /* 821C1EF4h */ case   27:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C1EF4h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C1EF4h case   27:*/		return 0x821C1EF8;
		  /* 821C1EF8h */ case   28:  		/* bl -331272 */
		/* 821C1EF8h case   28:*/		regs.LR = 0x821C1EFC; return 0x821710F0;
		/* 821C1EF8h case   28:*/		return 0x821C1EFC;
		  /* 821C1EFCh */ case   29:  		/* mr R4, R3 */
		/* 821C1EFCh case   29:*/		regs.R4 = regs.R3;
		/* 821C1EFCh case   29:*/		return 0x821C1F00;
	}
	return 0x821C1F00;
} // Block from 821C1E88h-821C1F00h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821C1F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1F00);
		  /* 821C1F00h */ case    0:  		/* mr R3, R31 */
		/* 821C1F00h case    0:*/		regs.R3 = regs.R31;
		/* 821C1F00h case    0:*/		return 0x821C1F04;
		  /* 821C1F04h */ case    1:  		/* bl -302396 */
		/* 821C1F04h case    1:*/		regs.LR = 0x821C1F08; return 0x821781C8;
		/* 821C1F04h case    1:*/		return 0x821C1F08;
		  /* 821C1F08h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C1F08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1F08h case    2:*/		return 0x821C1F0C;
		  /* 821C1F0Ch */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C1F0Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C1F0Ch case    3:*/		return 0x821C1F10;
		  /* 821C1F10h */ case    4:  		/* mr R6, R28 */
		/* 821C1F10h case    4:*/		regs.R6 = regs.R28;
		/* 821C1F10h case    4:*/		return 0x821C1F14;
		  /* 821C1F14h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C1F14h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1F14h case    5:*/		return 0x821C1F18;
		  /* 821C1F18h */ case    6:  		/* mr R5, R27 */
		/* 821C1F18h case    6:*/		regs.R5 = regs.R27;
		/* 821C1F18h case    6:*/		return 0x821C1F1C;
		  /* 821C1F1Ch */ case    7:  		/* mr R4, R31 */
		/* 821C1F1Ch case    7:*/		regs.R4 = regs.R31;
		/* 821C1F1Ch case    7:*/		return 0x821C1F20;
		  /* 821C1F20h */ case    8:  		/* mr R3, R30 */
		/* 821C1F20h case    8:*/		regs.R3 = regs.R30;
		/* 821C1F20h case    8:*/		return 0x821C1F24;
		  /* 821C1F24h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C1F24h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1F24h case    9:*/		return 0x821C1F28;
		  /* 821C1F28h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1F28h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1F28h case   10:*/		return 0x821C1F2C;
		  /* 821C1F2Ch */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1F2Ch case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1F2Ch case   11:*/		return 0x821C1F30;
		  /* 821C1F30h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1F30h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1F30h case   12:*/		return 0x821C1F34;
		  /* 821C1F34h */ case   13:  		/* bl -348300 */
		/* 821C1F34h case   13:*/		regs.LR = 0x821C1F38; return 0x8216CEA8;
		/* 821C1F34h case   13:*/		return 0x821C1F38;
		  /* 821C1F38h */ case   14:  		/* mr R3, R31 */
		/* 821C1F38h case   14:*/		regs.R3 = regs.R31;
		/* 821C1F38h case   14:*/		return 0x821C1F3C;
		  /* 821C1F3Ch */ case   15:  		/* addi R1, R1, 144 */
		/* 821C1F3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C1F3Ch case   15:*/		return 0x821C1F40;
		  /* 821C1F40h */ case   16:  		/* b -1248416 */
		/* 821C1F40h case   16:*/		return 0x820912A0;
		/* 821C1F40h case   16:*/		return 0x821C1F44;
		  /* 821C1F44h */ case   17:  		/* nop */
		/* 821C1F44h case   17:*/		cpu::op::nop();
		/* 821C1F44h case   17:*/		return 0x821C1F48;
	}
	return 0x821C1F48;
} // Block from 821C1F00h-821C1F48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C1F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1F48);
		  /* 821C1F48h */ case    0:  		/* mfspr R12, LR */
		/* 821C1F48h case    0:*/		regs.R12 = regs.LR;
		/* 821C1F48h case    0:*/		return 0x821C1F4C;
		  /* 821C1F4Ch */ case    1:  		/* bl -1248508 */
		/* 821C1F4Ch case    1:*/		regs.LR = 0x821C1F50; return 0x82091250;
		/* 821C1F4Ch case    1:*/		return 0x821C1F50;
		  /* 821C1F50h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C1F50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C1F50h case    2:*/		return 0x821C1F54;
		  /* 821C1F54h */ case    3:  		/* mr R27, R4 */
		/* 821C1F54h case    3:*/		regs.R27 = regs.R4;
		/* 821C1F54h case    3:*/		return 0x821C1F58;
	}
	return 0x821C1F58;
} // Block from 821C1F48h-821C1F58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C1F58h
// Function '?MakeInstr_V_KILLE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1F58);
		  /* 821C1F58h */ case    0:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C1F58h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C1F58h case    0:*/		return 0x821C1F5C;
		  /* 821C1F5Ch */ case    1:  		/* mr R28, R5 */
		/* 821C1F5Ch case    1:*/		regs.R28 = regs.R5;
		/* 821C1F5Ch case    1:*/		return 0x821C1F60;
		  /* 821C1F60h */ case    2:  		/* mr R26, R6 */
		/* 821C1F60h case    2:*/		regs.R26 = regs.R6;
		/* 821C1F60h case    2:*/		return 0x821C1F64;
		  /* 821C1F64h */ case    3:  		/* mr R29, R7 */
		/* 821C1F64h case    3:*/		regs.R29 = regs.R7;
		/* 821C1F64h case    3:*/		return 0x821C1F68;
		  /* 821C1F68h */ case    4:  		/* li R8, 4 */
		/* 821C1F68h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C1F68h case    4:*/		return 0x821C1F6C;
		  /* 821C1F6Ch */ case    5:  		/* li R7, 2 */
		/* 821C1F6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C1F6Ch case    5:*/		return 0x821C1F70;
		  /* 821C1F70h */ case    6:  		/* li R6, 3 */
		/* 821C1F70h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821C1F70h case    6:*/		return 0x821C1F74;
		  /* 821C1F74h */ case    7:  		/* li R5, 0 */
		/* 821C1F74h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C1F74h case    7:*/		return 0x821C1F78;
		  /* 821C1F78h */ case    8:  		/* mr R30, R3 */
		/* 821C1F78h case    8:*/		regs.R30 = regs.R3;
		/* 821C1F78h case    8:*/		return 0x821C1F7C;
		  /* 821C1F7Ch */ case    9:  		/* bl 403996 */
		/* 821C1F7Ch case    9:*/		regs.LR = 0x821C1F80; return 0x82224998;
		/* 821C1F7Ch case    9:*/		return 0x821C1F80;
		  /* 821C1F80h */ case   10:  		/* mr R31, R3 */
		/* 821C1F80h case   10:*/		regs.R31 = regs.R3;
		/* 821C1F80h case   10:*/		return 0x821C1F84;
		  /* 821C1F84h */ case   11:  		/* mr R4, R26 */
		/* 821C1F84h case   11:*/		regs.R4 = regs.R26;
		/* 821C1F84h case   11:*/		return 0x821C1F88;
		  /* 821C1F88h */ case   12:  		/* mr R3, R30 */
		/* 821C1F88h case   12:*/		regs.R3 = regs.R30;
		/* 821C1F88h case   12:*/		return 0x821C1F8C;
		  /* 821C1F8Ch */ case   13:  		/* bl -302988 */
		/* 821C1F8Ch case   13:*/		regs.LR = 0x821C1F90; return 0x82178000;
		/* 821C1F8Ch case   13:*/		return 0x821C1F90;
		  /* 821C1F90h */ case   14:  		/* mr R4, R3 */
		/* 821C1F90h case   14:*/		regs.R4 = regs.R3;
		/* 821C1F90h case   14:*/		return 0x821C1F94;
		  /* 821C1F94h */ case   15:  		/* mr R3, R31 */
		/* 821C1F94h case   15:*/		regs.R3 = regs.R31;
		/* 821C1F94h case   15:*/		return 0x821C1F98;
		  /* 821C1F98h */ case   16:  		/* bl -302544 */
		/* 821C1F98h case   16:*/		regs.LR = 0x821C1F9C; return 0x821781C8;
		/* 821C1F98h case   16:*/		return 0x821C1F9C;
		  /* 821C1F9Ch */ case   17:  		/* stw R3, <#[R31 + 44]> */
		/* 821C1F9Ch case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1F9Ch case   17:*/		return 0x821C1FA0;
		  /* 821C1FA0h */ case   18:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C1FA0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C1FA0h case   18:*/		return 0x821C1FA4;
		  /* 821C1FA4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821C1FA4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C1FA4h case   19:*/		return 0x821C1FA8;
		  /* 821C1FA8h */ case   20:  		/* mr R4, R29 */
		/* 821C1FA8h case   20:*/		regs.R4 = regs.R29;
		/* 821C1FA8h case   20:*/		return 0x821C1FAC;
		  /* 821C1FACh */ case   21:  		/* bc 12, CR6_EQ, 20 */
		/* 821C1FACh case   21:*/		if ( regs.CR[6].eq ) { return 0x821C1FC0;  }
		/* 821C1FACh case   21:*/		return 0x821C1FB0;
		  /* 821C1FB0h */ case   22:  		/* mr R3, R30 */
		/* 821C1FB0h case   22:*/		regs.R3 = regs.R30;
		/* 821C1FB0h case   22:*/		return 0x821C1FB4;
		  /* 821C1FB4h */ case   23:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C1FB4h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C1FB4h case   23:*/		return 0x821C1FB8;
		  /* 821C1FB8h */ case   24:  		/* bl -331464 */
		/* 821C1FB8h case   24:*/		regs.LR = 0x821C1FBC; return 0x821710F0;
		/* 821C1FB8h case   24:*/		return 0x821C1FBC;
		  /* 821C1FBCh */ case   25:  		/* mr R4, R3 */
		/* 821C1FBCh case   25:*/		regs.R4 = regs.R3;
		/* 821C1FBCh case   25:*/		return 0x821C1FC0;
	}
	return 0x821C1FC0;
} // Block from 821C1F58h-821C1FC0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C1FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C1FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C1FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C1FC0);
		  /* 821C1FC0h */ case    0:  		/* mr R3, R31 */
		/* 821C1FC0h case    0:*/		regs.R3 = regs.R31;
		/* 821C1FC0h case    0:*/		return 0x821C1FC4;
		  /* 821C1FC4h */ case    1:  		/* bl -302588 */
		/* 821C1FC4h case    1:*/		regs.LR = 0x821C1FC8; return 0x821781C8;
		/* 821C1FC4h case    1:*/		return 0x821C1FC8;
		  /* 821C1FC8h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C1FC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C1FC8h case    2:*/		return 0x821C1FCC;
		  /* 821C1FCCh */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 821C1FCCh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C1FCCh case    3:*/		return 0x821C1FD0;
		  /* 821C1FD0h */ case    4:  		/* mr R6, R28 */
		/* 821C1FD0h case    4:*/		regs.R6 = regs.R28;
		/* 821C1FD0h case    4:*/		return 0x821C1FD4;
		  /* 821C1FD4h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C1FD4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1FD4h case    5:*/		return 0x821C1FD8;
		  /* 821C1FD8h */ case    6:  		/* mr R5, R27 */
		/* 821C1FD8h case    6:*/		regs.R5 = regs.R27;
		/* 821C1FD8h case    6:*/		return 0x821C1FDC;
		  /* 821C1FDCh */ case    7:  		/* mr R4, R31 */
		/* 821C1FDCh case    7:*/		regs.R4 = regs.R31;
		/* 821C1FDCh case    7:*/		return 0x821C1FE0;
		  /* 821C1FE0h */ case    8:  		/* mr R3, R30 */
		/* 821C1FE0h case    8:*/		regs.R3 = regs.R30;
		/* 821C1FE0h case    8:*/		return 0x821C1FE4;
		  /* 821C1FE4h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C1FE4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C1FE4h case    9:*/		return 0x821C1FE8;
		  /* 821C1FE8h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C1FE8h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C1FE8h case   10:*/		return 0x821C1FEC;
		  /* 821C1FECh */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C1FECh case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C1FECh case   11:*/		return 0x821C1FF0;
		  /* 821C1FF0h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C1FF0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C1FF0h case   12:*/		return 0x821C1FF4;
		  /* 821C1FF4h */ case   13:  		/* bl -348492 */
		/* 821C1FF4h case   13:*/		regs.LR = 0x821C1FF8; return 0x8216CEA8;
		/* 821C1FF4h case   13:*/		return 0x821C1FF8;
		  /* 821C1FF8h */ case   14:  		/* mr R3, R31 */
		/* 821C1FF8h case   14:*/		regs.R3 = regs.R31;
		/* 821C1FF8h case   14:*/		return 0x821C1FFC;
		  /* 821C1FFCh */ case   15:  		/* addi R1, R1, 144 */
		/* 821C1FFCh case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C1FFCh case   15:*/		return 0x821C2000;
		  /* 821C2000h */ case   16:  		/* b -1248608 */
		/* 821C2000h case   16:*/		return 0x820912A0;
		/* 821C2000h case   16:*/		return 0x821C2004;
		  /* 821C2004h */ case   17:  		/* nop */
		/* 821C2004h case   17:*/		cpu::op::nop();
		/* 821C2004h case   17:*/		return 0x821C2008;
	}
	return 0x821C2008;
} // Block from 821C1FC0h-821C2008h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C2008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2008);
		  /* 821C2008h */ case    0:  		/* mfspr R12, LR */
		/* 821C2008h case    0:*/		regs.R12 = regs.LR;
		/* 821C2008h case    0:*/		return 0x821C200C;
		  /* 821C200Ch */ case    1:  		/* bl -1248704 */
		/* 821C200Ch case    1:*/		regs.LR = 0x821C2010; return 0x8209124C;
		/* 821C200Ch case    1:*/		return 0x821C2010;
		  /* 821C2010h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2010h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2010h case    2:*/		return 0x821C2014;
		  /* 821C2014h */ case    3:  		/* mr R26, R4 */
		/* 821C2014h case    3:*/		regs.R26 = regs.R4;
		/* 821C2014h case    3:*/		return 0x821C2018;
		  /* 821C2018h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2018h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2018h case    4:*/		return 0x821C201C;
		  /* 821C201Ch */ case    5:  		/* mr R27, R5 */
		/* 821C201Ch case    5:*/		regs.R27 = regs.R5;
		/* 821C201Ch case    5:*/		return 0x821C2020;
		  /* 821C2020h */ case    6:  		/* mr R25, R6 */
		/* 821C2020h case    6:*/		regs.R25 = regs.R6;
		/* 821C2020h case    6:*/		return 0x821C2024;
		  /* 821C2024h */ case    7:  		/* mr R29, R7 */
		/* 821C2024h case    7:*/		regs.R29 = regs.R7;
		/* 821C2024h case    7:*/		return 0x821C2028;
	}
	return 0x821C2028;
} // Block from 821C2008h-821C2028h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C2028h
// Function '?MakeInstr_S_LOG_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2028);
		  /* 821C2028h */ case    0:  		/* mr R28, R8 */
		/* 821C2028h case    0:*/		regs.R28 = regs.R8;
		/* 821C2028h case    0:*/		return 0x821C202C;
		  /* 821C202Ch */ case    1:  		/* li R8, 4 */
		/* 821C202Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C202Ch case    1:*/		return 0x821C2030;
		  /* 821C2030h */ case    2:  		/* li R7, 3 */
		/* 821C2030h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2030h case    2:*/		return 0x821C2034;
		  /* 821C2034h */ case    3:  		/* li R6, 13 */
		/* 821C2034h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C2034h case    3:*/		return 0x821C2038;
		  /* 821C2038h */ case    4:  		/* li R5, 0 */
		/* 821C2038h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2038h case    4:*/		return 0x821C203C;
		  /* 821C203Ch */ case    5:  		/* mr R30, R3 */
		/* 821C203Ch case    5:*/		regs.R30 = regs.R3;
		/* 821C203Ch case    5:*/		return 0x821C2040;
		  /* 821C2040h */ case    6:  		/* bl 403800 */
		/* 821C2040h case    6:*/		regs.LR = 0x821C2044; return 0x82224998;
		/* 821C2040h case    6:*/		return 0x821C2044;
		  /* 821C2044h */ case    7:  		/* mr R31, R3 */
		/* 821C2044h case    7:*/		regs.R31 = regs.R3;
		/* 821C2044h case    7:*/		return 0x821C2048;
		  /* 821C2048h */ case    8:  		/* mr R4, R25 */
		/* 821C2048h case    8:*/		regs.R4 = regs.R25;
		/* 821C2048h case    8:*/		return 0x821C204C;
		  /* 821C204Ch */ case    9:  		/* mr R3, R30 */
		/* 821C204Ch case    9:*/		regs.R3 = regs.R30;
		/* 821C204Ch case    9:*/		return 0x821C2050;
		  /* 821C2050h */ case   10:  		/* bl -303184 */
		/* 821C2050h case   10:*/		regs.LR = 0x821C2054; return 0x82178000;
		/* 821C2050h case   10:*/		return 0x821C2054;
		  /* 821C2054h */ case   11:  		/* mr R4, R3 */
		/* 821C2054h case   11:*/		regs.R4 = regs.R3;
		/* 821C2054h case   11:*/		return 0x821C2058;
		  /* 821C2058h */ case   12:  		/* mr R3, R31 */
		/* 821C2058h case   12:*/		regs.R3 = regs.R31;
		/* 821C2058h case   12:*/		return 0x821C205C;
		  /* 821C205Ch */ case   13:  		/* bl -302740 */
		/* 821C205Ch case   13:*/		regs.LR = 0x821C2060; return 0x821781C8;
		/* 821C205Ch case   13:*/		return 0x821C2060;
		  /* 821C2060h */ case   14:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2060h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2060h case   14:*/		return 0x821C2064;
		  /* 821C2064h */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C2064h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C2064h case   15:*/		return 0x821C2068;
		  /* 821C2068h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C2068h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2068h case   16:*/		return 0x821C206C;
		  /* 821C206Ch */ case   17:  		/* mr R4, R29 */
		/* 821C206Ch case   17:*/		regs.R4 = regs.R29;
		/* 821C206Ch case   17:*/		return 0x821C2070;
		  /* 821C2070h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2070h case   18:*/		if ( regs.CR[6].eq ) { return 0x821C2084;  }
		/* 821C2070h case   18:*/		return 0x821C2074;
		  /* 821C2074h */ case   19:  		/* mr R3, R30 */
		/* 821C2074h case   19:*/		regs.R3 = regs.R30;
		/* 821C2074h case   19:*/		return 0x821C2078;
		  /* 821C2078h */ case   20:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2078h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2078h case   20:*/		return 0x821C207C;
		  /* 821C207Ch */ case   21:  		/* bl -331660 */
		/* 821C207Ch case   21:*/		regs.LR = 0x821C2080; return 0x821710F0;
		/* 821C207Ch case   21:*/		return 0x821C2080;
		  /* 821C2080h */ case   22:  		/* mr R4, R3 */
		/* 821C2080h case   22:*/		regs.R4 = regs.R3;
		/* 821C2080h case   22:*/		return 0x821C2084;
	}
	return 0x821C2084;
} // Block from 821C2028h-821C2084h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C2084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2084);
		  /* 821C2084h */ case    0:  		/* mr R3, R31 */
		/* 821C2084h case    0:*/		regs.R3 = regs.R31;
		/* 821C2084h case    0:*/		return 0x821C2088;
		  /* 821C2088h */ case    1:  		/* bl -302784 */
		/* 821C2088h case    1:*/		regs.LR = 0x821C208C; return 0x821781C8;
		/* 821C2088h case    1:*/		return 0x821C208C;
		  /* 821C208Ch */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C208Ch case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C208Ch case    2:*/		return 0x821C2090;
		  /* 821C2090h */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C2090h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C2090h case    3:*/		return 0x821C2094;
		  /* 821C2094h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C2094h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2094h case    4:*/		return 0x821C2098;
		  /* 821C2098h */ case    5:  		/* mr R4, R28 */
		/* 821C2098h case    5:*/		regs.R4 = regs.R28;
		/* 821C2098h case    5:*/		return 0x821C209C;
		  /* 821C209Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C209Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C20B0;  }
		/* 821C209Ch case    6:*/		return 0x821C20A0;
		  /* 821C20A0h */ case    7:  		/* mr R3, R30 */
		/* 821C20A0h case    7:*/		regs.R3 = regs.R30;
		/* 821C20A0h case    7:*/		return 0x821C20A4;
		  /* 821C20A4h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C20A4h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C20A4h case    8:*/		return 0x821C20A8;
		  /* 821C20A8h */ case    9:  		/* bl -331704 */
		/* 821C20A8h case    9:*/		regs.LR = 0x821C20AC; return 0x821710F0;
		/* 821C20A8h case    9:*/		return 0x821C20AC;
		  /* 821C20ACh */ case   10:  		/* mr R4, R3 */
		/* 821C20ACh case   10:*/		regs.R4 = regs.R3;
		/* 821C20ACh case   10:*/		return 0x821C20B0;
	}
	return 0x821C20B0;
} // Block from 821C2084h-821C20B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C20B0h
// Function '?MakeInstr_S_RECIP_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C20B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C20B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C20B0);
		  /* 821C20B0h */ case    0:  		/* mr R3, R31 */
		/* 821C20B0h case    0:*/		regs.R3 = regs.R31;
		/* 821C20B0h case    0:*/		return 0x821C20B4;
		  /* 821C20B4h */ case    1:  		/* bl -302828 */
		/* 821C20B4h case    1:*/		regs.LR = 0x821C20B8; return 0x821781C8;
		/* 821C20B4h case    1:*/		return 0x821C20B8;
		  /* 821C20B8h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C20B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C20B8h case    2:*/		return 0x821C20BC;
		  /* 821C20BCh */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 821C20BCh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C20BCh case    3:*/		return 0x821C20C0;
		  /* 821C20C0h */ case    4:  		/* mr R6, R27 */
		/* 821C20C0h case    4:*/		regs.R6 = regs.R27;
		/* 821C20C0h case    4:*/		return 0x821C20C4;
		  /* 821C20C4h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C20C4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C20C4h case    5:*/		return 0x821C20C8;
		  /* 821C20C8h */ case    6:  		/* mr R5, R26 */
		/* 821C20C8h case    6:*/		regs.R5 = regs.R26;
		/* 821C20C8h case    6:*/		return 0x821C20CC;
		  /* 821C20CCh */ case    7:  		/* mr R4, R31 */
		/* 821C20CCh case    7:*/		regs.R4 = regs.R31;
		/* 821C20CCh case    7:*/		return 0x821C20D0;
		  /* 821C20D0h */ case    8:  		/* mr R3, R30 */
		/* 821C20D0h case    8:*/		regs.R3 = regs.R30;
		/* 821C20D0h case    8:*/		return 0x821C20D4;
		  /* 821C20D4h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C20D4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C20D4h case    9:*/		return 0x821C20D8;
		  /* 821C20D8h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C20D8h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C20D8h case   10:*/		return 0x821C20DC;
		  /* 821C20DCh */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C20DCh case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C20DCh case   11:*/		return 0x821C20E0;
		  /* 821C20E0h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C20E0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C20E0h case   12:*/		return 0x821C20E4;
		  /* 821C20E4h */ case   13:  		/* bl -348732 */
		/* 821C20E4h case   13:*/		regs.LR = 0x821C20E8; return 0x8216CEA8;
		/* 821C20E4h case   13:*/		return 0x821C20E8;
		  /* 821C20E8h */ case   14:  		/* mr R3, R31 */
		/* 821C20E8h case   14:*/		regs.R3 = regs.R31;
		/* 821C20E8h case   14:*/		return 0x821C20EC;
		  /* 821C20ECh */ case   15:  		/* addi R1, R1, 144 */
		/* 821C20ECh case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C20ECh case   15:*/		return 0x821C20F0;
		  /* 821C20F0h */ case   16:  		/* b -1248852 */
		/* 821C20F0h case   16:*/		return 0x8209129C;
		/* 821C20F0h case   16:*/		return 0x821C20F4;
		  /* 821C20F4h */ case   17:  		/* nop */
		/* 821C20F4h case   17:*/		cpu::op::nop();
		/* 821C20F4h case   17:*/		return 0x821C20F8;
	}
	return 0x821C20F8;
} // Block from 821C20B0h-821C20F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C20F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C20F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C20F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C20F8);
		  /* 821C20F8h */ case    0:  		/* mfspr R12, LR */
		/* 821C20F8h case    0:*/		regs.R12 = regs.LR;
		/* 821C20F8h case    0:*/		return 0x821C20FC;
		  /* 821C20FCh */ case    1:  		/* bl -1248936 */
		/* 821C20FCh case    1:*/		regs.LR = 0x821C2100; return 0x82091254;
		/* 821C20FCh case    1:*/		return 0x821C2100;
		  /* 821C2100h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C2100h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C2100h case    2:*/		return 0x821C2104;
		  /* 821C2104h */ case    3:  		/* mr R30, R4 */
		/* 821C2104h case    3:*/		regs.R30 = regs.R4;
		/* 821C2104h case    3:*/		return 0x821C2108;
		  /* 821C2108h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2108h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2108h case    4:*/		return 0x821C210C;
		  /* 821C210Ch */ case    5:  		/* mr R29, R5 */
		/* 821C210Ch case    5:*/		regs.R29 = regs.R5;
		/* 821C210Ch case    5:*/		return 0x821C2110;
		  /* 821C2110h */ case    6:  		/* mr R28, R6 */
		/* 821C2110h case    6:*/		regs.R28 = regs.R6;
		/* 821C2110h case    6:*/		return 0x821C2114;
		  /* 821C2114h */ case    7:  		/* li R8, 1 */
		/* 821C2114h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C2114h case    7:*/		return 0x821C2118;
		  /* 821C2118h */ case    8:  		/* li R7, 1 */
		/* 821C2118h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C2118h case    8:*/		return 0x821C211C;
		  /* 821C211Ch */ case    9:  		/* li R6, 46 */
		/* 821C211Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x2E);
		/* 821C211Ch case    9:*/		return 0x821C2120;
		  /* 821C2120h */ case   10:  		/* li R5, 0 */
		/* 821C2120h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2120h case   10:*/		return 0x821C2124;
		  /* 821C2124h */ case   11:  		/* mr R31, R3 */
		/* 821C2124h case   11:*/		regs.R31 = regs.R3;
		/* 821C2124h case   11:*/		return 0x821C2128;
		  /* 821C2128h */ case   12:  		/* bl 403568 */
		/* 821C2128h case   12:*/		regs.LR = 0x821C212C; return 0x82224998;
		/* 821C2128h case   12:*/		return 0x821C212C;
		  /* 821C212Ch */ case   13:  		/* mr R27, R3 */
		/* 821C212Ch case   13:*/		regs.R27 = regs.R3;
		/* 821C212Ch case   13:*/		return 0x821C2130;
		  /* 821C2130h */ case   14:  		/* mr R3, R31 */
		/* 821C2130h case   14:*/		regs.R3 = regs.R31;
		/* 821C2130h case   14:*/		return 0x821C2134;
		  /* 821C2134h */ case   15:  		/* mr R4, R28 */
		/* 821C2134h case   15:*/		regs.R4 = regs.R28;
		/* 821C2134h case   15:*/		return 0x821C2138;
	}
	return 0x821C2138;
} // Block from 821C20F8h-821C2138h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C2138h
// Function '?MakeInstr_S_RECIPSQRT_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2138);
		  /* 821C2138h */ case    0:  		/* bl -303416 */
		/* 821C2138h case    0:*/		regs.LR = 0x821C213C; return 0x82178000;
		/* 821C2138h case    0:*/		return 0x821C213C;
		  /* 821C213Ch */ case    1:  		/* mr R4, R3 */
		/* 821C213Ch case    1:*/		regs.R4 = regs.R3;
		/* 821C213Ch case    1:*/		return 0x821C2140;
		  /* 821C2140h */ case    2:  		/* mr R3, R27 */
		/* 821C2140h case    2:*/		regs.R3 = regs.R27;
		/* 821C2140h case    2:*/		return 0x821C2144;
		  /* 821C2144h */ case    3:  		/* bl -302972 */
		/* 821C2144h case    3:*/		regs.LR = 0x821C2148; return 0x821781C8;
		/* 821C2144h case    3:*/		return 0x821C2148;
		  /* 821C2148h */ case    4:  		/* stw R3, <#[R27 + 44]> */
		/* 821C2148h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821C2148h case    4:*/		return 0x821C214C;
		  /* 821C214Ch */ case    5:  		/* mr R4, R27 */
		/* 821C214Ch case    5:*/		regs.R4 = regs.R27;
		/* 821C214Ch case    5:*/		return 0x821C2150;
		  /* 821C2150h */ case    6:  		/* mr R6, R29 */
		/* 821C2150h case    6:*/		regs.R6 = regs.R29;
		/* 821C2150h case    6:*/		return 0x821C2154;
		  /* 821C2154h */ case    7:  		/* mr R5, R30 */
		/* 821C2154h case    7:*/		regs.R5 = regs.R30;
		/* 821C2154h case    7:*/		return 0x821C2158;
		  /* 821C2158h */ case    8:  		/* mr R3, R31 */
		/* 821C2158h case    8:*/		regs.R3 = regs.R31;
		/* 821C2158h case    8:*/		return 0x821C215C;
		  /* 821C215Ch */ case    9:  		/* bl -348852 */
		/* 821C215Ch case    9:*/		regs.LR = 0x821C2160; return 0x8216CEA8;
		/* 821C215Ch case    9:*/		return 0x821C2160;
		  /* 821C2160h */ case   10:  		/* mr R3, R27 */
		/* 821C2160h case   10:*/		regs.R3 = regs.R27;
		/* 821C2160h case   10:*/		return 0x821C2164;
		  /* 821C2164h */ case   11:  		/* addi R1, R1, 128 */
		/* 821C2164h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C2164h case   11:*/		return 0x821C2168;
		  /* 821C2168h */ case   12:  		/* b -1248964 */
		/* 821C2168h case   12:*/		return 0x820912A4;
		/* 821C2168h case   12:*/		return 0x821C216C;
		  /* 821C216Ch */ case   13:  		/* nop */
		/* 821C216Ch case   13:*/		cpu::op::nop();
		/* 821C216Ch case   13:*/		return 0x821C2170;
	}
	return 0x821C2170;
} // Block from 821C2138h-821C2170h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C2170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2170);
		  /* 821C2170h */ case    0:  		/* mfspr R12, LR */
		/* 821C2170h case    0:*/		regs.R12 = regs.LR;
		/* 821C2170h case    0:*/		return 0x821C2174;
		  /* 821C2174h */ case    1:  		/* bl -1249056 */
		/* 821C2174h case    1:*/		regs.LR = 0x821C2178; return 0x82091254;
		/* 821C2174h case    1:*/		return 0x821C2178;
		  /* 821C2178h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C2178h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C2178h case    2:*/		return 0x821C217C;
		  /* 821C217Ch */ case    3:  		/* mr R30, R4 */
		/* 821C217Ch case    3:*/		regs.R30 = regs.R4;
		/* 821C217Ch case    3:*/		return 0x821C2180;
		  /* 821C2180h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2180h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2180h case    4:*/		return 0x821C2184;
		  /* 821C2184h */ case    5:  		/* mr R29, R5 */
		/* 821C2184h case    5:*/		regs.R29 = regs.R5;
		/* 821C2184h case    5:*/		return 0x821C2188;
		  /* 821C2188h */ case    6:  		/* mr R28, R6 */
		/* 821C2188h case    6:*/		regs.R28 = regs.R6;
		/* 821C2188h case    6:*/		return 0x821C218C;
		  /* 821C218Ch */ case    7:  		/* li R8, 1 */
		/* 821C218Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C218Ch case    7:*/		return 0x821C2190;
		  /* 821C2190h */ case    8:  		/* li R7, 1 */
		/* 821C2190h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C2190h case    8:*/		return 0x821C2194;
		  /* 821C2194h */ case    9:  		/* li R6, 51 */
		/* 821C2194h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x33);
		/* 821C2194h case    9:*/		return 0x821C2198;
		  /* 821C2198h */ case   10:  		/* li R5, 0 */
		/* 821C2198h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2198h case   10:*/		return 0x821C219C;
		  /* 821C219Ch */ case   11:  		/* mr R31, R3 */
		/* 821C219Ch case   11:*/		regs.R31 = regs.R3;
		/* 821C219Ch case   11:*/		return 0x821C21A0;
		  /* 821C21A0h */ case   12:  		/* bl 403448 */
		/* 821C21A0h case   12:*/		regs.LR = 0x821C21A4; return 0x82224998;
		/* 821C21A0h case   12:*/		return 0x821C21A4;
		  /* 821C21A4h */ case   13:  		/* mr R27, R3 */
		/* 821C21A4h case   13:*/		regs.R27 = regs.R3;
		/* 821C21A4h case   13:*/		return 0x821C21A8;
		  /* 821C21A8h */ case   14:  		/* mr R3, R31 */
		/* 821C21A8h case   14:*/		regs.R3 = regs.R31;
		/* 821C21A8h case   14:*/		return 0x821C21AC;
		  /* 821C21ACh */ case   15:  		/* mr R4, R28 */
		/* 821C21ACh case   15:*/		regs.R4 = regs.R28;
		/* 821C21ACh case   15:*/		return 0x821C21B0;
		  /* 821C21B0h */ case   16:  		/* bl -303536 */
		/* 821C21B0h case   16:*/		regs.LR = 0x821C21B4; return 0x82178000;
		/* 821C21B0h case   16:*/		return 0x821C21B4;
		  /* 821C21B4h */ case   17:  		/* mr R4, R3 */
		/* 821C21B4h case   17:*/		regs.R4 = regs.R3;
		/* 821C21B4h case   17:*/		return 0x821C21B8;
		  /* 821C21B8h */ case   18:  		/* mr R3, R27 */
		/* 821C21B8h case   18:*/		regs.R3 = regs.R27;
		/* 821C21B8h case   18:*/		return 0x821C21BC;
		  /* 821C21BCh */ case   19:  		/* bl -303092 */
		/* 821C21BCh case   19:*/		regs.LR = 0x821C21C0; return 0x821781C8;
		/* 821C21BCh case   19:*/		return 0x821C21C0;
	}
	return 0x821C21C0;
} // Block from 821C2170h-821C21C0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C21C0h
// Function '?MakeInstr_S_MAXA@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C21C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C21C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C21C0);
		  /* 821C21C0h */ case    0:  		/* stw R3, <#[R27 + 44]> */
		/* 821C21C0h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821C21C0h case    0:*/		return 0x821C21C4;
		  /* 821C21C4h */ case    1:  		/* mr R4, R27 */
		/* 821C21C4h case    1:*/		regs.R4 = regs.R27;
		/* 821C21C4h case    1:*/		return 0x821C21C8;
		  /* 821C21C8h */ case    2:  		/* mr R6, R29 */
		/* 821C21C8h case    2:*/		regs.R6 = regs.R29;
		/* 821C21C8h case    2:*/		return 0x821C21CC;
		  /* 821C21CCh */ case    3:  		/* mr R5, R30 */
		/* 821C21CCh case    3:*/		regs.R5 = regs.R30;
		/* 821C21CCh case    3:*/		return 0x821C21D0;
		  /* 821C21D0h */ case    4:  		/* mr R3, R31 */
		/* 821C21D0h case    4:*/		regs.R3 = regs.R31;
		/* 821C21D0h case    4:*/		return 0x821C21D4;
		  /* 821C21D4h */ case    5:  		/* bl -348972 */
		/* 821C21D4h case    5:*/		regs.LR = 0x821C21D8; return 0x8216CEA8;
		/* 821C21D4h case    5:*/		return 0x821C21D8;
		  /* 821C21D8h */ case    6:  		/* mr R3, R27 */
		/* 821C21D8h case    6:*/		regs.R3 = regs.R27;
		/* 821C21D8h case    6:*/		return 0x821C21DC;
		  /* 821C21DCh */ case    7:  		/* addi R1, R1, 128 */
		/* 821C21DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C21DCh case    7:*/		return 0x821C21E0;
		  /* 821C21E0h */ case    8:  		/* b -1249084 */
		/* 821C21E0h case    8:*/		return 0x820912A4;
		/* 821C21E0h case    8:*/		return 0x821C21E4;
		  /* 821C21E4h */ case    9:  		/* nop */
		/* 821C21E4h case    9:*/		cpu::op::nop();
		/* 821C21E4h case    9:*/		return 0x821C21E8;
	}
	return 0x821C21E8;
} // Block from 821C21C0h-821C21E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C21E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C21E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C21E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C21E8);
		  /* 821C21E8h */ case    0:  		/* mfspr R12, LR */
		/* 821C21E8h case    0:*/		regs.R12 = regs.LR;
		/* 821C21E8h case    0:*/		return 0x821C21EC;
		  /* 821C21ECh */ case    1:  		/* bl -1249176 */
		/* 821C21ECh case    1:*/		regs.LR = 0x821C21F0; return 0x82091254;
		/* 821C21ECh case    1:*/		return 0x821C21F0;
		  /* 821C21F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C21F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C21F0h case    2:*/		return 0x821C21F4;
		  /* 821C21F4h */ case    3:  		/* mr R30, R4 */
		/* 821C21F4h case    3:*/		regs.R30 = regs.R4;
		/* 821C21F4h case    3:*/		return 0x821C21F8;
		  /* 821C21F8h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C21F8h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C21F8h case    4:*/		return 0x821C21FC;
		  /* 821C21FCh */ case    5:  		/* mr R29, R5 */
		/* 821C21FCh case    5:*/		regs.R29 = regs.R5;
		/* 821C21FCh case    5:*/		return 0x821C2200;
		  /* 821C2200h */ case    6:  		/* mr R28, R6 */
		/* 821C2200h case    6:*/		regs.R28 = regs.R6;
		/* 821C2200h case    6:*/		return 0x821C2204;
		  /* 821C2204h */ case    7:  		/* li R8, 1 */
		/* 821C2204h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C2204h case    7:*/		return 0x821C2208;
		  /* 821C2208h */ case    8:  		/* li R7, 1 */
		/* 821C2208h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C2208h case    8:*/		return 0x821C220C;
		  /* 821C220Ch */ case    9:  		/* li R6, 72 */
		/* 821C220Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x48);
		/* 821C220Ch case    9:*/		return 0x821C2210;
		  /* 821C2210h */ case   10:  		/* li R5, 0 */
		/* 821C2210h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2210h case   10:*/		return 0x821C2214;
		  /* 821C2214h */ case   11:  		/* mr R31, R3 */
		/* 821C2214h case   11:*/		regs.R31 = regs.R3;
		/* 821C2214h case   11:*/		return 0x821C2218;
		  /* 821C2218h */ case   12:  		/* bl 403328 */
		/* 821C2218h case   12:*/		regs.LR = 0x821C221C; return 0x82224998;
		/* 821C2218h case   12:*/		return 0x821C221C;
		  /* 821C221Ch */ case   13:  		/* mr R27, R3 */
		/* 821C221Ch case   13:*/		regs.R27 = regs.R3;
		/* 821C221Ch case   13:*/		return 0x821C2220;
		  /* 821C2220h */ case   14:  		/* mr R3, R31 */
		/* 821C2220h case   14:*/		regs.R3 = regs.R31;
		/* 821C2220h case   14:*/		return 0x821C2224;
		  /* 821C2224h */ case   15:  		/* mr R4, R28 */
		/* 821C2224h case   15:*/		regs.R4 = regs.R28;
		/* 821C2224h case   15:*/		return 0x821C2228;
		  /* 821C2228h */ case   16:  		/* bl -303656 */
		/* 821C2228h case   16:*/		regs.LR = 0x821C222C; return 0x82178000;
		/* 821C2228h case   16:*/		return 0x821C222C;
		  /* 821C222Ch */ case   17:  		/* mr R4, R3 */
		/* 821C222Ch case   17:*/		regs.R4 = regs.R3;
		/* 821C222Ch case   17:*/		return 0x821C2230;
		  /* 821C2230h */ case   18:  		/* mr R3, R27 */
		/* 821C2230h case   18:*/		regs.R3 = regs.R27;
		/* 821C2230h case   18:*/		return 0x821C2234;
		  /* 821C2234h */ case   19:  		/* bl -303212 */
		/* 821C2234h case   19:*/		regs.LR = 0x821C2238; return 0x821781C8;
		/* 821C2234h case   19:*/		return 0x821C2238;
		  /* 821C2238h */ case   20:  		/* stw R3, <#[R27 + 44]> */
		/* 821C2238h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821C2238h case   20:*/		return 0x821C223C;
		  /* 821C223Ch */ case   21:  		/* mr R4, R27 */
		/* 821C223Ch case   21:*/		regs.R4 = regs.R27;
		/* 821C223Ch case   21:*/		return 0x821C2240;
		  /* 821C2240h */ case   22:  		/* mr R6, R29 */
		/* 821C2240h case   22:*/		regs.R6 = regs.R29;
		/* 821C2240h case   22:*/		return 0x821C2244;
		  /* 821C2244h */ case   23:  		/* mr R5, R30 */
		/* 821C2244h case   23:*/		regs.R5 = regs.R30;
		/* 821C2244h case   23:*/		return 0x821C2248;
	}
	return 0x821C2248;
} // Block from 821C21E8h-821C2248h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2248h
// Function '?MakeInstr_S_PRED_SETE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2248);
		  /* 821C2248h */ case    0:  		/* mr R3, R31 */
		/* 821C2248h case    0:*/		regs.R3 = regs.R31;
		/* 821C2248h case    0:*/		return 0x821C224C;
		  /* 821C224Ch */ case    1:  		/* bl -349092 */
		/* 821C224Ch case    1:*/		regs.LR = 0x821C2250; return 0x8216CEA8;
		/* 821C224Ch case    1:*/		return 0x821C2250;
		  /* 821C2250h */ case    2:  		/* mr R3, R27 */
		/* 821C2250h case    2:*/		regs.R3 = regs.R27;
		/* 821C2250h case    2:*/		return 0x821C2254;
		  /* 821C2254h */ case    3:  		/* addi R1, R1, 128 */
		/* 821C2254h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C2254h case    3:*/		return 0x821C2258;
		  /* 821C2258h */ case    4:  		/* b -1249204 */
		/* 821C2258h case    4:*/		return 0x820912A4;
		/* 821C2258h case    4:*/		return 0x821C225C;
		  /* 821C225Ch */ case    5:  		/* nop */
		/* 821C225Ch case    5:*/		cpu::op::nop();
		/* 821C225Ch case    5:*/		return 0x821C2260;
	}
	return 0x821C2260;
} // Block from 821C2248h-821C2260h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C2260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2260);
		  /* 821C2260h */ case    0:  		/* mfspr R12, LR */
		/* 821C2260h case    0:*/		regs.R12 = regs.LR;
		/* 821C2260h case    0:*/		return 0x821C2264;
		  /* 821C2264h */ case    1:  		/* bl -1249304 */
		/* 821C2264h case    1:*/		regs.LR = 0x821C2268; return 0x8209124C;
		/* 821C2264h case    1:*/		return 0x821C2268;
		  /* 821C2268h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2268h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2268h case    2:*/		return 0x821C226C;
		  /* 821C226Ch */ case    3:  		/* mr R25, R4 */
		/* 821C226Ch case    3:*/		regs.R25 = regs.R4;
		/* 821C226Ch case    3:*/		return 0x821C2270;
		  /* 821C2270h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2270h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2270h case    4:*/		return 0x821C2274;
		  /* 821C2274h */ case    5:  		/* mr R26, R5 */
		/* 821C2274h case    5:*/		regs.R26 = regs.R5;
		/* 821C2274h case    5:*/		return 0x821C2278;
		  /* 821C2278h */ case    6:  		/* mr R29, R6 */
		/* 821C2278h case    6:*/		regs.R29 = regs.R6;
		/* 821C2278h case    6:*/		return 0x821C227C;
		  /* 821C227Ch */ case    7:  		/* mr R27, R7 */
		/* 821C227Ch case    7:*/		regs.R27 = regs.R7;
		/* 821C227Ch case    7:*/		return 0x821C2280;
		  /* 821C2280h */ case    8:  		/* mr R28, R8 */
		/* 821C2280h case    8:*/		regs.R28 = regs.R8;
		/* 821C2280h case    8:*/		return 0x821C2284;
		  /* 821C2284h */ case    9:  		/* li R8, 4 */
		/* 821C2284h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2284h case    9:*/		return 0x821C2288;
		  /* 821C2288h */ case   10:  		/* li R7, 3 */
		/* 821C2288h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2288h case   10:*/		return 0x821C228C;
		  /* 821C228Ch */ case   11:  		/* li R6, 13 */
		/* 821C228Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C228Ch case   11:*/		return 0x821C2290;
		  /* 821C2290h */ case   12:  		/* li R5, 0 */
		/* 821C2290h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2290h case   12:*/		return 0x821C2294;
		  /* 821C2294h */ case   13:  		/* mr R30, R3 */
		/* 821C2294h case   13:*/		regs.R30 = regs.R3;
		/* 821C2294h case   13:*/		return 0x821C2298;
		  /* 821C2298h */ case   14:  		/* bl 403200 */
		/* 821C2298h case   14:*/		regs.LR = 0x821C229C; return 0x82224998;
		/* 821C2298h case   14:*/		return 0x821C229C;
		  /* 821C229Ch */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C229Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C229Ch case   15:*/		return 0x821C22A0;
		  /* 821C22A0h */ case   16:  		/* mr R31, R3 */
		/* 821C22A0h case   16:*/		regs.R31 = regs.R3;
		/* 821C22A0h case   16:*/		return 0x821C22A4;
		  /* 821C22A4h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821C22A4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C22A4h case   17:*/		return 0x821C22A8;
		  /* 821C22A8h */ case   18:  		/* mr R4, R29 */
		/* 821C22A8h case   18:*/		regs.R4 = regs.R29;
		/* 821C22A8h case   18:*/		return 0x821C22AC;
		  /* 821C22ACh */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821C22ACh case   19:*/		if ( regs.CR[6].eq ) { return 0x821C22C0;  }
		/* 821C22ACh case   19:*/		return 0x821C22B0;
		  /* 821C22B0h */ case   20:  		/* mr R3, R30 */
		/* 821C22B0h case   20:*/		regs.R3 = regs.R30;
		/* 821C22B0h case   20:*/		return 0x821C22B4;
		  /* 821C22B4h */ case   21:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C22B4h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C22B4h case   21:*/		return 0x821C22B8;
		  /* 821C22B8h */ case   22:  		/* bl -332232 */
		/* 821C22B8h case   22:*/		regs.LR = 0x821C22BC; return 0x821710F0;
		/* 821C22B8h case   22:*/		return 0x821C22BC;
		  /* 821C22BCh */ case   23:  		/* mr R4, R3 */
		/* 821C22BCh case   23:*/		regs.R4 = regs.R3;
		/* 821C22BCh case   23:*/		return 0x821C22C0;
	}
	return 0x821C22C0;
} // Block from 821C2260h-821C22C0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C22C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C22C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C22C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C22C0);
		  /* 821C22C0h */ case    0:  		/* mr R3, R31 */
		/* 821C22C0h case    0:*/		regs.R3 = regs.R31;
		/* 821C22C0h case    0:*/		return 0x821C22C4;
		  /* 821C22C4h */ case    1:  		/* bl -303356 */
		/* 821C22C4h case    1:*/		regs.LR = 0x821C22C8; return 0x821781C8;
		/* 821C22C4h case    1:*/		return 0x821C22C8;
		  /* 821C22C8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C22C8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C22C8h case    2:*/		return 0x821C22CC;
		  /* 821C22CCh */ case    3:  		/* mr R4, R27 */
		/* 821C22CCh case    3:*/		regs.R4 = regs.R27;
		/* 821C22CCh case    3:*/		return 0x821C22D0;
	}
	return 0x821C22D0;
} // Block from 821C22C0h-821C22D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C22D0h
// Function '?MakeInstr_S_PRED_SETNE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C22D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C22D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C22D0);
		  /* 821C22D0h */ case    0:  		/* mr R3, R30 */
		/* 821C22D0h case    0:*/		regs.R3 = regs.R30;
		/* 821C22D0h case    0:*/		return 0x821C22D4;
		  /* 821C22D4h */ case    1:  		/* bl -303828 */
		/* 821C22D4h case    1:*/		regs.LR = 0x821C22D8; return 0x82178000;
		/* 821C22D4h case    1:*/		return 0x821C22D8;
		  /* 821C22D8h */ case    2:  		/* mr R4, R3 */
		/* 821C22D8h case    2:*/		regs.R4 = regs.R3;
		/* 821C22D8h case    2:*/		return 0x821C22DC;
		  /* 821C22DCh */ case    3:  		/* mr R3, R31 */
		/* 821C22DCh case    3:*/		regs.R3 = regs.R31;
		/* 821C22DCh case    3:*/		return 0x821C22E0;
		  /* 821C22E0h */ case    4:  		/* bl -303384 */
		/* 821C22E0h case    4:*/		regs.LR = 0x821C22E4; return 0x821781C8;
		/* 821C22E0h case    4:*/		return 0x821C22E4;
		  /* 821C22E4h */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 821C22E4h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C22E4h case    5:*/		return 0x821C22E8;
		  /* 821C22E8h */ case    6:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C22E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C22E8h case    6:*/		return 0x821C22EC;
		  /* 821C22ECh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C22ECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C22ECh case    7:*/		return 0x821C22F0;
		  /* 821C22F0h */ case    8:  		/* mr R4, R28 */
		/* 821C22F0h case    8:*/		regs.R4 = regs.R28;
		/* 821C22F0h case    8:*/		return 0x821C22F4;
		  /* 821C22F4h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821C22F4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C2308;  }
		/* 821C22F4h case    9:*/		return 0x821C22F8;
		  /* 821C22F8h */ case   10:  		/* mr R3, R30 */
		/* 821C22F8h case   10:*/		regs.R3 = regs.R30;
		/* 821C22F8h case   10:*/		return 0x821C22FC;
		  /* 821C22FCh */ case   11:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C22FCh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C22FCh case   11:*/		return 0x821C2300;
		  /* 821C2300h */ case   12:  		/* bl -332304 */
		/* 821C2300h case   12:*/		regs.LR = 0x821C2304; return 0x821710F0;
		/* 821C2300h case   12:*/		return 0x821C2304;
		  /* 821C2304h */ case   13:  		/* mr R4, R3 */
		/* 821C2304h case   13:*/		regs.R4 = regs.R3;
		/* 821C2304h case   13:*/		return 0x821C2308;
	}
	return 0x821C2308;
} // Block from 821C22D0h-821C2308h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C2308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2308);
		  /* 821C2308h */ case    0:  		/* mr R3, R31 */
		/* 821C2308h case    0:*/		regs.R3 = regs.R31;
		/* 821C2308h case    0:*/		return 0x821C230C;
		  /* 821C230Ch */ case    1:  		/* bl -303428 */
		/* 821C230Ch case    1:*/		regs.LR = 0x821C2310; return 0x821781C8;
		/* 821C230Ch case    1:*/		return 0x821C2310;
		  /* 821C2310h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C2310h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2310h case    2:*/		return 0x821C2314;
		  /* 821C2314h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 821C2314h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C2314h case    3:*/		return 0x821C2318;
		  /* 821C2318h */ case    4:  		/* mr R6, R26 */
		/* 821C2318h case    4:*/		regs.R6 = regs.R26;
		/* 821C2318h case    4:*/		return 0x821C231C;
		  /* 821C231Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C231Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C231Ch case    5:*/		return 0x821C2320;
		  /* 821C2320h */ case    6:  		/* mr R5, R25 */
		/* 821C2320h case    6:*/		regs.R5 = regs.R25;
		/* 821C2320h case    6:*/		return 0x821C2324;
		  /* 821C2324h */ case    7:  		/* mr R4, R31 */
		/* 821C2324h case    7:*/		regs.R4 = regs.R31;
		/* 821C2324h case    7:*/		return 0x821C2328;
		  /* 821C2328h */ case    8:  		/* mr R3, R30 */
		/* 821C2328h case    8:*/		regs.R3 = regs.R30;
		/* 821C2328h case    8:*/		return 0x821C232C;
		  /* 821C232Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C232Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C232Ch case    9:*/		return 0x821C2330;
		  /* 821C2330h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2330h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2330h case   10:*/		return 0x821C2334;
		  /* 821C2334h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2334h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2334h case   11:*/		return 0x821C2338;
		  /* 821C2338h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C2338h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2338h case   12:*/		return 0x821C233C;
		  /* 821C233Ch */ case   13:  		/* bl -349332 */
		/* 821C233Ch case   13:*/		regs.LR = 0x821C2340; return 0x8216CEA8;
		/* 821C233Ch case   13:*/		return 0x821C2340;
		  /* 821C2340h */ case   14:  		/* mr R3, R31 */
		/* 821C2340h case   14:*/		regs.R3 = regs.R31;
		/* 821C2340h case   14:*/		return 0x821C2344;
		  /* 821C2344h */ case   15:  		/* addi R1, R1, 144 */
		/* 821C2344h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2344h case   15:*/		return 0x821C2348;
		  /* 821C2348h */ case   16:  		/* b -1249452 */
		/* 821C2348h case   16:*/		return 0x8209129C;
		/* 821C2348h case   16:*/		return 0x821C234C;
		  /* 821C234Ch */ case   17:  		/* nop */
		/* 821C234Ch case   17:*/		cpu::op::nop();
		/* 821C234Ch case   17:*/		return 0x821C2350;
	}
	return 0x821C2350;
} // Block from 821C2308h-821C2350h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C2350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2350);
		  /* 821C2350h */ case    0:  		/* mfspr R12, LR */
		/* 821C2350h case    0:*/		regs.R12 = regs.LR;
		/* 821C2350h case    0:*/		return 0x821C2354;
		  /* 821C2354h */ case    1:  		/* bl -1249540 */
		/* 821C2354h case    1:*/		regs.LR = 0x821C2358; return 0x82091250;
		/* 821C2354h case    1:*/		return 0x821C2358;
	}
	return 0x821C2358;
} // Block from 821C2350h-821C2358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C2358h
// Function '?MakeInstr_S_PRED_SETNE@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2358);
		  /* 821C2358h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2358h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2358h case    0:*/		return 0x821C235C;
		  /* 821C235Ch */ case    1:  		/* mr R30, R4 */
		/* 821C235Ch case    1:*/		regs.R30 = regs.R4;
		/* 821C235Ch case    1:*/		return 0x821C2360;
		  /* 821C2360h */ case    2:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2360h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2360h case    2:*/		return 0x821C2364;
		  /* 821C2364h */ case    3:  		/* mr R29, R5 */
		/* 821C2364h case    3:*/		regs.R29 = regs.R5;
		/* 821C2364h case    3:*/		return 0x821C2368;
		  /* 821C2368h */ case    4:  		/* mr R28, R6 */
		/* 821C2368h case    4:*/		regs.R28 = regs.R6;
		/* 821C2368h case    4:*/		return 0x821C236C;
		  /* 821C236Ch */ case    5:  		/* mr R27, R7 */
		/* 821C236Ch case    5:*/		regs.R27 = regs.R7;
		/* 821C236Ch case    5:*/		return 0x821C2370;
		  /* 821C2370h */ case    6:  		/* li R8, 4 */
		/* 821C2370h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2370h case    6:*/		return 0x821C2374;
		  /* 821C2374h */ case    7:  		/* li R7, 2 */
		/* 821C2374h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C2374h case    7:*/		return 0x821C2378;
		  /* 821C2378h */ case    8:  		/* li R6, 1 */
		/* 821C2378h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C2378h case    8:*/		return 0x821C237C;
		  /* 821C237Ch */ case    9:  		/* li R5, 0 */
		/* 821C237Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C237Ch case    9:*/		return 0x821C2380;
		  /* 821C2380h */ case   10:  		/* mr R31, R3 */
		/* 821C2380h case   10:*/		regs.R31 = regs.R3;
		/* 821C2380h case   10:*/		return 0x821C2384;
		  /* 821C2384h */ case   11:  		/* bl 402964 */
		/* 821C2384h case   11:*/		regs.LR = 0x821C2388; return 0x82224998;
		/* 821C2384h case   11:*/		return 0x821C2388;
		  /* 821C2388h */ case   12:  		/* mr R26, R3 */
		/* 821C2388h case   12:*/		regs.R26 = regs.R3;
		/* 821C2388h case   12:*/		return 0x821C238C;
		  /* 821C238Ch */ case   13:  		/* mr R3, R31 */
		/* 821C238Ch case   13:*/		regs.R3 = regs.R31;
		/* 821C238Ch case   13:*/		return 0x821C2390;
		  /* 821C2390h */ case   14:  		/* mr R4, R28 */
		/* 821C2390h case   14:*/		regs.R4 = regs.R28;
		/* 821C2390h case   14:*/		return 0x821C2394;
		  /* 821C2394h */ case   15:  		/* bl -304020 */
		/* 821C2394h case   15:*/		regs.LR = 0x821C2398; return 0x82178000;
		/* 821C2394h case   15:*/		return 0x821C2398;
		  /* 821C2398h */ case   16:  		/* mr R4, R3 */
		/* 821C2398h case   16:*/		regs.R4 = regs.R3;
		/* 821C2398h case   16:*/		return 0x821C239C;
		  /* 821C239Ch */ case   17:  		/* mr R3, R26 */
		/* 821C239Ch case   17:*/		regs.R3 = regs.R26;
		/* 821C239Ch case   17:*/		return 0x821C23A0;
		  /* 821C23A0h */ case   18:  		/* bl -303576 */
		/* 821C23A0h case   18:*/		regs.LR = 0x821C23A4; return 0x821781C8;
		/* 821C23A0h case   18:*/		return 0x821C23A4;
		  /* 821C23A4h */ case   19:  		/* stw R3, <#[R26 + 44]> */
		/* 821C23A4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x0000002C) );
		/* 821C23A4h case   19:*/		return 0x821C23A8;
		  /* 821C23A8h */ case   20:  		/* mr R3, R31 */
		/* 821C23A8h case   20:*/		regs.R3 = regs.R31;
		/* 821C23A8h case   20:*/		return 0x821C23AC;
		  /* 821C23ACh */ case   21:  		/* mr R4, R27 */
		/* 821C23ACh case   21:*/		regs.R4 = regs.R27;
		/* 821C23ACh case   21:*/		return 0x821C23B0;
		  /* 821C23B0h */ case   22:  		/* bl -304048 */
		/* 821C23B0h case   22:*/		regs.LR = 0x821C23B4; return 0x82178000;
		/* 821C23B0h case   22:*/		return 0x821C23B4;
		  /* 821C23B4h */ case   23:  		/* mr R4, R3 */
		/* 821C23B4h case   23:*/		regs.R4 = regs.R3;
		/* 821C23B4h case   23:*/		return 0x821C23B8;
		  /* 821C23B8h */ case   24:  		/* mr R3, R26 */
		/* 821C23B8h case   24:*/		regs.R3 = regs.R26;
		/* 821C23B8h case   24:*/		return 0x821C23BC;
		  /* 821C23BCh */ case   25:  		/* bl -303604 */
		/* 821C23BCh case   25:*/		regs.LR = 0x821C23C0; return 0x821781C8;
		/* 821C23BCh case   25:*/		return 0x821C23C0;
		  /* 821C23C0h */ case   26:  		/* lwz R11, <#[R26 + 44]> */
		/* 821C23C0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821C23C0h case   26:*/		return 0x821C23C4;
		  /* 821C23C4h */ case   27:  		/* stw R3, <#[R26 + 48]> */
		/* 821C23C4h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000030) );
		/* 821C23C4h case   27:*/		return 0x821C23C8;
		  /* 821C23C8h */ case   28:  		/* mr R4, R26 */
		/* 821C23C8h case   28:*/		regs.R4 = regs.R26;
		/* 821C23C8h case   28:*/		return 0x821C23CC;
		  /* 821C23CCh */ case   29:  		/* lwz R10, <#[R26 + 8]> */
		/* 821C23CCh case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821C23CCh case   29:*/		return 0x821C23D0;
		  /* 821C23D0h */ case   30:  		/* mr R6, R29 */
		/* 821C23D0h case   30:*/		regs.R6 = regs.R29;
		/* 821C23D0h case   30:*/		return 0x821C23D4;
		  /* 821C23D4h */ case   31:  		/* mr R5, R30 */
		/* 821C23D4h case   31:*/		regs.R5 = regs.R30;
		/* 821C23D4h case   31:*/		return 0x821C23D8;
		  /* 821C23D8h */ case   32:  		/* mr R3, R31 */
		/* 821C23D8h case   32:*/		regs.R3 = regs.R31;
		/* 821C23D8h case   32:*/		return 0x821C23DC;
		  /* 821C23DCh */ case   33:  		/* lwz R11, <#[R11]> */
		/* 821C23DCh case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C23DCh case   33:*/		return 0x821C23E0;
		  /* 821C23E0h */ case   34:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C23E0h case   34:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C23E0h case   34:*/		return 0x821C23E4;
		  /* 821C23E4h */ case   35:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C23E4h case   35:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C23E4h case   35:*/		return 0x821C23E8;
		  /* 821C23E8h */ case   36:  		/* stw R10, <#[R26 + 8]> */
		/* 821C23E8h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821C23E8h case   36:*/		return 0x821C23EC;
		  /* 821C23ECh */ case   37:  		/* bl -349508 */
		/* 821C23ECh case   37:*/		regs.LR = 0x821C23F0; return 0x8216CEA8;
		/* 821C23ECh case   37:*/		return 0x821C23F0;
		  /* 821C23F0h */ case   38:  		/* mr R3, R26 */
		/* 821C23F0h case   38:*/		regs.R3 = regs.R26;
		/* 821C23F0h case   38:*/		return 0x821C23F4;
		  /* 821C23F4h */ case   39:  		/* addi R1, R1, 144 */
		/* 821C23F4h case   39:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C23F4h case   39:*/		return 0x821C23F8;
		  /* 821C23F8h */ case   40:  		/* b -1249624 */
		/* 821C23F8h case   40:*/		return 0x820912A0;
		/* 821C23F8h case   40:*/		return 0x821C23FC;
		  /* 821C23FCh */ case   41:  		/* nop */
		/* 821C23FCh case   41:*/		cpu::op::nop();
		/* 821C23FCh case   41:*/		return 0x821C2400;
	}
	return 0x821C2400;
} // Block from 821C2358h-821C2400h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821C2400h
// Function '?MakeInstr_S_PRED_SETGT@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2400);
		  /* 821C2400h */ case    0:  		/* mfspr R12, LR */
		/* 821C2400h case    0:*/		regs.R12 = regs.LR;
		/* 821C2400h case    0:*/		return 0x821C2404;
		  /* 821C2404h */ case    1:  		/* bl -1249716 */
		/* 821C2404h case    1:*/		regs.LR = 0x821C2408; return 0x82091250;
		/* 821C2404h case    1:*/		return 0x821C2408;
		  /* 821C2408h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2408h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2408h case    2:*/		return 0x821C240C;
		  /* 821C240Ch */ case    3:  		/* mr R30, R4 */
		/* 821C240Ch case    3:*/		regs.R30 = regs.R4;
		/* 821C240Ch case    3:*/		return 0x821C2410;
		  /* 821C2410h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2410h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2410h case    4:*/		return 0x821C2414;
		  /* 821C2414h */ case    5:  		/* mr R29, R5 */
		/* 821C2414h case    5:*/		regs.R29 = regs.R5;
		/* 821C2414h case    5:*/		return 0x821C2418;
		  /* 821C2418h */ case    6:  		/* mr R28, R6 */
		/* 821C2418h case    6:*/		regs.R28 = regs.R6;
		/* 821C2418h case    6:*/		return 0x821C241C;
		  /* 821C241Ch */ case    7:  		/* mr R27, R7 */
		/* 821C241Ch case    7:*/		regs.R27 = regs.R7;
		/* 821C241Ch case    7:*/		return 0x821C2420;
		  /* 821C2420h */ case    8:  		/* li R8, 4 */
		/* 821C2420h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2420h case    8:*/		return 0x821C2424;
		  /* 821C2424h */ case    9:  		/* li R7, 2 */
		/* 821C2424h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C2424h case    9:*/		return 0x821C2428;
		  /* 821C2428h */ case   10:  		/* li R6, 2 */
		/* 821C2428h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C2428h case   10:*/		return 0x821C242C;
		  /* 821C242Ch */ case   11:  		/* li R5, 0 */
		/* 821C242Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C242Ch case   11:*/		return 0x821C2430;
		  /* 821C2430h */ case   12:  		/* mr R31, R3 */
		/* 821C2430h case   12:*/		regs.R31 = regs.R3;
		/* 821C2430h case   12:*/		return 0x821C2434;
		  /* 821C2434h */ case   13:  		/* bl 402788 */
		/* 821C2434h case   13:*/		regs.LR = 0x821C2438; return 0x82224998;
		/* 821C2434h case   13:*/		return 0x821C2438;
		  /* 821C2438h */ case   14:  		/* mr R26, R3 */
		/* 821C2438h case   14:*/		regs.R26 = regs.R3;
		/* 821C2438h case   14:*/		return 0x821C243C;
		  /* 821C243Ch */ case   15:  		/* mr R3, R31 */
		/* 821C243Ch case   15:*/		regs.R3 = regs.R31;
		/* 821C243Ch case   15:*/		return 0x821C2440;
		  /* 821C2440h */ case   16:  		/* mr R4, R28 */
		/* 821C2440h case   16:*/		regs.R4 = regs.R28;
		/* 821C2440h case   16:*/		return 0x821C2444;
		  /* 821C2444h */ case   17:  		/* bl -304196 */
		/* 821C2444h case   17:*/		regs.LR = 0x821C2448; return 0x82178000;
		/* 821C2444h case   17:*/		return 0x821C2448;
		  /* 821C2448h */ case   18:  		/* mr R4, R3 */
		/* 821C2448h case   18:*/		regs.R4 = regs.R3;
		/* 821C2448h case   18:*/		return 0x821C244C;
		  /* 821C244Ch */ case   19:  		/* mr R3, R26 */
		/* 821C244Ch case   19:*/		regs.R3 = regs.R26;
		/* 821C244Ch case   19:*/		return 0x821C2450;
		  /* 821C2450h */ case   20:  		/* bl -303752 */
		/* 821C2450h case   20:*/		regs.LR = 0x821C2454; return 0x821781C8;
		/* 821C2450h case   20:*/		return 0x821C2454;
		  /* 821C2454h */ case   21:  		/* stw R3, <#[R26 + 44]> */
		/* 821C2454h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x0000002C) );
		/* 821C2454h case   21:*/		return 0x821C2458;
		  /* 821C2458h */ case   22:  		/* mr R3, R31 */
		/* 821C2458h case   22:*/		regs.R3 = regs.R31;
		/* 821C2458h case   22:*/		return 0x821C245C;
		  /* 821C245Ch */ case   23:  		/* mr R4, R27 */
		/* 821C245Ch case   23:*/		regs.R4 = regs.R27;
		/* 821C245Ch case   23:*/		return 0x821C2460;
		  /* 821C2460h */ case   24:  		/* bl -304224 */
		/* 821C2460h case   24:*/		regs.LR = 0x821C2464; return 0x82178000;
		/* 821C2460h case   24:*/		return 0x821C2464;
		  /* 821C2464h */ case   25:  		/* mr R4, R3 */
		/* 821C2464h case   25:*/		regs.R4 = regs.R3;
		/* 821C2464h case   25:*/		return 0x821C2468;
		  /* 821C2468h */ case   26:  		/* mr R3, R26 */
		/* 821C2468h case   26:*/		regs.R3 = regs.R26;
		/* 821C2468h case   26:*/		return 0x821C246C;
		  /* 821C246Ch */ case   27:  		/* bl -303780 */
		/* 821C246Ch case   27:*/		regs.LR = 0x821C2470; return 0x821781C8;
		/* 821C246Ch case   27:*/		return 0x821C2470;
		  /* 821C2470h */ case   28:  		/* lwz R11, <#[R26 + 44]> */
		/* 821C2470h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000002C) );
		/* 821C2470h case   28:*/		return 0x821C2474;
		  /* 821C2474h */ case   29:  		/* stw R3, <#[R26 + 48]> */
		/* 821C2474h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000030) );
		/* 821C2474h case   29:*/		return 0x821C2478;
		  /* 821C2478h */ case   30:  		/* mr R4, R26 */
		/* 821C2478h case   30:*/		regs.R4 = regs.R26;
		/* 821C2478h case   30:*/		return 0x821C247C;
		  /* 821C247Ch */ case   31:  		/* lwz R10, <#[R26 + 8]> */
		/* 821C247Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821C247Ch case   31:*/		return 0x821C2480;
		  /* 821C2480h */ case   32:  		/* mr R6, R29 */
		/* 821C2480h case   32:*/		regs.R6 = regs.R29;
		/* 821C2480h case   32:*/		return 0x821C2484;
		  /* 821C2484h */ case   33:  		/* mr R5, R30 */
		/* 821C2484h case   33:*/		regs.R5 = regs.R30;
		/* 821C2484h case   33:*/		return 0x821C2488;
	}
	return 0x821C2488;
} // Block from 821C2400h-821C2488h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821C2488h
// Function '?MakeInstr_S_PRED_SETGE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2488);
		  /* 821C2488h */ case    0:  		/* mr R3, R31 */
		/* 821C2488h case    0:*/		regs.R3 = regs.R31;
		/* 821C2488h case    0:*/		return 0x821C248C;
		  /* 821C248Ch */ case    1:  		/* lwz R11, <#[R11]> */
		/* 821C248Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C248Ch case    1:*/		return 0x821C2490;
		  /* 821C2490h */ case    2:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2490h case    2:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2490h case    2:*/		return 0x821C2494;
		  /* 821C2494h */ case    3:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2494h case    3:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2494h case    3:*/		return 0x821C2498;
		  /* 821C2498h */ case    4:  		/* stw R10, <#[R26 + 8]> */
		/* 821C2498h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821C2498h case    4:*/		return 0x821C249C;
		  /* 821C249Ch */ case    5:  		/* bl -349684 */
		/* 821C249Ch case    5:*/		regs.LR = 0x821C24A0; return 0x8216CEA8;
		/* 821C249Ch case    5:*/		return 0x821C24A0;
		  /* 821C24A0h */ case    6:  		/* mr R3, R26 */
		/* 821C24A0h case    6:*/		regs.R3 = regs.R26;
		/* 821C24A0h case    6:*/		return 0x821C24A4;
		  /* 821C24A4h */ case    7:  		/* addi R1, R1, 144 */
		/* 821C24A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C24A4h case    7:*/		return 0x821C24A8;
		  /* 821C24A8h */ case    8:  		/* b -1249800 */
		/* 821C24A8h case    8:*/		return 0x820912A0;
		/* 821C24A8h case    8:*/		return 0x821C24AC;
		  /* 821C24ACh */ case    9:  		/* nop */
		/* 821C24ACh case    9:*/		cpu::op::nop();
		/* 821C24ACh case    9:*/		return 0x821C24B0;
	}
	return 0x821C24B0;
} // Block from 821C2488h-821C24B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C24B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C24B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C24B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C24B0);
		  /* 821C24B0h */ case    0:  		/* mfspr R12, LR */
		/* 821C24B0h case    0:*/		regs.R12 = regs.LR;
		/* 821C24B0h case    0:*/		return 0x821C24B4;
		  /* 821C24B4h */ case    1:  		/* bl -1249896 */
		/* 821C24B4h case    1:*/		regs.LR = 0x821C24B8; return 0x8209124C;
		/* 821C24B4h case    1:*/		return 0x821C24B8;
		  /* 821C24B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C24B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C24B8h case    2:*/		return 0x821C24BC;
		  /* 821C24BCh */ case    3:  		/* mr R27, R4 */
		/* 821C24BCh case    3:*/		regs.R27 = regs.R4;
		/* 821C24BCh case    3:*/		return 0x821C24C0;
		  /* 821C24C0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C24C0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C24C0h case    4:*/		return 0x821C24C4;
		  /* 821C24C4h */ case    5:  		/* mr R28, R5 */
		/* 821C24C4h case    5:*/		regs.R28 = regs.R5;
		/* 821C24C4h case    5:*/		return 0x821C24C8;
		  /* 821C24C8h */ case    6:  		/* mr R26, R6 */
		/* 821C24C8h case    6:*/		regs.R26 = regs.R6;
		/* 821C24C8h case    6:*/		return 0x821C24CC;
		  /* 821C24CCh */ case    7:  		/* mr R25, R7 */
		/* 821C24CCh case    7:*/		regs.R25 = regs.R7;
		/* 821C24CCh case    7:*/		return 0x821C24D0;
		  /* 821C24D0h */ case    8:  		/* mr R29, R8 */
		/* 821C24D0h case    8:*/		regs.R29 = regs.R8;
		/* 821C24D0h case    8:*/		return 0x821C24D4;
		  /* 821C24D4h */ case    9:  		/* li R8, 4 */
		/* 821C24D4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C24D4h case    9:*/		return 0x821C24D8;
		  /* 821C24D8h */ case   10:  		/* li R7, 3 */
		/* 821C24D8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C24D8h case   10:*/		return 0x821C24DC;
		  /* 821C24DCh */ case   11:  		/* li R6, 12 */
		/* 821C24DCh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xC);
		/* 821C24DCh case   11:*/		return 0x821C24E0;
		  /* 821C24E0h */ case   12:  		/* li R5, 0 */
		/* 821C24E0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C24E0h case   12:*/		return 0x821C24E4;
		  /* 821C24E4h */ case   13:  		/* mr R30, R3 */
		/* 821C24E4h case   13:*/		regs.R30 = regs.R3;
		/* 821C24E4h case   13:*/		return 0x821C24E8;
		  /* 821C24E8h */ case   14:  		/* bl 402608 */
		/* 821C24E8h case   14:*/		regs.LR = 0x821C24EC; return 0x82224998;
		/* 821C24E8h case   14:*/		return 0x821C24EC;
		  /* 821C24ECh */ case   15:  		/* mr R31, R3 */
		/* 821C24ECh case   15:*/		regs.R31 = regs.R3;
		/* 821C24ECh case   15:*/		return 0x821C24F0;
		  /* 821C24F0h */ case   16:  		/* mr R3, R30 */
		/* 821C24F0h case   16:*/		regs.R3 = regs.R30;
		/* 821C24F0h case   16:*/		return 0x821C24F4;
		  /* 821C24F4h */ case   17:  		/* mr R4, R26 */
		/* 821C24F4h case   17:*/		regs.R4 = regs.R26;
		/* 821C24F4h case   17:*/		return 0x821C24F8;
		  /* 821C24F8h */ case   18:  		/* bl -304376 */
		/* 821C24F8h case   18:*/		regs.LR = 0x821C24FC; return 0x82178000;
		/* 821C24F8h case   18:*/		return 0x821C24FC;
		  /* 821C24FCh */ case   19:  		/* mr R4, R3 */
		/* 821C24FCh case   19:*/		regs.R4 = regs.R3;
		/* 821C24FCh case   19:*/		return 0x821C2500;
		  /* 821C2500h */ case   20:  		/* mr R3, R31 */
		/* 821C2500h case   20:*/		regs.R3 = regs.R31;
		/* 821C2500h case   20:*/		return 0x821C2504;
		  /* 821C2504h */ case   21:  		/* bl -303932 */
		/* 821C2504h case   21:*/		regs.LR = 0x821C2508; return 0x821781C8;
		/* 821C2504h case   21:*/		return 0x821C2508;
		  /* 821C2508h */ case   22:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2508h case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2508h case   22:*/		return 0x821C250C;
		  /* 821C250Ch */ case   23:  		/* mr R4, R25 */
		/* 821C250Ch case   23:*/		regs.R4 = regs.R25;
		/* 821C250Ch case   23:*/		return 0x821C2510;
	}
	return 0x821C2510;
} // Block from 821C24B0h-821C2510h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2510h
// Function '?MakeInstr_S_SQRT_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2510);
		  /* 821C2510h */ case    0:  		/* mr R3, R30 */
		/* 821C2510h case    0:*/		regs.R3 = regs.R30;
		/* 821C2510h case    0:*/		return 0x821C2514;
		  /* 821C2514h */ case    1:  		/* bl -304404 */
		/* 821C2514h case    1:*/		regs.LR = 0x821C2518; return 0x82178000;
		/* 821C2514h case    1:*/		return 0x821C2518;
		  /* 821C2518h */ case    2:  		/* mr R4, R3 */
		/* 821C2518h case    2:*/		regs.R4 = regs.R3;
		/* 821C2518h case    2:*/		return 0x821C251C;
		  /* 821C251Ch */ case    3:  		/* mr R3, R31 */
		/* 821C251Ch case    3:*/		regs.R3 = regs.R31;
		/* 821C251Ch case    3:*/		return 0x821C2520;
		  /* 821C2520h */ case    4:  		/* bl -303960 */
		/* 821C2520h case    4:*/		regs.LR = 0x821C2524; return 0x821781C8;
		/* 821C2520h case    4:*/		return 0x821C2524;
		  /* 821C2524h */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 821C2524h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2524h case    5:*/		return 0x821C2528;
		  /* 821C2528h */ case    6:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C2528h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C2528h case    6:*/		return 0x821C252C;
		  /* 821C252Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C252Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C252Ch case    7:*/		return 0x821C2530;
		  /* 821C2530h */ case    8:  		/* mr R4, R29 */
		/* 821C2530h case    8:*/		regs.R4 = regs.R29;
		/* 821C2530h case    8:*/		return 0x821C2534;
		  /* 821C2534h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2534h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C2548;  }
		/* 821C2534h case    9:*/		return 0x821C2538;
		  /* 821C2538h */ case   10:  		/* mr R3, R30 */
		/* 821C2538h case   10:*/		regs.R3 = regs.R30;
		/* 821C2538h case   10:*/		return 0x821C253C;
		  /* 821C253Ch */ case   11:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C253Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C253Ch case   11:*/		return 0x821C2540;
		  /* 821C2540h */ case   12:  		/* bl -332880 */
		/* 821C2540h case   12:*/		regs.LR = 0x821C2544; return 0x821710F0;
		/* 821C2540h case   12:*/		return 0x821C2544;
		  /* 821C2544h */ case   13:  		/* mr R4, R3 */
		/* 821C2544h case   13:*/		regs.R4 = regs.R3;
		/* 821C2544h case   13:*/		return 0x821C2548;
	}
	return 0x821C2548;
} // Block from 821C2510h-821C2548h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C2548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2548);
		  /* 821C2548h */ case    0:  		/* mr R3, R31 */
		/* 821C2548h case    0:*/		regs.R3 = regs.R31;
		/* 821C2548h case    0:*/		return 0x821C254C;
		  /* 821C254Ch */ case    1:  		/* bl -304004 */
		/* 821C254Ch case    1:*/		regs.LR = 0x821C2550; return 0x821781C8;
		/* 821C254Ch case    1:*/		return 0x821C2550;
		  /* 821C2550h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C2550h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2550h case    2:*/		return 0x821C2554;
		  /* 821C2554h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 821C2554h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C2554h case    3:*/		return 0x821C2558;
		  /* 821C2558h */ case    4:  		/* mr R6, R28 */
		/* 821C2558h case    4:*/		regs.R6 = regs.R28;
		/* 821C2558h case    4:*/		return 0x821C255C;
		  /* 821C255Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C255Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C255Ch case    5:*/		return 0x821C2560;
		  /* 821C2560h */ case    6:  		/* mr R5, R27 */
		/* 821C2560h case    6:*/		regs.R5 = regs.R27;
		/* 821C2560h case    6:*/		return 0x821C2564;
		  /* 821C2564h */ case    7:  		/* mr R4, R31 */
		/* 821C2564h case    7:*/		regs.R4 = regs.R31;
		/* 821C2564h case    7:*/		return 0x821C2568;
		  /* 821C2568h */ case    8:  		/* mr R3, R30 */
		/* 821C2568h case    8:*/		regs.R3 = regs.R30;
		/* 821C2568h case    8:*/		return 0x821C256C;
		  /* 821C256Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C256Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C256Ch case    9:*/		return 0x821C2570;
		  /* 821C2570h */ case   10:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2570h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2570h case   10:*/		return 0x821C2574;
		  /* 821C2574h */ case   11:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2574h case   11:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2574h case   11:*/		return 0x821C2578;
		  /* 821C2578h */ case   12:  		/* stw R10, <#[R31 + 8]> */
		/* 821C2578h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2578h case   12:*/		return 0x821C257C;
		  /* 821C257Ch */ case   13:  		/* bl -349908 */
		/* 821C257Ch case   13:*/		regs.LR = 0x821C2580; return 0x8216CEA8;
		/* 821C257Ch case   13:*/		return 0x821C2580;
		  /* 821C2580h */ case   14:  		/* mr R3, R31 */
		/* 821C2580h case   14:*/		regs.R3 = regs.R31;
		/* 821C2580h case   14:*/		return 0x821C2584;
		  /* 821C2584h */ case   15:  		/* addi R1, R1, 144 */
		/* 821C2584h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2584h case   15:*/		return 0x821C2588;
		  /* 821C2588h */ case   16:  		/* b -1250028 */
		/* 821C2588h case   16:*/		return 0x8209129C;
		/* 821C2588h case   16:*/		return 0x821C258C;
		  /* 821C258Ch */ case   17:  		/* nop */
		/* 821C258Ch case   17:*/		cpu::op::nop();
		/* 821C258Ch case   17:*/		return 0x821C2590;
	}
	return 0x821C2590;
} // Block from 821C2548h-821C2590h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C2590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2590);
		  /* 821C2590h */ case    0:  		/* mfspr R12, LR */
		/* 821C2590h case    0:*/		regs.R12 = regs.LR;
		/* 821C2590h case    0:*/		return 0x821C2594;
		  /* 821C2594h */ case    1:  		/* bl -1250116 */
		/* 821C2594h case    1:*/		regs.LR = 0x821C2598; return 0x82091250;
		/* 821C2594h case    1:*/		return 0x821C2598;
	}
	return 0x821C2598;
} // Block from 821C2590h-821C2598h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C2598h
// Function '?MakeInstr_Q_COND_JUMP@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2598);
		  /* 821C2598h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2598h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2598h case    0:*/		return 0x821C259C;
		  /* 821C259Ch */ case    1:  		/* mr R30, R4 */
		/* 821C259Ch case    1:*/		regs.R30 = regs.R4;
		/* 821C259Ch case    1:*/		return 0x821C25A0;
		  /* 821C25A0h */ case    2:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C25A0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C25A0h case    2:*/		return 0x821C25A4;
		  /* 821C25A4h */ case    3:  		/* mr R29, R5 */
		/* 821C25A4h case    3:*/		regs.R29 = regs.R5;
		/* 821C25A4h case    3:*/		return 0x821C25A8;
		  /* 821C25A8h */ case    4:  		/* mr R28, R6 */
		/* 821C25A8h case    4:*/		regs.R28 = regs.R6;
		/* 821C25A8h case    4:*/		return 0x821C25AC;
		  /* 821C25ACh */ case    5:  		/* mr R27, R7 */
		/* 821C25ACh case    5:*/		regs.R27 = regs.R7;
		/* 821C25ACh case    5:*/		return 0x821C25B0;
		  /* 821C25B0h */ case    6:  		/* li R8, 4 */
		/* 821C25B0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C25B0h case    6:*/		return 0x821C25B4;
		  /* 821C25B4h */ case    7:  		/* li R7, 2 */
		/* 821C25B4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C25B4h case    7:*/		return 0x821C25B8;
		  /* 821C25B8h */ case    8:  		/* li R6, 17 */
		/* 821C25B8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x11);
		/* 821C25B8h case    8:*/		return 0x821C25BC;
		  /* 821C25BCh */ case    9:  		/* li R5, 0 */
		/* 821C25BCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C25BCh case    9:*/		return 0x821C25C0;
		  /* 821C25C0h */ case   10:  		/* mr R31, R3 */
		/* 821C25C0h case   10:*/		regs.R31 = regs.R3;
		/* 821C25C0h case   10:*/		return 0x821C25C4;
		  /* 821C25C4h */ case   11:  		/* bl 402388 */
		/* 821C25C4h case   11:*/		regs.LR = 0x821C25C8; return 0x82224998;
		/* 821C25C4h case   11:*/		return 0x821C25C8;
		  /* 821C25C8h */ case   12:  		/* mr R26, R3 */
		/* 821C25C8h case   12:*/		regs.R26 = regs.R3;
		/* 821C25C8h case   12:*/		return 0x821C25CC;
		  /* 821C25CCh */ case   13:  		/* mr R3, R31 */
		/* 821C25CCh case   13:*/		regs.R3 = regs.R31;
		/* 821C25CCh case   13:*/		return 0x821C25D0;
		  /* 821C25D0h */ case   14:  		/* mr R4, R28 */
		/* 821C25D0h case   14:*/		regs.R4 = regs.R28;
		/* 821C25D0h case   14:*/		return 0x821C25D4;
		  /* 821C25D4h */ case   15:  		/* bl -304596 */
		/* 821C25D4h case   15:*/		regs.LR = 0x821C25D8; return 0x82178000;
		/* 821C25D4h case   15:*/		return 0x821C25D8;
		  /* 821C25D8h */ case   16:  		/* mr R4, R3 */
		/* 821C25D8h case   16:*/		regs.R4 = regs.R3;
		/* 821C25D8h case   16:*/		return 0x821C25DC;
		  /* 821C25DCh */ case   17:  		/* mr R3, R26 */
		/* 821C25DCh case   17:*/		regs.R3 = regs.R26;
		/* 821C25DCh case   17:*/		return 0x821C25E0;
		  /* 821C25E0h */ case   18:  		/* bl -304152 */
		/* 821C25E0h case   18:*/		regs.LR = 0x821C25E4; return 0x821781C8;
		/* 821C25E0h case   18:*/		return 0x821C25E4;
		  /* 821C25E4h */ case   19:  		/* stw R3, <#[R26 + 44]> */
		/* 821C25E4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x0000002C) );
		/* 821C25E4h case   19:*/		return 0x821C25E8;
		  /* 821C25E8h */ case   20:  		/* mr R3, R31 */
		/* 821C25E8h case   20:*/		regs.R3 = regs.R31;
		/* 821C25E8h case   20:*/		return 0x821C25EC;
		  /* 821C25ECh */ case   21:  		/* mr R4, R27 */
		/* 821C25ECh case   21:*/		regs.R4 = regs.R27;
		/* 821C25ECh case   21:*/		return 0x821C25F0;
		  /* 821C25F0h */ case   22:  		/* bl -304624 */
		/* 821C25F0h case   22:*/		regs.LR = 0x821C25F4; return 0x82178000;
		/* 821C25F0h case   22:*/		return 0x821C25F4;
		  /* 821C25F4h */ case   23:  		/* mr R4, R3 */
		/* 821C25F4h case   23:*/		regs.R4 = regs.R3;
		/* 821C25F4h case   23:*/		return 0x821C25F8;
		  /* 821C25F8h */ case   24:  		/* mr R3, R26 */
		/* 821C25F8h case   24:*/		regs.R3 = regs.R26;
		/* 821C25F8h case   24:*/		return 0x821C25FC;
		  /* 821C25FCh */ case   25:  		/* bl -304180 */
		/* 821C25FCh case   25:*/		regs.LR = 0x821C2600; return 0x821781C8;
		/* 821C25FCh case   25:*/		return 0x821C2600;
		  /* 821C2600h */ case   26:  		/* lwz R11, <#[R26 + 8]> */
		/* 821C2600h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C2600h case   26:*/		return 0x821C2604;
		  /* 821C2604h */ case   27:  		/* li R10, 1 */
		/* 821C2604h case   27:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C2604h case   27:*/		return 0x821C2608;
		  /* 821C2608h */ case   28:  		/* stw R3, <#[R26 + 48]> */
		/* 821C2608h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000030) );
		/* 821C2608h case   28:*/		return 0x821C260C;
		  /* 821C260Ch */ case   29:  		/* mr R4, R26 */
		/* 821C260Ch case   29:*/		regs.R4 = regs.R26;
		/* 821C260Ch case   29:*/		return 0x821C2610;
		  /* 821C2610h */ case   30:  		/* rlwimi R11, R10, 14, 15, 17 */
		/* 821C2610h case   30:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R10);
		/* 821C2610h case   30:*/		return 0x821C2614;
		  /* 821C2614h */ case   31:  		/* mr R6, R29 */
		/* 821C2614h case   31:*/		regs.R6 = regs.R29;
		/* 821C2614h case   31:*/		return 0x821C2618;
		  /* 821C2618h */ case   32:  		/* stw R11, <#[R26 + 8]> */
		/* 821C2618h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C2618h case   32:*/		return 0x821C261C;
		  /* 821C261Ch */ case   33:  		/* mr R5, R30 */
		/* 821C261Ch case   33:*/		regs.R5 = regs.R30;
		/* 821C261Ch case   33:*/		return 0x821C2620;
		  /* 821C2620h */ case   34:  		/* mr R3, R31 */
		/* 821C2620h case   34:*/		regs.R3 = regs.R31;
		/* 821C2620h case   34:*/		return 0x821C2624;
		  /* 821C2624h */ case   35:  		/* bl -350076 */
		/* 821C2624h case   35:*/		regs.LR = 0x821C2628; return 0x8216CEA8;
		/* 821C2624h case   35:*/		return 0x821C2628;
		  /* 821C2628h */ case   36:  		/* mr R3, R26 */
		/* 821C2628h case   36:*/		regs.R3 = regs.R26;
		/* 821C2628h case   36:*/		return 0x821C262C;
		  /* 821C262Ch */ case   37:  		/* addi R1, R1, 144 */
		/* 821C262Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C262Ch case   37:*/		return 0x821C2630;
		  /* 821C2630h */ case   38:  		/* b -1250192 */
		/* 821C2630h case   38:*/		return 0x820912A0;
		/* 821C2630h case   38:*/		return 0x821C2634;
		  /* 821C2634h */ case   39:  		/* nop */
		/* 821C2634h case   39:*/		cpu::op::nop();
		/* 821C2634h case   39:*/		return 0x821C2638;
	}
	return 0x821C2638;
} // Block from 821C2598h-821C2638h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821C2638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2638);
		  /* 821C2638h */ case    0:  		/* mfspr R12, LR */
		/* 821C2638h case    0:*/		regs.R12 = regs.LR;
		/* 821C2638h case    0:*/		return 0x821C263C;
		  /* 821C263Ch */ case    1:  		/* bl -1250288 */
		/* 821C263Ch case    1:*/		regs.LR = 0x821C2640; return 0x8209124C;
		/* 821C263Ch case    1:*/		return 0x821C2640;
	}
	return 0x821C2640;
} // Block from 821C2638h-821C2640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C2640h
// Function '?MakeInstr_V_ADD@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2640);
		  /* 821C2640h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2640h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2640h case    0:*/		return 0x821C2644;
		  /* 821C2644h */ case    1:  		/* mr R27, R4 */
		/* 821C2644h case    1:*/		regs.R27 = regs.R4;
		/* 821C2644h case    1:*/		return 0x821C2648;
		  /* 821C2648h */ case    2:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2648h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2648h case    2:*/		return 0x821C264C;
		  /* 821C264Ch */ case    3:  		/* mr R28, R5 */
		/* 821C264Ch case    3:*/		regs.R28 = regs.R5;
		/* 821C264Ch case    3:*/		return 0x821C2650;
		  /* 821C2650h */ case    4:  		/* mr R26, R6 */
		/* 821C2650h case    4:*/		regs.R26 = regs.R6;
		/* 821C2650h case    4:*/		return 0x821C2654;
		  /* 821C2654h */ case    5:  		/* mr R25, R7 */
		/* 821C2654h case    5:*/		regs.R25 = regs.R7;
		/* 821C2654h case    5:*/		return 0x821C2658;
		  /* 821C2658h */ case    6:  		/* mr R29, R8 */
		/* 821C2658h case    6:*/		regs.R29 = regs.R8;
		/* 821C2658h case    6:*/		return 0x821C265C;
		  /* 821C265Ch */ case    7:  		/* li R8, 4 */
		/* 821C265Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C265Ch case    7:*/		return 0x821C2660;
		  /* 821C2660h */ case    8:  		/* li R7, 3 */
		/* 821C2660h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2660h case    8:*/		return 0x821C2664;
		  /* 821C2664h */ case    9:  		/* li R6, 18 */
		/* 821C2664h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x12);
		/* 821C2664h case    9:*/		return 0x821C2668;
		  /* 821C2668h */ case   10:  		/* li R5, 0 */
		/* 821C2668h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2668h case   10:*/		return 0x821C266C;
		  /* 821C266Ch */ case   11:  		/* mr R30, R3 */
		/* 821C266Ch case   11:*/		regs.R30 = regs.R3;
		/* 821C266Ch case   11:*/		return 0x821C2670;
		  /* 821C2670h */ case   12:  		/* bl 402216 */
		/* 821C2670h case   12:*/		regs.LR = 0x821C2674; return 0x82224998;
		/* 821C2670h case   12:*/		return 0x821C2674;
		  /* 821C2674h */ case   13:  		/* mr R31, R3 */
		/* 821C2674h case   13:*/		regs.R31 = regs.R3;
		/* 821C2674h case   13:*/		return 0x821C2678;
		  /* 821C2678h */ case   14:  		/* mr R3, R30 */
		/* 821C2678h case   14:*/		regs.R3 = regs.R30;
		/* 821C2678h case   14:*/		return 0x821C267C;
		  /* 821C267Ch */ case   15:  		/* mr R4, R26 */
		/* 821C267Ch case   15:*/		regs.R4 = regs.R26;
		/* 821C267Ch case   15:*/		return 0x821C2680;
		  /* 821C2680h */ case   16:  		/* bl -304768 */
		/* 821C2680h case   16:*/		regs.LR = 0x821C2684; return 0x82178000;
		/* 821C2680h case   16:*/		return 0x821C2684;
		  /* 821C2684h */ case   17:  		/* mr R4, R3 */
		/* 821C2684h case   17:*/		regs.R4 = regs.R3;
		/* 821C2684h case   17:*/		return 0x821C2688;
		  /* 821C2688h */ case   18:  		/* mr R3, R31 */
		/* 821C2688h case   18:*/		regs.R3 = regs.R31;
		/* 821C2688h case   18:*/		return 0x821C268C;
		  /* 821C268Ch */ case   19:  		/* bl -304324 */
		/* 821C268Ch case   19:*/		regs.LR = 0x821C2690; return 0x821781C8;
		/* 821C268Ch case   19:*/		return 0x821C2690;
		  /* 821C2690h */ case   20:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2690h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2690h case   20:*/		return 0x821C2694;
		  /* 821C2694h */ case   21:  		/* mr R4, R25 */
		/* 821C2694h case   21:*/		regs.R4 = regs.R25;
		/* 821C2694h case   21:*/		return 0x821C2698;
		  /* 821C2698h */ case   22:  		/* mr R3, R30 */
		/* 821C2698h case   22:*/		regs.R3 = regs.R30;
		/* 821C2698h case   22:*/		return 0x821C269C;
		  /* 821C269Ch */ case   23:  		/* bl -304796 */
		/* 821C269Ch case   23:*/		regs.LR = 0x821C26A0; return 0x82178000;
		/* 821C269Ch case   23:*/		return 0x821C26A0;
		  /* 821C26A0h */ case   24:  		/* mr R4, R3 */
		/* 821C26A0h case   24:*/		regs.R4 = regs.R3;
		/* 821C26A0h case   24:*/		return 0x821C26A4;
		  /* 821C26A4h */ case   25:  		/* mr R3, R31 */
		/* 821C26A4h case   25:*/		regs.R3 = regs.R31;
		/* 821C26A4h case   25:*/		return 0x821C26A8;
		  /* 821C26A8h */ case   26:  		/* bl -304352 */
		/* 821C26A8h case   26:*/		regs.LR = 0x821C26AC; return 0x821781C8;
		/* 821C26A8h case   26:*/		return 0x821C26AC;
		  /* 821C26ACh */ case   27:  		/* stw R3, <#[R31 + 48]> */
		/* 821C26ACh case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C26ACh case   27:*/		return 0x821C26B0;
		  /* 821C26B0h */ case   28:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C26B0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C26B0h case   28:*/		return 0x821C26B4;
		  /* 821C26B4h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821C26B4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C26B4h case   29:*/		return 0x821C26B8;
		  /* 821C26B8h */ case   30:  		/* mr R4, R29 */
		/* 821C26B8h case   30:*/		regs.R4 = regs.R29;
		/* 821C26B8h case   30:*/		return 0x821C26BC;
		  /* 821C26BCh */ case   31:  		/* bc 12, CR6_EQ, 20 */
		/* 821C26BCh case   31:*/		if ( regs.CR[6].eq ) { return 0x821C26D0;  }
		/* 821C26BCh case   31:*/		return 0x821C26C0;
		  /* 821C26C0h */ case   32:  		/* mr R3, R30 */
		/* 821C26C0h case   32:*/		regs.R3 = regs.R30;
		/* 821C26C0h case   32:*/		return 0x821C26C4;
		  /* 821C26C4h */ case   33:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C26C4h case   33:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C26C4h case   33:*/		return 0x821C26C8;
		  /* 821C26C8h */ case   34:  		/* bl -333272 */
		/* 821C26C8h case   34:*/		regs.LR = 0x821C26CC; return 0x821710F0;
		/* 821C26C8h case   34:*/		return 0x821C26CC;
		  /* 821C26CCh */ case   35:  		/* mr R4, R3 */
		/* 821C26CCh case   35:*/		regs.R4 = regs.R3;
		/* 821C26CCh case   35:*/		return 0x821C26D0;
	}
	return 0x821C26D0;
} // Block from 821C2640h-821C26D0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821C26D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C26D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C26D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C26D0);
		  /* 821C26D0h */ case    0:  		/* mr R3, R31 */
		/* 821C26D0h case    0:*/		regs.R3 = regs.R31;
		/* 821C26D0h case    0:*/		return 0x821C26D4;
		  /* 821C26D4h */ case    1:  		/* bl -304396 */
		/* 821C26D4h case    1:*/		regs.LR = 0x821C26D8; return 0x821781C8;
		/* 821C26D4h case    1:*/		return 0x821C26D8;
		  /* 821C26D8h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C26D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C26D8h case    2:*/		return 0x821C26DC;
		  /* 821C26DCh */ case    3:  		/* li R10, 1 */
		/* 821C26DCh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C26DCh case    3:*/		return 0x821C26E0;
		  /* 821C26E0h */ case    4:  		/* stw R3, <#[R31 + 52]> */
		/* 821C26E0h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C26E0h case    4:*/		return 0x821C26E4;
		  /* 821C26E4h */ case    5:  		/* mr R6, R28 */
		/* 821C26E4h case    5:*/		regs.R6 = regs.R28;
		/* 821C26E4h case    5:*/		return 0x821C26E8;
		  /* 821C26E8h */ case    6:  		/* rlwimi R11, R10, 14, 15, 17 */
		/* 821C26E8h case    6:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R10);
		/* 821C26E8h case    6:*/		return 0x821C26EC;
		  /* 821C26ECh */ case    7:  		/* mr R5, R27 */
		/* 821C26ECh case    7:*/		regs.R5 = regs.R27;
		/* 821C26ECh case    7:*/		return 0x821C26F0;
		  /* 821C26F0h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821C26F0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C26F0h case    8:*/		return 0x821C26F4;
		  /* 821C26F4h */ case    9:  		/* mr R4, R31 */
		/* 821C26F4h case    9:*/		regs.R4 = regs.R31;
		/* 821C26F4h case    9:*/		return 0x821C26F8;
		  /* 821C26F8h */ case   10:  		/* mr R3, R30 */
		/* 821C26F8h case   10:*/		regs.R3 = regs.R30;
		/* 821C26F8h case   10:*/		return 0x821C26FC;
		  /* 821C26FCh */ case   11:  		/* bl -350292 */
		/* 821C26FCh case   11:*/		regs.LR = 0x821C2700; return 0x8216CEA8;
		/* 821C26FCh case   11:*/		return 0x821C2700;
	}
	return 0x821C2700;
} // Block from 821C26D0h-821C2700h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C2700h
// Function '?MakeInstr_V_MUL@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2700);
		  /* 821C2700h */ case    0:  		/* mr R3, R31 */
		/* 821C2700h case    0:*/		regs.R3 = regs.R31;
		/* 821C2700h case    0:*/		return 0x821C2704;
		  /* 821C2704h */ case    1:  		/* addi R1, R1, 144 */
		/* 821C2704h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2704h case    1:*/		return 0x821C2708;
		  /* 821C2708h */ case    2:  		/* b -1250412 */
		/* 821C2708h case    2:*/		return 0x8209129C;
		/* 821C2708h case    2:*/		return 0x821C270C;
		  /* 821C270Ch */ case    3:  		/* nop */
		/* 821C270Ch case    3:*/		cpu::op::nop();
		/* 821C270Ch case    3:*/		return 0x821C2710;
	}
	return 0x821C2710;
} // Block from 821C2700h-821C2710h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C2710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2710);
		  /* 821C2710h */ case    0:  		/* mfspr R12, LR */
		/* 821C2710h case    0:*/		regs.R12 = regs.LR;
		/* 821C2710h case    0:*/		return 0x821C2714;
		  /* 821C2714h */ case    1:  		/* bl -1250504 */
		/* 821C2714h case    1:*/		regs.LR = 0x821C2718; return 0x8209124C;
		/* 821C2714h case    1:*/		return 0x821C2718;
		  /* 821C2718h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2718h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2718h case    2:*/		return 0x821C271C;
		  /* 821C271Ch */ case    3:  		/* mr R26, R4 */
		/* 821C271Ch case    3:*/		regs.R26 = regs.R4;
		/* 821C271Ch case    3:*/		return 0x821C2720;
		  /* 821C2720h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2720h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2720h case    4:*/		return 0x821C2724;
		  /* 821C2724h */ case    5:  		/* mr R27, R5 */
		/* 821C2724h case    5:*/		regs.R27 = regs.R5;
		/* 821C2724h case    5:*/		return 0x821C2728;
		  /* 821C2728h */ case    6:  		/* mr R29, R6 */
		/* 821C2728h case    6:*/		regs.R29 = regs.R6;
		/* 821C2728h case    6:*/		return 0x821C272C;
		  /* 821C272Ch */ case    7:  		/* mr R28, R7 */
		/* 821C272Ch case    7:*/		regs.R28 = regs.R7;
		/* 821C272Ch case    7:*/		return 0x821C2730;
		  /* 821C2730h */ case    8:  		/* mr R25, R8 */
		/* 821C2730h case    8:*/		regs.R25 = regs.R8;
		/* 821C2730h case    8:*/		return 0x821C2734;
		  /* 821C2734h */ case    9:  		/* li R8, 4 */
		/* 821C2734h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2734h case    9:*/		return 0x821C2738;
		  /* 821C2738h */ case   10:  		/* li R7, 3 */
		/* 821C2738h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2738h case   10:*/		return 0x821C273C;
		  /* 821C273Ch */ case   11:  		/* li R6, 13 */
		/* 821C273Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C273Ch case   11:*/		return 0x821C2740;
		  /* 821C2740h */ case   12:  		/* li R5, 0 */
		/* 821C2740h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2740h case   12:*/		return 0x821C2744;
		  /* 821C2744h */ case   13:  		/* mr R30, R3 */
		/* 821C2744h case   13:*/		regs.R30 = regs.R3;
		/* 821C2744h case   13:*/		return 0x821C2748;
		  /* 821C2748h */ case   14:  		/* bl 402000 */
		/* 821C2748h case   14:*/		regs.LR = 0x821C274C; return 0x82224998;
		/* 821C2748h case   14:*/		return 0x821C274C;
		  /* 821C274Ch */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C274Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C274Ch case   15:*/		return 0x821C2750;
		  /* 821C2750h */ case   16:  		/* mr R31, R3 */
		/* 821C2750h case   16:*/		regs.R31 = regs.R3;
		/* 821C2750h case   16:*/		return 0x821C2754;
		  /* 821C2754h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821C2754h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2754h case   17:*/		return 0x821C2758;
		  /* 821C2758h */ case   18:  		/* mr R4, R29 */
		/* 821C2758h case   18:*/		regs.R4 = regs.R29;
		/* 821C2758h case   18:*/		return 0x821C275C;
		  /* 821C275Ch */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821C275Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821C2770;  }
		/* 821C275Ch case   19:*/		return 0x821C2760;
		  /* 821C2760h */ case   20:  		/* mr R3, R30 */
		/* 821C2760h case   20:*/		regs.R3 = regs.R30;
		/* 821C2760h case   20:*/		return 0x821C2764;
		  /* 821C2764h */ case   21:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2764h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2764h case   21:*/		return 0x821C2768;
		  /* 821C2768h */ case   22:  		/* bl -333432 */
		/* 821C2768h case   22:*/		regs.LR = 0x821C276C; return 0x821710F0;
		/* 821C2768h case   22:*/		return 0x821C276C;
		  /* 821C276Ch */ case   23:  		/* mr R4, R3 */
		/* 821C276Ch case   23:*/		regs.R4 = regs.R3;
		/* 821C276Ch case   23:*/		return 0x821C2770;
	}
	return 0x821C2770;
} // Block from 821C2710h-821C2770h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2770);
		  /* 821C2770h */ case    0:  		/* mr R3, R31 */
		/* 821C2770h case    0:*/		regs.R3 = regs.R31;
		/* 821C2770h case    0:*/		return 0x821C2774;
		  /* 821C2774h */ case    1:  		/* bl -304556 */
		/* 821C2774h case    1:*/		regs.LR = 0x821C2778; return 0x821781C8;
		/* 821C2774h case    1:*/		return 0x821C2778;
		  /* 821C2778h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2778h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2778h case    2:*/		return 0x821C277C;
		  /* 821C277Ch */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C277Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C277Ch case    3:*/		return 0x821C2780;
		  /* 821C2780h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C2780h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2780h case    4:*/		return 0x821C2784;
		  /* 821C2784h */ case    5:  		/* mr R4, R28 */
		/* 821C2784h case    5:*/		regs.R4 = regs.R28;
		/* 821C2784h case    5:*/		return 0x821C2788;
		  /* 821C2788h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2788h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C279C;  }
		/* 821C2788h case    6:*/		return 0x821C278C;
		  /* 821C278Ch */ case    7:  		/* mr R3, R30 */
		/* 821C278Ch case    7:*/		regs.R3 = regs.R30;
		/* 821C278Ch case    7:*/		return 0x821C2790;
		  /* 821C2790h */ case    8:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C2790h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C2790h case    8:*/		return 0x821C2794;
		  /* 821C2794h */ case    9:  		/* bl -333476 */
		/* 821C2794h case    9:*/		regs.LR = 0x821C2798; return 0x821710F0;
		/* 821C2794h case    9:*/		return 0x821C2798;
		  /* 821C2798h */ case   10:  		/* mr R4, R3 */
		/* 821C2798h case   10:*/		regs.R4 = regs.R3;
		/* 821C2798h case   10:*/		return 0x821C279C;
	}
	return 0x821C279C;
} // Block from 821C2770h-821C279Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C279Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C279C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C279C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C279C);
		  /* 821C279Ch */ case    0:  		/* mr R3, R31 */
		/* 821C279Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C279Ch case    0:*/		return 0x821C27A0;
		  /* 821C27A0h */ case    1:  		/* bl -304600 */
		/* 821C27A0h case    1:*/		regs.LR = 0x821C27A4; return 0x821781C8;
		/* 821C27A0h case    1:*/		return 0x821C27A4;
		  /* 821C27A4h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C27A4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C27A4h case    2:*/		return 0x821C27A8;
		  /* 821C27A8h */ case    3:  		/* mr R4, R25 */
		/* 821C27A8h case    3:*/		regs.R4 = regs.R25;
		/* 821C27A8h case    3:*/		return 0x821C27AC;
		  /* 821C27ACh */ case    4:  		/* mr R3, R30 */
		/* 821C27ACh case    4:*/		regs.R3 = regs.R30;
		/* 821C27ACh case    4:*/		return 0x821C27B0;
		  /* 821C27B0h */ case    5:  		/* bl -305072 */
		/* 821C27B0h case    5:*/		regs.LR = 0x821C27B4; return 0x82178000;
		/* 821C27B0h case    5:*/		return 0x821C27B4;
		  /* 821C27B4h */ case    6:  		/* mr R4, R3 */
		/* 821C27B4h case    6:*/		regs.R4 = regs.R3;
		/* 821C27B4h case    6:*/		return 0x821C27B8;
		  /* 821C27B8h */ case    7:  		/* mr R3, R31 */
		/* 821C27B8h case    7:*/		regs.R3 = regs.R31;
		/* 821C27B8h case    7:*/		return 0x821C27BC;
		  /* 821C27BCh */ case    8:  		/* bl -304628 */
		/* 821C27BCh case    8:*/		regs.LR = 0x821C27C0; return 0x821781C8;
		/* 821C27BCh case    8:*/		return 0x821C27C0;
	}
	return 0x821C27C0;
} // Block from 821C279Ch-821C27C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C27C0h
// Function '?MakeInstr_V_MAX@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C27C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C27C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C27C0);
		  /* 821C27C0h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C27C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C27C0h case    0:*/		return 0x821C27C4;
		  /* 821C27C4h */ case    1:  		/* stw R3, <#[R31 + 52]> */
		/* 821C27C4h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C27C4h case    1:*/		return 0x821C27C8;
		  /* 821C27C8h */ case    2:  		/* mr R6, R27 */
		/* 821C27C8h case    2:*/		regs.R6 = regs.R27;
		/* 821C27C8h case    2:*/		return 0x821C27CC;
		  /* 821C27CCh */ case    3:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C27CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C27CCh case    3:*/		return 0x821C27D0;
		  /* 821C27D0h */ case    4:  		/* mr R5, R26 */
		/* 821C27D0h case    4:*/		regs.R5 = regs.R26;
		/* 821C27D0h case    4:*/		return 0x821C27D4;
		  /* 821C27D4h */ case    5:  		/* mr R4, R31 */
		/* 821C27D4h case    5:*/		regs.R4 = regs.R31;
		/* 821C27D4h case    5:*/		return 0x821C27D8;
		  /* 821C27D8h */ case    6:  		/* mr R3, R30 */
		/* 821C27D8h case    6:*/		regs.R3 = regs.R30;
		/* 821C27D8h case    6:*/		return 0x821C27DC;
		  /* 821C27DCh */ case    7:  		/* lwz R11, <#[R11]> */
		/* 821C27DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C27DCh case    7:*/		return 0x821C27E0;
		  /* 821C27E0h */ case    8:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C27E0h case    8:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C27E0h case    8:*/		return 0x821C27E4;
		  /* 821C27E4h */ case    9:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C27E4h case    9:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C27E4h case    9:*/		return 0x821C27E8;
		  /* 821C27E8h */ case   10:  		/* stw R10, <#[R31 + 8]> */
		/* 821C27E8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C27E8h case   10:*/		return 0x821C27EC;
		  /* 821C27ECh */ case   11:  		/* bl -350532 */
		/* 821C27ECh case   11:*/		regs.LR = 0x821C27F0; return 0x8216CEA8;
		/* 821C27ECh case   11:*/		return 0x821C27F0;
		  /* 821C27F0h */ case   12:  		/* mr R3, R31 */
		/* 821C27F0h case   12:*/		regs.R3 = regs.R31;
		/* 821C27F0h case   12:*/		return 0x821C27F4;
		  /* 821C27F4h */ case   13:  		/* addi R1, R1, 144 */
		/* 821C27F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C27F4h case   13:*/		return 0x821C27F8;
		  /* 821C27F8h */ case   14:  		/* b -1250652 */
		/* 821C27F8h case   14:*/		return 0x8209129C;
		/* 821C27F8h case   14:*/		return 0x821C27FC;
		  /* 821C27FCh */ case   15:  		/* nop */
		/* 821C27FCh case   15:*/		cpu::op::nop();
		/* 821C27FCh case   15:*/		return 0x821C2800;
	}
	return 0x821C2800;
} // Block from 821C27C0h-821C2800h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C2800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2800);
		  /* 821C2800h */ case    0:  		/* mfspr R12, LR */
		/* 821C2800h case    0:*/		regs.R12 = regs.LR;
		/* 821C2800h case    0:*/		return 0x821C2804;
		  /* 821C2804h */ case    1:  		/* bl -1250744 */
		/* 821C2804h case    1:*/		regs.LR = 0x821C2808; return 0x8209124C;
		/* 821C2804h case    1:*/		return 0x821C2808;
		  /* 821C2808h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2808h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2808h case    2:*/		return 0x821C280C;
		  /* 821C280Ch */ case    3:  		/* mr R26, R4 */
		/* 821C280Ch case    3:*/		regs.R26 = regs.R4;
		/* 821C280Ch case    3:*/		return 0x821C2810;
		  /* 821C2810h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2810h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2810h case    4:*/		return 0x821C2814;
		  /* 821C2814h */ case    5:  		/* mr R27, R5 */
		/* 821C2814h case    5:*/		regs.R27 = regs.R5;
		/* 821C2814h case    5:*/		return 0x821C2818;
		  /* 821C2818h */ case    6:  		/* mr R29, R6 */
		/* 821C2818h case    6:*/		regs.R29 = regs.R6;
		/* 821C2818h case    6:*/		return 0x821C281C;
		  /* 821C281Ch */ case    7:  		/* mr R28, R7 */
		/* 821C281Ch case    7:*/		regs.R28 = regs.R7;
		/* 821C281Ch case    7:*/		return 0x821C2820;
		  /* 821C2820h */ case    8:  		/* mr R25, R8 */
		/* 821C2820h case    8:*/		regs.R25 = regs.R8;
		/* 821C2820h case    8:*/		return 0x821C2824;
		  /* 821C2824h */ case    9:  		/* li R8, 4 */
		/* 821C2824h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2824h case    9:*/		return 0x821C2828;
		  /* 821C2828h */ case   10:  		/* li R7, 3 */
		/* 821C2828h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2828h case   10:*/		return 0x821C282C;
		  /* 821C282Ch */ case   11:  		/* li R6, 14 */
		/* 821C282Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 821C282Ch case   11:*/		return 0x821C2830;
		  /* 821C2830h */ case   12:  		/* li R5, 0 */
		/* 821C2830h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2830h case   12:*/		return 0x821C2834;
		  /* 821C2834h */ case   13:  		/* mr R30, R3 */
		/* 821C2834h case   13:*/		regs.R30 = regs.R3;
		/* 821C2834h case   13:*/		return 0x821C2838;
		  /* 821C2838h */ case   14:  		/* bl 401760 */
		/* 821C2838h case   14:*/		regs.LR = 0x821C283C; return 0x82224998;
		/* 821C2838h case   14:*/		return 0x821C283C;
		  /* 821C283Ch */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C283Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C283Ch case   15:*/		return 0x821C2840;
		  /* 821C2840h */ case   16:  		/* mr R31, R3 */
		/* 821C2840h case   16:*/		regs.R31 = regs.R3;
		/* 821C2840h case   16:*/		return 0x821C2844;
		  /* 821C2844h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821C2844h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2844h case   17:*/		return 0x821C2848;
		  /* 821C2848h */ case   18:  		/* mr R4, R29 */
		/* 821C2848h case   18:*/		regs.R4 = regs.R29;
		/* 821C2848h case   18:*/		return 0x821C284C;
		  /* 821C284Ch */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821C284Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821C2860;  }
		/* 821C284Ch case   19:*/		return 0x821C2850;
		  /* 821C2850h */ case   20:  		/* mr R3, R30 */
		/* 821C2850h case   20:*/		regs.R3 = regs.R30;
		/* 821C2850h case   20:*/		return 0x821C2854;
		  /* 821C2854h */ case   21:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2854h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2854h case   21:*/		return 0x821C2858;
		  /* 821C2858h */ case   22:  		/* bl -333672 */
		/* 821C2858h case   22:*/		regs.LR = 0x821C285C; return 0x821710F0;
		/* 821C2858h case   22:*/		return 0x821C285C;
		  /* 821C285Ch */ case   23:  		/* mr R4, R3 */
		/* 821C285Ch case   23:*/		regs.R4 = regs.R3;
		/* 821C285Ch case   23:*/		return 0x821C2860;
	}
	return 0x821C2860;
} // Block from 821C2800h-821C2860h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2860);
		  /* 821C2860h */ case    0:  		/* mr R3, R31 */
		/* 821C2860h case    0:*/		regs.R3 = regs.R31;
		/* 821C2860h case    0:*/		return 0x821C2864;
		  /* 821C2864h */ case    1:  		/* bl -304796 */
		/* 821C2864h case    1:*/		regs.LR = 0x821C2868; return 0x821781C8;
		/* 821C2864h case    1:*/		return 0x821C2868;
		  /* 821C2868h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2868h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2868h case    2:*/		return 0x821C286C;
		  /* 821C286Ch */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C286Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C286Ch case    3:*/		return 0x821C2870;
		  /* 821C2870h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C2870h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2870h case    4:*/		return 0x821C2874;
		  /* 821C2874h */ case    5:  		/* mr R4, R28 */
		/* 821C2874h case    5:*/		regs.R4 = regs.R28;
		/* 821C2874h case    5:*/		return 0x821C2878;
		  /* 821C2878h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2878h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C288C;  }
		/* 821C2878h case    6:*/		return 0x821C287C;
		  /* 821C287Ch */ case    7:  		/* mr R3, R30 */
		/* 821C287Ch case    7:*/		regs.R3 = regs.R30;
		/* 821C287Ch case    7:*/		return 0x821C2880;
	}
	return 0x821C2880;
} // Block from 821C2860h-821C2880h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C2880h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2880);
		  /* 821C2880h */ case    0:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C2880h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C2880h case    0:*/		return 0x821C2884;
		  /* 821C2884h */ case    1:  		/* bl -333716 */
		/* 821C2884h case    1:*/		regs.LR = 0x821C2888; return 0x821710F0;
		/* 821C2884h case    1:*/		return 0x821C2888;
		  /* 821C2888h */ case    2:  		/* mr R4, R3 */
		/* 821C2888h case    2:*/		regs.R4 = regs.R3;
		/* 821C2888h case    2:*/		return 0x821C288C;
	}
	return 0x821C288C;
} // Block from 821C2880h-821C288Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C288Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C288C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C288C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C288C);
		  /* 821C288Ch */ case    0:  		/* mr R3, R31 */
		/* 821C288Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C288Ch case    0:*/		return 0x821C2890;
		  /* 821C2890h */ case    1:  		/* bl -304840 */
		/* 821C2890h case    1:*/		regs.LR = 0x821C2894; return 0x821781C8;
		/* 821C2890h case    1:*/		return 0x821C2894;
		  /* 821C2894h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C2894h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2894h case    2:*/		return 0x821C2898;
		  /* 821C2898h */ case    3:  		/* mr R4, R25 */
		/* 821C2898h case    3:*/		regs.R4 = regs.R25;
		/* 821C2898h case    3:*/		return 0x821C289C;
		  /* 821C289Ch */ case    4:  		/* mr R3, R30 */
		/* 821C289Ch case    4:*/		regs.R3 = regs.R30;
		/* 821C289Ch case    4:*/		return 0x821C28A0;
		  /* 821C28A0h */ case    5:  		/* bl -305312 */
		/* 821C28A0h case    5:*/		regs.LR = 0x821C28A4; return 0x82178000;
		/* 821C28A0h case    5:*/		return 0x821C28A4;
		  /* 821C28A4h */ case    6:  		/* mr R4, R3 */
		/* 821C28A4h case    6:*/		regs.R4 = regs.R3;
		/* 821C28A4h case    6:*/		return 0x821C28A8;
		  /* 821C28A8h */ case    7:  		/* mr R3, R31 */
		/* 821C28A8h case    7:*/		regs.R3 = regs.R31;
		/* 821C28A8h case    7:*/		return 0x821C28AC;
		  /* 821C28ACh */ case    8:  		/* bl -304868 */
		/* 821C28ACh case    8:*/		regs.LR = 0x821C28B0; return 0x821781C8;
		/* 821C28ACh case    8:*/		return 0x821C28B0;
		  /* 821C28B0h */ case    9:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C28B0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C28B0h case    9:*/		return 0x821C28B4;
		  /* 821C28B4h */ case   10:  		/* stw R3, <#[R31 + 52]> */
		/* 821C28B4h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C28B4h case   10:*/		return 0x821C28B8;
		  /* 821C28B8h */ case   11:  		/* mr R6, R27 */
		/* 821C28B8h case   11:*/		regs.R6 = regs.R27;
		/* 821C28B8h case   11:*/		return 0x821C28BC;
		  /* 821C28BCh */ case   12:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C28BCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C28BCh case   12:*/		return 0x821C28C0;
		  /* 821C28C0h */ case   13:  		/* mr R5, R26 */
		/* 821C28C0h case   13:*/		regs.R5 = regs.R26;
		/* 821C28C0h case   13:*/		return 0x821C28C4;
		  /* 821C28C4h */ case   14:  		/* mr R4, R31 */
		/* 821C28C4h case   14:*/		regs.R4 = regs.R31;
		/* 821C28C4h case   14:*/		return 0x821C28C8;
		  /* 821C28C8h */ case   15:  		/* mr R3, R30 */
		/* 821C28C8h case   15:*/		regs.R3 = regs.R30;
		/* 821C28C8h case   15:*/		return 0x821C28CC;
		  /* 821C28CCh */ case   16:  		/* lwz R11, <#[R11]> */
		/* 821C28CCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C28CCh case   16:*/		return 0x821C28D0;
		  /* 821C28D0h */ case   17:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C28D0h case   17:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C28D0h case   17:*/		return 0x821C28D4;
		  /* 821C28D4h */ case   18:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C28D4h case   18:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C28D4h case   18:*/		return 0x821C28D8;
		  /* 821C28D8h */ case   19:  		/* stw R10, <#[R31 + 8]> */
		/* 821C28D8h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C28D8h case   19:*/		return 0x821C28DC;
		  /* 821C28DCh */ case   20:  		/* bl -350772 */
		/* 821C28DCh case   20:*/		regs.LR = 0x821C28E0; return 0x8216CEA8;
		/* 821C28DCh case   20:*/		return 0x821C28E0;
		  /* 821C28E0h */ case   21:  		/* mr R3, R31 */
		/* 821C28E0h case   21:*/		regs.R3 = regs.R31;
		/* 821C28E0h case   21:*/		return 0x821C28E4;
		  /* 821C28E4h */ case   22:  		/* addi R1, R1, 144 */
		/* 821C28E4h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C28E4h case   22:*/		return 0x821C28E8;
		  /* 821C28E8h */ case   23:  		/* b -1250892 */
		/* 821C28E8h case   23:*/		return 0x8209129C;
		/* 821C28E8h case   23:*/		return 0x821C28EC;
		  /* 821C28ECh */ case   24:  		/* nop */
		/* 821C28ECh case   24:*/		cpu::op::nop();
		/* 821C28ECh case   24:*/		return 0x821C28F0;
	}
	return 0x821C28F0;
} // Block from 821C288Ch-821C28F0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C28F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C28F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C28F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C28F0);
		  /* 821C28F0h */ case    0:  		/* mfspr R12, LR */
		/* 821C28F0h case    0:*/		regs.R12 = regs.LR;
		/* 821C28F0h case    0:*/		return 0x821C28F4;
		  /* 821C28F4h */ case    1:  		/* bl -1250984 */
		/* 821C28F4h case    1:*/		regs.LR = 0x821C28F8; return 0x8209124C;
		/* 821C28F4h case    1:*/		return 0x821C28F8;
		  /* 821C28F8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C28F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C28F8h case    2:*/		return 0x821C28FC;
		  /* 821C28FCh */ case    3:  		/* mr R26, R4 */
		/* 821C28FCh case    3:*/		regs.R26 = regs.R4;
		/* 821C28FCh case    3:*/		return 0x821C2900;
		  /* 821C2900h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2900h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2900h case    4:*/		return 0x821C2904;
		  /* 821C2904h */ case    5:  		/* mr R27, R5 */
		/* 821C2904h case    5:*/		regs.R27 = regs.R5;
		/* 821C2904h case    5:*/		return 0x821C2908;
		  /* 821C2908h */ case    6:  		/* mr R29, R6 */
		/* 821C2908h case    6:*/		regs.R29 = regs.R6;
		/* 821C2908h case    6:*/		return 0x821C290C;
		  /* 821C290Ch */ case    7:  		/* mr R28, R7 */
		/* 821C290Ch case    7:*/		regs.R28 = regs.R7;
		/* 821C290Ch case    7:*/		return 0x821C2910;
		  /* 821C2910h */ case    8:  		/* mr R25, R8 */
		/* 821C2910h case    8:*/		regs.R25 = regs.R8;
		/* 821C2910h case    8:*/		return 0x821C2914;
		  /* 821C2914h */ case    9:  		/* li R8, 4 */
		/* 821C2914h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2914h case    9:*/		return 0x821C2918;
		  /* 821C2918h */ case   10:  		/* li R7, 3 */
		/* 821C2918h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2918h case   10:*/		return 0x821C291C;
		  /* 821C291Ch */ case   11:  		/* li R6, 15 */
		/* 821C291Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 821C291Ch case   11:*/		return 0x821C2920;
		  /* 821C2920h */ case   12:  		/* li R5, 0 */
		/* 821C2920h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2920h case   12:*/		return 0x821C2924;
		  /* 821C2924h */ case   13:  		/* mr R30, R3 */
		/* 821C2924h case   13:*/		regs.R30 = regs.R3;
		/* 821C2924h case   13:*/		return 0x821C2928;
		  /* 821C2928h */ case   14:  		/* bl 401520 */
		/* 821C2928h case   14:*/		regs.LR = 0x821C292C; return 0x82224998;
		/* 821C2928h case   14:*/		return 0x821C292C;
		  /* 821C292Ch */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C292Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C292Ch case   15:*/		return 0x821C2930;
		  /* 821C2930h */ case   16:  		/* mr R31, R3 */
		/* 821C2930h case   16:*/		regs.R31 = regs.R3;
		/* 821C2930h case   16:*/		return 0x821C2934;
		  /* 821C2934h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821C2934h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2934h case   17:*/		return 0x821C2938;
		  /* 821C2938h */ case   18:  		/* mr R4, R29 */
		/* 821C2938h case   18:*/		regs.R4 = regs.R29;
		/* 821C2938h case   18:*/		return 0x821C293C;
		  /* 821C293Ch */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 821C293Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821C2950;  }
		/* 821C293Ch case   19:*/		return 0x821C2940;
		  /* 821C2940h */ case   20:  		/* mr R3, R30 */
		/* 821C2940h case   20:*/		regs.R3 = regs.R30;
		/* 821C2940h case   20:*/		return 0x821C2944;
		  /* 821C2944h */ case   21:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2944h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2944h case   21:*/		return 0x821C2948;
		  /* 821C2948h */ case   22:  		/* bl -333912 */
		/* 821C2948h case   22:*/		regs.LR = 0x821C294C; return 0x821710F0;
		/* 821C2948h case   22:*/		return 0x821C294C;
		  /* 821C294Ch */ case   23:  		/* mr R4, R3 */
		/* 821C294Ch case   23:*/		regs.R4 = regs.R3;
		/* 821C294Ch case   23:*/		return 0x821C2950;
	}
	return 0x821C2950;
} // Block from 821C28F0h-821C2950h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2950);
		  /* 821C2950h */ case    0:  		/* mr R3, R31 */
		/* 821C2950h case    0:*/		regs.R3 = regs.R31;
		/* 821C2950h case    0:*/		return 0x821C2954;
		  /* 821C2954h */ case    1:  		/* bl -305036 */
		/* 821C2954h case    1:*/		regs.LR = 0x821C2958; return 0x821781C8;
		/* 821C2954h case    1:*/		return 0x821C2958;
		  /* 821C2958h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2958h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2958h case    2:*/		return 0x821C295C;
		  /* 821C295Ch */ case    3:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C295Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C295Ch case    3:*/		return 0x821C2960;
		  /* 821C2960h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C2960h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2960h case    4:*/		return 0x821C2964;
		  /* 821C2964h */ case    5:  		/* mr R4, R28 */
		/* 821C2964h case    5:*/		regs.R4 = regs.R28;
		/* 821C2964h case    5:*/		return 0x821C2968;
		  /* 821C2968h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2968h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C297C;  }
		/* 821C2968h case    6:*/		return 0x821C296C;
		  /* 821C296Ch */ case    7:  		/* mr R3, R30 */
		/* 821C296Ch case    7:*/		regs.R3 = regs.R30;
		/* 821C296Ch case    7:*/		return 0x821C2970;
	}
	return 0x821C2970;
} // Block from 821C2950h-821C2970h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C2970h
// Function '?MakeInstr_S_EXP_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2970);
		  /* 821C2970h */ case    0:  		/* lwz R5, <#[R28 + 12]> */
		/* 821C2970h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C2970h case    0:*/		return 0x821C2974;
		  /* 821C2974h */ case    1:  		/* bl -333956 */
		/* 821C2974h case    1:*/		regs.LR = 0x821C2978; return 0x821710F0;
		/* 821C2974h case    1:*/		return 0x821C2978;
		  /* 821C2978h */ case    2:  		/* mr R4, R3 */
		/* 821C2978h case    2:*/		regs.R4 = regs.R3;
		/* 821C2978h case    2:*/		return 0x821C297C;
	}
	return 0x821C297C;
} // Block from 821C2970h-821C297Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C297Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C297C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C297C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C297C);
		  /* 821C297Ch */ case    0:  		/* mr R3, R31 */
		/* 821C297Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C297Ch case    0:*/		return 0x821C2980;
		  /* 821C2980h */ case    1:  		/* bl -305080 */
		/* 821C2980h case    1:*/		regs.LR = 0x821C2984; return 0x821781C8;
		/* 821C2980h case    1:*/		return 0x821C2984;
		  /* 821C2984h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 821C2984h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2984h case    2:*/		return 0x821C2988;
		  /* 821C2988h */ case    3:  		/* mr R4, R25 */
		/* 821C2988h case    3:*/		regs.R4 = regs.R25;
		/* 821C2988h case    3:*/		return 0x821C298C;
		  /* 821C298Ch */ case    4:  		/* mr R3, R30 */
		/* 821C298Ch case    4:*/		regs.R3 = regs.R30;
		/* 821C298Ch case    4:*/		return 0x821C2990;
		  /* 821C2990h */ case    5:  		/* bl -305552 */
		/* 821C2990h case    5:*/		regs.LR = 0x821C2994; return 0x82178000;
		/* 821C2990h case    5:*/		return 0x821C2994;
		  /* 821C2994h */ case    6:  		/* mr R4, R3 */
		/* 821C2994h case    6:*/		regs.R4 = regs.R3;
		/* 821C2994h case    6:*/		return 0x821C2998;
		  /* 821C2998h */ case    7:  		/* mr R3, R31 */
		/* 821C2998h case    7:*/		regs.R3 = regs.R31;
		/* 821C2998h case    7:*/		return 0x821C299C;
		  /* 821C299Ch */ case    8:  		/* bl -305108 */
		/* 821C299Ch case    8:*/		regs.LR = 0x821C29A0; return 0x821781C8;
		/* 821C299Ch case    8:*/		return 0x821C29A0;
		  /* 821C29A0h */ case    9:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C29A0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C29A0h case    9:*/		return 0x821C29A4;
		  /* 821C29A4h */ case   10:  		/* stw R3, <#[R31 + 52]> */
		/* 821C29A4h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C29A4h case   10:*/		return 0x821C29A8;
		  /* 821C29A8h */ case   11:  		/* mr R6, R27 */
		/* 821C29A8h case   11:*/		regs.R6 = regs.R27;
		/* 821C29A8h case   11:*/		return 0x821C29AC;
		  /* 821C29ACh */ case   12:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C29ACh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C29ACh case   12:*/		return 0x821C29B0;
		  /* 821C29B0h */ case   13:  		/* mr R5, R26 */
		/* 821C29B0h case   13:*/		regs.R5 = regs.R26;
		/* 821C29B0h case   13:*/		return 0x821C29B4;
		  /* 821C29B4h */ case   14:  		/* mr R4, R31 */
		/* 821C29B4h case   14:*/		regs.R4 = regs.R31;
		/* 821C29B4h case   14:*/		return 0x821C29B8;
		  /* 821C29B8h */ case   15:  		/* mr R3, R30 */
		/* 821C29B8h case   15:*/		regs.R3 = regs.R30;
		/* 821C29B8h case   15:*/		return 0x821C29BC;
		  /* 821C29BCh */ case   16:  		/* lwz R11, <#[R11]> */
		/* 821C29BCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C29BCh case   16:*/		return 0x821C29C0;
		  /* 821C29C0h */ case   17:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C29C0h case   17:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C29C0h case   17:*/		return 0x821C29C4;
		  /* 821C29C4h */ case   18:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C29C4h case   18:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C29C4h case   18:*/		return 0x821C29C8;
		  /* 821C29C8h */ case   19:  		/* stw R10, <#[R31 + 8]> */
		/* 821C29C8h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C29C8h case   19:*/		return 0x821C29CC;
		  /* 821C29CCh */ case   20:  		/* bl -351012 */
		/* 821C29CCh case   20:*/		regs.LR = 0x821C29D0; return 0x8216CEA8;
		/* 821C29CCh case   20:*/		return 0x821C29D0;
		  /* 821C29D0h */ case   21:  		/* mr R3, R31 */
		/* 821C29D0h case   21:*/		regs.R3 = regs.R31;
		/* 821C29D0h case   21:*/		return 0x821C29D4;
		  /* 821C29D4h */ case   22:  		/* addi R1, R1, 144 */
		/* 821C29D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C29D4h case   22:*/		return 0x821C29D8;
		  /* 821C29D8h */ case   23:  		/* b -1251132 */
		/* 821C29D8h case   23:*/		return 0x8209129C;
		/* 821C29D8h case   23:*/		return 0x821C29DC;
		  /* 821C29DCh */ case   24:  		/* nop */
		/* 821C29DCh case   24:*/		cpu::op::nop();
		/* 821C29DCh case   24:*/		return 0x821C29E0;
	}
	return 0x821C29E0;
} // Block from 821C297Ch-821C29E0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C29E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C29E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C29E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C29E0);
		  /* 821C29E0h */ case    0:  		/* mfspr R12, LR */
		/* 821C29E0h case    0:*/		regs.R12 = regs.LR;
		/* 821C29E0h case    0:*/		return 0x821C29E4;
		  /* 821C29E4h */ case    1:  		/* bl -1251224 */
		/* 821C29E4h case    1:*/		regs.LR = 0x821C29E8; return 0x8209124C;
		/* 821C29E4h case    1:*/		return 0x821C29E8;
	}
	return 0x821C29E8;
} // Block from 821C29E0h-821C29E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C29E8h
// Function '?MakeInstr_S_RECIP_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C29E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C29E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C29E8);
		  /* 821C29E8h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C29E8h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C29E8h case    0:*/		return 0x821C29EC;
		  /* 821C29ECh */ case    1:  		/* mr R27, R4 */
		/* 821C29ECh case    1:*/		regs.R27 = regs.R4;
		/* 821C29ECh case    1:*/		return 0x821C29F0;
		  /* 821C29F0h */ case    2:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C29F0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C29F0h case    2:*/		return 0x821C29F4;
		  /* 821C29F4h */ case    3:  		/* mr R28, R5 */
		/* 821C29F4h case    3:*/		regs.R28 = regs.R5;
		/* 821C29F4h case    3:*/		return 0x821C29F8;
		  /* 821C29F8h */ case    4:  		/* mr R25, R6 */
		/* 821C29F8h case    4:*/		regs.R25 = regs.R6;
		/* 821C29F8h case    4:*/		return 0x821C29FC;
		  /* 821C29FCh */ case    5:  		/* mr R29, R7 */
		/* 821C29FCh case    5:*/		regs.R29 = regs.R7;
		/* 821C29FCh case    5:*/		return 0x821C2A00;
		  /* 821C2A00h */ case    6:  		/* mr R26, R8 */
		/* 821C2A00h case    6:*/		regs.R26 = regs.R8;
		/* 821C2A00h case    6:*/		return 0x821C2A04;
		  /* 821C2A04h */ case    7:  		/* li R8, 4 */
		/* 821C2A04h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2A04h case    7:*/		return 0x821C2A08;
		  /* 821C2A08h */ case    8:  		/* li R7, 3 */
		/* 821C2A08h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2A08h case    8:*/		return 0x821C2A0C;
		  /* 821C2A0Ch */ case    9:  		/* li R6, 13 */
		/* 821C2A0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C2A0Ch case    9:*/		return 0x821C2A10;
		  /* 821C2A10h */ case   10:  		/* li R5, 0 */
		/* 821C2A10h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2A10h case   10:*/		return 0x821C2A14;
		  /* 821C2A14h */ case   11:  		/* mr R30, R3 */
		/* 821C2A14h case   11:*/		regs.R30 = regs.R3;
		/* 821C2A14h case   11:*/		return 0x821C2A18;
		  /* 821C2A18h */ case   12:  		/* bl 401280 */
		/* 821C2A18h case   12:*/		regs.LR = 0x821C2A1C; return 0x82224998;
		/* 821C2A18h case   12:*/		return 0x821C2A1C;
		  /* 821C2A1Ch */ case   13:  		/* mr R31, R3 */
		/* 821C2A1Ch case   13:*/		regs.R31 = regs.R3;
		/* 821C2A1Ch case   13:*/		return 0x821C2A20;
		  /* 821C2A20h */ case   14:  		/* mr R4, R25 */
		/* 821C2A20h case   14:*/		regs.R4 = regs.R25;
		/* 821C2A20h case   14:*/		return 0x821C2A24;
		  /* 821C2A24h */ case   15:  		/* mr R3, R30 */
		/* 821C2A24h case   15:*/		regs.R3 = regs.R30;
		/* 821C2A24h case   15:*/		return 0x821C2A28;
		  /* 821C2A28h */ case   16:  		/* bl -305704 */
		/* 821C2A28h case   16:*/		regs.LR = 0x821C2A2C; return 0x82178000;
		/* 821C2A28h case   16:*/		return 0x821C2A2C;
		  /* 821C2A2Ch */ case   17:  		/* mr R4, R3 */
		/* 821C2A2Ch case   17:*/		regs.R4 = regs.R3;
		/* 821C2A2Ch case   17:*/		return 0x821C2A30;
		  /* 821C2A30h */ case   18:  		/* mr R3, R31 */
		/* 821C2A30h case   18:*/		regs.R3 = regs.R31;
		/* 821C2A30h case   18:*/		return 0x821C2A34;
		  /* 821C2A34h */ case   19:  		/* bl -305260 */
		/* 821C2A34h case   19:*/		regs.LR = 0x821C2A38; return 0x821781C8;
		/* 821C2A34h case   19:*/		return 0x821C2A38;
		  /* 821C2A38h */ case   20:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2A38h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2A38h case   20:*/		return 0x821C2A3C;
		  /* 821C2A3Ch */ case   21:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C2A3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C2A3Ch case   21:*/		return 0x821C2A40;
		  /* 821C2A40h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821C2A40h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2A40h case   22:*/		return 0x821C2A44;
		  /* 821C2A44h */ case   23:  		/* mr R4, R29 */
		/* 821C2A44h case   23:*/		regs.R4 = regs.R29;
		/* 821C2A44h case   23:*/		return 0x821C2A48;
		  /* 821C2A48h */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2A48h case   24:*/		if ( regs.CR[6].eq ) { return 0x821C2A5C;  }
		/* 821C2A48h case   24:*/		return 0x821C2A4C;
		  /* 821C2A4Ch */ case   25:  		/* mr R3, R30 */
		/* 821C2A4Ch case   25:*/		regs.R3 = regs.R30;
		/* 821C2A4Ch case   25:*/		return 0x821C2A50;
		  /* 821C2A50h */ case   26:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2A50h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2A50h case   26:*/		return 0x821C2A54;
		  /* 821C2A54h */ case   27:  		/* bl -334180 */
		/* 821C2A54h case   27:*/		regs.LR = 0x821C2A58; return 0x821710F0;
		/* 821C2A54h case   27:*/		return 0x821C2A58;
		  /* 821C2A58h */ case   28:  		/* mr R4, R3 */
		/* 821C2A58h case   28:*/		regs.R4 = regs.R3;
		/* 821C2A58h case   28:*/		return 0x821C2A5C;
	}
	return 0x821C2A5C;
} // Block from 821C29E8h-821C2A5Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821C2A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2A5C);
		  /* 821C2A5Ch */ case    0:  		/* mr R3, R31 */
		/* 821C2A5Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C2A5Ch case    0:*/		return 0x821C2A60;
	}
	return 0x821C2A60;
} // Block from 821C2A5Ch-821C2A60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C2A60h
// Function '?MakeInstr_S_SQRT_IEEE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2A60);
		  /* 821C2A60h */ case    0:  		/* bl -305304 */
		/* 821C2A60h case    0:*/		regs.LR = 0x821C2A64; return 0x821781C8;
		/* 821C2A60h case    0:*/		return 0x821C2A64;
		  /* 821C2A64h */ case    1:  		/* stw R3, <#[R31 + 48]> */
		/* 821C2A64h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2A64h case    1:*/		return 0x821C2A68;
		  /* 821C2A68h */ case    2:  		/* mr R4, R26 */
		/* 821C2A68h case    2:*/		regs.R4 = regs.R26;
		/* 821C2A68h case    2:*/		return 0x821C2A6C;
		  /* 821C2A6Ch */ case    3:  		/* mr R3, R30 */
		/* 821C2A6Ch case    3:*/		regs.R3 = regs.R30;
		/* 821C2A6Ch case    3:*/		return 0x821C2A70;
		  /* 821C2A70h */ case    4:  		/* bl -305776 */
		/* 821C2A70h case    4:*/		regs.LR = 0x821C2A74; return 0x82178000;
		/* 821C2A70h case    4:*/		return 0x821C2A74;
		  /* 821C2A74h */ case    5:  		/* mr R4, R3 */
		/* 821C2A74h case    5:*/		regs.R4 = regs.R3;
		/* 821C2A74h case    5:*/		return 0x821C2A78;
		  /* 821C2A78h */ case    6:  		/* mr R3, R31 */
		/* 821C2A78h case    6:*/		regs.R3 = regs.R31;
		/* 821C2A78h case    6:*/		return 0x821C2A7C;
		  /* 821C2A7Ch */ case    7:  		/* bl -305332 */
		/* 821C2A7Ch case    7:*/		regs.LR = 0x821C2A80; return 0x821781C8;
		/* 821C2A7Ch case    7:*/		return 0x821C2A80;
		  /* 821C2A80h */ case    8:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C2A80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2A80h case    8:*/		return 0x821C2A84;
		  /* 821C2A84h */ case    9:  		/* stw R3, <#[R31 + 52]> */
		/* 821C2A84h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C2A84h case    9:*/		return 0x821C2A88;
		  /* 821C2A88h */ case   10:  		/* mr R6, R28 */
		/* 821C2A88h case   10:*/		regs.R6 = regs.R28;
		/* 821C2A88h case   10:*/		return 0x821C2A8C;
		  /* 821C2A8Ch */ case   11:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C2A8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2A8Ch case   11:*/		return 0x821C2A90;
		  /* 821C2A90h */ case   12:  		/* mr R5, R27 */
		/* 821C2A90h case   12:*/		regs.R5 = regs.R27;
		/* 821C2A90h case   12:*/		return 0x821C2A94;
		  /* 821C2A94h */ case   13:  		/* mr R4, R31 */
		/* 821C2A94h case   13:*/		regs.R4 = regs.R31;
		/* 821C2A94h case   13:*/		return 0x821C2A98;
		  /* 821C2A98h */ case   14:  		/* mr R3, R30 */
		/* 821C2A98h case   14:*/		regs.R3 = regs.R30;
		/* 821C2A98h case   14:*/		return 0x821C2A9C;
		  /* 821C2A9Ch */ case   15:  		/* lwz R11, <#[R11]> */
		/* 821C2A9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2A9Ch case   15:*/		return 0x821C2AA0;
		  /* 821C2AA0h */ case   16:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2AA0h case   16:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2AA0h case   16:*/		return 0x821C2AA4;
		  /* 821C2AA4h */ case   17:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2AA4h case   17:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2AA4h case   17:*/		return 0x821C2AA8;
		  /* 821C2AA8h */ case   18:  		/* stw R10, <#[R31 + 8]> */
		/* 821C2AA8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2AA8h case   18:*/		return 0x821C2AAC;
		  /* 821C2AACh */ case   19:  		/* bl -351236 */
		/* 821C2AACh case   19:*/		regs.LR = 0x821C2AB0; return 0x8216CEA8;
		/* 821C2AACh case   19:*/		return 0x821C2AB0;
		  /* 821C2AB0h */ case   20:  		/* mr R3, R31 */
		/* 821C2AB0h case   20:*/		regs.R3 = regs.R31;
		/* 821C2AB0h case   20:*/		return 0x821C2AB4;
		  /* 821C2AB4h */ case   21:  		/* addi R1, R1, 144 */
		/* 821C2AB4h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2AB4h case   21:*/		return 0x821C2AB8;
		  /* 821C2AB8h */ case   22:  		/* b -1251356 */
		/* 821C2AB8h case   22:*/		return 0x8209129C;
		/* 821C2AB8h case   22:*/		return 0x821C2ABC;
		  /* 821C2ABCh */ case   23:  		/* nop */
		/* 821C2ABCh case   23:*/		cpu::op::nop();
		/* 821C2ABCh case   23:*/		return 0x821C2AC0;
	}
	return 0x821C2AC0;
} // Block from 821C2A60h-821C2AC0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C2AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2AC0);
		  /* 821C2AC0h */ case    0:  		/* mfspr R12, LR */
		/* 821C2AC0h case    0:*/		regs.R12 = regs.LR;
		/* 821C2AC0h case    0:*/		return 0x821C2AC4;
		  /* 821C2AC4h */ case    1:  		/* bl -1251448 */
		/* 821C2AC4h case    1:*/		regs.LR = 0x821C2AC8; return 0x8209124C;
		/* 821C2AC4h case    1:*/		return 0x821C2AC8;
		  /* 821C2AC8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2AC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2AC8h case    2:*/		return 0x821C2ACC;
		  /* 821C2ACCh */ case    3:  		/* mr R27, R4 */
		/* 821C2ACCh case    3:*/		regs.R27 = regs.R4;
		/* 821C2ACCh case    3:*/		return 0x821C2AD0;
		  /* 821C2AD0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2AD0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2AD0h case    4:*/		return 0x821C2AD4;
		  /* 821C2AD4h */ case    5:  		/* mr R28, R5 */
		/* 821C2AD4h case    5:*/		regs.R28 = regs.R5;
		/* 821C2AD4h case    5:*/		return 0x821C2AD8;
	}
	return 0x821C2AD8;
} // Block from 821C2AC0h-821C2AD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C2AD8h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@12@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2AD8);
		  /* 821C2AD8h */ case    0:  		/* mr R29, R6 */
		/* 821C2AD8h case    0:*/		regs.R29 = regs.R6;
		/* 821C2AD8h case    0:*/		return 0x821C2ADC;
		  /* 821C2ADCh */ case    1:  		/* mr R26, R7 */
		/* 821C2ADCh case    1:*/		regs.R26 = regs.R7;
		/* 821C2ADCh case    1:*/		return 0x821C2AE0;
		  /* 821C2AE0h */ case    2:  		/* mr R25, R8 */
		/* 821C2AE0h case    2:*/		regs.R25 = regs.R8;
		/* 821C2AE0h case    2:*/		return 0x821C2AE4;
		  /* 821C2AE4h */ case    3:  		/* li R8, 4 */
		/* 821C2AE4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2AE4h case    3:*/		return 0x821C2AE8;
		  /* 821C2AE8h */ case    4:  		/* li R7, 3 */
		/* 821C2AE8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2AE8h case    4:*/		return 0x821C2AEC;
		  /* 821C2AECh */ case    5:  		/* li R6, 13 */
		/* 821C2AECh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C2AECh case    5:*/		return 0x821C2AF0;
		  /* 821C2AF0h */ case    6:  		/* li R5, 0 */
		/* 821C2AF0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2AF0h case    6:*/		return 0x821C2AF4;
		  /* 821C2AF4h */ case    7:  		/* mr R30, R3 */
		/* 821C2AF4h case    7:*/		regs.R30 = regs.R3;
		/* 821C2AF4h case    7:*/		return 0x821C2AF8;
		  /* 821C2AF8h */ case    8:  		/* bl 401056 */
		/* 821C2AF8h case    8:*/		regs.LR = 0x821C2AFC; return 0x82224998;
		/* 821C2AF8h case    8:*/		return 0x821C2AFC;
		  /* 821C2AFCh */ case    9:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C2AFCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C2AFCh case    9:*/		return 0x821C2B00;
		  /* 821C2B00h */ case   10:  		/* mr R31, R3 */
		/* 821C2B00h case   10:*/		regs.R31 = regs.R3;
		/* 821C2B00h case   10:*/		return 0x821C2B04;
		  /* 821C2B04h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821C2B04h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2B04h case   11:*/		return 0x821C2B08;
		  /* 821C2B08h */ case   12:  		/* mr R4, R29 */
		/* 821C2B08h case   12:*/		regs.R4 = regs.R29;
		/* 821C2B08h case   12:*/		return 0x821C2B0C;
		  /* 821C2B0Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 821C2B0Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821C2B20;  }
		/* 821C2B0Ch case   13:*/		return 0x821C2B10;
		  /* 821C2B10h */ case   14:  		/* mr R3, R30 */
		/* 821C2B10h case   14:*/		regs.R3 = regs.R30;
		/* 821C2B10h case   14:*/		return 0x821C2B14;
		  /* 821C2B14h */ case   15:  		/* lwz R5, <#[R29 + 12]> */
		/* 821C2B14h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C2B14h case   15:*/		return 0x821C2B18;
		  /* 821C2B18h */ case   16:  		/* bl -334376 */
		/* 821C2B18h case   16:*/		regs.LR = 0x821C2B1C; return 0x821710F0;
		/* 821C2B18h case   16:*/		return 0x821C2B1C;
		  /* 821C2B1Ch */ case   17:  		/* mr R4, R3 */
		/* 821C2B1Ch case   17:*/		regs.R4 = regs.R3;
		/* 821C2B1Ch case   17:*/		return 0x821C2B20;
	}
	return 0x821C2B20;
} // Block from 821C2AD8h-821C2B20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C2B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2B20);
		  /* 821C2B20h */ case    0:  		/* mr R3, R31 */
		/* 821C2B20h case    0:*/		regs.R3 = regs.R31;
		/* 821C2B20h case    0:*/		return 0x821C2B24;
		  /* 821C2B24h */ case    1:  		/* bl -305500 */
		/* 821C2B24h case    1:*/		regs.LR = 0x821C2B28; return 0x821781C8;
		/* 821C2B24h case    1:*/		return 0x821C2B28;
		  /* 821C2B28h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 821C2B28h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2B28h case    2:*/		return 0x821C2B2C;
		  /* 821C2B2Ch */ case    3:  		/* mr R4, R26 */
		/* 821C2B2Ch case    3:*/		regs.R4 = regs.R26;
		/* 821C2B2Ch case    3:*/		return 0x821C2B30;
		  /* 821C2B30h */ case    4:  		/* mr R3, R30 */
		/* 821C2B30h case    4:*/		regs.R3 = regs.R30;
		/* 821C2B30h case    4:*/		return 0x821C2B34;
		  /* 821C2B34h */ case    5:  		/* bl -305972 */
		/* 821C2B34h case    5:*/		regs.LR = 0x821C2B38; return 0x82178000;
		/* 821C2B34h case    5:*/		return 0x821C2B38;
		  /* 821C2B38h */ case    6:  		/* mr R4, R3 */
		/* 821C2B38h case    6:*/		regs.R4 = regs.R3;
		/* 821C2B38h case    6:*/		return 0x821C2B3C;
		  /* 821C2B3Ch */ case    7:  		/* mr R3, R31 */
		/* 821C2B3Ch case    7:*/		regs.R3 = regs.R31;
		/* 821C2B3Ch case    7:*/		return 0x821C2B40;
		  /* 821C2B40h */ case    8:  		/* bl -305528 */
		/* 821C2B40h case    8:*/		regs.LR = 0x821C2B44; return 0x821781C8;
		/* 821C2B40h case    8:*/		return 0x821C2B44;
		  /* 821C2B44h */ case    9:  		/* stw R3, <#[R31 + 48]> */
		/* 821C2B44h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2B44h case    9:*/		return 0x821C2B48;
		  /* 821C2B48h */ case   10:  		/* mr R4, R25 */
		/* 821C2B48h case   10:*/		regs.R4 = regs.R25;
		/* 821C2B48h case   10:*/		return 0x821C2B4C;
		  /* 821C2B4Ch */ case   11:  		/* mr R3, R30 */
		/* 821C2B4Ch case   11:*/		regs.R3 = regs.R30;
		/* 821C2B4Ch case   11:*/		return 0x821C2B50;
		  /* 821C2B50h */ case   12:  		/* bl -306000 */
		/* 821C2B50h case   12:*/		regs.LR = 0x821C2B54; return 0x82178000;
		/* 821C2B50h case   12:*/		return 0x821C2B54;
		  /* 821C2B54h */ case   13:  		/* mr R4, R3 */
		/* 821C2B54h case   13:*/		regs.R4 = regs.R3;
		/* 821C2B54h case   13:*/		return 0x821C2B58;
		  /* 821C2B58h */ case   14:  		/* mr R3, R31 */
		/* 821C2B58h case   14:*/		regs.R3 = regs.R31;
		/* 821C2B58h case   14:*/		return 0x821C2B5C;
		  /* 821C2B5Ch */ case   15:  		/* bl -305556 */
		/* 821C2B5Ch case   15:*/		regs.LR = 0x821C2B60; return 0x821781C8;
		/* 821C2B5Ch case   15:*/		return 0x821C2B60;
		  /* 821C2B60h */ case   16:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C2B60h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2B60h case   16:*/		return 0x821C2B64;
		  /* 821C2B64h */ case   17:  		/* stw R3, <#[R31 + 52]> */
		/* 821C2B64h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 821C2B64h case   17:*/		return 0x821C2B68;
		  /* 821C2B68h */ case   18:  		/* mr R6, R28 */
		/* 821C2B68h case   18:*/		regs.R6 = regs.R28;
		/* 821C2B68h case   18:*/		return 0x821C2B6C;
		  /* 821C2B6Ch */ case   19:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C2B6Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2B6Ch case   19:*/		return 0x821C2B70;
		  /* 821C2B70h */ case   20:  		/* mr R5, R27 */
		/* 821C2B70h case   20:*/		regs.R5 = regs.R27;
		/* 821C2B70h case   20:*/		return 0x821C2B74;
		  /* 821C2B74h */ case   21:  		/* mr R4, R31 */
		/* 821C2B74h case   21:*/		regs.R4 = regs.R31;
		/* 821C2B74h case   21:*/		return 0x821C2B78;
		  /* 821C2B78h */ case   22:  		/* mr R3, R30 */
		/* 821C2B78h case   22:*/		regs.R3 = regs.R30;
		/* 821C2B78h case   22:*/		return 0x821C2B7C;
		  /* 821C2B7Ch */ case   23:  		/* lwz R11, <#[R11]> */
		/* 821C2B7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2B7Ch case   23:*/		return 0x821C2B80;
		  /* 821C2B80h */ case   24:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2B80h case   24:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2B80h case   24:*/		return 0x821C2B84;
		  /* 821C2B84h */ case   25:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2B84h case   25:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2B84h case   25:*/		return 0x821C2B88;
		  /* 821C2B88h */ case   26:  		/* stw R10, <#[R31 + 8]> */
		/* 821C2B88h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2B88h case   26:*/		return 0x821C2B8C;
		  /* 821C2B8Ch */ case   27:  		/* bl -351460 */
		/* 821C2B8Ch case   27:*/		regs.LR = 0x821C2B90; return 0x8216CEA8;
		/* 821C2B8Ch case   27:*/		return 0x821C2B90;
		  /* 821C2B90h */ case   28:  		/* mr R3, R31 */
		/* 821C2B90h case   28:*/		regs.R3 = regs.R31;
		/* 821C2B90h case   28:*/		return 0x821C2B94;
		  /* 821C2B94h */ case   29:  		/* addi R1, R1, 144 */
		/* 821C2B94h case   29:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2B94h case   29:*/		return 0x821C2B98;
		  /* 821C2B98h */ case   30:  		/* b -1251580 */
		/* 821C2B98h case   30:*/		return 0x8209129C;
		/* 821C2B98h case   30:*/		return 0x821C2B9C;
		  /* 821C2B9Ch */ case   31:  		/* nop */
		/* 821C2B9Ch case   31:*/		cpu::op::nop();
		/* 821C2B9Ch case   31:*/		return 0x821C2BA0;
	}
	return 0x821C2BA0;
} // Block from 821C2B20h-821C2BA0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821C2BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2BA0);
		  /* 821C2BA0h */ case    0:  		/* mfspr R12, LR */
		/* 821C2BA0h case    0:*/		regs.R12 = regs.LR;
		/* 821C2BA0h case    0:*/		return 0x821C2BA4;
		  /* 821C2BA4h */ case    1:  		/* bl -1251672 */
		/* 821C2BA4h case    1:*/		regs.LR = 0x821C2BA8; return 0x8209124C;
		/* 821C2BA4h case    1:*/		return 0x821C2BA8;
		  /* 821C2BA8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C2BA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C2BA8h case    2:*/		return 0x821C2BAC;
		  /* 821C2BACh */ case    3:  		/* mr R30, R4 */
		/* 821C2BACh case    3:*/		regs.R30 = regs.R4;
		/* 821C2BACh case    3:*/		return 0x821C2BB0;
		  /* 821C2BB0h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C2BB0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C2BB0h case    4:*/		return 0x821C2BB4;
		  /* 821C2BB4h */ case    5:  		/* mr R29, R5 */
		/* 821C2BB4h case    5:*/		regs.R29 = regs.R5;
		/* 821C2BB4h case    5:*/		return 0x821C2BB8;
		  /* 821C2BB8h */ case    6:  		/* mr R28, R6 */
		/* 821C2BB8h case    6:*/		regs.R28 = regs.R6;
		/* 821C2BB8h case    6:*/		return 0x821C2BBC;
		  /* 821C2BBCh */ case    7:  		/* mr R27, R7 */
		/* 821C2BBCh case    7:*/		regs.R27 = regs.R7;
		/* 821C2BBCh case    7:*/		return 0x821C2BC0;
		  /* 821C2BC0h */ case    8:  		/* mr R26, R8 */
		/* 821C2BC0h case    8:*/		regs.R26 = regs.R8;
		/* 821C2BC0h case    8:*/		return 0x821C2BC4;
		  /* 821C2BC4h */ case    9:  		/* li R8, 4 */
		/* 821C2BC4h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C2BC4h case    9:*/		return 0x821C2BC8;
	}
	return 0x821C2BC8;
} // Block from 821C2BA0h-821C2BC8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C2BC8h
// Function '?MakeInstr_V_ADD@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2BC8);
		  /* 821C2BC8h */ case    0:  		/* li R7, 3 */
		/* 821C2BC8h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C2BC8h case    0:*/		return 0x821C2BCC;
		  /* 821C2BCCh */ case    1:  		/* li R6, 13 */
		/* 821C2BCCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 821C2BCCh case    1:*/		return 0x821C2BD0;
		  /* 821C2BD0h */ case    2:  		/* li R5, 0 */
		/* 821C2BD0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2BD0h case    2:*/		return 0x821C2BD4;
		  /* 821C2BD4h */ case    3:  		/* mr R31, R3 */
		/* 821C2BD4h case    3:*/		regs.R31 = regs.R3;
		/* 821C2BD4h case    3:*/		return 0x821C2BD8;
		  /* 821C2BD8h */ case    4:  		/* bl 400832 */
		/* 821C2BD8h case    4:*/		regs.LR = 0x821C2BDC; return 0x82224998;
		/* 821C2BD8h case    4:*/		return 0x821C2BDC;
		  /* 821C2BDCh */ case    5:  		/* mr R25, R3 */
		/* 821C2BDCh case    5:*/		regs.R25 = regs.R3;
		/* 821C2BDCh case    5:*/		return 0x821C2BE0;
		  /* 821C2BE0h */ case    6:  		/* mr R3, R31 */
		/* 821C2BE0h case    6:*/		regs.R3 = regs.R31;
		/* 821C2BE0h case    6:*/		return 0x821C2BE4;
		  /* 821C2BE4h */ case    7:  		/* mr R4, R28 */
		/* 821C2BE4h case    7:*/		regs.R4 = regs.R28;
		/* 821C2BE4h case    7:*/		return 0x821C2BE8;
		  /* 821C2BE8h */ case    8:  		/* bl -306152 */
		/* 821C2BE8h case    8:*/		regs.LR = 0x821C2BEC; return 0x82178000;
		/* 821C2BE8h case    8:*/		return 0x821C2BEC;
		  /* 821C2BECh */ case    9:  		/* mr R4, R3 */
		/* 821C2BECh case    9:*/		regs.R4 = regs.R3;
		/* 821C2BECh case    9:*/		return 0x821C2BF0;
		  /* 821C2BF0h */ case   10:  		/* mr R3, R25 */
		/* 821C2BF0h case   10:*/		regs.R3 = regs.R25;
		/* 821C2BF0h case   10:*/		return 0x821C2BF4;
		  /* 821C2BF4h */ case   11:  		/* bl -305708 */
		/* 821C2BF4h case   11:*/		regs.LR = 0x821C2BF8; return 0x821781C8;
		/* 821C2BF4h case   11:*/		return 0x821C2BF8;
		  /* 821C2BF8h */ case   12:  		/* stw R3, <#[R25 + 44]> */
		/* 821C2BF8h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x0000002C) );
		/* 821C2BF8h case   12:*/		return 0x821C2BFC;
		  /* 821C2BFCh */ case   13:  		/* mr R3, R31 */
		/* 821C2BFCh case   13:*/		regs.R3 = regs.R31;
		/* 821C2BFCh case   13:*/		return 0x821C2C00;
		  /* 821C2C00h */ case   14:  		/* mr R4, R27 */
		/* 821C2C00h case   14:*/		regs.R4 = regs.R27;
		/* 821C2C00h case   14:*/		return 0x821C2C04;
		  /* 821C2C04h */ case   15:  		/* bl -306180 */
		/* 821C2C04h case   15:*/		regs.LR = 0x821C2C08; return 0x82178000;
		/* 821C2C04h case   15:*/		return 0x821C2C08;
		  /* 821C2C08h */ case   16:  		/* mr R4, R3 */
		/* 821C2C08h case   16:*/		regs.R4 = regs.R3;
		/* 821C2C08h case   16:*/		return 0x821C2C0C;
		  /* 821C2C0Ch */ case   17:  		/* mr R3, R25 */
		/* 821C2C0Ch case   17:*/		regs.R3 = regs.R25;
		/* 821C2C0Ch case   17:*/		return 0x821C2C10;
		  /* 821C2C10h */ case   18:  		/* bl -305736 */
		/* 821C2C10h case   18:*/		regs.LR = 0x821C2C14; return 0x821781C8;
		/* 821C2C10h case   18:*/		return 0x821C2C14;
		  /* 821C2C14h */ case   19:  		/* stw R3, <#[R25 + 48]> */
		/* 821C2C14h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000030) );
		/* 821C2C14h case   19:*/		return 0x821C2C18;
		  /* 821C2C18h */ case   20:  		/* mr R3, R31 */
		/* 821C2C18h case   20:*/		regs.R3 = regs.R31;
		/* 821C2C18h case   20:*/		return 0x821C2C1C;
		  /* 821C2C1Ch */ case   21:  		/* mr R4, R26 */
		/* 821C2C1Ch case   21:*/		regs.R4 = regs.R26;
		/* 821C2C1Ch case   21:*/		return 0x821C2C20;
		  /* 821C2C20h */ case   22:  		/* bl -306208 */
		/* 821C2C20h case   22:*/		regs.LR = 0x821C2C24; return 0x82178000;
		/* 821C2C20h case   22:*/		return 0x821C2C24;
		  /* 821C2C24h */ case   23:  		/* mr R4, R3 */
		/* 821C2C24h case   23:*/		regs.R4 = regs.R3;
		/* 821C2C24h case   23:*/		return 0x821C2C28;
		  /* 821C2C28h */ case   24:  		/* mr R3, R25 */
		/* 821C2C28h case   24:*/		regs.R3 = regs.R25;
		/* 821C2C28h case   24:*/		return 0x821C2C2C;
		  /* 821C2C2Ch */ case   25:  		/* bl -305764 */
		/* 821C2C2Ch case   25:*/		regs.LR = 0x821C2C30; return 0x821781C8;
		/* 821C2C2Ch case   25:*/		return 0x821C2C30;
		  /* 821C2C30h */ case   26:  		/* lwz R11, <#[R25 + 44]> */
		/* 821C2C30h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821C2C30h case   26:*/		return 0x821C2C34;
		  /* 821C2C34h */ case   27:  		/* stw R3, <#[R25 + 52]> */
		/* 821C2C34h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000034) );
		/* 821C2C34h case   27:*/		return 0x821C2C38;
		  /* 821C2C38h */ case   28:  		/* mr R4, R25 */
		/* 821C2C38h case   28:*/		regs.R4 = regs.R25;
		/* 821C2C38h case   28:*/		return 0x821C2C3C;
		  /* 821C2C3Ch */ case   29:  		/* lwz R10, <#[R25 + 8]> */
		/* 821C2C3Ch case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 821C2C3Ch case   29:*/		return 0x821C2C40;
		  /* 821C2C40h */ case   30:  		/* mr R6, R29 */
		/* 821C2C40h case   30:*/		regs.R6 = regs.R29;
		/* 821C2C40h case   30:*/		return 0x821C2C44;
		  /* 821C2C44h */ case   31:  		/* mr R5, R30 */
		/* 821C2C44h case   31:*/		regs.R5 = regs.R30;
		/* 821C2C44h case   31:*/		return 0x821C2C48;
		  /* 821C2C48h */ case   32:  		/* mr R3, R31 */
		/* 821C2C48h case   32:*/		regs.R3 = regs.R31;
		/* 821C2C48h case   32:*/		return 0x821C2C4C;
		  /* 821C2C4Ch */ case   33:  		/* lwz R11, <#[R11]> */
		/* 821C2C4Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2C4Ch case   33:*/		return 0x821C2C50;
		  /* 821C2C50h */ case   34:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821C2C50h case   34:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821C2C50h case   34:*/		return 0x821C2C54;
		  /* 821C2C54h */ case   35:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821C2C54h case   35:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821C2C54h case   35:*/		return 0x821C2C58;
		  /* 821C2C58h */ case   36:  		/* stw R10, <#[R25 + 8]> */
		/* 821C2C58h case   36:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 821C2C58h case   36:*/		return 0x821C2C5C;
		  /* 821C2C5Ch */ case   37:  		/* bl -351668 */
		/* 821C2C5Ch case   37:*/		regs.LR = 0x821C2C60; return 0x8216CEA8;
		/* 821C2C5Ch case   37:*/		return 0x821C2C60;
		  /* 821C2C60h */ case   38:  		/* mr R3, R25 */
		/* 821C2C60h case   38:*/		regs.R3 = regs.R25;
		/* 821C2C60h case   38:*/		return 0x821C2C64;
		  /* 821C2C64h */ case   39:  		/* addi R1, R1, 144 */
		/* 821C2C64h case   39:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C2C64h case   39:*/		return 0x821C2C68;
		  /* 821C2C68h */ case   40:  		/* b -1251788 */
		/* 821C2C68h case   40:*/		return 0x8209129C;
		/* 821C2C68h case   40:*/		return 0x821C2C6C;
		  /* 821C2C6Ch */ case   41:  		/* nop */
		/* 821C2C6Ch case   41:*/		cpu::op::nop();
		/* 821C2C6Ch case   41:*/		return 0x821C2C70;
	}
	return 0x821C2C70;
} // Block from 821C2BC8h-821C2C70h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821C2C70h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2C70);
		  /* 821C2C70h */ case    0:  		/* mfspr R12, LR */
		/* 821C2C70h case    0:*/		regs.R12 = regs.LR;
		/* 821C2C70h case    0:*/		return 0x821C2C74;
		  /* 821C2C74h */ case    1:  		/* bl -1251912 */
		/* 821C2C74h case    1:*/		regs.LR = 0x821C2C78; return 0x8209122C;
		/* 821C2C74h case    1:*/		return 0x821C2C78;
	}
	return 0x821C2C78;
} // Block from 821C2C70h-821C2C78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C2C78h
// Function '?MakeInstr_V_MUL@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2C78);
		  /* 821C2C78h */ case    0:  		/* stfd FR30, <#[R1 - 144]> */
		/* 821C2C78h case    0:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821C2C78h case    0:*/		return 0x821C2C7C;
		  /* 821C2C7Ch */ case    1:  		/* stfd FR31, <#[R1 - 136]> */
		/* 821C2C7Ch case    1:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821C2C7Ch case    1:*/		return 0x821C2C80;
		  /* 821C2C80h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821C2C80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821C2C80h case    2:*/		return 0x821C2C84;
		  /* 821C2C84h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C2C84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C2C84h case    3:*/		return 0x821C2C88;
		  /* 821C2C88h */ case    4:  		/* mr R27, R3 */
		/* 821C2C88h case    4:*/		regs.R27 = regs.R3;
		/* 821C2C88h case    4:*/		return 0x821C2C8C;
		  /* 821C2C8Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C2C8Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C2C8Ch case    5:*/		return 0x821C2C90;
		  /* 821C2C90h */ case    6:  		/* bc 4, CR0_EQ, 6452 */
		/* 821C2C90h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C45C4;  }
		/* 821C2C90h case    6:*/		return 0x821C2C94;
		  /* 821C2C94h */ case    7:  		/* mr R21, R11 */
		/* 821C2C94h case    7:*/		regs.R21 = regs.R11;
		/* 821C2C94h case    7:*/		return 0x821C2C98;
		  /* 821C2C98h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821C2C98h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C2C98h case    8:*/		return 0x821C2C9C;
		  /* 821C2C9Ch */ case    9:  		/* bc 12, CR0_EQ, 6440 */
		/* 821C2C9Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C45C4;  }
		/* 821C2C9Ch case    9:*/		return 0x821C2CA0;
		  /* 821C2CA0h */ case   10:  		/* lis R11, -32256 */
		/* 821C2CA0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C2CA0h case   10:*/		return 0x821C2CA4;
		  /* 821C2CA4h */ case   11:  		/* lis R10, -32256 */
		/* 821C2CA4h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821C2CA4h case   11:*/		return 0x821C2CA8;
		  /* 821C2CA8h */ case   12:  		/* li R23, 0 */
		/* 821C2CA8h case   12:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821C2CA8h case   12:*/		return 0x821C2CAC;
		  /* 821C2CACh */ case   13:  		/* li R20, 1 */
		/* 821C2CACh case   13:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 821C2CACh case   13:*/		return 0x821C2CB0;
		  /* 821C2CB0h */ case   14:  		/* lis R19, 8 */
		/* 821C2CB0h case   14:*/		cpu::op::lis<0>(regs,&regs.R19,0x8);
		/* 821C2CB0h case   14:*/		return 0x821C2CB4;
		  /* 821C2CB4h */ case   15:  		/* lfs FR30, <#[R11 + 1792]> */
		/* 821C2CB4h case   15:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000700) );
		/* 821C2CB4h case   15:*/		return 0x821C2CB8;
		  /* 821C2CB8h */ case   16:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 821C2CB8h case   16:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 821C2CB8h case   16:*/		return 0x821C2CBC;
		  /* 821C2CBCh */ case   17:  		/* lwz R11, <#[R27 + 40]> */
		/* 821C2CBCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 821C2CBCh case   17:*/		return 0x821C2CC0;
		  /* 821C2CC0h */ case   18:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 821C2CC0h case   18:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 821C2CC0h case   18:*/		return 0x821C2CC4;
		  /* 821C2CC4h */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 821C2CC4h case   19:*/		if ( regs.CR[0].eq ) { return 0x821C2CD4;  }
		/* 821C2CC4h case   19:*/		return 0x821C2CC8;
		  /* 821C2CC8h */ case   20:  		/* lwz R11, <#[R21 + 48]> */
		/* 821C2CC8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821C2CC8h case   20:*/		return 0x821C2CCC;
		  /* 821C2CCCh */ case   21:  		/* oris R11, R11, 8192 */
		/* 821C2CCCh case   21:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821C2CCCh case   21:*/		return 0x821C2CD0;
		  /* 821C2CD0h */ case   22:  		/* stw R11, <#[R21 + 48]> */
		/* 821C2CD0h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821C2CD0h case   22:*/		return 0x821C2CD4;
	}
	return 0x821C2CD4;
} // Block from 821C2C78h-821C2CD4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C2CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2CD4);
		  /* 821C2CD4h */ case    0:  		/* lwz R11, <#[R21 + 48]> */
		/* 821C2CD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821C2CD4h case    0:*/		return 0x821C2CD8;
		  /* 821C2CD8h */ case    1:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 821C2CD8h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821C2CD8h case    1:*/		return 0x821C2CDC;
		  /* 821C2CDCh */ case    2:  		/* bc 12, CR0_EQ, 6348 */
		/* 821C2CDCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C2CDCh case    2:*/		return 0x821C2CE0;
		  /* 821C2CE0h */ case    3:  		/* lwz R11, <#[R21 + 28]> */
		/* 821C2CE0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821C2CE0h case    3:*/		return 0x821C2CE4;
		  /* 821C2CE4h */ case    4:  		/* addi R22, R21, 24 */
		/* 821C2CE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R21,0x18);
		/* 821C2CE4h case    4:*/		return 0x821C2CE8;
		  /* 821C2CE8h */ case    5:  		/* mr R25, R23 */
		/* 821C2CE8h case    5:*/		regs.R25 = regs.R23;
		/* 821C2CE8h case    5:*/		return 0x821C2CEC;
		  /* 821C2CECh */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C2CECh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C2CECh case    6:*/		return 0x821C2CF0;
		  /* 821C2CF0h */ case    7:  		/* mr R24, R23 */
		/* 821C2CF0h case    7:*/		regs.R24 = regs.R23;
		/* 821C2CF0h case    7:*/		return 0x821C2CF4;
		  /* 821C2CF4h */ case    8:  		/* mr R26, R23 */
		/* 821C2CF4h case    8:*/		regs.R26 = regs.R23;
		/* 821C2CF4h case    8:*/		return 0x821C2CF8;
		  /* 821C2CF8h */ case    9:  		/* bc 4, CR0_EQ, 3072 */
		/* 821C2CF8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821C38F8;  }
		/* 821C2CF8h case    9:*/		return 0x821C2CFC;
		  /* 821C2CFCh */ case   10:  		/* lwz R11, <#[R22]> */
		/* 821C2CFCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821C2CFCh case   10:*/		return 0x821C2D00;
		  /* 821C2D00h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C2D00h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C2D00h case   11:*/		return 0x821C2D04;
		  /* 821C2D04h */ case   12:  		/* addic. R31, R11, -40 */
		/* 821C2D04h case   12:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821C2D04h case   12:*/		return 0x821C2D08;
		  /* 821C2D08h */ case   13:  		/* bc 12, CR0_EQ, 3056 */
		/* 821C2D08h case   13:*/		if ( regs.CR[0].eq ) { return 0x821C38F8;  }
		/* 821C2D08h case   13:*/		return 0x821C2D0C;
		  /* 821C2D0Ch */ case   14:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C2D0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2D0Ch case   14:*/		return 0x821C2D10;
		  /* 821C2D10h */ case   15:  		/* rlwinm. R10, R11, 15, 31, 31 */
		/* 821C2D10h case   15:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R10,regs.R11);
		/* 821C2D10h case   15:*/		return 0x821C2D14;
		  /* 821C2D14h */ case   16:  		/* bc 4, CR0_EQ, 6336 */
		/* 821C2D14h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821C45D4;  }
		/* 821C2D14h case   16:*/		return 0x821C2D18;
		  /* 821C2D18h */ case   17:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C2D18h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C2D18h case   17:*/		return 0x821C2D1C;
		  /* 821C2D1Ch */ case   18:  		/* cmplwi CR6, R11, 21 */
		/* 821C2D1Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 821C2D1Ch case   18:*/		return 0x821C2D20;
		  /* 821C2D20h */ case   19:  		/* bc 12, CR6_LT, 16 */
		/* 821C2D20h case   19:*/		if ( regs.CR[6].lt ) { return 0x821C2D30;  }
		/* 821C2D20h case   19:*/		return 0x821C2D24;
		  /* 821C2D24h */ case   20:  		/* cmplwi CR6, R11, 24 */
		/* 821C2D24h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 821C2D24h case   20:*/		return 0x821C2D28;
	}
	return 0x821C2D28;
} // Block from 821C2CD4h-821C2D28h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C2D28h
// Function '?MakeInstr_V_MULADD@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@11PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2D28);
		  /* 821C2D28h */ case    0:  		/* mr R10, R20 */
		/* 821C2D28h case    0:*/		regs.R10 = regs.R20;
		/* 821C2D28h case    0:*/		return 0x821C2D2C;
		  /* 821C2D2Ch */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 821C2D2Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x821C2D34;  }
		/* 821C2D2Ch case    1:*/		return 0x821C2D30;
	}
	return 0x821C2D30;
} // Block from 821C2D28h-821C2D30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C2D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2D30);
		  /* 821C2D30h */ case    0:  		/* mr R10, R23 */
		/* 821C2D30h case    0:*/		regs.R10 = regs.R23;
		/* 821C2D30h case    0:*/		return 0x821C2D34;
	}
	return 0x821C2D34;
} // Block from 821C2D30h-821C2D34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C2D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2D34);
		  /* 821C2D34h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C2D34h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C2D34h case    0:*/		return 0x821C2D38;
		  /* 821C2D38h */ case    1:  		/* bc 12, CR0_EQ, 552 */
		/* 821C2D38h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C2F60;  }
		/* 821C2D38h case    1:*/		return 0x821C2D3C;
		  /* 821C2D3Ch */ case    2:  		/* li R4, 1 */
		/* 821C2D3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C2D3Ch case    2:*/		return 0x821C2D40;
		  /* 821C2D40h */ case    3:  		/* fmr FR4, FR31 */
		/* 821C2D40h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C2D40h case    3:*/		return 0x821C2D44;
		  /* 821C2D44h */ case    4:  		/* mr R3, R27 */
		/* 821C2D44h case    4:*/		regs.R3 = regs.R27;
		/* 821C2D44h case    4:*/		return 0x821C2D48;
		  /* 821C2D48h */ case    5:  		/* fmr FR3, FR31 */
		/* 821C2D48h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C2D48h case    5:*/		return 0x821C2D4C;
		  /* 821C2D4Ch */ case    6:  		/* fmr FR2, FR31 */
		/* 821C2D4Ch case    6:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C2D4Ch case    6:*/		return 0x821C2D50;
		  /* 821C2D50h */ case    7:  		/* fmr FR1, FR31 */
		/* 821C2D50h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C2D50h case    7:*/		return 0x821C2D54;
		  /* 821C2D54h */ case    8:  		/* bl 425476 */
		/* 821C2D54h case    8:*/		regs.LR = 0x821C2D58; return 0x8222AB58;
		/* 821C2D54h case    8:*/		return 0x821C2D58;
		  /* 821C2D58h */ case    9:  		/* mr R29, R3 */
		/* 821C2D58h case    9:*/		regs.R29 = regs.R3;
		/* 821C2D58h case    9:*/		return 0x821C2D5C;
		  /* 821C2D5Ch */ case   10:  		/* fmr FR4, FR31 */
		/* 821C2D5Ch case   10:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C2D5Ch case   10:*/		return 0x821C2D60;
		  /* 821C2D60h */ case   11:  		/* li R4, 1 */
		/* 821C2D60h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C2D60h case   11:*/		return 0x821C2D64;
		  /* 821C2D64h */ case   12:  		/* fmr FR3, FR31 */
		/* 821C2D64h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C2D64h case   12:*/		return 0x821C2D68;
		  /* 821C2D68h */ case   13:  		/* mr R3, R27 */
		/* 821C2D68h case   13:*/		regs.R3 = regs.R27;
		/* 821C2D68h case   13:*/		return 0x821C2D6C;
		  /* 821C2D6Ch */ case   14:  		/* fmr FR2, FR31 */
		/* 821C2D6Ch case   14:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C2D6Ch case   14:*/		return 0x821C2D70;
		  /* 821C2D70h */ case   15:  		/* fmr FR1, FR30 */
		/* 821C2D70h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821C2D70h case   15:*/		return 0x821C2D74;
		  /* 821C2D74h */ case   16:  		/* bl 425444 */
		/* 821C2D74h case   16:*/		regs.LR = 0x821C2D78; return 0x8222AB58;
		/* 821C2D74h case   16:*/		return 0x821C2D78;
		  /* 821C2D78h */ case   17:  		/* mr R30, R3 */
		/* 821C2D78h case   17:*/		regs.R30 = regs.R3;
		/* 821C2D78h case   17:*/		return 0x821C2D7C;
		  /* 821C2D7Ch */ case   18:  		/* li R5, 0 */
		/* 821C2D7Ch case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2D7Ch case   18:*/		return 0x821C2D80;
		  /* 821C2D80h */ case   19:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C2D80h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C2D80h case   19:*/		return 0x821C2D84;
		  /* 821C2D84h */ case   20:  		/* mr R3, R27 */
		/* 821C2D84h case   20:*/		regs.R3 = regs.R27;
		/* 821C2D84h case   20:*/		return 0x821C2D88;
		  /* 821C2D88h */ case   21:  		/* bl 175096 */
		/* 821C2D88h case   21:*/		regs.LR = 0x821C2D8C; return 0x821ED980;
		/* 821C2D88h case   21:*/		return 0x821C2D8C;
		  /* 821C2D8Ch */ case   22:  		/* mr R28, R3 */
		/* 821C2D8Ch case   22:*/		regs.R28 = regs.R3;
		/* 821C2D8Ch case   22:*/		return 0x821C2D90;
		  /* 821C2D90h */ case   23:  		/* li R5, 0 */
		/* 821C2D90h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2D90h case   23:*/		return 0x821C2D94;
		  /* 821C2D94h */ case   24:  		/* mr R4, R30 */
		/* 821C2D94h case   24:*/		regs.R4 = regs.R30;
		/* 821C2D94h case   24:*/		return 0x821C2D98;
		  /* 821C2D98h */ case   25:  		/* mr R3, R27 */
		/* 821C2D98h case   25:*/		regs.R3 = regs.R27;
		/* 821C2D98h case   25:*/		return 0x821C2D9C;
		  /* 821C2D9Ch */ case   26:  		/* bl -306316 */
		/* 821C2D9Ch case   26:*/		regs.LR = 0x821C2DA0; return 0x82178110;
		/* 821C2D9Ch case   26:*/		return 0x821C2DA0;
		  /* 821C2DA0h */ case   27:  		/* mr R7, R3 */
		/* 821C2DA0h case   27:*/		regs.R7 = regs.R3;
		/* 821C2DA0h case   27:*/		return 0x821C2DA4;
		  /* 821C2DA4h */ case   28:  		/* mr R6, R28 */
		/* 821C2DA4h case   28:*/		regs.R6 = regs.R28;
		/* 821C2DA4h case   28:*/		return 0x821C2DA8;
		  /* 821C2DA8h */ case   29:  		/* mr R5, R31 */
		/* 821C2DA8h case   29:*/		regs.R5 = regs.R31;
		/* 821C2DA8h case   29:*/		return 0x821C2DAC;
		  /* 821C2DACh */ case   30:  		/* li R4, 0 */
		/* 821C2DACh case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2DACh case   30:*/		return 0x821C2DB0;
		  /* 821C2DB0h */ case   31:  		/* mr R3, R27 */
		/* 821C2DB0h case   31:*/		regs.R3 = regs.R27;
		/* 821C2DB0h case   31:*/		return 0x821C2DB4;
		  /* 821C2DB4h */ case   32:  		/* bl -151500 */
		/* 821C2DB4h case   32:*/		regs.LR = 0x821C2DB8; return 0x8219DDE8;
		/* 821C2DB4h case   32:*/		return 0x821C2DB8;
		  /* 821C2DB8h */ case   33:  		/* mr R30, R3 */
		/* 821C2DB8h case   33:*/		regs.R30 = regs.R3;
		/* 821C2DB8h case   33:*/		return 0x821C2DBC;
		  /* 821C2DBCh */ case   34:  		/* li R5, 0 */
		/* 821C2DBCh case   34:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2DBCh case   34:*/		return 0x821C2DC0;
		  /* 821C2DC0h */ case   35:  		/* mr R4, R29 */
		/* 821C2DC0h case   35:*/		regs.R4 = regs.R29;
		/* 821C2DC0h case   35:*/		return 0x821C2DC4;
		  /* 821C2DC4h */ case   36:  		/* mr R3, R27 */
		/* 821C2DC4h case   36:*/		regs.R3 = regs.R27;
		/* 821C2DC4h case   36:*/		return 0x821C2DC8;
		  /* 821C2DC8h */ case   37:  		/* bl -306360 */
		/* 821C2DC8h case   37:*/		regs.LR = 0x821C2DCC; return 0x82178110;
		/* 821C2DC8h case   37:*/		return 0x821C2DCC;
		  /* 821C2DCCh */ case   38:  		/* mr R7, R3 */
		/* 821C2DCCh case   38:*/		regs.R7 = regs.R3;
		/* 821C2DCCh case   38:*/		return 0x821C2DD0;
		  /* 821C2DD0h */ case   39:  		/* mr R6, R28 */
		/* 821C2DD0h case   39:*/		regs.R6 = regs.R28;
		/* 821C2DD0h case   39:*/		return 0x821C2DD4;
		  /* 821C2DD4h */ case   40:  		/* mr R5, R31 */
		/* 821C2DD4h case   40:*/		regs.R5 = regs.R31;
		/* 821C2DD4h case   40:*/		return 0x821C2DD8;
		  /* 821C2DD8h */ case   41:  		/* li R4, 0 */
		/* 821C2DD8h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2DD8h case   41:*/		return 0x821C2DDC;
		  /* 821C2DDCh */ case   42:  		/* mr R3, R27 */
		/* 821C2DDCh case   42:*/		regs.R3 = regs.R27;
		/* 821C2DDCh case   42:*/		return 0x821C2DE0;
		  /* 821C2DE0h */ case   43:  		/* mr R8, R30 */
		/* 821C2DE0h case   43:*/		regs.R8 = regs.R30;
		/* 821C2DE0h case   43:*/		return 0x821C2DE4;
		  /* 821C2DE4h */ case   44:  		/* bl -1748 */
		/* 821C2DE4h case   44:*/		regs.LR = 0x821C2DE8; return 0x821C2710;
		/* 821C2DE4h case   44:*/		return 0x821C2DE8;
		  /* 821C2DE8h */ case   45:  		/* mr R28, R3 */
		/* 821C2DE8h case   45:*/		regs.R28 = regs.R3;
		/* 821C2DE8h case   45:*/		return 0x821C2DEC;
		  /* 821C2DECh */ case   46:  		/* li R5, 0 */
		/* 821C2DECh case   46:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2DECh case   46:*/		return 0x821C2DF0;
		  /* 821C2DF0h */ case   47:  		/* lwz R4, <#[R31 + 48]> */
		/* 821C2DF0h case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821C2DF0h case   47:*/		return 0x821C2DF4;
		  /* 821C2DF4h */ case   48:  		/* mr R3, R27 */
		/* 821C2DF4h case   48:*/		regs.R3 = regs.R27;
		/* 821C2DF4h case   48:*/		return 0x821C2DF8;
		  /* 821C2DF8h */ case   49:  		/* bl 174984 */
		/* 821C2DF8h case   49:*/		regs.LR = 0x821C2DFC; return 0x821ED980;
		/* 821C2DF8h case   49:*/		return 0x821C2DFC;
		  /* 821C2DFCh */ case   50:  		/* mr R29, R3 */
		/* 821C2DFCh case   50:*/		regs.R29 = regs.R3;
		/* 821C2DFCh case   50:*/		return 0x821C2E00;
		  /* 821C2E00h */ case   51:  		/* mr R4, R28 */
		/* 821C2E00h case   51:*/		regs.R4 = regs.R28;
		/* 821C2E00h case   51:*/		return 0x821C2E04;
		  /* 821C2E04h */ case   52:  		/* mr R3, R27 */
		/* 821C2E04h case   52:*/		regs.R3 = regs.R27;
		/* 821C2E04h case   52:*/		return 0x821C2E08;
	}
	return 0x821C2E08;
} // Block from 821C2D34h-821C2E08h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821C2E08h
// Function '?MakeInstr_V_DOT3@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2E08);
		  /* 821C2E08h */ case    0:  		/* bl -306696 */
		/* 821C2E08h case    0:*/		regs.LR = 0x821C2E0C; return 0x82178000;
		/* 821C2E08h case    0:*/		return 0x821C2E0C;
		  /* 821C2E0Ch */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C2E0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C2E0Ch case    1:*/		return 0x821C2E10;
		  /* 821C2E10h */ case    2:  		/* mr R7, R3 */
		/* 821C2E10h case    2:*/		regs.R7 = regs.R3;
		/* 821C2E10h case    2:*/		return 0x821C2E14;
		  /* 821C2E14h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C2E14h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C2E14h case    3:*/		return 0x821C2E18;
		  /* 821C2E18h */ case    4:  		/* mr R3, R27 */
		/* 821C2E18h case    4:*/		regs.R3 = regs.R27;
		/* 821C2E18h case    4:*/		return 0x821C2E1C;
		  /* 821C2E1Ch */ case    5:  		/* cmpwi CR6, R11, 21 */
		/* 821C2E1Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 821C2E1Ch case    5:*/		return 0x821C2E20;
		  /* 821C2E20h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 821C2E20h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C2E88;  }
		/* 821C2E20h case    6:*/		return 0x821C2E24;
		  /* 821C2E24h */ case    7:  		/* cmpwi CR6, R11, 22 */
		/* 821C2E24h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000016);
		/* 821C2E24h case    7:*/		return 0x821C2E28;
		  /* 821C2E28h */ case    8:  		/* bc 12, CR6_EQ, 68 */
		/* 821C2E28h case    8:*/		if ( regs.CR[6].eq ) { return 0x821C2E6C;  }
		/* 821C2E28h case    8:*/		return 0x821C2E2C;
		  /* 821C2E2Ch */ case    9:  		/* cmpwi CR6, R11, 23 */
		/* 821C2E2Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 821C2E2Ch case    9:*/		return 0x821C2E30;
		  /* 821C2E30h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 821C2E30h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C2E54;  }
		/* 821C2E30h case   10:*/		return 0x821C2E34;
		  /* 821C2E34h */ case   11:  		/* cmpwi CR6, R11, 24 */
		/* 821C2E34h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 821C2E34h case   11:*/		return 0x821C2E38;
		  /* 821C2E38h */ case   12:  		/* bc 4, CR6_EQ, 6056 */
		/* 821C2E38h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821C45E0;  }
		/* 821C2E38h case   12:*/		return 0x821C2E3C;
		  /* 821C2E3Ch */ case   13:  		/* mr R8, R30 */
		/* 821C2E3Ch case   13:*/		regs.R8 = regs.R30;
		/* 821C2E3Ch case   13:*/		return 0x821C2E40;
		  /* 821C2E40h */ case   14:  		/* mr R6, R29 */
		/* 821C2E40h case   14:*/		regs.R6 = regs.R29;
		/* 821C2E40h case   14:*/		return 0x821C2E44;
		  /* 821C2E44h */ case   15:  		/* mr R5, R31 */
		/* 821C2E44h case   15:*/		regs.R5 = regs.R31;
		/* 821C2E44h case   15:*/		return 0x821C2E48;
		  /* 821C2E48h */ case   16:  		/* li R4, 0 */
		/* 821C2E48h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2E48h case   16:*/		return 0x821C2E4C;
		  /* 821C2E4Ch */ case   17:  		/* bl -1612 */
		/* 821C2E4Ch case   17:*/		regs.LR = 0x821C2E50; return 0x821C2800;
		/* 821C2E4Ch case   17:*/		return 0x821C2E50;
		  /* 821C2E50h */ case   18:  		/* b 76 */
		/* 821C2E50h case   18:*/		return 0x821C2E9C;
		/* 821C2E50h case   18:*/		return 0x821C2E54;
	}
	return 0x821C2E54;
} // Block from 821C2E08h-821C2E54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C2E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2E54);
		  /* 821C2E54h */ case    0:  		/* mr R8, R30 */
		/* 821C2E54h case    0:*/		regs.R8 = regs.R30;
		/* 821C2E54h case    0:*/		return 0x821C2E58;
		  /* 821C2E58h */ case    1:  		/* mr R6, R29 */
		/* 821C2E58h case    1:*/		regs.R6 = regs.R29;
		/* 821C2E58h case    1:*/		return 0x821C2E5C;
		  /* 821C2E5Ch */ case    2:  		/* mr R5, R31 */
		/* 821C2E5Ch case    2:*/		regs.R5 = regs.R31;
		/* 821C2E5Ch case    2:*/		return 0x821C2E60;
		  /* 821C2E60h */ case    3:  		/* li R4, 0 */
		/* 821C2E60h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2E60h case    3:*/		return 0x821C2E64;
		  /* 821C2E64h */ case    4:  		/* bl -1396 */
		/* 821C2E64h case    4:*/		regs.LR = 0x821C2E68; return 0x821C28F0;
		/* 821C2E64h case    4:*/		return 0x821C2E68;
		  /* 821C2E68h */ case    5:  		/* b 52 */
		/* 821C2E68h case    5:*/		return 0x821C2E9C;
		/* 821C2E68h case    5:*/		return 0x821C2E6C;
	}
	return 0x821C2E6C;
} // Block from 821C2E54h-821C2E6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C2E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2E6C);
		  /* 821C2E6Ch */ case    0:  		/* mr R8, R7 */
		/* 821C2E6Ch case    0:*/		regs.R8 = regs.R7;
		/* 821C2E6Ch case    0:*/		return 0x821C2E70;
		  /* 821C2E70h */ case    1:  		/* mr R7, R30 */
		/* 821C2E70h case    1:*/		regs.R7 = regs.R30;
		/* 821C2E70h case    1:*/		return 0x821C2E74;
		  /* 821C2E74h */ case    2:  		/* mr R6, R29 */
		/* 821C2E74h case    2:*/		regs.R6 = regs.R29;
		/* 821C2E74h case    2:*/		return 0x821C2E78;
		  /* 821C2E78h */ case    3:  		/* mr R5, R31 */
		/* 821C2E78h case    3:*/		regs.R5 = regs.R31;
		/* 821C2E78h case    3:*/		return 0x821C2E7C;
		  /* 821C2E7Ch */ case    4:  		/* li R4, 0 */
		/* 821C2E7Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2E7Ch case    4:*/		return 0x821C2E80;
		  /* 821C2E80h */ case    5:  		/* bl -3104 */
		/* 821C2E80h case    5:*/		regs.LR = 0x821C2E84; return 0x821C2260;
		/* 821C2E80h case    5:*/		return 0x821C2E84;
		  /* 821C2E84h */ case    6:  		/* b 24 */
		/* 821C2E84h case    6:*/		return 0x821C2E9C;
		/* 821C2E84h case    6:*/		return 0x821C2E88;
	}
	return 0x821C2E88;
} // Block from 821C2E6Ch-821C2E88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C2E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2E88);
		  /* 821C2E88h */ case    0:  		/* mr R8, R30 */
		/* 821C2E88h case    0:*/		regs.R8 = regs.R30;
		/* 821C2E88h case    0:*/		return 0x821C2E8C;
		  /* 821C2E8Ch */ case    1:  		/* mr R6, R29 */
		/* 821C2E8Ch case    1:*/		regs.R6 = regs.R29;
		/* 821C2E8Ch case    1:*/		return 0x821C2E90;
		  /* 821C2E90h */ case    2:  		/* mr R5, R31 */
		/* 821C2E90h case    2:*/		regs.R5 = regs.R31;
		/* 821C2E90h case    2:*/		return 0x821C2E94;
		  /* 821C2E94h */ case    3:  		/* li R4, 0 */
		/* 821C2E94h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C2E94h case    3:*/		return 0x821C2E98;
		  /* 821C2E98h */ case    4:  		/* bl -1928 */
		/* 821C2E98h case    4:*/		regs.LR = 0x821C2E9C; return 0x821C2710;
		/* 821C2E98h case    4:*/		return 0x821C2E9C;
	}
	return 0x821C2E9C;
} // Block from 821C2E88h-821C2E9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C2E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2E9C);
		  /* 821C2E9Ch */ case    0:  		/* addi R8, R31, 4 */
		/* 821C2E9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C2E9Ch case    0:*/		return 0x821C2EA0;
		  /* 821C2EA0h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C2EA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C2EA0h case    1:*/		return 0x821C2EA4;
		  /* 821C2EA4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C2EA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2EA4h case    2:*/		return 0x821C2EA8;
		  /* 821C2EA8h */ case    3:  		/* bc 12, CR6_EQ, 160 */
		/* 821C2EA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C2F48;  }
		/* 821C2EA8h case    3:*/		return 0x821C2EAC;
		  /* 821C2EACh */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C2EACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C2EACh case    4:*/		return 0x821C2EB0;
	}
	return 0x821C2EB0;
} // Block from 821C2E9Ch-821C2EB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C2EB0h
// Function '?MakeInstr_V_DOT2ADD@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@11PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2EB0);
		  /* 821C2EB0h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821C2EB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C2EB0h case    0:*/		return 0x821C2EB4;
		  /* 821C2EB4h */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 821C2EB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C2F34;  }
		/* 821C2EB4h case    1:*/		return 0x821C2EB8;
		  /* 821C2EB8h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C2EB8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C2EB8h case    2:*/		return 0x821C2EBC;
		  /* 821C2EBCh */ case    3:  		/* addi R10, R10, 4 */
		/* 821C2EBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C2EBCh case    3:*/		return 0x821C2EC0;
		  /* 821C2EC0h */ case    4:  		/* lwz R9, <#[R10]> */
		/* 821C2EC0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C2EC0h case    4:*/		return 0x821C2EC4;
		  /* 821C2EC4h */ case    5:  		/* b 12 */
		/* 821C2EC4h case    5:*/		return 0x821C2ED0;
		/* 821C2EC4h case    5:*/		return 0x821C2EC8;
		  /* 821C2EC8h */ case    6:  		/* addi R10, R9, 8 */
		/* 821C2EC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C2EC8h case    6:*/		return 0x821C2ECC;
		  /* 821C2ECCh */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C2ECCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C2ECCh case    7:*/		return 0x821C2ED0;
	}
	return 0x821C2ED0;
} // Block from 821C2EB0h-821C2ED0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C2ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2ED0);
		  /* 821C2ED0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C2ED0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C2ED0h case    0:*/		return 0x821C2ED4;
		  /* 821C2ED4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C2ED4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C2EC8;  }
		/* 821C2ED4h case    1:*/		return 0x821C2ED8;
		  /* 821C2ED8h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C2ED8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C2ED8h case    2:*/		return 0x821C2EDC;
		  /* 821C2EDCh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C2EDCh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C2EDCh case    3:*/		return 0x821C2EE0;
		  /* 821C2EE0h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C2EE0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C2EE0h case    4:*/		return 0x821C2EE4;
		  /* 821C2EE4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C2EE4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C2EE4h case    5:*/		return 0x821C2EE8;
		  /* 821C2EE8h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C2EE8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C2EE8h case    6:*/		return 0x821C2EEC;
		  /* 821C2EECh */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C2EECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2EECh case    7:*/		return 0x821C2EF0;
		  /* 821C2EF0h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C2EF0h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C2EF0h case    8:*/		return 0x821C2EF4;
		  /* 821C2EF4h */ case    9:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C2EF4h case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C2EF4h case    9:*/		return 0x821C2EF8;
		  /* 821C2EF8h */ case   10:  		/* stw R3, <#[R11 + 12]> */
		/* 821C2EF8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C2EF8h case   10:*/		return 0x821C2EFC;
		  /* 821C2EFCh */ case   11:  		/* srw R9, R23, R9 */
		/* 821C2EFCh case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C2EFCh case   11:*/		return 0x821C2F00;
		  /* 821C2F00h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C2F00h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C2F00h case   12:*/		return 0x821C2F04;
		  /* 821C2F04h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C2F04h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C2F04h case   13:*/		return 0x821C2F08;
		  /* 821C2F08h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C2F08h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C2F08h case   14:*/		return 0x821C2F0C;
		  /* 821C2F0Ch */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C2F0Ch case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C2F0Ch case   15:*/		return 0x821C2F10;
		  /* 821C2F10h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C2F10h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C2F10h case   16:*/		return 0x821C2F14;
		  /* 821C2F14h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C2F14h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C2F14h case   17:*/		return 0x821C2F18;
		  /* 821C2F18h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C2F18h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C2F18h case   18:*/		return 0x821C2F1C;
		  /* 821C2F1Ch */ case   19:  		/* srw R7, R23, R6 */
		/* 821C2F1Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C2F1Ch case   19:*/		return 0x821C2F20;
		  /* 821C2F20h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C2F20h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C2F20h case   20:*/		return 0x821C2F24;
		  /* 821C2F24h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C2F24h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C2F24h case   21:*/		return 0x821C2F28;
		  /* 821C2F28h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C2F28h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C2F28h case   22:*/		return 0x821C2F2C;
		  /* 821C2F2Ch */ case   23:  		/* or R10, R9, R10 */
		/* 821C2F2Ch case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C2F2Ch case   23:*/		return 0x821C2F30;
		  /* 821C2F30h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C2F30h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2F30h case   24:*/		return 0x821C2F34;
	}
	return 0x821C2F34;
} // Block from 821C2ED0h-821C2F34h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C2F34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2F34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2F34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2F34);
		  /* 821C2F34h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C2F34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C2F34h case    0:*/		return 0x821C2F38;
		  /* 821C2F38h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C2F38h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C2F38h case    1:*/		return 0x821C2F3C;
		  /* 821C2F3Ch */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C2F3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C2EA0;  }
		/* 821C2F3Ch case    2:*/		return 0x821C2F40;
		  /* 821C2F40h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C2F40h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C2F40h case    3:*/		return 0x821C2F44;
		  /* 821C2F44h */ case    4:  		/* b -164 */
		/* 821C2F44h case    4:*/		return 0x821C2EA0;
		/* 821C2F44h case    4:*/		return 0x821C2F48;
	}
	return 0x821C2F48;
} // Block from 821C2F34h-821C2F48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C2F48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2F48);
		  /* 821C2F48h */ case    0:  		/* li R6, 1 */
		/* 821C2F48h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C2F48h case    0:*/		return 0x821C2F4C;
		  /* 821C2F4Ch */ case    1:  		/* li R5, 0 */
		/* 821C2F4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C2F4Ch case    1:*/		return 0x821C2F50;
		  /* 821C2F50h */ case    2:  		/* mr R4, R31 */
		/* 821C2F50h case    2:*/		regs.R4 = regs.R31;
		/* 821C2F50h case    2:*/		return 0x821C2F54;
		  /* 821C2F54h */ case    3:  		/* mr R3, R27 */
		/* 821C2F54h case    3:*/		regs.R3 = regs.R27;
		/* 821C2F54h case    3:*/		return 0x821C2F58;
		  /* 821C2F58h */ case    4:  		/* bl 427120 */
		/* 821C2F58h case    4:*/		regs.LR = 0x821C2F5C; return 0x8222B3C8;
		/* 821C2F58h case    4:*/		return 0x821C2F5C;
		  /* 821C2F5Ch */ case    5:  		/* b 2200 */
		/* 821C2F5Ch case    5:*/		return 0x821C37F4;
		/* 821C2F5Ch case    5:*/		return 0x821C2F60;
	}
	return 0x821C2F60;
} // Block from 821C2F48h-821C2F60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C2F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2F60);
		  /* 821C2F60h */ case    0:  		/* cmpwi CR6, R11, 55 */
		/* 821C2F60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000037);
		/* 821C2F60h case    0:*/		return 0x821C2F64;
		  /* 821C2F64h */ case    1:  		/* bc 12, CR6_GT, 516 */
		/* 821C2F64h case    1:*/		if ( regs.CR[6].gt ) { return 0x821C3168;  }
		/* 821C2F64h case    1:*/		return 0x821C2F68;
		  /* 821C2F68h */ case    2:  		/* bc 12, CR6_EQ, 444 */
		/* 821C2F68h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C3124;  }
		/* 821C2F68h case    2:*/		return 0x821C2F6C;
		  /* 821C2F6Ch */ case    3:  		/* cmpwi CR6, R11, 25 */
		/* 821C2F6Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000019);
		/* 821C2F6Ch case    3:*/		return 0x821C2F70;
		  /* 821C2F70h */ case    4:  		/* bc 12, CR6_LT, 1952 */
		/* 821C2F70h case    4:*/		if ( regs.CR[6].lt ) { return 0x821C3710;  }
		/* 821C2F70h case    4:*/		return 0x821C2F74;
		  /* 821C2F74h */ case    5:  		/* cmpwi CR6, R11, 28 */
		/* 821C2F74h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001C);
		/* 821C2F74h case    5:*/		return 0x821C2F78;
		  /* 821C2F78h */ case    6:  		/* bc 4, CR6_GT, 544 */
		/* 821C2F78h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821C3198;  }
		/* 821C2F78h case    6:*/		return 0x821C2F7C;
		  /* 821C2F7Ch */ case    7:  		/* cmpwi CR6, R11, 30 */
		/* 821C2F7Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001E);
		/* 821C2F7Ch case    7:*/		return 0x821C2F80;
		  /* 821C2F80h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 821C2F80h case    8:*/		if ( regs.CR[6].eq ) { return 0x821C3008;  }
		/* 821C2F80h case    8:*/		return 0x821C2F84;
		  /* 821C2F84h */ case    9:  		/* cmpwi CR6, R11, 33 */
		/* 821C2F84h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000021);
		/* 821C2F84h case    9:*/		return 0x821C2F88;
	}
	return 0x821C2F88;
} // Block from 821C2F60h-821C2F88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C2F88h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@21@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2F88);
		  /* 821C2F88h */ case    0:  		/* bc 12, CR6_EQ, 1072 */
		/* 821C2F88h case    0:*/		if ( regs.CR[6].eq ) { return 0x821C33B8;  }
		/* 821C2F88h case    0:*/		return 0x821C2F8C;
		  /* 821C2F8Ch */ case    1:  		/* cmpwi CR6, R11, 35 */
		/* 821C2F8Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000023);
		/* 821C2F8Ch case    1:*/		return 0x821C2F90;
		  /* 821C2F90h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 821C2F90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C3000;  }
		/* 821C2F90h case    2:*/		return 0x821C2F94;
		  /* 821C2F94h */ case    3:  		/* cmpwi CR6, R11, 36 */
		/* 821C2F94h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000024);
		/* 821C2F94h case    3:*/		return 0x821C2F98;
		  /* 821C2F98h */ case    4:  		/* bc 4, CR6_EQ, 1912 */
		/* 821C2F98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821C3710;  }
		/* 821C2F98h case    4:*/		return 0x821C2F9C;
		  /* 821C2F9Ch */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C2F9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C2F9Ch case    5:*/		return 0x821C2FA0;
		  /* 821C2FA0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C2FA0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C2FA0h case    6:*/		return 0x821C2FA4;
		  /* 821C2FA4h */ case    7:  		/* bc 12, CR6_EQ, 1900 */
		/* 821C2FA4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C3710;  }
		/* 821C2FA4h case    7:*/		return 0x821C2FA8;
		  /* 821C2FA8h */ case    8:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C2FA8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C2FA8h case    8:*/		return 0x821C2FAC;
		  /* 821C2FACh */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821C2FACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C2FACh case    9:*/		return 0x821C2FB0;
		  /* 821C2FB0h */ case   10:  		/* bc 12, CR6_EQ, 72 */
		/* 821C2FB0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C2FF8;  }
		/* 821C2FB0h case   10:*/		return 0x821C2FB4;
		  /* 821C2FB4h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821C2FB4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2FB4h case   11:*/		return 0x821C2FB8;
		  /* 821C2FB8h */ case   12:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C2FB8h case   12:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C2FB8h case   12:*/		return 0x821C2FBC;
		  /* 821C2FBCh */ case   13:  		/* rlwinm R8, R10, 24, 29, 30 */
		/* 821C2FBCh case   13:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R10);
		/* 821C2FBCh case   13:*/		return 0x821C2FC0;
		  /* 821C2FC0h */ case   14:  		/* srw R9, R23, R9 */
		/* 821C2FC0h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C2FC0h case   14:*/		return 0x821C2FC4;
		  /* 821C2FC4h */ case   15:  		/* srw R8, R23, R8 */
		/* 821C2FC4h case   15:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821C2FC4h case   15:*/		return 0x821C2FC8;
		  /* 821C2FC8h */ case   16:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821C2FC8h case   16:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821C2FC8h case   16:*/		return 0x821C2FCC;
		  /* 821C2FCCh */ case   17:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C2FCCh case   17:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C2FCCh case   17:*/		return 0x821C2FD0;
		  /* 821C2FD0h */ case   18:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821C2FD0h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821C2FD0h case   18:*/		return 0x821C2FD4;
		  /* 821C2FD4h */ case   19:  		/* srw R9, R23, R9 */
		/* 821C2FD4h case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C2FD4h case   19:*/		return 0x821C2FD8;
		  /* 821C2FD8h */ case   20:  		/* rlwinm R7, R10, 28, 29, 30 */
		/* 821C2FD8h case   20:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R10);
		/* 821C2FD8h case   20:*/		return 0x821C2FDC;
		  /* 821C2FDCh */ case   21:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821C2FDCh case   21:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821C2FDCh case   21:*/		return 0x821C2FE0;
		  /* 821C2FE0h */ case   22:  		/* srw R8, R23, R7 */
		/* 821C2FE0h case   22:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R7);
		/* 821C2FE0h case   22:*/		return 0x821C2FE4;
		  /* 821C2FE4h */ case   23:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821C2FE4h case   23:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821C2FE4h case   23:*/		return 0x821C2FE8;
		  /* 821C2FE8h */ case   24:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C2FE8h case   24:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C2FE8h case   24:*/		return 0x821C2FEC;
		  /* 821C2FECh */ case   25:  		/* rlwinm R9, R8, 5, 0, 26 */
		/* 821C2FECh case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R8);
		/* 821C2FECh case   25:*/		return 0x821C2FF0;
		  /* 821C2FF0h */ case   26:  		/* or R10, R9, R10 */
		/* 821C2FF0h case   26:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C2FF0h case   26:*/		return 0x821C2FF4;
		  /* 821C2FF4h */ case   27:  		/* stw R10, <#[R11]> */
		/* 821C2FF4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C2FF4h case   27:*/		return 0x821C2FF8;
	}
	return 0x821C2FF8;
} // Block from 821C2F88h-821C2FF8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821C2FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C2FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C2FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C2FF8);
		  /* 821C2FF8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C2FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C2FF8h case    0:*/		return 0x821C2FFC;
		  /* 821C2FFCh */ case    1:  		/* b -92 */
		/* 821C2FFCh case    1:*/		return 0x821C2FA0;
		/* 821C2FFCh case    1:*/		return 0x821C3000;
	}
	return 0x821C3000;
} // Block from 821C2FF8h-821C3000h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3000);
		  /* 821C3000h */ case    0:  		/* li R28, 2 */
		/* 821C3000h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 821C3000h case    0:*/		return 0x821C3004;
		  /* 821C3004h */ case    1:  		/* b 952 */
		/* 821C3004h case    1:*/		return 0x821C33BC;
		/* 821C3004h case    1:*/		return 0x821C3008;
	}
	return 0x821C3008;
} // Block from 821C3000h-821C3008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3008);
		  /* 821C3008h */ case    0:  		/* mr R3, R23 */
		/* 821C3008h case    0:*/		regs.R3 = regs.R23;
		/* 821C3008h case    0:*/		return 0x821C300C;
		  /* 821C300Ch */ case    1:  		/* addi R29, R31, 4 */
		/* 821C300Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821C300Ch case    1:*/		return 0x821C3010;
		  /* 821C3010h */ case    2:  		/* lwz R30, <#[R29]> */
		/* 821C3010h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821C3010h case    2:*/		return 0x821C3014;
		  /* 821C3014h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821C3014h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C3014h case    3:*/		return 0x821C3018;
		  /* 821C3018h */ case    4:  		/* bc 12, CR6_EQ, 260 */
		/* 821C3018h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C311C;  }
		/* 821C3018h case    4:*/		return 0x821C301C;
		  /* 821C301Ch */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C301Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C301Ch case    5:*/		return 0x821C3020;
		  /* 821C3020h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C3020h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3020h case    6:*/		return 0x821C3024;
		  /* 821C3024h */ case    7:  		/* bc 12, CR6_EQ, 228 */
		/* 821C3024h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C3108;  }
		/* 821C3024h case    7:*/		return 0x821C3028;
		  /* 821C3028h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821C3028h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C3028h case    8:*/		return 0x821C302C;
		  /* 821C302Ch */ case    9:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821C302Ch case    9:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821C302Ch case    9:*/		return 0x821C3030;
		  /* 821C3030h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821C3030h case   10:*/		if ( regs.CR[0].eq ) { return 0x821C3040;  }
		/* 821C3030h case   10:*/		return 0x821C3034;
		  /* 821C3034h */ case   11:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C3034h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C3034h case   11:*/		return 0x821C3038;
		  /* 821C3038h */ case   12:  		/* mr R11, R20 */
		/* 821C3038h case   12:*/		regs.R11 = regs.R20;
		/* 821C3038h case   12:*/		return 0x821C303C;
		  /* 821C303Ch */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 821C303Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821C3044;  }
		/* 821C303Ch case   13:*/		return 0x821C3040;
	}
	return 0x821C3040;
} // Block from 821C3008h-821C3040h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C3040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3040);
		  /* 821C3040h */ case    0:  		/* mr R11, R23 */
		/* 821C3040h case    0:*/		regs.R11 = regs.R23;
		/* 821C3040h case    0:*/		return 0x821C3044;
	}
	return 0x821C3044;
} // Block from 821C3040h-821C3044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C3044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3044);
		  /* 821C3044h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C3044h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C3044h case    0:*/		return 0x821C3048;
		  /* 821C3048h */ case    1:  		/* bc 12, CR0_EQ, 192 */
		/* 821C3048h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C3108;  }
		/* 821C3048h case    1:*/		return 0x821C304C;
		  /* 821C304Ch */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 821C304Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821C304Ch case    2:*/		return 0x821C3050;
		  /* 821C3050h */ case    3:  		/* bc 4, CR6_EQ, 128 */
		/* 821C3050h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C30D0;  }
		/* 821C3050h case    3:*/		return 0x821C3054;
		  /* 821C3054h */ case    4:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C3054h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3054h case    4:*/		return 0x821C3058;
		  /* 821C3058h */ case    5:  		/* mr R3, R27 */
		/* 821C3058h case    5:*/		regs.R3 = regs.R27;
		/* 821C3058h case    5:*/		return 0x821C305C;
		  /* 821C305Ch */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821C305Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C305Ch case    6:*/		return 0x821C3060;
		  /* 821C3060h */ case    7:  		/* lwz R4, <#[R11 + 12]> */
		/* 821C3060h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3060h case    7:*/		return 0x821C3064;
		  /* 821C3064h */ case    8:  		/* rlwinm R11, R10, 7, 29, 31 */
		/* 821C3064h case    8:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R10);
		/* 821C3064h case    8:*/		return 0x821C3068;
		  /* 821C3068h */ case    9:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821C3068h case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821C3068h case    9:*/		return 0x821C306C;
		  /* 821C306Ch */ case   10:  		/* addi R11, R11, -1 */
		/* 821C306Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821C306Ch case   10:*/		return 0x821C3070;
		  /* 821C3070h */ case   11:  		/* rlwinm R28, R10, 0, 27, 31 */
		/* 821C3070h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R28,regs.R10);
		/* 821C3070h case   11:*/		return 0x821C3074;
		  /* 821C3074h */ case   12:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821C3074h case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821C3074h case   12:*/		return 0x821C3078;
	}
	return 0x821C3078;
} // Block from 821C3044h-821C3078h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C3078h
// Function '?MakeInstr_V_CNDGE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@21@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3078);
		  /* 821C3078h */ case    0:  		/* srw R11, R9, R11 */
		/* 821C3078h case    0:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C3078h case    0:*/		return 0x821C307C;
		  /* 821C307Ch */ case    1:  		/* rlwinm R18, R11, 0, 30, 31 */
		/* 821C307Ch case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R18,regs.R11);
		/* 821C307Ch case    1:*/		return 0x821C3080;
		  /* 821C3080h */ case    2:  		/* bl -307328 */
		/* 821C3080h case    2:*/		regs.LR = 0x821C3084; return 0x82178000;
		/* 821C3080h case    2:*/		return 0x821C3084;
		  /* 821C3084h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821C3084h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3084h case    3:*/		return 0x821C3088;
		  /* 821C3088h */ case    4:  		/* mr R4, R28 */
		/* 821C3088h case    4:*/		regs.R4 = regs.R28;
		/* 821C3088h case    4:*/		return 0x821C308C;
		  /* 821C308Ch */ case    5:  		/* mr R17, R3 */
		/* 821C308Ch case    5:*/		regs.R17 = regs.R3;
		/* 821C308Ch case    5:*/		return 0x821C3090;
		  /* 821C3090h */ case    6:  		/* rlwimi R11, R20, 26, 4, 6 */
		/* 821C3090h case    6:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R20);
		/* 821C3090h case    6:*/		return 0x821C3094;
		  /* 821C3094h */ case    7:  		/* stw R11, <#[R3]> */
		/* 821C3094h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3094h case    7:*/		return 0x821C3098;
		  /* 821C3098h */ case    8:  		/* bl -308696 */
		/* 821C3098h case    8:*/		regs.LR = 0x821C309C; return 0x82177AC0;
		/* 821C3098h case    8:*/		return 0x821C309C;
		  /* 821C309Ch */ case    9:  		/* li R11, 224 */
		/* 821C309Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0xE0);
		/* 821C309Ch case    9:*/		return 0x821C30A0;
		  /* 821C30A0h */ case   10:  		/* lwz R10, <#[R17]> */
		/* 821C30A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 821C30A0h case   10:*/		return 0x821C30A4;
		  /* 821C30A4h */ case   11:  		/* mr R5, R31 */
		/* 821C30A4h case   11:*/		regs.R5 = regs.R31;
		/* 821C30A4h case   11:*/		return 0x821C30A8;
		  /* 821C30A8h */ case   12:  		/* rlwimi R11, R18, 2, 27, 29 */
		/* 821C30A8h case   12:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R11,regs.R18);
		/* 821C30A8h case   12:*/		return 0x821C30AC;
		  /* 821C30ACh */ case   13:  		/* rlwinm R10, R10, 0, 27, 21 */
		/* 821C30ACh case   13:*/		cpu::op::rlwinm<0,0,27,21>(regs,&regs.R10,regs.R10);
		/* 821C30ACh case   13:*/		return 0x821C30B0;
		  /* 821C30B0h */ case   14:  		/* or R11, R11, R18 */
		/* 821C30B0h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 821C30B0h case   14:*/		return 0x821C30B4;
		  /* 821C30B4h */ case   15:  		/* li R4, 0 */
		/* 821C30B4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C30B4h case   15:*/		return 0x821C30B8;
		  /* 821C30B8h */ case   16:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821C30B8h case   16:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821C30B8h case   16:*/		return 0x821C30BC;
		  /* 821C30BCh */ case   17:  		/* mr R3, R27 */
		/* 821C30BCh case   17:*/		regs.R3 = regs.R27;
		/* 821C30BCh case   17:*/		return 0x821C30C0;
		  /* 821C30C0h */ case   18:  		/* or R11, R11, R10 */
		/* 821C30C0h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C30C0h case   18:*/		return 0x821C30C4;
		  /* 821C30C4h */ case   19:  		/* mr R6, R17 */
		/* 821C30C4h case   19:*/		regs.R6 = regs.R17;
		/* 821C30C4h case   19:*/		return 0x821C30C8;
		  /* 821C30C8h */ case   20:  		/* stw R11, <#[R17]> */
		/* 821C30C8h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C30C8h case   20:*/		return 0x821C30CC;
		  /* 821C30CCh */ case   21:  		/* bl -6020 */
		/* 821C30CCh case   21:*/		regs.LR = 0x821C30D0; return 0x821C1948;
		/* 821C30CCh case   21:*/		return 0x821C30D0;
	}
	return 0x821C30D0;
} // Block from 821C3078h-821C30D0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C30D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C30D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C30D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C30D0);
		  /* 821C30D0h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821C30D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C30D0h case    0:*/		return 0x821C30D4;
		  /* 821C30D4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C30D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C30D4h case    1:*/		return 0x821C30D8;
		  /* 821C30D8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C30D8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C30D8h case    2:*/		return 0x821C30DC;
		  /* 821C30DCh */ case    3:  		/* b 12 */
		/* 821C30DCh case    3:*/		return 0x821C30E8;
		/* 821C30DCh case    3:*/		return 0x821C30E0;
		  /* 821C30E0h */ case    4:  		/* addi R11, R10, 8 */
		/* 821C30E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C30E0h case    4:*/		return 0x821C30E4;
		  /* 821C30E4h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C30E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C30E4h case    5:*/		return 0x821C30E8;
	}
	return 0x821C30E8;
} // Block from 821C30D0h-821C30E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C30E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C30E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C30E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C30E8);
		  /* 821C30E8h */ case    0:  		/* cmplw CR6, R10, R30 */
		/* 821C30E8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821C30E8h case    0:*/		return 0x821C30EC;
		  /* 821C30ECh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C30ECh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C30E0;  }
		/* 821C30ECh case    1:*/		return 0x821C30F0;
		  /* 821C30F0h */ case    2:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C30F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C30F0h case    2:*/		return 0x821C30F4;
		  /* 821C30F4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C30F4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C30F4h case    3:*/		return 0x821C30F8;
		  /* 821C30F8h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C30F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C30F8h case    4:*/		return 0x821C30FC;
		  /* 821C30FCh */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 821C30FCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C30FCh case    5:*/		return 0x821C3100;
		  /* 821C3100h */ case    6:  		/* stw R30, <#[R3 + 4]> */
		/* 821C3100h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 821C3100h case    6:*/		return 0x821C3104;
		  /* 821C3104h */ case    7:  		/* stw R3, <#[R30 + 12]> */
		/* 821C3104h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C3104h case    7:*/		return 0x821C3108;
	}
	return 0x821C3108;
} // Block from 821C30E8h-821C3108h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C3108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3108);
		  /* 821C3108h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821C3108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C3108h case    0:*/		return 0x821C310C;
		  /* 821C310Ch */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821C310Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821C310Ch case    1:*/		return 0x821C3110;
		  /* 821C3110h */ case    2:  		/* bc 4, CR6_EQ, -256 */
		/* 821C3110h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C3010;  }
		/* 821C3110h case    2:*/		return 0x821C3114;
		  /* 821C3114h */ case    3:  		/* addi R29, R30, 8 */
		/* 821C3114h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821C3114h case    3:*/		return 0x821C3118;
		  /* 821C3118h */ case    4:  		/* b -264 */
		/* 821C3118h case    4:*/		return 0x821C3010;
		/* 821C3118h case    4:*/		return 0x821C311C;
	}
	return 0x821C311C;
} // Block from 821C3108h-821C311Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C311Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C311C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C311C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C311C);
		  /* 821C311Ch */ case    0:  		/* li R10, 3 */
		/* 821C311Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821C311Ch case    0:*/		return 0x821C3120;
		  /* 821C3120h */ case    1:  		/* b 1492 */
		/* 821C3120h case    1:*/		return 0x821C36F4;
		/* 821C3120h case    1:*/		return 0x821C3124;
	}
	return 0x821C3124;
} // Block from 821C311Ch-821C3124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3124);
		  /* 821C3124h */ case    0:  		/* lwz R10, <#[R31 + 4]> */
		/* 821C3124h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821C3124h case    0:*/		return 0x821C3128;
		  /* 821C3128h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821C3128h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C3128h case    1:*/		return 0x821C312C;
		  /* 821C312Ch */ case    2:  		/* bc 12, CR6_EQ, 1508 */
		/* 821C312Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821C3710;  }
		/* 821C312Ch case    2:*/		return 0x821C3130;
		  /* 821C3130h */ case    3:  		/* lwz R11, <#[R10 + 16]> */
		/* 821C3130h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821C3130h case    3:*/		return 0x821C3134;
		  /* 821C3134h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C3134h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3134h case    4:*/		return 0x821C3138;
		  /* 821C3138h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821C3138h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C3160;  }
		/* 821C3138h case    5:*/		return 0x821C313C;
		  /* 821C313Ch */ case    6:  		/* lwz R11, <#[R10]> */
		/* 821C313Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C313Ch case    6:*/		return 0x821C3140;
		  /* 821C3140h */ case    7:  		/* rlwinm. R9, R11, 0, 1, 1 */
		/* 821C3140h case    7:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R11);
		/* 821C3140h case    7:*/		return 0x821C3144;
		  /* 821C3144h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821C3144h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C3154;  }
		/* 821C3144h case    8:*/		return 0x821C3148;
		  /* 821C3148h */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C3148h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C3148h case    9:*/		return 0x821C314C;
		  /* 821C314Ch */ case   10:  		/* mr R11, R20 */
		/* 821C314Ch case   10:*/		regs.R11 = regs.R20;
		/* 821C314Ch case   10:*/		return 0x821C3150;
		  /* 821C3150h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 821C3150h case   11:*/		if ( regs.CR[0].eq ) { return 0x821C3158;  }
		/* 821C3150h case   11:*/		return 0x821C3154;
	}
	return 0x821C3154;
} // Block from 821C3124h-821C3154h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C3154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3154);
		  /* 821C3154h */ case    0:  		/* mr R11, R23 */
		/* 821C3154h case    0:*/		regs.R11 = regs.R23;
		/* 821C3154h case    0:*/		return 0x821C3158;
	}
	return 0x821C3158;
} // Block from 821C3154h-821C3158h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C3158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3158);
		  /* 821C3158h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C3158h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C3158h case    0:*/		return 0x821C315C;
		  /* 821C315Ch */ case    1:  		/* bc 12, CR0_EQ, 1064 */
		/* 821C315Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821C3584;  }
		/* 821C315Ch case    1:*/		return 0x821C3160;
	}
	return 0x821C3160;
} // Block from 821C3158h-821C3160h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3160);
		  /* 821C3160h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C3160h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C3160h case    0:*/		return 0x821C3164;
		  /* 821C3164h */ case    1:  		/* b -60 */
		/* 821C3164h case    1:*/		return 0x821C3128;
		/* 821C3164h case    1:*/		return 0x821C3168;
	}
	return 0x821C3168;
} // Block from 821C3160h-821C3168h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3168h
// Function '?MakeInstr_V_CNDGT@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@21@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3168);
		  /* 821C3168h */ case    0:  		/* cmpwi CR6, R11, 56 */
		/* 821C3168h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000038);
		/* 821C3168h case    0:*/		return 0x821C316C;
		  /* 821C316Ch */ case    1:  		/* bc 12, CR6_EQ, 1048 */
		/* 821C316Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821C3584;  }
		/* 821C316Ch case    1:*/		return 0x821C3170;
		  /* 821C3170h */ case    2:  		/* cmpwi CR6, R11, 58 */
		/* 821C3170h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003A);
		/* 821C3170h case    2:*/		return 0x821C3174;
		  /* 821C3174h */ case    3:  		/* bc 12, CR6_EQ, 580 */
		/* 821C3174h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C33B8;  }
		/* 821C3174h case    3:*/		return 0x821C3178;
		  /* 821C3178h */ case    4:  		/* cmpwi CR6, R11, 66 */
		/* 821C3178h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000042);
		/* 821C3178h case    4:*/		return 0x821C317C;
		  /* 821C317Ch */ case    5:  		/* bc 4, CR6_GT, 1428 */
		/* 821C317Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x821C3710;  }
		/* 821C317Ch case    5:*/		return 0x821C3180;
		  /* 821C3180h */ case    6:  		/* cmpwi CR6, R11, 71 */
		/* 821C3180h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000047);
		/* 821C3180h case    6:*/		return 0x821C3184;
		  /* 821C3184h */ case    7:  		/* bc 4, CR6_GT, 20 */
		/* 821C3184h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821C3198;  }
		/* 821C3184h case    7:*/		return 0x821C3188;
		  /* 821C3188h */ case    8:  		/* cmpwi CR6, R11, 82 */
		/* 821C3188h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000052);
		/* 821C3188h case    8:*/		return 0x821C318C;
		  /* 821C318Ch */ case    9:  		/* bc 4, CR6_EQ, 1412 */
		/* 821C318Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C3710;  }
		/* 821C318Ch case    9:*/		return 0x821C3190;
		  /* 821C3190h */ case   10:  		/* li R28, 3 */
		/* 821C3190h case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x3);
		/* 821C3190h case   10:*/		return 0x821C3194;
		  /* 821C3194h */ case   11:  		/* b 552 */
		/* 821C3194h case   11:*/		return 0x821C33BC;
		/* 821C3194h case   11:*/		return 0x821C3198;
	}
	return 0x821C3198;
} // Block from 821C3168h-821C3198h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C3198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3198);
		  /* 821C3198h */ case    0:  		/* mr R30, R23 */
		/* 821C3198h case    0:*/		regs.R30 = regs.R23;
		/* 821C3198h case    0:*/		return 0x821C319C;
		  /* 821C319Ch */ case    1:  		/* addi R28, R31, 4 */
		/* 821C319Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x4);
		/* 821C319Ch case    1:*/		return 0x821C31A0;
		  /* 821C31A0h */ case    2:  		/* lwz R29, <#[R28]> */
		/* 821C31A0h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821C31A0h case    2:*/		return 0x821C31A4;
		  /* 821C31A4h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821C31A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C31A4h case    3:*/		return 0x821C31A8;
		  /* 821C31A8h */ case    4:  		/* bc 12, CR6_EQ, 1384 */
		/* 821C31A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C3710;  }
		/* 821C31A8h case    4:*/		return 0x821C31AC;
		  /* 821C31ACh */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C31ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C31ACh case    5:*/		return 0x821C31B0;
		  /* 821C31B0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C31B0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C31B0h case    6:*/		return 0x821C31B4;
		  /* 821C31B4h */ case    7:  		/* bc 12, CR6_EQ, 496 */
		/* 821C31B4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C33A4;  }
		/* 821C31B4h case    7:*/		return 0x821C31B8;
		  /* 821C31B8h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821C31B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C31B8h case    8:*/		return 0x821C31BC;
		  /* 821C31BCh */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C31BCh case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C31BCh case    9:*/		return 0x821C31C0;
		  /* 821C31C0h */ case   10:  		/* bc 12, CR0_EQ, 484 */
		/* 821C31C0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821C33A4;  }
		/* 821C31C0h case   10:*/		return 0x821C31C4;
		  /* 821C31C4h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 821C31C4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C31C4h case   11:*/		return 0x821C31C8;
		  /* 821C31C8h */ case   12:  		/* bc 4, CR6_EQ, 336 */
		/* 821C31C8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821C3318;  }
		/* 821C31C8h case   12:*/		return 0x821C31CC;
		  /* 821C31CCh */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C31CCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C31CCh case   13:*/		return 0x821C31D0;
		  /* 821C31D0h */ case   14:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C31D0h case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C31D0h case   14:*/		return 0x821C31D4;
		  /* 821C31D4h */ case   15:  		/* cmplwi CR6, R11, 71 */
		/* 821C31D4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000047);
		/* 821C31D4h case   15:*/		return 0x821C31D8;
		  /* 821C31D8h */ case   16:  		/* bc 4, CR6_EQ, 84 */
		/* 821C31D8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C322C;  }
		/* 821C31D8h case   16:*/		return 0x821C31DC;
		  /* 821C31DCh */ case   17:  		/* li R4, 1 */
		/* 821C31DCh case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C31DCh case   17:*/		return 0x821C31E0;
		  /* 821C31E0h */ case   18:  		/* fmr FR4, FR31 */
		/* 821C31E0h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C31E0h case   18:*/		return 0x821C31E4;
		  /* 821C31E4h */ case   19:  		/* mr R3, R27 */
		/* 821C31E4h case   19:*/		regs.R3 = regs.R27;
		/* 821C31E4h case   19:*/		return 0x821C31E8;
		  /* 821C31E8h */ case   20:  		/* fmr FR3, FR31 */
		/* 821C31E8h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C31E8h case   20:*/		return 0x821C31EC;
		  /* 821C31ECh */ case   21:  		/* fmr FR2, FR31 */
		/* 821C31ECh case   21:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C31ECh case   21:*/		return 0x821C31F0;
		  /* 821C31F0h */ case   22:  		/* fmr FR1, FR30 */
		/* 821C31F0h case   22:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821C31F0h case   22:*/		return 0x821C31F4;
		  /* 821C31F4h */ case   23:  		/* bl 424292 */
		/* 821C31F4h case   23:*/		regs.LR = 0x821C31F8; return 0x8222AB58;
		/* 821C31F4h case   23:*/		return 0x821C31F8;
		  /* 821C31F8h */ case   24:  		/* mr R4, R3 */
		/* 821C31F8h case   24:*/		regs.R4 = regs.R3;
		/* 821C31F8h case   24:*/		return 0x821C31FC;
		  /* 821C31FCh */ case   25:  		/* lwz R30, <#[R31 + 44]> */
		/* 821C31FCh case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C31FCh case   25:*/		return 0x821C3200;
		  /* 821C3200h */ case   26:  		/* li R5, 0 */
		/* 821C3200h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3200h case   26:*/		return 0x821C3204;
		  /* 821C3204h */ case   27:  		/* mr R3, R27 */
		/* 821C3204h case   27:*/		regs.R3 = regs.R27;
		/* 821C3204h case   27:*/		return 0x821C3208;
		  /* 821C3208h */ case   28:  		/* bl -307448 */
		/* 821C3208h case   28:*/		regs.LR = 0x821C320C; return 0x82178110;
		/* 821C3208h case   28:*/		return 0x821C320C;
		  /* 821C320Ch */ case   29:  		/* mr R7, R3 */
		/* 821C320Ch case   29:*/		regs.R7 = regs.R3;
		/* 821C320Ch case   29:*/		return 0x821C3210;
		  /* 821C3210h */ case   30:  		/* mr R6, R30 */
		/* 821C3210h case   30:*/		regs.R6 = regs.R30;
		/* 821C3210h case   30:*/		return 0x821C3214;
		  /* 821C3214h */ case   31:  		/* mr R5, R31 */
		/* 821C3214h case   31:*/		regs.R5 = regs.R31;
		/* 821C3214h case   31:*/		return 0x821C3218;
		  /* 821C3218h */ case   32:  		/* li R4, 1 */
		/* 821C3218h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C3218h case   32:*/		return 0x821C321C;
		  /* 821C321Ch */ case   33:  		/* mr R3, R27 */
		/* 821C321Ch case   33:*/		regs.R3 = regs.R27;
		/* 821C321Ch case   33:*/		return 0x821C3220;
		  /* 821C3220h */ case   34:  		/* bl -152008 */
		/* 821C3220h case   34:*/		regs.LR = 0x821C3224; return 0x8219E058;
		/* 821C3220h case   34:*/		return 0x821C3224;
		  /* 821C3224h */ case   35:  		/* mr R30, R3 */
		/* 821C3224h case   35:*/		regs.R30 = regs.R3;
		/* 821C3224h case   35:*/		return 0x821C3228;
		  /* 821C3228h */ case   36:  		/* b 240 */
		/* 821C3228h case   36:*/		return 0x821C3318;
		/* 821C3228h case   36:*/		return 0x821C322C;
	}
	return 0x821C322C;
} // Block from 821C3198h-821C322Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 821C322Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C322C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C322C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C322C);
		  /* 821C322Ch */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821C322Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821C322Ch case    0:*/		return 0x821C3230;
		  /* 821C3230h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 821C3230h case    1:*/		if ( regs.CR[6].lt ) { return 0x821C3240;  }
		/* 821C3230h case    1:*/		return 0x821C3234;
		  /* 821C3234h */ case    2:  		/* cmplwi CR6, R11, 31 */
		/* 821C3234h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001F);
		/* 821C3234h case    2:*/		return 0x821C3238;
		  /* 821C3238h */ case    3:  		/* mr R10, R20 */
		/* 821C3238h case    3:*/		regs.R10 = regs.R20;
		/* 821C3238h case    3:*/		return 0x821C323C;
		  /* 821C323Ch */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 821C323Ch case    4:*/		if ( !regs.CR[6].gt ) { return 0x821C3244;  }
		/* 821C323Ch case    4:*/		return 0x821C3240;
	}
	return 0x821C3240;
} // Block from 821C322Ch-821C3240h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C3240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3240);
		  /* 821C3240h */ case    0:  		/* mr R10, R23 */
		/* 821C3240h case    0:*/		regs.R10 = regs.R23;
		/* 821C3240h case    0:*/		return 0x821C3244;
	}
	return 0x821C3244;
} // Block from 821C3240h-821C3244h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C3244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3244);
		  /* 821C3244h */ case    0:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C3244h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C3244h case    0:*/		return 0x821C3248;
		  /* 821C3248h */ case    1:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C3248h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C3248h case    1:*/		return 0x821C324C;
		  /* 821C324Ch */ case    2:  		/* li R8, 4 */
		/* 821C324Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C324Ch case    2:*/		return 0x821C3250;
		  /* 821C3250h */ case    3:  		/* li R5, 0 */
		/* 821C3250h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3250h case    3:*/		return 0x821C3254;
		  /* 821C3254h */ case    4:  		/* mr R3, R27 */
		/* 821C3254h case    4:*/		regs.R3 = regs.R27;
		/* 821C3254h case    4:*/		return 0x821C3258;
	}
	return 0x821C3258;
} // Block from 821C3244h-821C3258h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C3258h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@1PAVDependency@2@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3258);
		  /* 821C3258h */ case    0:  		/* bc 12, CR0_EQ, 108 */
		/* 821C3258h case    0:*/		if ( regs.CR[0].eq ) { return 0x821C32C4;  }
		/* 821C3258h case    0:*/		return 0x821C325C;
		  /* 821C325Ch */ case    1:  		/* li R7, 2 */
		/* 821C325Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C325Ch case    1:*/		return 0x821C3260;
		  /* 821C3260h */ case    2:  		/* addi R6, R11, -20 */
		/* 821C3260h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFEC);
		/* 821C3260h case    2:*/		return 0x821C3264;
		  /* 821C3264h */ case    3:  		/* bl 399156 */
		/* 821C3264h case    3:*/		regs.LR = 0x821C3268; return 0x82224998;
		/* 821C3264h case    3:*/		return 0x821C3268;
		  /* 821C3268h */ case    4:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C3268h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C3268h case    4:*/		return 0x821C326C;
		  /* 821C326Ch */ case    5:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C326Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C326Ch case    5:*/		return 0x821C3270;
		  /* 821C3270h */ case    6:  		/* addi R11, R11, 36 */
		/* 821C3270h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C3270h case    6:*/		return 0x821C3274;
		  /* 821C3274h */ case    7:  		/* addi R10, R10, 36 */
		/* 821C3274h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C3274h case    7:*/		return 0x821C3278;
		  /* 821C3278h */ case    8:  		/* addi R9, R11, 4 */
		/* 821C3278h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821C3278h case    8:*/		return 0x821C327C;
		  /* 821C327Ch */ case    9:  		/* addi R8, R10, 4 */
		/* 821C327Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821C327Ch case    9:*/		return 0x821C3280;
		  /* 821C3280h */ case   10:  		/* addi R6, R10, -36 */
		/* 821C3280h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C3280h case   10:*/		return 0x821C3284;
		  /* 821C3284h */ case   11:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C3284h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C3284h case   11:*/		return 0x821C3288;
		  /* 821C3288h */ case   12:  		/* mr R30, R3 */
		/* 821C3288h case   12:*/		regs.R30 = regs.R3;
		/* 821C3288h case   12:*/		return 0x821C328C;
		  /* 821C328Ch */ case   13:  		/* stw R7, <#[R10 + 4]> */
		/* 821C328Ch case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821C328Ch case   13:*/		return 0x821C3290;
		  /* 821C3290h */ case   14:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C3290h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C3290h case   14:*/		return 0x821C3294;
		  /* 821C3294h */ case   15:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C3294h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C3294h case   15:*/		return 0x821C3298;
		  /* 821C3298h */ case   16:  		/* stw R8, <#[R7 + 36]> */
		/* 821C3298h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821C3298h case   16:*/		return 0x821C329C;
		  /* 821C329Ch */ case   17:  		/* stw R9, <#[R10]> */
		/* 821C329Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C329Ch case   17:*/		return 0x821C32A0;
		  /* 821C32A0h */ case   18:  		/* stw R6, <#[R11 + 4]> */
		/* 821C32A0h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C32A0h case   18:*/		return 0x821C32A4;
		  /* 821C32A4h */ case   19:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C32A4h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C32A4h case   19:*/		return 0x821C32A8;
		  /* 821C32A8h */ case   20:  		/* bl -307424 */
		/* 821C32A8h case   20:*/		regs.LR = 0x821C32AC; return 0x821781C8;
		/* 821C32A8h case   20:*/		return 0x821C32AC;
		  /* 821C32ACh */ case   21:  		/* stw R3, <#[R30 + 44]> */
		/* 821C32ACh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C32ACh case   21:*/		return 0x821C32B0;
		  /* 821C32B0h */ case   22:  		/* mr R3, R30 */
		/* 821C32B0h case   22:*/		regs.R3 = regs.R30;
		/* 821C32B0h case   22:*/		return 0x821C32B4;
		  /* 821C32B4h */ case   23:  		/* lwz R4, <#[R31 + 48]> */
		/* 821C32B4h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821C32B4h case   23:*/		return 0x821C32B8;
		  /* 821C32B8h */ case   24:  		/* bl -307440 */
		/* 821C32B8h case   24:*/		regs.LR = 0x821C32BC; return 0x821781C8;
		/* 821C32B8h case   24:*/		return 0x821C32BC;
		  /* 821C32BCh */ case   25:  		/* stw R3, <#[R30 + 48]> */
		/* 821C32BCh case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C32BCh case   25:*/		return 0x821C32C0;
		  /* 821C32C0h */ case   26:  		/* b 88 */
		/* 821C32C0h case   26:*/		return 0x821C3318;
		/* 821C32C0h case   26:*/		return 0x821C32C4;
	}
	return 0x821C32C4;
} // Block from 821C3258h-821C32C4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C32C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C32C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C32C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C32C4);
		  /* 821C32C4h */ case    0:  		/* li R7, 1 */
		/* 821C32C4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C32C4h case    0:*/		return 0x821C32C8;
		  /* 821C32C8h */ case    1:  		/* addi R6, R11, -28 */
		/* 821C32C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFE4);
		/* 821C32C8h case    1:*/		return 0x821C32CC;
		  /* 821C32CCh */ case    2:  		/* bl 399052 */
		/* 821C32CCh case    2:*/		regs.LR = 0x821C32D0; return 0x82224998;
		/* 821C32CCh case    2:*/		return 0x821C32D0;
		  /* 821C32D0h */ case    3:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C32D0h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C32D0h case    3:*/		return 0x821C32D4;
		  /* 821C32D4h */ case    4:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C32D4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C32D4h case    4:*/		return 0x821C32D8;
		  /* 821C32D8h */ case    5:  		/* addi R11, R11, 36 */
		/* 821C32D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C32D8h case    5:*/		return 0x821C32DC;
		  /* 821C32DCh */ case    6:  		/* addi R10, R10, 36 */
		/* 821C32DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C32DCh case    6:*/		return 0x821C32E0;
		  /* 821C32E0h */ case    7:  		/* addi R9, R11, 4 */
		/* 821C32E0h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821C32E0h case    7:*/		return 0x821C32E4;
		  /* 821C32E4h */ case    8:  		/* addi R8, R10, 4 */
		/* 821C32E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821C32E4h case    8:*/		return 0x821C32E8;
		  /* 821C32E8h */ case    9:  		/* addi R6, R10, -36 */
		/* 821C32E8h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C32E8h case    9:*/		return 0x821C32EC;
		  /* 821C32ECh */ case   10:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C32ECh case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C32ECh case   10:*/		return 0x821C32F0;
		  /* 821C32F0h */ case   11:  		/* mr R30, R3 */
		/* 821C32F0h case   11:*/		regs.R30 = regs.R3;
		/* 821C32F0h case   11:*/		return 0x821C32F4;
		  /* 821C32F4h */ case   12:  		/* stw R7, <#[R10 + 4]> */
		/* 821C32F4h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821C32F4h case   12:*/		return 0x821C32F8;
		  /* 821C32F8h */ case   13:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C32F8h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C32F8h case   13:*/		return 0x821C32FC;
		  /* 821C32FCh */ case   14:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C32FCh case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C32FCh case   14:*/		return 0x821C3300;
		  /* 821C3300h */ case   15:  		/* stw R8, <#[R7 + 36]> */
		/* 821C3300h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821C3300h case   15:*/		return 0x821C3304;
		  /* 821C3304h */ case   16:  		/* stw R9, <#[R10]> */
		/* 821C3304h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3304h case   16:*/		return 0x821C3308;
		  /* 821C3308h */ case   17:  		/* stw R6, <#[R11 + 4]> */
		/* 821C3308h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C3308h case   17:*/		return 0x821C330C;
		  /* 821C330Ch */ case   18:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C330Ch case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C330Ch case   18:*/		return 0x821C3310;
		  /* 821C3310h */ case   19:  		/* bl -307528 */
		/* 821C3310h case   19:*/		regs.LR = 0x821C3314; return 0x821781C8;
		/* 821C3310h case   19:*/		return 0x821C3314;
		  /* 821C3314h */ case   20:  		/* stw R3, <#[R30 + 44]> */
		/* 821C3314h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C3314h case   20:*/		return 0x821C3318;
	}
	return 0x821C3318;
} // Block from 821C32C4h-821C3318h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C3318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3318);
		  /* 821C3318h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C3318h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3318h case    0:*/		return 0x821C331C;
		  /* 821C331Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C331Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C331Ch case    1:*/		return 0x821C3320;
		  /* 821C3320h */ case    2:  		/* cmplwi CR6, R11, 9088 */
		/* 821C3320h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002380);
		/* 821C3320h case    2:*/		return 0x821C3324;
		  /* 821C3324h */ case    3:  		/* bc 4, CR6_EQ, 72 */
		/* 821C3324h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C336C;  }
		/* 821C3324h case    3:*/		return 0x821C3328;
		  /* 821C3328h */ case    4:  		/* lwz R11, <#[R29]> */
		/* 821C3328h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C3328h case    4:*/		return 0x821C332C;
		  /* 821C332Ch */ case    5:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821C332Ch case    5:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821C332Ch case    5:*/		return 0x821C3330;
		  /* 821C3330h */ case    6:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821C3330h case    6:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821C3330h case    6:*/		return 0x821C3334;
		  /* 821C3334h */ case    7:  		/* srw R10, R23, R10 */
		/* 821C3334h case    7:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 821C3334h case    7:*/		return 0x821C3338;
	}
	return 0x821C3338;
} // Block from 821C3318h-821C3338h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C3338h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@PAVDependency@2@11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3338);
		  /* 821C3338h */ case    0:  		/* srw R9, R23, R9 */
		/* 821C3338h case    0:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3338h case    0:*/		return 0x821C333C;
		  /* 821C333Ch */ case    1:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821C333Ch case    1:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821C333Ch case    1:*/		return 0x821C3340;
		  /* 821C3340h */ case    2:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821C3340h case    2:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821C3340h case    2:*/		return 0x821C3344;
		  /* 821C3344h */ case    3:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821C3344h case    3:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821C3344h case    3:*/		return 0x821C3348;
		  /* 821C3348h */ case    4:  		/* srw R10, R23, R10 */
		/* 821C3348h case    4:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R23,regs.R10);
		/* 821C3348h case    4:*/		return 0x821C334C;
		  /* 821C334Ch */ case    5:  		/* rlwinm R8, R11, 28, 29, 30 */
		/* 821C334Ch case    5:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R11);
		/* 821C334Ch case    5:*/		return 0x821C3350;
		  /* 821C3350h */ case    6:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821C3350h case    6:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821C3350h case    6:*/		return 0x821C3354;
		  /* 821C3354h */ case    7:  		/* srw R9, R23, R8 */
		/* 821C3354h case    7:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R8);
		/* 821C3354h case    7:*/		return 0x821C3358;
		  /* 821C3358h */ case    8:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821C3358h case    8:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821C3358h case    8:*/		return 0x821C335C;
		  /* 821C335Ch */ case    9:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C335Ch case    9:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C335Ch case    9:*/		return 0x821C3360;
		  /* 821C3360h */ case   10:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821C3360h case   10:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821C3360h case   10:*/		return 0x821C3364;
		  /* 821C3364h */ case   11:  		/* or R11, R10, R11 */
		/* 821C3364h case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C3364h case   11:*/		return 0x821C3368;
		  /* 821C3368h */ case   12:  		/* stw R11, <#[R29]> */
		/* 821C3368h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C3368h case   12:*/		return 0x821C336C;
	}
	return 0x821C336C;
} // Block from 821C3338h-821C336Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C336Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C336C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C336C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C336C);
		  /* 821C336Ch */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821C336Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C336Ch case    0:*/		return 0x821C3370;
		  /* 821C3370h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C3370h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C3370h case    1:*/		return 0x821C3374;
		  /* 821C3374h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C3374h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3374h case    2:*/		return 0x821C3378;
		  /* 821C3378h */ case    3:  		/* b 12 */
		/* 821C3378h case    3:*/		return 0x821C3384;
		/* 821C3378h case    3:*/		return 0x821C337C;
		  /* 821C337Ch */ case    4:  		/* addi R11, R10, 8 */
		/* 821C337Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C337Ch case    4:*/		return 0x821C3380;
		  /* 821C3380h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C3380h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C3380h case    5:*/		return 0x821C3384;
	}
	return 0x821C3384;
} // Block from 821C336Ch-821C3384h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C3384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3384);
		  /* 821C3384h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821C3384h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821C3384h case    0:*/		return 0x821C3388;
		  /* 821C3388h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3388h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C337C;  }
		/* 821C3388h case    1:*/		return 0x821C338C;
		  /* 821C338Ch */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821C338Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821C338Ch case    2:*/		return 0x821C3390;
		  /* 821C3390h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C3390h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3390h case    3:*/		return 0x821C3394;
		  /* 821C3394h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C3394h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3394h case    4:*/		return 0x821C3398;
		  /* 821C3398h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821C3398h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C3398h case    5:*/		return 0x821C339C;
		  /* 821C339Ch */ case    6:  		/* stw R29, <#[R30 + 4]> */
		/* 821C339Ch case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821C339Ch case    6:*/		return 0x821C33A0;
		  /* 821C33A0h */ case    7:  		/* stw R30, <#[R29 + 12]> */
		/* 821C33A0h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C33A0h case    7:*/		return 0x821C33A4;
	}
	return 0x821C33A4;
} // Block from 821C3384h-821C33A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C33A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33A4);
		  /* 821C33A4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821C33A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C33A4h case    0:*/		return 0x821C33A8;
		  /* 821C33A8h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821C33A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821C33A8h case    1:*/		return 0x821C33AC;
		  /* 821C33ACh */ case    2:  		/* bc 4, CR6_EQ, -524 */
		/* 821C33ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C31A0;  }
		/* 821C33ACh case    2:*/		return 0x821C33B0;
		  /* 821C33B0h */ case    3:  		/* addi R28, R29, 8 */
		/* 821C33B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x8);
		/* 821C33B0h case    3:*/		return 0x821C33B4;
		  /* 821C33B4h */ case    4:  		/* b -532 */
		/* 821C33B4h case    4:*/		return 0x821C31A0;
		/* 821C33B4h case    4:*/		return 0x821C33B8;
	}
	return 0x821C33B8;
} // Block from 821C33A4h-821C33B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C33B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33B8);
		  /* 821C33B8h */ case    0:  		/* mr R28, R20 */
		/* 821C33B8h case    0:*/		regs.R28 = regs.R20;
		/* 821C33B8h case    0:*/		return 0x821C33BC;
	}
	return 0x821C33BC;
} // Block from 821C33B8h-821C33BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C33BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33BC);
		  /* 821C33BCh */ case    0:  		/* lwz R29, <#[R31]> */
		/* 821C33BCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821C33BCh case    0:*/		return 0x821C33C0;
		  /* 821C33C0h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821C33C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C33C0h case    1:*/		return 0x821C33C4;
		  /* 821C33C4h */ case    2:  		/* bc 12, CR6_EQ, 4644 */
		/* 821C33C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C45E8;  }
		/* 821C33C4h case    2:*/		return 0x821C33C8;
		  /* 821C33C8h */ case    3:  		/* lwz R10, <#[R29]> */
		/* 821C33C8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C33C8h case    3:*/		return 0x821C33CC;
		  /* 821C33CCh */ case    4:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 821C33CCh case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 821C33CCh case    4:*/		return 0x821C33D0;
		  /* 821C33D0h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821C33D0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C33E0;  }
		/* 821C33D0h case    5:*/		return 0x821C33D4;
		  /* 821C33D4h */ case    6:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821C33D4h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821C33D4h case    6:*/		return 0x821C33D8;
		  /* 821C33D8h */ case    7:  		/* mr R11, R20 */
		/* 821C33D8h case    7:*/		regs.R11 = regs.R20;
		/* 821C33D8h case    7:*/		return 0x821C33DC;
		  /* 821C33DCh */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 821C33DCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821C33E4;  }
		/* 821C33DCh case    8:*/		return 0x821C33E0;
	}
	return 0x821C33E0;
} // Block from 821C33BCh-821C33E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C33E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33E0);
		  /* 821C33E0h */ case    0:  		/* mr R11, R23 */
		/* 821C33E0h case    0:*/		regs.R11 = regs.R23;
		/* 821C33E0h case    0:*/		return 0x821C33E4;
	}
	return 0x821C33E4;
} // Block from 821C33E0h-821C33E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C33E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33E4);
		  /* 821C33E4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C33E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C33E4h case    0:*/		return 0x821C33E8;
		  /* 821C33E8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821C33E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C33F8;  }
		/* 821C33E8h case    1:*/		return 0x821C33EC;
		  /* 821C33ECh */ case    2:  		/* rlwinm R11, R10, 0, 7, 18 */
		/* 821C33ECh case    2:*/		cpu::op::rlwinm<0,0,7,18>(regs,&regs.R11,regs.R10);
		/* 821C33ECh case    2:*/		return 0x821C33F0;
		  /* 821C33F0h */ case    3:  		/* cmplwi CR6, R11, 49152 */
		/* 821C33F0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000C000);
		/* 821C33F0h case    3:*/		return 0x821C33F4;
		  /* 821C33F4h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 821C33F4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C3400;  }
		/* 821C33F4h case    4:*/		return 0x821C33F8;
	}
	return 0x821C33F8;
} // Block from 821C33E4h-821C33F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C33F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C33F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C33F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C33F8);
		  /* 821C33F8h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821C33F8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821C33F8h case    0:*/		return 0x821C33FC;
		  /* 821C33FCh */ case    1:  		/* b -60 */
		/* 821C33FCh case    1:*/		return 0x821C33C0;
		/* 821C33FCh case    1:*/		return 0x821C3400;
	}
	return 0x821C3400;
} // Block from 821C33F8h-821C3400h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C3400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3400);
		  /* 821C3400h */ case    0:  		/* li R8, 1 */
		/* 821C3400h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C3400h case    0:*/		return 0x821C3404;
		  /* 821C3404h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C3404h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C3404h case    1:*/		return 0x821C3408;
		  /* 821C3408h */ case    2:  		/* li R7, 2 */
		/* 821C3408h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C3408h case    2:*/		return 0x821C340C;
		  /* 821C340Ch */ case    3:  		/* mr R6, R28 */
		/* 821C340Ch case    3:*/		regs.R6 = regs.R28;
		/* 821C340Ch case    3:*/		return 0x821C3410;
		  /* 821C3410h */ case    4:  		/* li R5, 0 */
		/* 821C3410h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3410h case    4:*/		return 0x821C3414;
		  /* 821C3414h */ case    5:  		/* mr R3, R27 */
		/* 821C3414h case    5:*/		regs.R3 = regs.R27;
		/* 821C3414h case    5:*/		return 0x821C3418;
	}
	return 0x821C3418;
} // Block from 821C3400h-821C3418h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C3418h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@111@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3418);
		  /* 821C3418h */ case    0:  		/* bl 398720 */
		/* 821C3418h case    0:*/		regs.LR = 0x821C341C; return 0x82224998;
		/* 821C3418h case    0:*/		return 0x821C341C;
		  /* 821C341Ch */ case    1:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C341Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C341Ch case    1:*/		return 0x821C3420;
		  /* 821C3420h */ case    2:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C3420h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C3420h case    2:*/		return 0x821C3424;
		  /* 821C3424h */ case    3:  		/* addi R11, R11, 36 */
		/* 821C3424h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C3424h case    3:*/		return 0x821C3428;
		  /* 821C3428h */ case    4:  		/* addi R10, R10, 36 */
		/* 821C3428h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C3428h case    4:*/		return 0x821C342C;
		  /* 821C342Ch */ case    5:  		/* addi R8, R11, -36 */
		/* 821C342Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C342Ch case    5:*/		return 0x821C3430;
		  /* 821C3430h */ case    6:  		/* addi R6, R10, -36 */
		/* 821C3430h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C3430h case    6:*/		return 0x821C3434;
		  /* 821C3434h */ case    7:  		/* addi R9, R10, 4 */
		/* 821C3434h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C3434h case    7:*/		return 0x821C3438;
		  /* 821C3438h */ case    8:  		/* lwz R7, <#[R11]> */
		/* 821C3438h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3438h case    8:*/		return 0x821C343C;
		  /* 821C343Ch */ case    9:  		/* mr R30, R3 */
		/* 821C343Ch case    9:*/		regs.R30 = regs.R3;
		/* 821C343Ch case    9:*/		return 0x821C3440;
		  /* 821C3440h */ case   10:  		/* li R5, 0 */
		/* 821C3440h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3440h case   10:*/		return 0x821C3444;
		  /* 821C3444h */ case   11:  		/* mr R3, R27 */
		/* 821C3444h case   11:*/		regs.R3 = regs.R27;
		/* 821C3444h case   11:*/		return 0x821C3448;
		  /* 821C3448h */ case   12:  		/* stw R7, <#[R10]> */
		/* 821C3448h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3448h case   12:*/		return 0x821C344C;
		  /* 821C344Ch */ case   13:  		/* lwz R7, <#[R11]> */
		/* 821C344Ch case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C344Ch case   13:*/		return 0x821C3450;
		  /* 821C3450h */ case   14:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C3450h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C3450h case   14:*/		return 0x821C3454;
		  /* 821C3454h */ case   15:  		/* stw R6, <#[R7]> */
		/* 821C3454h case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C3454h case   15:*/		return 0x821C3458;
		  /* 821C3458h */ case   16:  		/* stw R8, <#[R10 + 4]> */
		/* 821C3458h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C3458h case   16:*/		return 0x821C345C;
		  /* 821C345Ch */ case   17:  		/* stw R9, <#[R11]> */
		/* 821C345Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C345Ch case   17:*/		return 0x821C3460;
		  /* 821C3460h */ case   18:  		/* lwz R4, <#[R29 + 12]> */
		/* 821C3460h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C3460h case   18:*/		return 0x821C3464;
		  /* 821C3464h */ case   19:  		/* bl -308052 */
		/* 821C3464h case   19:*/		regs.LR = 0x821C3468; return 0x82178110;
		/* 821C3464h case   19:*/		return 0x821C3468;
		  /* 821C3468h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C3468h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3468h case   20:*/		return 0x821C346C;
		  /* 821C346Ch */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C346Ch case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C346Ch case   21:*/		return 0x821C3470;
		  /* 821C3470h */ case   22:  		/* mr R29, R3 */
		/* 821C3470h case   22:*/		regs.R29 = regs.R3;
		/* 821C3470h case   22:*/		return 0x821C3474;
		  /* 821C3474h */ case   23:  		/* cmplwi CR6, R11, 7424 */
		/* 821C3474h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001D00);
		/* 821C3474h case   23:*/		return 0x821C3478;
		  /* 821C3478h */ case   24:  		/* bc 4, CR6_EQ, 32 */
		/* 821C3478h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821C3498;  }
		/* 821C3478h case   24:*/		return 0x821C347C;
		  /* 821C347Ch */ case   25:  		/* lwz R5, <#[R3 + 12]> */
		/* 821C347Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C347Ch case   25:*/		return 0x821C3480;
		  /* 821C3480h */ case   26:  		/* mr R4, R3 */
		/* 821C3480h case   26:*/		regs.R4 = regs.R3;
		/* 821C3480h case   26:*/		return 0x821C3484;
		  /* 821C3484h */ case   27:  		/* mr R3, R27 */
		/* 821C3484h case   27:*/		regs.R3 = regs.R27;
		/* 821C3484h case   27:*/		return 0x821C3488;
		  /* 821C3488h */ case   28:  		/* bl -336792 */
		/* 821C3488h case   28:*/		regs.LR = 0x821C348C; return 0x821710F0;
		/* 821C3488h case   28:*/		return 0x821C348C;
		  /* 821C348Ch */ case   29:  		/* li R4, 4 */
		/* 821C348Ch case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821C348Ch case   29:*/		return 0x821C3490;
		  /* 821C3490h */ case   30:  		/* mr R29, R3 */
		/* 821C3490h case   30:*/		regs.R29 = regs.R3;
		/* 821C3490h case   30:*/		return 0x821C3494;
		  /* 821C3494h */ case   31:  		/* bl -309716 */
		/* 821C3494h case   31:*/		regs.LR = 0x821C3498; return 0x82177AC0;
		/* 821C3494h case   31:*/		return 0x821C3498;
	}
	return 0x821C3498;
} // Block from 821C3418h-821C3498h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821C3498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3498);
		  /* 821C3498h */ case    0:  		/* mr R4, R29 */
		/* 821C3498h case    0:*/		regs.R4 = regs.R29;
		/* 821C3498h case    0:*/		return 0x821C349C;
		  /* 821C349Ch */ case    1:  		/* mr R3, R30 */
		/* 821C349Ch case    1:*/		regs.R3 = regs.R30;
		/* 821C349Ch case    1:*/		return 0x821C34A0;
		  /* 821C34A0h */ case    2:  		/* bl -307928 */
		/* 821C34A0h case    2:*/		regs.LR = 0x821C34A4; return 0x821781C8;
		/* 821C34A0h case    2:*/		return 0x821C34A4;
		  /* 821C34A4h */ case    3:  		/* stw R3, <#[R30 + 48]> */
		/* 821C34A4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C34A4h case    3:*/		return 0x821C34A8;
		  /* 821C34A8h */ case    4:  		/* cmpwi CR6, R28, 3 */
		/* 821C34A8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000003);
		/* 821C34A8h case    4:*/		return 0x821C34AC;
		  /* 821C34ACh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821C34ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821C34C8;  }
		/* 821C34ACh case    5:*/		return 0x821C34B0;
		  /* 821C34B0h */ case    6:  		/* li R5, 0 */
		/* 821C34B0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C34B0h case    6:*/		return 0x821C34B4;
		  /* 821C34B4h */ case    7:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C34B4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C34B4h case    7:*/		return 0x821C34B8;
		  /* 821C34B8h */ case    8:  		/* mr R3, R27 */
		/* 821C34B8h case    8:*/		regs.R3 = regs.R27;
		/* 821C34B8h case    8:*/		return 0x821C34BC;
		  /* 821C34BCh */ case    9:  		/* bl -19228 */
		/* 821C34BCh case    9:*/		regs.LR = 0x821C34C0; return 0x821BE9A0;
		/* 821C34BCh case    9:*/		return 0x821C34C0;
		  /* 821C34C0h */ case   10:  		/* mr R4, R3 */
		/* 821C34C0h case   10:*/		regs.R4 = regs.R3;
		/* 821C34C0h case   10:*/		return 0x821C34C4;
		  /* 821C34C4h */ case   11:  		/* b 8 */
		/* 821C34C4h case   11:*/		return 0x821C34CC;
		/* 821C34C4h case   11:*/		return 0x821C34C8;
	}
	return 0x821C34C8;
} // Block from 821C3498h-821C34C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C34C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C34C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C34C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C34C8);
		  /* 821C34C8h */ case    0:  		/* mr R4, R29 */
		/* 821C34C8h case    0:*/		regs.R4 = regs.R29;
		/* 821C34C8h case    0:*/		return 0x821C34CC;
	}
	return 0x821C34CC;
} // Block from 821C34C8h-821C34CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C34CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C34CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C34CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C34CC);
		  /* 821C34CCh */ case    0:  		/* mr R3, R30 */
		/* 821C34CCh case    0:*/		regs.R3 = regs.R30;
		/* 821C34CCh case    0:*/		return 0x821C34D0;
		  /* 821C34D0h */ case    1:  		/* bl -307976 */
		/* 821C34D0h case    1:*/		regs.LR = 0x821C34D4; return 0x821781C8;
		/* 821C34D0h case    1:*/		return 0x821C34D4;
		  /* 821C34D4h */ case    2:  		/* stw R3, <#[R30 + 44]> */
		/* 821C34D4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C34D4h case    2:*/		return 0x821C34D8;
		  /* 821C34D8h */ case    3:  		/* addi R8, R31, 4 */
		/* 821C34D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C34D8h case    3:*/		return 0x821C34DC;
		  /* 821C34DCh */ case    4:  		/* lwz R11, <#[R8]> */
		/* 821C34DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C34DCh case    4:*/		return 0x821C34E0;
		  /* 821C34E0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C34E0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C34E0h case    5:*/		return 0x821C34E4;
		  /* 821C34E4h */ case    6:  		/* bc 12, CR6_EQ, -1436 */
		/* 821C34E4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C2F48;  }
		/* 821C34E4h case    6:*/		return 0x821C34E8;
	}
	return 0x821C34E8;
} // Block from 821C34CCh-821C34E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C34E8h
// Function '?PrepareASMBlocks@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C34E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C34E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C34E8);
		  /* 821C34E8h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C34E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C34E8h case    0:*/		return 0x821C34EC;
		  /* 821C34ECh */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821C34ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C34ECh case    1:*/		return 0x821C34F0;
		  /* 821C34F0h */ case    2:  		/* bc 12, CR6_EQ, 128 */
		/* 821C34F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C3570;  }
		/* 821C34F0h case    2:*/		return 0x821C34F4;
		  /* 821C34F4h */ case    3:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C34F4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C34F4h case    3:*/		return 0x821C34F8;
		  /* 821C34F8h */ case    4:  		/* addi R10, R10, 4 */
		/* 821C34F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C34F8h case    4:*/		return 0x821C34FC;
		  /* 821C34FCh */ case    5:  		/* lwz R9, <#[R10]> */
		/* 821C34FCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C34FCh case    5:*/		return 0x821C3500;
		  /* 821C3500h */ case    6:  		/* b 12 */
		/* 821C3500h case    6:*/		return 0x821C350C;
		/* 821C3500h case    6:*/		return 0x821C3504;
		  /* 821C3504h */ case    7:  		/* addi R10, R9, 8 */
		/* 821C3504h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C3504h case    7:*/		return 0x821C3508;
		  /* 821C3508h */ case    8:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C3508h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C3508h case    8:*/		return 0x821C350C;
	}
	return 0x821C350C;
} // Block from 821C34E8h-821C350Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C350Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C350C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C350C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C350C);
		  /* 821C350Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C350Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C350Ch case    0:*/		return 0x821C3510;
		  /* 821C3510h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3510h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C3504;  }
		/* 821C3510h case    1:*/		return 0x821C3514;
		  /* 821C3514h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C3514h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3514h case    2:*/		return 0x821C3518;
		  /* 821C3518h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C3518h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3518h case    3:*/		return 0x821C351C;
		  /* 821C351Ch */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C351Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C351Ch case    4:*/		return 0x821C3520;
		  /* 821C3520h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C3520h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3520h case    5:*/		return 0x821C3524;
		  /* 821C3524h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C3524h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3524h case    6:*/		return 0x821C3528;
		  /* 821C3528h */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 821C3528h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3528h case    7:*/		return 0x821C352C;
		  /* 821C352Ch */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C352Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C352Ch case    8:*/		return 0x821C3530;
		  /* 821C3530h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C3530h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3530h case    9:*/		return 0x821C3534;
		  /* 821C3534h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C3534h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C3534h case   10:*/		return 0x821C3538;
		  /* 821C3538h */ case   11:  		/* srw R9, R23, R9 */
		/* 821C3538h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3538h case   11:*/		return 0x821C353C;
		  /* 821C353Ch */ case   12:  		/* srw R7, R23, R7 */
		/* 821C353Ch case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C353Ch case   12:*/		return 0x821C3540;
		  /* 821C3540h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C3540h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C3540h case   13:*/		return 0x821C3544;
		  /* 821C3544h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C3544h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3544h case   14:*/		return 0x821C3548;
		  /* 821C3548h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C3548h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C3548h case   15:*/		return 0x821C354C;
		  /* 821C354Ch */ case   16:  		/* srw R9, R23, R9 */
		/* 821C354Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C354Ch case   16:*/		return 0x821C3550;
		  /* 821C3550h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C3550h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C3550h case   17:*/		return 0x821C3554;
		  /* 821C3554h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C3554h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C3554h case   18:*/		return 0x821C3558;
		  /* 821C3558h */ case   19:  		/* srw R7, R23, R6 */
		/* 821C3558h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C3558h case   19:*/		return 0x821C355C;
		  /* 821C355Ch */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C355Ch case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C355Ch case   20:*/		return 0x821C3560;
		  /* 821C3560h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C3560h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C3560h case   21:*/		return 0x821C3564;
		  /* 821C3564h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C3564h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C3564h case   22:*/		return 0x821C3568;
		  /* 821C3568h */ case   23:  		/* or R10, R9, R10 */
		/* 821C3568h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C3568h case   23:*/		return 0x821C356C;
		  /* 821C356Ch */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C356Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C356Ch case   24:*/		return 0x821C3570;
	}
	return 0x821C3570;
} // Block from 821C350Ch-821C3570h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C3570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3570);
		  /* 821C3570h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C3570h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3570h case    0:*/		return 0x821C3574;
		  /* 821C3574h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C3574h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C3574h case    1:*/		return 0x821C3578;
		  /* 821C3578h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C3578h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C34DC;  }
		/* 821C3578h case    2:*/		return 0x821C357C;
		  /* 821C357Ch */ case    3:  		/* addi R8, R11, 8 */
		/* 821C357Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C357Ch case    3:*/		return 0x821C3580;
		  /* 821C3580h */ case    4:  		/* b -164 */
		/* 821C3580h case    4:*/		return 0x821C34DC;
		/* 821C3580h case    4:*/		return 0x821C3584;
	}
	return 0x821C3584;
} // Block from 821C3570h-821C3584h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C3584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3584);
		  /* 821C3584h */ case    0:  		/* mr R3, R23 */
		/* 821C3584h case    0:*/		regs.R3 = regs.R23;
		/* 821C3584h case    0:*/		return 0x821C3588;
		  /* 821C3588h */ case    1:  		/* addi R28, R31, 4 */
		/* 821C3588h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x4);
		/* 821C3588h case    1:*/		return 0x821C358C;
		  /* 821C358Ch */ case    2:  		/* lwz R29, <#[R28]> */
		/* 821C358Ch case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821C358Ch case    2:*/		return 0x821C3590;
		  /* 821C3590h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821C3590h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C3590h case    3:*/		return 0x821C3594;
		  /* 821C3594h */ case    4:  		/* bc 12, CR6_EQ, 348 */
		/* 821C3594h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C36F0;  }
		/* 821C3594h case    4:*/		return 0x821C3598;
		  /* 821C3598h */ case    5:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C3598h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C3598h case    5:*/		return 0x821C359C;
		  /* 821C359Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C359Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C359Ch case    6:*/		return 0x821C35A0;
		  /* 821C35A0h */ case    7:  		/* bc 12, CR6_EQ, 316 */
		/* 821C35A0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C36DC;  }
		/* 821C35A0h case    7:*/		return 0x821C35A4;
		  /* 821C35A4h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821C35A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C35A4h case    8:*/		return 0x821C35A8;
		  /* 821C35A8h */ case    9:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821C35A8h case    9:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821C35A8h case    9:*/		return 0x821C35AC;
		  /* 821C35ACh */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821C35ACh case   10:*/		if ( regs.CR[0].eq ) { return 0x821C35BC;  }
		/* 821C35ACh case   10:*/		return 0x821C35B0;
		  /* 821C35B0h */ case   11:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C35B0h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C35B0h case   11:*/		return 0x821C35B4;
		  /* 821C35B4h */ case   12:  		/* mr R11, R20 */
		/* 821C35B4h case   12:*/		regs.R11 = regs.R20;
		/* 821C35B4h case   12:*/		return 0x821C35B8;
		  /* 821C35B8h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 821C35B8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821C35C0;  }
		/* 821C35B8h case   13:*/		return 0x821C35BC;
	}
	return 0x821C35BC;
} // Block from 821C3584h-821C35BCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C35BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C35BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C35BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C35BC);
		  /* 821C35BCh */ case    0:  		/* mr R11, R23 */
		/* 821C35BCh case    0:*/		regs.R11 = regs.R23;
		/* 821C35BCh case    0:*/		return 0x821C35C0;
	}
	return 0x821C35C0;
} // Block from 821C35BCh-821C35C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C35C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C35C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C35C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C35C0);
		  /* 821C35C0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C35C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C35C0h case    0:*/		return 0x821C35C4;
		  /* 821C35C4h */ case    1:  		/* bc 12, CR0_EQ, 280 */
		/* 821C35C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C36DC;  }
		/* 821C35C4h case    1:*/		return 0x821C35C8;
		  /* 821C35C8h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 821C35C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821C35C8h case    2:*/		return 0x821C35CC;
		  /* 821C35CCh */ case    3:  		/* bc 4, CR6_EQ, 216 */
		/* 821C35CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C36A4;  }
		/* 821C35CCh case    3:*/		return 0x821C35D0;
		  /* 821C35D0h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C35D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C35D0h case    4:*/		return 0x821C35D4;
		  /* 821C35D4h */ case    5:  		/* lwz R6, <#[R31 + 44]> */
		/* 821C35D4h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C35D4h case    5:*/		return 0x821C35D8;
		  /* 821C35D8h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C35D8h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C35D8h case    6:*/		return 0x821C35DC;
		  /* 821C35DCh */ case    7:  		/* cmplwi CR6, R11, 7168 */
		/* 821C35DCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001C00);
		/* 821C35DCh case    7:*/		return 0x821C35E0;
		  /* 821C35E0h */ case    8:  		/* bc 4, CR6_EQ, 180 */
		/* 821C35E0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821C3694;  }
		/* 821C35E0h case    8:*/		return 0x821C35E4;
		  /* 821C35E4h */ case    9:  		/* lwz R10, <#[R6]> */
		/* 821C35E4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 821C35E4h case    9:*/		return 0x821C35E8;
		  /* 821C35E8h */ case   10:  		/* mr R3, R27 */
		/* 821C35E8h case   10:*/		regs.R3 = regs.R27;
		/* 821C35E8h case   10:*/		return 0x821C35EC;
		  /* 821C35ECh */ case   11:  		/* lwz R4, <#[R6 + 12]> */
		/* 821C35ECh case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R6 + 0x0000000C) );
		/* 821C35ECh case   11:*/		return 0x821C35F0;
		  /* 821C35F0h */ case   12:  		/* rlwinm R11, R10, 7, 29, 31 */
		/* 821C35F0h case   12:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R10);
		/* 821C35F0h case   12:*/		return 0x821C35F4;
		  /* 821C35F4h */ case   13:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821C35F4h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821C35F4h case   13:*/		return 0x821C35F8;
		  /* 821C35F8h */ case   14:  		/* addi R11, R11, -1 */
		/* 821C35F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821C35F8h case   14:*/		return 0x821C35FC;
		  /* 821C35FCh */ case   15:  		/* rlwinm R30, R10, 0, 27, 31 */
		/* 821C35FCh case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R10);
		/* 821C35FCh case   15:*/		return 0x821C3600;
		  /* 821C3600h */ case   16:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821C3600h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821C3600h case   16:*/		return 0x821C3604;
		  /* 821C3604h */ case   17:  		/* srw R11, R9, R11 */
		/* 821C3604h case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C3604h case   17:*/		return 0x821C3608;
		  /* 821C3608h */ case   18:  		/* rlwinm R18, R11, 0, 30, 31 */
		/* 821C3608h case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R18,regs.R11);
		/* 821C3608h case   18:*/		return 0x821C360C;
		  /* 821C360Ch */ case   19:  		/* bl -308748 */
		/* 821C360Ch case   19:*/		regs.LR = 0x821C3610; return 0x82178000;
		/* 821C360Ch case   19:*/		return 0x821C3610;
		  /* 821C3610h */ case   20:  		/* lwz R11, <#[R3]> */
		/* 821C3610h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3610h case   20:*/		return 0x821C3614;
		  /* 821C3614h */ case   21:  		/* mr R4, R30 */
		/* 821C3614h case   21:*/		regs.R4 = regs.R30;
		/* 821C3614h case   21:*/		return 0x821C3618;
		  /* 821C3618h */ case   22:  		/* mr R17, R3 */
		/* 821C3618h case   22:*/		regs.R17 = regs.R3;
		/* 821C3618h case   22:*/		return 0x821C361C;
		  /* 821C361Ch */ case   23:  		/* rlwimi R11, R20, 26, 4, 6 */
		/* 821C361Ch case   23:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R20);
		/* 821C361Ch case   23:*/		return 0x821C3620;
		  /* 821C3620h */ case   24:  		/* stw R11, <#[R3]> */
		/* 821C3620h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3620h case   24:*/		return 0x821C3624;
		  /* 821C3624h */ case   25:  		/* bl -310116 */
		/* 821C3624h case   25:*/		regs.LR = 0x821C3628; return 0x82177AC0;
		/* 821C3624h case   25:*/		return 0x821C3628;
		  /* 821C3628h */ case   26:  		/* li R11, 224 */
		/* 821C3628h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0xE0);
		/* 821C3628h case   26:*/		return 0x821C362C;
		  /* 821C362Ch */ case   27:  		/* lwz R10, <#[R17]> */
		/* 821C362Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 821C362Ch case   27:*/		return 0x821C3630;
		  /* 821C3630h */ case   28:  		/* mr R5, R31 */
		/* 821C3630h case   28:*/		regs.R5 = regs.R31;
		/* 821C3630h case   28:*/		return 0x821C3634;
		  /* 821C3634h */ case   29:  		/* rlwimi R11, R18, 2, 27, 29 */
		/* 821C3634h case   29:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R11,regs.R18);
		/* 821C3634h case   29:*/		return 0x821C3638;
		  /* 821C3638h */ case   30:  		/* rlwinm R10, R10, 0, 27, 21 */
		/* 821C3638h case   30:*/		cpu::op::rlwinm<0,0,27,21>(regs,&regs.R10,regs.R10);
		/* 821C3638h case   30:*/		return 0x821C363C;
		  /* 821C363Ch */ case   31:  		/* or R11, R11, R18 */
		/* 821C363Ch case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 821C363Ch case   31:*/		return 0x821C3640;
		  /* 821C3640h */ case   32:  		/* li R4, 0 */
		/* 821C3640h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3640h case   32:*/		return 0x821C3644;
		  /* 821C3644h */ case   33:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821C3644h case   33:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821C3644h case   33:*/		return 0x821C3648;
		  /* 821C3648h */ case   34:  		/* mr R3, R27 */
		/* 821C3648h case   34:*/		regs.R3 = regs.R27;
		/* 821C3648h case   34:*/		return 0x821C364C;
		  /* 821C364Ch */ case   35:  		/* or R11, R11, R10 */
		/* 821C364Ch case   35:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C364Ch case   35:*/		return 0x821C3650;
		  /* 821C3650h */ case   36:  		/* mr R6, R17 */
		/* 821C3650h case   36:*/		regs.R6 = regs.R17;
		/* 821C3650h case   36:*/		return 0x821C3654;
		  /* 821C3654h */ case   37:  		/* stw R11, <#[R17]> */
		/* 821C3654h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C3654h case   37:*/		return 0x821C3658;
		  /* 821C3658h */ case   38:  		/* bl -8776 */
		/* 821C3658h case   38:*/		regs.LR = 0x821C365C; return 0x821C1410;
		/* 821C3658h case   38:*/		return 0x821C365C;
		  /* 821C365Ch */ case   39:  		/* mr R4, R3 */
		/* 821C365Ch case   39:*/		regs.R4 = regs.R3;
		/* 821C365Ch case   39:*/		return 0x821C3660;
		  /* 821C3660h */ case   40:  		/* mr R3, R27 */
		/* 821C3660h case   40:*/		regs.R3 = regs.R27;
		/* 821C3660h case   40:*/		return 0x821C3664;
		  /* 821C3664h */ case   41:  		/* bl -308836 */
		/* 821C3664h case   41:*/		regs.LR = 0x821C3668; return 0x82178000;
		/* 821C3664h case   41:*/		return 0x821C3668;
		  /* 821C3668h */ case   42:  		/* lwz R11, <#[R3]> */
		/* 821C3668h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3668h case   42:*/		return 0x821C366C;
		  /* 821C366Ch */ case   43:  		/* li R4, 0 */
		/* 821C366Ch case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C366Ch case   43:*/		return 0x821C3670;
		  /* 821C3670h */ case   44:  		/* rlwimi R11, R20, 26, 4, 6 */
		/* 821C3670h case   44:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R20);
		/* 821C3670h case   44:*/		return 0x821C3674;
		  /* 821C3674h */ case   45:  		/* mr R30, R3 */
		/* 821C3674h case   45:*/		regs.R30 = regs.R3;
		/* 821C3674h case   45:*/		return 0x821C3678;
		  /* 821C3678h */ case   46:  		/* stw R11, <#[R3]> */
		/* 821C3678h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C3678h case   46:*/		return 0x821C367C;
		  /* 821C367Ch */ case   47:  		/* bl -310204 */
		/* 821C367Ch case   47:*/		regs.LR = 0x821C3680; return 0x82177AC0;
		/* 821C367Ch case   47:*/		return 0x821C3680;
		  /* 821C3680h */ case   48:  		/* lwz R10, <#[R30]> */
		/* 821C3680h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C3680h case   48:*/		return 0x821C3684;
		  /* 821C3684h */ case   49:  		/* li R11, 7 */
		/* 821C3684h case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 821C3684h case   49:*/		return 0x821C3688;
		  /* 821C3688h */ case   50:  		/* mr R6, R30 */
		/* 821C3688h case   50:*/		regs.R6 = regs.R30;
		/* 821C3688h case   50:*/		return 0x821C368C;
		  /* 821C368Ch */ case   51:  		/* rlwimi R10, R11, 10, 19, 26 */
		/* 821C368Ch case   51:*/		cpu::op::rlwimi<0,10,19,26>(regs,&regs.R10,regs.R11);
		/* 821C368Ch case   51:*/		return 0x821C3690;
		  /* 821C3690h */ case   52:  		/* stw R10, <#[R30]> */
		/* 821C3690h case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C3690h case   52:*/		return 0x821C3694;
	}
	return 0x821C3694;
} // Block from 821C35C0h-821C3694h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821C3694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3694);
		  /* 821C3694h */ case    0:  		/* mr R5, R31 */
		/* 821C3694h case    0:*/		regs.R5 = regs.R31;
		/* 821C3694h case    0:*/		return 0x821C3698;
		  /* 821C3698h */ case    1:  		/* li R4, 0 */
		/* 821C3698h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3698h case    1:*/		return 0x821C369C;
		  /* 821C369Ch */ case    2:  		/* mr R3, R27 */
		/* 821C369Ch case    2:*/		regs.R3 = regs.R27;
		/* 821C369Ch case    2:*/		return 0x821C36A0;
		  /* 821C36A0h */ case    3:  		/* bl -7512 */
		/* 821C36A0h case    3:*/		regs.LR = 0x821C36A4; return 0x821C1948;
		/* 821C36A0h case    3:*/		return 0x821C36A4;
	}
	return 0x821C36A4;
} // Block from 821C3694h-821C36A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C36A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C36A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C36A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C36A4);
		  /* 821C36A4h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821C36A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C36A4h case    0:*/		return 0x821C36A8;
		  /* 821C36A8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C36A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C36A8h case    1:*/		return 0x821C36AC;
		  /* 821C36ACh */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C36ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C36ACh case    2:*/		return 0x821C36B0;
		  /* 821C36B0h */ case    3:  		/* b 12 */
		/* 821C36B0h case    3:*/		return 0x821C36BC;
		/* 821C36B0h case    3:*/		return 0x821C36B4;
		  /* 821C36B4h */ case    4:  		/* addi R11, R10, 8 */
		/* 821C36B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C36B4h case    4:*/		return 0x821C36B8;
		  /* 821C36B8h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C36B8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C36B8h case    5:*/		return 0x821C36BC;
	}
	return 0x821C36BC;
} // Block from 821C36A4h-821C36BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C36BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C36BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C36BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C36BC);
		  /* 821C36BCh */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821C36BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821C36BCh case    0:*/		return 0x821C36C0;
		  /* 821C36C0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C36C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C36B4;  }
		/* 821C36C0h case    1:*/		return 0x821C36C4;
		  /* 821C36C4h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821C36C4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821C36C4h case    2:*/		return 0x821C36C8;
		  /* 821C36C8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C36C8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C36C8h case    3:*/		return 0x821C36CC;
		  /* 821C36CCh */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C36CCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C36CCh case    4:*/		return 0x821C36D0;
		  /* 821C36D0h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821C36D0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C36D0h case    5:*/		return 0x821C36D4;
		  /* 821C36D4h */ case    6:  		/* stw R29, <#[R3 + 4]> */
		/* 821C36D4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		/* 821C36D4h case    6:*/		return 0x821C36D8;
		  /* 821C36D8h */ case    7:  		/* stw R3, <#[R29 + 12]> */
		/* 821C36D8h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C36D8h case    7:*/		return 0x821C36DC;
	}
	return 0x821C36DC;
} // Block from 821C36BCh-821C36DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C36DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C36DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C36DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C36DC);
		  /* 821C36DCh */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821C36DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C36DCh case    0:*/		return 0x821C36E0;
		  /* 821C36E0h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821C36E0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821C36E0h case    1:*/		return 0x821C36E4;
		  /* 821C36E4h */ case    2:  		/* bc 4, CR6_EQ, -344 */
		/* 821C36E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C358C;  }
		/* 821C36E4h case    2:*/		return 0x821C36E8;
		  /* 821C36E8h */ case    3:  		/* addi R28, R29, 8 */
		/* 821C36E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x8);
		/* 821C36E8h case    3:*/		return 0x821C36EC;
		  /* 821C36ECh */ case    4:  		/* b -352 */
		/* 821C36ECh case    4:*/		return 0x821C358C;
		/* 821C36ECh case    4:*/		return 0x821C36F0;
	}
	return 0x821C36F0;
} // Block from 821C36DCh-821C36F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C36F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C36F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C36F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C36F0);
		  /* 821C36F0h */ case    0:  		/* li R10, 37 */
		/* 821C36F0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x25);
		/* 821C36F0h case    0:*/		return 0x821C36F4;
	}
	return 0x821C36F4;
} // Block from 821C36F0h-821C36F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C36F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C36F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C36F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C36F4);
		  /* 821C36F4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C36F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C36F4h case    0:*/		return 0x821C36F8;
		  /* 821C36F8h */ case    1:  		/* lhz R9, <#[R31 + 14]> */
		/* 821C36F8h case    1:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000E) );
		/* 821C36F8h case    1:*/		return 0x821C36FC;
		  /* 821C36FCh */ case    2:  		/* rlwimi R11, R10, 7, 18, 25 */
		/* 821C36FCh case    2:*/		cpu::op::rlwimi<0,7,18,25>(regs,&regs.R11,regs.R10);
		/* 821C36FCh case    2:*/		return 0x821C3700;
		  /* 821C3700h */ case    3:  		/* cmplwi CR0, R9, 0 */
		/* 821C3700h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 821C3700h case    3:*/		return 0x821C3704;
		  /* 821C3704h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 821C3704h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3704h case    4:*/		return 0x821C3708;
		  /* 821C3708h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821C3708h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C3710;  }
		/* 821C3708h case    5:*/		return 0x821C370C;
		  /* 821C370Ch */ case    6:  		/* sth R23, <#[R31 + 14]> */
		/* 821C370Ch case    6:*/		cpu::mem::store16( regs, regs.R23, (uint32)(regs.R31 + 0x0000000E) );
		/* 821C370Ch case    6:*/		return 0x821C3710;
	}
	return 0x821C3710;
} // Block from 821C36F4h-821C3710h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C3710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3710);
		  /* 821C3710h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C3710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3710h case    0:*/		return 0x821C3714;
		  /* 821C3714h */ case    1:  		/* rlwinm. R10, R11, 27, 31, 31 */
		/* 821C3714h case    1:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R10,regs.R11);
		/* 821C3714h case    1:*/		return 0x821C3718;
		  /* 821C3718h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 821C3718h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C373C;  }
		/* 821C3718h case    2:*/		return 0x821C371C;
		  /* 821C371Ch */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C371Ch case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C371Ch case    3:*/		return 0x821C3720;
		  /* 821C3720h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 821C3720h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821C3720h case    4:*/		return 0x821C3724;
		  /* 821C3724h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821C3724h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C3730;  }
		/* 821C3724h case    5:*/		return 0x821C3728;
		  /* 821C3728h */ case    6:  		/* cmplwi CR6, R11, 105 */
		/* 821C3728h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000069);
		/* 821C3728h case    6:*/		return 0x821C372C;
		  /* 821C372Ch */ case    7:  		/* bc 4, CR6_EQ, 3784 */
		/* 821C372Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C45F4;  }
		/* 821C372Ch case    7:*/		return 0x821C3730;
	}
	return 0x821C3730;
} // Block from 821C3710h-821C3730h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C3730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3730);
		  /* 821C3730h */ case    0:  		/* lwz R11, <#[R21 + 48]> */
		/* 821C3730h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821C3730h case    0:*/		return 0x821C3734;
		  /* 821C3734h */ case    1:  		/* oris R11, R11, 4096 */
		/* 821C3734h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821C3734h case    1:*/		return 0x821C3738;
		  /* 821C3738h */ case    2:  		/* stw R11, <#[R21 + 48]> */
		/* 821C3738h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 821C3738h case    2:*/		return 0x821C373C;
	}
	return 0x821C373C;
} // Block from 821C3730h-821C373Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C373Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C373C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C373C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C373C);
		  /* 821C373Ch */ case    0:  		/* mr R3, R31 */
		/* 821C373Ch case    0:*/		regs.R3 = regs.R31;
		/* 821C373Ch case    0:*/		return 0x821C3740;
		  /* 821C3740h */ case    1:  		/* bl -24072 */
		/* 821C3740h case    1:*/		regs.LR = 0x821C3744; return 0x821BD938;
		/* 821C3740h case    1:*/		return 0x821C3744;
		  /* 821C3744h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C3744h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C3744h case    2:*/		return 0x821C3748;
		  /* 821C3748h */ case    3:  		/* bc 12, CR0_EQ, 104 */
		/* 821C3748h case    3:*/		if ( regs.CR[0].eq ) { return 0x821C37B0;  }
		/* 821C3748h case    3:*/		return 0x821C374C;
		  /* 821C374Ch */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C374Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C374Ch case    4:*/		return 0x821C3750;
		  /* 821C3750h */ case    5:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C3750h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C3750h case    5:*/		return 0x821C3754;
		  /* 821C3754h */ case    6:  		/* cmplwi CR6, R10, 12288 */
		/* 821C3754h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821C3754h case    6:*/		return 0x821C3758;
		  /* 821C3758h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 821C3758h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C376C;  }
		/* 821C3758h case    7:*/		return 0x821C375C;
		  /* 821C375Ch */ case    8:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821C375Ch case    8:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821C375Ch case    8:*/		return 0x821C3760;
		  /* 821C3760h */ case    9:  		/* cmplw CR6, R11, R19 */
		/* 821C3760h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821C3760h case    9:*/		return 0x821C3764;
		  /* 821C3764h */ case   10:  		/* mr R11, R20 */
		/* 821C3764h case   10:*/		regs.R11 = regs.R20;
		/* 821C3764h case   10:*/		return 0x821C3768;
		  /* 821C3768h */ case   11:  		/* bc 12, CR6_GT, 8 */
		/* 821C3768h case   11:*/		if ( regs.CR[6].gt ) { return 0x821C3770;  }
		/* 821C3768h case   11:*/		return 0x821C376C;
	}
	return 0x821C376C;
} // Block from 821C373Ch-821C376Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C376Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C376C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C376C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C376C);
		  /* 821C376Ch */ case    0:  		/* mr R11, R23 */
		/* 821C376Ch case    0:*/		regs.R11 = regs.R23;
		/* 821C376Ch case    0:*/		return 0x821C3770;
	}
	return 0x821C3770;
} // Block from 821C376Ch-821C3770h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C3770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3770);
		  /* 821C3770h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821C3770h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C3770h case    0:*/		return 0x821C3774;
		  /* 821C3774h */ case    1:  		/* li R6, 0 */
		/* 821C3774h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C3774h case    1:*/		return 0x821C3778;
		  /* 821C3778h */ case    2:  		/* addic R10, R11, -1 */
		/* 821C3778h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821C3778h case    2:*/		return 0x821C377C;
		  /* 821C377Ch */ case    3:  		/* mr R4, R31 */
		/* 821C377Ch case    3:*/		regs.R4 = regs.R31;
		/* 821C377Ch case    3:*/		return 0x821C3780;
		  /* 821C3780h */ case    4:  		/* subfe R11, R10, R11 */
		/* 821C3780h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C3780h case    4:*/		return 0x821C3784;
		  /* 821C3784h */ case    5:  		/* mr R3, R27 */
		/* 821C3784h case    5:*/		regs.R3 = regs.R27;
		/* 821C3784h case    5:*/		return 0x821C3788;
		  /* 821C3788h */ case    6:  		/* addi R11, R11, 11 */
		/* 821C3788h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821C3788h case    6:*/		return 0x821C378C;
		  /* 821C378Ch */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C378Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C378Ch case    7:*/		return 0x821C3790;
		  /* 821C3790h */ case    8:  		/* lwzx R11, <#[R11 + R31]> */
		/* 821C3790h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C3790h case    8:*/		return 0x821C3794;
		  /* 821C3794h */ case    9:  		/* lwz R5, <#[R11 + 12]> */
		/* 821C3794h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3794h case    9:*/		return 0x821C3798;
		  /* 821C3798h */ case   10:  		/* bl -22896 */
		/* 821C3798h case   10:*/		regs.LR = 0x821C379C; return 0x821BDE28;
		/* 821C3798h case   10:*/		return 0x821C379C;
		  /* 821C379Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C379Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C379Ch case   11:*/		return 0x821C37A0;
		  /* 821C37A0h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821C37A0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821C37B0;  }
		/* 821C37A0h case   12:*/		return 0x821C37A4;
		  /* 821C37A4h */ case   13:  		/* lwz R11, <#[R27 + 40]> */
		/* 821C37A4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 821C37A4h case   13:*/		return 0x821C37A8;
		  /* 821C37A8h */ case   14:  		/* ori R11, R11, 128 */
		/* 821C37A8h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821C37A8h case   14:*/		return 0x821C37AC;
		  /* 821C37ACh */ case   15:  		/* stw R11, <#[R27 + 40]> */
		/* 821C37ACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 821C37ACh case   15:*/		return 0x821C37B0;
	}
	return 0x821C37B0;
} // Block from 821C3770h-821C37B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C37B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C37B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C37B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C37B0);
		  /* 821C37B0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C37B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C37B0h case    0:*/		return 0x821C37B4;
		  /* 821C37B4h */ case    1:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C37B4h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C37B4h case    1:*/		return 0x821C37B8;
		  /* 821C37B8h */ case    2:  		/* cmplwi CR6, R10, 12288 */
		/* 821C37B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821C37B8h case    2:*/		return 0x821C37BC;
		  /* 821C37BCh */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 821C37BCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C37F4;  }
		/* 821C37BCh case    3:*/		return 0x821C37C0;
		  /* 821C37C0h */ case    4:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821C37C0h case    4:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821C37C0h case    4:*/		return 0x821C37C4;
		  /* 821C37C4h */ case    5:  		/* cmplw CR6, R11, R19 */
		/* 821C37C4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821C37C4h case    5:*/		return 0x821C37C8;
		  /* 821C37C8h */ case    6:  		/* bc 4, CR6_EQ, 44 */
		/* 821C37C8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C37F4;  }
		/* 821C37C8h case    6:*/		return 0x821C37CC;
		  /* 821C37CCh */ case    7:  		/* cmplwi CR6, R25, 0 */
		/* 821C37CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821C37CCh case    7:*/		return 0x821C37D0;
		  /* 821C37D0h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821C37D0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821C37EC;  }
		/* 821C37D0h case    8:*/		return 0x821C37D4;
		  /* 821C37D4h */ case    9:  		/* mr R6, R27 */
		/* 821C37D4h case    9:*/		regs.R6 = regs.R27;
		/* 821C37D4h case    9:*/		return 0x821C37D8;
		  /* 821C37D8h */ case   10:  		/* mr R5, R31 */
		/* 821C37D8h case   10:*/		regs.R5 = regs.R31;
		/* 821C37D8h case   10:*/		return 0x821C37DC;
		  /* 821C37DCh */ case   11:  		/* li R4, 3 */
		/* 821C37DCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821C37DCh case   11:*/		return 0x821C37E0;
		  /* 821C37E0h */ case   12:  		/* mr R3, R25 */
		/* 821C37E0h case   12:*/		regs.R3 = regs.R25;
		/* 821C37E0h case   12:*/		return 0x821C37E4;
		  /* 821C37E4h */ case   13:  		/* bl -306796 */
		/* 821C37E4h case   13:*/		regs.LR = 0x821C37E8; return 0x82178978;
		/* 821C37E4h case   13:*/		return 0x821C37E8;
		  /* 821C37E8h */ case   14:  		/* b 8 */
		/* 821C37E8h case   14:*/		return 0x821C37F0;
		/* 821C37E8h case   14:*/		return 0x821C37EC;
	}
	return 0x821C37EC;
} // Block from 821C37B0h-821C37ECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C37ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C37EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C37EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C37EC);
		  /* 821C37ECh */ case    0:  		/* mr R24, R31 */
		/* 821C37ECh case    0:*/		regs.R24 = regs.R31;
		/* 821C37ECh case    0:*/		return 0x821C37F0;
	}
	return 0x821C37F0;
} // Block from 821C37ECh-821C37F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C37F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C37F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C37F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C37F0);
		  /* 821C37F0h */ case    0:  		/* mr R25, R31 */
		/* 821C37F0h case    0:*/		regs.R25 = regs.R31;
		/* 821C37F0h case    0:*/		return 0x821C37F4;
	}
	return 0x821C37F4;
} // Block from 821C37F0h-821C37F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C37F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C37F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C37F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C37F4);
		  /* 821C37F4h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821C37F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C37F4h case    0:*/		return 0x821C37F8;
		  /* 821C37F8h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821C37F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C384C;  }
		/* 821C37F8h case    1:*/		return 0x821C37FC;
		  /* 821C37FCh */ case    2:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821C37FCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821C37FCh case    2:*/		return 0x821C3800;
		  /* 821C3800h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 821C3800h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821C3800h case    3:*/		return 0x821C3804;
		  /* 821C3804h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821C3804h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821C3804h case    4:*/		return 0x821C3808;
		  /* 821C3808h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821C3808h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C3814;  }
		/* 821C3808h case    5:*/		return 0x821C380C;
		  /* 821C380Ch */ case    6:  		/* mr R11, R23 */
		/* 821C380Ch case    6:*/		regs.R11 = regs.R23;
		/* 821C380Ch case    6:*/		return 0x821C3810;
		  /* 821C3810h */ case    7:  		/* b 12 */
		/* 821C3810h case    7:*/		return 0x821C381C;
		/* 821C3810h case    7:*/		return 0x821C3814;
	}
	return 0x821C3814;
} // Block from 821C37F4h-821C3814h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C3814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3814);
		  /* 821C3814h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821C3814h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821C3814h case    0:*/		return 0x821C3818;
		  /* 821C3818h */ case    1:  		/* addi R11, R11, -40 */
		/* 821C3818h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821C3818h case    1:*/		return 0x821C381C;
	}
	return 0x821C381C;
} // Block from 821C3814h-821C381Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C381Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C381C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C381C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C381C);
		  /* 821C381Ch */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821C381Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821C381Ch case    0:*/		return 0x821C3820;
		  /* 821C3820h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821C3820h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C383C;  }
		/* 821C3820h case    1:*/		return 0x821C3824;
		  /* 821C3824h */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C3824h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C3824h case    2:*/		return 0x821C3828;
		  /* 821C3828h */ case    3:  		/* mr R26, R31 */
		/* 821C3828h case    3:*/		regs.R26 = regs.R31;
		/* 821C3828h case    3:*/		return 0x821C382C;
		  /* 821C382Ch */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821C382Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821C382Ch case    4:*/		return 0x821C3830;
		  /* 821C3830h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C3830h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C3830h case    5:*/		return 0x821C3834;
		  /* 821C3834h */ case    6:  		/* bc 4, CR0_EQ, 96 */
		/* 821C3834h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C3894;  }
		/* 821C3834h case    6:*/		return 0x821C3838;
		  /* 821C3838h */ case    7:  		/* b 76 */
		/* 821C3838h case    7:*/		return 0x821C3884;
		/* 821C3838h case    7:*/		return 0x821C383C;
	}
	return 0x821C383C;
} // Block from 821C381Ch-821C383Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C383Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C383C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C383C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C383C);
		  /* 821C383Ch */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821C383Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821C383Ch case    0:*/		return 0x821C3840;
		  /* 821C3840h */ case    1:  		/* bc 4, CR0_EQ, 84 */
		/* 821C3840h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C3894;  }
		/* 821C3840h case    1:*/		return 0x821C3844;
		  /* 821C3844h */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821C3844h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821C3844h case    2:*/		return 0x821C3848;
		  /* 821C3848h */ case    3:  		/* b 64 */
		/* 821C3848h case    3:*/		return 0x821C3888;
		/* 821C3848h case    3:*/		return 0x821C384C;
	}
	return 0x821C384C;
} // Block from 821C383Ch-821C384Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C384Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C384C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C384C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C384C);
		  /* 821C384Ch */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821C384Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821C384Ch case    0:*/		return 0x821C3850;
		  /* 821C3850h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C3850h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C3850h case    1:*/		return 0x821C3854;
		  /* 821C3854h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821C3854h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C3860;  }
		/* 821C3854h case    2:*/		return 0x821C3858;
		  /* 821C3858h */ case    3:  		/* mr R11, R23 */
		/* 821C3858h case    3:*/		regs.R11 = regs.R23;
		/* 821C3858h case    3:*/		return 0x821C385C;
		  /* 821C385Ch */ case    4:  		/* b 16 */
		/* 821C385Ch case    4:*/		return 0x821C386C;
		/* 821C385Ch case    4:*/		return 0x821C3860;
	}
	return 0x821C3860;
} // Block from 821C384Ch-821C3860h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C3860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3860);
		  /* 821C3860h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 821C3860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821C3860h case    0:*/		return 0x821C3864;
		  /* 821C3864h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C3864h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C3864h case    1:*/		return 0x821C3868;
		  /* 821C3868h */ case    2:  		/* addi R11, R11, -40 */
		/* 821C3868h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821C3868h case    2:*/		return 0x821C386C;
	}
	return 0x821C386C;
} // Block from 821C3860h-821C386Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C386Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C386C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C386C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C386C);
		  /* 821C386Ch */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821C386Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821C386Ch case    0:*/		return 0x821C3870;
		  /* 821C3870h */ case    1:  		/* bc 12, CR6_EQ, -76 */
		/* 821C3870h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C3824;  }
		/* 821C3870h case    1:*/		return 0x821C3874;
		  /* 821C3874h */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 821C3874h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821C3874h case    2:*/		return 0x821C3878;
		  /* 821C3878h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C3878h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C3878h case    3:*/		return 0x821C387C;
		  /* 821C387Ch */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 821C387Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C3894;  }
		/* 821C387Ch case    4:*/		return 0x821C3880;
		  /* 821C3880h */ case    5:  		/* lwz R11, <#[R22]> */
		/* 821C3880h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821C3880h case    5:*/		return 0x821C3884;
	}
	return 0x821C3884;
} // Block from 821C386Ch-821C3884h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C3884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3884);
		  /* 821C3884h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C3884h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C3884h case    0:*/		return 0x821C3888;
	}
	return 0x821C3888;
} // Block from 821C3884h-821C3888h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C3888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3888);
		  /* 821C3888h */ case    0:  		/* addi R31, R11, -40 */
		/* 821C3888h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821C3888h case    0:*/		return 0x821C388C;
		  /* 821C388Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821C388Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C388Ch case    1:*/		return 0x821C3890;
		  /* 821C3890h */ case    2:  		/* bc 4, CR6_EQ, -2948 */
		/* 821C3890h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C2D0C;  }
		/* 821C3890h case    2:*/		return 0x821C3894;
	}
	return 0x821C3894;
} // Block from 821C3888h-821C3894h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C3894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3894);
		  /* 821C3894h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821C3894h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821C3894h case    0:*/		return 0x821C3898;
		  /* 821C3898h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 821C3898h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C38F8;  }
		/* 821C3898h case    1:*/		return 0x821C389C;
		  /* 821C389Ch */ case    2:  		/* li R8, 0 */
		/* 821C389Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C389Ch case    2:*/		return 0x821C38A0;
		  /* 821C38A0h */ case    3:  		/* li R7, 0 */
		/* 821C38A0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C38A0h case    3:*/		return 0x821C38A4;
		  /* 821C38A4h */ case    4:  		/* li R6, 117 */
		/* 821C38A4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821C38A4h case    4:*/		return 0x821C38A8;
		  /* 821C38A8h */ case    5:  		/* mr R5, R22 */
		/* 821C38A8h case    5:*/		regs.R5 = regs.R22;
		/* 821C38A8h case    5:*/		return 0x821C38AC;
		  /* 821C38ACh */ case    6:  		/* mr R4, R21 */
		/* 821C38ACh case    6:*/		regs.R4 = regs.R21;
		/* 821C38ACh case    6:*/		return 0x821C38B0;
		  /* 821C38B0h */ case    7:  		/* mr R3, R27 */
		/* 821C38B0h case    7:*/		regs.R3 = regs.R27;
		/* 821C38B0h case    7:*/		return 0x821C38B4;
		  /* 821C38B4h */ case    8:  		/* bl 397540 */
		/* 821C38B4h case    8:*/		regs.LR = 0x821C38B8; return 0x82224998;
		/* 821C38B4h case    8:*/		return 0x821C38B8;
		  /* 821C38B8h */ case    9:  		/* mr R6, R27 */
		/* 821C38B8h case    9:*/		regs.R6 = regs.R27;
		/* 821C38B8h case    9:*/		return 0x821C38BC;
		  /* 821C38BCh */ case   10:  		/* mr R5, R24 */
		/* 821C38BCh case   10:*/		regs.R5 = regs.R24;
		/* 821C38BCh case   10:*/		return 0x821C38C0;
		  /* 821C38C0h */ case   11:  		/* li R4, 3 */
		/* 821C38C0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821C38C0h case   11:*/		return 0x821C38C4;
		  /* 821C38C4h */ case   12:  		/* mr R31, R3 */
		/* 821C38C4h case   12:*/		regs.R31 = regs.R3;
		/* 821C38C4h case   12:*/		return 0x821C38C8;
		  /* 821C38C8h */ case   13:  		/* bl -307024 */
		/* 821C38C8h case   13:*/		regs.LR = 0x821C38CC; return 0x82178978;
		/* 821C38C8h case   13:*/		return 0x821C38CC;
		  /* 821C38CCh */ case   14:  		/* lwz R5, <#[R21 + 104]> */
		/* 821C38CCh case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R21 + 0x00000068) );
		/* 821C38CCh case   14:*/		return 0x821C38D0;
		  /* 821C38D0h */ case   15:  		/* cmplwi CR6, R5, 0 */
		/* 821C38D0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C38D0h case   15:*/		return 0x821C38D4;
		  /* 821C38D4h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821C38D4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821C38E8;  }
		/* 821C38D4h case   16:*/		return 0x821C38D8;
		  /* 821C38D8h */ case   17:  		/* mr R6, R27 */
		/* 821C38D8h case   17:*/		regs.R6 = regs.R27;
		/* 821C38D8h case   17:*/		return 0x821C38DC;
		  /* 821C38DCh */ case   18:  		/* li R4, 3 */
		/* 821C38DCh case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821C38DCh case   18:*/		return 0x821C38E0;
		  /* 821C38E0h */ case   19:  		/* mr R3, R31 */
		/* 821C38E0h case   19:*/		regs.R3 = regs.R31;
		/* 821C38E0h case   19:*/		return 0x821C38E4;
		  /* 821C38E4h */ case   20:  		/* bl -307052 */
		/* 821C38E4h case   20:*/		regs.LR = 0x821C38E8; return 0x82178978;
		/* 821C38E4h case   20:*/		return 0x821C38E8;
	}
	return 0x821C38E8;
} // Block from 821C3894h-821C38E8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C38E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C38E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C38E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C38E8);
		  /* 821C38E8h */ case    0:  		/* stw R31, <#[R21 + 104]> */
		/* 821C38E8h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R21 + 0x00000068) );
		/* 821C38E8h case    0:*/		return 0x821C38EC;
		  /* 821C38ECh */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C38ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C38ECh case    1:*/		return 0x821C38F0;
		  /* 821C38F0h */ case    2:  		/* oris R11, R11, 512 */
		/* 821C38F0h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C38F0h case    2:*/		return 0x821C38F4;
		  /* 821C38F4h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821C38F4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C38F4h case    3:*/		return 0x821C38F8;
	}
	return 0x821C38F8;
} // Block from 821C38E8h-821C38F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C38F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C38F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C38F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C38F8);
		  /* 821C38F8h */ case    0:  		/* lwz R11, <#[R21 + 76]> */
		/* 821C38F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000004C) );
		/* 821C38F8h case    0:*/		return 0x821C38FC;
		  /* 821C38FCh */ case    1:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821C38FCh case    1:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821C38FCh case    1:*/		return 0x821C3900;
		  /* 821C3900h */ case    2:  		/* bc 4, CR0_EQ, 3240 */
		/* 821C3900h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C3900h case    2:*/		return 0x821C3904;
		  /* 821C3904h */ case    3:  		/* lwz R31, <#[R22 + 4]> */
		/* 821C3904h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000004) );
		/* 821C3904h case    3:*/		return 0x821C3908;
		  /* 821C3908h */ case    4:  		/* mr R26, R23 */
		/* 821C3908h case    4:*/		regs.R26 = regs.R23;
		/* 821C3908h case    4:*/		return 0x821C390C;
		  /* 821C390Ch */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C390Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C390Ch case    5:*/		return 0x821C3910;
		  /* 821C3910h */ case    6:  		/* bc 4, CR0_EQ, 3224 */
		/* 821C3910h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C3910h case    6:*/		return 0x821C3914;
		  /* 821C3914h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821C3914h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C3914h case    7:*/		return 0x821C3918;
		  /* 821C3918h */ case    8:  		/* bc 12, CR0_EQ, 3216 */
		/* 821C3918h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C3918h case    8:*/		return 0x821C391C;
		  /* 821C391Ch */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C391Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C391Ch case    9:*/		return 0x821C3920;
		  /* 821C3920h */ case   10:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C3920h case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C3920h case   10:*/		return 0x821C3924;
		  /* 821C3924h */ case   11:  		/* addi R10, R11, -12 */
		/* 821C3924h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFF4);
		/* 821C3924h case   11:*/		return 0x821C3928;
		  /* 821C3928h */ case   12:  		/* cmplwi CR6, R10, 67 */
		/* 821C3928h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000043);
		/* 821C3928h case   12:*/		return 0x821C392C;
		  /* 821C392Ch */ case   13:  		/* bc 12, CR6_GT, 2924 */
		/* 821C392Ch case   13:*/		if ( regs.CR[6].gt ) { return 0x821C4498;  }
		/* 821C392Ch case   13:*/		return 0x821C3930;
		  /* 821C3930h */ case   14:  		/* lis R12, -32252 */
		/* 821C3930h case   14:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 821C3930h case   14:*/		return 0x821C3934;
		  /* 821C3934h */ case   15:  		/* rlwinm R0, R10, 1, 0, 30 */
		/* 821C3934h case   15:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R10);
		/* 821C3934h case   15:*/		return 0x821C3938;
		  /* 821C3938h */ case   16:  		/* addi R12, R12, -16432 */
		/* 821C3938h case   16:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFBFD0);
		/* 821C3938h case   16:*/		return 0x821C393C;
		  /* 821C393Ch */ case   17:  		/* lhzx R0, <#[R12 + R0]> */
		/* 821C393Ch case   17:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 821C393Ch case   17:*/		return 0x821C3940;
		  /* 821C3940h */ case   18:  		/* lis R12, -32228 */
		/* 821C3940h case   18:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF821C);
		/* 821C3940h case   18:*/		return 0x821C3944;
		  /* 821C3944h */ case   19:  		/* addi R12, R12, 14680 */
		/* 821C3944h case   19:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x3958);
		/* 821C3944h case   19:*/		return 0x821C3948;
		  /* 821C3948h */ case   20:  		/* ori R0, R0, 0 */
		/* 821C3948h case   20:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 821C3948h case   20:*/		return 0x821C394C;
		  /* 821C394Ch */ case   21:  		/* add R12, R12, R0 */
		/* 821C394Ch case   21:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 821C394Ch case   21:*/		return 0x821C3950;
		  /* 821C3950h */ case   22:  		/* mtspr CTR, R12 */
		/* 821C3950h case   22:*/		regs.CTR = regs.R12;
		/* 821C3950h case   22:*/		return 0x821C3954;
		  /* 821C3954h */ case   23:  		/* bcctr 20, CR0_LT */
		/* 821C3954h case   23:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 821C3954h case   23:*/		return 0x821C3958;
		  /* 821C3958h */ case   24:  		/* mr R5, R31 */
		/* 821C3958h case   24:*/		regs.R5 = regs.R31;
		/* 821C3958h case   24:*/		return 0x821C395C;
		  /* 821C395Ch */ case   25:  		/* lwz R7, <#[R31 + 48]> */
		/* 821C395Ch case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821C395Ch case   25:*/		return 0x821C3960;
		  /* 821C3960h */ case   26:  		/* li R4, 0 */
		/* 821C3960h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3960h case   26:*/		return 0x821C3964;
		  /* 821C3964h */ case   27:  		/* lwz R6, <#[R31 + 44]> */
		/* 821C3964h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3964h case   27:*/		return 0x821C3968;
		  /* 821C3968h */ case   28:  		/* mr R3, R27 */
		/* 821C3968h case   28:*/		regs.R3 = regs.R27;
		/* 821C3968h case   28:*/		return 0x821C396C;
		  /* 821C396Ch */ case   29:  		/* bl -10332 */
		/* 821C396Ch case   29:*/		regs.LR = 0x821C3970; return 0x821C1110;
		/* 821C396Ch case   29:*/		return 0x821C3970;
		  /* 821C3970h */ case   30:  		/* mr R6, R3 */
		/* 821C3970h case   30:*/		regs.R6 = regs.R3;
		/* 821C3970h case   30:*/		return 0x821C3974;
		  /* 821C3974h */ case   31:  		/* mr R5, R31 */
		/* 821C3974h case   31:*/		regs.R5 = regs.R31;
		/* 821C3974h case   31:*/		return 0x821C3978;
		  /* 821C3978h */ case   32:  		/* lwz R7, <#[R31 + 52]> */
		/* 821C3978h case   32:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000034) );
		/* 821C3978h case   32:*/		return 0x821C397C;
		  /* 821C397Ch */ case   33:  		/* li R4, 0 */
		/* 821C397Ch case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C397Ch case   33:*/		return 0x821C3980;
		  /* 821C3980h */ case   34:  		/* mr R3, R27 */
		/* 821C3980h case   34:*/		regs.R3 = regs.R27;
		/* 821C3980h case   34:*/		return 0x821C3984;
		  /* 821C3984h */ case   35:  		/* bl -7100 */
		/* 821C3984h case   35:*/		regs.LR = 0x821C3988; return 0x821C1DC8;
		/* 821C3984h case   35:*/		return 0x821C3988;
		  /* 821C3988h */ case   36:  		/* addi R8, R31, 4 */
		/* 821C3988h case   36:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C3988h case   36:*/		return 0x821C398C;
		  /* 821C398Ch */ case   37:  		/* lwz R11, <#[R8]> */
		/* 821C398Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C398Ch case   37:*/		return 0x821C3990;
		  /* 821C3990h */ case   38:  		/* cmplwi CR6, R11, 0 */
		/* 821C3990h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3990h case   38:*/		return 0x821C3994;
		  /* 821C3994h */ case   39:  		/* bc 12, CR6_EQ, 2060 */
		/* 821C3994h case   39:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C3994h case   39:*/		return 0x821C3998;
		  /* 821C3998h */ case   40:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C3998h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C3998h case   40:*/		return 0x821C399C;
		  /* 821C399Ch */ case   41:  		/* cmplwi CR6, R10, 0 */
		/* 821C399Ch case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C399Ch case   41:*/		return 0x821C39A0;
		  /* 821C39A0h */ case   42:  		/* bc 12, CR6_EQ, 60 */
		/* 821C39A0h case   42:*/		if ( regs.CR[6].eq ) { return 0x821C39DC;  }
		/* 821C39A0h case   42:*/		return 0x821C39A4;
		  /* 821C39A4h */ case   43:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C39A4h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C39A4h case   43:*/		return 0x821C39A8;
		  /* 821C39A8h */ case   44:  		/* addi R10, R10, 4 */
		/* 821C39A8h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C39A8h case   44:*/		return 0x821C39AC;
		  /* 821C39ACh */ case   45:  		/* lwz R9, <#[R10]> */
		/* 821C39ACh case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C39ACh case   45:*/		return 0x821C39B0;
		  /* 821C39B0h */ case   46:  		/* b 12 */
		/* 821C39B0h case   46:*/		return 0x821C39BC;
		/* 821C39B0h case   46:*/		return 0x821C39B4;
		  /* 821C39B4h */ case   47:  		/* addi R10, R9, 8 */
		/* 821C39B4h case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C39B4h case   47:*/		return 0x821C39B8;
		  /* 821C39B8h */ case   48:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C39B8h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C39B8h case   48:*/		return 0x821C39BC;
	}
	return 0x821C39BC;
} // Block from 821C38F8h-821C39BCh (49 instructions)

//////////////////////////////////////////////////////
// Block at 821C39BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C39BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C39BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C39BC);
		  /* 821C39BCh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C39BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C39BCh case    0:*/		return 0x821C39C0;
		  /* 821C39C0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C39C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C39B4;  }
		/* 821C39C0h case    1:*/		return 0x821C39C4;
		  /* 821C39C4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C39C4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C39C4h case    2:*/		return 0x821C39C8;
		  /* 821C39C8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C39C8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C39C8h case    3:*/		return 0x821C39CC;
		  /* 821C39CCh */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C39CCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C39CCh case    4:*/		return 0x821C39D0;
		  /* 821C39D0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C39D0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C39D0h case    5:*/		return 0x821C39D4;
		  /* 821C39D4h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C39D4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C39D4h case    6:*/		return 0x821C39D8;
		  /* 821C39D8h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821C39D8h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C39D8h case    7:*/		return 0x821C39DC;
	}
	return 0x821C39DC;
} // Block from 821C39BCh-821C39DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C39DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C39DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C39DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C39DC);
		  /* 821C39DCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C39DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C39DCh case    0:*/		return 0x821C39E0;
		  /* 821C39E0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C39E0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C39E0h case    1:*/		return 0x821C39E4;
		  /* 821C39E4h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821C39E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C398C;  }
		/* 821C39E4h case    2:*/		return 0x821C39E8;
		  /* 821C39E8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C39E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C39E8h case    3:*/		return 0x821C39EC;
		  /* 821C39ECh */ case    4:  		/* b -96 */
		/* 821C39ECh case    4:*/		return 0x821C398C;
		/* 821C39ECh case    4:*/		return 0x821C39F0;
		  /* 821C39F0h */ case    5:  		/* subfic R28, R11, 20 */
		/* 821C39F0h case    5:*/		cpu::op::subfic<0>(regs,&regs.R28,regs.R11,0x14);
		/* 821C39F0h case    5:*/		return 0x821C39F4;
		  /* 821C39F4h */ case    6:  		/* mr R30, R23 */
		/* 821C39F4h case    6:*/		regs.R30 = regs.R23;
		/* 821C39F4h case    6:*/		return 0x821C39F8;
		  /* 821C39F8h */ case    7:  		/* cmplwi CR6, R11, 18 */
		/* 821C39F8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 821C39F8h case    7:*/		return 0x821C39FC;
		  /* 821C39FCh */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 821C39FCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821C3A1C;  }
		/* 821C39FCh case    8:*/		return 0x821C3A00;
		  /* 821C3A00h */ case    9:  		/* lwz R6, <#[R31 + 52]> */
		/* 821C3A00h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000034) );
		/* 821C3A00h case    9:*/		return 0x821C3A04;
		  /* 821C3A04h */ case   10:  		/* mr R5, R31 */
		/* 821C3A04h case   10:*/		regs.R5 = regs.R31;
		/* 821C3A04h case   10:*/		return 0x821C3A08;
		  /* 821C3A08h */ case   11:  		/* li R4, 0 */
		/* 821C3A08h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3A08h case   11:*/		return 0x821C3A0C;
		  /* 821C3A0Ch */ case   12:  		/* mr R7, R6 */
		/* 821C3A0Ch case   12:*/		regs.R7 = regs.R6;
		/* 821C3A0Ch case   12:*/		return 0x821C3A10;
		  /* 821C3A10h */ case   13:  		/* mr R3, R27 */
		/* 821C3A10h case   13:*/		regs.R3 = regs.R27;
		/* 821C3A10h case   13:*/		return 0x821C3A14;
		  /* 821C3A14h */ case   14:  		/* bl -154460 */
		/* 821C3A14h case   14:*/		regs.LR = 0x821C3A18; return 0x8219DEB8;
		/* 821C3A14h case   14:*/		return 0x821C3A18;
		  /* 821C3A18h */ case   15:  		/* mr R30, R3 */
		/* 821C3A18h case   15:*/		regs.R30 = regs.R3;
		/* 821C3A18h case   15:*/		return 0x821C3A1C;
	}
	return 0x821C3A1C;
} // Block from 821C39DCh-821C3A1Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C3A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3A1C);
		  /* 821C3A1Ch */ case    0:  		/* mr R29, R23 */
		/* 821C3A1Ch case    0:*/		regs.R29 = regs.R23;
		/* 821C3A1Ch case    0:*/		return 0x821C3A20;
		  /* 821C3A20h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821C3A20h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821C3A20h case    1:*/		return 0x821C3A24;
		  /* 821C3A24h */ case    2:  		/* bc 12, CR6_EQ, 120 */
		/* 821C3A24h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C3A9C;  }
		/* 821C3A24h case    2:*/		return 0x821C3A28;
		  /* 821C3A28h */ case    3:  		/* mr R5, R29 */
		/* 821C3A28h case    3:*/		regs.R5 = regs.R29;
		/* 821C3A28h case    3:*/		return 0x821C3A2C;
		  /* 821C3A2Ch */ case    4:  		/* lwz R4, <#[R31 + 48]> */
		/* 821C3A2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821C3A2Ch case    4:*/		return 0x821C3A30;
		  /* 821C3A30h */ case    5:  		/* mr R3, R27 */
		/* 821C3A30h case    5:*/		regs.R3 = regs.R27;
		/* 821C3A30h case    5:*/		return 0x821C3A34;
		  /* 821C3A34h */ case    6:  		/* bl -20628 */
		/* 821C3A34h case    6:*/		regs.LR = 0x821C3A38; return 0x821BE9A0;
		/* 821C3A34h case    6:*/		return 0x821C3A38;
		  /* 821C3A38h */ case    7:  		/* mr R25, R3 */
		/* 821C3A38h case    7:*/		regs.R25 = regs.R3;
		/* 821C3A38h case    7:*/		return 0x821C3A3C;
		  /* 821C3A3Ch */ case    8:  		/* mr R5, R29 */
		/* 821C3A3Ch case    8:*/		regs.R5 = regs.R29;
		/* 821C3A3Ch case    8:*/		return 0x821C3A40;
		  /* 821C3A40h */ case    9:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3A40h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3A40h case    9:*/		return 0x821C3A44;
		  /* 821C3A44h */ case   10:  		/* mr R3, R27 */
		/* 821C3A44h case   10:*/		regs.R3 = regs.R27;
		/* 821C3A44h case   10:*/		return 0x821C3A48;
		  /* 821C3A48h */ case   11:  		/* bl -20648 */
		/* 821C3A48h case   11:*/		regs.LR = 0x821C3A4C; return 0x821BE9A0;
		/* 821C3A48h case   11:*/		return 0x821C3A4C;
		  /* 821C3A4Ch */ case   12:  		/* mr R6, R3 */
		/* 821C3A4Ch case   12:*/		regs.R6 = regs.R3;
		/* 821C3A4Ch case   12:*/		return 0x821C3A50;
		  /* 821C3A50h */ case   13:  		/* mr R7, R25 */
		/* 821C3A50h case   13:*/		regs.R7 = regs.R25;
		/* 821C3A50h case   13:*/		return 0x821C3A54;
		  /* 821C3A54h */ case   14:  		/* mr R5, R31 */
		/* 821C3A54h case   14:*/		regs.R5 = regs.R31;
		/* 821C3A54h case   14:*/		return 0x821C3A58;
		  /* 821C3A58h */ case   15:  		/* li R4, 0 */
		/* 821C3A58h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3A58h case   15:*/		return 0x821C3A5C;
		  /* 821C3A5Ch */ case   16:  		/* mr R3, R27 */
		/* 821C3A5Ch case   16:*/		regs.R3 = regs.R27;
		/* 821C3A5Ch case   16:*/		return 0x821C3A60;
		  /* 821C3A60h */ case   17:  		/* bl -10576 */
		/* 821C3A60h case   17:*/		regs.LR = 0x821C3A64; return 0x821C1110;
		/* 821C3A60h case   17:*/		return 0x821C3A64;
		  /* 821C3A64h */ case   18:  		/* mr R7, R3 */
		/* 821C3A64h case   18:*/		regs.R7 = regs.R3;
		/* 821C3A64h case   18:*/		return 0x821C3A68;
		  /* 821C3A68h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821C3A68h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C3A68h case   19:*/		return 0x821C3A6C;
		  /* 821C3A6Ch */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 821C3A6Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x821C3A78;  }
		/* 821C3A6Ch case   20:*/		return 0x821C3A70;
		  /* 821C3A70h */ case   21:  		/* mr R30, R3 */
		/* 821C3A70h case   21:*/		regs.R30 = regs.R3;
		/* 821C3A70h case   21:*/		return 0x821C3A74;
		  /* 821C3A74h */ case   22:  		/* b 28 */
		/* 821C3A74h case   22:*/		return 0x821C3A90;
		/* 821C3A74h case   22:*/		return 0x821C3A78;
	}
	return 0x821C3A78;
} // Block from 821C3A1Ch-821C3A78h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C3A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3A78);
		  /* 821C3A78h */ case    0:  		/* mr R6, R30 */
		/* 821C3A78h case    0:*/		regs.R6 = regs.R30;
		/* 821C3A78h case    0:*/		return 0x821C3A7C;
		  /* 821C3A7Ch */ case    1:  		/* mr R5, R31 */
		/* 821C3A7Ch case    1:*/		regs.R5 = regs.R31;
		/* 821C3A7Ch case    1:*/		return 0x821C3A80;
		  /* 821C3A80h */ case    2:  		/* li R4, 0 */
		/* 821C3A80h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3A80h case    2:*/		return 0x821C3A84;
		  /* 821C3A84h */ case    3:  		/* mr R3, R27 */
		/* 821C3A84h case    3:*/		regs.R3 = regs.R27;
		/* 821C3A84h case    3:*/		return 0x821C3A88;
		  /* 821C3A88h */ case    4:  		/* bl -5944 */
		/* 821C3A88h case    4:*/		regs.LR = 0x821C3A8C; return 0x821C2350;
		/* 821C3A88h case    4:*/		return 0x821C3A8C;
		  /* 821C3A8Ch */ case    5:  		/* mr R30, R3 */
		/* 821C3A8Ch case    5:*/		regs.R30 = regs.R3;
		/* 821C3A8Ch case    5:*/		return 0x821C3A90;
	}
	return 0x821C3A90;
} // Block from 821C3A78h-821C3A90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C3A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3A90);
		  /* 821C3A90h */ case    0:  		/* addi R29, R29, 1 */
		/* 821C3A90h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821C3A90h case    0:*/		return 0x821C3A94;
		  /* 821C3A94h */ case    1:  		/* cmplw CR6, R29, R28 */
		/* 821C3A94h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 821C3A94h case    1:*/		return 0x821C3A98;
		  /* 821C3A98h */ case    2:  		/* bc 12, CR6_LT, -112 */
		/* 821C3A98h case    2:*/		if ( regs.CR[6].lt ) { return 0x821C3A28;  }
		/* 821C3A98h case    2:*/		return 0x821C3A9C;
	}
	return 0x821C3A9C;
} // Block from 821C3A90h-821C3A9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C3A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3A9C);
		  /* 821C3A9Ch */ case    0:  		/* addi R8, R31, 4 */
		/* 821C3A9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C3A9Ch case    0:*/		return 0x821C3AA0;
		  /* 821C3AA0h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C3AA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3AA0h case    1:*/		return 0x821C3AA4;
		  /* 821C3AA4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C3AA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3AA4h case    2:*/		return 0x821C3AA8;
		  /* 821C3AA8h */ case    3:  		/* bc 12, CR6_EQ, 1784 */
		/* 821C3AA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C3AA8h case    3:*/		return 0x821C3AAC;
		  /* 821C3AACh */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C3AACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C3AACh case    4:*/		return 0x821C3AB0;
		  /* 821C3AB0h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C3AB0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C3AB0h case    5:*/		return 0x821C3AB4;
		  /* 821C3AB4h */ case    6:  		/* bc 12, CR6_EQ, 128 */
		/* 821C3AB4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C3B34;  }
		/* 821C3AB4h case    6:*/		return 0x821C3AB8;
		  /* 821C3AB8h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C3AB8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3AB8h case    7:*/		return 0x821C3ABC;
		  /* 821C3ABCh */ case    8:  		/* addi R10, R10, 4 */
		/* 821C3ABCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C3ABCh case    8:*/		return 0x821C3AC0;
		  /* 821C3AC0h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821C3AC0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3AC0h case    9:*/		return 0x821C3AC4;
		  /* 821C3AC4h */ case   10:  		/* b 12 */
		/* 821C3AC4h case   10:*/		return 0x821C3AD0;
		/* 821C3AC4h case   10:*/		return 0x821C3AC8;
		  /* 821C3AC8h */ case   11:  		/* addi R10, R9, 8 */
		/* 821C3AC8h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C3AC8h case   11:*/		return 0x821C3ACC;
		  /* 821C3ACCh */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C3ACCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C3ACCh case   12:*/		return 0x821C3AD0;
	}
	return 0x821C3AD0;
} // Block from 821C3A9Ch-821C3AD0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C3AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3AD0);
		  /* 821C3AD0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C3AD0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C3AD0h case    0:*/		return 0x821C3AD4;
		  /* 821C3AD4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3AD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C3AC8;  }
		/* 821C3AD4h case    1:*/		return 0x821C3AD8;
		  /* 821C3AD8h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C3AD8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3AD8h case    2:*/		return 0x821C3ADC;
		  /* 821C3ADCh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C3ADCh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3ADCh case    3:*/		return 0x821C3AE0;
		  /* 821C3AE0h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C3AE0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3AE0h case    4:*/		return 0x821C3AE4;
		  /* 821C3AE4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C3AE4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3AE4h case    5:*/		return 0x821C3AE8;
		  /* 821C3AE8h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C3AE8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3AE8h case    6:*/		return 0x821C3AEC;
		  /* 821C3AECh */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C3AECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3AECh case    7:*/		return 0x821C3AF0;
		  /* 821C3AF0h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C3AF0h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3AF0h case    8:*/		return 0x821C3AF4;
		  /* 821C3AF4h */ case    9:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C3AF4h case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C3AF4h case    9:*/		return 0x821C3AF8;
		  /* 821C3AF8h */ case   10:  		/* stw R30, <#[R11 + 12]> */
		/* 821C3AF8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3AF8h case   10:*/		return 0x821C3AFC;
		  /* 821C3AFCh */ case   11:  		/* srw R9, R23, R9 */
		/* 821C3AFCh case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3AFCh case   11:*/		return 0x821C3B00;
		  /* 821C3B00h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C3B00h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C3B00h case   12:*/		return 0x821C3B04;
		  /* 821C3B04h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C3B04h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C3B04h case   13:*/		return 0x821C3B08;
		  /* 821C3B08h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C3B08h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3B08h case   14:*/		return 0x821C3B0C;
		  /* 821C3B0Ch */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C3B0Ch case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C3B0Ch case   15:*/		return 0x821C3B10;
		  /* 821C3B10h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C3B10h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3B10h case   16:*/		return 0x821C3B14;
		  /* 821C3B14h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C3B14h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C3B14h case   17:*/		return 0x821C3B18;
		  /* 821C3B18h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C3B18h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C3B18h case   18:*/		return 0x821C3B1C;
		  /* 821C3B1Ch */ case   19:  		/* srw R7, R23, R6 */
		/* 821C3B1Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C3B1Ch case   19:*/		return 0x821C3B20;
		  /* 821C3B20h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C3B20h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C3B20h case   20:*/		return 0x821C3B24;
		  /* 821C3B24h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C3B24h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C3B24h case   21:*/		return 0x821C3B28;
		  /* 821C3B28h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C3B28h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C3B28h case   22:*/		return 0x821C3B2C;
		  /* 821C3B2Ch */ case   23:  		/* or R10, R9, R10 */
		/* 821C3B2Ch case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C3B2Ch case   23:*/		return 0x821C3B30;
		  /* 821C3B30h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C3B30h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3B30h case   24:*/		return 0x821C3B34;
	}
	return 0x821C3B34;
} // Block from 821C3AD0h-821C3B34h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C3B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3B34);
		  /* 821C3B34h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C3B34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3B34h case    0:*/		return 0x821C3B38;
		  /* 821C3B38h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C3B38h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C3B38h case    1:*/		return 0x821C3B3C;
		  /* 821C3B3Ch */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C3B3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C3AA0;  }
		/* 821C3B3Ch case    2:*/		return 0x821C3B40;
		  /* 821C3B40h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C3B40h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C3B40h case    3:*/		return 0x821C3B44;
		  /* 821C3B44h */ case    4:  		/* b -164 */
		/* 821C3B44h case    4:*/		return 0x821C3AA0;
		/* 821C3B44h case    4:*/		return 0x821C3B48;
		  /* 821C3B48h */ case    5:  		/* li R5, 1 */
		/* 821C3B48h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C3B48h case    5:*/		return 0x821C3B4C;
		  /* 821C3B4Ch */ case    6:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3B4Ch case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3B4Ch case    6:*/		return 0x821C3B50;
		  /* 821C3B50h */ case    7:  		/* mr R3, R27 */
		/* 821C3B50h case    7:*/		regs.R3 = regs.R27;
		/* 821C3B50h case    7:*/		return 0x821C3B54;
		  /* 821C3B54h */ case    8:  		/* bl -20916 */
		/* 821C3B54h case    8:*/		regs.LR = 0x821C3B58; return 0x821BE9A0;
		/* 821C3B54h case    8:*/		return 0x821C3B58;
		  /* 821C3B58h */ case    9:  		/* mr R30, R3 */
		/* 821C3B58h case    9:*/		regs.R30 = regs.R3;
		/* 821C3B58h case    9:*/		return 0x821C3B5C;
		  /* 821C3B5Ch */ case   10:  		/* li R5, 0 */
		/* 821C3B5Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3B5Ch case   10:*/		return 0x821C3B60;
		  /* 821C3B60h */ case   11:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3B60h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3B60h case   11:*/		return 0x821C3B64;
		  /* 821C3B64h */ case   12:  		/* mr R3, R27 */
		/* 821C3B64h case   12:*/		regs.R3 = regs.R27;
		/* 821C3B64h case   12:*/		return 0x821C3B68;
		  /* 821C3B68h */ case   13:  		/* bl -20936 */
		/* 821C3B68h case   13:*/		regs.LR = 0x821C3B6C; return 0x821BE9A0;
		/* 821C3B68h case   13:*/		return 0x821C3B6C;
		  /* 821C3B6Ch */ case   14:  		/* mr R6, R3 */
		/* 821C3B6Ch case   14:*/		regs.R6 = regs.R3;
		/* 821C3B6Ch case   14:*/		return 0x821C3B70;
		  /* 821C3B70h */ case   15:  		/* mr R7, R30 */
		/* 821C3B70h case   15:*/		regs.R7 = regs.R30;
		/* 821C3B70h case   15:*/		return 0x821C3B74;
		  /* 821C3B74h */ case   16:  		/* mr R5, R31 */
		/* 821C3B74h case   16:*/		regs.R5 = regs.R31;
		/* 821C3B74h case   16:*/		return 0x821C3B78;
		  /* 821C3B78h */ case   17:  		/* li R4, 0 */
		/* 821C3B78h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3B78h case   17:*/		return 0x821C3B7C;
		  /* 821C3B7Ch */ case   18:  		/* mr R3, R27 */
		/* 821C3B7Ch case   18:*/		regs.R3 = regs.R27;
		/* 821C3B7Ch case   18:*/		return 0x821C3B80;
		  /* 821C3B80h */ case   19:  		/* bl -154824 */
		/* 821C3B80h case   19:*/		regs.LR = 0x821C3B84; return 0x8219DEB8;
		/* 821C3B80h case   19:*/		return 0x821C3B84;
		  /* 821C3B84h */ case   20:  		/* mr R30, R3 */
		/* 821C3B84h case   20:*/		regs.R30 = regs.R3;
		/* 821C3B84h case   20:*/		return 0x821C3B88;
		  /* 821C3B88h */ case   21:  		/* li R5, 2 */
		/* 821C3B88h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821C3B88h case   21:*/		return 0x821C3B8C;
		  /* 821C3B8Ch */ case   22:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3B8Ch case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3B8Ch case   22:*/		return 0x821C3B90;
		  /* 821C3B90h */ case   23:  		/* mr R3, R27 */
		/* 821C3B90h case   23:*/		regs.R3 = regs.R27;
		/* 821C3B90h case   23:*/		return 0x821C3B94;
		  /* 821C3B94h */ case   24:  		/* bl -20980 */
		/* 821C3B94h case   24:*/		regs.LR = 0x821C3B98; return 0x821BE9A0;
		/* 821C3B94h case   24:*/		return 0x821C3B98;
		  /* 821C3B98h */ case   25:  		/* mr R7, R3 */
		/* 821C3B98h case   25:*/		regs.R7 = regs.R3;
		/* 821C3B98h case   25:*/		return 0x821C3B9C;
		  /* 821C3B9Ch */ case   26:  		/* mr R6, R30 */
		/* 821C3B9Ch case   26:*/		regs.R6 = regs.R30;
		/* 821C3B9Ch case   26:*/		return 0x821C3BA0;
		  /* 821C3BA0h */ case   27:  		/* mr R5, R31 */
		/* 821C3BA0h case   27:*/		regs.R5 = regs.R31;
		/* 821C3BA0h case   27:*/		return 0x821C3BA4;
		  /* 821C3BA4h */ case   28:  		/* li R4, 0 */
		/* 821C3BA4h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3BA4h case   28:*/		return 0x821C3BA8;
		  /* 821C3BA8h */ case   29:  		/* mr R3, R27 */
		/* 821C3BA8h case   29:*/		regs.R3 = regs.R27;
		/* 821C3BA8h case   29:*/		return 0x821C3BAC;
		  /* 821C3BACh */ case   30:  		/* bl -7268 */
		/* 821C3BACh case   30:*/		regs.LR = 0x821C3BB0; return 0x821C1F48;
		/* 821C3BACh case   30:*/		return 0x821C3BB0;
		  /* 821C3BB0h */ case   31:  		/* mr R30, R3 */
		/* 821C3BB0h case   31:*/		regs.R30 = regs.R3;
		/* 821C3BB0h case   31:*/		return 0x821C3BB4;
		  /* 821C3BB4h */ case   32:  		/* li R5, 3 */
		/* 821C3BB4h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821C3BB4h case   32:*/		return 0x821C3BB8;
		  /* 821C3BB8h */ case   33:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3BB8h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3BB8h case   33:*/		return 0x821C3BBC;
		  /* 821C3BBCh */ case   34:  		/* mr R3, R27 */
		/* 821C3BBCh case   34:*/		regs.R3 = regs.R27;
		/* 821C3BBCh case   34:*/		return 0x821C3BC0;
		  /* 821C3BC0h */ case   35:  		/* bl -21024 */
		/* 821C3BC0h case   35:*/		regs.LR = 0x821C3BC4; return 0x821BE9A0;
		/* 821C3BC0h case   35:*/		return 0x821C3BC4;
		  /* 821C3BC4h */ case   36:  		/* mr R7, R3 */
		/* 821C3BC4h case   36:*/		regs.R7 = regs.R3;
		/* 821C3BC4h case   36:*/		return 0x821C3BC8;
		  /* 821C3BC8h */ case   37:  		/* mr R6, R30 */
		/* 821C3BC8h case   37:*/		regs.R6 = regs.R30;
		/* 821C3BC8h case   37:*/		return 0x821C3BCC;
		  /* 821C3BCCh */ case   38:  		/* mr R5, R31 */
		/* 821C3BCCh case   38:*/		regs.R5 = regs.R31;
		/* 821C3BCCh case   38:*/		return 0x821C3BD0;
		  /* 821C3BD0h */ case   39:  		/* li R4, 0 */
		/* 821C3BD0h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C3BD0h case   39:*/		return 0x821C3BD4;
		  /* 821C3BD4h */ case   40:  		/* mr R3, R27 */
		/* 821C3BD4h case   40:*/		regs.R3 = regs.R27;
		/* 821C3BD4h case   40:*/		return 0x821C3BD8;
		  /* 821C3BD8h */ case   41:  		/* bl -7312 */
		/* 821C3BD8h case   41:*/		regs.LR = 0x821C3BDC; return 0x821C1F48;
		/* 821C3BD8h case   41:*/		return 0x821C3BDC;
		  /* 821C3BDCh */ case   42:  		/* addi R8, R31, 4 */
		/* 821C3BDCh case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C3BDCh case   42:*/		return 0x821C3BE0;
		  /* 821C3BE0h */ case   43:  		/* lwz R11, <#[R8]> */
		/* 821C3BE0h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3BE0h case   43:*/		return 0x821C3BE4;
		  /* 821C3BE4h */ case   44:  		/* cmplwi CR6, R11, 0 */
		/* 821C3BE4h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3BE4h case   44:*/		return 0x821C3BE8;
		  /* 821C3BE8h */ case   45:  		/* bc 12, CR6_EQ, 1464 */
		/* 821C3BE8h case   45:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C3BE8h case   45:*/		return 0x821C3BEC;
		  /* 821C3BECh */ case   46:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C3BECh case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C3BECh case   46:*/		return 0x821C3BF0;
		  /* 821C3BF0h */ case   47:  		/* cmplwi CR6, R10, 0 */
		/* 821C3BF0h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C3BF0h case   47:*/		return 0x821C3BF4;
		  /* 821C3BF4h */ case   48:  		/* bc 12, CR6_EQ, 128 */
		/* 821C3BF4h case   48:*/		if ( regs.CR[6].eq ) { return 0x821C3C74;  }
		/* 821C3BF4h case   48:*/		return 0x821C3BF8;
		  /* 821C3BF8h */ case   49:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C3BF8h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3BF8h case   49:*/		return 0x821C3BFC;
		  /* 821C3BFCh */ case   50:  		/* addi R10, R10, 4 */
		/* 821C3BFCh case   50:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C3BFCh case   50:*/		return 0x821C3C00;
		  /* 821C3C00h */ case   51:  		/* lwz R9, <#[R10]> */
		/* 821C3C00h case   51:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3C00h case   51:*/		return 0x821C3C04;
		  /* 821C3C04h */ case   52:  		/* b 12 */
		/* 821C3C04h case   52:*/		return 0x821C3C10;
		/* 821C3C04h case   52:*/		return 0x821C3C08;
		  /* 821C3C08h */ case   53:  		/* addi R10, R9, 8 */
		/* 821C3C08h case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C3C08h case   53:*/		return 0x821C3C0C;
		  /* 821C3C0Ch */ case   54:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C3C0Ch case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C3C0Ch case   54:*/		return 0x821C3C10;
	}
	return 0x821C3C10;
} // Block from 821C3B34h-821C3C10h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821C3C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3C10);
		  /* 821C3C10h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C3C10h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C3C10h case    0:*/		return 0x821C3C14;
		  /* 821C3C14h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3C14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C3C08;  }
		/* 821C3C14h case    1:*/		return 0x821C3C18;
		  /* 821C3C18h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C3C18h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3C18h case    2:*/		return 0x821C3C1C;
		  /* 821C3C1Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C3C1Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3C1Ch case    3:*/		return 0x821C3C20;
		  /* 821C3C20h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C3C20h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C3C20h case    4:*/		return 0x821C3C24;
		  /* 821C3C24h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C3C24h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3C24h case    5:*/		return 0x821C3C28;
		  /* 821C3C28h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C3C28h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C3C28h case    6:*/		return 0x821C3C2C;
		  /* 821C3C2Ch */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821C3C2Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3C2Ch case    7:*/		return 0x821C3C30;
		  /* 821C3C30h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C3C30h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3C30h case    8:*/		return 0x821C3C34;
		  /* 821C3C34h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C3C34h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3C34h case    9:*/		return 0x821C3C38;
		  /* 821C3C38h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C3C38h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C3C38h case   10:*/		return 0x821C3C3C;
		  /* 821C3C3Ch */ case   11:  		/* srw R9, R23, R9 */
		/* 821C3C3Ch case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3C3Ch case   11:*/		return 0x821C3C40;
		  /* 821C3C40h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C3C40h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C3C40h case   12:*/		return 0x821C3C44;
		  /* 821C3C44h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C3C44h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C3C44h case   13:*/		return 0x821C3C48;
		  /* 821C3C48h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C3C48h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3C48h case   14:*/		return 0x821C3C4C;
		  /* 821C3C4Ch */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C3C4Ch case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C3C4Ch case   15:*/		return 0x821C3C50;
		  /* 821C3C50h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C3C50h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3C50h case   16:*/		return 0x821C3C54;
		  /* 821C3C54h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C3C54h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C3C54h case   17:*/		return 0x821C3C58;
		  /* 821C3C58h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C3C58h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C3C58h case   18:*/		return 0x821C3C5C;
		  /* 821C3C5Ch */ case   19:  		/* srw R7, R23, R6 */
		/* 821C3C5Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C3C5Ch case   19:*/		return 0x821C3C60;
		  /* 821C3C60h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C3C60h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C3C60h case   20:*/		return 0x821C3C64;
		  /* 821C3C64h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C3C64h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C3C64h case   21:*/		return 0x821C3C68;
		  /* 821C3C68h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C3C68h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C3C68h case   22:*/		return 0x821C3C6C;
		  /* 821C3C6Ch */ case   23:  		/* or R10, R9, R10 */
		/* 821C3C6Ch case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C3C6Ch case   23:*/		return 0x821C3C70;
		  /* 821C3C70h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C3C70h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3C70h case   24:*/		return 0x821C3C74;
	}
	return 0x821C3C74;
} // Block from 821C3C10h-821C3C74h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C3C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3C74);
		  /* 821C3C74h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C3C74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3C74h case    0:*/		return 0x821C3C78;
		  /* 821C3C78h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C3C78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C3C78h case    1:*/		return 0x821C3C7C;
		  /* 821C3C7Ch */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C3C7Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C3BE0;  }
		/* 821C3C7Ch case    2:*/		return 0x821C3C80;
		  /* 821C3C80h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C3C80h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C3C80h case    3:*/		return 0x821C3C84;
		  /* 821C3C84h */ case    4:  		/* b -164 */
		/* 821C3C84h case    4:*/		return 0x821C3BE0;
		/* 821C3C84h case    4:*/		return 0x821C3C88;
		  /* 821C3C88h */ case    5:  		/* mr R6, R20 */
		/* 821C3C88h case    5:*/		regs.R6 = regs.R20;
		/* 821C3C88h case    5:*/		return 0x821C3C8C;
		  /* 821C3C8Ch */ case    6:  		/* b 24 */
		/* 821C3C8Ch case    6:*/		return 0x821C3CA4;
		/* 821C3C8Ch case    6:*/		return 0x821C3C90;
		  /* 821C3C90h */ case    7:  		/* li R6, 2 */
		/* 821C3C90h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C3C90h case    7:*/		return 0x821C3C94;
		  /* 821C3C94h */ case    8:  		/* b 16 */
		/* 821C3C94h case    8:*/		return 0x821C3CA4;
		/* 821C3C94h case    8:*/		return 0x821C3C98;
		  /* 821C3C98h */ case    9:  		/* li R6, 3 */
		/* 821C3C98h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821C3C98h case    9:*/		return 0x821C3C9C;
		  /* 821C3C9Ch */ case   10:  		/* b 8 */
		/* 821C3C9Ch case   10:*/		return 0x821C3CA4;
		/* 821C3C9Ch case   10:*/		return 0x821C3CA0;
		  /* 821C3CA0h */ case   11:  		/* li R6, 4 */
		/* 821C3CA0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C3CA0h case   11:*/		return 0x821C3CA4;
	}
	return 0x821C3CA4;
} // Block from 821C3C74h-821C3CA4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C3CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3CA4);
		  /* 821C3CA4h */ case    0:  		/* li R8, 1 */
		/* 821C3CA4h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C3CA4h case    0:*/		return 0x821C3CA8;
		  /* 821C3CA8h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C3CA8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C3CA8h case    1:*/		return 0x821C3CAC;
		  /* 821C3CACh */ case    2:  		/* li R7, 2 */
		/* 821C3CACh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C3CACh case    2:*/		return 0x821C3CB0;
		  /* 821C3CB0h */ case    3:  		/* li R5, 0 */
		/* 821C3CB0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3CB0h case    3:*/		return 0x821C3CB4;
		  /* 821C3CB4h */ case    4:  		/* mr R3, R27 */
		/* 821C3CB4h case    4:*/		regs.R3 = regs.R27;
		/* 821C3CB4h case    4:*/		return 0x821C3CB8;
		  /* 821C3CB8h */ case    5:  		/* bl 396512 */
		/* 821C3CB8h case    5:*/		regs.LR = 0x821C3CBC; return 0x82224998;
		/* 821C3CB8h case    5:*/		return 0x821C3CBC;
		  /* 821C3CBCh */ case    6:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C3CBCh case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C3CBCh case    6:*/		return 0x821C3CC0;
		  /* 821C3CC0h */ case    7:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C3CC0h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C3CC0h case    7:*/		return 0x821C3CC4;
		  /* 821C3CC4h */ case    8:  		/* addi R11, R11, 36 */
		/* 821C3CC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C3CC4h case    8:*/		return 0x821C3CC8;
		  /* 821C3CC8h */ case    9:  		/* addi R10, R10, 36 */
		/* 821C3CC8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C3CC8h case    9:*/		return 0x821C3CCC;
		  /* 821C3CCCh */ case   10:  		/* addi R8, R11, -36 */
		/* 821C3CCCh case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C3CCCh case   10:*/		return 0x821C3CD0;
		  /* 821C3CD0h */ case   11:  		/* addi R6, R10, -36 */
		/* 821C3CD0h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C3CD0h case   11:*/		return 0x821C3CD4;
		  /* 821C3CD4h */ case   12:  		/* addi R9, R10, 4 */
		/* 821C3CD4h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C3CD4h case   12:*/		return 0x821C3CD8;
		  /* 821C3CD8h */ case   13:  		/* lwz R7, <#[R11]> */
		/* 821C3CD8h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3CD8h case   13:*/		return 0x821C3CDC;
		  /* 821C3CDCh */ case   14:  		/* mr R30, R3 */
		/* 821C3CDCh case   14:*/		regs.R30 = regs.R3;
		/* 821C3CDCh case   14:*/		return 0x821C3CE0;
		  /* 821C3CE0h */ case   15:  		/* li R5, 0 */
		/* 821C3CE0h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3CE0h case   15:*/		return 0x821C3CE4;
		  /* 821C3CE4h */ case   16:  		/* mr R3, R27 */
		/* 821C3CE4h case   16:*/		regs.R3 = regs.R27;
		/* 821C3CE4h case   16:*/		return 0x821C3CE8;
		  /* 821C3CE8h */ case   17:  		/* stw R7, <#[R10]> */
		/* 821C3CE8h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3CE8h case   17:*/		return 0x821C3CEC;
		  /* 821C3CECh */ case   18:  		/* lwz R7, <#[R11]> */
		/* 821C3CECh case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3CECh case   18:*/		return 0x821C3CF0;
		  /* 821C3CF0h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C3CF0h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C3CF0h case   19:*/		return 0x821C3CF4;
		  /* 821C3CF4h */ case   20:  		/* stw R6, <#[R7]> */
		/* 821C3CF4h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C3CF4h case   20:*/		return 0x821C3CF8;
		  /* 821C3CF8h */ case   21:  		/* stw R8, <#[R10 + 4]> */
		/* 821C3CF8h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C3CF8h case   21:*/		return 0x821C3CFC;
		  /* 821C3CFCh */ case   22:  		/* stw R9, <#[R11]> */
		/* 821C3CFCh case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3CFCh case   22:*/		return 0x821C3D00;
		  /* 821C3D00h */ case   23:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3D00h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3D00h case   23:*/		return 0x821C3D04;
		  /* 821C3D04h */ case   24:  		/* bl -21348 */
		/* 821C3D04h case   24:*/		regs.LR = 0x821C3D08; return 0x821BE9A0;
		/* 821C3D04h case   24:*/		return 0x821C3D08;
		  /* 821C3D08h */ case   25:  		/* mr R4, R3 */
		/* 821C3D08h case   25:*/		regs.R4 = regs.R3;
		/* 821C3D08h case   25:*/		return 0x821C3D0C;
		  /* 821C3D0Ch */ case   26:  		/* mr R3, R30 */
		/* 821C3D0Ch case   26:*/		regs.R3 = regs.R30;
		/* 821C3D0Ch case   26:*/		return 0x821C3D10;
		  /* 821C3D10h */ case   27:  		/* bl -310088 */
		/* 821C3D10h case   27:*/		regs.LR = 0x821C3D14; return 0x821781C8;
		/* 821C3D10h case   27:*/		return 0x821C3D14;
		  /* 821C3D14h */ case   28:  		/* stw R3, <#[R30 + 44]> */
		/* 821C3D14h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C3D14h case   28:*/		return 0x821C3D18;
		  /* 821C3D18h */ case   29:  		/* li R5, 1 */
		/* 821C3D18h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C3D18h case   29:*/		return 0x821C3D1C;
		  /* 821C3D1Ch */ case   30:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3D1Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3D1Ch case   30:*/		return 0x821C3D20;
		  /* 821C3D20h */ case   31:  		/* mr R3, R27 */
		/* 821C3D20h case   31:*/		regs.R3 = regs.R27;
		/* 821C3D20h case   31:*/		return 0x821C3D24;
		  /* 821C3D24h */ case   32:  		/* bl -21380 */
		/* 821C3D24h case   32:*/		regs.LR = 0x821C3D28; return 0x821BE9A0;
		/* 821C3D24h case   32:*/		return 0x821C3D28;
		  /* 821C3D28h */ case   33:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C3D28h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3D28h case   33:*/		return 0x821C3D2C;
		  /* 821C3D2Ch */ case   34:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C3D2Ch case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C3D2Ch case   34:*/		return 0x821C3D30;
		  /* 821C3D30h */ case   35:  		/* mr R4, R3 */
		/* 821C3D30h case   35:*/		regs.R4 = regs.R3;
		/* 821C3D30h case   35:*/		return 0x821C3D34;
		  /* 821C3D34h */ case   36:  		/* cmplwi CR6, R11, 7296 */
		/* 821C3D34h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001C80);
		/* 821C3D34h case   36:*/		return 0x821C3D38;
		  /* 821C3D38h */ case   37:  		/* bc 4, CR6_EQ, 32 */
		/* 821C3D38h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821C3D58;  }
		/* 821C3D38h case   37:*/		return 0x821C3D3C;
		  /* 821C3D3Ch */ case   38:  		/* mr R3, R27 */
		/* 821C3D3Ch case   38:*/		regs.R3 = regs.R27;
		/* 821C3D3Ch case   38:*/		return 0x821C3D40;
		  /* 821C3D40h */ case   39:  		/* lwz R5, <#[R4 + 12]> */
		/* 821C3D40h case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C3D40h case   39:*/		return 0x821C3D44;
		  /* 821C3D44h */ case   40:  		/* bl -339028 */
		/* 821C3D44h case   40:*/		regs.LR = 0x821C3D48; return 0x821710F0;
		/* 821C3D44h case   40:*/		return 0x821C3D48;
		  /* 821C3D48h */ case   41:  		/* li R4, 4 */
		/* 821C3D48h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821C3D48h case   41:*/		return 0x821C3D4C;
		  /* 821C3D4Ch */ case   42:  		/* mr R29, R3 */
		/* 821C3D4Ch case   42:*/		regs.R29 = regs.R3;
		/* 821C3D4Ch case   42:*/		return 0x821C3D50;
		  /* 821C3D50h */ case   43:  		/* bl -311952 */
		/* 821C3D50h case   43:*/		regs.LR = 0x821C3D54; return 0x82177AC0;
		/* 821C3D50h case   43:*/		return 0x821C3D54;
		  /* 821C3D54h */ case   44:  		/* mr R4, R29 */
		/* 821C3D54h case   44:*/		regs.R4 = regs.R29;
		/* 821C3D54h case   44:*/		return 0x821C3D58;
	}
	return 0x821C3D58;
} // Block from 821C3CA4h-821C3D58h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821C3D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3D58);
		  /* 821C3D58h */ case    0:  		/* mr R3, R30 */
		/* 821C3D58h case    0:*/		regs.R3 = regs.R30;
		/* 821C3D58h case    0:*/		return 0x821C3D5C;
		  /* 821C3D5Ch */ case    1:  		/* bl -310164 */
		/* 821C3D5Ch case    1:*/		regs.LR = 0x821C3D60; return 0x821781C8;
		/* 821C3D5Ch case    1:*/		return 0x821C3D60;
		  /* 821C3D60h */ case    2:  		/* stw R3, <#[R30 + 48]> */
		/* 821C3D60h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C3D60h case    2:*/		return 0x821C3D64;
		  /* 821C3D64h */ case    3:  		/* addi R8, R31, 4 */
		/* 821C3D64h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C3D64h case    3:*/		return 0x821C3D68;
		  /* 821C3D68h */ case    4:  		/* lwz R11, <#[R8]> */
		/* 821C3D68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3D68h case    4:*/		return 0x821C3D6C;
		  /* 821C3D6Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C3D6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3D6Ch case    5:*/		return 0x821C3D70;
		  /* 821C3D70h */ case    6:  		/* bc 12, CR6_EQ, 1072 */
		/* 821C3D70h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C3D70h case    6:*/		return 0x821C3D74;
		  /* 821C3D74h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C3D74h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C3D74h case    7:*/		return 0x821C3D78;
		  /* 821C3D78h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821C3D78h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C3D78h case    8:*/		return 0x821C3D7C;
		  /* 821C3D7Ch */ case    9:  		/* bc 12, CR6_EQ, 128 */
		/* 821C3D7Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821C3DFC;  }
		/* 821C3D7Ch case    9:*/		return 0x821C3D80;
		  /* 821C3D80h */ case   10:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C3D80h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3D80h case   10:*/		return 0x821C3D84;
		  /* 821C3D84h */ case   11:  		/* addi R10, R10, 4 */
		/* 821C3D84h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C3D84h case   11:*/		return 0x821C3D88;
		  /* 821C3D88h */ case   12:  		/* lwz R9, <#[R10]> */
		/* 821C3D88h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3D88h case   12:*/		return 0x821C3D8C;
		  /* 821C3D8Ch */ case   13:  		/* b 12 */
		/* 821C3D8Ch case   13:*/		return 0x821C3D98;
		/* 821C3D8Ch case   13:*/		return 0x821C3D90;
		  /* 821C3D90h */ case   14:  		/* addi R10, R9, 8 */
		/* 821C3D90h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C3D90h case   14:*/		return 0x821C3D94;
		  /* 821C3D94h */ case   15:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C3D94h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C3D94h case   15:*/		return 0x821C3D98;
	}
	return 0x821C3D98;
} // Block from 821C3D58h-821C3D98h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C3D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3D98);
		  /* 821C3D98h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C3D98h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C3D98h case    0:*/		return 0x821C3D9C;
		  /* 821C3D9Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3D9Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C3D90;  }
		/* 821C3D9Ch case    1:*/		return 0x821C3DA0;
		  /* 821C3DA0h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C3DA0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3DA0h case    2:*/		return 0x821C3DA4;
		  /* 821C3DA4h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C3DA4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3DA4h case    3:*/		return 0x821C3DA8;
		  /* 821C3DA8h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C3DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3DA8h case    4:*/		return 0x821C3DAC;
		  /* 821C3DACh */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C3DACh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3DACh case    5:*/		return 0x821C3DB0;
		  /* 821C3DB0h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C3DB0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3DB0h case    6:*/		return 0x821C3DB4;
		  /* 821C3DB4h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C3DB4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3DB4h case    7:*/		return 0x821C3DB8;
		  /* 821C3DB8h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C3DB8h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3DB8h case    8:*/		return 0x821C3DBC;
		  /* 821C3DBCh */ case    9:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C3DBCh case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C3DBCh case    9:*/		return 0x821C3DC0;
		  /* 821C3DC0h */ case   10:  		/* stw R30, <#[R11 + 12]> */
		/* 821C3DC0h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3DC0h case   10:*/		return 0x821C3DC4;
		  /* 821C3DC4h */ case   11:  		/* srw R9, R23, R9 */
		/* 821C3DC4h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3DC4h case   11:*/		return 0x821C3DC8;
		  /* 821C3DC8h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C3DC8h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C3DC8h case   12:*/		return 0x821C3DCC;
		  /* 821C3DCCh */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C3DCCh case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C3DCCh case   13:*/		return 0x821C3DD0;
		  /* 821C3DD0h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C3DD0h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3DD0h case   14:*/		return 0x821C3DD4;
		  /* 821C3DD4h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C3DD4h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C3DD4h case   15:*/		return 0x821C3DD8;
		  /* 821C3DD8h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C3DD8h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3DD8h case   16:*/		return 0x821C3DDC;
		  /* 821C3DDCh */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C3DDCh case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C3DDCh case   17:*/		return 0x821C3DE0;
		  /* 821C3DE0h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C3DE0h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C3DE0h case   18:*/		return 0x821C3DE4;
		  /* 821C3DE4h */ case   19:  		/* srw R7, R23, R6 */
		/* 821C3DE4h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C3DE4h case   19:*/		return 0x821C3DE8;
		  /* 821C3DE8h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C3DE8h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C3DE8h case   20:*/		return 0x821C3DEC;
		  /* 821C3DECh */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C3DECh case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C3DECh case   21:*/		return 0x821C3DF0;
		  /* 821C3DF0h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C3DF0h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C3DF0h case   22:*/		return 0x821C3DF4;
		  /* 821C3DF4h */ case   23:  		/* or R10, R9, R10 */
		/* 821C3DF4h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C3DF4h case   23:*/		return 0x821C3DF8;
		  /* 821C3DF8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C3DF8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3DF8h case   24:*/		return 0x821C3DFC;
	}
	return 0x821C3DFC;
} // Block from 821C3D98h-821C3DFCh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C3DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3DFC);
		  /* 821C3DFCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C3DFCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3DFCh case    0:*/		return 0x821C3E00;
		  /* 821C3E00h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C3E00h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C3E00h case    1:*/		return 0x821C3E04;
		  /* 821C3E04h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C3E04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C3D68;  }
		/* 821C3E04h case    2:*/		return 0x821C3E08;
		  /* 821C3E08h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C3E08h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C3E08h case    3:*/		return 0x821C3E0C;
		  /* 821C3E0Ch */ case    4:  		/* b -164 */
		/* 821C3E0Ch case    4:*/		return 0x821C3D68;
		/* 821C3E0Ch case    4:*/		return 0x821C3E10;
		  /* 821C3E10h */ case    5:  		/* mr R6, R20 */
		/* 821C3E10h case    5:*/		regs.R6 = regs.R20;
		/* 821C3E10h case    5:*/		return 0x821C3E14;
		  /* 821C3E14h */ case    6:  		/* b 8 */
		/* 821C3E14h case    6:*/		return 0x821C3E1C;
		/* 821C3E14h case    6:*/		return 0x821C3E18;
		  /* 821C3E18h */ case    7:  		/* li R6, 2 */
		/* 821C3E18h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C3E18h case    7:*/		return 0x821C3E1C;
	}
	return 0x821C3E1C;
} // Block from 821C3DFCh-821C3E1Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C3E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3E1C);
		  /* 821C3E1Ch */ case    0:  		/* li R8, 1 */
		/* 821C3E1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C3E1Ch case    0:*/		return 0x821C3E20;
		  /* 821C3E20h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C3E20h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C3E20h case    1:*/		return 0x821C3E24;
		  /* 821C3E24h */ case    2:  		/* li R7, 2 */
		/* 821C3E24h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C3E24h case    2:*/		return 0x821C3E28;
		  /* 821C3E28h */ case    3:  		/* li R5, 0 */
		/* 821C3E28h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3E28h case    3:*/		return 0x821C3E2C;
		  /* 821C3E2Ch */ case    4:  		/* mr R3, R27 */
		/* 821C3E2Ch case    4:*/		regs.R3 = regs.R27;
		/* 821C3E2Ch case    4:*/		return 0x821C3E30;
		  /* 821C3E30h */ case    5:  		/* bl 396136 */
		/* 821C3E30h case    5:*/		regs.LR = 0x821C3E34; return 0x82224998;
		/* 821C3E30h case    5:*/		return 0x821C3E34;
		  /* 821C3E34h */ case    6:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C3E34h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C3E34h case    6:*/		return 0x821C3E38;
		  /* 821C3E38h */ case    7:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C3E38h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C3E38h case    7:*/		return 0x821C3E3C;
		  /* 821C3E3Ch */ case    8:  		/* addi R11, R11, 36 */
		/* 821C3E3Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C3E3Ch case    8:*/		return 0x821C3E40;
		  /* 821C3E40h */ case    9:  		/* addi R10, R10, 36 */
		/* 821C3E40h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C3E40h case    9:*/		return 0x821C3E44;
		  /* 821C3E44h */ case   10:  		/* addi R8, R11, -36 */
		/* 821C3E44h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C3E44h case   10:*/		return 0x821C3E48;
		  /* 821C3E48h */ case   11:  		/* addi R6, R10, -36 */
		/* 821C3E48h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C3E48h case   11:*/		return 0x821C3E4C;
		  /* 821C3E4Ch */ case   12:  		/* addi R9, R10, 4 */
		/* 821C3E4Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C3E4Ch case   12:*/		return 0x821C3E50;
		  /* 821C3E50h */ case   13:  		/* lwz R7, <#[R11]> */
		/* 821C3E50h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3E50h case   13:*/		return 0x821C3E54;
		  /* 821C3E54h */ case   14:  		/* mr R30, R3 */
		/* 821C3E54h case   14:*/		regs.R30 = regs.R3;
		/* 821C3E54h case   14:*/		return 0x821C3E58;
		  /* 821C3E58h */ case   15:  		/* stw R7, <#[R10]> */
		/* 821C3E58h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3E58h case   15:*/		return 0x821C3E5C;
		  /* 821C3E5Ch */ case   16:  		/* lwz R7, <#[R11]> */
		/* 821C3E5Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3E5Ch case   16:*/		return 0x821C3E60;
		  /* 821C3E60h */ case   17:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C3E60h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C3E60h case   17:*/		return 0x821C3E64;
		  /* 821C3E64h */ case   18:  		/* stw R6, <#[R7]> */
		/* 821C3E64h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C3E64h case   18:*/		return 0x821C3E68;
		  /* 821C3E68h */ case   19:  		/* stw R8, <#[R10 + 4]> */
		/* 821C3E68h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C3E68h case   19:*/		return 0x821C3E6C;
		  /* 821C3E6Ch */ case   20:  		/* stw R9, <#[R11]> */
		/* 821C3E6Ch case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3E6Ch case   20:*/		return 0x821C3E70;
		  /* 821C3E70h */ case   21:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C3E70h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C3E70h case   21:*/		return 0x821C3E74;
		  /* 821C3E74h */ case   22:  		/* bl -310444 */
		/* 821C3E74h case   22:*/		regs.LR = 0x821C3E78; return 0x821781C8;
		/* 821C3E74h case   22:*/		return 0x821C3E78;
		  /* 821C3E78h */ case   23:  		/* stw R3, <#[R30 + 44]> */
		/* 821C3E78h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C3E78h case   23:*/		return 0x821C3E7C;
		  /* 821C3E7Ch */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C3E7Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C3E7Ch case   24:*/		return 0x821C3E80;
		  /* 821C3E80h */ case   25:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C3E80h case   25:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C3E80h case   25:*/		return 0x821C3E84;
		  /* 821C3E84h */ case   26:  		/* lwz R4, <#[R31 + 48]> */
		/* 821C3E84h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821C3E84h case   26:*/		return 0x821C3E88;
		  /* 821C3E88h */ case   27:  		/* cmplwi CR6, R11, 78 */
		/* 821C3E88h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000004E);
		/* 821C3E88h case   27:*/		return 0x821C3E8C;
		  /* 821C3E8Ch */ case   28:  		/* bc 12, CR6_EQ, 12 */
		/* 821C3E8Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x821C3E98;  }
		/* 821C3E8Ch case   28:*/		return 0x821C3E90;
		  /* 821C3E90h */ case   29:  		/* cmplwi CR6, R11, 79 */
		/* 821C3E90h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000004F);
		/* 821C3E90h case   29:*/		return 0x821C3E94;
		  /* 821C3E94h */ case   30:  		/* bc 4, CR6_EQ, 32 */
		/* 821C3E94h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821C3EB4;  }
		/* 821C3E94h case   30:*/		return 0x821C3E98;
	}
	return 0x821C3E98;
} // Block from 821C3E1Ch-821C3E98h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821C3E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3E98);
		  /* 821C3E98h */ case    0:  		/* mr R3, R27 */
		/* 821C3E98h case    0:*/		regs.R3 = regs.R27;
		/* 821C3E98h case    0:*/		return 0x821C3E9C;
		  /* 821C3E9Ch */ case    1:  		/* lwz R5, <#[R4 + 12]> */
		/* 821C3E9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C3E9Ch case    1:*/		return 0x821C3EA0;
		  /* 821C3EA0h */ case    2:  		/* bl -339376 */
		/* 821C3EA0h case    2:*/		regs.LR = 0x821C3EA4; return 0x821710F0;
		/* 821C3EA0h case    2:*/		return 0x821C3EA4;
		  /* 821C3EA4h */ case    3:  		/* li R4, 4 */
		/* 821C3EA4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821C3EA4h case    3:*/		return 0x821C3EA8;
		  /* 821C3EA8h */ case    4:  		/* mr R29, R3 */
		/* 821C3EA8h case    4:*/		regs.R29 = regs.R3;
		/* 821C3EA8h case    4:*/		return 0x821C3EAC;
		  /* 821C3EACh */ case    5:  		/* bl -312300 */
		/* 821C3EACh case    5:*/		regs.LR = 0x821C3EB0; return 0x82177AC0;
		/* 821C3EACh case    5:*/		return 0x821C3EB0;
		  /* 821C3EB0h */ case    6:  		/* mr R4, R29 */
		/* 821C3EB0h case    6:*/		regs.R4 = regs.R29;
		/* 821C3EB0h case    6:*/		return 0x821C3EB4;
	}
	return 0x821C3EB4;
} // Block from 821C3E98h-821C3EB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C3EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3EB4);
		  /* 821C3EB4h */ case    0:  		/* mr R3, R30 */
		/* 821C3EB4h case    0:*/		regs.R3 = regs.R30;
		/* 821C3EB4h case    0:*/		return 0x821C3EB8;
		  /* 821C3EB8h */ case    1:  		/* bl -310512 */
		/* 821C3EB8h case    1:*/		regs.LR = 0x821C3EBC; return 0x821781C8;
		/* 821C3EB8h case    1:*/		return 0x821C3EBC;
		  /* 821C3EBCh */ case    2:  		/* stw R3, <#[R30 + 48]> */
		/* 821C3EBCh case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C3EBCh case    2:*/		return 0x821C3EC0;
		  /* 821C3EC0h */ case    3:  		/* addi R8, R31, 4 */
		/* 821C3EC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C3EC0h case    3:*/		return 0x821C3EC4;
		  /* 821C3EC4h */ case    4:  		/* lwz R11, <#[R8]> */
		/* 821C3EC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3EC4h case    4:*/		return 0x821C3EC8;
		  /* 821C3EC8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C3EC8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C3EC8h case    5:*/		return 0x821C3ECC;
		  /* 821C3ECCh */ case    6:  		/* bc 12, CR6_EQ, 724 */
		/* 821C3ECCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C3ECCh case    6:*/		return 0x821C3ED0;
		  /* 821C3ED0h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C3ED0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C3ED0h case    7:*/		return 0x821C3ED4;
		  /* 821C3ED4h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821C3ED4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C3ED4h case    8:*/		return 0x821C3ED8;
		  /* 821C3ED8h */ case    9:  		/* bc 12, CR6_EQ, 128 */
		/* 821C3ED8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C3F58;  }
		/* 821C3ED8h case    9:*/		return 0x821C3EDC;
		  /* 821C3EDCh */ case   10:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C3EDCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3EDCh case   10:*/		return 0x821C3EE0;
		  /* 821C3EE0h */ case   11:  		/* addi R10, R10, 4 */
		/* 821C3EE0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C3EE0h case   11:*/		return 0x821C3EE4;
		  /* 821C3EE4h */ case   12:  		/* lwz R9, <#[R10]> */
		/* 821C3EE4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3EE4h case   12:*/		return 0x821C3EE8;
		  /* 821C3EE8h */ case   13:  		/* b 12 */
		/* 821C3EE8h case   13:*/		return 0x821C3EF4;
		/* 821C3EE8h case   13:*/		return 0x821C3EEC;
		  /* 821C3EECh */ case   14:  		/* addi R10, R9, 8 */
		/* 821C3EECh case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C3EECh case   14:*/		return 0x821C3EF0;
		  /* 821C3EF0h */ case   15:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C3EF0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C3EF0h case   15:*/		return 0x821C3EF4;
	}
	return 0x821C3EF4;
} // Block from 821C3EB4h-821C3EF4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C3EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3EF4);
		  /* 821C3EF4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C3EF4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C3EF4h case    0:*/		return 0x821C3EF8;
		  /* 821C3EF8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C3EF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C3EEC;  }
		/* 821C3EF8h case    1:*/		return 0x821C3EFC;
		  /* 821C3EFCh */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C3EFCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3EFCh case    2:*/		return 0x821C3F00;
		  /* 821C3F00h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C3F00h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3F00h case    3:*/		return 0x821C3F04;
		  /* 821C3F04h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C3F04h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3F04h case    4:*/		return 0x821C3F08;
		  /* 821C3F08h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C3F08h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C3F08h case    5:*/		return 0x821C3F0C;
		  /* 821C3F0Ch */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C3F0Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C3F0Ch case    6:*/		return 0x821C3F10;
		  /* 821C3F10h */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 821C3F10h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C3F10h case    7:*/		return 0x821C3F14;
		  /* 821C3F14h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C3F14h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3F14h case    8:*/		return 0x821C3F18;
		  /* 821C3F18h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C3F18h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3F18h case    9:*/		return 0x821C3F1C;
		  /* 821C3F1Ch */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C3F1Ch case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C3F1Ch case   10:*/		return 0x821C3F20;
		  /* 821C3F20h */ case   11:  		/* srw R9, R23, R9 */
		/* 821C3F20h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3F20h case   11:*/		return 0x821C3F24;
		  /* 821C3F24h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C3F24h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C3F24h case   12:*/		return 0x821C3F28;
		  /* 821C3F28h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C3F28h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C3F28h case   13:*/		return 0x821C3F2C;
		  /* 821C3F2Ch */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C3F2Ch case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C3F2Ch case   14:*/		return 0x821C3F30;
		  /* 821C3F30h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C3F30h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C3F30h case   15:*/		return 0x821C3F34;
		  /* 821C3F34h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C3F34h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C3F34h case   16:*/		return 0x821C3F38;
		  /* 821C3F38h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C3F38h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C3F38h case   17:*/		return 0x821C3F3C;
		  /* 821C3F3Ch */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C3F3Ch case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C3F3Ch case   18:*/		return 0x821C3F40;
		  /* 821C3F40h */ case   19:  		/* srw R7, R23, R6 */
		/* 821C3F40h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C3F40h case   19:*/		return 0x821C3F44;
		  /* 821C3F44h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C3F44h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C3F44h case   20:*/		return 0x821C3F48;
		  /* 821C3F48h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C3F48h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C3F48h case   21:*/		return 0x821C3F4C;
		  /* 821C3F4Ch */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C3F4Ch case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C3F4Ch case   22:*/		return 0x821C3F50;
		  /* 821C3F50h */ case   23:  		/* or R10, R9, R10 */
		/* 821C3F50h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C3F50h case   23:*/		return 0x821C3F54;
		  /* 821C3F54h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C3F54h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3F54h case   24:*/		return 0x821C3F58;
	}
	return 0x821C3F58;
} // Block from 821C3EF4h-821C3F58h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C3F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3F58);
		  /* 821C3F58h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C3F58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C3F58h case    0:*/		return 0x821C3F5C;
		  /* 821C3F5Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C3F5Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C3F5Ch case    1:*/		return 0x821C3F60;
		  /* 821C3F60h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C3F60h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C3EC4;  }
		/* 821C3F60h case    2:*/		return 0x821C3F64;
		  /* 821C3F64h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C3F64h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C3F64h case    3:*/		return 0x821C3F68;
		  /* 821C3F68h */ case    4:  		/* b -164 */
		/* 821C3F68h case    4:*/		return 0x821C3EC4;
		/* 821C3F68h case    4:*/		return 0x821C3F6C;
		  /* 821C3F6Ch */ case    5:  		/* li R6, 5 */
		/* 821C3F6Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x5);
		/* 821C3F6Ch case    5:*/		return 0x821C3F70;
		  /* 821C3F70h */ case    6:  		/* b 48 */
		/* 821C3F70h case    6:*/		return 0x821C3FA0;
		/* 821C3F70h case    6:*/		return 0x821C3F74;
		  /* 821C3F74h */ case    7:  		/* li R6, 6 */
		/* 821C3F74h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x6);
		/* 821C3F74h case    7:*/		return 0x821C3F78;
		  /* 821C3F78h */ case    8:  		/* b 40 */
		/* 821C3F78h case    8:*/		return 0x821C3FA0;
		/* 821C3F78h case    8:*/		return 0x821C3F7C;
		  /* 821C3F7Ch */ case    9:  		/* li R6, 7 */
		/* 821C3F7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x7);
		/* 821C3F7Ch case    9:*/		return 0x821C3F80;
		  /* 821C3F80h */ case   10:  		/* b 32 */
		/* 821C3F80h case   10:*/		return 0x821C3FA0;
		/* 821C3F80h case   10:*/		return 0x821C3F84;
		  /* 821C3F84h */ case   11:  		/* li R6, 8 */
		/* 821C3F84h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 821C3F84h case   11:*/		return 0x821C3F88;
		  /* 821C3F88h */ case   12:  		/* b 24 */
		/* 821C3F88h case   12:*/		return 0x821C3FA0;
		/* 821C3F88h case   12:*/		return 0x821C3F8C;
		  /* 821C3F8Ch */ case   13:  		/* li R6, 25 */
		/* 821C3F8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x19);
		/* 821C3F8Ch case   13:*/		return 0x821C3F90;
		  /* 821C3F90h */ case   14:  		/* b 16 */
		/* 821C3F90h case   14:*/		return 0x821C3FA0;
		/* 821C3F90h case   14:*/		return 0x821C3F94;
		  /* 821C3F94h */ case   15:  		/* li R6, 26 */
		/* 821C3F94h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821C3F94h case   15:*/		return 0x821C3F98;
		  /* 821C3F98h */ case   16:  		/* b 8 */
		/* 821C3F98h case   16:*/		return 0x821C3FA0;
		/* 821C3F98h case   16:*/		return 0x821C3F9C;
		  /* 821C3F9Ch */ case   17:  		/* li R6, 28 */
		/* 821C3F9Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x1C);
		/* 821C3F9Ch case   17:*/		return 0x821C3FA0;
	}
	return 0x821C3FA0;
} // Block from 821C3F58h-821C3FA0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C3FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C3FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C3FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C3FA0);
		  /* 821C3FA0h */ case    0:  		/* li R8, 1 */
		/* 821C3FA0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C3FA0h case    0:*/		return 0x821C3FA4;
		  /* 821C3FA4h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C3FA4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C3FA4h case    1:*/		return 0x821C3FA8;
		  /* 821C3FA8h */ case    2:  		/* li R7, 2 */
		/* 821C3FA8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C3FA8h case    2:*/		return 0x821C3FAC;
		  /* 821C3FACh */ case    3:  		/* li R5, 0 */
		/* 821C3FACh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C3FACh case    3:*/		return 0x821C3FB0;
		  /* 821C3FB0h */ case    4:  		/* mr R3, R27 */
		/* 821C3FB0h case    4:*/		regs.R3 = regs.R27;
		/* 821C3FB0h case    4:*/		return 0x821C3FB4;
		  /* 821C3FB4h */ case    5:  		/* bl 395748 */
		/* 821C3FB4h case    5:*/		regs.LR = 0x821C3FB8; return 0x82224998;
		/* 821C3FB4h case    5:*/		return 0x821C3FB8;
		  /* 821C3FB8h */ case    6:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C3FB8h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C3FB8h case    6:*/		return 0x821C3FBC;
		  /* 821C3FBCh */ case    7:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C3FBCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C3FBCh case    7:*/		return 0x821C3FC0;
		  /* 821C3FC0h */ case    8:  		/* fmr FR4, FR31 */
		/* 821C3FC0h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C3FC0h case    8:*/		return 0x821C3FC4;
		  /* 821C3FC4h */ case    9:  		/* addi R11, R11, 36 */
		/* 821C3FC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C3FC4h case    9:*/		return 0x821C3FC8;
		  /* 821C3FC8h */ case   10:  		/* fmr FR3, FR31 */
		/* 821C3FC8h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C3FC8h case   10:*/		return 0x821C3FCC;
		  /* 821C3FCCh */ case   11:  		/* addi R10, R10, 36 */
		/* 821C3FCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C3FCCh case   11:*/		return 0x821C3FD0;
		  /* 821C3FD0h */ case   12:  		/* fmr FR2, FR31 */
		/* 821C3FD0h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C3FD0h case   12:*/		return 0x821C3FD4;
		  /* 821C3FD4h */ case   13:  		/* addi R8, R11, -36 */
		/* 821C3FD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C3FD4h case   13:*/		return 0x821C3FD8;
		  /* 821C3FD8h */ case   14:  		/* fmr FR1, FR31 */
		/* 821C3FD8h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C3FD8h case   14:*/		return 0x821C3FDC;
		  /* 821C3FDCh */ case   15:  		/* addi R6, R10, -36 */
		/* 821C3FDCh case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C3FDCh case   15:*/		return 0x821C3FE0;
		  /* 821C3FE0h */ case   16:  		/* addi R9, R10, 4 */
		/* 821C3FE0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C3FE0h case   16:*/		return 0x821C3FE4;
		  /* 821C3FE4h */ case   17:  		/* lwz R7, <#[R11]> */
		/* 821C3FE4h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3FE4h case   17:*/		return 0x821C3FE8;
		  /* 821C3FE8h */ case   18:  		/* mr R30, R3 */
		/* 821C3FE8h case   18:*/		regs.R30 = regs.R3;
		/* 821C3FE8h case   18:*/		return 0x821C3FEC;
		  /* 821C3FECh */ case   19:  		/* li R4, 1 */
		/* 821C3FECh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C3FECh case   19:*/		return 0x821C3FF0;
		  /* 821C3FF0h */ case   20:  		/* mr R3, R27 */
		/* 821C3FF0h case   20:*/		regs.R3 = regs.R27;
		/* 821C3FF0h case   20:*/		return 0x821C3FF4;
		  /* 821C3FF4h */ case   21:  		/* stw R7, <#[R10]> */
		/* 821C3FF4h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C3FF4h case   21:*/		return 0x821C3FF8;
		  /* 821C3FF8h */ case   22:  		/* lwz R7, <#[R11]> */
		/* 821C3FF8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C3FF8h case   22:*/		return 0x821C3FFC;
		  /* 821C3FFCh */ case   23:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C3FFCh case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C3FFCh case   23:*/		return 0x821C4000;
		  /* 821C4000h */ case   24:  		/* stw R6, <#[R7]> */
		/* 821C4000h case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C4000h case   24:*/		return 0x821C4004;
		  /* 821C4004h */ case   25:  		/* stw R8, <#[R10 + 4]> */
		/* 821C4004h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C4004h case   25:*/		return 0x821C4008;
		  /* 821C4008h */ case   26:  		/* stw R9, <#[R11]> */
		/* 821C4008h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4008h case   26:*/		return 0x821C400C;
		  /* 821C400Ch */ case   27:  		/* bl 420684 */
		/* 821C400Ch case   27:*/		regs.LR = 0x821C4010; return 0x8222AB58;
		/* 821C400Ch case   27:*/		return 0x821C4010;
		  /* 821C4010h */ case   28:  		/* mr R29, R3 */
		/* 821C4010h case   28:*/		regs.R29 = regs.R3;
		/* 821C4010h case   28:*/		return 0x821C4014;
		  /* 821C4014h */ case   29:  		/* li R5, 0 */
		/* 821C4014h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4014h case   29:*/		return 0x821C4018;
		  /* 821C4018h */ case   30:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C4018h case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C4018h case   30:*/		return 0x821C401C;
		  /* 821C401Ch */ case   31:  		/* mr R3, R27 */
		/* 821C401Ch case   31:*/		regs.R3 = regs.R27;
		/* 821C401Ch case   31:*/		return 0x821C4020;
		  /* 821C4020h */ case   32:  		/* bl -22144 */
		/* 821C4020h case   32:*/		regs.LR = 0x821C4024; return 0x821BE9A0;
		/* 821C4020h case   32:*/		return 0x821C4024;
		  /* 821C4024h */ case   33:  		/* mr R4, R3 */
		/* 821C4024h case   33:*/		regs.R4 = regs.R3;
		/* 821C4024h case   33:*/		return 0x821C4028;
		  /* 821C4028h */ case   34:  		/* mr R3, R30 */
		/* 821C4028h case   34:*/		regs.R3 = regs.R30;
		/* 821C4028h case   34:*/		return 0x821C402C;
		  /* 821C402Ch */ case   35:  		/* bl -310884 */
		/* 821C402Ch case   35:*/		regs.LR = 0x821C4030; return 0x821781C8;
		/* 821C402Ch case   35:*/		return 0x821C4030;
		  /* 821C4030h */ case   36:  		/* stw R3, <#[R30 + 44]> */
		/* 821C4030h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C4030h case   36:*/		return 0x821C4034;
		  /* 821C4034h */ case   37:  		/* li R5, 0 */
		/* 821C4034h case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4034h case   37:*/		return 0x821C4038;
		  /* 821C4038h */ case   38:  		/* mr R4, R29 */
		/* 821C4038h case   38:*/		regs.R4 = regs.R29;
		/* 821C4038h case   38:*/		return 0x821C403C;
		  /* 821C403Ch */ case   39:  		/* mr R3, R27 */
		/* 821C403Ch case   39:*/		regs.R3 = regs.R27;
		/* 821C403Ch case   39:*/		return 0x821C4040;
		  /* 821C4040h */ case   40:  		/* bl -311088 */
		/* 821C4040h case   40:*/		regs.LR = 0x821C4044; return 0x82178110;
		/* 821C4040h case   40:*/		return 0x821C4044;
		  /* 821C4044h */ case   41:  		/* mr R4, R3 */
		/* 821C4044h case   41:*/		regs.R4 = regs.R3;
		/* 821C4044h case   41:*/		return 0x821C4048;
		  /* 821C4048h */ case   42:  		/* mr R3, R30 */
		/* 821C4048h case   42:*/		regs.R3 = regs.R30;
		/* 821C4048h case   42:*/		return 0x821C404C;
		  /* 821C404Ch */ case   43:  		/* bl -310916 */
		/* 821C404Ch case   43:*/		regs.LR = 0x821C4050; return 0x821781C8;
		/* 821C404Ch case   43:*/		return 0x821C4050;
		  /* 821C4050h */ case   44:  		/* stw R3, <#[R30 + 48]> */
		/* 821C4050h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C4050h case   44:*/		return 0x821C4054;
		  /* 821C4054h */ case   45:  		/* addi R8, R31, 4 */
		/* 821C4054h case   45:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C4054h case   45:*/		return 0x821C4058;
		  /* 821C4058h */ case   46:  		/* lwz R11, <#[R8]> */
		/* 821C4058h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4058h case   46:*/		return 0x821C405C;
		  /* 821C405Ch */ case   47:  		/* cmplwi CR6, R11, 0 */
		/* 821C405Ch case   47:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C405Ch case   47:*/		return 0x821C4060;
		  /* 821C4060h */ case   48:  		/* bc 12, CR6_EQ, 160 */
		/* 821C4060h case   48:*/		if ( regs.CR[6].eq ) { return 0x821C4100;  }
		/* 821C4060h case   48:*/		return 0x821C4064;
		  /* 821C4064h */ case   49:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C4064h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C4064h case   49:*/		return 0x821C4068;
		  /* 821C4068h */ case   50:  		/* cmplwi CR6, R10, 0 */
		/* 821C4068h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C4068h case   50:*/		return 0x821C406C;
		  /* 821C406Ch */ case   51:  		/* bc 12, CR6_EQ, 128 */
		/* 821C406Ch case   51:*/		if ( regs.CR[6].eq ) { return 0x821C40EC;  }
		/* 821C406Ch case   51:*/		return 0x821C4070;
		  /* 821C4070h */ case   52:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C4070h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C4070h case   52:*/		return 0x821C4074;
		  /* 821C4074h */ case   53:  		/* addi R10, R10, 4 */
		/* 821C4074h case   53:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C4074h case   53:*/		return 0x821C4078;
		  /* 821C4078h */ case   54:  		/* lwz R9, <#[R10]> */
		/* 821C4078h case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4078h case   54:*/		return 0x821C407C;
		  /* 821C407Ch */ case   55:  		/* b 12 */
		/* 821C407Ch case   55:*/		return 0x821C4088;
		/* 821C407Ch case   55:*/		return 0x821C4080;
		  /* 821C4080h */ case   56:  		/* addi R10, R9, 8 */
		/* 821C4080h case   56:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C4080h case   56:*/		return 0x821C4084;
		  /* 821C4084h */ case   57:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C4084h case   57:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C4084h case   57:*/		return 0x821C4088;
	}
	return 0x821C4088;
} // Block from 821C3FA0h-821C4088h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821C4088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4088);
		  /* 821C4088h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C4088h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C4088h case    0:*/		return 0x821C408C;
		  /* 821C408Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C408Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C4080;  }
		/* 821C408Ch case    1:*/		return 0x821C4090;
		  /* 821C4090h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C4090h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C4090h case    2:*/		return 0x821C4094;
		  /* 821C4094h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C4094h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4094h case    3:*/		return 0x821C4098;
		  /* 821C4098h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C4098h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C4098h case    4:*/		return 0x821C409C;
		  /* 821C409Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C409Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C409Ch case    5:*/		return 0x821C40A0;
		  /* 821C40A0h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C40A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C40A0h case    6:*/		return 0x821C40A4;
		  /* 821C40A4h */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 821C40A4h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C40A4h case    7:*/		return 0x821C40A8;
		  /* 821C40A8h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C40A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C40A8h case    8:*/		return 0x821C40AC;
		  /* 821C40ACh */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C40ACh case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C40ACh case    9:*/		return 0x821C40B0;
		  /* 821C40B0h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C40B0h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C40B0h case   10:*/		return 0x821C40B4;
		  /* 821C40B4h */ case   11:  		/* srw R9, R23, R9 */
		/* 821C40B4h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C40B4h case   11:*/		return 0x821C40B8;
		  /* 821C40B8h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C40B8h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C40B8h case   12:*/		return 0x821C40BC;
		  /* 821C40BCh */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C40BCh case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C40BCh case   13:*/		return 0x821C40C0;
		  /* 821C40C0h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C40C0h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C40C0h case   14:*/		return 0x821C40C4;
		  /* 821C40C4h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C40C4h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C40C4h case   15:*/		return 0x821C40C8;
		  /* 821C40C8h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C40C8h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C40C8h case   16:*/		return 0x821C40CC;
		  /* 821C40CCh */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C40CCh case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C40CCh case   17:*/		return 0x821C40D0;
		  /* 821C40D0h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C40D0h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C40D0h case   18:*/		return 0x821C40D4;
		  /* 821C40D4h */ case   19:  		/* srw R7, R23, R6 */
		/* 821C40D4h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C40D4h case   19:*/		return 0x821C40D8;
		  /* 821C40D8h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C40D8h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C40D8h case   20:*/		return 0x821C40DC;
		  /* 821C40DCh */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C40DCh case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C40DCh case   21:*/		return 0x821C40E0;
		  /* 821C40E0h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C40E0h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C40E0h case   22:*/		return 0x821C40E4;
		  /* 821C40E4h */ case   23:  		/* or R10, R9, R10 */
		/* 821C40E4h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C40E4h case   23:*/		return 0x821C40E8;
		  /* 821C40E8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C40E8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C40E8h case   24:*/		return 0x821C40EC;
	}
	return 0x821C40EC;
} // Block from 821C4088h-821C40ECh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C40ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C40EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C40EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C40EC);
		  /* 821C40ECh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C40ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C40ECh case    0:*/		return 0x821C40F0;
		  /* 821C40F0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C40F0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C40F0h case    1:*/		return 0x821C40F4;
		  /* 821C40F4h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C40F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4058;  }
		/* 821C40F4h case    2:*/		return 0x821C40F8;
		  /* 821C40F8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C40F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C40F8h case    3:*/		return 0x821C40FC;
		  /* 821C40FCh */ case    4:  		/* b -164 */
		/* 821C40FCh case    4:*/		return 0x821C4058;
		/* 821C40FCh case    4:*/		return 0x821C4100;
	}
	return 0x821C4100;
} // Block from 821C40ECh-821C4100h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C4100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4100);
		  /* 821C4100h */ case    0:  		/* mr R8, R31 */
		/* 821C4100h case    0:*/		regs.R8 = regs.R31;
		/* 821C4100h case    0:*/		return 0x821C4104;
		  /* 821C4104h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C4104h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4104h case    1:*/		return 0x821C4108;
		  /* 821C4108h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C4108h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C4108h case    2:*/		return 0x821C410C;
		  /* 821C410Ch */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 821C410Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821C4164;  }
		/* 821C410Ch case    3:*/		return 0x821C4110;
		  /* 821C4110h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821C4110h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4110h case    4:*/		return 0x821C4114;
		  /* 821C4114h */ case    5:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821C4114h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821C4114h case    5:*/		return 0x821C4118;
		  /* 821C4118h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821C4118h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C4150;  }
		/* 821C4118h case    6:*/		return 0x821C411C;
		  /* 821C411Ch */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C411Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C411Ch case    7:*/		return 0x821C4120;
		  /* 821C4120h */ case    8:  		/* lwz R9, <#[R10]> */
		/* 821C4120h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4120h case    8:*/		return 0x821C4124;
		  /* 821C4124h */ case    9:  		/* b 12 */
		/* 821C4124h case    9:*/		return 0x821C4130;
		/* 821C4124h case    9:*/		return 0x821C4128;
		  /* 821C4128h */ case   10:  		/* addi R10, R9, 4 */
		/* 821C4128h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821C4128h case   10:*/		return 0x821C412C;
		  /* 821C412Ch */ case   11:  		/* lwz R9, <#[R9 + 4]> */
		/* 821C412Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821C412Ch case   11:*/		return 0x821C4130;
	}
	return 0x821C4130;
} // Block from 821C4100h-821C4130h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C4130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4130);
		  /* 821C4130h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C4130h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C4130h case    0:*/		return 0x821C4134;
		  /* 821C4134h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C4134h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C4128;  }
		/* 821C4134h case    1:*/		return 0x821C4138;
		  /* 821C4138h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821C4138h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4138h case    2:*/		return 0x821C413C;
		  /* 821C413Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C413Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C413Ch case    3:*/		return 0x821C4140;
		  /* 821C4140h */ case    4:  		/* lwz R10, <#[R30]> */
		/* 821C4140h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C4140h case    4:*/		return 0x821C4144;
		  /* 821C4144h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821C4144h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4144h case    5:*/		return 0x821C4148;
		  /* 821C4148h */ case    6:  		/* stw R11, <#[R30]> */
		/* 821C4148h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C4148h case    6:*/		return 0x821C414C;
		  /* 821C414Ch */ case    7:  		/* stw R30, <#[R11 + 16]> */
		/* 821C414Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821C414Ch case    7:*/		return 0x821C4150;
	}
	return 0x821C4150;
} // Block from 821C4130h-821C4150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4150);
		  /* 821C4150h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C4150h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4150h case    0:*/		return 0x821C4154;
		  /* 821C4154h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C4154h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C4154h case    1:*/		return 0x821C4158;
		  /* 821C4158h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821C4158h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4104;  }
		/* 821C4158h case    2:*/		return 0x821C415C;
		  /* 821C415Ch */ case    3:  		/* addi R8, R11, 4 */
		/* 821C415Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821C415Ch case    3:*/		return 0x821C4160;
		  /* 821C4160h */ case    4:  		/* b -92 */
		/* 821C4160h case    4:*/		return 0x821C4104;
		/* 821C4160h case    4:*/		return 0x821C4164;
	}
	return 0x821C4164;
} // Block from 821C4150h-821C4164h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C4164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4164);
		  /* 821C4164h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C4164h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C4164h case    0:*/		return 0x821C4168;
		  /* 821C4168h */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821C4168h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821C4168h case    1:*/		return 0x821C416C;
		  /* 821C416Ch */ case    2:  		/* bc 12, CR0_EQ, 52 */
		/* 821C416Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821C41A0;  }
		/* 821C416Ch case    2:*/		return 0x821C4170;
		  /* 821C4170h */ case    3:  		/* lwz R9, <#[R30 + 8]> */
		/* 821C4170h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821C4170h case    3:*/		return 0x821C4174;
		  /* 821C4174h */ case    4:  		/* li R10, 4 */
		/* 821C4174h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821C4174h case    4:*/		return 0x821C4178;
		  /* 821C4178h */ case    5:  		/* addi R11, R21, 92 */
		/* 821C4178h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x5C);
		/* 821C4178h case    5:*/		return 0x821C417C;
		  /* 821C417Ch */ case    6:  		/* oris R9, R9, 512 */
		/* 821C417Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x200);
		/* 821C417Ch case    6:*/		return 0x821C4180;
		  /* 821C4180h */ case    7:  		/* stw R9, <#[R30 + 8]> */
		/* 821C4180h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821C4180h case    7:*/		return 0x821C4184;
		  /* 821C4184h */ case    8:  		/* mtspr CTR, R10 */
		/* 821C4184h case    8:*/		regs.CTR = regs.R10;
		/* 821C4184h case    8:*/		return 0x821C4188;
		  /* 821C4188h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821C4188h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4188h case    9:*/		return 0x821C418C;
		  /* 821C418Ch */ case   10:  		/* cmplw CR6, R10, R31 */
		/* 821C418Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821C418Ch case   10:*/		return 0x821C4190;
		  /* 821C4190h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821C4190h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C4198;  }
		/* 821C4190h case   11:*/		return 0x821C4194;
		  /* 821C4194h */ case   12:  		/* stw R30, <#[R11]> */
		/* 821C4194h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4194h case   12:*/		return 0x821C4198;
	}
	return 0x821C4198;
} // Block from 821C4164h-821C4198h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C4198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4198);
		  /* 821C4198h */ case    0:  		/* addi R11, R11, 4 */
		/* 821C4198h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C4198h case    0:*/		return 0x821C419C;
		  /* 821C419Ch */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821C419Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821C4188;  }
		/* 821C419Ch case    1:*/		return 0x821C41A0;
	}
	return 0x821C41A0;
} // Block from 821C4198h-821C41A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C41A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C41A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C41A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C41A0);
		  /* 821C41A0h */ case    0:  		/* li R6, 1 */
		/* 821C41A0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C41A0h case    0:*/		return 0x821C41A4;
		  /* 821C41A4h */ case    1:  		/* li R5, 0 */
		/* 821C41A4h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C41A4h case    1:*/		return 0x821C41A8;
		  /* 821C41A8h */ case    2:  		/* mr R4, R31 */
		/* 821C41A8h case    2:*/		regs.R4 = regs.R31;
		/* 821C41A8h case    2:*/		return 0x821C41AC;
		  /* 821C41ACh */ case    3:  		/* mr R3, R27 */
		/* 821C41ACh case    3:*/		regs.R3 = regs.R27;
		/* 821C41ACh case    3:*/		return 0x821C41B0;
		  /* 821C41B0h */ case    4:  		/* bl 422424 */
		/* 821C41B0h case    4:*/		regs.LR = 0x821C41B4; return 0x8222B3C8;
		/* 821C41B0h case    4:*/		return 0x821C41B4;
		  /* 821C41B4h */ case    5:  		/* b 892 */
		/* 821C41B4h case    5:*/		return 0x821C4530;
		/* 821C41B4h case    5:*/		return 0x821C41B8;
		  /* 821C41B8h */ case    6:  		/* li R4, 1 */
		/* 821C41B8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C41B8h case    6:*/		return 0x821C41BC;
		  /* 821C41BCh */ case    7:  		/* fmr FR4, FR31 */
		/* 821C41BCh case    7:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C41BCh case    7:*/		return 0x821C41C0;
		  /* 821C41C0h */ case    8:  		/* mr R3, R27 */
		/* 821C41C0h case    8:*/		regs.R3 = regs.R27;
		/* 821C41C0h case    8:*/		return 0x821C41C4;
		  /* 821C41C4h */ case    9:  		/* fmr FR3, FR31 */
		/* 821C41C4h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C41C4h case    9:*/		return 0x821C41C8;
		  /* 821C41C8h */ case   10:  		/* fmr FR2, FR31 */
		/* 821C41C8h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C41C8h case   10:*/		return 0x821C41CC;
		  /* 821C41CCh */ case   11:  		/* fmr FR1, FR30 */
		/* 821C41CCh case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 821C41CCh case   11:*/		return 0x821C41D0;
		  /* 821C41D0h */ case   12:  		/* bl 420232 */
		/* 821C41D0h case   12:*/		regs.LR = 0x821C41D4; return 0x8222AB58;
		/* 821C41D0h case   12:*/		return 0x821C41D4;
		  /* 821C41D4h */ case   13:  		/* mr R30, R3 */
		/* 821C41D4h case   13:*/		regs.R30 = regs.R3;
		/* 821C41D4h case   13:*/		return 0x821C41D8;
		  /* 821C41D8h */ case   14:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C41D8h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C41D8h case   14:*/		return 0x821C41DC;
		  /* 821C41DCh */ case   15:  		/* li R5, 0 */
		/* 821C41DCh case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C41DCh case   15:*/		return 0x821C41E0;
		  /* 821C41E0h */ case   16:  		/* mr R3, R27 */
		/* 821C41E0h case   16:*/		regs.R3 = regs.R27;
		/* 821C41E0h case   16:*/		return 0x821C41E4;
		  /* 821C41E4h */ case   17:  		/* bl -22596 */
		/* 821C41E4h case   17:*/		regs.LR = 0x821C41E8; return 0x821BE9A0;
		/* 821C41E4h case   17:*/		return 0x821C41E8;
		  /* 821C41E8h */ case   18:  		/* mr R29, R3 */
		/* 821C41E8h case   18:*/		regs.R29 = regs.R3;
		/* 821C41E8h case   18:*/		return 0x821C41EC;
		  /* 821C41ECh */ case   19:  		/* li R5, 0 */
		/* 821C41ECh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C41ECh case   19:*/		return 0x821C41F0;
		  /* 821C41F0h */ case   20:  		/* mr R4, R30 */
		/* 821C41F0h case   20:*/		regs.R4 = regs.R30;
		/* 821C41F0h case   20:*/		return 0x821C41F4;
		  /* 821C41F4h */ case   21:  		/* mr R3, R27 */
		/* 821C41F4h case   21:*/		regs.R3 = regs.R27;
		/* 821C41F4h case   21:*/		return 0x821C41F8;
		  /* 821C41F8h */ case   22:  		/* bl -311528 */
		/* 821C41F8h case   22:*/		regs.LR = 0x821C41FC; return 0x82178110;
		/* 821C41F8h case   22:*/		return 0x821C41FC;
		  /* 821C41FCh */ case   23:  		/* mr R7, R3 */
		/* 821C41FCh case   23:*/		regs.R7 = regs.R3;
		/* 821C41FCh case   23:*/		return 0x821C4200;
		  /* 821C4200h */ case   24:  		/* mr R6, R29 */
		/* 821C4200h case   24:*/		regs.R6 = regs.R29;
		/* 821C4200h case   24:*/		return 0x821C4204;
		  /* 821C4204h */ case   25:  		/* mr R5, R31 */
		/* 821C4204h case   25:*/		regs.R5 = regs.R31;
		/* 821C4204h case   25:*/		return 0x821C4208;
		  /* 821C4208h */ case   26:  		/* li R4, 0 */
		/* 821C4208h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C4208h case   26:*/		return 0x821C420C;
		  /* 821C420Ch */ case   27:  		/* mr R3, R27 */
		/* 821C420Ch case   27:*/		regs.R3 = regs.R27;
		/* 821C420Ch case   27:*/		return 0x821C4210;
		  /* 821C4210h */ case   28:  		/* bl -11056 */
		/* 821C4210h case   28:*/		regs.LR = 0x821C4214; return 0x821C16E0;
		/* 821C4210h case   28:*/		return 0x821C4214;
		  /* 821C4214h */ case   29:  		/* addi R8, R31, 4 */
		/* 821C4214h case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C4214h case   29:*/		return 0x821C4218;
		  /* 821C4218h */ case   30:  		/* lwz R11, <#[R8]> */
		/* 821C4218h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4218h case   30:*/		return 0x821C421C;
		  /* 821C421Ch */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821C421Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C421Ch case   31:*/		return 0x821C4220;
		  /* 821C4220h */ case   32:  		/* bc 12, CR6_EQ, 160 */
		/* 821C4220h case   32:*/		if ( regs.CR[6].eq ) { return 0x821C42C0;  }
		/* 821C4220h case   32:*/		return 0x821C4224;
		  /* 821C4224h */ case   33:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C4224h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C4224h case   33:*/		return 0x821C4228;
		  /* 821C4228h */ case   34:  		/* cmplwi CR6, R10, 0 */
		/* 821C4228h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C4228h case   34:*/		return 0x821C422C;
		  /* 821C422Ch */ case   35:  		/* bc 12, CR6_EQ, 128 */
		/* 821C422Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x821C42AC;  }
		/* 821C422Ch case   35:*/		return 0x821C4230;
		  /* 821C4230h */ case   36:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C4230h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C4230h case   36:*/		return 0x821C4234;
		  /* 821C4234h */ case   37:  		/* addi R10, R10, 4 */
		/* 821C4234h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C4234h case   37:*/		return 0x821C4238;
		  /* 821C4238h */ case   38:  		/* lwz R9, <#[R10]> */
		/* 821C4238h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4238h case   38:*/		return 0x821C423C;
		  /* 821C423Ch */ case   39:  		/* b 12 */
		/* 821C423Ch case   39:*/		return 0x821C4248;
		/* 821C423Ch case   39:*/		return 0x821C4240;
		  /* 821C4240h */ case   40:  		/* addi R10, R9, 8 */
		/* 821C4240h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C4240h case   40:*/		return 0x821C4244;
		  /* 821C4244h */ case   41:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C4244h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C4244h case   41:*/		return 0x821C4248;
	}
	return 0x821C4248;
} // Block from 821C41A0h-821C4248h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821C4248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4248);
		  /* 821C4248h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C4248h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C4248h case    0:*/		return 0x821C424C;
		  /* 821C424Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C424Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C4240;  }
		/* 821C424Ch case    1:*/		return 0x821C4250;
		  /* 821C4250h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C4250h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C4250h case    2:*/		return 0x821C4254;
		  /* 821C4254h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C4254h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4254h case    3:*/		return 0x821C4258;
		  /* 821C4258h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C4258h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C4258h case    4:*/		return 0x821C425C;
		  /* 821C425Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C425Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C425Ch case    5:*/		return 0x821C4260;
		  /* 821C4260h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C4260h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C4260h case    6:*/		return 0x821C4264;
		  /* 821C4264h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821C4264h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C4264h case    7:*/		return 0x821C4268;
		  /* 821C4268h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C4268h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4268h case    8:*/		return 0x821C426C;
		  /* 821C426Ch */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C426Ch case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C426Ch case    9:*/		return 0x821C4270;
		  /* 821C4270h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C4270h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C4270h case   10:*/		return 0x821C4274;
		  /* 821C4274h */ case   11:  		/* srw R9, R23, R9 */
		/* 821C4274h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C4274h case   11:*/		return 0x821C4278;
		  /* 821C4278h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C4278h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C4278h case   12:*/		return 0x821C427C;
		  /* 821C427Ch */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C427Ch case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C427Ch case   13:*/		return 0x821C4280;
		  /* 821C4280h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C4280h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C4280h case   14:*/		return 0x821C4284;
		  /* 821C4284h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C4284h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C4284h case   15:*/		return 0x821C4288;
		  /* 821C4288h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C4288h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C4288h case   16:*/		return 0x821C428C;
		  /* 821C428Ch */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C428Ch case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C428Ch case   17:*/		return 0x821C4290;
		  /* 821C4290h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C4290h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C4290h case   18:*/		return 0x821C4294;
		  /* 821C4294h */ case   19:  		/* srw R7, R23, R6 */
		/* 821C4294h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C4294h case   19:*/		return 0x821C4298;
		  /* 821C4298h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C4298h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C4298h case   20:*/		return 0x821C429C;
		  /* 821C429Ch */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C429Ch case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C429Ch case   21:*/		return 0x821C42A0;
		  /* 821C42A0h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C42A0h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C42A0h case   22:*/		return 0x821C42A4;
		  /* 821C42A4h */ case   23:  		/* or R10, R9, R10 */
		/* 821C42A4h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C42A4h case   23:*/		return 0x821C42A8;
		  /* 821C42A8h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C42A8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C42A8h case   24:*/		return 0x821C42AC;
	}
	return 0x821C42AC;
} // Block from 821C4248h-821C42ACh (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C42ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C42AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C42AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C42AC);
		  /* 821C42ACh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C42ACh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C42ACh case    0:*/		return 0x821C42B0;
		  /* 821C42B0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C42B0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C42B0h case    1:*/		return 0x821C42B4;
		  /* 821C42B4h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C42B4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4218;  }
		/* 821C42B4h case    2:*/		return 0x821C42B8;
		  /* 821C42B8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C42B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C42B8h case    3:*/		return 0x821C42BC;
		  /* 821C42BCh */ case    4:  		/* b -164 */
		/* 821C42BCh case    4:*/		return 0x821C4218;
		/* 821C42BCh case    4:*/		return 0x821C42C0;
	}
	return 0x821C42C0;
} // Block from 821C42ACh-821C42C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C42C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C42C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C42C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C42C0);
		  /* 821C42C0h */ case    0:  		/* mr R8, R31 */
		/* 821C42C0h case    0:*/		regs.R8 = regs.R31;
		/* 821C42C0h case    0:*/		return 0x821C42C4;
		  /* 821C42C4h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C42C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C42C4h case    1:*/		return 0x821C42C8;
		  /* 821C42C8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C42C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C42C8h case    2:*/		return 0x821C42CC;
		  /* 821C42CCh */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 821C42CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821C4324;  }
		/* 821C42CCh case    3:*/		return 0x821C42D0;
		  /* 821C42D0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821C42D0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C42D0h case    4:*/		return 0x821C42D4;
		  /* 821C42D4h */ case    5:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821C42D4h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821C42D4h case    5:*/		return 0x821C42D8;
		  /* 821C42D8h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821C42D8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C4310;  }
		/* 821C42D8h case    6:*/		return 0x821C42DC;
		  /* 821C42DCh */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C42DCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C42DCh case    7:*/		return 0x821C42E0;
		  /* 821C42E0h */ case    8:  		/* lwz R9, <#[R10]> */
		/* 821C42E0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C42E0h case    8:*/		return 0x821C42E4;
		  /* 821C42E4h */ case    9:  		/* b 12 */
		/* 821C42E4h case    9:*/		return 0x821C42F0;
		/* 821C42E4h case    9:*/		return 0x821C42E8;
		  /* 821C42E8h */ case   10:  		/* addi R10, R9, 4 */
		/* 821C42E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821C42E8h case   10:*/		return 0x821C42EC;
		  /* 821C42ECh */ case   11:  		/* lwz R9, <#[R9 + 4]> */
		/* 821C42ECh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821C42ECh case   11:*/		return 0x821C42F0;
	}
	return 0x821C42F0;
} // Block from 821C42C0h-821C42F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C42F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C42F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C42F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C42F0);
		  /* 821C42F0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C42F0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C42F0h case    0:*/		return 0x821C42F4;
		  /* 821C42F4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C42F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C42E8;  }
		/* 821C42F4h case    1:*/		return 0x821C42F8;
		  /* 821C42F8h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821C42F8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C42F8h case    2:*/		return 0x821C42FC;
		  /* 821C42FCh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C42FCh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C42FCh case    3:*/		return 0x821C4300;
		  /* 821C4300h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 821C4300h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4300h case    4:*/		return 0x821C4304;
		  /* 821C4304h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821C4304h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4304h case    5:*/		return 0x821C4308;
		  /* 821C4308h */ case    6:  		/* stw R11, <#[R3]> */
		/* 821C4308h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4308h case    6:*/		return 0x821C430C;
		  /* 821C430Ch */ case    7:  		/* stw R3, <#[R11 + 16]> */
		/* 821C430Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 821C430Ch case    7:*/		return 0x821C4310;
	}
	return 0x821C4310;
} // Block from 821C42F0h-821C4310h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4310);
		  /* 821C4310h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C4310h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4310h case    0:*/		return 0x821C4314;
		  /* 821C4314h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C4314h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C4314h case    1:*/		return 0x821C4318;
		  /* 821C4318h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821C4318h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C42C4;  }
		/* 821C4318h case    2:*/		return 0x821C431C;
		  /* 821C431Ch */ case    3:  		/* addi R8, R11, 4 */
		/* 821C431Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821C431Ch case    3:*/		return 0x821C4320;
		  /* 821C4320h */ case    4:  		/* b -92 */
		/* 821C4320h case    4:*/		return 0x821C42C4;
		/* 821C4320h case    4:*/		return 0x821C4324;
	}
	return 0x821C4324;
} // Block from 821C4310h-821C4324h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C4324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4324);
		  /* 821C4324h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C4324h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C4324h case    0:*/		return 0x821C4328;
		  /* 821C4328h */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821C4328h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821C4328h case    1:*/		return 0x821C432C;
		  /* 821C432Ch */ case    2:  		/* bc 12, CR0_EQ, -396 */
		/* 821C432Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821C41A0;  }
		/* 821C432Ch case    2:*/		return 0x821C4330;
		  /* 821C4330h */ case    3:  		/* lwz R9, <#[R3 + 8]> */
		/* 821C4330h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C4330h case    3:*/		return 0x821C4334;
		  /* 821C4334h */ case    4:  		/* li R10, 4 */
		/* 821C4334h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821C4334h case    4:*/		return 0x821C4338;
		  /* 821C4338h */ case    5:  		/* addi R11, R21, 92 */
		/* 821C4338h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x5C);
		/* 821C4338h case    5:*/		return 0x821C433C;
		  /* 821C433Ch */ case    6:  		/* oris R9, R9, 512 */
		/* 821C433Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x200);
		/* 821C433Ch case    6:*/		return 0x821C4340;
		  /* 821C4340h */ case    7:  		/* stw R9, <#[R3 + 8]> */
		/* 821C4340h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821C4340h case    7:*/		return 0x821C4344;
		  /* 821C4344h */ case    8:  		/* mtspr CTR, R10 */
		/* 821C4344h case    8:*/		regs.CTR = regs.R10;
		/* 821C4344h case    8:*/		return 0x821C4348;
		  /* 821C4348h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821C4348h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4348h case    9:*/		return 0x821C434C;
		  /* 821C434Ch */ case   10:  		/* cmplw CR6, R10, R31 */
		/* 821C434Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821C434Ch case   10:*/		return 0x821C4350;
		  /* 821C4350h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821C4350h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C4358;  }
		/* 821C4350h case   11:*/		return 0x821C4354;
		  /* 821C4354h */ case   12:  		/* stw R3, <#[R11]> */
		/* 821C4354h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4354h case   12:*/		return 0x821C4358;
	}
	return 0x821C4358;
} // Block from 821C4324h-821C4358h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C4358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4358);
		  /* 821C4358h */ case    0:  		/* addi R11, R11, 4 */
		/* 821C4358h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C4358h case    0:*/		return 0x821C435C;
		  /* 821C435Ch */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821C435Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821C4348;  }
		/* 821C435Ch case    1:*/		return 0x821C4360;
		  /* 821C4360h */ case    2:  		/* b -448 */
		/* 821C4360h case    2:*/		return 0x821C41A0;
		/* 821C4360h case    2:*/		return 0x821C4364;
		  /* 821C4364h */ case    3:  		/* li R6, 9 */
		/* 821C4364h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x9);
		/* 821C4364h case    3:*/		return 0x821C4368;
		  /* 821C4368h */ case    4:  		/* b 16 */
		/* 821C4368h case    4:*/		return 0x821C4378;
		/* 821C4368h case    4:*/		return 0x821C436C;
		  /* 821C436Ch */ case    5:  		/* li R6, 10 */
		/* 821C436Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0xA);
		/* 821C436Ch case    5:*/		return 0x821C4370;
		  /* 821C4370h */ case    6:  		/* b 8 */
		/* 821C4370h case    6:*/		return 0x821C4378;
		/* 821C4370h case    6:*/		return 0x821C4374;
		  /* 821C4374h */ case    7:  		/* li R6, 11 */
		/* 821C4374h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0xB);
		/* 821C4374h case    7:*/		return 0x821C4378;
	}
	return 0x821C4378;
} // Block from 821C4358h-821C4378h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4378);
		  /* 821C4378h */ case    0:  		/* li R8, 1 */
		/* 821C4378h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C4378h case    0:*/		return 0x821C437C;
		  /* 821C437Ch */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C437Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C437Ch case    1:*/		return 0x821C4380;
		  /* 821C4380h */ case    2:  		/* li R7, 1 */
		/* 821C4380h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C4380h case    2:*/		return 0x821C4384;
		  /* 821C4384h */ case    3:  		/* li R5, 0 */
		/* 821C4384h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4384h case    3:*/		return 0x821C4388;
		  /* 821C4388h */ case    4:  		/* mr R3, R27 */
		/* 821C4388h case    4:*/		regs.R3 = regs.R27;
		/* 821C4388h case    4:*/		return 0x821C438C;
		  /* 821C438Ch */ case    5:  		/* bl 394764 */
		/* 821C438Ch case    5:*/		regs.LR = 0x821C4390; return 0x82224998;
		/* 821C438Ch case    5:*/		return 0x821C4390;
		  /* 821C4390h */ case    6:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C4390h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C4390h case    6:*/		return 0x821C4394;
		  /* 821C4394h */ case    7:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C4394h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C4394h case    7:*/		return 0x821C4398;
		  /* 821C4398h */ case    8:  		/* addi R11, R11, 36 */
		/* 821C4398h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C4398h case    8:*/		return 0x821C439C;
		  /* 821C439Ch */ case    9:  		/* addi R10, R10, 36 */
		/* 821C439Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C439Ch case    9:*/		return 0x821C43A0;
		  /* 821C43A0h */ case   10:  		/* addi R8, R11, -36 */
		/* 821C43A0h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C43A0h case   10:*/		return 0x821C43A4;
		  /* 821C43A4h */ case   11:  		/* addi R6, R10, -36 */
		/* 821C43A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C43A4h case   11:*/		return 0x821C43A8;
		  /* 821C43A8h */ case   12:  		/* addi R9, R10, 4 */
		/* 821C43A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C43A8h case   12:*/		return 0x821C43AC;
		  /* 821C43ACh */ case   13:  		/* lwz R7, <#[R11]> */
		/* 821C43ACh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C43ACh case   13:*/		return 0x821C43B0;
		  /* 821C43B0h */ case   14:  		/* mr R30, R3 */
		/* 821C43B0h case   14:*/		regs.R30 = regs.R3;
		/* 821C43B0h case   14:*/		return 0x821C43B4;
		  /* 821C43B4h */ case   15:  		/* li R5, 0 */
		/* 821C43B4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C43B4h case   15:*/		return 0x821C43B8;
		  /* 821C43B8h */ case   16:  		/* mr R3, R27 */
		/* 821C43B8h case   16:*/		regs.R3 = regs.R27;
		/* 821C43B8h case   16:*/		return 0x821C43BC;
		  /* 821C43BCh */ case   17:  		/* stw R7, <#[R10]> */
		/* 821C43BCh case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C43BCh case   17:*/		return 0x821C43C0;
		  /* 821C43C0h */ case   18:  		/* lwz R7, <#[R11]> */
		/* 821C43C0h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C43C0h case   18:*/		return 0x821C43C4;
		  /* 821C43C4h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C43C4h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C43C4h case   19:*/		return 0x821C43C8;
		  /* 821C43C8h */ case   20:  		/* stw R6, <#[R7]> */
		/* 821C43C8h case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C43C8h case   20:*/		return 0x821C43CC;
		  /* 821C43CCh */ case   21:  		/* stw R8, <#[R10 + 4]> */
		/* 821C43CCh case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C43CCh case   21:*/		return 0x821C43D0;
		  /* 821C43D0h */ case   22:  		/* stw R9, <#[R11]> */
		/* 821C43D0h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C43D0h case   22:*/		return 0x821C43D4;
		  /* 821C43D4h */ case   23:  		/* lwz R4, <#[R31 + 44]> */
		/* 821C43D4h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C43D4h case   23:*/		return 0x821C43D8;
		  /* 821C43D8h */ case   24:  		/* bl -23096 */
		/* 821C43D8h case   24:*/		regs.LR = 0x821C43DC; return 0x821BE9A0;
		/* 821C43D8h case   24:*/		return 0x821C43DC;
		  /* 821C43DCh */ case   25:  		/* mr R4, R3 */
		/* 821C43DCh case   25:*/		regs.R4 = regs.R3;
		/* 821C43DCh case   25:*/		return 0x821C43E0;
		  /* 821C43E0h */ case   26:  		/* mr R3, R30 */
		/* 821C43E0h case   26:*/		regs.R3 = regs.R30;
		/* 821C43E0h case   26:*/		return 0x821C43E4;
		  /* 821C43E4h */ case   27:  		/* bl -311836 */
		/* 821C43E4h case   27:*/		regs.LR = 0x821C43E8; return 0x821781C8;
		/* 821C43E4h case   27:*/		return 0x821C43E8;
		  /* 821C43E8h */ case   28:  		/* stw R3, <#[R30 + 44]> */
		/* 821C43E8h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C43E8h case   28:*/		return 0x821C43EC;
		  /* 821C43ECh */ case   29:  		/* addi R8, R31, 4 */
		/* 821C43ECh case   29:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C43ECh case   29:*/		return 0x821C43F0;
		  /* 821C43F0h */ case   30:  		/* lwz R11, <#[R8]> */
		/* 821C43F0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C43F0h case   30:*/		return 0x821C43F4;
		  /* 821C43F4h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821C43F4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C43F4h case   31:*/		return 0x821C43F8;
		  /* 821C43F8h */ case   32:  		/* bc 12, CR6_EQ, -600 */
		/* 821C43F8h case   32:*/		if ( regs.CR[6].eq ) { return 0x821C41A0;  }
		/* 821C43F8h case   32:*/		return 0x821C43FC;
		  /* 821C43FCh */ case   33:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C43FCh case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C43FCh case   33:*/		return 0x821C4400;
		  /* 821C4400h */ case   34:  		/* cmplwi CR6, R10, 0 */
		/* 821C4400h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C4400h case   34:*/		return 0x821C4404;
		  /* 821C4404h */ case   35:  		/* bc 12, CR6_EQ, 128 */
		/* 821C4404h case   35:*/		if ( regs.CR[6].eq ) { return 0x821C4484;  }
		/* 821C4404h case   35:*/		return 0x821C4408;
		  /* 821C4408h */ case   36:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C4408h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C4408h case   36:*/		return 0x821C440C;
		  /* 821C440Ch */ case   37:  		/* addi R10, R10, 4 */
		/* 821C440Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C440Ch case   37:*/		return 0x821C4410;
		  /* 821C4410h */ case   38:  		/* lwz R9, <#[R10]> */
		/* 821C4410h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4410h case   38:*/		return 0x821C4414;
		  /* 821C4414h */ case   39:  		/* b 12 */
		/* 821C4414h case   39:*/		return 0x821C4420;
		/* 821C4414h case   39:*/		return 0x821C4418;
		  /* 821C4418h */ case   40:  		/* addi R10, R9, 8 */
		/* 821C4418h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C4418h case   40:*/		return 0x821C441C;
		  /* 821C441Ch */ case   41:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C441Ch case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C441Ch case   41:*/		return 0x821C4420;
	}
	return 0x821C4420;
} // Block from 821C4378h-821C4420h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821C4420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4420);
		  /* 821C4420h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C4420h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C4420h case    0:*/		return 0x821C4424;
		  /* 821C4424h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C4424h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C4418;  }
		/* 821C4424h case    1:*/		return 0x821C4428;
		  /* 821C4428h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C4428h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C4428h case    2:*/		return 0x821C442C;
		  /* 821C442Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C442Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C442Ch case    3:*/		return 0x821C4430;
		  /* 821C4430h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C4430h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C4430h case    4:*/		return 0x821C4434;
		  /* 821C4434h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C4434h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C4434h case    5:*/		return 0x821C4438;
		  /* 821C4438h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C4438h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C4438h case    6:*/		return 0x821C443C;
		  /* 821C443Ch */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 821C443Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C443Ch case    7:*/		return 0x821C4440;
		  /* 821C4440h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 821C4440h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4440h case    8:*/		return 0x821C4444;
		  /* 821C4444h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821C4444h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821C4444h case    9:*/		return 0x821C4448;
		  /* 821C4448h */ case   10:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821C4448h case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821C4448h case   10:*/		return 0x821C444C;
		  /* 821C444Ch */ case   11:  		/* srw R9, R23, R9 */
		/* 821C444Ch case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C444Ch case   11:*/		return 0x821C4450;
		  /* 821C4450h */ case   12:  		/* srw R7, R23, R7 */
		/* 821C4450h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821C4450h case   12:*/		return 0x821C4454;
		  /* 821C4454h */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821C4454h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821C4454h case   13:*/		return 0x821C4458;
		  /* 821C4458h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821C4458h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821C4458h case   14:*/		return 0x821C445C;
		  /* 821C445Ch */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821C445Ch case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821C445Ch case   15:*/		return 0x821C4460;
		  /* 821C4460h */ case   16:  		/* srw R9, R23, R9 */
		/* 821C4460h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C4460h case   16:*/		return 0x821C4464;
		  /* 821C4464h */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821C4464h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821C4464h case   17:*/		return 0x821C4468;
		  /* 821C4468h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821C4468h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821C4468h case   18:*/		return 0x821C446C;
		  /* 821C446Ch */ case   19:  		/* srw R7, R23, R6 */
		/* 821C446Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821C446Ch case   19:*/		return 0x821C4470;
		  /* 821C4470h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821C4470h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821C4470h case   20:*/		return 0x821C4474;
		  /* 821C4474h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C4474h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C4474h case   21:*/		return 0x821C4478;
		  /* 821C4478h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821C4478h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821C4478h case   22:*/		return 0x821C447C;
		  /* 821C447Ch */ case   23:  		/* or R10, R9, R10 */
		/* 821C447Ch case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C447Ch case   23:*/		return 0x821C4480;
		  /* 821C4480h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821C4480h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4480h case   24:*/		return 0x821C4484;
	}
	return 0x821C4484;
} // Block from 821C4420h-821C4484h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C4484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4484);
		  /* 821C4484h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C4484h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4484h case    0:*/		return 0x821C4488;
		  /* 821C4488h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C4488h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C4488h case    1:*/		return 0x821C448C;
		  /* 821C448Ch */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821C448Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C43F0;  }
		/* 821C448Ch case    2:*/		return 0x821C4490;
		  /* 821C4490h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C4490h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C4490h case    3:*/		return 0x821C4494;
		  /* 821C4494h */ case    4:  		/* b -164 */
		/* 821C4494h case    4:*/		return 0x821C43F0;
		/* 821C4494h case    4:*/		return 0x821C4498;
	}
	return 0x821C4498;
} // Block from 821C4484h-821C4498h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C4498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4498);
		  /* 821C4498h */ case    0:  		/* cmplwi CR6, R11, 32 */
		/* 821C4498h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821C4498h case    0:*/		return 0x821C449C;
		  /* 821C449Ch */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 821C449Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821C44AC;  }
		/* 821C449Ch case    1:*/		return 0x821C44A0;
		  /* 821C44A0h */ case    2:  		/* cmplwi CR6, R11, 82 */
		/* 821C44A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821C44A0h case    2:*/		return 0x821C44A4;
		  /* 821C44A4h */ case    3:  		/* mr R11, R20 */
		/* 821C44A4h case    3:*/		regs.R11 = regs.R20;
		/* 821C44A4h case    3:*/		return 0x821C44A8;
		  /* 821C44A8h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 821C44A8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821C44B0;  }
		/* 821C44A8h case    4:*/		return 0x821C44AC;
	}
	return 0x821C44AC;
} // Block from 821C4498h-821C44ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C44ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C44AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C44AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C44AC);
		  /* 821C44ACh */ case    0:  		/* mr R11, R23 */
		/* 821C44ACh case    0:*/		regs.R11 = regs.R23;
		/* 821C44ACh case    0:*/		return 0x821C44B0;
	}
	return 0x821C44B0;
} // Block from 821C44ACh-821C44B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C44B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C44B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C44B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C44B0);
		  /* 821C44B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C44B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C44B0h case    0:*/		return 0x821C44B4;
		  /* 821C44B4h */ case    1:  		/* bc 12, CR0_EQ, 124 */
		/* 821C44B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C4530;  }
		/* 821C44B4h case    1:*/		return 0x821C44B8;
		  /* 821C44B8h */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 821C44B8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821C44B8h case    2:*/		return 0x821C44BC;
		  /* 821C44BCh */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821C44BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C44BCh case    3:*/		return 0x821C44C0;
		  /* 821C44C0h */ case    4:  		/* bc 12, CR6_EQ, 100 */
		/* 821C44C0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C4524;  }
		/* 821C44C0h case    4:*/		return 0x821C44C4;
		  /* 821C44C4h */ case    5:  		/* lwz R11, <#[R10 + 16]> */
		/* 821C44C4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821C44C4h case    5:*/		return 0x821C44C8;
		  /* 821C44C8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C44C8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C44C8h case    6:*/		return 0x821C44CC;
		  /* 821C44CCh */ case    7:  		/* bc 12, CR6_EQ, 80 */
		/* 821C44CCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821C451C;  }
		/* 821C44CCh case    7:*/		return 0x821C44D0;
		  /* 821C44D0h */ case    8:  		/* lwz R11, <#[R10]> */
		/* 821C44D0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C44D0h case    8:*/		return 0x821C44D4;
		  /* 821C44D4h */ case    9:  		/* rlwinm. R9, R11, 0, 4, 6 */
		/* 821C44D4h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R11);
		/* 821C44D4h case    9:*/		return 0x821C44D8;
		  /* 821C44D8h */ case   10:  		/* bc 12, CR0_EQ, 68 */
		/* 821C44D8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821C451C;  }
		/* 821C44D8h case   10:*/		return 0x821C44DC;
		  /* 821C44DCh */ case   11:  		/* rlwinm R9, R11, 22, 29, 30 */
		/* 821C44DCh case   11:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R11);
		/* 821C44DCh case   11:*/		return 0x821C44E0;
		  /* 821C44E0h */ case   12:  		/* rlwinm R8, R11, 24, 29, 30 */
		/* 821C44E0h case   12:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R11);
		/* 821C44E0h case   12:*/		return 0x821C44E4;
		  /* 821C44E4h */ case   13:  		/* srw R9, R23, R9 */
		/* 821C44E4h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C44E4h case   13:*/		return 0x821C44E8;
		  /* 821C44E8h */ case   14:  		/* srw R8, R23, R8 */
		/* 821C44E8h case   14:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821C44E8h case   14:*/		return 0x821C44EC;
		  /* 821C44ECh */ case   15:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821C44ECh case   15:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821C44ECh case   15:*/		return 0x821C44F0;
		  /* 821C44F0h */ case   16:  		/* rlwinm R9, R11, 26, 29, 30 */
		/* 821C44F0h case   16:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R11);
		/* 821C44F0h case   16:*/		return 0x821C44F4;
		  /* 821C44F4h */ case   17:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821C44F4h case   17:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821C44F4h case   17:*/		return 0x821C44F8;
		  /* 821C44F8h */ case   18:  		/* srw R9, R23, R9 */
		/* 821C44F8h case   18:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821C44F8h case   18:*/		return 0x821C44FC;
		  /* 821C44FCh */ case   19:  		/* rlwinm R7, R11, 28, 29, 30 */
		/* 821C44FCh case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R11);
		/* 821C44FCh case   19:*/		return 0x821C4500;
		  /* 821C4500h */ case   20:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821C4500h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821C4500h case   20:*/		return 0x821C4504;
		  /* 821C4504h */ case   21:  		/* srw R8, R23, R7 */
		/* 821C4504h case   21:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R7);
		/* 821C4504h case   21:*/		return 0x821C4508;
		  /* 821C4508h */ case   22:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821C4508h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821C4508h case   22:*/		return 0x821C450C;
		  /* 821C450Ch */ case   23:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C450Ch case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C450Ch case   23:*/		return 0x821C4510;
		  /* 821C4510h */ case   24:  		/* rlwinm R9, R8, 5, 0, 26 */
		/* 821C4510h case   24:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R8);
		/* 821C4510h case   24:*/		return 0x821C4514;
		  /* 821C4514h */ case   25:  		/* or R11, R9, R11 */
		/* 821C4514h case   25:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C4514h case   25:*/		return 0x821C4518;
		  /* 821C4518h */ case   26:  		/* stw R11, <#[R10]> */
		/* 821C4518h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4518h case   26:*/		return 0x821C451C;
	}
	return 0x821C451C;
} // Block from 821C44B0h-821C451Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C451Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C451C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C451C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C451C);
		  /* 821C451Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C451Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C451Ch case    0:*/		return 0x821C4520;
		  /* 821C4520h */ case    1:  		/* b -100 */
		/* 821C4520h case    1:*/		return 0x821C44BC;
		/* 821C4520h case    1:*/		return 0x821C4524;
	}
	return 0x821C4524;
} // Block from 821C451Ch-821C4524h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C4524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4524);
		  /* 821C4524h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C4524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C4524h case    0:*/		return 0x821C4528;
		  /* 821C4528h */ case    1:  		/* rlwimi R11, R20, 14, 15, 17 */
		/* 821C4528h case    1:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R20);
		/* 821C4528h case    1:*/		return 0x821C452C;
		  /* 821C452Ch */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 821C452Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C452Ch case    2:*/		return 0x821C4530;
	}
	return 0x821C4530;
} // Block from 821C4524h-821C4530h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C4530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4530);
		  /* 821C4530h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821C4530h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C4530h case    0:*/		return 0x821C4534;
		  /* 821C4534h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 821C4534h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C4578;  }
		/* 821C4534h case    1:*/		return 0x821C4538;
		  /* 821C4538h */ case    2:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821C4538h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821C4538h case    2:*/		return 0x821C453C;
		  /* 821C453Ch */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C453Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C453Ch case    3:*/		return 0x821C4540;
		  /* 821C4540h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C4540h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C4540h case    4:*/		return 0x821C4544;
		  /* 821C4544h */ case    5:  		/* addic R10, R10, -1 */
		/* 821C4544h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C4544h case    5:*/		return 0x821C4548;
		  /* 821C4548h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821C4548h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C4548h case    6:*/		return 0x821C454C;
		  /* 821C454Ch */ case    7:  		/* and R10, R10, R11 */
		/* 821C454Ch case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821C454Ch case    7:*/		return 0x821C4550;
		  /* 821C4550h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821C4550h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821C4550h case    8:*/		return 0x821C4554;
		  /* 821C4554h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821C4554h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C4568;  }
		/* 821C4554h case    9:*/		return 0x821C4558;
		  /* 821C4558h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C4558h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C4558h case   10:*/		return 0x821C455C;
		  /* 821C455Ch */ case   11:  		/* mr R26, R31 */
		/* 821C455Ch case   11:*/		regs.R26 = regs.R31;
		/* 821C455Ch case   11:*/		return 0x821C4560;
		  /* 821C4560h */ case   12:  		/* lwz R31, <#[R11 + 40]> */
		/* 821C4560h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821C4560h case   12:*/		return 0x821C4564;
		  /* 821C4564h */ case   13:  		/* b 52 */
		/* 821C4564h case   13:*/		return 0x821C4598;
		/* 821C4564h case   13:*/		return 0x821C4568;
	}
	return 0x821C4568;
} // Block from 821C4530h-821C4568h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C4568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4568);
		  /* 821C4568h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C4568h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C4568h case    0:*/		return 0x821C456C;
		  /* 821C456Ch */ case    1:  		/* bc 4, CR0_EQ, 60 */
		/* 821C456Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C456Ch case    1:*/		return 0x821C4570;
		  /* 821C4570h */ case    2:  		/* mr R31, R11 */
		/* 821C4570h case    2:*/		regs.R31 = regs.R11;
		/* 821C4570h case    2:*/		return 0x821C4574;
		  /* 821C4574h */ case    3:  		/* b 44 */
		/* 821C4574h case    3:*/		return 0x821C45A0;
		/* 821C4574h case    3:*/		return 0x821C4578;
	}
	return 0x821C4578;
} // Block from 821C4568h-821C4578h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C4578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4578);
		  /* 821C4578h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821C4578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821C4578h case    0:*/		return 0x821C457C;
		  /* 821C457Ch */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C457Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C457Ch case    1:*/		return 0x821C4580;
		  /* 821C4580h */ case    2:  		/* addic R10, R10, -1 */
		/* 821C4580h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C4580h case    2:*/		return 0x821C4584;
		  /* 821C4584h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821C4584h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C4584h case    3:*/		return 0x821C4588;
		  /* 821C4588h */ case    4:  		/* and R11, R10, R11 */
		/* 821C4588h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C4588h case    4:*/		return 0x821C458C;
		  /* 821C458Ch */ case    5:  		/* cmplw CR6, R31, R11 */
		/* 821C458Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821C458Ch case    5:*/		return 0x821C4590;
		  /* 821C4590h */ case    6:  		/* bc 12, CR6_EQ, -56 */
		/* 821C4590h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C4558;  }
		/* 821C4590h case    6:*/		return 0x821C4594;
		  /* 821C4594h */ case    7:  		/* lwz R31, <#[R22 + 4]> */
		/* 821C4594h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000004) );
		/* 821C4594h case    7:*/		return 0x821C4598;
	}
	return 0x821C4598;
} // Block from 821C4578h-821C4598h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4598);
		  /* 821C4598h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C4598h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C4598h case    0:*/		return 0x821C459C;
		  /* 821C459Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821C459Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C45A8;  }
		/* 821C459Ch case    1:*/		return 0x821C45A0;
	}
	return 0x821C45A0;
} // Block from 821C4598h-821C45A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C45A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45A0);
		  /* 821C45A0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821C45A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C45A0h case    0:*/		return 0x821C45A4;
		  /* 821C45A4h */ case    1:  		/* bc 4, CR6_EQ, -3208 */
		/* 821C45A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C391C;  }
		/* 821C45A4h case    1:*/		return 0x821C45A8;
	}
	return 0x821C45A8;
} // Block from 821C45A0h-821C45A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C45A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45A8);
		  /* 821C45A8h */ case    0:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821C45A8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821C45A8h case    0:*/		return 0x821C45AC;
		  /* 821C45ACh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C45ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C45ACh case    1:*/		return 0x821C45B0;
		  /* 821C45B0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C45B0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C45B0h case    2:*/		return 0x821C45B4;
		  /* 821C45B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C45B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C45C4;  }
		/* 821C45B4h case    3:*/		return 0x821C45B8;
		  /* 821C45B8h */ case    4:  		/* mr R21, R11 */
		/* 821C45B8h case    4:*/		regs.R21 = regs.R11;
		/* 821C45B8h case    4:*/		return 0x821C45BC;
		  /* 821C45BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C45BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C45BCh case    5:*/		return 0x821C45C0;
		  /* 821C45C0h */ case    6:  		/* bc 4, CR6_EQ, -6404 */
		/* 821C45C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C2CBC;  }
		/* 821C45C0h case    6:*/		return 0x821C45C4;
	}
	return 0x821C45C4;
} // Block from 821C45A8h-821C45C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C45C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45C4);
		  /* 821C45C4h */ case    0:  		/* addi R1, R1, 224 */
		/* 821C45C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821C45C4h case    0:*/		return 0x821C45C8;
		  /* 821C45C8h */ case    1:  		/* lfd FR30, <#[R1 - 144]> */
		/* 821C45C8h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821C45C8h case    1:*/		return 0x821C45CC;
		  /* 821C45CCh */ case    2:  		/* lfd FR31, <#[R1 - 136]> */
		/* 821C45CCh case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821C45CCh case    2:*/		return 0x821C45D0;
		  /* 821C45D0h */ case    3:  		/* b -1258324 */
		/* 821C45D0h case    3:*/		return 0x8209127C;
		/* 821C45D0h case    3:*/		return 0x821C45D4;
	}
	return 0x821C45D4;
} // Block from 821C45C4h-821C45D4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C45D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45D4);
		  /* 821C45D4h */ case    0:  		/* li R4, 3539 */
		/* 821C45D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDD3);
		/* 821C45D4h case    0:*/		return 0x821C45D8;
		  /* 821C45D8h */ case    1:  		/* mr R3, R27 */
		/* 821C45D8h case    1:*/		regs.R3 = regs.R27;
		/* 821C45D8h case    1:*/		return 0x821C45DC;
		  /* 821C45DCh */ case    2:  		/* bl -468852 */
		/* 821C45DCh case    2:*/		regs.LR = 0x821C45E0; return 0x82151E68;
		/* 821C45DCh case    2:*/		return 0x821C45E0;
	}
	return 0x821C45E0;
} // Block from 821C45D4h-821C45E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C45E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45E0);
		  /* 821C45E0h */ case    0:  		/* li R4, 4800 */
		/* 821C45E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C45E0h case    0:*/		return 0x821C45E4;
		  /* 821C45E4h */ case    1:  		/* bl -468860 */
		/* 821C45E4h case    1:*/		regs.LR = 0x821C45E8; return 0x82151E68;
		/* 821C45E4h case    1:*/		return 0x821C45E8;
	}
	return 0x821C45E8;
} // Block from 821C45E0h-821C45E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C45E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45E8);
		  /* 821C45E8h */ case    0:  		/* li R4, 4801 */
		/* 821C45E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821C45E8h case    0:*/		return 0x821C45EC;
		  /* 821C45ECh */ case    1:  		/* mr R3, R27 */
		/* 821C45ECh case    1:*/		regs.R3 = regs.R27;
		/* 821C45ECh case    1:*/		return 0x821C45F0;
		  /* 821C45F0h */ case    2:  		/* bl -468872 */
		/* 821C45F0h case    2:*/		regs.LR = 0x821C45F4; return 0x82151E68;
		/* 821C45F0h case    2:*/		return 0x821C45F4;
	}
	return 0x821C45F4;
} // Block from 821C45E8h-821C45F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C45F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C45F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C45F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C45F4);
		  /* 821C45F4h */ case    0:  		/* li R4, 4800 */
		/* 821C45F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C45F4h case    0:*/		return 0x821C45F8;
		  /* 821C45F8h */ case    1:  		/* mr R3, R27 */
		/* 821C45F8h case    1:*/		regs.R3 = regs.R27;
		/* 821C45F8h case    1:*/		return 0x821C45FC;
		  /* 821C45FCh */ case    2:  		/* bl -468884 */
		/* 821C45FCh case    2:*/		regs.LR = 0x821C4600; return 0x82151E68;
		/* 821C45FCh case    2:*/		return 0x821C4600;
	}
	return 0x821C4600;
} // Block from 821C45F4h-821C4600h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C4600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4600);
		  /* 821C4600h */ case    0:  		/* mfspr R12, LR */
		/* 821C4600h case    0:*/		regs.R12 = regs.LR;
		/* 821C4600h case    0:*/		return 0x821C4604;
		  /* 821C4604h */ case    1:  		/* bl -1258424 */
		/* 821C4604h case    1:*/		regs.LR = 0x821C4608; return 0x8209124C;
		/* 821C4604h case    1:*/		return 0x821C4608;
		  /* 821C4608h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C4608h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C4608h case    2:*/		return 0x821C460C;
		  /* 821C460Ch */ case    3:  		/* lis R11, -32256 */
		/* 821C460Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C460Ch case    3:*/		return 0x821C4610;
		  /* 821C4610h */ case    4:  		/* lis R10, -32256 */
		/* 821C4610h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821C4610h case    4:*/		return 0x821C4614;
		  /* 821C4614h */ case    5:  		/* mr R30, R4 */
		/* 821C4614h case    5:*/		regs.R30 = regs.R4;
		/* 821C4614h case    5:*/		return 0x821C4618;
		  /* 821C4618h */ case    6:  		/* li R4, 2 */
		/* 821C4618h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C4618h case    6:*/		return 0x821C461C;
		  /* 821C461Ch */ case    7:  		/* mr R31, R3 */
		/* 821C461Ch case    7:*/		regs.R31 = regs.R3;
		/* 821C461Ch case    7:*/		return 0x821C4620;
		  /* 821C4620h */ case    8:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 821C4620h case    8:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 821C4620h case    8:*/		return 0x821C4624;
		  /* 821C4624h */ case    9:  		/* mr R29, R5 */
		/* 821C4624h case    9:*/		regs.R29 = regs.R5;
		/* 821C4624h case    9:*/		return 0x821C4628;
		  /* 821C4628h */ case   10:  		/* lfs FR2, <#[R10 + 1792]> */
		/* 821C4628h case   10:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R10 + 0x00000700) );
		/* 821C4628h case   10:*/		return 0x821C462C;
		  /* 821C462Ch */ case   11:  		/* fmr FR3, FR4 */
		/* 821C462Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821C462Ch case   11:*/		return 0x821C4630;
		  /* 821C4630h */ case   12:  		/* fmr FR1, FR4 */
		/* 821C4630h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 821C4630h case   12:*/		return 0x821C4634;
		  /* 821C4634h */ case   13:  		/* bl 419108 */
		/* 821C4634h case   13:*/		regs.LR = 0x821C4638; return 0x8222AB58;
		/* 821C4634h case   13:*/		return 0x821C4638;
		  /* 821C4638h */ case   14:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C4638h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C4638h case   14:*/		return 0x821C463C;
		  /* 821C463Ch */ case   15:  		/* lis R10, -1 */
		/* 821C463Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821C463Ch case   15:*/		return 0x821C4640;
		  /* 821C4640h */ case   16:  		/* mr R28, R3 */
		/* 821C4640h case   16:*/		regs.R28 = regs.R3;
		/* 821C4640h case   16:*/		return 0x821C4644;
		  /* 821C4644h */ case   17:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C4644h case   17:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C4644h case   17:*/		return 0x821C4648;
		  /* 821C4648h */ case   18:  		/* mr R3, R31 */
		/* 821C4648h case   18:*/		regs.R3 = regs.R31;
		/* 821C4648h case   18:*/		return 0x821C464C;
		  /* 821C464Ch */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 821C464Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C464Ch case   19:*/		return 0x821C4650;
		  /* 821C4650h */ case   20:  		/* bc 4, CR6_EQ, 368 */
		/* 821C4650h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821C47C0;  }
		/* 821C4650h case   20:*/		return 0x821C4654;
		  /* 821C4654h */ case   21:  		/* bl 418636 */
		/* 821C4654h case   21:*/		regs.LR = 0x821C4658; return 0x8222A9A0;
		/* 821C4654h case   21:*/		return 0x821C4658;
		  /* 821C4658h */ case   22:  		/* mr R27, R3 */
		/* 821C4658h case   22:*/		regs.R27 = regs.R3;
		/* 821C4658h case   22:*/		return 0x821C465C;
		  /* 821C465Ch */ case   23:  		/* mr R4, R3 */
		/* 821C465Ch case   23:*/		regs.R4 = regs.R3;
		/* 821C465Ch case   23:*/		return 0x821C4660;
		  /* 821C4660h */ case   24:  		/* li R6, 4 */
		/* 821C4660h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C4660h case   24:*/		return 0x821C4664;
		  /* 821C4664h */ case   25:  		/* li R5, 0 */
		/* 821C4664h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4664h case   25:*/		return 0x821C4668;
		  /* 821C4668h */ case   26:  		/* mr R3, R31 */
		/* 821C4668h case   26:*/		regs.R3 = regs.R31;
		/* 821C4668h case   26:*/		return 0x821C466C;
		  /* 821C466Ch */ case   27:  		/* bl -312580 */
		/* 821C466Ch case   27:*/		regs.LR = 0x821C4670; return 0x82178168;
		/* 821C466Ch case   27:*/		return 0x821C4670;
		  /* 821C4670h */ case   28:  		/* mr R26, R3 */
		/* 821C4670h case   28:*/		regs.R26 = regs.R3;
		/* 821C4670h case   28:*/		return 0x821C4674;
		  /* 821C4674h */ case   29:  		/* mr R4, R29 */
		/* 821C4674h case   29:*/		regs.R4 = regs.R29;
		/* 821C4674h case   29:*/		return 0x821C4678;
		  /* 821C4678h */ case   30:  		/* li R5, 0 */
		/* 821C4678h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4678h case   30:*/		return 0x821C467C;
		  /* 821C467Ch */ case   31:  		/* mr R3, R31 */
		/* 821C467Ch case   31:*/		regs.R3 = regs.R31;
		/* 821C467Ch case   31:*/		return 0x821C4680;
		  /* 821C4680h */ case   32:  		/* bl -312688 */
		/* 821C4680h case   32:*/		regs.LR = 0x821C4684; return 0x82178110;
		/* 821C4680h case   32:*/		return 0x821C4684;
		  /* 821C4684h */ case   33:  		/* mr R5, R3 */
		/* 821C4684h case   33:*/		regs.R5 = regs.R3;
		/* 821C4684h case   33:*/		return 0x821C4688;
		  /* 821C4688h */ case   34:  		/* mr R4, R30 */
		/* 821C4688h case   34:*/		regs.R4 = regs.R30;
		/* 821C4688h case   34:*/		return 0x821C468C;
		  /* 821C468Ch */ case   35:  		/* mr R3, R31 */
		/* 821C468Ch case   35:*/		regs.R3 = regs.R31;
		/* 821C468Ch case   35:*/		return 0x821C4690;
		  /* 821C4690h */ case   36:  		/* mr R6, R26 */
		/* 821C4690h case   36:*/		regs.R6 = regs.R26;
		/* 821C4690h case   36:*/		return 0x821C4694;
		  /* 821C4694h */ case   37:  		/* bl -14172 */
		/* 821C4694h case   37:*/		regs.LR = 0x821C4698; return 0x821C0F38;
		/* 821C4694h case   37:*/		return 0x821C4698;
		  /* 821C4698h */ case   38:  		/* mr R29, R3 */
		/* 821C4698h case   38:*/		regs.R29 = regs.R3;
		/* 821C4698h case   38:*/		return 0x821C469C;
		  /* 821C469Ch */ case   39:  		/* mr R4, R27 */
		/* 821C469Ch case   39:*/		regs.R4 = regs.R27;
		/* 821C469Ch case   39:*/		return 0x821C46A0;
		  /* 821C46A0h */ case   40:  		/* li R5, 2 */
		/* 821C46A0h case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821C46A0h case   40:*/		return 0x821C46A4;
		  /* 821C46A4h */ case   41:  		/* mr R3, R31 */
		/* 821C46A4h case   41:*/		regs.R3 = regs.R31;
		/* 821C46A4h case   41:*/		return 0x821C46A8;
		  /* 821C46A8h */ case   42:  		/* bl -312728 */
		/* 821C46A8h case   42:*/		regs.LR = 0x821C46AC; return 0x82178110;
		/* 821C46A8h case   42:*/		return 0x821C46AC;
		  /* 821C46ACh */ case   43:  		/* mr R26, R3 */
		/* 821C46ACh case   43:*/		regs.R26 = regs.R3;
		/* 821C46ACh case   43:*/		return 0x821C46B0;
		  /* 821C46B0h */ case   44:  		/* mr R4, R29 */
		/* 821C46B0h case   44:*/		regs.R4 = regs.R29;
		/* 821C46B0h case   44:*/		return 0x821C46B4;
		  /* 821C46B4h */ case   45:  		/* li R5, 0 */
		/* 821C46B4h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C46B4h case   45:*/		return 0x821C46B8;
		  /* 821C46B8h */ case   46:  		/* mr R3, R31 */
		/* 821C46B8h case   46:*/		regs.R3 = regs.R31;
		/* 821C46B8h case   46:*/		return 0x821C46BC;
		  /* 821C46BCh */ case   47:  		/* bl -312748 */
		/* 821C46BCh case   47:*/		regs.LR = 0x821C46C0; return 0x82178110;
		/* 821C46BCh case   47:*/		return 0x821C46C0;
		  /* 821C46C0h */ case   48:  		/* mr R25, R3 */
		/* 821C46C0h case   48:*/		regs.R25 = regs.R3;
		/* 821C46C0h case   48:*/		return 0x821C46C4;
		  /* 821C46C4h */ case   49:  		/* mr R4, R29 */
		/* 821C46C4h case   49:*/		regs.R4 = regs.R29;
		/* 821C46C4h case   49:*/		return 0x821C46C8;
		  /* 821C46C8h */ case   50:  		/* li R5, 0 */
		/* 821C46C8h case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C46C8h case   50:*/		return 0x821C46CC;
		  /* 821C46CCh */ case   51:  		/* mr R3, R31 */
		/* 821C46CCh case   51:*/		regs.R3 = regs.R31;
		/* 821C46CCh case   51:*/		return 0x821C46D0;
		  /* 821C46D0h */ case   52:  		/* bl -312768 */
		/* 821C46D0h case   52:*/		regs.LR = 0x821C46D4; return 0x82178110;
		/* 821C46D0h case   52:*/		return 0x821C46D4;
		  /* 821C46D4h */ case   53:  		/* mr R5, R3 */
		/* 821C46D4h case   53:*/		regs.R5 = regs.R3;
		/* 821C46D4h case   53:*/		return 0x821C46D8;
		  /* 821C46D8h */ case   54:  		/* mr R4, R30 */
		/* 821C46D8h case   54:*/		regs.R4 = regs.R30;
		/* 821C46D8h case   54:*/		return 0x821C46DC;
		  /* 821C46DCh */ case   55:  		/* mr R3, R31 */
		/* 821C46DCh case   55:*/		regs.R3 = regs.R31;
		/* 821C46DCh case   55:*/		return 0x821C46E0;
		  /* 821C46E0h */ case   56:  		/* mr R6, R25 */
		/* 821C46E0h case   56:*/		regs.R6 = regs.R25;
		/* 821C46E0h case   56:*/		return 0x821C46E4;
		  /* 821C46E4h */ case   57:  		/* mr R7, R26 */
		/* 821C46E4h case   57:*/		regs.R7 = regs.R26;
		/* 821C46E4h case   57:*/		return 0x821C46E8;
		  /* 821C46E8h */ case   58:  		/* bl -12576 */
		/* 821C46E8h case   58:*/		regs.LR = 0x821C46EC; return 0x821C15C8;
		/* 821C46E8h case   58:*/		return 0x821C46EC;
		  /* 821C46ECh */ case   59:  		/* mr R29, R3 */
		/* 821C46ECh case   59:*/		regs.R29 = regs.R3;
		/* 821C46ECh case   59:*/		return 0x821C46F0;
		  /* 821C46F0h */ case   60:  		/* mr R4, R27 */
		/* 821C46F0h case   60:*/		regs.R4 = regs.R27;
		/* 821C46F0h case   60:*/		return 0x821C46F4;
		  /* 821C46F4h */ case   61:  		/* li R5, 1 */
		/* 821C46F4h case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C46F4h case   61:*/		return 0x821C46F8;
		  /* 821C46F8h */ case   62:  		/* mr R3, R31 */
		/* 821C46F8h case   62:*/		regs.R3 = regs.R31;
		/* 821C46F8h case   62:*/		return 0x821C46FC;
		  /* 821C46FCh */ case   63:  		/* bl -312812 */
		/* 821C46FCh case   63:*/		regs.LR = 0x821C4700; return 0x82178110;
		/* 821C46FCh case   63:*/		return 0x821C4700;
		  /* 821C4700h */ case   64:  		/* mr R26, R3 */
		/* 821C4700h case   64:*/		regs.R26 = regs.R3;
		/* 821C4700h case   64:*/		return 0x821C4704;
		  /* 821C4704h */ case   65:  		/* mr R4, R29 */
		/* 821C4704h case   65:*/		regs.R4 = regs.R29;
		/* 821C4704h case   65:*/		return 0x821C4708;
		  /* 821C4708h */ case   66:  		/* li R5, 0 */
		/* 821C4708h case   66:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4708h case   66:*/		return 0x821C470C;
		  /* 821C470Ch */ case   67:  		/* mr R3, R31 */
		/* 821C470Ch case   67:*/		regs.R3 = regs.R31;
		/* 821C470Ch case   67:*/		return 0x821C4710;
		  /* 821C4710h */ case   68:  		/* bl -312832 */
		/* 821C4710h case   68:*/		regs.LR = 0x821C4714; return 0x82178110;
		/* 821C4710h case   68:*/		return 0x821C4714;
		  /* 821C4714h */ case   69:  		/* mr R5, R3 */
		/* 821C4714h case   69:*/		regs.R5 = regs.R3;
		/* 821C4714h case   69:*/		return 0x821C4718;
		  /* 821C4718h */ case   70:  		/* mr R4, R30 */
		/* 821C4718h case   70:*/		regs.R4 = regs.R30;
		/* 821C4718h case   70:*/		return 0x821C471C;
		  /* 821C471Ch */ case   71:  		/* mr R3, R31 */
		/* 821C471Ch case   71:*/		regs.R3 = regs.R31;
		/* 821C471Ch case   71:*/		return 0x821C4720;
		  /* 821C4720h */ case   72:  		/* mr R6, R26 */
		/* 821C4720h case   72:*/		regs.R6 = regs.R26;
		/* 821C4720h case   72:*/		return 0x821C4724;
		  /* 821C4724h */ case   73:  		/* bl -14316 */
		/* 821C4724h case   73:*/		regs.LR = 0x821C4728; return 0x821C0F38;
		/* 821C4724h case   73:*/		return 0x821C4728;
		  /* 821C4728h */ case   74:  		/* mr R29, R3 */
		/* 821C4728h case   74:*/		regs.R29 = regs.R3;
		/* 821C4728h case   74:*/		return 0x821C472C;
		  /* 821C472Ch */ case   75:  		/* li R6, 4 */
		/* 821C472Ch case   75:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C472Ch case   75:*/		return 0x821C4730;
		  /* 821C4730h */ case   76:  		/* li R5, 2 */
		/* 821C4730h case   76:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821C4730h case   76:*/		return 0x821C4734;
		  /* 821C4734h */ case   77:  		/* mr R4, R27 */
		/* 821C4734h case   77:*/		regs.R4 = regs.R27;
		/* 821C4734h case   77:*/		return 0x821C4738;
		  /* 821C4738h */ case   78:  		/* mr R3, R31 */
		/* 821C4738h case   78:*/		regs.R3 = regs.R31;
		/* 821C4738h case   78:*/		return 0x821C473C;
		  /* 821C473Ch */ case   79:  		/* bl -312788 */
		/* 821C473Ch case   79:*/		regs.LR = 0x821C4740; return 0x82178168;
		/* 821C473Ch case   79:*/		return 0x821C4740;
		  /* 821C4740h */ case   80:  		/* mr R27, R3 */
		/* 821C4740h case   80:*/		regs.R27 = regs.R3;
		/* 821C4740h case   80:*/		return 0x821C4744;
		  /* 821C4744h */ case   81:  		/* mr R4, R29 */
		/* 821C4744h case   81:*/		regs.R4 = regs.R29;
		/* 821C4744h case   81:*/		return 0x821C4748;
		  /* 821C4748h */ case   82:  		/* li R5, 0 */
		/* 821C4748h case   82:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4748h case   82:*/		return 0x821C474C;
		  /* 821C474Ch */ case   83:  		/* mr R3, R31 */
		/* 821C474Ch case   83:*/		regs.R3 = regs.R31;
		/* 821C474Ch case   83:*/		return 0x821C4750;
		  /* 821C4750h */ case   84:  		/* bl -312896 */
		/* 821C4750h case   84:*/		regs.LR = 0x821C4754; return 0x82178110;
		/* 821C4750h case   84:*/		return 0x821C4754;
		  /* 821C4754h */ case   85:  		/* mr R5, R3 */
		/* 821C4754h case   85:*/		regs.R5 = regs.R3;
		/* 821C4754h case   85:*/		return 0x821C4758;
		  /* 821C4758h */ case   86:  		/* mr R4, R30 */
		/* 821C4758h case   86:*/		regs.R4 = regs.R30;
		/* 821C4758h case   86:*/		return 0x821C475C;
		  /* 821C475Ch */ case   87:  		/* mr R3, R31 */
		/* 821C475Ch case   87:*/		regs.R3 = regs.R31;
		/* 821C475Ch case   87:*/		return 0x821C4760;
		  /* 821C4760h */ case   88:  		/* mr R6, R27 */
		/* 821C4760h case   88:*/		regs.R6 = regs.R27;
		/* 821C4760h case   88:*/		return 0x821C4764;
		  /* 821C4764h */ case   89:  		/* bl -14380 */
		/* 821C4764h case   89:*/		regs.LR = 0x821C4768; return 0x821C0F38;
		/* 821C4764h case   89:*/		return 0x821C4768;
		  /* 821C4768h */ case   90:  		/* mr R27, R3 */
		/* 821C4768h case   90:*/		regs.R27 = regs.R3;
		/* 821C4768h case   90:*/		return 0x821C476C;
		  /* 821C476Ch */ case   91:  		/* li R5, 0 */
		/* 821C476Ch case   91:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C476Ch case   91:*/		return 0x821C4770;
		  /* 821C4770h */ case   92:  		/* mr R4, R29 */
		/* 821C4770h case   92:*/		regs.R4 = regs.R29;
		/* 821C4770h case   92:*/		return 0x821C4774;
		  /* 821C4774h */ case   93:  		/* mr R3, R31 */
		/* 821C4774h case   93:*/		regs.R3 = regs.R31;
		/* 821C4774h case   93:*/		return 0x821C4778;
		  /* 821C4778h */ case   94:  		/* bl -312936 */
		/* 821C4778h case   94:*/		regs.LR = 0x821C477C; return 0x82178110;
		/* 821C4778h case   94:*/		return 0x821C477C;
		  /* 821C477Ch */ case   95:  		/* mr R29, R3 */
		/* 821C477Ch case   95:*/		regs.R29 = regs.R3;
		/* 821C477Ch case   95:*/		return 0x821C4780;
		  /* 821C4780h */ case   96:  		/* li R5, 0 */
		/* 821C4780h case   96:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4780h case   96:*/		return 0x821C4784;
		  /* 821C4784h */ case   97:  		/* mr R4, R28 */
		/* 821C4784h case   97:*/		regs.R4 = regs.R28;
		/* 821C4784h case   97:*/		return 0x821C4788;
		  /* 821C4788h */ case   98:  		/* mr R3, R31 */
		/* 821C4788h case   98:*/		regs.R3 = regs.R31;
		/* 821C4788h case   98:*/		return 0x821C478C;
		  /* 821C478Ch */ case   99:  		/* bl -312956 */
		/* 821C478Ch case   99:*/		regs.LR = 0x821C4790; return 0x82178110;
		/* 821C478Ch case   99:*/		return 0x821C4790;
		  /* 821C4790h */ case  100:  		/* mr R28, R3 */
		/* 821C4790h case  100:*/		regs.R28 = regs.R3;
		/* 821C4790h case  100:*/		return 0x821C4794;
		  /* 821C4794h */ case  101:  		/* li R5, 0 */
		/* 821C4794h case  101:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4794h case  101:*/		return 0x821C4798;
		  /* 821C4798h */ case  102:  		/* mr R4, R27 */
		/* 821C4798h case  102:*/		regs.R4 = regs.R27;
		/* 821C4798h case  102:*/		return 0x821C479C;
		  /* 821C479Ch */ case  103:  		/* mr R3, R31 */
		/* 821C479Ch case  103:*/		regs.R3 = regs.R31;
		/* 821C479Ch case  103:*/		return 0x821C47A0;
		  /* 821C47A0h */ case  104:  		/* bl -312976 */
		/* 821C47A0h case  104:*/		regs.LR = 0x821C47A4; return 0x82178110;
		/* 821C47A0h case  104:*/		return 0x821C47A4;
		  /* 821C47A4h */ case  105:  		/* mr R5, R3 */
		/* 821C47A4h case  105:*/		regs.R5 = regs.R3;
		/* 821C47A4h case  105:*/		return 0x821C47A8;
		  /* 821C47A8h */ case  106:  		/* mr R4, R30 */
		/* 821C47A8h case  106:*/		regs.R4 = regs.R30;
		/* 821C47A8h case  106:*/		return 0x821C47AC;
		  /* 821C47ACh */ case  107:  		/* mr R3, R31 */
		/* 821C47ACh case  107:*/		regs.R3 = regs.R31;
		/* 821C47ACh case  107:*/		return 0x821C47B0;
		  /* 821C47B0h */ case  108:  		/* mr R6, R28 */
		/* 821C47B0h case  108:*/		regs.R6 = regs.R28;
		/* 821C47B0h case  108:*/		return 0x821C47B4;
		  /* 821C47B4h */ case  109:  		/* mr R7, R29 */
		/* 821C47B4h case  109:*/		regs.R7 = regs.R29;
		/* 821C47B4h case  109:*/		return 0x821C47B8;
		  /* 821C47B8h */ case  110:  		/* bl -13064 */
		/* 821C47B8h case  110:*/		regs.LR = 0x821C47BC; return 0x821C14B0;
		/* 821C47B8h case  110:*/		return 0x821C47BC;
		  /* 821C47BCh */ case  111:  		/* b 56 */
		/* 821C47BCh case  111:*/		return 0x821C47F4;
		/* 821C47BCh case  111:*/		return 0x821C47C0;
	}
	return 0x821C47C0;
} // Block from 821C4600h-821C47C0h (112 instructions)

//////////////////////////////////////////////////////
// Block at 821C47C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C47C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C47C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C47C0);
		  /* 821C47C0h */ case    0:  		/* li R5, 1 */
		/* 821C47C0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C47C0h case    0:*/		return 0x821C47C4;
		  /* 821C47C4h */ case    1:  		/* mr R4, R28 */
		/* 821C47C4h case    1:*/		regs.R4 = regs.R28;
		/* 821C47C4h case    1:*/		return 0x821C47C8;
		  /* 821C47C8h */ case    2:  		/* bl -313016 */
		/* 821C47C8h case    2:*/		regs.LR = 0x821C47CC; return 0x82178110;
		/* 821C47C8h case    2:*/		return 0x821C47CC;
		  /* 821C47CCh */ case    3:  		/* mr R28, R3 */
		/* 821C47CCh case    3:*/		regs.R28 = regs.R3;
		/* 821C47CCh case    3:*/		return 0x821C47D0;
		  /* 821C47D0h */ case    4:  		/* li R5, 0 */
		/* 821C47D0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C47D0h case    4:*/		return 0x821C47D4;
		  /* 821C47D4h */ case    5:  		/* mr R4, R29 */
		/* 821C47D4h case    5:*/		regs.R4 = regs.R29;
		/* 821C47D4h case    5:*/		return 0x821C47D8;
		  /* 821C47D8h */ case    6:  		/* mr R3, R31 */
		/* 821C47D8h case    6:*/		regs.R3 = regs.R31;
		/* 821C47D8h case    6:*/		return 0x821C47DC;
		  /* 821C47DCh */ case    7:  		/* bl -313036 */
		/* 821C47DCh case    7:*/		regs.LR = 0x821C47E0; return 0x82178110;
		/* 821C47DCh case    7:*/		return 0x821C47E0;
		  /* 821C47E0h */ case    8:  		/* mr R5, R3 */
		/* 821C47E0h case    8:*/		regs.R5 = regs.R3;
		/* 821C47E0h case    8:*/		return 0x821C47E4;
		  /* 821C47E4h */ case    9:  		/* mr R4, R30 */
		/* 821C47E4h case    9:*/		regs.R4 = regs.R30;
		/* 821C47E4h case    9:*/		return 0x821C47E8;
		  /* 821C47E8h */ case   10:  		/* mr R3, R31 */
		/* 821C47E8h case   10:*/		regs.R3 = regs.R31;
		/* 821C47E8h case   10:*/		return 0x821C47EC;
		  /* 821C47ECh */ case   11:  		/* mr R6, R28 */
		/* 821C47ECh case   11:*/		regs.R6 = regs.R28;
		/* 821C47ECh case   11:*/		return 0x821C47F0;
		  /* 821C47F0h */ case   12:  		/* bl -14520 */
		/* 821C47F0h case   12:*/		regs.LR = 0x821C47F4; return 0x821C0F38;
		/* 821C47F0h case   12:*/		return 0x821C47F4;
	}
	return 0x821C47F4;
} // Block from 821C47C0h-821C47F4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C47F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C47F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C47F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C47F4);
		  /* 821C47F4h */ case    0:  		/* addi R1, R1, 144 */
		/* 821C47F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C47F4h case    0:*/		return 0x821C47F8;
		  /* 821C47F8h */ case    1:  		/* b -1258844 */
		/* 821C47F8h case    1:*/		return 0x8209129C;
		/* 821C47F8h case    1:*/		return 0x821C47FC;
		  /* 821C47FCh */ case    2:  		/* nop */
		/* 821C47FCh case    2:*/		cpu::op::nop();
		/* 821C47FCh case    2:*/		return 0x821C4800;
	}
	return 0x821C4800;
} // Block from 821C47F4h-821C4800h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C4800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4800);
		  /* 821C4800h */ case    0:  		/* mfspr R12, LR */
		/* 821C4800h case    0:*/		regs.R12 = regs.LR;
		/* 821C4800h case    0:*/		return 0x821C4804;
		  /* 821C4804h */ case    1:  		/* bl -1258948 */
		/* 821C4804h case    1:*/		regs.LR = 0x821C4808; return 0x82091240;
		/* 821C4804h case    1:*/		return 0x821C4808;
		  /* 821C4808h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821C4808h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821C4808h case    2:*/		return 0x821C480C;
		  /* 821C480Ch */ case    3:  		/* lwz R11, <#[R3 + 36]> */
		/* 821C480Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 821C480Ch case    3:*/		return 0x821C4810;
		  /* 821C4810h */ case    4:  		/* mr R31, R3 */
		/* 821C4810h case    4:*/		regs.R31 = regs.R3;
		/* 821C4810h case    4:*/		return 0x821C4814;
		  /* 821C4814h */ case    5:  		/* mr R29, R4 */
		/* 821C4814h case    5:*/		regs.R29 = regs.R4;
		/* 821C4814h case    5:*/		return 0x821C4818;
		  /* 821C4818h */ case    6:  		/* mr R27, R5 */
		/* 821C4818h case    6:*/		regs.R27 = regs.R5;
		/* 821C4818h case    6:*/		return 0x821C481C;
		  /* 821C481Ch */ case    7:  		/* mr R28, R6 */
		/* 821C481Ch case    7:*/		regs.R28 = regs.R6;
		/* 821C481Ch case    7:*/		return 0x821C4820;
		  /* 821C4820h */ case    8:  		/* mr R24, R7 */
		/* 821C4820h case    8:*/		regs.R24 = regs.R7;
		/* 821C4820h case    8:*/		return 0x821C4824;
		  /* 821C4824h */ case    9:  		/* mr R23, R8 */
		/* 821C4824h case    9:*/		regs.R23 = regs.R8;
		/* 821C4824h case    9:*/		return 0x821C4828;
		  /* 821C4828h */ case   10:  		/* mr R22, R9 */
		/* 821C4828h case   10:*/		regs.R22 = regs.R9;
		/* 821C4828h case   10:*/		return 0x821C482C;
		  /* 821C482Ch */ case   11:  		/* li R26, 1 */
		/* 821C482Ch case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821C482Ch case   11:*/		return 0x821C4830;
		  /* 821C4830h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821C4830h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C4830h case   12:*/		return 0x821C4834;
		  /* 821C4834h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821C4834h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C483C;  }
		/* 821C4834h case   13:*/		return 0x821C4838;
		  /* 821C4838h */ case   14:  		/* stw R26, <#[R3 + 36]> */
		/* 821C4838h case   14:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000024) );
		/* 821C4838h case   14:*/		return 0x821C483C;
	}
	return 0x821C483C;
} // Block from 821C4800h-821C483Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C483Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C483C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C483C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C483C);
		  /* 821C483Ch */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 821C483Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821C483Ch case    0:*/		return 0x821C4840;
		  /* 821C4840h */ case    1:  		/* mr R3, R31 */
		/* 821C4840h case    1:*/		regs.R3 = regs.R31;
		/* 821C4840h case    1:*/		return 0x821C4844;
		  /* 821C4844h */ case    2:  		/* addi R10, R11, 1 */
		/* 821C4844h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821C4844h case    2:*/		return 0x821C4848;
		  /* 821C4848h */ case    3:  		/* stw R10, <#[R31 + 36]> */
		/* 821C4848h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 821C4848h case    3:*/		return 0x821C484C;
		  /* 821C484Ch */ case    4:  		/* stw R11, <#[R31 + 32]> */
		/* 821C484Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821C484Ch case    4:*/		return 0x821C4850;
		  /* 821C4850h */ case    5:  		/* bl -358680 */
		/* 821C4850h case    5:*/		regs.LR = 0x821C4854; return 0x8216CF38;
		/* 821C4850h case    5:*/		return 0x821C4854;
		  /* 821C4854h */ case    6:  		/* rlwinm R9, R27, 0, 0, 30 */
		/* 821C4854h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R27);
		/* 821C4854h case    6:*/		return 0x821C4858;
		  /* 821C4858h */ case    7:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C4858h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C4858h case    7:*/		return 0x821C485C;
		  /* 821C485Ch */ case    8:  		/* li R8, 0 */
		/* 821C485Ch case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C485Ch case    8:*/		return 0x821C4860;
		  /* 821C4860h */ case    9:  		/* addi R10, R11, 4 */
		/* 821C4860h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C4860h case    9:*/		return 0x821C4864;
		  /* 821C4864h */ case   10:  		/* mr R30, R3 */
		/* 821C4864h case   10:*/		regs.R30 = regs.R3;
		/* 821C4864h case   10:*/		return 0x821C4868;
		  /* 821C4868h */ case   11:  		/* lwz R7, <#[R9]> */
		/* 821C4868h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C4868h case   11:*/		return 0x821C486C;
		  /* 821C486Ch */ case   12:  		/* mr R4, R3 */
		/* 821C486Ch case   12:*/		regs.R4 = regs.R3;
		/* 821C486Ch case   12:*/		return 0x821C4870;
		  /* 821C4870h */ case   13:  		/* mr R5, R31 */
		/* 821C4870h case   13:*/		regs.R5 = regs.R31;
		/* 821C4870h case   13:*/		return 0x821C4874;
		  /* 821C4874h */ case   14:  		/* mr R3, R29 */
		/* 821C4874h case   14:*/		regs.R3 = regs.R29;
		/* 821C4874h case   14:*/		return 0x821C4878;
		  /* 821C4878h */ case   15:  		/* stw R7, <#[R11]> */
		/* 821C4878h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4878h case   15:*/		return 0x821C487C;
		  /* 821C487Ch */ case   16:  		/* lwz R7, <#[R9]> */
		/* 821C487Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821C487Ch case   16:*/		return 0x821C4880;
		  /* 821C4880h */ case   17:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C4880h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C4880h case   17:*/		return 0x821C4884;
		  /* 821C4884h */ case   18:  		/* stw R11, <#[R7]> */
		/* 821C4884h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821C4884h case   18:*/		return 0x821C4888;
		  /* 821C4888h */ case   19:  		/* stw R9, <#[R11 + 4]> */
		/* 821C4888h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4888h case   19:*/		return 0x821C488C;
		  /* 821C488Ch */ case   20:  		/* stw R10, <#[R9]> */
		/* 821C488Ch case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821C488Ch case   20:*/		return 0x821C4890;
		  /* 821C4890h */ case   21:  		/* stw R8, <#[R31 + 32]> */
		/* 821C4890h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 821C4890h case   21:*/		return 0x821C4894;
		  /* 821C4894h */ case   22:  		/* bl 438860 */
		/* 821C4894h case   22:*/		regs.LR = 0x821C4898; return 0x8222FAE0;
		/* 821C4894h case   22:*/		return 0x821C4898;
		  /* 821C4898h */ case   23:  		/* mr R5, R31 */
		/* 821C4898h case   23:*/		regs.R5 = regs.R31;
		/* 821C4898h case   23:*/		return 0x821C489C;
		  /* 821C489Ch */ case   24:  		/* mr R4, R27 */
		/* 821C489Ch case   24:*/		regs.R4 = regs.R27;
		/* 821C489Ch case   24:*/		return 0x821C48A0;
		  /* 821C48A0h */ case   25:  		/* mr R3, R30 */
		/* 821C48A0h case   25:*/		regs.R3 = regs.R30;
		/* 821C48A0h case   25:*/		return 0x821C48A4;
		  /* 821C48A4h */ case   26:  		/* bl 438844 */
		/* 821C48A4h case   26:*/		regs.LR = 0x821C48A8; return 0x8222FAE0;
		/* 821C48A4h case   26:*/		return 0x821C48A8;
		  /* 821C48A8h */ case   27:  		/* mr R4, R28 */
		/* 821C48A8h case   27:*/		regs.R4 = regs.R28;
		/* 821C48A8h case   27:*/		return 0x821C48AC;
		  /* 821C48ACh */ case   28:  		/* mr R3, R31 */
		/* 821C48ACh case   28:*/		regs.R3 = regs.R31;
		/* 821C48ACh case   28:*/		return 0x821C48B0;
		  /* 821C48B0h */ case   29:  		/* bl -313520 */
		/* 821C48B0h case   29:*/		regs.LR = 0x821C48B4; return 0x82178000;
		/* 821C48B0h case   29:*/		return 0x821C48B4;
		  /* 821C48B4h */ case   30:  		/* mr R6, R3 */
		/* 821C48B4h case   30:*/		regs.R6 = regs.R3;
		/* 821C48B4h case   30:*/		return 0x821C48B8;
		  /* 821C48B8h */ case   31:  		/* addi R5, R29, 24 */
		/* 821C48B8h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x18);
		/* 821C48B8h case   31:*/		return 0x821C48BC;
		  /* 821C48BCh */ case   32:  		/* mr R4, R29 */
		/* 821C48BCh case   32:*/		regs.R4 = regs.R29;
		/* 821C48BCh case   32:*/		return 0x821C48C0;
		  /* 821C48C0h */ case   33:  		/* mr R3, R31 */
		/* 821C48C0h case   33:*/		regs.R3 = regs.R31;
		/* 821C48C0h case   33:*/		return 0x821C48C4;
		  /* 821C48C4h */ case   34:  		/* bl -11748 */
		/* 821C48C4h case   34:*/		regs.LR = 0x821C48C8; return 0x821C1AE0;
		/* 821C48C4h case   34:*/		return 0x821C48C8;
		  /* 821C48C8h */ case   35:  		/* mr R4, R3 */
		/* 821C48C8h case   35:*/		regs.R4 = regs.R3;
		/* 821C48C8h case   35:*/		return 0x821C48CC;
		  /* 821C48CCh */ case   36:  		/* li R5, 7 */
		/* 821C48CCh case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821C48CCh case   36:*/		return 0x821C48D0;
		  /* 821C48D0h */ case   37:  		/* mr R3, R31 */
		/* 821C48D0h case   37:*/		regs.R3 = regs.R31;
		/* 821C48D0h case   37:*/		return 0x821C48D4;
		  /* 821C48D4h */ case   38:  		/* addi R28, R29, 32 */
		/* 821C48D4h case   38:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x20);
		/* 821C48D4h case   38:*/		return 0x821C48D8;
		  /* 821C48D8h */ case   39:  		/* bl -344456 */
		/* 821C48D8h case   39:*/		regs.LR = 0x821C48DC; return 0x82170750;
		/* 821C48D8h case   39:*/		return 0x821C48DC;
		  /* 821C48DCh */ case   40:  		/* mr R6, R3 */
		/* 821C48DCh case   40:*/		regs.R6 = regs.R3;
		/* 821C48DCh case   40:*/		return 0x821C48E0;
		  /* 821C48E0h */ case   41:  		/* mr R5, R28 */
		/* 821C48E0h case   41:*/		regs.R5 = regs.R28;
		/* 821C48E0h case   41:*/		return 0x821C48E4;
		  /* 821C48E4h */ case   42:  		/* mr R4, R29 */
		/* 821C48E4h case   42:*/		regs.R4 = regs.R29;
		/* 821C48E4h case   42:*/		return 0x821C48E8;
		  /* 821C48E8h */ case   43:  		/* mr R3, R31 */
		/* 821C48E8h case   43:*/		regs.R3 = regs.R31;
		/* 821C48E8h case   43:*/		return 0x821C48EC;
		  /* 821C48ECh */ case   44:  		/* bl -11212 */
		/* 821C48ECh case   44:*/		regs.LR = 0x821C48F0; return 0x821C1D20;
		/* 821C48ECh case   44:*/		return 0x821C48F0;
		  /* 821C48F0h */ case   45:  		/* mr R28, R3 */
		/* 821C48F0h case   45:*/		regs.R28 = regs.R3;
		/* 821C48F0h case   45:*/		return 0x821C48F4;
		  /* 821C48F4h */ case   46:  		/* mr R3, R31 */
		/* 821C48F4h case   46:*/		regs.R3 = regs.R31;
		/* 821C48F4h case   46:*/		return 0x821C48F8;
		  /* 821C48F8h */ case   47:  		/* lwz R11, <#[R28 + 8]> */
		/* 821C48F8h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C48F8h case   47:*/		return 0x821C48FC;
		  /* 821C48FCh */ case   48:  		/* oris R11, R11, 6 */
		/* 821C48FCh case   48:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821C48FCh case   48:*/		return 0x821C4900;
		  /* 821C4900h */ case   49:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C4900h case   49:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C4900h case   49:*/		return 0x821C4904;
		  /* 821C4904h */ case   50:  		/* stw R11, <#[R28 + 8]> */
		/* 821C4904h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4904h case   50:*/		return 0x821C4908;
		  /* 821C4908h */ case   51:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C4908h case   51:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C4908h case   51:*/		return 0x821C490C;
		  /* 821C490Ch */ case   52:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C490Ch case   52:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C490Ch case   52:*/		return 0x821C4910;
		  /* 821C4910h */ case   53:  		/* bl -394464 */
		/* 821C4910h case   53:*/		regs.LR = 0x821C4914; return 0x82164430;
		/* 821C4910h case   53:*/		return 0x821C4914;
		  /* 821C4914h */ case   54:  		/* addi R11, R28, -16 */
		/* 821C4914h case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFF0);
		/* 821C4914h case   54:*/		return 0x821C4918;
		  /* 821C4918h */ case   55:  		/* stwx R27, <#[R3 + R11]> */
		/* 821C4918h case   55:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C4918h case   55:*/		return 0x821C491C;
		  /* 821C491Ch */ case   56:  		/* mr R3, R31 */
		/* 821C491Ch case   56:*/		regs.R3 = regs.R31;
		/* 821C491Ch case   56:*/		return 0x821C4920;
		  /* 821C4920h */ case   57:  		/* lwz R11, <#[R29 + 36]> */
		/* 821C4920h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821C4920h case   57:*/		return 0x821C4924;
		  /* 821C4924h */ case   58:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C4924h case   58:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C4924h case   58:*/		return 0x821C4928;
		  /* 821C4928h */ case   59:  		/* addic R10, R10, -1 */
		/* 821C4928h case   59:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C4928h case   59:*/		return 0x821C492C;
		  /* 821C492Ch */ case   60:  		/* subfe R10, R10, R10 */
		/* 821C492Ch case   60:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C492Ch case   60:*/		return 0x821C4930;
		  /* 821C4930h */ case   61:  		/* and R29, R10, R11 */
		/* 821C4930h case   61:*/		cpu::op::and<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821C4930h case   61:*/		return 0x821C4934;
		  /* 821C4934h */ case   62:  		/* lwz R4, <#[R29]> */
		/* 821C4934h case   62:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821C4934h case   62:*/		return 0x821C4938;
		  /* 821C4938h */ case   63:  		/* lwz R5, <#[R4 + 12]> */
		/* 821C4938h case   63:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C4938h case   63:*/		return 0x821C493C;
		  /* 821C493Ch */ case   64:  		/* bl -342092 */
		/* 821C493Ch case   64:*/		regs.LR = 0x821C4940; return 0x821710F0;
		/* 821C493Ch case   64:*/		return 0x821C4940;
		  /* 821C4940h */ case   65:  		/* mr R25, R3 */
		/* 821C4940h case   65:*/		regs.R25 = regs.R3;
		/* 821C4940h case   65:*/		return 0x821C4944;
		  /* 821C4944h */ case   66:  		/* lwz R4, <#[R29]> */
		/* 821C4944h case   66:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821C4944h case   66:*/		return 0x821C4948;
		  /* 821C4948h */ case   67:  		/* mr R5, R31 */
		/* 821C4948h case   67:*/		regs.R5 = regs.R31;
		/* 821C4948h case   67:*/		return 0x821C494C;
		  /* 821C494Ch */ case   68:  		/* mr R3, R29 */
		/* 821C494Ch case   68:*/		regs.R3 = regs.R29;
		/* 821C494Ch case   68:*/		return 0x821C4950;
		  /* 821C4950h */ case   69:  		/* bl -311360 */
		/* 821C4950h case   69:*/		regs.LR = 0x821C4954; return 0x82178910;
		/* 821C4950h case   69:*/		return 0x821C4954;
		  /* 821C4954h */ case   70:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821C4954h case   70:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821C4954h case   70:*/		return 0x821C4958;
		  /* 821C4958h */ case   71:  		/* addi R10, R30, 32 */
		/* 821C4958h case   71:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x20);
		/* 821C4958h case   71:*/		return 0x821C495C;
		  /* 821C495Ch */ case   72:  		/* addi R11, R11, 36 */
		/* 821C495Ch case   72:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C495Ch case   72:*/		return 0x821C4960;
		  /* 821C4960h */ case   73:  		/* addi R10, R10, -36 */
		/* 821C4960h case   73:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821C4960h case   73:*/		return 0x821C4964;
		  /* 821C4964h */ case   74:  		/* addi R9, R11, -36 */
		/* 821C4964h case   74:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821C4964h case   74:*/		return 0x821C4968;
		  /* 821C4968h */ case   75:  		/* lwz R8, <#[R11 + 4]> */
		/* 821C4968h case   75:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4968h case   75:*/		return 0x821C496C;
		  /* 821C496Ch */ case   76:  		/* lwz R7, <#[R11]> */
		/* 821C496Ch case   76:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C496Ch case   76:*/		return 0x821C4970;
		  /* 821C4970h */ case   77:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C4970h case   77:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C4970h case   77:*/		return 0x821C4974;
		  /* 821C4974h */ case   78:  		/* stw R7, <#[R8 + 36]> */
		/* 821C4974h case   78:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000024) );
		/* 821C4974h case   78:*/		return 0x821C4978;
		  /* 821C4978h */ case   79:  		/* lwz R8, <#[R11]> */
		/* 821C4978h case   79:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4978h case   79:*/		return 0x821C497C;
		  /* 821C497Ch */ case   80:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C497Ch case   80:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C497Ch case   80:*/		return 0x821C4980;
		  /* 821C4980h */ case   81:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C4980h case   81:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4980h case   81:*/		return 0x821C4984;
		  /* 821C4984h */ case   82:  		/* ori R6, R10, 1 */
		/* 821C4984h case   82:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R10,0x1);
		/* 821C4984h case   82:*/		return 0x821C4988;
		  /* 821C4988h */ case   83:  		/* addi R10, R11, 4 */
		/* 821C4988h case   83:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C4988h case   83:*/		return 0x821C498C;
		  /* 821C498Ch */ case   84:  		/* addi R27, R30, 24 */
		/* 821C498Ch case   84:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x18);
		/* 821C498Ch case   84:*/		return 0x821C4990;
		  /* 821C4990h */ case   85:  		/* mr R4, R30 */
		/* 821C4990h case   85:*/		regs.R4 = regs.R30;
		/* 821C4990h case   85:*/		return 0x821C4994;
		  /* 821C4994h */ case   86:  		/* mr R5, R27 */
		/* 821C4994h case   86:*/		regs.R5 = regs.R27;
		/* 821C4994h case   86:*/		return 0x821C4998;
		  /* 821C4998h */ case   87:  		/* stw R7, <#[R8]> */
		/* 821C4998h case   87:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4998h case   87:*/		return 0x821C499C;
		  /* 821C499Ch */ case   88:  		/* mr R3, R31 */
		/* 821C499Ch case   88:*/		regs.R3 = regs.R31;
		/* 821C499Ch case   88:*/		return 0x821C49A0;
		  /* 821C49A0h */ case   89:  		/* lwz R8, <#[R30 + 32]> */
		/* 821C49A0h case   89:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000020) );
		/* 821C49A0h case   89:*/		return 0x821C49A4;
		  /* 821C49A4h */ case   90:  		/* stw R8, <#[R11]> */
		/* 821C49A4h case   90:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821C49A4h case   90:*/		return 0x821C49A8;
		  /* 821C49A8h */ case   91:  		/* li R8, 0 */
		/* 821C49A8h case   91:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C49A8h case   91:*/		return 0x821C49AC;
		  /* 821C49ACh */ case   92:  		/* lwz R7, <#[R30 + 32]> */
		/* 821C49ACh case   92:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000020) );
		/* 821C49ACh case   92:*/		return 0x821C49B0;
		  /* 821C49B0h */ case   93:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C49B0h case   93:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C49B0h case   93:*/		return 0x821C49B4;
		  /* 821C49B4h */ case   94:  		/* stw R9, <#[R7]> */
		/* 821C49B4h case   94:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821C49B4h case   94:*/		return 0x821C49B8;
		  /* 821C49B8h */ case   95:  		/* li R7, 0 */
		/* 821C49B8h case   95:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C49B8h case   95:*/		return 0x821C49BC;
		  /* 821C49BCh */ case   96:  		/* stw R6, <#[R11 + 4]> */
		/* 821C49BCh case   96:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C49BCh case   96:*/		return 0x821C49C0;
		  /* 821C49C0h */ case   97:  		/* li R6, 94 */
		/* 821C49C0h case   97:*/		cpu::op::li<0>(regs,&regs.R6,0x5E);
		/* 821C49C0h case   97:*/		return 0x821C49C4;
		  /* 821C49C4h */ case   98:  		/* stw R10, <#[R30 + 32]> */
		/* 821C49C4h case   98:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000020) );
		/* 821C49C4h case   98:*/		return 0x821C49C8;
		  /* 821C49C8h */ case   99:  		/* stw R30, <#[R29 + 28]> */
		/* 821C49C8h case   99:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000001C) );
		/* 821C49C8h case   99:*/		return 0x821C49CC;
		  /* 821C49CCh */ case  100:  		/* bl 393164 */
		/* 821C49CCh case  100:*/		regs.LR = 0x821C49D0; return 0x82224998;
		/* 821C49CCh case  100:*/		return 0x821C49D0;
		  /* 821C49D0h */ case  101:  		/* mr R28, R3 */
		/* 821C49D0h case  101:*/		regs.R28 = regs.R3;
		/* 821C49D0h case  101:*/		return 0x821C49D4;
		  /* 821C49D4h */ case  102:  		/* li R6, 0 */
		/* 821C49D4h case  102:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C49D4h case  102:*/		return 0x821C49D8;
		  /* 821C49D8h */ case  103:  		/* li R5, 0 */
		/* 821C49D8h case  103:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C49D8h case  103:*/		return 0x821C49DC;
		  /* 821C49DCh */ case  104:  		/* li R4, 94 */
		/* 821C49DCh case  104:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 821C49DCh case  104:*/		return 0x821C49E0;
		  /* 821C49E0h */ case  105:  		/* mr R3, R31 */
		/* 821C49E0h case  105:*/		regs.R3 = regs.R31;
		/* 821C49E0h case  105:*/		return 0x821C49E4;
		  /* 821C49E4h */ case  106:  		/* bl -394676 */
		/* 821C49E4h case  106:*/		regs.LR = 0x821C49E8; return 0x82164430;
		/* 821C49E4h case  106:*/		return 0x821C49E8;
		  /* 821C49E8h */ case  107:  		/* addi R11, R28, -12 */
		/* 821C49E8h case  107:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFF4);
		/* 821C49E8h case  107:*/		return 0x821C49EC;
		  /* 821C49ECh */ case  108:  		/* li R10, 9 */
		/* 821C49ECh case  108:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 821C49ECh case  108:*/		return 0x821C49F0;
		  /* 821C49F0h */ case  109:  		/* add R11, R3, R11 */
		/* 821C49F0h case  109:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C49F0h case  109:*/		return 0x821C49F4;
		  /* 821C49F4h */ case  110:  		/* lwz R9, <#[R11]> */
		/* 821C49F4h case  110:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C49F4h case  110:*/		return 0x821C49F8;
		  /* 821C49F8h */ case  111:  		/* rlwimi R9, R10, 0, 28, 31 */
		/* 821C49F8h case  111:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R9,regs.R10);
		/* 821C49F8h case  111:*/		return 0x821C49FC;
		  /* 821C49FCh */ case  112:  		/* stw R9, <#[R11]> */
		/* 821C49FCh case  112:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C49FCh case  112:*/		return 0x821C4A00;
		  /* 821C4A00h */ case  113:  		/* lwz R5, <#[R30 + 100]> */
		/* 821C4A00h case  113:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4A00h case  113:*/		return 0x821C4A04;
		  /* 821C4A04h */ case  114:  		/* cmplwi CR6, R5, 0 */
		/* 821C4A04h case  114:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C4A04h case  114:*/		return 0x821C4A08;
		  /* 821C4A08h */ case  115:  		/* bc 12, CR6_EQ, 20 */
		/* 821C4A08h case  115:*/		if ( regs.CR[6].eq ) { return 0x821C4A1C;  }
		/* 821C4A08h case  115:*/		return 0x821C4A0C;
		  /* 821C4A0Ch */ case  116:  		/* mr R6, R31 */
		/* 821C4A0Ch case  116:*/		regs.R6 = regs.R31;
		/* 821C4A0Ch case  116:*/		return 0x821C4A10;
		  /* 821C4A10h */ case  117:  		/* li R4, 2 */
		/* 821C4A10h case  117:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C4A10h case  117:*/		return 0x821C4A14;
		  /* 821C4A14h */ case  118:  		/* mr R3, R28 */
		/* 821C4A14h case  118:*/		regs.R3 = regs.R28;
		/* 821C4A14h case  118:*/		return 0x821C4A18;
		  /* 821C4A18h */ case  119:  		/* bl -311456 */
		/* 821C4A18h case  119:*/		regs.LR = 0x821C4A1C; return 0x82178978;
		/* 821C4A18h case  119:*/		return 0x821C4A1C;
	}
	return 0x821C4A1C;
} // Block from 821C483Ch-821C4A1Ch (120 instructions)

//////////////////////////////////////////////////////
// Block at 821C4A1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4A1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4A1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4A1C);
		  /* 821C4A1Ch */ case    0:  		/* stw R28, <#[R30 + 100]> */
		/* 821C4A1Ch case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4A1Ch case    0:*/		return 0x821C4A20;
		  /* 821C4A20h */ case    1:  		/* li R8, 4 */
		/* 821C4A20h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C4A20h case    1:*/		return 0x821C4A24;
		  /* 821C4A24h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821C4A24h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4A24h case    2:*/		return 0x821C4A28;
		  /* 821C4A28h */ case    3:  		/* oris R11, R11, 512 */
		/* 821C4A28h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C4A28h case    3:*/		return 0x821C4A2C;
		  /* 821C4A2Ch */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 821C4A2Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4A2Ch case    4:*/		return 0x821C4A30;
		  /* 821C4A30h */ case    5:  		/* li R7, 3 */
		/* 821C4A30h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C4A30h case    5:*/		return 0x821C4A34;
		  /* 821C4A34h */ case    6:  		/* li R6, 105 */
		/* 821C4A34h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x69);
		/* 821C4A34h case    6:*/		return 0x821C4A38;
		  /* 821C4A38h */ case    7:  		/* mr R5, R27 */
		/* 821C4A38h case    7:*/		regs.R5 = regs.R27;
		/* 821C4A38h case    7:*/		return 0x821C4A3C;
		  /* 821C4A3Ch */ case    8:  		/* mr R4, R30 */
		/* 821C4A3Ch case    8:*/		regs.R4 = regs.R30;
		/* 821C4A3Ch case    8:*/		return 0x821C4A40;
		  /* 821C4A40h */ case    9:  		/* mr R3, R31 */
		/* 821C4A40h case    9:*/		regs.R3 = regs.R31;
		/* 821C4A40h case    9:*/		return 0x821C4A44;
		  /* 821C4A44h */ case   10:  		/* bl 393044 */
		/* 821C4A44h case   10:*/		regs.LR = 0x821C4A48; return 0x82224998;
		/* 821C4A44h case   10:*/		return 0x821C4A48;
		  /* 821C4A48h */ case   11:  		/* mr R28, R3 */
		/* 821C4A48h case   11:*/		regs.R28 = regs.R3;
		/* 821C4A48h case   11:*/		return 0x821C4A4C;
		  /* 821C4A4Ch */ case   12:  		/* mr R4, R24 */
		/* 821C4A4Ch case   12:*/		regs.R4 = regs.R24;
		/* 821C4A4Ch case   12:*/		return 0x821C4A50;
		  /* 821C4A50h */ case   13:  		/* mr R3, R31 */
		/* 821C4A50h case   13:*/		regs.R3 = regs.R31;
		/* 821C4A50h case   13:*/		return 0x821C4A54;
		  /* 821C4A54h */ case   14:  		/* bl -313940 */
		/* 821C4A54h case   14:*/		regs.LR = 0x821C4A58; return 0x82178000;
		/* 821C4A54h case   14:*/		return 0x821C4A58;
		  /* 821C4A58h */ case   15:  		/* lwz R11, <#[R3]> */
		/* 821C4A58h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4A58h case   15:*/		return 0x821C4A5C;
		  /* 821C4A5Ch */ case   16:  		/* li R4, 0 */
		/* 821C4A5Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C4A5Ch case   16:*/		return 0x821C4A60;
		  /* 821C4A60h */ case   17:  		/* rlwimi R11, R26, 27, 4, 6 */
		/* 821C4A60h case   17:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R26);
		/* 821C4A60h case   17:*/		return 0x821C4A64;
		  /* 821C4A64h */ case   18:  		/* mr R24, R3 */
		/* 821C4A64h case   18:*/		regs.R24 = regs.R3;
		/* 821C4A64h case   18:*/		return 0x821C4A68;
		  /* 821C4A68h */ case   19:  		/* stw R11, <#[R3]> */
		/* 821C4A68h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4A68h case   19:*/		return 0x821C4A6C;
		  /* 821C4A6Ch */ case   20:  		/* bl -315308 */
		/* 821C4A6Ch case   20:*/		regs.LR = 0x821C4A70; return 0x82177AC0;
		/* 821C4A6Ch case   20:*/		return 0x821C4A70;
		  /* 821C4A70h */ case   21:  		/* lwz R11, <#[R24]> */
		/* 821C4A70h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821C4A70h case   21:*/		return 0x821C4A74;
		  /* 821C4A74h */ case   22:  		/* mr R3, R28 */
		/* 821C4A74h case   22:*/		regs.R3 = regs.R28;
		/* 821C4A74h case   22:*/		return 0x821C4A78;
		  /* 821C4A78h */ case   23:  		/* rlwimi R11, R26, 7, 19, 26 */
		/* 821C4A78h case   23:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R26);
		/* 821C4A78h case   23:*/		return 0x821C4A7C;
		  /* 821C4A7Ch */ case   24:  		/* mr R4, R24 */
		/* 821C4A7Ch case   24:*/		regs.R4 = regs.R24;
		/* 821C4A7Ch case   24:*/		return 0x821C4A80;
		  /* 821C4A80h */ case   25:  		/* stw R11, <#[R24]> */
		/* 821C4A80h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821C4A80h case   25:*/		return 0x821C4A84;
		  /* 821C4A84h */ case   26:  		/* bl -313532 */
		/* 821C4A84h case   26:*/		regs.LR = 0x821C4A88; return 0x821781C8;
		/* 821C4A84h case   26:*/		return 0x821C4A88;
		  /* 821C4A88h */ case   27:  		/* stw R3, <#[R28 + 44]> */
		/* 821C4A88h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821C4A88h case   27:*/		return 0x821C4A8C;
		  /* 821C4A8Ch */ case   28:  		/* mr R4, R23 */
		/* 821C4A8Ch case   28:*/		regs.R4 = regs.R23;
		/* 821C4A8Ch case   28:*/		return 0x821C4A90;
		  /* 821C4A90h */ case   29:  		/* mr R3, R31 */
		/* 821C4A90h case   29:*/		regs.R3 = regs.R31;
		/* 821C4A90h case   29:*/		return 0x821C4A94;
		  /* 821C4A94h */ case   30:  		/* bl -314004 */
		/* 821C4A94h case   30:*/		regs.LR = 0x821C4A98; return 0x82178000;
		/* 821C4A94h case   30:*/		return 0x821C4A98;
		  /* 821C4A98h */ case   31:  		/* lwz R11, <#[R3]> */
		/* 821C4A98h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4A98h case   31:*/		return 0x821C4A9C;
		  /* 821C4A9Ch */ case   32:  		/* li R4, 0 */
		/* 821C4A9Ch case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C4A9Ch case   32:*/		return 0x821C4AA0;
		  /* 821C4AA0h */ case   33:  		/* rlwimi R11, R26, 27, 4, 6 */
		/* 821C4AA0h case   33:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R26);
		/* 821C4AA0h case   33:*/		return 0x821C4AA4;
		  /* 821C4AA4h */ case   34:  		/* mr R24, R3 */
		/* 821C4AA4h case   34:*/		regs.R24 = regs.R3;
		/* 821C4AA4h case   34:*/		return 0x821C4AA8;
		  /* 821C4AA8h */ case   35:  		/* stw R11, <#[R3]> */
		/* 821C4AA8h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4AA8h case   35:*/		return 0x821C4AAC;
		  /* 821C4AACh */ case   36:  		/* bl -315372 */
		/* 821C4AACh case   36:*/		regs.LR = 0x821C4AB0; return 0x82177AC0;
		/* 821C4AACh case   36:*/		return 0x821C4AB0;
		  /* 821C4AB0h */ case   37:  		/* lwz R11, <#[R24]> */
		/* 821C4AB0h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821C4AB0h case   37:*/		return 0x821C4AB4;
		  /* 821C4AB4h */ case   38:  		/* mr R3, R28 */
		/* 821C4AB4h case   38:*/		regs.R3 = regs.R28;
		/* 821C4AB4h case   38:*/		return 0x821C4AB8;
		  /* 821C4AB8h */ case   39:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C4AB8h case   39:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C4AB8h case   39:*/		return 0x821C4ABC;
		  /* 821C4ABCh */ case   40:  		/* mr R4, R24 */
		/* 821C4ABCh case   40:*/		regs.R4 = regs.R24;
		/* 821C4ABCh case   40:*/		return 0x821C4AC0;
		  /* 821C4AC0h */ case   41:  		/* stw R11, <#[R24]> */
		/* 821C4AC0h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821C4AC0h case   41:*/		return 0x821C4AC4;
		  /* 821C4AC4h */ case   42:  		/* bl -313596 */
		/* 821C4AC4h case   42:*/		regs.LR = 0x821C4AC8; return 0x821781C8;
		/* 821C4AC4h case   42:*/		return 0x821C4AC8;
		  /* 821C4AC8h */ case   43:  		/* stw R3, <#[R28 + 48]> */
		/* 821C4AC8h case   43:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000030) );
		/* 821C4AC8h case   43:*/		return 0x821C4ACC;
		  /* 821C4ACCh */ case   44:  		/* mr R4, R22 */
		/* 821C4ACCh case   44:*/		regs.R4 = regs.R22;
		/* 821C4ACCh case   44:*/		return 0x821C4AD0;
		  /* 821C4AD0h */ case   45:  		/* mr R3, R31 */
		/* 821C4AD0h case   45:*/		regs.R3 = regs.R31;
		/* 821C4AD0h case   45:*/		return 0x821C4AD4;
		  /* 821C4AD4h */ case   46:  		/* bl -314068 */
		/* 821C4AD4h case   46:*/		regs.LR = 0x821C4AD8; return 0x82178000;
		/* 821C4AD4h case   46:*/		return 0x821C4AD8;
		  /* 821C4AD8h */ case   47:  		/* mr R4, R3 */
		/* 821C4AD8h case   47:*/		regs.R4 = regs.R3;
		/* 821C4AD8h case   47:*/		return 0x821C4ADC;
		  /* 821C4ADCh */ case   48:  		/* mr R3, R28 */
		/* 821C4ADCh case   48:*/		regs.R3 = regs.R28;
		/* 821C4ADCh case   48:*/		return 0x821C4AE0;
		  /* 821C4AE0h */ case   49:  		/* bl -313624 */
		/* 821C4AE0h case   49:*/		regs.LR = 0x821C4AE4; return 0x821781C8;
		/* 821C4AE0h case   49:*/		return 0x821C4AE4;
		  /* 821C4AE4h */ case   50:  		/* stw R3, <#[R28 + 52]> */
		/* 821C4AE4h case   50:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000034) );
		/* 821C4AE4h case   50:*/		return 0x821C4AE8;
		  /* 821C4AE8h */ case   51:  		/* stw R30, <#[R31 + 564]> */
		/* 821C4AE8h case   51:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000234) );
		/* 821C4AE8h case   51:*/		return 0x821C4AEC;
		  /* 821C4AECh */ case   52:  		/* mr R4, R28 */
		/* 821C4AECh case   52:*/		regs.R4 = regs.R28;
		/* 821C4AECh case   52:*/		return 0x821C4AF0;
		  /* 821C4AF0h */ case   53:  		/* mr R3, R31 */
		/* 821C4AF0h case   53:*/		regs.R3 = regs.R31;
		/* 821C4AF0h case   53:*/		return 0x821C4AF4;
		  /* 821C4AF4h */ case   54:  		/* bl -314100 */
		/* 821C4AF4h case   54:*/		regs.LR = 0x821C4AF8; return 0x82178000;
		/* 821C4AF4h case   54:*/		return 0x821C4AF8;
		  /* 821C4AF8h */ case   55:  		/* mr R4, R3 */
		/* 821C4AF8h case   55:*/		regs.R4 = regs.R3;
		/* 821C4AF8h case   55:*/		return 0x821C4AFC;
		  /* 821C4AFCh */ case   56:  		/* mr R3, R31 */
		/* 821C4AFCh case   56:*/		regs.R3 = regs.R31;
		/* 821C4AFCh case   56:*/		return 0x821C4B00;
		  /* 821C4B00h */ case   57:  		/* li R5, 527 */
		/* 821C4B00h case   57:*/		cpu::op::li<0>(regs,&regs.R5,0x20F);
		/* 821C4B00h case   57:*/		return 0x821C4B04;
		  /* 821C4B04h */ case   58:  		/* mr R6, R29 */
		/* 821C4B04h case   58:*/		regs.R6 = regs.R29;
		/* 821C4B04h case   58:*/		return 0x821C4B08;
		  /* 821C4B08h */ case   59:  		/* li R7, 0 */
		/* 821C4B08h case   59:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C4B08h case   59:*/		return 0x821C4B0C;
		  /* 821C4B0Ch */ case   60:  		/* bl 400788 */
		/* 821C4B0Ch case   60:*/		regs.LR = 0x821C4B10; return 0x822268A0;
		/* 821C4B0Ch case   60:*/		return 0x821C4B10;
		  /* 821C4B10h */ case   61:  		/* lwz R5, <#[R30 + 100]> */
		/* 821C4B10h case   61:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4B10h case   61:*/		return 0x821C4B14;
		  /* 821C4B14h */ case   62:  		/* lwz R28, <#[R3 + 12]> */
		/* 821C4B14h case   62:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C4B14h case   62:*/		return 0x821C4B18;
		  /* 821C4B18h */ case   63:  		/* cmplwi CR6, R5, 0 */
		/* 821C4B18h case   63:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C4B18h case   63:*/		return 0x821C4B1C;
		  /* 821C4B1Ch */ case   64:  		/* bc 12, CR6_EQ, 20 */
		/* 821C4B1Ch case   64:*/		if ( regs.CR[6].eq ) { return 0x821C4B30;  }
		/* 821C4B1Ch case   64:*/		return 0x821C4B20;
		  /* 821C4B20h */ case   65:  		/* mr R6, R31 */
		/* 821C4B20h case   65:*/		regs.R6 = regs.R31;
		/* 821C4B20h case   65:*/		return 0x821C4B24;
		  /* 821C4B24h */ case   66:  		/* li R4, 2 */
		/* 821C4B24h case   66:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C4B24h case   66:*/		return 0x821C4B28;
		  /* 821C4B28h */ case   67:  		/* mr R3, R28 */
		/* 821C4B28h case   67:*/		regs.R3 = regs.R28;
		/* 821C4B28h case   67:*/		return 0x821C4B2C;
		  /* 821C4B2Ch */ case   68:  		/* bl -311732 */
		/* 821C4B2Ch case   68:*/		regs.LR = 0x821C4B30; return 0x82178978;
		/* 821C4B2Ch case   68:*/		return 0x821C4B30;
	}
	return 0x821C4B30;
} // Block from 821C4A1Ch-821C4B30h (69 instructions)

//////////////////////////////////////////////////////
// Block at 821C4B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4B30);
		  /* 821C4B30h */ case    0:  		/* stw R28, <#[R30 + 100]> */
		/* 821C4B30h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4B30h case    0:*/		return 0x821C4B34;
		  /* 821C4B34h */ case    1:  		/* li R6, 1 */
		/* 821C4B34h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C4B34h case    1:*/		return 0x821C4B38;
		  /* 821C4B38h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821C4B38h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4B38h case    2:*/		return 0x821C4B3C;
		  /* 821C4B3Ch */ case    3:  		/* oris R11, R11, 512 */
		/* 821C4B3Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C4B3Ch case    3:*/		return 0x821C4B40;
		  /* 821C4B40h */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 821C4B40h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4B40h case    4:*/		return 0x821C4B44;
		  /* 821C4B44h */ case    5:  		/* mr R5, R27 */
		/* 821C4B44h case    5:*/		regs.R5 = regs.R27;
		/* 821C4B44h case    5:*/		return 0x821C4B48;
		  /* 821C4B48h */ case    6:  		/* mr R4, R30 */
		/* 821C4B48h case    6:*/		regs.R4 = regs.R30;
		/* 821C4B48h case    6:*/		return 0x821C4B4C;
		  /* 821C4B4Ch */ case    7:  		/* mr R3, R31 */
		/* 821C4B4Ch case    7:*/		regs.R3 = regs.R31;
		/* 821C4B4Ch case    7:*/		return 0x821C4B50;
		  /* 821C4B50h */ case    8:  		/* bl 393136 */
		/* 821C4B50h case    8:*/		regs.LR = 0x821C4B54; return 0x82224B00;
		/* 821C4B50h case    8:*/		return 0x821C4B54;
		  /* 821C4B54h */ case    9:  		/* mr R4, R25 */
		/* 821C4B54h case    9:*/		regs.R4 = regs.R25;
		/* 821C4B54h case    9:*/		return 0x821C4B58;
		  /* 821C4B58h */ case   10:  		/* mr R28, R3 */
		/* 821C4B58h case   10:*/		regs.R28 = regs.R3;
		/* 821C4B58h case   10:*/		return 0x821C4B5C;
		  /* 821C4B5Ch */ case   11:  		/* bl -313748 */
		/* 821C4B5Ch case   11:*/		regs.LR = 0x821C4B60; return 0x821781C8;
		/* 821C4B5Ch case   11:*/		return 0x821C4B60;
		  /* 821C4B60h */ case   12:  		/* stw R3, <#[R28 + 44]> */
		/* 821C4B60h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821C4B60h case   12:*/		return 0x821C4B64;
		  /* 821C4B64h */ case   13:  		/* mr R4, R28 */
		/* 821C4B64h case   13:*/		regs.R4 = regs.R28;
		/* 821C4B64h case   13:*/		return 0x821C4B68;
		  /* 821C4B68h */ case   14:  		/* mr R3, R31 */
		/* 821C4B68h case   14:*/		regs.R3 = regs.R31;
		/* 821C4B68h case   14:*/		return 0x821C4B6C;
		  /* 821C4B6Ch */ case   15:  		/* bl -314220 */
		/* 821C4B6Ch case   15:*/		regs.LR = 0x821C4B70; return 0x82178000;
		/* 821C4B6Ch case   15:*/		return 0x821C4B70;
		  /* 821C4B70h */ case   16:  		/* mr R4, R3 */
		/* 821C4B70h case   16:*/		regs.R4 = regs.R3;
		/* 821C4B70h case   16:*/		return 0x821C4B74;
		  /* 821C4B74h */ case   17:  		/* mr R3, R31 */
		/* 821C4B74h case   17:*/		regs.R3 = regs.R31;
		/* 821C4B74h case   17:*/		return 0x821C4B78;
		  /* 821C4B78h */ case   18:  		/* li R5, 529 */
		/* 821C4B78h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x211);
		/* 821C4B78h case   18:*/		return 0x821C4B7C;
		  /* 821C4B7Ch */ case   19:  		/* mr R6, R29 */
		/* 821C4B7Ch case   19:*/		regs.R6 = regs.R29;
		/* 821C4B7Ch case   19:*/		return 0x821C4B80;
		  /* 821C4B80h */ case   20:  		/* li R7, 1 */
		/* 821C4B80h case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C4B80h case   20:*/		return 0x821C4B84;
		  /* 821C4B84h */ case   21:  		/* bl 400668 */
		/* 821C4B84h case   21:*/		regs.LR = 0x821C4B88; return 0x822268A0;
		/* 821C4B84h case   21:*/		return 0x821C4B88;
		  /* 821C4B88h */ case   22:  		/* lwz R5, <#[R30 + 100]> */
		/* 821C4B88h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4B88h case   22:*/		return 0x821C4B8C;
		  /* 821C4B8Ch */ case   23:  		/* lwz R29, <#[R3 + 12]> */
		/* 821C4B8Ch case   23:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C4B8Ch case   23:*/		return 0x821C4B90;
		  /* 821C4B90h */ case   24:  		/* cmplwi CR6, R5, 0 */
		/* 821C4B90h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C4B90h case   24:*/		return 0x821C4B94;
		  /* 821C4B94h */ case   25:  		/* bc 12, CR6_EQ, 20 */
		/* 821C4B94h case   25:*/		if ( regs.CR[6].eq ) { return 0x821C4BA8;  }
		/* 821C4B94h case   25:*/		return 0x821C4B98;
		  /* 821C4B98h */ case   26:  		/* mr R6, R31 */
		/* 821C4B98h case   26:*/		regs.R6 = regs.R31;
		/* 821C4B98h case   26:*/		return 0x821C4B9C;
		  /* 821C4B9Ch */ case   27:  		/* li R4, 2 */
		/* 821C4B9Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C4B9Ch case   27:*/		return 0x821C4BA0;
		  /* 821C4BA0h */ case   28:  		/* mr R3, R29 */
		/* 821C4BA0h case   28:*/		regs.R3 = regs.R29;
		/* 821C4BA0h case   28:*/		return 0x821C4BA4;
		  /* 821C4BA4h */ case   29:  		/* bl -311852 */
		/* 821C4BA4h case   29:*/		regs.LR = 0x821C4BA8; return 0x82178978;
		/* 821C4BA4h case   29:*/		return 0x821C4BA8;
	}
	return 0x821C4BA8;
} // Block from 821C4B30h-821C4BA8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821C4BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4BA8);
		  /* 821C4BA8h */ case    0:  		/* stw R29, <#[R30 + 100]> */
		/* 821C4BA8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000064) );
		/* 821C4BA8h case    0:*/		return 0x821C4BAC;
		  /* 821C4BACh */ case    1:  		/* mr R3, R31 */
		/* 821C4BACh case    1:*/		regs.R3 = regs.R31;
		/* 821C4BACh case    1:*/		return 0x821C4BB0;
		  /* 821C4BB0h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821C4BB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C4BB0h case    2:*/		return 0x821C4BB4;
		  /* 821C4BB4h */ case    3:  		/* oris R11, R11, 512 */
		/* 821C4BB4h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C4BB4h case    3:*/		return 0x821C4BB8;
		  /* 821C4BB8h */ case    4:  		/* stw R11, <#[R29 + 8]> */
		/* 821C4BB8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C4BB8h case    4:*/		return 0x821C4BBC;
		  /* 821C4BBCh */ case    5:  		/* bl 157540 */
		/* 821C4BBCh case    5:*/		regs.LR = 0x821C4BC0; return 0x821EB320;
		/* 821C4BBCh case    5:*/		return 0x821C4BC0;
		  /* 821C4BC0h */ case    6:  		/* addi R1, R1, 176 */
		/* 821C4BC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821C4BC0h case    6:*/		return 0x821C4BC4;
		  /* 821C4BC4h */ case    7:  		/* b -1259828 */
		/* 821C4BC4h case    7:*/		return 0x82091290;
		/* 821C4BC4h case    7:*/		return 0x821C4BC8;
	}
	return 0x821C4BC8;
} // Block from 821C4BA8h-821C4BC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4BC8);
		  /* 821C4BC8h */ case    0:  		/* mfspr R12, LR */
		/* 821C4BC8h case    0:*/		regs.R12 = regs.LR;
		/* 821C4BC8h case    0:*/		return 0x821C4BCC;
		  /* 821C4BCCh */ case    1:  		/* bl -1259924 */
		/* 821C4BCCh case    1:*/		regs.LR = 0x821C4BD0; return 0x82091238;
		/* 821C4BCCh case    1:*/		return 0x821C4BD0;
		  /* 821C4BD0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821C4BD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821C4BD0h case    2:*/		return 0x821C4BD4;
		  /* 821C4BD4h */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 821C4BD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821C4BD4h case    3:*/		return 0x821C4BD8;
		  /* 821C4BD8h */ case    4:  		/* mr R27, R6 */
		/* 821C4BD8h case    4:*/		regs.R27 = regs.R6;
		/* 821C4BD8h case    4:*/		return 0x821C4BDC;
		  /* 821C4BDCh */ case    5:  		/* mr R21, R4 */
		/* 821C4BDCh case    5:*/		regs.R21 = regs.R4;
		/* 821C4BDCh case    5:*/		return 0x821C4BE0;
		  /* 821C4BE0h */ case    6:  		/* lwz R4, <#[R5 + 28]> */
		/* 821C4BE0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C4BE0h case    6:*/		return 0x821C4BE4;
		  /* 821C4BE4h */ case    7:  		/* rlwinm R28, R11, 18, 29, 31 */
		/* 821C4BE4h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R28,regs.R11);
		/* 821C4BE4h case    7:*/		return 0x821C4BE8;
		  /* 821C4BE8h */ case    8:  		/* mr R30, R5 */
		/* 821C4BE8h case    8:*/		regs.R30 = regs.R5;
		/* 821C4BE8h case    8:*/		return 0x821C4BEC;
		  /* 821C4BECh */ case    9:  		/* subf R24, R27, R28 */
		/* 821C4BECh case    9:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R27,regs.R28);
		/* 821C4BECh case    9:*/		return 0x821C4BF0;
		  /* 821C4BF0h */ case   10:  		/* li R7, 0 */
		/* 821C4BF0h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C4BF0h case   10:*/		return 0x821C4BF4;
		  /* 821C4BF4h */ case   11:  		/* li R6, 113 */
		/* 821C4BF4h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x71);
		/* 821C4BF4h case   11:*/		return 0x821C4BF8;
		  /* 821C4BF8h */ case   12:  		/* li R5, 0 */
		/* 821C4BF8h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4BF8h case   12:*/		return 0x821C4BFC;
		  /* 821C4BFCh */ case   13:  		/* mr R8, R24 */
		/* 821C4BFCh case   13:*/		regs.R8 = regs.R24;
		/* 821C4BFCh case   13:*/		return 0x821C4C00;
		  /* 821C4C00h */ case   14:  		/* mr R31, R3 */
		/* 821C4C00h case   14:*/		regs.R31 = regs.R3;
		/* 821C4C00h case   14:*/		return 0x821C4C04;
		  /* 821C4C04h */ case   15:  		/* bl 392596 */
		/* 821C4C04h case   15:*/		regs.LR = 0x821C4C08; return 0x82224998;
		/* 821C4C04h case   15:*/		return 0x821C4C08;
		  /* 821C4C08h */ case   16:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C4C08h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C4C08h case   16:*/		return 0x821C4C0C;
		  /* 821C4C0Ch */ case   17:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C4C0Ch case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C4C0Ch case   17:*/		return 0x821C4C10;
		  /* 821C4C10h */ case   18:  		/* addi R11, R11, 36 */
		/* 821C4C10h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C4C10h case   18:*/		return 0x821C4C14;
		  /* 821C4C14h */ case   19:  		/* addi R10, R10, 36 */
		/* 821C4C14h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C4C14h case   19:*/		return 0x821C4C18;
		  /* 821C4C18h */ case   20:  		/* mr R29, R3 */
		/* 821C4C18h case   20:*/		regs.R29 = regs.R3;
		/* 821C4C18h case   20:*/		return 0x821C4C1C;
		  /* 821C4C1Ch */ case   21:  		/* addi R4, R10, -36 */
		/* 821C4C1Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFFFDC);
		/* 821C4C1Ch case   21:*/		return 0x821C4C20;
		  /* 821C4C20h */ case   22:  		/* addi R8, R11, -36 */
		/* 821C4C20h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C4C20h case   22:*/		return 0x821C4C24;
		  /* 821C4C24h */ case   23:  		/* lwz R7, <#[R11]> */
		/* 821C4C24h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4C24h case   23:*/		return 0x821C4C28;
		  /* 821C4C28h */ case   24:  		/* addi R9, R10, 4 */
		/* 821C4C28h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C4C28h case   24:*/		return 0x821C4C2C;
		  /* 821C4C2Ch */ case   25:  		/* mr R6, R28 */
		/* 821C4C2Ch case   25:*/		regs.R6 = regs.R28;
		/* 821C4C2Ch case   25:*/		return 0x821C4C30;
		  /* 821C4C30h */ case   26:  		/* li R5, 0 */
		/* 821C4C30h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4C30h case   26:*/		return 0x821C4C34;
		  /* 821C4C34h */ case   27:  		/* mr R3, R31 */
		/* 821C4C34h case   27:*/		regs.R3 = regs.R31;
		/* 821C4C34h case   27:*/		return 0x821C4C38;
		  /* 821C4C38h */ case   28:  		/* stw R7, <#[R10]> */
		/* 821C4C38h case   28:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4C38h case   28:*/		return 0x821C4C3C;
		  /* 821C4C3Ch */ case   29:  		/* lwz R7, <#[R11]> */
		/* 821C4C3Ch case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4C3Ch case   29:*/		return 0x821C4C40;
		  /* 821C4C40h */ case   30:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C4C40h case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C4C40h case   30:*/		return 0x821C4C44;
		  /* 821C4C44h */ case   31:  		/* stw R4, <#[R7]> */
		/* 821C4C44h case   31:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R7 + 0x00000000) );
		/* 821C4C44h case   31:*/		return 0x821C4C48;
		  /* 821C4C48h */ case   32:  		/* stw R8, <#[R10 + 4]> */
		/* 821C4C48h case   32:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C4C48h case   32:*/		return 0x821C4C4C;
		  /* 821C4C4Ch */ case   33:  		/* stw R9, <#[R11]> */
		/* 821C4C4Ch case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4C4Ch case   33:*/		return 0x821C4C50;
		  /* 821C4C50h */ case   34:  		/* lwz R11, <#[R29 + 8]> */
		/* 821C4C50h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C4C50h case   34:*/		return 0x821C4C54;
		  /* 821C4C54h */ case   35:  		/* oris R11, R11, 128 */
		/* 821C4C54h case   35:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821C4C54h case   35:*/		return 0x821C4C58;
		  /* 821C4C58h */ case   36:  		/* stw R11, <#[R29 + 8]> */
		/* 821C4C58h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C4C58h case   36:*/		return 0x821C4C5C;
		  /* 821C4C5Ch */ case   37:  		/* lwz R4, <#[R30 + 28]> */
		/* 821C4C5Ch case   37:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C4C5Ch case   37:*/		return 0x821C4C60;
		  /* 821C4C60h */ case   38:  		/* bl 392864 */
		/* 821C4C60h case   38:*/		regs.LR = 0x821C4C64; return 0x82224B00;
		/* 821C4C60h case   38:*/		return 0x821C4C64;
		  /* 821C4C64h */ case   39:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C4C64h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C4C64h case   39:*/		return 0x821C4C68;
		  /* 821C4C68h */ case   40:  		/* addi R11, R11, 24 */
		/* 821C4C68h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x18);
		/* 821C4C68h case   40:*/		return 0x821C4C6C;
		  /* 821C4C6Ch */ case   41:  		/* rlwinm R9, R3, 0, 0, 30 */
		/* 821C4C6Ch case   41:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R3);
		/* 821C4C6Ch case   41:*/		return 0x821C4C70;
		  /* 821C4C70h */ case   42:  		/* addi R10, R11, 4 */
		/* 821C4C70h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C4C70h case   42:*/		return 0x821C4C74;
		  /* 821C4C74h */ case   43:  		/* mr R26, R3 */
		/* 821C4C74h case   43:*/		regs.R26 = regs.R3;
		/* 821C4C74h case   43:*/		return 0x821C4C78;
		  /* 821C4C78h */ case   44:  		/* ori R8, R10, 1 */
		/* 821C4C78h case   44:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821C4C78h case   44:*/		return 0x821C4C7C;
		  /* 821C4C7Ch */ case   45:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C4C7Ch case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4C7Ch case   45:*/		return 0x821C4C80;
		  /* 821C4C80h */ case   46:  		/* addi R10, R9, 36 */
		/* 821C4C80h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x24);
		/* 821C4C80h case   46:*/		return 0x821C4C84;
		  /* 821C4C84h */ case   47:  		/* li R28, 0 */
		/* 821C4C84h case   47:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C4C84h case   47:*/		return 0x821C4C88;
		  /* 821C4C88h */ case   48:  		/* addi R9, R10, 4 */
		/* 821C4C88h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C4C88h case   48:*/		return 0x821C4C8C;
		  /* 821C4C8Ch */ case   49:  		/* addi R6, R10, -36 */
		/* 821C4C8Ch case   49:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C4C8Ch case   49:*/		return 0x821C4C90;
		  /* 821C4C90h */ case   50:  		/* cmplwi CR6, R27, 0 */
		/* 821C4C90h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C4C90h case   50:*/		return 0x821C4C94;
		  /* 821C4C94h */ case   51:  		/* stw R7, <#[R10 + 4]> */
		/* 821C4C94h case   51:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821C4C94h case   51:*/		return 0x821C4C98;
		  /* 821C4C98h */ case   52:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C4C98h case   52:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4C98h case   52:*/		return 0x821C4C9C;
		  /* 821C4C9Ch */ case   53:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C4C9Ch case   53:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C4C9Ch case   53:*/		return 0x821C4CA0;
		  /* 821C4CA0h */ case   54:  		/* stw R9, <#[R7 + 36]> */
		/* 821C4CA0h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000024) );
		/* 821C4CA0h case   54:*/		return 0x821C4CA4;
		  /* 821C4CA4h */ case   55:  		/* stw R8, <#[R10]> */
		/* 821C4CA4h case   55:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4CA4h case   55:*/		return 0x821C4CA8;
		  /* 821C4CA8h */ case   56:  		/* stw R6, <#[R11 + 4]> */
		/* 821C4CA8h case   56:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C4CA8h case   56:*/		return 0x821C4CAC;
		  /* 821C4CACh */ case   57:  		/* bc 12, CR6_EQ, 52 */
		/* 821C4CACh case   57:*/		if ( regs.CR[6].eq ) { return 0x821C4CE0;  }
		/* 821C4CACh case   57:*/		return 0x821C4CB0;
		  /* 821C4CB0h */ case   58:  		/* addi R25, R3, 40 */
		/* 821C4CB0h case   58:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x28);
		/* 821C4CB0h case   58:*/		return 0x821C4CB4;
		  /* 821C4CB4h */ case   59:  		/* mr R5, R28 */
		/* 821C4CB4h case   59:*/		regs.R5 = regs.R28;
		/* 821C4CB4h case   59:*/		return 0x821C4CB8;
		  /* 821C4CB8h */ case   60:  		/* mr R4, R30 */
		/* 821C4CB8h case   60:*/		regs.R4 = regs.R30;
		/* 821C4CB8h case   60:*/		return 0x821C4CBC;
		  /* 821C4CBCh */ case   61:  		/* mr R3, R31 */
		/* 821C4CBCh case   61:*/		regs.R3 = regs.R31;
		/* 821C4CBCh case   61:*/		return 0x821C4CC0;
		  /* 821C4CC0h */ case   62:  		/* bl -314288 */
		/* 821C4CC0h case   62:*/		regs.LR = 0x821C4CC4; return 0x82178110;
		/* 821C4CC0h case   62:*/		return 0x821C4CC4;
		  /* 821C4CC4h */ case   63:  		/* mr R4, R3 */
		/* 821C4CC4h case   63:*/		regs.R4 = regs.R3;
		/* 821C4CC4h case   63:*/		return 0x821C4CC8;
		  /* 821C4CC8h */ case   64:  		/* mr R3, R26 */
		/* 821C4CC8h case   64:*/		regs.R3 = regs.R26;
		/* 821C4CC8h case   64:*/		return 0x821C4CCC;
		  /* 821C4CCCh */ case   65:  		/* bl -314116 */
		/* 821C4CCCh case   65:*/		regs.LR = 0x821C4CD0; return 0x821781C8;
		/* 821C4CCCh case   65:*/		return 0x821C4CD0;
		  /* 821C4CD0h */ case   66:  		/* addi R28, R28, 1 */
		/* 821C4CD0h case   66:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821C4CD0h case   66:*/		return 0x821C4CD4;
		  /* 821C4CD4h */ case   67:  		/* stwu R3, <#[R25 + 4]> */
		/* 821C4CD4h case   67:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R25 + 0x00000004) );
		regs.R25 = (uint32)(regs.R25 + 0x00000004);
		/* 821C4CD4h case   67:*/		return 0x821C4CD8;
		  /* 821C4CD8h */ case   68:  		/* cmplw CR6, R28, R27 */
		/* 821C4CD8h case   68:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R27);
		/* 821C4CD8h case   68:*/		return 0x821C4CDC;
		  /* 821C4CDCh */ case   69:  		/* bc 12, CR6_LT, -40 */
		/* 821C4CDCh case   69:*/		if ( regs.CR[6].lt ) { return 0x821C4CB4;  }
		/* 821C4CDCh case   69:*/		return 0x821C4CE0;
	}
	return 0x821C4CE0;
} // Block from 821C4BC8h-821C4CE0h (70 instructions)

//////////////////////////////////////////////////////
// Block at 821C4CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4CE0);
		  /* 821C4CE0h */ case    0:  		/* li R28, 0 */
		/* 821C4CE0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C4CE0h case    0:*/		return 0x821C4CE4;
		  /* 821C4CE4h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 821C4CE4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821C4CE4h case    1:*/		return 0x821C4CE8;
		  /* 821C4CE8h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821C4CE8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C4D24;  }
		/* 821C4CE8h case    2:*/		return 0x821C4CEC;
		  /* 821C4CECh */ case    3:  		/* addi R25, R27, 11 */
		/* 821C4CECh case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0xB);
		/* 821C4CECh case    3:*/		return 0x821C4CF0;
		  /* 821C4CF0h */ case    4:  		/* mr R5, R28 */
		/* 821C4CF0h case    4:*/		regs.R5 = regs.R28;
		/* 821C4CF0h case    4:*/		return 0x821C4CF4;
		  /* 821C4CF4h */ case    5:  		/* mr R4, R29 */
		/* 821C4CF4h case    5:*/		regs.R4 = regs.R29;
		/* 821C4CF4h case    5:*/		return 0x821C4CF8;
		  /* 821C4CF8h */ case    6:  		/* mr R3, R31 */
		/* 821C4CF8h case    6:*/		regs.R3 = regs.R31;
		/* 821C4CF8h case    6:*/		return 0x821C4CFC;
		  /* 821C4CFCh */ case    7:  		/* bl -314348 */
		/* 821C4CFCh case    7:*/		regs.LR = 0x821C4D00; return 0x82178110;
		/* 821C4CFCh case    7:*/		return 0x821C4D00;
		  /* 821C4D00h */ case    8:  		/* mr R4, R3 */
		/* 821C4D00h case    8:*/		regs.R4 = regs.R3;
		/* 821C4D00h case    8:*/		return 0x821C4D04;
		  /* 821C4D04h */ case    9:  		/* mr R3, R26 */
		/* 821C4D04h case    9:*/		regs.R3 = regs.R26;
		/* 821C4D04h case    9:*/		return 0x821C4D08;
		  /* 821C4D08h */ case   10:  		/* bl -314176 */
		/* 821C4D08h case   10:*/		regs.LR = 0x821C4D0C; return 0x821781C8;
		/* 821C4D08h case   10:*/		return 0x821C4D0C;
		  /* 821C4D0Ch */ case   11:  		/* add R11, R25, R28 */
		/* 821C4D0Ch case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R28);
		/* 821C4D0Ch case   11:*/		return 0x821C4D10;
		  /* 821C4D10h */ case   12:  		/* addi R28, R28, 1 */
		/* 821C4D10h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821C4D10h case   12:*/		return 0x821C4D14;
		  /* 821C4D14h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C4D14h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C4D14h case   13:*/		return 0x821C4D18;
		  /* 821C4D18h */ case   14:  		/* cmplw CR6, R28, R24 */
		/* 821C4D18h case   14:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 821C4D18h case   14:*/		return 0x821C4D1C;
		  /* 821C4D1Ch */ case   15:  		/* stwx R3, <#[R11 + R26]> */
		/* 821C4D1Ch case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821C4D1Ch case   15:*/		return 0x821C4D20;
		  /* 821C4D20h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 821C4D20h case   16:*/		if ( regs.CR[6].lt ) { return 0x821C4CF0;  }
		/* 821C4D20h case   16:*/		return 0x821C4D24;
	}
	return 0x821C4D24;
} // Block from 821C4CE0h-821C4D24h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821C4D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4D24);
		  /* 821C4D24h */ case    0:  		/* addi R22, R30, 4 */
		/* 821C4D24h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R30,0x4);
		/* 821C4D24h case    0:*/		return 0x821C4D28;
		  /* 821C4D28h */ case    1:  		/* li R23, 1 */
		/* 821C4D28h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821C4D28h case    1:*/		return 0x821C4D2C;
		  /* 821C4D2Ch */ case    2:  		/* lwz R28, <#[R22]> */
		/* 821C4D2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R22 + 0x00000000) );
		/* 821C4D2Ch case    2:*/		return 0x821C4D30;
		  /* 821C4D30h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 821C4D30h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821C4D30h case    3:*/		return 0x821C4D34;
		  /* 821C4D34h */ case    4:  		/* bc 12, CR6_EQ, 260 */
		/* 821C4D34h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C4E38;  }
		/* 821C4D34h case    4:*/		return 0x821C4D38;
		  /* 821C4D38h */ case    5:  		/* lwz R25, <#[R28 + 16]> */
		/* 821C4D38h case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R28 + 0x00000010) );
		/* 821C4D38h case    5:*/		return 0x821C4D3C;
		  /* 821C4D3Ch */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 821C4D3Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821C4D3Ch case    6:*/		return 0x821C4D40;
		  /* 821C4D40h */ case    7:  		/* bc 12, CR6_EQ, 228 */
		/* 821C4D40h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C4E24;  }
		/* 821C4D40h case    7:*/		return 0x821C4D44;
		  /* 821C4D44h */ case    8:  		/* cmplw CR6, R25, R26 */
		/* 821C4D44h case    8:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R26);
		/* 821C4D44h case    8:*/		return 0x821C4D48;
		  /* 821C4D48h */ case    9:  		/* bc 12, CR6_EQ, 220 */
		/* 821C4D48h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C4E24;  }
		/* 821C4D48h case    9:*/		return 0x821C4D4C;
		  /* 821C4D4Ch */ case   10:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C4D4Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C4D4Ch case   10:*/		return 0x821C4D50;
		  /* 821C4D50h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C4D50h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C4D50h case   11:*/		return 0x821C4D54;
		  /* 821C4D54h */ case   12:  		/* cmplwi CR6, R11, 14976 */
		/* 821C4D54h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 821C4D54h case   12:*/		return 0x821C4D58;
		  /* 821C4D58h */ case   13:  		/* bc 4, CR6_EQ, 148 */
		/* 821C4D58h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C4DEC;  }
		/* 821C4D58h case   13:*/		return 0x821C4D5C;
		  /* 821C4D5Ch */ case   14:  		/* li R6, 0 */
		/* 821C4D5Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C4D5Ch case   14:*/		return 0x821C4D60;
		  /* 821C4D60h */ case   15:  		/* li R5, 0 */
		/* 821C4D60h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4D60h case   15:*/		return 0x821C4D64;
		  /* 821C4D64h */ case   16:  		/* li R4, 117 */
		/* 821C4D64h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821C4D64h case   16:*/		return 0x821C4D68;
		  /* 821C4D68h */ case   17:  		/* mr R3, R31 */
		/* 821C4D68h case   17:*/		regs.R3 = regs.R31;
		/* 821C4D68h case   17:*/		return 0x821C4D6C;
		  /* 821C4D6Ch */ case   18:  		/* bl -395580 */
		/* 821C4D6Ch case   18:*/		regs.LR = 0x821C4D70; return 0x82164430;
		/* 821C4D6Ch case   18:*/		return 0x821C4D70;
		  /* 821C4D70h */ case   19:  		/* addi R11, R25, -16 */
		/* 821C4D70h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFF0);
		/* 821C4D70h case   19:*/		return 0x821C4D74;
		  /* 821C4D74h */ case   20:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C4D74h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C4D74h case   20:*/		return 0x821C4D78;
		  /* 821C4D78h */ case   21:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821C4D78h case   21:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821C4D78h case   21:*/		return 0x821C4D7C;
		  /* 821C4D7Ch */ case   22:  		/* cmplwi CR6, R11, 4 */
		/* 821C4D7Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821C4D7Ch case   22:*/		return 0x821C4D80;
		  /* 821C4D80h */ case   23:  		/* bc 12, CR6_LT, 16 */
		/* 821C4D80h case   23:*/		if ( regs.CR[6].lt ) { return 0x821C4D90;  }
		/* 821C4D80h case   23:*/		return 0x821C4D84;
		  /* 821C4D84h */ case   24:  		/* cmplwi CR6, R11, 6 */
		/* 821C4D84h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821C4D84h case   24:*/		return 0x821C4D88;
		  /* 821C4D88h */ case   25:  		/* mr R11, R23 */
		/* 821C4D88h case   25:*/		regs.R11 = regs.R23;
		/* 821C4D88h case   25:*/		return 0x821C4D8C;
		  /* 821C4D8Ch */ case   26:  		/* bc 4, CR6_GT, 8 */
		/* 821C4D8Ch case   26:*/		if ( !regs.CR[6].gt ) { return 0x821C4D94;  }
		/* 821C4D8Ch case   26:*/		return 0x821C4D90;
	}
	return 0x821C4D90;
} // Block from 821C4D24h-821C4D90h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C4D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4D90);
		  /* 821C4D90h */ case    0:  		/* li R11, 0 */
		/* 821C4D90h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C4D90h case    0:*/		return 0x821C4D94;
	}
	return 0x821C4D94;
} // Block from 821C4D90h-821C4D94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C4D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4D94);
		  /* 821C4D94h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C4D94h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C4D94h case    0:*/		return 0x821C4D98;
		  /* 821C4D98h */ case    1:  		/* bc 4, CR0_EQ, 84 */
		/* 821C4D98h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C4DEC;  }
		/* 821C4D98h case    1:*/		return 0x821C4D9C;
		  /* 821C4D9Ch */ case    2:  		/* lwz R11, <#[R28]> */
		/* 821C4D9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C4D9Ch case    2:*/		return 0x821C4DA0;
		  /* 821C4DA0h */ case    3:  		/* mr R4, R29 */
		/* 821C4DA0h case    3:*/		regs.R4 = regs.R29;
		/* 821C4DA0h case    3:*/		return 0x821C4DA4;
		  /* 821C4DA4h */ case    4:  		/* mr R3, R31 */
		/* 821C4DA4h case    4:*/		regs.R3 = regs.R31;
		/* 821C4DA4h case    4:*/		return 0x821C4DA8;
		  /* 821C4DA8h */ case    5:  		/* rlwimi R11, R27, 25, 4, 6 */
		/* 821C4DA8h case    5:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R27);
		/* 821C4DA8h case    5:*/		return 0x821C4DAC;
		  /* 821C4DACh */ case    6:  		/* stw R11, <#[R28]> */
		/* 821C4DACh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C4DACh case    6:*/		return 0x821C4DB0;
		  /* 821C4DB0h */ case    7:  		/* bl -314800 */
		/* 821C4DB0h case    7:*/		regs.LR = 0x821C4DB4; return 0x82178000;
		/* 821C4DB0h case    7:*/		return 0x821C4DB4;
		  /* 821C4DB4h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821C4DB4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4DB4h case    8:*/		return 0x821C4DB8;
		  /* 821C4DB8h */ case    9:  		/* li R4, 0 */
		/* 821C4DB8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C4DB8h case    9:*/		return 0x821C4DBC;
		  /* 821C4DBCh */ case   10:  		/* rlwimi R11, R24, 25, 4, 6 */
		/* 821C4DBCh case   10:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R24);
		/* 821C4DBCh case   10:*/		return 0x821C4DC0;
		  /* 821C4DC0h */ case   11:  		/* mr R20, R3 */
		/* 821C4DC0h case   11:*/		regs.R20 = regs.R3;
		/* 821C4DC0h case   11:*/		return 0x821C4DC4;
		  /* 821C4DC4h */ case   12:  		/* stw R11, <#[R3]> */
		/* 821C4DC4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C4DC4h case   12:*/		return 0x821C4DC8;
		  /* 821C4DC8h */ case   13:  		/* bl -316168 */
		/* 821C4DC8h case   13:*/		regs.LR = 0x821C4DCC; return 0x82177AC0;
		/* 821C4DC8h case   13:*/		return 0x821C4DCC;
		  /* 821C4DCCh */ case   14:  		/* lwz R10, <#[R20]> */
		/* 821C4DCCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821C4DCCh case   14:*/		return 0x821C4DD0;
		  /* 821C4DD0h */ case   15:  		/* li R11, 57 */
		/* 821C4DD0h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x39);
		/* 821C4DD0h case   15:*/		return 0x821C4DD4;
		  /* 821C4DD4h */ case   16:  		/* mr R3, R25 */
		/* 821C4DD4h case   16:*/		regs.R3 = regs.R25;
		/* 821C4DD4h case   16:*/		return 0x821C4DD8;
		  /* 821C4DD8h */ case   17:  		/* rlwimi R10, R11, 7, 19, 26 */
		/* 821C4DD8h case   17:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R10,regs.R11);
		/* 821C4DD8h case   17:*/		return 0x821C4DDC;
		  /* 821C4DDCh */ case   18:  		/* mr R4, R20 */
		/* 821C4DDCh case   18:*/		regs.R4 = regs.R20;
		/* 821C4DDCh case   18:*/		return 0x821C4DE0;
		  /* 821C4DE0h */ case   19:  		/* stw R10, <#[R20]> */
		/* 821C4DE0h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 821C4DE0h case   19:*/		return 0x821C4DE4;
		  /* 821C4DE4h */ case   20:  		/* bl -314396 */
		/* 821C4DE4h case   20:*/		regs.LR = 0x821C4DE8; return 0x821781C8;
		/* 821C4DE4h case   20:*/		return 0x821C4DE8;
		  /* 821C4DE8h */ case   21:  		/* b 60 */
		/* 821C4DE8h case   21:*/		return 0x821C4E24;
		/* 821C4DE8h case   21:*/		return 0x821C4DEC;
	}
	return 0x821C4DEC;
} // Block from 821C4D94h-821C4DECh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C4DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4DEC);
		  /* 821C4DECh */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821C4DECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C4DECh case    0:*/		return 0x821C4DF0;
		  /* 821C4DF0h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C4DF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C4DF0h case    1:*/		return 0x821C4DF4;
		  /* 821C4DF4h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C4DF4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4DF4h case    2:*/		return 0x821C4DF8;
		  /* 821C4DF8h */ case    3:  		/* b 12 */
		/* 821C4DF8h case    3:*/		return 0x821C4E04;
		/* 821C4DF8h case    3:*/		return 0x821C4DFC;
		  /* 821C4DFCh */ case    4:  		/* addi R11, R10, 8 */
		/* 821C4DFCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C4DFCh case    4:*/		return 0x821C4E00;
		  /* 821C4E00h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C4E00h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C4E00h case    5:*/		return 0x821C4E04;
	}
	return 0x821C4E04;
} // Block from 821C4DECh-821C4E04h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C4E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4E04);
		  /* 821C4E04h */ case    0:  		/* cmplw CR6, R10, R28 */
		/* 821C4E04h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 821C4E04h case    0:*/		return 0x821C4E08;
		  /* 821C4E08h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C4E08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C4DFC;  }
		/* 821C4E08h case    1:*/		return 0x821C4E0C;
		  /* 821C4E0Ch */ case    2:  		/* lwz R10, <#[R28 + 8]> */
		/* 821C4E0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4E0Ch case    2:*/		return 0x821C4E10;
		  /* 821C4E10h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C4E10h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4E10h case    3:*/		return 0x821C4E14;
		  /* 821C4E14h */ case    4:  		/* lwz R11, <#[R26 + 4]> */
		/* 821C4E14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821C4E14h case    4:*/		return 0x821C4E18;
		  /* 821C4E18h */ case    5:  		/* stw R11, <#[R28 + 8]> */
		/* 821C4E18h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C4E18h case    5:*/		return 0x821C4E1C;
		  /* 821C4E1Ch */ case    6:  		/* stw R28, <#[R26 + 4]> */
		/* 821C4E1Ch case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R26 + 0x00000004) );
		/* 821C4E1Ch case    6:*/		return 0x821C4E20;
		  /* 821C4E20h */ case    7:  		/* stw R26, <#[R28 + 12]> */
		/* 821C4E20h case    7:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C4E20h case    7:*/		return 0x821C4E24;
	}
	return 0x821C4E24;
} // Block from 821C4E04h-821C4E24h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C4E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4E24);
		  /* 821C4E24h */ case    0:  		/* lwz R11, <#[R22]> */
		/* 821C4E24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821C4E24h case    0:*/		return 0x821C4E28;
		  /* 821C4E28h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 821C4E28h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821C4E28h case    1:*/		return 0x821C4E2C;
		  /* 821C4E2Ch */ case    2:  		/* bc 4, CR6_EQ, -256 */
		/* 821C4E2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4D2C;  }
		/* 821C4E2Ch case    2:*/		return 0x821C4E30;
		  /* 821C4E30h */ case    3:  		/* addi R22, R28, 8 */
		/* 821C4E30h case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R28,0x8);
		/* 821C4E30h case    3:*/		return 0x821C4E34;
		  /* 821C4E34h */ case    4:  		/* b -264 */
		/* 821C4E34h case    4:*/		return 0x821C4D2C;
		/* 821C4E34h case    4:*/		return 0x821C4E38;
	}
	return 0x821C4E38;
} // Block from 821C4E24h-821C4E38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C4E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4E38);
		  /* 821C4E38h */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C4E38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C4E38h case    0:*/		return 0x821C4E3C;
		  /* 821C4E3Ch */ case    1:  		/* li R11, 0 */
		/* 821C4E3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C4E3Ch case    1:*/		return 0x821C4E40;
		  /* 821C4E40h */ case    2:  		/* lwz R9, <#[R30 + 12]> */
		/* 821C4E40h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C4E40h case    2:*/		return 0x821C4E44;
		  /* 821C4E44h */ case    3:  		/* rlwimi R10, R27, 14, 15, 17 */
		/* 821C4E44h case    3:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R27);
		/* 821C4E44h case    3:*/		return 0x821C4E48;
		  /* 821C4E48h */ case    4:  		/* stw R10, <#[R30 + 8]> */
		/* 821C4E48h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C4E48h case    4:*/		return 0x821C4E4C;
		  /* 821C4E4Ch */ case    5:  		/* sth R9, <#[R29 + 14]> */
		/* 821C4E4Ch case    5:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R29 + 0x0000000E) );
		/* 821C4E4Ch case    5:*/		return 0x821C4E50;
		  /* 821C4E50h */ case    6:  		/* lwz R10, <#[R31 + 536]> */
		/* 821C4E50h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4E50h case    6:*/		return 0x821C4E54;
		  /* 821C4E54h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821C4E54h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C4E54h case    7:*/		return 0x821C4E58;
		  /* 821C4E58h */ case    8:  		/* bc 4, CR6_GT, 72 */
		/* 821C4E58h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821C4EA0;  }
		/* 821C4E58h case    8:*/		return 0x821C4E5C;
		  /* 821C4E5Ch */ case    9:  		/* addi R10, R31, 352 */
		/* 821C4E5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x160);
		/* 821C4E5Ch case    9:*/		return 0x821C4E60;
		  /* 821C4E60h */ case   10:  		/* lwz R9, <#[R10]> */
		/* 821C4E60h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4E60h case   10:*/		return 0x821C4E64;
		  /* 821C4E64h */ case   11:  		/* cmplw CR6, R9, R30 */
		/* 821C4E64h case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 821C4E64h case   11:*/		return 0x821C4E68;
		  /* 821C4E68h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 821C4E68h case   12:*/		if ( regs.CR[6].eq ) { return 0x821C4E84;  }
		/* 821C4E68h case   12:*/		return 0x821C4E6C;
		  /* 821C4E6Ch */ case   13:  		/* lwz R9, <#[R31 + 536]> */
		/* 821C4E6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4E6Ch case   13:*/		return 0x821C4E70;
		  /* 821C4E70h */ case   14:  		/* addi R11, R11, 1 */
		/* 821C4E70h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C4E70h case   14:*/		return 0x821C4E74;
		  /* 821C4E74h */ case   15:  		/* addi R10, R10, 12 */
		/* 821C4E74h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821C4E74h case   15:*/		return 0x821C4E78;
	}
	return 0x821C4E78;
} // Block from 821C4E38h-821C4E78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C4E78h
// Function '?GenerateDiagnosticExportIndex@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4E78);
		  /* 821C4E78h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 821C4E78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821C4E78h case    0:*/		return 0x821C4E7C;
		  /* 821C4E7Ch */ case    1:  		/* bc 12, CR6_LT, -28 */
		/* 821C4E7Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821C4E60;  }
		/* 821C4E7Ch case    1:*/		return 0x821C4E80;
		  /* 821C4E80h */ case    2:  		/* b 32 */
		/* 821C4E80h case    2:*/		return 0x821C4EA0;
		/* 821C4E80h case    2:*/		return 0x821C4E84;
	}
	return 0x821C4E84;
} // Block from 821C4E78h-821C4E84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C4E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4E84);
		  /* 821C4E84h */ case    0:  		/* addi R11, R11, 29 */
		/* 821C4E84h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821C4E84h case    0:*/		return 0x821C4E88;
		  /* 821C4E88h */ case    1:  		/* slw R10, R23, R27 */
		/* 821C4E88h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R27);
		/* 821C4E88h case    1:*/		return 0x821C4E8C;
		  /* 821C4E8Ch */ case    2:  		/* mulli R11, R11, 12 */
		/* 821C4E8Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4E8Ch case    2:*/		return 0x821C4E90;
		  /* 821C4E90h */ case    3:  		/* lwzx R9, <#[R11 + R31]> */
		/* 821C4E90h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4E90h case    3:*/		return 0x821C4E94;
		  /* 821C4E94h */ case    4:  		/* addi R10, R10, -1 */
		/* 821C4E94h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C4E94h case    4:*/		return 0x821C4E98;
		  /* 821C4E98h */ case    5:  		/* rlwimi R9, R10, 9, 19, 22 */
		/* 821C4E98h case    5:*/		cpu::op::rlwimi<0,9,19,22>(regs,&regs.R9,regs.R10);
		/* 821C4E98h case    5:*/		return 0x821C4E9C;
		  /* 821C4E9Ch */ case    6:  		/* stwx R9, <#[R11 + R31]> */
		/* 821C4E9Ch case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4E9Ch case    6:*/		return 0x821C4EA0;
	}
	return 0x821C4EA0;
} // Block from 821C4E84h-821C4EA0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C4EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4EA0);
		  /* 821C4EA0h */ case    0:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4EA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4EA0h case    0:*/		return 0x821C4EA4;
		  /* 821C4EA4h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 821C4EA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 821C4EA4h case    1:*/		return 0x821C4EA8;
		  /* 821C4EA8h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821C4EA8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4EB8;  }
		/* 821C4EA8h case    2:*/		return 0x821C4EAC;
		  /* 821C4EACh */ case    3:  		/* li R4, 4801 */
		/* 821C4EACh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821C4EACh case    3:*/		return 0x821C4EB0;
		  /* 821C4EB0h */ case    4:  		/* mr R3, R31 */
		/* 821C4EB0h case    4:*/		regs.R3 = regs.R31;
		/* 821C4EB0h case    4:*/		return 0x821C4EB4;
		  /* 821C4EB4h */ case    5:  		/* bl -471116 */
		/* 821C4EB4h case    5:*/		regs.LR = 0x821C4EB8; return 0x82151E68;
		/* 821C4EB4h case    5:*/		return 0x821C4EB8;
	}
	return 0x821C4EB8;
} // Block from 821C4EA0h-821C4EB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C4EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4EB8);
		  /* 821C4EB8h */ case    0:  		/* addi R11, R11, 29 */
		/* 821C4EB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821C4EB8h case    0:*/		return 0x821C4EBC;
		  /* 821C4EBCh */ case    1:  		/* slw R10, R23, R24 */
		/* 821C4EBCh case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R24);
		/* 821C4EBCh case    1:*/		return 0x821C4EC0;
		  /* 821C4EC0h */ case    2:  		/* mulli R11, R11, 12 */
		/* 821C4EC0h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4EC0h case    2:*/		return 0x821C4EC4;
		  /* 821C4EC4h */ case    3:  		/* lwzx R9, <#[R11 + R31]> */
		/* 821C4EC4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4EC4h case    3:*/		return 0x821C4EC8;
		  /* 821C4EC8h */ case    4:  		/* rlwimi R9, R21, 0, 27, 31 */
		/* 821C4EC8h case    4:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R9,regs.R21);
		/* 821C4EC8h case    4:*/		return 0x821C4ECC;
		  /* 821C4ECCh */ case    5:  		/* addi R10, R10, -1 */
		/* 821C4ECCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C4ECCh case    5:*/		return 0x821C4ED0;
		  /* 821C4ED0h */ case    6:  		/* stwx R9, <#[R11 + R31]> */
		/* 821C4ED0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4ED0h case    6:*/		return 0x821C4ED4;
		  /* 821C4ED4h */ case    7:  		/* lis R11, -32252 */
		/* 821C4ED4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C4ED4h case    7:*/		return 0x821C4ED8;
		  /* 821C4ED8h */ case    8:  		/* addi R9, R11, -16280 */
		/* 821C4ED8h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFC068);
		/* 821C4ED8h case    8:*/		return 0x821C4EDC;
		  /* 821C4EDCh */ case    9:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4EDCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4EDCh case    9:*/		return 0x821C4EE0;
		  /* 821C4EE0h */ case   10:  		/* addi R11, R11, 29 */
		/* 821C4EE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821C4EE0h case   10:*/		return 0x821C4EE4;
		  /* 821C4EE4h */ case   11:  		/* mulli R11, R11, 12 */
		/* 821C4EE4h case   11:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4EE4h case   11:*/		return 0x821C4EE8;
		  /* 821C4EE8h */ case   12:  		/* lwzx R8, <#[R11 + R31]> */
		/* 821C4EE8h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4EE8h case   12:*/		return 0x821C4EEC;
		  /* 821C4EECh */ case   13:  		/* rlwimi R8, R23, 5, 23, 26 */
		/* 821C4EECh case   13:*/		cpu::op::rlwimi<0,5,23,26>(regs,&regs.R8,regs.R23);
		/* 821C4EECh case   13:*/		return 0x821C4EF0;
		  /* 821C4EF0h */ case   14:  		/* stwx R8, <#[R11 + R31]> */
		/* 821C4EF0h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4EF0h case   14:*/		return 0x821C4EF4;
		  /* 821C4EF4h */ case   15:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4EF4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4EF4h case   15:*/		return 0x821C4EF8;
		  /* 821C4EF8h */ case   16:  		/* mulli R11, R11, 12 */
		/* 821C4EF8h case   16:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4EF8h case   16:*/		return 0x821C4EFC;
		  /* 821C4EFCh */ case   17:  		/* add R11, R11, R31 */
		/* 821C4EFCh case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821C4EFCh case   17:*/		return 0x821C4F00;
		  /* 821C4F00h */ case   18:  		/* stw R29, <#[R11 + 352]> */
		/* 821C4F00h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000160) );
		/* 821C4F00h case   18:*/		return 0x821C4F04;
		  /* 821C4F04h */ case   19:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4F04h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4F04h case   19:*/		return 0x821C4F08;
		  /* 821C4F08h */ case   20:  		/* addi R11, R11, 29 */
		/* 821C4F08h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1D);
		/* 821C4F08h case   20:*/		return 0x821C4F0C;
		  /* 821C4F0Ch */ case   21:  		/* mulli R11, R11, 12 */
		/* 821C4F0Ch case   21:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4F0Ch case   21:*/		return 0x821C4F10;
		  /* 821C4F10h */ case   22:  		/* lwzx R8, <#[R11 + R31]> */
		/* 821C4F10h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4F10h case   22:*/		return 0x821C4F14;
		  /* 821C4F14h */ case   23:  		/* rlwimi R8, R10, 9, 19, 22 */
		/* 821C4F14h case   23:*/		cpu::op::rlwimi<0,9,19,22>(regs,&regs.R8,regs.R10);
		/* 821C4F14h case   23:*/		return 0x821C4F18;
		  /* 821C4F18h */ case   24:  		/* stwx R8, <#[R11 + R31]> */
		/* 821C4F18h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821C4F18h case   24:*/		return 0x821C4F1C;
		  /* 821C4F1Ch */ case   25:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4F1Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4F1Ch case   25:*/		return 0x821C4F20;
		  /* 821C4F20h */ case   26:  		/* mulli R11, R11, 12 */
		/* 821C4F20h case   26:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C4F20h case   26:*/		return 0x821C4F24;
		  /* 821C4F24h */ case   27:  		/* add R11, R11, R31 */
		/* 821C4F24h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821C4F24h case   27:*/		return 0x821C4F28;
		  /* 821C4F28h */ case   28:  		/* stw R9, <#[R11 + 344]> */
		/* 821C4F28h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000158) );
		/* 821C4F28h case   28:*/		return 0x821C4F2C;
		  /* 821C4F2Ch */ case   29:  		/* lwz R11, <#[R31 + 536]> */
		/* 821C4F2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4F2Ch case   29:*/		return 0x821C4F30;
		  /* 821C4F30h */ case   30:  		/* addi R11, R11, 1 */
		/* 821C4F30h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C4F30h case   30:*/		return 0x821C4F34;
		  /* 821C4F34h */ case   31:  		/* stw R11, <#[R31 + 536]> */
		/* 821C4F34h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000218) );
		/* 821C4F34h case   31:*/		return 0x821C4F38;
		  /* 821C4F38h */ case   32:  		/* addi R1, R1, 192 */
		/* 821C4F38h case   32:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821C4F38h case   32:*/		return 0x821C4F3C;
		  /* 821C4F3Ch */ case   33:  		/* b -1260724 */
		/* 821C4F3Ch case   33:*/		return 0x82091288;
		/* 821C4F3Ch case   33:*/		return 0x821C4F40;
	}
	return 0x821C4F40;
} // Block from 821C4EB8h-821C4F40h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821C4F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4F40);
		  /* 821C4F40h */ case    0:  		/* mfspr R12, LR */
		/* 821C4F40h case    0:*/		regs.R12 = regs.LR;
		/* 821C4F40h case    0:*/		return 0x821C4F44;
		  /* 821C4F44h */ case    1:  		/* bl -1260796 */
		/* 821C4F44h case    1:*/		regs.LR = 0x821C4F48; return 0x82091248;
		/* 821C4F44h case    1:*/		return 0x821C4F48;
		  /* 821C4F48h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821C4F48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821C4F48h case    2:*/		return 0x821C4F4C;
		  /* 821C4F4Ch */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 821C4F4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821C4F4Ch case    3:*/		return 0x821C4F50;
		  /* 821C4F50h */ case    4:  		/* mr R25, R3 */
		/* 821C4F50h case    4:*/		regs.R25 = regs.R3;
		/* 821C4F50h case    4:*/		return 0x821C4F54;
		  /* 821C4F54h */ case    5:  		/* lwz R10, <#[R8 + 8]> */
		/* 821C4F54h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000008) );
		/* 821C4F54h case    5:*/		return 0x821C4F58;
		  /* 821C4F58h */ case    6:  		/* mr R4, R8 */
		/* 821C4F58h case    6:*/		regs.R4 = regs.R8;
		/* 821C4F58h case    6:*/		return 0x821C4F5C;
		  /* 821C4F5Ch */ case    7:  		/* rlwinm R26, R11, 18, 29, 31 */
		/* 821C4F5Ch case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R26,regs.R11);
		/* 821C4F5Ch case    7:*/		return 0x821C4F60;
		  /* 821C4F60h */ case    8:  		/* rlwinm R28, R10, 18, 29, 31 */
		/* 821C4F60h case    8:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R28,regs.R10);
		/* 821C4F60h case    8:*/		return 0x821C4F64;
		  /* 821C4F64h */ case    9:  		/* mr R3, R5 */
		/* 821C4F64h case    9:*/		regs.R3 = regs.R5;
		/* 821C4F64h case    9:*/		return 0x821C4F68;
		  /* 821C4F68h */ case   10:  		/* add R11, R28, R26 */
		/* 821C4F68h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R26);
		/* 821C4F68h case   10:*/		return 0x821C4F6C;
		  /* 821C4F6Ch */ case   11:  		/* mr R29, R5 */
		/* 821C4F6Ch case   11:*/		regs.R29 = regs.R5;
		/* 821C4F6Ch case   11:*/		return 0x821C4F70;
		  /* 821C4F70h */ case   12:  		/* mr R24, R6 */
		/* 821C4F70h case   12:*/		regs.R24 = regs.R6;
		/* 821C4F70h case   12:*/		return 0x821C4F74;
		  /* 821C4F74h */ case   13:  		/* mr R27, R8 */
		/* 821C4F74h case   13:*/		regs.R27 = regs.R8;
		/* 821C4F74h case   13:*/		return 0x821C4F78;
		  /* 821C4F78h */ case   14:  		/* mr R31, R5 */
		/* 821C4F78h case   14:*/		regs.R31 = regs.R5;
		/* 821C4F78h case   14:*/		return 0x821C4F7C;
		  /* 821C4F7Ch */ case   15:  		/* add R30, R11, R6 */
		/* 821C4F7Ch case   15:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R6);
		/* 821C4F7Ch case   15:*/		return 0x821C4F80;
		  /* 821C4F80h */ case   16:  		/* bl 397632 */
		/* 821C4F80h case   16:*/		regs.LR = 0x821C4F84; return 0x822260C0;
		/* 821C4F80h case   16:*/		return 0x821C4F84;
		  /* 821C4F84h */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C4F84h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C4F84h case   17:*/		return 0x821C4F88;
		  /* 821C4F88h */ case   18:  		/* bc 12, CR0_EQ, 8 */
		/* 821C4F88h case   18:*/		if ( regs.CR[0].eq ) { return 0x821C4F90;  }
		/* 821C4F88h case   18:*/		return 0x821C4F8C;
		  /* 821C4F8Ch */ case   19:  		/* mr R31, R27 */
		/* 821C4F8Ch case   19:*/		regs.R31 = regs.R27;
		/* 821C4F8Ch case   19:*/		return 0x821C4F90;
	}
	return 0x821C4F90;
} // Block from 821C4F40h-821C4F90h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C4F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C4F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C4F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C4F90);
		  /* 821C4F90h */ case    0:  		/* mr R8, R30 */
		/* 821C4F90h case    0:*/		regs.R8 = regs.R30;
		/* 821C4F90h case    0:*/		return 0x821C4F94;
		  /* 821C4F94h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 821C4F94h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821C4F94h case    1:*/		return 0x821C4F98;
		  /* 821C4F98h */ case    2:  		/* li R7, 0 */
		/* 821C4F98h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C4F98h case    2:*/		return 0x821C4F9C;
		  /* 821C4F9Ch */ case    3:  		/* li R6, 113 */
		/* 821C4F9Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x71);
		/* 821C4F9Ch case    3:*/		return 0x821C4FA0;
		  /* 821C4FA0h */ case    4:  		/* li R5, 0 */
		/* 821C4FA0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C4FA0h case    4:*/		return 0x821C4FA4;
		  /* 821C4FA4h */ case    5:  		/* mr R3, R25 */
		/* 821C4FA4h case    5:*/		regs.R3 = regs.R25;
		/* 821C4FA4h case    5:*/		return 0x821C4FA8;
		  /* 821C4FA8h */ case    6:  		/* bl 391664 */
		/* 821C4FA8h case    6:*/		regs.LR = 0x821C4FAC; return 0x82224998;
		/* 821C4FA8h case    6:*/		return 0x821C4FAC;
		  /* 821C4FACh */ case    7:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C4FACh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C4FACh case    7:*/		return 0x821C4FB0;
		  /* 821C4FB0h */ case    8:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C4FB0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C4FB0h case    8:*/		return 0x821C4FB4;
		  /* 821C4FB4h */ case    9:  		/* addi R11, R11, 36 */
		/* 821C4FB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C4FB4h case    9:*/		return 0x821C4FB8;
		  /* 821C4FB8h */ case   10:  		/* addi R10, R10, 36 */
		/* 821C4FB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C4FB8h case   10:*/		return 0x821C4FBC;
		  /* 821C4FBCh */ case   11:  		/* addi R7, R11, -36 */
		/* 821C4FBCh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821C4FBCh case   11:*/		return 0x821C4FC0;
		  /* 821C4FC0h */ case   12:  		/* addi R5, R10, -36 */
		/* 821C4FC0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFFDC);
		/* 821C4FC0h case   12:*/		return 0x821C4FC4;
		  /* 821C4FC4h */ case   13:  		/* addi R9, R10, 4 */
		/* 821C4FC4h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C4FC4h case   13:*/		return 0x821C4FC8;
		  /* 821C4FC8h */ case   14:  		/* lwz R6, <#[R11]> */
		/* 821C4FC8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4FC8h case   14:*/		return 0x821C4FCC;
		  /* 821C4FCCh */ case   15:  		/* addi R8, R29, 4 */
		/* 821C4FCCh case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x4);
		/* 821C4FCCh case   15:*/		return 0x821C4FD0;
		  /* 821C4FD0h */ case   16:  		/* stw R6, <#[R10]> */
		/* 821C4FD0h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821C4FD0h case   16:*/		return 0x821C4FD4;
		  /* 821C4FD4h */ case   17:  		/* lwz R6, <#[R11]> */
		/* 821C4FD4h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4FD4h case   17:*/		return 0x821C4FD8;
		  /* 821C4FD8h */ case   18:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821C4FD8h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821C4FD8h case   18:*/		return 0x821C4FDC;
		  /* 821C4FDCh */ case   19:  		/* stw R5, <#[R6]> */
		/* 821C4FDCh case   19:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000000) );
		/* 821C4FDCh case   19:*/		return 0x821C4FE0;
		  /* 821C4FE0h */ case   20:  		/* stw R7, <#[R10 + 4]> */
		/* 821C4FE0h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821C4FE0h case   20:*/		return 0x821C4FE4;
		  /* 821C4FE4h */ case   21:  		/* stw R9, <#[R11]> */
		/* 821C4FE4h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C4FE4h case   21:*/		return 0x821C4FE8;
		  /* 821C4FE8h */ case   22:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C4FE8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C4FE8h case   22:*/		return 0x821C4FEC;
		  /* 821C4FECh */ case   23:  		/* oris R11, R11, 128 */
		/* 821C4FECh case   23:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821C4FECh case   23:*/		return 0x821C4FF0;
		  /* 821C4FF0h */ case   24:  		/* stw R11, <#[R3 + 8]> */
		/* 821C4FF0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C4FF0h case   24:*/		return 0x821C4FF4;
		  /* 821C4FF4h */ case   25:  		/* lwz R11, <#[R8]> */
		/* 821C4FF4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C4FF4h case   25:*/		return 0x821C4FF8;
		  /* 821C4FF8h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 821C4FF8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C4FF8h case   26:*/		return 0x821C4FFC;
		  /* 821C4FFCh */ case   27:  		/* bc 12, CR6_EQ, 92 */
		/* 821C4FFCh case   27:*/		if ( regs.CR[6].eq ) { return 0x821C5058;  }
		/* 821C4FFCh case   27:*/		return 0x821C5000;
		  /* 821C5000h */ case   28:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C5000h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C5000h case   28:*/		return 0x821C5004;
		  /* 821C5004h */ case   29:  		/* cmplwi CR6, R10, 0 */
		/* 821C5004h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C5004h case   29:*/		return 0x821C5008;
		  /* 821C5008h */ case   30:  		/* bc 12, CR6_EQ, 60 */
		/* 821C5008h case   30:*/		if ( regs.CR[6].eq ) { return 0x821C5044;  }
		/* 821C5008h case   30:*/		return 0x821C500C;
		  /* 821C500Ch */ case   31:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C500Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C500Ch case   31:*/		return 0x821C5010;
		  /* 821C5010h */ case   32:  		/* addi R10, R10, 4 */
		/* 821C5010h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C5010h case   32:*/		return 0x821C5014;
		  /* 821C5014h */ case   33:  		/* lwz R9, <#[R10]> */
		/* 821C5014h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C5014h case   33:*/		return 0x821C5018;
		  /* 821C5018h */ case   34:  		/* b 12 */
		/* 821C5018h case   34:*/		return 0x821C5024;
		/* 821C5018h case   34:*/		return 0x821C501C;
		  /* 821C501Ch */ case   35:  		/* addi R10, R9, 8 */
		/* 821C501Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C501Ch case   35:*/		return 0x821C5020;
		  /* 821C5020h */ case   36:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C5020h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C5020h case   36:*/		return 0x821C5024;
	}
	return 0x821C5024;
} // Block from 821C4F90h-821C5024h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821C5024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5024);
		  /* 821C5024h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C5024h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C5024h case    0:*/		return 0x821C5028;
		  /* 821C5028h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C5028h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C501C;  }
		/* 821C5028h case    1:*/		return 0x821C502C;
		  /* 821C502Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C502Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C502Ch case    2:*/		return 0x821C5030;
		  /* 821C5030h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C5030h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C5030h case    3:*/		return 0x821C5034;
		  /* 821C5034h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C5034h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C5034h case    4:*/		return 0x821C5038;
		  /* 821C5038h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C5038h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C5038h case    5:*/		return 0x821C503C;
		  /* 821C503Ch */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C503Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C503Ch case    6:*/		return 0x821C5040;
		  /* 821C5040h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821C5040h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C5040h case    7:*/		return 0x821C5044;
	}
	return 0x821C5044;
} // Block from 821C5024h-821C5044h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C5044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5044);
		  /* 821C5044h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C5044h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C5044h case    0:*/		return 0x821C5048;
		  /* 821C5048h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C5048h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C5048h case    1:*/		return 0x821C504C;
		  /* 821C504Ch */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821C504Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C4FF4;  }
		/* 821C504Ch case    2:*/		return 0x821C5050;
		  /* 821C5050h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C5050h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C5050h case    3:*/		return 0x821C5054;
		  /* 821C5054h */ case    4:  		/* b -96 */
		/* 821C5054h case    4:*/		return 0x821C4FF4;
		/* 821C5054h case    4:*/		return 0x821C5058;
	}
	return 0x821C5058;
} // Block from 821C5044h-821C5058h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5058);
		  /* 821C5058h */ case    0:  		/* lis R10, -32215 */
		/* 821C5058h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 821C5058h case    0:*/		return 0x821C505C;
		  /* 821C505Ch */ case    1:  		/* lis R11, -32215 */
		/* 821C505Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 821C505Ch case    1:*/		return 0x821C5060;
		  /* 821C5060h */ case    2:  		/* addi R7, R11, -26076 */
		/* 821C5060h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFF9A24);
		/* 821C5060h case    2:*/		return 0x821C5064;
		  /* 821C5064h */ case    3:  		/* lwz R11, <#[R10 - 26064]> */
		/* 821C5064h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFF9A30) );
		/* 821C5064h case    3:*/		return 0x821C5068;
		  /* 821C5068h */ case    4:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821C5068h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821C5068h case    4:*/		return 0x821C506C;
		  /* 821C506Ch */ case    5:  		/* bc 4, CR0_EQ, 36 */
		/* 821C506Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C5090;  }
		/* 821C506Ch case    5:*/		return 0x821C5070;
		  /* 821C5070h */ case    6:  		/* ori R11, R11, 1 */
		/* 821C5070h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C5070h case    6:*/		return 0x821C5074;
		  /* 821C5074h */ case    7:  		/* li R9, 249 */
		/* 821C5074h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0xF9);
		/* 821C5074h case    7:*/		return 0x821C5078;
	}
	return 0x821C5078;
} // Block from 821C5058h-821C5078h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C5078h
// Function '?GenerateDebugPrintEpilogue@Compiler@D3DXShader@@AAAXPAVBlock@2@0PAVInstruction@2@111@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5078);
		  /* 821C5078h */ case    0:  		/* stw R11, <#[R10 - 26064]> */
		/* 821C5078h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF9A30) );
		/* 821C5078h case    0:*/		return 0x821C507C;
		  /* 821C507Ch */ case    1:  		/* li R8, 254 */
		/* 821C507Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0xFE);
		/* 821C507Ch case    1:*/		return 0x821C5080;
		  /* 821C5080h */ case    2:  		/* li R11, 255 */
		/* 821C5080h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xFF);
		/* 821C5080h case    2:*/		return 0x821C5084;
		  /* 821C5084h */ case    3:  		/* stw R9, <#[R7]> */
		/* 821C5084h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821C5084h case    3:*/		return 0x821C5088;
		  /* 821C5088h */ case    4:  		/* stw R8, <#[R7 + 4]> */
		/* 821C5088h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 821C5088h case    4:*/		return 0x821C508C;
		  /* 821C508Ch */ case    5:  		/* stw R11, <#[R7 + 8]> */
		/* 821C508Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821C508Ch case    5:*/		return 0x821C5090;
	}
	return 0x821C5090;
} // Block from 821C5078h-821C5090h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C5090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5090);
		  /* 821C5090h */ case    0:  		/* addi R8, R27, 4 */
		/* 821C5090h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R27,0x4);
		/* 821C5090h case    0:*/		return 0x821C5094;
		  /* 821C5094h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C5094h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C5094h case    1:*/		return 0x821C5098;
		  /* 821C5098h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C5098h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5098h case    2:*/		return 0x821C509C;
		  /* 821C509Ch */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821C509Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821C5154;  }
		/* 821C509Ch case    3:*/		return 0x821C50A0;
		  /* 821C50A0h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C50A0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C50A0h case    4:*/		return 0x821C50A4;
		  /* 821C50A4h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C50A4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C50A4h case    5:*/		return 0x821C50A8;
		  /* 821C50A8h */ case    6:  		/* bc 12, CR6_EQ, 152 */
		/* 821C50A8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C5140;  }
		/* 821C50A8h case    6:*/		return 0x821C50AC;
		  /* 821C50ACh */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C50ACh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C50ACh case    7:*/		return 0x821C50B0;
		  /* 821C50B0h */ case    8:  		/* addi R10, R10, 4 */
		/* 821C50B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C50B0h case    8:*/		return 0x821C50B4;
		  /* 821C50B4h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821C50B4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C50B4h case    9:*/		return 0x821C50B8;
		  /* 821C50B8h */ case   10:  		/* b 12 */
		/* 821C50B8h case   10:*/		return 0x821C50C4;
		/* 821C50B8h case   10:*/		return 0x821C50BC;
		  /* 821C50BCh */ case   11:  		/* addi R10, R9, 8 */
		/* 821C50BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C50BCh case   11:*/		return 0x821C50C0;
		  /* 821C50C0h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C50C0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C50C0h case   12:*/		return 0x821C50C4;
	}
	return 0x821C50C4;
} // Block from 821C5090h-821C50C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C50C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C50C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C50C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C50C4);
		  /* 821C50C4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C50C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C50C4h case    0:*/		return 0x821C50C8;
		  /* 821C50C8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C50C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C50BC;  }
		/* 821C50C8h case    1:*/		return 0x821C50CC;
		  /* 821C50CCh */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C50CCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C50CCh case    2:*/		return 0x821C50D0;
		  /* 821C50D0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C50D0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C50D0h case    3:*/		return 0x821C50D4;
		  /* 821C50D4h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C50D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C50D4h case    4:*/		return 0x821C50D8;
		  /* 821C50D8h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C50D8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C50D8h case    5:*/		return 0x821C50DC;
		  /* 821C50DCh */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C50DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C50DCh case    6:*/		return 0x821C50E0;
		  /* 821C50E0h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C50E0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C50E0h case    7:*/		return 0x821C50E4;
		  /* 821C50E4h */ case    8:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821C50E4h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821C50E4h case    8:*/		return 0x821C50E8;
		  /* 821C50E8h */ case    9:  		/* stw R3, <#[R11 + 12]> */
		/* 821C50E8h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C50E8h case    9:*/		return 0x821C50EC;
		  /* 821C50ECh */ case   10:  		/* bc 12, CR0_EQ, 84 */
		/* 821C50ECh case   10:*/		if ( regs.CR[0].eq ) { return 0x821C5140;  }
		/* 821C50ECh case   10:*/		return 0x821C50F0;
		  /* 821C50F0h */ case   11:  		/* add R9, R26, R24 */
		/* 821C50F0h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R26,regs.R24);
		/* 821C50F0h case   11:*/		return 0x821C50F4;
		  /* 821C50F4h */ case   12:  		/* rlwinm R6, R10, 22, 29, 30 */
		/* 821C50F4h case   12:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R6,regs.R10);
		/* 821C50F4h case   12:*/		return 0x821C50F8;
		  /* 821C50F8h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821C50F8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821C50F8h case   13:*/		return 0x821C50FC;
		  /* 821C50FCh */ case   14:  		/* rlwinm R5, R10, 24, 29, 30 */
		/* 821C50FCh case   14:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R5,regs.R10);
		/* 821C50FCh case   14:*/		return 0x821C5100;
		  /* 821C5100h */ case   15:  		/* add R9, R9, R7 */
		/* 821C5100h case   15:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821C5100h case   15:*/		return 0x821C5104;
		  /* 821C5104h */ case   16:  		/* rlwinm R4, R10, 26, 29, 30 */
		/* 821C5104h case   16:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R4,regs.R10);
		/* 821C5104h case   16:*/		return 0x821C5108;
		  /* 821C5108h */ case   17:  		/* rlwinm R31, R10, 28, 29, 30 */
		/* 821C5108h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R31,regs.R10);
		/* 821C5108h case   17:*/		return 0x821C510C;
		  /* 821C510Ch */ case   18:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821C510Ch case   18:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821C510Ch case   18:*/		return 0x821C5110;
		  /* 821C5110h */ case   19:  		/* lwz R9, <#[R9 - 4]> */
		/* 821C5110h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 821C5110h case   19:*/		return 0x821C5114;
		  /* 821C5114h */ case   20:  		/* srw R6, R9, R6 */
		/* 821C5114h case   20:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R9,regs.R6);
		/* 821C5114h case   20:*/		return 0x821C5118;
		  /* 821C5118h */ case   21:  		/* srw R5, R9, R5 */
		/* 821C5118h case   21:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R9,regs.R5);
		/* 821C5118h case   21:*/		return 0x821C511C;
		  /* 821C511Ch */ case   22:  		/* rlwimi R5, R6, 2, 28, 29 */
		/* 821C511Ch case   22:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R5,regs.R6);
		/* 821C511Ch case   22:*/		return 0x821C5120;
		  /* 821C5120h */ case   23:  		/* srw R6, R9, R4 */
		/* 821C5120h case   23:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R9,regs.R4);
		/* 821C5120h case   23:*/		return 0x821C5124;
		  /* 821C5124h */ case   24:  		/* rlwinm R5, R5, 0, 28, 31 */
		/* 821C5124h case   24:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R5,regs.R5);
		/* 821C5124h case   24:*/		return 0x821C5128;
		  /* 821C5128h */ case   25:  		/* srw R9, R9, R31 */
		/* 821C5128h case   25:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821C5128h case   25:*/		return 0x821C512C;
		  /* 821C512Ch */ case   26:  		/* rlwimi R6, R5, 2, 0, 29 */
		/* 821C512Ch case   26:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R6,regs.R5);
		/* 821C512Ch case   26:*/		return 0x821C5130;
		  /* 821C5130h */ case   27:  		/* rlwimi R9, R6, 2, 0, 29 */
		/* 821C5130h case   27:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 821C5130h case   27:*/		return 0x821C5134;
		  /* 821C5134h */ case   28:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 821C5134h case   28:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 821C5134h case   28:*/		return 0x821C5138;
		  /* 821C5138h */ case   29:  		/* or R10, R9, R10 */
		/* 821C5138h case   29:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C5138h case   29:*/		return 0x821C513C;
		  /* 821C513Ch */ case   30:  		/* stw R10, <#[R11]> */
		/* 821C513Ch case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C513Ch case   30:*/		return 0x821C5140;
	}
	return 0x821C5140;
} // Block from 821C50C4h-821C5140h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821C5140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5140);
		  /* 821C5140h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C5140h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C5140h case    0:*/		return 0x821C5144;
		  /* 821C5144h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C5144h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C5144h case    1:*/		return 0x821C5148;
		  /* 821C5148h */ case    2:  		/* bc 4, CR6_EQ, -180 */
		/* 821C5148h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C5094;  }
		/* 821C5148h case    2:*/		return 0x821C514C;
		  /* 821C514Ch */ case    3:  		/* addi R8, R11, 8 */
		/* 821C514Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C514Ch case    3:*/		return 0x821C5150;
		  /* 821C5150h */ case    4:  		/* b -188 */
		/* 821C5150h case    4:*/		return 0x821C5094;
		/* 821C5150h case    4:*/		return 0x821C5154;
	}
	return 0x821C5154;
} // Block from 821C5140h-821C5154h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5154);
		  /* 821C5154h */ case    0:  		/* li R5, 15 */
		/* 821C5154h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821C5154h case    0:*/		return 0x821C5158;
		  /* 821C5158h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 821C5158h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C5158h case    1:*/		return 0x821C515C;
		  /* 821C515Ch */ case    2:  		/* bc 12, CR6_EQ, 76 */
		/* 821C515Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821C51A8;  }
		/* 821C515Ch case    2:*/		return 0x821C5160;
		  /* 821C5160h */ case    3:  		/* mtspr CTR, R26 */
		/* 821C5160h case    3:*/		regs.CTR = regs.R26;
		/* 821C5160h case    3:*/		return 0x821C5164;
		  /* 821C5164h */ case    4:  		/* li R11, 0 */
		/* 821C5164h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C5164h case    4:*/		return 0x821C5168;
		  /* 821C5168h */ case    5:  		/* lhz R8, <#[R29 + 14]> */
		/* 821C5168h case    5:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000000E) );
		/* 821C5168h case    5:*/		return 0x821C516C;
		  /* 821C516Ch */ case    6:  		/* rlwinm R7, R11, 0, 16, 31 */
		/* 821C516Ch case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R11);
		/* 821C516Ch case    6:*/		return 0x821C5170;
		  /* 821C5170h */ case    7:  		/* lwz R10, <#[R3 + 12]> */
		/* 821C5170h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C5170h case    7:*/		return 0x821C5174;
		  /* 821C5174h */ case    8:  		/* slw R9, R5, R11 */
		/* 821C5174h case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R5,regs.R11);
		/* 821C5174h case    8:*/		return 0x821C5178;
		  /* 821C5178h */ case    9:  		/* srw R8, R8, R7 */
		/* 821C5178h case    9:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821C5178h case    9:*/		return 0x821C517C;
		  /* 821C517Ch */ case   10:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821C517Ch case   10:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821C517Ch case   10:*/		return 0x821C5180;
		  /* 821C5180h */ case   11:  		/* and R7, R10, R9 */
		/* 821C5180h case   11:*/		cpu::op::and<0>(regs,&regs.R7,regs.R10,regs.R9);
		/* 821C5180h case   11:*/		return 0x821C5184;
		  /* 821C5184h */ case   12:  		/* slw R8, R8, R11 */
		/* 821C5184h case   12:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 821C5184h case   12:*/		return 0x821C5188;
		  /* 821C5188h */ case   13:  		/* rlwinm R7, R7, 0, 16, 31 */
		/* 821C5188h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R7);
		/* 821C5188h case   13:*/		return 0x821C518C;
		  /* 821C518Ch */ case   14:  		/* cmplw CR6, R7, R8 */
		/* 821C518Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 821C518Ch case   14:*/		return 0x821C5190;
		  /* 821C5190h */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5190h case   15:*/		if ( regs.CR[6].eq ) { return 0x821C51A0;  }
		/* 821C5190h case   15:*/		return 0x821C5194;
		  /* 821C5194h */ case   16:  		/* andc R10, R10, R9 */
		/* 821C5194h case   16:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821C5194h case   16:*/		return 0x821C5198;
		  /* 821C5198h */ case   17:  		/* or R10, R10, R8 */
		/* 821C5198h case   17:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821C5198h case   17:*/		return 0x821C519C;
		  /* 821C519Ch */ case   18:  		/* sth R10, <#[R3 + 14]> */
		/* 821C519Ch case   18:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R3 + 0x0000000E) );
		/* 821C519Ch case   18:*/		return 0x821C51A0;
	}
	return 0x821C51A0;
} // Block from 821C5154h-821C51A0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C51A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C51A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C51A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C51A0);
		  /* 821C51A0h */ case    0:  		/* addi R11, R11, 4 */
		/* 821C51A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C51A0h case    0:*/		return 0x821C51A4;
		  /* 821C51A4h */ case    1:  		/* bc 16, CR0_LT, -60 */
		/* 821C51A4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821C5168;  }
		/* 821C51A4h case    1:*/		return 0x821C51A8;
	}
	return 0x821C51A8;
} // Block from 821C51A0h-821C51A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C51A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C51A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C51A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C51A8);
		  /* 821C51A8h */ case    0:  		/* li R6, 0 */
		/* 821C51A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C51A8h case    0:*/		return 0x821C51AC;
		  /* 821C51ACh */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821C51ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821C51ACh case    1:*/		return 0x821C51B0;
		  /* 821C51B0h */ case    2:  		/* bc 12, CR6_EQ, 92 */
		/* 821C51B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C520C;  }
		/* 821C51B0h case    2:*/		return 0x821C51B4;
		  /* 821C51B4h */ case    3:  		/* add R7, R26, R24 */
		/* 821C51B4h case    3:*/		cpu::op::add<0>(regs,&regs.R7,regs.R26,regs.R24);
		/* 821C51B4h case    3:*/		return 0x821C51B8;
		  /* 821C51B8h */ case    4:  		/* mtspr CTR, R28 */
		/* 821C51B8h case    4:*/		regs.CTR = regs.R28;
		/* 821C51B8h case    4:*/		return 0x821C51BC;
		  /* 821C51BCh */ case    5:  		/* li R8, 0 */
		/* 821C51BCh case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C51BCh case    5:*/		return 0x821C51C0;
		  /* 821C51C0h */ case    6:  		/* add R10, R7, R6 */
		/* 821C51C0h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R7,regs.R6);
		/* 821C51C0h case    6:*/		return 0x821C51C4;
		  /* 821C51C4h */ case    7:  		/* lhz R9, <#[R27 + 14]> */
		/* 821C51C4h case    7:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000000E) );
		/* 821C51C4h case    7:*/		return 0x821C51C8;
		  /* 821C51C8h */ case    8:  		/* rlwinm R4, R8, 0, 16, 31 */
		/* 821C51C8h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R4,regs.R8);
		/* 821C51C8h case    8:*/		return 0x821C51CC;
		  /* 821C51CCh */ case    9:  		/* lwz R11, <#[R3 + 12]> */
		/* 821C51CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C51CCh case    9:*/		return 0x821C51D0;
		  /* 821C51D0h */ case   10:  		/* rlwinm R31, R10, 2, 0, 29 */
		/* 821C51D0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R10);
		/* 821C51D0h case   10:*/		return 0x821C51D4;
		  /* 821C51D4h */ case   11:  		/* srw R9, R9, R4 */
		/* 821C51D4h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 821C51D4h case   11:*/		return 0x821C51D8;
		  /* 821C51D8h */ case   12:  		/* slw R10, R5, R31 */
		/* 821C51D8h case   12:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R5,regs.R31);
		/* 821C51D8h case   12:*/		return 0x821C51DC;
		  /* 821C51DCh */ case   13:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821C51DCh case   13:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821C51DCh case   13:*/		return 0x821C51E0;
		  /* 821C51E0h */ case   14:  		/* and R4, R11, R10 */
		/* 821C51E0h case   14:*/		cpu::op::and<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 821C51E0h case   14:*/		return 0x821C51E4;
		  /* 821C51E4h */ case   15:  		/* slw R9, R9, R31 */
		/* 821C51E4h case   15:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821C51E4h case   15:*/		return 0x821C51E8;
		  /* 821C51E8h */ case   16:  		/* rlwinm R4, R4, 0, 16, 31 */
		/* 821C51E8h case   16:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R4,regs.R4);
		/* 821C51E8h case   16:*/		return 0x821C51EC;
		  /* 821C51ECh */ case   17:  		/* cmplw CR6, R4, R9 */
		/* 821C51ECh case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 821C51ECh case   17:*/		return 0x821C51F0;
		  /* 821C51F0h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 821C51F0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821C5200;  }
		/* 821C51F0h case   18:*/		return 0x821C51F4;
		  /* 821C51F4h */ case   19:  		/* andc R11, R11, R10 */
		/* 821C51F4h case   19:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C51F4h case   19:*/		return 0x821C51F8;
		  /* 821C51F8h */ case   20:  		/* or R11, R11, R9 */
		/* 821C51F8h case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821C51F8h case   20:*/		return 0x821C51FC;
		  /* 821C51FCh */ case   21:  		/* sth R11, <#[R3 + 14]> */
		/* 821C51FCh case   21:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R3 + 0x0000000E) );
		/* 821C51FCh case   21:*/		return 0x821C5200;
	}
	return 0x821C5200;
} // Block from 821C51A8h-821C5200h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C5200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5200);
		  /* 821C5200h */ case    0:  		/* addi R6, R6, 1 */
		/* 821C5200h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821C5200h case    0:*/		return 0x821C5204;
		  /* 821C5204h */ case    1:  		/* addi R8, R8, 4 */
		/* 821C5204h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821C5204h case    1:*/		return 0x821C5208;
		  /* 821C5208h */ case    2:  		/* bc 16, CR0_LT, -72 */
		/* 821C5208h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821C51C0;  }
		/* 821C5208h case    2:*/		return 0x821C520C;
	}
	return 0x821C520C;
} // Block from 821C5200h-821C520Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C520Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C520C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C520C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C520C);
		  /* 821C520Ch */ case    0:  		/* lwz R11, <#[R25 + 536]> */
		/* 821C520Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000218) );
		/* 821C520Ch case    0:*/		return 0x821C5210;
		  /* 821C5210h */ case    1:  		/* li R10, 0 */
		/* 821C5210h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C5210h case    1:*/		return 0x821C5214;
		  /* 821C5214h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C5214h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5214h case    2:*/		return 0x821C5218;
		  /* 821C5218h */ case    3:  		/* bc 4, CR6_GT, 84 */
		/* 821C5218h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821C526C;  }
		/* 821C5218h case    3:*/		return 0x821C521C;
		  /* 821C521Ch */ case    4:  		/* addi R11, R25, 352 */
		/* 821C521Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x160);
		/* 821C521Ch case    4:*/		return 0x821C5220;
		  /* 821C5220h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821C5220h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5220h case    5:*/		return 0x821C5224;
		  /* 821C5224h */ case    6:  		/* cmplw CR6, R9, R29 */
		/* 821C5224h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 821C5224h case    6:*/		return 0x821C5228;
		  /* 821C5228h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821C5228h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C5230;  }
		/* 821C5228h case    7:*/		return 0x821C522C;
		  /* 821C522Ch */ case    8:  		/* stw R3, <#[R11]> */
		/* 821C522Ch case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821C522Ch case    8:*/		return 0x821C5230;
	}
	return 0x821C5230;
} // Block from 821C520Ch-821C5230h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C5230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5230);
		  /* 821C5230h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 821C5230h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5230h case    0:*/		return 0x821C5234;
		  /* 821C5234h */ case    1:  		/* cmplw CR6, R9, R27 */
		/* 821C5234h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R27);
		/* 821C5234h case    1:*/		return 0x821C5238;
		  /* 821C5238h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 821C5238h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C5258;  }
		/* 821C5238h case    2:*/		return 0x821C523C;
		  /* 821C523Ch */ case    3:  		/* lwz R9, <#[R11 - 4]> */
		/* 821C523Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C523Ch case    3:*/		return 0x821C5240;
		  /* 821C5240h */ case    4:  		/* add R8, R26, R24 */
		/* 821C5240h case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R26,regs.R24);
		/* 821C5240h case    4:*/		return 0x821C5244;
		  /* 821C5244h */ case    5:  		/* stw R3, <#[R11]> */
		/* 821C5244h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5244h case    5:*/		return 0x821C5248;
		  /* 821C5248h */ case    6:  		/* rlwinm R7, R9, 23, 28, 31 */
		/* 821C5248h case    6:*/		cpu::op::rlwinm<0,23,28,31>(regs,&regs.R7,regs.R9);
		/* 821C5248h case    6:*/		return 0x821C524C;
		  /* 821C524Ch */ case    7:  		/* slw R8, R7, R8 */
		/* 821C524Ch case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821C524Ch case    7:*/		return 0x821C5250;
		  /* 821C5250h */ case    8:  		/* rlwimi R9, R8, 9, 19, 22 */
		/* 821C5250h case    8:*/		cpu::op::rlwimi<0,9,19,22>(regs,&regs.R9,regs.R8);
		/* 821C5250h case    8:*/		return 0x821C5254;
		  /* 821C5254h */ case    9:  		/* stw R9, <#[R11 - 4]> */
		/* 821C5254h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C5254h case    9:*/		return 0x821C5258;
	}
	return 0x821C5258;
} // Block from 821C5230h-821C5258h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C5258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5258);
		  /* 821C5258h */ case    0:  		/* lwz R9, <#[R25 + 536]> */
		/* 821C5258h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000218) );
		/* 821C5258h case    0:*/		return 0x821C525C;
		  /* 821C525Ch */ case    1:  		/* addi R10, R10, 1 */
		/* 821C525Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821C525Ch case    1:*/		return 0x821C5260;
		  /* 821C5260h */ case    2:  		/* addi R11, R11, 12 */
		/* 821C5260h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C5260h case    2:*/		return 0x821C5264;
		  /* 821C5264h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 821C5264h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821C5264h case    3:*/		return 0x821C5268;
		  /* 821C5268h */ case    4:  		/* bc 12, CR6_LT, -72 */
		/* 821C5268h case    4:*/		if ( regs.CR[6].lt ) { return 0x821C5220;  }
		/* 821C5268h case    4:*/		return 0x821C526C;
	}
	return 0x821C526C;
} // Block from 821C5258h-821C526Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C526Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C526C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C526C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C526C);
		  /* 821C526Ch */ case    0:  		/* li R6, 1 */
		/* 821C526Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C526Ch case    0:*/		return 0x821C5270;
		  /* 821C5270h */ case    1:  		/* li R5, 0 */
		/* 821C5270h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C5270h case    1:*/		return 0x821C5274;
		  /* 821C5274h */ case    2:  		/* mr R4, R29 */
		/* 821C5274h case    2:*/		regs.R4 = regs.R29;
		/* 821C5274h case    2:*/		return 0x821C5278;
		  /* 821C5278h */ case    3:  		/* mr R3, R25 */
		/* 821C5278h case    3:*/		regs.R3 = regs.R25;
		/* 821C5278h case    3:*/		return 0x821C527C;
		  /* 821C527Ch */ case    4:  		/* bl 418124 */
		/* 821C527Ch case    4:*/		regs.LR = 0x821C5280; return 0x8222B3C8;
		/* 821C527Ch case    4:*/		return 0x821C5280;
		  /* 821C5280h */ case    5:  		/* li R6, 1 */
		/* 821C5280h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C5280h case    5:*/		return 0x821C5284;
		  /* 821C5284h */ case    6:  		/* li R5, 0 */
		/* 821C5284h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C5284h case    6:*/		return 0x821C5288;
		  /* 821C5288h */ case    7:  		/* mr R4, R27 */
		/* 821C5288h case    7:*/		regs.R4 = regs.R27;
		/* 821C5288h case    7:*/		return 0x821C528C;
		  /* 821C528Ch */ case    8:  		/* mr R3, R25 */
		/* 821C528Ch case    8:*/		regs.R3 = regs.R25;
		/* 821C528Ch case    8:*/		return 0x821C5290;
		  /* 821C5290h */ case    9:  		/* bl 418104 */
		/* 821C5290h case    9:*/		regs.LR = 0x821C5294; return 0x8222B3C8;
		/* 821C5290h case    9:*/		return 0x821C5294;
		  /* 821C5294h */ case   10:  		/* addi R1, R1, 160 */
		/* 821C5294h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821C5294h case   10:*/		return 0x821C5298;
		  /* 821C5298h */ case   11:  		/* b -1261568 */
		/* 821C5298h case   11:*/		return 0x82091298;
		/* 821C5298h case   11:*/		return 0x821C529C;
		  /* 821C529Ch */ case   12:  		/* nop */
		/* 821C529Ch case   12:*/		cpu::op::nop();
		/* 821C529Ch case   12:*/		return 0x821C52A0;
	}
	return 0x821C52A0;
} // Block from 821C526Ch-821C52A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C52A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C52A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C52A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C52A0);
		  /* 821C52A0h */ case    0:  		/* mfspr R12, LR */
		/* 821C52A0h case    0:*/		regs.R12 = regs.LR;
		/* 821C52A0h case    0:*/		return 0x821C52A4;
		  /* 821C52A4h */ case    1:  		/* bl -1261700 */
		/* 821C52A4h case    1:*/		regs.LR = 0x821C52A8; return 0x82091220;
		/* 821C52A4h case    1:*/		return 0x821C52A8;
		  /* 821C52A8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821C52A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821C52A8h case    2:*/		return 0x821C52AC;
		  /* 821C52ACh */ case    3:  		/* addi R11, R6, 11 */
		/* 821C52ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0xB);
		/* 821C52ACh case    3:*/		return 0x821C52B0;
		  /* 821C52B0h */ case    4:  		/* lwz R10, <#[R4 + 8]> */
		/* 821C52B0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821C52B0h case    4:*/		return 0x821C52B4;
		  /* 821C52B4h */ case    5:  		/* mr R31, R4 */
		/* 821C52B4h case    5:*/		regs.R31 = regs.R4;
		/* 821C52B4h case    5:*/		return 0x821C52B8;
		  /* 821C52B8h */ case    6:  		/* lwz R4, <#[R4 + 28]> */
		/* 821C52B8h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x0000001C) );
		/* 821C52B8h case    6:*/		return 0x821C52BC;
		  /* 821C52BCh */ case    7:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 821C52BCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 821C52BCh case    7:*/		return 0x821C52C0;
		  /* 821C52C0h */ case    8:  		/* addi R9, R5, 11 */
		/* 821C52C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0xB);
		/* 821C52C0h case    8:*/		return 0x821C52C4;
		  /* 821C52C4h */ case    9:  		/* rlwinm R11, R10, 13, 29, 31 */
		/* 821C52C4h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R10);
		/* 821C52C4h case    9:*/		return 0x821C52C8;
		  /* 821C52C8h */ case   10:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821C52C8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821C52C8h case   10:*/		return 0x821C52CC;
		  /* 821C52CCh */ case   11:  		/* mr R16, R5 */
		/* 821C52CCh case   11:*/		regs.R16 = regs.R5;
		/* 821C52CCh case   11:*/		return 0x821C52D0;
		  /* 821C52D0h */ case   12:  		/* lwzx R10, <#[R8 + R31]> */
		/* 821C52D0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 821C52D0h case   12:*/		return 0x821C52D4;
		  /* 821C52D4h */ case   13:  		/* li R5, 0 */
		/* 821C52D4h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C52D4h case   13:*/		return 0x821C52D8;
		  /* 821C52D8h */ case   14:  		/* addi R6, R11, -1 */
		/* 821C52D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFF);
		/* 821C52D8h case   14:*/		return 0x821C52DC;
		  /* 821C52DCh */ case   15:  		/* mr R23, R3 */
		/* 821C52DCh case   15:*/		regs.R23 = regs.R3;
		/* 821C52DCh case   15:*/		return 0x821C52E0;
		  /* 821C52E0h */ case   16:  		/* lwzx R15, <#[R9 + R31]> */
		/* 821C52E0h case   16:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 821C52E0h case   16:*/		return 0x821C52E4;
		  /* 821C52E4h */ case   17:  		/* mr R14, R7 */
		/* 821C52E4h case   17:*/		regs.R14 = regs.R7;
		/* 821C52E4h case   17:*/		return 0x821C52E8;
		  /* 821C52E8h */ case   18:  		/* stw R10, <#[R1 + 80]> */
		/* 821C52E8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821C52E8h case   18:*/		return 0x821C52EC;
		  /* 821C52ECh */ case   19:  		/* bl 391188 */
		/* 821C52ECh case   19:*/		regs.LR = 0x821C52F0; return 0x82224B00;
		/* 821C52ECh case   19:*/		return 0x821C52F0;
		  /* 821C52F0h */ case   20:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C52F0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C52F0h case   20:*/		return 0x821C52F4;
		  /* 821C52F4h */ case   21:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C52F4h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C52F4h case   21:*/		return 0x821C52F8;
		  /* 821C52F8h */ case   22:  		/* addi R11, R11, 36 */
		/* 821C52F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C52F8h case   22:*/		return 0x821C52FC;
		  /* 821C52FCh */ case   23:  		/* addi R10, R10, 36 */
		/* 821C52FCh case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C52FCh case   23:*/		return 0x821C5300;
		  /* 821C5300h */ case   24:  		/* addi R8, R11, -36 */
		/* 821C5300h case   24:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C5300h case   24:*/		return 0x821C5304;
		  /* 821C5304h */ case   25:  		/* addi R6, R10, -36 */
		/* 821C5304h case   25:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C5304h case   25:*/		return 0x821C5308;
		  /* 821C5308h */ case   26:  		/* addi R9, R10, 4 */
		/* 821C5308h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C5308h case   26:*/		return 0x821C530C;
		  /* 821C530Ch */ case   27:  		/* lwz R7, <#[R11]> */
		/* 821C530Ch case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C530Ch case   27:*/		return 0x821C5310;
		  /* 821C5310h */ case   28:  		/* mr R30, R3 */
		/* 821C5310h case   28:*/		regs.R30 = regs.R3;
		/* 821C5310h case   28:*/		return 0x821C5314;
		  /* 821C5314h */ case   29:  		/* li R22, 0 */
		/* 821C5314h case   29:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821C5314h case   29:*/		return 0x821C5318;
		  /* 821C5318h */ case   30:  		/* stw R7, <#[R10]> */
		/* 821C5318h case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C5318h case   30:*/		return 0x821C531C;
		  /* 821C531Ch */ case   31:  		/* lwz R7, <#[R11]> */
		/* 821C531Ch case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C531Ch case   31:*/		return 0x821C5320;
		  /* 821C5320h */ case   32:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C5320h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C5320h case   32:*/		return 0x821C5324;
		  /* 821C5324h */ case   33:  		/* stw R6, <#[R7]> */
		/* 821C5324h case   33:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C5324h case   33:*/		return 0x821C5328;
		  /* 821C5328h */ case   34:  		/* stw R8, <#[R10 + 4]> */
		/* 821C5328h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C5328h case   34:*/		return 0x821C532C;
		  /* 821C532Ch */ case   35:  		/* stw R9, <#[R11]> */
		/* 821C532Ch case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C532Ch case   35:*/		return 0x821C5330;
		  /* 821C5330h */ case   36:  		/* lwz R11, <#[R23 + 40]> */
		/* 821C5330h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000028) );
		/* 821C5330h case   36:*/		return 0x821C5334;
		  /* 821C5334h */ case   37:  		/* nor R11, R11, R11 */
		/* 821C5334h case   37:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C5334h case   37:*/		return 0x821C5338;
		  /* 821C5338h */ case   38:  		/* rlwinm. R11, R11, 18, 31, 31 */
		/* 821C5338h case   38:*/		cpu::op::rlwinm<1,18,31,31>(regs,&regs.R11,regs.R11);
		/* 821C5338h case   38:*/		return 0x821C533C;
		  /* 821C533Ch */ case   39:  		/* bc 12, CR0_EQ, 40 */
		/* 821C533Ch case   39:*/		if ( regs.CR[0].eq ) { return 0x821C5364;  }
		/* 821C533Ch case   39:*/		return 0x821C5340;
		  /* 821C5340h */ case   40:  		/* lwz R11, <#[R31 + 16]> */
		/* 821C5340h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821C5340h case   40:*/		return 0x821C5344;
		  /* 821C5344h */ case   41:  		/* b 20 */
		/* 821C5344h case   41:*/		return 0x821C5358;
		/* 821C5344h case   41:*/		return 0x821C5348;
		  /* 821C5348h */ case   42:  		/* lwz R10, <#[R11]> */
		/* 821C5348h case   42:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5348h case   42:*/		return 0x821C534C;
		  /* 821C534Ch */ case   43:  		/* cmpwi CR6, R10, 1 */
		/* 821C534Ch case   43:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 821C534Ch case   43:*/		return 0x821C5350;
		  /* 821C5350h */ case   44:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5350h case   44:*/		if ( regs.CR[6].eq ) { return 0x821C5360;  }
		/* 821C5350h case   44:*/		return 0x821C5354;
		  /* 821C5354h */ case   45:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C5354h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5354h case   45:*/		return 0x821C5358;
	}
	return 0x821C5358;
} // Block from 821C52A0h-821C5358h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821C5358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5358);
		  /* 821C5358h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821C5358h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5358h case    0:*/		return 0x821C535C;
		  /* 821C535Ch */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821C535Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C5348;  }
		/* 821C535Ch case    1:*/		return 0x821C5360;
	}
	return 0x821C5360;
} // Block from 821C5358h-821C5360h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5360);
		  /* 821C5360h */ case    0:  		/* mr R22, R11 */
		/* 821C5360h case    0:*/		regs.R22 = regs.R11;
		/* 821C5360h case    0:*/		return 0x821C5364;
	}
	return 0x821C5364;
} // Block from 821C5360h-821C5364h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C5364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5364);
		  /* 821C5364h */ case    0:  		/* li R25, 0 */
		/* 821C5364h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821C5364h case    0:*/		return 0x821C5368;
		  /* 821C5368h */ case    1:  		/* li R26, 0 */
		/* 821C5368h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821C5368h case    1:*/		return 0x821C536C;
		  /* 821C536Ch */ case    2:  		/* li R18, 0 */
		/* 821C536Ch case    2:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821C536Ch case    2:*/		return 0x821C5370;
		  /* 821C5370h */ case    3:  		/* li R20, 0 */
		/* 821C5370h case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821C5370h case    3:*/		return 0x821C5374;
		  /* 821C5374h */ case    4:  		/* li R28, 0 */
		/* 821C5374h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C5374h case    4:*/		return 0x821C5378;
		  /* 821C5378h */ case    5:  		/* li R29, 0 */
		/* 821C5378h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821C5378h case    5:*/		return 0x821C537C;
		  /* 821C537Ch */ case    6:  		/* li R27, 0 */
		/* 821C537Ch case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821C537Ch case    6:*/		return 0x821C5380;
		  /* 821C5380h */ case    7:  		/* addi R24, R22, 8 */
		/* 821C5380h case    7:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R22,0x8);
		/* 821C5380h case    7:*/		return 0x821C5384;
		  /* 821C5384h */ case    8:  		/* addi R19, R31, 44 */
		/* 821C5384h case    8:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R31,0x2C);
		/* 821C5384h case    8:*/		return 0x821C5388;
		  /* 821C5388h */ case    9:  		/* addi R21, R30, 44 */
		/* 821C5388h case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R30,0x2C);
		/* 821C5388h case    9:*/		return 0x821C538C;
		  /* 821C538Ch */ case   10:  		/* li R17, 3 */
		/* 821C538Ch case   10:*/		cpu::op::li<0>(regs,&regs.R17,0x3);
		/* 821C538Ch case   10:*/		return 0x821C5390;
		  /* 821C5390h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C5390h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C5390h case   11:*/		return 0x821C5394;
		  /* 821C5394h */ case   12:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821C5394h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821C5394h case   12:*/		return 0x821C5398;
		  /* 821C5398h */ case   13:  		/* cmplw CR6, R20, R11 */
		/* 821C5398h case   13:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R11);
		/* 821C5398h case   13:*/		return 0x821C539C;
		  /* 821C539Ch */ case   14:  		/* bc 4, CR6_LT, 180 */
		/* 821C539Ch case   14:*/		if ( !regs.CR[6].lt ) { return 0x821C5450;  }
		/* 821C539Ch case   14:*/		return 0x821C53A0;
		  /* 821C53A0h */ case   15:  		/* slw R11, R17, R27 */
		/* 821C53A0h case   15:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R27);
		/* 821C53A0h case   15:*/		return 0x821C53A4;
		  /* 821C53A4h */ case   16:  		/* lwzx R4, <#[R19 + R29]> */
		/* 821C53A4h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R19 + regs.R29 + 0x00000000) );
		/* 821C53A4h case   16:*/		return 0x821C53A8;
		  /* 821C53A8h */ case   17:  		/* slw R10, R26, R27 */
		/* 821C53A8h case   17:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R26,regs.R27);
		/* 821C53A8h case   17:*/		return 0x821C53AC;
		  /* 821C53ACh */ case   18:  		/* andc R11, R25, R11 */
		/* 821C53ACh case   18:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821C53ACh case   18:*/		return 0x821C53B0;
		  /* 821C53B0h */ case   19:  		/* cmplw CR6, R4, R15 */
		/* 821C53B0h case   19:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R15);
		/* 821C53B0h case   19:*/		return 0x821C53B4;
		  /* 821C53B4h */ case   20:  		/* or R25, R11, R10 */
		/* 821C53B4h case   20:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 821C53B4h case   20:*/		return 0x821C53B8;
		  /* 821C53B8h */ case   21:  		/* bc 12, CR6_EQ, 132 */
		/* 821C53B8h case   21:*/		if ( regs.CR[6].eq ) { return 0x821C543C;  }
		/* 821C53B8h case   21:*/		return 0x821C53BC;
		  /* 821C53BCh */ case   22:  		/* lwz R11, <#[R1 + 80]> */
		/* 821C53BCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821C53BCh case   22:*/		return 0x821C53C0;
		  /* 821C53C0h */ case   23:  		/* cmplw CR6, R4, R11 */
		/* 821C53C0h case   23:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821C53C0h case   23:*/		return 0x821C53C4;
		  /* 821C53C4h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821C53C4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821C53CC;  }
		/* 821C53C4h case   24:*/		return 0x821C53C8;
		  /* 821C53C8h */ case   25:  		/* mr R18, R26 */
		/* 821C53C8h case   25:*/		regs.R18 = regs.R26;
		/* 821C53C8h case   25:*/		return 0x821C53CC;
	}
	return 0x821C53CC;
} // Block from 821C5364h-821C53CCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C53CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C53CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C53CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C53CC);
		  /* 821C53CCh */ case    0:  		/* mr R3, R30 */
		/* 821C53CCh case    0:*/		regs.R3 = regs.R30;
		/* 821C53CCh case    0:*/		return 0x821C53D0;
		  /* 821C53D0h */ case    1:  		/* bl -315912 */
		/* 821C53D0h case    1:*/		regs.LR = 0x821C53D4; return 0x821781C8;
		/* 821C53D0h case    1:*/		return 0x821C53D4;
		  /* 821C53D4h */ case    2:  		/* stwx R3, <#[R21 + R28]> */
		/* 821C53D4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + regs.R28 + 0x00000000) );
		/* 821C53D4h case    2:*/		return 0x821C53D8;
		  /* 821C53D8h */ case    3:  		/* rlwinm R9, R29, 0, 16, 31 */
		/* 821C53D8h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R29);
		/* 821C53D8h case    3:*/		return 0x821C53DC;
		  /* 821C53DCh */ case    4:  		/* li R11, 15 */
		/* 821C53DCh case    4:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 821C53DCh case    4:*/		return 0x821C53E0;
		  /* 821C53E0h */ case    5:  		/* slw R11, R11, R28 */
		/* 821C53E0h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821C53E0h case    5:*/		return 0x821C53E4;
		  /* 821C53E4h */ case    6:  		/* lhz R8, <#[R31 + 14]> */
		/* 821C53E4h case    6:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000E) );
		/* 821C53E4h case    6:*/		return 0x821C53E8;
		  /* 821C53E8h */ case    7:  		/* lwz R10, <#[R30 + 12]> */
		/* 821C53E8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C53E8h case    7:*/		return 0x821C53EC;
		  /* 821C53ECh */ case    8:  		/* srw R9, R8, R9 */
		/* 821C53ECh case    8:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821C53ECh case    8:*/		return 0x821C53F0;
		  /* 821C53F0h */ case    9:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821C53F0h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821C53F0h case    9:*/		return 0x821C53F4;
		  /* 821C53F4h */ case   10:  		/* and R8, R10, R11 */
		/* 821C53F4h case   10:*/		cpu::op::and<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 821C53F4h case   10:*/		return 0x821C53F8;
		  /* 821C53F8h */ case   11:  		/* slw R9, R9, R28 */
		/* 821C53F8h case   11:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R28);
		/* 821C53F8h case   11:*/		return 0x821C53FC;
		  /* 821C53FCh */ case   12:  		/* rlwinm R8, R8, 0, 16, 31 */
		/* 821C53FCh case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R8);
		/* 821C53FCh case   12:*/		return 0x821C5400;
		  /* 821C5400h */ case   13:  		/* cmplw CR6, R8, R9 */
		/* 821C5400h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821C5400h case   13:*/		return 0x821C5404;
		  /* 821C5404h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5404h case   14:*/		if ( regs.CR[6].eq ) { return 0x821C5414;  }
		/* 821C5404h case   14:*/		return 0x821C5408;
		  /* 821C5408h */ case   15:  		/* andc R11, R10, R11 */
		/* 821C5408h case   15:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C5408h case   15:*/		return 0x821C540C;
		  /* 821C540Ch */ case   16:  		/* or R11, R11, R9 */
		/* 821C540Ch case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821C540Ch case   16:*/		return 0x821C5410;
		  /* 821C5410h */ case   17:  		/* sth R11, <#[R30 + 14]> */
		/* 821C5410h case   17:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821C5410h case   17:*/		return 0x821C5414;
	}
	return 0x821C5414;
} // Block from 821C53CCh-821C5414h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C5414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5414);
		  /* 821C5414h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821C5414h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C5414h case    0:*/		return 0x821C5418;
		  /* 821C5418h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821C5418h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C5434;  }
		/* 821C5418h case    1:*/		return 0x821C541C;
		  /* 821C541Ch */ case    2:  		/* mr R7, R23 */
		/* 821C541Ch case    2:*/		regs.R7 = regs.R23;
		/* 821C541Ch case    2:*/		return 0x821C5420;
		  /* 821C5420h */ case    3:  		/* lfd FR1, <#[R24]> */
		/* 821C5420h case    3:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R24 + 0x00000000) );
		/* 821C5420h case    3:*/		return 0x821C5424;
		  /* 821C5424h */ case    4:  		/* mr R4, R26 */
		/* 821C5424h case    4:*/		regs.R4 = regs.R26;
		/* 821C5424h case    4:*/		return 0x821C5428;
		  /* 821C5428h */ case    5:  		/* lfd FR2, <#[R24 + 32]> */
		/* 821C5428h case    5:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R24 + 0x00000020) );
		/* 821C5428h case    5:*/		return 0x821C542C;
		  /* 821C542Ch */ case    6:  		/* mr R3, R30 */
		/* 821C542Ch case    6:*/		regs.R3 = regs.R30;
		/* 821C542Ch case    6:*/		return 0x821C5430;
		  /* 821C5430h */ case    7:  		/* bl 382704 */
		/* 821C5430h case    7:*/		regs.LR = 0x821C5434; return 0x82222B20;
		/* 821C5430h case    7:*/		return 0x821C5434;
	}
	return 0x821C5434;
} // Block from 821C5414h-821C5434h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C5434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5434);
		  /* 821C5434h */ case    0:  		/* addi R26, R26, 1 */
		/* 821C5434h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821C5434h case    0:*/		return 0x821C5438;
		  /* 821C5438h */ case    1:  		/* addi R28, R28, 4 */
		/* 821C5438h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821C5438h case    1:*/		return 0x821C543C;
	}
	return 0x821C543C;
} // Block from 821C5434h-821C543Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C543Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C543C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C543C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C543C);
		  /* 821C543Ch */ case    0:  		/* addi R20, R20, 1 */
		/* 821C543Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821C543Ch case    0:*/		return 0x821C5440;
	}
	return 0x821C5440;
} // Block from 821C543Ch-821C5440h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C5440h
// Function '?SplitInput@Compiler@D3DXShader@@AAAXIPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5440);
		  /* 821C5440h */ case    0:  		/* addi R27, R27, 2 */
		/* 821C5440h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 821C5440h case    0:*/		return 0x821C5444;
		  /* 821C5444h */ case    1:  		/* addi R29, R29, 4 */
		/* 821C5444h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821C5444h case    1:*/		return 0x821C5448;
		  /* 821C5448h */ case    2:  		/* addi R24, R24, 8 */
		/* 821C5448h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x8);
		/* 821C5448h case    2:*/		return 0x821C544C;
		  /* 821C544Ch */ case    3:  		/* b -188 */
		/* 821C544Ch case    3:*/		return 0x821C5390;
		/* 821C544Ch case    3:*/		return 0x821C5450;
	}
	return 0x821C5450;
} // Block from 821C5440h-821C5450h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C5450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5450);
		  /* 821C5450h */ case    0:  		/* rlwinm R11, R16, 1, 0, 30 */
		/* 821C5450h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R16);
		/* 821C5450h case    0:*/		return 0x821C5454;
		  /* 821C5454h */ case    1:  		/* mr R3, R30 */
		/* 821C5454h case    1:*/		regs.R3 = regs.R30;
		/* 821C5454h case    1:*/		return 0x821C5458;
		  /* 821C5458h */ case    2:  		/* slw R10, R17, R11 */
		/* 821C5458h case    2:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R17,regs.R11);
		/* 821C5458h case    2:*/		return 0x821C545C;
		  /* 821C545Ch */ case    3:  		/* slw R11, R18, R11 */
		/* 821C545Ch case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R18,regs.R11);
		/* 821C545Ch case    3:*/		return 0x821C5460;
		  /* 821C5460h */ case    4:  		/* andc R10, R25, R10 */
		/* 821C5460h case    4:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 821C5460h case    4:*/		return 0x821C5464;
		  /* 821C5464h */ case    5:  		/* or R11, R10, R11 */
		/* 821C5464h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C5464h case    5:*/		return 0x821C5468;
		  /* 821C5468h */ case    6:  		/* stw R11, <#[R14]> */
		/* 821C5468h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821C5468h case    6:*/		return 0x821C546C;
		  /* 821C546Ch */ case    7:  		/* addi R1, R1, 240 */
		/* 821C546Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821C546Ch case    7:*/		return 0x821C5470;
		  /* 821C5470h */ case    8:  		/* b -1262080 */
		/* 821C5470h case    8:*/		return 0x82091270;
		/* 821C5470h case    8:*/		return 0x821C5474;
		  /* 821C5474h */ case    9:  		/* nop */
		/* 821C5474h case    9:*/		cpu::op::nop();
		/* 821C5474h case    9:*/		return 0x821C5478;
	}
	return 0x821C5478;
} // Block from 821C5450h-821C5478h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C5478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5478);
		  /* 821C5478h */ case    0:  		/* mfspr R12, LR */
		/* 821C5478h case    0:*/		regs.R12 = regs.LR;
		/* 821C5478h case    0:*/		return 0x821C547C;
		  /* 821C547Ch */ case    1:  		/* bl -1262164 */
		/* 821C547Ch case    1:*/		regs.LR = 0x821C5480; return 0x82091228;
		/* 821C547Ch case    1:*/		return 0x821C5480;
		  /* 821C5480h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821C5480h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821C5480h case    2:*/		return 0x821C5484;
		  /* 821C5484h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C5484h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C5484h case    3:*/		return 0x821C5488;
		  /* 821C5488h */ case    4:  		/* mr R19, R3 */
		/* 821C5488h case    4:*/		regs.R19 = regs.R3;
		/* 821C5488h case    4:*/		return 0x821C548C;
		  /* 821C548Ch */ case    5:  		/* li R17, 1 */
		/* 821C548Ch case    5:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821C548Ch case    5:*/		return 0x821C5490;
		  /* 821C5490h */ case    6:  		/* li R16, 57 */
		/* 821C5490h case    6:*/		cpu::op::li<0>(regs,&regs.R16,0x39);
		/* 821C5490h case    6:*/		return 0x821C5494;
		  /* 821C5494h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5494h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5494h case    7:*/		return 0x821C5498;
		  /* 821C5498h */ case    8:  		/* bc 4, CR0_EQ, 868 */
		/* 821C5498h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C57FC;  }
		/* 821C5498h case    8:*/		return 0x821C549C;
		  /* 821C549Ch */ case    9:  		/* mr R25, R11 */
		/* 821C549Ch case    9:*/		regs.R25 = regs.R11;
		/* 821C549Ch case    9:*/		return 0x821C54A0;
		  /* 821C54A0h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821C54A0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C54A0h case   10:*/		return 0x821C54A4;
		  /* 821C54A4h */ case   11:  		/* bc 12, CR0_EQ, 856 */
		/* 821C54A4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821C57FC;  }
		/* 821C54A4h case   11:*/		return 0x821C54A8;
		  /* 821C54A8h */ case   12:  		/* lwz R11, <#[R25 + 48]> */
		/* 821C54A8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821C54A8h case   12:*/		return 0x821C54AC;
		  /* 821C54ACh */ case   13:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821C54ACh case   13:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821C54ACh case   13:*/		return 0x821C54B0;
		  /* 821C54B0h */ case   14:  		/* bc 12, CR0_EQ, 816 */
		/* 821C54B0h case   14:*/		if ( regs.CR[0].eq ) { return 0x821C57E0;  }
		/* 821C54B0h case   14:*/		return 0x821C54B4;
		  /* 821C54B4h */ case   15:  		/* lwz R11, <#[R19 + 4]> */
		/* 821C54B4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821C54B4h case   15:*/		return 0x821C54B8;
		  /* 821C54B8h */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C54B8h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C54B8h case   16:*/		return 0x821C54BC;
		  /* 821C54BCh */ case   17:  		/* bc 4, CR0_EQ, 804 */
		/* 821C54BCh case   17:*/		if ( !regs.CR[0].eq ) { return 0x821C57E0;  }
		/* 821C54BCh case   17:*/		return 0x821C54C0;
		  /* 821C54C0h */ case   18:  		/* mr R20, R11 */
		/* 821C54C0h case   18:*/		regs.R20 = regs.R11;
		/* 821C54C0h case   18:*/		return 0x821C54C4;
		  /* 821C54C4h */ case   19:  		/* cmplwi CR0, R11, 0 */
		/* 821C54C4h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C54C4h case   19:*/		return 0x821C54C8;
		  /* 821C54C8h */ case   20:  		/* bc 12, CR0_EQ, 792 */
		/* 821C54C8h case   20:*/		if ( regs.CR[0].eq ) { return 0x821C57E0;  }
		/* 821C54C8h case   20:*/		return 0x821C54CC;
		  /* 821C54CCh */ case   21:  		/* lwz R11, <#[R25 + 48]> */
		/* 821C54CCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000030) );
		/* 821C54CCh case   21:*/		return 0x821C54D0;
		  /* 821C54D0h */ case   22:  		/* lwz R10, <#[R20 + 40]> */
		/* 821C54D0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000028) );
		/* 821C54D0h case   22:*/		return 0x821C54D4;
		  /* 821C54D4h */ case   23:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821C54D4h case   23:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821C54D4h case   23:*/		return 0x821C54D8;
		  /* 821C54D8h */ case   24:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821C54D8h case   24:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821C54D8h case   24:*/		return 0x821C54DC;
		  /* 821C54DCh */ case   25:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821C54DCh case   25:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821C54DCh case   25:*/		return 0x821C54E0;
		  /* 821C54E0h */ case   26:  		/* addi R11, R11, 1 */
		/* 821C54E0h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C54E0h case   26:*/		return 0x821C54E4;
		  /* 821C54E4h */ case   27:  		/* slw R9, R17, R9 */
		/* 821C54E4h case   27:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 821C54E4h case   27:*/		return 0x821C54E8;
		  /* 821C54E8h */ case   28:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C54E8h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C54E8h case   28:*/		return 0x821C54EC;
		  /* 821C54ECh */ case   29:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821C54ECh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821C54ECh case   29:*/		return 0x821C54F0;
		  /* 821C54F0h */ case   30:  		/* and. R11, R11, R9 */
		/* 821C54F0h case   30:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821C54F0h case   30:*/		return 0x821C54F4;
		  /* 821C54F4h */ case   31:  		/* bc 12, CR0_EQ, 720 */
		/* 821C54F4h case   31:*/		if ( regs.CR[0].eq ) { return 0x821C57C4;  }
		/* 821C54F4h case   31:*/		return 0x821C54F8;
		  /* 821C54F8h */ case   32:  		/* lwz R11, <#[R20 + 20]> */
		/* 821C54F8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000014) );
		/* 821C54F8h case   32:*/		return 0x821C54FC;
		  /* 821C54FCh */ case   33:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C54FCh case   33:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C54FCh case   33:*/		return 0x821C5500;
		  /* 821C5500h */ case   34:  		/* bc 12, CR0_EQ, 56 */
		/* 821C5500h case   34:*/		if ( regs.CR[0].eq ) { return 0x821C5538;  }
		/* 821C5500h case   34:*/		return 0x821C5504;
		  /* 821C5504h */ case   35:  		/* lwz R11, <#[R20 + 28]> */
		/* 821C5504h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 821C5504h case   35:*/		return 0x821C5508;
		  /* 821C5508h */ case   36:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C5508h case   36:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C5508h case   36:*/		return 0x821C550C;
		  /* 821C550Ch */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 821C550Ch case   37:*/		if ( regs.CR[0].eq ) { return 0x821C551C;  }
		/* 821C550Ch case   37:*/		return 0x821C5510;
		  /* 821C5510h */ case   38:  		/* lwz R11, <#[R20 + 36]> */
		/* 821C5510h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000024) );
		/* 821C5510h case   38:*/		return 0x821C5514;
		  /* 821C5514h */ case   39:  		/* addi R22, R20, 32 */
		/* 821C5514h case   39:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R20,0x20);
		/* 821C5514h case   39:*/		return 0x821C5518;
		  /* 821C5518h */ case   40:  		/* b 12 */
		/* 821C5518h case   40:*/		return 0x821C5524;
		/* 821C5518h case   40:*/		return 0x821C551C;
	}
	return 0x821C551C;
} // Block from 821C5478h-821C551Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 821C551Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C551C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C551C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C551C);
		  /* 821C551Ch */ case    0:  		/* lwz R11, <#[R20 + 28]> */
		/* 821C551Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000001C) );
		/* 821C551Ch case    0:*/		return 0x821C5520;
		  /* 821C5520h */ case    1:  		/* addi R22, R20, 24 */
		/* 821C5520h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R20,0x18);
		/* 821C5520h case    1:*/		return 0x821C5524;
	}
	return 0x821C5524;
} // Block from 821C551Ch-821C5524h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5524);
		  /* 821C5524h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C5524h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5524h case    0:*/		return 0x821C5528;
		  /* 821C5528h */ case    1:  		/* addic R10, R10, -1 */
		/* 821C5528h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C5528h case    1:*/		return 0x821C552C;
		  /* 821C552Ch */ case    2:  		/* subfe R10, R10, R10 */
		/* 821C552Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C552Ch case    2:*/		return 0x821C5530;
		  /* 821C5530h */ case    3:  		/* and R23, R10, R11 */
		/* 821C5530h case    3:*/		cpu::op::and<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821C5530h case    3:*/		return 0x821C5534;
		  /* 821C5534h */ case    4:  		/* b 28 */
		/* 821C5534h case    4:*/		return 0x821C5550;
		/* 821C5534h case    4:*/		return 0x821C5538;
	}
	return 0x821C5538;
} // Block from 821C5524h-821C5538h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5538);
		  /* 821C5538h */ case    0:  		/* lwz R10, <#[R20 + 20]> */
		/* 821C5538h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000014) );
		/* 821C5538h case    0:*/		return 0x821C553C;
		  /* 821C553Ch */ case    1:  		/* addi R22, R20, 16 */
		/* 821C553Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R20,0x10);
		/* 821C553Ch case    1:*/		return 0x821C5540;
		  /* 821C5540h */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821C5540h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821C5540h case    2:*/		return 0x821C5544;
		  /* 821C5544h */ case    3:  		/* addic R11, R9, -1 */
		/* 821C5544h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 821C5544h case    3:*/		return 0x821C5548;
		  /* 821C5548h */ case    4:  		/* subfe R11, R11, R11 */
		/* 821C5548h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C5548h case    4:*/		return 0x821C554C;
		  /* 821C554Ch */ case    5:  		/* and R23, R11, R10 */
		/* 821C554Ch case    5:*/		cpu::op::and<0>(regs,&regs.R23,regs.R11,regs.R10);
		/* 821C554Ch case    5:*/		return 0x821C5550;
	}
	return 0x821C5550;
} // Block from 821C5538h-821C5550h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C5550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5550);
		  /* 821C5550h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821C5550h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821C5550h case    0:*/		return 0x821C5554;
		  /* 821C5554h */ case    1:  		/* bc 12, CR6_EQ, 624 */
		/* 821C5554h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C57C4;  }
		/* 821C5554h case    1:*/		return 0x821C5558;
		  /* 821C5558h */ case    2:  		/* addi R18, R25, 16 */
		/* 821C5558h case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R25,0x10);
		/* 821C5558h case    2:*/		return 0x821C555C;
		  /* 821C555Ch */ case    3:  		/* cmplw CR6, R22, R18 */
		/* 821C555Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R18);
		/* 821C555Ch case    3:*/		return 0x821C5560;
		  /* 821C5560h */ case    4:  		/* bc 12, CR6_EQ, 496 */
		/* 821C5560h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C5750;  }
		/* 821C5560h case    4:*/		return 0x821C5564;
		  /* 821C5564h */ case    5:  		/* mr R21, R23 */
		/* 821C5564h case    5:*/		regs.R21 = regs.R23;
		/* 821C5564h case    5:*/		return 0x821C5568;
		  /* 821C5568h */ case    6:  		/* lwz R31, <#[R21]> */
		/* 821C5568h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000000) );
		/* 821C5568h case    6:*/		return 0x821C556C;
		  /* 821C556Ch */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821C556Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C556Ch case    7:*/		return 0x821C5570;
		  /* 821C5570h */ case    8:  		/* bc 12, CR6_EQ, 480 */
		/* 821C5570h case    8:*/		if ( regs.CR[6].eq ) { return 0x821C5750;  }
		/* 821C5570h case    8:*/		return 0x821C5574;
		  /* 821C5574h */ case    9:  		/* lwz R10, <#[R19 + 4]> */
		/* 821C5574h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000004) );
		/* 821C5574h case    9:*/		return 0x821C5578;
		  /* 821C5578h */ case   10:  		/* lwz R24, <#[R31 + 12]> */
		/* 821C5578h case   10:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C5578h case   10:*/		return 0x821C557C;
		  /* 821C557Ch */ case   11:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821C557Ch case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821C557Ch case   11:*/		return 0x821C5580;
		  /* 821C5580h */ case   12:  		/* addic R11, R11, -1 */
		/* 821C5580h case   12:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821C5580h case   12:*/		return 0x821C5584;
		  /* 821C5584h */ case   13:  		/* subfe R9, R11, R11 */
		/* 821C5584h case   13:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R11,regs.R11);
		/* 821C5584h case   13:*/		return 0x821C5588;
		  /* 821C5588h */ case   14:  		/* lwz R11, <#[R24 + 28]> */
		/* 821C5588h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 821C5588h case   14:*/		return 0x821C558C;
		  /* 821C558Ch */ case   15:  		/* and R10, R9, R10 */
		/* 821C558Ch case   15:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C558Ch case   15:*/		return 0x821C5590;
		  /* 821C5590h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821C5590h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C5590h case   16:*/		return 0x821C5594;
		  /* 821C5594h */ case   17:  		/* bc 12, CR6_EQ, 424 */
		/* 821C5594h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C573C;  }
		/* 821C5594h case   17:*/		return 0x821C5598;
		  /* 821C5598h */ case   18:  		/* cmplw CR6, R11, R25 */
		/* 821C5598h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821C5598h case   18:*/		return 0x821C559C;
		  /* 821C559Ch */ case   19:  		/* bc 12, CR6_EQ, 52 */
		/* 821C559Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821C55D0;  }
		/* 821C559Ch case   19:*/		return 0x821C55A0;
		  /* 821C55A0h */ case   20:  		/* lwz R11, <#[R11 + 48]> */
		/* 821C55A0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821C55A0h case   20:*/		return 0x821C55A4;
		  /* 821C55A4h */ case   21:  		/* lwz R10, <#[R25 + 40]> */
		/* 821C55A4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000028) );
		/* 821C55A4h case   21:*/		return 0x821C55A8;
		  /* 821C55A8h */ case   22:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821C55A8h case   22:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821C55A8h case   22:*/		return 0x821C55AC;
		  /* 821C55ACh */ case   23:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821C55ACh case   23:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821C55ACh case   23:*/		return 0x821C55B0;
		  /* 821C55B0h */ case   24:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821C55B0h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821C55B0h case   24:*/		return 0x821C55B4;
		  /* 821C55B4h */ case   25:  		/* addi R11, R11, 1 */
		/* 821C55B4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C55B4h case   25:*/		return 0x821C55B8;
		  /* 821C55B8h */ case   26:  		/* slw R9, R17, R9 */
		/* 821C55B8h case   26:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R17,regs.R9);
		/* 821C55B8h case   26:*/		return 0x821C55BC;
		  /* 821C55BCh */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C55BCh case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C55BCh case   27:*/		return 0x821C55C0;
		  /* 821C55C0h */ case   28:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821C55C0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821C55C0h case   28:*/		return 0x821C55C4;
		  /* 821C55C4h */ case   29:  		/* and. R11, R11, R9 */
		/* 821C55C4h case   29:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821C55C4h case   29:*/		return 0x821C55C8;
		  /* 821C55C8h */ case   30:  		/* mr R11, R17 */
		/* 821C55C8h case   30:*/		regs.R11 = regs.R17;
		/* 821C55C8h case   30:*/		return 0x821C55CC;
		  /* 821C55CCh */ case   31:  		/* bc 4, CR0_EQ, 8 */
		/* 821C55CCh case   31:*/		if ( !regs.CR[0].eq ) { return 0x821C55D4;  }
		/* 821C55CCh case   31:*/		return 0x821C55D0;
	}
	return 0x821C55D0;
} // Block from 821C5550h-821C55D0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821C55D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C55D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C55D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C55D0);
		  /* 821C55D0h */ case    0:  		/* li R11, 0 */
		/* 821C55D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C55D0h case    0:*/		return 0x821C55D4;
	}
	return 0x821C55D4;
} // Block from 821C55D0h-821C55D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C55D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C55D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C55D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C55D4);
		  /* 821C55D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C55D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C55D4h case    0:*/		return 0x821C55D8;
		  /* 821C55D8h */ case    1:  		/* bc 12, CR0_EQ, 356 */
		/* 821C55D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C573C;  }
		/* 821C55D8h case    1:*/		return 0x821C55DC;
		  /* 821C55DCh */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821C55DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821C55DCh case    2:*/		return 0x821C55E0;
		  /* 821C55E0h */ case    3:  		/* li R30, 0 */
		/* 821C55E0h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821C55E0h case    3:*/		return 0x821C55E4;
		  /* 821C55E4h */ case    4:  		/* rlwinm R29, R11, 7, 29, 31 */
		/* 821C55E4h case    4:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R29,regs.R11);
		/* 821C55E4h case    4:*/		return 0x821C55E8;
		  /* 821C55E8h */ case    5:  		/* andi. R26, R11, 25 */
		/* 821C55E8h case    5:*/		cpu::op::andi<1>(regs,&regs.R26,regs.R11,0x19);
		/* 821C55E8h case    5:*/		return 0x821C55EC;
		  /* 821C55ECh */ case    6:  		/* cmplwi CR6, R29, 1 */
		/* 821C55ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 821C55ECh case    6:*/		return 0x821C55F0;
		  /* 821C55F0h */ case    7:  		/* bc 4, CR6_GT, 84 */
		/* 821C55F0h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821C5644;  }
		/* 821C55F0h case    7:*/		return 0x821C55F4;
		  /* 821C55F4h */ case    8:  		/* mr R6, R29 */
		/* 821C55F4h case    8:*/		regs.R6 = regs.R29;
		/* 821C55F4h case    8:*/		return 0x821C55F8;
		  /* 821C55F8h */ case    9:  		/* li R5, 0 */
		/* 821C55F8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C55F8h case    9:*/		return 0x821C55FC;
		  /* 821C55FCh */ case   10:  		/* mr R4, R25 */
		/* 821C55FCh case   10:*/		regs.R4 = regs.R25;
		/* 821C55FCh case   10:*/		return 0x821C5600;
		  /* 821C5600h */ case   11:  		/* mr R3, R19 */
		/* 821C5600h case   11:*/		regs.R3 = regs.R19;
		/* 821C5600h case   11:*/		return 0x821C5604;
		  /* 821C5604h */ case   12:  		/* bl 390396 */
		/* 821C5604h case   12:*/		regs.LR = 0x821C5608; return 0x82224B00;
		/* 821C5604h case   12:*/		return 0x821C5608;
		  /* 821C5608h */ case   13:  		/* lwz R8, <#[R25 + 28]> */
		/* 821C5608h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821C5608h case   13:*/		return 0x821C560C;
		  /* 821C560Ch */ case   14:  		/* rlwinm R9, R3, 0, 0, 30 */
		/* 821C560Ch case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R3);
		/* 821C560Ch case   14:*/		return 0x821C5610;
		  /* 821C5610h */ case   15:  		/* addi R11, R25, 24 */
		/* 821C5610h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x18);
		/* 821C5610h case   15:*/		return 0x821C5614;
		  /* 821C5614h */ case   16:  		/* mr R30, R3 */
		/* 821C5614h case   16:*/		regs.R30 = regs.R3;
		/* 821C5614h case   16:*/		return 0x821C5618;
		  /* 821C5618h */ case   17:  		/* addi R10, R11, 4 */
		/* 821C5618h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C5618h case   17:*/		return 0x821C561C;
		  /* 821C561Ch */ case   18:  		/* addi R11, R9, 36 */
		/* 821C561Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x24);
		/* 821C561Ch case   18:*/		return 0x821C5620;
		  /* 821C5620h */ case   19:  		/* stw R8, <#[R9 + 40]> */
		/* 821C5620h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000028) );
		/* 821C5620h case   19:*/		return 0x821C5624;
		  /* 821C5624h */ case   20:  		/* ori R7, R10, 1 */
		/* 821C5624h case   20:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821C5624h case   20:*/		return 0x821C5628;
		  /* 821C5628h */ case   21:  		/* lwz R8, <#[R25 + 28]> */
		/* 821C5628h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821C5628h case   21:*/		return 0x821C562C;
		  /* 821C562Ch */ case   22:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C562Ch case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C562Ch case   22:*/		return 0x821C5630;
		  /* 821C5630h */ case   23:  		/* addi R10, R11, 4 */
		/* 821C5630h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C5630h case   23:*/		return 0x821C5634;
		  /* 821C5634h */ case   24:  		/* addi R11, R11, -36 */
		/* 821C5634h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFDC);
		/* 821C5634h case   24:*/		return 0x821C5638;
		  /* 821C5638h */ case   25:  		/* stw R10, <#[R8 + 36]> */
		/* 821C5638h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000024) );
		/* 821C5638h case   25:*/		return 0x821C563C;
		  /* 821C563Ch */ case   26:  		/* stw R7, <#[R9 + 36]> */
		/* 821C563Ch case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000024) );
		/* 821C563Ch case   26:*/		return 0x821C5640;
		  /* 821C5640h */ case   27:  		/* stw R11, <#[R25 + 28]> */
		/* 821C5640h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821C5640h case   27:*/		return 0x821C5644;
	}
	return 0x821C5644;
} // Block from 821C55D4h-821C5644h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821C5644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5644);
		  /* 821C5644h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821C5644h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C5644h case    0:*/		return 0x821C5648;
		  /* 821C5648h */ case    1:  		/* bc 12, CR6_EQ, 160 */
		/* 821C5648h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C56E8;  }
		/* 821C5648h case    1:*/		return 0x821C564C;
		  /* 821C564Ch */ case    2:  		/* li R28, 0 */
		/* 821C564Ch case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C564Ch case    2:*/		return 0x821C5650;
		  /* 821C5650h */ case    3:  		/* addi R27, R30, 44 */
		/* 821C5650h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x2C);
		/* 821C5650h case    3:*/		return 0x821C5654;
		  /* 821C5654h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821C5654h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821C5654h case    4:*/		return 0x821C5658;
		  /* 821C5658h */ case    5:  		/* mr R7, R26 */
		/* 821C5658h case    5:*/		regs.R7 = regs.R26;
		/* 821C5658h case    5:*/		return 0x821C565C;
		  /* 821C565Ch */ case    6:  		/* mr R5, R24 */
		/* 821C565Ch case    6:*/		regs.R5 = regs.R24;
		/* 821C565Ch case    6:*/		return 0x821C5660;
		  /* 821C5660h */ case    7:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821C5660h case    7:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821C5660h case    7:*/		return 0x821C5664;
		  /* 821C5664h */ case    8:  		/* mr R4, R25 */
		/* 821C5664h case    8:*/		regs.R4 = regs.R25;
		/* 821C5664h case    8:*/		return 0x821C5668;
		  /* 821C5668h */ case    9:  		/* srw R11, R11, R28 */
		/* 821C5668h case    9:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821C5668h case    9:*/		return 0x821C566C;
		  /* 821C566Ch */ case   10:  		/* rlwinm R6, R11, 0, 30, 31 */
		/* 821C566Ch case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R11);
		/* 821C566Ch case   10:*/		return 0x821C5670;
		  /* 821C5670h */ case   11:  		/* mr R3, R19 */
		/* 821C5670h case   11:*/		regs.R3 = regs.R19;
		/* 821C5670h case   11:*/		return 0x821C5674;
		  /* 821C5674h */ case   12:  		/* bl -60468 */
		/* 821C5674h case   12:*/		regs.LR = 0x821C5678; return 0x821B6A40;
		/* 821C5674h case   12:*/		return 0x821C5678;
		  /* 821C5678h */ case   13:  		/* mr R4, R3 */
		/* 821C5678h case   13:*/		regs.R4 = regs.R3;
		/* 821C5678h case   13:*/		return 0x821C567C;
		  /* 821C567Ch */ case   14:  		/* cmplwi CR6, R30, 0 */
		/* 821C567Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C567Ch case   14:*/		return 0x821C5680;
		  /* 821C5680h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 821C5680h case   15:*/		if ( regs.CR[6].eq ) { return 0x821C56A0;  }
		/* 821C5680h case   15:*/		return 0x821C5684;
		  /* 821C5684h */ case   16:  		/* mr R3, R19 */
		/* 821C5684h case   16:*/		regs.R3 = regs.R19;
		/* 821C5684h case   16:*/		return 0x821C5688;
		  /* 821C5688h */ case   17:  		/* bl -317064 */
		/* 821C5688h case   17:*/		regs.LR = 0x821C568C; return 0x82178000;
		/* 821C5688h case   17:*/		return 0x821C568C;
		  /* 821C568Ch */ case   18:  		/* mr R4, R3 */
		/* 821C568Ch case   18:*/		regs.R4 = regs.R3;
		/* 821C568Ch case   18:*/		return 0x821C5690;
		  /* 821C5690h */ case   19:  		/* mr R3, R30 */
		/* 821C5690h case   19:*/		regs.R3 = regs.R30;
		/* 821C5690h case   19:*/		return 0x821C5694;
		  /* 821C5694h */ case   20:  		/* bl -316620 */
		/* 821C5694h case   20:*/		regs.LR = 0x821C5698; return 0x821781C8;
		/* 821C5694h case   20:*/		return 0x821C5698;
		  /* 821C5698h */ case   21:  		/* stw R3, <#[R27]> */
		/* 821C5698h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 821C5698h case   21:*/		return 0x821C569C;
		  /* 821C569Ch */ case   22:  		/* b 60 */
		/* 821C569Ch case   22:*/		return 0x821C56D8;
		/* 821C569Ch case   22:*/		return 0x821C56A0;
	}
	return 0x821C56A0;
} // Block from 821C5644h-821C56A0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C56A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C56A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C56A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C56A0);
		  /* 821C56A0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C56A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C56A0h case    0:*/		return 0x821C56A4;
		  /* 821C56A4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C56A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C56A4h case    1:*/		return 0x821C56A8;
		  /* 821C56A8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C56A8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C56A8h case    2:*/		return 0x821C56AC;
		  /* 821C56ACh */ case    3:  		/* b 12 */
		/* 821C56ACh case    3:*/		return 0x821C56B8;
		/* 821C56ACh case    3:*/		return 0x821C56B0;
		  /* 821C56B0h */ case    4:  		/* addi R11, R10, 8 */
		/* 821C56B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C56B0h case    4:*/		return 0x821C56B4;
		  /* 821C56B4h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C56B4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C56B4h case    5:*/		return 0x821C56B8;
	}
	return 0x821C56B8;
} // Block from 821C56A0h-821C56B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C56B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C56B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C56B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C56B8);
		  /* 821C56B8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821C56B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821C56B8h case    0:*/		return 0x821C56BC;
		  /* 821C56BCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C56BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C56B0;  }
		/* 821C56BCh case    1:*/		return 0x821C56C0;
		  /* 821C56C0h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C56C0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C56C0h case    2:*/		return 0x821C56C4;
		  /* 821C56C4h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C56C4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C56C4h case    3:*/		return 0x821C56C8;
		  /* 821C56C8h */ case    4:  		/* lwz R11, <#[R4 + 4]> */
		/* 821C56C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821C56C8h case    4:*/		return 0x821C56CC;
		  /* 821C56CCh */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821C56CCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C56CCh case    5:*/		return 0x821C56D0;
		  /* 821C56D0h */ case    6:  		/* stw R31, <#[R4 + 4]> */
		/* 821C56D0h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R4 + 0x00000004) );
		/* 821C56D0h case    6:*/		return 0x821C56D4;
		  /* 821C56D4h */ case    7:  		/* stw R4, <#[R31 + 12]> */
		/* 821C56D4h case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C56D4h case    7:*/		return 0x821C56D8;
	}
	return 0x821C56D8;
} // Block from 821C56B8h-821C56D8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C56D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C56D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C56D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C56D8);
		  /* 821C56D8h */ case    0:  		/* addic. R29, R29, -1 */
		/* 821C56D8h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821C56D8h case    0:*/		return 0x821C56DC;
		  /* 821C56DCh */ case    1:  		/* addi R27, R27, 4 */
		/* 821C56DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821C56DCh case    1:*/		return 0x821C56E0;
		  /* 821C56E0h */ case    2:  		/* addi R28, R28, 2 */
		/* 821C56E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x2);
		/* 821C56E0h case    2:*/		return 0x821C56E4;
		  /* 821C56E4h */ case    3:  		/* bc 4, CR0_EQ, -144 */
		/* 821C56E4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5654;  }
		/* 821C56E4h case    3:*/		return 0x821C56E8;
	}
	return 0x821C56E8;
} // Block from 821C56D8h-821C56E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C56E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C56E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C56E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C56E8);
		  /* 821C56E8h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821C56E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C56E8h case    0:*/		return 0x821C56EC;
		  /* 821C56ECh */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 821C56ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821C5728;  }
		/* 821C56ECh case    1:*/		return 0x821C56F0;
		  /* 821C56F0h */ case    2:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C56F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C56F0h case    2:*/		return 0x821C56F4;
		  /* 821C56F4h */ case    3:  		/* addi R11, R11, 4 */
		/* 821C56F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C56F4h case    3:*/		return 0x821C56F8;
		  /* 821C56F8h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821C56F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C56F8h case    4:*/		return 0x821C56FC;
		  /* 821C56FCh */ case    5:  		/* b 12 */
		/* 821C56FCh case    5:*/		return 0x821C5708;
		/* 821C56FCh case    5:*/		return 0x821C5700;
		  /* 821C5700h */ case    6:  		/* addi R11, R10, 8 */
		/* 821C5700h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C5700h case    6:*/		return 0x821C5704;
		  /* 821C5704h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C5704h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C5704h case    7:*/		return 0x821C5708;
	}
	return 0x821C5708;
} // Block from 821C56E8h-821C5708h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C5708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5708);
		  /* 821C5708h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821C5708h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821C5708h case    0:*/		return 0x821C570C;
		  /* 821C570Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C570Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C5700;  }
		/* 821C570Ch case    1:*/		return 0x821C5710;
		  /* 821C5710h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C5710h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C5710h case    2:*/		return 0x821C5714;
		  /* 821C5714h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C5714h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5714h case    3:*/		return 0x821C5718;
		  /* 821C5718h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C5718h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C5718h case    4:*/		return 0x821C571C;
		  /* 821C571Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821C571Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C571Ch case    5:*/		return 0x821C5720;
		  /* 821C5720h */ case    6:  		/* stw R31, <#[R30 + 4]> */
		/* 821C5720h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821C5720h case    6:*/		return 0x821C5724;
		  /* 821C5724h */ case    7:  		/* stw R30, <#[R31 + 12]> */
		/* 821C5724h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C5724h case    7:*/		return 0x821C5728;
	}
	return 0x821C5728;
} // Block from 821C5708h-821C5728h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C5728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5728);
		  /* 821C5728h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821C5728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821C5728h case    0:*/		return 0x821C572C;
		  /* 821C572Ch */ case    1:  		/* rlwimi R11, R16, 7, 19, 26 */
		/* 821C572Ch case    1:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R16);
		/* 821C572Ch case    1:*/		return 0x821C5730;
		  /* 821C5730h */ case    2:  		/* subf R10, R26, R11 */
		/* 821C5730h case    2:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R26,regs.R11);
		/* 821C5730h case    2:*/		return 0x821C5734;
		  /* 821C5734h */ case    3:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 821C5734h case    3:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 821C5734h case    3:*/		return 0x821C5738;
		  /* 821C5738h */ case    4:  		/* stw R10, <#[R31]> */
		/* 821C5738h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821C5738h case    4:*/		return 0x821C573C;
	}
	return 0x821C573C;
} // Block from 821C5728h-821C573Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C573Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C573C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C573C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C573C);
		  /* 821C573Ch */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821C573Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821C573Ch case    0:*/		return 0x821C5740;
		  /* 821C5740h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821C5740h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821C5740h case    1:*/		return 0x821C5744;
		  /* 821C5744h */ case    2:  		/* bc 4, CR6_EQ, -476 */
		/* 821C5744h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C5568;  }
		/* 821C5744h case    2:*/		return 0x821C5748;
		  /* 821C5748h */ case    3:  		/* addi R21, R31, 4 */
		/* 821C5748h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R31,0x4);
		/* 821C5748h case    3:*/		return 0x821C574C;
		  /* 821C574Ch */ case    4:  		/* b -484 */
		/* 821C574Ch case    4:*/		return 0x821C5568;
		/* 821C574Ch case    4:*/		return 0x821C5750;
	}
	return 0x821C5750;
} // Block from 821C573Ch-821C5750h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5750);
		  /* 821C5750h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821C5750h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821C5750h case    0:*/		return 0x821C5754;
		  /* 821C5754h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C5754h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C5754h case    1:*/		return 0x821C5758;
		  /* 821C5758h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5758h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5758h case    2:*/		return 0x821C575C;
		  /* 821C575Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C575Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C576C;  }
		/* 821C575Ch case    3:*/		return 0x821C5760;
		  /* 821C5760h */ case    4:  		/* mr R23, R11 */
		/* 821C5760h case    4:*/		regs.R23 = regs.R11;
		/* 821C5760h case    4:*/		return 0x821C5764;
		  /* 821C5764h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C5764h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5764h case    5:*/		return 0x821C5768;
		  /* 821C5768h */ case    6:  		/* bc 4, CR6_EQ, -524 */
		/* 821C5768h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C555C;  }
		/* 821C5768h case    6:*/		return 0x821C576C;
	}
	return 0x821C576C;
} // Block from 821C5750h-821C576Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C576Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C576C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C576C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C576C);
		  /* 821C576Ch */ case    0:  		/* addi R10, R20, 32 */
		/* 821C576Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0x20);
		/* 821C576Ch case    0:*/		return 0x821C5770;
		  /* 821C5770h */ case    1:  		/* cmplw CR6, R22, R10 */
		/* 821C5770h case    1:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R10);
		/* 821C5770h case    1:*/		return 0x821C5774;
		  /* 821C5774h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821C5774h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C57C4;  }
		/* 821C5774h case    2:*/		return 0x821C5778;
		  /* 821C5778h */ case    3:  		/* addi R11, R20, 24 */
		/* 821C5778h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x18);
		/* 821C5778h case    3:*/		return 0x821C577C;
		  /* 821C577Ch */ case    4:  		/* cmplw CR6, R22, R11 */
		/* 821C577Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 821C577Ch case    4:*/		return 0x821C5780;
		  /* 821C5780h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821C5780h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C57A8;  }
		/* 821C5780h case    5:*/		return 0x821C5784;
		  /* 821C5784h */ case    6:  		/* lwz R9, <#[R20 + 28]> */
		/* 821C5784h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x0000001C) );
		/* 821C5784h case    6:*/		return 0x821C5788;
		  /* 821C5788h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821C5788h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821C5788h case    7:*/		return 0x821C578C;
		  /* 821C578Ch */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 821C578Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C57A8;  }
		/* 821C578Ch case    8:*/		return 0x821C5790;
		  /* 821C5790h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821C5790h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5790h case    9:*/		return 0x821C5794;
		  /* 821C5794h */ case   10:  		/* mr R22, R11 */
		/* 821C5794h case   10:*/		regs.R22 = regs.R11;
		/* 821C5794h case   10:*/		return 0x821C5798;
		  /* 821C5798h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821C5798h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821C5798h case   11:*/		return 0x821C579C;
		  /* 821C579Ch */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821C579Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821C57C4;  }
		/* 821C579Ch case   12:*/		return 0x821C57A0;
		  /* 821C57A0h */ case   13:  		/* mr R23, R10 */
		/* 821C57A0h case   13:*/		regs.R23 = regs.R10;
		/* 821C57A0h case   13:*/		return 0x821C57A4;
		  /* 821C57A4h */ case   14:  		/* b 24 */
		/* 821C57A4h case   14:*/		return 0x821C57BC;
		/* 821C57A4h case   14:*/		return 0x821C57A8;
	}
	return 0x821C57A8;
} // Block from 821C576Ch-821C57A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C57A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57A8);
		  /* 821C57A8h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821C57A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821C57A8h case    0:*/		return 0x821C57AC;
		  /* 821C57ACh */ case    1:  		/* mr R22, R10 */
		/* 821C57ACh case    1:*/		regs.R22 = regs.R10;
		/* 821C57ACh case    1:*/		return 0x821C57B0;
		  /* 821C57B0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C57B0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C57B0h case    2:*/		return 0x821C57B4;
		  /* 821C57B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C57B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C57C4;  }
		/* 821C57B4h case    3:*/		return 0x821C57B8;
	}
	return 0x821C57B8;
} // Block from 821C57A8h-821C57B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C57B8h
// Function '?CombineInputs@Compiler@D3DXShader@@AAAXIPAVInstruction@2@II0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57B8);
		  /* 821C57B8h */ case    0:  		/* mr R23, R11 */
		/* 821C57B8h case    0:*/		regs.R23 = regs.R11;
		/* 821C57B8h case    0:*/		return 0x821C57BC;
	}
	return 0x821C57BC;
} // Block from 821C57B8h-821C57BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C57BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57BC);
		  /* 821C57BCh */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821C57BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821C57BCh case    0:*/		return 0x821C57C0;
		  /* 821C57C0h */ case    1:  		/* bc 4, CR6_EQ, -612 */
		/* 821C57C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C555C;  }
		/* 821C57C0h case    1:*/		return 0x821C57C4;
	}
	return 0x821C57C4;
} // Block from 821C57BCh-821C57C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C57C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57C4);
		  /* 821C57C4h */ case    0:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 821C57C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 821C57C4h case    0:*/		return 0x821C57C8;
		  /* 821C57C8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C57C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C57C8h case    1:*/		return 0x821C57CC;
		  /* 821C57CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C57CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C57CCh case    2:*/		return 0x821C57D0;
		  /* 821C57D0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C57D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C57E0;  }
		/* 821C57D0h case    3:*/		return 0x821C57D4;
		  /* 821C57D4h */ case    4:  		/* mr R20, R11 */
		/* 821C57D4h case    4:*/		regs.R20 = regs.R11;
		/* 821C57D4h case    4:*/		return 0x821C57D8;
		  /* 821C57D8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C57D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C57D8h case    5:*/		return 0x821C57DC;
		  /* 821C57DCh */ case    6:  		/* bc 4, CR6_EQ, -784 */
		/* 821C57DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C54CC;  }
		/* 821C57DCh case    6:*/		return 0x821C57E0;
	}
	return 0x821C57E0;
} // Block from 821C57C4h-821C57E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C57E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57E0);
		  /* 821C57E0h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C57E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C57E0h case    0:*/		return 0x821C57E4;
		  /* 821C57E4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C57E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C57E4h case    1:*/		return 0x821C57E8;
		  /* 821C57E8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C57E8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C57E8h case    2:*/		return 0x821C57EC;
		  /* 821C57ECh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C57ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C57FC;  }
		/* 821C57ECh case    3:*/		return 0x821C57F0;
		  /* 821C57F0h */ case    4:  		/* mr R25, R11 */
		/* 821C57F0h case    4:*/		regs.R25 = regs.R11;
		/* 821C57F0h case    4:*/		return 0x821C57F4;
		  /* 821C57F4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C57F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C57F4h case    5:*/		return 0x821C57F8;
		  /* 821C57F8h */ case    6:  		/* bc 4, CR6_EQ, -848 */
		/* 821C57F8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C54A8;  }
		/* 821C57F8h case    6:*/		return 0x821C57FC;
	}
	return 0x821C57FC;
} // Block from 821C57E0h-821C57FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C57FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C57FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C57FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C57FC);
		  /* 821C57FCh */ case    0:  		/* lwz R10, <#[R19 + 108]> */
		/* 821C57FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x0000006C) );
		/* 821C57FCh case    0:*/		return 0x821C5800;
		  /* 821C5800h */ case    1:  		/* li R20, 0 */
		/* 821C5800h case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821C5800h case    1:*/		return 0x821C5804;
		  /* 821C5804h */ case    2:  		/* lwz R11, <#[R19 + 4]> */
		/* 821C5804h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821C5804h case    2:*/		return 0x821C5808;
		  /* 821C5808h */ case    3:  		/* addi R21, R10, 1 */
		/* 821C5808h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x1);
		/* 821C5808h case    3:*/		return 0x821C580C;
		  /* 821C580Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C580Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C580Ch case    4:*/		return 0x821C5810;
		  /* 821C5810h */ case    5:  		/* stw R21, <#[R19 + 108]> */
		/* 821C5810h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R19 + 0x0000006C) );
		/* 821C5810h case    5:*/		return 0x821C5814;
		  /* 821C5814h */ case    6:  		/* bc 4, CR0_EQ, 688 */
		/* 821C5814h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C5AC4;  }
		/* 821C5814h case    6:*/		return 0x821C5818;
		  /* 821C5818h */ case    7:  		/* mr R23, R11 */
		/* 821C5818h case    7:*/		regs.R23 = regs.R11;
		/* 821C5818h case    7:*/		return 0x821C581C;
		  /* 821C581Ch */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821C581Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C581Ch case    8:*/		return 0x821C5820;
		  /* 821C5820h */ case    9:  		/* bc 12, CR0_EQ, 676 */
		/* 821C5820h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C5AC4;  }
		/* 821C5820h case    9:*/		return 0x821C5824;
		  /* 821C5824h */ case   10:  		/* lwz R11, <#[R23 + 48]> */
		/* 821C5824h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821C5824h case   10:*/		return 0x821C5828;
		  /* 821C5828h */ case   11:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821C5828h case   11:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821C5828h case   11:*/		return 0x821C582C;
		  /* 821C582Ch */ case   12:  		/* bc 12, CR0_EQ, 636 */
		/* 821C582Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821C5AA8;  }
		/* 821C582Ch case   12:*/		return 0x821C5830;
		  /* 821C5830h */ case   13:  		/* stw R21, <#[R23 + 44]> */
		/* 821C5830h case   13:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R23 + 0x0000002C) );
		/* 821C5830h case   13:*/		return 0x821C5834;
		  /* 821C5834h */ case   14:  		/* lwz R11, <#[R23 + 20]> */
		/* 821C5834h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 821C5834h case   14:*/		return 0x821C5838;
		  /* 821C5838h */ case   15:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5838h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5838h case   15:*/		return 0x821C583C;
		  /* 821C583Ch */ case   16:  		/* bc 4, CR0_EQ, 620 */
		/* 821C583Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x821C5AA8;  }
		/* 821C583Ch case   16:*/		return 0x821C5840;
		  /* 821C5840h */ case   17:  		/* mr R25, R11 */
		/* 821C5840h case   17:*/		regs.R25 = regs.R11;
		/* 821C5840h case   17:*/		return 0x821C5844;
		  /* 821C5844h */ case   18:  		/* cmplwi CR0, R11, 0 */
		/* 821C5844h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C5844h case   18:*/		return 0x821C5848;
		  /* 821C5848h */ case   19:  		/* bc 12, CR0_EQ, 608 */
		/* 821C5848h case   19:*/		if ( regs.CR[0].eq ) { return 0x821C5AA8;  }
		/* 821C5848h case   19:*/		return 0x821C584C;
		  /* 821C584Ch */ case   20:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C584Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C584Ch case   20:*/		return 0x821C5850;
		  /* 821C5850h */ case   21:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C5850h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C5850h case   21:*/		return 0x821C5854;
		  /* 821C5854h */ case   22:  		/* cmplwi CR6, R11, 14336 */
		/* 821C5854h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821C5854h case   22:*/		return 0x821C5858;
		  /* 821C5858h */ case   23:  		/* bc 4, CR6_EQ, 564 */
		/* 821C5858h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821C5A8C;  }
		/* 821C5858h case   23:*/		return 0x821C585C;
		  /* 821C585Ch */ case   24:  		/* lwz R22, <#[R23 + 8]> */
		/* 821C585Ch case   24:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R23 + 0x00000008) );
		/* 821C585Ch case   24:*/		return 0x821C5860;
		  /* 821C5860h */ case   25:  		/* cmplwi CR6, R22, 0 */
		/* 821C5860h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C5860h case   25:*/		return 0x821C5864;
		  /* 821C5864h */ case   26:  		/* bc 12, CR6_EQ, 552 */
		/* 821C5864h case   26:*/		if ( regs.CR[6].eq ) { return 0x821C5A8C;  }
		/* 821C5864h case   26:*/		return 0x821C5868;
		  /* 821C5868h */ case   27:  		/* lwz R26, <#[R22 + 4]> */
		/* 821C5868h case   27:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R22 + 0x00000004) );
		/* 821C5868h case   27:*/		return 0x821C586C;
		  /* 821C586Ch */ case   28:  		/* mr R24, R26 */
		/* 821C586Ch case   28:*/		regs.R24 = regs.R26;
		/* 821C586Ch case   28:*/		return 0x821C5870;
		  /* 821C5870h */ case   29:  		/* cmplwi CR6, R26, 0 */
		/* 821C5870h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C5870h case   29:*/		return 0x821C5874;
		  /* 821C5874h */ case   30:  		/* bc 12, CR6_EQ, 528 */
		/* 821C5874h case   30:*/		if ( regs.CR[6].eq ) { return 0x821C5A84;  }
		/* 821C5874h case   30:*/		return 0x821C5878;
		  /* 821C5878h */ case   31:  		/* lwz R11, <#[R24 + 48]> */
		/* 821C5878h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821C5878h case   31:*/		return 0x821C587C;
		  /* 821C587Ch */ case   32:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821C587Ch case   32:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821C587Ch case   32:*/		return 0x821C5880;
		  /* 821C5880h */ case   33:  		/* bc 4, CR0_EQ, 16 */
		/* 821C5880h case   33:*/		if ( !regs.CR[0].eq ) { return 0x821C5890;  }
		/* 821C5880h case   33:*/		return 0x821C5884;
		  /* 821C5884h */ case   34:  		/* lwz R24, <#[R24 + 52]> */
		/* 821C5884h case   34:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R24 + 0x00000034) );
		/* 821C5884h case   34:*/		return 0x821C5888;
		  /* 821C5888h */ case   35:  		/* cmplwi CR6, R24, 0 */
		/* 821C5888h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821C5888h case   35:*/		return 0x821C588C;
		  /* 821C588Ch */ case   36:  		/* bc 4, CR6_EQ, -20 */
		/* 821C588Ch case   36:*/		if ( !regs.CR[6].eq ) { return 0x821C5878;  }
		/* 821C588Ch case   36:*/		return 0x821C5890;
	}
	return 0x821C5890;
} // Block from 821C57FCh-821C5890h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821C5890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5890);
		  /* 821C5890h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821C5890h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821C5890h case    0:*/		return 0x821C5894;
		  /* 821C5894h */ case    1:  		/* bc 12, CR6_EQ, 496 */
		/* 821C5894h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C5A84;  }
		/* 821C5894h case    1:*/		return 0x821C5898;
		  /* 821C5898h */ case    2:  		/* li R7, 1 */
		/* 821C5898h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C5898h case    2:*/		return 0x821C589C;
		  /* 821C589Ch */ case    3:  		/* li R6, 0 */
		/* 821C589Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C589Ch case    3:*/		return 0x821C58A0;
		  /* 821C58A0h */ case    4:  		/* mr R5, R26 */
		/* 821C58A0h case    4:*/		regs.R5 = regs.R26;
		/* 821C58A0h case    4:*/		return 0x821C58A4;
		  /* 821C58A4h */ case    5:  		/* mr R4, R25 */
		/* 821C58A4h case    5:*/		regs.R4 = regs.R25;
		/* 821C58A4h case    5:*/		return 0x821C58A8;
		  /* 821C58A8h */ case    6:  		/* mr R3, R19 */
		/* 821C58A8h case    6:*/		regs.R3 = regs.R19;
		/* 821C58A8h case    6:*/		return 0x821C58AC;
		  /* 821C58ACh */ case    7:  		/* bl 142420 */
		/* 821C58ACh case    7:*/		regs.LR = 0x821C58B0; return 0x821E8500;
		/* 821C58ACh case    7:*/		return 0x821C58B0;
		  /* 821C58B0h */ case    8:  		/* lwz R11, <#[R19 + 4]> */
		/* 821C58B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821C58B0h case    8:*/		return 0x821C58B4;
		  /* 821C58B4h */ case    9:  		/* lwz R5, <#[R3 + 12]> */
		/* 821C58B4h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C58B4h case    9:*/		return 0x821C58B8;
		  /* 821C58B8h */ case   10:  		/* mr R31, R3 */
		/* 821C58B8h case   10:*/		regs.R31 = regs.R3;
		/* 821C58B8h case   10:*/		return 0x821C58BC;
		  /* 821C58BCh */ case   11:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C58BCh case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C58BCh case   11:*/		return 0x821C58C0;
		  /* 821C58C0h */ case   12:  		/* addic R10, R10, -1 */
		/* 821C58C0h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C58C0h case   12:*/		return 0x821C58C4;
		  /* 821C58C4h */ case   13:  		/* subfe R10, R10, R10 */
		/* 821C58C4h case   13:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C58C4h case   13:*/		return 0x821C58C8;
		  /* 821C58C8h */ case   14:  		/* and R10, R10, R11 */
		/* 821C58C8h case   14:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821C58C8h case   14:*/		return 0x821C58CC;
		  /* 821C58CCh */ case   15:  		/* lwz R11, <#[R5 + 28]> */
		/* 821C58CCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 821C58CCh case   15:*/		return 0x821C58D0;
		  /* 821C58D0h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821C58D0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C58D0h case   16:*/		return 0x821C58D4;
		  /* 821C58D4h */ case   17:  		/* bc 12, CR6_EQ, 432 */
		/* 821C58D4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C5A84;  }
		/* 821C58D4h case   17:*/		return 0x821C58D8;
		  /* 821C58D8h */ case   18:  		/* lwz R10, <#[R24 + 48]> */
		/* 821C58D8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000030) );
		/* 821C58D8h case   18:*/		return 0x821C58DC;
		  /* 821C58DCh */ case   19:  		/* lwz R9, <#[R11 + 40]> */
		/* 821C58DCh case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821C58DCh case   19:*/		return 0x821C58E0;
		  /* 821C58E0h */ case   20:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821C58E0h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821C58E0h case   20:*/		return 0x821C58E4;
		  /* 821C58E4h */ case   21:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821C58E4h case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821C58E4h case   21:*/		return 0x821C58E8;
		  /* 821C58E8h */ case   22:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821C58E8h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821C58E8h case   22:*/		return 0x821C58EC;
		  /* 821C58ECh */ case   23:  		/* addi R11, R11, 1 */
		/* 821C58ECh case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C58ECh case   23:*/		return 0x821C58F0;
		  /* 821C58F0h */ case   24:  		/* slw R10, R17, R10 */
		/* 821C58F0h case   24:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R17,regs.R10);
		/* 821C58F0h case   24:*/		return 0x821C58F4;
		  /* 821C58F4h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C58F4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C58F4h case   25:*/		return 0x821C58F8;
		  /* 821C58F8h */ case   26:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821C58F8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821C58F8h case   26:*/		return 0x821C58FC;
		  /* 821C58FCh */ case   27:  		/* and. R11, R11, R10 */
		/* 821C58FCh case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C58FCh case   27:*/		return 0x821C5900;
		  /* 821C5900h */ case   28:  		/* bc 4, CR0_EQ, 388 */
		/* 821C5900h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821C5A84;  }
		/* 821C5900h case   28:*/		return 0x821C5904;
		  /* 821C5904h */ case   29:  		/* lwz R11, <#[R3]> */
		/* 821C5904h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C5904h case   29:*/		return 0x821C5908;
		  /* 821C5908h */ case   30:  		/* mr R4, R24 */
		/* 821C5908h case   30:*/		regs.R4 = regs.R24;
		/* 821C5908h case   30:*/		return 0x821C590C;
		  /* 821C590Ch */ case   31:  		/* mr R3, R19 */
		/* 821C590Ch case   31:*/		regs.R3 = regs.R19;
		/* 821C590Ch case   31:*/		return 0x821C5910;
		  /* 821C5910h */ case   32:  		/* andi. R28, R11, 25 */
		/* 821C5910h case   32:*/		cpu::op::andi<1>(regs,&regs.R28,regs.R11,0x19);
		/* 821C5910h case   32:*/		return 0x821C5914;
		  /* 821C5914h */ case   33:  		/* rlwinm R6, R11, 27, 30, 31 */
		/* 821C5914h case   33:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R6,regs.R11);
		/* 821C5914h case   33:*/		return 0x821C5918;
		  /* 821C5918h */ case   34:  		/* mr R7, R28 */
		/* 821C5918h case   34:*/		regs.R7 = regs.R28;
		/* 821C5918h case   34:*/		return 0x821C591C;
		  /* 821C591Ch */ case   35:  		/* bl -61148 */
		/* 821C591Ch case   35:*/		regs.LR = 0x821C5920; return 0x821B6A40;
		/* 821C591Ch case   35:*/		return 0x821C5920;
		  /* 821C5920h */ case   36:  		/* lwz R27, <#[R23 + 8]> */
		/* 821C5920h case   36:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R23 + 0x00000008) );
		/* 821C5920h case   36:*/		return 0x821C5924;
		  /* 821C5924h */ case   37:  		/* mr R30, R3 */
		/* 821C5924h case   37:*/		regs.R30 = regs.R3;
		/* 821C5924h case   37:*/		return 0x821C5928;
		  /* 821C5928h */ case   38:  		/* cmplwi CR6, R27, 0 */
		/* 821C5928h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C5928h case   38:*/		return 0x821C592C;
		  /* 821C592Ch */ case   39:  		/* bc 12, CR6_EQ, 136 */
		/* 821C592Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x821C59B4;  }
		/* 821C592Ch case   39:*/		return 0x821C5930;
		  /* 821C5930h */ case   40:  		/* lwz R29, <#[R27 + 4]> */
		/* 821C5930h case   40:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000004) );
		/* 821C5930h case   40:*/		return 0x821C5934;
		  /* 821C5934h */ case   41:  		/* cmplw CR6, R26, R29 */
		/* 821C5934h case   41:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R29);
		/* 821C5934h case   41:*/		return 0x821C5938;
		  /* 821C5938h */ case   42:  		/* bc 12, CR6_EQ, 36 */
		/* 821C5938h case   42:*/		if ( regs.CR[6].eq ) { return 0x821C595C;  }
		/* 821C5938h case   42:*/		return 0x821C593C;
		  /* 821C593Ch */ case   43:  		/* li R7, 1 */
		/* 821C593Ch case   43:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C593Ch case   43:*/		return 0x821C5940;
		  /* 821C5940h */ case   44:  		/* li R6, 0 */
		/* 821C5940h case   44:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C5940h case   44:*/		return 0x821C5944;
		  /* 821C5944h */ case   45:  		/* mr R5, R29 */
		/* 821C5944h case   45:*/		regs.R5 = regs.R29;
		/* 821C5944h case   45:*/		return 0x821C5948;
		  /* 821C5948h */ case   46:  		/* mr R4, R25 */
		/* 821C5948h case   46:*/		regs.R4 = regs.R25;
		/* 821C5948h case   46:*/		return 0x821C594C;
		  /* 821C594Ch */ case   47:  		/* mr R3, R19 */
		/* 821C594Ch case   47:*/		regs.R3 = regs.R19;
		/* 821C594Ch case   47:*/		return 0x821C5950;
		  /* 821C5950h */ case   48:  		/* bl 142256 */
		/* 821C5950h case   48:*/		regs.LR = 0x821C5954; return 0x821E8500;
		/* 821C5950h case   48:*/		return 0x821C5954;
		  /* 821C5954h */ case   49:  		/* cmplw CR6, R31, R3 */
		/* 821C5954h case   49:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821C5954h case   49:*/		return 0x821C5958;
		  /* 821C5958h */ case   50:  		/* bc 12, CR6_EQ, 12 */
		/* 821C5958h case   50:*/		if ( regs.CR[6].eq ) { return 0x821C5964;  }
		/* 821C5958h case   50:*/		return 0x821C595C;
	}
	return 0x821C595C;
} // Block from 821C5890h-821C595Ch (51 instructions)

//////////////////////////////////////////////////////
// Block at 821C595Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C595C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C595C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C595C);
		  /* 821C595Ch */ case    0:  		/* lwz R27, <#[R27 + 12]> */
		/* 821C595Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C595Ch case    0:*/		return 0x821C5960;
		  /* 821C5960h */ case    1:  		/* b -56 */
		/* 821C5960h case    1:*/		return 0x821C5928;
		/* 821C5960h case    1:*/		return 0x821C5964;
	}
	return 0x821C5964;
} // Block from 821C595Ch-821C5964h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5964);
		  /* 821C5964h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821C5964h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C5964h case    0:*/		return 0x821C5968;
		  /* 821C5968h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 821C5968h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C59B4;  }
		/* 821C5968h case    1:*/		return 0x821C596C;
		  /* 821C596Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821C596Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821C596Ch case    2:*/		return 0x821C5970;
		  /* 821C5970h */ case    3:  		/* mr R4, R30 */
		/* 821C5970h case    3:*/		regs.R4 = regs.R30;
		/* 821C5970h case    3:*/		return 0x821C5974;
		  /* 821C5974h */ case    4:  		/* mr R3, R19 */
		/* 821C5974h case    4:*/		regs.R3 = regs.R19;
		/* 821C5974h case    4:*/		return 0x821C5978;
		  /* 821C5978h */ case    5:  		/* rlwinm R31, R11, 0, 27, 31 */
		/* 821C5978h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R11);
		/* 821C5978h case    5:*/		return 0x821C597C;
		  /* 821C597Ch */ case    6:  		/* bl -317820 */
		/* 821C597Ch case    6:*/		regs.LR = 0x821C5980; return 0x82178000;
		/* 821C597Ch case    6:*/		return 0x821C5980;
		  /* 821C5980h */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821C5980h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C5980h case    7:*/		return 0x821C5984;
		  /* 821C5984h */ case    8:  		/* subf R4, R28, R31 */
		/* 821C5984h case    8:*/		cpu::op::subf<0>(regs,&regs.R4,regs.R28,regs.R31);
		/* 821C5984h case    8:*/		return 0x821C5988;
		  /* 821C5988h */ case    9:  		/* rlwimi R11, R17, 25, 4, 6 */
		/* 821C5988h case    9:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R17);
		/* 821C5988h case    9:*/		return 0x821C598C;
		  /* 821C598Ch */ case   10:  		/* mr R30, R3 */
		/* 821C598Ch case   10:*/		regs.R30 = regs.R3;
		/* 821C598Ch case   10:*/		return 0x821C5990;
		  /* 821C5990h */ case   11:  		/* stw R11, <#[R3]> */
		/* 821C5990h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C5990h case   11:*/		return 0x821C5994;
		  /* 821C5994h */ case   12:  		/* bl -319188 */
		/* 821C5994h case   12:*/		regs.LR = 0x821C5998; return 0x82177AC0;
		/* 821C5994h case   12:*/		return 0x821C5998;
		  /* 821C5998h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 821C5998h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5998h case   13:*/		return 0x821C599C;
		  /* 821C599Ch */ case   14:  		/* mr R3, R25 */
		/* 821C599Ch case   14:*/		regs.R3 = regs.R25;
		/* 821C599Ch case   14:*/		return 0x821C59A0;
		  /* 821C59A0h */ case   15:  		/* rlwimi R11, R16, 7, 19, 26 */
		/* 821C59A0h case   15:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R16);
		/* 821C59A0h case   15:*/		return 0x821C59A4;
		  /* 821C59A4h */ case   16:  		/* mr R4, R30 */
		/* 821C59A4h case   16:*/		regs.R4 = regs.R30;
		/* 821C59A4h case   16:*/		return 0x821C59A8;
		  /* 821C59A8h */ case   17:  		/* stw R11, <#[R30]> */
		/* 821C59A8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C59A8h case   17:*/		return 0x821C59AC;
		  /* 821C59ACh */ case   18:  		/* bl -317412 */
		/* 821C59ACh case   18:*/		regs.LR = 0x821C59B0; return 0x821781C8;
		/* 821C59ACh case   18:*/		return 0x821C59B0;
		  /* 821C59B0h */ case   19:  		/* b 80 */
		/* 821C59B0h case   19:*/		return 0x821C5A00;
		/* 821C59B0h case   19:*/		return 0x821C59B4;
	}
	return 0x821C59B4;
} // Block from 821C5964h-821C59B4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C59B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C59B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C59B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C59B4);
		  /* 821C59B4h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C59B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C59B4h case    0:*/		return 0x821C59B8;
		  /* 821C59B8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821C59B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C59B8h case    1:*/		return 0x821C59BC;
		  /* 821C59BCh */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821C59BCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C59BCh case    2:*/		return 0x821C59C0;
		  /* 821C59C0h */ case    3:  		/* b 12 */
		/* 821C59C0h case    3:*/		return 0x821C59CC;
		/* 821C59C0h case    3:*/		return 0x821C59C4;
		  /* 821C59C4h */ case    4:  		/* addi R11, R10, 8 */
		/* 821C59C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C59C4h case    4:*/		return 0x821C59C8;
		  /* 821C59C8h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C59C8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C59C8h case    5:*/		return 0x821C59CC;
	}
	return 0x821C59CC;
} // Block from 821C59B4h-821C59CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C59CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C59CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C59CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C59CC);
		  /* 821C59CCh */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821C59CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821C59CCh case    0:*/		return 0x821C59D0;
		  /* 821C59D0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C59D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C59C4;  }
		/* 821C59D0h case    1:*/		return 0x821C59D4;
		  /* 821C59D4h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821C59D4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821C59D4h case    2:*/		return 0x821C59D8;
		  /* 821C59D8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C59D8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C59D8h case    3:*/		return 0x821C59DC;
		  /* 821C59DCh */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C59DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C59DCh case    4:*/		return 0x821C59E0;
		  /* 821C59E0h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821C59E0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C59E0h case    5:*/		return 0x821C59E4;
		  /* 821C59E4h */ case    6:  		/* stw R31, <#[R30 + 4]> */
		/* 821C59E4h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821C59E4h case    6:*/		return 0x821C59E8;
		  /* 821C59E8h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821C59E8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821C59E8h case    7:*/		return 0x821C59EC;
		  /* 821C59ECh */ case    8:  		/* rlwimi R11, R16, 7, 19, 26 */
		/* 821C59ECh case    8:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R16);
		/* 821C59ECh case    8:*/		return 0x821C59F0;
		  /* 821C59F0h */ case    9:  		/* subf R10, R28, R11 */
		/* 821C59F0h case    9:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R28,regs.R11);
		/* 821C59F0h case    9:*/		return 0x821C59F4;
		  /* 821C59F4h */ case   10:  		/* stw R30, <#[R31 + 12]> */
		/* 821C59F4h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C59F4h case   10:*/		return 0x821C59F8;
		  /* 821C59F8h */ case   11:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 821C59F8h case   11:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 821C59F8h case   11:*/		return 0x821C59FC;
		  /* 821C59FCh */ case   12:  		/* stw R10, <#[R31]> */
		/* 821C59FCh case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821C59FCh case   12:*/		return 0x821C5A00;
	}
	return 0x821C5A00;
} // Block from 821C59CCh-821C5A00h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A00);
		  /* 821C5A00h */ case    0:  		/* mr R28, R25 */
		/* 821C5A00h case    0:*/		regs.R28 = regs.R25;
		/* 821C5A00h case    0:*/		return 0x821C5A04;
		  /* 821C5A04h */ case    1:  		/* lwz R30, <#[R28]> */
		/* 821C5A04h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 821C5A04h case    1:*/		return 0x821C5A08;
		  /* 821C5A08h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821C5A08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C5A08h case    2:*/		return 0x821C5A0C;
		  /* 821C5A0Ch */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821C5A0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821C5A74;  }
		/* 821C5A0Ch case    3:*/		return 0x821C5A10;
		  /* 821C5A10h */ case    4:  		/* lwz R29, <#[R23 + 8]> */
		/* 821C5A10h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x00000008) );
		/* 821C5A10h case    4:*/		return 0x821C5A14;
		  /* 821C5A14h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 821C5A14h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C5A14h case    5:*/		return 0x821C5A18;
		  /* 821C5A18h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 821C5A18h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C5A50;  }
		/* 821C5A18h case    6:*/		return 0x821C5A1C;
		  /* 821C5A1Ch */ case    7:  		/* lwz R31, <#[R29 + 4]> */
		/* 821C5A1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821C5A1Ch case    7:*/		return 0x821C5A20;
		  /* 821C5A20h */ case    8:  		/* li R7, 1 */
		/* 821C5A20h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C5A20h case    8:*/		return 0x821C5A24;
		  /* 821C5A24h */ case    9:  		/* li R6, 0 */
		/* 821C5A24h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C5A24h case    9:*/		return 0x821C5A28;
		  /* 821C5A28h */ case   10:  		/* mr R5, R31 */
		/* 821C5A28h case   10:*/		regs.R5 = regs.R31;
		/* 821C5A28h case   10:*/		return 0x821C5A2C;
		  /* 821C5A2Ch */ case   11:  		/* mr R4, R25 */
		/* 821C5A2Ch case   11:*/		regs.R4 = regs.R25;
		/* 821C5A2Ch case   11:*/		return 0x821C5A30;
		  /* 821C5A30h */ case   12:  		/* mr R3, R19 */
		/* 821C5A30h case   12:*/		regs.R3 = regs.R19;
		/* 821C5A30h case   12:*/		return 0x821C5A34;
		  /* 821C5A34h */ case   13:  		/* bl 142028 */
		/* 821C5A34h case   13:*/		regs.LR = 0x821C5A38; return 0x821E8500;
		/* 821C5A34h case   13:*/		return 0x821C5A38;
		  /* 821C5A38h */ case   14:  		/* cmplw CR6, R3, R30 */
		/* 821C5A38h case   14:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821C5A38h case   14:*/		return 0x821C5A3C;
		  /* 821C5A3Ch */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821C5A3Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821C5A48;  }
		/* 821C5A3Ch case   15:*/		return 0x821C5A40;
		  /* 821C5A40h */ case   16:  		/* lwz R29, <#[R29 + 12]> */
		/* 821C5A40h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C5A40h case   16:*/		return 0x821C5A44;
		  /* 821C5A44h */ case   17:  		/* b -48 */
		/* 821C5A44h case   17:*/		return 0x821C5A14;
		/* 821C5A44h case   17:*/		return 0x821C5A48;
	}
	return 0x821C5A48;
} // Block from 821C5A00h-821C5A48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A48);
		  /* 821C5A48h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821C5A48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C5A48h case    0:*/		return 0x821C5A4C;
		  /* 821C5A4Ch */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821C5A4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C5A60;  }
		/* 821C5A4Ch case    1:*/		return 0x821C5A50;
	}
	return 0x821C5A50;
} // Block from 821C5A48h-821C5A50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A50);
		  /* 821C5A50h */ case    0:  		/* mr R5, R19 */
		/* 821C5A50h case    0:*/		regs.R5 = regs.R19;
		/* 821C5A50h case    0:*/		return 0x821C5A54;
		  /* 821C5A54h */ case    1:  		/* mr R4, R30 */
		/* 821C5A54h case    1:*/		regs.R4 = regs.R30;
		/* 821C5A54h case    1:*/		return 0x821C5A58;
		  /* 821C5A58h */ case    2:  		/* mr R3, R25 */
		/* 821C5A58h case    2:*/		regs.R3 = regs.R25;
		/* 821C5A58h case    2:*/		return 0x821C5A5C;
		  /* 821C5A5Ch */ case    3:  		/* bl -315724 */
		/* 821C5A5Ch case    3:*/		regs.LR = 0x821C5A60; return 0x82178910;
		/* 821C5A5Ch case    3:*/		return 0x821C5A60;
	}
	return 0x821C5A60;
} // Block from 821C5A50h-821C5A60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A60);
		  /* 821C5A60h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821C5A60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821C5A60h case    0:*/		return 0x821C5A64;
		  /* 821C5A64h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821C5A64h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821C5A64h case    1:*/		return 0x821C5A68;
		  /* 821C5A68h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821C5A68h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C5A04;  }
		/* 821C5A68h case    2:*/		return 0x821C5A6C;
		  /* 821C5A6Ch */ case    3:  		/* addi R28, R30, 4 */
		/* 821C5A6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 821C5A6Ch case    3:*/		return 0x821C5A70;
		  /* 821C5A70h */ case    4:  		/* b -108 */
		/* 821C5A70h case    4:*/		return 0x821C5A04;
		/* 821C5A70h case    4:*/		return 0x821C5A74;
	}
	return 0x821C5A74;
} // Block from 821C5A60h-821C5A74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A74);
		  /* 821C5A74h */ case    0:  		/* lwz R11, <#[R24 + 44]> */
		/* 821C5A74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821C5A74h case    0:*/		return 0x821C5A78;
		  /* 821C5A78h */ case    1:  		/* cmplw CR6, R11, R21 */
		/* 821C5A78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821C5A78h case    1:*/		return 0x821C5A7C;
		  /* 821C5A7Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821C5A7Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C5A84;  }
		/* 821C5A7Ch case    2:*/		return 0x821C5A80;
		  /* 821C5A80h */ case    3:  		/* mr R20, R17 */
		/* 821C5A80h case    3:*/		regs.R20 = regs.R17;
		/* 821C5A80h case    3:*/		return 0x821C5A84;
	}
	return 0x821C5A84;
} // Block from 821C5A74h-821C5A84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A84);
		  /* 821C5A84h */ case    0:  		/* lwz R22, <#[R22 + 12]> */
		/* 821C5A84h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + 0x0000000C) );
		/* 821C5A84h case    0:*/		return 0x821C5A88;
		  /* 821C5A88h */ case    1:  		/* b -552 */
		/* 821C5A88h case    1:*/		return 0x821C5860;
		/* 821C5A88h case    1:*/		return 0x821C5A8C;
	}
	return 0x821C5A8C;
} // Block from 821C5A84h-821C5A8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5A8C);
		  /* 821C5A8Ch */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C5A8Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C5A8Ch case    0:*/		return 0x821C5A90;
		  /* 821C5A90h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C5A90h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C5A90h case    1:*/		return 0x821C5A94;
		  /* 821C5A94h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5A94h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5A94h case    2:*/		return 0x821C5A98;
		  /* 821C5A98h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C5A98h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5AA8;  }
		/* 821C5A98h case    3:*/		return 0x821C5A9C;
		  /* 821C5A9Ch */ case    4:  		/* mr R25, R11 */
		/* 821C5A9Ch case    4:*/		regs.R25 = regs.R11;
		/* 821C5A9Ch case    4:*/		return 0x821C5AA0;
		  /* 821C5AA0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C5AA0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5AA0h case    5:*/		return 0x821C5AA4;
		  /* 821C5AA4h */ case    6:  		/* bc 4, CR6_EQ, -600 */
		/* 821C5AA4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C584C;  }
		/* 821C5AA4h case    6:*/		return 0x821C5AA8;
	}
	return 0x821C5AA8;
} // Block from 821C5A8Ch-821C5AA8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C5AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5AA8);
		  /* 821C5AA8h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821C5AA8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821C5AA8h case    0:*/		return 0x821C5AAC;
		  /* 821C5AACh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C5AACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5AACh case    1:*/		return 0x821C5AB0;
		  /* 821C5AB0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5AB0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5AB0h case    2:*/		return 0x821C5AB4;
		  /* 821C5AB4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C5AB4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5AC4;  }
		/* 821C5AB4h case    3:*/		return 0x821C5AB8;
		  /* 821C5AB8h */ case    4:  		/* mr R23, R11 */
		/* 821C5AB8h case    4:*/		regs.R23 = regs.R11;
		/* 821C5AB8h case    4:*/		return 0x821C5ABC;
		  /* 821C5ABCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C5ABCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5ABCh case    5:*/		return 0x821C5AC0;
		  /* 821C5AC0h */ case    6:  		/* bc 4, CR6_EQ, -668 */
		/* 821C5AC0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C5824;  }
		/* 821C5AC0h case    6:*/		return 0x821C5AC4;
	}
	return 0x821C5AC4;
} // Block from 821C5AA8h-821C5AC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C5AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5AC4);
		  /* 821C5AC4h */ case    0:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 821C5AC4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 821C5AC4h case    0:*/		return 0x821C5AC8;
		  /* 821C5AC8h */ case    1:  		/* bc 4, CR0_EQ, -716 */
		/* 821C5AC8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C57FC;  }
		/* 821C5AC8h case    1:*/		return 0x821C5ACC;
		  /* 821C5ACCh */ case    2:  		/* addi R1, R1, 224 */
		/* 821C5ACCh case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821C5ACCh case    2:*/		return 0x821C5AD0;
		  /* 821C5AD0h */ case    3:  		/* b -1263704 */
		/* 821C5AD0h case    3:*/		return 0x82091278;
		/* 821C5AD0h case    3:*/		return 0x821C5AD4;
		  /* 821C5AD4h */ case    4:  		/* nop */
		/* 821C5AD4h case    4:*/		cpu::op::nop();
		/* 821C5AD4h case    4:*/		return 0x821C5AD8;
	}
	return 0x821C5AD8;
} // Block from 821C5AC4h-821C5AD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5AD8);
		  /* 821C5AD8h */ case    0:  		/* mfspr R12, LR */
		/* 821C5AD8h case    0:*/		regs.R12 = regs.LR;
		/* 821C5AD8h case    0:*/		return 0x821C5ADC;
		  /* 821C5ADCh */ case    1:  		/* bl -1263748 */
		/* 821C5ADCh case    1:*/		regs.LR = 0x821C5AE0; return 0x82091258;
		/* 821C5ADCh case    1:*/		return 0x821C5AE0;
		  /* 821C5AE0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C5AE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C5AE0h case    2:*/		return 0x821C5AE4;
		  /* 821C5AE4h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C5AE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C5AE4h case    3:*/		return 0x821C5AE8;
		  /* 821C5AE8h */ case    4:  		/* mr R29, R3 */
		/* 821C5AE8h case    4:*/		regs.R29 = regs.R3;
		/* 821C5AE8h case    4:*/		return 0x821C5AEC;
		  /* 821C5AECh */ case    5:  		/* mr R30, R4 */
		/* 821C5AECh case    5:*/		regs.R30 = regs.R4;
		/* 821C5AECh case    5:*/		return 0x821C5AF0;
		  /* 821C5AF0h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C5AF0h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5AF0h case    6:*/		return 0x821C5AF4;
		  /* 821C5AF4h */ case    7:  		/* mr R28, R5 */
		/* 821C5AF4h case    7:*/		regs.R28 = regs.R5;
		/* 821C5AF4h case    7:*/		return 0x821C5AF8;
		  /* 821C5AF8h */ case    8:  		/* addic R10, R10, -1 */
		/* 821C5AF8h case    8:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C5AF8h case    8:*/		return 0x821C5AFC;
		  /* 821C5AFCh */ case    9:  		/* subfe R10, R10, R10 */
		/* 821C5AFCh case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C5AFCh case    9:*/		return 0x821C5B00;
		  /* 821C5B00h */ case   10:  		/* and R31, R10, R11 */
		/* 821C5B00h case   10:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821C5B00h case   10:*/		return 0x821C5B04;
		  /* 821C5B04h */ case   11:  		/* b 88 */
		/* 821C5B04h case   11:*/		return 0x821C5B5C;
		/* 821C5B04h case   11:*/		return 0x821C5B08;
		  /* 821C5B08h */ case   12:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C5B08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C5B08h case   12:*/		return 0x821C5B0C;
		  /* 821C5B0Ch */ case   13:  		/* cmplw CR6, R11, R28 */
		/* 821C5B0Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821C5B0Ch case   13:*/		return 0x821C5B10;
		  /* 821C5B10h */ case   14:  		/* bc 4, CR6_EQ, 60 */
		/* 821C5B10h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821C5B4C;  }
		/* 821C5B10h case   14:*/		return 0x821C5B14;
		  /* 821C5B14h */ case   15:  		/* mr R3, R29 */
		/* 821C5B14h case   15:*/		regs.R3 = regs.R29;
		/* 821C5B14h case   15:*/		return 0x821C5B18;
	}
	return 0x821C5B18;
} // Block from 821C5AD8h-821C5B18h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C5B18h
// Function '?RemoveMERGEOperand@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@IIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5B18);
		  /* 821C5B18h */ case    0:  		/* bl -363488 */
		/* 821C5B18h case    0:*/		regs.LR = 0x821C5B1C; return 0x8216CF38;
		/* 821C5B18h case    0:*/		return 0x821C5B1C;
		  /* 821C5B1Ch */ case    1:  		/* stw R31, <#[R3 + 80]> */
		/* 821C5B1Ch case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000050) );
		/* 821C5B1Ch case    1:*/		return 0x821C5B20;
		  /* 821C5B20h */ case    2:  		/* stw R3, <#[R31 + 80]> */
		/* 821C5B20h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 821C5B20h case    2:*/		return 0x821C5B24;
		  /* 821C5B24h */ case    3:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C5B24h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C5B24h case    3:*/		return 0x821C5B28;
		  /* 821C5B28h */ case    4:  		/* lwz R8, <#[R30]> */
		/* 821C5B28h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5B28h case    4:*/		return 0x821C5B2C;
		  /* 821C5B2Ch */ case    5:  		/* ori R9, R30, 1 */
		/* 821C5B2Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R30,0x1);
		/* 821C5B2Ch case    5:*/		return 0x821C5B30;
		  /* 821C5B30h */ case    6:  		/* stw R8, <#[R11]> */
		/* 821C5B30h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5B30h case    6:*/		return 0x821C5B34;
		  /* 821C5B34h */ case    7:  		/* addi R10, R11, 4 */
		/* 821C5B34h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C5B34h case    7:*/		return 0x821C5B38;
		  /* 821C5B38h */ case    8:  		/* lwz R8, <#[R30]> */
		/* 821C5B38h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5B38h case    8:*/		return 0x821C5B3C;
		  /* 821C5B3Ch */ case    9:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C5B3Ch case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C5B3Ch case    9:*/		return 0x821C5B40;
		  /* 821C5B40h */ case   10:  		/* stw R11, <#[R8]> */
		/* 821C5B40h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C5B40h case   10:*/		return 0x821C5B44;
		  /* 821C5B44h */ case   11:  		/* stw R9, <#[R11 + 4]> */
		/* 821C5B44h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5B44h case   11:*/		return 0x821C5B48;
		  /* 821C5B48h */ case   12:  		/* stw R10, <#[R30]> */
		/* 821C5B48h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5B48h case   12:*/		return 0x821C5B4C;
	}
	return 0x821C5B4C;
} // Block from 821C5B18h-821C5B4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C5B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5B4C);
		  /* 821C5B4Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C5B4Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C5B4Ch case    0:*/		return 0x821C5B50;
		  /* 821C5B50h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821C5B50h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5B50h case    1:*/		return 0x821C5B54;
		  /* 821C5B54h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C5B54h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C5B54h case    2:*/		return 0x821C5B58;
		  /* 821C5B58h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C5B58h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5B64;  }
		/* 821C5B58h case    3:*/		return 0x821C5B5C;
	}
	return 0x821C5B5C;
} // Block from 821C5B4Ch-821C5B5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C5B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5B5C);
		  /* 821C5B5Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821C5B5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C5B5Ch case    0:*/		return 0x821C5B60;
		  /* 821C5B60h */ case    1:  		/* bc 4, CR6_EQ, -88 */
		/* 821C5B60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C5B08;  }
		/* 821C5B60h case    1:*/		return 0x821C5B64;
	}
	return 0x821C5B64;
} // Block from 821C5B5Ch-821C5B64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C5B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5B64);
		  /* 821C5B64h */ case    0:  		/* addi R1, R1, 128 */
		/* 821C5B64h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C5B64h case    0:*/		return 0x821C5B68;
		  /* 821C5B68h */ case    1:  		/* b -1263808 */
		/* 821C5B68h case    1:*/		return 0x820912A8;
		/* 821C5B68h case    1:*/		return 0x821C5B6C;
		  /* 821C5B6Ch */ case    2:  		/* nop */
		/* 821C5B6Ch case    2:*/		cpu::op::nop();
		/* 821C5B6Ch case    2:*/		return 0x821C5B70;
	}
	return 0x821C5B70;
} // Block from 821C5B64h-821C5B70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C5B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5B70);
		  /* 821C5B70h */ case    0:  		/* mfspr R12, LR */
		/* 821C5B70h case    0:*/		regs.R12 = regs.LR;
		/* 821C5B70h case    0:*/		return 0x821C5B74;
		  /* 821C5B74h */ case    1:  		/* bl -1263908 */
		/* 821C5B74h case    1:*/		regs.LR = 0x821C5B78; return 0x82091250;
		/* 821C5B74h case    1:*/		return 0x821C5B78;
		  /* 821C5B78h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C5B78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C5B78h case    2:*/		return 0x821C5B7C;
		  /* 821C5B7Ch */ case    3:  		/* lwz R31, <#[R6 + 4]> */
		/* 821C5B7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + 0x00000004) );
		/* 821C5B7Ch case    3:*/		return 0x821C5B80;
		  /* 821C5B80h */ case    4:  		/* mr R28, R3 */
		/* 821C5B80h case    4:*/		regs.R28 = regs.R3;
		/* 821C5B80h case    4:*/		return 0x821C5B84;
		  /* 821C5B84h */ case    5:  		/* mr R27, R4 */
		/* 821C5B84h case    5:*/		regs.R27 = regs.R4;
		/* 821C5B84h case    5:*/		return 0x821C5B88;
		  /* 821C5B88h */ case    6:  		/* mr R30, R5 */
		/* 821C5B88h case    6:*/		regs.R30 = regs.R5;
		/* 821C5B88h case    6:*/		return 0x821C5B8C;
		  /* 821C5B8Ch */ case    7:  		/* li R29, 0 */
		/* 821C5B8Ch case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821C5B8Ch case    7:*/		return 0x821C5B90;
		  /* 821C5B90h */ case    8:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C5B90h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C5B90h case    8:*/		return 0x821C5B94;
		  /* 821C5B94h */ case    9:  		/* bc 4, CR0_EQ, 148 */
		/* 821C5B94h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821C5C28;  }
		/* 821C5B94h case    9:*/		return 0x821C5B98;
		  /* 821C5B98h */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 821C5B98h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C5B98h case   10:*/		return 0x821C5B9C;
		  /* 821C5B9Ch */ case   11:  		/* bc 12, CR0_EQ, 140 */
		/* 821C5B9Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821C5C28;  }
		/* 821C5B9Ch case   11:*/		return 0x821C5BA0;
		  /* 821C5BA0h */ case   12:  		/* rlwinm R26, R7, 0, 24, 31 */
		/* 821C5BA0h case   12:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R26,regs.R7);
		/* 821C5BA0h case   12:*/		return 0x821C5BA4;
		  /* 821C5BA4h */ case   13:  		/* cmplwi CR6, R26, 0 */
		/* 821C5BA4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C5BA4h case   13:*/		return 0x821C5BA8;
		  /* 821C5BA8h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5BA8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821C5BB8;  }
		/* 821C5BA8h case   14:*/		return 0x821C5BAC;
		  /* 821C5BACh */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C5BACh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C5BACh case   15:*/		return 0x821C5BB0;
		  /* 821C5BB0h */ case   16:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821C5BB0h case   16:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821C5BB0h case   16:*/		return 0x821C5BB4;
		  /* 821C5BB4h */ case   17:  		/* bc 12, CR0_EQ, 92 */
		/* 821C5BB4h case   17:*/		if ( regs.CR[0].eq ) { return 0x821C5C10;  }
		/* 821C5BB4h case   17:*/		return 0x821C5BB8;
	}
	return 0x821C5BB8;
} // Block from 821C5B70h-821C5BB8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C5BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5BB8);
		  /* 821C5BB8h */ case    0:  		/* mr R4, R31 */
		/* 821C5BB8h case    0:*/		regs.R4 = regs.R31;
		/* 821C5BB8h case    0:*/		return 0x821C5BBC;
		  /* 821C5BBCh */ case    1:  		/* mr R3, R28 */
		/* 821C5BBCh case    1:*/		regs.R3 = regs.R28;
		/* 821C5BBCh case    1:*/		return 0x821C5BC0;
		  /* 821C5BC0h */ case    2:  		/* bl 389088 */
		/* 821C5BC0h case    2:*/		regs.LR = 0x821C5BC4; return 0x82224BA0;
		/* 821C5BC0h case    2:*/		return 0x821C5BC4;
		  /* 821C5BC4h */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 821C5BC4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C5BC4h case    3:*/		return 0x821C5BC8;
		  /* 821C5BC8h */ case    4:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C5BC8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C5BC8h case    4:*/		return 0x821C5BCC;
		  /* 821C5BCCh */ case    5:  		/* addi R9, R30, -36 */
		/* 821C5BCCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFDC);
		/* 821C5BCCh case    5:*/		return 0x821C5BD0;
		  /* 821C5BD0h */ case    6:  		/* addi R11, R11, 36 */
		/* 821C5BD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C5BD0h case    6:*/		return 0x821C5BD4;
		  /* 821C5BD4h */ case    7:  		/* ori R9, R9, 1 */
		/* 821C5BD4h case    7:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C5BD4h case    7:*/		return 0x821C5BD8;
		  /* 821C5BD8h */ case    8:  		/* sth R10, <#[R3 + 14]> */
		/* 821C5BD8h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R3 + 0x0000000E) );
		/* 821C5BD8h case    8:*/		return 0x821C5BDC;
		  /* 821C5BDCh */ case    9:  		/* addi R8, R11, -36 */
		/* 821C5BDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C5BDCh case    9:*/		return 0x821C5BE0;
		  /* 821C5BE0h */ case   10:  		/* stw R3, <#[R31 + 32]> */
		/* 821C5BE0h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 821C5BE0h case   10:*/		return 0x821C5BE4;
		  /* 821C5BE4h */ case   11:  		/* addi R10, R11, 4 */
		/* 821C5BE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C5BE4h case   11:*/		return 0x821C5BE8;
		  /* 821C5BE8h */ case   12:  		/* stw R31, <#[R3 + 32]> */
		/* 821C5BE8h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000020) );
		/* 821C5BE8h case   12:*/		return 0x821C5BEC;
		  /* 821C5BECh */ case   13:  		/* addi R29, R29, 1 */
		/* 821C5BECh case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821C5BECh case   13:*/		return 0x821C5BF0;
		  /* 821C5BF0h */ case   14:  		/* lwz R7, <#[R30]> */
		/* 821C5BF0h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5BF0h case   14:*/		return 0x821C5BF4;
		  /* 821C5BF4h */ case   15:  		/* stw R7, <#[R11]> */
		/* 821C5BF4h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5BF4h case   15:*/		return 0x821C5BF8;
		  /* 821C5BF8h */ case   16:  		/* lwz R7, <#[R30]> */
		/* 821C5BF8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5BF8h case   16:*/		return 0x821C5BFC;
		  /* 821C5BFCh */ case   17:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C5BFCh case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C5BFCh case   17:*/		return 0x821C5C00;
		  /* 821C5C00h */ case   18:  		/* stw R8, <#[R7]> */
		/* 821C5C00h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821C5C00h case   18:*/		return 0x821C5C04;
		  /* 821C5C04h */ case   19:  		/* stw R9, <#[R11 + 4]> */
		/* 821C5C04h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5C04h case   19:*/		return 0x821C5C08;
		  /* 821C5C08h */ case   20:  		/* stw R10, <#[R30]> */
		/* 821C5C08h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5C08h case   20:*/		return 0x821C5C0C;
		  /* 821C5C0Ch */ case   21:  		/* stw R27, <#[R3 + 28]> */
		/* 821C5C0Ch case   21:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x0000001C) );
		/* 821C5C0Ch case   21:*/		return 0x821C5C10;
	}
	return 0x821C5C10;
} // Block from 821C5BB8h-821C5C10h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C5C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5C10);
		  /* 821C5C10h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C5C10h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C5C10h case    0:*/		return 0x821C5C14;
		  /* 821C5C14h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821C5C14h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821C5C14h case    1:*/		return 0x821C5C18;
		  /* 821C5C18h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C5C18h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C5C18h case    2:*/		return 0x821C5C1C;
		  /* 821C5C1Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C5C1Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5C28;  }
		/* 821C5C1Ch case    3:*/		return 0x821C5C20;
		  /* 821C5C20h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821C5C20h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C5C20h case    4:*/		return 0x821C5C24;
		  /* 821C5C24h */ case    5:  		/* bc 4, CR6_EQ, -128 */
		/* 821C5C24h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C5BA4;  }
		/* 821C5C24h case    5:*/		return 0x821C5C28;
	}
	return 0x821C5C28;
} // Block from 821C5C10h-821C5C28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C5C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5C28);
		  /* 821C5C28h */ case    0:  		/* mr R3, R29 */
		/* 821C5C28h case    0:*/		regs.R3 = regs.R29;
		/* 821C5C28h case    0:*/		return 0x821C5C2C;
		  /* 821C5C2Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 821C5C2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C5C2Ch case    1:*/		return 0x821C5C30;
		  /* 821C5C30h */ case    2:  		/* b -1264016 */
		/* 821C5C30h case    2:*/		return 0x820912A0;
		/* 821C5C30h case    2:*/		return 0x821C5C34;
		  /* 821C5C34h */ case    3:  		/* nop */
		/* 821C5C34h case    3:*/		cpu::op::nop();
		/* 821C5C34h case    3:*/		return 0x821C5C38;
	}
	return 0x821C5C38;
} // Block from 821C5C28h-821C5C38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C5C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5C38);
		  /* 821C5C38h */ case    0:  		/* mfspr R12, LR */
		/* 821C5C38h case    0:*/		regs.R12 = regs.LR;
		/* 821C5C38h case    0:*/		return 0x821C5C3C;
		  /* 821C5C3Ch */ case    1:  		/* bl -1264108 */
		/* 821C5C3Ch case    1:*/		regs.LR = 0x821C5C40; return 0x82091250;
		/* 821C5C3Ch case    1:*/		return 0x821C5C40;
		  /* 821C5C40h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C5C40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C5C40h case    2:*/		return 0x821C5C44;
		  /* 821C5C44h */ case    3:  		/* lwz R11, <#[R3 + 40]> */
		/* 821C5C44h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821C5C44h case    3:*/		return 0x821C5C48;
		  /* 821C5C48h */ case    4:  		/* mr R29, R3 */
		/* 821C5C48h case    4:*/		regs.R29 = regs.R3;
		/* 821C5C48h case    4:*/		return 0x821C5C4C;
		  /* 821C5C4Ch */ case    5:  		/* mr R27, R4 */
		/* 821C5C4Ch case    5:*/		regs.R27 = regs.R4;
		/* 821C5C4Ch case    5:*/		return 0x821C5C50;
		  /* 821C5C50h */ case    6:  		/* mr R26, R5 */
		/* 821C5C50h case    6:*/		regs.R26 = regs.R5;
		/* 821C5C50h case    6:*/		return 0x821C5C54;
		  /* 821C5C54h */ case    7:  		/* mr R28, R6 */
		/* 821C5C54h case    7:*/		regs.R28 = regs.R6;
		/* 821C5C54h case    7:*/		return 0x821C5C58;
		  /* 821C5C58h */ case    8:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821C5C58h case    8:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821C5C58h case    8:*/		return 0x821C5C5C;
		  /* 821C5C5Ch */ case    9:  		/* bc 12, CR0_EQ, 360 */
		/* 821C5C5Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C5DC4;  }
		/* 821C5C5Ch case    9:*/		return 0x821C5C60;
		  /* 821C5C60h */ case   10:  		/* lbz R11, <#[R5]> */
		/* 821C5C60h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821C5C60h case   10:*/		return 0x821C5C64;
		  /* 821C5C64h */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821C5C64h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C5C64h case   11:*/		return 0x821C5C68;
		  /* 821C5C68h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821C5C68h case   12:*/		if ( regs.CR[0].eq ) { return 0x821C5C78;  }
		/* 821C5C68h case   12:*/		return 0x821C5C6C;
		  /* 821C5C6Ch */ case   13:  		/* bl 153268 */
		/* 821C5C6Ch case   13:*/		regs.LR = 0x821C5C70; return 0x821EB320;
		/* 821C5C6Ch case   13:*/		return 0x821C5C70;
		  /* 821C5C70h */ case   14:  		/* li R11, 0 */
		/* 821C5C70h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C5C70h case   14:*/		return 0x821C5C74;
		  /* 821C5C74h */ case   15:  		/* stb R11, <#[R26]> */
		/* 821C5C74h case   15:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821C5C74h case   15:*/		return 0x821C5C78;
	}
	return 0x821C5C78;
} // Block from 821C5C38h-821C5C78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C5C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5C78);
		  /* 821C5C78h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821C5C78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821C5C78h case    0:*/		return 0x821C5C7C;
		  /* 821C5C7Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5C7Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5C7Ch case    1:*/		return 0x821C5C80;
		  /* 821C5C80h */ case    2:  		/* bc 4, CR0_EQ, 224 */
		/* 821C5C80h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C5D60;  }
		/* 821C5C80h case    2:*/		return 0x821C5C84;
		  /* 821C5C84h */ case    3:  		/* mr R30, R11 */
		/* 821C5C84h case    3:*/		regs.R30 = regs.R11;
		/* 821C5C84h case    3:*/		return 0x821C5C88;
		  /* 821C5C88h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C5C88h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C5C88h case    4:*/		return 0x821C5C8C;
		  /* 821C5C8Ch */ case    5:  		/* bc 12, CR0_EQ, 212 */
		/* 821C5C8Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821C5D60;  }
		/* 821C5C8Ch case    5:*/		return 0x821C5C90;
		  /* 821C5C90h */ case    6:  		/* cmplwi CR6, R27, 0 */
		/* 821C5C90h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C5C90h case    6:*/		return 0x821C5C94;
		  /* 821C5C94h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5C94h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C5CA4;  }
		/* 821C5C94h case    7:*/		return 0x821C5C98;
		  /* 821C5C98h */ case    8:  		/* lwz R11, <#[R30 + 44]> */
		/* 821C5C98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C5C98h case    8:*/		return 0x821C5C9C;
		  /* 821C5C9Ch */ case    9:  		/* cmplw CR6, R11, R27 */
		/* 821C5C9Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821C5C9Ch case    9:*/		return 0x821C5CA0;
		  /* 821C5CA0h */ case   10:  		/* bc 12, CR6_EQ, 60 */
		/* 821C5CA0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C5CDC;  }
		/* 821C5CA0h case   10:*/		return 0x821C5CA4;
	}
	return 0x821C5CA4;
} // Block from 821C5C78h-821C5CA4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C5CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5CA4);
		  /* 821C5CA4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821C5CA4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821C5CA4h case    0:*/		return 0x821C5CA8;
		  /* 821C5CA8h */ case    1:  		/* bc 12, CR6_EQ, 156 */
		/* 821C5CA8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C5D44;  }
		/* 821C5CA8h case    1:*/		return 0x821C5CAC;
		  /* 821C5CACh */ case    2:  		/* lwz R11, <#[R28 + 48]> */
		/* 821C5CACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821C5CACh case    2:*/		return 0x821C5CB0;
		  /* 821C5CB0h */ case    3:  		/* li R10, 1 */
		/* 821C5CB0h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C5CB0h case    3:*/		return 0x821C5CB4;
		  /* 821C5CB4h */ case    4:  		/* lwz R9, <#[R30 + 40]> */
		/* 821C5CB4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821C5CB4h case    4:*/		return 0x821C5CB8;
		  /* 821C5CB8h */ case    5:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821C5CB8h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821C5CB8h case    5:*/		return 0x821C5CBC;
		  /* 821C5CBCh */ case    6:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821C5CBCh case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821C5CBCh case    6:*/		return 0x821C5CC0;
		  /* 821C5CC0h */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821C5CC0h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821C5CC0h case    7:*/		return 0x821C5CC4;
		  /* 821C5CC4h */ case    8:  		/* addi R11, R11, 1 */
		/* 821C5CC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C5CC4h case    8:*/		return 0x821C5CC8;
		  /* 821C5CC8h */ case    9:  		/* slw R10, R10, R8 */
		/* 821C5CC8h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821C5CC8h case    9:*/		return 0x821C5CCC;
		  /* 821C5CCCh */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C5CCCh case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C5CCCh case   10:*/		return 0x821C5CD0;
		  /* 821C5CD0h */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821C5CD0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821C5CD0h case   11:*/		return 0x821C5CD4;
		  /* 821C5CD4h */ case   12:  		/* and. R11, R11, R10 */
		/* 821C5CD4h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C5CD4h case   12:*/		return 0x821C5CD8;
		  /* 821C5CD8h */ case   13:  		/* bc 12, CR0_EQ, 108 */
		/* 821C5CD8h case   13:*/		if ( regs.CR[0].eq ) { return 0x821C5D44;  }
		/* 821C5CD8h case   13:*/		return 0x821C5CDC;
	}
	return 0x821C5CDC;
} // Block from 821C5CA4h-821C5CDCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C5CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5CDC);
		  /* 821C5CDCh */ case    0:  		/* mr R4, R30 */
		/* 821C5CDCh case    0:*/		regs.R4 = regs.R30;
		/* 821C5CDCh case    0:*/		return 0x821C5CE0;
		  /* 821C5CE0h */ case    1:  		/* mr R3, R29 */
		/* 821C5CE0h case    1:*/		regs.R3 = regs.R29;
		/* 821C5CE0h case    1:*/		return 0x821C5CE4;
		  /* 821C5CE4h */ case    2:  		/* bl -316532 */
		/* 821C5CE4h case    2:*/		regs.LR = 0x821C5CE8; return 0x82178870;
		/* 821C5CE4h case    2:*/		return 0x821C5CE8;
		  /* 821C5CE8h */ case    3:  		/* or. R31, R3, R3 */
		/* 821C5CE8h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821C5CE8h case    3:*/		return 0x821C5CEC;
		  /* 821C5CECh */ case    4:  		/* bc 12, CR0_EQ, 88 */
		/* 821C5CECh case    4:*/		if ( regs.CR[0].eq ) { return 0x821C5D44;  }
		/* 821C5CECh case    4:*/		return 0x821C5CF0;
	}
	return 0x821C5CF0;
} // Block from 821C5CDCh-821C5CF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C5CF0h
// Function '?CheckSubroutinePHIs@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5CF0);
		  /* 821C5CF0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C5CF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C5CF0h case    0:*/		return 0x821C5CF4;
		  /* 821C5CF4h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C5CF4h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C5CF4h case    1:*/		return 0x821C5CF8;
		  /* 821C5CF8h */ case    2:  		/* cmplwi CR6, R11, 86 */
		/* 821C5CF8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821C5CF8h case    2:*/		return 0x821C5CFC;
		  /* 821C5CFCh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821C5CFCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821C5D0C;  }
		/* 821C5CFCh case    3:*/		return 0x821C5D00;
		  /* 821C5D00h */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 821C5D00h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821C5D00h case    4:*/		return 0x821C5D04;
		  /* 821C5D04h */ case    5:  		/* li R11, 0 */
		/* 821C5D04h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C5D04h case    5:*/		return 0x821C5D08;
		  /* 821C5D08h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821C5D08h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C5D10;  }
		/* 821C5D08h case    6:*/		return 0x821C5D0C;
	}
	return 0x821C5D0C;
} // Block from 821C5CF0h-821C5D0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C5D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5D0C);
		  /* 821C5D0Ch */ case    0:  		/* li R11, 1 */
		/* 821C5D0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C5D0Ch case    0:*/		return 0x821C5D10;
	}
	return 0x821C5D10;
} // Block from 821C5D0Ch-821C5D10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C5D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5D10);
		  /* 821C5D10h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C5D10h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C5D10h case    0:*/		return 0x821C5D14;
		  /* 821C5D14h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821C5D14h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C5D44;  }
		/* 821C5D14h case    1:*/		return 0x821C5D18;
		  /* 821C5D18h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C5D18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C5D18h case    2:*/		return 0x821C5D1C;
		  /* 821C5D1Ch */ case    3:  		/* mr R3, R29 */
		/* 821C5D1Ch case    3:*/		regs.R3 = regs.R29;
		/* 821C5D1Ch case    3:*/		return 0x821C5D20;
		  /* 821C5D20h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C5D20h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C5D20h case    4:*/		return 0x821C5D24;
		  /* 821C5D24h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C5D24h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C5D24h case    5:*/		return 0x821C5D28;
		  /* 821C5D28h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C5D28h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C5D28h case    6:*/		return 0x821C5D2C;
		  /* 821C5D2Ch */ case    7:  		/* bl -399612 */
		/* 821C5D2Ch case    7:*/		regs.LR = 0x821C5D30; return 0x82164430;
		/* 821C5D2Ch case    7:*/		return 0x821C5D30;
		  /* 821C5D30h */ case    8:  		/* addi R11, R31, -16 */
		/* 821C5D30h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821C5D30h case    8:*/		return 0x821C5D34;
		  /* 821C5D34h */ case    9:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C5D34h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C5D34h case    9:*/		return 0x821C5D38;
		  /* 821C5D38h */ case   10:  		/* lwz R10, <#[R11 + 48]> */
		/* 821C5D38h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821C5D38h case   10:*/		return 0x821C5D3C;
		  /* 821C5D3Ch */ case   11:  		/* oris R10, R10, 16384 */
		/* 821C5D3Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4000);
		/* 821C5D3Ch case   11:*/		return 0x821C5D40;
		  /* 821C5D40h */ case   12:  		/* stw R10, <#[R11 + 48]> */
		/* 821C5D40h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821C5D40h case   12:*/		return 0x821C5D44;
	}
	return 0x821C5D44;
} // Block from 821C5D10h-821C5D44h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C5D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5D44);
		  /* 821C5D44h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C5D44h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C5D44h case    0:*/		return 0x821C5D48;
		  /* 821C5D48h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C5D48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5D48h case    1:*/		return 0x821C5D4C;
		  /* 821C5D4Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5D4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5D4Ch case    2:*/		return 0x821C5D50;
		  /* 821C5D50h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C5D50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5D60;  }
		/* 821C5D50h case    3:*/		return 0x821C5D54;
		  /* 821C5D54h */ case    4:  		/* mr R30, R11 */
		/* 821C5D54h case    4:*/		regs.R30 = regs.R11;
		/* 821C5D54h case    4:*/		return 0x821C5D58;
		  /* 821C5D58h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C5D58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5D58h case    5:*/		return 0x821C5D5C;
		  /* 821C5D5Ch */ case    6:  		/* bc 4, CR6_EQ, -204 */
		/* 821C5D5Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C5C90;  }
		/* 821C5D5Ch case    6:*/		return 0x821C5D60;
	}
	return 0x821C5D60;
} // Block from 821C5D44h-821C5D60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C5D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5D60);
		  /* 821C5D60h */ case    0:  		/* li R4, 1 */
		/* 821C5D60h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C5D60h case    0:*/		return 0x821C5D64;
		  /* 821C5D64h */ case    1:  		/* mr R3, R29 */
		/* 821C5D64h case    1:*/		regs.R3 = regs.R29;
		/* 821C5D64h case    1:*/		return 0x821C5D68;
		  /* 821C5D68h */ case    2:  		/* bl -26032 */
		/* 821C5D68h case    2:*/		regs.LR = 0x821C5D6C; return 0x821BF7B8;
		/* 821C5D68h case    2:*/		return 0x821C5D6C;
		  /* 821C5D6Ch */ case    3:  		/* lwz R31, <#[R29 + 4]> */
		/* 821C5D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821C5D6Ch case    3:*/		return 0x821C5D70;
		  /* 821C5D70h */ case    4:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C5D70h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C5D70h case    4:*/		return 0x821C5D74;
		  /* 821C5D74h */ case    5:  		/* bc 4, CR0_EQ, 80 */
		/* 821C5D74h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C5DC4;  }
		/* 821C5D74h case    5:*/		return 0x821C5D78;
		  /* 821C5D78h */ case    6:  		/* cmplwi CR0, R31, 0 */
		/* 821C5D78h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C5D78h case    6:*/		return 0x821C5D7C;
		  /* 821C5D7Ch */ case    7:  		/* bc 12, CR0_EQ, 72 */
		/* 821C5D7Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821C5DC4;  }
		/* 821C5D7Ch case    7:*/		return 0x821C5D80;
		  /* 821C5D80h */ case    8:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C5D80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C5D80h case    8:*/		return 0x821C5D84;
		  /* 821C5D84h */ case    9:  		/* rlwinm. R10, R11, 2, 31, 31 */
		/* 821C5D84h case    9:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5D84h case    9:*/		return 0x821C5D88;
		  /* 821C5D88h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 821C5D88h case   10:*/		if ( regs.CR[0].eq ) { return 0x821C5DAC;  }
		/* 821C5D88h case   10:*/		return 0x821C5D8C;
		  /* 821C5D8Ch */ case   11:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 821C5D8Ch case   11:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 821C5D8Ch case   11:*/		return 0x821C5D90;
		  /* 821C5D90h */ case   12:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 821C5D90h case   12:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5D90h case   12:*/		return 0x821C5D94;
		  /* 821C5D94h */ case   13:  		/* stw R11, <#[R31 + 48]> */
		/* 821C5D94h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C5D94h case   13:*/		return 0x821C5D98;
		  /* 821C5D98h */ case   14:  		/* bc 12, CR0_EQ, 20 */
		/* 821C5D98h case   14:*/		if ( regs.CR[0].eq ) { return 0x821C5DAC;  }
		/* 821C5D98h case   14:*/		return 0x821C5D9C;
		  /* 821C5D9Ch */ case   15:  		/* mr R5, R26 */
		/* 821C5D9Ch case   15:*/		regs.R5 = regs.R26;
		/* 821C5D9Ch case   15:*/		return 0x821C5DA0;
		  /* 821C5DA0h */ case   16:  		/* mr R4, R31 */
		/* 821C5DA0h case   16:*/		regs.R4 = regs.R31;
		/* 821C5DA0h case   16:*/		return 0x821C5DA4;
		  /* 821C5DA4h */ case   17:  		/* mr R3, R29 */
		/* 821C5DA4h case   17:*/		regs.R3 = regs.R29;
		/* 821C5DA4h case   17:*/		return 0x821C5DA8;
		  /* 821C5DA8h */ case   18:  		/* bl -29464 */
		/* 821C5DA8h case   18:*/		regs.LR = 0x821C5DAC; return 0x821BEA90;
		/* 821C5DA8h case   18:*/		return 0x821C5DAC;
	}
	return 0x821C5DAC;
} // Block from 821C5D60h-821C5DACh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C5DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5DAC);
		  /* 821C5DACh */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C5DACh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C5DACh case    0:*/		return 0x821C5DB0;
		  /* 821C5DB0h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821C5DB0h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821C5DB0h case    1:*/		return 0x821C5DB4;
		  /* 821C5DB4h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C5DB4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C5DB4h case    2:*/		return 0x821C5DB8;
		  /* 821C5DB8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C5DB8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C5DC4;  }
		/* 821C5DB8h case    3:*/		return 0x821C5DBC;
		  /* 821C5DBCh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821C5DBCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C5DBCh case    4:*/		return 0x821C5DC0;
		  /* 821C5DC0h */ case    5:  		/* bc 4, CR6_EQ, -64 */
		/* 821C5DC0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C5D80;  }
		/* 821C5DC0h case    5:*/		return 0x821C5DC4;
	}
	return 0x821C5DC4;
} // Block from 821C5DACh-821C5DC4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C5DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5DC4);
		  /* 821C5DC4h */ case    0:  		/* addi R1, R1, 144 */
		/* 821C5DC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C5DC4h case    0:*/		return 0x821C5DC8;
		  /* 821C5DC8h */ case    1:  		/* b -1264424 */
		/* 821C5DC8h case    1:*/		return 0x820912A0;
		/* 821C5DC8h case    1:*/		return 0x821C5DCC;
		  /* 821C5DCCh */ case    2:  		/* nop */
		/* 821C5DCCh case    2:*/		cpu::op::nop();
		/* 821C5DCCh case    2:*/		return 0x821C5DD0;
	}
	return 0x821C5DD0;
} // Block from 821C5DC4h-821C5DD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C5DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5DD0);
		  /* 821C5DD0h */ case    0:  		/* mfspr R12, LR */
		/* 821C5DD0h case    0:*/		regs.R12 = regs.LR;
		/* 821C5DD0h case    0:*/		return 0x821C5DD4;
		  /* 821C5DD4h */ case    1:  		/* bl -1264564 */
		/* 821C5DD4h case    1:*/		regs.LR = 0x821C5DD8; return 0x82091220;
		/* 821C5DD4h case    1:*/		return 0x821C5DD8;
		  /* 821C5DD8h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 821C5DD8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 821C5DD8h case    2:*/		return 0x821C5DDC;
		  /* 821C5DDCh */ case    3:  		/* stwu R1, <#[R1 - 368]> */
		/* 821C5DDCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 821C5DDCh case    3:*/		return 0x821C5DE0;
		  /* 821C5DE0h */ case    4:  		/* li R11, 1 */
		/* 821C5DE0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C5DE0h case    4:*/		return 0x821C5DE4;
		  /* 821C5DE4h */ case    5:  		/* stw R4, <#[R1 + 396]> */
		/* 821C5DE4h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000018C) );
		/* 821C5DE4h case    5:*/		return 0x821C5DE8;
		  /* 821C5DE8h */ case    6:  		/* mr R31, R3 */
		/* 821C5DE8h case    6:*/		regs.R31 = regs.R3;
		/* 821C5DE8h case    6:*/		return 0x821C5DEC;
		  /* 821C5DECh */ case    7:  		/* stb R11, <#[R1 + 80]> */
		/* 821C5DECh case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821C5DECh case    7:*/		return 0x821C5DF0;
		  /* 821C5DF0h */ case    8:  		/* lis R11, -32256 */
		/* 821C5DF0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C5DF0h case    8:*/		return 0x821C5DF4;
		  /* 821C5DF4h */ case    9:  		/* li R16, 0 */
		/* 821C5DF4h case    9:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821C5DF4h case    9:*/		return 0x821C5DF8;
		  /* 821C5DF8h */ case   10:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821C5DF8h case   10:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821C5DF8h case   10:*/		return 0x821C5DFC;
		  /* 821C5DFCh */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C5DFCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C5DFCh case   11:*/		return 0x821C5E00;
		  /* 821C5E00h */ case   12:  		/* stb R16, <#[R1 + 82]> */
		/* 821C5E00h case   12:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000052) );
		/* 821C5E00h case   12:*/		return 0x821C5E04;
		  /* 821C5E04h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C5E04h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5E04h case   13:*/		return 0x821C5E08;
		  /* 821C5E08h */ case   14:  		/* bc 4, CR0_EQ, 3164 */
		/* 821C5E08h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821C6A64;  }
		/* 821C5E08h case   14:*/		return 0x821C5E0C;
		  /* 821C5E0Ch */ case   15:  		/* mr R15, R11 */
		/* 821C5E0Ch case   15:*/		regs.R15 = regs.R11;
		/* 821C5E0Ch case   15:*/		return 0x821C5E10;
		  /* 821C5E10h */ case   16:  		/* stw R11, <#[R1 + 88]> */
		/* 821C5E10h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821C5E10h case   16:*/		return 0x821C5E14;
		  /* 821C5E14h */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 821C5E14h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C5E14h case   17:*/		return 0x821C5E18;
		  /* 821C5E18h */ case   18:  		/* bc 12, CR0_EQ, 3148 */
		/* 821C5E18h case   18:*/		if ( regs.CR[0].eq ) { return 0x821C6A64;  }
		/* 821C5E18h case   18:*/		return 0x821C5E1C;
		  /* 821C5E1Ch */ case   19:  		/* lwz R11, <#[R15 + 28]> */
		/* 821C5E1Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x0000001C) );
		/* 821C5E1Ch case   19:*/		return 0x821C5E20;
		  /* 821C5E20h */ case   20:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C5E20h case   20:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C5E20h case   20:*/		return 0x821C5E24;
		  /* 821C5E24h */ case   21:  		/* addic R10, R10, -1 */
		/* 821C5E24h case   21:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C5E24h case   21:*/		return 0x821C5E28;
		  /* 821C5E28h */ case   22:  		/* subfe R10, R10, R10 */
		/* 821C5E28h case   22:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C5E28h case   22:*/		return 0x821C5E2C;
		  /* 821C5E2Ch */ case   23:  		/* and R22, R10, R11 */
		/* 821C5E2Ch case   23:*/		cpu::op::and<0>(regs,&regs.R22,regs.R10,regs.R11);
		/* 821C5E2Ch case   23:*/		return 0x821C5E30;
		  /* 821C5E30h */ case   24:  		/* stw R22, <#[R1 + 84]> */
		/* 821C5E30h case   24:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 821C5E30h case   24:*/		return 0x821C5E34;
		  /* 821C5E34h */ case   25:  		/* cmplwi CR6, R22, 0 */
		/* 821C5E34h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C5E34h case   25:*/		return 0x821C5E38;
		  /* 821C5E38h */ case   26:  		/* bc 12, CR6_EQ, 3084 */
		/* 821C5E38h case   26:*/		if ( regs.CR[6].eq ) { return 0x821C6A44;  }
		/* 821C5E38h case   26:*/		return 0x821C5E3C;
		  /* 821C5E3Ch */ case   27:  		/* mr R3, R22 */
		/* 821C5E3Ch case   27:*/		regs.R3 = regs.R22;
		/* 821C5E3Ch case   27:*/		return 0x821C5E40;
		  /* 821C5E40h */ case   28:  		/* bl -34056 */
		/* 821C5E40h case   28:*/		regs.LR = 0x821C5E44; return 0x821BD938;
		/* 821C5E40h case   28:*/		return 0x821C5E44;
		  /* 821C5E44h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C5E44h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C5E44h case   29:*/		return 0x821C5E48;
		  /* 821C5E48h */ case   30:  		/* lwz R11, <#[R22 + 8]> */
		/* 821C5E48h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821C5E48h case   30:*/		return 0x821C5E4C;
		  /* 821C5E4Ch */ case   31:  		/* bc 12, CR0_EQ, 212 */
		/* 821C5E4Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x821C5F20;  }
		/* 821C5E4Ch case   31:*/		return 0x821C5E50;
		  /* 821C5E50h */ case   32:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C5E50h case   32:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C5E50h case   32:*/		return 0x821C5E54;
		  /* 821C5E54h */ case   33:  		/* cmplwi CR6, R10, 12288 */
		/* 821C5E54h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821C5E54h case   33:*/		return 0x821C5E58;
		  /* 821C5E58h */ case   34:  		/* bc 4, CR6_EQ, 24 */
		/* 821C5E58h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821C5E70;  }
		/* 821C5E58h case   34:*/		return 0x821C5E5C;
		  /* 821C5E5Ch */ case   35:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821C5E5Ch case   35:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821C5E5Ch case   35:*/		return 0x821C5E60;
		  /* 821C5E60h */ case   36:  		/* lis R10, 8 */
		/* 821C5E60h case   36:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821C5E60h case   36:*/		return 0x821C5E64;
		  /* 821C5E64h */ case   37:  		/* cmplw CR6, R11, R10 */
		/* 821C5E64h case   37:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C5E64h case   37:*/		return 0x821C5E68;
		  /* 821C5E68h */ case   38:  		/* li R11, 1 */
		/* 821C5E68h case   38:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C5E68h case   38:*/		return 0x821C5E6C;
		  /* 821C5E6Ch */ case   39:  		/* bc 12, CR6_GT, 8 */
		/* 821C5E6Ch case   39:*/		if ( regs.CR[6].gt ) { return 0x821C5E74;  }
		/* 821C5E6Ch case   39:*/		return 0x821C5E70;
	}
	return 0x821C5E70;
} // Block from 821C5DD0h-821C5E70h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821C5E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5E70);
		  /* 821C5E70h */ case    0:  		/* mr R11, R16 */
		/* 821C5E70h case    0:*/		regs.R11 = regs.R16;
		/* 821C5E70h case    0:*/		return 0x821C5E74;
	}
	return 0x821C5E74;
} // Block from 821C5E70h-821C5E74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C5E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5E74);
		  /* 821C5E74h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821C5E74h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C5E74h case    0:*/		return 0x821C5E78;
		  /* 821C5E78h */ case    1:  		/* li R10, 0 */
		/* 821C5E78h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C5E78h case    1:*/		return 0x821C5E7C;
		  /* 821C5E7Ch */ case    2:  		/* addic R8, R11, -1 */
		/* 821C5E7Ch case    2:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821C5E7Ch case    2:*/		return 0x821C5E80;
		  /* 821C5E80h */ case    3:  		/* li R9, 0 */
		/* 821C5E80h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C5E80h case    3:*/		return 0x821C5E84;
		  /* 821C5E84h */ case    4:  		/* subfe R11, R8, R11 */
		/* 821C5E84h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821C5E84h case    4:*/		return 0x821C5E88;
		  /* 821C5E88h */ case    5:  		/* li R8, 0 */
		/* 821C5E88h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C5E88h case    5:*/		return 0x821C5E8C;
		  /* 821C5E8Ch */ case    6:  		/* addi R11, R11, 11 */
		/* 821C5E8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821C5E8Ch case    6:*/		return 0x821C5E90;
		  /* 821C5E90h */ case    7:  		/* addi R7, R1, 120 */
		/* 821C5E90h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 821C5E90h case    7:*/		return 0x821C5E94;
		  /* 821C5E94h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C5E94h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C5E94h case    8:*/		return 0x821C5E98;
		  /* 821C5E98h */ case    9:  		/* addi R6, R1, 152 */
		/* 821C5E98h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x98);
		/* 821C5E98h case    9:*/		return 0x821C5E9C;
		  /* 821C5E9Ch */ case   10:  		/* addi R5, R1, 116 */
		/* 821C5E9Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 821C5E9Ch case   10:*/		return 0x821C5EA0;
		  /* 821C5EA0h */ case   11:  		/* li R4, 0 */
		/* 821C5EA0h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C5EA0h case   11:*/		return 0x821C5EA4;
		  /* 821C5EA4h */ case   12:  		/* lwzx R30, <#[R11 + R22]> */
		/* 821C5EA4h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 821C5EA4h case   12:*/		return 0x821C5EA8;
		  /* 821C5EA8h */ case   13:  		/* mr R3, R30 */
		/* 821C5EA8h case   13:*/		regs.R3 = regs.R30;
		/* 821C5EA8h case   13:*/		return 0x821C5EAC;
		  /* 821C5EACh */ case   14:  		/* lwz R29, <#[R30 + 12]> */
		/* 821C5EACh case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C5EACh case   14:*/		return 0x821C5EB0;
		  /* 821C5EB0h */ case   15:  		/* bl 382496 */
		/* 821C5EB0h case   15:*/		regs.LR = 0x821C5EB4; return 0x822234D0;
		/* 821C5EB0h case   15:*/		return 0x821C5EB4;
		  /* 821C5EB4h */ case   16:  		/* lwz R10, <#[R1 + 116]> */
		/* 821C5EB4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 821C5EB4h case   16:*/		return 0x821C5EB8;
		  /* 821C5EB8h */ case   17:  		/* cmplw CR6, R10, R29 */
		/* 821C5EB8h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821C5EB8h case   17:*/		return 0x821C5EBC;
		  /* 821C5EBCh */ case   18:  		/* bc 12, CR6_EQ, 2896 */
		/* 821C5EBCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821C6A0C;  }
		/* 821C5EBCh case   18:*/		return 0x821C5EC0;
		  /* 821C5EC0h */ case   19:  		/* lwz R11, <#[R30 + 12]> */
		/* 821C5EC0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C5EC0h case   19:*/		return 0x821C5EC4;
		  /* 821C5EC4h */ case   20:  		/* addi R11, R11, 4 */
		/* 821C5EC4h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C5EC4h case   20:*/		return 0x821C5EC8;
		  /* 821C5EC8h */ case   21:  		/* lwz R9, <#[R11]> */
		/* 821C5EC8h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5EC8h case   21:*/		return 0x821C5ECC;
		  /* 821C5ECCh */ case   22:  		/* b 12 */
		/* 821C5ECCh case   22:*/		return 0x821C5ED8;
		/* 821C5ECCh case   22:*/		return 0x821C5ED0;
		  /* 821C5ED0h */ case   23:  		/* addi R11, R9, 8 */
		/* 821C5ED0h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x8);
		/* 821C5ED0h case   23:*/		return 0x821C5ED4;
		  /* 821C5ED4h */ case   24:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C5ED4h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C5ED4h case   24:*/		return 0x821C5ED8;
	}
	return 0x821C5ED8;
} // Block from 821C5E74h-821C5ED8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C5ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5ED8);
		  /* 821C5ED8h */ case    0:  		/* cmplw CR6, R9, R30 */
		/* 821C5ED8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R30);
		/* 821C5ED8h case    0:*/		return 0x821C5EDC;
		  /* 821C5EDCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C5EDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C5ED0;  }
		/* 821C5EDCh case    1:*/		return 0x821C5EE0;
		  /* 821C5EE0h */ case    2:  		/* lwz R9, <#[R30 + 8]> */
		/* 821C5EE0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821C5EE0h case    2:*/		return 0x821C5EE4;
		  /* 821C5EE4h */ case    3:  		/* li R8, 1 */
		/* 821C5EE4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C5EE4h case    3:*/		return 0x821C5EE8;
		  /* 821C5EE8h */ case    4:  		/* stb R8, <#[R1 + 82]> */
		/* 821C5EE8h case    4:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R1 + 0x00000052) );
		/* 821C5EE8h case    4:*/		return 0x821C5EEC;
		  /* 821C5EECh */ case    5:  		/* stw R9, <#[R11]> */
		/* 821C5EECh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C5EECh case    5:*/		return 0x821C5EF0;
		  /* 821C5EF0h */ case    6:  		/* lwz R11, <#[R10 + 4]> */
		/* 821C5EF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821C5EF0h case    6:*/		return 0x821C5EF4;
		  /* 821C5EF4h */ case    7:  		/* stw R11, <#[R30 + 8]> */
		/* 821C5EF4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C5EF4h case    7:*/		return 0x821C5EF8;
		  /* 821C5EF8h */ case    8:  		/* stw R30, <#[R10 + 4]> */
		/* 821C5EF8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 821C5EF8h case    8:*/		return 0x821C5EFC;
		  /* 821C5EFCh */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821C5EFCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5EFCh case    9:*/		return 0x821C5F00;
		  /* 821C5F00h */ case   10:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C5F00h case   10:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C5F00h case   10:*/		return 0x821C5F04;
		  /* 821C5F04h */ case   11:  		/* mr R9, R11 */
		/* 821C5F04h case   11:*/		regs.R9 = regs.R11;
		/* 821C5F04h case   11:*/		return 0x821C5F08;
		  /* 821C5F08h */ case   12:  		/* stw R11, <#[R30]> */
		/* 821C5F08h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5F08h case   12:*/		return 0x821C5F0C;
		  /* 821C5F0Ch */ case   13:  		/* stw R10, <#[R30 + 12]> */
		/* 821C5F0Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C5F0Ch case   13:*/		return 0x821C5F10;
		  /* 821C5F10h */ case   14:  		/* lwz R11, <#[R1 + 120]> */
		/* 821C5F10h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821C5F10h case   14:*/		return 0x821C5F14;
		  /* 821C5F14h */ case   15:  		/* rlwimi R9, R11, 0, 27, 31 */
		/* 821C5F14h case   15:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 821C5F14h case   15:*/		return 0x821C5F18;
		  /* 821C5F18h */ case   16:  		/* stw R9, <#[R30]> */
		/* 821C5F18h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 821C5F18h case   16:*/		return 0x821C5F1C;
		  /* 821C5F1Ch */ case   17:  		/* b 2800 */
		/* 821C5F1Ch case   17:*/		return 0x821C6A0C;
		/* 821C5F1Ch case   17:*/		return 0x821C5F20;
	}
	return 0x821C5F20;
} // Block from 821C5ED8h-821C5F20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C5F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C5F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C5F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C5F20);
		  /* 821C5F20h */ case    0:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C5F20h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C5F20h case    0:*/		return 0x821C5F24;
		  /* 821C5F24h */ case    1:  		/* cmplwi CR6, R11, 15232 */
		/* 821C5F24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B80);
		/* 821C5F24h case    1:*/		return 0x821C5F28;
		  /* 821C5F28h */ case    2:  		/* bc 4, CR6_EQ, 2788 */
		/* 821C5F28h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C6A0C;  }
		/* 821C5F28h case    2:*/		return 0x821C5F2C;
		  /* 821C5F2Ch */ case    3:  		/* li R6, 0 */
		/* 821C5F2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C5F2Ch case    3:*/		return 0x821C5F30;
		  /* 821C5F30h */ case    4:  		/* li R5, 0 */
		/* 821C5F30h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C5F30h case    4:*/		return 0x821C5F34;
		  /* 821C5F34h */ case    5:  		/* li R4, 119 */
		/* 821C5F34h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x77);
		/* 821C5F34h case    5:*/		return 0x821C5F38;
		  /* 821C5F38h */ case    6:  		/* mr R3, R31 */
		/* 821C5F38h case    6:*/		regs.R3 = regs.R31;
		/* 821C5F38h case    6:*/		return 0x821C5F3C;
		  /* 821C5F3Ch */ case    7:  		/* bl -400140 */
		/* 821C5F3Ch case    7:*/		regs.LR = 0x821C5F40; return 0x82164430;
		/* 821C5F3Ch case    7:*/		return 0x821C5F40;
		  /* 821C5F40h */ case    8:  		/* addi R11, R22, -12 */
		/* 821C5F40h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFF4);
		/* 821C5F40h case    8:*/		return 0x821C5F44;
		  /* 821C5F44h */ case    9:  		/* li R21, 1 */
		/* 821C5F44h case    9:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821C5F44h case    9:*/		return 0x821C5F48;
		  /* 821C5F48h */ case   10:  		/* stw R16, <#[R1 + 92]> */
		/* 821C5F48h case   10:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000005C) );
		/* 821C5F48h case   10:*/		return 0x821C5F4C;
		  /* 821C5F4Ch */ case   11:  		/* add R20, R3, R11 */
		/* 821C5F4Ch case   11:*/		cpu::op::add<0>(regs,&regs.R20,regs.R3,regs.R11);
		/* 821C5F4Ch case   11:*/		return 0x821C5F50;
		  /* 821C5F50h */ case   12:  		/* stw R16, <#[R1 + 108]> */
		/* 821C5F50h case   12:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x0000006C) );
		/* 821C5F50h case   12:*/		return 0x821C5F54;
		  /* 821C5F54h */ case   13:  		/* mr R14, R16 */
		/* 821C5F54h case   13:*/		regs.R14 = regs.R16;
		/* 821C5F54h case   13:*/		return 0x821C5F58;
		  /* 821C5F58h */ case   14:  		/* stb R21, <#[R1 + 81]> */
		/* 821C5F58h case   14:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000051) );
		/* 821C5F58h case   14:*/		return 0x821C5F5C;
		  /* 821C5F5Ch */ case   15:  		/* mr R18, R16 */
		/* 821C5F5Ch case   15:*/		regs.R18 = regs.R16;
		/* 821C5F5Ch case   15:*/		return 0x821C5F60;
		  /* 821C5F60h */ case   16:  		/* mr R26, R16 */
		/* 821C5F60h case   16:*/		regs.R26 = regs.R16;
		/* 821C5F60h case   16:*/		return 0x821C5F64;
		  /* 821C5F64h */ case   17:  		/* mr R17, R16 */
		/* 821C5F64h case   17:*/		regs.R17 = regs.R16;
		/* 821C5F64h case   17:*/		return 0x821C5F68;
		  /* 821C5F68h */ case   18:  		/* lwz R19, <#[R20 + 4]> */
		/* 821C5F68h case   18:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R20 + 0x00000004) );
		/* 821C5F68h case   18:*/		return 0x821C5F6C;
		  /* 821C5F6Ch */ case   19:  		/* mr R23, R16 */
		/* 821C5F6Ch case   19:*/		regs.R23 = regs.R16;
		/* 821C5F6Ch case   19:*/		return 0x821C5F70;
		  /* 821C5F70h */ case   20:  		/* mr R25, R16 */
		/* 821C5F70h case   20:*/		regs.R25 = regs.R16;
		/* 821C5F70h case   20:*/		return 0x821C5F74;
		  /* 821C5F74h */ case   21:  		/* mr R27, R16 */
		/* 821C5F74h case   21:*/		regs.R27 = regs.R16;
		/* 821C5F74h case   21:*/		return 0x821C5F78;
		  /* 821C5F78h */ case   22:  		/* cmplwi CR6, R19, 0 */
		/* 821C5F78h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821C5F78h case   22:*/		return 0x821C5F7C;
		  /* 821C5F7Ch */ case   23:  		/* bc 12, CR6_EQ, 308 */
		/* 821C5F7Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821C60B0;  }
		/* 821C5F7Ch case   23:*/		return 0x821C5F80;
		  /* 821C5F80h */ case   24:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C5F80h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C5F80h case   24:*/		return 0x821C5F84;
		  /* 821C5F84h */ case   25:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 821C5F84h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 821C5F84h case   25:*/		return 0x821C5F88;
		  /* 821C5F88h */ case   26:  		/* li R7, 0 */
		/* 821C5F88h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C5F88h case   26:*/		return 0x821C5F8C;
		  /* 821C5F8Ch */ case   27:  		/* addi R6, R1, 132 */
		/* 821C5F8Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 821C5F8Ch case   27:*/		return 0x821C5F90;
		  /* 821C5F90h */ case   28:  		/* addi R5, R1, 128 */
		/* 821C5F90h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 821C5F90h case   28:*/		return 0x821C5F94;
		  /* 821C5F94h */ case   29:  		/* addi R4, R1, 124 */
		/* 821C5F94h case   29:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x7C);
		/* 821C5F94h case   29:*/		return 0x821C5F98;
		  /* 821C5F98h */ case   30:  		/* lwzx R29, <#[R10 + R11]> */
		/* 821C5F98h case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821C5F98h case   30:*/		return 0x821C5F9C;
		  /* 821C5F9Ch */ case   31:  		/* mr R3, R29 */
		/* 821C5F9Ch case   31:*/		regs.R3 = regs.R29;
		/* 821C5F9Ch case   31:*/		return 0x821C5FA0;
		  /* 821C5FA0h */ case   32:  		/* bl 429968 */
		/* 821C5FA0h case   32:*/		regs.LR = 0x821C5FA4; return 0x8222EF30;
		/* 821C5FA0h case   32:*/		return 0x821C5FA4;
		  /* 821C5FA4h */ case   33:  		/* lwz R11, <#[R29]> */
		/* 821C5FA4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C5FA4h case   33:*/		return 0x821C5FA8;
		  /* 821C5FA8h */ case   34:  		/* lwz R10, <#[R1 + 128]> */
		/* 821C5FA8h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821C5FA8h case   34:*/		return 0x821C5FAC;
		  /* 821C5FACh */ case   35:  		/* rlwinm R11, R11, 28, 29, 30 */
		/* 821C5FACh case   35:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R11,regs.R11);
		/* 821C5FACh case   35:*/		return 0x821C5FB0;
		  /* 821C5FB0h */ case   36:  		/* srw R11, R10, R11 */
		/* 821C5FB0h case   36:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C5FB0h case   36:*/		return 0x821C5FB4;
		  /* 821C5FB4h */ case   37:  		/* lwz R30, <#[R1 + 124]> */
		/* 821C5FB4h case   37:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000007C) );
		/* 821C5FB4h case   37:*/		return 0x821C5FB8;
		  /* 821C5FB8h */ case   38:  		/* rlwinm R24, R11, 0, 30, 31 */
		/* 821C5FB8h case   38:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R24,regs.R11);
		/* 821C5FB8h case   38:*/		return 0x821C5FBC;
		  /* 821C5FBCh */ case   39:  		/* lwz R9, <#[R30 + 8]> */
		/* 821C5FBCh case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821C5FBCh case   39:*/		return 0x821C5FC0;
		  /* 821C5FC0h */ case   40:  		/* rlwinm R10, R9, 0, 18, 24 */
		/* 821C5FC0h case   40:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R9);
		/* 821C5FC0h case   40:*/		return 0x821C5FC4;
		  /* 821C5FC4h */ case   41:  		/* cmplwi CR6, R10, 15872 */
		/* 821C5FC4h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E00);
		/* 821C5FC4h case   41:*/		return 0x821C5FC8;
		  /* 821C5FC8h */ case   42:  		/* bc 4, CR6_EQ, 204 */
		/* 821C5FC8h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821C6094;  }
		/* 821C5FC8h case   42:*/		return 0x821C5FCC;
		  /* 821C5FCCh */ case   43:  		/* lwz R11, <#[R1 + 132]> */
		/* 821C5FCCh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821C5FCCh case   43:*/		return 0x821C5FD0;
		  /* 821C5FD0h */ case   44:  		/* cmplwi CR6, R11, 0 */
		/* 821C5FD0h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C5FD0h case   44:*/		return 0x821C5FD4;
		  /* 821C5FD4h */ case   45:  		/* bc 4, CR6_EQ, 192 */
		/* 821C5FD4h case   45:*/		if ( !regs.CR[6].eq ) { return 0x821C6094;  }
		/* 821C5FD4h case   45:*/		return 0x821C5FD8;
		  /* 821C5FD8h */ case   46:  		/* rlwinm R11, R9, 0, 0, 31 */
		/* 821C5FD8h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R9);
		/* 821C5FD8h case   46:*/		return 0x821C5FDC;
		  /* 821C5FDCh */ case   47:  		/* mr R3, R31 */
		/* 821C5FDCh case   47:*/		regs.R3 = regs.R31;
		/* 821C5FDCh case   47:*/		return 0x821C5FE0;
		  /* 821C5FE0h */ case   48:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C5FE0h case   48:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C5FE0h case   48:*/		return 0x821C5FE4;
		  /* 821C5FE4h */ case   49:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C5FE4h case   49:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C5FE4h case   49:*/		return 0x821C5FE8;
		  /* 821C5FE8h */ case   50:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C5FE8h case   50:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C5FE8h case   50:*/		return 0x821C5FEC;
		  /* 821C5FECh */ case   51:  		/* addi R29, R30, -8 */
		/* 821C5FECh case   51:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0xFFFFFFF8);
		/* 821C5FECh case   51:*/		return 0x821C5FF0;
		  /* 821C5FF0h */ case   52:  		/* bl -400320 */
		/* 821C5FF0h case   52:*/		regs.LR = 0x821C5FF4; return 0x82164430;
		/* 821C5FF0h case   52:*/		return 0x821C5FF4;
		  /* 821C5FF4h */ case   53:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C5FF4h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C5FF4h case   53:*/		return 0x821C5FF8;
		  /* 821C5FF8h */ case   54:  		/* lwzx R10, <#[R3 + R29]> */
		/* 821C5FF8h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R29 + 0x00000000) );
		/* 821C5FF8h case   54:*/		return 0x821C5FFC;
		  /* 821C5FFCh */ case   55:  		/* mr R3, R31 */
		/* 821C5FFCh case   55:*/		regs.R3 = regs.R31;
		/* 821C5FFCh case   55:*/		return 0x821C6000;
		  /* 821C6000h */ case   56:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C6000h case   56:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C6000h case   56:*/		return 0x821C6004;
		  /* 821C6004h */ case   57:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C6004h case   57:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C6004h case   57:*/		return 0x821C6008;
		  /* 821C6008h */ case   58:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C6008h case   58:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C6008h case   58:*/		return 0x821C600C;
		  /* 821C600Ch */ case   59:  		/* rlwinm R28, R10, 17, 18, 31 */
		/* 821C600Ch case   59:*/		cpu::op::rlwinm<0,17,18,31>(regs,&regs.R28,regs.R10);
		/* 821C600Ch case   59:*/		return 0x821C6010;
		  /* 821C6010h */ case   60:  		/* bl -400352 */
		/* 821C6010h case   60:*/		regs.LR = 0x821C6014; return 0x82164430;
		/* 821C6010h case   60:*/		return 0x821C6014;
		  /* 821C6014h */ case   61:  		/* lwzx R10, <#[R3 + R29]> */
		/* 821C6014h case   61:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R29 + 0x00000000) );
		/* 821C6014h case   61:*/		return 0x821C6018;
		  /* 821C6018h */ case   62:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C6018h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C6018h case   62:*/		return 0x821C601C;
		  /* 821C601Ch */ case   63:  		/* cmplwi CR6, R27, 0 */
		/* 821C601Ch case   63:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C601Ch case   63:*/		return 0x821C6020;
		  /* 821C6020h */ case   64:  		/* rlwinm R9, R10, 0, 17, 31 */
		/* 821C6020h case   64:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R9,regs.R10);
		/* 821C6020h case   64:*/		return 0x821C6024;
		  /* 821C6024h */ case   65:  		/* mulli R10, R9, 40 */
		/* 821C6024h case   65:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R9,0x28);
		/* 821C6024h case   65:*/		return 0x821C6028;
		  /* 821C6028h */ case   66:  		/* add R11, R10, R11 */
		/* 821C6028h case   66:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C6028h case   66:*/		return 0x821C602C;
		  /* 821C602Ch */ case   67:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C602Ch case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C602Ch case   67:*/		return 0x821C6030;
		  /* 821C6030h */ case   68:  		/* rlwinm R11, R11, 0, 25, 27 */
		/* 821C6030h case   68:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821C6030h case   68:*/		return 0x821C6034;
		  /* 821C6034h */ case   69:  		/* addi R11, R11, -48 */
		/* 821C6034h case   69:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD0);
		/* 821C6034h case   69:*/		return 0x821C6038;
		  /* 821C6038h */ case   70:  		/* cntlzw R11, R11 */
		/* 821C6038h case   70:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821C6038h case   70:*/		return 0x821C603C;
		  /* 821C603Ch */ case   71:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821C603Ch case   71:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821C603Ch case   71:*/		return 0x821C6040;
		  /* 821C6040h */ case   72:  		/* or R25, R11, R25 */
		/* 821C6040h case   72:*/		cpu::op::or<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 821C6040h case   72:*/		return 0x821C6044;
		  /* 821C6044h */ case   73:  		/* bc 4, CR6_EQ, 24 */
		/* 821C6044h case   73:*/		if ( !regs.CR[6].eq ) { return 0x821C605C;  }
		/* 821C6044h case   73:*/		return 0x821C6048;
		  /* 821C6048h */ case   74:  		/* mr R14, R30 */
		/* 821C6048h case   74:*/		regs.R14 = regs.R30;
		/* 821C6048h case   74:*/		return 0x821C604C;
		  /* 821C604Ch */ case   75:  		/* mr R18, R24 */
		/* 821C604Ch case   75:*/		regs.R18 = regs.R24;
		/* 821C604Ch case   75:*/		return 0x821C6050;
		  /* 821C6050h */ case   76:  		/* mr R26, R28 */
		/* 821C6050h case   76:*/		regs.R26 = regs.R28;
		/* 821C6050h case   76:*/		return 0x821C6054;
		  /* 821C6054h */ case   77:  		/* mr R23, R9 */
		/* 821C6054h case   77:*/		regs.R23 = regs.R9;
		/* 821C6054h case   77:*/		return 0x821C6058;
		  /* 821C6058h */ case   78:  		/* b 36 */
		/* 821C6058h case   78:*/		return 0x821C607C;
		/* 821C6058h case   78:*/		return 0x821C605C;
	}
	return 0x821C605C;
} // Block from 821C5F20h-821C605Ch (79 instructions)

//////////////////////////////////////////////////////
// Block at 821C605Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C605C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C605C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C605C);
		  /* 821C605Ch */ case    0:  		/* cmplwi CR6, R27, 1 */
		/* 821C605Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000001);
		/* 821C605Ch case    0:*/		return 0x821C6060;
		  /* 821C6060h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821C6060h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6074;  }
		/* 821C6060h case    1:*/		return 0x821C6064;
		  /* 821C6064h */ case    2:  		/* subfc R11, R28, R26 */
		/* 821C6064h case    2:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R28,regs.R26);
		/* 821C6064h case    2:*/		return 0x821C6068;
		  /* 821C6068h */ case    3:  		/* subf R17, R26, R28 */
		/* 821C6068h case    3:*/		cpu::op::subf<0>(regs,&regs.R17,regs.R26,regs.R28);
		/* 821C6068h case    3:*/		return 0x821C606C;
		  /* 821C606Ch */ case    4:  		/* subfe R11, R11, R11 */
		/* 821C606Ch case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C606Ch case    4:*/		return 0x821C6070;
		  /* 821C6070h */ case    5:  		/* and R21, R11, R21 */
		/* 821C6070h case    5:*/		cpu::op::and<0>(regs,&regs.R21,regs.R11,regs.R21);
		/* 821C6070h case    5:*/		return 0x821C6074;
	}
	return 0x821C6074;
} // Block from 821C605Ch-821C6074h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C6074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6074);
		  /* 821C6074h */ case    0:  		/* cmpw CR6, R18, R24 */
		/* 821C6074h case    0:*/		cpu::op::cmpw<6>(regs,regs.R18,regs.R24);
		/* 821C6074h case    0:*/		return 0x821C6078;
		  /* 821C6078h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821C6078h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6094;  }
		/* 821C6078h case    1:*/		return 0x821C607C;
	}
	return 0x821C607C;
} // Block from 821C6074h-821C607Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C607Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C607C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C607C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C607C);
		  /* 821C607Ch */ case    0:  		/* mullw R11, R27, R17 */
		/* 821C607Ch case    0:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R27,regs.R17);
		/* 821C607Ch case    0:*/		return 0x821C6080;
		  /* 821C6080h */ case    1:  		/* add R11, R11, R26 */
		/* 821C6080h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821C6080h case    1:*/		return 0x821C6084;
		  /* 821C6084h */ case    2:  		/* cmplw CR6, R11, R28 */
		/* 821C6084h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821C6084h case    2:*/		return 0x821C6088;
		  /* 821C6088h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821C6088h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C6094;  }
		/* 821C6088h case    3:*/		return 0x821C608C;
		  /* 821C608Ch */ case    4:  		/* cmplw CR6, R23, R9 */
		/* 821C608Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R9);
		/* 821C608Ch case    4:*/		return 0x821C6090;
		  /* 821C6090h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821C6090h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C6098;  }
		/* 821C6090h case    5:*/		return 0x821C6094;
	}
	return 0x821C6094;
} // Block from 821C607Ch-821C6094h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C6094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6094);
		  /* 821C6094h */ case    0:  		/* mr R21, R16 */
		/* 821C6094h case    0:*/		regs.R21 = regs.R16;
		/* 821C6094h case    0:*/		return 0x821C6098;
	}
	return 0x821C6098;
} // Block from 821C6094h-821C6098h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6098);
		  /* 821C6098h */ case    0:  		/* addi R27, R27, 1 */
		/* 821C6098h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821C6098h case    0:*/		return 0x821C609C;
		  /* 821C609Ch */ case    1:  		/* cmplw CR6, R27, R19 */
		/* 821C609Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R19);
		/* 821C609Ch case    1:*/		return 0x821C60A0;
		  /* 821C60A0h */ case    2:  		/* bc 12, CR6_LT, -288 */
		/* 821C60A0h case    2:*/		if ( regs.CR[6].lt ) { return 0x821C5F80;  }
		/* 821C60A0h case    2:*/		return 0x821C60A4;
		  /* 821C60A4h */ case    3:  		/* stb R21, <#[R1 + 81]> */
		/* 821C60A4h case    3:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000051) );
		/* 821C60A4h case    3:*/		return 0x821C60A8;
		  /* 821C60A8h */ case    4:  		/* stw R18, <#[R1 + 108]> */
		/* 821C60A8h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x0000006C) );
		/* 821C60A8h case    4:*/		return 0x821C60AC;
		  /* 821C60ACh */ case    5:  		/* stw R14, <#[R1 + 92]> */
		/* 821C60ACh case    5:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 821C60ACh case    5:*/		return 0x821C60B0;
	}
	return 0x821C60B0;
} // Block from 821C6098h-821C60B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C60B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C60B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C60B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C60B0);
		  /* 821C60B0h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821C60B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821C60B0h case    0:*/		return 0x821C60B4;
		  /* 821C60B4h */ case    1:  		/* stw R11, <#[R1 + 136]> */
		/* 821C60B4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821C60B4h case    1:*/		return 0x821C60B8;
		  /* 821C60B8h */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 821C60B8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C60D4;  }
		/* 821C60B8h case    2:*/		return 0x821C60BC;
		  /* 821C60BCh */ case    3:  		/* lwz R11, <#[R1 + 396]> */
		/* 821C60BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000018C) );
		/* 821C60BCh case    3:*/		return 0x821C60C0;
		  /* 821C60C0h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821C60C0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821C60C0h case    4:*/		return 0x821C60C4;
		  /* 821C60C4h */ case    5:  		/* bc 12, CR6_GT, 16 */
		/* 821C60C4h case    5:*/		if ( regs.CR[6].gt ) { return 0x821C60D4;  }
		/* 821C60C4h case    5:*/		return 0x821C60C8;
		  /* 821C60C8h */ case    6:  		/* lwz R11, <#[R31 + 40]> */
		/* 821C60C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C60C8h case    6:*/		return 0x821C60CC;
		  /* 821C60CCh */ case    7:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 821C60CCh case    7:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 821C60CCh case    7:*/		return 0x821C60D0;
		  /* 821C60D0h */ case    8:  		/* bc 4, CR0_EQ, 2360 */
		/* 821C60D0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C6A08;  }
		/* 821C60D0h case    8:*/		return 0x821C60D4;
	}
	return 0x821C60D4;
} // Block from 821C60B0h-821C60D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C60D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C60D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C60D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C60D4);
		  /* 821C60D4h */ case    0:  		/* addi R15, R22, 4 */
		/* 821C60D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R22,0x4);
		/* 821C60D4h case    0:*/		return 0x821C60D8;
		  /* 821C60D8h */ case    1:  		/* stw R15, <#[R1 + 112]> */
		/* 821C60D8h case    1:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 821C60D8h case    1:*/		return 0x821C60DC;
		  /* 821C60DCh */ case    2:  		/* lwz R18, <#[R15]> */
		/* 821C60DCh case    2:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R15 + 0x00000000) );
		/* 821C60DCh case    2:*/		return 0x821C60E0;
		  /* 821C60E0h */ case    3:  		/* cmplwi CR6, R18, 0 */
		/* 821C60E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821C60E0h case    3:*/		return 0x821C60E4;
		  /* 821C60E4h */ case    4:  		/* bc 12, CR6_EQ, 2320 */
		/* 821C60E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C69F4;  }
		/* 821C60E4h case    4:*/		return 0x821C60E8;
		  /* 821C60E8h */ case    5:  		/* lwz R21, <#[R18 + 16]> */
		/* 821C60E8h case    5:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R18 + 0x00000010) );
		/* 821C60E8h case    5:*/		return 0x821C60EC;
		  /* 821C60ECh */ case    6:  		/* cmplwi CR6, R21, 0 */
		/* 821C60ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821C60ECh case    6:*/		return 0x821C60F0;
		  /* 821C60F0h */ case    7:  		/* bc 12, CR6_EQ, 2288 */
		/* 821C60F0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C69E0;  }
		/* 821C60F0h case    7:*/		return 0x821C60F4;
		  /* 821C60F4h */ case    8:  		/* lwz R11, <#[R21 + 8]> */
		/* 821C60F4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821C60F4h case    8:*/		return 0x821C60F8;
		  /* 821C60F8h */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C60F8h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C60F8h case    9:*/		return 0x821C60FC;
		  /* 821C60FCh */ case   10:  		/* cmplwi CR6, R11, 15104 */
		/* 821C60FCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 821C60FCh case   10:*/		return 0x821C6100;
		  /* 821C6100h */ case   11:  		/* bc 4, CR6_EQ, 2452 */
		/* 821C6100h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C6A94;  }
		/* 821C6100h case   11:*/		return 0x821C6104;
		  /* 821C6104h */ case   12:  		/* lwz R25, <#[R21 + 16]> */
		/* 821C6104h case   12:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R21 + 0x00000010) );
		/* 821C6104h case   12:*/		return 0x821C6108;
		  /* 821C6108h */ case   13:  		/* b 20 */
		/* 821C6108h case   13:*/		return 0x821C611C;
		/* 821C6108h case   13:*/		return 0x821C610C;
		  /* 821C610Ch */ case   14:  		/* lwz R11, <#[R25]> */
		/* 821C610Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821C610Ch case   14:*/		return 0x821C6110;
		  /* 821C6110h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 821C6110h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821C6110h case   15:*/		return 0x821C6114;
		  /* 821C6114h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 821C6114h case   16:*/		if ( regs.CR[6].eq ) { return 0x821C6124;  }
		/* 821C6114h case   16:*/		return 0x821C6118;
		  /* 821C6118h */ case   17:  		/* lwz R25, <#[R25 + 4]> */
		/* 821C6118h case   17:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x00000004) );
		/* 821C6118h case   17:*/		return 0x821C611C;
	}
	return 0x821C611C;
} // Block from 821C60D4h-821C611Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C611Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C611C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C611C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C611C);
		  /* 821C611Ch */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821C611Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821C611Ch case    0:*/		return 0x821C6120;
		  /* 821C6120h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821C6120h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C610C;  }
		/* 821C6120h case    1:*/		return 0x821C6124;
	}
	return 0x821C6124;
} // Block from 821C611Ch-821C6124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6124);
		  /* 821C6124h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821C6124h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821C6124h case    0:*/		return 0x821C6128;
		  /* 821C6128h */ case    1:  		/* bc 12, CR6_EQ, 2464 */
		/* 821C6128h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C6AC8;  }
		/* 821C6128h case    1:*/		return 0x821C612C;
		  /* 821C612Ch */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C612Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C612Ch case    2:*/		return 0x821C6130;
		  /* 821C6130h */ case    3:  		/* rlwinm R11, R11, 0, 18, 31 */
		/* 821C6130h case    3:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R11,regs.R11);
		/* 821C6130h case    3:*/		return 0x821C6134;
		  /* 821C6134h */ case    4:  		/* cmplw CR6, R19, R11 */
		/* 821C6134h case    4:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 821C6134h case    4:*/		return 0x821C6138;
		  /* 821C6138h */ case    5:  		/* bc 4, CR6_EQ, 2448 */
		/* 821C6138h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C6AC8;  }
		/* 821C6138h case    5:*/		return 0x821C613C;
		  /* 821C613Ch */ case    6:  		/* lwz R29, <#[R21 + 48]> */
		/* 821C613Ch case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000030) );
		/* 821C613Ch case    6:*/		return 0x821C6140;
		  /* 821C6140h */ case    7:  		/* lwz R11, <#[R29 + 12]> */
		/* 821C6140h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C6140h case    7:*/		return 0x821C6144;
		  /* 821C6144h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C6144h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6144h case    8:*/		return 0x821C6148;
		  /* 821C6148h */ case    9:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821C6148h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821C6148h case    9:*/		return 0x821C614C;
		  /* 821C614Ch */ case   10:  		/* cmplwi CR6, R10, 7040 */
		/* 821C614Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00001B80);
		/* 821C614Ch case   10:*/		return 0x821C6150;
		  /* 821C6150h */ case   11:  		/* bc 4, CR6_EQ, 2384 */
		/* 821C6150h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C6AA0;  }
		/* 821C6150h case   11:*/		return 0x821C6154;
		  /* 821C6154h */ case   12:  		/* lwz R26, <#[R11 + 44]> */
		/* 821C6154h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x0000002C) );
		/* 821C6154h case   12:*/		return 0x821C6158;
		  /* 821C6158h */ case   13:  		/* li R10, 0 */
		/* 821C6158h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C6158h case   13:*/		return 0x821C615C;
		  /* 821C615Ch */ case   14:  		/* li R9, 0 */
		/* 821C615Ch case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C615Ch case   14:*/		return 0x821C6160;
		  /* 821C6160h */ case   15:  		/* li R8, 0 */
		/* 821C6160h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C6160h case   15:*/		return 0x821C6164;
		  /* 821C6164h */ case   16:  		/* addi R7, R1, 100 */
		/* 821C6164h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x64);
		/* 821C6164h case   16:*/		return 0x821C6168;
		  /* 821C6168h */ case   17:  		/* addi R6, R1, 104 */
		/* 821C6168h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x68);
		/* 821C6168h case   17:*/		return 0x821C616C;
		  /* 821C616Ch */ case   18:  		/* addi R5, R1, 96 */
		/* 821C616Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821C616Ch case   18:*/		return 0x821C6170;
		  /* 821C6170h */ case   19:  		/* li R4, 0 */
		/* 821C6170h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C6170h case   19:*/		return 0x821C6174;
		  /* 821C6174h */ case   20:  		/* mr R3, R26 */
		/* 821C6174h case   20:*/		regs.R3 = regs.R26;
		/* 821C6174h case   20:*/		return 0x821C6178;
		  /* 821C6178h */ case   21:  		/* bl 381784 */
		/* 821C6178h case   21:*/		regs.LR = 0x821C617C; return 0x822234D0;
		/* 821C6178h case   21:*/		return 0x821C617C;
		  /* 821C617Ch */ case   22:  		/* lwz R3, <#[R1 + 96]> */
		/* 821C617Ch case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821C617Ch case   22:*/		return 0x821C6180;
		  /* 821C6180h */ case   23:  		/* lwz R11, <#[R1 + 136]> */
		/* 821C6180h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821C6180h case   23:*/		return 0x821C6184;
		  /* 821C6184h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821C6184h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6184h case   24:*/		return 0x821C6188;
		  /* 821C6188h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C6188h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6188h case   25:*/		return 0x821C618C;
		  /* 821C618Ch */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C618Ch case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C618Ch case   26:*/		return 0x821C6190;
		  /* 821C6190h */ case   27:  		/* bc 12, CR6_EQ, 1104 */
		/* 821C6190h case   27:*/		if ( regs.CR[6].eq ) { return 0x821C65E0;  }
		/* 821C6190h case   27:*/		return 0x821C6194;
		  /* 821C6194h */ case   28:  		/* cmplwi CR6, R11, 16000 */
		/* 821C6194h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821C6194h case   28:*/		return 0x821C6198;
		  /* 821C6198h */ case   29:  		/* bc 4, CR6_EQ, 276 */
		/* 821C6198h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821C62AC;  }
		/* 821C6198h case   29:*/		return 0x821C619C;
		  /* 821C619Ch */ case   30:  		/* lwz R5, <#[R1 + 100]> */
		/* 821C619Ch case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 821C619Ch case   30:*/		return 0x821C61A0;
		  /* 821C61A0h */ case   31:  		/* lwz R4, <#[R1 + 104]> */
		/* 821C61A0h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000068) );
		/* 821C61A0h case   31:*/		return 0x821C61A4;
		  /* 821C61A4h */ case   32:  		/* bl 374012 */
		/* 821C61A4h case   32:*/		regs.LR = 0x821C61A8; return 0x822216A0;
		/* 821C61A4h case   32:*/		return 0x821C61A8;
		  /* 821C61A8h */ case   33:  		/* fctidz FR0, FR1 */
		/* 821C61A8h case   33:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 821C61A8h case   33:*/		return 0x821C61AC;
		  /* 821C61ACh */ case   34:  		/* stfd FR0, <#[R1 + 144]> */
		/* 821C61ACh case   34:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000090) );
		/* 821C61ACh case   34:*/		return 0x821C61B0;
		  /* 821C61B0h */ case   35:  		/* lwz R11, <#[R1 + 148]> */
		/* 821C61B0h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821C61B0h case   35:*/		return 0x821C61B4;
		  /* 821C61B4h */ case   36:  		/* mr R10, R11 */
		/* 821C61B4h case   36:*/		regs.R10 = regs.R11;
		/* 821C61B4h case   36:*/		return 0x821C61B8;
		  /* 821C61B8h */ case   37:  		/* std R11, <#[R1 + 160]> */
		/* 821C61B8h case   37:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 821C61B8h case   37:*/		return 0x821C61BC;
		  /* 821C61BCh */ case   38:  		/* lfd FR0, <#[R1 + 160]> */
		/* 821C61BCh case   38:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000A0) );
		/* 821C61BCh case   38:*/		return 0x821C61C0;
		  /* 821C61C0h */ case   39:  		/* fcfid FR0, FR0 */
		/* 821C61C0h case   39:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C61C0h case   39:*/		return 0x821C61C4;
		  /* 821C61C4h */ case   40:  		/* fcmpu CR6, FR1, FR0 */
		/* 821C61C4h case   40:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821C61C4h case   40:*/		return 0x821C61C8;
		  /* 821C61C8h */ case   41:  		/* bc 4, CR6_EQ, 228 */
		/* 821C61C8h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821C62AC;  }
		/* 821C61C8h case   41:*/		return 0x821C61CC;
		  /* 821C61CCh */ case   42:  		/* cmplw CR6, R11, R19 */
		/* 821C61CCh case   42:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821C61CCh case   42:*/		return 0x821C61D0;
		  /* 821C61D0h */ case   43:  		/* bc 4, CR6_LT, 220 */
		/* 821C61D0h case   43:*/		if ( !regs.CR[6].lt ) { return 0x821C62AC;  }
		/* 821C61D0h case   43:*/		return 0x821C61D4;
		  /* 821C61D4h */ case   44:  		/* lwz R10, <#[R20 + 8]> */
		/* 821C61D4h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821C61D4h case   44:*/		return 0x821C61D8;
		  /* 821C61D8h */ case   45:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C61D8h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C61D8h case   45:*/		return 0x821C61DC;
		  /* 821C61DCh */ case   46:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821C61DCh case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821C61DCh case   46:*/		return 0x821C61E0;
		  /* 821C61E0h */ case   47:  		/* lwz R30, <#[R11 + 12]> */
		/* 821C61E0h case   47:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C61E0h case   47:*/		return 0x821C61E4;
		  /* 821C61E4h */ case   48:  		/* cmplwi CR6, R30, 0 */
		/* 821C61E4h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C61E4h case   48:*/		return 0x821C61E8;
		  /* 821C61E8h */ case   49:  		/* bc 12, CR6_EQ, 196 */
		/* 821C61E8h case   49:*/		if ( regs.CR[6].eq ) { return 0x821C62AC;  }
		/* 821C61E8h case   49:*/		return 0x821C61EC;
		  /* 821C61ECh */ case   50:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C61ECh case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C61ECh case   50:*/		return 0x821C61F0;
		  /* 821C61F0h */ case   51:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C61F0h case   51:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C61F0h case   51:*/		return 0x821C61F4;
		  /* 821C61F4h */ case   52:  		/* cmplwi CR6, R10, 15872 */
		/* 821C61F4h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E00);
		/* 821C61F4h case   52:*/		return 0x821C61F8;
		  /* 821C61F8h */ case   53:  		/* bc 4, CR6_EQ, 2228 */
		/* 821C61F8h case   53:*/		if ( !regs.CR[6].eq ) { return 0x821C6AAC;  }
		/* 821C61F8h case   53:*/		return 0x821C61FC;
		  /* 821C61FCh */ case   54:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C61FCh case   54:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C61FCh case   54:*/		return 0x821C6200;
		  /* 821C6200h */ case   55:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C6200h case   55:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C6200h case   55:*/		return 0x821C6204;
		  /* 821C6204h */ case   56:  		/* li R4, 124 */
		/* 821C6204h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x7C);
		/* 821C6204h case   56:*/		return 0x821C6208;
		  /* 821C6208h */ case   57:  		/* mr R3, R31 */
		/* 821C6208h case   57:*/		regs.R3 = regs.R31;
		/* 821C6208h case   57:*/		return 0x821C620C;
		  /* 821C620Ch */ case   58:  		/* bl -400860 */
		/* 821C620Ch case   58:*/		regs.LR = 0x821C6210; return 0x82164430;
		/* 821C620Ch case   58:*/		return 0x821C6210;
		  /* 821C6210h */ case   59:  		/* addi R10, R30, -8 */
		/* 821C6210h case   59:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF8);
		/* 821C6210h case   59:*/		return 0x821C6214;
		  /* 821C6214h */ case   60:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C6214h case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C6214h case   60:*/		return 0x821C6218;
		  /* 821C6218h */ case   61:  		/* lwzx R10, <#[R3 + R10]> */
		/* 821C6218h case   61:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821C6218h case   61:*/		return 0x821C621C;
		  /* 821C621Ch */ case   62:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 821C621Ch case   62:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 821C621Ch case   62:*/		return 0x821C6220;
		  /* 821C6220h */ case   63:  		/* mulli R10, R10, 40 */
		/* 821C6220h case   63:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 821C6220h case   63:*/		return 0x821C6224;
		  /* 821C6224h */ case   64:  		/* add R11, R10, R11 */
		/* 821C6224h case   64:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C6224h case   64:*/		return 0x821C6228;
		  /* 821C6228h */ case   65:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C6228h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C6228h case   65:*/		return 0x821C622C;
		  /* 821C622Ch */ case   66:  		/* rlwinm R11, R11, 0, 25, 27 */
		/* 821C622Ch case   66:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R11,regs.R11);
		/* 821C622Ch case   66:*/		return 0x821C6230;
		  /* 821C6230h */ case   67:  		/* cmplwi CR6, R11, 48 */
		/* 821C6230h case   67:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000030);
		/* 821C6230h case   67:*/		return 0x821C6234;
		  /* 821C6234h */ case   68:  		/* bc 4, CR6_EQ, 2168 */
		/* 821C6234h case   68:*/		if ( !regs.CR[6].eq ) { return 0x821C6AAC;  }
		/* 821C6234h case   68:*/		return 0x821C6238;
		  /* 821C6238h */ case   69:  		/* addi R8, R21, 4 */
		/* 821C6238h case   69:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R21,0x4);
		/* 821C6238h case   69:*/		return 0x821C623C;
		  /* 821C623Ch */ case   70:  		/* lwz R11, <#[R8]> */
		/* 821C623Ch case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C623Ch case   70:*/		return 0x821C6240;
		  /* 821C6240h */ case   71:  		/* cmplwi CR6, R11, 0 */
		/* 821C6240h case   71:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6240h case   71:*/		return 0x821C6244;
		  /* 821C6244h */ case   72:  		/* bc 12, CR6_EQ, 1908 */
		/* 821C6244h case   72:*/		if ( regs.CR[6].eq ) { return 0x821C69B8;  }
		/* 821C6244h case   72:*/		return 0x821C6248;
		  /* 821C6248h */ case   73:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C6248h case   73:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C6248h case   73:*/		return 0x821C624C;
		  /* 821C624Ch */ case   74:  		/* cmplwi CR6, R10, 0 */
		/* 821C624Ch case   74:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C624Ch case   74:*/		return 0x821C6250;
		  /* 821C6250h */ case   75:  		/* bc 12, CR6_EQ, 72 */
		/* 821C6250h case   75:*/		if ( regs.CR[6].eq ) { return 0x821C6298;  }
		/* 821C6250h case   75:*/		return 0x821C6254;
		  /* 821C6254h */ case   76:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C6254h case   76:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C6254h case   76:*/		return 0x821C6258;
		  /* 821C6258h */ case   77:  		/* addi R10, R10, 4 */
		/* 821C6258h case   77:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C6258h case   77:*/		return 0x821C625C;
		  /* 821C625Ch */ case   78:  		/* lwz R9, <#[R10]> */
		/* 821C625Ch case   78:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C625Ch case   78:*/		return 0x821C6260;
		  /* 821C6260h */ case   79:  		/* b 12 */
		/* 821C6260h case   79:*/		return 0x821C626C;
		/* 821C6260h case   79:*/		return 0x821C6264;
		  /* 821C6264h */ case   80:  		/* addi R10, R9, 8 */
		/* 821C6264h case   80:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C6264h case   80:*/		return 0x821C6268;
		  /* 821C6268h */ case   81:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C6268h case   81:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C6268h case   81:*/		return 0x821C626C;
	}
	return 0x821C626C;
} // Block from 821C6124h-821C626Ch (82 instructions)

//////////////////////////////////////////////////////
// Block at 821C626Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C626C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C626C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C626C);
		  /* 821C626Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C626Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C626Ch case    0:*/		return 0x821C6270;
		  /* 821C6270h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C6270h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6264;  }
		/* 821C6270h case    1:*/		return 0x821C6274;
		  /* 821C6274h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C6274h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6274h case    2:*/		return 0x821C6278;
		  /* 821C6278h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C6278h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6278h case    3:*/		return 0x821C627C;
		  /* 821C627Ch */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C627Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C627Ch case    4:*/		return 0x821C6280;
		  /* 821C6280h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C6280h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6280h case    5:*/		return 0x821C6284;
		  /* 821C6284h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C6284h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6284h case    6:*/		return 0x821C6288;
		  /* 821C6288h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C6288h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6288h case    7:*/		return 0x821C628C;
		  /* 821C628Ch */ case    8:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821C628Ch case    8:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821C628Ch case    8:*/		return 0x821C6290;
		  /* 821C6290h */ case    9:  		/* stw R30, <#[R11 + 12]> */
		/* 821C6290h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C6290h case    9:*/		return 0x821C6294;
		  /* 821C6294h */ case   10:  		/* stw R10, <#[R11]> */
		/* 821C6294h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6294h case   10:*/		return 0x821C6298;
	}
	return 0x821C6298;
} // Block from 821C626Ch-821C6298h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C6298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6298);
		  /* 821C6298h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C6298h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C6298h case    0:*/		return 0x821C629C;
		  /* 821C629Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C629Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C629Ch case    1:*/		return 0x821C62A0;
		  /* 821C62A0h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821C62A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C623C;  }
		/* 821C62A0h case    2:*/		return 0x821C62A4;
		  /* 821C62A4h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C62A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C62A4h case    3:*/		return 0x821C62A8;
		  /* 821C62A8h */ case    4:  		/* b -108 */
		/* 821C62A8h case    4:*/		return 0x821C623C;
		/* 821C62A8h case    4:*/		return 0x821C62AC;
	}
	return 0x821C62AC;
} // Block from 821C6298h-821C62ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C62ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C62AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C62AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C62AC);
		  /* 821C62ACh */ case    0:  		/* addi R22, R21, 4 */
		/* 821C62ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R21,0x4);
		/* 821C62ACh case    0:*/		return 0x821C62B0;
		  /* 821C62B0h */ case    1:  		/* lwz R23, <#[R22]> */
		/* 821C62B0h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R22 + 0x00000000) );
		/* 821C62B0h case    1:*/		return 0x821C62B4;
		  /* 821C62B4h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 821C62B4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821C62B4h case    2:*/		return 0x821C62B8;
		  /* 821C62B8h */ case    3:  		/* bc 12, CR6_EQ, 1792 */
		/* 821C62B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C69B8;  }
		/* 821C62B8h case    3:*/		return 0x821C62BC;
		  /* 821C62BCh */ case    4:  		/* lwz R30, <#[R23 + 16]> */
		/* 821C62BCh case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000010) );
		/* 821C62BCh case    4:*/		return 0x821C62C0;
		  /* 821C62C0h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821C62C0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C62C0h case    5:*/		return 0x821C62C4;
		  /* 821C62C4h */ case    6:  		/* bc 12, CR6_EQ, 776 */
		/* 821C62C4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C65CC;  }
		/* 821C62C4h case    6:*/		return 0x821C62C8;
		  /* 821C62C8h */ case    7:  		/* mr R3, R30 */
		/* 821C62C8h case    7:*/		regs.R3 = regs.R30;
		/* 821C62C8h case    7:*/		return 0x821C62CC;
		  /* 821C62CCh */ case    8:  		/* bl -35220 */
		/* 821C62CCh case    8:*/		regs.LR = 0x821C62D0; return 0x821BD938;
		/* 821C62CCh case    8:*/		return 0x821C62D0;
		  /* 821C62D0h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C62D0h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C62D0h case    9:*/		return 0x821C62D4;
		  /* 821C62D4h */ case   10:  		/* bc 12, CR0_EQ, 760 */
		/* 821C62D4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821C65CC;  }
		/* 821C62D4h case   10:*/		return 0x821C62D8;
		  /* 821C62D8h */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C62D8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C62D8h case   11:*/		return 0x821C62DC;
		  /* 821C62DCh */ case   12:  		/* cmplwi CR6, R19, 1 */
		/* 821C62DCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 821C62DCh case   12:*/		return 0x821C62E0;
		  /* 821C62E0h */ case   13:  		/* bc 4, CR6_EQ, 104 */
		/* 821C62E0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C6348;  }
		/* 821C62E0h case   13:*/		return 0x821C62E4;
		  /* 821C62E4h */ case   14:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C62E4h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C62E4h case   14:*/		return 0x821C62E8;
		  /* 821C62E8h */ case   15:  		/* cmplwi CR6, R10, 12288 */
		/* 821C62E8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821C62E8h case   15:*/		return 0x821C62EC;
		  /* 821C62ECh */ case   16:  		/* bc 4, CR6_EQ, 24 */
		/* 821C62ECh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C6304;  }
		/* 821C62ECh case   16:*/		return 0x821C62F0;
		  /* 821C62F0h */ case   17:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821C62F0h case   17:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821C62F0h case   17:*/		return 0x821C62F4;
		  /* 821C62F4h */ case   18:  		/* lis R10, 8 */
		/* 821C62F4h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821C62F4h case   18:*/		return 0x821C62F8;
		  /* 821C62F8h */ case   19:  		/* cmplw CR6, R11, R10 */
		/* 821C62F8h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C62F8h case   19:*/		return 0x821C62FC;
		  /* 821C62FCh */ case   20:  		/* li R11, 1 */
		/* 821C62FCh case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C62FCh case   20:*/		return 0x821C6300;
		  /* 821C6300h */ case   21:  		/* bc 12, CR6_GT, 8 */
		/* 821C6300h case   21:*/		if ( regs.CR[6].gt ) { return 0x821C6308;  }
		/* 821C6300h case   21:*/		return 0x821C6304;
	}
	return 0x821C6304;
} // Block from 821C62ACh-821C6304h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C6304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6304);
		  /* 821C6304h */ case    0:  		/* mr R11, R16 */
		/* 821C6304h case    0:*/		regs.R11 = regs.R16;
		/* 821C6304h case    0:*/		return 0x821C6308;
	}
	return 0x821C6308;
} // Block from 821C6304h-821C6308h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6308);
		  /* 821C6308h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821C6308h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C6308h case    0:*/		return 0x821C630C;
		  /* 821C630Ch */ case    1:  		/* lwz R10, <#[R20 + 8]> */
		/* 821C630Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821C630Ch case    1:*/		return 0x821C6310;
		  /* 821C6310h */ case    2:  		/* mr R5, R31 */
		/* 821C6310h case    2:*/		regs.R5 = regs.R31;
		/* 821C6310h case    2:*/		return 0x821C6314;
		  /* 821C6314h */ case    3:  		/* addic R9, R11, -1 */
		/* 821C6314h case    3:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821C6314h case    3:*/		return 0x821C6318;
		  /* 821C6318h */ case    4:  		/* mr R3, R30 */
		/* 821C6318h case    4:*/		regs.R3 = regs.R30;
		/* 821C6318h case    4:*/		return 0x821C631C;
		  /* 821C631Ch */ case    5:  		/* subfe R11, R9, R11 */
		/* 821C631Ch case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C631Ch case    5:*/		return 0x821C6320;
		  /* 821C6320h */ case    6:  		/* lwz R28, <#[R10]> */
		/* 821C6320h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6320h case    6:*/		return 0x821C6324;
		  /* 821C6324h */ case    7:  		/* addi R11, R11, 11 */
		/* 821C6324h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821C6324h case    7:*/		return 0x821C6328;
		  /* 821C6328h */ case    8:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 821C6328h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 821C6328h case    8:*/		return 0x821C632C;
		  /* 821C632Ch */ case    9:  		/* lwzx R4, <#[R29 + R30]> */
		/* 821C632Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 821C632Ch case    9:*/		return 0x821C6330;
		  /* 821C6330h */ case   10:  		/* bl -317984 */
		/* 821C6330h case   10:*/		regs.LR = 0x821C6334; return 0x82178910;
		/* 821C6330h case   10:*/		return 0x821C6334;
		  /* 821C6334h */ case   11:  		/* mr R4, R28 */
		/* 821C6334h case   11:*/		regs.R4 = regs.R28;
		/* 821C6334h case   11:*/		return 0x821C6338;
		  /* 821C6338h */ case   12:  		/* mr R3, R30 */
		/* 821C6338h case   12:*/		regs.R3 = regs.R30;
		/* 821C6338h case   12:*/		return 0x821C633C;
		  /* 821C633Ch */ case   13:  		/* bl -319860 */
		/* 821C633Ch case   13:*/		regs.LR = 0x821C6340; return 0x821781C8;
		/* 821C633Ch case   13:*/		return 0x821C6340;
		  /* 821C6340h */ case   14:  		/* stwx R3, <#[R29 + R30]> */
		/* 821C6340h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 821C6340h case   14:*/		return 0x821C6344;
		  /* 821C6344h */ case   15:  		/* b 648 */
		/* 821C6344h case   15:*/		return 0x821C65CC;
		/* 821C6344h case   15:*/		return 0x821C6348;
	}
	return 0x821C6348;
} // Block from 821C6308h-821C6348h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C6348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6348);
		  /* 821C6348h */ case    0:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C6348h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C6348h case    0:*/		return 0x821C634C;
		  /* 821C634Ch */ case    1:  		/* mr R3, R31 */
		/* 821C634Ch case    1:*/		regs.R3 = regs.R31;
		/* 821C634Ch case    1:*/		return 0x821C6350;
	}
	return 0x821C6350;
} // Block from 821C6348h-821C6350h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6350h
// Function '?CloneVisitedBlocks@Compiler@D3DXShader@@AAAXPAV?$DoubleLinkList@VBlock@D3DXShader@@$0A@@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6350);
		  /* 821C6350h */ case    0:  		/* cmplwi CR6, R11, 12288 */
		/* 821C6350h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003000);
		/* 821C6350h case    0:*/		return 0x821C6354;
		  /* 821C6354h */ case    1:  		/* bc 12, CR6_EQ, 1892 */
		/* 821C6354h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C6AB8;  }
		/* 821C6354h case    1:*/		return 0x821C6358;
		  /* 821C6358h */ case    2:  		/* mr R4, R26 */
		/* 821C6358h case    2:*/		regs.R4 = regs.R26;
		/* 821C6358h case    2:*/		return 0x821C635C;
		  /* 821C635Ch */ case    3:  		/* lwz R5, <#[R26 + 12]> */
		/* 821C635Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C635Ch case    3:*/		return 0x821C6360;
		  /* 821C6360h */ case    4:  		/* bl -348784 */
		/* 821C6360h case    4:*/		regs.LR = 0x821C6364; return 0x821710F0;
		/* 821C6360h case    4:*/		return 0x821C6364;
		  /* 821C6364h */ case    5:  		/* mr R29, R3 */
		/* 821C6364h case    5:*/		regs.R29 = regs.R3;
		/* 821C6364h case    5:*/		return 0x821C6368;
		  /* 821C6368h */ case    6:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C6368h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C6368h case    6:*/		return 0x821C636C;
		  /* 821C636Ch */ case    7:  		/* mr R4, R30 */
		/* 821C636Ch case    7:*/		regs.R4 = regs.R30;
		/* 821C636Ch case    7:*/		return 0x821C6370;
		  /* 821C6370h */ case    8:  		/* mr R3, R31 */
		/* 821C6370h case    8:*/		regs.R3 = regs.R31;
		/* 821C6370h case    8:*/		return 0x821C6374;
		  /* 821C6374h */ case    9:  		/* lwz R10, <#[R29]> */
		/* 821C6374h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C6374h case    9:*/		return 0x821C6378;
		  /* 821C6378h */ case   10:  		/* rlwimi R10, R11, 11, 4, 6 */
		/* 821C6378h case   10:*/		cpu::op::rlwimi<0,11,4,6>(regs,&regs.R10,regs.R11);
		/* 821C6378h case   10:*/		return 0x821C637C;
		  /* 821C637Ch */ case   11:  		/* stw R10, <#[R29]> */
		/* 821C637Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C637Ch case   11:*/		return 0x821C6380;
		  /* 821C6380h */ case   12:  		/* rlwinm R11, R10, 0, 27, 18 */
		/* 821C6380h case   12:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R10);
		/* 821C6380h case   12:*/		return 0x821C6384;
		  /* 821C6384h */ case   13:  		/* lwz R10, <#[R26]> */
		/* 821C6384h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821C6384h case   13:*/		return 0x821C6388;
		  /* 821C6388h */ case   14:  		/* rlwinm R10, R10, 27, 30, 31 */
		/* 821C6388h case   14:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R10,regs.R10);
		/* 821C6388h case   14:*/		return 0x821C638C;
		  /* 821C638Ch */ case   15:  		/* rlwinm R9, R10, 2, 0, 29 */
		/* 821C638Ch case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821C638Ch case   15:*/		return 0x821C6390;
		  /* 821C6390h */ case   16:  		/* or R9, R9, R10 */
		/* 821C6390h case   16:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821C6390h case   16:*/		return 0x821C6394;
		  /* 821C6394h */ case   17:  		/* rlwinm R9, R9, 2, 26, 29 */
		/* 821C6394h case   17:*/		cpu::op::rlwinm<0,2,26,29>(regs,&regs.R9,regs.R9);
		/* 821C6394h case   17:*/		return 0x821C6398;
		  /* 821C6398h */ case   18:  		/* or R9, R9, R10 */
		/* 821C6398h case   18:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821C6398h case   18:*/		return 0x821C639C;
		  /* 821C639Ch */ case   19:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821C639Ch case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821C639Ch case   19:*/		return 0x821C63A0;
		  /* 821C63A0h */ case   20:  		/* or R10, R9, R10 */
		/* 821C63A0h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C63A0h case   20:*/		return 0x821C63A4;
		  /* 821C63A4h */ case   21:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821C63A4h case   21:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821C63A4h case   21:*/		return 0x821C63A8;
		  /* 821C63A8h */ case   22:  		/* or R11, R10, R11 */
		/* 821C63A8h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C63A8h case   22:*/		return 0x821C63AC;
		  /* 821C63ACh */ case   23:  		/* stw R11, <#[R29]> */
		/* 821C63ACh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C63ACh case   23:*/		return 0x821C63B0;
		  /* 821C63B0h */ case   24:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C63B0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C63B0h case   24:*/		return 0x821C63B4;
		  /* 821C63B4h */ case   25:  		/* lwz R5, <#[R11]> */
		/* 821C63B4h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 821C63B4h case   25:*/		return 0x821C63B8;
		  /* 821C63B8h */ case   26:  		/* bl 387832 */
		/* 821C63B8h case   26:*/		regs.LR = 0x821C63BC; return 0x82224EB0;
		/* 821C63B8h case   26:*/		return 0x821C63BC;
		  /* 821C63BCh */ case   27:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C63BCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C63BCh case   27:*/		return 0x821C63C0;
		  /* 821C63C0h */ case   28:  		/* mr R28, R3 */
		/* 821C63C0h case   28:*/		regs.R28 = regs.R3;
		/* 821C63C0h case   28:*/		return 0x821C63C4;
		  /* 821C63C4h */ case   29:  		/* lwz R5, <#[R11 + 4]> */
		/* 821C63C4h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821C63C4h case   29:*/		return 0x821C63C8;
		  /* 821C63C8h */ case   30:  		/* mr R4, R30 */
		/* 821C63C8h case   30:*/		regs.R4 = regs.R30;
		/* 821C63C8h case   30:*/		return 0x821C63CC;
		  /* 821C63CCh */ case   31:  		/* mr R3, R31 */
		/* 821C63CCh case   31:*/		regs.R3 = regs.R31;
		/* 821C63CCh case   31:*/		return 0x821C63D0;
		  /* 821C63D0h */ case   32:  		/* bl 387808 */
		/* 821C63D0h case   32:*/		regs.LR = 0x821C63D4; return 0x82224EB0;
		/* 821C63D0h case   32:*/		return 0x821C63D4;
		  /* 821C63D4h */ case   33:  		/* mr R8, R3 */
		/* 821C63D4h case   33:*/		regs.R8 = regs.R3;
		/* 821C63D4h case   33:*/		return 0x821C63D8;
		  /* 821C63D8h */ case   34:  		/* mr R7, R28 */
		/* 821C63D8h case   34:*/		regs.R7 = regs.R28;
		/* 821C63D8h case   34:*/		return 0x821C63DC;
		  /* 821C63DCh */ case   35:  		/* mr R6, R29 */
		/* 821C63DCh case   35:*/		regs.R6 = regs.R29;
		/* 821C63DCh case   35:*/		return 0x821C63E0;
		  /* 821C63E0h */ case   36:  		/* mr R5, R30 */
		/* 821C63E0h case   36:*/		regs.R5 = regs.R30;
		/* 821C63E0h case   36:*/		return 0x821C63E4;
		  /* 821C63E4h */ case   37:  		/* li R4, 0 */
		/* 821C63E4h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C63E4h case   37:*/		return 0x821C63E8;
	}
	return 0x821C63E8;
} // Block from 821C6350h-821C63E8h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821C63E8h
// Function '?CloneInstructionsInList@Compiler@D3DXShader@@AAAKPAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@1_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C63E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C63E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C63E8);
		  /* 821C63E8h */ case    0:  		/* mr R3, R31 */
		/* 821C63E8h case    0:*/		regs.R3 = regs.R31;
		/* 821C63E8h case    0:*/		return 0x821C63EC;
		  /* 821C63ECh */ case    1:  		/* bl -14636 */
		/* 821C63ECh case    1:*/		regs.LR = 0x821C63F0; return 0x821C2AC0;
		/* 821C63ECh case    1:*/		return 0x821C63F0;
		  /* 821C63F0h */ case    2:  		/* mr R28, R3 */
		/* 821C63F0h case    2:*/		regs.R28 = regs.R3;
		/* 821C63F0h case    2:*/		return 0x821C63F4;
		  /* 821C63F4h */ case    3:  		/* li R5, 22 */
		/* 821C63F4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 821C63F4h case    3:*/		return 0x821C63F8;
		  /* 821C63F8h */ case    4:  		/* li R4, 12 */
		/* 821C63F8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 821C63F8h case    4:*/		return 0x821C63FC;
		  /* 821C63FCh */ case    5:  		/* mr R3, R31 */
		/* 821C63FCh case    5:*/		regs.R3 = regs.R31;
		/* 821C63FCh case    5:*/		return 0x821C6400;
		  /* 821C6400h */ case    6:  		/* bl -366680 */
		/* 821C6400h case    6:*/		regs.LR = 0x821C6404; return 0x8216CBA8;
		/* 821C6400h case    6:*/		return 0x821C6404;
		  /* 821C6404h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 821C6404h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6404h case    7:*/		return 0x821C6408;
		  /* 821C6408h */ case    8:  		/* rlwinm R24, R19, 0, 18, 31 */
		/* 821C6408h case    8:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R24,regs.R19);
		/* 821C6408h case    8:*/		return 0x821C640C;
		  /* 821C640Ch */ case    9:  		/* stw R16, <#[R3]> */
		/* 821C640Ch case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000000) );
		/* 821C640Ch case    9:*/		return 0x821C6410;
		  /* 821C6410h */ case   10:  		/* rlwinm R10, R10, 0, 0, 17 */
		/* 821C6410h case   10:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R10,regs.R10);
		/* 821C6410h case   10:*/		return 0x821C6414;
		  /* 821C6414h */ case   11:  		/* li R11, 1 */
		/* 821C6414h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C6414h case   11:*/		return 0x821C6418;
		  /* 821C6418h */ case   12:  		/* or R10, R10, R24 */
		/* 821C6418h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R24);
		/* 821C6418h case   12:*/		return 0x821C641C;
		  /* 821C641Ch */ case   13:  		/* li R27, 2 */
		/* 821C641Ch case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x2);
		/* 821C641Ch case   13:*/		return 0x821C6420;
		  /* 821C6420h */ case   14:  		/* rlwimi R10, R11, 14, 4, 17 */
		/* 821C6420h case   14:*/		cpu::op::rlwimi<0,14,4,17>(regs,&regs.R10,regs.R11);
		/* 821C6420h case   14:*/		return 0x821C6424;
		  /* 821C6424h */ case   15:  		/* cmplwi CR6, R19, 2 */
		/* 821C6424h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000002);
		/* 821C6424h case   15:*/		return 0x821C6428;
		  /* 821C6428h */ case   16:  		/* stw R10, <#[R3 + 8]> */
		/* 821C6428h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6428h case   16:*/		return 0x821C642C;
		  /* 821C642Ch */ case   17:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C642Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C642Ch case   17:*/		return 0x821C6430;
		  /* 821C6430h */ case   18:  		/* stw R11, <#[R3 + 4]> */
		/* 821C6430h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C6430h case   18:*/		return 0x821C6434;
		  /* 821C6434h */ case   19:  		/* stw R3, <#[R28 + 16]> */
		/* 821C6434h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 821C6434h case   19:*/		return 0x821C6438;
		  /* 821C6438h */ case   20:  		/* bc 4, CR6_GT, 280 */
		/* 821C6438h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821C6550;  }
		/* 821C6438h case   20:*/		return 0x821C643C;
		  /* 821C643Ch */ case   21:  		/* li R25, 8 */
		/* 821C643Ch case   21:*/		cpu::op::li<0>(regs,&regs.R25,0x8);
		/* 821C643Ch case   21:*/		return 0x821C6440;
		  /* 821C6440h */ case   22:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C6440h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C6440h case   22:*/		return 0x821C6444;
		  /* 821C6444h */ case   23:  		/* mr R4, R30 */
		/* 821C6444h case   23:*/		regs.R4 = regs.R30;
		/* 821C6444h case   23:*/		return 0x821C6448;
		  /* 821C6448h */ case   24:  		/* mr R3, R31 */
		/* 821C6448h case   24:*/		regs.R3 = regs.R31;
		/* 821C6448h case   24:*/		return 0x821C644C;
		  /* 821C644Ch */ case   25:  		/* lwzx R5, <#[R25 + R11]> */
		/* 821C644Ch case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + regs.R11 + 0x00000000) );
		/* 821C644Ch case   25:*/		return 0x821C6450;
		  /* 821C6450h */ case   26:  		/* bl 387680 */
		/* 821C6450h case   26:*/		regs.LR = 0x821C6454; return 0x82224EB0;
		/* 821C6450h case   26:*/		return 0x821C6454;
		  /* 821C6454h */ case   27:  		/* rldicl R11, R27, 0, 32 */
		/* 821C6454h case   27:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R27);
		/* 821C6454h case   27:*/		return 0x821C6458;
		  /* 821C6458h */ case   28:  		/* fmr FR4, FR31 */
		/* 821C6458h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C6458h case   28:*/		return 0x821C645C;
		  /* 821C645Ch */ case   29:  		/* mr R15, R3 */
		/* 821C645Ch case   29:*/		regs.R15 = regs.R3;
		/* 821C645Ch case   29:*/		return 0x821C6460;
		  /* 821C6460h */ case   30:  		/* fmr FR3, FR31 */
		/* 821C6460h case   30:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C6460h case   30:*/		return 0x821C6464;
		  /* 821C6464h */ case   31:  		/* std R11, <#[R1 + 168]> */
		/* 821C6464h case   31:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821C6464h case   31:*/		return 0x821C6468;
		  /* 821C6468h */ case   32:  		/* lfd FR0, <#[R1 + 168]> */
		/* 821C6468h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000A8) );
		/* 821C6468h case   32:*/		return 0x821C646C;
		  /* 821C646Ch */ case   33:  		/* fcfid FR0, FR0 */
		/* 821C646Ch case   33:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C646Ch case   33:*/		return 0x821C6470;
		  /* 821C6470h */ case   34:  		/* li R4, 1 */
		/* 821C6470h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C6470h case   34:*/		return 0x821C6474;
		  /* 821C6474h */ case   35:  		/* frsp FR0, FR0 */
		/* 821C6474h case   35:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 821C6474h case   35:*/		return 0x821C6478;
		  /* 821C6478h */ case   36:  		/* mr R3, R31 */
		/* 821C6478h case   36:*/		regs.R3 = regs.R31;
		/* 821C6478h case   36:*/		return 0x821C647C;
		  /* 821C647Ch */ case   37:  		/* fmr FR2, FR31 */
		/* 821C647Ch case   37:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C647Ch case   37:*/		return 0x821C6480;
		  /* 821C6480h */ case   38:  		/* fneg FR1, FR0 */
		/* 821C6480h case   38:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 821C6480h case   38:*/		return 0x821C6484;
		  /* 821C6484h */ case   39:  		/* bl 411348 */
		/* 821C6484h case   39:*/		regs.LR = 0x821C6488; return 0x8222AB58;
		/* 821C6484h case   39:*/		return 0x821C6488;
		  /* 821C6488h */ case   40:  		/* lwz R11, <#[R29]> */
		/* 821C6488h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C6488h case   40:*/		return 0x821C648C;
		  /* 821C648Ch */ case   41:  		/* mr R4, R3 */
		/* 821C648Ch case   41:*/		regs.R4 = regs.R3;
		/* 821C648Ch case   41:*/		return 0x821C6490;
		  /* 821C6490h */ case   42:  		/* mr R3, R31 */
		/* 821C6490h case   42:*/		regs.R3 = regs.R31;
		/* 821C6490h case   42:*/		return 0x821C6494;
		  /* 821C6494h */ case   43:  		/* rlwinm R14, R11, 7, 29, 31 */
		/* 821C6494h case   43:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R14,regs.R11);
		/* 821C6494h case   43:*/		return 0x821C6498;
		  /* 821C6498h */ case   44:  		/* bl -320664 */
		/* 821C6498h case   44:*/		regs.LR = 0x821C649C; return 0x82178000;
		/* 821C6498h case   44:*/		return 0x821C649C;
		  /* 821C649Ch */ case   45:  		/* lwz R10, <#[R3]> */
		/* 821C649Ch case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C649Ch case   45:*/		return 0x821C64A0;
		  /* 821C64A0h */ case   46:  		/* li R4, 0 */
		/* 821C64A0h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C64A0h case   46:*/		return 0x821C64A4;
		  /* 821C64A4h */ case   47:  		/* stw R3, <#[R1 + 144]> */
		/* 821C64A4h case   47:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 821C64A4h case   47:*/		return 0x821C64A8;
		  /* 821C64A8h */ case   48:  		/* rlwimi R10, R14, 25, 4, 6 */
		/* 821C64A8h case   48:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R14);
		/* 821C64A8h case   48:*/		return 0x821C64AC;
		  /* 821C64ACh */ case   49:  		/* mr R11, R3 */
		/* 821C64ACh case   49:*/		regs.R11 = regs.R3;
		/* 821C64ACh case   49:*/		return 0x821C64B0;
	}
	return 0x821C64B0;
} // Block from 821C63E8h-821C64B0h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821C64B0h
// Function '?CleanBlocksWorker@Compiler@D3DXShader@@AAAXIPA_NPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C64B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C64B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C64B0);
		  /* 821C64B0h */ case    0:  		/* stw R10, <#[R3]> */
		/* 821C64B0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C64B0h case    0:*/		return 0x821C64B4;
		  /* 821C64B4h */ case    1:  		/* bl -322036 */
		/* 821C64B4h case    1:*/		regs.LR = 0x821C64B8; return 0x82177AC0;
		/* 821C64B4h case    1:*/		return 0x821C64B8;
		  /* 821C64B8h */ case    2:  		/* lwz R14, <#[R1 + 144]> */
		/* 821C64B8h case    2:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000090) );
		/* 821C64B8h case    2:*/		return 0x821C64BC;
		  /* 821C64BCh */ case    3:  		/* mr R6, R29 */
		/* 821C64BCh case    3:*/		regs.R6 = regs.R29;
		/* 821C64BCh case    3:*/		return 0x821C64C0;
		  /* 821C64C0h */ case    4:  		/* mr R5, R30 */
		/* 821C64C0h case    4:*/		regs.R5 = regs.R30;
		/* 821C64C0h case    4:*/		return 0x821C64C4;
		  /* 821C64C4h */ case    5:  		/* li R4, 0 */
		/* 821C64C4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C64C4h case    5:*/		return 0x821C64C8;
		  /* 821C64C8h */ case    6:  		/* mr R3, R31 */
		/* 821C64C8h case    6:*/		regs.R3 = regs.R31;
		/* 821C64C8h case    6:*/		return 0x821C64CC;
		  /* 821C64CCh */ case    7:  		/* lwz R11, <#[R14]> */
		/* 821C64CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821C64CCh case    7:*/		return 0x821C64D0;
		  /* 821C64D0h */ case    8:  		/* mr R7, R14 */
		/* 821C64D0h case    8:*/		regs.R7 = regs.R14;
		/* 821C64D0h case    8:*/		return 0x821C64D4;
		  /* 821C64D4h */ case    9:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C64D4h case    9:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C64D4h case    9:*/		return 0x821C64D8;
		  /* 821C64D8h */ case   10:  		/* stw R11, <#[R14]> */
		/* 821C64D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821C64D8h case   10:*/		return 0x821C64DC;
		  /* 821C64DCh */ case   11:  		/* bl -165620 */
		/* 821C64DCh case   11:*/		regs.LR = 0x821C64E0; return 0x8219DDE8;
		/* 821C64DCh case   11:*/		return 0x821C64E0;
		  /* 821C64E0h */ case   12:  		/* mr R6, R3 */
		/* 821C64E0h case   12:*/		regs.R6 = regs.R3;
		/* 821C64E0h case   12:*/		return 0x821C64E4;
		  /* 821C64E4h */ case   13:  		/* mr R8, R28 */
		/* 821C64E4h case   13:*/		regs.R8 = regs.R28;
		/* 821C64E4h case   13:*/		return 0x821C64E8;
		  /* 821C64E8h */ case   14:  		/* mr R7, R15 */
		/* 821C64E8h case   14:*/		regs.R7 = regs.R15;
		/* 821C64E8h case   14:*/		return 0x821C64EC;
		  /* 821C64ECh */ case   15:  		/* mr R5, R30 */
		/* 821C64ECh case   15:*/		regs.R5 = regs.R30;
		/* 821C64ECh case   15:*/		return 0x821C64F0;
		  /* 821C64F0h */ case   16:  		/* li R4, 0 */
		/* 821C64F0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C64F0h case   16:*/		return 0x821C64F4;
		  /* 821C64F4h */ case   17:  		/* mr R3, R31 */
		/* 821C64F4h case   17:*/		regs.R3 = regs.R31;
		/* 821C64F4h case   17:*/		return 0x821C64F8;
		  /* 821C64F8h */ case   18:  		/* bl -14680 */
		/* 821C64F8h case   18:*/		regs.LR = 0x821C64FC; return 0x821C2BA0;
		/* 821C64F8h case   18:*/		return 0x821C64FC;
		  /* 821C64FCh */ case   19:  		/* mr R28, R3 */
		/* 821C64FCh case   19:*/		regs.R28 = regs.R3;
		/* 821C64FCh case   19:*/		return 0x821C6500;
		  /* 821C6500h */ case   20:  		/* li R5, 22 */
		/* 821C6500h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 821C6500h case   20:*/		return 0x821C6504;
		  /* 821C6504h */ case   21:  		/* li R4, 12 */
		/* 821C6504h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 821C6504h case   21:*/		return 0x821C6508;
		  /* 821C6508h */ case   22:  		/* mr R3, R31 */
		/* 821C6508h case   22:*/		regs.R3 = regs.R31;
		/* 821C6508h case   22:*/		return 0x821C650C;
		  /* 821C650Ch */ case   23:  		/* bl -366948 */
		/* 821C650Ch case   23:*/		regs.LR = 0x821C6510; return 0x8216CBA8;
		/* 821C650Ch case   23:*/		return 0x821C6510;
		  /* 821C6510h */ case   24:  		/* lwz R10, <#[R3 + 8]> */
		/* 821C6510h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6510h case   24:*/		return 0x821C6514;
		  /* 821C6514h */ case   25:  		/* li R11, 1 */
		/* 821C6514h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C6514h case   25:*/		return 0x821C6518;
		  /* 821C6518h */ case   26:  		/* stw R16, <#[R3]> */
		/* 821C6518h case   26:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000000) );
		/* 821C6518h case   26:*/		return 0x821C651C;
		  /* 821C651Ch */ case   27:  		/* rlwinm R10, R10, 0, 0, 17 */
		/* 821C651Ch case   27:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R10,regs.R10);
		/* 821C651Ch case   27:*/		return 0x821C6520;
		  /* 821C6520h */ case   28:  		/* addi R27, R27, 1 */
		/* 821C6520h case   28:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821C6520h case   28:*/		return 0x821C6524;
		  /* 821C6524h */ case   29:  		/* or R10, R10, R24 */
		/* 821C6524h case   29:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R24);
		/* 821C6524h case   29:*/		return 0x821C6528;
		  /* 821C6528h */ case   30:  		/* addi R25, R25, 4 */
		/* 821C6528h case   30:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821C6528h case   30:*/		return 0x821C652C;
		  /* 821C652Ch */ case   31:  		/* rlwimi R10, R11, 14, 4, 17 */
		/* 821C652Ch case   31:*/		cpu::op::rlwimi<0,14,4,17>(regs,&regs.R10,regs.R11);
		/* 821C652Ch case   31:*/		return 0x821C6530;
		  /* 821C6530h */ case   32:  		/* cmplw CR6, R27, R19 */
		/* 821C6530h case   32:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R19);
		/* 821C6530h case   32:*/		return 0x821C6534;
		  /* 821C6534h */ case   33:  		/* stw R10, <#[R3 + 8]> */
		/* 821C6534h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6534h case   33:*/		return 0x821C6538;
		  /* 821C6538h */ case   34:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C6538h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C6538h case   34:*/		return 0x821C653C;
		  /* 821C653Ch */ case   35:  		/* stw R11, <#[R3 + 4]> */
		/* 821C653Ch case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C653Ch case   35:*/		return 0x821C6540;
		  /* 821C6540h */ case   36:  		/* stw R3, <#[R28 + 16]> */
		/* 821C6540h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 821C6540h case   36:*/		return 0x821C6544;
		  /* 821C6544h */ case   37:  		/* bc 12, CR6_LT, -260 */
		/* 821C6544h case   37:*/		if ( regs.CR[6].lt ) { return 0x821C6440;  }
		/* 821C6544h case   37:*/		return 0x821C6548;
		  /* 821C6548h */ case   38:  		/* lwz R15, <#[R1 + 112]> */
		/* 821C6548h case   38:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 821C6548h case   38:*/		return 0x821C654C;
		  /* 821C654Ch */ case   39:  		/* lwz R14, <#[R1 + 92]> */
		/* 821C654Ch case   39:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 821C654Ch case   39:*/		return 0x821C6550;
	}
	return 0x821C6550;
} // Block from 821C64B0h-821C6550h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821C6550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6550);
		  /* 821C6550h */ case    0:  		/* addi R8, R30, 4 */
		/* 821C6550h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 821C6550h case    0:*/		return 0x821C6554;
		  /* 821C6554h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C6554h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C6554h case    1:*/		return 0x821C6558;
		  /* 821C6558h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C6558h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6558h case    2:*/		return 0x821C655C;
		  /* 821C655Ch */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821C655Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821C65B8;  }
		/* 821C655Ch case    3:*/		return 0x821C6560;
		  /* 821C6560h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C6560h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C6560h case    4:*/		return 0x821C6564;
		  /* 821C6564h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C6564h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C6564h case    5:*/		return 0x821C6568;
		  /* 821C6568h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821C6568h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C65A4;  }
		/* 821C6568h case    6:*/		return 0x821C656C;
		  /* 821C656Ch */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C656Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C656Ch case    7:*/		return 0x821C6570;
		  /* 821C6570h */ case    8:  		/* addi R10, R10, 4 */
		/* 821C6570h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C6570h case    8:*/		return 0x821C6574;
		  /* 821C6574h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821C6574h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6574h case    9:*/		return 0x821C6578;
		  /* 821C6578h */ case   10:  		/* b 12 */
		/* 821C6578h case   10:*/		return 0x821C6584;
		/* 821C6578h case   10:*/		return 0x821C657C;
		  /* 821C657Ch */ case   11:  		/* addi R10, R9, 8 */
		/* 821C657Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C657Ch case   11:*/		return 0x821C6580;
		  /* 821C6580h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C6580h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C6580h case   12:*/		return 0x821C6584;
	}
	return 0x821C6584;
} // Block from 821C6550h-821C6584h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C6584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6584);
		  /* 821C6584h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C6584h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C6584h case    0:*/		return 0x821C6588;
		  /* 821C6588h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C6588h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C657C;  }
		/* 821C6588h case    1:*/		return 0x821C658C;
		  /* 821C658Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C658Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C658Ch case    2:*/		return 0x821C6590;
		  /* 821C6590h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C6590h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6590h case    3:*/		return 0x821C6594;
		  /* 821C6594h */ case    4:  		/* lwz R10, <#[R28 + 4]> */
		/* 821C6594h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821C6594h case    4:*/		return 0x821C6598;
		  /* 821C6598h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C6598h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6598h case    5:*/		return 0x821C659C;
		  /* 821C659Ch */ case    6:  		/* stw R11, <#[R28 + 4]> */
		/* 821C659Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821C659Ch case    6:*/		return 0x821C65A0;
		  /* 821C65A0h */ case    7:  		/* stw R28, <#[R11 + 12]> */
		/* 821C65A0h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C65A0h case    7:*/		return 0x821C65A4;
	}
	return 0x821C65A4;
} // Block from 821C6584h-821C65A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C65A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C65A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C65A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C65A4);
		  /* 821C65A4h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C65A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C65A4h case    0:*/		return 0x821C65A8;
		  /* 821C65A8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C65A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C65A8h case    1:*/		return 0x821C65AC;
		  /* 821C65ACh */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821C65ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C6554;  }
		/* 821C65ACh case    2:*/		return 0x821C65B0;
		  /* 821C65B0h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C65B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C65B0h case    3:*/		return 0x821C65B4;
		  /* 821C65B4h */ case    4:  		/* b -96 */
		/* 821C65B4h case    4:*/		return 0x821C6554;
		/* 821C65B4h case    4:*/		return 0x821C65B8;
	}
	return 0x821C65B8;
} // Block from 821C65A4h-821C65B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C65B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C65B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C65B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C65B8);
		  /* 821C65B8h */ case    0:  		/* li R6, 1 */
		/* 821C65B8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C65B8h case    0:*/		return 0x821C65BC;
		  /* 821C65BCh */ case    1:  		/* li R5, 0 */
		/* 821C65BCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C65BCh case    1:*/		return 0x821C65C0;
		  /* 821C65C0h */ case    2:  		/* mr R4, R30 */
		/* 821C65C0h case    2:*/		regs.R4 = regs.R30;
		/* 821C65C0h case    2:*/		return 0x821C65C4;
		  /* 821C65C4h */ case    3:  		/* mr R3, R31 */
		/* 821C65C4h case    3:*/		regs.R3 = regs.R31;
		/* 821C65C4h case    3:*/		return 0x821C65C8;
		  /* 821C65C8h */ case    4:  		/* bl 413184 */
		/* 821C65C8h case    4:*/		regs.LR = 0x821C65CC; return 0x8222B3C8;
		/* 821C65C8h case    4:*/		return 0x821C65CC;
	}
	return 0x821C65CC;
} // Block from 821C65B8h-821C65CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C65CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C65CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C65CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C65CC);
		  /* 821C65CCh */ case    0:  		/* lwz R11, <#[R22]> */
		/* 821C65CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821C65CCh case    0:*/		return 0x821C65D0;
		  /* 821C65D0h */ case    1:  		/* cmplw CR6, R11, R23 */
		/* 821C65D0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821C65D0h case    1:*/		return 0x821C65D4;
		  /* 821C65D4h */ case    2:  		/* bc 4, CR6_EQ, -804 */
		/* 821C65D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C62B0;  }
		/* 821C65D4h case    2:*/		return 0x821C65D8;
		  /* 821C65D8h */ case    3:  		/* addi R22, R23, 8 */
		/* 821C65D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R23,0x8);
		/* 821C65D8h case    3:*/		return 0x821C65DC;
		  /* 821C65DCh */ case    4:  		/* b -812 */
		/* 821C65DCh case    4:*/		return 0x821C62B0;
		/* 821C65DCh case    4:*/		return 0x821C65E0;
	}
	return 0x821C65E0;
} // Block from 821C65CCh-821C65E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C65E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C65E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C65E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C65E0);
		  /* 821C65E0h */ case    0:  		/* cmplwi CR6, R11, 16000 */
		/* 821C65E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821C65E0h case    0:*/		return 0x821C65E4;
		  /* 821C65E4h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 821C65E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6648;  }
		/* 821C65E4h case    1:*/		return 0x821C65E8;
		  /* 821C65E8h */ case    2:  		/* lwz R5, <#[R1 + 100]> */
		/* 821C65E8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 821C65E8h case    2:*/		return 0x821C65EC;
		  /* 821C65ECh */ case    3:  		/* lwz R4, <#[R1 + 104]> */
		/* 821C65ECh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000068) );
		/* 821C65ECh case    3:*/		return 0x821C65F0;
		  /* 821C65F0h */ case    4:  		/* bl 372912 */
		/* 821C65F0h case    4:*/		regs.LR = 0x821C65F4; return 0x822216A0;
		/* 821C65F0h case    4:*/		return 0x821C65F4;
		  /* 821C65F4h */ case    5:  		/* fctidz FR0, FR1 */
		/* 821C65F4h case    5:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 821C65F4h case    5:*/		return 0x821C65F8;
		  /* 821C65F8h */ case    6:  		/* stfd FR0, <#[R1 + 144]> */
		/* 821C65F8h case    6:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000090) );
		/* 821C65F8h case    6:*/		return 0x821C65FC;
		  /* 821C65FCh */ case    7:  		/* lwz R11, <#[R1 + 148]> */
		/* 821C65FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821C65FCh case    7:*/		return 0x821C6600;
		  /* 821C6600h */ case    8:  		/* mr R10, R11 */
		/* 821C6600h case    8:*/		regs.R10 = regs.R11;
		/* 821C6600h case    8:*/		return 0x821C6604;
		  /* 821C6604h */ case    9:  		/* std R11, <#[R1 + 176]> */
		/* 821C6604h case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821C6604h case    9:*/		return 0x821C6608;
		  /* 821C6608h */ case   10:  		/* lfd FR0, <#[R1 + 176]> */
		/* 821C6608h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821C6608h case   10:*/		return 0x821C660C;
		  /* 821C660Ch */ case   11:  		/* fcfid FR0, FR0 */
		/* 821C660Ch case   11:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C660Ch case   11:*/		return 0x821C6610;
		  /* 821C6610h */ case   12:  		/* fcmpu CR6, FR1, FR0 */
		/* 821C6610h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821C6610h case   12:*/		return 0x821C6614;
		  /* 821C6614h */ case   13:  		/* bc 4, CR6_EQ, 52 */
		/* 821C6614h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C6648;  }
		/* 821C6614h case   13:*/		return 0x821C6618;
		  /* 821C6618h */ case   14:  		/* cmplw CR6, R11, R19 */
		/* 821C6618h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 821C6618h case   14:*/		return 0x821C661C;
		  /* 821C661Ch */ case   15:  		/* bc 4, CR6_LT, 44 */
		/* 821C661Ch case   15:*/		if ( !regs.CR[6].lt ) { return 0x821C6648;  }
		/* 821C661Ch case   15:*/		return 0x821C6620;
		  /* 821C6620h */ case   16:  		/* lwz R10, <#[R20 + 8]> */
		/* 821C6620h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821C6620h case   16:*/		return 0x821C6624;
		  /* 821C6624h */ case   17:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C6624h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C6624h case   17:*/		return 0x821C6628;
		  /* 821C6628h */ case   18:  		/* mr R5, R21 */
		/* 821C6628h case   18:*/		regs.R5 = regs.R21;
		/* 821C6628h case   18:*/		return 0x821C662C;
		  /* 821C662Ch */ case   19:  		/* li R4, 0 */
		/* 821C662Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C662Ch case   19:*/		return 0x821C6630;
		  /* 821C6630h */ case   20:  		/* mr R3, R31 */
		/* 821C6630h case   20:*/		regs.R3 = regs.R31;
		/* 821C6630h case   20:*/		return 0x821C6634;
		  /* 821C6634h */ case   21:  		/* lwzx R6, <#[R11 + R10]> */
		/* 821C6634h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821C6634h case   21:*/		return 0x821C6638;
		  /* 821C6638h */ case   22:  		/* mr R7, R6 */
		/* 821C6638h case   22:*/		regs.R7 = regs.R6;
		/* 821C6638h case   22:*/		return 0x821C663C;
		  /* 821C663Ch */ case   23:  		/* bl -165764 */
		/* 821C663Ch case   23:*/		regs.LR = 0x821C6640; return 0x8219DEB8;
		/* 821C663Ch case   23:*/		return 0x821C6640;
		  /* 821C6640h */ case   24:  		/* or. R30, R3, R3 */
		/* 821C6640h case   24:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821C6640h case   24:*/		return 0x821C6644;
		  /* 821C6644h */ case   25:  		/* bc 4, CR0_EQ, 768 */
		/* 821C6644h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821C6944;  }
		/* 821C6644h case   25:*/		return 0x821C6648;
	}
	return 0x821C6648;
} // Block from 821C65E0h-821C6648h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C6648h
// Function '?ResolveArrayReferences@Compiler@D3DXShader@@AAAXW4ResolveArrayReferencesStage@12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6648);
		  /* 821C6648h */ case    0:  		/* lbz R11, <#[R1 + 81]> */
		/* 821C6648h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000051) );
		/* 821C6648h case    0:*/		return 0x821C664C;
		  /* 821C664Ch */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821C664Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C664Ch case    1:*/		return 0x821C6650;
		  /* 821C6650h */ case    2:  		/* bc 12, CR0_EQ, 352 */
		/* 821C6650h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C67B0;  }
		/* 821C6650h case    2:*/		return 0x821C6654;
		  /* 821C6654h */ case    3:  		/* lwz R11, <#[R18 + 12]> */
		/* 821C6654h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000000C) );
		/* 821C6654h case    3:*/		return 0x821C6658;
		  /* 821C6658h */ case    4:  		/* addi R11, R11, 4 */
		/* 821C6658h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C6658h case    4:*/		return 0x821C665C;
		  /* 821C665Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821C665Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C665Ch case    5:*/		return 0x821C6660;
		  /* 821C6660h */ case    6:  		/* b 12 */
		/* 821C6660h case    6:*/		return 0x821C666C;
		/* 821C6660h case    6:*/		return 0x821C6664;
		  /* 821C6664h */ case    7:  		/* addi R11, R10, 8 */
		/* 821C6664h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C6664h case    7:*/		return 0x821C6668;
		  /* 821C6668h */ case    8:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C6668h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C6668h case    8:*/		return 0x821C666C;
	}
	return 0x821C666C;
} // Block from 821C6648h-821C666Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C666Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C666C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C666C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C666C);
		  /* 821C666Ch */ case    0:  		/* cmplw CR6, R10, R18 */
		/* 821C666Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 821C666Ch case    0:*/		return 0x821C6670;
		  /* 821C6670h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C6670h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6664;  }
		/* 821C6670h case    1:*/		return 0x821C6674;
		  /* 821C6674h */ case    2:  		/* lwz R10, <#[R18 + 8]> */
		/* 821C6674h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 821C6674h case    2:*/		return 0x821C6678;
		  /* 821C6678h */ case    3:  		/* cmplwi CR6, R17, 1 */
		/* 821C6678h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000001);
		/* 821C6678h case    3:*/		return 0x821C667C;
		  /* 821C667Ch */ case    4:  		/* lwz R9, <#[R1 + 108]> */
		/* 821C667Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 821C667Ch case    4:*/		return 0x821C6680;
		  /* 821C6680h */ case    5:  		/* ori R9, R9, 228 */
		/* 821C6680h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xE4);
		/* 821C6680h case    5:*/		return 0x821C6684;
		  /* 821C6684h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821C6684h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6684h case    6:*/		return 0x821C6688;
		  /* 821C6688h */ case    7:  		/* lwz R11, <#[R14 + 4]> */
		/* 821C6688h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000004) );
		/* 821C6688h case    7:*/		return 0x821C668C;
		  /* 821C668Ch */ case    8:  		/* stw R11, <#[R18 + 8]> */
		/* 821C668Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 821C668Ch case    8:*/		return 0x821C6690;
		  /* 821C6690h */ case    9:  		/* stw R18, <#[R14 + 4]> */
		/* 821C6690h case    9:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R14 + 0x00000004) );
		/* 821C6690h case    9:*/		return 0x821C6694;
		  /* 821C6694h */ case   10:  		/* stw R14, <#[R18 + 12]> */
		/* 821C6694h case   10:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R18 + 0x0000000C) );
		/* 821C6694h case   10:*/		return 0x821C6698;
		  /* 821C6698h */ case   11:  		/* lwz R11, <#[R18]> */
		/* 821C6698h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821C6698h case   11:*/		return 0x821C669C;
		  /* 821C669Ch */ case   12:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821C669Ch case   12:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821C669Ch case   12:*/		return 0x821C66A0;
		  /* 821C66A0h */ case   13:  		/* rlwinm R8, R11, 24, 29, 30 */
		/* 821C66A0h case   13:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R11);
		/* 821C66A0h case   13:*/		return 0x821C66A4;
		  /* 821C66A4h */ case   14:  		/* srw R10, R9, R10 */
		/* 821C66A4h case   14:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C66A4h case   14:*/		return 0x821C66A8;
		  /* 821C66A8h */ case   15:  		/* srw R8, R9, R8 */
		/* 821C66A8h case   15:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R8);
		/* 821C66A8h case   15:*/		return 0x821C66AC;
		  /* 821C66ACh */ case   16:  		/* rlwimi R8, R10, 2, 28, 29 */
		/* 821C66ACh case   16:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R10);
		/* 821C66ACh case   16:*/		return 0x821C66B0;
		  /* 821C66B0h */ case   17:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821C66B0h case   17:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821C66B0h case   17:*/		return 0x821C66B4;
		  /* 821C66B4h */ case   18:  		/* rlwinm R7, R11, 28, 29, 30 */
		/* 821C66B4h case   18:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R11);
		/* 821C66B4h case   18:*/		return 0x821C66B8;
		  /* 821C66B8h */ case   19:  		/* srw R10, R9, R10 */
		/* 821C66B8h case   19:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C66B8h case   19:*/		return 0x821C66BC;
		  /* 821C66BCh */ case   20:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821C66BCh case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821C66BCh case   20:*/		return 0x821C66C0;
		  /* 821C66C0h */ case   21:  		/* srw R9, R9, R7 */
		/* 821C66C0h case   21:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821C66C0h case   21:*/		return 0x821C66C4;
		  /* 821C66C4h */ case   22:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821C66C4h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821C66C4h case   22:*/		return 0x821C66C8;
		  /* 821C66C8h */ case   23:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C66C8h case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C66C8h case   23:*/		return 0x821C66CC;
		  /* 821C66CCh */ case   24:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821C66CCh case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821C66CCh case   24:*/		return 0x821C66D0;
		  /* 821C66D0h */ case   25:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821C66D0h case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821C66D0h case   25:*/		return 0x821C66D4;
		  /* 821C66D4h */ case   26:  		/* or R11, R10, R11 */
		/* 821C66D4h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C66D4h case   26:*/		return 0x821C66D8;
		  /* 821C66D8h */ case   27:  		/* stw R11, <#[R18]> */
		/* 821C66D8h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821C66D8h case   27:*/		return 0x821C66DC;
		  /* 821C66DCh */ case   28:  		/* bc 12, CR6_EQ, 772 */
		/* 821C66DCh case   28:*/		if ( regs.CR[6].eq ) { return 0x821C69E0;  }
		/* 821C66DCh case   28:*/		return 0x821C66E0;
		  /* 821C66E0h */ case   29:  		/* mr R4, R26 */
		/* 821C66E0h case   29:*/		regs.R4 = regs.R26;
		/* 821C66E0h case   29:*/		return 0x821C66E4;
		  /* 821C66E4h */ case   30:  		/* lwz R30, <#[R29 + 12]> */
		/* 821C66E4h case   30:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C66E4h case   30:*/		return 0x821C66E8;
		  /* 821C66E8h */ case   31:  		/* mr R3, R31 */
		/* 821C66E8h case   31:*/		regs.R3 = regs.R31;
		/* 821C66E8h case   31:*/		return 0x821C66EC;
		  /* 821C66ECh */ case   32:  		/* lwz R5, <#[R26 + 12]> */
		/* 821C66ECh case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C66ECh case   32:*/		return 0x821C66F0;
		  /* 821C66F0h */ case   33:  		/* bl -349696 */
		/* 821C66F0h case   33:*/		regs.LR = 0x821C66F4; return 0x821710F0;
		/* 821C66F0h case   33:*/		return 0x821C66F4;
		  /* 821C66F4h */ case   34:  		/* rldicl R10, R17, 0, 32 */
		/* 821C66F4h case   34:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R17);
		/* 821C66F4h case   34:*/		return 0x821C66F8;
		  /* 821C66F8h */ case   35:  		/* mr R29, R3 */
		/* 821C66F8h case   35:*/		regs.R29 = regs.R3;
		/* 821C66F8h case   35:*/		return 0x821C66FC;
		  /* 821C66FCh */ case   36:  		/* fmr FR4, FR31 */
		/* 821C66FCh case   36:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C66FCh case   36:*/		return 0x821C6700;
		  /* 821C6700h */ case   37:  		/* std R10, <#[R1 + 184]> */
		/* 821C6700h case   37:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000B8) );
		/* 821C6700h case   37:*/		return 0x821C6704;
		  /* 821C6704h */ case   38:  		/* li R11, 1 */
		/* 821C6704h case   38:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C6704h case   38:*/		return 0x821C6708;
		  /* 821C6708h */ case   39:  		/* lwz R10, <#[R3]> */
		/* 821C6708h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C6708h case   39:*/		return 0x821C670C;
		  /* 821C670Ch */ case   40:  		/* lfd FR0, <#[R1 + 184]> */
		/* 821C670Ch case   40:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B8) );
		/* 821C670Ch case   40:*/		return 0x821C6710;
		  /* 821C6710h */ case   41:  		/* fcfid FR0, FR0 */
		/* 821C6710h case   41:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C6710h case   41:*/		return 0x821C6714;
		  /* 821C6714h */ case   42:  		/* li R4, 1 */
		/* 821C6714h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C6714h case   42:*/		return 0x821C6718;
		  /* 821C6718h */ case   43:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 821C6718h case   43:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 821C6718h case   43:*/		return 0x821C671C;
		  /* 821C671Ch */ case   44:  		/* fmr FR3, FR31 */
		/* 821C671Ch case   44:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C671Ch case   44:*/		return 0x821C6720;
		  /* 821C6720h */ case   45:  		/* mr R3, R31 */
		/* 821C6720h case   45:*/		regs.R3 = regs.R31;
		/* 821C6720h case   45:*/		return 0x821C6724;
		  /* 821C6724h */ case   46:  		/* fmr FR2, FR31 */
		/* 821C6724h case   46:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C6724h case   46:*/		return 0x821C6728;
		  /* 821C6728h */ case   47:  		/* stw R10, <#[R29]> */
		/* 821C6728h case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C6728h case   47:*/		return 0x821C672C;
		  /* 821C672Ch */ case   48:  		/* frsp FR1, FR0 */
		/* 821C672Ch case   48:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821C672Ch case   48:*/		return 0x821C6730;
		  /* 821C6730h */ case   49:  		/* bl 410664 */
		/* 821C6730h case   49:*/		regs.LR = 0x821C6734; return 0x8222AB58;
		/* 821C6730h case   49:*/		return 0x821C6734;
		  /* 821C6734h */ case   50:  		/* mr R4, R3 */
		/* 821C6734h case   50:*/		regs.R4 = regs.R3;
		/* 821C6734h case   50:*/		return 0x821C6738;
		  /* 821C6738h */ case   51:  		/* li R5, 0 */
		/* 821C6738h case   51:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C6738h case   51:*/		return 0x821C673C;
		  /* 821C673Ch */ case   52:  		/* mr R3, R31 */
		/* 821C673Ch case   52:*/		regs.R3 = regs.R31;
		/* 821C673Ch case   52:*/		return 0x821C6740;
		  /* 821C6740h */ case   53:  		/* bl -321072 */
		/* 821C6740h case   53:*/		regs.LR = 0x821C6744; return 0x82178110;
		/* 821C6740h case   53:*/		return 0x821C6744;
		  /* 821C6744h */ case   54:  		/* mr R7, R3 */
		/* 821C6744h case   54:*/		regs.R7 = regs.R3;
		/* 821C6744h case   54:*/		return 0x821C6748;
		  /* 821C6748h */ case   55:  		/* mr R6, R29 */
		/* 821C6748h case   55:*/		regs.R6 = regs.R29;
		/* 821C6748h case   55:*/		return 0x821C674C;
		  /* 821C674Ch */ case   56:  		/* mr R5, R30 */
		/* 821C674Ch case   56:*/		regs.R5 = regs.R30;
		/* 821C674Ch case   56:*/		return 0x821C6750;
		  /* 821C6750h */ case   57:  		/* li R4, 0 */
		/* 821C6750h case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C6750h case   57:*/		return 0x821C6754;
		  /* 821C6754h */ case   58:  		/* mr R3, R31 */
		/* 821C6754h case   58:*/		regs.R3 = regs.R31;
		/* 821C6754h case   58:*/		return 0x821C6758;
		  /* 821C6758h */ case   59:  		/* bl -22088 */
		/* 821C6758h case   59:*/		regs.LR = 0x821C675C; return 0x821C1110;
		/* 821C6758h case   59:*/		return 0x821C675C;
		  /* 821C675Ch */ case   60:  		/* lwz R11, <#[R26 + 12]> */
		/* 821C675Ch case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C675Ch case   60:*/		return 0x821C6760;
		  /* 821C6760h */ case   61:  		/* addi R11, R11, 4 */
		/* 821C6760h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C6760h case   61:*/		return 0x821C6764;
		  /* 821C6764h */ case   62:  		/* lwz R10, <#[R11]> */
		/* 821C6764h case   62:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6764h case   62:*/		return 0x821C6768;
		  /* 821C6768h */ case   63:  		/* b 12 */
		/* 821C6768h case   63:*/		return 0x821C6774;
		/* 821C6768h case   63:*/		return 0x821C676C;
		  /* 821C676Ch */ case   64:  		/* addi R11, R10, 8 */
		/* 821C676Ch case   64:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C676Ch case   64:*/		return 0x821C6770;
		  /* 821C6770h */ case   65:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C6770h case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C6770h case   65:*/		return 0x821C6774;
	}
	return 0x821C6774;
} // Block from 821C666Ch-821C6774h (66 instructions)

//////////////////////////////////////////////////////
// Block at 821C6774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6774);
		  /* 821C6774h */ case    0:  		/* cmplw CR6, R10, R26 */
		/* 821C6774h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821C6774h case    0:*/		return 0x821C6778;
		  /* 821C6778h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C6778h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C676C;  }
		/* 821C6778h case    1:*/		return 0x821C677C;
		  /* 821C677Ch */ case    2:  		/* lwz R10, <#[R26 + 8]> */
		/* 821C677Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821C677Ch case    2:*/		return 0x821C6780;
		  /* 821C6780h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821C6780h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6780h case    3:*/		return 0x821C6784;
		  /* 821C6784h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C6784h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C6784h case    4:*/		return 0x821C6788;
		  /* 821C6788h */ case    5:  		/* stw R11, <#[R26 + 8]> */
		/* 821C6788h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C6788h case    5:*/		return 0x821C678C;
		  /* 821C678Ch */ case    6:  		/* stw R26, <#[R3 + 4]> */
		/* 821C678Ch case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		/* 821C678Ch case    6:*/		return 0x821C6790;
		  /* 821C6790h */ case    7:  		/* stw R3, <#[R26 + 12]> */
		/* 821C6790h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C6790h case    7:*/		return 0x821C6794;
		  /* 821C6794h */ case    8:  		/* lwz R11, <#[R26]> */
		/* 821C6794h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821C6794h case    8:*/		return 0x821C6798;
		  /* 821C6798h */ case    9:  		/* rlwinm R11, R11, 0, 0, 18 */
		/* 821C6798h case    9:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R11,regs.R11);
		/* 821C6798h case    9:*/		return 0x821C679C;
		  /* 821C679Ch */ case   10:  		/* stw R11, <#[R26]> */
		/* 821C679Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821C679Ch case   10:*/		return 0x821C67A0;
		  /* 821C67A0h */ case   11:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C67A0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C67A0h case   11:*/		return 0x821C67A4;
		  /* 821C67A4h */ case   12:  		/* rlwimi R11, R17, 14, 4, 17 */
		/* 821C67A4h case   12:*/		cpu::op::rlwimi<0,14,4,17>(regs,&regs.R11,regs.R17);
		/* 821C67A4h case   12:*/		return 0x821C67A8;
		  /* 821C67A8h */ case   13:  		/* stw R11, <#[R25 + 8]> */
		/* 821C67A8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C67A8h case   13:*/		return 0x821C67AC;
		  /* 821C67ACh */ case   14:  		/* b 564 */
		/* 821C67ACh case   14:*/		return 0x821C69E0;
		/* 821C67ACh case   14:*/		return 0x821C67B0;
	}
	return 0x821C67B0;
} // Block from 821C6774h-821C67B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C67B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C67B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C67B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C67B0);
		  /* 821C67B0h */ case    0:  		/* lwz R11, <#[R1 + 396]> */
		/* 821C67B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000018C) );
		/* 821C67B0h case    0:*/		return 0x821C67B4;
		  /* 821C67B4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821C67B4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821C67B4h case    1:*/		return 0x821C67B8;
		  /* 821C67B8h */ case    2:  		/* bc 4, CR6_GT, 552 */
		/* 821C67B8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821C69E0;  }
		/* 821C67B8h case    2:*/		return 0x821C67BC;
		  /* 821C67BCh */ case    3:  		/* cmplwi CR6, R19, 1 */
		/* 821C67BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 821C67BCh case    3:*/		return 0x821C67C0;
		  /* 821C67C0h */ case    4:  		/* mr R3, R31 */
		/* 821C67C0h case    4:*/		regs.R3 = regs.R31;
		/* 821C67C0h case    4:*/		return 0x821C67C4;
		  /* 821C67C4h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 821C67C4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C67E8;  }
		/* 821C67C4h case    5:*/		return 0x821C67C8;
		  /* 821C67C8h */ case    6:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C67C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C67C8h case    6:*/		return 0x821C67CC;
		  /* 821C67CCh */ case    7:  		/* mr R5, R21 */
		/* 821C67CCh case    7:*/		regs.R5 = regs.R21;
		/* 821C67CCh case    7:*/		return 0x821C67D0;
		  /* 821C67D0h */ case    8:  		/* li R4, 0 */
		/* 821C67D0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C67D0h case    8:*/		return 0x821C67D4;
		  /* 821C67D4h */ case    9:  		/* lwz R6, <#[R11]> */
		/* 821C67D4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821C67D4h case    9:*/		return 0x821C67D8;
		  /* 821C67D8h */ case   10:  		/* mr R7, R6 */
		/* 821C67D8h case   10:*/		regs.R7 = regs.R6;
		/* 821C67D8h case   10:*/		return 0x821C67DC;
		  /* 821C67DCh */ case   11:  		/* bl -166180 */
		/* 821C67DCh case   11:*/		regs.LR = 0x821C67E0; return 0x8219DEB8;
		/* 821C67DCh case   11:*/		return 0x821C67E0;
		  /* 821C67E0h */ case   12:  		/* mr R30, R3 */
		/* 821C67E0h case   12:*/		regs.R30 = regs.R3;
		/* 821C67E0h case   12:*/		return 0x821C67E4;
		  /* 821C67E4h */ case   13:  		/* b 352 */
		/* 821C67E4h case   13:*/		return 0x821C6944;
		/* 821C67E4h case   13:*/		return 0x821C67E8;
	}
	return 0x821C67E8;
} // Block from 821C67B0h-821C67E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C67E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C67E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C67E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C67E8);
		  /* 821C67E8h */ case    0:  		/* mr R4, R26 */
		/* 821C67E8h case    0:*/		regs.R4 = regs.R26;
		/* 821C67E8h case    0:*/		return 0x821C67EC;
		  /* 821C67ECh */ case    1:  		/* lwz R5, <#[R26 + 12]> */
		/* 821C67ECh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821C67ECh case    1:*/		return 0x821C67F0;
		  /* 821C67F0h */ case    2:  		/* bl -349952 */
		/* 821C67F0h case    2:*/		regs.LR = 0x821C67F4; return 0x821710F0;
		/* 821C67F0h case    2:*/		return 0x821C67F4;
		  /* 821C67F4h */ case    3:  		/* mr R29, R3 */
		/* 821C67F4h case    3:*/		regs.R29 = regs.R3;
		/* 821C67F4h case    3:*/		return 0x821C67F8;
		  /* 821C67F8h */ case    4:  		/* li R11, 1 */
		/* 821C67F8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C67F8h case    4:*/		return 0x821C67FC;
		  /* 821C67FCh */ case    5:  		/* mr R5, R21 */
		/* 821C67FCh case    5:*/		regs.R5 = regs.R21;
		/* 821C67FCh case    5:*/		return 0x821C6800;
		  /* 821C6800h */ case    6:  		/* li R4, 0 */
		/* 821C6800h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C6800h case    6:*/		return 0x821C6804;
		  /* 821C6804h */ case    7:  		/* mr R3, R31 */
		/* 821C6804h case    7:*/		regs.R3 = regs.R31;
		/* 821C6804h case    7:*/		return 0x821C6808;
		  /* 821C6808h */ case    8:  		/* lwz R10, <#[R29]> */
		/* 821C6808h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C6808h case    8:*/		return 0x821C680C;
		  /* 821C680Ch */ case    9:  		/* mr R6, R29 */
		/* 821C680Ch case    9:*/		regs.R6 = regs.R29;
		/* 821C680Ch case    9:*/		return 0x821C6810;
		  /* 821C6810h */ case   10:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 821C6810h case   10:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 821C6810h case   10:*/		return 0x821C6814;
		  /* 821C6814h */ case   11:  		/* stw R10, <#[R29]> */
		/* 821C6814h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821C6814h case   11:*/		return 0x821C6818;
		  /* 821C6818h */ case   12:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C6818h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C6818h case   12:*/		return 0x821C681C;
		  /* 821C681Ch */ case   13:  		/* lwz R8, <#[R11 + 4]> */
		/* 821C681Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C681Ch case   13:*/		return 0x821C6820;
		  /* 821C6820h */ case   14:  		/* lwz R7, <#[R11]> */
		/* 821C6820h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6820h case   14:*/		return 0x821C6824;
		  /* 821C6824h */ case   15:  		/* bl -165420 */
		/* 821C6824h case   15:*/		regs.LR = 0x821C6828; return 0x8219E1F8;
		/* 821C6824h case   15:*/		return 0x821C6828;
		  /* 821C6828h */ case   16:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C6828h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C6828h case   16:*/		return 0x821C682C;
		  /* 821C682Ch */ case   17:  		/* mr R30, R3 */
		/* 821C682Ch case   17:*/		regs.R30 = regs.R3;
		/* 821C682Ch case   17:*/		return 0x821C6830;
		  /* 821C6830h */ case   18:  		/* li R5, 22 */
		/* 821C6830h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 821C6830h case   18:*/		return 0x821C6834;
		  /* 821C6834h */ case   19:  		/* li R4, 12 */
		/* 821C6834h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 821C6834h case   19:*/		return 0x821C6838;
		  /* 821C6838h */ case   20:  		/* mr R3, R31 */
		/* 821C6838h case   20:*/		regs.R3 = regs.R31;
		/* 821C6838h case   20:*/		return 0x821C683C;
		  /* 821C683Ch */ case   21:  		/* rlwinm R27, R11, 18, 18, 31 */
		/* 821C683Ch case   21:*/		cpu::op::rlwinm<0,18,18,31>(regs,&regs.R27,regs.R11);
		/* 821C683Ch case   21:*/		return 0x821C6840;
		  /* 821C6840h */ case   22:  		/* bl -367768 */
		/* 821C6840h case   22:*/		regs.LR = 0x821C6844; return 0x8216CBA8;
		/* 821C6840h case   22:*/		return 0x821C6844;
		  /* 821C6844h */ case   23:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C6844h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6844h case   23:*/		return 0x821C6848;
		  /* 821C6848h */ case   24:  		/* rlwinm R26, R19, 0, 18, 31 */
		/* 821C6848h case   24:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R26,regs.R19);
		/* 821C6848h case   24:*/		return 0x821C684C;
		  /* 821C684Ch */ case   25:  		/* stw R16, <#[R3]> */
		/* 821C684Ch case   25:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000000) );
		/* 821C684Ch case   25:*/		return 0x821C6850;
		  /* 821C6850h */ case   26:  		/* rlwinm R11, R11, 0, 0, 17 */
		/* 821C6850h case   26:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R11);
		/* 821C6850h case   26:*/		return 0x821C6854;
		  /* 821C6854h */ case   27:  		/* li R28, 2 */
		/* 821C6854h case   27:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 821C6854h case   27:*/		return 0x821C6858;
		  /* 821C6858h */ case   28:  		/* or R11, R11, R26 */
		/* 821C6858h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821C6858h case   28:*/		return 0x821C685C;
		  /* 821C685Ch */ case   29:  		/* cmplwi CR6, R19, 2 */
		/* 821C685Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000002);
		/* 821C685Ch case   29:*/		return 0x821C6860;
		  /* 821C6860h */ case   30:  		/* rlwimi R11, R27, 14, 4, 17 */
		/* 821C6860h case   30:*/		cpu::op::rlwimi<0,14,4,17>(regs,&regs.R11,regs.R27);
		/* 821C6860h case   30:*/		return 0x821C6864;
		  /* 821C6864h */ case   31:  		/* stw R11, <#[R3 + 8]> */
		/* 821C6864h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6864h case   31:*/		return 0x821C6868;
		  /* 821C6868h */ case   32:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C6868h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C6868h case   32:*/		return 0x821C686C;
		  /* 821C686Ch */ case   33:  		/* stw R11, <#[R3 + 4]> */
		/* 821C686Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C686Ch case   33:*/		return 0x821C6870;
		  /* 821C6870h */ case   34:  		/* stw R3, <#[R30 + 16]> */
		/* 821C6870h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821C6870h case   34:*/		return 0x821C6874;
		  /* 821C6874h */ case   35:  		/* bc 4, CR6_GT, 208 */
		/* 821C6874h case   35:*/		if ( !regs.CR[6].gt ) { return 0x821C6944;  }
		/* 821C6874h case   35:*/		return 0x821C6878;
		  /* 821C6878h */ case   36:  		/* li R27, 8 */
		/* 821C6878h case   36:*/		cpu::op::li<0>(regs,&regs.R27,0x8);
		/* 821C6878h case   36:*/		return 0x821C687C;
		  /* 821C687Ch */ case   37:  		/* rldicl R11, R28, 0, 32 */
		/* 821C687Ch case   37:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R28);
		/* 821C687Ch case   37:*/		return 0x821C6880;
		  /* 821C6880h */ case   38:  		/* fmr FR4, FR31 */
		/* 821C6880h case   38:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C6880h case   38:*/		return 0x821C6884;
		  /* 821C6884h */ case   39:  		/* li R4, 1 */
		/* 821C6884h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C6884h case   39:*/		return 0x821C6888;
		  /* 821C6888h */ case   40:  		/* fmr FR3, FR31 */
		/* 821C6888h case   40:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C6888h case   40:*/		return 0x821C688C;
		  /* 821C688Ch */ case   41:  		/* std R11, <#[R1 + 192]> */
		/* 821C688Ch case   41:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000C0) );
		/* 821C688Ch case   41:*/		return 0x821C6890;
		  /* 821C6890h */ case   42:  		/* mr R3, R31 */
		/* 821C6890h case   42:*/		regs.R3 = regs.R31;
		/* 821C6890h case   42:*/		return 0x821C6894;
		  /* 821C6894h */ case   43:  		/* fmr FR2, FR31 */
		/* 821C6894h case   43:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C6894h case   43:*/		return 0x821C6898;
		  /* 821C6898h */ case   44:  		/* lfd FR0, <#[R1 + 192]> */
		/* 821C6898h case   44:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000C0) );
		/* 821C6898h case   44:*/		return 0x821C689C;
		  /* 821C689Ch */ case   45:  		/* fcfid FR0, FR0 */
		/* 821C689Ch case   45:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C689Ch case   45:*/		return 0x821C68A0;
		  /* 821C68A0h */ case   46:  		/* frsp FR0, FR0 */
		/* 821C68A0h case   46:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 821C68A0h case   46:*/		return 0x821C68A4;
		  /* 821C68A4h */ case   47:  		/* fneg FR1, FR0 */
		/* 821C68A4h case   47:*/		cpu::op::fneg<0>(regs,&regs.FR1,regs.FR0);
		/* 821C68A4h case   47:*/		return 0x821C68A8;
		  /* 821C68A8h */ case   48:  		/* bl 410288 */
		/* 821C68A8h case   48:*/		regs.LR = 0x821C68AC; return 0x8222AB58;
		/* 821C68A8h case   48:*/		return 0x821C68AC;
		  /* 821C68ACh */ case   49:  		/* mr R4, R3 */
		/* 821C68ACh case   49:*/		regs.R4 = regs.R3;
		/* 821C68ACh case   49:*/		return 0x821C68B0;
		  /* 821C68B0h */ case   50:  		/* li R5, 0 */
		/* 821C68B0h case   50:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C68B0h case   50:*/		return 0x821C68B4;
		  /* 821C68B4h */ case   51:  		/* mr R3, R31 */
		/* 821C68B4h case   51:*/		regs.R3 = regs.R31;
		/* 821C68B4h case   51:*/		return 0x821C68B8;
		  /* 821C68B8h */ case   52:  		/* bl -321448 */
		/* 821C68B8h case   52:*/		regs.LR = 0x821C68BC; return 0x82178110;
		/* 821C68B8h case   52:*/		return 0x821C68BC;
		  /* 821C68BCh */ case   53:  		/* mr R7, R3 */
		/* 821C68BCh case   53:*/		regs.R7 = regs.R3;
		/* 821C68BCh case   53:*/		return 0x821C68C0;
		  /* 821C68C0h */ case   54:  		/* mr R6, R29 */
		/* 821C68C0h case   54:*/		regs.R6 = regs.R29;
		/* 821C68C0h case   54:*/		return 0x821C68C4;
		  /* 821C68C4h */ case   55:  		/* mr R5, R21 */
		/* 821C68C4h case   55:*/		regs.R5 = regs.R21;
		/* 821C68C4h case   55:*/		return 0x821C68C8;
		  /* 821C68C8h */ case   56:  		/* li R4, 0 */
		/* 821C68C8h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C68C8h case   56:*/		return 0x821C68CC;
		  /* 821C68CCh */ case   57:  		/* mr R3, R31 */
		/* 821C68CCh case   57:*/		regs.R3 = regs.R31;
		/* 821C68CCh case   57:*/		return 0x821C68D0;
		  /* 821C68D0h */ case   58:  		/* bl -166632 */
		/* 821C68D0h case   58:*/		regs.LR = 0x821C68D4; return 0x8219DDE8;
		/* 821C68D0h case   58:*/		return 0x821C68D4;
		  /* 821C68D4h */ case   59:  		/* lwz R11, <#[R20 + 8]> */
		/* 821C68D4h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821C68D4h case   59:*/		return 0x821C68D8;
		  /* 821C68D8h */ case   60:  		/* mr R6, R3 */
		/* 821C68D8h case   60:*/		regs.R6 = regs.R3;
		/* 821C68D8h case   60:*/		return 0x821C68DC;
		  /* 821C68DCh */ case   61:  		/* mr R8, R30 */
		/* 821C68DCh case   61:*/		regs.R8 = regs.R30;
		/* 821C68DCh case   61:*/		return 0x821C68E0;
		  /* 821C68E0h */ case   62:  		/* mr R5, R21 */
		/* 821C68E0h case   62:*/		regs.R5 = regs.R21;
		/* 821C68E0h case   62:*/		return 0x821C68E4;
		  /* 821C68E4h */ case   63:  		/* li R4, 0 */
		/* 821C68E4h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C68E4h case   63:*/		return 0x821C68E8;
		  /* 821C68E8h */ case   64:  		/* mr R3, R31 */
		/* 821C68E8h case   64:*/		regs.R3 = regs.R31;
		/* 821C68E8h case   64:*/		return 0x821C68EC;
		  /* 821C68ECh */ case   65:  		/* lwzx R7, <#[R27 + R11]> */
		/* 821C68ECh case   65:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + regs.R11 + 0x00000000) );
		/* 821C68ECh case   65:*/		return 0x821C68F0;
		  /* 821C68F0h */ case   66:  		/* bl -16144 */
		/* 821C68F0h case   66:*/		regs.LR = 0x821C68F4; return 0x821C29E0;
		/* 821C68F0h case   66:*/		return 0x821C68F4;
		  /* 821C68F4h */ case   67:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C68F4h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C68F4h case   67:*/		return 0x821C68F8;
		  /* 821C68F8h */ case   68:  		/* mr R30, R3 */
		/* 821C68F8h case   68:*/		regs.R30 = regs.R3;
		/* 821C68F8h case   68:*/		return 0x821C68FC;
		  /* 821C68FCh */ case   69:  		/* li R5, 22 */
		/* 821C68FCh case   69:*/		cpu::op::li<0>(regs,&regs.R5,0x16);
		/* 821C68FCh case   69:*/		return 0x821C6900;
		  /* 821C6900h */ case   70:  		/* li R4, 12 */
		/* 821C6900h case   70:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 821C6900h case   70:*/		return 0x821C6904;
		  /* 821C6904h */ case   71:  		/* mr R3, R31 */
		/* 821C6904h case   71:*/		regs.R3 = regs.R31;
		/* 821C6904h case   71:*/		return 0x821C6908;
		  /* 821C6908h */ case   72:  		/* rlwinm R24, R11, 18, 18, 31 */
		/* 821C6908h case   72:*/		cpu::op::rlwinm<0,18,18,31>(regs,&regs.R24,regs.R11);
		/* 821C6908h case   72:*/		return 0x821C690C;
		  /* 821C690Ch */ case   73:  		/* bl -367972 */
		/* 821C690Ch case   73:*/		regs.LR = 0x821C6910; return 0x8216CBA8;
		/* 821C690Ch case   73:*/		return 0x821C6910;
		  /* 821C6910h */ case   74:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C6910h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6910h case   74:*/		return 0x821C6914;
		  /* 821C6914h */ case   75:  		/* stw R16, <#[R3]> */
		/* 821C6914h case   75:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000000) );
		/* 821C6914h case   75:*/		return 0x821C6918;
		  /* 821C6918h */ case   76:  		/* addi R28, R28, 1 */
		/* 821C6918h case   76:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821C6918h case   76:*/		return 0x821C691C;
		  /* 821C691Ch */ case   77:  		/* rlwinm R11, R11, 0, 0, 17 */
		/* 821C691Ch case   77:*/		cpu::op::rlwinm<0,0,0,17>(regs,&regs.R11,regs.R11);
		/* 821C691Ch case   77:*/		return 0x821C6920;
		  /* 821C6920h */ case   78:  		/* addi R27, R27, 4 */
		/* 821C6920h case   78:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821C6920h case   78:*/		return 0x821C6924;
		  /* 821C6924h */ case   79:  		/* or R11, R11, R26 */
		/* 821C6924h case   79:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821C6924h case   79:*/		return 0x821C6928;
		  /* 821C6928h */ case   80:  		/* cmplw CR6, R28, R19 */
		/* 821C6928h case   80:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R19);
		/* 821C6928h case   80:*/		return 0x821C692C;
		  /* 821C692Ch */ case   81:  		/* rlwimi R11, R24, 14, 4, 17 */
		/* 821C692Ch case   81:*/		cpu::op::rlwimi<0,14,4,17>(regs,&regs.R11,regs.R24);
		/* 821C692Ch case   81:*/		return 0x821C6930;
		  /* 821C6930h */ case   82:  		/* stw R11, <#[R3 + 8]> */
		/* 821C6930h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C6930h case   82:*/		return 0x821C6934;
		  /* 821C6934h */ case   83:  		/* lwz R11, <#[R30 + 16]> */
		/* 821C6934h case   83:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821C6934h case   83:*/		return 0x821C6938;
		  /* 821C6938h */ case   84:  		/* stw R11, <#[R3 + 4]> */
		/* 821C6938h case   84:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C6938h case   84:*/		return 0x821C693C;
		  /* 821C693Ch */ case   85:  		/* stw R3, <#[R30 + 16]> */
		/* 821C693Ch case   85:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821C693Ch case   85:*/		return 0x821C6940;
		  /* 821C6940h */ case   86:  		/* bc 12, CR6_LT, -196 */
		/* 821C6940h case   86:*/		if ( regs.CR[6].lt ) { return 0x821C687C;  }
		/* 821C6940h case   86:*/		return 0x821C6944;
	}
	return 0x821C6944;
} // Block from 821C67E8h-821C6944h (87 instructions)

//////////////////////////////////////////////////////
// Block at 821C6944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6944);
		  /* 821C6944h */ case    0:  		/* addi R8, R21, 4 */
		/* 821C6944h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R21,0x4);
		/* 821C6944h case    0:*/		return 0x821C6948;
		  /* 821C6948h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C6948h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C6948h case    1:*/		return 0x821C694C;
		  /* 821C694Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C694Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C694Ch case    2:*/		return 0x821C6950;
		  /* 821C6950h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821C6950h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C69B8;  }
		/* 821C6950h case    3:*/		return 0x821C6954;
		  /* 821C6954h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C6954h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C6954h case    4:*/		return 0x821C6958;
		  /* 821C6958h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C6958h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C6958h case    5:*/		return 0x821C695C;
		  /* 821C695Ch */ case    6:  		/* bc 12, CR6_EQ, 72 */
		/* 821C695Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C69A4;  }
		/* 821C695Ch case    6:*/		return 0x821C6960;
		  /* 821C6960h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C6960h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C6960h case    7:*/		return 0x821C6964;
		  /* 821C6964h */ case    8:  		/* addi R10, R10, 4 */
		/* 821C6964h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C6964h case    8:*/		return 0x821C6968;
		  /* 821C6968h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821C6968h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6968h case    9:*/		return 0x821C696C;
		  /* 821C696Ch */ case   10:  		/* b 12 */
		/* 821C696Ch case   10:*/		return 0x821C6978;
		/* 821C696Ch case   10:*/		return 0x821C6970;
		  /* 821C6970h */ case   11:  		/* addi R10, R9, 8 */
		/* 821C6970h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C6970h case   11:*/		return 0x821C6974;
		  /* 821C6974h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C6974h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C6974h case   12:*/		return 0x821C6978;
	}
	return 0x821C6978;
} // Block from 821C6944h-821C6978h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C6978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6978);
		  /* 821C6978h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C6978h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C6978h case    0:*/		return 0x821C697C;
		  /* 821C697Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C697Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C6970;  }
		/* 821C697Ch case    1:*/		return 0x821C6980;
		  /* 821C6980h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C6980h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6980h case    2:*/		return 0x821C6984;
		  /* 821C6984h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C6984h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6984h case    3:*/		return 0x821C6988;
		  /* 821C6988h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C6988h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6988h case    4:*/		return 0x821C698C;
		  /* 821C698Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C698Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C698Ch case    5:*/		return 0x821C6990;
		  /* 821C6990h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821C6990h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6990h case    6:*/		return 0x821C6994;
		  /* 821C6994h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821C6994h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6994h case    7:*/		return 0x821C6998;
		  /* 821C6998h */ case    8:  		/* rlwinm R10, R10, 0, 29, 27 */
		/* 821C6998h case    8:*/		cpu::op::rlwinm<0,0,29,27>(regs,&regs.R10,regs.R10);
		/* 821C6998h case    8:*/		return 0x821C699C;
		  /* 821C699Ch */ case    9:  		/* stw R30, <#[R11 + 12]> */
		/* 821C699Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C699Ch case    9:*/		return 0x821C69A0;
		  /* 821C69A0h */ case   10:  		/* stw R10, <#[R11]> */
		/* 821C69A0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C69A0h case   10:*/		return 0x821C69A4;
	}
	return 0x821C69A4;
} // Block from 821C6978h-821C69A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C69A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C69A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C69A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C69A4);
		  /* 821C69A4h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C69A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C69A4h case    0:*/		return 0x821C69A8;
		  /* 821C69A8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C69A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C69A8h case    1:*/		return 0x821C69AC;
		  /* 821C69ACh */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821C69ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C6948;  }
		/* 821C69ACh case    2:*/		return 0x821C69B0;
		  /* 821C69B0h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C69B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C69B0h case    3:*/		return 0x821C69B4;
		  /* 821C69B4h */ case    4:  		/* b -108 */
		/* 821C69B4h case    4:*/		return 0x821C6948;
		/* 821C69B4h case    4:*/		return 0x821C69B8;
	}
	return 0x821C69B8;
} // Block from 821C69A4h-821C69B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C69B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C69B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C69B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C69B8);
		  /* 821C69B8h */ case    0:  		/* mr R3, R21 */
		/* 821C69B8h case    0:*/		regs.R3 = regs.R21;
		/* 821C69B8h case    0:*/		return 0x821C69BC;
		  /* 821C69BCh */ case    1:  		/* bl -401468 */
		/* 821C69BCh case    1:*/		regs.LR = 0x821C69C0; return 0x82164980;
		/* 821C69BCh case    1:*/		return 0x821C69C0;
		  /* 821C69C0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C69C0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C69C0h case    2:*/		return 0x821C69C4;
		  /* 821C69C4h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821C69C4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821C69DC;  }
		/* 821C69C4h case    3:*/		return 0x821C69C8;
		  /* 821C69C8h */ case    4:  		/* li R6, 1 */
		/* 821C69C8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C69C8h case    4:*/		return 0x821C69CC;
		  /* 821C69CCh */ case    5:  		/* li R5, 0 */
		/* 821C69CCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C69CCh case    5:*/		return 0x821C69D0;
		  /* 821C69D0h */ case    6:  		/* mr R4, R21 */
		/* 821C69D0h case    6:*/		regs.R4 = regs.R21;
		/* 821C69D0h case    6:*/		return 0x821C69D4;
		  /* 821C69D4h */ case    7:  		/* mr R3, R31 */
		/* 821C69D4h case    7:*/		regs.R3 = regs.R31;
		/* 821C69D4h case    7:*/		return 0x821C69D8;
		  /* 821C69D8h */ case    8:  		/* bl 412144 */
		/* 821C69D8h case    8:*/		regs.LR = 0x821C69DC; return 0x8222B3C8;
		/* 821C69D8h case    8:*/		return 0x821C69DC;
	}
	return 0x821C69DC;
} // Block from 821C69B8h-821C69DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C69DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C69DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C69DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C69DC);
		  /* 821C69DCh */ case    0:  		/* lwz R22, <#[R1 + 84]> */
		/* 821C69DCh case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 821C69DCh case    0:*/		return 0x821C69E0;
	}
	return 0x821C69E0;
} // Block from 821C69DCh-821C69E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C69E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C69E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C69E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C69E0);
		  /* 821C69E0h */ case    0:  		/* lwz R11, <#[R15]> */
		/* 821C69E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 821C69E0h case    0:*/		return 0x821C69E4;
		  /* 821C69E4h */ case    1:  		/* cmplw CR6, R11, R18 */
		/* 821C69E4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 821C69E4h case    1:*/		return 0x821C69E8;
		  /* 821C69E8h */ case    2:  		/* bc 4, CR6_EQ, -2316 */
		/* 821C69E8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C60DC;  }
		/* 821C69E8h case    2:*/		return 0x821C69EC;
		  /* 821C69ECh */ case    3:  		/* addi R15, R18, 8 */
		/* 821C69ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R18,0x8);
		/* 821C69ECh case    3:*/		return 0x821C69F0;
		  /* 821C69F0h */ case    4:  		/* b -2328 */
		/* 821C69F0h case    4:*/		return 0x821C60D8;
		/* 821C69F0h case    4:*/		return 0x821C69F4;
	}
	return 0x821C69F4;
} // Block from 821C69E0h-821C69F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C69F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C69F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C69F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C69F4);
		  /* 821C69F4h */ case    0:  		/* mr R3, R22 */
		/* 821C69F4h case    0:*/		regs.R3 = regs.R22;
		/* 821C69F4h case    0:*/		return 0x821C69F8;
		  /* 821C69F8h */ case    1:  		/* bl -401528 */
		/* 821C69F8h case    1:*/		regs.LR = 0x821C69FC; return 0x82164980;
		/* 821C69F8h case    1:*/		return 0x821C69FC;
		  /* 821C69FCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C69FCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C69FCh case    2:*/		return 0x821C6A00;
		  /* 821C6A00h */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 821C6A00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C6A18;  }
		/* 821C6A00h case    3:*/		return 0x821C6A04;
		  /* 821C6A04h */ case    4:  		/* lwz R15, <#[R1 + 88]> */
		/* 821C6A04h case    4:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x00000058) );
		/* 821C6A04h case    4:*/		return 0x821C6A08;
	}
	return 0x821C6A08;
} // Block from 821C69F4h-821C6A08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A08);
		  /* 821C6A08h */ case    0:  		/* stb R16, <#[R1 + 80]> */
		/* 821C6A08h case    0:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 821C6A08h case    0:*/		return 0x821C6A0C;
	}
	return 0x821C6A0C;
} // Block from 821C6A08h-821C6A0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A0C);
		  /* 821C6A0Ch */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 821C6A0Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 821C6A0Ch case    0:*/		return 0x821C6A10;
		  /* 821C6A10h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C6A10h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C6A10h case    1:*/		return 0x821C6A14;
		  /* 821C6A14h */ case    2:  		/* b -3060 */
		/* 821C6A14h case    2:*/		return 0x821C5E20;
		/* 821C6A14h case    2:*/		return 0x821C6A18;
	}
	return 0x821C6A18;
} // Block from 821C6A0Ch-821C6A18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A18);
		  /* 821C6A18h */ case    0:  		/* li R6, 0 */
		/* 821C6A18h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C6A18h case    0:*/		return 0x821C6A1C;
		  /* 821C6A1Ch */ case    1:  		/* lwz R4, <#[R20 + 8]> */
		/* 821C6A1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000008) );
		/* 821C6A1Ch case    1:*/		return 0x821C6A20;
		  /* 821C6A20h */ case    2:  		/* rlwinm R5, R19, 2, 0, 29 */
		/* 821C6A20h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R19);
		/* 821C6A20h case    2:*/		return 0x821C6A24;
		  /* 821C6A24h */ case    3:  		/* mr R3, R31 */
		/* 821C6A24h case    3:*/		regs.R3 = regs.R31;
		/* 821C6A24h case    3:*/		return 0x821C6A28;
		  /* 821C6A28h */ case    4:  		/* bl -400784 */
		/* 821C6A28h case    4:*/		regs.LR = 0x821C6A2C; return 0x82164C98;
		/* 821C6A28h case    4:*/		return 0x821C6A2C;
		  /* 821C6A2Ch */ case    5:  		/* stw R16, <#[R20 + 8]> */
		/* 821C6A2Ch case    5:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R20 + 0x00000008) );
		/* 821C6A2Ch case    5:*/		return 0x821C6A30;
		  /* 821C6A30h */ case    6:  		/* mr R4, R22 */
		/* 821C6A30h case    6:*/		regs.R4 = regs.R22;
		/* 821C6A30h case    6:*/		return 0x821C6A34;
		  /* 821C6A34h */ case    7:  		/* mr R3, R31 */
		/* 821C6A34h case    7:*/		regs.R3 = regs.R31;
		/* 821C6A34h case    7:*/		return 0x821C6A38;
		  /* 821C6A38h */ case    8:  		/* bl 412696 */
		/* 821C6A38h case    8:*/		regs.LR = 0x821C6A3C; return 0x8222B650;
		/* 821C6A38h case    8:*/		return 0x821C6A3C;
		  /* 821C6A3Ch */ case    9:  		/* lwz R15, <#[R1 + 88]> */
		/* 821C6A3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x00000058) );
		/* 821C6A3Ch case    9:*/		return 0x821C6A40;
		  /* 821C6A40h */ case   10:  		/* b -3108 */
		/* 821C6A40h case   10:*/		return 0x821C5E1C;
		/* 821C6A40h case   10:*/		return 0x821C6A44;
	}
	return 0x821C6A44;
} // Block from 821C6A18h-821C6A44h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A44);
		  /* 821C6A44h */ case    0:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 821C6A44h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 821C6A44h case    0:*/		return 0x821C6A48;
		  /* 821C6A48h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C6A48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C6A48h case    1:*/		return 0x821C6A4C;
		  /* 821C6A4Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C6A4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C6A4Ch case    2:*/		return 0x821C6A50;
		  /* 821C6A50h */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 821C6A50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C6A64;  }
		/* 821C6A50h case    3:*/		return 0x821C6A54;
		  /* 821C6A54h */ case    4:  		/* mr R15, R11 */
		/* 821C6A54h case    4:*/		regs.R15 = regs.R11;
		/* 821C6A54h case    4:*/		return 0x821C6A58;
		  /* 821C6A58h */ case    5:  		/* stw R11, <#[R1 + 88]> */
		/* 821C6A58h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821C6A58h case    5:*/		return 0x821C6A5C;
		  /* 821C6A5Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C6A5Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6A5Ch case    6:*/		return 0x821C6A60;
		  /* 821C6A60h */ case    7:  		/* bc 4, CR6_EQ, -3140 */
		/* 821C6A60h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C5E1C;  }
		/* 821C6A60h case    7:*/		return 0x821C6A64;
	}
	return 0x821C6A64;
} // Block from 821C6A44h-821C6A64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A64);
		  /* 821C6A64h */ case    0:  		/* lbz R11, <#[R1 + 82]> */
		/* 821C6A64h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000052) );
		/* 821C6A64h case    0:*/		return 0x821C6A68;
		  /* 821C6A68h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821C6A68h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C6A68h case    1:*/		return 0x821C6A6C;
		  /* 821C6A6Ch */ case    2:  		/* bc 4, CR0_EQ, -3184 */
		/* 821C6A6Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C5DFC;  }
		/* 821C6A6Ch case    2:*/		return 0x821C6A70;
		  /* 821C6A70h */ case    3:  		/* lbz R11, <#[R1 + 80]> */
		/* 821C6A70h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821C6A70h case    3:*/		return 0x821C6A74;
		  /* 821C6A74h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C6A74h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C6A74h case    4:*/		return 0x821C6A78;
		  /* 821C6A78h */ case    5:  		/* bc 12, CR0_EQ, 92 */
		/* 821C6A78h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C6AD4;  }
		/* 821C6A78h case    5:*/		return 0x821C6A7C;
		  /* 821C6A7Ch */ case    6:  		/* lwz R11, <#[R31 + 40]> */
		/* 821C6A7Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C6A7Ch case    6:*/		return 0x821C6A80;
		  /* 821C6A80h */ case    7:  		/* addi R11, R11, -8192 */
		/* 821C6A80h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFE000);
		/* 821C6A80h case    7:*/		return 0x821C6A84;
		  /* 821C6A84h */ case    8:  		/* stw R11, <#[R31 + 40]> */
		/* 821C6A84h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C6A84h case    8:*/		return 0x821C6A88;
		  /* 821C6A88h */ case    9:  		/* addi R1, R1, 368 */
		/* 821C6A88h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 821C6A88h case    9:*/		return 0x821C6A8C;
		  /* 821C6A8Ch */ case   10:  		/* lfd FR31, <#[R1 - 160]> */
		/* 821C6A8Ch case   10:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 821C6A8Ch case   10:*/		return 0x821C6A90;
		  /* 821C6A90h */ case   11:  		/* b -1267744 */
		/* 821C6A90h case   11:*/		return 0x82091270;
		/* 821C6A90h case   11:*/		return 0x821C6A94;
	}
	return 0x821C6A94;
} // Block from 821C6A64h-821C6A94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C6A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6A94);
		  /* 821C6A94h */ case    0:  		/* li R4, 4800 */
		/* 821C6A94h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C6A94h case    0:*/		return 0x821C6A98;
		  /* 821C6A98h */ case    1:  		/* mr R3, R31 */
		/* 821C6A98h case    1:*/		regs.R3 = regs.R31;
		/* 821C6A98h case    1:*/		return 0x821C6A9C;
		  /* 821C6A9Ch */ case    2:  		/* bl -478260 */
		/* 821C6A9Ch case    2:*/		regs.LR = 0x821C6AA0; return 0x82151E68;
		/* 821C6A9Ch case    2:*/		return 0x821C6AA0;
	}
	return 0x821C6AA0;
} // Block from 821C6A94h-821C6AA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C6AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6AA0);
		  /* 821C6AA0h */ case    0:  		/* li R4, 4800 */
		/* 821C6AA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C6AA0h case    0:*/		return 0x821C6AA4;
		  /* 821C6AA4h */ case    1:  		/* mr R3, R31 */
		/* 821C6AA4h case    1:*/		regs.R3 = regs.R31;
		/* 821C6AA4h case    1:*/		return 0x821C6AA8;
		  /* 821C6AA8h */ case    2:  		/* bl -478272 */
		/* 821C6AA8h case    2:*/		regs.LR = 0x821C6AAC; return 0x82151E68;
		/* 821C6AA8h case    2:*/		return 0x821C6AAC;
	}
	return 0x821C6AAC;
} // Block from 821C6AA0h-821C6AACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C6AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6AAC);
		  /* 821C6AACh */ case    0:  		/* li R4, 4801 */
		/* 821C6AACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C1);
		/* 821C6AACh case    0:*/		return 0x821C6AB0;
		  /* 821C6AB0h */ case    1:  		/* mr R3, R31 */
		/* 821C6AB0h case    1:*/		regs.R3 = regs.R31;
		/* 821C6AB0h case    1:*/		return 0x821C6AB4;
		  /* 821C6AB4h */ case    2:  		/* bl -478284 */
		/* 821C6AB4h case    2:*/		regs.LR = 0x821C6AB8; return 0x82151E68;
		/* 821C6AB4h case    2:*/		return 0x821C6AB8;
	}
	return 0x821C6AB8;
} // Block from 821C6AACh-821C6AB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C6AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6AB8);
		  /* 821C6AB8h */ case    0:  		/* lis R11, -32252 */
		/* 821C6AB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C6AB8h case    0:*/		return 0x821C6ABC;
		  /* 821C6ABCh */ case    1:  		/* li R4, 3500 */
		/* 821C6ABCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821C6ABCh case    1:*/		return 0x821C6AC0;
		  /* 821C6AC0h */ case    2:  		/* addi R5, R11, -16232 */
		/* 821C6AC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC098);
		/* 821C6AC0h case    2:*/		return 0x821C6AC4;
		  /* 821C6AC4h */ case    3:  		/* bl -478300 */
		/* 821C6AC4h case    3:*/		regs.LR = 0x821C6AC8; return 0x82151E68;
		/* 821C6AC4h case    3:*/		return 0x821C6AC8;
	}
	return 0x821C6AC8;
} // Block from 821C6AB8h-821C6AC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C6AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6AC8);
		  /* 821C6AC8h */ case    0:  		/* li R4, 4800 */
		/* 821C6AC8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C6AC8h case    0:*/		return 0x821C6ACC;
		  /* 821C6ACCh */ case    1:  		/* mr R3, R31 */
		/* 821C6ACCh case    1:*/		regs.R3 = regs.R31;
		/* 821C6ACCh case    1:*/		return 0x821C6AD0;
		  /* 821C6AD0h */ case    2:  		/* bl -478312 */
		/* 821C6AD0h case    2:*/		regs.LR = 0x821C6AD4; return 0x82151E68;
		/* 821C6AD0h case    2:*/		return 0x821C6AD4;
	}
	return 0x821C6AD4;
} // Block from 821C6AC8h-821C6AD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C6AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6AD4);
		  /* 821C6AD4h */ case    0:  		/* lwz R11, <#[R1 + 396]> */
		/* 821C6AD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000018C) );
		/* 821C6AD4h case    0:*/		return 0x821C6AD8;
		  /* 821C6AD8h */ case    1:  		/* cmpwi CR6, R11, 2 */
		/* 821C6AD8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821C6AD8h case    1:*/		return 0x821C6ADC;
		  /* 821C6ADCh */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821C6ADCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C6A88;  }
		/* 821C6ADCh case    2:*/		return 0x821C6AE0;
		  /* 821C6AE0h */ case    3:  		/* lis R11, -32252 */
		/* 821C6AE0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C6AE0h case    3:*/		return 0x821C6AE4;
		  /* 821C6AE4h */ case    4:  		/* li R4, 3500 */
		/* 821C6AE4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821C6AE4h case    4:*/		return 0x821C6AE8;
		  /* 821C6AE8h */ case    5:  		/* addi R5, R11, -16260 */
		/* 821C6AE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC07C);
		/* 821C6AE8h case    5:*/		return 0x821C6AEC;
		  /* 821C6AECh */ case    6:  		/* mr R3, R31 */
		/* 821C6AECh case    6:*/		regs.R3 = regs.R31;
		/* 821C6AECh case    6:*/		return 0x821C6AF0;
		  /* 821C6AF0h */ case    7:  		/* bl -478344 */
		/* 821C6AF0h case    7:*/		regs.LR = 0x821C6AF4; return 0x82151E68;
		/* 821C6AF0h case    7:*/		return 0x821C6AF4;
		  /* 821C6AF4h */ case    8:  		/* nop */
		/* 821C6AF4h case    8:*/		cpu::op::nop();
		/* 821C6AF4h case    8:*/		return 0x821C6AF8;
		  /* 821C6AF8h */ case    9:  		/* cmplwi CR6, R5, 16 */
		/* 821C6AF8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 821C6AF8h case    9:*/		return 0x821C6AFC;
		  /* 821C6AFCh */ case   10:  		/* bc 4, CR6_LT, 44 */
		/* 821C6AFCh case   10:*/		if ( !regs.CR[6].lt ) { return 0x821C6B28;  }
		/* 821C6AFCh case   10:*/		return 0x821C6B00;
		  /* 821C6B00h */ case   11:  		/* rlwinm R11, R5, 27, 5, 31 */
		/* 821C6B00h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R5);
		/* 821C6B00h case   11:*/		return 0x821C6B04;
		  /* 821C6B04h */ case   12:  		/* li R9, 1 */
		/* 821C6B04h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821C6B04h case   12:*/		return 0x821C6B08;
		  /* 821C6B08h */ case   13:  		/* addi R11, R11, 21 */
		/* 821C6B08h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821C6B08h case   13:*/		return 0x821C6B0C;
		  /* 821C6B0Ch */ case   14:  		/* rlwinm R10, R5, 0, 27, 31 */
		/* 821C6B0Ch case   14:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R5);
		/* 821C6B0Ch case   14:*/		return 0x821C6B10;
		  /* 821C6B10h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C6B10h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C6B10h case   15:*/		return 0x821C6B14;
		  /* 821C6B14h */ case   16:  		/* slw R10, R9, R10 */
		/* 821C6B14h case   16:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C6B14h case   16:*/		return 0x821C6B18;
		  /* 821C6B18h */ case   17:  		/* lwzx R9, <#[R11 + R4]> */
		/* 821C6B18h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 821C6B18h case   17:*/		return 0x821C6B1C;
		  /* 821C6B1Ch */ case   18:  		/* or R10, R10, R9 */
		/* 821C6B1Ch case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821C6B1Ch case   18:*/		return 0x821C6B20;
		  /* 821C6B20h */ case   19:  		/* stwx R10, <#[R11 + R4]> */
		/* 821C6B20h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 821C6B20h case   19:*/		return 0x821C6B24;
		  /* 821C6B24h */ case   20:  		/* bclr 20, CR0_LT */
		/* 821C6B24h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C6B24h case   20:*/		return 0x821C6B28;
	}
	return 0x821C6B28;
} // Block from 821C6AD4h-821C6B28h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C6B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6B28);
		  /* 821C6B28h */ case    0:  		/* lwz R11, <#[R4 + 48]> */
		/* 821C6B28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821C6B28h case    0:*/		return 0x821C6B2C;
		  /* 821C6B2Ch */ case    1:  		/* oris R11, R11, 16384 */
		/* 821C6B2Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821C6B2Ch case    1:*/		return 0x821C6B30;
		  /* 821C6B30h */ case    2:  		/* stw R11, <#[R4 + 48]> */
		/* 821C6B30h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821C6B30h case    2:*/		return 0x821C6B34;
		  /* 821C6B34h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821C6B34h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C6B34h case    3:*/		return 0x821C6B38;
	}
	return 0x821C6B38;
} // Block from 821C6B28h-821C6B38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C6B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6B38);
		  /* 821C6B38h */ case    0:  		/* mfspr R12, LR */
		/* 821C6B38h case    0:*/		regs.R12 = regs.LR;
		/* 821C6B38h case    0:*/		return 0x821C6B3C;
		  /* 821C6B3Ch */ case    1:  		/* bl -1267940 */
		/* 821C6B3Ch case    1:*/		regs.LR = 0x821C6B40; return 0x82091258;
		/* 821C6B3Ch case    1:*/		return 0x821C6B40;
		  /* 821C6B40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C6B40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C6B40h case    2:*/		return 0x821C6B44;
		  /* 821C6B44h */ case    3:  		/* li R28, 0 */
		/* 821C6B44h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C6B44h case    3:*/		return 0x821C6B48;
		  /* 821C6B48h */ case    4:  		/* mr R29, R3 */
		/* 821C6B48h case    4:*/		regs.R29 = regs.R3;
		/* 821C6B48h case    4:*/		return 0x821C6B4C;
		  /* 821C6B4Ch */ case    5:  		/* stw R28, <#[R4 + 40]> */
		/* 821C6B4Ch case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R4 + 0x00000028) );
		/* 821C6B4Ch case    5:*/		return 0x821C6B50;
		  /* 821C6B50h */ case    6:  		/* mr R31, R4 */
		/* 821C6B50h case    6:*/		regs.R31 = regs.R4;
		/* 821C6B50h case    6:*/		return 0x821C6B54;
		  /* 821C6B54h */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C6B54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C6B54h case    7:*/		return 0x821C6B58;
		  /* 821C6B58h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C6B58h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C6B58h case    8:*/		return 0x821C6B5C;
		  /* 821C6B5Ch */ case    9:  		/* bc 4, CR0_EQ, 184 */
		/* 821C6B5Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821C6C14;  }
		/* 821C6B5Ch case    9:*/		return 0x821C6B60;
		  /* 821C6B60h */ case   10:  		/* mr R30, R11 */
		/* 821C6B60h case   10:*/		regs.R30 = regs.R11;
		/* 821C6B60h case   10:*/		return 0x821C6B64;
		  /* 821C6B64h */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821C6B64h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C6B64h case   11:*/		return 0x821C6B68;
		  /* 821C6B68h */ case   12:  		/* bc 12, CR0_EQ, 172 */
		/* 821C6B68h case   12:*/		if ( regs.CR[0].eq ) { return 0x821C6C14;  }
		/* 821C6B68h case   12:*/		return 0x821C6B6C;
		  /* 821C6B6Ch */ case   13:  		/* lwz R11, <#[R29 + 616]> */
		/* 821C6B6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000268) );
		/* 821C6B6Ch case   13:*/		return 0x821C6B70;
		  /* 821C6B70h */ case   14:  		/* li R10, 68 */
		/* 821C6B70h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x44);
		/* 821C6B70h case   14:*/		return 0x821C6B74;
		  /* 821C6B74h */ case   15:  		/* subf R11, R11, R31 */
		/* 821C6B74h case   15:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821C6B74h case   15:*/		return 0x821C6B78;
		  /* 821C6B78h */ case   16:  		/* divw R11, R11, R10 */
		/* 821C6B78h case   16:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C6B78h case   16:*/		return 0x821C6B7C;
		  /* 821C6B7Ch */ case   17:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 821C6B7Ch case   17:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 821C6B7Ch case   17:*/		return 0x821C6B80;
		  /* 821C6B80h */ case   18:  		/* rlwinm R9, R11, 0, 27, 31 */
		/* 821C6B80h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 821C6B80h case   18:*/		return 0x821C6B84;
		  /* 821C6B84h */ case   19:  		/* addi R10, R10, 21 */
		/* 821C6B84h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821C6B84h case   19:*/		return 0x821C6B88;
		  /* 821C6B88h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821C6B88h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821C6B88h case   20:*/		return 0x821C6B8C;
		  /* 821C6B8Ch */ case   21:  		/* lwzx R10, <#[R10 + R30]> */
		/* 821C6B8Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 821C6B8Ch case   21:*/		return 0x821C6B90;
		  /* 821C6B90h */ case   22:  		/* srw R10, R10, R9 */
		/* 821C6B90h case   22:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821C6B90h case   22:*/		return 0x821C6B94;
		  /* 821C6B94h */ case   23:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821C6B94h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821C6B94h case   23:*/		return 0x821C6B98;
		  /* 821C6B98h */ case   24:  		/* bc 12, CR0_EQ, 100 */
		/* 821C6B98h case   24:*/		if ( regs.CR[0].eq ) { return 0x821C6BFC;  }
		/* 821C6B98h case   24:*/		return 0x821C6B9C;
		  /* 821C6B9Ch */ case   25:  		/* lwz R10, <#[R30 + 12]> */
		/* 821C6B9Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C6B9Ch case   25:*/		return 0x821C6BA0;
		  /* 821C6BA0h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 821C6BA0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C6BA0h case   26:*/		return 0x821C6BA4;
		  /* 821C6BA4h */ case   27:  		/* bc 12, CR6_EQ, 88 */
		/* 821C6BA4h case   27:*/		if ( regs.CR[6].eq ) { return 0x821C6BFC;  }
		/* 821C6BA4h case   27:*/		return 0x821C6BA8;
		  /* 821C6BA8h */ case   28:  		/* rlwinm R8, R11, 27, 5, 31 */
		/* 821C6BA8h case   28:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R8,regs.R11);
		/* 821C6BA8h case   28:*/		return 0x821C6BAC;
		  /* 821C6BACh */ case   29:  		/* lwz R9, <#[R10]> */
		/* 821C6BACh case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6BACh case   29:*/		return 0x821C6BB0;
		  /* 821C6BB0h */ case   30:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821C6BB0h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821C6BB0h case   30:*/		return 0x821C6BB4;
		  /* 821C6BB4h */ case   31:  		/* addi R8, R8, 21 */
		/* 821C6BB4h case   31:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x15);
		/* 821C6BB4h case   31:*/		return 0x821C6BB8;
		  /* 821C6BB8h */ case   32:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821C6BB8h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821C6BB8h case   32:*/		return 0x821C6BBC;
		  /* 821C6BBCh */ case   33:  		/* lwzx R8, <#[R8 + R9]> */
		/* 821C6BBCh case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 821C6BBCh case   33:*/		return 0x821C6BC0;
		  /* 821C6BC0h */ case   34:  		/* srw R8, R8, R7 */
		/* 821C6BC0h case   34:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821C6BC0h case   34:*/		return 0x821C6BC4;
		  /* 821C6BC4h */ case   35:  		/* rlwinm. R8, R8, 0, 31, 31 */
		/* 821C6BC4h case   35:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R8);
		/* 821C6BC4h case   35:*/		return 0x821C6BC8;
		  /* 821C6BC8h */ case   36:  		/* bc 12, CR0_EQ, 12 */
		/* 821C6BC8h case   36:*/		if ( regs.CR[0].eq ) { return 0x821C6BD4;  }
		/* 821C6BC8h case   36:*/		return 0x821C6BCC;
		  /* 821C6BCCh */ case   37:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C6BCCh case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C6BCCh case   37:*/		return 0x821C6BD0;
		  /* 821C6BD0h */ case   38:  		/* b -48 */
		/* 821C6BD0h case   38:*/		return 0x821C6BA0;
		/* 821C6BD0h case   38:*/		return 0x821C6BD4;
	}
	return 0x821C6BD4;
} // Block from 821C6B38h-821C6BD4h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821C6BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6BD4);
		  /* 821C6BD4h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 821C6BD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821C6BD4h case    0:*/		return 0x821C6BD8;
		  /* 821C6BD8h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821C6BD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C6BFC;  }
		/* 821C6BD8h case    1:*/		return 0x821C6BDC;
		  /* 821C6BDCh */ case    2:  		/* li R5, 40 */
		/* 821C6BDCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821C6BDCh case    2:*/		return 0x821C6BE0;
		  /* 821C6BE0h */ case    3:  		/* li R4, 20 */
		/* 821C6BE0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821C6BE0h case    3:*/		return 0x821C6BE4;
		  /* 821C6BE4h */ case    4:  		/* mr R3, R29 */
		/* 821C6BE4h case    4:*/		regs.R3 = regs.R29;
		/* 821C6BE4h case    4:*/		return 0x821C6BE8;
		  /* 821C6BE8h */ case    5:  		/* bl -402168 */
		/* 821C6BE8h case    5:*/		regs.LR = 0x821C6BEC; return 0x821648F0;
		/* 821C6BE8h case    5:*/		return 0x821C6BEC;
		  /* 821C6BECh */ case    6:  		/* stw R30, <#[R3]> */
		/* 821C6BECh case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821C6BECh case    6:*/		return 0x821C6BF0;
		  /* 821C6BF0h */ case    7:  		/* lwz R11, <#[R31 + 40]> */
		/* 821C6BF0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C6BF0h case    7:*/		return 0x821C6BF4;
		  /* 821C6BF4h */ case    8:  		/* stw R11, <#[R3 + 4]> */
		/* 821C6BF4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C6BF4h case    8:*/		return 0x821C6BF8;
		  /* 821C6BF8h */ case    9:  		/* stw R3, <#[R31 + 40]> */
		/* 821C6BF8h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 821C6BF8h case    9:*/		return 0x821C6BFC;
	}
	return 0x821C6BFC;
} // Block from 821C6BD4h-821C6BFCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C6BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6BFC);
		  /* 821C6BFCh */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C6BFCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C6BFCh case    0:*/		return 0x821C6C00;
		  /* 821C6C00h */ case    1:  		/* lwz R30, <#[R11 + 4]> */
		/* 821C6C00h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821C6C00h case    1:*/		return 0x821C6C04;
		  /* 821C6C04h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 821C6C04h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 821C6C04h case    2:*/		return 0x821C6C08;
		  /* 821C6C08h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C6C08h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C6C14;  }
		/* 821C6C08h case    3:*/		return 0x821C6C0C;
		  /* 821C6C0Ch */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821C6C0Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C6C0Ch case    4:*/		return 0x821C6C10;
		  /* 821C6C10h */ case    5:  		/* bc 4, CR6_EQ, -164 */
		/* 821C6C10h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C6B6C;  }
		/* 821C6C10h case    5:*/		return 0x821C6C14;
	}
	return 0x821C6C14;
} // Block from 821C6BFCh-821C6C14h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C6C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6C14);
		  /* 821C6C14h */ case    0:  		/* lwz R10, <#[R31 + 40]> */
		/* 821C6C14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821C6C14h case    0:*/		return 0x821C6C18;
		  /* 821C6C18h */ case    1:  		/* lwz R9, <#[R31 + 36]> */
		/* 821C6C18h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000024) );
		/* 821C6C18h case    1:*/		return 0x821C6C1C;
		  /* 821C6C1Ch */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 821C6C1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821C6C1Ch case    2:*/		return 0x821C6C20;
		  /* 821C6C20h */ case    3:  		/* addi R11, R11, 0 */
		/* 821C6C20h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821C6C20h case    3:*/		return 0x821C6C24;
		  /* 821C6C24h */ case    4:  		/* addic R8, R11, -1 */
		/* 821C6C24h case    4:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821C6C24h case    4:*/		return 0x821C6C28;
		  /* 821C6C28h */ case    5:  		/* subfe R11, R8, R11 */
		/* 821C6C28h case    5:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821C6C28h case    5:*/		return 0x821C6C2C;
		  /* 821C6C2Ch */ case    6:  		/* rlwimi R11, R9, 0, 0, 30 */
		/* 821C6C2Ch case    6:*/		cpu::op::rlwimi<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821C6C2Ch case    6:*/		return 0x821C6C30;
		  /* 821C6C30h */ case    7:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821C6C30h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821C6C30h case    7:*/		return 0x821C6C34;
		  /* 821C6C34h */ case    8:  		/* stw R11, <#[R31 + 36]> */
		/* 821C6C34h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821C6C34h case    8:*/		return 0x821C6C38;
		  /* 821C6C38h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821C6C38h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821C6C48;  }
		/* 821C6C38h case    9:*/		return 0x821C6C3C;
		  /* 821C6C3Ch */ case   10:  		/* lwz R11, <#[R10]> */
		/* 821C6C3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C6C3Ch case   10:*/		return 0x821C6C40;
		  /* 821C6C40h */ case   11:  		/* stw R11, <#[R31 + 16]> */
		/* 821C6C40h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821C6C40h case   11:*/		return 0x821C6C44;
		  /* 821C6C44h */ case   12:  		/* b 8 */
		/* 821C6C44h case   12:*/		return 0x821C6C4C;
		/* 821C6C44h case   12:*/		return 0x821C6C48;
	}
	return 0x821C6C48;
} // Block from 821C6C14h-821C6C48h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C6C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6C48);
		  /* 821C6C48h */ case    0:  		/* stw R28, <#[R31 + 16]> */
		/* 821C6C48h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 821C6C48h case    0:*/		return 0x821C6C4C;
	}
	return 0x821C6C4C;
} // Block from 821C6C48h-821C6C4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6C4C);
		  /* 821C6C4Ch */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 821C6C4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821C6C4Ch case    0:*/		return 0x821C6C50;
		  /* 821C6C50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821C6C50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6C50h case    1:*/		return 0x821C6C54;
		  /* 821C6C54h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821C6C54h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C6C68;  }
		/* 821C6C54h case    2:*/		return 0x821C6C58;
		  /* 821C6C58h */ case    3:  		/* lwz R10, <#[R31 + 12]> */
		/* 821C6C58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C6C58h case    3:*/		return 0x821C6C5C;
		  /* 821C6C5Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821C6C5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C6C5Ch case    4:*/		return 0x821C6C60;
		  /* 821C6C60h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821C6C60h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C6C68;  }
		/* 821C6C60h case    5:*/		return 0x821C6C64;
		  /* 821C6C64h */ case    6:  		/* stw R11, <#[R31 + 12]> */
		/* 821C6C64h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C6C64h case    6:*/		return 0x821C6C68;
	}
	return 0x821C6C68;
} // Block from 821C6C4Ch-821C6C68h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C6C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6C68);
		  /* 821C6C68h */ case    0:  		/* addi R1, R1, 128 */
		/* 821C6C68h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C6C68h case    0:*/		return 0x821C6C6C;
		  /* 821C6C6Ch */ case    1:  		/* b -1268164 */
		/* 821C6C6Ch case    1:*/		return 0x820912A8;
		/* 821C6C6Ch case    1:*/		return 0x821C6C70;
	}
	return 0x821C6C70;
} // Block from 821C6C68h-821C6C70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6C70);
		  /* 821C6C70h */ case    0:  		/* mfspr R12, LR */
		/* 821C6C70h case    0:*/		regs.R12 = regs.LR;
		/* 821C6C70h case    0:*/		return 0x821C6C74;
		  /* 821C6C74h */ case    1:  		/* bl -1268256 */
		/* 821C6C74h case    1:*/		regs.LR = 0x821C6C78; return 0x82091254;
		/* 821C6C74h case    1:*/		return 0x821C6C78;
		  /* 821C6C78h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C6C78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C6C78h case    2:*/		return 0x821C6C7C;
		  /* 821C6C7Ch */ case    3:  		/* lis R11, -32256 */
		/* 821C6C7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C6C7Ch case    3:*/		return 0x821C6C80;
		  /* 821C6C80h */ case    4:  		/* mr R31, R4 */
		/* 821C6C80h case    4:*/		regs.R31 = regs.R4;
		/* 821C6C80h case    4:*/		return 0x821C6C84;
		  /* 821C6C84h */ case    5:  		/* li R4, 1 */
		/* 821C6C84h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C6C84h case    5:*/		return 0x821C6C88;
		  /* 821C6C88h */ case    6:  		/* mr R30, R3 */
		/* 821C6C88h case    6:*/		regs.R30 = regs.R3;
		/* 821C6C88h case    6:*/		return 0x821C6C8C;
		  /* 821C6C8Ch */ case    7:  		/* mr R29, R5 */
		/* 821C6C8Ch case    7:*/		regs.R29 = regs.R5;
		/* 821C6C8Ch case    7:*/		return 0x821C6C90;
		  /* 821C6C90h */ case    8:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 821C6C90h case    8:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 821C6C90h case    8:*/		return 0x821C6C94;
		  /* 821C6C94h */ case    9:  		/* mr R28, R6 */
		/* 821C6C94h case    9:*/		regs.R28 = regs.R6;
		/* 821C6C94h case    9:*/		return 0x821C6C98;
		  /* 821C6C98h */ case   10:  		/* fmr FR3, FR4 */
		/* 821C6C98h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821C6C98h case   10:*/		return 0x821C6C9C;
		  /* 821C6C9Ch */ case   11:  		/* fmr FR2, FR4 */
		/* 821C6C9Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 821C6C9Ch case   11:*/		return 0x821C6CA0;
		  /* 821C6CA0h */ case   12:  		/* fmr FR1, FR4 */
		/* 821C6CA0h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 821C6CA0h case   12:*/		return 0x821C6CA4;
		  /* 821C6CA4h */ case   13:  		/* bl 409268 */
		/* 821C6CA4h case   13:*/		regs.LR = 0x821C6CA8; return 0x8222AB58;
		/* 821C6CA4h case   13:*/		return 0x821C6CA8;
		  /* 821C6CA8h */ case   14:  		/* mr R4, R3 */
		/* 821C6CA8h case   14:*/		regs.R4 = regs.R3;
		/* 821C6CA8h case   14:*/		return 0x821C6CAC;
		  /* 821C6CACh */ case   15:  		/* li R5, 0 */
		/* 821C6CACh case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C6CACh case   15:*/		return 0x821C6CB0;
		  /* 821C6CB0h */ case   16:  		/* mr R3, R30 */
		/* 821C6CB0h case   16:*/		regs.R3 = regs.R30;
		/* 821C6CB0h case   16:*/		return 0x821C6CB4;
		  /* 821C6CB4h */ case   17:  		/* bl -322468 */
		/* 821C6CB4h case   17:*/		regs.LR = 0x821C6CB8; return 0x82178110;
		/* 821C6CB4h case   17:*/		return 0x821C6CB8;
		  /* 821C6CB8h */ case   18:  		/* mr R6, R3 */
		/* 821C6CB8h case   18:*/		regs.R6 = regs.R3;
		/* 821C6CB8h case   18:*/		return 0x821C6CBC;
		  /* 821C6CBCh */ case   19:  		/* addi R5, R31, 24 */
		/* 821C6CBCh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x18);
		/* 821C6CBCh case   19:*/		return 0x821C6CC0;
		  /* 821C6CC0h */ case   20:  		/* mr R4, R31 */
		/* 821C6CC0h case   20:*/		regs.R4 = regs.R31;
		/* 821C6CC0h case   20:*/		return 0x821C6CC4;
		  /* 821C6CC4h */ case   21:  		/* mr R3, R30 */
		/* 821C6CC4h case   21:*/		regs.R3 = regs.R30;
		/* 821C6CC4h case   21:*/		return 0x821C6CC8;
		  /* 821C6CC8h */ case   22:  		/* bl -20968 */
		/* 821C6CC8h case   22:*/		regs.LR = 0x821C6CCC; return 0x821C1AE0;
		/* 821C6CC8h case   22:*/		return 0x821C6CCC;
		  /* 821C6CCCh */ case   23:  		/* mr R27, R3 */
		/* 821C6CCCh case   23:*/		regs.R27 = regs.R3;
		/* 821C6CCCh case   23:*/		return 0x821C6CD0;
		  /* 821C6CD0h */ case   24:  		/* addi R5, R31, 32 */
		/* 821C6CD0h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x20);
		/* 821C6CD0h case   24:*/		return 0x821C6CD4;
		  /* 821C6CD4h */ case   25:  		/* li R8, 0 */
		/* 821C6CD4h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C6CD4h case   25:*/		return 0x821C6CD8;
		  /* 821C6CD8h */ case   26:  		/* li R7, 0 */
		/* 821C6CD8h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C6CD8h case   26:*/		return 0x821C6CDC;
		  /* 821C6CDCh */ case   27:  		/* li R6, 85 */
		/* 821C6CDCh case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x55);
		/* 821C6CDCh case   27:*/		return 0x821C6CE0;
		  /* 821C6CE0h */ case   28:  		/* mr R4, R31 */
		/* 821C6CE0h case   28:*/		regs.R4 = regs.R31;
		/* 821C6CE0h case   28:*/		return 0x821C6CE4;
		  /* 821C6CE4h */ case   29:  		/* mr R3, R30 */
		/* 821C6CE4h case   29:*/		regs.R3 = regs.R30;
		/* 821C6CE4h case   29:*/		return 0x821C6CE8;
		  /* 821C6CE8h */ case   30:  		/* bl 384176 */
		/* 821C6CE8h case   30:*/		regs.LR = 0x821C6CEC; return 0x82224998;
		/* 821C6CE8h case   30:*/		return 0x821C6CEC;
		  /* 821C6CECh */ case   31:  		/* mr R31, R3 */
		/* 821C6CECh case   31:*/		regs.R31 = regs.R3;
		/* 821C6CECh case   31:*/		return 0x821C6CF0;
		  /* 821C6CF0h */ case   32:  		/* li R5, 7 */
		/* 821C6CF0h case   32:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821C6CF0h case   32:*/		return 0x821C6CF4;
		  /* 821C6CF4h */ case   33:  		/* mr R4, R27 */
		/* 821C6CF4h case   33:*/		regs.R4 = regs.R27;
		/* 821C6CF4h case   33:*/		return 0x821C6CF8;
		  /* 821C6CF8h */ case   34:  		/* mr R3, R30 */
		/* 821C6CF8h case   34:*/		regs.R3 = regs.R30;
		/* 821C6CF8h case   34:*/		return 0x821C6CFC;
		  /* 821C6CFCh */ case   35:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C6CFCh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C6CFCh case   35:*/		return 0x821C6D00;
		  /* 821C6D00h */ case   36:  		/* oris R11, R11, 6 */
		/* 821C6D00h case   36:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821C6D00h case   36:*/		return 0x821C6D04;
		  /* 821C6D04h */ case   37:  		/* stw R11, <#[R31 + 8]> */
		/* 821C6D04h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C6D04h case   37:*/		return 0x821C6D08;
		  /* 821C6D08h */ case   38:  		/* bl -353720 */
		/* 821C6D08h case   38:*/		regs.LR = 0x821C6D0C; return 0x82170750;
		/* 821C6D08h case   38:*/		return 0x821C6D0C;
		  /* 821C6D0Ch */ case   39:  		/* mr R4, R3 */
		/* 821C6D0Ch case   39:*/		regs.R4 = regs.R3;
		/* 821C6D0Ch case   39:*/		return 0x821C6D10;
		  /* 821C6D10h */ case   40:  		/* mr R3, R31 */
		/* 821C6D10h case   40:*/		regs.R3 = regs.R31;
		/* 821C6D10h case   40:*/		return 0x821C6D14;
		  /* 821C6D14h */ case   41:  		/* bl -322380 */
		/* 821C6D14h case   41:*/		regs.LR = 0x821C6D18; return 0x821781C8;
		/* 821C6D14h case   41:*/		return 0x821C6D18;
		  /* 821C6D18h */ case   42:  		/* li R6, 0 */
		/* 821C6D18h case   42:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C6D18h case   42:*/		return 0x821C6D1C;
		  /* 821C6D1Ch */ case   43:  		/* li R5, 0 */
		/* 821C6D1Ch case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C6D1Ch case   43:*/		return 0x821C6D20;
		  /* 821C6D20h */ case   44:  		/* li R4, 85 */
		/* 821C6D20h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 821C6D20h case   44:*/		return 0x821C6D24;
		  /* 821C6D24h */ case   45:  		/* mr R3, R30 */
		/* 821C6D24h case   45:*/		regs.R3 = regs.R30;
		/* 821C6D24h case   45:*/		return 0x821C6D28;
		  /* 821C6D28h */ case   46:  		/* bl -403704 */
		/* 821C6D28h case   46:*/		regs.LR = 0x821C6D2C; return 0x82164430;
		/* 821C6D28h case   46:*/		return 0x821C6D2C;
		  /* 821C6D2Ch */ case   47:  		/* addi R11, R31, -20 */
		/* 821C6D2Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFEC);
		/* 821C6D2Ch case   47:*/		return 0x821C6D30;
		  /* 821C6D30h */ case   48:  		/* add R11, R3, R11 */
		/* 821C6D30h case   48:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C6D30h case   48:*/		return 0x821C6D34;
		  /* 821C6D34h */ case   49:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C6D34h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C6D34h case   49:*/		return 0x821C6D38;
		  /* 821C6D38h */ case   50:  		/* stw R29, <#[R11]> */
		/* 821C6D38h case   50:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6D38h case   50:*/		return 0x821C6D3C;
		  /* 821C6D3Ch */ case   51:  		/* ori R10, R10, 16 */
		/* 821C6D3Ch case   51:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x10);
		/* 821C6D3Ch case   51:*/		return 0x821C6D40;
		  /* 821C6D40h */ case   52:  		/* lwz R9, <#[R28 + 4]> */
		/* 821C6D40h case   52:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000004) );
		/* 821C6D40h case   52:*/		return 0x821C6D44;
		  /* 821C6D44h */ case   53:  		/* stw R9, <#[R11 + 4]> */
		/* 821C6D44h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C6D44h case   53:*/		return 0x821C6D48;
		  /* 821C6D48h */ case   54:  		/* stw R10, <#[R11 + 16]> */
		/* 821C6D48h case   54:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C6D48h case   54:*/		return 0x821C6D4C;
		  /* 821C6D4Ch */ case   55:  		/* lwz R11, <#[R30 + 44]> */
		/* 821C6D4Ch case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C6D4Ch case   55:*/		return 0x821C6D50;
		  /* 821C6D50h */ case   56:  		/* ori R11, R11, 8192 */
		/* 821C6D50h case   56:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821C6D50h case   56:*/		return 0x821C6D54;
		  /* 821C6D54h */ case   57:  		/* stw R11, <#[R30 + 44]> */
		/* 821C6D54h case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C6D54h case   57:*/		return 0x821C6D58;
		  /* 821C6D58h */ case   58:  		/* addi R1, R1, 128 */
		/* 821C6D58h case   58:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C6D58h case   58:*/		return 0x821C6D5C;
		  /* 821C6D5Ch */ case   59:  		/* b -1268408 */
		/* 821C6D5Ch case   59:*/		return 0x820912A4;
		/* 821C6D5Ch case   59:*/		return 0x821C6D60;
	}
	return 0x821C6D60;
} // Block from 821C6C70h-821C6D60h (60 instructions)

//////////////////////////////////////////////////////
// Block at 821C6D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6D60);
		  /* 821C6D60h */ case    0:  		/* mfspr R12, LR */
		/* 821C6D60h case    0:*/		regs.R12 = regs.LR;
		/* 821C6D60h case    0:*/		return 0x821C6D64;
		  /* 821C6D64h */ case    1:  		/* bl -1268492 */
		/* 821C6D64h case    1:*/		regs.LR = 0x821C6D68; return 0x82091258;
		/* 821C6D64h case    1:*/		return 0x821C6D68;
		  /* 821C6D68h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C6D68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C6D68h case    2:*/		return 0x821C6D6C;
		  /* 821C6D6Ch */ case    3:  		/* lwz R11, <#[R6]> */
		/* 821C6D6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821C6D6Ch case    3:*/		return 0x821C6D70;
		  /* 821C6D70h */ case    4:  		/* mr R29, R3 */
		/* 821C6D70h case    4:*/		regs.R29 = regs.R3;
		/* 821C6D70h case    4:*/		return 0x821C6D74;
		  /* 821C6D74h */ case    5:  		/* mr R28, R5 */
		/* 821C6D74h case    5:*/		regs.R28 = regs.R5;
		/* 821C6D74h case    5:*/		return 0x821C6D78;
		  /* 821C6D78h */ case    6:  		/* oris R11, R11, 4096 */
		/* 821C6D78h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821C6D78h case    6:*/		return 0x821C6D7C;
		  /* 821C6D7Ch */ case    7:  		/* mr R31, R6 */
		/* 821C6D7Ch case    7:*/		regs.R31 = regs.R6;
		/* 821C6D7Ch case    7:*/		return 0x821C6D80;
		  /* 821C6D80h */ case    8:  		/* stw R11, <#[R6]> */
		/* 821C6D80h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821C6D80h case    8:*/		return 0x821C6D84;
		  /* 821C6D84h */ case    9:  		/* lwz R30, <#[R4 + 4]> */
		/* 821C6D84h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x00000004) );
		/* 821C6D84h case    9:*/		return 0x821C6D88;
		  /* 821C6D88h */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 821C6D88h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C6D88h case   10:*/		return 0x821C6D8C;
		  /* 821C6D8Ch */ case   11:  		/* bc 12, CR6_EQ, 92 */
		/* 821C6D8Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821C6DE8;  }
		/* 821C6D8Ch case   11:*/		return 0x821C6D90;
		  /* 821C6D90h */ case   12:  		/* lwz R4, <#[R30 + 16]> */
		/* 821C6D90h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821C6D90h case   12:*/		return 0x821C6D94;
		  /* 821C6D94h */ case   13:  		/* cmplwi CR6, R4, 0 */
		/* 821C6D94h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821C6D94h case   13:*/		return 0x821C6D98;
		  /* 821C6D98h */ case   14:  		/* bc 12, CR6_EQ, 72 */
		/* 821C6D98h case   14:*/		if ( regs.CR[6].eq ) { return 0x821C6DE0;  }
		/* 821C6D98h case   14:*/		return 0x821C6D9C;
		  /* 821C6D9Ch */ case   15:  		/* lwz R11, <#[R30]> */
		/* 821C6D9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C6D9Ch case   15:*/		return 0x821C6DA0;
		  /* 821C6DA0h */ case   16:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821C6DA0h case   16:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821C6DA0h case   16:*/		return 0x821C6DA4;
		  /* 821C6DA4h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 821C6DA4h case   17:*/		if ( regs.CR[0].eq ) { return 0x821C6DB4;  }
		/* 821C6DA4h case   17:*/		return 0x821C6DA8;
		  /* 821C6DA8h */ case   18:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C6DA8h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C6DA8h case   18:*/		return 0x821C6DAC;
		  /* 821C6DACh */ case   19:  		/* li R11, 1 */
		/* 821C6DACh case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C6DACh case   19:*/		return 0x821C6DB0;
		  /* 821C6DB0h */ case   20:  		/* bc 12, CR0_EQ, 8 */
		/* 821C6DB0h case   20:*/		if ( regs.CR[0].eq ) { return 0x821C6DB8;  }
		/* 821C6DB0h case   20:*/		return 0x821C6DB4;
	}
	return 0x821C6DB4;
} // Block from 821C6D60h-821C6DB4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C6DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6DB4);
		  /* 821C6DB4h */ case    0:  		/* li R11, 0 */
		/* 821C6DB4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C6DB4h case    0:*/		return 0x821C6DB8;
	}
	return 0x821C6DB8;
} // Block from 821C6DB4h-821C6DB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6DB8);
		  /* 821C6DB8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C6DB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C6DB8h case    0:*/		return 0x821C6DBC;
		  /* 821C6DBCh */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821C6DBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821C6DE0;  }
		/* 821C6DBCh case    1:*/		return 0x821C6DC0;
		  /* 821C6DC0h */ case    2:  		/* lwz R11, <#[R4 + 8]> */
		/* 821C6DC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821C6DC0h case    2:*/		return 0x821C6DC4;
		  /* 821C6DC4h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C6DC4h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C6DC4h case    3:*/		return 0x821C6DC8;
		  /* 821C6DC8h */ case    4:  		/* cmplwi CR6, R11, 15104 */
		/* 821C6DC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 821C6DC8h case    4:*/		return 0x821C6DCC;
		  /* 821C6DCCh */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 821C6DCCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C6DE0;  }
		/* 821C6DCCh case    5:*/		return 0x821C6DD0;
		  /* 821C6DD0h */ case    6:  		/* mr R6, R31 */
		/* 821C6DD0h case    6:*/		regs.R6 = regs.R31;
		/* 821C6DD0h case    6:*/		return 0x821C6DD4;
		  /* 821C6DD4h */ case    7:  		/* mr R5, R28 */
		/* 821C6DD4h case    7:*/		regs.R5 = regs.R28;
		/* 821C6DD4h case    7:*/		return 0x821C6DD8;
		  /* 821C6DD8h */ case    8:  		/* mr R3, R29 */
		/* 821C6DD8h case    8:*/		regs.R3 = regs.R29;
		/* 821C6DD8h case    8:*/		return 0x821C6DDC;
		  /* 821C6DDCh */ case    9:  		/* bl -26604 */
		/* 821C6DDCh case    9:*/		regs.LR = 0x821C6DE0; return 0x821C05F0;
		/* 821C6DDCh case    9:*/		return 0x821C6DE0;
	}
	return 0x821C6DE0;
} // Block from 821C6DB8h-821C6DE0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C6DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6DE0);
		  /* 821C6DE0h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821C6DE0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821C6DE0h case    0:*/		return 0x821C6DE4;
		  /* 821C6DE4h */ case    1:  		/* b -92 */
		/* 821C6DE4h case    1:*/		return 0x821C6D88;
		/* 821C6DE4h case    1:*/		return 0x821C6DE8;
	}
	return 0x821C6DE8;
} // Block from 821C6DE0h-821C6DE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6DE8);
		  /* 821C6DE8h */ case    0:  		/* addi R1, R1, 128 */
		/* 821C6DE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C6DE8h case    0:*/		return 0x821C6DEC;
		  /* 821C6DECh */ case    1:  		/* b -1268548 */
		/* 821C6DECh case    1:*/		return 0x820912A8;
		/* 821C6DECh case    1:*/		return 0x821C6DF0;
	}
	return 0x821C6DF0;
} // Block from 821C6DE8h-821C6DF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6DF0);
		  /* 821C6DF0h */ case    0:  		/* mfspr R12, LR */
		/* 821C6DF0h case    0:*/		regs.R12 = regs.LR;
		/* 821C6DF0h case    0:*/		return 0x821C6DF4;
		  /* 821C6DF4h */ case    1:  		/* bl -1268656 */
		/* 821C6DF4h case    1:*/		regs.LR = 0x821C6DF8; return 0x82091244;
		/* 821C6DF4h case    1:*/		return 0x821C6DF8;
		  /* 821C6DF8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821C6DF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821C6DF8h case    2:*/		return 0x821C6DFC;
		  /* 821C6DFCh */ case    3:  		/* mr R27, R3 */
		/* 821C6DFCh case    3:*/		regs.R27 = regs.R3;
		/* 821C6DFCh case    3:*/		return 0x821C6E00;
		  /* 821C6E00h */ case    4:  		/* mr R30, R4 */
		/* 821C6E00h case    4:*/		regs.R30 = regs.R4;
		/* 821C6E00h case    4:*/		return 0x821C6E04;
		  /* 821C6E04h */ case    5:  		/* bl -368332 */
		/* 821C6E04h case    5:*/		regs.LR = 0x821C6E08; return 0x8216CF38;
		/* 821C6E04h case    5:*/		return 0x821C6E08;
		  /* 821C6E08h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C6E08h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6E08h case    6:*/		return 0x821C6E0C;
		  /* 821C6E0Ch */ case    7:  		/* li R8, 68 */
		/* 821C6E0Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x44);
		/* 821C6E0Ch case    7:*/		return 0x821C6E10;
		  /* 821C6E10h */ case    8:  		/* li R7, 1 */
		/* 821C6E10h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C6E10h case    8:*/		return 0x821C6E14;
		  /* 821C6E14h */ case    9:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 821C6E14h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 821C6E14h case    9:*/		return 0x821C6E18;
		  /* 821C6E18h */ case   10:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C6E18h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C6E18h case   10:*/		return 0x821C6E1C;
		  /* 821C6E1Ch */ case   11:  		/* mr R31, R3 */
		/* 821C6E1Ch case   11:*/		regs.R31 = regs.R3;
		/* 821C6E1Ch case   11:*/		return 0x821C6E20;
		  /* 821C6E20h */ case   12:  		/* addi R10, R11, 4 */
		/* 821C6E20h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C6E20h case   12:*/		return 0x821C6E24;
		  /* 821C6E24h */ case   13:  		/* li R24, 0 */
		/* 821C6E24h case   13:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821C6E24h case   13:*/		return 0x821C6E28;
		  /* 821C6E28h */ case   14:  		/* lwz R6, <#[R9]> */
		/* 821C6E28h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 821C6E28h case   14:*/		return 0x821C6E2C;
		  /* 821C6E2Ch */ case   15:  		/* stw R6, <#[R11]> */
		/* 821C6E2Ch case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6E2Ch case   15:*/		return 0x821C6E30;
		  /* 821C6E30h */ case   16:  		/* lwz R6, <#[R9]> */
		/* 821C6E30h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 821C6E30h case   16:*/		return 0x821C6E34;
		  /* 821C6E34h */ case   17:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821C6E34h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821C6E34h case   17:*/		return 0x821C6E38;
		  /* 821C6E38h */ case   18:  		/* stw R11, <#[R6]> */
		/* 821C6E38h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821C6E38h case   18:*/		return 0x821C6E3C;
		  /* 821C6E3Ch */ case   19:  		/* stw R9, <#[R11 + 4]> */
		/* 821C6E3Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C6E3Ch case   19:*/		return 0x821C6E40;
		  /* 821C6E40h */ case   20:  		/* stw R10, <#[R9]> */
		/* 821C6E40h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821C6E40h case   20:*/		return 0x821C6E44;
		  /* 821C6E44h */ case   21:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C6E44h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6E44h case   21:*/		return 0x821C6E48;
		  /* 821C6E48h */ case   22:  		/* lwz R10, <#[R27 + 616]> */
		/* 821C6E48h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000268) );
		/* 821C6E48h case   22:*/		return 0x821C6E4C;
		  /* 821C6E4Ch */ case   23:  		/* subf R10, R10, R30 */
		/* 821C6E4Ch case   23:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821C6E4Ch case   23:*/		return 0x821C6E50;
		  /* 821C6E50h */ case   24:  		/* lwz R11, <#[R11 + 84]> */
		/* 821C6E50h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000054) );
		/* 821C6E50h case   24:*/		return 0x821C6E54;
		  /* 821C6E54h */ case   25:  		/* divw R10, R10, R8 */
		/* 821C6E54h case   25:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821C6E54h case   25:*/		return 0x821C6E58;
		  /* 821C6E58h */ case   26:  		/* stw R11, <#[R3 + 84]> */
		/* 821C6E58h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 821C6E58h case   26:*/		return 0x821C6E5C;
		  /* 821C6E5Ch */ case   27:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821C6E5Ch case   27:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821C6E5Ch case   27:*/		return 0x821C6E60;
		  /* 821C6E60h */ case   28:  		/* rlwinm R23, R10, 0, 27, 31 */
		/* 821C6E60h case   28:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R23,regs.R10);
		/* 821C6E60h case   28:*/		return 0x821C6E64;
		  /* 821C6E64h */ case   29:  		/* addi R11, R11, 21 */
		/* 821C6E64h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821C6E64h case   29:*/		return 0x821C6E68;
		  /* 821C6E68h */ case   30:  		/* slw R10, R7, R23 */
		/* 821C6E68h case   30:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R7,regs.R23);
		/* 821C6E68h case   30:*/		return 0x821C6E6C;
		  /* 821C6E6Ch */ case   31:  		/* rlwinm R29, R11, 2, 0, 29 */
		/* 821C6E6Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R29,regs.R11);
		/* 821C6E6Ch case   31:*/		return 0x821C6E70;
		  /* 821C6E70h */ case   32:  		/* lwzx R11, <#[R29 + R3]> */
		/* 821C6E70h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R3 + 0x00000000) );
		/* 821C6E70h case   32:*/		return 0x821C6E74;
		  /* 821C6E74h */ case   33:  		/* andc R11, R11, R10 */
		/* 821C6E74h case   33:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C6E74h case   33:*/		return 0x821C6E78;
		  /* 821C6E78h */ case   34:  		/* stwx R11, <#[R29 + R3]> */
		/* 821C6E78h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + regs.R3 + 0x00000000) );
		/* 821C6E78h case   34:*/		return 0x821C6E7C;
		  /* 821C6E7Ch */ case   35:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C6E7Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6E7Ch case   35:*/		return 0x821C6E80;
		  /* 821C6E80h */ case   36:  		/* addi R25, R11, 8 */
		/* 821C6E80h case   36:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x8);
		/* 821C6E80h case   36:*/		return 0x821C6E84;
		  /* 821C6E84h */ case   37:  		/* lwz R26, <#[R11 + 8]> */
		/* 821C6E84h case   37:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000008) );
		/* 821C6E84h case   37:*/		return 0x821C6E88;
		  /* 821C6E88h */ case   38:  		/* cmplwi CR6, R26, 0 */
		/* 821C6E88h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C6E88h case   38:*/		return 0x821C6E8C;
		  /* 821C6E8Ch */ case   39:  		/* bc 12, CR6_EQ, 260 */
		/* 821C6E8Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x821C6F90;  }
		/* 821C6E8Ch case   39:*/		return 0x821C6E90;
		  /* 821C6E90h */ case   40:  		/* lwz R28, <#[R26 + 4]> */
		/* 821C6E90h case   40:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000004) );
		/* 821C6E90h case   40:*/		return 0x821C6E94;
		  /* 821C6E94h */ case   41:  		/* lwzx R11, <#[R29 + R28]> */
		/* 821C6E94h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R28 + 0x00000000) );
		/* 821C6E94h case   41:*/		return 0x821C6E98;
		  /* 821C6E98h */ case   42:  		/* srw R11, R11, R23 */
		/* 821C6E98h case   42:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821C6E98h case   42:*/		return 0x821C6E9C;
		  /* 821C6E9Ch */ case   43:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C6E9Ch case   43:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C6E9Ch case   43:*/		return 0x821C6EA0;
		  /* 821C6EA0h */ case   44:  		/* bc 4, CR0_EQ, 216 */
		/* 821C6EA0h case   44:*/		if ( !regs.CR[0].eq ) { return 0x821C6F78;  }
		/* 821C6EA0h case   44:*/		return 0x821C6EA4;
		  /* 821C6EA4h */ case   45:  		/* lwz R11, <#[R28 + 68]> */
		/* 821C6EA4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000044) );
		/* 821C6EA4h case   45:*/		return 0x821C6EA8;
		  /* 821C6EA8h */ case   46:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821C6EA8h case   46:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821C6EA8h case   46:*/		return 0x821C6EAC;
		  /* 821C6EACh */ case   47:  		/* cmplw CR6, R11, R24 */
		/* 821C6EACh case   47:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821C6EACh case   47:*/		return 0x821C6EB0;
		  /* 821C6EB0h */ case   48:  		/* bc 4, CR6_GT, 8 */
		/* 821C6EB0h case   48:*/		if ( !regs.CR[6].gt ) { return 0x821C6EB8;  }
		/* 821C6EB0h case   48:*/		return 0x821C6EB4;
		  /* 821C6EB4h */ case   49:  		/* mr R24, R11 */
		/* 821C6EB4h case   49:*/		regs.R24 = regs.R11;
		/* 821C6EB4h case   49:*/		return 0x821C6EB8;
	}
	return 0x821C6EB8;
} // Block from 821C6DF0h-821C6EB8h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821C6EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6EB8);
		  /* 821C6EB8h */ case    0:  		/* mr R5, R31 */
		/* 821C6EB8h case    0:*/		regs.R5 = regs.R31;
		/* 821C6EB8h case    0:*/		return 0x821C6EBC;
		  /* 821C6EBCh */ case    1:  		/* mr R4, R26 */
		/* 821C6EBCh case    1:*/		regs.R4 = regs.R26;
		/* 821C6EBCh case    1:*/		return 0x821C6EC0;
		  /* 821C6EC0h */ case    2:  		/* mr R3, R28 */
		/* 821C6EC0h case    2:*/		regs.R3 = regs.R28;
		/* 821C6EC0h case    2:*/		return 0x821C6EC4;
		  /* 821C6EC4h */ case    3:  		/* bl 428644 */
		/* 821C6EC4h case    3:*/		regs.LR = 0x821C6EC8; return 0x8222F928;
		/* 821C6EC4h case    3:*/		return 0x821C6EC8;
		  /* 821C6EC8h */ case    4:  		/* lwz R11, <#[R28 + 36]> */
		/* 821C6EC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821C6EC8h case    4:*/		return 0x821C6ECC;
		  /* 821C6ECCh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C6ECCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C6ECCh case    5:*/		return 0x821C6ED0;
		  /* 821C6ED0h */ case    6:  		/* bc 4, CR0_EQ, 168 */
		/* 821C6ED0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C6F78;  }
		/* 821C6ED0h case    6:*/		return 0x821C6ED4;
		  /* 821C6ED4h */ case    7:  		/* mr R28, R11 */
		/* 821C6ED4h case    7:*/		regs.R28 = regs.R11;
		/* 821C6ED4h case    7:*/		return 0x821C6ED8;
		  /* 821C6ED8h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821C6ED8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C6ED8h case    8:*/		return 0x821C6EDC;
		  /* 821C6EDCh */ case    9:  		/* bc 12, CR0_EQ, 156 */
		/* 821C6EDCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821C6F78;  }
		/* 821C6EDCh case    9:*/		return 0x821C6EE0;
		  /* 821C6EE0h */ case   10:  		/* lwz R11, <#[R28 + 8]> */
		/* 821C6EE0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C6EE0h case   10:*/		return 0x821C6EE4;
		  /* 821C6EE4h */ case   11:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C6EE4h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C6EE4h case   11:*/		return 0x821C6EE8;
		  /* 821C6EE8h */ case   12:  		/* cmplwi CR6, R11, 86 */
		/* 821C6EE8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821C6EE8h case   12:*/		return 0x821C6EEC;
		  /* 821C6EECh */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 821C6EECh case   13:*/		if ( regs.CR[6].eq ) { return 0x821C6F1C;  }
		/* 821C6EECh case   13:*/		return 0x821C6EF0;
		  /* 821C6EF0h */ case   14:  		/* cmplwi CR6, R11, 87 */
		/* 821C6EF0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821C6EF0h case   14:*/		return 0x821C6EF4;
		  /* 821C6EF4h */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 821C6EF4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821C6F1C;  }
		/* 821C6EF4h case   15:*/		return 0x821C6EF8;
		  /* 821C6EF8h */ case   16:  		/* cmplwi CR6, R11, 89 */
		/* 821C6EF8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821C6EF8h case   16:*/		return 0x821C6EFC;
		  /* 821C6EFCh */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 821C6EFCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821C6F1C;  }
		/* 821C6EFCh case   17:*/		return 0x821C6F00;
		  /* 821C6F00h */ case   18:  		/* cmplwi CR6, R11, 90 */
		/* 821C6F00h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821C6F00h case   18:*/		return 0x821C6F04;
		  /* 821C6F04h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821C6F04h case   19:*/		if ( regs.CR[6].eq ) { return 0x821C6F1C;  }
		/* 821C6F04h case   19:*/		return 0x821C6F08;
		  /* 821C6F08h */ case   20:  		/* cmplwi CR6, R11, 84 */
		/* 821C6F08h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821C6F08h case   20:*/		return 0x821C6F0C;
		  /* 821C6F0Ch */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821C6F0Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821C6F1C;  }
		/* 821C6F0Ch case   21:*/		return 0x821C6F10;
		  /* 821C6F10h */ case   22:  		/* cmplwi CR6, R11, 85 */
		/* 821C6F10h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821C6F10h case   22:*/		return 0x821C6F14;
		  /* 821C6F14h */ case   23:  		/* li R11, 0 */
		/* 821C6F14h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C6F14h case   23:*/		return 0x821C6F18;
		  /* 821C6F18h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821C6F18h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821C6F20;  }
		/* 821C6F18h case   24:*/		return 0x821C6F1C;
	}
	return 0x821C6F1C;
} // Block from 821C6EB8h-821C6F1Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F1C);
		  /* 821C6F1Ch */ case    0:  		/* li R11, 1 */
		/* 821C6F1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C6F1Ch case    0:*/		return 0x821C6F20;
	}
	return 0x821C6F20;
} // Block from 821C6F1Ch-821C6F20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F20);
		  /* 821C6F20h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C6F20h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C6F20h case    0:*/		return 0x821C6F24;
		  /* 821C6F24h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 821C6F24h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C6F5C;  }
		/* 821C6F24h case    1:*/		return 0x821C6F28;
		  /* 821C6F28h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821C6F28h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821C6F28h case    2:*/		return 0x821C6F2C;
		  /* 821C6F2Ch */ case    3:  		/* mr R3, R27 */
		/* 821C6F2Ch case    3:*/		regs.R3 = regs.R27;
		/* 821C6F2Ch case    3:*/		return 0x821C6F30;
		  /* 821C6F30h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C6F30h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C6F30h case    4:*/		return 0x821C6F34;
		  /* 821C6F34h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C6F34h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C6F34h case    5:*/		return 0x821C6F38;
		  /* 821C6F38h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C6F38h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C6F38h case    6:*/		return 0x821C6F3C;
		  /* 821C6F3Ch */ case    7:  		/* bl -404236 */
		/* 821C6F3Ch case    7:*/		regs.LR = 0x821C6F40; return 0x82164430;
		/* 821C6F3Ch case    7:*/		return 0x821C6F40;
		  /* 821C6F40h */ case    8:  		/* addi R11, R28, -16 */
		/* 821C6F40h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFF0);
		/* 821C6F40h case    8:*/		return 0x821C6F44;
		  /* 821C6F44h */ case    9:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C6F44h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6F44h case    9:*/		return 0x821C6F48;
		  /* 821C6F48h */ case   10:  		/* add R11, R3, R11 */
		/* 821C6F48h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C6F48h case   10:*/		return 0x821C6F4C;
		  /* 821C6F4Ch */ case   11:  		/* lwz R9, <#[R11]> */
		/* 821C6F4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6F4Ch case   11:*/		return 0x821C6F50;
		  /* 821C6F50h */ case   12:  		/* cmplw CR6, R9, R10 */
		/* 821C6F50h case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821C6F50h case   12:*/		return 0x821C6F54;
		  /* 821C6F54h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 821C6F54h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C6F5C;  }
		/* 821C6F54h case   13:*/		return 0x821C6F58;
		  /* 821C6F58h */ case   14:  		/* stw R31, <#[R11]> */
		/* 821C6F58h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821C6F58h case   14:*/		return 0x821C6F5C;
	}
	return 0x821C6F5C;
} // Block from 821C6F20h-821C6F5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F5C);
		  /* 821C6F5Ch */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821C6F5Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821C6F5Ch case    0:*/		return 0x821C6F60;
		  /* 821C6F60h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C6F60h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C6F60h case    1:*/		return 0x821C6F64;
		  /* 821C6F64h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C6F64h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C6F64h case    2:*/		return 0x821C6F68;
		  /* 821C6F68h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C6F68h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C6F78;  }
		/* 821C6F68h case    3:*/		return 0x821C6F6C;
		  /* 821C6F6Ch */ case    4:  		/* mr R28, R11 */
		/* 821C6F6Ch case    4:*/		regs.R28 = regs.R11;
		/* 821C6F6Ch case    4:*/		return 0x821C6F70;
		  /* 821C6F70h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C6F70h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6F70h case    5:*/		return 0x821C6F74;
		  /* 821C6F74h */ case    6:  		/* bc 4, CR6_EQ, -148 */
		/* 821C6F74h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C6EE0;  }
		/* 821C6F74h case    6:*/		return 0x821C6F78;
	}
	return 0x821C6F78;
} // Block from 821C6F5Ch-821C6F78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F78);
		  /* 821C6F78h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821C6F78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821C6F78h case    0:*/		return 0x821C6F7C;
		  /* 821C6F7Ch */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 821C6F7Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821C6F7Ch case    1:*/		return 0x821C6F80;
		  /* 821C6F80h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821C6F80h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C6F88;  }
		/* 821C6F80h case    2:*/		return 0x821C6F84;
		  /* 821C6F84h */ case    3:  		/* addi R25, R26, 12 */
		/* 821C6F84h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R26,0xC);
		/* 821C6F84h case    3:*/		return 0x821C6F88;
	}
	return 0x821C6F88;
} // Block from 821C6F78h-821C6F88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F88);
		  /* 821C6F88h */ case    0:  		/* lwz R26, <#[R25]> */
		/* 821C6F88h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 821C6F88h case    0:*/		return 0x821C6F8C;
		  /* 821C6F8Ch */ case    1:  		/* b -260 */
		/* 821C6F8Ch case    1:*/		return 0x821C6E88;
		/* 821C6F8Ch case    1:*/		return 0x821C6F90;
	}
	return 0x821C6F90;
} // Block from 821C6F88h-821C6F90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C6F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6F90);
		  /* 821C6F90h */ case    0:  		/* mr R5, R27 */
		/* 821C6F90h case    0:*/		regs.R5 = regs.R27;
		/* 821C6F90h case    0:*/		return 0x821C6F94;
		  /* 821C6F94h */ case    1:  		/* lwz R4, <#[R30 + 4]> */
		/* 821C6F94h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 821C6F94h case    1:*/		return 0x821C6F98;
		  /* 821C6F98h */ case    2:  		/* mr R3, R31 */
		/* 821C6F98h case    2:*/		regs.R3 = regs.R31;
		/* 821C6F98h case    2:*/		return 0x821C6F9C;
		  /* 821C6F9Ch */ case    3:  		/* bl 428868 */
		/* 821C6F9Ch case    3:*/		regs.LR = 0x821C6FA0; return 0x8222FAE0;
		/* 821C6F9Ch case    3:*/		return 0x821C6FA0;
		  /* 821C6FA0h */ case    4:  		/* lwz R11, <#[R31 + 68]> */
		/* 821C6FA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821C6FA0h case    4:*/		return 0x821C6FA4;
		  /* 821C6FA4h */ case    5:  		/* lwz R10, <#[R31 + 76]> */
		/* 821C6FA4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C6FA4h case    5:*/		return 0x821C6FA8;
		  /* 821C6FA8h */ case    6:  		/* rlwimi R24, R11, 0, 0, 3 */
		/* 821C6FA8h case    6:*/		cpu::op::rlwimi<0,0,0,3>(regs,&regs.R24,regs.R11);
		/* 821C6FA8h case    6:*/		return 0x821C6FAC;
		  /* 821C6FACh */ case    7:  		/* stw R24, <#[R31 + 68]> */
		/* 821C6FACh case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000044) );
		/* 821C6FACh case    7:*/		return 0x821C6FB0;
		  /* 821C6FB0h */ case    8:  		/* lwz R11, <#[R30 + 60]> */
		/* 821C6FB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 821C6FB0h case    8:*/		return 0x821C6FB4;
		  /* 821C6FB4h */ case    9:  		/* rlwimi R10, R11, 20, 13, 31 */
		/* 821C6FB4h case    9:*/		cpu::op::rlwimi<0,20,13,31>(regs,&regs.R10,regs.R11);
		/* 821C6FB4h case    9:*/		return 0x821C6FB8;
		  /* 821C6FB8h */ case   10:  		/* stw R10, <#[R31 + 76]> */
		/* 821C6FB8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C6FB8h case   10:*/		return 0x821C6FBC;
		  /* 821C6FBCh */ case   11:  		/* stw R31, <#[R30]> */
		/* 821C6FBCh case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821C6FBCh case   11:*/		return 0x821C6FC0;
		  /* 821C6FC0h */ case   12:  		/* addi R1, R1, 160 */
		/* 821C6FC0h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821C6FC0h case   12:*/		return 0x821C6FC4;
		  /* 821C6FC4h */ case   13:  		/* b -1269040 */
		/* 821C6FC4h case   13:*/		return 0x82091294;
		/* 821C6FC4h case   13:*/		return 0x821C6FC8;
	}
	return 0x821C6FC8;
} // Block from 821C6F90h-821C6FC8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C6FC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6FC8);
		  /* 821C6FC8h */ case    0:  		/* mfspr R12, LR */
		/* 821C6FC8h case    0:*/		regs.R12 = regs.LR;
		/* 821C6FC8h case    0:*/		return 0x821C6FCC;
		  /* 821C6FCCh */ case    1:  		/* bl -1269120 */
		/* 821C6FCCh case    1:*/		regs.LR = 0x821C6FD0; return 0x8209124C;
		/* 821C6FCCh case    1:*/		return 0x821C6FD0;
		  /* 821C6FD0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C6FD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C6FD0h case    2:*/		return 0x821C6FD4;
		  /* 821C6FD4h */ case    3:  		/* lwz R11, <#[R4 + 12]> */
		/* 821C6FD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C6FD4h case    3:*/		return 0x821C6FD8;
		  /* 821C6FD8h */ case    4:  		/* mr R28, R3 */
		/* 821C6FD8h case    4:*/		regs.R28 = regs.R3;
		/* 821C6FD8h case    4:*/		return 0x821C6FDC;
		  /* 821C6FDCh */ case    5:  		/* mr R31, R4 */
		/* 821C6FDCh case    5:*/		regs.R31 = regs.R4;
		/* 821C6FDCh case    5:*/		return 0x821C6FE0;
		  /* 821C6FE0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C6FE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C6FE0h case    6:*/		return 0x821C6FE4;
		  /* 821C6FE4h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821C6FE4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C6FF0;  }
		/* 821C6FE4h case    7:*/		return 0x821C6FE8;
		  /* 821C6FE8h */ case    8:  		/* li R4, 4800 */
		/* 821C6FE8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C6FE8h case    8:*/		return 0x821C6FEC;
		  /* 821C6FECh */ case    9:  		/* bl -479620 */
		/* 821C6FECh case    9:*/		regs.LR = 0x821C6FF0; return 0x82151E68;
		/* 821C6FECh case    9:*/		return 0x821C6FF0;
	}
	return 0x821C6FF0;
} // Block from 821C6FC8h-821C6FF0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C6FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C6FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C6FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C6FF0);
		  /* 821C6FF0h */ case    0:  		/* lwz R9, <#[R28 + 616]> */
		/* 821C6FF0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000268) );
		/* 821C6FF0h case    0:*/		return 0x821C6FF4;
		  /* 821C6FF4h */ case    1:  		/* li R8, 68 */
		/* 821C6FF4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x44);
		/* 821C6FF4h case    1:*/		return 0x821C6FF8;
		  /* 821C6FF8h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C6FF8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C6FF8h case    2:*/		return 0x821C6FFC;
		  /* 821C6FFCh */ case    3:  		/* subf R11, R9, R31 */
		/* 821C6FFCh case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R31);
		/* 821C6FFCh case    3:*/		return 0x821C7000;
		  /* 821C7000h */ case    4:  		/* divw R11, R11, R8 */
		/* 821C7000h case    4:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821C7000h case    4:*/		return 0x821C7004;
		  /* 821C7004h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C7004h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C7004h case    5:*/		return 0x821C7008;
		  /* 821C7008h */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 821C7008h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C7040;  }
		/* 821C7008h case    6:*/		return 0x821C700C;
		  /* 821C700Ch */ case    7:  		/* rlwinm R9, R11, 27, 5, 31 */
		/* 821C700Ch case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R11);
		/* 821C700Ch case    7:*/		return 0x821C7010;
		  /* 821C7010h */ case    8:  		/* lwz R30, <#[R10]> */
		/* 821C7010h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 821C7010h case    8:*/		return 0x821C7014;
		  /* 821C7014h */ case    9:  		/* rlwinm R25, R11, 0, 27, 31 */
		/* 821C7014h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R25,regs.R11);
		/* 821C7014h case    9:*/		return 0x821C7018;
		  /* 821C7018h */ case   10:  		/* addi R9, R9, 21 */
		/* 821C7018h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x15);
		/* 821C7018h case   10:*/		return 0x821C701C;
		  /* 821C701Ch */ case   11:  		/* rlwinm R27, R9, 2, 0, 29 */
		/* 821C701Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R9);
		/* 821C701Ch case   11:*/		return 0x821C7020;
		  /* 821C7020h */ case   12:  		/* lwzx R9, <#[R27 + R30]> */
		/* 821C7020h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + regs.R30 + 0x00000000) );
		/* 821C7020h case   12:*/		return 0x821C7024;
		  /* 821C7024h */ case   13:  		/* srw R9, R9, R25 */
		/* 821C7024h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821C7024h case   13:*/		return 0x821C7028;
		  /* 821C7028h */ case   14:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821C7028h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821C7028h case   14:*/		return 0x821C702C;
		  /* 821C702Ch */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 821C702Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821C7038;  }
		/* 821C702Ch case   15:*/		return 0x821C7030;
		  /* 821C7030h */ case   16:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C7030h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C7030h case   16:*/		return 0x821C7034;
		  /* 821C7034h */ case   17:  		/* b -48 */
		/* 821C7034h case   17:*/		return 0x821C7004;
		/* 821C7034h case   17:*/		return 0x821C7038;
	}
	return 0x821C7038;
} // Block from 821C6FF0h-821C7038h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821C7038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7038);
		  /* 821C7038h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821C7038h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C7038h case    0:*/		return 0x821C703C;
		  /* 821C703Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821C703Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C704C;  }
		/* 821C703Ch case    1:*/		return 0x821C7040;
	}
	return 0x821C7040;
} // Block from 821C7038h-821C7040h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C7040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7040);
		  /* 821C7040h */ case    0:  		/* li R4, 4800 */
		/* 821C7040h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C7040h case    0:*/		return 0x821C7044;
		  /* 821C7044h */ case    1:  		/* mr R3, R28 */
		/* 821C7044h case    1:*/		regs.R3 = regs.R28;
		/* 821C7044h case    1:*/		return 0x821C7048;
		  /* 821C7048h */ case    2:  		/* bl -479712 */
		/* 821C7048h case    2:*/		regs.LR = 0x821C704C; return 0x82151E68;
		/* 821C7048h case    2:*/		return 0x821C704C;
	}
	return 0x821C704C;
} // Block from 821C7040h-821C704Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C704Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C704C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C704C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C704C);
		  /* 821C704Ch */ case    0:  		/* lwz R11, <#[R31 + 60]> */
		/* 821C704Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000003C) );
		/* 821C704Ch case    0:*/		return 0x821C7050;
		  /* 821C7050h */ case    1:  		/* lwz R29, <#[R31 + 4]> */
		/* 821C7050h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821C7050h case    1:*/		return 0x821C7054;
		  /* 821C7054h */ case    2:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821C7054h case    2:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821C7054h case    2:*/		return 0x821C7058;
		  /* 821C7058h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821C7058h case    3:*/		if ( regs.CR[0].eq ) { return 0x821C7060;  }
		/* 821C7058h case    3:*/		return 0x821C705C;
		  /* 821C705Ch */ case    4:  		/* lwz R29, <#[R29 + 52]> */
		/* 821C705Ch case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000034) );
		/* 821C705Ch case    4:*/		return 0x821C7060;
	}
	return 0x821C7060;
} // Block from 821C704Ch-821C7060h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C7060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7060);
		  /* 821C7060h */ case    0:  		/* li R8, 0 */
		/* 821C7060h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C7060h case    0:*/		return 0x821C7064;
		  /* 821C7064h */ case    1:  		/* lwz R26, <#[R28 + 92]> */
		/* 821C7064h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R28 + 0x0000005C) );
		/* 821C7064h case    1:*/		return 0x821C7068;
		  /* 821C7068h */ case    2:  		/* li R6, 1 */
		/* 821C7068h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C7068h case    2:*/		return 0x821C706C;
		  /* 821C706Ch */ case    3:  		/* lwz R7, <#[R31 + 8]> */
		/* 821C706Ch case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 821C706Ch case    3:*/		return 0x821C7070;
		  /* 821C7070h */ case    4:  		/* mr R5, R30 */
		/* 821C7070h case    4:*/		regs.R5 = regs.R30;
		/* 821C7070h case    4:*/		return 0x821C7074;
		  /* 821C7074h */ case    5:  		/* mr R4, R29 */
		/* 821C7074h case    5:*/		regs.R4 = regs.R29;
		/* 821C7074h case    5:*/		return 0x821C7078;
		  /* 821C7078h */ case    6:  		/* mr R3, R28 */
		/* 821C7078h case    6:*/		regs.R3 = regs.R28;
		/* 821C7078h case    6:*/		return 0x821C707C;
		  /* 821C707Ch */ case    7:  		/* bl 140172 */
		/* 821C707Ch case    7:*/		regs.LR = 0x821C7080; return 0x821E9408;
		/* 821C707Ch case    7:*/		return 0x821C7080;
		  /* 821C7080h */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C7080h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C7080h case    8:*/		return 0x821C7084;
		  /* 821C7084h */ case    9:  		/* stw R3, <#[R31 + 20]> */
		/* 821C7084h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 821C7084h case    9:*/		return 0x821C7088;
		  /* 821C7088h */ case   10:  		/* cmplw CR6, R3, R11 */
		/* 821C7088h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821C7088h case   10:*/		return 0x821C708C;
		  /* 821C708Ch */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 821C708Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C70B0;  }
		/* 821C708Ch case   11:*/		return 0x821C7090;
		  /* 821C7090h */ case   12:  		/* li R8, 1 */
		/* 821C7090h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C7090h case   12:*/		return 0x821C7094;
		  /* 821C7094h */ case   13:  		/* lwz R7, <#[R31 + 8]> */
		/* 821C7094h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000008) );
		/* 821C7094h case   13:*/		return 0x821C7098;
		  /* 821C7098h */ case   14:  		/* li R6, 1 */
		/* 821C7098h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C7098h case   14:*/		return 0x821C709C;
		  /* 821C709Ch */ case   15:  		/* mr R5, R30 */
		/* 821C709Ch case   15:*/		regs.R5 = regs.R30;
		/* 821C709Ch case   15:*/		return 0x821C70A0;
		  /* 821C70A0h */ case   16:  		/* mr R4, R29 */
		/* 821C70A0h case   16:*/		regs.R4 = regs.R29;
		/* 821C70A0h case   16:*/		return 0x821C70A4;
		  /* 821C70A4h */ case   17:  		/* mr R3, R28 */
		/* 821C70A4h case   17:*/		regs.R3 = regs.R28;
		/* 821C70A4h case   17:*/		return 0x821C70A8;
		  /* 821C70A8h */ case   18:  		/* bl 140128 */
		/* 821C70A8h case   18:*/		regs.LR = 0x821C70AC; return 0x821E9408;
		/* 821C70A8h case   18:*/		return 0x821C70AC;
		  /* 821C70ACh */ case   19:  		/* stw R3, <#[R31 + 20]> */
		/* 821C70ACh case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 821C70ACh case   19:*/		return 0x821C70B0;
	}
	return 0x821C70B0;
} // Block from 821C7060h-821C70B0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C70B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C70B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C70B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C70B0);
		  /* 821C70B0h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 821C70B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821C70B0h case    0:*/		return 0x821C70B4;
		  /* 821C70B4h */ case    1:  		/* lwz R10, <#[R11 + 48]> */
		/* 821C70B4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821C70B4h case    1:*/		return 0x821C70B8;
		  /* 821C70B8h */ case    2:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821C70B8h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821C70B8h case    2:*/		return 0x821C70BC;
		  /* 821C70BCh */ case    3:  		/* cmplw CR6, R10, R26 */
		/* 821C70BCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R26);
		/* 821C70BCh case    3:*/		return 0x821C70C0;
		  /* 821C70C0h */ case    4:  		/* bc 12, CR6_LT, 40 */
		/* 821C70C0h case    4:*/		if ( regs.CR[6].lt ) { return 0x821C70E8;  }
		/* 821C70C0h case    4:*/		return 0x821C70C4;
		  /* 821C70C4h */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 821C70C4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821C70C4h case    5:*/		return 0x821C70C8;
		  /* 821C70C8h */ case    6:  		/* li R9, 1 */
		/* 821C70C8h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821C70C8h case    6:*/		return 0x821C70CC;
		  /* 821C70CCh */ case    7:  		/* slw R9, R9, R25 */
		/* 821C70CCh case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821C70CCh case    7:*/		return 0x821C70D0;
		  /* 821C70D0h */ case    8:  		/* lwz R10, <#[R10 + 84]> */
		/* 821C70D0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000054) );
		/* 821C70D0h case    8:*/		return 0x821C70D4;
		  /* 821C70D4h */ case    9:  		/* stw R10, <#[R11 + 84]> */
		/* 821C70D4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 821C70D4h case    9:*/		return 0x821C70D8;
		  /* 821C70D8h */ case   10:  		/* lwz R11, <#[R31 + 20]> */
		/* 821C70D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821C70D8h case   10:*/		return 0x821C70DC;
		  /* 821C70DCh */ case   11:  		/* lwzx R10, <#[R11 + R27]> */
		/* 821C70DCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821C70DCh case   11:*/		return 0x821C70E0;
		  /* 821C70E0h */ case   12:  		/* andc R10, R10, R9 */
		/* 821C70E0h case   12:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821C70E0h case   12:*/		return 0x821C70E4;
		  /* 821C70E4h */ case   13:  		/* stwx R10, <#[R11 + R27]> */
		/* 821C70E4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821C70E4h case   13:*/		return 0x821C70E8;
	}
	return 0x821C70E8;
} // Block from 821C70B0h-821C70E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C70E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C70E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C70E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C70E8);
		  /* 821C70E8h */ case    0:  		/* addi R1, R1, 144 */
		/* 821C70E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C70E8h case    0:*/		return 0x821C70EC;
		  /* 821C70ECh */ case    1:  		/* b -1269328 */
		/* 821C70ECh case    1:*/		return 0x8209129C;
		/* 821C70ECh case    1:*/		return 0x821C70F0;
		  /* 821C70F0h */ case    2:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C70F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C70F0h case    2:*/		return 0x821C70F4;
		  /* 821C70F4h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C70F4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C70F4h case    3:*/		return 0x821C70F8;
		  /* 821C70F8h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 821C70F8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C7104;  }
		/* 821C70F8h case    4:*/		return 0x821C70FC;
		  /* 821C70FCh */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821C70FCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C70FCh case    5:*/		return 0x821C7100;
		  /* 821C7100h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821C7100h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C710C;  }
		/* 821C7100h case    6:*/		return 0x821C7104;
	}
	return 0x821C7104;
} // Block from 821C70E8h-821C7104h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C7104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7104);
		  /* 821C7104h */ case    0:  		/* li R3, 0 */
		/* 821C7104h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C7104h case    0:*/		return 0x821C7108;
		  /* 821C7108h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7108h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7108h case    1:*/		return 0x821C710C;
	}
	return 0x821C710C;
} // Block from 821C7104h-821C710Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C710Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C710C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C710C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C710C);
		  /* 821C710Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C710Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C710Ch case    0:*/		return 0x821C7110;
		  /* 821C7110h */ case    1:  		/* cmplwi CR6, R10, 1 */
		/* 821C7110h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821C7110h case    1:*/		return 0x821C7114;
		  /* 821C7114h */ case    2:  		/* bc 12, CR6_GT, -16 */
		/* 821C7114h case    2:*/		if ( regs.CR[6].gt ) { return 0x821C7104;  }
		/* 821C7114h case    2:*/		return 0x821C7118;
		  /* 821C7118h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7118h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7118h case    3:*/		return 0x821C711C;
		  /* 821C711Ch */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C711Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C711Ch case    4:*/		return 0x821C7120;
		  /* 821C7120h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7120h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7120h case    5:*/		return 0x821C7124;
		  /* 821C7124h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821C7124h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C7134;  }
		/* 821C7124h case    6:*/		return 0x821C7128;
		  /* 821C7128h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C7128h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7128h case    7:*/		return 0x821C712C;
		  /* 821C712Ch */ case    8:  		/* li R3, 0 */
		/* 821C712Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C712Ch case    8:*/		return 0x821C7130;
		  /* 821C7130h */ case    9:  		/* bclr 4, CR6_EQ */
		/* 821C7130h case    9:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 821C7130h case    9:*/		return 0x821C7134;
	}
	return 0x821C7134;
} // Block from 821C710Ch-821C7134h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C7134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7134);
		  /* 821C7134h */ case    0:  		/* li R3, 1 */
		/* 821C7134h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821C7134h case    0:*/		return 0x821C7138;
		  /* 821C7138h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7138h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7138h case    1:*/		return 0x821C713C;
	}
	return 0x821C713C;
} // Block from 821C7134h-821C713Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C713Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C713C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C713C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C713C);
		  /* 821C713Ch */ case    0:  		/* nop */
		/* 821C713Ch case    0:*/		cpu::op::nop();
		/* 821C713Ch case    0:*/		return 0x821C7140;
		  /* 821C7140h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C7140h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C7140h case    1:*/		return 0x821C7144;
		  /* 821C7144h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7144h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7144h case    2:*/		return 0x821C7148;
		  /* 821C7148h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C7148h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C7154;  }
		/* 821C7148h case    3:*/		return 0x821C714C;
		  /* 821C714Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C714Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C714Ch case    4:*/		return 0x821C7150;
		  /* 821C7150h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821C7150h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C715C;  }
		/* 821C7150h case    5:*/		return 0x821C7154;
	}
	return 0x821C7154;
} // Block from 821C713Ch-821C7154h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C7154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7154);
		  /* 821C7154h */ case    0:  		/* li R3, 0 */
		/* 821C7154h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C7154h case    0:*/		return 0x821C7158;
		  /* 821C7158h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7158h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7158h case    1:*/		return 0x821C715C;
	}
	return 0x821C715C;
} // Block from 821C7154h-821C715Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C715Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C715C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C715C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C715C);
		  /* 821C715Ch */ case    0:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 821C715Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 821C715Ch case    0:*/		return 0x821C7160;
		  /* 821C7160h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C7160h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C7160h case    1:*/		return 0x821C7164;
		  /* 821C7164h */ case    2:  		/* lwz R11, <#[R9 + 4]> */
		/* 821C7164h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821C7164h case    2:*/		return 0x821C7168;
		  /* 821C7168h */ case    3:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821C7168h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821C7168h case    3:*/		return 0x821C716C;
		  /* 821C716Ch */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 821C716Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C7198;  }
		/* 821C716Ch case    4:*/		return 0x821C7170;
		  /* 821C7170h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C7170h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7170h case    5:*/		return 0x821C7174;
		  /* 821C7174h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821C7174h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C7198;  }
		/* 821C7174h case    6:*/		return 0x821C7178;
		  /* 821C7178h */ case    7:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 821C7178h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 821C7178h case    7:*/		return 0x821C717C;
		  /* 821C717Ch */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C717Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C717Ch case    8:*/		return 0x821C7180;
		  /* 821C7180h */ case    9:  		/* add R10, R11, R10 */
		/* 821C7180h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821C7180h case    9:*/		return 0x821C7184;
		  /* 821C7184h */ case   10:  		/* lwz R11, <#[R9 + 4]> */
		/* 821C7184h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821C7184h case   10:*/		return 0x821C7188;
		  /* 821C7188h */ case   11:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821C7188h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821C7188h case   11:*/		return 0x821C718C;
		  /* 821C718Ch */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821C718Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821C7198;  }
		/* 821C718Ch case   12:*/		return 0x821C7190;
		  /* 821C7190h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821C7190h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7190h case   13:*/		return 0x821C7194;
		  /* 821C7194h */ case   14:  		/* bc 4, CR6_EQ, -64 */
		/* 821C7194h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821C7154;  }
		/* 821C7194h case   14:*/		return 0x821C7198;
	}
	return 0x821C7198;
} // Block from 821C715Ch-821C7198h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C7198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7198);
		  /* 821C7198h */ case    0:  		/* addi R11, R10, -2 */
		/* 821C7198h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFE);
		/* 821C7198h case    0:*/		return 0x821C719C;
		  /* 821C719Ch */ case    1:  		/* cntlzw R11, R11 */
		/* 821C719Ch case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821C719Ch case    1:*/		return 0x821C71A0;
		  /* 821C71A0h */ case    2:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 821C71A0h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 821C71A0h case    2:*/		return 0x821C71A4;
		  /* 821C71A4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821C71A4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C71A4h case    3:*/		return 0x821C71A8;
	}
	return 0x821C71A8;
} // Block from 821C7198h-821C71A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C71A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C71A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C71A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C71A8);
		  /* 821C71A8h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C71A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C71A8h case    0:*/		return 0x821C71AC;
		  /* 821C71ACh */ case    1:  		/* std R4, <#[R1 + 32]> */
		/* 821C71ACh case    1:*/		cpu::mem::store64( regs, regs.R4, (uint32)(regs.R1 + 0x00000020) );
		/* 821C71ACh case    1:*/		return 0x821C71B0;
		  /* 821C71B0h */ case    2:  		/* std R5, <#[R1 + 40]> */
		/* 821C71B0h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000028) );
		/* 821C71B0h case    2:*/		return 0x821C71B4;
		  /* 821C71B4h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C71B4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C71B4h case    3:*/		return 0x821C71B8;
		  /* 821C71B8h */ case    4:  		/* bc 4, CR0_EQ, 148 */
		/* 821C71B8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C724C;  }
		/* 821C71B8h case    4:*/		return 0x821C71BC;
		  /* 821C71BCh */ case    5:  		/* mr R7, R11 */
		/* 821C71BCh case    5:*/		regs.R7 = regs.R11;
		/* 821C71BCh case    5:*/		return 0x821C71C0;
		  /* 821C71C0h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821C71C0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C71C0h case    6:*/		return 0x821C71C4;
		  /* 821C71C4h */ case    7:  		/* bc 12, CR0_EQ, 136 */
		/* 821C71C4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821C724C;  }
		/* 821C71C4h case    7:*/		return 0x821C71C8;
		  /* 821C71C8h */ case    8:  		/* lwz R8, <#[R7 + 8]> */
		/* 821C71C8h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000008) );
		/* 821C71C8h case    8:*/		return 0x821C71CC;
		  /* 821C71CCh */ case    9:  		/* li R9, 0 */
		/* 821C71CCh case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C71CCh case    9:*/		return 0x821C71D0;
		  /* 821C71D0h */ case   10:  		/* cmplwi CR6, R8, 0 */
		/* 821C71D0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821C71D0h case   10:*/		return 0x821C71D4;
		  /* 821C71D4h */ case   11:  		/* bc 12, CR6_EQ, 92 */
		/* 821C71D4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821C7230;  }
		/* 821C71D4h case   11:*/		return 0x821C71D8;
		  /* 821C71D8h */ case   12:  		/* addi R11, R7, 24 */
		/* 821C71D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x18);
		/* 821C71D8h case   12:*/		return 0x821C71DC;
		  /* 821C71DCh */ case   13:  		/* lwz R10, <#[R11 - 8]> */
		/* 821C71DCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 821C71DCh case   13:*/		return 0x821C71E0;
		  /* 821C71E0h */ case   14:  		/* lwz R6, <#[R1 + 32]> */
		/* 821C71E0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000020) );
		/* 821C71E0h case   14:*/		return 0x821C71E4;
		  /* 821C71E4h */ case   15:  		/* cmplw CR6, R10, R6 */
		/* 821C71E4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821C71E4h case   15:*/		return 0x821C71E8;
		  /* 821C71E8h */ case   16:  		/* bc 4, CR6_EQ, 44 */
		/* 821C71E8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C7214;  }
		/* 821C71E8h case   16:*/		return 0x821C71EC;
		  /* 821C71ECh */ case   17:  		/* lwz R10, <#[R11 - 4]> */
		/* 821C71ECh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C71ECh case   17:*/		return 0x821C71F0;
		  /* 821C71F0h */ case   18:  		/* lwz R6, <#[R1 + 36]> */
		/* 821C71F0h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000024) );
		/* 821C71F0h case   18:*/		return 0x821C71F4;
		  /* 821C71F4h */ case   19:  		/* cmpw CR6, R10, R6 */
		/* 821C71F4h case   19:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R6);
		/* 821C71F4h case   19:*/		return 0x821C71F8;
		  /* 821C71F8h */ case   20:  		/* bc 4, CR6_EQ, 28 */
		/* 821C71F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821C7214;  }
		/* 821C71F8h case   20:*/		return 0x821C71FC;
		  /* 821C71FCh */ case   21:  		/* lwz R10, <#[R11]> */
		/* 821C71FCh case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C71FCh case   21:*/		return 0x821C7200;
		  /* 821C7200h */ case   22:  		/* lwz R6, <#[R1 + 40]> */
		/* 821C7200h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 821C7200h case   22:*/		return 0x821C7204;
		  /* 821C7204h */ case   23:  		/* xor R10, R10, R6 */
		/* 821C7204h case   23:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 821C7204h case   23:*/		return 0x821C7208;
		  /* 821C7208h */ case   24:  		/* rlwinm. R10, R10, 0, 30, 28 */
		/* 821C7208h case   24:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R10,regs.R10);
		/* 821C7208h case   24:*/		return 0x821C720C;
		  /* 821C720Ch */ case   25:  		/* li R10, 1 */
		/* 821C720Ch case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C720Ch case   25:*/		return 0x821C7210;
		  /* 821C7210h */ case   26:  		/* bc 12, CR0_EQ, 8 */
		/* 821C7210h case   26:*/		if ( regs.CR[0].eq ) { return 0x821C7218;  }
		/* 821C7210h case   26:*/		return 0x821C7214;
	}
	return 0x821C7214;
} // Block from 821C71A8h-821C7214h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C7214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7214);
		  /* 821C7214h */ case    0:  		/* li R10, 0 */
		/* 821C7214h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C7214h case    0:*/		return 0x821C7218;
	}
	return 0x821C7218;
} // Block from 821C7214h-821C7218h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7218);
		  /* 821C7218h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C7218h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C7218h case    0:*/		return 0x821C721C;
		  /* 821C721Ch */ case    1:  		/* bc 4, CR0_EQ, 56 */
		/* 821C721Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C7254;  }
		/* 821C721Ch case    1:*/		return 0x821C7220;
		  /* 821C7220h */ case    2:  		/* addi R9, R9, 1 */
		/* 821C7220h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C7220h case    2:*/		return 0x821C7224;
		  /* 821C7224h */ case    3:  		/* addi R11, R11, 12 */
		/* 821C7224h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C7224h case    3:*/		return 0x821C7228;
		  /* 821C7228h */ case    4:  		/* cmplw CR6, R9, R8 */
		/* 821C7228h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821C7228h case    4:*/		return 0x821C722C;
		  /* 821C722Ch */ case    5:  		/* bc 12, CR6_LT, -80 */
		/* 821C722Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821C71DC;  }
		/* 821C722Ch case    5:*/		return 0x821C7230;
	}
	return 0x821C7230;
} // Block from 821C7218h-821C7230h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C7230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7230);
		  /* 821C7230h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821C7230h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821C7230h case    0:*/		return 0x821C7234;
		  /* 821C7234h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C7234h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C7234h case    1:*/		return 0x821C7238;
		  /* 821C7238h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7238h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7238h case    2:*/		return 0x821C723C;
		  /* 821C723Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C723Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C724C;  }
		/* 821C723Ch case    3:*/		return 0x821C7240;
		  /* 821C7240h */ case    4:  		/* mr R7, R11 */
		/* 821C7240h case    4:*/		regs.R7 = regs.R11;
		/* 821C7240h case    4:*/		return 0x821C7244;
		  /* 821C7244h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C7244h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7244h case    5:*/		return 0x821C7248;
		  /* 821C7248h */ case    6:  		/* bc 4, CR6_EQ, -128 */
		/* 821C7248h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C71C8;  }
		/* 821C7248h case    6:*/		return 0x821C724C;
	}
	return 0x821C724C;
} // Block from 821C7230h-821C724Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C724Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C724C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C724C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C724C);
		  /* 821C724Ch */ case    0:  		/* li R3, 0 */
		/* 821C724Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C724Ch case    0:*/		return 0x821C7250;
		  /* 821C7250h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7250h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7250h case    1:*/		return 0x821C7254;
	}
	return 0x821C7254;
} // Block from 821C724Ch-821C7254h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C7254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7254);
		  /* 821C7254h */ case    0:  		/* li R3, 1 */
		/* 821C7254h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821C7254h case    0:*/		return 0x821C7258;
		  /* 821C7258h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7258h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7258h case    1:*/		return 0x821C725C;
	}
	return 0x821C725C;
} // Block from 821C7254h-821C725Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C725Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C725C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C725C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C725C);
		  /* 821C725Ch */ case    0:  		/* nop */
		/* 821C725Ch case    0:*/		cpu::op::nop();
		/* 821C725Ch case    0:*/		return 0x821C7260;
		  /* 821C7260h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C7260h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C7260h case    1:*/		return 0x821C7264;
		  /* 821C7264h */ case    2:  		/* li R6, 0 */
		/* 821C7264h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C7264h case    2:*/		return 0x821C7268;
		  /* 821C7268h */ case    3:  		/* std R4, <#[R1 + 32]> */
		/* 821C7268h case    3:*/		cpu::mem::store64( regs, regs.R4, (uint32)(regs.R1 + 0x00000020) );
		/* 821C7268h case    3:*/		return 0x821C726C;
		  /* 821C726Ch */ case    4:  		/* std R5, <#[R1 + 40]> */
		/* 821C726Ch case    4:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000028) );
		/* 821C726Ch case    4:*/		return 0x821C7270;
		  /* 821C7270h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7270h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7270h case    5:*/		return 0x821C7274;
		  /* 821C7274h */ case    6:  		/* bc 4, CR0_EQ, 152 */
		/* 821C7274h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C730C;  }
		/* 821C7274h case    6:*/		return 0x821C7278;
		  /* 821C7278h */ case    7:  		/* mr R7, R11 */
		/* 821C7278h case    7:*/		regs.R7 = regs.R11;
		/* 821C7278h case    7:*/		return 0x821C727C;
		  /* 821C727Ch */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821C727Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C727Ch case    8:*/		return 0x821C7280;
		  /* 821C7280h */ case    9:  		/* bc 12, CR0_EQ, 140 */
		/* 821C7280h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C730C;  }
		/* 821C7280h case    9:*/		return 0x821C7284;
		  /* 821C7284h */ case   10:  		/* lwz R8, <#[R7 + 8]> */
		/* 821C7284h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000008) );
		/* 821C7284h case   10:*/		return 0x821C7288;
		  /* 821C7288h */ case   11:  		/* li R9, 0 */
		/* 821C7288h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C7288h case   11:*/		return 0x821C728C;
		  /* 821C728Ch */ case   12:  		/* cmplwi CR6, R8, 0 */
		/* 821C728Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821C728Ch case   12:*/		return 0x821C7290;
		  /* 821C7290h */ case   13:  		/* bc 12, CR6_EQ, 92 */
		/* 821C7290h case   13:*/		if ( regs.CR[6].eq ) { return 0x821C72EC;  }
		/* 821C7290h case   13:*/		return 0x821C7294;
		  /* 821C7294h */ case   14:  		/* addi R11, R7, 24 */
		/* 821C7294h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x18);
		/* 821C7294h case   14:*/		return 0x821C7298;
		  /* 821C7298h */ case   15:  		/* lwz R10, <#[R11 - 8]> */
		/* 821C7298h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 821C7298h case   15:*/		return 0x821C729C;
		  /* 821C729Ch */ case   16:  		/* lwz R5, <#[R1 + 32]> */
		/* 821C729Ch case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 821C729Ch case   16:*/		return 0x821C72A0;
		  /* 821C72A0h */ case   17:  		/* cmplw CR6, R10, R5 */
		/* 821C72A0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 821C72A0h case   17:*/		return 0x821C72A4;
		  /* 821C72A4h */ case   18:  		/* bc 4, CR6_EQ, 44 */
		/* 821C72A4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821C72D0;  }
		/* 821C72A4h case   18:*/		return 0x821C72A8;
		  /* 821C72A8h */ case   19:  		/* lwz R10, <#[R11 - 4]> */
		/* 821C72A8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C72A8h case   19:*/		return 0x821C72AC;
		  /* 821C72ACh */ case   20:  		/* lwz R5, <#[R1 + 36]> */
		/* 821C72ACh case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000024) );
		/* 821C72ACh case   20:*/		return 0x821C72B0;
		  /* 821C72B0h */ case   21:  		/* cmpw CR6, R10, R5 */
		/* 821C72B0h case   21:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R5);
		/* 821C72B0h case   21:*/		return 0x821C72B4;
		  /* 821C72B4h */ case   22:  		/* bc 4, CR6_EQ, 28 */
		/* 821C72B4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821C72D0;  }
		/* 821C72B4h case   22:*/		return 0x821C72B8;
		  /* 821C72B8h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 821C72B8h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C72B8h case   23:*/		return 0x821C72BC;
		  /* 821C72BCh */ case   24:  		/* lwz R5, <#[R1 + 40]> */
		/* 821C72BCh case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000028) );
		/* 821C72BCh case   24:*/		return 0x821C72C0;
		  /* 821C72C0h */ case   25:  		/* xor R10, R10, R5 */
		/* 821C72C0h case   25:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 821C72C0h case   25:*/		return 0x821C72C4;
		  /* 821C72C4h */ case   26:  		/* rlwinm. R10, R10, 0, 30, 28 */
		/* 821C72C4h case   26:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R10,regs.R10);
		/* 821C72C4h case   26:*/		return 0x821C72C8;
		  /* 821C72C8h */ case   27:  		/* li R10, 1 */
		/* 821C72C8h case   27:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C72C8h case   27:*/		return 0x821C72CC;
		  /* 821C72CCh */ case   28:  		/* bc 12, CR0_EQ, 8 */
		/* 821C72CCh case   28:*/		if ( regs.CR[0].eq ) { return 0x821C72D4;  }
		/* 821C72CCh case   28:*/		return 0x821C72D0;
	}
	return 0x821C72D0;
} // Block from 821C725Ch-821C72D0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821C72D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C72D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C72D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C72D0);
		  /* 821C72D0h */ case    0:  		/* li R10, 0 */
		/* 821C72D0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C72D0h case    0:*/		return 0x821C72D4;
	}
	return 0x821C72D4;
} // Block from 821C72D0h-821C72D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C72D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C72D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C72D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C72D4);
		  /* 821C72D4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C72D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C72D4h case    0:*/		return 0x821C72D8;
		  /* 821C72D8h */ case    1:  		/* bc 4, CR0_EQ, 60 */
		/* 821C72D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C7314;  }
		/* 821C72D8h case    1:*/		return 0x821C72DC;
		  /* 821C72DCh */ case    2:  		/* addi R9, R9, 1 */
		/* 821C72DCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C72DCh case    2:*/		return 0x821C72E0;
		  /* 821C72E0h */ case    3:  		/* addi R11, R11, 12 */
		/* 821C72E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C72E0h case    3:*/		return 0x821C72E4;
		  /* 821C72E4h */ case    4:  		/* cmplw CR6, R9, R8 */
		/* 821C72E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821C72E4h case    4:*/		return 0x821C72E8;
		  /* 821C72E8h */ case    5:  		/* bc 12, CR6_LT, -80 */
		/* 821C72E8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821C7298;  }
		/* 821C72E8h case    5:*/		return 0x821C72EC;
	}
	return 0x821C72EC;
} // Block from 821C72D4h-821C72ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C72ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C72EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C72EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C72EC);
		  /* 821C72ECh */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821C72ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821C72ECh case    0:*/		return 0x821C72F0;
		  /* 821C72F0h */ case    1:  		/* add R6, R8, R6 */
		/* 821C72F0h case    1:*/		cpu::op::add<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 821C72F0h case    1:*/		return 0x821C72F4;
		  /* 821C72F4h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C72F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C72F4h case    2:*/		return 0x821C72F8;
		  /* 821C72F8h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C72F8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C72F8h case    3:*/		return 0x821C72FC;
		  /* 821C72FCh */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821C72FCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821C730C;  }
		/* 821C72FCh case    4:*/		return 0x821C7300;
		  /* 821C7300h */ case    5:  		/* mr R7, R11 */
		/* 821C7300h case    5:*/		regs.R7 = regs.R11;
		/* 821C7300h case    5:*/		return 0x821C7304;
		  /* 821C7304h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C7304h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7304h case    6:*/		return 0x821C7308;
		  /* 821C7308h */ case    7:  		/* bc 4, CR6_EQ, -132 */
		/* 821C7308h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C7284;  }
		/* 821C7308h case    7:*/		return 0x821C730C;
	}
	return 0x821C730C;
} // Block from 821C72ECh-821C730Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C730Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C730C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C730C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C730C);
		  /* 821C730Ch */ case    0:  		/* li R3, -1 */
		/* 821C730Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821C730Ch case    0:*/		return 0x821C7310;
		  /* 821C7310h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7310h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7310h case    1:*/		return 0x821C7314;
	}
	return 0x821C7314;
} // Block from 821C730Ch-821C7314h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C7314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7314);
		  /* 821C7314h */ case    0:  		/* add R3, R9, R6 */
		/* 821C7314h case    0:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R6);
		/* 821C7314h case    0:*/		return 0x821C7318;
		  /* 821C7318h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821C7318h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7318h case    1:*/		return 0x821C731C;
	}
	return 0x821C731C;
} // Block from 821C7314h-821C731Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C731Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C731C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C731C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C731C);
		  /* 821C731Ch */ case    0:  		/* nop */
		/* 821C731Ch case    0:*/		cpu::op::nop();
		/* 821C731Ch case    0:*/		return 0x821C7320;
	}
	return 0x821C7320;
} // Block from 821C731Ch-821C7320h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7320);
		  /* 821C7320h */ case    0:  		/* mfspr R12, LR */
		/* 821C7320h case    0:*/		regs.R12 = regs.LR;
		/* 821C7320h case    0:*/		return 0x821C7324;
		  /* 821C7324h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821C7324h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C7324h case    1:*/		return 0x821C7328;
		  /* 821C7328h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821C7328h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821C7328h case    2:*/		return 0x821C732C;
		  /* 821C732Ch */ case    3:  		/* std R4, <#[R1 + 128]> */
		/* 821C732Ch case    3:*/		cpu::mem::store64( regs, regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 821C732Ch case    3:*/		return 0x821C7330;
		  /* 821C7330h */ case    4:  		/* lwz R4, <#[R3 + 4]> */
		/* 821C7330h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 821C7330h case    4:*/		return 0x821C7334;
		  /* 821C7334h */ case    5:  		/* std R5, <#[R1 + 136]> */
		/* 821C7334h case    5:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 821C7334h case    5:*/		return 0x821C7338;
		  /* 821C7338h */ case    6:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 821C7338h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 821C7338h case    6:*/		return 0x821C733C;
		  /* 821C733Ch */ case    7:  		/* bc 4, CR0_EQ, 252 */
		/* 821C733Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821C7438;  }
		/* 821C733Ch case    7:*/		return 0x821C7340;
		  /* 821C7340h */ case    8:  		/* cmplwi CR0, R4, 0 */
		/* 821C7340h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 821C7340h case    8:*/		return 0x821C7344;
		  /* 821C7344h */ case    9:  		/* bc 12, CR0_EQ, 244 */
		/* 821C7344h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C7438;  }
		/* 821C7344h case    9:*/		return 0x821C7348;
		  /* 821C7348h */ case   10:  		/* lwz R8, <#[R4 + 8]> */
		/* 821C7348h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000008) );
		/* 821C7348h case   10:*/		return 0x821C734C;
		  /* 821C734Ch */ case   11:  		/* li R9, 0 */
		/* 821C734Ch case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C734Ch case   11:*/		return 0x821C7350;
		  /* 821C7350h */ case   12:  		/* cmplwi CR6, R8, 0 */
		/* 821C7350h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821C7350h case   12:*/		return 0x821C7354;
		  /* 821C7354h */ case   13:  		/* bc 12, CR6_EQ, 96 */
		/* 821C7354h case   13:*/		if ( regs.CR[6].eq ) { return 0x821C73B4;  }
		/* 821C7354h case   13:*/		return 0x821C7358;
		  /* 821C7358h */ case   14:  		/* addi R11, R4, 24 */
		/* 821C7358h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x18);
		/* 821C7358h case   14:*/		return 0x821C735C;
		  /* 821C735Ch */ case   15:  		/* lwz R10, <#[R11 - 8]> */
		/* 821C735Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 821C735Ch case   15:*/		return 0x821C7360;
		  /* 821C7360h */ case   16:  		/* lwz R7, <#[R1 + 128]> */
		/* 821C7360h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000080) );
		/* 821C7360h case   16:*/		return 0x821C7364;
		  /* 821C7364h */ case   17:  		/* cmplw CR6, R10, R7 */
		/* 821C7364h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821C7364h case   17:*/		return 0x821C7368;
		  /* 821C7368h */ case   18:  		/* bc 4, CR6_EQ, 44 */
		/* 821C7368h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821C7394;  }
		/* 821C7368h case   18:*/		return 0x821C736C;
		  /* 821C736Ch */ case   19:  		/* lwz R10, <#[R11 - 4]> */
		/* 821C736Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C736Ch case   19:*/		return 0x821C7370;
	}
	return 0x821C7370;
} // Block from 821C7320h-821C7370h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C7370h
// Function '?MarkLoopBlock@Compiler@D3DXShader@@AAAXPAVBlock@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7370);
		  /* 821C7370h */ case    0:  		/* lwz R7, <#[R1 + 132]> */
		/* 821C7370h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000084) );
		/* 821C7370h case    0:*/		return 0x821C7374;
		  /* 821C7374h */ case    1:  		/* cmpw CR6, R10, R7 */
		/* 821C7374h case    1:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R7);
		/* 821C7374h case    1:*/		return 0x821C7378;
		  /* 821C7378h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 821C7378h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C7394;  }
		/* 821C7378h case    2:*/		return 0x821C737C;
		  /* 821C737Ch */ case    3:  		/* lwz R10, <#[R11]> */
		/* 821C737Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C737Ch case    3:*/		return 0x821C7380;
		  /* 821C7380h */ case    4:  		/* lwz R7, <#[R1 + 136]> */
		/* 821C7380h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000088) );
		/* 821C7380h case    4:*/		return 0x821C7384;
		  /* 821C7384h */ case    5:  		/* xor R10, R10, R7 */
		/* 821C7384h case    5:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821C7384h case    5:*/		return 0x821C7388;
		  /* 821C7388h */ case    6:  		/* rlwinm. R10, R10, 0, 30, 28 */
		/* 821C7388h case    6:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R10,regs.R10);
		/* 821C7388h case    6:*/		return 0x821C738C;
		  /* 821C738Ch */ case    7:  		/* li R10, 1 */
		/* 821C738Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C738Ch case    7:*/		return 0x821C7390;
		  /* 821C7390h */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 821C7390h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C7398;  }
		/* 821C7390h case    8:*/		return 0x821C7394;
	}
	return 0x821C7394;
} // Block from 821C7370h-821C7394h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C7394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7394);
		  /* 821C7394h */ case    0:  		/* li R10, 0 */
		/* 821C7394h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C7394h case    0:*/		return 0x821C7398;
	}
	return 0x821C7398;
} // Block from 821C7394h-821C7398h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7398);
		  /* 821C7398h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C7398h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C7398h case    0:*/		return 0x821C739C;
		  /* 821C739Ch */ case    1:  		/* bc 4, CR0_EQ, 52 */
		/* 821C739Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C73D0;  }
		/* 821C739Ch case    1:*/		return 0x821C73A0;
		  /* 821C73A0h */ case    2:  		/* lwz R10, <#[R4 + 8]> */
		/* 821C73A0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821C73A0h case    2:*/		return 0x821C73A4;
		  /* 821C73A4h */ case    3:  		/* addi R9, R9, 1 */
		/* 821C73A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C73A4h case    3:*/		return 0x821C73A8;
		  /* 821C73A8h */ case    4:  		/* addi R11, R11, 12 */
		/* 821C73A8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C73A8h case    4:*/		return 0x821C73AC;
		  /* 821C73ACh */ case    5:  		/* cmplw CR6, R9, R10 */
		/* 821C73ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821C73ACh case    5:*/		return 0x821C73B0;
	}
	return 0x821C73B0;
} // Block from 821C7398h-821C73B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C73B0h
// Function '?RebuildLoopExitList@Compiler@D3DXShader@@AAAXPAULoop@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C73B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C73B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C73B0);
		  /* 821C73B0h */ case    0:  		/* bc 12, CR6_LT, -84 */
		/* 821C73B0h case    0:*/		if ( regs.CR[6].lt ) { return 0x821C735C;  }
		/* 821C73B0h case    0:*/		return 0x821C73B4;
	}
	return 0x821C73B4;
} // Block from 821C73B0h-821C73B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C73B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C73B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C73B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C73B4);
		  /* 821C73B4h */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821C73B4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821C73B4h case    0:*/		return 0x821C73B8;
		  /* 821C73B8h */ case    1:  		/* lwz R4, <#[R11 + 4]> */
		/* 821C73B8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821C73B8h case    1:*/		return 0x821C73BC;
		  /* 821C73BCh */ case    2:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 821C73BCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 821C73BCh case    2:*/		return 0x821C73C0;
		  /* 821C73C0h */ case    3:  		/* bc 4, CR0_EQ, 120 */
		/* 821C73C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C7438;  }
		/* 821C73C0h case    3:*/		return 0x821C73C4;
		  /* 821C73C4h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821C73C4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821C73C4h case    4:*/		return 0x821C73C8;
		  /* 821C73C8h */ case    5:  		/* bc 4, CR6_EQ, -128 */
		/* 821C73C8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C7348;  }
		/* 821C73C8h case    5:*/		return 0x821C73CC;
		  /* 821C73CCh */ case    6:  		/* b 108 */
		/* 821C73CCh case    6:*/		return 0x821C7438;
		/* 821C73CCh case    6:*/		return 0x821C73D0;
	}
	return 0x821C73D0;
} // Block from 821C73B4h-821C73D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C73D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C73D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C73D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C73D0);
		  /* 821C73D0h */ case    0:  		/* addic. R10, R8, -1 */
		/* 821C73D0h case    0:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R8,0xFFFFFFFF);
		/* 821C73D0h case    0:*/		return 0x821C73D4;
		  /* 821C73D4h */ case    1:  		/* stw R10, <#[R4 + 8]> */
		/* 821C73D4h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821C73D4h case    1:*/		return 0x821C73D8;
		  /* 821C73D8h */ case    2:  		/* bc 4, CR0_EQ, 60 */
		/* 821C73D8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C7414;  }
		/* 821C73D8h case    2:*/		return 0x821C73DC;
		  /* 821C73DCh */ case    3:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821C73DCh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821C73DCh case    3:*/		return 0x821C73E0;
		  /* 821C73E0h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821C73E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C73E0h case    4:*/		return 0x821C73E4;
		  /* 821C73E4h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821C73E4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C73E4h case    5:*/		return 0x821C73E8;
		  /* 821C73E8h */ case    6:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821C73E8h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821C73E8h case    6:*/		return 0x821C73EC;
		  /* 821C73ECh */ case    7:  		/* stw R9, <#[R10]> */
		/* 821C73ECh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C73ECh case    7:*/		return 0x821C73F0;
		  /* 821C73F0h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821C73F0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821C73F0h case    8:*/		return 0x821C73F4;
		  /* 821C73F4h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 821C73F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C73F4h case    9:*/		return 0x821C73F8;
		  /* 821C73F8h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C73F8h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C73F8h case   10:*/		return 0x821C73FC;
		  /* 821C73FCh */ case   11:  		/* stw R10, <#[R11]> */
		/* 821C73FCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C73FCh case   11:*/		return 0x821C7400;
		  /* 821C7400h */ case   12:  		/* lwz R11, <#[R4 + 12]> */
		/* 821C7400h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C7400h case   12:*/		return 0x821C7404;
		  /* 821C7404h */ case   13:  		/* mulli R11, R11, 12 */
		/* 821C7404h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C7404h case   13:*/		return 0x821C7408;
		  /* 821C7408h */ case   14:  		/* addi R5, R11, 16 */
		/* 821C7408h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 821C7408h case   14:*/		return 0x821C740C;
		  /* 821C740Ch */ case   15:  		/* bl -480772 */
		/* 821C740Ch case   15:*/		regs.LR = 0x821C7410; return 0x82151E08;
		/* 821C740Ch case   15:*/		return 0x821C7410;
		  /* 821C7410h */ case   16:  		/* b 40 */
		/* 821C7410h case   16:*/		return 0x821C7438;
		/* 821C7410h case   16:*/		return 0x821C7414;
	}
	return 0x821C7414;
} // Block from 821C73D0h-821C7414h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821C7414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7414);
		  /* 821C7414h */ case    0:  		/* cmplw CR6, R9, R10 */
		/* 821C7414h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821C7414h case    0:*/		return 0x821C7418;
		  /* 821C7418h */ case    1:  		/* bc 4, CR6_LT, 32 */
		/* 821C7418h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821C7438;  }
		/* 821C7418h case    1:*/		return 0x821C741C;
		  /* 821C741Ch */ case    2:  		/* mulli R11, R9, 12 */
		/* 821C741Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0xC);
		/* 821C741Ch case    2:*/		return 0x821C7420;
		  /* 821C7420h */ case    3:  		/* add R11, R11, R4 */
		/* 821C7420h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821C7420h case    3:*/		return 0x821C7424;
		  /* 821C7424h */ case    4:  		/* subf R10, R9, R10 */
		/* 821C7424h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821C7424h case    4:*/		return 0x821C7428;
		  /* 821C7428h */ case    5:  		/* addi R3, R11, 16 */
		/* 821C7428h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x10);
		/* 821C7428h case    5:*/		return 0x821C742C;
		  /* 821C742Ch */ case    6:  		/* mulli R5, R10, 12 */
		/* 821C742Ch case    6:*/		cpu::op::mulli<0>(regs,&regs.R5,regs.R10,0xC);
		/* 821C742Ch case    6:*/		return 0x821C7430;
		  /* 821C7430h */ case    7:  		/* addi R4, R11, 28 */
		/* 821C7430h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1C);
		/* 821C7430h case    7:*/		return 0x821C7434;
		  /* 821C7434h */ case    8:  		/* bl -1266964 */
		/* 821C7434h case    8:*/		regs.LR = 0x821C7438; return 0x82091F20;
		/* 821C7434h case    8:*/		return 0x821C7438;
	}
	return 0x821C7438;
} // Block from 821C7414h-821C7438h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C7438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7438);
		  /* 821C7438h */ case    0:  		/* addi R1, R1, 96 */
		/* 821C7438h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821C7438h case    0:*/		return 0x821C743C;
		  /* 821C743Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821C743Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C743Ch case    1:*/		return 0x821C7440;
		  /* 821C7440h */ case    2:  		/* mtspr LR, R12 */
		/* 821C7440h case    2:*/		regs.LR = regs.R12;
		/* 821C7440h case    2:*/		return 0x821C7444;
		  /* 821C7444h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821C7444h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C7444h case    3:*/		return 0x821C7448;
	}
	return 0x821C7448;
} // Block from 821C7438h-821C7448h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C7448h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7448);
		  /* 821C7448h */ case    0:  		/* mfspr R12, LR */
		/* 821C7448h case    0:*/		regs.R12 = regs.LR;
		/* 821C7448h case    0:*/		return 0x821C744C;
		  /* 821C744Ch */ case    1:  		/* bl -1270316 */
		/* 821C744Ch case    1:*/		regs.LR = 0x821C7450; return 0x82091220;
		/* 821C744Ch case    1:*/		return 0x821C7450;
		  /* 821C7450h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 821C7450h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821C7450h case    2:*/		return 0x821C7454;
		  /* 821C7454h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 821C7454h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 821C7454h case    3:*/		return 0x821C7458;
		  /* 821C7458h */ case    4:  		/* stwu R1, <#[R1 - 272]> */
		/* 821C7458h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821C7458h case    4:*/		return 0x821C745C;
		  /* 821C745Ch */ case    5:  		/* lwz R10, <#[R3 + 44]> */
		/* 821C745Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000002C) );
		/* 821C745Ch case    5:*/		return 0x821C7460;
		  /* 821C7460h */ case    6:  		/* mr R31, R3 */
		/* 821C7460h case    6:*/		regs.R31 = regs.R3;
		/* 821C7460h case    6:*/		return 0x821C7464;
		  /* 821C7464h */ case    7:  		/* li R18, 1 */
		/* 821C7464h case    7:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 821C7464h case    7:*/		return 0x821C7468;
		  /* 821C7468h */ case    8:  		/* rlwinm. R11, R10, 0, 8, 8 */
		/* 821C7468h case    8:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R10);
		/* 821C7468h case    8:*/		return 0x821C746C;
		  /* 821C746Ch */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821C746Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C748C;  }
		/* 821C746Ch case    9:*/		return 0x821C7470;
		  /* 821C7470h */ case   10:  		/* lwz R11, <#[R3 + 56]> */
		/* 821C7470h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 821C7470h case   10:*/		return 0x821C7474;
		  /* 821C7474h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821C7474h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7474h case   11:*/		return 0x821C7478;
		  /* 821C7478h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 821C7478h case   12:*/		if ( regs.CR[6].eq ) { return 0x821C748C;  }
		/* 821C7478h case   12:*/		return 0x821C747C;
		  /* 821C747Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821C747Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C747Ch case   13:*/		return 0x821C7480;
		  /* 821C7480h */ case   14:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821C7480h case   14:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821C7480h case   14:*/		return 0x821C7484;
		  /* 821C7484h */ case   15:  		/* mr R11, R18 */
		/* 821C7484h case   15:*/		regs.R11 = regs.R18;
		/* 821C7484h case   15:*/		return 0x821C7488;
		  /* 821C7488h */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 821C7488h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821C7490;  }
		/* 821C7488h case   16:*/		return 0x821C748C;
	}
	return 0x821C748C;
} // Block from 821C7448h-821C748Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821C748Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C748C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C748C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C748C);
		  /* 821C748Ch */ case    0:  		/* li R11, 0 */
		/* 821C748Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C748Ch case    0:*/		return 0x821C7490;
	}
	return 0x821C7490;
} // Block from 821C748Ch-821C7490h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7490);
		  /* 821C7490h */ case    0:  		/* rlwinm. R9, R10, 0, 7, 7 */
		/* 821C7490h case    0:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R9,regs.R10);
		/* 821C7490h case    0:*/		return 0x821C7494;
		  /* 821C7494h */ case    1:  		/* rlwinm R10, R11, 0, 24, 31 */
		/* 821C7494h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 821C7494h case    1:*/		return 0x821C7498;
		  /* 821C7498h */ case    2:  		/* bc 12, CR0_EQ, 48 */
		/* 821C7498h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C74C8;  }
		/* 821C7498h case    2:*/		return 0x821C749C;
		  /* 821C749Ch */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 821C749Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821C749Ch case    3:*/		return 0x821C74A0;
		  /* 821C74A0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C74A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C74A0h case    4:*/		return 0x821C74A4;
		  /* 821C74A4h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821C74A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C74B8;  }
		/* 821C74A4h case    5:*/		return 0x821C74A8;
		  /* 821C74A8h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 821C74A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C74A8h case    6:*/		return 0x821C74AC;
		  /* 821C74ACh */ case    7:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821C74ACh case    7:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821C74ACh case    7:*/		return 0x821C74B0;
		  /* 821C74B0h */ case    8:  		/* mr R11, R18 */
		/* 821C74B0h case    8:*/		regs.R11 = regs.R18;
		/* 821C74B0h case    8:*/		return 0x821C74B4;
		  /* 821C74B4h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 821C74B4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821C74BC;  }
		/* 821C74B4h case    9:*/		return 0x821C74B8;
	}
	return 0x821C74B8;
} // Block from 821C7490h-821C74B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C74B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74B8);
		  /* 821C74B8h */ case    0:  		/* li R11, 0 */
		/* 821C74B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C74B8h case    0:*/		return 0x821C74BC;
	}
	return 0x821C74BC;
} // Block from 821C74B8h-821C74BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C74BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74BC);
		  /* 821C74BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C74BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C74BCh case    0:*/		return 0x821C74C0;
		  /* 821C74C0h */ case    1:  		/* mr R11, R18 */
		/* 821C74C0h case    1:*/		regs.R11 = regs.R18;
		/* 821C74C0h case    1:*/		return 0x821C74C4;
		  /* 821C74C4h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821C74C4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C74CC;  }
		/* 821C74C4h case    2:*/		return 0x821C74C8;
	}
	return 0x821C74C8;
} // Block from 821C74BCh-821C74C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C74C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74C8);
		  /* 821C74C8h */ case    0:  		/* li R11, 0 */
		/* 821C74C8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C74C8h case    0:*/		return 0x821C74CC;
	}
	return 0x821C74CC;
} // Block from 821C74C8h-821C74CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C74CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74CC);
		  /* 821C74CCh */ case    0:  		/* rlwinm. R22, R10, 0, 24, 31 */
		/* 821C74CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R22,regs.R10);
		/* 821C74CCh case    0:*/		return 0x821C74D0;
		  /* 821C74D0h */ case    1:  		/* rlwinm R20, R11, 0, 24, 31 */
		/* 821C74D0h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R20,regs.R11);
		/* 821C74D0h case    1:*/		return 0x821C74D4;
		  /* 821C74D4h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821C74D4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C74E4;  }
		/* 821C74D4h case    2:*/		return 0x821C74D8;
		  /* 821C74D8h */ case    3:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 821C74D8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 821C74D8h case    3:*/		return 0x821C74DC;
		  /* 821C74DCh */ case    4:  		/* li R11, 0 */
		/* 821C74DCh case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C74DCh case    4:*/		return 0x821C74E0;
		  /* 821C74E0h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821C74E0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C74E8;  }
		/* 821C74E0h case    5:*/		return 0x821C74E4;
	}
	return 0x821C74E4;
} // Block from 821C74CCh-821C74E4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C74E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74E4);
		  /* 821C74E4h */ case    0:  		/* mr R11, R18 */
		/* 821C74E4h case    0:*/		regs.R11 = regs.R18;
		/* 821C74E4h case    0:*/		return 0x821C74E8;
	}
	return 0x821C74E8;
} // Block from 821C74E4h-821C74E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C74E8h
// Function '?AddLoopEndInstructionForUnnaturalLoopExit@Compiler@D3DXShader@@AAAXPAVBlock@2@PAVInstruction@2@PAULoop@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C74E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C74E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C74E8);
		  /* 821C74E8h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 821C74E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821C74E8h case    0:*/		return 0x821C74EC;
		  /* 821C74ECh */ case    1:  		/* rlwinm R23, R11, 0, 24, 31 */
		/* 821C74ECh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R23,regs.R11);
		/* 821C74ECh case    1:*/		return 0x821C74F0;
		  /* 821C74F0h */ case    2:  		/* lis R29, -1 */
		/* 821C74F0h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821C74F0h case    2:*/		return 0x821C74F4;
		  /* 821C74F4h */ case    3:  		/* rlwinm R11, R10, 0, 0, 15 */
		/* 821C74F4h case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R10);
		/* 821C74F4h case    3:*/		return 0x821C74F8;
		  /* 821C74F8h */ case    4:  		/* mr R8, R23 */
		/* 821C74F8h case    4:*/		regs.R8 = regs.R23;
		/* 821C74F8h case    4:*/		return 0x821C74FC;
		  /* 821C74FCh */ case    5:  		/* cmplw CR6, R11, R29 */
		/* 821C74FCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821C74FCh case    5:*/		return 0x821C7500;
		  /* 821C7500h */ case    6:  		/* li R7, 1 */
		/* 821C7500h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C7500h case    6:*/		return 0x821C7504;
		  /* 821C7504h */ case    7:  		/* li R5, 0 */
		/* 821C7504h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7504h case    7:*/		return 0x821C7508;
		  /* 821C7508h */ case    8:  		/* mr R3, R31 */
		/* 821C7508h case    8:*/		regs.R3 = regs.R31;
		/* 821C7508h case    8:*/		return 0x821C750C;
		  /* 821C750Ch */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821C750Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C7520;  }
		/* 821C750Ch case    9:*/		return 0x821C7510;
		  /* 821C7510h */ case   10:  		/* lis R11, -32252 */
		/* 821C7510h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C7510h case   10:*/		return 0x821C7514;
		  /* 821C7514h */ case   11:  		/* li R4, 18 */
		/* 821C7514h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 821C7514h case   11:*/		return 0x821C7518;
		  /* 821C7518h */ case   12:  		/* addi R6, R11, -16088 */
		/* 821C7518h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC128);
		/* 821C7518h case   12:*/		return 0x821C751C;
		  /* 821C751Ch */ case   13:  		/* b 16 */
		/* 821C751Ch case   13:*/		return 0x821C752C;
		/* 821C751Ch case   13:*/		return 0x821C7520;
	}
	return 0x821C7520;
} // Block from 821C74E8h-821C7520h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C7520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7520);
		  /* 821C7520h */ case    0:  		/* lis R11, -32252 */
		/* 821C7520h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C7520h case    0:*/		return 0x821C7524;
		  /* 821C7524h */ case    1:  		/* li R4, 16 */
		/* 821C7524h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 821C7524h case    1:*/		return 0x821C7528;
		  /* 821C7528h */ case    2:  		/* addi R6, R11, -16096 */
		/* 821C7528h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC120);
		/* 821C7528h case    2:*/		return 0x821C752C;
	}
	return 0x821C752C;
} // Block from 821C7520h-821C752Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C752Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C752C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C752C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C752C);
		  /* 821C752Ch */ case    0:  		/* bl 406036 */
		/* 821C752Ch case    0:*/		regs.LR = 0x821C7530; return 0x8222A740;
		/* 821C752Ch case    0:*/		return 0x821C7530;
		  /* 821C7530h */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C7530h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C7530h case    1:*/		return 0x821C7534;
		  /* 821C7534h */ case    2:  		/* mr R16, R3 */
		/* 821C7534h case    2:*/		regs.R16 = regs.R3;
		/* 821C7534h case    2:*/		return 0x821C7538;
		  /* 821C7538h */ case    3:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C7538h case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C7538h case    3:*/		return 0x821C753C;
		  /* 821C753Ch */ case    4:  		/* li R17, 0 */
		/* 821C753Ch case    4:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821C753Ch case    4:*/		return 0x821C7540;
		  /* 821C7540h */ case    5:  		/* cmplw CR6, R11, R29 */
		/* 821C7540h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821C7540h case    5:*/		return 0x821C7544;
		  /* 821C7544h */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 821C7544h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C756C;  }
		/* 821C7544h case    6:*/		return 0x821C7548;
		  /* 821C7548h */ case    7:  		/* lis R11, -32255 */
		/* 821C7548h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821C7548h case    7:*/		return 0x821C754C;
		  /* 821C754Ch */ case    8:  		/* mr R8, R23 */
		/* 821C754Ch case    8:*/		regs.R8 = regs.R23;
		/* 821C754Ch case    8:*/		return 0x821C7550;
		  /* 821C7550h */ case    9:  		/* addi R6, R11, 2280 */
		/* 821C7550h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x8E8);
		/* 821C7550h case    9:*/		return 0x821C7554;
		  /* 821C7554h */ case   10:  		/* li R7, 2 */
		/* 821C7554h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C7554h case   10:*/		return 0x821C7558;
		  /* 821C7558h */ case   11:  		/* li R5, 0 */
		/* 821C7558h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7558h case   11:*/		return 0x821C755C;
		  /* 821C755Ch */ case   12:  		/* li R4, -1 */
		/* 821C755Ch case   12:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 821C755Ch case   12:*/		return 0x821C7560;
		  /* 821C7560h */ case   13:  		/* mr R3, R31 */
		/* 821C7560h case   13:*/		regs.R3 = regs.R31;
		/* 821C7560h case   13:*/		return 0x821C7564;
		  /* 821C7564h */ case   14:  		/* bl 405980 */
		/* 821C7564h case   14:*/		regs.LR = 0x821C7568; return 0x8222A740;
		/* 821C7564h case   14:*/		return 0x821C7568;
		  /* 821C7568h */ case   15:  		/* mr R17, R3 */
		/* 821C7568h case   15:*/		regs.R17 = regs.R3;
		/* 821C7568h case   15:*/		return 0x821C756C;
	}
	return 0x821C756C;
} // Block from 821C752Ch-821C756Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C756Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C756C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C756C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C756C);
		  /* 821C756Ch */ case    0:  		/* cmplwi CR6, R16, 0 */
		/* 821C756Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821C756Ch case    0:*/		return 0x821C7570;
		  /* 821C7570h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821C7570h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C757C;  }
		/* 821C7570h case    1:*/		return 0x821C7574;
		  /* 821C7574h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 821C7574h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821C7574h case    2:*/		return 0x821C7578;
		  /* 821C7578h */ case    3:  		/* bc 12, CR6_EQ, 1028 */
		/* 821C7578h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C797C;  }
		/* 821C7578h case    3:*/		return 0x821C757C;
	}
	return 0x821C757C;
} // Block from 821C756Ch-821C757Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C757Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C757C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C757C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C757C);
		  /* 821C757Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C757Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C757Ch case    0:*/		return 0x821C7580;
		  /* 821C7580h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7580h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7580h case    1:*/		return 0x821C7584;
		  /* 821C7584h */ case    2:  		/* bc 4, CR0_EQ, 1016 */
		/* 821C7584h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C797C;  }
		/* 821C7584h case    2:*/		return 0x821C7588;
		  /* 821C7588h */ case    3:  		/* mr R25, R11 */
		/* 821C7588h case    3:*/		regs.R25 = regs.R11;
		/* 821C7588h case    3:*/		return 0x821C758C;
		  /* 821C758Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C758Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C758Ch case    4:*/		return 0x821C7590;
		  /* 821C7590h */ case    5:  		/* bc 12, CR0_EQ, 1004 */
		/* 821C7590h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C797C;  }
		/* 821C7590h case    5:*/		return 0x821C7594;
		  /* 821C7594h */ case    6:  		/* li R24, 57 */
		/* 821C7594h case    6:*/		cpu::op::li<0>(regs,&regs.R24,0x39);
		/* 821C7594h case    6:*/		return 0x821C7598;
		  /* 821C7598h */ case    7:  		/* lwz R11, <#[R25 + 68]> */
		/* 821C7598h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000044) );
		/* 821C7598h case    7:*/		return 0x821C759C;
		  /* 821C759Ch */ case    8:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821C759Ch case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821C759Ch case    8:*/		return 0x821C75A0;
		  /* 821C75A0h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821C75A0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C75B4;  }
		/* 821C75A0h case    9:*/		return 0x821C75A4;
		  /* 821C75A4h */ case   10:  		/* lwz R11, <#[R31 + 56]> */
		/* 821C75A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821C75A4h case   10:*/		return 0x821C75A8;
		  /* 821C75A8h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821C75A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C75A8h case   11:*/		return 0x821C75AC;
		  /* 821C75ACh */ case   12:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821C75ACh case   12:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821C75ACh case   12:*/		return 0x821C75B0;
		  /* 821C75B0h */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 821C75B0h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821C75C0;  }
		/* 821C75B0h case   13:*/		return 0x821C75B4;
	}
	return 0x821C75B4;
} // Block from 821C757Ch-821C75B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C75B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C75B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C75B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C75B4);
		  /* 821C75B4h */ case    0:  		/* lwz R11, <#[R25 + 76]> */
		/* 821C75B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821C75B4h case    0:*/		return 0x821C75B8;
		  /* 821C75B8h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821C75B8h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821C75B8h case    1:*/		return 0x821C75BC;
		  /* 821C75BCh */ case    2:  		/* bc 12, CR0_EQ, 444 */
		/* 821C75BCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821C7778;  }
		/* 821C75BCh case    2:*/		return 0x821C75C0;
	}
	return 0x821C75C0;
} // Block from 821C75B4h-821C75C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C75C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C75C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C75C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C75C0);
		  /* 821C75C0h */ case    0:  		/* mr R4, R25 */
		/* 821C75C0h case    0:*/		regs.R4 = regs.R25;
		/* 821C75C0h case    0:*/		return 0x821C75C4;
		  /* 821C75C4h */ case    1:  		/* mr R3, R31 */
		/* 821C75C4h case    1:*/		regs.R3 = regs.R31;
		/* 821C75C4h case    1:*/		return 0x821C75C8;
		  /* 821C75C8h */ case    2:  		/* bl 382072 */
		/* 821C75C8h case    2:*/		regs.LR = 0x821C75CC; return 0x82224A40;
		/* 821C75C8h case    2:*/		return 0x821C75CC;
		  /* 821C75CCh */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C75CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C75CCh case    3:*/		return 0x821C75D0;
		  /* 821C75D0h */ case    4:  		/* mr R26, R3 */
		/* 821C75D0h case    4:*/		regs.R26 = regs.R3;
		/* 821C75D0h case    4:*/		return 0x821C75D4;
		  /* 821C75D4h */ case    5:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C75D4h case    5:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C75D4h case    5:*/		return 0x821C75D8;
	}
	return 0x821C75D8;
} // Block from 821C75C0h-821C75D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C75D8h
// Function '?CheckMAXAArrayLimitInLoop@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAULoop@2@PAUInductionVariable@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C75D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C75D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C75D8);
		  /* 821C75D8h */ case    0:  		/* li R28, 0 */
		/* 821C75D8h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C75D8h case    0:*/		return 0x821C75DC;
		  /* 821C75DCh */ case    1:  		/* li R27, 0 */
		/* 821C75DCh case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821C75DCh case    1:*/		return 0x821C75E0;
		  /* 821C75E0h */ case    2:  		/* cmplw CR6, R11, R29 */
		/* 821C75E0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821C75E0h case    2:*/		return 0x821C75E4;
		  /* 821C75E4h */ case    3:  		/* bc 4, CR6_EQ, 36 */
		/* 821C75E4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C7608;  }
		/* 821C75E4h case    3:*/		return 0x821C75E8;
		  /* 821C75E8h */ case    4:  		/* mr R4, R25 */
		/* 821C75E8h case    4:*/		regs.R4 = regs.R25;
		/* 821C75E8h case    4:*/		return 0x821C75EC;
		  /* 821C75ECh */ case    5:  		/* mr R3, R31 */
		/* 821C75ECh case    5:*/		regs.R3 = regs.R31;
		/* 821C75ECh case    5:*/		return 0x821C75F0;
		  /* 821C75F0h */ case    6:  		/* bl 382032 */
		/* 821C75F0h case    6:*/		regs.LR = 0x821C75F4; return 0x82224A40;
		/* 821C75F0h case    6:*/		return 0x821C75F4;
		  /* 821C75F4h */ case    7:  		/* mr R28, R3 */
		/* 821C75F4h case    7:*/		regs.R28 = regs.R3;
		/* 821C75F4h case    7:*/		return 0x821C75F8;
		  /* 821C75F8h */ case    8:  		/* mr R4, R25 */
		/* 821C75F8h case    8:*/		regs.R4 = regs.R25;
		/* 821C75F8h case    8:*/		return 0x821C75FC;
		  /* 821C75FCh */ case    9:  		/* mr R3, R31 */
		/* 821C75FCh case    9:*/		regs.R3 = regs.R31;
		/* 821C75FCh case    9:*/		return 0x821C7600;
		  /* 821C7600h */ case   10:  		/* bl 382016 */
		/* 821C7600h case   10:*/		regs.LR = 0x821C7604; return 0x82224A40;
		/* 821C7600h case   10:*/		return 0x821C7604;
		  /* 821C7604h */ case   11:  		/* mr R27, R3 */
		/* 821C7604h case   11:*/		regs.R27 = regs.R3;
		/* 821C7604h case   11:*/		return 0x821C7608;
	}
	return 0x821C7608;
} // Block from 821C75D8h-821C7608h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C7608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7608);
		  /* 821C7608h */ case    0:  		/* lwz R11, <#[R25 + 76]> */
		/* 821C7608h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821C7608h case    0:*/		return 0x821C760C;
		  /* 821C760Ch */ case    1:  		/* mr R30, R25 */
		/* 821C760Ch case    1:*/		regs.R30 = regs.R25;
		/* 821C760Ch case    1:*/		return 0x821C7610;
		  /* 821C7610h */ case    2:  		/* b 68 */
		/* 821C7610h case    2:*/		return 0x821C7654;
		/* 821C7610h case    2:*/		return 0x821C7614;
		  /* 821C7614h */ case    3:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C7614h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C7614h case    3:*/		return 0x821C7618;
		  /* 821C7618h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821C7618h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C7618h case    4:*/		return 0x821C761C;
		  /* 821C761Ch */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821C761Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821C7630;  }
		/* 821C761Ch case    5:*/		return 0x821C7620;
		  /* 821C7620h */ case    6:  		/* lwz R11, <#[R10 + 12]> */
		/* 821C7620h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821C7620h case    6:*/		return 0x821C7624;
		  /* 821C7624h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C7624h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7624h case    7:*/		return 0x821C7628;
		  /* 821C7628h */ case    8:  		/* mr R11, R18 */
		/* 821C7628h case    8:*/		regs.R11 = regs.R18;
		/* 821C7628h case    8:*/		return 0x821C762C;
		  /* 821C762Ch */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821C762Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C7634;  }
		/* 821C762Ch case    9:*/		return 0x821C7630;
	}
	return 0x821C7630;
} // Block from 821C7608h-821C7630h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C7630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7630);
		  /* 821C7630h */ case    0:  		/* li R11, 0 */
		/* 821C7630h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C7630h case    0:*/		return 0x821C7634;
	}
	return 0x821C7634;
} // Block from 821C7630h-821C7634h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7634);
		  /* 821C7634h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C7634h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C7634h case    0:*/		return 0x821C7638;
		  /* 821C7638h */ case    1:  		/* bc 4, CR0_EQ, 812 */
		/* 821C7638h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C7964;  }
		/* 821C7638h case    1:*/		return 0x821C763C;
		  /* 821C763Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821C763Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C763Ch case    2:*/		return 0x821C7640;
		  /* 821C7640h */ case    3:  		/* bc 12, CR6_EQ, 816 */
		/* 821C7640h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C7970;  }
		/* 821C7640h case    3:*/		return 0x821C7644;
		  /* 821C7644h */ case    4:  		/* lwz R30, <#[R10 + 4]> */
		/* 821C7644h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 821C7644h case    4:*/		return 0x821C7648;
		  /* 821C7648h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821C7648h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C7648h case    5:*/		return 0x821C764C;
		  /* 821C764Ch */ case    6:  		/* bc 12, CR6_EQ, 804 */
		/* 821C764Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C7970;  }
		/* 821C764Ch case    6:*/		return 0x821C7650;
		  /* 821C7650h */ case    7:  		/* lwz R11, <#[R30 + 76]> */
		/* 821C7650h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821C7650h case    7:*/		return 0x821C7654;
	}
	return 0x821C7654;
} // Block from 821C7634h-821C7654h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C7654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7654);
		  /* 821C7654h */ case    0:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 821C7654h case    0:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 821C7654h case    0:*/		return 0x821C7658;
		  /* 821C7658h */ case    1:  		/* bc 12, CR0_EQ, -68 */
		/* 821C7658h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C7614;  }
		/* 821C7658h case    1:*/		return 0x821C765C;
		  /* 821C765Ch */ case    2:  		/* addi R29, R30, 24 */
		/* 821C765Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x18);
		/* 821C765Ch case    2:*/		return 0x821C7660;
		  /* 821C7660h */ case    3:  		/* li R8, 1 */
		/* 821C7660h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C7660h case    3:*/		return 0x821C7664;
		  /* 821C7664h */ case    4:  		/* li R7, 1 */
		/* 821C7664h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C7664h case    4:*/		return 0x821C7668;
	}
	return 0x821C7668;
} // Block from 821C7654h-821C7668h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C7668h
// Function '?CreatePreHeader@Compiler@D3DXShader@@AAAXPAULoop@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7668);
		  /* 821C7668h */ case    0:  		/* li R6, 104 */
		/* 821C7668h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 821C7668h case    0:*/		return 0x821C766C;
		  /* 821C766Ch */ case    1:  		/* mr R5, R29 */
		/* 821C766Ch case    1:*/		regs.R5 = regs.R29;
		/* 821C766Ch case    1:*/		return 0x821C7670;
		  /* 821C7670h */ case    2:  		/* mr R4, R30 */
		/* 821C7670h case    2:*/		regs.R4 = regs.R30;
		/* 821C7670h case    2:*/		return 0x821C7674;
		  /* 821C7674h */ case    3:  		/* mr R3, R31 */
		/* 821C7674h case    3:*/		regs.R3 = regs.R31;
		/* 821C7674h case    3:*/		return 0x821C7678;
		  /* 821C7678h */ case    4:  		/* bl 381728 */
		/* 821C7678h case    4:*/		regs.LR = 0x821C767C; return 0x82224998;
		/* 821C7678h case    4:*/		return 0x821C767C;
		  /* 821C767Ch */ case    5:  		/* mr R21, R3 */
		/* 821C767Ch case    5:*/		regs.R21 = regs.R3;
		/* 821C767Ch case    5:*/		return 0x821C7680;
		  /* 821C7680h */ case    6:  		/* li R5, 0 */
		/* 821C7680h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7680h case    6:*/		return 0x821C7684;
		  /* 821C7684h */ case    7:  		/* mr R4, R16 */
		/* 821C7684h case    7:*/		regs.R4 = regs.R16;
		/* 821C7684h case    7:*/		return 0x821C7688;
		  /* 821C7688h */ case    8:  		/* mr R3, R31 */
		/* 821C7688h case    8:*/		regs.R3 = regs.R31;
		/* 821C7688h case    8:*/		return 0x821C768C;
		  /* 821C768Ch */ case    9:  		/* bl -324988 */
		/* 821C768Ch case    9:*/		regs.LR = 0x821C7690; return 0x82178110;
		/* 821C768Ch case    9:*/		return 0x821C7690;
		  /* 821C7690h */ case   10:  		/* mr R4, R3 */
		/* 821C7690h case   10:*/		regs.R4 = regs.R3;
		/* 821C7690h case   10:*/		return 0x821C7694;
		  /* 821C7694h */ case   11:  		/* mr R3, R21 */
		/* 821C7694h case   11:*/		regs.R3 = regs.R21;
		/* 821C7694h case   11:*/		return 0x821C7698;
		  /* 821C7698h */ case   12:  		/* bl -324816 */
		/* 821C7698h case   12:*/		regs.LR = 0x821C769C; return 0x821781C8;
		/* 821C7698h case   12:*/		return 0x821C769C;
		  /* 821C769Ch */ case   13:  		/* stw R3, <#[R21 + 44]> */
		/* 821C769Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + 0x0000002C) );
		/* 821C769Ch case   13:*/		return 0x821C76A0;
		  /* 821C76A0h */ case   14:  		/* mr R4, R21 */
		/* 821C76A0h case   14:*/		regs.R4 = regs.R21;
		/* 821C76A0h case   14:*/		return 0x821C76A4;
		  /* 821C76A4h */ case   15:  		/* mr R3, R31 */
		/* 821C76A4h case   15:*/		regs.R3 = regs.R31;
		/* 821C76A4h case   15:*/		return 0x821C76A8;
		  /* 821C76A8h */ case   16:  		/* bl -325288 */
		/* 821C76A8h case   16:*/		regs.LR = 0x821C76AC; return 0x82178000;
		/* 821C76A8h case   16:*/		return 0x821C76AC;
		  /* 821C76ACh */ case   17:  		/* mr R4, R3 */
		/* 821C76ACh case   17:*/		regs.R4 = regs.R3;
		/* 821C76ACh case   17:*/		return 0x821C76B0;
		  /* 821C76B0h */ case   18:  		/* mr R3, R26 */
		/* 821C76B0h case   18:*/		regs.R3 = regs.R26;
		/* 821C76B0h case   18:*/		return 0x821C76B4;
		  /* 821C76B4h */ case   19:  		/* bl -324844 */
		/* 821C76B4h case   19:*/		regs.LR = 0x821C76B8; return 0x821781C8;
		/* 821C76B4h case   19:*/		return 0x821C76B8;
		  /* 821C76B8h */ case   20:  		/* lwz R10, <#[R31 + 44]> */
		/* 821C76B8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C76B8h case   20:*/		return 0x821C76BC;
		  /* 821C76BCh */ case   21:  		/* lwz R9, <#[R31 + 48]> */
		/* 821C76BCh case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821C76BCh case   21:*/		return 0x821C76C0;
		  /* 821C76C0h */ case   22:  		/* lis R11, -1 */
		/* 821C76C0h case   22:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821C76C0h case   22:*/		return 0x821C76C4;
		  /* 821C76C4h */ case   23:  		/* ori R10, R10, 4 */
		/* 821C76C4h case   23:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C76C4h case   23:*/		return 0x821C76C8;
		  /* 821C76C8h */ case   24:  		/* rlwinm R9, R9, 0, 0, 15 */
		/* 821C76C8h case   24:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R9,regs.R9);
		/* 821C76C8h case   24:*/		return 0x821C76CC;
		  /* 821C76CCh */ case   25:  		/* stw R10, <#[R31 + 44]> */
		/* 821C76CCh case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C76CCh case   25:*/		return 0x821C76D0;
		  /* 821C76D0h */ case   26:  		/* cmplw CR6, R9, R11 */
		/* 821C76D0h case   26:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C76D0h case   26:*/		return 0x821C76D4;
		  /* 821C76D4h */ case   27:  		/* bc 4, CR6_EQ, 620 */
		/* 821C76D4h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821C7940;  }
		/* 821C76D4h case   27:*/		return 0x821C76D8;
		  /* 821C76D8h */ case   28:  		/* cmplwi CR6, R17, 0 */
		/* 821C76D8h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821C76D8h case   28:*/		return 0x821C76DC;
		  /* 821C76DCh */ case   29:  		/* bc 12, CR6_EQ, 612 */
		/* 821C76DCh case   29:*/		if ( regs.CR[6].eq ) { return 0x821C7940;  }
		/* 821C76DCh case   29:*/		return 0x821C76E0;
		  /* 821C76E0h */ case   30:  		/* li R8, 2 */
		/* 821C76E0h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 821C76E0h case   30:*/		return 0x821C76E4;
		  /* 821C76E4h */ case   31:  		/* li R7, 1 */
		/* 821C76E4h case   31:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C76E4h case   31:*/		return 0x821C76E8;
		  /* 821C76E8h */ case   32:  		/* li R6, 104 */
		/* 821C76E8h case   32:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 821C76E8h case   32:*/		return 0x821C76EC;
		  /* 821C76ECh */ case   33:  		/* mr R5, R29 */
		/* 821C76ECh case   33:*/		regs.R5 = regs.R29;
		/* 821C76ECh case   33:*/		return 0x821C76F0;
		  /* 821C76F0h */ case   34:  		/* mr R4, R30 */
		/* 821C76F0h case   34:*/		regs.R4 = regs.R30;
		/* 821C76F0h case   34:*/		return 0x821C76F4;
		  /* 821C76F4h */ case   35:  		/* mr R3, R31 */
		/* 821C76F4h case   35:*/		regs.R3 = regs.R31;
		/* 821C76F4h case   35:*/		return 0x821C76F8;
		  /* 821C76F8h */ case   36:  		/* bl 381600 */
		/* 821C76F8h case   36:*/		regs.LR = 0x821C76FC; return 0x82224998;
		/* 821C76F8h case   36:*/		return 0x821C76FC;
		  /* 821C76FCh */ case   37:  		/* mr R30, R3 */
		/* 821C76FCh case   37:*/		regs.R30 = regs.R3;
		/* 821C76FCh case   37:*/		return 0x821C7700;
		  /* 821C7700h */ case   38:  		/* mr R4, R17 */
		/* 821C7700h case   38:*/		regs.R4 = regs.R17;
		/* 821C7700h case   38:*/		return 0x821C7704;
		  /* 821C7704h */ case   39:  		/* mr R3, R31 */
		/* 821C7704h case   39:*/		regs.R3 = regs.R31;
		/* 821C7704h case   39:*/		return 0x821C7708;
		  /* 821C7708h */ case   40:  		/* bl -325384 */
		/* 821C7708h case   40:*/		regs.LR = 0x821C770C; return 0x82178000;
		/* 821C7708h case   40:*/		return 0x821C770C;
		  /* 821C770Ch */ case   41:  		/* lwz R11, <#[R3]> */
		/* 821C770Ch case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C770Ch case   41:*/		return 0x821C7710;
		  /* 821C7710h */ case   42:  		/* li R4, 0 */
		/* 821C7710h case   42:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C7710h case   42:*/		return 0x821C7714;
		  /* 821C7714h */ case   43:  		/* rlwimi R11, R18, 26, 4, 6 */
		/* 821C7714h case   43:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R18);
		/* 821C7714h case   43:*/		return 0x821C7718;
		  /* 821C7718h */ case   44:  		/* mr R29, R3 */
		/* 821C7718h case   44:*/		regs.R29 = regs.R3;
		/* 821C7718h case   44:*/		return 0x821C771C;
		  /* 821C771Ch */ case   45:  		/* stw R11, <#[R3]> */
		/* 821C771Ch case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C771Ch case   45:*/		return 0x821C7720;
		  /* 821C7720h */ case   46:  		/* bl -326752 */
		/* 821C7720h case   46:*/		regs.LR = 0x821C7724; return 0x82177AC0;
		/* 821C7720h case   46:*/		return 0x821C7724;
		  /* 821C7724h */ case   47:  		/* lwz R11, <#[R29]> */
		/* 821C7724h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C7724h case   47:*/		return 0x821C7728;
		  /* 821C7728h */ case   48:  		/* mr R3, R30 */
		/* 821C7728h case   48:*/		regs.R3 = regs.R30;
		/* 821C7728h case   48:*/		return 0x821C772C;
		  /* 821C772Ch */ case   49:  		/* rlwimi R11, R24, 7, 19, 26 */
		/* 821C772Ch case   49:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R24);
		/* 821C772Ch case   49:*/		return 0x821C7730;
		  /* 821C7730h */ case   50:  		/* mr R4, R29 */
		/* 821C7730h case   50:*/		regs.R4 = regs.R29;
		/* 821C7730h case   50:*/		return 0x821C7734;
		  /* 821C7734h */ case   51:  		/* stw R11, <#[R29]> */
		/* 821C7734h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821C7734h case   51:*/		return 0x821C7738;
		  /* 821C7738h */ case   52:  		/* bl -324976 */
		/* 821C7738h case   52:*/		regs.LR = 0x821C773C; return 0x821781C8;
		/* 821C7738h case   52:*/		return 0x821C773C;
		  /* 821C773Ch */ case   53:  		/* stw R3, <#[R30 + 44]> */
		/* 821C773Ch case   53:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C773Ch case   53:*/		return 0x821C7740;
		  /* 821C7740h */ case   54:  		/* mr R4, R30 */
		/* 821C7740h case   54:*/		regs.R4 = regs.R30;
		/* 821C7740h case   54:*/		return 0x821C7744;
		  /* 821C7744h */ case   55:  		/* li R5, 0 */
		/* 821C7744h case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7744h case   55:*/		return 0x821C7748;
		  /* 821C7748h */ case   56:  		/* mr R3, R31 */
		/* 821C7748h case   56:*/		regs.R3 = regs.R31;
		/* 821C7748h case   56:*/		return 0x821C774C;
		  /* 821C774Ch */ case   57:  		/* bl -325180 */
		/* 821C774Ch case   57:*/		regs.LR = 0x821C7750; return 0x82178110;
		/* 821C774Ch case   57:*/		return 0x821C7750;
		  /* 821C7750h */ case   58:  		/* mr R4, R3 */
		/* 821C7750h case   58:*/		regs.R4 = regs.R3;
		/* 821C7750h case   58:*/		return 0x821C7754;
		  /* 821C7754h */ case   59:  		/* mr R3, R28 */
		/* 821C7754h case   59:*/		regs.R3 = regs.R28;
		/* 821C7754h case   59:*/		return 0x821C7758;
		  /* 821C7758h */ case   60:  		/* bl -325008 */
		/* 821C7758h case   60:*/		regs.LR = 0x821C775C; return 0x821781C8;
		/* 821C7758h case   60:*/		return 0x821C775C;
		  /* 821C775Ch */ case   61:  		/* li R5, 1 */
		/* 821C775Ch case   61:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C775Ch case   61:*/		return 0x821C7760;
		  /* 821C7760h */ case   62:  		/* mr R4, R30 */
		/* 821C7760h case   62:*/		regs.R4 = regs.R30;
		/* 821C7760h case   62:*/		return 0x821C7764;
		  /* 821C7764h */ case   63:  		/* mr R3, R31 */
		/* 821C7764h case   63:*/		regs.R3 = regs.R31;
		/* 821C7764h case   63:*/		return 0x821C7768;
		  /* 821C7768h */ case   64:  		/* bl -325208 */
		/* 821C7768h case   64:*/		regs.LR = 0x821C776C; return 0x82178110;
		/* 821C7768h case   64:*/		return 0x821C776C;
		  /* 821C776Ch */ case   65:  		/* mr R4, R3 */
		/* 821C776Ch case   65:*/		regs.R4 = regs.R3;
		/* 821C776Ch case   65:*/		return 0x821C7770;
		  /* 821C7770h */ case   66:  		/* mr R3, R27 */
		/* 821C7770h case   66:*/		regs.R3 = regs.R27;
		/* 821C7770h case   66:*/		return 0x821C7774;
		  /* 821C7774h */ case   67:  		/* b 456 */
		/* 821C7774h case   67:*/		return 0x821C793C;
		/* 821C7774h case   67:*/		return 0x821C7778;
	}
	return 0x821C7778;
} // Block from 821C7668h-821C7778h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821C7778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7778);
		  /* 821C7778h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821C7778h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C7778h case    0:*/		return 0x821C777C;
		  /* 821C777Ch */ case    1:  		/* rlwinm. R11, R11, 0, 7, 7 */
		/* 821C777Ch case    1:*/		cpu::op::rlwinm<1,0,7,7>(regs,&regs.R11,regs.R11);
		/* 821C777Ch case    1:*/		return 0x821C7780;
		  /* 821C7780h */ case    2:  		/* bc 12, CR0_EQ, 448 */
		/* 821C7780h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C7940;  }
		/* 821C7780h case    2:*/		return 0x821C7784;
		  /* 821C7784h */ case    3:  		/* lwz R11, <#[R25 + 36]> */
		/* 821C7784h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 821C7784h case    3:*/		return 0x821C7788;
		  /* 821C7788h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C7788h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C7788h case    4:*/		return 0x821C778C;
		  /* 821C778Ch */ case    5:  		/* bc 4, CR0_EQ, 436 */
		/* 821C778Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C7940;  }
		/* 821C778Ch case    5:*/		return 0x821C7790;
		  /* 821C7790h */ case    6:  		/* lwz R11, <#[R25 + 32]> */
		/* 821C7790h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000020) );
		/* 821C7790h case    6:*/		return 0x821C7794;
		  /* 821C7794h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7794h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7794h case    7:*/		return 0x821C7798;
		  /* 821C7798h */ case    8:  		/* addic. R11, R11, -40 */
		/* 821C7798h case    8:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821C7798h case    8:*/		return 0x821C779C;
		  /* 821C779Ch */ case    9:  		/* bc 12, CR0_EQ, 420 */
		/* 821C779Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C7940;  }
		/* 821C779Ch case    9:*/		return 0x821C77A0;
		  /* 821C77A0h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C77A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C77A0h case   10:*/		return 0x821C77A4;
		  /* 821C77A4h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C77A4h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C77A4h case   11:*/		return 0x821C77A8;
		  /* 821C77A8h */ case   12:  		/* cmplwi CR6, R11, 10624 */
		/* 821C77A8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 821C77A8h case   12:*/		return 0x821C77AC;
		  /* 821C77ACh */ case   13:  		/* bc 4, CR6_EQ, 404 */
		/* 821C77ACh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C7940;  }
		/* 821C77ACh case   13:*/		return 0x821C77B0;
		  /* 821C77B0h */ case   14:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C77B0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C77B0h case   14:*/		return 0x821C77B4;
		  /* 821C77B4h */ case   15:  		/* li R30, 0 */
		/* 821C77B4h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821C77B4h case   15:*/		return 0x821C77B8;
		  /* 821C77B8h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821C77B8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C77B8h case   16:*/		return 0x821C77BC;
		  /* 821C77BCh */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 821C77BCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821C77C4;  }
		/* 821C77BCh case   17:*/		return 0x821C77C0;
		  /* 821C77C0h */ case   18:  		/* lwz R30, <#[R11 + 4]> */
		/* 821C77C0h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821C77C0h case   18:*/		return 0x821C77C4;
	}
	return 0x821C77C4;
} // Block from 821C7778h-821C77C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C77C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C77C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C77C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C77C4);
		  /* 821C77C4h */ case    0:  		/* addi R28, R30, 24 */
		/* 821C77C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x18);
		/* 821C77C4h case    0:*/		return 0x821C77C8;
		  /* 821C77C8h */ case    1:  		/* li R8, 1 */
		/* 821C77C8h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C77C8h case    1:*/		return 0x821C77CC;
		  /* 821C77CCh */ case    2:  		/* li R7, 1 */
		/* 821C77CCh case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C77CCh case    2:*/		return 0x821C77D0;
		  /* 821C77D0h */ case    3:  		/* li R6, 104 */
		/* 821C77D0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 821C77D0h case    3:*/		return 0x821C77D4;
		  /* 821C77D4h */ case    4:  		/* mr R5, R28 */
		/* 821C77D4h case    4:*/		regs.R5 = regs.R28;
		/* 821C77D4h case    4:*/		return 0x821C77D8;
		  /* 821C77D8h */ case    5:  		/* mr R4, R30 */
		/* 821C77D8h case    5:*/		regs.R4 = regs.R30;
		/* 821C77D8h case    5:*/		return 0x821C77DC;
		  /* 821C77DCh */ case    6:  		/* mr R3, R31 */
		/* 821C77DCh case    6:*/		regs.R3 = regs.R31;
		/* 821C77DCh case    6:*/		return 0x821C77E0;
		  /* 821C77E0h */ case    7:  		/* bl 381368 */
		/* 821C77E0h case    7:*/		regs.LR = 0x821C77E4; return 0x82224998;
		/* 821C77E0h case    7:*/		return 0x821C77E4;
		  /* 821C77E4h */ case    8:  		/* mr R27, R3 */
		/* 821C77E4h case    8:*/		regs.R27 = regs.R3;
		/* 821C77E4h case    8:*/		return 0x821C77E8;
		  /* 821C77E8h */ case    9:  		/* li R5, 0 */
		/* 821C77E8h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C77E8h case    9:*/		return 0x821C77EC;
		  /* 821C77ECh */ case   10:  		/* mr R4, R16 */
		/* 821C77ECh case   10:*/		regs.R4 = regs.R16;
		/* 821C77ECh case   10:*/		return 0x821C77F0;
		  /* 821C77F0h */ case   11:  		/* mr R3, R31 */
		/* 821C77F0h case   11:*/		regs.R3 = regs.R31;
		/* 821C77F0h case   11:*/		return 0x821C77F4;
		  /* 821C77F4h */ case   12:  		/* bl -325348 */
		/* 821C77F4h case   12:*/		regs.LR = 0x821C77F8; return 0x82178110;
		/* 821C77F4h case   12:*/		return 0x821C77F8;
		  /* 821C77F8h */ case   13:  		/* mr R4, R3 */
		/* 821C77F8h case   13:*/		regs.R4 = regs.R3;
		/* 821C77F8h case   13:*/		return 0x821C77FC;
		  /* 821C77FCh */ case   14:  		/* mr R3, R27 */
		/* 821C77FCh case   14:*/		regs.R3 = regs.R27;
		/* 821C77FCh case   14:*/		return 0x821C7800;
		  /* 821C7800h */ case   15:  		/* bl -325176 */
		/* 821C7800h case   15:*/		regs.LR = 0x821C7804; return 0x821781C8;
		/* 821C7800h case   15:*/		return 0x821C7804;
		  /* 821C7804h */ case   16:  		/* stw R3, <#[R27 + 44]> */
		/* 821C7804h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821C7804h case   16:*/		return 0x821C7808;
		  /* 821C7808h */ case   17:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C7808h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C7808h case   17:*/		return 0x821C780C;
		  /* 821C780Ch */ case   18:  		/* mr R10, R29 */
		/* 821C780Ch case   18:*/		regs.R10 = regs.R29;
		/* 821C780Ch case   18:*/		return 0x821C7810;
		  /* 821C7810h */ case   19:  		/* lwz R9, <#[R31 + 44]> */
		/* 821C7810h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C7810h case   19:*/		return 0x821C7814;
		  /* 821C7814h */ case   20:  		/* ori R9, R9, 4 */
		/* 821C7814h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821C7814h case   20:*/		return 0x821C7818;
		  /* 821C7818h */ case   21:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C7818h case   21:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C7818h case   21:*/		return 0x821C781C;
		  /* 821C781Ch */ case   22:  		/* stw R9, <#[R31 + 44]> */
		/* 821C781Ch case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 821C781Ch case   22:*/		return 0x821C7820;
		  /* 821C7820h */ case   23:  		/* li R29, 0 */
		/* 821C7820h case   23:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821C7820h case   23:*/		return 0x821C7824;
		  /* 821C7824h */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 821C7824h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C7824h case   24:*/		return 0x821C7828;
		  /* 821C7828h */ case   25:  		/* bc 4, CR6_EQ, 108 */
		/* 821C7828h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821C7894;  }
		/* 821C7828h case   25:*/		return 0x821C782C;
		  /* 821C782Ch */ case   26:  		/* cmplwi CR6, R17, 0 */
		/* 821C782Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821C782Ch case   26:*/		return 0x821C7830;
		  /* 821C7830h */ case   27:  		/* bc 12, CR6_EQ, 100 */
		/* 821C7830h case   27:*/		if ( regs.CR[6].eq ) { return 0x821C7894;  }
		/* 821C7830h case   27:*/		return 0x821C7834;
		  /* 821C7834h */ case   28:  		/* li R8, 2 */
		/* 821C7834h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 821C7834h case   28:*/		return 0x821C7838;
		  /* 821C7838h */ case   29:  		/* li R7, 1 */
		/* 821C7838h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C7838h case   29:*/		return 0x821C783C;
		  /* 821C783Ch */ case   30:  		/* li R6, 104 */
		/* 821C783Ch case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 821C783Ch case   30:*/		return 0x821C7840;
	}
	return 0x821C7840;
} // Block from 821C77C4h-821C7840h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821C7840h
// Function '?EnsureLoopHasFooter@Compiler@D3DXShader@@AAAXPAULoop@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7840);
		  /* 821C7840h */ case    0:  		/* mr R5, R28 */
		/* 821C7840h case    0:*/		regs.R5 = regs.R28;
		/* 821C7840h case    0:*/		return 0x821C7844;
		  /* 821C7844h */ case    1:  		/* mr R4, R30 */
		/* 821C7844h case    1:*/		regs.R4 = regs.R30;
		/* 821C7844h case    1:*/		return 0x821C7848;
		  /* 821C7848h */ case    2:  		/* mr R3, R31 */
		/* 821C7848h case    2:*/		regs.R3 = regs.R31;
		/* 821C7848h case    2:*/		return 0x821C784C;
		  /* 821C784Ch */ case    3:  		/* bl 381260 */
		/* 821C784Ch case    3:*/		regs.LR = 0x821C7850; return 0x82224998;
		/* 821C784Ch case    3:*/		return 0x821C7850;
		  /* 821C7850h */ case    4:  		/* mr R29, R3 */
		/* 821C7850h case    4:*/		regs.R29 = regs.R3;
		/* 821C7850h case    4:*/		return 0x821C7854;
		  /* 821C7854h */ case    5:  		/* mr R4, R17 */
		/* 821C7854h case    5:*/		regs.R4 = regs.R17;
		/* 821C7854h case    5:*/		return 0x821C7858;
		  /* 821C7858h */ case    6:  		/* mr R3, R31 */
		/* 821C7858h case    6:*/		regs.R3 = regs.R31;
		/* 821C7858h case    6:*/		return 0x821C785C;
		  /* 821C785Ch */ case    7:  		/* bl -325724 */
		/* 821C785Ch case    7:*/		regs.LR = 0x821C7860; return 0x82178000;
		/* 821C785Ch case    7:*/		return 0x821C7860;
		  /* 821C7860h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821C7860h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7860h case    8:*/		return 0x821C7864;
		  /* 821C7864h */ case    9:  		/* li R4, 0 */
		/* 821C7864h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C7864h case    9:*/		return 0x821C7868;
		  /* 821C7868h */ case   10:  		/* rlwimi R11, R18, 26, 4, 6 */
		/* 821C7868h case   10:*/		cpu::op::rlwimi<0,26,4,6>(regs,&regs.R11,regs.R18);
		/* 821C7868h case   10:*/		return 0x821C786C;
		  /* 821C786Ch */ case   11:  		/* mr R30, R3 */
		/* 821C786Ch case   11:*/		regs.R30 = regs.R3;
		/* 821C786Ch case   11:*/		return 0x821C7870;
		  /* 821C7870h */ case   12:  		/* stw R11, <#[R3]> */
		/* 821C7870h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7870h case   12:*/		return 0x821C7874;
		  /* 821C7874h */ case   13:  		/* bl -327092 */
		/* 821C7874h case   13:*/		regs.LR = 0x821C7878; return 0x82177AC0;
		/* 821C7874h case   13:*/		return 0x821C7878;
		  /* 821C7878h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 821C7878h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C7878h case   14:*/		return 0x821C787C;
		  /* 821C787Ch */ case   15:  		/* mr R3, R29 */
		/* 821C787Ch case   15:*/		regs.R3 = regs.R29;
		/* 821C787Ch case   15:*/		return 0x821C7880;
		  /* 821C7880h */ case   16:  		/* rlwimi R11, R24, 7, 19, 26 */
		/* 821C7880h case   16:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R24);
		/* 821C7880h case   16:*/		return 0x821C7884;
		  /* 821C7884h */ case   17:  		/* mr R4, R30 */
		/* 821C7884h case   17:*/		regs.R4 = regs.R30;
		/* 821C7884h case   17:*/		return 0x821C7888;
		  /* 821C7888h */ case   18:  		/* stw R11, <#[R30]> */
		/* 821C7888h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C7888h case   18:*/		return 0x821C788C;
		  /* 821C788Ch */ case   19:  		/* bl -325316 */
		/* 821C788Ch case   19:*/		regs.LR = 0x821C7890; return 0x821781C8;
		/* 821C788Ch case   19:*/		return 0x821C7890;
		  /* 821C7890h */ case   20:  		/* stw R3, <#[R29 + 44]> */
		/* 821C7890h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821C7890h case   20:*/		return 0x821C7894;
	}
	return 0x821C7894;
} // Block from 821C7840h-821C7894h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C7894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7894);
		  /* 821C7894h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 821C7894h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 821C7894h case    0:*/		return 0x821C7898;
		  /* 821C7898h */ case    1:  		/* bc 4, CR0_EQ, 168 */
		/* 821C7898h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C7940;  }
		/* 821C7898h case    1:*/		return 0x821C789C;
		  /* 821C789Ch */ case    2:  		/* li R8, 0 */
		/* 821C789Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C789Ch case    2:*/		return 0x821C78A0;
		  /* 821C78A0h */ case    3:  		/* li R7, 0 */
		/* 821C78A0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C78A0h case    3:*/		return 0x821C78A4;
		  /* 821C78A4h */ case    4:  		/* li R6, 117 */
		/* 821C78A4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821C78A4h case    4:*/		return 0x821C78A8;
		  /* 821C78A8h */ case    5:  		/* addi R5, R25, 24 */
		/* 821C78A8h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x18);
		/* 821C78A8h case    5:*/		return 0x821C78AC;
		  /* 821C78ACh */ case    6:  		/* mr R4, R25 */
		/* 821C78ACh case    6:*/		regs.R4 = regs.R25;
		/* 821C78ACh case    6:*/		return 0x821C78B0;
		  /* 821C78B0h */ case    7:  		/* mr R3, R31 */
		/* 821C78B0h case    7:*/		regs.R3 = regs.R31;
		/* 821C78B0h case    7:*/		return 0x821C78B4;
		  /* 821C78B4h */ case    8:  		/* bl 381156 */
		/* 821C78B4h case    8:*/		regs.LR = 0x821C78B8; return 0x82224998;
		/* 821C78B4h case    8:*/		return 0x821C78B8;
		  /* 821C78B8h */ case    9:  		/* mr R30, R3 */
		/* 821C78B8h case    9:*/		regs.R30 = regs.R3;
		/* 821C78B8h case    9:*/		return 0x821C78BC;
		  /* 821C78BCh */ case   10:  		/* li R6, 0 */
		/* 821C78BCh case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C78BCh case   10:*/		return 0x821C78C0;
		  /* 821C78C0h */ case   11:  		/* li R5, 0 */
		/* 821C78C0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C78C0h case   11:*/		return 0x821C78C4;
		  /* 821C78C4h */ case   12:  		/* li R4, 117 */
		/* 821C78C4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821C78C4h case   12:*/		return 0x821C78C8;
		  /* 821C78C8h */ case   13:  		/* mr R3, R31 */
		/* 821C78C8h case   13:*/		regs.R3 = regs.R31;
		/* 821C78C8h case   13:*/		return 0x821C78CC;
		  /* 821C78CCh */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C78CCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C78CCh case   14:*/		return 0x821C78D0;
		  /* 821C78D0h */ case   15:  		/* oris R11, R11, 512 */
		/* 821C78D0h case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C78D0h case   15:*/		return 0x821C78D4;
		  /* 821C78D4h */ case   16:  		/* stw R11, <#[R30 + 8]> */
		/* 821C78D4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C78D4h case   16:*/		return 0x821C78D8;
		  /* 821C78D8h */ case   17:  		/* bl -406696 */
		/* 821C78D8h case   17:*/		regs.LR = 0x821C78DC; return 0x82164430;
		/* 821C78D8h case   17:*/		return 0x821C78DC;
		  /* 821C78DCh */ case   18:  		/* addi R11, R30, -16 */
		/* 821C78DCh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821C78DCh case   18:*/		return 0x821C78E0;
		  /* 821C78E0h */ case   19:  		/* mr R4, R27 */
		/* 821C78E0h case   19:*/		regs.R4 = regs.R27;
		/* 821C78E0h case   19:*/		return 0x821C78E4;
		  /* 821C78E4h */ case   20:  		/* add R11, R3, R11 */
		/* 821C78E4h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C78E4h case   20:*/		return 0x821C78E8;
		  /* 821C78E8h */ case   21:  		/* mr R3, R31 */
		/* 821C78E8h case   21:*/		regs.R3 = regs.R31;
		/* 821C78E8h case   21:*/		return 0x821C78EC;
		  /* 821C78ECh */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821C78ECh case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C78ECh case   22:*/		return 0x821C78F0;
		  /* 821C78F0h */ case   23:  		/* stw R18, <#[R11 + 4]> */
		/* 821C78F0h case   23:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000004) );
		/* 821C78F0h case   23:*/		return 0x821C78F4;
		  /* 821C78F4h */ case   24:  		/* ori R10, R10, 7 */
		/* 821C78F4h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x7);
		/* 821C78F4h case   24:*/		return 0x821C78F8;
		  /* 821C78F8h */ case   25:  		/* stw R10, <#[R11]> */
		/* 821C78F8h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C78F8h case   25:*/		return 0x821C78FC;
		  /* 821C78FCh */ case   26:  		/* bl -325884 */
		/* 821C78FCh case   26:*/		regs.LR = 0x821C7900; return 0x82178000;
		/* 821C78FCh case   26:*/		return 0x821C7900;
		  /* 821C7900h */ case   27:  		/* mr R4, R3 */
		/* 821C7900h case   27:*/		regs.R4 = regs.R3;
		/* 821C7900h case   27:*/		return 0x821C7904;
		  /* 821C7904h */ case   28:  		/* mr R3, R30 */
		/* 821C7904h case   28:*/		regs.R3 = regs.R30;
		/* 821C7904h case   28:*/		return 0x821C7908;
		  /* 821C7908h */ case   29:  		/* bl -325440 */
		/* 821C7908h case   29:*/		regs.LR = 0x821C790C; return 0x821781C8;
		/* 821C7908h case   29:*/		return 0x821C790C;
		  /* 821C790Ch */ case   30:  		/* lwz R10, <#[R31 + 48]> */
		/* 821C790Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821C790Ch case   30:*/		return 0x821C7910;
		  /* 821C7910h */ case   31:  		/* lis R11, -1 */
		/* 821C7910h case   31:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821C7910h case   31:*/		return 0x821C7914;
		  /* 821C7914h */ case   32:  		/* rlwinm R10, R10, 0, 0, 15 */
		/* 821C7914h case   32:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R10);
		/* 821C7914h case   32:*/		return 0x821C7918;
		  /* 821C7918h */ case   33:  		/* cmplw CR6, R10, R11 */
		/* 821C7918h case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C7918h case   33:*/		return 0x821C791C;
		  /* 821C791Ch */ case   34:  		/* bc 4, CR6_EQ, 36 */
		/* 821C791Ch case   34:*/		if ( !regs.CR[6].eq ) { return 0x821C7940;  }
		/* 821C791Ch case   34:*/		return 0x821C7920;
		  /* 821C7920h */ case   35:  		/* cmplwi CR6, R29, 0 */
		/* 821C7920h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C7920h case   35:*/		return 0x821C7924;
		  /* 821C7924h */ case   36:  		/* bc 12, CR6_EQ, 28 */
		/* 821C7924h case   36:*/		if ( regs.CR[6].eq ) { return 0x821C7940;  }
		/* 821C7924h case   36:*/		return 0x821C7928;
		  /* 821C7928h */ case   37:  		/* mr R4, R29 */
		/* 821C7928h case   37:*/		regs.R4 = regs.R29;
		/* 821C7928h case   37:*/		return 0x821C792C;
		  /* 821C792Ch */ case   38:  		/* mr R3, R31 */
		/* 821C792Ch case   38:*/		regs.R3 = regs.R31;
		/* 821C792Ch case   38:*/		return 0x821C7930;
		  /* 821C7930h */ case   39:  		/* bl -325936 */
		/* 821C7930h case   39:*/		regs.LR = 0x821C7934; return 0x82178000;
		/* 821C7930h case   39:*/		return 0x821C7934;
		  /* 821C7934h */ case   40:  		/* mr R4, R3 */
		/* 821C7934h case   40:*/		regs.R4 = regs.R3;
		/* 821C7934h case   40:*/		return 0x821C7938;
		  /* 821C7938h */ case   41:  		/* mr R3, R30 */
		/* 821C7938h case   41:*/		regs.R3 = regs.R30;
		/* 821C7938h case   41:*/		return 0x821C793C;
	}
	return 0x821C793C;
} // Block from 821C7894h-821C793Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 821C793Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C793C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C793C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C793C);
		  /* 821C793Ch */ case    0:  		/* bl -325492 */
		/* 821C793Ch case    0:*/		regs.LR = 0x821C7940; return 0x821781C8;
		/* 821C793Ch case    0:*/		return 0x821C7940;
	}
	return 0x821C7940;
} // Block from 821C793Ch-821C7940h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7940);
		  /* 821C7940h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C7940h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C7940h case    0:*/		return 0x821C7944;
		  /* 821C7944h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C7944h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C7944h case    1:*/		return 0x821C7948;
		  /* 821C7948h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7948h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7948h case    2:*/		return 0x821C794C;
		  /* 821C794Ch */ case    3:  		/* bc 4, CR0_EQ, 48 */
		/* 821C794Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C797C;  }
		/* 821C794Ch case    3:*/		return 0x821C7950;
		  /* 821C7950h */ case    4:  		/* mr R25, R11 */
		/* 821C7950h case    4:*/		regs.R25 = regs.R11;
		/* 821C7950h case    4:*/		return 0x821C7954;
		  /* 821C7954h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C7954h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7954h case    5:*/		return 0x821C7958;
		  /* 821C7958h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821C7958h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C797C;  }
		/* 821C7958h case    6:*/		return 0x821C795C;
		  /* 821C795Ch */ case    7:  		/* lis R29, -1 */
		/* 821C795Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821C795Ch case    7:*/		return 0x821C7960;
		  /* 821C7960h */ case    8:  		/* b -968 */
		/* 821C7960h case    8:*/		return 0x821C7598;
		/* 821C7960h case    8:*/		return 0x821C7964;
	}
	return 0x821C7964;
} // Block from 821C7940h-821C7964h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C7964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7964);
		  /* 821C7964h */ case    0:  		/* li R4, 4800 */
		/* 821C7964h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C7964h case    0:*/		return 0x821C7968;
	}
	return 0x821C7968;
} // Block from 821C7964h-821C7968h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7968h
// Function '?HasOneItem@?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7968);
		  /* 821C7968h */ case    0:  		/* mr R3, R31 */
		/* 821C7968h case    0:*/		regs.R3 = regs.R31;
		/* 821C7968h case    0:*/		return 0x821C796C;
		  /* 821C796Ch */ case    1:  		/* bl -482052 */
		/* 821C796Ch case    1:*/		regs.LR = 0x821C7970; return 0x82151E68;
		/* 821C796Ch case    1:*/		return 0x821C7970;
	}
	return 0x821C7970;
} // Block from 821C7968h-821C7970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C7970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7970);
		  /* 821C7970h */ case    0:  		/* li R4, 4800 */
		/* 821C7970h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C7970h case    0:*/		return 0x821C7974;
		  /* 821C7974h */ case    1:  		/* mr R3, R31 */
		/* 821C7974h case    1:*/		regs.R3 = regs.R31;
		/* 821C7974h case    1:*/		return 0x821C7978;
		  /* 821C7978h */ case    2:  		/* bl -482064 */
		/* 821C7978h case    2:*/		regs.LR = 0x821C797C; return 0x82151E68;
		/* 821C7978h case    2:*/		return 0x821C797C;
	}
	return 0x821C797C;
} // Block from 821C7970h-821C797Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C797Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C797C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C797C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C797C);
		  /* 821C797Ch */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 821C797Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 821C797Ch case    0:*/		return 0x821C7980;
		  /* 821C7980h */ case    1:  		/* bc 12, CR0_EQ, 5088 */
		/* 821C7980h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C8D60;  }
		/* 821C7980h case    1:*/		return 0x821C7984;
		  /* 821C7984h */ case    2:  		/* li R21, 0 */
		/* 821C7984h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821C7984h case    2:*/		return 0x821C7988;
		  /* 821C7988h */ case    3:  		/* li R19, 40 */
		/* 821C7988h case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x28);
		/* 821C7988h case    3:*/		return 0x821C798C;
		  /* 821C798Ch */ case    4:  		/* li R15, 0 */
		/* 821C798Ch case    4:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 821C798Ch case    4:*/		return 0x821C7990;
		  /* 821C7990h */ case    5:  		/* cmplwi CR6, R22, 0 */
		/* 821C7990h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C7990h case    5:*/		return 0x821C7994;
		  /* 821C7994h */ case    6:  		/* bc 12, CR6_EQ, 200 */
		/* 821C7994h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C7A5C;  }
		/* 821C7994h case    6:*/		return 0x821C7998;
		  /* 821C7998h */ case    7:  		/* lis R11, -32252 */
		/* 821C7998h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C7998h case    7:*/		return 0x821C799C;
		  /* 821C799Ch */ case    8:  		/* li R5, 4 */
		/* 821C799Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821C799Ch case    8:*/		return 0x821C79A0;
		  /* 821C79A0h */ case    9:  		/* addi R6, R11, -16120 */
		/* 821C79A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC108);
		/* 821C79A0h case    9:*/		return 0x821C79A4;
		  /* 821C79A4h */ case   10:  		/* li R4, 1 */
		/* 821C79A4h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C79A4h case   10:*/		return 0x821C79A8;
		  /* 821C79A8h */ case   11:  		/* mr R3, R31 */
		/* 821C79A8h case   11:*/		regs.R3 = regs.R31;
		/* 821C79A8h case   11:*/		return 0x821C79AC;
		  /* 821C79ACh */ case   12:  		/* bl 384436 */
		/* 821C79ACh case   12:*/		regs.LR = 0x821C79B0; return 0x82225760;
		/* 821C79ACh case   12:*/		return 0x821C79B0;
		  /* 821C79B0h */ case   13:  		/* mr R30, R3 */
		/* 821C79B0h case   13:*/		regs.R30 = regs.R3;
		/* 821C79B0h case   13:*/		return 0x821C79B4;
		  /* 821C79B4h */ case   14:  		/* li R6, 4 */
		/* 821C79B4h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C79B4h case   14:*/		return 0x821C79B8;
	}
	return 0x821C79B8;
} // Block from 821C797Ch-821C79B8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C79B8h
// Function '?HasTwoItems@?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C79B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C79B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C79B8);
		  /* 821C79B8h */ case    0:  		/* li R5, 1 */
		/* 821C79B8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C79B8h case    0:*/		return 0x821C79BC;
		  /* 821C79BCh */ case    1:  		/* li R4, 10 */
		/* 821C79BCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 821C79BCh case    1:*/		return 0x821C79C0;
		  /* 821C79C0h */ case    2:  		/* mr R3, R31 */
		/* 821C79C0h case    2:*/		regs.R3 = regs.R31;
		/* 821C79C0h case    2:*/		return 0x821C79C4;
		  /* 821C79C4h */ case    3:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C79C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C79C4h case    3:*/		return 0x821C79C8;
		  /* 821C79C8h */ case    4:  		/* lwz R10, <#[R30]> */
		/* 821C79C8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C79C8h case    4:*/		return 0x821C79CC;
		  /* 821C79CCh */ case    5:  		/* rlwimi R11, R18, 5, 25, 27 */
		/* 821C79CCh case    5:*/		cpu::op::rlwimi<0,5,25,27>(regs,&regs.R11,regs.R18);
		/* 821C79CCh case    5:*/		return 0x821C79D0;
		  /* 821C79D0h */ case    6:  		/* lwz R9, <#[R30 + 28]> */
		/* 821C79D0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C79D0h case    6:*/		return 0x821C79D4;
		  /* 821C79D4h */ case    7:  		/* oris R10, R10, 8 */
		/* 821C79D4h case    7:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821C79D4h case    7:*/		return 0x821C79D8;
		  /* 821C79D8h */ case    8:  		/* stw R11, <#[R30 + 4]> */
		/* 821C79D8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C79D8h case    8:*/		return 0x821C79DC;
		  /* 821C79DCh */ case    9:  		/* rlwimi R11, R18, 16, 7, 15 */
		/* 821C79DCh case    9:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R11,regs.R18);
		/* 821C79DCh case    9:*/		return 0x821C79E0;
		  /* 821C79E0h */ case   10:  		/* stw R10, <#[R30]> */
		/* 821C79E0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C79E0h case   10:*/		return 0x821C79E4;
		  /* 821C79E4h */ case   11:  		/* lwz R8, <#[R31 + 56]> */
		/* 821C79E4h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000038) );
		/* 821C79E4h case   11:*/		return 0x821C79E8;
		  /* 821C79E8h */ case   12:  		/* lhz R8, <#[R8 + 56]> */
		/* 821C79E8h case   12:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000038) );
		/* 821C79E8h case   12:*/		return 0x821C79EC;
		  /* 821C79ECh */ case   13:  		/* rlwimi R10, R8, 20, 3, 11 */
		/* 821C79ECh case   13:*/		cpu::op::rlwimi<0,20,3,11>(regs,&regs.R10,regs.R8);
		/* 821C79ECh case   13:*/		return 0x821C79F0;
		  /* 821C79F0h */ case   14:  		/* stw R11, <#[R30 + 4]> */
		/* 821C79F0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C79F0h case   14:*/		return 0x821C79F4;
		  /* 821C79F4h */ case   15:  		/* stw R10, <#[R30]> */
		/* 821C79F4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C79F4h case   15:*/		return 0x821C79F8;
		  /* 821C79F8h */ case   16:  		/* lwz R11, <#[R9]> */
		/* 821C79F8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821C79F8h case   16:*/		return 0x821C79FC;
		  /* 821C79FCh */ case   17:  		/* rlwimi R11, R18, 0, 28, 31 */
		/* 821C79FCh case   17:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R18);
		/* 821C79FCh case   17:*/		return 0x821C7A00;
		  /* 821C7A00h */ case   18:  		/* stw R11, <#[R9]> */
		/* 821C7A00h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821C7A00h case   18:*/		return 0x821C7A04;
		  /* 821C7A04h */ case   19:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7A04h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7A04h case   19:*/		return 0x821C7A08;
		  /* 821C7A08h */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C7A08h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C7A08h case   20:*/		return 0x821C7A0C;
		  /* 821C7A0Ch */ case   21:  		/* rlwimi R10, R18, 1, 28, 31 */
		/* 821C7A0Ch case   21:*/		cpu::op::rlwimi<0,1,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7A0Ch case   21:*/		return 0x821C7A10;
		  /* 821C7A10h */ case   22:  		/* stw R10, <#[R11 + 8]> */
		/* 821C7A10h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C7A10h case   22:*/		return 0x821C7A14;
		  /* 821C7A14h */ case   23:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7A14h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7A14h case   23:*/		return 0x821C7A18;
		  /* 821C7A18h */ case   24:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C7A18h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C7A18h case   24:*/		return 0x821C7A1C;
		  /* 821C7A1Ch */ case   25:  		/* rlwimi R10, R18, 2, 28, 31 */
		/* 821C7A1Ch case   25:*/		cpu::op::rlwimi<0,2,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7A1Ch case   25:*/		return 0x821C7A20;
	}
	return 0x821C7A20;
} // Block from 821C79B8h-821C7A20h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C7A20h
// Function '?Contains@?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAA_NUProductTerm@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7A20);
		  /* 821C7A20h */ case    0:  		/* stw R10, <#[R11 + 16]> */
		/* 821C7A20h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C7A20h case    0:*/		return 0x821C7A24;
		  /* 821C7A24h */ case    1:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7A24h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7A24h case    1:*/		return 0x821C7A28;
		  /* 821C7A28h */ case    2:  		/* lwz R10, <#[R11 + 24]> */
		/* 821C7A28h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821C7A28h case    2:*/		return 0x821C7A2C;
		  /* 821C7A2Ch */ case    3:  		/* rlwimi R10, R18, 3, 28, 31 */
		/* 821C7A2Ch case    3:*/		cpu::op::rlwimi<0,3,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7A2Ch case    3:*/		return 0x821C7A30;
		  /* 821C7A30h */ case    4:  		/* stw R10, <#[R11 + 24]> */
		/* 821C7A30h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821C7A30h case    4:*/		return 0x821C7A34;
		  /* 821C7A34h */ case    5:  		/* bl 154636 */
		/* 821C7A34h case    5:*/		regs.LR = 0x821C7A38; return 0x821ED640;
		/* 821C7A34h case    5:*/		return 0x821C7A38;
		  /* 821C7A38h */ case    6:  		/* stw R3, <#[R30 + 20]> */
		/* 821C7A38h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821C7A38h case    6:*/		return 0x821C7A3C;
		  /* 821C7A3Ch */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C7A3Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C7A3Ch case    7:*/		return 0x821C7A40;
		  /* 821C7A40h */ case    8:  		/* subf R11, R11, R30 */
		/* 821C7A40h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C7A40h case    8:*/		return 0x821C7A44;
		  /* 821C7A44h */ case    9:  		/* li R6, 1 */
		/* 821C7A44h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C7A44h case    9:*/		return 0x821C7A48;
		  /* 821C7A48h */ case   10:  		/* divw R4, R11, R19 */
		/* 821C7A48h case   10:*/		cpu::op::divw<0>(regs,&regs.R4,regs.R11,regs.R19);
		/* 821C7A48h case   10:*/		return 0x821C7A4C;
		  /* 821C7A4Ch */ case   11:  		/* li R5, 0 */
		/* 821C7A4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7A4Ch case   11:*/		return 0x821C7A50;
		  /* 821C7A50h */ case   12:  		/* mr R3, R31 */
		/* 821C7A50h case   12:*/		regs.R3 = regs.R31;
		/* 821C7A50h case   12:*/		return 0x821C7A54;
		  /* 821C7A54h */ case   13:  		/* bl 389836 */
		/* 821C7A54h case   13:*/		regs.LR = 0x821C7A58; return 0x82226D20;
		/* 821C7A54h case   13:*/		return 0x821C7A58;
		  /* 821C7A58h */ case   14:  		/* mr R21, R3 */
		/* 821C7A58h case   14:*/		regs.R21 = regs.R3;
		/* 821C7A58h case   14:*/		return 0x821C7A5C;
	}
	return 0x821C7A5C;
} // Block from 821C7A20h-821C7A5Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C7A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7A5C);
		  /* 821C7A5Ch */ case    0:  		/* rlwinm. R20, R20, 0, 24, 31 */
		/* 821C7A5Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R20,regs.R20);
		/* 821C7A5Ch case    0:*/		return 0x821C7A60;
		  /* 821C7A60h */ case    1:  		/* bc 12, CR0_EQ, 200 */
		/* 821C7A60h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C7B28;  }
		/* 821C7A60h case    1:*/		return 0x821C7A64;
		  /* 821C7A64h */ case    2:  		/* lis R11, -32252 */
		/* 821C7A64h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C7A64h case    2:*/		return 0x821C7A68;
		  /* 821C7A68h */ case    3:  		/* li R5, 4 */
		/* 821C7A68h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 821C7A68h case    3:*/		return 0x821C7A6C;
		  /* 821C7A6Ch */ case    4:  		/* addi R6, R11, -16148 */
		/* 821C7A6Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC0EC);
		/* 821C7A6Ch case    4:*/		return 0x821C7A70;
		  /* 821C7A70h */ case    5:  		/* li R4, 1 */
		/* 821C7A70h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C7A70h case    5:*/		return 0x821C7A74;
		  /* 821C7A74h */ case    6:  		/* mr R3, R31 */
		/* 821C7A74h case    6:*/		regs.R3 = regs.R31;
		/* 821C7A74h case    6:*/		return 0x821C7A78;
		  /* 821C7A78h */ case    7:  		/* bl 384232 */
		/* 821C7A78h case    7:*/		regs.LR = 0x821C7A7C; return 0x82225760;
		/* 821C7A78h case    7:*/		return 0x821C7A7C;
		  /* 821C7A7Ch */ case    8:  		/* mr R30, R3 */
		/* 821C7A7Ch case    8:*/		regs.R30 = regs.R3;
		/* 821C7A7Ch case    8:*/		return 0x821C7A80;
		  /* 821C7A80h */ case    9:  		/* li R6, 4 */
		/* 821C7A80h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C7A80h case    9:*/		return 0x821C7A84;
		  /* 821C7A84h */ case   10:  		/* li R5, 1 */
		/* 821C7A84h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C7A84h case   10:*/		return 0x821C7A88;
		  /* 821C7A88h */ case   11:  		/* li R4, 10 */
		/* 821C7A88h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 821C7A88h case   11:*/		return 0x821C7A8C;
		  /* 821C7A8Ch */ case   12:  		/* mr R3, R31 */
		/* 821C7A8Ch case   12:*/		regs.R3 = regs.R31;
		/* 821C7A8Ch case   12:*/		return 0x821C7A90;
		  /* 821C7A90h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 821C7A90h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C7A90h case   13:*/		return 0x821C7A94;
		  /* 821C7A94h */ case   14:  		/* lwz R10, <#[R30 + 4]> */
		/* 821C7A94h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C7A94h case   14:*/		return 0x821C7A98;
		  /* 821C7A98h */ case   15:  		/* oris R11, R11, 8 */
		/* 821C7A98h case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821C7A98h case   15:*/		return 0x821C7A9C;
		  /* 821C7A9Ch */ case   16:  		/* lwz R9, <#[R30 + 28]> */
		/* 821C7A9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7A9Ch case   16:*/		return 0x821C7AA0;
		  /* 821C7AA0h */ case   17:  		/* rlwimi R10, R18, 5, 25, 27 */
		/* 821C7AA0h case   17:*/		cpu::op::rlwimi<0,5,25,27>(regs,&regs.R10,regs.R18);
		/* 821C7AA0h case   17:*/		return 0x821C7AA4;
		  /* 821C7AA4h */ case   18:  		/* stw R11, <#[R30]> */
		/* 821C7AA4h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C7AA4h case   18:*/		return 0x821C7AA8;
		  /* 821C7AA8h */ case   19:  		/* stw R10, <#[R30 + 4]> */
		/* 821C7AA8h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C7AA8h case   19:*/		return 0x821C7AAC;
		  /* 821C7AACh */ case   20:  		/* rlwimi R10, R18, 16, 7, 15 */
		/* 821C7AACh case   20:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R10,regs.R18);
		/* 821C7AACh case   20:*/		return 0x821C7AB0;
		  /* 821C7AB0h */ case   21:  		/* lwz R8, <#[R31 + 56]> */
		/* 821C7AB0h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000038) );
		/* 821C7AB0h case   21:*/		return 0x821C7AB4;
		  /* 821C7AB4h */ case   22:  		/* lhz R8, <#[R8 + 58]> */
		/* 821C7AB4h case   22:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000003A) );
		/* 821C7AB4h case   22:*/		return 0x821C7AB8;
		  /* 821C7AB8h */ case   23:  		/* rlwimi R11, R8, 20, 3, 11 */
		/* 821C7AB8h case   23:*/		cpu::op::rlwimi<0,20,3,11>(regs,&regs.R11,regs.R8);
		/* 821C7AB8h case   23:*/		return 0x821C7ABC;
		  /* 821C7ABCh */ case   24:  		/* stw R11, <#[R30]> */
		/* 821C7ABCh case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C7ABCh case   24:*/		return 0x821C7AC0;
		  /* 821C7AC0h */ case   25:  		/* stw R10, <#[R30 + 4]> */
		/* 821C7AC0h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821C7AC0h case   25:*/		return 0x821C7AC4;
		  /* 821C7AC4h */ case   26:  		/* lwz R11, <#[R9]> */
		/* 821C7AC4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821C7AC4h case   26:*/		return 0x821C7AC8;
		  /* 821C7AC8h */ case   27:  		/* rlwimi R11, R18, 0, 28, 31 */
		/* 821C7AC8h case   27:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R18);
		/* 821C7AC8h case   27:*/		return 0x821C7ACC;
		  /* 821C7ACCh */ case   28:  		/* stw R11, <#[R9]> */
		/* 821C7ACCh case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821C7ACCh case   28:*/		return 0x821C7AD0;
		  /* 821C7AD0h */ case   29:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7AD0h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7AD0h case   29:*/		return 0x821C7AD4;
		  /* 821C7AD4h */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C7AD4h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C7AD4h case   30:*/		return 0x821C7AD8;
	}
	return 0x821C7AD8;
} // Block from 821C7A5Ch-821C7AD8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821C7AD8h
// Function '?Find@?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAIUProductTerm@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7AD8);
		  /* 821C7AD8h */ case    0:  		/* rlwimi R10, R18, 1, 28, 31 */
		/* 821C7AD8h case    0:*/		cpu::op::rlwimi<0,1,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7AD8h case    0:*/		return 0x821C7ADC;
		  /* 821C7ADCh */ case    1:  		/* stw R10, <#[R11 + 8]> */
		/* 821C7ADCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C7ADCh case    1:*/		return 0x821C7AE0;
		  /* 821C7AE0h */ case    2:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7AE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7AE0h case    2:*/		return 0x821C7AE4;
		  /* 821C7AE4h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C7AE4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C7AE4h case    3:*/		return 0x821C7AE8;
		  /* 821C7AE8h */ case    4:  		/* rlwimi R10, R18, 2, 28, 31 */
		/* 821C7AE8h case    4:*/		cpu::op::rlwimi<0,2,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7AE8h case    4:*/		return 0x821C7AEC;
		  /* 821C7AECh */ case    5:  		/* stw R10, <#[R11 + 16]> */
		/* 821C7AECh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C7AECh case    5:*/		return 0x821C7AF0;
		  /* 821C7AF0h */ case    6:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C7AF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C7AF0h case    6:*/		return 0x821C7AF4;
		  /* 821C7AF4h */ case    7:  		/* lwz R10, <#[R11 + 24]> */
		/* 821C7AF4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821C7AF4h case    7:*/		return 0x821C7AF8;
		  /* 821C7AF8h */ case    8:  		/* rlwimi R10, R18, 3, 28, 31 */
		/* 821C7AF8h case    8:*/		cpu::op::rlwimi<0,3,28,31>(regs,&regs.R10,regs.R18);
		/* 821C7AF8h case    8:*/		return 0x821C7AFC;
		  /* 821C7AFCh */ case    9:  		/* stw R10, <#[R11 + 24]> */
		/* 821C7AFCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821C7AFCh case    9:*/		return 0x821C7B00;
		  /* 821C7B00h */ case   10:  		/* bl 154432 */
		/* 821C7B00h case   10:*/		regs.LR = 0x821C7B04; return 0x821ED640;
		/* 821C7B00h case   10:*/		return 0x821C7B04;
		  /* 821C7B04h */ case   11:  		/* stw R3, <#[R30 + 20]> */
		/* 821C7B04h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821C7B04h case   11:*/		return 0x821C7B08;
		  /* 821C7B08h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C7B08h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C7B08h case   12:*/		return 0x821C7B0C;
		  /* 821C7B0Ch */ case   13:  		/* subf R11, R11, R30 */
		/* 821C7B0Ch case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C7B0Ch case   13:*/		return 0x821C7B10;
		  /* 821C7B10h */ case   14:  		/* li R6, 1 */
		/* 821C7B10h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C7B10h case   14:*/		return 0x821C7B14;
		  /* 821C7B14h */ case   15:  		/* divw R4, R11, R19 */
		/* 821C7B14h case   15:*/		cpu::op::divw<0>(regs,&regs.R4,regs.R11,regs.R19);
		/* 821C7B14h case   15:*/		return 0x821C7B18;
		  /* 821C7B18h */ case   16:  		/* li R5, 0 */
		/* 821C7B18h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7B18h case   16:*/		return 0x821C7B1C;
		  /* 821C7B1Ch */ case   17:  		/* mr R3, R31 */
		/* 821C7B1Ch case   17:*/		regs.R3 = regs.R31;
		/* 821C7B1Ch case   17:*/		return 0x821C7B20;
		  /* 821C7B20h */ case   18:  		/* bl 389632 */
		/* 821C7B20h case   18:*/		regs.LR = 0x821C7B24; return 0x82226D20;
		/* 821C7B20h case   18:*/		return 0x821C7B24;
		  /* 821C7B24h */ case   19:  		/* mr R15, R3 */
		/* 821C7B24h case   19:*/		regs.R15 = regs.R3;
		/* 821C7B24h case   19:*/		return 0x821C7B28;
	}
	return 0x821C7B28;
} // Block from 821C7AD8h-821C7B28h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C7B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7B28);
		  /* 821C7B28h */ case    0:  		/* lis R11, -32256 */
		/* 821C7B28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C7B28h case    0:*/		return 0x821C7B2C;
		  /* 821C7B2Ch */ case    1:  		/* lis R10, -32256 */
		/* 821C7B2Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821C7B2Ch case    1:*/		return 0x821C7B30;
		  /* 821C7B30h */ case    2:  		/* li R4, 2 */
		/* 821C7B30h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C7B30h case    2:*/		return 0x821C7B34;
		  /* 821C7B34h */ case    3:  		/* mr R3, R31 */
		/* 821C7B34h case    3:*/		regs.R3 = regs.R31;
		/* 821C7B34h case    3:*/		return 0x821C7B38;
		  /* 821C7B38h */ case    4:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821C7B38h case    4:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821C7B38h case    4:*/		return 0x821C7B3C;
		  /* 821C7B3Ch */ case    5:  		/* lfs FR30, <#[R10 + 1792]> */
		/* 821C7B3Ch case    5:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R10 + 0x00000700) );
		/* 821C7B3Ch case    5:*/		return 0x821C7B40;
		  /* 821C7B40h */ case    6:  		/* fmr FR4, FR31 */
		/* 821C7B40h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C7B40h case    6:*/		return 0x821C7B44;
		  /* 821C7B44h */ case    7:  		/* fmr FR3, FR31 */
		/* 821C7B44h case    7:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C7B44h case    7:*/		return 0x821C7B48;
		  /* 821C7B48h */ case    8:  		/* fmr FR2, FR30 */
		/* 821C7B48h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821C7B48h case    8:*/		return 0x821C7B4C;
		  /* 821C7B4Ch */ case    9:  		/* fmr FR1, FR31 */
		/* 821C7B4Ch case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C7B4Ch case    9:*/		return 0x821C7B50;
		  /* 821C7B50h */ case   10:  		/* bl 405512 */
		/* 821C7B50h case   10:*/		regs.LR = 0x821C7B54; return 0x8222AB58;
		/* 821C7B50h case   10:*/		return 0x821C7B54;
		  /* 821C7B54h */ case   11:  		/* mr R14, R3 */
		/* 821C7B54h case   11:*/		regs.R14 = regs.R3;
		/* 821C7B54h case   11:*/		return 0x821C7B58;
		  /* 821C7B58h */ case   12:  		/* stw R3, <#[R1 + 80]> */
		/* 821C7B58h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821C7B58h case   12:*/		return 0x821C7B5C;
		  /* 821C7B5Ch */ case   13:  		/* cmplwi CR6, R22, 0 */
		/* 821C7B5Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C7B5Ch case   13:*/		return 0x821C7B60;
		  /* 821C7B60h */ case   14:  		/* bc 12, CR6_EQ, 1400 */
		/* 821C7B60h case   14:*/		if ( regs.CR[6].eq ) { return 0x821C80D8;  }
		/* 821C7B60h case   14:*/		return 0x821C7B64;
		  /* 821C7B64h */ case   15:  		/* lwz R29, <#[R31 + 4]> */
		/* 821C7B64h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821C7B64h case   15:*/		return 0x821C7B68;
		  /* 821C7B68h */ case   16:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821C7B68h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821C7B68h case   16:*/		return 0x821C7B6C;
		  /* 821C7B6Ch */ case   17:  		/* bc 4, CR0_EQ, 1388 */
		/* 821C7B6Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x821C80D8;  }
		/* 821C7B6Ch case   17:*/		return 0x821C7B70;
		  /* 821C7B70h */ case   18:  		/* cmplwi CR0, R29, 0 */
		/* 821C7B70h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 821C7B70h case   18:*/		return 0x821C7B74;
		  /* 821C7B74h */ case   19:  		/* bc 12, CR0_EQ, 1380 */
		/* 821C7B74h case   19:*/		if ( regs.CR[0].eq ) { return 0x821C80D8;  }
		/* 821C7B74h case   19:*/		return 0x821C7B78;
		  /* 821C7B78h */ case   20:  		/* lwz R11, <#[R29 + 68]> */
		/* 821C7B78h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000044) );
		/* 821C7B78h case   20:*/		return 0x821C7B7C;
		  /* 821C7B7Ch */ case   21:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821C7B7Ch case   21:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821C7B7Ch case   21:*/		return 0x821C7B80;
		  /* 821C7B80h */ case   22:  		/* bc 12, CR0_EQ, 1344 */
		/* 821C7B80h case   22:*/		if ( regs.CR[0].eq ) { return 0x821C80C0;  }
		/* 821C7B80h case   22:*/		return 0x821C7B84;
		  /* 821C7B84h */ case   23:  		/* lwz R11, <#[R29 + 8]> */
		/* 821C7B84h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C7B84h case   23:*/		return 0x821C7B88;
		  /* 821C7B88h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 821C7B88h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7B88h case   24:*/		return 0x821C7B8C;
		  /* 821C7B8Ch */ case   25:  		/* bc 12, CR6_EQ, 8 */
		/* 821C7B8Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x821C7B94;  }
		/* 821C7B8Ch case   25:*/		return 0x821C7B90;
		  /* 821C7B90h */ case   26:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C7B90h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C7B90h case   26:*/		return 0x821C7B94;
	}
	return 0x821C7B94;
} // Block from 821C7B28h-821C7B94h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C7B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7B94);
		  /* 821C7B94h */ case    0:  		/* lwz R11, <#[R11 + 28]> */
		/* 821C7B94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821C7B94h case    0:*/		return 0x821C7B98;
	}
	return 0x821C7B98;
} // Block from 821C7B94h-821C7B98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7B98h
// Function '?Remove@?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAXUProductTerm@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7B98);
		  /* 821C7B98h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7B98h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7B98h case    0:*/		return 0x821C7B9C;
		  /* 821C7B9Ch */ case    1:  		/* bc 4, CR0_EQ, 2464 */
		/* 821C7B9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C853C;  }
		/* 821C7B9Ch case    1:*/		return 0x821C7BA0;
		  /* 821C7BA0h */ case    2:  		/* mr R22, R11 */
		/* 821C7BA0h case    2:*/		regs.R22 = regs.R11;
		/* 821C7BA0h case    2:*/		return 0x821C7BA4;
		  /* 821C7BA4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821C7BA4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C7BA4h case    3:*/		return 0x821C7BA8;
		  /* 821C7BA8h */ case    4:  		/* bc 12, CR0_EQ, 2452 */
		/* 821C7BA8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C853C;  }
		/* 821C7BA8h case    4:*/		return 0x821C7BAC;
		  /* 821C7BACh */ case    5:  		/* lwz R11, <#[R22 + 8]> */
		/* 821C7BACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821C7BACh case    5:*/		return 0x821C7BB0;
		  /* 821C7BB0h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C7BB0h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C7BB0h case    6:*/		return 0x821C7BB4;
		  /* 821C7BB4h */ case    7:  		/* cmplwi CR6, R11, 14976 */
		/* 821C7BB4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 821C7BB4h case    7:*/		return 0x821C7BB8;
		  /* 821C7BB8h */ case    8:  		/* bc 4, CR6_EQ, 60 */
		/* 821C7BB8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821C7BF4;  }
		/* 821C7BB8h case    8:*/		return 0x821C7BBC;
		  /* 821C7BBCh */ case    9:  		/* li R6, 0 */
		/* 821C7BBCh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C7BBCh case    9:*/		return 0x821C7BC0;
		  /* 821C7BC0h */ case   10:  		/* li R5, 0 */
		/* 821C7BC0h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7BC0h case   10:*/		return 0x821C7BC4;
		  /* 821C7BC4h */ case   11:  		/* li R4, 117 */
		/* 821C7BC4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821C7BC4h case   11:*/		return 0x821C7BC8;
		  /* 821C7BC8h */ case   12:  		/* mr R3, R31 */
		/* 821C7BC8h case   12:*/		regs.R3 = regs.R31;
		/* 821C7BC8h case   12:*/		return 0x821C7BCC;
		  /* 821C7BCCh */ case   13:  		/* bl -407452 */
		/* 821C7BCCh case   13:*/		regs.LR = 0x821C7BD0; return 0x82164430;
		/* 821C7BCCh case   13:*/		return 0x821C7BD0;
		  /* 821C7BD0h */ case   14:  		/* addi R11, R22, -16 */
		/* 821C7BD0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFF0);
		/* 821C7BD0h case   14:*/		return 0x821C7BD4;
		  /* 821C7BD4h */ case   15:  		/* add R11, R3, R11 */
		/* 821C7BD4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C7BD4h case   15:*/		return 0x821C7BD8;
		  /* 821C7BD8h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 821C7BD8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C7BD8h case   16:*/		return 0x821C7BDC;
		  /* 821C7BDCh */ case   17:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821C7BDCh case   17:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821C7BDCh case   17:*/		return 0x821C7BE0;
		  /* 821C7BE0h */ case   18:  		/* cmplwi CR6, R10, 7 */
		/* 821C7BE0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 821C7BE0h case   18:*/		return 0x821C7BE4;
		  /* 821C7BE4h */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 821C7BE4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821C7BF4;  }
		/* 821C7BE4h case   19:*/		return 0x821C7BE8;
		  /* 821C7BE8h */ case   20:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C7BE8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C7BE8h case   20:*/		return 0x821C7BEC;
		  /* 821C7BECh */ case   21:  		/* cmpwi CR6, R11, 2 */
		/* 821C7BECh case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821C7BECh case   21:*/		return 0x821C7BF0;
		  /* 821C7BF0h */ case   22:  		/* bc 12, CR6_EQ, 32 */
		/* 821C7BF0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821C7C10;  }
		/* 821C7BF0h case   22:*/		return 0x821C7BF4;
	}
	return 0x821C7BF4;
} // Block from 821C7B98h-821C7BF4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821C7BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7BF4);
		  /* 821C7BF4h */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 821C7BF4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 821C7BF4h case    0:*/		return 0x821C7BF8;
		  /* 821C7BF8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C7BF8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C7BF8h case    1:*/		return 0x821C7BFC;
		  /* 821C7BFCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7BFCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7BFCh case    2:*/		return 0x821C7C00;
		  /* 821C7C00h */ case    3:  		/* bc 4, CR0_EQ, 2364 */
		/* 821C7C00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C853C;  }
		/* 821C7C00h case    3:*/		return 0x821C7C04;
		  /* 821C7C04h */ case    4:  		/* mr R22, R11 */
		/* 821C7C04h case    4:*/		regs.R22 = regs.R11;
		/* 821C7C04h case    4:*/		return 0x821C7C08;
		  /* 821C7C08h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C7C08h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C7C08h case    5:*/		return 0x821C7C0C;
		  /* 821C7C0Ch */ case    6:  		/* bc 4, CR6_EQ, -96 */
		/* 821C7C0Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C7BAC;  }
		/* 821C7C0Ch case    6:*/		return 0x821C7C10;
	}
	return 0x821C7C10;
} // Block from 821C7BF4h-821C7C10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C7C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7C10);
		  /* 821C7C10h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821C7C10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C7C10h case    0:*/		return 0x821C7C14;
		  /* 821C7C14h */ case    1:  		/* bc 12, CR6_EQ, 2344 */
		/* 821C7C14h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C853C;  }
		/* 821C7C14h case    1:*/		return 0x821C7C18;
		  /* 821C7C18h */ case    2:  		/* lwz R11, <#[R29 + 36]> */
		/* 821C7C18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821C7C18h case    2:*/		return 0x821C7C1C;
		  /* 821C7C1Ch */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C7C1Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C7C1Ch case    3:*/		return 0x821C7C20;
		  /* 821C7C20h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821C7C20h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C7C2C;  }
		/* 821C7C20h case    4:*/		return 0x821C7C24;
		  /* 821C7C24h */ case    5:  		/* li R23, 0 */
		/* 821C7C24h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821C7C24h case    5:*/		return 0x821C7C28;
		  /* 821C7C28h */ case    6:  		/* b 16 */
		/* 821C7C28h case    6:*/		return 0x821C7C38;
		/* 821C7C28h case    6:*/		return 0x821C7C2C;
	}
	return 0x821C7C2C;
} // Block from 821C7C10h-821C7C2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C7C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7C2C);
		  /* 821C7C2Ch */ case    0:  		/* lwz R11, <#[R29 + 32]> */
		/* 821C7C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 821C7C2Ch case    0:*/		return 0x821C7C30;
		  /* 821C7C30h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7C30h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7C30h case    1:*/		return 0x821C7C34;
		  /* 821C7C34h */ case    2:  		/* addi R23, R11, -40 */
		/* 821C7C34h case    2:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0xFFFFFFD8);
		/* 821C7C34h case    2:*/		return 0x821C7C38;
	}
	return 0x821C7C38;
} // Block from 821C7C2Ch-821C7C38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C7C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7C38);
		  /* 821C7C38h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 821C7C38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821C7C38h case    0:*/		return 0x821C7C3C;
		  /* 821C7C3Ch */ case    1:  		/* li R24, 0 */
		/* 821C7C3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821C7C3Ch case    1:*/		return 0x821C7C40;
		  /* 821C7C40h */ case    2:  		/* stw R29, <#[R31 + 564]> */
		/* 821C7C40h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000234) );
		/* 821C7C40h case    2:*/		return 0x821C7C44;
		  /* 821C7C44h */ case    3:  		/* li R25, 0 */
		/* 821C7C44h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821C7C44h case    3:*/		return 0x821C7C48;
		  /* 821C7C48h */ case    4:  		/* lwz R11, <#[R11]> */
		/* 821C7C48h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C7C48h case    4:*/		return 0x821C7C4C;
		  /* 821C7C4Ch */ case    5:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821C7C4Ch case    5:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821C7C4Ch case    5:*/		return 0x821C7C50;
		  /* 821C7C50h */ case    6:  		/* bc 12, CR0_EQ, 128 */
		/* 821C7C50h case    6:*/		if ( regs.CR[0].eq ) { return 0x821C7CD0;  }
		/* 821C7C50h case    6:*/		return 0x821C7C54;
		  /* 821C7C54h */ case    7:  		/* lwz R11, <#[R29 + 20]> */
		/* 821C7C54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821C7C54h case    7:*/		return 0x821C7C58;
		  /* 821C7C58h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C7C58h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C7C58h case    8:*/		return 0x821C7C5C;
		  /* 821C7C5Ch */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821C7C5Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C7C68;  }
		/* 821C7C5Ch case    9:*/		return 0x821C7C60;
		  /* 821C7C60h */ case   10:  		/* li R26, 0 */
		/* 821C7C60h case   10:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821C7C60h case   10:*/		return 0x821C7C64;
		  /* 821C7C64h */ case   11:  		/* b 16 */
		/* 821C7C64h case   11:*/		return 0x821C7C74;
		/* 821C7C64h case   11:*/		return 0x821C7C68;
	}
	return 0x821C7C68;
} // Block from 821C7C38h-821C7C68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C7C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7C68);
		  /* 821C7C68h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 821C7C68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821C7C68h case    0:*/		return 0x821C7C6C;
		  /* 821C7C6Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7C6Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7C6Ch case    1:*/		return 0x821C7C70;
		  /* 821C7C70h */ case    2:  		/* addi R26, R11, -40 */
		/* 821C7C70h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 821C7C70h case    2:*/		return 0x821C7C74;
	}
	return 0x821C7C74;
} // Block from 821C7C68h-821C7C74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C7C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7C74);
		  /* 821C7C74h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C7C74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C7C74h case    0:*/		return 0x821C7C78;
		  /* 821C7C78h */ case    1:  		/* lis R10, -1 */
		/* 821C7C78h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821C7C78h case    1:*/		return 0x821C7C7C;
		  /* 821C7C7Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C7C7Ch case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C7C7Ch case    2:*/		return 0x821C7C80;
		  /* 821C7C80h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821C7C80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C7C80h case    3:*/		return 0x821C7C84;
		  /* 821C7C84h */ case    4:  		/* bc 4, CR6_EQ, 188 */
		/* 821C7C84h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821C7D40;  }
		/* 821C7C84h case    4:*/		return 0x821C7C88;
		  /* 821C7C88h */ case    5:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821C7C88h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821C7C88h case    5:*/		return 0x821C7C8C;
		  /* 821C7C8Ch */ case    6:  		/* mr R24, R26 */
		/* 821C7C8Ch case    6:*/		regs.R24 = regs.R26;
		/* 821C7C8Ch case    6:*/		return 0x821C7C90;
		  /* 821C7C90h */ case    7:  		/* lwz R11, <#[R11 + 36]> */
		/* 821C7C90h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821C7C90h case    7:*/		return 0x821C7C94;
		  /* 821C7C94h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7C94h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7C94h case    8:*/		return 0x821C7C98;
		  /* 821C7C98h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821C7C98h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C7CA4;  }
		/* 821C7C98h case    9:*/		return 0x821C7C9C;
		  /* 821C7C9Ch */ case   10:  		/* li R25, 0 */
		/* 821C7C9Ch case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821C7C9Ch case   10:*/		return 0x821C7CA0;
		  /* 821C7CA0h */ case   11:  		/* b 12 */
		/* 821C7CA0h case   11:*/		return 0x821C7CAC;
		/* 821C7CA0h case   11:*/		return 0x821C7CA4;
	}
	return 0x821C7CA4;
} // Block from 821C7C74h-821C7CA4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C7CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7CA4);
		  /* 821C7CA4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7CA4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7CA4h case    0:*/		return 0x821C7CA8;
		  /* 821C7CA8h */ case    1:  		/* addi R25, R11, -40 */
		/* 821C7CA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFD8);
		/* 821C7CA8h case    1:*/		return 0x821C7CAC;
	}
	return 0x821C7CAC;
} // Block from 821C7CA4h-821C7CACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C7CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7CAC);
		  /* 821C7CACh */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C7CACh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C7CACh case    0:*/		return 0x821C7CB0;
		  /* 821C7CB0h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821C7CB0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821C7CB0h case    1:*/		return 0x821C7CB4;
		  /* 821C7CB4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C7CB4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C7CB4h case    2:*/		return 0x821C7CB8;
		  /* 821C7CB8h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821C7CB8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821C7CC4;  }
		/* 821C7CB8h case    3:*/		return 0x821C7CBC;
		  /* 821C7CBCh */ case    4:  		/* li R26, 0 */
		/* 821C7CBCh case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821C7CBCh case    4:*/		return 0x821C7CC0;
	}
	return 0x821C7CC0;
} // Block from 821C7CACh-821C7CC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C7CC0h
// Function '?Remove@?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAXPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7CC0);
		  /* 821C7CC0h */ case    0:  		/* b 128 */
		/* 821C7CC0h case    0:*/		return 0x821C7D40;
		/* 821C7CC0h case    0:*/		return 0x821C7CC4;
	}
	return 0x821C7CC4;
} // Block from 821C7CC0h-821C7CC4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C7CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7CC4);
		  /* 821C7CC4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C7CC4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C7CC4h case    0:*/		return 0x821C7CC8;
		  /* 821C7CC8h */ case    1:  		/* addi R26, R11, -40 */
		/* 821C7CC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 821C7CC8h case    1:*/		return 0x821C7CCC;
		  /* 821C7CCCh */ case    2:  		/* b 116 */
		/* 821C7CCCh case    2:*/		return 0x821C7D40;
		/* 821C7CCCh case    2:*/		return 0x821C7CD0;
	}
	return 0x821C7CD0;
} // Block from 821C7CC4h-821C7CD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C7CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7CD0);
		  /* 821C7CD0h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C7CD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C7CD0h case    0:*/		return 0x821C7CD4;
		  /* 821C7CD4h */ case    1:  		/* lis R10, -1 */
		/* 821C7CD4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821C7CD4h case    1:*/		return 0x821C7CD8;
		  /* 821C7CD8h */ case    2:  		/* mr R26, R16 */
		/* 821C7CD8h case    2:*/		regs.R26 = regs.R16;
		/* 821C7CD8h case    2:*/		return 0x821C7CDC;
		  /* 821C7CDCh */ case    3:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C7CDCh case    3:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C7CDCh case    3:*/		return 0x821C7CE0;
		  /* 821C7CE0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821C7CE0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C7CE0h case    4:*/		return 0x821C7CE4;
		  /* 821C7CE4h */ case    5:  		/* bc 4, CR6_EQ, 92 */
		/* 821C7CE4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C7D40;  }
		/* 821C7CE4h case    5:*/		return 0x821C7CE8;
		  /* 821C7CE8h */ case    6:  		/* mr R4, R29 */
		/* 821C7CE8h case    6:*/		regs.R4 = regs.R29;
		/* 821C7CE8h case    6:*/		return 0x821C7CEC;
		  /* 821C7CECh */ case    7:  		/* mr R3, R31 */
		/* 821C7CECh case    7:*/		regs.R3 = regs.R31;
		/* 821C7CECh case    7:*/		return 0x821C7CF0;
		  /* 821C7CF0h */ case    8:  		/* bl 380240 */
		/* 821C7CF0h case    8:*/		regs.LR = 0x821C7CF4; return 0x82224A40;
		/* 821C7CF0h case    8:*/		return 0x821C7CF4;
		  /* 821C7CF4h */ case    9:  		/* mr R25, R3 */
		/* 821C7CF4h case    9:*/		regs.R25 = regs.R3;
		/* 821C7CF4h case    9:*/		return 0x821C7CF8;
		  /* 821C7CF8h */ case   10:  		/* li R5, 0 */
		/* 821C7CF8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7CF8h case   10:*/		return 0x821C7CFC;
		  /* 821C7CFCh */ case   11:  		/* mr R4, R17 */
		/* 821C7CFCh case   11:*/		regs.R4 = regs.R17;
		/* 821C7CFCh case   11:*/		return 0x821C7D00;
		  /* 821C7D00h */ case   12:  		/* mr R3, R31 */
		/* 821C7D00h case   12:*/		regs.R3 = regs.R31;
		/* 821C7D00h case   12:*/		return 0x821C7D04;
		  /* 821C7D04h */ case   13:  		/* bl -326644 */
		/* 821C7D04h case   13:*/		regs.LR = 0x821C7D08; return 0x82178110;
		/* 821C7D04h case   13:*/		return 0x821C7D08;
		  /* 821C7D08h */ case   14:  		/* mr R4, R3 */
		/* 821C7D08h case   14:*/		regs.R4 = regs.R3;
		/* 821C7D08h case   14:*/		return 0x821C7D0C;
		  /* 821C7D0Ch */ case   15:  		/* mr R3, R25 */
		/* 821C7D0Ch case   15:*/		regs.R3 = regs.R25;
		/* 821C7D0Ch case   15:*/		return 0x821C7D10;
		  /* 821C7D10h */ case   16:  		/* bl -326472 */
		/* 821C7D10h case   16:*/		regs.LR = 0x821C7D14; return 0x821781C8;
		/* 821C7D10h case   16:*/		return 0x821C7D14;
		  /* 821C7D14h */ case   17:  		/* mr R4, R29 */
		/* 821C7D14h case   17:*/		regs.R4 = regs.R29;
		/* 821C7D14h case   17:*/		return 0x821C7D18;
		  /* 821C7D18h */ case   18:  		/* mr R3, R31 */
		/* 821C7D18h case   18:*/		regs.R3 = regs.R31;
		/* 821C7D18h case   18:*/		return 0x821C7D1C;
		  /* 821C7D1Ch */ case   19:  		/* bl 380196 */
		/* 821C7D1Ch case   19:*/		regs.LR = 0x821C7D20; return 0x82224A40;
		/* 821C7D1Ch case   19:*/		return 0x821C7D20;
		  /* 821C7D20h */ case   20:  		/* mr R24, R3 */
		/* 821C7D20h case   20:*/		regs.R24 = regs.R3;
		/* 821C7D20h case   20:*/		return 0x821C7D24;
		  /* 821C7D24h */ case   21:  		/* li R5, 1 */
		/* 821C7D24h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C7D24h case   21:*/		return 0x821C7D28;
		  /* 821C7D28h */ case   22:  		/* mr R4, R17 */
		/* 821C7D28h case   22:*/		regs.R4 = regs.R17;
		/* 821C7D28h case   22:*/		return 0x821C7D2C;
		  /* 821C7D2Ch */ case   23:  		/* mr R3, R31 */
		/* 821C7D2Ch case   23:*/		regs.R3 = regs.R31;
		/* 821C7D2Ch case   23:*/		return 0x821C7D30;
		  /* 821C7D30h */ case   24:  		/* bl -326688 */
		/* 821C7D30h case   24:*/		regs.LR = 0x821C7D34; return 0x82178110;
		/* 821C7D30h case   24:*/		return 0x821C7D34;
		  /* 821C7D34h */ case   25:  		/* mr R4, R3 */
		/* 821C7D34h case   25:*/		regs.R4 = regs.R3;
		/* 821C7D34h case   25:*/		return 0x821C7D38;
		  /* 821C7D38h */ case   26:  		/* mr R3, R24 */
		/* 821C7D38h case   26:*/		regs.R3 = regs.R24;
		/* 821C7D38h case   26:*/		return 0x821C7D3C;
		  /* 821C7D3Ch */ case   27:  		/* bl -326516 */
		/* 821C7D3Ch case   27:*/		regs.LR = 0x821C7D40; return 0x821781C8;
		/* 821C7D3Ch case   27:*/		return 0x821C7D40;
	}
	return 0x821C7D40;
} // Block from 821C7CD0h-821C7D40h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821C7D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7D40);
		  /* 821C7D40h */ case    0:  		/* mr R5, R26 */
		/* 821C7D40h case    0:*/		regs.R5 = regs.R26;
		/* 821C7D40h case    0:*/		return 0x821C7D44;
		  /* 821C7D44h */ case    1:  		/* mr R4, R29 */
		/* 821C7D44h case    1:*/		regs.R4 = regs.R29;
		/* 821C7D44h case    1:*/		return 0x821C7D48;
		  /* 821C7D48h */ case    2:  		/* mr R3, R31 */
		/* 821C7D48h case    2:*/		regs.R3 = regs.R31;
		/* 821C7D48h case    2:*/		return 0x821C7D4C;
		  /* 821C7D4Ch */ case    3:  		/* bl -14156 */
		/* 821C7D4Ch case    3:*/		regs.LR = 0x821C7D50; return 0x821C4600;
		/* 821C7D4Ch case    3:*/		return 0x821C7D50;
		  /* 821C7D50h */ case    4:  		/* addi R28, R29, 24 */
		/* 821C7D50h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x18);
		/* 821C7D50h case    4:*/		return 0x821C7D54;
		  /* 821C7D54h */ case    5:  		/* mr R27, R3 */
		/* 821C7D54h case    5:*/		regs.R27 = regs.R3;
		/* 821C7D54h case    5:*/		return 0x821C7D58;
		  /* 821C7D58h */ case    6:  		/* li R8, 0 */
		/* 821C7D58h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821C7D58h case    6:*/		return 0x821C7D5C;
		  /* 821C7D5Ch */ case    7:  		/* li R7, 0 */
		/* 821C7D5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C7D5Ch case    7:*/		return 0x821C7D60;
		  /* 821C7D60h */ case    8:  		/* li R6, 94 */
		/* 821C7D60h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x5E);
		/* 821C7D60h case    8:*/		return 0x821C7D64;
		  /* 821C7D64h */ case    9:  		/* mr R5, R28 */
		/* 821C7D64h case    9:*/		regs.R5 = regs.R28;
		/* 821C7D64h case    9:*/		return 0x821C7D68;
		  /* 821C7D68h */ case   10:  		/* mr R4, R29 */
		/* 821C7D68h case   10:*/		regs.R4 = regs.R29;
		/* 821C7D68h case   10:*/		return 0x821C7D6C;
		  /* 821C7D6Ch */ case   11:  		/* mr R3, R31 */
		/* 821C7D6Ch case   11:*/		regs.R3 = regs.R31;
		/* 821C7D6Ch case   11:*/		return 0x821C7D70;
		  /* 821C7D70h */ case   12:  		/* bl 379944 */
		/* 821C7D70h case   12:*/		regs.LR = 0x821C7D74; return 0x82224998;
		/* 821C7D70h case   12:*/		return 0x821C7D74;
		  /* 821C7D74h */ case   13:  		/* mr R30, R3 */
		/* 821C7D74h case   13:*/		regs.R30 = regs.R3;
		/* 821C7D74h case   13:*/		return 0x821C7D78;
		  /* 821C7D78h */ case   14:  		/* li R6, 0 */
		/* 821C7D78h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C7D78h case   14:*/		return 0x821C7D7C;
		  /* 821C7D7Ch */ case   15:  		/* li R5, 0 */
		/* 821C7D7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7D7Ch case   15:*/		return 0x821C7D80;
		  /* 821C7D80h */ case   16:  		/* li R4, 94 */
		/* 821C7D80h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 821C7D80h case   16:*/		return 0x821C7D84;
		  /* 821C7D84h */ case   17:  		/* mr R3, R31 */
		/* 821C7D84h case   17:*/		regs.R3 = regs.R31;
		/* 821C7D84h case   17:*/		return 0x821C7D88;
		  /* 821C7D88h */ case   18:  		/* bl -407896 */
		/* 821C7D88h case   18:*/		regs.LR = 0x821C7D8C; return 0x82164430;
		/* 821C7D88h case   18:*/		return 0x821C7D8C;
		  /* 821C7D8Ch */ case   19:  		/* addi R11, R30, -12 */
		/* 821C7D8Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF4);
		/* 821C7D8Ch case   19:*/		return 0x821C7D90;
		  /* 821C7D90h */ case   20:  		/* li R10, 9 */
		/* 821C7D90h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 821C7D90h case   20:*/		return 0x821C7D94;
		  /* 821C7D94h */ case   21:  		/* add R11, R3, R11 */
		/* 821C7D94h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C7D94h case   21:*/		return 0x821C7D98;
	}
	return 0x821C7D98;
} // Block from 821C7D40h-821C7D98h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C7D98h
// Function '?RemoveAll@?$ArrayList@PAVCNode@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7D98);
		  /* 821C7D98h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 821C7D98h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C7D98h case    0:*/		return 0x821C7D9C;
		  /* 821C7D9Ch */ case    1:  		/* rlwimi R9, R10, 0, 28, 31 */
		/* 821C7D9Ch case    1:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R9,regs.R10);
		/* 821C7D9Ch case    1:*/		return 0x821C7DA0;
		  /* 821C7DA0h */ case    2:  		/* stw R9, <#[R11]> */
		/* 821C7DA0h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C7DA0h case    2:*/		return 0x821C7DA4;
		  /* 821C7DA4h */ case    3:  		/* lwz R5, <#[R29 + 100]> */
		/* 821C7DA4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000064) );
		/* 821C7DA4h case    3:*/		return 0x821C7DA8;
		  /* 821C7DA8h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 821C7DA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C7DA8h case    4:*/		return 0x821C7DAC;
		  /* 821C7DACh */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821C7DACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821C7DC0;  }
		/* 821C7DACh case    5:*/		return 0x821C7DB0;
		  /* 821C7DB0h */ case    6:  		/* mr R6, R31 */
		/* 821C7DB0h case    6:*/		regs.R6 = regs.R31;
		/* 821C7DB0h case    6:*/		return 0x821C7DB4;
		  /* 821C7DB4h */ case    7:  		/* li R4, 2 */
		/* 821C7DB4h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C7DB4h case    7:*/		return 0x821C7DB8;
		  /* 821C7DB8h */ case    8:  		/* mr R3, R30 */
		/* 821C7DB8h case    8:*/		regs.R3 = regs.R30;
		/* 821C7DB8h case    8:*/		return 0x821C7DBC;
		  /* 821C7DBCh */ case    9:  		/* bl -324676 */
		/* 821C7DBCh case    9:*/		regs.LR = 0x821C7DC0; return 0x82178978;
		/* 821C7DBCh case    9:*/		return 0x821C7DC0;
	}
	return 0x821C7DC0;
} // Block from 821C7D98h-821C7DC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C7DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7DC0);
		  /* 821C7DC0h */ case    0:  		/* stw R30, <#[R29 + 100]> */
		/* 821C7DC0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000064) );
		/* 821C7DC0h case    0:*/		return 0x821C7DC4;
		  /* 821C7DC4h */ case    1:  		/* li R8, 4 */
		/* 821C7DC4h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C7DC4h case    1:*/		return 0x821C7DC8;
		  /* 821C7DC8h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C7DC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C7DC8h case    2:*/		return 0x821C7DCC;
		  /* 821C7DCCh */ case    3:  		/* oris R11, R11, 512 */
		/* 821C7DCCh case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C7DCCh case    3:*/		return 0x821C7DD0;
		  /* 821C7DD0h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821C7DD0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C7DD0h case    4:*/		return 0x821C7DD4;
		  /* 821C7DD4h */ case    5:  		/* li R7, 3 */
		/* 821C7DD4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C7DD4h case    5:*/		return 0x821C7DD8;
		  /* 821C7DD8h */ case    6:  		/* li R6, 105 */
		/* 821C7DD8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x69);
		/* 821C7DD8h case    6:*/		return 0x821C7DDC;
		  /* 821C7DDCh */ case    7:  		/* mr R5, R28 */
		/* 821C7DDCh case    7:*/		regs.R5 = regs.R28;
		/* 821C7DDCh case    7:*/		return 0x821C7DE0;
		  /* 821C7DE0h */ case    8:  		/* mr R4, R29 */
		/* 821C7DE0h case    8:*/		regs.R4 = regs.R29;
		/* 821C7DE0h case    8:*/		return 0x821C7DE4;
		  /* 821C7DE4h */ case    9:  		/* mr R3, R31 */
		/* 821C7DE4h case    9:*/		regs.R3 = regs.R31;
		/* 821C7DE4h case    9:*/		return 0x821C7DE8;
		  /* 821C7DE8h */ case   10:  		/* bl 379824 */
		/* 821C7DE8h case   10:*/		regs.LR = 0x821C7DEC; return 0x82224998;
		/* 821C7DE8h case   10:*/		return 0x821C7DEC;
		  /* 821C7DECh */ case   11:  		/* mr R30, R3 */
		/* 821C7DECh case   11:*/		regs.R30 = regs.R3;
		/* 821C7DECh case   11:*/		return 0x821C7DF0;
		  /* 821C7DF0h */ case   12:  		/* mr R4, R14 */
		/* 821C7DF0h case   12:*/		regs.R4 = regs.R14;
		/* 821C7DF0h case   12:*/		return 0x821C7DF4;
		  /* 821C7DF4h */ case   13:  		/* mr R3, R31 */
		/* 821C7DF4h case   13:*/		regs.R3 = regs.R31;
		/* 821C7DF4h case   13:*/		return 0x821C7DF8;
		  /* 821C7DF8h */ case   14:  		/* bl -327160 */
		/* 821C7DF8h case   14:*/		regs.LR = 0x821C7DFC; return 0x82178000;
		/* 821C7DF8h case   14:*/		return 0x821C7DFC;
		  /* 821C7DFCh */ case   15:  		/* lwz R11, <#[R3]> */
		/* 821C7DFCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7DFCh case   15:*/		return 0x821C7E00;
		  /* 821C7E00h */ case   16:  		/* li R4, 0 */
		/* 821C7E00h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C7E00h case   16:*/		return 0x821C7E04;
		  /* 821C7E04h */ case   17:  		/* rlwimi R11, R18, 27, 4, 6 */
		/* 821C7E04h case   17:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R18);
		/* 821C7E04h case   17:*/		return 0x821C7E08;
		  /* 821C7E08h */ case   18:  		/* mr R14, R3 */
		/* 821C7E08h case   18:*/		regs.R14 = regs.R3;
		/* 821C7E08h case   18:*/		return 0x821C7E0C;
		  /* 821C7E0Ch */ case   19:  		/* stw R11, <#[R3]> */
		/* 821C7E0Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7E0Ch case   19:*/		return 0x821C7E10;
		  /* 821C7E10h */ case   20:  		/* bl -328528 */
		/* 821C7E10h case   20:*/		regs.LR = 0x821C7E14; return 0x82177AC0;
		/* 821C7E10h case   20:*/		return 0x821C7E14;
		  /* 821C7E14h */ case   21:  		/* lwz R11, <#[R14]> */
		/* 821C7E14h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821C7E14h case   21:*/		return 0x821C7E18;
		  /* 821C7E18h */ case   22:  		/* mr R3, R30 */
		/* 821C7E18h case   22:*/		regs.R3 = regs.R30;
		/* 821C7E18h case   22:*/		return 0x821C7E1C;
		  /* 821C7E1Ch */ case   23:  		/* rlwimi R11, R18, 7, 19, 26 */
		/* 821C7E1Ch case   23:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R18);
		/* 821C7E1Ch case   23:*/		return 0x821C7E20;
		  /* 821C7E20h */ case   24:  		/* mr R4, R14 */
		/* 821C7E20h case   24:*/		regs.R4 = regs.R14;
		/* 821C7E20h case   24:*/		return 0x821C7E24;
		  /* 821C7E24h */ case   25:  		/* stw R11, <#[R14]> */
		/* 821C7E24h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 821C7E24h case   25:*/		return 0x821C7E28;
		  /* 821C7E28h */ case   26:  		/* bl -326752 */
		/* 821C7E28h case   26:*/		regs.LR = 0x821C7E2C; return 0x821781C8;
		/* 821C7E28h case   26:*/		return 0x821C7E2C;
		  /* 821C7E2Ch */ case   27:  		/* stw R3, <#[R30 + 44]> */
		/* 821C7E2Ch case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C7E2Ch case   27:*/		return 0x821C7E30;
		  /* 821C7E30h */ case   28:  		/* mr R4, R27 */
		/* 821C7E30h case   28:*/		regs.R4 = regs.R27;
		/* 821C7E30h case   28:*/		return 0x821C7E34;
		  /* 821C7E34h */ case   29:  		/* mr R3, R31 */
		/* 821C7E34h case   29:*/		regs.R3 = regs.R31;
		/* 821C7E34h case   29:*/		return 0x821C7E38;
	}
	return 0x821C7E38;
} // Block from 821C7DC0h-821C7E38h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821C7E38h
// Function '?GetPrev@?$ArrayListEnumerator@PAVBlock@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAPAVBlock@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7E38);
		  /* 821C7E38h */ case    0:  		/* bl -327224 */
		/* 821C7E38h case    0:*/		regs.LR = 0x821C7E3C; return 0x82178000;
		/* 821C7E38h case    0:*/		return 0x821C7E3C;
		  /* 821C7E3Ch */ case    1:  		/* lwz R11, <#[R3]> */
		/* 821C7E3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7E3Ch case    1:*/		return 0x821C7E40;
		  /* 821C7E40h */ case    2:  		/* li R4, 0 */
		/* 821C7E40h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C7E40h case    2:*/		return 0x821C7E44;
		  /* 821C7E44h */ case    3:  		/* rlwimi R11, R18, 27, 4, 6 */
		/* 821C7E44h case    3:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R18);
		/* 821C7E44h case    3:*/		return 0x821C7E48;
		  /* 821C7E48h */ case    4:  		/* mr R27, R3 */
		/* 821C7E48h case    4:*/		regs.R27 = regs.R3;
		/* 821C7E48h case    4:*/		return 0x821C7E4C;
		  /* 821C7E4Ch */ case    5:  		/* stw R11, <#[R3]> */
		/* 821C7E4Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C7E4Ch case    5:*/		return 0x821C7E50;
		  /* 821C7E50h */ case    6:  		/* bl -328592 */
		/* 821C7E50h case    6:*/		regs.LR = 0x821C7E54; return 0x82177AC0;
		/* 821C7E50h case    6:*/		return 0x821C7E54;
		  /* 821C7E54h */ case    7:  		/* lwz R11, <#[R27]> */
		/* 821C7E54h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821C7E54h case    7:*/		return 0x821C7E58;
		  /* 821C7E58h */ case    8:  		/* mr R3, R30 */
		/* 821C7E58h case    8:*/		regs.R3 = regs.R30;
		/* 821C7E58h case    8:*/		return 0x821C7E5C;
		  /* 821C7E5Ch */ case    9:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C7E5Ch case    9:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C7E5Ch case    9:*/		return 0x821C7E60;
		  /* 821C7E60h */ case   10:  		/* mr R4, R27 */
		/* 821C7E60h case   10:*/		regs.R4 = regs.R27;
		/* 821C7E60h case   10:*/		return 0x821C7E64;
		  /* 821C7E64h */ case   11:  		/* stw R11, <#[R27]> */
		/* 821C7E64h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821C7E64h case   11:*/		return 0x821C7E68;
		  /* 821C7E68h */ case   12:  		/* bl -326816 */
		/* 821C7E68h case   12:*/		regs.LR = 0x821C7E6C; return 0x821781C8;
		/* 821C7E68h case   12:*/		return 0x821C7E6C;
		  /* 821C7E6Ch */ case   13:  		/* stw R3, <#[R30 + 48]> */
		/* 821C7E6Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C7E6Ch case   13:*/		return 0x821C7E70;
		  /* 821C7E70h */ case   14:  		/* mr R4, R21 */
		/* 821C7E70h case   14:*/		regs.R4 = regs.R21;
		/* 821C7E70h case   14:*/		return 0x821C7E74;
		  /* 821C7E74h */ case   15:  		/* mr R3, R31 */
		/* 821C7E74h case   15:*/		regs.R3 = regs.R31;
		/* 821C7E74h case   15:*/		return 0x821C7E78;
		  /* 821C7E78h */ case   16:  		/* bl -327288 */
		/* 821C7E78h case   16:*/		regs.LR = 0x821C7E7C; return 0x82178000;
		/* 821C7E78h case   16:*/		return 0x821C7E7C;
		  /* 821C7E7Ch */ case   17:  		/* mr R4, R3 */
		/* 821C7E7Ch case   17:*/		regs.R4 = regs.R3;
		/* 821C7E7Ch case   17:*/		return 0x821C7E80;
		  /* 821C7E80h */ case   18:  		/* mr R3, R30 */
		/* 821C7E80h case   18:*/		regs.R3 = regs.R30;
		/* 821C7E80h case   18:*/		return 0x821C7E84;
		  /* 821C7E84h */ case   19:  		/* bl -326844 */
		/* 821C7E84h case   19:*/		regs.LR = 0x821C7E88; return 0x821781C8;
		/* 821C7E84h case   19:*/		return 0x821C7E88;
		  /* 821C7E88h */ case   20:  		/* stw R3, <#[R30 + 52]> */
		/* 821C7E88h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000034) );
		/* 821C7E88h case   20:*/		return 0x821C7E8C;
		  /* 821C7E8Ch */ case   21:  		/* mr R4, R30 */
		/* 821C7E8Ch case   21:*/		regs.R4 = regs.R30;
		/* 821C7E8Ch case   21:*/		return 0x821C7E90;
		  /* 821C7E90h */ case   22:  		/* mr R3, R31 */
		/* 821C7E90h case   22:*/		regs.R3 = regs.R31;
		/* 821C7E90h case   22:*/		return 0x821C7E94;
		  /* 821C7E94h */ case   23:  		/* bl -327316 */
		/* 821C7E94h case   23:*/		regs.LR = 0x821C7E98; return 0x82178000;
		/* 821C7E94h case   23:*/		return 0x821C7E98;
	}
	return 0x821C7E98;
} // Block from 821C7E38h-821C7E98h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821C7E98h
// Function '?GetSpaceWorker@?$ArrayList@UImportProgramStackState@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@AAAPAUArrayListEntry@12@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7E98);
		  /* 821C7E98h */ case    0:  		/* mr R4, R3 */
		/* 821C7E98h case    0:*/		regs.R4 = regs.R3;
		/* 821C7E98h case    0:*/		return 0x821C7E9C;
		  /* 821C7E9Ch */ case    1:  		/* mr R3, R31 */
		/* 821C7E9Ch case    1:*/		regs.R3 = regs.R31;
		/* 821C7E9Ch case    1:*/		return 0x821C7EA0;
		  /* 821C7EA0h */ case    2:  		/* li R5, 527 */
		/* 821C7EA0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x20F);
		/* 821C7EA0h case    2:*/		return 0x821C7EA4;
		  /* 821C7EA4h */ case    3:  		/* mr R6, R23 */
		/* 821C7EA4h case    3:*/		regs.R6 = regs.R23;
		/* 821C7EA4h case    3:*/		return 0x821C7EA8;
		  /* 821C7EA8h */ case    4:  		/* li R7, 0 */
		/* 821C7EA8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C7EA8h case    4:*/		return 0x821C7EAC;
		  /* 821C7EACh */ case    5:  		/* bl 387572 */
		/* 821C7EACh case    5:*/		regs.LR = 0x821C7EB0; return 0x822268A0;
		/* 821C7EACh case    5:*/		return 0x821C7EB0;
		  /* 821C7EB0h */ case    6:  		/* lwz R5, <#[R29 + 100]> */
		/* 821C7EB0h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000064) );
		/* 821C7EB0h case    6:*/		return 0x821C7EB4;
		  /* 821C7EB4h */ case    7:  		/* lwz R30, <#[R3 + 12]> */
		/* 821C7EB4h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C7EB4h case    7:*/		return 0x821C7EB8;
		  /* 821C7EB8h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 821C7EB8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C7EB8h case    8:*/		return 0x821C7EBC;
		  /* 821C7EBCh */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821C7EBCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821C7ED0;  }
		/* 821C7EBCh case    9:*/		return 0x821C7EC0;
		  /* 821C7EC0h */ case   10:  		/* mr R6, R31 */
		/* 821C7EC0h case   10:*/		regs.R6 = regs.R31;
		/* 821C7EC0h case   10:*/		return 0x821C7EC4;
		  /* 821C7EC4h */ case   11:  		/* li R4, 2 */
		/* 821C7EC4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C7EC4h case   11:*/		return 0x821C7EC8;
		  /* 821C7EC8h */ case   12:  		/* mr R3, R30 */
		/* 821C7EC8h case   12:*/		regs.R3 = regs.R30;
		/* 821C7EC8h case   12:*/		return 0x821C7ECC;
		  /* 821C7ECCh */ case   13:  		/* bl -324948 */
		/* 821C7ECCh case   13:*/		regs.LR = 0x821C7ED0; return 0x82178978;
		/* 821C7ECCh case   13:*/		return 0x821C7ED0;
	}
	return 0x821C7ED0;
} // Block from 821C7E98h-821C7ED0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C7ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7ED0);
		  /* 821C7ED0h */ case    0:  		/* stw R30, <#[R29 + 100]> */
		/* 821C7ED0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000064) );
		/* 821C7ED0h case    0:*/		return 0x821C7ED4;
		  /* 821C7ED4h */ case    1:  		/* li R6, 0 */
		/* 821C7ED4h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C7ED4h case    1:*/		return 0x821C7ED8;
		  /* 821C7ED8h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C7ED8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C7ED8h case    2:*/		return 0x821C7EDC;
		  /* 821C7EDCh */ case    3:  		/* oris R11, R11, 512 */
		/* 821C7EDCh case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C7EDCh case    3:*/		return 0x821C7EE0;
		  /* 821C7EE0h */ case    4:  		/* li R5, 0 */
		/* 821C7EE0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7EE0h case    4:*/		return 0x821C7EE4;
		  /* 821C7EE4h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 821C7EE4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C7EE4h case    5:*/		return 0x821C7EE8;
		  /* 821C7EE8h */ case    6:  		/* li R4, 117 */
		/* 821C7EE8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821C7EE8h case    6:*/		return 0x821C7EEC;
		  /* 821C7EECh */ case    7:  		/* mr R3, R31 */
		/* 821C7EECh case    7:*/		regs.R3 = regs.R31;
		/* 821C7EECh case    7:*/		return 0x821C7EF0;
		  /* 821C7EF0h */ case    8:  		/* bl -408256 */
		/* 821C7EF0h case    8:*/		regs.LR = 0x821C7EF4; return 0x82164430;
		/* 821C7EF0h case    8:*/		return 0x821C7EF4;
		  /* 821C7EF4h */ case    9:  		/* addi R11, R22, -8 */
		/* 821C7EF4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFF8);
		/* 821C7EF4h case    9:*/		return 0x821C7EF8;
		  /* 821C7EF8h */ case   10:  		/* li R4, 1 */
		/* 821C7EF8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C7EF8h case   10:*/		return 0x821C7EFC;
		  /* 821C7EFCh */ case   11:  		/* fmr FR2, FR31 */
		/* 821C7EFCh case   11:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C7EFCh case   11:*/		return 0x821C7F00;
		  /* 821C7F00h */ case   12:  		/* fmr FR3, FR31 */
		/* 821C7F00h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C7F00h case   12:*/		return 0x821C7F04;
		  /* 821C7F04h */ case   13:  		/* fmr FR4, FR31 */
		/* 821C7F04h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C7F04h case   13:*/		return 0x821C7F08;
		  /* 821C7F08h */ case   14:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C7F08h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C7F08h case   14:*/		return 0x821C7F0C;
		  /* 821C7F0Ch */ case   15:  		/* mr R3, R31 */
		/* 821C7F0Ch case   15:*/		regs.R3 = regs.R31;
		/* 821C7F0Ch case   15:*/		return 0x821C7F10;
		  /* 821C7F10h */ case   16:  		/* std R11, <#[R1 + 88]> */
		/* 821C7F10h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821C7F10h case   16:*/		return 0x821C7F14;
		  /* 821C7F14h */ case   17:  		/* lfd FR0, <#[R1 + 88]> */
		/* 821C7F14h case   17:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821C7F14h case   17:*/		return 0x821C7F18;
		  /* 821C7F18h */ case   18:  		/* fcfid FR0, FR0 */
		/* 821C7F18h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C7F18h case   18:*/		return 0x821C7F1C;
		  /* 821C7F1Ch */ case   19:  		/* frsp FR1, FR0 */
		/* 821C7F1Ch case   19:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR0);
		/* 821C7F1Ch case   19:*/		return 0x821C7F20;
	}
	return 0x821C7F20;
} // Block from 821C7ED0h-821C7F20h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C7F20h
// Function '?PrepareDiagnosticBlocks@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7F20);
		  /* 821C7F20h */ case    0:  		/* bl 404536 */
		/* 821C7F20h case    0:*/		regs.LR = 0x821C7F24; return 0x8222AB58;
		/* 821C7F20h case    0:*/		return 0x821C7F24;
		  /* 821C7F24h */ case    1:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C7F24h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C7F24h case    1:*/		return 0x821C7F28;
		  /* 821C7F28h */ case    2:  		/* lis R22, -1 */
		/* 821C7F28h case    2:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 821C7F28h case    2:*/		return 0x821C7F2C;
		  /* 821C7F2Ch */ case    3:  		/* mr R27, R3 */
		/* 821C7F2Ch case    3:*/		regs.R27 = regs.R3;
		/* 821C7F2Ch case    3:*/		return 0x821C7F30;
		  /* 821C7F30h */ case    4:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C7F30h case    4:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C7F30h case    4:*/		return 0x821C7F34;
		  /* 821C7F34h */ case    5:  		/* mr R5, R28 */
		/* 821C7F34h case    5:*/		regs.R5 = regs.R28;
		/* 821C7F34h case    5:*/		return 0x821C7F38;
		  /* 821C7F38h */ case    6:  		/* cmplw CR6, R11, R22 */
		/* 821C7F38h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821C7F38h case    6:*/		return 0x821C7F3C;
		  /* 821C7F3Ch */ case    7:  		/* mr R4, R29 */
		/* 821C7F3Ch case    7:*/		regs.R4 = regs.R29;
		/* 821C7F3Ch case    7:*/		return 0x821C7F40;
		  /* 821C7F40h */ case    8:  		/* mr R3, R31 */
		/* 821C7F40h case    8:*/		regs.R3 = regs.R31;
		/* 821C7F40h case    8:*/		return 0x821C7F44;
		  /* 821C7F44h */ case    9:  		/* bc 4, CR6_EQ, 120 */
		/* 821C7F44h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C7FBC;  }
		/* 821C7F44h case    9:*/		return 0x821C7F48;
		  /* 821C7F48h */ case   10:  		/* li R6, 3 */
		/* 821C7F48h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 821C7F48h case   10:*/		return 0x821C7F4C;
		  /* 821C7F4Ch */ case   11:  		/* bl 379828 */
		/* 821C7F4Ch case   11:*/		regs.LR = 0x821C7F50; return 0x82224B00;
		/* 821C7F4Ch case   11:*/		return 0x821C7F50;
		  /* 821C7F50h */ case   12:  		/* mr R30, R3 */
		/* 821C7F50h case   12:*/		regs.R30 = regs.R3;
		/* 821C7F50h case   12:*/		return 0x821C7F54;
		  /* 821C7F54h */ case   13:  		/* li R5, 0 */
		/* 821C7F54h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7F54h case   13:*/		return 0x821C7F58;
		  /* 821C7F58h */ case   14:  		/* mr R4, R27 */
		/* 821C7F58h case   14:*/		regs.R4 = regs.R27;
		/* 821C7F58h case   14:*/		return 0x821C7F5C;
		  /* 821C7F5Ch */ case   15:  		/* mr R3, R31 */
		/* 821C7F5Ch case   15:*/		regs.R3 = regs.R31;
		/* 821C7F5Ch case   15:*/		return 0x821C7F60;
		  /* 821C7F60h */ case   16:  		/* bl -327248 */
		/* 821C7F60h case   16:*/		regs.LR = 0x821C7F64; return 0x82178110;
		/* 821C7F60h case   16:*/		return 0x821C7F64;
		  /* 821C7F64h */ case   17:  		/* mr R4, R3 */
		/* 821C7F64h case   17:*/		regs.R4 = regs.R3;
		/* 821C7F64h case   17:*/		return 0x821C7F68;
		  /* 821C7F68h */ case   18:  		/* mr R3, R30 */
		/* 821C7F68h case   18:*/		regs.R3 = regs.R30;
		/* 821C7F68h case   18:*/		return 0x821C7F6C;
		  /* 821C7F6Ch */ case   19:  		/* bl -327076 */
		/* 821C7F6Ch case   19:*/		regs.LR = 0x821C7F70; return 0x821781C8;
		/* 821C7F6Ch case   19:*/		return 0x821C7F70;
		  /* 821C7F70h */ case   20:  		/* stw R3, <#[R30 + 44]> */
		/* 821C7F70h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C7F70h case   20:*/		return 0x821C7F74;
		  /* 821C7F74h */ case   21:  		/* li R5, 0 */
		/* 821C7F74h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7F74h case   21:*/		return 0x821C7F78;
		  /* 821C7F78h */ case   22:  		/* mr R4, R25 */
		/* 821C7F78h case   22:*/		regs.R4 = regs.R25;
		/* 821C7F78h case   22:*/		return 0x821C7F7C;
		  /* 821C7F7Ch */ case   23:  		/* mr R3, R31 */
		/* 821C7F7Ch case   23:*/		regs.R3 = regs.R31;
		/* 821C7F7Ch case   23:*/		return 0x821C7F80;
		  /* 821C7F80h */ case   24:  		/* bl -327280 */
		/* 821C7F80h case   24:*/		regs.LR = 0x821C7F84; return 0x82178110;
		/* 821C7F80h case   24:*/		return 0x821C7F84;
		  /* 821C7F84h */ case   25:  		/* mr R4, R3 */
		/* 821C7F84h case   25:*/		regs.R4 = regs.R3;
		/* 821C7F84h case   25:*/		return 0x821C7F88;
		  /* 821C7F88h */ case   26:  		/* mr R3, R30 */
		/* 821C7F88h case   26:*/		regs.R3 = regs.R30;
		/* 821C7F88h case   26:*/		return 0x821C7F8C;
		  /* 821C7F8Ch */ case   27:  		/* bl -327108 */
		/* 821C7F8Ch case   27:*/		regs.LR = 0x821C7F90; return 0x821781C8;
		/* 821C7F8Ch case   27:*/		return 0x821C7F90;
		  /* 821C7F90h */ case   28:  		/* stw R3, <#[R30 + 48]> */
		/* 821C7F90h case   28:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C7F90h case   28:*/		return 0x821C7F94;
		  /* 821C7F94h */ case   29:  		/* li R5, 1 */
		/* 821C7F94h case   29:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C7F94h case   29:*/		return 0x821C7F98;
		  /* 821C7F98h */ case   30:  		/* mr R4, R24 */
		/* 821C7F98h case   30:*/		regs.R4 = regs.R24;
		/* 821C7F98h case   30:*/		return 0x821C7F9C;
		  /* 821C7F9Ch */ case   31:  		/* mr R3, R31 */
		/* 821C7F9Ch case   31:*/		regs.R3 = regs.R31;
		/* 821C7F9Ch case   31:*/		return 0x821C7FA0;
		  /* 821C7FA0h */ case   32:  		/* bl -327312 */
		/* 821C7FA0h case   32:*/		regs.LR = 0x821C7FA4; return 0x82178110;
		/* 821C7FA0h case   32:*/		return 0x821C7FA4;
		  /* 821C7FA4h */ case   33:  		/* mr R4, R3 */
		/* 821C7FA4h case   33:*/		regs.R4 = regs.R3;
		/* 821C7FA4h case   33:*/		return 0x821C7FA8;
		  /* 821C7FA8h */ case   34:  		/* mr R3, R30 */
		/* 821C7FA8h case   34:*/		regs.R3 = regs.R30;
		/* 821C7FA8h case   34:*/		return 0x821C7FAC;
		  /* 821C7FACh */ case   35:  		/* bl -327140 */
		/* 821C7FACh case   35:*/		regs.LR = 0x821C7FB0; return 0x821781C8;
		/* 821C7FACh case   35:*/		return 0x821C7FB0;
		  /* 821C7FB0h */ case   36:  		/* stw R3, <#[R30 + 52]> */
		/* 821C7FB0h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000034) );
		/* 821C7FB0h case   36:*/		return 0x821C7FB4;
		  /* 821C7FB4h */ case   37:  		/* li R11, 7 */
		/* 821C7FB4h case   37:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 821C7FB4h case   37:*/		return 0x821C7FB8;
		  /* 821C7FB8h */ case   38:  		/* b 84 */
		/* 821C7FB8h case   38:*/		return 0x821C800C;
		/* 821C7FB8h case   38:*/		return 0x821C7FBC;
	}
	return 0x821C7FBC;
} // Block from 821C7F20h-821C7FBCh (39 instructions)

//////////////////////////////////////////////////////
// Block at 821C7FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C7FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C7FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C7FBC);
		  /* 821C7FBCh */ case    0:  		/* li R6, 2 */
		/* 821C7FBCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C7FBCh case    0:*/		return 0x821C7FC0;
		  /* 821C7FC0h */ case    1:  		/* bl 379712 */
		/* 821C7FC0h case    1:*/		regs.LR = 0x821C7FC4; return 0x82224B00;
		/* 821C7FC0h case    1:*/		return 0x821C7FC4;
		  /* 821C7FC4h */ case    2:  		/* mr R30, R3 */
		/* 821C7FC4h case    2:*/		regs.R30 = regs.R3;
		/* 821C7FC4h case    2:*/		return 0x821C7FC8;
		  /* 821C7FC8h */ case    3:  		/* li R5, 0 */
		/* 821C7FC8h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7FC8h case    3:*/		return 0x821C7FCC;
		  /* 821C7FCCh */ case    4:  		/* mr R4, R27 */
		/* 821C7FCCh case    4:*/		regs.R4 = regs.R27;
		/* 821C7FCCh case    4:*/		return 0x821C7FD0;
		  /* 821C7FD0h */ case    5:  		/* mr R3, R31 */
		/* 821C7FD0h case    5:*/		regs.R3 = regs.R31;
		/* 821C7FD0h case    5:*/		return 0x821C7FD4;
		  /* 821C7FD4h */ case    6:  		/* bl -327364 */
		/* 821C7FD4h case    6:*/		regs.LR = 0x821C7FD8; return 0x82178110;
		/* 821C7FD4h case    6:*/		return 0x821C7FD8;
		  /* 821C7FD8h */ case    7:  		/* mr R4, R3 */
		/* 821C7FD8h case    7:*/		regs.R4 = regs.R3;
		/* 821C7FD8h case    7:*/		return 0x821C7FDC;
		  /* 821C7FDCh */ case    8:  		/* mr R3, R30 */
		/* 821C7FDCh case    8:*/		regs.R3 = regs.R30;
		/* 821C7FDCh case    8:*/		return 0x821C7FE0;
		  /* 821C7FE0h */ case    9:  		/* bl -327192 */
		/* 821C7FE0h case    9:*/		regs.LR = 0x821C7FE4; return 0x821781C8;
		/* 821C7FE0h case    9:*/		return 0x821C7FE4;
		  /* 821C7FE4h */ case   10:  		/* stw R3, <#[R30 + 44]> */
		/* 821C7FE4h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C7FE4h case   10:*/		return 0x821C7FE8;
		  /* 821C7FE8h */ case   11:  		/* li R5, 0 */
		/* 821C7FE8h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C7FE8h case   11:*/		return 0x821C7FEC;
		  /* 821C7FECh */ case   12:  		/* mr R4, R26 */
		/* 821C7FECh case   12:*/		regs.R4 = regs.R26;
		/* 821C7FECh case   12:*/		return 0x821C7FF0;
		  /* 821C7FF0h */ case   13:  		/* mr R3, R31 */
		/* 821C7FF0h case   13:*/		regs.R3 = regs.R31;
		/* 821C7FF0h case   13:*/		return 0x821C7FF4;
		  /* 821C7FF4h */ case   14:  		/* bl -327396 */
		/* 821C7FF4h case   14:*/		regs.LR = 0x821C7FF8; return 0x82178110;
		/* 821C7FF4h case   14:*/		return 0x821C7FF8;
		  /* 821C7FF8h */ case   15:  		/* mr R4, R3 */
		/* 821C7FF8h case   15:*/		regs.R4 = regs.R3;
		/* 821C7FF8h case   15:*/		return 0x821C7FFC;
		  /* 821C7FFCh */ case   16:  		/* mr R3, R30 */
		/* 821C7FFCh case   16:*/		regs.R3 = regs.R30;
		/* 821C7FFCh case   16:*/		return 0x821C8000;
		  /* 821C8000h */ case   17:  		/* bl -327224 */
		/* 821C8000h case   17:*/		regs.LR = 0x821C8004; return 0x821781C8;
		/* 821C8000h case   17:*/		return 0x821C8004;
		  /* 821C8004h */ case   18:  		/* stw R3, <#[R30 + 48]> */
		/* 821C8004h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C8004h case   18:*/		return 0x821C8008;
		  /* 821C8008h */ case   19:  		/* li R11, 3 */
		/* 821C8008h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821C8008h case   19:*/		return 0x821C800C;
	}
	return 0x821C800C;
} // Block from 821C7FBCh-821C800Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C800Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C800C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C800C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C800C);
		  /* 821C800Ch */ case    0:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 821C800Ch case    0:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 821C800Ch case    0:*/		return 0x821C8010;
		  /* 821C8010h */ case    1:  		/* mr R4, R30 */
		/* 821C8010h case    1:*/		regs.R4 = regs.R30;
		/* 821C8010h case    1:*/		return 0x821C8014;
		  /* 821C8014h */ case    2:  		/* mr R3, R31 */
		/* 821C8014h case    2:*/		regs.R3 = regs.R31;
		/* 821C8014h case    2:*/		return 0x821C8018;
		  /* 821C8018h */ case    3:  		/* ori R30, R11, 528 */
		/* 821C8018h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0x210);
		/* 821C8018h case    3:*/		return 0x821C801C;
		  /* 821C801Ch */ case    4:  		/* bl -327708 */
		/* 821C801Ch case    4:*/		regs.LR = 0x821C8020; return 0x82178000;
		/* 821C801Ch case    4:*/		return 0x821C8020;
		  /* 821C8020h */ case    5:  		/* mr R4, R3 */
		/* 821C8020h case    5:*/		regs.R4 = regs.R3;
		/* 821C8020h case    5:*/		return 0x821C8024;
		  /* 821C8024h */ case    6:  		/* mr R3, R31 */
		/* 821C8024h case    6:*/		regs.R3 = regs.R31;
		/* 821C8024h case    6:*/		return 0x821C8028;
		  /* 821C8028h */ case    7:  		/* mr R5, R30 */
		/* 821C8028h case    7:*/		regs.R5 = regs.R30;
		/* 821C8028h case    7:*/		return 0x821C802C;
		  /* 821C802Ch */ case    8:  		/* mr R6, R23 */
		/* 821C802Ch case    8:*/		regs.R6 = regs.R23;
		/* 821C802Ch case    8:*/		return 0x821C8030;
		  /* 821C8030h */ case    9:  		/* li R7, 1 */
		/* 821C8030h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821C8030h case    9:*/		return 0x821C8034;
		  /* 821C8034h */ case   10:  		/* bl 387180 */
		/* 821C8034h case   10:*/		regs.LR = 0x821C8038; return 0x822268A0;
		/* 821C8034h case   10:*/		return 0x821C8038;
		  /* 821C8038h */ case   11:  		/* lwz R30, <#[R3 + 12]> */
		/* 821C8038h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C8038h case   11:*/		return 0x821C803C;
		  /* 821C803Ch */ case   12:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C803Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C803Ch case   12:*/		return 0x821C8040;
		  /* 821C8040h */ case   13:  		/* oris R11, R11, 6 */
		/* 821C8040h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 821C8040h case   13:*/		return 0x821C8044;
		  /* 821C8044h */ case   14:  		/* stw R11, <#[R30 + 8]> */
		/* 821C8044h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C8044h case   14:*/		return 0x821C8048;
		  /* 821C8048h */ case   15:  		/* lwz R5, <#[R29 + 100]> */
		/* 821C8048h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000064) );
		/* 821C8048h case   15:*/		return 0x821C804C;
		  /* 821C804Ch */ case   16:  		/* cmplwi CR6, R5, 0 */
		/* 821C804Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C804Ch case   16:*/		return 0x821C8050;
		  /* 821C8050h */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 821C8050h case   17:*/		if ( regs.CR[6].eq ) { return 0x821C8064;  }
		/* 821C8050h case   17:*/		return 0x821C8054;
		  /* 821C8054h */ case   18:  		/* mr R6, R31 */
		/* 821C8054h case   18:*/		regs.R6 = regs.R31;
		/* 821C8054h case   18:*/		return 0x821C8058;
		  /* 821C8058h */ case   19:  		/* li R4, 2 */
		/* 821C8058h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C8058h case   19:*/		return 0x821C805C;
		  /* 821C805Ch */ case   20:  		/* mr R3, R30 */
		/* 821C805Ch case   20:*/		regs.R3 = regs.R30;
		/* 821C805Ch case   20:*/		return 0x821C8060;
		  /* 821C8060h */ case   21:  		/* bl -325352 */
		/* 821C8060h case   21:*/		regs.LR = 0x821C8064; return 0x82178978;
		/* 821C8060h case   21:*/		return 0x821C8064;
	}
	return 0x821C8064;
} // Block from 821C800Ch-821C8064h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C8064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8064);
		  /* 821C8064h */ case    0:  		/* stw R30, <#[R29 + 100]> */
		/* 821C8064h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000064) );
		/* 821C8064h case    0:*/		return 0x821C8068;
		  /* 821C8068h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C8068h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C8068h case    1:*/		return 0x821C806C;
		  /* 821C806Ch */ case    2:  		/* oris R11, R11, 512 */
		/* 821C806Ch case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C806Ch case    2:*/		return 0x821C8070;
		  /* 821C8070h */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 821C8070h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C8070h case    3:*/		return 0x821C8074;
		  /* 821C8074h */ case    4:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C8074h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C8074h case    4:*/		return 0x821C8078;
		  /* 821C8078h */ case    5:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C8078h case    5:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C8078h case    5:*/		return 0x821C807C;
		  /* 821C807Ch */ case    6:  		/* cmplw CR6, R11, R22 */
		/* 821C807Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821C807Ch case    6:*/		return 0x821C8080;
		  /* 821C8080h */ case    7:  		/* bc 4, CR6_EQ, 48 */
		/* 821C8080h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C80B0;  }
		/* 821C8080h case    7:*/		return 0x821C8084;
		  /* 821C8084h */ case    8:  		/* lwz R5, <#[R29 + 92]> */
		/* 821C8084h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000005C) );
		/* 821C8084h case    8:*/		return 0x821C8088;
		  /* 821C8088h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 821C8088h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C8088h case    9:*/		return 0x821C808C;
		  /* 821C808Ch */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 821C808Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821C80A0;  }
		/* 821C808Ch case   10:*/		return 0x821C8090;
		  /* 821C8090h */ case   11:  		/* mr R6, R31 */
		/* 821C8090h case   11:*/		regs.R6 = regs.R31;
		/* 821C8090h case   11:*/		return 0x821C8094;
		  /* 821C8094h */ case   12:  		/* li R4, 0 */
		/* 821C8094h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C8094h case   12:*/		return 0x821C8098;
		  /* 821C8098h */ case   13:  		/* mr R3, R30 */
		/* 821C8098h case   13:*/		regs.R3 = regs.R30;
		/* 821C8098h case   13:*/		return 0x821C809C;
		  /* 821C809Ch */ case   14:  		/* bl -325412 */
		/* 821C809Ch case   14:*/		regs.LR = 0x821C80A0; return 0x82178978;
		/* 821C809Ch case   14:*/		return 0x821C80A0;
	}
	return 0x821C80A0;
} // Block from 821C8064h-821C80A0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821C80A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C80A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C80A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C80A0);
		  /* 821C80A0h */ case    0:  		/* stw R30, <#[R29 + 92]> */
		/* 821C80A0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000005C) );
		/* 821C80A0h case    0:*/		return 0x821C80A4;
		  /* 821C80A4h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C80A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C80A4h case    1:*/		return 0x821C80A8;
		  /* 821C80A8h */ case    2:  		/* oris R11, R11, 512 */
		/* 821C80A8h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C80A8h case    2:*/		return 0x821C80AC;
		  /* 821C80ACh */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 821C80ACh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C80ACh case    3:*/		return 0x821C80B0;
	}
	return 0x821C80B0;
} // Block from 821C80A0h-821C80B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C80B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C80B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C80B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C80B0);
		  /* 821C80B0h */ case    0:  		/* lwz R11, <#[R31 + 40]> */
		/* 821C80B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C80B0h case    0:*/		return 0x821C80B4;
		  /* 821C80B4h */ case    1:  		/* lwz R14, <#[R1 + 80]> */
		/* 821C80B4h case    1:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000050) );
		/* 821C80B4h case    1:*/		return 0x821C80B8;
		  /* 821C80B8h */ case    2:  		/* oris R11, R11, 32 */
		/* 821C80B8h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821C80B8h case    2:*/		return 0x821C80BC;
		  /* 821C80BCh */ case    3:  		/* stw R11, <#[R31 + 40]> */
		/* 821C80BCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821C80BCh case    3:*/		return 0x821C80C0;
	}
	return 0x821C80C0;
} // Block from 821C80B0h-821C80C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C80C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C80C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C80C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C80C0);
		  /* 821C80C0h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821C80C0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821C80C0h case    0:*/		return 0x821C80C4;
		  /* 821C80C4h */ case    1:  		/* lwz R29, <#[R11 + 4]> */
		/* 821C80C4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821C80C4h case    1:*/		return 0x821C80C8;
		  /* 821C80C8h */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821C80C8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821C80C8h case    2:*/		return 0x821C80CC;
		  /* 821C80CCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C80CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C80D8;  }
		/* 821C80CCh case    3:*/		return 0x821C80D0;
		  /* 821C80D0h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821C80D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C80D0h case    4:*/		return 0x821C80D4;
		  /* 821C80D4h */ case    5:  		/* bc 4, CR6_EQ, -1372 */
		/* 821C80D4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C7B78;  }
		/* 821C80D4h case    5:*/		return 0x821C80D8;
	}
	return 0x821C80D8;
} // Block from 821C80C0h-821C80D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C80D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C80D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C80D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C80D8);
		  /* 821C80D8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821C80D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821C80D8h case    0:*/		return 0x821C80DC;
		  /* 821C80DCh */ case    1:  		/* bc 12, CR6_EQ, 3204 */
		/* 821C80DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821C8D60;  }
		/* 821C80DCh case    1:*/		return 0x821C80E0;
		  /* 821C80E0h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C80E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C80E0h case    2:*/		return 0x821C80E4;
		  /* 821C80E4h */ case    3:  		/* li R27, 0 */
		/* 821C80E4h case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821C80E4h case    3:*/		return 0x821C80E8;
		  /* 821C80E8h */ case    4:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821C80E8h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821C80E8h case    4:*/		return 0x821C80EC;
		  /* 821C80ECh */ case    5:  		/* addic R10, R9, -1 */
		/* 821C80ECh case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821C80ECh case    5:*/		return 0x821C80F0;
		  /* 821C80F0h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821C80F0h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C80F0h case    6:*/		return 0x821C80F4;
		  /* 821C80F4h */ case    7:  		/* and R10, R10, R11 */
		/* 821C80F4h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821C80F4h case    7:*/		return 0x821C80F8;
		  /* 821C80F8h */ case    8:  		/* lwz R10, <#[R10 + 12]> */
		/* 821C80F8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821C80F8h case    8:*/		return 0x821C80FC;
		  /* 821C80FCh */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821C80FCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C80FCh case    9:*/		return 0x821C8100;
		  /* 821C8100h */ case   10:  		/* bc 12, CR6_EQ, 8 */
		/* 821C8100h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C8108;  }
		/* 821C8100h case   10:*/		return 0x821C8104;
		  /* 821C8104h */ case   11:  		/* lwz R27, <#[R10]> */
		/* 821C8104h case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000000) );
		/* 821C8104h case   11:*/		return 0x821C8108;
	}
	return 0x821C8108;
} // Block from 821C80D8h-821C8108h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C8108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8108);
		  /* 821C8108h */ case    0:  		/* addic R10, R9, -1 */
		/* 821C8108h case    0:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821C8108h case    0:*/		return 0x821C810C;
		  /* 821C810Ch */ case    1:  		/* mr R5, R31 */
		/* 821C810Ch case    1:*/		regs.R5 = regs.R31;
		/* 821C810Ch case    1:*/		return 0x821C8110;
		  /* 821C8110h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821C8110h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C8110h case    2:*/		return 0x821C8114;
		  /* 821C8114h */ case    3:  		/* mr R4, R27 */
		/* 821C8114h case    3:*/		regs.R4 = regs.R27;
		/* 821C8114h case    3:*/		return 0x821C8118;
		  /* 821C8118h */ case    4:  		/* and R3, R10, R11 */
		/* 821C8118h case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821C8118h case    4:*/		return 0x821C811C;
		  /* 821C811Ch */ case    5:  		/* bl 424012 */
		/* 821C811Ch case    5:*/		regs.LR = 0x821C8120; return 0x8222F968;
		/* 821C811Ch case    5:*/		return 0x821C8120;
		  /* 821C8120h */ case    6:  		/* lwz R11, <#[R31 + 36]> */
		/* 821C8120h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821C8120h case    6:*/		return 0x821C8124;
		  /* 821C8124h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C8124h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8124h case    7:*/		return 0x821C8128;
		  /* 821C8128h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821C8128h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821C8130;  }
		/* 821C8128h case    8:*/		return 0x821C812C;
		  /* 821C812Ch */ case    9:  		/* stw R18, <#[R31 + 36]> */
		/* 821C812Ch case    9:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00000024) );
		/* 821C812Ch case    9:*/		return 0x821C8130;
	}
	return 0x821C8130;
} // Block from 821C8108h-821C8130h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C8130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8130);
		  /* 821C8130h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 821C8130h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821C8130h case    0:*/		return 0x821C8134;
		  /* 821C8134h */ case    1:  		/* mr R3, R31 */
		/* 821C8134h case    1:*/		regs.R3 = regs.R31;
		/* 821C8134h case    1:*/		return 0x821C8138;
		  /* 821C8138h */ case    2:  		/* addi R10, R11, 1 */
		/* 821C8138h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821C8138h case    2:*/		return 0x821C813C;
		  /* 821C813Ch */ case    3:  		/* stw R10, <#[R31 + 36]> */
		/* 821C813Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 821C813Ch case    3:*/		return 0x821C8140;
		  /* 821C8140h */ case    4:  		/* stw R11, <#[R31 + 32]> */
		/* 821C8140h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821C8140h case    4:*/		return 0x821C8144;
		  /* 821C8144h */ case    5:  		/* bl -373260 */
		/* 821C8144h case    5:*/		regs.LR = 0x821C8148; return 0x8216CF38;
		/* 821C8144h case    5:*/		return 0x821C8148;
		  /* 821C8148h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C8148h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C8148h case    6:*/		return 0x821C814C;
		  /* 821C814Ch */ case    7:  		/* rlwinm R30, R3, 0, 0, 30 */
		/* 821C814Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R30,regs.R3);
		/* 821C814Ch case    7:*/		return 0x821C8150;
		  /* 821C8150h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C8150h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8150h case    8:*/		return 0x821C8154;
		  /* 821C8154h */ case    9:  		/* mr R28, R3 */
		/* 821C8154h case    9:*/		regs.R28 = regs.R3;
		/* 821C8154h case    9:*/		return 0x821C8158;
		  /* 821C8158h */ case   10:  		/* addic R10, R10, -1 */
		/* 821C8158h case   10:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C8158h case   10:*/		return 0x821C815C;
		  /* 821C815Ch */ case   11:  		/* addi R10, R30, 4 */
		/* 821C815Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821C815Ch case   11:*/		return 0x821C8160;
		  /* 821C8160h */ case   12:  		/* subfe R9, R9, R9 */
		/* 821C8160h case   12:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821C8160h case   12:*/		return 0x821C8164;
		  /* 821C8164h */ case   13:  		/* mr R3, R31 */
		/* 821C8164h case   13:*/		regs.R3 = regs.R31;
		/* 821C8164h case   13:*/		return 0x821C8168;
		  /* 821C8168h */ case   14:  		/* and R11, R9, R11 */
		/* 821C8168h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C8168h case   14:*/		return 0x821C816C;
		  /* 821C816Ch */ case   15:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C816Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C816Ch case   15:*/		return 0x821C8170;
		  /* 821C8170h */ case   16:  		/* addi R9, R11, 4 */
		/* 821C8170h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821C8170h case   16:*/		return 0x821C8174;
		  /* 821C8174h */ case   17:  		/* lwz R8, <#[R11 + 4]> */
		/* 821C8174h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8174h case   17:*/		return 0x821C8178;
		  /* 821C8178h */ case   18:  		/* stw R8, <#[R30 + 4]> */
		/* 821C8178h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821C8178h case   18:*/		return 0x821C817C;
		  /* 821C817Ch */ case   19:  		/* lwz R8, <#[R11 + 4]> */
		/* 821C817Ch case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C817Ch case   19:*/		return 0x821C8180;
		  /* 821C8180h */ case   20:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C8180h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C8180h case   20:*/		return 0x821C8184;
		  /* 821C8184h */ case   21:  		/* stw R10, <#[R8]> */
		/* 821C8184h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C8184h case   21:*/		return 0x821C8188;
		  /* 821C8188h */ case   22:  		/* stw R9, <#[R30]> */
		/* 821C8188h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 821C8188h case   22:*/		return 0x821C818C;
		  /* 821C818Ch */ case   23:  		/* stw R30, <#[R11 + 4]> */
		/* 821C818Ch case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821C818Ch case   23:*/		return 0x821C8190;
		  /* 821C8190h */ case   24:  		/* bl -373336 */
		/* 821C8190h case   24:*/		regs.LR = 0x821C8194; return 0x8216CF38;
		/* 821C8190h case   24:*/		return 0x821C8194;
		  /* 821C8194h */ case   25:  		/* lwz R8, <#[R30 + 4]> */
		/* 821C8194h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821C8194h case   25:*/		return 0x821C8198;
		  /* 821C8198h */ case   26:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C8198h case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C8198h case   26:*/		return 0x821C819C;
		  /* 821C819Ch */ case   27:  		/* addi R10, R30, 4 */
		/* 821C819Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821C819Ch case   27:*/		return 0x821C81A0;
		  /* 821C81A0h */ case   28:  		/* addi R9, R11, 4 */
		/* 821C81A0h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821C81A0h case   28:*/		return 0x821C81A4;
		  /* 821C81A4h */ case   29:  		/* li R7, 0 */
		/* 821C81A4h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C81A4h case   29:*/		return 0x821C81A8;
		  /* 821C81A8h */ case   30:  		/* mr R29, R3 */
		/* 821C81A8h case   30:*/		regs.R29 = regs.R3;
		/* 821C81A8h case   30:*/		return 0x821C81AC;
		  /* 821C81ACh */ case   31:  		/* stw R8, <#[R11 + 4]> */
		/* 821C81ACh case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C81ACh case   31:*/		return 0x821C81B0;
		  /* 821C81B0h */ case   32:  		/* mr R4, R28 */
		/* 821C81B0h case   32:*/		regs.R4 = regs.R28;
		/* 821C81B0h case   32:*/		return 0x821C81B4;
		  /* 821C81B4h */ case   33:  		/* lwz R8, <#[R30 + 4]> */
		/* 821C81B4h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 821C81B4h case   33:*/		return 0x821C81B8;
		  /* 821C81B8h */ case   34:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821C81B8h case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821C81B8h case   34:*/		return 0x821C81BC;
		  /* 821C81BCh */ case   35:  		/* stw R9, <#[R8]> */
		/* 821C81BCh case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821C81BCh case   35:*/		return 0x821C81C0;
		  /* 821C81C0h */ case   36:  		/* mr R5, R31 */
		/* 821C81C0h case   36:*/		regs.R5 = regs.R31;
		/* 821C81C0h case   36:*/		return 0x821C81C4;
		  /* 821C81C4h */ case   37:  		/* stw R10, <#[R11]> */
		/* 821C81C4h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C81C4h case   37:*/		return 0x821C81C8;
		  /* 821C81C8h */ case   38:  		/* stw R11, <#[R30 + 4]> */
		/* 821C81C8h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C81C8h case   38:*/		return 0x821C81CC;
		  /* 821C81CCh */ case   39:  		/* stw R7, <#[R31 + 32]> */
		/* 821C81CCh case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000020) );
		/* 821C81CCh case   39:*/		return 0x821C81D0;
		  /* 821C81D0h */ case   40:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C81D0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C81D0h case   40:*/		return 0x821C81D4;
		  /* 821C81D4h */ case   41:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C81D4h case   41:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C81D4h case   41:*/		return 0x821C81D8;
		  /* 821C81D8h */ case   42:  		/* addic R10, R10, -1 */
		/* 821C81D8h case   42:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C81D8h case   42:*/		return 0x821C81DC;
		  /* 821C81DCh */ case   43:  		/* subfe R10, R10, R10 */
		/* 821C81DCh case   43:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C81DCh case   43:*/		return 0x821C81E0;
		  /* 821C81E0h */ case   44:  		/* and R3, R10, R11 */
		/* 821C81E0h case   44:*/		cpu::op::and<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821C81E0h case   44:*/		return 0x821C81E4;
		  /* 821C81E4h */ case   45:  		/* bl 424188 */
		/* 821C81E4h case   45:*/		regs.LR = 0x821C81E8; return 0x8222FAE0;
		/* 821C81E4h case   45:*/		return 0x821C81E8;
		  /* 821C81E8h */ case   46:  		/* mr R4, R29 */
		/* 821C81E8h case   46:*/		regs.R4 = regs.R29;
		/* 821C81E8h case   46:*/		return 0x821C81EC;
		  /* 821C81ECh */ case   47:  		/* mr R3, R28 */
		/* 821C81ECh case   47:*/		regs.R3 = regs.R28;
		/* 821C81ECh case   47:*/		return 0x821C81F0;
		  /* 821C81F0h */ case   48:  		/* mr R5, R31 */
		/* 821C81F0h case   48:*/		regs.R5 = regs.R31;
		/* 821C81F0h case   48:*/		return 0x821C81F4;
		  /* 821C81F4h */ case   49:  		/* bl 424172 */
		/* 821C81F4h case   49:*/		regs.LR = 0x821C81F8; return 0x8222FAE0;
		/* 821C81F4h case   49:*/		return 0x821C81F8;
		  /* 821C81F8h */ case   50:  		/* mr R5, R31 */
		/* 821C81F8h case   50:*/		regs.R5 = regs.R31;
		/* 821C81F8h case   50:*/		return 0x821C81FC;
		  /* 821C81FCh */ case   51:  		/* mr R4, R27 */
		/* 821C81FCh case   51:*/		regs.R4 = regs.R27;
		/* 821C81FCh case   51:*/		return 0x821C8200;
		  /* 821C8200h */ case   52:  		/* mr R3, R28 */
		/* 821C8200h case   52:*/		regs.R3 = regs.R28;
		/* 821C8200h case   52:*/		return 0x821C8204;
		  /* 821C8204h */ case   53:  		/* bl 424156 */
		/* 821C8204h case   53:*/		regs.LR = 0x821C8208; return 0x8222FAE0;
		/* 821C8204h case   53:*/		return 0x821C8208;
		  /* 821C8208h */ case   54:  		/* mr R5, R31 */
		/* 821C8208h case   54:*/		regs.R5 = regs.R31;
		/* 821C8208h case   54:*/		return 0x821C820C;
		  /* 821C820Ch */ case   55:  		/* mr R4, R27 */
		/* 821C820Ch case   55:*/		regs.R4 = regs.R27;
		/* 821C820Ch case   55:*/		return 0x821C8210;
		  /* 821C8210h */ case   56:  		/* mr R3, R29 */
		/* 821C8210h case   56:*/		regs.R3 = regs.R29;
		/* 821C8210h case   56:*/		return 0x821C8214;
		  /* 821C8214h */ case   57:  		/* bl 424140 */
		/* 821C8214h case   57:*/		regs.LR = 0x821C8218; return 0x8222FAE0;
		/* 821C8214h case   57:*/		return 0x821C8218;
		  /* 821C8218h */ case   58:  		/* lis R11, -32252 */
		/* 821C8218h case   58:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C8218h case   58:*/		return 0x821C821C;
		  /* 821C821Ch */ case   59:  		/* li R5, 1 */
		/* 821C821Ch case   59:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C821Ch case   59:*/		return 0x821C8220;
		  /* 821C8220h */ case   60:  		/* addi R6, R11, -16172 */
		/* 821C8220h case   60:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC0D4);
		/* 821C8220h case   60:*/		return 0x821C8224;
		  /* 821C8224h */ case   61:  		/* li R4, 1 */
		/* 821C8224h case   61:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C8224h case   61:*/		return 0x821C8228;
		  /* 821C8228h */ case   62:  		/* mr R3, R31 */
		/* 821C8228h case   62:*/		regs.R3 = regs.R31;
		/* 821C8228h case   62:*/		return 0x821C822C;
		  /* 821C822Ch */ case   63:  		/* bl 382260 */
		/* 821C822Ch case   63:*/		regs.LR = 0x821C8230; return 0x82225760;
		/* 821C822Ch case   63:*/		return 0x821C8230;
		  /* 821C8230h */ case   64:  		/* lwz R11, <#[R3]> */
		/* 821C8230h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8230h case   64:*/		return 0x821C8234;
		  /* 821C8234h */ case   65:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C8234h case   65:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C8234h case   65:*/		return 0x821C8238;
		  /* 821C8238h */ case   66:  		/* lis R20, -1 */
		/* 821C8238h case   66:*/		cpu::op::lis<0>(regs,&regs.R20,0xFFFFFFFF);
		/* 821C8238h case   66:*/		return 0x821C823C;
		  /* 821C823Ch */ case   67:  		/* oris R9, R11, 8 */
		/* 821C823Ch case   67:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R11,0x8);
		/* 821C823Ch case   67:*/		return 0x821C8240;
		  /* 821C8240h */ case   68:  		/* rlwinm R11, R10, 0, 28, 24 */
		/* 821C8240h case   68:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R11,regs.R10);
		/* 821C8240h case   68:*/		return 0x821C8244;
		  /* 821C8244h */ case   69:  		/* stw R9, <#[R3]> */
		/* 821C8244h case   69:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8244h case   69:*/		return 0x821C8248;
		  /* 821C8248h */ case   70:  		/* mr R10, R9 */
		/* 821C8248h case   70:*/		regs.R10 = regs.R9;
		/* 821C8248h case   70:*/		return 0x821C824C;
		  /* 821C824Ch */ case   71:  		/* stw R11, <#[R3 + 4]> */
		/* 821C824Ch case   71:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C824Ch case   71:*/		return 0x821C8250;
		  /* 821C8250h */ case   72:  		/* mr R30, R3 */
		/* 821C8250h case   72:*/		regs.R30 = regs.R3;
		/* 821C8250h case   72:*/		return 0x821C8254;
		  /* 821C8254h */ case   73:  		/* lwz R9, <#[R31 + 56]> */
		/* 821C8254h case   73:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 821C8254h case   73:*/		return 0x821C8258;
		  /* 821C8258h */ case   74:  		/* lhz R9, <#[R9 + 62]> */
		/* 821C8258h case   74:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000003E) );
		/* 821C8258h case   74:*/		return 0x821C825C;
		  /* 821C825Ch */ case   75:  		/* rlwimi R10, R9, 20, 3, 11 */
		/* 821C825Ch case   75:*/		cpu::op::rlwimi<0,20,3,11>(regs,&regs.R10,regs.R9);
		/* 821C825Ch case   75:*/		return 0x821C8260;
		  /* 821C8260h */ case   76:  		/* stw R10, <#[R3]> */
		/* 821C8260h case   76:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8260h case   76:*/		return 0x821C8264;
		  /* 821C8264h */ case   77:  		/* lwz R9, <#[R31 + 48]> */
		/* 821C8264h case   77:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821C8264h case   77:*/		return 0x821C8268;
		  /* 821C8268h */ case   78:  		/* rlwinm R9, R9, 0, 0, 15 */
		/* 821C8268h case   78:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R9,regs.R9);
		/* 821C8268h case   78:*/		return 0x821C826C;
		  /* 821C826Ch */ case   79:  		/* cmplw CR6, R9, R20 */
		/* 821C826Ch case   79:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R20);
		/* 821C826Ch case   79:*/		return 0x821C8270;
		  /* 821C8270h */ case   80:  		/* bc 4, CR6_EQ, 20 */
		/* 821C8270h case   80:*/		if ( !regs.CR[6].eq ) { return 0x821C8284;  }
		/* 821C8270h case   80:*/		return 0x821C8274;
		  /* 821C8274h */ case   81:  		/* rlwinm R9, R10, 0, 0, 11 */
		/* 821C8274h case   81:*/		cpu::op::rlwinm<0,0,0,11>(regs,&regs.R9,regs.R10);
		/* 821C8274h case   81:*/		return 0x821C8278;
		  /* 821C8278h */ case   82:  		/* addis R9, R9, 2048 */
		/* 821C8278h case   82:*/		cpu::op::addis<0>(regs,&regs.R9,regs.R9,0x800);
		/* 821C8278h case   82:*/		return 0x821C827C;
		  /* 821C827Ch */ case   83:  		/* rlwimi R9, R10, 0, 12, 2 */
		/* 821C827Ch case   83:*/		cpu::op::rlwimi<0,0,12,2>(regs,&regs.R9,regs.R10);
		/* 821C827Ch case   83:*/		return 0x821C8280;
		  /* 821C8280h */ case   84:  		/* stw R9, <#[R3]> */
		/* 821C8280h case   84:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8280h case   84:*/		return 0x821C8284;
	}
	return 0x821C8284;
} // Block from 821C8130h-821C8284h (85 instructions)

//////////////////////////////////////////////////////
// Block at 821C8284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8284);
		  /* 821C8284h */ case    0:  		/* lwz R10, <#[R30 + 28]> */
		/* 821C8284h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C8284h case    0:*/		return 0x821C8288;
		  /* 821C8288h */ case    1:  		/* rlwimi R11, R18, 16, 7, 15 */
		/* 821C8288h case    1:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R11,regs.R18);
		/* 821C8288h case    1:*/		return 0x821C828C;
		  /* 821C828Ch */ case    2:  		/* li R6, 1 */
		/* 821C828Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C828Ch case    2:*/		return 0x821C8290;
		  /* 821C8290h */ case    3:  		/* stw R11, <#[R30 + 4]> */
		/* 821C8290h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C8290h case    3:*/		return 0x821C8294;
		  /* 821C8294h */ case    4:  		/* li R5, 1 */
		/* 821C8294h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C8294h case    4:*/		return 0x821C8298;
		  /* 821C8298h */ case    5:  		/* li R4, 0 */
		/* 821C8298h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C8298h case    5:*/		return 0x821C829C;
		  /* 821C829Ch */ case    6:  		/* mr R3, R31 */
		/* 821C829Ch case    6:*/		regs.R3 = regs.R31;
		/* 821C829Ch case    6:*/		return 0x821C82A0;
		  /* 821C82A0h */ case    7:  		/* lwz R11, <#[R10]> */
		/* 821C82A0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C82A0h case    7:*/		return 0x821C82A4;
		  /* 821C82A4h */ case    8:  		/* rlwimi R11, R18, 0, 28, 31 */
		/* 821C82A4h case    8:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R18);
		/* 821C82A4h case    8:*/		return 0x821C82A8;
		  /* 821C82A8h */ case    9:  		/* stw R11, <#[R10]> */
		/* 821C82A8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C82A8h case    9:*/		return 0x821C82AC;
		  /* 821C82ACh */ case   10:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C82ACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C82ACh case   10:*/		return 0x821C82B0;
		  /* 821C82B0h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821C82B0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C82B0h case   11:*/		return 0x821C82B4;
		  /* 821C82B4h */ case   12:  		/* rlwimi R10, R18, 18, 12, 13 */
		/* 821C82B4h case   12:*/		cpu::op::rlwimi<0,18,12,13>(regs,&regs.R10,regs.R18);
		/* 821C82B4h case   12:*/		return 0x821C82B8;
		  /* 821C82B8h */ case   13:  		/* stw R10, <#[R11]> */
		/* 821C82B8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C82B8h case   13:*/		return 0x821C82BC;
		  /* 821C82BCh */ case   14:  		/* lwz R11, <#[R30 + 28]> */
		/* 821C82BCh case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C82BCh case   14:*/		return 0x821C82C0;
		  /* 821C82C0h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821C82C0h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C82C0h case   15:*/		return 0x821C82C4;
		  /* 821C82C4h */ case   16:  		/* rlwinm R10, R10, 0, 12, 5 */
		/* 821C82C4h case   16:*/		cpu::op::rlwinm<0,0,12,5>(regs,&regs.R10,regs.R10);
		/* 821C82C4h case   16:*/		return 0x821C82C8;
		  /* 821C82C8h */ case   17:  		/* stw R10, <#[R11]> */
		/* 821C82C8h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C82C8h case   17:*/		return 0x821C82CC;
		  /* 821C82CCh */ case   18:  		/* bl 152436 */
		/* 821C82CCh case   18:*/		regs.LR = 0x821C82D0; return 0x821ED640;
		/* 821C82CCh case   18:*/		return 0x821C82D0;
		  /* 821C82D0h */ case   19:  		/* stw R3, <#[R30 + 20]> */
		/* 821C82D0h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821C82D0h case   19:*/		return 0x821C82D4;
		  /* 821C82D4h */ case   20:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C82D4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C82D4h case   20:*/		return 0x821C82D8;
		  /* 821C82D8h */ case   21:  		/* subf R11, R11, R30 */
		/* 821C82D8h case   21:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C82D8h case   21:*/		return 0x821C82DC;
		  /* 821C82DCh */ case   22:  		/* li R6, 1 */
		/* 821C82DCh case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C82DCh case   22:*/		return 0x821C82E0;
		  /* 821C82E0h */ case   23:  		/* li R5, 0 */
		/* 821C82E0h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C82E0h case   23:*/		return 0x821C82E4;
		  /* 821C82E4h */ case   24:  		/* mr R3, R31 */
		/* 821C82E4h case   24:*/		regs.R3 = regs.R31;
		/* 821C82E4h case   24:*/		return 0x821C82E8;
		  /* 821C82E8h */ case   25:  		/* divw R4, R11, R19 */
		/* 821C82E8h case   25:*/		cpu::op::divw<0>(regs,&regs.R4,regs.R11,regs.R19);
		/* 821C82E8h case   25:*/		return 0x821C82EC;
		  /* 821C82ECh */ case   26:  		/* bl 387636 */
		/* 821C82ECh case   26:*/		regs.LR = 0x821C82F0; return 0x82226D20;
		/* 821C82ECh case   26:*/		return 0x821C82F0;
		  /* 821C82F0h */ case   27:  		/* mr R22, R3 */
		/* 821C82F0h case   27:*/		regs.R22 = regs.R3;
		/* 821C82F0h case   27:*/		return 0x821C82F4;
		  /* 821C82F4h */ case   28:  		/* mr R3, R31 */
		/* 821C82F4h case   28:*/		regs.R3 = regs.R31;
		/* 821C82F4h case   28:*/		return 0x821C82F8;
		  /* 821C82F8h */ case   29:  		/* mr R4, R22 */
		/* 821C82F8h case   29:*/		regs.R4 = regs.R22;
		/* 821C82F8h case   29:*/		return 0x821C82FC;
		  /* 821C82FCh */ case   30:  		/* bl -328444 */
		/* 821C82FCh case   30:*/		regs.LR = 0x821C8300; return 0x82178000;
		/* 821C82FCh case   30:*/		return 0x821C8300;
		  /* 821C8300h */ case   31:  		/* mr R6, R3 */
		/* 821C8300h case   31:*/		regs.R6 = regs.R3;
		/* 821C8300h case   31:*/		return 0x821C8304;
		  /* 821C8304h */ case   32:  		/* addi R5, R28, 24 */
		/* 821C8304h case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x18);
		/* 821C8304h case   32:*/		return 0x821C8308;
		  /* 821C8308h */ case   33:  		/* mr R4, R28 */
		/* 821C8308h case   33:*/		regs.R4 = regs.R28;
		/* 821C8308h case   33:*/		return 0x821C830C;
		  /* 821C830Ch */ case   34:  		/* mr R3, R31 */
		/* 821C830Ch case   34:*/		regs.R3 = regs.R31;
		/* 821C830Ch case   34:*/		return 0x821C8310;
		  /* 821C8310h */ case   35:  		/* bl -26672 */
		/* 821C8310h case   35:*/		regs.LR = 0x821C8314; return 0x821C1AE0;
		/* 821C8310h case   35:*/		return 0x821C8314;
		  /* 821C8314h */ case   36:  		/* mr R4, R3 */
		/* 821C8314h case   36:*/		regs.R4 = regs.R3;
		/* 821C8314h case   36:*/		return 0x821C8318;
		  /* 821C8318h */ case   37:  		/* li R5, 7 */
		/* 821C8318h case   37:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821C8318h case   37:*/		return 0x821C831C;
		  /* 821C831Ch */ case   38:  		/* mr R3, R31 */
		/* 821C831Ch case   38:*/		regs.R3 = regs.R31;
		/* 821C831Ch case   38:*/		return 0x821C8320;
		  /* 821C8320h */ case   39:  		/* bl -359376 */
		/* 821C8320h case   39:*/		regs.LR = 0x821C8324; return 0x82170750;
		/* 821C8320h case   39:*/		return 0x821C8324;
		  /* 821C8324h */ case   40:  		/* mr R6, R3 */
		/* 821C8324h case   40:*/		regs.R6 = regs.R3;
		/* 821C8324h case   40:*/		return 0x821C8328;
		  /* 821C8328h */ case   41:  		/* addi R5, R28, 32 */
		/* 821C8328h case   41:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x20);
		/* 821C8328h case   41:*/		return 0x821C832C;
		  /* 821C832Ch */ case   42:  		/* mr R4, R28 */
		/* 821C832Ch case   42:*/		regs.R4 = regs.R28;
		/* 821C832Ch case   42:*/		return 0x821C8330;
		  /* 821C8330h */ case   43:  		/* mr R3, R31 */
		/* 821C8330h case   43:*/		regs.R3 = regs.R31;
		/* 821C8330h case   43:*/		return 0x821C8334;
		  /* 821C8334h */ case   44:  		/* bl -26132 */
		/* 821C8334h case   44:*/		regs.LR = 0x821C8338; return 0x821C1D20;
		/* 821C8334h case   44:*/		return 0x821C8338;
		  /* 821C8338h */ case   45:  		/* mr R30, R3 */
		/* 821C8338h case   45:*/		regs.R30 = regs.R3;
		/* 821C8338h case   45:*/		return 0x821C833C;
		  /* 821C833Ch */ case   46:  		/* mr R3, R31 */
		/* 821C833Ch case   46:*/		regs.R3 = regs.R31;
		/* 821C833Ch case   46:*/		return 0x821C8340;
		  /* 821C8340h */ case   47:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C8340h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C8340h case   47:*/		return 0x821C8344;
		  /* 821C8344h */ case   48:  		/* rlwimi R11, R18, 17, 13, 14 */
		/* 821C8344h case   48:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R18);
		/* 821C8344h case   48:*/		return 0x821C8348;
		  /* 821C8348h */ case   49:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C8348h case   49:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C8348h case   49:*/		return 0x821C834C;
		  /* 821C834Ch */ case   50:  		/* stw R11, <#[R30 + 8]> */
		/* 821C834Ch case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C834Ch case   50:*/		return 0x821C8350;
		  /* 821C8350h */ case   51:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C8350h case   51:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C8350h case   51:*/		return 0x821C8354;
		  /* 821C8354h */ case   52:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C8354h case   52:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C8354h case   52:*/		return 0x821C8358;
		  /* 821C8358h */ case   53:  		/* bl -409384 */
		/* 821C8358h case   53:*/		regs.LR = 0x821C835C; return 0x82164430;
		/* 821C8358h case   53:*/		return 0x821C835C;
		  /* 821C835Ch */ case   54:  		/* addi R11, R30, -16 */
		/* 821C835Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821C835Ch case   54:*/		return 0x821C8360;
		  /* 821C8360h */ case   55:  		/* stwx R27, <#[R3 + R11]> */
		/* 821C8360h case   55:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C8360h case   55:*/		return 0x821C8364;
		  /* 821C8364h */ case   56:  		/* mr R3, R31 */
		/* 821C8364h case   56:*/		regs.R3 = regs.R31;
		/* 821C8364h case   56:*/		return 0x821C8368;
		  /* 821C8368h */ case   57:  		/* bl 143288 */
		/* 821C8368h case   57:*/		regs.LR = 0x821C836C; return 0x821EB320;
		/* 821C8368h case   57:*/		return 0x821C836C;
		  /* 821C836Ch */ case   58:  		/* mr R5, R16 */
		/* 821C836Ch case   58:*/		regs.R5 = regs.R16;
		/* 821C836Ch case   58:*/		return 0x821C8370;
		  /* 821C8370h */ case   59:  		/* mr R4, R28 */
		/* 821C8370h case   59:*/		regs.R4 = regs.R28;
		/* 821C8370h case   59:*/		return 0x821C8374;
		  /* 821C8374h */ case   60:  		/* mr R3, R31 */
		/* 821C8374h case   60:*/		regs.R3 = regs.R31;
		/* 821C8374h case   60:*/		return 0x821C8378;
		  /* 821C8378h */ case   61:  		/* bl -15736 */
		/* 821C8378h case   61:*/		regs.LR = 0x821C837C; return 0x821C4600;
		/* 821C8378h case   61:*/		return 0x821C837C;
		  /* 821C837Ch */ case   62:  		/* lis R11, -32252 */
		/* 821C837Ch case   62:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821C837Ch case   62:*/		return 0x821C8380;
		  /* 821C8380h */ case   63:  		/* mr R21, R3 */
		/* 821C8380h case   63:*/		regs.R21 = regs.R3;
		/* 821C8380h case   63:*/		return 0x821C8384;
		  /* 821C8384h */ case   64:  		/* addi R6, R11, -16192 */
		/* 821C8384h case   64:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFC0C0);
		/* 821C8384h case   64:*/		return 0x821C8388;
		  /* 821C8388h */ case   65:  		/* li R5, 1 */
		/* 821C8388h case   65:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C8388h case   65:*/		return 0x821C838C;
		  /* 821C838Ch */ case   66:  		/* li R4, 1 */
		/* 821C838Ch case   66:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C838Ch case   66:*/		return 0x821C8390;
		  /* 821C8390h */ case   67:  		/* mr R3, R31 */
		/* 821C8390h case   67:*/		regs.R3 = regs.R31;
		/* 821C8390h case   67:*/		return 0x821C8394;
		  /* 821C8394h */ case   68:  		/* bl 381900 */
		/* 821C8394h case   68:*/		regs.LR = 0x821C8398; return 0x82225760;
		/* 821C8394h case   68:*/		return 0x821C8398;
		  /* 821C8398h */ case   69:  		/* lwz R9, <#[R3 + 4]> */
		/* 821C8398h case   69:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821C8398h case   69:*/		return 0x821C839C;
		  /* 821C839Ch */ case   70:  		/* li R11, 3 */
		/* 821C839Ch case   70:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821C839Ch case   70:*/		return 0x821C83A0;
		  /* 821C83A0h */ case   71:  		/* lwz R10, <#[R3]> */
		/* 821C83A0h case   71:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C83A0h case   71:*/		return 0x821C83A4;
		  /* 821C83A4h */ case   72:  		/* lwz R8, <#[R3 + 28]> */
		/* 821C83A4h case   72:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 821C83A4h case   72:*/		return 0x821C83A8;
		  /* 821C83A8h */ case   73:  		/* mr R30, R3 */
		/* 821C83A8h case   73:*/		regs.R30 = regs.R3;
		/* 821C83A8h case   73:*/		return 0x821C83AC;
		  /* 821C83ACh */ case   74:  		/* rlwimi R9, R11, 4, 25, 27 */
		/* 821C83ACh case   74:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R9,regs.R11);
		/* 821C83ACh case   74:*/		return 0x821C83B0;
		  /* 821C83B0h */ case   75:  		/* oris R10, R10, 8 */
		/* 821C83B0h case   75:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x8);
		/* 821C83B0h case   75:*/		return 0x821C83B4;
		  /* 821C83B4h */ case   76:  		/* stw R9, <#[R3 + 4]> */
		/* 821C83B4h case   76:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 821C83B4h case   76:*/		return 0x821C83B8;
		  /* 821C83B8h */ case   77:  		/* li R6, 1 */
		/* 821C83B8h case   77:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C83B8h case   77:*/		return 0x821C83BC;
		  /* 821C83BCh */ case   78:  		/* stw R10, <#[R3]> */
		/* 821C83BCh case   78:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821C83BCh case   78:*/		return 0x821C83C0;
		  /* 821C83C0h */ case   79:  		/* rlwimi R9, R18, 16, 7, 15 */
		/* 821C83C0h case   79:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R9,regs.R18);
		/* 821C83C0h case   79:*/		return 0x821C83C4;
		  /* 821C83C4h */ case   80:  		/* li R5, 1 */
		/* 821C83C4h case   80:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821C83C4h case   80:*/		return 0x821C83C8;
		  /* 821C83C8h */ case   81:  		/* lwz R11, <#[R31 + 56]> */
		/* 821C83C8h case   81:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821C83C8h case   81:*/		return 0x821C83CC;
		  /* 821C83CCh */ case   82:  		/* li R4, 33 */
		/* 821C83CCh case   82:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 821C83CCh case   82:*/		return 0x821C83D0;
		  /* 821C83D0h */ case   83:  		/* mr R3, R31 */
		/* 821C83D0h case   83:*/		regs.R3 = regs.R31;
		/* 821C83D0h case   83:*/		return 0x821C83D4;
		  /* 821C83D4h */ case   84:  		/* lhz R11, <#[R11 + 60]> */
		/* 821C83D4h case   84:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000003C) );
		/* 821C83D4h case   84:*/		return 0x821C83D8;
		  /* 821C83D8h */ case   85:  		/* stw R9, <#[R30 + 4]> */
		/* 821C83D8h case   85:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 821C83D8h case   85:*/		return 0x821C83DC;
		  /* 821C83DCh */ case   86:  		/* rlwimi R10, R11, 20, 3, 11 */
		/* 821C83DCh case   86:*/		cpu::op::rlwimi<0,20,3,11>(regs,&regs.R10,regs.R11);
		/* 821C83DCh case   86:*/		return 0x821C83E0;
		  /* 821C83E0h */ case   87:  		/* stw R10, <#[R30]> */
		/* 821C83E0h case   87:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821C83E0h case   87:*/		return 0x821C83E4;
		  /* 821C83E4h */ case   88:  		/* lwz R11, <#[R8]> */
		/* 821C83E4h case   88:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C83E4h case   88:*/		return 0x821C83E8;
		  /* 821C83E8h */ case   89:  		/* rlwimi R11, R18, 0, 28, 31 */
		/* 821C83E8h case   89:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R18);
		/* 821C83E8h case   89:*/		return 0x821C83EC;
		  /* 821C83ECh */ case   90:  		/* stw R11, <#[R8]> */
		/* 821C83ECh case   90:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C83ECh case   90:*/		return 0x821C83F0;
		  /* 821C83F0h */ case   91:  		/* bl 152144 */
		/* 821C83F0h case   91:*/		regs.LR = 0x821C83F4; return 0x821ED640;
		/* 821C83F0h case   91:*/		return 0x821C83F4;
		  /* 821C83F4h */ case   92:  		/* stw R3, <#[R30 + 20]> */
		/* 821C83F4h case   92:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821C83F4h case   92:*/		return 0x821C83F8;
		  /* 821C83F8h */ case   93:  		/* li R6, 1 */
		/* 821C83F8h case   93:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C83F8h case   93:*/		return 0x821C83FC;
		  /* 821C83FCh */ case   94:  		/* li R5, 0 */
		/* 821C83FCh case   94:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C83FCh case   94:*/		return 0x821C8400;
		  /* 821C8400h */ case   95:  		/* mr R3, R31 */
		/* 821C8400h case   95:*/		regs.R3 = regs.R31;
		/* 821C8400h case   95:*/		return 0x821C8404;
		  /* 821C8404h */ case   96:  		/* lwz R11, <#[R31 + 12]> */
		/* 821C8404h case   96:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821C8404h case   96:*/		return 0x821C8408;
		  /* 821C8408h */ case   97:  		/* subf R11, R11, R30 */
		/* 821C8408h case   97:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C8408h case   97:*/		return 0x821C840C;
		  /* 821C840Ch */ case   98:  		/* divw R4, R11, R19 */
		/* 821C840Ch case   98:*/		cpu::op::divw<0>(regs,&regs.R4,regs.R11,regs.R19);
		/* 821C840Ch case   98:*/		return 0x821C8410;
		  /* 821C8410h */ case   99:  		/* bl 387344 */
		/* 821C8410h case   99:*/		regs.LR = 0x821C8414; return 0x82226D20;
		/* 821C8410h case   99:*/		return 0x821C8414;
		  /* 821C8414h */ case  100:  		/* mr R26, R3 */
		/* 821C8414h case  100:*/		regs.R26 = regs.R3;
		/* 821C8414h case  100:*/		return 0x821C8418;
		  /* 821C8418h */ case  101:  		/* li R8, 1 */
		/* 821C8418h case  101:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C8418h case  101:*/		return 0x821C841C;
		  /* 821C841Ch */ case  102:  		/* li R7, 2 */
		/* 821C841Ch case  102:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C841Ch case  102:*/		return 0x821C8420;
		  /* 821C8420h */ case  103:  		/* li R6, 96 */
		/* 821C8420h case  103:*/		cpu::op::li<0>(regs,&regs.R6,0x60);
		/* 821C8420h case  103:*/		return 0x821C8424;
		  /* 821C8424h */ case  104:  		/* addi R5, R29, 24 */
		/* 821C8424h case  104:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R29,0x18);
		/* 821C8424h case  104:*/		return 0x821C8428;
		  /* 821C8428h */ case  105:  		/* mr R4, R29 */
		/* 821C8428h case  105:*/		regs.R4 = regs.R29;
		/* 821C8428h case  105:*/		return 0x821C842C;
		  /* 821C842Ch */ case  106:  		/* mr R3, R31 */
		/* 821C842Ch case  106:*/		regs.R3 = regs.R31;
		/* 821C842Ch case  106:*/		return 0x821C8430;
		  /* 821C8430h */ case  107:  		/* bl 378216 */
		/* 821C8430h case  107:*/		regs.LR = 0x821C8434; return 0x82224998;
		/* 821C8430h case  107:*/		return 0x821C8434;
		  /* 821C8434h */ case  108:  		/* mr R30, R3 */
		/* 821C8434h case  108:*/		regs.R30 = regs.R3;
		/* 821C8434h case  108:*/		return 0x821C8438;
		  /* 821C8438h */ case  109:  		/* mr R4, R21 */
		/* 821C8438h case  109:*/		regs.R4 = regs.R21;
		/* 821C8438h case  109:*/		return 0x821C843C;
		  /* 821C843Ch */ case  110:  		/* mr R3, R31 */
		/* 821C843Ch case  110:*/		regs.R3 = regs.R31;
		/* 821C843Ch case  110:*/		return 0x821C8440;
		  /* 821C8440h */ case  111:  		/* bl -328768 */
		/* 821C8440h case  111:*/		regs.LR = 0x821C8444; return 0x82178000;
		/* 821C8440h case  111:*/		return 0x821C8444;
		  /* 821C8444h */ case  112:  		/* mr R4, R3 */
		/* 821C8444h case  112:*/		regs.R4 = regs.R3;
		/* 821C8444h case  112:*/		return 0x821C8448;
		  /* 821C8448h */ case  113:  		/* mr R3, R30 */
		/* 821C8448h case  113:*/		regs.R3 = regs.R30;
		/* 821C8448h case  113:*/		return 0x821C844C;
		  /* 821C844Ch */ case  114:  		/* bl -328324 */
		/* 821C844Ch case  114:*/		regs.LR = 0x821C8450; return 0x821781C8;
		/* 821C844Ch case  114:*/		return 0x821C8450;
		  /* 821C8450h */ case  115:  		/* stw R3, <#[R30 + 44]> */
		/* 821C8450h case  115:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C8450h case  115:*/		return 0x821C8454;
		  /* 821C8454h */ case  116:  		/* mr R4, R26 */
		/* 821C8454h case  116:*/		regs.R4 = regs.R26;
		/* 821C8454h case  116:*/		return 0x821C8458;
		  /* 821C8458h */ case  117:  		/* mr R3, R31 */
		/* 821C8458h case  117:*/		regs.R3 = regs.R31;
		/* 821C8458h case  117:*/		return 0x821C845C;
		  /* 821C845Ch */ case  118:  		/* bl -328796 */
		/* 821C845Ch case  118:*/		regs.LR = 0x821C8460; return 0x82178000;
		/* 821C845Ch case  118:*/		return 0x821C8460;
		  /* 821C8460h */ case  119:  		/* mr R4, R3 */
		/* 821C8460h case  119:*/		regs.R4 = regs.R3;
		/* 821C8460h case  119:*/		return 0x821C8464;
		  /* 821C8464h */ case  120:  		/* mr R3, R30 */
		/* 821C8464h case  120:*/		regs.R3 = regs.R30;
		/* 821C8464h case  120:*/		return 0x821C8468;
		  /* 821C8468h */ case  121:  		/* bl -328352 */
		/* 821C8468h case  121:*/		regs.LR = 0x821C846C; return 0x821781C8;
		/* 821C8468h case  121:*/		return 0x821C846C;
		  /* 821C846Ch */ case  122:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C846Ch case  122:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C846Ch case  122:*/		return 0x821C8470;
		  /* 821C8470h */ case  123:  		/* stw R3, <#[R30 + 48]> */
		/* 821C8470h case  123:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C8470h case  123:*/		return 0x821C8474;
		  /* 821C8474h */ case  124:  		/* mr R3, R31 */
		/* 821C8474h case  124:*/		regs.R3 = regs.R31;
		/* 821C8474h case  124:*/		return 0x821C8478;
		  /* 821C8478h */ case  125:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C8478h case  125:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C8478h case  125:*/		return 0x821C847C;
		  /* 821C847Ch */ case  126:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C847Ch case  126:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C847Ch case  126:*/		return 0x821C8480;
		  /* 821C8480h */ case  127:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C8480h case  127:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C8480h case  127:*/		return 0x821C8484;
		  /* 821C8484h */ case  128:  		/* bl -409684 */
		/* 821C8484h case  128:*/		regs.LR = 0x821C8488; return 0x82164430;
		/* 821C8484h case  128:*/		return 0x821C8488;
		  /* 821C8488h */ case  129:  		/* addi R11, R30, -20 */
		/* 821C8488h case  129:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFEC);
		/* 821C8488h case  129:*/		return 0x821C848C;
		  /* 821C848Ch */ case  130:  		/* li R10, 265 */
		/* 821C848Ch case  130:*/		cpu::op::li<0>(regs,&regs.R10,0x109);
		/* 821C848Ch case  130:*/		return 0x821C8490;
		  /* 821C8490h */ case  131:  		/* add R11, R3, R11 */
		/* 821C8490h case  131:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C8490h case  131:*/		return 0x821C8494;
		  /* 821C8494h */ case  132:  		/* mr R4, R27 */
		/* 821C8494h case  132:*/		regs.R4 = regs.R27;
		/* 821C8494h case  132:*/		return 0x821C8498;
		  /* 821C8498h */ case  133:  		/* mr R3, R31 */
		/* 821C8498h case  133:*/		regs.R3 = regs.R31;
		/* 821C8498h case  133:*/		return 0x821C849C;
		  /* 821C849Ch */ case  134:  		/* lwz R9, <#[R11 + 4]> */
		/* 821C849Ch case  134:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C849Ch case  134:*/		return 0x821C84A0;
		  /* 821C84A0h */ case  135:  		/* lwz R8, <#[R11 + 12]> */
		/* 821C84A0h case  135:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C84A0h case  135:*/		return 0x821C84A4;
		  /* 821C84A4h */ case  136:  		/* lwz R7, <#[R11]> */
		/* 821C84A4h case  136:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C84A4h case  136:*/		return 0x821C84A8;
		  /* 821C84A8h */ case  137:  		/* rlwimi R9, R10, 13, 18, 18 */
		/* 821C84A8h case  137:*/		cpu::op::rlwimi<0,13,18,18>(regs,&regs.R9,regs.R10);
		/* 821C84A8h case  137:*/		return 0x821C84AC;
		  /* 821C84ACh */ case  138:  		/* ori R8, R8, 255 */
		/* 821C84ACh case  138:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xFF);
		/* 821C84ACh case  138:*/		return 0x821C84B0;
		  /* 821C84B0h */ case  139:  		/* stb R18, <#[R11 + 11]> */
		/* 821C84B0h case  139:*/		cpu::mem::store8( regs, regs.R18, (uint32)(regs.R11 + 0x0000000B) );
		/* 821C84B0h case  139:*/		return 0x821C84B4;
		  /* 821C84B4h */ case  140:  		/* oris R7, R7, 8 */
		/* 821C84B4h case  140:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R7,0x8);
		/* 821C84B4h case  140:*/		return 0x821C84B8;
		  /* 821C84B8h */ case  141:  		/* rlwimi R9, R10, 13, 10, 15 */
		/* 821C84B8h case  141:*/		cpu::op::rlwimi<0,13,10,15>(regs,&regs.R9,regs.R10);
		/* 821C84B8h case  141:*/		return 0x821C84BC;
		  /* 821C84BCh */ case  142:  		/* stw R8, <#[R11 + 12]> */
		/* 821C84BCh case  142:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C84BCh case  142:*/		return 0x821C84C0;
		  /* 821C84C0h */ case  143:  		/* stw R7, <#[R11]> */
		/* 821C84C0h case  143:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C84C0h case  143:*/		return 0x821C84C4;
		  /* 821C84C4h */ case  144:  		/* stw R9, <#[R11 + 4]> */
		/* 821C84C4h case  144:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821C84C4h case  144:*/		return 0x821C84C8;
		  /* 821C84C8h */ case  145:  		/* bl 378232 */
		/* 821C84C8h case  145:*/		regs.LR = 0x821C84CC; return 0x82224A40;
		/* 821C84C8h case  145:*/		return 0x821C84CC;
		  /* 821C84CCh */ case  146:  		/* mr R25, R3 */
		/* 821C84CCh case  146:*/		regs.R25 = regs.R3;
		/* 821C84CCh case  146:*/		return 0x821C84D0;
		  /* 821C84D0h */ case  147:  		/* mr R4, R30 */
		/* 821C84D0h case  147:*/		regs.R4 = regs.R30;
		/* 821C84D0h case  147:*/		return 0x821C84D4;
		  /* 821C84D4h */ case  148:  		/* mr R3, R31 */
		/* 821C84D4h case  148:*/		regs.R3 = regs.R31;
		/* 821C84D4h case  148:*/		return 0x821C84D8;
		  /* 821C84D8h */ case  149:  		/* bl -328920 */
		/* 821C84D8h case  149:*/		regs.LR = 0x821C84DC; return 0x82178000;
		/* 821C84D8h case  149:*/		return 0x821C84DC;
		  /* 821C84DCh */ case  150:  		/* mr R4, R3 */
		/* 821C84DCh case  150:*/		regs.R4 = regs.R3;
		/* 821C84DCh case  150:*/		return 0x821C84E0;
		  /* 821C84E0h */ case  151:  		/* mr R3, R25 */
		/* 821C84E0h case  151:*/		regs.R3 = regs.R25;
		/* 821C84E0h case  151:*/		return 0x821C84E4;
		  /* 821C84E4h */ case  152:  		/* bl -328476 */
		/* 821C84E4h case  152:*/		regs.LR = 0x821C84E8; return 0x821781C8;
		/* 821C84E4h case  152:*/		return 0x821C84E8;
		  /* 821C84E8h */ case  153:  		/* lwz R30, <#[R31 + 4]> */
		/* 821C84E8h case  153:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 821C84E8h case  153:*/		return 0x821C84EC;
		  /* 821C84ECh */ case  154:  		/* rlwinm R29, R30, 0, 31, 31 */
		/* 821C84ECh case  154:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R29,regs.R30);
		/* 821C84ECh case  154:*/		return 0x821C84F0;
		  /* 821C84F0h */ case  155:  		/* addic R11, R29, -1 */
		/* 821C84F0h case  155:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821C84F0h case  155:*/		return 0x821C84F4;
		  /* 821C84F4h */ case  156:  		/* subfe R11, R11, R11 */
		/* 821C84F4h case  156:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C84F4h case  156:*/		return 0x821C84F8;
		  /* 821C84F8h */ case  157:  		/* and R11, R11, R30 */
		/* 821C84F8h case  157:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C84F8h case  157:*/		return 0x821C84FC;
		  /* 821C84FCh */ case  158:  		/* lwz R11, <#[R11 + 20]> */
		/* 821C84FCh case  158:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821C84FCh case  158:*/		return 0x821C8500;
		  /* 821C8500h */ case  159:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C8500h case  159:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C8500h case  159:*/		return 0x821C8504;
		  /* 821C8504h */ case  160:  		/* addic R11, R29, -1 */
		/* 821C8504h case  160:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821C8504h case  160:*/		return 0x821C8508;
		  /* 821C8508h */ case  161:  		/* subfe R11, R11, R11 */
		/* 821C8508h case  161:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C8508h case  161:*/		return 0x821C850C;
		  /* 821C850Ch */ case  162:  		/* and R11, R11, R30 */
		/* 821C850Ch case  162:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C850Ch case  162:*/		return 0x821C8510;
		  /* 821C8510h */ case  163:  		/* bc 12, CR0_EQ, 56 */
		/* 821C8510h case  163:*/		if ( regs.CR[0].eq ) { return 0x821C8548;  }
		/* 821C8510h case  163:*/		return 0x821C8514;
		  /* 821C8514h */ case  164:  		/* lwz R11, <#[R11 + 28]> */
		/* 821C8514h case  164:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821C8514h case  164:*/		return 0x821C8518;
		  /* 821C8518h */ case  165:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C8518h case  165:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8518h case  165:*/		return 0x821C851C;
		  /* 821C851Ch */ case  166:  		/* addic R10, R10, -1 */
		/* 821C851Ch case  166:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C851Ch case  166:*/		return 0x821C8520;
		  /* 821C8520h */ case  167:  		/* subfe R10, R10, R10 */
		/* 821C8520h case  167:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C8520h case  167:*/		return 0x821C8524;
		  /* 821C8524h */ case  168:  		/* addic R9, R29, -1 */
		/* 821C8524h case  168:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R29,0xFFFFFFFF);
		/* 821C8524h case  168:*/		return 0x821C8528;
		  /* 821C8528h */ case  169:  		/* and R24, R10, R11 */
		/* 821C8528h case  169:*/		cpu::op::and<0>(regs,&regs.R24,regs.R10,regs.R11);
		/* 821C8528h case  169:*/		return 0x821C852C;
		  /* 821C852Ch */ case  170:  		/* subfe R11, R9, R9 */
		/* 821C852Ch case  170:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R9);
		/* 821C852Ch case  170:*/		return 0x821C8530;
		  /* 821C8530h */ case  171:  		/* and R11, R11, R30 */
		/* 821C8530h case  171:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C8530h case  171:*/		return 0x821C8534;
		  /* 821C8534h */ case  172:  		/* addi R23, R11, 24 */
		/* 821C8534h case  172:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x18);
		/* 821C8534h case  172:*/		return 0x821C8538;
		  /* 821C8538h */ case  173:  		/* b 52 */
		/* 821C8538h case  173:*/		return 0x821C856C;
		/* 821C8538h case  173:*/		return 0x821C853C;
	}
	return 0x821C853C;
} // Block from 821C8284h-821C853Ch (174 instructions)

//////////////////////////////////////////////////////
// Block at 821C853Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C853C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C853C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C853C);
		  /* 821C853Ch */ case    0:  		/* li R4, 4800 */
		/* 821C853Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C853Ch case    0:*/		return 0x821C8540;
		  /* 821C8540h */ case    1:  		/* mr R3, R31 */
		/* 821C8540h case    1:*/		regs.R3 = regs.R31;
		/* 821C8540h case    1:*/		return 0x821C8544;
		  /* 821C8544h */ case    2:  		/* bl -485084 */
		/* 821C8544h case    2:*/		regs.LR = 0x821C8548; return 0x82151E68;
		/* 821C8544h case    2:*/		return 0x821C8548;
	}
	return 0x821C8548;
} // Block from 821C853Ch-821C8548h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8548);
		  /* 821C8548h */ case    0:  		/* lwz R11, <#[R11 + 20]> */
		/* 821C8548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821C8548h case    0:*/		return 0x821C854C;
		  /* 821C854Ch */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C854Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C854Ch case    1:*/		return 0x821C8550;
		  /* 821C8550h */ case    2:  		/* addic R10, R10, -1 */
		/* 821C8550h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C8550h case    2:*/		return 0x821C8554;
		  /* 821C8554h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821C8554h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C8554h case    3:*/		return 0x821C8558;
		  /* 821C8558h */ case    4:  		/* addic R9, R29, -1 */
		/* 821C8558h case    4:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R29,0xFFFFFFFF);
		/* 821C8558h case    4:*/		return 0x821C855C;
		  /* 821C855Ch */ case    5:  		/* and R24, R10, R11 */
		/* 821C855Ch case    5:*/		cpu::op::and<0>(regs,&regs.R24,regs.R10,regs.R11);
		/* 821C855Ch case    5:*/		return 0x821C8560;
		  /* 821C8560h */ case    6:  		/* subfe R11, R9, R9 */
		/* 821C8560h case    6:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R9);
		/* 821C8560h case    6:*/		return 0x821C8564;
		  /* 821C8564h */ case    7:  		/* and R11, R11, R30 */
		/* 821C8564h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C8564h case    7:*/		return 0x821C8568;
		  /* 821C8568h */ case    8:  		/* addi R23, R11, 16 */
		/* 821C8568h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x10);
		/* 821C8568h case    8:*/		return 0x821C856C;
	}
	return 0x821C856C;
} // Block from 821C8548h-821C856Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C856Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C856C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C856C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C856C);
		  /* 821C856Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821C856Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821C856Ch case    0:*/		return 0x821C8570;
		  /* 821C8570h */ case    1:  		/* bc 12, CR6_EQ, 280 */
		/* 821C8570h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C8688;  }
		/* 821C8570h case    1:*/		return 0x821C8574;
		  /* 821C8574h */ case    2:  		/* addi R11, R24, 4 */
		/* 821C8574h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x4);
		/* 821C8574h case    2:*/		return 0x821C8578;
		  /* 821C8578h */ case    3:  		/* lwz R27, <#[R11]> */
		/* 821C8578h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8578h case    3:*/		return 0x821C857C;
		  /* 821C857Ch */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 821C857Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C857Ch case    4:*/		return 0x821C8580;
		  /* 821C8580h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 821C8580h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C85DC;  }
		/* 821C8580h case    5:*/		return 0x821C8584;
		  /* 821C8584h */ case    6:  		/* lwz R26, <#[R27 + 16]> */
		/* 821C8584h case    6:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x00000010) );
		/* 821C8584h case    6:*/		return 0x821C8588;
		  /* 821C8588h */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 821C8588h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C8588h case    7:*/		return 0x821C858C;
		  /* 821C858Ch */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 821C858Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821C85D4;  }
		/* 821C858Ch case    8:*/		return 0x821C8590;
		  /* 821C8590h */ case    9:  		/* lwz R11, <#[R26 + 8]> */
		/* 821C8590h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C8590h case    9:*/		return 0x821C8594;
		  /* 821C8594h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C8594h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C8594h case   10:*/		return 0x821C8598;
		  /* 821C8598h */ case   11:  		/* cmplwi CR6, R11, 14336 */
		/* 821C8598h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821C8598h case   11:*/		return 0x821C859C;
		  /* 821C859Ch */ case   12:  		/* bc 4, CR6_EQ, 56 */
		/* 821C859Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821C85D4;  }
		/* 821C859Ch case   12:*/		return 0x821C85A0;
		  /* 821C85A0h */ case   13:  		/* li R6, 1 */
		/* 821C85A0h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C85A0h case   13:*/		return 0x821C85A4;
		  /* 821C85A4h */ case   14:  		/* li R5, 0 */
		/* 821C85A4h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C85A4h case   14:*/		return 0x821C85A8;
		  /* 821C85A8h */ case   15:  		/* li R4, 112 */
		/* 821C85A8h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821C85A8h case   15:*/		return 0x821C85AC;
		  /* 821C85ACh */ case   16:  		/* mr R3, R31 */
		/* 821C85ACh case   16:*/		regs.R3 = regs.R31;
		/* 821C85ACh case   16:*/		return 0x821C85B0;
		  /* 821C85B0h */ case   17:  		/* bl -409984 */
		/* 821C85B0h case   17:*/		regs.LR = 0x821C85B4; return 0x82164430;
		/* 821C85B0h case   17:*/		return 0x821C85B4;
		  /* 821C85B4h */ case   18:  		/* addi R11, R26, -8 */
		/* 821C85B4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFF8);
		/* 821C85B4h case   18:*/		return 0x821C85B8;
		  /* 821C85B8h */ case   19:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C85B8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C85B8h case   19:*/		return 0x821C85BC;
		  /* 821C85BCh */ case   20:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 821C85BCh case   20:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 821C85BCh case   20:*/		return 0x821C85C0;
		  /* 821C85C0h */ case   21:  		/* bc 12, CR0_EQ, 20 */
		/* 821C85C0h case   21:*/		if ( regs.CR[0].eq ) { return 0x821C85D4;  }
		/* 821C85C0h case   21:*/		return 0x821C85C4;
		  /* 821C85C4h */ case   22:  		/* lwz R10, <#[R31 + 612]> */
		/* 821C85C4h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000264) );
		/* 821C85C4h case   22:*/		return 0x821C85C8;
		  /* 821C85C8h */ case   23:  		/* rlwinm R11, R11, 0, 17, 31 */
		/* 821C85C8h case   23:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R11,regs.R11);
		/* 821C85C8h case   23:*/		return 0x821C85CC;
		  /* 821C85CCh */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 821C85CCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C85CCh case   24:*/		return 0x821C85D0;
		  /* 821C85D0h */ case   25:  		/* bc 12, CR6_EQ, 108 */
		/* 821C85D0h case   25:*/		if ( regs.CR[6].eq ) { return 0x821C863C;  }
		/* 821C85D0h case   25:*/		return 0x821C85D4;
	}
	return 0x821C85D4;
} // Block from 821C856Ch-821C85D4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821C85D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C85D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C85D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C85D4);
		  /* 821C85D4h */ case    0:  		/* addi R11, R27, 8 */
		/* 821C85D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x8);
		/* 821C85D4h case    0:*/		return 0x821C85D8;
		  /* 821C85D8h */ case    1:  		/* b -96 */
		/* 821C85D8h case    1:*/		return 0x821C8578;
		/* 821C85D8h case    1:*/		return 0x821C85DC;
	}
	return 0x821C85DC;
} // Block from 821C85D4h-821C85DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C85DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C85DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C85DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C85DC);
		  /* 821C85DCh */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821C85DCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821C85DCh case    0:*/		return 0x821C85E0;
		  /* 821C85E0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C85E0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C85E0h case    1:*/		return 0x821C85E4;
		  /* 821C85E4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C85E4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C85E4h case    2:*/		return 0x821C85E8;
		  /* 821C85E8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C85E8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C85F8;  }
		/* 821C85E8h case    3:*/		return 0x821C85EC;
		  /* 821C85ECh */ case    4:  		/* mr R24, R11 */
		/* 821C85ECh case    4:*/		regs.R24 = regs.R11;
		/* 821C85ECh case    4:*/		return 0x821C85F0;
		  /* 821C85F0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C85F0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C85F0h case    5:*/		return 0x821C85F4;
		  /* 821C85F4h */ case    6:  		/* bc 4, CR6_EQ, -128 */
		/* 821C85F4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C8574;  }
		/* 821C85F4h case    6:*/		return 0x821C85F8;
	}
	return 0x821C85F8;
} // Block from 821C85DCh-821C85F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C85F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C85F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C85F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C85F8);
		  /* 821C85F8h */ case    0:  		/* addic R11, R29, -1 */
		/* 821C85F8h case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821C85F8h case    0:*/		return 0x821C85FC;
		  /* 821C85FCh */ case    1:  		/* subfe R11, R11, R11 */
		/* 821C85FCh case    1:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C85FCh case    1:*/		return 0x821C8600;
		  /* 821C8600h */ case    2:  		/* and R11, R11, R30 */
		/* 821C8600h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C8600h case    2:*/		return 0x821C8604;
		  /* 821C8604h */ case    3:  		/* addi R11, R11, 24 */
		/* 821C8604h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x18);
		/* 821C8604h case    3:*/		return 0x821C8608;
		  /* 821C8608h */ case    4:  		/* cmplw CR6, R23, R11 */
		/* 821C8608h case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821C8608h case    4:*/		return 0x821C860C;
		  /* 821C860Ch */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 821C860Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821C8688;  }
		/* 821C860Ch case    5:*/		return 0x821C8610;
		  /* 821C8610h */ case    6:  		/* addic R11, R29, -1 */
		/* 821C8610h case    6:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821C8610h case    6:*/		return 0x821C8614;
		  /* 821C8614h */ case    7:  		/* subfe R11, R11, R11 */
		/* 821C8614h case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821C8614h case    7:*/		return 0x821C8618;
		  /* 821C8618h */ case    8:  		/* and R11, R11, R30 */
		/* 821C8618h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821C8618h case    8:*/		return 0x821C861C;
		  /* 821C861Ch */ case    9:  		/* addi R23, R11, 24 */
		/* 821C861Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x18);
		/* 821C861Ch case    9:*/		return 0x821C8620;
		  /* 821C8620h */ case   10:  		/* lwz R11, <#[R11 + 28]> */
		/* 821C8620h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821C8620h case   10:*/		return 0x821C8624;
		  /* 821C8624h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8624h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8624h case   11:*/		return 0x821C8628;
		  /* 821C8628h */ case   12:  		/* bc 4, CR0_EQ, 96 */
		/* 821C8628h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821C8688;  }
		/* 821C8628h case   12:*/		return 0x821C862C;
		  /* 821C862Ch */ case   13:  		/* mr R24, R11 */
		/* 821C862Ch case   13:*/		regs.R24 = regs.R11;
		/* 821C862Ch case   13:*/		return 0x821C8630;
		  /* 821C8630h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821C8630h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8630h case   14:*/		return 0x821C8634;
		  /* 821C8634h */ case   15:  		/* bc 4, CR0_EQ, -192 */
		/* 821C8634h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821C8574;  }
		/* 821C8634h case   15:*/		return 0x821C8638;
		  /* 821C8638h */ case   16:  		/* b 80 */
		/* 821C8638h case   16:*/		return 0x821C8688;
		/* 821C8638h case   16:*/		return 0x821C863C;
	}
	return 0x821C863C;
} // Block from 821C85F8h-821C863Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821C863Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C863C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C863C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C863C);
		  /* 821C863Ch */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821C863Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821C863Ch case    0:*/		return 0x821C8640;
		  /* 821C8640h */ case    1:  		/* mr R10, R26 */
		/* 821C8640h case    1:*/		regs.R10 = regs.R26;
		/* 821C8640h case    1:*/		return 0x821C8644;
		  /* 821C8644h */ case    2:  		/* b 12 */
		/* 821C8644h case    2:*/		return 0x821C8650;
		/* 821C8644h case    2:*/		return 0x821C8648;
		  /* 821C8648h */ case    3:  		/* addi R10, R11, 4 */
		/* 821C8648h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C8648h case    3:*/		return 0x821C864C;
		  /* 821C864Ch */ case    4:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C864Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C864Ch case    4:*/		return 0x821C8650;
	}
	return 0x821C8650;
} // Block from 821C863Ch-821C8650h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C8650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8650);
		  /* 821C8650h */ case    0:  		/* cmplw CR6, R11, R27 */
		/* 821C8650h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821C8650h case    0:*/		return 0x821C8654;
		  /* 821C8654h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C8654h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C8648;  }
		/* 821C8654h case    1:*/		return 0x821C8658;
		  /* 821C8658h */ case    2:  		/* lwz R11, <#[R27 + 4]> */
		/* 821C8658h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821C8658h case    2:*/		return 0x821C865C;
		  /* 821C865Ch */ case    3:  		/* mr R4, R25 */
		/* 821C865Ch case    3:*/		regs.R4 = regs.R25;
		/* 821C865Ch case    3:*/		return 0x821C8660;
		  /* 821C8660h */ case    4:  		/* mr R3, R31 */
		/* 821C8660h case    4:*/		regs.R3 = regs.R31;
		/* 821C8660h case    4:*/		return 0x821C8664;
		  /* 821C8664h */ case    5:  		/* stw R11, <#[R10]> */
		/* 821C8664h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821C8664h case    5:*/		return 0x821C8668;
		  /* 821C8668h */ case    6:  		/* lwz R11, <#[R25]> */
		/* 821C8668h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821C8668h case    6:*/		return 0x821C866C;
		  /* 821C866Ch */ case    7:  		/* stw R11, <#[R27 + 4]> */
		/* 821C866Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821C866Ch case    7:*/		return 0x821C8670;
		  /* 821C8670h */ case    8:  		/* stw R27, <#[R25]> */
		/* 821C8670h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R25 + 0x00000000) );
		/* 821C8670h case    8:*/		return 0x821C8674;
		  /* 821C8674h */ case    9:  		/* stw R25, <#[R27 + 16]> */
		/* 821C8674h case    9:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R27 + 0x00000010) );
		/* 821C8674h case    9:*/		return 0x821C8678;
		  /* 821C8678h */ case   10:  		/* bl -329336 */
		/* 821C8678h case   10:*/		regs.LR = 0x821C867C; return 0x82178000;
		/* 821C8678h case   10:*/		return 0x821C867C;
		  /* 821C867Ch */ case   11:  		/* mr R4, R3 */
		/* 821C867Ch case   11:*/		regs.R4 = regs.R3;
		/* 821C867Ch case   11:*/		return 0x821C8680;
		  /* 821C8680h */ case   12:  		/* mr R3, R26 */
		/* 821C8680h case   12:*/		regs.R3 = regs.R26;
		/* 821C8680h case   12:*/		return 0x821C8684;
		  /* 821C8684h */ case   13:  		/* bl -328892 */
		/* 821C8684h case   13:*/		regs.LR = 0x821C8688; return 0x821781C8;
		/* 821C8684h case   13:*/		return 0x821C8688;
	}
	return 0x821C8688;
} // Block from 821C8650h-821C8688h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C8688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8688);
		  /* 821C8688h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C8688h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C8688h case    0:*/		return 0x821C868C;
		  /* 821C868Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C868Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C868Ch case    1:*/		return 0x821C8690;
		  /* 821C8690h */ case    2:  		/* bc 4, CR0_EQ, 1744 */
		/* 821C8690h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C8D60;  }
		/* 821C8690h case    2:*/		return 0x821C8694;
		  /* 821C8694h */ case    3:  		/* mr R25, R11 */
		/* 821C8694h case    3:*/		regs.R25 = regs.R11;
		/* 821C8694h case    3:*/		return 0x821C8698;
		  /* 821C8698h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C8698h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8698h case    4:*/		return 0x821C869C;
		  /* 821C869Ch */ case    5:  		/* bc 12, CR0_EQ, 1732 */
		/* 821C869Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821C8D60;  }
		/* 821C869Ch case    5:*/		return 0x821C86A0;
		  /* 821C86A0h */ case    6:  		/* lwz R11, <#[R25 + 36]> */
		/* 821C86A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 821C86A0h case    6:*/		return 0x821C86A4;
		  /* 821C86A4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C86A4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C86A4h case    7:*/		return 0x821C86A8;
		  /* 821C86A8h */ case    8:  		/* bc 4, CR0_EQ, 88 */
		/* 821C86A8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C8700;  }
		/* 821C86A8h case    8:*/		return 0x821C86AC;
		  /* 821C86ACh */ case    9:  		/* lwz R11, <#[R25 + 32]> */
		/* 821C86ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000020) );
		/* 821C86ACh case    9:*/		return 0x821C86B0;
		  /* 821C86B0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C86B0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C86B0h case   10:*/		return 0x821C86B4;
		  /* 821C86B4h */ case   11:  		/* addic. R11, R11, -40 */
		/* 821C86B4h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821C86B4h case   11:*/		return 0x821C86B8;
		  /* 821C86B8h */ case   12:  		/* bc 12, CR0_EQ, 72 */
		/* 821C86B8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821C8700;  }
		/* 821C86B8h case   12:*/		return 0x821C86BC;
		  /* 821C86BCh */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C86BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C86BCh case   13:*/		return 0x821C86C0;
		  /* 821C86C0h */ case   14:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C86C0h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C86C0h case   14:*/		return 0x821C86C4;
		  /* 821C86C4h */ case   15:  		/* cmplwi CR6, R11, 10624 */
		/* 821C86C4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 821C86C4h case   15:*/		return 0x821C86C8;
		  /* 821C86C8h */ case   16:  		/* bc 4, CR6_EQ, 56 */
		/* 821C86C8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C8700;  }
		/* 821C86C8h case   16:*/		return 0x821C86CC;
		  /* 821C86CCh */ case   17:  		/* lwz R11, <#[R25 + 8]> */
		/* 821C86CCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821C86CCh case   17:*/		return 0x821C86D0;
		  /* 821C86D0h */ case   18:  		/* li R4, 0 */
		/* 821C86D0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C86D0h case   18:*/		return 0x821C86D4;
		  /* 821C86D4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821C86D4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C86D4h case   19:*/		return 0x821C86D8;
		  /* 821C86D8h */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 821C86D8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821C86E0;  }
		/* 821C86D8h case   20:*/		return 0x821C86DC;
		  /* 821C86DCh */ case   21:  		/* lwz R4, <#[R11 + 4]> */
		/* 821C86DCh case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821C86DCh case   21:*/		return 0x821C86E0;
	}
	return 0x821C86E0;
} // Block from 821C8688h-821C86E0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C86E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C86E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C86E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C86E0);
		  /* 821C86E0h */ case    0:  		/* mr R5, R25 */
		/* 821C86E0h case    0:*/		regs.R5 = regs.R25;
		/* 821C86E0h case    0:*/		return 0x821C86E4;
		  /* 821C86E4h */ case    1:  		/* mr R6, R22 */
		/* 821C86E4h case    1:*/		regs.R6 = regs.R22;
		/* 821C86E4h case    1:*/		return 0x821C86E8;
		  /* 821C86E8h */ case    2:  		/* mr R7, R14 */
		/* 821C86E8h case    2:*/		regs.R7 = regs.R14;
		/* 821C86E8h case    2:*/		return 0x821C86EC;
		  /* 821C86ECh */ case    3:  		/* mr R8, R21 */
		/* 821C86ECh case    3:*/		regs.R8 = regs.R21;
		/* 821C86ECh case    3:*/		return 0x821C86F0;
		  /* 821C86F0h */ case    4:  		/* mr R9, R15 */
		/* 821C86F0h case    4:*/		regs.R9 = regs.R15;
		/* 821C86F0h case    4:*/		return 0x821C86F4;
		  /* 821C86F4h */ case    5:  		/* mr R3, R31 */
		/* 821C86F4h case    5:*/		regs.R3 = regs.R31;
		/* 821C86F4h case    5:*/		return 0x821C86F8;
		  /* 821C86F8h */ case    6:  		/* bl -16120 */
		/* 821C86F8h case    6:*/		regs.LR = 0x821C86FC; return 0x821C4800;
		/* 821C86F8h case    6:*/		return 0x821C86FC;
		  /* 821C86FCh */ case    7:  		/* b 1608 */
		/* 821C86FCh case    7:*/		return 0x821C8D44;
		/* 821C86FCh case    7:*/		return 0x821C8700;
	}
	return 0x821C8700;
} // Block from 821C86E0h-821C8700h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C8700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8700);
		  /* 821C8700h */ case    0:  		/* lwz R11, <#[R25 + 68]> */
		/* 821C8700h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000044) );
		/* 821C8700h case    0:*/		return 0x821C8704;
		  /* 821C8704h */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821C8704h case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821C8704h case    1:*/		return 0x821C8708;
		  /* 821C8708h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821C8708h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C8728;  }
		/* 821C8708h case    2:*/		return 0x821C870C;
		  /* 821C870Ch */ case    3:  		/* lwz R11, <#[R25 + 12]> */
		/* 821C870Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821C870Ch case    3:*/		return 0x821C8710;
		  /* 821C8710h */ case    4:  		/* li R5, 0 */
		/* 821C8710h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8710h case    4:*/		return 0x821C8714;
		  /* 821C8714h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C8714h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8714h case    5:*/		return 0x821C8718;
		  /* 821C8718h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821C8718h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C8720;  }
		/* 821C8718h case    6:*/		return 0x821C871C;
		  /* 821C871Ch */ case    7:  		/* lwz R5, <#[R11]> */
		/* 821C871Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 821C871Ch case    7:*/		return 0x821C8720;
	}
	return 0x821C8720;
} // Block from 821C8700h-821C8720h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C8720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8720);
		  /* 821C8720h */ case    0:  		/* mr R4, R25 */
		/* 821C8720h case    0:*/		regs.R4 = regs.R25;
		/* 821C8720h case    0:*/		return 0x821C8724;
		  /* 821C8724h */ case    1:  		/* b -64 */
		/* 821C8724h case    1:*/		return 0x821C86E4;
		/* 821C8724h case    1:*/		return 0x821C8728;
	}
	return 0x821C8728;
} // Block from 821C8720h-821C8728h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C8728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8728);
		  /* 821C8728h */ case    0:  		/* lwz R11, <#[R25 + 76]> */
		/* 821C8728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821C8728h case    0:*/		return 0x821C872C;
		  /* 821C872Ch */ case    1:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821C872Ch case    1:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821C872Ch case    1:*/		return 0x821C8730;
		  /* 821C8730h */ case    2:  		/* bc 12, CR0_EQ, 1556 */
		/* 821C8730h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C8D44;  }
		/* 821C8730h case    2:*/		return 0x821C8734;
		  /* 821C8734h */ case    3:  		/* lwz R11, <#[R25 + 28]> */
		/* 821C8734h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821C8734h case    3:*/		return 0x821C8738;
		  /* 821C8738h */ case    4:  		/* li R23, 0 */
		/* 821C8738h case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821C8738h case    4:*/		return 0x821C873C;
		  /* 821C873Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C873Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C873Ch case    5:*/		return 0x821C8740;
		  /* 821C8740h */ case    6:  		/* bc 4, CR0_EQ, 1540 */
		/* 821C8740h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821C8D44;  }
		/* 821C8740h case    6:*/		return 0x821C8744;
		  /* 821C8744h */ case    7:  		/* mr R24, R11 */
		/* 821C8744h case    7:*/		regs.R24 = regs.R11;
		/* 821C8744h case    7:*/		return 0x821C8748;
		  /* 821C8748h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821C8748h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8748h case    8:*/		return 0x821C874C;
		  /* 821C874Ch */ case    9:  		/* bc 12, CR0_EQ, 1528 */
		/* 821C874Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821C8D44;  }
		/* 821C874Ch case    9:*/		return 0x821C8750;
		  /* 821C8750h */ case   10:  		/* lwz R11, <#[R24 + 8]> */
		/* 821C8750h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821C8750h case   10:*/		return 0x821C8754;
		  /* 821C8754h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C8754h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C8754h case   11:*/		return 0x821C8758;
		  /* 821C8758h */ case   12:  		/* cmplwi CR6, R11, 12032 */
		/* 821C8758h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002F00);
		/* 821C8758h case   12:*/		return 0x821C875C;
		  /* 821C875Ch */ case   13:  		/* bc 4, CR6_EQ, 1484 */
		/* 821C875Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x821C8D28;  }
		/* 821C875Ch case   13:*/		return 0x821C8760;
		  /* 821C8760h */ case   14:  		/* li R6, 0 */
		/* 821C8760h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C8760h case   14:*/		return 0x821C8764;
		  /* 821C8764h */ case   15:  		/* li R5, 0 */
		/* 821C8764h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8764h case   15:*/		return 0x821C8768;
		  /* 821C8768h */ case   16:  		/* li R4, 94 */
		/* 821C8768h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x5E);
		/* 821C8768h case   16:*/		return 0x821C876C;
		  /* 821C876Ch */ case   17:  		/* mr R3, R31 */
		/* 821C876Ch case   17:*/		regs.R3 = regs.R31;
		/* 821C876Ch case   17:*/		return 0x821C8770;
		  /* 821C8770h */ case   18:  		/* bl -410432 */
		/* 821C8770h case   18:*/		regs.LR = 0x821C8774; return 0x82164430;
		/* 821C8770h case   18:*/		return 0x821C8774;
		  /* 821C8774h */ case   19:  		/* addi R11, R24, -8 */
		/* 821C8774h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xFFFFFFF8);
		/* 821C8774h case   19:*/		return 0x821C8778;
		  /* 821C8778h */ case   20:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C8778h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C8778h case   20:*/		return 0x821C877C;
		  /* 821C877Ch */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821C877Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C877Ch case   21:*/		return 0x821C8780;
		  /* 821C8780h */ case   22:  		/* bc 12, CR6_EQ, 1448 */
		/* 821C8780h case   22:*/		if ( regs.CR[6].eq ) { return 0x821C8D28;  }
		/* 821C8780h case   22:*/		return 0x821C8784;
		  /* 821C8784h */ case   23:  		/* lwz R11, <#[R25 + 76]> */
		/* 821C8784h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000004C) );
		/* 821C8784h case   23:*/		return 0x821C8788;
		  /* 821C8788h */ case   24:  		/* mr R27, R25 */
		/* 821C8788h case   24:*/		regs.R27 = regs.R25;
		/* 821C8788h case   24:*/		return 0x821C878C;
		  /* 821C878Ch */ case   25:  		/* b 68 */
		/* 821C878Ch case   25:*/		return 0x821C87D0;
		/* 821C878Ch case   25:*/		return 0x821C8790;
		  /* 821C8790h */ case   26:  		/* lwz R10, <#[R27 + 8]> */
		/* 821C8790h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821C8790h case   26:*/		return 0x821C8794;
		  /* 821C8794h */ case   27:  		/* cmplwi CR6, R10, 0 */
		/* 821C8794h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C8794h case   27:*/		return 0x821C8798;
		  /* 821C8798h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 821C8798h case   28:*/		if ( regs.CR[6].eq ) { return 0x821C87AC;  }
		/* 821C8798h case   28:*/		return 0x821C879C;
		  /* 821C879Ch */ case   29:  		/* lwz R11, <#[R10 + 12]> */
		/* 821C879Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821C879Ch case   29:*/		return 0x821C87A0;
		  /* 821C87A0h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821C87A0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C87A0h case   30:*/		return 0x821C87A4;
		  /* 821C87A4h */ case   31:  		/* mr R11, R18 */
		/* 821C87A4h case   31:*/		regs.R11 = regs.R18;
		/* 821C87A4h case   31:*/		return 0x821C87A8;
		  /* 821C87A8h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 821C87A8h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821C87B0;  }
		/* 821C87A8h case   32:*/		return 0x821C87AC;
	}
	return 0x821C87AC;
} // Block from 821C8728h-821C87ACh (33 instructions)

//////////////////////////////////////////////////////
// Block at 821C87ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C87AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C87AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C87AC);
		  /* 821C87ACh */ case    0:  		/* li R11, 0 */
		/* 821C87ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C87ACh case    0:*/		return 0x821C87B0;
	}
	return 0x821C87B0;
} // Block from 821C87ACh-821C87B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C87B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C87B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C87B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C87B0);
		  /* 821C87B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C87B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C87B0h case    0:*/		return 0x821C87B4;
		  /* 821C87B4h */ case    1:  		/* bc 4, CR0_EQ, 1536 */
		/* 821C87B4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C8DB4;  }
		/* 821C87B4h case    1:*/		return 0x821C87B8;
		  /* 821C87B8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821C87B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C87B8h case    2:*/		return 0x821C87BC;
		  /* 821C87BCh */ case    3:  		/* bc 12, CR6_EQ, 1540 */
		/* 821C87BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821C8DC0;  }
		/* 821C87BCh case    3:*/		return 0x821C87C0;
		  /* 821C87C0h */ case    4:  		/* lwz R27, <#[R10 + 4]> */
		/* 821C87C0h case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R10 + 0x00000004) );
		/* 821C87C0h case    4:*/		return 0x821C87C4;
		  /* 821C87C4h */ case    5:  		/* cmplwi CR6, R27, 0 */
		/* 821C87C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821C87C4h case    5:*/		return 0x821C87C8;
		  /* 821C87C8h */ case    6:  		/* bc 12, CR6_EQ, 1528 */
		/* 821C87C8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C8DC0;  }
		/* 821C87C8h case    6:*/		return 0x821C87CC;
		  /* 821C87CCh */ case    7:  		/* lwz R11, <#[R27 + 76]> */
		/* 821C87CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 821C87CCh case    7:*/		return 0x821C87D0;
	}
	return 0x821C87D0;
} // Block from 821C87B0h-821C87D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C87D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C87D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C87D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C87D0);
		  /* 821C87D0h */ case    0:  		/* rlwinm. R11, R11, 0, 11, 11 */
		/* 821C87D0h case    0:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R11,regs.R11);
		/* 821C87D0h case    0:*/		return 0x821C87D4;
		  /* 821C87D4h */ case    1:  		/* bc 12, CR0_EQ, -68 */
		/* 821C87D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C8790;  }
		/* 821C87D4h case    1:*/		return 0x821C87D8;
		  /* 821C87D8h */ case    2:  		/* cmplwi CR6, R23, 0 */
		/* 821C87D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821C87D8h case    2:*/		return 0x821C87DC;
		  /* 821C87DCh */ case    3:  		/* bc 4, CR6_EQ, 340 */
		/* 821C87DCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C8930;  }
		/* 821C87DCh case    3:*/		return 0x821C87E0;
		  /* 821C87E0h */ case    4:  		/* lwz R11, <#[R25 + 12]> */
		/* 821C87E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821C87E0h case    4:*/		return 0x821C87E4;
		  /* 821C87E4h */ case    5:  		/* li R29, 0 */
		/* 821C87E4h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821C87E4h case    5:*/		return 0x821C87E8;
		  /* 821C87E8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821C87E8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C87E8h case    6:*/		return 0x821C87EC;
		  /* 821C87ECh */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 821C87ECh case    7:*/		if ( regs.CR[6].eq ) { return 0x821C87F4;  }
		/* 821C87ECh case    7:*/		return 0x821C87F0;
		  /* 821C87F0h */ case    8:  		/* lwz R29, <#[R11]> */
		/* 821C87F0h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821C87F0h case    8:*/		return 0x821C87F4;
	}
	return 0x821C87F4;
} // Block from 821C87D0h-821C87F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C87F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C87F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C87F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C87F4);
		  /* 821C87F4h */ case    0:  		/* mr R3, R31 */
		/* 821C87F4h case    0:*/		regs.R3 = regs.R31;
		/* 821C87F4h case    0:*/		return 0x821C87F8;
		  /* 821C87F8h */ case    1:  		/* bl -374976 */
		/* 821C87F8h case    1:*/		regs.LR = 0x821C87FC; return 0x8216CF38;
		/* 821C87F8h case    1:*/		return 0x821C87FC;
		  /* 821C87FCh */ case    2:  		/* lwz R7, <#[R3 + 76]> */
		/* 821C87FCh case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x0000004C) );
		/* 821C87FCh case    2:*/		return 0x821C8800;
		  /* 821C8800h */ case    3:  		/* lwz R9, <#[R25 + 76]> */
		/* 821C8800h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x0000004C) );
		/* 821C8800h case    3:*/		return 0x821C8804;
		  /* 821C8804h */ case    4:  		/* rlwinm R8, R25, 0, 0, 30 */
		/* 821C8804h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R25);
		/* 821C8804h case    4:*/		return 0x821C8808;
		  /* 821C8808h */ case    5:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821C8808h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821C8808h case    5:*/		return 0x821C880C;
		  /* 821C880Ch */ case    6:  		/* rlwimi R9, R7, 0, 0, 12 */
		/* 821C880Ch case    6:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R9,regs.R7);
		/* 821C880Ch case    6:*/		return 0x821C8810;
		  /* 821C8810h */ case    7:  		/* addi R10, R11, 4 */
		/* 821C8810h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821C8810h case    7:*/		return 0x821C8814;
		  /* 821C8814h */ case    8:  		/* stw R9, <#[R3 + 76]> */
		/* 821C8814h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x0000004C) );
		/* 821C8814h case    8:*/		return 0x821C8818;
		  /* 821C8818h */ case    9:  		/* mr R28, R3 */
		/* 821C8818h case    9:*/		regs.R28 = regs.R3;
		/* 821C8818h case    9:*/		return 0x821C881C;
		  /* 821C881Ch */ case   10:  		/* lwz R9, <#[R8]> */
		/* 821C881Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821C881Ch case   10:*/		return 0x821C8820;
		  /* 821C8820h */ case   11:  		/* addi R4, R25, 16 */
		/* 821C8820h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R25,0x10);
		/* 821C8820h case   11:*/		return 0x821C8824;
		  /* 821C8824h */ case   12:  		/* stw R9, <#[R11]> */
		/* 821C8824h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8824h case   12:*/		return 0x821C8828;
		  /* 821C8828h */ case   13:  		/* addi R3, R3, 16 */
		/* 821C8828h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x10);
		/* 821C8828h case   13:*/		return 0x821C882C;
		  /* 821C882Ch */ case   14:  		/* lwz R9, <#[R8]> */
		/* 821C882Ch case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 821C882Ch case   14:*/		return 0x821C8830;
		  /* 821C8830h */ case   15:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821C8830h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821C8830h case   15:*/		return 0x821C8834;
		  /* 821C8834h */ case   16:  		/* stw R11, <#[R9]> */
		/* 821C8834h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821C8834h case   16:*/		return 0x821C8838;
		  /* 821C8838h */ case   17:  		/* stw R8, <#[R11 + 4]> */
		/* 821C8838h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8838h case   17:*/		return 0x821C883C;
		  /* 821C883Ch */ case   18:  		/* stw R10, <#[R8]> */
		/* 821C883Ch case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C883Ch case   18:*/		return 0x821C8840;
		  /* 821C8840h */ case   19:  		/* bl -322312 */
		/* 821C8840h case   19:*/		regs.LR = 0x821C8844; return 0x82179D38;
		/* 821C8840h case   19:*/		return 0x821C8844;
		  /* 821C8844h */ case   20:  		/* lwz R11, <#[R28 + 20]> */
		/* 821C8844h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821C8844h case   20:*/		return 0x821C8848;
		  /* 821C8848h */ case   21:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8848h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8848h case   21:*/		return 0x821C884C;
		  /* 821C884Ch */ case   22:  		/* bc 4, CR0_EQ, 40 */
		/* 821C884Ch case   22:*/		if ( !regs.CR[0].eq ) { return 0x821C8874;  }
		/* 821C884Ch case   22:*/		return 0x821C8850;
		  /* 821C8850h */ case   23:  		/* cmplwi CR0, R11, 0 */
		/* 821C8850h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8850h case   23:*/		return 0x821C8854;
		  /* 821C8854h */ case   24:  		/* bc 12, CR0_EQ, 32 */
		/* 821C8854h case   24:*/		if ( regs.CR[0].eq ) { return 0x821C8874;  }
		/* 821C8854h case   24:*/		return 0x821C8858;
		  /* 821C8858h */ case   25:  		/* stw R28, <#[R11 + 28]> */
		/* 821C8858h case   25:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000001C) );
		/* 821C8858h case   25:*/		return 0x821C885C;
		  /* 821C885Ch */ case   26:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C885Ch case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C885Ch case   26:*/		return 0x821C8860;
		  /* 821C8860h */ case   27:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C8860h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C8860h case   27:*/		return 0x821C8864;
		  /* 821C8864h */ case   28:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8864h case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8864h case   28:*/		return 0x821C8868;
		  /* 821C8868h */ case   29:  		/* bc 4, CR0_EQ, 12 */
		/* 821C8868h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821C8874;  }
		/* 821C8868h case   29:*/		return 0x821C886C;
		  /* 821C886Ch */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821C886Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C886Ch case   30:*/		return 0x821C8870;
		  /* 821C8870h */ case   31:  		/* bc 4, CR6_EQ, -24 */
		/* 821C8870h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821C8858;  }
		/* 821C8870h case   31:*/		return 0x821C8874;
	}
	return 0x821C8874;
} // Block from 821C87F4h-821C8874h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821C8874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8874);
		  /* 821C8874h */ case    0:  		/* mr R4, R22 */
		/* 821C8874h case    0:*/		regs.R4 = regs.R22;
		/* 821C8874h case    0:*/		return 0x821C8878;
		  /* 821C8878h */ case    1:  		/* mr R3, R31 */
		/* 821C8878h case    1:*/		regs.R3 = regs.R31;
		/* 821C8878h case    1:*/		return 0x821C887C;
		  /* 821C887Ch */ case    2:  		/* bl -329852 */
		/* 821C887Ch case    2:*/		regs.LR = 0x821C8880; return 0x82178000;
		/* 821C887Ch case    2:*/		return 0x821C8880;
		  /* 821C8880h */ case    3:  		/* mr R6, R3 */
		/* 821C8880h case    3:*/		regs.R6 = regs.R3;
		/* 821C8880h case    3:*/		return 0x821C8884;
		  /* 821C8884h */ case    4:  		/* addi R5, R28, 24 */
		/* 821C8884h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x18);
		/* 821C8884h case    4:*/		return 0x821C8888;
		  /* 821C8888h */ case    5:  		/* mr R4, R28 */
		/* 821C8888h case    5:*/		regs.R4 = regs.R28;
		/* 821C8888h case    5:*/		return 0x821C888C;
		  /* 821C888Ch */ case    6:  		/* mr R3, R31 */
		/* 821C888Ch case    6:*/		regs.R3 = regs.R31;
		/* 821C888Ch case    6:*/		return 0x821C8890;
		  /* 821C8890h */ case    7:  		/* bl -28080 */
		/* 821C8890h case    7:*/		regs.LR = 0x821C8894; return 0x821C1AE0;
		/* 821C8890h case    7:*/		return 0x821C8894;
		  /* 821C8894h */ case    8:  		/* mr R23, R3 */
		/* 821C8894h case    8:*/		regs.R23 = regs.R3;
		/* 821C8894h case    8:*/		return 0x821C8898;
		  /* 821C8898h */ case    9:  		/* mr R4, R3 */
		/* 821C8898h case    9:*/		regs.R4 = regs.R3;
		/* 821C8898h case    9:*/		return 0x821C889C;
		  /* 821C889Ch */ case   10:  		/* li R5, 7 */
		/* 821C889Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 821C889Ch case   10:*/		return 0x821C88A0;
		  /* 821C88A0h */ case   11:  		/* mr R3, R31 */
		/* 821C88A0h case   11:*/		regs.R3 = regs.R31;
		/* 821C88A0h case   11:*/		return 0x821C88A4;
		  /* 821C88A4h */ case   12:  		/* bl -360788 */
		/* 821C88A4h case   12:*/		regs.LR = 0x821C88A8; return 0x82170750;
		/* 821C88A4h case   12:*/		return 0x821C88A8;
		  /* 821C88A8h */ case   13:  		/* mr R6, R3 */
		/* 821C88A8h case   13:*/		regs.R6 = regs.R3;
		/* 821C88A8h case   13:*/		return 0x821C88AC;
		  /* 821C88ACh */ case   14:  		/* addi R5, R28, 32 */
		/* 821C88ACh case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x20);
		/* 821C88ACh case   14:*/		return 0x821C88B0;
		  /* 821C88B0h */ case   15:  		/* mr R4, R28 */
		/* 821C88B0h case   15:*/		regs.R4 = regs.R28;
		/* 821C88B0h case   15:*/		return 0x821C88B4;
		  /* 821C88B4h */ case   16:  		/* mr R3, R31 */
		/* 821C88B4h case   16:*/		regs.R3 = regs.R31;
		/* 821C88B4h case   16:*/		return 0x821C88B8;
		  /* 821C88B8h */ case   17:  		/* bl -27544 */
		/* 821C88B8h case   17:*/		regs.LR = 0x821C88BC; return 0x821C1D20;
		/* 821C88B8h case   17:*/		return 0x821C88BC;
		  /* 821C88BCh */ case   18:  		/* mr R30, R3 */
		/* 821C88BCh case   18:*/		regs.R30 = regs.R3;
		/* 821C88BCh case   18:*/		return 0x821C88C0;
		  /* 821C88C0h */ case   19:  		/* mr R3, R31 */
		/* 821C88C0h case   19:*/		regs.R3 = regs.R31;
		/* 821C88C0h case   19:*/		return 0x821C88C4;
		  /* 821C88C4h */ case   20:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C88C4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C88C4h case   20:*/		return 0x821C88C8;
		  /* 821C88C8h */ case   21:  		/* rlwimi R11, R18, 17, 13, 14 */
		/* 821C88C8h case   21:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R11,regs.R18);
		/* 821C88C8h case   21:*/		return 0x821C88CC;
		  /* 821C88CCh */ case   22:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C88CCh case   22:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C88CCh case   22:*/		return 0x821C88D0;
		  /* 821C88D0h */ case   23:  		/* stw R11, <#[R30 + 8]> */
		/* 821C88D0h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C88D0h case   23:*/		return 0x821C88D4;
		  /* 821C88D4h */ case   24:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C88D4h case   24:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C88D4h case   24:*/		return 0x821C88D8;
		  /* 821C88D8h */ case   25:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C88D8h case   25:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C88D8h case   25:*/		return 0x821C88DC;
		  /* 821C88DCh */ case   26:  		/* bl -410796 */
		/* 821C88DCh case   26:*/		regs.LR = 0x821C88E0; return 0x82164430;
		/* 821C88DCh case   26:*/		return 0x821C88E0;
		  /* 821C88E0h */ case   27:  		/* addi R11, R30, -16 */
		/* 821C88E0h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821C88E0h case   27:*/		return 0x821C88E4;
		  /* 821C88E4h */ case   28:  		/* mr R5, R31 */
		/* 821C88E4h case   28:*/		regs.R5 = regs.R31;
		/* 821C88E4h case   28:*/		return 0x821C88E8;
		  /* 821C88E8h */ case   29:  		/* mr R4, R25 */
		/* 821C88E8h case   29:*/		regs.R4 = regs.R25;
		/* 821C88E8h case   29:*/		return 0x821C88EC;
		  /* 821C88ECh */ case   30:  		/* stwx R29, <#[R3 + R11]> */
		/* 821C88ECh case   30:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C88ECh case   30:*/		return 0x821C88F0;
		  /* 821C88F0h */ case   31:  		/* mr R3, R27 */
		/* 821C88F0h case   31:*/		regs.R3 = regs.R27;
		/* 821C88F0h case   31:*/		return 0x821C88F4;
		  /* 821C88F4h */ case   32:  		/* bl 422004 */
		/* 821C88F4h case   32:*/		regs.LR = 0x821C88F8; return 0x8222F968;
		/* 821C88F4h case   32:*/		return 0x821C88F8;
		  /* 821C88F8h */ case   33:  		/* mr R5, R31 */
		/* 821C88F8h case   33:*/		regs.R5 = regs.R31;
		/* 821C88F8h case   33:*/		return 0x821C88FC;
		  /* 821C88FCh */ case   34:  		/* mr R4, R28 */
		/* 821C88FCh case   34:*/		regs.R4 = regs.R28;
		/* 821C88FCh case   34:*/		return 0x821C8900;
		  /* 821C8900h */ case   35:  		/* mr R3, R27 */
		/* 821C8900h case   35:*/		regs.R3 = regs.R27;
		/* 821C8900h case   35:*/		return 0x821C8904;
		  /* 821C8904h */ case   36:  		/* bl 422364 */
		/* 821C8904h case   36:*/		regs.LR = 0x821C8908; return 0x8222FAE0;
		/* 821C8904h case   36:*/		return 0x821C8908;
		  /* 821C8908h */ case   37:  		/* mr R5, R31 */
		/* 821C8908h case   37:*/		regs.R5 = regs.R31;
		/* 821C8908h case   37:*/		return 0x821C890C;
		  /* 821C890Ch */ case   38:  		/* mr R4, R25 */
		/* 821C890Ch case   38:*/		regs.R4 = regs.R25;
		/* 821C890Ch case   38:*/		return 0x821C8910;
		  /* 821C8910h */ case   39:  		/* mr R3, R28 */
		/* 821C8910h case   39:*/		regs.R3 = regs.R28;
		/* 821C8910h case   39:*/		return 0x821C8914;
		  /* 821C8914h */ case   40:  		/* bl 422348 */
		/* 821C8914h case   40:*/		regs.LR = 0x821C8918; return 0x8222FAE0;
		/* 821C8914h case   40:*/		return 0x821C8918;
		  /* 821C8918h */ case   41:  		/* mr R5, R31 */
		/* 821C8918h case   41:*/		regs.R5 = regs.R31;
		/* 821C8918h case   41:*/		return 0x821C891C;
		  /* 821C891Ch */ case   42:  		/* mr R4, R29 */
		/* 821C891Ch case   42:*/		regs.R4 = regs.R29;
		/* 821C891Ch case   42:*/		return 0x821C8920;
		  /* 821C8920h */ case   43:  		/* mr R3, R28 */
		/* 821C8920h case   43:*/		regs.R3 = regs.R28;
		/* 821C8920h case   43:*/		return 0x821C8924;
		  /* 821C8924h */ case   44:  		/* bl 422332 */
		/* 821C8924h case   44:*/		regs.LR = 0x821C8928; return 0x8222FAE0;
		/* 821C8924h case   44:*/		return 0x821C8928;
		  /* 821C8928h */ case   45:  		/* mr R3, R31 */
		/* 821C8928h case   45:*/		regs.R3 = regs.R31;
		/* 821C8928h case   45:*/		return 0x821C892C;
		  /* 821C892Ch */ case   46:  		/* bl 141812 */
		/* 821C892Ch case   46:*/		regs.LR = 0x821C8930; return 0x821EB320;
		/* 821C892Ch case   46:*/		return 0x821C8930;
	}
	return 0x821C8930;
} // Block from 821C8874h-821C8930h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821C8930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8930);
		  /* 821C8930h */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 821C8930h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821C8930h case    0:*/		return 0x821C8934;
		  /* 821C8934h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8934h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8934h case    1:*/		return 0x821C8938;
		  /* 821C8938h */ case    2:  		/* bc 4, CR0_EQ, 1172 */
		/* 821C8938h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C8DCC;  }
		/* 821C8938h case    2:*/		return 0x821C893C;
		  /* 821C893Ch */ case    3:  		/* mr R26, R11 */
		/* 821C893Ch case    3:*/		regs.R26 = regs.R11;
		/* 821C893Ch case    3:*/		return 0x821C8940;
		  /* 821C8940h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C8940h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8940h case    4:*/		return 0x821C8944;
		  /* 821C8944h */ case    5:  		/* bc 12, CR0_EQ, 1160 */
		/* 821C8944h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C8DCC;  }
		/* 821C8944h case    5:*/		return 0x821C8948;
		  /* 821C8948h */ case    6:  		/* lwz R11, <#[R26 + 8]> */
		/* 821C8948h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C8948h case    6:*/		return 0x821C894C;
		  /* 821C894Ch */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C894Ch case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C894Ch case    7:*/		return 0x821C8950;
		  /* 821C8950h */ case    8:  		/* cmplwi CR6, R11, 13312 */
		/* 821C8950h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003400);
		/* 821C8950h case    8:*/		return 0x821C8954;
		  /* 821C8954h */ case    9:  		/* bc 4, CR6_EQ, 52 */
		/* 821C8954h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C8988;  }
		/* 821C8954h case    9:*/		return 0x821C8958;
		  /* 821C8958h */ case   10:  		/* lwz R11, <#[R26 + 8]> */
		/* 821C8958h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821C8958h case   10:*/		return 0x821C895C;
		  /* 821C895Ch */ case   11:  		/* mr R3, R31 */
		/* 821C895Ch case   11:*/		regs.R3 = regs.R31;
		/* 821C895Ch case   11:*/		return 0x821C8960;
		  /* 821C8960h */ case   12:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C8960h case   12:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C8960h case   12:*/		return 0x821C8964;
		  /* 821C8964h */ case   13:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C8964h case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C8964h case   13:*/		return 0x821C8968;
		  /* 821C8968h */ case   14:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C8968h case   14:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C8968h case   14:*/		return 0x821C896C;
		  /* 821C896Ch */ case   15:  		/* bl -410940 */
		/* 821C896Ch case   15:*/		regs.LR = 0x821C8970; return 0x82164430;
		/* 821C896Ch case   15:*/		return 0x821C8970;
		  /* 821C8970h */ case   16:  		/* addi R11, R26, -8 */
		/* 821C8970h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFF8);
		/* 821C8970h case   16:*/		return 0x821C8974;
		  /* 821C8974h */ case   17:  		/* lwz R10, <#[R31 + 612]> */
		/* 821C8974h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000264) );
		/* 821C8974h case   17:*/		return 0x821C8978;
		  /* 821C8978h */ case   18:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C8978h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C8978h case   18:*/		return 0x821C897C;
		  /* 821C897Ch */ case   19:  		/* rlwinm R11, R11, 0, 17, 31 */
		/* 821C897Ch case   19:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R11,regs.R11);
		/* 821C897Ch case   19:*/		return 0x821C8980;
		  /* 821C8980h */ case   20:  		/* cmplw CR6, R10, R11 */
		/* 821C8980h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C8980h case   20:*/		return 0x821C8984;
		  /* 821C8984h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 821C8984h case   21:*/		if ( regs.CR[6].eq ) { return 0x821C89A4;  }
		/* 821C8984h case   21:*/		return 0x821C8988;
	}
	return 0x821C8988;
} // Block from 821C8930h-821C8988h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C8988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8988);
		  /* 821C8988h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821C8988h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821C8988h case    0:*/		return 0x821C898C;
		  /* 821C898Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C898Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C898Ch case    1:*/		return 0x821C8990;
		  /* 821C8990h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8990h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8990h case    2:*/		return 0x821C8994;
		  /* 821C8994h */ case    3:  		/* bc 4, CR0_EQ, 1080 */
		/* 821C8994h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C8DCC;  }
		/* 821C8994h case    3:*/		return 0x821C8998;
		  /* 821C8998h */ case    4:  		/* mr R26, R11 */
		/* 821C8998h case    4:*/		regs.R26 = regs.R11;
		/* 821C8998h case    4:*/		return 0x821C899C;
		  /* 821C899Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C899Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C899Ch case    5:*/		return 0x821C89A0;
		  /* 821C89A0h */ case    6:  		/* bc 4, CR6_EQ, -88 */
		/* 821C89A0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C8948;  }
		/* 821C89A0h case    6:*/		return 0x821C89A4;
	}
	return 0x821C89A4;
} // Block from 821C8988h-821C89A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C89A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C89A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C89A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C89A4);
		  /* 821C89A4h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821C89A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821C89A4h case    0:*/		return 0x821C89A8;
		  /* 821C89A8h */ case    1:  		/* bc 12, CR6_EQ, 1060 */
		/* 821C89A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C8DCC;  }
		/* 821C89A8h case    1:*/		return 0x821C89AC;
		  /* 821C89ACh */ case    2:  		/* li R4, 2 */
		/* 821C89ACh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C89ACh case    2:*/		return 0x821C89B0;
		  /* 821C89B0h */ case    3:  		/* mr R3, R24 */
		/* 821C89B0h case    3:*/		regs.R3 = regs.R24;
		/* 821C89B0h case    3:*/		return 0x821C89B4;
		  /* 821C89B4h */ case    4:  		/* bl -44484 */
		/* 821C89B4h case    4:*/		regs.LR = 0x821C89B8; return 0x821BDBF0;
		/* 821C89B4h case    4:*/		return 0x821C89B8;
		  /* 821C89B8h */ case    5:  		/* lwz R29, <#[R3 + 16]> */
		/* 821C89B8h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000010) );
		/* 821C89B8h case    5:*/		return 0x821C89BC;
		  /* 821C89BCh */ case    6:  		/* mr R27, R3 */
		/* 821C89BCh case    6:*/		regs.R27 = regs.R3;
		/* 821C89BCh case    6:*/		return 0x821C89C0;
		  /* 821C89C0h */ case    7:  		/* lwz R11, <#[R29 + 4]> */
		/* 821C89C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821C89C0h case    7:*/		return 0x821C89C4;
		  /* 821C89C4h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821C89C4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C89C4h case    8:*/		return 0x821C89C8;
		  /* 821C89C8h */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 821C89C8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C89EC;  }
		/* 821C89C8h case    9:*/		return 0x821C89CC;
		  /* 821C89CCh */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C89CCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C89CCh case   10:*/		return 0x821C89D0;
		  /* 821C89D0h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821C89D0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C89D0h case   11:*/		return 0x821C89D4;
		  /* 821C89D4h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821C89D4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821C89E4;  }
		/* 821C89D4h case   12:*/		return 0x821C89D8;
		  /* 821C89D8h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821C89D8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C89D8h case   13:*/		return 0x821C89DC;
		  /* 821C89DCh */ case   14:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821C89DCh case   14:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821C89DCh case   14:*/		return 0x821C89E0;
		  /* 821C89E0h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821C89E0h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821C89EC;  }
		/* 821C89E0h case   15:*/		return 0x821C89E4;
	}
	return 0x821C89E4;
} // Block from 821C89A4h-821C89E4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C89E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C89E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C89E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C89E4);
		  /* 821C89E4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C89E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C89E4h case    0:*/		return 0x821C89E8;
		  /* 821C89E8h */ case    1:  		/* b -36 */
		/* 821C89E8h case    1:*/		return 0x821C89C4;
		/* 821C89E8h case    1:*/		return 0x821C89EC;
	}
	return 0x821C89EC;
} // Block from 821C89E4h-821C89ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C89ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C89EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C89EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C89EC);
		  /* 821C89ECh */ case    0:  		/* li R4, 2 */
		/* 821C89ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C89ECh case    0:*/		return 0x821C89F0;
		  /* 821C89F0h */ case    1:  		/* lwz R19, <#[R11 + 16]> */
		/* 821C89F0h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R11 + 0x00000010) );
		/* 821C89F0h case    1:*/		return 0x821C89F4;
		  /* 821C89F4h */ case    2:  		/* mr R3, R31 */
		/* 821C89F4h case    2:*/		regs.R3 = regs.R31;
		/* 821C89F4h case    2:*/		return 0x821C89F8;
		  /* 821C89F8h */ case    3:  		/* fmr FR4, FR31 */
		/* 821C89F8h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C89F8h case    3:*/		return 0x821C89FC;
		  /* 821C89FCh */ case    4:  		/* fmr FR3, FR31 */
		/* 821C89FCh case    4:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C89FCh case    4:*/		return 0x821C8A00;
		  /* 821C8A00h */ case    5:  		/* fmr FR2, FR30 */
		/* 821C8A00h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR30);
		/* 821C8A00h case    5:*/		return 0x821C8A04;
		  /* 821C8A04h */ case    6:  		/* fmr FR1, FR31 */
		/* 821C8A04h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C8A04h case    6:*/		return 0x821C8A08;
		  /* 821C8A08h */ case    7:  		/* bl 401744 */
		/* 821C8A08h case    7:*/		regs.LR = 0x821C8A0C; return 0x8222AB58;
		/* 821C8A08h case    7:*/		return 0x821C8A0C;
		  /* 821C8A0Ch */ case    8:  		/* mr R17, R3 */
		/* 821C8A0Ch case    8:*/		regs.R17 = regs.R3;
		/* 821C8A0Ch case    8:*/		return 0x821C8A10;
		  /* 821C8A10h */ case    9:  		/* lwz R4, <#[R24 + 28]> */
		/* 821C8A10h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x0000001C) );
		/* 821C8A10h case    9:*/		return 0x821C8A14;
		  /* 821C8A14h */ case   10:  		/* li R8, 4 */
		/* 821C8A14h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 821C8A14h case   10:*/		return 0x821C8A18;
		  /* 821C8A18h */ case   11:  		/* li R7, 3 */
		/* 821C8A18h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821C8A18h case   11:*/		return 0x821C8A1C;
		  /* 821C8A1Ch */ case   12:  		/* li R6, 105 */
		/* 821C8A1Ch case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x69);
		/* 821C8A1Ch case   12:*/		return 0x821C8A20;
		  /* 821C8A20h */ case   13:  		/* li R5, 0 */
		/* 821C8A20h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8A20h case   13:*/		return 0x821C8A24;
		  /* 821C8A24h */ case   14:  		/* mr R3, R31 */
		/* 821C8A24h case   14:*/		regs.R3 = regs.R31;
		/* 821C8A24h case   14:*/		return 0x821C8A28;
		  /* 821C8A28h */ case   15:  		/* bl 376688 */
		/* 821C8A28h case   15:*/		regs.LR = 0x821C8A2C; return 0x82224998;
		/* 821C8A28h case   15:*/		return 0x821C8A2C;
		  /* 821C8A2Ch */ case   16:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821C8A2Ch case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821C8A2Ch case   16:*/		return 0x821C8A30;
		  /* 821C8A30h */ case   17:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C8A30h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C8A30h case   17:*/		return 0x821C8A34;
		  /* 821C8A34h */ case   18:  		/* addi R11, R11, 36 */
		/* 821C8A34h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C8A34h case   18:*/		return 0x821C8A38;
		  /* 821C8A38h */ case   19:  		/* addi R10, R10, 36 */
		/* 821C8A38h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C8A38h case   19:*/		return 0x821C8A3C;
		  /* 821C8A3Ch */ case   20:  		/* addi R9, R11, 4 */
		/* 821C8A3Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821C8A3Ch case   20:*/		return 0x821C8A40;
		  /* 821C8A40h */ case   21:  		/* addi R8, R10, 4 */
		/* 821C8A40h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821C8A40h case   21:*/		return 0x821C8A44;
		  /* 821C8A44h */ case   22:  		/* addi R6, R10, -36 */
		/* 821C8A44h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C8A44h case   22:*/		return 0x821C8A48;
		  /* 821C8A48h */ case   23:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C8A48h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8A48h case   23:*/		return 0x821C8A4C;
		  /* 821C8A4Ch */ case   24:  		/* mr R30, R3 */
		/* 821C8A4Ch case   24:*/		regs.R30 = regs.R3;
		/* 821C8A4Ch case   24:*/		return 0x821C8A50;
		  /* 821C8A50h */ case   25:  		/* mr R4, R17 */
		/* 821C8A50h case   25:*/		regs.R4 = regs.R17;
		/* 821C8A50h case   25:*/		return 0x821C8A54;
		  /* 821C8A54h */ case   26:  		/* mr R3, R31 */
		/* 821C8A54h case   26:*/		regs.R3 = regs.R31;
		/* 821C8A54h case   26:*/		return 0x821C8A58;
		  /* 821C8A58h */ case   27:  		/* stw R7, <#[R10 + 4]> */
		/* 821C8A58h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821C8A58h case   27:*/		return 0x821C8A5C;
		  /* 821C8A5Ch */ case   28:  		/* lwz R7, <#[R11 + 4]> */
		/* 821C8A5Ch case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8A5Ch case   28:*/		return 0x821C8A60;
		  /* 821C8A60h */ case   29:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C8A60h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C8A60h case   29:*/		return 0x821C8A64;
		  /* 821C8A64h */ case   30:  		/* stw R8, <#[R7 + 36]> */
		/* 821C8A64h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821C8A64h case   30:*/		return 0x821C8A68;
		  /* 821C8A68h */ case   31:  		/* stw R9, <#[R10]> */
		/* 821C8A68h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C8A68h case   31:*/		return 0x821C8A6C;
		  /* 821C8A6Ch */ case   32:  		/* stw R6, <#[R11 + 4]> */
		/* 821C8A6Ch case   32:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8A6Ch case   32:*/		return 0x821C8A70;
		  /* 821C8A70h */ case   33:  		/* bl -330352 */
		/* 821C8A70h case   33:*/		regs.LR = 0x821C8A74; return 0x82178000;
		/* 821C8A70h case   33:*/		return 0x821C8A74;
		  /* 821C8A74h */ case   34:  		/* lwz R11, <#[R3]> */
		/* 821C8A74h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8A74h case   34:*/		return 0x821C8A78;
		  /* 821C8A78h */ case   35:  		/* li R4, 0 */
		/* 821C8A78h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C8A78h case   35:*/		return 0x821C8A7C;
		  /* 821C8A7Ch */ case   36:  		/* rlwimi R11, R18, 27, 4, 6 */
		/* 821C8A7Ch case   36:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R18);
		/* 821C8A7Ch case   36:*/		return 0x821C8A80;
		  /* 821C8A80h */ case   37:  		/* mr R17, R3 */
		/* 821C8A80h case   37:*/		regs.R17 = regs.R3;
		/* 821C8A80h case   37:*/		return 0x821C8A84;
		  /* 821C8A84h */ case   38:  		/* stw R11, <#[R3]> */
		/* 821C8A84h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8A84h case   38:*/		return 0x821C8A88;
		  /* 821C8A88h */ case   39:  		/* bl -331720 */
		/* 821C8A88h case   39:*/		regs.LR = 0x821C8A8C; return 0x82177AC0;
		/* 821C8A88h case   39:*/		return 0x821C8A8C;
		  /* 821C8A8Ch */ case   40:  		/* lwz R11, <#[R17]> */
		/* 821C8A8Ch case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C8A8Ch case   40:*/		return 0x821C8A90;
		  /* 821C8A90h */ case   41:  		/* mr R3, R30 */
		/* 821C8A90h case   41:*/		regs.R3 = regs.R30;
		/* 821C8A90h case   41:*/		return 0x821C8A94;
		  /* 821C8A94h */ case   42:  		/* rlwimi R11, R18, 7, 19, 26 */
		/* 821C8A94h case   42:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R18);
		/* 821C8A94h case   42:*/		return 0x821C8A98;
		  /* 821C8A98h */ case   43:  		/* mr R4, R17 */
		/* 821C8A98h case   43:*/		regs.R4 = regs.R17;
		/* 821C8A98h case   43:*/		return 0x821C8A9C;
		  /* 821C8A9Ch */ case   44:  		/* stw R11, <#[R17]> */
		/* 821C8A9Ch case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C8A9Ch case   44:*/		return 0x821C8AA0;
		  /* 821C8AA0h */ case   45:  		/* bl -329944 */
		/* 821C8AA0h case   45:*/		regs.LR = 0x821C8AA4; return 0x821781C8;
		/* 821C8AA0h case   45:*/		return 0x821C8AA4;
		  /* 821C8AA4h */ case   46:  		/* stw R3, <#[R30 + 44]> */
		/* 821C8AA4h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C8AA4h case   46:*/		return 0x821C8AA8;
		  /* 821C8AA8h */ case   47:  		/* mr R4, R26 */
		/* 821C8AA8h case   47:*/		regs.R4 = regs.R26;
		/* 821C8AA8h case   47:*/		return 0x821C8AAC;
		  /* 821C8AACh */ case   48:  		/* mr R3, R31 */
		/* 821C8AACh case   48:*/		regs.R3 = regs.R31;
		/* 821C8AACh case   48:*/		return 0x821C8AB0;
		  /* 821C8AB0h */ case   49:  		/* bl -330416 */
		/* 821C8AB0h case   49:*/		regs.LR = 0x821C8AB4; return 0x82178000;
		/* 821C8AB0h case   49:*/		return 0x821C8AB4;
		  /* 821C8AB4h */ case   50:  		/* lwz R11, <#[R3]> */
		/* 821C8AB4h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8AB4h case   50:*/		return 0x821C8AB8;
		  /* 821C8AB8h */ case   51:  		/* li R4, 0 */
		/* 821C8AB8h case   51:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C8AB8h case   51:*/		return 0x821C8ABC;
		  /* 821C8ABCh */ case   52:  		/* rlwimi R11, R18, 27, 4, 6 */
		/* 821C8ABCh case   52:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R11,regs.R18);
		/* 821C8ABCh case   52:*/		return 0x821C8AC0;
		  /* 821C8AC0h */ case   53:  		/* mr R17, R3 */
		/* 821C8AC0h case   53:*/		regs.R17 = regs.R3;
		/* 821C8AC0h case   53:*/		return 0x821C8AC4;
		  /* 821C8AC4h */ case   54:  		/* stw R11, <#[R3]> */
		/* 821C8AC4h case   54:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C8AC4h case   54:*/		return 0x821C8AC8;
		  /* 821C8AC8h */ case   55:  		/* bl -331784 */
		/* 821C8AC8h case   55:*/		regs.LR = 0x821C8ACC; return 0x82177AC0;
		/* 821C8AC8h case   55:*/		return 0x821C8ACC;
		  /* 821C8ACCh */ case   56:  		/* lwz R11, <#[R17]> */
		/* 821C8ACCh case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C8ACCh case   56:*/		return 0x821C8AD0;
		  /* 821C8AD0h */ case   57:  		/* mr R3, R30 */
		/* 821C8AD0h case   57:*/		regs.R3 = regs.R30;
		/* 821C8AD0h case   57:*/		return 0x821C8AD4;
		  /* 821C8AD4h */ case   58:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821C8AD4h case   58:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821C8AD4h case   58:*/		return 0x821C8AD8;
		  /* 821C8AD8h */ case   59:  		/* mr R4, R17 */
		/* 821C8AD8h case   59:*/		regs.R4 = regs.R17;
		/* 821C8AD8h case   59:*/		return 0x821C8ADC;
		  /* 821C8ADCh */ case   60:  		/* stw R11, <#[R17]> */
		/* 821C8ADCh case   60:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821C8ADCh case   60:*/		return 0x821C8AE0;
		  /* 821C8AE0h */ case   61:  		/* bl -330008 */
		/* 821C8AE0h case   61:*/		regs.LR = 0x821C8AE4; return 0x821781C8;
		/* 821C8AE0h case   61:*/		return 0x821C8AE4;
		  /* 821C8AE4h */ case   62:  		/* stw R3, <#[R30 + 48]> */
		/* 821C8AE4h case   62:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821C8AE4h case   62:*/		return 0x821C8AE8;
		  /* 821C8AE8h */ case   63:  		/* mr R4, R15 */
		/* 821C8AE8h case   63:*/		regs.R4 = regs.R15;
		/* 821C8AE8h case   63:*/		return 0x821C8AEC;
		  /* 821C8AECh */ case   64:  		/* mr R3, R31 */
		/* 821C8AECh case   64:*/		regs.R3 = regs.R31;
		/* 821C8AECh case   64:*/		return 0x821C8AF0;
		  /* 821C8AF0h */ case   65:  		/* bl -330480 */
		/* 821C8AF0h case   65:*/		regs.LR = 0x821C8AF4; return 0x82178000;
		/* 821C8AF0h case   65:*/		return 0x821C8AF4;
		  /* 821C8AF4h */ case   66:  		/* mr R4, R3 */
		/* 821C8AF4h case   66:*/		regs.R4 = regs.R3;
		/* 821C8AF4h case   66:*/		return 0x821C8AF8;
		  /* 821C8AF8h */ case   67:  		/* mr R3, R30 */
		/* 821C8AF8h case   67:*/		regs.R3 = regs.R30;
		/* 821C8AF8h case   67:*/		return 0x821C8AFC;
		  /* 821C8AFCh */ case   68:  		/* bl -330036 */
		/* 821C8AFCh case   68:*/		regs.LR = 0x821C8B00; return 0x821781C8;
		/* 821C8AFCh case   68:*/		return 0x821C8B00;
		  /* 821C8B00h */ case   69:  		/* stw R3, <#[R30 + 52]> */
		/* 821C8B00h case   69:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000034) );
		/* 821C8B00h case   69:*/		return 0x821C8B04;
		  /* 821C8B04h */ case   70:  		/* stw R25, <#[R31 + 564]> */
		/* 821C8B04h case   70:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000234) );
		/* 821C8B04h case   70:*/		return 0x821C8B08;
		  /* 821C8B08h */ case   71:  		/* mr R4, R30 */
		/* 821C8B08h case   71:*/		regs.R4 = regs.R30;
		/* 821C8B08h case   71:*/		return 0x821C8B0C;
		  /* 821C8B0Ch */ case   72:  		/* mr R3, R31 */
		/* 821C8B0Ch case   72:*/		regs.R3 = regs.R31;
		/* 821C8B0Ch case   72:*/		return 0x821C8B10;
		  /* 821C8B10h */ case   73:  		/* bl -330512 */
		/* 821C8B10h case   73:*/		regs.LR = 0x821C8B14; return 0x82178000;
		/* 821C8B10h case   73:*/		return 0x821C8B14;
		  /* 821C8B14h */ case   74:  		/* mr R4, R3 */
		/* 821C8B14h case   74:*/		regs.R4 = regs.R3;
		/* 821C8B14h case   74:*/		return 0x821C8B18;
		  /* 821C8B18h */ case   75:  		/* mr R3, R31 */
		/* 821C8B18h case   75:*/		regs.R3 = regs.R31;
		/* 821C8B18h case   75:*/		return 0x821C8B1C;
		  /* 821C8B1Ch */ case   76:  		/* li R5, 527 */
		/* 821C8B1Ch case   76:*/		cpu::op::li<0>(regs,&regs.R5,0x20F);
		/* 821C8B1Ch case   76:*/		return 0x821C8B20;
		  /* 821C8B20h */ case   77:  		/* mr R6, R19 */
		/* 821C8B20h case   77:*/		regs.R6 = regs.R19;
		/* 821C8B20h case   77:*/		return 0x821C8B24;
		  /* 821C8B24h */ case   78:  		/* li R7, 0 */
		/* 821C8B24h case   78:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C8B24h case   78:*/		return 0x821C8B28;
		  /* 821C8B28h */ case   79:  		/* bl 384376 */
		/* 821C8B28h case   79:*/		regs.LR = 0x821C8B2C; return 0x822268A0;
		/* 821C8B28h case   79:*/		return 0x821C8B2C;
		  /* 821C8B2Ch */ case   80:  		/* lwz R11, <#[R27 + 12]> */
		/* 821C8B2Ch case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C8B2Ch case   80:*/		return 0x821C8B30;
		  /* 821C8B30h */ case   81:  		/* addi R11, R11, 4 */
		/* 821C8B30h case   81:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821C8B30h case   81:*/		return 0x821C8B34;
		  /* 821C8B34h */ case   82:  		/* lwz R10, <#[R11]> */
		/* 821C8B34h case   82:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8B34h case   82:*/		return 0x821C8B38;
		  /* 821C8B38h */ case   83:  		/* b 12 */
		/* 821C8B38h case   83:*/		return 0x821C8B44;
		/* 821C8B38h case   83:*/		return 0x821C8B3C;
		  /* 821C8B3Ch */ case   84:  		/* addi R11, R10, 8 */
		/* 821C8B3Ch case   84:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821C8B3Ch case   84:*/		return 0x821C8B40;
		  /* 821C8B40h */ case   85:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C8B40h case   85:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C8B40h case   85:*/		return 0x821C8B44;
	}
	return 0x821C8B44;
} // Block from 821C89ECh-821C8B44h (86 instructions)

//////////////////////////////////////////////////////
// Block at 821C8B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8B44);
		  /* 821C8B44h */ case    0:  		/* cmplw CR6, R10, R27 */
		/* 821C8B44h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 821C8B44h case    0:*/		return 0x821C8B48;
		  /* 821C8B48h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C8B48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C8B3C;  }
		/* 821C8B48h case    1:*/		return 0x821C8B4C;
		  /* 821C8B4Ch */ case    2:  		/* lwz R10, <#[R27 + 8]> */
		/* 821C8B4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821C8B4Ch case    2:*/		return 0x821C8B50;
		  /* 821C8B50h */ case    3:  		/* mr R6, R31 */
		/* 821C8B50h case    3:*/		regs.R6 = regs.R31;
		/* 821C8B50h case    3:*/		return 0x821C8B54;
		  /* 821C8B54h */ case    4:  		/* mr R5, R24 */
		/* 821C8B54h case    4:*/		regs.R5 = regs.R24;
		/* 821C8B54h case    4:*/		return 0x821C8B58;
		  /* 821C8B58h */ case    5:  		/* li R4, 2 */
		/* 821C8B58h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821C8B58h case    5:*/		return 0x821C8B5C;
		  /* 821C8B5Ch */ case    6:  		/* mr R3, R30 */
		/* 821C8B5Ch case    6:*/		regs.R3 = regs.R30;
		/* 821C8B5Ch case    6:*/		return 0x821C8B60;
		  /* 821C8B60h */ case    7:  		/* stw R10, <#[R11]> */
		/* 821C8B60h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8B60h case    7:*/		return 0x821C8B64;
		  /* 821C8B64h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 821C8B64h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821C8B64h case    8:*/		return 0x821C8B68;
		  /* 821C8B68h */ case    9:  		/* stw R11, <#[R27 + 8]> */
		/* 821C8B68h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821C8B68h case    9:*/		return 0x821C8B6C;
		  /* 821C8B6Ch */ case   10:  		/* stw R27, <#[R30 + 4]> */
		/* 821C8B6Ch case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000004) );
		/* 821C8B6Ch case   10:*/		return 0x821C8B70;
		  /* 821C8B70h */ case   11:  		/* stw R30, <#[R27 + 12]> */
		/* 821C8B70h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C8B70h case   11:*/		return 0x821C8B74;
		  /* 821C8B74h */ case   12:  		/* bl -328188 */
		/* 821C8B74h case   12:*/		regs.LR = 0x821C8B78; return 0x82178978;
		/* 821C8B74h case   12:*/		return 0x821C8B78;
		  /* 821C8B78h */ case   13:  		/* li R4, 1 */
		/* 821C8B78h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821C8B78h case   13:*/		return 0x821C8B7C;
		  /* 821C8B7Ch */ case   14:  		/* mr R3, R31 */
		/* 821C8B7Ch case   14:*/		regs.R3 = regs.R31;
		/* 821C8B7Ch case   14:*/		return 0x821C8B80;
		  /* 821C8B80h */ case   15:  		/* fmr FR4, FR31 */
		/* 821C8B80h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821C8B80h case   15:*/		return 0x821C8B84;
		  /* 821C8B84h */ case   16:  		/* fmr FR3, FR31 */
		/* 821C8B84h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821C8B84h case   16:*/		return 0x821C8B88;
		  /* 821C8B88h */ case   17:  		/* fmr FR2, FR31 */
		/* 821C8B88h case   17:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821C8B88h case   17:*/		return 0x821C8B8C;
		  /* 821C8B8Ch */ case   18:  		/* fmr FR1, FR31 */
		/* 821C8B8Ch case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C8B8Ch case   18:*/		return 0x821C8B90;
		  /* 821C8B90h */ case   19:  		/* bl 401352 */
		/* 821C8B90h case   19:*/		regs.LR = 0x821C8B94; return 0x8222AB58;
		/* 821C8B90h case   19:*/		return 0x821C8B94;
		  /* 821C8B94h */ case   20:  		/* lwz R11, <#[R28 + 20]> */
		/* 821C8B94h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821C8B94h case   20:*/		return 0x821C8B98;
		  /* 821C8B98h */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821C8B98h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821C8B98h case   21:*/		return 0x821C8B9C;
		  /* 821C8B9Ch */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821C8B9Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821C8BA8;  }
		/* 821C8B9Ch case   22:*/		return 0x821C8BA0;
		  /* 821C8BA0h */ case   23:  		/* li R30, 0 */
		/* 821C8BA0h case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821C8BA0h case   23:*/		return 0x821C8BA4;
		  /* 821C8BA4h */ case   24:  		/* b 16 */
		/* 821C8BA4h case   24:*/		return 0x821C8BB4;
		/* 821C8BA4h case   24:*/		return 0x821C8BA8;
	}
	return 0x821C8BA8;
} // Block from 821C8B44h-821C8BA8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821C8BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8BA8);
		  /* 821C8BA8h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 821C8BA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821C8BA8h case    0:*/		return 0x821C8BAC;
		  /* 821C8BACh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C8BACh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C8BACh case    1:*/		return 0x821C8BB0;
		  /* 821C8BB0h */ case    2:  		/* addi R30, R11, -40 */
		/* 821C8BB0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821C8BB0h case    2:*/		return 0x821C8BB4;
	}
	return 0x821C8BB4;
} // Block from 821C8BA8h-821C8BB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8BB4);
		  /* 821C8BB4h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C8BB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C8BB4h case    0:*/		return 0x821C8BB8;
		  /* 821C8BB8h */ case    1:  		/* mr R27, R3 */
		/* 821C8BB8h case    1:*/		regs.R27 = regs.R3;
		/* 821C8BB8h case    1:*/		return 0x821C8BBC;
		  /* 821C8BBCh */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C8BBCh case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C8BBCh case    2:*/		return 0x821C8BC0;
		  /* 821C8BC0h */ case    3:  		/* cmplw CR6, R11, R20 */
		/* 821C8BC0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 821C8BC0h case    3:*/		return 0x821C8BC4;
		  /* 821C8BC4h */ case    4:  		/* bc 4, CR6_EQ, 40 */
		/* 821C8BC4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821C8BEC;  }
		/* 821C8BC4h case    4:*/		return 0x821C8BC8;
		  /* 821C8BC8h */ case    5:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C8BC8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C8BC8h case    5:*/		return 0x821C8BCC;
		  /* 821C8BCCh */ case    6:  		/* mr R27, R30 */
		/* 821C8BCCh case    6:*/		regs.R27 = regs.R30;
		/* 821C8BCCh case    6:*/		return 0x821C8BD0;
		  /* 821C8BD0h */ case    7:  		/* lwz R11, <#[R11 + 36]> */
		/* 821C8BD0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821C8BD0h case    7:*/		return 0x821C8BD4;
		  /* 821C8BD4h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8BD4h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8BD4h case    8:*/		return 0x821C8BD8;
		  /* 821C8BD8h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 821C8BD8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C8BE4;  }
		/* 821C8BD8h case    9:*/		return 0x821C8BDC;
		  /* 821C8BDCh */ case   10:  		/* li R30, 0 */
		/* 821C8BDCh case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821C8BDCh case   10:*/		return 0x821C8BE0;
		  /* 821C8BE0h */ case   11:  		/* b 12 */
		/* 821C8BE0h case   11:*/		return 0x821C8BEC;
		/* 821C8BE0h case   11:*/		return 0x821C8BE4;
	}
	return 0x821C8BE4;
} // Block from 821C8BB4h-821C8BE4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C8BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8BE4);
		  /* 821C8BE4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C8BE4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C8BE4h case    0:*/		return 0x821C8BE8;
		  /* 821C8BE8h */ case    1:  		/* addi R30, R11, -40 */
		/* 821C8BE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821C8BE8h case    1:*/		return 0x821C8BEC;
	}
	return 0x821C8BEC;
} // Block from 821C8BE4h-821C8BECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C8BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8BEC);
		  /* 821C8BECh */ case    0:  		/* lwz R4, <#[R29 + 44]> */
		/* 821C8BECh case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000002C) );
		/* 821C8BECh case    0:*/		return 0x821C8BF0;
		  /* 821C8BF0h */ case    1:  		/* mr R3, R31 */
		/* 821C8BF0h case    1:*/		regs.R3 = regs.R31;
		/* 821C8BF0h case    1:*/		return 0x821C8BF4;
		  /* 821C8BF4h */ case    2:  		/* lwz R5, <#[R4 + 12]> */
		/* 821C8BF4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821C8BF4h case    2:*/		return 0x821C8BF8;
		  /* 821C8BF8h */ case    3:  		/* bl -359176 */
		/* 821C8BF8h case    3:*/		regs.LR = 0x821C8BFC; return 0x821710F0;
		/* 821C8BF8h case    3:*/		return 0x821C8BFC;
		  /* 821C8BFCh */ case    4:  		/* mr R19, R3 */
		/* 821C8BFCh case    4:*/		regs.R19 = regs.R3;
		/* 821C8BFCh case    4:*/		return 0x821C8C00;
		  /* 821C8C00h */ case    5:  		/* li R6, 4 */
		/* 821C8C00h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821C8C00h case    5:*/		return 0x821C8C04;
		  /* 821C8C04h */ case    6:  		/* li R5, 0 */
		/* 821C8C04h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8C04h case    6:*/		return 0x821C8C08;
		  /* 821C8C08h */ case    7:  		/* mr R3, R31 */
		/* 821C8C08h case    7:*/		regs.R3 = regs.R31;
		/* 821C8C08h case    7:*/		return 0x821C8C0C;
		  /* 821C8C0Ch */ case    8:  		/* lwz R11, <#[R19]> */
		/* 821C8C0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821C8C0Ch case    8:*/		return 0x821C8C10;
		  /* 821C8C10h */ case    9:  		/* rlwimi R11, R18, 25, 4, 6 */
		/* 821C8C10h case    9:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R18);
		/* 821C8C10h case    9:*/		return 0x821C8C14;
		  /* 821C8C14h */ case   10:  		/* stw R11, <#[R19]> */
		/* 821C8C14h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821C8C14h case   10:*/		return 0x821C8C18;
		  /* 821C8C18h */ case   11:  		/* lwz R4, <#[R29 + 28]> */
		/* 821C8C18h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000001C) );
		/* 821C8C18h case   11:*/		return 0x821C8C1C;
		  /* 821C8C1Ch */ case   12:  		/* bl 376548 */
		/* 821C8C1Ch case   12:*/		regs.LR = 0x821C8C20; return 0x82224B00;
		/* 821C8C1Ch case   12:*/		return 0x821C8C20;
		  /* 821C8C20h */ case   13:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821C8C20h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821C8C20h case   13:*/		return 0x821C8C24;
		  /* 821C8C24h */ case   14:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C8C24h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C8C24h case   14:*/		return 0x821C8C28;
		  /* 821C8C28h */ case   15:  		/* addi R11, R11, 36 */
		/* 821C8C28h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C8C28h case   15:*/		return 0x821C8C2C;
		  /* 821C8C2Ch */ case   16:  		/* addi R10, R10, 36 */
		/* 821C8C2Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C8C2Ch case   16:*/		return 0x821C8C30;
		  /* 821C8C30h */ case   17:  		/* addi R8, R11, -36 */
		/* 821C8C30h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C8C30h case   17:*/		return 0x821C8C34;
		  /* 821C8C34h */ case   18:  		/* addi R6, R10, -36 */
		/* 821C8C34h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C8C34h case   18:*/		return 0x821C8C38;
		  /* 821C8C38h */ case   19:  		/* addi R9, R10, 4 */
		/* 821C8C38h case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C8C38h case   19:*/		return 0x821C8C3C;
		  /* 821C8C3Ch */ case   20:  		/* lwz R7, <#[R11]> */
		/* 821C8C3Ch case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8C3Ch case   20:*/		return 0x821C8C40;
		  /* 821C8C40h */ case   21:  		/* mr R4, R19 */
		/* 821C8C40h case   21:*/		regs.R4 = regs.R19;
		/* 821C8C40h case   21:*/		return 0x821C8C44;
		  /* 821C8C44h */ case   22:  		/* mr R17, R3 */
		/* 821C8C44h case   22:*/		regs.R17 = regs.R3;
		/* 821C8C44h case   22:*/		return 0x821C8C48;
		  /* 821C8C48h */ case   23:  		/* stw R7, <#[R10]> */
		/* 821C8C48h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C8C48h case   23:*/		return 0x821C8C4C;
		  /* 821C8C4Ch */ case   24:  		/* lwz R7, <#[R11]> */
		/* 821C8C4Ch case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8C4Ch case   24:*/		return 0x821C8C50;
		  /* 821C8C50h */ case   25:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C8C50h case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C8C50h case   25:*/		return 0x821C8C54;
		  /* 821C8C54h */ case   26:  		/* stw R6, <#[R7]> */
		/* 821C8C54h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C8C54h case   26:*/		return 0x821C8C58;
		  /* 821C8C58h */ case   27:  		/* stw R8, <#[R10 + 4]> */
		/* 821C8C58h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C8C58h case   27:*/		return 0x821C8C5C;
		  /* 821C8C5Ch */ case   28:  		/* stw R9, <#[R11]> */
		/* 821C8C5Ch case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8C5Ch case   28:*/		return 0x821C8C60;
		  /* 821C8C60h */ case   29:  		/* bl -330392 */
		/* 821C8C60h case   29:*/		regs.LR = 0x821C8C64; return 0x821781C8;
		/* 821C8C60h case   29:*/		return 0x821C8C64;
		  /* 821C8C64h */ case   30:  		/* stw R3, <#[R17 + 44]> */
		/* 821C8C64h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x0000002C) );
		/* 821C8C64h case   30:*/		return 0x821C8C68;
		  /* 821C8C68h */ case   31:  		/* li R5, 0 */
		/* 821C8C68h case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8C68h case   31:*/		return 0x821C8C6C;
		  /* 821C8C6Ch */ case   32:  		/* mr R4, R30 */
		/* 821C8C6Ch case   32:*/		regs.R4 = regs.R30;
		/* 821C8C6Ch case   32:*/		return 0x821C8C70;
		  /* 821C8C70h */ case   33:  		/* mr R3, R31 */
		/* 821C8C70h case   33:*/		regs.R3 = regs.R31;
		/* 821C8C70h case   33:*/		return 0x821C8C74;
		  /* 821C8C74h */ case   34:  		/* bl -330596 */
		/* 821C8C74h case   34:*/		regs.LR = 0x821C8C78; return 0x82178110;
		/* 821C8C74h case   34:*/		return 0x821C8C78;
		  /* 821C8C78h */ case   35:  		/* mr R4, R3 */
		/* 821C8C78h case   35:*/		regs.R4 = regs.R3;
		/* 821C8C78h case   35:*/		return 0x821C8C7C;
		  /* 821C8C7Ch */ case   36:  		/* mr R3, R17 */
		/* 821C8C7Ch case   36:*/		regs.R3 = regs.R17;
		/* 821C8C7Ch case   36:*/		return 0x821C8C80;
		  /* 821C8C80h */ case   37:  		/* bl -330424 */
		/* 821C8C80h case   37:*/		regs.LR = 0x821C8C84; return 0x821781C8;
		/* 821C8C80h case   37:*/		return 0x821C8C84;
		  /* 821C8C84h */ case   38:  		/* stw R3, <#[R17 + 48]> */
		/* 821C8C84h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x00000030) );
		/* 821C8C84h case   38:*/		return 0x821C8C88;
		  /* 821C8C88h */ case   39:  		/* li R5, 0 */
		/* 821C8C88h case   39:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8C88h case   39:*/		return 0x821C8C8C;
		  /* 821C8C8Ch */ case   40:  		/* mr R4, R27 */
		/* 821C8C8Ch case   40:*/		regs.R4 = regs.R27;
		/* 821C8C8Ch case   40:*/		return 0x821C8C90;
		  /* 821C8C90h */ case   41:  		/* mr R3, R31 */
		/* 821C8C90h case   41:*/		regs.R3 = regs.R31;
		/* 821C8C90h case   41:*/		return 0x821C8C94;
		  /* 821C8C94h */ case   42:  		/* bl -330628 */
		/* 821C8C94h case   42:*/		regs.LR = 0x821C8C98; return 0x82178110;
		/* 821C8C94h case   42:*/		return 0x821C8C98;
		  /* 821C8C98h */ case   43:  		/* mr R4, R3 */
		/* 821C8C98h case   43:*/		regs.R4 = regs.R3;
		/* 821C8C98h case   43:*/		return 0x821C8C9C;
		  /* 821C8C9Ch */ case   44:  		/* mr R3, R17 */
		/* 821C8C9Ch case   44:*/		regs.R3 = regs.R17;
		/* 821C8C9Ch case   44:*/		return 0x821C8CA0;
		  /* 821C8CA0h */ case   45:  		/* bl -330456 */
		/* 821C8CA0h case   45:*/		regs.LR = 0x821C8CA4; return 0x821781C8;
		/* 821C8CA0h case   45:*/		return 0x821C8CA4;
		  /* 821C8CA4h */ case   46:  		/* stw R3, <#[R17 + 52]> */
		/* 821C8CA4h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x00000034) );
		/* 821C8CA4h case   46:*/		return 0x821C8CA8;
		  /* 821C8CA8h */ case   47:  		/* li R5, 0 */
		/* 821C8CA8h case   47:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C8CA8h case   47:*/		return 0x821C8CAC;
		  /* 821C8CACh */ case   48:  		/* mr R4, R26 */
		/* 821C8CACh case   48:*/		regs.R4 = regs.R26;
		/* 821C8CACh case   48:*/		return 0x821C8CB0;
		  /* 821C8CB0h */ case   49:  		/* mr R3, R31 */
		/* 821C8CB0h case   49:*/		regs.R3 = regs.R31;
		/* 821C8CB0h case   49:*/		return 0x821C8CB4;
		  /* 821C8CB4h */ case   50:  		/* bl -330660 */
		/* 821C8CB4h case   50:*/		regs.LR = 0x821C8CB8; return 0x82178110;
		/* 821C8CB4h case   50:*/		return 0x821C8CB8;
		  /* 821C8CB8h */ case   51:  		/* mr R4, R3 */
		/* 821C8CB8h case   51:*/		regs.R4 = regs.R3;
		/* 821C8CB8h case   51:*/		return 0x821C8CBC;
		  /* 821C8CBCh */ case   52:  		/* mr R3, R17 */
		/* 821C8CBCh case   52:*/		regs.R3 = regs.R17;
		/* 821C8CBCh case   52:*/		return 0x821C8CC0;
		  /* 821C8CC0h */ case   53:  		/* bl -330488 */
		/* 821C8CC0h case   53:*/		regs.LR = 0x821C8CC4; return 0x821781C8;
		/* 821C8CC0h case   53:*/		return 0x821C8CC4;
		  /* 821C8CC4h */ case   54:  		/* stw R3, <#[R17 + 56]> */
		/* 821C8CC4h case   54:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R17 + 0x00000038) );
		/* 821C8CC4h case   54:*/		return 0x821C8CC8;
		  /* 821C8CC8h */ case   55:  		/* mr R4, R17 */
		/* 821C8CC8h case   55:*/		regs.R4 = regs.R17;
		/* 821C8CC8h case   55:*/		return 0x821C8CCC;
		  /* 821C8CCCh */ case   56:  		/* mr R3, R31 */
		/* 821C8CCCh case   56:*/		regs.R3 = regs.R31;
		/* 821C8CCCh case   56:*/		return 0x821C8CD0;
		  /* 821C8CD0h */ case   57:  		/* bl -330960 */
		/* 821C8CD0h case   57:*/		regs.LR = 0x821C8CD4; return 0x82178000;
		/* 821C8CD0h case   57:*/		return 0x821C8CD4;
		  /* 821C8CD4h */ case   58:  		/* mr R30, R3 */
		/* 821C8CD4h case   58:*/		regs.R30 = regs.R3;
		/* 821C8CD4h case   58:*/		return 0x821C8CD8;
		  /* 821C8CD8h */ case   59:  		/* mr R5, R31 */
		/* 821C8CD8h case   59:*/		regs.R5 = regs.R31;
		/* 821C8CD8h case   59:*/		return 0x821C8CDC;
		  /* 821C8CDCh */ case   60:  		/* lwz R4, <#[R29 + 44]> */
		/* 821C8CDCh case   60:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000002C) );
		/* 821C8CDCh case   60:*/		return 0x821C8CE0;
		  /* 821C8CE0h */ case   61:  		/* mr R3, R29 */
		/* 821C8CE0h case   61:*/		regs.R3 = regs.R29;
		/* 821C8CE0h case   61:*/		return 0x821C8CE4;
		  /* 821C8CE4h */ case   62:  		/* bl -328660 */
		/* 821C8CE4h case   62:*/		regs.LR = 0x821C8CE8; return 0x82178910;
		/* 821C8CE4h case   62:*/		return 0x821C8CE8;
		  /* 821C8CE8h */ case   63:  		/* mr R4, R30 */
		/* 821C8CE8h case   63:*/		regs.R4 = regs.R30;
		/* 821C8CE8h case   63:*/		return 0x821C8CEC;
		  /* 821C8CECh */ case   64:  		/* mr R3, R29 */
		/* 821C8CECh case   64:*/		regs.R3 = regs.R29;
		/* 821C8CECh case   64:*/		return 0x821C8CF0;
		  /* 821C8CF0h */ case   65:  		/* bl -330536 */
		/* 821C8CF0h case   65:*/		regs.LR = 0x821C8CF4; return 0x821781C8;
		/* 821C8CF0h case   65:*/		return 0x821C8CF4;
		  /* 821C8CF4h */ case   66:  		/* stw R3, <#[R29 + 44]> */
		/* 821C8CF4h case   66:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 821C8CF4h case   66:*/		return 0x821C8CF8;
		  /* 821C8CF8h */ case   67:  		/* mr R4, R17 */
		/* 821C8CF8h case   67:*/		regs.R4 = regs.R17;
		/* 821C8CF8h case   67:*/		return 0x821C8CFC;
		  /* 821C8CFCh */ case   68:  		/* mr R3, R31 */
		/* 821C8CFCh case   68:*/		regs.R3 = regs.R31;
		/* 821C8CFCh case   68:*/		return 0x821C8D00;
		  /* 821C8D00h */ case   69:  		/* bl -331008 */
		/* 821C8D00h case   69:*/		regs.LR = 0x821C8D04; return 0x82178000;
		/* 821C8D00h case   69:*/		return 0x821C8D04;
		  /* 821C8D04h */ case   70:  		/* mr R30, R3 */
		/* 821C8D04h case   70:*/		regs.R30 = regs.R3;
		/* 821C8D04h case   70:*/		return 0x821C8D08;
		  /* 821C8D08h */ case   71:  		/* mr R5, R31 */
		/* 821C8D08h case   71:*/		regs.R5 = regs.R31;
		/* 821C8D08h case   71:*/		return 0x821C8D0C;
		  /* 821C8D0Ch */ case   72:  		/* lwz R4, <#[R29 + 48]> */
		/* 821C8D0Ch case   72:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000030) );
		/* 821C8D0Ch case   72:*/		return 0x821C8D10;
		  /* 821C8D10h */ case   73:  		/* mr R3, R29 */
		/* 821C8D10h case   73:*/		regs.R3 = regs.R29;
		/* 821C8D10h case   73:*/		return 0x821C8D14;
		  /* 821C8D14h */ case   74:  		/* bl -328708 */
		/* 821C8D14h case   74:*/		regs.LR = 0x821C8D18; return 0x82178910;
		/* 821C8D14h case   74:*/		return 0x821C8D18;
		  /* 821C8D18h */ case   75:  		/* mr R4, R30 */
		/* 821C8D18h case   75:*/		regs.R4 = regs.R30;
		/* 821C8D18h case   75:*/		return 0x821C8D1C;
		  /* 821C8D1Ch */ case   76:  		/* mr R3, R29 */
		/* 821C8D1Ch case   76:*/		regs.R3 = regs.R29;
		/* 821C8D1Ch case   76:*/		return 0x821C8D20;
		  /* 821C8D20h */ case   77:  		/* bl -330584 */
		/* 821C8D20h case   77:*/		regs.LR = 0x821C8D24; return 0x821781C8;
		/* 821C8D20h case   77:*/		return 0x821C8D24;
		  /* 821C8D24h */ case   78:  		/* stw R3, <#[R29 + 48]> */
		/* 821C8D24h case   78:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000030) );
		/* 821C8D24h case   78:*/		return 0x821C8D28;
	}
	return 0x821C8D28;
} // Block from 821C8BECh-821C8D28h (79 instructions)

//////////////////////////////////////////////////////
// Block at 821C8D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8D28);
		  /* 821C8D28h */ case    0:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821C8D28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821C8D28h case    0:*/		return 0x821C8D2C;
		  /* 821C8D2Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C8D2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C8D2Ch case    1:*/		return 0x821C8D30;
		  /* 821C8D30h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8D30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8D30h case    2:*/		return 0x821C8D34;
		  /* 821C8D34h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C8D34h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C8D44;  }
		/* 821C8D34h case    3:*/		return 0x821C8D38;
		  /* 821C8D38h */ case    4:  		/* mr R24, R11 */
		/* 821C8D38h case    4:*/		regs.R24 = regs.R11;
		/* 821C8D38h case    4:*/		return 0x821C8D3C;
		  /* 821C8D3Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C8D3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8D3Ch case    5:*/		return 0x821C8D40;
		  /* 821C8D40h */ case    6:  		/* bc 4, CR6_EQ, -1520 */
		/* 821C8D40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C8750;  }
		/* 821C8D40h case    6:*/		return 0x821C8D44;
	}
	return 0x821C8D44;
} // Block from 821C8D28h-821C8D44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C8D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8D44);
		  /* 821C8D44h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C8D44h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C8D44h case    0:*/		return 0x821C8D48;
		  /* 821C8D48h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C8D48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8D48h case    1:*/		return 0x821C8D4C;
		  /* 821C8D4Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8D4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8D4Ch case    2:*/		return 0x821C8D50;
		  /* 821C8D50h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C8D50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C8D60;  }
		/* 821C8D50h case    3:*/		return 0x821C8D54;
		  /* 821C8D54h */ case    4:  		/* mr R25, R11 */
		/* 821C8D54h case    4:*/		regs.R25 = regs.R11;
		/* 821C8D54h case    4:*/		return 0x821C8D58;
		  /* 821C8D58h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C8D58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8D58h case    5:*/		return 0x821C8D5C;
		  /* 821C8D5Ch */ case    6:  		/* bc 4, CR6_EQ, -1724 */
		/* 821C8D5Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C86A0;  }
		/* 821C8D5Ch case    6:*/		return 0x821C8D60;
	}
	return 0x821C8D60;
} // Block from 821C8D44h-821C8D60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C8D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8D60);
		  /* 821C8D60h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C8D60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C8D60h case    0:*/		return 0x821C8D64;
		  /* 821C8D64h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8D64h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8D64h case    1:*/		return 0x821C8D68;
		  /* 821C8D68h */ case    2:  		/* bc 4, CR0_EQ, 288 */
		/* 821C8D68h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C8E88;  }
		/* 821C8D68h case    2:*/		return 0x821C8D6C;
		  /* 821C8D6Ch */ case    3:  		/* mr R8, R11 */
		/* 821C8D6Ch case    3:*/		regs.R8 = regs.R11;
		/* 821C8D6Ch case    3:*/		return 0x821C8D70;
		  /* 821C8D70h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C8D70h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8D70h case    4:*/		return 0x821C8D74;
		  /* 821C8D74h */ case    5:  		/* bc 12, CR0_EQ, 276 */
		/* 821C8D74h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C8E88;  }
		/* 821C8D74h case    5:*/		return 0x821C8D78;
		  /* 821C8D78h */ case    6:  		/* lwz R11, <#[R8 + 68]> */
		/* 821C8D78h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000044) );
		/* 821C8D78h case    6:*/		return 0x821C8D7C;
		  /* 821C8D7Ch */ case    7:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821C8D7Ch case    7:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821C8D7Ch case    7:*/		return 0x821C8D80;
		  /* 821C8D80h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821C8D80h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C8D94;  }
		/* 821C8D80h case    8:*/		return 0x821C8D84;
		  /* 821C8D84h */ case    9:  		/* lwz R11, <#[R31 + 56]> */
		/* 821C8D84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821C8D84h case    9:*/		return 0x821C8D88;
		  /* 821C8D88h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 821C8D88h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8D88h case   10:*/		return 0x821C8D8C;
		  /* 821C8D8Ch */ case   11:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821C8D8Ch case   11:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821C8D8Ch case   11:*/		return 0x821C8D90;
		  /* 821C8D90h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821C8D90h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821C8DA0;  }
		/* 821C8D90h case   12:*/		return 0x821C8D94;
	}
	return 0x821C8D94;
} // Block from 821C8D60h-821C8D94h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C8D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8D94);
		  /* 821C8D94h */ case    0:  		/* lwz R11, <#[R8 + 76]> */
		/* 821C8D94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000004C) );
		/* 821C8D94h case    0:*/		return 0x821C8D98;
		  /* 821C8D98h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821C8D98h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821C8D98h case    1:*/		return 0x821C8D9C;
		  /* 821C8D9Ch */ case    2:  		/* bc 12, CR0_EQ, 208 */
		/* 821C8D9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821C8E6C;  }
		/* 821C8D9Ch case    2:*/		return 0x821C8DA0;
	}
	return 0x821C8DA0;
} // Block from 821C8D94h-821C8DA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DA0);
		  /* 821C8DA0h */ case    0:  		/* lwz R9, <#[R8 + 8]> */
		/* 821C8DA0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000008) );
		/* 821C8DA0h case    0:*/		return 0x821C8DA4;
		  /* 821C8DA4h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821C8DA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821C8DA4h case    1:*/		return 0x821C8DA8;
		  /* 821C8DA8h */ case    2:  		/* bc 12, CR6_EQ, 196 */
		/* 821C8DA8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C8E6C;  }
		/* 821C8DA8h case    2:*/		return 0x821C8DAC;
		  /* 821C8DACh */ case    3:  		/* lwz R11, <#[R9 + 4]> */
		/* 821C8DACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821C8DACh case    3:*/		return 0x821C8DB0;
		  /* 821C8DB0h */ case    4:  		/* b 100 */
		/* 821C8DB0h case    4:*/		return 0x821C8E14;
		/* 821C8DB0h case    4:*/		return 0x821C8DB4;
	}
	return 0x821C8DB4;
} // Block from 821C8DA0h-821C8DB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DB4);
		  /* 821C8DB4h */ case    0:  		/* li R4, 4800 */
		/* 821C8DB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8DB4h case    0:*/		return 0x821C8DB8;
		  /* 821C8DB8h */ case    1:  		/* mr R3, R31 */
		/* 821C8DB8h case    1:*/		regs.R3 = regs.R31;
		/* 821C8DB8h case    1:*/		return 0x821C8DBC;
		  /* 821C8DBCh */ case    2:  		/* bl -487252 */
		/* 821C8DBCh case    2:*/		regs.LR = 0x821C8DC0; return 0x82151E68;
		/* 821C8DBCh case    2:*/		return 0x821C8DC0;
	}
	return 0x821C8DC0;
} // Block from 821C8DB4h-821C8DC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DC0);
		  /* 821C8DC0h */ case    0:  		/* li R4, 4800 */
		/* 821C8DC0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8DC0h case    0:*/		return 0x821C8DC4;
		  /* 821C8DC4h */ case    1:  		/* mr R3, R31 */
		/* 821C8DC4h case    1:*/		regs.R3 = regs.R31;
		/* 821C8DC4h case    1:*/		return 0x821C8DC8;
		  /* 821C8DC8h */ case    2:  		/* bl -487264 */
		/* 821C8DC8h case    2:*/		regs.LR = 0x821C8DCC; return 0x82151E68;
		/* 821C8DC8h case    2:*/		return 0x821C8DCC;
	}
	return 0x821C8DCC;
} // Block from 821C8DC0h-821C8DCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DCC);
		  /* 821C8DCCh */ case    0:  		/* li R4, 4800 */
		/* 821C8DCCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8DCCh case    0:*/		return 0x821C8DD0;
		  /* 821C8DD0h */ case    1:  		/* mr R3, R31 */
		/* 821C8DD0h case    1:*/		regs.R3 = regs.R31;
		/* 821C8DD0h case    1:*/		return 0x821C8DD4;
		  /* 821C8DD4h */ case    2:  		/* bl -487276 */
		/* 821C8DD4h case    2:*/		regs.LR = 0x821C8DD8; return 0x82151E68;
		/* 821C8DD4h case    2:*/		return 0x821C8DD8;
		  /* 821C8DD8h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C8DD8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C8DD8h case    3:*/		return 0x821C8DDC;
		  /* 821C8DDCh */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821C8DDCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C8DDCh case    4:*/		return 0x821C8DE0;
		  /* 821C8DE0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821C8DE0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C8DF4;  }
		/* 821C8DE0h case    5:*/		return 0x821C8DE4;
		  /* 821C8DE4h */ case    6:  		/* lwz R11, <#[R10 + 12]> */
		/* 821C8DE4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821C8DE4h case    6:*/		return 0x821C8DE8;
		  /* 821C8DE8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821C8DE8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8DE8h case    7:*/		return 0x821C8DEC;
		  /* 821C8DECh */ case    8:  		/* mr R11, R18 */
		/* 821C8DECh case    8:*/		regs.R11 = regs.R18;
		/* 821C8DECh case    8:*/		return 0x821C8DF0;
		  /* 821C8DF0h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821C8DF0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C8DF8;  }
		/* 821C8DF0h case    9:*/		return 0x821C8DF4;
	}
	return 0x821C8DF4;
} // Block from 821C8DCCh-821C8DF4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DF4);
		  /* 821C8DF4h */ case    0:  		/* li R11, 0 */
		/* 821C8DF4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C8DF4h case    0:*/		return 0x821C8DF8;
	}
	return 0x821C8DF8;
} // Block from 821C8DF4h-821C8DF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C8DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8DF8);
		  /* 821C8DF8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C8DF8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C8DF8h case    0:*/		return 0x821C8DFC;
		  /* 821C8DFCh */ case    1:  		/* bc 4, CR0_EQ, 164 */
		/* 821C8DFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C8EA0;  }
		/* 821C8DFCh case    1:*/		return 0x821C8E00;
		  /* 821C8E00h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821C8E00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C8E00h case    2:*/		return 0x821C8E04;
		  /* 821C8E04h */ case    3:  		/* bc 12, CR6_EQ, 168 */
		/* 821C8E04h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C8EAC;  }
		/* 821C8E04h case    3:*/		return 0x821C8E08;
		  /* 821C8E08h */ case    4:  		/* lwz R11, <#[R10 + 4]> */
		/* 821C8E08h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821C8E08h case    4:*/		return 0x821C8E0C;
		  /* 821C8E0Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C8E0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8E0Ch case    5:*/		return 0x821C8E10;
		  /* 821C8E10h */ case    6:  		/* bc 12, CR6_EQ, 156 */
		/* 821C8E10h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C8EAC;  }
		/* 821C8E10h case    6:*/		return 0x821C8E14;
	}
	return 0x821C8E14;
} // Block from 821C8DF8h-821C8E14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C8E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8E14);
		  /* 821C8E14h */ case    0:  		/* lwz R10, <#[R11 + 76]> */
		/* 821C8E14h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000004C) );
		/* 821C8E14h case    0:*/		return 0x821C8E18;
		  /* 821C8E18h */ case    1:  		/* rlwinm. R10, R10, 0, 11, 11 */
		/* 821C8E18h case    1:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R10,regs.R10);
		/* 821C8E18h case    1:*/		return 0x821C8E1C;
		  /* 821C8E1Ch */ case    2:  		/* bc 12, CR0_EQ, -68 */
		/* 821C8E1Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821C8DD8;  }
		/* 821C8E1Ch case    2:*/		return 0x821C8E20;
		  /* 821C8E20h */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 821C8E20h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821C8E20h case    3:*/		return 0x821C8E24;
		  /* 821C8E24h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8E24h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8E24h case    4:*/		return 0x821C8E28;
		  /* 821C8E28h */ case    5:  		/* bc 4, CR0_EQ, 60 */
		/* 821C8E28h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C8E64;  }
		/* 821C8E28h case    5:*/		return 0x821C8E2C;
		  /* 821C8E2Ch */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821C8E2Ch case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C8E2Ch case    6:*/		return 0x821C8E30;
		  /* 821C8E30h */ case    7:  		/* bc 12, CR0_EQ, 52 */
		/* 821C8E30h case    7:*/		if ( regs.CR[0].eq ) { return 0x821C8E64;  }
		/* 821C8E30h case    7:*/		return 0x821C8E34;
		  /* 821C8E34h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821C8E34h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C8E34h case    8:*/		return 0x821C8E38;
		  /* 821C8E38h */ case    9:  		/* rlwinm R7, R10, 0, 18, 24 */
		/* 821C8E38h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R7,regs.R10);
		/* 821C8E38h case    9:*/		return 0x821C8E3C;
		  /* 821C8E3Ch */ case   10:  		/* cmplwi CR6, R7, 13312 */
		/* 821C8E3Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00003400);
		/* 821C8E3Ch case   10:*/		return 0x821C8E40;
		  /* 821C8E40h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 821C8E40h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C8E4C;  }
		/* 821C8E40h case   11:*/		return 0x821C8E44;
		  /* 821C8E44h */ case   12:  		/* oris R10, R10, 512 */
		/* 821C8E44h case   12:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x200);
		/* 821C8E44h case   12:*/		return 0x821C8E48;
		  /* 821C8E48h */ case   13:  		/* stw R10, <#[R11 + 8]> */
		/* 821C8E48h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C8E48h case   13:*/		return 0x821C8E4C;
	}
	return 0x821C8E4C;
} // Block from 821C8E14h-821C8E4Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C8E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8E4C);
		  /* 821C8E4Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C8E4Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C8E4Ch case    0:*/		return 0x821C8E50;
		  /* 821C8E50h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C8E50h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C8E50h case    1:*/		return 0x821C8E54;
		  /* 821C8E54h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8E54h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8E54h case    2:*/		return 0x821C8E58;
		  /* 821C8E58h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C8E58h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C8E64;  }
		/* 821C8E58h case    3:*/		return 0x821C8E5C;
		  /* 821C8E5Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C8E5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8E5Ch case    4:*/		return 0x821C8E60;
		  /* 821C8E60h */ case    5:  		/* bc 4, CR6_EQ, -44 */
		/* 821C8E60h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C8E34;  }
		/* 821C8E60h case    5:*/		return 0x821C8E64;
	}
	return 0x821C8E64;
} // Block from 821C8E4Ch-821C8E64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C8E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8E64);
		  /* 821C8E64h */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 821C8E64h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821C8E64h case    0:*/		return 0x821C8E68;
		  /* 821C8E68h */ case    1:  		/* b -196 */
		/* 821C8E68h case    1:*/		return 0x821C8DA4;
		/* 821C8E68h case    1:*/		return 0x821C8E6C;
	}
	return 0x821C8E6C;
} // Block from 821C8E64h-821C8E6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C8E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8E6C);
		  /* 821C8E6Ch */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821C8E6Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821C8E6Ch case    0:*/		return 0x821C8E70;
		  /* 821C8E70h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C8E70h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C8E70h case    1:*/		return 0x821C8E74;
		  /* 821C8E74h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C8E74h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C8E74h case    2:*/		return 0x821C8E78;
		  /* 821C8E78h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C8E78h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C8E88;  }
		/* 821C8E78h case    3:*/		return 0x821C8E7C;
		  /* 821C8E7Ch */ case    4:  		/* mr R8, R11 */
		/* 821C8E7Ch case    4:*/		regs.R8 = regs.R11;
		/* 821C8E7Ch case    4:*/		return 0x821C8E80;
		  /* 821C8E80h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C8E80h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C8E80h case    5:*/		return 0x821C8E84;
		  /* 821C8E84h */ case    6:  		/* bc 4, CR6_EQ, -268 */
		/* 821C8E84h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C8D78;  }
		/* 821C8E84h case    6:*/		return 0x821C8E88;
	}
	return 0x821C8E88;
} // Block from 821C8E6Ch-821C8E88h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C8E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8E88);
		  /* 821C8E88h */ case    0:  		/* li R11, 0 */
		/* 821C8E88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C8E88h case    0:*/		return 0x821C8E8C;
		  /* 821C8E8Ch */ case    1:  		/* stw R11, <#[R31 + 564]> */
		/* 821C8E8Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000234) );
		/* 821C8E8Ch case    1:*/		return 0x821C8E90;
		  /* 821C8E90h */ case    2:  		/* addi R1, R1, 272 */
		/* 821C8E90h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821C8E90h case    2:*/		return 0x821C8E94;
		  /* 821C8E94h */ case    3:  		/* lfd FR30, <#[R1 - 168]> */
		/* 821C8E94h case    3:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 821C8E94h case    3:*/		return 0x821C8E98;
		  /* 821C8E98h */ case    4:  		/* lfd FR31, <#[R1 - 160]> */
		/* 821C8E98h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 821C8E98h case    4:*/		return 0x821C8E9C;
		  /* 821C8E9Ch */ case    5:  		/* b -1276972 */
		/* 821C8E9Ch case    5:*/		return 0x82091270;
		/* 821C8E9Ch case    5:*/		return 0x821C8EA0;
	}
	return 0x821C8EA0;
} // Block from 821C8E88h-821C8EA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C8EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8EA0);
		  /* 821C8EA0h */ case    0:  		/* li R4, 4800 */
		/* 821C8EA0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8EA0h case    0:*/		return 0x821C8EA4;
		  /* 821C8EA4h */ case    1:  		/* mr R3, R31 */
		/* 821C8EA4h case    1:*/		regs.R3 = regs.R31;
		/* 821C8EA4h case    1:*/		return 0x821C8EA8;
		  /* 821C8EA8h */ case    2:  		/* bl -487488 */
		/* 821C8EA8h case    2:*/		regs.LR = 0x821C8EAC; return 0x82151E68;
		/* 821C8EA8h case    2:*/		return 0x821C8EAC;
	}
	return 0x821C8EAC;
} // Block from 821C8EA0h-821C8EACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8EAC);
		  /* 821C8EACh */ case    0:  		/* li R4, 4800 */
		/* 821C8EACh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8EACh case    0:*/		return 0x821C8EB0;
		  /* 821C8EB0h */ case    1:  		/* mr R3, R31 */
		/* 821C8EB0h case    1:*/		regs.R3 = regs.R31;
		/* 821C8EB0h case    1:*/		return 0x821C8EB4;
		  /* 821C8EB4h */ case    2:  		/* bl -487500 */
		/* 821C8EB4h case    2:*/		regs.LR = 0x821C8EB8; return 0x82151E68;
		/* 821C8EB4h case    2:*/		return 0x821C8EB8;
	}
	return 0x821C8EB8;
} // Block from 821C8EACh-821C8EB8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8EB8);
		  /* 821C8EB8h */ case    0:  		/* mfspr R12, LR */
		/* 821C8EB8h case    0:*/		regs.R12 = regs.LR;
		/* 821C8EB8h case    0:*/		return 0x821C8EBC;
		  /* 821C8EBCh */ case    1:  		/* bl -1277040 */
		/* 821C8EBCh case    1:*/		regs.LR = 0x821C8EC0; return 0x8209124C;
		/* 821C8EBCh case    1:*/		return 0x821C8EC0;
		  /* 821C8EC0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821C8EC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821C8EC0h case    2:*/		return 0x821C8EC4;
		  /* 821C8EC4h */ case    3:  		/* lwz R10, <#[R3 + 536]> */
		/* 821C8EC4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000218) );
		/* 821C8EC4h case    3:*/		return 0x821C8EC8;
		  /* 821C8EC8h */ case    4:  		/* mr R29, R3 */
		/* 821C8EC8h case    4:*/		regs.R29 = regs.R3;
		/* 821C8EC8h case    4:*/		return 0x821C8ECC;
		  /* 821C8ECCh */ case    5:  		/* mr R27, R4 */
		/* 821C8ECCh case    5:*/		regs.R27 = regs.R4;
		/* 821C8ECCh case    5:*/		return 0x821C8ED0;
		  /* 821C8ED0h */ case    6:  		/* mr R25, R5 */
		/* 821C8ED0h case    6:*/		regs.R25 = regs.R5;
		/* 821C8ED0h case    6:*/		return 0x821C8ED4;
		  /* 821C8ED4h */ case    7:  		/* mr R28, R6 */
		/* 821C8ED4h case    7:*/		regs.R28 = regs.R6;
		/* 821C8ED4h case    7:*/		return 0x821C8ED8;
		  /* 821C8ED8h */ case    8:  		/* mr R26, R7 */
		/* 821C8ED8h case    8:*/		regs.R26 = regs.R7;
		/* 821C8ED8h case    8:*/		return 0x821C8EDC;
		  /* 821C8EDCh */ case    9:  		/* li R30, 0 */
		/* 821C8EDCh case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821C8EDCh case    9:*/		return 0x821C8EE0;
		  /* 821C8EE0h */ case   10:  		/* li R31, 0 */
		/* 821C8EE0h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821C8EE0h case   10:*/		return 0x821C8EE4;
		  /* 821C8EE4h */ case   11:  		/* li R9, 0 */
		/* 821C8EE4h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821C8EE4h case   11:*/		return 0x821C8EE8;
		  /* 821C8EE8h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 821C8EE8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C8EE8h case   12:*/		return 0x821C8EEC;
		  /* 821C8EECh */ case   13:  		/* bc 12, CR6_EQ, 320 */
		/* 821C8EECh case   13:*/		if ( regs.CR[6].eq ) { return 0x821C902C;  }
		/* 821C8EECh case   13:*/		return 0x821C8EF0;
		  /* 821C8EF0h */ case   14:  		/* addi R11, R3, 352 */
		/* 821C8EF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x160);
		/* 821C8EF0h case   14:*/		return 0x821C8EF4;
		  /* 821C8EF4h */ case   15:  		/* lwz R8, <#[R11 - 4]> */
		/* 821C8EF4h case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821C8EF4h case   15:*/		return 0x821C8EF8;
		  /* 821C8EF8h */ case   16:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821C8EF8h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821C8EF8h case   16:*/		return 0x821C8EFC;
		  /* 821C8EFCh */ case   17:  		/* cmplw CR6, R8, R25 */
		/* 821C8EFCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R25);
		/* 821C8EFCh case   17:*/		return 0x821C8F00;
		  /* 821C8F00h */ case   18:  		/* bc 4, CR6_EQ, 16 */
		/* 821C8F00h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821C8F10;  }
		/* 821C8F00h case   18:*/		return 0x821C8F04;
		  /* 821C8F04h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821C8F04h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C8F04h case   19:*/		return 0x821C8F08;
		  /* 821C8F08h */ case   20:  		/* bc 4, CR6_EQ, 188 */
		/* 821C8F08h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821C8FC4;  }
		/* 821C8F08h case   20:*/		return 0x821C8F0C;
		  /* 821C8F0Ch */ case   21:  		/* lwz R30, <#[R11]> */
		/* 821C8F0Ch case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8F0Ch case   21:*/		return 0x821C8F10;
	}
	return 0x821C8F10;
} // Block from 821C8EB8h-821C8F10h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C8F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8F10);
		  /* 821C8F10h */ case    0:  		/* cmplw CR6, R8, R26 */
		/* 821C8F10h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R26);
		/* 821C8F10h case    0:*/		return 0x821C8F14;
		  /* 821C8F14h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821C8F14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C8F24;  }
		/* 821C8F14h case    1:*/		return 0x821C8F18;
		  /* 821C8F18h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821C8F18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C8F18h case    2:*/		return 0x821C8F1C;
		  /* 821C8F1Ch */ case    3:  		/* bc 4, CR6_EQ, 180 */
		/* 821C8F1Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C8FD0;  }
		/* 821C8F1Ch case    3:*/		return 0x821C8F20;
		  /* 821C8F20h */ case    4:  		/* lwz R31, <#[R11]> */
		/* 821C8F20h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821C8F20h case    4:*/		return 0x821C8F24;
	}
	return 0x821C8F24;
} // Block from 821C8F10h-821C8F24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C8F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8F24);
		  /* 821C8F24h */ case    0:  		/* addi R9, R9, 1 */
		/* 821C8F24h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821C8F24h case    0:*/		return 0x821C8F28;
		  /* 821C8F28h */ case    1:  		/* addi R11, R11, 12 */
		/* 821C8F28h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821C8F28h case    1:*/		return 0x821C8F2C;
		  /* 821C8F2Ch */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 821C8F2Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821C8F2Ch case    2:*/		return 0x821C8F30;
		  /* 821C8F30h */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 821C8F30h case    3:*/		if ( regs.CR[6].lt ) { return 0x821C8EF4;  }
		/* 821C8F30h case    3:*/		return 0x821C8F34;
		  /* 821C8F34h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821C8F34h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C8F34h case    4:*/		return 0x821C8F38;
		  /* 821C8F38h */ case    5:  		/* bc 12, CR6_EQ, 244 */
		/* 821C8F38h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C902C;  }
		/* 821C8F38h case    5:*/		return 0x821C8F3C;
		  /* 821C8F3Ch */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821C8F3Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C8F3Ch case    6:*/		return 0x821C8F40;
		  /* 821C8F40h */ case    7:  		/* bc 12, CR6_EQ, 236 */
		/* 821C8F40h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C902C;  }
		/* 821C8F40h case    7:*/		return 0x821C8F44;
		  /* 821C8F44h */ case    8:  		/* cmplw CR6, R30, R31 */
		/* 821C8F44h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 821C8F44h case    8:*/		return 0x821C8F48;
		  /* 821C8F48h */ case    9:  		/* bc 12, CR6_EQ, 228 */
		/* 821C8F48h case    9:*/		if ( regs.CR[6].eq ) { return 0x821C902C;  }
		/* 821C8F48h case    9:*/		return 0x821C8F4C;
		  /* 821C8F4Ch */ case   10:  		/* lis R11, -28311 */
		/* 821C8F4Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821C8F4Ch case   10:*/		return 0x821C8F50;
		  /* 821C8F50h */ case   11:  		/* lwz R10, <#[R30 + 8]> */
		/* 821C8F50h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821C8F50h case   11:*/		return 0x821C8F54;
		  /* 821C8F54h */ case   12:  		/* lis R9, 0 */
		/* 821C8F54h case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 821C8F54h case   12:*/		return 0x821C8F58;
		  /* 821C8F58h */ case   13:  		/* lwz R8, <#[R31 + 8]> */
		/* 821C8F58h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C8F58h case   13:*/		return 0x821C8F5C;
		  /* 821C8F5Ch */ case   14:  		/* ori R11, R11, 5192 */
		/* 821C8F5Ch case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821C8F5Ch case   14:*/		return 0x821C8F60;
		  /* 821C8F60h */ case   15:  		/* ori R9, R9, 36262 */
		/* 821C8F60h case   15:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 821C8F60h case   15:*/		return 0x821C8F64;
		  /* 821C8F64h */ case   16:  		/* rldicl R7, R27, 0, 32 */
		/* 821C8F64h case   16:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R27);
		/* 821C8F64h case   16:*/		return 0x821C8F68;
		  /* 821C8F68h */ case   17:  		/* rldimi R11, R9, 32, 0 */
		/* 821C8F68h case   17:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R9);
		/* 821C8F68h case   17:*/		return 0x821C8F6C;
		  /* 821C8F6Ch */ case   18:  		/* lis R9, -28311 */
		/* 821C8F6Ch case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF9169);
		/* 821C8F6Ch case   18:*/		return 0x821C8F70;
		  /* 821C8F70h */ case   19:  		/* lis R6, 0 */
		/* 821C8F70h case   19:*/		cpu::op::lis<0>(regs,&regs.R6,0x0);
		/* 821C8F70h case   19:*/		return 0x821C8F74;
		  /* 821C8F74h */ case   20:  		/* srd R11, R11, R7 */
		/* 821C8F74h case   20:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821C8F74h case   20:*/		return 0x821C8F78;
		  /* 821C8F78h */ case   21:  		/* ori R9, R9, 5192 */
		/* 821C8F78h case   21:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1448);
		/* 821C8F78h case   21:*/		return 0x821C8F7C;
		  /* 821C8F7Ch */ case   22:  		/* ori R6, R6, 36262 */
		/* 821C8F7Ch case   22:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x8DA6);
		/* 821C8F7Ch case   22:*/		return 0x821C8F80;
		  /* 821C8F80h */ case   23:  		/* srd R11, R11, R7 */
		/* 821C8F80h case   23:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821C8F80h case   23:*/		return 0x821C8F84;
		  /* 821C8F84h */ case   24:  		/* rldimi R9, R6, 32, 0 */
		/* 821C8F84h case   24:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R9,regs.R6);
		/* 821C8F84h case   24:*/		return 0x821C8F88;
		  /* 821C8F88h */ case   25:  		/* rldicl R6, R28, 0, 32 */
		/* 821C8F88h case   25:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R6,regs.R28);
		/* 821C8F88h case   25:*/		return 0x821C8F8C;
		  /* 821C8F8Ch */ case   26:  		/* srd R11, R11, R7 */
		/* 821C8F8Ch case   26:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821C8F8Ch case   26:*/		return 0x821C8F90;
		  /* 821C8F90h */ case   27:  		/* srd R9, R9, R6 */
		/* 821C8F90h case   27:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821C8F90h case   27:*/		return 0x821C8F94;
		  /* 821C8F94h */ case   28:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821C8F94h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821C8F94h case   28:*/		return 0x821C8F98;
		  /* 821C8F98h */ case   29:  		/* rlwinm R10, R10, 18, 14, 31 */
		/* 821C8F98h case   29:*/		cpu::op::rlwinm<0,18,14,31>(regs,&regs.R10,regs.R10);
		/* 821C8F98h case   29:*/		return 0x821C8F9C;
		  /* 821C8F9Ch */ case   30:  		/* srd R9, R9, R6 */
		/* 821C8F9Ch case   30:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821C8F9Ch case   30:*/		return 0x821C8FA0;
		  /* 821C8FA0h */ case   31:  		/* xor R11, R11, R10 */
		/* 821C8FA0h case   31:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C8FA0h case   31:*/		return 0x821C8FA4;
		  /* 821C8FA4h */ case   32:  		/* srd R10, R9, R6 */
		/* 821C8FA4h case   32:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R9,regs.R6);
		/* 821C8FA4h case   32:*/		return 0x821C8FA8;
		  /* 821C8FA8h */ case   33:  		/* rlwinm. R9, R11, 0, 29, 31 */
		/* 821C8FA8h case   33:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R9,regs.R11);
		/* 821C8FA8h case   33:*/		return 0x821C8FAC;
		  /* 821C8FACh */ case   34:  		/* rlwinm R11, R8, 18, 29, 31 */
		/* 821C8FACh case   34:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R8);
		/* 821C8FACh case   34:*/		return 0x821C8FB0;
		  /* 821C8FB0h */ case   35:  		/* rlwinm R6, R10, 0, 29, 31 */
		/* 821C8FB0h case   35:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R10);
		/* 821C8FB0h case   35:*/		return 0x821C8FB4;
		  /* 821C8FB4h */ case   36:  		/* bc 12, CR0_EQ, 40 */
		/* 821C8FB4h case   36:*/		if ( regs.CR[0].eq ) { return 0x821C8FDC;  }
		/* 821C8FB4h case   36:*/		return 0x821C8FB8;
		  /* 821C8FB8h */ case   37:  		/* li R4, 4800 */
		/* 821C8FB8h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8FB8h case   37:*/		return 0x821C8FBC;
		  /* 821C8FBCh */ case   38:  		/* mr R3, R29 */
		/* 821C8FBCh case   38:*/		regs.R3 = regs.R29;
		/* 821C8FBCh case   38:*/		return 0x821C8FC0;
		  /* 821C8FC0h */ case   39:  		/* bl -487768 */
		/* 821C8FC0h case   39:*/		regs.LR = 0x821C8FC4; return 0x82151E68;
		/* 821C8FC0h case   39:*/		return 0x821C8FC4;
	}
	return 0x821C8FC4;
} // Block from 821C8F24h-821C8FC4h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821C8FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8FC4);
		  /* 821C8FC4h */ case    0:  		/* li R4, 4800 */
		/* 821C8FC4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8FC4h case    0:*/		return 0x821C8FC8;
		  /* 821C8FC8h */ case    1:  		/* mr R3, R29 */
		/* 821C8FC8h case    1:*/		regs.R3 = regs.R29;
		/* 821C8FC8h case    1:*/		return 0x821C8FCC;
		  /* 821C8FCCh */ case    2:  		/* bl -487780 */
		/* 821C8FCCh case    2:*/		regs.LR = 0x821C8FD0; return 0x82151E68;
		/* 821C8FCCh case    2:*/		return 0x821C8FD0;
	}
	return 0x821C8FD0;
} // Block from 821C8FC4h-821C8FD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8FD0);
		  /* 821C8FD0h */ case    0:  		/* li R4, 4800 */
		/* 821C8FD0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C8FD0h case    0:*/		return 0x821C8FD4;
		  /* 821C8FD4h */ case    1:  		/* mr R3, R29 */
		/* 821C8FD4h case    1:*/		regs.R3 = regs.R29;
		/* 821C8FD4h case    1:*/		return 0x821C8FD8;
		  /* 821C8FD8h */ case    2:  		/* bl -487792 */
		/* 821C8FD8h case    2:*/		regs.LR = 0x821C8FDC; return 0x82151E68;
		/* 821C8FD8h case    2:*/		return 0x821C8FDC;
	}
	return 0x821C8FDC;
} // Block from 821C8FD0h-821C8FDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C8FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8FDC);
		  /* 821C8FDCh */ case    0:  		/* cmplw CR6, R11, R6 */
		/* 821C8FDCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821C8FDCh case    0:*/		return 0x821C8FE0;
		  /* 821C8FE0h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821C8FE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C8FF4;  }
		/* 821C8FE0h case    1:*/		return 0x821C8FE4;
		  /* 821C8FE4h */ case    2:  		/* mr R5, R31 */
		/* 821C8FE4h case    2:*/		regs.R5 = regs.R31;
		/* 821C8FE4h case    2:*/		return 0x821C8FE8;
		  /* 821C8FE8h */ case    3:  		/* mr R4, R26 */
		/* 821C8FE8h case    3:*/		regs.R4 = regs.R26;
		/* 821C8FE8h case    3:*/		return 0x821C8FEC;
		  /* 821C8FECh */ case    4:  		/* mr R3, R29 */
		/* 821C8FECh case    4:*/		regs.R3 = regs.R29;
		/* 821C8FECh case    4:*/		return 0x821C8FF0;
		  /* 821C8FF0h */ case    5:  		/* bl -17448 */
		/* 821C8FF0h case    5:*/		regs.LR = 0x821C8FF4; return 0x821C4BC8;
		/* 821C8FF0h case    5:*/		return 0x821C8FF4;
	}
	return 0x821C8FF4;
} // Block from 821C8FDCh-821C8FF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C8FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C8FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C8FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C8FF4);
		  /* 821C8FF4h */ case    0:  		/* addi R10, R28, -1 */
		/* 821C8FF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0xFFFFFFFF);
		/* 821C8FF4h case    0:*/		return 0x821C8FF8;
		  /* 821C8FF8h */ case    1:  		/* cntlzw R11, R27 */
		/* 821C8FF8h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R27);
		/* 821C8FF8h case    1:*/		return 0x821C8FFC;
		  /* 821C8FFCh */ case    2:  		/* andc R10, R28, R10 */
		/* 821C8FFCh case    2:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 821C8FFCh case    2:*/		return 0x821C9000;
		  /* 821C9000h */ case    3:  		/* mr R8, R31 */
		/* 821C9000h case    3:*/		regs.R8 = regs.R31;
		/* 821C9000h case    3:*/		return 0x821C9004;
		  /* 821C9004h */ case    4:  		/* cntlzw R10, R10 */
		/* 821C9004h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821C9004h case    4:*/		return 0x821C9008;
		  /* 821C9008h */ case    5:  		/* mr R7, R26 */
		/* 821C9008h case    5:*/		regs.R7 = regs.R26;
		/* 821C9008h case    5:*/		return 0x821C900C;
		  /* 821C900Ch */ case    6:  		/* subfic R10, R10, -1 */
		/* 821C900Ch case    6:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C900Ch case    6:*/		return 0x821C9010;
		  /* 821C9010h */ case    7:  		/* mr R5, R30 */
		/* 821C9010h case    7:*/		regs.R5 = regs.R30;
		/* 821C9010h case    7:*/		return 0x821C9014;
		  /* 821C9014h */ case    8:  		/* add R6, R10, R11 */
		/* 821C9014h case    8:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 821C9014h case    8:*/		return 0x821C9018;
		  /* 821C9018h */ case    9:  		/* mr R4, R25 */
		/* 821C9018h case    9:*/		regs.R4 = regs.R25;
		/* 821C9018h case    9:*/		return 0x821C901C;
		  /* 821C901Ch */ case   10:  		/* mr R3, R29 */
		/* 821C901Ch case   10:*/		regs.R3 = regs.R29;
		/* 821C901Ch case   10:*/		return 0x821C9020;
		  /* 821C9020h */ case   11:  		/* bl -16608 */
		/* 821C9020h case   11:*/		regs.LR = 0x821C9024; return 0x821C4F40;
		/* 821C9020h case   11:*/		return 0x821C9024;
		  /* 821C9024h */ case   12:  		/* addi R1, R1, 144 */
		/* 821C9024h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821C9024h case   12:*/		return 0x821C9028;
		  /* 821C9028h */ case   13:  		/* b -1277324 */
		/* 821C9028h case   13:*/		return 0x8209129C;
		/* 821C9028h case   13:*/		return 0x821C902C;
	}
	return 0x821C902C;
} // Block from 821C8FF4h-821C902Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C902Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C902C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C902C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C902C);
		  /* 821C902Ch */ case    0:  		/* li R4, 4800 */
		/* 821C902Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821C902Ch case    0:*/		return 0x821C9030;
		  /* 821C9030h */ case    1:  		/* mr R3, R29 */
		/* 821C9030h case    1:*/		regs.R3 = regs.R29;
		/* 821C9030h case    1:*/		return 0x821C9034;
		  /* 821C9034h */ case    2:  		/* bl -487884 */
		/* 821C9034h case    2:*/		regs.LR = 0x821C9038; return 0x82151E68;
		/* 821C9034h case    2:*/		return 0x821C9038;
	}
	return 0x821C9038;
} // Block from 821C902Ch-821C9038h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9038);
		  /* 821C9038h */ case    0:  		/* mfspr R12, LR */
		/* 821C9038h case    0:*/		regs.R12 = regs.LR;
		/* 821C9038h case    0:*/		return 0x821C903C;
		  /* 821C903Ch */ case    1:  		/* bl -1277452 */
		/* 821C903Ch case    1:*/		regs.LR = 0x821C9040; return 0x82091230;
		/* 821C903Ch case    1:*/		return 0x821C9040;
		  /* 821C9040h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821C9040h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821C9040h case    2:*/		return 0x821C9044;
		  /* 821C9044h */ case    3:  		/* lwz R11, <#[R3 + 36]> */
		/* 821C9044h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 821C9044h case    3:*/		return 0x821C9048;
		  /* 821C9048h */ case    4:  		/* mr R23, R3 */
		/* 821C9048h case    4:*/		regs.R23 = regs.R3;
		/* 821C9048h case    4:*/		return 0x821C904C;
		  /* 821C904Ch */ case    5:  		/* mr R18, R4 */
		/* 821C904Ch case    5:*/		regs.R18 = regs.R4;
		/* 821C904Ch case    5:*/		return 0x821C9050;
		  /* 821C9050h */ case    6:  		/* mr R20, R5 */
		/* 821C9050h case    6:*/		regs.R20 = regs.R5;
		/* 821C9050h case    6:*/		return 0x821C9054;
		  /* 821C9054h */ case    7:  		/* mr R21, R6 */
		/* 821C9054h case    7:*/		regs.R21 = regs.R6;
		/* 821C9054h case    7:*/		return 0x821C9058;
		  /* 821C9058h */ case    8:  		/* li R22, 0 */
		/* 821C9058h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821C9058h case    8:*/		return 0x821C905C;
		  /* 821C905Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821C905Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C905Ch case    9:*/		return 0x821C9060;
		  /* 821C9060h */ case   10:  		/* bc 12, CR6_EQ, 144 */
		/* 821C9060h case   10:*/		if ( regs.CR[6].eq ) { return 0x821C90F0;  }
		/* 821C9060h case   10:*/		return 0x821C9064;
		  /* 821C9064h */ case   11:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 821C9064h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 821C9064h case   11:*/		return 0x821C9068;
		  /* 821C9068h */ case   12:  		/* addi R11, R3, 972 */
		/* 821C9068h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x3CC);
		/* 821C9068h case   12:*/		return 0x821C906C;
		  /* 821C906Ch */ case   13:  		/* cmplwi CR6, R4, 132 */
		/* 821C906Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000084);
		/* 821C906Ch case   13:*/		return 0x821C9070;
		  /* 821C9070h */ case   14:  		/* bc 4, CR6_GT, 20 */
		/* 821C9070h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821C9084;  }
		/* 821C9070h case   14:*/		return 0x821C9074;
		  /* 821C9074h */ case   15:  		/* mr R3, R11 */
		/* 821C9074h case   15:*/		regs.R3 = regs.R11;
		/* 821C9074h case   15:*/		return 0x821C9078;
		  /* 821C9078h */ case   16:  		/* bl -409960 */
		/* 821C9078h case   16:*/		regs.LR = 0x821C907C; return 0x82164F10;
		/* 821C9078h case   16:*/		return 0x821C907C;
		  /* 821C907Ch */ case   17:  		/* mr R22, R3 */
		/* 821C907Ch case   17:*/		regs.R22 = regs.R3;
		/* 821C907Ch case   17:*/		return 0x821C9080;
		  /* 821C9080h */ case   18:  		/* b 112 */
		/* 821C9080h case   18:*/		return 0x821C90F0;
		/* 821C9080h case   18:*/		return 0x821C9084;
	}
	return 0x821C9084;
} // Block from 821C9038h-821C9084h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C9084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9084);
		  /* 821C9084h */ case    0:  		/* lwz R9, <#[R11 + 140]> */
		/* 821C9084h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000008C) );
		/* 821C9084h case    0:*/		return 0x821C9088;
		  /* 821C9088h */ case    1:  		/* lwz R10, <#[R11 + 144]> */
		/* 821C9088h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000090) );
		/* 821C9088h case    1:*/		return 0x821C908C;
		  /* 821C908Ch */ case    2:  		/* subf R9, R10, R9 */
		/* 821C908Ch case    2:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 821C908Ch case    2:*/		return 0x821C9090;
		  /* 821C9090h */ case    3:  		/* addi R9, R9, 4096 */
		/* 821C9090h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1000);
		/* 821C9090h case    3:*/		return 0x821C9094;
		  /* 821C9094h */ case    4:  		/* cmplw CR6, R9, R4 */
		/* 821C9094h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R4);
		/* 821C9094h case    4:*/		return 0x821C9098;
		  /* 821C9098h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 821C9098h case    5:*/		if ( regs.CR[6].lt ) { return 0x821C90A8;  }
		/* 821C9098h case    5:*/		return 0x821C909C;
		  /* 821C909Ch */ case    6:  		/* add R9, R10, R4 */
		/* 821C909Ch case    6:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R4);
		/* 821C909Ch case    6:*/		return 0x821C90A0;
		  /* 821C90A0h */ case    7:  		/* stw R9, <#[R11 + 144]> */
		/* 821C90A0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000090) );
		/* 821C90A0h case    7:*/		return 0x821C90A4;
		  /* 821C90A4h */ case    8:  		/* b 72 */
		/* 821C90A4h case    8:*/		return 0x821C90EC;
		/* 821C90A4h case    8:*/		return 0x821C90A8;
	}
	return 0x821C90A8;
} // Block from 821C9084h-821C90A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821C90A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C90A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C90A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C90A8);
		  /* 821C90A8h */ case    0:  		/* rlwinm R10, R4, 30, 2, 31 */
		/* 821C90A8h case    0:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R4);
		/* 821C90A8h case    0:*/		return 0x821C90AC;
		  /* 821C90ACh */ case    1:  		/* addi R10, R10, -1 */
		/* 821C90ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C90ACh case    1:*/		return 0x821C90B0;
		  /* 821C90B0h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821C90B0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821C90B0h case    2:*/		return 0x821C90B4;
		  /* 821C90B4h */ case    3:  		/* lwzx R31, <#[R10 + R11]> */
		/* 821C90B4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821C90B4h case    3:*/		return 0x821C90B8;
		  /* 821C90B8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821C90B8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C90B8h case    4:*/		return 0x821C90BC;
		  /* 821C90BCh */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821C90BCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821C90E0;  }
		/* 821C90BCh case    5:*/		return 0x821C90C0;
		  /* 821C90C0h */ case    6:  		/* lwz R9, <#[R31]> */
		/* 821C90C0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821C90C0h case    6:*/		return 0x821C90C4;
		  /* 821C90C4h */ case    7:  		/* mr R5, R4 */
		/* 821C90C4h case    7:*/		regs.R5 = regs.R4;
		/* 821C90C4h case    7:*/		return 0x821C90C8;
		  /* 821C90C8h */ case    8:  		/* li R4, 0 */
		/* 821C90C8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C90C8h case    8:*/		return 0x821C90CC;
		  /* 821C90CCh */ case    9:  		/* mr R3, R31 */
		/* 821C90CCh case    9:*/		regs.R3 = regs.R31;
		/* 821C90CCh case    9:*/		return 0x821C90D0;
		  /* 821C90D0h */ case   10:  		/* stwx R9, <#[R10 + R11]> */
		/* 821C90D0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821C90D0h case   10:*/		return 0x821C90D4;
		  /* 821C90D4h */ case   11:  		/* bl -1277332 */
		/* 821C90D4h case   11:*/		regs.LR = 0x821C90D8; return 0x82091340;
		/* 821C90D4h case   11:*/		return 0x821C90D8;
		  /* 821C90D8h */ case   12:  		/* mr R10, R31 */
		/* 821C90D8h case   12:*/		regs.R10 = regs.R31;
		/* 821C90D8h case   12:*/		return 0x821C90DC;
		  /* 821C90DCh */ case   13:  		/* b 16 */
		/* 821C90DCh case   13:*/		return 0x821C90EC;
		/* 821C90DCh case   13:*/		return 0x821C90E0;
	}
	return 0x821C90E0;
} // Block from 821C90A8h-821C90E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C90E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C90E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C90E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C90E0);
		  /* 821C90E0h */ case    0:  		/* mr R3, R11 */
		/* 821C90E0h case    0:*/		regs.R3 = regs.R11;
		/* 821C90E0h case    0:*/		return 0x821C90E4;
		  /* 821C90E4h */ case    1:  		/* bl -412404 */
		/* 821C90E4h case    1:*/		regs.LR = 0x821C90E8; return 0x821645F0;
		/* 821C90E4h case    1:*/		return 0x821C90E8;
		  /* 821C90E8h */ case    2:  		/* mr R10, R3 */
		/* 821C90E8h case    2:*/		regs.R10 = regs.R3;
		/* 821C90E8h case    2:*/		return 0x821C90EC;
	}
	return 0x821C90EC;
} // Block from 821C90E0h-821C90ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C90ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C90EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C90EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C90EC);
		  /* 821C90ECh */ case    0:  		/* mr R22, R10 */
		/* 821C90ECh case    0:*/		regs.R22 = regs.R10;
		/* 821C90ECh case    0:*/		return 0x821C90F0;
	}
	return 0x821C90F0;
} // Block from 821C90ECh-821C90F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C90F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C90F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C90F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C90F0);
		  /* 821C90F0h */ case    0:  		/* lwz R31, <#[R18 + 4]> */
		/* 821C90F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R18 + 0x00000004) );
		/* 821C90F0h case    0:*/		return 0x821C90F4;
		  /* 821C90F4h */ case    1:  		/* li R19, 0 */
		/* 821C90F4h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821C90F4h case    1:*/		return 0x821C90F8;
		  /* 821C90F8h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C90F8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C90F8h case    2:*/		return 0x821C90FC;
		  /* 821C90FCh */ case    3:  		/* bc 4, CR0_EQ, 236 */
		/* 821C90FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C91E8;  }
		/* 821C90FCh case    3:*/		return 0x821C9100;
		  /* 821C9100h */ case    4:  		/* cmplwi CR0, R31, 0 */
		/* 821C9100h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C9100h case    4:*/		return 0x821C9104;
		  /* 821C9104h */ case    5:  		/* bc 12, CR0_EQ, 228 */
		/* 821C9104h case    5:*/		if ( regs.CR[0].eq ) { return 0x821C91E8;  }
		/* 821C9104h case    5:*/		return 0x821C9108;
		  /* 821C9108h */ case    6:  		/* lwz R30, <#[R31 + 80]> */
		/* 821C9108h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000050) );
		/* 821C9108h case    6:*/		return 0x821C910C;
		  /* 821C910Ch */ case    7:  		/* mr R7, R21 */
		/* 821C910Ch case    7:*/		regs.R7 = regs.R21;
		/* 821C910Ch case    7:*/		return 0x821C9110;
		  /* 821C9110h */ case    8:  		/* addi R5, R31, 16 */
		/* 821C9110h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x10);
		/* 821C9110h case    8:*/		return 0x821C9114;
		  /* 821C9114h */ case    9:  		/* addi R6, R30, 16 */
		/* 821C9114h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x10);
		/* 821C9114h case    9:*/		return 0x821C9118;
		  /* 821C9118h */ case   10:  		/* mr R4, R31 */
		/* 821C9118h case   10:*/		regs.R4 = regs.R31;
		/* 821C9118h case   10:*/		return 0x821C911C;
		  /* 821C911Ch */ case   11:  		/* mr R3, R23 */
		/* 821C911Ch case   11:*/		regs.R3 = regs.R23;
		/* 821C911Ch case   11:*/		return 0x821C9120;
		  /* 821C9120h */ case   12:  		/* bl -13744 */
		/* 821C9120h case   12:*/		regs.LR = 0x821C9124; return 0x821C5B70;
		/* 821C9120h case   12:*/		return 0x821C9124;
		  /* 821C9124h */ case   13:  		/* add R29, R3, R19 */
		/* 821C9124h case   13:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R19);
		/* 821C9124h case   13:*/		return 0x821C9128;
		  /* 821C9128h */ case   14:  		/* mr R7, R21 */
		/* 821C9128h case   14:*/		regs.R7 = regs.R21;
		/* 821C9128h case   14:*/		return 0x821C912C;
		  /* 821C912Ch */ case   15:  		/* addi R6, R30, 24 */
		/* 821C912Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x18);
		/* 821C912Ch case   15:*/		return 0x821C9130;
		  /* 821C9130h */ case   16:  		/* addi R5, R31, 24 */
		/* 821C9130h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x18);
		/* 821C9130h case   16:*/		return 0x821C9134;
		  /* 821C9134h */ case   17:  		/* mr R4, R31 */
		/* 821C9134h case   17:*/		regs.R4 = regs.R31;
		/* 821C9134h case   17:*/		return 0x821C9138;
		  /* 821C9138h */ case   18:  		/* mr R3, R23 */
		/* 821C9138h case   18:*/		regs.R3 = regs.R23;
		/* 821C9138h case   18:*/		return 0x821C913C;
		  /* 821C913Ch */ case   19:  		/* bl -13772 */
		/* 821C913Ch case   19:*/		regs.LR = 0x821C9140; return 0x821C5B70;
		/* 821C913Ch case   19:*/		return 0x821C9140;
		  /* 821C9140h */ case   20:  		/* add R29, R3, R29 */
		/* 821C9140h case   20:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R29);
		/* 821C9140h case   20:*/		return 0x821C9144;
		  /* 821C9144h */ case   21:  		/* mr R7, R21 */
		/* 821C9144h case   21:*/		regs.R7 = regs.R21;
		/* 821C9144h case   21:*/		return 0x821C9148;
		  /* 821C9148h */ case   22:  		/* addi R6, R30, 32 */
		/* 821C9148h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x20);
		/* 821C9148h case   22:*/		return 0x821C914C;
		  /* 821C914Ch */ case   23:  		/* addi R5, R31, 32 */
		/* 821C914Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x20);
		/* 821C914Ch case   23:*/		return 0x821C9150;
		  /* 821C9150h */ case   24:  		/* mr R4, R31 */
		/* 821C9150h case   24:*/		regs.R4 = regs.R31;
		/* 821C9150h case   24:*/		return 0x821C9154;
		  /* 821C9154h */ case   25:  		/* mr R3, R23 */
		/* 821C9154h case   25:*/		regs.R3 = regs.R23;
		/* 821C9154h case   25:*/		return 0x821C9158;
		  /* 821C9158h */ case   26:  		/* bl -13800 */
		/* 821C9158h case   26:*/		regs.LR = 0x821C915C; return 0x821C5B70;
		/* 821C9158h case   26:*/		return 0x821C915C;
		  /* 821C915Ch */ case   27:  		/* lwz R11, <#[R30 + 76]> */
		/* 821C915Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821C915Ch case   27:*/		return 0x821C9160;
		  /* 821C9160h */ case   28:  		/* add R19, R3, R29 */
		/* 821C9160h case   28:*/		cpu::op::add<0>(regs,&regs.R19,regs.R3,regs.R29);
		/* 821C9160h case   28:*/		return 0x821C9164;
		  /* 821C9164h */ case   29:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821C9164h case   29:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821C9164h case   29:*/		return 0x821C9168;
		  /* 821C9168h */ case   30:  		/* bc 12, CR0_EQ, 104 */
		/* 821C9168h case   30:*/		if ( regs.CR[0].eq ) { return 0x821C91D0;  }
		/* 821C9168h case   30:*/		return 0x821C916C;
		  /* 821C916Ch */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C916Ch case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C916Ch case   31:*/		return 0x821C9170;
		  /* 821C9170h */ case   32:  		/* lwzx R11, <#[R11 + R22]> */
		/* 821C9170h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 821C9170h case   32:*/		return 0x821C9174;
		  /* 821C9174h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821C9174h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9174h case   33:*/		return 0x821C9178;
		  /* 821C9178h */ case   34:  		/* bc 4, CR6_EQ, 88 */
		/* 821C9178h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821C91D0;  }
		/* 821C9178h case   34:*/		return 0x821C917C;
		  /* 821C917Ch */ case   35:  		/* lwz R11, <#[R23 + 744]> */
		/* 821C917Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x000002E8) );
		/* 821C917Ch case   35:*/		return 0x821C9180;
		  /* 821C9180h */ case   36:  		/* cmplwi CR6, R11, 0 */
		/* 821C9180h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9180h case   36:*/		return 0x821C9184;
		  /* 821C9184h */ case   37:  		/* bc 12, CR6_EQ, 48 */
		/* 821C9184h case   37:*/		if ( regs.CR[6].eq ) { return 0x821C91B4;  }
		/* 821C9184h case   37:*/		return 0x821C9188;
		  /* 821C9188h */ case   38:  		/* lwz R11, <#[R23 + 36]> */
		/* 821C9188h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821C9188h case   38:*/		return 0x821C918C;
		  /* 821C918Ch */ case   39:  		/* mr R3, R23 */
		/* 821C918Ch case   39:*/		regs.R3 = regs.R23;
		/* 821C918Ch case   39:*/		return 0x821C9190;
		  /* 821C9190h */ case   40:  		/* stw R11, <#[R23 + 32]> */
		/* 821C9190h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 821C9190h case   40:*/		return 0x821C9194;
		  /* 821C9194h */ case   41:  		/* lwz R11, <#[R30 + 76]> */
		/* 821C9194h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821C9194h case   41:*/		return 0x821C9198;
		  /* 821C9198h */ case   42:  		/* rlwinm R4, R11, 0, 13, 31 */
		/* 821C9198h case   42:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R4,regs.R11);
		/* 821C9198h case   42:*/		return 0x821C919C;
		  /* 821C919Ch */ case   43:  		/* bl -412732 */
		/* 821C919Ch case   43:*/		regs.LR = 0x821C91A0; return 0x82164560;
		/* 821C919Ch case   43:*/		return 0x821C91A0;
		  /* 821C91A0h */ case   44:  		/* stw R3, <#[R23 + 752]> */
		/* 821C91A0h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R23 + 0x000002F0) );
		/* 821C91A0h case   44:*/		return 0x821C91A4;
		  /* 821C91A4h */ case   45:  		/* mr R3, R23 */
		/* 821C91A4h case   45:*/		regs.R3 = regs.R23;
		/* 821C91A4h case   45:*/		return 0x821C91A8;
		  /* 821C91A8h */ case   46:  		/* bl 164152 */
		/* 821C91A8h case   46:*/		regs.LR = 0x821C91AC; return 0x821F12E0;
		/* 821C91A8h case   46:*/		return 0x821C91AC;
		  /* 821C91ACh */ case   47:  		/* li R11, 0 */
		/* 821C91ACh case   47:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C91ACh case   47:*/		return 0x821C91B0;
		  /* 821C91B0h */ case   48:  		/* stw R11, <#[R23 + 32]> */
		/* 821C91B0h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 821C91B0h case   48:*/		return 0x821C91B4;
	}
	return 0x821C91B4;
} // Block from 821C90F0h-821C91B4h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821C91B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C91B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C91B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C91B4);
		  /* 821C91B4h */ case    0:  		/* lwz R11, <#[R30 + 76]> */
		/* 821C91B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821C91B4h case    0:*/		return 0x821C91B8;
		  /* 821C91B8h */ case    1:  		/* lwz R10, <#[R23 + 36]> */
		/* 821C91B8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000024) );
		/* 821C91B8h case    1:*/		return 0x821C91BC;
		  /* 821C91BCh */ case    2:  		/* rlwinm R11, R11, 2, 11, 29 */
		/* 821C91BCh case    2:*/		cpu::op::rlwinm<0,2,11,29>(regs,&regs.R11,regs.R11);
		/* 821C91BCh case    2:*/		return 0x821C91C0;
		  /* 821C91C0h */ case    3:  		/* stwx R10, <#[R11 + R22]> */
		/* 821C91C0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 821C91C0h case    3:*/		return 0x821C91C4;
		  /* 821C91C4h */ case    4:  		/* lwz R11, <#[R23 + 36]> */
		/* 821C91C4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821C91C4h case    4:*/		return 0x821C91C8;
		  /* 821C91C8h */ case    5:  		/* addi R11, R11, 1 */
		/* 821C91C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C91C8h case    5:*/		return 0x821C91CC;
		  /* 821C91CCh */ case    6:  		/* stw R11, <#[R23 + 36]> */
		/* 821C91CCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821C91CCh case    6:*/		return 0x821C91D0;
	}
	return 0x821C91D0;
} // Block from 821C91B4h-821C91D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C91D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C91D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C91D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C91D0);
		  /* 821C91D0h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C91D0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C91D0h case    0:*/		return 0x821C91D4;
		  /* 821C91D4h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821C91D4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821C91D4h case    1:*/		return 0x821C91D8;
		  /* 821C91D8h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C91D8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C91D8h case    2:*/		return 0x821C91DC;
		  /* 821C91DCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C91DCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C91E8;  }
		/* 821C91DCh case    3:*/		return 0x821C91E0;
		  /* 821C91E0h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821C91E0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C91E0h case    4:*/		return 0x821C91E4;
		  /* 821C91E4h */ case    5:  		/* bc 4, CR6_EQ, -220 */
		/* 821C91E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C9108;  }
		/* 821C91E4h case    5:*/		return 0x821C91E8;
	}
	return 0x821C91E8;
} // Block from 821C91D0h-821C91E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C91E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C91E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C91E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C91E8);
		  /* 821C91E8h */ case    0:  		/* lwz R31, <#[R18 + 4]> */
		/* 821C91E8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R18 + 0x00000004) );
		/* 821C91E8h case    0:*/		return 0x821C91EC;
		  /* 821C91ECh */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C91ECh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C91ECh case    1:*/		return 0x821C91F0;
		  /* 821C91F0h */ case    2:  		/* bc 4, CR0_EQ, 108 */
		/* 821C91F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C925C;  }
		/* 821C91F0h case    2:*/		return 0x821C91F4;
		  /* 821C91F4h */ case    3:  		/* cmplwi CR0, R31, 0 */
		/* 821C91F4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C91F4h case    3:*/		return 0x821C91F8;
		  /* 821C91F8h */ case    4:  		/* bc 12, CR0_EQ, 100 */
		/* 821C91F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C925C;  }
		/* 821C91F8h case    4:*/		return 0x821C91FC;
		  /* 821C91FCh */ case    5:  		/* lwz R11, <#[R31 + 80]> */
		/* 821C91FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 821C91FCh case    5:*/		return 0x821C9200;
		  /* 821C9200h */ case    6:  		/* mr R6, R21 */
		/* 821C9200h case    6:*/		regs.R6 = regs.R21;
		/* 821C9200h case    6:*/		return 0x821C9204;
		  /* 821C9204h */ case    7:  		/* mr R5, R20 */
		/* 821C9204h case    7:*/		regs.R5 = regs.R20;
		/* 821C9204h case    7:*/		return 0x821C9208;
		  /* 821C9208h */ case    8:  		/* addi R4, R11, 16 */
		/* 821C9208h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 821C9208h case    8:*/		return 0x821C920C;
		  /* 821C920Ch */ case    9:  		/* mr R3, R23 */
		/* 821C920Ch case    9:*/		regs.R3 = regs.R23;
		/* 821C920Ch case    9:*/		return 0x821C9210;
		  /* 821C9210h */ case   10:  		/* bl -39120 */
		/* 821C9210h case   10:*/		regs.LR = 0x821C9214; return 0x821BF940;
		/* 821C9210h case   10:*/		return 0x821C9214;
		  /* 821C9214h */ case   11:  		/* lwz R11, <#[R31 + 80]> */
		/* 821C9214h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 821C9214h case   11:*/		return 0x821C9218;
		  /* 821C9218h */ case   12:  		/* mr R6, R21 */
		/* 821C9218h case   12:*/		regs.R6 = regs.R21;
		/* 821C9218h case   12:*/		return 0x821C921C;
		  /* 821C921Ch */ case   13:  		/* mr R5, R20 */
		/* 821C921Ch case   13:*/		regs.R5 = regs.R20;
		/* 821C921Ch case   13:*/		return 0x821C9220;
		  /* 821C9220h */ case   14:  		/* mr R3, R23 */
		/* 821C9220h case   14:*/		regs.R3 = regs.R23;
		/* 821C9220h case   14:*/		return 0x821C9224;
		  /* 821C9224h */ case   15:  		/* addi R4, R11, 24 */
		/* 821C9224h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x18);
		/* 821C9224h case   15:*/		return 0x821C9228;
		  /* 821C9228h */ case   16:  		/* bl -39144 */
		/* 821C9228h case   16:*/		regs.LR = 0x821C922C; return 0x821BF940;
		/* 821C9228h case   16:*/		return 0x821C922C;
		  /* 821C922Ch */ case   17:  		/* lwz R11, <#[R31 + 80]> */
		/* 821C922Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 821C922Ch case   17:*/		return 0x821C9230;
		  /* 821C9230h */ case   18:  		/* mr R6, R21 */
		/* 821C9230h case   18:*/		regs.R6 = regs.R21;
		/* 821C9230h case   18:*/		return 0x821C9234;
		  /* 821C9234h */ case   19:  		/* mr R5, R20 */
		/* 821C9234h case   19:*/		regs.R5 = regs.R20;
		/* 821C9234h case   19:*/		return 0x821C9238;
		  /* 821C9238h */ case   20:  		/* mr R3, R23 */
		/* 821C9238h case   20:*/		regs.R3 = regs.R23;
		/* 821C9238h case   20:*/		return 0x821C923C;
		  /* 821C923Ch */ case   21:  		/* addi R4, R11, 32 */
		/* 821C923Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x20);
		/* 821C923Ch case   21:*/		return 0x821C9240;
		  /* 821C9240h */ case   22:  		/* bl -39168 */
		/* 821C9240h case   22:*/		regs.LR = 0x821C9244; return 0x821BF940;
		/* 821C9240h case   22:*/		return 0x821C9244;
		  /* 821C9244h */ case   23:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C9244h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C9244h case   23:*/		return 0x821C9248;
		  /* 821C9248h */ case   24:  		/* lwz R31, <#[R11 + 4]> */
		/* 821C9248h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821C9248h case   24:*/		return 0x821C924C;
		  /* 821C924Ch */ case   25:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C924Ch case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C924Ch case   25:*/		return 0x821C9250;
		  /* 821C9250h */ case   26:  		/* bc 4, CR0_EQ, 12 */
		/* 821C9250h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821C925C;  }
		/* 821C9250h case   26:*/		return 0x821C9254;
		  /* 821C9254h */ case   27:  		/* cmplwi CR6, R31, 0 */
		/* 821C9254h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C9254h case   27:*/		return 0x821C9258;
		  /* 821C9258h */ case   28:  		/* bc 4, CR6_EQ, -92 */
		/* 821C9258h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821C91FC;  }
		/* 821C9258h case   28:*/		return 0x821C925C;
	}
	return 0x821C925C;
} // Block from 821C91E8h-821C925Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821C925Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C925C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C925C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C925C);
		  /* 821C925Ch */ case    0:  		/* lwz R31, <#[R18 + 4]> */
		/* 821C925Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R18 + 0x00000004) );
		/* 821C925Ch case    0:*/		return 0x821C9260;
		  /* 821C9260h */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C9260h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C9260h case    1:*/		return 0x821C9264;
		  /* 821C9264h */ case    2:  		/* bc 4, CR0_EQ, 772 */
		/* 821C9264h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C9568;  }
		/* 821C9264h case    2:*/		return 0x821C9268;
		  /* 821C9268h */ case    3:  		/* cmplwi CR0, R31, 0 */
		/* 821C9268h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C9268h case    3:*/		return 0x821C926C;
		  /* 821C926Ch */ case    4:  		/* bc 12, CR0_EQ, 764 */
		/* 821C926Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821C9568;  }
		/* 821C926Ch case    4:*/		return 0x821C9270;
		  /* 821C9270h */ case    5:  		/* lwz R26, <#[R31 + 80]> */
		/* 821C9270h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000050) );
		/* 821C9270h case    5:*/		return 0x821C9274;
		  /* 821C9274h */ case    6:  		/* li R28, 0 */
		/* 821C9274h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821C9274h case    6:*/		return 0x821C9278;
		  /* 821C9278h */ case    7:  		/* addi R25, R31, 92 */
		/* 821C9278h case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x5C);
		/* 821C9278h case    7:*/		return 0x821C927C;
		  /* 821C927Ch */ case    8:  		/* subf R24, R31, R26 */
		/* 821C927Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R31,regs.R26);
		/* 821C927Ch case    8:*/		return 0x821C9280;
		  /* 821C9280h */ case    9:  		/* lwzx R29, <#[R24 + R25]> */
		/* 821C9280h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + regs.R25 + 0x00000000) );
		/* 821C9280h case    9:*/		return 0x821C9284;
		  /* 821C9284h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 821C9284h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C9284h case   10:*/		return 0x821C9288;
		  /* 821C9288h */ case   11:  		/* bc 12, CR6_EQ, 188 */
		/* 821C9288h case   11:*/		if ( regs.CR[6].eq ) { return 0x821C9344;  }
		/* 821C9288h case   11:*/		return 0x821C928C;
		  /* 821C928Ch */ case   12:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821C928Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821C928Ch case   12:*/		return 0x821C9290;
		  /* 821C9290h */ case   13:  		/* bc 12, CR0_EQ, 52 */
		/* 821C9290h case   13:*/		if ( regs.CR[0].eq ) { return 0x821C92C4;  }
		/* 821C9290h case   13:*/		return 0x821C9294;
		  /* 821C9294h */ case   14:  		/* b 28 */
		/* 821C9294h case   14:*/		return 0x821C92B0;
		/* 821C9294h case   14:*/		return 0x821C9298;
		  /* 821C9298h */ case   15:  		/* mr R4, R28 */
		/* 821C9298h case   15:*/		regs.R4 = regs.R28;
		/* 821C9298h case   15:*/		return 0x821C929C;
		  /* 821C929Ch */ case   16:  		/* mr R3, R29 */
		/* 821C929Ch case   16:*/		regs.R3 = regs.R29;
		/* 821C929Ch case   16:*/		return 0x821C92A0;
		  /* 821C92A0h */ case   17:  		/* bl -331656 */
		/* 821C92A0h case   17:*/		regs.LR = 0x821C92A4; return 0x82178318;
		/* 821C92A0h case   17:*/		return 0x821C92A4;
		  /* 821C92A4h */ case   18:  		/* cmplwi CR0, R3, 0 */
		/* 821C92A4h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821C92A4h case   18:*/		return 0x821C92A8;
		  /* 821C92A8h */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821C92A8h case   19:*/		if ( regs.CR[0].eq ) { return 0x821C92C0;  }
		/* 821C92A8h case   19:*/		return 0x821C92AC;
		  /* 821C92ACh */ case   20:  		/* lwz R29, <#[R3 + 12]> */
		/* 821C92ACh case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C92ACh case   20:*/		return 0x821C92B0;
	}
	return 0x821C92B0;
} // Block from 821C925Ch-821C92B0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C92B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C92B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C92B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C92B0);
		  /* 821C92B0h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 821C92B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C92B0h case    0:*/		return 0x821C92B4;
		  /* 821C92B4h */ case    1:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821C92B4h case    1:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821C92B4h case    1:*/		return 0x821C92B8;
		  /* 821C92B8h */ case    2:  		/* bc 12, CR0_EQ, -32 */
		/* 821C92B8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C9298;  }
		/* 821C92B8h case    2:*/		return 0x821C92BC;
		  /* 821C92BCh */ case    3:  		/* b 8 */
		/* 821C92BCh case    3:*/		return 0x821C92C4;
		/* 821C92BCh case    3:*/		return 0x821C92C0;
	}
	return 0x821C92C0;
} // Block from 821C92B0h-821C92C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C92C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C92C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C92C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C92C0);
		  /* 821C92C0h */ case    0:  		/* li R29, 0 */
		/* 821C92C0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821C92C0h case    0:*/		return 0x821C92C4;
	}
	return 0x821C92C4;
} // Block from 821C92C0h-821C92C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C92C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C92C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C92C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C92C4);
		  /* 821C92C4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821C92C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C92C4h case    0:*/		return 0x821C92C8;
		  /* 821C92C8h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 821C92C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C9344;  }
		/* 821C92C8h case    1:*/		return 0x821C92CC;
		  /* 821C92CCh */ case    2:  		/* lwz R5, <#[R25]> */
		/* 821C92CCh case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x00000000) );
		/* 821C92CCh case    2:*/		return 0x821C92D0;
		  /* 821C92D0h */ case    3:  		/* lwz R30, <#[R29 + 32]> */
		/* 821C92D0h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000020) );
		/* 821C92D0h case    3:*/		return 0x821C92D4;
		  /* 821C92D4h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 821C92D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821C92D4h case    4:*/		return 0x821C92D8;
		  /* 821C92D8h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821C92D8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C92EC;  }
		/* 821C92D8h case    5:*/		return 0x821C92DC;
		  /* 821C92DCh */ case    6:  		/* mr R6, R23 */
		/* 821C92DCh case    6:*/		regs.R6 = regs.R23;
		/* 821C92DCh case    6:*/		return 0x821C92E0;
		  /* 821C92E0h */ case    7:  		/* mr R4, R28 */
		/* 821C92E0h case    7:*/		regs.R4 = regs.R28;
		/* 821C92E0h case    7:*/		return 0x821C92E4;
		  /* 821C92E4h */ case    8:  		/* mr R3, R30 */
		/* 821C92E4h case    8:*/		regs.R3 = regs.R30;
		/* 821C92E4h case    8:*/		return 0x821C92E8;
		  /* 821C92E8h */ case    9:  		/* bl -330096 */
		/* 821C92E8h case    9:*/		regs.LR = 0x821C92EC; return 0x82178978;
		/* 821C92E8h case    9:*/		return 0x821C92EC;
	}
	return 0x821C92EC;
} // Block from 821C92C4h-821C92ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C92ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C92EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C92EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C92EC);
		  /* 821C92ECh */ case    0:  		/* stw R30, <#[R25]> */
		/* 821C92ECh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 821C92ECh case    0:*/		return 0x821C92F0;
		  /* 821C92F0h */ case    1:  		/* mr R3, R29 */
		/* 821C92F0h case    1:*/		regs.R3 = regs.R29;
		/* 821C92F0h case    1:*/		return 0x821C92F4;
		  /* 821C92F4h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C92F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C92F4h case    2:*/		return 0x821C92F8;
		  /* 821C92F8h */ case    3:  		/* oris R11, R11, 512 */
		/* 821C92F8h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821C92F8h case    3:*/		return 0x821C92FC;
		  /* 821C92FCh */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821C92FCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C92FCh case    4:*/		return 0x821C9300;
		  /* 821C9300h */ case    5:  		/* b 52 */
		/* 821C9300h case    5:*/		return 0x821C9334;
		/* 821C9300h case    5:*/		return 0x821C9304;
		  /* 821C9304h */ case    6:  		/* lwz R27, <#[R3 + 12]> */
		/* 821C9304h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 821C9304h case    6:*/		return 0x821C9308;
		  /* 821C9308h */ case    7:  		/* lwz R11, <#[R27 + 8]> */
		/* 821C9308h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821C9308h case    7:*/		return 0x821C930C;
		  /* 821C930Ch */ case    8:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821C930Ch case    8:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821C930Ch case    8:*/		return 0x821C9310;
		  /* 821C9310h */ case    9:  		/* bc 12, CR0_EQ, 32 */
		/* 821C9310h case    9:*/		if ( regs.CR[0].eq ) { return 0x821C9330;  }
		/* 821C9310h case    9:*/		return 0x821C9314;
		  /* 821C9314h */ case   10:  		/* lwz R29, <#[R27 + 32]> */
		/* 821C9314h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000020) );
		/* 821C9314h case   10:*/		return 0x821C9318;
		  /* 821C9318h */ case   11:  		/* mr R6, R23 */
		/* 821C9318h case   11:*/		regs.R6 = regs.R23;
		/* 821C9318h case   11:*/		return 0x821C931C;
		  /* 821C931Ch */ case   12:  		/* mr R4, R28 */
		/* 821C931Ch case   12:*/		regs.R4 = regs.R28;
		/* 821C931Ch case   12:*/		return 0x821C9320;
		  /* 821C9320h */ case   13:  		/* mr R5, R29 */
		/* 821C9320h case   13:*/		regs.R5 = regs.R29;
		/* 821C9320h case   13:*/		return 0x821C9324;
		  /* 821C9324h */ case   14:  		/* mr R3, R30 */
		/* 821C9324h case   14:*/		regs.R3 = regs.R30;
		/* 821C9324h case   14:*/		return 0x821C9328;
		  /* 821C9328h */ case   15:  		/* bl -330160 */
		/* 821C9328h case   15:*/		regs.LR = 0x821C932C; return 0x82178978;
		/* 821C9328h case   15:*/		return 0x821C932C;
		  /* 821C932Ch */ case   16:  		/* mr R30, R29 */
		/* 821C932Ch case   16:*/		regs.R30 = regs.R29;
		/* 821C932Ch case   16:*/		return 0x821C9330;
	}
	return 0x821C9330;
} // Block from 821C92ECh-821C9330h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821C9330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9330);
		  /* 821C9330h */ case    0:  		/* mr R3, R27 */
		/* 821C9330h case    0:*/		regs.R3 = regs.R27;
		/* 821C9330h case    0:*/		return 0x821C9334;
	}
	return 0x821C9334;
} // Block from 821C9330h-821C9334h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C9334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9334);
		  /* 821C9334h */ case    0:  		/* mr R4, R28 */
		/* 821C9334h case    0:*/		regs.R4 = regs.R28;
		/* 821C9334h case    0:*/		return 0x821C9338;
		  /* 821C9338h */ case    1:  		/* bl -331808 */
		/* 821C9338h case    1:*/		regs.LR = 0x821C933C; return 0x82178318;
		/* 821C9338h case    1:*/		return 0x821C933C;
		  /* 821C933Ch */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 821C933Ch case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821C933Ch case    2:*/		return 0x821C9340;
		  /* 821C9340h */ case    3:  		/* bc 4, CR0_EQ, -60 */
		/* 821C9340h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C9304;  }
		/* 821C9340h case    3:*/		return 0x821C9344;
	}
	return 0x821C9344;
} // Block from 821C9334h-821C9344h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C9344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9344);
		  /* 821C9344h */ case    0:  		/* addi R28, R28, 1 */
		/* 821C9344h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821C9344h case    0:*/		return 0x821C9348;
		  /* 821C9348h */ case    1:  		/* addi R25, R25, 4 */
		/* 821C9348h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821C9348h case    1:*/		return 0x821C934C;
		  /* 821C934Ch */ case    2:  		/* cmpwi CR6, R28, 3 */
		/* 821C934Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000003);
		/* 821C934Ch case    2:*/		return 0x821C9350;
		  /* 821C9350h */ case    3:  		/* bc 4, CR6_GT, -208 */
		/* 821C9350h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821C9280;  }
		/* 821C9350h case    3:*/		return 0x821C9354;
		  /* 821C9354h */ case    4:  		/* lwz R11, <#[R26 + 48]> */
		/* 821C9354h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821C9354h case    4:*/		return 0x821C9358;
		  /* 821C9358h */ case    5:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821C9358h case    5:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821C9358h case    5:*/		return 0x821C935C;
		  /* 821C935Ch */ case    6:  		/* bc 12, CR0_EQ, 124 */
		/* 821C935Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821C93D8;  }
		/* 821C935Ch case    6:*/		return 0x821C9360;
		  /* 821C9360h */ case    7:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821C9360h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821C9360h case    7:*/		return 0x821C9364;
		  /* 821C9364h */ case    8:  		/* bc 12, CR0_EQ, 104 */
		/* 821C9364h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C93CC;  }
		/* 821C9364h case    8:*/		return 0x821C9368;
		  /* 821C9368h */ case    9:  		/* lwz R30, <#[R26 + 8]> */
		/* 821C9368h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000008) );
		/* 821C9368h case    9:*/		return 0x821C936C;
		  /* 821C936Ch */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 821C936Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C936Ch case   10:*/		return 0x821C9370;
		  /* 821C9370h */ case   11:  		/* bc 12, CR6_EQ, 104 */
		/* 821C9370h case   11:*/		if ( regs.CR[6].eq ) { return 0x821C93D8;  }
		/* 821C9370h case   11:*/		return 0x821C9374;
		  /* 821C9374h */ case   12:  		/* lwz R29, <#[R30 + 4]> */
		/* 821C9374h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821C9374h case   12:*/		return 0x821C9378;
		  /* 821C9378h */ case   13:  		/* mr R3, R23 */
		/* 821C9378h case   13:*/		regs.R3 = regs.R23;
		/* 821C9378h case   13:*/		return 0x821C937C;
		  /* 821C937Ch */ case   14:  		/* mr R4, R29 */
		/* 821C937Ch case   14:*/		regs.R4 = regs.R29;
		/* 821C937Ch case   14:*/		return 0x821C9380;
		  /* 821C9380h */ case   15:  		/* bl -330512 */
		/* 821C9380h case   15:*/		regs.LR = 0x821C9384; return 0x82178870;
		/* 821C9380h case   15:*/		return 0x821C9384;
		  /* 821C9384h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 821C9384h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821C9384h case   16:*/		return 0x821C9388;
		  /* 821C9388h */ case   17:  		/* bc 12, CR0_EQ, 52 */
		/* 821C9388h case   17:*/		if ( regs.CR[0].eq ) { return 0x821C93BC;  }
		/* 821C9388h case   17:*/		return 0x821C938C;
		  /* 821C938Ch */ case   18:  		/* lwz R11, <#[R3 + 8]> */
		/* 821C938Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821C938Ch case   18:*/		return 0x821C9390;
		  /* 821C9390h */ case   19:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821C9390h case   19:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9390h case   19:*/		return 0x821C9394;
		  /* 821C9394h */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 821C9394h case   20:*/		if ( regs.CR[0].eq ) { return 0x821C93BC;  }
		/* 821C9394h case   20:*/		return 0x821C9398;
		  /* 821C9398h */ case   21:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C9398h case   21:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C9398h case   21:*/		return 0x821C939C;
		  /* 821C939Ch */ case   22:  		/* cmplwi CR6, R11, 86 */
		/* 821C939Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821C939Ch case   22:*/		return 0x821C93A0;
		  /* 821C93A0h */ case   23:  		/* bc 12, CR6_EQ, 16 */
		/* 821C93A0h case   23:*/		if ( regs.CR[6].eq ) { return 0x821C93B0;  }
		/* 821C93A0h case   23:*/		return 0x821C93A4;
		  /* 821C93A4h */ case   24:  		/* cmplwi CR6, R11, 87 */
		/* 821C93A4h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821C93A4h case   24:*/		return 0x821C93A8;
		  /* 821C93A8h */ case   25:  		/* li R11, 0 */
		/* 821C93A8h case   25:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C93A8h case   25:*/		return 0x821C93AC;
		  /* 821C93ACh */ case   26:  		/* bc 4, CR6_EQ, 8 */
		/* 821C93ACh case   26:*/		if ( !regs.CR[6].eq ) { return 0x821C93B4;  }
		/* 821C93ACh case   26:*/		return 0x821C93B0;
	}
	return 0x821C93B0;
} // Block from 821C9344h-821C93B0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821C93B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93B0);
		  /* 821C93B0h */ case    0:  		/* li R11, 1 */
		/* 821C93B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C93B0h case    0:*/		return 0x821C93B4;
	}
	return 0x821C93B4;
} // Block from 821C93B0h-821C93B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C93B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93B4);
		  /* 821C93B4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C93B4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C93B4h case    0:*/		return 0x821C93B8;
		  /* 821C93B8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821C93B8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C93C4;  }
		/* 821C93B8h case    1:*/		return 0x821C93BC;
	}
	return 0x821C93BC;
} // Block from 821C93B4h-821C93BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C93BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93BC);
		  /* 821C93BCh */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 821C93BCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821C93BCh case    0:*/		return 0x821C93C0;
		  /* 821C93C0h */ case    1:  		/* b -84 */
		/* 821C93C0h case    1:*/		return 0x821C936C;
		/* 821C93C0h case    1:*/		return 0x821C93C4;
	}
	return 0x821C93C4;
} // Block from 821C93BCh-821C93C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C93C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93C4);
		  /* 821C93C4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821C93C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C93C4h case    0:*/		return 0x821C93C8;
		  /* 821C93C8h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821C93C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C93D8;  }
		/* 821C93C8h case    1:*/		return 0x821C93CC;
	}
	return 0x821C93CC;
} // Block from 821C93C4h-821C93CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C93CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93CC);
		  /* 821C93CCh */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C93CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C93CCh case    0:*/		return 0x821C93D0;
		  /* 821C93D0h */ case    1:  		/* oris R11, R11, 32 */
		/* 821C93D0h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821C93D0h case    1:*/		return 0x821C93D4;
		  /* 821C93D4h */ case    2:  		/* stw R11, <#[R31 + 48]> */
		/* 821C93D4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C93D4h case    2:*/		return 0x821C93D8;
	}
	return 0x821C93D8;
} // Block from 821C93CCh-821C93D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C93D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93D8);
		  /* 821C93D8h */ case    0:  		/* lwz R11, <#[R26 + 48]> */
		/* 821C93D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821C93D8h case    0:*/		return 0x821C93DC;
		  /* 821C93DCh */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821C93DCh case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821C93DCh case    1:*/		return 0x821C93E0;
		  /* 821C93E0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821C93E0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C93F0;  }
		/* 821C93E0h case    2:*/		return 0x821C93E4;
		  /* 821C93E4h */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C93E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C93E4h case    3:*/		return 0x821C93E8;
		  /* 821C93E8h */ case    4:  		/* oris R11, R11, 4096 */
		/* 821C93E8h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821C93E8h case    4:*/		return 0x821C93EC;
		  /* 821C93ECh */ case    5:  		/* stw R11, <#[R31 + 48]> */
		/* 821C93ECh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C93ECh case    5:*/		return 0x821C93F0;
	}
	return 0x821C93F0;
} // Block from 821C93D8h-821C93F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C93F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C93F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C93F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C93F0);
		  /* 821C93F0h */ case    0:  		/* lwz R11, <#[R26 + 48]> */
		/* 821C93F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821C93F0h case    0:*/		return 0x821C93F4;
		  /* 821C93F4h */ case    1:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 821C93F4h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 821C93F4h case    1:*/		return 0x821C93F8;
		  /* 821C93F8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821C93F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C9408;  }
		/* 821C93F8h case    2:*/		return 0x821C93FC;
		  /* 821C93FCh */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821C93FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C93FCh case    3:*/		return 0x821C9400;
		  /* 821C9400h */ case    4:  		/* oris R11, R11, 8192 */
		/* 821C9400h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821C9400h case    4:*/		return 0x821C9404;
		  /* 821C9404h */ case    5:  		/* stw R11, <#[R31 + 48]> */
		/* 821C9404h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9404h case    5:*/		return 0x821C9408;
	}
	return 0x821C9408;
} // Block from 821C93F0h-821C9408h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C9408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9408);
		  /* 821C9408h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821C9408h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821C9408h case    0:*/		return 0x821C940C;
		  /* 821C940Ch */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 821C940Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821C9430;  }
		/* 821C940Ch case    1:*/		return 0x821C9410;
		  /* 821C9410h */ case    2:  		/* lwz R11, <#[R26 + 76]> */
		/* 821C9410h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C9410h case    2:*/		return 0x821C9414;
		  /* 821C9414h */ case    3:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821C9414h case    3:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821C9414h case    3:*/		return 0x821C9418;
		  /* 821C9418h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821C9418h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C9430;  }
		/* 821C9418h case    4:*/		return 0x821C941C;
		  /* 821C941Ch */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821C941Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821C941Ch case    5:*/		return 0x821C9420;
		  /* 821C9420h */ case    6:  		/* lwz R10, <#[R31 + 76]> */
		/* 821C9420h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9420h case    6:*/		return 0x821C9424;
		  /* 821C9424h */ case    7:  		/* lwzx R11, <#[R11 + R22]> */
		/* 821C9424h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 821C9424h case    7:*/		return 0x821C9428;
		  /* 821C9428h */ case    8:  		/* rlwimi R11, R10, 0, 0, 12 */
		/* 821C9428h case    8:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R11,regs.R10);
		/* 821C9428h case    8:*/		return 0x821C942C;
		  /* 821C942Ch */ case    9:  		/* stw R11, <#[R31 + 76]> */
		/* 821C942Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C942Ch case    9:*/		return 0x821C9430;
	}
	return 0x821C9430;
} // Block from 821C9408h-821C9430h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821C9430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9430);
		  /* 821C9430h */ case    0:  		/* lwz R10, <#[R26 + 68]> */
		/* 821C9430h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000044) );
		/* 821C9430h case    0:*/		return 0x821C9434;
		  /* 821C9434h */ case    1:  		/* lwz R11, <#[R31 + 68]> */
		/* 821C9434h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821C9434h case    1:*/		return 0x821C9438;
		  /* 821C9438h */ case    2:  		/* rlwimi R11, R10, 0, 4, 31 */
		/* 821C9438h case    2:*/		cpu::op::rlwimi<0,0,4,31>(regs,&regs.R11,regs.R10);
		/* 821C9438h case    2:*/		return 0x821C943C;
		  /* 821C943Ch */ case    3:  		/* stw R11, <#[R31 + 68]> */
		/* 821C943Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821C943Ch case    3:*/		return 0x821C9440;
		  /* 821C9440h */ case    4:  		/* lwz R11, <#[R26 + 48]> */
		/* 821C9440h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821C9440h case    4:*/		return 0x821C9444;
		  /* 821C9444h */ case    5:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821C9444h case    5:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9444h case    5:*/		return 0x821C9448;
		  /* 821C9448h */ case    6:  		/* bc 12, CR0_EQ, 168 */
		/* 821C9448h case    6:*/		if ( regs.CR[0].eq ) { return 0x821C94F0;  }
		/* 821C9448h case    6:*/		return 0x821C944C;
		  /* 821C944Ch */ case    7:  		/* lwz R10, <#[R31 + 48]> */
		/* 821C944Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821C944Ch case    7:*/		return 0x821C9450;
		  /* 821C9450h */ case    8:  		/* lwz R9, <#[R31 + 76]> */
		/* 821C9450h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9450h case    8:*/		return 0x821C9454;
		  /* 821C9454h */ case    9:  		/* rlwimi R10, R11, 0, 8, 8 */
		/* 821C9454h case    9:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R11);
		/* 821C9454h case    9:*/		return 0x821C9458;
		  /* 821C9458h */ case   10:  		/* stw R10, <#[R31 + 48]> */
		/* 821C9458h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9458h case   10:*/		return 0x821C945C;
		  /* 821C945Ch */ case   11:  		/* lwz R11, <#[R26 + 76]> */
		/* 821C945Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C945Ch case   11:*/		return 0x821C9460;
		  /* 821C9460h */ case   12:  		/* rlwimi R11, R9, 0, 10, 8 */
		/* 821C9460h case   12:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R11,regs.R9);
		/* 821C9460h case   12:*/		return 0x821C9464;
		  /* 821C9464h */ case   13:  		/* stw R11, <#[R31 + 76]> */
		/* 821C9464h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9464h case   13:*/		return 0x821C9468;
		  /* 821C9468h */ case   14:  		/* lwz R11, <#[R26 + 76]> */
		/* 821C9468h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C9468h case   14:*/		return 0x821C946C;
		  /* 821C946Ch */ case   15:  		/* lwz R10, <#[R31 + 76]> */
		/* 821C946Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C946Ch case   15:*/		return 0x821C9470;
		  /* 821C9470h */ case   16:  		/* rlwimi R11, R10, 0, 9, 7 */
		/* 821C9470h case   16:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R11,regs.R10);
		/* 821C9470h case   16:*/		return 0x821C9474;
		  /* 821C9474h */ case   17:  		/* stw R11, <#[R31 + 76]> */
		/* 821C9474h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9474h case   17:*/		return 0x821C9478;
		  /* 821C9478h */ case   18:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821C9478h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821C9478h case   18:*/		return 0x821C947C;
		  /* 821C947Ch */ case   19:  		/* lwz R10, <#[R26 + 112]> */
		/* 821C947Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000070) );
		/* 821C947Ch case   19:*/		return 0x821C9480;
		  /* 821C9480h */ case   20:  		/* stw R10, <#[R31 + 112]> */
		/* 821C9480h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000070) );
		/* 821C9480h case   20:*/		return 0x821C9484;
		  /* 821C9484h */ case   21:  		/* lwz R10, <#[R26 + 76]> */
		/* 821C9484h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C9484h case   21:*/		return 0x821C9488;
		  /* 821C9488h */ case   22:  		/* rlwimi R10, R11, 0, 8, 6 */
		/* 821C9488h case   22:*/		cpu::op::rlwimi<0,0,8,6>(regs,&regs.R10,regs.R11);
		/* 821C9488h case   22:*/		return 0x821C948C;
		  /* 821C948Ch */ case   23:  		/* stw R10, <#[R31 + 76]> */
		/* 821C948Ch case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C948Ch case   23:*/		return 0x821C9490;
		  /* 821C9490h */ case   24:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821C9490h case   24:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821C9490h case   24:*/		return 0x821C9494;
		  /* 821C9494h */ case   25:  		/* lwz R11, <#[R26 + 76]> */
		/* 821C9494h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C9494h case   25:*/		return 0x821C9498;
		  /* 821C9498h */ case   26:  		/* rlwimi R11, R10, 0, 7, 5 */
		/* 821C9498h case   26:*/		cpu::op::rlwimi<0,0,7,5>(regs,&regs.R11,regs.R10);
		/* 821C9498h case   26:*/		return 0x821C949C;
		  /* 821C949Ch */ case   27:  		/* stw R11, <#[R31 + 76]> */
		/* 821C949Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C949Ch case   27:*/		return 0x821C94A0;
		  /* 821C94A0h */ case   28:  		/* lwz R11, <#[R26 + 108]> */
		/* 821C94A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 821C94A0h case   28:*/		return 0x821C94A4;
		  /* 821C94A4h */ case   29:  		/* stw R11, <#[R31 + 108]> */
		/* 821C94A4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 821C94A4h case   29:*/		return 0x821C94A8;
		  /* 821C94A8h */ case   30:  		/* lwz R11, <#[R26 + 72]> */
		/* 821C94A8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000048) );
		/* 821C94A8h case   30:*/		return 0x821C94AC;
		  /* 821C94ACh */ case   31:  		/* stw R11, <#[R31 + 72]> */
		/* 821C94ACh case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 821C94ACh case   31:*/		return 0x821C94B0;
		  /* 821C94B0h */ case   32:  		/* lwz R11, <#[R26 + 112]> */
		/* 821C94B0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000070) );
		/* 821C94B0h case   32:*/		return 0x821C94B4;
		  /* 821C94B4h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821C94B4h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C94B4h case   33:*/		return 0x821C94B8;
		  /* 821C94B8h */ case   34:  		/* bc 12, CR6_EQ, 24 */
		/* 821C94B8h case   34:*/		if ( regs.CR[6].eq ) { return 0x821C94D0;  }
		/* 821C94B8h case   34:*/		return 0x821C94BC;
		  /* 821C94BCh */ case   35:  		/* lwz R10, <#[R11 + 44]> */
		/* 821C94BCh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821C94BCh case   35:*/		return 0x821C94C0;
		  /* 821C94C0h */ case   36:  		/* cmplw CR6, R10, R20 */
		/* 821C94C0h case   36:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 821C94C0h case   36:*/		return 0x821C94C4;
		  /* 821C94C4h */ case   37:  		/* bc 4, CR6_EQ, 12 */
		/* 821C94C4h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821C94D0;  }
		/* 821C94C4h case   37:*/		return 0x821C94C8;
		  /* 821C94C8h */ case   38:  		/* lwz R11, <#[R11 + 80]> */
		/* 821C94C8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821C94C8h case   38:*/		return 0x821C94CC;
		  /* 821C94CCh */ case   39:  		/* stw R11, <#[R31 + 112]> */
		/* 821C94CCh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821C94CCh case   39:*/		return 0x821C94D0;
	}
	return 0x821C94D0;
} // Block from 821C9430h-821C94D0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821C94D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C94D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C94D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C94D0);
		  /* 821C94D0h */ case    0:  		/* lwz R11, <#[R26 + 108]> */
		/* 821C94D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000006C) );
		/* 821C94D0h case    0:*/		return 0x821C94D4;
		  /* 821C94D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821C94D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C94D4h case    1:*/		return 0x821C94D8;
		  /* 821C94D8h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821C94D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C94F0;  }
		/* 821C94D8h case    2:*/		return 0x821C94DC;
		  /* 821C94DCh */ case    3:  		/* lwz R10, <#[R11 + 44]> */
		/* 821C94DCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821C94DCh case    3:*/		return 0x821C94E0;
		  /* 821C94E0h */ case    4:  		/* cmplw CR6, R10, R20 */
		/* 821C94E0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 821C94E0h case    4:*/		return 0x821C94E4;
		  /* 821C94E4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821C94E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C94F0;  }
		/* 821C94E4h case    5:*/		return 0x821C94E8;
		  /* 821C94E8h */ case    6:  		/* lwz R11, <#[R11 + 80]> */
		/* 821C94E8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821C94E8h case    6:*/		return 0x821C94EC;
		  /* 821C94ECh */ case    7:  		/* stw R11, <#[R31 + 108]> */
		/* 821C94ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 821C94ECh case    7:*/		return 0x821C94F0;
	}
	return 0x821C94F0;
} // Block from 821C94D0h-821C94F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C94F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C94F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C94F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C94F0);
		  /* 821C94F0h */ case    0:  		/* lwz R11, <#[R26 + 48]> */
		/* 821C94F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821C94F0h case    0:*/		return 0x821C94F4;
		  /* 821C94F4h */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821C94F4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821C94F4h case    1:*/		return 0x821C94F8;
		  /* 821C94F8h */ case    2:  		/* lwz R9, <#[R31 + 48]> */
		/* 821C94F8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821C94F8h case    2:*/		return 0x821C94FC;
		  /* 821C94FCh */ case    3:  		/* lwz R8, <#[R31 + 68]> */
		/* 821C94FCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000044) );
		/* 821C94FCh case    3:*/		return 0x821C9500;
		  /* 821C9500h */ case    4:  		/* rlwimi R9, R11, 0, 4, 4 */
		/* 821C9500h case    4:*/		cpu::op::rlwimi<0,0,4,4>(regs,&regs.R9,regs.R11);
		/* 821C9500h case    4:*/		return 0x821C9504;
		  /* 821C9504h */ case    5:  		/* lwz R11, <#[R31 + 76]> */
		/* 821C9504h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9504h case    5:*/		return 0x821C9508;
		  /* 821C9508h */ case    6:  		/* stw R9, <#[R31 + 48]> */
		/* 821C9508h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9508h case    6:*/		return 0x821C950C;
		  /* 821C950Ch */ case    7:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 821C950Ch case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 821C950Ch case    7:*/		return 0x821C9510;
		  /* 821C9510h */ case    8:  		/* lwz R7, <#[R26 + 48]> */
		/* 821C9510h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R26 + 0x00000030) );
		/* 821C9510h case    8:*/		return 0x821C9514;
		  /* 821C9514h */ case    9:  		/* rlwimi R9, R7, 0, 6, 6 */
		/* 821C9514h case    9:*/		cpu::op::rlwimi<0,0,6,6>(regs,&regs.R9,regs.R7);
		/* 821C9514h case    9:*/		return 0x821C9518;
		  /* 821C9518h */ case   10:  		/* stw R9, <#[R31 + 48]> */
		/* 821C9518h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9518h case   10:*/		return 0x821C951C;
		  /* 821C951Ch */ case   11:  		/* lwz R9, <#[R26 + 48]> */
		/* 821C951Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000030) );
		/* 821C951Ch case   11:*/		return 0x821C9520;
		  /* 821C9520h */ case   12:  		/* lwz R7, <#[R31 + 48]> */
		/* 821C9520h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9520h case   12:*/		return 0x821C9524;
		  /* 821C9524h */ case   13:  		/* rlwimi R7, R9, 0, 7, 7 */
		/* 821C9524h case   13:*/		cpu::op::rlwimi<0,0,7,7>(regs,&regs.R7,regs.R9);
		/* 821C9524h case   13:*/		return 0x821C9528;
		  /* 821C9528h */ case   14:  		/* stw R7, <#[R31 + 48]> */
		/* 821C9528h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821C9528h case   14:*/		return 0x821C952C;
		  /* 821C952Ch */ case   15:  		/* lwz R9, <#[R26 + 68]> */
		/* 821C952Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000044) );
		/* 821C952Ch case   15:*/		return 0x821C9530;
		  /* 821C9530h */ case   16:  		/* rlwimi R9, R8, 0, 1, 31 */
		/* 821C9530h case   16:*/		cpu::op::rlwimi<0,0,1,31>(regs,&regs.R9,regs.R8);
		/* 821C9530h case   16:*/		return 0x821C9534;
		  /* 821C9534h */ case   17:  		/* stw R9, <#[R31 + 68]> */
		/* 821C9534h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000044) );
		/* 821C9534h case   17:*/		return 0x821C9538;
		  /* 821C9538h */ case   18:  		/* lwz R9, <#[R26 + 68]> */
		/* 821C9538h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000044) );
		/* 821C9538h case   18:*/		return 0x821C953C;
		  /* 821C953Ch */ case   19:  		/* lwz R8, <#[R31 + 68]> */
		/* 821C953Ch case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000044) );
		/* 821C953Ch case   19:*/		return 0x821C9540;
		  /* 821C9540h */ case   20:  		/* rlwimi R8, R9, 0, 1, 1 */
		/* 821C9540h case   20:*/		cpu::op::rlwimi<0,0,1,1>(regs,&regs.R8,regs.R9);
		/* 821C9540h case   20:*/		return 0x821C9544;
		  /* 821C9544h */ case   21:  		/* stw R8, <#[R31 + 68]> */
		/* 821C9544h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000044) );
		/* 821C9544h case   21:*/		return 0x821C9548;
		  /* 821C9548h */ case   22:  		/* lwz R9, <#[R26 + 76]> */
		/* 821C9548h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000004C) );
		/* 821C9548h case   22:*/		return 0x821C954C;
		  /* 821C954Ch */ case   23:  		/* rlwimi R9, R11, 0, 4, 2 */
		/* 821C954Ch case   23:*/		cpu::op::rlwimi<0,0,4,2>(regs,&regs.R9,regs.R11);
		/* 821C954Ch case   23:*/		return 0x821C9550;
		  /* 821C9550h */ case   24:  		/* stw R9, <#[R31 + 76]> */
		/* 821C9550h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 821C9550h case   24:*/		return 0x821C9554;
		  /* 821C9554h */ case   25:  		/* lwz R31, <#[R10 + 4]> */
		/* 821C9554h case   25:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821C9554h case   25:*/		return 0x821C9558;
		  /* 821C9558h */ case   26:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C9558h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C9558h case   26:*/		return 0x821C955C;
		  /* 821C955Ch */ case   27:  		/* bc 4, CR0_EQ, 12 */
		/* 821C955Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x821C9568;  }
		/* 821C955Ch case   27:*/		return 0x821C9560;
		  /* 821C9560h */ case   28:  		/* cmplwi CR6, R31, 0 */
		/* 821C9560h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C9560h case   28:*/		return 0x821C9564;
		  /* 821C9564h */ case   29:  		/* bc 4, CR6_EQ, -756 */
		/* 821C9564h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821C9270;  }
		/* 821C9564h case   29:*/		return 0x821C9568;
	}
	return 0x821C9568;
} // Block from 821C94F0h-821C9568h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821C9568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9568);
		  /* 821C9568h */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 821C9568h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 821C9568h case    0:*/		return 0x821C956C;
		  /* 821C956Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C956Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C956Ch case    1:*/		return 0x821C9570;
		  /* 821C9570h */ case    2:  		/* bc 4, CR0_EQ, 404 */
		/* 821C9570h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C9704;  }
		/* 821C9570h case    2:*/		return 0x821C9574;
		  /* 821C9574h */ case    3:  		/* mr R27, R11 */
		/* 821C9574h case    3:*/		regs.R27 = regs.R11;
		/* 821C9574h case    3:*/		return 0x821C9578;
		  /* 821C9578h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821C9578h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C9578h case    4:*/		return 0x821C957C;
		  /* 821C957Ch */ case    5:  		/* bc 12, CR0_EQ, 392 */
		/* 821C957Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821C9704;  }
		/* 821C957Ch case    5:*/		return 0x821C9580;
		  /* 821C9580h */ case    6:  		/* lwz R28, <#[R27 + 80]> */
		/* 821C9580h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000050) );
		/* 821C9580h case    6:*/		return 0x821C9584;
		  /* 821C9584h */ case    7:  		/* lwz R29, <#[R28 + 8]> */
		/* 821C9584h case    7:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000008) );
		/* 821C9584h case    7:*/		return 0x821C9588;
		  /* 821C9588h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 821C9588h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C9588h case    8:*/		return 0x821C958C;
		  /* 821C958Ch */ case    9:  		/* bc 12, CR6_EQ, 136 */
		/* 821C958Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821C9614;  }
		/* 821C958Ch case    9:*/		return 0x821C9590;
		  /* 821C9590h */ case   10:  		/* lwz R30, <#[R29 + 4]> */
		/* 821C9590h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821C9590h case   10:*/		return 0x821C9594;
		  /* 821C9594h */ case   11:  		/* lwz R11, <#[R30 + 44]> */
		/* 821C9594h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C9594h case   11:*/		return 0x821C9598;
		  /* 821C9598h */ case   12:  		/* cmplw CR6, R11, R20 */
		/* 821C9598h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 821C9598h case   12:*/		return 0x821C959C;
		  /* 821C959Ch */ case   13:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821C959Ch case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821C959Ch case   13:*/		return 0x821C95A0;
		  /* 821C95A0h */ case   14:  		/* bc 4, CR6_EQ, 88 */
		/* 821C95A0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821C95F8;  }
		/* 821C95A0h case   14:*/		return 0x821C95A4;
		  /* 821C95A4h */ case   15:  		/* bc 12, CR0_EQ, 76 */
		/* 821C95A4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821C95F0;  }
		/* 821C95A4h case   15:*/		return 0x821C95A8;
		  /* 821C95A8h */ case   16:  		/* mr R4, R30 */
		/* 821C95A8h case   16:*/		regs.R4 = regs.R30;
		/* 821C95A8h case   16:*/		return 0x821C95AC;
		  /* 821C95ACh */ case   17:  		/* mr R3, R23 */
		/* 821C95ACh case   17:*/		regs.R3 = regs.R23;
		/* 821C95ACh case   17:*/		return 0x821C95B0;
		  /* 821C95B0h */ case   18:  		/* bl -331072 */
		/* 821C95B0h case   18:*/		regs.LR = 0x821C95B4; return 0x82178870;
		/* 821C95B0h case   18:*/		return 0x821C95B4;
		  /* 821C95B4h */ case   19:  		/* or. R31, R3, R3 */
		/* 821C95B4h case   19:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821C95B4h case   19:*/		return 0x821C95B8;
		  /* 821C95B8h */ case   20:  		/* bc 12, CR0_EQ, 56 */
		/* 821C95B8h case   20:*/		if ( regs.CR[0].eq ) { return 0x821C95F0;  }
		/* 821C95B8h case   20:*/		return 0x821C95BC;
		  /* 821C95BCh */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C95BCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C95BCh case   21:*/		return 0x821C95C0;
		  /* 821C95C0h */ case   22:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821C95C0h case   22:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821C95C0h case   22:*/		return 0x821C95C4;
		  /* 821C95C4h */ case   23:  		/* bc 4, CR0_EQ, 44 */
		/* 821C95C4h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821C95F0;  }
		/* 821C95C4h case   23:*/		return 0x821C95C8;
		  /* 821C95C8h */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C95C8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C95C8h case   24:*/		return 0x821C95CC;
		  /* 821C95CCh */ case   25:  		/* mr R3, R23 */
		/* 821C95CCh case   25:*/		regs.R3 = regs.R23;
		/* 821C95CCh case   25:*/		return 0x821C95D0;
		  /* 821C95D0h */ case   26:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C95D0h case   26:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C95D0h case   26:*/		return 0x821C95D4;
		  /* 821C95D4h */ case   27:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C95D4h case   27:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C95D4h case   27:*/		return 0x821C95D8;
		  /* 821C95D8h */ case   28:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C95D8h case   28:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C95D8h case   28:*/		return 0x821C95DC;
		  /* 821C95DCh */ case   29:  		/* bl -414124 */
		/* 821C95DCh case   29:*/		regs.LR = 0x821C95E0; return 0x82164430;
		/* 821C95DCh case   29:*/		return 0x821C95E0;
		  /* 821C95E0h */ case   30:  		/* addi R11, R31, -16 */
		/* 821C95E0h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821C95E0h case   30:*/		return 0x821C95E4;
		  /* 821C95E4h */ case   31:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C95E4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C95E4h case   31:*/		return 0x821C95E8;
		  /* 821C95E8h */ case   32:  		/* cmplw CR6, R28, R11 */
		/* 821C95E8h case   32:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821C95E8h case   32:*/		return 0x821C95EC;
		  /* 821C95ECh */ case   33:  		/* bc 12, CR6_EQ, 32 */
		/* 821C95ECh case   33:*/		if ( regs.CR[6].eq ) { return 0x821C960C;  }
		/* 821C95ECh case   33:*/		return 0x821C95F0;
	}
	return 0x821C95F0;
} // Block from 821C9568h-821C95F0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821C95F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C95F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C95F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C95F0);
		  /* 821C95F0h */ case    0:  		/* lwz R30, <#[R30 + 80]> */
		/* 821C95F0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000050) );
		/* 821C95F0h case    0:*/		return 0x821C95F4;
		  /* 821C95F4h */ case    1:  		/* b 8 */
		/* 821C95F4h case    1:*/		return 0x821C95FC;
		/* 821C95F4h case    1:*/		return 0x821C95F8;
	}
	return 0x821C95F8;
} // Block from 821C95F0h-821C95F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C95F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C95F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C95F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C95F8);
		  /* 821C95F8h */ case    0:  		/* bc 4, CR0_EQ, 20 */
		/* 821C95F8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821C960C;  }
		/* 821C95F8h case    0:*/		return 0x821C95FC;
	}
	return 0x821C95FC;
} // Block from 821C95F8h-821C95FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C95FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C95FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C95FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C95FC);
		  /* 821C95FCh */ case    0:  		/* mr R5, R23 */
		/* 821C95FCh case    0:*/		regs.R5 = regs.R23;
		/* 821C95FCh case    0:*/		return 0x821C9600;
		  /* 821C9600h */ case    1:  		/* mr R4, R30 */
		/* 821C9600h case    1:*/		regs.R4 = regs.R30;
		/* 821C9600h case    1:*/		return 0x821C9604;
		  /* 821C9604h */ case    2:  		/* mr R3, R27 */
		/* 821C9604h case    2:*/		regs.R3 = regs.R27;
		/* 821C9604h case    2:*/		return 0x821C9608;
		  /* 821C9608h */ case    3:  		/* bl 418920 */
		/* 821C9608h case    3:*/		regs.LR = 0x821C960C; return 0x8222FA70;
		/* 821C9608h case    3:*/		return 0x821C960C;
	}
	return 0x821C960C;
} // Block from 821C95FCh-821C960Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C960Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C960C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C960C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C960C);
		  /* 821C960Ch */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 821C960Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821C960Ch case    0:*/		return 0x821C9610;
		  /* 821C9610h */ case    1:  		/* b -136 */
		/* 821C9610h case    1:*/		return 0x821C9588;
		/* 821C9610h case    1:*/		return 0x821C9614;
	}
	return 0x821C9614;
} // Block from 821C960Ch-821C9614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9614);
		  /* 821C9614h */ case    0:  		/* lwz R31, <#[R28 + 12]> */
		/* 821C9614h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000000C) );
		/* 821C9614h case    0:*/		return 0x821C9618;
		  /* 821C9618h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821C9618h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C9618h case    1:*/		return 0x821C961C;
		  /* 821C961Ch */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821C961Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821C964C;  }
		/* 821C961Ch case    2:*/		return 0x821C9620;
		  /* 821C9620h */ case    3:  		/* lwz R4, <#[R31]> */
		/* 821C9620h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821C9620h case    3:*/		return 0x821C9624;
		  /* 821C9624h */ case    4:  		/* lwz R11, <#[R4 + 44]> */
		/* 821C9624h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 821C9624h case    4:*/		return 0x821C9628;
		  /* 821C9628h */ case    5:  		/* cmplw CR6, R11, R20 */
		/* 821C9628h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 821C9628h case    5:*/		return 0x821C962C;
		  /* 821C962Ch */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 821C962Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821C9644;  }
		/* 821C962Ch case    6:*/		return 0x821C9630;
		  /* 821C9630h */ case    7:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821C9630h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821C9630h case    7:*/		return 0x821C9634;
		  /* 821C9634h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821C9634h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C9644;  }
		/* 821C9634h case    8:*/		return 0x821C9638;
		  /* 821C9638h */ case    9:  		/* mr R5, R23 */
		/* 821C9638h case    9:*/		regs.R5 = regs.R23;
		/* 821C9638h case    9:*/		return 0x821C963C;
		  /* 821C963Ch */ case   10:  		/* mr R3, R27 */
		/* 821C963Ch case   10:*/		regs.R3 = regs.R27;
		/* 821C963Ch case   10:*/		return 0x821C9640;
		  /* 821C9640h */ case   11:  		/* bl 418976 */
		/* 821C9640h case   11:*/		regs.LR = 0x821C9644; return 0x8222FAE0;
		/* 821C9640h case   11:*/		return 0x821C9644;
	}
	return 0x821C9644;
} // Block from 821C9614h-821C9644h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C9644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9644);
		  /* 821C9644h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821C9644h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821C9644h case    0:*/		return 0x821C9648;
		  /* 821C9648h */ case    1:  		/* b -48 */
		/* 821C9648h case    1:*/		return 0x821C9618;
		/* 821C9648h case    1:*/		return 0x821C964C;
	}
	return 0x821C964C;
} // Block from 821C9644h-821C964Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C964Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C964C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C964C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C964C);
		  /* 821C964Ch */ case    0:  		/* mr R4, R27 */
		/* 821C964Ch case    0:*/		regs.R4 = regs.R27;
		/* 821C964Ch case    0:*/		return 0x821C9650;
		  /* 821C9650h */ case    1:  		/* mr R3, R23 */
		/* 821C9650h case    1:*/		regs.R3 = regs.R23;
		/* 821C9650h case    1:*/		return 0x821C9654;
		  /* 821C9654h */ case    2:  		/* bl -331236 */
		/* 821C9654h case    2:*/		regs.LR = 0x821C9658; return 0x82178870;
		/* 821C9654h case    2:*/		return 0x821C9658;
		  /* 821C9658h */ case    3:  		/* or. R31, R3, R3 */
		/* 821C9658h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821C9658h case    3:*/		return 0x821C965C;
		  /* 821C965Ch */ case    4:  		/* bc 12, CR0_EQ, 140 */
		/* 821C965Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821C96E8;  }
		/* 821C965Ch case    4:*/		return 0x821C9660;
		  /* 821C9660h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C9660h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C9660h case    5:*/		return 0x821C9664;
		  /* 821C9664h */ case    6:  		/* mr R3, R23 */
		/* 821C9664h case    6:*/		regs.R3 = regs.R23;
		/* 821C9664h case    6:*/		return 0x821C9668;
		  /* 821C9668h */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821C9668h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821C9668h case    7:*/		return 0x821C966C;
		  /* 821C966Ch */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821C966Ch case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821C966Ch case    8:*/		return 0x821C9670;
		  /* 821C9670h */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821C9670h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821C9670h case    9:*/		return 0x821C9674;
		  /* 821C9674h */ case   10:  		/* bl -414276 */
		/* 821C9674h case   10:*/		regs.LR = 0x821C9678; return 0x82164430;
		/* 821C9674h case   10:*/		return 0x821C9678;
		  /* 821C9678h */ case   11:  		/* addi R11, R31, -16 */
		/* 821C9678h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821C9678h case   11:*/		return 0x821C967C;
		  /* 821C967Ch */ case   12:  		/* add R11, R3, R11 */
		/* 821C967Ch case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821C967Ch case   12:*/		return 0x821C9680;
		  /* 821C9680h */ case   13:  		/* lwz R4, <#[R11]> */
		/* 821C9680h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9680h case   13:*/		return 0x821C9684;
		  /* 821C9684h */ case   14:  		/* lwz R10, <#[R4 + 44]> */
		/* 821C9684h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000002C) );
		/* 821C9684h case   14:*/		return 0x821C9688;
		  /* 821C9688h */ case   15:  		/* cmplw CR6, R10, R20 */
		/* 821C9688h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 821C9688h case   15:*/		return 0x821C968C;
		  /* 821C968Ch */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 821C968Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C969C;  }
		/* 821C968Ch case   16:*/		return 0x821C9690;
		  /* 821C9690h */ case   17:  		/* lwz R10, <#[R4 + 80]> */
		/* 821C9690h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000050) );
		/* 821C9690h case   17:*/		return 0x821C9694;
		  /* 821C9694h */ case   18:  		/* stw R10, <#[R11]> */
		/* 821C9694h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9694h case   18:*/		return 0x821C9698;
		  /* 821C9698h */ case   19:  		/* b 80 */
		/* 821C9698h case   19:*/		return 0x821C96E8;
		/* 821C9698h case   19:*/		return 0x821C969C;
	}
	return 0x821C969C;
} // Block from 821C964Ch-821C969Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C969Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C969C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C969C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C969C);
		  /* 821C969Ch */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 821C969Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C969Ch case    0:*/		return 0x821C96A0;
		  /* 821C96A0h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821C96A0h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821C96A0h case    1:*/		return 0x821C96A4;
		  /* 821C96A4h */ case    2:  		/* bc 4, CR0_EQ, 68 */
		/* 821C96A4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C96E8;  }
		/* 821C96A4h case    2:*/		return 0x821C96A8;
		  /* 821C96A8h */ case    3:  		/* lwz R11, <#[R27 + 12]> */
		/* 821C96A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821C96A8h case    3:*/		return 0x821C96AC;
		  /* 821C96ACh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C96ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C96ACh case    4:*/		return 0x821C96B0;
		  /* 821C96B0h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821C96B0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C96D0;  }
		/* 821C96B0h case    5:*/		return 0x821C96B4;
		  /* 821C96B4h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821C96B4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821C96B4h case    6:*/		return 0x821C96B8;
		  /* 821C96B8h */ case    7:  		/* cmplw CR6, R4, R10 */
		/* 821C96B8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R10);
		/* 821C96B8h case    7:*/		return 0x821C96BC;
		  /* 821C96BCh */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 821C96BCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821C96C8;  }
		/* 821C96BCh case    8:*/		return 0x821C96C0;
		  /* 821C96C0h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C96C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C96C0h case    9:*/		return 0x821C96C4;
		  /* 821C96C4h */ case   10:  		/* b -24 */
		/* 821C96C4h case   10:*/		return 0x821C96AC;
		/* 821C96C4h case   10:*/		return 0x821C96C8;
	}
	return 0x821C96C8;
} // Block from 821C969Ch-821C96C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C96C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C96C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C96C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C96C8);
		  /* 821C96C8h */ case    0:  		/* li R11, 1 */
		/* 821C96C8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C96C8h case    0:*/		return 0x821C96CC;
		  /* 821C96CCh */ case    1:  		/* b 8 */
		/* 821C96CCh case    1:*/		return 0x821C96D4;
		/* 821C96CCh case    1:*/		return 0x821C96D0;
	}
	return 0x821C96D0;
} // Block from 821C96C8h-821C96D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C96D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C96D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C96D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C96D0);
		  /* 821C96D0h */ case    0:  		/* li R11, 0 */
		/* 821C96D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C96D0h case    0:*/		return 0x821C96D4;
	}
	return 0x821C96D4;
} // Block from 821C96D0h-821C96D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C96D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C96D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C96D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C96D4);
		  /* 821C96D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C96D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C96D4h case    0:*/		return 0x821C96D8;
		  /* 821C96D8h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821C96D8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C96E8;  }
		/* 821C96D8h case    1:*/		return 0x821C96DC;
		  /* 821C96DCh */ case    2:  		/* mr R5, R23 */
		/* 821C96DCh case    2:*/		regs.R5 = regs.R23;
		/* 821C96DCh case    2:*/		return 0x821C96E0;
		  /* 821C96E0h */ case    3:  		/* mr R3, R27 */
		/* 821C96E0h case    3:*/		regs.R3 = regs.R27;
		/* 821C96E0h case    3:*/		return 0x821C96E4;
		  /* 821C96E4h */ case    4:  		/* bl 418812 */
		/* 821C96E4h case    4:*/		regs.LR = 0x821C96E8; return 0x8222FAE0;
		/* 821C96E4h case    4:*/		return 0x821C96E8;
	}
	return 0x821C96E8;
} // Block from 821C96D4h-821C96E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C96E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C96E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C96E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C96E8);
		  /* 821C96E8h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821C96E8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821C96E8h case    0:*/		return 0x821C96EC;
		  /* 821C96ECh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C96ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C96ECh case    1:*/		return 0x821C96F0;
		  /* 821C96F0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C96F0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C96F0h case    2:*/		return 0x821C96F4;
		  /* 821C96F4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C96F4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C9704;  }
		/* 821C96F4h case    3:*/		return 0x821C96F8;
		  /* 821C96F8h */ case    4:  		/* mr R27, R11 */
		/* 821C96F8h case    4:*/		regs.R27 = regs.R11;
		/* 821C96F8h case    4:*/		return 0x821C96FC;
		  /* 821C96FCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C96FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C96FCh case    5:*/		return 0x821C9700;
		  /* 821C9700h */ case    6:  		/* bc 4, CR6_EQ, -384 */
		/* 821C9700h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C9580;  }
		/* 821C9700h case    6:*/		return 0x821C9704;
	}
	return 0x821C9704;
} // Block from 821C96E8h-821C9704h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C9704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9704);
		  /* 821C9704h */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 821C9704h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 821C9704h case    0:*/		return 0x821C9708;
		  /* 821C9708h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C9708h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9708h case    1:*/		return 0x821C970C;
		  /* 821C970Ch */ case    2:  		/* bc 4, CR0_EQ, 96 */
		/* 821C970Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821C976C;  }
		/* 821C970Ch case    2:*/		return 0x821C9710;
		  /* 821C9710h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821C9710h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C9710h case    3:*/		return 0x821C9714;
		  /* 821C9714h */ case    4:  		/* bc 12, CR0_EQ, 88 */
		/* 821C9714h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C976C;  }
		/* 821C9714h case    4:*/		return 0x821C9718;
		  /* 821C9718h */ case    5:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C9718h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C9718h case    5:*/		return 0x821C971C;
		  /* 821C971Ch */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821C971Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C971Ch case    6:*/		return 0x821C9720;
		  /* 821C9720h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 821C9720h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C9734;  }
		/* 821C9720h case    7:*/		return 0x821C9724;
		  /* 821C9724h */ case    8:  		/* lwz R10, <#[R10 + 8]> */
		/* 821C9724h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821C9724h case    8:*/		return 0x821C9728;
		  /* 821C9728h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821C9728h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C9728h case    9:*/		return 0x821C972C;
		  /* 821C972Ch */ case   10:  		/* li R10, 1 */
		/* 821C972Ch case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821C972Ch case   10:*/		return 0x821C9730;
		  /* 821C9730h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821C9730h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821C9738;  }
		/* 821C9730h case   11:*/		return 0x821C9734;
	}
	return 0x821C9734;
} // Block from 821C9704h-821C9734h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821C9734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9734);
		  /* 821C9734h */ case    0:  		/* li R10, 0 */
		/* 821C9734h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821C9734h case    0:*/		return 0x821C9738;
	}
	return 0x821C9738;
} // Block from 821C9734h-821C9738h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C9738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9738);
		  /* 821C9738h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821C9738h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821C9738h case    0:*/		return 0x821C973C;
		  /* 821C973Ch */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821C973Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821C9754;  }
		/* 821C973Ch case    1:*/		return 0x821C9740;
		  /* 821C9740h */ case    2:  		/* lwz R10, <#[R11 + 80]> */
		/* 821C9740h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000050) );
		/* 821C9740h case    2:*/		return 0x821C9744;
		  /* 821C9744h */ case    3:  		/* lwz R9, <#[R11 + 48]> */
		/* 821C9744h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821C9744h case    3:*/		return 0x821C9748;
		  /* 821C9748h */ case    4:  		/* lwz R10, <#[R10 + 48]> */
		/* 821C9748h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821C9748h case    4:*/		return 0x821C974C;
		  /* 821C974Ch */ case    5:  		/* rlwimi R10, R9, 0, 6, 4 */
		/* 821C974Ch case    5:*/		cpu::op::rlwimi<0,0,6,4>(regs,&regs.R10,regs.R9);
		/* 821C974Ch case    5:*/		return 0x821C9750;
		  /* 821C9750h */ case    6:  		/* stw R10, <#[R11 + 48]> */
		/* 821C9750h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821C9750h case    6:*/		return 0x821C9754;
	}
	return 0x821C9754;
} // Block from 821C9738h-821C9754h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C9754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9754);
		  /* 821C9754h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821C9754h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821C9754h case    0:*/		return 0x821C9758;
		  /* 821C9758h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C9758h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C9758h case    1:*/		return 0x821C975C;
		  /* 821C975Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C975Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C975Ch case    2:*/		return 0x821C9760;
		  /* 821C9760h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C9760h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C976C;  }
		/* 821C9760h case    3:*/		return 0x821C9764;
		  /* 821C9764h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821C9764h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9764h case    4:*/		return 0x821C9768;
		  /* 821C9768h */ case    5:  		/* bc 4, CR6_EQ, -80 */
		/* 821C9768h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C9718;  }
		/* 821C9768h case    5:*/		return 0x821C976C;
	}
	return 0x821C976C;
} // Block from 821C9754h-821C976Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C976Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C976C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C976C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C976C);
		  /* 821C976Ch */ case    0:  		/* mr R3, R19 */
		/* 821C976Ch case    0:*/		regs.R3 = regs.R19;
		/* 821C976Ch case    0:*/		return 0x821C9770;
		  /* 821C9770h */ case    1:  		/* addi R1, R1, 208 */
		/* 821C9770h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821C9770h case    1:*/		return 0x821C9774;
		  /* 821C9774h */ case    2:  		/* b -1279220 */
		/* 821C9774h case    2:*/		return 0x82091280;
		/* 821C9774h case    2:*/		return 0x821C9778;
	}
	return 0x821C9778;
} // Block from 821C976Ch-821C9778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9778);
		  /* 821C9778h */ case    0:  		/* mfspr R12, LR */
		/* 821C9778h case    0:*/		regs.R12 = regs.LR;
		/* 821C9778h case    0:*/		return 0x821C977C;
		  /* 821C977Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821C977Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C977Ch case    1:*/		return 0x821C9780;
		  /* 821C9780h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821C9780h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821C9780h case    2:*/		return 0x821C9784;
		  /* 821C9784h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821C9784h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821C9784h case    3:*/		return 0x821C9788;
		  /* 821C9788h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821C9788h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821C9788h case    4:*/		return 0x821C978C;
		  /* 821C978Ch */ case    5:  		/* mr R31, R3 */
		/* 821C978Ch case    5:*/		regs.R31 = regs.R3;
		/* 821C978Ch case    5:*/		return 0x821C9790;
		  /* 821C9790h */ case    6:  		/* mr R3, R4 */
		/* 821C9790h case    6:*/		regs.R3 = regs.R4;
		/* 821C9790h case    6:*/		return 0x821C9794;
		  /* 821C9794h */ case    7:  		/* mr R30, R4 */
		/* 821C9794h case    7:*/		regs.R30 = regs.R4;
		/* 821C9794h case    7:*/		return 0x821C9798;
		  /* 821C9798h */ case    8:  		/* bl 164152 */
		/* 821C9798h case    8:*/		regs.LR = 0x821C979C; return 0x821F18D0;
		/* 821C9798h case    8:*/		return 0x821C979C;
		  /* 821C979Ch */ case    9:  		/* addi R11, R31, 972 */
		/* 821C979Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x3CC);
		/* 821C979Ch case    9:*/		return 0x821C97A0;
		  /* 821C97A0h */ case   10:  		/* lwz R11, <#[R31 + 976]> */
		/* 821C97A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000003D0) );
		/* 821C97A0h case   10:*/		return 0x821C97A4;
		  /* 821C97A4h */ case   11:  		/* stw R11, <#[R30]> */
		/* 821C97A4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C97A4h case   11:*/		return 0x821C97A8;
		  /* 821C97A8h */ case   12:  		/* stw R30, <#[R31 + 976]> */
		/* 821C97A8h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000003D0) );
		/* 821C97A8h case   12:*/		return 0x821C97AC;
		  /* 821C97ACh */ case   13:  		/* addi R1, R1, 112 */
		/* 821C97ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821C97ACh case   13:*/		return 0x821C97B0;
		  /* 821C97B0h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 821C97B0h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C97B0h case   14:*/		return 0x821C97B4;
		  /* 821C97B4h */ case   15:  		/* mtspr LR, R12 */
		/* 821C97B4h case   15:*/		regs.LR = regs.R12;
		/* 821C97B4h case   15:*/		return 0x821C97B8;
		  /* 821C97B8h */ case   16:  		/* ld R30, <#[R1 - 24]> */
		/* 821C97B8h case   16:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821C97B8h case   16:*/		return 0x821C97BC;
		  /* 821C97BCh */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 821C97BCh case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821C97BCh case   17:*/		return 0x821C97C0;
		  /* 821C97C0h */ case   18:  		/* bclr 20, CR0_LT */
		/* 821C97C0h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C97C0h case   18:*/		return 0x821C97C4;
	}
	return 0x821C97C4;
} // Block from 821C9778h-821C97C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821C97C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C97C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C97C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C97C4);
		  /* 821C97C4h */ case    0:  		/* nop */
		/* 821C97C4h case    0:*/		cpu::op::nop();
		/* 821C97C4h case    0:*/		return 0x821C97C8;
	}
	return 0x821C97C8;
} // Block from 821C97C4h-821C97C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C97C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C97C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C97C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C97C8);
		  /* 821C97C8h */ case    0:  		/* mfspr R12, LR */
		/* 821C97C8h case    0:*/		regs.R12 = regs.LR;
		/* 821C97C8h case    0:*/		return 0x821C97CC;
		  /* 821C97CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821C97CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C97CCh case    1:*/		return 0x821C97D0;
		  /* 821C97D0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821C97D0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821C97D0h case    2:*/		return 0x821C97D4;
		  /* 821C97D4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821C97D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821C97D4h case    3:*/		return 0x821C97D8;
		  /* 821C97D8h */ case    4:  		/* mr R3, R4 */
		/* 821C97D8h case    4:*/		regs.R3 = regs.R4;
		/* 821C97D8h case    4:*/		return 0x821C97DC;
		  /* 821C97DCh */ case    5:  		/* mr R31, R4 */
		/* 821C97DCh case    5:*/		regs.R31 = regs.R4;
		/* 821C97DCh case    5:*/		return 0x821C97E0;
		  /* 821C97E0h */ case    6:  		/* bl -9968 */
		/* 821C97E0h case    6:*/		regs.LR = 0x821C97E4; return 0x821C70F0;
		/* 821C97E0h case    6:*/		return 0x821C97E4;
		  /* 821C97E4h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C97E4h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C97E4h case    7:*/		return 0x821C97E8;
		  /* 821C97E8h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 821C97E8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821C97F4;  }
		/* 821C97E8h case    8:*/		return 0x821C97EC;
		  /* 821C97ECh */ case    9:  		/* li R3, 0 */
		/* 821C97ECh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C97ECh case    9:*/		return 0x821C97F0;
		  /* 821C97F0h */ case   10:  		/* b 48 */
		/* 821C97F0h case   10:*/		return 0x821C9820;
		/* 821C97F0h case   10:*/		return 0x821C97F4;
	}
	return 0x821C97F4;
} // Block from 821C97C8h-821C97F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C97F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C97F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C97F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C97F4);
		  /* 821C97F4h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821C97F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821C97F4h case    0:*/		return 0x821C97F8;
		  /* 821C97F8h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C97F8h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C97F8h case    1:*/		return 0x821C97FC;
		  /* 821C97FCh */ case    2:  		/* addic R10, R10, -1 */
		/* 821C97FCh case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C97FCh case    2:*/		return 0x821C9800;
		  /* 821C9800h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821C9800h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9800h case    3:*/		return 0x821C9804;
		  /* 821C9804h */ case    4:  		/* and R11, R10, R11 */
		/* 821C9804h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C9804h case    4:*/		return 0x821C9808;
		  /* 821C9808h */ case    5:  		/* lwz R11, <#[R11 + 16]> */
		/* 821C9808h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 821C9808h case    5:*/		return 0x821C980C;
		  /* 821C980Ch */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821C980Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821C980Ch case    6:*/		return 0x821C9810;
		  /* 821C9810h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821C9810h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821C9810h case    7:*/		return 0x821C9814;
		  /* 821C9814h */ case    8:  		/* addi R11, R11, -16000 */
		/* 821C9814h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFC180);
		/* 821C9814h case    8:*/		return 0x821C9818;
		  /* 821C9818h */ case    9:  		/* cntlzw R11, R11 */
		/* 821C9818h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821C9818h case    9:*/		return 0x821C981C;
		  /* 821C981Ch */ case   10:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 821C981Ch case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 821C981Ch case   10:*/		return 0x821C9820;
	}
	return 0x821C9820;
} // Block from 821C97F4h-821C9820h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821C9820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9820);
		  /* 821C9820h */ case    0:  		/* addi R1, R1, 96 */
		/* 821C9820h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821C9820h case    0:*/		return 0x821C9824;
		  /* 821C9824h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821C9824h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821C9824h case    1:*/		return 0x821C9828;
		  /* 821C9828h */ case    2:  		/* mtspr LR, R12 */
		/* 821C9828h case    2:*/		regs.LR = regs.R12;
		/* 821C9828h case    2:*/		return 0x821C982C;
		  /* 821C982Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821C982Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821C982Ch case    3:*/		return 0x821C9830;
		  /* 821C9830h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821C9830h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C9830h case    4:*/		return 0x821C9834;
	}
	return 0x821C9834;
} // Block from 821C9820h-821C9834h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9834);
		  /* 821C9834h */ case    0:  		/* nop */
		/* 821C9834h case    0:*/		cpu::op::nop();
		/* 821C9834h case    0:*/		return 0x821C9838;
		  /* 821C9838h */ case    1:  		/* lwz R11, <#[R3]> */
		/* 821C9838h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821C9838h case    1:*/		return 0x821C983C;
		  /* 821C983Ch */ case    2:  		/* mr R6, R3 */
		/* 821C983Ch case    2:*/		regs.R6 = regs.R3;
		/* 821C983Ch case    2:*/		return 0x821C9840;
		  /* 821C9840h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 31 */
		/* 821C9840h case    3:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821C9840h case    3:*/		return 0x821C9844;
		  /* 821C9844h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 821C9844h case    4:*/		if ( regs.CR[0].eq ) { return 0x821C9854;  }
		/* 821C9844h case    4:*/		return 0x821C9848;
		  /* 821C9848h */ case    5:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C9848h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C9848h case    5:*/		return 0x821C984C;
		  /* 821C984Ch */ case    6:  		/* rlwinm. R10, R10, 0, 30, 31 */
		/* 821C984Ch case    6:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821C984Ch case    6:*/		return 0x821C9850;
		  /* 821C9850h */ case    7:  		/* bc 4, CR0_EQ, 8 */
		/* 821C9850h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821C9858;  }
		/* 821C9850h case    7:*/		return 0x821C9854;
	}
	return 0x821C9854;
} // Block from 821C9834h-821C9854h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C9854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9854);
		  /* 821C9854h */ case    0:  		/* li R11, 0 */
		/* 821C9854h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C9854h case    0:*/		return 0x821C9858;
	}
	return 0x821C9858;
} // Block from 821C9854h-821C9858h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C9858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9858);
		  /* 821C9858h */ case    0:  		/* mr R3, R11 */
		/* 821C9858h case    0:*/		regs.R3 = regs.R11;
		/* 821C9858h case    0:*/		return 0x821C985C;
		  /* 821C985Ch */ case    1:  		/* cmplwi CR6, R4, 1 */
		/* 821C985Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000001);
		/* 821C985Ch case    1:*/		return 0x821C9860;
		  /* 821C9860h */ case    2:  		/* bclr 4, CR6_GT */
		/* 821C9860h case    2:*/		if ( !regs.CR[6].gt ) { return (uint32)regs.LR; }
		/* 821C9860h case    2:*/		return 0x821C9864;
	}
	return 0x821C9864;
} // Block from 821C9858h-821C9864h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9864);
		  /* 821C9864h */ case    0:  		/* addi R11, R4, -1 */
		/* 821C9864h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFF);
		/* 821C9864h case    0:*/		return 0x821C9868;
		  /* 821C9868h */ case    1:  		/* li R10, 2 */
		/* 821C9868h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 821C9868h case    1:*/		return 0x821C986C;
		  /* 821C986Ch */ case    2:  		/* mtspr CTR, R11 */
		/* 821C986Ch case    2:*/		regs.CTR = regs.R11;
		/* 821C986Ch case    2:*/		return 0x821C9870;
		  /* 821C9870h */ case    3:  		/* addi R11, R10, 1 */
		/* 821C9870h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1);
		/* 821C9870h case    3:*/		return 0x821C9874;
		  /* 821C9874h */ case    4:  		/* li R7, 2 */
		/* 821C9874h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821C9874h case    4:*/		return 0x821C9878;
		  /* 821C9878h */ case    5:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821C9878h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821C9878h case    5:*/		return 0x821C987C;
		  /* 821C987Ch */ case    6:  		/* rlwinm R9, R10, 29, 3, 29 */
		/* 821C987Ch case    6:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R10);
		/* 821C987Ch case    6:*/		return 0x821C9880;
		  /* 821C9880h */ case    7:  		/* slw R8, R7, R8 */
		/* 821C9880h case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821C9880h case    7:*/		return 0x821C9884;
		  /* 821C9884h */ case    8:  		/* rlwinm R11, R10, 0, 27, 31 */
		/* 821C9884h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821C9884h case    8:*/		return 0x821C9888;
		  /* 821C9888h */ case    9:  		/* li R7, -1 */
		/* 821C9888h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 821C9888h case    9:*/		return 0x821C988C;
		  /* 821C988Ch */ case   10:  		/* add R9, R9, R6 */
		/* 821C988Ch case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 821C988Ch case   10:*/		return 0x821C9890;
		  /* 821C9890h */ case   11:  		/* slw R7, R7, R11 */
		/* 821C9890h case   11:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R11);
		/* 821C9890h case   11:*/		return 0x821C9894;
		  /* 821C9894h */ case   12:  		/* addi R8, R8, -1 */
		/* 821C9894h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821C9894h case   12:*/		return 0x821C9898;
		  /* 821C9898h */ case   13:  		/* lwz R5, <#[R9]> */
		/* 821C9898h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000000) );
		/* 821C9898h case   13:*/		return 0x821C989C;
		  /* 821C989Ch */ case   14:  		/* and R8, R8, R7 */
		/* 821C989Ch case   14:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821C989Ch case   14:*/		return 0x821C98A0;
		  /* 821C98A0h */ case   15:  		/* and R7, R5, R8 */
		/* 821C98A0h case   15:*/		cpu::op::and<0>(regs,&regs.R7,regs.R5,regs.R8);
		/* 821C98A0h case   15:*/		return 0x821C98A4;
		  /* 821C98A4h */ case   16:  		/* srw. R7, R7, R11 */
		/* 821C98A4h case   16:*/		cpu::op::srw<1>(regs,&regs.R7,regs.R7,regs.R11);
		/* 821C98A4h case   16:*/		return 0x821C98A8;
		  /* 821C98A8h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 821C98A8h case   17:*/		if ( regs.CR[0].eq ) { return 0x821C98BC;  }
		/* 821C98A8h case   17:*/		return 0x821C98AC;
		  /* 821C98ACh */ case   18:  		/* lwz R9, <#[R9 + 4]> */
		/* 821C98ACh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821C98ACh case   18:*/		return 0x821C98B0;
		  /* 821C98B0h */ case   19:  		/* and R9, R9, R8 */
		/* 821C98B0h case   19:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821C98B0h case   19:*/		return 0x821C98B4;
		  /* 821C98B4h */ case   20:  		/* srw. R11, R9, R11 */
		/* 821C98B4h case   20:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821C98B4h case   20:*/		return 0x821C98B8;
		  /* 821C98B8h */ case   21:  		/* bc 4, CR0_EQ, 8 */
		/* 821C98B8h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821C98C0;  }
		/* 821C98B8h case   21:*/		return 0x821C98BC;
	}
	return 0x821C98BC;
} // Block from 821C9864h-821C98BCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821C98BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C98BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C98BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C98BC);
		  /* 821C98BCh */ case    0:  		/* li R7, 0 */
		/* 821C98BCh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821C98BCh case    0:*/		return 0x821C98C0;
	}
	return 0x821C98C0;
} // Block from 821C98BCh-821C98C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C98C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C98C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C98C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C98C0);
		  /* 821C98C0h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 821C98C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 821C98C0h case    0:*/		return 0x821C98C4;
		  /* 821C98C4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821C98C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C98D0;  }
		/* 821C98C4h case    1:*/		return 0x821C98C8;
		  /* 821C98C8h */ case    2:  		/* cmpwi CR6, R7, 0 */
		/* 821C98C8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 821C98C8h case    2:*/		return 0x821C98CC;
		  /* 821C98CCh */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 821C98CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C98D4;  }
		/* 821C98CCh case    3:*/		return 0x821C98D0;
	}
	return 0x821C98D0;
} // Block from 821C98C0h-821C98D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C98D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C98D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C98D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C98D0);
		  /* 821C98D0h */ case    0:  		/* li R3, 0 */
		/* 821C98D0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821C98D0h case    0:*/		return 0x821C98D4;
	}
	return 0x821C98D4;
} // Block from 821C98D0h-821C98D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C98D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C98D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C98D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C98D4);
		  /* 821C98D4h */ case    0:  		/* addi R10, R10, 2 */
		/* 821C98D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821C98D4h case    0:*/		return 0x821C98D8;
		  /* 821C98D8h */ case    1:  		/* bc 16, CR0_LT, -104 */
		/* 821C98D8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821C9870;  }
		/* 821C98D8h case    1:*/		return 0x821C98DC;
		  /* 821C98DCh */ case    2:  		/* bclr 20, CR0_LT */
		/* 821C98DCh case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821C98DCh case    2:*/		return 0x821C98E0;
	}
	return 0x821C98E0;
} // Block from 821C98D4h-821C98E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C98E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C98E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C98E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C98E0);
		  /* 821C98E0h */ case    0:  		/* mfspr R12, LR */
		/* 821C98E0h case    0:*/		regs.R12 = regs.LR;
		/* 821C98E0h case    0:*/		return 0x821C98E4;
		  /* 821C98E4h */ case    1:  		/* bl -1279632 */
		/* 821C98E4h case    1:*/		regs.LR = 0x821C98E8; return 0x82091254;
		/* 821C98E4h case    1:*/		return 0x821C98E8;
		  /* 821C98E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C98E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C98E8h case    2:*/		return 0x821C98EC;
		  /* 821C98ECh */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 821C98ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821C98ECh case    3:*/		return 0x821C98F0;
		  /* 821C98F0h */ case    4:  		/* mr R28, R3 */
		/* 821C98F0h case    4:*/		regs.R28 = regs.R3;
		/* 821C98F0h case    4:*/		return 0x821C98F4;
		  /* 821C98F4h */ case    5:  		/* mr R29, R4 */
		/* 821C98F4h case    5:*/		regs.R29 = regs.R4;
		/* 821C98F4h case    5:*/		return 0x821C98F8;
		  /* 821C98F8h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C98F8h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C98F8h case    6:*/		return 0x821C98FC;
		  /* 821C98FCh */ case    7:  		/* mr R27, R5 */
		/* 821C98FCh case    7:*/		regs.R27 = regs.R5;
		/* 821C98FCh case    7:*/		return 0x821C9900;
		  /* 821C9900h */ case    8:  		/* mr R31, R6 */
		/* 821C9900h case    8:*/		regs.R31 = regs.R6;
		/* 821C9900h case    8:*/		return 0x821C9904;
		  /* 821C9904h */ case    9:  		/* cmplwi CR6, R11, 13 */
		/* 821C9904h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 821C9904h case    9:*/		return 0x821C9908;
		  /* 821C9908h */ case   10:  		/* bc 4, CR6_EQ, 40 */
		/* 821C9908h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821C9930;  }
		/* 821C9908h case   10:*/		return 0x821C990C;
		  /* 821C990Ch */ case   11:  		/* lwz R11, <#[R6 + 80]> */
		/* 821C990Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000050) );
		/* 821C990Ch case   11:*/		return 0x821C9910;
		  /* 821C9910h */ case   12:  		/* addi R11, R11, 1 */
		/* 821C9910h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C9910h case   12:*/		return 0x821C9914;
		  /* 821C9914h */ case   13:  		/* stw R11, <#[R6 + 80]> */
		/* 821C9914h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000050) );
		/* 821C9914h case   13:*/		return 0x821C9918;
		  /* 821C9918h */ case   14:  		/* bl -37672 */
		/* 821C9918h case   14:*/		regs.LR = 0x821C991C; return 0x821C05F0;
		/* 821C9918h case   14:*/		return 0x821C991C;
		  /* 821C991Ch */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 821C991Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821C991Ch case   15:*/		return 0x821C9920;
		  /* 821C9920h */ case   16:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821C9920h case   16:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821C9920h case   16:*/		return 0x821C9924;
		  /* 821C9924h */ case   17:  		/* bc 4, CR0_EQ, 156 */
		/* 821C9924h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821C99C0;  }
		/* 821C9924h case   17:*/		return 0x821C9928;
		  /* 821C9928h */ case   18:  		/* li R11, 0 */
		/* 821C9928h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C9928h case   18:*/		return 0x821C992C;
		  /* 821C992Ch */ case   19:  		/* b 188 */
		/* 821C992Ch case   19:*/		return 0x821C99E8;
		/* 821C992Ch case   19:*/		return 0x821C9930;
	}
	return 0x821C9930;
} // Block from 821C98E0h-821C9930h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821C9930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9930);
		  /* 821C9930h */ case    0:  		/* cmplwi CR6, R11, 11 */
		/* 821C9930h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000B);
		/* 821C9930h case    0:*/		return 0x821C9934;
		  /* 821C9934h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821C9934h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C9940;  }
		/* 821C9934h case    1:*/		return 0x821C9938;
		  /* 821C9938h */ case    2:  		/* cmplwi CR6, R11, 10 */
		/* 821C9938h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 821C9938h case    2:*/		return 0x821C993C;
		  /* 821C993Ch */ case    3:  		/* bc 4, CR6_EQ, -32 */
		/* 821C993Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821C991C;  }
		/* 821C993Ch case    3:*/		return 0x821C9940;
	}
	return 0x821C9940;
} // Block from 821C9930h-821C9940h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C9940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9940);
		  /* 821C9940h */ case    0:  		/* lwz R30, <#[R29 + 4]> */
		/* 821C9940h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821C9940h case    0:*/		return 0x821C9944;
		  /* 821C9944h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821C9944h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C9944h case    1:*/		return 0x821C9948;
		  /* 821C9948h */ case    2:  		/* bc 12, CR6_EQ, -44 */
		/* 821C9948h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C991C;  }
		/* 821C9948h case    2:*/		return 0x821C994C;
		  /* 821C994Ch */ case    3:  		/* lwz R4, <#[R30 + 16]> */
		/* 821C994Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821C994Ch case    3:*/		return 0x821C9950;
		  /* 821C9950h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821C9950h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821C9950h case    4:*/		return 0x821C9954;
		  /* 821C9954h */ case    5:  		/* bc 12, CR6_EQ, 100 */
		/* 821C9954h case    5:*/		if ( regs.CR[6].eq ) { return 0x821C99B8;  }
		/* 821C9954h case    5:*/		return 0x821C9958;
		  /* 821C9958h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 821C9958h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821C9958h case    6:*/		return 0x821C995C;
		  /* 821C995Ch */ case    7:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821C995Ch case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821C995Ch case    7:*/		return 0x821C9960;
		  /* 821C9960h */ case    8:  		/* bc 12, CR0_EQ, 88 */
		/* 821C9960h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C99B8;  }
		/* 821C9960h case    8:*/		return 0x821C9964;
		  /* 821C9964h */ case    9:  		/* lwz R11, <#[R4 + 8]> */
		/* 821C9964h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821C9964h case    9:*/		return 0x821C9968;
		  /* 821C9968h */ case   10:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 821C9968h case   10:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 821C9968h case   10:*/		return 0x821C996C;
		  /* 821C996Ch */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821C996Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821C9978;  }
		/* 821C996Ch case   11:*/		return 0x821C9970;
		  /* 821C9970h */ case   12:  		/* li R11, 0 */
		/* 821C9970h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C9970h case   12:*/		return 0x821C9974;
		  /* 821C9974h */ case   13:  		/* b 44 */
		/* 821C9974h case   13:*/		return 0x821C99A0;
		/* 821C9974h case   13:*/		return 0x821C9978;
	}
	return 0x821C9978;
} // Block from 821C9940h-821C9978h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C9978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9978);
		  /* 821C9978h */ case    0:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C9978h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C9978h case    0:*/		return 0x821C997C;
		  /* 821C997Ch */ case    1:  		/* cmplwi CR6, R11, 30 */
		/* 821C997Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 821C997Ch case    1:*/		return 0x821C9980;
		  /* 821C9980h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821C9980h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C9998;  }
		/* 821C9980h case    2:*/		return 0x821C9984;
		  /* 821C9984h */ case    3:  		/* cmplwi CR6, R11, 55 */
		/* 821C9984h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000037);
		/* 821C9984h case    3:*/		return 0x821C9988;
		  /* 821C9988h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821C9988h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C9998;  }
		/* 821C9988h case    4:*/		return 0x821C998C;
		  /* 821C998Ch */ case    5:  		/* cmplwi CR6, R11, 56 */
		/* 821C998Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000038);
		/* 821C998Ch case    5:*/		return 0x821C9990;
	}
	return 0x821C9990;
} // Block from 821C9978h-821C9990h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C9990h
// Function '?RecombineInputSemantics@Compiler@D3DXShader@@AAAXIIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9990);
		  /* 821C9990h */ case    0:  		/* li R11, 0 */
		/* 821C9990h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C9990h case    0:*/		return 0x821C9994;
		  /* 821C9994h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821C9994h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C999C;  }
		/* 821C9994h case    1:*/		return 0x821C9998;
	}
	return 0x821C9998;
} // Block from 821C9990h-821C9998h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9998);
		  /* 821C9998h */ case    0:  		/* li R11, 1 */
		/* 821C9998h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C9998h case    0:*/		return 0x821C999C;
	}
	return 0x821C999C;
} // Block from 821C9998h-821C999Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C999Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C999C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C999C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C999C);
		  /* 821C999Ch */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821C999Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C999Ch case    0:*/		return 0x821C99A0;
	}
	return 0x821C99A0;
} // Block from 821C999Ch-821C99A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C99A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99A0);
		  /* 821C99A0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C99A0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C99A0h case    0:*/		return 0x821C99A4;
		  /* 821C99A4h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821C99A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C99B8;  }
		/* 821C99A4h case    1:*/		return 0x821C99A8;
		  /* 821C99A8h */ case    2:  		/* mr R6, R31 */
		/* 821C99A8h case    2:*/		regs.R6 = regs.R31;
		/* 821C99A8h case    2:*/		return 0x821C99AC;
		  /* 821C99ACh */ case    3:  		/* mr R5, R27 */
		/* 821C99ACh case    3:*/		regs.R5 = regs.R27;
		/* 821C99ACh case    3:*/		return 0x821C99B0;
		  /* 821C99B0h */ case    4:  		/* mr R3, R28 */
		/* 821C99B0h case    4:*/		regs.R3 = regs.R28;
		/* 821C99B0h case    4:*/		return 0x821C99B4;
		  /* 821C99B4h */ case    5:  		/* bl -11348 */
		/* 821C99B4h case    5:*/		regs.LR = 0x821C99B8; return 0x821C6D60;
		/* 821C99B4h case    5:*/		return 0x821C99B8;
	}
	return 0x821C99B8;
} // Block from 821C99A0h-821C99B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C99B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99B8);
		  /* 821C99B8h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821C99B8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821C99B8h case    0:*/		return 0x821C99BC;
		  /* 821C99BCh */ case    1:  		/* b -120 */
		/* 821C99BCh case    1:*/		return 0x821C9944;
		/* 821C99BCh case    1:*/		return 0x821C99C0;
	}
	return 0x821C99C0;
} // Block from 821C99B8h-821C99C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C99C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99C0);
		  /* 821C99C0h */ case    0:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821C99C0h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821C99C0h case    0:*/		return 0x821C99C4;
		  /* 821C99C4h */ case    1:  		/* cmplwi CR6, R11, 30 */
		/* 821C99C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001E);
		/* 821C99C4h case    1:*/		return 0x821C99C8;
		  /* 821C99C8h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821C99C8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821C99E0;  }
		/* 821C99C8h case    2:*/		return 0x821C99CC;
		  /* 821C99CCh */ case    3:  		/* cmplwi CR6, R11, 55 */
		/* 821C99CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000037);
		/* 821C99CCh case    3:*/		return 0x821C99D0;
		  /* 821C99D0h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821C99D0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821C99E0;  }
		/* 821C99D0h case    4:*/		return 0x821C99D4;
		  /* 821C99D4h */ case    5:  		/* cmplwi CR6, R11, 56 */
		/* 821C99D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000038);
		/* 821C99D4h case    5:*/		return 0x821C99D8;
		  /* 821C99D8h */ case    6:  		/* li R11, 0 */
		/* 821C99D8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C99D8h case    6:*/		return 0x821C99DC;
		  /* 821C99DCh */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821C99DCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x821C99E4;  }
		/* 821C99DCh case    7:*/		return 0x821C99E0;
	}
	return 0x821C99E0;
} // Block from 821C99C0h-821C99E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C99E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99E0);
		  /* 821C99E0h */ case    0:  		/* li R11, 1 */
		/* 821C99E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821C99E0h case    0:*/		return 0x821C99E4;
	}
	return 0x821C99E4;
} // Block from 821C99E0h-821C99E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C99E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99E4);
		  /* 821C99E4h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821C99E4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C99E4h case    0:*/		return 0x821C99E8;
	}
	return 0x821C99E8;
} // Block from 821C99E4h-821C99E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C99E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C99E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C99E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C99E8);
		  /* 821C99E8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821C99E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821C99E8h case    0:*/		return 0x821C99EC;
		  /* 821C99ECh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821C99ECh case    1:*/		if ( regs.CR[0].eq ) { return 0x821C9A04;  }
		/* 821C99ECh case    1:*/		return 0x821C99F0;
		  /* 821C99F0h */ case    2:  		/* mr R6, R31 */
		/* 821C99F0h case    2:*/		regs.R6 = regs.R31;
		/* 821C99F0h case    2:*/		return 0x821C99F4;
		  /* 821C99F4h */ case    3:  		/* mr R5, R27 */
		/* 821C99F4h case    3:*/		regs.R5 = regs.R27;
		/* 821C99F4h case    3:*/		return 0x821C99F8;
		  /* 821C99F8h */ case    4:  		/* mr R4, R29 */
		/* 821C99F8h case    4:*/		regs.R4 = regs.R29;
		/* 821C99F8h case    4:*/		return 0x821C99FC;
		  /* 821C99FCh */ case    5:  		/* mr R3, R28 */
		/* 821C99FCh case    5:*/		regs.R3 = regs.R28;
		/* 821C99FCh case    5:*/		return 0x821C9A00;
		  /* 821C9A00h */ case    6:  		/* bl -11424 */
		/* 821C9A00h case    6:*/		regs.LR = 0x821C9A04; return 0x821C6D60;
		/* 821C9A00h case    6:*/		return 0x821C9A04;
	}
	return 0x821C9A04;
} // Block from 821C99E8h-821C9A04h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C9A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9A04);
		  /* 821C9A04h */ case    0:  		/* addi R1, R1, 128 */
		/* 821C9A04h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821C9A04h case    0:*/		return 0x821C9A08;
		  /* 821C9A08h */ case    1:  		/* b -1279844 */
		/* 821C9A08h case    1:*/		return 0x820912A4;
		/* 821C9A08h case    1:*/		return 0x821C9A0C;
		  /* 821C9A0Ch */ case    2:  		/* nop */
		/* 821C9A0Ch case    2:*/		cpu::op::nop();
		/* 821C9A0Ch case    2:*/		return 0x821C9A10;
	}
	return 0x821C9A10;
} // Block from 821C9A04h-821C9A10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9A10);
		  /* 821C9A10h */ case    0:  		/* mfspr R12, LR */
		/* 821C9A10h case    0:*/		regs.R12 = regs.LR;
		/* 821C9A10h case    0:*/		return 0x821C9A14;
		  /* 821C9A14h */ case    1:  		/* bl -1279952 */
		/* 821C9A14h case    1:*/		regs.LR = 0x821C9A18; return 0x82091244;
		/* 821C9A14h case    1:*/		return 0x821C9A18;
		  /* 821C9A18h */ case    2:  		/* stfd FR31, <#[R1 - 88]> */
		/* 821C9A18h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 821C9A18h case    2:*/		return 0x821C9A1C;
		  /* 821C9A1Ch */ case    3:  		/* stwu R1, <#[R1 - 224]> */
		/* 821C9A1Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821C9A1Ch case    3:*/		return 0x821C9A20;
		  /* 821C9A20h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821C9A20h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C9A20h case    4:*/		return 0x821C9A24;
		  /* 821C9A24h */ case    5:  		/* li R23, 0 */
		/* 821C9A24h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821C9A24h case    5:*/		return 0x821C9A28;
		  /* 821C9A28h */ case    6:  		/* mr R24, R3 */
		/* 821C9A28h case    6:*/		regs.R24 = regs.R3;
		/* 821C9A28h case    6:*/		return 0x821C9A2C;
		  /* 821C9A2Ch */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C9A2Ch case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9A2Ch case    7:*/		return 0x821C9A30;
		  /* 821C9A30h */ case    8:  		/* mr R8, R23 */
		/* 821C9A30h case    8:*/		regs.R8 = regs.R23;
		/* 821C9A30h case    8:*/		return 0x821C9A34;
		  /* 821C9A34h */ case    9:  		/* addic R10, R10, -1 */
		/* 821C9A34h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C9A34h case    9:*/		return 0x821C9A38;
		  /* 821C9A38h */ case   10:  		/* subfe R10, R10, R10 */
		/* 821C9A38h case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9A38h case   10:*/		return 0x821C9A3C;
		  /* 821C9A3Ch */ case   11:  		/* and R11, R10, R11 */
		/* 821C9A3Ch case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C9A3Ch case   11:*/		return 0x821C9A40;
		  /* 821C9A40h */ case   12:  		/* lwz R11, <#[R11 + 20]> */
		/* 821C9A40h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821C9A40h case   12:*/		return 0x821C9A44;
		  /* 821C9A44h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C9A44h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9A44h case   13:*/		return 0x821C9A48;
		  /* 821C9A48h */ case   14:  		/* bc 4, CR0_EQ, 264 */
		/* 821C9A48h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821C9B50;  }
		/* 821C9A48h case   14:*/		return 0x821C9A4C;
		  /* 821C9A4Ch */ case   15:  		/* mr R9, R11 */
		/* 821C9A4Ch case   15:*/		regs.R9 = regs.R11;
		/* 821C9A4Ch case   15:*/		return 0x821C9A50;
		  /* 821C9A50h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 821C9A50h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C9A50h case   16:*/		return 0x821C9A54;
		  /* 821C9A54h */ case   17:  		/* bc 12, CR0_EQ, 252 */
		/* 821C9A54h case   17:*/		if ( regs.CR[0].eq ) { return 0x821C9B50;  }
		/* 821C9A54h case   17:*/		return 0x821C9A58;
		  /* 821C9A58h */ case   18:  		/* lwz R10, <#[R9 + 8]> */
		/* 821C9A58h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 821C9A58h case   18:*/		return 0x821C9A5C;
		  /* 821C9A5Ch */ case   19:  		/* rlwinm R11, R10, 0, 18, 24 */
		/* 821C9A5Ch case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R10);
		/* 821C9A5Ch case   19:*/		return 0x821C9A60;
		  /* 821C9A60h */ case   20:  		/* cmplwi CR6, R11, 16000 */
		/* 821C9A60h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821C9A60h case   20:*/		return 0x821C9A64;
		  /* 821C9A64h */ case   21:  		/* bc 4, CR6_EQ, 212 */
		/* 821C9A64h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821C9B38;  }
		/* 821C9A64h case   21:*/		return 0x821C9A68;
		  /* 821C9A68h */ case   22:  		/* lwz R11, <#[R9 + 20]> */
		/* 821C9A68h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 821C9A68h case   22:*/		return 0x821C9A6C;
		  /* 821C9A6Ch */ case   23:  		/* rlwinm. R11, R11, 30, 24, 31 */
		/* 821C9A6Ch case   23:*/		cpu::op::rlwinm<1,30,24,31>(regs,&regs.R11,regs.R11);
		/* 821C9A6Ch case   23:*/		return 0x821C9A70;
		  /* 821C9A70h */ case   24:  		/* bc 12, CR0_EQ, 200 */
		/* 821C9A70h case   24:*/		if ( regs.CR[0].eq ) { return 0x821C9B38;  }
		/* 821C9A70h case   24:*/		return 0x821C9A74;
		  /* 821C9A74h */ case   25:  		/* addi R7, R1, 80 */
		/* 821C9A74h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821C9A74h case   25:*/		return 0x821C9A78;
		  /* 821C9A78h */ case   26:  		/* stw R23, <#[R7]> */
		/* 821C9A78h case   26:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R7 + 0x00000000) );
		/* 821C9A78h case   26:*/		return 0x821C9A7C;
		  /* 821C9A7Ch */ case   27:  		/* rlwinm. R10, R10, 0, 15, 17 */
		/* 821C9A7Ch case   27:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R10,regs.R10);
		/* 821C9A7Ch case   27:*/		return 0x821C9A80;
		  /* 821C9A80h */ case   28:  		/* mr R8, R23 */
		/* 821C9A80h case   28:*/		regs.R8 = regs.R23;
		/* 821C9A80h case   28:*/		return 0x821C9A84;
		  /* 821C9A84h */ case   29:  		/* lwz R10, <#[R1 + 80]> */
		/* 821C9A84h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821C9A84h case   29:*/		return 0x821C9A88;
		  /* 821C9A88h */ case   30:  		/* or R11, R11, R10 */
		/* 821C9A88h case   30:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821C9A88h case   30:*/		return 0x821C9A8C;
		  /* 821C9A8Ch */ case   31:  		/* stw R11, <#[R1 + 80]> */
		/* 821C9A8Ch case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821C9A8Ch case   31:*/		return 0x821C9A90;
		  /* 821C9A90h */ case   32:  		/* bc 12, CR0_EQ, 152 */
		/* 821C9A90h case   32:*/		if ( regs.CR[0].eq ) { return 0x821C9B28;  }
		/* 821C9A90h case   32:*/		return 0x821C9A94;
		  /* 821C9A94h */ case   33:  		/* mr R11, R23 */
		/* 821C9A94h case   33:*/		regs.R11 = regs.R23;
		/* 821C9A94h case   33:*/		return 0x821C9A98;
		  /* 821C9A98h */ case   34:  		/* addi R10, R9, 44 */
		/* 821C9A98h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x2C);
		/* 821C9A98h case   34:*/		return 0x821C9A9C;
		  /* 821C9A9Ch */ case   35:  		/* addi R7, R11, 1 */
		/* 821C9A9Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1);
		/* 821C9A9Ch case   35:*/		return 0x821C9AA0;
		  /* 821C9AA0h */ case   36:  		/* li R6, 2 */
		/* 821C9AA0h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821C9AA0h case   36:*/		return 0x821C9AA4;
		  /* 821C9AA4h */ case   37:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821C9AA4h case   37:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821C9AA4h case   37:*/		return 0x821C9AA8;
		  /* 821C9AA8h */ case   38:  		/* rlwinm R5, R11, 29, 3, 29 */
		/* 821C9AA8h case   38:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R5,regs.R11);
		/* 821C9AA8h case   38:*/		return 0x821C9AAC;
		  /* 821C9AACh */ case   39:  		/* addi R4, R1, 80 */
		/* 821C9AACh case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821C9AACh case   39:*/		return 0x821C9AB0;
		  /* 821C9AB0h */ case   40:  		/* slw R7, R6, R7 */
		/* 821C9AB0h case   40:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821C9AB0h case   40:*/		return 0x821C9AB4;
		  /* 821C9AB4h */ case   41:  		/* lwzx R6, <#[R5 + R4]> */
		/* 821C9AB4h case   41:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R4 + 0x00000000) );
		/* 821C9AB4h case   41:*/		return 0x821C9AB8;
		  /* 821C9AB8h */ case   42:  		/* addi R7, R7, -1 */
		/* 821C9AB8h case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 821C9AB8h case   42:*/		return 0x821C9ABC;
		  /* 821C9ABCh */ case   43:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821C9ABCh case   43:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821C9ABCh case   43:*/		return 0x821C9AC0;
		  /* 821C9AC0h */ case   44:  		/* li R4, -1 */
		/* 821C9AC0h case   44:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 821C9AC0h case   44:*/		return 0x821C9AC4;
		  /* 821C9AC4h */ case   45:  		/* and R7, R7, R6 */
		/* 821C9AC4h case   45:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821C9AC4h case   45:*/		return 0x821C9AC8;
		  /* 821C9AC8h */ case   46:  		/* slw R6, R4, R5 */
		/* 821C9AC8h case   46:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R4,regs.R5);
		/* 821C9AC8h case   46:*/		return 0x821C9ACC;
		  /* 821C9ACCh */ case   47:  		/* and R7, R7, R6 */
		/* 821C9ACCh case   47:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821C9ACCh case   47:*/		return 0x821C9AD0;
		  /* 821C9AD0h */ case   48:  		/* srw R7, R7, R5 */
		/* 821C9AD0h case   48:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 821C9AD0h case   48:*/		return 0x821C9AD4;
		  /* 821C9AD4h */ case   49:  		/* cmpwi CR6, R7, 1 */
		/* 821C9AD4h case   49:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000001);
		/* 821C9AD4h case   49:*/		return 0x821C9AD8;
		  /* 821C9AD8h */ case   50:  		/* bc 12, CR6_EQ, 28 */
		/* 821C9AD8h case   50:*/		if ( regs.CR[6].eq ) { return 0x821C9AF4;  }
		/* 821C9AD8h case   50:*/		return 0x821C9ADC;
		  /* 821C9ADCh */ case   51:  		/* cmpwi CR6, R7, 2 */
		/* 821C9ADCh case   51:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000002);
		/* 821C9ADCh case   51:*/		return 0x821C9AE0;
		  /* 821C9AE0h */ case   52:  		/* bc 4, CR6_EQ, 44 */
		/* 821C9AE0h case   52:*/		if ( !regs.CR[6].eq ) { return 0x821C9B0C;  }
		/* 821C9AE0h case   52:*/		return 0x821C9AE4;
		  /* 821C9AE4h */ case   53:  		/* lwz R7, <#[R10]> */
		/* 821C9AE4h case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9AE4h case   53:*/		return 0x821C9AE8;
		  /* 821C9AE8h */ case   54:  		/* std R7, <#[R1 + 88]> */
		/* 821C9AE8h case   54:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000058) );
		/* 821C9AE8h case   54:*/		return 0x821C9AEC;
		  /* 821C9AECh */ case   55:  		/* lfd FR0, <#[R1 + 88]> */
		/* 821C9AECh case   55:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821C9AECh case   55:*/		return 0x821C9AF0;
		  /* 821C9AF0h */ case   56:  		/* b 16 */
		/* 821C9AF0h case   56:*/		return 0x821C9B00;
		/* 821C9AF0h case   56:*/		return 0x821C9AF4;
	}
	return 0x821C9AF4;
} // Block from 821C9A10h-821C9AF4h (57 instructions)

//////////////////////////////////////////////////////
// Block at 821C9AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9AF4);
		  /* 821C9AF4h */ case    0:  		/* lwa R7, <#[R10]> */
		/* 821C9AF4h case    0:*/		cpu::mem::load32a( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9AF4h case    0:*/		return 0x821C9AF8;
		  /* 821C9AF8h */ case    1:  		/* std R7, <#[R1 + 96]> */
		/* 821C9AF8h case    1:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000060) );
		/* 821C9AF8h case    1:*/		return 0x821C9AFC;
		  /* 821C9AFCh */ case    2:  		/* lfd FR0, <#[R1 + 96]> */
		/* 821C9AFCh case    2:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821C9AFCh case    2:*/		return 0x821C9B00;
	}
	return 0x821C9B00;
} // Block from 821C9AF4h-821C9B00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B00);
		  /* 821C9B00h */ case    0:  		/* fcfid FR0, FR0 */
		/* 821C9B00h case    0:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821C9B00h case    0:*/		return 0x821C9B04;
		  /* 821C9B04h */ case    1:  		/* frsp FR0, FR0 */
		/* 821C9B04h case    1:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR0);
		/* 821C9B04h case    1:*/		return 0x821C9B08;
		  /* 821C9B08h */ case    2:  		/* stfs FR0, <#[R10]> */
		/* 821C9B08h case    2:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9B08h case    2:*/		return 0x821C9B0C;
	}
	return 0x821C9B0C;
} // Block from 821C9B00h-821C9B0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B0C);
		  /* 821C9B0Ch */ case    0:  		/* lwz R7, <#[R9 + 8]> */
		/* 821C9B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000008) );
		/* 821C9B0Ch case    0:*/		return 0x821C9B10;
	}
	return 0x821C9B10;
} // Block from 821C9B0Ch-821C9B10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B10h
// Function '?CloneCodeInBlocks@Compiler@D3DXShader@@AAAKPAV?$DoubleLinkList@VBlock@D3DXShader@@$0A@@2@I_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B10);
		  /* 821C9B10h */ case    0:  		/* addi R8, R8, 1 */
		/* 821C9B10h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821C9B10h case    0:*/		return 0x821C9B14;
		  /* 821C9B14h */ case    1:  		/* addi R10, R10, 4 */
		/* 821C9B14h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C9B14h case    1:*/		return 0x821C9B18;
		  /* 821C9B18h */ case    2:  		/* rlwinm R7, R7, 18, 29, 31 */
		/* 821C9B18h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R7,regs.R7);
		/* 821C9B18h case    2:*/		return 0x821C9B1C;
		  /* 821C9B1Ch */ case    3:  		/* addi R11, R11, 2 */
		/* 821C9B1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821C9B1Ch case    3:*/		return 0x821C9B20;
		  /* 821C9B20h */ case    4:  		/* cmplw CR6, R8, R7 */
		/* 821C9B20h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821C9B20h case    4:*/		return 0x821C9B24;
		  /* 821C9B24h */ case    5:  		/* bc 12, CR6_LT, -136 */
		/* 821C9B24h case    5:*/		if ( regs.CR[6].lt ) { return 0x821C9A9C;  }
		/* 821C9B24h case    5:*/		return 0x821C9B28;
	}
	return 0x821C9B28;
} // Block from 821C9B10h-821C9B28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B28);
		  /* 821C9B28h */ case    0:  		/* lwz R11, <#[R9 + 20]> */
		/* 821C9B28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 821C9B28h case    0:*/		return 0x821C9B2C;
		  /* 821C9B2Ch */ case    1:  		/* li R8, 1 */
		/* 821C9B2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821C9B2Ch case    1:*/		return 0x821C9B30;
		  /* 821C9B30h */ case    2:  		/* rlwinm R11, R11, 0, 30, 21 */
		/* 821C9B30h case    2:*/		cpu::op::rlwinm<0,0,30,21>(regs,&regs.R11,regs.R11);
		/* 821C9B30h case    2:*/		return 0x821C9B34;
		  /* 821C9B34h */ case    3:  		/* stw R11, <#[R9 + 20]> */
		/* 821C9B34h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 821C9B34h case    3:*/		return 0x821C9B38;
	}
	return 0x821C9B38;
} // Block from 821C9B28h-821C9B38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B38);
		  /* 821C9B38h */ case    0:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821C9B38h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821C9B38h case    0:*/		return 0x821C9B3C;
		  /* 821C9B3Ch */ case    1:  		/* lwz R9, <#[R11 + 40]> */
		/* 821C9B3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821C9B3Ch case    1:*/		return 0x821C9B40;
		  /* 821C9B40h */ case    2:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 821C9B40h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 821C9B40h case    2:*/		return 0x821C9B44;
		  /* 821C9B44h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821C9B44h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C9B50;  }
		/* 821C9B44h case    3:*/		return 0x821C9B48;
		  /* 821C9B48h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821C9B48h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821C9B48h case    4:*/		return 0x821C9B4C;
		  /* 821C9B4Ch */ case    5:  		/* bc 4, CR6_EQ, -244 */
		/* 821C9B4Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821C9A58;  }
		/* 821C9B4Ch case    5:*/		return 0x821C9B50;
	}
	return 0x821C9B50;
} // Block from 821C9B38h-821C9B50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C9B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9B50);
		  /* 821C9B50h */ case    0:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 821C9B50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 821C9B50h case    0:*/		return 0x821C9B54;
		  /* 821C9B54h */ case    1:  		/* bc 12, CR0_EQ, 420 */
		/* 821C9B54h case    1:*/		if ( regs.CR[0].eq ) { return 0x821C9CF8;  }
		/* 821C9B54h case    1:*/		return 0x821C9B58;
		  /* 821C9B58h */ case    2:  		/* lwz R11, <#[R24 + 4]> */
		/* 821C9B58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821C9B58h case    2:*/		return 0x821C9B5C;
		  /* 821C9B5Ch */ case    3:  		/* mr R30, R23 */
		/* 821C9B5Ch case    3:*/		regs.R30 = regs.R23;
		/* 821C9B5Ch case    3:*/		return 0x821C9B60;
		  /* 821C9B60h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C9B60h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9B60h case    4:*/		return 0x821C9B64;
		  /* 821C9B64h */ case    5:  		/* addic R10, R10, -1 */
		/* 821C9B64h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C9B64h case    5:*/		return 0x821C9B68;
		  /* 821C9B68h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821C9B68h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9B68h case    6:*/		return 0x821C9B6C;
		  /* 821C9B6Ch */ case    7:  		/* and R11, R10, R11 */
		/* 821C9B6Ch case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C9B6Ch case    7:*/		return 0x821C9B70;
		  /* 821C9B70h */ case    8:  		/* lwz R31, <#[R11 + 20]> */
		/* 821C9B70h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000014) );
		/* 821C9B70h case    8:*/		return 0x821C9B74;
		  /* 821C9B74h */ case    9:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C9B74h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C9B74h case    9:*/		return 0x821C9B78;
		  /* 821C9B78h */ case   10:  		/* bc 4, CR0_EQ, 384 */
		/* 821C9B78h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821C9CF8;  }
		/* 821C9B78h case   10:*/		return 0x821C9B7C;
		  /* 821C9B7Ch */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 821C9B7Ch case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821C9B7Ch case   11:*/		return 0x821C9B80;
		  /* 821C9B80h */ case   12:  		/* bc 12, CR0_EQ, 376 */
		/* 821C9B80h case   12:*/		if ( regs.CR[0].eq ) { return 0x821C9CF8;  }
		/* 821C9B80h case   12:*/		return 0x821C9B84;
		  /* 821C9B84h */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 821C9B84h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821C9B84h case   13:*/		return 0x821C9B88;
		  /* 821C9B88h */ case   14:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821C9B88h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821C9B88h case   14:*/		return 0x821C9B8C;
		  /* 821C9B8Ch */ case   15:  		/* cmplwi CR6, R10, 16000 */
		/* 821C9B8Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003E80);
		/* 821C9B8Ch case   15:*/		return 0x821C9B90;
		  /* 821C9B90h */ case   16:  		/* bc 4, CR6_EQ, 208 */
		/* 821C9B90h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821C9C60;  }
		/* 821C9B90h case   16:*/		return 0x821C9B94;
		  /* 821C9B94h */ case   17:  		/* rlwinm. R4, R11, 18, 29, 31 */
		/* 821C9B94h case   17:*/		cpu::op::rlwinm<1,18,29,31>(regs,&regs.R4,regs.R11);
		/* 821C9B94h case   17:*/		return 0x821C9B98;
		  /* 821C9B98h */ case   18:  		/* mr R11, R23 */
		/* 821C9B98h case   18:*/		regs.R11 = regs.R23;
		/* 821C9B98h case   18:*/		return 0x821C9B9C;
		  /* 821C9B9Ch */ case   19:  		/* bc 12, CR0_EQ, 40 */
		/* 821C9B9Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821C9BC4;  }
		/* 821C9B9Ch case   19:*/		return 0x821C9BA0;
		  /* 821C9BA0h */ case   20:  		/* addi R9, R1, 108 */
		/* 821C9BA0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 821C9BA0h case   20:*/		return 0x821C9BA4;
		  /* 821C9BA4h */ case   21:  		/* addi R10, R31, 40 */
		/* 821C9BA4h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x28);
		/* 821C9BA4h case   21:*/		return 0x821C9BA8;
		  /* 821C9BA8h */ case   22:  		/* lfsu FR0, <#[R10 + 4]> */
		/* 821C9BA8h case   22:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821C9BA8h case   22:*/		return 0x821C9BAC;
		  /* 821C9BACh */ case   23:  		/* addi R11, R11, 1 */
		/* 821C9BACh case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C9BACh case   23:*/		return 0x821C9BB0;
		  /* 821C9BB0h */ case   24:  		/* stfsu FR0, <#[R9 + 4]> */
		/* 821C9BB0h case   24:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 821C9BB0h case   24:*/		return 0x821C9BB4;
		  /* 821C9BB4h */ case   25:  		/* lwz R8, <#[R31 + 8]> */
		/* 821C9BB4h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 821C9BB4h case   25:*/		return 0x821C9BB8;
		  /* 821C9BB8h */ case   26:  		/* rlwinm R4, R8, 18, 29, 31 */
		/* 821C9BB8h case   26:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R4,regs.R8);
		/* 821C9BB8h case   26:*/		return 0x821C9BBC;
		  /* 821C9BBCh */ case   27:  		/* cmplw CR6, R11, R4 */
		/* 821C9BBCh case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821C9BBCh case   27:*/		return 0x821C9BC0;
		  /* 821C9BC0h */ case   28:  		/* bc 12, CR6_LT, -24 */
		/* 821C9BC0h case   28:*/		if ( regs.CR[6].lt ) { return 0x821C9BA8;  }
		/* 821C9BC0h case   28:*/		return 0x821C9BC4;
	}
	return 0x821C9BC4;
} // Block from 821C9B50h-821C9BC4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821C9BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9BC4);
		  /* 821C9BC4h */ case    0:  		/* addi R11, R1, 80 */
		/* 821C9BC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821C9BC4h case    0:*/		return 0x821C9BC8;
		  /* 821C9BC8h */ case    1:  		/* addi R5, R1, 112 */
		/* 821C9BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 821C9BC8h case    1:*/		return 0x821C9BCC;
		  /* 821C9BCCh */ case    2:  		/* mr R3, R24 */
		/* 821C9BCCh case    2:*/		regs.R3 = regs.R24;
		/* 821C9BCCh case    2:*/		return 0x821C9BD0;
		  /* 821C9BD0h */ case    3:  		/* stw R23, <#[R11]> */
		/* 821C9BD0h case    3:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9BD0h case    3:*/		return 0x821C9BD4;
		  /* 821C9BD4h */ case    4:  		/* lwz R6, <#[R1 + 80]> */
		/* 821C9BD4h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821C9BD4h case    4:*/		return 0x821C9BD8;
		  /* 821C9BD8h */ case    5:  		/* bl 382048 */
		/* 821C9BD8h case    5:*/		regs.LR = 0x821C9BDC; return 0x82227038;
		/* 821C9BD8h case    5:*/		return 0x821C9BDC;
		  /* 821C9BDCh */ case    6:  		/* cmplw CR6, R3, R31 */
		/* 821C9BDCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 821C9BDCh case    6:*/		return 0x821C9BE0;
		  /* 821C9BE0h */ case    7:  		/* bc 12, CR6_EQ, 128 */
		/* 821C9BE0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821C9C60;  }
		/* 821C9BE0h case    7:*/		return 0x821C9BE4;
		  /* 821C9BE4h */ case    8:  		/* addi R8, R31, 4 */
		/* 821C9BE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821C9BE4h case    8:*/		return 0x821C9BE8;
		  /* 821C9BE8h */ case    9:  		/* lwz R11, <#[R8]> */
		/* 821C9BE8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C9BE8h case    9:*/		return 0x821C9BEC;
		  /* 821C9BECh */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821C9BECh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9BECh case   10:*/		return 0x821C9BF0;
		  /* 821C9BF0h */ case   11:  		/* bc 12, CR6_EQ, 92 */
		/* 821C9BF0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821C9C4C;  }
		/* 821C9BF0h case   11:*/		return 0x821C9BF4;
		  /* 821C9BF4h */ case   12:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C9BF4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C9BF4h case   12:*/		return 0x821C9BF8;
		  /* 821C9BF8h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 821C9BF8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C9BF8h case   13:*/		return 0x821C9BFC;
		  /* 821C9BFCh */ case   14:  		/* bc 12, CR6_EQ, 60 */
		/* 821C9BFCh case   14:*/		if ( regs.CR[6].eq ) { return 0x821C9C38;  }
		/* 821C9BFCh case   14:*/		return 0x821C9C00;
		  /* 821C9C00h */ case   15:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C9C00h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C9C00h case   15:*/		return 0x821C9C04;
		  /* 821C9C04h */ case   16:  		/* addi R10, R10, 4 */
		/* 821C9C04h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C9C04h case   16:*/		return 0x821C9C08;
		  /* 821C9C08h */ case   17:  		/* lwz R9, <#[R10]> */
		/* 821C9C08h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9C08h case   17:*/		return 0x821C9C0C;
		  /* 821C9C0Ch */ case   18:  		/* b 12 */
		/* 821C9C0Ch case   18:*/		return 0x821C9C18;
		/* 821C9C0Ch case   18:*/		return 0x821C9C10;
		  /* 821C9C10h */ case   19:  		/* addi R10, R9, 8 */
		/* 821C9C10h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C9C10h case   19:*/		return 0x821C9C14;
		  /* 821C9C14h */ case   20:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C9C14h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C9C14h case   20:*/		return 0x821C9C18;
	}
	return 0x821C9C18;
} // Block from 821C9BC4h-821C9C18h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821C9C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9C18);
		  /* 821C9C18h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C9C18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C9C18h case    0:*/		return 0x821C9C1C;
		  /* 821C9C1Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C9C1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C9C10;  }
		/* 821C9C1Ch case    1:*/		return 0x821C9C20;
		  /* 821C9C20h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C9C20h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C9C20h case    2:*/		return 0x821C9C24;
		  /* 821C9C24h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C9C24h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9C24h case    3:*/		return 0x821C9C28;
		  /* 821C9C28h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821C9C28h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821C9C28h case    4:*/		return 0x821C9C2C;
		  /* 821C9C2Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C9C2Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C9C2Ch case    5:*/		return 0x821C9C30;
		  /* 821C9C30h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821C9C30h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821C9C30h case    6:*/		return 0x821C9C34;
		  /* 821C9C34h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821C9C34h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C9C34h case    7:*/		return 0x821C9C38;
	}
	return 0x821C9C38;
} // Block from 821C9C18h-821C9C38h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C9C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9C38);
		  /* 821C9C38h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C9C38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C9C38h case    0:*/		return 0x821C9C3C;
		  /* 821C9C3Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C9C3Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C9C3Ch case    1:*/		return 0x821C9C40;
		  /* 821C9C40h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821C9C40h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C9BE8;  }
		/* 821C9C40h case    2:*/		return 0x821C9C44;
		  /* 821C9C44h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C9C44h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C9C44h case    3:*/		return 0x821C9C48;
		  /* 821C9C48h */ case    4:  		/* b -96 */
		/* 821C9C48h case    4:*/		return 0x821C9BE8;
		/* 821C9C48h case    4:*/		return 0x821C9C4C;
	}
	return 0x821C9C4C;
} // Block from 821C9C38h-821C9C4Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9C4C);
		  /* 821C9C4Ch */ case    0:  		/* li R6, 1 */
		/* 821C9C4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C9C4Ch case    0:*/		return 0x821C9C50;
		  /* 821C9C50h */ case    1:  		/* li R5, 0 */
		/* 821C9C50h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C9C50h case    1:*/		return 0x821C9C54;
		  /* 821C9C54h */ case    2:  		/* mr R4, R31 */
		/* 821C9C54h case    2:*/		regs.R4 = regs.R31;
		/* 821C9C54h case    2:*/		return 0x821C9C58;
		  /* 821C9C58h */ case    3:  		/* mr R3, R24 */
		/* 821C9C58h case    3:*/		regs.R3 = regs.R24;
		/* 821C9C58h case    3:*/		return 0x821C9C5C;
		  /* 821C9C5Ch */ case    4:  		/* bl 399212 */
		/* 821C9C5Ch case    4:*/		regs.LR = 0x821C9C60; return 0x8222B3C8;
		/* 821C9C5Ch case    4:*/		return 0x821C9C60;
	}
	return 0x821C9C60;
} // Block from 821C9C4Ch-821C9C60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9C60);
		  /* 821C9C60h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821C9C60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C9C60h case    0:*/		return 0x821C9C64;
		  /* 821C9C64h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 821C9C64h case    1:*/		if ( regs.CR[6].eq ) { return 0x821C9CA8;  }
		/* 821C9C64h case    1:*/		return 0x821C9C68;
		  /* 821C9C68h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C9C68h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C9C68h case    2:*/		return 0x821C9C6C;
		  /* 821C9C6Ch */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C9C6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C9C6Ch case    3:*/		return 0x821C9C70;
		  /* 821C9C70h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C9C70h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9C70h case    4:*/		return 0x821C9C74;
		  /* 821C9C74h */ case    5:  		/* addic R10, R10, -1 */
		/* 821C9C74h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C9C74h case    5:*/		return 0x821C9C78;
		  /* 821C9C78h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821C9C78h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9C78h case    6:*/		return 0x821C9C7C;
		  /* 821C9C7Ch */ case    7:  		/* and R10, R10, R11 */
		/* 821C9C7Ch case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821C9C7Ch case    7:*/		return 0x821C9C80;
		  /* 821C9C80h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821C9C80h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821C9C80h case    8:*/		return 0x821C9C84;
		  /* 821C9C84h */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 821C9C84h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821C9C98;  }
		/* 821C9C84h case    9:*/		return 0x821C9C88;
		  /* 821C9C88h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821C9C88h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821C9C88h case   10:*/		return 0x821C9C8C;
		  /* 821C9C8Ch */ case   11:  		/* mr R30, R31 */
		/* 821C9C8Ch case   11:*/		regs.R30 = regs.R31;
		/* 821C9C8Ch case   11:*/		return 0x821C9C90;
		  /* 821C9C90h */ case   12:  		/* lwz R31, <#[R11 + 40]> */
		/* 821C9C90h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821C9C90h case   12:*/		return 0x821C9C94;
		  /* 821C9C94h */ case   13:  		/* b 84 */
		/* 821C9C94h case   13:*/		return 0x821C9CE8;
		/* 821C9C94h case   13:*/		return 0x821C9C98;
	}
	return 0x821C9C98;
} // Block from 821C9C60h-821C9C98h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C9C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9C98);
		  /* 821C9C98h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C9C98h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9C98h case    0:*/		return 0x821C9C9C;
		  /* 821C9C9Ch */ case    1:  		/* bc 4, CR0_EQ, 92 */
		/* 821C9C9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C9CF8;  }
		/* 821C9C9Ch case    1:*/		return 0x821C9CA0;
		  /* 821C9CA0h */ case    2:  		/* mr R31, R11 */
		/* 821C9CA0h case    2:*/		regs.R31 = regs.R11;
		/* 821C9CA0h case    2:*/		return 0x821C9CA4;
		  /* 821C9CA4h */ case    3:  		/* b 76 */
		/* 821C9CA4h case    3:*/		return 0x821C9CF0;
		/* 821C9CA4h case    3:*/		return 0x821C9CA8;
	}
	return 0x821C9CA8;
} // Block from 821C9C98h-821C9CA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821C9CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9CA8);
		  /* 821C9CA8h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 821C9CA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821C9CA8h case    0:*/		return 0x821C9CAC;
		  /* 821C9CACh */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C9CACh case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9CACh case    1:*/		return 0x821C9CB0;
		  /* 821C9CB0h */ case    2:  		/* addic R9, R10, -1 */
		/* 821C9CB0h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821C9CB0h case    2:*/		return 0x821C9CB4;
		  /* 821C9CB4h */ case    3:  		/* subfe R9, R9, R9 */
		/* 821C9CB4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821C9CB4h case    3:*/		return 0x821C9CB8;
		  /* 821C9CB8h */ case    4:  		/* and R9, R9, R11 */
		/* 821C9CB8h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821C9CB8h case    4:*/		return 0x821C9CBC;
		  /* 821C9CBCh */ case    5:  		/* lwz R9, <#[R9 + 20]> */
		/* 821C9CBCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000014) );
		/* 821C9CBCh case    5:*/		return 0x821C9CC0;
		  /* 821C9CC0h */ case    6:  		/* rlwinm R8, R9, 0, 31, 31 */
		/* 821C9CC0h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R9);
		/* 821C9CC0h case    6:*/		return 0x821C9CC4;
		  /* 821C9CC4h */ case    7:  		/* addic R8, R8, -1 */
		/* 821C9CC4h case    7:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821C9CC4h case    7:*/		return 0x821C9CC8;
		  /* 821C9CC8h */ case    8:  		/* subfe R8, R8, R8 */
		/* 821C9CC8h case    8:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 821C9CC8h case    8:*/		return 0x821C9CCC;
		  /* 821C9CCCh */ case    9:  		/* and R9, R8, R9 */
		/* 821C9CCCh case    9:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821C9CCCh case    9:*/		return 0x821C9CD0;
		  /* 821C9CD0h */ case   10:  		/* cmplw CR6, R31, R9 */
		/* 821C9CD0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 821C9CD0h case   10:*/		return 0x821C9CD4;
		  /* 821C9CD4h */ case   11:  		/* bc 12, CR6_EQ, -76 */
		/* 821C9CD4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821C9C88;  }
		/* 821C9CD4h case   11:*/		return 0x821C9CD8;
		  /* 821C9CD8h */ case   12:  		/* addic R10, R10, -1 */
		/* 821C9CD8h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C9CD8h case   12:*/		return 0x821C9CDC;
		  /* 821C9CDCh */ case   13:  		/* subfe R10, R10, R10 */
		/* 821C9CDCh case   13:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9CDCh case   13:*/		return 0x821C9CE0;
		  /* 821C9CE0h */ case   14:  		/* and R11, R10, R11 */
		/* 821C9CE0h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821C9CE0h case   14:*/		return 0x821C9CE4;
		  /* 821C9CE4h */ case   15:  		/* lwz R31, <#[R11 + 20]> */
		/* 821C9CE4h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000014) );
		/* 821C9CE4h case   15:*/		return 0x821C9CE8;
	}
	return 0x821C9CE8;
} // Block from 821C9CA8h-821C9CE8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821C9CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9CE8);
		  /* 821C9CE8h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821C9CE8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821C9CE8h case    0:*/		return 0x821C9CEC;
		  /* 821C9CECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821C9CECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821C9CF8;  }
		/* 821C9CECh case    1:*/		return 0x821C9CF0;
	}
	return 0x821C9CF0;
} // Block from 821C9CE8h-821C9CF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9CF0);
		  /* 821C9CF0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821C9CF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C9CF0h case    0:*/		return 0x821C9CF4;
		  /* 821C9CF4h */ case    1:  		/* bc 4, CR6_EQ, -368 */
		/* 821C9CF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C9B84;  }
		/* 821C9CF4h case    1:*/		return 0x821C9CF8;
	}
	return 0x821C9CF8;
} // Block from 821C9CF0h-821C9CF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9CF8);
		  /* 821C9CF8h */ case    0:  		/* lwz R11, <#[R24 + 44]> */
		/* 821C9CF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821C9CF8h case    0:*/		return 0x821C9CFC;
		  /* 821C9CFCh */ case    1:  		/* rlwinm. R11, R11, 0, 21, 22 */
		/* 821C9CFCh case    1:*/		cpu::op::rlwinm<1,0,21,22>(regs,&regs.R11,regs.R11);
		/* 821C9CFCh case    1:*/		return 0x821C9D00;
		  /* 821C9D00h */ case    2:  		/* bc 12, CR0_EQ, 488 */
		/* 821C9D00h case    2:*/		if ( regs.CR[0].eq ) { return 0x821C9EE8;  }
		/* 821C9D00h case    2:*/		return 0x821C9D04;
		  /* 821C9D04h */ case    3:  		/* lwz R11, <#[R24 + 4]> */
		/* 821C9D04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821C9D04h case    3:*/		return 0x821C9D08;
		  /* 821C9D08h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C9D08h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9D08h case    4:*/		return 0x821C9D0C;
		  /* 821C9D0Ch */ case    5:  		/* bc 4, CR0_EQ, 476 */
		/* 821C9D0Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821C9EE8;  }
		/* 821C9D0Ch case    5:*/		return 0x821C9D10;
		  /* 821C9D10h */ case    6:  		/* mr R25, R11 */
		/* 821C9D10h case    6:*/		regs.R25 = regs.R11;
		/* 821C9D10h case    6:*/		return 0x821C9D14;
		  /* 821C9D14h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821C9D14h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821C9D14h case    7:*/		return 0x821C9D18;
		  /* 821C9D18h */ case    8:  		/* bc 12, CR0_EQ, 464 */
		/* 821C9D18h case    8:*/		if ( regs.CR[0].eq ) { return 0x821C9EE8;  }
		/* 821C9D18h case    8:*/		return 0x821C9D1C;
		  /* 821C9D1Ch */ case    9:  		/* lis R11, -32256 */
		/* 821C9D1Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821C9D1Ch case    9:*/		return 0x821C9D20;
		  /* 821C9D20h */ case   10:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 821C9D20h case   10:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 821C9D20h case   10:*/		return 0x821C9D24;
		  /* 821C9D24h */ case   11:  		/* lwz R11, <#[R25 + 28]> */
		/* 821C9D24h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821C9D24h case   11:*/		return 0x821C9D28;
		  /* 821C9D28h */ case   12:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821C9D28h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9D28h case   12:*/		return 0x821C9D2C;
		  /* 821C9D2Ch */ case   13:  		/* addic R10, R10, -1 */
		/* 821C9D2Ch case   13:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821C9D2Ch case   13:*/		return 0x821C9D30;
		  /* 821C9D30h */ case   14:  		/* subfe R10, R10, R10 */
		/* 821C9D30h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821C9D30h case   14:*/		return 0x821C9D34;
		  /* 821C9D34h */ case   15:  		/* and R30, R10, R11 */
		/* 821C9D34h case   15:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821C9D34h case   15:*/		return 0x821C9D38;
		  /* 821C9D38h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 821C9D38h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821C9D38h case   16:*/		return 0x821C9D3C;
		  /* 821C9D3Ch */ case   17:  		/* bc 12, CR6_EQ, 400 */
		/* 821C9D3Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821C9ECC;  }
		/* 821C9D3Ch case   17:*/		return 0x821C9D40;
		  /* 821C9D40h */ case   18:  		/* lwz R31, <#[R30 + 8]> */
		/* 821C9D40h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 821C9D40h case   18:*/		return 0x821C9D44;
		  /* 821C9D44h */ case   19:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821C9D44h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821C9D44h case   19:*/		return 0x821C9D48;
		  /* 821C9D48h */ case   20:  		/* cmplwi CR6, R11, 13184 */
		/* 821C9D48h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003380);
		/* 821C9D48h case   20:*/		return 0x821C9D4C;
		  /* 821C9D4Ch */ case   21:  		/* bc 4, CR6_EQ, 316 */
		/* 821C9D4Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x821C9E88;  }
		/* 821C9D4Ch case   21:*/		return 0x821C9D50;
		  /* 821C9D50h */ case   22:  		/* li R6, 0 */
		/* 821C9D50h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821C9D50h case   22:*/		return 0x821C9D54;
		  /* 821C9D54h */ case   23:  		/* rlwinm R5, R31, 13, 29, 31 */
		/* 821C9D54h case   23:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R31);
		/* 821C9D54h case   23:*/		return 0x821C9D58;
		  /* 821C9D58h */ case   24:  		/* li R4, 103 */
		/* 821C9D58h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x67);
		/* 821C9D58h case   24:*/		return 0x821C9D5C;
		  /* 821C9D5Ch */ case   25:  		/* mr R3, R24 */
		/* 821C9D5Ch case   25:*/		regs.R3 = regs.R24;
		/* 821C9D5Ch case   25:*/		return 0x821C9D60;
		  /* 821C9D60h */ case   26:  		/* bl -416048 */
		/* 821C9D60h case   26:*/		regs.LR = 0x821C9D64; return 0x82164430;
		/* 821C9D60h case   26:*/		return 0x821C9D64;
		  /* 821C9D64h */ case   27:  		/* addi R11, R30, -4 */
		/* 821C9D64h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 821C9D64h case   27:*/		return 0x821C9D68;
		  /* 821C9D68h */ case   28:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821C9D68h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821C9D68h case   28:*/		return 0x821C9D6C;
		  /* 821C9D6Ch */ case   29:  		/* cmplwi CR6, R11, 6 */
		/* 821C9D6Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821C9D6Ch case   29:*/		return 0x821C9D70;
		  /* 821C9D70h */ case   30:  		/* bc 4, CR6_LT, 292 */
		/* 821C9D70h case   30:*/		if ( !regs.CR[6].lt ) { return 0x821C9E94;  }
		/* 821C9D70h case   30:*/		return 0x821C9D74;
		  /* 821C9D74h */ case   31:  		/* rlwinm R31, R31, 18, 29, 31 */
		/* 821C9D74h case   31:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R31,regs.R31);
		/* 821C9D74h case   31:*/		return 0x821C9D78;
		  /* 821C9D78h */ case   32:  		/* lwz R4, <#[R30 + 28]> */
		/* 821C9D78h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821C9D78h case   32:*/		return 0x821C9D7C;
		  /* 821C9D7Ch */ case   33:  		/* li R5, 0 */
		/* 821C9D7Ch case   33:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C9D7Ch case   33:*/		return 0x821C9D80;
		  /* 821C9D80h */ case   34:  		/* lwz R27, <#[R30 + 44]> */
		/* 821C9D80h case   34:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C9D80h case   34:*/		return 0x821C9D84;
		  /* 821C9D84h */ case   35:  		/* mr R6, R31 */
		/* 821C9D84h case   35:*/		regs.R6 = regs.R31;
		/* 821C9D84h case   35:*/		return 0x821C9D88;
		  /* 821C9D88h */ case   36:  		/* mr R3, R24 */
		/* 821C9D88h case   36:*/		regs.R3 = regs.R24;
		/* 821C9D88h case   36:*/		return 0x821C9D8C;
		  /* 821C9D8Ch */ case   37:  		/* bl 372084 */
		/* 821C9D8Ch case   37:*/		regs.LR = 0x821C9D90; return 0x82224B00;
		/* 821C9D8Ch case   37:*/		return 0x821C9D90;
		  /* 821C9D90h */ case   38:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C9D90h case   38:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C9D90h case   38:*/		return 0x821C9D94;
		  /* 821C9D94h */ case   39:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821C9D94h case   39:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821C9D94h case   39:*/		return 0x821C9D98;
		  /* 821C9D98h */ case   40:  		/* addi R11, R11, 36 */
		/* 821C9D98h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821C9D98h case   40:*/		return 0x821C9D9C;
		  /* 821C9D9Ch */ case   41:  		/* addi R10, R10, 36 */
		/* 821C9D9Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821C9D9Ch case   41:*/		return 0x821C9DA0;
		  /* 821C9DA0h */ case   42:  		/* addi R8, R11, -36 */
		/* 821C9DA0h case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821C9DA0h case   42:*/		return 0x821C9DA4;
		  /* 821C9DA4h */ case   43:  		/* addi R6, R10, -36 */
		/* 821C9DA4h case   43:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821C9DA4h case   43:*/		return 0x821C9DA8;
		  /* 821C9DA8h */ case   44:  		/* addi R9, R10, 4 */
		/* 821C9DA8h case   44:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821C9DA8h case   44:*/		return 0x821C9DAC;
		  /* 821C9DACh */ case   45:  		/* lwz R7, <#[R11]> */
		/* 821C9DACh case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9DACh case   45:*/		return 0x821C9DB0;
		  /* 821C9DB0h */ case   46:  		/* mr R28, R3 */
		/* 821C9DB0h case   46:*/		regs.R28 = regs.R3;
		/* 821C9DB0h case   46:*/		return 0x821C9DB4;
		  /* 821C9DB4h */ case   47:  		/* mr R29, R23 */
		/* 821C9DB4h case   47:*/		regs.R29 = regs.R23;
		/* 821C9DB4h case   47:*/		return 0x821C9DB8;
		  /* 821C9DB8h */ case   48:  		/* cmplwi CR6, R31, 0 */
		/* 821C9DB8h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821C9DB8h case   48:*/		return 0x821C9DBC;
		  /* 821C9DBCh */ case   49:  		/* stw R7, <#[R10]> */
		/* 821C9DBCh case   49:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9DBCh case   49:*/		return 0x821C9DC0;
		  /* 821C9DC0h */ case   50:  		/* lwz R7, <#[R11]> */
		/* 821C9DC0h case   50:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9DC0h case   50:*/		return 0x821C9DC4;
		  /* 821C9DC4h */ case   51:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821C9DC4h case   51:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821C9DC4h case   51:*/		return 0x821C9DC8;
		  /* 821C9DC8h */ case   52:  		/* stw R6, <#[R7]> */
		/* 821C9DC8h case   52:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821C9DC8h case   52:*/		return 0x821C9DCC;
		  /* 821C9DCCh */ case   53:  		/* stw R8, <#[R10 + 4]> */
		/* 821C9DCCh case   53:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821C9DCCh case   53:*/		return 0x821C9DD0;
		  /* 821C9DD0h */ case   54:  		/* stw R9, <#[R11]> */
		/* 821C9DD0h case   54:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821C9DD0h case   54:*/		return 0x821C9DD4;
		  /* 821C9DD4h */ case   55:  		/* bc 12, CR6_EQ, 52 */
		/* 821C9DD4h case   55:*/		if ( regs.CR[6].eq ) { return 0x821C9E08;  }
		/* 821C9DD4h case   55:*/		return 0x821C9DD8;
		  /* 821C9DD8h */ case   56:  		/* addi R26, R3, 40 */
		/* 821C9DD8h case   56:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x28);
		/* 821C9DD8h case   56:*/		return 0x821C9DDC;
		  /* 821C9DDCh */ case   57:  		/* mr R5, R29 */
		/* 821C9DDCh case   57:*/		regs.R5 = regs.R29;
		/* 821C9DDCh case   57:*/		return 0x821C9DE0;
		  /* 821C9DE0h */ case   58:  		/* mr R4, R27 */
		/* 821C9DE0h case   58:*/		regs.R4 = regs.R27;
		/* 821C9DE0h case   58:*/		return 0x821C9DE4;
		  /* 821C9DE4h */ case   59:  		/* mr R3, R24 */
		/* 821C9DE4h case   59:*/		regs.R3 = regs.R24;
		/* 821C9DE4h case   59:*/		return 0x821C9DE8;
		  /* 821C9DE8h */ case   60:  		/* bl 146328 */
		/* 821C9DE8h case   60:*/		regs.LR = 0x821C9DEC; return 0x821ED980;
		/* 821C9DE8h case   60:*/		return 0x821C9DEC;
		  /* 821C9DECh */ case   61:  		/* mr R4, R3 */
		/* 821C9DECh case   61:*/		regs.R4 = regs.R3;
		/* 821C9DECh case   61:*/		return 0x821C9DF0;
		  /* 821C9DF0h */ case   62:  		/* mr R3, R28 */
		/* 821C9DF0h case   62:*/		regs.R3 = regs.R28;
		/* 821C9DF0h case   62:*/		return 0x821C9DF4;
		  /* 821C9DF4h */ case   63:  		/* bl -334892 */
		/* 821C9DF4h case   63:*/		regs.LR = 0x821C9DF8; return 0x821781C8;
		/* 821C9DF4h case   63:*/		return 0x821C9DF8;
		  /* 821C9DF8h */ case   64:  		/* addi R29, R29, 1 */
		/* 821C9DF8h case   64:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821C9DF8h case   64:*/		return 0x821C9DFC;
		  /* 821C9DFCh */ case   65:  		/* stwu R3, <#[R26 + 4]> */
		/* 821C9DFCh case   65:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821C9DFCh case   65:*/		return 0x821C9E00;
		  /* 821C9E00h */ case   66:  		/* cmplw CR6, R29, R31 */
		/* 821C9E00h case   66:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 821C9E00h case   66:*/		return 0x821C9E04;
		  /* 821C9E04h */ case   67:  		/* bc 12, CR6_LT, -40 */
		/* 821C9E04h case   67:*/		if ( regs.CR[6].lt ) { return 0x821C9DDC;  }
		/* 821C9E04h case   67:*/		return 0x821C9E08;
	}
	return 0x821C9E08;
} // Block from 821C9CF8h-821C9E08h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E08);
		  /* 821C9E08h */ case    0:  		/* addi R8, R30, 4 */
		/* 821C9E08h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 821C9E08h case    0:*/		return 0x821C9E0C;
		  /* 821C9E0Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821C9E0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821C9E0Ch case    1:*/		return 0x821C9E10;
		  /* 821C9E10h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821C9E10h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9E10h case    2:*/		return 0x821C9E14;
		  /* 821C9E14h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821C9E14h case    3:*/		if ( regs.CR[6].eq ) { return 0x821C9E70;  }
		/* 821C9E14h case    3:*/		return 0x821C9E18;
		  /* 821C9E18h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821C9E18h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821C9E18h case    4:*/		return 0x821C9E1C;
		  /* 821C9E1Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821C9E1Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821C9E1Ch case    5:*/		return 0x821C9E20;
		  /* 821C9E20h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821C9E20h case    6:*/		if ( regs.CR[6].eq ) { return 0x821C9E5C;  }
		/* 821C9E20h case    6:*/		return 0x821C9E24;
		  /* 821C9E24h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821C9E24h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C9E24h case    7:*/		return 0x821C9E28;
		  /* 821C9E28h */ case    8:  		/* addi R10, R10, 4 */
		/* 821C9E28h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821C9E28h case    8:*/		return 0x821C9E2C;
		  /* 821C9E2Ch */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821C9E2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9E2Ch case    9:*/		return 0x821C9E30;
		  /* 821C9E30h */ case   10:  		/* b 12 */
		/* 821C9E30h case   10:*/		return 0x821C9E3C;
		/* 821C9E30h case   10:*/		return 0x821C9E34;
		  /* 821C9E34h */ case   11:  		/* addi R10, R9, 8 */
		/* 821C9E34h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821C9E34h case   11:*/		return 0x821C9E38;
		  /* 821C9E38h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C9E38h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C9E38h case   12:*/		return 0x821C9E3C;
	}
	return 0x821C9E3C;
} // Block from 821C9E08h-821C9E3Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E3C);
		  /* 821C9E3Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821C9E3Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821C9E3Ch case    0:*/		return 0x821C9E40;
		  /* 821C9E40h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821C9E40h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C9E34;  }
		/* 821C9E40h case    1:*/		return 0x821C9E44;
		  /* 821C9E44h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821C9E44h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821C9E44h case    2:*/		return 0x821C9E48;
		  /* 821C9E48h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821C9E48h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9E48h case    3:*/		return 0x821C9E4C;
		  /* 821C9E4Ch */ case    4:  		/* lwz R10, <#[R28 + 4]> */
		/* 821C9E4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821C9E4Ch case    4:*/		return 0x821C9E50;
		  /* 821C9E50h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821C9E50h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821C9E50h case    5:*/		return 0x821C9E54;
		  /* 821C9E54h */ case    6:  		/* stw R11, <#[R28 + 4]> */
		/* 821C9E54h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821C9E54h case    6:*/		return 0x821C9E58;
		  /* 821C9E58h */ case    7:  		/* stw R28, <#[R11 + 12]> */
		/* 821C9E58h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 821C9E58h case    7:*/		return 0x821C9E5C;
	}
	return 0x821C9E5C;
} // Block from 821C9E3Ch-821C9E5Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E5C);
		  /* 821C9E5Ch */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821C9E5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821C9E5Ch case    0:*/		return 0x821C9E60;
		  /* 821C9E60h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821C9E60h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821C9E60h case    1:*/		return 0x821C9E64;
		  /* 821C9E64h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821C9E64h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821C9E0C;  }
		/* 821C9E64h case    2:*/		return 0x821C9E68;
		  /* 821C9E68h */ case    3:  		/* addi R8, R11, 8 */
		/* 821C9E68h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821C9E68h case    3:*/		return 0x821C9E6C;
		  /* 821C9E6Ch */ case    4:  		/* b -96 */
		/* 821C9E6Ch case    4:*/		return 0x821C9E0C;
		/* 821C9E6Ch case    4:*/		return 0x821C9E70;
	}
	return 0x821C9E70;
} // Block from 821C9E5Ch-821C9E70h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E70);
		  /* 821C9E70h */ case    0:  		/* li R6, 1 */
		/* 821C9E70h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821C9E70h case    0:*/		return 0x821C9E74;
		  /* 821C9E74h */ case    1:  		/* li R5, 0 */
		/* 821C9E74h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821C9E74h case    1:*/		return 0x821C9E78;
		  /* 821C9E78h */ case    2:  		/* mr R4, R30 */
		/* 821C9E78h case    2:*/		regs.R4 = regs.R30;
		/* 821C9E78h case    2:*/		return 0x821C9E7C;
		  /* 821C9E7Ch */ case    3:  		/* mr R3, R24 */
		/* 821C9E7Ch case    3:*/		regs.R3 = regs.R24;
		/* 821C9E7Ch case    3:*/		return 0x821C9E80;
		  /* 821C9E80h */ case    4:  		/* bl 398664 */
		/* 821C9E80h case    4:*/		regs.LR = 0x821C9E84; return 0x8222B3C8;
		/* 821C9E80h case    4:*/		return 0x821C9E84;
		  /* 821C9E84h */ case    5:  		/* mr R30, R28 */
		/* 821C9E84h case    5:*/		regs.R30 = regs.R28;
		/* 821C9E84h case    5:*/		return 0x821C9E88;
	}
	return 0x821C9E88;
} // Block from 821C9E70h-821C9E88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E88);
		  /* 821C9E88h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821C9E88h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821C9E88h case    0:*/		return 0x821C9E8C;
		  /* 821C9E8Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821C9E8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821C9E8Ch case    1:*/		return 0x821C9E90;
		  /* 821C9E90h */ case    2:  		/* b -360 */
		/* 821C9E90h case    2:*/		return 0x821C9D28;
		/* 821C9E90h case    2:*/		return 0x821C9E94;
	}
	return 0x821C9E94;
} // Block from 821C9E88h-821C9E94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9E94);
		  /* 821C9E94h */ case    0:  		/* cmplwi CR6, R11, 15 */
		/* 821C9E94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 821C9E94h case    0:*/		return 0x821C9E98;
		  /* 821C9E98h */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 821C9E98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821C9EF4;  }
		/* 821C9E98h case    1:*/		return 0x821C9E9C;
		  /* 821C9E9Ch */ case    2:  		/* lwz R3, <#[R30 + 44]> */
		/* 821C9E9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821C9E9Ch case    2:*/		return 0x821C9EA0;
		  /* 821C9EA0h */ case    3:  		/* fmr FR1, FR31 */
		/* 821C9EA0h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821C9EA0h case    3:*/		return 0x821C9EA4;
		  /* 821C9EA4h */ case    4:  		/* bl -409844 */
		/* 821C9EA4h case    4:*/		regs.LR = 0x821C9EA8; return 0x82165DB0;
		/* 821C9EA4h case    4:*/		return 0x821C9EA8;
		  /* 821C9EA8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821C9EA8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821C9EA8h case    5:*/		return 0x821C9EAC;
		  /* 821C9EACh */ case    6:  		/* mr R3, R24 */
		/* 821C9EACh case    6:*/		regs.R3 = regs.R24;
		/* 821C9EACh case    6:*/		return 0x821C9EB0;
		  /* 821C9EB0h */ case    7:  		/* bc 4, CR0_EQ, 80 */
		/* 821C9EB0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821C9F00;  }
		/* 821C9EB0h case    7:*/		return 0x821C9EB4;
		  /* 821C9EB4h */ case    8:  		/* lwz R11, <#[R30 + 8]> */
		/* 821C9EB4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C9EB4h case    8:*/		return 0x821C9EB8;
		  /* 821C9EB8h */ case    9:  		/* mr R4, R30 */
		/* 821C9EB8h case    9:*/		regs.R4 = regs.R30;
		/* 821C9EB8h case    9:*/		return 0x821C9EBC;
		  /* 821C9EBCh */ case   10:  		/* rlwinm R11, R11, 0, 7, 5 */
		/* 821C9EBCh case   10:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R11,regs.R11);
		/* 821C9EBCh case   10:*/		return 0x821C9EC0;
		  /* 821C9EC0h */ case   11:  		/* stw R11, <#[R30 + 8]> */
		/* 821C9EC0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821C9EC0h case   11:*/		return 0x821C9EC4;
		  /* 821C9EC4h */ case   12:  		/* bl 399244 */
		/* 821C9EC4h case   12:*/		regs.LR = 0x821C9EC8; return 0x8222B650;
		/* 821C9EC4h case   12:*/		return 0x821C9EC8;
		  /* 821C9EC8h */ case   13:  		/* b -420 */
		/* 821C9EC8h case   13:*/		return 0x821C9D24;
		/* 821C9EC8h case   13:*/		return 0x821C9ECC;
	}
	return 0x821C9ECC;
} // Block from 821C9E94h-821C9ECCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821C9ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9ECC);
		  /* 821C9ECCh */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821C9ECCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821C9ECCh case    0:*/		return 0x821C9ED0;
		  /* 821C9ED0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821C9ED0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821C9ED0h case    1:*/		return 0x821C9ED4;
		  /* 821C9ED4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821C9ED4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821C9ED4h case    2:*/		return 0x821C9ED8;
		  /* 821C9ED8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821C9ED8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821C9EE8;  }
		/* 821C9ED8h case    3:*/		return 0x821C9EDC;
		  /* 821C9EDCh */ case    4:  		/* mr R25, R11 */
		/* 821C9EDCh case    4:*/		regs.R25 = regs.R11;
		/* 821C9EDCh case    4:*/		return 0x821C9EE0;
		  /* 821C9EE0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821C9EE0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9EE0h case    5:*/		return 0x821C9EE4;
		  /* 821C9EE4h */ case    6:  		/* bc 4, CR6_EQ, -448 */
		/* 821C9EE4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821C9D24;  }
		/* 821C9EE4h case    6:*/		return 0x821C9EE8;
	}
	return 0x821C9EE8;
} // Block from 821C9ECCh-821C9EE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821C9EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9EE8);
		  /* 821C9EE8h */ case    0:  		/* addi R1, R1, 224 */
		/* 821C9EE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821C9EE8h case    0:*/		return 0x821C9EEC;
		  /* 821C9EECh */ case    1:  		/* lfd FR31, <#[R1 - 88]> */
		/* 821C9EECh case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 821C9EECh case    1:*/		return 0x821C9EF0;
		  /* 821C9EF0h */ case    2:  		/* b -1281116 */
		/* 821C9EF0h case    2:*/		return 0x82091294;
		/* 821C9EF0h case    2:*/		return 0x821C9EF4;
	}
	return 0x821C9EF4;
} // Block from 821C9EE8h-821C9EF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9EF4);
		  /* 821C9EF4h */ case    0:  		/* li R4, 3618 */
		/* 821C9EF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE22);
		/* 821C9EF4h case    0:*/		return 0x821C9EF8;
		  /* 821C9EF8h */ case    1:  		/* mr R3, R24 */
		/* 821C9EF8h case    1:*/		regs.R3 = regs.R24;
		/* 821C9EF8h case    1:*/		return 0x821C9EFC;
		  /* 821C9EFCh */ case    2:  		/* bl -491668 */
		/* 821C9EFCh case    2:*/		regs.LR = 0x821C9F00; return 0x82151E68;
		/* 821C9EFCh case    2:*/		return 0x821C9F00;
	}
	return 0x821C9F00;
} // Block from 821C9EF4h-821C9F00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821C9F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9F00);
		  /* 821C9F00h */ case    0:  		/* li R4, 3643 */
		/* 821C9F00h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE3B);
		/* 821C9F00h case    0:*/		return 0x821C9F04;
		  /* 821C9F04h */ case    1:  		/* bl -491676 */
		/* 821C9F04h case    1:*/		regs.LR = 0x821C9F08; return 0x82151E68;
		/* 821C9F04h case    1:*/		return 0x821C9F08;
	}
	return 0x821C9F08;
} // Block from 821C9F00h-821C9F08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9F08);
		  /* 821C9F08h */ case    0:  		/* mfspr R12, LR */
		/* 821C9F08h case    0:*/		regs.R12 = regs.LR;
		/* 821C9F08h case    0:*/		return 0x821C9F0C;
		  /* 821C9F0Ch */ case    1:  		/* bl -1281204 */
		/* 821C9F0Ch case    1:*/		regs.LR = 0x821C9F10; return 0x82091258;
		/* 821C9F0Ch case    1:*/		return 0x821C9F10;
		  /* 821C9F10h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821C9F10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821C9F10h case    2:*/		return 0x821C9F14;
		  /* 821C9F14h */ case    3:  		/* lwz R11, <#[R3 + 48]> */
		/* 821C9F14h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 821C9F14h case    3:*/		return 0x821C9F18;
		  /* 821C9F18h */ case    4:  		/* lis R10, -1 */
		/* 821C9F18h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821C9F18h case    4:*/		return 0x821C9F1C;
		  /* 821C9F1Ch */ case    5:  		/* mr R30, R3 */
		/* 821C9F1Ch case    5:*/		regs.R30 = regs.R3;
		/* 821C9F1Ch case    5:*/		return 0x821C9F20;
		  /* 821C9F20h */ case    6:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821C9F20h case    6:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821C9F20h case    6:*/		return 0x821C9F24;
		  /* 821C9F24h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821C9F24h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821C9F24h case    7:*/		return 0x821C9F28;
		  /* 821C9F28h */ case    8:  		/* bc 12, CR6_EQ, 520 */
		/* 821C9F28h case    8:*/		if ( regs.CR[6].eq ) { return 0x821CA130;  }
		/* 821C9F28h case    8:*/		return 0x821C9F2C;
		  /* 821C9F2Ch */ case    9:  		/* lwz R11, <#[R3 + 536]> */
		/* 821C9F2Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000218) );
		/* 821C9F2Ch case    9:*/		return 0x821C9F30;
		  /* 821C9F30h */ case   10:  		/* li R29, -1 */
		/* 821C9F30h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 821C9F30h case   10:*/		return 0x821C9F34;
		  /* 821C9F34h */ case   11:  		/* li R4, 0 */
		/* 821C9F34h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821C9F34h case   11:*/		return 0x821C9F38;
		  /* 821C9F38h */ case   12:  		/* li R31, 0 */
		/* 821C9F38h case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821C9F38h case   12:*/		return 0x821C9F3C;
		  /* 821C9F3Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821C9F3Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821C9F3Ch case   13:*/		return 0x821C9F40;
		  /* 821C9F40h */ case   14:  		/* bc 4, CR6_GT, 496 */
		/* 821C9F40h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CA130;  }
		/* 821C9F40h case   14:*/		return 0x821C9F44;
		  /* 821C9F44h */ case   15:  		/* lis R11, -32217 */
		/* 821C9F44h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821C9F44h case   15:*/		return 0x821C9F48;
		  /* 821C9F48h */ case   16:  		/* addi R7, R3, 348 */
		/* 821C9F48h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R3,0x15C);
		/* 821C9F48h case   16:*/		return 0x821C9F4C;
		  /* 821C9F4Ch */ case   17:  		/* li R3, 1 */
		/* 821C9F4Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821C9F4Ch case   17:*/		return 0x821C9F50;
		  /* 821C9F50h */ case   18:  		/* addi R5, R11, 21884 */
		/* 821C9F50h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x557C);
		/* 821C9F50h case   18:*/		return 0x821C9F54;
		  /* 821C9F54h */ case   19:  		/* lwz R11, <#[R7]> */
		/* 821C9F54h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821C9F54h case   19:*/		return 0x821C9F58;
		  /* 821C9F58h */ case   20:  		/* rlwinm R6, R11, 0, 27, 31 */
		/* 821C9F58h case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R11);
		/* 821C9F58h case   20:*/		return 0x821C9F5C;
		  /* 821C9F5Ch */ case   21:  		/* cmplwi CR6, R6, 18 */
		/* 821C9F5Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000012);
		/* 821C9F5Ch case   21:*/		return 0x821C9F60;
		  /* 821C9F60h */ case   22:  		/* bc 12, CR6_EQ, 124 */
		/* 821C9F60h case   22:*/		if ( regs.CR[6].eq ) { return 0x821C9FDC;  }
		/* 821C9F60h case   22:*/		return 0x821C9F64;
		  /* 821C9F64h */ case   23:  		/* rlwinm. R11, R11, 0, 23, 26 */
		/* 821C9F64h case   23:*/		cpu::op::rlwinm<1,0,23,26>(regs,&regs.R11,regs.R11);
		/* 821C9F64h case   23:*/		return 0x821C9F68;
		  /* 821C9F68h */ case   24:  		/* bc 4, CR0_EQ, 164 */
		/* 821C9F68h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821CA00C;  }
		/* 821C9F68h case   24:*/		return 0x821C9F6C;
		  /* 821C9F6Ch */ case   25:  		/* slw R11, R3, R6 */
		/* 821C9F6Ch case   25:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R3,regs.R6);
		/* 821C9F6Ch case   25:*/		return 0x821C9F70;
		  /* 821C9F70h */ case   26:  		/* and. R10, R11, R4 */
		/* 821C9F70h case   26:*/		cpu::op::and<1>(regs,&regs.R10,regs.R11,regs.R4);
		/* 821C9F70h case   26:*/		return 0x821C9F74;
		  /* 821C9F74h */ case   27:  		/* bc 4, CR0_EQ, 164 */
		/* 821C9F74h case   27:*/		if ( !regs.CR[0].eq ) { return 0x821CA018;  }
		/* 821C9F74h case   27:*/		return 0x821C9F78;
		  /* 821C9F78h */ case   28:  		/* lwz R9, <#[R7 + 4]> */
		/* 821C9F78h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 821C9F78h case   28:*/		return 0x821C9F7C;
		  /* 821C9F7Ch */ case   29:  		/* or R4, R11, R4 */
		/* 821C9F7Ch case   29:*/		cpu::op::or<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 821C9F7Ch case   29:*/		return 0x821C9F80;
		  /* 821C9F80h */ case   30:  		/* mr R10, R5 */
		/* 821C9F80h case   30:*/		regs.R10 = regs.R5;
		/* 821C9F80h case   30:*/		return 0x821C9F84;
		  /* 821C9F84h */ case   31:  		/* li R11, 0 */
		/* 821C9F84h case   31:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821C9F84h case   31:*/		return 0x821C9F88;
		  /* 821C9F88h */ case   32:  		/* lwz R9, <#[R9 + 8]> */
		/* 821C9F88h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821C9F88h case   32:*/		return 0x821C9F8C;
		  /* 821C9F8Ch */ case   33:  		/* rlwinm R8, R9, 18, 29, 31 */
		/* 821C9F8Ch case   33:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R8,regs.R9);
		/* 821C9F8Ch case   33:*/		return 0x821C9F90;
		  /* 821C9F90h */ case   34:  		/* lhz R9, <#[R10]> */
		/* 821C9F90h case   34:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821C9F90h case   34:*/		return 0x821C9F94;
		  /* 821C9F94h */ case   35:  		/* rlwinm R28, R9, 21, 11, 31 */
		/* 821C9F94h case   35:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R28,regs.R9);
		/* 821C9F94h case   35:*/		return 0x821C9F98;
		  /* 821C9F98h */ case   36:  		/* cmplw CR6, R28, R6 */
		/* 821C9F98h case   36:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R6);
		/* 821C9F98h case   36:*/		return 0x821C9F9C;
		  /* 821C9F9Ch */ case   37:  		/* bc 4, CR6_EQ, 16 */
		/* 821C9F9Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x821C9FAC;  }
		/* 821C9F9Ch case   37:*/		return 0x821C9FA0;
		  /* 821C9FA0h */ case   38:  		/* rlwinm R9, R9, 24, 29, 31 */
		/* 821C9FA0h case   38:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R9,regs.R9);
		/* 821C9FA0h case   38:*/		return 0x821C9FA4;
		  /* 821C9FA4h */ case   39:  		/* cmplw CR6, R9, R8 */
		/* 821C9FA4h case   39:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821C9FA4h case   39:*/		return 0x821C9FA8;
		  /* 821C9FA8h */ case   40:  		/* bc 12, CR6_EQ, 24 */
		/* 821C9FA8h case   40:*/		if ( regs.CR[6].eq ) { return 0x821C9FC0;  }
		/* 821C9FA8h case   40:*/		return 0x821C9FAC;
	}
	return 0x821C9FAC;
} // Block from 821C9F08h-821C9FACh (41 instructions)

//////////////////////////////////////////////////////
// Block at 821C9FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9FAC);
		  /* 821C9FACh */ case    0:  		/* addi R11, R11, 1 */
		/* 821C9FACh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821C9FACh case    0:*/		return 0x821C9FB0;
		  /* 821C9FB0h */ case    1:  		/* addi R10, R10, 2 */
		/* 821C9FB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821C9FB0h case    1:*/		return 0x821C9FB4;
		  /* 821C9FB4h */ case    2:  		/* cmplwi CR6, R11, 8 */
		/* 821C9FB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821C9FB4h case    2:*/		return 0x821C9FB8;
		  /* 821C9FB8h */ case    3:  		/* bc 12, CR6_LT, -40 */
		/* 821C9FB8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821C9F90;  }
		/* 821C9FB8h case    3:*/		return 0x821C9FBC;
		  /* 821C9FBCh */ case    4:  		/* b 24 */
		/* 821C9FBCh case    4:*/		return 0x821C9FD4;
		/* 821C9FBCh case    4:*/		return 0x821C9FC0;
	}
	return 0x821C9FC0;
} // Block from 821C9FACh-821C9FC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9FC0);
		  /* 821C9FC0h */ case    0:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 821C9FC0h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 821C9FC0h case    0:*/		return 0x821C9FC4;
		  /* 821C9FC4h */ case    1:  		/* lhzx R10, <#[R10 + R5]> */
		/* 821C9FC4h case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 821C9FC4h case    1:*/		return 0x821C9FC8;
		  /* 821C9FC8h */ case    2:  		/* rlwinm R10, R10, 31, 1, 31 */
		/* 821C9FC8h case    2:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R10);
		/* 821C9FC8h case    2:*/		return 0x821C9FCC;
		  /* 821C9FCCh */ case    3:  		/* and R10, R10, R29 */
		/* 821C9FCCh case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821C9FCCh case    3:*/		return 0x821C9FD0;
		  /* 821C9FD0h */ case    4:  		/* rlwinm R29, R10, 0, 25, 31 */
		/* 821C9FD0h case    4:*/		cpu::op::rlwinm<0,0,25,31>(regs,&regs.R29,regs.R10);
		/* 821C9FD0h case    4:*/		return 0x821C9FD4;
	}
	return 0x821C9FD4;
} // Block from 821C9FC0h-821C9FD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821C9FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9FD4);
		  /* 821C9FD4h */ case    0:  		/* cmplwi CR6, R11, 8 */
		/* 821C9FD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821C9FD4h case    0:*/		return 0x821C9FD8;
		  /* 821C9FD8h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 821C9FD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA024;  }
		/* 821C9FD8h case    1:*/		return 0x821C9FDC;
	}
	return 0x821C9FDC;
} // Block from 821C9FD4h-821C9FDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821C9FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821C9FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821C9FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821C9FDC);
		  /* 821C9FDCh */ case    0:  		/* lwz R11, <#[R30 + 536]> */
		/* 821C9FDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000218) );
		/* 821C9FDCh case    0:*/		return 0x821C9FE0;
		  /* 821C9FE0h */ case    1:  		/* addi R31, R31, 1 */
		/* 821C9FE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821C9FE0h case    1:*/		return 0x821C9FE4;
		  /* 821C9FE4h */ case    2:  		/* addi R7, R7, 12 */
		/* 821C9FE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xC);
		/* 821C9FE4h case    2:*/		return 0x821C9FE8;
		  /* 821C9FE8h */ case    3:  		/* cmplw CR6, R31, R11 */
		/* 821C9FE8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821C9FE8h case    3:*/		return 0x821C9FEC;
		  /* 821C9FECh */ case    4:  		/* bc 12, CR6_LT, -152 */
		/* 821C9FECh case    4:*/		if ( regs.CR[6].lt ) { return 0x821C9F54;  }
		/* 821C9FECh case    4:*/		return 0x821C9FF0;
		  /* 821C9FF0h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 821C9FF0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821C9FF0h case    5:*/		return 0x821C9FF4;
		  /* 821C9FF4h */ case    6:  		/* bc 12, CR6_EQ, 316 */
		/* 821C9FF4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CA130;  }
		/* 821C9FF4h case    6:*/		return 0x821C9FF8;
		  /* 821C9FF8h */ case    7:  		/* cmplwi CR6, R29, 0 */
		/* 821C9FF8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821C9FF8h case    7:*/		return 0x821C9FFC;
		  /* 821C9FFCh */ case    8:  		/* bc 4, CR6_EQ, 52 */
		/* 821C9FFCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CA030;  }
		/* 821C9FFCh case    8:*/		return 0x821CA000;
		  /* 821CA000h */ case    9:  		/* li R4, 3543 */
		/* 821CA000h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xDD7);
		/* 821CA000h case    9:*/		return 0x821CA004;
		  /* 821CA004h */ case   10:  		/* mr R3, R30 */
		/* 821CA004h case   10:*/		regs.R3 = regs.R30;
		/* 821CA004h case   10:*/		return 0x821CA008;
		  /* 821CA008h */ case   11:  		/* bl -491936 */
		/* 821CA008h case   11:*/		regs.LR = 0x821CA00C; return 0x82151E68;
		/* 821CA008h case   11:*/		return 0x821CA00C;
	}
	return 0x821CA00C;
} // Block from 821C9FDCh-821CA00Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CA00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA00C);
		  /* 821CA00Ch */ case    0:  		/* li R4, 3543 */
		/* 821CA00Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDD7);
		/* 821CA00Ch case    0:*/		return 0x821CA010;
		  /* 821CA010h */ case    1:  		/* mr R3, R30 */
		/* 821CA010h case    1:*/		regs.R3 = regs.R30;
		/* 821CA010h case    1:*/		return 0x821CA014;
		  /* 821CA014h */ case    2:  		/* bl -491948 */
		/* 821CA014h case    2:*/		regs.LR = 0x821CA018; return 0x82151E68;
		/* 821CA014h case    2:*/		return 0x821CA018;
	}
	return 0x821CA018;
} // Block from 821CA00Ch-821CA018h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA018);
		  /* 821CA018h */ case    0:  		/* li R4, 3543 */
		/* 821CA018h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDD7);
		/* 821CA018h case    0:*/		return 0x821CA01C;
		  /* 821CA01Ch */ case    1:  		/* mr R3, R30 */
		/* 821CA01Ch case    1:*/		regs.R3 = regs.R30;
		/* 821CA01Ch case    1:*/		return 0x821CA020;
		  /* 821CA020h */ case    2:  		/* bl -491960 */
		/* 821CA020h case    2:*/		regs.LR = 0x821CA024; return 0x82151E68;
		/* 821CA020h case    2:*/		return 0x821CA024;
	}
	return 0x821CA024;
} // Block from 821CA018h-821CA024h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA024);
		  /* 821CA024h */ case    0:  		/* li R4, 3543 */
		/* 821CA024h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDD7);
		/* 821CA024h case    0:*/		return 0x821CA028;
		  /* 821CA028h */ case    1:  		/* mr R3, R30 */
		/* 821CA028h case    1:*/		regs.R3 = regs.R30;
		/* 821CA028h case    1:*/		return 0x821CA02C;
		  /* 821CA02Ch */ case    2:  		/* bl -491972 */
		/* 821CA02Ch case    2:*/		regs.LR = 0x821CA030; return 0x82151E68;
		/* 821CA02Ch case    2:*/		return 0x821CA030;
	}
	return 0x821CA030;
} // Block from 821CA024h-821CA030h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA030);
		  /* 821CA030h */ case    0:  		/* lis R8, -32215 */
		/* 821CA030h case    0:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8229);
		/* 821CA030h case    0:*/		return 0x821CA034;
		  /* 821CA034h */ case    1:  		/* lis R11, -32215 */
		/* 821CA034h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 821CA034h case    1:*/		return 0x821CA038;
		  /* 821CA038h */ case    2:  		/* addi R31, R11, -26060 */
		/* 821CA038h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF9A34);
		/* 821CA038h case    2:*/		return 0x821CA03C;
		  /* 821CA03Ch */ case    3:  		/* lwz R11, <#[R8 - 26032]> */
		/* 821CA03Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0xFFFF9A50) );
		/* 821CA03Ch case    3:*/		return 0x821CA040;
		  /* 821CA040h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA040h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA040h case    4:*/		return 0x821CA044;
		  /* 821CA044h */ case    5:  		/* bc 4, CR0_EQ, 84 */
		/* 821CA044h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CA098;  }
		/* 821CA044h case    5:*/		return 0x821CA048;
		  /* 821CA048h */ case    6:  		/* ori R11, R11, 1 */
		/* 821CA048h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CA048h case    6:*/		return 0x821CA04C;
		  /* 821CA04Ch */ case    7:  		/* lis R10, 2048 */
		/* 821CA04Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x800);
		/* 821CA04Ch case    7:*/		return 0x821CA050;
		  /* 821CA050h */ case    8:  		/* stw R11, <#[R8 - 26032]> */
		/* 821CA050h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0xFFFF9A50) );
		/* 821CA050h case    8:*/		return 0x821CA054;
		  /* 821CA054h */ case    9:  		/* lis R11, 2051 */
		/* 821CA054h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x803);
		/* 821CA054h case    9:*/		return 0x821CA058;
		  /* 821CA058h */ case   10:  		/* stw R10, <#[R31]> */
		/* 821CA058h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CA058h case   10:*/		return 0x821CA05C;
		  /* 821CA05Ch */ case   11:  		/* lis R9, 5940 */
		/* 821CA05Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0x1734);
		/* 821CA05Ch case   11:*/		return 0x821CA060;
		  /* 821CA060h */ case   12:  		/* ori R11, R11, 32768 */
		/* 821CA060h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 821CA060h case   12:*/		return 0x821CA064;
		  /* 821CA064h */ case   13:  		/* lis R10, 14116 */
		/* 821CA064h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0x3724);
		/* 821CA064h case   13:*/		return 0x821CA068;
		  /* 821CA068h */ case   14:  		/* stw R9, <#[R31 + 4]> */
		/* 821CA068h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 821CA068h case   14:*/		return 0x821CA06C;
		  /* 821CA06Ch */ case   15:  		/* stw R11, <#[R31 + 8]> */
		/* 821CA06Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CA06Ch case   15:*/		return 0x821CA070;
		  /* 821CA070h */ case   16:  		/* lis R9, 5907 */
		/* 821CA070h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0x1713);
		/* 821CA070h case   16:*/		return 0x821CA074;
		  /* 821CA074h */ case   17:  		/* stw R10, <#[R31 + 12]> */
		/* 821CA074h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821CA074h case   17:*/		return 0x821CA078;
		  /* 821CA078h */ case   18:  		/* lis R11, 6163 */
		/* 821CA078h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0x1813);
		/* 821CA078h case   18:*/		return 0x821CA07C;
		  /* 821CA07Ch */ case   19:  		/* lis R10, 6195 */
		/* 821CA07Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0x1833);
		/* 821CA07Ch case   19:*/		return 0x821CA080;
		  /* 821CA080h */ case   20:  		/* ori R9, R9, 53760 */
		/* 821CA080h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xD200);
		/* 821CA080h case   20:*/		return 0x821CA084;
		  /* 821CA084h */ case   21:  		/* ori R11, R11, 49600 */
		/* 821CA084h case   21:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xC1C0);
		/* 821CA084h case   21:*/		return 0x821CA088;
		  /* 821CA088h */ case   22:  		/* ori R10, R10, 33248 */
		/* 821CA088h case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x81E0);
		/* 821CA088h case   22:*/		return 0x821CA08C;
		  /* 821CA08Ch */ case   23:  		/* stw R9, <#[R31 + 16]> */
		/* 821CA08Ch case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 821CA08Ch case   23:*/		return 0x821CA090;
		  /* 821CA090h */ case   24:  		/* stw R11, <#[R31 + 20]> */
		/* 821CA090h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821CA090h case   24:*/		return 0x821CA094;
		  /* 821CA094h */ case   25:  		/* stw R10, <#[R31 + 24]> */
		/* 821CA094h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 821CA094h case   25:*/		return 0x821CA098;
	}
	return 0x821CA098;
} // Block from 821CA030h-821CA098h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821CA098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA098);
		  /* 821CA098h */ case    0:  		/* addi R11, R29, -1 */
		/* 821CA098h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821CA098h case    0:*/		return 0x821CA09C;
		  /* 821CA09Ch */ case    1:  		/* andc R11, R29, R11 */
		/* 821CA09Ch case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821CA09Ch case    1:*/		return 0x821CA0A0;
		  /* 821CA0A0h */ case    2:  		/* cntlzw R11, R11 */
		/* 821CA0A0h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821CA0A0h case    2:*/		return 0x821CA0A4;
		  /* 821CA0A4h */ case    3:  		/* subfic R11, R11, 31 */
		/* 821CA0A4h case    3:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821CA0A4h case    3:*/		return 0x821CA0A8;
		  /* 821CA0A8h */ case    4:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 821CA0A8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 821CA0A8h case    4:*/		return 0x821CA0AC;
		  /* 821CA0ACh */ case    5:  		/* stw R11, <#[R30 + 544]> */
		/* 821CA0ACh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000220) );
		/* 821CA0ACh case    5:*/		return 0x821CA0B0;
		  /* 821CA0B0h */ case    6:  		/* lwzx R11, <#[R10 + R31]> */
		/* 821CA0B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821CA0B0h case    6:*/		return 0x821CA0B4;
		  /* 821CA0B4h */ case    7:  		/* rlwinm R7, R11, 18, 27, 31 */
		/* 821CA0B4h case    7:*/		cpu::op::rlwinm<0,18,27,31>(regs,&regs.R7,regs.R11);
		/* 821CA0B4h case    7:*/		return 0x821CA0B8;
		  /* 821CA0B8h */ case    8:  		/* rlwinm R10, R11, 27, 27, 31 */
		/* 821CA0B8h case    8:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R11);
		/* 821CA0B8h case    8:*/		return 0x821CA0BC;
		  /* 821CA0BCh */ case    9:  		/* slw R9, R3, R7 */
		/* 821CA0BCh case    9:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R3,regs.R7);
		/* 821CA0BCh case    9:*/		return 0x821CA0C0;
		  /* 821CA0C0h */ case   10:  		/* slw R10, R3, R10 */
		/* 821CA0C0h case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R3,regs.R10);
		/* 821CA0C0h case   10:*/		return 0x821CA0C4;
		  /* 821CA0C4h */ case   11:  		/* rlwinm R5, R11, 9, 27, 31 */
		/* 821CA0C4h case   11:*/		cpu::op::rlwinm<0,9,27,31>(regs,&regs.R5,regs.R11);
		/* 821CA0C4h case   11:*/		return 0x821CA0C8;
		  /* 821CA0C8h */ case   12:  		/* or R10, R10, R9 */
		/* 821CA0C8h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CA0C8h case   12:*/		return 0x821CA0CC;
		  /* 821CA0CCh */ case   13:  		/* slw R9, R3, R5 */
		/* 821CA0CCh case   13:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R3,regs.R5);
		/* 821CA0CCh case   13:*/		return 0x821CA0D0;
		  /* 821CA0D0h */ case   14:  		/* or R10, R10, R9 */
		/* 821CA0D0h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CA0D0h case   14:*/		return 0x821CA0D4;
		  /* 821CA0D4h */ case   15:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CA0D4h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CA0D4h case   15:*/		return 0x821CA0D8;
		  /* 821CA0D8h */ case   16:  		/* cmplw CR6, R10, R4 */
		/* 821CA0D8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 821CA0D8h case   16:*/		return 0x821CA0DC;
		  /* 821CA0DCh */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 821CA0DCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821CA0EC;  }
		/* 821CA0DCh case   17:*/		return 0x821CA0E0;
		  /* 821CA0E0h */ case   18:  		/* li R4, 3543 */
		/* 821CA0E0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0xDD7);
		/* 821CA0E0h case   18:*/		return 0x821CA0E4;
		  /* 821CA0E4h */ case   19:  		/* mr R3, R30 */
		/* 821CA0E4h case   19:*/		regs.R3 = regs.R30;
		/* 821CA0E4h case   19:*/		return 0x821CA0E8;
		  /* 821CA0E8h */ case   20:  		/* bl -492160 */
		/* 821CA0E8h case   20:*/		regs.LR = 0x821CA0EC; return 0x82151E68;
		/* 821CA0E8h case   20:*/		return 0x821CA0EC;
	}
	return 0x821CA0EC;
} // Block from 821CA098h-821CA0ECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CA0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA0EC);
		  /* 821CA0ECh */ case    0:  		/* rlwinm. R4, R11, 4, 28, 31 */
		/* 821CA0ECh case    0:*/		cpu::op::rlwinm<1,4,28,31>(regs,&regs.R4,regs.R11);
		/* 821CA0ECh case    0:*/		return 0x821CA0F0;
		  /* 821CA0F0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CA0F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CA100;  }
		/* 821CA0F0h case    1:*/		return 0x821CA0F4;
		  /* 821CA0F4h */ case    2:  		/* rlwinm R6, R11, 13, 28, 31 */
		/* 821CA0F4h case    2:*/		cpu::op::rlwinm<0,13,28,31>(regs,&regs.R6,regs.R11);
		/* 821CA0F4h case    2:*/		return 0x821CA0F8;
		  /* 821CA0F8h */ case    3:  		/* mr R3, R30 */
		/* 821CA0F8h case    3:*/		regs.R3 = regs.R30;
		/* 821CA0F8h case    3:*/		return 0x821CA0FC;
		  /* 821CA0FCh */ case    4:  		/* bl -4676 */
		/* 821CA0FCh case    4:*/		regs.LR = 0x821CA100; return 0x821C8EB8;
		/* 821CA0FCh case    4:*/		return 0x821CA100;
	}
	return 0x821CA100;
} // Block from 821CA0ECh-821CA100h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA100);
		  /* 821CA100h */ case    0:  		/* lwz R11, <#[R30 + 544]> */
		/* 821CA100h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000220) );
		/* 821CA100h case    0:*/		return 0x821CA104;
		  /* 821CA104h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CA104h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CA104h case    1:*/		return 0x821CA108;
		  /* 821CA108h */ case    2:  		/* lwzx R11, <#[R11 + R31]> */
		/* 821CA108h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821CA108h case    2:*/		return 0x821CA10C;
		  /* 821CA10Ch */ case    3:  		/* rlwinm. R6, R11, 22, 28, 31 */
		/* 821CA10Ch case    3:*/		cpu::op::rlwinm<1,22,28,31>(regs,&regs.R6,regs.R11);
		/* 821CA10Ch case    3:*/		return 0x821CA110;
		  /* 821CA110h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 821CA110h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CA130;  }
		/* 821CA110h case    4:*/		return 0x821CA114;
		  /* 821CA114h */ case    5:  		/* rlwinm R10, R11, 23, 9, 31 */
		/* 821CA114h case    5:*/		cpu::op::rlwinm<0,23,9,31>(regs,&regs.R10,regs.R11);
		/* 821CA114h case    5:*/		return 0x821CA118;
		  /* 821CA118h */ case    6:  		/* rlwinm R7, R11, 27, 27, 31 */
		/* 821CA118h case    6:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R7,regs.R11);
		/* 821CA118h case    6:*/		return 0x821CA11C;
		  /* 821CA11Ch */ case    7:  		/* or R10, R10, R11 */
		/* 821CA11Ch case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821CA11Ch case    7:*/		return 0x821CA120;
		  /* 821CA120h */ case    8:  		/* rlwinm R5, R11, 9, 27, 31 */
		/* 821CA120h case    8:*/		cpu::op::rlwinm<0,9,27,31>(regs,&regs.R5,regs.R11);
		/* 821CA120h case    8:*/		return 0x821CA124;
		  /* 821CA124h */ case    9:  		/* rlwinm R4, R10, 13, 28, 31 */
		/* 821CA124h case    9:*/		cpu::op::rlwinm<0,13,28,31>(regs,&regs.R4,regs.R10);
		/* 821CA124h case    9:*/		return 0x821CA128;
		  /* 821CA128h */ case   10:  		/* mr R3, R30 */
		/* 821CA128h case   10:*/		regs.R3 = regs.R30;
		/* 821CA128h case   10:*/		return 0x821CA12C;
		  /* 821CA12Ch */ case   11:  		/* bl -4724 */
		/* 821CA12Ch case   11:*/		regs.LR = 0x821CA130; return 0x821C8EB8;
		/* 821CA12Ch case   11:*/		return 0x821CA130;
	}
	return 0x821CA130;
} // Block from 821CA100h-821CA130h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CA130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA130);
		  /* 821CA130h */ case    0:  		/* addi R1, R1, 128 */
		/* 821CA130h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821CA130h case    0:*/		return 0x821CA134;
		  /* 821CA134h */ case    1:  		/* b -1281676 */
		/* 821CA134h case    1:*/		return 0x820912A8;
		/* 821CA134h case    1:*/		return 0x821CA138;
	}
	return 0x821CA138;
} // Block from 821CA130h-821CA138h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA138);
		  /* 821CA138h */ case    0:  		/* mfspr R12, LR */
		/* 821CA138h case    0:*/		regs.R12 = regs.LR;
		/* 821CA138h case    0:*/		return 0x821CA13C;
		  /* 821CA13Ch */ case    1:  		/* bl -1281776 */
		/* 821CA13Ch case    1:*/		regs.LR = 0x821CA140; return 0x8209124C;
		/* 821CA13Ch case    1:*/		return 0x821CA140;
		  /* 821CA140h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CA140h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CA140h case    2:*/		return 0x821CA144;
		  /* 821CA144h */ case    3:  		/* li R5, 38 */
		/* 821CA144h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821CA144h case    3:*/		return 0x821CA148;
		  /* 821CA148h */ case    4:  		/* li R4, 8 */
		/* 821CA148h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CA148h case    4:*/		return 0x821CA14C;
		  /* 821CA14Ch */ case    5:  		/* mr R26, R3 */
		/* 821CA14Ch case    5:*/		regs.R26 = regs.R3;
		/* 821CA14Ch case    5:*/		return 0x821CA150;
		  /* 821CA150h */ case    6:  		/* li R28, 0 */
		/* 821CA150h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821CA150h case    6:*/		return 0x821CA154;
		  /* 821CA154h */ case    7:  		/* bl -415844 */
		/* 821CA154h case    7:*/		regs.LR = 0x821CA158; return 0x821648F0;
		/* 821CA154h case    7:*/		return 0x821CA158;
		  /* 821CA158h */ case    8:  		/* addi R25, R3, 4 */
		/* 821CA158h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821CA158h case    8:*/		return 0x821CA15C;
		  /* 821CA15Ch */ case    9:  		/* ori R11, R3, 1 */
		/* 821CA15Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CA15Ch case    9:*/		return 0x821CA160;
		  /* 821CA160h */ case   10:  		/* ori R10, R25, 1 */
		/* 821CA160h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 821CA160h case   10:*/		return 0x821CA164;
		  /* 821CA164h */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 821CA164h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CA164h case   11:*/		return 0x821CA168;
		  /* 821CA168h */ case   12:  		/* mr R31, R3 */
		/* 821CA168h case   12:*/		regs.R31 = regs.R3;
		/* 821CA168h case   12:*/		return 0x821CA16C;
		  /* 821CA16Ch */ case   13:  		/* stw R10, <#[R3]> */
		/* 821CA16Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CA16Ch case   13:*/		return 0x821CA170;
		  /* 821CA170h */ case   14:  		/* lwz R11, <#[R26 + 4]> */
		/* 821CA170h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821CA170h case   14:*/		return 0x821CA174;
		  /* 821CA174h */ case   15:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CA174h case   15:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA174h case   15:*/		return 0x821CA178;
		  /* 821CA178h */ case   16:  		/* addic R10, R10, -1 */
		/* 821CA178h case   16:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CA178h case   16:*/		return 0x821CA17C;
		  /* 821CA17Ch */ case   17:  		/* subfe R10, R10, R10 */
		/* 821CA17Ch case   17:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CA17Ch case   17:*/		return 0x821CA180;
		  /* 821CA180h */ case   18:  		/* and R11, R10, R11 */
		/* 821CA180h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA180h case   18:*/		return 0x821CA184;
		  /* 821CA184h */ case   19:  		/* lwz R11, <#[R11 + 20]> */
		/* 821CA184h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 821CA184h case   19:*/		return 0x821CA188;
		  /* 821CA188h */ case   20:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA188h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA188h case   20:*/		return 0x821CA18C;
		  /* 821CA18Ch */ case   21:  		/* bc 4, CR0_EQ, 152 */
		/* 821CA18Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x821CA224;  }
		/* 821CA18Ch case   21:*/		return 0x821CA190;
		  /* 821CA190h */ case   22:  		/* mr R27, R11 */
		/* 821CA190h case   22:*/		regs.R27 = regs.R11;
		/* 821CA190h case   22:*/		return 0x821CA194;
		  /* 821CA194h */ case   23:  		/* cmplwi CR0, R11, 0 */
		/* 821CA194h case   23:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CA194h case   23:*/		return 0x821CA198;
		  /* 821CA198h */ case   24:  		/* bc 12, CR0_EQ, 140 */
		/* 821CA198h case   24:*/		if ( regs.CR[0].eq ) { return 0x821CA224;  }
		/* 821CA198h case   24:*/		return 0x821CA19C;
		  /* 821CA19Ch */ case   25:  		/* lwz R11, <#[R27 + 8]> */
		/* 821CA19Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821CA19Ch case   25:*/		return 0x821CA1A0;
		  /* 821CA1A0h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821CA1A0h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821CA1A0h case   26:*/		return 0x821CA1A4;
		  /* 821CA1A4h */ case   27:  		/* cmplwi CR6, R11, 16000 */
		/* 821CA1A4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821CA1A4h case   27:*/		return 0x821CA1A8;
		  /* 821CA1A8h */ case   28:  		/* bc 4, CR6_EQ, 96 */
		/* 821CA1A8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821CA208;  }
		/* 821CA1A8h case   28:*/		return 0x821CA1AC;
		  /* 821CA1ACh */ case   29:  		/* addi R29, R27, 4 */
		/* 821CA1ACh case   29:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x4);
		/* 821CA1ACh case   29:*/		return 0x821CA1B0;
		  /* 821CA1B0h */ case   30:  		/* lwz R30, <#[R29]> */
		/* 821CA1B0h case   30:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821CA1B0h case   30:*/		return 0x821CA1B4;
		  /* 821CA1B4h */ case   31:  		/* cmplwi CR6, R30, 0 */
		/* 821CA1B4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CA1B4h case   31:*/		return 0x821CA1B8;
		  /* 821CA1B8h */ case   32:  		/* bc 12, CR6_EQ, 80 */
		/* 821CA1B8h case   32:*/		if ( regs.CR[6].eq ) { return 0x821CA208;  }
		/* 821CA1B8h case   32:*/		return 0x821CA1BC;
		  /* 821CA1BCh */ case   33:  		/* lwz R4, <#[R30 + 16]> */
		/* 821CA1BCh case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000010) );
		/* 821CA1BCh case   33:*/		return 0x821CA1C0;
		  /* 821CA1C0h */ case   34:  		/* cmplwi CR6, R4, 0 */
		/* 821CA1C0h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821CA1C0h case   34:*/		return 0x821CA1C4;
		  /* 821CA1C4h */ case   35:  		/* bc 12, CR6_EQ, 48 */
		/* 821CA1C4h case   35:*/		if ( regs.CR[6].eq ) { return 0x821CA1F4;  }
		/* 821CA1C4h case   35:*/		return 0x821CA1C8;
		  /* 821CA1C8h */ case   36:  		/* lwz R11, <#[R4 + 8]> */
		/* 821CA1C8h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CA1C8h case   36:*/		return 0x821CA1CC;
		  /* 821CA1CCh */ case   37:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821CA1CCh case   37:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821CA1CCh case   37:*/		return 0x821CA1D0;
		  /* 821CA1D0h */ case   38:  		/* bc 4, CR0_EQ, 36 */
		/* 821CA1D0h case   38:*/		if ( !regs.CR[0].eq ) { return 0x821CA1F4;  }
		/* 821CA1D0h case   38:*/		return 0x821CA1D4;
		  /* 821CA1D4h */ case   39:  		/* mr R6, R31 */
		/* 821CA1D4h case   39:*/		regs.R6 = regs.R31;
		/* 821CA1D4h case   39:*/		return 0x821CA1D8;
		  /* 821CA1D8h */ case   40:  		/* mr R5, R26 */
		/* 821CA1D8h case   40:*/		regs.R5 = regs.R26;
		/* 821CA1D8h case   40:*/		return 0x821CA1DC;
		  /* 821CA1DCh */ case   41:  		/* addi R3, R1, 88 */
		/* 821CA1DCh case   41:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821CA1DCh case   41:*/		return 0x821CA1E0;
		  /* 821CA1E0h */ case   42:  		/* bl 413768 */
		/* 821CA1E0h case   42:*/		regs.LR = 0x821CA1E4; return 0x8222F228;
		/* 821CA1E0h case   42:*/		return 0x821CA1E4;
		  /* 821CA1E4h */ case   43:  		/* lwz R10, <#[R1 + 92]> */
		/* 821CA1E4h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CA1E4h case   43:*/		return 0x821CA1E8;
		  /* 821CA1E8h */ case   44:  		/* rlwinm R11, R28, 0, 24, 31 */
		/* 821CA1E8h case   44:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821CA1E8h case   44:*/		return 0x821CA1EC;
		  /* 821CA1ECh */ case   45:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 821CA1ECh case   45:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821CA1ECh case   45:*/		return 0x821CA1F0;
		  /* 821CA1F0h */ case   46:  		/* or R28, R10, R11 */
		/* 821CA1F0h case   46:*/		cpu::op::or<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821CA1F0h case   46:*/		return 0x821CA1F4;
	}
	return 0x821CA1F4;
} // Block from 821CA138h-821CA1F4h (47 instructions)

//////////////////////////////////////////////////////
// Block at 821CA1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA1F4);
		  /* 821CA1F4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821CA1F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CA1F4h case    0:*/		return 0x821CA1F8;
		  /* 821CA1F8h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821CA1F8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821CA1F8h case    1:*/		return 0x821CA1FC;
		  /* 821CA1FCh */ case    2:  		/* bc 4, CR6_EQ, -76 */
		/* 821CA1FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CA1B0;  }
		/* 821CA1FCh case    2:*/		return 0x821CA200;
		  /* 821CA200h */ case    3:  		/* addi R29, R30, 8 */
		/* 821CA200h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821CA200h case    3:*/		return 0x821CA204;
		  /* 821CA204h */ case    4:  		/* b -84 */
		/* 821CA204h case    4:*/		return 0x821CA1B0;
		/* 821CA204h case    4:*/		return 0x821CA208;
	}
	return 0x821CA208;
} // Block from 821CA1F4h-821CA208h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA208);
		  /* 821CA208h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821CA208h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821CA208h case    0:*/		return 0x821CA20C;
		  /* 821CA20Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CA20Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CA20Ch case    1:*/		return 0x821CA210;
		  /* 821CA210h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA210h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA210h case    2:*/		return 0x821CA214;
		  /* 821CA214h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CA214h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CA224;  }
		/* 821CA214h case    3:*/		return 0x821CA218;
		  /* 821CA218h */ case    4:  		/* mr R27, R11 */
		/* 821CA218h case    4:*/		regs.R27 = regs.R11;
		/* 821CA218h case    4:*/		return 0x821CA21C;
		  /* 821CA21Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CA21Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA21Ch case    5:*/		return 0x821CA220;
		  /* 821CA220h */ case    6:  		/* bc 4, CR6_EQ, -132 */
		/* 821CA220h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CA19C;  }
		/* 821CA220h case    6:*/		return 0x821CA224;
	}
	return 0x821CA224;
} // Block from 821CA208h-821CA224h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CA224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA224);
		  /* 821CA224h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821CA224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821CA224h case    0:*/		return 0x821CA228;
		  /* 821CA228h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA228h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA228h case    1:*/		return 0x821CA22C;
		  /* 821CA22Ch */ case    2:  		/* bc 4, CR0_EQ, 160 */
		/* 821CA22Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CA2CC;  }
		/* 821CA22Ch case    2:*/		return 0x821CA230;
		  /* 821CA230h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821CA230h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CA230h case    3:*/		return 0x821CA234;
		  /* 821CA234h */ case    4:  		/* bc 12, CR0_EQ, 152 */
		/* 821CA234h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CA2CC;  }
		/* 821CA234h case    4:*/		return 0x821CA238;
		  /* 821CA238h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 821CA238h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CA238h case    5:*/		return 0x821CA23C;
		  /* 821CA23Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CA23Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CA23Ch case    6:*/		return 0x821CA240;
		  /* 821CA240h */ case    7:  		/* addi R4, R11, -4 */
		/* 821CA240h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821CA240h case    7:*/		return 0x821CA244;
		  /* 821CA244h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CA244h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA244h case    8:*/		return 0x821CA248;
		  /* 821CA248h */ case    9:  		/* addi R10, R11, 3 */
		/* 821CA248h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821CA248h case    9:*/		return 0x821CA24C;
		  /* 821CA24Ch */ case   10:  		/* addic. R11, R11, -1 */
		/* 821CA24Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CA24Ch case   10:*/		return 0x821CA250;
	}
	return 0x821CA250;
} // Block from 821CA224h-821CA250h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CA250h
// Function '?FreeUniqueTermList@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UUniqueProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA250);
		  /* 821CA250h */ case    0:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CA250h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CA250h case    0:*/		return 0x821CA254;
		  /* 821CA254h */ case    1:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821CA254h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821CA254h case    1:*/		return 0x821CA258;
		  /* 821CA258h */ case    2:  		/* stw R11, <#[R4 + 8]> */
		/* 821CA258h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821CA258h case    2:*/		return 0x821CA25C;
		  /* 821CA25Ch */ case    3:  		/* bc 4, CR0_EQ, 60 */
		/* 821CA25Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CA298;  }
		/* 821CA25Ch case    3:*/		return 0x821CA260;
		  /* 821CA260h */ case    4:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821CA260h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821CA260h case    4:*/		return 0x821CA264;
		  /* 821CA264h */ case    5:  		/* mr R3, R31 */
		/* 821CA264h case    5:*/		regs.R3 = regs.R31;
		/* 821CA264h case    5:*/		return 0x821CA268;
		  /* 821CA268h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CA268h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA268h case    6:*/		return 0x821CA26C;
		  /* 821CA26Ch */ case    7:  		/* lwz R9, <#[R11]> */
		/* 821CA26Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821CA26Ch case    7:*/		return 0x821CA270;
		  /* 821CA270h */ case    8:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821CA270h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821CA270h case    8:*/		return 0x821CA274;
		  /* 821CA274h */ case    9:  		/* stw R9, <#[R10]> */
		/* 821CA274h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821CA274h case    9:*/		return 0x821CA278;
		  /* 821CA278h */ case   10:  		/* lwz R10, <#[R11 + 4]> */
		/* 821CA278h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA278h case   10:*/		return 0x821CA27C;
		  /* 821CA27Ch */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821CA27Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821CA27Ch case   11:*/		return 0x821CA280;
		  /* 821CA280h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CA280h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CA280h case   12:*/		return 0x821CA284;
		  /* 821CA284h */ case   13:  		/* stw R10, <#[R11]> */
		/* 821CA284h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CA284h case   13:*/		return 0x821CA288;
		  /* 821CA288h */ case   14:  		/* lwz R11, <#[R4 + 12]> */
		/* 821CA288h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821CA288h case   14:*/		return 0x821CA28C;
		  /* 821CA28Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 821CA28Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821CA28Ch case   15:*/		return 0x821CA290;
		  /* 821CA290h */ case   16:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821CA290h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821CA290h case   16:*/		return 0x821CA294;
		  /* 821CA294h */ case   17:  		/* bl -492684 */
		/* 821CA294h case   17:*/		regs.LR = 0x821CA298; return 0x82151E08;
		/* 821CA294h case   17:*/		return 0x821CA298;
	}
	return 0x821CA298;
} // Block from 821CA250h-821CA298h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821CA298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA298);
		  /* 821CA298h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CA298h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA298h case    0:*/		return 0x821CA29C;
		  /* 821CA29Ch */ case    1:  		/* mr R6, R31 */
		/* 821CA29Ch case    1:*/		regs.R6 = regs.R31;
		/* 821CA29Ch case    1:*/		return 0x821CA2A0;
	}
	return 0x821CA2A0;
} // Block from 821CA298h-821CA2A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA2A0h
// Function '?IsConstantProductTermList@Compiler@D3DXShader@@AAA_NPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA2A0);
		  /* 821CA2A0h */ case    0:  		/* mr R5, R26 */
		/* 821CA2A0h case    0:*/		regs.R5 = regs.R26;
		/* 821CA2A0h case    0:*/		return 0x821CA2A4;
		  /* 821CA2A4h */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821CA2A4h case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821CA2A4h case    1:*/		return 0x821CA2A8;
		  /* 821CA2A8h */ case    2:  		/* mr R4, R30 */
		/* 821CA2A8h case    2:*/		regs.R4 = regs.R30;
		/* 821CA2A8h case    2:*/		return 0x821CA2AC;
		  /* 821CA2ACh */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 821CA2ACh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA2ACh case    3:*/		return 0x821CA2B0;
		  /* 821CA2B0h */ case    4:  		/* addi R3, R1, 88 */
		/* 821CA2B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821CA2B0h case    4:*/		return 0x821CA2B4;
		  /* 821CA2B4h */ case    5:  		/* bl 413556 */
		/* 821CA2B4h case    5:*/		regs.LR = 0x821CA2B8; return 0x8222F228;
		/* 821CA2B4h case    5:*/		return 0x821CA2B8;
		  /* 821CA2B8h */ case    6:  		/* lwz R10, <#[R1 + 92]> */
		/* 821CA2B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CA2B8h case    6:*/		return 0x821CA2BC;
		  /* 821CA2BCh */ case    7:  		/* rlwinm R11, R28, 0, 24, 31 */
		/* 821CA2BCh case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821CA2BCh case    7:*/		return 0x821CA2C0;
		  /* 821CA2C0h */ case    8:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 821CA2C0h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821CA2C0h case    8:*/		return 0x821CA2C4;
		  /* 821CA2C4h */ case    9:  		/* or R28, R10, R11 */
		/* 821CA2C4h case    9:*/		cpu::op::or<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821CA2C4h case    9:*/		return 0x821CA2C8;
		  /* 821CA2C8h */ case   10:  		/* b -164 */
		/* 821CA2C8h case   10:*/		return 0x821CA224;
		/* 821CA2C8h case   10:*/		return 0x821CA2CC;
	}
	return 0x821CA2CC;
} // Block from 821CA2A0h-821CA2CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CA2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA2CC);
		  /* 821CA2CCh */ case    0:  		/* rlwinm. R31, R28, 0, 24, 31 */
		/* 821CA2CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R31,regs.R28);
		/* 821CA2CCh case    0:*/		return 0x821CA2D0;
		  /* 821CA2D0h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CA2D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CA2DC;  }
		/* 821CA2D0h case    1:*/		return 0x821CA2D4;
		  /* 821CA2D4h */ case    2:  		/* mr R3, R26 */
		/* 821CA2D4h case    2:*/		regs.R3 = regs.R26;
		/* 821CA2D4h case    2:*/		return 0x821CA2D8;
		  /* 821CA2D8h */ case    3:  		/* bl 135240 */
		/* 821CA2D8h case    3:*/		regs.LR = 0x821CA2DC; return 0x821EB320;
		/* 821CA2D8h case    3:*/		return 0x821CA2DC;
	}
	return 0x821CA2DC;
} // Block from 821CA2CCh-821CA2DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CA2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA2DC);
		  /* 821CA2DCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821CA2DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CA2DCh case    0:*/		return 0x821CA2E0;
		  /* 821CA2E0h */ case    1:  		/* bc 12, CR6_EQ, 136 */
		/* 821CA2E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA368;  }
		/* 821CA2E0h case    1:*/		return 0x821CA2E4;
		  /* 821CA2E4h */ case    2:  		/* lwz R11, <#[R26 + 40]> */
		/* 821CA2E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821CA2E4h case    2:*/		return 0x821CA2E8;
		  /* 821CA2E8h */ case    3:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821CA2E8h case    3:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821CA2E8h case    3:*/		return 0x821CA2EC;
		  /* 821CA2ECh */ case    4:  		/* bc 12, CR0_EQ, 124 */
		/* 821CA2ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x821CA368;  }
		/* 821CA2ECh case    4:*/		return 0x821CA2F0;
		  /* 821CA2F0h */ case    5:  		/* lwz R11, <#[R26 + 4]> */
		/* 821CA2F0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821CA2F0h case    5:*/		return 0x821CA2F4;
		  /* 821CA2F4h */ case    6:  		/* li R10, 0 */
		/* 821CA2F4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CA2F4h case    6:*/		return 0x821CA2F8;
		  /* 821CA2F8h */ case    7:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CA2F8h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CA2F8h case    7:*/		return 0x821CA2FC;
		  /* 821CA2FCh */ case    8:  		/* stb R10, <#[R1 + 80]> */
		/* 821CA2FCh case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821CA2FCh case    8:*/		return 0x821CA300;
		  /* 821CA300h */ case    9:  		/* addic R10, R9, -1 */
		/* 821CA300h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821CA300h case    9:*/		return 0x821CA304;
		  /* 821CA304h */ case   10:  		/* subfe R10, R10, R10 */
		/* 821CA304h case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CA304h case   10:*/		return 0x821CA308;
		  /* 821CA308h */ case   11:  		/* and R11, R10, R11 */
		/* 821CA308h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA308h case   11:*/		return 0x821CA30C;
		  /* 821CA30Ch */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CA30Ch case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CA30Ch case   12:*/		return 0x821CA310;
	}
	return 0x821CA310;
} // Block from 821CA2DCh-821CA310h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CA310h
// Function '?ComputeDotProductPrecision@Compiler@D3DXShader@@SA?AW4ConstantValueType@2@QAV?$BitFieldSet@V?$FixedSizeBitSet@I$00@D3DXShader@@II$01@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA310);
		  /* 821CA310h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CA310h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA310h case    0:*/		return 0x821CA314;
		  /* 821CA314h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA314h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA314h case    1:*/		return 0x821CA318;
		  /* 821CA318h */ case    2:  		/* bc 4, CR0_EQ, 68 */
		/* 821CA318h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CA35C;  }
		/* 821CA318h case    2:*/		return 0x821CA31C;
		  /* 821CA31Ch */ case    3:  		/* mr R31, R11 */
		/* 821CA31Ch case    3:*/		regs.R31 = regs.R11;
		/* 821CA31Ch case    3:*/		return 0x821CA320;
		  /* 821CA320h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821CA320h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA320h case    4:*/		return 0x821CA324;
		  /* 821CA324h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 821CA324h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CA35C;  }
		/* 821CA324h case    5:*/		return 0x821CA328;
		  /* 821CA328h */ case    6:  		/* lwz R11, <#[R31 + 48]> */
		/* 821CA328h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821CA328h case    6:*/		return 0x821CA32C;
		  /* 821CA32Ch */ case    7:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821CA32Ch case    7:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821CA32Ch case    7:*/		return 0x821CA330;
		  /* 821CA330h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821CA330h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CA344;  }
		/* 821CA330h case    8:*/		return 0x821CA334;
		  /* 821CA334h */ case    9:  		/* addi R5, R1, 80 */
		/* 821CA334h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821CA334h case    9:*/		return 0x821CA338;
		  /* 821CA338h */ case   10:  		/* mr R4, R31 */
		/* 821CA338h case   10:*/		regs.R4 = regs.R31;
		/* 821CA338h case   10:*/		return 0x821CA33C;
		  /* 821CA33Ch */ case   11:  		/* mr R3, R26 */
		/* 821CA33Ch case   11:*/		regs.R3 = regs.R26;
		/* 821CA33Ch case   11:*/		return 0x821CA340;
		  /* 821CA340h */ case   12:  		/* bl -47280 */
		/* 821CA340h case   12:*/		regs.LR = 0x821CA344; return 0x821BEA90;
		/* 821CA340h case   12:*/		return 0x821CA344;
	}
	return 0x821CA344;
} // Block from 821CA310h-821CA344h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821CA344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA344);
		  /* 821CA344h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821CA344h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821CA344h case    0:*/		return 0x821CA348;
		  /* 821CA348h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821CA348h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA348h case    1:*/		return 0x821CA34C;
		  /* 821CA34Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821CA34Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821CA34Ch case    2:*/		return 0x821CA350;
		  /* 821CA350h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821CA350h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CA35C;  }
		/* 821CA350h case    3:*/		return 0x821CA354;
		  /* 821CA354h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821CA354h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CA354h case    4:*/		return 0x821CA358;
		  /* 821CA358h */ case    5:  		/* bc 4, CR6_EQ, -48 */
		/* 821CA358h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CA328;  }
		/* 821CA358h case    5:*/		return 0x821CA35C;
	}
	return 0x821CA35C;
} // Block from 821CA344h-821CA35Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CA35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA35C);
		  /* 821CA35Ch */ case    0:  		/* lbz R11, <#[R1 + 80]> */
		/* 821CA35Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821CA35Ch case    0:*/		return 0x821CA360;
		  /* 821CA360h */ case    1:  		/* rlwinm R10, R28, 0, 24, 31 */
		/* 821CA360h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R28);
		/* 821CA360h case    1:*/		return 0x821CA364;
		  /* 821CA364h */ case    2:  		/* or R28, R10, R11 */
		/* 821CA364h case    2:*/		cpu::op::or<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821CA364h case    2:*/		return 0x821CA368;
	}
	return 0x821CA368;
} // Block from 821CA35Ch-821CA368h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA368);
		  /* 821CA368h */ case    0:  		/* mr R3, R28 */
		/* 821CA368h case    0:*/		regs.R3 = regs.R28;
		/* 821CA368h case    0:*/		return 0x821CA36C;
		  /* 821CA36Ch */ case    1:  		/* addi R1, R1, 160 */
		/* 821CA36Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CA36Ch case    1:*/		return 0x821CA370;
		  /* 821CA370h */ case    2:  		/* b -1282260 */
		/* 821CA370h case    2:*/		return 0x8209129C;
		/* 821CA370h case    2:*/		return 0x821CA374;
		  /* 821CA374h */ case    3:  		/* nop */
		/* 821CA374h case    3:*/		cpu::op::nop();
		/* 821CA374h case    3:*/		return 0x821CA378;
	}
	return 0x821CA378;
} // Block from 821CA368h-821CA378h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CA378h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA378);
		  /* 821CA378h */ case    0:  		/* mfspr R12, LR */
		/* 821CA378h case    0:*/		regs.R12 = regs.LR;
		/* 821CA378h case    0:*/		return 0x821CA37C;
		  /* 821CA37Ch */ case    1:  		/* bl -1282368 */
		/* 821CA37Ch case    1:*/		regs.LR = 0x821CA380; return 0x8209123C;
		/* 821CA37Ch case    1:*/		return 0x821CA380;
		  /* 821CA380h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821CA380h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821CA380h case    2:*/		return 0x821CA384;
		  /* 821CA384h */ case    3:  		/* lwz R11, <#[R3 + 108]> */
		/* 821CA384h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 821CA384h case    3:*/		return 0x821CA388;
		  /* 821CA388h */ case    4:  		/* mr R23, R4 */
		/* 821CA388h case    4:*/		regs.R23 = regs.R4;
		/* 821CA388h case    4:*/		return 0x821CA38C;
		  /* 821CA38Ch */ case    5:  		/* mr R31, R3 */
		/* 821CA38Ch case    5:*/		regs.R31 = regs.R3;
		/* 821CA38Ch case    5:*/		return 0x821CA390;
		  /* 821CA390h */ case    6:  		/* addi R26, R11, 1 */
		/* 821CA390h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1);
		/* 821CA390h case    6:*/		return 0x821CA394;
		  /* 821CA394h */ case    7:  		/* mr R30, R5 */
		/* 821CA394h case    7:*/		regs.R30 = regs.R5;
		/* 821CA394h case    7:*/		return 0x821CA398;
		  /* 821CA398h */ case    8:  		/* stw R26, <#[R3 + 108]> */
		/* 821CA398h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000006C) );
		/* 821CA398h case    8:*/		return 0x821CA39C;
		  /* 821CA39Ch */ case    9:  		/* mr R4, R26 */
		/* 821CA39Ch case    9:*/		regs.R4 = regs.R26;
		/* 821CA39Ch case    9:*/		return 0x821CA3A0;
		  /* 821CA3A0h */ case   10:  		/* mr R28, R6 */
		/* 821CA3A0h case   10:*/		regs.R28 = regs.R6;
		/* 821CA3A0h case   10:*/		return 0x821CA3A4;
		  /* 821CA3A4h */ case   11:  		/* mr R29, R7 */
		/* 821CA3A4h case   11:*/		regs.R29 = regs.R7;
		/* 821CA3A4h case   11:*/		return 0x821CA3A8;
		  /* 821CA3A8h */ case   12:  		/* mr R21, R8 */
		/* 821CA3A8h case   12:*/		regs.R21 = regs.R8;
		/* 821CA3A8h case   12:*/		return 0x821CA3AC;
		  /* 821CA3ACh */ case   13:  		/* mr R22, R9 */
		/* 821CA3ACh case   13:*/		regs.R22 = regs.R9;
		/* 821CA3ACh case   13:*/		return 0x821CA3B0;
		  /* 821CA3B0h */ case   14:  		/* bl -45256 */
		/* 821CA3B0h case   14:*/		regs.LR = 0x821CA3B4; return 0x821BF2E8;
		/* 821CA3B0h case   14:*/		return 0x821CA3B4;
		  /* 821CA3B4h */ case   15:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821CA3B4h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821CA3B4h case   15:*/		return 0x821CA3B8;
	}
	return 0x821CA3B8;
} // Block from 821CA378h-821CA3B8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CA3B8h
// Function '?ExaminePossibleLoopArrayAccess@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAULoop@2@PAUInductionVariable@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA3B8);
		  /* 821CA3B8h */ case    0:  		/* bc 4, CR0_EQ, 88 */
		/* 821CA3B8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821CA410;  }
		/* 821CA3B8h case    0:*/		return 0x821CA3BC;
		  /* 821CA3BCh */ case    1:  		/* lwz R11, <#[R31 + 4]> */
		/* 821CA3BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821CA3BCh case    1:*/		return 0x821CA3C0;
		  /* 821CA3C0h */ case    2:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CA3C0h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA3C0h case    2:*/		return 0x821CA3C4;
		  /* 821CA3C4h */ case    3:  		/* addic R10, R10, -1 */
		/* 821CA3C4h case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CA3C4h case    3:*/		return 0x821CA3C8;
		  /* 821CA3C8h */ case    4:  		/* subfe R10, R10, R10 */
		/* 821CA3C8h case    4:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CA3C8h case    4:*/		return 0x821CA3CC;
		  /* 821CA3CCh */ case    5:  		/* and R11, R10, R11 */
		/* 821CA3CCh case    5:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA3CCh case    5:*/		return 0x821CA3D0;
		  /* 821CA3D0h */ case    6:  		/* lwz R11, <#[R11 + 28]> */
		/* 821CA3D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821CA3D0h case    6:*/		return 0x821CA3D4;
		  /* 821CA3D4h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA3D4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA3D4h case    7:*/		return 0x821CA3D8;
		  /* 821CA3D8h */ case    8:  		/* bc 4, CR0_EQ, 56 */
		/* 821CA3D8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821CA410;  }
		/* 821CA3D8h case    8:*/		return 0x821CA3DC;
		  /* 821CA3DCh */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821CA3DCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CA3DCh case    9:*/		return 0x821CA3E0;
		  /* 821CA3E0h */ case   10:  		/* bc 12, CR0_EQ, 48 */
		/* 821CA3E0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CA410;  }
		/* 821CA3E0h case   10:*/		return 0x821CA3E4;
		  /* 821CA3E4h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CA3E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA3E4h case   11:*/		return 0x821CA3E8;
		  /* 821CA3E8h */ case   12:  		/* rlwinm. R9, R10, 6, 31, 31 */
		/* 821CA3E8h case   12:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R9,regs.R10);
		/* 821CA3E8h case   12:*/		return 0x821CA3EC;
		  /* 821CA3ECh */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 821CA3ECh case   13:*/		if ( regs.CR[0].eq ) { return 0x821CA3F8;  }
		/* 821CA3ECh case   13:*/		return 0x821CA3F0;
		  /* 821CA3F0h */ case   14:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821CA3F0h case   14:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821CA3F0h case   14:*/		return 0x821CA3F4;
		  /* 821CA3F4h */ case   15:  		/* stw R10, <#[R11 + 8]> */
		/* 821CA3F4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA3F4h case   15:*/		return 0x821CA3F8;
	}
	return 0x821CA3F8;
} // Block from 821CA3B8h-821CA3F8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CA3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA3F8);
		  /* 821CA3F8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CA3F8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CA3F8h case    0:*/		return 0x821CA3FC;
		  /* 821CA3FCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821CA3FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821CA3FCh case    1:*/		return 0x821CA400;
		  /* 821CA400h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA400h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA400h case    2:*/		return 0x821CA404;
		  /* 821CA404h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821CA404h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CA410;  }
		/* 821CA404h case    3:*/		return 0x821CA408;
		  /* 821CA408h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821CA408h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA408h case    4:*/		return 0x821CA40C;
		  /* 821CA40Ch */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821CA40Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CA3E4;  }
		/* 821CA40Ch case    5:*/		return 0x821CA410;
	}
	return 0x821CA410;
} // Block from 821CA3F8h-821CA410h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CA410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA410);
		  /* 821CA410h */ case    0:  		/* lwz R24, <#[R31 + 92]> */
		/* 821CA410h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x0000005C) );
		/* 821CA410h case    0:*/		return 0x821CA414;
		  /* 821CA414h */ case    1:  		/* rlwinm. R30, R30, 0, 24, 31 */
		/* 821CA414h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R30);
		/* 821CA414h case    1:*/		return 0x821CA418;
		  /* 821CA418h */ case    2:  		/* li R25, 1 */
		/* 821CA418h case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821CA418h case    2:*/		return 0x821CA41C;
		  /* 821CA41Ch */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 821CA41Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821CA440;  }
		/* 821CA41Ch case    3:*/		return 0x821CA420;
		  /* 821CA420h */ case    4:  		/* lwz R11, <#[R31 + 36]> */
		/* 821CA420h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821CA420h case    4:*/		return 0x821CA424;
		  /* 821CA424h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CA424h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA424h case    5:*/		return 0x821CA428;
		  /* 821CA428h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA428h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CA430;  }
		/* 821CA428h case    6:*/		return 0x821CA42C;
		  /* 821CA42Ch */ case    7:  		/* stw R25, <#[R31 + 36]> */
		/* 821CA42Ch case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000024) );
		/* 821CA42Ch case    7:*/		return 0x821CA430;
	}
	return 0x821CA430;
} // Block from 821CA410h-821CA430h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CA430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA430);
		  /* 821CA430h */ case    0:  		/* lwz R11, <#[R31 + 36]> */
		/* 821CA430h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821CA430h case    0:*/		return 0x821CA434;
		  /* 821CA434h */ case    1:  		/* addi R10, R11, 1 */
		/* 821CA434h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 821CA434h case    1:*/		return 0x821CA438;
		  /* 821CA438h */ case    2:  		/* stw R10, <#[R31 + 36]> */
		/* 821CA438h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 821CA438h case    2:*/		return 0x821CA43C;
		  /* 821CA43Ch */ case    3:  		/* stw R11, <#[R31 + 32]> */
		/* 821CA43Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821CA43Ch case    3:*/		return 0x821CA440;
	}
	return 0x821CA440;
} // Block from 821CA430h-821CA440h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CA440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA440);
		  /* 821CA440h */ case    0:  		/* mr R5, R26 */
		/* 821CA440h case    0:*/		regs.R5 = regs.R26;
		/* 821CA440h case    0:*/		return 0x821CA444;
		  /* 821CA444h */ case    1:  		/* mr R4, R29 */
		/* 821CA444h case    1:*/		regs.R4 = regs.R29;
		/* 821CA444h case    1:*/		return 0x821CA448;
		  /* 821CA448h */ case    2:  		/* mr R3, R31 */
		/* 821CA448h case    2:*/		regs.R3 = regs.R31;
		/* 821CA448h case    2:*/		return 0x821CA44C;
		  /* 821CA44Ch */ case    3:  		/* bl -18804 */
		/* 821CA44Ch case    3:*/		regs.LR = 0x821CA450; return 0x821C5AD8;
		/* 821CA44Ch case    3:*/		return 0x821CA450;
		  /* 821CA450h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821CA450h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CA450h case    4:*/		return 0x821CA454;
		  /* 821CA454h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821CA454h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CA460;  }
		/* 821CA454h case    5:*/		return 0x821CA458;
		  /* 821CA458h */ case    6:  		/* li R11, 0 */
		/* 821CA458h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CA458h case    6:*/		return 0x821CA45C;
		  /* 821CA45Ch */ case    7:  		/* stw R11, <#[R31 + 32]> */
		/* 821CA45Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821CA45Ch case    7:*/		return 0x821CA460;
	}
	return 0x821CA460;
} // Block from 821CA440h-821CA460h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CA460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA460);
		  /* 821CA460h */ case    0:  		/* li R6, 1 */
		/* 821CA460h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821CA460h case    0:*/		return 0x821CA464;
		  /* 821CA464h */ case    1:  		/* mr R5, R26 */
		/* 821CA464h case    1:*/		regs.R5 = regs.R26;
		/* 821CA464h case    1:*/		return 0x821CA468;
		  /* 821CA468h */ case    2:  		/* mr R4, R29 */
		/* 821CA468h case    2:*/		regs.R4 = regs.R29;
		/* 821CA468h case    2:*/		return 0x821CA46C;
		  /* 821CA46Ch */ case    3:  		/* mr R3, R31 */
		/* 821CA46Ch case    3:*/		regs.R3 = regs.R31;
		/* 821CA46Ch case    3:*/		return 0x821CA470;
		  /* 821CA470h */ case    4:  		/* bl -5176 */
		/* 821CA470h case    4:*/		regs.LR = 0x821CA474; return 0x821C9038;
		/* 821CA470h case    4:*/		return 0x821CA474;
		  /* 821CA474h */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CA474h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CA474h case    5:*/		return 0x821CA478;
		  /* 821CA478h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA478h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA478h case    6:*/		return 0x821CA47C;
		  /* 821CA47Ch */ case    7:  		/* bc 4, CR0_EQ, 360 */
		/* 821CA47Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821CA5E4;  }
		/* 821CA47Ch case    7:*/		return 0x821CA480;
		  /* 821CA480h */ case    8:  		/* mr R27, R11 */
		/* 821CA480h case    8:*/		regs.R27 = regs.R11;
		/* 821CA480h case    8:*/		return 0x821CA484;
		  /* 821CA484h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821CA484h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CA484h case    9:*/		return 0x821CA488;
		  /* 821CA488h */ case   10:  		/* bc 12, CR0_EQ, 348 */
		/* 821CA488h case   10:*/		if ( regs.CR[0].eq ) { return 0x821CA5E4;  }
		/* 821CA488h case   10:*/		return 0x821CA48C;
		  /* 821CA48Ch */ case   11:  		/* lwz R11, <#[R27 + 8]> */
		/* 821CA48Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821CA48Ch case   11:*/		return 0x821CA490;
		  /* 821CA490h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 821CA490h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CA490h case   12:*/		return 0x821CA494;
		  /* 821CA494h */ case   13:  		/* bc 4, CR6_EQ, 308 */
		/* 821CA494h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CA5C8;  }
		/* 821CA494h case   13:*/		return 0x821CA498;
		  /* 821CA498h */ case   14:  		/* lwz R11, <#[R31 + 4]> */
		/* 821CA498h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821CA498h case   14:*/		return 0x821CA49C;
		  /* 821CA49Ch */ case   15:  		/* lwz R7, <#[R27 + 80]> */
		/* 821CA49Ch case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000050) );
		/* 821CA49Ch case   15:*/		return 0x821CA4A0;
		  /* 821CA4A0h */ case   16:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CA4A0h case   16:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA4A0h case   16:*/		return 0x821CA4A4;
		  /* 821CA4A4h */ case   17:  		/* addic R10, R10, -1 */
		/* 821CA4A4h case   17:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CA4A4h case   17:*/		return 0x821CA4A8;
		  /* 821CA4A8h */ case   18:  		/* subfe R10, R10, R10 */
		/* 821CA4A8h case   18:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CA4A8h case   18:*/		return 0x821CA4AC;
		  /* 821CA4ACh */ case   19:  		/* and R11, R10, R11 */
		/* 821CA4ACh case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA4ACh case   19:*/		return 0x821CA4B0;
		  /* 821CA4B0h */ case   20:  		/* cmplw CR6, R7, R11 */
		/* 821CA4B0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R11);
		/* 821CA4B0h case   20:*/		return 0x821CA4B4;
		  /* 821CA4B4h */ case   21:  		/* bc 12, CR6_EQ, 276 */
		/* 821CA4B4h case   21:*/		if ( regs.CR[6].eq ) { return 0x821CA5C8;  }
		/* 821CA4B4h case   21:*/		return 0x821CA4B8;
		  /* 821CA4B8h */ case   22:  		/* lwz R9, <#[R7 + 52]> */
		/* 821CA4B8h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000034) );
		/* 821CA4B8h case   22:*/		return 0x821CA4BC;
		  /* 821CA4BCh */ case   23:  		/* cmplwi CR6, R9, 0 */
		/* 821CA4BCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821CA4BCh case   23:*/		return 0x821CA4C0;
		  /* 821CA4C0h */ case   24:  		/* bc 12, CR6_EQ, 264 */
		/* 821CA4C0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821CA5C8;  }
		/* 821CA4C0h case   24:*/		return 0x821CA4C4;
		  /* 821CA4C4h */ case   25:  		/* lwz R11, <#[R9 + 44]> */
		/* 821CA4C4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000002C) );
		/* 821CA4C4h case   25:*/		return 0x821CA4C8;
		  /* 821CA4C8h */ case   26:  		/* cmplw CR6, R11, R26 */
		/* 821CA4C8h case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821CA4C8h case   26:*/		return 0x821CA4CC;
		  /* 821CA4CCh */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 821CA4CCh case   27:*/		if ( regs.CR[6].eq ) { return 0x821CA4DC;  }
		/* 821CA4CCh case   27:*/		return 0x821CA4D0;
		  /* 821CA4D0h */ case   28:  		/* lwz R9, <#[R9 + 52]> */
		/* 821CA4D0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000034) );
		/* 821CA4D0h case   28:*/		return 0x821CA4D4;
		  /* 821CA4D4h */ case   29:  		/* cmplwi CR6, R9, 0 */
		/* 821CA4D4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821CA4D4h case   29:*/		return 0x821CA4D8;
		  /* 821CA4D8h */ case   30:  		/* bc 4, CR6_EQ, -20 */
		/* 821CA4D8h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821CA4C4;  }
		/* 821CA4D8h case   30:*/		return 0x821CA4DC;
	}
	return 0x821CA4DC;
} // Block from 821CA460h-821CA4DCh (31 instructions)

//////////////////////////////////////////////////////
// Block at 821CA4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA4DC);
		  /* 821CA4DCh */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 821CA4DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821CA4DCh case    0:*/		return 0x821CA4E0;
		  /* 821CA4E0h */ case    1:  		/* bc 12, CR6_EQ, 232 */
		/* 821CA4E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA5C8;  }
		/* 821CA4E0h case    1:*/		return 0x821CA4E4;
		  /* 821CA4E4h */ case    2:  		/* lwz R28, <#[R9 + 80]> */
		/* 821CA4E4h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R9 + 0x00000050) );
		/* 821CA4E4h case    2:*/		return 0x821CA4E8;
	}
	return 0x821CA4E8;
} // Block from 821CA4DCh-821CA4E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA4E8h
// Function '?ResolveIntegerOperations@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA4E8);
		  /* 821CA4E8h */ case    0:  		/* lwz R8, <#[R28 + 12]> */
		/* 821CA4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x0000000C) );
		/* 821CA4E8h case    0:*/		return 0x821CA4EC;
		  /* 821CA4ECh */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 821CA4ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821CA4ECh case    1:*/		return 0x821CA4F0;
		  /* 821CA4F0h */ case    2:  		/* bc 12, CR6_EQ, 200 */
		/* 821CA4F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821CA5B8;  }
		/* 821CA4F0h case    2:*/		return 0x821CA4F4;
		  /* 821CA4F4h */ case    3:  		/* lwz R29, <#[R8]> */
		/* 821CA4F4h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R8 + 0x00000000) );
		/* 821CA4F4h case    3:*/		return 0x821CA4F8;
		  /* 821CA4F8h */ case    4:  		/* lwz R11, <#[R29 + 44]> */
		/* 821CA4F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 821CA4F8h case    4:*/		return 0x821CA4FC;
		  /* 821CA4FCh */ case    5:  		/* cmplw CR6, R11, R26 */
		/* 821CA4FCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821CA4FCh case    5:*/		return 0x821CA500;
		  /* 821CA500h */ case    6:  		/* bc 12, CR6_EQ, 92 */
		/* 821CA500h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CA55C;  }
		/* 821CA500h case    6:*/		return 0x821CA504;
		  /* 821CA504h */ case    7:  		/* lwz R11, <#[R29 + 48]> */
		/* 821CA504h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821CA504h case    7:*/		return 0x821CA508;
		  /* 821CA508h */ case    8:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821CA508h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821CA508h case    8:*/		return 0x821CA50C;
		  /* 821CA50Ch */ case    9:  		/* cmplw CR6, R11, R24 */
		/* 821CA50Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821CA50Ch case    9:*/		return 0x821CA510;
		  /* 821CA510h */ case   10:  		/* bc 4, CR6_LT, 76 */
		/* 821CA510h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821CA55C;  }
		/* 821CA510h case   10:*/		return 0x821CA514;
		  /* 821CA514h */ case   11:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 821CA514h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 821CA514h case   11:*/		return 0x821CA518;
		  /* 821CA518h */ case   12:  		/* lwz R6, <#[R9 + 40]> */
		/* 821CA518h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000028) );
		/* 821CA518h case   12:*/		return 0x821CA51C;
		  /* 821CA51Ch */ case   13:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821CA51Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821CA51Ch case   13:*/		return 0x821CA520;
		  /* 821CA520h */ case   14:  		/* addi R10, R10, 1 */
		/* 821CA520h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CA520h case   14:*/		return 0x821CA524;
		  /* 821CA524h */ case   15:  		/* slw R5, R25, R5 */
		/* 821CA524h case   15:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R25,regs.R5);
		/* 821CA524h case   15:*/		return 0x821CA528;
		  /* 821CA528h */ case   16:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CA528h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CA528h case   16:*/		return 0x821CA52C;
		  /* 821CA52Ch */ case   17:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821CA52Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821CA52Ch case   17:*/		return 0x821CA530;
		  /* 821CA530h */ case   18:  		/* and. R10, R10, R5 */
		/* 821CA530h case   18:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R5);
		/* 821CA530h case   18:*/		return 0x821CA534;
		  /* 821CA534h */ case   19:  		/* bc 4, CR0_EQ, 40 */
		/* 821CA534h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821CA55C;  }
		/* 821CA534h case   19:*/		return 0x821CA538;
		  /* 821CA538h */ case   20:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 821CA538h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 821CA538h case   20:*/		return 0x821CA53C;
		  /* 821CA53Ch */ case   21:  		/* lwz R6, <#[R7 + 40]> */
		/* 821CA53Ch case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000028) );
		/* 821CA53Ch case   21:*/		return 0x821CA540;
		  /* 821CA540h */ case   22:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821CA540h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821CA540h case   22:*/		return 0x821CA544;
		  /* 821CA544h */ case   23:  		/* addi R10, R10, 1 */
		/* 821CA544h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CA544h case   23:*/		return 0x821CA548;
		  /* 821CA548h */ case   24:  		/* slw R11, R25, R11 */
		/* 821CA548h case   24:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821CA548h case   24:*/		return 0x821CA54C;
		  /* 821CA54Ch */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821CA54Ch case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821CA54Ch case   25:*/		return 0x821CA550;
		  /* 821CA550h */ case   26:  		/* lwzx R10, <#[R10 + R6]> */
		/* 821CA550h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 821CA550h case   26:*/		return 0x821CA554;
		  /* 821CA554h */ case   27:  		/* and. R11, R10, R11 */
		/* 821CA554h case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA554h case   27:*/		return 0x821CA558;
		  /* 821CA558h */ case   28:  		/* bc 4, CR0_EQ, 12 */
		/* 821CA558h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821CA564;  }
		/* 821CA558h case   28:*/		return 0x821CA55C;
	}
	return 0x821CA55C;
} // Block from 821CA4E8h-821CA55Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CA55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA55C);
		  /* 821CA55Ch */ case    0:  		/* lwz R8, <#[R8 + 8]> */
		/* 821CA55Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821CA55Ch case    0:*/		return 0x821CA560;
		  /* 821CA560h */ case    1:  		/* b -116 */
		/* 821CA560h case    1:*/		return 0x821CA4EC;
		/* 821CA560h case    1:*/		return 0x821CA564;
	}
	return 0x821CA564;
} // Block from 821CA55Ch-821CA564h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA564);
		  /* 821CA564h */ case    0:  		/* mr R5, R31 */
		/* 821CA564h case    0:*/		regs.R5 = regs.R31;
		/* 821CA564h case    0:*/		return 0x821CA568;
		  /* 821CA568h */ case    1:  		/* mr R4, R29 */
		/* 821CA568h case    1:*/		regs.R4 = regs.R29;
		/* 821CA568h case    1:*/		return 0x821CA56C;
		  /* 821CA56Ch */ case    2:  		/* mr R3, R28 */
		/* 821CA56Ch case    2:*/		regs.R3 = regs.R28;
		/* 821CA56Ch case    2:*/		return 0x821CA570;
		  /* 821CA570h */ case    3:  		/* bl 414712 */
		/* 821CA570h case    3:*/		regs.LR = 0x821CA574; return 0x8222F968;
		/* 821CA570h case    3:*/		return 0x821CA574;
		  /* 821CA574h */ case    4:  		/* mr R4, R28 */
		/* 821CA574h case    4:*/		regs.R4 = regs.R28;
		/* 821CA574h case    4:*/		return 0x821CA578;
		  /* 821CA578h */ case    5:  		/* mr R3, R31 */
		/* 821CA578h case    5:*/		regs.R3 = regs.R31;
		/* 821CA578h case    5:*/		return 0x821CA57C;
		  /* 821CA57Ch */ case    6:  		/* bl -335116 */
		/* 821CA57Ch case    6:*/		regs.LR = 0x821CA580; return 0x82178870;
		/* 821CA57Ch case    6:*/		return 0x821CA580;
		  /* 821CA580h */ case    7:  		/* or. R30, R3, R3 */
		/* 821CA580h case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821CA580h case    7:*/		return 0x821CA584;
		  /* 821CA584h */ case    8:  		/* bc 12, CR0_EQ, 52 */
		/* 821CA584h case    8:*/		if ( regs.CR[0].eq ) { return 0x821CA5B8;  }
		/* 821CA584h case    8:*/		return 0x821CA588;
		  /* 821CA588h */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CA588h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA588h case    9:*/		return 0x821CA58C;
		  /* 821CA58Ch */ case   10:  		/* mr R3, R31 */
		/* 821CA58Ch case   10:*/		regs.R3 = regs.R31;
		/* 821CA58Ch case   10:*/		return 0x821CA590;
		  /* 821CA590h */ case   11:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821CA590h case   11:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821CA590h case   11:*/		return 0x821CA594;
		  /* 821CA594h */ case   12:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821CA594h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821CA594h case   12:*/		return 0x821CA598;
		  /* 821CA598h */ case   13:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821CA598h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821CA598h case   13:*/		return 0x821CA59C;
		  /* 821CA59Ch */ case   14:  		/* bl -418156 */
		/* 821CA59Ch case   14:*/		regs.LR = 0x821CA5A0; return 0x82164430;
		/* 821CA59Ch case   14:*/		return 0x821CA5A0;
		  /* 821CA5A0h */ case   15:  		/* addi R11, R30, -16 */
		/* 821CA5A0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821CA5A0h case   15:*/		return 0x821CA5A4;
		  /* 821CA5A4h */ case   16:  		/* add R11, R3, R11 */
		/* 821CA5A4h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821CA5A4h case   16:*/		return 0x821CA5A8;
		  /* 821CA5A8h */ case   17:  		/* lwz R10, <#[R11]> */
		/* 821CA5A8h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821CA5A8h case   17:*/		return 0x821CA5AC;
		  /* 821CA5ACh */ case   18:  		/* cmplw CR6, R10, R29 */
		/* 821CA5ACh case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821CA5ACh case   18:*/		return 0x821CA5B0;
		  /* 821CA5B0h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA5B0h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821CA5B8;  }
		/* 821CA5B0h case   19:*/		return 0x821CA5B4;
		  /* 821CA5B4h */ case   20:  		/* stw R27, <#[R11]> */
		/* 821CA5B4h case   20:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821CA5B4h case   20:*/		return 0x821CA5B8;
	}
	return 0x821CA5B8;
} // Block from 821CA564h-821CA5B8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CA5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA5B8);
		  /* 821CA5B8h */ case    0:  		/* mr R5, R31 */
		/* 821CA5B8h case    0:*/		regs.R5 = regs.R31;
		/* 821CA5B8h case    0:*/		return 0x821CA5BC;
		  /* 821CA5BCh */ case    1:  		/* mr R4, R27 */
		/* 821CA5BCh case    1:*/		regs.R4 = regs.R27;
		/* 821CA5BCh case    1:*/		return 0x821CA5C0;
		  /* 821CA5C0h */ case    2:  		/* mr R3, R28 */
		/* 821CA5C0h case    2:*/		regs.R3 = regs.R28;
		/* 821CA5C0h case    2:*/		return 0x821CA5C4;
		  /* 821CA5C4h */ case    3:  		/* bl 415004 */
		/* 821CA5C4h case    3:*/		regs.LR = 0x821CA5C8; return 0x8222FAE0;
		/* 821CA5C4h case    3:*/		return 0x821CA5C8;
	}
	return 0x821CA5C8;
} // Block from 821CA5B8h-821CA5C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CA5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA5C8);
		  /* 821CA5C8h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821CA5C8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821CA5C8h case    0:*/		return 0x821CA5CC;
		  /* 821CA5CCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821CA5CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821CA5CCh case    1:*/		return 0x821CA5D0;
		  /* 821CA5D0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA5D0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA5D0h case    2:*/		return 0x821CA5D4;
		  /* 821CA5D4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821CA5D4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CA5E4;  }
		/* 821CA5D4h case    3:*/		return 0x821CA5D8;
		  /* 821CA5D8h */ case    4:  		/* mr R27, R11 */
		/* 821CA5D8h case    4:*/		regs.R27 = regs.R11;
		/* 821CA5D8h case    4:*/		return 0x821CA5DC;
		  /* 821CA5DCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821CA5DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA5DCh case    5:*/		return 0x821CA5E0;
		  /* 821CA5E0h */ case    6:  		/* bc 4, CR6_EQ, -340 */
		/* 821CA5E0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CA48C;  }
		/* 821CA5E0h case    6:*/		return 0x821CA5E4;
	}
	return 0x821CA5E4;
} // Block from 821CA5C8h-821CA5E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CA5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA5E4);
		  /* 821CA5E4h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 821CA5E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821CA5E4h case    0:*/		return 0x821CA5E8;
		  /* 821CA5E8h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821CA5E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA61C;  }
		/* 821CA5E8h case    1:*/		return 0x821CA5EC;
		  /* 821CA5ECh */ case    2:  		/* lwz R11, <#[R23 + 52]> */
		/* 821CA5ECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000034) );
		/* 821CA5ECh case    2:*/		return 0x821CA5F0;
		  /* 821CA5F0h */ case    3:  		/* mr R10, R23 */
		/* 821CA5F0h case    3:*/		regs.R10 = regs.R23;
		/* 821CA5F0h case    3:*/		return 0x821CA5F4;
		  /* 821CA5F4h */ case    4:  		/* b 24 */
		/* 821CA5F4h case    4:*/		return 0x821CA60C;
		/* 821CA5F4h case    4:*/		return 0x821CA5F8;
		  /* 821CA5F8h */ case    5:  		/* lwz R9, <#[R11 + 44]> */
		/* 821CA5F8h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CA5F8h case    5:*/		return 0x821CA5FC;
		  /* 821CA5FCh */ case    6:  		/* cmplw CR6, R9, R26 */
		/* 821CA5FCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821CA5FCh case    6:*/		return 0x821CA600;
		  /* 821CA600h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA600h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CA608;  }
		/* 821CA600h case    7:*/		return 0x821CA604;
		  /* 821CA604h */ case    8:  		/* mr R10, R11 */
		/* 821CA604h case    8:*/		regs.R10 = regs.R11;
		/* 821CA604h case    8:*/		return 0x821CA608;
	}
	return 0x821CA608;
} // Block from 821CA5E4h-821CA608h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CA608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA608);
		  /* 821CA608h */ case    0:  		/* lwz R11, <#[R11 + 52]> */
		/* 821CA608h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821CA608h case    0:*/		return 0x821CA60C;
	}
	return 0x821CA60C;
} // Block from 821CA608h-821CA60Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA60Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA60C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA60C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA60C);
		  /* 821CA60Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CA60Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA60Ch case    0:*/		return 0x821CA610;
		  /* 821CA610h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 821CA610h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CA5F8;  }
		/* 821CA610h case    1:*/		return 0x821CA614;
		  /* 821CA614h */ case    2:  		/* lwz R11, <#[R10 + 80]> */
		/* 821CA614h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000050) );
		/* 821CA614h case    2:*/		return 0x821CA618;
		  /* 821CA618h */ case    3:  		/* stw R11, <#[R22]> */
		/* 821CA618h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821CA618h case    3:*/		return 0x821CA61C;
	}
	return 0x821CA61C;
} // Block from 821CA60Ch-821CA61Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CA61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA61C);
		  /* 821CA61Ch */ case    0:  		/* stw R26, <#[R21]> */
		/* 821CA61Ch case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R21 + 0x00000000) );
		/* 821CA61Ch case    0:*/		return 0x821CA620;
		  /* 821CA620h */ case    1:  		/* addi R1, R1, 176 */
		/* 821CA620h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821CA620h case    1:*/		return 0x821CA624;
		  /* 821CA624h */ case    2:  		/* b -1282968 */
		/* 821CA624h case    2:*/		return 0x8209128C;
		/* 821CA624h case    2:*/		return 0x821CA628;
	}
	return 0x821CA628;
} // Block from 821CA61Ch-821CA628h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA628);
		  /* 821CA628h */ case    0:  		/* mfspr R12, LR */
		/* 821CA628h case    0:*/		regs.R12 = regs.LR;
		/* 821CA628h case    0:*/		return 0x821CA62C;
		  /* 821CA62Ch */ case    1:  		/* bl -1283024 */
		/* 821CA62Ch case    1:*/		regs.LR = 0x821CA630; return 0x8209125C;
		/* 821CA62Ch case    1:*/		return 0x821CA630;
		  /* 821CA630h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CA630h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CA630h case    2:*/		return 0x821CA634;
		  /* 821CA634h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 821CA634h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821CA634h case    3:*/		return 0x821CA638;
		  /* 821CA638h */ case    4:  		/* li R29, 0 */
		/* 821CA638h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821CA638h case    4:*/		return 0x821CA63C;
		  /* 821CA63Ch */ case    5:  		/* lwz R10, <#[R5 + 4]> */
		/* 821CA63Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 821CA63Ch case    5:*/		return 0x821CA640;
		  /* 821CA640h */ case    6:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CA640h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CA640h case    6:*/		return 0x821CA644;
		  /* 821CA644h */ case    7:  		/* stw R29, <#[R1 + 88]> */
		/* 821CA644h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000058) );
		/* 821CA644h case    7:*/		return 0x821CA648;
		  /* 821CA648h */ case    8:  		/* rlwinm R8, R10, 0, 31, 31 */
		/* 821CA648h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821CA648h case    8:*/		return 0x821CA64C;
		  /* 821CA64Ch */ case    9:  		/* stw R29, <#[R1 + 104]> */
		/* 821CA64Ch case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 821CA64Ch case    9:*/		return 0x821CA650;
		  /* 821CA650h */ case   10:  		/* addic R9, R9, -1 */
		/* 821CA650h case   10:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CA650h case   10:*/		return 0x821CA654;
		  /* 821CA654h */ case   11:  		/* stw R4, <#[R1 + 80]> */
		/* 821CA654h case   11:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821CA654h case   11:*/		return 0x821CA658;
		  /* 821CA658h */ case   12:  		/* stw R5, <#[R1 + 96]> */
		/* 821CA658h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 821CA658h case   12:*/		return 0x821CA65C;
		  /* 821CA65Ch */ case   13:  		/* mr R31, R29 */
		/* 821CA65Ch case   13:*/		regs.R31 = regs.R29;
		/* 821CA65Ch case   13:*/		return 0x821CA660;
		  /* 821CA660h */ case   14:  		/* subfe R9, R9, R9 */
		/* 821CA660h case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CA660h case   14:*/		return 0x821CA664;
		  /* 821CA664h */ case   15:  		/* addic R8, R8, -1 */
		/* 821CA664h case   15:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821CA664h case   15:*/		return 0x821CA668;
		  /* 821CA668h */ case   16:  		/* and R11, R9, R11 */
		/* 821CA668h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CA668h case   16:*/		return 0x821CA66C;
		  /* 821CA66Ch */ case   17:  		/* subfe R9, R8, R8 */
		/* 821CA66Ch case   17:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 821CA66Ch case   17:*/		return 0x821CA670;
		  /* 821CA670h */ case   18:  		/* stw R11, <#[R1 + 84]> */
		/* 821CA670h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CA670h case   18:*/		return 0x821CA674;
		  /* 821CA674h */ case   19:  		/* and R10, R9, R10 */
		/* 821CA674h case   19:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821CA674h case   19:*/		return 0x821CA678;
		  /* 821CA678h */ case   20:  		/* stw R10, <#[R1 + 100]> */
		/* 821CA678h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821CA678h case   20:*/		return 0x821CA67C;
		  /* 821CA67Ch */ case   21:  		/* b 12 */
		/* 821CA67Ch case   21:*/		return 0x821CA688;
		/* 821CA67Ch case   21:*/		return 0x821CA680;
		  /* 821CA680h */ case   22:  		/* lwz R10, <#[R1 + 100]> */
		/* 821CA680h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821CA680h case   22:*/		return 0x821CA684;
		  /* 821CA684h */ case   23:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CA684h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CA684h case   23:*/		return 0x821CA688;
	}
	return 0x821CA688;
} // Block from 821CA628h-821CA688h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821CA688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA688);
		  /* 821CA688h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CA688h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA688h case    0:*/		return 0x821CA68C;
		  /* 821CA68Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CA68Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA6A4;  }
		/* 821CA68Ch case    1:*/		return 0x821CA690;
		  /* 821CA690h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821CA690h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA690h case    2:*/		return 0x821CA694;
		  /* 821CA694h */ case    3:  		/* lwz R8, <#[R1 + 88]> */
		/* 821CA694h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821CA694h case    3:*/		return 0x821CA698;
		  /* 821CA698h */ case    4:  		/* cmplw CR6, R8, R9 */
		/* 821CA698h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821CA698h case    4:*/		return 0x821CA69C;
		  /* 821CA69Ch */ case    5:  		/* mr R9, R29 */
		/* 821CA69Ch case    5:*/		regs.R9 = regs.R29;
		/* 821CA69Ch case    5:*/		return 0x821CA6A0;
		  /* 821CA6A0h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA6A0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CA6A8;  }
		/* 821CA6A0h case    6:*/		return 0x821CA6A4;
	}
	return 0x821CA6A4;
} // Block from 821CA688h-821CA6A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CA6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA6A4);
		  /* 821CA6A4h */ case    0:  		/* li R9, 1 */
		/* 821CA6A4h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821CA6A4h case    0:*/		return 0x821CA6A8;
	}
	return 0x821CA6A8;
} // Block from 821CA6A4h-821CA6A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA6A8);
		  /* 821CA6A8h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821CA6A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821CA6A8h case    0:*/		return 0x821CA6AC;
		  /* 821CA6ACh */ case    1:  		/* bc 4, CR0_EQ, 252 */
		/* 821CA6ACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CA7A8;  }
		/* 821CA6ACh case    1:*/		return 0x821CA6B0;
		  /* 821CA6B0h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821CA6B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CA6B0h case    2:*/		return 0x821CA6B4;
		  /* 821CA6B4h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821CA6B4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CA6CC;  }
		/* 821CA6B4h case    3:*/		return 0x821CA6B8;
		  /* 821CA6B8h */ case    4:  		/* lwz R9, <#[R10 + 8]> */
		/* 821CA6B8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821CA6B8h case    4:*/		return 0x821CA6BC;
		  /* 821CA6BCh */ case    5:  		/* lwz R8, <#[R1 + 104]> */
		/* 821CA6BCh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000068) );
		/* 821CA6BCh case    5:*/		return 0x821CA6C0;
		  /* 821CA6C0h */ case    6:  		/* cmplw CR6, R8, R9 */
		/* 821CA6C0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821CA6C0h case    6:*/		return 0x821CA6C4;
		  /* 821CA6C4h */ case    7:  		/* mr R9, R29 */
		/* 821CA6C4h case    7:*/		regs.R9 = regs.R29;
		/* 821CA6C4h case    7:*/		return 0x821CA6C8;
		  /* 821CA6C8h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA6C8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CA6D0;  }
		/* 821CA6C8h case    8:*/		return 0x821CA6CC;
	}
	return 0x821CA6CC;
} // Block from 821CA6A8h-821CA6CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CA6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA6CC);
		  /* 821CA6CCh */ case    0:  		/* li R9, 1 */
		/* 821CA6CCh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821CA6CCh case    0:*/		return 0x821CA6D0;
	}
	return 0x821CA6D0;
} // Block from 821CA6CCh-821CA6D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA6D0);
		  /* 821CA6D0h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821CA6D0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821CA6D0h case    0:*/		return 0x821CA6D4;
		  /* 821CA6D4h */ case    1:  		/* bc 4, CR0_EQ, 212 */
		/* 821CA6D4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CA7A8;  }
		/* 821CA6D4h case    1:*/		return 0x821CA6D8;
		  /* 821CA6D8h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CA6D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CA6D8h case    2:*/		return 0x821CA6DC;
		  /* 821CA6DCh */ case    3:  		/* bl -39212 */
		/* 821CA6DCh case    3:*/		regs.LR = 0x821CA6E0; return 0x821C0DB0;
		/* 821CA6DCh case    3:*/		return 0x821CA6E0;
		  /* 821CA6E0h */ case    4:  		/* mr R30, R3 */
		/* 821CA6E0h case    4:*/		regs.R30 = regs.R3;
		/* 821CA6E0h case    4:*/		return 0x821CA6E4;
		  /* 821CA6E4h */ case    5:  		/* addi R3, R1, 96 */
		/* 821CA6E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821CA6E4h case    5:*/		return 0x821CA6E8;
		  /* 821CA6E8h */ case    6:  		/* bl -39224 */
		/* 821CA6E8h case    6:*/		regs.LR = 0x821CA6EC; return 0x821C0DB0;
		/* 821CA6E8h case    6:*/		return 0x821CA6EC;
		  /* 821CA6ECh */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821CA6ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821CA6ECh case    7:*/		return 0x821CA6F0;
		  /* 821CA6F0h */ case    8:  		/* lwz R10, <#[R3]> */
		/* 821CA6F0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CA6F0h case    8:*/		return 0x821CA6F4;
		  /* 821CA6F4h */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821CA6F4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CA6F4h case    9:*/		return 0x821CA6F8;
		  /* 821CA6F8h */ case   10:  		/* bc 4, CR6_EQ, 168 */
		/* 821CA6F8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CA7A0;  }
		/* 821CA6F8h case   10:*/		return 0x821CA6FC;
		  /* 821CA6FCh */ case   11:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CA6FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CA6FCh case   11:*/		return 0x821CA700;
		  /* 821CA700h */ case   12:  		/* lwz R10, <#[R3 + 4]> */
		/* 821CA700h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821CA700h case   12:*/		return 0x821CA704;
		  /* 821CA704h */ case   13:  		/* cmpw CR6, R11, R10 */
		/* 821CA704h case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CA704h case   13:*/		return 0x821CA708;
		  /* 821CA708h */ case   14:  		/* bc 4, CR6_EQ, 152 */
		/* 821CA708h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CA7A0;  }
		/* 821CA708h case   14:*/		return 0x821CA70C;
		  /* 821CA70Ch */ case   15:  		/* lwz R8, <#[R30 + 8]> */
		/* 821CA70Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA70Ch case   15:*/		return 0x821CA710;
		  /* 821CA710h */ case   16:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CA710h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CA710h case   16:*/		return 0x821CA714;
		  /* 821CA714h */ case   17:  		/* cmplw CR6, R8, R10 */
		/* 821CA714h case   17:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821CA714h case   17:*/		return 0x821CA718;
		  /* 821CA718h */ case   18:  		/* bc 12, CR6_EQ, -152 */
		/* 821CA718h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CA680;  }
		/* 821CA718h case   18:*/		return 0x821CA71C;
		  /* 821CA71Ch */ case   19:  		/* cmplwi CR6, R31, 0 */
		/* 821CA71Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CA71Ch case   19:*/		return 0x821CA720;
		  /* 821CA720h */ case   20:  		/* bc 4, CR6_EQ, 128 */
		/* 821CA720h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821CA7A0;  }
		/* 821CA720h case   20:*/		return 0x821CA724;
		  /* 821CA724h */ case   21:  		/* rlwinm. R7, R8, 0, 29, 29 */
		/* 821CA724h case   21:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R8);
		/* 821CA724h case   21:*/		return 0x821CA728;
		  /* 821CA728h */ case   22:  		/* li R11, 4 */
		/* 821CA728h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821CA728h case   22:*/		return 0x821CA72C;
		  /* 821CA72Ch */ case   23:  		/* mr R9, R8 */
		/* 821CA72Ch case   23:*/		regs.R9 = regs.R8;
		/* 821CA72Ch case   23:*/		return 0x821CA730;
		  /* 821CA730h */ case   24:  		/* bc 12, CR0_EQ, 12 */
		/* 821CA730h case   24:*/		if ( regs.CR[0].eq ) { return 0x821CA73C;  }
		/* 821CA730h case   24:*/		return 0x821CA734;
		  /* 821CA734h */ case   25:  		/* addi R9, R9, -4 */
		/* 821CA734h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 821CA734h case   25:*/		return 0x821CA738;
		  /* 821CA738h */ case   26:  		/* mr R11, R29 */
		/* 821CA738h case   26:*/		regs.R11 = regs.R29;
		/* 821CA738h case   26:*/		return 0x821CA73C;
	}
	return 0x821CA73C;
} // Block from 821CA6D0h-821CA73Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821CA73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA73C);
		  /* 821CA73Ch */ case    0:  		/* rlwinm. R7, R9, 0, 31, 31 */
		/* 821CA73Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R9);
		/* 821CA73Ch case    0:*/		return 0x821CA740;
		  /* 821CA740h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CA740h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CA750;  }
		/* 821CA740h case    1:*/		return 0x821CA744;
		  /* 821CA744h */ case    2:  		/* rlwinm. R7, R11, 0, 30, 30 */
		/* 821CA744h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R11);
		/* 821CA744h case    2:*/		return 0x821CA748;
		  /* 821CA748h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CA748h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CA750;  }
		/* 821CA748h case    3:*/		return 0x821CA74C;
		  /* 821CA74Ch */ case    4:  		/* addi R11, R11, -2 */
		/* 821CA74Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821CA74Ch case    4:*/		return 0x821CA750;
	}
	return 0x821CA750;
} // Block from 821CA73Ch-821CA750h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA750);
		  /* 821CA750h */ case    0:  		/* or R11, R9, R11 */
		/* 821CA750h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CA750h case    0:*/		return 0x821CA754;
		  /* 821CA754h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 821CA754h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CA754h case    1:*/		return 0x821CA758;
		  /* 821CA758h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821CA758h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CA764;  }
		/* 821CA758h case    2:*/		return 0x821CA75C;
		  /* 821CA75Ch */ case    3:  		/* mr R31, R3 */
		/* 821CA75Ch case    3:*/		regs.R31 = regs.R3;
		/* 821CA75Ch case    3:*/		return 0x821CA760;
		  /* 821CA760h */ case    4:  		/* b -224 */
		/* 821CA760h case    4:*/		return 0x821CA680;
		/* 821CA760h case    4:*/		return 0x821CA764;
	}
	return 0x821CA764;
} // Block from 821CA750h-821CA764h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA764);
		  /* 821CA764h */ case    0:  		/* rlwinm. R9, R10, 0, 29, 29 */
		/* 821CA764h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R10);
		/* 821CA764h case    0:*/		return 0x821CA768;
		  /* 821CA768h */ case    1:  		/* li R11, 4 */
		/* 821CA768h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 821CA768h case    1:*/		return 0x821CA76C;
		  /* 821CA76Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CA76Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821CA778;  }
		/* 821CA76Ch case    2:*/		return 0x821CA770;
		  /* 821CA770h */ case    3:  		/* addi R10, R10, -4 */
		/* 821CA770h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821CA770h case    3:*/		return 0x821CA774;
		  /* 821CA774h */ case    4:  		/* mr R11, R29 */
		/* 821CA774h case    4:*/		regs.R11 = regs.R29;
		/* 821CA774h case    4:*/		return 0x821CA778;
	}
	return 0x821CA778;
} // Block from 821CA764h-821CA778h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA778);
		  /* 821CA778h */ case    0:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821CA778h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821CA778h case    0:*/		return 0x821CA77C;
		  /* 821CA77Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CA77Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821CA78C;  }
		/* 821CA77Ch case    1:*/		return 0x821CA780;
		  /* 821CA780h */ case    2:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821CA780h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821CA780h case    2:*/		return 0x821CA784;
		  /* 821CA784h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CA784h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CA78C;  }
		/* 821CA784h case    3:*/		return 0x821CA788;
		  /* 821CA788h */ case    4:  		/* addi R11, R11, -2 */
		/* 821CA788h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821CA788h case    4:*/		return 0x821CA78C;
	}
	return 0x821CA78C;
} // Block from 821CA778h-821CA78Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA78C);
		  /* 821CA78Ch */ case    0:  		/* or R11, R10, R11 */
		/* 821CA78Ch case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CA78Ch case    0:*/		return 0x821CA790;
		  /* 821CA790h */ case    1:  		/* cmplw CR6, R11, R8 */
		/* 821CA790h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821CA790h case    1:*/		return 0x821CA794;
		  /* 821CA794h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821CA794h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CA7A0;  }
		/* 821CA794h case    2:*/		return 0x821CA798;
		  /* 821CA798h */ case    3:  		/* mr R31, R30 */
		/* 821CA798h case    3:*/		regs.R31 = regs.R30;
		/* 821CA798h case    3:*/		return 0x821CA79C;
		  /* 821CA79Ch */ case    4:  		/* b -284 */
		/* 821CA79Ch case    4:*/		return 0x821CA680;
		/* 821CA79Ch case    4:*/		return 0x821CA7A0;
	}
	return 0x821CA7A0;
} // Block from 821CA78Ch-821CA7A0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7A0);
		  /* 821CA7A0h */ case    0:  		/* li R3, 0 */
		/* 821CA7A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CA7A0h case    0:*/		return 0x821CA7A4;
		  /* 821CA7A4h */ case    1:  		/* b 104 */
		/* 821CA7A4h case    1:*/		return 0x821CA80C;
		/* 821CA7A4h case    1:*/		return 0x821CA7A8;
	}
	return 0x821CA7A8;
} // Block from 821CA7A0h-821CA7A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7A8);
		  /* 821CA7A8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821CA7A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821CA7A8h case    0:*/		return 0x821CA7AC;
		  /* 821CA7ACh */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821CA7ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA804;  }
		/* 821CA7ACh case    1:*/		return 0x821CA7B0;
		  /* 821CA7B0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821CA7B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA7B0h case    2:*/		return 0x821CA7B4;
		  /* 821CA7B4h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821CA7B4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CA7CC;  }
		/* 821CA7B4h case    3:*/		return 0x821CA7B8;
		  /* 821CA7B8h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CA7B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA7B8h case    4:*/		return 0x821CA7BC;
		  /* 821CA7BCh */ case    5:  		/* lwz R9, <#[R1 + 88]> */
		/* 821CA7BCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821CA7BCh case    5:*/		return 0x821CA7C0;
		  /* 821CA7C0h */ case    6:  		/* cmplw CR6, R9, R11 */
		/* 821CA7C0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821CA7C0h case    6:*/		return 0x821CA7C4;
		  /* 821CA7C4h */ case    7:  		/* mr R11, R29 */
		/* 821CA7C4h case    7:*/		regs.R11 = regs.R29;
		/* 821CA7C4h case    7:*/		return 0x821CA7C8;
		  /* 821CA7C8h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA7C8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CA7D0;  }
		/* 821CA7C8h case    8:*/		return 0x821CA7CC;
	}
	return 0x821CA7CC;
} // Block from 821CA7A8h-821CA7CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7CC);
		  /* 821CA7CCh */ case    0:  		/* li R11, 1 */
		/* 821CA7CCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA7CCh case    0:*/		return 0x821CA7D0;
	}
	return 0x821CA7D0;
} // Block from 821CA7CCh-821CA7D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7D0);
		  /* 821CA7D0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CA7D0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CA7D0h case    0:*/		return 0x821CA7D4;
		  /* 821CA7D4h */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821CA7D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CA804;  }
		/* 821CA7D4h case    1:*/		return 0x821CA7D8;
		  /* 821CA7D8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821CA7D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CA7D8h case    2:*/		return 0x821CA7DC;
		  /* 821CA7DCh */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821CA7DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821CA7F4;  }
		/* 821CA7DCh case    3:*/		return 0x821CA7E0;
		  /* 821CA7E0h */ case    4:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CA7E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CA7E0h case    4:*/		return 0x821CA7E4;
		  /* 821CA7E4h */ case    5:  		/* lwz R10, <#[R1 + 104]> */
		/* 821CA7E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 821CA7E4h case    5:*/		return 0x821CA7E8;
		  /* 821CA7E8h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821CA7E8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CA7E8h case    6:*/		return 0x821CA7EC;
		  /* 821CA7ECh */ case    7:  		/* mr R11, R29 */
		/* 821CA7ECh case    7:*/		regs.R11 = regs.R29;
		/* 821CA7ECh case    7:*/		return 0x821CA7F0;
		  /* 821CA7F0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA7F0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CA7F8;  }
		/* 821CA7F0h case    8:*/		return 0x821CA7F4;
	}
	return 0x821CA7F4;
} // Block from 821CA7D0h-821CA7F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7F4);
		  /* 821CA7F4h */ case    0:  		/* li R11, 1 */
		/* 821CA7F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA7F4h case    0:*/		return 0x821CA7F8;
	}
	return 0x821CA7F8;
} // Block from 821CA7F4h-821CA7F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA7F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA7F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA7F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA7F8);
		  /* 821CA7F8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CA7F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CA7F8h case    0:*/		return 0x821CA7FC;
		  /* 821CA7FCh */ case    1:  		/* li R11, 1 */
		/* 821CA7FCh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA7FCh case    1:*/		return 0x821CA800;
		  /* 821CA800h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821CA800h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821CA808;  }
		/* 821CA800h case    2:*/		return 0x821CA804;
	}
	return 0x821CA804;
} // Block from 821CA7F8h-821CA804h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA804);
		  /* 821CA804h */ case    0:  		/* mr R11, R29 */
		/* 821CA804h case    0:*/		regs.R11 = regs.R29;
		/* 821CA804h case    0:*/		return 0x821CA808;
	}
	return 0x821CA808;
} // Block from 821CA804h-821CA808h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA808);
		  /* 821CA808h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 821CA808h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 821CA808h case    0:*/		return 0x821CA80C;
	}
	return 0x821CA80C;
} // Block from 821CA808h-821CA80Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA80C);
		  /* 821CA80Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 821CA80Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CA80Ch case    0:*/		return 0x821CA810;
		  /* 821CA810h */ case    1:  		/* b -1283428 */
		/* 821CA810h case    1:*/		return 0x820912AC;
		/* 821CA810h case    1:*/		return 0x821CA814;
		  /* 821CA814h */ case    2:  		/* nop */
		/* 821CA814h case    2:*/		cpu::op::nop();
		/* 821CA814h case    2:*/		return 0x821CA818;
	}
	return 0x821CA818;
} // Block from 821CA80Ch-821CA818h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA818);
		  /* 821CA818h */ case    0:  		/* mfspr R12, LR */
		/* 821CA818h case    0:*/		regs.R12 = regs.LR;
		/* 821CA818h case    0:*/		return 0x821CA81C;
		  /* 821CA81Ch */ case    1:  		/* bl -1283524 */
		/* 821CA81Ch case    1:*/		regs.LR = 0x821CA820; return 0x82091258;
		/* 821CA81Ch case    1:*/		return 0x821CA820;
		  /* 821CA820h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CA820h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CA820h case    2:*/		return 0x821CA824;
		  /* 821CA824h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 821CA824h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821CA824h case    3:*/		return 0x821CA828;
		  /* 821CA828h */ case    4:  		/* li R9, 0 */
		/* 821CA828h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821CA828h case    4:*/		return 0x821CA82C;
		  /* 821CA82Ch */ case    5:  		/* lwz R10, <#[R5 + 4]> */
		/* 821CA82Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 821CA82Ch case    5:*/		return 0x821CA830;
		  /* 821CA830h */ case    6:  		/* li R29, 0 */
		/* 821CA830h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821CA830h case    6:*/		return 0x821CA834;
		  /* 821CA834h */ case    7:  		/* rlwinm R8, R11, 0, 31, 31 */
		/* 821CA834h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R11);
		/* 821CA834h case    7:*/		return 0x821CA838;
		  /* 821CA838h */ case    8:  		/* stw R9, <#[R1 + 88]> */
		/* 821CA838h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 821CA838h case    8:*/		return 0x821CA83C;
		  /* 821CA83Ch */ case    9:  		/* rlwinm R7, R10, 0, 31, 31 */
		/* 821CA83Ch case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R10);
		/* 821CA83Ch case    9:*/		return 0x821CA840;
		  /* 821CA840h */ case   10:  		/* stw R29, <#[R1 + 104]> */
		/* 821CA840h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 821CA840h case   10:*/		return 0x821CA844;
		  /* 821CA844h */ case   11:  		/* addic R9, R8, -1 */
		/* 821CA844h case   11:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R8,0xFFFFFFFF);
		/* 821CA844h case   11:*/		return 0x821CA848;
		  /* 821CA848h */ case   12:  		/* stw R4, <#[R1 + 96]> */
		/* 821CA848h case   12:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 821CA848h case   12:*/		return 0x821CA84C;
		  /* 821CA84Ch */ case   13:  		/* mr R28, R6 */
		/* 821CA84Ch case   13:*/		regs.R28 = regs.R6;
		/* 821CA84Ch case   13:*/		return 0x821CA850;
		  /* 821CA850h */ case   14:  		/* stw R5, <#[R1 + 80]> */
		/* 821CA850h case   14:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821CA850h case   14:*/		return 0x821CA854;
		  /* 821CA854h */ case   15:  		/* subfe R9, R9, R9 */
		/* 821CA854h case   15:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CA854h case   15:*/		return 0x821CA858;
		  /* 821CA858h */ case   16:  		/* addic R8, R7, -1 */
		/* 821CA858h case   16:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R7,0xFFFFFFFF);
		/* 821CA858h case   16:*/		return 0x821CA85C;
		  /* 821CA85Ch */ case   17:  		/* and R30, R9, R11 */
		/* 821CA85Ch case   17:*/		cpu::op::and<0>(regs,&regs.R30,regs.R9,regs.R11);
		/* 821CA85Ch case   17:*/		return 0x821CA860;
		  /* 821CA860h */ case   18:  		/* subfe R9, R8, R8 */
		/* 821CA860h case   18:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R8,regs.R8);
		/* 821CA860h case   18:*/		return 0x821CA864;
		  /* 821CA864h */ case   19:  		/* stw R30, <#[R1 + 100]> */
		/* 821CA864h case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 821CA864h case   19:*/		return 0x821CA868;
		  /* 821CA868h */ case   20:  		/* and R11, R9, R10 */
		/* 821CA868h case   20:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821CA868h case   20:*/		return 0x821CA86C;
		  /* 821CA86Ch */ case   21:  		/* stw R11, <#[R1 + 84]> */
		/* 821CA86Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CA86Ch case   21:*/		return 0x821CA870;
		  /* 821CA870h */ case   22:  		/* b 8 */
		/* 821CA870h case   22:*/		return 0x821CA878;
		/* 821CA870h case   22:*/		return 0x821CA874;
		  /* 821CA874h */ case   23:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CA874h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CA874h case   23:*/		return 0x821CA878;
	}
	return 0x821CA878;
} // Block from 821CA818h-821CA878h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821CA878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA878);
		  /* 821CA878h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CA878h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA878h case    0:*/		return 0x821CA87C;
		  /* 821CA87Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CA87Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA894;  }
		/* 821CA87Ch case    1:*/		return 0x821CA880;
		  /* 821CA880h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CA880h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA880h case    2:*/		return 0x821CA884;
		  /* 821CA884h */ case    3:  		/* lwz R10, <#[R1 + 88]> */
		/* 821CA884h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821CA884h case    3:*/		return 0x821CA888;
		  /* 821CA888h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CA888h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CA888h case    4:*/		return 0x821CA88C;
		  /* 821CA88Ch */ case    5:  		/* li R11, 0 */
		/* 821CA88Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CA88Ch case    5:*/		return 0x821CA890;
		  /* 821CA890h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA890h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CA898;  }
		/* 821CA890h case    6:*/		return 0x821CA894;
	}
	return 0x821CA894;
} // Block from 821CA878h-821CA894h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CA894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA894);
		  /* 821CA894h */ case    0:  		/* li R11, 1 */
		/* 821CA894h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA894h case    0:*/		return 0x821CA898;
	}
	return 0x821CA898;
} // Block from 821CA894h-821CA898h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA898);
		  /* 821CA898h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CA898h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CA898h case    0:*/		return 0x821CA89C;
		  /* 821CA89Ch */ case    1:  		/* bc 4, CR0_EQ, 184 */
		/* 821CA89Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CA954;  }
		/* 821CA89Ch case    1:*/		return 0x821CA8A0;
		  /* 821CA8A0h */ case    2:  		/* addi R3, R1, 80 */
		/* 821CA8A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CA8A0h case    2:*/		return 0x821CA8A4;
		  /* 821CA8A4h */ case    3:  		/* bl -39668 */
		/* 821CA8A4h case    3:*/		regs.LR = 0x821CA8A8; return 0x821C0DB0;
		/* 821CA8A4h case    3:*/		return 0x821CA8A8;
		  /* 821CA8A8h */ case    4:  		/* mr R31, R3 */
		/* 821CA8A8h case    4:*/		regs.R31 = regs.R3;
		/* 821CA8A8h case    4:*/		return 0x821CA8AC;
		  /* 821CA8ACh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821CA8ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CA8ACh case    5:*/		return 0x821CA8B0;
		  /* 821CA8B0h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 821CA8B0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821CA8E4;  }
		/* 821CA8B0h case    6:*/		return 0x821CA8B4;
		  /* 821CA8B4h */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821CA8B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821CA8B4h case    7:*/		return 0x821CA8B8;
		  /* 821CA8B8h */ case    8:  		/* lwz R10, <#[R28]> */
		/* 821CA8B8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821CA8B8h case    8:*/		return 0x821CA8BC;
		  /* 821CA8BCh */ case    9:  		/* cmplw CR6, R11, R10 */
		/* 821CA8BCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CA8BCh case    9:*/		return 0x821CA8C0;
		  /* 821CA8C0h */ case   10:  		/* bc 4, CR6_EQ, 36 */
		/* 821CA8C0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821CA8E4;  }
		/* 821CA8C0h case   10:*/		return 0x821CA8C4;
		  /* 821CA8C4h */ case   11:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CA8C4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CA8C4h case   11:*/		return 0x821CA8C8;
		  /* 821CA8C8h */ case   12:  		/* lwz R10, <#[R28 + 4]> */
		/* 821CA8C8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 821CA8C8h case   12:*/		return 0x821CA8CC;
		  /* 821CA8CCh */ case   13:  		/* cmpw CR6, R11, R10 */
		/* 821CA8CCh case   13:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CA8CCh case   13:*/		return 0x821CA8D0;
		  /* 821CA8D0h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 821CA8D0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821CA8E4;  }
		/* 821CA8D0h case   14:*/		return 0x821CA8D4;
		  /* 821CA8D4h */ case   15:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CA8D4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CA8D4h case   15:*/		return 0x821CA8D8;
		  /* 821CA8D8h */ case   16:  		/* lwz R10, <#[R28 + 8]> */
		/* 821CA8D8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821CA8D8h case   16:*/		return 0x821CA8DC;
		  /* 821CA8DCh */ case   17:  		/* cmplw CR6, R11, R10 */
		/* 821CA8DCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CA8DCh case   17:*/		return 0x821CA8E0;
		  /* 821CA8E0h */ case   18:  		/* bc 12, CR6_EQ, -108 */
		/* 821CA8E0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821CA874;  }
		/* 821CA8E0h case   18:*/		return 0x821CA8E4;
	}
	return 0x821CA8E4;
} // Block from 821CA898h-821CA8E4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CA8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA8E4);
		  /* 821CA8E4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CA8E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CA8E4h case    0:*/		return 0x821CA8E8;
		  /* 821CA8E8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821CA8E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA8FC;  }
		/* 821CA8E8h case    1:*/		return 0x821CA8EC;
		  /* 821CA8ECh */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CA8ECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA8ECh case    2:*/		return 0x821CA8F0;
		  /* 821CA8F0h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821CA8F0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821CA8F0h case    3:*/		return 0x821CA8F4;
		  /* 821CA8F4h */ case    4:  		/* li R11, 0 */
		/* 821CA8F4h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CA8F4h case    4:*/		return 0x821CA8F8;
		  /* 821CA8F8h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA8F8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CA900;  }
		/* 821CA8F8h case    5:*/		return 0x821CA8FC;
	}
	return 0x821CA8FC;
} // Block from 821CA8E4h-821CA8FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CA8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA8FC);
		  /* 821CA8FCh */ case    0:  		/* li R11, 1 */
		/* 821CA8FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA8FCh case    0:*/		return 0x821CA900;
	}
	return 0x821CA900;
} // Block from 821CA8FCh-821CA900h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA900);
		  /* 821CA900h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CA900h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CA900h case    0:*/		return 0x821CA904;
		  /* 821CA904h */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 821CA904h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CA94C;  }
		/* 821CA904h case    1:*/		return 0x821CA908;
		  /* 821CA908h */ case    2:  		/* addi R3, R1, 96 */
		/* 821CA908h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821CA908h case    2:*/		return 0x821CA90C;
		  /* 821CA90Ch */ case    3:  		/* bl -39772 */
		/* 821CA90Ch case    3:*/		regs.LR = 0x821CA910; return 0x821C0DB0;
		/* 821CA90Ch case    3:*/		return 0x821CA910;
		  /* 821CA910h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821CA910h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CA910h case    4:*/		return 0x821CA914;
		  /* 821CA914h */ case    5:  		/* lwz R10, <#[R3]> */
		/* 821CA914h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CA914h case    5:*/		return 0x821CA918;
		  /* 821CA918h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821CA918h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CA918h case    6:*/		return 0x821CA91C;
		  /* 821CA91Ch */ case    7:  		/* bc 4, CR6_EQ, 48 */
		/* 821CA91Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CA94C;  }
		/* 821CA91Ch case    7:*/		return 0x821CA920;
		  /* 821CA920h */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CA920h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CA920h case    8:*/		return 0x821CA924;
		  /* 821CA924h */ case    9:  		/* lwz R10, <#[R31 + 4]> */
		/* 821CA924h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821CA924h case    9:*/		return 0x821CA928;
		  /* 821CA928h */ case   10:  		/* cmpw CR6, R11, R10 */
		/* 821CA928h case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CA928h case   10:*/		return 0x821CA92C;
		  /* 821CA92Ch */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 821CA92Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x821CA94C;  }
		/* 821CA92Ch case   11:*/		return 0x821CA930;
		  /* 821CA930h */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CA930h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CA930h case   12:*/		return 0x821CA934;
		  /* 821CA934h */ case   13:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CA934h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CA934h case   13:*/		return 0x821CA938;
		  /* 821CA938h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 821CA938h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CA938h case   14:*/		return 0x821CA93C;
		  /* 821CA93Ch */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 821CA93Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821CA94C;  }
		/* 821CA93Ch case   15:*/		return 0x821CA940;
		  /* 821CA940h */ case   16:  		/* lwz R29, <#[R1 + 104]> */
		/* 821CA940h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 821CA940h case   16:*/		return 0x821CA944;
		  /* 821CA944h */ case   17:  		/* lwz R30, <#[R1 + 100]> */
		/* 821CA944h case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 821CA944h case   17:*/		return 0x821CA948;
		  /* 821CA948h */ case   18:  		/* b -212 */
		/* 821CA948h case   18:*/		return 0x821CA874;
		/* 821CA948h case   18:*/		return 0x821CA94C;
	}
	return 0x821CA94C;
} // Block from 821CA900h-821CA94Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821CA94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA94C);
		  /* 821CA94Ch */ case    0:  		/* li R3, 0 */
		/* 821CA94Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821CA94Ch case    0:*/		return 0x821CA950;
		  /* 821CA950h */ case    1:  		/* b 44 */
		/* 821CA950h case    1:*/		return 0x821CA97C;
		/* 821CA950h case    1:*/		return 0x821CA954;
	}
	return 0x821CA954;
} // Block from 821CA94Ch-821CA954h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA954);
		  /* 821CA954h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821CA954h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821CA954h case    0:*/		return 0x821CA958;
		  /* 821CA958h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821CA958h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CA96C;  }
		/* 821CA958h case    1:*/		return 0x821CA95C;
		  /* 821CA95Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821CA95Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821CA95Ch case    2:*/		return 0x821CA960;
		  /* 821CA960h */ case    3:  		/* cmplw CR6, R29, R11 */
		/* 821CA960h case    3:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821CA960h case    3:*/		return 0x821CA964;
		  /* 821CA964h */ case    4:  		/* li R11, 0 */
		/* 821CA964h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CA964h case    4:*/		return 0x821CA968;
		  /* 821CA968h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 821CA968h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821CA970;  }
		/* 821CA968h case    5:*/		return 0x821CA96C;
	}
	return 0x821CA96C;
} // Block from 821CA954h-821CA96Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CA96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA96C);
		  /* 821CA96Ch */ case    0:  		/* li R11, 1 */
		/* 821CA96Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CA96Ch case    0:*/		return 0x821CA970;
	}
	return 0x821CA970;
} // Block from 821CA96Ch-821CA970h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CA970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA970);
		  /* 821CA970h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821CA970h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CA970h case    0:*/		return 0x821CA974;
		  /* 821CA974h */ case    1:  		/* addic R10, R11, -1 */
		/* 821CA974h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821CA974h case    1:*/		return 0x821CA978;
		  /* 821CA978h */ case    2:  		/* subfe R3, R10, R11 */
		/* 821CA978h case    2:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 821CA978h case    2:*/		return 0x821CA97C;
	}
	return 0x821CA97C;
} // Block from 821CA970h-821CA97Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA97C);
		  /* 821CA97Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 821CA97Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CA97Ch case    0:*/		return 0x821CA980;
		  /* 821CA980h */ case    1:  		/* b -1283800 */
		/* 821CA980h case    1:*/		return 0x820912A8;
		/* 821CA980h case    1:*/		return 0x821CA984;
		  /* 821CA984h */ case    2:  		/* nop */
		/* 821CA984h case    2:*/		cpu::op::nop();
		/* 821CA984h case    2:*/		return 0x821CA988;
	}
	return 0x821CA988;
} // Block from 821CA97Ch-821CA988h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CA988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA988);
		  /* 821CA988h */ case    0:  		/* mfspr R12, LR */
		/* 821CA988h case    0:*/		regs.R12 = regs.LR;
		/* 821CA988h case    0:*/		return 0x821CA98C;
		  /* 821CA98Ch */ case    1:  		/* bl -1283944 */
		/* 821CA98Ch case    1:*/		regs.LR = 0x821CA990; return 0x82091224;
		/* 821CA98Ch case    1:*/		return 0x821CA990;
		  /* 821CA990h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 821CA990h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 821CA990h case    2:*/		return 0x821CA994;
		  /* 821CA994h */ case    3:  		/* lwz R11, <#[R4 + 4]> */
		/* 821CA994h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821CA994h case    3:*/		return 0x821CA998;
		  /* 821CA998h */ case    4:  		/* li R15, 0 */
		/* 821CA998h case    4:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 821CA998h case    4:*/		return 0x821CA99C;
		  /* 821CA99Ch */ case    5:  		/* mr R21, R4 */
		/* 821CA99Ch case    5:*/		regs.R21 = regs.R4;
		/* 821CA99Ch case    5:*/		return 0x821CA9A0;
		  /* 821CA9A0h */ case    6:  		/* mr R6, R3 */
		/* 821CA9A0h case    6:*/		regs.R6 = regs.R3;
		/* 821CA9A0h case    6:*/		return 0x821CA9A4;
		  /* 821CA9A4h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA9A4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA9A4h case    7:*/		return 0x821CA9A8;
		  /* 821CA9A8h */ case    8:  		/* mr R4, R15 */
		/* 821CA9A8h case    8:*/		regs.R4 = regs.R15;
		/* 821CA9A8h case    8:*/		return 0x821CA9AC;
		  /* 821CA9ACh */ case    9:  		/* bc 4, CR0_EQ, 44 */
		/* 821CA9ACh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CA9D8;  }
		/* 821CA9ACh case    9:*/		return 0x821CA9B0;
		  /* 821CA9B0h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821CA9B0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821CA9B0h case   10:*/		return 0x821CA9B4;
		  /* 821CA9B4h */ case   11:  		/* bc 12, CR0_EQ, 36 */
		/* 821CA9B4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821CA9D8;  }
		/* 821CA9B4h case   11:*/		return 0x821CA9B8;
		  /* 821CA9B8h */ case   12:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821CA9B8h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821CA9B8h case   12:*/		return 0x821CA9BC;
		  /* 821CA9BCh */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CA9BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CA9BCh case   13:*/		return 0x821CA9C0;
		  /* 821CA9C0h */ case   14:  		/* add R4, R11, R4 */
		/* 821CA9C0h case   14:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 821CA9C0h case   14:*/		return 0x821CA9C4;
		  /* 821CA9C4h */ case   15:  		/* lwz R11, <#[R10 + 4]> */
		/* 821CA9C4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821CA9C4h case   15:*/		return 0x821CA9C8;
		  /* 821CA9C8h */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821CA9C8h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CA9C8h case   16:*/		return 0x821CA9CC;
		  /* 821CA9CCh */ case   17:  		/* bc 4, CR0_EQ, 12 */
		/* 821CA9CCh case   17:*/		if ( !regs.CR[0].eq ) { return 0x821CA9D8;  }
		/* 821CA9CCh case   17:*/		return 0x821CA9D0;
		  /* 821CA9D0h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821CA9D0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CA9D0h case   18:*/		return 0x821CA9D4;
		  /* 821CA9D4h */ case   19:  		/* bc 4, CR6_EQ, -28 */
		/* 821CA9D4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821CA9B8;  }
		/* 821CA9D4h case   19:*/		return 0x821CA9D8;
	}
	return 0x821CA9D8;
} // Block from 821CA988h-821CA9D8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821CA9D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA9D8);
		  /* 821CA9D8h */ case    0:  		/* lis R11, -32231 */
		/* 821CA9D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8219);
		/* 821CA9D8h case    0:*/		return 0x821CA9DC;
		  /* 821CA9DCh */ case    1:  		/* addi R3, R1, 80 */
		/* 821CA9DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821CA9DCh case    1:*/		return 0x821CA9E0;
	}
	return 0x821CA9E0;
} // Block from 821CA9D8h-821CA9E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CA9E0h
// Function '?PrepareTessellatorInputs@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CA9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CA9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CA9E0);
		  /* 821CA9E0h */ case    0:  		/* addi R5, R11, 28352 */
		/* 821CA9E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6EC0);
		/* 821CA9E0h case    0:*/		return 0x821CA9E4;
		  /* 821CA9E4h */ case    1:  		/* mr R20, R15 */
		/* 821CA9E4h case    1:*/		regs.R20 = regs.R15;
		/* 821CA9E4h case    1:*/		return 0x821CA9E8;
		  /* 821CA9E8h */ case    2:  		/* mr R19, R15 */
		/* 821CA9E8h case    2:*/		regs.R19 = regs.R15;
		/* 821CA9E8h case    2:*/		return 0x821CA9EC;
		  /* 821CA9ECh */ case    3:  		/* bl -214764 */
		/* 821CA9ECh case    3:*/		regs.LR = 0x821CA9F0; return 0x82196300;
		/* 821CA9ECh case    3:*/		return 0x821CA9F0;
		  /* 821CA9F0h */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CA9F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CA9F0h case    4:*/		return 0x821CA9F4;
		  /* 821CA9F4h */ case    5:  		/* mr R18, R15 */
		/* 821CA9F4h case    5:*/		regs.R18 = regs.R15;
		/* 821CA9F4h case    5:*/		return 0x821CA9F8;
		  /* 821CA9F8h */ case    6:  		/* stw R15, <#[R1 + 128]> */
		/* 821CA9F8h case    6:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000080) );
		/* 821CA9F8h case    6:*/		return 0x821CA9FC;
		  /* 821CA9FCh */ case    7:  		/* li R16, 1 */
		/* 821CA9FCh case    7:*/		cpu::op::li<0>(regs,&regs.R16,0x1);
		/* 821CA9FCh case    7:*/		return 0x821CAA00;
		  /* 821CAA00h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CAA00h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CAA00h case    8:*/		return 0x821CAA04;
		  /* 821CAA04h */ case    9:  		/* stw R21, <#[R1 + 120]> */
		/* 821CAA04h case    9:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000078) );
		/* 821CAA04h case    9:*/		return 0x821CAA08;
		  /* 821CAA08h */ case   10:  		/* addic R10, R10, -1 */
		/* 821CAA08h case   10:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAA08h case   10:*/		return 0x821CAA0C;
		  /* 821CAA0Ch */ case   11:  		/* subfe R10, R10, R10 */
		/* 821CAA0Ch case   11:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CAA0Ch case   11:*/		return 0x821CAA10;
		  /* 821CAA10h */ case   12:  		/* and R11, R10, R11 */
		/* 821CAA10h case   12:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CAA10h case   12:*/		return 0x821CAA14;
		  /* 821CAA14h */ case   13:  		/* stw R11, <#[R1 + 124]> */
		/* 821CAA14h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CAA14h case   13:*/		return 0x821CAA18;
		  /* 821CAA18h */ case   14:  		/* lwz R17, <#[R1 + 80]> */
		/* 821CAA18h case   14:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 821CAA18h case   14:*/		return 0x821CAA1C;
		  /* 821CAA1Ch */ case   15:  		/* lwz R11, <#[R1 + 124]> */
		/* 821CAA1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CAA1Ch case   15:*/		return 0x821CAA20;
		  /* 821CAA20h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821CAA20h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CAA20h case   16:*/		return 0x821CAA24;
		  /* 821CAA24h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 821CAA24h case   17:*/		if ( regs.CR[6].eq ) { return 0x821CAA3C;  }
		/* 821CAA24h case   17:*/		return 0x821CAA28;
		  /* 821CAA28h */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CAA28h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CAA28h case   18:*/		return 0x821CAA2C;
		  /* 821CAA2Ch */ case   19:  		/* lwz R10, <#[R1 + 128]> */
		/* 821CAA2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821CAA2Ch case   19:*/		return 0x821CAA30;
		  /* 821CAA30h */ case   20:  		/* cmplw CR6, R10, R11 */
		/* 821CAA30h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CAA30h case   20:*/		return 0x821CAA34;
		  /* 821CAA34h */ case   21:  		/* mr R11, R15 */
		/* 821CAA34h case   21:*/		regs.R11 = regs.R15;
		/* 821CAA34h case   21:*/		return 0x821CAA38;
		  /* 821CAA38h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 821CAA38h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821CAA40;  }
		/* 821CAA38h case   22:*/		return 0x821CAA3C;
	}
	return 0x821CAA3C;
} // Block from 821CA9E0h-821CAA3Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821CAA3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAA3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAA3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAA3C);
		  /* 821CAA3Ch */ case    0:  		/* mr R11, R16 */
		/* 821CAA3Ch case    0:*/		regs.R11 = regs.R16;
		/* 821CAA3Ch case    0:*/		return 0x821CAA40;
	}
	return 0x821CAA40;
} // Block from 821CAA3Ch-821CAA40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CAA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAA40);
		  /* 821CAA40h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CAA40h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CAA40h case    0:*/		return 0x821CAA44;
		  /* 821CAA44h */ case    1:  		/* bc 4, CR0_EQ, 828 */
		/* 821CAA44h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CAD80;  }
		/* 821CAA44h case    1:*/		return 0x821CAA48;
		  /* 821CAA48h */ case    2:  		/* addi R3, R1, 120 */
		/* 821CAA48h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 821CAA48h case    2:*/		return 0x821CAA4C;
		  /* 821CAA4Ch */ case    3:  		/* bl -40004 */
		/* 821CAA4Ch case    3:*/		regs.LR = 0x821CAA50; return 0x821C0E08;
		/* 821CAA4Ch case    3:*/		return 0x821CAA50;
		  /* 821CAA50h */ case    4:  		/* nor R11, R17, R17 */
		/* 821CAA50h case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R17,regs.R17);
		/* 821CAA50h case    4:*/		return 0x821CAA54;
		  /* 821CAA54h */ case    5:  		/* lwz R22, <#[R3]> */
		/* 821CAA54h case    5:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R3 + 0x00000000) );
		/* 821CAA54h case    5:*/		return 0x821CAA58;
		  /* 821CAA58h */ case    6:  		/* addi R18, R18, 1 */
		/* 821CAA58h case    6:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 821CAA58h case    6:*/		return 0x821CAA5C;
		  /* 821CAA5Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAA5Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAA5Ch case    7:*/		return 0x821CAA60;
		  /* 821CAA60h */ case    8:  		/* addi R11, R17, 4 */
		/* 821CAA60h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAA60h case    8:*/		return 0x821CAA64;
		  /* 821CAA64h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 821CAA64h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CAA6C;  }
		/* 821CAA64h case    9:*/		return 0x821CAA68;
		  /* 821CAA68h */ case   10:  		/* addi R11, R1, 80 */
		/* 821CAA68h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CAA68h case   10:*/		return 0x821CAA6C;
	}
	return 0x821CAA6C;
} // Block from 821CAA40h-821CAA6Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CAA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAA6C);
		  /* 821CAA6Ch */ case    0:  		/* rlwinm R10, R18, 29, 3, 29 */
		/* 821CAA6Ch case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R18);
		/* 821CAA6Ch case    0:*/		return 0x821CAA70;
		  /* 821CAA70h */ case    1:  		/* rlwinm R9, R18, 0, 27, 31 */
		/* 821CAA70h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R18);
		/* 821CAA70h case    1:*/		return 0x821CAA74;
		  /* 821CAA74h */ case    2:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821CAA74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821CAA74h case    2:*/		return 0x821CAA78;
		  /* 821CAA78h */ case    3:  		/* srw R11, R11, R9 */
		/* 821CAA78h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CAA78h case    3:*/		return 0x821CAA7C;
		  /* 821CAA7Ch */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAA7Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAA7Ch case    4:*/		return 0x821CAA80;
		  /* 821CAA80h */ case    5:  		/* bc 4, CR0_EQ, -100 */
		/* 821CAA80h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CAA1C;  }
		/* 821CAA80h case    5:*/		return 0x821CAA84;
		  /* 821CAA84h */ case    6:  		/* mr R3, R22 */
		/* 821CAA84h case    6:*/		regs.R3 = regs.R22;
		/* 821CAA84h case    6:*/		return 0x821CAA88;
		  /* 821CAA88h */ case    7:  		/* bl -14744 */
		/* 821CAA88h case    7:*/		regs.LR = 0x821CAA8C; return 0x821C70F0;
		/* 821CAA88h case    7:*/		return 0x821CAA8C;
		  /* 821CAA8Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CAA8Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CAA8Ch case    8:*/		return 0x821CAA90;
		  /* 821CAA90h */ case    9:  		/* bc 12, CR0_EQ, 344 */
		/* 821CAA90h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CABE8;  }
		/* 821CAA90h case    9:*/		return 0x821CAA94;
		  /* 821CAA94h */ case   10:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CAA94h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CAA94h case   10:*/		return 0x821CAA98;
		  /* 821CAA98h */ case   11:  		/* mr R23, R15 */
		/* 821CAA98h case   11:*/		regs.R23 = regs.R15;
		/* 821CAA98h case   11:*/		return 0x821CAA9C;
		  /* 821CAA9Ch */ case   12:  		/* mr R25, R16 */
		/* 821CAA9Ch case   12:*/		regs.R25 = regs.R16;
		/* 821CAA9Ch case   12:*/		return 0x821CAAA0;
		  /* 821CAAA0h */ case   13:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CAAA0h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CAAA0h case   13:*/		return 0x821CAAA4;
		  /* 821CAAA4h */ case   14:  		/* addic R10, R10, -1 */
		/* 821CAAA4h case   14:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAAA4h case   14:*/		return 0x821CAAA8;
		  /* 821CAAA8h */ case   15:  		/* subfe R10, R10, R10 */
		/* 821CAAA8h case   15:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CAAA8h case   15:*/		return 0x821CAAAC;
		  /* 821CAAACh */ case   16:  		/* and R24, R10, R11 */
		/* 821CAAACh case   16:*/		cpu::op::and<0>(regs,&regs.R24,regs.R10,regs.R11);
		/* 821CAAACh case   16:*/		return 0x821CAAB0;
		  /* 821CAAB0h */ case   17:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CAAB0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CAAB0h case   17:*/		return 0x821CAAB4;
		  /* 821CAAB4h */ case   18:  		/* mr R26, R15 */
		/* 821CAAB4h case   18:*/		regs.R26 = regs.R15;
		/* 821CAAB4h case   18:*/		return 0x821CAAB8;
		  /* 821CAAB8h */ case   19:  		/* stw R15, <#[R1 + 96]> */
		/* 821CAAB8h case   19:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000060) );
		/* 821CAAB8h case   19:*/		return 0x821CAABC;
		  /* 821CAABCh */ case   20:  		/* mr R27, R15 */
		/* 821CAABCh case   20:*/		regs.R27 = regs.R15;
		/* 821CAABCh case   20:*/		return 0x821CAAC0;
		  /* 821CAAC0h */ case   21:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CAAC0h case   21:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CAAC0h case   21:*/		return 0x821CAAC4;
		  /* 821CAAC4h */ case   22:  		/* stw R21, <#[R1 + 88]> */
		/* 821CAAC4h case   22:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000058) );
		/* 821CAAC4h case   22:*/		return 0x821CAAC8;
		  /* 821CAAC8h */ case   23:  		/* addic R10, R10, -1 */
		/* 821CAAC8h case   23:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAAC8h case   23:*/		return 0x821CAACC;
		  /* 821CAACCh */ case   24:  		/* subfe R10, R10, R10 */
		/* 821CAACCh case   24:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CAACCh case   24:*/		return 0x821CAAD0;
		  /* 821CAAD0h */ case   25:  		/* and R11, R10, R11 */
		/* 821CAAD0h case   25:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CAAD0h case   25:*/		return 0x821CAAD4;
		  /* 821CAAD4h */ case   26:  		/* stw R11, <#[R1 + 92]> */
		/* 821CAAD4h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CAAD4h case   26:*/		return 0x821CAAD8;
		  /* 821CAAD8h */ case   27:  		/* b 8 */
		/* 821CAAD8h case   27:*/		return 0x821CAAE0;
		/* 821CAAD8h case   27:*/		return 0x821CAADC;
		  /* 821CAADCh */ case   28:  		/* lwz R11, <#[R1 + 92]> */
		/* 821CAADCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CAADCh case   28:*/		return 0x821CAAE0;
	}
	return 0x821CAAE0;
} // Block from 821CAA6Ch-821CAAE0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CAAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAAE0);
		  /* 821CAAE0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CAAE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CAAE0h case    0:*/		return 0x821CAAE4;
		  /* 821CAAE4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CAAE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CAAFC;  }
		/* 821CAAE4h case    1:*/		return 0x821CAAE8;
		  /* 821CAAE8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CAAE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CAAE8h case    2:*/		return 0x821CAAEC;
		  /* 821CAAECh */ case    3:  		/* lwz R10, <#[R1 + 96]> */
		/* 821CAAECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821CAAECh case    3:*/		return 0x821CAAF0;
		  /* 821CAAF0h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CAAF0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CAAF0h case    4:*/		return 0x821CAAF4;
		  /* 821CAAF4h */ case    5:  		/* mr R11, R15 */
		/* 821CAAF4h case    5:*/		regs.R11 = regs.R15;
		/* 821CAAF4h case    5:*/		return 0x821CAAF8;
		  /* 821CAAF8h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CAAF8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CAB00;  }
		/* 821CAAF8h case    6:*/		return 0x821CAAFC;
	}
	return 0x821CAAFC;
} // Block from 821CAAE0h-821CAAFCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CAAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAAFC);
		  /* 821CAAFCh */ case    0:  		/* mr R11, R16 */
		/* 821CAAFCh case    0:*/		regs.R11 = regs.R16;
		/* 821CAAFCh case    0:*/		return 0x821CAB00;
	}
	return 0x821CAB00;
} // Block from 821CAAFCh-821CAB00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CAB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAB00);
		  /* 821CAB00h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CAB00h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CAB00h case    0:*/		return 0x821CAB04;
		  /* 821CAB04h */ case    1:  		/* bc 4, CR0_EQ, 188 */
		/* 821CAB04h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CABC0;  }
		/* 821CAB04h case    1:*/		return 0x821CAB08;
		  /* 821CAB08h */ case    2:  		/* addi R3, R1, 88 */
		/* 821CAB08h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821CAB08h case    2:*/		return 0x821CAB0C;
		  /* 821CAB0Ch */ case    3:  		/* bl -40196 */
		/* 821CAB0Ch case    3:*/		regs.LR = 0x821CAB10; return 0x821C0E08;
		/* 821CAB0Ch case    3:*/		return 0x821CAB10;
		  /* 821CAB10h */ case    4:  		/* nor R11, R17, R17 */
		/* 821CAB10h case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R17,regs.R17);
		/* 821CAB10h case    4:*/		return 0x821CAB14;
		  /* 821CAB14h */ case    5:  		/* lwz R29, <#[R3]> */
		/* 821CAB14h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 821CAB14h case    5:*/		return 0x821CAB18;
		  /* 821CAB18h */ case    6:  		/* addi R27, R27, 1 */
		/* 821CAB18h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821CAB18h case    6:*/		return 0x821CAB1C;
		  /* 821CAB1Ch */ case    7:  		/* rlwinm. R28, R11, 0, 31, 31 */
		/* 821CAB1Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R28,regs.R11);
		/* 821CAB1Ch case    7:*/		return 0x821CAB20;
		  /* 821CAB20h */ case    8:  		/* addi R11, R17, 4 */
		/* 821CAB20h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAB20h case    8:*/		return 0x821CAB24;
		  /* 821CAB24h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 821CAB24h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CAB2C;  }
		/* 821CAB24h case    9:*/		return 0x821CAB28;
		  /* 821CAB28h */ case   10:  		/* addi R11, R1, 80 */
		/* 821CAB28h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CAB28h case   10:*/		return 0x821CAB2C;
	}
	return 0x821CAB2C;
} // Block from 821CAB00h-821CAB2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CAB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAB2C);
		  /* 821CAB2Ch */ case    0:  		/* rlwinm R31, R27, 29, 3, 29 */
		/* 821CAB2Ch case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R31,regs.R27);
		/* 821CAB2Ch case    0:*/		return 0x821CAB30;
		  /* 821CAB30h */ case    1:  		/* rlwinm R30, R27, 0, 27, 31 */
		/* 821CAB30h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R27);
		/* 821CAB30h case    1:*/		return 0x821CAB34;
		  /* 821CAB34h */ case    2:  		/* lwzx R11, <#[R31 + R11]> */
		/* 821CAB34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821CAB34h case    2:*/		return 0x821CAB38;
		  /* 821CAB38h */ case    3:  		/* srw R11, R11, R30 */
		/* 821CAB38h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821CAB38h case    3:*/		return 0x821CAB3C;
		  /* 821CAB3Ch */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAB3Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAB3Ch case    4:*/		return 0x821CAB40;
		  /* 821CAB40h */ case    5:  		/* bc 4, CR0_EQ, -100 */
		/* 821CAB40h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CAADC;  }
		/* 821CAB40h case    5:*/		return 0x821CAB44;
		  /* 821CAB44h */ case    6:  		/* mr R3, R29 */
		/* 821CAB44h case    6:*/		regs.R3 = regs.R29;
		/* 821CAB44h case    6:*/		return 0x821CAB48;
		  /* 821CAB48h */ case    7:  		/* bl -14936 */
		/* 821CAB48h case    7:*/		regs.LR = 0x821CAB4C; return 0x821C70F0;
		/* 821CAB48h case    7:*/		return 0x821CAB4C;
		  /* 821CAB4Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CAB4Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CAB4Ch case    8:*/		return 0x821CAB50;
		  /* 821CAB50h */ case    9:  		/* bc 12, CR0_EQ, -116 */
		/* 821CAB50h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CAADC;  }
		/* 821CAB50h case    9:*/		return 0x821CAB54;
		  /* 821CAB54h */ case   10:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CAB54h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CAB54h case   10:*/		return 0x821CAB58;
		  /* 821CAB58h */ case   11:  		/* lwz R10, <#[R24 + 16]> */
		/* 821CAB58h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000010) );
		/* 821CAB58h case   11:*/		return 0x821CAB5C;
		  /* 821CAB5Ch */ case   12:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821CAB5Ch case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821CAB5Ch case   12:*/		return 0x821CAB60;
		  /* 821CAB60h */ case   13:  		/* addic R9, R9, -1 */
		/* 821CAB60h case   13:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821CAB60h case   13:*/		return 0x821CAB64;
		  /* 821CAB64h */ case   14:  		/* subfe R9, R9, R9 */
		/* 821CAB64h case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CAB64h case   14:*/		return 0x821CAB68;
		  /* 821CAB68h */ case   15:  		/* and R11, R9, R11 */
		/* 821CAB68h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821CAB68h case   15:*/		return 0x821CAB6C;
		  /* 821CAB6Ch */ case   16:  		/* lwz R9, <#[R11 + 16]> */
		/* 821CAB6Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821CAB6Ch case   16:*/		return 0x821CAB70;
		  /* 821CAB70h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 821CAB70h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CAB70h case   17:*/		return 0x821CAB74;
		  /* 821CAB74h */ case   18:  		/* bc 4, CR6_EQ, -152 */
		/* 821CAB74h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821CAADC;  }
		/* 821CAB74h case   18:*/		return 0x821CAB78;
		  /* 821CAB78h */ case   19:  		/* lwz R10, <#[R24 + 24]> */
		/* 821CAB78h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000018) );
		/* 821CAB78h case   19:*/		return 0x821CAB7C;
		  /* 821CAB7Ch */ case   20:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CAB7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CAB7Ch case   20:*/		return 0x821CAB80;
		  /* 821CAB80h */ case   21:  		/* cmplw CR6, R10, R11 */
		/* 821CAB80h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CAB80h case   21:*/		return 0x821CAB84;
		  /* 821CAB84h */ case   22:  		/* bc 4, CR6_EQ, -168 */
		/* 821CAB84h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821CAADC;  }
		/* 821CAB84h case   22:*/		return 0x821CAB88;
		  /* 821CAB88h */ case   23:  		/* addi R26, R26, 1 */
		/* 821CAB88h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821CAB88h case   23:*/		return 0x821CAB8C;
		  /* 821CAB8Ch */ case   24:  		/* cmpwi CR6, R25, 2 */
		/* 821CAB8Ch case   24:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821CAB8Ch case   24:*/		return 0x821CAB90;
		  /* 821CAB90h */ case   25:  		/* bc 4, CR6_EQ, -180 */
		/* 821CAB90h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821CAADC;  }
		/* 821CAB90h case   25:*/		return 0x821CAB94;
		  /* 821CAB94h */ case   26:  		/* cmplwi CR6, R28, 0 */
		/* 821CAB94h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CAB94h case   26:*/		return 0x821CAB98;
		  /* 821CAB98h */ case   27:  		/* addi R11, R17, 4 */
		/* 821CAB98h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAB98h case   27:*/		return 0x821CAB9C;
		  /* 821CAB9Ch */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 821CAB9Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x821CABA4;  }
		/* 821CAB9Ch case   28:*/		return 0x821CABA0;
		  /* 821CABA0h */ case   29:  		/* addi R11, R1, 80 */
		/* 821CABA0h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CABA0h case   29:*/		return 0x821CABA4;
	}
	return 0x821CABA4;
} // Block from 821CAB2Ch-821CABA4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821CABA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CABA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CABA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CABA4);
		  /* 821CABA4h */ case    0:  		/* lwzx R10, <#[R31 + R11]> */
		/* 821CABA4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821CABA4h case    0:*/		return 0x821CABA8;
		  /* 821CABA8h */ case    1:  		/* slw R9, R16, R30 */
		/* 821CABA8h case    1:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R16,regs.R30);
		/* 821CABA8h case    1:*/		return 0x821CABAC;
		  /* 821CABACh */ case    2:  		/* or R10, R9, R10 */
		/* 821CABACh case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821CABACh case    2:*/		return 0x821CABB0;
		  /* 821CABB0h */ case    3:  		/* cmplwi CR6, R26, 4 */
		/* 821CABB0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821CABB0h case    3:*/		return 0x821CABB4;
		  /* 821CABB4h */ case    4:  		/* stwx R10, <#[R31 + R11]> */
		/* 821CABB4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 821CABB4h case    4:*/		return 0x821CABB8;
		  /* 821CABB8h */ case    5:  		/* lwz R17, <#[R1 + 80]> */
		/* 821CABB8h case    5:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 821CABB8h case    5:*/		return 0x821CABBC;
		  /* 821CABBCh */ case    6:  		/* bc 4, CR6_EQ, -224 */
		/* 821CABBCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CAADC;  }
		/* 821CABBCh case    6:*/		return 0x821CABC0;
	}
	return 0x821CABC0;
} // Block from 821CABA4h-821CABC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CABC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CABC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CABC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CABC0);
		  /* 821CABC0h */ case    0:  		/* cmplwi CR6, R26, 3 */
		/* 821CABC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 821CABC0h case    0:*/		return 0x821CABC4;
		  /* 821CABC4h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 821CABC4h case    1:*/		if ( regs.CR[6].lt ) { return 0x821CABD8;  }
		/* 821CABC4h case    1:*/		return 0x821CABC8;
		  /* 821CABC8h */ case    2:  		/* addi R25, R25, 1 */
		/* 821CABC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821CABC8h case    2:*/		return 0x821CABCC;
		  /* 821CABCCh */ case    3:  		/* mr R23, R16 */
		/* 821CABCCh case    3:*/		regs.R23 = regs.R16;
		/* 821CABCCh case    3:*/		return 0x821CABD0;
		  /* 821CABD0h */ case    4:  		/* cmpwi CR6, R25, 2 */
		/* 821CABD0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000002);
		/* 821CABD0h case    4:*/		return 0x821CABD4;
		  /* 821CABD4h */ case    5:  		/* bc 4, CR6_GT, -292 */
		/* 821CABD4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821CAAB0;  }
		/* 821CABD4h case    5:*/		return 0x821CABD8;
	}
	return 0x821CABD8;
} // Block from 821CABC0h-821CABD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CABD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CABD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CABD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CABD8);
		  /* 821CABD8h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 821CABD8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 821CABD8h case    0:*/		return 0x821CABDC;
		  /* 821CABDCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CABDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821CABE8;  }
		/* 821CABDCh case    1:*/		return 0x821CABE0;
		  /* 821CABE0h */ case    2:  		/* addi R20, R20, 1 */
		/* 821CABE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821CABE0h case    2:*/		return 0x821CABE4;
		  /* 821CABE4h */ case    3:  		/* b -456 */
		/* 821CABE4h case    3:*/		return 0x821CAA1C;
		/* 821CABE4h case    3:*/		return 0x821CABE8;
	}
	return 0x821CABE8;
} // Block from 821CABD8h-821CABE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CABE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CABE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CABE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CABE8);
		  /* 821CABE8h */ case    0:  		/* mr R3, R22 */
		/* 821CABE8h case    0:*/		regs.R3 = regs.R22;
		/* 821CABE8h case    0:*/		return 0x821CABEC;
		  /* 821CABECh */ case    1:  		/* bl -15020 */
		/* 821CABECh case    1:*/		regs.LR = 0x821CABF0; return 0x821C7140;
		/* 821CABECh case    1:*/		return 0x821CABF0;
		  /* 821CABF0h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CABF0h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CABF0h case    2:*/		return 0x821CABF4;
		  /* 821CABF4h */ case    3:  		/* bc 12, CR0_EQ, -472 */
		/* 821CABF4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CAA1C;  }
		/* 821CABF4h case    3:*/		return 0x821CABF8;
		  /* 821CABF8h */ case    4:  		/* lwz R11, <#[R22 + 4]> */
		/* 821CABF8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821CABF8h case    4:*/		return 0x821CABFC;
		  /* 821CABFCh */ case    5:  		/* mr R24, R16 */
		/* 821CABFCh case    5:*/		regs.R24 = regs.R16;
		/* 821CABFCh case    5:*/		return 0x821CAC00;
		  /* 821CAC00h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CAC00h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CAC00h case    6:*/		return 0x821CAC04;
		  /* 821CAC04h */ case    7:  		/* addic R9, R10, -1 */
		/* 821CAC04h case    7:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821CAC04h case    7:*/		return 0x821CAC08;
		  /* 821CAC08h */ case    8:  		/* subfe R9, R9, R9 */
		/* 821CAC08h case    8:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821CAC08h case    8:*/		return 0x821CAC0C;
		  /* 821CAC0Ch */ case    9:  		/* addic R10, R10, -1 */
		/* 821CAC0Ch case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAC0Ch case    9:*/		return 0x821CAC10;
	}
	return 0x821CAC10;
} // Block from 821CABE8h-821CAC10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CAC10h
// Function '?PropagateConstants@Compiler@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAC10);
		  /* 821CAC10h */ case    0:  		/* and R25, R9, R11 */
		/* 821CAC10h case    0:*/		cpu::op::and<0>(regs,&regs.R25,regs.R9,regs.R11);
		/* 821CAC10h case    0:*/		return 0x821CAC14;
		  /* 821CAC14h */ case    1:  		/* subfe R10, R10, R10 */
		/* 821CAC14h case    1:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CAC14h case    1:*/		return 0x821CAC18;
		  /* 821CAC18h */ case    2:  		/* and R23, R10, R11 */
		/* 821CAC18h case    2:*/		cpu::op::and<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821CAC18h case    2:*/		return 0x821CAC1C;
		  /* 821CAC1Ch */ case    3:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CAC1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CAC1Ch case    3:*/		return 0x821CAC20;
		  /* 821CAC20h */ case    4:  		/* mr R26, R15 */
		/* 821CAC20h case    4:*/		regs.R26 = regs.R15;
		/* 821CAC20h case    4:*/		return 0x821CAC24;
		  /* 821CAC24h */ case    5:  		/* stw R15, <#[R1 + 112]> */
		/* 821CAC24h case    5:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 821CAC24h case    5:*/		return 0x821CAC28;
		  /* 821CAC28h */ case    6:  		/* mr R27, R15 */
		/* 821CAC28h case    6:*/		regs.R27 = regs.R15;
		/* 821CAC28h case    6:*/		return 0x821CAC2C;
		  /* 821CAC2Ch */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CAC2Ch case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CAC2Ch case    7:*/		return 0x821CAC30;
		  /* 821CAC30h */ case    8:  		/* stw R21, <#[R1 + 104]> */
		/* 821CAC30h case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 821CAC30h case    8:*/		return 0x821CAC34;
		  /* 821CAC34h */ case    9:  		/* addic R10, R10, -1 */
		/* 821CAC34h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAC34h case    9:*/		return 0x821CAC38;
		  /* 821CAC38h */ case   10:  		/* subfe R10, R10, R10 */
		/* 821CAC38h case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CAC38h case   10:*/		return 0x821CAC3C;
		  /* 821CAC3Ch */ case   11:  		/* and R11, R10, R11 */
		/* 821CAC3Ch case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CAC3Ch case   11:*/		return 0x821CAC40;
		  /* 821CAC40h */ case   12:  		/* stw R11, <#[R1 + 108]> */
		/* 821CAC40h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CAC40h case   12:*/		return 0x821CAC44;
		  /* 821CAC44h */ case   13:  		/* b 8 */
		/* 821CAC44h case   13:*/		return 0x821CAC4C;
		/* 821CAC44h case   13:*/		return 0x821CAC48;
		  /* 821CAC48h */ case   14:  		/* lwz R11, <#[R1 + 108]> */
		/* 821CAC48h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CAC48h case   14:*/		return 0x821CAC4C;
	}
	return 0x821CAC4C;
} // Block from 821CAC10h-821CAC4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CAC4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAC4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAC4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAC4C);
		  /* 821CAC4Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CAC4Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CAC4Ch case    0:*/		return 0x821CAC50;
		  /* 821CAC50h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CAC50h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CAC68;  }
		/* 821CAC50h case    1:*/		return 0x821CAC54;
		  /* 821CAC54h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CAC54h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CAC54h case    2:*/		return 0x821CAC58;
		  /* 821CAC58h */ case    3:  		/* lwz R10, <#[R1 + 112]> */
		/* 821CAC58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821CAC58h case    3:*/		return 0x821CAC5C;
		  /* 821CAC5Ch */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CAC5Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CAC5Ch case    4:*/		return 0x821CAC60;
		  /* 821CAC60h */ case    5:  		/* mr R11, R15 */
		/* 821CAC60h case    5:*/		regs.R11 = regs.R15;
		/* 821CAC60h case    5:*/		return 0x821CAC64;
		  /* 821CAC64h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CAC64h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CAC6C;  }
		/* 821CAC64h case    6:*/		return 0x821CAC68;
	}
	return 0x821CAC68;
} // Block from 821CAC4Ch-821CAC68h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CAC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAC68);
		  /* 821CAC68h */ case    0:  		/* mr R11, R16 */
		/* 821CAC68h case    0:*/		regs.R11 = regs.R16;
		/* 821CAC68h case    0:*/		return 0x821CAC6C;
	}
	return 0x821CAC6C;
} // Block from 821CAC68h-821CAC6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CAC6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAC6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAC6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAC6C);
		  /* 821CAC6Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CAC6Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CAC6Ch case    0:*/		return 0x821CAC70;
		  /* 821CAC70h */ case    1:  		/* bc 4, CR0_EQ, 232 */
		/* 821CAC70h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CAD58;  }
		/* 821CAC70h case    1:*/		return 0x821CAC74;
		  /* 821CAC74h */ case    2:  		/* addi R3, R1, 104 */
		/* 821CAC74h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821CAC74h case    2:*/		return 0x821CAC78;
		  /* 821CAC78h */ case    3:  		/* bl -40560 */
		/* 821CAC78h case    3:*/		regs.LR = 0x821CAC7C; return 0x821C0E08;
		/* 821CAC78h case    3:*/		return 0x821CAC7C;
		  /* 821CAC7Ch */ case    4:  		/* nor R11, R17, R17 */
		/* 821CAC7Ch case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R17,regs.R17);
		/* 821CAC7Ch case    4:*/		return 0x821CAC80;
		  /* 821CAC80h */ case    5:  		/* lwz R31, <#[R3]> */
		/* 821CAC80h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821CAC80h case    5:*/		return 0x821CAC84;
		  /* 821CAC84h */ case    6:  		/* addi R27, R27, 1 */
		/* 821CAC84h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821CAC84h case    6:*/		return 0x821CAC88;
		  /* 821CAC88h */ case    7:  		/* rlwinm. R28, R11, 0, 31, 31 */
		/* 821CAC88h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R28,regs.R11);
		/* 821CAC88h case    7:*/		return 0x821CAC8C;
		  /* 821CAC8Ch */ case    8:  		/* addi R11, R17, 4 */
		/* 821CAC8Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAC8Ch case    8:*/		return 0x821CAC90;
		  /* 821CAC90h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 821CAC90h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CAC98;  }
		/* 821CAC90h case    9:*/		return 0x821CAC94;
		  /* 821CAC94h */ case   10:  		/* addi R11, R1, 80 */
		/* 821CAC94h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CAC94h case   10:*/		return 0x821CAC98;
	}
	return 0x821CAC98;
} // Block from 821CAC6Ch-821CAC98h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CAC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAC98);
		  /* 821CAC98h */ case    0:  		/* rlwinm R30, R27, 29, 3, 29 */
		/* 821CAC98h case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R30,regs.R27);
		/* 821CAC98h case    0:*/		return 0x821CAC9C;
		  /* 821CAC9Ch */ case    1:  		/* rlwinm R29, R27, 0, 27, 31 */
		/* 821CAC9Ch case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R29,regs.R27);
		/* 821CAC9Ch case    1:*/		return 0x821CACA0;
		  /* 821CACA0h */ case    2:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821CACA0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821CACA0h case    2:*/		return 0x821CACA4;
		  /* 821CACA4h */ case    3:  		/* srw R11, R11, R29 */
		/* 821CACA4h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821CACA4h case    3:*/		return 0x821CACA8;
		  /* 821CACA8h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CACA8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CACA8h case    4:*/		return 0x821CACAC;
		  /* 821CACACh */ case    5:  		/* bc 4, CR0_EQ, -100 */
		/* 821CACACh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CAC48;  }
		/* 821CACACh case    5:*/		return 0x821CACB0;
		  /* 821CACB0h */ case    6:  		/* mr R3, R31 */
		/* 821CACB0h case    6:*/		regs.R3 = regs.R31;
		/* 821CACB0h case    6:*/		return 0x821CACB4;
		  /* 821CACB4h */ case    7:  		/* bl -15220 */
		/* 821CACB4h case    7:*/		regs.LR = 0x821CACB8; return 0x821C7140;
		/* 821CACB4h case    7:*/		return 0x821CACB8;
		  /* 821CACB8h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821CACB8h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821CACB8h case    8:*/		return 0x821CACBC;
		  /* 821CACBCh */ case    9:  		/* bc 12, CR0_EQ, -116 */
		/* 821CACBCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821CAC48;  }
		/* 821CACBCh case    9:*/		return 0x821CACC0;
		  /* 821CACC0h */ case   10:  		/* lwz R10, <#[R31 + 4]> */
		/* 821CACC0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821CACC0h case   10:*/		return 0x821CACC4;
		  /* 821CACC4h */ case   11:  		/* lwz R9, <#[R25 + 16]> */
		/* 821CACC4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000010) );
		/* 821CACC4h case   11:*/		return 0x821CACC8;
		  /* 821CACC8h */ case   12:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821CACC8h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CACC8h case   12:*/		return 0x821CACCC;
		  /* 821CACCCh */ case   13:  		/* addic R8, R11, -1 */
		/* 821CACCCh case   13:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821CACCCh case   13:*/		return 0x821CACD0;
		  /* 821CACD0h */ case   14:  		/* subfe R8, R8, R8 */
		/* 821CACD0h case   14:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 821CACD0h case   14:*/		return 0x821CACD4;
		  /* 821CACD4h */ case   15:  		/* addic R11, R11, -1 */
		/* 821CACD4h case   15:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821CACD4h case   15:*/		return 0x821CACD8;
		  /* 821CACD8h */ case   16:  		/* and R11, R8, R10 */
		/* 821CACD8h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R8,regs.R10);
		/* 821CACD8h case   16:*/		return 0x821CACDC;
		  /* 821CACDCh */ case   17:  		/* subfe R8, R7, R7 */
		/* 821CACDCh case   17:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R7,regs.R7);
		/* 821CACDCh case   17:*/		return 0x821CACE0;
		  /* 821CACE0h */ case   18:  		/* and R10, R8, R10 */
		/* 821CACE0h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821CACE0h case   18:*/		return 0x821CACE4;
		  /* 821CACE4h */ case   19:  		/* lwz R8, <#[R11 + 16]> */
		/* 821CACE4h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 821CACE4h case   19:*/		return 0x821CACE8;
		  /* 821CACE8h */ case   20:  		/* cmplw CR6, R8, R9 */
		/* 821CACE8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821CACE8h case   20:*/		return 0x821CACEC;
		  /* 821CACECh */ case   21:  		/* bc 4, CR6_EQ, -164 */
		/* 821CACECh case   21:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CACECh case   21:*/		return 0x821CACF0;
		  /* 821CACF0h */ case   22:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CACF0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CACF0h case   22:*/		return 0x821CACF4;
		  /* 821CACF4h */ case   23:  		/* lwz R9, <#[R25 + 24]> */
		/* 821CACF4h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000018) );
		/* 821CACF4h case   23:*/		return 0x821CACF8;
		  /* 821CACF8h */ case   24:  		/* cmplw CR6, R11, R9 */
		/* 821CACF8h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821CACF8h case   24:*/		return 0x821CACFC;
		  /* 821CACFCh */ case   25:  		/* bc 4, CR6_EQ, -180 */
		/* 821CACFCh case   25:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CACFCh case   25:*/		return 0x821CAD00;
		  /* 821CAD00h */ case   26:  		/* lwz R11, <#[R10 + 28]> */
		/* 821CAD00h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821CAD00h case   26:*/		return 0x821CAD04;
		  /* 821CAD04h */ case   27:  		/* lwz R9, <#[R23 + 28]> */
		/* 821CAD04h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x0000001C) );
		/* 821CAD04h case   27:*/		return 0x821CAD08;
		  /* 821CAD08h */ case   28:  		/* cmplw CR6, R11, R9 */
		/* 821CAD08h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821CAD08h case   28:*/		return 0x821CAD0C;
		  /* 821CAD0Ch */ case   29:  		/* bc 4, CR6_EQ, -196 */
		/* 821CAD0Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CAD0Ch case   29:*/		return 0x821CAD10;
		  /* 821CAD10h */ case   30:  		/* lwz R11, <#[R10 + 36]> */
		/* 821CAD10h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000024) );
		/* 821CAD10h case   30:*/		return 0x821CAD14;
		  /* 821CAD14h */ case   31:  		/* lwz R10, <#[R23 + 36]> */
		/* 821CAD14h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000024) );
		/* 821CAD14h case   31:*/		return 0x821CAD18;
		  /* 821CAD18h */ case   32:  		/* cmplw CR6, R11, R10 */
		/* 821CAD18h case   32:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CAD18h case   32:*/		return 0x821CAD1C;
		  /* 821CAD1Ch */ case   33:  		/* bc 4, CR6_EQ, -212 */
		/* 821CAD1Ch case   33:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CAD1Ch case   33:*/		return 0x821CAD20;
		  /* 821CAD20h */ case   34:  		/* addi R26, R26, 1 */
		/* 821CAD20h case   34:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821CAD20h case   34:*/		return 0x821CAD24;
		  /* 821CAD24h */ case   35:  		/* cmpwi CR6, R24, 2 */
		/* 821CAD24h case   35:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 821CAD24h case   35:*/		return 0x821CAD28;
		  /* 821CAD28h */ case   36:  		/* bc 4, CR6_EQ, -224 */
		/* 821CAD28h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CAD28h case   36:*/		return 0x821CAD2C;
		  /* 821CAD2Ch */ case   37:  		/* cmplwi CR6, R28, 0 */
		/* 821CAD2Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CAD2Ch case   37:*/		return 0x821CAD30;
		  /* 821CAD30h */ case   38:  		/* addi R11, R17, 4 */
		/* 821CAD30h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAD30h case   38:*/		return 0x821CAD34;
		  /* 821CAD34h */ case   39:  		/* bc 4, CR6_EQ, 8 */
		/* 821CAD34h case   39:*/		if ( !regs.CR[6].eq ) { return 0x821CAD3C;  }
		/* 821CAD34h case   39:*/		return 0x821CAD38;
		  /* 821CAD38h */ case   40:  		/* addi R11, R1, 80 */
		/* 821CAD38h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CAD38h case   40:*/		return 0x821CAD3C;
	}
	return 0x821CAD3C;
} // Block from 821CAC98h-821CAD3Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 821CAD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAD3C);
		  /* 821CAD3Ch */ case    0:  		/* lwzx R10, <#[R30 + R11]> */
		/* 821CAD3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821CAD3Ch case    0:*/		return 0x821CAD40;
		  /* 821CAD40h */ case    1:  		/* slw R9, R16, R29 */
		/* 821CAD40h case    1:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R16,regs.R29);
		/* 821CAD40h case    1:*/		return 0x821CAD44;
		  /* 821CAD44h */ case    2:  		/* or R10, R9, R10 */
		/* 821CAD44h case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821CAD44h case    2:*/		return 0x821CAD48;
		  /* 821CAD48h */ case    3:  		/* cmplwi CR6, R26, 4 */
		/* 821CAD48h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821CAD48h case    3:*/		return 0x821CAD4C;
		  /* 821CAD4Ch */ case    4:  		/* stwx R10, <#[R30 + R11]> */
		/* 821CAD4Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821CAD4Ch case    4:*/		return 0x821CAD50;
		  /* 821CAD50h */ case    5:  		/* lwz R17, <#[R1 + 80]> */
		/* 821CAD50h case    5:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000050) );
		/* 821CAD50h case    5:*/		return 0x821CAD54;
		  /* 821CAD54h */ case    6:  		/* bc 4, CR6_EQ, -268 */
		/* 821CAD54h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CAC48;  }
		/* 821CAD54h case    6:*/		return 0x821CAD58;
	}
	return 0x821CAD58;
} // Block from 821CAD3Ch-821CAD58h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CAD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAD58);
		  /* 821CAD58h */ case    0:  		/* cmplwi CR6, R26, 2 */
		/* 821CAD58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000002);
		/* 821CAD58h case    0:*/		return 0x821CAD5C;
		  /* 821CAD5Ch */ case    1:  		/* bc 12, CR6_LT, -832 */
		/* 821CAD5Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821CAA1C;  }
		/* 821CAD5Ch case    1:*/		return 0x821CAD60;
		  /* 821CAD60h */ case    2:  		/* addi R24, R24, 1 */
		/* 821CAD60h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821CAD60h case    2:*/		return 0x821CAD64;
		  /* 821CAD64h */ case    3:  		/* cmpwi CR6, R24, 2 */
		/* 821CAD64h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 821CAD64h case    3:*/		return 0x821CAD68;
		  /* 821CAD68h */ case    4:  		/* bc 4, CR6_GT, -332 */
		/* 821CAD68h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821CAC1C;  }
		/* 821CAD68h case    4:*/		return 0x821CAD6C;
		  /* 821CAD6Ch */ case    5:  		/* addi R20, R20, 1 */
		/* 821CAD6Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821CAD6Ch case    5:*/		return 0x821CAD70;
		  /* 821CAD70h */ case    6:  		/* cmplwi CR6, R26, 2 */
		/* 821CAD70h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000002);
		/* 821CAD70h case    6:*/		return 0x821CAD74;
		  /* 821CAD74h */ case    7:  		/* bc 4, CR6_EQ, -856 */
		/* 821CAD74h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821CAA1C;  }
		/* 821CAD74h case    7:*/		return 0x821CAD78;
		  /* 821CAD78h */ case    8:  		/* addi R19, R19, 1 */
		/* 821CAD78h case    8:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 821CAD78h case    8:*/		return 0x821CAD7C;
		  /* 821CAD7Ch */ case    9:  		/* b -864 */
		/* 821CAD7Ch case    9:*/		return 0x821CAA1C;
		/* 821CAD7Ch case    9:*/		return 0x821CAD80;
	}
	return 0x821CAD80;
} // Block from 821CAD58h-821CAD80h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821CAD80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAD80);
		  /* 821CAD80h */ case    0:  		/* addi R11, R20, -1 */
		/* 821CAD80h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0xFFFFFFFF);
		/* 821CAD80h case    0:*/		return 0x821CAD84;
		  /* 821CAD84h */ case    1:  		/* mr R30, R20 */
		/* 821CAD84h case    1:*/		regs.R30 = regs.R20;
		/* 821CAD84h case    1:*/		return 0x821CAD88;
		  /* 821CAD88h */ case    2:  		/* mr R27, R15 */
		/* 821CAD88h case    2:*/		regs.R27 = regs.R15;
		/* 821CAD88h case    2:*/		return 0x821CAD8C;
		  /* 821CAD8Ch */ case    3:  		/* cmplw CR6, R19, R11 */
		/* 821CAD8Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 821CAD8Ch case    3:*/		return 0x821CAD90;
		  /* 821CAD90h */ case    4:  		/* bc 4, CR6_GT, 12 */
		/* 821CAD90h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821CAD9C;  }
		/* 821CAD90h case    4:*/		return 0x821CAD94;
		  /* 821CAD94h */ case    5:  		/* subf R28, R11, R19 */
		/* 821CAD94h case    5:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R11,regs.R19);
		/* 821CAD94h case    5:*/		return 0x821CAD98;
		  /* 821CAD98h */ case    6:  		/* b 16 */
		/* 821CAD98h case    6:*/		return 0x821CADA8;
		/* 821CAD98h case    6:*/		return 0x821CAD9C;
	}
	return 0x821CAD9C;
} // Block from 821CAD80h-821CAD9Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CAD9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAD9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAD9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAD9C);
		  /* 821CAD9Ch */ case    0:  		/* subf R11, R19, R11 */
		/* 821CAD9Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R19,regs.R11);
		/* 821CAD9Ch case    0:*/		return 0x821CADA0;
		  /* 821CADA0h */ case    1:  		/* mr R28, R15 */
		/* 821CADA0h case    1:*/		regs.R28 = regs.R15;
		/* 821CADA0h case    1:*/		return 0x821CADA4;
		  /* 821CADA4h */ case    2:  		/* add R30, R11, R20 */
		/* 821CADA4h case    2:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R20);
		/* 821CADA4h case    2:*/		return 0x821CADA8;
	}
	return 0x821CADA8;
} // Block from 821CAD9Ch-821CADA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CADA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CADA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CADA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CADA8);
		  /* 821CADA8h */ case    0:  		/* lwz R11, <#[R21 + 4]> */
		/* 821CADA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821CADA8h case    0:*/		return 0x821CADAC;
		  /* 821CADACh */ case    1:  		/* mr R31, R15 */
		/* 821CADACh case    1:*/		regs.R31 = regs.R15;
		/* 821CADACh case    1:*/		return 0x821CADB0;
		  /* 821CADB0h */ case    2:  		/* stw R15, <#[R1 + 112]> */
		/* 821CADB0h case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 821CADB0h case    2:*/		return 0x821CADB4;
		  /* 821CADB4h */ case    3:  		/* mr R29, R15 */
		/* 821CADB4h case    3:*/		regs.R29 = regs.R15;
		/* 821CADB4h case    3:*/		return 0x821CADB8;
		  /* 821CADB8h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CADB8h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CADB8h case    4:*/		return 0x821CADBC;
		  /* 821CADBCh */ case    5:  		/* stw R21, <#[R1 + 104]> */
		/* 821CADBCh case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 821CADBCh case    5:*/		return 0x821CADC0;
		  /* 821CADC0h */ case    6:  		/* addic R10, R10, -1 */
		/* 821CADC0h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CADC0h case    6:*/		return 0x821CADC4;
		  /* 821CADC4h */ case    7:  		/* subfe R10, R10, R10 */
		/* 821CADC4h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CADC4h case    7:*/		return 0x821CADC8;
		  /* 821CADC8h */ case    8:  		/* and R11, R10, R11 */
		/* 821CADC8h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CADC8h case    8:*/		return 0x821CADCC;
		  /* 821CADCCh */ case    9:  		/* stw R11, <#[R1 + 108]> */
		/* 821CADCCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CADCCh case    9:*/		return 0x821CADD0;
		  /* 821CADD0h */ case   10:  		/* b 8 */
		/* 821CADD0h case   10:*/		return 0x821CADD8;
		/* 821CADD0h case   10:*/		return 0x821CADD4;
		  /* 821CADD4h */ case   11:  		/* lwz R11, <#[R1 + 108]> */
		/* 821CADD4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CADD4h case   11:*/		return 0x821CADD8;
	}
	return 0x821CADD8;
} // Block from 821CADA8h-821CADD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821CADD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CADD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CADD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CADD8);
		  /* 821CADD8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CADD8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CADD8h case    0:*/		return 0x821CADDC;
		  /* 821CADDCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CADDCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821CADF4;  }
		/* 821CADDCh case    1:*/		return 0x821CADE0;
		  /* 821CADE0h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CADE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CADE0h case    2:*/		return 0x821CADE4;
		  /* 821CADE4h */ case    3:  		/* lwz R10, <#[R1 + 112]> */
		/* 821CADE4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821CADE4h case    3:*/		return 0x821CADE8;
		  /* 821CADE8h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CADE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CADE8h case    4:*/		return 0x821CADEC;
		  /* 821CADECh */ case    5:  		/* mr R11, R15 */
		/* 821CADECh case    5:*/		regs.R11 = regs.R15;
		/* 821CADECh case    5:*/		return 0x821CADF0;
		  /* 821CADF0h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CADF0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CADF8;  }
		/* 821CADF0h case    6:*/		return 0x821CADF4;
	}
	return 0x821CADF4;
} // Block from 821CADD8h-821CADF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CADF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CADF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CADF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CADF4);
		  /* 821CADF4h */ case    0:  		/* mr R11, R16 */
		/* 821CADF4h case    0:*/		regs.R11 = regs.R16;
		/* 821CADF4h case    0:*/		return 0x821CADF8;
	}
	return 0x821CADF8;
} // Block from 821CADF4h-821CADF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CADF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CADF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CADF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CADF8);
		  /* 821CADF8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CADF8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CADF8h case    0:*/		return 0x821CADFC;
		  /* 821CADFCh */ case    1:  		/* bc 4, CR0_EQ, 220 */
		/* 821CADFCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CAED8;  }
		/* 821CADFCh case    1:*/		return 0x821CAE00;
		  /* 821CAE00h */ case    2:  		/* addi R3, R1, 104 */
		/* 821CAE00h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821CAE00h case    2:*/		return 0x821CAE04;
		  /* 821CAE04h */ case    3:  		/* bl -40956 */
		/* 821CAE04h case    3:*/		regs.LR = 0x821CAE08; return 0x821C0E08;
		/* 821CAE04h case    3:*/		return 0x821CAE08;
		  /* 821CAE08h */ case    4:  		/* nor R11, R17, R17 */
		/* 821CAE08h case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R17,regs.R17);
		/* 821CAE08h case    4:*/		return 0x821CAE0C;
		  /* 821CAE0Ch */ case    5:  		/* lwz R10, <#[R3]> */
		/* 821CAE0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CAE0Ch case    5:*/		return 0x821CAE10;
		  /* 821CAE10h */ case    6:  		/* addi R29, R29, 1 */
		/* 821CAE10h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821CAE10h case    6:*/		return 0x821CAE14;
		  /* 821CAE14h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAE14h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAE14h case    7:*/		return 0x821CAE18;
		  /* 821CAE18h */ case    8:  		/* addi R11, R17, 4 */
		/* 821CAE18h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R17,0x4);
		/* 821CAE18h case    8:*/		return 0x821CAE1C;
		  /* 821CAE1Ch */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 821CAE1Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CAE24;  }
		/* 821CAE1Ch case    9:*/		return 0x821CAE20;
		  /* 821CAE20h */ case   10:  		/* addi R11, R1, 80 */
		/* 821CAE20h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821CAE20h case   10:*/		return 0x821CAE24;
	}
	return 0x821CAE24;
} // Block from 821CADF8h-821CAE24h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CAE24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAE24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAE24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAE24);
		  /* 821CAE24h */ case    0:  		/* rlwinm R9, R29, 29, 3, 29 */
		/* 821CAE24h case    0:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R29);
		/* 821CAE24h case    0:*/		return 0x821CAE28;
		  /* 821CAE28h */ case    1:  		/* rlwinm R8, R29, 0, 27, 31 */
		/* 821CAE28h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R29);
		/* 821CAE28h case    1:*/		return 0x821CAE2C;
		  /* 821CAE2Ch */ case    2:  		/* lwzx R11, <#[R9 + R11]> */
		/* 821CAE2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 821CAE2Ch case    2:*/		return 0x821CAE30;
		  /* 821CAE30h */ case    3:  		/* srw R11, R11, R8 */
		/* 821CAE30h case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821CAE30h case    3:*/		return 0x821CAE34;
		  /* 821CAE34h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAE34h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAE34h case    4:*/		return 0x821CAE38;
		  /* 821CAE38h */ case    5:  		/* bc 4, CR0_EQ, -100 */
		/* 821CAE38h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CADD4;  }
		/* 821CAE38h case    5:*/		return 0x821CAE3C;
		  /* 821CAE3Ch */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 821CAE3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821CAE3Ch case    6:*/		return 0x821CAE40;
		  /* 821CAE40h */ case    7:  		/* mr R11, R15 */
		/* 821CAE40h case    7:*/		regs.R11 = regs.R15;
		/* 821CAE40h case    7:*/		return 0x821CAE44;
		  /* 821CAE44h */ case    8:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821CAE44h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821CAE44h case    8:*/		return 0x821CAE48;
		  /* 821CAE48h */ case    9:  		/* bc 4, CR0_EQ, 44 */
		/* 821CAE48h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821CAE74;  }
		/* 821CAE48h case    9:*/		return 0x821CAE4C;
		  /* 821CAE4Ch */ case   10:  		/* cmplwi CR0, R10, 0 */
		/* 821CAE4Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821CAE4Ch case   10:*/		return 0x821CAE50;
	}
	return 0x821CAE50;
} // Block from 821CAE24h-821CAE50h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CAE50h
// Function '?CloneBlocksWithMarkedInstructions@Compiler@D3DXShader@@AAAXPAVBlock@2@_N1PAV?$DoubleLinkList@VBlock@D3DXShader@@$0A@@2@PAIPAPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAE50);
		  /* 821CAE50h */ case    0:  		/* bc 12, CR0_EQ, 36 */
		/* 821CAE50h case    0:*/		if ( regs.CR[0].eq ) { return 0x821CAE74;  }
		/* 821CAE50h case    0:*/		return 0x821CAE54;
		  /* 821CAE54h */ case    1:  		/* rlwinm R9, R10, 0, 0, 30 */
		/* 821CAE54h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R10);
		/* 821CAE54h case    1:*/		return 0x821CAE58;
		  /* 821CAE58h */ case    2:  		/* lwz R10, <#[R10 + 8]> */
		/* 821CAE58h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821CAE58h case    2:*/		return 0x821CAE5C;
		  /* 821CAE5Ch */ case    3:  		/* add R11, R10, R11 */
		/* 821CAE5Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CAE5Ch case    3:*/		return 0x821CAE60;
		  /* 821CAE60h */ case    4:  		/* lwz R10, <#[R9 + 4]> */
		/* 821CAE60h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821CAE60h case    4:*/		return 0x821CAE64;
		  /* 821CAE64h */ case    5:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821CAE64h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821CAE64h case    5:*/		return 0x821CAE68;
		  /* 821CAE68h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821CAE68h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821CAE74;  }
		/* 821CAE68h case    6:*/		return 0x821CAE6C;
		  /* 821CAE6Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821CAE6Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821CAE6Ch case    7:*/		return 0x821CAE70;
		  /* 821CAE70h */ case    8:  		/* bc 4, CR6_EQ, -28 */
		/* 821CAE70h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821CAE54;  }
		/* 821CAE70h case    8:*/		return 0x821CAE74;
	}
	return 0x821CAE74;
} // Block from 821CAE50h-821CAE74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CAE74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAE74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAE74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAE74);
		  /* 821CAE74h */ case    0:  		/* mr R10, R11 */
		/* 821CAE74h case    0:*/		regs.R10 = regs.R11;
		/* 821CAE74h case    0:*/		return 0x821CAE78;
		  /* 821CAE78h */ case    1:  		/* cmplwi CR6, R11, 2 */
		/* 821CAE78h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821CAE78h case    1:*/		return 0x821CAE7C;
		  /* 821CAE7Ch */ case    2:  		/* bc 4, CR6_GT, 24 */
		/* 821CAE7Ch case    2:*/		if ( !regs.CR[6].gt ) { return 0x821CAE94;  }
		/* 821CAE7Ch case    2:*/		return 0x821CAE80;
		  /* 821CAE80h */ case    3:  		/* addi R11, R11, -2 */
		/* 821CAE80h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821CAE80h case    3:*/		return 0x821CAE84;
		  /* 821CAE84h */ case    4:  		/* add R30, R11, R30 */
		/* 821CAE84h case    4:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821CAE84h case    4:*/		return 0x821CAE88;
		  /* 821CAE88h */ case    5:  		/* mtspr CTR, R11 */
		/* 821CAE88h case    5:*/		regs.CTR = regs.R11;
		/* 821CAE88h case    5:*/		return 0x821CAE8C;
		  /* 821CAE8Ch */ case    6:  		/* addi R10, R10, -1 */
		/* 821CAE8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CAE8Ch case    6:*/		return 0x821CAE90;
		  /* 821CAE90h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 821CAE90h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821CAE8C;  }
		/* 821CAE90h case    7:*/		return 0x821CAE94;
	}
	return 0x821CAE94;
} // Block from 821CAE74h-821CAE94h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821CAE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAE94);
		  /* 821CAE94h */ case    0:  		/* cmplwi CR6, R10, 2 */
		/* 821CAE94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821CAE94h case    0:*/		return 0x821CAE98;
		  /* 821CAE98h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821CAE98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821CAEA4;  }
		/* 821CAE98h case    1:*/		return 0x821CAE9C;
		  /* 821CAE9Ch */ case    2:  		/* addi R27, R27, 1 */
		/* 821CAE9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821CAE9Ch case    2:*/		return 0x821CAEA0;
		  /* 821CAEA0h */ case    3:  		/* addi R30, R30, 1 */
		/* 821CAEA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821CAEA0h case    3:*/		return 0x821CAEA4;
	}
	return 0x821CAEA4;
} // Block from 821CAE94h-821CAEA4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CAEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAEA4);
		  /* 821CAEA4h */ case    0:  		/* rlwinm. R11, R31, 0, 24, 31 */
		/* 821CAEA4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R31);
		/* 821CAEA4h case    0:*/		return 0x821CAEA8;
		  /* 821CAEA8h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 821CAEA8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CAED0;  }
		/* 821CAEA8h case    1:*/		return 0x821CAEAC;
		  /* 821CAEACh */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821CAEACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821CAEACh case    2:*/		return 0x821CAEB0;
		  /* 821CAEB0h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821CAEB0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821CAEBC;  }
		/* 821CAEB0h case    3:*/		return 0x821CAEB4;
		  /* 821CAEB4h */ case    4:  		/* addi R28, R28, -1 */
		/* 821CAEB4h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821CAEB4h case    4:*/		return 0x821CAEB8;
		  /* 821CAEB8h */ case    5:  		/* b 24 */
		/* 821CAEB8h case    5:*/		return 0x821CAED0;
		/* 821CAEB8h case    5:*/		return 0x821CAEBC;
	}
	return 0x821CAEBC;
} // Block from 821CAEA4h-821CAEBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CAEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAEBC);
		  /* 821CAEBCh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821CAEBCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821CAEBCh case    0:*/		return 0x821CAEC0;
		  /* 821CAEC0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821CAEC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CAECC;  }
		/* 821CAEC0h case    1:*/		return 0x821CAEC4;
		  /* 821CAEC4h */ case    2:  		/* addi R27, R27, -1 */
		/* 821CAEC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821CAEC4h case    2:*/		return 0x821CAEC8;
		  /* 821CAEC8h */ case    3:  		/* b 8 */
		/* 821CAEC8h case    3:*/		return 0x821CAED0;
		/* 821CAEC8h case    3:*/		return 0x821CAECC;
	}
	return 0x821CAECC;
} // Block from 821CAEBCh-821CAECCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CAECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAECC);
		  /* 821CAECCh */ case    0:  		/* addi R30, R30, 1 */
		/* 821CAECCh case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821CAECCh case    0:*/		return 0x821CAED0;
	}
	return 0x821CAED0;
} // Block from 821CAECCh-821CAED0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CAED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAED0);
		  /* 821CAED0h */ case    0:  		/* mr R31, R16 */
		/* 821CAED0h case    0:*/		regs.R31 = regs.R16;
		/* 821CAED0h case    0:*/		return 0x821CAED4;
		  /* 821CAED4h */ case    1:  		/* b -256 */
		/* 821CAED4h case    1:*/		return 0x821CADD4;
		/* 821CAED4h case    1:*/		return 0x821CAED8;
	}
	return 0x821CAED8;
} // Block from 821CAED0h-821CAED8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CAED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAED8);
		  /* 821CAED8h */ case    0:  		/* mr R3, R30 */
		/* 821CAED8h case    0:*/		regs.R3 = regs.R30;
		/* 821CAED8h case    0:*/		return 0x821CAEDC;
		  /* 821CAEDCh */ case    1:  		/* addi R1, R1, 288 */
		/* 821CAEDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 821CAEDCh case    1:*/		return 0x821CAEE0;
		  /* 821CAEE0h */ case    2:  		/* b -1285228 */
		/* 821CAEE0h case    2:*/		return 0x82091274;
		/* 821CAEE0h case    2:*/		return 0x821CAEE4;
		  /* 821CAEE4h */ case    3:  		/* nop */
		/* 821CAEE4h case    3:*/		cpu::op::nop();
		/* 821CAEE4h case    3:*/		return 0x821CAEE8;
	}
	return 0x821CAEE8;
} // Block from 821CAED8h-821CAEE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CAEE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAEE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAEE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAEE8);
		  /* 821CAEE8h */ case    0:  		/* mfspr R12, LR */
		/* 821CAEE8h case    0:*/		regs.R12 = regs.LR;
		/* 821CAEE8h case    0:*/		return 0x821CAEEC;
		  /* 821CAEECh */ case    1:  		/* bl -1285272 */
		/* 821CAEECh case    1:*/		regs.LR = 0x821CAEF0; return 0x82091254;
		/* 821CAEECh case    1:*/		return 0x821CAEF0;
		  /* 821CAEF0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CAEF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CAEF0h case    2:*/		return 0x821CAEF4;
		  /* 821CAEF4h */ case    3:  		/* mr R31, R4 */
		/* 821CAEF4h case    3:*/		regs.R31 = regs.R4;
		/* 821CAEF4h case    3:*/		return 0x821CAEF8;
		  /* 821CAEF8h */ case    4:  		/* mr R3, R5 */
		/* 821CAEF8h case    4:*/		regs.R3 = regs.R5;
		/* 821CAEF8h case    4:*/		return 0x821CAEFC;
		  /* 821CAEFCh */ case    5:  		/* mr R4, R6 */
		/* 821CAEFCh case    5:*/		regs.R4 = regs.R6;
		/* 821CAEFCh case    5:*/		return 0x821CAF00;
		  /* 821CAF00h */ case    6:  		/* mr R30, R8 */
		/* 821CAF00h case    6:*/		regs.R30 = regs.R8;
		/* 821CAF00h case    6:*/		return 0x821CAF04;
		  /* 821CAF04h */ case    7:  		/* mr R9, R7 */
		/* 821CAF04h case    7:*/		regs.R9 = regs.R7;
		/* 821CAF04h case    7:*/		return 0x821CAF08;
		  /* 821CAF08h */ case    8:  		/* li R10, 0 */
		/* 821CAF08h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CAF08h case    8:*/		return 0x821CAF0C;
		  /* 821CAF0Ch */ case    9:  		/* li R8, 0 */
		/* 821CAF0Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CAF0Ch case    9:*/		return 0x821CAF10;
		  /* 821CAF10h */ case   10:  		/* addi R7, R1, 88 */
		/* 821CAF10h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 821CAF10h case   10:*/		return 0x821CAF14;
		  /* 821CAF14h */ case   11:  		/* addi R6, R1, 84 */
		/* 821CAF14h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821CAF14h case   11:*/		return 0x821CAF18;
		  /* 821CAF18h */ case   12:  		/* addi R5, R1, 80 */
		/* 821CAF18h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821CAF18h case   12:*/		return 0x821CAF1C;
		  /* 821CAF1Ch */ case   13:  		/* bl 361908 */
		/* 821CAF1Ch case   13:*/		regs.LR = 0x821CAF20; return 0x822234D0;
		/* 821CAF1Ch case   13:*/		return 0x821CAF20;
		  /* 821CAF20h */ case   14:  		/* lwz R11, <#[R31 + 4]> */
		/* 821CAF20h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821CAF20h case   14:*/		return 0x821CAF24;
		  /* 821CAF24h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CAF24h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CAF24h case   15:*/		return 0x821CAF28;
		  /* 821CAF28h */ case   16:  		/* lwz R29, <#[R1 + 80]> */
		/* 821CAF28h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821CAF28h case   16:*/		return 0x821CAF2C;
		  /* 821CAF2Ch */ case   17:  		/* lwz R28, <#[R1 + 84]> */
		/* 821CAF2Ch case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 821CAF2Ch case   17:*/		return 0x821CAF30;
		  /* 821CAF30h */ case   18:  		/* lwz R27, <#[R1 + 88]> */
		/* 821CAF30h case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821CAF30h case   18:*/		return 0x821CAF34;
		  /* 821CAF34h */ case   19:  		/* bc 4, CR0_EQ, 40 */
		/* 821CAF34h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821CAF5C;  }
		/* 821CAF34h case   19:*/		return 0x821CAF38;
		  /* 821CAF38h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 821CAF38h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CAF38h case   20:*/		return 0x821CAF3C;
		  /* 821CAF3Ch */ case   21:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CAF3Ch case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CAF3Ch case   21:*/		return 0x821CAF40;
		  /* 821CAF40h */ case   22:  		/* addic. R3, R11, -4 */
		/* 821CAF40h case   22:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CAF40h case   22:*/		return 0x821CAF44;
		  /* 821CAF44h */ case   23:  		/* bc 12, CR0_EQ, 24 */
		/* 821CAF44h case   23:*/		if ( regs.CR[0].eq ) { return 0x821CAF5C;  }
		/* 821CAF44h case   23:*/		return 0x821CAF48;
		  /* 821CAF48h */ case   24:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CAF48h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CAF48h case   24:*/		return 0x821CAF4C;
		  /* 821CAF4Ch */ case   25:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CAF4Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CAF4Ch case   25:*/		return 0x821CAF50;
		  /* 821CAF50h */ case   26:  		/* addi R11, R11, 1 */
		/* 821CAF50h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CAF50h case   26:*/		return 0x821CAF54;
		  /* 821CAF54h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 821CAF54h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CAF54h case   27:*/		return 0x821CAF58;
		  /* 821CAF58h */ case   28:  		/* bc 4, CR6_GT, 16 */
		/* 821CAF58h case   28:*/		if ( !regs.CR[6].gt ) { return 0x821CAF68;  }
		/* 821CAF58h case   28:*/		return 0x821CAF5C;
	}
	return 0x821CAF5C;
} // Block from 821CAEE8h-821CAF5Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821CAF5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAF5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAF5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAF5C);
		  /* 821CAF5Ch */ case    0:  		/* li R4, 1 */
		/* 821CAF5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CAF5Ch case    0:*/		return 0x821CAF60;
		  /* 821CAF60h */ case    1:  		/* mr R3, R31 */
		/* 821CAF60h case    1:*/		regs.R3 = regs.R31;
		/* 821CAF60h case    1:*/		return 0x821CAF64;
		  /* 821CAF64h */ case    2:  		/* bl 159108 */
		/* 821CAF64h case    2:*/		regs.LR = 0x821CAF68; return 0x821F1CE8;
		/* 821CAF64h case    2:*/		return 0x821CAF68;
	}
	return 0x821CAF68;
} // Block from 821CAF5Ch-821CAF68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CAF68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAF68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAF68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAF68);
		  /* 821CAF68h */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CAF68h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CAF68h case    0:*/		return 0x821CAF6C;
		  /* 821CAF6Ch */ case    1:  		/* mulli R11, R10, 12 */
		/* 821CAF6Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0xC);
		/* 821CAF6Ch case    1:*/		return 0x821CAF70;
		  /* 821CAF70h */ case    2:  		/* add R11, R11, R3 */
		/* 821CAF70h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821CAF70h case    2:*/		return 0x821CAF74;
		  /* 821CAF74h */ case    3:  		/* addi R9, R10, 1 */
		/* 821CAF74h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 821CAF74h case    3:*/		return 0x821CAF78;
		  /* 821CAF78h */ case    4:  		/* addi R10, R11, 16 */
		/* 821CAF78h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 821CAF78h case    4:*/		return 0x821CAF7C;
		  /* 821CAF7Ch */ case    5:  		/* stw R9, <#[R3 + 8]> */
		/* 821CAF7Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CAF7Ch case    5:*/		return 0x821CAF80;
		  /* 821CAF80h */ case    6:  		/* stw R29, <#[R11 + 16]> */
		/* 821CAF80h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 821CAF80h case    6:*/		return 0x821CAF84;
		  /* 821CAF84h */ case    7:  		/* stw R28, <#[R11 + 20]> */
		/* 821CAF84h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000014) );
		/* 821CAF84h case    7:*/		return 0x821CAF88;
		  /* 821CAF88h */ case    8:  		/* stw R27, <#[R11 + 24]> */
		/* 821CAF88h case    8:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000018) );
		/* 821CAF88h case    8:*/		return 0x821CAF8C;
		  /* 821CAF8Ch */ case    9:  		/* lwz R4, <#[R1 + 84]> */
		/* 821CAF8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821CAF8Ch case    9:*/		return 0x821CAF90;
		  /* 821CAF90h */ case   10:  		/* lwz R3, <#[R1 + 80]> */
		/* 821CAF90h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821CAF90h case   10:*/		return 0x821CAF94;
		  /* 821CAF94h */ case   11:  		/* bl -55396 */
		/* 821CAF94h case   11:*/		regs.LR = 0x821CAF98; return 0x821BD730;
		/* 821CAF94h case   11:*/		return 0x821CAF98;
		  /* 821CAF98h */ case   12:  		/* stw R3, <#[R30]> */
		/* 821CAF98h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821CAF98h case   12:*/		return 0x821CAF9C;
		  /* 821CAF9Ch */ case   13:  		/* addi R1, R1, 144 */
		/* 821CAF9Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CAF9Ch case   13:*/		return 0x821CAFA0;
		  /* 821CAFA0h */ case   14:  		/* b -1285372 */
		/* 821CAFA0h case   14:*/		return 0x820912A4;
		/* 821CAFA0h case   14:*/		return 0x821CAFA4;
		  /* 821CAFA4h */ case   15:  		/* nop */
		/* 821CAFA4h case   15:*/		cpu::op::nop();
		/* 821CAFA4h case   15:*/		return 0x821CAFA8;
	}
	return 0x821CAFA8;
} // Block from 821CAF68h-821CAFA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821CAFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CAFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CAFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CAFA8);
		  /* 821CAFA8h */ case    0:  		/* mfspr R12, LR */
		/* 821CAFA8h case    0:*/		regs.R12 = regs.LR;
		/* 821CAFA8h case    0:*/		return 0x821CAFAC;
		  /* 821CAFACh */ case    1:  		/* bl -1285468 */
		/* 821CAFACh case    1:*/		regs.LR = 0x821CAFB0; return 0x82091250;
		/* 821CAFACh case    1:*/		return 0x821CAFB0;
		  /* 821CAFB0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CAFB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CAFB0h case    2:*/		return 0x821CAFB4;
		  /* 821CAFB4h */ case    3:  		/* mr R31, R8 */
		/* 821CAFB4h case    3:*/		regs.R31 = regs.R8;
		/* 821CAFB4h case    3:*/		return 0x821CAFB8;
		  /* 821CAFB8h */ case    4:  		/* addi R8, R1, 80 */
		/* 821CAFB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821CAFB8h case    4:*/		return 0x821CAFBC;
		  /* 821CAFBCh */ case    5:  		/* mr R28, R5 */
		/* 821CAFBCh case    5:*/		regs.R28 = regs.R5;
		/* 821CAFBCh case    5:*/		return 0x821CAFC0;
		  /* 821CAFC0h */ case    6:  		/* lwz R5, <#[R5 + 44]> */
		/* 821CAFC0h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000002C) );
		/* 821CAFC0h case    6:*/		return 0x821CAFC4;
		  /* 821CAFC4h */ case    7:  		/* mr R30, R3 */
		/* 821CAFC4h case    7:*/		regs.R30 = regs.R3;
		/* 821CAFC4h case    7:*/		return 0x821CAFC8;
		  /* 821CAFC8h */ case    8:  		/* mr R29, R4 */
		/* 821CAFC8h case    8:*/		regs.R29 = regs.R4;
		/* 821CAFC8h case    8:*/		return 0x821CAFCC;
		  /* 821CAFCCh */ case    9:  		/* mr R27, R6 */
		/* 821CAFCCh case    9:*/		regs.R27 = regs.R6;
		/* 821CAFCCh case    9:*/		return 0x821CAFD0;
		  /* 821CAFD0h */ case   10:  		/* mr R26, R7 */
		/* 821CAFD0h case   10:*/		regs.R26 = regs.R7;
		/* 821CAFD0h case   10:*/		return 0x821CAFD4;
		  /* 821CAFD4h */ case   11:  		/* bl -236 */
		/* 821CAFD4h case   11:*/		regs.LR = 0x821CAFD8; return 0x821CAEE8;
		/* 821CAFD4h case   11:*/		return 0x821CAFD8;
		  /* 821CAFD8h */ case   12:  		/* addi R8, R1, 84 */
		/* 821CAFD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 821CAFD8h case   12:*/		return 0x821CAFDC;
		  /* 821CAFDCh */ case   13:  		/* lwz R5, <#[R28 + 48]> */
		/* 821CAFDCh case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x00000030) );
		/* 821CAFDCh case   13:*/		return 0x821CAFE0;
		  /* 821CAFE0h */ case   14:  		/* mr R7, R26 */
		/* 821CAFE0h case   14:*/		regs.R7 = regs.R26;
		/* 821CAFE0h case   14:*/		return 0x821CAFE4;
		  /* 821CAFE4h */ case   15:  		/* mr R6, R27 */
		/* 821CAFE4h case   15:*/		regs.R6 = regs.R27;
		/* 821CAFE4h case   15:*/		return 0x821CAFE8;
		  /* 821CAFE8h */ case   16:  		/* mr R4, R29 */
		/* 821CAFE8h case   16:*/		regs.R4 = regs.R29;
		/* 821CAFE8h case   16:*/		return 0x821CAFEC;
		  /* 821CAFECh */ case   17:  		/* mr R3, R30 */
		/* 821CAFECh case   17:*/		regs.R3 = regs.R30;
		/* 821CAFECh case   17:*/		return 0x821CAFF0;
		  /* 821CAFF0h */ case   18:  		/* bl -264 */
		/* 821CAFF0h case   18:*/		regs.LR = 0x821CAFF4; return 0x821CAEE8;
		/* 821CAFF0h case   18:*/		return 0x821CAFF4;
		  /* 821CAFF4h */ case   19:  		/* lwz R10, <#[R1 + 80]> */
		/* 821CAFF4h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821CAFF4h case   19:*/		return 0x821CAFF8;
		  /* 821CAFF8h */ case   20:  		/* cmpwi CR6, R10, 0 */
		/* 821CAFF8h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821CAFF8h case   20:*/		return 0x821CAFFC;
		  /* 821CAFFCh */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821CAFFCh case   21:*/		if ( regs.CR[6].eq ) { return 0x821CB00C;  }
		/* 821CAFFCh case   21:*/		return 0x821CB000;
		  /* 821CB000h */ case   22:  		/* lwz R11, <#[R1 + 84]> */
		/* 821CB000h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB000h case   22:*/		return 0x821CB004;
		  /* 821CB004h */ case   23:  		/* cmpwi CR6, R11, 0 */
		/* 821CB004h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821CB004h case   23:*/		return 0x821CB008;
		  /* 821CB008h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB008h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821CB010;  }
		/* 821CB008h case   24:*/		return 0x821CB00C;
	}
	return 0x821CB00C;
} // Block from 821CAFA8h-821CB00Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821CB00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB00C);
		  /* 821CB00Ch */ case    0:  		/* li R10, 0 */
		/* 821CB00Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CB00Ch case    0:*/		return 0x821CB010;
	}
	return 0x821CB010;
} // Block from 821CB00Ch-821CB010h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB010);
		  /* 821CB010h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821CB010h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB010h case    0:*/		return 0x821CB014;
		  /* 821CB014h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 821CB014h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 821CB014h case    1:*/		return 0x821CB018;
		  /* 821CB018h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821CB018h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821CB024;  }
		/* 821CB018h case    2:*/		return 0x821CB01C;
		  /* 821CB01Ch */ case    3:  		/* stw R10, <#[R31]> */
		/* 821CB01Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB01Ch case    3:*/		return 0x821CB020;
		  /* 821CB020h */ case    4:  		/* b 20 */
		/* 821CB020h case    4:*/		return 0x821CB034;
		/* 821CB020h case    4:*/		return 0x821CB024;
	}
	return 0x821CB024;
} // Block from 821CB010h-821CB024h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB024);
		  /* 821CB024h */ case    0:  		/* cmpw CR6, R11, R10 */
		/* 821CB024h case    0:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CB024h case    0:*/		return 0x821CB028;
		  /* 821CB028h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821CB028h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CB034;  }
		/* 821CB028h case    1:*/		return 0x821CB02C;
		  /* 821CB02Ch */ case    2:  		/* li R11, -2 */
		/* 821CB02Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFE);
		/* 821CB02Ch case    2:*/		return 0x821CB030;
		  /* 821CB030h */ case    3:  		/* stw R11, <#[R31]> */
		/* 821CB030h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB030h case    3:*/		return 0x821CB034;
	}
	return 0x821CB034;
} // Block from 821CB024h-821CB034h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB034);
		  /* 821CB034h */ case    0:  		/* addi R1, R1, 144 */
		/* 821CB034h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CB034h case    0:*/		return 0x821CB038;
		  /* 821CB038h */ case    1:  		/* b -1285528 */
		/* 821CB038h case    1:*/		return 0x820912A0;
		/* 821CB038h case    1:*/		return 0x821CB03C;
		  /* 821CB03Ch */ case    2:  		/* nop */
		/* 821CB03Ch case    2:*/		cpu::op::nop();
		/* 821CB03Ch case    2:*/		return 0x821CB040;
	}
	return 0x821CB040;
} // Block from 821CB034h-821CB040h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB040);
		  /* 821CB040h */ case    0:  		/* mfspr R12, LR */
		/* 821CB040h case    0:*/		regs.R12 = regs.LR;
		/* 821CB040h case    0:*/		return 0x821CB044;
		  /* 821CB044h */ case    1:  		/* bl -1285616 */
		/* 821CB044h case    1:*/		regs.LR = 0x821CB048; return 0x82091254;
		/* 821CB044h case    1:*/		return 0x821CB048;
		  /* 821CB048h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821CB048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821CB048h case    2:*/		return 0x821CB04C;
		  /* 821CB04Ch */ case    3:  		/* addi R11, R5, 11 */
		/* 821CB04Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xB);
		/* 821CB04Ch case    3:*/		return 0x821CB050;
		  /* 821CB050h */ case    4:  		/* mr R30, R4 */
		/* 821CB050h case    4:*/		regs.R30 = regs.R4;
		/* 821CB050h case    4:*/		return 0x821CB054;
		  /* 821CB054h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821CB054h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821CB054h case    5:*/		return 0x821CB058;
		  /* 821CB058h */ case    6:  		/* mr R4, R6 */
		/* 821CB058h case    6:*/		regs.R4 = regs.R6;
		/* 821CB058h case    6:*/		return 0x821CB05C;
		  /* 821CB05Ch */ case    7:  		/* mr R29, R7 */
		/* 821CB05Ch case    7:*/		regs.R29 = regs.R7;
		/* 821CB05Ch case    7:*/		return 0x821CB060;
		  /* 821CB060h */ case    8:  		/* mr R31, R8 */
		/* 821CB060h case    8:*/		regs.R31 = regs.R8;
		/* 821CB060h case    8:*/		return 0x821CB064;
		  /* 821CB064h */ case    9:  		/* mr R27, R9 */
		/* 821CB064h case    9:*/		regs.R27 = regs.R9;
		/* 821CB064h case    9:*/		return 0x821CB068;
		  /* 821CB068h */ case   10:  		/* li R10, 0 */
		/* 821CB068h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CB068h case   10:*/		return 0x821CB06C;
		  /* 821CB06Ch */ case   11:  		/* mr R9, R30 */
		/* 821CB06Ch case   11:*/		regs.R9 = regs.R30;
		/* 821CB06Ch case   11:*/		return 0x821CB070;
		  /* 821CB070h */ case   12:  		/* li R8, 0 */
		/* 821CB070h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CB070h case   12:*/		return 0x821CB074;
		  /* 821CB074h */ case   13:  		/* addi R7, R1, 88 */
		/* 821CB074h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 821CB074h case   13:*/		return 0x821CB078;
		  /* 821CB078h */ case   14:  		/* addi R6, R1, 84 */
		/* 821CB078h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821CB078h case   14:*/		return 0x821CB07C;
		  /* 821CB07Ch */ case   15:  		/* addi R5, R1, 80 */
		/* 821CB07Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821CB07Ch case   15:*/		return 0x821CB080;
		  /* 821CB080h */ case   16:  		/* mr R28, R3 */
		/* 821CB080h case   16:*/		regs.R28 = regs.R3;
		/* 821CB080h case   16:*/		return 0x821CB084;
		  /* 821CB084h */ case   17:  		/* lwzx R3, <#[R11 + R30]> */
		/* 821CB084h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821CB084h case   17:*/		return 0x821CB088;
		  /* 821CB088h */ case   18:  		/* bl 361544 */
		/* 821CB088h case   18:*/		regs.LR = 0x821CB08C; return 0x822234D0;
		/* 821CB088h case   18:*/		return 0x821CB08C;
		  /* 821CB08Ch */ case   19:  		/* lwz R11, <#[R1 + 88]> */
		/* 821CB08Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB08Ch case   19:*/		return 0x821CB090;
		  /* 821CB090h */ case   20:  		/* lwz R10, <#[R1 + 80]> */
		/* 821CB090h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB090h case   20:*/		return 0x821CB094;
		  /* 821CB094h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821CB094h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CB094h case   21:*/		return 0x821CB098;
		  /* 821CB098h */ case   22:  		/* bc 4, CR6_EQ, 180 */
		/* 821CB098h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821CB14C;  }
		/* 821CB098h case   22:*/		return 0x821CB09C;
		  /* 821CB09Ch */ case   23:  		/* lwz R9, <#[R10 + 8]> */
		/* 821CB09Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB09Ch case   23:*/		return 0x821CB0A0;
		  /* 821CB0A0h */ case   24:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821CB0A0h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821CB0A0h case   24:*/		return 0x821CB0A4;
		  /* 821CB0A4h */ case   25:  		/* cmplwi CR6, R9, 256 */
		/* 821CB0A4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000100);
		/* 821CB0A4h case   25:*/		return 0x821CB0A8;
		  /* 821CB0A8h */ case   26:  		/* bc 4, CR6_EQ, 164 */
		/* 821CB0A8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821CB14C;  }
		/* 821CB0A8h case   26:*/		return 0x821CB0AC;
		  /* 821CB0ACh */ case   27:  		/* li R5, 51 */
		/* 821CB0ACh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821CB0ACh case   27:*/		return 0x821CB0B0;
		  /* 821CB0B0h */ case   28:  		/* li R4, 8 */
		/* 821CB0B0h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CB0B0h case   28:*/		return 0x821CB0B4;
		  /* 821CB0B4h */ case   29:  		/* mr R3, R28 */
		/* 821CB0B4h case   29:*/		regs.R3 = regs.R28;
		/* 821CB0B4h case   29:*/		return 0x821CB0B8;
		  /* 821CB0B8h */ case   30:  		/* bl -419784 */
		/* 821CB0B8h case   30:*/		regs.LR = 0x821CB0BC; return 0x821648F0;
		/* 821CB0B8h case   30:*/		return 0x821CB0BC;
		  /* 821CB0BCh */ case   31:  		/* addi R11, R3, 4 */
		/* 821CB0BCh case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821CB0BCh case   31:*/		return 0x821CB0C0;
		  /* 821CB0C0h */ case   32:  		/* ori R10, R3, 1 */
		/* 821CB0C0h case   32:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821CB0C0h case   32:*/		return 0x821CB0C4;
		  /* 821CB0C4h */ case   33:  		/* ori R11, R11, 1 */
		/* 821CB0C4h case   33:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB0C4h case   33:*/		return 0x821CB0C8;
		  /* 821CB0C8h */ case   34:  		/* stw R10, <#[R3 + 4]> */
		/* 821CB0C8h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB0C8h case   34:*/		return 0x821CB0CC;
		  /* 821CB0CCh */ case   35:  		/* mr R31, R3 */
		/* 821CB0CCh case   35:*/		regs.R31 = regs.R3;
		/* 821CB0CCh case   35:*/		return 0x821CB0D0;
		  /* 821CB0D0h */ case   36:  		/* stw R11, <#[R3]> */
		/* 821CB0D0h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB0D0h case   36:*/		return 0x821CB0D4;
		  /* 821CB0D4h */ case   37:  		/* lwz R11, <#[R29 + 4]> */
		/* 821CB0D4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821CB0D4h case   37:*/		return 0x821CB0D8;
		  /* 821CB0D8h */ case   38:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821CB0D8h case   38:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821CB0D8h case   38:*/		return 0x821CB0DC;
		  /* 821CB0DCh */ case   39:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB0DCh case   39:*/		if ( !regs.CR[0].eq ) { return 0x821CB104;  }
		/* 821CB0DCh case   39:*/		return 0x821CB0E0;
		  /* 821CB0E0h */ case   40:  		/* lwz R11, <#[R29]> */
		/* 821CB0E0h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821CB0E0h case   40:*/		return 0x821CB0E4;
		  /* 821CB0E4h */ case   41:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB0E4h case   41:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB0E4h case   41:*/		return 0x821CB0E8;
		  /* 821CB0E8h */ case   42:  		/* addic. R11, R11, -4 */
		/* 821CB0E8h case   42:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CB0E8h case   42:*/		return 0x821CB0EC;
		  /* 821CB0ECh */ case   43:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB0ECh case   43:*/		if ( regs.CR[0].eq ) { return 0x821CB104;  }
		/* 821CB0ECh case   43:*/		return 0x821CB0F0;
		  /* 821CB0F0h */ case   44:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CB0F0h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB0F0h case   44:*/		return 0x821CB0F4;
		  /* 821CB0F4h */ case   45:  		/* lwz R9, <#[R11 + 12]> */
		/* 821CB0F4h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821CB0F4h case   45:*/		return 0x821CB0F8;
		  /* 821CB0F8h */ case   46:  		/* addi R10, R10, 1 */
		/* 821CB0F8h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821CB0F8h case   46:*/		return 0x821CB0FC;
		  /* 821CB0FCh */ case   47:  		/* cmplw CR6, R10, R9 */
		/* 821CB0FCh case   47:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821CB0FCh case   47:*/		return 0x821CB100;
	}
	return 0x821CB100;
} // Block from 821CB040h-821CB100h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821CB100h
// Function '?IsInverseProductTermList@Compiler@D3DXShader@@AAA_NPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB100);
		  /* 821CB100h */ case    0:  		/* bc 4, CR6_GT, 20 */
		/* 821CB100h case    0:*/		if ( !regs.CR[6].gt ) { return 0x821CB114;  }
		/* 821CB100h case    0:*/		return 0x821CB104;
	}
	return 0x821CB104;
} // Block from 821CB100h-821CB104h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB104);
		  /* 821CB104h */ case    0:  		/* li R4, 1 */
		/* 821CB104h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB104h case    0:*/		return 0x821CB108;
		  /* 821CB108h */ case    1:  		/* mr R3, R29 */
		/* 821CB108h case    1:*/		regs.R3 = regs.R29;
		/* 821CB108h case    1:*/		return 0x821CB10C;
		  /* 821CB10Ch */ case    2:  		/* bl -254020 */
		/* 821CB10Ch case    2:*/		regs.LR = 0x821CB110; return 0x8218D0C8;
		/* 821CB10Ch case    2:*/		return 0x821CB110;
		  /* 821CB110h */ case    3:  		/* mr R11, R3 */
		/* 821CB110h case    3:*/		regs.R11 = regs.R3;
		/* 821CB110h case    3:*/		return 0x821CB114;
	}
	return 0x821CB114;
} // Block from 821CB104h-821CB114h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB114);
		  /* 821CB114h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CB114h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB114h case    0:*/		return 0x821CB118;
		  /* 821CB118h */ case    1:  		/* mr R8, R27 */
		/* 821CB118h case    1:*/		regs.R8 = regs.R27;
		/* 821CB118h case    1:*/		return 0x821CB11C;
		  /* 821CB11Ch */ case    2:  		/* mr R7, R30 */
		/* 821CB11Ch case    2:*/		regs.R7 = regs.R30;
		/* 821CB11Ch case    2:*/		return 0x821CB120;
		  /* 821CB120h */ case    3:  		/* addi R9, R10, 4 */
		/* 821CB120h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821CB120h case    3:*/		return 0x821CB124;
		  /* 821CB124h */ case    4:  		/* addi R6, R10, 1 */
		/* 821CB124h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1);
		/* 821CB124h case    4:*/		return 0x821CB128;
		  /* 821CB128h */ case    5:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821CB128h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821CB128h case    5:*/		return 0x821CB12C;
		  /* 821CB12Ch */ case    6:  		/* stw R6, <#[R11 + 8]> */
		/* 821CB12Ch case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB12Ch case    6:*/		return 0x821CB130;
		  /* 821CB130h */ case    7:  		/* mr R4, R31 */
		/* 821CB130h case    7:*/		regs.R4 = regs.R31;
		/* 821CB130h case    7:*/		return 0x821CB134;
		  /* 821CB134h */ case    8:  		/* mr R3, R28 */
		/* 821CB134h case    8:*/		regs.R3 = regs.R28;
		/* 821CB134h case    8:*/		return 0x821CB138;
		  /* 821CB138h */ case    9:  		/* stwx R31, <#[R10 + R11]> */
		/* 821CB138h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821CB138h case    9:*/		return 0x821CB13C;
		  /* 821CB13Ch */ case   10:  		/* lwz R5, <#[R1 + 80]> */
		/* 821CB13Ch case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821CB13Ch case   10:*/		return 0x821CB140;
		  /* 821CB140h */ case   11:  		/* lwz R6, <#[R1 + 84]> */
		/* 821CB140h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB140h case   11:*/		return 0x821CB144;
		  /* 821CB144h */ case   12:  		/* bl -412 */
		/* 821CB144h case   12:*/		regs.LR = 0x821CB148; return 0x821CAFA8;
		/* 821CB144h case   12:*/		return 0x821CB148;
		  /* 821CB148h */ case   13:  		/* b 112 */
		/* 821CB148h case   13:*/		return 0x821CB1B8;
		/* 821CB148h case   13:*/		return 0x821CB14C;
	}
	return 0x821CB14C;
} // Block from 821CB114h-821CB14Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821CB14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB14C);
		  /* 821CB14Ch */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 821CB14Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 821CB14Ch case    0:*/		return 0x821CB150;
		  /* 821CB150h */ case    1:  		/* mr R28, R11 */
		/* 821CB150h case    1:*/		regs.R28 = regs.R11;
		/* 821CB150h case    1:*/		return 0x821CB154;
		  /* 821CB154h */ case    2:  		/* lwz R29, <#[R1 + 84]> */
		/* 821CB154h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821CB154h case    2:*/		return 0x821CB158;
		  /* 821CB158h */ case    3:  		/* mr R30, R10 */
		/* 821CB158h case    3:*/		regs.R30 = regs.R10;
		/* 821CB158h case    3:*/		return 0x821CB15C;
		  /* 821CB15Ch */ case    4:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 821CB15Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 821CB15Ch case    4:*/		return 0x821CB160;
		  /* 821CB160h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB160h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CB188;  }
		/* 821CB160h case    5:*/		return 0x821CB164;
		  /* 821CB164h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 821CB164h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB164h case    6:*/		return 0x821CB168;
		  /* 821CB168h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB168h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB168h case    7:*/		return 0x821CB16C;
		  /* 821CB16Ch */ case    8:  		/* addic. R3, R11, -4 */
		/* 821CB16Ch case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821CB16Ch case    8:*/		return 0x821CB170;
		  /* 821CB170h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB170h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CB188;  }
		/* 821CB170h case    9:*/		return 0x821CB174;
		  /* 821CB174h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CB174h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB174h case   10:*/		return 0x821CB178;
		  /* 821CB178h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821CB178h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821CB178h case   11:*/		return 0x821CB17C;
		  /* 821CB17Ch */ case   12:  		/* addi R11, R11, 1 */
		/* 821CB17Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB17Ch case   12:*/		return 0x821CB180;
		  /* 821CB180h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821CB180h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CB180h case   13:*/		return 0x821CB184;
		  /* 821CB184h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821CB184h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CB194;  }
		/* 821CB184h case   14:*/		return 0x821CB188;
	}
	return 0x821CB188;
} // Block from 821CB14Ch-821CB188h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CB188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB188);
		  /* 821CB188h */ case    0:  		/* li R4, 1 */
		/* 821CB188h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB188h case    0:*/		return 0x821CB18C;
		  /* 821CB18Ch */ case    1:  		/* mr R3, R31 */
		/* 821CB18Ch case    1:*/		regs.R3 = regs.R31;
		/* 821CB18Ch case    1:*/		return 0x821CB190;
		  /* 821CB190h */ case    2:  		/* bl 158552 */
		/* 821CB190h case    2:*/		regs.LR = 0x821CB194; return 0x821F1CE8;
		/* 821CB190h case    2:*/		return 0x821CB194;
	}
	return 0x821CB194;
} // Block from 821CB188h-821CB194h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB194);
		  /* 821CB194h */ case    0:  		/* lwz R10, <#[R3 + 8]> */
		/* 821CB194h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB194h case    0:*/		return 0x821CB198;
		  /* 821CB198h */ case    1:  		/* mulli R11, R10, 12 */
		/* 821CB198h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R10,0xC);
		/* 821CB198h case    1:*/		return 0x821CB19C;
		  /* 821CB19Ch */ case    2:  		/* add R11, R11, R3 */
		/* 821CB19Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821CB19Ch case    2:*/		return 0x821CB1A0;
		  /* 821CB1A0h */ case    3:  		/* addi R9, R10, 1 */
		/* 821CB1A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 821CB1A0h case    3:*/		return 0x821CB1A4;
		  /* 821CB1A4h */ case    4:  		/* addi R10, R11, 16 */
		/* 821CB1A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x10);
		/* 821CB1A4h case    4:*/		return 0x821CB1A8;
		  /* 821CB1A8h */ case    5:  		/* stw R9, <#[R3 + 8]> */
		/* 821CB1A8h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB1A8h case    5:*/		return 0x821CB1AC;
		  /* 821CB1ACh */ case    6:  		/* stw R30, <#[R11 + 16]> */
		/* 821CB1ACh case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821CB1ACh case    6:*/		return 0x821CB1B0;
		  /* 821CB1B0h */ case    7:  		/* stw R29, <#[R11 + 20]> */
		/* 821CB1B0h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB1B0h case    7:*/		return 0x821CB1B4;
		  /* 821CB1B4h */ case    8:  		/* stw R28, <#[R11 + 24]> */
		/* 821CB1B4h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB1B4h case    8:*/		return 0x821CB1B8;
	}
	return 0x821CB1B8;
} // Block from 821CB194h-821CB1B8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821CB1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB1B8);
		  /* 821CB1B8h */ case    0:  		/* addi R1, R1, 144 */
		/* 821CB1B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821CB1B8h case    0:*/		return 0x821CB1BC;
		  /* 821CB1BCh */ case    1:  		/* b -1285912 */
		/* 821CB1BCh case    1:*/		return 0x820912A4;
		/* 821CB1BCh case    1:*/		return 0x821CB1C0;
	}
	return 0x821CB1C0;
} // Block from 821CB1B8h-821CB1C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821CB1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB1C0);
		  /* 821CB1C0h */ case    0:  		/* mfspr R12, LR */
		/* 821CB1C0h case    0:*/		regs.R12 = regs.LR;
		/* 821CB1C0h case    0:*/		return 0x821CB1C4;
		  /* 821CB1C4h */ case    1:  		/* bl -1286004 */
		/* 821CB1C4h case    1:*/		regs.LR = 0x821CB1C8; return 0x82091250;
		/* 821CB1C4h case    1:*/		return 0x821CB1C8;
		  /* 821CB1C8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821CB1C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821CB1C8h case    2:*/		return 0x821CB1CC;
		  /* 821CB1CCh */ case    3:  		/* mr R27, R4 */
		/* 821CB1CCh case    3:*/		regs.R27 = regs.R4;
		/* 821CB1CCh case    3:*/		return 0x821CB1D0;
		  /* 821CB1D0h */ case    4:  		/* mr R26, R5 */
		/* 821CB1D0h case    4:*/		regs.R26 = regs.R5;
		/* 821CB1D0h case    4:*/		return 0x821CB1D4;
		  /* 821CB1D4h */ case    5:  		/* li R5, 51 */
		/* 821CB1D4h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821CB1D4h case    5:*/		return 0x821CB1D8;
		  /* 821CB1D8h */ case    6:  		/* li R4, 8 */
		/* 821CB1D8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CB1D8h case    6:*/		return 0x821CB1DC;
		  /* 821CB1DCh */ case    7:  		/* mr R31, R3 */
		/* 821CB1DCh case    7:*/		regs.R31 = regs.R3;
		/* 821CB1DCh case    7:*/		return 0x821CB1E0;
		  /* 821CB1E0h */ case    8:  		/* mr R30, R6 */
		/* 821CB1E0h case    8:*/		regs.R30 = regs.R6;
		/* 821CB1E0h case    8:*/		return 0x821CB1E4;
		  /* 821CB1E4h */ case    9:  		/* bl -420084 */
		/* 821CB1E4h case    9:*/		regs.LR = 0x821CB1E8; return 0x821648F0;
		/* 821CB1E4h case    9:*/		return 0x821CB1E8;
		  /* 821CB1E8h */ case   10:  		/* addi R29, R3, 4 */
		/* 821CB1E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x4);
		/* 821CB1E8h case   10:*/		return 0x821CB1EC;
		  /* 821CB1ECh */ case   11:  		/* ori R11, R3, 1 */
		/* 821CB1ECh case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CB1ECh case   11:*/		return 0x821CB1F0;
		  /* 821CB1F0h */ case   12:  		/* ori R8, R29, 1 */
		/* 821CB1F0h case   12:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R29,0x1);
		/* 821CB1F0h case   12:*/		return 0x821CB1F4;
		  /* 821CB1F4h */ case   13:  		/* stw R11, <#[R3 + 4]> */
		/* 821CB1F4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB1F4h case   13:*/		return 0x821CB1F8;
		  /* 821CB1F8h */ case   14:  		/* mr R28, R3 */
		/* 821CB1F8h case   14:*/		regs.R28 = regs.R3;
		/* 821CB1F8h case   14:*/		return 0x821CB1FC;
		  /* 821CB1FCh */ case   15:  		/* stw R8, <#[R3]> */
		/* 821CB1FCh case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB1FCh case   15:*/		return 0x821CB200;
		  /* 821CB200h */ case   16:  		/* li R10, 0 */
		/* 821CB200h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821CB200h case   16:*/		return 0x821CB204;
		  /* 821CB204h */ case   17:  		/* mr R9, R30 */
		/* 821CB204h case   17:*/		regs.R9 = regs.R30;
		/* 821CB204h case   17:*/		return 0x821CB208;
		  /* 821CB208h */ case   18:  		/* li R8, 0 */
		/* 821CB208h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821CB208h case   18:*/		return 0x821CB20C;
		  /* 821CB20Ch */ case   19:  		/* addi R7, R1, 96 */
		/* 821CB20Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 821CB20Ch case   19:*/		return 0x821CB210;
		  /* 821CB210h */ case   20:  		/* addi R6, R1, 92 */
		/* 821CB210h case   20:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C);
		/* 821CB210h case   20:*/		return 0x821CB214;
		  /* 821CB214h */ case   21:  		/* addi R5, R1, 88 */
		/* 821CB214h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821CB214h case   21:*/		return 0x821CB218;
		  /* 821CB218h */ case   22:  		/* mr R4, R26 */
		/* 821CB218h case   22:*/		regs.R4 = regs.R26;
		/* 821CB218h case   22:*/		return 0x821CB21C;
		  /* 821CB21Ch */ case   23:  		/* mr R3, R27 */
		/* 821CB21Ch case   23:*/		regs.R3 = regs.R27;
		/* 821CB21Ch case   23:*/		return 0x821CB220;
		  /* 821CB220h */ case   24:  		/* bl 361136 */
		/* 821CB220h case   24:*/		regs.LR = 0x821CB224; return 0x822234D0;
		/* 821CB220h case   24:*/		return 0x821CB224;
		  /* 821CB224h */ case   25:  		/* lwz R11, <#[R1 + 96]> */
		/* 821CB224h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821CB224h case   25:*/		return 0x821CB228;
		  /* 821CB228h */ case   26:  		/* rlwinm. R11, R11, 0, 30, 28 */
		/* 821CB228h case   26:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821CB228h case   26:*/		return 0x821CB22C;
		  /* 821CB22Ch */ case   27:  		/* lwz R11, <#[R1 + 88]> */
		/* 821CB22Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB22Ch case   27:*/		return 0x821CB230;
		  /* 821CB230h */ case   28:  		/* bc 4, CR0_EQ, 468 */
		/* 821CB230h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821CB404;  }
		/* 821CB230h case   28:*/		return 0x821CB234;
		  /* 821CB234h */ case   29:  		/* lwz R10, <#[R11 + 8]> */
		/* 821CB234h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB234h case   29:*/		return 0x821CB238;
		  /* 821CB238h */ case   30:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821CB238h case   30:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821CB238h case   30:*/		return 0x821CB23C;
		  /* 821CB23Ch */ case   31:  		/* cmplwi CR6, R10, 256 */
		/* 821CB23Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821CB23Ch case   31:*/		return 0x821CB240;
		  /* 821CB240h */ case   32:  		/* bc 4, CR6_EQ, 452 */
		/* 821CB240h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821CB404;  }
		/* 821CB240h case   32:*/		return 0x821CB244;
		  /* 821CB244h */ case   33:  		/* addi R8, R1, 80 */
		/* 821CB244h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821CB244h case   33:*/		return 0x821CB248;
		  /* 821CB248h */ case   34:  		/* lwz R5, <#[R11 + 44]> */
		/* 821CB248h case   34:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000002C) );
		/* 821CB248h case   34:*/		return 0x821CB24C;
		  /* 821CB24Ch */ case   35:  		/* mr R7, R30 */
		/* 821CB24Ch case   35:*/		regs.R7 = regs.R30;
		/* 821CB24Ch case   35:*/		return 0x821CB250;
		  /* 821CB250h */ case   36:  		/* lwz R6, <#[R1 + 92]> */
		/* 821CB250h case   36:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CB250h case   36:*/		return 0x821CB254;
		  /* 821CB254h */ case   37:  		/* mr R4, R28 */
		/* 821CB254h case   37:*/		regs.R4 = regs.R28;
		/* 821CB254h case   37:*/		return 0x821CB258;
		  /* 821CB258h */ case   38:  		/* mr R3, R31 */
		/* 821CB258h case   38:*/		regs.R3 = regs.R31;
		/* 821CB258h case   38:*/		return 0x821CB25C;
		  /* 821CB25Ch */ case   39:  		/* bl -884 */
		/* 821CB25Ch case   39:*/		regs.LR = 0x821CB260; return 0x821CAEE8;
		/* 821CB25Ch case   39:*/		return 0x821CB260;
		  /* 821CB260h */ case   40:  		/* lwz R11, <#[R1 + 88]> */
		/* 821CB260h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB260h case   40:*/		return 0x821CB264;
		  /* 821CB264h */ case   41:  		/* addi R8, R1, 80 */
		/* 821CB264h case   41:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 821CB264h case   41:*/		return 0x821CB268;
		  /* 821CB268h */ case   42:  		/* lwz R6, <#[R1 + 92]> */
		/* 821CB268h case   42:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CB268h case   42:*/		return 0x821CB26C;
		  /* 821CB26Ch */ case   43:  		/* mr R7, R30 */
		/* 821CB26Ch case   43:*/		regs.R7 = regs.R30;
		/* 821CB26Ch case   43:*/		return 0x821CB270;
		  /* 821CB270h */ case   44:  		/* mr R4, R28 */
		/* 821CB270h case   44:*/		regs.R4 = regs.R28;
		/* 821CB270h case   44:*/		return 0x821CB274;
		  /* 821CB274h */ case   45:  		/* mr R3, R31 */
		/* 821CB274h case   45:*/		regs.R3 = regs.R31;
		/* 821CB274h case   45:*/		return 0x821CB278;
		  /* 821CB278h */ case   46:  		/* lwz R5, <#[R11 + 48]> */
		/* 821CB278h case   46:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000030) );
		/* 821CB278h case   46:*/		return 0x821CB27C;
		  /* 821CB27Ch */ case   47:  		/* bl -916 */
		/* 821CB27Ch case   47:*/		regs.LR = 0x821CB280; return 0x821CAEE8;
		/* 821CB27Ch case   47:*/		return 0x821CB280;
		  /* 821CB280h */ case   48:  		/* lwz R9, <#[R29]> */
		/* 821CB280h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821CB280h case   48:*/		return 0x821CB284;
		  /* 821CB284h */ case   49:  		/* lwz R10, <#[R1 + 96]> */
		/* 821CB284h case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821CB284h case   49:*/		return 0x821CB288;
		  /* 821CB288h */ case   50:  		/* rlwinm R8, R9, 0, 31, 31 */
		/* 821CB288h case   50:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R9);
		/* 821CB288h case   50:*/		return 0x821CB28C;
		  /* 821CB28Ch */ case   51:  		/* addic R11, R8, -1 */
		/* 821CB28Ch case   51:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 821CB28Ch case   51:*/		return 0x821CB290;
		  /* 821CB290h */ case   52:  		/* subfe R11, R11, R11 */
		/* 821CB290h case   52:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821CB290h case   52:*/		return 0x821CB294;
		  /* 821CB294h */ case   53:  		/* and R11, R11, R9 */
		/* 821CB294h case   53:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CB294h case   53:*/		return 0x821CB298;
		  /* 821CB298h */ case   54:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CB298h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB298h case   54:*/		return 0x821CB29C;
		  /* 821CB29Ch */ case   55:  		/* rlwinm. R7, R11, 0, 27, 28 */
		/* 821CB29Ch case   55:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R7,regs.R11);
		/* 821CB29Ch case   55:*/		return 0x821CB2A0;
		  /* 821CB2A0h */ case   56:  		/* bc 12, CR0_EQ, 20 */
		/* 821CB2A0h case   56:*/		if ( regs.CR[0].eq ) { return 0x821CB2B4;  }
		/* 821CB2A0h case   56:*/		return 0x821CB2A4;
		  /* 821CB2A4h */ case   57:  		/* rlwinm. R7, R10, 0, 27, 28 */
		/* 821CB2A4h case   57:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R7,regs.R10);
		/* 821CB2A4h case   57:*/		return 0x821CB2A8;
		  /* 821CB2A8h */ case   58:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB2A8h case   58:*/		if ( regs.CR[0].eq ) { return 0x821CB2B4;  }
		/* 821CB2A8h case   58:*/		return 0x821CB2AC;
		  /* 821CB2ACh */ case   59:  		/* li R11, 0 */
		/* 821CB2ACh case   59:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CB2ACh case   59:*/		return 0x821CB2B0;
		  /* 821CB2B0h */ case   60:  		/* b 44 */
		/* 821CB2B0h case   60:*/		return 0x821CB2DC;
		/* 821CB2B0h case   60:*/		return 0x821CB2B4;
	}
	return 0x821CB2B4;
} // Block from 821CB1C0h-821CB2B4h (61 instructions)

//////////////////////////////////////////////////////
// Block at 821CB2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB2B4);
		  /* 821CB2B4h */ case    0:  		/* rlwinm. R7, R11, 0, 30, 30 */
		/* 821CB2B4h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R11);
		/* 821CB2B4h case    0:*/		return 0x821CB2B8;
		  /* 821CB2B8h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB2B8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB2C4;  }
		/* 821CB2B8h case    1:*/		return 0x821CB2BC;
		  /* 821CB2BCh */ case    2:  		/* rlwinm. R7, R10, 0, 31, 31 */
		/* 821CB2BCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R10);
		/* 821CB2BCh case    2:*/		return 0x821CB2C0;
		  /* 821CB2C0h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821CB2C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CB2AC;  }
		/* 821CB2C0h case    3:*/		return 0x821CB2C4;
	}
	return 0x821CB2C4;
} // Block from 821CB2B4h-821CB2C4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB2C4);
		  /* 821CB2C4h */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821CB2C4h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821CB2C4h case    0:*/		return 0x821CB2C8;
		  /* 821CB2C8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB2C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB2D8;  }
		/* 821CB2C8h case    1:*/		return 0x821CB2CC;
		  /* 821CB2CCh */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821CB2CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CB2CCh case    2:*/		return 0x821CB2D0;
		  /* 821CB2D0h */ case    3:  		/* li R11, 0 */
		/* 821CB2D0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CB2D0h case    3:*/		return 0x821CB2D4;
		  /* 821CB2D4h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821CB2D4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CB2DC;  }
		/* 821CB2D4h case    4:*/		return 0x821CB2D8;
	}
	return 0x821CB2D8;
} // Block from 821CB2C4h-821CB2D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB2D8);
		  /* 821CB2D8h */ case    0:  		/* li R11, 1 */
		/* 821CB2D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB2D8h case    0:*/		return 0x821CB2DC;
	}
	return 0x821CB2DC;
} // Block from 821CB2D8h-821CB2DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB2DC);
		  /* 821CB2DCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB2DCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB2DCh case    0:*/		return 0x821CB2E0;
		  /* 821CB2E0h */ case    1:  		/* addic R11, R8, -1 */
		/* 821CB2E0h case    1:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 821CB2E0h case    1:*/		return 0x821CB2E4;
		  /* 821CB2E4h */ case    2:  		/* subfe R11, R11, R11 */
		/* 821CB2E4h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821CB2E4h case    2:*/		return 0x821CB2E8;
		  /* 821CB2E8h */ case    3:  		/* and R11, R11, R9 */
		/* 821CB2E8h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CB2E8h case    3:*/		return 0x821CB2EC;
		  /* 821CB2ECh */ case    4:  		/* bc 12, CR0_EQ, 92 */
		/* 821CB2ECh case    4:*/		if ( regs.CR[0].eq ) { return 0x821CB348;  }
		/* 821CB2ECh case    4:*/		return 0x821CB2F0;
	}
	return 0x821CB2F0;
} // Block from 821CB2DCh-821CB2F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB2F0h
// Function '?AreProductTermListsIdentical_ExceptionInList2@Compiler@D3DXShader@@AAA_NPAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@0PAUProductTerm@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB2F0);
		  /* 821CB2F0h */ case    0:  		/* lwz R11, <#[R11 + 24]> */
		/* 821CB2F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB2F0h case    0:*/		return 0x821CB2F4;
		  /* 821CB2F4h */ case    1:  		/* rlwinm. R7, R11, 0, 29, 29 */
		/* 821CB2F4h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R11);
		/* 821CB2F4h case    1:*/		return 0x821CB2F8;
		  /* 821CB2F8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB2F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CB308;  }
		/* 821CB2F8h case    2:*/		return 0x821CB2FC;
		  /* 821CB2FCh */ case    3:  		/* rlwinm. R7, R10, 0, 30, 30 */
		/* 821CB2FCh case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R10);
		/* 821CB2FCh case    3:*/		return 0x821CB300;
		  /* 821CB300h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 821CB300h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CB308;  }
		/* 821CB300h case    4:*/		return 0x821CB304;
		  /* 821CB304h */ case    5:  		/* addi R11, R11, -4 */
		/* 821CB304h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CB304h case    5:*/		return 0x821CB308;
	}
	return 0x821CB308;
} // Block from 821CB2F0h-821CB308h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CB308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB308);
		  /* 821CB308h */ case    0:  		/* and R7, R11, R10 */
		/* 821CB308h case    0:*/		cpu::op::and<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821CB308h case    0:*/		return 0x821CB30C;
		  /* 821CB30Ch */ case    1:  		/* rlwinm. R7, R7, 0, 29, 29 */
		/* 821CB30Ch case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R7);
		/* 821CB30Ch case    1:*/		return 0x821CB310;
		  /* 821CB310h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB310h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CB31C;  }
		/* 821CB310h case    2:*/		return 0x821CB314;
		  /* 821CB314h */ case    3:  		/* addi R11, R11, -4 */
		/* 821CB314h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CB314h case    3:*/		return 0x821CB318;
		  /* 821CB318h */ case    4:  		/* addi R10, R10, -4 */
		/* 821CB318h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821CB318h case    4:*/		return 0x821CB31C;
	}
	return 0x821CB31C;
} // Block from 821CB308h-821CB31Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB31C);
		  /* 821CB31Ch */ case    0:  		/* rlwinm. R7, R11, 0, 31, 31 */
		/* 821CB31Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R11);
		/* 821CB31Ch case    0:*/		return 0x821CB320;
		  /* 821CB320h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB320h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB330;  }
		/* 821CB320h case    1:*/		return 0x821CB324;
		  /* 821CB324h */ case    2:  		/* rlwinm. R7, R10, 0, 30, 30 */
		/* 821CB324h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R10);
		/* 821CB324h case    2:*/		return 0x821CB328;
		  /* 821CB328h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CB328h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CB330;  }
		/* 821CB328h case    3:*/		return 0x821CB32C;
		  /* 821CB32Ch */ case    4:  		/* addi R10, R10, -2 */
		/* 821CB32Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 821CB32Ch case    4:*/		return 0x821CB330;
	}
	return 0x821CB330;
} // Block from 821CB31Ch-821CB330h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB330);
		  /* 821CB330h */ case    0:  		/* addic R8, R8, -1 */
		/* 821CB330h case    0:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821CB330h case    0:*/		return 0x821CB334;
		  /* 821CB334h */ case    1:  		/* or R11, R11, R10 */
		/* 821CB334h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CB334h case    1:*/		return 0x821CB338;
		  /* 821CB338h */ case    2:  		/* subfe R10, R8, R8 */
		/* 821CB338h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R8,regs.R8);
		/* 821CB338h case    2:*/		return 0x821CB33C;
		  /* 821CB33Ch */ case    3:  		/* and R10, R10, R9 */
		/* 821CB33Ch case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CB33Ch case    3:*/		return 0x821CB340;
		  /* 821CB340h */ case    4:  		/* stw R11, <#[R10 + 24]> */
		/* 821CB340h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821CB340h case    4:*/		return 0x821CB344;
		  /* 821CB344h */ case    5:  		/* b 304 */
		/* 821CB344h case    5:*/		return 0x821CB474;
		/* 821CB344h case    5:*/		return 0x821CB348;
	}
	return 0x821CB348;
} // Block from 821CB330h-821CB348h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CB348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB348);
		  /* 821CB348h */ case    0:  		/* lwz R11, <#[R11 + 36]> */
		/* 821CB348h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821CB348h case    0:*/		return 0x821CB34C;
		  /* 821CB34Ch */ case    1:  		/* rlwinm. R7, R11, 0, 27, 28 */
		/* 821CB34Ch case    1:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R7,regs.R11);
		/* 821CB34Ch case    1:*/		return 0x821CB350;
		  /* 821CB350h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821CB350h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CB364;  }
		/* 821CB350h case    2:*/		return 0x821CB354;
		  /* 821CB354h */ case    3:  		/* rlwinm. R7, R10, 0, 27, 28 */
		/* 821CB354h case    3:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R7,regs.R10);
		/* 821CB354h case    3:*/		return 0x821CB358;
		  /* 821CB358h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB358h case    4:*/		if ( regs.CR[0].eq ) { return 0x821CB364;  }
		/* 821CB358h case    4:*/		return 0x821CB35C;
		  /* 821CB35Ch */ case    5:  		/* li R11, 0 */
		/* 821CB35Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CB35Ch case    5:*/		return 0x821CB360;
		  /* 821CB360h */ case    6:  		/* b 44 */
		/* 821CB360h case    6:*/		return 0x821CB38C;
		/* 821CB360h case    6:*/		return 0x821CB364;
	}
	return 0x821CB364;
} // Block from 821CB348h-821CB364h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CB364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB364);
		  /* 821CB364h */ case    0:  		/* rlwinm. R7, R11, 0, 30, 30 */
		/* 821CB364h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R11);
		/* 821CB364h case    0:*/		return 0x821CB368;
		  /* 821CB368h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB368h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB374;  }
		/* 821CB368h case    1:*/		return 0x821CB36C;
		  /* 821CB36Ch */ case    2:  		/* rlwinm. R7, R10, 0, 31, 31 */
		/* 821CB36Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R10);
		/* 821CB36Ch case    2:*/		return 0x821CB370;
		  /* 821CB370h */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821CB370h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821CB35C;  }
		/* 821CB370h case    3:*/		return 0x821CB374;
	}
	return 0x821CB374;
} // Block from 821CB364h-821CB374h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB374);
		  /* 821CB374h */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821CB374h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821CB374h case    0:*/		return 0x821CB378;
		  /* 821CB378h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB378h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB388;  }
		/* 821CB378h case    1:*/		return 0x821CB37C;
		  /* 821CB37Ch */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821CB37Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CB37Ch case    2:*/		return 0x821CB380;
		  /* 821CB380h */ case    3:  		/* li R11, 0 */
		/* 821CB380h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821CB380h case    3:*/		return 0x821CB384;
		  /* 821CB384h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821CB384h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821CB38C;  }
		/* 821CB384h case    4:*/		return 0x821CB388;
	}
	return 0x821CB388;
} // Block from 821CB374h-821CB388h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB388);
		  /* 821CB388h */ case    0:  		/* li R11, 1 */
		/* 821CB388h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB388h case    0:*/		return 0x821CB38C;
	}
	return 0x821CB38C;
} // Block from 821CB388h-821CB38Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB38C);
		  /* 821CB38Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB38Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB38Ch case    0:*/		return 0x821CB390;
		  /* 821CB390h */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 821CB390h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB3F8;  }
		/* 821CB390h case    1:*/		return 0x821CB394;
		  /* 821CB394h */ case    2:  		/* addic R11, R8, -1 */
		/* 821CB394h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 821CB394h case    2:*/		return 0x821CB398;
		  /* 821CB398h */ case    3:  		/* subfe R11, R11, R11 */
		/* 821CB398h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821CB398h case    3:*/		return 0x821CB39C;
		  /* 821CB39Ch */ case    4:  		/* and R11, R11, R9 */
		/* 821CB39Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821CB39Ch case    4:*/		return 0x821CB3A0;
		  /* 821CB3A0h */ case    5:  		/* lwz R11, <#[R11 + 36]> */
		/* 821CB3A0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821CB3A0h case    5:*/		return 0x821CB3A4;
		  /* 821CB3A4h */ case    6:  		/* rlwinm. R7, R11, 0, 29, 29 */
		/* 821CB3A4h case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R11);
		/* 821CB3A4h case    6:*/		return 0x821CB3A8;
		  /* 821CB3A8h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB3A8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821CB3B8;  }
		/* 821CB3A8h case    7:*/		return 0x821CB3AC;
		  /* 821CB3ACh */ case    8:  		/* rlwinm. R7, R10, 0, 30, 30 */
		/* 821CB3ACh case    8:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R10);
		/* 821CB3ACh case    8:*/		return 0x821CB3B0;
		  /* 821CB3B0h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821CB3B0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CB3B8;  }
		/* 821CB3B0h case    9:*/		return 0x821CB3B4;
		  /* 821CB3B4h */ case   10:  		/* addi R11, R11, -4 */
		/* 821CB3B4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CB3B4h case   10:*/		return 0x821CB3B8;
	}
	return 0x821CB3B8;
} // Block from 821CB38Ch-821CB3B8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821CB3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB3B8);
		  /* 821CB3B8h */ case    0:  		/* and R7, R11, R10 */
		/* 821CB3B8h case    0:*/		cpu::op::and<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821CB3B8h case    0:*/		return 0x821CB3BC;
		  /* 821CB3BCh */ case    1:  		/* rlwinm. R7, R7, 0, 29, 29 */
		/* 821CB3BCh case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R7,regs.R7);
		/* 821CB3BCh case    1:*/		return 0x821CB3C0;
		  /* 821CB3C0h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821CB3C0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821CB3CC;  }
		/* 821CB3C0h case    2:*/		return 0x821CB3C4;
		  /* 821CB3C4h */ case    3:  		/* addi R11, R11, -4 */
		/* 821CB3C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821CB3C4h case    3:*/		return 0x821CB3C8;
		  /* 821CB3C8h */ case    4:  		/* addi R10, R10, -4 */
		/* 821CB3C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821CB3C8h case    4:*/		return 0x821CB3CC;
	}
	return 0x821CB3CC;
} // Block from 821CB3B8h-821CB3CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB3CC);
		  /* 821CB3CCh */ case    0:  		/* rlwinm. R7, R11, 0, 31, 31 */
		/* 821CB3CCh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R11);
		/* 821CB3CCh case    0:*/		return 0x821CB3D0;
		  /* 821CB3D0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821CB3D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821CB3E0;  }
		/* 821CB3D0h case    1:*/		return 0x821CB3D4;
		  /* 821CB3D4h */ case    2:  		/* rlwinm. R7, R10, 0, 30, 30 */
		/* 821CB3D4h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R7,regs.R10);
		/* 821CB3D4h case    2:*/		return 0x821CB3D8;
		  /* 821CB3D8h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821CB3D8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821CB3E0;  }
		/* 821CB3D8h case    3:*/		return 0x821CB3DC;
		  /* 821CB3DCh */ case    4:  		/* addi R10, R10, -2 */
		/* 821CB3DCh case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 821CB3DCh case    4:*/		return 0x821CB3E0;
	}
	return 0x821CB3E0;
} // Block from 821CB3CCh-821CB3E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB3E0);
		  /* 821CB3E0h */ case    0:  		/* addic R8, R8, -1 */
		/* 821CB3E0h case    0:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821CB3E0h case    0:*/		return 0x821CB3E4;
		  /* 821CB3E4h */ case    1:  		/* or R11, R11, R10 */
		/* 821CB3E4h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CB3E4h case    1:*/		return 0x821CB3E8;
		  /* 821CB3E8h */ case    2:  		/* subfe R10, R8, R8 */
		/* 821CB3E8h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R8,regs.R8);
		/* 821CB3E8h case    2:*/		return 0x821CB3EC;
		  /* 821CB3ECh */ case    3:  		/* and R10, R10, R9 */
		/* 821CB3ECh case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821CB3ECh case    3:*/		return 0x821CB3F0;
		  /* 821CB3F0h */ case    4:  		/* stw R11, <#[R10 + 36]> */
		/* 821CB3F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000024) );
		/* 821CB3F0h case    4:*/		return 0x821CB3F4;
		  /* 821CB3F4h */ case    5:  		/* b 128 */
		/* 821CB3F4h case    5:*/		return 0x821CB474;
		/* 821CB3F4h case    5:*/		return 0x821CB3F8;
	}
	return 0x821CB3F8;
} // Block from 821CB3E0h-821CB3F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821CB3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB3F8);
		  /* 821CB3F8h */ case    0:  		/* mr R3, R28 */
		/* 821CB3F8h case    0:*/		regs.R3 = regs.R28;
		/* 821CB3F8h case    0:*/		return 0x821CB3FC;
		  /* 821CB3FCh */ case    1:  		/* bl 157404 */
		/* 821CB3FCh case    1:*/		regs.LR = 0x821CB400; return 0x821F1AD8;
		/* 821CB3FCh case    1:*/		return 0x821CB400;
		  /* 821CB400h */ case    2:  		/* lwz R11, <#[R1 + 88]> */
		/* 821CB400h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB400h case    2:*/		return 0x821CB404;
	}
	return 0x821CB404;
} // Block from 821CB3F8h-821CB404h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB404);
		  /* 821CB404h */ case    0:  		/* lwz R10, <#[R29]> */
		/* 821CB404h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821CB404h case    0:*/		return 0x821CB408;
		  /* 821CB408h */ case    1:  		/* mr R31, R11 */
		/* 821CB408h case    1:*/		regs.R31 = regs.R11;
		/* 821CB408h case    1:*/		return 0x821CB40C;
		  /* 821CB40Ch */ case    2:  		/* lwz R30, <#[R1 + 92]> */
		/* 821CB40Ch case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CB40Ch case    2:*/		return 0x821CB410;
		  /* 821CB410h */ case    3:  		/* lwz R29, <#[R1 + 96]> */
		/* 821CB410h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 821CB410h case    3:*/		return 0x821CB414;
		  /* 821CB414h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821CB414h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821CB414h case    4:*/		return 0x821CB418;
		  /* 821CB418h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821CB418h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821CB440;  }
		/* 821CB418h case    5:*/		return 0x821CB41C;
		  /* 821CB41Ch */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821CB41Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821CB41Ch case    6:*/		return 0x821CB420;
		  /* 821CB420h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821CB420h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821CB420h case    7:*/		return 0x821CB424;
		  /* 821CB424h */ case    8:  		/* addic. R10, R11, -4 */
		/* 821CB424h case    8:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R11,0xFFFFFFFC);
		/* 821CB424h case    8:*/		return 0x821CB428;
		  /* 821CB428h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821CB428h case    9:*/		if ( regs.CR[0].eq ) { return 0x821CB440;  }
		/* 821CB428h case    9:*/		return 0x821CB42C;
		  /* 821CB42Ch */ case   10:  		/* lwz R11, <#[R10 + 8]> */
		/* 821CB42Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB42Ch case   10:*/		return 0x821CB430;
		  /* 821CB430h */ case   11:  		/* lwz R9, <#[R10 + 12]> */
		/* 821CB430h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821CB430h case   11:*/		return 0x821CB434;
		  /* 821CB434h */ case   12:  		/* addi R11, R11, 1 */
		/* 821CB434h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821CB434h case   12:*/		return 0x821CB438;
		  /* 821CB438h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 821CB438h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821CB438h case   13:*/		return 0x821CB43C;
		  /* 821CB43Ch */ case   14:  		/* bc 4, CR6_GT, 20 */
		/* 821CB43Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x821CB450;  }
		/* 821CB43Ch case   14:*/		return 0x821CB440;
	}
	return 0x821CB440;
} // Block from 821CB404h-821CB440h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821CB440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB440);
		  /* 821CB440h */ case    0:  		/* li R4, 1 */
		/* 821CB440h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821CB440h case    0:*/		return 0x821CB444;
		  /* 821CB444h */ case    1:  		/* mr R3, R28 */
		/* 821CB444h case    1:*/		regs.R3 = regs.R28;
		/* 821CB444h case    1:*/		return 0x821CB448;
		  /* 821CB448h */ case    2:  		/* bl 157856 */
		/* 821CB448h case    2:*/		regs.LR = 0x821CB44C; return 0x821F1CE8;
		/* 821CB448h case    2:*/		return 0x821CB44C;
		  /* 821CB44Ch */ case    3:  		/* mr R10, R3 */
		/* 821CB44Ch case    3:*/		regs.R10 = regs.R3;
		/* 821CB44Ch case    3:*/		return 0x821CB450;
	}
	return 0x821CB450;
} // Block from 821CB440h-821CB450h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB450);
		  /* 821CB450h */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 821CB450h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB450h case    0:*/		return 0x821CB454;
		  /* 821CB454h */ case    1:  		/* mulli R11, R9, 12 */
		/* 821CB454h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R9,0xC);
		/* 821CB454h case    1:*/		return 0x821CB458;
		  /* 821CB458h */ case    2:  		/* add R11, R11, R10 */
		/* 821CB458h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CB458h case    2:*/		return 0x821CB45C;
		  /* 821CB45Ch */ case    3:  		/* addi R8, R9, 1 */
		/* 821CB45Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x1);
		/* 821CB45Ch case    3:*/		return 0x821CB460;
	}
	return 0x821CB460;
} // Block from 821CB450h-821CB460h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821CB460h
// Function '?ComputeExpressionCost@Compiler@D3DXShader@@AAAIPAV?$ArrayList@PAV?$ArrayList@UProductTerm@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB460);
		  /* 821CB460h */ case    0:  		/* addi R9, R11, 16 */
		/* 821CB460h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 821CB460h case    0:*/		return 0x821CB464;
		  /* 821CB464h */ case    1:  		/* stw R8, <#[R10 + 8]> */
		/* 821CB464h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 821CB464h case    1:*/		return 0x821CB468;
		  /* 821CB468h */ case    2:  		/* stw R31, <#[R11 + 16]> */
		/* 821CB468h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821CB468h case    2:*/		return 0x821CB46C;
		  /* 821CB46Ch */ case    3:  		/* stw R30, <#[R11 + 20]> */
		/* 821CB46Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000014) );
		/* 821CB46Ch case    3:*/		return 0x821CB470;
		  /* 821CB470h */ case    4:  		/* stw R29, <#[R11 + 24]> */
		/* 821CB470h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000018) );
		/* 821CB470h case    4:*/		return 0x821CB474;
	}
	return 0x821CB474;
} // Block from 821CB460h-821CB474h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821CB474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB474);
		  /* 821CB474h */ case    0:  		/* mr R3, R28 */
		/* 821CB474h case    0:*/		regs.R3 = regs.R28;
		/* 821CB474h case    0:*/		return 0x821CB478;
		  /* 821CB478h */ case    1:  		/* addi R1, R1, 160 */
		/* 821CB478h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821CB478h case    1:*/		return 0x821CB47C;
		  /* 821CB47Ch */ case    2:  		/* b -1286620 */
		/* 821CB47Ch case    2:*/		return 0x820912A0;
		/* 821CB47Ch case    2:*/		return 0x821CB480;
	}
	return 0x821CB480;
} // Block from 821CB474h-821CB480h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821CB480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB480);
		  /* 821CB480h */ case    0:  		/* mfspr R12, LR */
		/* 821CB480h case    0:*/		regs.R12 = regs.LR;
		/* 821CB480h case    0:*/		return 0x821CB484;
		  /* 821CB484h */ case    1:  		/* bl -1286720 */
		/* 821CB484h case    1:*/		regs.LR = 0x821CB488; return 0x82091244;
		/* 821CB484h case    1:*/		return 0x821CB488;
		  /* 821CB488h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821CB488h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821CB488h case    2:*/		return 0x821CB48C;
		  /* 821CB48Ch */ case    3:  		/* mr R30, R4 */
		/* 821CB48Ch case    3:*/		regs.R30 = regs.R4;
		/* 821CB48Ch case    3:*/		return 0x821CB490;
		  /* 821CB490h */ case    4:  		/* li R5, 58 */
		/* 821CB490h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x3A);
		/* 821CB490h case    4:*/		return 0x821CB494;
		  /* 821CB494h */ case    5:  		/* li R4, 8 */
		/* 821CB494h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CB494h case    5:*/		return 0x821CB498;
		  /* 821CB498h */ case    6:  		/* mr R31, R3 */
		/* 821CB498h case    6:*/		regs.R31 = regs.R3;
		/* 821CB498h case    6:*/		return 0x821CB49C;
		  /* 821CB49Ch */ case    7:  		/* bl -420780 */
		/* 821CB49Ch case    7:*/		regs.LR = 0x821CB4A0; return 0x821648F0;
		/* 821CB49Ch case    7:*/		return 0x821CB4A0;
		  /* 821CB4A0h */ case    8:  		/* addi R25, R3, 4 */
		/* 821CB4A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 821CB4A0h case    8:*/		return 0x821CB4A4;
		  /* 821CB4A4h */ case    9:  		/* ori R11, R3, 1 */
		/* 821CB4A4h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CB4A4h case    9:*/		return 0x821CB4A8;
		  /* 821CB4A8h */ case   10:  		/* ori R10, R25, 1 */
		/* 821CB4A8h case   10:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 821CB4A8h case   10:*/		return 0x821CB4AC;
		  /* 821CB4ACh */ case   11:  		/* stw R11, <#[R3 + 4]> */
		/* 821CB4ACh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB4ACh case   11:*/		return 0x821CB4B0;
		  /* 821CB4B0h */ case   12:  		/* mr R26, R3 */
		/* 821CB4B0h case   12:*/		regs.R26 = regs.R3;
		/* 821CB4B0h case   12:*/		return 0x821CB4B4;
		  /* 821CB4B4h */ case   13:  		/* stw R10, <#[R3]> */
		/* 821CB4B4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB4B4h case   13:*/		return 0x821CB4B8;
		  /* 821CB4B8h */ case   14:  		/* li R5, 51 */
		/* 821CB4B8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x33);
		/* 821CB4B8h case   14:*/		return 0x821CB4BC;
		  /* 821CB4BCh */ case   15:  		/* li R4, 8 */
		/* 821CB4BCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821CB4BCh case   15:*/		return 0x821CB4C0;
		  /* 821CB4C0h */ case   16:  		/* mr R3, R31 */
		/* 821CB4C0h case   16:*/		regs.R3 = regs.R31;
		/* 821CB4C0h case   16:*/		return 0x821CB4C4;
		  /* 821CB4C4h */ case   17:  		/* bl -420820 */
		/* 821CB4C4h case   17:*/		regs.LR = 0x821CB4C8; return 0x821648F0;
		/* 821CB4C4h case   17:*/		return 0x821CB4C8;
		  /* 821CB4C8h */ case   18:  		/* addi R24, R3, 4 */
		/* 821CB4C8h case   18:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x4);
		/* 821CB4C8h case   18:*/		return 0x821CB4CC;
		  /* 821CB4CCh */ case   19:  		/* ori R11, R3, 1 */
		/* 821CB4CCh case   19:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821CB4CCh case   19:*/		return 0x821CB4D0;
		  /* 821CB4D0h */ case   20:  		/* stw R30, <#[R1 + 120]> */
		/* 821CB4D0h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000078) );
		/* 821CB4D0h case   20:*/		return 0x821CB4D4;
		  /* 821CB4D4h */ case   21:  		/* ori R10, R24, 1 */
		/* 821CB4D4h case   21:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R24,0x1);
		/* 821CB4D4h case   21:*/		return 0x821CB4D8;
		  /* 821CB4D8h */ case   22:  		/* stw R11, <#[R3 + 4]> */
		/* 821CB4D8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB4D8h case   22:*/		return 0x821CB4DC;
		  /* 821CB4DCh */ case   23:  		/* li R23, 0 */
		/* 821CB4DCh case   23:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821CB4DCh case   23:*/		return 0x821CB4E0;
		  /* 821CB4E0h */ case   24:  		/* stw R10, <#[R3]> */
		/* 821CB4E0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB4E0h case   24:*/		return 0x821CB4E4;
		  /* 821CB4E4h */ case   25:  		/* mr R27, R3 */
		/* 821CB4E4h case   25:*/		regs.R27 = regs.R3;
		/* 821CB4E4h case   25:*/		return 0x821CB4E8;
		  /* 821CB4E8h */ case   26:  		/* lwz R11, <#[R30 + 4]> */
		/* 821CB4E8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821CB4E8h case   26:*/		return 0x821CB4EC;
		  /* 821CB4ECh */ case   27:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CB4ECh case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB4ECh case   27:*/		return 0x821CB4F0;
		  /* 821CB4F0h */ case   28:  		/* addic R10, R10, -1 */
		/* 821CB4F0h case   28:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CB4F0h case   28:*/		return 0x821CB4F4;
		  /* 821CB4F4h */ case   29:  		/* stw R23, <#[R1 + 128]> */
		/* 821CB4F4h case   29:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000080) );
		/* 821CB4F4h case   29:*/		return 0x821CB4F8;
		  /* 821CB4F8h */ case   30:  		/* subfe R10, R10, R10 */
		/* 821CB4F8h case   30:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CB4F8h case   30:*/		return 0x821CB4FC;
		  /* 821CB4FCh */ case   31:  		/* and R11, R10, R11 */
		/* 821CB4FCh case   31:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB4FCh case   31:*/		return 0x821CB500;
		  /* 821CB500h */ case   32:  		/* stw R11, <#[R1 + 124]> */
		/* 821CB500h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 821CB500h case   32:*/		return 0x821CB504;
		  /* 821CB504h */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 821CB504h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CB504h case   33:*/		return 0x821CB508;
		  /* 821CB508h */ case   34:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB508h case   34:*/		if ( regs.CR[6].eq ) { return 0x821CB520;  }
		/* 821CB508h case   34:*/		return 0x821CB50C;
		  /* 821CB50Ch */ case   35:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CB50Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB50Ch case   35:*/		return 0x821CB510;
		  /* 821CB510h */ case   36:  		/* lwz R10, <#[R1 + 128]> */
		/* 821CB510h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 821CB510h case   36:*/		return 0x821CB514;
		  /* 821CB514h */ case   37:  		/* cmplw CR6, R10, R11 */
		/* 821CB514h case   37:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CB514h case   37:*/		return 0x821CB518;
		  /* 821CB518h */ case   38:  		/* mr R11, R23 */
		/* 821CB518h case   38:*/		regs.R11 = regs.R23;
		/* 821CB518h case   38:*/		return 0x821CB51C;
		  /* 821CB51Ch */ case   39:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB51Ch case   39:*/		if ( !regs.CR[6].eq ) { return 0x821CB524;  }
		/* 821CB51Ch case   39:*/		return 0x821CB520;
	}
	return 0x821CB520;
} // Block from 821CB480h-821CB520h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821CB520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB520);
		  /* 821CB520h */ case    0:  		/* li R11, 1 */
		/* 821CB520h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB520h case    0:*/		return 0x821CB524;
	}
	return 0x821CB524;
} // Block from 821CB520h-821CB524h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB524);
		  /* 821CB524h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB524h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB524h case    0:*/		return 0x821CB528;
		  /* 821CB528h */ case    1:  		/* bc 4, CR0_EQ, 640 */
		/* 821CB528h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB7A8;  }
		/* 821CB528h case    1:*/		return 0x821CB52C;
		  /* 821CB52Ch */ case    2:  		/* addi R3, R1, 120 */
		/* 821CB52Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x78);
		/* 821CB52Ch case    2:*/		return 0x821CB530;
		  /* 821CB530h */ case    3:  		/* bl -42792 */
		/* 821CB530h case    3:*/		regs.LR = 0x821CB534; return 0x821C0E08;
		/* 821CB530h case    3:*/		return 0x821CB534;
		  /* 821CB534h */ case    4:  		/* lwz R28, <#[R3]> */
		/* 821CB534h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB534h case    4:*/		return 0x821CB538;
		  /* 821CB538h */ case    5:  		/* stw R23, <#[R1 + 96]> */
		/* 821CB538h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000060) );
		/* 821CB538h case    5:*/		return 0x821CB53C;
		  /* 821CB53Ch */ case    6:  		/* lwz R11, <#[R28 + 4]> */
		/* 821CB53Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821CB53Ch case    6:*/		return 0x821CB540;
		  /* 821CB540h */ case    7:  		/* stw R28, <#[R1 + 88]> */
		/* 821CB540h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821CB540h case    7:*/		return 0x821CB544;
		  /* 821CB544h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CB544h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB544h case    8:*/		return 0x821CB548;
		  /* 821CB548h */ case    9:  		/* addic R10, R10, -1 */
		/* 821CB548h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CB548h case    9:*/		return 0x821CB54C;
		  /* 821CB54Ch */ case   10:  		/* subfe R10, R10, R10 */
		/* 821CB54Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CB54Ch case   10:*/		return 0x821CB550;
		  /* 821CB550h */ case   11:  		/* and R11, R10, R11 */
		/* 821CB550h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB550h case   11:*/		return 0x821CB554;
		  /* 821CB554h */ case   12:  		/* stw R11, <#[R1 + 92]> */
		/* 821CB554h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CB554h case   12:*/		return 0x821CB558;
		  /* 821CB558h */ case   13:  		/* lwz R11, <#[R1 + 92]> */
		/* 821CB558h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821CB558h case   13:*/		return 0x821CB55C;
		  /* 821CB55Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821CB55Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CB55Ch case   14:*/		return 0x821CB560;
		  /* 821CB560h */ case   15:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB560h case   15:*/		if ( regs.CR[6].eq ) { return 0x821CB578;  }
		/* 821CB560h case   15:*/		return 0x821CB564;
		  /* 821CB564h */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CB564h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB564h case   16:*/		return 0x821CB568;
		  /* 821CB568h */ case   17:  		/* lwz R10, <#[R1 + 96]> */
		/* 821CB568h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821CB568h case   17:*/		return 0x821CB56C;
		  /* 821CB56Ch */ case   18:  		/* cmplw CR6, R10, R11 */
		/* 821CB56Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CB56Ch case   18:*/		return 0x821CB570;
		  /* 821CB570h */ case   19:  		/* mr R11, R23 */
		/* 821CB570h case   19:*/		regs.R11 = regs.R23;
		/* 821CB570h case   19:*/		return 0x821CB574;
		  /* 821CB574h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB574h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821CB57C;  }
		/* 821CB574h case   20:*/		return 0x821CB578;
	}
	return 0x821CB578;
} // Block from 821CB524h-821CB578h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821CB578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB578);
		  /* 821CB578h */ case    0:  		/* li R11, 1 */
		/* 821CB578h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB578h case    0:*/		return 0x821CB57C;
	}
	return 0x821CB57C;
} // Block from 821CB578h-821CB57Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB57C);
		  /* 821CB57Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB57Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB57Ch case    0:*/		return 0x821CB580;
		  /* 821CB580h */ case    1:  		/* bc 4, CR0_EQ, 544 */
		/* 821CB580h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB7A0;  }
		/* 821CB580h case    1:*/		return 0x821CB584;
		  /* 821CB584h */ case    2:  		/* addi R3, R1, 88 */
		/* 821CB584h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 821CB584h case    2:*/		return 0x821CB588;
		  /* 821CB588h */ case    3:  		/* bl -42968 */
		/* 821CB588h case    3:*/		regs.LR = 0x821CB58C; return 0x821C0DB0;
		/* 821CB588h case    3:*/		return 0x821CB58C;
		  /* 821CB58Ch */ case    4:  		/* mr R31, R3 */
		/* 821CB58Ch case    4:*/		regs.R31 = regs.R3;
		/* 821CB58Ch case    4:*/		return 0x821CB590;
		  /* 821CB590h */ case    5:  		/* mr R3, R27 */
		/* 821CB590h case    5:*/		regs.R3 = regs.R27;
		/* 821CB590h case    5:*/		return 0x821CB594;
		  /* 821CB594h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821CB594h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821CB594h case    6:*/		return 0x821CB598;
		  /* 821CB598h */ case    7:  		/* ld R4, <#[R31]> */
		/* 821CB598h case    7:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB598h case    7:*/		return 0x821CB59C;
		  /* 821CB59Ch */ case    8:  		/* rldicr R5, R11, 32, 63 */
		/* 821CB59Ch case    8:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R5,regs.R11);
		/* 821CB59Ch case    8:*/		return 0x821CB5A0;
		  /* 821CB5A0h */ case    9:  		/* bl -17216 */
		/* 821CB5A0h case    9:*/		regs.LR = 0x821CB5A4; return 0x821C7260;
		/* 821CB5A0h case    9:*/		return 0x821CB5A4;
		  /* 821CB5A4h */ case   10:  		/* mr R29, R3 */
		/* 821CB5A4h case   10:*/		regs.R29 = regs.R3;
		/* 821CB5A4h case   10:*/		return 0x821CB5A8;
		  /* 821CB5A8h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 821CB5A8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821CB5A8h case   11:*/		return 0x821CB5AC;
		  /* 821CB5ACh */ case   12:  		/* bc 12, CR6_EQ, 288 */
		/* 821CB5ACh case   12:*/		if ( regs.CR[6].eq ) { return 0x821CB6CC;  }
		/* 821CB5ACh case   12:*/		return 0x821CB5B0;
		  /* 821CB5B0h */ case   13:  		/* lwz R11, <#[R28 + 4]> */
		/* 821CB5B0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821CB5B0h case   13:*/		return 0x821CB5B4;
		  /* 821CB5B4h */ case   14:  		/* mr R30, R23 */
		/* 821CB5B4h case   14:*/		regs.R30 = regs.R23;
		/* 821CB5B4h case   14:*/		return 0x821CB5B8;
		  /* 821CB5B8h */ case   15:  		/* stw R23, <#[R1 + 112]> */
		/* 821CB5B8h case   15:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 821CB5B8h case   15:*/		return 0x821CB5BC;
		  /* 821CB5BCh */ case   16:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821CB5BCh case   16:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821CB5BCh case   16:*/		return 0x821CB5C0;
		  /* 821CB5C0h */ case   17:  		/* stw R28, <#[R1 + 104]> */
		/* 821CB5C0h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000068) );
		/* 821CB5C0h case   17:*/		return 0x821CB5C4;
		  /* 821CB5C4h */ case   18:  		/* addic R10, R10, -1 */
		/* 821CB5C4h case   18:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821CB5C4h case   18:*/		return 0x821CB5C8;
		  /* 821CB5C8h */ case   19:  		/* subfe R10, R10, R10 */
		/* 821CB5C8h case   19:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821CB5C8h case   19:*/		return 0x821CB5CC;
		  /* 821CB5CCh */ case   20:  		/* and R11, R10, R11 */
		/* 821CB5CCh case   20:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821CB5CCh case   20:*/		return 0x821CB5D0;
		  /* 821CB5D0h */ case   21:  		/* stw R11, <#[R1 + 108]> */
		/* 821CB5D0h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CB5D0h case   21:*/		return 0x821CB5D4;
		  /* 821CB5D4h */ case   22:  		/* b 8 */
		/* 821CB5D4h case   22:*/		return 0x821CB5DC;
		/* 821CB5D4h case   22:*/		return 0x821CB5D8;
		  /* 821CB5D8h */ case   23:  		/* lwz R11, <#[R1 + 108]> */
		/* 821CB5D8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821CB5D8h case   23:*/		return 0x821CB5DC;
	}
	return 0x821CB5DC;
} // Block from 821CB57Ch-821CB5DCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821CB5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB5DC);
		  /* 821CB5DCh */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821CB5DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821CB5DCh case    0:*/		return 0x821CB5E0;
		  /* 821CB5E0h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821CB5E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821CB5F8;  }
		/* 821CB5E0h case    1:*/		return 0x821CB5E4;
		  /* 821CB5E4h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821CB5E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821CB5E4h case    2:*/		return 0x821CB5E8;
		  /* 821CB5E8h */ case    3:  		/* lwz R10, <#[R1 + 112]> */
		/* 821CB5E8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821CB5E8h case    3:*/		return 0x821CB5EC;
		  /* 821CB5ECh */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821CB5ECh case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821CB5ECh case    4:*/		return 0x821CB5F0;
		  /* 821CB5F0h */ case    5:  		/* mr R11, R23 */
		/* 821CB5F0h case    5:*/		regs.R11 = regs.R23;
		/* 821CB5F0h case    5:*/		return 0x821CB5F4;
		  /* 821CB5F4h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821CB5F4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821CB5FC;  }
		/* 821CB5F4h case    6:*/		return 0x821CB5F8;
	}
	return 0x821CB5F8;
} // Block from 821CB5DCh-821CB5F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821CB5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB5F8);
		  /* 821CB5F8h */ case    0:  		/* li R11, 1 */
		/* 821CB5F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB5F8h case    0:*/		return 0x821CB5FC;
	}
	return 0x821CB5FC;
} // Block from 821CB5F8h-821CB5FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821CB5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821CB5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821CB5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821CB5FC);
		  /* 821CB5FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821CB5FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821CB5FCh case    0:*/		return 0x821CB600;
		  /* 821CB600h */ case    1:  		/* bc 4, CR0_EQ, 92 */
		/* 821CB600h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821CB65C;  }
		/* 821CB600h case    1:*/		return 0x821CB604;
		  /* 821CB604h */ case    2:  		/* addi R3, R1, 104 */
		/* 821CB604h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 821CB604h case    2:*/		return 0x821CB608;
		  /* 821CB608h */ case    3:  		/* bl -43096 */
		/* 821CB608h case    3:*/		regs.LR = 0x821CB60C; return 0x821C0DB0;
		/* 821CB608h case    3:*/		return 0x821CB60C;
		  /* 821CB60Ch */ case    4:  		/* cmplw CR6, R3, R31 */
		/* 821CB60Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 821CB60Ch case    4:*/		return 0x821CB610;
		  /* 821CB610h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 821CB610h case    5:*/		if ( regs.CR[6].eq ) { return 0x821CB65C;  }
		/* 821CB610h case    5:*/		return 0x821CB614;
		  /* 821CB614h */ case    6:  		/* lwz R11, <#[R3]> */
		/* 821CB614h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821CB614h case    6:*/		return 0x821CB618;
		  /* 821CB618h */ case    7:  		/* lwz R10, <#[R31]> */
		/* 821CB618h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821CB618h case    7:*/		return 0x821CB61C;
		  /* 821CB61Ch */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821CB61Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821CB61Ch case    8:*/		return 0x821CB620;
		  /* 821CB620h */ case    9:  		/* bc 4, CR6_EQ, 44 */
		/* 821CB620h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821CB64C;  }
		/* 821CB620h case    9:*/		return 0x821CB624;
		  /* 821CB624h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821CB624h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821CB624h case   10:*/		return 0x821CB628;
		  /* 821CB628h */ case   11:  		/* lwz R10, <#[R31 + 4]> */
		/* 821CB628h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821CB628h case   11:*/		return 0x821CB62C;
		  /* 821CB62Ch */ case   12:  		/* cmpw CR6, R11, R10 */
		/* 821CB62Ch case   12:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821CB62Ch case   12:*/		return 0x821CB630;
		  /* 821CB630h */ case   13:  		/* bc 4, CR6_EQ, 28 */
		/* 821CB630h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821CB64C;  }
		/* 821CB630h case   13:*/		return 0x821CB634;
		  /* 821CB634h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 821CB634h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821CB634h case   14:*/		return 0x821CB638;
		  /* 821CB638h */ case   15:  		/* lwz R10, <#[R31 + 8]> */
		/* 821CB638h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821CB638h case   15:*/		return 0x821CB63C;
		  /* 821CB63Ch */ case   16:  		/* xor R11, R11, R10 */
		/* 821CB63Ch case   16:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821CB63Ch case   16:*/		return 0x821CB640;
		  /* 821CB640h */ case   17:  		/* rlwinm. R11, R11, 0, 30, 28 */
		/* 821CB640h case   17:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R11);
		/* 821CB640h case   17:*/		return 0x821CB644;
		  /* 821CB644h */ case   18:  		/* li R11, 1 */
		/* 821CB644h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821CB644h case   18:*/		return 0x821CB648;
		  /* 821CB648h */ case   19:  		/* bc 12, CR0_EQ, 8 */
		/* 821CB648h case   19:*/		if ( regs.CR[0].eq ) { return 0x821CB650;  }
		/* 821CB648h case   19:*/		return 0x821CB64C;
	}
	return 0x821CB64C;
} // Block from 821CB5FCh-821CB64Ch (20 instructions)

